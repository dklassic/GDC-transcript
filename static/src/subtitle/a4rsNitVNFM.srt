1
00:00:05,313 --> 00:00:06,854
My name is Robin Virich.

2
00:00:06,854 --> 00:00:09,736
I'm a gameplay and AI programmer at Cappy Games.

3
00:00:09,736 --> 00:00:12,358
In the last two and a half years or so,

4
00:00:12,358 --> 00:00:14,819
I've been working on Below.

5
00:00:14,819 --> 00:00:20,142
Below's this top-down survival exploration roguelike game

6
00:00:20,142 --> 00:00:22,003
where the player comes to an island,

7
00:00:22,003 --> 00:00:23,864
dives down into these depths,

8
00:00:23,864 --> 00:00:25,786
and explores the world,

9
00:00:25,786 --> 00:00:28,507
fighting enemies, trying to stay alive.

10
00:00:29,643 --> 00:00:31,864
My part in Below was building the Dark,

11
00:00:31,864 --> 00:00:35,227
which is this complicated tentacle monster enemy.

12
00:00:35,227 --> 00:00:37,368
And today I'm gonna be talking about

13
00:00:37,368 --> 00:00:40,750
the process of building the Dark.

14
00:00:40,750 --> 00:00:43,832
But to start, we'll start with a short video

15
00:00:43,832 --> 00:00:45,313
of the Dark and some of its behaviors.

16
00:00:45,313 --> 00:00:48,215
Starting out a little sneaky here.

17
00:00:57,660 --> 00:01:16,606
Moving into some more world interactions, messing around with other enemies in the world.

18
00:01:16,606 --> 00:01:18,267
And then into full combat encounters.

19
00:01:45,646 --> 00:01:46,034
Okay.

20
00:01:47,455 --> 00:01:48,735
So what is the Dark?

21
00:01:48,735 --> 00:01:51,137
The Dark is this tentacle monster, obviously.

22
00:01:51,137 --> 00:01:54,058
It's this omnipotent ancient evil

23
00:01:54,058 --> 00:01:56,140
that's been sealed away in the island

24
00:01:56,140 --> 00:01:58,181
with this godlike intelligence.

25
00:01:58,181 --> 00:01:59,782
But it's also something that's really sadistic

26
00:01:59,782 --> 00:02:01,823
and natural and animalistic.

27
00:02:01,823 --> 00:02:04,665
We often talk about like a cat with a mouse,

28
00:02:04,665 --> 00:02:06,546
sort of playing with its food sort of style.

29
00:02:06,546 --> 00:02:09,707
And there's a thematic balance between these two things,

30
00:02:09,707 --> 00:02:13,450
between the planned cohesive intelligence of the Dark

31
00:02:13,450 --> 00:02:15,431
and this reactive animalistic nature.

32
00:02:16,527 --> 00:02:17,788
And so today I'm gonna be talking about

33
00:02:17,788 --> 00:02:19,708
the iterative dev process,

34
00:02:19,708 --> 00:02:22,530
going, building this crazy thing.

35
00:02:22,530 --> 00:02:26,131
Some of the unique challenges and technical solutions

36
00:02:26,131 --> 00:02:27,632
that we had to come up with

37
00:02:27,632 --> 00:02:31,373
to solve these increasingly complicated problems.

38
00:02:31,373 --> 00:02:33,714
Okay, so let's get started with some background.

39
00:02:33,714 --> 00:02:35,415
So a dark tentacle is a 30 bone mesh.

40
00:02:35,415 --> 00:02:41,797
You can see it playing this bespoke squirmy idle animation.

41
00:02:41,797 --> 00:02:43,338
So we have a pipeline from Maya

42
00:02:43,338 --> 00:02:44,898
to create these sort of animations.

43
00:02:46,085 --> 00:02:49,886
And then on top of that, there's a second layer, which is a kinematic chain.

44
00:02:49,886 --> 00:02:53,527
And this is kind of the core of all the movement of the dark in the game.

45
00:02:53,527 --> 00:02:58,388
I'm moving around a base node here, and there's also a tip target node,

46
00:02:58,388 --> 00:03:00,048
which is sort of where the dark is looking at.

47
00:03:00,048 --> 00:03:02,449
It's the inverse kinematic target of the tentacle.

48
00:03:02,449 --> 00:03:08,270
And the AI is going to be moving both of these two pieces around the base and tip target.

49
00:03:09,667 --> 00:03:11,047
And then we blend these together.

50
00:03:11,047 --> 00:03:14,250
So we can create separating, sorry,

51
00:03:14,250 --> 00:03:18,152
we can separate AI logic from the animation

52
00:03:18,152 --> 00:03:20,434
by basically building it into a blend tree.

53
00:03:20,434 --> 00:03:22,475
So you can see I'm moving it around,

54
00:03:22,475 --> 00:03:24,456
but it's also playing this sort of idle animation

55
00:03:24,456 --> 00:03:25,937
in the background.

56
00:03:25,937 --> 00:03:27,679
And we can change either of these things independently,

57
00:03:27,679 --> 00:03:29,180
which helps the pipeline.

58
00:03:29,180 --> 00:03:33,442
From a code standpoint, there's a base entity

59
00:03:33,442 --> 00:03:34,923
and there's a tip target entity, like I said.

60
00:03:36,477 --> 00:03:39,258
And the C++, sorry, the C++ side

61
00:03:39,258 --> 00:03:41,500
that's pumping updates into the Lua behaviors.

62
00:03:41,500 --> 00:03:43,661
It's, on the Lua side,

63
00:03:43,661 --> 00:03:46,523
there's a Lua hierarchical finite state machine

64
00:03:46,523 --> 00:03:48,985
that has a behavior stack,

65
00:03:48,985 --> 00:03:51,446
and we can push and pop behaviors onto that stack.

66
00:03:51,446 --> 00:03:53,267
So in this example, we have like a stock behavior

67
00:03:53,267 --> 00:03:56,209
that's pursuing, and then if the player gets too close,

68
00:03:56,209 --> 00:03:57,690
it'll retreat and then go back to pursue.

69
00:03:57,690 --> 00:04:01,613
And then that Lua side can also call back

70
00:04:01,613 --> 00:04:03,594
into the C++ side to do more complicated things

71
00:04:03,594 --> 00:04:04,475
like movement or animation.

72
00:04:06,407 --> 00:04:08,028
Okay, so where do we start?

73
00:04:08,028 --> 00:04:10,370
We have these basic systems.

74
00:04:10,370 --> 00:04:12,652
We knew we wanted combat in the game,

75
00:04:12,652 --> 00:04:13,913
obviously, with this thing.

76
00:04:13,913 --> 00:04:16,636
So let's start with that.

77
00:04:16,636 --> 00:04:19,398
Let's move around a single tentacle and make it attack.

78
00:04:19,398 --> 00:04:23,722
So there's two parts of this.

79
00:04:23,722 --> 00:04:25,083
Simply move and attack.

80
00:04:25,083 --> 00:04:25,603
Start with move.

81
00:04:25,603 --> 00:04:30,107
So the movement system in the game is

82
00:04:31,955 --> 00:04:34,998
basically a function of taking a current position,

83
00:04:34,998 --> 00:04:36,979
which is the tip and base position,

84
00:04:36,979 --> 00:04:40,842
and a target position, pumping it through some move function

85
00:04:40,842 --> 00:04:42,683
and outputting a goal position.

86
00:04:42,683 --> 00:04:45,645
I'm not gonna be talking about locomotion.

87
00:04:45,645 --> 00:04:47,567
We'll just say that's handled separately

88
00:04:47,567 --> 00:04:49,488
and we'll start with ignoring clipping for now.

89
00:04:49,488 --> 00:04:54,572
So let's talk about a pursue behavior.

90
00:04:54,572 --> 00:04:56,894
We want to move the tip target to the player

91
00:04:56,894 --> 00:04:59,696
and then pull and push the base away.

92
00:05:01,421 --> 00:05:03,763
from that tip target.

93
00:05:03,763 --> 00:05:07,084
So we'll draw a line between the tip target and the player.

94
00:05:07,084 --> 00:05:09,366
We'll move it out by a little bit,

95
00:05:09,366 --> 00:05:12,067
then find a line between the base and the new tip target position,

96
00:05:12,067 --> 00:05:15,009
grab the length of the arm,

97
00:05:15,009 --> 00:05:21,732
and then starting from the tip target, pull back away from the player,

98
00:05:21,732 --> 00:05:24,894
and within a little bit of wiggle room, kind of place the base along that line.

99
00:05:24,894 --> 00:05:28,896
And then we get a final goal position out of this.

100
00:05:31,463 --> 00:05:33,884
So this works, and now we need to perform the attack,

101
00:05:33,884 --> 00:05:35,606
and this is very simply playing an attack animation.

102
00:05:35,606 --> 00:05:37,287
There's an attack system that's linked

103
00:05:37,287 --> 00:05:38,287
into the animation system.

104
00:05:38,287 --> 00:05:40,108
I won't get into detail on that.

105
00:05:40,108 --> 00:05:41,369
We're just gonna do this.

106
00:05:41,369 --> 00:05:44,972
So we have basic reactive movement.

107
00:05:44,972 --> 00:05:47,273
This works, but immediately we hit some problems.

108
00:05:47,273 --> 00:05:50,755
So this animation is actually the exact same

109
00:05:50,755 --> 00:05:52,276
attack animation that I showed before,

110
00:05:52,276 --> 00:05:56,259
but since the arm is in this weird state,

111
00:05:56,259 --> 00:05:58,200
the kinematic chain is in a weird position,

112
00:05:58,200 --> 00:06:01,122
the animation's blending poorly.

113
00:06:02,487 --> 00:06:03,067
How do we fix this?

114
00:06:03,067 --> 00:06:04,608
It's a very difficult problem.

115
00:06:04,608 --> 00:06:06,970
We started out saying, actually let's just not fix it.

116
00:06:06,970 --> 00:06:08,311
Let's keep the arm straight,

117
00:06:08,311 --> 00:06:11,313
which is kind of thematically what we wanted anyways.

118
00:06:11,313 --> 00:06:11,933
So that works out.

119
00:06:11,933 --> 00:06:13,995
And then we just introduced some constraints

120
00:06:13,995 --> 00:06:15,936
saying that you can't turn too much

121
00:06:15,936 --> 00:06:16,837
on the kinematic chains.

122
00:06:16,837 --> 00:06:18,438
You can't get into a super wonky position.

123
00:06:18,438 --> 00:06:22,541
And then also during those animations,

124
00:06:22,541 --> 00:06:23,962
we'll lock the kinematics.

125
00:06:23,962 --> 00:06:26,404
So we'll say, we don't want the kinematics

126
00:06:26,404 --> 00:06:27,925
to influence this during the attack.

127
00:06:30,393 --> 00:06:34,776
Using these constraints, our attacks are much more consistent and a lot less wonky.

128
00:06:34,776 --> 00:06:39,798
Clipping becomes an issue, obviously, immediately.

129
00:06:39,798 --> 00:06:40,839
You can't clip through walls.

130
00:06:40,839 --> 00:06:43,140
It's super unfair.

131
00:06:43,140 --> 00:06:47,222
We always kind of made the concession that we could clip through things while moving

132
00:06:47,222 --> 00:06:51,364
around a little bit, cover it up with some smoke and mirrors, like some particle effects

133
00:06:51,364 --> 00:06:52,605
or something.

134
00:06:52,605 --> 00:06:55,046
But you can't, it's unfair to attack a player through a wall.

135
00:06:57,826 --> 00:07:04,034
So to fix this we did some radial shapecasts, which basically just means shapecast around a target in a circle.

136
00:07:04,034 --> 00:07:05,836
And I'll go through that process quickly.

137
00:07:05,836 --> 00:07:09,721
So say we have this setup, we're trying to get to that player on the left there.

138
00:07:11,657 --> 00:07:14,359
We take a box shape, this is the shape we're going to cast,

139
00:07:14,359 --> 00:07:16,680
and see it's only a third of the arm.

140
00:07:16,680 --> 00:07:19,241
And that's because the player is really only ever interacting

141
00:07:19,241 --> 00:07:19,761
with the tip.

142
00:07:19,761 --> 00:07:23,623
We don't need the whole base to be,

143
00:07:23,623 --> 00:07:26,425
the whole tentacle rather to be,

144
00:07:26,425 --> 00:07:27,405
like not clipping through things.

145
00:07:27,405 --> 00:07:29,646
It's just the tip that we care about.

146
00:07:29,646 --> 00:07:31,727
And we make it a little bit larger than the arm

147
00:07:31,727 --> 00:07:34,168
to accommodate animations as well.

148
00:07:34,168 --> 00:07:35,989
This little wiggle room.

149
00:07:35,989 --> 00:07:37,390
So rotate this to face the target.

150
00:07:38,309 --> 00:07:40,690
and cast it forward, hits an obstacle.

151
00:07:40,690 --> 00:07:44,172
So we'll rotate out around, in a circle around the target

152
00:07:44,172 --> 00:07:45,792
in both directions, cast those.

153
00:07:45,792 --> 00:07:48,954
One of them hits the target, which means

154
00:07:48,954 --> 00:07:50,114
there's nothing in the way.

155
00:07:50,114 --> 00:07:52,715
That's good, we can go there.

156
00:07:52,715 --> 00:07:54,116
So adding on to that pursue behavior,

157
00:07:54,116 --> 00:07:56,297
we now have an unobstructed goal position.

158
00:07:56,297 --> 00:07:59,078
Then we pipe that into the pursue behavior

159
00:07:59,078 --> 00:08:00,059
to get our final position.

160
00:08:00,059 --> 00:08:05,681
So using shapecast, we can prevent clipping.

161
00:08:05,681 --> 00:08:08,002
We're able to move and attack reasonably fairly.

162
00:08:09,629 --> 00:08:12,130
But so this function of it's not really interesting.

163
00:08:12,130 --> 00:08:14,551
We didn't really want to introduce combat

164
00:08:14,551 --> 00:08:15,531
at the beginning of the game.

165
00:08:15,531 --> 00:08:17,032
We always wanted the dark to ramp up

166
00:08:17,032 --> 00:08:20,953
from sort of a foreshadowing, creepy, sneaky guy

167
00:08:20,953 --> 00:08:24,055
into something with a little more flavor,

168
00:08:24,055 --> 00:08:26,055
interacting with the world a bit more

169
00:08:26,055 --> 00:08:28,436
to something that's high difficulty combat

170
00:08:28,436 --> 00:08:29,637
with interesting fights.

171
00:08:29,637 --> 00:08:32,658
So the next obvious step is to add a little bit of flavor

172
00:08:32,658 --> 00:08:33,718
with these world interactions.

173
00:08:35,411 --> 00:08:37,313
So we wanted to add a little bit of personality.

174
00:08:37,313 --> 00:08:39,074
The dark inhabits this world,

175
00:08:39,074 --> 00:08:41,356
so we wanted to interact with it,

176
00:08:41,356 --> 00:08:42,317
create a bit of atmosphere.

177
00:08:42,317 --> 00:08:45,760
And the key point here is that the player

178
00:08:45,760 --> 00:08:47,822
is no longer the target.

179
00:08:47,822 --> 00:08:49,584
So some examples of these behaviors

180
00:08:49,584 --> 00:08:51,005
might be like eating rats,

181
00:08:51,005 --> 00:08:53,427
or like stealing gems off the level,

182
00:08:53,427 --> 00:08:54,128
or killing cultists.

183
00:08:54,128 --> 00:08:58,112
And I'm gonna talk about stealing gems today.

184
00:08:58,975 --> 00:09:00,537
So that looks something like this.

185
00:09:00,537 --> 00:09:03,660
The dark moves in, picks up the gem,

186
00:09:03,660 --> 00:09:06,503
and steals it off the level.

187
00:09:06,503 --> 00:09:09,426
The player needs gems in the game to refill their lantern

188
00:09:09,426 --> 00:09:12,290
and various other things, so it's pulling resources away

189
00:09:12,290 --> 00:09:12,750
from the player.

190
00:09:15,270 --> 00:09:17,350
So since the player is no longer the target,

191
00:09:17,350 --> 00:09:19,371
we immediately hit some issues where

192
00:09:19,371 --> 00:09:21,432
it's just ignoring the player.

193
00:09:21,432 --> 00:09:24,653
Obviously, if there's no code to make it react to the player,

194
00:09:24,653 --> 00:09:25,893
it's not gonna care.

195
00:09:25,893 --> 00:09:28,174
And the player starts being able to see

196
00:09:28,174 --> 00:09:30,475
the severed end of the base of the tentacle.

197
00:09:30,475 --> 00:09:32,656
Something actually I'll note here too

198
00:09:32,656 --> 00:09:34,396
is all these videos are debug videos.

199
00:09:34,396 --> 00:09:36,137
There's always fog around the player

200
00:09:36,137 --> 00:09:37,978
and they can only really see that first third

201
00:09:37,978 --> 00:09:39,158
that I showed in the shape cast video.

202
00:09:39,158 --> 00:09:43,440
Okay, so how do we prevent this non-reactive behavior?

203
00:09:44,933 --> 00:09:48,175
Back to the movement rules, we had push and pull before,

204
00:09:48,175 --> 00:09:50,456
we added obstructions, let's add some new ones.

205
00:09:50,456 --> 00:09:55,159
So we'll add keeping the base off the level

206
00:09:55,159 --> 00:09:56,960
and staying on the opposite side of the target.

207
00:09:56,960 --> 00:09:59,822
So you can see as the player's running around

208
00:09:59,822 --> 00:10:01,483
the gem there that's fallen,

209
00:10:01,483 --> 00:10:04,445
the arm is on the opposite side of the target.

210
00:10:08,865 --> 00:10:11,626
So these new rules allow a lot more reaction.

211
00:10:11,626 --> 00:10:13,467
We can target non-player targets

212
00:10:13,467 --> 00:10:15,828
and have the dark still react to the player.

213
00:10:15,828 --> 00:10:18,169
But this quickly explodes into

214
00:10:18,169 --> 00:10:20,049
a long function chain of rules.

215
00:10:20,049 --> 00:10:21,670
And what ends up happening with this

216
00:10:21,670 --> 00:10:25,812
is it's hard to guarantee any sort of behavior consistency.

217
00:10:25,812 --> 00:10:27,232
So I can say, like, steal a gem.

218
00:10:27,232 --> 00:10:28,693
It'll run through this and figure out

219
00:10:28,693 --> 00:10:29,953
where to go and do that.

220
00:10:29,953 --> 00:10:32,094
But I can't say steal a gem within three seconds.

221
00:10:33,715 --> 00:10:36,437
And every time that we ask it to steal a gem,

222
00:10:36,437 --> 00:10:37,618
it's taking a little bit longer.

223
00:10:37,618 --> 00:10:39,979
Or it depends on the situation, right?

224
00:10:39,979 --> 00:10:41,900
Like if there's a level with lots of stuff in the way,

225
00:10:41,900 --> 00:10:45,823
it might take a little different detour to get there.

226
00:10:45,823 --> 00:10:47,984
And it's kind of difficult to tune this.

227
00:10:47,984 --> 00:10:50,186
Like it's hard to add and remove things

228
00:10:50,186 --> 00:10:52,867
or know which order these things should be in.

229
00:10:52,867 --> 00:10:56,449
And there's a sort of implicit order of execution issue

230
00:10:56,449 --> 00:10:57,270
that's happening here.

231
00:10:57,270 --> 00:10:57,390
So.

232
00:11:01,492 --> 00:11:03,872
We have all these disparate concerns,

233
00:11:03,872 --> 00:11:04,993
let's move into a utility system.

234
00:11:04,993 --> 00:11:08,174
And the way that works is,

235
00:11:08,174 --> 00:11:10,655
we're gonna generate positions around the target,

236
00:11:10,655 --> 00:11:13,075
and we're gonna apply a score to each of these positions,

237
00:11:13,075 --> 00:11:14,136
and then choose the best score.

238
00:11:14,136 --> 00:11:16,657
So the first step of the process is just to remove

239
00:11:16,657 --> 00:11:18,777
any completely invalid positions,

240
00:11:18,777 --> 00:11:21,058
and in this case, the arms would be just clipping

241
00:11:21,058 --> 00:11:22,839
through some rocks or something.

242
00:11:22,839 --> 00:11:23,659
So we'll just get rid of those.

243
00:11:26,057 --> 00:11:28,658
And then we run through each of those different rules

244
00:11:28,658 --> 00:11:29,819
or heuristics individually.

245
00:11:29,819 --> 00:11:31,279
So line of sight might be an example.

246
00:11:31,279 --> 00:11:34,060
Like these ones aren't gonna be clipping into that rock,

247
00:11:34,060 --> 00:11:35,821
but they're not gonna be able to see past it,

248
00:11:35,821 --> 00:11:39,002
so it's worse than if there's an open space.

249
00:11:39,002 --> 00:11:40,723
Red is bad and green is good, just to make that clear.

250
00:11:40,723 --> 00:11:44,844
Also, travel distance is another example,

251
00:11:44,844 --> 00:11:47,325
if you wanted the arm to not move around too much,

252
00:11:47,325 --> 00:11:49,846
to not take a super long time to complete its task.

253
00:11:51,586 --> 00:11:53,188
And then in the end we combine these all together

254
00:11:53,188 --> 00:11:54,069
and find the best one.

255
00:11:54,069 --> 00:11:56,291
I'll just note that there's probably nine,

256
00:11:56,291 --> 00:11:59,214
I think, there's more than two rules in the system.

257
00:11:59,214 --> 00:12:03,298
Here's a quick video of an in-game tool

258
00:12:03,298 --> 00:12:04,499
that is showing this.

259
00:12:04,499 --> 00:12:06,361
So I have a selected arm and you can see

260
00:12:06,361 --> 00:12:08,243
as I'm running around the level,

261
00:12:08,243 --> 00:12:11,207
it's recalculating the best positions for the arm to be in

262
00:12:11,207 --> 00:12:13,529
based on the geometry and the rules that we've set up.

263
00:12:19,348 --> 00:12:20,609
So we've gone from something like this,

264
00:12:20,609 --> 00:12:22,510
which has this implicit order of execution,

265
00:12:22,510 --> 00:12:24,410
or behavior through order of execution,

266
00:12:24,410 --> 00:12:26,091
and something that's hard to change,

267
00:12:26,091 --> 00:12:28,052
to something a bit more flat,

268
00:12:28,052 --> 00:12:30,913
where we take the initial and goal position

269
00:12:30,913 --> 00:12:32,113
and score each one independently.

270
00:12:32,113 --> 00:12:34,934
And also, we have the ability

271
00:12:34,934 --> 00:12:37,415
to add configurable weights to this.

272
00:12:37,415 --> 00:12:38,736
So what this results in is, again,

273
00:12:38,736 --> 00:12:40,437
those order of execution concerns are gone

274
00:12:40,437 --> 00:12:43,018
because we're doing these all independently.

275
00:12:43,018 --> 00:12:44,378
It's really easy to add a rule to this.

276
00:12:46,095 --> 00:12:48,477
And since we're in this iterative process right now,

277
00:12:48,477 --> 00:12:50,359
or at this point in the process,

278
00:12:50,359 --> 00:12:54,122
we need to have something a little more extensible.

279
00:12:54,122 --> 00:12:55,383
And it's also easy to configure.

280
00:12:55,383 --> 00:12:58,146
We can say that we care more about avoiding the player

281
00:12:58,146 --> 00:12:59,987
than hiding the base or something like that.

282
00:12:59,987 --> 00:13:03,330
So this works.

283
00:13:03,330 --> 00:13:05,652
We have utility positioning.

284
00:13:05,652 --> 00:13:08,855
It's providing consistent and extensible movement.

285
00:13:09,944 --> 00:13:11,865
but we're still noticing that our positioning,

286
00:13:11,865 --> 00:13:16,308
or sorry, our pathing is looking a bit weird.

287
00:13:16,308 --> 00:13:18,569
So the paths up to this point

288
00:13:18,569 --> 00:13:20,331
are all circular around the target.

289
00:13:20,331 --> 00:13:24,593
And this makes the cross-level paths take a long time

290
00:13:24,593 --> 00:13:25,014
and also...

291
00:13:26,062 --> 00:13:29,263
Lateral movement with a tentacle looks weird.

292
00:13:29,263 --> 00:13:31,265
Like if a tentacle's moving like this,

293
00:13:31,265 --> 00:13:32,425
it just really looks unnatural.

294
00:13:32,425 --> 00:13:34,947
So it's better to kind of move forward and backward

295
00:13:34,947 --> 00:13:36,868
like this, pull out and kind of hide that

296
00:13:36,868 --> 00:13:37,688
and then pull back in.

297
00:13:37,688 --> 00:13:41,790
So to do that, we introduced a few different

298
00:13:41,790 --> 00:13:43,771
pathing strategies depending on the type of movement

299
00:13:43,771 --> 00:13:44,132
we were doing.

300
00:13:44,132 --> 00:13:46,833
So the first one's direct paths, simple quick movements.

301
00:13:46,833 --> 00:13:51,216
The second one is oval paths where the arm will pull out

302
00:13:51,216 --> 00:13:53,577
into the fog, do that lateral movement

303
00:13:53,577 --> 00:13:55,278
and then pull back into the final position.

304
00:13:56,857 --> 00:13:58,857
And then finally, the extension of that

305
00:13:58,857 --> 00:14:01,438
for very large movements is pulling out,

306
00:14:01,438 --> 00:14:02,498
teleporting, and moving back in.

307
00:14:02,498 --> 00:14:05,199
Okay, so this allows some faster movement,

308
00:14:05,199 --> 00:14:08,180
looks a little more natural.

309
00:14:08,180 --> 00:14:12,162
And we're interacting with the world a bit more now.

310
00:14:12,162 --> 00:14:14,482
So we have these world reactions working,

311
00:14:14,482 --> 00:14:16,743
things are extensible and configurable,

312
00:14:16,743 --> 00:14:17,903
but it still feels really empty

313
00:14:17,903 --> 00:14:19,824
because there's only one or two tentacles up to this point,

314
00:14:19,824 --> 00:14:21,405
so let's add some more tentacles.

315
00:14:23,590 --> 00:14:25,031
First thing we try is to crank up the tentacle count,

316
00:14:25,031 --> 00:14:27,712
and it's completely random chaos.

317
00:14:27,712 --> 00:14:28,433
It's insanity.

318
00:14:28,433 --> 00:14:30,815
All the arms are trying to kill the same rat

319
00:14:30,815 --> 00:14:32,816
at the same time because they're not communicating

320
00:14:32,816 --> 00:14:33,937
with each other.

321
00:14:33,937 --> 00:14:35,778
So we want to create something more cohesive.

322
00:14:35,778 --> 00:14:39,440
And there's three major questions that come up

323
00:14:39,440 --> 00:14:40,461
when we're working with this.

324
00:14:40,461 --> 00:14:42,522
The first one is how do we control those groups

325
00:14:42,522 --> 00:14:45,845
of tentacles to achieve the same sort of task?

326
00:14:45,845 --> 00:14:48,086
How do we choose what they do once we have

327
00:14:48,086 --> 00:14:49,907
that sort of control?

328
00:14:49,907 --> 00:14:51,128
And how does this scale up?

329
00:14:51,128 --> 00:14:52,029
How many arms can we do?

330
00:14:52,029 --> 00:14:53,230
How does this run on a computer?

331
00:14:55,588 --> 00:14:59,051
Let's start with the controlling tentacles.

332
00:14:59,051 --> 00:15:04,054
We created this concept of the dark brain, which is this cohesive center of the dark.

333
00:15:04,054 --> 00:15:09,759
It's going to manage the tentacle behaviors, the spawning and despawning of them, and make

334
00:15:09,759 --> 00:15:10,740
high-level decisions.

335
00:15:14,325 --> 00:15:18,570
We're into this, the fundamental issue here I think is

336
00:15:18,570 --> 00:15:20,552
groups versus individuals.

337
00:15:20,552 --> 00:15:23,034
So we want to be able to control

338
00:15:23,034 --> 00:15:25,217
these groups of tentacles to work together,

339
00:15:25,217 --> 00:15:27,018
but we still want them to act as individuals

340
00:15:27,018 --> 00:15:30,462
and respond to player input or world input.

341
00:15:30,462 --> 00:15:31,883
Like if the player hits a tentacle,

342
00:15:31,883 --> 00:15:33,685
we want it to have a hurt reaction.

343
00:15:35,542 --> 00:15:37,342
So we can move all of this into the brain,

344
00:15:37,342 --> 00:15:39,223
but that, we tried that,

345
00:15:39,223 --> 00:15:42,684
it quickly becomes hard to manage and change.

346
00:15:42,684 --> 00:15:44,405
And controlling every single small decision

347
00:15:44,405 --> 00:15:46,566
of every single arm, it just bloats everything

348
00:15:46,566 --> 00:15:49,327
and makes it unmanageable to work with.

349
00:15:49,327 --> 00:15:50,907
So where do we draw this line, essentially,

350
00:15:50,907 --> 00:15:52,128
of how much does the brain control

351
00:15:52,128 --> 00:15:53,168
and how much do the arms control?

352
00:15:53,168 --> 00:15:57,790
We introduce this concept of tasks to kind of manage this.

353
00:15:57,790 --> 00:16:00,931
So tasks are multi-arm behaviors,

354
00:16:00,931 --> 00:16:02,692
and they have assigned arms and a target.

355
00:16:04,171 --> 00:16:05,672
Some examples might be like eat enemy.

356
00:16:05,672 --> 00:16:07,173
You might have like three arms come in

357
00:16:07,173 --> 00:16:09,134
and kind of like eat an enemy up.

358
00:16:09,134 --> 00:16:11,276
And these are all managed by the dark brain.

359
00:16:11,276 --> 00:16:14,918
So these manage high-level goals.

360
00:16:14,918 --> 00:16:17,280
And arms are going to keep managing

361
00:16:17,280 --> 00:16:18,921
their own world reactions separately.

362
00:16:18,921 --> 00:16:21,382
And they're gonna communicate with each other,

363
00:16:21,382 --> 00:16:23,304
the task and the arms, through message passing,

364
00:16:23,304 --> 00:16:26,046
which I'll talk about in a second.

365
00:16:26,046 --> 00:16:28,267
And arms can refuse commands from tasks

366
00:16:28,267 --> 00:16:29,468
if they're in an invalid state.

367
00:16:30,915 --> 00:16:34,076
So as I mentioned, the tasks have a configured set

368
00:16:34,076 --> 00:16:35,896
of targets as well associated with them.

369
00:16:35,896 --> 00:16:37,696
So we set this up when we build a task.

370
00:16:37,696 --> 00:16:40,397
Like you can't steal the player, it just sort of makes sense.

371
00:16:40,397 --> 00:16:44,138
So let's go through this example of a two-arm attack task

372
00:16:44,138 --> 00:16:47,159
where we have two arms that come in and attack something.

373
00:16:47,159 --> 00:16:50,000
When the task is made, it needs some arms to run.

374
00:16:50,000 --> 00:16:52,940
So there's this pool of arms that the brain creates

375
00:16:52,940 --> 00:16:54,061
when it spawns in the world.

376
00:16:54,061 --> 00:16:57,542
The task is gonna choose a couple of arms from this pool.

377
00:16:59,082 --> 00:17:00,623
And those two arms are gonna be chosen

378
00:17:00,623 --> 00:17:02,223
and they're going to start in an idle state.

379
00:17:02,223 --> 00:17:06,024
So the first thing that happens is the task is running

380
00:17:06,024 --> 00:17:07,844
and it's like, okay, I need to start a pursuit.

381
00:17:07,844 --> 00:17:09,725
It asks arm six to start this approach.

382
00:17:09,725 --> 00:17:13,226
It's available, no problem, it starts pursuing.

383
00:17:13,226 --> 00:17:15,346
And then during that time, the player comes around

384
00:17:15,346 --> 00:17:16,427
and hits the other arm.

385
00:17:16,427 --> 00:17:18,567
And so it's in this hurt state,

386
00:17:18,567 --> 00:17:22,948
it's like kind of recoiling or retreating a little bit.

387
00:17:22,948 --> 00:17:27,289
And when the task asks that arm to do something,

388
00:17:27,289 --> 00:17:28,210
it can't, so it says no.

389
00:17:30,622 --> 00:17:32,103
So what do we do when it says no?

390
00:17:32,103 --> 00:17:35,185
The first thing you can do is just cancel out completely.

391
00:17:35,185 --> 00:17:38,208
The second option we found was much better

392
00:17:38,208 --> 00:17:39,529
is trading arms.

393
00:17:39,529 --> 00:17:43,812
So if the task has two arms associated with it,

394
00:17:43,812 --> 00:17:46,594
it's gonna find another arm that's close by and available

395
00:17:46,594 --> 00:17:49,076
if one of them is hurt or in an invalid state

396
00:17:49,076 --> 00:17:49,977
and trade those two out.

397
00:17:49,977 --> 00:17:54,121
And this leads to some faster behavior completion

398
00:17:54,121 --> 00:17:55,161
and also a lot more cohesion.

399
00:17:55,161 --> 00:17:57,763
So it just makes sense that if you have a bunch of limbs,

400
00:17:57,763 --> 00:17:59,105
you're probably gonna use another limb

401
00:17:59,105 --> 00:17:59,965
if one of them gets hurt.

402
00:18:02,887 --> 00:18:07,674
creates more consistent timing with this arm trading and feels more cohesive and we can

403
00:18:07,674 --> 00:18:11,900
create these multi-arm goals with these tasks. So we have a system to do this now.

404
00:18:11,900 --> 00:18:14,123
The second question is, what do we do?

405
00:18:16,428 --> 00:18:19,972
we built this concept of task-target pairs,

406
00:18:19,972 --> 00:18:22,394
which is basically a verb and a noun like eat rats

407
00:18:22,394 --> 00:18:25,097
and attack cultists or attack rats,

408
00:18:25,097 --> 00:18:27,800
and you weigh those against each other

409
00:18:27,800 --> 00:18:29,562
to create a full configuration.

410
00:18:29,562 --> 00:18:31,764
So we'll go through a decision-making process here.

411
00:18:31,764 --> 00:18:34,407
Say we have this configuration of these task-target pairs.

412
00:18:36,796 --> 00:18:39,017
And the first thing we do is look around and say,

413
00:18:39,017 --> 00:18:43,239
okay, are the targets available for our configuration?

414
00:18:43,239 --> 00:18:46,240
There's no gems right now, so we can't do that task.

415
00:18:46,240 --> 00:18:48,241
And it's not just whether the target's available or not,

416
00:18:48,241 --> 00:18:49,562
there are other considerations,

417
00:18:49,562 --> 00:18:51,463
like sometimes there's cool-downs

418
00:18:51,463 --> 00:18:53,444
or recent player actions that are gonna feed

419
00:18:53,444 --> 00:18:55,305
into the weighting of these different rules,

420
00:18:55,305 --> 00:18:57,866
or the final weight.

421
00:18:57,866 --> 00:18:58,706
And then once that's done,

422
00:18:58,706 --> 00:19:02,008
we take all of the remaining task target pairs

423
00:19:02,008 --> 00:19:04,849
and do a weighted random choice.

424
00:19:05,816 --> 00:19:10,081
And weighted random is used here just to create a little bit more decision variety,

425
00:19:10,081 --> 00:19:17,111
but it's still bounded with the configuration and the weights that we create.

426
00:19:17,111 --> 00:19:19,775
So, right, the Dart can now make some decisions and we can configure those.

427
00:19:21,723 --> 00:19:22,885
Last piece is, will this run well?

428
00:19:22,885 --> 00:19:24,546
So what's the performance like?

429
00:19:24,546 --> 00:19:26,948
The major scaling up problems we found

430
00:19:26,948 --> 00:19:28,390
were performance and audio.

431
00:19:28,390 --> 00:19:29,571
So I'll talk about each of these.

432
00:19:29,571 --> 00:19:32,173
Performance, a lot of it was just moving

433
00:19:32,173 --> 00:19:32,894
from Lua to C++.

434
00:19:32,894 --> 00:19:36,798
Lua's okay, but it's just not even close

435
00:19:36,798 --> 00:19:38,780
to as fast as C++, so get that out of the way.

436
00:19:38,780 --> 00:19:43,024
And we're also finding that the physics thread is maxed out.

437
00:19:44,943 --> 00:19:47,244
We figured out that it's because of those shape casts from before.

438
00:19:47,244 --> 00:19:52,565
Like sometimes there's 72 shape casts per frame, per arm,

439
00:19:52,565 --> 00:19:54,366
because if it's a really dense level,

440
00:19:54,366 --> 00:19:59,207
there might be like not a lot of valid positions for the arm to go.

441
00:19:59,207 --> 00:20:00,727
We can't really reuse this stuff

442
00:20:00,727 --> 00:20:02,468
because there's lots of different targets moving around

443
00:20:02,468 --> 00:20:04,588
and the dark's doing lots of things.

444
00:20:04,588 --> 00:20:06,989
But maybe we can pre-process something.

445
00:20:06,989 --> 00:20:13,531
I'll note that the levels are procedurally generated here again

446
00:20:14,568 --> 00:20:18,550
So it has to be a runtime like it has to be at the level generation time. It can't be a priori stuff

447
00:20:18,550 --> 00:20:21,312
So what can we cache?

448
00:20:21,312 --> 00:20:23,753
So let's go back to the shapecast again

449
00:20:23,753 --> 00:20:30,356
We'll split the world up into a grid and we'll choose the tile where the player currently is and say okay

450
00:20:30,356 --> 00:20:35,939
We want to cache some information about the obstructions around this tile

451
00:20:35,939 --> 00:20:41,682
So again same shapecast system from before we continue rotating and fill a full circle around that

452
00:20:41,682 --> 00:20:43,583
Cast those in

453
00:20:44,465 --> 00:20:46,686
And we'll get this, so we have three okay directions here

454
00:20:46,686 --> 00:20:49,649
and five obstructed ones.

455
00:20:49,649 --> 00:20:51,870
So we're gonna try to map this into something

456
00:20:51,870 --> 00:20:53,452
we can cache into that tile.

457
00:20:53,452 --> 00:20:55,874
So what we can do is say obstructed is one, okay,

458
00:20:55,874 --> 00:20:56,674
unobstructed is zero.

459
00:20:56,674 --> 00:20:59,456
And then actually just create a bit mask

460
00:20:59,456 --> 00:21:01,958
that stores the obstructed state

461
00:21:01,958 --> 00:21:04,840
for these alias directions in a circle.

462
00:21:04,840 --> 00:21:06,081
So we store this in that tile,

463
00:21:06,081 --> 00:21:09,744
and in the game we actually have a 64-bit tile.

464
00:21:11,000 --> 00:21:13,780
cache tiles, so there's about five degrees of accuracy here,

465
00:21:13,780 --> 00:21:14,861
which turned out to be enough.

466
00:21:14,861 --> 00:21:16,961
And we just do this for the whole level.

467
00:21:16,961 --> 00:21:20,502
So this is a crazy debug view of the obstruction cache,

468
00:21:20,502 --> 00:21:20,842
as we call it.

469
00:21:20,842 --> 00:21:22,503
So that works, that makes the lookups fast,

470
00:21:22,503 --> 00:21:26,544
we don't need to do anything at runtime.

471
00:21:26,544 --> 00:21:29,385
We can do that at level gen time during a load,

472
00:21:29,385 --> 00:21:31,625
and I'm gonna skip over the actual generation

473
00:21:31,625 --> 00:21:32,185
of that for now.

474
00:21:34,220 --> 00:21:36,401
And the second major issue we had was audio.

475
00:21:36,401 --> 00:21:39,082
We had one emitter per arm, and once we scaled that up,

476
00:21:39,082 --> 00:21:40,843
we had tons of emitters all over the place,

477
00:21:40,843 --> 00:21:42,904
and it was just way too noisy and hard to control.

478
00:21:42,904 --> 00:21:47,206
So for that, we used an influence map.

479
00:21:47,206 --> 00:21:51,348
Every frame, each arm's gonna pump influence into this map.

480
00:21:51,348 --> 00:21:52,608
More red is a higher influence.

481
00:21:52,608 --> 00:21:53,388
You can see there's more red

482
00:21:53,388 --> 00:21:54,649
around those clumps of arms there.

483
00:21:56,865 --> 00:21:59,066
And we use this influence map in audio like this.

484
00:21:59,066 --> 00:22:01,447
So instead of having an emitter per arm,

485
00:22:01,447 --> 00:22:02,988
we have two emitters.

486
00:22:02,988 --> 00:22:06,290
So we split the level in half and the influence map in half

487
00:22:06,290 --> 00:22:07,811
down the center, wherever the player is.

488
00:22:07,811 --> 00:22:10,812
On the left side, we move the left emitter.

489
00:22:10,812 --> 00:22:12,734
And on the right side, we move the right emitter

490
00:22:12,734 --> 00:22:14,394
to the highest influence tile.

491
00:22:15,522 --> 00:22:18,904
And that represents essentially the highest density

492
00:22:18,904 --> 00:22:19,764
of arms in an area.

493
00:22:19,764 --> 00:22:23,586
And we also then feed that influence value

494
00:22:23,586 --> 00:22:26,967
into the audio event so that the audio designer can say,

495
00:22:26,967 --> 00:22:28,268
okay, if the influence is one,

496
00:22:28,268 --> 00:22:30,288
there's probably about one arm there.

497
00:22:30,288 --> 00:22:34,290
If the influence is 10, there's about 10 arms.

498
00:22:34,290 --> 00:22:37,652
And you can create these different layers

499
00:22:37,652 --> 00:22:40,593
and kind of change the sound as necessary

500
00:22:40,593 --> 00:22:42,273
to create the sense of groups

501
00:22:42,273 --> 00:22:43,374
and lots of tentacle groups together.

502
00:22:44,199 --> 00:22:46,501
without overloading it with an emitter per arm.

503
00:22:46,501 --> 00:22:48,522
Okay, so that works out pretty well.

504
00:22:48,522 --> 00:22:50,743
We can use this to control our audio.

505
00:22:50,743 --> 00:22:51,784
So things are working here.

506
00:22:51,784 --> 00:22:52,545
Our perf's pretty good.

507
00:22:52,545 --> 00:22:55,566
Everything's doing what they should.

508
00:22:55,566 --> 00:22:59,609
We can configure what they're doing, what do we do now.

509
00:22:59,609 --> 00:23:02,871
Now, the final core component of all of this

510
00:23:02,871 --> 00:23:04,132
is that combat system.

511
00:23:04,132 --> 00:23:07,314
And we always wanted combat to be this whole dark experience

512
00:23:07,314 --> 00:23:09,275
where all the arms are together

513
00:23:09,275 --> 00:23:11,797
and filling the available space around the player

514
00:23:11,797 --> 00:23:13,318
and focusing in on the player.

515
00:23:14,355 --> 00:23:16,515
And at the same time, we can't have any of that,

516
00:23:16,515 --> 00:23:18,416
as much randomness as we do with the world interactions,

517
00:23:18,416 --> 00:23:19,456
which are just mostly for flavor.

518
00:23:19,456 --> 00:23:21,377
It needs to be much more consistent

519
00:23:21,377 --> 00:23:22,357
and learnable and readable.

520
00:23:22,357 --> 00:23:26,019
And this boils down to these main questions here.

521
00:23:26,019 --> 00:23:29,260
So how do we use that full space?

522
00:23:29,260 --> 00:23:32,481
How do we create any interesting and more readable attacks

523
00:23:32,481 --> 00:23:33,641
and remove that randomness?

524
00:23:33,641 --> 00:23:35,822
And how do we pace out the fight once we have that working?

525
00:23:37,339 --> 00:23:38,739
So we'll use full space first.

526
00:23:38,739 --> 00:23:40,481
So we go back to the obstruction cache.

527
00:23:40,481 --> 00:23:43,163
We basically transformed this data

528
00:23:43,163 --> 00:23:45,404
into what we call fronts.

529
00:23:45,404 --> 00:23:48,326
And what a front is, is a contiguous piece of space

530
00:23:48,326 --> 00:23:50,348
around the player that's unobstructed.

531
00:23:50,348 --> 00:23:52,549
So it's a piece of the circle that doesn't have anything

532
00:23:52,549 --> 00:23:53,370
in the way of it, basically.

533
00:23:53,370 --> 00:23:58,093
And these are basically areas where an arm could be.

534
00:23:58,093 --> 00:24:01,816
So I'll show a quick video of an in-game tool.

535
00:24:06,391 --> 00:24:07,231
with this in action.

536
00:24:07,231 --> 00:24:11,832
There we go.

537
00:24:11,832 --> 00:24:13,933
Okay, so as I'm running around the level,

538
00:24:13,933 --> 00:24:16,754
you can see it regenerating the fronts

539
00:24:16,754 --> 00:24:19,254
based on the positions of where the player is

540
00:24:19,254 --> 00:24:20,375
and the obstructions around there.

541
00:24:20,375 --> 00:24:22,455
And you can see those white lines,

542
00:24:22,455 --> 00:24:24,076
those are the ideal directions of arms.

543
00:24:24,076 --> 00:24:26,936
And there's a heuristic back in the movement system

544
00:24:26,936 --> 00:24:28,657
that says, try to go to your ideal direction.

545
00:24:28,657 --> 00:24:31,218
So the arms are trying to get to those positions.

546
00:24:31,218 --> 00:24:32,818
And they're basically just distributed

547
00:24:32,818 --> 00:24:33,958
across the available fronts.

548
00:24:34,710 --> 00:24:37,071
So that creates a big surrounding, full use of space.

549
00:24:37,071 --> 00:24:41,874
The next logical step here is to go into formations,

550
00:24:41,874 --> 00:24:43,855
which are basically just configurations of fronts.

551
00:24:43,855 --> 00:24:47,236
And these allowed us to create

552
00:24:47,236 --> 00:24:48,737
recognizable patterns of arms.

553
00:24:48,737 --> 00:24:52,399
So here's an example of a surround formation.

554
00:24:52,399 --> 00:24:56,600
We have a semi-circle formation like this.

555
00:24:56,600 --> 00:25:01,683
We have a flank formation, so opposite sides.

556
00:25:01,683 --> 00:25:02,903
Three-prong formation.

557
00:25:06,280 --> 00:25:11,807
Yeah, so these two things together allow us to create some interesting and readable changes in the dark positioning.

558
00:25:11,807 --> 00:25:17,353
But how do we create something that's— how do we create attacks that are more consistent now?

559
00:25:18,556 --> 00:25:20,716
And we do this through attack tasks.

560
00:25:20,716 --> 00:25:23,617
So these tasks are just regular tasks

561
00:25:23,617 --> 00:25:25,197
except they have a couple of special properties.

562
00:25:25,197 --> 00:25:27,898
The first is they combine with the formations

563
00:25:27,898 --> 00:25:31,719
and those two things together kind of form a tell.

564
00:25:31,719 --> 00:25:35,280
So an example of this is if we had a one, two, three attack,

565
00:25:35,280 --> 00:25:38,341
it would usually show up in a three-pronged formation.

566
00:25:38,341 --> 00:25:39,661
Or if we have a one, two attack,

567
00:25:39,661 --> 00:25:40,741
where it's like boom, boom,

568
00:25:40,741 --> 00:25:43,182
that would usually show up in like a flank formation,

569
00:25:43,182 --> 00:25:43,782
so opposite sides.

570
00:25:43,782 --> 00:25:47,063
So we can use those to kind of communicate to the player

571
00:25:47,063 --> 00:25:47,923
what's coming up next.

572
00:25:49,224 --> 00:25:52,107
And the second piece that's important with attack tasks

573
00:25:52,107 --> 00:25:52,907
is they have strict timing.

574
00:25:52,907 --> 00:25:55,950
So if it's gonna take too long, we just cancel out.

575
00:25:55,950 --> 00:25:59,753
Sometimes we'll trade arms, but oftentimes

576
00:25:59,753 --> 00:26:02,215
we need to ensure the consistency and learnability

577
00:26:02,215 --> 00:26:06,238
of the attack task or the attack,

578
00:26:06,238 --> 00:26:07,519
and that's much more important

579
00:26:07,519 --> 00:26:10,282
than necessarily completing the task.

580
00:26:10,282 --> 00:26:12,804
So we just cancel out a lot more often

581
00:26:12,804 --> 00:26:13,765
and replace them with new ones.

582
00:26:16,842 --> 00:26:19,684
Cool, so the attack tasks give us very consistent timing.

583
00:26:19,684 --> 00:26:22,806
We can use the space in a really readable way now,

584
00:26:22,806 --> 00:26:24,167
using the combination with formations.

585
00:26:24,167 --> 00:26:28,130
And our last piece here is how do we pace this out

586
00:26:28,130 --> 00:26:32,753
so that it's interesting and creates a dramatic experience

587
00:26:32,753 --> 00:26:34,554
for the fight, gives the player a little bit

588
00:26:34,554 --> 00:26:35,775
of breathing room at times,

589
00:26:35,775 --> 00:26:37,296
instead of just constantly bombarding.

590
00:26:39,337 --> 00:26:43,138
Our main solution for this was what we called stances.

591
00:26:43,138 --> 00:26:46,139
Stances were pulled and kind of influenced,

592
00:26:46,139 --> 00:26:47,979
inspired rather by,

593
00:26:47,979 --> 00:26:51,641
like sort of watching boxing matches

594
00:26:51,641 --> 00:26:53,221
or like fencing or something.

595
00:26:53,221 --> 00:26:55,522
Where when you start, you see the two fighters

596
00:26:55,522 --> 00:26:57,142
sort of on the outside of the ring

597
00:26:57,142 --> 00:26:58,663
and then maybe they'll move in

598
00:26:58,663 --> 00:27:00,283
and they'll be like kind of ready to,

599
00:27:00,283 --> 00:27:01,484
you know, getting ready to punch

600
00:27:01,484 --> 00:27:03,124
and then they'll like throw a punch or two

601
00:27:03,124 --> 00:27:05,145
and then they'll move back out

602
00:27:05,145 --> 00:27:06,785
and maybe if they got hit, they'll move back out

603
00:27:06,785 --> 00:27:08,346
and like recover for a second or something.

604
00:27:09,684 --> 00:27:11,305
And that's essentially what we were trying to go for here.

605
00:27:11,305 --> 00:27:13,166
And so if we map that onto what we have,

606
00:27:13,166 --> 00:27:14,947
we have a relaxed stance,

607
00:27:14,947 --> 00:27:17,248
where the dark sort of stalking in the background.

608
00:27:17,248 --> 00:27:19,749
There's a setup where it's preparing

609
00:27:19,749 --> 00:27:20,930
and it's showing the player like,

610
00:27:20,930 --> 00:27:21,770
I'm gonna attack you now.

611
00:27:21,770 --> 00:27:24,191
And then there's a pounce where it actually goes through

612
00:27:24,191 --> 00:27:25,032
and does a bunch of attacks.

613
00:27:25,032 --> 00:27:27,653
And then it's jumping in and out of these.

614
00:27:27,653 --> 00:27:30,915
And this is really effective to show the player

615
00:27:30,915 --> 00:27:33,256
what the arms might do and where they are in the fight.

616
00:27:33,973 --> 00:27:36,875
but it's also a really good feedback source for the player

617
00:27:36,875 --> 00:27:39,577
where if the dark jumps into that pounce stance

618
00:27:39,577 --> 00:27:43,999
and the player gets in a few hits

619
00:27:43,999 --> 00:27:47,061
and then the dark pulls back out into a recovery

620
00:27:47,061 --> 00:27:49,542
or a setup stance,

621
00:27:49,542 --> 00:27:53,984
then you can kind of just assume that, oh, I heard it.

622
00:27:53,984 --> 00:27:59,507
It feels like I'm making progress by doing that.

623
00:27:59,507 --> 00:28:01,548
So stances are here to help pace out the fight.

624
00:28:03,442 --> 00:28:05,103
All right, so, there's a bunch of stuff.

625
00:28:05,103 --> 00:28:09,426
I'll just go over quickly what we were talking about today.

626
00:28:09,426 --> 00:28:13,229
We started with a basic movement with one tentacle,

627
00:28:13,229 --> 00:28:15,710
the kinematic constraints that we added

628
00:28:15,710 --> 00:28:17,752
to avoid wonky animations,

629
00:28:17,752 --> 00:28:19,213
and the shape cast we used for clipping.

630
00:28:19,213 --> 00:28:23,056
Moved into the world interactions, adding some flavor,

631
00:28:23,056 --> 00:28:25,978
how we used utility positioning to manage and control

632
00:28:25,978 --> 00:28:29,521
the positioning concerns of the tentacles,

633
00:28:29,521 --> 00:28:30,962
and how we added pathing styles

634
00:28:30,962 --> 00:28:32,683
to create something a little bit more natural.

635
00:28:34,971 --> 00:28:36,072
We ramped up the tentacles,

636
00:28:36,072 --> 00:28:39,153
introduced the dark brain and tasks,

637
00:28:39,153 --> 00:28:42,535
as well as arm trading to control multiple arms together

638
00:28:42,535 --> 00:28:48,078
to achieve the same goal.

639
00:28:48,078 --> 00:28:50,140
We talked about the obstruction cache

640
00:28:50,140 --> 00:28:52,521
and how we cached that information on level load

641
00:28:52,521 --> 00:28:54,702
or generation for fast obstruction lookups

642
00:28:54,702 --> 00:28:57,664
and the influence map used to move the audio emitters around.

643
00:28:58,622 --> 00:29:03,065
And finally, combat and how the fronts and formations

644
00:29:03,065 --> 00:29:08,008
helped us use the available space

645
00:29:08,008 --> 00:29:12,891
and how we used the attack tasks to create consistency.

646
00:29:12,891 --> 00:29:15,332
And finally, stances and how they helped us

647
00:29:15,332 --> 00:29:22,357
pace out the fight.

648
00:29:22,357 --> 00:29:23,518
And that's it.

649
00:29:23,518 --> 00:29:24,218
Thank you. . . . . . . . . . . . . . . .

650
00:29:34,711 --> 00:29:36,732
This is really cool.

651
00:29:36,732 --> 00:29:39,852
Thanks.

652
00:29:39,852 --> 00:29:45,614
The inverse schematics feels now like it's a little bit

653
00:29:45,614 --> 00:29:48,615
underutilized, just because we're having to keep in the

654
00:29:48,615 --> 00:29:51,696
straight lines.

655
00:29:51,696 --> 00:29:56,517
Did you explore any in doing more with that in?

656
00:29:57,854 --> 00:30:01,356
breaking out of straight lines or having it like slither around obstacles or anything

657
00:30:01,356 --> 00:30:03,057
interesting like that?

658
00:30:03,057 --> 00:30:05,759
The slithering around obstacles, not so much.

659
00:30:05,759 --> 00:30:09,681
In terms of what we did with the inverse kinematics

660
00:30:11,523 --> 00:30:13,864
It was mostly about like trying to...

661
00:30:13,864 --> 00:30:16,246
So the other thing is like from the design perspective

662
00:30:16,246 --> 00:30:18,388
or from the direction, we wanted them to be straight.

663
00:30:18,388 --> 00:30:20,990
Like most of the time keeping them straight was good

664
00:30:20,990 --> 00:30:23,491
and adding a little bit of curve was more just flavor.

665
00:30:23,491 --> 00:30:26,593
So we've just mostly played around with just essentially

666
00:30:26,593 --> 00:30:28,875
that those constraint values and how they map.

667
00:30:28,875 --> 00:30:32,017
So the way we map them is actually exponentially.

668
00:30:32,017 --> 00:30:32,518
So the tip...

669
00:30:32,718 --> 00:30:34,840
has higher, more direct constraints,

670
00:30:34,840 --> 00:30:36,421
like it has to stay straighter,

671
00:30:36,421 --> 00:30:38,343
and the base is a little bit more loose.

672
00:30:38,343 --> 00:30:39,904
And by doing that, you can get these attacks

673
00:30:39,904 --> 00:30:42,366
where it's kind of coming into the side

674
00:30:42,366 --> 00:30:45,349
and bends around, but the tip still stays straight,

675
00:30:45,349 --> 00:30:47,811
if that makes any sense.

676
00:30:47,811 --> 00:30:50,433
That was sort of the extent,

677
00:30:50,433 --> 00:30:51,534
I mean, we played around with it a bit,

678
00:30:51,534 --> 00:30:54,977
but in terms of what we actually shipped, that's about it.

679
00:30:54,977 --> 00:30:55,318
Oh, hey.

680
00:30:57,698 --> 00:31:05,328
Hi. Okay. So I saw the attacking, like the point, the cache of the location where you

681
00:31:05,328 --> 00:31:09,713
restore the eight directions of the attacking, like in a radio fashion.

682
00:31:09,713 --> 00:31:10,774
Yep.

683
00:31:10,774 --> 00:31:14,038
Is this in the game all the way axis aligned?

684
00:31:15,508 --> 00:31:18,990
like eight, but with the four of them aligned x and y.

685
00:31:18,990 --> 00:31:21,171
Yeah, and so there's actually 64,

686
00:31:21,171 --> 00:31:24,392
because we store a full 64-bit number in there.

687
00:31:24,392 --> 00:31:24,572
Okay.

688
00:31:24,572 --> 00:31:26,953
And yeah, and they're aliased to the same directions

689
00:31:26,953 --> 00:31:28,233
in each tile, basically.

690
00:31:28,233 --> 00:31:31,834
Oh, okay, because I thought it was only eight,

691
00:31:31,834 --> 00:31:33,655
but if it's four, it should be high enough

692
00:31:33,655 --> 00:31:34,495
to ignore the direction.

693
00:31:34,495 --> 00:31:35,156
Exactly.

694
00:31:35,156 --> 00:31:37,377
Yeah, like five degrees is about good.

695
00:31:39,370 --> 00:31:45,155
So here's a question, when it comes to everything you put together here, reuse is always good,

696
00:31:45,155 --> 00:31:45,635
right?

697
00:31:45,635 --> 00:31:49,398
So do you feel like there's things, obviously knowledge and lessons identified, right?

698
00:31:49,398 --> 00:31:52,521
I steal this from the Brits, if you guys haven't heard this, we don't learn anything, we identify

699
00:31:52,521 --> 00:31:54,042
it and then hopefully learn.

700
00:31:54,042 --> 00:31:56,784
But kidding aside, do you feel like there's other things you've built that now you'll

701
00:31:56,784 --> 00:31:59,306
be able to reuse, especially if it's a different type of game?

702
00:32:01,206 --> 00:32:02,587
It's an interesting question.

703
00:32:02,587 --> 00:32:05,048
I mean, it's a pretty weird thing to build

704
00:32:05,048 --> 00:32:05,569
in the first place.

705
00:32:05,569 --> 00:32:06,009
Absolutely.

706
00:32:06,009 --> 00:32:08,331
But by the same token, in some ways it's like swarming,

707
00:32:08,331 --> 00:32:10,112
right, with just customized terrain.

708
00:32:10,112 --> 00:32:11,032
Yeah, yeah, sort of that.

709
00:32:11,032 --> 00:32:13,194
Yeah, I think a lot of like the sort of thing

710
00:32:13,194 --> 00:32:16,036
I would pull out of this is just the importance

711
00:32:16,036 --> 00:32:18,117
of directionality in this and considering that

712
00:32:18,117 --> 00:32:19,878
as opposed to like positioning really.

713
00:32:19,878 --> 00:32:22,199
Like directions matter more than positions

714
00:32:22,199 --> 00:32:23,200
or something like that.

715
00:32:23,200 --> 00:32:25,482
So maybe that's my main takeaway.

716
00:32:25,482 --> 00:32:28,203
Other than that, I don't know.

717
00:32:28,203 --> 00:32:28,624
Okay, thank you.

718
00:32:28,624 --> 00:32:29,244
Thanks.

719
00:32:30,296 --> 00:32:31,629
Okay, that's it. Thanks guys.

