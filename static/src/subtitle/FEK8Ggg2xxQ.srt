1
00:00:09,253 --> 00:00:10,574
I'm really glad I can be here.

2
00:00:10,874 --> 00:00:14,495
Actually, I thought this time I might not make it through immigration because of my

3
00:00:14,555 --> 00:00:15,275
Pakistani name.

4
00:00:16,996 --> 00:00:20,257
But I did, and well, this is the first time for me here at GDC.

5
00:00:20,337 --> 00:00:22,138
It's been really enjoyable so far.

6
00:00:23,239 --> 00:00:27,500
And yeah, I hope you'll enjoy this talk as much as I've enjoyed all the talks that I've

7
00:00:27,540 --> 00:00:27,880
been to.

8
00:00:29,881 --> 00:00:34,423
But before I start to talk about data-driven granular synthesis, I need to, oh yeah, first

9
00:00:34,463 --> 00:00:38,365
of all, I need to remind you to turn your cell phones on after the talk.

10
00:00:40,600 --> 00:00:47,701
And before I start to talk about data-driven granular synthesis, I just want to introduce

11
00:00:47,741 --> 00:00:50,762
myself really shortly.

12
00:00:51,082 --> 00:00:52,202
My name is Sajjad Siddique.

13
00:00:53,063 --> 00:01:00,304
I work as an audio researcher at Square Enix in beautiful Tokyo in Japan.

14
00:01:02,305 --> 00:01:04,845
And yeah, so audio researcher.

15
00:01:04,885 --> 00:01:07,366
I've been asked by lots of people, what does it actually mean?

16
00:01:08,246 --> 00:01:09,426
And well, to tell you the truth.

17
00:01:10,629 --> 00:01:12,169
I'm really bad at sound design.

18
00:01:12,189 --> 00:01:16,070
And I think that's not only because my ears are really bad,

19
00:01:16,130 --> 00:01:19,551
but also because I think it's more because of my bad taste.

20
00:01:21,792 --> 00:01:24,693
And I'm also really bad at programming.

21
00:01:26,073 --> 00:01:28,614
So people who see my code laugh at me.

22
00:01:28,694 --> 00:01:31,134
People who want to use my code rewrite it.

23
00:01:31,854 --> 00:01:35,255
So calling myself an audio researcher

24
00:01:35,695 --> 00:01:39,956
just turns this, how should I say, deficiencies into.

25
00:01:41,105 --> 00:01:43,066
maybe well into charming qualities

26
00:01:44,446 --> 00:01:45,987
at least that's what I like to believe.

27
00:01:48,007 --> 00:01:50,428
Past projects that I've been working on as a researcher

28
00:01:51,928 --> 00:01:55,109
are many projects where I do audio synthesis for video games.

29
00:01:55,209 --> 00:01:58,690
For example, I've been working on the car engine sound for Final Fantasy 15.

30
00:02:00,170 --> 00:02:03,851
I've been also working on the sound of destruction for some other video games,

31
00:02:03,911 --> 00:02:07,612
given some presentation about that at the Computer Entertainment Developers Conference.

32
00:02:08,594 --> 00:02:10,455
in Yokohama in Japan.

33
00:02:11,135 --> 00:02:13,557
I've been also working on morphing of sounds and also

34
00:02:13,577 --> 00:02:14,878
morphing of granular sounds.

35
00:02:17,120 --> 00:02:21,943
The method that I'm going to talk about today, and just to

36
00:02:21,983 --> 00:02:24,605
be sure that we're all on the same page, because I know the

37
00:02:24,625 --> 00:02:26,627
title can be a bit cryptical.

38
00:02:27,307 --> 00:02:31,871
So data-driven granular synthesis is, well, to explain

39
00:02:31,891 --> 00:02:34,973
it really shortly, it's a sound synthesis method that

40
00:02:35,013 --> 00:02:35,614
can be used.

41
00:02:37,159 --> 00:02:40,200
For video games and special small way from some of those small

42
00:02:40,240 --> 00:02:42,922
bay from so-called grains and that's why we call it

43
00:02:43,362 --> 00:02:45,843
from less than this is right. I'm going to explain that in

44
00:02:45,863 --> 00:02:46,984
more detail later of course.

45
00:02:47,664 --> 00:02:49,765
But before I do so I also want to let you

46
00:02:49,785 --> 00:02:51,846
know what sounds you can actually use it for so

47
00:02:51,906 --> 00:02:53,987
that the talk maybe gets a bit more meaning for

48
00:02:54,007 --> 00:02:54,367
everybody.

49
00:02:55,548 --> 00:02:58,509
My favorite sound and my favorite example is the

50
00:02:58,549 --> 00:02:59,090
son of rain.

51
00:03:00,877 --> 00:03:04,958
I think the method can really like explain very easily when you when you think about

52
00:03:05,018 --> 00:03:08,140
rain so that's why I'm going to use rain also in this presentation.

53
00:03:09,580 --> 00:03:14,182
But you can also use it for the sound of running water like like a small stream or something

54
00:03:14,843 --> 00:03:18,544
or like running water into a basin or something like that.

55
00:03:19,625 --> 00:03:23,326
It can also be used for different sounds like flooding clothes or paper or something like

56
00:03:23,366 --> 00:03:25,788
that for cracking fire and lots of other sounds.

57
00:03:26,448 --> 00:03:27,768
You'll hear some examples later on.

58
00:03:30,233 --> 00:03:31,813
Now if you talk about the sun of rain.

59
00:03:33,514 --> 00:03:35,595
Then imagine you have a video game where you you

60
00:03:35,615 --> 00:03:37,496
were where you want to have the sun of rain and

61
00:03:37,536 --> 00:03:40,877
now of course you know that there are lots

62
00:03:40,937 --> 00:03:43,718
of different rain sounds and the thing that you

63
00:03:43,758 --> 00:03:45,579
probably have to do in the beginning is to decide

64
00:03:45,739 --> 00:03:47,680
what kind of rain you want to have in your

65
00:03:47,700 --> 00:03:48,200
video game.

66
00:03:49,161 --> 00:03:51,101
And if you use the traditional approach to

67
00:03:51,222 --> 00:03:53,462
implement the rain sound then you would go with

68
00:03:54,183 --> 00:03:57,024
samples that you play in a loop and those samples

69
00:03:57,044 --> 00:03:58,785
will have to have a certain length.

70
00:03:59,984 --> 00:04:02,887
Because you don't want the player to notice that they're in the loop, right?

71
00:04:03,307 --> 00:04:04,509
So, like, I don't know.

72
00:04:05,069 --> 00:04:07,052
We're talking maybe 20 seconds or something like that.

73
00:04:08,293 --> 00:04:12,157
And, yeah, even if you decide that you're only going to do,

74
00:04:12,658 --> 00:04:14,060
only going to use two different sounds,

75
00:04:14,080 --> 00:04:16,462
you still need those two long samples for your video game.

76
00:04:17,606 --> 00:04:21,429
And that means if you use high quality and samples that are

77
00:04:21,469 --> 00:04:24,352
like about 20 seconds long, you end up spending around

78
00:04:24,392 --> 00:04:25,572
seven megabytes per sample.

79
00:04:26,153 --> 00:04:29,476
Now, of course, we as audio people know that this is

80
00:04:29,696 --> 00:04:32,178
nothing in comparison to what graphics people are using.

81
00:04:33,259 --> 00:04:36,421
But still, at my company, I've been told, Sajat, this is too

82
00:04:36,461 --> 00:04:38,283
much, we need to reduce this.

83
00:04:39,528 --> 00:04:44,409
So, yeah, this is one of the problems that I think it's not a problem because I think

84
00:04:44,449 --> 00:04:45,609
we should be giving them to memory.

85
00:04:45,729 --> 00:04:46,070
Oh, sorry.

86
00:04:46,430 --> 00:04:53,591
But there's another thing that I think is a problem with this approach, and that is

87
00:04:53,651 --> 00:04:57,893
the transitions, for example, between different sounds of rain.

88
00:04:58,413 --> 00:05:02,834
Or it's really hard to apply some variation to those samples.

89
00:05:03,074 --> 00:05:05,875
You can of course do fading, but if you just apply fading...

90
00:05:06,824 --> 00:05:11,468
you are not going to be able to have very natural sounding transitions

91
00:05:12,109 --> 00:05:16,012
or for example, if you want to start the sound of rain during the game,

92
00:05:16,372 --> 00:05:18,014
how would you make it just fade in the sound?

93
00:05:18,554 --> 00:05:21,316
Well, maybe that will do, but it doesn't sound very natural, right?

94
00:05:22,377 --> 00:05:28,042
So, to summarize the challenges or the motivation behind the project

95
00:05:28,142 --> 00:05:34,127
that I've been working on, it's because we looked into ways to save some memory

96
00:05:34,407 --> 00:05:34,507
and

97
00:05:35,774 --> 00:05:39,436
I wanted to have something where we can like have lots of variation

98
00:05:40,657 --> 00:05:43,198
and play around with the sounds and yeah,

99
00:05:43,758 --> 00:05:45,419
change the way it sounds during the game.

100
00:05:48,300 --> 00:05:50,962
So the solution that I'm proposing

101
00:05:51,422 --> 00:05:53,383
is data-driven granular synthesis.

102
00:05:54,664 --> 00:05:55,664
And yeah, well,

103
00:05:57,205 --> 00:06:00,286
first of all I want to explain granular synthesis in a bit more detail.

104
00:06:01,243 --> 00:06:04,564
I guess lots of you are familiar with granular synthesis.

105
00:06:04,824 --> 00:06:06,404
Like, raise your hand who knows the term,

106
00:06:06,804 --> 00:06:07,684
who's been working with it.

107
00:06:08,484 --> 00:06:09,044
Cool, okay.

108
00:06:09,605 --> 00:06:09,805
Yeah.

109
00:06:10,325 --> 00:06:12,505
Well, definitions of granular synthesis,

110
00:06:13,625 --> 00:06:16,546
it's a very flexible method, a very powerful method,

111
00:06:16,606 --> 00:06:18,846
and that's why definitions vary a lot,

112
00:06:19,006 --> 00:06:20,427
like between different people

113
00:06:20,647 --> 00:06:23,887
and between different implementations or ways to use it.

114
00:06:24,888 --> 00:06:25,488
And, um...

115
00:06:28,433 --> 00:06:35,596
Yeah, it's a bit difficult to find a definition that fits all of the usages of granular synthesis,

116
00:06:35,656 --> 00:06:42,138
but the definition that I came up with is granular synthesis is a synthesis method used

117
00:06:42,198 --> 00:06:46,980
to synthesize granular sounds.

118
00:06:47,000 --> 00:06:50,901
I do have to admit that this definition is absolutely useless, because if you don't understand

119
00:06:50,922 --> 00:06:53,482
granular synthesis, then of course you don't understand granular sound, right?

120
00:06:53,843 --> 00:06:55,683
So let's talk about granular sounds.

121
00:06:57,188 --> 00:06:58,269
Think about the sound of rain.

122
00:06:59,130 --> 00:07:01,151
The sound of rain is actually the sum

123
00:07:01,372 --> 00:07:04,054
of a lot of raindrops falling onto a surface.

124
00:07:05,615 --> 00:07:08,178
And we're talking about 100,000 of raindrops

125
00:07:08,218 --> 00:07:09,118
or something like that, right?

126
00:07:09,479 --> 00:07:12,341
And those raindrops converge into a single sound.

127
00:07:13,402 --> 00:07:15,604
And the reason why I call this single sound

128
00:07:15,764 --> 00:07:18,947
or I call this sound of rain a granular sound

129
00:07:19,067 --> 00:07:21,349
is because those single sound events,

130
00:07:21,569 --> 00:07:23,992
like in the case of rain, that would be the drops hitting

131
00:07:24,012 --> 00:07:24,472
the surface.

132
00:07:25,434 --> 00:07:28,744
can be called in the context of granular synthesis, they can be called grains.

133
00:07:30,883 --> 00:07:33,504
and a granular sound consists of grains.

134
00:07:33,704 --> 00:07:35,844
So granular sound is the sound that consists

135
00:07:36,424 --> 00:07:38,425
of a lot of single sound events.

136
00:07:39,025 --> 00:07:42,946
In the case of water, it would be air bubbles trapped

137
00:07:42,986 --> 00:07:45,687
in the water that are resonating at the resonance frequencies.

138
00:07:46,107 --> 00:07:48,067
This may be an example that's less straightforward

139
00:07:48,087 --> 00:07:50,928
to understand, but also in the case of water,

140
00:07:50,968 --> 00:07:53,929
it's actually like the sound of water is,

141
00:07:54,589 --> 00:07:57,050
or consists of a lot of single sound events

142
00:07:57,110 --> 00:07:58,750
that are also quite similar to each other.

143
00:08:00,939 --> 00:08:06,545
To synthesize such sounds, we use granular synthesis.

144
00:08:06,605 --> 00:08:08,587
And the method is actually really quite simple, because

145
00:08:09,168 --> 00:08:12,892
all that we do is we need recordings, or we need

146
00:08:12,932 --> 00:08:15,015
waveforms of those single sound events.

147
00:08:15,715 --> 00:08:18,859
And we just take a lot of them, and we mix them together.

148
00:08:20,300 --> 00:08:22,601
In practice, of course, because we have limited memory

149
00:08:22,881 --> 00:08:26,883
and we cannot record an unlimited number of sounds,

150
00:08:27,603 --> 00:08:30,124
we limit the number of grains to, say, for example,

151
00:08:30,144 --> 00:08:30,825
a few hundreds.

152
00:08:32,045 --> 00:08:35,667
And to increase the variation during synthesis, what we're

153
00:08:35,847 --> 00:08:39,368
doing is we are applying random attenuation to them.

154
00:08:39,848 --> 00:08:42,610
So every grain would be like, mm.

155
00:08:44,552 --> 00:08:47,654
Once it's played like a full intensity and then the next time is going to be

156
00:08:47,754 --> 00:08:51,656
used maybe half of the intensity and yes, on the very 8 the intensity

157
00:08:51,676 --> 00:08:55,879
randomly and then we place them like the attenuated rains replace him

158
00:08:55,979 --> 00:08:59,281
into the final mix at random points in time.

159
00:09:00,422 --> 00:09:03,964
And we do that for certain number of grains per second and

160
00:09:04,465 --> 00:09:07,727
like for example for heavy rain. We would use lots of friends for seconds a what

161
00:09:07,747 --> 00:09:12,670
like 100,000 and for very light rain which is I don't know only

162
00:09:12,710 --> 00:09:14,151
like 100,000 grains a second or something like that.

163
00:09:16,548 --> 00:09:19,430
The random attenuation that we are applying to the sound

164
00:09:20,291 --> 00:09:26,075
is very important in giving the sound a certain character.

165
00:09:26,776 --> 00:09:30,078
And for example, in the case of rain, we would use,

166
00:09:30,319 --> 00:09:32,080
or our mix would look like this.

167
00:09:33,441 --> 00:09:37,344
We have, like here on the horizontal axis, you have time.

168
00:09:37,544 --> 00:09:39,146
And on the vertical axis, you have

169
00:09:39,186 --> 00:09:40,286
the amplitude of the grains.

170
00:09:40,366 --> 00:09:43,429
So that's sort of the random attenuation

171
00:09:43,449 --> 00:09:44,570
that we are applying to the grains.

172
00:09:45,370 --> 00:09:45,811
You have.

173
00:09:47,797 --> 00:09:49,438
a lot of grains with low amplitude.

174
00:09:50,259 --> 00:09:53,301
And you have only a few grains with a high amplitude.

175
00:09:54,361 --> 00:09:58,964
The reason for that is, or the reason why this gives us a natural sound

176
00:09:59,345 --> 00:10:02,507
in the case of rain, is because if you think of the sound of rain,

177
00:10:03,867 --> 00:10:07,169
there are only a few raindrops hitting the surface close to you.

178
00:10:08,170 --> 00:10:10,131
But the number of raindrops hitting the surface

179
00:10:11,032 --> 00:10:14,014
far away from you, of course the surface is a larger area, so

180
00:10:14,594 --> 00:10:15,735
that number is huge.

181
00:10:16,700 --> 00:10:21,942
And this is why there are more grains, or we need more grains with a low amplitude.

182
00:10:23,403 --> 00:10:30,566
And one interesting thing about sounds like this, sounds of rain and other natural sounds,

183
00:10:32,187 --> 00:10:38,130
is the fact that actually those grains with a low amplitude all converge to noise.

184
00:10:40,474 --> 00:10:44,137
So we can update our granular synthesis.

185
00:10:44,537 --> 00:10:48,801
And instead of taking a huge number of grains per second

186
00:10:48,901 --> 00:10:50,303
that we have to place into the mix,

187
00:10:51,564 --> 00:10:54,807
we can also just reduce the number of grains per second

188
00:10:54,847 --> 00:10:57,910
that we put into the mix and add some noise in the end.

189
00:10:59,712 --> 00:11:03,535
That gives us an optimized version

190
00:11:03,715 --> 00:11:06,098
of granular synthesis, which runs much faster.

191
00:11:08,192 --> 00:11:09,873
And the sound quality is still the same.

192
00:11:10,653 --> 00:11:13,594
So yeah, for video games, that's, I guess,

193
00:11:13,694 --> 00:11:16,016
the most intelligent approach.

194
00:11:19,317 --> 00:11:21,498
Yeah, but now, of course, the question,

195
00:11:21,938 --> 00:11:23,619
where do we get those grains from?

196
00:11:23,919 --> 00:11:26,161
Where do we get those single sound events

197
00:11:26,241 --> 00:11:28,402
that we need for granular synthesis from?

198
00:11:29,082 --> 00:11:30,743
Like for rain, where do we get the sound

199
00:11:30,883 --> 00:11:33,004
of raindrops hitting the surface from?

200
00:11:34,065 --> 00:11:36,386
Of course, what we can do, what we can try to do,

201
00:11:37,454 --> 00:11:38,596
is to record those sounds.

202
00:11:40,157 --> 00:11:41,999
I've tried it and I've failed.

203
00:11:42,740 --> 00:11:45,403
But I have to admit, I'm not really good at recording.

204
00:11:45,523 --> 00:11:47,746
So I'm sure that if you do it the proper way,

205
00:11:48,347 --> 00:11:51,350
maybe you're able to catch the sound of those raindrops

206
00:11:51,911 --> 00:11:54,794
if you have a nice studio and you do good setup and stuff

207
00:11:54,814 --> 00:11:55,095
like that.

208
00:11:55,935 --> 00:12:01,940
But also, if you go for recording, you should keep in mind that different, like,

209
00:12:02,220 --> 00:12:07,724
rainfalls on different materials. So you have to do, like, recordings for different surface

210
00:12:07,784 --> 00:12:12,628
materials and stuff like that. And maybe drop sizes can be different and stuff like that.

211
00:12:12,708 --> 00:12:17,171
So you have to, well, I guess recording is actually a lot of work.

212
00:12:18,778 --> 00:12:22,720
And also, if you want to go with the recording approach,

213
00:12:22,760 --> 00:12:28,283
then you still need to know what your noise looks like

214
00:12:28,363 --> 00:12:30,645
if you want to use the optimized granular synthesis.

215
00:12:31,105 --> 00:12:33,206
What kind of noise do you put in the output

216
00:12:33,346 --> 00:12:37,188
to simulate all those raindrops that fall on the surface

217
00:12:37,208 --> 00:12:38,229
very far away from you?

218
00:12:39,770 --> 00:12:41,130
And the most difficult thing maybe

219
00:12:41,251 --> 00:12:46,253
is to find a good random attenuation distribution.

220
00:12:47,154 --> 00:12:47,294
So.

221
00:12:48,768 --> 00:12:54,875
I told you before that lots of raindrops need to have a small amplitude and only a few raindrops

222
00:12:54,935 --> 00:12:56,037
need to have a high amplitude.

223
00:12:56,417 --> 00:12:58,800
But what exactly is the ratio between those two?

224
00:13:00,222 --> 00:13:05,268
So you still need to, I guess, just experiment and figure it out by playing around with the

225
00:13:05,308 --> 00:13:05,849
parameters.

226
00:13:08,393 --> 00:13:14,017
Yeah, I've tried that and I found it very... well, it did work and I also got...

227
00:13:14,917 --> 00:13:20,902
I love sound synthesis, so what I did, I managed to synthesize the sound of raindrops falling

228
00:13:20,942 --> 00:13:21,582
onto the surface.

229
00:13:22,123 --> 00:13:27,487
And with that I actually got quite nice results, like I got sound that was sounding, well,

230
00:13:27,967 --> 00:13:28,768
decent, I guess.

231
00:13:29,714 --> 00:13:30,354
quite natural.

232
00:13:31,175 --> 00:13:33,756
But the problem was for the synthesis of the grains

233
00:13:34,056 --> 00:13:35,636
and also for all the other parameters

234
00:13:35,676 --> 00:13:38,698
of the granular synthesis, I had so many parameters

235
00:13:38,858 --> 00:13:41,219
that when I showed it to the sound designers in my company,

236
00:13:41,259 --> 00:13:45,901
they were just like, what is this parameter for?

237
00:13:46,001 --> 00:13:47,201
And I tried to explain it to them,

238
00:13:47,261 --> 00:13:50,402
but they were so abstract that it was actually

239
00:13:50,442 --> 00:13:51,423
really hard to explain.

240
00:13:51,623 --> 00:13:54,524
And I guess if you didn't build the system yourself,

241
00:13:54,564 --> 00:13:56,505
then it was really hard to use.

242
00:13:56,585 --> 00:13:58,666
So I realized that's not a good way to go.

243
00:14:01,530 --> 00:14:07,835
And then I thought, we already have all these beautiful samples of rain sounds lying around

244
00:14:07,895 --> 00:14:11,237
in our service, and we should make use of them.

245
00:14:12,618 --> 00:14:19,023
So what I tried to do is extract all this data that we need for granular synthesis from

246
00:14:19,444 --> 00:14:20,384
existing recordings.

247
00:14:23,167 --> 00:14:24,428
And that actually worked quite well.

248
00:14:25,765 --> 00:14:28,608
And this is why, well, this is what the presentation today is about,

249
00:14:29,028 --> 00:14:31,410
data-driven granular synthesis. So we take data,

250
00:14:31,830 --> 00:14:36,154
and that data is in the form of a recording of existing rain sound, for example.

251
00:14:36,614 --> 00:14:40,137
And we extract all the data that we need for granular synthesis from that sound.

252
00:14:43,640 --> 00:14:48,144
The method that we're using to extract the grains and the noise and all the other parameters,

253
00:14:49,465 --> 00:14:51,867
well, I'd love to talk about it in detail.

254
00:14:52,167 --> 00:14:54,249
Unfortunately, I won't have much time for that.

255
00:14:55,323 --> 00:15:03,146
So just to give you a quick summary of how it's working.

256
00:15:05,266 --> 00:15:08,888
First of all, we estimate the noise

257
00:15:09,348 --> 00:15:11,268
in the recording of the rain sound.

258
00:15:12,537 --> 00:15:14,660
We do that by cutting the sound in the frames,

259
00:15:14,740 --> 00:15:17,243
then we convert all the frames to the frequency domain,

260
00:15:17,263 --> 00:15:18,264
so we get the spectra.

261
00:15:18,685 --> 00:15:19,787
Then we look at the spectra,

262
00:15:20,528 --> 00:15:22,350
and of course the loudness will be different

263
00:15:22,430 --> 00:15:23,732
between all the different frames,

264
00:15:23,872 --> 00:15:26,856
and we estimate the noise by looking at, say,

265
00:15:30,214 --> 00:15:37,840
just the 15 or those frames with the lowest amplitude, with the lowest energy, because

266
00:15:38,040 --> 00:15:41,763
we just say that, OK, maybe in these frames we just have the noise.

267
00:15:42,003 --> 00:15:44,145
There are no, like, loud drops in those frames.

268
00:15:46,147 --> 00:15:49,329
This is what gives us the estimated noise spectrum.

269
00:15:49,809 --> 00:15:52,191
And then we subtract.

270
00:15:52,900 --> 00:15:55,163
that noise from the original sound.

271
00:15:55,843 --> 00:15:57,965
This is a technique called spectral subtraction.

272
00:15:57,985 --> 00:16:02,910
That's, I guess, very commonly known in signal processing.

273
00:16:05,292 --> 00:16:09,135
And after doing so, we are left with the clean signal.

274
00:16:09,155 --> 00:16:13,579
It's not really clean, but let's say the signal with reduced noise.

275
00:16:14,741 --> 00:16:14,881
And...

276
00:16:16,927 --> 00:16:21,649
We cut out the grains just from the loudest frames that we have in the signal.

277
00:16:22,249 --> 00:16:27,431
This again is actually quite a simplistic approach, but I found it to work quite well, actually.

278
00:16:28,031 --> 00:16:35,113
So we just, we do it in a greedy manner, like we just look for the loudest point in the waveform or in the spectrogram,

279
00:16:35,533 --> 00:16:37,634
and this is our first grain. We cut that out.

280
00:16:38,294 --> 00:16:41,235
And then we continue to look for the second loudest, and so on.

281
00:16:43,380 --> 00:16:47,621
And, well, the problem is that, of course, if there are a lot of grains per second,

282
00:16:47,661 --> 00:16:50,122
then, of course, those grains are overlapping, right?

283
00:16:50,822 --> 00:16:53,163
So, if you cut out part of a grain,

284
00:16:53,283 --> 00:16:56,465
then the tail of the grain is buried under the next grains.

285
00:16:58,505 --> 00:17:06,868
So, it's not possible, or it's not easy to get the tail of the grain out of the recording.

286
00:17:07,674 --> 00:17:13,296
So what we are doing is we estimate the tail of the extracted grain.

287
00:17:16,238 --> 00:17:20,140
If you want to know more details about the methods that we're using,

288
00:17:20,220 --> 00:17:22,761
then, yeah, as I said, I don't have much time today,

289
00:17:22,801 --> 00:17:25,403
but please have a look at these two.

290
00:17:26,043 --> 00:17:27,984
Well, the first one is not published yet.

291
00:17:28,685 --> 00:17:31,826
I'm going to do a presentation at the ACE Convention Berlin

292
00:17:31,906 --> 00:17:34,708
about the technical details of the method.

293
00:17:35,717 --> 00:17:37,978
But there's already paper which is,

294
00:17:40,780 --> 00:17:44,242
well, it does not contain the estimation of the tail,

295
00:17:44,282 --> 00:17:48,505
for example, so it's, well, it's not the most

296
00:17:49,066 --> 00:17:50,747
up-to-date version of the algorithm,

297
00:17:50,827 --> 00:17:52,028
but still, if you look at it,

298
00:17:52,108 --> 00:17:53,829
you get an idea of how it's working.

299
00:17:54,189 --> 00:17:55,510
And also, if you want to know more,

300
00:17:55,570 --> 00:17:57,551
you can drop me an email.

301
00:17:57,811 --> 00:17:59,152
I'll show you my email address later,

302
00:17:59,272 --> 00:18:01,734
and maybe I can also send you a version of the new paper.

303
00:18:03,332 --> 00:18:07,453
You can find the second paper on the website of my company.

304
00:18:07,533 --> 00:18:09,674
So yeah, feel free to have a look at it.

305
00:18:12,515 --> 00:18:15,576
Okay, now of course we want to know what it sounds like.

306
00:18:16,356 --> 00:18:19,378
So, well I've some sounds here,

307
00:18:19,418 --> 00:18:22,079
but actually I think I'm going to jump straight to the demo.

308
00:18:25,920 --> 00:18:28,081
So here I've already loaded the sound of rain.

309
00:18:30,802 --> 00:18:31,642
This is the recording.

310
00:18:34,834 --> 00:18:36,699
And now we're going to do an analysis.

311
00:18:36,759 --> 00:18:39,966
So in this analysis, first of all, we estimate the noise,

312
00:18:40,367 --> 00:18:41,771
and now we're extracting the grains.

313
00:18:42,928 --> 00:18:46,749
that takes some time because like we have to convert all the frames to the

314
00:18:46,769 --> 00:18:49,550
frequency domain, then we have to estimate the tails and stuff like that.

315
00:18:51,291 --> 00:18:51,751
We need some

316
00:18:53,471 --> 00:18:54,312
processing time for that.

317
00:18:55,032 --> 00:18:56,752
And the next thing that we are

318
00:18:57,613 --> 00:19:00,614
or that this program is trying to do, it's trying to find an optimal

319
00:19:00,654 --> 00:19:01,474
configuration

320
00:19:01,994 --> 00:19:04,455
for the loudness parameters of

321
00:19:04,695 --> 00:19:06,976
the grains that are placed randomly into the mix.

322
00:19:08,459 --> 00:19:15,883
And the optimal configuration is supposed to be a configuration that gives us a sound that sounds as close to the original as possible.

323
00:19:16,564 --> 00:19:20,186
So it's still running, but with the parameters that we've already found.

324
00:19:22,788 --> 00:19:23,488
Sounds like this.

325
00:19:26,230 --> 00:19:28,171
And it's still trying to optimize it further.

326
00:19:30,413 --> 00:19:31,954
So these values are going to change.

327
00:19:32,614 --> 00:19:34,936
But I don't want to wait for that.

328
00:19:36,056 --> 00:19:36,497
So I think...

329
00:19:38,203 --> 00:19:40,284
we're just going to play around with the values ourselves.

330
00:19:40,684 --> 00:19:43,206
For example, I can increase the number of frames per second.

331
00:19:51,230 --> 00:19:52,711
Or the amount of noise in the sound.

332
00:19:59,714 --> 00:20:01,055
Or the parameters of the loudness.

333
00:20:18,467 --> 00:20:20,567
And then yeah, I was talking about transitions before.

334
00:20:21,567 --> 00:20:24,108
So for transitions,

335
00:20:27,549 --> 00:20:30,009
what you can do, you can create different configurations

336
00:20:30,250 --> 00:20:31,490
of these parameters here,

337
00:20:32,210 --> 00:20:33,810
and then place them onto this map.

338
00:20:34,651 --> 00:20:36,071
And then you can sort of morph

339
00:20:36,131 --> 00:20:37,471
between different configurations.

340
00:20:37,611 --> 00:20:38,112
Let's try that.

341
00:20:59,315 --> 00:21:00,435
Okay, maybe less noise.

342
00:21:11,040 --> 00:21:11,220
Yeah.

343
00:21:11,240 --> 00:21:16,162
Yeah, and all this like different variations of the sound

344
00:21:16,222 --> 00:21:20,404
can be created from just a few seconds of recording

345
00:21:20,544 --> 00:21:21,184
that we're using.

346
00:21:21,224 --> 00:21:25,006
Like, I think here I used like five seconds

347
00:21:25,066 --> 00:21:25,746
or something like that.

348
00:21:27,127 --> 00:21:28,167
Okay, let's try a different sound.

349
00:21:30,623 --> 00:21:35,852
For example, oh, I like the paper one.

350
00:21:40,880 --> 00:21:41,882
Let's start the analysis,

351
00:21:41,902 --> 00:21:43,725
this is what the recording sounds like.

352
00:21:56,564 --> 00:22:00,725
And now, oh yeah, well, the sounds that I'm using,

353
00:22:01,145 --> 00:22:04,886
that I'm analyzing to get the grains and everything,

354
00:22:04,926 --> 00:22:05,747
they're mono sounds.

355
00:22:06,807 --> 00:22:09,688
But since we placed the grains into the mix randomly,

356
00:22:10,808 --> 00:22:15,029
we can actually also apply random panning to the sounds,

357
00:22:15,149 --> 00:22:19,010
which means that even though the source sound is a mono sound,

358
00:22:19,050 --> 00:22:22,431
we can create sounds with an arbitrary number of channels.

359
00:22:25,184 --> 00:22:29,066
by just applying some random panning to the grains that we place into the mix.

360
00:22:29,826 --> 00:22:31,867
Okay, let's listen to this sound.

361
00:22:32,668 --> 00:22:32,928
The paper.

362
00:22:32,948 --> 00:22:36,930
**paper rustling**

363
00:22:36,950 --> 00:22:37,370
**paper rustling**

364
00:22:37,390 --> 00:22:38,850
**paper rustling**

365
00:22:38,870 --> 00:22:41,372
**paper rustling**

366
00:22:41,392 --> 00:22:48,915
**paper rustling**

367
00:22:48,935 --> 00:22:49,235
**paper rustling**

368
00:22:49,255 --> 00:22:49,615
**paper rustling**

369
00:22:49,635 --> 00:22:53,117
And now, my idea was that, for example, here you have a slider that goes from zero to one.

370
00:22:53,810 --> 00:22:58,034
You could attach that to a parameter in the game where I don't know, you have, for example,

371
00:22:58,054 --> 00:23:03,619
some movement of some thing with lots of paper on it or something, and then you would just go from

372
00:23:03,880 --> 00:23:09,945
movement is zero or very fast. Stuff like that, right?

373
00:23:12,487 --> 00:23:17,752
Okay, let me go back to the presentation in PowerPoint.

374
00:23:22,546 --> 00:23:24,969
There are, well, I've already, of course,

375
00:23:25,009 --> 00:23:27,473
I've talked a lot about the advantages of the technique.

376
00:23:28,315 --> 00:23:30,178
And well, there are the flexibility.

377
00:23:30,198 --> 00:23:33,263
I've already told you can use an arbitrary number of channels.

378
00:23:33,743 --> 00:23:35,026
We also need less memory.

379
00:23:39,195 --> 00:23:41,856
So 2.5 megabytes is really the maximum that we need,

380
00:23:42,296 --> 00:23:45,497
but actually we can, without an audible loss in quality,

381
00:23:45,517 --> 00:23:47,618
it depends on the sound that we're going to synthesize,

382
00:23:47,658 --> 00:23:49,639
but we can reduce it to one megabyte or even less,

383
00:23:50,079 --> 00:23:51,640
because the size of the grain,

384
00:23:52,700 --> 00:23:54,881
or the size of the grains, like length of the grains,

385
00:23:55,822 --> 00:23:57,622
well, for some sounds they can be shorter,

386
00:23:57,762 --> 00:23:59,503
and for some sounds they have to be a bit longer,

387
00:23:59,563 --> 00:24:01,044
but for example, for the sound of rain,

388
00:24:01,084 --> 00:24:02,324
it doesn't matter if they're really short.

389
00:24:02,724 --> 00:24:05,826
So for the sound of rain, I think I could shrink it down

390
00:24:05,866 --> 00:24:06,226
to like,

391
00:24:07,226 --> 00:24:11,268
500 gig kilobytes or something like that.

392
00:24:11,288 --> 00:24:15,670
And unfortunately, there's also some disadvantages.

393
00:24:16,771 --> 00:24:19,732
Probably you can guess that, because we are synthesizing

394
00:24:19,752 --> 00:24:20,613
the sound in real time.

395
00:24:21,673 --> 00:24:26,856
So we need some processing power.

396
00:24:28,216 --> 00:24:29,477
I think it's not too slow.

397
00:24:29,597 --> 00:24:33,599
It takes us about 19 milliseconds to generate one

398
00:24:33,639 --> 00:24:35,760
second of high quality stereo audio.

399
00:24:37,457 --> 00:24:40,377
So yeah, it does run in real time easily.

400
00:24:40,417 --> 00:24:41,297
You've seen it in the demo.

401
00:24:43,218 --> 00:24:43,398
Yeah.

402
00:24:45,218 --> 00:24:49,599
This nearly concludes my talk, but yeah, future plans.

403
00:24:51,240 --> 00:24:53,280
The first one, I have to warn you, is a bit embarrassing.

404
00:24:54,941 --> 00:24:56,361
I actually want to use it in video games.

405
00:24:56,881 --> 00:24:59,282
I think everybody here at GDC has lots of experience

406
00:24:59,302 --> 00:25:00,682
to use stuff like in video games.

407
00:25:00,782 --> 00:25:03,082
And I'm talking about a technique that's

408
00:25:03,122 --> 00:25:04,503
not in any ship title yet.

409
00:25:05,743 --> 00:25:07,205
But we are working on it.

410
00:25:08,305 --> 00:25:09,887
I cannot tell you any more details,

411
00:25:10,007 --> 00:25:12,589
but I hope that you're going to see some stuff soon.

412
00:25:14,730 --> 00:25:17,232
You've seen the analysis process take some time.

413
00:25:17,452 --> 00:25:20,054
Of course, I want to speed, I want to accelerate that.

414
00:25:20,735 --> 00:25:23,517
And there's also some scope of improvement

415
00:25:23,557 --> 00:25:24,958
for the grain extraction algorithm.

416
00:25:26,359 --> 00:25:28,961
But yeah, those I leave for the future.

417
00:25:30,782 --> 00:25:32,464
So yeah, this concludes my talk.

418
00:25:32,604 --> 00:25:34,085
Thank you so much for your attention.

419
00:25:35,169 --> 00:25:36,150
If you, thank you.

420
00:25:43,616 --> 00:25:45,498
If you want to get in touch, here's my email address.

421
00:25:46,098 --> 00:25:47,600
Drop me a line any time.

422
00:25:49,862 --> 00:25:52,644
Yeah, well, I think we have some time for questions,

423
00:25:52,804 --> 00:25:54,886
so if there's anybody who wants to ask something,

424
00:25:56,087 --> 00:25:57,288
yeah, please, there's a mic here.

425
00:25:57,688 --> 00:25:58,409
Step up to the mic.

426
00:26:01,852 --> 00:26:02,412
Thanks for the talk.

427
00:26:02,761 --> 00:26:07,507
My main question was, you parametrize gain and variance for the gain for your grains.

428
00:26:08,128 --> 00:26:13,596
So are you just applying a gain to your recordings or do you actually pick from the data loud

429
00:26:13,776 --> 00:26:16,740
and quiet grains and select them based on a sorting or something like that?

430
00:26:17,930 --> 00:26:21,114
No, I'm applying the gain only to the grains.

431
00:26:21,194 --> 00:26:23,015
So I'm not sorting the grains.

432
00:26:23,496 --> 00:26:25,558
But actually, you make a very good point.

433
00:26:26,179 --> 00:26:30,203
Because by applying a high gain to grains that had a low

434
00:26:30,243 --> 00:26:32,385
gain in the original sound, you sort of

435
00:26:32,405 --> 00:26:33,506
distorted it in some ways.

436
00:26:34,411 --> 00:26:35,452
Maybe some of you heard that.

437
00:26:36,192 --> 00:26:38,513
And that is actually a very intelligent idea,

438
00:26:38,553 --> 00:26:41,154
like to sort the grains in terms of loudness,

439
00:26:41,355 --> 00:26:43,936
and then pick the loud grains for where you want

440
00:26:43,976 --> 00:26:47,278
to have loud grains, and the grains with small amplitude,

441
00:26:47,478 --> 00:26:49,559
where you want to have grains with a low amplitude.

442
00:26:50,059 --> 00:26:52,940
That will, I guess, make it sound even more natural.

443
00:26:52,960 --> 00:26:54,261
Yeah, cool.

444
00:26:54,281 --> 00:26:55,362
So I was going to recommend this thing

445
00:26:55,382 --> 00:26:56,602
by IRCAM called CutArt.

446
00:26:57,543 --> 00:26:58,703
Oh, okay, yeah, I know CutArt.

447
00:26:58,783 --> 00:27:00,885
It's like a 2D plane system that lets you sort grains.

448
00:27:00,905 --> 00:27:02,085
It's wonderful, I love CutArt.

449
00:27:02,105 --> 00:27:02,846
All right, thanks.

450
00:27:03,106 --> 00:27:03,386
Thank you.

451
00:27:05,343 --> 00:27:06,564
Hi, thank you for your talk.

452
00:27:06,604 --> 00:27:07,925
Thank you.

453
00:27:08,446 --> 00:27:12,349
I wanted to ask, how long did it take you to develop this,

454
00:27:12,389 --> 00:27:14,071
and how big was the team that was working on it?

455
00:27:14,651 --> 00:27:17,013
The team working on it is, they're all here,

456
00:27:17,173 --> 00:27:17,894
because it's just me.

457
00:27:20,096 --> 00:27:24,660
And it took me not too long, actually.

458
00:27:25,040 --> 00:27:28,063
So you've seen that I published one paper about it in 2015.

459
00:27:30,810 --> 00:27:36,772
But yeah, don't think that I've been working only on this since 2000 and whatever 15 until now.

460
00:27:38,372 --> 00:27:42,773
Like there's lots of different projects ongoing like going on at the same time.

461
00:27:42,853 --> 00:27:47,574
I think if I add up all the work that I did for this, it would be like 3 months or something like that.

462
00:27:47,694 --> 00:27:52,835
But I was really also playing around a lot with like different parameters for extraction and stuff like that.

463
00:27:53,255 --> 00:27:53,675
Cool. Thank you.

464
00:27:53,935 --> 00:27:54,175
Thank you.

465
00:27:56,087 --> 00:27:56,947
Thank you so much for the talk.

466
00:27:57,167 --> 00:27:57,448
Thank you.

467
00:27:58,208 --> 00:28:00,750
So when you're implementing these into a game,

468
00:28:01,130 --> 00:28:02,591
are you writing your own tools for that?

469
00:28:02,871 --> 00:28:04,792
Or is it working as a plug-in?

470
00:28:06,573 --> 00:28:10,716
The plan is that I develop it as a library.

471
00:28:11,016 --> 00:28:13,477
And that library is sort of in some ways,

472
00:28:14,178 --> 00:28:15,238
no, it's not really a plug-in.

473
00:28:15,358 --> 00:28:17,760
So yeah, it's more like writing on tools for that.

474
00:28:18,440 --> 00:28:19,261
OK, thank you.

475
00:28:19,481 --> 00:28:19,781
Thank you.

476
00:28:22,223 --> 00:28:23,043
Any more questions?

477
00:28:23,363 --> 00:28:24,404
Please step up to the mic.

478
00:28:28,149 --> 00:28:28,329
Hi.

479
00:28:29,030 --> 00:28:29,190
Hi.

480
00:28:29,450 --> 00:28:31,532
Terrific demo and explanation.

481
00:28:31,552 --> 00:28:34,656
Thank you.

482
00:28:34,976 --> 00:28:39,341
You touched upon different materials, rain falling on different materials.

483
00:28:39,361 --> 00:28:39,441
Yes.

484
00:28:40,802 --> 00:28:48,030
Obviously, starting with small samples on the different materials would allow you to

485
00:28:48,090 --> 00:28:49,572
localize, you know, what...

486
00:28:50,164 --> 00:28:53,185
a pond and you're under an awning and pavement, etc.

487
00:28:53,205 --> 00:29:01,328
Do you foresee in the future being able to somehow model or use some other type of synthesis

488
00:29:01,368 --> 00:29:04,829
or convolution to create that in real time as well?

489
00:29:05,775 --> 00:29:09,637
I actually did something like that because I think I mentioned before I was actually

490
00:29:09,677 --> 00:29:13,319
first doing synthesis of the sound of, for the sound of the raindrops, right?

491
00:29:13,619 --> 00:29:18,022
And when I was doing that I was doing convolution like with the sort of impulse that hits the

492
00:29:18,062 --> 00:29:21,924
surface and there could be different surfaces and different impulse responses for different

493
00:29:21,964 --> 00:29:23,485
materials and stuff like that.

494
00:29:24,205 --> 00:29:29,748
I did play around with that but the problem is most of the time we actually, I think it's

495
00:29:29,788 --> 00:29:32,549
a terrific idea, I think it's a terrific technique that we should use.

496
00:29:32,569 --> 00:29:33,110
Yeah.

497
00:29:34,599 --> 00:29:37,700
Also, we need to start things slowly, right?

498
00:29:37,800 --> 00:29:40,780
So first of all, try this, and then go on.

499
00:29:41,180 --> 00:29:42,461
But I think it's a terrific idea.

500
00:29:43,381 --> 00:29:43,561
Thanks.

501
00:29:43,841 --> 00:29:44,141
Thank you.

502
00:29:46,642 --> 00:29:50,282
Yeah, so if there's no more questions, or if you're too

503
00:29:50,342 --> 00:29:51,963
embarrassed to ask, you can always drop me a line.

504
00:29:53,203 --> 00:29:54,823
And yeah, anyway, time's up, I guess.

505
00:29:55,043 --> 00:29:56,504
If you want to talk to me, I'll be around.

506
00:29:56,684 --> 00:29:57,964
And yeah, thanks again for coming.

