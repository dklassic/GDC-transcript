1
00:00:10,072 --> 00:00:10,792
Hello everyone.

2
00:00:11,192 --> 00:00:12,513
Thank you all for joining us.

3
00:00:13,153 --> 00:00:14,593
My name is BartÅ‚omiej Wasiak.

4
00:00:14,953 --> 00:00:17,153
I'm a senior software engineer at Respawn.

5
00:00:17,974 --> 00:00:19,074
And in this presentation,

6
00:00:19,094 --> 00:00:21,034
I'm going to discuss different methods

7
00:00:21,414 --> 00:00:24,055
of using physics for animated characters

8
00:00:24,655 --> 00:00:26,235
in Star Wars Jedi Fallen Order.

9
00:00:27,315 --> 00:00:30,336
So what is actually physical animation?

10
00:00:30,996 --> 00:00:33,076
So instead of simply playing an animation,

11
00:00:33,476 --> 00:00:35,717
we can use physics to move rectal bodies

12
00:00:35,857 --> 00:00:37,177
to follow the animation pose.

13
00:00:38,317 --> 00:00:41,979
And one of the consequences of that is that with physics,

14
00:00:42,179 --> 00:00:44,000
we can include collisions.

15
00:00:44,700 --> 00:00:47,362
So we play the same animation while at the same time,

16
00:00:47,742 --> 00:00:50,764
we can detect collisions and prevent clipping.

17
00:00:51,424 --> 00:00:54,306
So in this video, we have two characters

18
00:00:54,386 --> 00:00:55,947
playing the same animation.

19
00:00:56,367 --> 00:00:59,409
So the character on the left just simply plays

20
00:00:59,449 --> 00:01:03,051
the animation as usual, but the second character on the right,

21
00:01:03,471 --> 00:01:06,593
it uses physics to play the same moves.

22
00:01:07,442 --> 00:01:11,222
So we can see that the character on the left just clips through the environment,

23
00:01:12,022 --> 00:01:18,164
while the character on the right avoids collisions by slightly changing the animation.

24
00:01:20,284 --> 00:01:26,805
So in general, we have three main methods of driving physics to follow the animation.

25
00:01:27,445 --> 00:01:34,266
So the first method is using motors. So the motor is a part of the joint constraint between

26
00:01:34,306 --> 00:01:34,947
regular bodies.

27
00:01:35,569 --> 00:01:41,771
And they use a specified animation target to generate the local force between connected bodies.

28
00:01:42,292 --> 00:01:46,973
And that local force drives bodies to follow the animation target.

29
00:01:48,094 --> 00:01:52,895
The second method is using velocities. So in this case, we compute a velocity

30
00:01:53,296 --> 00:01:58,317
needed to move the body from one place to another during a given frame time.

31
00:01:59,158 --> 00:02:04,500
And in this way, we can force the body to move to reach the animation target.

32
00:02:05,428 --> 00:02:12,871
And the third method is using constraints. So in this case, we create a new constraint

33
00:02:13,191 --> 00:02:19,973
between a dynamic body of the ragdoll and the animation target. And all parameters for this

34
00:02:20,053 --> 00:02:27,015
new constraint, they define how we force the dynamic body to follow the animation target.

35
00:02:28,096 --> 00:02:33,637
And in our game, we started adding physical animation using motors. So this is the first

36
00:02:34,038 --> 00:02:34,898
method on this list.

37
00:02:36,499 --> 00:02:41,340
And we added it first on stormtroopers when they are force pulled by the hero.

38
00:02:42,361 --> 00:02:46,442
In this case, he bodies kinematic, so it strictly follows the animation,

39
00:02:46,763 --> 00:02:52,525
but all the other bodies are driven by motors. And red pose, so red objects,

40
00:02:52,665 --> 00:02:56,486
they represent a pose only from animation, so without any physics added.

41
00:02:57,333 --> 00:02:59,675
And we can observe how, thanks to physical animation,

42
00:03:01,456 --> 00:03:04,499
legs are nicely colliding and interacting, actually,

43
00:03:04,559 --> 00:03:05,560
with an environment.

44
00:03:05,580 --> 00:03:06,781
So two-way interaction.

45
00:03:07,261 --> 00:03:11,585
And pure animation, without any physics added, so red objects,

46
00:03:12,285 --> 00:03:14,507
would simply just clip for collisions.

47
00:03:15,968 --> 00:03:22,153
And our game uses Unreal Engine 4 and NVIDIA Physics.

48
00:03:23,084 --> 00:03:24,185
as the physics engine.

49
00:03:24,705 --> 00:03:26,646
And I would like to share some essential details

50
00:03:26,726 --> 00:03:28,047
of our implementation.

51
00:03:29,148 --> 00:03:32,850
So first of all, there are a few physics parameters

52
00:03:33,110 --> 00:03:35,011
that are important to set up correctly.

53
00:03:35,772 --> 00:03:39,054
So the first one is the number of solver iterations.

54
00:03:39,694 --> 00:03:43,396
So default values in Unreal are 8 and 1.

55
00:03:44,457 --> 00:03:47,919
And for motors, nothing really works as you would

56
00:03:47,979 --> 00:03:49,480
expect with these settings.

57
00:03:50,465 --> 00:04:05,195
And in our game and overall, when you create your own implementation, you need to go higher with these settings. You need to find the best one that fits your implementation and your needs. And in our case, it was 64 and 32.

58
00:04:07,176 --> 00:04:19,405
Also, going forward, we are using a flag e-acceleration, which is enabled for every joint. It makes it easier to set up all parameters related to mass, especially.

59
00:04:20,432 --> 00:04:23,353
And the topic of friction and restitution.

60
00:04:23,853 --> 00:04:27,535
So these parameters, they tend to cause a lot of problems

61
00:04:27,595 --> 00:04:31,936
for physical animation, because higher values of friction,

62
00:04:31,956 --> 00:04:37,639
they make harder for physics to reach the animation target.

63
00:04:38,179 --> 00:04:40,820
And by default, we use just low values

64
00:04:41,681 --> 00:04:43,141
for friction and restitution.

65
00:04:44,242 --> 00:04:48,283
And in the case, actually, of that force-pulled Stormtrooper,

66
00:04:49,231 --> 00:04:55,237
we actually use no friction at all to make it easy for the physics to reach the animation target.

67
00:04:57,479 --> 00:05:03,224
And another big topic here in terms of implementation details is continuous collision

68
00:05:03,504 --> 00:05:08,109
detection. So it needs to be enabled to have really high quality results,

69
00:05:09,510 --> 00:05:13,894
but it is better to disable CCD between bodies in the same rectangle.

70
00:05:15,580 --> 00:05:23,464
The problem overall, big problem here is that with CCD enabled, constraint projection does not work very well in physics.

71
00:05:24,145 --> 00:05:34,550
So what we did, we actually ended up doing that we wrote our own piece of code to perform linear projection for all joints.

72
00:05:35,310 --> 00:05:43,835
So just for every joint we kind of bring two bodies together if they separate too much above a given threshold.

73
00:05:46,620 --> 00:05:50,124
So in our game, after force-pulled Stormtroopers,

74
00:05:50,665 --> 00:05:53,428
another case where we started to use physical animation

75
00:05:53,588 --> 00:05:55,470
is the death of Stormtroopers.

76
00:05:56,191 --> 00:05:59,215
So here, we just simply play a death animation.

77
00:06:00,116 --> 00:06:03,961
And as you can see, we have really big flips

78
00:06:04,041 --> 00:06:06,083
and acrobatic movements from animations.

79
00:06:06,958 --> 00:06:15,486
And in the base case, we were just enabling red regular physics near the very end of the animation

80
00:06:15,686 --> 00:06:22,092
to have that like free fall with the gravity. And this solution, it worked really well for

81
00:06:22,513 --> 00:06:26,837
open space, but close to other collisions, as we can see here in this video,

82
00:06:27,177 --> 00:06:31,181
it does not give good results. So, limbs are clipping through collisions.

83
00:06:32,253 --> 00:06:36,796
and kind of overall the sequence it does not look very natural.

84
00:06:39,038 --> 00:06:45,923
So to improve that depth sequence we enable physical animation on the whole character

85
00:06:46,683 --> 00:06:53,708
and we are using motors for all joints but the main question was what to do about the root body

86
00:06:54,609 --> 00:06:56,991
which is in this case the hip body.

87
00:06:58,111 --> 00:07:05,015
It can be kinematic because it would easily penetrate walls as the animation would just simply go through the wall

88
00:07:05,755 --> 00:07:12,960
But we wanted still like to make that root body to follow the animation strictly to perform this big acrobatic

89
00:07:13,440 --> 00:07:14,540
So we need both

90
00:07:15,161 --> 00:07:16,401
collisions and we need

91
00:07:17,723 --> 00:07:21,264
we need that root body to follow the animation.

92
00:07:21,764 --> 00:07:24,585
So the solution was to keep the hip body

93
00:07:24,925 --> 00:07:26,345
as physically simulated body

94
00:07:26,805 --> 00:07:30,306
and create a new constraint for that body.

95
00:07:30,887 --> 00:07:33,347
And the constraint is between the hip body

96
00:07:33,547 --> 00:07:35,448
and the given animation target.

97
00:07:35,928 --> 00:07:40,549
So this new constraint kind of drags the physics body

98
00:07:41,269 --> 00:07:44,210
of the hip bone to follow the animation target.

99
00:07:44,933 --> 00:07:47,174
And for that constraint, for that new constraint,

100
00:07:47,994 --> 00:07:50,095
we remove all degrees of freedom.

101
00:07:51,335 --> 00:07:53,516
So we lock both linear and angular movement

102
00:07:53,816 --> 00:07:54,696
for that constraint.

103
00:07:55,276 --> 00:07:57,557
It gives the strongest matching with the animation

104
00:07:57,617 --> 00:07:59,657
to perform all these big flips.

105
00:08:00,598 --> 00:08:05,259
And the question was, with this new solution, what happens

106
00:08:05,819 --> 00:08:06,939
when we have an obstacle?

107
00:08:07,480 --> 00:08:12,261
So in other words, what to do if the hip body hits the wall?

108
00:08:13,084 --> 00:08:16,526
and the animation target still pushes forward.

109
00:08:17,247 --> 00:08:20,449
So what to do about that physical body, which is just

110
00:08:20,569 --> 00:08:21,890
colliding right now with the wall?

111
00:08:22,470 --> 00:08:25,052
So what we do, we monitor the distance

112
00:08:25,332 --> 00:08:27,994
between the actual position of the root body

113
00:08:28,474 --> 00:08:30,796
and that desired animation target.

114
00:08:31,837 --> 00:08:36,200
And if the constraint drive for that hip body

115
00:08:36,600 --> 00:08:38,941
is unable to reach the target within some

116
00:08:40,748 --> 00:08:44,252
we just turn ragdoll to a free fall mode with the gravity.

117
00:08:45,273 --> 00:08:49,697
So this is how it looks, the same sequence using physical animation.

118
00:08:50,578 --> 00:08:59,926
So we can see how the root body detects that it is unable to move through the wall, and it turns the ragdoll into falling with gravity.

119
00:09:01,388 --> 00:09:03,230
So it worked really nice for our case.

120
00:09:05,846 --> 00:09:13,427
So these previous scenarios, they were focused on matching the animation pose closely and

121
00:09:13,667 --> 00:09:21,469
supporting collisions. So that was the case for stormtroopers in our game. But right now I would

122
00:09:21,509 --> 00:09:31,291
like to move to physical animation we did for the hero. And for the hero, actually collisions ended

123
00:09:31,411 --> 00:09:33,491
up as not an important feature.

124
00:09:34,579 --> 00:09:40,902
And actually, the fluidity of natural movement and the smoothness of natural movement was

125
00:09:40,982 --> 00:09:47,525
actually the top priority for us. And so we started with a ledge hang for the hero,

126
00:09:47,645 --> 00:09:52,708
so the special navigation for the hero. And here, hands and forearms are kinematic,

127
00:09:52,828 --> 00:09:58,471
so we strictly follow the animation. And all the other bodies are fully physics-driven, just by

128
00:10:00,349 --> 00:10:03,611
So we can, yeah, we can actually observe how just pure animation

129
00:10:03,671 --> 00:10:06,833
pose, so this red object is more static.

130
00:10:07,533 --> 00:10:11,135
And physics is adding this nice looking layer of motion.

131
00:10:12,096 --> 00:10:13,837
Also because of that, actually animators

132
00:10:13,937 --> 00:10:16,478
could focus more on just on core poses

133
00:10:17,679 --> 00:10:20,440
and add and use physical animation

134
00:10:20,500 --> 00:10:23,582
to add that additional fluidity to the motion.

135
00:10:24,843 --> 00:10:26,143
So it worked really well.

136
00:10:27,124 --> 00:10:29,465
We had really great results with these settings.

137
00:10:30,566 --> 00:10:39,028
So using only motors to drive physics to the animation pose really gives nice looking results.

138
00:10:39,168 --> 00:10:45,189
It really adds a lot of fluidity to the motion. And we tried to extend the same approach to other

139
00:10:45,689 --> 00:10:48,910
hero navigations. And the results were not so great.

140
00:10:51,811 --> 00:10:58,892
So I have an example of sliding with weak motor settings.

141
00:10:59,664 --> 00:11:03,206
So whenever there's an obstacle or some fast-changing motion,

142
00:11:03,666 --> 00:11:05,327
the hero just swings way too much.

143
00:11:06,968 --> 00:11:09,850
So we tried with stronger motors.

144
00:11:10,491 --> 00:11:13,412
In that case, character was just too stiff,

145
00:11:14,013 --> 00:11:16,655
and results were also not really satisfying us.

146
00:11:17,435 --> 00:11:19,276
And we also tried different approaches,

147
00:11:19,376 --> 00:11:21,758
mixing motors with velocities for all bodies.

148
00:11:22,458 --> 00:11:25,340
But still, we didn't have substantially better results.

149
00:11:25,860 --> 00:11:28,282
So we tried something different.

150
00:11:30,156 --> 00:11:39,604
we came up with a different solution. We tried back weaker motor settings to get that springy

151
00:11:39,764 --> 00:11:45,869
fluid behavior and the new solution for us was a local space blend with animation pose.

152
00:11:46,810 --> 00:11:52,435
And in case of this sliding we just blend 50 percent of the physics pops.

153
00:11:56,199 --> 00:11:58,040
So here is the final result.

154
00:11:58,441 --> 00:11:59,902
And it started to look really better,

155
00:12:00,002 --> 00:12:01,643
especially the feeling of it

156
00:12:02,884 --> 00:12:05,065
when you were controlling the hero with the stick.

157
00:12:05,726 --> 00:12:09,448
The character really nicely reacts to your movement.

158
00:12:09,568 --> 00:12:10,529
It isn't too stiff.

159
00:12:11,090 --> 00:12:13,131
At the same time, reactions are not too swingy.

160
00:12:13,992 --> 00:12:16,513
And here is how it looks in the final game.

161
00:12:17,434 --> 00:12:19,155
We have different pose for the hero,

162
00:12:20,856 --> 00:12:21,697
but the whole,

163
00:12:23,641 --> 00:12:33,608
action sequence, really physical animation gives a lot of additional fluidity and reactions to every

164
00:12:33,768 --> 00:12:41,474
change in movement direction or every collision that happens. So with this new kind of approach,

165
00:12:43,095 --> 00:12:50,981
we started to use it in other cases. So here is climbing where

166
00:12:52,046 --> 00:12:54,487
we blend just 40% of physics.

167
00:12:55,028 --> 00:12:59,791
So here, kind of the final result is subtle,

168
00:13:01,212 --> 00:13:04,314
but it gives that nice fluidity to the whole movement.

169
00:13:06,555 --> 00:13:09,477
Here we have wind fields, and in this case,

170
00:13:10,057 --> 00:13:15,221
we blend 45% of physics with the animation.

171
00:13:17,247 --> 00:13:23,410
And here ropes where we blend again 40% of physics.

172
00:13:23,810 --> 00:13:28,092
So we can see how legs nicely have some inertia

173
00:13:28,513 --> 00:13:30,514
after we stop the movement.

174
00:13:31,194 --> 00:13:34,876
And additionally, it gives really nice additional motion

175
00:13:35,996 --> 00:13:36,556
to the hero.

176
00:13:39,498 --> 00:13:39,618
And

177
00:13:41,252 --> 00:13:44,875
After that, we started again to have challenging cases.

178
00:13:45,556 --> 00:13:48,138
So this one was balanced beam hang.

179
00:13:48,158 --> 00:13:50,480
It was really challenging to make it right.

180
00:13:50,540 --> 00:13:55,144
We can see here that it is 50% physics bland.

181
00:13:55,684 --> 00:13:59,327
But it was really hard to find stable movement for this case.

182
00:14:00,337 --> 00:14:13,780
It is because of these like very aggressive characters moves and the character just swings way too much and the whole final position of the hero is just way too off from the animation.

183
00:14:14,480 --> 00:14:17,181
So we tried here a different approach.

184
00:14:19,101 --> 00:14:25,483
So, what we did, we added a partial velocity drive for just one body to stabilize the movement.

185
00:14:26,343 --> 00:14:28,103
So here's the code how we did that.

186
00:14:28,123 --> 00:14:28,163
So...

187
00:14:30,608 --> 00:14:33,630
We compute first the desired linear velocity.

188
00:14:34,110 --> 00:14:37,391
So this is the velocity needed to fully move the body

189
00:14:37,671 --> 00:14:40,532
from the current position to the target position

190
00:14:40,752 --> 00:14:42,533
from the animation in one frame.

191
00:14:43,533 --> 00:14:46,874
Then we read the current linear velocity of the body

192
00:14:47,495 --> 00:14:50,036
and we perform just linear interpolation

193
00:14:50,116 --> 00:14:52,056
between that current velocity

194
00:14:52,597 --> 00:14:55,338
and the desired velocity computed in the first line.

195
00:14:55,858 --> 00:14:57,598
So this is the way we kind of like

196
00:14:58,256 --> 00:15:04,381
feed current velocity, whatever is happening from physics point of view currently to that body,

197
00:15:04,961 --> 00:15:10,266
to the desired velocity that is just tries to move exactly as it is,

198
00:15:12,047 --> 00:15:17,732
as the movement looks from the animation. And the variable t is just the amount,

199
00:15:17,792 --> 00:15:24,938
it is just the amount of the blend. For the balance beam, we use 50% of the velocity drive

200
00:15:24,978 --> 00:15:26,619
for the hip body. And

201
00:15:28,612 --> 00:15:31,313
Here are the results of this new solution.

202
00:15:32,634 --> 00:15:36,795
So using dispersion velocity drive just for the hip body

203
00:15:37,315 --> 00:15:39,336
nicely stabilizes the whole movement,

204
00:15:39,696 --> 00:15:42,577
actually without affecting the behavior for all other bodies.

205
00:15:43,298 --> 00:15:46,919
So it kind of keeps this fluid behavior

206
00:15:46,979 --> 00:15:51,261
for all other joints, which are just fully driven by motors.

207
00:15:51,561 --> 00:15:56,603
And still, we don't go with too swingy motion.

208
00:15:58,487 --> 00:16:04,956
So we can really see how nicely the overall character reacts to the motion.

209
00:16:07,520 --> 00:16:14,109
So these previous cases, they were enhancing some special navigation state for the hero.

210
00:16:15,858 --> 00:16:18,639
But what about the ground movement?

211
00:16:18,759 --> 00:16:26,842
So we tried to do something with a normal hero walking or running on the ground,

212
00:16:28,023 --> 00:16:29,103
but we did not see

213
00:16:30,062 --> 00:16:36,145
much opportunity for improvements in running or walking cycles, except that starts,

214
00:16:37,725 --> 00:16:45,368
stops, and turnings were promising to try our new technology. So here is the video.

215
00:16:45,929 --> 00:16:54,232
And we focused only on the hero's arms. And overall, we have more complex logic.

216
00:16:55,322 --> 00:17:00,785
when to start a specific physical animation either for start, stop or turning.

217
00:17:02,085 --> 00:17:08,529
And every physical animation lasts for 2 seconds and blends out during that time.

218
00:17:09,690 --> 00:17:11,951
It is a subtle effect as we can see on the video.

219
00:17:12,696 --> 00:17:19,541
But it smooths out some transitions between different animations and adds some inertia to the movement.

220
00:17:21,602 --> 00:17:26,386
And here we achieve really good results with blending just 40% of physics.

221
00:17:27,326 --> 00:17:34,932
So we can see how sometimes the arm lags behind the red object. So lags behind animation target.

222
00:17:35,792 --> 00:17:35,852
Or...

223
00:17:38,372 --> 00:17:44,999
after a while it kind of like with additional inertia just is a bit

224
00:17:46,161 --> 00:17:52,568
farther than the animation target so it's really giving nice little touch

225
00:17:53,409 --> 00:17:55,591
physical touch to the whole movement

226
00:17:58,700 --> 00:18:04,104
Still, however, for some cases, for some occasional things,

227
00:18:05,205 --> 00:18:08,167
we had a too big difference between physics pose

228
00:18:09,007 --> 00:18:10,688
and the desired animation pose.

229
00:18:11,489 --> 00:18:15,992
So we didn't want to add any velocity drive

230
00:18:16,753 --> 00:18:19,674
because it would change the overall behavior for motors.

231
00:18:20,382 --> 00:18:22,244
and we came up with something new.

232
00:18:22,825 --> 00:18:26,588
So we added again a new constraint,

233
00:18:27,208 --> 00:18:30,391
this time between a wrist body and the animation target.

234
00:18:31,252 --> 00:18:34,174
The constraint allows for free angular movement,

235
00:18:36,156 --> 00:18:40,040
but it has a distance limit for linear movement.

236
00:18:40,300 --> 00:18:42,522
So in our case, it was 25 units.

237
00:18:43,362 --> 00:18:47,886
So the arm is free to move within the threshold.

238
00:18:50,278 --> 00:18:56,887
in this case of 25 units with free angular movement and linear movement limited to that distance.

239
00:18:58,049 --> 00:19:04,117
So if it is too far away from the target, this constraint, it is bringing back.

240
00:19:07,320 --> 00:19:14,782
the constraint is bringing back closer to the animation target. If it is within the distance

241
00:19:14,802 --> 00:19:22,964
threshold the arm is free to move as desired. So with that constraint edit we can see on this image

242
00:19:23,004 --> 00:19:31,787
that the arm is not so far away as it is on the on the left image. So really it is giving us

243
00:19:32,227 --> 00:19:34,367
results exactly what we needed here.

244
00:19:38,010 --> 00:19:45,058
And we had also a similar solution to simulate physics on the hero's arms during walking on the

245
00:19:45,098 --> 00:19:53,689
balance beam. So in this case, it gives really a nice soft feeling that reflects that careful

246
00:19:53,789 --> 00:19:57,794
movement along the balance beam. It was working really nicely in this case.

247
00:20:00,346 --> 00:20:06,948
And the third big case of physical animation in our game is BodyDroidBD1.

248
00:20:07,509 --> 00:20:14,651
So this is a special character companion droid and spends most of the time attached to the hero's back.

249
00:20:15,752 --> 00:20:24,375
And we wanted to add a kind of relaxed physical animation to make the droid react naturally to

250
00:20:24,515 --> 00:20:25,535
every hero's move.

251
00:20:27,729 --> 00:20:43,341
So here is how it looks in the game. So the bottom parts of the droid's legs are kinematic and all the other bodies have full physics and there's no animation blending. So this is 100% physics. And there are no angular limits for any joints.

252
00:20:44,542 --> 00:20:45,303
So we can see how

253
00:20:46,064 --> 00:20:53,067
Yeah, nicely and naturally the droid behaves with some additional inertia and it reacts to the

254
00:20:53,107 --> 00:21:01,971
hero's moves either doing action or just movement. It is especially visible here during sliding

255
00:21:03,032 --> 00:21:08,875
when the droid, yeah, nicely swings with the hero. It was working really, really well here.

256
00:21:12,897 --> 00:21:13,797
Still, for some

257
00:21:14,682 --> 00:21:16,284
very fast hero's moves.

258
00:21:17,505 --> 00:21:19,167
We had some problem to support

259
00:21:19,507 --> 00:21:21,589
physics on the droid.

260
00:21:21,669 --> 00:21:22,550
Physical animation

261
00:21:22,710 --> 00:21:24,352
could become unstable

262
00:21:24,592 --> 00:21:25,293
in such cases.

263
00:21:26,834 --> 00:21:28,135
So somehow we had to

264
00:21:28,396 --> 00:21:29,937
restrict droid's moves.

265
00:21:31,519 --> 00:21:32,380
So again

266
00:21:32,400 --> 00:21:34,181
we add a new constraint

267
00:21:34,622 --> 00:21:36,483
but this time between the droid's

268
00:21:36,544 --> 00:21:38,726
head and the animation target.

269
00:21:39,537 --> 00:21:44,579
But this time we change the distance limit, the distance threshold dynamically.

270
00:21:45,500 --> 00:21:54,344
So if the body moves slowly, the distance is getting bigger to allow more free movement.

271
00:21:55,144 --> 00:22:04,448
But if the body moves too fast, the distance to allow that free movement is getting closer to zero to keep the head

272
00:22:05,476 --> 00:22:07,478
very near the animation target.

273
00:22:08,018 --> 00:22:10,640
And actually, in the case of strict zero

274
00:22:11,261 --> 00:22:12,722
for very high velocity,

275
00:22:14,063 --> 00:22:16,966
we just switch the constraint mode from limited to locked

276
00:22:17,106 --> 00:22:18,827
to give the strongest watching.

277
00:22:20,929 --> 00:22:23,231
And this is how it looks

278
00:22:25,413 --> 00:22:29,937
for this hero,

279
00:22:30,277 --> 00:22:31,678
like very fast movement here.

280
00:22:32,950 --> 00:22:37,232
So we have a comparison on the left where there is no constraint enabled.

281
00:22:38,312 --> 00:22:43,894
So we can observe how the droid's head clips almost completely through the hero

282
00:22:45,235 --> 00:22:52,338
during that little moment. Yeah, exactly here. And on the right where the constraint for the

283
00:22:52,378 --> 00:22:54,318
droid's head is enabled.

284
00:22:55,157 --> 00:23:01,580
we can see that it nicely stays in place and still the droid keeps his physical behavior

285
00:23:01,600 --> 00:23:11,845
at slower speeds. So we don't really alter somehow this behavior during slower movement.

286
00:23:12,626 --> 00:23:20,970
But whenever very high speed action happens that could potentially make the droid

287
00:23:22,070 --> 00:23:24,351
to clip through the hero or just become unstable.

288
00:23:25,181 --> 00:23:33,863
that constraint is limiting almost to zero its distance threshold to keep the droid's head

289
00:23:34,564 --> 00:23:36,824
where it should be, where the animation target is.

290
00:23:39,265 --> 00:23:43,626
Overall, actually that implementation of physical animation for the droid was

291
00:23:43,886 --> 00:23:48,768
really challenging. There were a few reasons behind it. So

292
00:23:50,484 --> 00:23:56,410
We have 85% scale on the droid when it's attached to the hero and

293
00:23:57,591 --> 00:24:01,195
working and dealing with some custom scale settings is never really fun.

294
00:24:02,330 --> 00:24:10,974
We had also a problem like the order of the execution with attaching. So potentially we have

295
00:24:11,894 --> 00:24:19,778
physics running on the droid when also we have physics active on the hero. So that was actually

296
00:24:19,818 --> 00:24:28,381
the case during sliding navigation when we had hero with some physical animation and we had also

297
00:24:28,481 --> 00:24:30,122
the droid with physical animation.

298
00:24:31,423 --> 00:24:37,626
So there were really challenges to try to properly execute it in order.

299
00:24:38,607 --> 00:24:47,132
Also, we had a problem that the droids physical animation was looking a bit differently with variable frame time.

300
00:24:47,792 --> 00:24:53,216
We had good looking behavior at 30 FPS, but we had very steep behavior at 60 FPS.

301
00:24:53,916 --> 00:24:59,740
So all these settings, all these things were making the droid really challenging in terms of implementation.

302
00:25:00,508 --> 00:25:01,988
And we came up with these solutions.

303
00:25:02,648 --> 00:25:06,409
So in our game, every physical animation,

304
00:25:06,789 --> 00:25:08,289
which does not require collisions,

305
00:25:08,629 --> 00:25:10,390
which is the case of the droid

306
00:25:10,510 --> 00:25:12,210
and in many cases for the hero,

307
00:25:12,790 --> 00:25:15,491
is running within its own physics scene.

308
00:25:16,271 --> 00:25:19,352
And the physics scene is simulated at a fixed frame time,

309
00:25:19,532 --> 00:25:20,612
regardless of the hardware.

310
00:25:21,352 --> 00:25:22,772
And we add predicted movement

311
00:25:22,852 --> 00:25:25,273
for the remaining time left to simulate.

312
00:25:26,060 --> 00:25:31,567
And because we have these exclusive physics scenes we can control when they are simulated.

313
00:25:31,667 --> 00:25:38,236
So we run physical animation on the hero first and having these results from the hero

314
00:25:39,017 --> 00:25:43,222
we prepare and run the physical animation on the droid.

315
00:25:45,437 --> 00:25:52,905
So this was our third big case for physical animation in Star Wars Jedi Fallen Order.

316
00:25:53,365 --> 00:25:58,871
I'd like to summarize the things I presented here.

317
00:25:59,532 --> 00:26:04,658
So I described a few important details about physics integration.

318
00:26:05,600 --> 00:26:10,983
So the numbers of iterations, friction on institution, and CCD with constraints projection.

319
00:26:12,124 --> 00:26:19,368
And I described how we use the constraint to drive the ragdoll root body, the heap body.

320
00:26:20,609 --> 00:26:25,992
So that was the case for stormtroopers. And if that root body diverges above some threshold

321
00:26:26,092 --> 00:26:31,115
from the animation target, we turn the whole ragdoll to a free fall mode.

322
00:26:32,981 --> 00:26:39,524
We also use a lot of local space blending between pure animation and motor-driven bodies.

323
00:26:40,205 --> 00:26:45,587
And actually we prefer weaker motor settings to achieve that fluid behavior.

324
00:26:46,608 --> 00:26:52,371
We also, in some cases, we also use partial velocity drive for just one body to stabilize the movement.

325
00:26:54,786 --> 00:27:00,831
and we create a new constraint between ragdoll body and the animation target to set

326
00:27:01,532 --> 00:27:09,699
movement some movement limits like it was the case for a wrist bone for the ground navigation

327
00:27:10,160 --> 00:27:10,720
for the hero

328
00:27:12,024 --> 00:27:19,894
and for the droid's head. And in the case of the droid's head, we also dynamically change

329
00:27:20,135 --> 00:27:24,420
that movement limit depending on the head velocity.

330
00:27:26,854 --> 00:27:34,160
And kind of implementation detail, but it was important also for us to make it right so that

331
00:27:34,240 --> 00:27:42,427
we have separate physics scenes for the attached droid to control better the flow of the physical

332
00:27:42,487 --> 00:27:49,572
animation. And there are a few things actually I wish I knew before we started to work on physical

333
00:27:49,612 --> 00:27:50,093
animation.

334
00:27:51,556 --> 00:27:59,879
So at the beginning it is really good to know, it is a challenge but it is good to know what is your goal of adding physical animation in your game.

335
00:28:00,619 --> 00:28:07,722
Do you want to support collisions while playing the animation or do you want to change visual outcome of the movement?

336
00:28:08,342 --> 00:28:16,645
Because both cases they require quite different approach and different set of settings, different features from physical animation.

337
00:28:17,465 --> 00:28:18,225
And also...

338
00:28:18,904 --> 00:28:23,947
All physics parameters, they kind of influence each other.

339
00:28:23,967 --> 00:28:28,049
You change one parameter and it makes something else

340
00:28:28,089 --> 00:28:29,389
to work better or worse.

341
00:28:30,130 --> 00:28:33,411
And you need to revisit previously failed cases

342
00:28:33,491 --> 00:28:34,111
all the time.

343
00:28:34,552 --> 00:28:36,533
You need to check your new knowledge.

344
00:28:37,093 --> 00:28:38,794
Is it working better or worse?

345
00:28:39,774 --> 00:28:42,756
Just to apply your new solutions to some previous cases.

346
00:28:44,617 --> 00:28:45,737
And when you have...

347
00:28:46,892 --> 00:28:52,595
Active Ragdoll physics, which is active almost all the time,

348
00:28:53,035 --> 00:28:56,437
things that normally work, they kind of tend to break.

349
00:28:57,678 --> 00:28:59,579
So for example, order of updates

350
00:28:59,679 --> 00:29:02,060
for your actors, entities, components,

351
00:29:04,041 --> 00:29:06,962
some dependencies between physics and other systems.

352
00:29:07,102 --> 00:29:10,184
So for example, cloth needs to be after physics

353
00:29:10,264 --> 00:29:11,084
for some cases.

354
00:29:11,985 --> 00:29:13,685
or animation notifies.

355
00:29:13,745 --> 00:29:16,846
These are things that when you don't have physics running

356
00:29:16,906 --> 00:29:18,867
all the time, they kind of work correctly.

357
00:29:18,927 --> 00:29:20,827
But when you enable physics and you have a lot

358
00:29:20,867 --> 00:29:22,527
of dependencies with other systems,

359
00:29:23,588 --> 00:29:26,068
you need to really be careful with these things

360
00:29:26,128 --> 00:29:28,129
to make it work correctly.

361
00:29:30,649 --> 00:29:34,370
I'd like to highlight and mention two previous

362
00:29:34,670 --> 00:29:36,691
great presentation on a similar topic.

363
00:29:37,684 --> 00:29:46,149
So this is physics animation in Uncharted 4 at GDC 2017 and physics-driven regdos and animation

364
00:29:46,169 --> 00:29:53,834
IDEA from GDC 2018. Please check these great presentations to find some other

365
00:29:53,894 --> 00:29:58,197
implementation details how they did physics for their characters.

366
00:29:59,927 --> 00:30:01,609
And Respawn is hiring.

367
00:30:02,551 --> 00:30:05,935
Please check our website, respawn.com careers.

368
00:30:06,956 --> 00:30:08,958
And I strongly encourage you to do it.

369
00:30:09,038 --> 00:30:11,241
So Respawn is always hiring.

370
00:30:11,401 --> 00:30:14,325
So please check, maybe there is something interesting

371
00:30:14,365 --> 00:30:14,645
for you.

372
00:30:16,107 --> 00:30:17,048
So thank you so much.

373
00:30:17,709 --> 00:30:19,691
And I'm happy to answer all your questions.

