1
00:00:11,800 --> 00:00:17,622
Hey everyone, I am Tor Frigg, I'm the creative director and general art person at Neon Giant.

2
00:00:17,882 --> 00:00:21,724
And welcome to my talk, Building the World of the Ascent.

3
00:00:22,904 --> 00:00:31,148
And this talk is diving into how we approached and solved some of the specific challenges we faced when we built the world of the ascent.

4
00:00:31,468 --> 00:00:33,749
And a big chunk of it is talking about the...

5
00:00:34,509 --> 00:00:37,910
the process that made us arrive where we are with our pipeline

6
00:00:38,130 --> 00:00:41,551
and deep dive into some of the tools we created to make the world

7
00:00:41,791 --> 00:00:45,092
and some general Unreal advice sprinkled in.

8
00:00:46,453 --> 00:00:50,754
So this is like a short trailer of the game.

9
00:00:51,654 --> 00:01:03,218
You have shown an aptitude for applying lethal solutions to conflicted

10
00:01:03,258 --> 00:01:04,018
situations.

11
00:01:08,714 --> 00:01:11,395
It looks like we're gonna have to work together on this one.

12
00:01:12,155 --> 00:01:13,455
Let's get it done!

13
00:01:27,732 --> 00:01:35,237
So what is The Ascent? It's a solo and co-op action RPG set in a dystopian cyberpunk future

14
00:01:35,377 --> 00:01:41,981
and it's made in Unreal Engine 4 and it's available on PC, Xbox One, Xbox Series, PS4 and 5.

15
00:01:42,281 --> 00:01:48,205
And we released it last year on Xbox and PC and yesterday on PlayStation, so please go and buy it.

16
00:01:49,287 --> 00:01:51,848
And it's the first game from Neon Giant.

17
00:01:52,088 --> 00:01:55,030
And we are a small indie studio from Uppsala in Sweden.

18
00:01:55,250 --> 00:01:59,712
And we are 11 people, a team of extremely talented

19
00:01:59,852 --> 00:02:03,794
and awesome developers that I'm very honored to work alongside.

20
00:02:04,134 --> 00:02:07,936
And we all come from AAA, various parts of the AAA industry.

21
00:02:07,996 --> 00:02:11,058
And we've been around as a studio for about four years now.

22
00:02:12,258 --> 00:02:12,378
So.

23
00:02:14,150 --> 00:02:16,231
From the very beginning when we made this game,

24
00:02:16,272 --> 00:02:18,353
like, we had a couple of both, you know,

25
00:02:18,633 --> 00:02:21,556
really obvious and some non-obvious challenges ahead of us.

26
00:02:22,437 --> 00:02:23,678
Being a new small developer,

27
00:02:23,718 --> 00:02:25,219
of course, we made it easy for ourselves

28
00:02:25,299 --> 00:02:27,721
and we picked the easiest subject,

29
00:02:28,161 --> 00:02:30,763
an open-world dense sci-fi cityscape,

30
00:02:30,843 --> 00:02:33,025
you know, handcrafted and rich with storytelling.

31
00:02:33,966 --> 00:02:36,228
And we started with one artist, that was me,

32
00:02:36,988 --> 00:02:38,530
and we peaked with four artists,

33
00:02:38,650 --> 00:02:39,971
including TechArt and VFX.

34
00:02:41,692 --> 00:02:43,234
And this meant of course several things.

35
00:02:43,254 --> 00:02:49,079
I mean, we are a small team and we're working with what is essentially one of the most time-consuming topics.

36
00:02:49,779 --> 00:02:55,444
An urban imaginary environment where every single object needs to be both designed and built.

37
00:02:56,265 --> 00:02:59,388
And making sci-fi means that almost every asset needs to be...

38
00:03:00,479 --> 00:03:04,042
It needs to be designed and we didn't have any concept artists at all on the team,

39
00:03:05,142 --> 00:03:08,665
which means it's very demanding from a design point of view,

40
00:03:09,025 --> 00:03:10,446
so the subject itself.

41
00:03:10,606 --> 00:03:13,988
And we needed a very fast and flexible content pipeline,

42
00:03:14,489 --> 00:03:19,012
a very fast pipeline because we needed to build a lot of objects to cover the world.

43
00:03:20,584 --> 00:03:24,667
And also the art style, because we're making a dirty, slummy,

44
00:03:24,727 --> 00:03:26,228
lived-in kind of cityscape.

45
00:03:26,468 --> 00:03:30,291
And we have to push shaders and content a lot further.

46
00:03:30,571 --> 00:03:34,294
If you make something that is a bit more clean and shiny,

47
00:03:34,354 --> 00:03:37,296
it will be a lot easier to find a suitable pipeline.

48
00:03:37,456 --> 00:03:41,299
So not only do we need to find a fast pipeline,

49
00:03:41,319 --> 00:03:44,281
we also need to find a pipeline that

50
00:03:44,321 --> 00:03:46,463
didn't sacrifice the art style.

51
00:03:48,272 --> 00:03:49,796
And then the third major challenge we had,

52
00:03:50,036 --> 00:03:52,201
which is assembling the world itself.

53
00:03:52,501 --> 00:03:52,782
It's a...

54
00:03:53,949 --> 00:03:57,612
It's a large scale game with a very, very high asset density.

55
00:03:58,433 --> 00:04:00,215
And not only that, we also wanted

56
00:04:00,995 --> 00:04:04,679
to make a world that feel alive and handcrafted

57
00:04:04,799 --> 00:04:05,980
with a lot of storytelling.

58
00:04:06,401 --> 00:04:09,544
So that in itself was another challenge.

59
00:04:10,064 --> 00:04:12,667
How do we make a large urban world

60
00:04:12,847 --> 00:04:15,430
and achieve the high degree of world building

61
00:04:15,470 --> 00:04:16,330
that we want to aim for?

62
00:04:16,350 --> 00:04:16,391
So.

63
00:04:19,133 --> 00:04:23,560
To give you an idea of the scale of the world,

64
00:04:23,580 --> 00:04:27,966
this is maybe like a third of the game world or so.

65
00:04:29,093 --> 00:04:32,735
And then we go full CSI and start zooming in a little bit

66
00:04:32,915 --> 00:04:34,576
and into the city.

67
00:04:34,616 --> 00:04:37,837
This is one of the hubs in the game, cluster 13.

68
00:04:38,037 --> 00:04:39,298
And we zoom in closer.

69
00:04:39,318 --> 00:04:42,399
We start to see the asset density.

70
00:04:43,160 --> 00:04:44,460
This is a weapon shop.

71
00:04:44,641 --> 00:04:48,182
And then inside the weapon shop, and then enhance.

72
00:04:48,723 --> 00:04:52,845
So that's kind of the scale that we were working with.

73
00:04:55,205 --> 00:05:01,908
So we always knew that there was no way we could compete with larger titles without picking

74
00:05:01,948 --> 00:05:03,409
our battles extremely carefully.

75
00:05:03,489 --> 00:05:08,612
And we needed a very fast and transparent pipeline that allowed artists to not only

76
00:05:08,672 --> 00:05:11,413
create art very quickly, but also stay in the creative flow.

77
00:05:12,134 --> 00:05:15,615
And not just being fast, but also removing distractions.

78
00:05:17,524 --> 00:05:21,525
The two main themes that allowed us to do that was simplicity and limitations.

79
00:05:21,845 --> 00:05:27,027
And that might sound a little bit counterintuitive considering, you know, the complex subject matter.

80
00:05:27,107 --> 00:05:32,769
But what it allowed us to do was to focus on the big picture and leave room to polish.

81
00:05:33,129 --> 00:05:36,550
And it's also not the sexiest words to use to, you know, pitch a pipeline to artists.

82
00:05:37,230 --> 00:05:40,772
But we're a studio with a pretty strong background in technical art.

83
00:05:40,832 --> 00:05:43,733
So like an alternative title for this talk would have been, you know,

84
00:05:43,773 --> 00:05:46,193
tech art, all the things, because that's what we did.

85
00:05:47,872 --> 00:05:51,133
So if we start with the very building blocks of the game,

86
00:05:51,193 --> 00:05:52,333
the 3D models themselves.

87
00:05:53,174 --> 00:05:54,314
So from the very beginning, we knew

88
00:05:54,354 --> 00:05:56,175
that we couldn't have a traditional approach

89
00:05:56,235 --> 00:05:56,995
to making models.

90
00:05:57,456 --> 00:05:59,056
We needed speed.

91
00:06:00,437 --> 00:06:01,897
And we also needed something that

92
00:06:01,937 --> 00:06:05,099
would help in making visuals consistent with a minimum

93
00:06:05,379 --> 00:06:06,059
of iteration.

94
00:06:06,119 --> 00:06:09,461
So we needed to support art direction at every turn

95
00:06:09,481 --> 00:06:11,341
so we could just maintain momentum.

96
00:06:12,357 --> 00:06:17,060
And thankfully there was no point in making AAA quality assets because of the camera distance.

97
00:06:17,161 --> 00:06:19,822
So we had a lot of options to explore different approaches.

98
00:06:19,862 --> 00:06:23,465
So let's look at the options.

99
00:06:23,785 --> 00:06:28,168
So first of all a traditional method like with, you know, high poly, low poly modeling.

100
00:06:28,969 --> 00:06:30,670
That just wouldn't work for several reasons.

101
00:06:30,850 --> 00:06:32,632
First of all, the whole thing, you're

102
00:06:32,652 --> 00:06:34,453
building two different models, you need to bake,

103
00:06:34,473 --> 00:06:35,514
you need to import textures.

104
00:06:35,594 --> 00:06:36,475
It's just too many steps.

105
00:06:36,495 --> 00:06:37,235
It's like, no way.

106
00:06:37,996 --> 00:06:40,718
Another problem with that is that the traditional concept

107
00:06:40,778 --> 00:06:43,520
art to in-game model workflow doesn't work either,

108
00:06:43,581 --> 00:06:44,902
because we don't have any concept art.

109
00:06:45,842 --> 00:06:47,884
So we built the entire world and all the assets

110
00:06:47,984 --> 00:06:49,045
without any concept art.

111
00:06:49,545 --> 00:06:52,688
And we need a workflow where we can iterate on assets

112
00:06:52,808 --> 00:06:54,730
really, really quickly without bakes and so on.

113
00:06:56,297 --> 00:06:59,061
So, you know, how about tiling materials and decals,

114
00:06:59,922 --> 00:07:01,765
which is, you know, great for like cleaner art styles,

115
00:07:01,845 --> 00:07:05,009
but it doesn't really, you know, with more abstract shapes,

116
00:07:05,109 --> 00:07:07,733
but it doesn't work for the kind of detail level

117
00:07:07,773 --> 00:07:10,157
and the busy art style that we're going for.

118
00:07:11,210 --> 00:07:14,130
And we want lots of paneling, fine detail,

119
00:07:14,310 --> 00:07:18,351
and the workload would just be intense

120
00:07:18,451 --> 00:07:19,952
if we were doing it like that way,

121
00:07:19,972 --> 00:07:23,753
plus that we couldn't really support that amount of geometry

122
00:07:23,793 --> 00:07:24,453
that will be needed.

123
00:07:24,513 --> 00:07:27,373
So we can't rely on the title of textures.

124
00:07:27,854 --> 00:07:29,574
So how about trim sheets?

125
00:07:29,694 --> 00:07:33,515
I mean, they are standard sci-fi solution, right?

126
00:07:33,555 --> 00:07:36,195
Like, they're great for getting a lot of shapes and details,

127
00:07:37,336 --> 00:07:39,476
perfect for sci-fi panels, streams like that.

128
00:07:41,177 --> 00:07:43,237
And it also helps a lot with the art direction,

129
00:07:43,277 --> 00:07:45,318
because you get a lot of the art direction built

130
00:07:45,378 --> 00:07:46,078
into the texture.

131
00:07:46,118 --> 00:07:49,859
So it's very good for keeping down the iteration

132
00:07:49,899 --> 00:07:52,560
and maintaining a shared shape language.

133
00:07:53,600 --> 00:07:55,101
But trim sheets on their own, they

134
00:07:55,121 --> 00:07:58,001
are too expensive to make the kind of granular detail

135
00:07:58,021 --> 00:07:58,522
that we wanted.

136
00:07:58,562 --> 00:08:02,503
We wanted a lot of mechanical pieces, chunky engine bits.

137
00:08:02,643 --> 00:08:05,203
And it's a pain in the ass to unwrap those.

138
00:08:05,684 --> 00:08:06,544
Plus, you get a lot of.

139
00:08:07,975 --> 00:08:11,080
To get that kind of density, you need so many polygons.

140
00:08:11,260 --> 00:08:14,504
And the only real way to have shapes

141
00:08:14,584 --> 00:08:17,669
that are smoother than the amount of polygons you have

142
00:08:17,729 --> 00:08:18,370
is to bake them.

143
00:08:18,550 --> 00:08:20,833
But we already said that we didn't want to bake things.

144
00:08:20,993 --> 00:08:21,954
So that was a bit of a problem.

145
00:08:23,135 --> 00:08:26,317
So how about we use one set of baked assets

146
00:08:26,377 --> 00:08:27,778
and one set of trim sheets?

147
00:08:28,619 --> 00:08:31,140
That could work, but then we would need to have two

148
00:08:31,200 --> 00:08:32,721
materials for each asset.

149
00:08:32,841 --> 00:08:35,043
And we're going for a very, very dense world,

150
00:08:35,123 --> 00:08:38,805
so that would just explode the amount of draw calls.

151
00:08:39,866 --> 00:08:41,767
And not to mention the setup time,

152
00:08:41,787 --> 00:08:45,549
because then we need to set up two materials for each asset,

153
00:08:45,609 --> 00:08:48,031
and that would also just be very time consuming.

154
00:08:48,978 --> 00:08:53,360
But at the same time we really need those baked bits to get the detail level that we wanted.

155
00:08:54,101 --> 00:08:58,282
So we solved that by just putting the baked parts in the trim sheet.

156
00:08:58,783 --> 00:08:59,903
And that was, you know, problem solved.

157
00:09:00,563 --> 00:09:05,685
So we sacrificed a bit of space in our trim sheet and then put the baked bits in there.

158
00:09:07,310 --> 00:09:11,236
That was great, I mean, because then we can do both, but at the same time that also makes it

159
00:09:11,897 --> 00:09:16,003
a little bit less flexible because you have a, you know, essentially a 4k texture and you can't

160
00:09:16,043 --> 00:09:20,710
really scale that however much you want. You can't make giant assets because, you know, it's a,

161
00:09:21,111 --> 00:09:22,673
it can't scale, you know, forever, right?

162
00:09:23,554 --> 00:09:27,438
It also makes it really, really time consuming to make a set of textures

163
00:09:27,498 --> 00:09:30,420
because not only do you make a trim sheet, which is pretty simple,

164
00:09:30,460 --> 00:09:33,803
but you also need to make all those little mechanical bits and baked bits.

165
00:09:33,863 --> 00:09:36,266
And that's a bit of a pain in the ass.

166
00:09:37,427 --> 00:09:38,127
So we just didn't.

167
00:09:40,850 --> 00:09:42,091
So we made this texture.

168
00:09:44,473 --> 00:09:50,361
And then we left some space in it even, so because we thought, well, we surely know the texture is not perfect.

169
00:09:50,401 --> 00:09:54,126
We're going to need lots of different bits, which we then never did.

170
00:09:54,627 --> 00:09:56,950
So we just have like a semi-finished texture.

171
00:09:58,408 --> 00:10:01,590
And this is where the limitations and the simplicity comes in.

172
00:10:01,610 --> 00:10:03,651
So with a modern engine and modern workflows,

173
00:10:03,751 --> 00:10:05,832
I mean, you have basically infinite possibilities.

174
00:10:05,852 --> 00:10:08,134
You know, how do we approach each asset?

175
00:10:08,174 --> 00:10:10,015
Like, do you use a unique texture?

176
00:10:10,035 --> 00:10:12,616
Do you use, you know, a mix of the tiling textures?

177
00:10:12,656 --> 00:10:14,977
Do you have, like, multiple detail normal maps?

178
00:10:15,017 --> 00:10:17,559
Do I make the details in painter or in the mesh?

179
00:10:17,599 --> 00:10:20,480
You know, like, do artists pick different workflows?

180
00:10:20,540 --> 00:10:22,141
And, you know, how do you keep them consistent?

181
00:10:23,042 --> 00:10:27,985
So, when you're dealing with assets, that's not necessarily a great thing.

182
00:10:28,505 --> 00:10:32,727
We want to focus on the big picture and get there as quickly as possible so we can iterate on it.

183
00:10:32,787 --> 00:10:37,030
That's the goal. The assets don't actually matter that much compared to the big picture.

184
00:10:37,770 --> 00:10:45,815
So, what we did was that we enforced this single workflow for the vast, vast majority of all the assets in the game.

185
00:10:47,062 --> 00:10:50,024
And that meant we had to cut a lot of corners visually,

186
00:10:50,104 --> 00:10:51,245
but the speed was very high.

187
00:10:51,765 --> 00:10:53,046
So if you look at certain assets,

188
00:10:53,086 --> 00:10:53,927
they don't look very good.

189
00:10:54,988 --> 00:10:56,449
And that's on purpose.

190
00:10:56,989 --> 00:10:58,550
And since we knew the camera distance,

191
00:10:58,570 --> 00:11:00,471
we can kind of put a cap on how detailed

192
00:11:00,491 --> 00:11:01,712
do we want to make our assets,

193
00:11:01,792 --> 00:11:04,114
because there are details that you can't just see, right?

194
00:11:04,434 --> 00:11:05,234
It's just wasteful.

195
00:11:05,354 --> 00:11:08,336
So we picked a polygon density

196
00:11:08,937 --> 00:11:11,699
and like a detail density that fit our camera distance,

197
00:11:11,759 --> 00:11:13,860
because we have a bit of a zoomed out camera, right?

198
00:11:15,790 --> 00:11:20,575
And this puts a little bit of a cap on the fidelity that we could reach, but at the same time...

199
00:11:21,872 --> 00:11:24,234
there was no reason to stop and think.

200
00:11:24,655 --> 00:11:26,756
We put this limitation on ourselves

201
00:11:26,896 --> 00:11:28,618
so that we could stop second guessing

202
00:11:29,078 --> 00:11:32,121
and always just focus on creating.

203
00:11:32,521 --> 00:11:36,764
And since we're using a shared texture sheet and a KitMesh

204
00:11:36,804 --> 00:11:38,906
library, a lot of the design language

205
00:11:38,946 --> 00:11:41,889
just comes from that, which cuts down on the design feedback

206
00:11:41,969 --> 00:11:44,411
and the iteration on assets a lot.

207
00:11:45,091 --> 00:11:46,652
But once we do need to iterate, we

208
00:11:46,692 --> 00:11:48,534
have a shared system for the assets.

209
00:11:49,871 --> 00:11:53,053
So every hard surface object in the entire game

210
00:11:53,233 --> 00:11:54,454
is using the same texture.

211
00:11:55,074 --> 00:11:57,455
So every mech, every vehicle, every sci-fi wall,

212
00:11:57,475 --> 00:11:59,737
computer, plastic chair, box, whatever,

213
00:11:59,837 --> 00:12:01,458
is using the same texture and the same shader.

214
00:12:02,478 --> 00:12:03,679
So for example, in this scene,

215
00:12:03,699 --> 00:12:05,380
you have the ship in the background,

216
00:12:05,420 --> 00:12:09,022
you have the railings, the, yeah,

217
00:12:09,302 --> 00:12:11,223
everything basically is using the same texture.

218
00:12:15,001 --> 00:12:19,385
So to summarize it, we split between a modular trim sheet

219
00:12:19,806 --> 00:12:22,709
for the flexibility, but then we used the baked parts

220
00:12:22,809 --> 00:12:23,569
for the fidelity.

221
00:12:24,270 --> 00:12:26,472
And then we used weighted normals

222
00:12:26,552 --> 00:12:29,035
because it's the year 2022 and we're not barbarians.

223
00:12:29,956 --> 00:12:33,259
And then we just only used one texture for all objects,

224
00:12:33,359 --> 00:12:35,341
all hard-surfaced objects in the entire game.

225
00:12:37,175 --> 00:12:38,775
And we only used low-poly geometry.

226
00:12:38,895 --> 00:12:40,236
It was like, or like mid-poly.

227
00:12:40,316 --> 00:12:42,336
Like, there was no high polys and so on.

228
00:12:43,077 --> 00:12:45,217
And then we extended this with, you know, mesh decals

229
00:12:45,257 --> 00:12:48,298
that we could, for flexibility, to hide the fact

230
00:12:48,338 --> 00:12:50,319
that we only have one texture in the entire game.

231
00:12:50,499 --> 00:12:51,919
Sometimes you want a little bit of extra.

232
00:12:52,460 --> 00:12:54,840
So, that's good, because then you can have normal decals

233
00:12:54,880 --> 00:12:57,621
and you can all bend and stretch them, and that works great.

234
00:12:58,682 --> 00:13:00,962
So we used that a lot for, like, more intricate pieces, right?

235
00:13:02,869 --> 00:13:04,910
But now that we have the modeling in place,

236
00:13:05,331 --> 00:13:07,852
the second challenge we needed to face was,

237
00:13:07,912 --> 00:13:09,053
how do we even texture this?

238
00:13:09,113 --> 00:13:10,754
How do we even shade this?

239
00:13:11,615 --> 00:13:13,976
So like I said before, we were aiming

240
00:13:13,996 --> 00:13:17,338
for a very dirty and gritty art style, full of detail.

241
00:13:17,478 --> 00:13:19,840
And clean is a little bit more simple and more predictable.

242
00:13:20,440 --> 00:13:21,781
Dirt is very contextual.

243
00:13:22,121 --> 00:13:24,943
You can't just put random dirt everywhere, right?

244
00:13:25,363 --> 00:13:26,564
It needs to be in the right places.

245
00:13:26,644 --> 00:13:29,165
So we needed to find a way of doing this

246
00:13:29,826 --> 00:13:31,367
with as little to no work.

247
00:13:32,167 --> 00:13:33,588
We also need a lot of variety.

248
00:13:34,868 --> 00:13:37,910
So, for example, how do we even have colors?

249
00:13:38,730 --> 00:13:40,991
So we can't just use one color per Asset,

250
00:13:41,071 --> 00:13:42,291
because that's boring,

251
00:13:42,912 --> 00:13:45,213
and several Materials are out of the question.

252
00:13:46,253 --> 00:13:48,734
So how about we just use a Mask for different Textures,

253
00:13:49,234 --> 00:13:50,375
or different colors?

254
00:13:51,255 --> 00:13:54,016
That would mean creating thousands of Textures,

255
00:13:54,216 --> 00:13:57,017
and just adding them in per Force

256
00:13:57,058 --> 00:13:58,858
would be a giant pain in the ass,

257
00:13:58,898 --> 00:14:00,079
and we don't have time for that.

258
00:14:01,259 --> 00:14:06,707
So what we did was we essentially used the UV sets for the meshes

259
00:14:06,767 --> 00:14:10,552
and then we just basically used a UDIM approach where we just offset the UVs

260
00:14:11,233 --> 00:14:12,335
and used that as a mask.

261
00:14:12,936 --> 00:14:17,302
And that way we could just have different colors without having any textures.

262
00:14:18,577 --> 00:14:24,724
So using that, you know, the primary materials we needed in the game was, you know, because it's hard surface.

263
00:14:24,744 --> 00:14:29,170
So it's either, you know, bare or painted metal or sometimes plastic, you know, when we're going a bit crazy.

264
00:14:30,191 --> 00:14:33,495
And the main shading difference is basically, you know, either metal or non metals, right?

265
00:14:33,555 --> 00:14:37,200
So we use the same method of just shifting the UVs to mask between metals.

266
00:14:39,433 --> 00:14:43,015
So that was kind of our key base feature set.

267
00:14:43,275 --> 00:14:45,476
And now that we had those basic in place,

268
00:14:45,496 --> 00:14:48,458
we could focus on adding rust, dirt, and other effects

269
00:14:48,538 --> 00:14:50,159
in a decently believable way.

270
00:14:51,120 --> 00:14:52,921
And we wanted to have something that

271
00:14:52,961 --> 00:14:55,402
looked as close to hand-authored as possible,

272
00:14:55,542 --> 00:14:57,323
but without putting in any work.

273
00:14:58,224 --> 00:15:01,386
So we ended up experimenting and adding several layers.

274
00:15:02,671 --> 00:15:16,697
So first of all, I mean, we're using a trim sheet, so it's very easy to just ask, you know, to add some texture masks that can drive things like details around bolts and like, you know, very fine detail like dirt and wear and tear and so on.

275
00:15:16,997 --> 00:15:17,418
Like, but.

276
00:15:18,058 --> 00:15:21,280
And that's great. It gives you a little bit of a base pass, right?

277
00:15:21,320 --> 00:15:23,782
But it doesn't give you any contextual dirt.

278
00:15:23,802 --> 00:15:25,503
It doesn't use the shapes of the mesh.

279
00:15:25,523 --> 00:15:27,845
You know, you want dirt behind some pipes.

280
00:15:27,905 --> 00:15:29,546
You want dirt in some little hatch.

281
00:15:29,606 --> 00:15:32,909
You want some scratched metal on the exposed parts of a mech.

282
00:15:33,689 --> 00:15:35,491
So we still can't use textures.

283
00:15:35,651 --> 00:15:37,192
So we just use vertex colors.

284
00:15:38,288 --> 00:15:41,529
So we baked down the ambient occlusion and the convexity,

285
00:15:42,050 --> 00:15:45,331
and we used that to drive dirt, wear and tear, and rust,

286
00:15:46,011 --> 00:15:47,752
just in a generalized way.

287
00:15:48,192 --> 00:15:51,874
So assets now work much better on their own.

288
00:15:52,254 --> 00:15:52,394
But.

289
00:15:53,239 --> 00:15:55,240
We're still thinking about the scene and the big picture.

290
00:15:55,300 --> 00:15:57,080
It's not about the assets, it's about the scene.

291
00:15:57,340 --> 00:16:00,021
So now we have the case where like, you know,

292
00:16:00,041 --> 00:16:01,741
I have some very clean surfaces

293
00:16:01,801 --> 00:16:03,321
that meet some very dirty ones.

294
00:16:03,862 --> 00:16:06,282
And you know, like the, this is not a world where,

295
00:16:06,302 --> 00:16:08,123
you know, everything is not a bunch of clean objects.

296
00:16:08,143 --> 00:16:10,003
So we just put in a pile, right?

297
00:16:10,083 --> 00:16:11,223
Like it's dirty.

298
00:16:11,303 --> 00:16:12,684
Things have been sitting there for a while.

299
00:16:12,824 --> 00:16:16,485
So we needed to get like that cohesion in.

300
00:16:17,285 --> 00:16:20,685
And we can't just vertex paint the entire world manually,

301
00:16:20,725 --> 00:16:23,166
because first of all, it would take an insane amount of time.

302
00:16:23,266 --> 00:16:26,627
And it would also eat up all the memory for all the instances.

303
00:16:27,087 --> 00:16:28,207
So that was out of the question.

304
00:16:32,048 --> 00:16:37,049
So this is where the light baking in Unreal comes in handy.

305
00:16:37,109 --> 00:16:40,890
So when you bake light in Unreal,

306
00:16:40,910 --> 00:16:42,710
you can use the option to also bake out

307
00:16:42,770 --> 00:16:43,730
an ambient occlusion mask.

308
00:16:44,671 --> 00:16:48,393
So that's what we use to just drive the third aspect of the dirt.

309
00:16:49,074 --> 00:16:56,258
So assets that are next to each other are actually getting the dirt under the crates, behind some pipe meshes, things like that.

310
00:16:57,879 --> 00:17:03,802
We'll swap back and forth, you can see some of the objects there in the background, for example.

311
00:17:06,047 --> 00:17:10,069
And it comes with a pretty hefty texture cost, but more on that later.

312
00:17:10,929 --> 00:17:15,632
And it also doesn't require any hand authoring, which is good, so we don't need to put in any actual work.

313
00:17:16,972 --> 00:17:22,395
But even with this, it's still sci-fi. We need glowy bits, we need decals.

314
00:17:23,695 --> 00:17:27,277
So what we did was that... and this is the little guy that you use.

315
00:17:29,078 --> 00:17:36,761
So we used a secondary UV set and then we used the same approach with the UDIMs to just mask between decals and emissive surfaces.

316
00:17:38,542 --> 00:17:47,145
And that, you know, now we have like a whole bunch of little tricks to use to make the asset look handcrafted without, you know, actually, you know, doing anything.

317
00:17:49,261 --> 00:17:53,122
And once we have the dirt, it's very easy to turn it back off again.

318
00:17:54,382 --> 00:17:58,723
So we could share the materials across a very wide range of props and assets.

319
00:17:58,743 --> 00:18:01,304
So for example, we have this slum scene,

320
00:18:01,404 --> 00:18:06,105
and then we have this little lab from later in the game.

321
00:18:06,225 --> 00:18:09,386
And they're sharing the same textures, the same materials, the same assets.

322
00:18:09,966 --> 00:18:12,266
So it gives us a lot of perceived variety,

323
00:18:12,386 --> 00:18:15,327
because we didn't actually have the time to create that much variety.

324
00:18:17,568 --> 00:18:17,668
And...

325
00:18:18,619 --> 00:18:23,460
Now that we have a pretty flexible approach that can give us all these different things,

326
00:18:23,560 --> 00:18:25,041
we need to speed it back up again.

327
00:18:25,461 --> 00:18:29,422
Because we're back to having super many choices and a very complicated setup.

328
00:18:29,502 --> 00:18:31,602
And we needed this very fast pipeline.

329
00:18:31,642 --> 00:18:36,723
So to tackle this, we set a lot of limitations on what we could do on ourselves.

330
00:18:36,823 --> 00:18:41,184
So we set the amount of colors to three colors and three metals.

331
00:18:42,205 --> 00:18:44,985
And that was the maximum amount that we had in our shader.

332
00:18:46,372 --> 00:18:48,896
And that was on purpose.

333
00:18:49,136 --> 00:18:52,540
And then we built our tools to fit that pipeline.

334
00:18:53,501 --> 00:18:53,762
Because.

335
00:18:55,450 --> 00:18:59,732
We have a very simple tagging system in Modo with just a little pie chart,

336
00:19:00,072 --> 00:19:03,653
like pie menu to just complete with a preview shading like that,

337
00:19:03,773 --> 00:19:05,854
so you can just see roughly what it looks like.

338
00:19:06,454 --> 00:19:10,556
And then we combine that just with a very simple preset vertex color bake.

339
00:19:10,736 --> 00:19:13,477
And all of that is just applied when we export the model.

340
00:19:13,517 --> 00:19:15,057
So it's like a one-click thing.

341
00:19:16,137 --> 00:19:20,739
And one of the additional benefits is because, you know, we...

342
00:19:22,455 --> 00:19:26,176
we made the pipeline simpler by putting a limitation on the amount of colors, but

343
00:19:26,536 --> 00:19:28,477
what it also does with that is that

344
00:19:29,357 --> 00:19:33,618
it helps with the art direction because it sets a very simple framework on the

345
00:19:33,698 --> 00:19:35,779
assets. You only have three colors, so

346
00:19:36,239 --> 00:19:39,800
when you're designing the assets you already know the limitations. You start

347
00:19:39,820 --> 00:19:41,080
designing your assets with the

348
00:19:41,520 --> 00:19:43,581
primary, secondary, tertiary color

349
00:19:44,221 --> 00:19:45,241
because that's all you get.

350
00:19:46,421 --> 00:19:46,742
And uh...

351
00:19:48,162 --> 00:19:49,002
this was one of the uh...

352
00:19:50,632 --> 00:19:56,358
one of the tools that were like, it just helped with the visual polish and the design of the game

353
00:19:56,759 --> 00:19:58,240
because we needed to balance the visuals.

354
00:20:00,482 --> 00:20:05,447
So with all these things in place there was like quite a few things that happened

355
00:20:05,908 --> 00:20:09,872
like automatically. First of all, a very low texture usage.

356
00:20:10,192 --> 00:20:12,915
It's very easy to have 4k textures when you only have one.

357
00:20:14,183 --> 00:20:16,865
So we managed to lower the texture pool on console,

358
00:20:16,905 --> 00:20:20,246
for example, from the default is like one gig in Unreal.

359
00:20:20,326 --> 00:20:23,368
We had 400 megabytes, and the vast, vast majority of that

360
00:20:23,408 --> 00:20:25,469
was things like reflection probes, light maps,

361
00:20:26,449 --> 00:20:28,490
and the volumetric light, for example.

362
00:20:28,530 --> 00:20:31,712
So we had less, way less than 100 megs

363
00:20:31,972 --> 00:20:34,833
spent on the actual textures for the game at any time.

364
00:20:36,174 --> 00:20:39,796
So it was very easy to scale it down to basically whatever.

365
00:20:42,302 --> 00:20:44,263
But we also have the additional benefit

366
00:20:44,363 --> 00:20:46,965
of having reusable materials.

367
00:20:47,385 --> 00:20:49,106
And this was a very, very big thing.

368
00:20:50,227 --> 00:20:52,148
And we didn't really intend for this to happen either.

369
00:20:52,629 --> 00:20:56,771
Because we enforced this limited palette and a single workflow,

370
00:20:56,791 --> 00:20:58,853
what happened is that we have the same texture

371
00:20:58,873 --> 00:20:59,833
set for all the assets.

372
00:20:59,873 --> 00:21:01,915
We have the same shader setup for all the assets.

373
00:21:02,275 --> 00:21:04,457
So we can just swap materials back and forth.

374
00:21:04,537 --> 00:21:06,278
And we can iterate on the look of an area

375
00:21:06,358 --> 00:21:07,178
really, really quickly.

376
00:21:07,779 --> 00:21:09,820
Because if you make one material for a mech,

377
00:21:09,980 --> 00:21:11,381
it's going to fit the railings as well.

378
00:21:12,082 --> 00:21:14,223
So if you want to share the color palettes, that's very easy.

379
00:21:14,804 --> 00:21:17,746
And also, we're using material instances in Unreal.

380
00:21:17,806 --> 00:21:20,168
And the way that works is that you make an instance of something.

381
00:21:20,448 --> 00:21:24,952
It inherits from the properties, any properties that you don't override from the parent.

382
00:21:25,432 --> 00:21:28,194
So what you can do is that you can very simply make a chain of inheritance.

383
00:21:29,075 --> 00:21:31,736
And then you can iterate on, for example, how dirty is a scene,

384
00:21:32,736 --> 00:21:35,498
the color balance, and you can do that on an entire scene

385
00:21:36,018 --> 00:21:37,118
with just a few sliders.

386
00:21:37,539 --> 00:21:40,020
So that's also something that we're like, well, that makes a lot of sense

387
00:21:40,100 --> 00:21:42,821
now that we have built it, but it wasn't really on purpose.

388
00:21:44,914 --> 00:21:47,276
So we could reuse a lot of content really, really quickly.

389
00:21:47,396 --> 00:21:50,178
So for example, we have this data core,

390
00:21:50,458 --> 00:21:54,301
but we also have this dirty sewer.

391
00:21:54,621 --> 00:21:56,903
And it's using the same models, same textures,

392
00:21:57,723 --> 00:21:58,624
same base materials.

393
00:21:59,164 --> 00:22:01,606
But it's just very different setups.

394
00:22:03,067 --> 00:22:05,008
So that gives us a lot of extra mileage.

395
00:22:08,941 --> 00:22:11,562
We also have the benefit of enforcing the art direction.

396
00:22:11,842 --> 00:22:14,342
So texture details and kitbash pieces,

397
00:22:14,442 --> 00:22:16,243
they are forced to be shared, which

398
00:22:16,323 --> 00:22:19,383
means that everything will have the same artistic direction

399
00:22:19,443 --> 00:22:22,704
by default. No one will make pieces that stand out,

400
00:22:22,864 --> 00:22:25,445
because they will be consistent.

401
00:22:25,525 --> 00:22:26,905
The shape language will be shared

402
00:22:27,085 --> 00:22:30,506
without having any concept art and without anyone

403
00:22:30,546 --> 00:22:31,426
having to point that out.

404
00:22:34,060 --> 00:22:38,927
It also made it very easy to tweak because all the materials, all the meshes are using the same setup.

405
00:22:39,027 --> 00:22:42,852
So if you ever wanted to grab someone else's model, someone else's materials,

406
00:22:43,073 --> 00:22:45,596
you always know where to look because it's the same setup.

407
00:22:46,317 --> 00:22:49,942
It also cuts down on things like iteration.

408
00:22:52,377 --> 00:22:55,939
And we also have very iteratable models because there's no baking process.

409
00:22:56,139 --> 00:23:01,361
So, you know, I built a mech and now it needs like a hatch that can open and a new gun.

410
00:23:01,381 --> 00:23:03,842
It's just go in, build it, export, done.

411
00:23:04,542 --> 00:23:06,483
Same thing, like, you know, we need more guns for the game.

412
00:23:06,523 --> 00:23:11,285
We just grab a gun, add some more stuff to it, you know, done.

413
00:23:11,305 --> 00:23:13,686
It was very, very efficient.

414
00:23:13,786 --> 00:23:17,707
And it also feeds into like a loop of everything you do,

415
00:23:17,948 --> 00:23:19,588
since everything is sharing the same texture, like...

416
00:23:20,494 --> 00:23:23,636
we made this cool looking pipe into the Kitbash library.

417
00:23:24,116 --> 00:23:25,577
We made this cool chunk of cables

418
00:23:26,057 --> 00:23:27,898
that looks really nice into the Kitbash library.

419
00:23:28,119 --> 00:23:30,000
Every time we found a nice pleasing shape,

420
00:23:30,400 --> 00:23:33,882
something that looked good, we could just reuse that.

421
00:23:33,922 --> 00:23:35,543
Just copy paste it to a different model.

422
00:23:36,864 --> 00:23:41,106
So you find all these new ways to make cool details

423
00:23:41,146 --> 00:23:43,307
and then you can just reuse that instantly

424
00:23:43,367 --> 00:23:44,268
in any other model.

425
00:23:45,328 --> 00:23:49,271
So we also had the benefit of no technical surprises.

426
00:23:50,386 --> 00:23:55,127
Everything was built with the same polygon density, shader complexity, amount of materials.

427
00:23:55,588 --> 00:23:58,449
So it was very easy to extend the feature set.

428
00:23:58,749 --> 00:24:03,830
We wanted to have rain puddles, we wanted to have little randomized blinky bits, better

429
00:24:03,890 --> 00:24:06,631
shading, details, detail normal maps.

430
00:24:06,691 --> 00:24:09,812
Very easy to just add it because it's just one place to do so.

431
00:24:10,909 --> 00:24:15,812
And this took out a very big chunk of work when it comes to optimizing because, you know,

432
00:24:16,493 --> 00:24:21,856
we never had to care about polygon density, material complexity, like for almost any scene.

433
00:24:22,137 --> 00:24:25,359
And when we did, it was very easy because there was only one place to go.

434
00:24:26,179 --> 00:24:27,620
So very easy to optimize.

435
00:24:30,254 --> 00:24:35,179
It also allowed us to go beyond what we thought was the limit visually.

436
00:24:35,620 --> 00:24:37,942
As I said before, we were very smart and we were like,

437
00:24:38,082 --> 00:24:42,527
okay, we know our camera distance, so we're going to put a cap on how much detail we have.

438
00:24:43,027 --> 00:24:47,392
And that was completely wrong, because it turns out when we're kitbashing, we could just,

439
00:24:47,612 --> 00:24:48,813
for example, we have this little...

440
00:24:49,614 --> 00:24:52,135
Well, it's called Fuel Station, but I don't know what it is.

441
00:24:53,236 --> 00:24:55,557
And then you're like, well, you can put it on the sci-fi pillar

442
00:24:55,637 --> 00:24:57,258
thing, and it still looks good.

443
00:24:57,278 --> 00:24:58,799
And it's actually really detailed.

444
00:24:59,359 --> 00:25:01,340
But that's not at all what we intended to do.

445
00:25:01,541 --> 00:25:06,063
So it kind of allowed us to push beyond what we thought

446
00:25:06,363 --> 00:25:07,324
we should do visually.

447
00:25:07,784 --> 00:25:11,386
And same thing, we made these pipes, pipe sets,

448
00:25:11,446 --> 00:25:13,627
and things like that that were meant to be like this big.

449
00:25:13,667 --> 00:25:15,608
And then we just scaled them down to half the size.

450
00:25:15,648 --> 00:25:15,988
And we're like, OK.

451
00:25:16,388 --> 00:25:17,249
actually looks better.

452
00:25:17,789 --> 00:25:21,310
So we were a bit wrong in a good way.

453
00:25:22,390 --> 00:25:25,631
And the end result is that we created over 8,000 assets,

454
00:25:27,432 --> 00:25:30,272
which is like roughly three assets per artist per day.

455
00:25:32,493 --> 00:25:34,554
But most of the time, we did not make any assets.

456
00:25:34,594 --> 00:25:36,134
So it's a bit of a skewed number.

457
00:25:37,545 --> 00:25:40,888
And even the biggest assets, like the biggest set pieces,

458
00:25:40,908 --> 00:25:41,769
took like three days.

459
00:25:42,229 --> 00:25:44,971
Like the big mechs took like one and a half day.

460
00:25:45,532 --> 00:25:46,593
So it was very, very quick.

461
00:25:47,113 --> 00:25:48,854
So that really achieved what we wanted.

462
00:25:50,135 --> 00:25:53,338
So armed with this very large pile of models,

463
00:25:53,738 --> 00:25:56,901
we had the next challenge, which is assembling the world itself.

464
00:25:57,762 --> 00:25:59,643
And it's a very cluttered cityscape,

465
00:25:59,863 --> 00:26:02,966
full with layers, movable parts, and a very lived in feeling.

466
00:26:05,282 --> 00:26:11,665
That was a challenge in itself because not only do we have a lot of literal ground to cover,

467
00:26:11,945 --> 00:26:16,707
we also wanted to make a game full of life and world building and movement.

468
00:26:16,847 --> 00:26:20,909
I mean, it's a sci-fi metropolis. It's not an empty forest, right?

469
00:26:20,949 --> 00:26:23,510
We need a lot of shit happening.

470
00:26:24,631 --> 00:26:28,792
So that meant not only did we have to build the world really quickly,

471
00:26:28,832 --> 00:26:33,755
we had to build it quickly enough that we had time to go back and just add lots of life.

472
00:26:34,555 --> 00:26:34,715
So...

473
00:26:36,480 --> 00:26:39,746
we need to get to the part where we put the cherry on top really quickly.

474
00:26:40,046 --> 00:26:43,572
And this is where all these limitations that we put in earlier in the pipeline comes in.

475
00:26:45,893 --> 00:26:48,735
We had a lot of content to create and place in the world,

476
00:26:48,855 --> 00:26:53,437
so we tried to create tools that allowed us to get rid of monotonous tasks.

477
00:26:54,017 --> 00:26:59,539
So we didn't create, you know, like this giant advanced things, you know, to solve big problems.

478
00:26:59,559 --> 00:27:03,681
We tried to get rid of all the monotonous boring tasks for artists

479
00:27:03,781 --> 00:27:08,423
so that they can focus more on the creative parts and less on the monotonous stuff.

480
00:27:09,163 --> 00:27:13,065
And we used Houdini for a lot of this, and we created multiple tools to help us.

481
00:27:13,145 --> 00:27:15,707
So, for example, our pipe generation tool.

482
00:27:16,327 --> 00:27:19,529
So, this is for making modular sets of pipes.

483
00:27:20,770 --> 00:27:24,673
And it started as a very simple... well, not very simple, it's amazing.

484
00:27:25,193 --> 00:27:29,675
but just used the profile of the pipe

485
00:27:29,835 --> 00:27:33,837
and it created an entire modular set of pipes from that.

486
00:27:34,518 --> 00:27:37,760
And then Magnus worked some black magic,

487
00:27:37,800 --> 00:27:39,861
so not only is it a simple set of pipes,

488
00:27:39,941 --> 00:27:41,942
but it also fits the art direction of the game.

489
00:27:41,962 --> 00:27:43,843
You have all these little bendy bits

490
00:27:43,943 --> 00:27:46,084
and tons and tons of extra detail.

491
00:27:46,144 --> 00:27:49,346
And then it all tiles both mesh-wise and texture-wise.

492
00:27:50,146 --> 00:27:53,887
And that's the kind of stuff, you don't want to create 20 variations of the same pipe, right?

493
00:27:54,187 --> 00:27:54,747
It's pretty boring.

494
00:27:56,328 --> 00:27:59,769
So what we then did was we also had the placement of the pipes.

495
00:28:00,729 --> 00:28:03,830
Placing lots and lots and lots of pipes in a game is really, really boring.

496
00:28:04,590 --> 00:28:10,812
So we have a tool that is using splines to place those sets of modular assets that we made.

497
00:28:11,112 --> 00:28:16,834
And we can also just change sets for changing visuals instantly and swap between different visuals.

498
00:28:17,514 --> 00:28:22,435
And what this allowed us to do was not only does this speed up placing pipes,

499
00:28:22,515 --> 00:28:28,816
but since placing pipes is now less boring and more satisfying,

500
00:28:29,676 --> 00:28:32,997
artists can now create things that they didn't think about creating before,

501
00:28:33,057 --> 00:28:35,758
because it lowered the mental barrier of like,

502
00:28:35,818 --> 00:28:37,158
oh god, I don't want to place more pipes.

503
00:28:38,678 --> 00:28:42,859
So the game looks a lot better for it, because we have a lot of pipes in our game.

504
00:28:43,988 --> 00:28:52,654
We also have the aptly named RoomMaker, which just makes rooms or buildings based on sets of defined assets.

505
00:28:52,814 --> 00:28:55,375
Same thing there, we have modular sets that have all the pieces.

506
00:28:55,936 --> 00:29:00,158
And then we can just add cubes and basically make Boolean operations and it would just make...

507
00:29:01,139 --> 00:29:02,300
make buildings out of that.

508
00:29:02,600 --> 00:29:06,283
So we use this a lot in some places in the game,

509
00:29:06,303 --> 00:29:07,805
like in the sewers, for example.

510
00:29:07,905 --> 00:29:10,507
A big, big chunk of the set dressing

511
00:29:10,567 --> 00:29:14,430
is basically just these boxes that then just

512
00:29:14,670 --> 00:29:18,413
placed all of these assets in an optimal fashion automatically.

513
00:29:21,276 --> 00:29:22,537
And then we have the destruction.

514
00:29:22,777 --> 00:29:23,758
We love destruction.

515
00:29:25,656 --> 00:29:27,258
But it's also very time consuming to make.

516
00:29:27,358 --> 00:29:32,084
So we had two main goals with the destruction.

517
00:29:32,364 --> 00:29:35,728
First of all, making it very, very fast to author

518
00:29:35,848 --> 00:29:37,510
and also make it very, very cheap to render.

519
00:29:38,757 --> 00:29:42,739
So since the game is like essentially taking place in a two-dimensional plane,

520
00:29:42,819 --> 00:29:46,421
you know, we always know which direction, like the direction the shots will come from.

521
00:29:47,001 --> 00:29:50,704
What we could do is just cheat. So instead of having actual destruction,

522
00:29:50,724 --> 00:29:55,386
what we're doing is that we're playing animations based on the direction that you hit the meshes.

523
00:29:55,647 --> 00:30:00,249
So we just baked out simulations based on multiple directions and then we just pick

524
00:30:00,690 --> 00:30:04,032
which one to play. So it looks like destruction, but it's just an animation, right?

525
00:30:05,443 --> 00:30:07,644
So that allowed us to have a lot of destruction

526
00:30:07,804 --> 00:30:09,844
that looked like it was reacting to the players,

527
00:30:09,904 --> 00:30:11,425
you know, explosions, you know,

528
00:30:11,445 --> 00:30:12,665
shooting rocket launchers and stuff,

529
00:30:12,945 --> 00:30:13,925
but actually it's just fake.

530
00:30:14,725 --> 00:30:16,105
And, you know, to take things further,

531
00:30:16,125 --> 00:30:17,206
like what you can do, for example,

532
00:30:17,266 --> 00:30:19,686
is that you can have, you know, an animation blueprint,

533
00:30:19,766 --> 00:30:21,626
and you can just blend between different animations

534
00:30:21,646 --> 00:30:23,847
to make it, you know, even more precise.

535
00:30:24,627 --> 00:30:26,587
But we didn't do that because we thought

536
00:30:26,627 --> 00:30:27,828
this looked good enough, but you could.

537
00:30:30,908 --> 00:30:32,208
And then we had the cables.

538
00:30:33,169 --> 00:30:35,590
We have a lot of cables in our world.

539
00:30:35,670 --> 00:30:36,410
We love cables.

540
00:30:37,331 --> 00:30:39,872
They're also very tedious to make, just drawing splines.

541
00:30:40,772 --> 00:30:43,634
So we had a whole array of tools for making

542
00:30:43,734 --> 00:30:44,994
different types of cables.

543
00:30:45,014 --> 00:30:48,215
We had everything from fake simulated ones on the ground

544
00:30:48,356 --> 00:30:54,178
to making cables between just two different walls.

545
00:30:54,218 --> 00:30:54,538
You could just.

546
00:30:55,279 --> 00:30:56,941
but, you know, add lots of cables.

547
00:30:57,581 --> 00:31:01,086
And what made this work really well is because the tool itself, you know, was...

548
00:31:01,667 --> 00:31:05,131
The hard part is making it look good and fit the art direction.

549
00:31:06,032 --> 00:31:09,757
And that's, I think, where they really shine,

550
00:31:09,817 --> 00:31:12,821
because the amount of complexity we can have in the cables...

551
00:31:14,665 --> 00:31:17,068
to making them by hand would be very time consuming.

552
00:31:17,288 --> 00:31:20,872
But we also here made a whole bunch of smaller tools

553
00:31:20,972 --> 00:31:23,355
instead of having one enormous mega tool.

554
00:31:23,635 --> 00:31:26,679
We just had four or five different cable tools.

555
00:31:28,944 --> 00:31:33,209
And we mostly limited ourselves to not making any custom models,

556
00:31:33,369 --> 00:31:34,550
because we just didn't have time.

557
00:31:35,211 --> 00:31:39,476
But when we did, we tried to use tools to speed up the process

558
00:31:39,496 --> 00:31:40,857
so we can help with the world building.

559
00:31:41,458 --> 00:31:43,100
So for example, we have the decal tool,

560
00:31:43,280 --> 00:31:45,162
which does exactly what it says on the box.

561
00:31:45,723 --> 00:31:47,985
You type out text, and you get decals,

562
00:31:48,286 --> 00:31:49,387
mesh decals in the editor.

563
00:31:50,708 --> 00:31:54,751
And it's very, very efficient because this is one of those things that takes you out of the flow.

564
00:31:54,811 --> 00:31:57,693
You're going to make a sign, you have to go back to your content application,

565
00:31:57,733 --> 00:32:00,716
you're going to make that, you're going to export it, you're going to set it up.

566
00:32:01,156 --> 00:32:05,239
Instead, we could just type things directly in the editor and just output mesh decals.

567
00:32:05,959 --> 00:32:10,303
And then we had a bunch of features in it to make them a bit more visually interesting than just text.

568
00:32:10,923 --> 00:32:17,088
But this also allowed us to do a lot more world building and context-specific decals really, really quickly.

569
00:32:19,563 --> 00:32:23,828
And we also had, you know, lots and lots of signs because, you know, it's a cyberpunk cityscape.

570
00:32:24,448 --> 00:32:31,176
So everything from neon signs with model letters to, you know, different kind of generic plastic signs, handmade signs.

571
00:32:31,737 --> 00:32:34,360
And these tools, you know, ended up being pretty much of a...

572
00:32:35,100 --> 00:32:40,783
a beast but it could handle like everything from like the simpler signs to even you know complicated

573
00:32:40,963 --> 00:32:46,886
animated signs we're using like preset vertex shaders so you can have like blinky signs so

574
00:32:46,906 --> 00:32:52,708
you can just we can just type out whatever we wanted into the editor and get output geometry

575
00:32:57,550 --> 00:32:57,650
so

576
00:32:58,986 --> 00:33:03,068
With the basic construction of the world out of the way,

577
00:33:03,128 --> 00:33:05,548
we could focus on adding life to the world.

578
00:33:05,689 --> 00:33:07,949
And something we noticed during the project

579
00:33:07,989 --> 00:33:11,731
was that whenever we tried doing these things

580
00:33:11,771 --> 00:33:13,532
and adding more life and movement to the world,

581
00:33:13,572 --> 00:33:14,272
it was never enough.

582
00:33:14,452 --> 00:33:17,733
We always had to revisit it over and over again.

583
00:33:17,753 --> 00:33:20,014
And we evaluated it.

584
00:33:20,074 --> 00:33:21,855
We realized we wanted or needed more.

585
00:33:22,395 --> 00:33:23,235
And then we went back.

586
00:33:23,435 --> 00:33:24,696
And then we improved what we had.

587
00:33:25,942 --> 00:33:29,403
And the running theme that happened was that we ended up

588
00:33:29,463 --> 00:33:32,103
doing multiple solutions for almost every single thing.

589
00:33:32,203 --> 00:33:35,284
Instead of having these mega complex advanced systems,

590
00:33:36,384 --> 00:33:38,125
we instead would just made multiple things

591
00:33:38,165 --> 00:33:40,065
to solve each problem.

592
00:33:41,006 --> 00:33:43,026
Because we didn't have a separate team

593
00:33:43,066 --> 00:33:45,787
that would go in and add stuff after the artists were done.

594
00:33:45,847 --> 00:33:49,328
Like everything needed to be functional and usable

595
00:33:49,368 --> 00:33:51,529
enough for the artist to just go crazy with it.

596
00:33:52,329 --> 00:33:54,129
Because they did all of it.

597
00:33:55,753 --> 00:33:58,555
So it was very much a collaborative and iterative effort.

598
00:33:58,975 --> 00:34:02,156
And we worked a lot on adding new features and options

599
00:34:02,257 --> 00:34:04,498
to extend the tools so that we could get

600
00:34:04,678 --> 00:34:05,658
more mileage out of them.

601
00:34:07,940 --> 00:34:12,382
We developed many ways to add life to a scene and these are some of the highlights.

602
00:34:13,002 --> 00:34:20,365
So one of the things that we did different was that we had a big goal that we wanted to have was to make the vistas in the world not feel like a vista.

603
00:34:21,385 --> 00:34:29,688
And even when we used the same kind of art and it was very high fidelity, the vistas still felt pretty dead.

604
00:34:29,708 --> 00:34:31,289
You had this enormous cityscape.

605
00:34:32,509 --> 00:34:37,232
nothing in it, right? So we needed to add people. And we started adding, you know, NPCs standing on

606
00:34:37,252 --> 00:34:40,995
the balconies, which, you know, you couldn't really appreciate that they were moving. So we added,

607
00:34:41,035 --> 00:34:46,279
you know, more wavy animations and, you know, that worked. But, you know, still not enough.

608
00:34:46,499 --> 00:34:51,262
So we added, you know, NPCs walking on splines in the background, which, you know, give you a lot

609
00:34:51,282 --> 00:34:55,045
more movement in the background, feels a bit alive. But then we got this weird thing that...

610
00:34:56,051 --> 00:34:58,112
This city is completely dead where you are,

611
00:34:58,152 --> 00:35:00,334
and everyone is just walking over there in the background.

612
00:35:01,054 --> 00:35:04,397
So the goal was always to have those characters

613
00:35:04,497 --> 00:35:05,377
in the playable space.

614
00:35:05,537 --> 00:35:07,699
And eventually, we added AIs for this.

615
00:35:08,780 --> 00:35:10,721
So here's before and after, for example,

616
00:35:11,281 --> 00:35:13,723
before we added more life to the world.

617
00:35:13,943 --> 00:35:16,205
So we added lots and lots of people everywhere.

618
00:35:17,145 --> 00:35:20,308
And as we added them, we kept adding more visual variations,

619
00:35:20,488 --> 00:35:21,789
setups, reactions.

620
00:35:22,956 --> 00:35:27,541
So what we could now do is that we could set dress using NPCs.

621
00:35:28,302 --> 00:35:29,943
So instead of, you know, like, you know,

622
00:35:29,984 --> 00:35:31,485
lots of people talking, fighting,

623
00:35:31,525 --> 00:35:34,008
going about their business and, you know,

624
00:35:35,049 --> 00:35:37,812
this helped a lot with making the world more alive because

625
00:35:38,964 --> 00:35:41,705
Instead of having some system that would place crowds

626
00:35:42,066 --> 00:35:45,928
in the scene, we made them part of the set dressing process

627
00:35:46,168 --> 00:35:49,029
so that the artist could actually start

628
00:35:49,069 --> 00:35:49,930
when they're making a scene,

629
00:35:49,970 --> 00:35:52,511
they would plan for using the NPCs

630
00:35:52,551 --> 00:35:54,392
and they would make all these little setups,

631
00:35:54,412 --> 00:35:55,512
like, oh, here are the hobos

632
00:35:55,572 --> 00:35:58,554
and here's the guys in the cafe.

633
00:35:59,074 --> 00:36:03,456
So they could actually build the scene up in one go

634
00:36:04,317 --> 00:36:06,438
using all of these kind of features

635
00:36:06,458 --> 00:36:08,219
that normally artists would not use.

636
00:36:09,900 --> 00:36:14,223
So the best part of getting them into the game was really making them part of the set dressing

637
00:36:14,443 --> 00:36:16,445
and then making sure that they actually just worked.

638
00:36:22,770 --> 00:36:27,433
And another thing, when it comes to mind, when you're thinking of Cyberpunk, Cityscapes,

639
00:36:27,494 --> 00:36:31,417
it's like all these big commercials, animated things.

640
00:36:32,517 --> 00:36:35,860
So I thought I was going to make shaders for that.

641
00:36:37,157 --> 00:36:38,538
But that's super time consuming.

642
00:36:38,878 --> 00:36:43,282
So we're like, OK, let's use actual movies instead

643
00:36:43,562 --> 00:36:46,905
and just play those because you have a lot more potential

644
00:36:46,945 --> 00:36:47,305
there, right?

645
00:36:48,346 --> 00:36:50,648
But they're super expensive to render in Unreal.

646
00:36:50,788 --> 00:36:56,072
And each movie you have have a fixed cost on the CPU threads,

647
00:36:56,413 --> 00:36:57,594
especially on consoles.

648
00:36:57,634 --> 00:36:59,836
So you can't just have 10 movies.

649
00:36:59,956 --> 00:37:02,258
You have a fixed limitation of how many you can have.

650
00:37:03,309 --> 00:37:06,352
So what we did was that we just made a whole pile of models,

651
00:37:06,572 --> 00:37:08,295
and then we, or like models, movies,

652
00:37:08,715 --> 00:37:09,916
and we put them into one movie,

653
00:37:10,277 --> 00:37:11,979
and we had made sure that they were equal length.

654
00:37:12,219 --> 00:37:13,641
And then we just scaled that down,

655
00:37:14,522 --> 00:37:16,544
like to like be a small movie.

656
00:37:17,666 --> 00:37:20,069
And that meant that we can actually have like this,

657
00:37:20,089 --> 00:37:21,811
you know, different commercials playing.

658
00:37:22,807 --> 00:37:24,610
But the problem was that they didn't cast light.

659
00:37:24,791 --> 00:37:28,678
And with our camera, we don't get so much screen space

660
00:37:28,718 --> 00:37:29,880
reflections and things like that.

661
00:37:29,941 --> 00:37:32,165
So we really wanted this feeling where they're

662
00:37:32,205 --> 00:37:33,267
casting light dynamically.

663
00:37:34,723 --> 00:37:37,905
We wanted to use the colors from the movies to drive a light source.

664
00:37:38,866 --> 00:37:44,209
But when you have the light functions in Unreal, they don't support RGB.

665
00:37:45,009 --> 00:37:48,291
So what we did instead was that we took the movies, each movie,

666
00:37:48,311 --> 00:37:51,913
and we blurred them down to one pixel, the average color in Houdini,

667
00:37:51,993 --> 00:37:54,134
and then we outputted that as a CSV file.

668
00:37:55,555 --> 00:37:58,757
And then we just animate the light source using that CSV file.

669
00:38:00,194 --> 00:38:03,117
And that allowed us to have this light animate.

670
00:38:03,177 --> 00:38:05,379
And it looks like they're casting light from the movie,

671
00:38:05,399 --> 00:38:05,900
but they are not.

672
00:38:07,041 --> 00:38:12,326
And since we then had all these movies in one texture,

673
00:38:12,786 --> 00:38:15,188
what we could do is that we could just move the texture

674
00:38:15,509 --> 00:38:16,149
in UV space.

675
00:38:16,830 --> 00:38:17,711
And we're swapping channels.

676
00:38:19,125 --> 00:38:21,427
So we just made a very simple playlist system

677
00:38:21,848 --> 00:38:23,910
and then just swapping the color curve at the same time.

678
00:38:24,351 --> 00:38:26,633
So it could look like you have randomized movies

679
00:38:26,693 --> 00:38:27,975
playing on these big screens

680
00:38:28,075 --> 00:38:31,258
and you have giant blimps flying past

681
00:38:31,278 --> 00:38:33,160
and casting light with the commercials.

682
00:38:33,601 --> 00:38:34,762
And it's basically just a shader

683
00:38:34,802 --> 00:38:36,384
that just moves around in UV space.

684
00:38:38,835 --> 00:38:42,897
And an additional benefit was then, well, we have all these cool blinky color curves.

685
00:38:43,137 --> 00:38:46,979
So then we start adding them to like the window shaders, so it looks like people are watching

686
00:38:47,039 --> 00:38:52,682
TVs or other light sources that are off-screen, so we can have, you know, big dynamic light

687
00:38:52,722 --> 00:38:54,102
that changes color all the time.

688
00:38:55,663 --> 00:38:57,464
So we get a lot of usage out of that.

689
00:39:02,055 --> 00:39:05,936
Another thing we added as well was things like traffic and moving parts.

690
00:39:06,596 --> 00:39:12,217
And the same thing there, we just realized that the amount of stuff you need is just insane

691
00:39:12,317 --> 00:39:16,598
because it's the variety, right? So we kept adding layers and layers.

692
00:39:16,658 --> 00:39:20,099
So for the traffic, we also had like three types of traffic.

693
00:39:20,139 --> 00:39:26,600
We had like five types of random spinny moving bits for all the different sci-fi stuff.

694
00:39:27,300 --> 00:39:29,981
And it's really like the variety that is the key.

695
00:39:30,041 --> 00:39:31,802
So we needed a lot of very simple things.

696
00:39:33,777 --> 00:39:37,719
So having successfully, you know, built all these things,

697
00:39:37,819 --> 00:39:39,260
like we're like, we have so much stuff,

698
00:39:40,041 --> 00:39:40,982
we have too much stuff.

699
00:39:41,822 --> 00:39:44,284
So we removed a lot of the technical guesswork

700
00:39:44,964 --> 00:39:48,427
from the asset pipeline with our workflow, right?

701
00:39:49,708 --> 00:39:51,209
Problem was that we just moved that forward

702
00:39:51,789 --> 00:39:53,030
into later into the chain,

703
00:39:53,070 --> 00:39:55,452
because our ambition grew throughout the project.

704
00:39:56,152 --> 00:39:56,292
So...

705
00:39:58,093 --> 00:40:01,296
Thanks to the very simple content pipeline,

706
00:40:01,356 --> 00:40:03,797
we had a very, very limited part of optimizations

707
00:40:03,857 --> 00:40:04,738
that we could focus on.

708
00:40:05,258 --> 00:40:06,779
So we had draw calls.

709
00:40:06,879 --> 00:40:07,940
They were a major problem.

710
00:40:08,360 --> 00:40:09,221
Same thing with streaming.

711
00:40:09,942 --> 00:40:12,743
So for draw calls, what we did was a bunch of,

712
00:40:12,964 --> 00:40:14,945
you know, a combination of tech art,

713
00:40:15,125 --> 00:40:20,008
some hand optimization, and lighting optimization.

714
00:40:20,028 --> 00:40:21,810
So I'm gonna focus on the lighting optimizations.

715
00:40:23,190 --> 00:40:26,631
So it's an extremely, extremely important part of the game,

716
00:40:27,331 --> 00:40:27,691
the lighting.

717
00:40:27,971 --> 00:40:30,151
We have artificial light at all times.

718
00:40:30,191 --> 00:40:31,492
There's almost no sunlight.

719
00:40:32,192 --> 00:40:33,712
And we wanted to have a softer look,

720
00:40:33,772 --> 00:40:36,353
but also have a very, very scalable game

721
00:40:36,393 --> 00:40:38,374
in terms of rendering.

722
00:40:39,314 --> 00:40:41,894
And we evaluated both dynamic and static light.

723
00:40:41,994 --> 00:40:44,235
And you know, dynamic is great,

724
00:40:44,315 --> 00:40:45,855
but it doesn't really scale very well.

725
00:40:45,935 --> 00:40:47,516
So we ended up with a hybrid mix.

726
00:40:48,620 --> 00:40:51,944
So we used very, very large scale static lights

727
00:40:52,004 --> 00:40:53,966
that we hand placed. We couldn't use a skylight

728
00:40:54,086 --> 00:40:56,368
because we wanted to have a different feeling

729
00:40:56,388 --> 00:40:57,309
in different areas, right?

730
00:40:58,130 --> 00:40:59,892
And then when we optimized, we actually switched

731
00:40:59,952 --> 00:41:02,094
a lot of lights to static

732
00:41:02,595 --> 00:41:05,397
because we basically used the default texture,

733
00:41:05,498 --> 00:41:07,419
like the default light map resolution in Unreal.

734
00:41:07,920 --> 00:41:14,790
with some tweaks, which you know, doesn't work great when you're making FPS, but when you're making this kind of game

735
00:41:15,471 --> 00:41:20,898
it works really well. And we don't really have any textures, so we have plenty of space for lightmaps.

736
00:41:21,559 --> 00:41:24,623
So we actually used a lot of static lighting.

737
00:41:26,299 --> 00:41:31,382
But static lighting actually doesn't look very good if you don't have reflection probes.

738
00:41:31,763 --> 00:41:34,604
And they are like the real heroes of the lighting.

739
00:41:35,145 --> 00:41:37,767
So this is how it looks like without reflection probes.

740
00:41:39,147 --> 00:41:43,430
And making a game from this camera angle, you can't really use reflection probes in the regular way.

741
00:41:43,490 --> 00:41:44,951
Because it looks kind of meh.

742
00:41:45,779 --> 00:41:50,844
So what we did essentially was that we hand-painted the world using reflection probes.

743
00:41:51,445 --> 00:41:53,907
Because you just pick where they look good.

744
00:41:54,788 --> 00:41:59,733
Because, I mean, it doesn't matter because you're not going to be the first person to see if they align well.

745
00:41:59,753 --> 00:42:02,176
So we just like, we just placed like, here's a water puddle.

746
00:42:02,236 --> 00:42:05,018
We can have a reflection probe and it's going to look all nice and dynamic.

747
00:42:05,219 --> 00:42:08,642
So a lot of what people think is dynamic lighting is actually just reflection probes.

748
00:42:09,766 --> 00:42:10,847
But they're super expensive.

749
00:42:11,027 --> 00:42:12,788
They take like a megabyte of memory.

750
00:42:14,029 --> 00:42:16,031
But once again, with our camera distance,

751
00:42:16,111 --> 00:42:20,074
we don't really care because we don't need that resolution.

752
00:42:20,134 --> 00:42:23,617
So we just put them to like 64 by 64 cubemaps.

753
00:42:24,297 --> 00:42:26,679
And then we just maxed out the amount at all times.

754
00:42:26,779 --> 00:42:28,600
And we just basically painted lighting.

755
00:42:33,124 --> 00:42:35,546
And then to fight the draw calls,

756
00:42:35,946 --> 00:42:37,687
another thing we did was that.

757
00:42:38,780 --> 00:42:42,985
The lightmap resolution by default in Unreal is 1K,

758
00:42:43,805 --> 00:42:45,607
and we increased it to 2K.

759
00:42:46,328 --> 00:42:47,950
And that saved us 10% of draw calls.

760
00:42:49,894 --> 00:42:51,094
And why does that happen?

761
00:42:51,334 --> 00:42:54,756
Well, by default, when you increase the lightmap

762
00:42:54,796 --> 00:42:57,517
resolution in Unreal, it doesn't actually

763
00:42:57,537 --> 00:42:58,417
increase the resolution.

764
00:42:58,497 --> 00:43:00,498
It packs all the assets into a texture.

765
00:43:00,538 --> 00:43:03,379
So you just pack more assets into the same texture.

766
00:43:04,140 --> 00:43:08,642
And Unreal have an automated or automatic instancing.

767
00:43:09,102 --> 00:43:10,422
But you can only instance if it's

768
00:43:10,482 --> 00:43:12,043
the same mesh, same material.

769
00:43:12,804 --> 00:43:13,844
also the same lightmap.

770
00:43:14,364 --> 00:43:16,025
So by increasing the lightmap size,

771
00:43:16,165 --> 00:43:18,607
you just have more assets on the same texture.

772
00:43:18,627 --> 00:43:21,709
So the likelihood that they can auto instance is just higher.

773
00:43:23,470 --> 00:43:25,050
But that means we also needed, you know,

774
00:43:25,090 --> 00:43:26,551
to load more lightmaps.

775
00:43:26,771 --> 00:43:28,492
That was, once again, very okay

776
00:43:28,552 --> 00:43:30,854
because we didn't really use textures.

777
00:43:31,194 --> 00:43:34,416
So it cost us about 50 megs on Xbox One,

778
00:43:34,556 --> 00:43:35,676
but cut the draw calls by 10%.

779
00:43:36,097 --> 00:43:38,398
So that allowed us to really have,

780
00:43:39,739 --> 00:43:41,340
you know, that kind of density that we wanted.

781
00:43:42,899 --> 00:43:47,223
And then another key part of the lighting was the volumetric light.

782
00:43:48,284 --> 00:43:52,948
And we wanted to have this Blade Runner feeling, lots of volumetric lights all the time.

783
00:43:53,348 --> 00:43:55,991
But that's also really expensive, so we used the baked light for that.

784
00:43:57,112 --> 00:43:58,993
But that's also a bit challenging because...

785
00:43:59,902 --> 00:44:02,703
It's built for making like, you know, a first person or things like that.

786
00:44:02,803 --> 00:44:07,785
And all the volumetric light is like, it keeps close to the geometry to keep the density high.

787
00:44:08,346 --> 00:44:15,669
The problem is that we have a lot of vistas and we don't really need like, you know, probes every like one meter, like a hundred meters into the background.

788
00:44:15,749 --> 00:44:22,192
So, so we use these, the volumetric lightmap density volumes to optimize all of that.

789
00:44:23,074 --> 00:44:24,815
And you know, that was great.

790
00:44:25,335 --> 00:44:27,436
It freed up some memory, but it still

791
00:44:27,456 --> 00:44:29,117
took an enormous chunk of memory.

792
00:44:29,777 --> 00:44:33,298
Because the default lighting grid just

793
00:44:33,338 --> 00:44:37,740
doesn't go any lower by default. It's not really

794
00:44:37,780 --> 00:44:40,261
built for making an open world game with base lighting.

795
00:44:41,362 --> 00:44:48,805
So, we just like, you know, I googled it, and I just added an extra MIP to the volumetric light grid,

796
00:44:49,365 --> 00:44:54,207
which is just changing a variable, and that allowed it to optimize itself a lot heavier,

797
00:44:54,567 --> 00:44:56,568
which took the cost down from like 150 to 40 megs.

798
00:45:01,520 --> 00:45:02,860
but we also had to optimize the lighting.

799
00:45:03,321 --> 00:45:05,362
And one of the things that, you know,

800
00:45:05,682 --> 00:45:06,963
you think about like culling,

801
00:45:06,983 --> 00:45:10,865
I mean, we're making basically having a isometric type game.

802
00:45:11,445 --> 00:45:13,566
So you don't think that you have to use culling a lot,

803
00:45:13,586 --> 00:45:15,347
but Unreal is very, very forgiving.

804
00:45:15,887 --> 00:45:17,989
So what we did was we actually went in

805
00:45:18,069 --> 00:45:20,530
and we just placed like a distance based fading

806
00:45:20,590 --> 00:45:22,711
on all the lights so that they would fade out nicely

807
00:45:22,751 --> 00:45:23,592
at the edge of the screen.

808
00:45:24,632 --> 00:45:26,553
And that was like the biggest optimization we did

809
00:45:27,193 --> 00:45:27,454
because

810
00:45:28,810 --> 00:45:34,973
And like I said, Unreal is very forgiving and they have a fading for light, but it's super, super conservative.

811
00:45:35,193 --> 00:45:39,315
So we just did that because we thought, surely we don't need to do that with a top-down camera,

812
00:45:39,375 --> 00:45:42,897
but it was actually the single biggest optimization we did in the entire project.

813
00:45:47,544 --> 00:45:50,245
That was like the biggest optimization.

814
00:45:50,325 --> 00:45:52,786
And the other was just basically turning lights static.

815
00:45:53,526 --> 00:45:55,786
But we also didn't want to sacrifice fidelity

816
00:45:55,966 --> 00:45:56,787
on any platform.

817
00:45:56,807 --> 00:45:59,647
So we built tools so we could turn off shadows

818
00:45:59,807 --> 00:46:02,188
per platform per light, because you can't really do that.

819
00:46:02,368 --> 00:46:04,409
Either you turn on shadows or you turn them off.

820
00:46:05,369 --> 00:46:07,289
And there's not really anything that you can do there.

821
00:46:07,449 --> 00:46:11,311
So we made tools and then we basically made a hand pass

822
00:46:11,411 --> 00:46:13,731
on the entire world and turned off shadows

823
00:46:13,811 --> 00:46:14,892
in problematic areas.

824
00:46:16,316 --> 00:46:17,677
No one noticed, so it worked.

825
00:46:18,197 --> 00:46:21,538
But that allowed us to really have the shadows on everything

826
00:46:21,598 --> 00:46:24,039
on next gen, shadows on not really anything

827
00:46:24,059 --> 00:46:25,240
on the current gen.

828
00:46:27,661 --> 00:46:33,103
So in the end, our enforced limitations

829
00:46:33,163 --> 00:46:34,004
was a great success.

830
00:46:34,304 --> 00:46:37,185
It allowed us to maintain momentum

831
00:46:37,525 --> 00:46:38,345
when we're building things.

832
00:46:38,626 --> 00:46:40,786
And it allowed us to focus our attention.

833
00:46:41,527 --> 00:46:44,148
But it also removed a lot of visual and technical noise,

834
00:46:44,268 --> 00:46:44,708
because you know.

835
00:46:45,470 --> 00:46:48,512
We didn't have many colors, we have a very busy game visually,

836
00:46:48,872 --> 00:46:51,414
and we restrained the use of colors

837
00:46:51,834 --> 00:46:54,016
and helped the art direction along the way.

838
00:46:55,437 --> 00:46:58,599
And we also unlocked a lot of new possibilities,

839
00:46:58,619 --> 00:47:00,720
like the sharing of materials, which also helped

840
00:47:00,860 --> 00:47:02,401
with reinforcing the art direction.

841
00:47:03,342 --> 00:47:05,083
And it's a...

842
00:47:06,556 --> 00:47:09,078
It saved us a lot of time that you normally spend on assets,

843
00:47:09,539 --> 00:47:12,341
so we can focus on creating the world.

844
00:47:12,361 --> 00:47:14,163
Because that was the whole thing we wanted to do.

845
00:47:14,363 --> 00:47:17,365
We wanted to move a lot of the time spent from the assets

846
00:47:17,706 --> 00:47:21,789
to working on the world and making sure the world felt alive and polished.

847
00:47:22,350 --> 00:47:25,452
So we moved a lot of those savings along the line.

848
00:47:27,096 --> 00:47:30,918
It's some of the downsides of working with a pipeline

849
00:47:30,938 --> 00:47:31,258
like this.

850
00:47:31,378 --> 00:47:32,759
It's that it's really scary.

851
00:47:33,279 --> 00:47:35,220
Because you're making a prototype,

852
00:47:35,260 --> 00:47:36,440
and you're like, this is really cool.

853
00:47:36,520 --> 00:47:38,861
But you don't really know, well, in six months,

854
00:47:39,041 --> 00:47:41,542
will we be really, really tired of using

855
00:47:41,723 --> 00:47:46,225
the same kind of rivets, the same kind of sci-fi bits

856
00:47:46,365 --> 00:47:47,345
that we're using all the time?

857
00:47:48,966 --> 00:47:51,287
So it's a little bit scary to commit to it,

858
00:47:51,387 --> 00:47:52,167
because you don't know.

859
00:47:55,409 --> 00:47:56,891
But I think it worked out well.

860
00:47:57,371 --> 00:48:01,296
And it's also very easy to set rules, and it's very, very

861
00:48:01,376 --> 00:48:02,317
boring to follow them.

862
00:48:03,158 --> 00:48:05,200
If there's one thing I know, it's that everyone loves

863
00:48:05,260 --> 00:48:07,742
making really, really smart systems, and then no one likes

864
00:48:07,782 --> 00:48:08,283
to use them.

865
00:48:09,504 --> 00:48:13,228
And it takes discipline, and it's not always fun.

866
00:48:15,877 --> 00:48:17,518
Because sometimes you're like, I want to do this thing.

867
00:48:17,678 --> 00:48:19,259
Like, well, I can't do exactly that thing.

868
00:48:19,299 --> 00:48:20,861
And you're like, and they're like, no, I'm

869
00:48:20,881 --> 00:48:21,981
going to abandon the pipeline.

870
00:48:22,042 --> 00:48:24,564
It takes a lot of discipline to maintain

871
00:48:24,604 --> 00:48:26,205
that throughout the entire project

872
00:48:26,285 --> 00:48:27,746
and thinking of the big picture.

873
00:48:29,888 --> 00:48:33,791
But if I would do all of this again, which, spoiler alert,

874
00:48:33,811 --> 00:48:35,272
we are, because we're making another game,

875
00:48:36,653 --> 00:48:40,036
we definitely underestimated the end result.

876
00:48:40,056 --> 00:48:40,897
And I have a pie chart.

877
00:48:42,258 --> 00:48:43,699
We focused a lot of the.

878
00:48:44,847 --> 00:48:49,928
time on quantity instead of quality because in the end, you know, we instead of spending

879
00:48:49,968 --> 00:48:55,090
like one month setting everything up and then just like three years just like we could have

880
00:48:55,130 --> 00:48:59,152
spent you know maybe five months making sure the game actually looked a lot better and then

881
00:48:59,472 --> 00:49:04,253
focus less on the quantity so that would probably made the game look better.

882
00:49:06,257 --> 00:49:11,200
We also didn't apply the same kind of similar thinking that we did on the asset pipeline.

883
00:49:11,620 --> 00:49:16,443
The asset pipeline was very, very thought out, but the rest of the pipeline was very reactive.

884
00:49:16,563 --> 00:49:19,705
We were like, we're adding some stuff. Not enough, we're adding more stuff.

885
00:49:20,245 --> 00:49:23,367
So we didn't really have the same kind of discipline.

886
00:49:24,227 --> 00:49:26,509
So that's something that I hope that we can improve on.

887
00:49:31,652 --> 00:49:36,976
That's it, and if you think this sounds very exciting and cool and you want to do that,

888
00:49:37,036 --> 00:49:43,040
we are hiring for basically all positions and working on our next game, which is a next-gen

889
00:49:43,140 --> 00:49:44,942
sci-fi slash cyberpunk immersive sim.

890
00:49:46,743 --> 00:49:47,203
So thank you!

891
00:49:58,594 --> 00:50:02,102
And please remember to leave feedback on the way out.

892
00:50:02,844 --> 00:50:04,107
And questions?

893
00:50:22,562 --> 00:50:28,847
Thank you. Could you talk a bit more about why you guys decided not to use skylights?

894
00:50:29,248 --> 00:50:36,674
Or was there at least any HDR used? Because it looks like the light is very nicely filled and a lot of bounce light.

895
00:50:37,474 --> 00:50:40,737
Basically a bit more about your lighting process and iterations and you know.

896
00:50:44,698 --> 00:50:49,026
Basically we wanted to have a soft look to the lighting.

897
00:50:49,507 --> 00:50:51,911
So that's why we had a very, very soft base pass.

898
00:50:53,784 --> 00:50:56,584
And then we used the dynamic lighting,

899
00:50:56,724 --> 00:50:58,745
like much more for spot lighting,

900
00:50:59,665 --> 00:51:04,946
because it was like having the kind of camera distance

901
00:51:04,966 --> 00:51:07,106
that we have, it doesn't really work nicely

902
00:51:07,146 --> 00:51:08,486
to have like full screen light.

903
00:51:08,506 --> 00:51:12,087
So it was very much divided up into smaller spotlights

904
00:51:12,547 --> 00:51:14,067
for like, you know, shadows and, you know,

905
00:51:14,587 --> 00:51:15,427
high fidelity lighting.

906
00:51:15,548 --> 00:51:16,728
And then we had like a very, very,

907
00:51:17,208 --> 00:51:20,428
like a strong base pass with the bake lighting.

908
00:51:21,109 --> 00:51:23,631
And then we just abused the reflection probes like crazy.

909
00:51:23,671 --> 00:51:25,793
Like instead of just having them by default,

910
00:51:25,833 --> 00:51:27,454
we just cranked up the intensity

911
00:51:27,474 --> 00:51:28,895
to whatever we felt looked good.

912
00:51:28,935 --> 00:51:31,778
So it's like 100% not physically correct.

913
00:51:34,220 --> 00:51:34,520
Thank you.

914
00:51:45,129 --> 00:51:45,429
All right.

915
00:51:46,650 --> 00:51:46,911
Thank you.

