1
00:00:06,315 --> 00:00:08,977
My name is Anna, I'm the QA manager at Guerrilla Games,

2
00:00:10,978 --> 00:00:13,219
in Games QA for about 12 years.

3
00:00:14,579 --> 00:00:15,920
And I'm here to tell you the story

4
00:00:15,960 --> 00:00:17,921
of how we tested Horizon Zero Dawn,

5
00:00:18,521 --> 00:00:20,703
didn't let too many bugs slip through,

6
00:00:21,483 --> 00:00:24,004
and managed to keep most of our sanity in the process.

7
00:00:27,326 --> 00:00:29,467
So this is the summary of the topics

8
00:00:29,487 --> 00:00:31,008
that we'll be covering in the talk.

9
00:00:32,168 --> 00:00:33,649
But first, I would like a show of hands.

10
00:00:34,811 --> 00:00:38,132
Could you please raise your hand if you are in QA,

11
00:00:38,312 --> 00:00:41,053
QA engineering, or you consider a career in QA

12
00:00:41,153 --> 00:00:41,893
or QA engineering?

13
00:00:42,753 --> 00:00:44,114
Yes, my people.

14
00:00:46,115 --> 00:00:48,555
Could you please raise your hand if you are in production?

15
00:00:50,036 --> 00:00:51,856
Yes, we love production.

16
00:00:52,537 --> 00:00:54,757
And could you please raise your hand

17
00:00:54,837 --> 00:00:56,498
if you have played Horizon Zero Dawn?

18
00:00:56,518 --> 00:00:58,518
Woo!

19
00:00:59,919 --> 00:00:59,999
Woo!

20
00:01:00,019 --> 00:01:00,079
Woo!

21
00:01:00,099 --> 00:01:00,179
Woo!

22
00:01:03,020 --> 00:01:04,180
So just as a brief intro,

23
00:01:05,094 --> 00:01:06,135
who is Guerrilla Games.

24
00:01:06,655 --> 00:01:09,897
There are only two relevant points for this talk.

25
00:01:10,377 --> 00:01:12,479
One, that we are a first party Sony studio.

26
00:01:12,599 --> 00:01:14,720
This will become relevant later in the talk, I promise.

27
00:01:15,621 --> 00:01:19,403
And that for, yeah, the last 10 years

28
00:01:19,463 --> 00:01:23,765
before we went into production with Horizon Zero Dawn,

29
00:01:24,646 --> 00:01:27,228
the Killzone series was pretty much our studio identity.

30
00:01:28,749 --> 00:01:31,010
I don't know if any of you have played any Killzone games,

31
00:01:31,590 --> 00:01:34,652
but basically they're a series of first person shooters.

32
00:01:35,124 --> 00:01:38,466
set in this dystopian, dark, sci-fi future

33
00:01:39,426 --> 00:01:43,789
where the player fights these iconic enemies,

34
00:01:43,969 --> 00:01:45,470
the Helghast, with the red eyes.

35
00:01:45,490 --> 00:01:50,092
It is sort of constrained and kind of linear spaces.

36
00:01:51,613 --> 00:01:54,695
So I went from this to, well,

37
00:01:55,375 --> 00:02:00,038
the open spaces and lush nature of Horizon Zero Dawn

38
00:02:00,818 --> 00:02:02,119
with the robot dinosaurs.

39
00:02:02,859 --> 00:02:03,700
We kept the red eyes.

40
00:02:06,094 --> 00:02:09,516
So as you can imagine, such a major shift in direction

41
00:02:09,536 --> 00:02:11,997
meant quite a few challenges.

42
00:02:12,857 --> 00:02:15,819
So I'm going to go over some of the challenges

43
00:02:15,859 --> 00:02:18,120
for the project itself, which were

44
00:02:18,160 --> 00:02:21,762
very relevant for the challenge of testing it.

45
00:02:23,202 --> 00:02:25,664
So this was our first open world game.

46
00:02:25,744 --> 00:02:28,185
It was our first open action RPG game.

47
00:02:29,806 --> 00:02:34,048
The RPG elements, open world setting, nonlinear component.

48
00:02:35,424 --> 00:02:40,888
This introduced a lot of variables that had to be accounted for during both development and testing.

49
00:02:41,809 --> 00:02:44,331
And these components had a lot of interdependencies.

50
00:02:46,092 --> 00:02:50,715
We did not have tools to create an open world game, so we had to pretty much build them from scratch.

51
00:02:51,936 --> 00:02:57,200
Speaking of tools, the engine that we had used previously to build the Killzone games

52
00:02:58,081 --> 00:03:02,003
did not support an open world game, so we had to completely refactor that and retool it.

53
00:03:03,199 --> 00:03:06,522
And there were many things that we didn't know about the project when we started working on it.

54
00:03:07,002 --> 00:03:08,543
We didn't know exactly what the scope was,

55
00:03:09,304 --> 00:03:11,486
or exactly what the gameplay loop was going to be,

56
00:03:12,627 --> 00:03:15,749
or even the things that we did know that we wanted to do the game,

57
00:03:15,789 --> 00:03:17,991
we didn't have implementation details about them.

58
00:03:20,113 --> 00:03:22,394
And yeah, we had never done anything like this before.

59
00:03:23,916 --> 00:03:24,316
Scary.

60
00:03:25,857 --> 00:03:28,179
So, specifically the challenges for QA.

61
00:03:30,561 --> 00:03:32,102
The scariest thing about...

62
00:03:32,585 --> 00:03:38,027
the scope for QA was that all the game components interacted with each other

63
00:03:38,107 --> 00:03:39,187
and influenced each other.

64
00:03:39,207 --> 00:03:40,547
They're all tied together.

65
00:03:40,567 --> 00:03:47,110
So we couldn't partition things any longer in neat categories

66
00:03:47,170 --> 00:03:48,350
and test them in isolation.

67
00:03:48,390 --> 00:03:50,831
We have to consider the whole thing.

68
00:03:51,931 --> 00:03:57,413
So just to give you a very brief example of just how these components interacted

69
00:03:57,473 --> 00:03:58,594
in unforeseen ways.

70
00:04:00,797 --> 00:04:03,079
Early in development, we were working on a vertical slice.

71
00:04:03,319 --> 00:04:06,181
And in this vertical slice, there was a main quest

72
00:04:06,401 --> 00:04:10,104
in which the player was supposed to capture a camp

73
00:04:11,165 --> 00:04:14,988
and yeah, kill the bandits, raise the flag,

74
00:04:15,209 --> 00:04:16,209
quest completed, yay.

75
00:04:17,170 --> 00:04:19,893
So while we were testing this for a milestone,

76
00:04:19,933 --> 00:04:22,815
we were going to play test this with actual users.

77
00:04:24,136 --> 00:04:25,457
In some runs.

78
00:04:26,885 --> 00:04:28,226
the main quest just wouldn't complete.

79
00:04:28,386 --> 00:04:29,907
And we couldn't figure out why,

80
00:04:30,047 --> 00:04:31,407
and we've tried everything we could.

81
00:04:31,887 --> 00:04:33,928
We had quest designers debug it.

82
00:04:33,948 --> 00:04:36,149
They were like, the script is fine, everything is fine.

83
00:04:36,169 --> 00:04:37,329
I don't understand what's going on.

84
00:04:38,370 --> 00:04:41,431
And then it took us about two days of deep diving

85
00:04:41,531 --> 00:04:43,852
and investigating, and we figured out

86
00:04:43,892 --> 00:04:45,733
that there was a random encounter

87
00:04:46,193 --> 00:04:48,254
that had nothing to do with the quest,

88
00:04:48,934 --> 00:04:50,515
in which there was a wounded hunter,

89
00:04:50,735 --> 00:04:53,396
and you could just pass by and give them

90
00:04:53,476 --> 00:04:55,617
some herbs to heal them.

91
00:04:56,338 --> 00:04:56,739
or not.

92
00:04:57,879 --> 00:04:59,340
And if you gave him the herbs,

93
00:04:59,480 --> 00:05:02,541
so if you were a nice person and wanted to help him,

94
00:05:04,121 --> 00:05:05,882
you couldn't complete the main quest anymore

95
00:05:05,962 --> 00:05:07,943
for some strange reason.

96
00:05:08,363 --> 00:05:10,343
There was no reason for these things to be connected,

97
00:05:10,383 --> 00:05:11,024
but they were.

98
00:05:11,424 --> 00:05:12,864
So that was very scary for us.

99
00:05:15,905 --> 00:05:18,906
Also, our test team was quite small.

100
00:05:19,367 --> 00:05:20,167
Throughout the project,

101
00:05:20,207 --> 00:05:22,448
we had about eight testers internally.

102
00:05:23,728 --> 00:05:24,388
And we had help.

103
00:05:25,920 --> 00:05:26,580
So, yeah.

104
00:05:28,662 --> 00:05:29,982
But still, it was a challenge.

105
00:05:31,744 --> 00:05:34,665
And because we couldn't apply the same processes

106
00:05:34,685 --> 00:05:37,467
that we had for Killzone projects,

107
00:05:38,508 --> 00:05:39,909
we had to come up with something new

108
00:05:40,229 --> 00:05:41,510
that we hadn't tried before,

109
00:05:41,690 --> 00:05:44,652
and we didn't know if it was going to work or not.

110
00:05:46,693 --> 00:05:49,094
So it was quite difficult for us to anticipate

111
00:05:49,455 --> 00:05:52,657
and plan what our test strategy was going to be.

112
00:05:53,817 --> 00:05:54,558
And additionally...

113
00:05:57,219 --> 00:06:01,042
Nobody in the internal QA team had any experience

114
00:06:01,062 --> 00:06:04,024
testing open world games, and our partners

115
00:06:04,224 --> 00:06:06,445
at Sony First Party QA didn't have either.

116
00:06:07,606 --> 00:06:09,067
So that was going to be fun.

117
00:06:10,508 --> 00:06:11,168
So what did we do?

118
00:06:13,330 --> 00:06:15,711
I'm just going to summarize here the components,

119
00:06:16,692 --> 00:06:19,173
and I'm going to go into detail for each of them later.

120
00:06:20,694 --> 00:06:23,356
But basically, we came up with a new team structure

121
00:06:23,736 --> 00:06:24,397
for our internal QA.

122
00:06:26,506 --> 00:06:30,729
We came up with a test strategy that was focused on what we thought was important and relevant.

123
00:06:32,131 --> 00:06:35,994
We used a lot of tools to help our efficiency in testing

124
00:06:36,214 --> 00:06:38,616
and to make our testing more informative for the developers.

125
00:06:40,477 --> 00:06:47,923
And we used a bunch of data to help us, you know, reorient our test strategy when needed.

126
00:06:49,004 --> 00:06:53,148
So what it all comes down to is people, processes, tools.

127
00:06:55,420 --> 00:06:56,941
So let's talk about people for a bit.

128
00:06:57,942 --> 00:06:58,622
Our QA team.

129
00:07:01,104 --> 00:07:02,184
When I started at Guerrilla,

130
00:07:02,985 --> 00:07:05,686
the QA team was three people in a windowless room

131
00:07:06,707 --> 00:07:08,528
whose job description was basically,

132
00:07:09,028 --> 00:07:10,209
play the game, find the bugs.

133
00:07:11,250 --> 00:07:13,371
And some developers, when they heard the word QA,

134
00:07:13,391 --> 00:07:14,492
they would just roll their eyes.

135
00:07:16,693 --> 00:07:18,634
We've come a long way since then.

136
00:07:19,435 --> 00:07:23,637
So this day, the QA team is an integral part

137
00:07:23,677 --> 00:07:24,798
of the development process.

138
00:07:25,555 --> 00:07:28,656
and developers now bring us fancy chocolates

139
00:07:28,696 --> 00:07:29,897
to say thank you for your work.

140
00:07:31,217 --> 00:07:32,537
They were delicious chocolates, by the way.

141
00:07:35,998 --> 00:07:37,719
So what did we do with our QA team?

142
00:07:38,839 --> 00:07:40,760
We involved them really early.

143
00:07:42,020 --> 00:07:43,840
So when pretty much the entire studio

144
00:07:43,880 --> 00:07:45,621
was still developing Kills on Shadowfall,

145
00:07:45,801 --> 00:07:49,022
our previous project, there was a small team

146
00:07:49,062 --> 00:07:50,862
that was prototyping Horizon Zero Dawn.

147
00:07:50,882 --> 00:07:52,203
It was seven or eight people.

148
00:07:53,304 --> 00:07:55,586
And one of those people was a QA person

149
00:07:56,086 --> 00:07:57,407
who was assigned to the project

150
00:07:57,427 --> 00:07:59,448
and who was helping the prototyping team

151
00:08:00,088 --> 00:08:04,891
to test with feedback, with research, and so on.

152
00:08:07,092 --> 00:08:08,453
We specialized our QA.

153
00:08:10,054 --> 00:08:12,175
So they gained deep knowledge of the areas

154
00:08:12,195 --> 00:08:13,175
that are assigned to them,

155
00:08:13,616 --> 00:08:15,577
and they used that to decide the test strategy

156
00:08:16,137 --> 00:08:17,098
for those areas.

157
00:08:17,878 --> 00:08:20,860
And that knowledge was immensely valuable.

158
00:08:21,487 --> 00:08:26,230
and it just improved our test strategy tremendously.

159
00:08:26,310 --> 00:08:28,291
We were able to test more efficiently

160
00:08:28,651 --> 00:08:30,952
and we were able to make our testing relevant

161
00:08:30,992 --> 00:08:35,815
because our specialized QA knew what was going on,

162
00:08:35,955 --> 00:08:38,557
knew what were weak points of an area,

163
00:08:38,697 --> 00:08:41,699
what was being changed, what the developers were working on.

164
00:08:43,060 --> 00:08:46,081
Speaking of developers, our QA were embedded

165
00:08:46,201 --> 00:08:47,262
with the development teams.

166
00:08:48,960 --> 00:08:53,402
Early on they started creating connections with those developers, with the producers,

167
00:08:54,122 --> 00:08:56,923
creating information loops, feedback loops.

168
00:08:57,343 --> 00:08:58,784
They were in daily stand-ups.

169
00:08:59,564 --> 00:09:02,165
They were continuously talking with the developers

170
00:09:02,225 --> 00:09:04,245
and getting information from them, feedback,

171
00:09:04,746 --> 00:09:09,487
and guidance on how to test and what to test and when to test.

172
00:09:22,632 --> 00:09:24,733
Also, RQA were mostly autonomous.

173
00:09:25,854 --> 00:09:28,254
So they were the ones who decided the test strategy.

174
00:09:29,135 --> 00:09:31,736
They were getting their work either from their team,

175
00:09:31,816 --> 00:09:34,317
from their development team based on daily stand-ups

176
00:09:34,417 --> 00:09:38,018
or just communication, their own experience or intuition.

177
00:09:39,399 --> 00:09:43,781
And that freed me up to focus, instead of micromanaging people,

178
00:09:44,801 --> 00:09:47,742
to focus on solving high-level puzzles that were related

179
00:09:47,842 --> 00:09:50,263
to our overall test strategy,

180
00:09:50,463 --> 00:09:52,164
how to improve quality in the game.

181
00:09:52,983 --> 00:09:57,307
and how to find the best cat picture to attach to a work email.

182
00:09:58,027 --> 00:09:59,288
It's a pretty difficult thing.

183
00:10:01,730 --> 00:10:04,412
And with autonomy also comes ownership.

184
00:10:06,014 --> 00:10:10,497
And RQA had full ownership of the areas that they were assigned to,

185
00:10:11,398 --> 00:10:13,680
which means that they were fully invested in the project.

186
00:10:14,320 --> 00:10:16,182
And this is pretty important because

187
00:10:16,202 --> 00:10:19,605
QA professionals, we tend to see the worst in a project.

188
00:10:19,645 --> 00:10:21,206
We tend to see all the worst.

189
00:10:21,928 --> 00:10:24,429
and all the bad stuff and whatever is broken.

190
00:10:25,689 --> 00:10:28,911
So that tends to give us a pretty negative outlook.

191
00:10:30,472 --> 00:10:33,573
So when you feel that you have a positive impact on the game

192
00:10:33,673 --> 00:10:34,993
and that your contribution matters,

193
00:10:35,794 --> 00:10:37,054
that helps mitigate that.

194
00:10:39,075 --> 00:10:39,996
People feel empowered.

195
00:10:42,197 --> 00:10:44,898
So these are just some of the ownership areas

196
00:10:44,918 --> 00:10:46,238
that we had through our development.

197
00:10:47,259 --> 00:10:48,359
Every area had one.

198
00:10:51,419 --> 00:10:56,842
or two for quests because it's such a complex and large area.

199
00:10:59,264 --> 00:11:00,625
QA people are assigned to it.

200
00:11:03,506 --> 00:11:06,228
And QA has value beyond finding bugs.

201
00:11:06,908 --> 00:11:12,111
We used these people's expertise as gamers,

202
00:11:12,912 --> 00:11:14,313
their experience with the project,

203
00:11:14,853 --> 00:11:17,294
and their unique position, which is kind of halfway

204
00:11:17,354 --> 00:11:18,935
between players and developers.

205
00:11:20,860 --> 00:11:22,620
We use this to make the game better.

206
00:11:23,760 --> 00:11:25,941
As a brief example, at some point quite early

207
00:11:25,961 --> 00:11:29,781
in development, we were working on the bow combat,

208
00:11:30,001 --> 00:11:34,142
like bow shooting, and there was something off about it.

209
00:11:34,422 --> 00:11:36,683
Just something we couldn't put our finger on it.

210
00:11:37,223 --> 00:11:39,623
The developers couldn't put their finger on it.

211
00:11:40,043 --> 00:11:41,964
It was just not what we wanted it to be.

212
00:11:42,484 --> 00:11:47,705
So, a few people on my team went into a deep dive mode,

213
00:11:48,185 --> 00:11:50,525
and they spent several days analyzing.

214
00:11:51,254 --> 00:11:54,616
every factor that contributed to the user experience.

215
00:11:55,397 --> 00:11:57,338
So animation, sound,

216
00:11:58,739 --> 00:12:01,281
like the trails of the arrows, the timing,

217
00:12:01,402 --> 00:12:02,923
the timing of the animations,

218
00:12:03,823 --> 00:12:06,245
just everything that was involved in this experience.

219
00:12:06,626 --> 00:12:09,328
And they came up with a pretty detailed analysis

220
00:12:09,588 --> 00:12:13,231
of how all these factors were impacting the user.

221
00:12:14,131 --> 00:12:17,954
And the designers used this to tweak those factors

222
00:12:18,535 --> 00:12:19,756
and create a better experience.

223
00:12:22,592 --> 00:12:24,792
But there were only eight of us,

224
00:12:24,972 --> 00:12:26,693
and we couldn't just enter again without it.

225
00:12:27,393 --> 00:12:29,314
We just, yeah, the eight of us.

226
00:12:30,714 --> 00:12:33,975
So we brought in Sony's first party QA.

227
00:12:37,156 --> 00:12:38,276
We involved them early on,

228
00:12:39,577 --> 00:12:42,078
13 months earlier than on the previous project.

229
00:12:42,938 --> 00:12:45,919
So if you work in outsourced QA, don't despair.

230
00:12:46,139 --> 00:12:47,559
We developers do learn,

231
00:12:48,039 --> 00:12:51,240
and this is a possible thing to involve you early.

232
00:12:53,169 --> 00:13:02,716
And from the beginning we wanted to build a partnership with them rather than a client-service-provider relationship.

233
00:13:03,377 --> 00:13:07,560
So we were very open and honest in our communication and we expected the same from them,

234
00:13:08,241 --> 00:13:12,824
which was a bit difficult at first because they're based in Liverpool in the UK

235
00:13:13,244 --> 00:13:16,146
and Guerrilla is based in Amsterdam in the Netherlands.

236
00:13:16,827 --> 00:13:20,170
And well, Dutch communication culture is blunt.

237
00:13:21,913 --> 00:13:24,414
British communication culture is the opposite of that.

238
00:13:24,914 --> 00:13:30,235
So we had some challenges there, but we turned them blunt.

239
00:13:33,676 --> 00:13:36,816
We were also quite liberal with sharing information

240
00:13:36,876 --> 00:13:39,677
about the project, which made some producers nervous.

241
00:13:40,537 --> 00:13:43,038
But I felt that this was a risk worth taking,

242
00:13:43,658 --> 00:13:45,418
so it paid off.

243
00:13:48,479 --> 00:13:50,399
So this was our team structure.

244
00:13:51,017 --> 00:13:52,077
in Killzone Shadowfall.

245
00:13:54,818 --> 00:13:56,358
We have the internal QA.

246
00:13:57,319 --> 00:13:58,399
This doesn't work, whatever.

247
00:13:59,159 --> 00:14:00,860
So we have the internal QA on the top

248
00:14:01,420 --> 00:14:04,521
and the first party QA team on the bottom.

249
00:14:05,021 --> 00:14:07,782
Separate teams, single point of communication.

250
00:14:09,342 --> 00:14:13,884
So there was a lot of delay between tasks being passed on,

251
00:14:13,924 --> 00:14:16,525
requests for information, the information coming back,

252
00:14:16,965 --> 00:14:18,005
and there was a lot of pressure

253
00:14:18,045 --> 00:14:19,566
on those single points of contact.

254
00:14:19,606 --> 00:14:19,866
So we...

255
00:14:20,675 --> 00:14:22,876
one of us got sick, then yeah, that was a problem.

256
00:14:23,776 --> 00:14:26,137
So yeah, there were some potential bottlenecks there.

257
00:14:27,297 --> 00:14:31,038
And most of my time and my counterpart's time

258
00:14:31,358 --> 00:14:35,139
at First Party QA was spent managing workloads

259
00:14:35,219 --> 00:14:37,439
and databases and tasks and bugs.

260
00:14:37,939 --> 00:14:39,920
So that was not very fun.

261
00:14:42,020 --> 00:14:45,401
So we went from that to what we call buddies.

262
00:14:45,701 --> 00:14:47,642
That's our technical term for it.

263
00:14:51,655 --> 00:14:53,535
we brought the teams together.

264
00:14:54,035 --> 00:14:56,396
We pretty much created one QA team.

265
00:14:57,256 --> 00:14:59,917
We tried as much as possible to remove the barrier of location

266
00:15:01,957 --> 00:15:04,418
and we created direct lines of communications

267
00:15:04,458 --> 00:15:06,398
between the testers on each team

268
00:15:06,598 --> 00:15:08,439
so that we didn't have to waste our time

269
00:15:08,579 --> 00:15:09,999
passing information back and forth

270
00:15:10,539 --> 00:15:12,239
and communication could be more efficient.

271
00:15:12,860 --> 00:15:13,160
Yay!

272
00:15:14,300 --> 00:15:18,001
And these testers also shared their expertise with one another,

273
00:15:18,421 --> 00:15:18,881
especially...

274
00:15:19,377 --> 00:15:22,219
from the internal QA team who had all the information

275
00:15:22,259 --> 00:15:25,141
and all the knowledge about their assigned areas

276
00:15:25,361 --> 00:15:27,923
and who are talking to developers on a daily basis,

277
00:15:28,243 --> 00:15:29,304
they're talking to producers,

278
00:15:29,684 --> 00:15:32,866
they passed on the expectations of those developers

279
00:15:33,507 --> 00:15:35,568
and their own knowledge and expertise,

280
00:15:35,588 --> 00:15:39,091
they passed them on to our partners at First Party QA.

281
00:15:39,791 --> 00:15:41,973
And yeah, we removed the single points of failure.

282
00:15:42,813 --> 00:15:46,676
So then the managers and leads.

283
00:15:46,955 --> 00:15:48,436
could focus on more important things

284
00:15:48,456 --> 00:15:50,057
rather than micromanaging.

285
00:15:51,717 --> 00:15:52,818
We also shared training.

286
00:15:54,638 --> 00:15:56,619
So yeah, we became one team.

287
00:15:57,960 --> 00:15:58,160
Go.

288
00:16:00,401 --> 00:16:03,682
And yeah, remove the barrier of location.

289
00:16:03,702 --> 00:16:06,603
This means a few studio visits.

290
00:16:07,783 --> 00:16:09,604
So this is us, the two teams,

291
00:16:10,364 --> 00:16:12,965
just playing board games and going out for dinner.

292
00:16:13,606 --> 00:16:14,486
And in the lower left.

293
00:16:15,585 --> 00:16:20,567
That is the QA leadership in both teams doing three escape rooms in a day

294
00:16:20,967 --> 00:16:23,669
and expensing it as team building.

295
00:16:26,030 --> 00:16:27,550
We won all the escape rooms.

296
00:16:31,492 --> 00:16:34,894
So we built a real partnership with First Party QA

297
00:16:35,274 --> 00:16:37,235
and we collaborated on pretty much everything,

298
00:16:37,255 --> 00:16:39,496
including the strategy.

299
00:16:42,298 --> 00:16:44,979
So when we started defining our test strategy,

300
00:16:45,279 --> 00:16:47,461
we didn't know exactly what it was going to be,

301
00:16:48,401 --> 00:16:50,582
but we did have some goals for it.

302
00:16:53,004 --> 00:16:55,625
It had to be adaptable because we didn't know

303
00:16:55,645 --> 00:16:56,926
what the game exactly was going to be,

304
00:16:57,066 --> 00:17:00,387
so we had to be able to adapt at the drop of the hat,

305
00:17:01,128 --> 00:17:03,029
and there were quite a few hats being dropped.

306
00:17:03,969 --> 00:17:08,512
So we needed to be able to affect major revisions

307
00:17:08,572 --> 00:17:10,053
of our strategy throughout the project.

308
00:17:10,884 --> 00:17:13,445
requirements were changing or new things were coming in.

309
00:17:15,066 --> 00:17:21,349
We had to be scalable because we had unexpected developments

310
00:17:21,769 --> 00:17:24,490
in the project, as you might expect.

311
00:17:25,371 --> 00:17:27,952
For example, about halfway through development,

312
00:17:29,033 --> 00:17:30,933
we started doing a lot of play testing.

313
00:17:31,133 --> 00:17:32,594
We hadn't planned for this.

314
00:17:32,954 --> 00:17:34,535
We didn't know that it was going to happen.

315
00:17:34,975 --> 00:17:36,916
So this needed a lot of support from QA.

316
00:17:36,976 --> 00:17:38,957
So we needed to be able to scale up and down.

317
00:17:39,724 --> 00:17:42,846
depending on how the need for QA support was changing.

318
00:17:44,487 --> 00:17:49,709
So we basically did this by having...

319
00:17:50,950 --> 00:17:53,391
by constantly improving our training programs

320
00:17:53,511 --> 00:17:57,973
so that we could quickly bring on new people on the project

321
00:17:58,053 --> 00:18:00,335
without having to train them for two weeks first.

322
00:18:03,073 --> 00:18:10,256
And it had to be relevant to the new ways in which we were developing the game and the new workflows and pipelines that were involved.

323
00:18:11,677 --> 00:18:13,218
So we made it

324
00:18:14,298 --> 00:18:15,739
the tester's responsibility.

325
00:18:16,679 --> 00:18:19,881
The strategy was guided by their knowledge and expertise.

326
00:18:20,801 --> 00:18:21,721
It was risk-based,

327
00:18:22,762 --> 00:18:30,165
and it was focused on the things that we felt were important, things that were changing all the time, or systems that we felt

328
00:18:30,889 --> 00:18:33,670
that if they failed, it would be a really bad experience

329
00:18:33,690 --> 00:18:36,432
for the user, such as the safe load system.

330
00:18:38,373 --> 00:18:39,954
And because we had such a small team,

331
00:18:40,014 --> 00:18:41,315
we had to make it efficient.

332
00:18:42,736 --> 00:18:46,158
The relevant part is a component of that,

333
00:18:46,639 --> 00:18:48,680
because we didn't test everything all the time,

334
00:18:48,740 --> 00:18:52,442
we didn't do massive regression tests, but also tools.

335
00:18:54,944 --> 00:18:58,046
We used a lot of tools to make our testing more efficient.

336
00:18:58,719 --> 00:19:00,900
more informative, and just faster.

337
00:19:03,082 --> 00:19:05,524
And because we didn't have a lot of regression tests

338
00:19:05,564 --> 00:19:09,467
and we couldn't afford to have a lot of test cases

339
00:19:09,527 --> 00:19:12,689
and massive test plans and tons and tons of checklists,

340
00:19:14,150 --> 00:19:15,932
we focused on exploratory testing.

341
00:19:16,973 --> 00:19:22,397
So 70 to 90% of all our testing across Horizon Zero Dawn

342
00:19:22,497 --> 00:19:25,279
and its expansion to Frozen Wilds was exploratory.

343
00:19:27,990 --> 00:19:30,151
And I would like to go into a bit of detail

344
00:19:32,171 --> 00:19:35,152
with the adaptable part by way of an example.

345
00:19:36,593 --> 00:19:39,173
So, failed experiment number one.

346
00:19:41,334 --> 00:19:43,474
In the early days of defining our test strategy,

347
00:19:43,514 --> 00:19:46,155
we researched player types and personas.

348
00:19:47,215 --> 00:19:50,096
The premise was that we apply these personas to our test

349
00:19:50,896 --> 00:19:53,197
and we'll find magical new bugs

350
00:19:53,237 --> 00:19:54,517
that otherwise we wouldn't find.

351
00:19:56,654 --> 00:20:00,096
So we took the Bartle test and a few other models of player psychology

352
00:20:00,316 --> 00:20:02,657
and we built nine personas out of them.

353
00:20:02,677 --> 00:20:05,298
I think everybody's familiar with the Bartle test?

354
00:20:05,778 --> 00:20:06,039
Yes?

355
00:20:09,680 --> 00:20:11,781
So one of these personas was the hoarder.

356
00:20:12,261 --> 00:20:14,963
I think you all know the type, the player who picks up everything,

357
00:20:15,563 --> 00:20:16,964
never clears up their inventory.

358
00:20:18,664 --> 00:20:22,906
So we thought, well, if this kind of player would have to pick up a quest item,

359
00:20:23,026 --> 00:20:24,447
then there would be issues.

360
00:20:25,433 --> 00:20:28,556
If this player would be crafting something in their inventory,

361
00:20:28,656 --> 00:20:30,918
and it was full, there would be issues.

362
00:20:33,181 --> 00:20:35,043
I think you're starting to see the problem.

363
00:20:36,124 --> 00:20:38,907
We already knew where the issues were likely to be.

364
00:20:39,647 --> 00:20:43,331
So rather than spend four days or five days with a player

365
00:20:43,772 --> 00:20:46,555
assuming, with a tester assuming this persona

366
00:20:46,635 --> 00:20:48,196
and playing through the game like this.

367
00:20:49,257 --> 00:20:52,418
We could just make a task for stress test

368
00:20:52,458 --> 00:20:55,119
the inventory system that would be completed in four hours,

369
00:20:55,399 --> 00:20:56,940
which was a lot more efficient.

370
00:20:59,100 --> 00:21:01,081
And speaking of efficiency,

371
00:21:02,701 --> 00:21:04,962
I love efficiency, it's one of my favorite things.

372
00:21:08,283 --> 00:21:11,544
So I was mentioning before that we couldn't use a lot of,

373
00:21:11,804 --> 00:21:12,865
I mean, well, we could,

374
00:21:13,585 --> 00:21:15,626
but I thought there would be a better way

375
00:21:16,186 --> 00:21:18,366
than to use thousands of test cases.

376
00:21:19,510 --> 00:21:21,291
massive test plans, lots of checklists.

377
00:21:22,972 --> 00:21:27,615
So instead, we settled on a specific method of testing,

378
00:21:27,635 --> 00:21:29,436
which is called session-based testing.

379
00:21:32,078 --> 00:21:35,480
And it's a subset of exploratory testing.

380
00:21:37,342 --> 00:21:38,823
What is this magical thing?

381
00:21:40,464 --> 00:21:42,445
We borrowed it from software testing.

382
00:21:44,126 --> 00:21:47,228
And we picked it because, well, we couldn't test everything.

383
00:21:47,800 --> 00:21:51,281
we would get daily builds, sometimes two or three builds a day.

384
00:21:51,741 --> 00:21:55,362
And to test, to 100% test everything on one build,

385
00:21:55,842 --> 00:21:57,463
it would take a tester about two weeks.

386
00:21:58,163 --> 00:21:59,523
So that was not feasible.

387
00:21:59,583 --> 00:22:01,584
We had to focus our testing.

388
00:22:02,624 --> 00:22:04,565
It's a method that avoids tunnel vision.

389
00:22:05,325 --> 00:22:08,066
When you're going by checklist and you're just ticking off boxes,

390
00:22:08,766 --> 00:22:10,307
you're not really thinking about your doing.

391
00:22:10,947 --> 00:22:12,827
So instead, using this method,

392
00:22:13,167 --> 00:22:16,408
we forced testers to be more engaged with...

393
00:22:16,794 --> 00:22:18,095
with the game when they were testing.

394
00:22:21,338 --> 00:22:24,661
It leverages the specialist testers that I mentioned at the beginning.

395
00:22:25,682 --> 00:22:29,685
Because they know their area so well, they know what is likely to fail,

396
00:22:30,246 --> 00:22:31,967
they know how to make it fail,

397
00:22:31,987 --> 00:22:36,071
and they also have constant information from the developers that tells them,

398
00:22:36,191 --> 00:22:39,353
oh, I changed this, I added this, go and take a look.

399
00:22:41,375 --> 00:22:42,556
And in our experience,

400
00:22:44,719 --> 00:22:48,261
This is the method most likely to find bugs.

401
00:22:48,741 --> 00:22:49,962
And it's also very flexible.

402
00:22:50,222 --> 00:22:52,123
Doesn't need a lot of test documentation.

403
00:22:54,064 --> 00:22:56,846
So this is just an example of one of our

404
00:22:57,887 --> 00:23:01,789
session-based tasks in JIRA.

405
00:23:01,969 --> 00:23:03,230
The part at the top,

406
00:23:04,670 --> 00:23:06,772
the part at the top is the charter.

407
00:23:07,632 --> 00:23:10,814
So it is the question that we want answered through testing.

408
00:23:11,114 --> 00:23:13,355
In this case, we wanted to know if

409
00:23:15,539 --> 00:23:18,500
The resistance to electric damage is correctly removed

410
00:23:18,840 --> 00:23:21,221
for the robots listed in the charter.

411
00:23:22,401 --> 00:23:24,242
And underneath that are the results.

412
00:23:24,502 --> 00:23:26,103
This is a test that has been completed.

413
00:23:27,003 --> 00:23:33,245
The tester put the results in there so that developers can look at them.

414
00:23:34,906 --> 00:23:38,987
And at the bottom, there is a comment from the tester, which is a follow-up.

415
00:23:39,988 --> 00:23:43,050
Aside from a wrap-up and a summary of the results,

416
00:23:43,190 --> 00:23:44,091
which is pretty much,

417
00:23:44,631 --> 00:23:46,333
I tested this with this methodology,

418
00:23:46,553 --> 00:23:49,415
I didn't find any bugs related to electrical resistance,

419
00:23:50,136 --> 00:23:51,517
but I noticed this,

420
00:23:52,217 --> 00:23:54,899
and I made a follow-up task to investigate it more.

421
00:23:56,120 --> 00:23:58,202
Because, yeah, sometimes when you test,

422
00:23:58,802 --> 00:24:00,103
especially using this method,

423
00:24:01,104 --> 00:24:04,247
you don't find bugs, but you just find more questions.

424
00:24:08,089 --> 00:24:08,230
And...

425
00:24:08,905 --> 00:24:12,867
Before I give you the context for these beautifully crafted pie charts,

426
00:24:14,988 --> 00:24:17,329
I'm going to say something that might sound shocking.

427
00:24:18,829 --> 00:24:21,850
When we started defining our test strategy,

428
00:24:22,491 --> 00:24:24,752
our goal was not to find all the bugs.

429
00:24:26,292 --> 00:24:27,153
Crazy, right?

430
00:24:27,573 --> 00:24:29,574
What good are we if we don't find all the bugs?

431
00:24:31,414 --> 00:24:33,335
We only wanted to find the important bugs.

432
00:24:34,135 --> 00:24:37,177
The crashes, the performance drops, the progression blockers.

433
00:24:38,001 --> 00:24:39,582
the bugs that frustrate the player,

434
00:24:39,963 --> 00:24:42,405
make them go on the internet, leave bad reviews for the game.

435
00:24:44,406 --> 00:24:46,228
So then this is a direct comparison

436
00:24:46,308 --> 00:24:50,011
between the bugs that were logged against Kills

437
00:24:50,071 --> 00:24:53,394
on Shadowfall, the previous project, and Horizon Zero Dawn,

438
00:24:53,674 --> 00:24:55,696
plus all their expansions and patches.

439
00:24:57,517 --> 00:24:59,719
And the orange and yellow slices are

440
00:24:59,799 --> 00:25:03,422
what we call A class and B class bugs, which are

441
00:25:03,742 --> 00:25:04,963
the bugs that we wanted to find.

442
00:25:06,385 --> 00:25:09,046
the functionality bugs, the crashes, and so on.

443
00:25:10,986 --> 00:25:15,288
So I think we managed to achieve our objective

444
00:25:16,768 --> 00:25:19,429
because in Horizon we found a lot more

445
00:25:19,569 --> 00:25:22,351
of the important bugs and we didn't focus so much

446
00:25:22,531 --> 00:25:25,252
on whether this piece of debris is floating

447
00:25:25,912 --> 00:25:27,132
two millimeters off the floor.

448
00:25:29,513 --> 00:25:31,974
But QA is not just about bugs.

449
00:25:33,193 --> 00:25:35,935
We also did a whole bunch of other things

450
00:25:36,215 --> 00:25:38,757
to add quality and value to the project.

451
00:25:40,819 --> 00:25:41,880
We play tested the game.

452
00:25:42,280 --> 00:25:43,561
Like in the very early days,

453
00:25:44,562 --> 00:25:47,805
when it was too early for formal play testing

454
00:25:47,885 --> 00:25:49,106
with actual users,

455
00:25:50,427 --> 00:25:51,768
the developers would go to QA.

456
00:25:52,148 --> 00:25:54,070
Hey, play this, tell me what you think.

457
00:25:54,970 --> 00:25:56,552
And out of those play tests

458
00:25:56,652 --> 00:25:59,094
and also out of those feedback loops

459
00:25:59,134 --> 00:26:00,955
that we had established with the developers

460
00:26:01,035 --> 00:26:02,577
came a lot of qualitative feedback.

461
00:26:03,294 --> 00:26:06,315
and wasn't always taken on board or applied,

462
00:26:06,956 --> 00:26:09,718
but they were listening to us, and that's what's important.

463
00:26:10,878 --> 00:26:14,241
We did a lot of research, what we call comparative analysis

464
00:26:14,321 --> 00:26:19,164
or competitor research, where we look at already released games

465
00:26:19,764 --> 00:26:21,885
and how they implement certain features

466
00:26:21,986 --> 00:26:25,528
or how they tackle different challenges and think,

467
00:26:25,648 --> 00:26:27,089
okay, what can we learn from this?

468
00:26:28,650 --> 00:26:29,650
Are they doing it badly?

469
00:26:29,891 --> 00:26:31,231
Are they doing it well?

470
00:26:32,452 --> 00:26:35,394
Can we apply any of this to what we are developing?

471
00:26:37,375 --> 00:26:39,236
We also did QA reviews.

472
00:26:40,037 --> 00:26:42,358
This was a technique that was very useful for us

473
00:26:43,839 --> 00:26:46,841
where we got the entire QA team in one room

474
00:26:47,081 --> 00:26:51,083
and for an hour we would play a feature or a piece of content

475
00:26:51,564 --> 00:26:54,846
and everybody would weigh in with their particular point

476
00:26:54,886 --> 00:26:55,206
of view.

477
00:26:55,646 --> 00:26:59,909
And this is where those experts, those specialized testers,

478
00:27:00,549 --> 00:27:01,050
could really...

479
00:27:01,760 --> 00:27:04,921
bring their contribution and just enrich the conversation.

480
00:27:05,502 --> 00:27:08,743
And it also brought awareness of what was happening

481
00:27:08,783 --> 00:27:11,645
with other areas of the game that you were not necessarily

482
00:27:12,145 --> 00:27:15,627
working on and just the state of the project as a whole.

483
00:27:17,147 --> 00:27:19,669
And after we released, we put together

484
00:27:19,709 --> 00:27:21,129
what we called a secret team.

485
00:27:22,090 --> 00:27:24,411
So this was a small strike team of testers,

486
00:27:24,491 --> 00:27:26,692
both internally and from first party QA,

487
00:27:27,612 --> 00:27:29,413
who would just go on the internet.

488
00:27:29,920 --> 00:27:32,161
which is a very scary place after you release a game.

489
00:27:33,881 --> 00:27:36,222
And they would go on all the social media channels,

490
00:27:36,402 --> 00:27:42,583
on Reddit, on forums, on Twitch, on a whole bunch of websites.

491
00:27:43,783 --> 00:27:48,144
And they would monitor for any issues that were

492
00:27:48,204 --> 00:27:49,704
being reported by the players.

493
00:27:51,445 --> 00:27:55,525
Bugs, frustrations, things that they were confused about.

494
00:27:56,285 --> 00:27:58,486
And we worked really closely with the community team.

495
00:27:59,289 --> 00:28:03,872
to communicate back to those players if there was a workaround or to clear up their confusion,

496
00:28:03,932 --> 00:28:07,375
but we also investigated the issues that they were reporting.

497
00:28:08,175 --> 00:28:15,361
And we investigated almost 500 issues, and out of those, more than a quarter were fixed

498
00:28:16,281 --> 00:28:21,965
and released in patches. And that had an incredible positive impact,

499
00:28:22,426 --> 00:28:27,149
and we got a lot of positive feedback from players for this support track.

500
00:28:30,218 --> 00:28:32,100
So we talked about strategy and people.

501
00:28:33,661 --> 00:28:36,684
So I would like now to dive into the tools and technology

502
00:28:36,724 --> 00:28:39,046
that we used to improve our testing

503
00:28:39,106 --> 00:28:42,669
and that our QA teams used during the project.

504
00:28:43,230 --> 00:28:44,971
This might become a little technical.

505
00:28:50,616 --> 00:28:54,039
So to start with, our in-engine tools.

506
00:28:56,061 --> 00:28:57,062
We have about...

507
00:28:58,969 --> 00:29:02,291
250, 260 debug draw modes and windows

508
00:29:02,852 --> 00:29:04,393
that are accessible in-game.

509
00:29:05,133 --> 00:29:07,735
So from a build of the game, you launch it,

510
00:29:08,155 --> 00:29:10,696
you can get, well, not you, but us.

511
00:29:12,257 --> 00:29:15,539
You can get access to these debug views and debug windows

512
00:29:16,900 --> 00:29:19,282
that are very informative for both the testers

513
00:29:20,322 --> 00:29:21,283
and for the developers.

514
00:29:22,124 --> 00:29:23,785
So what these debug views do,

515
00:29:25,346 --> 00:29:26,866
they show either raw data.

516
00:29:27,970 --> 00:29:30,572
or they show visualization of information

517
00:29:31,033 --> 00:29:33,355
that is not available to the end user.

518
00:29:35,056 --> 00:29:37,678
So they expose the inner workings of the game,

519
00:29:38,058 --> 00:29:40,380
which helped our testers better understand

520
00:29:40,820 --> 00:29:42,261
all these features and content,

521
00:29:43,102 --> 00:29:46,405
but it was also very helpful for developers

522
00:29:46,525 --> 00:29:48,466
when they got a bug with a video attached

523
00:29:48,926 --> 00:29:51,428
that had a number of debug views turned on

524
00:29:51,849 --> 00:29:53,410
that showed them exactly what was going on,

525
00:29:53,430 --> 00:29:56,272
they could go, oh, yeah, I see what's happening,

526
00:29:56,372 --> 00:29:57,053
I'm gonna fix this.

527
00:29:57,762 --> 00:30:00,524
So that was a huge time saver for developers as well.

528
00:30:02,625 --> 00:30:04,265
And with debug tools,

529
00:30:07,027 --> 00:30:10,208
we were able to change what the game was doing,

530
00:30:10,328 --> 00:30:11,389
affect the game state,

531
00:30:12,049 --> 00:30:13,050
spawn a robot,

532
00:30:14,671 --> 00:30:16,632
guard mode, and so on.

533
00:30:17,372 --> 00:30:19,033
So that sped up our testing

534
00:30:19,253 --> 00:30:22,855
and we were able to just finish our tasks faster.

535
00:30:25,403 --> 00:30:30,685
So I'm just going to give a brief demo of how this works.

536
00:30:34,366 --> 00:30:37,747
Some examples of our debug views.

537
00:30:38,607 --> 00:30:40,127
So this is a view of the nav mesh,

538
00:30:40,827 --> 00:30:43,368
which shows where entities, such as robots,

539
00:30:44,008 --> 00:30:47,129
might walk, are allowed to walk.

540
00:30:48,549 --> 00:30:51,290
And this next view shows where they are likely to walk

541
00:30:51,630 --> 00:30:53,010
based on their behavior.

542
00:30:54,346 --> 00:30:57,747
and any scripting that might have been added to that.

543
00:31:00,088 --> 00:31:06,390
And since we, I mean, robots and machines were such a crucial part of the game,

544
00:31:06,650 --> 00:31:08,890
we had a lot of tools to help us test them.

545
00:31:09,510 --> 00:31:13,552
So this is a visualization of their visual perception cone.

546
00:31:14,632 --> 00:31:19,913
So we could use this to test if the player was being correctly detected by entities.

547
00:31:25,802 --> 00:31:28,745
So we had a lot of tools to test robots.

548
00:31:30,726 --> 00:31:35,990
This next one is a visualization of the animation frame.

549
00:31:36,611 --> 00:31:38,632
So we could check for animation issues.

550
00:31:40,294 --> 00:31:42,075
We could trigger specific attacks,

551
00:31:43,216 --> 00:31:47,759
which is useful when one robot can have up to 10.

552
00:31:49,381 --> 00:31:52,563
And then you don't want to wait until they naturally occur.

553
00:31:52,583 --> 00:31:54,485
You can just trigger them.

554
00:31:56,025 --> 00:32:00,829
And we also had tools that helped us direct the entities

555
00:32:00,889 --> 00:32:02,089
where we needed them to be.

556
00:32:03,450 --> 00:32:06,332
For example, the tester is just now ordering this robot

557
00:32:06,472 --> 00:32:07,853
to go to a specific spot.

558
00:32:10,635 --> 00:32:15,098
And we also had tools that were very helpful

559
00:32:15,118 --> 00:32:18,260
when we're testing performance and visual.

560
00:32:19,401 --> 00:32:20,902
We can change the time of day

561
00:32:20,922 --> 00:32:23,483
and go with it back and forth.

562
00:32:24,932 --> 00:32:27,374
which yeah, helps a lot, it's a great time saver.

563
00:32:35,239 --> 00:32:37,660
Speaking of time saver, this was a huge one for us.

564
00:32:38,701 --> 00:32:39,942
This is a collision viewer.

565
00:32:41,102 --> 00:32:43,044
So you can tell at a glance

566
00:32:43,204 --> 00:32:44,605
where there is invisible collision,

567
00:32:46,105 --> 00:32:47,326
or where a collision is missing,

568
00:32:47,626 --> 00:32:50,828
or where there is mismatch between the collision hole

569
00:32:50,968 --> 00:32:51,729
and the visual model.

570
00:32:52,816 --> 00:32:55,158
So if anybody has done collision testing,

571
00:32:55,338 --> 00:32:58,361
you know just how boring and time-consuming it is.

572
00:32:59,041 --> 00:33:01,584
So this was a great help to us.

573
00:33:05,847 --> 00:33:07,689
We also had a bunch of external tools.

574
00:33:09,430 --> 00:33:11,793
If anybody has been in the poster session

575
00:33:11,953 --> 00:33:13,574
that ran just before this talk,

576
00:33:14,095 --> 00:33:15,876
you might have seen the interactive bug map.

577
00:33:16,617 --> 00:33:19,880
If not, I'll go into a bit of detail about it later.

578
00:33:21,460 --> 00:33:26,343
We also had the game editor, Decimo Ad,

579
00:33:26,443 --> 00:33:29,704
which allowed our testers to do some in-depth debugging

580
00:33:29,965 --> 00:33:35,147
of things like animation networks, scripts for quests,

581
00:33:35,307 --> 00:33:37,749
and it saved our bacon quite a few times.

582
00:33:39,189 --> 00:33:42,731
We also collected a lot of data from the game,

583
00:33:43,531 --> 00:33:46,453
telemetry, game analytics, same thing.

584
00:33:48,394 --> 00:33:50,775
And this was a key part of localization QA.

585
00:33:52,581 --> 00:33:56,362
we have a very high number of dialogue lines

586
00:33:56,402 --> 00:33:59,683
that are spoken by NPCs and they are triggered contextually,

587
00:34:00,363 --> 00:34:03,504
depending on the weather, the location,

588
00:34:03,644 --> 00:34:06,085
which point in the main quest you are,

589
00:34:06,525 --> 00:34:08,586
what the main character is wearing.

590
00:34:08,606 --> 00:34:13,067
So all these are triggers for which line

591
00:34:13,087 --> 00:34:14,827
the NPCs will speak.

592
00:34:15,748 --> 00:34:20,189
And to have the localization testers trigger these in game,

593
00:34:20,529 --> 00:34:22,290
it would have been unfeasible.

594
00:34:22,857 --> 00:34:26,778
So instead, we had them just play through a game naturally,

595
00:34:27,058 --> 00:34:30,419
and we used data analytics, sorry, game analytics,

596
00:34:30,959 --> 00:34:33,940
to track which of these lines were triggered,

597
00:34:33,960 --> 00:34:39,742
and one, to give us test coverage data,

598
00:34:40,342 --> 00:34:42,343
how many of these lines have been triggered,

599
00:34:42,723 --> 00:34:43,903
how many do we still have to go,

600
00:34:44,523 --> 00:34:47,344
and also which lines never triggered.

601
00:34:48,145 --> 00:34:50,245
So then we were able to find a few bugs there.

602
00:34:50,901 --> 00:34:53,863
because some of the lines were not set up properly

603
00:34:53,963 --> 00:34:54,983
and they would never trigger.

604
00:34:59,006 --> 00:35:00,667
So I will show you a little bit now

605
00:35:00,827 --> 00:35:03,248
how the interactive bug map works.

606
00:35:03,508 --> 00:35:05,630
This was a tool that was developed for us

607
00:35:05,810 --> 00:35:08,912
by the engineers at Sony First Party QA.

608
00:35:09,952 --> 00:35:13,074
So this is the actual map as it appears in game.

609
00:35:14,555 --> 00:35:15,936
We have a JIRA integration,

610
00:35:16,896 --> 00:35:18,517
which allowed us to populate.

611
00:35:18,967 --> 00:35:22,650
the map with bugs as they were located in the world.

612
00:35:23,991 --> 00:35:27,533
We could also preview any attachments

613
00:35:27,593 --> 00:35:29,114
like screenshots or videos,

614
00:35:29,734 --> 00:35:32,396
or we could just click on the bug and go to Jira

615
00:35:32,736 --> 00:35:33,777
and see the details there.

616
00:35:37,179 --> 00:35:39,741
And on the left, there is a pretty comprehensive

617
00:35:39,761 --> 00:35:43,723
filtering system that uses a lot of our Jira custom fields

618
00:35:44,004 --> 00:35:45,565
plus other parameters.

619
00:35:46,163 --> 00:35:48,905
to really drill down into the bug distribution.

620
00:35:49,225 --> 00:35:52,467
And that was very helpful for producers and also for artists

621
00:35:53,388 --> 00:35:56,409
who could just go into an area and see, oh, art bugs.

622
00:35:56,830 --> 00:36:02,353
OK, I'm just going to get them, fix them, and I'll be done.

623
00:36:03,713 --> 00:36:07,496
We can also get positioning data from testers and from players

624
00:36:08,276 --> 00:36:13,279
and filter it by PSN ID to track both test coverage and also

625
00:36:13,359 --> 00:36:15,700
the journey of our play testers to the world.

626
00:36:21,523 --> 00:36:26,545
So using this tool, we were able to find some areas

627
00:36:26,565 --> 00:36:28,525
that were not being explored as much.

628
00:36:32,867 --> 00:36:36,688
So yeah, the journey of the players is here color-coded.

629
00:36:40,069 --> 00:36:41,890
So I mentioned that we were able to find

630
00:36:42,250 --> 00:36:43,450
some problems with this tool.

631
00:36:44,130 --> 00:36:47,512
One of these problems was that there were several areas

632
00:36:47,572 --> 00:36:49,352
in the game that were not visited

633
00:36:49,432 --> 00:36:51,233
by either players or testers.

634
00:36:53,200 --> 00:36:54,741
So we wondered what was going on.

635
00:36:55,201 --> 00:36:57,363
We went and started digging.

636
00:36:58,403 --> 00:37:00,264
And we discovered that the detection range

637
00:37:00,404 --> 00:37:02,765
on the compass was too short.

638
00:37:03,526 --> 00:37:06,927
It wasn't that there was no content in those areas.

639
00:37:08,388 --> 00:37:11,850
The players and the testers were just not discovering it.

640
00:37:12,010 --> 00:37:13,571
So they would enter the area,

641
00:37:14,051 --> 00:37:16,973
they would look on their compass, nothing there.

642
00:37:17,653 --> 00:37:19,494
So they were like, I'm not just gonna spend my time here.

643
00:37:20,981 --> 00:37:29,068
So then we went in, we fixed that problem, and then we used, again, game data to validate

644
00:37:29,628 --> 00:37:31,369
that our fix was working.

645
00:37:33,611 --> 00:37:41,097
And these are some examples of exploratory session-based charters that we derived for

646
00:37:41,157 --> 00:37:42,918
that task.

647
00:37:44,560 --> 00:37:47,942
So this tool led us to find issues that otherwise might have been missed.

648
00:37:50,657 --> 00:37:53,418
Now I would like to talk a little bit about test automation.

649
00:37:54,438 --> 00:37:56,459
Again, this was covered in the posture sessions,

650
00:37:56,599 --> 00:37:57,940
but if you missed them,

651
00:37:59,040 --> 00:38:01,261
I will very briefly explain how it works.

652
00:38:03,522 --> 00:38:06,824
So, the engineers at First Party QA

653
00:38:06,864 --> 00:38:09,145
developed the framework for us.

654
00:38:10,486 --> 00:38:13,187
We did a lot of exploration into automation testing

655
00:38:13,227 --> 00:38:15,348
because we're thinking, well, we have a small team,

656
00:38:15,848 --> 00:38:16,528
let's automate.

657
00:38:18,031 --> 00:38:20,853
But because this was our first open world game,

658
00:38:21,154 --> 00:38:25,217
we had no pre-existing network, framework for automation.

659
00:38:25,778 --> 00:38:29,281
And we figured that creating and maintaining scripts,

660
00:38:29,661 --> 00:38:31,122
especially complex scripts,

661
00:38:31,943 --> 00:38:35,566
if we want to automate the player moving to the main quest,

662
00:38:37,227 --> 00:38:39,669
one that was extremely time consuming

663
00:38:39,850 --> 00:38:41,971
and it required resources that we didn't have.

664
00:38:42,332 --> 00:38:46,455
We didn't have people who could spend their entire time.

665
00:38:47,700 --> 00:38:49,401
writing and maintaining these scripts.

666
00:38:51,002 --> 00:38:52,343
So the solution we settled on

667
00:38:54,804 --> 00:38:59,907
are AI driven bots who just go to the world and perform simple actions.

668
00:39:05,210 --> 00:39:11,293
So yeah, the framework just gets information from the game about the world over the network and

669
00:39:11,653 --> 00:39:13,154
makes weighted decisions

670
00:39:14,054 --> 00:39:15,575
about which actions to carry out.

671
00:39:16,061 --> 00:39:18,383
If there are robots in the area, it will kill them.

672
00:39:19,664 --> 00:39:20,425
It will loot them.

673
00:39:20,685 --> 00:39:23,127
If there are no robots, it will just go for collectibles,

674
00:39:23,187 --> 00:39:23,648
pick them up.

675
00:39:24,469 --> 00:39:28,132
And we had 20 of these running 24-7,

676
00:39:28,893 --> 00:39:32,756
which greatly increased our coverage in the game world

677
00:39:33,377 --> 00:39:35,759
and allowed us to find quite a lot of errors

678
00:39:36,920 --> 00:39:40,543
in either content set up or code that we could fix.

679
00:39:43,205 --> 00:39:43,706
And also,

680
00:39:44,350 --> 00:39:47,452
this bot generates a lot of game analytics data.

681
00:39:51,416 --> 00:39:53,417
And now for the takeaway points.

682
00:39:55,179 --> 00:39:56,760
I'm hoping, I'm really hoping

683
00:39:56,780 --> 00:39:57,921
that you learned something from it,

684
00:39:58,502 --> 00:40:01,664
from this talk, and that you can take home

685
00:40:01,944 --> 00:40:04,927
some tips and some lessons.

686
00:40:07,129 --> 00:40:10,471
So let's start with the test team, the people.

687
00:40:12,677 --> 00:40:15,898
We found that trust was essential.

688
00:40:18,039 --> 00:40:21,361
And trust and communication and collaboration,

689
00:40:21,421 --> 00:40:23,362
these go hand in hand, it's a circle.

690
00:40:23,382 --> 00:40:25,463
You just cannot have one without the other.

691
00:40:26,603 --> 00:40:29,605
We started building trust between the QA team

692
00:40:29,625 --> 00:40:31,786
and the development team, the production team,

693
00:40:32,946 --> 00:40:33,907
by communicating.

694
00:40:34,967 --> 00:40:36,808
So, yeah.

695
00:40:37,469 --> 00:40:40,070
Communication, keep it personal whenever you can,

696
00:40:40,170 --> 00:40:41,851
face to face, have your testers.

697
00:40:42,977 --> 00:40:46,798
walk to the developers and talk to them, get them to know as people.

698
00:40:48,299 --> 00:40:53,762
If that's not possible, if your test team is overseas or distributed,

699
00:40:55,662 --> 00:41:01,585
Skype calls or conference calls or try to remove that barrier of location

700
00:41:01,705 --> 00:41:03,366
and to put faces to names.

701
00:41:06,427 --> 00:41:08,808
Shorten and widen your communication lines,

702
00:41:08,888 --> 00:41:11,450
have people talk to each other directly, chat rooms.

703
00:41:12,698 --> 00:41:22,080
whatever works. Be transparent and demand transparency from the development team. Ask

704
00:41:22,100 --> 00:41:30,821
them, what are you doing? Why are you doing this? How does this work? Empower them. Give

705
00:41:30,841 --> 00:41:34,502
them something to do that is theirs. It's their responsibility. They're accountable

706
00:41:34,562 --> 00:41:38,863
for it. They will feel empowered.

707
00:41:40,764 --> 00:41:42,765
and they will feel that they have ownership of it.

708
00:41:45,427 --> 00:41:47,568
Yeah, keep them learning, keep them growing.

709
00:41:49,609 --> 00:41:51,370
Learn about the project, learn about the game,

710
00:41:51,490 --> 00:41:55,392
learn about how an animator is doing their work,

711
00:41:56,472 --> 00:41:58,253
how a sound designer is doing their work.

712
00:41:58,633 --> 00:42:01,075
What does this mean for my work as a tester?

713
00:42:04,176 --> 00:42:06,738
These points may seem super generic

714
00:42:06,978 --> 00:42:09,299
and obvious and everything.

715
00:42:09,918 --> 00:42:13,320
But remember that historically QA has been separate

716
00:42:13,360 --> 00:42:14,521
from the development team.

717
00:42:15,782 --> 00:42:18,103
And only recently that has started to change.

718
00:42:20,845 --> 00:42:23,587
And yeah, remember that QA can bring value

719
00:42:23,627 --> 00:42:24,888
beyond finding bugs.

720
00:42:27,070 --> 00:42:29,912
So showcase that value to your developers

721
00:42:30,192 --> 00:42:32,934
and start getting them to come to you

722
00:42:33,094 --> 00:42:36,236
and ask for feedback, your opinion,

723
00:42:36,996 --> 00:42:37,977
can you help me with this?

724
00:42:41,241 --> 00:42:45,242
In terms of test strategy, efficiency.

725
00:42:48,963 --> 00:42:51,383
This is part of both processes and tools.

726
00:42:53,084 --> 00:42:56,384
In terms of processes, focus on what's important.

727
00:42:57,245 --> 00:43:00,625
You don't have to test everything all the time.

728
00:43:01,145 --> 00:43:01,906
Really, you don't.

729
00:43:02,566 --> 00:43:05,106
I know that some producers or other people

730
00:43:05,867 --> 00:43:07,427
like to do that because it feels safe.

731
00:43:09,785 --> 00:43:12,205
And yes, coverage, all the coverage.

732
00:43:13,826 --> 00:43:18,307
But especially with open world games, this is not possible.

733
00:43:19,127 --> 00:43:19,988
It's just not feasible.

734
00:43:21,148 --> 00:43:22,868
So instead, focus on what matters.

735
00:43:23,629 --> 00:43:24,449
What are your risks?

736
00:43:25,429 --> 00:43:27,430
What are areas that are being changed all the time?

737
00:43:28,550 --> 00:43:31,111
What are areas that have historically failed?

738
00:43:33,451 --> 00:43:35,852
Ask your developers, what are they worried about?

739
00:43:36,892 --> 00:43:39,033
What are your fragile systems?

740
00:43:39,524 --> 00:43:40,845
What are your weak spots?

741
00:43:44,367 --> 00:43:45,148
So yeah, focus.

742
00:43:47,570 --> 00:43:48,850
Timebox your testing.

743
00:43:52,413 --> 00:43:54,754
And use exploratory testing, it's very useful.

744
00:43:55,695 --> 00:43:59,237
It will leverage the tester's experience,

745
00:43:59,618 --> 00:44:01,039
their knowledge about the project,

746
00:44:02,339 --> 00:44:05,642
and it will just find bugs that you otherwise wouldn't find.

747
00:44:05,662 --> 00:44:09,024
And yeah.

748
00:44:10,013 --> 00:44:11,334
improve all the time.

749
00:44:11,554 --> 00:44:13,916
Look at what you're doing and ask yourself,

750
00:44:14,856 --> 00:44:15,797
why are we doing this?

751
00:44:15,957 --> 00:44:17,298
Why are we doing this this way?

752
00:44:17,318 --> 00:44:19,239
Is there a better way we could be doing?

753
00:44:19,319 --> 00:44:21,881
Is there a faster way, a cheaper way?

754
00:44:23,562 --> 00:44:26,184
What could our testers best spend their time on?

755
00:44:29,826 --> 00:44:34,270
And speaking of testers, help them with tools.

756
00:44:34,910 --> 00:44:35,530
Support them.

757
00:44:37,592 --> 00:44:37,892
Tools.

758
00:44:38,467 --> 00:44:40,448
can increase understanding about the project,

759
00:44:40,908 --> 00:44:43,068
can make things more informative for developers

760
00:44:43,188 --> 00:44:44,449
and save time for them,

761
00:44:45,069 --> 00:44:47,089
which will make them love your testers.

762
00:44:48,890 --> 00:44:50,450
They can increase efficiency.

763
00:44:50,470 --> 00:44:56,051
And yes, data.

764
00:44:56,852 --> 00:44:59,292
Look at data, but look at it in context.

765
00:45:00,532 --> 00:45:03,373
Track things such as what kind of bugs you're finding,

766
00:45:04,153 --> 00:45:05,774
what are your testers doing in the world,

767
00:45:05,874 --> 00:45:07,594
how are they interacting with it.

768
00:45:09,241 --> 00:45:10,021
Is that useful?

769
00:45:11,542 --> 00:45:11,822
Not.

770
00:45:12,563 --> 00:45:13,463
If not, change it.

771
00:45:15,684 --> 00:45:18,145
And these approaches are not perfect.

772
00:45:19,686 --> 00:45:22,287
I'm going to go through some potential downsides

773
00:45:22,968 --> 00:45:24,729
and how you can help mitigate them

774
00:45:26,509 --> 00:45:28,170
regarding this specific approach.

775
00:45:30,331 --> 00:45:32,192
Expert testers mean siloing.

776
00:45:32,572 --> 00:45:33,753
There's just no way around it.

777
00:45:34,233 --> 00:45:35,354
But you can mitigate it.

778
00:45:36,234 --> 00:45:38,475
One way we did it was with the QA reviews.

779
00:45:39,242 --> 00:45:43,363
So those reviews, getting the entire QA team in one room,

780
00:45:43,783 --> 00:45:45,824
getting them talking about what they're working on,

781
00:45:46,324 --> 00:45:47,605
and getting them to weigh in

782
00:45:48,025 --> 00:45:51,846
with their specific point of view, that really helped.

783
00:45:54,207 --> 00:45:56,428
It increased awareness of what was going on

784
00:45:56,508 --> 00:45:58,809
in other areas of the title,

785
00:45:59,309 --> 00:46:01,210
what other team members were working on.

786
00:46:02,731 --> 00:46:04,671
And it also increased collaboration

787
00:46:04,731 --> 00:46:05,492
because they were looking,

788
00:46:05,872 --> 00:46:08,073
oh, actually, this feature that you just showed,

789
00:46:08,908 --> 00:46:11,030
It kind of touches on my area,

790
00:46:11,110 --> 00:46:13,111
so maybe I can help you come up with some,

791
00:46:13,872 --> 00:46:15,933
you know, exploratory test cases for it.

792
00:46:18,215 --> 00:46:20,117
Tools are great and amazing,

793
00:46:21,157 --> 00:46:22,639
but if you don't use them correctly,

794
00:46:22,679 --> 00:46:25,121
they can cause more problems than they help.

795
00:46:26,542 --> 00:46:28,083
And we had this a few times,

796
00:46:28,183 --> 00:46:32,246
where testers would become a bit too reliant on tools,

797
00:46:33,027 --> 00:46:35,809
and they would use them as they were not meant to be used.

798
00:46:36,962 --> 00:46:39,204
And then we created bugs that were not really bugs,

799
00:46:39,284 --> 00:46:40,806
just incorrect use of the tools.

800
00:46:41,867 --> 00:46:44,709
So to mitigate that, talk to the developers,

801
00:46:45,330 --> 00:46:48,793
get their perspective on how a tool is meant to be used.

802
00:46:50,414 --> 00:46:53,037
If that goal doesn't align with what you want to do,

803
00:46:53,577 --> 00:46:55,899
maybe they can change it or make a new tool

804
00:46:56,119 --> 00:46:57,501
that is better suited to your needs.

805
00:46:58,121 --> 00:47:00,824
And educate your testers, create documentation,

806
00:47:00,944 --> 00:47:02,465
training guides on.

807
00:47:03,356 --> 00:47:06,457
when to use the tools, how to use them, why,

808
00:47:06,477 --> 00:47:09,918
and just get them to understand

809
00:47:10,419 --> 00:47:13,920
what is the intention behind using these tools.

810
00:47:17,381 --> 00:47:20,562
Recruitment is going to be a bit more difficult

811
00:47:21,162 --> 00:47:25,544
because finding the people who can become experts

812
00:47:25,584 --> 00:47:27,905
in an area, who are self-starters,

813
00:47:28,245 --> 00:47:29,505
who can work autonomously.

814
00:47:30,053 --> 00:47:33,415
who have the people skills to create those essential connections

815
00:47:33,455 --> 00:47:35,496
with the development team and the production team.

816
00:47:36,837 --> 00:47:39,218
Those people are difficult to find,

817
00:47:40,199 --> 00:47:42,940
and a lot of those skills are soft skills

818
00:47:43,340 --> 00:47:47,542
that are not necessarily apparent in an interview or on a resume.

819
00:47:48,523 --> 00:47:50,584
So I don't know how to fix that.

820
00:47:50,744 --> 00:47:52,805
If you find a way, tell me.

821
00:47:53,205 --> 00:47:54,086
We're still working on it.

822
00:47:56,095 --> 00:47:58,356
And once you get the people, you will have to train them,

823
00:47:58,496 --> 00:48:01,737
and not just for the first two weeks or the first month.

824
00:48:02,257 --> 00:48:04,398
You will need to keep them learning,

825
00:48:04,558 --> 00:48:08,880
make sure that they have the most relevant information

826
00:48:08,920 --> 00:48:10,180
that they need to do their job.

827
00:48:11,081 --> 00:48:12,841
Give them new areas to own.

828
00:48:14,342 --> 00:48:16,503
Specialize them in new and interesting ways.

829
00:48:17,143 --> 00:48:19,664
Doesn't have to be areas of the game.

830
00:48:19,764 --> 00:48:22,965
It could be things like user research.

831
00:48:23,165 --> 00:48:25,426
There's a lot of overlap between that and QA.

832
00:48:26,610 --> 00:48:29,612
or accessibility, again, a lot of overlap.

833
00:48:30,053 --> 00:48:32,915
Anything that you can think of that,

834
00:48:33,035 --> 00:48:35,677
hey, this would really increase quality in our project,

835
00:48:36,078 --> 00:48:37,599
your QA could help with that.

836
00:48:37,839 --> 00:48:39,641
So empower them to do that.

837
00:48:42,443 --> 00:48:45,345
So, coming to the end of my talk.

838
00:48:48,948 --> 00:48:51,670
At the beginning, I mentioned that when we started,

839
00:48:51,730 --> 00:48:53,752
we had no idea of the scope of the project.

840
00:48:54,413 --> 00:48:56,094
I'm looking at hindsight.

841
00:48:56,567 --> 00:48:57,648
Now we have some numbers.

842
00:48:59,849 --> 00:49:03,532
So it feels pretty good to look back on what we've done

843
00:49:03,712 --> 00:49:07,114
and the results we've achieved, despite the challenges.

844
00:49:09,456 --> 00:49:13,138
And if you take anything out of this talk, it's this.

845
00:49:14,839 --> 00:49:18,321
This is the summary of the entire thing.

846
00:49:19,082 --> 00:49:19,822
This is what we did.

847
00:49:20,683 --> 00:49:23,045
Open communication, collaboration.

848
00:49:23,882 --> 00:49:28,063
Focus on efficiency, expertise, and just be flexible.

849
00:49:30,023 --> 00:49:32,644
And I think a testament of our success

850
00:49:33,744 --> 00:49:35,744
is just the very positive reception

851
00:49:35,784 --> 00:49:39,245
that we've had from players, from peers, from the press.

852
00:49:40,466 --> 00:49:42,146
I cannot count the number of times

853
00:49:42,166 --> 00:49:44,066
I have read or heard the phrase,

854
00:49:45,047 --> 00:49:48,567
I've platinumed Horizon Zero Dawn and never noticed a bug.

855
00:49:51,348 --> 00:49:52,408
Mission accomplished.

856
00:50:04,264 --> 00:50:05,685
So we have some time for questions.

857
00:50:07,866 --> 00:50:10,448
I noticed you said you gave yourselves a lot of autonomy,

858
00:50:10,528 --> 00:50:12,129
so I assume you can make separate decisions

859
00:50:12,149 --> 00:50:13,010
than the development team.

860
00:50:13,390 --> 00:50:14,351
And one of the things you mentioned

861
00:50:14,371 --> 00:50:15,552
that came up as a problem with that

862
00:50:15,612 --> 00:50:17,793
was setting up certain play tests.

863
00:50:18,253 --> 00:50:19,895
Were there ever times that QA could

864
00:50:19,975 --> 00:50:23,297
deny certain requests from development in that regard,

865
00:50:23,337 --> 00:50:25,679
like say, hey, we want you to perf test this next week.

866
00:50:25,699 --> 00:50:28,000
Could you say, no, we have a focus that we're working on?

867
00:50:28,461 --> 00:50:31,243
Was it that level of autonomy, or was it separate from that?

868
00:50:32,090 --> 00:50:40,013
No, we, um, so the question was, um, about, uh, playtesting and if QA was able to say,

869
00:50:40,173 --> 00:50:42,774
oh no, this is not ready for playtesting. Am I understanding correctly?

870
00:50:42,994 --> 00:50:45,715
Yeah, and sort of could development guide you more than you wanted to?

871
00:50:47,316 --> 00:50:53,518
So we understood, um, the importance of playtesting. The frequency of playtesting was

872
00:50:53,658 --> 00:51:00,261
really crucial in iterating, uh, and improving the game. So we supported that process as much as we

873
00:51:00,341 --> 00:51:00,541
could.

874
00:51:01,717 --> 00:51:06,299
We had several metrics that we were tracking to figure out if something was ready

875
00:51:06,699 --> 00:51:10,461
for playtesting or not, like the number of critical bugs that were not solved.

876
00:51:11,241 --> 00:51:17,885
And just qualitative feedback from the specialist tester on that area who would say,

877
00:51:18,505 --> 00:51:20,666
well, we have all these progression blockers

878
00:51:20,986 --> 00:51:25,348
or actually we have all these problems that were not solved.

879
00:51:26,109 --> 00:51:29,610
But then instead of us saying, no, this is not ready.

880
00:51:30,357 --> 00:51:32,518
we gave them the information of,

881
00:51:33,318 --> 00:51:36,059
you have all these problems, fix them,

882
00:51:36,940 --> 00:51:37,900
and then you'll be ready.

883
00:51:38,320 --> 00:51:41,722
So then they knew exactly which parts to focus on,

884
00:51:42,442 --> 00:51:45,064
which bugs to fix, which bugs to prioritize,

885
00:51:45,904 --> 00:51:47,145
and then they would make a new build,

886
00:51:47,485 --> 00:51:49,906
we would validate that, and then we were ready to go.

887
00:51:50,286 --> 00:51:53,808
I don't think we have ever had to postpone a play test

888
00:51:54,268 --> 00:51:56,909
because the quality of the build was not good enough.

889
00:51:56,929 --> 00:51:58,050
Thank you.

890
00:52:00,113 --> 00:52:03,035
Hi, I missed your poster session and now I really care about it.

891
00:52:03,575 --> 00:52:04,515
Where can I get more info?

892
00:52:04,996 --> 00:52:07,057
Or can I get it somewhere else?

893
00:52:07,917 --> 00:52:09,898
Well, the speaker for the poster session

894
00:52:09,918 --> 00:52:12,299
is sitting in the back, Gareth Tynan.

895
00:52:12,799 --> 00:52:13,780
So you can talk to him.

896
00:52:13,880 --> 00:52:15,180
He has all the information.

897
00:52:15,200 --> 00:52:16,321
His team developed them.

898
00:52:18,562 --> 00:52:21,243
You described a system of AI bots roaming the world

899
00:52:21,283 --> 00:52:22,303
and just playing the game.

900
00:52:23,347 --> 00:52:30,130
Besides the obvious crashes and performance problems, what other bugs did you find this way and how did you detect them?

901
00:52:31,511 --> 00:52:33,271
So the bots because they had

902
00:52:34,252 --> 00:52:42,356
Sorry, the question was what kind of issues other than the crashes and the performance issues were uncovered by the AI driven bots

903
00:52:44,657 --> 00:52:49,199
They uncovered a lot of asserts and alerts which were caused by either

904
00:52:50,370 --> 00:52:54,634
issues in the code that were not severe enough to become crashes yet,

905
00:52:56,175 --> 00:53:00,238
or content that was incorrectly set up and could cause problems later.

906
00:53:00,719 --> 00:53:06,203
So we uncovered a lot of those issues, and then our development team was

907
00:53:07,384 --> 00:53:12,028
able to look at them, analyze them, fix them in some cases where they were bad enough.

908
00:53:12,628 --> 00:53:15,751
Okay, thank you.

909
00:53:16,895 --> 00:53:18,597
Did you have a different test strategy

910
00:53:18,997 --> 00:53:20,819
between your internal test team

911
00:53:21,079 --> 00:53:23,821
and the Sony first party QA team?

912
00:53:24,262 --> 00:53:25,403
And then the second question is,

913
00:53:25,643 --> 00:53:27,785
would you have done anything differently moving forward

914
00:53:28,245 --> 00:53:29,646
having a remote test team?

915
00:53:30,647 --> 00:53:31,167
Good questions.

916
00:53:32,028 --> 00:53:34,250
So did we have a different strategy

917
00:53:34,270 --> 00:53:38,494
between the internal QA team and the Sony first party team?

918
00:53:39,134 --> 00:53:40,876
And would I do anything differently?

919
00:53:42,557 --> 00:53:43,718
To answer your first question,

920
00:53:44,853 --> 00:53:47,895
For the most part, our strategies were the same.

921
00:53:49,576 --> 00:53:53,278
We started with some divergences and some differences,

922
00:53:53,838 --> 00:53:55,759
but as the project progressed,

923
00:53:55,959 --> 00:53:58,981
we pretty much aligned those strategies

924
00:53:59,361 --> 00:54:02,822
to make the most of our resources,

925
00:54:02,922 --> 00:54:05,564
to minimize work duplication

926
00:54:05,884 --> 00:54:08,025
and people working on the same area,

927
00:54:08,565 --> 00:54:09,886
just doing the same thing.

928
00:54:10,106 --> 00:54:11,387
That was a waste of time.

929
00:54:12,832 --> 00:54:15,654
So with constant communication, it was a process.

930
00:54:15,974 --> 00:54:18,016
It took some time to get to the level

931
00:54:18,076 --> 00:54:20,337
where testers would just talk to each other

932
00:54:20,357 --> 00:54:22,859
and collaborate and figure out exactly what,

933
00:54:23,239 --> 00:54:24,320
who needed to do what.

934
00:54:26,361 --> 00:54:29,383
But yeah, towards the end of Horizon Zero Dawn,

935
00:54:29,443 --> 00:54:32,785
and especially through development of the Frozen Wilds,

936
00:54:33,346 --> 00:54:35,247
we were pretty much aligned on everything.

937
00:54:36,748 --> 00:54:39,390
And would I do something different looking back?

938
00:54:40,767 --> 00:54:44,229
I would get a slightly larger internal team

939
00:54:45,189 --> 00:54:48,611
when we are closer to milestones like alpha or beta

940
00:54:49,152 --> 00:54:54,555
because our workload around those times increased so much

941
00:54:55,756 --> 00:55:00,038
that we couldn't cover it with just the internal QA team.

942
00:55:02,272 --> 00:55:06,074
And those were some tasks that had to be done by the QA team

943
00:55:06,094 --> 00:55:08,175
because they required a lot of communication

944
00:55:08,235 --> 00:55:10,657
with development and production.

945
00:55:11,097 --> 00:55:13,639
So then, yeah, I would get a slightly bigger,

946
00:55:13,979 --> 00:55:15,320
maybe like 10 people.

947
00:55:15,820 --> 00:55:17,881
I think that would be the magic number

948
00:55:18,002 --> 00:55:20,243
for the project that we did.

949
00:55:21,023 --> 00:55:21,824
Cool, thank you so much.

950
00:55:23,268 --> 00:55:26,711
This is a two-parter. The first is you mentioned that

951
00:55:27,672 --> 00:55:32,996
your team was very specialized in terms of quest or world or enemies or different parts of the game.

952
00:55:33,717 --> 00:55:36,960
To what extent was your third-party testers in

953
00:55:38,601 --> 00:55:40,763
England also specialized?

954
00:55:42,384 --> 00:55:45,147
So when we came up with the buddy system,

955
00:55:47,709 --> 00:55:49,010
the first party QA

956
00:55:49,891 --> 00:55:50,451
testers

957
00:55:51,733 --> 00:55:56,256
We had a core of more senior testers who were very experienced

958
00:55:57,116 --> 00:56:01,879
and they were specialized in the same areas as our internal QA team.

959
00:56:01,939 --> 00:56:07,042
So, for example, our Quest internal testers had, I think,

960
00:56:07,182 --> 00:56:10,564
four or five counterparts at first party QA.

961
00:56:10,884 --> 00:56:15,586
They had their own chat rooms and their own communication channels

962
00:56:15,686 --> 00:56:19,449
and they were talking every day about tasks,

963
00:56:19,709 --> 00:56:21,410
like what needs to be done.

964
00:56:22,394 --> 00:56:27,336
what's going on? Oh, this quest designer told me this, can you take a look?

965
00:56:27,516 --> 00:56:31,958
Oh, we have this review coming up, we need the build checked for this content.

966
00:56:33,198 --> 00:56:36,740
And the second part is, with people being so specialized,

967
00:56:37,360 --> 00:56:41,842
what sort of redundancy did you have in case, for example, the person on quests

968
00:56:41,922 --> 00:56:46,664
got sick or was on vacation? Who was able to cover for them and how?

969
00:56:48,602 --> 00:56:51,723
So in the beginning we didn't have any redundancy

970
00:56:51,883 --> 00:56:53,104
and that was a problem.

971
00:56:54,084 --> 00:56:56,945
And then we started covering those holes

972
00:56:57,065 --> 00:57:01,907
just by having specialized testers

973
00:57:03,088 --> 00:57:07,870
like dabble in other areas so that in an emergency

974
00:57:08,090 --> 00:57:09,590
they could just take over,

975
00:57:09,630 --> 00:57:11,671
not completely replace that person,

976
00:57:11,751 --> 00:57:13,672
but you know just tide things over.

977
00:57:14,592 --> 00:57:17,913
And also when we had the first party QA buddies.

978
00:57:18,714 --> 00:57:27,059
they were able to take on that load because they knew almost as much as an internal QA person knew about that area.

979
00:57:27,599 --> 00:57:28,159
Thank you very much.

980
00:57:30,120 --> 00:57:31,841
Hi, thanks for your talk.

981
00:57:33,422 --> 00:57:38,145
I still can't wrap my head around the fact that you shipped that massive of a game with eight days.

982
00:57:38,652 --> 00:57:40,574
FQA is... that's... congratulations!

983
00:57:40,594 --> 00:57:43,477
FQC! FQC!

984
00:57:43,957 --> 00:57:44,918
I have a real question though.

985
00:57:46,099 --> 00:57:54,106
I guess one of the big challenges is that the game changed a lot along the way.

986
00:57:54,406 --> 00:57:58,670
From what I understood from previous talks I attended, like, even one year before ship,

987
00:57:58,890 --> 00:58:00,111
massive changes were made to it.

988
00:58:01,631 --> 00:58:07,734
How did you handle getting the documentation to get test cases always up to date and stuff like that?

989
00:58:07,754 --> 00:58:11,375
Did you have a specific pipeline in place, workflow?

990
00:58:12,476 --> 00:58:14,997
Oh, documentation, one of my favorite topics.

991
00:58:15,317 --> 00:58:21,579
And I think historically a very difficult task, getting documentation out of developers.

992
00:58:22,600 --> 00:58:27,381
We had a lot of challenges there because our developers were very much focused on

993
00:58:28,104 --> 00:58:31,225
creating the content, getting the feature ready,

994
00:58:32,226 --> 00:58:34,247
shippable, everything, bug fixes,

995
00:58:34,967 --> 00:58:36,368
and not so much on documentation.

996
00:58:36,808 --> 00:58:39,130
So the process that we came up with

997
00:58:39,370 --> 00:58:43,112
after a lot of trial and error and discussion

998
00:58:43,892 --> 00:58:47,054
was to make their job easier

999
00:58:47,935 --> 00:58:49,716
to write documentation.

1000
00:58:50,276 --> 00:58:53,278
So we explained to them

1001
00:58:55,067 --> 00:59:00,568
depending case by case because obviously we need different documentation from a robot designer than we need from a quest designer.

1002
00:59:01,448 --> 00:59:03,989
So we explained to them exactly what we needed

1003
00:59:04,009 --> 00:59:10,871
in terms of, okay, if I'm going to test your feature or your quest or your robot,

1004
00:59:11,491 --> 00:59:18,173
these are the things that I need to know. These are the questions that I need answers to. So it was very specific.

1005
00:59:18,293 --> 00:59:20,354
So instead of the developer feeling like

1006
00:59:20,861 --> 00:59:23,262
Oh, now I have to write a 60-page document

1007
00:59:23,562 --> 00:59:26,444
that details everything about the feature.

1008
00:59:27,804 --> 00:59:31,466
It was just, oh, I just have to answer these five questions,

1009
00:59:31,806 --> 00:59:34,768
or I have to fill in this two-page template

1010
00:59:35,968 --> 00:59:38,389
that tells me exactly what QA needs to know.

1011
00:59:39,270 --> 00:59:40,470
And that really helped.

1012
00:59:41,211 --> 00:59:43,952
Creating the templates for them on the wiki,

1013
00:59:44,772 --> 00:59:47,014
on our internal wiki, and telling them,

1014
00:59:47,134 --> 00:59:48,314
okay, you just need to fill this in.

1015
00:59:49,711 --> 00:59:53,033
everything is in place, you just need to fill in the information and you're done.

1016
00:59:53,774 --> 00:59:57,156
So that helped a lot. Also getting production on board,

1017
00:59:58,097 --> 01:00:01,199
they understood the importance of having up-to-date documentation

1018
01:00:01,940 --> 01:00:05,522
and how that was helping us test the game. So they were

1019
01:00:05,642 --> 01:00:09,345
badgering their teams, remember to write documentation for QA.

1020
01:00:10,426 --> 01:00:13,608
And we also made it part of milestones. So part

1021
01:00:13,628 --> 01:00:17,631
of our alpha criteria or beta criteria was documentation.

1022
01:00:18,552 --> 01:00:19,332
So, yeah.

1023
01:00:20,124 --> 01:00:20,404
Thank you.

1024
01:00:23,486 --> 01:00:25,807
Hey, we are right on time.

1025
01:00:29,009 --> 01:00:31,310
How big was your external QA team?

1026
01:00:31,831 --> 01:00:33,352
Oh yeah, I forgot to mention that.

1027
01:00:33,892 --> 01:00:36,814
At peak, there were about 60 of them.

1028
01:00:37,614 --> 01:00:40,336
On average, throughout the project, I would say about 20.

1029
01:00:40,836 --> 01:00:42,917
Okay, thank you.

1030
01:00:42,937 --> 01:00:47,320
All right, thank you very much.

