1
00:00:06,225 --> 00:00:08,845
Hello everyone, thank you for coming.

2
00:00:10,286 --> 00:00:13,147
My name is Yuki Miyamae from SIA Japan Studio.

3
00:00:13,807 --> 00:00:17,188
I was the technical lead of Astro Bot Rescue Mission.

4
00:00:18,088 --> 00:00:21,629
Today I'm going to talk about what the most important

5
00:00:21,729 --> 00:00:23,669
technical goals were for this game

6
00:00:24,050 --> 00:00:26,290
and how we achieved those goals.

7
00:00:28,211 --> 00:00:31,012
For those who don't know, Astro Bot Rescue Mission

8
00:00:31,112 --> 00:00:34,452
is a VR platformer which was released in October 2018.

9
00:00:36,048 --> 00:00:39,111
It uses various features of PlayStation VR

10
00:00:39,511 --> 00:00:41,012
and the DualShock 4 controller.

11
00:00:42,053 --> 00:00:46,277
There are over 50 levels with many different visual themes.

12
00:00:48,358 --> 00:00:52,302
The game was developed by 26 people in 18 months.

13
00:00:53,082 --> 00:00:56,685
This is a photo of the team, Asobi, in Japan studio.

14
00:00:59,227 --> 00:01:00,388
During the development,

15
00:01:01,549 --> 00:01:03,671
these were the three biggest technical goals.

16
00:01:04,567 --> 00:01:10,110
Our target frame rate is 60, and it's scaled to 120 by reprojection.

17
00:01:10,891 --> 00:01:16,875
As frame rate drops are not allowed in VR games, we have to keep 60 fps at all times.

18
00:01:18,196 --> 00:01:22,799
And second, because it's VR, visuals are physically close to users,

19
00:01:23,259 --> 00:01:27,382
so they should be comfortable on your eyes, and at the same time convincing.

20
00:01:29,627 --> 00:01:31,849
The third one is smooth game flow,

21
00:01:32,529 --> 00:01:34,930
which means we have to pay much attention

22
00:01:34,970 --> 00:01:37,452
to game flow or game state transitions

23
00:01:38,152 --> 00:01:40,173
because they are repeated many times.

24
00:01:41,694 --> 00:01:43,315
If they are not implemented well,

25
00:01:43,795 --> 00:01:46,457
users will easily get tired in VR.

26
00:01:47,898 --> 00:01:49,859
The purpose of this talk is to share

27
00:01:50,139 --> 00:01:52,160
some of the techniques we used

28
00:01:52,520 --> 00:01:54,341
to work toward achieving these goals.

29
00:01:55,331 --> 00:01:59,532
So the first topic is rendering optimization.

30
00:02:00,072 --> 00:02:02,733
This has the biggest impact on the framework.

31
00:02:03,333 --> 00:02:05,314
I want to talk about some of the techniques

32
00:02:05,574 --> 00:02:08,395
which were effective to keep 60 FPS.

33
00:02:12,496 --> 00:02:15,617
As a first optimization, we kept the scene compact.

34
00:02:16,197 --> 00:02:19,538
We knew that optimization was really tough for VR games,

35
00:02:20,058 --> 00:02:23,079
so we started optimization at the game design level.

36
00:02:23,985 --> 00:02:26,246
We divided levels to small sections,

37
00:02:26,686 --> 00:02:30,228
and each section is roughly 30 meters by 30 meters.

38
00:02:31,529 --> 00:02:33,350
And depending on the player's position,

39
00:02:33,650 --> 00:02:36,472
some sections are not visible from the player,

40
00:02:36,912 --> 00:02:39,613
so we manually set the section visibilities.

41
00:02:40,774 --> 00:02:44,436
Players go almost straight from a start point to a goal,

42
00:02:45,076 --> 00:02:47,738
so manual control was manageable for our game.

43
00:02:49,027 --> 00:02:53,310
In the product, we had a maximum 2,500 draw calls at a time,

44
00:02:53,550 --> 00:02:55,811
including shadows and the stereo rendering.

45
00:02:56,612 --> 00:02:58,053
I think this is small enough.

46
00:03:01,775 --> 00:03:04,156
Our renderer spec is as follows.

47
00:03:04,857 --> 00:03:08,139
We used forward rendering with H-sample MSAA.

48
00:03:09,139 --> 00:03:10,560
As a small optimization here,

49
00:03:10,941 --> 00:03:13,322
we packed the depth value to the alpha channel

50
00:03:13,602 --> 00:03:14,463
of the color buffer.

51
00:03:15,447 --> 00:03:18,309
By doing so, we can skip the depth resolve,

52
00:03:18,790 --> 00:03:20,851
and when sampling background color buffer,

53
00:03:21,471 --> 00:03:23,973
we can get the depth value for free.

54
00:03:25,514 --> 00:03:27,476
We had some special effect shaders,

55
00:03:27,796 --> 00:03:29,457
but for most of the objects,

56
00:03:29,737 --> 00:03:33,460
we used basic single-layer PBR materials.

57
00:03:34,861 --> 00:03:37,202
The number of lights is also really small.

58
00:03:37,503 --> 00:03:39,504
We have max two blended IVLs,

59
00:03:40,165 --> 00:03:42,306
one directional, and 16 point and 16 spotlights.

60
00:03:45,342 --> 00:03:48,584
All of these lights are evaluated in every material

61
00:03:49,104 --> 00:03:50,945
with no tile or cluster cutting

62
00:03:51,145 --> 00:03:53,967
because it's much faster for this number of lights.

63
00:03:56,228 --> 00:03:58,970
So we kept the pipeline simple as much as possible

64
00:03:59,050 --> 00:04:00,250
for the GPU performance.

65
00:04:02,832 --> 00:04:04,933
As another GPU optimization,

66
00:04:05,093 --> 00:04:07,634
we implemented dynamic resolution system.

67
00:04:08,495 --> 00:04:10,716
We measured the GPU time of the previous frame

68
00:04:11,296 --> 00:04:13,538
and decide the resolution of the current frame.

69
00:04:14,422 --> 00:04:18,747
The good thing is dynamic resolution can handle emergency cases.

70
00:04:19,207 --> 00:04:25,815
For example, diving into fires or water, those kinds of extreme cases.

71
00:04:26,776 --> 00:04:31,321
And more importantly, it increases the resolution in most cases.

72
00:04:32,514 --> 00:04:35,216
Our resolution setting is shown in this table.

73
00:04:36,717 --> 00:04:39,798
1.0 scale is the display resolution of PSVR.

74
00:04:40,159 --> 00:04:43,521
And we have scales from 0.85 to 1.5.

75
00:04:45,382 --> 00:04:48,023
We have only four settings, but it greatly

76
00:04:48,103 --> 00:04:51,485
improves the image quality compared to just one setting.

77
00:04:54,051 --> 00:04:55,191
Here is how it works.

78
00:04:55,491 --> 00:04:56,032
It's simple.

79
00:04:56,592 --> 00:04:58,812
If the total GPU time of the previous frame

80
00:04:58,953 --> 00:05:02,794
is over 16.6 milliseconds, we immediately

81
00:05:03,174 --> 00:05:04,434
decrease the resolution.

82
00:05:06,655 --> 00:05:09,456
When we scale it up, it's more conservative.

83
00:05:10,336 --> 00:05:13,037
To estimate the GPU cost of the next resolution,

84
00:05:13,457 --> 00:05:17,138
we scale the still rendering time by the pixel count ratio.

85
00:05:18,091 --> 00:05:22,817
And if it's below 16.6 milliseconds for 30 frames,

86
00:05:23,278 --> 00:05:24,920
we increase that resolution.

87
00:05:26,062 --> 00:05:28,826
Some GPU jobs are not related to the resolution,

88
00:05:29,427 --> 00:05:30,248
such as shadows.

89
00:05:30,649 --> 00:05:34,634
So it's important to exclude those times from the estimation.

90
00:05:36,208 --> 00:05:38,448
And because the GPU time is not proportional

91
00:05:38,488 --> 00:05:41,369
to the pixel count, for example, it depends on

92
00:05:41,729 --> 00:05:43,990
whether it's vertex heavy or pixel heavy,

93
00:05:44,450 --> 00:05:46,370
we added a scale parameter S,

94
00:05:46,990 --> 00:05:50,331
and 0.85 worked well for our case.

95
00:05:53,252 --> 00:05:55,912
I played some levels and took statistics.

96
00:05:56,832 --> 00:06:00,013
On PS4, the resolution was over 1.25 scale on average.

97
00:06:02,449 --> 00:06:04,331
Before implementing dynamic resolution,

98
00:06:04,851 --> 00:06:07,334
we had been using 1.0 by default,

99
00:06:07,775 --> 00:06:09,377
so it's a big improvement.

100
00:06:12,060 --> 00:06:15,103
On PS4 Pro, 1.5 was used almost always.

101
00:06:16,585 --> 00:06:18,647
Although the quality was improved,

102
00:06:19,188 --> 00:06:21,450
sometimes we noticed resolution popping

103
00:06:21,691 --> 00:06:23,333
because we had only four settings.

104
00:06:24,650 --> 00:06:27,252
We prepared the four pipelines in advance

105
00:06:27,872 --> 00:06:28,913
and just switched them.

106
00:06:29,633 --> 00:06:32,435
But now, I think, fully dynamic approach,

107
00:06:33,096 --> 00:06:35,277
which has finer resolution granularity,

108
00:06:35,758 --> 00:06:37,319
for example, per two pixels,

109
00:06:37,899 --> 00:06:40,461
will be better as it produces smoother result.

110
00:06:43,580 --> 00:06:45,741
There is another problem in heavy scenes.

111
00:06:46,422 --> 00:06:49,183
We don't see any frame rate drops, even in heavy scenes.

112
00:06:49,824 --> 00:06:53,346
But the resolution decreases to the lowest quietly.

113
00:06:53,966 --> 00:06:55,327
It happened in many levels.

114
00:06:56,487 --> 00:06:59,449
Our QA team is very strict about frame rate,

115
00:06:59,909 --> 00:07:02,130
but not about resolution decrease.

116
00:07:02,811 --> 00:07:05,592
So it might be missed in the final QA process.

117
00:07:07,124 --> 00:07:09,845
Another problem is that even though the resolution

118
00:07:09,945 --> 00:07:12,445
is the lowest, the frame rate is keeping 60.

119
00:07:13,726 --> 00:07:17,247
So it's difficult to know how many milliseconds

120
00:07:17,547 --> 00:07:20,247
we should optimize to get higher resolution.

121
00:07:21,828 --> 00:07:23,028
This is an example.

122
00:07:23,528 --> 00:07:26,789
We show a performance indicator in the center of the view

123
00:07:27,349 --> 00:07:30,430
when the frame rate drops so everybody can see it.

124
00:07:31,830 --> 00:07:32,771
This is the zoom up.

125
00:07:33,391 --> 00:07:36,491
We show frame rate and GPU time in millisecond.

126
00:07:37,604 --> 00:07:39,485
Without the dynamic resolution system,

127
00:07:40,086 --> 00:07:41,487
the frame rate drops like this.

128
00:07:42,268 --> 00:07:44,110
QA team reports this issue,

129
00:07:44,610 --> 00:07:47,673
and also it's easy to see how many milliseconds

130
00:07:47,853 --> 00:07:50,015
we should cut to keep the frame rate.

131
00:07:52,457 --> 00:07:54,860
But if you turn on the dynamic resolution,

132
00:07:55,360 --> 00:07:56,741
there is no frame rate drops,

133
00:07:57,622 --> 00:07:59,704
but the resolution is too low.

134
00:08:00,601 --> 00:08:02,762
We want to get a higher resolution,

135
00:08:03,162 --> 00:08:06,063
but the GPU time information here is useless

136
00:08:06,703 --> 00:08:09,804
because it's impossible to know how many milliseconds

137
00:08:10,144 --> 00:08:12,245
we should cut in the next resolution

138
00:08:12,745 --> 00:08:15,386
because we are rendering in the lower resolution.

139
00:08:17,667 --> 00:08:21,569
So to control the quality with dynamic resolution system,

140
00:08:22,129 --> 00:08:26,230
we decided target resolution and emergency resolution.

141
00:08:27,500 --> 00:08:31,362
The target means we should achieve it at minimum,

142
00:08:31,742 --> 00:08:34,143
and the emergency resolution is only allowed

143
00:08:34,283 --> 00:08:36,645
in emergency cases, not everywhere.

144
00:08:37,765 --> 00:08:42,207
With this consensus, we didn't use the emergency resolutions

145
00:08:42,608 --> 00:08:45,149
until the very end of the production.

146
00:08:46,270 --> 00:08:48,491
We intentionally made the frame rate drops

147
00:08:48,971 --> 00:08:51,953
and encouraged the team to optimize the levels.

148
00:08:52,993 --> 00:08:54,254
I think this worked well.

149
00:08:55,674 --> 00:09:00,476
If we look at the graph again, you can see that the lowest resolution was really used

150
00:09:00,717 --> 00:09:01,317
in the product.

151
00:09:01,797 --> 00:09:03,238
It's less than 0.1%.

152
00:09:07,961 --> 00:09:11,683
Okay, the next is the CPU side optimization topic.

153
00:09:12,624 --> 00:09:13,825
Stereo rendering methods.

154
00:09:14,765 --> 00:09:17,627
We considered three methods for stereo rendering.

155
00:09:19,900 --> 00:09:23,042
The first one is to run the rendering pipeline twice.

156
00:09:23,742 --> 00:09:26,223
This is the easiest implementation,

157
00:09:26,824 --> 00:09:28,485
but has lots of CPU waste.

158
00:09:31,366 --> 00:09:33,968
The second one is resubmitting a command buffer.

159
00:09:34,568 --> 00:09:38,571
This saves the CPU cost to generate a command buffer,

160
00:09:38,911 --> 00:09:41,172
and it requires no shader modifications.

161
00:09:41,993 --> 00:09:44,274
But draw call count is still big.

162
00:09:46,947 --> 00:09:49,248
The last one is to use instance draw

163
00:09:49,528 --> 00:09:51,668
to double the geometry in a single pass.

164
00:09:52,549 --> 00:09:55,549
You draw the objects with double instance count

165
00:09:55,829 --> 00:09:57,370
and switch the render target

166
00:09:57,690 --> 00:09:59,870
with slice indexing vertex shaders.

167
00:10:00,770 --> 00:10:02,731
This can have the draw call count,

168
00:10:02,891 --> 00:10:05,412
so it's good for CPU and GPU.

169
00:10:06,292 --> 00:10:08,672
However, this requires vertex shader

170
00:10:08,792 --> 00:10:10,633
and some pipeline modifications.

171
00:10:11,803 --> 00:10:15,391
So, we chose resubmitting a command buffer

172
00:10:15,973 --> 00:10:18,137
because we also had to support

173
00:10:18,338 --> 00:10:19,941
non-stable rendering pipeline

174
00:10:20,302 --> 00:10:22,387
and we wanted to keep the code simple.

175
00:10:24,993 --> 00:10:32,540
On PS4, command buffers we build are processed directly on GPU, so resubmission has almost

176
00:10:33,201 --> 00:10:34,362
no CPU overhead.

177
00:10:35,243 --> 00:10:41,029
But because the command buffer is processed as it is, we need to care about synchronizations

178
00:10:41,429 --> 00:10:41,850
ourselves.

179
00:10:42,655 --> 00:10:45,756
For example, when we make GPU wait for rendering

180
00:10:45,956 --> 00:10:49,117
of the previous stage, we usually use labels

181
00:10:49,317 --> 00:10:50,958
allocated from a command buffer,

182
00:10:51,518 --> 00:10:55,979
and wait until the label is set by GPU to a certain value.

183
00:10:56,780 --> 00:10:59,340
But when the command buffer is processed a second time,

184
00:11:00,021 --> 00:11:01,461
labels are already filled.

185
00:11:02,101 --> 00:11:03,982
So you have to clear the labels

186
00:11:04,502 --> 00:11:06,043
after the first commands are finished.

187
00:11:07,340 --> 00:11:10,901
To do this, we allocated a memory block for the labels

188
00:11:11,401 --> 00:11:14,663
and put a memory copy command, a clear command,

189
00:11:15,023 --> 00:11:15,983
at the end of the commands.

190
00:11:17,544 --> 00:11:21,665
So the shared command buffer is created as follows.

191
00:11:23,546 --> 00:11:27,908
First, set up the left view constant buffer by CPU.

192
00:11:28,508 --> 00:11:31,469
View ID is also included in this buffer.

193
00:11:33,364 --> 00:11:35,325
Push scene draw calls as usual,

194
00:11:35,825 --> 00:11:38,046
which are for materials and post effects.

195
00:11:40,187 --> 00:11:43,849
Push output draw call that selects the render target.

196
00:11:44,750 --> 00:11:46,110
There are several ways here.

197
00:11:46,591 --> 00:11:49,232
We put two draw calls, one is for left

198
00:11:49,472 --> 00:11:51,173
and the other is for right,

199
00:11:51,673 --> 00:11:53,974
and called one by geometry shader,

200
00:11:54,334 --> 00:11:55,435
depending on the view ID.

201
00:11:56,475 --> 00:11:59,517
Or if render target array is available,

202
00:11:59,757 --> 00:12:02,658
you can just use slice index in vertex shaders.

203
00:12:05,015 --> 00:12:07,316
Finally, push memory copy commands

204
00:12:07,576 --> 00:12:08,976
at the end of the command buffer,

205
00:12:09,456 --> 00:12:13,297
which fills the view constant buffer with right eye

206
00:12:13,777 --> 00:12:15,558
and clears synchronization labels.

207
00:12:16,978 --> 00:12:18,918
Once you've created this command buffer,

208
00:12:19,479 --> 00:12:21,399
you can simply call submit twice.

209
00:12:22,339 --> 00:12:24,800
In this way, we can save much CPU time.

210
00:12:28,240 --> 00:12:32,641
Okay, now I want to move to the next topic, effects in VR.

211
00:12:33,797 --> 00:12:37,119
We implemented some effects and spent time

212
00:12:37,219 --> 00:12:39,320
to make it look good in VR.

213
00:12:39,780 --> 00:12:41,601
So I want to share what went well.

214
00:12:42,822 --> 00:12:47,284
I picked up three effects, water, clouds, and 3D text.

215
00:12:48,785 --> 00:12:50,546
The first effect is water.

216
00:12:51,587 --> 00:12:54,328
We have some water levels and as a gameplay,

217
00:12:54,348 --> 00:12:58,731
sorry, the player can go into the water.

218
00:13:01,444 --> 00:13:03,946
In VR, player's viewpoint is free,

219
00:13:04,546 --> 00:13:07,268
so we couldn't avoid to draw the boundary

220
00:13:07,508 --> 00:13:08,729
of the water and air.

221
00:13:09,730 --> 00:13:12,632
I think the unique point of our water rendering

222
00:13:12,732 --> 00:13:15,334
is that we seriously render the boundary

223
00:13:15,894 --> 00:13:16,815
rather than hiding it.

224
00:13:18,016 --> 00:13:20,177
In addition, the surface should be moving

225
00:13:20,838 --> 00:13:22,359
as a gameplay requirement.

226
00:13:24,827 --> 00:13:28,387
In this image, you can see two components of the water rendering.

227
00:13:29,588 --> 00:13:35,309
Water surface and a fog effect applied to the underwater area.

228
00:13:35,989 --> 00:13:38,370
I'll explain how to render each component.

229
00:13:40,730 --> 00:13:45,031
The surface is just a fine mesh, no dynamic tessellation,

230
00:13:45,351 --> 00:13:49,412
because pre-tessellated geometry was faster for our level size.

231
00:13:50,359 --> 00:13:54,142
We moved the vertices in Vertex Shader with three sine waves,

232
00:13:54,503 --> 00:13:56,585
which are tweaked by material attributes,

233
00:13:57,405 --> 00:14:01,169
and 16 wave sources controlled by a game code.

234
00:14:02,190 --> 00:14:04,032
The shading is not so special.

235
00:14:04,452 --> 00:14:07,195
We just calculated scattering and absorption

236
00:14:07,495 --> 00:14:09,277
using the distance to the background.

237
00:14:10,078 --> 00:14:13,962
But an interesting effect we added was surface tension effect.

238
00:14:15,091 --> 00:14:18,335
We bend normals at intersections to the background.

239
00:14:19,036 --> 00:14:24,602
It's exaggerated, but we felt it's realistic.

240
00:14:25,643 --> 00:14:28,687
We also bend normals at the camera intersection,

241
00:14:28,927 --> 00:14:30,869
which makes the boundary look nice.

242
00:14:34,155 --> 00:14:36,997
Underwater fog is just a post effect,

243
00:14:37,618 --> 00:14:39,259
but as shown in this figure,

244
00:14:39,499 --> 00:14:42,741
we needed to detect the underwater region in the screen

245
00:14:43,321 --> 00:14:46,163
and apply the fog only to that area.

246
00:14:46,883 --> 00:14:48,885
Actually, we used stencil buffer.

247
00:14:49,625 --> 00:14:52,167
The steps to create the stencil are

248
00:14:53,788 --> 00:14:56,990
first clear the stencil buffer with zero,

249
00:14:58,611 --> 00:15:01,753
draw the scene objects without stencil operations,

250
00:15:03,309 --> 00:15:07,593
and draw water area box, which covers the bottom of the water,

251
00:15:08,033 --> 00:15:09,975
and set the stencil value to 1.

252
00:15:11,856 --> 00:15:16,000
And next, draw the water surface with stencil operations.

253
00:15:16,540 --> 00:15:18,622
This is a bit complicated.

254
00:15:19,242 --> 00:15:21,624
When depth test passes, we set 3.

255
00:15:22,545 --> 00:15:26,549
And when depth test fails, use decrement for front face

256
00:15:26,829 --> 00:15:28,310
and increment for back face.

257
00:15:29,350 --> 00:15:33,712
Then, only the underwater area has stencil value one,

258
00:15:34,132 --> 00:15:38,174
so we apply the fog effect where the stencil is one.

259
00:15:40,415 --> 00:15:42,675
The reason why the step four is complicated

260
00:15:42,896 --> 00:15:45,977
is to handle any viewpoints like these figures

261
00:15:46,557 --> 00:15:48,878
above the water, inside the waves,

262
00:15:49,378 --> 00:15:51,079
and completely underwater.

263
00:15:51,859 --> 00:15:53,800
This might be hard to understand now,

264
00:15:54,020 --> 00:15:56,081
but if you take time to think later,

265
00:15:56,541 --> 00:15:58,602
you will be able to see this will work.

266
00:16:01,396 --> 00:16:03,118
Here is the final result.

267
00:16:03,959 --> 00:16:07,302
You can see that the player can dive into the water smoothly.

268
00:16:09,924 --> 00:16:13,148
The water drops on the screen are just distortion particles.

269
00:16:15,750 --> 00:16:17,071
This is another scene.

270
00:16:18,613 --> 00:16:22,977
You can see that the fog is only applied to the underwater area.

271
00:16:24,599 --> 00:16:26,120
And also you can see the boundary.

272
00:16:33,641 --> 00:16:36,102
Okay, the next effect is clouds.

273
00:16:36,842 --> 00:16:39,743
Clouds were used in many levels of the game,

274
00:16:39,944 --> 00:16:42,625
so the cloud rendering was important for us.

275
00:16:44,986 --> 00:16:47,387
Our clouds are close to the player,

276
00:16:47,727 --> 00:16:50,228
and artists want to control the shape freely,

277
00:16:50,708 --> 00:16:53,569
so we can't use the cloud layer approach,

278
00:16:54,189 --> 00:16:56,770
which was used in Horizon Zero Dawn,

279
00:16:57,031 --> 00:17:00,632
suited for situations where players look up at the sky.

280
00:17:01,879 --> 00:17:04,121
Also, they need to be lightweight,

281
00:17:04,361 --> 00:17:06,602
so we have to avoid lots of transparency.

282
00:17:07,843 --> 00:17:09,724
And of course, they need to be moving.

283
00:17:12,126 --> 00:17:14,187
So we took a mesh approach again.

284
00:17:14,907 --> 00:17:18,830
We draw the polygons, sample a 3D noise texture,

285
00:17:19,030 --> 00:17:20,391
and use it for the shading.

286
00:17:21,372 --> 00:17:23,973
We also used the noise for the vertex displacement.

287
00:17:24,918 --> 00:17:27,900
The noise texture is similar to the horizon method.

288
00:17:28,541 --> 00:17:30,882
R channel contains low frequency noise,

289
00:17:31,263 --> 00:17:34,505
and the GBA channels have higher frequency noises.

290
00:17:35,586 --> 00:17:38,048
The low frequency noise is eroded

291
00:17:38,308 --> 00:17:39,929
by the high frequency noises.

292
00:17:41,050 --> 00:17:43,251
The detail of how to use the noise

293
00:17:43,452 --> 00:17:47,014
was explained by Deshima Engine Team at SIGGRAPH 2017,

294
00:17:47,054 --> 00:17:47,835
so I'll skip it here.

295
00:17:51,780 --> 00:17:55,123
For shadows, because dynamic shadows on the clouds

296
00:17:55,263 --> 00:17:58,126
need many sample points to hide the polygon feeling,

297
00:17:58,847 --> 00:18:01,109
we just used baked shadows on the clouds,

298
00:18:01,289 --> 00:18:02,390
including cell shadows.

299
00:18:04,312 --> 00:18:06,314
So here is the shading steps.

300
00:18:06,794 --> 00:18:09,517
We take five samples along the view ray

301
00:18:09,917 --> 00:18:11,799
and accumulate the sun scattering.

302
00:18:13,842 --> 00:18:16,123
Precisely, at each sampling point,

303
00:18:16,243 --> 00:18:17,764
you also need to sample the noise

304
00:18:17,904 --> 00:18:22,067
in the sun direction several times to get occlusions.

305
00:18:22,567 --> 00:18:24,708
But we can't afford to sample many points.

306
00:18:25,609 --> 00:18:29,311
So instead, we just sample one point

307
00:18:29,572 --> 00:18:33,614
toward the sun direction from the last sampling point.

308
00:18:34,235 --> 00:18:37,176
We subtract the noise value A from B

309
00:18:37,497 --> 00:18:39,398
and use it as a multiplier.

310
00:18:40,498 --> 00:18:43,160
This produces detailed sound occlusions.

311
00:18:44,861 --> 00:18:49,004
And baked shadow map covers the static large scale occlusion.

312
00:18:50,746 --> 00:18:54,869
And finally, we add ambient by evaluating IBL diffuse

313
00:18:55,109 --> 00:18:58,832
with the surface normal and the accumulated noise value.

314
00:18:59,713 --> 00:19:02,816
This is a very rough approximation,

315
00:19:02,976 --> 00:19:05,218
but it can make the clouds fit the scene,

316
00:19:06,038 --> 00:19:07,680
and it's easy to implement.

317
00:19:09,301 --> 00:19:11,423
So I show the components by images.

318
00:19:11,923 --> 00:19:14,325
Clouds are made with fine meshes like this.

319
00:19:16,073 --> 00:19:20,135
With five samples, baked shadow map, and IBL ambient,

320
00:19:20,275 --> 00:19:20,855
you get this.

321
00:19:21,675 --> 00:19:23,996
Because five samples is too small,

322
00:19:24,296 --> 00:19:26,556
we don't get any volumetric feeling yet.

323
00:19:28,117 --> 00:19:30,857
So we move the vertices to Y direction

324
00:19:30,977 --> 00:19:32,838
according to the noise values.

325
00:19:34,978 --> 00:19:37,559
By adding one sample to the sun direction,

326
00:19:37,759 --> 00:19:39,600
you get more details like this.

327
00:19:41,680 --> 00:19:42,000
Like this.

328
00:19:44,474 --> 00:19:47,255
We wanted more details on the intersections,

329
00:19:47,555 --> 00:19:49,856
so we used the noise as alpha values

330
00:19:50,257 --> 00:19:51,657
when it's close to background.

331
00:19:52,417 --> 00:19:56,619
We reused the noise, so there is no additional sampling,

332
00:19:56,779 --> 00:19:58,920
but we used different frequency waves,

333
00:19:59,581 --> 00:20:02,202
usually higher frequency than the shading.

334
00:20:03,242 --> 00:20:04,583
Like in this code sample,

335
00:20:04,843 --> 00:20:07,864
with some magic numbers and a step function,

336
00:20:08,084 --> 00:20:10,565
we got nice details on the intersections.

337
00:20:13,398 --> 00:20:15,499
This is the in-game result.

338
00:20:16,100 --> 00:20:18,722
For this scene at a half of 1080p,

339
00:20:19,222 --> 00:20:23,345
it took around 1.2 milliseconds per eye on PS4.

340
00:20:26,127 --> 00:20:27,869
It looks a little bit cartoony

341
00:20:27,929 --> 00:20:29,490
due to the vertex displacement,

342
00:20:29,930 --> 00:20:32,372
but we think we've got interesting movements.

343
00:20:36,365 --> 00:20:38,906
Okay, the last effect is 3D text.

344
00:20:39,726 --> 00:20:43,667
This is just one slide, but what's worth mentioning is

345
00:20:44,028 --> 00:20:46,128
our texts are all made with polygons.

346
00:20:47,369 --> 00:20:49,890
Most of our texts have small extrusion,

347
00:20:50,070 --> 00:20:52,491
and that gives better 3D feeling

348
00:20:52,651 --> 00:20:54,572
than texture planes in VR.

349
00:20:55,892 --> 00:20:58,593
Another good thing is that it's resolution-free.

350
00:20:59,333 --> 00:21:02,054
We tweaked text positions many times,

351
00:21:02,355 --> 00:21:05,596
but we tweaked resolution setting only a few times.

352
00:21:07,033 --> 00:21:10,956
One more good thing is we didn't have to make special shaders,

353
00:21:11,736 --> 00:21:13,357
such as distance field shaders.

354
00:21:13,677 --> 00:21:16,199
We simply reused effect shaders.

355
00:21:17,860 --> 00:21:19,862
To generate the polygons from text,

356
00:21:20,242 --> 00:21:24,065
we built an automated system using TypeNode in Maya,

357
00:21:24,785 --> 00:21:26,606
and we finally supported 23 languages.

358
00:21:32,461 --> 00:21:35,644
This is the last topic, smooth game flow.

359
00:21:36,225 --> 00:21:38,908
This might sound like a game design topic,

360
00:21:39,348 --> 00:21:42,471
but I'd like to talk about techniques behind it.

361
00:21:45,915 --> 00:21:49,718
As you can imagine, unsmooth game flow in VR

362
00:21:49,999 --> 00:21:52,261
creates discomfort for users.

363
00:21:53,129 --> 00:21:56,735
For example, long loading time makes users tired.

364
00:21:57,937 --> 00:22:01,682
Device tracking interruption while displaying something

365
00:22:01,843 --> 00:22:02,724
leads to sickness.

366
00:22:03,706 --> 00:22:06,710
And if a black screen is displayed for a long time,

367
00:22:07,191 --> 00:22:08,653
the game loses immersion.

368
00:22:09,872 --> 00:22:11,394
So we do the opposite.

369
00:22:12,095 --> 00:22:14,537
We try to minimize the loading time,

370
00:22:15,078 --> 00:22:17,360
we keep the device tracking all the time,

371
00:22:18,061 --> 00:22:21,044
and we avoid black screens and show something

372
00:22:21,384 --> 00:22:23,126
that users can interact with.

373
00:22:25,929 --> 00:22:28,091
So this is our main game flow.

374
00:22:28,752 --> 00:22:33,076
We have a world select menu, a pause menu, and levels.

375
00:22:34,138 --> 00:22:37,180
When a user selects a level in the world select,

376
00:22:37,521 --> 00:22:40,783
the menu closes and the user moves to the level.

377
00:22:41,663 --> 00:22:43,864
And when the user clears the level,

378
00:22:44,405 --> 00:22:46,126
they go back to the world select.

379
00:22:47,246 --> 00:22:49,788
Users have to clear the levels one by one,

380
00:22:50,348 --> 00:22:53,090
and they always go back to the menu every time.

381
00:22:54,731 --> 00:22:57,433
And the pause menu can be opened any time.

382
00:22:58,553 --> 00:23:02,195
This is the spec, and it's a very simple design.

383
00:23:03,322 --> 00:23:06,525
To achieve this game design and make it smooth,

384
00:23:06,985 --> 00:23:09,327
we thought about memory management first.

385
00:23:12,290 --> 00:23:15,133
To minimize the loading, we load the word select

386
00:23:15,333 --> 00:23:17,816
and the pause menu as resident resources

387
00:23:18,316 --> 00:23:21,319
once we launch the game, and never unload them.

388
00:23:22,420 --> 00:23:24,362
Then, when a user selects a level,

389
00:23:26,023 --> 00:23:29,583
we load the level resources, everything fits in memory.

390
00:23:30,284 --> 00:23:35,204
In other words, we optimized every level to fit in memory.

391
00:23:36,325 --> 00:23:37,885
When the user cleared the level,

392
00:23:39,245 --> 00:23:41,225
we just unload the resources.

393
00:23:42,106 --> 00:23:43,566
We repeat this process.

394
00:23:44,946 --> 00:23:46,866
When the user moves to the next level,

395
00:23:48,607 --> 00:23:53,228
load the resources and unload them

396
00:23:53,608 --> 00:23:54,868
once the level is cleared.

397
00:23:57,335 --> 00:24:01,618
So with this strategy, because unloading is so fast,

398
00:24:02,238 --> 00:24:05,360
the only path that takes time is the transition

399
00:24:05,440 --> 00:24:07,522
from the world select to the level.

400
00:24:08,162 --> 00:24:11,624
So I will focus on how we manage this transition.

401
00:24:12,625 --> 00:24:14,586
First, I'd like to show the video

402
00:24:14,726 --> 00:24:17,007
of our final smooth result.

403
00:24:20,189 --> 00:24:21,970
This is the world select.

404
00:24:23,692 --> 00:24:24,592
You select a level.

405
00:24:26,623 --> 00:24:32,225
Astro comes to the controller and you can interact with an effect ball.

406
00:24:33,165 --> 00:24:33,525
Blue one.

407
00:24:35,486 --> 00:24:39,687
The loading has finished, you trigger a world revealing effect.

408
00:24:44,368 --> 00:24:46,269
And you can start the level.

409
00:24:51,228 --> 00:24:53,530
This figure explains what happened.

410
00:24:54,230 --> 00:24:56,492
The top row is what users see,

411
00:24:56,953 --> 00:24:59,074
and the bottom row is the loading process.

412
00:25:00,135 --> 00:25:01,557
When the user selects a level,

413
00:25:01,957 --> 00:25:04,539
we start an animation to close the word select.

414
00:25:05,160 --> 00:25:09,263
At the same time, we start loading meshes and animations.

415
00:25:10,244 --> 00:25:11,905
While loading those resources,

416
00:25:12,426 --> 00:25:14,888
we keep the rendering of the in-game controller.

417
00:25:16,162 --> 00:25:20,365
Also we show an effect ball that the user can interact with

418
00:25:20,666 --> 00:25:21,707
using the controller.

419
00:25:22,367 --> 00:25:25,590
So you feel you are still in the VR world,

420
00:25:25,971 --> 00:25:26,931
even in loading time.

421
00:25:28,213 --> 00:25:31,776
Once the loading is finished, we start loading textures.

422
00:25:32,957 --> 00:25:35,459
At this point, the user can start the level

423
00:25:35,699 --> 00:25:38,041
and the revealing effect creates the world.

424
00:25:39,355 --> 00:25:42,056
The point is we delay the texture loading

425
00:25:42,396 --> 00:25:44,637
and allow users to start levels

426
00:25:44,937 --> 00:25:46,677
before finishing the texture loading.

427
00:25:47,537 --> 00:25:49,398
This shortened the loading time

428
00:25:49,578 --> 00:25:52,039
and the time users think of as loading

429
00:25:52,159 --> 00:25:53,839
was less than five seconds.

430
00:25:54,739 --> 00:25:58,260
So how did we implement the delayed texture loading?

431
00:26:00,841 --> 00:26:03,662
The implementation is so easy.

432
00:26:04,842 --> 00:26:08,163
When we load meshes, we assign constant color textures.

433
00:26:09,157 --> 00:26:12,319
and we load texture files in order of distance

434
00:26:12,439 --> 00:26:16,061
from the player and switch the temporary texture

435
00:26:16,101 --> 00:26:18,423
with the actual texture once it's loaded.

436
00:26:19,523 --> 00:26:21,204
We rarely see any popping

437
00:26:21,384 --> 00:26:23,426
thanks to the world revealing effect.

438
00:26:25,007 --> 00:26:28,629
We also investigated other texture streaming techniques,

439
00:26:28,969 --> 00:26:31,651
but considering our level size and game design,

440
00:26:32,371 --> 00:26:35,453
I think this was the fastest way to achieve our goal.

441
00:26:38,755 --> 00:26:41,098
So to sum up, minimizing loading time,

442
00:26:41,758 --> 00:26:44,961
keeping device tracking, and keeping world interaction.

443
00:26:45,542 --> 00:26:48,204
These are so important, especially in VR.

444
00:26:51,628 --> 00:26:53,830
Okay, we covered these topics today.

445
00:26:54,691 --> 00:26:57,693
You might think there are no advanced technology

446
00:26:57,974 --> 00:26:59,635
or complicated techniques,

447
00:26:59,976 --> 00:27:02,378
and we always choose the easy path.

448
00:27:03,186 --> 00:27:04,067
It's partly true.

449
00:27:04,727 --> 00:27:07,669
We pay much attention to implementation cost.

450
00:27:08,230 --> 00:27:10,632
We choose easier ways if possible

451
00:27:10,872 --> 00:27:13,474
so that we can focus on other important things.

452
00:27:14,494 --> 00:27:17,096
I think this way of thinking is important,

453
00:27:17,577 --> 00:27:20,619
especially for small teams with limited amount of time.

454
00:27:21,680 --> 00:27:24,182
So I hope this talk will help you

455
00:27:24,402 --> 00:27:26,063
to cut implementation time

456
00:27:26,643 --> 00:27:28,745
and achieve great VR experiences.

457
00:27:29,666 --> 00:27:29,946
Thank you.

458
00:27:39,964 --> 00:27:47,937
I think we have almost no time for Q&A, but I will move to the wrap-up room, so if you

459
00:27:47,998 --> 00:27:52,906
have any questions, please come with me or just email me.

460
00:27:53,587 --> 00:27:54,288
Thank you very much.

