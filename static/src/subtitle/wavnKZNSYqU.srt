1
00:00:05,978 --> 00:00:11,743
It is said God created our beautiful world in seven days and even took Sunday off.

2
00:00:12,965 --> 00:00:18,810
It took Guerrilla Games seven years to create the world of Horizon and we often had to work on Sundays.

3
00:00:21,413 --> 00:00:24,816
This is the only joke that's in here. The rest is just tech talk.

4
00:00:26,137 --> 00:00:29,280
Welcome everybody. It's good to see the house is full.

5
00:00:30,548 --> 00:00:33,911
I was asked to remind everybody to turn off their cell phones,

6
00:00:34,491 --> 00:00:36,953
so if you could do that, if you haven't done already,

7
00:00:38,154 --> 00:00:38,835
it's appreciated.

8
00:00:39,515 --> 00:00:41,857
Welcome, everybody. Good to see you all here.

9
00:00:42,918 --> 00:00:47,261
Allow me to introduce myself. My name is Jules-Bert Sanders,

10
00:00:47,642 --> 00:00:49,963
and I'm a principal artist at Guerrilla Games.

11
00:00:51,024 --> 00:00:53,266
And together with two other artists,

12
00:00:54,127 --> 00:00:57,289
we are responsible for the creation of the vegetation

13
00:00:57,730 --> 00:00:58,690
of Horizon Zero Dawn.

14
00:01:00,034 --> 00:01:01,874
I've been working at Guerrilla Games since 2006.

15
00:01:02,895 --> 00:01:08,177
I worked on Killzone 2 as an environment artist,

16
00:01:08,257 --> 00:01:11,979
and then Killzone 3 as a shader texture artist.

17
00:01:12,419 --> 00:01:15,881
And after these two games, at the beginning of 2011,

18
00:01:16,981 --> 00:01:21,783
I was asked to join a small team of people within the studio

19
00:01:22,263 --> 00:01:24,865
that started testing and prototyping what later would

20
00:01:24,905 --> 00:01:26,345
become Horizon Zero Dawn.

21
00:01:27,937 --> 00:01:29,959
I also did a little bit of work on Shadowfall,

22
00:01:30,139 --> 00:01:32,201
but you'll see that also later on.

23
00:01:32,441 --> 00:01:37,685
And from 2014 onwards, full-on production on Horizon Zero Dawn.

24
00:01:38,386 --> 00:01:40,908
Now, please, by show of hands, how many of you

25
00:01:40,968 --> 00:01:42,549
have played Horizon Zero Dawn?

26
00:01:44,451 --> 00:01:44,791
Nice.

27
00:01:45,091 --> 00:01:45,472
That's good.

28
00:01:47,053 --> 00:01:48,534
That's good to see.

29
00:01:50,075 --> 00:01:52,057
Well, playing the game, you might not

30
00:01:52,337 --> 00:01:56,120
have focused on vegetation as much.

31
00:01:56,715 --> 00:01:58,336
because you were focused on the dangers of the world.

32
00:01:59,117 --> 00:02:01,319
So we're here to talk about vegetation.

33
00:02:01,439 --> 00:02:03,320
So let me start off with a little clip

34
00:02:03,380 --> 00:02:05,822
to show you what we ended up creating.

35
00:02:09,045 --> 00:02:10,987
I don't have any sound, so usually you

36
00:02:11,587 --> 00:02:18,573
get something like, ah, ah, ah, ah, ah, ah, ah, ah, ah, ah, ah.

37
00:02:18,633 --> 00:02:21,455
But yeah, I won't bother you with that.

38
00:02:21,475 --> 00:02:21,816
Ha, ha, ha.

39
00:02:24,598 --> 00:02:24,858
So.

40
00:02:27,076 --> 00:02:28,757
Just a little bit more.

41
00:02:35,440 --> 00:02:35,900
Alrighty.

42
00:02:38,182 --> 00:02:45,165
Okay, you are all gathered here today to hear me talk about the vegetation we created for our game.

43
00:02:46,346 --> 00:02:53,589
Most of you have dealt with same or similar challenges when it comes to creating, simulating and rendering nature assets.

44
00:02:54,570 --> 00:02:55,810
Nature assets are still.

45
00:02:56,462 --> 00:03:02,483
even on this generation of hardware, at best annoyingly oversimplifications of the real

46
00:03:02,563 --> 00:03:02,843
world.

47
00:03:04,384 --> 00:03:09,205
Which is, besides annoying, also what makes the subject so interesting.

48
00:03:10,205 --> 00:03:14,607
The philosophy of make more with less certainly applies here.

49
00:03:16,047 --> 00:03:19,628
On the screen right now are the topics that I will touch upon today.

50
00:03:20,468 --> 00:03:20,788
Together.

51
00:03:21,390 --> 00:03:23,712
They represent the artistic and technical challenges

52
00:03:23,912 --> 00:03:26,595
of creating and rendering large amounts of vegetation

53
00:03:26,775 --> 00:03:27,695
in our DECIMA engine.

54
00:03:29,137 --> 00:03:33,760
But first, let me start off with some overall information,

55
00:03:34,401 --> 00:03:36,583
history, after which I will quickly

56
00:03:36,643 --> 00:03:37,804
start addressing these subjects.

57
00:03:42,848 --> 00:03:45,710
First, some information on our DECIMA engine and renderer.

58
00:03:46,571 --> 00:03:49,113
We are probably not completely unique at this,

59
00:03:49,713 --> 00:03:50,634
but within DECIMA.

60
00:03:51,811 --> 00:03:56,035
As an artist, I'm able to create and maintain my own shaders.

61
00:03:56,856 --> 00:04:02,942
Of course, this is only possible under the ever watchful eyes of our tech team.

62
00:04:04,844 --> 00:04:10,129
Shader creation happens in Maya through Maya's own shader nodes together with a large amount

63
00:04:10,149 --> 00:04:15,033
of custom shader nodes provided by us, provided by our graphic programmers.

64
00:04:18,168 --> 00:04:23,753
Profiling the performance of these shaders lies with the artists themselves, again under

65
00:04:23,773 --> 00:04:24,994
the guidance of our tech team.

66
00:04:26,134 --> 00:04:31,799
But as such, there's a real feeling of ownership when it comes to the quality of the shaders,

67
00:04:31,859 --> 00:04:34,461
the assets, as well as the performance of my work.

68
00:04:35,862 --> 00:04:41,326
Our Decima engine uses deferred shading and we targeted Horizon Zero Dawn to run 30 frames

69
00:04:41,346 --> 00:04:43,507
a second at 1080p on a PS4 and 4K on a Pro.

70
00:04:49,357 --> 00:04:51,918
When we started to develop what much later would be named

71
00:04:51,958 --> 00:04:56,962
Horizon Zero Dawn, this new IP we were shaping was going to

72
00:04:57,002 --> 00:04:59,603
contain all of the things you see on screen right now.

73
00:05:00,864 --> 00:05:03,946
And from the moment most of us heard the pitch for this new

74
00:05:04,026 --> 00:05:08,109
IP, we were sold, especially me, and especially when it

75
00:05:08,149 --> 00:05:10,671
comes to the BBC nature up there.

76
00:05:11,852 --> 00:05:14,093
And seven years later, I'm standing here in front of you

77
00:05:14,133 --> 00:05:16,315
to talk about it and to talk about.

78
00:05:16,933 --> 00:05:20,135
what has become one of the pillars of Horizon.

79
00:05:24,498 --> 00:05:27,439
While we were slowly formulating and creating the world of Horizon,

80
00:05:27,819 --> 00:05:32,042
the rest of the studio was busy building Killzone Shadowfall,

81
00:05:32,842 --> 00:05:35,323
a launch title on the new PS4.

82
00:05:36,244 --> 00:05:38,665
Within this game, behind enemy lines,

83
00:05:39,666 --> 00:05:41,727
the one nature level in Killzone Shadowfall

84
00:05:42,107 --> 00:05:43,608
can be seen as Horizon's testbed.

85
00:05:44,794 --> 00:05:50,057
It was a first real test in dealing with the production, the look and the movement of vegetation.

86
00:05:52,158 --> 00:05:57,400
We soon discovered that since vegetation acids are not static acids, but acids with a layer

87
00:05:57,440 --> 00:06:02,563
of circulation on top, outsourcing and maintaining them proved to be slightly difficult.

88
00:06:03,924 --> 00:06:08,766
We also got a good look at the performance of this nature level and that learned us that

89
00:06:08,846 --> 00:06:13,588
creating foliage the Killzone way would not work in the open world of Horizon.

90
00:06:14,244 --> 00:06:18,527
We really needed to rethink polygon, shader, and texture budgets.

91
00:06:20,169 --> 00:06:23,671
This level also marked the first humble beginnings of the placement system.

92
00:06:24,432 --> 00:06:29,876
We had an up and running in Behind Enemy Line in the simplest form, but it told us that

93
00:06:29,956 --> 00:06:35,580
without the placement system, we would not be able to create the world of Horizon, not

94
00:06:35,680 --> 00:06:37,622
the world that we truly envisioned.

95
00:06:40,512 --> 00:06:47,033
To emphasize this, I would like to point to a talk that my colleague Jaap, who is here

96
00:06:47,194 --> 00:06:50,874
today as well, gave last year at GDC.

97
00:06:50,934 --> 00:06:55,755
You can find the paper on Guerrilla's website and of course you can watch it in the GDC

98
00:06:55,795 --> 00:06:56,015
vault.

99
00:06:57,336 --> 00:07:03,677
But the short version is we created a system in which an artist can describe a large variety

100
00:07:03,877 --> 00:07:08,578
of interesting and believable environments which can be applied anywhere in the world.

101
00:07:09,456 --> 00:07:11,837
We wanted the system to be highly art-directable

102
00:07:12,437 --> 00:07:15,297
and seamlessly integrate with manual placed art.

103
00:07:16,238 --> 00:07:18,958
It needed to be fully data-driven, deterministic,

104
00:07:19,619 --> 00:07:20,299
locally stable.

105
00:07:22,819 --> 00:07:25,820
It helps us not only filling the world quickly,

106
00:07:26,300 --> 00:07:29,341
but also in testing phases and testing

107
00:07:29,381 --> 00:07:31,662
the scale and performance of new assets, for instance.

108
00:07:32,342 --> 00:07:36,923
So I truly recommend checking out Jaap's talk.

109
00:07:37,143 --> 00:07:38,903
I'll supply a link at the end of this.

110
00:07:39,920 --> 00:07:41,381
presentation in the last slide.

111
00:07:44,322 --> 00:07:47,023
Okay. Let's start with the movement of our foliage.

112
00:07:48,084 --> 00:07:52,926
From the start, we knew that simulation of nature needed to be tied in with the

113
00:07:52,966 --> 00:07:54,767
weather system we were designing for our game.

114
00:07:55,307 --> 00:07:58,288
It needed to be art and gameplay driven and controllable.

115
00:07:59,849 --> 00:08:03,230
It needed to drive the vertex program of our vegetation shaders.

116
00:08:05,791 --> 00:08:09,253
So at the base of our simulation.

117
00:08:09,784 --> 00:08:11,165
lies the global wind force field.

118
00:08:16,148 --> 00:08:20,330
Before Horizon, force fields, or wind boxes as we called them,

119
00:08:21,031 --> 00:08:22,952
were mainly used to drive the movement of particles.

120
00:08:24,733 --> 00:08:25,854
They were used locally.

121
00:08:26,334 --> 00:08:28,855
They were placed by hand and at a way smaller scale

122
00:08:28,895 --> 00:08:31,237
than the wind we were going to need for the world of Horizon.

123
00:08:32,678 --> 00:08:34,939
The global wind force field, as we called it,

124
00:08:35,699 --> 00:08:37,581
is an extension of these wind boxes,

125
00:08:38,081 --> 00:08:39,102
but with a couple of changes.

126
00:08:40,517 --> 00:08:43,198
Our global wind force field is a compute shader

127
00:08:43,679 --> 00:08:45,140
running at the beginning of every frame

128
00:08:45,720 --> 00:08:48,002
that simulates the influence of a force

129
00:08:48,422 --> 00:08:50,283
onto four categories of spring settings

130
00:08:50,724 --> 00:08:53,826
and updates 3D textures that our shaders can sample.

131
00:08:55,527 --> 00:08:56,648
That was a long sentence.

132
00:08:57,428 --> 00:08:57,648
Sorry.

133
00:08:58,909 --> 00:09:03,312
Okay, first, the wind is attached to the player,

134
00:09:03,973 --> 00:09:05,233
or the camera, if you will.

135
00:09:06,215 --> 00:09:10,957
This allows the simulation to always be at its highest resolution, closest to the player.

136
00:09:11,977 --> 00:09:17,679
Over distance, we gradually sample a 3D texture at a larger scale and at a lower resolution.

137
00:09:18,479 --> 00:09:23,882
So let's have a quick, small visualization of our global wind force field in-game.

138
00:09:28,383 --> 00:09:35,166
So, local around the player, and as soon as Aloy stops, I'll zoom out a bit.

139
00:09:36,343 --> 00:09:40,666
And you'll see that this is the second cascade.

140
00:09:42,047 --> 00:09:44,428
And we have another one for, yeah,

141
00:09:44,509 --> 00:09:46,850
this scaling is a little bit off of this one.

142
00:09:46,870 --> 00:09:52,534
But I guess this sort of shows you what we do.

143
00:09:55,216 --> 00:09:57,337
The setup you just saw gives us the ability

144
00:09:57,737 --> 00:10:00,119
to simulate four different categories of spring settings.

145
00:10:00,920 --> 00:10:02,761
Without any additional shader logic,

146
00:10:02,961 --> 00:10:05,683
this allows us to set up distinctive different movement.

147
00:10:06,238 --> 00:10:07,659
for three types of assets.

148
00:10:08,800 --> 00:10:11,181
We've divided these assets, as you can see,

149
00:10:11,482 --> 00:10:12,402
into three categories.

150
00:10:14,643 --> 00:10:17,085
I told you we could simulate up to four.

151
00:10:17,425 --> 00:10:20,807
So in the end, we call it special.

152
00:10:20,847 --> 00:10:24,629
But in the end, we used the last sample

153
00:10:24,669 --> 00:10:28,071
to drive our banners and tarps.

154
00:10:29,292 --> 00:10:31,033
But that's a completely different story.

155
00:10:33,643 --> 00:10:36,624
For rendering and shading, for all intents and purposes,

156
00:10:36,664 --> 00:10:38,505
we only use two shaders, though.

157
00:10:39,505 --> 00:10:41,866
We actually started off, I really wanted this,

158
00:10:41,906 --> 00:10:43,206
but I couldn't make it work.

159
00:10:43,806 --> 00:10:45,887
We actually started off with only one shader

160
00:10:46,627 --> 00:10:47,447
to handle everything.

161
00:10:48,307 --> 00:10:50,908
But over time, we found that grass needed a bit more

162
00:10:50,988 --> 00:10:53,829
specialized approach, so we built a more dedicated shader

163
00:10:53,889 --> 00:10:54,149
for it.

164
00:10:55,089 --> 00:10:56,509
I will talk about grass a little bit later,

165
00:10:56,910 --> 00:10:59,390
but I wanted to start off with a look at the Vertex

166
00:10:59,410 --> 00:11:02,171
program of the shader that drives our trees and plants.

167
00:11:05,260 --> 00:11:11,084
So we have a way to simulate wind, but that still needs to translate into the movement of assets on our screens.

168
00:11:11,965 --> 00:11:16,688
To do this, we took a similar approach as described in GPU Gems 3,

169
00:11:17,188 --> 00:11:20,731
where a skinning approximation was stored in the vertex colors of our mesh.

170
00:11:21,732 --> 00:11:28,737
Back in 2011, this was one of the first articles I researched when I was starting to tinker with vegetation.

171
00:11:29,977 --> 00:11:33,900
And to this day, this way of storing skinned data...

172
00:11:34,802 --> 00:11:37,822
is one of the few things that did not change during production.

173
00:11:38,522 --> 00:11:40,062
We changed a lot of things over time,

174
00:11:40,483 --> 00:11:44,243
but this setup proved to work on all assets, large and small.

175
00:11:45,103 --> 00:11:45,984
Let me show you what we did.

176
00:11:48,124 --> 00:11:51,624
Experimenting with our wind and looking at foliage in motion,

177
00:11:51,724 --> 00:11:55,405
in real life, we found that to convincingly mimic,

178
00:11:55,605 --> 00:11:57,646
because we're still mimicking, we

179
00:11:57,666 --> 00:12:00,526
needed three levels of detail, large scale motion

180
00:12:01,086 --> 00:12:03,647
or complete bend of entire asset.

181
00:12:04,212 --> 00:12:07,513
medium scale motion, which will deal with the branches,

182
00:12:07,753 --> 00:12:10,234
and small motion, which will deal with parts

183
00:12:10,254 --> 00:12:11,414
of branches or leaves.

184
00:12:14,116 --> 00:12:17,557
So first, we want to have the whole asset react to the wind.

185
00:12:18,117 --> 00:12:22,599
We want it to bend because these assets are way less rigid

186
00:12:22,779 --> 00:12:24,400
at the top as opposed to the bottom.

187
00:12:25,020 --> 00:12:26,641
So we use the height of the asset

188
00:12:26,801 --> 00:12:29,122
as a gradient for this large scale motion.

189
00:12:31,042 --> 00:12:31,983
The next level of movement.

190
00:12:32,328 --> 00:12:34,409
is that of the branches and everything attached to it.

191
00:12:34,969 --> 00:12:37,629
Starting at the trunk, we give the asset a gradient.

192
00:12:37,729 --> 00:12:39,670
For us, the gradient is in blue.

193
00:12:40,410 --> 00:12:43,270
To approximate the rigidity these branches have,

194
00:12:43,770 --> 00:12:46,431
simply put, we store distance to trunk.

195
00:12:49,691 --> 00:12:51,712
Now we're getting to the last level, the leaves,

196
00:12:52,052 --> 00:12:55,652
or anything that's small and thin enough to act like leaves.

197
00:12:56,713 --> 00:12:58,473
What we do here in our red channel

198
00:12:58,973 --> 00:13:01,133
is store distance to branch.

199
00:13:03,740 --> 00:13:07,042
We also use the green channel, and we use it as an index.

200
00:13:09,004 --> 00:13:10,685
We do this way.

201
00:13:11,465 --> 00:13:11,645
Sorry.

202
00:13:12,166 --> 00:13:15,928
This way we can offset our animation of our branches

203
00:13:16,188 --> 00:13:16,789
in our shader.

204
00:13:17,789 --> 00:13:19,610
Think of it as a time offset.

205
00:13:22,032 --> 00:13:24,413
We also store pre-computed ambient occlusion

206
00:13:24,854 --> 00:13:26,795
in the alpha channel, which we use

207
00:13:26,815 --> 00:13:28,916
for a couple of different adjustments in the shaders

208
00:13:28,996 --> 00:13:29,277
later on.

209
00:13:35,193 --> 00:13:35,673
Ah, sorry.

210
00:13:37,254 --> 00:13:38,534
With the vertex colors in place,

211
00:13:38,834 --> 00:13:41,035
our vegetation shader can go to work.

212
00:13:41,916 --> 00:13:43,336
All of our assets need to be driven

213
00:13:43,816 --> 00:13:44,777
through this vertex shader,

214
00:13:44,817 --> 00:13:49,039
so we ended up opening a couple of variables

215
00:13:49,319 --> 00:13:50,819
that allowed us to tweak the animation

216
00:13:51,019 --> 00:13:52,220
on an asset per asset basis.

217
00:13:53,520 --> 00:13:55,141
These variables are marked in orange,

218
00:13:55,821 --> 00:13:59,543
and these five were enough to handle

219
00:13:59,563 --> 00:14:01,904
the complete amount of variation that we have in game.

220
00:14:03,084 --> 00:14:04,185
Rigidity is an easy one.

221
00:14:04,668 --> 00:14:09,711
Not all trees sway as much, so certain trees need to be dialed down or pumped up.

222
00:14:11,152 --> 00:14:14,754
For branches, we have two controls, sorry, three controls.

223
00:14:16,195 --> 00:14:19,897
We have bend, which is the motion along the vector of the wind.

224
00:14:21,277 --> 00:14:27,561
We have sway, where we can scale the amount of motion perpendicular to the vector of the wind.

225
00:14:28,241 --> 00:14:32,163
And we have lift, which is literally a scaler for our up and down motion.

226
00:14:33,533 --> 00:14:35,294
that we can bump up or dial down.

227
00:14:36,154 --> 00:14:39,817
So we literally allow scalar of motion

228
00:14:40,077 --> 00:14:41,818
on three axis for our branches.

229
00:14:43,619 --> 00:14:47,622
The last one is our micro motion, our leaf motion.

230
00:14:48,763 --> 00:14:51,004
Based on the strength of the wind,

231
00:14:51,745 --> 00:14:54,787
I move a tiny 3D noise texture through object space

232
00:14:55,367 --> 00:14:59,950
and I use this to move what I've designated to be my leaves.

233
00:15:00,331 --> 00:15:02,552
So what you just saw in the red channel.

234
00:15:07,302 --> 00:15:09,103
All right, since plants in our game

235
00:15:09,303 --> 00:15:12,584
have exactly the same shader as trees, but are usually smaller,

236
00:15:13,704 --> 00:15:16,485
we have the ability to cull the overall bend completely

237
00:15:16,545 --> 00:15:20,567
from the shader, reducing cost and potentially also

238
00:15:20,907 --> 00:15:22,467
unwanted bending into the terrain.

239
00:15:25,708 --> 00:15:28,189
Also, another big help within our shader

240
00:15:29,150 --> 00:15:31,010
is this little formula of a ramp function.

241
00:15:32,471 --> 00:15:34,652
We multiply this by the maximum of the wind in game.

242
00:15:35,374 --> 00:15:38,815
And we have the ability to ramp up the influence of the wind

243
00:15:39,575 --> 00:15:40,535
for different assets.

244
00:15:41,236 --> 00:15:44,837
For instance, I can recall our directional feedback

245
00:15:44,917 --> 00:15:46,658
about the leaves of our aspen trees

246
00:15:47,258 --> 00:15:50,299
needing to move earlier at lower wind speeds.

247
00:15:51,599 --> 00:15:54,440
So this formula was a quick way to really differentiate

248
00:15:54,500 --> 00:15:55,841
that asset from the other ones.

249
00:16:00,262 --> 00:16:00,723
Grasses.

250
00:16:03,965 --> 00:16:06,107
We had such ambitious plans for the grass

251
00:16:06,367 --> 00:16:07,387
when we started Horizon.

252
00:16:08,868 --> 00:16:12,030
First off, and we did not really waver from this,

253
00:16:12,931 --> 00:16:15,092
the grass needed to be everywhere.

254
00:16:17,594 --> 00:16:20,215
But we wanted our grass to be geometry, no alpha planes.

255
00:16:20,255 --> 00:16:22,637
We wanted Aloy to squash it with her feet

256
00:16:22,697 --> 00:16:25,719
and move it with her hands and all those things

257
00:16:26,239 --> 00:16:29,301
you envision when you do not know precisely what

258
00:16:29,461 --> 00:16:30,942
the PS4 is going to bring.

259
00:16:32,783 --> 00:16:33,663
And we had it up and running.

260
00:16:34,100 --> 00:16:36,361
It was part of our earliest prototypes,

261
00:16:37,502 --> 00:16:41,025
and the rendering of that grass took up the entire frame.

262
00:16:43,326 --> 00:16:46,168
So we started a journey, simplifying our grass

263
00:16:46,529 --> 00:16:49,831
bit by bit, finding out what needed to be

264
00:16:49,891 --> 00:16:51,973
done to make more with less.

265
00:16:53,714 --> 00:16:54,734
And this is what we ended up with.

266
00:16:58,998 --> 00:17:01,659
As little or as few triangles as we could,

267
00:17:02,480 --> 00:17:03,701
a dedicated grass shader.

268
00:17:04,269 --> 00:17:07,271
and some clever artistic choices when it comes to the texture.

269
00:17:09,772 --> 00:17:13,274
Let me also point out in the list on screen right now,

270
00:17:13,434 --> 00:17:16,695
sometimes I talk about high and low shaders from now on.

271
00:17:17,676 --> 00:17:20,277
And what that means is we have the ability

272
00:17:20,737 --> 00:17:23,238
to lot out certain functionalities in our shaders

273
00:17:23,419 --> 00:17:27,000
on a per mesh or per lot basis.

274
00:17:27,941 --> 00:17:30,782
For grass, that would mean that lot three here.

275
00:17:31,421 --> 00:17:34,822
would not have an animated vertex program at that distance.

276
00:17:35,943 --> 00:17:38,884
And also, for that instance, I do not

277
00:17:38,944 --> 00:17:40,705
sample a normal texture anymore.

278
00:17:42,046 --> 00:17:42,886
But I'm drifting off a bit.

279
00:17:43,246 --> 00:17:44,487
Let's go to the vertex program.

280
00:17:46,648 --> 00:17:50,669
We sample our wind from our force field at object center,

281
00:17:51,029 --> 00:17:52,910
and we use the height of the grass as a gradient

282
00:17:52,950 --> 00:17:54,411
to mimic rigidity of the mesh.

283
00:17:55,731 --> 00:17:58,453
We start displacing the vertices of the grass,

284
00:17:58,693 --> 00:18:00,333
and this will be our base motion.

285
00:18:01,691 --> 00:18:05,753
But as you can see, this alone will not always give us something spectacular.

286
00:18:06,433 --> 00:18:07,634
And we need more than this alone.

287
00:18:09,135 --> 00:18:14,037
What I also wanted to avoid is having the grass tilt over to one particular direction

288
00:18:14,217 --> 00:18:18,459
or standing still in one position for a long period of time.

289
00:18:18,839 --> 00:18:21,601
This gave us unwanted artifacts.

290
00:18:23,002 --> 00:18:27,684
So we layer some additional motion on top.

291
00:18:30,205 --> 00:18:30,645
And by default...

292
00:18:31,192 --> 00:18:36,617
Length of the force field, I added some large scale motion.

293
00:18:36,697 --> 00:18:40,920
Two periodic functions combined to make little figure eights.

294
00:18:41,921 --> 00:18:45,283
And it's quite a soothing animation, I think.

295
00:18:46,464 --> 00:18:48,466
The motion is sampled for the whole mesh,

296
00:18:48,746 --> 00:18:52,929
so per asset, the vertices will move in unison.

297
00:18:54,891 --> 00:18:57,293
On top of that, we add some small scale motion.

298
00:18:58,013 --> 00:19:01,395
one periodic function displacing the vertices along their normals.

299
00:19:03,917 --> 00:19:06,900
The ambient animation, large and small together,

300
00:19:07,240 --> 00:19:10,162
accounts for about 80% of the total animation.

301
00:19:10,923 --> 00:19:14,285
The rest comes from the wind sample two slides ago.

302
00:19:17,127 --> 00:19:20,150
On top of our simulation, our grass also has to do a little more.

303
00:19:21,210 --> 00:19:26,394
I really wanted to avoid the player looking down on planes

304
00:19:26,514 --> 00:19:27,635
and having the...

305
00:19:28,328 --> 00:19:31,530
feeling that the geometry disappears when looking down

306
00:19:31,731 --> 00:19:32,291
on our mesh.

307
00:19:33,232 --> 00:19:38,856
So we tilt our mesh planes away from the camera, like so.

308
00:19:39,517 --> 00:19:43,380
So when the camera moves up, we push the verts a little bit

309
00:19:43,420 --> 00:19:49,505
further away to try to avoid having the grass look like

310
00:19:49,625 --> 00:19:52,287
cards, because they are cards.

311
00:19:52,527 --> 00:19:56,430
I mean, our grass meshes have a footprint.

312
00:19:57,175 --> 00:19:58,856
of one and a half meters approximately.

313
00:19:59,276 --> 00:20:01,697
And placing them in the world without looking at the terrain

314
00:20:01,757 --> 00:20:05,078
resulted in some unwanted clipping or floating issues.

315
00:20:06,339 --> 00:20:09,200
Having all vertices follow the terrain solved all this.

316
00:20:09,520 --> 00:20:11,481
So based on the height map of our terrain,

317
00:20:11,961 --> 00:20:14,742
we displaced the vertices of our grass and object space.

318
00:20:16,983 --> 00:20:20,184
Finally, we also do two little things to help with loading.

319
00:20:20,764 --> 00:20:22,725
We scale the animation down over distance

320
00:20:23,005 --> 00:20:25,506
so that we can remove that animation completely.

321
00:20:26,173 --> 00:20:29,855
from our last lot, and scaling the whole mesh down

322
00:20:30,636 --> 00:20:32,677
makes blending the assets with the terrain easier,

323
00:20:33,217 --> 00:20:34,718
and it gives a little performance boost.

324
00:20:37,120 --> 00:20:38,901
All these little programs together

325
00:20:39,361 --> 00:20:42,563
make up the complete vertex program of our grass.

326
00:20:43,183 --> 00:20:44,804
So let's move on to shading.

327
00:20:47,426 --> 00:20:49,007
So we have our meshes sorted.

328
00:20:49,607 --> 00:20:51,709
Let's move on to our shading setup.

329
00:20:53,610 --> 00:20:55,591
Transparency in games.

330
00:20:56,104 --> 00:20:58,805
Even alpha-tested transparencies are expensive.

331
00:21:00,226 --> 00:21:02,047
And we did not have a lot of experience

332
00:21:02,087 --> 00:21:04,628
with rendering alpha-tested assets during our Killzone

333
00:21:04,648 --> 00:21:04,928
years.

334
00:21:05,768 --> 00:21:08,650
And vegetation, oversimplified as it is,

335
00:21:09,190 --> 00:21:11,971
is relying a lot on alpha testing.

336
00:21:12,571 --> 00:21:16,053
So the question was, how do we handle the amount of vegetation

337
00:21:16,373 --> 00:21:18,714
that we know the world of Horizon was going to need?

338
00:21:20,935 --> 00:21:21,075
Well.

339
00:21:21,663 --> 00:21:23,064
We went about it like this.

340
00:21:23,645 --> 00:21:26,686
What we do is we render all our alpha-tested meshes

341
00:21:26,867 --> 00:21:27,547
in two passes.

342
00:21:28,227 --> 00:21:29,488
First, as earlier cluders.

343
00:21:30,289 --> 00:21:32,330
After that, we render them normally.

344
00:21:33,490 --> 00:21:36,552
In this initial depth-only pass, we do our alpha test.

345
00:21:38,153 --> 00:21:40,715
Rendering this pass first will give us

346
00:21:40,815 --> 00:21:43,356
all the depth information, after which we only

347
00:21:43,416 --> 00:21:46,578
have to do a depth compare when rendering our geometry

348
00:21:46,618 --> 00:21:48,439
pass without an alpha test.

349
00:21:49,825 --> 00:21:53,967
This is important because alpha test is incredibly expensive,

350
00:21:54,247 --> 00:21:58,469
but this way we operate on a very cheap depth-only shader.

351
00:21:59,570 --> 00:22:01,891
The geometry shader is much more expensive,

352
00:22:02,471 --> 00:22:06,573
but is now accelerated by a very efficient fixed function depth

353
00:22:06,613 --> 00:22:06,873
test.

354
00:22:09,315 --> 00:22:11,816
So let's analyze a frame of our game

355
00:22:12,256 --> 00:22:14,377
to see what that means for rendering times on the GPU.

356
00:22:17,092 --> 00:22:20,712
Here you can see a capture of our GPU profiler in game.

357
00:22:21,852 --> 00:22:22,833
I am filtering.

358
00:22:23,813 --> 00:22:26,273
If you look in the top right, there's placement.

359
00:22:26,693 --> 00:22:28,694
I'm filtering on placement right now.

360
00:22:29,174 --> 00:22:31,854
So the percentage that you see here

361
00:22:32,074 --> 00:22:35,135
deal with all the assets placed by our placement system.

362
00:22:36,115 --> 00:22:40,616
Technically, not all are alpha tested assets,

363
00:22:41,536 --> 00:22:45,537
because we use the placement system for a lot more

364
00:22:45,757 --> 00:22:46,857
than only alpha tested.

365
00:22:47,355 --> 00:22:54,140
assets. But in a forest location like this, you can bet that 95% is alpha tested. But

366
00:22:54,160 --> 00:22:58,843
the numbers that we are interested in are our depth prime pass at almost 10% of our

367
00:22:58,883 --> 00:23:07,930
frame and our geometry pass at about 11.5. So that's 21.345 in total. Now let's see the

368
00:23:07,970 --> 00:23:14,074
cost of rendering all this without our depth only pass. That's a huge difference.

369
00:23:16,156 --> 00:23:16,296
So

370
00:23:17,230 --> 00:23:22,631
Upon noticing this early on, it became clear what a huge difference the depth-only pass

371
00:23:22,671 --> 00:23:22,871
made.

372
00:23:23,391 --> 00:23:28,212
So simply put, the alpha-tested part needed to run on the cheapest shader possible.

373
00:23:30,613 --> 00:23:32,714
So our alpha textures.

374
00:23:34,814 --> 00:23:41,196
We started Horizon Zero Dawn with sign-distance alpha textures that could give the artist

375
00:23:41,236 --> 00:23:44,317
control over the size of the alpha in our shader.

376
00:23:45,314 --> 00:23:48,276
We could enlarge and shrink our alpha in shader,

377
00:23:48,876 --> 00:23:52,138
and we were enlarging our alpha over distance.

378
00:23:53,019 --> 00:23:55,481
We did this to combat the quality decrease that

379
00:23:56,081 --> 00:23:59,283
happens when the texture switches to lower mipmaps.

380
00:24:00,904 --> 00:24:03,746
Also, at some point, we had dynamic snow in our shader

381
00:24:04,626 --> 00:24:07,608
that could also adjust the alpha on the fly.

382
00:24:09,109 --> 00:24:12,512
However, as the world of Horizon grew bigger and bigger,

383
00:24:12,985 --> 00:24:14,825
and more populated, we were always

384
00:24:14,865 --> 00:24:16,345
looking to improve performance.

385
00:24:17,386 --> 00:24:20,326
And we found that adjusting the alpha in the shader

386
00:24:20,726 --> 00:24:22,066
proved to be a costly operation.

387
00:24:23,067 --> 00:24:26,687
And we really were looking for percentages to shave off.

388
00:24:29,468 --> 00:24:33,429
So let's have a look at our GPU profiler again.

389
00:24:33,969 --> 00:24:35,629
And here's a little disclaimer.

390
00:24:36,669 --> 00:24:39,430
It's sometimes hard to replicate certain situations

391
00:24:39,490 --> 00:24:42,110
when so much changes over the course of a project.

392
00:24:42,850 --> 00:24:46,573
So this is a little test scene that I built to hopefully mimic

393
00:24:46,853 --> 00:24:47,294
the effect.

394
00:24:49,275 --> 00:24:52,817
But here is the GPU profiler again.

395
00:24:54,138 --> 00:24:57,321
The two numbers to look at here are once more the depth prime,

396
00:24:57,761 --> 00:24:59,462
but also the shadow pass is influenced

397
00:24:59,903 --> 00:25:02,044
by the way the alpha texture is handled in the shader.

398
00:25:03,025 --> 00:25:05,727
Shadows are at almost 9% of the frame.

399
00:25:06,347 --> 00:25:07,028
Depth prime is at 6.

400
00:25:09,649 --> 00:25:10,710
And here is it with.

401
00:25:11,248 --> 00:25:15,932
what we changed it to a nice drop of almost 2% on shadow,

402
00:25:16,452 --> 00:25:19,594
and depth prime depth dropped roughly a percent.

403
00:25:21,296 --> 00:25:23,337
So what did we do to get these results?

404
00:25:25,139 --> 00:25:27,441
On finding out the cost of adjusting our alpha

405
00:25:27,521 --> 00:25:31,043
through our shader, we removed that functionality

406
00:25:31,364 --> 00:25:34,186
and replaced it by generating a custom MIP chain.

407
00:25:35,607 --> 00:25:37,148
This makes sense, because we already

408
00:25:37,228 --> 00:25:38,249
sampled this in our shader.

409
00:25:38,949 --> 00:25:40,811
So anything that we can get out of this is free.

410
00:25:41,940 --> 00:25:43,781
We built an offline tool to do this for us,

411
00:25:44,702 --> 00:25:47,183
and this tool is described on the slide here.

412
00:25:47,983 --> 00:25:50,525
And in short, it does this.

413
00:25:51,345 --> 00:25:53,586
The process calculates the coverage

414
00:25:54,387 --> 00:25:57,788
of the alpha-tested image and builds up a normal MIP chain.

415
00:25:58,849 --> 00:26:05,712
Then we upsample each MIP bilinear, build a histogram,

416
00:26:06,033 --> 00:26:08,494
and within that histogram, find the point that

417
00:26:08,574 --> 00:26:10,175
matches our original coverage.

418
00:26:11,627 --> 00:26:14,229
Our alpha test value in-game is 0.5.

419
00:26:14,509 --> 00:26:17,331
So dividing 0.5 by the value found

420
00:26:17,772 --> 00:26:20,154
will give us the amount with which

421
00:26:20,234 --> 00:26:24,157
we need to scale that MIP to end up with our original coverage.

422
00:26:25,798 --> 00:26:26,619
Sounds logical, right?

423
00:26:29,662 --> 00:26:31,423
And here's a representation of our MIP chain

424
00:26:32,023 --> 00:26:34,626
and its coverage after a clip at 0.5.

425
00:26:38,589 --> 00:26:39,470
And the bottom two rows.

426
00:26:40,392 --> 00:26:45,796
that appeared represent the scaled up alpha created by our own custom coverage algorithm

427
00:26:46,756 --> 00:26:54,281
and its coverage after a clip at 0.5. So all the work that was done by a shader now resides

428
00:26:54,502 --> 00:26:55,582
in a single texture sample.

429
00:27:02,667 --> 00:27:08,831
Okay, making your alpha as small as visually possible is always good practice, but another

430
00:27:08,851 --> 00:27:09,652
thing to keep an eye on.

431
00:27:10,213 --> 00:27:13,954
especially for assets that you know you will draw a huge amount of,

432
00:27:14,734 --> 00:27:19,035
is wherever you can, make your alpha small enough that it will fit in the cache.

433
00:27:19,975 --> 00:27:23,376
Especially for our grasses, this simple change was a huge win.

434
00:27:25,656 --> 00:27:32,038
A BC4 compressed texture, that texture over there, 256 by 128,

435
00:27:32,098 --> 00:27:35,738
comes in at 16 kilobytes without mipmaps,

436
00:27:35,778 --> 00:27:37,119
21 kilobytes with mipmaps.

437
00:27:40,641 --> 00:27:45,704
And I really started off with the version without the mipmaps

438
00:27:46,525 --> 00:27:48,987
until the graphic programmer that was working on our

439
00:27:49,307 --> 00:27:52,789
anti-aliasing solution saw my check-in

440
00:27:53,329 --> 00:27:55,111
and wasn't too pleased about it.

441
00:27:56,171 --> 00:28:01,795
So we went for the larger version with the mipmaps included.

442
00:28:03,836 --> 00:28:08,039
But you do really need a good...

443
00:28:08,391 --> 00:28:10,952
anti-aliasing solution to make this look awesome.

444
00:28:11,792 --> 00:28:18,793
So a shout out to a paper that our graphic programmer did

445
00:28:18,973 --> 00:28:24,695
with a Kojima programmer on SIGGRAPH last year.

446
00:28:25,675 --> 00:28:29,496
This is, in short, the anti-aliasing solution

447
00:28:29,536 --> 00:28:31,016
that we have running in game right now.

448
00:28:32,977 --> 00:28:35,417
Again, I will supply a link after the talk

449
00:28:36,118 --> 00:28:37,098
in my last slide.

450
00:28:39,678 --> 00:28:42,560
All right, let's have a look at the rest of our Pixel program.

451
00:28:44,562 --> 00:28:47,283
So our Decima engine uses deferred shading

452
00:28:47,704 --> 00:28:50,726
and our vegetation shaders right out to these G buffers.

453
00:28:52,947 --> 00:28:55,629
And these are the textures that we supply to our shader,

454
00:28:56,489 --> 00:29:00,432
with the exception of grass, which never has

455
00:29:00,632 --> 00:29:02,013
an ambient occlusion texture.

456
00:29:02,874 --> 00:29:06,336
We also omit translucency when we render most barks.

457
00:29:10,249 --> 00:29:13,911
On the slide, you'll see a tool we have,

458
00:29:14,051 --> 00:29:15,172
which is our texture set tool.

459
00:29:15,993 --> 00:29:17,434
This is a cute little amazing tool

460
00:29:17,454 --> 00:29:19,375
that lets us load in Photoshop files.

461
00:29:19,415 --> 00:29:20,976
And with the push of a button, we'll

462
00:29:21,016 --> 00:29:23,178
pack these into compressed DDS files

463
00:29:23,678 --> 00:29:25,440
ready for use in game and editor.

464
00:29:26,561 --> 00:29:29,143
And what you see here is a typical setup

465
00:29:29,803 --> 00:29:31,664
of vegetation textures.

466
00:29:33,226 --> 00:29:34,907
So two BC7s and a BC4.

467
00:29:39,625 --> 00:29:40,666
All right, normals.

468
00:29:41,747 --> 00:29:44,009
If we are dealing with proper geometry,

469
00:29:44,329 --> 00:29:46,250
like the plant on this slide, we do not

470
00:29:46,290 --> 00:29:49,513
have to do much more than we would with any other 3D asset.

471
00:29:50,394 --> 00:29:51,775
We only have to take into account

472
00:29:51,815 --> 00:29:53,857
that we need to render it double-sided.

473
00:29:54,758 --> 00:29:57,180
So based on a check, to see if we're

474
00:29:57,240 --> 00:29:59,041
rendering a front or a back-facing triangle,

475
00:29:59,081 --> 00:30:00,643
we flip the normal accordingly.

476
00:30:07,364 --> 00:30:11,106
But where assets rely heavily on alpha planes or triangles,

477
00:30:11,686 --> 00:30:15,428
flipping the normal incorrectly can be extremely useful

478
00:30:15,488 --> 00:30:18,709
in hiding the carp-like nature of our canopies and our grass.

479
00:30:20,130 --> 00:30:23,171
What we do is we adjust the normals of our vertices

480
00:30:24,332 --> 00:30:27,053
and take the absolute value of our view space normal

481
00:30:27,413 --> 00:30:30,335
to ensure we never render normals facing away

482
00:30:30,375 --> 00:30:30,935
from our camera.

483
00:30:32,376 --> 00:30:35,597
We use an isosurface to generate our normals.

484
00:30:36,277 --> 00:30:38,519
And this is an example of how the mesh would

485
00:30:38,559 --> 00:30:41,301
look surrounding our canopy.

486
00:30:42,142 --> 00:30:44,484
And we transfer those normals onto the verts.

487
00:30:48,067 --> 00:30:50,629
And this is what the normal buffer would look like.

488
00:30:52,110 --> 00:30:55,793
So let's compare between the incorrect and the normal

489
00:30:55,933 --> 00:30:56,233
normals.

490
00:30:58,335 --> 00:30:59,096
This is a G-buffer.

491
00:31:00,937 --> 00:31:03,820
And this is what we ended up choosing.

492
00:31:04,735 --> 00:31:10,879
It's a highly artistic choice because you're breaking lighting and translucency in a way,

493
00:31:11,539 --> 00:31:12,760
so we did not use it on everything.

494
00:31:14,021 --> 00:31:19,585
But again, when dealing with approximations of geometry, it can help in hiding the simple

495
00:31:19,625 --> 00:31:20,625
nature of your assets.

496
00:31:23,507 --> 00:31:28,751
Especially on grass, where we tried a lot of things to hide the fact that it literally

497
00:31:28,991 --> 00:31:30,172
are 32 triangles.

498
00:31:32,428 --> 00:31:34,630
We leave the geometry normals as is,

499
00:31:35,210 --> 00:31:38,453
but we still do the apps on the z-component of our view space

500
00:31:38,493 --> 00:31:38,773
normal.

501
00:31:40,394 --> 00:31:41,995
And again, a GBuffer shot.

502
00:31:45,338 --> 00:31:45,899
The albedo.

503
00:31:47,320 --> 00:31:50,242
All our vegetation in our game is colorized.

504
00:31:50,722 --> 00:31:53,925
And for the colorization in our entire game,

505
00:31:54,365 --> 00:31:58,269
we have a texture array in which we store 64 what we call

506
00:31:58,409 --> 00:31:58,929
ecotopes.

507
00:31:59,268 --> 00:32:02,450
colorized textures of 128 by 8 pixels.

508
00:32:05,252 --> 00:32:07,953
Apart from the colorization of vegetation, which

509
00:32:08,033 --> 00:32:11,555
is enlarged on the slide, these textures

510
00:32:11,695 --> 00:32:16,478
also hold colorization of our rocks, terrain, dust,

511
00:32:17,078 --> 00:32:17,578
and lichen.

512
00:32:19,699 --> 00:32:21,480
The place in the world of an asset

513
00:32:22,120 --> 00:32:26,463
dictates which texture to sample, so the W component.

514
00:32:27,892 --> 00:32:34,836
Different types of what we call world data are captured in one grayscale texture that

515
00:32:34,877 --> 00:32:36,197
drives the V component.

516
00:32:37,158 --> 00:32:45,263
And the artist can choose from eight bands and think of these as choices for different

517
00:32:45,283 --> 00:32:48,084
types of assets within the colorization texture.

518
00:32:49,825 --> 00:32:55,449
All vegetation assets take one sample for the whole object, except grass, which we sample

519
00:32:55,529 --> 00:32:56,009
per vertex.

520
00:33:00,738 --> 00:33:02,960
To facilitate all this, we average out

521
00:33:02,980 --> 00:33:06,222
the color of our albedo textures to a mid-gray value.

522
00:33:07,503 --> 00:33:09,605
We also have a mask texture in case

523
00:33:10,005 --> 00:33:12,127
there are parts we do not want to colorize.

524
00:33:13,829 --> 00:33:17,612
In our shader, we overlay the sampled colorized value

525
00:33:17,672 --> 00:33:19,653
on top of the sampled albedo texture

526
00:33:20,334 --> 00:33:22,896
through the mask texture with an illuminate function.

527
00:33:23,737 --> 00:33:25,838
The resulting color is the background color

528
00:33:25,878 --> 00:33:27,660
mixed with the foreground color, brighter

529
00:33:27,700 --> 00:33:30,202
where the foreground is bright and darker

530
00:33:30,242 --> 00:33:30,422
where the.

531
00:33:30,937 --> 00:33:31,977
foreground is dark.

532
00:33:34,117 --> 00:33:37,558
And this is what you get when you combine this in shader.

533
00:33:41,199 --> 00:33:47,120
We derive our roughness and reflectance from a combination of texture samples, the ambient

534
00:33:47,180 --> 00:33:53,162
occlusion baked in the vertex alpha, and a variable which for reflectance we fixed at

535
00:33:53,202 --> 00:33:54,022
4% dielectric.

536
00:33:56,597 --> 00:33:59,939
For roughness, we still wanted a little bit of artist control,

537
00:34:00,059 --> 00:34:01,500
so we opened up that variable.

538
00:34:03,222 --> 00:34:06,324
And we added a level or set range version

539
00:34:06,364 --> 00:34:09,085
of our translucency texture on top of that

540
00:34:10,046 --> 00:34:14,129
as an easy way to differentiate the roughness between leaves

541
00:34:14,389 --> 00:34:18,191
and bark, should that be present in a single texture.

542
00:34:20,152 --> 00:34:20,573
On grass.

543
00:34:21,032 --> 00:34:23,614
We do not have a verticolor stream or an ambient occlusion

544
00:34:23,654 --> 00:34:25,855
texture, so we use the translucency texture

545
00:34:26,235 --> 00:34:27,116
to do similar things.

546
00:34:33,359 --> 00:34:37,062
The first translucency, the first three items on screen

547
00:34:37,122 --> 00:34:39,723
here are happening under the hood, so to speak.

548
00:34:40,364 --> 00:34:43,766
And it's not something that we have access to or are

549
00:34:43,826 --> 00:34:45,847
able to adjust in our shaders, but I just

550
00:34:45,867 --> 00:34:48,608
wanted to put them out there for clarification.

551
00:34:49,045 --> 00:34:52,687
The last three items are open for our artists to adjust.

552
00:34:53,968 --> 00:34:57,291
The surface thickness informs the amount of absorption

553
00:34:57,371 --> 00:35:01,293
inside the surface and the wideness of the scattering cone

554
00:35:02,114 --> 00:35:04,816
once it leaves the surface on the other side.

555
00:35:05,557 --> 00:35:09,820
We encode these as translucency amount and translucency

556
00:35:09,860 --> 00:35:12,722
diffusion values for our g-buffers.

557
00:35:13,622 --> 00:35:16,965
The translucency amount is the amount of absorption.

558
00:35:17,392 --> 00:35:20,694
while translucency diffusion is the amount of scattering.

559
00:35:21,875 --> 00:35:24,397
We pretty much locked the amount of diffusion

560
00:35:24,437 --> 00:35:26,879
for all vegetation at a certain value at some point,

561
00:35:27,439 --> 00:35:30,362
and we control the translucency amount by a texture sample.

562
00:35:33,244 --> 00:35:35,485
We also layer on top pre-computed AO,

563
00:35:36,927 --> 00:35:38,968
which is a combination of our AO texture

564
00:35:39,008 --> 00:35:40,689
and the AO stored in the vertex colors.

565
00:35:41,870 --> 00:35:44,793
For grass, again, we use a derivative

566
00:35:44,913 --> 00:35:46,654
of the translucency amount texture.

567
00:35:47,202 --> 00:35:48,543
as our pre-computed AO.

568
00:35:51,146 --> 00:35:52,327
And the last one is a big one.

569
00:35:53,027 --> 00:35:56,150
Where we break away from attempting physical correctness

570
00:35:56,490 --> 00:35:58,992
is in the last phase, where we have the ability

571
00:35:59,052 --> 00:36:00,934
to boost the amount of scattered light.

572
00:36:02,215 --> 00:36:04,637
This gives us more of a surreal effect

573
00:36:04,717 --> 00:36:08,080
that visually was more in line with the overall look

574
00:36:08,340 --> 00:36:08,840
for the game.

575
00:36:12,043 --> 00:36:12,323
All right.

576
00:36:12,724 --> 00:36:15,005
That's sort of our shading explained.

577
00:36:16,798 --> 00:36:20,600
You know what we need for our wind simulation.

578
00:36:21,881 --> 00:36:25,263
Let us now look at the pipeline for creating vegetation.

579
00:36:26,223 --> 00:36:29,425
Once again, when we started, we were the Killzone guys.

580
00:36:29,865 --> 00:36:32,227
So we knew how to build this.

581
00:36:34,288 --> 00:36:35,669
And things like this.

582
00:36:37,229 --> 00:36:43,893
And I had to dig deep, but we even found this.

583
00:36:45,330 --> 00:36:46,571
Killzone vegetation.

584
00:36:50,093 --> 00:36:51,734
So we knew we had our work cut out for us.

585
00:36:52,394 --> 00:36:58,498
And to stretch our legs a bit, we built ourselves an art benchmark to see how far we could push

586
00:36:58,558 --> 00:36:59,098
vegetation.

587
00:37:00,059 --> 00:37:03,081
And I actually found a video of that that I really wanted to share.

588
00:37:05,902 --> 00:37:06,863
This is what we built.

589
00:37:07,603 --> 00:37:09,945
I believe it's in the beginning of 2014 to

590
00:37:13,144 --> 00:37:23,290
at least inform everybody within the company how dense we wanted to go and how much different

591
00:37:23,350 --> 00:37:26,032
assets we wanted to spawn within our forests.

592
00:37:27,973 --> 00:37:30,875
This beauty ran in-game at a whopping 10 frames a second.

593
00:37:32,657 --> 00:37:37,400
And there's some really funky mushrooms on it.

594
00:37:38,721 --> 00:37:42,663
Because for this test, we were still building our models like...

595
00:37:43,060 --> 00:37:45,762
we kind of would any other Killzone asset.

596
00:37:46,483 --> 00:37:48,044
Lots of attention to the highest lot

597
00:37:48,524 --> 00:37:51,126
and hoping to crunch away enough vertices over distance

598
00:37:51,427 --> 00:37:51,987
to make it run.

599
00:37:53,008 --> 00:37:56,070
And we continued to do this for some time during production.

600
00:37:57,912 --> 00:38:00,014
And then came E3 2015.

601
00:38:01,835 --> 00:38:03,276
Our first reveal of Horizon.

602
00:38:03,677 --> 00:38:06,779
Not only a trailer, but we were playable.

603
00:38:07,760 --> 00:38:10,082
And because the game needed to be

604
00:38:10,182 --> 00:38:12,724
playable for our developers to showcase the game.

605
00:38:13,148 --> 00:38:16,750
we needed to do a huge optimization pass on our LODs

606
00:38:17,570 --> 00:38:21,252
through all sorts of software processes.

607
00:38:25,274 --> 00:38:28,135
Not so much on the highest lot, but every other lot

608
00:38:28,255 --> 00:38:28,996
needed to go down.

609
00:38:31,257 --> 00:38:33,258
So when E3 was out the door, we tried

610
00:38:33,278 --> 00:38:36,179
to figure out what we could do to improve

611
00:38:36,199 --> 00:38:38,300
the performance and quality of our LODs

612
00:38:38,641 --> 00:38:41,462
without having to resort on software solutions

613
00:38:41,722 --> 00:38:42,803
to reduce triangles.

614
00:38:44,186 --> 00:38:46,547
It needed to become part of creation.

615
00:38:48,308 --> 00:38:52,210
What we decided on doing was flip the creation process.

616
00:38:52,730 --> 00:38:56,492
So we built our lowest lot first, and if we happy

617
00:38:56,532 --> 00:38:58,333
with the look in game and the performance,

618
00:38:58,813 --> 00:39:02,375
we start adding detail that is needed for our higher meshes.

619
00:39:04,136 --> 00:39:06,437
So let me illustrate this a little bit better.

620
00:39:08,258 --> 00:39:09,959
We built the lowest lot of our components.

621
00:39:10,866 --> 00:39:13,967
that we want to dress our tree or any other assets with.

622
00:39:14,747 --> 00:39:16,947
This is usually a triangle or a quad,

623
00:39:17,327 --> 00:39:18,808
and we spend a small amount of time

624
00:39:18,828 --> 00:39:22,128
sketching out what the texture or the silhouette

625
00:39:22,188 --> 00:39:22,749
could look like.

626
00:39:24,769 --> 00:39:26,309
And then we start building our assets with those.

627
00:39:27,209 --> 00:39:30,410
For this, we have used SpeedTree throughout the development

628
00:39:30,590 --> 00:39:31,110
of Horizon.

629
00:39:32,151 --> 00:39:33,771
And when we're happy with the results,

630
00:39:33,971 --> 00:39:35,331
we spawn these assets in-game.

631
00:39:37,272 --> 00:39:39,952
Looking at things like performance, silhouette.

632
00:39:40,381 --> 00:39:42,682
density of the canopy, all stuff like that.

633
00:39:43,182 --> 00:39:46,883
If we're not happy, these changes can be made quickly.

634
00:39:47,463 --> 00:39:50,104
And we can still modify a lot in this stage.

635
00:39:51,124 --> 00:39:53,605
So as soon as we feel that the asset works,

636
00:39:53,965 --> 00:39:56,106
we go into building the high-resolution component

637
00:39:56,186 --> 00:39:57,787
needed to create our textures from.

638
00:39:59,567 --> 00:40:04,909
And this is an example of a branch that we ended up making.

639
00:40:05,729 --> 00:40:07,210
I think that this is a branch.

640
00:40:08,496 --> 00:40:10,577
It's a combination of Maya and Speedtree.

641
00:40:12,657 --> 00:40:14,738
But these high resolution components,

642
00:40:16,718 --> 00:40:19,879
as long as they match the texture and the texture layout

643
00:40:19,939 --> 00:40:22,880
that you sketched out when you were beginning this asset,

644
00:40:26,061 --> 00:40:28,861
as long as they match, you're fine.

645
00:40:31,002 --> 00:40:33,543
And once we have all the high resolution models built

646
00:40:33,583 --> 00:40:37,103
and laid out, we get them into Maya for texture baking.

647
00:40:38,138 --> 00:40:42,180
We apply our own shaders and have the ability to bake down these meshes and textures into

648
00:40:42,220 --> 00:40:44,962
the UV space that we will need for our game models.

649
00:40:46,883 --> 00:40:52,887
And now, with these textures baked and present, we return to our speed models, which we now

650
00:40:52,947 --> 00:40:56,469
treat as lot three and start loading them up.

651
00:40:57,130 --> 00:41:01,693
In other words, we start detailing lot two and the first one.

652
00:41:03,454 --> 00:41:06,676
The little triangles you see surrounding these meshes...

653
00:41:07,772 --> 00:41:10,713
were a small workaround to make sure that in SpeedTree,

654
00:41:11,654 --> 00:41:14,615
the LODs bounding boxes were similar.

655
00:41:15,655 --> 00:41:17,856
We've used SpeedTree 6 throughout production

656
00:41:17,937 --> 00:41:21,498
and this is a little thing that we needed to do

657
00:41:22,379 --> 00:41:24,259
to make sure that they aligned perfectly.

658
00:41:24,860 --> 00:41:26,460
Newer versions do not have that issue,

659
00:41:27,081 --> 00:41:30,742
but we did not want to switch software halfway

660
00:41:30,822 --> 00:41:32,383
through the pipeline or the project.

661
00:41:36,005 --> 00:41:36,605
Back in SpeedTree,

662
00:41:37,325 --> 00:41:41,608
We replaced our speed model meshes with our new lot chain,

663
00:41:42,209 --> 00:41:44,170
and voila, we are good to go.

664
00:41:46,272 --> 00:41:47,833
By the way, did anybody notice that we hacked

665
00:41:47,953 --> 00:41:49,975
Aloy into the UI of Speedtree?

666
00:41:51,576 --> 00:41:54,999
Really easy to do, but quite fun when people do notice.

667
00:41:58,021 --> 00:42:05,727
So we export the lot chain from Speedtree with Bones and AO

668
00:42:06,047 --> 00:42:06,728
to an FBX.

669
00:42:07,629 --> 00:42:10,130
And then we use a custom Houdini process

670
00:42:10,150 --> 00:42:12,911
that we created in-house that takes that mesh,

671
00:42:13,372 --> 00:42:15,272
takes that skeletal and skinning data,

672
00:42:15,553 --> 00:42:17,653
and converts that data to the verticolor

673
00:42:18,074 --> 00:42:20,295
that I described at the beginning of this presentation.

674
00:42:21,375 --> 00:42:24,597
All that's left for us now is to set up the asset in Maya

675
00:42:24,837 --> 00:42:26,057
and export it to our game.

676
00:42:28,158 --> 00:42:34,021
So here is what a typical blockchain of a tree asset

677
00:42:34,061 --> 00:42:34,561
would look like.

678
00:42:35,698 --> 00:42:38,739
Again, we use high and low lot shaders.

679
00:42:39,439 --> 00:42:41,700
And you'll notice that we have billboards

680
00:42:41,900 --> 00:42:43,780
involved in lot four and five.

681
00:42:45,720 --> 00:42:49,161
I really wanted to include some information about billboards,

682
00:42:49,261 --> 00:42:51,522
but then I just looked at it, and they're

683
00:42:51,542 --> 00:42:52,382
nothing really special.

684
00:42:53,002 --> 00:42:53,822
They're just cross planes.

685
00:42:54,062 --> 00:42:55,542
So this is all you get.

686
00:42:57,663 --> 00:43:04,284
And here you can see a sort of typical setup of another asset.

687
00:43:09,270 --> 00:43:10,691
OK, shadow casting.

688
00:43:12,731 --> 00:43:16,152
We use four cascades for our sun shadows.

689
00:43:17,733 --> 00:43:20,674
In the compartment cascade that is called out first,

690
00:43:21,674 --> 00:43:24,295
we only render Aloy, including her hair, clothing,

691
00:43:24,315 --> 00:43:24,915
and equipment.

692
00:43:25,755 --> 00:43:29,196
And that means that they cast high-quality shadows

693
00:43:29,836 --> 00:43:32,357
on Aloy herself and her close surroundings.

694
00:43:33,477 --> 00:43:37,018
All my vegetation does not render in this cascade.

695
00:43:38,599 --> 00:43:42,500
Cascades 0 and 1 are standard shadow maps,

696
00:43:42,940 --> 00:43:45,581
and we have a distance cascade which

697
00:43:45,761 --> 00:43:49,582
uses a height field-based system to render out shadows.

698
00:43:51,623 --> 00:43:55,304
But let's talk about cascade 0 and 1, the standard shadow maps,

699
00:43:55,704 --> 00:43:59,045
since these are the ones vegetation renders into.

700
00:44:00,345 --> 00:44:02,565
When rendering these shadow maps,

701
00:44:03,406 --> 00:44:04,846
we do something a little bit unusual.

702
00:44:05,766 --> 00:44:06,487
The natural way.

703
00:44:06,917 --> 00:44:10,799
to select LODs for shadow rendering is distance to camera based.

704
00:44:11,839 --> 00:44:16,961
This causes shadows to pop noticeably because there's no cross fading between the LODs when

705
00:44:17,001 --> 00:44:23,443
it comes to shadow map rendering. However, we do cross fade between our cascades.

706
00:44:24,543 --> 00:44:31,746
So what we decided to do is render objects into the shadow maps based on fixed distances

707
00:44:32,166 --> 00:44:34,127
and only one object per cascade.

708
00:44:35,282 --> 00:44:40,806
So every object rendered into cascade zero will select a lot

709
00:44:41,267 --> 00:44:43,108
as if it is five meters from the camera.

710
00:44:44,289 --> 00:44:46,731
Every object rendered into cascade one

711
00:44:47,111 --> 00:44:50,733
will select a lot as if it's 25 meters away from the camera.

712
00:44:52,014 --> 00:44:54,236
This fixes the shadow lot popping,

713
00:44:54,256 --> 00:44:58,559
because while an object is in a particular cascade,

714
00:44:58,719 --> 00:45:00,701
it will always use the same shadow lot.

715
00:45:02,302 --> 00:45:04,383
If it transitions from one cascade to another.

716
00:45:05,002 --> 00:45:07,184
then the smooth blend between cascades

717
00:45:07,224 --> 00:45:09,286
will ensure that there's absolutely no popping

718
00:45:09,306 --> 00:45:11,668
during the change to the different shadow lot.

719
00:45:12,609 --> 00:45:14,670
This increases render costs somewhat,

720
00:45:15,091 --> 00:45:18,874
but it almost completely solves the problem of shadow popping,

721
00:45:19,334 --> 00:45:20,596
and it was definitely worth it.

722
00:45:21,456 --> 00:45:23,378
And I've got a small little movie.

723
00:45:23,638 --> 00:45:25,219
It goes fast, so pay attention.

724
00:45:25,239 --> 00:45:27,241
But I also have it looping, so you

725
00:45:27,261 --> 00:45:28,903
don't have to catch it the first time around.

726
00:45:30,864 --> 00:45:31,425
So there you go.

727
00:45:32,225 --> 00:45:32,766
There you go.

728
00:45:34,975 --> 00:45:38,617
So here you can see that smooth transition between Cascade 0

729
00:45:38,977 --> 00:45:39,037
and 1.

730
00:45:42,179 --> 00:45:44,200
Another thing we did for vegetation

731
00:45:44,580 --> 00:45:50,163
and some other assets is we separated out our shadow

732
00:45:50,203 --> 00:45:53,425
casters from our visual lot chain.

733
00:45:54,145 --> 00:46:00,488
So while our visual meshes are two, oh, sorry.

734
00:46:01,311 --> 00:46:03,112
So we have two shadow casting meshes

735
00:46:03,292 --> 00:46:06,154
where we have six visual meshes.

736
00:46:07,715 --> 00:46:10,196
This is an enormous win to begin with,

737
00:46:11,037 --> 00:46:12,497
because you can really crunch down

738
00:46:13,258 --> 00:46:15,639
on things like triangle count.

739
00:46:15,899 --> 00:46:21,543
And as you can see, our second lot, shadow caster,

740
00:46:22,283 --> 00:46:23,704
it's not alpha tested anymore.

741
00:46:24,284 --> 00:46:25,465
It's not animated anymore.

742
00:46:25,725 --> 00:46:29,447
So it is as cheap as you can possibly get.

743
00:46:32,065 --> 00:46:41,851
All right, we're reaching the end of my presentation,

744
00:46:42,071 --> 00:46:46,253
and I thoroughly hope you at least enjoyed it.

745
00:46:48,234 --> 00:46:51,956
To summarize, let me end up with a short list of things

746
00:46:51,996 --> 00:46:56,318
that I would recommend all of you trying or utilizing

747
00:46:56,498 --> 00:46:59,840
if you take steps into vegetation,

748
00:46:59,900 --> 00:47:01,381
and that is the list.

749
00:47:01,817 --> 00:47:06,540
up and down so the stuff that I've mentioned the depth prime the custom

750
00:47:06,560 --> 00:47:13,324
mip chain the whole lot up and down was a big one keep your shadow casters

751
00:47:13,404 --> 00:47:21,249
separate from your visual meshes use jobs placement system and one of the

752
00:47:21,289 --> 00:47:26,812
things that also helped us is that we could we were able to do it all in-house

753
00:47:27,412 --> 00:47:30,194
which made it so easy to

754
00:47:30,580 --> 00:47:34,723
keep iterating and keep changing and keep shaving off performance.

755
00:47:36,544 --> 00:47:39,446
So that's a really big one for me.

756
00:47:40,187 --> 00:47:41,788
So I'd like to thank you.

757
00:47:43,089 --> 00:47:48,193
And I promised you a slide with the references that I used.

758
00:47:48,293 --> 00:47:49,614
So here it is.

759
00:47:50,635 --> 00:47:59,321
And I welcome everybody with questions to go up to the microphone if there's still time

760
00:47:59,421 --> 00:47:59,821
to do so.

761
00:48:11,423 --> 00:48:11,564
Sir?

762
00:48:12,884 --> 00:48:13,324
Is it working?

763
00:48:13,484 --> 00:48:13,664
Yes.

764
00:48:15,164 --> 00:48:15,865
Beautiful, by the way.

765
00:48:16,105 --> 00:48:16,505
Love the game.

766
00:48:16,925 --> 00:48:17,105
Cool.

767
00:48:17,125 --> 00:48:17,485
Amazing.

768
00:48:17,725 --> 00:48:18,025
You are?

769
00:48:18,965 --> 00:48:20,226
Oh, your name?

770
00:48:20,266 --> 00:48:20,886
My name, Thomas.

771
00:48:21,286 --> 00:48:21,826
Thomas, welcome.

772
00:48:21,966 --> 00:48:22,126
Yes.

773
00:48:23,306 --> 00:48:24,487
I did have a question.

774
00:48:24,547 --> 00:48:29,108
You didn't talk about the snow or the illusion of the weight of snow on vegetation.

775
00:48:29,128 --> 00:48:29,428
Yeah.

776
00:48:29,768 --> 00:48:30,688
How was that achieved?

777
00:48:30,728 --> 00:48:37,070
Because I kept being impressed as I was walking down the bushes with the snow on top, light hitting it.

778
00:48:37,110 --> 00:48:40,731
So I was just kind of wondering, did you go through any kind of physical simulation or?

779
00:48:41,542 --> 00:48:49,345
Now, our snow started off as a dynamic snow system in the shader where we would literally

780
00:48:49,385 --> 00:48:53,167
just sort of polka dot a little bit of white stuff on top.

781
00:48:55,427 --> 00:48:56,268
But it was expensive.

782
00:48:56,988 --> 00:49:04,171
So what we ended up is creating a dedicated snow assets for where we can literally spawn

783
00:49:04,211 --> 00:49:05,191
in areas of heavy snow.

784
00:49:05,731 --> 00:49:06,011
And then.

785
00:49:06,896 --> 00:49:13,961
just SpeedWeek gave us the tools to really, because it is a dedicated asset, we knew it

786
00:49:14,001 --> 00:49:19,785
was snow heavy, so we just sort of pushed it down and let gravity do its work.

787
00:49:20,165 --> 00:49:21,006
Okay, thanks.

788
00:49:21,326 --> 00:49:21,526
All right.

789
00:49:21,687 --> 00:49:21,967
Thank you.

790
00:49:24,348 --> 00:49:24,549
Hi.

791
00:49:24,809 --> 00:49:25,890
Hi.

792
00:49:26,370 --> 00:49:31,254
Separating your shadow assets from your visual rendering assets, did you have any problems

793
00:49:31,714 --> 00:49:34,296
making sure that those continued to line up, and how did you solve those?

794
00:49:35,512 --> 00:49:42,395
Well, as soon as you separate them out, you have the ability to, well, you start optimizing your shadowcasting lot chain.

795
00:49:43,195 --> 00:49:48,317
And after that, it is pretty much just a visual thing that you need to do.

796
00:49:49,158 --> 00:49:51,999
You know, everything we do is an approximation.

797
00:49:52,759 --> 00:49:56,721
So you'd be surprised how much you can get away with.

798
00:49:57,241 --> 00:50:03,624
I mean, our first shadowcasting lot is about the triangle count as a...

799
00:50:04,716 --> 00:50:11,122
A lot three on our visual mesh would be so inner shadow cast thing, you know, within

800
00:50:11,182 --> 00:50:11,602
the tree.

801
00:50:11,983 --> 00:50:12,883
It will all survive.

802
00:50:13,084 --> 00:50:18,188
It's just crunching down those triangles and while, you know, keep checking your working

803
00:50:18,229 --> 00:50:20,931
game and it will end up working.

804
00:50:21,892 --> 00:50:22,272
Absolutely.

805
00:50:23,033 --> 00:50:23,253
Cheers.

806
00:50:24,314 --> 00:50:24,454
Sir.

807
00:50:25,135 --> 00:50:25,255
Hello.

808
00:50:25,275 --> 00:50:25,375
Hello.

809
00:50:26,451 --> 00:50:29,092
I wanted to ask you a few questions about placements.

810
00:50:30,232 --> 00:50:37,054
So I've seen the talk about the GPU placements.

811
00:50:37,754 --> 00:50:42,155
And I didn't really mention the tools for artists,

812
00:50:42,255 --> 00:50:45,816
like how did you author this and how you

813
00:50:45,976 --> 00:50:47,476
iterate on your placements.

814
00:50:48,277 --> 00:50:52,058
Well, OK, I can talk a little bit about the placement.

815
00:50:52,198 --> 00:50:55,538
Our placement system runs in our editor.

816
00:50:56,237 --> 00:51:01,042
And it's a node-based system where we combine all sorts

817
00:51:01,122 --> 00:51:01,862
of world data.

818
00:51:03,243 --> 00:51:07,327
And what we end up with is density maps.

819
00:51:08,068 --> 00:51:10,129
And it's all running on GPU.

820
00:51:10,710 --> 00:51:15,874
And you should imagine that you're just multiplying texture

821
00:51:15,955 --> 00:51:18,717
upon texture and then subtracting another texture.

822
00:51:18,797 --> 00:51:21,579
And so if your hotel is a forest.

823
00:51:23,806 --> 00:51:24,926
But there's a road in between.

824
00:51:25,166 --> 00:51:29,667
You know, you multiply that road on top of that, so that

825
00:51:29,687 --> 00:51:30,587
will become black.

826
00:51:31,047 --> 00:51:35,908
So the forest will still have a density of one, but not on

827
00:51:35,928 --> 00:51:36,288
the road.

828
00:51:36,768 --> 00:51:41,669
And we layer all these stuff on top of all

829
00:51:41,689 --> 00:51:42,309
these other stuff.

830
00:51:44,210 --> 00:51:48,090
We look at things like slope, proximity to water, fluvial

831
00:51:48,150 --> 00:51:49,651
lines, all these things that you can.

832
00:51:52,460 --> 00:51:55,581
that you need to make it sort of work in a realistic fashion.

833
00:51:55,621 --> 00:51:56,101
And that's...

834
00:51:56,121 --> 00:51:58,122
Can we paint in real time?

835
00:51:58,962 --> 00:52:01,243
We can paint in real time, yeah.

836
00:52:01,423 --> 00:52:06,185
But we have one artist that builds up these rule sets,

837
00:52:06,305 --> 00:52:09,946
so that does the layering, not on a road, not in a river, you know.

838
00:52:11,087 --> 00:52:16,629
And then everybody else in the building can start painting in a forest,

839
00:52:16,929 --> 00:52:19,850
or now we're an open field.

840
00:52:20,442 --> 00:52:22,382
They have the ability to paint that.

841
00:52:24,123 --> 00:52:26,704
But there's one artist that defines what they're going to

842
00:52:26,724 --> 00:52:28,665
get when they paint that.

843
00:52:29,885 --> 00:52:32,146
So I'm not sure if that answers the question.

844
00:52:32,166 --> 00:52:33,667
Yeah, it answers the question.

845
00:52:33,767 --> 00:52:37,668
And because I've seen also the Ghost Recon placement

846
00:52:38,088 --> 00:52:40,629
technique, and it's much more complex.

847
00:52:40,749 --> 00:52:41,890
It's on Udini.

848
00:52:41,910 --> 00:52:46,091
It requires CPU farms to be processed.

849
00:52:47,022 --> 00:52:54,527
It's like you're getting really good results also and it's like it's almost real time on your side

850
00:52:54,627 --> 00:53:00,371
and it requires kind of a farm on the other side. So why do you think that is there something is

851
00:53:00,431 --> 00:53:05,294
missing in your technique or is it only because it's your tech and it's on GPU?

852
00:53:07,356 --> 00:53:13,360
I don't think well I thoroughly believe that the solution that we have running in-game is awesome

853
00:53:13,540 --> 00:53:15,462
right now for us. It works for us.

854
00:53:16,605 --> 00:53:19,047
Is something missing for you in what you get?

855
00:53:20,688 --> 00:53:21,869
Yeah, I've got a wish list.

856
00:53:23,811 --> 00:53:24,671
It's what I want to hear.

857
00:53:25,752 --> 00:53:31,317
We cannot rotate assets based on any data

858
00:53:31,357 --> 00:53:32,078
that we have right now.

859
00:53:32,118 --> 00:53:37,362
So what we wanted is to have trees overhanging over rivers,

860
00:53:37,402 --> 00:53:40,044
for instance, or on the outside of a forest.

861
00:53:41,125 --> 00:53:41,445
We can.

862
00:53:43,206 --> 00:53:50,231
We cannot do a rotation based on curvature of the river or stuff like that.

863
00:53:50,291 --> 00:53:56,296
That's one of the biggest ones that I'm requesting now, that I can think of right now.

864
00:53:57,076 --> 00:54:01,339
Okay. I leave the mic, but that's okay.

865
00:54:01,480 --> 00:54:02,881
Did you use some kind of capture?

866
00:54:03,941 --> 00:54:04,802
Some kind of capture?

867
00:54:05,142 --> 00:54:07,644
To make your vegetation like photogrammetry?

868
00:54:07,784 --> 00:54:08,325
Photogrammetry?

869
00:54:09,025 --> 00:54:10,046
Photometry is...

870
00:54:10,306 --> 00:54:11,747
There's one tree in there.

871
00:54:12,475 --> 00:54:13,155
That's photogrammetry.

872
00:54:13,215 --> 00:54:14,215
So, OK.

873
00:54:15,515 --> 00:54:16,275
And no.

874
00:54:16,435 --> 00:54:17,596
I didn't capture this one.

875
00:54:18,036 --> 00:54:23,057
The DLC, the Aspen tree, by the way, the quaking Aspen.

876
00:54:23,937 --> 00:54:25,897
In the DLC, we did more photogrammetry

877
00:54:25,997 --> 00:54:28,558
because that was also sort of slightly kind of,

878
00:54:28,638 --> 00:54:29,678
you know, let's experiment.

879
00:54:29,778 --> 00:54:30,318
Let's go wild.

880
00:54:31,698 --> 00:54:35,899
We went really wild because the DLC is like we

881
00:54:35,939 --> 00:54:38,400
needed to scrape performance in the end.

882
00:54:40,234 --> 00:54:40,394
Yeah.

883
00:54:40,634 --> 00:54:40,874
Hello.

884
00:54:41,415 --> 00:54:41,595
Hey.

885
00:54:41,715 --> 00:54:42,355
Thank you for sharing.

886
00:54:42,435 --> 00:54:42,955
Excellent talk.

887
00:54:42,975 --> 00:54:43,896
Cheers.

888
00:54:45,197 --> 00:54:47,338
I was wondering, for the trees specifically,

889
00:54:47,558 --> 00:54:50,039
since you have some motion going on in the shader for both

890
00:54:50,059 --> 00:54:52,200
the trunk, the branches, and even

891
00:54:52,220 --> 00:54:54,521
like the more significant pieces of more rigid pieces

892
00:54:54,541 --> 00:54:58,383
of the tree, how do you treat gameplay for that?

893
00:54:58,603 --> 00:55:00,684
Like if I shoot at a branch, all that

894
00:55:00,724 --> 00:55:02,185
is being animated in a vertex shader.

895
00:55:04,286 --> 00:55:07,668
If whatever you're shooting has a force field attached to it,

896
00:55:08,402 --> 00:55:09,462
Oh no, like I mean an arrow.

897
00:55:09,782 --> 00:55:12,483
Like, am I going to collide with a branch, for instance?

898
00:55:13,323 --> 00:55:14,123
You have to say it.

899
00:55:14,143 --> 00:55:15,924
Am I going to collide with a branch?

900
00:55:16,204 --> 00:55:18,824
No, collision is...

901
00:55:20,865 --> 00:55:23,206
Collision on trees is usually just a cylinder

902
00:55:24,006 --> 00:55:26,066
that represents its footprint,

903
00:55:27,347 --> 00:55:29,707
because we need to cut out the net mesh around our trees,

904
00:55:31,108 --> 00:55:31,448
and we need...

905
00:55:32,185 --> 00:55:35,266
aloe not to run into the trees, but our canopies have no collision whatsoever.

906
00:55:35,486 --> 00:55:38,667
I see, so they're just going to push away if it has a force field associated with it.

907
00:55:38,847 --> 00:55:39,467
Yep, yep.

908
00:55:39,827 --> 00:55:40,507
Okay, thank you.

909
00:55:40,807 --> 00:55:41,447
Alright, thanks.

910
00:55:42,688 --> 00:55:47,789
Hey, so I'm curious about the wind force field and how does that exactly get generated?

911
00:55:47,829 --> 00:55:50,029
Like where do the gusts of wind come from?

912
00:55:50,349 --> 00:55:52,590
Well, this is...

913
00:55:54,390 --> 00:55:55,990
Jaap, where did it come from?

914
00:55:58,811 --> 00:55:59,471
It's magic, right?

915
00:56:01,869 --> 00:56:02,410
It's all math.

916
00:56:03,631 --> 00:56:06,773
So when I talk about a force field,

917
00:56:06,833 --> 00:56:10,395
that it's just an area defined in our game,

918
00:56:11,776 --> 00:56:15,238
our weather system uses a couple of them that sort of blend.

919
00:56:15,919 --> 00:56:20,622
So the wind at max speed is like 33.

920
00:56:20,822 --> 00:56:24,324
So we start with a force field for 0 to 10.

921
00:56:24,584 --> 00:56:26,966
And then a force field at 0, force field at 10.

922
00:56:27,501 --> 00:56:29,403
Forcefield at 20 and Forcefield at 30.

923
00:56:29,763 --> 00:56:30,824
And we blend between those.

924
00:56:31,504 --> 00:56:34,587
And these are just, but they're, yeah.

925
00:56:34,767 --> 00:56:39,711
So these forcefields have properties like flow,

926
00:56:40,171 --> 00:56:43,814
min flow, max flow, math.

927
00:56:45,335 --> 00:56:45,655
Thank you.

928
00:56:46,376 --> 00:56:47,537
It's slightly above my pay grade,

929
00:56:47,577 --> 00:56:49,539
but it's completely his pay grade.

930
00:56:49,839 --> 00:56:52,081
Hello.

931
00:56:52,481 --> 00:56:52,541
Hi.

932
00:56:52,561 --> 00:56:54,302
Do you have time for one more question?

933
00:56:55,323 --> 00:56:55,884
My name's Robin.

934
00:56:55,904 --> 00:56:55,944
Oh.

935
00:56:56,885 --> 00:57:02,788
I'm wondering about, I think it was explicitly the grass shader, having grass getting matted

936
00:57:02,828 --> 00:57:04,249
down when the character walked over it.

937
00:57:04,269 --> 00:57:09,913
And I guess I was wondering in, I assume that's not put into any of the other three shaders

938
00:57:09,933 --> 00:57:10,433
that you mentioned.

939
00:57:10,873 --> 00:57:14,896
Actually, actually, we didn't have any interaction of Aloy with the grass, but it's something

940
00:57:14,916 --> 00:57:15,796
that we wanted to do.

941
00:57:17,829 --> 00:57:20,449
It's again on a mental wish list for me.

942
00:57:21,690 --> 00:57:27,031
Because I think that's thoroughly enjoyable if more

943
00:57:27,091 --> 00:57:27,792
interaction happens.

944
00:57:27,812 --> 00:57:29,352
Of course.

945
00:57:29,872 --> 00:57:32,213
In the context of the snow, there was walking through snow.

946
00:57:32,533 --> 00:57:36,174
Would that same similar system have possibly worked in the

947
00:57:36,234 --> 00:57:36,974
context of grass?

948
00:57:37,034 --> 00:57:37,875
Or was it just?

949
00:57:37,895 --> 00:57:39,355
You mean the snow in the DLC?

950
00:57:39,995 --> 00:57:44,357
Because in the DLC we introduced a system where you

951
00:57:44,417 --> 00:57:45,957
could curve through.

952
00:57:48,927 --> 00:57:54,812
And we're looking into abusing that same system for lots of other things.

953
00:57:55,453 --> 00:57:55,673
So...

954
00:57:56,294 --> 00:57:56,734
Very cool.

955
00:57:56,754 --> 00:57:57,074
Thank you.

956
00:57:57,235 --> 00:57:57,455
All right.

957
00:57:57,475 --> 00:57:58,956
So...

958
00:57:58,976 --> 00:57:59,216
That's it.

959
00:57:59,237 --> 00:57:59,417
Cheers.

960
00:58:01,359 --> 00:58:01,619
Thank you.

961
00:58:01,639 --> 00:58:03,100
Thank you.

