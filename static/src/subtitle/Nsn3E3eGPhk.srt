1
00:00:04,628 --> 00:00:08,869
Hello, audio peeps, friends and GDC goers.

2
00:00:09,749 --> 00:00:10,669
How's everybody this morning?

3
00:00:11,389 --> 00:00:13,190
Making it here, all right, good deal.

4
00:00:14,390 --> 00:00:19,571
Well, today, we plan on taking you

5
00:00:19,831 --> 00:00:21,652
on an audio adventure of sorts.

6
00:00:22,772 --> 00:00:25,253
An archetypal hero's journey.

7
00:00:26,467 --> 00:00:30,269
A journey packed with, well, adventure, excitement, risk,

8
00:00:30,709 --> 00:00:33,530
but also fraught with perils and trials and adversity.

9
00:00:33,870 --> 00:00:35,571
And finally, overcoming the odds,

10
00:00:35,671 --> 00:00:39,432
not with brute force or anguish, but with finesse and fresh

11
00:00:39,472 --> 00:00:41,073
as well as recycled ideas.

12
00:00:41,873 --> 00:00:45,354
The setup is an all too familiar scenario for audio teams

13
00:00:45,414 --> 00:00:46,495
the world over.

14
00:00:47,815 --> 00:00:52,397
Lack of resources, lack of understanding, lack of love.

15
00:00:55,377 --> 00:00:58,719
So let me introduce you to the intrepid trackers on this

16
00:00:58,879 --> 00:01:03,281
journey. We have Jacqueline Shoemate, audio lead, sound

17
00:01:03,321 --> 00:01:08,083
creation wizard. Able to Jedi mind trick even the most

18
00:01:08,203 --> 00:01:16,506
stubborn producer. We have RJ Mattingly. Technical sound

19
00:01:16,547 --> 00:01:19,568
designer and scripting ninja whose audio systems and logic

20
00:01:19,628 --> 00:01:24,890
are making us wonder if those cybernetic enhancements were too

21
00:01:24,910 --> 00:01:25,090
much.

22
00:01:27,612 --> 00:01:32,155
I'm Guy Whitmore, composer, musical trickster, dreamer, and disruptor who surrounds himself

23
00:01:32,475 --> 00:01:34,396
with awesome people to make myself look good.

24
00:01:39,760 --> 00:01:45,203
The team is rounded out by Becky Allen, sound designer ace and organizer extraordinaire,

25
00:01:46,724 --> 00:01:54,029
Damian Kasbauer, wise savant and smoke jumper, and a cameo appearance by Mike Caviezel on

26
00:01:54,069 --> 00:01:54,710
sound design.

27
00:01:55,750 --> 00:01:56,130
There he is.

28
00:01:56,451 --> 00:01:56,671
Right on.

29
00:01:58,203 --> 00:02:01,045
whole team is here. We are not going to waste any time. We're

30
00:02:01,065 --> 00:02:06,308
going to jump right into some game play. And now the basic

31
00:02:06,328 --> 00:02:09,510
idea in peg goes that you shoot a little metal ball and you try

32
00:02:09,570 --> 00:02:11,191
to hit as many pegs and clear them.

33
00:02:12,259 --> 00:02:14,761
is, you know, clear them, especially the orange ones.

34
00:02:15,061 --> 00:02:19,284
Now, there's a difference in mechanic between the earlier pegals and Pegal Blast,

35
00:02:19,364 --> 00:02:21,345
and we had to do some different design here.

36
00:02:21,885 --> 00:02:25,427
Here's our metamap, and here we just set the mood.

37
00:02:25,628 --> 00:02:29,950
We're just making it sound pleasant, you know? Here you are.

38
00:02:31,751 --> 00:02:34,553
And a little sound seed air to get you moving.

39
00:02:36,454 --> 00:02:39,076
And we're going to go to a turtle level here.

40
00:02:41,925 --> 00:02:47,990
One of our tenets for all of our games is that things move and transition smoothly from one area to another.

41
00:02:48,130 --> 00:02:55,676
That's one of our overall goals.

42
00:02:55,696 --> 00:02:59,720
So here he's starting the game. Let's see what he's going to do.

43
00:02:59,780 --> 00:03:00,901
Nice shot!

44
00:03:01,021 --> 00:03:01,501
Yeah!

45
00:03:09,939 --> 00:03:12,899
Notice how the bumper was going up in pitch as it was hitting.

46
00:03:12,919 --> 00:03:14,340
Little tension builder there.

47
00:03:14,360 --> 00:03:23,622
Turtle now has voiceover, an addition we did after launch.

48
00:03:23,662 --> 00:03:28,223
So his special feature is that I can catch the ball.

49
00:03:38,792 --> 00:03:41,112
Yeah, every master has their own power.

50
00:03:41,172 --> 00:03:43,753
Oh, that one!

51
00:03:43,773 --> 00:03:44,373
This is wasteless.

52
00:03:44,593 --> 00:03:47,054
Oh, yeah!

53
00:03:47,374 --> 00:03:48,255
Nice!

54
00:03:48,575 --> 00:03:48,755
Wow.

55
00:03:49,095 --> 00:03:51,636
Alright.

56
00:04:07,162 --> 00:04:08,803
Not all shots can be excellent.

57
00:04:08,943 --> 00:04:09,783
Let's do a fireball.

58
00:04:09,964 --> 00:04:13,226
Alright, fireball, there's these powers that you get.

59
00:04:13,326 --> 00:04:30,517
And it just clears half the room.

60
00:04:30,918 --> 00:04:33,659
So notice how the music is progressing as you're moving along here.

61
00:04:36,672 --> 00:04:39,613
Okay, one peg left. It always comes down to the tension shot.

62
00:04:42,914 --> 00:04:43,034
And...

63
00:04:43,094 --> 00:04:45,555
He's gonna get it!

64
00:04:46,195 --> 00:04:47,255
No!

65
00:04:48,175 --> 00:04:49,876
Okay. Near miss.

66
00:04:52,997 --> 00:04:57,959
Oh my god. Plenty of opportunity here.

67
00:05:26,415 --> 00:05:27,837
Alright, so there you have it.

68
00:05:28,538 --> 00:05:29,720
Now we're going to jump over here.

69
00:05:36,766 --> 00:05:41,447
So, just as a stage for you, we were given a 5 megabyte total asset limit for our audio

70
00:05:41,467 --> 00:05:43,088
footprint on a mobile platform.

71
00:05:43,188 --> 00:05:46,629
To give you some comparison, we had just shipped Peggle 2 with 783 megabytes on Xbox One.

72
00:05:49,750 --> 00:05:51,251
Um, yeah, thanks.

73
00:05:51,851 --> 00:05:52,812
Why 5 megabytes?

74
00:05:53,152 --> 00:05:54,533
Why 5 megabytes, Guy?

75
00:05:54,633 --> 00:05:57,975
Well, the game as a total was only shipping with 50 megabytes.

76
00:05:58,695 --> 00:05:59,156
So we got 5.

77
00:05:59,976 --> 00:06:01,497
Um, it's common for freemium games

78
00:06:01,597 --> 00:06:03,998
and we were given a really hard limit with no wiggle room.

79
00:06:04,059 --> 00:06:05,039
So we had to make it work.

80
00:06:05,279 --> 00:06:07,981
Had to do a download, not RAM or any other issues.

81
00:06:08,081 --> 00:06:08,881
Right, exactly.

82
00:06:10,238 --> 00:06:14,061
It was the first Unity game from the studio, which meant that we got extremely limited

83
00:06:14,121 --> 00:06:19,604
dev support. Resources were put in other directions. Um, in addition, we really believe that

84
00:06:19,624 --> 00:06:25,028
mobile audio should be and can sound good and we had Peggle 2 sized expectations for the

85
00:06:25,068 --> 00:06:31,732
project. Um, I'm a sound designer, I really like to make content and I need space. Like I

86
00:06:31,772 --> 00:06:34,614
just take up a lot of room. So this was one option.

87
00:06:36,157 --> 00:06:41,221
could have made a 30 second sound loop, five sound effects, ship it and went on vacation.

88
00:06:42,582 --> 00:06:49,947
But then we heard a knock at the door. It was Igor Stravinsky. And he said, the more

89
00:06:49,987 --> 00:06:55,891
constraints one imposes, the more one frees oneself. And the arbitrariness of these

90
00:06:55,931 --> 00:06:59,554
constraints serves only to maintain the precision of execution.

91
00:07:00,586 --> 00:07:02,367
Wow, did we feel that on this title?

92
00:07:03,247 --> 00:07:06,868
And in the end, I really feel that our limitations actually

93
00:07:06,888 --> 00:07:10,350
gave us focus, purpose, and a drive to innovate.

94
00:07:10,970 --> 00:07:12,811
And I really don't think our aesthetic,

95
00:07:13,471 --> 00:07:15,492
I think our aesthetic would have been wildly different had

96
00:07:15,532 --> 00:07:16,812
we not had these constraints.

97
00:07:17,332 --> 00:07:19,113
And it probably wouldn't have matched the game as well,

98
00:07:19,673 --> 00:07:19,853
either.

99
00:07:25,538 --> 00:07:28,339
So to start out with, we looked to our mentors,

100
00:07:28,379 --> 00:07:29,299
our inspirations.

101
00:07:29,800 --> 00:07:31,560
I know that some of you recognize this sound.

102
00:07:33,581 --> 00:07:34,101
And this one.

103
00:07:35,222 --> 00:07:37,123
And I don't even have to tell you what games they're from,

104
00:07:37,183 --> 00:07:37,343
right?

105
00:07:37,383 --> 00:07:38,683
They're fantastic audio.

106
00:07:38,983 --> 00:07:41,824
So I looked to classic games and slot machines, too,

107
00:07:41,924 --> 00:07:44,405
actually, for examples of audio that

108
00:07:45,066 --> 00:07:47,187
convey a lot of emotional resonance

109
00:07:47,247 --> 00:07:48,647
with a very small footprint.

110
00:07:50,548 --> 00:07:54,650
And for my part, when I got the five megabyte

111
00:07:55,335 --> 00:08:00,981
memo, I actually thought, small, what is small that could still be compelling?

112
00:08:02,542 --> 00:08:09,009
And a music box came to mind, and so I wrote this demo piece to kind of try it out. I mean,

113
00:08:09,029 --> 00:08:14,655
you could almost fit a music box in an iPhone, if you think about it. So I wanted the idea of

114
00:08:14,675 --> 00:08:16,757
holding this little thing that's marionette-like.

115
00:08:17,624 --> 00:08:22,007
So we put it in the game and the game team kind of had a complete freak out.

116
00:08:22,027 --> 00:08:22,648
We loved it.

117
00:08:22,708 --> 00:08:24,169
Yeah, we loved it.

118
00:08:24,189 --> 00:08:26,291
We had a soft spot for it, but the game team didn't like it.

119
00:08:27,232 --> 00:08:30,615
They wanted the orchestra back, they wanted Ode to Joy in all of its glory,

120
00:08:31,195 --> 00:08:32,376
so we had to readdress that.

121
00:08:32,537 --> 00:08:34,538
But that's part of the exploration process.

122
00:08:34,758 --> 00:08:35,419
Yeah, totally.

123
00:08:36,980 --> 00:08:38,962
So from a technical standpoint,

124
00:08:39,302 --> 00:08:43,326
even though Peggle Blast is much different from Peggle 2 in a lot of ways,

125
00:08:43,466 --> 00:08:44,247
obviously there are...

126
00:08:45,107 --> 00:08:48,229
a decent number of similarities. So the first thing that I did was kind of take a look at

127
00:08:48,289 --> 00:08:54,934
how audio worked in Peggle 2 and try to find out how we could optimize some of the functionality

128
00:08:55,114 --> 00:09:00,318
for the mobile platform. Obviously we had much stricter guidelines that we had to fit

129
00:09:00,338 --> 00:09:05,201
within. So try to figure out how we could get everything that we wanted in there. And

130
00:09:05,662 --> 00:09:09,725
you know, we started experimenting, looking around at what we had available, but really

131
00:09:09,745 --> 00:09:14,548
it came down to we just needed to make a decision, commit, and move forward.

132
00:09:15,631 --> 00:09:18,892
And that decision, there was a specific moment,

133
00:09:18,912 --> 00:09:22,053
and it had to do with do we take on this MIDI technology that

134
00:09:22,093 --> 00:09:24,514
was in a beta version of Wwise.

135
00:09:24,654 --> 00:09:26,034
And we knew that it was possible we might even

136
00:09:26,054 --> 00:09:27,994
have to ship with a beta version, although we didn't.

137
00:09:28,935 --> 00:09:30,255
So there was a moment of truth.

138
00:09:30,315 --> 00:09:34,016
And boy, do I remember that moment crystal clear,

139
00:09:34,096 --> 00:09:36,137
sitting in a room, talking about the options,

140
00:09:37,117 --> 00:09:39,038
and finally deciding.

141
00:09:40,105 --> 00:09:42,366
of course, to take the red pill.

142
00:09:43,206 --> 00:09:43,727
So we did.

143
00:09:43,747 --> 00:09:44,827
We went down this journey.

144
00:09:45,687 --> 00:09:47,788
And here's the rest of the story.

145
00:09:47,888 --> 00:09:49,589
Yeah, and once we did that, once we

146
00:09:49,609 --> 00:09:50,909
decided we were going to commit, we

147
00:09:51,089 --> 00:09:53,890
went back and started seeing what this tech would let us do.

148
00:09:55,171 --> 00:09:57,732
And we started experimenting with it.

149
00:09:57,912 --> 00:10:00,553
And that kind of brought us back into the creative realm

150
00:10:00,573 --> 00:10:02,013
of like, oh, we can do this and this

151
00:10:02,073 --> 00:10:02,993
and all these different things.

152
00:10:03,535 --> 00:10:05,716
which once again brought in new technical challenges.

153
00:10:05,736 --> 00:10:08,216
And we kind of found that that was this cyclical nature

154
00:10:08,236 --> 00:10:11,477
of our entire process was creative leading to technical

155
00:10:11,537 --> 00:10:13,457
and back to creative just all the way through.

156
00:10:17,818 --> 00:10:19,938
So I'm just gonna give you a quick run through

157
00:10:19,978 --> 00:10:22,219
of how we made sounds for Peggle Blast.

158
00:10:22,359 --> 00:10:24,019
Our question became, how do you make sounds

159
00:10:24,079 --> 00:10:25,339
without taking up memory?

160
00:10:25,419 --> 00:10:27,820
Our daily challenge was make something for free.

161
00:10:28,360 --> 00:10:29,900
What we ended up discovering was.

162
00:10:34,207 --> 00:10:35,527
of what you have on hand.

163
00:10:36,468 --> 00:10:39,889
Within Wwise, we had real-time synthesis with SoundSeed Air

164
00:10:39,949 --> 00:10:41,690
and Impact, the tone generator.

165
00:10:42,070 --> 00:10:44,371
We had lots of digital signal processors,

166
00:10:44,631 --> 00:10:47,453
creative playback behaviors, and a tiny bit of memory

167
00:10:47,833 --> 00:10:51,835
to play with that we could use real WAV files, very

168
00:10:51,875 --> 00:10:53,255
specially chosen assets.

169
00:10:54,696 --> 00:10:58,398
So the basic process looked a little like this.

170
00:11:00,579 --> 00:11:05,643
As you can see here, you have your sound source, which could be sound seat air impact or a tone

171
00:11:05,683 --> 00:11:11,708
generator. The power of this is that all of these features can link into realtime parameter

172
00:11:11,768 --> 00:11:17,633
controls on your sound. This is all within Wwise, right? This is all within Wwise. You can add

173
00:11:17,753 --> 00:11:25,420
effects at any layer that you want to. And again, link any aspects of the effects, or not any, but

174
00:11:25,460 --> 00:11:27,441
many, into realtime parameter controls.

175
00:11:29,702 --> 00:11:32,404
And then play around with different playback behaviors,

176
00:11:32,485 --> 00:11:37,729
also within Wwise, which also link into real-time parameter

177
00:11:37,749 --> 00:11:38,169
controls.

178
00:11:38,229 --> 00:11:41,051
So basically, it becomes layers of created sounds

179
00:11:41,112 --> 00:11:43,553
with various properties, combined with layer of effects

180
00:11:43,894 --> 00:11:45,815
and with layers of playback instructions.

181
00:11:45,895 --> 00:11:48,017
The individual elements are really simple,

182
00:11:48,357 --> 00:11:50,419
but the combinations can get really complex

183
00:11:50,459 --> 00:11:52,721
to create a varied and interesting palette.

184
00:11:54,522 --> 00:11:56,203
And those stay real time in the game, right?

185
00:11:56,464 --> 00:11:57,845
You never mix them down, right?

186
00:11:57,905 --> 00:11:58,085
Real time.

187
00:11:58,245 --> 00:11:59,546
Everything is real time.

188
00:11:59,646 --> 00:12:01,307
And that is the beauty of it.

189
00:12:01,668 --> 00:12:04,890
So now I'm going to give you my real time demo, which

190
00:12:04,970 --> 00:12:09,033
is always a little dangerous in a presentation.

191
00:12:09,073 --> 00:12:10,574
But in the spirit of real time, I

192
00:12:10,614 --> 00:12:12,175
felt like it was the right thing to do.

193
00:12:13,937 --> 00:12:19,100
So within Wwise, I am going to make a sound for you.

194
00:12:19,160 --> 00:12:20,161
It's sort of set up already.

195
00:12:20,201 --> 00:12:21,742
This is actually based off of a sound

196
00:12:21,782 --> 00:12:23,944
that Becky Allen created for the game.

197
00:12:25,302 --> 00:12:29,604
So the general workflow would be I would look in unity, see what needs to be made, and then I

198
00:12:29,644 --> 00:12:34,366
would get sort of a basic sound going, um, within Wwise that I thought would fit that and

199
00:12:34,386 --> 00:12:42,470
then adjust afterwards. So here we have... an explosion, which is one of the real assets that we

200
00:12:42,610 --> 00:12:52,815
used. So within that I can add, um, a swoosh. Let's just see what this is going to sound like.

201
00:12:57,500 --> 00:13:02,602
And then I can make it squiggle a little because that'll be fun.

202
00:13:04,062 --> 00:13:09,324
It was all about playing and experimenting and trying new things and turn the frequency up.

203
00:13:10,505 --> 00:13:11,885
Sure. That's pretty cool.

204
00:13:12,325 --> 00:13:20,048
And then I'm going to also add a sweep sound from tone generator.

205
00:13:23,953 --> 00:13:26,375
I've seen this tone generator in Wwise a lot,

206
00:13:26,415 --> 00:13:29,457
but I'd never even thought about creating a sound with it

207
00:13:29,517 --> 00:13:31,418
because making assets in a DOS,

208
00:13:31,918 --> 00:13:34,160
really the way that we do things these days,

209
00:13:34,360 --> 00:13:36,662
or the way that I do things these days, I should say.

210
00:13:36,682 --> 00:13:41,545
That's kind of cool, except I want it to be really short

211
00:13:41,965 --> 00:13:43,546
and I want it to sound kind of angry,

212
00:13:43,606 --> 00:13:44,927
so I'm gonna change the duration

213
00:13:45,748 --> 00:13:47,889
and make it a sawtooth wave.

214
00:13:48,269 --> 00:13:49,250
Cool, and then you know what?

215
00:13:49,370 --> 00:13:50,471
I'm gonna add an effect.

216
00:13:50,791 --> 00:13:51,491
Why not?

217
00:13:53,657 --> 00:13:55,497
I think this is going to sound alright.

218
00:13:56,317 --> 00:13:56,578
No.

219
00:13:57,578 --> 00:13:58,498
Okay, I'll take that.

220
00:13:59,918 --> 00:14:02,019
And then here, I'm going to add an RTPC.

221
00:14:02,099 --> 00:14:06,060
Again, everything that I'm doing I can link into a real-time parameter control

222
00:14:06,180 --> 00:14:09,721
to any aspect of the sound at any point because it's all generated from within Wwise.

223
00:14:10,121 --> 00:14:15,103
So here what I'm going to do is utilize pitch, which is something we often played with.

224
00:14:15,563 --> 00:14:18,284
This sound is for a little time bomb. I have a counter.

225
00:14:22,755 --> 00:14:28,700
have the pitch of that sound raise over time, uh, the more the time bomb is hit. If I wanted

226
00:14:28,740 --> 00:14:36,587
to, I could add another control, um, in RTPC into this, uh, just the tone generator sound and

227
00:14:36,987 --> 00:14:42,632
adjust the pitch of that as those, as those time bombs go off as well. So there's really

228
00:14:42,672 --> 00:14:46,455
just, it's just so powerful, there's so many options. And then to, um...

229
00:14:48,750 --> 00:14:55,038
to audition in Unity and continue to tweak my sound and actually make it match the game.

230
00:14:55,058 --> 00:15:02,348
I could use profiling. I've always used profiling in the past for mixing and for bug tracking

231
00:15:02,388 --> 00:15:03,149
and things like that.

232
00:15:05,488 --> 00:15:12,870
It's basically everything that I'm doing in game, which is pretty awesome.

233
00:15:13,290 --> 00:15:17,591
And so now I'm going to go back to Unity, and let's say that I thought that actually

234
00:15:17,671 --> 00:15:22,072
this sound should be a lot longer, it wasn't doing what I wanted it to do.

235
00:15:22,092 --> 00:15:28,214
I'm going to change that to .6 seconds so that the tail sounds cooler.

236
00:15:33,101 --> 00:15:36,447
And there you can hear it was a little longer.

237
00:15:36,567 --> 00:15:41,476
So that was basically the whole process, was just going back and forth between those.

238
00:15:50,857 --> 00:15:55,519
So it was really an illuminating process to work this way.

239
00:15:55,819 --> 00:15:57,160
There were a number of advantages.

240
00:15:57,520 --> 00:15:59,801
First of all, there was no DAW that was necessary.

241
00:15:59,961 --> 00:16:03,883
I'm mad at Avid a lot of the time, so it was really nice to not have to spend that much

242
00:16:03,923 --> 00:16:04,624
time in Pro Tools.

243
00:16:04,664 --> 00:16:10,266
I didn't have to make a game capture, bring it into my DAW, and then spit out a sound,

244
00:16:10,346 --> 00:16:11,527
and then rinse and repeat that.

245
00:16:11,587 --> 00:16:13,588
That meant that iteration was really quick.

246
00:16:14,449 --> 00:16:18,250
animator would change an asset and I would need to change my sound. I could just go directly

247
00:16:18,270 --> 00:16:23,113
into Wwise, change the timing of a few different layers of my sound effects, and come out with

248
00:16:23,233 --> 00:16:29,435
something that matched the new animation. The biggest and most powerful part of this, I

249
00:16:29,496 --> 00:16:34,138
really felt like, was the easier implementation of sounds controlled by RTPCs. Part of that

250
00:16:34,158 --> 00:16:38,600
was because of RJ, which you'll hear about in a minute. And part of that was just because

251
00:16:38,720 --> 00:16:43,142
everything was already within Wwise. You just had so much control over every sound and how

252
00:16:43,162 --> 00:16:43,822
it was playing with the...

253
00:16:44,042 --> 00:16:51,706
game. And it became this really malleable element of gameplay. It also then led me to feel like I had no

254
00:16:51,746 --> 00:16:55,348
barrier between me and the game because I was always working in the game. I knew it was

255
00:16:55,388 --> 00:16:59,550
happening all of the time. On this project I couldn't be as integrated with the team as I usually

256
00:16:59,650 --> 00:17:04,612
am and that was really disappointing. But because I was so integrated in the project and working

257
00:17:04,652 --> 00:17:09,674
within the game, I didn't feel that disconnect at all. It was really fantastic actually. And

258
00:17:11,084 --> 00:17:13,568
More than anything, I feel like there's so much potential

259
00:17:13,608 --> 00:17:15,111
to use this on games big and small.

260
00:17:15,191 --> 00:17:16,934
And none of that I would have discovered

261
00:17:16,994 --> 00:17:19,338
had I not been faced with this limit to begin with.

262
00:17:21,302 --> 00:17:21,742
There were.

263
00:17:22,433 --> 00:17:28,658
some challenges. There was a limited palette. I really wanted to work with more synths and

264
00:17:28,678 --> 00:17:32,501
just have more things available. Having a bigger memory footprint would have helped as well

265
00:17:32,541 --> 00:17:38,365
so we could use more wave files. I wanted more real-time mastering tools and the ability to

266
00:17:38,485 --> 00:17:43,850
use more real-time mastering tools with more CPU. Limited CPU meant that I had to be a little

267
00:17:43,890 --> 00:17:47,873
careful with some of that and voice limiting was tight because instead of playing one

268
00:17:47,933 --> 00:17:50,715
wave file at a time which maybe has...

269
00:17:51,235 --> 00:17:54,036
three sounds or four sounds that you've created in your DAW

270
00:17:54,817 --> 00:17:55,917
that takes up one voice.

271
00:17:56,017 --> 00:17:58,678
With these, maybe there was eight voices and one sound

272
00:17:58,738 --> 00:17:59,338
at one time.

273
00:17:59,418 --> 00:18:00,959
So we had to be really careful about how

274
00:18:00,999 --> 00:18:02,360
we were designing assets.

275
00:18:03,940 --> 00:18:06,621
But all in all, it was a really fantastic way to work.

276
00:18:06,681 --> 00:18:08,862
And I look forward to using it on more projects.

277
00:18:10,843 --> 00:18:12,743
Which takes us to the implementation side of things.

278
00:18:14,824 --> 00:18:15,765
So as Guy mentioned.

279
00:18:16,797 --> 00:18:19,438
We really were lucky enough to have a lot of control

280
00:18:19,478 --> 00:18:22,359
and autonomy kind of across the spectrum for audio

281
00:18:22,399 --> 00:18:24,880
for this project, from creating sounds to getting them in

282
00:18:24,920 --> 00:18:26,401
and creating our own systems.

283
00:18:26,801 --> 00:18:27,481
And it was really great.

284
00:18:27,521 --> 00:18:28,882
I've heard a couple of other talks

285
00:18:29,182 --> 00:18:31,463
already this week about that kind of style

286
00:18:31,503 --> 00:18:34,304
and bringing more control into the audio team's hand.

287
00:18:34,344 --> 00:18:36,205
And I think it's a really great direction to be headed.

288
00:18:38,366 --> 00:18:40,647
So just real quick, what enabled us to do

289
00:18:40,667 --> 00:18:44,548
what we did for the project, we used Unity's.

290
00:18:45,586 --> 00:18:46,608
Our main engine was Unity.

291
00:18:47,649 --> 00:18:49,010
In case anybody's unfamiliar with that,

292
00:18:49,050 --> 00:18:51,173
it's a very game-object-oriented

293
00:18:51,213 --> 00:18:52,534
and drag scripts onto

294
00:18:53,355 --> 00:18:54,556
different objects kind of

295
00:18:55,678 --> 00:18:56,058
pipeline.

296
00:18:56,839 --> 00:18:59,362
And this was great. It really kind of blurred the lines

297
00:18:59,422 --> 00:19:01,003
between what people call like deep

298
00:19:01,184 --> 00:19:02,465
engine-level code.

299
00:19:03,085 --> 00:19:06,726
and the kind of high-level scripting that people are familiar with doing in audio.

300
00:19:07,387 --> 00:19:12,168
And that was really crucial. It enabled us to go way beyond just simple play sound events,

301
00:19:13,628 --> 00:19:18,630
again, on our own. We were able to create and implement entire audio systems from beginning to end,

302
00:19:19,450 --> 00:19:24,411
and then manage those systems within our own code that we didn't have to burden the rest of the team with.

303
00:19:25,792 --> 00:19:27,632
A real quick example of that, I remember...

304
00:19:28,476 --> 00:19:30,737
Kind of early on in the project Jacqueline and I were talking about

305
00:19:31,458 --> 00:19:37,341
One of the character special abilities Bjorn. He has this super guide kind of a rainbowy thing that helps you aim

306
00:19:38,001 --> 00:19:40,863
And we were thinking wouldn't be cool instead of just having you know

307
00:19:40,903 --> 00:19:44,965
Obviously a static looping sound if we had it kind of dynamically react to

308
00:19:45,805 --> 00:19:47,166
the players swiping

309
00:19:47,927 --> 00:19:48,647
movement and

310
00:19:49,492 --> 00:19:52,033
And it seemed like a great logical way to go.

311
00:19:52,113 --> 00:19:53,214
Oh, I didn't even go into that.

312
00:19:53,254 --> 00:19:53,954
OK, anyways.

313
00:19:55,374 --> 00:19:57,275
So I started digging around and seeing how we could do that.

314
00:19:57,335 --> 00:19:58,776
And sure enough, within the game,

315
00:19:58,796 --> 00:20:02,657
we had this object called the shooter object, which

316
00:20:02,937 --> 00:20:04,938
turns out was that cannon that you control.

317
00:20:05,478 --> 00:20:09,880
So once I found that, Unity has a lot of built-in functionality,

318
00:20:09,940 --> 00:20:11,880
like the get rotation call.

319
00:20:12,481 --> 00:20:14,401
And we were able to just get the position of,

320
00:20:14,521 --> 00:20:15,862
get the rotational position of that.

321
00:20:17,794 --> 00:20:19,455
and map that to a variable.

322
00:20:20,336 --> 00:20:23,239
And then getting the speed of that was as simple as measuring

323
00:20:23,259 --> 00:20:25,681
the change of that position over time.

324
00:20:26,322 --> 00:20:29,305
And then we just map that to an RTPC value down there.

325
00:20:29,965 --> 00:20:33,369
And since we had the position in order to make the speed anyways,

326
00:20:33,409 --> 00:20:36,732
we might as well put that as its own RTPC value because.

327
00:20:37,268 --> 00:20:44,370
RGPs are great and they come in handy all over the place. I think we ended up using the position to do some left right panning on top of that sound effect.

328
00:20:44,651 --> 00:21:00,555
Yeah, one thing I want to throw in here, this was all done outside of the team scrum, the team feature list and all that. We just decided, hey, wouldn't this be cool? Walked down the hall, made it happen, it's in the game. The game team goes, wow, that's neat. No friction.

329
00:21:00,795 --> 00:21:03,596
Yeah, it's a really relatively small feature and it's nice to not have to...

330
00:21:04,049 --> 00:21:07,613
make a big deal out of it to be able to just, I mean as you can see it's a few lines of code,

331
00:21:07,753 --> 00:21:13,600
pretty easy to put in, and if I recall correctly, Mike Kviesel actually ended up making this

332
00:21:13,640 --> 00:21:19,746
sound, so if you hear it and it sounds especially awesome, that's why. Um, but uh, so

333
00:21:20,242 --> 00:21:24,023
it quickly became apparent throughout during the project that with this great power came a

334
00:21:24,523 --> 00:21:33,267
pretty easy ability to over step our bounds. As we offloaded the memory sounds and put them kind

335
00:21:33,287 --> 00:21:42,230
of in the CPU's hands we found ourselves kind of doing too much without holding it, without

336
00:21:42,370 --> 00:21:48,513
keeping anything back. And so we started looking for ways to come up with better ways to

337
00:21:49,254 --> 00:21:52,155
some performance improvements to try and get those voices down.

338
00:21:52,216 --> 00:21:55,337
And over some conversations with a couple sound designers

339
00:21:55,357 --> 00:21:59,439
from other EA studios, Nick LaMartina and Nick Von Cannell,

340
00:22:00,319 --> 00:22:03,401
they kind of pointed us in the direction of this multi-tiered

341
00:22:03,501 --> 00:22:06,202
quality device idea where.

342
00:22:06,660 --> 00:22:09,522
you know, if you're playing on an iPhone 4, it obviously has

343
00:22:09,762 --> 00:22:13,004
much less capabilities than say an iPhone 6. And we wanted to

344
00:22:13,044 --> 00:22:15,766
try and make sure that each device was getting the best

345
00:22:15,806 --> 00:22:18,868
sound that we could get out of it. So we created this audio

346
00:22:18,908 --> 00:22:23,030
quality manager that just looked at, start up about what the,

347
00:22:23,230 --> 00:22:26,513
what the device was and what its specs were and we mapped that

348
00:22:26,733 --> 00:22:29,775
into an RTPC for kind of a low, medium, high quality setting.

349
00:22:30,335 --> 00:22:33,537
And from there we were able to do things like mute or kill,

350
00:22:33,937 --> 00:22:35,899
some of the less crucial sound events as Jacqueline was

351
00:22:35,939 --> 00:22:36,299
showing you.

352
00:22:36,759 --> 00:22:41,742
some sound events could actually be made up of maybe like 10 sounds in a blend container

353
00:22:42,642 --> 00:22:44,823
which on an iPhone 6 would be great, but as you get into a 4

354
00:22:44,903 --> 00:22:48,465
maybe it would make it chug. So we kind of

355
00:22:48,965 --> 00:22:51,306
said okay well if you could do without two or three of these

356
00:22:51,886 --> 00:22:54,448
would you still be able to get the point across and we were able to mute those and

357
00:22:55,528 --> 00:22:58,089
just save some CPU. We could do things like

358
00:22:58,309 --> 00:23:01,251
disable or swap out effects plugins. We had two different reverbs

359
00:23:02,071 --> 00:23:04,132
one for low devices and one for the medium and high.

360
00:23:05,155 --> 00:23:06,656
with just some more conservative settings.

361
00:23:07,417 --> 00:23:09,758
And then the obvious one, changing bus level voice

362
00:23:09,818 --> 00:23:10,059
limits.

363
00:23:10,099 --> 00:23:13,361
I think on the high tier, we were allowing maybe like 50

364
00:23:13,741 --> 00:23:15,383
voices for sound effects.

365
00:23:15,463 --> 00:23:17,184
But as you get down to the low quality,

366
00:23:17,204 --> 00:23:18,986
we had to clamp it down to maybe 15 or so.

367
00:23:20,367 --> 00:23:21,768
So that was pretty effective.

368
00:23:21,808 --> 00:23:23,609
Yeah, that was really, really something.

369
00:23:23,729 --> 00:23:25,491
Otherwise, I think low end Androids

370
00:23:25,511 --> 00:23:27,232
would have been our least common denominator,

371
00:23:27,272 --> 00:23:29,073
and everything would have had to have been at that bar,

372
00:23:29,113 --> 00:23:31,435
despite the iPhone 6's abilities.

373
00:23:31,535 --> 00:23:33,837
Really be able to take advantage of what each device could do.

374
00:23:34,017 --> 00:23:34,658
Yeah.

375
00:23:35,222 --> 00:23:37,964
And then throughout the project, one of the biggest things,

376
00:23:38,725 --> 00:23:40,926
as a lot of people will say, was the ability

377
00:23:40,946 --> 00:23:43,508
to performance monitor in real time on device.

378
00:23:44,209 --> 00:23:46,251
We could do things with the Wwise profiler,

379
00:23:46,291 --> 00:23:48,673
like measure the CPU of each effects plug-in.

380
00:23:48,933 --> 00:23:49,954
As Jacqueline was showing you, we

381
00:23:50,014 --> 00:23:51,755
used a lot of effects all over the place.

382
00:23:52,115 --> 00:23:54,337
And it became important to find out

383
00:23:54,437 --> 00:23:57,480
which ones were taking more CPU than we could spare

384
00:23:58,581 --> 00:23:59,502
and get those clamped down.

385
00:24:00,202 --> 00:24:00,542
Also, we

386
00:24:01,517 --> 00:24:08,800
we used a lot of really, really short looping sounds that we found, if we had a .01 second

387
00:24:08,861 --> 00:24:13,903
sound looping, within one second you've got 50 voices that are stacking up.

388
00:24:15,263 --> 00:24:18,985
So the profiler was able to help us find those and take care of them right away.

389
00:24:19,005 --> 00:24:25,628
Hey, RJ, what did you do for easy auditioning of all of these sounds across different specs?

390
00:24:25,848 --> 00:24:26,869
Ooh, that was a great question.

391
00:24:29,216 --> 00:24:34,347
Yeah, so, you know, since we were doing this to test different device settings, we wanted

392
00:24:34,367 --> 00:24:38,436
to come up with a way that you wouldn't have to test on an iPhone for.

393
00:24:39,351 --> 00:24:44,354
and an iPhone 6. Each time you made a sound, obviously at some point you would be doing

394
00:24:44,374 --> 00:24:47,576
that. But right away we wanted a way to kind of simulate what those settings would end

395
00:24:47,636 --> 00:24:52,378
up looking like. So within the Unity editor, we just kind of created a fake version of

396
00:24:52,418 --> 00:24:57,402
that RTPC so that you can in real time change it to low, medium and high and see which sounds

397
00:24:57,642 --> 00:25:02,925
are getting cut off and make sure that it's still sounding like what you want. And that

398
00:25:03,025 --> 00:25:06,907
is pretty much the main overview of implementation of the tech side of stuff.

399
00:25:06,927 --> 00:25:08,468
Awesome. Awesome. Thanks RJ.

400
00:25:09,910 --> 00:25:15,072
So now we're going to talk about the music side, the scoring aspect, and we all participated.

401
00:25:15,833 --> 00:25:20,635
And I have to say, scoring Pegel Blast was definitely...

402
00:25:20,875 --> 00:25:23,276
Delicious!

403
00:25:23,916 --> 00:25:24,776
Nice!

404
00:25:25,537 --> 00:25:27,398
So I had a lot of fun.

405
00:25:28,978 --> 00:25:31,039
Imagine sitting in front of a professional choir going,

406
00:25:31,619 --> 00:25:33,860
It's pronounced Pegel-icious.

407
00:25:36,919 --> 00:25:37,820
We know how to have fun here.

408
00:25:38,641 --> 00:25:40,684
So the first part we had to think through, I did,

409
00:25:41,084 --> 00:25:42,366
was the palette.

410
00:25:42,626 --> 00:25:44,208
A lot of times when you're starting to score,

411
00:25:44,769 --> 00:25:45,650
what sounds do I want?

412
00:25:46,448 --> 00:25:48,129
what timbre do I go for?

413
00:25:48,229 --> 00:25:51,511
And this image is apt because this is Aaron Mindendorf's

414
00:25:52,032 --> 00:25:54,013
art exploration of Bjorn.

415
00:25:54,613 --> 00:25:56,034
And what colors do we use?

416
00:25:56,074 --> 00:25:56,755
What shade?

417
00:25:56,795 --> 00:25:57,215
And all that.

418
00:25:58,616 --> 00:26:00,777
And once it was decided we were going with MIDI and

419
00:26:00,797 --> 00:26:04,100
sample banks, there were a couple of elements that became

420
00:26:04,240 --> 00:26:06,141
critical to helping decide this.

421
00:26:06,601 --> 00:26:10,164
So those three points that I decided to work with are

422
00:26:10,264 --> 00:26:11,304
custom sample banks.

423
00:26:12,116 --> 00:26:14,618
and instrument choice and real-time DSP.

424
00:26:15,078 --> 00:26:18,501
Now, custom sample banks over pre-created ones,

425
00:26:18,541 --> 00:26:21,123
which don't even exist on Wwise right now,

426
00:26:22,284 --> 00:26:24,806
have an advantage in that by myself creating them,

427
00:26:24,867 --> 00:26:28,369
recording the sounds and editing them myself,

428
00:26:28,730 --> 00:26:30,791
I can tailor these sounds specifically to the score

429
00:26:30,831 --> 00:26:31,832
I want for Peggle Blast.

430
00:26:32,173 --> 00:26:34,635
They're not generic samples like you would

431
00:26:34,655 --> 00:26:36,096
find in a typical library.

432
00:26:37,516 --> 00:26:40,898
And also instrument choice was important too. After it was decided, well, we really need to

433
00:26:40,938 --> 00:26:47,941
bring back the orchestral sounds, how do I do that in a section of five megabytes? One of the

434
00:26:47,961 --> 00:26:54,744
tricks there was to use a lot of shorter sounds that were staccato or marcato or pizzicato,

435
00:26:55,144 --> 00:26:59,846
plucked sounds, mallet sounds, all of which have a lot of character with their attack but are

436
00:26:59,866 --> 00:27:04,708
very short samples. That combined with short loops created a sample bank that was really,

437
00:27:04,748 --> 00:27:05,428
really efficient.

438
00:27:06,189 --> 00:27:13,672
And then real-time DSP is critical for anything that has multiple sounds being mixed into

439
00:27:13,852 --> 00:27:13,972
one.

440
00:27:14,312 --> 00:27:20,095
So for the music, piping it into a real-time reverb bus allowed the whole thing to kind

441
00:27:20,135 --> 00:27:22,296
of come into the same world, the same sphere.

442
00:27:25,688 --> 00:27:28,010
So here we're going to take a quick look at the palette.

443
00:27:28,210 --> 00:27:31,972
Under here you can see basically that's my full set of sample

444
00:27:31,992 --> 00:27:33,333
banks for the music there.

445
00:27:33,353 --> 00:27:36,315
You can see the string stuff, the music box, the choir,

446
00:27:37,116 --> 00:27:39,017
clarinet, brass, timpani, et cetera.

447
00:27:39,338 --> 00:27:41,899
The opera bat, which is Becky doing her opera vocal.

448
00:27:42,880 --> 00:27:44,781
And a little bit of synth there, which you

449
00:27:44,801 --> 00:27:45,402
heard in the beginning.

450
00:27:46,331 --> 00:27:51,935
And here's a setup for essentially how a sample bank is made in Wwise.

451
00:27:52,275 --> 00:27:58,359
And you can see after I imported the string staccatos here, you know, you set up their MIDI tracking note.

452
00:27:58,900 --> 00:28:03,022
And you can see there that there are two notes per octave.

453
00:28:03,583 --> 00:28:04,163
And I either did...

454
00:28:04,787 --> 00:28:09,610
two samples per octave or three samples per octave or one sample per octave, because per octave, that's all I could afford.

455
00:28:11,511 --> 00:28:16,974
But it worked out really well. Single layer sample banks worked really nicely in this case.

456
00:28:20,430 --> 00:28:23,031
Over here are the peg hit sample banks.

457
00:28:23,512 --> 00:28:27,513
Harp is the general peg hit that comes across everything.

458
00:28:27,553 --> 00:28:28,914
And I chose harp partly because I

459
00:28:28,954 --> 00:28:31,515
knew there'd be these nice glisses across pegs that

460
00:28:31,535 --> 00:28:32,436
would sound like a harp.

461
00:28:34,076 --> 00:28:35,657
And we also had a sound effect element

462
00:28:35,677 --> 00:28:37,338
that just gave it a little physical impact,

463
00:28:37,418 --> 00:28:38,458
no matter what happened there.

464
00:28:38,878 --> 00:28:41,760
And then the marimba gets layered on

465
00:28:41,780 --> 00:28:43,580
if you hit an orange peg, because orange pegs are

466
00:28:43,620 --> 00:28:44,561
more important to the player.

467
00:28:44,601 --> 00:28:46,042
So we wanted something to accent that.

468
00:28:47,815 --> 00:28:50,756
And over here, we're looking at the RTPCs

469
00:28:50,796 --> 00:28:52,457
that are applied to any given sample bank

470
00:28:53,057 --> 00:28:53,878
for the peg hits here.

471
00:28:54,118 --> 00:28:56,619
We have pan left and right, so if a peg happens on the left,

472
00:28:56,639 --> 00:28:57,899
you hear it on the left, et cetera.

473
00:28:58,559 --> 00:29:01,220
Transposition, which RJ will get to in a minute.

474
00:29:02,801 --> 00:29:05,042
Voice volume, which is your ADSR envelope.

475
00:29:05,402 --> 00:29:07,883
And velocity sensitivity.

476
00:29:07,903 --> 00:29:09,903
You did all that with RTPCs here.

477
00:29:09,943 --> 00:29:11,564
That's how they're built. So it looks like Wwise,

478
00:29:12,244 --> 00:29:13,085
but it's a sample bank.

479
00:29:13,965 --> 00:29:14,825
Here's a quick look at the.

480
00:29:15,727 --> 00:29:23,571
you know, a tactic case, a stain release that you can build for any given sample bank. So, the

481
00:29:23,611 --> 00:29:27,513
notion of a spotting session is something that's probably familiar to folks who have done film

482
00:29:27,533 --> 00:29:32,676
scoring, television work, and linear media. This is something I found, you know, the Planet of

483
00:29:32,696 --> 00:29:37,118
the Apes, Jerry Goldsmith's Planet of the Apes thing here. And you can see each cue has a very,

484
00:29:37,158 --> 00:29:41,681
very specific timing, it lists the instrumentation and so forth.

485
00:29:42,081 --> 00:29:43,682
and in his case, even the arranger that's

486
00:29:43,702 --> 00:29:44,542
going to be working on it.

487
00:29:45,743 --> 00:29:49,045
And it's really common to see film cue sheets go

488
00:29:49,245 --> 00:29:51,406
kind of in a spreadsheet-like fashion like this.

489
00:29:51,446 --> 00:29:52,326
But what about a game?

490
00:29:52,346 --> 00:29:53,167
The games aren't linear.

491
00:29:53,527 --> 00:29:54,527
So we can't do that.

492
00:29:54,567 --> 00:29:56,348
We have to have something that's more dynamic.

493
00:29:56,368 --> 00:29:58,069
And a spreadsheet will not work for this.

494
00:29:58,590 --> 00:30:01,891
So the elements I needed to consider

495
00:30:01,911 --> 00:30:05,613
were harmonic flow, the section flow, and the progression.

496
00:30:06,274 --> 00:30:08,938
the range of gameplay, fast players versus slow players,

497
00:30:09,038 --> 00:30:10,341
et cetera, and stingers.

498
00:30:10,361 --> 00:30:12,865
Now, stingers are accents that I can

499
00:30:12,965 --> 00:30:15,489
drop in over the top of the music anywhere.

500
00:30:16,251 --> 00:30:17,012
So those are the elements.

501
00:30:17,433 --> 00:30:19,556
And here's what my spotting session looked like.

502
00:30:21,180 --> 00:30:21,900
on our whiteboard.

503
00:30:22,621 --> 00:30:24,481
And you notice it's not linear.

504
00:30:25,161 --> 00:30:26,501
It's circular in a way.

505
00:30:27,782 --> 00:30:29,462
And starting up here, the meta map,

506
00:30:30,082 --> 00:30:31,102
it was where you start the game.

507
00:30:31,122 --> 00:30:32,302
You enter the game here.

508
00:30:32,863 --> 00:30:35,963
It's in the key of A, so that's part of my harmonic map.

509
00:30:36,883 --> 00:30:39,784
And loading is also in the key of A. And after it loads,

510
00:30:40,344 --> 00:30:42,624
here's the first thing you encounter

511
00:30:42,724 --> 00:30:44,565
is this section of music in D here.

512
00:30:45,425 --> 00:30:50,846
Now, I wanted, again, to treat each peg.

513
00:30:51,502 --> 00:30:54,282
I am sorry, each shot, each shot of the ball

514
00:30:54,902 --> 00:30:55,983
as kind of a new scene.

515
00:30:56,443 --> 00:30:59,003
Because the player spends time, they set up a shot,

516
00:30:59,063 --> 00:31:01,544
they shoot it, and then OK, there's another thing.

517
00:31:01,964 --> 00:31:04,164
Now, a common technique in the linear world

518
00:31:04,244 --> 00:31:07,605
is to do kind of harmonic shift over the course of a scene

519
00:31:07,665 --> 00:31:10,186
change, either right on frame or just after frame

520
00:31:10,346 --> 00:31:11,026
or preceding it.

521
00:31:11,506 --> 00:31:12,846
And so I wanted to mimic that here.

522
00:31:12,886 --> 00:31:16,447
So every time there's a shot, it moves to the next thing

523
00:31:16,467 --> 00:31:16,707
around.

524
00:31:17,167 --> 00:31:24,971
the circle. So this circle represents a gameplay loop and it moves clockwise here and rotates

525
00:31:25,011 --> 00:31:29,354
around and keep going around and you can't predict how many shots are going to be fired

526
00:31:29,394 --> 00:31:36,077
in any given game. Sometimes it's five, sometimes it is 12, sometimes it's 24. But this circular

527
00:31:36,657 --> 00:31:40,599
form allows it to kind of keep continuing. You'll see it's a circle of fifths so the

528
00:31:40,619 --> 00:31:46,022
progression can kind of just keep going there. Now that can lead at any point from any of

529
00:31:46,062 --> 00:31:46,182
these.

530
00:31:46,935 --> 00:31:49,605
sections of music here can lead out to...

531
00:31:50,417 --> 00:31:51,878
some of these completion scenarios,

532
00:31:52,538 --> 00:31:55,439
and starting with last ball or last peg.

533
00:31:56,259 --> 00:31:57,620
Not listed, but they're both in the key of A,

534
00:31:57,780 --> 00:32:01,241
and the reason is that fever is in D,

535
00:32:01,301 --> 00:32:04,482
so I've got my tonic-dominant relationship there

536
00:32:04,562 --> 00:32:05,803
when I end up hitting fever.

537
00:32:06,103 --> 00:32:08,443
But you can also go to what's called a point of loss.

538
00:32:08,463 --> 00:32:09,984
You don't get that last peg,

539
00:32:10,364 --> 00:32:12,225
and I want to hold you there for a little bit

540
00:32:12,885 --> 00:32:14,425
while you make a purchase decision

541
00:32:14,646 --> 00:32:17,026
whether to go back into the game or to just leave the game.

542
00:32:18,467 --> 00:32:23,488
So these points are critical in that the player can sit there and ponder and you have to think about that

543
00:32:23,528 --> 00:32:27,549
and there's not a fixed amount of time, so they have to kind of continue before moving on.

544
00:32:28,649 --> 00:32:32,190
And the goal is to make that as smooth as possible.

545
00:32:32,770 --> 00:32:37,511
So, last peg, you hit fever, ba-da-boom, it's all great, you say yes, next level,

546
00:32:37,611 --> 00:32:40,531
it will load the next level and start at the top again and there's your loop.

547
00:32:41,112 --> 00:32:46,213
So any game has a game flow, or what a lot of times in the business now is called the game loop.

548
00:32:46,233 --> 00:32:47,053
What's your game loop?

549
00:32:47,683 --> 00:32:55,626
So pay attention to what that is and make the designer your best friend so you can figure out what this is so you can map the music to that.

550
00:32:57,386 --> 00:33:07,530
So compositional workflow was composing in Pro Tools for this project for the most part, but by the end I ended up switching to Nuendo.

551
00:33:08,362 --> 00:33:09,162
for various reasons.

552
00:33:09,642 --> 00:33:11,143
And if you haven't seen it yet,

553
00:33:11,323 --> 00:33:13,664
the Nuendo-Wise combo thing that they've been talking about

554
00:33:13,724 --> 00:33:15,625
is probably gonna be really cool to see.

555
00:33:16,066 --> 00:33:16,786
I haven't played with it yet,

556
00:33:16,826 --> 00:33:18,707
but I can't wait because I've been experimenting

557
00:33:18,727 --> 00:33:20,728
with this kind of loop and I know what needs to happen.

558
00:33:22,008 --> 00:33:22,609
But the first step.

559
00:33:23,369 --> 00:33:27,570
is I'd create a temp sample bank in Kontakt in Nuendo or Pro Tools

560
00:33:28,010 --> 00:33:29,831
and create music the old-fashioned way,

561
00:33:29,911 --> 00:33:31,791
just kind of create all the sections and the cues,

562
00:33:31,851 --> 00:33:34,532
I'd write all the cues here, to gameplay captures,

563
00:33:34,632 --> 00:33:35,852
so I could see the game at least.

564
00:33:36,713 --> 00:33:38,793
And once that was kind of in a pretty good place,

565
00:33:40,193 --> 00:33:42,514
I would point the MIDI tracks in Nuendo

566
00:33:42,774 --> 00:33:44,395
to the custom sample banks that I built.

567
00:33:45,115 --> 00:33:48,518
So treating Ys as if it's a sampler right next door.

568
00:33:49,299 --> 00:33:52,362
And that allowed me to edit with all the fine-tuning edit

569
00:33:52,382 --> 00:33:55,626
capabilities I have in Nuendo or Pro Tools, and mix it,

570
00:33:55,686 --> 00:33:57,348
make sure the velocity is working well.

571
00:33:57,728 --> 00:34:00,070
And once that's sounding exactly the way I know it's

572
00:34:00,090 --> 00:34:03,054
going to sound in game, I export the MIDI tracks and

573
00:34:03,134 --> 00:34:04,115
import them into Ys.

574
00:34:05,125 --> 00:34:09,809
and then Wwise can take over from there and I can take the MIDI files and arrange them

575
00:34:09,849 --> 00:34:12,130
into the segments and playlists as needed.

576
00:34:12,410 --> 00:34:13,771
So that was the general workflow.

577
00:34:13,791 --> 00:34:14,712
It worked really well.

578
00:34:15,553 --> 00:34:19,395
So by the end you were effectively using Wwise as your sampler?

579
00:34:19,455 --> 00:34:21,377
Yes, Wwise was my sampler and here it is.

580
00:34:21,477 --> 00:34:24,259
This is what Wwise looks like with MIDI.

581
00:34:24,379 --> 00:34:26,300
It looks like a piano roll.

582
00:34:30,303 --> 00:34:32,805
like you would in a, you can do some basic adding but not a lot

583
00:34:32,845 --> 00:34:35,327
yet. I'm sure they'll be adding to that. Here in the profile you

584
00:34:35,347 --> 00:34:38,710
can see samples just flying by in real time. I have my voice

585
00:34:38,910 --> 00:34:43,394
count. I can see my CPU that I'm using. I can see the routing

586
00:34:43,834 --> 00:34:47,677
and effects that I'm using. So all this tracking that I can do

587
00:34:47,717 --> 00:34:50,620
in real time as I'm arranging and writing. Even when I'm

588
00:34:50,720 --> 00:34:54,843
piping in the MIDI from Nuendo, I can see all that stuff going

589
00:34:54,923 --> 00:34:58,906
on. So it was really, really valuable to have that going on

590
00:34:58,946 --> 00:34:59,066
there.

591
00:35:01,198 --> 00:35:04,059
So any given music segment needed

592
00:35:04,079 --> 00:35:05,339
to be set up for the peg hits.

593
00:35:05,359 --> 00:35:07,940
Because as you know, the peg hits drop down and play

594
00:35:07,980 --> 00:35:09,301
over the top of any given music.

595
00:35:09,321 --> 00:35:11,101
And as you see, there's 12 different key centers

596
00:35:11,121 --> 00:35:11,782
that are possible.

597
00:35:11,822 --> 00:35:12,462
How do you do that?

598
00:35:12,922 --> 00:35:16,283
Well, in any given segment, I need

599
00:35:16,303 --> 00:35:19,584
to consider the key center, the quality, and the range.

600
00:35:20,625 --> 00:35:23,646
The specifics there have to do with these custom cues

601
00:35:23,666 --> 00:35:24,646
I would drop into Wwise.

602
00:35:25,908 --> 00:35:27,930
And the key center in this case is A-flat.

603
00:35:27,970 --> 00:35:29,231
The quality is Mixolydian.

604
00:35:29,871 --> 00:35:32,153
And the range is a MIDI range of 59, sorry,

605
00:35:32,313 --> 00:35:35,916
yeah, 56 to 99 MIDI note values.

606
00:35:36,657 --> 00:35:39,079
So I could drop those in at any point in the segment,

607
00:35:39,299 --> 00:35:40,840
usually at the beginning, and then that

608
00:35:40,860 --> 00:35:43,122
would tell the Peg Hit System, which you'll hear about next,

609
00:35:44,504 --> 00:35:44,964
what to do.

610
00:35:45,524 --> 00:35:48,647
And with that, RJ will take it from there.

611
00:35:50,408 --> 00:35:53,111
Yeah, so to back out high level for a quick second,

612
00:35:54,292 --> 00:35:54,432
the

613
00:35:55,414 --> 00:35:58,995
The goal for the PEG hit system, well, we had a couple of goals.

614
00:35:59,115 --> 00:36:01,216
The first one, we wanted to take advantage of the MIDI

615
00:36:01,236 --> 00:36:06,438
since we were using it elsewhere in the game, which inherently

616
00:36:06,538 --> 00:36:08,398
would allow us to use fewer WAV files.

617
00:36:09,159 --> 00:36:13,360
In PEG-L2, each music segment corresponded

618
00:36:13,400 --> 00:36:15,741
to a separate playlist of PEG hits

619
00:36:16,441 --> 00:36:20,843
with a one-to-one WAV file corresponding to each PEG hit.

620
00:36:23,163 --> 00:36:25,244
And then that also helped with.

621
00:36:25,890 --> 00:36:30,333
caused a little more implementation time, right? Every time a new music segment would come in,

622
00:36:30,693 --> 00:36:35,236
you had to create a new playlist and then fill it with all of the appropriate peg hits.

623
00:36:36,777 --> 00:36:40,999
Seems like it would take a lot of time. So we wanted to reduce some of the implementation

624
00:36:41,039 --> 00:36:46,362
time for that. Also, the other consideration was Pickle Blast being a live service game. We

625
00:36:46,402 --> 00:36:50,825
had no clue, you know, how much music I would have to write over the course of the game.

626
00:36:51,347 --> 00:36:55,411
and we didn't want to have to keep going in and maintaining the system every time we added new

627
00:36:55,451 --> 00:37:00,675
content. And then the last thing was to bring the peg hits into the music system which kind of

628
00:37:00,936 --> 00:37:04,939
to me felt like a natural thing. The game, the peg hits are a very musical part of gameplay.

629
00:37:06,080 --> 00:37:13,767
Oops, hang on, we'll go back, we'll go back. Yeah. So to go back to where Guy left us off, he

630
00:37:16,695 --> 00:37:19,216
He would start by dropping the markers at various points

631
00:37:19,716 --> 00:37:21,216
in the music segments of gameplay

632
00:37:21,236 --> 00:37:25,518
that corresponded to new keys that he was switching to.

633
00:37:26,539 --> 00:37:30,980
Those strings were passed exactly into the Unity game

634
00:37:31,040 --> 00:37:35,762
engine through Wise's music callback system, where Unity

635
00:37:35,882 --> 00:37:37,983
would parse those out into the four separate segments,

636
00:37:38,023 --> 00:37:40,504
the key, the scale, and then the start note and the end note,

637
00:37:42,625 --> 00:37:45,026
so that we could generate the new key on the fly.

638
00:37:46,222 --> 00:37:51,164
we, we also decided that we didn't want to, instead of having to create some giant lookup

639
00:37:51,204 --> 00:37:56,227
table for all of the keys, scale, combos that had all of the possible MIDI notes that seemed

640
00:37:56,667 --> 00:38:02,590
very complicated to create, maintain, again we, we wanted to avoid all of that stuff. So we

641
00:38:02,730 --> 00:38:09,214
created the, the core, the new keys on the fly based on the parameters that define the key.

642
00:38:10,054 --> 00:38:14,837
Let me explain what that means. So basically we converted, we converted the keys to

643
00:38:15,328 --> 00:38:18,010
all scales into their numerical equivalents.

644
00:38:18,050 --> 00:38:20,172
Everybody knows that the major scale is whole, whole, half,

645
00:38:20,232 --> 00:38:22,514
whole, whole, whole, half.

646
00:38:23,154 --> 00:38:25,656
But if you just switch those to twos and ones or threes,

647
00:38:27,098 --> 00:38:31,401
it's very easy to see that you can define any scale with its

648
00:38:31,461 --> 00:38:32,322
numerical equivalent.

649
00:38:32,902 --> 00:38:34,904
And as Guy pointed out, you could even create your own as

650
00:38:34,924 --> 00:38:35,805
long as they all added up to 12.

651
00:38:37,426 --> 00:38:37,706
So that was.

652
00:38:38,396 --> 00:38:42,259
very cool. And then this is just a little example from within

653
00:38:42,359 --> 00:38:48,284
Unity. So then once we had those lists, we would parse those out

654
00:38:48,945 --> 00:38:51,887
in a little script, which is basically, this is the part

655
00:38:51,907 --> 00:38:55,731
you're looking for. It's just kind of grabbing each one of

656
00:38:55,751 --> 00:38:58,793
those numbers and building a list out of those, so that when

657
00:38:58,833 --> 00:39:01,916
it came time to generate a new key, we just looked up whatever

658
00:39:01,936 --> 00:39:04,138
the key was, if it's major, we grabbed that.

659
00:39:05,548 --> 00:39:08,449
We start on the first MIDI note.

660
00:39:09,509 --> 00:39:12,350
If it's a G scale or a G key that he's calling,

661
00:39:12,670 --> 00:39:14,290
we know that that MIDI note is number seven.

662
00:39:15,731 --> 00:39:16,691
So we start there.

663
00:39:19,171 --> 00:39:19,892
Set the first note.

664
00:39:20,312 --> 00:39:22,752
And then we just start iterating through those scale degrees

665
00:39:22,792 --> 00:39:25,953
that you saw us set earlier, either until we

666
00:39:25,993 --> 00:39:29,034
hit that last note or until we hit 128, which

667
00:39:29,094 --> 00:39:31,615
is the logical end for a MIDI scale.

668
00:39:32,245 --> 00:39:40,887
So what we just did there is we built out our full scale of all the possible MIDI note numbers that the playback engine could play.

669
00:39:42,148 --> 00:39:53,471
So then, once each peg was hit, all we had to do was increment to the next MIDI note number that's in that list, and theoretically fire up the MIDI event.

670
00:39:53,838 --> 00:39:57,901
The one caveat there was that currently the Wwise

671
00:39:58,061 --> 00:40:01,163
implementation of MIDI requires that all MIDI notes,

672
00:40:01,684 --> 00:40:04,406
all samples be played by an actual MIDI file.

673
00:40:05,046 --> 00:40:09,669
You can't programmatically say, give me an 87 MIDI note

674
00:40:09,709 --> 00:40:10,410
with this velocity.

675
00:40:11,471 --> 00:40:13,492
So what we had to do is we had to actually point these

676
00:40:13,552 --> 00:40:14,953
events to real MIDI files.

677
00:40:14,993 --> 00:40:19,196
Now instead of bringing in one single MIDI note 128 times

678
00:40:19,216 --> 00:40:22,899
for all the possibilities, we used the transpose feature.

679
00:40:24,545 --> 00:40:30,508
that comes with the new implementation of MIDI. So we brought in a single C0 MIDI note and then

680
00:40:30,548 --> 00:40:37,372
just used the MIDI number that we assigned before in that last slide, set that to an RTPC, which

681
00:40:37,392 --> 00:40:45,916
you can see maps, you know, one to one right here. And then we send that off, modify the C0 MIDI

682
00:40:45,956 --> 00:40:47,397
note to its appropriate note.

683
00:40:48,017 --> 00:40:48,857
and then fire the event.

684
00:40:49,017 --> 00:40:52,879
So for example, here's a quick look again

685
00:40:52,919 --> 00:40:58,242
at that sample for the PEG hits the guy was showing.

686
00:40:58,662 --> 00:41:01,743
What it would do is if it's an F note, a 65,

687
00:41:02,264 --> 00:41:06,066
it would set that ARP TPC to 65.

688
00:41:06,526 --> 00:41:11,728
It would properly select the closest 62 D note,

689
00:41:12,008 --> 00:41:13,749
and then would move it up 3 1⁄2 steps

690
00:41:14,710 --> 00:41:15,850
before playing the proper note.

691
00:41:16,871 --> 00:41:17,031
So.

692
00:41:17,629 --> 00:41:21,271
kind of complicated to get to where we got but once we got this all set up

693
00:41:21,832 --> 00:41:24,374
it really was pretty much self-sufficient

694
00:41:24,854 --> 00:41:27,396
and every time we had a new music segment

695
00:41:28,117 --> 00:41:28,737
that would come in

696
00:41:29,017 --> 00:41:31,940
it kind of took care of it because we didn't need to fill anything out

697
00:41:32,840 --> 00:41:34,221
We have a perfect example of that

698
00:41:34,421 --> 00:41:36,423
when it came time to writing boss music

699
00:41:37,904 --> 00:41:41,067
the regular music is mostly in major or mixed lydian but the boss music has a lot of minor

700
00:41:41,727 --> 00:41:43,729
scales in it so we had to kind of

701
00:41:44,537 --> 00:41:49,461
create a few new scale options in there, they're super easy, and it just kind of fell together.

702
00:41:49,481 --> 00:41:53,704
Didn't have to change anything in the tech. Yeah, I think Guy added something like 15 more minutes

703
00:41:53,724 --> 00:41:58,868
of music for that feature, and I didn't even go back in and look at this system. So, really,

704
00:41:58,908 --> 00:42:04,873
really helped us out again with the game as a live service to be able to kind of let this

705
00:42:05,153 --> 00:42:08,796
system be self-sufficient. So yeah, so that's how the PEG system worked.

706
00:42:09,850 --> 00:42:12,374
So just to round out the music system here,

707
00:42:13,075 --> 00:42:16,639
one of the biggest takeaways was MIDI

708
00:42:16,679 --> 00:42:19,082
is more about the memory savings in a big way.

709
00:42:19,663 --> 00:42:21,365
Of course, the insane memory savings

710
00:42:21,445 --> 00:42:23,568
is kind of what took us down this path in the first place.

711
00:42:24,610 --> 00:42:27,473
Without that, we might not have even tried MIDI.

712
00:42:28,028 --> 00:42:30,449
But it led to this big open-ended potential

713
00:42:30,469 --> 00:42:31,369
for what MIDI can do for us.

714
00:42:31,509 --> 00:42:33,430
Obviously, the peg hit system, but also

715
00:42:33,470 --> 00:42:37,212
for how you can manipulate music on the fly in general.

716
00:42:37,292 --> 00:42:41,073
Melodic, harmonic, and rhythmic flexibility there just

717
00:42:41,093 --> 00:42:42,354
doesn't exist with WAV files.

718
00:42:42,814 --> 00:42:45,355
Now that said, it's not an either-or situation.

719
00:42:45,435 --> 00:42:47,836
There's no battle that needs to be raged about MIDI

720
00:42:47,876 --> 00:42:48,637
versus WAV files.

721
00:42:48,657 --> 00:42:50,457
These are two different tools in the toolbox.

722
00:42:50,897 --> 00:42:53,318
And I plan on using them in conjunction with each other

723
00:42:53,359 --> 00:42:54,079
and even layered.

724
00:42:54,179 --> 00:42:55,519
So mix your awesome DAW.

725
00:42:56,360 --> 00:43:00,301
you know, set of stems and put some MIDI over the top to make sure you're hitting the precision

726
00:43:00,321 --> 00:43:05,702
that you need to for certain cues. And you have kind of a really dangerous system that

727
00:43:05,722 --> 00:43:12,344
we're looking forward to. So, once this is all done, the next, you know, every hero's journey

728
00:43:12,484 --> 00:43:18,625
comes with the road home, you know, so we had to come home and...

729
00:43:19,658 --> 00:43:24,301
For me, the biggest takeaways, obviously the MIDI isn't just for breakfast anymore,

730
00:43:24,362 --> 00:43:26,683
it's kind of one of the biggest takeaways from this whole thing,

731
00:43:28,345 --> 00:43:33,148
but perhaps even bigger was the idea that the technical sound designer

732
00:43:33,168 --> 00:43:37,552
and the role that RJ played, having him be part of our team...

733
00:43:39,635 --> 00:43:42,578
gave us an autonomy that I've never had on a project before.

734
00:43:43,138 --> 00:43:46,841
So even if we had this tech, if he were living on the game team

735
00:43:46,901 --> 00:43:48,223
and we had to go through gatekeepers

736
00:43:48,503 --> 00:43:49,964
for any given feature, we never would

737
00:43:49,984 --> 00:43:51,085
have been able to do this.

738
00:43:51,125 --> 00:43:53,748
So definitely huge for us.

739
00:43:55,409 --> 00:43:58,332
For me, I think one of the biggest takeaways was that as

740
00:43:59,073 --> 00:44:02,316
we can integrate more real-time synthesis and more

741
00:44:02,336 --> 00:44:03,437
of these different

742
00:44:04,917 --> 00:44:09,479
synthesizers and everything even within Wwise like different plugins maybe third party plugins that we can use

743
00:44:09,860 --> 00:44:15,603
You'll really be able to take create assets quickly and effectively in new ways and just make an easier process

744
00:44:15,803 --> 00:44:21,747
Did you say third party? I said third party. Whoa, yeah party since maybe yeah

745
00:44:21,807 --> 00:44:25,169
Since then software or just less barriers between different programs in general

746
00:44:25,249 --> 00:44:28,211
It's frustrating you have to open this and open that and they can't talk to each other

747
00:44:28,691 --> 00:44:33,354
Working this way everything was talking together and working nicely and it was awesome. Yeah

748
00:44:34,720 --> 00:44:39,941
One of the things that I was really interested in was, you know, MIDI is kind of just this

749
00:44:40,041 --> 00:44:44,422
data component, right? I mean, obviously, the first use for it is to just play your

750
00:44:44,442 --> 00:44:48,962
music segments through MIDI, but really, you know, you've got this very complicated game

751
00:44:49,002 --> 00:44:53,203
engine doing nothing but just spitting data out in, like, really, really different ways,

752
00:44:53,243 --> 00:44:57,144
and the idea that MIDI can be used in more ways than just music, you know? I mean, really

753
00:44:57,164 --> 00:45:00,745
all it is is a way to interpret data, so it'll be cool to see how people...

754
00:45:01,965 --> 00:45:06,246
start using MIDI for anything that they can imagine.

755
00:45:06,426 --> 00:45:08,166
I think we kind of scratched the surface with this

756
00:45:08,587 --> 00:45:11,847
PEG hit system, but I think that it can go a long way further.

757
00:45:12,728 --> 00:45:14,688
I don't know if we mentioned, but we ended up shipping

758
00:45:14,728 --> 00:45:18,809
with 1.3 megs of sound effects, and how much music did you put in?

759
00:45:18,829 --> 00:45:21,050
Well, just the balance of the five, so like three and a half.

760
00:45:21,070 --> 00:45:21,950
No, but it was even less than that.

761
00:45:21,970 --> 00:45:24,751
Oh, it was less than five. It ended up like 4.5 or something like that.

762
00:45:24,771 --> 00:45:24,911
Yeah.

763
00:45:25,251 --> 00:45:27,231
So, yeah, I was the hog.

764
00:45:27,631 --> 00:45:30,732
I took over two and a half megabytes, and she had a meg and a half.

765
00:45:30,812 --> 00:45:30,912
Yeah.

766
00:45:32,536 --> 00:45:33,957
But I'm the manager, that's why.

767
00:45:33,997 --> 00:45:34,497
I get to see.

768
00:45:34,577 --> 00:45:35,958
Yeah, you get to see.

769
00:45:36,058 --> 00:45:36,858
We know our roles.

770
00:45:37,178 --> 00:45:38,118
Yeah, it works out.

771
00:45:38,179 --> 00:45:39,139
It was kind of good.

772
00:45:39,159 --> 00:45:39,399
Yeah.

773
00:45:39,599 --> 00:45:42,680
And there was hundreds of sounds and lots of music and I didn't feel like we skimped

774
00:45:42,740 --> 00:45:43,380
for a mobile game.

775
00:45:43,981 --> 00:45:44,241
Yeah.

776
00:45:44,321 --> 00:45:48,362
Oh, you know, while we're kind of adding points to this, one of the things we asked for and

777
00:45:48,382 --> 00:45:52,784
I think may actually happen is the ability to, you know...

778
00:45:53,633 --> 00:45:57,295
compress files for download but then decompress them on load.

779
00:45:57,335 --> 00:45:59,896
As you know, AUG and MP3 files take a lot of CPU,

780
00:45:59,916 --> 00:46:01,637
so you can't have too many of those flying around

781
00:46:01,677 --> 00:46:02,257
in a mobile game.

782
00:46:02,917 --> 00:46:05,018
But if you could decompress those as WAV files,

783
00:46:05,138 --> 00:46:08,020
all of a sudden you've got this package that

784
00:46:08,480 --> 00:46:09,740
feels like a lot more audio.

785
00:46:10,160 --> 00:46:12,081
You can pack a lot more into your five megabytes that way

786
00:46:13,342 --> 00:46:13,982
for looking ahead.

787
00:46:15,123 --> 00:46:20,985
So with that, we would like to take any questions you

788
00:46:21,006 --> 00:46:21,746
might have.

789
00:46:23,840 --> 00:46:31,384
Just one point or one other thing. We're going to be showing some demos at the Wwise Expo booth

790
00:46:31,424 --> 00:46:37,006
both today and tomorrow from 1 to 3. So if you want to see some more in action and try and break our build,

791
00:46:37,467 --> 00:46:41,008
come on down and the three of us will be there at various times.

792
00:46:45,264 --> 00:46:48,868
Hello. I just wanted to say that the music sounds really good.

793
00:46:48,988 --> 00:46:51,251
And obviously a lot of that is the effort that's gone into Nuendo

794
00:46:51,291 --> 00:46:54,574
in terms of sequencing and velocity and all that jazz.

795
00:46:55,235 --> 00:46:59,900
But how much effort went into the sounds you actually put into your sample banks?

796
00:46:59,920 --> 00:47:01,622
I mean, obviously you create your own sample banks.

797
00:47:01,802 --> 00:47:04,886
I mean, obviously a lot of effort went in, but how did you go about creating them?

798
00:47:04,926 --> 00:47:07,268
Did you record new musicians or did you use libraries?

799
00:47:08,082 --> 00:47:10,104
Yeah, no.

800
00:47:10,404 --> 00:47:13,746
The sample source, thankfully, we

801
00:47:13,786 --> 00:47:16,488
did live orchestral sessions for Peggle 2.

802
00:47:16,669 --> 00:47:17,249
We had a budget.

803
00:47:17,289 --> 00:47:20,451
Peggle 2 was a larger project, and we had orchestral.

804
00:47:20,471 --> 00:47:24,434
A lot of it we recorded short little phrases, or more

805
00:47:24,474 --> 00:47:27,677
specifically, single note elements for the peg hits

806
00:47:27,697 --> 00:47:28,057
for Peggle 2.

807
00:47:28,177 --> 00:47:31,259
And I was able to kind of like harvest those sessions

808
00:47:31,299 --> 00:47:32,220
to create sounds.

809
00:47:32,660 --> 00:47:35,162
Now, when I'm doing a sound sample bank that I know

810
00:47:35,202 --> 00:47:36,643
needs to be memory efficient.

811
00:47:38,525 --> 00:47:44,088
One way to make sure that it's going to work is that each sample has to just be rich in and of itself.

812
00:47:44,128 --> 00:47:46,069
You hear that sample raw, it's got to sound rich.

813
00:47:46,650 --> 00:47:48,531
So maybe there's layering that goes on.

814
00:47:48,551 --> 00:47:55,154
You'll take a couple of sounds and layer them, make it sound like if in your DAW you might take a couple of string patches and layer them to thicken it up.

815
00:47:55,414 --> 00:47:57,896
Well, I do that with samples to make it, you know.

816
00:47:58,376 --> 00:48:02,719
little more strong sounding so that when it's in the context that it still holds up.

817
00:48:02,759 --> 00:48:05,681
But the other end of that is creating custom samples.

818
00:48:05,721 --> 00:48:08,883
Again, I know the music I'm going to be creating, so I tailor it in that direction.

819
00:48:10,402 --> 00:48:13,866
How big were the samples you created, like for individual string hits?

820
00:48:14,246 --> 00:48:17,930
I mean, I've done similar stuff before and always run into this problem where everything kind of sounds jagged

821
00:48:17,990 --> 00:48:21,974
because I've got these tiny little hits and I'm trying to make it sound like a rich orchestra

822
00:48:22,014 --> 00:48:24,276
and I've got these tails, but people want stuff to be short.

823
00:48:24,356 --> 00:48:26,178
Right, the tails like end up... Right.

824
00:48:26,198 --> 00:48:30,763
So the key there, you have like, let's say a pizzicato or a staccato.

825
00:48:30,903 --> 00:48:33,145
Boom, it has a nice attack. It rolls off. I'll do it your way.

826
00:48:34,806 --> 00:48:36,868
you try to make that as short as possible without sounding like,

827
00:48:36,888 --> 00:48:37,809
oop, that just cut off.

828
00:48:38,189 --> 00:48:41,692
But the key there is the reverb really helps flow that through.

829
00:48:42,113 --> 00:48:42,873
That was the glue.

830
00:48:43,234 --> 00:48:44,335
Oh, it uses DSP and what not.

831
00:48:44,355 --> 00:48:45,456
Oh, yeah, real-time reverb.

832
00:48:45,476 --> 00:48:47,057
So it's all being bussed through real-time reverb.

833
00:48:47,298 --> 00:48:50,561
Yeah, we didn't have any baked reverb for either sound effects or music.

834
00:48:50,581 --> 00:48:51,922
Yeah, you can't make it on the fly.

835
00:48:54,018 --> 00:48:58,439
But there was also, I did a lot of mastering and pre-processing to the samples themselves.

836
00:48:58,479 --> 00:49:01,320
You'll notice the names on some of them, like Pultec EQ or whatever,

837
00:49:01,580 --> 00:49:06,042
where I'm treating them as if it's a final sound.

838
00:49:06,382 --> 00:49:09,123
Because I know I don't have a Pultec in Wwise.

839
00:49:09,163 --> 00:49:13,364
I can do that kind of treatment prior, but it's still a dry sample once it's in there.

840
00:49:14,204 --> 00:49:15,945
And then the reverb gets added in real time.

841
00:49:16,245 --> 00:49:17,165
Okay. Excellent. Thank you.

842
00:49:23,386 --> 00:49:25,789
Yeah, if you want to know more about how that works.

843
00:49:25,809 --> 00:49:27,451
There's a Peggle 2 talk on the Vault.

844
00:49:27,532 --> 00:49:28,393
Watch it from last year.

845
00:49:28,493 --> 00:49:28,793
Thank you.

846
00:49:29,234 --> 00:49:31,156
And that'll kind of give you some back story on Peggle 2

847
00:49:31,757 --> 00:49:33,440
and leading up to how Peggle Blast came.

848
00:49:33,780 --> 00:49:34,000
Thanks.

849
00:49:34,020 --> 00:49:35,723
OK, so first, we're going to.

850
00:49:40,372 --> 00:49:43,614
I'm literally in tears in my eyes listening to you guys talk about this.

851
00:49:43,634 --> 00:49:45,174
This is unbelievably great.

852
00:49:47,235 --> 00:49:48,556
I've got a bunch of questions.

853
00:49:48,616 --> 00:49:50,277
First, what about latency?

854
00:49:50,737 --> 00:49:54,379
Now when you're doing stuff in Unity on the machine, everything is fine and cool.

855
00:49:54,399 --> 00:49:58,941
But when you put it on a mobile device, you can get latency where, you know,

856
00:49:59,581 --> 00:50:02,422
and in a game like this where the peg and the sound, it's...

857
00:50:02,910 --> 00:50:05,411
have to be pretty close. Did you have run into any trouble with that?

858
00:50:06,071 --> 00:50:07,071
And if so, how did you deal with it?

859
00:50:07,091 --> 00:50:12,292
No, not really. We ran into some issues on Android devices a little early on where there

860
00:50:12,312 --> 00:50:17,953
was some latency. But I think that as the rest of the game team started optimizing other

861
00:50:17,973 --> 00:50:21,354
stuff, everything started syncing up pretty well.

862
00:50:21,374 --> 00:50:26,875
Yeah, in the early days of mobile games, Android in particular had a lot of latency. But I

863
00:50:26,895 --> 00:50:32,116
think the Unity-wise connection and the improved drivers on Android all helped that.

864
00:50:32,851 --> 00:50:37,795
Yeah, that's a little disappointing because the Unity Fmod that I've been doing, latency

865
00:50:37,875 --> 00:50:38,555
is horrible.

866
00:50:38,996 --> 00:50:39,736
It's like 150 milliseconds.

867
00:50:39,776 --> 00:50:40,857
It's more about syncing up the two.

868
00:50:40,917 --> 00:50:41,357
I don't know.

869
00:50:41,377 --> 00:50:42,278
Yeah.

870
00:50:42,298 --> 00:50:48,602
Well, I mean, so like when I do a, I'm doing a Unity Fmod implementation, the animation,

871
00:50:48,643 --> 00:50:51,244
the cannon goes, and then the sound happens.

872
00:50:51,665 --> 00:50:54,246
And it was so bad that when I push a button,

873
00:50:56,252 --> 00:50:59,834
the sound would happen so much farther later that it was almost disconnected.

874
00:50:59,954 --> 00:51:01,795
We didn't see any problem with that.

875
00:51:01,836 --> 00:51:02,696
No, we never ran into that.

876
00:51:03,016 --> 00:51:03,476
Interesting.

877
00:51:03,617 --> 00:51:04,257
Yep, not at all.

878
00:51:04,697 --> 00:51:06,138
Well, there you go.

879
00:51:06,738 --> 00:51:11,101
Another question, a question about the samples in your sample banks.

880
00:51:11,661 --> 00:51:12,782
Any looping in the samples?

881
00:51:12,802 --> 00:51:13,022
Yeah.

882
00:51:13,562 --> 00:51:15,283
So do you do bling and then have a loop?

883
00:51:15,343 --> 00:51:15,684
No.

884
00:51:16,184 --> 00:51:18,365
I had, I did kind of a tricky thing where...

885
00:51:20,302 --> 00:51:27,447
I had like string staccatos, for example, and I had just a string loop, or a different bank that was just string loops.

886
00:51:28,147 --> 00:51:29,788
So you'd play the staccato and then the loop.

887
00:51:29,808 --> 00:51:31,089
And then sustain the thing underneath.

888
00:51:31,109 --> 00:51:33,051
But the loop was always first to last.

889
00:51:33,091 --> 00:51:33,171
Yeah.

890
00:51:33,191 --> 00:51:34,251
You never had any looping in.

891
00:51:34,271 --> 00:51:39,255
It's mimicking what, you know, a play in the middle loop would do, but with the strings.

892
00:51:39,375 --> 00:51:39,695
Okay, cool.

893
00:51:42,551 --> 00:51:45,896
Oh, and the other question was, one of the things I used to do with the Beatnik engine,

894
00:51:45,916 --> 00:51:52,447
which was obviously a summer, was to record chords and things that I would want to do,

895
00:51:53,007 --> 00:51:55,732
like I'm going to play this chord and that chord and that, so instead of having a bunch

896
00:51:55,772 --> 00:51:55,812
of...

897
00:51:56,959 --> 00:51:58,460
That would save me voices.

898
00:51:58,540 --> 00:51:58,700
Yeah.

899
00:51:58,960 --> 00:52:02,361
So instead of having a bunch of string samples that were played, of course, I

900
00:52:02,381 --> 00:52:05,282
would record just the chord and then just play that thing, obviously you did

901
00:52:05,322 --> 00:52:08,484
that for the nice and the awesome stuff.

902
00:52:08,564 --> 00:52:08,744
Right.

903
00:52:08,904 --> 00:52:11,045
But you, did you do any of that for any of the other instruments?

904
00:52:11,185 --> 00:52:15,887
No, everything else is single note samples, but I do think that's a technique,

905
00:52:15,927 --> 00:52:18,528
you know, obviously with the nice and all that, those were recorded as

906
00:52:18,568 --> 00:52:20,528
chords rather than played that way.

907
00:52:20,548 --> 00:52:21,869
Um, but on.

908
00:52:22,374 --> 00:52:25,156
Earlier, in the 90s, when I was doing MIDI in a previous life,

909
00:52:26,297 --> 00:52:27,859
I would often record little riffs sometimes.

910
00:52:27,879 --> 00:52:31,182
Like if you have a guitar riff, it sounds better just to do the da-da-da-da, right?

911
00:52:31,563 --> 00:52:35,366
Or to have something play a chord and just play it like a DJ would, right?

912
00:52:35,506 --> 00:52:37,929
So those techniques are really valuable, though.

913
00:52:38,109 --> 00:52:41,012
I didn't do that here, though, except for the exclamations.

914
00:52:41,032 --> 00:52:43,835
Okay, well, I could ask questions about this for days.

915
00:52:43,855 --> 00:52:44,695
We'll talk more, Peter.

916
00:52:44,775 --> 00:52:45,456
We'll talk later.

917
00:52:48,502 --> 00:52:54,183
Thanks. I don't know if you guys can answer this question, but it was sort of occurring to me as you were talking about

918
00:52:54,783 --> 00:52:58,044
building the sample library up and wise. I'm wondering

919
00:52:59,244 --> 00:53:04,745
if you based it on a commercial sample library, if you would run into licensing problems. Yes, you would. Okay.

920
00:53:04,945 --> 00:53:09,766
Yes, you absolutely would. There in the 90s, late 90s, there was a, because

921
00:53:10,467 --> 00:53:16,888
direct music used MIDI and sample banks, there was a big discussion about what was legal and what wasn't. And the general rule is don't do it.

922
00:53:18,911 --> 00:53:24,755
You can sample like analog synthesizers and things that are acoustic in nature, no problem,

923
00:53:24,795 --> 00:53:28,198
but you can't pirate other libraries is the problem.

924
00:53:28,578 --> 00:53:34,402
That's why I think it's time to actually start having conversations with folks who make sample libraries

925
00:53:34,462 --> 00:53:39,066
and see which ones are amenable to this market, because it's a different market.

926
00:53:39,166 --> 00:53:42,688
It would be much like your lease DSP for a game.

927
00:53:43,189 --> 00:53:46,111
It would be that kind of a business model, and I think it's time to bring that back.

928
00:53:48,244 --> 00:53:51,087
They'd have to be smaller sound sets and geared for games as well.

929
00:53:51,748 --> 00:53:51,948
Right.

930
00:53:53,290 --> 00:53:55,372
So anybody, any sample library makers out there?

931
00:53:56,433 --> 00:53:57,394
Alright, we got two.

932
00:53:57,974 --> 00:53:58,615
Nice.

933
00:53:58,655 --> 00:53:58,935
Three.

934
00:54:00,256 --> 00:54:00,797
There's the word.

935
00:54:01,077 --> 00:54:01,498
Word is out.

936
00:54:03,372 --> 00:54:05,114
First of all, amazing job guys.

937
00:54:05,254 --> 00:54:05,594
Thank you.

938
00:54:05,614 --> 00:54:07,035
I'm really inspired by the talk.

939
00:54:07,315 --> 00:54:11,218
And I definitely think that the hybrid of real waves

940
00:54:11,378 --> 00:54:13,840
and maybe it's the way to go for the future.

941
00:54:15,180 --> 00:54:17,382
Curious about you guys' audio output settings

942
00:54:18,463 --> 00:54:19,523
when you're doing your compression.

943
00:54:19,824 --> 00:54:22,005
I assume you're doing selective compression

944
00:54:22,045 --> 00:54:23,446
between all the different areas.

945
00:54:24,867 --> 00:54:26,388
Oh, like data compression?

946
00:54:26,628 --> 00:54:27,449
Yeah, data compression.

947
00:54:28,467 --> 00:54:28,987
Let's see.

948
00:54:29,208 --> 00:54:31,170
I mean you had to go into that a lot with the sample.

949
00:54:31,210 --> 00:54:32,511
We all kind of worked in our own areas.

950
00:54:32,591 --> 00:54:37,196
In the samples I experimented, one time I tried all-og, because I could get more out of it.

951
00:54:37,817 --> 00:54:42,602
But it just brought the system to its knees in unexpected ways, asymmetrically.

952
00:54:42,622 --> 00:54:44,023
It wasn't like, oh, it's just crawling.

953
00:54:44,063 --> 00:54:46,346
It's like, boom, randomly with, you know.

954
00:54:46,766 --> 00:54:47,987
So we quickly took that out.

955
00:54:50,399 --> 00:54:57,985
So it literally is a combination of sample rate, mono, and ADPCM where I could stand it.

956
00:54:58,766 --> 00:55:03,229
And I even did some posts on some sounds where ADPCM makes things all crunchy.

957
00:55:03,249 --> 00:55:06,952
I did some real-time post EQ to kind of roll some of that off.

958
00:55:07,652 --> 00:55:10,715
So you kind of play around and keep...

959
00:55:11,065 --> 00:55:13,645
keep massaging it or even going in and re-editing samples.

960
00:55:13,986 --> 00:55:15,526
So all of those methods were combined.

961
00:55:15,826 --> 00:55:20,047
It's a lot of listening and trying and seeing what works and what sounds good.

962
00:55:20,087 --> 00:55:21,788
And you had to do that with your sounds as well.

963
00:55:22,288 --> 00:55:27,230
You did a lot of like taking one little sample and making different uses of it, right?

964
00:55:27,250 --> 00:55:28,590
How did that work?

965
00:55:28,610 --> 00:55:29,670
Yeah, for one WAV file.

966
00:55:29,710 --> 00:55:30,371
Yeah, one WAV file.

967
00:55:30,391 --> 00:55:31,411
And manipulating it a lot.

968
00:55:31,451 --> 00:55:36,412
Yeah, well for those WAV files, I think what did they end up being?

969
00:55:36,432 --> 00:55:37,513
I think they were 80 PCM.

970
00:55:38,652 --> 00:55:41,234
Yeah, 80 PCM, no I think we used a couple of waves.

971
00:55:41,434 --> 00:55:42,414
I think we just down sampled them.

972
00:55:42,434 --> 00:55:45,315
Because we were manipulating them a lot and there wasn't that much of those.

973
00:55:45,415 --> 00:55:50,798
Once we added some emotes at a later time period, that's when we really had to get creative

974
00:55:50,858 --> 00:55:51,778
with what we were doing.

975
00:55:51,858 --> 00:55:56,300
And it really just came down to auditioning in the assets, choosing what sounded best

976
00:55:56,340 --> 00:55:59,862
and took up the less space and trying them on device and seeing if it worked.

977
00:56:00,562 --> 00:56:04,024
Yeah, I think no different than any project, only we had, you know, the added thing of

978
00:56:04,064 --> 00:56:05,004
we had to make sure that it was...

979
00:56:06,011 --> 00:56:10,792
performing okay. We couldn't just wantonly use Vorbis anywhere we wanted.

980
00:56:10,852 --> 00:56:12,572
We were pretty careful about the Vorbis stuff.

981
00:56:12,592 --> 00:56:14,013
But I hear that stuff is getting more efficient.

982
00:56:14,073 --> 00:56:19,194
Cool. And if you don't have Wwise, I don't have Wwise for the projects I work on,

983
00:56:19,334 --> 00:56:23,475
so do you know if any of the other middleware software companies are using it?

984
00:56:23,495 --> 00:56:26,695
I mean, I know Fmod supports a whole slew of formats.

985
00:56:27,116 --> 00:56:32,097
I think I saw in a Unity 5 talk yesterday that they just added 80 PCM and Vorbis support.

986
00:56:32,739 --> 00:56:34,460
But not even just that, just the whole MIDI.

987
00:56:34,540 --> 00:56:35,781
Oh, the MIDI stuff?

988
00:56:35,861 --> 00:56:40,504
You know, I hear there's some plugins for Unity.

989
00:56:40,564 --> 00:56:41,484
Is that correct?

990
00:56:41,904 --> 00:56:44,246
But those would be kind of garage,

991
00:56:44,346 --> 00:56:46,587
someone in a garage making a little MIDI plugin for Unity.

992
00:56:47,848 --> 00:56:49,449
There's nothing as formal as this

993
00:56:49,990 --> 00:56:51,791
that I've seen that's commercially available.

994
00:56:51,871 --> 00:56:55,353
Obviously, the Fantasia guys use MIDI all over the place,

995
00:56:55,393 --> 00:56:57,775
but that's, is that wise?

996
00:56:57,815 --> 00:56:59,996
Try to get your studio to use Wwise.

997
00:57:02,881 --> 00:57:09,142
Maybe other engine makers will add it if they see the success that folks are having with it.

998
00:57:09,802 --> 00:57:15,504
If people are calling for it, if we are calling for MIDI, the other engine makers will follow suit.

999
00:57:16,444 --> 00:57:18,505
It makes so much sense for mobile.

1000
00:57:18,605 --> 00:57:19,905
Thanks, guys. Thanks a bunch.

1001
00:57:22,266 --> 00:57:23,526
That's it. Thank you so much.

1002
00:57:33,562 --> 00:57:33,642
Yeah.

1003
00:57:33,662 --> 00:57:34,687
Easy, easy.

