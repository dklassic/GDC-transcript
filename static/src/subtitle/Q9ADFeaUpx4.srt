1
00:00:03,201 --> 00:00:03,342
so

2
00:00:12,179 --> 00:00:14,700
First thing I want to do is say a handful of thank yous.

3
00:00:14,720 --> 00:00:15,741
I'll make it quick.

4
00:00:16,001 --> 00:00:17,661
Thank you, Damian, for mentoring this talk.

5
00:00:17,842 --> 00:00:18,422
Thank you so much.

6
00:00:19,182 --> 00:00:24,364
Thank you to Brian Schmidt and GameSoundCon for allowing me to give an earlier iteration of this talk at GameSoundCon last year.

7
00:00:25,285 --> 00:00:38,211
And massive, massive thank you to both the audio and QA teams on Diablo 4 for listening to the absolutely atrocious first version of this talk and giving me all the feedback I needed to make it good for all of you.

8
00:00:39,891 --> 00:00:40,832
All right, let's go.

9
00:00:43,550 --> 00:00:44,490
So, who am I?

10
00:00:44,690 --> 00:00:46,131
Why am I here talking to you about Audio QA?

11
00:00:47,331 --> 00:00:50,212
I am a composer and sound designer in my own right, a man who loves music and sound.

12
00:00:50,913 --> 00:00:57,375
I am currently the Audio QA subject matter expert on Diablo 4 at Blizzard Entertainment, specifically Blizzard Albany, which used to be Vicarious Visions.

13
00:00:58,055 --> 00:01:02,377
Prior to that, I was the audio test lead for Tony Hawk's Pro Skater 1 and 2 at Vicarious Visions.

14
00:01:02,977 --> 00:01:05,618
I have an MFA in music composition from the Vermont College of Fine Arts.

15
00:01:06,198 --> 00:01:07,899
I'm a cat lover and a yarn connoisseur.

16
00:01:08,140 --> 00:01:10,542
You can see my two cats there, Aurelia and Oberon.

17
00:01:10,582 --> 00:01:12,763
They are vital to the game development process.

18
00:01:13,584 --> 00:01:16,987
My co-workers get a little bit disappointed if they don't show up to our morning meetings.

19
00:01:17,888 --> 00:01:19,089
A couple things I didn't put on here.

20
00:01:19,229 --> 00:01:30,398
I am also the chair of the Albany IGDA, and I am also one of the organizing members of GWA Albany, which is our QA union at Blizzard Albany.

21
00:01:33,709 --> 00:01:34,670
What is QA?

22
00:01:35,671 --> 00:01:37,854
This is apparently has been a a hot topic today.

23
00:01:38,514 --> 00:01:42,218
Uh so QA stands for quality assurance and it is what it sounds like.

24
00:01:42,659 --> 00:01:44,861
We want to assure the quality... Oh no!

25
00:01:45,482 --> 00:01:45,602
Ah!

26
00:01:46,723 --> 00:01:46,984
Okay.

27
00:01:49,269 --> 00:01:49,609
All right.

28
00:01:50,050 --> 00:01:52,031
We want to assure the quality of the game.

29
00:01:52,671 --> 00:01:53,512
What does that mean?

30
00:01:54,152 --> 00:02:02,358
We want to make sure that everything that has been designed is working the way it's supposed to and isn't working in any of the ways it's not supposed to.

31
00:02:02,878 --> 00:02:03,098
Right?

32
00:02:03,558 --> 00:02:04,199
And how do we do that?

33
00:02:04,259 --> 00:02:05,220
We gather information.

34
00:02:05,540 --> 00:02:06,400
We ask questions.

35
00:02:06,801 --> 00:02:08,742
We author documentation to guide testing.

36
00:02:09,042 --> 00:02:11,544
We find and report defects, also known as bugs.

37
00:02:12,004 --> 00:02:17,848
And then once bugs have been fixed, we go back and verify those fixes to make sure that they haven't broken anything else.

38
00:02:19,145 --> 00:02:25,730
Um, so this, the image that I have here is a screenshot of the playlist from Tony Hawk's pro skater one and two.

39
00:02:26,470 --> 00:02:28,332
And just a little bit about this.

40
00:02:28,632 --> 00:02:30,773
It works like an MP3 player on shuffle.

41
00:02:30,953 --> 00:02:37,338
So things that we needed to test for it, make sure that it's random, make sure that no songs repeat until every song in the playlist has been played.

42
00:02:37,833 --> 00:02:42,256
Make sure that you can check and uncheck songs so that you can add and remove them from the playlist.

43
00:02:43,116 --> 00:02:44,037
Some other things we had to test.

44
00:02:44,257 --> 00:02:45,257
The game had a T rating.

45
00:02:45,798 --> 00:02:50,541
That means that we needed to make sure there was no language in the lyrics that was going to threaten that rating.

46
00:02:50,841 --> 00:02:54,883
So that meant listening through, making sure everything was properly bleeped, properly censored, right?

47
00:02:56,304 --> 00:03:03,728
In order to do that, we created an audio test spec, a glossary of terms, test passes, a custom bug tracker for UI, including instructions for testing.

48
00:03:06,263 --> 00:03:06,683
and so on.

49
00:03:07,164 --> 00:03:10,886
I apologize, my notes are on my phone because we couldn't make the computer work.

50
00:03:14,529 --> 00:03:15,430
Alright, moving on.

51
00:03:17,791 --> 00:03:19,532
Common misconceptions about QA.

52
00:03:20,595 --> 00:03:21,976
What is not QA?

53
00:03:22,797 --> 00:03:26,459
There's a very common misconception that QA and playtesting are the same thing.

54
00:03:26,980 --> 00:03:27,820
This is not true.

55
00:03:28,761 --> 00:03:36,487
While it is true that we may organize and participate in playtests, we being QA testers, it is not far from the bulk of our job.

56
00:03:36,547 --> 00:03:38,948
It's kind of more of a rare thing, to be honest with you.

57
00:03:39,809 --> 00:03:40,810
We are not breaking the game.

58
00:03:41,190 --> 00:03:43,952
We are merely exposing the ways in which it is already broken.

59
00:03:46,352 --> 00:03:47,833
We're also not fixing the game.

60
00:03:47,994 --> 00:03:49,615
We're not fixing the game.

61
00:03:50,015 --> 00:03:53,318
We're just telling you how it's broken and then it's up to y'all to figure out how to fix it.

62
00:03:54,599 --> 00:03:56,581
It's not getting paid to play games all day.

63
00:03:56,721 --> 00:04:01,805
A lot of the time we're not even really playing the game, not in a natural way that a human being would do it.

64
00:04:02,866 --> 00:04:06,089
Often we're actually testing in the engine or we're looking at documentation.

65
00:04:06,689 --> 00:04:08,451
A lot of time I spend test planning.

66
00:04:09,111 --> 00:04:12,194
Very rarely am I actually in the game playing the way a player would.

67
00:04:13,379 --> 00:04:14,579
We cannot find every bug.

68
00:04:14,979 --> 00:04:20,061
There are going to be things that are only exposed in really unique circumstances.

69
00:04:20,441 --> 00:04:29,823
There are going to be situations where you need thousands upon thousands of players in order to expose a bug, and you're not going to have a QA team that big.

70
00:04:30,443 --> 00:04:33,804
So every game ships with bugs.

71
00:04:35,384 --> 00:04:38,005
And not every bug that we find is going to get fixed.

72
00:04:38,285 --> 00:04:40,085
And I have a couple little funny stories about that.

73
00:04:40,225 --> 00:04:41,666
That's why there's lobsters on the screen right now.

74
00:04:44,209 --> 00:04:45,309
Diablo II Resurrected.

75
00:04:45,469 --> 00:04:47,190
I didn't actually really work on it.

76
00:04:47,250 --> 00:04:52,732
I did a little bit of testing support, but there was just the absolute funniest bug that someone wrote.

77
00:04:53,632 --> 00:05:08,617
One of the testers had actually grown up in the Caribbean and knew the difference between a warm water and a cold water lobster, and wrote a bug that there were cold water lobsters being sold at a fishmonger in an area of the game that would have been warm water area.

78
00:05:11,358 --> 00:05:12,498
It's the wrong kind of lobster.

79
00:05:13,629 --> 00:05:14,433
that didn't get fixed.

80
00:05:16,161 --> 00:05:16,784
Didn't get fixed.

81
00:05:17,839 --> 00:05:22,022
Uh, and then another one down here is something that also didn't get fixed in Tony Hawk's Pro Skater 1 and 2.

82
00:05:22,142 --> 00:05:23,423
This is actually a bug I wrote myself.

83
00:05:23,763 --> 00:05:27,405
And since this screenshot is just from Google, uh, you know that it didn't get fixed.

84
00:05:27,666 --> 00:05:34,630
So if you look at that little, uh, concrete thing to the right of the screen there, and you see how it's sort of turned to the side.

85
00:05:34,890 --> 00:05:35,971
Concrete does not do that.

86
00:05:36,792 --> 00:05:37,512
It doesn't work that way.

87
00:05:37,652 --> 00:05:40,554
It'll break, it'll break, it'll crack, but it's not just going to get picked up.

88
00:05:40,594 --> 00:05:41,655
Like floor tiles do that.

89
00:05:41,695 --> 00:05:42,575
Concrete doesn't do that.

90
00:05:42,635 --> 00:05:44,457
I know this because my dad does concrete for a living.

91
00:05:45,177 --> 00:05:46,498
That didn't get fixed either, as you can see.

92
00:05:49,795 --> 00:05:57,898
So audio QA, and by that I mean a QA tester or testers who are specifically assigned to work on audio testing.

93
00:05:58,838 --> 00:05:59,958
Why do you want that?

94
00:06:00,739 --> 00:06:02,959
Specialization allows for expertise.

95
00:06:03,660 --> 00:06:11,262
When you have someone who is specifically trained in your audio tools and in your engine, you're going to get more and higher quality bug reports.

96
00:06:11,702 --> 00:06:13,383
That doesn't mean that there's more bugs in your game.

97
00:06:14,043 --> 00:06:19,105
That means that more of them are being exposed so that you can make more educated decisions about what you want to fix.

98
00:06:20,519 --> 00:06:33,923
Uh, you'll get fewer dupes, NMIs, WNFs, NMIs meaning needs more information, which is when you get a bug report that is incomplete and does not give you what you need to actually fix the bug and you have to send it back and wait for the tester to go and add more information to it.

99
00:06:34,543 --> 00:06:41,485
WNF being a will not fix, uh, you don't want them writing bugs for things that are actually intended, right?

100
00:06:44,006 --> 00:06:49,968
A well-trained audio QA who understands your system and your design will also anticipate potential points of failure.

101
00:06:50,501 --> 00:06:57,407
So one way that I did this when I was working on Tony Hawk's Pro Skater 1 and 2 is that I had found an area very early in development.

102
00:06:57,447 --> 00:07:00,330
I had found an area that when you skated on it, the skate loop did not play.

103
00:07:00,890 --> 00:07:01,651
It just went silent.

104
00:07:02,471 --> 00:07:04,153
And I asked the audio team about it.

105
00:07:04,913 --> 00:07:05,834
And this was pre-pandemic.

106
00:07:05,854 --> 00:07:15,082
So one of the sound designers came to my desk and showed me in Unreal the exact settings on that actor that were incorrect, that were causing the loop not to play.

107
00:07:15,683 --> 00:07:18,045
And since I then had that information, I was able to

108
00:07:19,181 --> 00:07:22,023
figure out that that was probably going to happen in a lot of other places.

109
00:07:23,004 --> 00:07:29,469
So because it was early enough in development that I had a lot of free time, I went through every single level in the engine.

110
00:07:29,950 --> 00:07:31,891
And I pulled up every single actor.

111
00:07:31,951 --> 00:07:34,914
And I checked the collision settings for all of them.

112
00:07:34,994 --> 00:07:40,919
And I made a massive document per level with every actor that had incorrect collision settings.

113
00:07:41,099 --> 00:07:42,880
And I sent that off in bug reports.

114
00:07:42,920 --> 00:07:47,404
And that got fixed so early that by the time the game shipped, we really didn't have that problem anymore.

115
00:07:49,830 --> 00:07:55,397
That also falls into understanding where the bug needs to go, because that was actually a level design bug, it wasn't an audio bug.

116
00:07:56,098 --> 00:08:03,989
And because that had been explained to me, I was able to send it right to the level design team and the audio team didn't have to waste time looking at it and figuring it out that it wasn't up to them to fix.

117
00:08:05,737 --> 00:08:09,241
So a well-trained audio QA tester will also provide additional information.

118
00:08:09,682 --> 00:08:17,271
If they understand your middleware and your engine, they will give you specific actor names, specific file names, specific Wwise events.

119
00:08:17,632 --> 00:08:19,854
They will capture Wwise profiling sessions.

120
00:08:20,415 --> 00:08:24,340
They will give you more information to make it easier and faster to fix your bugs.

121
00:08:26,480 --> 00:08:30,022
Audio QA can also gather information and perform tasks for you if they know what they're doing.

122
00:08:30,642 --> 00:08:36,325
When I worked on Tony Hawk's Pro Skater 1 and 2, I actually helped with some of the VO recording.

123
00:08:36,445 --> 00:08:40,166
All of the exertion VO was recorded with the exception of Tony Hawk and Jack Black.

124
00:08:40,727 --> 00:08:48,290
All of the other skaters' exertions were recorded in-house at Vicarious Visions, and I was able to help set that up and facilitate those sessions.

125
00:08:51,465 --> 00:08:56,209
What are the relationships that your audio QA tester has with different members of your audio department?

126
00:08:57,611 --> 00:09:00,113
Well, when it comes to design, we need to know what your vision and goals are.

127
00:09:00,553 --> 00:09:02,475
We need to know what the theme of the game is.

128
00:09:02,515 --> 00:09:03,316
What is the narrative?

129
00:09:03,336 --> 00:09:04,097
What is the mood?

130
00:09:04,377 --> 00:09:11,303
So that when we hear a sound that isn't conveying that, like Tony Hawk sounds a lot different than Diablo 4, right?

131
00:09:11,944 --> 00:09:13,565
You don't want them to sound the same.

132
00:09:13,966 --> 00:09:15,607
So we need to know what your vision and what your goals are.

133
00:09:16,479 --> 00:09:19,320
When it comes to implementation, we need to understand your systems and your structure.

134
00:09:19,760 --> 00:09:20,680
How do these work?

135
00:09:21,120 --> 00:09:22,081
How do these sounds work?

136
00:09:22,381 --> 00:09:23,321
How are things set up?

137
00:09:23,421 --> 00:09:31,283
And to be honest with you, just the way that your middleware, just the way that your project is set up in Wwise can inform our test passes a lot.

138
00:09:31,303 --> 00:09:38,685
I've actually directly used the Wwise project for games to inform the test passes that I've been writing to check functionality.

139
00:09:39,824 --> 00:09:54,192
When it comes to engineering, we need to understand how the audio relates to other features, how it's set up, is the sound on the VFX, and then when the VFX doesn't play, the sound's not gonna play, and then we understand that that's not an audio bug, it's a VFX bug, so we're not wasting audio's time with that again.

140
00:09:55,272 --> 00:09:59,074
When it comes to production, we need to understand the timeline and the state that the work is in.

141
00:09:59,514 --> 00:10:05,918
You don't want a million UI bugs for missing audio when you haven't actually started to create your UI audio yet.

142
00:10:07,349 --> 00:10:13,231
And when it comes to other QA testers who are testing other features, there is significant overlap in testing.

143
00:10:13,691 --> 00:10:23,715
You really don't want to have your audio testers go through and retest features that have already been checked for functionality and art and so on, just listening to the audio.

144
00:10:24,816 --> 00:10:25,676
It's very redundant.

145
00:10:25,696 --> 00:10:30,238
It makes a lot more sense if you can coordinate that testing so that everything's getting done at the same time.

146
00:10:33,840 --> 00:10:34,560
What do we do all day?

147
00:10:35,021 --> 00:10:36,682
What does QA actually do?

148
00:10:36,722 --> 00:10:38,643
So now we understand the goal of QA.

149
00:10:39,383 --> 00:10:41,925
But what does the average day in a tester's life look like?

150
00:10:42,845 --> 00:10:46,868
So often we'll start the day with either a smoke test or a build verification test.

151
00:10:47,208 --> 00:10:48,509
The terms are interchangeable really.

152
00:10:49,309 --> 00:10:50,790
And what that means is we'll get a nightly build.

153
00:10:52,145 --> 00:10:55,509
And we want to make sure that all the core functionality is available in that build.

154
00:10:55,749 --> 00:10:56,930
We want to make sure you can get into the game.

155
00:10:56,950 --> 00:10:58,692
We want to make sure you can select a character.

156
00:10:58,712 --> 00:11:00,855
We want to make sure you can move around, and so on.

157
00:11:01,415 --> 00:11:10,926
And these tests will vary based on the project, but you want to make sure the core functionality is there so that the build is actually viable for other play tests that other teams may be doing and further testing.

158
00:11:11,467 --> 00:11:13,609
If it's not, then you need to roll back to a previous build.

159
00:11:15,046 --> 00:11:16,367
We'll do a lot of targeted ad hoc.

160
00:11:17,088 --> 00:11:20,151
Ad hoc just means unguided testing, means you're not following a test pass.

161
00:11:20,651 --> 00:11:27,118
You're just going through and playing the game, sometimes the way a player would, sometimes the way a player wouldn't.

162
00:11:27,878 --> 00:11:37,568
You're trying to access areas that you shouldn't have access to, trying to perform abilities that you shouldn't be able to perform, trying to use things that you shouldn't be able to use, do things out of order, see what happens when you do stuff that

163
00:11:38,254 --> 00:11:40,215
wasn't intended in the design, right?

164
00:11:40,235 --> 00:11:42,335
Because often you'll find things that are broken.

165
00:11:42,715 --> 00:11:59,140
The first bug I ever found when I was working on Tony Hawk's Pro Skater 1 and 2, I actually was able to, there was an issue I think with the velocity of the skate and I was able to get way higher than I should have, but the bug I actually wrote was that I was able to jump up on top of a building and actually fall right through it because I had no collision.

166
00:11:59,761 --> 00:12:00,801
So that was the first bug I ever wrote.

167
00:12:03,094 --> 00:12:04,795
We create and maintain documentation.

168
00:12:05,296 --> 00:12:07,537
This is documentation relating to test, but not always.

169
00:12:07,597 --> 00:12:12,059
Sometimes the documentation that we create can be very, very helpful to other departments.

170
00:12:12,820 --> 00:12:24,206
I created a bespoke bug tracker for UI audio bugs on Tony Hawk's Pro Skater 1 and 2 at the request of one of our sound designers, which was very helpful to me to keep track of that work being done, but also helpful to him.

171
00:12:25,711 --> 00:12:28,092
We can also perform dev requested tests and tasks.

172
00:12:28,392 --> 00:12:36,494
So if you've just finished work on the music for this part of the game, and you want to make sure that it's all transitioning smoothly, we can go and do that.

173
00:12:36,514 --> 00:12:41,776
And we can go do it in ways that you wouldn't want the player to do it and see what happens to the music when we do that.

174
00:12:41,816 --> 00:12:44,837
So you can get really intense testing on a specific feature.

175
00:12:46,597 --> 00:12:48,298
We can also sometimes do tasks for you.

176
00:12:48,438 --> 00:12:54,660
So like I said, the VO recording thing, I actually helped out with the batch material tagging for the skate system on Tony Hawk's Pro Skater 1 and 2.

177
00:12:55,373 --> 00:12:57,735
which saved a lot of time for the sound designers.

178
00:12:59,376 --> 00:13:00,556
And test planning and execution.

179
00:13:01,797 --> 00:13:12,624
Test planning is the art of actually figuring out what is to be tested, how you're going to do it, what the prerequisites are, what the actual steps for executing the test are, what the expected results are.

180
00:13:13,465 --> 00:13:23,892
And execution is actually performing that test, writing any bugs that come up, and passing or failing the cases, and generating reports on the state that the game is in.

181
00:13:24,926 --> 00:13:26,927
We also perform confirmation and verification.

182
00:13:26,967 --> 00:13:30,148
So once a bug is marked fixed, that's not the end of the story.

183
00:13:30,688 --> 00:13:31,988
There's a couple things that we need to do.

184
00:13:32,508 --> 00:13:34,249
For one, we need to make sure the fix actually worked.

185
00:13:35,429 --> 00:13:36,170
Sometimes it doesn't.

186
00:13:37,470 --> 00:13:42,072
And we also need to make sure that it didn't break anything else, because that can also happen.

187
00:13:46,733 --> 00:13:49,214
So dev requests, what can you ask your QA to do?

188
00:13:50,438 --> 00:13:51,619
We can gather information for you.

189
00:13:51,919 --> 00:13:53,360
We can do media capture.

190
00:13:54,701 --> 00:14:00,124
We can tell you how to trigger certain events, how to get to a certain part of the game, how to put the game in a specific state.

191
00:14:00,824 --> 00:14:08,229
I remember on Tony Hawk's Pro Skater 1 and 2, I was asked, hey, is there a way to set this up so that my character always spawns at the top of this building?

192
00:14:08,689 --> 00:14:12,111
And I was able to figure out that you could move the player start location.

193
00:14:12,532 --> 00:14:16,154
If you were in the engine, you could move it wherever you wanted it and just make sure not to check it in.

194
00:14:17,290 --> 00:14:18,451
Um, we write bugs.

195
00:14:19,151 --> 00:14:20,432
So you can ask us to write bugs.

196
00:14:20,472 --> 00:14:22,333
If you find something, please ask us to write bugs.

197
00:14:22,393 --> 00:14:23,194
Please don't do it yourself.

198
00:14:23,834 --> 00:14:28,377
Because if you haven't been trained in QA, you probably don't know what is needed in that bug.

199
00:14:28,417 --> 00:14:33,340
And what's going to happen is that's going to get sent back to QA and they're not going to know what you're talking about either.

200
00:14:34,160 --> 00:14:35,601
Uh, so then they're going to come and pester you.

201
00:14:35,981 --> 00:14:40,024
So you're much better off just reaching out directly to your QA and saying, Hey, I found this weird thing.

202
00:14:40,064 --> 00:14:41,885
Can you go investigate it and write it up?

203
00:14:41,945 --> 00:14:43,506
And we'll be happy to do that for you.

204
00:14:44,932 --> 00:14:47,513
Again, you can ask us to test specific features or areas.

205
00:14:47,693 --> 00:14:59,435
We're going to do that anyway, but if you've just completed something and you want stress testing on it or you have priority that you want to make sure it gets done, you can definitely reach out to us anytime and let us know.

206
00:15:00,555 --> 00:15:01,576
We can answer questions for you.

207
00:15:02,036 --> 00:15:04,996
So QA touches every part of the game, right?

208
00:15:05,136 --> 00:15:06,277
Audio touches every part of the game.

209
00:15:06,337 --> 00:15:07,277
Every feature makes a sound.

210
00:15:08,513 --> 00:15:12,016
That means that QA needs to understand how to test pretty much every feature of the game.

211
00:15:12,376 --> 00:15:14,998
And to be honest with you, we spend a lot of time testing things that aren't audio, too.

212
00:15:15,478 --> 00:15:23,764
So we often know how to start that quest, how to get to that location, where that character is, how that debug functionality works, right?

213
00:15:24,765 --> 00:15:26,926
So please, reach out, ask questions.

214
00:15:27,006 --> 00:15:28,848
We can often get you that information really fast.

215
00:15:29,168 --> 00:15:31,630
And even if we don't know, we usually know who to ask.

216
00:15:32,670 --> 00:15:36,453
And again, helping with dev tasks, like the VO recording and the batch material tagging.

217
00:15:39,687 --> 00:15:40,548
How do we make this work?

218
00:15:40,929 --> 00:15:43,352
How do you get the most from your relationship with Audio QA?

219
00:15:44,355 --> 00:15:45,476
Help us help you.

220
00:15:46,196 --> 00:15:47,677
Invest in your QA testers.

221
00:15:48,257 --> 00:15:51,219
Create documentation and maintain it.

222
00:15:52,080 --> 00:15:59,424
Invest the time to sit down with your audio QA point of contact and walk them through your WISE project or your FMOD project.

223
00:15:59,904 --> 00:16:01,946
Walk them through how things are set up in the engine.

224
00:16:02,406 --> 00:16:04,147
Take the time to answer their questions.

225
00:16:04,867 --> 00:16:06,188
Give them tasks and testing.

226
00:16:06,228 --> 00:16:07,109
That often helps.

227
00:16:07,549 --> 00:16:13,773
We are capable of doing things on our own, but having that guidance of knowing where you need our attention the most

228
00:16:14,454 --> 00:16:15,895
helps us as much as it helps you.

229
00:16:15,975 --> 00:16:18,958
It helps us make sure that we are focused on what we need to be focused on.

230
00:16:19,919 --> 00:16:21,160
Maintain open communication.

231
00:16:22,441 --> 00:16:23,182
Answer questions.

232
00:16:24,383 --> 00:16:25,264
Ask questions.

233
00:16:26,465 --> 00:16:28,967
Invite your QA into your Slack channels.

234
00:16:29,127 --> 00:16:31,209
Invite them to all of the relevant meetings.

235
00:16:31,649 --> 00:16:32,870
Invite them to your sprint planning.

236
00:16:34,012 --> 00:16:36,274
Do triage, bug triage with them.

237
00:16:37,375 --> 00:16:38,796
Invite them to some of your social meetings.

238
00:16:39,926 --> 00:16:41,509
Create thorough, up-to-date documentation.

239
00:16:41,589 --> 00:16:44,935
Create thorough, up-to-date documentation.

240
00:16:46,358 --> 00:16:47,320
And maintain it.

241
00:16:47,701 --> 00:16:48,422
Please.

242
00:16:48,783 --> 00:16:49,604
Please.

243
00:16:50,486 --> 00:16:50,786
Please.

244
00:16:52,452 --> 00:16:58,516
build strong relationships, build friendships, collaboration, and advocate for your QA.

245
00:16:58,616 --> 00:17:09,242
It's not really a secret that QA in the industry isn't always treated very well, and I think that the misconceptions around it contribute to that, the idea that, oh, you're just getting paid to play games all day.

246
00:17:09,823 --> 00:17:10,043
No.

247
00:17:12,250 --> 00:17:13,670
So please advocate for your QA.

248
00:17:13,810 --> 00:17:18,692
If you don't have full-time QA, please advocate for your company creating full-time positions.

249
00:17:19,072 --> 00:17:29,114
If your QA is not paid well enough, if your QA doesn't have benefits, if your QA is not allowed to talk to developers, which tends to be more of a publishing QA thing than a developer QA thing.

250
00:17:29,154 --> 00:17:30,395
So there is a difference between those two.

251
00:17:30,475 --> 00:17:33,716
And I had it in my notes to tell you, but since I don't have my notes, I forgot to tell you that.

252
00:17:34,276 --> 00:17:39,217
So publishing QA comes at a much later stage and doesn't have as much interaction

253
00:17:39,997 --> 00:17:44,619
whereas development QA is there from the very beginning and is in constant contact with the developers.

254
00:17:47,101 --> 00:17:49,762
And contact and memes.

255
00:17:50,983 --> 00:17:54,265
I think I kind of rushed through this because, again, I didn't have my notes, so sorry.

256
00:17:55,845 --> 00:17:56,646
Does anyone have questions?

257
00:18:08,203 --> 00:18:08,503
Hi.

258
00:18:08,763 --> 00:18:21,250
For the how to write a QA bug report, do you have any resources that could be helpful for proper language or proper orientation for those type of bug reports so they don't get bounced back and forth between dev and QA?

259
00:18:22,324 --> 00:18:26,525
So it's going to vary a lot based on your project and the type of information that is needed for your project.

260
00:18:27,185 --> 00:18:30,086
Our bug reports for Tony Hawk look different than our bug reports for Diablo 4.

261
00:18:30,827 --> 00:18:35,108
But the core things that you need to have, you need to know what build you're on, what branch you're on.

262
00:18:35,308 --> 00:18:40,510
You need repro steps, and you need detailed repro steps, not just go to this place and do this thing.

263
00:18:40,570 --> 00:18:41,690
But be specific.

264
00:18:41,730 --> 00:18:45,691
If you're using a debug tool, indicate how to access that tool and how to do it.

265
00:18:46,071 --> 00:18:48,352
Give exact coordinates for where in the game you are.

266
00:18:49,312 --> 00:18:51,353
Be as precise as possible whenever you can.

267
00:18:52,594 --> 00:18:59,636
You should also include your expected results of what you thought was going to happen when you encountered this bug, as well as your actual results of what actually happened.

268
00:19:00,197 --> 00:19:06,519
Keywords can also help to make your bugs more searchable, especially on a really large project that has thousands upon thousands of bugs.

269
00:19:07,260 --> 00:19:08,820
Media capture is very important.

270
00:19:08,960 --> 00:19:14,182
If a screenshot is sufficient, if it's just an art bug where a screenshot shows the problem in full, that's great.

271
00:19:14,543 --> 00:19:15,343
Video is better.

272
00:19:18,175 --> 00:19:23,465
and any other information that you might need, the team that's going to work on it and so on.

273
00:19:28,578 --> 00:19:29,198
Hey, how's it going?

274
00:19:29,579 --> 00:19:29,699
Good.

275
00:19:29,719 --> 00:19:29,979
How are you?

276
00:19:30,139 --> 00:19:30,559
Yeah, good.

277
00:19:30,719 --> 00:19:37,743
Um, I was just wondering if there's ever any, um, uh, I don't know if this is like technically bugs, but, um, like kind of mix issues that might come into play.

278
00:19:37,883 --> 00:19:46,228
Like if I've made a song and there's like a certain amount of high end and then, uh, this sound designer has made some sound effects and they're all like really harsh as well.

279
00:19:46,328 --> 00:19:47,809
And those two things are clashing.

280
00:19:47,829 --> 00:19:49,450
If you would ever be like, Oh, this is it.

281
00:19:49,590 --> 00:19:52,712
Is that a bug or is that a mix issue or who would kind of look at that?

282
00:19:53,669 --> 00:20:02,952
Yeah, so if we encounter something and we're not sure if it's intended or not, best practice is to get a capture of it, a video of it, send it to the design team and say, is this intended?

283
00:20:03,852 --> 00:20:04,732
Is this what you want?

284
00:20:05,372 --> 00:20:05,512
Right?

285
00:20:05,532 --> 00:20:06,573
We're not here to judge your work.

286
00:20:06,673 --> 00:20:07,813
We're not here to tell you we hate it.

287
00:20:07,893 --> 00:20:09,793
We're not here to tell you that you're doing it wrong.

288
00:20:10,494 --> 00:20:14,875
We want to make sure that the vision you're trying to convey is what is actually getting across.

289
00:20:14,915 --> 00:20:21,657
So often we may run into something where we're not sure what the intended functionality is and the proper practice is to ask.

290
00:20:22,677 --> 00:20:22,897
Great.

291
00:20:22,937 --> 00:20:23,157
Thank you.

292
00:20:23,490 --> 00:20:23,810
You're welcome.

293
00:20:26,512 --> 00:20:27,493
Thank you for your talk.

294
00:20:28,354 --> 00:20:37,141
If you were to hire an audio QA, would you look for someone in audio with an interest in QA or someone in QA with an interest of audio or neither?

295
00:20:38,715 --> 00:20:45,097
Well, I can tell you how I got hired, which is that I had more of a background in audio and I was applying for a QA job.

296
00:20:45,177 --> 00:20:50,558
And that was actually what got me hired for Tony Hawk because I happened to apply at exactly the right time that they were looking for an audio tester.

297
00:20:51,238 --> 00:20:58,400
So the way that Vicarious Visions and Blizzard hire is not to list a specific audio QA position.

298
00:20:58,640 --> 00:21:05,362
It's, it's just hiring generic QA, but I have helped hire candidates before.

299
00:21:05,382 --> 00:21:06,902
I've helped interview candidates before.

300
00:21:07,406 --> 00:21:15,469
And we do look for folks who have specific interests because that means that they may have more knowledge that can be applicable to testing those areas.

301
00:21:16,310 --> 00:21:18,550
And then they'll have more interest and be paying more attention to those areas.

302
00:21:19,151 --> 00:21:25,493
So I don't know that I've really answered your question, but I'm also not in a hiring capacity, so it's a little hard to say.

303
00:21:25,833 --> 00:21:30,775
But I was primarily an audio person who was applying for a QA job, if that helps.

304
00:21:31,315 --> 00:21:31,636
It helps.

305
00:21:31,836 --> 00:21:32,156
Thank you.

306
00:21:32,356 --> 00:21:32,696
You're welcome.

307
00:21:34,842 --> 00:21:35,983
Thank you for your talk.

308
00:21:36,383 --> 00:21:45,728
And I was just curious that if you have any standards for listening environments for audio queries in your team.

309
00:21:46,889 --> 00:21:48,710
Could you clarify a little bit what you mean?

310
00:21:48,790 --> 00:21:55,934
Like some people can listen on headphones or speakers or surround systems.

311
00:21:57,275 --> 00:22:03,159
And I was just wondering if you guys have some kind of standardization

312
00:22:04,865 --> 00:22:05,066
team.

313
00:22:20,166 --> 00:22:28,172
some kind of a setup, whether it's at the studio or like I have a surround setup that was sent to me that I need to finish assembling when I get back home to be able to test on surround.

314
00:22:28,492 --> 00:22:35,157
So you do want to test in every format that you're shipping in, but probably not every tester is going to have access to those formats.

315
00:22:35,417 --> 00:22:35,978
Okay, thank you.

316
00:22:38,900 --> 00:22:42,002
Hi, perhaps this question has already been dealt with a little bit

317
00:22:42,349 --> 00:22:52,351
But for those who already have some QA experience maybe outside of audio QA, I have work experience in like software QA or perhaps they're a game tester QA but not for audio.

318
00:22:52,731 --> 00:23:03,014
What would you suggest the skills they would want to have besides obviously audio knowledge to say work in what you're doing and what would you recommend for them to know?

319
00:23:04,505 --> 00:23:07,326
I think a knowledge of middleware and knowledge of game engine.

320
00:23:07,426 --> 00:23:12,148
And again, those doesn't have to be the exact middleware or engine that's being used.

321
00:23:12,188 --> 00:23:15,069
Like for example, Diablo four is in a proprietary engine.

322
00:23:15,089 --> 00:23:18,850
So there is no knowing that engine before you work on that project, for example.

323
00:23:19,370 --> 00:23:27,133
But having a base knowledge of other engines, it's the same thing as like knowing one DAW, you can kind of, you can kind of figure out the other ones from there.

324
00:23:27,273 --> 00:23:27,473
Right.

325
00:23:27,894 --> 00:23:30,094
So you want to have some experience with engine.

326
00:23:30,114 --> 00:23:31,595
You want to have some experience with middleware.

327
00:23:32,560 --> 00:23:35,262
and you definitely want to have some experience in QA if you can.

328
00:23:36,143 --> 00:23:42,628
I don't think I can get much more specific than that because every project is so different and every team works so differently.

329
00:23:43,128 --> 00:23:43,449
Thank you.

330
00:23:43,769 --> 00:23:44,149
You're welcome.

331
00:23:49,273 --> 00:23:54,397
Hi, that was a great talk and I was taking some rigorous, crazy notes.

332
00:23:56,219 --> 00:24:01,283
You mentioned earlier about the way the Wwise project is being set up.

333
00:24:02,426 --> 00:24:04,128
kind of help with that.

334
00:24:04,848 --> 00:24:20,079
And I was wondering if you have any best practices or suggestions when setting up a Wwise project as not the QA person but as one of the main sound designers or one of the main people setting up the project.

335
00:24:20,199 --> 00:24:26,384
Are there any best practices when setting that kind of project up so it can be easily read and understood?

336
00:24:27,458 --> 00:24:34,740
I think it'll be the same practices as, uh, you know, if you're working with other sound designers, wanting to set things up in a way that is clear and it's the same thing, right?

337
00:24:35,120 --> 00:24:38,501
So you're, you're going to want to train your QA to understand how your project is set up.

338
00:24:38,981 --> 00:24:44,382
So it's more that you want to educate them on how you've done things rather than trying to tailor what you're doing to them.

339
00:24:45,162 --> 00:24:48,463
But the more clear and readable and the more sense it makes, obviously.

340
00:24:49,304 --> 00:24:50,244
The easier it'll be.

341
00:24:51,304 --> 00:24:55,185
So it's more about taking the time to train your QA on how you've set up your project.

342
00:24:55,646 --> 00:24:58,086
versus tailoring your project to your QA person.

343
00:24:59,307 --> 00:24:59,987
Uh, okay, thank you.

344
00:25:00,287 --> 00:25:00,647
You're welcome.

345
00:25:02,767 --> 00:25:05,048
Hey Amanda, thanks for sharing all the insight.

346
00:25:05,888 --> 00:25:13,009
Um, as someone that fixes a lot of audio bugs, uh, let me tell you how valuable I think two services are that you, that you provide.

347
00:25:13,449 --> 00:25:14,569
One is regression testing.

348
00:25:15,049 --> 00:25:24,171
To ask you folks to tell me exactly which code change or asset change made the bug appear is dramatically valuable because I can

349
00:25:24,931 --> 00:25:29,353
super surgically know that is the delta that I can investigate and fix it.

350
00:25:29,753 --> 00:25:35,496
The other thing is that I constantly ask QA is to reproduce the bug in the simplest form ever.

351
00:25:35,616 --> 00:25:44,940
Like if you are on the fifth mission in the third level after leveling, like go into the test map, do this console command, there's your bug.

352
00:25:45,840 --> 00:25:49,142
That is such a good valuable thing that you provide as well, so thanks for that.

353
00:25:49,656 --> 00:25:50,337
Yes, definitely.

354
00:25:50,637 --> 00:25:51,578
That is a really good point.

355
00:25:51,898 --> 00:25:56,742
Sometimes you'll run into a bug really deep into gameplay, but you don't need to get that deep into it.

356
00:25:57,442 --> 00:25:58,463
Simplify it.

357
00:25:58,523 --> 00:25:59,904
Keep the steps as simple as possible.

358
00:25:59,964 --> 00:26:01,546
Make it as reproducible as possible.

359
00:26:01,686 --> 00:26:02,126
Definitely.

360
00:26:04,408 --> 00:26:04,688
Awesome.

361
00:26:04,708 --> 00:26:06,570
Are there any more questions?

362
00:26:07,070 --> 00:26:08,391
I'm sorry the talk was so short.

363
00:26:08,451 --> 00:26:11,614
I had other things I was going to talk about, but I didn't have my notes.

364
00:26:21,521 --> 00:26:21,642
so

