1
00:00:06,225 --> 00:00:07,745
My name is Tim Cheblakov.

2
00:00:07,745 --> 00:00:11,207
I'm Senior Developer Technology Engineer at NVIDIA.

3
00:00:11,207 --> 00:00:15,829
And let Mark introduce himself and introduce us to Atlas.

4
00:00:15,829 --> 00:00:17,089
My name is Mark Mihalich.

5
00:00:17,089 --> 00:00:21,331
I'm an Engine Programmer at Grapeshot Games.

6
00:00:21,331 --> 00:00:29,395
And we're currently working on a game called Atlas.

7
00:00:29,395 --> 00:00:31,536
And what is Atlas?

8
00:00:31,536 --> 00:00:31,936
Atlas is a.

9
00:00:33,667 --> 00:00:36,528
Pirate Fantasy MMO, but it's made by the people

10
00:00:36,528 --> 00:00:38,588
who made Ark Survival Evolved,

11
00:00:38,588 --> 00:00:40,609
so there's some survival aspect to it as well.

12
00:00:40,609 --> 00:00:45,771
We're currently in early access, you can get it on Steam.

13
00:00:45,771 --> 00:00:50,392
And I have a little video here, it's an intro,

14
00:00:50,392 --> 00:00:51,353
so we can play it.

15
00:01:29,521 --> 00:01:34,506
So as you can see, a lot of your time in the game is spent on the ocean and looking at

16
00:01:34,506 --> 00:01:36,148
the water surface.

17
00:01:36,787 --> 00:01:38,990
we really wanted to get the most realistic possible

18
00:01:38,990 --> 00:01:41,975
water simulation and rendering.

19
00:01:41,975 --> 00:01:45,041
So we enlisted the help of NVIDIA.

20
00:01:45,041 --> 00:01:48,026
And the game is still under development,

21
00:01:48,026 --> 00:01:50,510
but we feel pretty proud of what we've achieved so far.

22
00:01:52,193 --> 00:01:54,754
We had to get a lot of things right.

23
00:01:54,754 --> 00:01:58,255
First, we obviously had to simulate the ocean state.

24
00:01:58,255 --> 00:02:01,576
We have to handle the physics of buoyancy, of course,

25
00:02:01,576 --> 00:02:04,096
rendering the ocean surface, and then

26
00:02:04,096 --> 00:02:07,577
other interactive features such as wakes, explosions,

27
00:02:07,577 --> 00:02:09,358
and detailed particles.

28
00:02:09,358 --> 00:02:10,658
So those four components are basically

29
00:02:10,658 --> 00:02:13,099
what the agenda is for today for this talk.

30
00:02:13,099 --> 00:02:17,100
And I'll let Tim start by talking about simulation.

31
00:02:17,680 --> 00:02:23,687
Thank you. So, in order to keep you guys not distracted by the rendering,

32
00:02:23,687 --> 00:02:28,553
this screenshot and the following screenshots are just black and white.

33
00:02:28,553 --> 00:02:30,776
So, it's just the Fresnel term rendered,

34
00:02:30,776 --> 00:02:33,599
so you can focus on the displacements.

35
00:02:33,599 --> 00:02:37,604
We'll start with the simulation of the C states.

36
00:02:39,108 --> 00:02:42,790
We use vanilla spectrum-based approach evolved from

37
00:02:42,790 --> 00:02:46,192
famous Tessendorf's paper called Simulating Ocean Water.

38
00:02:46,192 --> 00:02:49,533
Essentially, what you do there is you

39
00:02:49,533 --> 00:02:51,394
generate the wind wave spectrum,

40
00:02:51,394 --> 00:02:53,496
you evolve it in a frequency space,

41
00:02:53,496 --> 00:02:56,317
and you transform the data to

42
00:02:56,317 --> 00:02:58,838
the spatial domain using reverse FFT steps.

43
00:02:59,990 --> 00:03:02,914
Then you just rinse and repeat for any moment in time,

44
00:03:02,914 --> 00:03:07,281
you can just calculate the C-state and frequency space,

45
00:03:07,281 --> 00:03:09,345
and convert it to the spatial domain.

46
00:03:09,345 --> 00:03:13,251
This simulation has a bunch of good properties.

47
00:03:13,251 --> 00:03:14,072
First of all,

48
00:03:14,725 --> 00:03:18,167
It only depends on the time and the spectrum state.

49
00:03:18,167 --> 00:03:25,053
So at any moment in time, you can know the displacements

50
00:03:25,053 --> 00:03:26,073
of the ocean surface.

51
00:03:26,073 --> 00:03:29,856
It is very good for us because we are working on an MMO game.

52
00:03:29,856 --> 00:03:33,879
So the simulation has to be similar for the server

53
00:03:33,879 --> 00:03:34,780
and all the clients.

54
00:03:35,420 --> 00:03:39,383
So we can run the simulation independently using those properties of the simulation.

55
00:03:39,383 --> 00:03:46,787
And what is more important is that all the servers on the grid can simulate the same C state.

56
00:03:46,787 --> 00:03:51,869
So the transitioning of the player from the server to server can be seamless.

57
00:03:52,879 --> 00:03:54,119
Why is that important?

58
00:03:54,119 --> 00:03:57,721
Because the online portion of the game,

59
00:03:57,721 --> 00:04:01,042
the servers are forming the grid.

60
00:04:01,042 --> 00:04:04,383
And each server simulates a square

61
00:04:04,383 --> 00:04:08,804
of this much, thousands of square kilometers

62
00:04:08,804 --> 00:04:11,825
of the ocean with all the players

63
00:04:11,825 --> 00:04:13,485
and islands and actions happening.

64
00:04:13,485 --> 00:04:15,886
And when the player moves to another server,

65
00:04:15,886 --> 00:04:18,887
this transition happens seamlessly.

66
00:04:19,876 --> 00:04:22,759
So the results are tiles with periodic displacement data,

67
00:04:22,759 --> 00:04:24,441
and the results can cover infinite planes

68
00:04:24,441 --> 00:04:27,504
of the ocean surface, which is also good for us.

69
00:04:27,504 --> 00:04:27,985
But there are.

70
00:04:29,113 --> 00:04:30,534
Some issues with this simulation,

71
00:04:30,534 --> 00:04:32,134
it's not good enough for us.

72
00:04:32,134 --> 00:04:34,635
And there are a few reasons for this.

73
00:04:34,635 --> 00:04:36,136
First of all, it uses FFT.

74
00:04:36,136 --> 00:04:38,517
And FFTs, as you know, are expensive.

75
00:04:38,517 --> 00:04:44,260
So if we use large FFTs, we sacrifice the performance.

76
00:04:44,260 --> 00:04:47,921
If you use smaller FFTs, then we either see the repeats

77
00:04:47,921 --> 00:04:50,483
that you can see on the right portion of the screenshot,

78
00:04:50,483 --> 00:04:53,544
or if we increase the world space area

79
00:04:53,544 --> 00:04:56,145
that our tiles are covering, we don't see enough details.

80
00:04:57,247 --> 00:04:59,928
and this is clearly visible on the left portion

81
00:04:59,928 --> 00:05:00,468
of the screenshot.

82
00:05:00,468 --> 00:05:04,930
To fix that, we use

83
00:05:04,930 --> 00:05:08,212
advanced approach.

84
00:05:08,212 --> 00:05:12,554
So what we do is we still use small FFTs,

85
00:05:12,554 --> 00:05:16,275
but we do split our spectra to several frequency bands.

86
00:05:16,275 --> 00:05:21,438
We decided to go with four frequency bands,

87
00:05:21,438 --> 00:05:22,959
and each frequency band for us

88
00:05:22,959 --> 00:05:25,440
stores the wavelengths of

89
00:05:26,937 --> 00:05:28,919
a certain range.

90
00:05:28,919 --> 00:05:33,783
So to simulate the ocean surface in this case,

91
00:05:33,783 --> 00:05:35,184
we split our spectrum, we evolve

92
00:05:35,184 --> 00:05:39,087
the frequency band in the frequency space independently,

93
00:05:39,087 --> 00:05:40,027
and then we just convert

94
00:05:40,027 --> 00:05:42,349
the simulation results back to

95
00:05:42,349 --> 00:05:46,352
the spatial domain using the inverse FFT steps.

96
00:05:46,352 --> 00:05:49,395
Then we post-process the results to get a nice isotropic BRDF.

97
00:05:49,395 --> 00:05:51,436
We're going to talk about this a little later.

98
00:05:52,307 --> 00:05:56,129
And then we just combine all the displacements

99
00:05:56,129 --> 00:06:00,192
from all the frequency bands to get a nice displaced ocean

100
00:06:00,192 --> 00:06:00,713
surface.

101
00:06:00,713 --> 00:06:02,114
This is how it looks.

102
00:06:02,114 --> 00:06:05,876
From left to right are the frequency band

103
00:06:05,876 --> 00:06:08,018
from the lowest resolution one, number 0.

104
00:06:08,018 --> 00:06:08,819
Then goes number 1.

105
00:06:08,819 --> 00:06:10,840
Then goes number 3.

106
00:06:10,840 --> 00:06:13,502
And then on the right portion, you

107
00:06:13,502 --> 00:06:15,363
see all the frequency bands combined.

108
00:06:15,363 --> 00:06:17,945
And if you are attentive enough.

109
00:06:18,625 --> 00:06:20,307
On the frequency band number three,

110
00:06:20,307 --> 00:06:23,611
you will see that there are some repeats.

111
00:06:23,611 --> 00:06:24,953
And it's kind of weird, isn't it?

112
00:06:24,953 --> 00:06:27,556
We tried to solve the problem, and we

113
00:06:27,556 --> 00:06:30,479
introduced the very same problem.

114
00:06:30,479 --> 00:06:32,222
It's not something good, right?

115
00:06:32,222 --> 00:06:34,885
And if you take a look at the UVs for those frequency

116
00:06:34,885 --> 00:06:37,868
bands in the world space, which are marked.

117
00:06:39,078 --> 00:06:44,241
white for the most higher detailed frequency band,

118
00:06:44,241 --> 00:06:49,284
then goes blue, then goes green, then goes red.

119
00:06:49,284 --> 00:06:53,127
You will see that the white cascades are pretty small,

120
00:06:53,127 --> 00:06:55,809
and obviously they will show some repeats.

121
00:06:55,809 --> 00:06:58,530
But in fact, they are not showing the repeats

122
00:06:58,530 --> 00:07:02,273
because the lower frequency bands,

123
00:07:02,273 --> 00:07:06,336
the larger waves, do distort or displace

124
00:07:06,336 --> 00:07:08,697
those small cascades, small frequency bands.

125
00:07:09,497 --> 00:07:16,201
enough so that we just don't see the repeats at all.

126
00:07:16,201 --> 00:07:18,402
Another thing that we didn't like about

127
00:07:18,402 --> 00:07:21,823
the vanilla Tessendorf's approach was the Phillips spectrum.

128
00:07:21,823 --> 00:07:26,546
It is the spectrum that defines or describes the sea state for

129
00:07:26,546 --> 00:07:30,728
the fully evolved sea which means the wind was

130
00:07:30,728 --> 00:07:33,729
blowing over the ocean surface for

131
00:07:33,729 --> 00:07:37,011
infinite amount of time so that the waves fully evolved.

132
00:07:38,467 --> 00:07:41,991
And what would happen if you tried

133
00:07:41,991 --> 00:07:45,174
to apply this Phillips spectrum formula for a puddle

134
00:07:45,174 --> 00:07:48,878
with the wind blowing with like 100 miles an hour speed over it?

135
00:07:48,878 --> 00:07:52,461
You will get something like 20 meters wave or something

136
00:07:52,461 --> 00:07:52,942
like that.

137
00:07:52,942 --> 00:07:55,805
It's obviously not something that you would see in nature.

138
00:07:56,405 --> 00:07:59,588
To fix that, we just used better spectras.

139
00:07:59,588 --> 00:08:01,430
We used dual Jones-Wabb spectra.

140
00:08:01,430 --> 00:08:05,634
And Jones-Wabb is de-abbreviated as Joint North Sea Wave

141
00:08:05,634 --> 00:08:06,074
Project.

142
00:08:06,074 --> 00:08:08,696
A bunch of scientists just gathered together and measured

143
00:08:08,696 --> 00:08:11,319
the wave displacements in the North Seas,

144
00:08:11,319 --> 00:08:15,883
in Northern Atlantic, using the Boise satellite data.

145
00:08:15,883 --> 00:08:19,406
And they generated the formulas for us that we can use.

146
00:08:19,406 --> 00:08:21,528
So we used dual Jones-Wabb spectra.

147
00:08:22,970 --> 00:08:23,950
Why dual?

148
00:08:23,950 --> 00:08:29,411
Because it will allow us to simulate two spectra

149
00:08:29,411 --> 00:08:31,391
for the cost of one.

150
00:08:31,391 --> 00:08:34,012
So the first spectra will simulate, for instance,

151
00:08:34,012 --> 00:08:36,592
if we want to simulate the small, medium, local waves

152
00:08:36,592 --> 00:08:39,693
generated by the local winds and the large decaying

153
00:08:39,693 --> 00:08:45,614
waves generated by the storms, like 100 miles away a long time

154
00:08:45,614 --> 00:08:49,474
ago, these long waves will be simulated

155
00:08:49,474 --> 00:08:51,635
by the second drone swap.

156
00:08:52,575 --> 00:08:53,456
And this is how it looks.

157
00:08:53,456 --> 00:09:00,609
It's artificially emphasized so that the long waves are

158
00:09:00,609 --> 00:09:03,434
too long and the short waves, the local waves, are too small.

159
00:09:03,434 --> 00:09:05,758
But you can see what I'm talking about.

160
00:09:09,032 --> 00:09:12,395
Now, these Joneswap spectra allow a lot of artistic control

161
00:09:12,395 --> 00:09:14,617
compared to Phillips spectrum.

162
00:09:14,617 --> 00:09:17,180
So it's wind speed, wind direction, wind fetch.

163
00:09:17,180 --> 00:09:19,462
This is the parameter that defines

164
00:09:19,462 --> 00:09:22,925
how long the wind was blowing over the ocean surface

165
00:09:22,925 --> 00:09:26,648
or how big was the area that the wind was blowing over.

166
00:09:27,329 --> 00:09:35,051
Then the spectrum picking that tells us how dominant are the dominant wavelengths so that the

167
00:09:35,051 --> 00:09:41,753
peaks, the wavetops are more pronounced. Then the directional distribution which tells us how

168
00:09:41,753 --> 00:09:48,215
chaotic are the waves, so how big is the portion of the waves that do follow the wind direction.

169
00:09:48,955 --> 00:09:56,137
Then if you want you can override the amplitude. You're gonna be not physically correct, but for like artistic purposes you can emphasize the

170
00:09:56,137 --> 00:10:01,179
Heights of the waves or dampen them down if you want and then low-pass filter. It's pretty useful for

171
00:10:01,179 --> 00:10:05,960
Swells you don't want the swells to have the smaller wavelengths

172
00:10:08,167 --> 00:10:10,048
And Mark will talk about the buoyancy.

173
00:10:10,048 --> 00:10:11,168
Not Beyonce.

174
00:10:11,168 --> 00:10:14,470
So we've covered how you generate the ocean displacement

175
00:10:14,470 --> 00:10:17,452
data.

176
00:10:17,452 --> 00:10:21,093
So now I'll cover how we can use that data

177
00:10:21,093 --> 00:10:27,617
to have objects in the ocean interact with the ocean

178
00:10:27,617 --> 00:10:28,838
simulation.

179
00:10:28,838 --> 00:10:34,941
And that interaction is basically physics of buoyancy.

180
00:10:37,055 --> 00:10:41,339
Now you may be familiar with Archimedes' principle.

181
00:10:41,339 --> 00:10:49,405
Basically it states that body and fluid experiences a buoyant force equal to the weight of the fluid it displaces.

182
00:10:49,405 --> 00:10:53,308
And the direction of that force is opposite to the direction of gravity.

183
00:10:55,554 --> 00:10:57,694
Now, if you notice in this formula here,

184
00:10:57,694 --> 00:11:02,755
the main unknown that we have here is displaced volume,

185
00:11:02,755 --> 00:11:03,415
or V.

186
00:11:03,415 --> 00:11:07,436
And with our complex ocean simulation,

187
00:11:07,436 --> 00:11:12,257
calculating that can be kind of complicated.

188
00:11:12,257 --> 00:11:13,197
So how might you approach it?

189
00:11:13,197 --> 00:11:18,938
You might take a bunch of discrete,

190
00:11:21,268 --> 00:11:25,891
displacement samples along the whole of the boat.

191
00:11:25,891 --> 00:11:29,613
And then you can use each sample,

192
00:11:29,613 --> 00:11:32,694
assume it represents a cross-section of displaced

193
00:11:32,694 --> 00:11:35,896
volume, and apply it back to the previous formula

194
00:11:35,896 --> 00:11:37,897
to generate force.

195
00:11:37,897 --> 00:11:38,958
The corresponding.

196
00:11:40,243 --> 00:11:42,965
buoyancy for each sample can then be applied back

197
00:11:42,965 --> 00:11:46,328
to the rigid body simulation.

198
00:11:46,328 --> 00:11:49,511
Your game engine's rigid body physics simulation

199
00:11:49,511 --> 00:11:51,072
can handle all that.

200
00:11:51,072 --> 00:11:52,453
So here's what that kind of looks like.

201
00:11:52,453 --> 00:11:54,615
You have, ooh, it's going really fast.

202
00:11:56,036 --> 00:11:59,320
So you have your discrete samples here,

203
00:11:59,320 --> 00:12:00,742
discrete displacement samples,

204
00:12:00,742 --> 00:12:02,805
and each one of these red arrows

205
00:12:02,805 --> 00:12:08,552
represents independent force acting on the whole of the boat.

206
00:12:08,552 --> 00:12:10,094
Obviously, this is a 2D representation.

207
00:12:10,094 --> 00:12:13,578
We would actually have an array of 3D forces.

208
00:12:15,369 --> 00:12:17,690
And then here's what that looks like in code.

209
00:12:17,690 --> 00:12:21,632
It's actually fairly straightforward, as you can see.

210
00:12:21,632 --> 00:12:24,893
You would basically call it, this is happening on the CPU.

211
00:12:24,893 --> 00:12:28,275
You call this in your physics update loop,

212
00:12:28,275 --> 00:12:30,896
each tick for each boat in the,

213
00:12:30,896 --> 00:12:39,059
each relevant boat, I guess I should say.

214
00:12:39,059 --> 00:12:40,500
So we came across some issues

215
00:12:40,500 --> 00:12:43,021
when just using pure physics simulation.

216
00:12:44,026 --> 00:12:48,389
One of the main things we found was that discrete wave height samples can be quite noisy.

217
00:12:48,389 --> 00:12:56,913
And this is because we're just sampling instantaneous location at an instantaneous time.

218
00:12:56,913 --> 00:13:05,418
So our wave simulation doesn't allow us to integrate over time or space.

219
00:13:07,972 --> 00:13:10,294
So ultimately, we're not able to take enough samples

220
00:13:10,294 --> 00:13:13,136
fast enough, especially for server simulation,

221
00:13:13,136 --> 00:13:14,357
which can run quite slow.

222
00:13:14,357 --> 00:13:20,523
The other issue we came across is just not being able

223
00:13:20,523 --> 00:13:22,925
to control the dynamics very well.

224
00:13:22,925 --> 00:13:27,609
And we found that using just physics alone

225
00:13:27,609 --> 00:13:29,791
creates some instability and latency.

226
00:13:29,791 --> 00:13:31,833
And then finally, maybe most importantly,

227
00:13:32,644 --> 00:13:35,065
We have quite epic waves, but we don't necessarily

228
00:13:35,065 --> 00:13:37,126
want our players playing the game to get seasick.

229
00:13:37,126 --> 00:13:41,548
So we decided against doing a pure physics simulation.

230
00:13:41,548 --> 00:13:45,010
And instead, our solution, we still

231
00:13:45,010 --> 00:13:48,691
use the indiscreet wave height samples.

232
00:13:48,691 --> 00:13:51,492
But instead, we feed those samples

233
00:13:51,492 --> 00:13:54,994
into a plane fitting algorithm.

234
00:13:56,650 --> 00:13:59,552
I'm not going to cover how to do a plane fitting algorithm,

235
00:13:59,552 --> 00:14:04,055
but I just want to call out that David Eberle's Geometric Tools

236
00:14:04,055 --> 00:14:08,699
has a symmetric eigensolver that might be a good place to start.

237
00:14:08,699 --> 00:14:11,961
And that's under the Boost license.

238
00:14:14,422 --> 00:14:19,684
So once your plane fitting algorithm outputs a target plane,

239
00:14:19,684 --> 00:14:24,065
you can use this as your target transform for your ship.

240
00:14:24,065 --> 00:14:27,625
And that's what we do with each frame.

241
00:14:27,625 --> 00:14:31,006
We also apply a simple spring as a filter

242
00:14:31,006 --> 00:14:32,747
to help filter the noise

243
00:14:32,747 --> 00:14:37,068
and also mimic the physics of buoyancy and inertia.

244
00:14:43,076 --> 00:14:46,778
But before we move on, I just wanted to call out something

245
00:14:46,778 --> 00:14:50,279
about one of those previous slides here.

246
00:14:50,279 --> 00:14:52,260
This function, getWaterHeightAtPoint,

247
00:14:52,260 --> 00:14:54,962
which is something that we do quite a bit in the game,

248
00:14:54,962 --> 00:14:58,484
both on the CPU and the GPU, is actually not

249
00:14:58,484 --> 00:15:00,605
as simple as it seems because of the way

250
00:15:00,605 --> 00:15:03,766
that we represent the ocean displacement.

251
00:15:03,766 --> 00:15:06,508
It's represented as a 3D displacement

252
00:15:06,508 --> 00:15:07,868
relative to imaginary plane.

253
00:15:09,329 --> 00:15:11,511
And so we actually are just looking for the height

254
00:15:11,511 --> 00:15:14,233
at a specific world location.

255
00:15:14,233 --> 00:15:17,156
And one way we could potentially achieve that

256
00:15:17,156 --> 00:15:20,839
is to have an intermediary step where we output a height

257
00:15:20,839 --> 00:15:21,520
map in world space.

258
00:15:21,520 --> 00:15:28,025
But we decided to just use a iterative approximation instead.

259
00:15:28,025 --> 00:15:30,568
And here's what that looks like in code.

260
00:15:30,568 --> 00:15:33,750
This is basically Newton's approximation method.

261
00:15:36,132 --> 00:15:39,893
We're just doing multiple iterations on this,

262
00:15:39,893 --> 00:15:43,655
and it should converge over time or over a number of iterations.

263
00:15:43,655 --> 00:15:47,816
You could potentially stop when subsequent sample locations

264
00:15:47,816 --> 00:15:49,977
are within a specific 2D distance.

265
00:15:49,977 --> 00:15:54,258
But for optimization reasons, sometimes it's

266
00:15:54,258 --> 00:15:56,079
faster just to do a fixed number of iterations.

267
00:15:56,079 --> 00:16:00,240
Now I'll hand back to Tim to talk about actual rendering.

268
00:16:01,276 --> 00:16:02,417
Thank you.

269
00:16:02,417 --> 00:16:07,000
So we figured out the physics, the buoyancy,

270
00:16:07,000 --> 00:16:13,626
Beyonce buoyancy, and physics of the.

271
00:16:14,383 --> 00:16:16,245
Rigid bodies floating in the water.

272
00:16:16,245 --> 00:16:17,325
Let's get to the rendering.

273
00:16:17,325 --> 00:16:19,727
So we want the ocean to be rendered

274
00:16:19,727 --> 00:16:21,088
as beautiful as possible.

275
00:16:21,088 --> 00:16:23,389
This photo is actually not a photo.

276
00:16:23,389 --> 00:16:26,951
It's our rendering and the screenshot is taken

277
00:16:26,951 --> 00:16:29,813
with the camera located at roughly like half a mile

278
00:16:29,813 --> 00:16:31,454
above the ocean surface.

279
00:16:31,454 --> 00:16:35,317
So by the way, even here, you can see the large swell waves

280
00:16:35,317 --> 00:16:37,218
and shorter like the local wind waves.

281
00:16:40,857 --> 00:16:42,498
To get to this level of realism,

282
00:16:42,498 --> 00:16:46,999
we need to 3DAR see as a micro-facet surface.

283
00:16:46,999 --> 00:16:49,820
This is schematic drawing.

284
00:16:49,820 --> 00:16:51,461
I'm not very good at drawing,

285
00:16:51,461 --> 00:16:53,622
so my micro-facets are just all around.

286
00:16:53,622 --> 00:16:54,802
They do not touch each other,

287
00:16:54,802 --> 00:16:55,922
but you get the idea, right?

288
00:16:55,922 --> 00:16:59,884
This is another nice screenshot,

289
00:16:59,884 --> 00:17:01,664
which is not correct at all,

290
00:17:01,664 --> 00:17:04,545
because those micro-facets are not micro-facets,

291
00:17:04,545 --> 00:17:06,146
but you see those as the facets.

292
00:17:08,592 --> 00:17:11,136
So let's start with the rendering equation.

293
00:17:11,136 --> 00:17:14,882
The light that comes to our eye consists of three portions,

294
00:17:14,882 --> 00:17:15,183
three...

295
00:17:17,341 --> 00:17:26,983
First is scattered light, the light that came through the water body and refracted towards our eyes.

296
00:17:26,983 --> 00:17:31,704
Then the specular component from the sun and then the environment mapping component,

297
00:17:31,704 --> 00:17:36,744
the light that came from skies and surrounding geometry and whatnot.

298
00:17:36,744 --> 00:17:41,405
And this FR function that we need to integrate is the BRDF.

299
00:17:41,405 --> 00:17:44,646
Everybody familiar with PBR should know what is that, right?

300
00:17:46,188 --> 00:17:49,675
And the micro-facet BRDF model in our case,

301
00:17:49,675 --> 00:17:51,660
and this is the vanilla case, is.

302
00:17:52,700 --> 00:17:54,622
It depends on the Fresnel reflectance.

303
00:17:54,622 --> 00:17:56,804
We're gonna talk about this a little later.

304
00:17:56,804 --> 00:17:59,246
Then the normal distribution function, D,

305
00:17:59,246 --> 00:18:00,347
and the masking function.

306
00:18:00,347 --> 00:18:01,287
It's pretty important.

307
00:18:01,287 --> 00:18:02,769
We're gonna talk about this later as well.

308
00:18:02,769 --> 00:18:04,770
All these formulas look scary,

309
00:18:04,770 --> 00:18:06,812
but you shouldn't focus on those.

310
00:18:06,812 --> 00:18:08,513
You should focus on what those mean,

311
00:18:08,513 --> 00:18:11,436
and I'm gonna explain this stuff.

312
00:18:11,436 --> 00:18:15,839
So, our micro-facet surface is defined by NDF,

313
00:18:15,839 --> 00:18:17,921
normal distribution function.

314
00:18:17,921 --> 00:18:19,102
It's the function.

315
00:18:20,242 --> 00:18:26,648
that shows how our normals are distributed within the pixel.

316
00:18:26,648 --> 00:18:31,093
And this little egg-shaped thing on the bottom

317
00:18:31,093 --> 00:18:33,515
is the distribution of the normals.

318
00:18:33,515 --> 00:18:35,777
And in this case, for instance, the...

319
00:18:38,905 --> 00:18:42,146
The vertical normals will be most likely,

320
00:18:42,146 --> 00:18:46,448
I mean, you will most likely see the normals oriented vertically

321
00:18:46,448 --> 00:18:50,089
and the normals pointing at other directions

322
00:18:50,089 --> 00:18:51,750
have less chance to appear.

323
00:18:51,750 --> 00:18:56,791
And if you unwrap this x-shaped thing to a 2D plane

324
00:18:56,791 --> 00:19:02,393
where angle is on x-axis, you will see the familiar bell

325
00:19:02,393 --> 00:19:03,053
shaped curve.

326
00:19:05,732 --> 00:19:09,475
Now, the MDF, Normal Distribution Function, for us,

327
00:19:09,475 --> 00:19:12,917
we use Beckman distribution, is defined

328
00:19:12,917 --> 00:19:16,559
as a function of PDF, Probability Density Function.

329
00:19:16,559 --> 00:19:18,881
These formulas are quite scary.

330
00:19:18,881 --> 00:19:21,642
These are here just for the reference.

331
00:19:21,642 --> 00:19:27,766
But they mean that our PDF defines our surface roughnesses

332
00:19:27,766 --> 00:19:30,388
along the x and y-axis, because we are rendering the waves.

333
00:19:30,388 --> 00:19:33,910
And we need to use an isotropic PRDF, right?

334
00:19:35,591 --> 00:19:38,393
So, what's important and this is

335
00:19:38,393 --> 00:19:41,415
the thing that you probably should focus on,

336
00:19:41,415 --> 00:19:46,859
is that we use our surface moments to calculate the PDF,

337
00:19:46,859 --> 00:19:50,701
just like they do in Liader paper.

338
00:19:50,701 --> 00:19:52,883
Liader is linear, efficient,

339
00:19:52,883 --> 00:19:55,704
anti-LAS, displacement, and reflectance mapping.

340
00:19:55,704 --> 00:19:59,327
It's pretty cool paper, you should read that.

341
00:19:59,327 --> 00:20:03,049
So, using the moments allows us to calculate those variances.

342
00:20:05,247 --> 00:20:06,668
just from the moments.

343
00:20:06,668 --> 00:20:11,009
And the moments, the first and second order moments,

344
00:20:11,009 --> 00:20:12,289
can be stored in texture.

345
00:20:12,289 --> 00:20:14,709
And what is cool about those moments

346
00:20:14,709 --> 00:20:18,870
is that they do survive the linear operators.

347
00:20:18,870 --> 00:20:21,691
And those linear operators are the MIP mapping and texture

348
00:20:21,691 --> 00:20:22,371
filtering.

349
00:20:22,371 --> 00:20:25,032
And that is something that we will gladly use, right?

350
00:20:25,032 --> 00:20:31,073
So how do we calculate the moments?

351
00:20:31,073 --> 00:20:34,654
After we get our displacements using the reverse FFT step.

352
00:20:35,417 --> 00:20:37,318
We calculate those first order moments,

353
00:20:37,318 --> 00:20:39,100
which are essentially the gradients,

354
00:20:39,100 --> 00:20:40,981
the slopes of the ocean surface,

355
00:20:40,981 --> 00:20:43,704
and the second order moments,

356
00:20:43,704 --> 00:20:46,706
which are essentially the squares of the first order moments,

357
00:20:46,706 --> 00:20:48,568
the squares of those slopes,

358
00:20:48,568 --> 00:20:50,069
and then the covariance,

359
00:20:50,069 --> 00:20:52,171
which is just cross multiplication of those.

360
00:20:52,171 --> 00:20:53,712
We just store this in textures,

361
00:20:53,712 --> 00:20:57,055
and this is how it looks schematically.

362
00:20:57,055 --> 00:21:02,280
We get our displacement textures in the first texture array.

363
00:21:03,355 --> 00:21:07,937
which has four slices because we have four frequency band.

364
00:21:07,937 --> 00:21:12,499
We start those displacements in RGB channels of those slices.

365
00:21:12,499 --> 00:21:18,882
Then we, using the computators, we get the first order moments

366
00:21:18,882 --> 00:21:21,364
and store them to another texture array.

367
00:21:21,364 --> 00:21:23,004
And then the second order moments

368
00:21:23,004 --> 00:21:25,185
are stored in the third texture array.

369
00:21:26,272 --> 00:21:28,893
And the free channels we use in those textures

370
00:21:28,893 --> 00:21:31,896
we use to store the foam intensity, displacement,

371
00:21:31,896 --> 00:21:33,257
Jacobian, and other things.

372
00:21:33,257 --> 00:21:38,120
I'll talk about those a little later.

373
00:21:38,120 --> 00:21:41,382
Now, since we have multiple frequency band,

374
00:21:41,382 --> 00:21:44,645
we need to carefully and mathematically correctly

375
00:21:44,645 --> 00:21:45,805
combine all those moments.

376
00:21:45,805 --> 00:21:48,547
The first order moments, the slopes or the gradients,

377
00:21:48,547 --> 00:21:50,549
are very easy to combine.

378
00:21:50,549 --> 00:21:51,429
You just sum those up.

379
00:21:51,429 --> 00:21:54,512
And the second order moments, just a little more complicated

380
00:21:54,512 --> 00:21:55,172
to combine.

381
00:21:58,634 --> 00:22:00,955
Okay, we figured out the moments.

382
00:22:00,955 --> 00:22:03,277
We combined all those moments.

383
00:22:03,277 --> 00:22:07,601
We got our roughness values.

384
00:22:07,601 --> 00:22:10,383
Now we can calculate the specular reflection.

385
00:22:10,383 --> 00:22:11,364
We are very lucky.

386
00:22:11,364 --> 00:22:13,986
The specular reflection integral over the hemisphere

387
00:22:13,986 --> 00:22:15,087
is just analytic, right?

388
00:22:15,087 --> 00:22:18,730
Because we only have one light source.

389
00:22:18,730 --> 00:22:19,251
It's the sun.

390
00:22:19,251 --> 00:22:24,275
And the integral is just analytic.

391
00:22:24,275 --> 00:22:27,498
We take this PDF,

392
00:22:28,502 --> 00:22:33,926
We take into account those masking and shadowing factors

393
00:22:33,926 --> 00:22:35,907
that we're gonna talk about a little later,

394
00:22:35,907 --> 00:22:40,050
and we calculate this scaly formula.

395
00:22:40,050 --> 00:22:45,193
This is how the specular reflection looks

396
00:22:45,193 --> 00:22:47,494
with simple calculation,

397
00:22:47,494 --> 00:22:48,635
just vanilla specular,

398
00:22:48,635 --> 00:22:50,656
and with PBR on the right.

399
00:22:50,656 --> 00:22:52,237
And the picture on the right is obviously

400
00:22:52,237 --> 00:22:54,619
much, much, much more correct.

401
00:22:55,681 --> 00:23:08,275
And what is also good about it is that the specular does not sparkle, it's not noisy,

402
00:23:08,275 --> 00:23:13,000
it's anti-aliased and it's smooth at any distance to the ocean surface.

403
00:23:14,720 --> 00:23:15,881
Now the environment reflection.

404
00:23:15,881 --> 00:23:17,683
It is a little more complicated

405
00:23:17,683 --> 00:23:21,126
because we don't have a single light source.

406
00:23:21,126 --> 00:23:23,628
We have entire environment map.

407
00:23:23,628 --> 00:23:27,732
So in order to calculate it, we just sum up few samples.

408
00:23:27,732 --> 00:23:31,696
Just like in this Liadar paper, we use a set of samples

409
00:23:31,696 --> 00:23:33,778
which are effectively the cones.

410
00:23:33,778 --> 00:23:37,301
We just sample our environment maps with the cones.

411
00:23:37,301 --> 00:23:40,624
And I'm not gonna go into much details about it.

412
00:23:41,710 --> 00:23:43,271
It's all explained in the other paper.

413
00:23:43,271 --> 00:23:45,191
It's not the point of this presentation.

414
00:23:45,191 --> 00:23:50,273
The thing is that we cannot afford full-blown calculation

415
00:23:50,273 --> 00:23:51,293
for those samples.

416
00:23:51,293 --> 00:23:53,934
For instance, it's just too expensive.

417
00:23:53,934 --> 00:23:57,755
We do not calculate the Fresnel term or masking and shadowing

418
00:23:57,755 --> 00:24:00,196
for each of those environmental samples.

419
00:24:01,727 --> 00:24:06,792
We're going to talk about the Fresnel and masking shadowing terms just a little later.

420
00:24:06,792 --> 00:24:07,793
And this is how it looks.

421
00:24:07,793 --> 00:24:11,557
On the left, you see the simple reflection.

422
00:24:11,557 --> 00:24:12,598
It's just one.

423
00:24:13,428 --> 00:24:16,629
sample per point, and it's pretty noisy.

424
00:24:16,629 --> 00:24:18,550
And what is more annoying is that the,

425
00:24:18,550 --> 00:24:22,752
as the normals do degrade to pure vertical distance,

426
00:24:22,752 --> 00:24:26,994
your reflection is just simple planar reflection of distance.

427
00:24:26,994 --> 00:24:28,955
It just doesn't look right.

428
00:24:28,955 --> 00:24:31,256
And on the right portion of the screenshot,

429
00:24:31,256 --> 00:24:35,898
you see nice environment reflection

430
00:24:35,898 --> 00:24:41,461
that does use the statistical properties of the surface.

431
00:24:41,461 --> 00:24:42,921
Now the masking and shadowing.

432
00:24:43,685 --> 00:24:45,487
We are rendering the waves.

433
00:24:45,487 --> 00:24:47,911
And it's quite obvious that at the distance

434
00:24:47,911 --> 00:24:51,476
or at the grazing angles, the waves will obstruct each other.

435
00:24:51,476 --> 00:24:56,623
And this schematic drawing shows this.

436
00:25:01,041 --> 00:25:04,682
With waves obstructing each other, right?

437
00:25:04,682 --> 00:25:05,542
Did I say it right?

438
00:25:05,542 --> 00:25:10,203
You don't have as much light as you would think

439
00:25:10,203 --> 00:25:11,464
at the distance.

440
00:25:11,464 --> 00:25:14,504
And lucky for us, the approximation for this,

441
00:25:14,504 --> 00:25:17,505
for RBODF exists, so we just use this

442
00:25:17,505 --> 00:25:19,266
Walters approximation for us,

443
00:25:19,266 --> 00:25:22,187
this scary formula in blue on this picture.

444
00:25:22,387 --> 00:25:26,910
And what it actually gives us, as I just told,

445
00:25:26,910 --> 00:25:31,554
on the distance, you will see that the specular light

446
00:25:31,554 --> 00:25:34,676
from the sun gets too bright on the left portion

447
00:25:34,676 --> 00:25:35,477
of the screenshot.

448
00:25:36,780 --> 00:25:40,142
And it's just about right on the right portion of the screenshot.

449
00:25:40,142 --> 00:25:47,268
And if it wasn't clear enough, let's just decrease the intensity of our sun and pretend

450
00:25:47,268 --> 00:25:48,389
that it's moon.

451
00:25:48,389 --> 00:25:52,492
So you will see that on the left it's just incorrect, it's too bright.

452
00:25:52,492 --> 00:25:56,615
And on the right it's looking much, much better.

453
00:25:56,615 --> 00:25:58,256
Now the Fresnel reflectance.

454
00:25:58,984 --> 00:26:00,445
Again, waves do abstract each other.

455
00:26:00,445 --> 00:26:05,569
So the distribution of normals that you would see that

456
00:26:05,569 --> 00:26:12,875
will combine and project to your pixel will be just tilted.

457
00:26:12,875 --> 00:26:18,099
So you will see that the normal distribution is not,

458
00:26:18,099 --> 00:26:20,041
how do I say it?

459
00:26:20,041 --> 00:26:23,363
So it does not average to vertical anymore.

460
00:26:25,516 --> 00:26:26,896
And again, we are lucky.

461
00:26:26,896 --> 00:26:31,618
The approximation for this microfacet BRDF Fresnel

462
00:26:31,618 --> 00:26:34,499
does exist, so we just use it in our case.

463
00:26:34,499 --> 00:26:36,319
And this is how it looks.

464
00:26:36,319 --> 00:26:41,121
On the left portion, you see the planar Fresnel

465
00:26:41,121 --> 00:26:45,122
that does not use the microfacet properties of the surface.

466
00:26:45,622 --> 00:26:48,145
And as you can see, as the normals do degrade

467
00:26:48,145 --> 00:26:50,908
to vertical at distance, the Fresnel term

468
00:26:50,908 --> 00:26:54,512
will degrade to just one, which is obviously not correct.

469
00:26:54,512 --> 00:26:57,655
And on the right portion of the screenshot,

470
00:26:57,655 --> 00:27:00,558
you will see the Fresnel with the microfacet properties.

471
00:27:00,558 --> 00:27:04,002
It's obviously much more closer to nature.

472
00:27:07,044 --> 00:27:09,645
Now the last but not least, scattered light.

473
00:27:09,645 --> 00:27:11,345
It's hard.

474
00:27:11,345 --> 00:27:14,946
Calculating scattered light in real time

475
00:27:14,946 --> 00:27:16,287
is too time consuming.

476
00:27:16,287 --> 00:27:19,548
You have to kind of trace to the water body.

477
00:27:19,548 --> 00:27:21,008
It's too much for the real time.

478
00:27:21,008 --> 00:27:22,068
We cannot afford that.

479
00:27:22,068 --> 00:27:27,770
So we just came up with a bunch of hoax and fudge numbers.

480
00:27:27,770 --> 00:27:29,470
This formula looks scary,

481
00:27:29,470 --> 00:27:32,731
but let me just explain it step by step.

482
00:27:32,731 --> 00:27:35,812
So what we do there is we just multiply the chances.

483
00:27:37,133 --> 00:27:40,775
This blue portion on the left just

484
00:27:40,775 --> 00:27:44,237
tells us that the chance to see the scattered light

485
00:27:44,237 --> 00:27:48,819
is higher as we get closer to the wavetop.

486
00:27:48,819 --> 00:27:52,980
So the higher are the waves, and the closer

487
00:27:52,980 --> 00:27:54,661
we are to the wavetops, the chance

488
00:27:54,661 --> 00:27:57,142
to see the scattered light is higher.

489
00:27:57,142 --> 00:28:00,104
Then the next one, the blue portion,

490
00:28:00,104 --> 00:28:03,245
shows us that the chance to see the scattered light

491
00:28:03,245 --> 00:28:06,286
is higher when we look at the oceans that

492
00:28:06,286 --> 00:28:06,746
are scattered.

493
00:28:07,342 --> 00:28:09,762
are located between us and the source of light,

494
00:28:09,762 --> 00:28:11,043
the sun in our case.

495
00:28:11,043 --> 00:28:15,024
Then this third, the red portion,

496
00:28:15,024 --> 00:28:19,665
shows us that the chance to see scattered light

497
00:28:19,665 --> 00:28:24,387
is much higher if we see just straight at the ocean surface,

498
00:28:24,387 --> 00:28:26,327
if the normal of the ocean surface

499
00:28:26,327 --> 00:28:27,988
coincides with our view vector.

500
00:28:28,703 --> 00:28:32,726
There is a couple, the blue and the yellow terms.

501
00:28:32,726 --> 00:28:35,968
These are just five factors to take into account,

502
00:28:35,968 --> 00:28:39,290
the bubbles that are spreading in the water,

503
00:28:39,290 --> 00:28:43,673
and the shallow scatter.

504
00:28:43,673 --> 00:28:49,076
We render the ocean surface just a bit like a diffuse surface.

505
00:28:49,076 --> 00:28:53,078
So it behaves just like a diffuse surface of some kind.

506
00:28:53,078 --> 00:28:57,041
This allows us to simulate the shallow scatter.

507
00:28:58,618 --> 00:28:59,559
And this is how it looks.

508
00:28:59,559 --> 00:29:02,682
Luckily, this projector will allow you to see the scatter.

509
00:29:02,682 --> 00:29:06,745
It's on the right top portion of the screenshot,

510
00:29:06,745 --> 00:29:08,446
but the next screenshot will show it better.

511
00:29:08,446 --> 00:29:11,648
So on the left, you see no scatter at all.

512
00:29:11,648 --> 00:29:15,632
On the right, you see the sun, the scatter

513
00:29:15,632 --> 00:29:20,695
with the sun elevation of 5 degrees, then 15 degrees,

514
00:29:20,695 --> 00:29:21,736
and then 45 degrees.

515
00:29:21,736 --> 00:29:23,317
It's kind of nice.

516
00:29:23,317 --> 00:29:24,118
It's kind of cool.

517
00:29:24,118 --> 00:29:26,160
It gives nice pictures.

518
00:29:26,160 --> 00:29:27,841
And what's important is that.

519
00:29:28,041 --> 00:29:34,547
Scatter of the light in the water body is the thing that defines the color of the water surface.

520
00:29:34,547 --> 00:29:40,553
The turbidity, the algae, whatnot, everything that is in the water surface defines its color.

521
00:29:40,553 --> 00:29:44,216
And scatter is what you... is what defines its color.

522
00:29:47,192 --> 00:29:48,793
Now let's put it all together.

523
00:29:48,793 --> 00:29:53,774
We did use Fresnel term for our specular reflection.

524
00:29:53,774 --> 00:29:55,155
It's all good.

525
00:29:55,155 --> 00:29:59,376
We did not use the Fresnel for environment reflection.

526
00:29:59,376 --> 00:30:00,457
We have to use it now.

527
00:30:00,457 --> 00:30:01,857
And of course, we have to use the Fresnel

528
00:30:01,857 --> 00:30:03,998
for the scattered light.

529
00:30:03,998 --> 00:30:06,139
So we can sum up all those components

530
00:30:06,139 --> 00:30:11,320
and get rendered ocean surface.

531
00:30:11,320 --> 00:30:12,681
One thing we forgot is the foam.

532
00:30:13,924 --> 00:30:20,689
So we need to calculate foam color and just learn between the foam color and the ocean surface color in the foamed areas.

533
00:30:20,689 --> 00:30:27,775
And of course we need to increase the roughness just a little for the foamed areas because the foam bubbles are bumpy.

534
00:30:30,592 --> 00:30:34,353
To calculate the foam, we use a pretty simple approach.

535
00:30:34,353 --> 00:30:36,834
We calculate the Jacobian of the displacements.

536
00:30:36,834 --> 00:30:39,236
Jacobian sounds scary, but it's just

537
00:30:39,236 --> 00:30:41,977
the measure of how much our water surface

538
00:30:41,977 --> 00:30:43,197
was squeezed or stretched.

539
00:30:43,197 --> 00:30:47,259
And if it's squeezed, then obviously we are on a wavetop.

540
00:30:47,259 --> 00:30:49,620
And if we are on a wavetop, we inject.

541
00:30:49,849 --> 00:30:52,572
just the float value, we call it turbulent energy,

542
00:30:52,572 --> 00:30:55,455
into the corresponding texels,

543
00:30:55,455 --> 00:30:58,017
and let them leave, evolve over time,

544
00:30:58,017 --> 00:31:02,602
spread over space, and just dissipate over time.

545
00:31:02,602 --> 00:31:06,165
Then, of course, we need to mix or add

546
00:31:06,165 --> 00:31:09,248
all those foam energies from all the frequency bands

547
00:31:09,248 --> 00:31:11,030
and use to modulate the foam textures,

548
00:31:11,030 --> 00:31:13,272
and this is how it looks.

549
00:31:13,272 --> 00:31:13,853
Kind of nice.

550
00:31:18,803 --> 00:31:20,224
A couple final tweaks.

551
00:31:20,224 --> 00:31:23,905
We did not realize that our famous formula

552
00:31:23,905 --> 00:31:28,406
that allows us to get the variances from the moments

553
00:31:28,406 --> 00:31:31,246
does not survive bilinear magnification

554
00:31:31,246 --> 00:31:32,727
because guess what?

555
00:31:32,727 --> 00:31:34,627
The bilinear magnification,

556
00:31:34,627 --> 00:31:36,147
even if it sounds kind of linear,

557
00:31:36,147 --> 00:31:39,868
it's not a linear operator because it's bilinear.

558
00:31:39,868 --> 00:31:43,949
So we had to detect the cases

559
00:31:43,949 --> 00:31:47,310
or the areas where we do magnify our textures

560
00:31:47,310 --> 00:31:48,270
using DDX and DDY.

561
00:31:49,811 --> 00:31:54,594
And then if we end up being magnifying the textures,

562
00:31:54,594 --> 00:31:57,396
we just lerp the second order moments

563
00:31:57,396 --> 00:31:59,657
that we get from those textures

564
00:31:59,657 --> 00:32:02,219
with the second order moments

565
00:32:02,219 --> 00:32:03,980
that we calculate just in place,

566
00:32:03,980 --> 00:32:05,961
just as the squares of the first order moments

567
00:32:05,961 --> 00:32:06,962
that we get from those textures.

568
00:32:06,962 --> 00:32:10,384
This effectively lerps our variance to zero

569
00:32:10,384 --> 00:32:14,846
and makes our ocean surface perfectly mirror,

570
00:32:14,846 --> 00:32:16,167
a perfect mirror in close-ups,

571
00:32:16,167 --> 00:32:18,008
but this is probably what we want to do, right?

572
00:32:19,904 --> 00:32:21,285
And this is how it looks.

573
00:32:21,285 --> 00:32:25,130
On the left, you see kind of weird artifacts

574
00:32:25,130 --> 00:32:30,517
where we are trying to magnify the microfacet surface.

575
00:32:30,517 --> 00:32:32,580
And obviously, it's something wrong to do

576
00:32:32,580 --> 00:32:35,163
because we are trying to use this method outside

577
00:32:35,163 --> 00:32:36,665
of its applicable domain.

578
00:32:37,466 --> 00:32:40,107
And on the right, you see the effects.

579
00:32:40,107 --> 00:32:43,669
Oh, and plus, we use the bicubic filtering for the normals

580
00:32:43,669 --> 00:32:46,170
for those gradients in close-ups.

581
00:32:46,170 --> 00:32:49,872
So this gives us smoother normals.

582
00:32:49,872 --> 00:32:55,175
Now, we didn't talk about the geometry,

583
00:32:55,175 --> 00:32:56,816
but the geometry is pretty simple.

584
00:32:56,816 --> 00:32:59,137
We use quadtree approach there.

585
00:32:59,137 --> 00:33:01,038
And quadtree with LODs.

586
00:33:04,277 --> 00:33:10,304
does have smaller density of those vertices in the distance.

587
00:33:10,304 --> 00:33:14,188
So we obviously undersample our displacements with geometry,

588
00:33:14,188 --> 00:33:19,433
and this could lead to crawling geometry and like.

589
00:33:19,934 --> 00:33:22,716
all kind of weird artifacts.

590
00:33:22,716 --> 00:33:25,838
And to avoid that, we just damped down our displacements

591
00:33:25,838 --> 00:33:26,458
at some distance.

592
00:33:26,458 --> 00:33:30,000
And we empirically figured out that 30 world

593
00:33:30,000 --> 00:33:33,563
spaces of a frequency band is good for us.

594
00:33:33,563 --> 00:33:36,445
So after that distance in a world space,

595
00:33:36,445 --> 00:33:40,067
we just start damping down those individual frequency band

596
00:33:40,067 --> 00:33:44,150
displacements.

597
00:33:44,150 --> 00:33:45,431
Now Mark.

598
00:33:48,813 --> 00:33:55,958
So as we just mentioned, we output foam and wave hat data basically to render the ocean

599
00:33:55,958 --> 00:34:03,903
surface and this works really well and obviously you can see in that previous slide right there

600
00:34:03,903 --> 00:34:10,707
that just that alone is really good at representing the turbulence of the ocean under high winds.

601
00:34:11,708 --> 00:34:18,408
But we wanted to add some more detail by adding particles that come off the top, the white

602
00:34:18,408 --> 00:34:19,792
caps of the waves.

603
00:34:27,416 --> 00:34:30,739
And one of the, our game is in Unreal Engine,

604
00:34:30,739 --> 00:34:34,803
so one of the most important things that we wanted to do

605
00:34:34,803 --> 00:34:36,865
was allow the artist to have some control

606
00:34:36,865 --> 00:34:38,566
of these particles.

607
00:34:38,566 --> 00:34:41,049
So we wanted it to work inside of Unreal's

608
00:34:41,049 --> 00:34:42,610
cascade particle system.

609
00:34:42,610 --> 00:34:46,514
And we're using the GPU particles there.

610
00:34:46,514 --> 00:34:50,778
But unfortunately we can't spawn from the GPU in that system.

611
00:34:53,685 --> 00:34:59,911
So our solution is to create a custom emitter that emits a triangle basically projected

612
00:34:59,911 --> 00:35:04,695
down onto the ocean plane that represents the camera frustum.

613
00:35:04,695 --> 00:35:09,780
And we're randomly emitting particles everywhere in that triangle.

614
00:35:09,780 --> 00:35:14,624
But these particles that we emit are just tracer particles and they're not actually

615
00:35:14,624 --> 00:35:15,725
simulating or rendering yet.

616
00:35:18,090 --> 00:35:23,432
And then the particles in their simulation shader

617
00:35:23,432 --> 00:35:27,034
will just basically look for the foam texture,

618
00:35:27,034 --> 00:35:31,576
or the white cap features, and start the regular simulation

619
00:35:31,576 --> 00:35:33,817
and rendering when they detect that they're

620
00:35:33,817 --> 00:35:35,658
inside of a white cap on top of the wave.

621
00:35:35,658 --> 00:35:42,522
And then the normal cascade particle system simulation

622
00:35:42,522 --> 00:35:44,623
dynamics and whatnot will kick in.

623
00:35:46,909 --> 00:35:51,395
So here's what the modification to Unreal's particle simulation

624
00:35:51,395 --> 00:35:52,196
shaders looks like.

625
00:35:52,196 --> 00:35:55,761
These functions getDisplacedVertex.

626
00:35:55,761 --> 00:35:58,704
That function is exactly the same function

627
00:35:58,704 --> 00:36:02,409
we call in our vertex shader or domain shader

628
00:36:02,409 --> 00:36:03,871
when we're rendering our ocean surface.

629
00:36:04,672 --> 00:36:09,255
And that just gets us our displacement information.

630
00:36:09,255 --> 00:36:11,317
And then the getSurface parameters,

631
00:36:11,317 --> 00:36:12,918
that's just the exact same function

632
00:36:12,918 --> 00:36:14,920
we call for our pixel shader when we're

633
00:36:14,920 --> 00:36:17,482
rendering our ocean surface.

634
00:36:19,228 --> 00:36:21,769
But we're doing it here inside the particle simulation.

635
00:36:21,769 --> 00:36:25,592
And we use that information just to do a simple check

636
00:36:25,592 --> 00:36:28,254
to see if our foam wave hat's value is high enough,

637
00:36:28,254 --> 00:36:29,594
it's larger than our threshold.

638
00:36:29,594 --> 00:36:32,696
And then we kick off our normal particle simulation

639
00:36:32,696 --> 00:36:34,217
and rendering.

640
00:36:34,217 --> 00:36:37,699
Otherwise, we might come back around for a few frames

641
00:36:37,699 --> 00:36:40,001
and keep looking.

642
00:36:40,001 --> 00:36:41,582
And then after some time, this particle,

643
00:36:41,582 --> 00:36:45,344
if it's not on a wave top, then it will basically get killed

644
00:36:45,344 --> 00:36:46,005
and never be seen.

645
00:36:49,464 --> 00:36:51,366
So that was the wavehead particles.

646
00:36:51,366 --> 00:36:54,448
We do have other particles and effects

647
00:36:54,448 --> 00:36:57,530
that interact with the ocean surface in our game.

648
00:36:57,530 --> 00:37:00,411
Currently, our cascade particle system

649
00:37:00,411 --> 00:37:05,054
outputs particle sprites for our wakes from our ships.

650
00:37:05,054 --> 00:37:09,397
And these are displaced by the ocean surface displacement.

651
00:37:10,158 --> 00:37:12,739
And you can see they're kind of like decals

652
00:37:12,739 --> 00:37:15,080
on top of the ocean surface.

653
00:37:15,080 --> 00:37:18,181
Our explosions are just normal cascade particle systems.

654
00:37:18,181 --> 00:37:21,243
But none of these things actually affect

655
00:37:21,243 --> 00:37:23,764
the ocean surface displacement itself.

656
00:37:23,764 --> 00:37:28,686
So they are just kind of on top of the ocean surface.

657
00:37:28,686 --> 00:37:31,508
And it's kind of misses some of the detail that way.

658
00:37:31,508 --> 00:37:33,648
But so we're working, the game is in development still.

659
00:37:33,648 --> 00:37:36,370
So we're working on some prototypes for the future.

660
00:37:36,370 --> 00:37:38,391
And Tim can talk about something he's working on.

661
00:37:38,391 --> 00:37:38,991
Thank you.

662
00:37:42,907 --> 00:37:48,369
So yes, we need the waves, the ocean surface,

663
00:37:48,369 --> 00:37:51,151
to be displaced by the local objects,

664
00:37:51,151 --> 00:37:55,373
like ships, boats, and explosions, and whatnot.

665
00:37:55,373 --> 00:37:57,794
And that leads us to need to introduce

666
00:37:57,794 --> 00:38:00,095
some local kind of simulation.

667
00:38:01,305 --> 00:38:04,007
For this, we do use another Thessendorf's paper.

668
00:38:04,007 --> 00:38:05,508
It's called e-wave solver.

669
00:38:05,508 --> 00:38:08,090
It's exponential solver.

670
00:38:08,090 --> 00:38:12,733
And the idea is quite the same as we used for the wind wave

671
00:38:12,733 --> 00:38:13,314
simulation.

672
00:38:13,314 --> 00:38:15,235
So what happens there is that you

673
00:38:15,235 --> 00:38:19,378
have a grid of displacements and velocity potentials,

674
00:38:19,378 --> 00:38:22,180
like, I don't know, like 1k by 1k grid of these guys.

675
00:38:22,180 --> 00:38:26,043
Then you convert those displacements and velocity

676
00:38:26,043 --> 00:38:26,764
potentials.

677
00:38:27,495 --> 00:38:29,056
to the frequency domain.

678
00:38:29,056 --> 00:38:31,258
Then you evolve those guys in frequency domain

679
00:38:31,258 --> 00:38:33,921
using evolving operators that do depend

680
00:38:33,921 --> 00:38:40,647
on the size of this domain in world space and delta t.

681
00:38:40,647 --> 00:38:45,312
Then those evolved displacement and velocity potentials

682
00:38:45,312 --> 00:38:49,896
just get converted back to spatial domain and rendered.

683
00:38:49,896 --> 00:38:51,337
And this is how it's supposed to look.

684
00:38:53,023 --> 00:38:54,404
Kind of nice, right?

685
00:38:54,404 --> 00:38:58,385
You see the almost perfect Kelvin wake,

686
00:38:58,385 --> 00:39:00,325
and it looks really nice.

687
00:39:00,325 --> 00:39:00,365
OK.

688
00:39:00,365 --> 00:39:06,927
This solution is good and all, but it's not good for us.

689
00:39:06,927 --> 00:39:10,128
I mean, we need it to be improved.

690
00:39:10,128 --> 00:39:11,568
First of all, the solution is periodic,

691
00:39:11,568 --> 00:39:13,409
because it uses the inverse FFT steps.

692
00:39:13,409 --> 00:39:17,510
And periodicity is not something that we want to, right?

693
00:39:17,510 --> 00:39:20,010
So we introduced exponential dampening

694
00:39:20,010 --> 00:39:21,971
on the edges of the frequency of the.

695
00:39:23,792 --> 00:39:27,514
simulation domain so that we don't get repeats.

696
00:39:27,514 --> 00:39:30,375
We don't have ringing or

697
00:39:30,375 --> 00:39:34,297
some weird artifacts caused by the dampening.

698
00:39:34,297 --> 00:39:38,800
Then, the simulation does not simulate foam.

699
00:39:38,800 --> 00:39:41,201
We use the very same logic.

700
00:39:41,201 --> 00:39:45,403
We just detect the areas where the displacements are large

701
00:39:45,403 --> 00:39:47,044
and Jacobian is.

702
00:39:48,762 --> 00:39:51,907
enough so that we can inject some turbulent energy,

703
00:39:51,907 --> 00:39:53,811
and we simulate the foam in those areas.

704
00:39:54,916 --> 00:39:58,518
So overall, we get two forward FFTs

705
00:39:58,518 --> 00:40:02,280
to convert those displacements and velocity potentials

706
00:40:02,280 --> 00:40:03,881
to frequency space.

707
00:40:03,881 --> 00:40:06,762
Then applying those evolving operators

708
00:40:06,762 --> 00:40:08,963
is just a per-component multiplication

709
00:40:08,963 --> 00:40:10,464
in frequency space.

710
00:40:10,464 --> 00:40:11,224
It's pretty cheap.

711
00:40:11,224 --> 00:40:14,526
And then four inverse FFTs to get the data back

712
00:40:14,526 --> 00:40:15,366
to spatial domain.

713
00:40:15,366 --> 00:40:16,207
Why four?

714
00:40:16,207 --> 00:40:20,589
Because two more inverse FFTs are adding.

715
00:40:20,689 --> 00:40:24,234
because we're gonna have the lateral displacements,

716
00:40:24,234 --> 00:40:27,279
the X displacements and the Y displacements as well.

717
00:40:27,279 --> 00:40:28,741
So it's two more.

718
00:40:28,741 --> 00:40:29,843
And this is how it looks.

719
00:40:29,843 --> 00:40:31,746
Looks kinda nice, but it's boring

720
00:40:31,746 --> 00:40:32,867
because it doesn't move.

721
00:40:32,867 --> 00:40:34,069
Let us move the thing.

722
00:40:36,640 --> 00:40:41,941
Okay, as you can see, as our virtual non-existing boat

723
00:40:41,941 --> 00:40:46,302
starts to accelerate, it starts forming perfect Calvin wake.

724
00:40:46,302 --> 00:40:48,043
That looks awesome.

725
00:40:48,043 --> 00:40:51,523
And you can also see that it does respect the dispersion relation

726
00:40:51,523 --> 00:40:56,264
so that the longer waves move faster

727
00:40:56,264 --> 00:40:58,665
and the smaller waves move slower.

728
00:40:58,665 --> 00:41:00,445
And after the boat stopped...

729
00:41:00,805 --> 00:41:03,567
The waves continue to propagate beyond that point.

730
00:41:03,567 --> 00:41:06,408
So you can clearly see it's not a combination of textures

731
00:41:06,408 --> 00:41:08,909
or kind of hacks that we used there.

732
00:41:08,909 --> 00:41:09,950
And it looks kind of nice.

733
00:41:09,950 --> 00:41:20,075
And it looks really great.

734
00:41:20,075 --> 00:41:23,437
OK, the waves do propagate after beyond that point.

735
00:41:23,437 --> 00:41:24,677
It looks really good.

736
00:41:24,677 --> 00:41:28,259
So let's look at the thing closer.

737
00:41:31,320 --> 00:41:38,046
this time taking, paying more attention to the rendering.

738
00:41:38,046 --> 00:41:42,070
So as we can see, the foam is simulated quite nicely.

739
00:41:42,070 --> 00:41:46,473
The foam appears on the wavetops of this wake.

740
00:41:46,473 --> 00:41:50,497
It evolves, it spreads over time, it disappears over time.

741
00:41:50,497 --> 00:41:52,599
And the gradients.

742
00:41:53,299 --> 00:41:57,421
and moments from the wind wave simulation

743
00:41:57,421 --> 00:42:03,304
and from the local wave simulation blend together nicely,

744
00:42:03,304 --> 00:42:07,526
so we don't see any disconnections and whatnot.

745
00:42:07,526 --> 00:42:08,106
So it looks good.

746
00:42:08,106 --> 00:42:10,247
It's a perfect candidate for us

747
00:42:10,247 --> 00:42:12,168
to introduce in Atlas, right?

748
00:42:12,168 --> 00:42:15,450
And as you can see, as the boat moves and turns,

749
00:42:15,450 --> 00:42:20,392
the Kelvin wake kinda changes.

750
00:42:20,392 --> 00:42:20,872
It's good.

751
00:42:24,872 --> 00:42:27,434
Okay, so Calvin Wiggs, gradients,

752
00:42:27,434 --> 00:42:29,075
it's all nice but it's boring.

753
00:42:29,075 --> 00:42:30,296
We are pirates here, right?

754
00:42:30,296 --> 00:42:31,336
So let's explode something.

755
00:42:31,336 --> 00:42:33,257
Something like, I don't know,

756
00:42:33,257 --> 00:42:36,619
like a barrel of gunpowder on a raft.

757
00:42:36,619 --> 00:42:38,961
Ready? Boom.

758
00:42:41,618 --> 00:42:44,239
So this explosion consists of three phases.

759
00:42:44,239 --> 00:42:47,060
The first phase, you notice, that was a shock wave.

760
00:42:47,060 --> 00:42:50,400
It's just a random displacement added

761
00:42:50,400 --> 00:42:52,181
on an expanding circular area.

762
00:42:52,181 --> 00:42:55,762
Then the major displacement area that

763
00:42:55,762 --> 00:43:00,323
formed the major explosion area.

764
00:43:00,323 --> 00:43:04,423
And then just random debris falling here and there.

765
00:43:17,725 --> 00:43:18,966
Okay, so time to wrap up.

766
00:43:18,966 --> 00:43:21,988
The simulation, while sounding scary

767
00:43:21,988 --> 00:43:26,192
and too expensive and whatnot, it's not expensive at all.

768
00:43:26,192 --> 00:43:29,975
So the wind wave simulation and local waves

769
00:43:29,975 --> 00:43:32,838
or interactive wave simulation combined together

770
00:43:32,838 --> 00:43:37,041
barely take more than a millisecond on contemporary GPUs.

771
00:43:37,041 --> 00:43:39,623
And if it's too much for lower end GPUs,

772
00:43:39,623 --> 00:43:42,806
we can always scale down the sizes of those FFTs,

773
00:43:42,806 --> 00:43:45,228
lacking some details,

774
00:43:45,228 --> 00:43:47,130
but still running the full blown simulation.

775
00:43:50,078 --> 00:43:51,039
That's it, thank you.

776
00:43:51,039 --> 00:44:04,322
Questions?

777
00:44:04,322 --> 00:44:09,903
Hi, is there any hope that you will be putting

778
00:44:09,903 --> 00:44:14,644
all this beautiful work into a UE4 plugin for me to?

779
00:44:14,644 --> 00:44:14,844
Yes.

780
00:44:14,844 --> 00:44:15,044
Yes?

781
00:44:15,044 --> 00:44:18,145
Yes, the plugin, I'm not sure.

782
00:44:20,156 --> 00:44:23,958
We may want to have some branch or something.

783
00:44:23,958 --> 00:44:25,979
But yes, we want the public to see it.

784
00:44:25,979 --> 00:44:26,179
Oh, wow.

785
00:44:26,179 --> 00:44:27,099
OK, awesome.

786
00:44:27,099 --> 00:44:33,962
Thank you.

787
00:44:33,962 --> 00:44:37,524
How do you keep the water from showing up inside a boat?

788
00:44:37,524 --> 00:44:40,105
Water from showing up inside the boat.

789
00:44:40,105 --> 00:44:40,305
Mark?

790
00:44:40,305 --> 00:44:42,487
What if you have a rowboat or something,

791
00:44:42,487 --> 00:44:44,648
and it's popping up and down in your waves?

792
00:44:44,648 --> 00:44:46,468
How do you keep the water from leaking in?

793
00:44:47,257 --> 00:44:50,162
Yeah, so we use the distance fields

794
00:44:50,162 --> 00:44:53,927
that are generated from the static mesh of the boat hull.

795
00:44:53,927 --> 00:44:56,251
And then in the shader, we just basically don't render

796
00:44:56,251 --> 00:44:59,395
where you're inside the distance field of the boat.

797
00:44:59,395 --> 00:45:01,979
It's pretty cheap, actually.

798
00:45:01,979 --> 00:45:02,800
Okay, thanks.

799
00:45:10,640 --> 00:45:16,701
Hi, how do simulate coastlines, breaking waves,

800
00:45:16,701 --> 00:45:22,203
and this part of water simulation?

801
00:45:22,203 --> 00:45:26,424
And the second question, when you combine the wakes,

802
00:45:26,424 --> 00:45:29,645
how you recalculate lighting,

803
00:45:29,645 --> 00:45:35,386
because you have a moment for wind waves,

804
00:45:35,386 --> 00:45:38,027
and you integrate different type of...

805
00:45:39,073 --> 00:45:41,554
where waves, Kelvin waves,

806
00:45:41,554 --> 00:45:44,435
and how you combine the lighting normals.

807
00:45:44,435 --> 00:45:45,015
Okay, okay.

808
00:45:45,015 --> 00:45:45,415
I'll answer.

809
00:45:45,415 --> 00:45:48,837
You should recalculate roughness, make transition.

810
00:45:48,837 --> 00:45:51,598
Good question, okay.

811
00:45:51,598 --> 00:45:55,219
So I'll answer the question, the second question first.

812
00:45:55,219 --> 00:45:59,601
So since we,

813
00:45:59,601 --> 00:46:05,563
so the idea for us was not to use physically based.

814
00:46:06,508 --> 00:46:10,911
a rendering or the PBR or BRDF for the local simulation

815
00:46:10,911 --> 00:46:13,372
because this thing is not going to be absurd

816
00:46:13,372 --> 00:46:15,533
at the large distance.

817
00:46:15,533 --> 00:46:19,675
We will only simulate like the local wakes

818
00:46:19,675 --> 00:46:22,877
and whatnot for ships that are like in local battle, right?

819
00:46:22,877 --> 00:46:25,798
It doesn't make sense to simulate this on the horizon.

820
00:46:25,798 --> 00:46:29,600
So the second order moments are not calculated

821
00:46:29,600 --> 00:46:30,461
for the local wakes.

822
00:46:30,801 --> 00:46:34,122
But the first order moments, the gradients do calculate.

823
00:46:34,122 --> 00:46:39,884
So to combine this stuff and be still physically correct,

824
00:46:39,884 --> 00:46:42,565
we just combine the first order moments

825
00:46:42,565 --> 00:46:45,946
from the wind wave simulation, just add those.

826
00:46:45,946 --> 00:46:48,087
The first order moments from the wind simulation

827
00:46:48,087 --> 00:46:50,208
and the local wave simulation,

828
00:46:50,208 --> 00:46:52,989
and the second order moments for the local simulation

829
00:46:52,989 --> 00:46:54,189
are just zeros.

830
00:46:54,189 --> 00:46:56,790
This thing does not bring any more roughness.

831
00:46:56,790 --> 00:46:57,170
That's it.

832
00:47:01,983 --> 00:47:03,103
breaking waves, Mark?

833
00:47:03,103 --> 00:47:05,244
Oh yeah, so for the shoreline currently,

834
00:47:05,244 --> 00:47:08,646
we actually just kind of tapered down the water

835
00:47:08,646 --> 00:47:10,687
to the shoreline.

836
00:47:10,687 --> 00:47:12,708
That was kind of a decision based on gameplay.

837
00:47:12,708 --> 00:47:17,710
We want rafts to be able to dock near the shore

838
00:47:17,710 --> 00:47:20,552
and also be able to put those rafts to sleep

839
00:47:20,552 --> 00:47:23,433
in terms of physics update and whatnot for the server

840
00:47:23,433 --> 00:47:26,794
so it's not constantly having to process those.

841
00:47:27,555 --> 00:47:35,001
We did have a prototype, it may actually end up in the game in the future, of just Gerstner wave,

842
00:47:35,001 --> 00:47:39,724
shoreline waves that look pretty good and we had particles coming off them and whatnot.

843
00:47:39,724 --> 00:47:44,128
But the gameplay aspect of that is difficult just because of transitioning from on land to the water.

844
00:47:47,823 --> 00:47:50,825
So yeah, long story short, it's just for the shorelines,

845
00:47:50,825 --> 00:47:52,967
it's just a bunch of Gerstner waves.

846
00:47:52,967 --> 00:47:56,330
We had phases and amplitudes and wavelengths calculated

847
00:47:56,330 --> 00:47:57,711
based on the spectral parameters.

848
00:47:57,711 --> 00:48:00,614
It's pretty easy to calculate.

849
00:48:00,614 --> 00:48:03,176
But we decided not to put it in the game yet,

850
00:48:03,176 --> 00:48:06,619
because the players will not be happy trying

851
00:48:06,619 --> 00:48:11,303
to undock a raft or something with the giant Gerstner shore

852
00:48:11,303 --> 00:48:12,163
waves.

853
00:48:12,163 --> 00:48:14,585
Yeah, we're working on a solution for that.

854
00:48:14,585 --> 00:48:16,127
But yeah, it's not in there yet.

855
00:48:23,027 --> 00:48:28,672
More questions?

856
00:48:28,672 --> 00:48:29,953
One, two, three, sold.

857
00:48:29,953 --> 00:48:30,153
Sweet.

858
00:48:30,153 --> 00:48:31,834
Thank you.

