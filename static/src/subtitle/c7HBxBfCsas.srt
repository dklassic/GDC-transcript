1
00:00:06,556 --> 00:00:09,445
Hey everybody, welcome to Bleeding Edge Effects on mobile.

2
00:00:09,445 --> 00:00:12,716
My name is Andy Saia and I'm the Technical Director at Levelax.

3
00:00:13,765 --> 00:00:18,628
For those of you who have never heard of LevelX before, we make video games for doctors, which

4
00:00:18,628 --> 00:00:21,730
I promise you is just as weird as it sounds.

5
00:00:21,730 --> 00:00:23,712
Here's an example of some of the games we make.

6
00:00:23,712 --> 00:00:28,295
We currently have four released games on iOS and Android, and a couple more currently in

7
00:00:28,295 --> 00:00:29,196
development.

8
00:00:29,196 --> 00:00:35,580
Our games range from hyper-realistic to hyper-stylized, and each one presents its own unique visual

9
00:00:35,580 --> 00:00:36,561
effects challenges.

10
00:00:49,813 --> 00:00:52,976
Throughout the process of creating these different experiences,

11
00:00:52,976 --> 00:00:54,918
we've developed a set of common principles

12
00:00:54,918 --> 00:00:58,081
of what we think makes for an interesting effect.

13
00:00:58,081 --> 00:01:02,124
We try to make our effects dynamic, reacting to players' actions.

14
00:01:02,124 --> 00:01:06,849
We want them to be controllable, which makes them easier to reuse

15
00:01:06,849 --> 00:01:09,271
and adapt to a wide variety of different scenarios.

16
00:01:09,975 --> 00:01:12,316
We want to create environments that feel alive,

17
00:01:12,316 --> 00:01:14,837
because in many cases, the environments we are depicting

18
00:01:14,837 --> 00:01:16,837
actually are alive.

19
00:01:16,837 --> 00:01:18,438
And most importantly, after all this,

20
00:01:18,438 --> 00:01:20,478
we have to figure out how to get it to run well

21
00:01:20,478 --> 00:01:21,699
on a telephone computer.

22
00:01:21,699 --> 00:01:24,859
So in this talk, I wanted to show you

23
00:01:24,859 --> 00:01:27,680
guys what we've learned making effects like this.

24
00:01:28,375 --> 00:01:33,736
And I think the best way to do that is to look back on the last four years we've been making mobile games

25
00:01:33,736 --> 00:01:37,897
and pull out some of the techniques we seem to reach for over and over again.

26
00:01:37,897 --> 00:01:43,058
So I've chosen four techniques that I felt I could jam into a 30-minute presentation,

27
00:01:43,058 --> 00:01:47,199
and I'm going to show you an example of how we implemented each one for our game PalmX.

28
00:01:47,199 --> 00:01:53,760
The four examples I'm going to show you are dynamically rendering a mask in a UV space,

29
00:01:54,205 --> 00:02:00,374
creating blood trails and pools, create soft body deformation with a vertex shader, and

30
00:02:00,374 --> 00:02:03,979
most exciting of all, I'll show you how we made volumetric boogers.

31
00:02:04,710 --> 00:02:07,373
A brief word of warning before we get started.

32
00:02:07,373 --> 00:02:09,695
This talk is pretty technical in nature.

33
00:02:09,695 --> 00:02:13,439
I will be referring to the existence of math and shaders.

34
00:02:13,439 --> 00:02:15,661
That being said, I have tried to make this presentation

35
00:02:15,661 --> 00:02:17,783
as accessible as possible.

36
00:02:17,783 --> 00:02:22,027
With that goal in mind, I'll be releasing the Unity project

37
00:02:22,027 --> 00:02:24,209
of all the examples I'm going to show on GitHub.

38
00:02:24,209 --> 00:02:26,131
I'll put a link at the end of the presentation.

39
00:02:26,945 --> 00:02:32,468
Also worth mentioning, we do make video games for doctors, so some of you might find the

40
00:02:32,468 --> 00:02:34,508
material, um, icky.

41
00:02:34,508 --> 00:02:40,411
I'm used to it by now, but if you're not, maybe don't look for the next half hour or

42
00:02:40,411 --> 00:02:40,511
so.

43
00:02:40,511 --> 00:02:41,571
Okay, ready, let's go.

44
00:02:41,571 --> 00:02:48,254
The first technique we're going to talk about is rendering a mask into UV space.

45
00:02:48,872 --> 00:02:52,896
This tool you are seeing in this video is called an Argon Plasma Coagulator.

46
00:02:52,896 --> 00:02:58,420
This is a real thing doctors use. It's literally a plasma gun they shoot inside people's butts.

47
00:02:58,420 --> 00:03:03,024
The team was so excited when we found out this thing existed. It was one of the first

48
00:03:03,024 --> 00:03:07,808
things we tried to implement. But it brought numerous tactical challenges.

49
00:03:07,808 --> 00:03:12,192
Burnt tissue leaves marks. The burns need to work across UVs and meshes.

50
00:03:12,671 --> 00:03:17,435
Burns need to be persistent for that level. We didn't want to add decals that fade away

51
00:03:17,435 --> 00:03:22,379
after a certain period of time or anything like that. And mobile devices are limited in memory.

52
00:03:22,379 --> 00:03:28,224
Our solution was to dynamically render a low-resolution mask into UV space.

53
00:03:28,224 --> 00:03:32,928
We start, like all things in computer graphics, with a poorly UV'd model of an armadillo.

54
00:03:33,953 --> 00:03:37,456
Here we create an object with a script on it called a painter.

55
00:03:37,456 --> 00:03:40,678
The script sets three global shader parameters,

56
00:03:40,678 --> 00:03:43,901
the world space position of the painter, a hardness value,

57
00:03:43,901 --> 00:03:45,082
and a radius.

58
00:03:45,082 --> 00:03:47,184
Shader globals are great for this kind of thing

59
00:03:47,184 --> 00:03:50,606
because they easily work across meshes with the same shader.

60
00:03:52,144 --> 00:03:55,146
With these values, we can calculate a smooth falloff

61
00:03:55,146 --> 00:03:57,108
from any point on our mesh.

62
00:03:57,108 --> 00:03:59,830
Here's the simple falloff function we're using.

63
00:03:59,830 --> 00:04:01,931
And for those more visually inclined,

64
00:04:01,931 --> 00:04:04,693
here's the same function being used in Shader Graph.

65
00:04:04,693 --> 00:04:08,736
This node is also available in Unreal Material Editor.

66
00:04:08,736 --> 00:04:11,878
In our fragment shader, we use this falloff value

67
00:04:11,878 --> 00:04:13,219
to lerp two colors together.

68
00:04:15,370 --> 00:04:20,196
Okay cool, that gives us a world space falloff, but we want our mask in UV space, not world

69
00:04:20,196 --> 00:04:21,518
space.

70
00:04:21,518 --> 00:04:25,183
In a vertex shader, we can transform our world space position into UV space.

71
00:04:25,183 --> 00:04:31,310
By caching the world space position of our mesh, we can still use our falloff function,

72
00:04:31,310 --> 00:04:32,993
but this time it's rendered in UV space.

73
00:04:34,179 --> 00:04:36,220
So you can imagine taking a picture of this

74
00:04:36,220 --> 00:04:38,642
and using it as an input into your material as a mask.

75
00:04:38,642 --> 00:04:41,484
And that's exactly what we're going to tell Unity to do.

76
00:04:41,484 --> 00:04:46,127
Unity has this very powerful API called Command Buffers, which

77
00:04:46,127 --> 00:04:48,089
is perfect for this sort of thing.

78
00:04:48,089 --> 00:04:49,830
We create a new command buffer and tell

79
00:04:49,830 --> 00:04:52,592
it to render our mesh using the shader we just created.

80
00:04:52,592 --> 00:04:55,074
But instead of outputting the results to the screen,

81
00:04:55,074 --> 00:04:56,575
we store it into a render texture

82
00:04:56,575 --> 00:04:58,036
we can use later as our mask.

83
00:05:01,112 --> 00:05:05,135
Here I'm ray casting and moving the painter to any point I hit on the mesh.

84
00:05:05,135 --> 00:05:09,959
Because we aren't clearing the render texture every frame, we get this cool painting effect.

85
00:05:09,959 --> 00:05:14,322
This is also about the time you're cursing yourself for your haphazard UV unwrapping.

86
00:05:14,322 --> 00:05:17,544
There are seams everywhere, this is totally not shippable.

87
00:05:17,544 --> 00:05:21,487
We could go back and try to hide these seams, but I don't know about you, I'll do pretty

88
00:05:21,487 --> 00:05:25,130
much anything to avoid laying out proper UVs.

89
00:05:25,130 --> 00:05:29,273
To understand why we are getting these seams, let's take a closer look at a single triangle.

90
00:05:31,720 --> 00:05:36,222
The problem is caused during rasterization, which is just a fancy word for turning triangles

91
00:05:36,222 --> 00:05:37,662
into pixels.

92
00:05:37,662 --> 00:05:41,183
During rasterization, your triangle is divided up into a grid.

93
00:05:41,183 --> 00:05:42,844
Each grid has a center position.

94
00:05:42,844 --> 00:05:48,366
If the center position of the grid is inside the triangle, a pixel is drawn on that grid.

95
00:05:48,366 --> 00:05:52,947
But if the grid's center position exists outside the triangle, no pixel is drawn.

96
00:05:53,407 --> 00:05:58,148
We can clearly see we have several locations where part of the grid is inside the triangle,

97
00:05:58,148 --> 00:06:02,729
but no pixels are rendered, which is causing the seams in our UV mass.

98
00:06:02,729 --> 00:06:07,710
An easy fix for this problem would be to tell the GPU to use conservative rasterization

99
00:06:07,710 --> 00:06:11,691
so that any part of the grid that has a single triangle in it gets drawn.

100
00:06:11,691 --> 00:06:15,312
Unfortunately, this feature isn't available on many mobile devices

101
00:06:15,312 --> 00:06:17,532
and at the time wasn't an option in Unity at all.

102
00:06:17,532 --> 00:06:21,953
Our solution was to write a shader that dilates our mass texture.

103
00:06:26,587 --> 00:06:34,332
Here's how a painter looks after doing a dilation pass on our mask render texture.

104
00:06:34,332 --> 00:06:38,754
Here you can see more clearly what the dilation pass is doing to the mask.

105
00:06:38,754 --> 00:06:43,457
You do need to make sure your UVs have enough padding or else the dilation would cause the

106
00:06:43,457 --> 00:06:45,398
UVs to overlap and you'll get artifacts.

107
00:06:46,797 --> 00:06:48,579
The dilation shader is pretty simple.

108
00:06:48,579 --> 00:06:51,722
Every pixel in the mass texture overrides its color

109
00:06:51,722 --> 00:06:54,644
if it has any neighbors of a higher value than itself.

110
00:06:54,644 --> 00:06:58,308
To use this, we add a line to our command buffer,

111
00:06:58,308 --> 00:07:00,109
telling it to render our mass texture

112
00:07:00,109 --> 00:07:02,752
into a dilation texture using our dilation shader.

113
00:07:05,960 --> 00:07:08,561
OK, so now that we've rendered into UV space,

114
00:07:08,561 --> 00:07:12,062
let's take a look at how we created blood trails and pools.

115
00:07:12,062 --> 00:07:15,764
From a design point of view, we wanted any surface in the game

116
00:07:15,764 --> 00:07:18,845
to be able to bleed if it got hit by a sharp object.

117
00:07:18,845 --> 00:07:21,767
Blood will flow out of the wound based on gravity,

118
00:07:21,767 --> 00:07:23,127
leaving a trail behind it.

119
00:07:23,127 --> 00:07:27,169
Blood will start to pool and group based on gravity.

120
00:07:27,169 --> 00:07:30,831
These blood pools will grow and start to damage the patient.

121
00:07:30,831 --> 00:07:32,912
And blood can be washed away with water

122
00:07:32,912 --> 00:07:34,032
or removed by suction.

123
00:07:35,072 --> 00:07:40,297
The dynamic mask system we just went over actually gives us a pretty good foundation for this effect.

124
00:07:40,297 --> 00:07:44,701
First we'll extend it so it can dynamically erase parts of our mask.

125
00:07:44,701 --> 00:07:48,644
Turns out that's actually not that hard to do.

126
00:07:48,644 --> 00:07:54,129
You can set the blend operation in the shader to be controlled with a variable.

127
00:07:54,129 --> 00:07:59,234
And we write a simple script to set that blend operation from add to subtractive.

128
00:07:59,234 --> 00:08:02,557
Okay, so that's removing. What about pooling blood?

129
00:08:04,519 --> 00:08:06,620
To get the effect of blood pooling over time,

130
00:08:06,620 --> 00:08:09,181
we multiply our mask by a value just over 1.

131
00:08:09,181 --> 00:08:12,862
The shader that does the multiplication is super simple.

132
00:08:12,862 --> 00:08:15,504
It just reads the value of the mask texture

133
00:08:15,504 --> 00:08:17,804
and multiplies it by a number slightly above 1.

134
00:08:17,804 --> 00:08:20,846
This will have the effect of slowly increasing

135
00:08:20,846 --> 00:08:24,547
areas that have blood while keeping areas

136
00:08:24,547 --> 00:08:26,028
that have no blood the same.

137
00:08:27,035 --> 00:08:29,516
We want to apply this multiplication once a frame,

138
00:08:29,516 --> 00:08:31,917
but reading and writing from the same render texture

139
00:08:31,917 --> 00:08:35,619
is super slow, so we use a technique called ping-ponging.

140
00:08:35,619 --> 00:08:38,741
Texture ping-ponging works by creating two render textures.

141
00:08:38,741 --> 00:08:41,222
The first render texture we write into

142
00:08:41,222 --> 00:08:44,003
using our dynamic mass shader just as before.

143
00:08:44,003 --> 00:08:48,366
We then use the first texture to write into the second texture

144
00:08:48,366 --> 00:08:49,786
using our multiplication shader.

145
00:08:49,786 --> 00:08:52,568
We can then alternate which texture

146
00:08:52,568 --> 00:08:54,969
gets written into the other each frame,

147
00:08:54,969 --> 00:08:56,290
ping-ponging back and forth.

148
00:08:58,726 --> 00:09:01,328
This can be pretty confusing the first time you hear about it,

149
00:09:01,328 --> 00:09:03,670
so let's break it down even more.

150
00:09:03,670 --> 00:09:06,232
RT1 is our mass texture, which we

151
00:09:06,232 --> 00:09:10,816
use to blit into RT2, applying a multiplication of 1.2.

152
00:09:10,816 --> 00:09:13,358
Next frame, we flip them.

153
00:09:13,358 --> 00:09:15,960
So RT2 is our mass texture, which

154
00:09:15,960 --> 00:09:18,061
we use to blit into RT1, applying

155
00:09:18,061 --> 00:09:20,383
the same multiplication.

156
00:09:20,383 --> 00:09:23,546
We always apply the dilation to the last texture written into.

157
00:09:23,546 --> 00:09:26,908
This is the render texture we use later for our mask.

158
00:09:30,190 --> 00:09:33,193
Another interesting thing is setting your multiplication

159
00:09:33,193 --> 00:09:34,214
value less than 1.

160
00:09:34,214 --> 00:09:37,997
Something like 0.98 produces this cool fade out effect.

161
00:09:37,997 --> 00:09:44,823
And this is what removing part of the mass looks like in game.

162
00:09:44,823 --> 00:09:47,085
We're ray casting to place a painter on the surface

163
00:09:47,085 --> 00:09:50,888
when the water jet is active, just like in our painting demo.

164
00:09:50,888 --> 00:09:53,390
We also use a cavity map to make the blood look like it's

165
00:09:53,390 --> 00:09:54,631
filling in the cracks more.

166
00:10:00,508 --> 00:10:04,255
For flowing blood, we attach painters to physics objects.

167
00:10:04,255 --> 00:10:06,318
It's amazing how simple primitive physics objects

168
00:10:06,318 --> 00:10:07,981
can add a ton of variety to something like this.

169
00:10:07,981 --> 00:10:09,303
And this is what it looks like inside the editor.

170
00:10:18,338 --> 00:10:19,978
One problem we had with this approach

171
00:10:19,978 --> 00:10:21,979
is players would section the trail of blood,

172
00:10:21,979 --> 00:10:24,039
but not treat the source of the wound itself.

173
00:10:24,039 --> 00:10:26,700
So they would still be receiving damage,

174
00:10:26,700 --> 00:10:28,681
even though it looked like the blood was gone.

175
00:10:28,681 --> 00:10:31,361
To fix this, we had physics objects

176
00:10:31,361 --> 00:10:34,482
record their locations every frame to create a path.

177
00:10:34,482 --> 00:10:36,663
We would then sweep a painter along that path

178
00:10:36,663 --> 00:10:38,823
to indicate to the player blood was still

179
00:10:38,823 --> 00:10:40,684
flowing out of the wound.

180
00:10:40,684 --> 00:10:42,884
This was one of those things that when it was suggested,

181
00:10:42,884 --> 00:10:44,425
I never thought it was going to work,

182
00:10:44,425 --> 00:10:46,325
but it actually ended up working really well.

183
00:10:48,848 --> 00:10:54,870
So after fluid simulation, the next notoriously difficult thing to do in games is soft body physics.

184
00:10:54,870 --> 00:11:00,391
For tissue deformation, we really wanted to make the world feel alive and reactive.

185
00:11:00,391 --> 00:11:04,793
You should be able to grab, pinch, and pull the tissue in any location.

186
00:11:04,793 --> 00:11:08,954
And based on the interviews we had with our physician advisors,

187
00:11:08,954 --> 00:11:14,516
you can actually see the heart beat and deform the tissue more on the left side of the patient than the right,

188
00:11:14,516 --> 00:11:16,397
which becomes important when navigating.

189
00:11:17,785 --> 00:11:21,388
To accomplish all this, we decided to use a vertex shader.

190
00:11:21,388 --> 00:11:26,012
First, we created a script we called a manipulator.

191
00:11:26,012 --> 00:11:28,914
The manipulator has a reference to two transforms,

192
00:11:28,914 --> 00:11:30,695
which we call an anchor and a handle.

193
00:11:30,695 --> 00:11:36,780
Next, we calculate a transformation matrix

194
00:11:36,780 --> 00:11:40,302
that, when applied, moves a position from the anchor space

195
00:11:40,302 --> 00:11:41,503
to the handle space.

196
00:11:42,673 --> 00:11:44,154
In the vertex shader, we can just

197
00:11:44,154 --> 00:11:46,796
multiply that matrix with the vertex position

198
00:11:46,796 --> 00:11:48,597
and move our mesh around with our handle.

199
00:11:48,597 --> 00:11:51,359
You can think of this like mesh skidding

200
00:11:51,359 --> 00:11:54,201
if you only had one bone with 100% influence.

201
00:11:54,201 --> 00:12:00,885
Instead of deforming the entire mesh with our handle,

202
00:12:00,885 --> 00:12:03,227
we can use the same world space mass technique

203
00:12:03,227 --> 00:12:05,329
I showed you earlier to create a smooth falloff

204
00:12:05,329 --> 00:12:06,669
for our deformation.

205
00:12:07,387 --> 00:12:12,853
all we need to do is pass in our manipulator's position, radius, and hardness value,

206
00:12:12,853 --> 00:12:17,197
and we can use the same exact sphere mask function we used earlier.

207
00:12:17,197 --> 00:12:23,704
Then, we just use that falloff value in a lerp from the original vertex position

208
00:12:23,704 --> 00:12:25,826
to the position after the matrix multiplication.

209
00:12:32,330 --> 00:12:36,654
This is already kind of awesome, but you might notice the lighting looks a little bit off.

210
00:12:36,654 --> 00:12:40,658
This is because our normals aren't being recalculated after changing the vertex position.

211
00:12:40,658 --> 00:12:48,105
To recalculate the normals, we are going to call our applyManipulator function two additional times.

212
00:12:48,105 --> 00:12:53,150
Once with our vertex position slightly offset in the direction of the mesh's tangent,

213
00:12:53,150 --> 00:12:57,154
and the other with the position offset in the direction of the mesh's bitangent.

214
00:12:57,513 --> 00:12:59,494
we can use these two new positions

215
00:12:59,494 --> 00:13:03,676
to calculate the manipulated tangent and bitangent vectors,

216
00:13:03,676 --> 00:13:05,136
which when we cross together,

217
00:13:05,136 --> 00:13:07,817
gives us our corrected world normal.

218
00:13:07,817 --> 00:13:12,539
Just multiplying by a matrix works great

219
00:13:12,539 --> 00:13:14,139
if you aren't rotating too much.

220
00:13:14,139 --> 00:13:16,120
This is actually what we ended up shipping with

221
00:13:16,120 --> 00:13:16,860
for a game Palm X.

222
00:13:16,860 --> 00:13:20,141
But if you do end up rotating a lot,

223
00:13:20,141 --> 00:13:22,382
you get this really ugly pinch artifact.

224
00:13:23,039 --> 00:13:29,701
This is because we're applying a linear falloff to our matrix and rotations aren't linear.

225
00:13:29,701 --> 00:13:35,362
The solution is to separate out the rotation, translation, and scale components and handle

226
00:13:35,362 --> 00:13:38,643
the falloff for them all individually.

227
00:13:38,643 --> 00:13:40,103
Translation is the easiest.

228
00:13:40,103 --> 00:13:44,524
We just subtract our handle's rotation with our anchor's position.

229
00:13:44,524 --> 00:13:47,825
For scale, we divide our handle's scale and our anchor's scale.

230
00:13:48,921 --> 00:13:52,082
For rotation, we convert our rotation to angle axis

231
00:13:52,082 --> 00:13:54,343
and multiply them together.

232
00:13:54,343 --> 00:13:57,424
Now on the GPU, we can apply each transformation

233
00:13:57,424 --> 00:14:06,327
with falloff separately and sum them together at the end.

234
00:14:06,327 --> 00:14:08,508
Here's the rotate about axis method we're using

235
00:14:08,508 --> 00:14:09,988
if you're curious about it.

236
00:14:09,988 --> 00:14:11,969
It applies a rotation to a position

237
00:14:11,969 --> 00:14:14,029
given an angle and an axis.

238
00:14:14,029 --> 00:14:16,830
This is also available as a node in Shader Graph.

239
00:14:19,630 --> 00:14:26,474
And here's what the corrected rotations look like.

240
00:14:26,474 --> 00:14:30,036
One manipulator is fun, but multiple manipulators is a party.

241
00:14:30,036 --> 00:14:33,639
You can really do some cool stuff with more than one of them.

242
00:14:33,639 --> 00:14:36,860
To do this, we'll send all the manipulator parameters

243
00:14:36,860 --> 00:14:39,322
as arrays of floats and vectors to the shader.

244
00:14:39,322 --> 00:14:43,004
We'll modify our apply manipulator function

245
00:14:43,004 --> 00:14:44,765
to loop through all the manipulators.

246
00:14:45,439 --> 00:14:49,742
In the loop, we'll add the amount each manipulator displaces each vert by.

247
00:14:49,742 --> 00:14:57,169
We can then add that total displacement to the position after the loop.

248
00:14:57,169 --> 00:15:01,593
And of course, we need to attach physics objects to these things.

249
00:15:01,593 --> 00:15:04,876
You can get some pretty convincingly volume-preserving effects

250
00:15:04,876 --> 00:15:08,279
just by connecting a bunch of rigid bodies together with constraints.

251
00:15:19,628 --> 00:15:24,872
You could do that previous example with bones, and honestly, you would probably have better control over it.

252
00:15:24,872 --> 00:15:29,355
But where this effect really shines is attaching manipulators dynamically.

253
00:15:29,355 --> 00:15:36,200
In this example, we are adding a manipulator at the position the raycast hits, and then dragging the handle around the code.

254
00:15:36,200 --> 00:15:44,926
Something like this would work great for a loading screen, or a little vignette before you started the game.

255
00:15:49,109 --> 00:15:51,031
I don't know, just a random idea.

256
00:15:51,031 --> 00:15:55,755
Or if you're making a doctor on doctor fighting game,

257
00:15:55,755 --> 00:15:58,678
you could use the manipulator to add hit reacts.

258
00:15:58,678 --> 00:16:00,920
What's really cool about this is it

259
00:16:00,920 --> 00:16:03,843
works across any animation and any character.

260
00:16:03,843 --> 00:16:09,988
They just need to have the same material and shaders applied.

261
00:16:09,988 --> 00:16:12,811
And even if I take the reaction animation off,

262
00:16:12,811 --> 00:16:15,613
you can still feel the impact from just the manipulator.

263
00:16:19,145 --> 00:16:28,030
One thing to keep in mind when you're working with something like this is because it's a world space fall off, it doesn't respect any sort of information about connectivity.

264
00:16:28,030 --> 00:16:35,654
So if a leg is very close to another leg, you're going to get that manipulated influence, which probably isn't what you want.

265
00:16:35,654 --> 00:16:44,538
Depending on your use cases and your mesh, this might not be a problem, or you might want to consider implementing a mask or some other system.

266
00:16:44,538 --> 00:16:46,479
But at a certain point.

267
00:16:46,739 --> 00:16:52,002
you're probably better off just implementing regular skinning.

268
00:16:52,002 --> 00:17:01,846
And here's what the heartbeat ended up looking like in game.

269
00:17:01,846 --> 00:17:05,588
And this is what it looks like in the Unity editor.

270
00:17:05,588 --> 00:17:09,110
We have these gizmos where we can place these manipulators around

271
00:17:09,110 --> 00:17:12,291
and scale and animate them and transform them just like any other game object.

272
00:17:15,772 --> 00:17:21,036
And here we're just scaling a manipulator to get that pinch effect.

273
00:17:21,036 --> 00:17:29,324
If you're interested in implementing something like this,

274
00:17:29,324 --> 00:17:32,948
I highly recommend checking out the Sculpting and Simulating

275
00:17:32,948 --> 00:17:36,191
with 6 Degrees of Freedom controllers on the GDC4ALL.

276
00:17:36,191 --> 00:17:39,313
David goes into a lot more detail than I had time to today.

277
00:17:39,622 --> 00:17:43,165
and he extends this technique using something called Calvinlitz,

278
00:17:43,165 --> 00:17:49,610
which creates a much more physically believable result.

279
00:17:49,610 --> 00:17:54,653
Okay, our last and clearly most important effect I wanted to show you today,

280
00:17:54,653 --> 00:17:56,114
volumetric boogers.

281
00:17:56,114 --> 00:17:58,936
In terms of design requirements,

282
00:17:58,936 --> 00:18:01,158
we wanted to create a sense of discovery and

283
00:18:01,158 --> 00:18:04,420
exploration by hiding complications from plain sight.

284
00:18:05,415 --> 00:18:07,416
We wanted the boogers to be interactive,

285
00:18:07,416 --> 00:18:08,978
so you can push them around

286
00:18:08,978 --> 00:18:10,699
and use your suction tool to remove them.

287
00:18:10,699 --> 00:18:14,462
We also wanted to be able to attach these objects

288
00:18:14,462 --> 00:18:16,664
to anatomy and other things.

289
00:18:16,664 --> 00:18:19,886
And honestly, we just really wanted to make boogers.

290
00:18:19,886 --> 00:18:21,568
The boogers are implemented

291
00:18:21,568 --> 00:18:24,430
using SphereTraceSineDistance functions.

292
00:18:24,430 --> 00:18:28,573
The first time I heard about SineDistance functions,

293
00:18:28,573 --> 00:18:31,776
I was like, I know what all those words mean individually,

294
00:18:31,776 --> 00:18:33,718
but I have no idea what they mean together.

295
00:18:34,115 --> 00:18:36,376
So let's break down each part.

296
00:18:36,376 --> 00:18:40,178
First of all, it's literally a function you call in a shader.

297
00:18:40,178 --> 00:18:42,820
You can pass any position into this function,

298
00:18:42,820 --> 00:18:46,102
and it will return the closest distance to a surface.

299
00:18:46,102 --> 00:18:48,283
It's a way of asking, how far do I

300
00:18:48,283 --> 00:18:51,045
need to travel to get to the surface of something?

301
00:18:51,045 --> 00:18:55,347
And the sine part means if the position is inside the surface,

302
00:18:55,347 --> 00:18:56,888
it returns negative.

303
00:18:56,888 --> 00:18:59,990
So you can easily detect if you're inside of something.

304
00:19:02,084 --> 00:19:04,526
One of the most powerful properties of sine distance

305
00:19:04,526 --> 00:19:07,588
functions is you can easily blend objects together.

306
00:19:07,588 --> 00:19:10,771
This method of combining sine distance functions

307
00:19:10,771 --> 00:19:12,092
is called smoothman.

308
00:19:12,092 --> 00:19:15,954
Typically, when you're working with sine distance functions,

309
00:19:15,954 --> 00:19:18,536
you are building things out of simple primitives.

310
00:19:18,536 --> 00:19:21,038
The good news is there's a large library

311
00:19:21,038 --> 00:19:23,480
of these primitive functions that people have already

312
00:19:23,480 --> 00:19:26,862
written and hosted online for pretty much any primitive.

313
00:19:26,862 --> 00:19:29,204
And by combining these primitives together,

314
00:19:29,204 --> 00:19:31,446
you can create some really complicated objects.

315
00:19:32,091 --> 00:19:35,053
Our boogers are made out of only spheres and cylinders.

316
00:19:35,053 --> 00:19:38,816
To render sine distance functions,

317
00:19:38,816 --> 00:19:41,918
we use a technique called sphere tracing.

318
00:19:41,918 --> 00:19:44,100
Sphere tracing is a screen space technique,

319
00:19:44,100 --> 00:19:47,663
meaning for every pixel we shoot out a ray.

320
00:19:47,663 --> 00:19:49,684
We then march along that ray using

321
00:19:49,684 --> 00:19:51,505
the distance to the closest surface

322
00:19:51,505 --> 00:19:52,927
as our minimum step size.

323
00:19:54,202 --> 00:19:57,123
When the distance to the closest surface is small enough,

324
00:19:57,123 --> 00:19:59,665
you can set the color of the corresponding pixel

325
00:19:59,665 --> 00:20:04,968
in the screen to the color of the object you are closest to.

326
00:20:04,968 --> 00:20:06,809
I know I'm going kind of fast through this,

327
00:20:06,809 --> 00:20:09,671
but there's actually a ton of information online

328
00:20:09,671 --> 00:20:13,353
on sphere marching sign distance fields in Unity.

329
00:20:13,353 --> 00:20:14,193
So if you're lost,

330
00:20:14,193 --> 00:20:16,535
here are a bunch of resources that you can check out.

331
00:20:19,008 --> 00:20:22,110
OK, so we have a brief overview on sine distance functions

332
00:20:22,110 --> 00:20:23,251
and sphere tracing.

333
00:20:23,251 --> 00:20:25,832
Let's break down each step to make a booger.

334
00:20:25,832 --> 00:20:30,755
We start by rendering sine distance function spheres

335
00:20:30,755 --> 00:20:32,457
into a low resolution render texture.

336
00:20:32,457 --> 00:20:37,440
We then blur that render texture to remove any artifacts

337
00:20:37,440 --> 00:20:39,981
due to the low resolution.

338
00:20:39,981 --> 00:20:42,223
We then introduce transparency.

339
00:20:42,223 --> 00:20:46,105
We connect the sine distance cylinders

340
00:20:46,105 --> 00:20:48,887
to our neighboring booger blobs.

341
00:20:52,353 --> 00:20:58,398
We do a smoothman operation to blend the whole thing together.

342
00:20:58,398 --> 00:21:05,043
We add refraction and distortion.

343
00:21:05,043 --> 00:21:11,508
We distort the normals using a 3D noise function.

344
00:21:11,508 --> 00:21:14,410
And here, we're using the same smoothman technique

345
00:21:14,410 --> 00:21:18,253
to blend our SDFs with the depth buffer, which really

346
00:21:18,253 --> 00:21:20,075
sells the effect of these objects having

347
00:21:20,075 --> 00:21:21,436
some sort of surface tension.

348
00:21:27,732 --> 00:21:32,976
And you should have guessed by now, we're definitely going to add physics to these things.

349
00:21:32,976 --> 00:21:38,240
I think every game needs bouncy boogers.

350
00:21:38,240 --> 00:21:42,884
And here we're attaching a booger to a nail an unfortunate patient has swallowed.

351
00:21:42,884 --> 00:21:53,812
The booger here is just attached with a spring physics object.

352
00:21:53,812 --> 00:21:54,813
It's super simple.

353
00:22:01,853 --> 00:22:05,254
And here's an example of hiding a foreign object behind the boogers.

354
00:22:05,254 --> 00:22:23,099
I think this is my favorite case.

355
00:22:23,099 --> 00:22:28,700
Okay, so that's the four techniques I wanted to go over.

356
00:22:28,700 --> 00:22:30,961
Let's review what we learned on this journey together.

357
00:22:32,462 --> 00:22:35,703
You can use world space falloff functions

358
00:22:35,703 --> 00:22:38,104
to create very controllable effects

359
00:22:38,104 --> 00:22:40,626
by attaching these falloffs to different objects in your game.

360
00:22:40,626 --> 00:22:44,027
We learned how to render into UV space

361
00:22:44,027 --> 00:22:46,789
and avoid seams by running a dilation pass.

362
00:22:46,789 --> 00:22:50,510
We learned how to make a simple simulation

363
00:22:50,510 --> 00:22:53,812
by ping-ponging two render textures with each other.

364
00:22:53,812 --> 00:22:56,493
We saw how adding physics improves pretty much

365
00:22:56,493 --> 00:22:59,015
any effect, making it more dynamic and alive.

366
00:23:00,097 --> 00:23:01,818
And in case you didn't already know,

367
00:23:01,818 --> 00:23:05,380
we were reminded to never swallow a nail.

368
00:23:05,380 --> 00:23:07,121
I wanted to thank everyone at LevelX

369
00:23:07,121 --> 00:23:08,983
for helping with this talk, especially

370
00:23:08,983 --> 00:23:11,905
these folks who were instrumental in implementing

371
00:23:11,905 --> 00:23:15,127
several of the facts I showed today.

372
00:23:15,127 --> 00:23:18,409
We were also hiring, so if anything I showed you today

373
00:23:18,409 --> 00:23:21,431
inspired you, you thought this looked fun, you want to help,

374
00:23:21,431 --> 00:23:25,554
maybe make the next generation volumetric boogers,

375
00:23:25,554 --> 00:23:27,796
we're always looking for that kind of thing.

376
00:23:30,843 --> 00:23:33,626
And remember, all the source code is posted on GitHub,

377
00:23:33,626 --> 00:23:35,087
but if you have any questions,

378
00:23:35,087 --> 00:23:38,531
feel free to reach out to me on Twitter or send me an email.

379
00:23:38,531 --> 00:23:39,852
Thanks so much.

