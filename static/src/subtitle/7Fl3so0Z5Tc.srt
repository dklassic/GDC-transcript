1
00:00:03,876 --> 00:00:07,678
Hi everyone, my name is Jonathan Lindquist and today we'll be talking about some of the

2
00:00:07,678 --> 00:00:11,819
challenges that we ran into on Fortnite and how we came up with elegant solutions using

3
00:00:11,819 --> 00:00:13,920
vertex shaders.

4
00:00:13,920 --> 00:00:18,062
So I'm a technical artist at Epic Games and I tend to author a lot of shaders and generate

5
00:00:18,062 --> 00:00:21,583
art, write scripts that are both online and offline, jump around a bit.

6
00:00:21,583 --> 00:00:27,146
And before that I worked at Raven Software as a technical artist for three years.

7
00:00:28,357 --> 00:00:31,360
So for anyone that's not familiar with the project,

8
00:00:31,360 --> 00:00:34,382
Fortnite is a cooperative action game with a building mechanic

9
00:00:34,382 --> 00:00:34,782
as its focus.

10
00:00:34,782 --> 00:00:38,325
And I put a quick video together to illustrate

11
00:00:38,325 --> 00:00:41,468
some of the effects that we'll be talking about today.

12
00:00:41,468 --> 00:00:45,631
So this is the building shader.

13
00:00:45,631 --> 00:00:49,234
It's used to build over hundreds and hundreds of pieces,

14
00:00:49,234 --> 00:00:51,116
each containing hundreds of sub-objects.

15
00:00:51,116 --> 00:00:53,638
This is our calling effect in the game.

16
00:00:55,527 --> 00:00:56,909
And this is a bounce effect that we apply to every interaction

17
00:00:56,909 --> 00:00:57,790
that the player makes with the world.

18
00:00:57,790 --> 00:00:58,671
So going through those, we'll start off

19
00:00:58,671 --> 00:00:59,491
with a very simple example and then

20
00:00:59,491 --> 00:01:01,013
move our way toward the self-building shader, which

21
00:01:01,013 --> 00:01:01,674
is a bit more complicated.

22
00:01:14,157 --> 00:01:17,280
Early on in the project, when we decided to go down a stylized path,

23
00:01:17,280 --> 00:01:20,242
we wanted damage to be equally stylized.

24
00:01:20,242 --> 00:01:24,905
So we also wanted to make it very rewarding for the player,

25
00:01:24,905 --> 00:01:29,969
because it's one of the main, it's a piece of the foundation of the game.

26
00:01:29,969 --> 00:01:36,214
So having tried out fractured meshes and decals and a few other approaches,

27
00:01:36,214 --> 00:01:39,696
we just felt like none of the approaches were really

28
00:01:41,410 --> 00:01:44,216
reaching the look that we wanted.

29
00:01:44,216 --> 00:01:46,922
So this video was sent out to the team as an early test.

30
00:01:46,922 --> 00:01:51,532
And we decided to go down this path and kind of.

31
00:01:52,287 --> 00:01:55,670
incorporate vertex shaders into more of our effects in the future.

32
00:01:55,670 --> 00:01:59,133
So when examining how this works, we have to look at two components.

33
00:01:59,133 --> 00:02:06,178
First, a portion of the process is handled on the gameplay code side,

34
00:02:06,178 --> 00:02:10,581
and then a process is handled in the vertex shader itself.

35
00:02:10,581 --> 00:02:14,765
So first, gameplay code feeds the shader an impact location,

36
00:02:14,765 --> 00:02:17,987
an impact vector, and a jiggle radius.

37
00:02:19,540 --> 00:02:23,281
So using that information, we're able to find the distance

38
00:02:23,281 --> 00:02:27,003
of the world position of every single vertice on the mesh

39
00:02:27,003 --> 00:02:30,284
and the world position that gameplay code fed us.

40
00:02:30,284 --> 00:02:34,265
And then we divide it by the radius and invert it.

41
00:02:34,265 --> 00:02:36,646
And it produces a result like this.

42
00:02:36,646 --> 00:02:39,886
And then we multiply it by an impact vector.

43
00:02:39,886 --> 00:02:42,187
And what that does is it basically

44
00:02:42,187 --> 00:02:44,328
masks an additive offset to the world

45
00:02:44,328 --> 00:02:45,748
position of every vertice.

46
00:02:46,510 --> 00:02:49,875
And it produces a result like what you see here.

47
00:02:52,100 --> 00:02:55,040
It makes the object jiggle back and forth.

48
00:02:55,040 --> 00:02:58,061
And this can be applied to any asset in the game, fire hydrant, wall,

49
00:02:58,061 --> 00:02:58,601
whatever.

50
00:02:58,601 --> 00:03:03,202
So the missing component from the animation that we see here

51
00:03:03,202 --> 00:03:05,223
is the actual animation itself.

52
00:03:05,223 --> 00:03:09,043
And that's generated using a curve object, which is a feature in UE4.

53
00:03:09,043 --> 00:03:13,524
Or say you're able to define a spline, and that spline

54
00:03:13,524 --> 00:03:19,986
can be sampled over time by either gameplay code or Kismet code.

55
00:03:21,860 --> 00:03:25,762
So as the value becomes negative in the spline,

56
00:03:25,762 --> 00:03:30,145
the impact vector is multiplied by that negative value.

57
00:03:30,145 --> 00:03:32,867
And the wall moves away from the player.

58
00:03:32,867 --> 00:03:37,429
And then as it becomes positive, it moves towards the player.

59
00:03:37,429 --> 00:03:40,511
So you get this undulation back and forth.

60
00:03:40,511 --> 00:03:43,853
Now we can talk about the stylized calling.

61
00:03:45,391 --> 00:03:48,372
We wanted the player to be able to explore the world,

62
00:03:48,372 --> 00:03:51,914
and we wanted to populate the world with as many assets

63
00:03:51,914 --> 00:03:52,975
as we possibly could.

64
00:03:52,975 --> 00:03:54,576
So we needed a calling operation.

65
00:03:55,596 --> 00:03:58,098
And I felt like this was another chance, again,

66
00:03:58,098 --> 00:04:00,240
to add this stylization to the world.

67
00:04:00,240 --> 00:04:04,303
So this is our first prototype approach

68
00:04:04,303 --> 00:04:06,404
that we didn't end up using because it became a little bit

69
00:04:06,404 --> 00:04:08,146
too obnoxious for the player.

70
00:04:08,146 --> 00:04:11,869
But we ended up learning from that lesson,

71
00:04:11,869 --> 00:04:13,910
and we applied it to the approach

72
00:04:13,910 --> 00:04:16,592
that we eventually came up with, which is basically

73
00:04:16,592 --> 00:04:20,295
a scale operation from the pivot point of the model.

74
00:04:21,740 --> 00:04:25,865
And we do this inside the vertex shader because updating the model's transform would actually

75
00:04:25,865 --> 00:04:26,626
be rather expensive.

76
00:04:26,626 --> 00:04:29,790
We'd have to update every model on tick.

77
00:04:29,790 --> 00:04:31,633
Here we can just feed...

78
00:04:32,907 --> 00:04:37,490
feed a value into the shader called the distance call fade,

79
00:04:37,490 --> 00:04:42,214
which is another UE4 feature, that will animate from 0 to 1

80
00:04:42,214 --> 00:04:44,035
when the object is being called.

81
00:04:44,035 --> 00:04:47,438
So just before the object disappears,

82
00:04:47,438 --> 00:04:49,500
this value just animates.

83
00:04:49,500 --> 00:04:52,222
And you can see that here, this graph

84
00:04:52,222 --> 00:04:54,984
represents the 0 to 1 value.

85
00:04:57,156 --> 00:04:58,838
So it's great, we have this zero to one value,

86
00:04:58,838 --> 00:05:00,320
but now what do we do with it?

87
00:05:00,320 --> 00:05:04,205
Well, we have to create, we can use that zero to one value

88
00:05:04,205 --> 00:05:05,627
to modulate the scale operation.

89
00:05:05,627 --> 00:05:11,896
To scale an asset, you just subtract the world position

90
00:05:11,896 --> 00:05:15,160
of the vertices from the actor's pivot point.

91
00:05:16,255 --> 00:05:17,756
Doing so will create a vector that's

92
00:05:17,756 --> 00:05:21,237
the length of the distance between the two points.

93
00:05:21,237 --> 00:05:24,838
So if you add that to the world position of the vertices,

94
00:05:24,838 --> 00:05:28,019
then basically you'll pull all of the points on the mesh

95
00:05:28,019 --> 00:05:30,520
into a single point.

96
00:05:30,520 --> 00:05:34,061
So modulating that by 0 to 1 value

97
00:05:34,061 --> 00:05:39,103
will scale the model from 0 to 1.

98
00:05:39,103 --> 00:05:42,824
We use another node here called three point levels, which

99
00:05:42,824 --> 00:05:45,785
basically remaps the black point, the white point.

100
00:05:45,980 --> 00:05:49,461
and a midpoint to whatever values you want.

101
00:05:49,461 --> 00:05:55,024
So here you can see the original values retrieved from this node

102
00:05:55,024 --> 00:05:55,585
are 0 to 1.

103
00:05:55,585 --> 00:05:57,706
But after we're done processing it,

104
00:05:57,706 --> 00:06:03,549
it becomes 1 to negative 0.25, and then to 0,

105
00:06:03,549 --> 00:06:06,210
which will effectively create a bounce.

106
00:06:06,210 --> 00:06:09,072
So it'll scale up and then scale back to 1.

107
00:06:09,072 --> 00:06:13,494
So now we'll go on to something a little bit more complicated.

108
00:06:14,752 --> 00:06:19,834
The self-building walls represents a significant portion of the game as well.

109
00:06:19,834 --> 00:06:29,938
We want to, we have, we allow the player to build staircases, floors, and other type of structures using this animation technique.

110
00:06:29,938 --> 00:06:34,080
So, from the beginning we set out a few goals for ourselves.

111
00:06:34,080 --> 00:06:40,563
We wanted it to be an engaging experience, so we thought the best way to achieve that would be to

112
00:06:40,903 --> 00:06:44,265
build the structures in-game in front of the player so they could see every single

113
00:06:44,265 --> 00:06:47,467
board or brick or piece of metal flying to place.

114
00:06:47,467 --> 00:06:51,209
And then we wanted to indicate the health of the structure.

115
00:06:51,209 --> 00:06:55,452
So when a monster comes by and hits the wall, we want several boards to fly off

116
00:06:55,452 --> 00:07:01,295
and we want the number of boards to indicate how much health the wall has.

117
00:07:01,295 --> 00:07:04,237
And this had to be an efficient system because we...

118
00:07:06,558 --> 00:07:09,660
we needed to place hundreds and hundreds of these walls everywhere.

119
00:07:09,660 --> 00:07:13,942
So, first we need to approach the problem from a conceptual standpoint.

120
00:07:13,942 --> 00:07:21,346
And we understood that building a wall in place is much like destroying it, but in reverse.

121
00:07:21,346 --> 00:07:24,788
So, if you can see in this video, we have a pre-constructed wall,

122
00:07:24,788 --> 00:07:27,570
and then we're tearing all the boards off, one by one.

123
00:07:27,570 --> 00:07:31,612
And this is the way that we need to approach the problem.

124
00:07:33,942 --> 00:07:36,782
The issue is how to actually do that.

125
00:07:36,782 --> 00:07:39,283
So initially, an artist attempted

126
00:07:39,283 --> 00:07:47,265
to use skeletal animations, but they were too costly.

127
00:07:47,265 --> 00:07:48,965
So we went back to vertex shaders.

128
00:07:48,965 --> 00:07:55,306
The problem was that we had no way of actually accessing

129
00:07:55,306 --> 00:07:57,027
a board or a sub-object in a mesh.

130
00:07:57,027 --> 00:08:00,888
And when you're working.

131
00:08:02,397 --> 00:08:05,698
with a vertex shader you have access to the

132
00:08:05,698 --> 00:08:07,179
uh... location of the vertices

133
00:08:07,179 --> 00:08:09,779
uh... the models transforms

134
00:08:09,779 --> 00:08:12,120
but you don't have access to

135
00:08:12,120 --> 00:08:13,220
uh... sub-objects

136
00:08:13,220 --> 00:08:13,901
transforms

137
00:08:13,901 --> 00:08:20,022
and you can't store arbitrary data in the objects themselves

138
00:08:20,022 --> 00:08:22,123
so we relied on

139
00:08:22,123 --> 00:08:23,683
some of the uh...

140
00:08:24,533 --> 00:08:29,181
work that I did a little bit earlier to pretty much do the exact same thing.

141
00:08:29,181 --> 00:08:30,904
Basically,

142
00:08:30,904 --> 00:08:33,569
store arbitrary information in vertices.

143
00:08:33,569 --> 00:08:35,132
In this video,

144
00:08:35,132 --> 00:08:37,256
you can see that

145
00:08:39,691 --> 00:08:44,373
This model is a static mesh, and it's animated with vertex shaders.

146
00:08:44,373 --> 00:08:48,954
And the grass is actually made up of only a few static meshes themselves,

147
00:08:48,954 --> 00:08:56,237
but they act as many separate objects in the vertex shader.

148
00:08:56,237 --> 00:09:00,779
And that's due to the script providing data that we need,

149
00:09:00,779 --> 00:09:03,580
and the vertex shader using that data in animation.

150
00:09:03,580 --> 00:09:07,401
And the script is publicly available for anyone that's interested.

151
00:09:10,615 --> 00:09:13,479
So now we know that we need to do some scripting in order

152
00:09:13,479 --> 00:09:15,902
to make this effect work in the vertex shader.

153
00:09:15,902 --> 00:09:16,944
So we'll first step into that.

154
00:09:16,944 --> 00:09:20,208
Then we'll step into ripping the boards off the wall.

155
00:09:20,208 --> 00:09:23,192
And then we'll talk about how gameplay actually

156
00:09:23,192 --> 00:09:24,053
controls the boards.

157
00:09:27,018 --> 00:09:30,779
So this is the overall workflow of making animated assets

158
00:09:30,779 --> 00:09:31,940
inside of Fortnite.

159
00:09:31,940 --> 00:09:34,741
We model out the wall as a series of separate objects.

160
00:09:34,741 --> 00:09:38,222
And we make sure that their pivot point

161
00:09:38,222 --> 00:09:41,703
is in the center of the mesh, and that the x-axis is going

162
00:09:41,703 --> 00:09:43,264
down the length of the board.

163
00:09:43,264 --> 00:09:45,164
Because the script will actually be storing

164
00:09:45,164 --> 00:09:48,886
the vector along the x-axis, which

165
00:09:48,886 --> 00:09:50,726
will be useful for future calculations.

166
00:09:52,162 --> 00:09:54,684
So, and this is what the pivot painter tool looks like.

167
00:09:54,684 --> 00:09:56,145
You basically select all the objects,

168
00:09:56,145 --> 00:09:57,687
and then you press the paint button,

169
00:09:57,687 --> 00:09:59,248
and it'll store the information.

170
00:09:59,248 --> 00:10:00,769
And then we can import the static mesh

171
00:10:00,769 --> 00:10:03,331
that we just processed into Unreal,

172
00:10:03,331 --> 00:10:06,394
and then use the,

173
00:10:06,394 --> 00:10:06,474
the,

174
00:10:07,829 --> 00:10:12,992
pivot painter material function, which will decode the information that was stored inside

175
00:10:12,992 --> 00:10:20,157
the model's vertices and return a x-axis vector in world space and the position of the board's

176
00:10:20,157 --> 00:10:20,998
pivot points.

177
00:10:20,998 --> 00:10:26,321
For anyone that's interested, this is all available in the UDK, so it can be freely

178
00:10:26,321 --> 00:10:26,481
used.

179
00:10:28,197 --> 00:10:29,738
That got us most of the way there,

180
00:10:29,738 --> 00:10:31,339
but it didn't get us all the way there.

181
00:10:31,339 --> 00:10:34,780
We started getting assets like this, a bunch of twigs

182
00:10:34,780 --> 00:10:36,121
intertwined with each other.

183
00:10:36,121 --> 00:10:38,342
There's no good way of procedurally animating

184
00:10:38,342 --> 00:10:39,823
those boards in order.

185
00:10:39,823 --> 00:10:42,664
So we really needed someone to come in and specify

186
00:10:42,664 --> 00:10:43,845
an animation order.

187
00:10:43,845 --> 00:10:46,246
So we had to go back to the drawing board a little bit.

188
00:10:46,246 --> 00:10:48,627
And also using the PivotPainter by itself,

189
00:10:48,627 --> 00:10:54,090
we didn't have a way of knowing exactly how many boards were

190
00:10:54,090 --> 00:10:56,251
attached to the wall and how many were not.

191
00:10:57,417 --> 00:11:01,580
So what we did was we added a few new features to the script.

192
00:11:01,580 --> 00:11:03,622
And this is the animation process.

193
00:11:03,622 --> 00:11:08,726
So what the user does is they select the boards in order

194
00:11:08,726 --> 00:11:09,907
that they should animate in.

195
00:11:09,907 --> 00:11:11,989
Then they press the Animate button.

196
00:11:11,989 --> 00:11:15,031
And here you can see there's a visualization, a grayscale

197
00:11:15,031 --> 00:11:17,673
visualization, indicating which order the boards will

198
00:11:17,673 --> 00:11:18,274
fly into place in.

199
00:11:19,058 --> 00:11:23,541
And basically what happens is, behind the scenes,

200
00:11:23,541 --> 00:11:25,842
as you're selecting objects in 3D Studio Max,

201
00:11:25,842 --> 00:11:29,483
there's a selection array that's automatically generated.

202
00:11:29,483 --> 00:11:32,285
So what the script does is it takes the selection array,

203
00:11:32,285 --> 00:11:34,446
and for every item inside that array,

204
00:11:34,446 --> 00:11:39,468
it takes the integer that indicates

205
00:11:39,468 --> 00:11:41,509
the position of the object in the array,

206
00:11:41,509 --> 00:11:45,811
and it stores it inside the models of vertex information

207
00:11:45,811 --> 00:11:46,671
in one of the UV channels.

208
00:11:48,455 --> 00:11:53,377
And that way, we can gain access to it inside of Unreal.

209
00:11:53,377 --> 00:11:56,999
So there were a few more tools that were added,

210
00:11:56,999 --> 00:12:01,821
but they weren't used as much as the literal order that

211
00:12:01,821 --> 00:12:05,823
allows the user to just select the objects in the order

212
00:12:05,823 --> 00:12:07,544
that they'll be animated in.

213
00:12:07,544 --> 00:12:10,326
And this other modification to the script

214
00:12:10,326 --> 00:12:11,946
that you saw just there.

215
00:12:13,898 --> 00:12:18,020
is used to indicate whether boards should fly in from the left or from the right.

216
00:12:18,020 --> 00:12:25,625
We store a one bit value to indicate the flight path of the boards.

217
00:12:25,625 --> 00:12:30,948
In the case of floors, we can have boards fly in upward or they can fly downward.

218
00:12:30,948 --> 00:12:35,151
So this information is also referenced in the shader later.

219
00:12:35,151 --> 00:12:39,573
And it allows us to do some of the crazier structures that I showed.

220
00:12:41,441 --> 00:12:42,121
So this is awesome.

221
00:12:42,121 --> 00:12:45,482
We have all the information that we need,

222
00:12:45,482 --> 00:12:47,863
including some other data, too, that we

223
00:12:47,863 --> 00:12:50,984
can use to randomize the appearance of the walls

224
00:12:50,984 --> 00:12:52,344
as they build up.

225
00:12:52,344 --> 00:12:54,765
Just a few tips before we move on.

226
00:12:54,765 --> 00:12:56,946
Definitely avoid unnecessary scripting.

227
00:12:56,946 --> 00:12:58,586
Talk to your artists and make sure

228
00:12:58,586 --> 00:12:59,807
that everything that you're working on

229
00:12:59,807 --> 00:13:02,248
is exactly what they need and nothing more,

230
00:13:02,248 --> 00:13:04,568
so that you can progress faster.

231
00:13:05,168 --> 00:13:07,869
And make debugging as simple as possible.

232
00:13:07,869 --> 00:13:12,030
Add view modes to visualize the data or add data to the

233
00:13:12,030 --> 00:13:16,131
user-defined variables in 3D Streaming X. UV values are

234
00:13:16,131 --> 00:13:20,112
very inaccurate if you want to store an inf value inside of a

235
00:13:20,112 --> 00:13:22,092
floating point data type.

236
00:13:22,092 --> 00:13:27,234
I would recommend putting a 0.5 value offset to the data

237
00:13:27,234 --> 00:13:32,095
before you store it in the UV so that that way in the vertex

238
00:13:32,095 --> 00:13:34,255
shader when you're actually.

239
00:13:36,377 --> 00:13:39,958
Referencing the information you can use a seal or a floor.

240
00:13:39,958 --> 00:13:43,580
That way all the vertices on a single board will return a

241
00:13:43,580 --> 00:13:48,603
solid int value as opposed to a bunch of floating point

242
00:13:48,603 --> 00:13:50,003
information that's not accurate.

243
00:13:51,783 --> 00:13:55,505
And then make your data layout as efficient as possible.

244
00:13:55,505 --> 00:13:59,207
When you can, possibly, I would recommend storing two

245
00:13:59,207 --> 00:14:02,649
pieces of information in every channel.

246
00:14:02,649 --> 00:14:06,411
So for instance, we store a 0 to 1 random value.

247
00:14:07,285 --> 00:14:12,168
per board, but then we also wanted to store the flight path.

248
00:14:12,168 --> 00:14:15,409
And the flight path is really just a one or a zero.

249
00:14:15,409 --> 00:14:19,791
So that could be stored as a negative random number

250
00:14:19,791 --> 00:14:21,472
or a positive random number.

251
00:14:21,472 --> 00:14:24,593
So that way we're able to make our data storage

252
00:14:24,593 --> 00:14:25,634
a little bit more efficient.

253
00:14:25,634 --> 00:14:30,636
So now we've covered scripting, let's get into the fun part

254
00:14:30,636 --> 00:14:33,297
and start ripping boards apart.

255
00:14:33,297 --> 00:14:36,038
So the first transformation is

256
00:14:37,508 --> 00:14:40,250
The simplest, we simply add a downward vector

257
00:14:40,250 --> 00:14:43,812
and then modulate it by an animation amount.

258
00:14:43,812 --> 00:14:47,434
So this will move all the boards downward.

259
00:14:47,434 --> 00:14:51,136
The next one is that we reference our 1 or 0,

260
00:14:51,136 --> 00:14:55,898
or 1 or negative 1 value that we stored using the flight path,

261
00:14:55,898 --> 00:14:59,660
and then modulate it by a vector that

262
00:14:59,660 --> 00:15:05,864
goes along the length of a flight path, local vector.

263
00:15:09,014 --> 00:15:12,235
And then finally, what we do is we make another offset.

264
00:15:12,235 --> 00:15:14,116
To randomize it a bit more, what we do

265
00:15:14,116 --> 00:15:17,196
is we subtract the pivot point of the board

266
00:15:17,196 --> 00:15:20,797
from the center of the object's bounds,

267
00:15:20,797 --> 00:15:23,658
and then that creates a vector outward.

268
00:15:23,658 --> 00:15:27,179
And then we remove the z component,

269
00:15:27,179 --> 00:15:28,380
and we normalize that value.

270
00:15:28,380 --> 00:15:31,420
And then we can multiply that by an arbitrary amount

271
00:15:31,420 --> 00:15:32,981
to kind of push the boards outward.

272
00:15:34,829 --> 00:15:37,191
So what you see when you add all these values together

273
00:15:37,191 --> 00:15:40,515
is that they kind of create an offset like this, which

274
00:15:40,515 --> 00:15:43,618
indicates that we're going in the right direction.

275
00:15:43,618 --> 00:15:47,222
And then finally, when we do rotations,

276
00:15:47,222 --> 00:15:50,866
it's rather simple now that we have all the data

277
00:15:50,866 --> 00:15:51,487
that we needed.

278
00:15:52,564 --> 00:16:00,187
So we can reference the pivot point of the board that was stored, and then the axis that we stored earlier along the x-axis,

279
00:16:00,187 --> 00:16:06,590
and that'll act as our rotation about axis, rotation axis,

280
00:16:06,590 --> 00:16:12,853
and then we can pipe a animation value into the rotation angle, and that'll make all the boards spin along their axis.

281
00:16:15,838 --> 00:16:18,860
So we have all the transformations that we need,

282
00:16:18,860 --> 00:16:22,562
but we don't have any way of animating them efficiently,

283
00:16:22,562 --> 00:16:24,804
and we don't have all the tools that we need.

284
00:16:24,804 --> 00:16:26,665
I won't go into exactly all the details

285
00:16:26,665 --> 00:16:30,487
as to how these steps work, but the code is located right here.

286
00:16:30,487 --> 00:16:33,909
So one of the things that we need to do in the game

287
00:16:33,909 --> 00:16:37,291
is that we needed the boards to fly in one at a time

288
00:16:37,291 --> 00:16:39,533
when the boards are building initially.

289
00:16:39,533 --> 00:16:43,415
So what we do is we step through the animation order that

290
00:16:43,415 --> 00:16:43,976
was stored.

291
00:16:44,729 --> 00:16:47,876
earlier, and we simply subtract numbers.

292
00:16:47,876 --> 00:16:53,047
And as we subtract numbers, you get an animated 1 to 0 value

293
00:16:53,047 --> 00:16:55,111
per board, and then it jumps to the next board.

294
00:16:58,617 --> 00:17:02,899
And then, when we want to rip multiple boards off the wall at the same time,

295
00:17:02,899 --> 00:17:06,000
what we do is we do an if statement that says,

296
00:17:06,000 --> 00:17:09,182
if your board number is higher than a set amount,

297
00:17:09,182 --> 00:17:11,562
then pass through an animation value.

298
00:17:11,562 --> 00:17:13,183
And then we control both the area,

299
00:17:13,183 --> 00:17:16,585
the number of boards that are being ripped off,

300
00:17:16,585 --> 00:17:18,385
and the animation value that's being passed through.

301
00:17:21,398 --> 00:17:25,603
And then finally, when you want your wall to just be obliterated by a giant monster

302
00:17:25,603 --> 00:17:31,669
that's running through several walls at a time, you just pipe in a solid value across

303
00:17:31,669 --> 00:17:32,390
the entire wall.

304
00:17:32,390 --> 00:17:39,137
So effectively what you do is you add these different white values all together, and then

305
00:17:39,137 --> 00:17:44,003
you use that to modulate the translations that we created earlier.

306
00:17:46,045 --> 00:17:49,188
So it looks a little flat at this point.

307
00:17:49,188 --> 00:17:51,190
We're not getting the cartoony look.

308
00:17:51,190 --> 00:17:54,954
So what we want to do is we want to add a little bit of warping

309
00:17:54,954 --> 00:17:59,539
to the boards as they fall into place to make it more stylized.

310
00:17:59,539 --> 00:18:03,162
So what we just did was the animation.

311
00:18:03,162 --> 00:18:07,526
But now what we can do is add secondary motion or warping

312
00:18:07,526 --> 00:18:08,427
as a post process.

313
00:18:09,046 --> 00:18:10,547
to that animation grayscale value.

314
00:18:10,547 --> 00:18:17,272
So what we do to do that is we create a distance calculation

315
00:18:17,272 --> 00:18:19,914
from the world position of the vertices

316
00:18:19,914 --> 00:18:21,215
to the board's pivot point.

317
00:18:21,215 --> 00:18:24,757
And then we take the animation data

318
00:18:24,757 --> 00:18:28,460
that we stored earlier, that we created earlier,

319
00:18:28,460 --> 00:18:32,543
which will be represented by this zero to one gradient.

320
00:18:32,543 --> 00:18:35,165
And we make a few modifications to it.

321
00:18:35,165 --> 00:18:36,205
Oops.

322
00:18:36,205 --> 00:18:36,345
So.

323
00:18:37,302 --> 00:18:39,505
What we do is we multiply that value by 10 and then clamp it.

324
00:18:39,505 --> 00:18:41,988
And then we invert it and then multiply it by 10

325
00:18:41,988 --> 00:18:42,889
and then clamp it.

326
00:18:42,889 --> 00:18:45,312
And then we modulate those two by each other.

327
00:18:45,312 --> 00:18:47,816
And what that creates is a black value

328
00:18:47,816 --> 00:18:49,998
at the start of the animation and a black value

329
00:18:49,998 --> 00:18:50,940
at the beginning of the animation.

330
00:18:50,940 --> 00:18:55,546
And then we modulate that by the three dimensional falloff

331
00:18:55,546 --> 00:18:56,166
that we created.

332
00:18:57,848 --> 00:18:59,830
and add it back to the previous animation.

333
00:18:59,830 --> 00:19:01,571
And effectively what that does is,

334
00:19:01,571 --> 00:19:02,972
as boards are falling off

335
00:19:02,972 --> 00:19:03,992
toward the middle of their animation,

336
00:19:03,992 --> 00:19:06,474
the center of the board is pushed forward in time.

337
00:19:06,474 --> 00:19:07,755
So we're actually moving the boards,

338
00:19:07,755 --> 00:19:10,476
the center of the boards,

339
00:19:10,476 --> 00:19:12,538
forward in time in the animation.

340
00:19:12,538 --> 00:19:15,540
This is something that would only be possible

341
00:19:15,540 --> 00:19:16,700
with vertex shaders.

342
00:19:18,270 --> 00:19:21,851
So finally, we'll go into what happens to the boards

343
00:19:21,851 --> 00:19:23,172
when they're pulled off the wall.

344
00:19:23,172 --> 00:19:26,052
Well, the answer is simple.

345
00:19:26,052 --> 00:19:28,573
They get masked by the pixel shader,

346
00:19:28,573 --> 00:19:33,174
and they also get scaled down to a single point in space.

347
00:19:33,174 --> 00:19:34,835
So how is that done?

348
00:19:34,835 --> 00:19:37,356
Well, basically what we do is we compare

349
00:19:37,356 --> 00:19:41,597
the location of the board to a point in space that we define.

350
00:19:41,597 --> 00:19:44,638
And usually, that's the pivot point

351
00:19:44,638 --> 00:19:47,058
of the overall static mesh.

352
00:19:47,873 --> 00:19:50,736
And then we also add in the animation value.

353
00:19:50,736 --> 00:19:53,818
So if a board is rather low on the wall,

354
00:19:53,818 --> 00:19:56,060
and it's fully in place, then we want

355
00:19:56,060 --> 00:19:59,563
to make it completely visible, even though it's

356
00:19:59,563 --> 00:20:00,844
rather low on the wall.

357
00:20:00,844 --> 00:20:04,808
And what we do is we use that to drive a masking value.

358
00:20:06,235 --> 00:20:10,317
So a few points before we conclude.

359
00:20:10,317 --> 00:20:14,919
Collision does not update when you use a vertex shader.

360
00:20:14,919 --> 00:20:17,259
So you have to design around that,

361
00:20:17,259 --> 00:20:22,461
or use vertex shaders on assets that don't need collision.

362
00:20:22,461 --> 00:20:25,262
If you move an object outside of the bounding box,

363
00:20:27,063 --> 00:20:28,985
If you move an object outside of the bounding box,

364
00:20:28,985 --> 00:20:30,486
there's a possibility that the object

365
00:20:30,486 --> 00:20:32,288
will be called if you're looking directly at it.

366
00:20:32,288 --> 00:20:35,811
Because the calling operation operates on the bounding box.

367
00:20:35,811 --> 00:20:38,393
If the bounding box isn't on the screen,

368
00:20:38,393 --> 00:20:41,096
then you will not call the object.

369
00:20:41,096 --> 00:20:43,958
But if the object visually looks like it's over here,

370
00:20:43,958 --> 00:20:45,460
and you look at that static mesh,

371
00:20:45,460 --> 00:20:47,982
and the bounding box is off screen,

372
00:20:47,982 --> 00:20:51,084
then the static mesh could disappear

373
00:20:51,084 --> 00:20:53,186
when the bounding box is off the screen.

374
00:20:54,846 --> 00:20:58,187
And performance is actually very strong using this method.

375
00:20:58,187 --> 00:21:02,008
And one of the things I didn't mention earlier

376
00:21:02,008 --> 00:21:05,069
is that the normals don't automatically update.

377
00:21:05,069 --> 00:21:09,990
So if you want to update the normals on your static mesh

378
00:21:09,990 --> 00:21:11,730
that's animating, then you would have

379
00:21:11,730 --> 00:21:16,492
to do that in an additional step in the pixel shader, which

380
00:21:16,492 --> 00:21:17,712
is slightly expensive.

381
00:21:17,712 --> 00:21:20,393
So I just didn't do it because you don't really

382
00:21:20,393 --> 00:21:22,013
notice it for the most part.

383
00:21:22,013 --> 00:21:23,133
And so.

384
00:21:25,113 --> 00:21:31,755
Vertex shaders are very cost effective and they provide unique capabilities that aren't possible in any other way.

385
00:21:31,755 --> 00:21:41,237
And there's a ton of opportunity out there to use vertex shaders in ways that aren't currently being used to generate really exciting effects.

386
00:21:41,237 --> 00:21:48,418
There are a few gameplay limitations, but you can work around it if you know what they are ahead of time.

387
00:21:48,418 --> 00:21:50,879
So, I'm not sure if I have any time for questions or not.

388
00:21:50,879 --> 00:21:54,120
Yeah, that's the talk. Thanks.

389
00:22:04,929 --> 00:22:11,954
you mentioned the performance is good. Did you do any actual

390
00:22:11,954 --> 00:22:17,539
performance testing like script based object manipulation versus

391
00:22:17,539 --> 00:22:21,802
the vertex shaders? Oh, so one of the things that

392
00:22:22,938 --> 00:22:24,860
We haven't quite evaluated that, but we

393
00:22:24,860 --> 00:22:29,505
noticed that it didn't create much of a problem on Fortnite.

394
00:22:29,505 --> 00:22:33,269
We didn't see any major performance hitches or jumps

395
00:22:33,269 --> 00:22:33,569
like that.

396
00:22:33,569 --> 00:22:37,994
And one of the great things about using materials

397
00:22:37,994 --> 00:22:41,998
to create all this animation is that.

398
00:22:43,136 --> 00:22:45,997
As soon as you're done with the most complex form of animation,

399
00:22:45,997 --> 00:22:49,178
you can switch out the materials to a very simple version.

400
00:22:49,178 --> 00:22:52,899
So basically, instead of looking at maybe 180 instructions

401
00:22:52,899 --> 00:22:54,760
in your vertex shader, which is actually pretty cheap,

402
00:22:54,760 --> 00:22:58,001
because there's very few vertices on the model,

403
00:22:58,001 --> 00:23:00,482
you can switch it out for a vertex shader that

404
00:23:00,482 --> 00:23:02,563
has, say, 30 instructions.

405
00:23:02,563 --> 00:23:04,183
I was going to ask that, too, actually.

406
00:23:04,183 --> 00:23:06,544
So you do switch the shader out once it's done animating?

407
00:23:07,011 --> 00:23:11,414
Yeah, that's actually one of the items

408
00:23:11,414 --> 00:23:16,417
that we have on the list for optimization in the future,

409
00:23:16,417 --> 00:23:18,679
but we're not 100% there yet.

410
00:23:18,679 --> 00:23:18,759
Oh, OK.

411
00:23:18,759 --> 00:23:19,059
So, cool.

412
00:23:19,059 --> 00:23:19,259
Thanks.

413
00:23:19,259 --> 00:23:19,639
No problem.

414
00:23:19,639 --> 00:23:20,040
Okey-dokey.

415
00:23:20,040 --> 00:23:20,880
All right, thank you guys.

416
00:23:20,880 --> 00:23:22,181
Thanks.

417
00:23:22,181 --> 00:23:24,703
Thank you.

