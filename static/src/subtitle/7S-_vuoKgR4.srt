1
00:00:06,690 --> 00:00:09,872
All right, let's get this party started.

2
00:00:13,075 --> 00:00:14,176
And we have no audio.

3
00:00:14,997 --> 00:00:15,918
Oh, oh, thank you.

4
00:00:46,258 --> 00:00:47,239
Good morning, everybody.

5
00:00:47,819 --> 00:00:51,980
I'd like to welcome you to my first ever GDC presentation.

6
00:00:52,000 --> 00:00:53,061
So I'm a little nervous.

7
00:00:53,761 --> 00:00:56,642
Thank you for coming at this ungodly hour.

8
00:01:00,463 --> 00:01:03,124
So my name is Michal Mach.

9
00:01:03,624 --> 00:01:07,886
I started my career in the games industry back in 1999

10
00:01:08,026 --> 00:01:12,007
as a 3D modeler on Mafia, the City of Lost Heaven game.

11
00:01:13,312 --> 00:01:16,534
Luckily, our company had only one animator at that time,

12
00:01:16,954 --> 00:01:18,935
and they thought I could have potential.

13
00:01:20,116 --> 00:01:21,557
And I was probably decent,

14
00:01:21,677 --> 00:01:25,259
so I became a lead gameplay animator on Mafia II.

15
00:01:26,359 --> 00:01:28,340
After that, I helped Vatra Games

16
00:01:28,640 --> 00:01:30,061
with the Silent Hill Downpour,

17
00:01:30,541 --> 00:01:33,823
and in 2011, I joined the Naughty Dog's Kennel

18
00:01:33,983 --> 00:01:34,664
as an animator.

19
00:01:36,605 --> 00:01:38,786
So, what physics animation means to us?

20
00:01:40,329 --> 00:01:43,310
It's anything animated while physically simulated.

21
00:01:43,330 --> 00:01:46,872
The most common implementation of physics animation

22
00:01:47,052 --> 00:01:48,192
is a ragdoll simulation.

23
00:01:49,093 --> 00:01:51,954
Basically, every game today has it in some form.

24
00:01:53,034 --> 00:01:55,716
We were already using ragdoll when characters die,

25
00:01:56,016 --> 00:01:57,897
but we wanted to experiment further

26
00:01:58,097 --> 00:02:00,678
and see if we could use it more creatively.

27
00:02:01,855 --> 00:02:03,357
We don't want players to notice

28
00:02:03,437 --> 00:02:05,039
when the physics animation is running.

29
00:02:05,659 --> 00:02:08,022
Fitting the character and natural look and feel

30
00:02:08,162 --> 00:02:09,303
is number one priority.

31
00:02:10,064 --> 00:02:12,886
I'd like to show you what did and did not work

32
00:02:13,147 --> 00:02:14,808
on a few examples from our games.

33
00:02:16,790 --> 00:02:19,433
But why bother with such a risky thing

34
00:02:19,513 --> 00:02:20,594
like physics animation

35
00:02:20,734 --> 00:02:22,716
when we have an army of animators, right?

36
00:02:23,677 --> 00:02:24,798
We could just brute force it.

37
00:02:26,212 --> 00:02:33,040
And it's because we were planning on abandoning the environments made of boxes, right angles, and perfectly vertical walls.

38
00:02:33,901 --> 00:02:38,186
Physics helped us with blending out of already massive amount of animations,

39
00:02:38,306 --> 00:02:44,893
and sometimes allowed us to fully simulate something that would be otherwise a chore to implement using the old ways.

40
00:02:46,878 --> 00:02:49,600
We wanted our characters to react more believably

41
00:02:49,660 --> 00:02:51,302
to whatever was happening to them.

42
00:02:52,302 --> 00:02:54,604
Our characters have incredible level of detail

43
00:02:54,825 --> 00:02:56,446
and we wanted to match the same level

44
00:02:56,486 --> 00:02:57,907
of fidelity in animation.

45
00:02:59,889 --> 00:03:02,231
We also wanted players to be able to interact

46
00:03:02,471 --> 00:03:06,334
with the dynamic stuff, more physics, ideally everywhere.

47
00:03:07,716 --> 00:03:08,636
And because it's fun.

48
00:03:10,523 --> 00:03:13,790
But first things first, our games are running on Havok.

49
00:03:14,211 --> 00:03:16,335
So I'm going to use terminology specific

50
00:03:16,375 --> 00:03:17,357
to this physics engine.

51
00:03:18,119 --> 00:03:19,481
Although most of it applies

52
00:03:19,541 --> 00:03:20,964
to other physics engines as well.

53
00:03:23,041 --> 00:03:24,162
Let's start with rigid bodies.

54
00:03:24,823 --> 00:03:27,125
These are the objects roughly describing geometry

55
00:03:27,205 --> 00:03:28,026
of our characters.

56
00:03:28,966 --> 00:03:31,349
Each rigid body has joints associated to it.

57
00:03:32,109 --> 00:03:33,851
Rigid body has its mass or weight,

58
00:03:34,431 --> 00:03:38,955
friction, restitution or bounciness, and inertia tensor.

59
00:03:39,836 --> 00:03:42,058
Inertia tensor describes how difficult it is

60
00:03:42,098 --> 00:03:44,380
to rotate an object around any given axis.

61
00:03:45,381 --> 00:03:47,363
Basically, the higher the inertia tensor,

62
00:03:47,483 --> 00:03:48,944
the more stable the object is.

63
00:03:50,550 --> 00:03:54,274
Linear damping reduces the linear movement of the object over time,

64
00:03:54,955 --> 00:03:58,458
and angular damping performs the same to the rotation of the object.

65
00:04:00,581 --> 00:04:03,023
Rigid bodies can be connected by constraints.

66
00:04:03,964 --> 00:04:07,047
For organic forms of life, we mainly use two types.

67
00:04:08,088 --> 00:04:11,532
Hinge constraint limits rotation in the joint to one axis,

68
00:04:12,152 --> 00:04:13,794
typically used for knees and elbows.

69
00:04:15,464 --> 00:04:17,785
Rectal constraint is the more common one

70
00:04:17,965 --> 00:04:21,307
as it behaves similar to majority of joints in our bodies.

71
00:04:22,067 --> 00:04:24,068
Unfortunately, both types of constraints

72
00:04:24,108 --> 00:04:25,628
don't behave too realistically

73
00:04:25,828 --> 00:04:27,229
unless we set up limits for them.

74
00:04:28,850 --> 00:04:30,610
Limits are kind of difficult to set up.

75
00:04:31,311 --> 00:04:33,652
Every person has different natural flexibility

76
00:04:33,732 --> 00:04:35,852
so it's hard to decide what is the sweet spot.

77
00:04:36,853 --> 00:04:38,434
I prefer more restrictive limits

78
00:04:38,474 --> 00:04:42,055
to prevent characters getting stuck in weird yoga poses.

79
00:04:43,426 --> 00:04:47,048
or this one. Trust me, I have seen these exact poses

80
00:04:47,108 --> 00:04:47,828
in our game before.

81
00:04:49,109 --> 00:04:51,710
This particular one can happen when you have too much friction

82
00:04:51,830 --> 00:04:52,710
on your rigid bodies.

83
00:04:54,331 --> 00:04:56,772
And also make sure the limits are not too restrictive,

84
00:04:57,172 --> 00:05:00,334
so the characters do not look like they are just taking a nap.

85
00:05:02,795 --> 00:05:04,276
Now we have max friction torque,

86
00:05:04,876 --> 00:05:06,677
and it simulates friction in joints

87
00:05:06,777 --> 00:05:07,937
and tendons surrounding them,

88
00:05:08,057 --> 00:05:10,178
so the rigid bodies will not flop around freely

89
00:05:10,238 --> 00:05:11,359
like in the video on the left.

90
00:05:12,940 --> 00:05:15,822
set max friction torque to 20% of the mass to start out.

91
00:05:18,624 --> 00:05:21,046
Finally, to be able to animate a ragdoll,

92
00:05:21,186 --> 00:05:22,507
we can use constraint motors.

93
00:05:23,628 --> 00:05:26,870
Then the regular constraint becomes a powered constraint.

94
00:05:27,730 --> 00:05:30,292
Motors try their best to match our animation pose

95
00:05:30,372 --> 00:05:31,733
with maximum motor force,

96
00:05:32,394 --> 00:05:34,315
but we don't want them to overshoot the pose,

97
00:05:34,655 --> 00:05:36,616
and that's why we also have motor damping.

98
00:05:39,462 --> 00:05:42,704
Another tool we have is ability to limit how fast the motor

99
00:05:42,744 --> 00:05:44,465
tries to recover the animation pose

100
00:05:44,565 --> 00:05:45,826
if something pushes it around.

101
00:05:47,267 --> 00:05:51,409
So the right side is low speed and left side is high speed.

102
00:05:53,130 --> 00:05:54,931
And finally, we have a motor tau,

103
00:05:55,292 --> 00:05:57,093
which is basically motor stiffness.

104
00:05:57,933 --> 00:05:59,654
You won't see almost any difference,

105
00:05:59,774 --> 00:06:01,095
but you can totally feel it.

106
00:06:01,816 --> 00:06:04,838
So yeah, that's it.

107
00:06:05,438 --> 00:06:06,819
That's all the parameters I usually

108
00:06:06,839 --> 00:06:08,800
tweak while I'm setting up the regular.

109
00:06:10,964 --> 00:06:13,326
There's so many parameters and all of them

110
00:06:13,527 --> 00:06:14,608
are kind of connected.

111
00:06:15,609 --> 00:06:19,493
Changing one often influences others too.

112
00:06:19,513 --> 00:06:22,095
So, please, read the manual.

113
00:06:23,477 --> 00:06:26,119
I know it's boring, but after endless hours

114
00:06:26,199 --> 00:06:28,742
of tuning random numbers, I gave in

115
00:06:29,022 --> 00:06:30,744
and read the most interesting sections.

116
00:06:32,374 --> 00:06:35,255
Also, check out demos provided with your physics engine.

117
00:06:36,095 --> 00:06:38,555
They show off features in nice, simplified form.

118
00:06:39,356 --> 00:06:41,816
And if you have your own custom physics engine,

119
00:06:42,196 --> 00:06:45,717
talk to your programmer and ask him for how stuff works.

120
00:06:47,137 --> 00:06:51,518
OK, here are some basic rules I wish I knew when I started.

121
00:06:53,579 --> 00:06:55,539
Don't try to imitate real life.

122
00:06:56,763 --> 00:06:59,464
Reduce mass of your rigid bodies by 10 to 20%

123
00:06:59,884 --> 00:07:02,165
for each bone going out from the root.

124
00:07:04,586 --> 00:07:06,226
Check for unwanted collisions.

125
00:07:07,267 --> 00:07:08,867
The chest area is so congested

126
00:07:08,887 --> 00:07:11,728
that it's really hard to see what's happening inside.

127
00:07:14,029 --> 00:07:15,670
And now you can start testing and tweaking.

128
00:07:17,131 --> 00:07:18,771
Scale inertia tensors should you need

129
00:07:18,791 --> 00:07:21,232
to stabilize disproportionately sized rigid bodies.

130
00:07:22,932 --> 00:07:23,632
and be patient.

131
00:07:24,253 --> 00:07:26,735
It takes time, a lot of time to set everything up.

132
00:07:27,636 --> 00:07:28,958
But don't be too patient.

133
00:07:29,478 --> 00:07:31,320
I'm talking from my own experience

134
00:07:31,840 --> 00:07:33,322
because one day I was wondering,

135
00:07:33,742 --> 00:07:36,245
why is our ragdoll so floaty in the game?

136
00:07:37,421 --> 00:07:40,944
It was perfectly fine in Havoc debug tools, but super floaty in game.

137
00:07:41,365 --> 00:07:43,907
Maybe something was lost in translation?

138
00:07:44,948 --> 00:07:49,673
And I spent hours, well, maybe even days, tweaking damping on rigid bodies,

139
00:07:49,733 --> 00:07:52,796
and I felt like it's way, way better than two days ago,

140
00:07:53,317 --> 00:07:54,798
but I still wasn't satisfied.

141
00:07:55,118 --> 00:07:58,281
So I went to see our physics programmer and asked him for help.

142
00:07:59,262 --> 00:08:00,803
and he checked the game code and he was like,

143
00:08:00,883 --> 00:08:02,704
oh yeah, yeah, yeah, it's hard-coded.

144
00:08:03,445 --> 00:08:06,647
So make sure you are allowed to change the parameters

145
00:08:06,687 --> 00:08:07,568
you are trying to change.

146
00:08:10,529 --> 00:08:12,190
Anyway, how do I test my ragdolls?

147
00:08:13,211 --> 00:08:15,773
I start throwing them around, basically, with the mouse.

148
00:08:15,793 --> 00:08:18,775
That's the advantage we have as game developers.

149
00:08:20,438 --> 00:08:24,240
Body should unfold itself into a natural-looking pose

150
00:08:24,741 --> 00:08:27,802
if limits, restrictions, and friction and everything

151
00:08:27,862 --> 00:08:28,522
is set up properly.

152
00:08:29,303 --> 00:08:31,044
The human body is soft and squishy,

153
00:08:31,184 --> 00:08:32,804
so tone the restitution down.

154
00:08:38,027 --> 00:08:40,308
As I said before, I like to keep limits

155
00:08:40,528 --> 00:08:41,529
on the restrictive side.

156
00:08:42,369 --> 00:08:44,910
So if I put this guy's hand on his chest,

157
00:08:45,210 --> 00:08:47,452
it naturally slides down next to his body.

158
00:08:54,283 --> 00:08:57,265
And make sure you have correct friction on your rigid bodies.

159
00:08:57,925 --> 00:09:01,587
This guy's leg could get stuck on the other leg if the friction is too high.

160
00:09:02,007 --> 00:09:04,668
And you might get that taking a nap pose.

161
00:09:07,409 --> 00:09:09,690
And what I also like to do is this sitting test.

162
00:09:10,391 --> 00:09:14,833
I think that characters should be able to sit next to a wall,

163
00:09:14,893 --> 00:09:17,854
but it looks so cool and dramatic when it slowly slides down.

164
00:09:19,613 --> 00:09:22,235
Okay, now it's time to test the regular in the real gameplay.

165
00:09:24,036 --> 00:09:26,637
By the way, when I was doing this, for some reason,

166
00:09:27,298 --> 00:09:31,520
the dead bodies get reappearing every time I respawn the character.

167
00:09:31,540 --> 00:09:36,644
Yeah, we are spooning in Uncharted 4.

168
00:09:39,425 --> 00:09:42,808
So, basically, when I'm playing, I'm trying to find out

169
00:09:43,908 --> 00:09:45,790
how often I can see a bad pose.

170
00:09:48,479 --> 00:09:50,300
This is the friction on the legs.

171
00:09:56,806 --> 00:09:58,267
And this is my arm test.

172
00:10:00,529 --> 00:10:06,215
The chances to see a broken ragdoll are much higher when the characters are moving fast and hitting a collision.

173
00:10:14,625 --> 00:10:21,667
so it was all physics and the limits basically held the character from breaking.

174
00:10:21,687 --> 00:10:27,568
And one more.

175
00:10:27,668 --> 00:10:30,989
As you can see, I spent some time already there, all the weapons.

176
00:10:32,489 --> 00:10:35,730
Anyway, so we tested our ragdoll, if it's flopping around properly,

177
00:10:36,550 --> 00:10:38,050
but now it's time to animate it.

178
00:10:38,670 --> 00:10:42,051
And when we talk about animating rigid bodies, we talk about their states.

179
00:10:43,681 --> 00:10:46,522
Keyframe rigid body, which is drawn in blue color,

180
00:10:47,522 --> 00:10:49,502
is 100% driven by animation.

181
00:10:50,722 --> 00:10:53,463
As you can see, I'm trying to move it with the mouse,

182
00:10:53,583 --> 00:10:54,583
but it's not possible.

183
00:10:56,184 --> 00:10:59,404
We use keyframe rigid bodies for pinning hands or feet

184
00:10:59,464 --> 00:11:00,425
to other objects.

185
00:11:01,565 --> 00:11:04,425
We usually disable collisions on keyframe rigid bodies

186
00:11:04,485 --> 00:11:06,646
so they won't kick the other objects to the moon.

187
00:11:09,687 --> 00:11:12,067
Next is powered or animated rigid bodies.

188
00:11:13,040 --> 00:11:13,861
They are drawing yellow.

189
00:11:14,922 --> 00:11:17,243
This one is also driven by the animation,

190
00:11:17,383 --> 00:11:20,966
but this time I can move it around by applying impulses

191
00:11:21,166 --> 00:11:22,847
or by colliding with other objects.

192
00:11:23,988 --> 00:11:26,530
By the way, notice how the Drake's screen left arm

193
00:11:26,590 --> 00:11:27,371
is flailing around.

194
00:11:28,151 --> 00:11:29,973
That's because it's not powered.

195
00:11:30,773 --> 00:11:32,735
And that is the third and last possible state

196
00:11:32,795 --> 00:11:33,815
of our rigid bodies.

197
00:11:34,856 --> 00:11:37,498
Unfortunately, it's also yellow, but don't worry.

198
00:11:37,718 --> 00:11:39,440
I won't be showing unpowered rigid bodies

199
00:11:39,500 --> 00:11:40,300
in my presentation.

200
00:11:41,515 --> 00:11:43,295
Okay, so I mentioned rigid bodies,

201
00:11:43,495 --> 00:11:48,417
and let me briefly explain how we can do that.

202
00:11:50,278 --> 00:11:52,578
We use so-called animation controllers,

203
00:11:53,058 --> 00:11:55,499
and the first one is Powered Constraint Controller,

204
00:11:56,319 --> 00:11:57,800
which we call simply motors

205
00:11:58,080 --> 00:12:01,401
because it uses the constraint motors

206
00:12:01,581 --> 00:12:03,882
I talked about earlier, and it's also shorter.

207
00:12:05,602 --> 00:12:07,263
Havoc recommends this controller

208
00:12:07,603 --> 00:12:09,724
when animating dead or dying characters.

209
00:12:10,775 --> 00:12:12,716
It's because it's working in local space,

210
00:12:12,897 --> 00:12:15,038
so it cannot keep the character from falling

211
00:12:15,119 --> 00:12:16,620
without using additional tools.

212
00:12:17,501 --> 00:12:20,423
But it produces pretty realistic results,

213
00:12:20,683 --> 00:12:22,144
thanks to its local space nature.

214
00:12:22,725 --> 00:12:25,107
So if you move one rigid body, it

215
00:12:25,187 --> 00:12:26,608
moves all of its children with it.

216
00:12:27,992 --> 00:12:31,012
Unfortunately, we were not able to match an animation pose

217
00:12:31,032 --> 00:12:32,552
without using really stiff motors,

218
00:12:33,173 --> 00:12:35,873
and that tend to overshoot and vibrate.

219
00:12:36,473 --> 00:12:38,154
By the way, the vibrations in the video

220
00:12:38,274 --> 00:12:40,774
are slightly exaggerated, so you can see them better.

221
00:12:42,975 --> 00:12:44,975
And the second animation controller

222
00:12:45,195 --> 00:12:46,515
is a rigid body controller,

223
00:12:46,575 --> 00:12:48,176
which we call keyframe controller.

224
00:12:49,516 --> 00:12:50,836
It is very different from motors

225
00:12:50,916 --> 00:12:52,737
because it is manipulating velocities

226
00:12:52,837 --> 00:12:55,557
of individual rigid bodies to match an animation pose.

227
00:12:56,679 --> 00:12:59,461
Havoc recommends this controller for live characters

228
00:13:00,022 --> 00:13:01,703
because it works in world space

229
00:13:01,843 --> 00:13:03,985
and therefore can keep them from falling.

230
00:13:04,926 --> 00:13:06,587
Due to its world space nature,

231
00:13:06,907 --> 00:13:08,509
it has this kind of IK look.

232
00:13:09,289 --> 00:13:11,311
So if you move, for example, the upper arm,

233
00:13:11,711 --> 00:13:13,192
the hand tries to stay in place.

234
00:13:13,773 --> 00:13:16,735
You can see the similar effect in the head as well.

235
00:13:17,836 --> 00:13:22,080
But it's incredibly easy to match an animation pose.

236
00:13:23,181 --> 00:13:25,062
And the controller is very stable.

237
00:13:28,887 --> 00:13:31,649
Let me show you both controllers again, side by side.

238
00:13:32,290 --> 00:13:33,951
I also marked the key differences

239
00:13:34,011 --> 00:13:35,252
between controllers for you.

240
00:13:36,533 --> 00:13:37,634
It's going to be important later.

241
00:13:39,335 --> 00:13:42,978
And so we have this physics terminology over,

242
00:13:43,479 --> 00:13:45,660
and let me finally show you some examples.

243
00:13:47,702 --> 00:13:49,603
Yeah, I know I promised Uncharted 4,

244
00:13:49,744 --> 00:13:51,505
but let me start with the first game

245
00:13:51,525 --> 00:13:54,988
where we ever used our current technology for the first time,

246
00:13:55,188 --> 00:13:56,609
and that is The Last of Us.

247
00:13:58,658 --> 00:14:00,679
So this scene is towards the end of the game

248
00:14:00,759 --> 00:14:03,240
where Joel saves Ellie, spoiler alert,

249
00:14:04,321 --> 00:14:06,001
from being killed by fireflies.

250
00:14:06,802 --> 00:14:09,983
She's under anesthesia and therefore she's unconscious

251
00:14:10,204 --> 00:14:12,645
and Joel is supposed to carry her away from the hospital.

252
00:14:14,326 --> 00:14:16,247
It was supposed to be a very touching moment,

253
00:14:16,407 --> 00:14:20,869
so Ellie's arms and legs should be moving,

254
00:14:20,909 --> 00:14:23,350
but not too much, you know, so it doesn't look comical.

255
00:14:24,391 --> 00:14:27,332
I checked YouTube, hoping for at least a few helpful videos.

256
00:14:28,841 --> 00:14:32,863
But I was really surprised when my search returned tens of thousands of results.

257
00:14:33,863 --> 00:14:36,485
Yeah, there was one playlist that was 469 videos.

258
00:14:36,605 --> 00:14:38,245
It was crazy.

259
00:14:38,265 --> 00:14:41,147
Okay, back to animation.

260
00:14:42,027 --> 00:14:44,468
We already had this sequence at the beginning of the game

261
00:14:44,569 --> 00:14:46,329
where Joel carries his daughter Sarah.

262
00:14:47,050 --> 00:14:49,631
So we decided to reuse his moveset,

263
00:14:49,931 --> 00:14:52,552
but we had no time to create animations for Ellie.

264
00:14:53,333 --> 00:14:55,974
One idle and one run-forward animation had to do it.

265
00:14:59,793 --> 00:15:00,313
Let's see it.

266
00:15:01,254 --> 00:15:02,575
Yeah, it looks pretty solid, no?

267
00:15:03,175 --> 00:15:05,837
I mean, at least body is pretty solid.

268
00:15:06,317 --> 00:15:07,138
It's not moving at all.

269
00:15:08,579 --> 00:15:09,860
Yeah, this was not shippable.

270
00:15:10,621 --> 00:15:12,342
We needed a solution that could get away

271
00:15:12,382 --> 00:15:13,943
with limited number of animations

272
00:15:14,163 --> 00:15:16,565
and provide proper reactions to Joe's motion.

273
00:15:17,485 --> 00:15:19,367
So physics, right?

274
00:15:19,767 --> 00:15:20,888
What can possibly go wrong?

275
00:15:22,909 --> 00:15:24,210
And there we go.

276
00:15:24,731 --> 00:15:25,891
This is our initial setup.

277
00:15:27,322 --> 00:15:29,944
As you can see, Ellie's torso and left arm

278
00:15:30,044 --> 00:15:32,506
were fully keyframed and not simulated at all.

279
00:15:33,487 --> 00:15:37,150
We simulated only the right arm, head, and both lower legs.

280
00:15:38,751 --> 00:15:40,212
We encountered a problem

281
00:15:40,292 --> 00:15:42,134
with our asset building pipeline, though.

282
00:15:43,034 --> 00:15:44,896
Our characters can have only one ragdoll,

283
00:15:45,616 --> 00:15:48,379
so we had to hack in this additional ragdoll for Ellie,

284
00:15:48,619 --> 00:15:49,680
just for this sequence.

285
00:15:50,560 --> 00:15:51,981
Okay, let's check how it turned out.

286
00:16:03,372 --> 00:16:06,574
Yeah, it's not very emotional, is it?

287
00:16:09,616 --> 00:16:16,661
So yeah, we tried both motors and keyframe controller to drive the Ragdoll, but yeah.

288
00:16:19,719 --> 00:16:20,420
Okay, he's dead.

289
00:16:21,500 --> 00:16:24,722
So we tried both, motorist, keyframe controller.

290
00:16:24,742 --> 00:16:26,864
Motorists worked great until players

291
00:16:26,884 --> 00:16:28,024
started changing direction.

292
00:16:28,785 --> 00:16:30,686
Increasing their strength wasn't a solution

293
00:16:30,726 --> 00:16:32,527
because we needed those limbs to be loose.

294
00:16:33,247 --> 00:16:35,049
And keyframe controller felt better,

295
00:16:35,229 --> 00:16:38,090
but loose limbs had this weird linear motion in them.

296
00:16:38,451 --> 00:16:40,752
Keyframe controller is, after all, linear, right?

297
00:16:41,673 --> 00:16:42,513
It's in world space.

298
00:16:44,034 --> 00:16:46,295
So, okay, we needed to decide between

299
00:16:46,316 --> 00:16:47,616
motorist and keyframe controller.

300
00:16:48,747 --> 00:16:51,528
How could we keep using motors for nice follow-through

301
00:16:51,728 --> 00:16:53,929
in Ellie's limbs, but stabilize them

302
00:16:53,969 --> 00:16:55,509
without increasing the motor strength?

303
00:16:56,970 --> 00:16:59,231
Is there a way to cap acceleration in joints?

304
00:17:02,652 --> 00:17:06,713
And we got this revelation one, and that is

305
00:17:07,493 --> 00:17:10,014
that standard approach is to use motors

306
00:17:10,894 --> 00:17:13,715
or keyframe controller for animating rigid bodies.

307
00:17:15,156 --> 00:17:18,097
But Yaros, our physics programmer, had an idea.

308
00:17:20,395 --> 00:17:23,298
Maybe we could try both controllers simultaneously.

309
00:17:24,458 --> 00:17:26,800
We had no idea if that's going to work or not,

310
00:17:26,980 --> 00:17:28,121
but we gave it a try.

311
00:17:29,062 --> 00:17:31,824
It was a delicate balancing act between the two controllers,

312
00:17:32,004 --> 00:17:33,485
but it worked.

313
00:17:38,620 --> 00:17:42,484
We used motors with enough power to apply the animation pose,

314
00:17:42,944 --> 00:17:47,007
but lowered their tau stiffness to minimum

315
00:17:47,047 --> 00:17:49,550
to make them very soft and let the limbs flop around.

316
00:17:50,330 --> 00:17:52,892
And we used keyframe controller.

317
00:17:52,912 --> 00:17:55,795
It functions as some kind of stabilizer,

318
00:17:56,075 --> 00:17:58,457
preventing vibrations and forcing the rigid bodies

319
00:17:58,497 --> 00:18:00,599
to keep the animation pose when the character is not

320
00:18:00,659 --> 00:18:01,379
moving too much.

321
00:18:02,600 --> 00:18:05,403
But Ellie still kept breaking during

322
00:18:05,483 --> 00:18:06,644
quick directional changes.

323
00:18:08,066 --> 00:18:11,489
and we wouldn't be able to ship without Revelation 2.

324
00:18:13,031 --> 00:18:17,054
And we knew that Ellie is parented to Joel's spine,

325
00:18:17,755 --> 00:18:20,637
so Yaros tried to decompose the animation pose

326
00:18:20,657 --> 00:18:21,638
to two components.

327
00:18:22,999 --> 00:18:26,703
Local acceleration, which is acceleration of Ellie's pose,

328
00:18:27,744 --> 00:18:30,546
and parent acceleration, which is acceleration

329
00:18:30,626 --> 00:18:31,587
of Joel's spine.

330
00:18:33,464 --> 00:18:37,647
And now, the key thing, we can limit how much player's motion

331
00:18:37,727 --> 00:18:39,368
we apply to Havok rigid bodies.

332
00:18:40,189 --> 00:18:43,291
We are finally able to cap the crazy accelerations

333
00:18:43,351 --> 00:18:46,133
we were getting when player was changing directions rapidly.

334
00:18:48,154 --> 00:18:50,296
And this is from the ship game.

335
00:18:58,842 --> 00:19:01,824
I think it is pretty decent for just one frame pose.

336
00:19:10,305 --> 00:19:13,188
Anyway, so what are the key features

337
00:19:13,368 --> 00:19:14,669
of our regular driving method?

338
00:19:16,370 --> 00:19:19,312
We are motors and keyframe controllers simultaneously.

339
00:19:20,273 --> 00:19:23,835
By changing weight between motors and keyframe controller,

340
00:19:23,995 --> 00:19:25,477
we can achieve different results.

341
00:19:26,157 --> 00:19:28,799
And by the way, we can change those weights per rigid body.

342
00:19:29,820 --> 00:19:32,622
And we can also cap acceleration spikes

343
00:19:32,782 --> 00:19:34,783
by limiting parent acceleration.

344
00:19:37,646 --> 00:19:39,307
And how the keyframe controller works.

345
00:19:40,326 --> 00:19:41,887
For you with coding experience, it

346
00:19:41,927 --> 00:19:43,507
might be easier to just read this.

347
00:19:45,668 --> 00:19:47,910
It's a bit simplified because I'm not a programmer,

348
00:19:48,370 --> 00:19:50,030
but the key principles are there.

349
00:19:51,071 --> 00:19:53,672
We take local acceleration, sprinkle it

350
00:19:53,792 --> 00:19:55,953
with parent acceleration, then we

351
00:19:56,033 --> 00:19:57,494
add a little bit of velocity gain

352
00:19:57,674 --> 00:20:00,295
and try to match the velocities and rigid bodies.

353
00:20:00,475 --> 00:20:03,477
And if the final pose is still not matching up,

354
00:20:03,577 --> 00:20:05,558
we can finish it up with position gain.

355
00:20:07,402 --> 00:20:10,244
And we take the resulting linear velocity

356
00:20:10,344 --> 00:20:12,265
and set it back to our rigid body.

357
00:20:12,786 --> 00:20:15,288
And we do the same for angular velocities.

358
00:20:17,449 --> 00:20:19,991
All gains and limits are exposed to our script.

359
00:20:20,311 --> 00:20:21,752
And this is what animator sees.

360
00:20:23,053 --> 00:20:25,996
By the way, this script is based on Lisp or Scheme.

361
00:20:26,696 --> 00:20:28,237
And our programmer, Dan Liebkoll,

362
00:20:28,317 --> 00:20:31,379
gave a talk about it here at GDC back in 2008.

363
00:20:31,960 --> 00:20:34,942
And it was called Adventure in Data Compilation.

364
00:20:36,523 --> 00:20:39,605
So all is good, I call it a success,

365
00:20:40,185 --> 00:20:45,288
but we found out that we need one more ragdoll for Ellie.

366
00:20:49,031 --> 00:20:51,552
This scene happens before the hospital one,

367
00:20:51,993 --> 00:20:54,134
but Joel is saving Ellie again.

368
00:20:55,715 --> 00:20:56,936
This time it's underwater.

369
00:20:58,482 --> 00:21:01,123
And we needed slightly different parameters for our ragdoll.

370
00:21:01,864 --> 00:21:03,865
Much higher damping on Ellie's arms and legs

371
00:21:03,925 --> 00:21:05,125
to simulate water drag.

372
00:21:05,946 --> 00:21:08,086
And also we needed to keyframe or animate

373
00:21:08,106 --> 00:21:09,607
different set of rigid bodies.

374
00:21:11,248 --> 00:21:14,209
It was the right time to move the ragdoll definitions

375
00:21:14,249 --> 00:21:15,090
to DC script.

376
00:21:17,491 --> 00:21:19,812
So I wrote a Python script for Maya,

377
00:21:19,952 --> 00:21:22,953
which exports the main parameters of ragdoll rigid bodies

378
00:21:23,033 --> 00:21:23,833
and their constraints.

379
00:21:25,775 --> 00:21:27,876
Later on, we decided more parameters,

380
00:21:28,396 --> 00:21:30,737
we added more parameters for Uncharted 4

381
00:21:31,118 --> 00:21:32,538
so we could change, for example,

382
00:21:32,578 --> 00:21:33,939
constraint limits on the fly.

383
00:21:36,301 --> 00:21:39,122
And what are the advantages of having ragdoll in script?

384
00:21:40,743 --> 00:21:42,544
We didn't have to touch the asset manager.

385
00:21:42,984 --> 00:21:45,466
The default ragdoll is still part of the skeleton, though.

386
00:21:46,666 --> 00:21:48,647
And I don't have to build it again

387
00:21:48,827 --> 00:21:50,388
should I need to add more ragdolls.

388
00:21:52,170 --> 00:21:56,294
I can just duplicate a few script lines, change a few numbers, and compile it.

389
00:21:57,475 --> 00:22:01,899
It's a matter of a few seconds instead of minutes, although I ended up saving a few

390
00:22:02,019 --> 00:22:08,185
extra Maya scenes as references for more sophisticated setups and exported regular settings from

391
00:22:08,205 --> 00:22:08,425
there.

392
00:22:09,589 --> 00:22:13,731
which means that further tweaking of numbers in script

393
00:22:13,871 --> 00:22:15,492
rendered my Maya scenes obsolete,

394
00:22:15,933 --> 00:22:17,554
and we had no tools to sync them.

395
00:22:17,914 --> 00:22:21,156
But honestly, this tool would be pretty easy to write.

396
00:22:21,636 --> 00:22:22,857
We just never really needed it.

397
00:22:23,818 --> 00:22:26,019
Bigger problem is that most artists

398
00:22:26,099 --> 00:22:27,560
are scared to touch the scripts.

399
00:22:32,043 --> 00:22:34,244
We have eventually decided to move everything

400
00:22:34,344 --> 00:22:36,126
ragdoll-related to DCScript

401
00:22:36,246 --> 00:22:38,427
and started calling it ragdoll profiles.

402
00:22:41,921 --> 00:22:44,863
So these are the building blocks of our regular profiles.

403
00:22:46,464 --> 00:22:47,905
And this is the real script.

404
00:22:51,867 --> 00:22:54,109
This is the regular definition I exported from Maya.

405
00:22:54,429 --> 00:22:56,130
There is like hundreds of lines, so I

406
00:22:56,190 --> 00:22:57,851
collapsed the block of text down.

407
00:22:59,092 --> 00:23:01,654
The regular definition is hooked up in the profile here.

408
00:23:04,155 --> 00:23:06,817
Here, I specify joins that are going to be keyframed.

409
00:23:07,457 --> 00:23:09,659
You know, you remember those blue rigid bodies

410
00:23:09,739 --> 00:23:10,720
I showed you before.

411
00:23:12,420 --> 00:23:13,741
And this one is interesting.

412
00:23:14,421 --> 00:23:17,202
Here I specify collision layers for my rigid bodies.

413
00:23:18,063 --> 00:23:21,864
The script says that they don't have any collision by default,

414
00:23:22,124 --> 00:23:24,185
but I added a set of rigid bodies

415
00:23:24,265 --> 00:23:25,886
that can collide with other ragdolls

416
00:23:25,966 --> 00:23:26,986
and with the environment.

417
00:23:27,726 --> 00:23:29,607
I can add as many sets as I want.

418
00:23:32,043 --> 00:23:32,944
And this is our baby.

419
00:23:33,584 --> 00:23:35,745
I defined three different keyframe controllers

420
00:23:36,326 --> 00:23:39,288
and assigned them to three different sets of rigid bodies.

421
00:23:39,948 --> 00:23:44,451
It means each set can be animated differently in-game.

422
00:23:44,651 --> 00:23:45,512
You will see later why.

423
00:23:47,894 --> 00:23:50,435
And now I'd like to show you the real beauty of our setup.

424
00:23:51,516 --> 00:23:53,998
I can just duplicate a handful of lines in script,

425
00:23:54,138 --> 00:23:56,760
change a few parameters, and I have another possibly totally

426
00:23:56,780 --> 00:23:57,881
different ragdoll behavior.

427
00:23:58,662 --> 00:24:01,384
But watch, I can duplicate this one again,

428
00:24:01,404 --> 00:24:04,245
hook up regular definition with different motor settings,

429
00:24:04,325 --> 00:24:05,466
and I have another profile.

430
00:24:08,067 --> 00:24:10,769
So what are the advantages of regular profiles?

431
00:24:11,809 --> 00:24:14,491
I can go nuts and create many profiles very quick.

432
00:24:16,132 --> 00:24:17,773
I'm not limited to one character.

433
00:24:18,033 --> 00:24:20,434
All of them work as long as the characters

434
00:24:20,514 --> 00:24:22,355
are using the same skeletal hierarchy.

435
00:24:23,116 --> 00:24:23,956
And here's the big thing.

436
00:24:24,476 --> 00:24:27,578
I no longer need a programmer to be able to test regulars in game.

437
00:24:28,888 --> 00:24:35,633
I have all profiles in debug menu, so I can test the ragdolls anywhere I want, and possibly

438
00:24:35,874 --> 00:24:36,654
even where I shouldn't.

439
00:24:55,644 --> 00:25:01,585
Underneath all the bravado, you're just a sad little boy with delusions of grandeur.

440
00:25:02,906 --> 00:25:03,906
Oh, by the way, I can't pass.

441
00:25:03,926 --> 00:25:04,586
Shit.

442
00:25:04,646 --> 00:25:05,307
So long, Nathan.

443
00:25:05,347 --> 00:25:05,707
Nathan!

444
00:25:05,787 --> 00:25:06,207
Nathan!

445
00:25:06,347 --> 00:25:06,927
Nathan!

446
00:25:07,047 --> 00:25:07,407
Nathan!

447
00:25:07,427 --> 00:25:07,847
Nathan!

448
00:25:07,987 --> 00:25:08,307
Nathan!

449
00:25:08,448 --> 00:25:08,728
Nathan!

450
00:25:08,748 --> 00:25:09,128
Nathan!

451
00:25:09,268 --> 00:25:09,468
Nathan!

452
00:25:09,528 --> 00:25:10,248
Nathan!

453
00:25:10,328 --> 00:25:10,588
Nathan!

454
00:25:10,608 --> 00:25:10,968
Nathan!

455
00:25:11,008 --> 00:25:11,328
Nathan!

456
00:25:11,488 --> 00:25:11,849
Nathan!

457
00:25:11,869 --> 00:25:12,369
Nathan!

458
00:25:12,489 --> 00:25:12,749
Nathan!

459
00:25:12,769 --> 00:25:13,069
Nathan!

460
00:25:18,541 --> 00:25:21,704
Now that you have a pretty clear idea how we animate ragdolls

461
00:25:22,204 --> 00:25:25,868
and how we set them up, I can finally show you the best stuff

462
00:25:25,908 --> 00:25:27,229
we did for Uncharted 4.

463
00:25:31,193 --> 00:25:33,435
And we started with ragdoll vehicles.

464
00:25:35,497 --> 00:25:37,599
I mean, ragdolls in vehicles.

465
00:25:39,140 --> 00:25:42,123
So we started prototyping vehicles when The Last of Us

466
00:25:42,223 --> 00:25:43,945
was still in full production.

467
00:25:45,687 --> 00:25:48,633
It was a great proving ground for our animation controllers

468
00:25:48,994 --> 00:25:52,221
and mainly for testing of the parent acceleration limit.

469
00:25:53,123 --> 00:25:55,028
There's no better test than hitting a wall

470
00:25:55,108 --> 00:25:56,030
at 40 miles per hour.

471
00:25:58,782 --> 00:26:00,922
Of course, designers chose a car with no roof,

472
00:26:01,202 --> 00:26:03,023
so we can see every little detail.

473
00:26:03,423 --> 00:26:04,723
Well, no detail at all, actually.

474
00:26:05,043 --> 00:26:05,423
Let's see.

475
00:26:06,004 --> 00:26:07,044
Yeah, it looks terrible.

476
00:26:07,464 --> 00:26:10,245
We could probably add some lean additives

477
00:26:10,285 --> 00:26:13,466
to simulate reactions to vehicles, angular changes,

478
00:26:13,646 --> 00:26:15,726
but most likely it just wouldn't cut it.

479
00:26:17,167 --> 00:26:18,887
Because we were planning on having

480
00:26:18,947 --> 00:26:21,388
some wild off-road sections on Madagascar.

481
00:26:21,948 --> 00:26:24,128
So let's see how Regdalt handles it.

482
00:26:30,523 --> 00:26:31,444
Yeah, it's way better.

483
00:26:32,184 --> 00:26:35,006
Jake's chest moves independently on the car seat.

484
00:26:35,566 --> 00:26:38,388
Nothing is breaking, even when the car is swinging wildly.

485
00:26:39,408 --> 00:26:40,549
Let's see how we pull it off.

486
00:26:42,970 --> 00:26:44,351
Setup is actually pretty simple.

487
00:26:45,072 --> 00:26:46,732
Lower body is fully keyframed,

488
00:26:47,773 --> 00:26:51,195
and we simulate it on the spine, head, and arms,

489
00:26:51,375 --> 00:26:51,995
up to hands.

490
00:26:53,136 --> 00:26:54,457
Keyframing hands ensures

491
00:26:54,497 --> 00:26:56,038
that they won't leave the steering wheel.

492
00:26:58,159 --> 00:26:59,159
Collisions are interesting.

493
00:27:00,108 --> 00:27:03,110
We don't have collisions on anything but spine and head.

494
00:27:04,230 --> 00:27:07,211
We let it collide only with the seat and the steering wheel.

495
00:27:09,613 --> 00:27:11,954
We were initially scared of letting the character collide

496
00:27:11,974 --> 00:27:13,694
with anything in the vehicle, and we

497
00:27:13,734 --> 00:27:15,755
were ready to solve it with different limits.

498
00:27:16,175 --> 00:27:18,936
But to our surprise, spine's interaction

499
00:27:18,996 --> 00:27:21,077
with the seat's collision looked very natural.

500
00:27:21,337 --> 00:27:22,058
You will see it later.

501
00:27:25,170 --> 00:27:28,833
And to make your life easier, I crunched some numbers

502
00:27:28,893 --> 00:27:31,355
from all Uncharted 4 ragdoll profiles

503
00:27:31,495 --> 00:27:34,318
and tried to translate them to clear visual form.

504
00:27:34,898 --> 00:27:35,799
I call it heat maps.

505
00:27:36,900 --> 00:27:39,802
The color legend is simple two-dimensional diagram.

506
00:27:40,723 --> 00:27:43,966
Vertical axis is strength and horizontal axis is stiffness.

507
00:27:44,986 --> 00:27:47,188
I colored the rigid bodies so you can see

508
00:27:47,248 --> 00:27:49,871
how the keyframe controller influences the simulation.

509
00:27:50,591 --> 00:27:53,153
Remember that keyframe controller works in world space.

510
00:27:55,138 --> 00:27:59,522
Joints have their own colors and they are displayed as those little dots connecting

511
00:27:59,582 --> 00:28:00,243
rigid bodies.

512
00:28:01,003 --> 00:28:04,386
I remind you that motors work in a local space.

513
00:28:05,087 --> 00:28:10,232
And finally, the greyed out stuff means that the connected rigid bodies are keyframed.

514
00:28:12,514 --> 00:28:14,115
So how do you read the picture?

515
00:28:15,581 --> 00:28:19,123
For vehicles, we used strong but soft keyframe controller

516
00:28:19,223 --> 00:28:20,964
for all simulated rigid bodies.

517
00:28:21,504 --> 00:28:24,346
It means that the ragdoll can follow the simulation really

518
00:28:24,386 --> 00:28:28,588
well, but rigid bodies can be moved away from the pose,

519
00:28:29,228 --> 00:28:32,290
even with subtle impacts and changes of momentum.

520
00:28:32,990 --> 00:28:34,991
Animation feels pretty soft overall.

521
00:28:36,052 --> 00:28:39,694
Next, we can see that Spine has super weak motors,

522
00:28:39,814 --> 00:28:40,955
but on the stiffer side.

523
00:28:41,455 --> 00:28:42,636
They can barely support it.

524
00:28:43,718 --> 00:28:46,900
Having soft spine allows for nice compression in the spine.

525
00:28:48,301 --> 00:28:52,103
Although, it needs to be held by strong and stiff arms.

526
00:28:52,524 --> 00:28:54,245
Otherwise, it would compress too easily.

527
00:28:56,166 --> 00:28:58,708
It's actually interesting how much the strong arms

528
00:28:58,808 --> 00:29:00,049
influence the final result.

529
00:29:01,370 --> 00:29:04,252
They make Drake look like he's fighting the steering wheel.

530
00:29:05,672 --> 00:29:07,534
The side to side swings are wilder

531
00:29:07,694 --> 00:29:09,715
and have more natural angular motion in it.

532
00:29:11,770 --> 00:29:15,956
On the other side, the weak arms make the side-to-side motion feel too linear thanks

533
00:29:15,996 --> 00:29:22,125
to the majority of influence coming from the keyframe controller, and the right side feels

534
00:29:22,205 --> 00:29:24,288
too mushy and lifeless to my taste.

535
00:29:24,909 --> 00:29:27,393
Driving 4x4 should feel wild and exciting.

536
00:29:30,316 --> 00:29:33,138
And let me demonstrate the effect of parent acceleration

537
00:29:33,178 --> 00:29:34,158
limit one more time.

538
00:29:34,879 --> 00:29:36,900
The red volumes you see in the video

539
00:29:36,980 --> 00:29:39,642
demonstrate an animation pose before simulation.

540
00:29:40,322 --> 00:29:43,204
This is how our characters would be moving without physics.

541
00:29:44,624 --> 00:29:47,186
And so what the parent acceleration limit can do for us?

542
00:29:48,707 --> 00:29:50,828
It prevents transferring too much acceleration

543
00:29:50,888 --> 00:29:53,049
to our ragdoll and therefore breaking it.

544
00:29:54,295 --> 00:29:56,796
A real person would be thrown against the dashboard

545
00:29:56,916 --> 00:29:57,956
with these impacts.

546
00:29:58,756 --> 00:30:02,257
Also notice how Elena's spine bounces off the seat

547
00:30:02,317 --> 00:30:03,057
when they collide.

548
00:30:04,557 --> 00:30:07,818
Thanks to this feature, our ragdoll can handle anything.

549
00:30:08,278 --> 00:30:10,659
But it doesn't mean it's always the best tool.

550
00:30:13,359 --> 00:30:17,280
Ragdoll is good for small bumps and realistic weight shifting.

551
00:30:18,520 --> 00:30:21,901
But we use full body animations with no ragdoll

552
00:30:21,961 --> 00:30:22,721
for the hard hits.

553
00:30:26,419 --> 00:30:32,703
So while I'm watching it, I'm going to put, yeah, so start the hard hits.

554
00:30:33,284 --> 00:30:39,368
And by the way, our programmer, Edward Pereira, is going to talk about off-roading in HRF4

555
00:30:39,428 --> 00:30:47,053
in this same room today at 2pm, so you can learn how he pulled off the physics of a car

556
00:30:47,073 --> 00:30:47,613
and stuff.

557
00:30:48,854 --> 00:30:51,116
Oh yeah, I was driving recklessly a little bit.

558
00:30:53,672 --> 00:30:56,833
Let's talk about something entirely different, and that is player climbing.

559
00:30:59,354 --> 00:31:04,695
One of the main goals for the climbing mechanic was to give players a very analog and organic

560
00:31:04,795 --> 00:31:05,095
feel.

561
00:31:05,335 --> 00:31:10,656
The same feeling the real rock climbers have when they search for the next handhold on

562
00:31:10,676 --> 00:31:13,537
the sheer rock face while balancing on their feet.

563
00:31:15,438 --> 00:31:16,278
It looks like a ballet.

564
00:31:18,333 --> 00:31:21,454
Our characters were always climbing these perfectly flat

565
00:31:21,534 --> 00:31:25,637
vertical walls, but we wanted to move away from that.

566
00:31:27,237 --> 00:31:29,479
We wanted to climb slabs and overhangs,

567
00:31:29,719 --> 00:31:34,721
and when the overhang becomes a roof,

568
00:31:34,921 --> 00:31:38,103
Jake swings his legs and powers through that section

569
00:31:38,823 --> 00:31:40,764
thanks to his enormous upper body strength.

570
00:31:41,845 --> 00:31:44,206
And when he's not climbing these impossible rocks,

571
00:31:44,606 --> 00:31:45,627
you can find him hanging out.

572
00:31:47,318 --> 00:31:50,399
on a big-ass truck speeding through the countryside of Madagascar.

573
00:31:51,959 --> 00:31:55,580
And to do all that, you need a crazy amount of animation.

574
00:31:56,640 --> 00:31:59,381
Just to make the player reach for the next handhold

575
00:31:59,601 --> 00:32:01,282
requires dozens of reach poses.

576
00:32:01,922 --> 00:32:05,023
Basically, every cross-section on the spiderweb is a pose

577
00:32:05,563 --> 00:32:07,723
that has to blend well with all of its neighbors.

578
00:32:09,762 --> 00:32:12,862
In the game, they constantly blend based on player's input.

579
00:32:13,403 --> 00:32:15,643
And once the player reaches the next handhold,

580
00:32:16,283 --> 00:32:18,744
we played a short transition animation.

581
00:32:20,084 --> 00:32:22,405
It's really hard to keep all animations consistent,

582
00:32:22,545 --> 00:32:25,246
and we kept seeing a little hitches in player's motion.

583
00:32:26,566 --> 00:32:28,687
We thought it's a great opportunity

584
00:32:28,747 --> 00:32:31,807
to physics simulation, to smooth everything out.

585
00:32:34,008 --> 00:32:35,688
And this was our early prototype.

586
00:32:37,116 --> 00:32:40,078
Notice how the left side is quite a bit noisier

587
00:32:40,138 --> 00:32:42,179
than the right side where the ragdoll is running.

588
00:32:47,622 --> 00:32:49,744
And this was recorded from the latest build.

589
00:32:51,024 --> 00:32:54,026
As you can see, our animators did an excellent job

590
00:32:54,246 --> 00:32:55,887
and animations blend much better.

591
00:32:57,448 --> 00:33:00,390
But can you tell which side has the ragdoll running?

592
00:33:00,410 --> 00:33:04,973
Okay, hands up who thinks it's the right side.

593
00:33:09,533 --> 00:33:11,515
Wow, 15 people, 20?

594
00:33:12,255 --> 00:33:13,156
Yeah, you are correct.

595
00:33:13,777 --> 00:33:14,417
It's the right side.

596
00:33:15,218 --> 00:33:15,878
I'll show you why.

597
00:33:15,898 --> 00:33:22,144
Yeah, there is this very, very subtle difference.

598
00:33:22,624 --> 00:33:26,368
The ragdoll has this nice, subtle overlap to Drake's butt.

599
00:33:29,150 --> 00:33:31,312
And the character on the left side

600
00:33:31,672 --> 00:33:34,915
just kinda eases into a pose after each move.

601
00:33:37,053 --> 00:33:39,314
You would totally feel the difference on the stick though.

602
00:33:39,714 --> 00:33:41,455
It feels very different.

603
00:33:44,456 --> 00:33:45,877
Here, I slowed it down for you

604
00:33:45,957 --> 00:33:48,258
so you can see better the difference

605
00:33:48,338 --> 00:33:52,080
between animation drawn in red and final result.

606
00:33:53,421 --> 00:33:55,041
Everything is happening so fast

607
00:33:55,322 --> 00:33:56,682
that you can barely see a difference,

608
00:33:56,862 --> 00:33:59,003
but you can totally feel it while playing.

609
00:34:04,990 --> 00:34:08,191
and setting up the climbing radar was a real challenge.

610
00:34:09,311 --> 00:34:11,812
I wanted to crank the softness in Drake's body up

611
00:34:12,452 --> 00:34:14,452
for added momentum and nice overlap,

612
00:34:14,672 --> 00:34:16,813
but I had to be careful not to introduce

613
00:34:16,853 --> 00:34:18,393
hyper extensions in his arms.

614
00:34:19,233 --> 00:34:20,914
Basically, everything was tailored

615
00:34:21,054 --> 00:34:22,374
to the worst case scenario,

616
00:34:22,514 --> 00:34:24,475
and there was climbing on dynamic objects.

617
00:34:26,475 --> 00:34:27,655
Here we have the heat map again.

618
00:34:29,082 --> 00:34:31,864
Hands and feet are keyframed to ensure proper contact

619
00:34:31,884 --> 00:34:34,286
with the environment, and also notice

620
00:34:34,646 --> 00:34:36,968
that I keyframed the forearms as well.

621
00:34:38,289 --> 00:34:40,951
We needed arms and upper body to be super strong

622
00:34:41,131 --> 00:34:43,813
because they carried most of the body weight.

623
00:34:45,034 --> 00:34:47,396
Spine was pretty weak to allow the overlap,

624
00:34:48,337 --> 00:34:51,539
and legs were almost unaffected by the keyframe controller,

625
00:34:51,679 --> 00:34:53,821
but were powered using motors and joints.

626
00:34:54,917 --> 00:34:59,962
You can clearly see that the upper body is firmly controlled in world space thanks to keyframe controller.

627
00:35:00,743 --> 00:35:07,329
And its effect tapers down towards the legs and the legs are animated by motors almost exclusively in local space.

628
00:35:11,133 --> 00:35:13,135
And here's our test for the climbing ragdoll.

629
00:35:13,895 --> 00:35:20,081
Drake's body reacts naturally to impacts coming from the truck, moving the lower body in a nice springy fashion.

630
00:35:23,815 --> 00:35:25,036
I'm going to let it run one more time.

631
00:35:25,976 --> 00:35:29,316
Basically, every time the truck does this big bump,

632
00:35:29,356 --> 00:35:31,257
it shakes the body nicely.

633
00:35:31,277 --> 00:35:32,397
It does this.

634
00:35:34,017 --> 00:35:34,217
Think.

635
00:35:35,937 --> 00:35:37,158
Okay.

636
00:35:39,238 --> 00:35:41,939
But we had some really sharp corners in our game,

637
00:35:42,679 --> 00:35:46,879
and the ragdoll got sometimes stuck on invisible collisions.

638
00:35:47,480 --> 00:35:49,840
So we tried to disable the ragdoll collision,

639
00:35:50,480 --> 00:35:51,900
and we saw no side effects.

640
00:35:53,632 --> 00:35:55,612
Occasional clipping is way better than this.

641
00:35:59,053 --> 00:36:01,293
And this is my favorite part, it's the hang climbing.

642
00:36:03,214 --> 00:36:05,995
Player can climb or jump to a hang position

643
00:36:06,315 --> 00:36:07,835
under totally arbitrary angle.

644
00:36:08,435 --> 00:36:10,336
This is how our early prototype looked like.

645
00:36:10,536 --> 00:36:11,676
Yeah, it's pretty terrible.

646
00:36:11,696 --> 00:36:13,596
It's basically just a blend into a hang pose.

647
00:36:14,557 --> 00:36:16,737
But before we committed to creating millions

648
00:36:16,797 --> 00:36:19,738
of different landing animations, I gave the ragdoll a try.

649
00:36:22,404 --> 00:36:25,166
I created a new profile with super loose lower body

650
00:36:25,606 --> 00:36:28,588
and Drake swings around properly when he lands in hang position.

651
00:36:29,649 --> 00:36:32,912
But I quickly realized that this profile looks great

652
00:36:32,992 --> 00:36:37,235
when Drake is just hanging, but it felt too loose

653
00:36:37,315 --> 00:36:39,337
when Drake tried to actively do something.

654
00:36:40,417 --> 00:36:43,760
So I created a new stiffer profile for hang reaches.

655
00:36:45,261 --> 00:36:49,284
The thing is, we switch ragdolls in code based on player state.

656
00:36:50,160 --> 00:36:55,082
So no ragdolls most of the time, driving ragdolls in vehicles,

657
00:36:55,462 --> 00:36:58,023
climbing, and now hang climbing.

658
00:36:59,164 --> 00:37:02,185
But we had two profiles for one hang state.

659
00:37:04,586 --> 00:37:08,248
And I got an idea to use our animation event system, which

660
00:37:08,268 --> 00:37:11,730
we simply call EFFs for enabling and disabling

661
00:37:11,790 --> 00:37:12,570
ragdoll profiles.

662
00:37:13,790 --> 00:37:16,572
We like scripts, so it's just a text file

663
00:37:16,632 --> 00:37:18,813
with similar syntax to XML.

664
00:37:20,704 --> 00:37:23,365
But it's really simple, and most of our animators

665
00:37:23,425 --> 00:37:26,027
have been using it already for triggering events

666
00:37:26,107 --> 00:37:28,749
like weapon reloads, particle effects, and sounds.

667
00:37:29,670 --> 00:37:31,811
And I was excited. I couldn't wait to test it out.

668
00:37:33,012 --> 00:37:36,034
I recorded a slow-motion video of Drake jumping down to a hang

669
00:37:36,395 --> 00:37:37,415
and moving side to side.

670
00:37:38,396 --> 00:37:40,037
Next to his feet is a debug drawer

671
00:37:40,057 --> 00:37:42,299
with the name of currently active Rango profile

672
00:37:42,439 --> 00:37:43,340
with its blend value.

673
00:37:44,868 --> 00:37:48,611
Stiffer ragdoll fades in every time I press the left analog stick,

674
00:37:48,971 --> 00:37:51,912
and when I release it, the looser version takes over again.

675
00:37:52,953 --> 00:37:56,455
If I go side to side, these two profiles keep blending in and out constantly.

676
00:37:57,415 --> 00:37:59,597
And Drake's momentum carries over each move,

677
00:37:59,677 --> 00:38:03,439
so I can make him swing more and more every time I change direction.

678
00:38:03,979 --> 00:38:04,980
It feels very organic.

679
00:38:10,302 --> 00:38:13,527
And if I was doing left and right, left and right,

680
00:38:13,567 --> 00:38:15,590
basically those two profiles would be constantly blending

681
00:38:16,191 --> 00:38:16,571
in and out.

682
00:38:19,135 --> 00:38:19,255
So.

683
00:38:20,562 --> 00:38:25,788
Sequencing of ragdoll profiles gave us full control over when and which ragdoll profile

684
00:38:25,908 --> 00:38:27,470
to use with frame precision.

685
00:38:28,351 --> 00:38:31,774
We can also control how quickly ragdolls fade in and out.

686
00:38:32,355 --> 00:38:36,079
And yes, we can blend between ragdoll profiles seamlessly.

687
00:38:36,760 --> 00:38:39,382
This started the ragdoll revolution.

688
00:38:40,364 --> 00:38:42,466
Ragdolls started appearing everywhere in the game.

689
00:38:43,629 --> 00:38:46,891
But it also gave animators more responsibilities

690
00:38:47,351 --> 00:38:50,272
because once the ragdoll profile is enabled,

691
00:38:50,913 --> 00:38:52,994
it's going to keep running until you turn it off again.

692
00:38:53,014 --> 00:38:56,215
It was extremely difficult to safeguard

693
00:38:56,355 --> 00:38:58,196
all possible transitions.

694
00:38:59,176 --> 00:39:00,957
And we kept seeing players running around

695
00:39:01,418 --> 00:39:03,158
with the ragdoll enabled all the time.

696
00:39:12,082 --> 00:39:13,483
No, no, don't worry, it's fine.

697
00:39:17,866 --> 00:39:21,529
Yes, so to fix this, we introduced a simple rule.

698
00:39:22,670 --> 00:39:27,194
Game keeps the ragdoll profile running only if the currently playing animation contains

699
00:39:27,214 --> 00:39:28,095
a ragdoll event.

700
00:39:28,975 --> 00:39:35,220
This feature still allowed a seamlessly sequencing of different ragdoll profiles, but it also

701
00:39:35,260 --> 00:39:38,023
made sure that we don't run ragdoll where we don't want to.

702
00:39:38,443 --> 00:39:41,305
You know, no ragdoll is better than broken ragdoll.

703
00:39:45,281 --> 00:39:50,864
and correct weighting between keyframe controllers and motors was crucial for hang climbing.

704
00:39:52,725 --> 00:39:55,306
Arms were holding almost the entire body weight.

705
00:39:56,587 --> 00:40:01,390
It quickly tapers down towards the spine and it has almost no effect in the legs.

706
00:40:02,550 --> 00:40:04,551
It's used only to stabilize vibrations.

707
00:40:05,632 --> 00:40:10,855
Motor forces and stiffness were cranked up in the spine to hold the pose of the lower body.

708
00:40:14,057 --> 00:40:17,659
The stiffer ragdoll is just a slightly modified version of the looser version.

709
00:40:19,020 --> 00:40:24,743
More of the body is held in place by the keyframe controller and also the legs go to similar

710
00:40:24,783 --> 00:40:26,123
treatment to lift them up more.

711
00:40:27,484 --> 00:40:31,686
By switching to a stiffer profile, we are basically simulating muscles putting more

712
00:40:31,726 --> 00:40:33,547
work towards reaching the next handhold.

713
00:40:36,254 --> 00:40:40,595
Unlike the regular climbing ragdoll, this one had collisions enabled and I'd like to

714
00:40:40,635 --> 00:40:41,295
show you why.

715
00:40:42,216 --> 00:40:46,557
It's because the hang climbing doesn't mean the player is just hanging down free of any

716
00:40:46,657 --> 00:40:47,137
obstacles.

717
00:40:47,757 --> 00:40:52,218
In this case, Drake's whole upper body would sink into geometry should he have no collision.

718
00:40:52,859 --> 00:40:56,640
The side effect is that his chest can push the dynamics objects around.

719
00:41:00,146 --> 00:41:02,687
And I'd like to show you one more video demonstrating

720
00:41:03,147 --> 00:41:05,528
how seamless the transitions between hang climbing

721
00:41:05,588 --> 00:41:06,808
and a regular climbing are.

722
00:41:07,769 --> 00:41:10,189
I also poked the cage with the mouse in this video

723
00:41:10,650 --> 00:41:13,030
so you can see how everything's reacting naturally.

724
00:41:14,211 --> 00:41:15,691
Somebody should make a game where players

725
00:41:15,751 --> 00:41:17,832
are finally allowed to do this type of stuff.

726
00:41:21,953 --> 00:41:24,054
Okay, now onto a more explosive stuff.

727
00:41:25,498 --> 00:41:28,619
Every Uncharted had a chase sequence.

728
00:41:29,080 --> 00:41:31,000
And of course, Uncharted 4 is no different.

729
00:41:32,301 --> 00:41:35,021
Mad Max came out no long before we started working

730
00:41:35,101 --> 00:41:36,042
on our chase sequence.

731
00:41:36,622 --> 00:41:39,743
We loved how the crashes were staged so well.

732
00:41:39,923 --> 00:41:42,003
Perfect angles, perfect motion and timing

733
00:41:42,484 --> 00:41:43,364
was really amazing.

734
00:41:43,944 --> 00:41:47,605
But how could we achieve similar thing in a video game?

735
00:41:50,686 --> 00:41:52,047
And we started with animation.

736
00:41:53,478 --> 00:41:56,740
We decided to have a maximum of two people per vehicle.

737
00:41:58,020 --> 00:42:00,501
We had to account for each character being killed

738
00:42:00,941 --> 00:42:02,362
individually or together.

739
00:42:03,002 --> 00:42:05,863
And no, they don't just freeze at the end of animation.

740
00:42:06,603 --> 00:42:09,325
We physicalized them so they keep moving

741
00:42:09,385 --> 00:42:10,485
without being animated,

742
00:42:10,845 --> 00:42:13,106
which is actually not entirely true.

743
00:42:15,107 --> 00:42:17,828
I did this test to see how we could animate characters

744
00:42:18,188 --> 00:42:19,428
without actually animating them.

745
00:42:20,583 --> 00:42:23,405
When I kill the guy, he plays a very short death animation

746
00:42:23,505 --> 00:42:25,346
and then blends into one single pose

747
00:42:25,486 --> 00:42:27,268
which he holds using regular motors

748
00:42:27,428 --> 00:42:28,949
until he stops under the stairs.

749
00:42:30,170 --> 00:42:32,051
I learned how critical the pose is

750
00:42:32,131 --> 00:42:33,572
for smooth rolling motion.

751
00:42:35,274 --> 00:42:38,276
Arms need to be close to the body, legs pretty straight.

752
00:42:39,236 --> 00:42:42,719
The more the shape resembles a cylinder, the better.

753
00:42:43,560 --> 00:42:46,001
Also, proper friction on the regular played a big part.

754
00:42:47,147 --> 00:42:51,469
I used all this knowledge many months later when I was begging a programmer to implement

755
00:42:51,509 --> 00:42:51,669
this.

756
00:42:52,189 --> 00:42:56,051
You know, you need a lot of arguments to sell the idea to a programmer.

757
00:42:57,692 --> 00:43:00,753
So let me show you my death animation again.

758
00:43:00,953 --> 00:43:02,894
Notice the cylindrical rolling pose.

759
00:43:06,095 --> 00:43:07,056
And this is how it's in the game.

760
00:43:08,649 --> 00:43:13,991
It worked pretty well, although Ragdolls have a really hard time to keep the post intact

761
00:43:14,171 --> 00:43:16,452
when they hit the ground at 50 mph.

762
00:43:17,352 --> 00:43:20,674
One little bump on the ground and the post turns into a mess.

763
00:43:30,817 --> 00:43:33,138
We used a similar system for off-road vehicles.

764
00:43:41,578 --> 00:43:43,739
So, how do we animate the vehicles?

765
00:43:45,100 --> 00:43:49,324
The convoy vehicles are following a set of splines based on what the player is doing.

766
00:43:49,524 --> 00:43:52,046
It's all scripted by our awesome designers.

767
00:43:53,367 --> 00:43:58,110
And once the driver dies, or the vehicle is damaged enough, we trigger a death.

768
00:43:59,752 --> 00:44:01,973
We disconnect the vehicle from its spline.

769
00:44:03,074 --> 00:44:04,996
We store its last moving vector.

770
00:44:06,287 --> 00:44:08,569
And we play the animation along the stored vector

771
00:44:08,669 --> 00:44:09,910
using the keyframe controller.

772
00:44:11,631 --> 00:44:14,473
Yes, even vehicles are running physics animation.

773
00:44:15,274 --> 00:44:17,175
We use pretty stiff keyframe controller,

774
00:44:17,436 --> 00:44:20,098
so the simulation matches the animation the best it can.

775
00:44:20,958 --> 00:44:23,240
And why are we running a physics animation?

776
00:44:24,840 --> 00:44:28,441
So we can animate our vehicles until something really bad

777
00:44:28,481 --> 00:44:28,862
happens.

778
00:44:30,022 --> 00:44:33,304
And it happens sometimes that our object hits a small bump

779
00:44:33,424 --> 00:44:34,724
and moves away from the pose.

780
00:44:35,665 --> 00:44:39,166
We measure the distance between rigid bodies and the animation

781
00:44:39,226 --> 00:44:40,207
pose every frame.

782
00:44:41,227 --> 00:44:43,568
And when the error distance becomes too large,

783
00:44:43,928 --> 00:44:45,509
we fade out the keyframe controller.

784
00:44:46,710 --> 00:44:49,111
It normally doesn't happen because after a small bump,

785
00:44:49,131 --> 00:44:51,632
the keyframe controller cannot recover the animation pose

786
00:44:51,752 --> 00:44:52,072
easily.

787
00:44:53,264 --> 00:44:56,206
and only a major collision could stop animation from playing.

788
00:44:57,467 --> 00:44:59,829
And the major collision is usually a player

789
00:45:00,570 --> 00:45:02,111
smashing everything with his car,

790
00:45:03,052 --> 00:45:04,853
which is the biggest advantage of this system.

791
00:45:06,354 --> 00:45:08,176
We always get a better performance

792
00:45:08,316 --> 00:45:10,478
than just letting the vehicles explode randomly,

793
00:45:11,398 --> 00:45:12,699
and it's pretty safe to use.

794
00:45:13,961 --> 00:45:15,942
As a bonus, the keyframe controller

795
00:45:16,002 --> 00:45:17,844
snaps the animation to the ground for us.

796
00:45:19,120 --> 00:45:27,303
The only thing that I don't like about the system is that the objects might jitter a little bit when they are being pushed too far away from the animation pose.

797
00:45:27,823 --> 00:45:31,224
But the keyframe controller haven't turned itself off yet.

798
00:45:31,924 --> 00:45:35,345
But I think we could fix it if we were given more time.

799
00:45:41,707 --> 00:45:41,947
Ok.

800
00:45:43,667 --> 00:45:47,088
And we have this epic cinematic moment when you take over the jeep.

801
00:45:53,279 --> 00:45:58,604
Yeah, even the truck was animated with physics animation.

802
00:45:59,845 --> 00:46:02,047
Okay, now onto the boat chase.

803
00:46:03,869 --> 00:46:05,490
It's an opening sequence of our game.

804
00:46:06,231 --> 00:46:08,653
Drake and his brother Sam are being chased

805
00:46:08,733 --> 00:46:10,435
in their little boat on a stormy sea

806
00:46:10,495 --> 00:46:13,838
by guys on speedboats and other guys on big boats,

807
00:46:14,339 --> 00:46:16,481
and they throw mines at our poor little boat.

808
00:46:17,001 --> 00:46:18,503
You should play it, it's really fun.

809
00:46:19,860 --> 00:46:25,325
So, the sea is really bumpy and our little boat is widely moving up and down and side to side

810
00:46:25,405 --> 00:46:28,227
while Sam is in the back of the boat trying to shoot the guys.

811
00:46:29,528 --> 00:46:32,771
I tried to simulate the bumps by baking into animation,

812
00:46:33,172 --> 00:46:36,635
but you could tell that Sam's body is not moving in sync with the sea.

813
00:46:37,275 --> 00:46:40,538
This video is from Final Game when we ran physics on Sam.

814
00:46:44,002 --> 00:46:47,323
We keyframed Sam's hand and feet to pin them down to the boat.

815
00:46:48,043 --> 00:46:51,925
And we let only the right arm collide with the boat

816
00:46:53,205 --> 00:46:55,486
to prevent clipping when he's aiming.

817
00:47:02,009 --> 00:47:05,270
Sam's aim poses didn't have any instability baked in.

818
00:47:05,550 --> 00:47:08,432
So I let our animation controllers work really hard

819
00:47:08,632 --> 00:47:09,632
and simulate it for us.

820
00:47:11,126 --> 00:47:14,149
Sam's whole body has pretty soft keyframe controller,

821
00:47:14,369 --> 00:47:16,410
while motors were basically holding

822
00:47:16,450 --> 00:47:17,732
the animation pose for us.

823
00:47:19,313 --> 00:47:21,495
I stiffened his right arm a little bit more

824
00:47:21,595 --> 00:47:23,536
in world space using keyframe controller

825
00:47:23,676 --> 00:47:24,677
so he could aim better.

826
00:47:26,279 --> 00:47:29,181
And did the same for the head so it's not bobbing around.

827
00:47:29,641 --> 00:47:32,624
We wanted Sam to feel sharp and aggressive and not sleepy.

828
00:47:35,102 --> 00:47:38,203
Similar to the Jeep, we disabled ragdoll for the big bumps,

829
00:47:38,724 --> 00:47:40,384
where the sand falls down to the ground

830
00:47:40,524 --> 00:47:42,965
and used it only for small bumps and weight shifts.

831
00:47:44,386 --> 00:47:47,347
It was super easy to implement with our animation event

832
00:47:47,367 --> 00:47:47,707
system.

833
00:47:50,588 --> 00:47:54,210
And this sequence is a prime example

834
00:47:54,230 --> 00:47:56,931
of how we used ragdoll as a really simple post-processing

835
00:47:56,991 --> 00:47:57,171
tool.

836
00:47:59,075 --> 00:48:02,038
Drake is being dragged behind the truck on a rope

837
00:48:02,199 --> 00:48:03,160
and going really fast,

838
00:48:03,320 --> 00:48:04,981
and he's desperately trying to reach it.

839
00:48:06,223 --> 00:48:08,105
You can steer Drake side to side.

840
00:48:08,385 --> 00:48:10,227
You can make him climb the rope up and down.

841
00:48:10,848 --> 00:48:13,090
All this is happening on a pretty bumpy road.

842
00:48:13,811 --> 00:48:17,394
So his legs kept clipping the ground quite a bit.

843
00:48:18,856 --> 00:48:20,718
We tried to use a rag doll to fix it.

844
00:48:23,078 --> 00:48:24,619
The profile is super simple.

845
00:48:25,679 --> 00:48:27,881
Everything except his legs is key framed

846
00:48:28,962 --> 00:48:31,183
and the legs are trying to match the animation 100%.

847
00:48:33,084 --> 00:48:36,466
By the way, I zeroed friction on them for better stability.

848
00:48:38,628 --> 00:48:40,289
Let me step through a few frames

849
00:48:40,369 --> 00:48:43,050
to give you a better idea of what was happening.

850
00:48:43,871 --> 00:48:45,892
By the way, the big blue ball in front of Drake

851
00:48:46,032 --> 00:48:48,854
is a special collision for simulating him breaking boxes

852
00:48:48,914 --> 00:48:50,755
and fences and other stuff with his head.

853
00:48:52,272 --> 00:48:54,794
So as you can see, not much is really happening.

854
00:48:55,094 --> 00:48:57,216
It's just a subtle adjustment, nothing big.

855
00:49:03,080 --> 00:49:03,921
Until now.

856
00:49:06,423 --> 00:49:08,805
Look how deep under the ground this lake is.

857
00:49:09,465 --> 00:49:12,568
But you won't even notice until you see the debug draw.

858
00:49:16,312 --> 00:49:17,492
This is my last example.

859
00:49:19,133 --> 00:49:22,035
First, let me explain what in-game cinematic is.

860
00:49:22,996 --> 00:49:25,917
It's a sequence in a game that looks like a cinematic,

861
00:49:26,137 --> 00:49:28,379
but it's in some way interactive.

862
00:49:29,199 --> 00:49:32,641
In this case, the jeep is dragged by a wild river

863
00:49:32,901 --> 00:49:35,463
while spinning around and bouncing off the rocks,

864
00:49:35,683 --> 00:49:37,884
but player can still steer it a little bit.

865
00:49:39,744 --> 00:49:42,265
Again, something out of animators control

866
00:49:42,345 --> 00:49:45,287
is moving our characters, and we'd like our characters

867
00:49:45,347 --> 00:49:47,247
to be reacting to what's happening to them.

868
00:49:47,948 --> 00:49:50,229
So we naturally reached to physics.

869
00:49:51,369 --> 00:49:52,770
It was towards the end of production,

870
00:49:53,010 --> 00:49:54,931
and we already had nearly 40 different

871
00:49:54,991 --> 00:49:56,591
ragdoll profiles in the library.

872
00:49:57,772 --> 00:50:01,073
Thanks to our EFF system, it was super easy to pull off.

873
00:50:08,327 --> 00:50:13,371
So we run the classic vehicle ragdoll on both characters at the beginning of this scene.

874
00:50:13,912 --> 00:50:17,995
But once the vehicle lands in the water, we switch to a custom ragdoll.

875
00:50:18,896 --> 00:50:22,258
It's a slightly modified version of Sam's ragdoll from the Bullchase.

876
00:50:28,523 --> 00:50:30,965
And this is where it transitions to other gameplay.

877
00:50:33,235 --> 00:50:36,218
Look how far Elena's body is from the animation pose.

878
00:50:36,819 --> 00:50:39,022
I drawn a yellow outline around her body

879
00:50:39,102 --> 00:50:40,163
so you can see it better.

880
00:50:41,805 --> 00:50:44,609
It took me less than 30 minutes to create a ragdoll profile

881
00:50:44,709 --> 00:50:46,211
and hook it up in the animations.

882
00:50:47,052 --> 00:50:50,376
We also used ragdoll in the following epic cinematic moment.

883
00:50:57,389 --> 00:50:58,990
See that Sam is running ragdoll?

884
00:50:59,430 --> 00:51:01,270
Well, all characters are running ragdoll.

885
00:51:02,030 --> 00:51:06,171
It's because the jeep is still kind of steerable on the rocky face.

886
00:51:07,152 --> 00:51:11,393
So we don't know, we cannot just bake the reactions into the animation.

887
00:51:12,833 --> 00:51:14,854
Now it was the hang climb and...

888
00:51:18,495 --> 00:51:22,236
Now you can see that Sam is praying for more ragdoll.

889
00:51:25,696 --> 00:51:27,617
It's like very, very subtle details,

890
00:51:27,697 --> 00:51:31,219
but it makes a big difference when you see such a detail

891
00:51:31,359 --> 00:51:34,300
seen visually and something is a little bit off.

892
00:51:36,822 --> 00:51:39,983
So none of the stuff I show you today

893
00:51:40,224 --> 00:51:42,145
would be possible without stable frame rate.

894
00:51:43,165 --> 00:51:45,407
Luckily, our team has some of the best programmers

895
00:51:45,467 --> 00:51:48,228
and artists in the industry, and they

896
00:51:48,268 --> 00:51:49,709
were able to optimize the game 100%.

897
00:51:49,749 --> 00:51:50,529
But nothing was perfect.

898
00:51:53,816 --> 00:51:57,778
It was really difficult to synchronize all procedural animation systems in the game.

899
00:51:58,578 --> 00:52:01,119
Animation blending, IK step, physics step,

900
00:52:01,520 --> 00:52:04,801
we were quite often working with obsolete data from previous frames,

901
00:52:05,061 --> 00:52:06,742
and Jaros, our physics programmer,

902
00:52:07,202 --> 00:52:10,444
had to write some complicated predictive algorithms to fix that.

903
00:52:11,064 --> 00:52:13,385
Unfortunately, this is way beyond my expertise,

904
00:52:14,005 --> 00:52:16,226
and you have to ask him should you have any questions.

905
00:52:17,623 --> 00:52:21,206
I also found out while I was preparing this GDC talk

906
00:52:21,386 --> 00:52:22,927
that I knew quite a lot,

907
00:52:23,708 --> 00:52:25,849
but still very little about our system.

908
00:52:26,570 --> 00:52:29,151
I've learned so many important details,

909
00:52:29,352 --> 00:52:31,653
which I had no time to learn during production,

910
00:52:32,314 --> 00:52:34,335
but now I'm ready to make everything

911
00:52:34,435 --> 00:52:35,476
in our next game better.

912
00:52:35,496 --> 00:52:38,278
And that's it.

913
00:52:43,801 --> 00:52:44,102
Thank you.

914
00:52:44,262 --> 00:52:44,862
Thank you very much.

915
00:52:52,700 --> 00:52:59,746
Okay. Any questions? Yeah. Hey, how's it going? Great talk, thank you. I'm curious if you've

916
00:52:59,846 --> 00:53:04,951
used this system in a purely combat context because it sounds like a great way to get better

917
00:53:04,991 --> 00:53:09,915
performances in like a fist fight. But physics in combat as a designer really scares me so I'm

918
00:53:09,935 --> 00:53:14,999
wondering if you guys have tackled that. Physics in combat? What do you mean by physics in

919
00:53:15,019 --> 00:53:19,723
combat? So if I get like hit in the sternum versus the left shoulder. Oh, I see. So like hit

920
00:53:19,783 --> 00:53:20,904
reactions. Exactly.

921
00:53:21,759 --> 00:53:28,223
uh, we used a ragdoll only for death reactions and we used additive animation for, for, for

922
00:53:28,243 --> 00:53:37,449
the, for the, like, those little hate reactions. But we, yeah. We are experimenting with it. It

923
00:53:37,469 --> 00:53:44,233
works. It works. But not yet. Not, not in, in iCharlie4. Okay. Uh, so, uh, so, uh, so, uh,

924
00:53:45,015 --> 00:53:53,823
So Havoc provides you the preview for ragdoll setups and other physics object designs in Maya,

925
00:53:53,863 --> 00:54:01,150
but assuming since you have all the DC script and EFFs, did you end up using those previews?

926
00:54:01,990 --> 00:54:07,896
I assume the in-game previews were more convenient and actually reflecting the final implementation, but...

927
00:54:08,391 --> 00:54:16,016
Yeah, I basically used the debug tools in Maya only for previewing limits and frictions

928
00:54:16,056 --> 00:54:16,996
in the joints.

929
00:54:17,256 --> 00:54:23,520
And then I went to our game and we have all the tools to test Regal there.

930
00:54:23,540 --> 00:54:25,661
So, yeah, as I expect, only limited use then.

931
00:54:26,122 --> 00:54:26,422
Yeah, yeah.

932
00:54:26,502 --> 00:54:30,905
But those Havoc tools made my life easier when I started setting up the Regal.

933
00:54:30,985 --> 00:54:32,005
They are really, really nice.

934
00:54:32,025 --> 00:54:32,446
Okay.

935
00:54:32,466 --> 00:54:33,706
Had the same experience, so thank you.

936
00:54:33,887 --> 00:54:34,087
Yeah.

937
00:54:34,847 --> 00:54:34,967
Sure.

938
00:54:36,384 --> 00:54:42,570
Okay, anybody else? Uh, I put some business cards on each side of the table so feel free to

939
00:54:42,630 --> 00:54:49,418
take them and you can just email me when you are fresh and not overwhelmed by the amount of

940
00:54:49,518 --> 00:54:54,243
information. And if you want, come close and we can talk about stuff.

