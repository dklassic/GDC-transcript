1
00:00:07,190 --> 00:00:11,052
So welcome to For Cry 5 procedural world generation.

2
00:00:12,953 --> 00:00:14,273
My name is Etienne Carrier.

3
00:00:14,574 --> 00:00:18,035
I've been a technical artist at Ubisoft Montreal for about

4
00:00:18,055 --> 00:00:18,656
three years now.

5
00:00:19,356 --> 00:00:22,518
And I joined at the beginning of the For Cry 5 project.

6
00:00:23,267 --> 00:00:26,990
And, well, I haven't worked on any AAA titles before,

7
00:00:27,070 --> 00:00:30,632
but I joined, however, when I joined Ubisoft,

8
00:00:30,692 --> 00:00:32,413
I had a secret weapon in my sleeve.

9
00:00:32,433 --> 00:00:36,195
And that is my experience with procedural tool development.

10
00:00:37,476 --> 00:00:40,118
I've been passionate about that for about six years now,

11
00:00:40,298 --> 00:00:44,801
and before joining Ubisoft, I was working on indie games,

12
00:00:45,121 --> 00:00:48,863
and that's where I started introducing procedural workflow

13
00:00:50,264 --> 00:00:51,004
into my pipeline.

14
00:00:52,218 --> 00:00:55,499
So today I'm happy to share with you the procedural pipeline we

15
00:00:55,519 --> 00:00:56,980
developed for Cry 5.

16
00:00:59,121 --> 00:01:02,962
Well, quick reminder, turn off your cell phone, put it on mute,

17
00:01:03,062 --> 00:01:06,383
and avoid taking too much pictures.

18
00:01:07,643 --> 00:01:09,424
If you do so, do it discreetly, because it

19
00:01:09,444 --> 00:01:11,764
can be annoying for people sitting behind you,

20
00:01:12,285 --> 00:01:15,746
seeing a cell phone or iPad up in the air.

21
00:01:17,026 --> 00:01:18,426
So anyway, the whole thing's going

22
00:01:18,446 --> 00:01:20,687
to be available on the vault afterwards.

23
00:01:22,695 --> 00:01:26,377
Before we start, this is the content we'll be seeing today

24
00:01:26,458 --> 00:01:27,478
during the presentation.

25
00:01:27,498 --> 00:01:31,321
I'll start with an introduction part with some of the

26
00:01:31,361 --> 00:01:32,722
challenge we wanted to tackle.

27
00:01:33,643 --> 00:01:36,685
And then the objective for the pipeline itself.

28
00:01:36,905 --> 00:01:39,627
And then we'll take a look at the procedural tools that we

29
00:01:39,647 --> 00:01:40,248
developed for it.

30
00:01:41,649 --> 00:01:44,631
Then all those tools are used from a user point of view.

31
00:01:45,492 --> 00:01:48,574
And after this, we'll dive a bit more in depth into the

32
00:01:48,614 --> 00:01:49,274
pipeline itself.

33
00:01:50,693 --> 00:01:55,295
And we'll also look at how the cliff and the biome tool are

34
00:01:55,335 --> 00:01:56,216
working under the hood.

35
00:01:56,656 --> 00:02:00,157
Unfortunately, I didn't have enough time in my presentation

36
00:02:00,197 --> 00:02:02,799
to go in detail in every tool that we made.

37
00:02:03,199 --> 00:02:04,759
But we'll see those two at least.

38
00:02:05,400 --> 00:02:07,941
And then a quick section on things that we

39
00:02:07,981 --> 00:02:08,781
changed along the way.

40
00:02:09,481 --> 00:02:10,782
And finally, a conclusion part.

41
00:02:13,163 --> 00:02:17,165
So what was our initial challenge we wanted to tackle?

42
00:02:19,867 --> 00:02:23,069
First, we had a Turing that was changing constantly.

43
00:02:23,550 --> 00:02:27,312
This is the 4.5 Turing evolution over two years and a half.

44
00:02:28,193 --> 00:02:30,094
So how do we manage our content

45
00:02:30,114 --> 00:02:31,815
when there are so many iteration like this?

46
00:02:34,634 --> 00:02:37,737
We'll have the same evolution here on the smaller portion of the terrain.

47
00:02:38,557 --> 00:02:44,203
We have a forest that has been applied manually, and its distribution is initially coherent

48
00:02:44,243 --> 00:02:45,084
with the terraforming.

49
00:02:45,864 --> 00:02:51,530
And however, over time, it becomes really incoherent as the terrain changes.

50
00:02:52,290 --> 00:02:54,272
So how do we solve issues like that?

51
00:02:55,673 --> 00:02:58,655
It would be, for sure, tedious work to repaint the forest

52
00:02:58,775 --> 00:03:00,136
every time the terrain change.

53
00:03:00,797 --> 00:03:04,900
Also, if this was done, and if it was managed by several

54
00:03:04,940 --> 00:03:07,802
different users, how consistent would the result be?

55
00:03:08,883 --> 00:03:11,925
Should we lack terraforming early in the project to avoid

56
00:03:11,945 --> 00:03:12,646
problems like this?

57
00:03:13,667 --> 00:03:16,809
I don't think so, because this whole iterative process is

58
00:03:16,929 --> 00:03:18,450
vital to the game quality in the end.

59
00:03:21,599 --> 00:03:24,843
It is with those challenges in mind that we built a procedural pipeline.

60
00:03:26,365 --> 00:03:30,931
Our first objective was to develop a macro management tool to fill up the world with

61
00:03:30,951 --> 00:03:32,173
uh natural looking content.

62
00:03:34,418 --> 00:03:36,859
then this content needs to be consistent

63
00:03:36,899 --> 00:03:38,340
with the Terrain topology as well.

64
00:03:38,940 --> 00:03:41,061
Here we have the same example as before,

65
00:03:41,301 --> 00:03:44,422
however, this time the forest distribution

66
00:03:44,583 --> 00:03:46,663
is adapting to the Terrain shape.

67
00:03:47,324 --> 00:03:50,285
So as you can see, the result remains coherent

68
00:03:50,625 --> 00:03:51,926
with any of the terraforming change.

69
00:03:55,188 --> 00:03:57,689
Then the whole pipeline needs to be automated as well.

70
00:03:58,029 --> 00:04:02,211
We use Udini and Udini-Engine, as well as nightly generation

71
00:04:02,311 --> 00:04:04,732
on BuildMachine to fully refresh the world every night.

72
00:04:06,193 --> 00:04:07,954
We have several BuildMachines that

73
00:04:08,014 --> 00:04:10,935
will process different parts of the world one by one

74
00:04:10,995 --> 00:04:12,436
until the full world is generated.

75
00:04:12,816 --> 00:04:15,897
And this process ensures us that the user will have updated

76
00:04:16,297 --> 00:04:17,438
world data every morning.

77
00:04:20,602 --> 00:04:24,282
Then all the data generated also needs to be deterministic,

78
00:04:24,782 --> 00:04:27,163
which means that the generation needs to yield

79
00:04:27,203 --> 00:04:29,544
the same result given the same inputs.

80
00:04:30,144 --> 00:04:32,384
So by using different build machines,

81
00:04:32,484 --> 00:04:35,145
whether we bake the left or right chunk of the terrarium

82
00:04:35,185 --> 00:04:38,625
here, the middle part will always give the same result.

83
00:04:38,986 --> 00:04:41,886
And this is quite important because for the nav mesh

84
00:04:41,926 --> 00:04:43,306
generation, among other things.

85
00:04:44,587 --> 00:04:49,868
Well, we have the nightly build that makes the world map per map, so the junction between

86
00:04:50,328 --> 00:04:51,789
those maps needs to be seamless.

87
00:04:54,569 --> 00:04:58,050
And finally, our last objective, we wanted the whole thing to be user-friendly.

88
00:04:59,250 --> 00:05:04,392
Just the nightly build alone is not enough to ensure user have up-to-date data.

89
00:05:05,112 --> 00:05:08,453
They need to be able to bake the procedural generation as they work as well.

90
00:05:08,773 --> 00:05:11,273
So of course, we have all the tools available in the Insta.

91
00:05:14,402 --> 00:05:17,464
Now, let's take a quick look at the available procedural tools

92
00:05:17,484 --> 00:05:17,965
we developed.

93
00:05:18,405 --> 00:05:22,027
Initially, our mandate was just to tackle the biome

94
00:05:22,047 --> 00:05:24,089
distribution, develop a biome tool,

95
00:05:24,149 --> 00:05:26,010
but we ended up expanding way beyond that.

96
00:05:28,592 --> 00:05:31,153
First, we have the freshwater tool

97
00:05:31,293 --> 00:05:34,676
that generates lakes, rivers, streams, and waterfalls.

98
00:05:36,277 --> 00:05:38,098
We have a fence and power line tool.

99
00:05:39,759 --> 00:05:42,561
We have the cliff generation on steep terrain surfaces.

100
00:05:44,521 --> 00:05:46,923
Then the biome tool that spans all the vegetation.

101
00:05:48,745 --> 00:05:52,128
We also have a fog density map generation that is then used

102
00:05:52,208 --> 00:05:53,089
by the fog shader.

103
00:05:55,371 --> 00:06:00,396
And finally, we also generate the wall map terrain mesh

104
00:06:00,816 --> 00:06:04,200
along with the scattering of miniature trees on top of it.

105
00:06:07,626 --> 00:06:11,210
But how is it like using those tools from a user point of view?

106
00:06:12,091 --> 00:06:13,874
In this next section, we'll take a quick glimpse

107
00:06:14,294 --> 00:06:16,457
of how it is like to fill up an empty map

108
00:06:16,957 --> 00:06:17,979
with the procedural tools.

109
00:06:20,341 --> 00:06:22,804
So first off, a user will terraform the terrain

110
00:06:22,905 --> 00:06:24,406
using the IDS2 tools.

111
00:06:26,931 --> 00:06:30,794
And then the artist can lay down a freshwater network that

112
00:06:30,854 --> 00:06:34,057
is achieved by using curves and spline that will be used as

113
00:06:34,097 --> 00:06:35,598
input for the freshwater tool.

114
00:06:36,799 --> 00:06:40,823
For rivers, we have control on the spline for the width.

115
00:06:41,743 --> 00:06:45,847
And once we're happy with our inputs, the user just have to

116
00:06:46,127 --> 00:06:47,628
make the freshwater tool.

117
00:06:48,389 --> 00:06:52,492
And this will produce a water surface as well as some

118
00:06:52,572 --> 00:06:54,754
tearing, texturing, and scattering of

119
00:06:54,834 --> 00:06:55,875
some asset underwater.

120
00:06:58,879 --> 00:07:00,380
Then the user can generate the cliffs.

121
00:07:01,340 --> 00:07:04,182
The tool is simply based on the terrain slope, so you

122
00:07:04,463 --> 00:07:07,425
basically just have to run the generation on the desired

123
00:07:07,465 --> 00:07:08,085
terrain area.

124
00:07:08,846 --> 00:07:11,468
We also have a few extra controls, like exclusion mask

125
00:07:11,508 --> 00:07:13,729
and stuff, but we'll see more detail on this later.

126
00:07:16,411 --> 00:07:17,973
Then the artist can add the vegetation.

127
00:07:19,154 --> 00:07:21,415
So this is done using the biome painter.

128
00:07:22,156 --> 00:07:25,358
Here we just select and apply a main biome to the terrain,

129
00:07:26,039 --> 00:07:27,980
then run the procedural generation.

130
00:07:35,798 --> 00:07:39,199
So the main biome will naturally distribute the grass

131
00:07:39,219 --> 00:07:40,239
and forest sub-biome.

132
00:07:40,999 --> 00:07:44,100
And the recipe will also react to water proximity,

133
00:07:44,180 --> 00:07:45,440
spawning specific asset.

134
00:07:46,441 --> 00:07:49,801
It will also avoid spawning vegetation

135
00:07:49,882 --> 00:07:52,682
on the cliff erosion line that was generated by the cliff

136
00:07:52,702 --> 00:07:52,982
tool.

137
00:07:55,003 --> 00:07:59,024
And also, in this case, altitude also

138
00:07:59,084 --> 00:08:02,805
affect how the recipe behaves, spawning smaller and sparser

139
00:08:02,825 --> 00:08:04,165
trees up in altitude.

140
00:08:08,043 --> 00:08:13,229
So this is nice, but the user will certainly want to customize the location.

141
00:08:15,371 --> 00:08:21,458
So what the artist can do is he can start by clearing out an area by painting a sub-biome

142
00:08:21,498 --> 00:08:24,881
like grass, then laying down a road spline.

143
00:08:26,487 --> 00:08:29,470
So far, our result was quite natural.

144
00:08:29,931 --> 00:08:32,613
But that's all we will bring, man's influence on the

145
00:08:32,674 --> 00:08:34,475
environment and override mother nature.

146
00:08:35,296 --> 00:08:38,479
So once we're happy with the input, in this case, we bake

147
00:08:38,539 --> 00:08:40,381
the roads and refresh the biome.

148
00:08:41,082 --> 00:08:42,724
And now we get our updated result.

149
00:08:47,006 --> 00:08:49,209
The trees are cleared out of the road here.

150
00:08:49,790 --> 00:08:55,557
And of course, there will still be some assets that will need

151
00:08:55,577 --> 00:08:58,741
to be placed by hand, like house, shed, and vehicle here.

152
00:08:58,761 --> 00:09:01,645
Yeah, the level artists are not out of work yet.

153
00:09:03,327 --> 00:09:06,371
Based on those, perhaps we need to readjust the biome painting

154
00:09:06,391 --> 00:09:06,811
a little bit.

155
00:09:06,851 --> 00:09:08,813
So some biome brush that we have,

156
00:09:08,833 --> 00:09:10,255
they don't do any asset scattering,

157
00:09:10,335 --> 00:09:12,197
but simply apply a terrain texture.

158
00:09:13,238 --> 00:09:16,020
So the user can use that to create some kind of driveway.

159
00:09:16,241 --> 00:09:20,625
And then we can also add back some trees and forests

160
00:09:20,865 --> 00:09:22,507
using the forest sub-biome.

161
00:09:23,208 --> 00:09:24,629
So we can apply that here and there.

162
00:09:30,480 --> 00:09:35,566
So once we're all happy with our setup, we just refresh the

163
00:09:35,586 --> 00:09:36,267
biome here.

164
00:09:36,867 --> 00:09:40,391
And we see that our driveway is not clear of any grass.

165
00:09:40,451 --> 00:09:42,754
And we have our little patch of forest where

166
00:09:42,794 --> 00:09:43,474
we painted them.

167
00:09:47,055 --> 00:09:50,057
And now, just to cover all our tools, let's take a look at how

168
00:09:50,077 --> 00:09:50,958
we can add a fence.

169
00:09:51,599 --> 00:09:53,801
The input for that is once again the spline.

170
00:09:55,222 --> 00:09:58,185
So the user will simply set the fence type he wants to

171
00:09:58,225 --> 00:10:01,027
generate on the spline parameter, then run the

172
00:10:01,087 --> 00:10:01,587
generation.

173
00:10:03,229 --> 00:10:05,351
So here we get a nice wooden fence.

174
00:10:11,580 --> 00:10:14,602
User can also add power lines network in the world.

175
00:10:15,042 --> 00:10:17,483
The electric pulse will spawn on each control

176
00:10:17,523 --> 00:10:18,383
point of the spline.

177
00:10:19,044 --> 00:10:22,065
In this example, we had three different types of power lines

178
00:10:22,125 --> 00:10:24,326
that will automatically connect with one another.

179
00:10:25,087 --> 00:10:27,908
So we added a standard line, a single line, and then two

180
00:10:27,928 --> 00:10:28,688
house connectors.

181
00:10:29,409 --> 00:10:32,210
We make sure to snap the splines together.

182
00:10:32,230 --> 00:10:34,291
Then we run the generation.

183
00:10:35,366 --> 00:10:40,572
And the tool will nicely add the transformer box where

184
00:10:40,632 --> 00:10:41,193
required.

185
00:10:42,114 --> 00:10:47,460
And also here, the user didn't snap the splines together, but

186
00:10:47,620 --> 00:10:51,104
the system will do that automatically within a certain

187
00:10:52,065 --> 00:10:52,746
distance threshold.

188
00:10:54,292 --> 00:10:55,534
Here we have a bit of a problem.

189
00:10:55,554 --> 00:10:57,777
We've got trees in the way of the power line.

190
00:10:58,198 --> 00:10:59,400
So easy enough to fix.

191
00:10:59,460 --> 00:11:01,182
We just have to refresh the biome tool

192
00:11:01,663 --> 00:11:03,566
to take the power line into account

193
00:11:03,686 --> 00:11:05,849
and the trees will be removed

194
00:11:06,310 --> 00:11:08,453
because the systems, they can speak with one another.

195
00:11:14,778 --> 00:11:18,640
So that covers up the tool from a user point of view.

196
00:11:19,221 --> 00:11:22,082
So just to illustrate the non-destructive workflow,

197
00:11:22,442 --> 00:11:25,163
the terrain can be readjusted at any time.

198
00:11:26,644 --> 00:11:29,445
The user will simply have to rebate

199
00:11:29,485 --> 00:11:31,426
the affected procedural tools.

200
00:11:31,906 --> 00:11:34,788
So back there, I lowered the terrain quite a bit,

201
00:11:35,348 --> 00:11:38,950
and I'm adding an island in the middle of the lake.

202
00:11:40,190 --> 00:11:42,771
So in this case, I just have to rebate

203
00:11:42,831 --> 00:11:44,092
the cliff and the biomes.

204
00:11:45,082 --> 00:11:50,489
And voila, all the vegetation is updated according to the

205
00:11:50,529 --> 00:11:51,250
neuterine shape.

206
00:11:51,851 --> 00:11:54,554
And we get our nice little island in the lake.

207
00:11:57,899 --> 00:12:00,382
So now let's take a look at how this is

208
00:12:00,462 --> 00:12:01,323
working under the hood.

209
00:12:03,553 --> 00:12:06,515
We have a Houdini engine implementation with our in-house

210
00:12:06,635 --> 00:12:08,215
engine and it's their Dunia.

211
00:12:09,096 --> 00:12:12,057
And what is opening doors and possibilities with this

212
00:12:12,137 --> 00:12:15,458
pipeline really is the available inputs and outputs,

213
00:12:15,878 --> 00:12:17,399
the data exchange between the two.

214
00:12:19,743 --> 00:12:22,184
And well, quickly, for those who don't know what Houdini is,

215
00:12:22,204 --> 00:12:25,726
it's a 3D software with a node-based workflow that

216
00:12:25,846 --> 00:12:28,987
allows you to develop tools that we call Houdini Digital

217
00:12:29,007 --> 00:12:30,688
Asset, or HDA in short.

218
00:12:31,408 --> 00:12:35,070
Then those tools can be run in the Houdini Engine API when

219
00:12:35,110 --> 00:12:37,951
implemented as a plug-in with a specific application like a

220
00:12:37,991 --> 00:12:38,572
game instructor.

221
00:12:42,504 --> 00:12:47,631
Some of the inputs are sent from Dunia to Udine through Python script.

222
00:12:48,472 --> 00:12:52,838
So we have the world information, world name, the size of it.

223
00:12:53,339 --> 00:12:57,865
Because we didn't have only one world during production, we also had a gem for testing

224
00:12:57,905 --> 00:12:58,306
purposes.

225
00:12:59,247 --> 00:13:02,689
Then we'll send over the file paths also, because we can

226
00:13:02,749 --> 00:13:05,091
expect all PCs to have their stuff installed at the same

227
00:13:05,131 --> 00:13:07,632
path. And then the TerrainSector, which is

228
00:13:07,692 --> 00:13:11,334
basically just the area of the terrain we want to generate.

229
00:13:11,995 --> 00:13:14,136
We'll see more detail about this in a moment.

230
00:13:14,736 --> 00:13:18,018
Then the splines and shapes, along with metadata as

231
00:13:18,098 --> 00:13:19,039
geometry attribute.

232
00:13:19,859 --> 00:13:24,562
For instance, the fence spline would have the fence type as a

233
00:13:24,662 --> 00:13:25,383
geometry attribute.

234
00:13:27,608 --> 00:13:31,411
Then other inputs are simply extracted on disk

235
00:13:31,512 --> 00:13:33,333
and available to read from Houdini

236
00:13:34,234 --> 00:13:36,056
with the file path provided by Dunia.

237
00:13:36,096 --> 00:13:38,818
So we have the height maps, the biome painter,

238
00:13:38,838 --> 00:13:41,060
PNGs, 2D terrain mask.

239
00:13:41,121 --> 00:13:43,403
We also have access to Houdini geometry

240
00:13:43,423 --> 00:13:46,025
that might have been generated by specific procedural tools.

241
00:13:48,536 --> 00:13:51,797
But the main input for the procedural is the terrain

242
00:13:51,837 --> 00:13:56,319
itself, because the generation is always linked to a specific

243
00:13:56,379 --> 00:13:57,700
area of the terrain in our case.

244
00:13:58,220 --> 00:14:00,581
And so this is how the terrain is subdivided

245
00:14:00,641 --> 00:14:01,842
in the Edster for us.

246
00:14:02,582 --> 00:14:06,184
Our smallest granularity is a sector, which is 64 by 64

247
00:14:06,744 --> 00:14:10,666
meter, which means it is the smallest area a user can make.

248
00:14:13,690 --> 00:14:16,732
What happens when someone wants to rebake the procedural data?

249
00:14:16,772 --> 00:14:18,893
He will select his generation area.

250
00:14:19,814 --> 00:14:22,595
So it's either all, basically everything that is loaded.

251
00:14:23,055 --> 00:14:26,918
It's worth noting that in Dunia, the whole world is not

252
00:14:26,958 --> 00:14:28,578
loaded at all time in the editor.

253
00:14:29,039 --> 00:14:31,040
The world is divided into several maps.

254
00:14:31,300 --> 00:14:33,861
And when opening the editor, we select which

255
00:14:34,001 --> 00:14:34,822
map we want to load.

256
00:14:35,542 --> 00:14:38,587
Then the other options are the local map section or sectors,

257
00:14:38,808 --> 00:14:42,734
the local being the one located right under the camera.

258
00:14:43,175 --> 00:14:45,118
And our last option, frustum mode,

259
00:14:45,178 --> 00:14:49,466
where we will simply bake all sectors visible by the camera.

260
00:14:52,283 --> 00:14:55,404
So now let's take a look at the data that Udzini can send back

261
00:14:55,444 --> 00:14:56,065
to the editor.

262
00:14:56,685 --> 00:14:59,566
We have an NCT point cloud, terrain textures, terrain

263
00:14:59,586 --> 00:15:06,487
height map, 2D terrain data, either RGB or grayscale, and

264
00:15:07,428 --> 00:15:11,329
procedurally generated geometry, as well as terrain

265
00:15:11,349 --> 00:15:14,310
logic zones, which is basically just IDs on the

266
00:15:14,350 --> 00:15:18,531
terrain to specify environment preset and post-process.

267
00:15:20,285 --> 00:15:25,469
then all all of these are saved as a buffer in a special format on disk and that gives

268
00:15:25,549 --> 00:15:31,012
time to the instructor to load the data at its own pace and uh that avoids sending one

269
00:15:31,052 --> 00:15:33,614
big buffer uh that takes a lot of memory.

270
00:15:36,837 --> 00:15:39,378
Some quick specification concerning the NC point cloud,

271
00:15:39,499 --> 00:15:41,140
it could really be anything that has a

272
00:15:41,180 --> 00:15:42,201
position in the editor.

273
00:15:42,961 --> 00:15:48,485
So vegetation asset, rocks, collectibles, decals, VFX,

274
00:15:48,565 --> 00:15:51,928
prefabs, could even be animals in their favorite type of

275
00:15:51,988 --> 00:15:52,488
environment.

276
00:15:53,229 --> 00:15:56,591
The points will be exported with the object ID of the

277
00:15:56,671 --> 00:15:57,972
asset to spawn in the editor.

278
00:16:01,035 --> 00:16:04,797
Then the exported data is also key to the tool's

279
00:16:04,897 --> 00:16:05,797
interconnectivity.

280
00:16:06,817 --> 00:16:08,818
The procedural generation is sequential,

281
00:16:08,918 --> 00:16:12,659
so the build machine will always make them in this order.

282
00:16:12,879 --> 00:16:15,220
So each tool can export data with the goal

283
00:16:15,260 --> 00:16:16,981
to influence the following ones.

284
00:16:17,941 --> 00:16:19,602
So some tools only write new mask,

285
00:16:19,642 --> 00:16:22,763
and others will read mask generated by previous ones.

286
00:16:23,603 --> 00:16:26,884
As an easy example, we have the freshwater tool that will

287
00:16:27,164 --> 00:16:30,605
generate a water mask that is then used later by the biome

288
00:16:30,645 --> 00:16:34,367
tool to drive the spawning behavior of some specific

289
00:16:34,427 --> 00:16:34,867
species.

290
00:16:37,908 --> 00:16:39,969
So now for the cliff.

291
00:16:40,829 --> 00:16:43,710
So the purpose of this tool is to generate cliff geometry on

292
00:16:43,770 --> 00:16:44,810
large terrain surfaces.

293
00:16:45,251 --> 00:16:47,871
It acts as a detail skin on top of the terrain.

294
00:16:51,640 --> 00:16:53,561
So this is quite a large section,

295
00:16:53,642 --> 00:16:56,243
so just to give an overview of the content we'll see in there,

296
00:16:57,324 --> 00:16:59,445
we'll take a look at the previous stack, the tool

297
00:16:59,465 --> 00:17:03,267
input, stratification, geometry shape, shading method,

298
00:17:05,428 --> 00:17:08,690
the terrain data, erosion, vegetation growing surface,

299
00:17:08,770 --> 00:17:10,651
and the exported data at the end.

300
00:17:13,024 --> 00:17:16,607
So our previous tech, well, there was none.

301
00:17:17,468 --> 00:17:20,631
On previous Far Cry, beside the end place rock,

302
00:17:20,711 --> 00:17:22,513
the cliffs were only bare terrain.

303
00:17:23,273 --> 00:17:24,795
It wasn't there back then, but I was

304
00:17:24,835 --> 00:17:27,477
told that the world used to be designed

305
00:17:27,537 --> 00:17:31,601
to avoid having too much large cliff surface.

306
00:17:32,697 --> 00:17:51,458
But now, uh, on Far Cry 5, I don't know what happened, but, uh, we suddenly had a world with, uh, like a large amount of cliff surface. They were, um, they were much bigger and, uh, than before and invisible from much further as well. So, that's the reason why we decided to develop, uh, a tech to improve the situation a little bit.

307
00:17:53,963 --> 00:17:59,785
So this is a shot from the FC5 without the cliff deck

308
00:18:00,465 --> 00:18:03,787
and with the new cliff geometry on top of it.

309
00:18:06,128 --> 00:18:07,088
So how does that work?

310
00:18:07,108 --> 00:18:10,990
In Udine, we use the terrain slope attribute

311
00:18:11,110 --> 00:18:13,751
as a starting point and then delete all surfaces

312
00:18:14,011 --> 00:18:15,412
below a certain slope threshold.

313
00:18:15,812 --> 00:18:17,973
And this becomes our cliff input geometry.

314
00:18:19,096 --> 00:18:21,937
As an additional note, doing that is interesting as well,

315
00:18:21,977 --> 00:18:26,220
because it also serves as a visual cue for the player

316
00:18:26,660 --> 00:18:29,361
to know which terrain is too steep to navigate.

317
00:18:29,701 --> 00:18:33,644
And this is exactly the right slope threshold

318
00:18:33,684 --> 00:18:35,705
that we use to generate the cliffs.

319
00:18:39,087 --> 00:18:41,248
Since we start from the terrain mesh,

320
00:18:41,308 --> 00:18:44,469
we get stretch quads on the slope, as we see here.

321
00:18:44,549 --> 00:18:47,111
So we get rid of those by doing a remeshing pass

322
00:18:47,171 --> 00:18:49,452
on the geometry to get uniform triangles.

323
00:18:51,533 --> 00:18:54,014
And then there is an interesting phenomenon

324
00:18:54,034 --> 00:18:55,715
that we want to reproduce with the tool.

325
00:18:56,595 --> 00:18:59,597
And it is the geological stratification,

326
00:19:00,157 --> 00:19:02,418
the visible horizontal lines that

327
00:19:02,458 --> 00:19:05,960
were formed by the accumulation of sedimentary rock and soil

328
00:19:06,020 --> 00:19:06,380
over time.

329
00:19:09,188 --> 00:19:12,471
To create this effect, we have a tool that slices the input

330
00:19:12,491 --> 00:19:14,152
geometry into strata chunks.

331
00:19:14,792 --> 00:19:16,913
Each strata has a random thickness.

332
00:19:17,173 --> 00:19:20,876
And it will assign a strata ID to each slice, which we can

333
00:19:20,996 --> 00:19:23,517
use to randomize the strata color as a debug view, as we

334
00:19:23,557 --> 00:19:23,918
see here.

335
00:19:26,438 --> 00:19:30,481
And then in the Inster, we also have a preset to control the strata angles.

336
00:19:30,982 --> 00:19:35,906
The user will control them with this RGB input painted on the terrain, then Udzini will use

337
00:19:35,926 --> 00:19:39,509
that to drive the stratification angle parameter in Udzini.

338
00:19:41,865 --> 00:19:45,086
As a result, we get the strata slice

339
00:19:45,206 --> 00:19:46,667
in three different angles here.

340
00:19:47,868 --> 00:19:50,989
The angles that we chose were some

341
00:19:51,009 --> 00:19:52,970
that best fit the terraforming of our world.

342
00:19:53,791 --> 00:19:57,072
However, just like this, the strata lines

343
00:19:57,212 --> 00:19:58,973
are a bit too perfect and unnatural.

344
00:19:59,453 --> 00:20:03,115
So to break them up and bring some chaos,

345
00:20:03,175 --> 00:20:03,976
we do something else.

346
00:20:06,237 --> 00:20:07,877
So we start by generating a noise

347
00:20:08,057 --> 00:20:10,719
that will be used to split the input mesh into two groups.

348
00:20:12,233 --> 00:20:15,115
The noise is generated on a lower resolution mesh and then

349
00:20:15,175 --> 00:20:16,716
transferred to the iRES one.

350
00:20:17,157 --> 00:20:20,419
And we do that to get larger and blockier patterns.

351
00:20:24,162 --> 00:20:26,924
Using that noise, we split the cliff surface into two groups

352
00:20:26,964 --> 00:20:27,425
like this.

353
00:20:28,626 --> 00:20:33,189
And then we run the stratification tool on both

354
00:20:33,229 --> 00:20:35,171
groups with just a different seed value.

355
00:20:35,511 --> 00:20:37,412
So that breaks up the strata lines.

356
00:20:38,093 --> 00:20:40,935
After this, the geometry is ready to get some volume.

357
00:20:43,199 --> 00:20:46,941
So, uh, each strata is extruded at various thickness and

358
00:20:46,961 --> 00:20:54,386
displaced using a combination of a displacement map. Then at

359
00:20:54,426 --> 00:20:58,128
this point the geometry is still fairly rare so, uh, we, uh, do

360
00:20:58,208 --> 00:21:00,930
an optimization pass and we reduce the triangle count.

361
00:21:03,158 --> 00:21:07,360
And before export, the geometry is also split into several

362
00:21:07,480 --> 00:21:08,301
individual mesh.

363
00:21:08,701 --> 00:21:12,423
And that is one mesh per sector, to be more precise.

364
00:21:13,403 --> 00:21:16,345
And that's for better loading and streaming in game.

365
00:21:16,785 --> 00:21:21,107
So all these different colors represent a different sector.

366
00:21:22,048 --> 00:21:26,310
Note that we actually don't cut the geometry at this step.

367
00:21:26,770 --> 00:21:29,852
Each triangle already knows in which sector it resides.

368
00:21:29,892 --> 00:21:32,393
So we just have to use that to split the mesh apart.

369
00:21:33,959 --> 00:21:37,501
So that covers it for the cliff mesh part, but the cliff tool

370
00:21:37,541 --> 00:21:38,801
does other cool things as well.

371
00:21:40,702 --> 00:21:43,723
And before going further, I kind of need to explain how

372
00:21:43,743 --> 00:21:45,304
the cliffs are shaded in game.

373
00:21:45,884 --> 00:21:47,945
We use what we call the terrain shader.

374
00:21:48,666 --> 00:21:51,187
Some of you might have seen the talk of my colleague,

375
00:21:51,247 --> 00:21:54,988
Jeremy Moore, yesterday on the terrain tech he developed for

376
00:21:55,149 --> 00:21:55,249
SC5.

377
00:21:56,849 --> 00:22:03,092
If not, and if you're interested in, you should look it up once it's available on the vault.

378
00:22:04,253 --> 00:22:09,315
Anyway, what the shader does is that it will render the object in the same path as the terrain.

379
00:22:09,755 --> 00:22:14,217
So the cliff will use the same texture as the terrain directly underneath it.

380
00:22:15,231 --> 00:22:17,695
So if we have grass underneath, the cliff

381
00:22:17,715 --> 00:22:20,319
will be partially textured with grass, too, as we see here.

382
00:22:20,819 --> 00:22:22,842
So to avoid this, we need to make sure

383
00:22:22,942 --> 00:22:26,548
that the cliff, while we have cliff there in texture,

384
00:22:28,130 --> 00:22:30,253
right under the extruded cliff mesh as well.

385
00:22:32,279 --> 00:22:36,081
So for that reason, we use the final extruded cliff mesh,

386
00:22:36,661 --> 00:22:40,703
and we recast down some cliff attribute back to the terrain.

387
00:22:41,264 --> 00:22:46,106
So we do a cliff mask, and we transfer the strata attribute

388
00:22:46,146 --> 00:22:46,406
as well.

389
00:22:49,768 --> 00:22:51,689
From the strata attribute we just transferred,

390
00:22:52,469 --> 00:22:54,750
we first generate a color layer that

391
00:22:54,790 --> 00:22:57,371
will create a macro tint variation in the world.

392
00:22:59,041 --> 00:23:04,482
As an additional note here, this color could have been on the cliff mesh vertex color,

393
00:23:04,862 --> 00:23:06,622
but we didn't do that for two reasons.

394
00:23:07,223 --> 00:23:11,984
First, because we want to maintain the tint on the terrain, even in far distance when

395
00:23:12,004 --> 00:23:17,245
the cliff mesh is actually unloaded because of the kill distance.

396
00:23:18,587 --> 00:23:23,414
Also, at the same time, we wanted to reduce the cliff mesh memory cost as much as possible.

397
00:23:24,075 --> 00:23:29,784
Plus, we already have the color modulation layer in our terrain tech on which we merge

398
00:23:29,824 --> 00:23:30,245
this color.

399
00:23:32,999 --> 00:23:35,701
Then from the cliff mask we transferred to the terrain,

400
00:23:35,741 --> 00:23:38,423
we further extend the cliff by running a flow simulation.

401
00:23:39,444 --> 00:23:41,126
The points scattered on the cliff surface

402
00:23:41,146 --> 00:23:43,548
will flow down the slope to create this erosion effect.

403
00:23:44,149 --> 00:23:46,691
And it's worth noting that the origin strata colors

404
00:23:46,751 --> 00:23:48,512
retain on the erosion area as well.

405
00:23:51,195 --> 00:23:53,417
Then using that erosion data, we also

406
00:23:53,437 --> 00:23:56,099
scatter crumbled rock entities on the terrain.

407
00:23:56,700 --> 00:23:59,703
Those will be exported later as a point cloud to the edster.

408
00:24:02,580 --> 00:24:06,522
Then from our mask, we generate the terrain texture IDs.

409
00:24:06,742 --> 00:24:11,764
We also use noise to mix two different cliff textures.

410
00:24:12,024 --> 00:24:14,846
And we do that just basically just to break out

411
00:24:14,906 --> 00:24:16,206
the texture tiling.

412
00:24:19,748 --> 00:24:22,589
Another feature of the tool is that we can also scatter

413
00:24:22,629 --> 00:24:25,270
vegetation on top of the viable cliff surface.

414
00:24:27,690 --> 00:24:31,475
In order to find which surface is viable, we isolate the

415
00:24:31,656 --> 00:24:34,960
polygons facing upwards and simply check if it's clear

416
00:24:35,000 --> 00:24:38,004
above or not using a recast.

417
00:24:40,768 --> 00:24:43,612
And quick result in game of those cliff

418
00:24:43,692 --> 00:24:44,673
edge with vegetation.

419
00:24:46,844 --> 00:24:49,666
And at the end, this is the data exported to the editor.

420
00:24:50,287 --> 00:24:52,809
We send the cliff geometry along with their collisions.

421
00:24:54,111 --> 00:24:57,314
And steep point clouds for the rocks and vegetation.

422
00:24:57,334 --> 00:25:01,318
We send terrain texture IDs, cliff color, and a cliff mask.

423
00:25:04,401 --> 00:25:07,083
And this is some interesting procedural cliff shots

424
00:25:07,223 --> 00:25:07,744
from the game.

425
00:25:13,006 --> 00:25:15,008
Okay, for the biome tool now.

426
00:25:15,208 --> 00:25:17,831
So the goal of this guy is to populate the world

427
00:25:17,851 --> 00:25:19,093
with biological content.

428
00:25:21,455 --> 00:25:24,378
Bear with me here, this is probably the largest section

429
00:25:24,438 --> 00:25:26,200
of the presentation.

430
00:25:26,661 --> 00:25:28,923
There's a lot of feature to cover, mainly because

431
00:25:29,684 --> 00:25:31,245
there's so much subtlety in nature

432
00:25:31,305 --> 00:25:33,948
and so many various phenomena to reproduce.

433
00:25:36,892 --> 00:25:40,018
So the first step that we do in the biome tools

434
00:25:40,218 --> 00:25:43,044
is we generate the terrain from the right map, so easy enough.

435
00:25:44,680 --> 00:25:48,142
Then, from the topology, we generate the abiotic data,

436
00:25:48,263 --> 00:25:51,885
which are basically the physical features of the land.

437
00:25:51,945 --> 00:25:55,807
So we generate an occlusion, a flow map, the slope,

438
00:25:56,547 --> 00:26:00,049
a curvature, illumination, or sometimes it's

439
00:26:00,089 --> 00:26:01,050
called the slope aspect.

440
00:26:01,931 --> 00:26:06,633
Then others, like the altitude, latitude, and also

441
00:26:06,653 --> 00:26:07,374
a wind vector map.

442
00:26:08,054 --> 00:26:11,195
So something important to note here is that all those

443
00:26:11,255 --> 00:26:13,556
TARIN attributes will become the pillars to

444
00:26:13,616 --> 00:26:14,677
most biome recipes.

445
00:26:17,198 --> 00:26:20,539
Then after that, we import other 2D data that Dunia

446
00:26:20,579 --> 00:26:22,380
extracted for us on disk.

447
00:26:23,461 --> 00:26:27,162
So we have the biome painting done by the users, and

448
00:26:27,302 --> 00:26:30,283
procedural data generated by previous tools such as the

449
00:26:30,403 --> 00:26:33,365
freshwater, road, fence, power line, and cliff mask.

450
00:26:34,205 --> 00:26:36,246
And then we're ready to roll with the fun stuff.

451
00:26:38,489 --> 00:26:41,611
So first off, something really cool that the biome tool does

452
00:26:41,691 --> 00:26:44,553
is that it does not simply spawn forests where the user

453
00:26:45,174 --> 00:26:45,914
painted forests.

454
00:26:47,155 --> 00:26:49,978
We have what we call main biomes and sub-biomes.

455
00:26:50,398 --> 00:26:54,201
The main biomes are covering probably, well, most part of

456
00:26:54,761 --> 00:26:56,703
the world, probably like 75% to 85%.

457
00:26:58,144 --> 00:27:00,946
And the main biomes will automatically process where

458
00:27:01,006 --> 00:27:04,729
the sub-biome should be based on the abiotic terrain that

459
00:27:04,869 --> 00:27:05,370
we just saw.

460
00:27:08,236 --> 00:27:10,997
And it is this part of the tool that gives us this natural

461
00:27:11,097 --> 00:27:14,959
looking macro detail in the biome distribution.

462
00:27:20,221 --> 00:27:23,103
And then this main biome also process other fancy things,

463
00:27:23,183 --> 00:27:26,724
like replacing forest with grassland where the user

464
00:27:26,764 --> 00:27:27,625
placed power lines.

465
00:27:30,416 --> 00:27:33,098
After this process, we have our sub-biome recipes.

466
00:27:33,698 --> 00:27:36,440
They're processed in chain, and each of them

467
00:27:36,800 --> 00:27:39,702
contains all the ingredients that define this recipe.

468
00:27:40,122 --> 00:27:43,424
So trees, saplings, bush, grass, et cetera.

469
00:27:44,045 --> 00:27:46,726
And at the core of the biome recipe, all of these nodes

470
00:27:47,807 --> 00:27:50,929
are the generate-tearing entities, HDA.

471
00:27:52,147 --> 00:27:54,348
And this guy, among other things,

472
00:27:54,428 --> 00:27:57,570
do the vegetation scattering and can modify and create

473
00:27:57,590 --> 00:27:58,331
terrain attributes.

474
00:27:58,671 --> 00:28:00,732
But a key part of it is that it defines

475
00:28:00,752 --> 00:28:02,674
viability for each species.

476
00:28:05,776 --> 00:28:08,958
So each species is fighting for its ground

477
00:28:09,018 --> 00:28:10,499
to grow and thrive on.

478
00:28:12,212 --> 00:28:15,654
The viability is defined by setting up a favorite terrain

479
00:28:15,694 --> 00:28:17,055
attribute for each species.

480
00:28:17,656 --> 00:28:21,678
And the species that accumulates the most viability

481
00:28:21,758 --> 00:28:23,780
at a location will win over the others.

482
00:28:24,580 --> 00:28:28,263
As an example, we have a species A here

483
00:28:28,343 --> 00:28:31,705
that likes to grow on this range of occlusion terrain data,

484
00:28:31,745 --> 00:28:34,487
as we see on the bottom left, with a power of 1.

485
00:28:35,627 --> 00:28:39,390
And then we have a species B that likes to grow on this

486
00:28:39,490 --> 00:28:41,652
range of flow map with a power of two.

487
00:28:42,492 --> 00:28:46,375
So the species B will win over species A, where the flow map

488
00:28:46,415 --> 00:28:48,036
value is high enough.

489
00:28:51,358 --> 00:28:54,060
But to determine the winner, there is also a radius that is

490
00:28:54,140 --> 00:28:54,521
involved.

491
00:28:55,101 --> 00:28:56,402
Here we have a species A.

492
00:28:59,290 --> 00:29:02,132
a species A that has a higher viability than the species B.

493
00:29:02,552 --> 00:29:05,654
So we see the radius in color on the terrain.

494
00:29:06,074 --> 00:29:08,796
If species B ends up inside species A radius,

495
00:29:08,816 --> 00:29:11,698
it will be removed, like the one in red that we see here.

496
00:29:12,219 --> 00:29:13,700
So this is nice.

497
00:29:15,221 --> 00:29:18,463
We keep a desirable spacing between our tree like this.

498
00:29:19,044 --> 00:29:23,227
However, what if we would like to allow bushes or grass

499
00:29:23,307 --> 00:29:24,828
to spawn underneath those trees?

500
00:29:25,708 --> 00:29:27,330
We wouldn't want those to be removed.

501
00:29:29,871 --> 00:29:31,892
So for this, we also have the priority

502
00:29:31,952 --> 00:29:33,013
with a priority radius.

503
00:29:33,653 --> 00:29:36,134
The priority will actually be evaluated first.

504
00:29:36,214 --> 00:29:39,296
And then if two entities' priority are equal,

505
00:29:39,416 --> 00:29:41,477
then we will then evaluate the viability instead.

506
00:29:42,298 --> 00:29:44,419
The previous example has been extended here.

507
00:29:44,879 --> 00:29:47,340
However, now our green tree priority radius

508
00:29:47,380 --> 00:29:49,181
is smaller than its viability radius.

509
00:29:49,822 --> 00:29:51,943
All our tree are set with a priority of 10.

510
00:29:52,463 --> 00:29:56,085
And we added the bush pieces in yellow with a priority of 0.

511
00:29:58,429 --> 00:30:02,315
The yellow bush will be allowed to grow closer to the trunk of the green tree now,

512
00:30:02,776 --> 00:30:04,719
which has a small priority radius of 2.

513
00:30:05,079 --> 00:30:08,545
But if we want to, we can still prevent them to grow too close from the blue tree,

514
00:30:08,625 --> 00:30:10,829
which this one has a larger priority radius of 10.

515
00:30:14,623 --> 00:30:17,965
So we saw that viability has a big role in the vegetation

516
00:30:18,005 --> 00:30:18,606
distribution.

517
00:30:19,606 --> 00:30:22,187
So now let's take a look at some natural phenomena.

518
00:30:22,828 --> 00:30:25,789
Here on the left, we can observe that we

519
00:30:25,809 --> 00:30:27,830
don't have any vegetation growing on the flow

520
00:30:27,850 --> 00:30:29,211
lines in the steep slopes.

521
00:30:29,852 --> 00:30:33,413
And on the right, we also have almost no vegetation

522
00:30:33,674 --> 00:30:35,695
growing on the south face of those mountains.

523
00:30:37,055 --> 00:30:39,937
So while to mimic similar phenomena,

524
00:30:40,037 --> 00:30:41,718
we kind of need to be able to combine

525
00:30:41,778 --> 00:30:43,939
different abiotic-tearing data together.

526
00:30:46,706 --> 00:30:49,628
It is by mixing various terrain attributes that we can

527
00:30:49,688 --> 00:30:54,310
create very specific patterns for species distribution and

528
00:30:54,930 --> 00:30:57,412
accumulate a fluctuating viability as well.

529
00:30:57,852 --> 00:31:02,655
So here as an example, I multiply occlusion by a range

530
00:31:02,695 --> 00:31:03,375
of altitude.

531
00:31:06,037 --> 00:31:09,979
And in parallel, we can also mix another set, multiplying

532
00:31:10,079 --> 00:31:12,700
flow map with a different range of altitude.

533
00:31:15,596 --> 00:31:18,799
And then we can add the result of those two sets together.

534
00:31:18,819 --> 00:31:24,885
And additionally, to create extra chaos,

535
00:31:25,125 --> 00:31:27,448
we can combine noises with the Turing data.

536
00:31:28,829 --> 00:31:31,832
On the right here, well, this is a standard Perlin noise

537
00:31:31,972 --> 00:31:33,774
with control option for scale and offset.

538
00:31:33,794 --> 00:31:36,937
However, it can also be warped by the Turing normal

539
00:31:36,957 --> 00:31:39,159
to create more interesting patterns, as we see here.

540
00:31:43,389 --> 00:31:46,991
Then we would also bring in various exclusion masks

541
00:31:47,071 --> 00:31:51,034
generated by previous tool, such as freshwater road or cliff

542
00:31:51,074 --> 00:31:53,695
mask, and apply that on top as well.

543
00:31:55,616 --> 00:31:58,798
And for this example, that's what we would use as viability

544
00:31:58,858 --> 00:31:59,719
for the species.

545
00:32:00,099 --> 00:32:02,681
So as we see, combining Turing data

546
00:32:02,701 --> 00:32:05,122
is at the core of the biome generation workflow.

547
00:32:05,542 --> 00:32:08,564
However, the viability also drives other effects,

548
00:32:09,245 --> 00:32:10,245
like the species size.

549
00:32:11,698 --> 00:32:16,122
In previous production, the asset size was just, well, it

550
00:32:16,182 --> 00:32:18,944
was limited, but it was also just randomly selected.

551
00:32:19,104 --> 00:32:23,148
It had no coherence with the terrain or the likeliness of

552
00:32:23,328 --> 00:32:25,450
for a species to grow in a specific area.

553
00:32:25,951 --> 00:32:28,653
Now our tool can handle multiple sizes for the same

554
00:32:28,693 --> 00:32:29,113
species.

555
00:32:32,192 --> 00:32:34,333
If we take a step back here, there

556
00:32:34,854 --> 00:32:37,075
is various things that can affect the tree size.

557
00:32:38,637 --> 00:32:40,638
We'll have small and young trees.

558
00:32:41,259 --> 00:32:43,521
They will tend to be at the edge of a forest.

559
00:32:44,021 --> 00:32:45,542
And the tall and old trees will be

560
00:32:45,602 --> 00:32:47,844
more present at the core of a large forest patch.

561
00:32:49,105 --> 00:32:51,787
There's also other factors that come in play,

562
00:32:53,088 --> 00:32:56,631
like the altitude that can affect the tree size.

563
00:32:56,671 --> 00:32:58,052
So a quick example of that here.

564
00:33:00,299 --> 00:33:03,061
So how do we manage our tree size in the tool?

565
00:33:03,582 --> 00:33:07,565
Well, we link the asset size selection to our viability.

566
00:33:08,485 --> 00:33:11,708
So here we have a gradient viability on the terrain.

567
00:33:12,288 --> 00:33:15,511
And we start with one conifer of 50 meters.

568
00:33:16,191 --> 00:33:20,915
And if we add the second one of 40 meters, 30 meters, and so

569
00:33:21,055 --> 00:33:26,179
on, we see that each size will be positioned to the proper

570
00:33:26,219 --> 00:33:27,420
viability range on the terrain.

571
00:33:28,577 --> 00:33:31,479
And this will give us a nice tapering effect

572
00:33:31,539 --> 00:33:32,680
at the border of our forest.

573
00:33:33,240 --> 00:33:34,961
However, we have one more problem,

574
00:33:35,101 --> 00:33:38,022
and it is some kind of a staircase effect.

575
00:33:38,863 --> 00:33:42,745
So to get rid of that, we can allow each size

576
00:33:43,526 --> 00:33:45,707
to scale up or down by a certain percentage,

577
00:33:45,967 --> 00:33:48,528
just to bridge the gap between sizes.

578
00:33:51,605 --> 00:33:55,288
And then as an additional option we can also play with a random

579
00:33:55,328 --> 00:33:58,991
scale if we don't want to mess with our viability too much to

580
00:33:59,071 --> 00:34:06,617
create more chaos. And of course two trees of the same size are

581
00:34:06,657 --> 00:34:10,520
not necessarily alike so uh we can have several variation. In

582
00:34:10,560 --> 00:34:13,822
the example here we have a living tree and a dead tree

583
00:34:13,862 --> 00:34:17,645
variation and we're just playing with the probability of the dead

584
00:34:17,685 --> 00:34:19,506
tree to shift the balance between the two.

585
00:34:22,750 --> 00:34:28,493
Let's take a step back once more and look at another phenomenon, the forest canopy and

586
00:34:28,533 --> 00:34:30,053
the ecological succession.

587
00:34:31,634 --> 00:34:35,596
As I mentioned earlier, young trees will tend to be growing at the edge of the forest and

588
00:34:35,636 --> 00:34:41,198
then the older ones will be deeper inside, but there's also young regrowth possible inside

589
00:34:41,218 --> 00:34:41,738
the forest.

590
00:34:42,639 --> 00:34:43,679
So how can we achieve that?

591
00:34:43,779 --> 00:34:47,241
We said how the viability can affect the tree size selection.

592
00:34:47,802 --> 00:34:51,824
However, depending on the terrain data that we use,

593
00:34:52,004 --> 00:34:54,125
we don't always end up with a smooth gradient

594
00:34:54,205 --> 00:34:56,387
on our viability, which can result

595
00:34:56,507 --> 00:34:59,348
of having our tallest tree at the edge of the forest,

596
00:34:59,408 --> 00:34:59,929
for instance.

597
00:35:01,890 --> 00:35:05,452
So for this reason, we added the h parameter,

598
00:35:06,032 --> 00:35:08,894
which is basically just a sign distance field generated

599
00:35:08,954 --> 00:35:09,814
from our viability.

600
00:35:10,630 --> 00:35:13,932
And while we have various options to control how it will

601
00:35:13,972 --> 00:35:18,214
affect the size distribution, we can either add, multiply,

602
00:35:18,414 --> 00:35:20,055
or interpolate with the vital T.

603
00:35:22,177 --> 00:35:25,599
So we can easily tweak the level of influence it has,

604
00:35:27,040 --> 00:35:27,460
like this.

605
00:35:28,000 --> 00:35:32,583
And by adjusting the age maximum distance on the sign

606
00:35:32,603 --> 00:35:36,946
distance field, this gives us a nice control on how deep the

607
00:35:37,006 --> 00:35:38,306
border of our forest will be.

608
00:35:41,803 --> 00:35:44,993
And as a bonus side effect, by using a ramp on the edge,

609
00:35:45,053 --> 00:35:47,000
we can also profile the shape of our forest.

610
00:35:53,085 --> 00:35:55,187
There's there's another important thing we need to

611
00:35:55,247 --> 00:36:00,090
control and um that is the scattering density. If our

612
00:36:00,150 --> 00:36:03,513
density is uniform uh well we might have a good spacing

613
00:36:03,573 --> 00:36:07,836
between our our small trees however uh we can uh we will

614
00:36:07,876 --> 00:36:11,899
have a really bad overlap on our large ones. And also the

615
00:36:11,939 --> 00:36:15,281
number of asset we spawn is a matter of performance of

616
00:36:15,341 --> 00:36:18,823
course. Uh the small trees they don't have the same GPU cost as

617
00:36:18,843 --> 00:36:21,685
the large ones so it is really important to keep a tight

618
00:36:21,745 --> 00:36:22,346
control on that.

619
00:36:25,087 --> 00:36:27,427
A sample ramp here will give us that control.

620
00:36:27,867 --> 00:36:29,848
By default, the density ramp is based

621
00:36:29,908 --> 00:36:31,868
on the size of our species.

622
00:36:32,369 --> 00:36:35,169
However, we also have other options

623
00:36:35,249 --> 00:36:37,670
to base it on the age or viability

624
00:36:38,110 --> 00:36:42,111
if we have a species that don't have several size variations.

625
00:36:44,712 --> 00:36:47,313
Then we can also mix in terrain attributes,

626
00:36:47,393 --> 00:36:49,373
like illumination or slope aspect

627
00:36:49,393 --> 00:36:51,654
to affect the density of a species.

628
00:36:51,714 --> 00:36:53,695
So an example of that here.

629
00:36:56,430 --> 00:37:04,033
And uh example of the same thing in game. Jumping to another

630
00:37:04,073 --> 00:37:08,355
feature now, uh some of the biomes we wanted to recreate add

631
00:37:08,515 --> 00:37:13,017
a lot of color variation. Here the grass and bush color is

632
00:37:13,077 --> 00:37:15,718
varying a lot in this uh reference picture.

633
00:37:18,752 --> 00:37:23,254
So to do that, without duplicating our asset texture or material,

634
00:37:23,794 --> 00:37:27,276
we have the option to tint the scattered instance individually.

635
00:37:27,956 --> 00:37:30,577
So the input value that drives the gradient color ramp

636
00:37:30,637 --> 00:37:34,359
can be either viability, age, or a combination of any terrain data.

637
00:37:35,707 --> 00:37:39,570
And here in this example, we're using the water sign distance

638
00:37:39,631 --> 00:37:42,833
field data just to give a rusted tint to the grass growing

639
00:37:42,893 --> 00:37:44,254
in our wetland biome.

640
00:37:45,035 --> 00:37:47,957
And well, the result in game here,

641
00:37:48,398 --> 00:37:50,599
that's where this grass color variation comes from.

642
00:37:53,582 --> 00:37:55,163
The scattered entity also needs to have

643
00:37:55,183 --> 00:37:56,404
their own specific rotation.

644
00:37:57,985 --> 00:38:00,807
By default, they have their forward axis oriented

645
00:38:00,847 --> 00:38:01,888
towards the terrain slope.

646
00:38:03,890 --> 00:38:07,313
And this is interesting, because it

647
00:38:07,373 --> 00:38:09,555
allows us to do things like having this grass

648
00:38:09,615 --> 00:38:12,899
asset that we see on the left here leaning toward the water.

649
00:38:13,219 --> 00:38:17,944
And that's because of the slope.

650
00:38:18,504 --> 00:38:21,888
So if it was on either side of the river here,

651
00:38:21,968 --> 00:38:24,470
the grass would be always leaning toward the water.

652
00:38:26,705 --> 00:38:30,646
Another example is a pre-bended tree trunk that grows in slope.

653
00:38:31,326 --> 00:38:33,727
Unfortunately, we didn't do that in our game,

654
00:38:33,767 --> 00:38:34,648
but I wish we did.

655
00:38:34,808 --> 00:38:35,368
It's kind of cool.

656
00:38:36,708 --> 00:38:38,349
But we could have the system would allow it.

657
00:38:40,170 --> 00:38:41,610
We did other cool things, however.

658
00:38:42,250 --> 00:38:46,292
And well, not sure if any player will notice that in the game

659
00:38:46,512 --> 00:38:51,874
if I was not mentioning it, but this grass asset that we see

660
00:38:51,914 --> 00:38:55,135
here, well, it is oriented on the wind vector map.

661
00:38:57,830 --> 00:39:00,232
So this is another orientation option that we have.

662
00:39:00,913 --> 00:39:04,216
The wind map is just based on the overall wind direction,

663
00:39:04,256 --> 00:39:07,959
but it is fluctuating slightly based on the terrain shape

664
00:39:07,999 --> 00:39:08,400
as well.

665
00:39:09,281 --> 00:39:11,583
So it might be a bit hard to see here,

666
00:39:11,683 --> 00:39:14,025
but when blowing against the hill,

667
00:39:14,566 --> 00:39:16,488
it will tend to flow around it a little bit.

668
00:39:19,983 --> 00:39:22,087
Then now just to finish with the rotation options,

669
00:39:22,407 --> 00:39:25,391
in all cases, the asset can be horizontal or aligned

670
00:39:25,471 --> 00:39:26,513
to the tearing slope.

671
00:39:26,653 --> 00:39:28,436
That's controllable with a percentage.

672
00:39:29,798 --> 00:39:32,642
And we have rotation jitter on all axis.

673
00:39:33,904 --> 00:39:36,688
We use that a lot on all our vegetation assets.

674
00:39:40,685 --> 00:39:44,968
Now we have covered most of the parameters to control the NST generation itself.

675
00:39:45,748 --> 00:39:50,691
However, the biomes are not limited to the asset placement only, because the position

676
00:39:50,751 --> 00:39:56,435
of asset can also have an effect on some of the terrain properties and it can also have

677
00:39:56,455 --> 00:39:58,476
an effect on the surrounding assets as well.

678
00:39:59,237 --> 00:40:01,857
Here in this picture, I see four different things

679
00:40:02,158 --> 00:40:04,698
that the presence of those trees influence visually

680
00:40:04,738 --> 00:40:05,579
in their surrounding.

681
00:40:06,979 --> 00:40:09,920
First, the terrain is covered with pine needles,

682
00:40:10,020 --> 00:40:11,741
so the terrain texture is affected.

683
00:40:12,961 --> 00:40:14,862
We have a slight terrain elevation

684
00:40:14,882 --> 00:40:18,543
around the trunk of those trees, so the terrain height map

685
00:40:18,583 --> 00:40:19,663
would be affected as well.

686
00:40:20,513 --> 00:40:23,996
We have pine cones and dead branch on the ground around the tree.

687
00:40:24,676 --> 00:40:30,761
For sure, the shadow provided by the trees might encourage or prevent the growth of other species.

688
00:40:33,584 --> 00:40:34,965
To do that in our system,

689
00:40:37,064 --> 00:40:41,626
After the entities distribution is done, we have the option of transferring some data

690
00:40:41,666 --> 00:40:45,427
back to the terrain from the scattered entities.

691
00:40:45,447 --> 00:40:48,248
And we use this process for four different things.

692
00:40:48,608 --> 00:40:52,149
Terrain deformation, basically just affecting the height map.

693
00:40:52,690 --> 00:40:55,531
Terrain textures, terrain data output.

694
00:40:57,084 --> 00:41:00,106
which is a mask that can be used in following species,

695
00:41:00,647 --> 00:41:01,747
and then a terrine color.

696
00:41:02,067 --> 00:41:04,729
This is just a tint that gets mixed in with our terrine

697
00:41:04,749 --> 00:41:05,190
texture.

698
00:41:05,870 --> 00:41:08,972
And all four of these are independent from one another.

699
00:41:11,412 --> 00:41:14,615
Let's start an example with the terrain deformation.

700
00:41:16,096 --> 00:41:18,898
We can generate a mask from the scattered entity's position.

701
00:41:19,579 --> 00:41:22,001
And then optionally, we can combine it

702
00:41:22,141 --> 00:41:25,464
with the available terrain data, as we saw earlier.

703
00:41:25,964 --> 00:41:28,326
For example, I might want to mask out

704
00:41:28,426 --> 00:41:31,088
any terrain deformation close to the road.

705
00:41:31,148 --> 00:41:34,811
So I'd be using the road mask in this case.

706
00:41:35,632 --> 00:41:39,315
And once we have our mask, we set the displacement height

707
00:41:39,455 --> 00:41:40,036
for the terrain.

708
00:41:41,012 --> 00:41:45,854
Here it will be raised by one meter, and this will deform the terrain accordingly.

709
00:41:47,915 --> 00:41:51,156
So this is the deformation we get from a user point of view.

710
00:41:53,049 --> 00:41:57,733
I think this is a really interesting feature to have because most of the time in games,

711
00:41:58,193 --> 00:42:02,256
the trees are just sticking to the ground, they don't have any effect on the terrain

712
00:42:02,356 --> 00:42:02,756
around them.

713
00:42:03,076 --> 00:42:08,560
But in nature, the tree roots will be lifting the ground a little bit and also by holding

714
00:42:08,600 --> 00:42:13,744
the soil together, that will limit the erosion a little bit and then create shapes like this

715
00:42:13,824 --> 00:42:14,345
in the forest.

716
00:42:21,419 --> 00:42:24,480
Now, let's take a closer look at those three routes.

717
00:42:25,160 --> 00:42:27,681
We will want them to blend seamlessly with the terrain.

718
00:42:28,522 --> 00:42:31,543
To do that, we can generate a matching terrain texture

719
00:42:31,603 --> 00:42:31,983
underneath.

720
00:42:33,384 --> 00:42:35,904
Once again, we generate a mask from the scattered entities.

721
00:42:36,785 --> 00:42:38,906
And we set the number of texture we

722
00:42:38,926 --> 00:42:41,627
want to generate from this mask, select the desired texture

723
00:42:41,687 --> 00:42:44,468
from the roll down menu, which will actually

724
00:42:44,828 --> 00:42:47,709
fetch the available terrain texture from the disturb

725
00:42:47,729 --> 00:42:48,329
via Python.

726
00:42:49,089 --> 00:42:49,189
And

727
00:42:51,375 --> 00:42:54,778
Then our mask grayscale value will determine which texture is

728
00:42:54,858 --> 00:42:55,518
applied where.

729
00:42:56,759 --> 00:43:02,263
And well, we said the second texture here

730
00:43:02,324 --> 00:43:05,566
to appear where the mask value is 0.5 and above.

731
00:43:05,586 --> 00:43:10,269
Once the texture IDs are sent to its true,

732
00:43:10,309 --> 00:43:12,591
this is the same kind of result we would get.

733
00:43:13,452 --> 00:43:16,854
And now our routes are blending well

734
00:43:16,934 --> 00:43:18,135
with the terrain underneath.

735
00:43:19,969 --> 00:43:22,691
Next, perhaps we want to add extra ingredients

736
00:43:22,771 --> 00:43:23,452
around those trees.

737
00:43:25,033 --> 00:43:27,916
So what we can do is generate a new terrain data attribute

738
00:43:27,976 --> 00:43:28,596
from our trees.

739
00:43:28,656 --> 00:43:31,098
But this time, this mask will be actually

740
00:43:31,118 --> 00:43:33,720
stored on the terrain to be reused as viability

741
00:43:33,760 --> 00:43:34,861
by the following species.

742
00:43:36,182 --> 00:43:37,864
Once we're happy with our mask setup,

743
00:43:37,924 --> 00:43:40,906
we're ready to go over to our next node, Forest Rucks,

744
00:43:41,106 --> 00:43:41,747
in this case.

745
00:43:42,628 --> 00:43:44,409
So we define this asset viability

746
00:43:44,449 --> 00:43:46,651
by using the ponderosa mask we produced

747
00:43:46,691 --> 00:43:47,491
with the previous node.

748
00:43:48,452 --> 00:43:52,594
And as a result, we get those assets scattered

749
00:43:52,654 --> 00:43:53,474
around those trees.

750
00:43:53,554 --> 00:43:55,955
And so the position of those will always

751
00:43:55,995 --> 00:43:58,517
be linked to the position of the other species.

752
00:43:58,637 --> 00:44:00,398
So that's quite convenient.

753
00:44:02,358 --> 00:44:04,500
If we go back to our Ponderosa tree node,

754
00:44:04,600 --> 00:44:10,362
we can also output the age data for a species, which

755
00:44:10,402 --> 00:44:15,385
will allow us to, for instance, to spawn new ingredients just

756
00:44:15,425 --> 00:44:17,086
at the edge of the forest, for instance.

757
00:44:18,230 --> 00:44:21,131
Or if you guys remember, as we observed earlier,

758
00:44:21,191 --> 00:44:24,012
we can also use that to create the young regrowth

759
00:44:24,052 --> 00:44:27,353
effect for the ecological succession.

760
00:44:28,233 --> 00:44:31,934
Then we would just keep adding further ingredients

761
00:44:32,814 --> 00:44:34,635
to build a full recipe like this.

762
00:44:35,695 --> 00:44:39,857
And on one map of one kilometer square in the game,

763
00:44:39,897 --> 00:44:43,398
that's over 600,000 entities generated by the biome tool.

764
00:44:43,899 --> 00:44:47,880
And for FC5, we had about 70 maps in total

765
00:44:47,900 --> 00:44:48,641
like this in the world.

766
00:44:51,622 --> 00:44:52,302
One last feature.

767
00:44:53,102 --> 00:44:54,443
This is Google Earth picture.

768
00:44:54,683 --> 00:44:57,124
And the phenomenon we're interested in here

769
00:44:57,724 --> 00:45:01,866
is the terrain humidity, the color variation

770
00:45:01,966 --> 00:45:03,706
between the dry brown and the lush green.

771
00:45:06,802 --> 00:45:11,465
So as we saw for the cliff strata color, in the biome tool,

772
00:45:11,505 --> 00:45:14,348
we also generate a terrain tint here

773
00:45:14,448 --> 00:45:18,271
that will get mixed with our organic terrain texture

774
00:45:18,311 --> 00:45:18,871
distribution.

775
00:45:19,351 --> 00:45:21,533
And this gives us further variation,

776
00:45:22,214 --> 00:45:25,496
and at the same time, limit the amount of terrain texture

777
00:45:25,536 --> 00:45:26,457
we need to use in game.

778
00:45:28,340 --> 00:45:34,244
Note that the neutral color for this color layer is an average gray, which allows us

779
00:45:34,284 --> 00:45:36,686
to either darken or lighten the terrain texture.

780
00:45:36,706 --> 00:45:45,473
And here just a zoomed out view of the terrain in game just to see the texture and color

781
00:45:45,513 --> 00:45:47,335
variation generated from the biomes.

782
00:45:49,772 --> 00:45:53,992
It's also worth noting that all the terrine texture

783
00:45:54,032 --> 00:45:57,033
and procedural tint can also transpire through the grass.

784
00:45:57,593 --> 00:46:00,474
And that is because the grass shader will pick up

785
00:46:00,514 --> 00:46:01,254
the terrine color.

786
00:46:01,874 --> 00:46:03,735
And while the amount of color it picks up

787
00:46:03,855 --> 00:46:07,815
is also controllable with the mask of the grass asset itself.

788
00:46:07,855 --> 00:46:12,536
So it can be either picking up 100% of the terrine color,

789
00:46:12,616 --> 00:46:15,617
or just as a gradient, or only on a specific part

790
00:46:15,817 --> 00:46:16,257
of the plant.

791
00:46:19,047 --> 00:46:22,873
And at the end, this is the data exported to the editor.

792
00:46:23,414 --> 00:46:26,118
NST point clouds, terrain texture IDs, terrain height map,

793
00:46:26,158 --> 00:46:28,722
terrain color, and also a forest mask

794
00:46:29,143 --> 00:46:32,989
that will be used later by the fog and the wall map tool.

795
00:46:40,019 --> 00:46:43,183
So in this section, I want to share some stuff

796
00:46:43,203 --> 00:46:44,484
that we changed along the way.

797
00:46:45,665 --> 00:46:47,868
While things don't always go as planned,

798
00:46:47,908 --> 00:46:49,649
some ideas might be fine on paper,

799
00:46:49,710 --> 00:46:51,612
but might not be so good in the end.

800
00:46:53,213 --> 00:46:56,577
So a first example of that is for our biome painter.

801
00:46:57,770 --> 00:47:03,372
Initially, the plan was to support like a gradient painting, uh, so that we could blend

802
00:47:03,712 --> 00:47:09,014
uh, blend the biomes together. It is, it is supported in the Udzni tool, uh, because the

803
00:47:09,114 --> 00:47:14,696
viability system would, would kick in to merge all the, all the biomes together. But uh,

804
00:47:15,256 --> 00:47:18,677
from an editor and a user point of view, it was not such a good idea.

805
00:47:20,246 --> 00:47:23,630
Turns out we had so much biomes that could be mixed together,

806
00:47:24,431 --> 00:47:26,453
it would have been a nightmare to debug.

807
00:47:27,154 --> 00:47:29,617
So on the left here, we only have three biomes,

808
00:47:29,677 --> 00:47:33,081
and it gets really difficult to tell all the surface

809
00:47:33,141 --> 00:47:35,503
on which the red biome is painted, for instance.

810
00:47:37,248 --> 00:47:43,791
We could have a mode to visualize one biome at a time, for sure, but it was great for

811
00:47:43,811 --> 00:47:47,673
the user to be able to see all of them painted on the terrain at the same time.

812
00:47:48,254 --> 00:47:54,236
And really, in the end, that cross-fade blending was not needed at all to get good results.

813
00:47:54,696 --> 00:47:59,319
So here on the right, even though it looks strange, this is the input format that we

814
00:47:59,359 --> 00:48:00,239
use for the biome painter.

815
00:48:03,172 --> 00:48:06,774
Another example is the Terrain abiotic data generation.

816
00:48:07,755 --> 00:48:11,458
We saw that at the beginning of the Biontool earlier.

817
00:48:12,278 --> 00:48:14,380
But it is actually used in multiple tools.

818
00:48:14,940 --> 00:48:20,364
So at first, we had a separate button to generate that and

819
00:48:20,404 --> 00:48:21,225
cache it on disk.

820
00:48:21,906 --> 00:48:24,848
And then if there was a terraforming change, the user

821
00:48:24,888 --> 00:48:28,410
had to rebake it before generating other tools like

822
00:48:28,450 --> 00:48:29,011
the Biontool.

823
00:48:30,258 --> 00:48:34,301
But what happened is that people got confused about when it was required to bake it,

824
00:48:35,021 --> 00:48:40,105
and as a result it was not always rebaked after terraforming change,

825
00:48:40,165 --> 00:48:45,888
which led to a different result than the real final result given by the Bell machines,

826
00:48:45,968 --> 00:48:48,670
which was actually rebaking everything properly.

827
00:48:50,491 --> 00:48:55,295
Well, the reason why we separated this process initially was really just to save a bit of

828
00:48:55,335 --> 00:48:56,896
time when baking these other tools.

829
00:48:57,516 --> 00:49:03,400
But in the end, this was an extra step that brought complexity for the user and it was

830
00:49:03,421 --> 00:49:03,921
not worth it.

831
00:49:04,501 --> 00:49:10,426
So we simply decided to incorporate that inside the tool that required that data.

832
00:49:10,826 --> 00:49:12,587
That way we're sure it's always up to date.

833
00:49:15,714 --> 00:49:19,440
Finally, a conclusion, some lessons learned.

834
00:49:20,802 --> 00:49:23,146
With great power comes great responsibility.

835
00:49:24,107 --> 00:49:24,988
Always wanted to say that.

836
00:49:27,500 --> 00:49:29,361
Procedural tool can generate a lot of data.

837
00:49:29,901 --> 00:49:32,642
This gives us great control over performance,

838
00:49:33,243 --> 00:49:34,883
but also over gameplay and art.

839
00:49:35,804 --> 00:49:40,185
On FC5, the art direction, they wanted crazy dense forests.

840
00:49:40,425 --> 00:49:43,827
However, from a gameplay, well, gameplay-wise,

841
00:49:43,887 --> 00:49:47,408
it was not interesting at all because the AI

842
00:49:47,448 --> 00:49:49,949
and the large animals, they could not

843
00:49:50,009 --> 00:49:51,029
navigate in the forest.

844
00:49:51,810 --> 00:49:58,237
So on our side, with control over the procedural vegetation distribution, we had to make the

845
00:49:58,277 --> 00:50:03,603
right call and it was just to ship with the most density without impacting gameplay.

846
00:50:05,850 --> 00:50:09,331
Another lesson, make sure to design elegant tools that opens

847
00:50:09,411 --> 00:50:10,232
up possibilities.

848
00:50:10,832 --> 00:50:13,253
A good example of that is our biome tool.

849
00:50:14,294 --> 00:50:17,135
It is a system that allows so much possibility.

850
00:50:17,235 --> 00:50:20,517
Honestly, I think we barely scratched the surface of what

851
00:50:20,557 --> 00:50:21,317
we can do with that.

852
00:50:22,037 --> 00:50:22,498
And that's good.

853
00:50:24,237 --> 00:50:26,438
Then make sure to keep things simple.

854
00:50:27,199 --> 00:50:30,501
Well, any new systems are often overengineered.

855
00:50:31,181 --> 00:50:36,684
And that is because we figured out each element of that system

856
00:50:36,744 --> 00:50:37,164
at first.

857
00:50:37,224 --> 00:50:39,506
But once everything's in place, we

858
00:50:39,526 --> 00:50:41,027
have a clear view of the whole thing.

859
00:50:41,527 --> 00:50:43,888
And we can most likely do a cleanup pass,

860
00:50:43,908 --> 00:50:46,670
and a simpler, more elegant design can emerge.

861
00:50:48,773 --> 00:50:51,814
Then make sure to listen and observe your user.

862
00:50:52,774 --> 00:50:54,675
They might prefer to have manual control

863
00:50:54,835 --> 00:50:56,335
over an automated process.

864
00:50:56,855 --> 00:51:00,216
And a good example of that is our freshwater tool.

865
00:51:01,676 --> 00:51:05,437
The rivers, they could actually carve their own riverbed

866
00:51:05,477 --> 00:51:06,097
automatically.

867
00:51:06,617 --> 00:51:08,017
But it was optional.

868
00:51:08,077 --> 00:51:11,158
But actually, during production, almost no level artists

869
00:51:11,298 --> 00:51:11,918
use that at all.

870
00:51:11,958 --> 00:51:14,259
They just prefer to do the terraforming manually

871
00:51:14,299 --> 00:51:15,559
and then place the river.

872
00:51:16,857 --> 00:51:19,898
So which leads me to my next point, like make sure to be

873
00:51:19,958 --> 00:51:20,538
flexible.

874
00:51:21,059 --> 00:51:22,739
Initial plans are not always the best.

875
00:51:24,800 --> 00:51:28,862
And then make sure to keep a good balance between control

876
00:51:28,922 --> 00:51:29,663
and automation.

877
00:51:30,243 --> 00:51:33,104
Too much automation and really things can get out of control

878
00:51:33,164 --> 00:51:36,766
if you have many systems that are independent from one

879
00:51:36,826 --> 00:51:40,768
another, and then just changing one thing here is actually

880
00:51:40,808 --> 00:51:42,529
affecting something else elsewhere.

881
00:51:42,549 --> 00:51:44,390
That might be really bad.

882
00:51:45,830 --> 00:51:51,316
And on the other hand, too much manual control and things can become really time consuming

883
00:51:51,356 --> 00:51:52,377
and difficult to manage.

884
00:51:53,077 --> 00:51:55,720
And after all, this is why we're building procedural tools.

885
00:51:57,877 --> 00:52:00,839
Just to finish, I want to give credit to all these people

886
00:52:00,959 --> 00:52:04,481
for their small or big contribution to the pipeline.

887
00:52:05,442 --> 00:52:08,504
And well, I hope you enjoyed the presentation.

888
00:52:09,785 --> 00:52:13,407
If you have friends that didn't get the chance to get in,

889
00:52:13,527 --> 00:52:16,089
or you think that they might be interested to see

890
00:52:16,109 --> 00:52:19,291
the presentation, I'll be giving the talk again tonight

891
00:52:19,351 --> 00:52:22,493
at the Ubisoft Lounge from 5 to 6 PM.

892
00:52:23,814 --> 00:52:25,295
So thank you, everyone.

893
00:52:36,166 --> 00:52:36,787
Any questions?

894
00:52:38,910 --> 00:52:39,390
Don't be shy.

895
00:52:50,151 --> 00:52:56,596
Hello? Hello? Okay, there we go. Um, can you give us an idea of um, the resolution at which you're

896
00:52:57,076 --> 00:53:01,419
storing a lot of these masks and terrain data, like the ecotopes for example? Yes. Or the

897
00:53:01,439 --> 00:53:07,683
pylons. So the the resolution of of the mask is uh actually one pixel per meter on the

898
00:53:07,723 --> 00:53:07,984
terrain.

899
00:53:08,864 --> 00:53:13,468
So I think that's about half resolution of the terrain itself, right?

900
00:53:14,009 --> 00:53:14,249
Sorry?

901
00:53:14,269 --> 00:53:16,370
That's about half resolution of the terrain itself?

902
00:53:16,691 --> 00:53:21,875
Yeah, exactly. The terrain height maps is actually 50 centimeters.

903
00:53:22,476 --> 00:53:23,516
Okay, cool. Thank you.

904
00:53:25,630 --> 00:53:26,451
Hey, testing.

905
00:53:27,152 --> 00:53:28,674
Incredible talk, awesome stuff.

906
00:53:28,855 --> 00:53:29,155
Thank you.

907
00:53:29,175 --> 00:53:31,198
I had a question about the point clouds.

908
00:53:31,659 --> 00:53:31,899
Yes.

909
00:53:32,300 --> 00:53:35,004
Does that, what are you writing out of Houdini's

910
00:53:35,044 --> 00:53:38,169
like a big file full of like vector data

911
00:53:38,189 --> 00:53:39,431
and then the engine reads it in?

912
00:53:39,923 --> 00:53:48,605
Yeah, well actually we have a proprietary format that we call GameX and it's used across

913
00:53:48,845 --> 00:53:55,647
different engine at Ubisoft and yeah it's just a file format which will store the points

914
00:53:55,707 --> 00:54:00,168
and the position and all the attributes required for the engine.

915
00:54:00,188 --> 00:54:02,549
That's cool. Alright, thanks.

916
00:54:04,186 --> 00:54:06,186
Hey, quick question about the users.

917
00:54:06,507 --> 00:54:09,067
I was wondering if you had a system to compensate

918
00:54:09,127 --> 00:54:11,568
for the errors made by the users in terms of the terrain.

919
00:54:12,068 --> 00:54:14,929
Let's say, for example, you were talking about those squares

920
00:54:14,989 --> 00:54:16,289
of like one kilometer, one kilometer.

921
00:54:16,929 --> 00:54:18,470
What if I sculpt the edge there

922
00:54:19,210 --> 00:54:20,350
and I don't have the other check out,

923
00:54:20,370 --> 00:54:21,850
because I assume there's some source control.

924
00:54:22,471 --> 00:54:24,091
What if I change the edge of this terrain

925
00:54:24,311 --> 00:54:26,132
and the other edge doesn't match anymore?

926
00:54:26,252 --> 00:54:28,872
Or I put a river there or a lake and it doesn't match,

927
00:54:29,012 --> 00:54:30,613
like you rebuild that afterwards or what?

928
00:54:31,073 --> 00:54:32,194
Very clever question.

929
00:54:32,714 --> 00:54:34,415
Well, users tend to do this kind of stuff.

930
00:54:34,835 --> 00:54:39,398
Actually, the tool in the Insta will prevent you to paint

931
00:54:39,498 --> 00:54:43,421
too close to the edge, just to avoid getting seams.

932
00:54:43,601 --> 00:54:46,243
Let's say if you would just load one map and then raise

933
00:54:46,263 --> 00:54:49,365
the terrain, and then load the next map, and then you would

934
00:54:49,405 --> 00:54:52,026
have a really big gap between the two.

935
00:54:52,066 --> 00:54:56,809
But actually, you're not allowed to paint to the very

936
00:54:56,870 --> 00:54:57,950
edge of the map.

937
00:54:58,370 --> 00:54:58,931
OK, thank you.

938
00:55:01,625 --> 00:55:07,454
Hey, can you give us an idea about how many people and about how long all this work took?

939
00:55:08,856 --> 00:55:09,697
To develop the tools?

940
00:55:09,917 --> 00:55:10,077
Yeah.

941
00:55:12,111 --> 00:55:12,751
Good question.

942
00:55:13,012 --> 00:55:19,316
Well, we were like one and a half person over like two and

943
00:55:19,336 --> 00:55:19,957
a half years.

944
00:55:22,459 --> 00:55:26,602
Then at some point, the tools were fairly stable, but we

945
00:55:26,622 --> 00:55:31,806
just kept adding new tools over time because some were

946
00:55:31,846 --> 00:55:32,967
already quite stable.

947
00:55:33,067 --> 00:55:34,468
And yeah.

948
00:55:35,209 --> 00:55:35,709
Cool, thanks.

949
00:55:44,168 --> 00:55:45,829
Hello, thank you for your incredible talk.

950
00:55:46,710 --> 00:55:47,670
I have two questions.

951
00:55:48,411 --> 00:55:49,371
One is about the cliff.

952
00:55:50,852 --> 00:55:52,713
How did you prepare the mesh?

953
00:55:52,954 --> 00:55:56,716
Did you have module cliffs, and then you input them

954
00:55:57,056 --> 00:55:59,438
into the cliff tool or something?

955
00:55:59,678 --> 00:56:01,339
How do you make the cliff meshes?

956
00:56:02,270 --> 00:56:08,532
Well, as we said, we just start from the terrain mesh and then just modify the geometry from there.

957
00:56:08,852 --> 00:56:13,133
So, at first, the input mesh is just the terrain.

958
00:56:13,693 --> 00:56:20,115
We delete some polygons of it and just keep the actual slope range that we want.

959
00:56:20,455 --> 00:56:28,278
And then, by doing a geometry operation on that, extrusion, displacement, this becomes our actual mesh.

960
00:56:30,152 --> 00:56:35,075
The detailed parts of the rock surfaces, those were all displacement, I guess?

961
00:56:35,335 --> 00:56:35,575
Yeah.

962
00:56:35,955 --> 00:56:36,616
Oh, okay.

963
00:56:36,676 --> 00:56:37,116
Thank you.

964
00:56:37,616 --> 00:56:39,497
And another thing is about the rivers.

965
00:56:41,158 --> 00:56:45,661
When working with height fields, it intends to...

966
00:56:47,803 --> 00:56:53,666
Rivers go from up to down, but then sometimes when you do the wrong path, it goes down to

967
00:56:53,726 --> 00:56:53,846
up.

968
00:56:54,187 --> 00:56:54,467
Yeah, yeah.

969
00:56:54,527 --> 00:56:55,707
How do you control that?

970
00:56:56,774 --> 00:57:01,921
uh, it was up to the user to uh, make sure they, they set up the, the terrain properly to

971
00:57:01,981 --> 00:57:09,591
have like the, the, the water flow down in a, in a proper way. Uh, it was not a big deal if,

972
00:57:09,811 --> 00:57:12,755
well, we made sure that this, this, uh, didn't happen.

973
00:57:13,316 --> 00:57:16,378
But if it was the case, it wouldn't break anything.

974
00:57:16,418 --> 00:57:20,442
It would be weird on the flow map itself.

975
00:57:21,522 --> 00:57:23,704
Then you would have a point where the water

976
00:57:23,764 --> 00:57:27,528
would be flowing down in two different opposite direction.

977
00:57:28,008 --> 00:57:33,573
But yeah, we didn't have any check system to avoid this.

978
00:57:33,613 --> 00:57:36,375
We just, like the level artist,

979
00:57:36,395 --> 00:57:38,997
they just did a good terraforming job

980
00:57:39,598 --> 00:57:41,459
and make sure it was always logical.

981
00:57:42,180 --> 00:57:44,581
So it was basically like checking on the,

982
00:57:45,542 --> 00:57:47,282
like walking on the terrain and checking that

983
00:57:47,662 --> 00:57:48,623
nothing was really wrong.

984
00:57:49,243 --> 00:57:53,625
Yeah, and we also had the debug tools

985
00:57:53,725 --> 00:57:58,247
to check the actual, well, to display the flow map direction

986
00:57:58,307 --> 00:58:01,368
so it would display arrows on the water

987
00:58:01,448 --> 00:58:02,968
so it was easy to visualize

988
00:58:03,088 --> 00:58:05,890
like if it was flowing properly or not.

989
00:58:06,370 --> 00:58:07,230
Okay, thank you.

990
00:58:07,330 --> 00:58:07,630
Welcome.

991
00:58:10,612 --> 00:58:14,777
You spoke a little bit about avoiding locking in anything in the terrain so that the iterative

992
00:58:14,817 --> 00:58:15,958
process can continue.

993
00:58:17,060 --> 00:58:21,104
Just wondering a little bit about artificial things like roads and buildings which require

994
00:58:21,144 --> 00:58:23,366
certain types of terrain to be placed.

995
00:58:23,406 --> 00:58:27,251
How do you deal with that workflow and whether you need to lock in the terrain before adding

996
00:58:27,271 --> 00:58:27,411
those?

997
00:58:27,979 --> 00:58:34,241
Yeah, uh, well, any, any terraforming, uh, was, well all terraforming was done in the

998
00:58:34,301 --> 00:58:39,303
Edster and yes the, the roads would also affect the terraforming, but that was like, uh, done

999
00:58:39,363 --> 00:58:43,965
in the Edster as well, uh, because we have the, the road tool that, it's actually an

1000
00:58:44,045 --> 00:58:50,748
Edster tool. Um, but uh, then for the procedural, uh, the, the, the, the, the, the, the, the

1001
00:58:51,388 --> 00:58:55,629
like the procedural tool would receive all the terraforming,

1002
00:58:56,630 --> 00:58:58,030
well the height map would be extracted

1003
00:58:58,070 --> 00:58:59,611
with the terraforming of the road

1004
00:58:59,811 --> 00:59:04,092
and any like flattening for a location

1005
00:59:04,212 --> 00:59:06,133
to set up a house and stuff like that.

1006
00:59:06,793 --> 00:59:07,893
So if you're planning a village,

1007
00:59:09,014 --> 00:59:10,434
the planning would be completely different

1008
00:59:10,454 --> 00:59:11,735
depending on the terrain location.

1009
00:59:12,035 --> 00:59:13,996
Would you plan the village after making sure

1010
00:59:14,036 --> 00:59:15,576
everything is finalized?

1011
00:59:16,416 --> 00:59:16,756
Sorry?

1012
00:59:17,097 --> 00:59:18,637
Would you plan a village layout

1013
00:59:18,777 --> 00:59:20,538
after you make sure that everything is finalized?

1014
00:59:21,746 --> 00:59:26,508
Um, I'm not sure I understand, uh, perhaps we can, uh, chat afterward, uh, more in detail.

1015
00:59:26,988 --> 00:59:27,228
Okay.

1016
00:59:30,529 --> 00:59:30,790
All right.

1017
00:59:30,830 --> 00:59:32,090
Well, thanks everyone.

