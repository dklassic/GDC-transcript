1
00:00:06,711 --> 00:00:10,594
Hi everyone, I'm Yifan Chen from Fuxi AI Lab,

2
00:00:10,594 --> 00:00:11,654
in that is company.

3
00:00:11,654 --> 00:00:15,597
I'm pleased to be here to share you some game testing work

4
00:00:15,597 --> 00:00:20,340
with my partner Xiao Li, who is from the QA department.

5
00:00:20,340 --> 00:00:23,102
The title of our presentation is

6
00:00:23,102 --> 00:00:26,024
Building Intelligent Game Testing System,

7
00:00:26,024 --> 00:00:29,147
in that is MMORPG game.

8
00:00:29,147 --> 00:00:30,828
Okay, now let's begin.

9
00:00:32,556 --> 00:00:38,225
Fuxi AI Lab is the first organization focusing on the research and application of technology

10
00:00:38,225 --> 00:00:39,146
in gaming era.

11
00:00:39,146 --> 00:00:42,151
The lab is founded in September 2017.

12
00:00:42,151 --> 00:00:46,117
Our vision is to unite gaming with AI.

13
00:00:47,596 --> 00:00:53,601
We have five research directions including reinforcement learning, user profile, computer

14
00:00:53,601 --> 00:00:57,664
vision, virtual helmet, and natural language processing.

15
00:00:57,664 --> 00:01:04,449
Besides, we also build our data and computing platform to support all the AI research and applications.

16
00:01:06,624 --> 00:01:09,607
Game testing is an essential part of game development.

17
00:01:09,607 --> 00:01:12,710
Each game team needs a game test.

18
00:01:12,710 --> 00:01:16,374
Game testers are responsible for the game quality

19
00:01:16,374 --> 00:01:18,676
in the development periods.

20
00:01:18,676 --> 00:01:22,821
And after game publish, game tester can avoid operation.

21
00:01:23,522 --> 00:01:30,667
accident. Bugs in game will drastically spoil the game experience and cause economic loss.

22
00:01:30,667 --> 00:01:36,752
For example, Bioshock 2, a great game, it supports several platforms including Windows,

23
00:01:36,752 --> 00:01:39,234
PlayStation and Xbox. However, Bioshock 2

24
00:01:40,217 --> 00:01:48,187
suffered from bug issues. And in the year of 2010, 2K Games announced that they will

25
00:01:48,187 --> 00:01:53,654
not provide patch to fix these issues and stop to offer the downloadable contents,

26
00:01:53,654 --> 00:01:57,599
since they even can't work around these bug issues.

27
00:01:58,413 --> 00:02:01,675
and another license from China, Dota Legend,

28
00:02:01,675 --> 00:02:05,797
a popular game developed by Lily's company in Shanghai.

29
00:02:05,797 --> 00:02:10,539
On one holiday, the game officer distributed farewell

30
00:02:10,539 --> 00:02:12,941
to all the players at the Euro.

31
00:02:12,941 --> 00:02:15,802
However, this time they made a big mistake.

32
00:02:15,802 --> 00:02:18,483
They planned to give every player

33
00:02:18,483 --> 00:02:21,345
20 sovereigns gold and 50 diamonds,

34
00:02:21,345 --> 00:02:23,406
but the amount was reversed.

35
00:02:23,406 --> 00:02:27,788
They gave each player 20 sovereigns diamonds and 50 gold.

36
00:02:27,985 --> 00:02:36,427
the diamonds were very valuable in the game. This mistake caused an economic loss of 5 million yuan.

37
00:02:36,427 --> 00:02:40,168
So, all the cases show that game testing is very important.

38
00:02:40,168 --> 00:02:47,949
However, on the other hand, the game testers often complain with their work. The task is

39
00:02:47,949 --> 00:02:54,650
repetitive and tedious, the workload is hard, and the salary is not satisfied, and so on.

40
00:02:56,325 --> 00:03:01,467
Luckily, current AI and motion learning technicals progress rapidly.

41
00:03:01,467 --> 00:03:09,550
All these technicals, such as evolutionary algorithms, reinforcement learning, and deep neural networks

42
00:03:09,550 --> 00:03:13,632
may offer new possibilities to build a more intelligent game testing system.

43
00:03:13,632 --> 00:03:17,634
And this is also what we want to share with all of you.

44
00:03:19,578 --> 00:03:24,160
We explored and tested our measures in one MMORPG game,

45
00:03:24,160 --> 00:03:25,980
named Justice Online.

46
00:03:25,980 --> 00:03:28,861
It has become one of the most popular games in China

47
00:03:28,861 --> 00:03:30,382
since launch from June 2018.

48
00:03:30,382 --> 00:03:37,083
The main gameplanes are game quests and game dungeons.

49
00:03:37,083 --> 00:03:41,425
Game dungeons usually include PvE and PvP.

50
00:03:41,425 --> 00:03:43,385
Most of them are fighting theory.

51
00:03:45,847 --> 00:03:49,248
The testing work of Justice Online is very hard.

52
00:03:49,248 --> 00:03:53,890
The building system will generate three versions in one day.

53
00:03:53,890 --> 00:03:56,491
At each time slot, there are many resources involved,

54
00:03:56,491 --> 00:04:00,092
including programmers, game designers, and art designers.

55
00:04:00,092 --> 00:04:03,773
There are more than 400 commits during one slot.

56
00:04:03,773 --> 00:04:06,594
Ideally, all these three versions

57
00:04:06,594 --> 00:04:08,735
need to be tested in one day.

58
00:04:09,395 --> 00:04:17,203
and each version includes more than 100 stories and more than 100 and 1600 gameplays.

59
00:04:17,203 --> 00:04:24,650
The workload is so heavily in practice, it is impossible for our QA team to finish it with only 70 members.

60
00:04:25,250 --> 00:04:29,272
So we choose the new launch or recently modified task to test.

61
00:04:29,272 --> 00:04:35,134
However, this may lead the game at risk with its human neighbor.

62
00:04:35,134 --> 00:04:40,315
Currently, we have already achieved some results and experience

63
00:04:40,315 --> 00:04:45,617
on the regression test of Quest and the class balancing test.

64
00:04:45,617 --> 00:04:50,158
So today, our presentation will focus on these two types of testing work.

65
00:04:53,204 --> 00:04:57,745
OK, let's begin with the regression testing of Quest.

66
00:04:57,745 --> 00:05:01,106
I will invite my partner, Xiao Li,

67
00:05:01,106 --> 00:05:08,227
to share the background of this work.

68
00:05:08,227 --> 00:05:14,089
Hi, my name is Xiao Li, and I'm from QA department

69
00:05:14,089 --> 00:05:17,210
of NetEase company.

70
00:05:17,210 --> 00:05:20,610
Yes, I'm one of the QA for Justice Online.

71
00:05:22,654 --> 00:05:27,436
Next, I will talk about the general testing work in our team,

72
00:05:27,436 --> 00:05:37,079
and the difficulties encountered for regression testing of quests.

73
00:05:37,079 --> 00:05:42,441
Quest design is the cornerstone of MMORPG game,

74
00:05:42,441 --> 00:05:50,383
which help players involved in the game story and familiar with the game world.

75
00:05:50,383 --> 00:05:52,464
When you create a new character,

76
00:05:52,922 --> 00:05:59,784
and enter the game, the first thing you encounter is a quest or a mission.

77
00:05:59,784 --> 00:06:09,828
It will teach you how to operate, how to walk, and even how to kill a monster.

78
00:06:09,828 --> 00:06:15,910
Besides, you can learn many interesting stories by finishing them at the same time.

79
00:06:19,763 --> 00:06:26,127
There are mainly three types of plot-oriented quests in Justice Online.

80
00:06:26,127 --> 00:06:32,270
Main story, side story and encounter story.

81
00:06:32,270 --> 00:06:35,011
No matter which type,

82
00:06:35,011 --> 00:06:39,513
their main purpose is to tell a vivid story to players.

83
00:06:39,513 --> 00:06:47,777
The implementation of this quest is relatively simple.

84
00:06:47,777 --> 00:06:48,838
And at the same time,

85
00:06:49,565 --> 00:06:54,086
The difficulty for players to complete is relatively low.

86
00:06:54,086 --> 00:07:00,487
However, to construct a colorful game world,

87
00:07:00,487 --> 00:07:07,029
there are a great number of these quests.

88
00:07:07,029 --> 00:07:14,791
So it's really a big challenge for our QAs to deal with these quests.

89
00:07:14,791 --> 00:07:18,372
First, the number of the quests is large.

90
00:07:20,463 --> 00:07:27,686
We have 290 main stories, 371 side stories, and 475 encounter stories.

91
00:07:27,686 --> 00:07:35,048
Each quest consists of several task steps.

92
00:07:35,048 --> 00:07:45,812
Step means an independent unit, such as a goal in a quest,

93
00:07:45,812 --> 00:07:49,954
like talk with NPC, or kill some monsters.

94
00:07:52,585 --> 00:07:58,669
For example, a quest may require players to talk with NPC A,

95
00:07:58,669 --> 00:08:02,692
kill master B, and then go to somewhere.

96
00:08:02,692 --> 00:08:09,796
This means that the quest contains three task steps.

97
00:08:09,796 --> 00:08:13,538
All steps are in a certain order.

98
00:08:13,538 --> 00:08:20,883
So the total number of steps in Justice Online

99
00:08:21,425 --> 00:08:22,645
is over 15,000.

100
00:08:22,645 --> 00:08:30,389
It takes 200 hours to complete all these quests just one time.

101
00:08:30,389 --> 00:08:31,389
Second,

102
00:08:31,389 --> 00:08:40,353
the task steps are modified frequently,

103
00:08:40,353 --> 00:08:44,575
especially for the lately designed quests.

104
00:08:48,290 --> 00:08:53,234
Implementations between quests are coupled.

105
00:08:53,234 --> 00:08:57,297
Even different quests may influence each other unexpectedly.

106
00:08:57,297 --> 00:09:06,224
So it's very important to do regression testing.

107
00:09:06,224 --> 00:09:09,106
Regression testing for all quests is time consuming.

108
00:09:09,106 --> 00:09:11,788
And we don't have enough time and labor to do this.

109
00:09:11,788 --> 00:09:17,733
However, thank you for reading, and see you in the next one.

110
00:09:18,665 --> 00:09:22,248
If we don't do enough regression testing,

111
00:09:22,248 --> 00:09:24,490
bugs may be hidden in our game.

112
00:09:24,490 --> 00:09:28,133
This is a contradiction.

113
00:09:28,133 --> 00:09:34,738
In addition to manual testing,

114
00:09:34,738 --> 00:09:40,283
we also have some automated methods to ensure the quality of the quest.

115
00:09:42,475 --> 00:09:53,142
For example, we write test scripts to run the test cases automatically to check if there are bugs.

116
00:09:53,142 --> 00:09:58,306
Similarly, these scripts need to be written manually.

117
00:09:58,306 --> 00:10:01,908
And because of the frequent iterations,

118
00:10:01,908 --> 00:10:06,952
these scripts also need to be maintained manually, which is demanding.

119
00:10:11,554 --> 00:10:17,979
This is an example of how different quests may influence each other unexpectedly.

120
00:10:17,979 --> 00:10:26,385
One day, the game designer modified the boundary of the map for mission A.

121
00:10:26,385 --> 00:10:36,433
Unfortunately, that map was also used in another gameplay of mission B.

122
00:10:36,433 --> 00:10:37,834
Because of the modification.

123
00:10:38,929 --> 00:10:46,135
One of the guide NPC was out of boundary of the map in mission B.

124
00:10:46,135 --> 00:10:57,564
So players couldn't walk to the NPC's position. Therefore, mission B was blocked.

125
00:10:57,564 --> 00:11:03,730
Actually, this bug is very easy to be detected if we do regression testing.

126
00:11:08,768 --> 00:11:13,972
We have a complete set of automated testing process.

127
00:11:13,972 --> 00:11:17,775
After a new build version is packed,

128
00:11:17,775 --> 00:11:20,618
a new task is established.

129
00:11:20,618 --> 00:11:25,782
It will deploy the test environments,

130
00:11:25,782 --> 00:11:28,304
load the script library,

131
00:11:28,304 --> 00:11:31,287
and then execute the test scripts.

132
00:11:34,373 --> 00:11:42,116
The test results will be collected after all cases are done.

133
00:11:42,116 --> 00:11:48,617
At last, it will generate a test report and be sent to everyone in the project.

134
00:11:48,617 --> 00:11:57,560
In the script library, there are not only scripts for quests,

135
00:11:57,560 --> 00:12:00,741
but also scripts for gameplays.

136
00:12:02,521 --> 00:12:11,182
Each script covers the process of quest or gameplay and have some checkpoints.

137
00:12:11,182 --> 00:12:14,123
When the script cannot proceed as expected,

138
00:12:14,123 --> 00:12:17,704
all the checkpoints fails,

139
00:12:17,704 --> 00:12:27,865
we think there may be a bug and we need to check the problem manually.

140
00:12:27,865 --> 00:12:31,326
Most of our scripts are running on the game client.

141
00:12:32,167 --> 00:12:34,948
and they simulate human players operation.

142
00:12:34,948 --> 00:12:42,812
Let's look at an example of how the test script works.

143
00:12:42,812 --> 00:12:47,794
This is a part of test script for quests.

144
00:12:47,794 --> 00:12:53,316
This quest require players to go to the river to fetch water

145
00:12:53,316 --> 00:12:57,418
and then come back and pour the water into a bucket.

146
00:12:57,418 --> 00:13:00,339
In our script,

147
00:13:00,983 --> 00:13:07,245
We use action sequence to simulate players actions.

148
00:13:07,245 --> 00:13:09,626
Player need to go to the river,

149
00:13:09,626 --> 00:13:13,507
press FK to fetch the water,

150
00:13:13,507 --> 00:13:15,267
wait for fetching,

151
00:13:15,267 --> 00:13:17,588
and then go back to the bucket.

152
00:13:17,588 --> 00:13:21,809
Use atom to pour the water,

153
00:13:21,809 --> 00:13:23,049
at last,

154
00:13:23,049 --> 00:13:24,909
wait for pouring,

155
00:13:24,909 --> 00:13:25,870
like a flowchart.

156
00:13:25,870 --> 00:13:30,631
When we write the test script,

157
00:13:31,638 --> 00:13:38,819
Each action is written as shown in the picture.

158
00:13:38,819 --> 00:13:39,359
However,

159
00:13:39,359 --> 00:13:43,100
this method also have several disadvantages.

160
00:13:43,100 --> 00:13:46,041
On the one hand,

161
00:13:46,041 --> 00:13:52,882
one quest corresponds to one test script.

162
00:13:52,882 --> 00:13:58,143
So totally we need over 1000 test scripts just for quests.

163
00:14:01,152 --> 00:14:02,873
In our current situation,

164
00:14:02,873 --> 00:14:08,516
the coverage is very low as shown in the table.

165
00:14:08,516 --> 00:14:10,658
Only some of the quests are covered,

166
00:14:10,658 --> 00:14:18,983
especially for side story and encounter stories.

167
00:14:18,983 --> 00:14:24,366
Besides, new quests need new test script.

168
00:14:24,366 --> 00:14:27,728
In one of the past expansion pack updates,

169
00:14:28,405 --> 00:14:34,829
we updated nearly 100 new quests.

170
00:14:34,829 --> 00:14:40,273
Completing all scripts is a heavy and continuous work.

171
00:14:40,273 --> 00:14:46,736
On the other hand, scripts are sensitive to iterations.

172
00:14:46,736 --> 00:14:52,200
When designers modify the quest,

173
00:14:52,200 --> 00:14:55,802
test script should be updated.

174
00:14:55,802 --> 00:14:58,143
For example, in the past,

175
00:14:59,492 --> 00:15:04,594
One task step require players to talk with NPC A.

176
00:15:04,594 --> 00:15:07,055
But now it has changed to NPC B.

177
00:15:07,055 --> 00:15:10,476
And the script,

178
00:15:10,476 --> 00:15:17,039
and the test script may not be able to find NPC B and it will be blocked.

179
00:15:17,039 --> 00:15:23,301
This means that maintaining test script is also time consuming.

180
00:15:26,290 --> 00:15:34,815
So we really need a new solution to deal with this simple and plot-oriented quest.

181
00:15:34,815 --> 00:15:45,502
Okay, thanks for Xiao's introduction.

182
00:15:46,545 --> 00:15:52,111
So we need a new solution to deal with this simple and plot-oriented quest.

183
00:15:52,111 --> 00:15:58,478
We know that the old test is essentially code-based or rule-based.

184
00:15:58,478 --> 00:16:01,421
We should write a script for all quests.

185
00:16:01,421 --> 00:16:08,628
And if we can create a virtual test, who can complete the quest by itself, that will be great.

186
00:16:10,853 --> 00:16:13,294
In order to implement such a virtual test,

187
00:16:13,294 --> 00:16:17,216
we need to remove the problems of completing quests in games.

188
00:16:17,216 --> 00:16:21,118
We remove the problem from the view of human player,

189
00:16:21,118 --> 00:16:23,579
as the left board picture shows.

190
00:16:23,579 --> 00:16:28,481
The human player plays a game by observing the screen state

191
00:16:28,481 --> 00:16:31,602
and performing actions through mouse and keyboard.

192
00:16:31,602 --> 00:16:36,204
So first, we define state and actions.

193
00:16:36,204 --> 00:16:39,405
State are abstract of current game information.

194
00:16:40,477 --> 00:16:44,620
It should be distinguishable between different progress of quests.

195
00:16:44,620 --> 00:16:47,742
Actions are what the player can do in the game.

196
00:16:47,742 --> 00:16:58,690
In Justice Online, a state consists of task info, landmarks, items in the bag, enemies, and so on.

197
00:16:58,690 --> 00:17:06,196
All these can be reflected in the screen, and they are important to decide which actions will be performed.

198
00:17:06,854 --> 00:17:14,425
It should be noted that the items in the state get from the internal game engine, not from the screen image,

199
00:17:14,425 --> 00:17:17,630
which makes our measures more efficient in practice.

200
00:17:19,745 --> 00:17:23,447
The action defines what the player can do in games.

201
00:17:23,447 --> 00:17:27,509
It is not a simple operation about mouse and cable,

202
00:17:27,509 --> 00:17:32,012
but the function interface, such as run to object,

203
00:17:32,012 --> 00:17:34,553
which means go to the operation of object,

204
00:17:34,553 --> 00:17:37,595
candidate action, including two parts,

205
00:17:37,595 --> 00:17:40,897
action type and optional action parameters.

206
00:17:41,952 --> 00:17:45,315
All the actions can be called by our algorithms,

207
00:17:45,315 --> 00:17:53,081
and the implementation of these functions is provided by QA team.

208
00:17:53,081 --> 00:17:58,726
OK, our solutions of regression tests can be divided into three phases.

209
00:17:58,726 --> 00:18:01,829
The first phase, learn how to complete the quest

210
00:18:01,829 --> 00:18:05,792
through inserting and building quest graphs at the same time.

211
00:18:06,725 --> 00:18:13,392
The second phrase, we directly use the graph to get the best path for quest and replace

212
00:18:13,392 --> 00:18:17,497
the action sequence in best path to perform algorithm test.

213
00:18:17,497 --> 00:18:21,501
In third phrase, we speed up the searching for new quest.

214
00:18:25,145 --> 00:18:28,545
Since the problem is modeled at a macro decision process,

215
00:18:28,545 --> 00:18:31,686
we can build a graph of the quest

216
00:18:31,686 --> 00:18:34,447
by Monte Carlo Tree Search algorithm,

217
00:18:34,447 --> 00:18:36,727
as shown in the left figure.

218
00:18:36,727 --> 00:18:39,028
The node A is the start node,

219
00:18:39,028 --> 00:18:41,348
and the node D is the terminal node.

220
00:18:41,348 --> 00:18:43,229
Once arrived at node D,

221
00:18:43,229 --> 00:18:45,929
it means that the quest is completed.

222
00:18:45,929 --> 00:18:47,150
During the searching period,

223
00:18:47,750 --> 00:18:55,941
If the end node is arrived by the algorithm, we can calculate a best path from A to D based on the build graph.

224
00:18:55,941 --> 00:19:01,449
In current version, the best path is the shortest path, which can complete the quest.

225
00:19:02,762 --> 00:19:10,027
minimal steps. In the example as shown in the right figure, the shortest path is from

226
00:19:10,027 --> 00:19:17,032
A to B to C and R to D. We assume that if the game code is not changed, we can re-complete

227
00:19:17,032 --> 00:19:19,673
the quest following the best path again.

228
00:19:19,673 --> 00:19:29,340
The key of the searching algorithm is to choose the candidate action AI for node S.

229
00:19:30,560 --> 00:19:35,822
Here, we adopt the up-confidence bound strategy in MCTS,

230
00:19:35,822 --> 00:19:41,865
which chooses the maximum actions values of all PI.

231
00:19:41,865 --> 00:19:45,287
PI is initialized with equal probabilities

232
00:19:45,287 --> 00:19:49,269
and updated according to the UCB equation.

233
00:19:50,759 --> 00:19:56,443
The CI in the equation indicates the chosen time of ActionAI

234
00:19:56,443 --> 00:20:01,727
so the probability of ActionAI will decrease if CI increases

235
00:20:01,727 --> 00:20:07,892
The advantages of this strategy are twofold

236
00:20:07,892 --> 00:20:10,694
First, it can treat exploration and exploitation

237
00:20:10,694 --> 00:20:14,296
which is a historic problem in MCTS

238
00:20:14,296 --> 00:20:19,120
Second, it can avoid an infinitely loop between two loads

239
00:20:21,404 --> 00:20:26,254
the number of all the candidate actions is more than 14.

240
00:20:26,254 --> 00:20:29,962
So searching in the whole action space is time consuming.

241
00:20:31,670 --> 00:20:33,591
In fact, based on the simple rules,

242
00:20:33,591 --> 00:20:37,933
we can reduce the action space a lot.

243
00:20:37,933 --> 00:20:39,473
Here is an example.

244
00:20:39,473 --> 00:20:42,575
In the load information, we can see that the flag

245
00:20:42,575 --> 00:20:44,815
of the UR open is false.

246
00:20:44,815 --> 00:20:48,777
So the click mouse action is not available.

247
00:20:48,777 --> 00:20:53,299
And if there is an item in the bag of tasks,

248
00:20:53,299 --> 00:20:55,620
we should try use item actions.

249
00:20:56,662 --> 00:20:59,003
and the parameter of these actions is the item ID.

250
00:20:59,003 --> 00:20:59,783
Another is problems.

251
00:20:59,783 --> 00:21:05,104
If we found two enemies around the player,

252
00:21:05,104 --> 00:21:07,284
we may try to attack them.

253
00:21:07,284 --> 00:21:09,625
All these rules are not complicated,

254
00:21:09,625 --> 00:21:12,446
but they show great effect in practice.

255
00:21:12,446 --> 00:21:15,906
And please note that these rules give out

256
00:21:15,906 --> 00:21:19,047
all the legal actions or available actions

257
00:21:19,047 --> 00:21:20,567
under current law.

258
00:21:20,567 --> 00:21:25,708
But all the legal actions has equal initial probabilities.

259
00:21:25,980 --> 00:21:35,985
In the next slide, we will use NLP technicals to assign the more potential actions with high probabilities among other legal actions.

260
00:21:40,200 --> 00:21:43,962
Okay, this is the workflow of our searching procedures.

261
00:21:43,962 --> 00:21:46,544
We receive the information from the game

262
00:21:46,544 --> 00:21:50,306
and extract some key information to create state load

263
00:21:50,306 --> 00:21:52,807
and generate action space for each load.

264
00:21:52,807 --> 00:21:56,069
The candidate actions, including action type

265
00:21:56,069 --> 00:21:57,990
and its parameters.

266
00:21:57,990 --> 00:22:00,792
And then we choose the actions to perform in the game

267
00:22:00,792 --> 00:22:03,214
through functions interface.

268
00:22:03,214 --> 00:22:05,815
And then the procedures is repeated again.

269
00:22:10,322 --> 00:22:13,828
Okay, now for the second phrase,

270
00:22:13,828 --> 00:22:17,636
how to use the load graph to perform regression test.

271
00:22:17,636 --> 00:22:18,357
That is simple.

272
00:22:18,357 --> 00:22:22,125
We just need to replay the best path in detail.

273
00:22:23,116 --> 00:22:26,058
When we enter the load A, we choose the action 1.

274
00:22:26,058 --> 00:22:31,562
Then we will enter the load B and C, and finally arrive at D.

275
00:22:31,562 --> 00:22:36,166
If everything goes OK, we will arrive at the terminal node

276
00:22:36,166 --> 00:22:39,929
and prove that the request will not be blocked

277
00:22:39,929 --> 00:22:43,091
and it passed in the progressive testing.

278
00:22:43,091 --> 00:22:47,675
However, in some cases, the situation is not always as expected.

279
00:22:49,711 --> 00:22:56,215
One typical case is that the game environment is non-deterministic.

280
00:22:56,215 --> 00:23:04,260
You may find that after you do action 1 in node A, you will not enter node B, even into

281
00:23:04,260 --> 00:23:05,520
an NC loop.

282
00:23:05,520 --> 00:23:07,962
To solve these problems, we take two measures.

283
00:23:07,962 --> 00:23:09,202
One is to...

284
00:23:10,906 --> 00:23:16,250
is that we will not assign the action in the best path with four probabilities,

285
00:23:16,250 --> 00:23:20,414
and we also give other actions some smaller probabilities.

286
00:23:20,414 --> 00:23:27,219
On the other aspect, in an ANC load, the probability of all the legal actions are averaged,

287
00:23:27,219 --> 00:23:32,584
and this makes testing work more robust.

288
00:23:32,584 --> 00:23:35,066
Meanwhile, we determined

289
00:23:36,142 --> 00:23:41,043
When a quest passed the regression testing, according to the total time,

290
00:23:41,043 --> 00:23:47,084
if a quest is not completed in replay mode in 15 minutes,

291
00:23:47,084 --> 00:23:50,225
it does not mean that there is a bug, but at least

292
00:23:50,225 --> 00:23:54,386
it means that there are some problems, because the quest

293
00:23:54,386 --> 00:24:00,808
may also block human player for 15 minutes, which is not what game designers want.

294
00:24:03,168 --> 00:24:12,035
As previously mentioned, we currently adopt the shortest path in the graph to perform the regression test.

295
00:24:12,035 --> 00:24:15,858
It is reasonable but not always valid.

296
00:24:15,858 --> 00:24:19,181
Here is a sketch map of one quest we encountered.

297
00:24:19,181 --> 00:24:24,125
To complete the quest, the playoffs first.

298
00:24:24,906 --> 00:24:29,550
should go to NPC1 and then up down the cliff

299
00:24:29,550 --> 00:24:31,792
and then arrived at position of NPC2.

300
00:24:31,792 --> 00:24:36,456
And this is also the shortest path to complete this quest.

301
00:24:36,456 --> 00:24:40,199
However, some players tend to first jump down the cliff.

302
00:24:40,199 --> 00:24:42,722
Unfortunately, they found that

303
00:24:42,722 --> 00:24:46,645
they were unable to up the cliff again.

304
00:24:46,645 --> 00:24:50,188
And these situations were not reproduced.

305
00:24:51,168 --> 00:24:52,790
during the regression testing.

306
00:24:52,790 --> 00:24:57,515
So this case shows that the regression test of the shortest path

307
00:24:57,515 --> 00:25:02,400
only proves that there is an exit way to complete the quest,

308
00:25:02,400 --> 00:25:07,045
but can't guarantee the bug outside the shortest path.

309
00:25:07,045 --> 00:25:12,931
Now the third phrase, speeding up the searching for a new quest.

310
00:25:13,679 --> 00:25:17,321
Although the pre-real method can complete the quest,

311
00:25:17,321 --> 00:25:24,184
it was not smart enough because it needs to try every legal actions and waste a lot of time.

312
00:25:24,184 --> 00:25:30,306
But human player will not. Human player will read the tip and the description of the quest first,

313
00:25:30,306 --> 00:25:34,808
and then they try the most potential actions.

314
00:25:34,808 --> 00:25:41,111
So, enlightened by these ideas, Canvas speed up the building of testing

315
00:25:41,111 --> 00:25:43,472
using tip and description on screen.

316
00:25:44,788 --> 00:25:47,810
The answer is yes, NLP technicals can.

317
00:25:47,810 --> 00:25:54,375
Our method is illustrated in the figure.

318
00:25:54,375 --> 00:25:57,778
First, we can extract the text of game description.

319
00:25:57,778 --> 00:25:59,939
Here is an example in Justice Online.

320
00:25:59,939 --> 00:26:03,462
Even from Army Camp with Qi Shaosheng,

321
00:26:04,051 --> 00:26:09,173
The Army Camp is a place and Qi Shao Song is the name of an NPC in the game.

322
00:26:09,173 --> 00:26:15,175
When a human reads this text, they may realize that they should go to the position of Army Camp.

323
00:26:15,175 --> 00:26:19,516
And before this, they may need to find the NPC Qi Shao Song.

324
00:26:19,516 --> 00:26:21,697
We follow the same idea of a human.

325
00:26:21,697 --> 00:26:28,679
First, we need to extract the entities in the text, like the Army Camp.

326
00:26:29,204 --> 00:26:30,304
and Xi Shaoshong.

327
00:26:30,304 --> 00:26:32,605
The two entities are important,

328
00:26:32,605 --> 00:26:36,506
and we can retrieve more related information

329
00:26:36,506 --> 00:26:41,007
such as positions and IDs from the game data.

330
00:26:41,007 --> 00:26:44,548
Then we look for the word in the text.

331
00:26:44,548 --> 00:26:45,548
Liu Fo.

332
00:26:45,548 --> 00:26:51,170
We know that Liu Fo means to go to somewhere.

333
00:26:51,170 --> 00:26:54,671
So the action run to position and run to the object

334
00:26:54,671 --> 00:26:57,051
are the most precious actions.

335
00:26:58,270 --> 00:27:03,139
Although the common knowledge is simple, it is difficult to write rulers.

336
00:27:04,278 --> 00:27:07,459
Here, we need to implement two models.

337
00:27:07,459 --> 00:27:09,839
One is to extract entities.

338
00:27:09,839 --> 00:27:11,100
It is not difficult.

339
00:27:11,100 --> 00:27:14,541
We adopt JBAR, a Charles-Woods segmentation tool

340
00:27:14,541 --> 00:27:18,322
to achieve your purpose with custom dictionaries.

341
00:27:18,322 --> 00:27:21,623
The other model is to map sentences or words

342
00:27:21,623 --> 00:27:23,423
to potential actions labels.

343
00:27:23,423 --> 00:27:25,824
In session, it is a clarification task

344
00:27:25,824 --> 00:27:27,585
in motion learning domain.

345
00:27:27,585 --> 00:27:29,445
It is not a difficult training task,

346
00:27:29,445 --> 00:27:31,386
however, it needs trained data.

347
00:27:32,785 --> 00:27:38,769
So, while we can collect labeled dataset to train a classification neural network,

348
00:27:38,769 --> 00:27:43,532
fortunately, we already get the dataset when we finish the first phase.

349
00:27:43,532 --> 00:27:47,594
The best path includes text and action-enabled pairs.

350
00:27:47,594 --> 00:27:50,536
After collection data and training, we can feed into text

351
00:27:50,536 --> 00:27:54,459
and output the prediction probabilities of all legal actions.

352
00:27:55,652 --> 00:28:01,577
And these NLP models are easy to integrate with the previous algorithms.

353
00:28:01,577 --> 00:28:08,664
The prediction probability is used to initialize the PI of all legal actions, and it means

354
00:28:08,664 --> 00:28:11,406
that the legal actions will not average the change.

355
00:28:11,406 --> 00:28:18,973
And the potential actions will have the large change to be selected, so the searching speed

356
00:28:18,973 --> 00:28:19,534
is elicited.

357
00:28:21,068 --> 00:28:24,891
The result is as we expected, it works.

358
00:28:24,891 --> 00:28:28,733
We trained a neural network with a dataset

359
00:28:28,733 --> 00:28:31,654
including over 2,700 samples

360
00:28:31,654 --> 00:28:34,756
and tested it on a validation set

361
00:28:34,756 --> 00:28:36,837
with about 618 samples.

362
00:28:36,837 --> 00:28:42,861
The accuracy of entirety extraction models is 98%

363
00:28:42,861 --> 00:28:49,284
and the top five recall of classifications models

364
00:28:49,284 --> 00:28:49,785
is nearly 88%.

365
00:28:50,816 --> 00:28:58,360
And in the real case, it speeds up the searching of new requests for three times faster.

366
00:28:58,360 --> 00:29:04,783
Here is a video demo, which shows the processing of one regression test.

367
00:29:05,221 --> 00:29:15,169
The boosters players go to the water port and then they use the items and wait for the box

368
00:29:15,169 --> 00:29:22,554
and then they go back to the NPC and then use the water in the bucket

369
00:29:22,554 --> 00:29:31,922
and the last waiting room is in the box. So at this time the regression task is completed.

370
00:29:32,753 --> 00:29:42,197
Okay, and next, Xiao will report some results in the real application of regression testing in NetEase Game Justice.

371
00:29:42,197 --> 00:29:46,759
Xiao, welcome.

372
00:29:46,759 --> 00:29:53,582
Next, I will talk about our new automated regression testing architecture based on AI.

373
00:29:53,582 --> 00:29:58,084
In the past,

374
00:29:58,727 --> 00:30:06,813
Our automated testing architecture only contained one game server and several game clients.

375
00:30:06,813 --> 00:30:12,978
Because most of our scripts are running on the clients.

376
00:30:12,978 --> 00:30:21,124
Now we use two major parts in our new architecture to do our daily testing work.

377
00:30:21,124 --> 00:30:25,948
One is testing environment and the other one is training environment.

378
00:30:28,823 --> 00:30:34,365
Testing environment is used to do daily regression testing.

379
00:30:34,365 --> 00:30:41,307
There are one game server, several game clients, and one algorithm server.

380
00:30:41,307 --> 00:30:48,170
Game clients, game server sends the states to algorithm server as input,

381
00:30:48,170 --> 00:30:50,450
which for the actions as output,

382
00:30:50,450 --> 00:30:57,113
then send them to the client and the client executed the actions.

383
00:30:59,633 --> 00:31:07,078
This cycle loops until all tested cases are finished.

384
00:31:07,078 --> 00:31:09,179
At last, it will generate a test report.

385
00:31:09,179 --> 00:31:18,145
In this environment, the algorithm server uses the best path for the quest,

386
00:31:18,145 --> 00:31:24,589
which has been trained to finish the quest as stable as possible.

387
00:31:24,589 --> 00:31:27,170
Now, we use three computers for clients.

388
00:31:27,892 --> 00:31:31,612
one computer, one game client.

389
00:31:31,612 --> 00:31:35,253
We rarely use other resources

390
00:31:35,253 --> 00:31:41,674
except the basic environment for game client and game server.

391
00:31:41,674 --> 00:31:46,635
But when we add a new quest to the test cases,

392
00:31:46,635 --> 00:31:50,055
or some quests are modified,

393
00:31:50,055 --> 00:31:53,796
we need a training environment.

394
00:31:53,796 --> 00:31:57,357
For these quests, there is no ready-made information.

395
00:31:58,345 --> 00:32:03,588
and the algorithm server is based on training and searching

396
00:32:03,588 --> 00:32:06,870
to calculate the best path for these quests.

397
00:32:06,870 --> 00:32:09,352
In our world,

398
00:32:09,352 --> 00:32:15,156
training environment is to generate the best path,

399
00:32:15,156 --> 00:32:22,761
which is used in the testing environment for regression testing.

400
00:32:22,761 --> 00:32:26,823
When we want to add a new quest in our regression testing,

401
00:32:27,538 --> 00:32:31,361
We just need to put it in the training environment.

402
00:32:31,361 --> 00:32:37,404
And after training, add it to the testing environment.

403
00:32:37,404 --> 00:32:39,486
When the quests are modified,

404
00:32:39,486 --> 00:32:46,530
the testing environment also has a certain searching function.

405
00:32:46,530 --> 00:32:48,671
When the change is simple,

406
00:32:48,671 --> 00:32:54,195
there is a great possibility to pass the test through its own adaption.

407
00:32:57,312 --> 00:33:03,016
If the change is complex and the task step is blocked,

408
00:33:03,016 --> 00:33:07,139
it will be put in the training environment

409
00:33:07,139 --> 00:33:08,140
to update its best path.

410
00:33:08,140 --> 00:33:19,048
This is an example of our test report.

411
00:33:19,048 --> 00:33:23,991
Report contains test time, version, pass rate,

412
00:33:23,991 --> 00:33:26,073
and other related information.

413
00:33:27,391 --> 00:33:32,752
The red circle shows the main test suite of our task regression testing.

414
00:33:32,752 --> 00:33:40,673
In this report, all cases are passed.

415
00:33:40,673 --> 00:33:43,274
This report contains field cases.

416
00:33:43,274 --> 00:33:50,295
The table shows which task and which task step is blocked.

417
00:33:50,295 --> 00:33:56,396
For example, here, there are two steps blocked.

418
00:33:56,760 --> 00:33:58,581
number 7 and number 701.

419
00:33:58,581 --> 00:34:08,809
We can also click the link to get to the log and the screenshots of them to check the problem.

420
00:34:08,809 --> 00:34:18,837
In this page, I will give the result of our work and show some important data.

421
00:34:18,837 --> 00:34:26,363
Our daily regression testing now covers all the main stories.

422
00:34:26,814 --> 00:34:30,498
totally 290 quests and 4030 steps.

423
00:34:30,498 --> 00:34:32,019
In most of time,

424
00:34:32,019 --> 00:34:38,786
all the cases are passed normally

425
00:34:38,786 --> 00:34:47,254
and accidentally there may be one or two steps blocked.

426
00:34:47,254 --> 00:34:50,837
The step passing rate is over 99.94%.

427
00:34:56,368 --> 00:34:58,470
For each time of regression testing,

428
00:34:58,470 --> 00:35:05,355
this method will save about 10 hours compared with manual testing.

429
00:35:05,355 --> 00:35:09,458
We found five real bugs using this method.

430
00:35:09,458 --> 00:35:16,763
Besides, we also use training environment to test a new quest.

431
00:35:16,763 --> 00:35:25,310
We launched a new series of main story in January called Qingtianzhai.

432
00:35:26,622 --> 00:35:30,903
It contains 15 quests and 348 steps.

433
00:35:30,903 --> 00:35:37,825
For the first time of training,

434
00:35:37,825 --> 00:35:40,005
five steps were blocked

435
00:35:40,005 --> 00:35:42,766
and four of them were caused by bugs.

436
00:35:42,766 --> 00:35:48,887
And during the entire testing process,

437
00:35:48,887 --> 00:35:52,068
we totally found six real bugs.

438
00:35:56,575 --> 00:36:00,637
Compared with the old method of automated regression testing,

439
00:36:00,637 --> 00:36:04,279
the new method has a lot of advantages,

440
00:36:04,279 --> 00:36:12,822
such as saving more time and labor.

441
00:36:12,822 --> 00:36:14,743
As shown in the table,

442
00:36:14,743 --> 00:36:15,903
in the past,

443
00:36:15,903 --> 00:36:20,525
we need one to two weeks to write a new test script

444
00:36:20,525 --> 00:36:22,546
for a new series of quests,

445
00:36:22,546 --> 00:36:26,128
and spend half to two days.

446
00:36:26,441 --> 00:36:30,465
to maintain them.

447
00:36:30,465 --> 00:36:35,849
But now we don't need to write a new test script or maintain them.

448
00:36:35,849 --> 00:36:39,333
The only thing we should do is to put them in the training environment.

449
00:36:39,333 --> 00:36:50,803
Our daily regression testing now covers all my stories.

450
00:36:50,803 --> 00:36:52,344
Besides,

451
00:36:53,129 --> 00:37:00,295
Side stories are trending now, and they will be added into daily testing as soon as possible.

452
00:37:00,295 --> 00:37:06,140
The step passing rate of the side story now are 96.4%.

453
00:37:06,140 --> 00:37:13,647
So in the future, we expected all quests to be covered.

454
00:37:13,647 --> 00:37:19,993
Moreover, the framework is easy to integrate.

455
00:37:22,553 --> 00:37:27,276
MMORPG game always have some common features.

456
00:37:27,276 --> 00:37:33,579
So this method can also be applied in other games.

457
00:37:33,579 --> 00:37:45,305
In the future, we plan to use the method in other MMORPG games to improve testing efficiency.

458
00:37:48,751 --> 00:37:53,034
The above is the work for regression testing of class.

459
00:37:53,034 --> 00:38:01,101
Thanks.

460
00:38:01,101 --> 00:38:03,302
Okay, let's begin the second part,

461
00:38:03,302 --> 00:38:04,523
class balancing testing.

462
00:38:04,523 --> 00:38:08,587
There are six classes in Justice Online

463
00:38:08,587 --> 00:38:09,888
at its first launch,

464
00:38:09,888 --> 00:38:14,091
and one class named Noni was released four months later.

465
00:38:15,440 --> 00:38:19,685
Difference classes in game are disastrous with its own trait and skill system.

466
00:38:19,685 --> 00:38:23,570
Class balance is crucial for MMORPG games.

467
00:38:23,570 --> 00:38:29,597
Once the balance is broken, many players will choose the predominant classes, and the game

468
00:38:29,597 --> 00:38:32,380
will be lack of diversity and interest.

469
00:38:32,380 --> 00:38:35,244
However, to make the class balance is difficult.

470
00:38:36,520 --> 00:38:40,562
Game design mainly relies on human playtesting before lunch

471
00:38:40,562 --> 00:38:44,705
or adjusting according to player feedback after lunch.

472
00:38:44,705 --> 00:38:46,766
It's empirical and heterostatic.

473
00:38:46,766 --> 00:38:51,269
We proposed a class-balanced testing framework

474
00:38:51,269 --> 00:38:57,213
based on self-played technicals in reinforcement learning domains.

475
00:38:57,934 --> 00:39:02,895
As shown in the slide, we create a one-versus-one arena

476
00:39:02,895 --> 00:39:06,536
and set up new memory values for two classes.

477
00:39:06,536 --> 00:39:10,377
And then the two classes are trained with the aim

478
00:39:10,377 --> 00:39:12,497
to win the opposite side.

479
00:39:12,497 --> 00:39:16,378
The training results will give some information

480
00:39:16,378 --> 00:39:21,379
to the game designers of whether the two classes are balanced.

481
00:39:23,437 --> 00:39:30,139
The process of self-play is to freeze one class and train the other class until the

482
00:39:30,139 --> 00:39:35,661
training classes reach a stable win rate of 75%, and then exchange the two classes and

483
00:39:35,661 --> 00:39:36,802
repeat the training.

484
00:39:36,802 --> 00:39:39,603
The training curve is very interesting.

485
00:39:39,603 --> 00:39:47,186
The win rate of Class A first increases since it learns at its turn, and then it decreases

486
00:39:47,186 --> 00:39:48,906
since it was frozen.

487
00:39:50,133 --> 00:39:57,122
The T1 is the time cost the class A reaches the win rate of 75% in each turn.

488
00:39:57,122 --> 00:40:03,930
And the T2 is the time cost the class B reaches the win rate of 75% at each turn.

489
00:40:05,367 --> 00:40:08,568
The t1 is shorter than t2 in this plot,

490
00:40:08,568 --> 00:40:12,490
such that the class A is easy to start for player.

491
00:40:12,490 --> 00:40:17,092
On the other hand, we also get real answers

492
00:40:17,092 --> 00:40:18,633
from the final win rate.

493
00:40:18,633 --> 00:40:21,994
The final win rate of class A is higher than B.

494
00:40:21,994 --> 00:40:26,196
It means the numerical values of the skill system is higher.

495
00:40:27,186 --> 00:40:31,809
At last, we will make a report based on this result for game designers

496
00:40:31,809 --> 00:40:35,831
and they decide whether to modify the numerical value

497
00:40:35,831 --> 00:40:41,814
As we mentioned before, NongYin is a new released class

498
00:40:41,814 --> 00:40:46,677
and so how to assure the balance of NongYin with the existed classes

499
00:40:46,677 --> 00:40:51,320
We choose three classes to test whether the new class is balanced

500
00:40:51,320 --> 00:40:56,643
So we let SuiMeng, ShenXiao and XueHe to compare with NongYin

501
00:40:59,799 --> 00:41:06,781
And the result shows that the Nongin can beat all the three classes with the win rate higher than 90%.

502
00:41:06,781 --> 00:41:16,263
And in most cases, Nongin finishes the battle in 20 seconds and remains nearly half of Blah.

503
00:41:16,263 --> 00:41:22,385
Although the Nongin is a DPS class, it is much stronger than expected.

504
00:41:22,385 --> 00:41:26,426
So the designers weakened these classes before release.

505
00:41:28,169 --> 00:41:33,050
Since last time, we just gave some advice of the new class.

506
00:41:33,050 --> 00:41:40,092
After that, we decided to make a comprehensive evaluation of the balance of all classes.

507
00:41:40,092 --> 00:41:45,114
So we tested all the 49 pair sets of all classes in just this.

508
00:41:45,114 --> 00:41:49,255
We listed all the results in these tables.

509
00:41:49,255 --> 00:41:55,617
The intersections of row and column is the win rate and train time ratio.

510
00:41:55,617 --> 00:41:56,957
Win rate difference

511
00:41:58,274 --> 00:42:01,557
indicates the combat power of two classes in games,

512
00:42:01,557 --> 00:42:07,902
and the train time ratio indicates the degree of easy control for a certain class.

513
00:42:07,902 --> 00:42:13,266
From table, we found that the last column class, Suwen,

514
00:42:13,266 --> 00:42:16,128
is very weak in 1v1 combat,

515
00:42:16,128 --> 00:42:19,491
and it is in accordance with the fact of the game,

516
00:42:19,491 --> 00:42:22,293
because the class is a healer.

517
00:42:23,168 --> 00:42:28,129
It can heal its teammates in team fighting,

518
00:42:28,129 --> 00:42:31,470
but it is fragile in one-on-one battle.

519
00:42:31,470 --> 00:42:36,972
OK, to make a summary, we introduced two lower measures

520
00:42:36,972 --> 00:42:40,233
to perform regression tests and class balancing tests.

521
00:42:40,233 --> 00:42:43,834
We tested them in the Justice game

522
00:42:43,834 --> 00:42:45,535
and got some inspiring results.

523
00:42:45,535 --> 00:42:48,756
And in the future, we will try to improve all these two

524
00:42:48,756 --> 00:42:49,316
measures.

525
00:42:50,438 --> 00:42:56,601
For regression testing, our next plan is to extend these measures to more MMORPG games.

526
00:42:56,601 --> 00:43:03,824
And now, we get the shortest action sequence of the regression testing, but it may not be the best.

527
00:43:03,824 --> 00:43:08,407
Because the shortest path is not always the player's choice.

528
00:43:08,407 --> 00:43:13,229
Some players may complete a quest with their own style.

529
00:43:14,624 --> 00:43:18,306
The shortest path may unable to cover these cases.

530
00:43:18,306 --> 00:43:20,408
Another example, if the game tester

531
00:43:20,408 --> 00:43:22,869
want to make a full coverage of the testing,

532
00:43:22,869 --> 00:43:25,391
the shortest is obviously not the best.

533
00:43:25,391 --> 00:43:28,793
Besides, we still want to improve

534
00:43:28,793 --> 00:43:32,635
the robustness of these measures.

535
00:43:32,635 --> 00:43:33,956
For class-balanced testing,

536
00:43:33,956 --> 00:43:36,818
currently the cost of training is a lot cheap.

537
00:43:36,818 --> 00:43:40,260
It needs a lot of time to train models.

538
00:43:42,005 --> 00:43:47,426
And also it is just suitable for one versus one combat,

539
00:43:47,426 --> 00:43:49,247
and a lot for PVP team balancing.

540
00:43:49,247 --> 00:43:57,129
Lastly, thanks for all the colleagues.

541
00:43:57,129 --> 00:44:00,890
We are from two different departments.

542
00:44:00,890 --> 00:44:03,430
We have different knowledge background.

543
00:44:03,918 --> 00:44:07,307
but we make a happy and fruitful cooperation.

544
00:44:07,307 --> 00:44:09,493
OK, also thanks for your time.

545
00:44:09,493 --> 00:44:12,281
If you have any questions, please email to me.

