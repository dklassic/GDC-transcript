1
00:00:06,228 --> 00:00:06,868
Hello, everyone.

2
00:00:07,369 --> 00:00:09,290
Like Dave said, my name is Eric Martel.

3
00:00:09,710 --> 00:00:11,711
I'm a technical lead AI programmer

4
00:00:11,771 --> 00:00:13,913
at the Ubisoft Quebec City Studio.

5
00:00:14,393 --> 00:00:16,574
So we're slightly different than Montreal,

6
00:00:16,634 --> 00:00:18,255
but it's a quite nice studio.

7
00:00:18,275 --> 00:00:22,258
So come see me if you want to learn more about it.

8
00:00:22,698 --> 00:00:24,619
So I programmed a little something.

9
00:00:24,799 --> 00:00:26,560
As soon as the slides are done updating,

10
00:00:26,600 --> 00:00:29,002
there should be a little camera in the right side corner

11
00:00:29,462 --> 00:00:30,963
so that you guys don't take a picture

12
00:00:31,003 --> 00:00:33,044
of a half animated slide.

13
00:00:33,905 --> 00:00:34,725
It's a gimmick, but.

14
00:00:35,854 --> 00:00:41,816
I've seen so many people take pictures of slides that only have the content that maybe

15
00:00:41,856 --> 00:00:42,636
it'll help you guys.

16
00:00:44,157 --> 00:00:47,578
So first, thank you to being here.

17
00:00:47,998 --> 00:00:53,301
It's really appreciated to have people coming and seeing the kind of work we do.

18
00:00:54,101 --> 00:00:59,603
And also huge thanks to Ubisoft Quebec, because they're really supportive, and I wouldn't

19
00:00:59,623 --> 00:01:01,844
be here if it wasn't for them.

20
00:01:03,778 --> 00:01:08,399
So senses, most of you know that most human beings

21
00:01:08,459 --> 00:01:14,361
have five senses, vision, hearing, smell, touch, and taste.

22
00:01:15,641 --> 00:01:18,402
In video games, sometimes we have what we call a sixth sense

23
00:01:19,702 --> 00:01:21,583
and that's not about seeing dead people.

24
00:01:22,143 --> 00:01:24,643
It's usually feeling stuff that...

25
00:01:25,867 --> 00:01:29,249
that is not in direct perception of the NPC.

26
00:01:29,269 --> 00:01:32,631
So for example, standing next to an NPC in this little bubble

27
00:01:33,231 --> 00:01:35,052
could trigger the sixth sense for the NPC

28
00:01:35,092 --> 00:01:37,674
to maybe do a little look out over the shoulder

29
00:01:37,794 --> 00:01:40,035
and see if the player is hiding there.

30
00:01:41,842 --> 00:01:46,148
I'll be making the differentiation between perception and detection.

31
00:01:47,149 --> 00:01:49,513
To me, perception is really mechanical.

32
00:01:49,773 --> 00:01:52,537
It's on or off, you're either perceiving or not.

33
00:01:53,258 --> 00:01:57,103
It's the ability to see, hear, or become aware of something through the senses.

34
00:01:57,724 --> 00:02:01,588
whereas detection is more about identifying

35
00:02:01,768 --> 00:02:02,729
what I'm perceiving.

36
00:02:03,770 --> 00:02:08,634
A lot of gameplay code works in the detection space,

37
00:02:09,135 --> 00:02:12,098
but in this talk, we'll mostly talk about perception.

38
00:02:14,721 --> 00:02:18,445
Since it's a quite short talk, I'll be mostly talking about vision.

39
00:02:19,606 --> 00:02:24,131
I'll be explaining how to build geometric sensors, how to do point-to-point perception,

40
00:02:24,812 --> 00:02:27,435
and how to provide those sensors behavior.

41
00:02:28,836 --> 00:02:34,482
Basically, those are the building blocks to create a simple to somewhat complex sensory

42
00:02:34,522 --> 00:02:35,824
system for DNPCs.

43
00:02:37,905 --> 00:02:40,626
For the people who are interested in seeing other senses,

44
00:02:41,746 --> 00:02:45,287
in case of hearing, most systems will simply use

45
00:02:45,307 --> 00:02:48,448
a spherical perception, so just a radius check.

46
00:02:48,948 --> 00:02:51,969
If the sound is emitted within a certain radius, I hear it.

47
00:02:52,709 --> 00:02:54,850
If you guys are dealing with interiors,

48
00:02:54,990 --> 00:02:56,670
so basically complex buildings,

49
00:02:57,150 --> 00:02:59,231
you might need to implement sound propagation.

50
00:03:00,231 --> 00:03:02,333
That's something we did on Assassin's Creed Syndicate

51
00:03:02,413 --> 00:03:05,895
by doing 3D pathfinding using volumes and portals,

52
00:03:06,136 --> 00:03:08,918
which were already used by the audio designers

53
00:03:09,378 --> 00:03:13,541
to manage the sound that was being heard by the player.

54
00:03:14,121 --> 00:03:16,003
So reuse assets if you can,

55
00:03:17,204 --> 00:03:19,565
but 3D pathfinding is the way to go for that.

56
00:03:21,467 --> 00:03:22,367
For a sense of touch,

57
00:03:23,188 --> 00:03:25,529
it's really rare that the NPCs will need to

58
00:03:25,630 --> 00:03:27,411
receive feedback on what they're touching.

59
00:03:29,105 --> 00:03:29,706
on their own.

60
00:03:30,026 --> 00:03:33,649
Like the decision they made to go interact with something,

61
00:03:33,689 --> 00:03:35,110
they don't really need feedback to it.

62
00:03:36,891 --> 00:03:38,993
And whenever something is touching them,

63
00:03:39,473 --> 00:03:41,055
in most of the cases, you can simply

64
00:03:41,155 --> 00:03:43,597
forward the event that you received directly

65
00:03:43,617 --> 00:03:44,737
from the physics engine.

66
00:03:45,298 --> 00:03:48,480
It can be quite simple, just a bump event or a hit.

67
00:03:49,621 --> 00:03:54,525
And from that, the NPC can do some deliberative decision

68
00:03:54,545 --> 00:03:54,785
making.

69
00:03:56,980 --> 00:04:00,463
For smell, very little games use the sense of smell.

70
00:04:01,003 --> 00:04:06,127
But we played a bit with it in a very old Far Cry title,

71
00:04:06,868 --> 00:04:10,131
where the player was emitting some sort of breadcrumbs

72
00:04:10,311 --> 00:04:11,312
representing his smell.

73
00:04:11,852 --> 00:04:15,775
So it started with a really intense little breadcrumb.

74
00:04:16,176 --> 00:04:19,178
And over time, it would expand and lose intensity.

75
00:04:19,619 --> 00:04:21,600
So from there, you could follow the breadcrumbs

76
00:04:21,660 --> 00:04:22,321
and find the player.

77
00:04:24,021 --> 00:04:30,806
For the sense of taste, unless Cooking Mama requires an AI

78
00:04:30,846 --> 00:04:34,909
to test your recipe, I don't see a real use for the taste.

79
00:04:34,989 --> 00:04:37,631
But if you guys have any ideas, just go for it.

80
00:04:39,508 --> 00:04:41,549
I will also not be talking about serious stuff.

81
00:04:42,110 --> 00:04:46,713
Right now, the sensors are quite trendy.

82
00:04:47,173 --> 00:04:49,355
If you're talking about real world sensors,

83
00:04:49,455 --> 00:04:53,678
like smart homes or autonomous vehicles,

84
00:04:55,159 --> 00:04:57,381
they tend to use computer vision, deep learning,

85
00:04:57,561 --> 00:04:58,441
all that kind of stuff.

86
00:04:59,002 --> 00:05:01,123
I wish we could use that in video games,

87
00:05:01,183 --> 00:05:03,365
but in most of the cases,

88
00:05:03,445 --> 00:05:05,206
we just don't have the CPU to do it.

89
00:05:05,997 --> 00:05:07,699
And the computer vision would actually

90
00:05:07,779 --> 00:05:10,402
solve quite a few issues that we'll be discussing later

91
00:05:10,482 --> 00:05:11,643
on in the talk.

92
00:05:13,665 --> 00:05:15,607
So hopefully by the end of the talk,

93
00:05:16,227 --> 00:05:17,468
you'll have a better understanding

94
00:05:17,549 --> 00:05:21,232
on how to create sensors, how to give them proper behavior,

95
00:05:21,252 --> 00:05:25,076
how to be designer-friendly, how to be animator-friendly,

96
00:05:25,957 --> 00:05:28,119
tips to make it faster and more flexible.

97
00:05:30,923 --> 00:05:34,246
In my experience, sensor systems is really a team effort.

98
00:05:35,147 --> 00:05:37,249
It's not just the programmers working on their own.

99
00:05:37,830 --> 00:05:41,533
You need to have good communication with the game

100
00:05:41,573 --> 00:05:42,874
designers and with the animators.

101
00:05:43,415 --> 00:05:45,637
And this way, you can achieve a better game.

102
00:05:47,356 --> 00:05:49,758
Before we dive in, everything that I'll be showing you

103
00:05:50,198 --> 00:05:54,401
has been tried, tested, and shipped in some game.

104
00:05:54,901 --> 00:05:57,002
So it's stuff that works.

105
00:05:57,283 --> 00:06:01,185
And hopefully, you can base your own implementations off of this.

106
00:06:02,806 --> 00:06:04,187
I'll be showing you a quick demo.

107
00:06:04,708 --> 00:06:06,129
It's built with Play Canvas.

108
00:06:06,149 --> 00:06:11,532
So it's an HTML5 WebGL rendering framework with assets

109
00:06:11,552 --> 00:06:13,093
from Mixamo and CGTrader.

110
00:06:13,594 --> 00:06:15,355
So you'll see it's quite simple.

111
00:06:15,435 --> 00:06:16,816
My goal was to show that.

112
00:06:18,041 --> 00:06:20,703
Within a few hours, you can build something that's simple,

113
00:06:20,743 --> 00:06:22,544
that's easy to understand, that shows off

114
00:06:23,464 --> 00:06:24,965
what the sensor system can be.

115
00:06:26,306 --> 00:06:29,688
So that's basically the target we're going for.

116
00:06:31,269 --> 00:06:32,390
We'll be using agents.

117
00:06:32,790 --> 00:06:34,331
They could be simple or animated.

118
00:06:34,891 --> 00:06:36,272
In our case, they'll be animated

119
00:06:36,312 --> 00:06:39,454
because most games use humanoids characters.

120
00:06:41,135 --> 00:06:43,076
We'll be using point of interest,

121
00:06:43,096 --> 00:06:45,678
so it's basically what we're trying to see in the world.

122
00:06:47,039 --> 00:06:48,701
In this case, I'm not really original.

123
00:06:48,761 --> 00:06:49,501
I use the target.

124
00:06:50,762 --> 00:06:52,764
And finally, for the environment,

125
00:06:52,844 --> 00:06:55,766
it's whatever's blocking the vision of the NPCs.

126
00:06:55,826 --> 00:06:58,729
So in this case, I used a crate, because most games have crates.

127
00:07:01,511 --> 00:07:07,516
As Xavier was saying yesterday, vision is quite simple.

128
00:07:07,556 --> 00:07:10,378
There's a few steps to follow, and most of the times,

129
00:07:10,398 --> 00:07:11,579
it'll be good enough for your game.

130
00:07:12,080 --> 00:07:15,102
So basically, filter which entities you want to try to see.

131
00:07:16,388 --> 00:07:21,152
test to see if they're within the sensor range and or shape.

132
00:07:22,613 --> 00:07:23,674
And then use a ray cast.

133
00:07:23,774 --> 00:07:24,815
That's the expensive part.

134
00:07:25,015 --> 00:07:26,636
That's the part you want to do the least.

135
00:07:28,418 --> 00:07:30,119
You will have multiple target types.

136
00:07:30,799 --> 00:07:32,401
Depending on the complexity of the game,

137
00:07:33,301 --> 00:07:37,224
your NPCs might be trying to see other characters or only

138
00:07:37,284 --> 00:07:37,725
the player.

139
00:07:37,745 --> 00:07:39,306
It really depends on your game play.

140
00:07:40,449 --> 00:07:45,572
Particular events, so as was described earlier,

141
00:07:45,732 --> 00:07:48,774
I think yesterday, sometimes you want to try

142
00:07:48,814 --> 00:07:52,257
to see something that happens within one frame,

143
00:07:53,197 --> 00:07:55,779
and sometimes it's something that's not even there,

144
00:07:55,839 --> 00:07:59,101
so you just leave some piece of information in the level,

145
00:07:59,221 --> 00:08:01,542
and if the NPC sees it, he can understand

146
00:08:01,562 --> 00:08:05,005
that something happened and react on it.

147
00:08:06,868 --> 00:08:09,210
Some useful data whenever you're dealing with sensors

148
00:08:09,930 --> 00:08:11,992
is to convert everything in local space.

149
00:08:12,352 --> 00:08:14,253
It makes the computation really simple

150
00:08:14,894 --> 00:08:16,435
and compute the relative angles.

151
00:08:16,695 --> 00:08:19,878
Sometimes you'll want to do it on a top view

152
00:08:20,118 --> 00:08:21,479
and sometimes a 3D angle.

153
00:08:23,921 --> 00:08:26,503
So we'll dive in the anatomy of a vision cone,

154
00:08:27,063 --> 00:08:29,945
but to me in most games I worked on, it's more like a pie.

155
00:08:30,786 --> 00:08:34,769
So it's a triangular shape with some sort of height.

156
00:08:37,040 --> 00:08:38,001
It can be quite simple.

157
00:08:38,181 --> 00:08:40,803
If you're working on a top view game,

158
00:08:41,384 --> 00:08:45,927
maybe you can stick to simply have an angle opening

159
00:08:46,207 --> 00:08:47,928
of how wide your sensor is seeing,

160
00:08:48,329 --> 00:08:52,432
and then far distance for your sensor describing

161
00:08:52,772 --> 00:08:54,013
how far the NPC can see.

162
00:08:56,114 --> 00:08:57,496
Then if you want something more complex,

163
00:08:57,516 --> 00:08:59,697
you could add a near distance to control

164
00:09:01,038 --> 00:09:05,221
which region of the environment in front of the NPC

165
00:09:05,241 --> 00:09:06,422
is being seen by the sensor.

166
00:09:07,294 --> 00:09:09,895
If you're going 3D, you will obviously

167
00:09:09,955 --> 00:09:13,395
need to control the height by describing

168
00:09:13,415 --> 00:09:15,956
a top and a bottom cutoff for the sensor.

169
00:09:16,456 --> 00:09:18,417
So again, it's something quite simple.

170
00:09:20,117 --> 00:09:22,657
And if you can make it dynamic for your designers

171
00:09:22,697 --> 00:09:24,238
to play with and see in real time

172
00:09:24,618 --> 00:09:27,919
how the sensor's being affected, I think everybody wins.

173
00:09:29,239 --> 00:09:32,860
Obviously, something simple as putting an offset

174
00:09:32,920 --> 00:09:35,660
on the referential for the sensor.

175
00:09:36,910 --> 00:09:40,751
and then attaching the sensor to a specific bone.

176
00:09:41,392 --> 00:09:43,973
You can either attach it by position

177
00:09:44,153 --> 00:09:45,753
or position and orientation.

178
00:09:46,154 --> 00:09:48,294
In this case, I'm showing off the same sensor

179
00:09:48,334 --> 00:09:50,575
being attached to the root of the NPC,

180
00:09:51,116 --> 00:09:53,096
then to its hips, and then to its head.

181
00:09:55,818 --> 00:09:59,761
You can also control the shape in more complex ways by,

182
00:10:00,282 --> 00:10:01,963
for example, pitching the near end,

183
00:10:02,524 --> 00:10:04,485
pinching the near end of the sensor

184
00:10:04,845 --> 00:10:06,207
to be able to drag it up or down

185
00:10:06,287 --> 00:10:10,070
so that you can have sensors that go upwards or downwards.

186
00:10:11,291 --> 00:10:14,133
You can also smooth the edges of the sensors using splines.

187
00:10:14,734 --> 00:10:17,416
So either to smooth out the sides of the sensor

188
00:10:17,956 --> 00:10:21,899
or to have the close part of the sensor

189
00:10:22,280 --> 00:10:24,221
detect less side than the far end.

190
00:10:25,361 --> 00:10:26,843
And if you want to be really fancy,

191
00:10:26,863 --> 00:10:31,070
you could use some height maps to draw bitmaps describing

192
00:10:31,270 --> 00:10:34,014
what's the height of the sensor at a given x and y

193
00:10:34,054 --> 00:10:36,438
coordinate relative to the NPC.

194
00:10:39,271 --> 00:10:42,453
You should try to build like a big library of shapes

195
00:10:42,513 --> 00:10:43,854
that your designers can play with.

196
00:10:44,314 --> 00:10:47,235
So a sphere is quite simple and you might need one

197
00:10:47,296 --> 00:10:49,237
for your auditory system anyway.

198
00:10:49,757 --> 00:10:51,418
So it's a perception in all directions.

199
00:10:52,238 --> 00:10:55,040
Cylinders, that's quite useful for six senses.

200
00:10:55,840 --> 00:10:59,142
You can have just a small cylinder around the NPC

201
00:10:59,222 --> 00:11:01,143
and whenever something's entering that bubble,

202
00:11:01,643 --> 00:11:02,724
the NPC gets notified.

203
00:11:04,064 --> 00:11:07,066
And if perception is not.

204
00:11:08,200 --> 00:11:10,582
If you're not building a stealth game or a game where

205
00:11:11,403 --> 00:11:15,987
the complexity of the sensors have almost no impact,

206
00:11:16,027 --> 00:11:18,049
you can simply use bounding boxes.

207
00:11:18,469 --> 00:11:21,712
So whenever something is within a box, either object-aligned

208
00:11:21,792 --> 00:11:24,454
or access-aligned, you perceive it.

209
00:11:26,076 --> 00:11:27,477
Build anything you can think of.

210
00:11:27,964 --> 00:11:30,645
The more tools you're providing your game designers,

211
00:11:31,025 --> 00:11:32,605
the better they can build an experience.

212
00:11:33,446 --> 00:11:35,546
For example, a few years ago, Martin Walsh

213
00:11:36,187 --> 00:11:37,887
presented the splinter cell sensors.

214
00:11:38,547 --> 00:11:41,068
They had success using coffin-shaped sensors.

215
00:11:41,808 --> 00:11:42,588
Just do it.

216
00:11:43,309 --> 00:11:45,329
As long as you can build a primitive that's

217
00:11:45,529 --> 00:11:49,170
easy for you to test whether a position is inside or outside,

218
00:11:49,690 --> 00:11:50,271
just go for it.

219
00:11:51,851 --> 00:11:52,431
And experiment.

220
00:11:54,414 --> 00:11:58,877
Spend some time with your game designers and with your animators and try to think of new

221
00:11:58,917 --> 00:12:02,500
ways you could provide them with tools and simply do it.

222
00:12:05,235 --> 00:12:07,877
More advanced systems will be using multiple shapes.

223
00:12:08,417 --> 00:12:10,018
So, for example, in this case,

224
00:12:10,038 --> 00:12:13,339
you could have some metadata on the closer sensors saying,

225
00:12:14,160 --> 00:12:17,742
whenever something enters this sensor, it's highly dangerous.

226
00:12:17,942 --> 00:12:20,363
Whenever something is perceived in the yellow sensor,

227
00:12:20,743 --> 00:12:21,764
it's not as dangerous.

228
00:12:21,824 --> 00:12:24,565
So maybe you can change your behavior accordingly.

229
00:12:27,145 --> 00:12:29,228
The attachment of the sensor on an agent,

230
00:12:30,010 --> 00:12:33,075
well usually your agent will use a skeletal component.

231
00:12:33,916 --> 00:12:35,819
You can either attach it on the entity root,

232
00:12:36,140 --> 00:12:38,724
the hips, or the head like I was discussing before.

233
00:12:40,314 --> 00:12:42,255
But you can have some weird results

234
00:12:42,475 --> 00:12:45,016
whenever you're starting to apply animation of the NPCs

235
00:12:45,236 --> 00:12:49,499
if you're adjusting the rotation of the sensors based off of it.

236
00:12:49,839 --> 00:12:51,460
So right now, I'm using assets that

237
00:12:51,520 --> 00:12:56,063
were not meant to be used as sensor providers.

238
00:12:56,703 --> 00:12:58,404
So in this case, you see as soon as I'm

239
00:12:58,484 --> 00:13:00,445
putting a more dynamic animation,

240
00:13:00,925 --> 00:13:02,926
the sensor will be going all over the place.

241
00:13:04,654 --> 00:13:08,115
This could be the desired behavior, but in most cases,

242
00:13:08,335 --> 00:13:10,016
it just makes it harder for a player

243
00:13:10,056 --> 00:13:12,238
to understand when he's getting detected

244
00:13:12,258 --> 00:13:13,658
because the sensor keeps moving.

245
00:13:16,060 --> 00:13:18,361
What I prefer is to use some sort of hybrid bone.

246
00:13:20,560 --> 00:13:23,963
In your MaxScene, you can simply parent the hybrid bone

247
00:13:24,003 --> 00:13:26,666
to the root so that whenever the root is turning,

248
00:13:27,026 --> 00:13:28,147
the bone will be following.

249
00:13:28,788 --> 00:13:32,411
But then to have some MaxScript, for example,

250
00:13:32,771 --> 00:13:35,754
allowing the animator to say, for particle or scene,

251
00:13:36,014 --> 00:13:39,457
I want the bone to be following the orientation of the head.

252
00:13:39,957 --> 00:13:40,117
So.

253
00:13:41,105 --> 00:13:44,346
The animator is in full control of where the sensor is looking

254
00:13:44,927 --> 00:13:48,229
at any time and can allow you to create some handcrafted

255
00:13:48,269 --> 00:13:48,709
behavior.

256
00:13:48,749 --> 00:13:52,111
So you're not relying on the visual asset.

257
00:13:52,351 --> 00:13:55,072
You can create gameplay just through your animation.

258
00:13:56,798 --> 00:13:59,201
And it's also really good to delay some abrupt changes.

259
00:14:00,081 --> 00:14:04,505
Sometimes players feel cheated when an NPC does a 180 turn

260
00:14:05,146 --> 00:14:08,249
because the detection cone can turn really swiftly.

261
00:14:08,889 --> 00:14:10,731
In this case, the animator could simply

262
00:14:10,951 --> 00:14:14,554
put a slight delay in the rotation of the detection bone,

263
00:14:15,095 --> 00:14:18,438
making it so that the player gets the impression

264
00:14:18,478 --> 00:14:20,800
that he's about to be seen, goes into cover,

265
00:14:21,080 --> 00:14:23,242
and then the sensor turns, making it.

266
00:14:24,649 --> 00:14:26,990
giving him the impression that he's better than he actually is.

267
00:14:29,192 --> 00:14:29,993
Adaptable setup.

268
00:14:31,334 --> 00:14:36,618
What I like in some system is to provide my animators

269
00:14:36,698 --> 00:14:37,298
with markups.

270
00:14:37,838 --> 00:14:40,621
So the animator themselves can control

271
00:14:41,021 --> 00:14:43,883
whenever the sensor should be attached to the head,

272
00:14:43,983 --> 00:14:46,645
to the hybrid bone.

273
00:14:47,446 --> 00:14:51,729
Just let it so that data can control your sensors.

274
00:14:53,333 --> 00:14:56,475
Also, in some cases, the sensors won't be able to,

275
00:14:57,196 --> 00:15:00,578
well, the animation selection won't allow the NPC

276
00:15:00,618 --> 00:15:02,479
to properly track a target.

277
00:15:03,520 --> 00:15:05,742
In some cases, it can lead to behaviors

278
00:15:05,842 --> 00:15:08,143
where you have your sensor toggling between,

279
00:15:08,264 --> 00:15:10,085
I'm seeing the target, I'm not seeing the target,

280
00:15:10,525 --> 00:15:12,747
because the target is moving next to the NPC

281
00:15:12,767 --> 00:15:14,028
and he's trying to track it.

282
00:15:14,948 --> 00:15:16,910
In that case, what I prefer is simply

283
00:15:17,510 --> 00:15:19,391
putting a small state machine on the sensor

284
00:15:19,772 --> 00:15:21,873
and detaching it from its referential.

285
00:15:22,952 --> 00:15:25,714
From that point, the sensor is simply following the target

286
00:15:26,054 --> 00:15:27,375
and keeping a line of sight to it.

287
00:15:28,056 --> 00:15:31,578
As soon as there's occlusion, the state machine

288
00:15:31,618 --> 00:15:33,920
goes back to following the referential,

289
00:15:34,781 --> 00:15:37,363
making it that the NPC is simply following its target

290
00:15:37,403 --> 00:15:38,724
and never losing track of it.

291
00:15:40,825 --> 00:15:42,347
Whenever you're targeting something.

292
00:15:43,406 --> 00:15:48,070
Depending on the type of entity, sometimes you can simply use the entity position.

293
00:15:48,810 --> 00:15:52,373
It's as simple as it gets, but unfortunately, it's usually on the floor,

294
00:15:52,833 --> 00:15:58,838
making it so that any rock, any crate, anything on the floor can occlude the target,

295
00:15:59,098 --> 00:16:01,780
making it less interesting for NPCs.

296
00:16:02,480 --> 00:16:06,543
If you're trying to see some, I don't know, some loot on the floor,

297
00:16:06,763 --> 00:16:10,906
maybe the entity position is good enough, but for most characters, it's not.

298
00:16:12,595 --> 00:16:13,695
Then you could use an offset.

299
00:16:14,295 --> 00:16:17,597
I've seen many games using like a meter 60 offset

300
00:16:17,637 --> 00:16:19,498
from the root and looking roughly

301
00:16:19,538 --> 00:16:20,958
around the neck or head area.

302
00:16:22,059 --> 00:16:24,940
And that's what most games use, and it works.

303
00:16:25,921 --> 00:16:27,761
Unfortunately, it requires that you

304
00:16:27,782 --> 00:16:32,984
need to provide with a static offset for every single stance

305
00:16:33,004 --> 00:16:33,984
your NPCs might have.

306
00:16:34,484 --> 00:16:37,366
So if they crouch, you need to adjust the offset.

307
00:16:38,504 --> 00:16:40,965
But you also need not to forget ragdolls.

308
00:16:41,626 --> 00:16:45,087
In many games, there's some stealth aspect to it

309
00:16:45,147 --> 00:16:48,329
to hide dead bodies so that NPCs don't see them.

310
00:16:48,929 --> 00:16:51,271
If you have an offset sticking up a meter 60,

311
00:16:52,171 --> 00:16:55,753
well, it's really hard to conceal the ragdoll.

312
00:16:58,211 --> 00:17:00,993
By using a bone from the biped, again, we're

313
00:17:01,093 --> 00:17:03,915
tying our logic to art style.

314
00:17:04,495 --> 00:17:07,317
And I don't like making it so that the animator needs

315
00:17:07,377 --> 00:17:10,279
to think of how the animation will look just so

316
00:17:10,299 --> 00:17:11,500
that the gameplay works right.

317
00:17:13,581 --> 00:17:15,662
Fortunately, if you're going to do this,

318
00:17:16,383 --> 00:17:18,885
at least the changes in stance will work right away.

319
00:17:19,725 --> 00:17:21,766
But I still prefer a dedicated bone, a bit

320
00:17:21,826 --> 00:17:25,589
like the sensor attachment on an NPC.

321
00:17:27,297 --> 00:17:29,718
With the dedicated bone, you can easily tweak

322
00:17:29,798 --> 00:17:31,538
for any gameplay context.

323
00:17:31,958 --> 00:17:33,859
So for example, if the player goes into cover,

324
00:17:34,319 --> 00:17:36,539
maybe you want to move the bone towards the wall,

325
00:17:36,999 --> 00:17:40,040
make it so that he's still detectable from behind,

326
00:17:40,180 --> 00:17:42,780
but NPCs that are in front will have a harder time

327
00:17:42,800 --> 00:17:44,521
because the bone is closer to the wall.

328
00:17:45,941 --> 00:17:47,901
Unfortunately, it makes it harder for QA.

329
00:17:48,521 --> 00:17:50,042
So work on your debug tools.

330
00:17:50,162 --> 00:17:52,062
Make sure that it's easy for them

331
00:17:52,122 --> 00:17:53,662
to see where the bone is located.

332
00:17:53,682 --> 00:17:54,803
The more...

333
00:17:55,745 --> 00:18:00,968
The more data you have, the more chances you have that an employee will create a bug.

334
00:18:02,049 --> 00:18:07,932
It's unfortunate, but with that kind of flexibility, sometimes you have to take more precautions.

335
00:18:09,913 --> 00:18:15,537
If your target is the player, oftentimes it's better to use multiple bones.

336
00:18:15,597 --> 00:18:17,177
Multi-sampling kind of works right.

337
00:18:17,913 --> 00:18:19,653
Because the point-to-point perception

338
00:18:19,733 --> 00:18:21,494
is really easy to disrupt.

339
00:18:21,974 --> 00:18:27,255
Whenever you have even a twig in between the NPC's sensor

340
00:18:27,295 --> 00:18:28,975
position and the target position,

341
00:18:29,515 --> 00:18:31,156
the twig could be occluding that position.

342
00:18:31,196 --> 00:18:33,676
And the NPC thinks, well, I don't see my target.

343
00:18:34,456 --> 00:18:37,897
When actually, he sees like 99% of the target,

344
00:18:37,997 --> 00:18:39,918
just not that little point he was looking at.

345
00:18:40,798 --> 00:18:43,618
By using multiple bones, it's quite easy

346
00:18:43,658 --> 00:18:46,379
to just go to another one if the one you're looking at

347
00:18:46,459 --> 00:18:46,919
is occluded.

348
00:18:48,752 --> 00:18:50,553
As an example, I split it up a bit,

349
00:18:51,014 --> 00:18:53,976
but you can see an NPC looking at another one,

350
00:18:54,436 --> 00:18:56,198
and just the fact that the animation

351
00:18:56,218 --> 00:18:57,699
is slightly moving on the NPC

352
00:18:58,079 --> 00:19:00,661
makes it so that the head bone and the hips bone

353
00:19:00,801 --> 00:19:03,203
sometimes get occluded, sometimes they don't.

354
00:19:03,663 --> 00:19:05,084
So by having multiple bones,

355
00:19:05,845 --> 00:19:09,868
the NPC walking can always see the left hand of the NPC

356
00:19:10,228 --> 00:19:11,850
and know that he's seeing the target.

357
00:19:13,851 --> 00:19:14,151
Warning.

358
00:19:14,807 --> 00:19:16,907
Whenever you're using bones,

359
00:19:17,007 --> 00:19:19,108
you can run into level of detail issues.

360
00:19:19,688 --> 00:19:21,469
If your skeleton stop being updated,

361
00:19:22,009 --> 00:19:24,990
you need to be careful not to be using its data anymore.

362
00:19:25,530 --> 00:19:29,052
So in a lot of engines, whenever the NPCs get far away,

363
00:19:30,452 --> 00:19:32,573
only the root and maybe the hips get updated.

364
00:19:32,753 --> 00:19:36,554
So if you were trying to get the head position,

365
00:19:36,614 --> 00:19:38,135
it's possible that it's not there anymore.

366
00:19:38,215 --> 00:19:40,576
So you need the fallback system to potentially

367
00:19:41,036 --> 00:19:43,357
go back to a fixed offset on the root.

368
00:19:45,735 --> 00:19:49,540
Using ranged weapons can also lead to some issues.

369
00:19:49,820 --> 00:19:52,083
There's quite a difference between a line of sight

370
00:19:52,123 --> 00:19:55,827
and a line of fire because most NPCs will have their gun

371
00:19:56,007 --> 00:19:58,129
at a lower level than their eyes.

372
00:19:59,982 --> 00:20:04,707
Having two different referentials can give different results.

373
00:20:04,747 --> 00:20:07,550
So the NPC is seeing its target, he wants to shoot at it,

374
00:20:08,031 --> 00:20:09,212
but there's no line of fire.

375
00:20:09,332 --> 00:20:12,515
Therefore, he's going back to his decision making

376
00:20:12,555 --> 00:20:14,678
and be like, well, I would like to shoot at it,

377
00:20:14,838 --> 00:20:15,578
but I don't see it.

378
00:20:16,439 --> 00:20:16,560
So.

379
00:20:17,494 --> 00:20:20,617
One of the solutions that I like that I used in the past

380
00:20:20,897 --> 00:20:24,260
is to unify the referentials as soon as the weapon comes out.

381
00:20:24,841 --> 00:20:27,363
So basically, the NPC starts seeing from its gun

382
00:20:27,824 --> 00:20:28,905
or shooting from its eyes.

383
00:20:29,445 --> 00:20:31,527
Most of the times it's better to just see from the gun.

384
00:20:33,909 --> 00:20:34,330
Occlusion.

385
00:20:34,650 --> 00:20:35,731
What's causing the occlusion?

386
00:20:36,011 --> 00:20:36,151
Well.

387
00:20:37,106 --> 00:20:41,470
In most games, it's static geometry, dynamic geometry,

388
00:20:42,110 --> 00:20:43,291
and see-through geometry.

389
00:20:44,172 --> 00:20:45,974
I'll explain in detail what's the difference

390
00:20:46,034 --> 00:20:47,075
between all of those.

391
00:20:47,975 --> 00:20:50,977
For static geometry, it's basically anything

392
00:20:51,037 --> 00:20:53,500
that's building the static part of your level.

393
00:20:53,860 --> 00:20:59,565
So walls, roofs, ground, anything from rocks to trees,

394
00:20:59,965 --> 00:21:01,006
it's all static geometry.

395
00:21:01,727 --> 00:21:03,809
It's detected using a raycast,

396
00:21:03,949 --> 00:21:05,591
but the good thing about it is that

397
00:21:05,731 --> 00:21:07,692
as soon as the raycast hits one of them,

398
00:21:08,233 --> 00:21:09,294
you can stop the raycast.

399
00:21:09,354 --> 00:21:10,775
You know you won't see through it.

400
00:21:12,467 --> 00:21:16,490
So as an example, investing in some debug display,

401
00:21:16,510 --> 00:21:18,431
that's some quite simple debug display.

402
00:21:18,972 --> 00:21:21,834
But it's really useful for your QA

403
00:21:21,854 --> 00:21:25,397
to be able to identify why the behavior of an NPC

404
00:21:25,437 --> 00:21:28,339
is changing based on the occlusion.

405
00:21:29,660 --> 00:21:32,342
So if you can do something real quick,

406
00:21:32,423 --> 00:21:35,785
even just lines is good enough, especially

407
00:21:35,805 --> 00:21:37,046
when you have multiple NPCs.

408
00:21:38,267 --> 00:21:40,269
Dynamic geometry, kind of.

409
00:21:41,489 --> 00:21:43,130
depend on the context.

410
00:21:43,691 --> 00:21:47,595
You'll be trying to occlude the vision of the NPCs

411
00:21:48,095 --> 00:21:50,418
using the characters in the environment, the animals,

412
00:21:50,818 --> 00:21:51,639
the moving objects.

413
00:21:52,240 --> 00:21:54,382
For example, in Assassin's Creed Syndicate,

414
00:21:54,462 --> 00:21:57,445
we had the carriages block the line of sight.

415
00:21:59,062 --> 00:22:02,925
But the thing is, sometimes the rigid body

416
00:22:02,965 --> 00:22:06,128
of the dynamic object is a bit too crude

417
00:22:06,488 --> 00:22:07,329
and blocks too much.

418
00:22:07,529 --> 00:22:09,751
So in that case, you need to fall back

419
00:22:09,791 --> 00:22:12,093
on the ballistic mesh, which is much more expensive.

420
00:22:12,153 --> 00:22:13,535
It's a much more detailed mesh.

421
00:22:14,175 --> 00:22:17,738
But at least if there's some sort of slight hole

422
00:22:17,798 --> 00:22:19,500
between two parts of the objects,

423
00:22:19,940 --> 00:22:21,882
the occlusion won't be triggered.

424
00:22:23,372 --> 00:22:25,174
The relevance also depends on the context.

425
00:22:25,714 --> 00:22:28,656
By that, I mean that if I go back to the example

426
00:22:28,696 --> 00:22:29,897
of Assassin's Creed Syndicate,

427
00:22:30,578 --> 00:22:34,121
the NPCs could see through vehicles

428
00:22:34,281 --> 00:22:35,642
as soon as they got into conflict.

429
00:22:36,122 --> 00:22:38,024
Otherwise, it was way too easy for a player

430
00:22:38,084 --> 00:22:41,427
to just go run the streets and cut the line of sight

431
00:22:41,467 --> 00:22:43,929
and the NPCs would go into a search behavior.

432
00:22:44,669 --> 00:22:45,490
So in our case...

433
00:22:46,342 --> 00:22:49,364
Whenever the NPCs were in a default behavior,

434
00:22:49,904 --> 00:22:51,705
they would be occluded by carriages.

435
00:22:52,065 --> 00:22:54,866
But as soon as they would get excited and go into a fight,

436
00:22:55,826 --> 00:22:58,147
they would simply ignore all of that.

437
00:23:00,148 --> 00:23:02,709
See-through geometry is quite interesting.

438
00:23:03,229 --> 00:23:06,751
Whenever you're playing with smokes of clouds, tall grass,

439
00:23:08,432 --> 00:23:12,493
what makes it so that the occlusion happens

440
00:23:12,694 --> 00:23:14,794
is usually by computing.

441
00:23:15,823 --> 00:23:19,724
how far you are within that see-through geometry.

442
00:23:19,965 --> 00:23:23,506
And sometimes you want to sum all of the hits that happen.

443
00:23:23,546 --> 00:23:25,987
So for example, if you have a thick, small cloud,

444
00:23:26,807 --> 00:23:28,848
you might be detected if you're just at the edge.

445
00:23:29,068 --> 00:23:30,349
But if you're right in the middle,

446
00:23:30,909 --> 00:23:34,731
the depth that the raycast has to go through

447
00:23:35,531 --> 00:23:37,712
makes it so that you're not detected.

448
00:23:38,292 --> 00:23:39,893
So by having different thresholds

449
00:23:39,953 --> 00:23:42,514
for every type of see-through geometry

450
00:23:42,554 --> 00:23:43,735
could be quite useful.

451
00:23:45,348 --> 00:23:46,989
Also, quick tip for that.

452
00:23:47,829 --> 00:23:49,450
If you're using transparent windows,

453
00:23:49,530 --> 00:23:52,271
just make it so that NPCs can actually

454
00:23:52,311 --> 00:23:55,332
go through some sort of door and reach

455
00:23:55,372 --> 00:23:56,233
the other side of the room.

456
00:23:56,253 --> 00:23:58,233
Because there's nothing worse than having

457
00:23:58,273 --> 00:24:01,335
an NPC stuck into a room, seeing a target on the other side,

458
00:24:01,395 --> 00:24:02,515
and not being able to go.

459
00:24:04,302 --> 00:24:05,463
Environment modifiers.

460
00:24:06,404 --> 00:24:09,948
Sometimes you want to reduce the perception range

461
00:24:10,309 --> 00:24:11,290
in certain conditions.

462
00:24:12,912 --> 00:24:14,914
Heavy storms or thick fog could be

463
00:24:15,415 --> 00:24:18,939
modifiers that make it so that the NPC doesn't see as far.

464
00:24:19,460 --> 00:24:23,024
But these can be also applicable for auditory systems.

465
00:24:24,140 --> 00:24:26,623
For example, on a previous game I worked on,

466
00:24:26,743 --> 00:24:27,925
we had heavy machinery.

467
00:24:28,566 --> 00:24:31,649
So whenever the NPCs was being close to the machinery,

468
00:24:32,010 --> 00:24:33,772
its auditory system would be reduced,

469
00:24:34,253 --> 00:24:36,175
making it easier for a player to create noise

470
00:24:36,215 --> 00:24:38,177
in the environment and not get perceived.

471
00:24:40,197 --> 00:24:43,320
If it's possible, please update the visual language of your NPCs

472
00:24:43,920 --> 00:24:47,824
to explain to the player why the NPC is not

473
00:24:47,904 --> 00:24:49,426
perceiving as he should.

474
00:24:50,747 --> 00:24:53,850
Sometimes something as simple as an additive animation,

475
00:24:54,691 --> 00:24:58,175
make it so that the NPC puts a hand over his eyes,

476
00:24:59,076 --> 00:24:59,736
could be good enough.

477
00:25:02,200 --> 00:25:03,542
The modifiers.

478
00:25:04,323 --> 00:25:05,826
Players tend to learn patterns.

479
00:25:05,866 --> 00:25:08,650
So they play a game, they learn the rules of the game,

480
00:25:09,051 --> 00:25:10,573
and they recognize the patterns.

481
00:25:12,162 --> 00:25:15,624
If you're breaking the patterns by putting modifiers,

482
00:25:16,385 --> 00:25:19,527
please just reduce the perception of the NPCs.

483
00:25:19,807 --> 00:25:21,508
If you're making it more punitive

484
00:25:21,588 --> 00:25:23,029
by making them see further,

485
00:25:24,049 --> 00:25:25,971
the player won't understand what's going on,

486
00:25:26,431 --> 00:25:29,913
and whatever he learned just gets thrown out the window.

487
00:25:30,633 --> 00:25:33,795
So if you reduce the sensors,

488
00:25:34,196 --> 00:25:35,737
the player can still be safe

489
00:25:35,837 --> 00:25:37,197
within the ranges that he learned.

490
00:25:38,119 --> 00:25:40,440
And he can exploit it a bit more because he realizes

491
00:25:40,500 --> 00:25:42,040
that the NPCs are being modified.

492
00:25:43,480 --> 00:25:44,500
Also, make it a stack.

493
00:25:45,500 --> 00:25:49,001
I unfortunately saw it a few times in game engines

494
00:25:49,081 --> 00:25:52,582
that modifiers are global on an NPC.

495
00:25:53,182 --> 00:25:55,742
So a classic example, the mission designer

496
00:25:55,842 --> 00:25:57,023
makes an NPC blind.

497
00:25:57,803 --> 00:25:58,583
You go next to him.

498
00:25:59,103 --> 00:26:00,003
You throw a flashbang.

499
00:26:00,563 --> 00:26:03,564
The flashbang puts an effect on it, blinds the NPC.

500
00:26:04,728 --> 00:26:07,470
As soon as the effect expires, the flashbang's like,

501
00:26:07,590 --> 00:26:08,931
well, you're not blind anymore,

502
00:26:09,451 --> 00:26:10,512
and you just broke your setup.

503
00:26:11,212 --> 00:26:14,154
So if you're stacking modifiers, it's much easier.

504
00:26:14,515 --> 00:26:16,796
The flashbang will simply push a modifier,

505
00:26:17,176 --> 00:26:19,518
pop it, and whatever the mission designer

506
00:26:19,558 --> 00:26:20,939
put in place is still there.

507
00:26:23,521 --> 00:26:24,281
Light and shadows.

508
00:26:25,582 --> 00:26:26,923
That's where it gets complicated.

509
00:26:27,323 --> 00:26:30,085
So if you can avoid it, I would suggest you to do so.

510
00:26:31,657 --> 00:26:33,877
Determining what is lit in an environment,

511
00:26:33,937 --> 00:26:35,178
it's usually quite expensive.

512
00:26:36,078 --> 00:26:38,759
You have to go through all the nearby light sources

513
00:26:38,959 --> 00:26:40,580
and do a ton of ray casts.

514
00:26:41,540 --> 00:26:44,121
And oftentimes it requires multi-sampling.

515
00:26:44,961 --> 00:26:47,022
As we were discussing before with seeing a target

516
00:26:47,062 --> 00:26:49,163
with multiple bones, if you have a big thing

517
00:26:49,203 --> 00:26:51,843
that you're trying to see if it's lit or not,

518
00:26:52,464 --> 00:26:55,545
you probably should be sampling multiple points on it.

519
00:26:58,117 --> 00:27:04,321
Though that solution simply won't fix the issues of having a dark shape in a lit background.

520
00:27:04,381 --> 00:27:09,465
It's possible that the entity itself is receiving shadows from everywhere, but it's standing

521
00:27:09,585 --> 00:27:14,628
right in front of a fireplace, for example, making it quite obvious for anybody looking

522
00:27:14,688 --> 00:27:16,689
at it that there's something there.

523
00:27:16,809 --> 00:27:20,352
Maybe I don't see the detail of it, but there's something there.

524
00:27:20,632 --> 00:27:23,214
The Raycast solution won't fix it unless you're...

525
00:27:24,260 --> 00:27:26,262
Adding even more raycasts, at which point

526
00:27:26,322 --> 00:27:30,167
your engine programmers will come and hit you in the head.

527
00:27:30,507 --> 00:27:38,417
Seeing light source moves and seeing projected shadows.

528
00:27:39,117 --> 00:27:42,762
Again, it can all be fixed using raycasts,

529
00:27:43,142 --> 00:27:44,604
but that's probably not something you want to do.

530
00:27:45,837 --> 00:27:47,038
Reflection is the same problem.

531
00:27:47,778 --> 00:27:49,280
Raycasting could fix your issues,

532
00:27:49,700 --> 00:27:50,981
but it's really hard for a player

533
00:27:51,001 --> 00:27:52,102
to understand what's going on,

534
00:27:53,143 --> 00:27:55,285
especially if the player's not actually looking

535
00:27:55,325 --> 00:27:56,826
at the reflective surface.

536
00:27:58,528 --> 00:28:00,069
Some quick tips for optimization.

537
00:28:00,630 --> 00:28:02,191
Vision requests can be deferred.

538
00:28:02,812 --> 00:28:05,354
So if you can make it that your NPC

539
00:28:05,374 --> 00:28:07,336
simply put a request in a system.

540
00:28:09,506 --> 00:28:14,611
tweak a bit the priority, and then maybe the distance

541
00:28:14,671 --> 00:28:17,833
of the NPC from the camera, its gameplay state,

542
00:28:17,974 --> 00:28:19,355
or its interactions with the players.

543
00:28:19,455 --> 00:28:22,738
For example, an NPC that's actively interacting

544
00:28:22,778 --> 00:28:25,520
with the player might require the priority

545
00:28:25,560 --> 00:28:27,342
to be put up through the roof.

546
00:28:28,123 --> 00:28:33,487
This way you can sort your raycast requests

547
00:28:33,828 --> 00:28:35,249
and treat them accordingly.

548
00:28:36,907 --> 00:28:38,488
and cache as much data as possible.

549
00:28:38,528 --> 00:28:41,229
If you have multiple NPCs testing the same position,

550
00:28:41,289 --> 00:28:44,830
maybe you can reuse some of that information.

551
00:28:45,590 --> 00:28:48,171
So just to wrap up, go data-driven.

552
00:28:48,991 --> 00:28:50,872
Game designers and animators are your friend.

553
00:28:51,272 --> 00:28:52,152
Just give them tools.

554
00:28:52,752 --> 00:28:54,093
Build a library of components.

555
00:28:54,173 --> 00:28:58,594
That's classic tips that everybody

556
00:28:58,654 --> 00:28:59,914
should be using these kind of tips.

557
00:28:59,994 --> 00:29:02,635
But specifically for the sensor systems, it's useful.

558
00:29:03,867 --> 00:29:08,071
And let the designers and animators take ownership.

559
00:29:08,231 --> 00:29:14,438
They're not separate from the AI programmer.

560
00:29:14,498 --> 00:29:17,381
They need to work with us in order

561
00:29:17,421 --> 00:29:18,583
to create a great experience.

562
00:29:19,504 --> 00:29:20,725
And experiment and iterate.

563
00:29:20,765 --> 00:29:22,046
You won't nail it the first time.

564
00:29:22,587 --> 00:29:24,849
It really takes a lot of play testing.

565
00:29:26,833 --> 00:29:28,834
iteration to find a good setup.

566
00:29:29,174 --> 00:29:32,057
I'm trying to be fast because Dave wants me to stop.

567
00:29:32,717 --> 00:29:34,779
And fail early and avoid raycasts.

568
00:29:35,199 --> 00:29:37,921
Raycasts are expensive, so try to avoid them at all costs.

569
00:29:38,461 --> 00:29:39,142
Test everything.

570
00:29:40,303 --> 00:29:44,326
Sensors are really binary, and they're

571
00:29:44,346 --> 00:29:45,266
at the root of everything.

572
00:29:45,306 --> 00:29:46,908
So if an NPC doesn't perceive you,

573
00:29:47,248 --> 00:29:49,590
he cannot act intelligently towards you.

574
00:29:50,010 --> 00:29:51,651
So unit test everything.

575
00:29:52,812 --> 00:29:54,753
And only profile and optimize when needed.

576
00:29:56,908 --> 00:29:57,630
I think that's it.

577
00:29:58,593 --> 00:30:00,519
I'm not sure if we have any time for questions.

578
00:30:03,945 --> 00:30:04,205
Awesome.

579
00:30:04,345 --> 00:30:07,926
Real quick, you said it was perhaps a disadvantage

580
00:30:07,966 --> 00:30:11,906
to have your eye point wobbling around the head.

581
00:30:12,607 --> 00:30:14,787
Actually, Red Storm, in fact, found out

582
00:30:14,807 --> 00:30:17,808
that that was almost mandatory because the animator had

583
00:30:18,068 --> 00:30:20,088
a idle loop for a guard.

584
00:30:20,348 --> 00:30:22,629
There was a player sneaking up on the guard with a knife.

585
00:30:22,649 --> 00:30:25,490
The guard has an AK-47.

586
00:30:25,730 --> 00:30:29,370
And the guard's idle loop includes the occasional glance

587
00:30:29,430 --> 00:30:31,831
over their shoulder right at the player who is like,

588
00:30:32,339 --> 00:30:38,665
five meters away and the guard is totally not seeing them because the bone at the chest

589
00:30:38,725 --> 00:30:40,846
was the perception bone and not the head.

590
00:30:41,512 --> 00:30:41,892
Exactly.

591
00:30:42,652 --> 00:30:45,514
That's why I'm trying to have my teams always use

592
00:30:45,554 --> 00:30:49,196
some sort of hybrid approach where the animator can control

593
00:30:49,536 --> 00:30:50,477
when the bone is turning.

594
00:30:50,837 --> 00:30:53,599
So the player never feels cheated

595
00:30:54,119 --> 00:30:56,360
that the NPC randomly glanced over his shoulder.

596
00:30:56,900 --> 00:31:00,623
But if he does, the player will see the glancing animation,

597
00:31:00,863 --> 00:31:02,464
and then the sensor will start turning,

598
00:31:02,864 --> 00:31:06,026
making it easier for a player to avoid these kind of situations.

599
00:31:06,726 --> 00:31:08,228
And if you guys have any other questions,

600
00:31:08,269 --> 00:31:09,631
I guess I'll be at the wrap-up room,

601
00:31:10,011 --> 00:31:12,074
or you can contact me on my work email address.

602
00:31:12,094 --> 00:31:13,977
All right.

603
00:31:13,997 --> 00:31:14,218
Thank you.

