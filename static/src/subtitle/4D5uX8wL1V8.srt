1
00:00:07,274 --> 00:00:09,275
Hello, my name is Colin Wyke.

2
00:00:10,675 --> 00:00:13,876
I worked at Capybara Games working on a game called Below,

3
00:00:14,157 --> 00:00:16,237
and this is the rendering of Below,

4
00:00:16,978 --> 00:00:19,378
low complexity, high density detail.

5
00:00:21,859 --> 00:00:23,500
So what is Below?

6
00:00:24,080 --> 00:00:25,941
Below is a procedurally generated...

7
00:00:27,115 --> 00:00:32,881
action adventure game. It is inspired by roguelikes of old.

8
00:00:33,601 --> 00:00:38,006
And it's mixed in with handcrafted content. Here's

9
00:00:38,046 --> 00:00:43,031
some pictures that I find to be pretty cool to demonstrate the

10
00:00:43,071 --> 00:00:46,955
world of Below. The visual makeup of Below

11
00:00:48,053 --> 00:00:52,915
is low geometric complexity art in the form of these 3D

12
00:00:53,155 --> 00:00:58,677
geometry, high res hand-drawn backgrounds, and an intricate

13
00:00:58,717 --> 00:01:03,518
display of moving details. So this is a short outline of what

14
00:01:03,539 --> 00:01:08,800
we're going to talk about today. We're talking about making a

15
00:01:08,840 --> 00:01:14,943
dark game, dynamic lighting, and the layering transform or skewing

16
00:01:14,963 --> 00:01:17,083
method that we used in the game.

17
00:01:18,631 --> 00:01:21,914
And there are zero Below-related puns in this presentation.

18
00:01:25,596 --> 00:01:26,317
Things get dark.

19
00:01:27,318 --> 00:01:29,299
Into darkness.

20
00:01:29,659 --> 00:01:31,441
Below is an intentionally dark game.

21
00:01:32,542 --> 00:01:34,703
We really wanted to have negative space

22
00:01:34,863 --> 00:01:37,846
as a prominent visual feature in the game.

23
00:01:38,546 --> 00:01:41,689
And the thing that we're going to talk about today

24
00:01:41,709 --> 00:01:45,572
is the difficulties with making such a dark game.

25
00:01:47,687 --> 00:01:50,770
some of the things that we encountered were contouring,

26
00:01:51,591 --> 00:01:57,496
banding, and being unable to distinguish from darkness,

27
00:01:58,197 --> 00:02:03,062
and the fact that users will adjust their gamma however they

28
00:02:03,102 --> 00:02:05,704
see fit when you eventually release the game.

29
00:02:07,326 --> 00:02:07,466
So.

30
00:02:09,920 --> 00:02:11,960
This is an example of contouring.

31
00:02:11,980 --> 00:02:19,442
You can see that there's spaces of very clear areas where

32
00:02:19,482 --> 00:02:24,164
there's banding or segmenting of the visual space, which is

33
00:02:24,184 --> 00:02:24,424
bad.

34
00:02:24,524 --> 00:02:25,084
We don't want that.

35
00:02:26,704 --> 00:02:29,645
Here is a screenshot which is very, very dark.

36
00:02:30,145 --> 00:02:32,206
But we want it to be very, very dark.

37
00:02:32,366 --> 00:02:35,907
So we want to make sure that it is intentional.

38
00:02:38,950 --> 00:02:42,238
The first thing you need to assume is that the end result

39
00:02:42,299 --> 00:02:46,770
will be on a poorly calibrated monitor or viewing condition.

40
00:02:48,146 --> 00:02:52,409
users will destroy the white balance and gamma by cranking

41
00:02:52,469 --> 00:02:55,772
the gamma either on their television or within the game.

42
00:02:56,332 --> 00:03:00,635
Therefore, you want to deliver the best quality image up until

43
00:03:00,655 --> 00:03:05,999
that point. So one of the first things that we did at the

44
00:03:06,059 --> 00:03:11,223
studio to try and level the playing field and make things

45
00:03:11,283 --> 00:03:11,923
better for

46
00:03:14,649 --> 00:03:18,971
I guess, development of the art was monitor calibration.

47
00:03:19,311 --> 00:03:20,992
And it is hugely important.

48
00:03:21,652 --> 00:03:23,974
It promotes consistent art creation.

49
00:03:24,254 --> 00:03:28,556
And it helped, in our case, reducing false positive bugs

50
00:03:28,956 --> 00:03:33,199
because we knew that everyone was going to have a similarly

51
00:03:33,239 --> 00:03:34,139
calibrated monitor.

52
00:03:34,759 --> 00:03:39,702
However, it doesn't fix time of day bias, which is the

53
00:03:39,782 --> 00:03:42,664
difference between your lighting conditions with

54
00:03:43,204 --> 00:03:43,904
outdoor lights.

55
00:03:44,585 --> 00:03:49,353
the color temperature of outdoor light transforming to

56
00:03:50,134 --> 00:03:52,478
the indoor light later in the day.

57
00:03:52,839 --> 00:03:54,401
So like indoor, outdoor lighting.

58
00:03:55,903 --> 00:03:58,985
So what we proposed was a gamma correct pipeline.

59
00:04:00,585 --> 00:04:01,966
Through development of the game,

60
00:04:02,426 --> 00:04:04,327
it was kind of difficult to figure out

61
00:04:04,547 --> 00:04:07,249
exactly how you make a gamma correct pipeline,

62
00:04:07,269 --> 00:04:09,450
because there aren't very many examples

63
00:04:09,550 --> 00:04:11,231
of exactly how you do it.

64
00:04:12,451 --> 00:04:14,772
So I just wanted to sort of summarize how we did it,

65
00:04:15,253 --> 00:04:17,694
and hopefully other people can use that to do the same.

66
00:04:18,494 --> 00:04:22,676
So the first thing was bringing in gamma textures,

67
00:04:23,713 --> 00:04:27,455
to your linear space rendering, where you do lighting,

68
00:04:27,815 --> 00:04:29,856
your post-processing, your color grading,

69
00:04:30,837 --> 00:04:34,439
your user gamma modification and noise,

70
00:04:34,879 --> 00:04:37,141
and then you compose that to the back buffer.

71
00:04:39,835 --> 00:04:42,117
On top of that, you render your UI.

72
00:04:42,557 --> 00:04:45,519
And the back buffer will be in gamma space,

73
00:04:45,739 --> 00:04:46,780
the same with the UI.

74
00:04:48,361 --> 00:04:53,345
So sRGB is a color space which is perceptually uniform.

75
00:04:53,585 --> 00:04:55,827
It's what most image editing

76
00:04:57,408 --> 00:05:02,250
tools, Photoshop, other image editing programs used to encode

77
00:05:02,270 --> 00:05:05,231
their color information. You're going to want to make sure to

78
00:05:05,631 --> 00:05:10,673
use your albedo textures or your base color textures for your 3D

79
00:05:10,713 --> 00:05:14,594
meshes, for your backgrounds. You want all of that to be in

80
00:05:14,794 --> 00:05:16,735
sRGB gamma space.

81
00:05:19,170 --> 00:05:25,537
Also of note, the graphics APIs like DirectX and OpenGL

82
00:05:26,138 --> 00:05:29,202
cheaply convert between sRGB and linear,

83
00:05:30,062 --> 00:05:32,866
and that's something that you're gonna wanna use.

84
00:05:33,366 --> 00:05:36,470
And then finally, the back buffers will also be

85
00:05:36,790 --> 00:05:38,532
in this sRGB gamma space.

86
00:05:40,528 --> 00:05:44,232
linear space. So linear space, the reason that it's important

87
00:05:44,292 --> 00:05:48,197
is because gamma space is only valid between the values of zero

88
00:05:48,237 --> 00:05:51,542
and one. If you want to do any lighting outside of that range,

89
00:05:52,443 --> 00:05:56,047
you're going to be clamped to it and it's not going to go, it's

90
00:05:56,088 --> 00:05:56,708
not going to end well.

91
00:05:57,989 --> 00:06:01,171
So you want to make sure that you maintain your intermediate

92
00:06:01,191 --> 00:06:04,072
results in your whole entire rendering pipeline up to the

93
00:06:04,112 --> 00:06:07,454
point where you put it to your back buffer in linear space.

94
00:06:08,014 --> 00:06:11,516
And the types of render targets or texture buffers that

95
00:06:11,536 --> 00:06:15,618
you're going to be using to do that are RGBA, well.

96
00:06:16,418 --> 00:06:23,945
Yeah, RGBA16F, R11, G11, B10F, or R10, G10, B10, A2.

97
00:06:25,386 --> 00:06:31,312
The one that we used primarily in below was R11, G11, B10F,

98
00:06:31,852 --> 00:06:34,415
because we found that that had the best.

99
00:06:38,375 --> 00:06:43,397
It had the best performance per cost ratio.

100
00:06:44,478 --> 00:06:47,459
So linear space, the thing that's important is

101
00:06:48,079 --> 00:06:50,840
if you're gonna do any effects, post-processing effects,

102
00:06:51,320 --> 00:06:54,322
or lighting effects that are physically simulated,

103
00:06:54,642 --> 00:06:56,603
you definitely need to be working in linear space.

104
00:06:57,743 --> 00:07:01,264
So anything such as depth of field, bloom,

105
00:07:01,504 --> 00:07:05,086
motion blur, color grading, tone mapping.

106
00:07:06,135 --> 00:07:09,077
all of those you're going to need to be doing in linear

107
00:07:09,097 --> 00:07:13,539
space. So one of the problems that we had in gamma space was

108
00:07:13,599 --> 00:07:16,621
we realized that our color grading was introducing

109
00:07:16,661 --> 00:07:20,524
artifacts. And that was the contouring that I showed you

110
00:07:20,544 --> 00:07:24,166
before. So we decided that we needed to move our color grading

111
00:07:24,706 --> 00:07:30,510
into linear space. And what this did is it preserved the

112
00:07:30,570 --> 00:07:34,472
precision of your data in your render target to the final

113
00:07:34,492 --> 00:07:35,093
transformation.

114
00:07:37,694 --> 00:07:41,838
So one of the ways that you can do color grading is by

115
00:07:41,918 --> 00:07:46,963
creating a lookup table in the form of a 32 by 32 by 32 color

116
00:07:47,003 --> 00:07:52,869
cube, which we see right here, which you can then splay into

117
00:07:52,889 --> 00:07:53,269
a 1024 by 32 strip.

118
00:07:56,173 --> 00:08:03,375
which we see here, which you can put on top of a render from

119
00:08:03,395 --> 00:08:07,896
your game in Photoshop, do your color grading, export that,

120
00:08:07,956 --> 00:08:12,137
and then import it to your engine, and use that cube to

121
00:08:12,537 --> 00:08:18,938
basically the x, y, z-axis of the cube corresponds to your

122
00:08:19,018 --> 00:08:19,698
input color.

123
00:08:20,338 --> 00:08:23,519
And what's in the actual pixel is your output color.

124
00:08:24,779 --> 00:08:29,742
and that's what you can use for your color grading. What we

125
00:08:29,942 --> 00:08:36,286
found was that if you do this in Photoshop and you export it with

126
00:08:37,767 --> 00:08:42,209
32 bit color or 24 bit color, 8 bit per channel, your input

127
00:08:42,269 --> 00:08:45,551
texture misses a lot of precision and will introduce a

128
00:08:45,571 --> 00:08:46,291
number of artifacts.

129
00:08:48,448 --> 00:08:52,749
So what we decided to do was create an in-game color grading

130
00:08:52,809 --> 00:08:54,630
tool instead, which you see right here.

131
00:08:56,370 --> 00:08:59,831
And it has all of the necessary functionality

132
00:08:59,871 --> 00:09:04,413
that we needed for doing the color grading from Photoshop.

133
00:09:05,633 --> 00:09:11,315
And it automatically converts the color values from linear

134
00:09:11,415 --> 00:09:13,916
to, or from gamma space to linear space.

135
00:09:15,258 --> 00:09:21,380
On top of that, this allowed us to create animations for

136
00:09:21,480 --> 00:09:25,321
interpolating between color grading scripts, which we use

137
00:09:25,361 --> 00:09:30,263
in game play to express a number of different in-game

138
00:09:30,303 --> 00:09:30,603
events.

139
00:09:32,762 --> 00:09:36,545
And we're still using the color cube internally.

140
00:09:37,506 --> 00:09:40,768
We just create the color tube and generate the

141
00:09:40,828 --> 00:09:44,610
transformation based on the color grading values that we

142
00:09:44,650 --> 00:09:45,751
have from our in-game editor.

143
00:09:46,972 --> 00:09:49,794
And this helps a lot with the filmic look of Below.

144
00:09:50,935 --> 00:09:54,517
And it became a pretty important feature for the

145
00:09:54,537 --> 00:09:55,238
development of Below.

146
00:09:55,812 --> 00:10:01,996
So this is a picture of the color grading before the in-game

147
00:10:02,176 --> 00:10:04,818
editor and the better use of precision.

148
00:10:04,998 --> 00:10:09,081
And this is after, which honestly, with these

149
00:10:09,141 --> 00:10:10,542
projectors, is probably hard to tell.

150
00:10:10,822 --> 00:10:13,704
But that's a pretty good example of why you want to

151
00:10:13,744 --> 00:10:16,426
make sure that you're doing the best that you can before

152
00:10:16,446 --> 00:10:17,467
you actually release your game.

153
00:10:20,079 --> 00:10:23,521
So another thing that was a pretty prominent or important

154
00:10:23,722 --> 00:10:27,164
effect that we used in the game was a noise or film grain,

155
00:10:27,544 --> 00:10:31,027
which we tried initially in the form of a shader, which

156
00:10:31,087 --> 00:10:34,689
has burns, scratches, and Perlin noise.

157
00:10:34,809 --> 00:10:36,771
But we found it to be extremely expensive.

158
00:10:37,551 --> 00:10:41,274
And sometimes, every once in a while, when the seed got to

159
00:10:41,314 --> 00:10:44,116
exactly the right spot, you would see a repeating pattern,

160
00:10:44,816 --> 00:10:46,357
which definitely didn't want.

161
00:10:47,217 --> 00:10:51,719
We tried dithering and that also, it was just too video

162
00:10:51,739 --> 00:10:56,441
gamey. It makes it feel like it's an older, I mean, we're

163
00:10:56,461 --> 00:10:59,722
trying to make a game that is inspired by old roguelikes but

164
00:10:59,882 --> 00:11:00,463
not that much.

165
00:11:02,646 --> 00:11:07,868
So what we ended up landing on was a noise generator

166
00:11:08,768 --> 00:11:12,449
called the WangHash, which uses binary operators.

167
00:11:12,469 --> 00:11:14,710
You can see the code right here.

168
00:11:14,730 --> 00:11:16,831
I'm not gonna explain all of it,

169
00:11:16,851 --> 00:11:18,412
but it uses binary operators,

170
00:11:19,432 --> 00:11:21,033
which makes it extremely fast.

171
00:11:22,573 --> 00:11:25,515
The disassembly on it is actually pretty, pretty good.

172
00:11:26,795 --> 00:11:30,156
And it had much higher quality than the other

173
00:11:30,897 --> 00:11:33,859
noise generation, and there was no distinguishable repeating pattern.

174
00:11:34,359 --> 00:11:40,242
So this was before the noise and after, which you probably can't see too well.

175
00:11:41,863 --> 00:11:48,147
And yeah, the noise, just a second before we move on, the noise was really, really important

176
00:11:48,767 --> 00:11:54,611
for breaking down that contouring even further to the point where it was really, really hard

177
00:11:54,651 --> 00:11:56,972
to tell any of it at all.

178
00:11:58,724 --> 00:12:00,565
I think we're feeling pretty good about the way

179
00:12:00,605 --> 00:12:03,347
that the image quality is currently looking in the game.

180
00:12:03,867 --> 00:12:06,229
So the final conversion to gamma space,

181
00:12:07,489 --> 00:12:09,551
you combine your lighting, your color grading,

182
00:12:09,591 --> 00:12:14,093
your user gamma, and your noise to the sRGB back buffer,

183
00:12:14,494 --> 00:12:16,715
and then you render your UI on top,

184
00:12:18,456 --> 00:12:21,978
which the reason you want to render your UI on top

185
00:12:22,178 --> 00:12:26,641
is to make sure that you're keeping your UI in sRGB space.

186
00:12:27,221 --> 00:12:30,002
and if it's outputted directly to something

187
00:12:30,022 --> 00:12:32,863
that's in sRGB space, doesn't require any lighting,

188
00:12:33,203 --> 00:12:34,783
doesn't require your linear space,

189
00:12:35,543 --> 00:12:39,445
it's going to skip the conversion from sRGB to linear

190
00:12:39,545 --> 00:12:43,466
to sRGB and it's the best way to go.

191
00:12:44,465 --> 00:12:51,088
So moving on, it's part two, let there be light, or making a

192
00:12:51,188 --> 00:12:56,310
lighting system from scratch. In the beginning with Below, we

193
00:12:56,350 --> 00:13:00,012
started out with a pseudo lighting system where there was

194
00:13:00,052 --> 00:13:04,214
a circle of light around the player and it was very, very

195
00:13:04,254 --> 00:13:10,517
rudimentary. This was back when the game was heavily 2D and the

196
00:13:10,537 --> 00:13:13,458
game was always envisioned to be dark and moody.

197
00:13:14,559 --> 00:13:18,842
The requirements that we would need for creating this lighting system was

198
00:13:19,482 --> 00:13:26,527
Well, the reason that we needed to do it was that our game engine only supported a perspective projection

199
00:13:26,967 --> 00:13:28,408
and what we'll talk about later with

200
00:13:30,770 --> 00:13:34,094
the game is there's an orthographic camera that's

201
00:13:34,234 --> 00:13:37,838
required for the skewing method that we use to render the 3D

202
00:13:37,858 --> 00:13:44,385
meshes. And there are hand-drawn backgrounds and the combination

203
00:13:44,425 --> 00:13:47,969
of both of those things require us to use an ortho camera.

204
00:13:49,271 --> 00:13:51,836
Basically, it's to make sure that the 3D meshes

205
00:13:51,996 --> 00:13:56,304
are rooted directly onto the hand-drawn backgrounds,

206
00:13:56,425 --> 00:13:57,847
and if there are any sprites,

207
00:13:58,288 --> 00:14:01,294
there is no perspective distortion around them.

208
00:14:02,964 --> 00:14:05,265
So what if we added dynamic lighting to the game?

209
00:14:06,425 --> 00:14:09,306
We started with a deferred lighting system,

210
00:14:09,746 --> 00:14:10,906
implemented that whole thing.

211
00:14:10,926 --> 00:14:15,987
We found it to be pretty good, but then it was really slow

212
00:14:16,387 --> 00:14:20,888
on Xbox because it's really hard to fit your render

213
00:14:20,928 --> 00:14:23,709
targets into your ESRAM.

214
00:14:24,209 --> 00:14:27,230
So we decided to try and create a tiled forward lighting

215
00:14:27,270 --> 00:14:32,291
system that would leverage the power of the Xbox.

216
00:14:33,611 --> 00:14:36,293
So it starts with a compute shader that reduces the lights

217
00:14:36,433 --> 00:14:38,554
to a spatial subdivision of tiles.

218
00:14:39,255 --> 00:14:42,697
In our game, it's 16 by 16 world units,

219
00:14:42,857 --> 00:14:45,098
which corresponds to approximately

220
00:14:45,498 --> 00:14:48,020
16 by 16 screen space units.

221
00:14:50,221 --> 00:14:52,662
and we divide it into those tiles,

222
00:14:52,762 --> 00:14:54,243
and then for each of those tiles,

223
00:14:54,283 --> 00:14:56,824
we cull a list of lights ahead of time

224
00:14:56,964 --> 00:14:59,246
before rendering the geometry.

225
00:14:59,786 --> 00:15:03,868
We then pack the lights using a bit mask,

226
00:15:04,648 --> 00:15:07,350
and we were able to use Async Compute

227
00:15:07,370 --> 00:15:11,412
to do the light culling operation

228
00:15:11,512 --> 00:15:13,593
at the same time as we're doing other things,

229
00:15:14,013 --> 00:15:17,195
which I believe were the shadow rendering.

230
00:15:17,915 --> 00:15:21,799
and a few other physics-based simulations.

231
00:15:24,522 --> 00:15:26,604
So yeah, and it ended up being a big win.

232
00:15:29,347 --> 00:15:31,649
So yes, when you're lighting,

233
00:15:32,129 --> 00:15:34,310
when you're actually evaluating the lighting

234
00:15:34,610 --> 00:15:37,192
is when you render your 3D meshes.

235
00:15:37,992 --> 00:15:41,675
And at the time of the pixel shader of your 3D mesh,

236
00:15:42,115 --> 00:15:45,177
you unpack the tiles called light list.

237
00:15:46,177 --> 00:15:48,359
And the way that we did that,

238
00:15:49,539 --> 00:15:53,882
and I'm always looking for neat optimizations

239
00:15:53,942 --> 00:15:57,004
and the best way to use, to leverage.

240
00:15:57,964 --> 00:16:01,166
shader code or shader optimizations and what

241
00:16:01,406 --> 00:16:05,507
functionality is out there to best optimize stuff because

242
00:16:05,667 --> 00:16:11,370
that's what graphics programmers do often. And the interesting

243
00:16:11,410 --> 00:16:15,711
thing that we were able to do was use a count bits function

244
00:16:16,292 --> 00:16:20,853
and a first bit high to scan through the bit mask really,

245
00:16:20,893 --> 00:16:25,535
really quickly and unpack the lights. And you can see that in

246
00:16:25,615 --> 00:16:26,896
that code right there. But

247
00:16:28,065 --> 00:16:32,647
I should add that the binary arithmetic for doing these

248
00:16:32,707 --> 00:16:37,409
things is really, really fast on GPUs and it's something that

249
00:16:38,390 --> 00:16:41,711
was really, really helpful in optimizing the game. The other

250
00:16:41,872 --> 00:16:45,673
thing of note is that the tile forward lighting system works

251
00:16:45,713 --> 00:16:49,895
really, really well with MSAA. Originally we were trying to

252
00:16:50,055 --> 00:16:53,097
use a deferred lighting system that deferred all of your

253
00:16:54,718 --> 00:17:01,525
geometry information such as the normals, the albedo, any glow

254
00:17:01,565 --> 00:17:04,608
that you're going to do, any world space information to

255
00:17:05,829 --> 00:17:09,052
texture buffers, render targets. And if you're using

256
00:17:09,192 --> 00:17:10,874
MSAA, it's going to have

257
00:17:11,374 --> 00:17:16,816
as many samples as actual memory and that is extremely,

258
00:17:16,836 --> 00:17:20,037
it's disproportionately slow for MSAA.

259
00:17:20,638 --> 00:17:22,418
Whereas, tiled forward lighting,

260
00:17:23,039 --> 00:17:26,800
your lighting evaluation only happens once per pixel

261
00:17:27,500 --> 00:17:30,401
and with the tiled forward lighting system,

262
00:17:30,421 --> 00:17:33,162
you're not required to defer as much information

263
00:17:33,883 --> 00:17:35,983
and it ended up working out really well with MSAA.

264
00:17:36,003 --> 00:17:37,064
MSAA, we ended up,

265
00:17:40,604 --> 00:17:45,126
kind of needing to use because post-process anti-aliasing,

266
00:17:46,126 --> 00:17:49,988
we didn't find that FXAA was very good,

267
00:17:51,188 --> 00:17:53,269
and temporal anti-aliasing would become

268
00:17:53,709 --> 00:17:55,090
really, really difficult to do

269
00:17:55,510 --> 00:17:56,811
if you were doing any type of...

270
00:17:58,406 --> 00:18:01,648
It would become very difficult to do if your geometry is

271
00:18:01,688 --> 00:18:06,492
really small and you need to, and the temporal aliasing of

272
00:18:06,512 --> 00:18:10,235
whether pixels render or don't between frames is going to be

273
00:18:10,415 --> 00:18:11,636
extraordinarily high.

274
00:18:12,857 --> 00:18:14,378
So yeah, it helps with small geometry.

275
00:18:16,159 --> 00:18:19,202
So point light shadows, one of the interesting things that we

276
00:18:19,242 --> 00:18:24,606
tried was dual paraboloid shadow maps. You can see one of the

277
00:18:24,646 --> 00:18:30,111
hemispheres of that right here. We tried doing that and there

278
00:18:30,171 --> 00:18:32,994
were difficult seam issues because you actually have two

279
00:18:33,034 --> 00:18:36,917
hemispheres that you're sampling between when you're trying to

280
00:18:37,057 --> 00:18:41,341
check for your shadows. And any time the geometry goes through

281
00:18:41,361 --> 00:18:43,102
the center of the light, it would warp.

282
00:18:43,703 --> 00:18:49,426
the vertices and create a lot of interesting artifacts. So we

283
00:18:49,446 --> 00:18:54,528
decided to use cube maps. Cube maps, the downsides are you've

284
00:18:54,548 --> 00:18:59,050
got six faces to render and below a typical scene is

285
00:18:59,150 --> 00:19:02,912
hundreds of meshes and that's a lot of geometry to render.

286
00:19:03,433 --> 00:19:03,873
Therefore,

287
00:19:05,852 --> 00:19:11,159
your CPU time is extremely valuable and gathering lists of

288
00:19:11,199 --> 00:19:13,822
geometry is something that you don't want to spend a whole lot

289
00:19:13,842 --> 00:19:20,890
of time doing. So here's a little animated gif of what one

290
00:19:20,930 --> 00:19:24,854
of those lights shadow cast would look like. And

291
00:19:25,715 --> 00:19:28,198
What we did to optimize this process was create a

292
00:19:28,238 --> 00:19:31,522
conservative volume of your lights and your camera.

293
00:19:32,082 --> 00:19:35,166
And we multi-threaded the culling of the lists of that

294
00:19:35,206 --> 00:19:38,429
geometry to run simultaneously across many

295
00:19:38,469 --> 00:19:40,131
cores on the Xbox.

296
00:19:40,612 --> 00:19:42,534
And it ended up working out really, really well.

297
00:19:42,974 --> 00:19:45,597
And it was a good performance win as well.

298
00:19:47,759 --> 00:19:51,241
So one of the other interesting point light shadow

299
00:19:51,281 --> 00:19:54,622
optimizations that we had was we used a geometry shader to

300
00:19:55,062 --> 00:19:59,064
replicate the geometry to all of the different faces of the

301
00:19:59,084 --> 00:19:59,584
cube map.

302
00:20:00,584 --> 00:20:03,265
And we were able to do that in a single draw call.

303
00:20:05,648 --> 00:20:08,470
So what was the impact of creating this lighting system

304
00:20:08,490 --> 00:20:08,971
in Below?

305
00:20:09,911 --> 00:20:13,294
One of the things was, as a result,

306
00:20:13,574 --> 00:20:18,138
light became a resource in our game that it's craftable.

307
00:20:18,158 --> 00:20:19,419
It's something that you can create.

308
00:20:19,939 --> 00:20:22,602
It's something you get from defeating enemies, which

309
00:20:22,682 --> 00:20:26,104
allowed us to make really dark areas that, as you can see

310
00:20:26,265 --> 00:20:28,486
here, it's almost pitch black.

311
00:20:29,267 --> 00:20:29,467
So.

312
00:20:30,528 --> 00:20:33,550
It also allowed us to think about what happens

313
00:20:33,630 --> 00:20:36,371
if the player has this control over light.

314
00:20:36,971 --> 00:20:39,693
Can we allow them to light up a room,

315
00:20:40,553 --> 00:20:43,615
essentially creating a breadcrumb path

316
00:20:44,015 --> 00:20:44,916
for them to follow?

317
00:20:46,477 --> 00:20:49,258
And it gave us the confidence to make the game

318
00:20:49,778 --> 00:20:52,420
even darker than we initially anticipated.

319
00:20:52,440 --> 00:20:53,741
And then...

320
00:21:02,963 --> 00:21:04,303
Sorry, I'm running a little late.

321
00:21:07,904 --> 00:21:11,845
So another issue, or another thing that we found

322
00:21:12,726 --> 00:21:16,667
by creating this lighting system was it allowed us to

323
00:21:18,107 --> 00:21:21,208
interact with, have enemies interact with light.

324
00:21:21,268 --> 00:21:24,229
It allowed us to do things like create light volumes,

325
00:21:24,649 --> 00:21:26,729
which we then used to activate switches,

326
00:21:27,550 --> 00:21:31,251
and we even created this thing where lights will reveal

327
00:21:32,011 --> 00:21:35,833
hidden objects and that whole thing piggybacks on the

328
00:21:36,073 --> 00:21:40,475
lighting system and it extends all the way to lights that are

329
00:21:40,515 --> 00:21:44,277
actually hidden by other lights. So you can use a light

330
00:21:44,638 --> 00:21:48,219
to reveal this hidden world that's filled with lights that

331
00:21:48,259 --> 00:21:53,222
will then, for example, in these videos, illuminate the

332
00:21:53,242 --> 00:21:56,744
character whereas it would otherwise not be visible.

333
00:21:58,130 --> 00:22:02,794
So the moral of the story is that if you're going to add the

334
00:22:02,834 --> 00:22:07,237
ability to create light in your game for gameplay, you better

335
00:22:07,257 --> 00:22:08,998
make sure that it scales as well as possible.

336
00:22:11,512 --> 00:22:15,535
So here is part three, Things Get Skewed.

337
00:22:16,516 --> 00:22:18,057
We're gonna talk about the skewing method

338
00:22:18,097 --> 00:22:21,900
of how we rendered the 3D meshes in the game.

339
00:22:23,682 --> 00:22:26,384
And how it gives, sorry.

340
00:22:26,964 --> 00:22:29,386
If you wanna know how it gives the authentic

341
00:22:29,706 --> 00:22:31,087
and original perspective of the game

342
00:22:31,167 --> 00:22:33,009
from an artistic perspective,

343
00:22:34,110 --> 00:22:39,093
go see my coworker Dan Cox's talk on Thursday,

344
00:22:39,934 --> 00:22:40,214
March 2nd.

345
00:22:41,135 --> 00:22:44,177
room 201 in this building, I believe, at 3 p.m.

346
00:22:46,099 --> 00:22:49,882
And this is a picture of a very, very shameless pug.

347
00:22:52,749 --> 00:22:56,330
So the origin for our skewing in the game

348
00:22:56,990 --> 00:23:00,010
is that every time you die, you come back as a new character

349
00:23:00,471 --> 00:23:04,871
so we wanted to demonstrate that with randomized outfits

350
00:23:05,611 --> 00:23:10,892
and in order to do that, originally we had sprites,

351
00:23:11,232 --> 00:23:15,573
2D sprites, and if you were to try and do all of those

352
00:23:16,093 --> 00:23:19,494
outfits in sprites, it would be an immense amount of data,

353
00:23:19,514 --> 00:23:19,874
it would just,

354
00:23:20,594 --> 00:23:22,054
not work out, it wasn't possible.

355
00:23:22,895 --> 00:23:26,396
Therefore, we tried to figure out how we could render 3D

356
00:23:26,856 --> 00:23:31,197
meshes with the ortho camera because of the hand-drawn

357
00:23:31,217 --> 00:23:31,757
backgrounds.

358
00:23:32,637 --> 00:23:35,758
And the first thing we tried was rotating everything along

359
00:23:35,798 --> 00:23:40,999
an axis, the one parallel or tangent to the camera, which

360
00:23:41,039 --> 00:23:42,139
was OK at first.

361
00:23:42,620 --> 00:23:46,501
However, the shadows that we added, which came later,

362
00:23:47,321 --> 00:23:48,001
didn't match.

363
00:23:49,041 --> 00:23:50,122
And that was a problem.

364
00:23:50,542 --> 00:23:54,365
The other problem was that when geometry interacted

365
00:23:54,445 --> 00:23:59,768
with other geometry, it created a lot of issues.

366
00:24:04,062 --> 00:24:08,185
Yeah, and then finally, there were issues with attachment

367
00:24:08,285 --> 00:24:11,887
where if you attach an object to another 3D object

368
00:24:12,327 --> 00:24:14,588
with the rotation, it became really difficult

369
00:24:14,628 --> 00:24:16,089
to make sure that that worked properly.

370
00:24:16,890 --> 00:24:20,912
So, in our game, the skewing method that we used is

371
00:24:22,253 --> 00:24:24,714
the camera is top down on the y-axis

372
00:24:25,495 --> 00:24:29,377
and the screen space coordinates are x and z.

373
00:24:30,538 --> 00:24:34,960
So what we do is we move the vertex position in the Z axis

374
00:24:35,300 --> 00:24:37,961
based on the Y position.

375
00:24:38,661 --> 00:24:43,063
And then we push the vertex position in the Y axis towards

376
00:24:43,123 --> 00:24:45,864
the camera based on the Z world position.

377
00:24:46,084 --> 00:24:49,106
And we do this for all 3D geometry that's been rendered.

378
00:24:50,227 --> 00:24:52,788
And this is a demo of how it works.

379
00:24:52,848 --> 00:24:54,469
That was the regular game view.

380
00:24:54,889 --> 00:24:56,971
Now this is our 3D world view.

381
00:24:57,011 --> 00:25:00,012
This is what it looks like without any of the skewing.

382
00:25:00,413 --> 00:25:03,755
And then when we press the magic button to do the skew,

383
00:25:04,135 --> 00:25:07,137
you can see that it pushes it all towards the camera

384
00:25:07,897 --> 00:25:11,759
and aligns it in a ways so that it works.

385
00:25:12,580 --> 00:25:15,802
almost as if it was rendering towards the camera.

386
00:25:16,883 --> 00:25:21,245
But it allows us to create a depth buffer,

387
00:25:21,946 --> 00:25:23,527
which has all of the important information

388
00:25:23,587 --> 00:25:26,769
that we need to do effects such as

389
00:25:29,706 --> 00:25:32,347
screen space ambient occlusion, depth of the field,

390
00:25:32,467 --> 00:25:33,788
volumetric fog of war.

391
00:25:34,788 --> 00:25:38,409
All of these things require a world space position

392
00:25:38,849 --> 00:25:41,450
and with a depth buffer that contained

393
00:25:41,510 --> 00:25:43,491
all of this information, we were able to

394
00:25:44,191 --> 00:25:45,292
do all of these things.

395
00:25:46,212 --> 00:25:51,334
And here is a example of the game before the fog of war.

396
00:25:51,914 --> 00:25:55,736
And then once it's been composited in,

397
00:25:55,996 --> 00:25:56,476
you can see the

398
00:25:58,696 --> 00:26:01,780
pillars are rising out of the fog. It looks pretty cool. And

399
00:26:01,820 --> 00:26:07,026
then we're able to, with the world space information, deduce

400
00:26:08,028 --> 00:26:12,473
or create the SSAO effect. In conclusion, indie game

401
00:26:12,493 --> 00:26:13,895
development is sometimes crazy. And

402
00:26:16,639 --> 00:26:18,220
A lot of the things that we talked about today

403
00:26:18,300 --> 00:26:21,061
weren't necessarily the fastest, most optimal way

404
00:26:21,162 --> 00:26:22,663
of creating something.

405
00:26:23,143 --> 00:26:25,605
But sometimes you take the easy route

406
00:26:25,725 --> 00:26:29,467
because you're small teams, you don't have the most

407
00:26:29,867 --> 00:26:31,929
time in the world, and you're just trying

408
00:26:31,949 --> 00:26:33,230
to do the best that you can.

409
00:26:34,150 --> 00:26:38,553
And lastly, with respect to the layering transform,

410
00:26:40,435 --> 00:26:45,178
Sometimes you get stuck with weird systems, and sometimes

411
00:26:45,678 --> 00:26:49,199
reinventing it would take too much time or take too much

412
00:26:49,340 --> 00:26:53,141
risk. But sometimes these weird things give your game its

413
00:26:53,181 --> 00:26:59,704
charm, and I think Below is a pretty charming game. Thanks for

414
00:26:59,724 --> 00:26:59,905
coming.

415
00:27:07,844 --> 00:27:11,307
So we have some time for questions. Does anyone have any?

416
00:27:17,814 --> 00:27:20,217
Cool. Um, well I will go over. Oh,

417
00:27:20,377 --> 00:27:23,801
right. Hello. Uh,

418
00:27:23,901 --> 00:27:28,146
so I noticed you do most of your lighting computation on the GPU.

419
00:27:28,863 --> 00:27:31,885
But then you use that for gameplay mechanics.

420
00:27:31,945 --> 00:27:33,846
Did that cause any challenges?

421
00:27:33,946 --> 00:27:36,667
Because all of the final computations, like the volume,

422
00:27:36,687 --> 00:27:37,908
were on the GPU, correct?

423
00:27:38,568 --> 00:27:43,550
And so did you have to move that data from the GPU to the

424
00:27:43,630 --> 00:27:48,393
CPU to do the gameplay based on it?

425
00:27:49,153 --> 00:27:49,793
Yeah, sorry.

426
00:27:51,314 --> 00:27:55,756
So to answer your question, we did all of the gameplay based

427
00:27:57,496 --> 00:28:01,560
lighting computations on the CPU.

428
00:28:02,901 --> 00:28:06,184
All of the lighting information was coming in

429
00:28:06,304 --> 00:28:10,588
from our Lua light scripting system.

430
00:28:11,408 --> 00:28:13,690
We brought all of that light information

431
00:28:14,451 --> 00:28:19,653
in, we put it through to C++, and then from there,

432
00:28:20,234 --> 00:28:22,495
sent the light information to the GPU.

433
00:28:22,895 --> 00:28:25,596
But basically in between when you do the light culling,

434
00:28:25,956 --> 00:28:31,059
the culling is doing a bunch of those checks on CPU,

435
00:28:31,539 --> 00:28:33,080
so it seemed like a pretty good place

436
00:28:33,160 --> 00:28:34,760
to figure out those results.

437
00:28:35,601 --> 00:28:38,882
Most of the time when we were referencing

438
00:28:39,042 --> 00:28:42,204
the gameplay-based light culling,

439
00:28:43,224 --> 00:28:46,265
checks, those were happening multi-threaded while we were

440
00:28:46,285 --> 00:28:48,707
doing the calling of the lights on CPU.

441
00:28:49,747 --> 00:28:49,967
Thanks.

442
00:28:58,251 --> 00:28:59,151
Any more questions?

443
00:29:01,152 --> 00:29:03,713
I'm probably gonna go over to the other area,

444
00:29:03,753 --> 00:29:06,734
so if you have questions and you don't wanna ask here,

445
00:29:07,415 --> 00:29:08,435
I can answer them there.

446
00:29:09,676 --> 00:29:10,076
Thank you again.

