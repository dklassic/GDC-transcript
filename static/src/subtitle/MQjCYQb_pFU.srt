1
00:00:06,113 --> 00:00:08,596
As the slide states, I am Brian Vinisky,

2
00:00:09,096 --> 00:00:11,019
senior technical animator at Avalanche Studios.

3
00:00:12,120 --> 00:00:13,622
I'm located in the New York City office

4
00:00:13,802 --> 00:00:14,663
right in the middle of Manhattan.

5
00:00:15,424 --> 00:00:17,887
Our other two locations are actually both in Sweden,

6
00:00:18,648 --> 00:00:20,390
there's our OG studio in Stockholm,

7
00:00:20,650 --> 00:00:21,571
and then our newest studio,

8
00:00:21,611 --> 00:00:24,094
which officially opened last year, is in Malmo.

9
00:00:25,648 --> 00:00:27,369
Our most recent games that you may know about

10
00:00:27,569 --> 00:00:29,750
are the latest installments in the Just Cause series,

11
00:00:30,310 --> 00:00:32,491
with Just Cause 4 having been released this past December,

12
00:00:33,211 --> 00:00:36,153
Mad Max, Rage 2, which comes out on May 14th,

13
00:00:36,873 --> 00:00:38,213
and notable self-published games,

14
00:00:38,293 --> 00:00:41,435
such as The Hunter Called Wild, as well as Generation Zero,

15
00:00:41,575 --> 00:00:44,436
which actually comes out this coming Tuesday, March 26th.

16
00:00:46,277 --> 00:00:47,858
This is actually my third time speaking now,

17
00:00:48,238 --> 00:00:50,239
so hopefully I've settled in

18
00:00:50,279 --> 00:00:53,360
and I can give you a good experience with this presentation.

19
00:00:55,267 --> 00:00:57,648
Today, I'll actually be talking about the content workflows

20
00:00:57,668 --> 00:01:00,230
that we've employed for both the gameplay and cinematic teams

21
00:01:00,330 --> 00:01:02,691
that began from the ground up during Just Cause 3

22
00:01:03,111 --> 00:01:04,712
and evolved over the production of Just Cause 4.

23
00:01:04,952 --> 00:01:08,455
I actually wanted to call this talk Maximizing Animation

24
00:01:08,515 --> 00:01:10,956
and Cinematic Content Workflows for a AAA Project

25
00:01:11,016 --> 00:01:13,277
that utilized two different DCC software packages

26
00:01:13,318 --> 00:01:15,659
with a team size smaller than a typical AAA team,

27
00:01:16,800 --> 00:01:19,081
but the full title wouldn't quite fit on the schedule board,

28
00:01:19,601 --> 00:01:20,522
so I had to make do.

29
00:01:21,578 --> 00:01:23,980
In all seriousness, the reason why I wanted to talk

30
00:01:24,140 --> 00:01:26,422
about the work that we've been doing over the last few years

31
00:01:26,922 --> 00:01:29,124
is because I truly believe that what we've been able to do

32
00:01:29,505 --> 00:01:30,646
with the scope of our projects,

33
00:01:30,786 --> 00:01:32,787
as well as the team size we've had, is quite remarkable.

34
00:01:33,368 --> 00:01:35,590
It's not only a testament to the tools and processes

35
00:01:35,630 --> 00:01:38,012
that have been employed, but by the fantastic teams

36
00:01:38,032 --> 00:01:39,253
that I've had the pleasure of working with.

37
00:01:41,315 --> 00:01:43,116
I'm gonna set the expectations going into this

38
00:01:43,196 --> 00:01:45,038
to better help you understand what I'm going to talk about.

39
00:01:46,165 --> 00:01:47,386
Consumers will look at your product.

40
00:01:47,406 --> 00:01:48,447
They're going to see shiny things.

41
00:01:48,467 --> 00:01:49,668
They're going to rate your graphics,

42
00:01:49,928 --> 00:01:51,990
how you compare to other games, so on and so forth.

43
00:01:52,510 --> 00:01:55,352
At the core of it all, though, everyone here

44
00:01:55,392 --> 00:01:57,154
is producing content in very similar ways,

45
00:01:57,394 --> 00:01:59,616
using workflows and methods underneath that shiny finish.

46
00:02:00,957 --> 00:02:02,478
A large focus of mine over the years

47
00:02:02,618 --> 00:02:03,900
has involved a lot of process.

48
00:02:04,200 --> 00:02:05,481
And with that said, I'm not going

49
00:02:05,501 --> 00:02:07,222
to give you a groundbreaking new piece of tech

50
00:02:07,242 --> 00:02:09,044
during this talk, as it is, in fact,

51
00:02:09,124 --> 00:02:11,366
about using and manipulating things that do already exist.

52
00:02:12,436 --> 00:02:13,997
While I love sharing my thoughts and process,

53
00:02:14,237 --> 00:02:16,519
I'm not saying this is the definitive way to do anything,

54
00:02:16,679 --> 00:02:17,840
but it did work well for us.

55
00:02:19,101 --> 00:02:20,282
Now, while a good portion of this talk

56
00:02:20,322 --> 00:02:22,664
is focused on cutscene work, it's not a narrative talk,

57
00:02:22,844 --> 00:02:24,045
so I won't be going into detail

58
00:02:24,085 --> 00:02:25,166
about that side of cinematics,

59
00:02:25,586 --> 00:02:27,627
although certain parts of our pipeline were created

60
00:02:27,707 --> 00:02:29,989
to allow for the extra work that came into narrative changes.

61
00:02:31,670 --> 00:02:33,812
It's also not a talk about the overall look of anything

62
00:02:33,892 --> 00:02:35,073
or the in-game tech behind it.

63
00:02:36,754 --> 00:02:39,056
And it's not a talk that discusses creating high-quality,

64
00:02:39,777 --> 00:02:40,637
high-quality content,

65
00:02:40,717 --> 00:02:42,138
or how to hit a certain level of quality.

66
00:02:43,388 --> 00:02:45,849
It is about managing large quantities of content

67
00:02:45,989 --> 00:02:48,070
and making the lives of the animators a little easier

68
00:02:48,290 --> 00:02:50,612
through decisions and work done to improve

69
00:02:50,712 --> 00:02:52,092
the process of content creation

70
00:02:52,152 --> 00:02:53,293
during the production of Just Cause 4.

71
00:02:55,014 --> 00:02:56,615
And I wanted to make sure that no matter the position

72
00:02:56,635 --> 00:02:58,576
that you are in, whether it be a small studio,

73
00:02:58,796 --> 00:03:00,357
large studio, or maybe just yourself,

74
00:03:00,657 --> 00:03:02,178
that you can take back a few things with you

75
00:03:02,718 --> 00:03:05,059
and without the need of a programmer or some special tech,

76
00:03:05,259 --> 00:03:06,660
do anything that I presented to you

77
00:03:06,960 --> 00:03:09,381
as you don't always have the luxury of programming support

78
00:03:09,521 --> 00:03:11,903
or an army of tech artists or tech animators by your side.

79
00:03:13,152 --> 00:03:15,113
I also wanted to make sure that this talk was accessible

80
00:03:15,153 --> 00:03:16,113
for any level of knowledge.

81
00:03:16,733 --> 00:03:18,113
Because of this, I'll probably go over things

82
00:03:18,153 --> 00:03:21,014
that some of you may already know or have done yourselves

83
00:03:21,594 --> 00:03:23,075
in order to better help those who may not know

84
00:03:23,115 --> 00:03:24,155
about those particular topics.

85
00:03:24,755 --> 00:03:25,935
This is even more prominent when I get

86
00:03:25,955 --> 00:03:27,136
into motion builder specifics

87
00:03:27,176 --> 00:03:28,596
because of the greater lack of support

88
00:03:28,616 --> 00:03:30,236
that you find out there compared to, say, Maya.

89
00:03:31,597 --> 00:03:32,357
Slight heads up, though.

90
00:03:32,897 --> 00:03:34,677
This talk is about to be a bit of a hodgepodge

91
00:03:34,717 --> 00:03:35,978
because I have some odds and ends

92
00:03:36,018 --> 00:03:38,018
that I do want to share among some of the bigger tasks,

93
00:03:38,498 --> 00:03:40,539
so hopefully you don't mind a bit of random tips or tricks

94
00:03:40,599 --> 00:03:41,799
mixed in with pipeline and workflow.

95
00:03:45,090 --> 00:03:47,192
In an effort to keep this talk as accessible as possible,

96
00:03:47,833 --> 00:03:49,214
I want to make sure I define some terms

97
00:03:49,334 --> 00:03:51,876
because I found that in practicing this talk,

98
00:03:51,916 --> 00:03:53,718
a few different disciplines across the studio

99
00:03:53,758 --> 00:03:54,859
weren't quite sure what they were.

100
00:03:54,879 --> 00:03:57,201
I had animators asking me what JSON was

101
00:03:57,281 --> 00:03:59,003
and programmers telling me that I don't need

102
00:03:59,023 --> 00:04:00,204
to explain what JSON is.

103
00:04:00,704 --> 00:04:02,866
I'm just going to lay this all out here for all of you.

104
00:04:04,308 --> 00:04:07,190
So DCC refers to Digital Content Creation Application,

105
00:04:07,230 --> 00:04:09,552
and for this talk, the DCCs that I will be mentioning

106
00:04:09,613 --> 00:04:10,593
are Maya and MotionBuilder.

107
00:04:11,515 --> 00:04:13,157
Mobu is shorthand for motion builder.

108
00:04:13,918 --> 00:04:16,600
JSON stands for JavaScript Object Notation,

109
00:04:17,020 --> 00:04:19,783
but simply put, it's a language-independent data format

110
00:04:19,903 --> 00:04:21,704
that lets you store data to be accessed

111
00:04:21,744 --> 00:04:23,386
in a very straightforward and logical manner.

112
00:04:23,806 --> 00:04:25,428
If you're aware of what a dictionary is in coding,

113
00:04:25,588 --> 00:04:28,110
JSON looks and behaves very similarly on the surface.

114
00:04:29,171 --> 00:04:32,734
Headless refers to running Maya in standalone mode,

115
00:04:32,874 --> 00:04:34,516
which means that you're using full-on Maya

116
00:04:34,576 --> 00:04:36,638
in all of its features, but it runs in the background

117
00:04:36,658 --> 00:04:38,479
without actually opening up its visual component.

118
00:04:39,383 --> 00:04:41,745
Baking and plotting, as animators and tech animators

119
00:04:41,785 --> 00:04:43,205
should already know, is the process

120
00:04:43,226 --> 00:04:45,667
of converting animation data to key frames on every frame.

121
00:04:46,487 --> 00:04:48,348
Since this term is different between applications,

122
00:04:48,889 --> 00:04:50,149
I just want to make sure that everyone knows

123
00:04:50,169 --> 00:04:52,190
that baking is the term for this in Maya,

124
00:04:52,570 --> 00:04:54,231
and plotting is the term for that in MotionBuilder.

125
00:04:55,612 --> 00:04:58,013
TA in this case is short for technical animator.

126
00:04:58,974 --> 00:05:00,375
Mocap is short for motion capture.

127
00:05:00,855 --> 00:05:02,716
And when I say JC3 or JC4,

128
00:05:02,956 --> 00:05:05,117
I mean Just Cause 3 or Just Cause 4, respectively.

129
00:05:07,551 --> 00:05:08,532
Now that you know those key terms,

130
00:05:09,113 --> 00:05:10,615
here's a brief overview of what's to come

131
00:05:10,695 --> 00:05:11,636
over the course of this talk.

132
00:05:13,118 --> 00:05:15,441
I'm going to examine the two main DCC packages

133
00:05:15,461 --> 00:05:17,223
that we used, Maya and MotionBuilder.

134
00:05:17,864 --> 00:05:19,025
This includes what we were working with

135
00:05:19,065 --> 00:05:20,246
from the JC3 pipeline,

136
00:05:20,567 --> 00:05:22,109
and what we did differently for JC4.

137
00:05:22,529 --> 00:05:23,771
Additions made to that pipeline,

138
00:05:23,851 --> 00:05:25,072
and the tasks that we tried to automate

139
00:05:25,092 --> 00:05:25,793
as much as possible.

140
00:05:27,595 --> 00:05:28,876
And speaking of automation, I think

141
00:05:28,916 --> 00:05:30,437
it's worth looking at the batching process that

142
00:05:30,457 --> 00:05:31,277
was set up at the studio.

143
00:05:31,837 --> 00:05:34,459
A standalone UI was created that allowed us to quickly set up

144
00:05:34,519 --> 00:05:37,480
customized batch scripts for any tool or process we had in Maya.

145
00:05:40,001 --> 00:05:42,563
Finally, I'll end up by going over our cutscene tools

146
00:05:42,743 --> 00:05:44,664
and how we set up the content for running the pipeline,

147
00:05:45,104 --> 00:05:46,424
as well as get a little in-depth on how

148
00:05:46,444 --> 00:05:48,445
the actual transferring of content between Maya

149
00:05:48,485 --> 00:05:49,546
and MotionBuilder was achieved.

150
00:05:53,023 --> 00:05:55,125
Now in order to better understand a bit about my job

151
00:05:55,165 --> 00:05:57,627
at Avalanche Studios, it's important to define the role

152
00:05:57,667 --> 00:05:59,108
of a technical animator at the studio,

153
00:05:59,528 --> 00:06:01,710
as every studio within the entire game development world

154
00:06:01,750 --> 00:06:03,371
seems to have a bit of a different definition

155
00:06:03,451 --> 00:06:05,953
for what a tech animator or even a tech artist should be.

156
00:06:06,654 --> 00:06:08,335
To illustrate this better, I've thrown some buzzwords

157
00:06:08,375 --> 00:06:09,236
for you here up on the screen.

158
00:06:11,136 --> 00:06:13,758
And the tech animators at our studio, all at the very least,

159
00:06:13,918 --> 00:06:15,059
should know a little bit of everything

160
00:06:15,239 --> 00:06:17,301
and have proven the ability to pick up new unknowns

161
00:06:17,501 --> 00:06:18,842
and very quickly adapt and learn.

162
00:06:19,623 --> 00:06:21,645
For myself alone, I've dug into everything involved

163
00:06:21,665 --> 00:06:23,306
with the animation process to some degree.

164
00:06:24,127 --> 00:06:26,008
I've built a ton of Python-based tools and scripts,

165
00:06:26,609 --> 00:06:28,630
supported both the gameplay and cutscene teams,

166
00:06:28,991 --> 00:06:31,152
dug into state machines, in-editor content,

167
00:06:31,633 --> 00:06:33,614
and have worked with each and every department in some way,

168
00:06:33,674 --> 00:06:35,576
from the vehicle team, AI designers,

169
00:06:35,636 --> 00:06:37,397
graphics programmers, almost everyone.

170
00:06:38,335 --> 00:06:40,257
Because of this, a TA at our studio

171
00:06:40,317 --> 00:06:42,038
needs to be ready to roll with the punches at any moment.

172
00:06:42,658 --> 00:06:44,340
They also need to be able to solve the overall

173
00:06:44,360 --> 00:06:46,581
major problem, which is how will we maintain

174
00:06:46,761 --> 00:06:49,443
so much content when we are limited in our time

175
00:06:49,563 --> 00:06:50,144
and personnel?

176
00:06:51,465 --> 00:06:53,206
Another aspect of being a TA at Avalanche

177
00:06:53,666 --> 00:06:57,349
is that each project utilizes DCCs and workflows

178
00:06:57,389 --> 00:06:58,189
in a bit different way.

179
00:06:59,310 --> 00:07:01,532
Now this leads me to the question for JC4 specifically,

180
00:07:02,332 --> 00:07:03,333
Maya or MotionBuilder.

181
00:07:04,788 --> 00:07:06,770
While we were mainly using Maya for Just Cause 3,

182
00:07:07,310 --> 00:07:09,252
we did have some tools created during development

183
00:07:09,292 --> 00:07:11,714
that allowed for animators to push an animation from Maya

184
00:07:11,774 --> 00:07:14,276
into Mobu and also take an animation from Mobu

185
00:07:14,336 --> 00:07:15,577
and bring that back into Maya.

186
00:07:16,257 --> 00:07:17,658
However, this was not extensive enough

187
00:07:17,698 --> 00:07:19,020
to have MotionBuilder be anything

188
00:07:19,080 --> 00:07:21,782
other than a supplemental tool as opposed to a standalone.

189
00:07:22,442 --> 00:07:24,123
As a Maya guy, it did take me a while

190
00:07:24,163 --> 00:07:25,903
to really appreciate what MotionBuilder could do,

191
00:07:26,363 --> 00:07:28,203
but now I do realize that the things it does well

192
00:07:28,243 --> 00:07:30,284
compared to Maya, it does really, really well.

193
00:07:30,844 --> 00:07:32,804
I've also seen firsthand some passionate debates

194
00:07:32,824 --> 00:07:35,104
between folks on which one is the superior product.

195
00:07:35,545 --> 00:07:38,065
You'd actually be amazed at how heated they actually get.

196
00:07:39,385 --> 00:07:41,686
Just kind of an anecdote, I made a Twitter poll recently

197
00:07:42,366 --> 00:07:44,506
while prepping for this talk to kind of get a gauge

198
00:07:44,546 --> 00:07:47,987
on what people use, and the results were pretty staggering

199
00:07:48,027 --> 00:07:49,687
at how much Maya is loved.

200
00:07:50,487 --> 00:07:52,389
But if you actually go back and check this thread,

201
00:07:52,650 --> 00:07:54,191
there's some really, really heavy

202
00:07:54,271 --> 00:07:55,412
MotionBuilder lovers there,

203
00:07:55,433 --> 00:07:58,716
especially if you see Brad Clark.

204
00:07:58,956 --> 00:08:01,379
He's always up on MotionBuilder.

205
00:08:02,500 --> 00:08:03,641
You should check out this thread

206
00:08:03,681 --> 00:08:05,363
if you wanna see kind of the debate that goes on.

207
00:08:06,404 --> 00:08:08,246
So, when asked by our MotionBuilder,

208
00:08:09,801 --> 00:08:10,381
Why not both?

209
00:08:11,502 --> 00:08:13,623
It did almost seem like a death sentence to say yes

210
00:08:13,743 --> 00:08:15,643
to building up a pipeline that could truly support

211
00:08:15,703 --> 00:08:18,385
two DCCs, considering at the time there was only

212
00:08:18,405 --> 00:08:21,786
one tech animator, myself, and six animators to support

213
00:08:21,826 --> 00:08:23,847
in two pretty different pieces of software.

214
00:08:24,567 --> 00:08:27,088
But our team was pretty split up on preference

215
00:08:27,388 --> 00:08:30,370
and expertise, so I decided it was more beneficial

216
00:08:30,410 --> 00:08:32,230
to allow them to all work the way that they wanted to

217
00:08:32,270 --> 00:08:34,571
and were comfortable with, considering the lack of time

218
00:08:34,611 --> 00:08:36,032
that we actually had to complete the project.

219
00:08:37,058 --> 00:08:38,960
especially since we were dealing with so many different factors

220
00:08:38,980 --> 00:08:40,121
that worked better in one or the other.

221
00:08:41,722 --> 00:08:43,444
Since many other studios out there do, in fact,

222
00:08:43,604 --> 00:08:44,905
use both MotionBuilder and Maya,

223
00:08:45,266 --> 00:08:47,488
we knew that building up this pipeline wasn't a crazy idea,

224
00:08:47,768 --> 00:08:49,350
but the challenge would be to develop something

225
00:08:49,390 --> 00:08:51,932
that was robust enough with our lack of people power.

226
00:08:54,414 --> 00:08:56,516
Now, in order to try and explain how overloaded the team

227
00:08:56,556 --> 00:08:59,119
actually was in working with a AAA open world title

228
00:08:59,159 --> 00:09:00,120
such as Just Cause 4,

229
00:09:00,560 --> 00:09:02,102
I do want to start off with a few quick facts.

230
00:09:02,977 --> 00:09:04,258
On the gameplay side of animation,

231
00:09:04,458 --> 00:09:05,918
we had six animators to support.

232
00:09:06,538 --> 00:09:08,399
And no, the one and a half tech animators

233
00:09:08,419 --> 00:09:10,579
isn't like a King Solomon cut the baby in half thing.

234
00:09:11,960 --> 00:09:14,580
That's just me quantifying that I was the only tech animator

235
00:09:14,600 --> 00:09:15,901
for the first few years of the project.

236
00:09:16,521 --> 00:09:19,441
And we brought on TA help a little bit later on.

237
00:09:20,202 --> 00:09:23,563
About a year, year and a half left in the project.

238
00:09:24,830 --> 00:09:27,471
In the end, we had around 7,200 unique animations,

239
00:09:27,631 --> 00:09:30,051
and among six animators, that's quite daunting to manage.

240
00:09:30,671 --> 00:09:32,952
It equates to about 1,200 animations per animator

241
00:09:32,992 --> 00:09:33,872
for the entire project,

242
00:09:34,532 --> 00:09:37,573
very roughly 2.7 animations per working day

243
00:09:37,633 --> 00:09:39,573
over the course of roughly two years,

244
00:09:39,633 --> 00:09:40,753
which is kind of the amount

245
00:09:40,793 --> 00:09:41,954
of actual production time we had.

246
00:09:42,474 --> 00:09:44,254
Now factor that in with the amount of time necessary

247
00:09:44,274 --> 00:09:46,494
for things like polish, XNs capturing,

248
00:09:46,654 --> 00:09:47,555
throwaway R&D work,

249
00:09:47,995 --> 00:09:50,655
and meetings that everyone loves to be part of.

250
00:09:52,519 --> 00:09:54,681
Now, as far as preference for those six animators,

251
00:09:54,941 --> 00:09:57,363
we had one person who was 100% MotionBuilder,

252
00:09:58,103 --> 00:10:00,225
never touched Maya, one person who was Maya,

253
00:10:00,525 --> 00:10:01,426
never touched MotionBuilder,

254
00:10:01,726 --> 00:10:03,748
and the other four were sort of a mix in between.

255
00:10:06,130 --> 00:10:07,150
As far as the pipeline goes,

256
00:10:07,511 --> 00:10:08,792
we did have to follow this structure,

257
00:10:09,072 --> 00:10:10,653
which I know that many studios who utilize

258
00:10:10,693 --> 00:10:12,735
both MotionBuilder and Maya actually do follow.

259
00:10:14,696 --> 00:10:16,898
You start with MotionBuilder to handle any sort of mocap data

260
00:10:17,098 --> 00:10:19,120
using the tools it has, such as animation stitching,

261
00:10:19,340 --> 00:10:21,321
pinning, and the take system for organizing content.

262
00:10:22,337 --> 00:10:24,800
You then move that content over to Maya from animation,

263
00:10:24,840 --> 00:10:25,620
polish, and finaling.

264
00:10:26,041 --> 00:10:27,622
And then from Maya, you export to your game.

265
00:10:28,303 --> 00:10:30,585
In our case, since we did have an animator that only used

266
00:10:30,605 --> 00:10:33,008
MotionBuilder, he would stay in MotionBuilder until he was

267
00:10:33,048 --> 00:10:34,089
ready to export to the game.

268
00:10:34,509 --> 00:10:37,112
And from there, I had a process set up that would

269
00:10:37,132 --> 00:10:40,255
allow him to pass his content through Maya when exporting.

270
00:10:40,935 --> 00:10:42,637
And we needed to do this to make sure that all of the

271
00:10:42,677 --> 00:10:45,219
correctives and the custom rig features got picked up before

272
00:10:45,259 --> 00:10:46,160
they got exported to the game.

273
00:10:47,001 --> 00:10:48,422
Now, keep in mind that we were not using

274
00:10:48,463 --> 00:10:50,284
any sort of runtime animation or rigging,

275
00:10:50,585 --> 00:10:52,266
so it was extra important to make sure

276
00:10:52,286 --> 00:10:54,468
that we stream everything through Maya on export

277
00:10:54,508 --> 00:10:55,770
to ensure that quality control.

278
00:10:55,790 --> 00:11:00,614
All right, so let us dig into Maya.

279
00:11:02,291 --> 00:11:04,592
I need to think about what we already had from JC3,

280
00:11:04,932 --> 00:11:06,333
what we needed to do for JC4

281
00:11:06,453 --> 00:11:07,853
that would get us to where we needed to go.

282
00:11:08,654 --> 00:11:10,674
We already had many basic tools that you probably expect

283
00:11:10,694 --> 00:11:12,115
to have in a AAA game pipeline,

284
00:11:12,615 --> 00:11:14,616
but after working with them for an entire project cycle,

285
00:11:14,976 --> 00:11:16,757
we were able to pinpoint the pros and cons,

286
00:11:16,977 --> 00:11:18,037
figuring out what to improve on.

287
00:11:18,938 --> 00:11:20,858
Matching parent spaces and IK, FK limbs,

288
00:11:21,159 --> 00:11:22,219
as well as setting up constraints

289
00:11:22,259 --> 00:11:23,500
have been very standard for years,

290
00:11:23,900 --> 00:11:25,000
but how could we improve them

291
00:11:25,180 --> 00:11:27,041
or even use them a little differently than before?

292
00:11:27,641 --> 00:11:29,462
Did the tools we have overcomplicate things?

293
00:11:30,322 --> 00:11:32,743
In the case of foot planting, animators on JC3

294
00:11:32,783 --> 00:11:35,664
had to manually tag the content when this was occurring.

295
00:11:35,884 --> 00:11:36,684
How could we automate that?

296
00:11:38,065 --> 00:11:39,685
How about all those scripts and random tools

297
00:11:39,725 --> 00:11:41,806
that animators find online, install or use,

298
00:11:42,166 --> 00:11:43,487
and then they just end up breaking Maya

299
00:11:43,507 --> 00:11:45,407
for all the tech animators and it's a joy to fix?

300
00:11:47,288 --> 00:11:48,748
There could have been a better way to handle that

301
00:11:48,789 --> 00:11:50,189
and essentially animator-proof things.

302
00:11:51,853 --> 00:11:53,733
There were also attachment tools that would help set up

303
00:11:53,773 --> 00:11:55,034
weapons and props for animators,

304
00:11:55,414 --> 00:11:57,174
but they ended up being so cumbersome

305
00:11:57,314 --> 00:11:58,674
with too many buttons and options

306
00:11:58,754 --> 00:11:59,875
that we actually just got rid of them.

307
00:12:00,655 --> 00:12:02,475
Animators tended to have their own workflows

308
00:12:02,535 --> 00:12:05,416
and set up attachments on their own ways,

309
00:12:05,576 --> 00:12:07,337
and a lot of this was in part to outside tools

310
00:12:07,357 --> 00:12:08,857
that they had found or just processes

311
00:12:08,877 --> 00:12:10,217
that they were so used to that

312
00:12:10,357 --> 00:12:11,437
I didn't really have to worry about that.

313
00:12:13,178 --> 00:12:14,878
We also had a file browser for the animators

314
00:12:14,898 --> 00:12:17,159
where they could find and open Maya files from within Maya,

315
00:12:17,559 --> 00:12:19,239
as well as multi-select files and folders

316
00:12:19,279 --> 00:12:20,520
for batch exporting animation.

317
00:12:22,943 --> 00:12:25,765
Finally, a tool from Maya to MotionBuilder and back to Maya

318
00:12:25,785 --> 00:12:27,666
did exist, but it was very limited,

319
00:12:27,726 --> 00:12:29,787
and we didn't really have a good system to transfer multiple

320
00:12:29,827 --> 00:12:30,648
takes back and forth.

321
00:12:34,637 --> 00:12:36,158
Now just visualizing some of this right now,

322
00:12:36,818 --> 00:12:38,438
we had a lot of those processes broken down

323
00:12:38,478 --> 00:12:40,518
into one button clicks for JC3,

324
00:12:40,838 --> 00:12:42,799
thinking that it would be easy and awesome for hotkeying,

325
00:12:42,899 --> 00:12:44,699
but in many places this really wasn't efficient.

326
00:12:45,399 --> 00:12:47,100
This did allow for a few things like

327
00:12:47,220 --> 00:12:48,520
space and IKFK matching,

328
00:12:49,200 --> 00:12:50,760
to have the ability to be used as hotkeys,

329
00:12:51,000 --> 00:12:52,761
but the physical UI was sort of a nightmare

330
00:12:52,881 --> 00:12:53,841
and a hassle to navigate.

331
00:12:53,861 --> 00:12:56,682
All of our tools also had their own dedicated UI window,

332
00:12:56,702 --> 00:12:57,902
which was a pain to keep track of

333
00:12:57,942 --> 00:12:59,302
as well as organize visually.

334
00:13:00,304 --> 00:13:02,207
In addition to these tools, it was sort of the Wild West

335
00:13:02,247 --> 00:13:04,171
when animators started to download these third party

336
00:13:04,211 --> 00:13:06,495
tools and install them themselves, or create random

337
00:13:06,515 --> 00:13:08,077
shelf buttons for Mel and Python scripts.

338
00:13:09,343 --> 00:13:12,406
Going back a slide, we did have animator-organized third-party

339
00:13:12,426 --> 00:13:15,588
tools, but they were completely unsupported by tech animation.

340
00:13:16,229 --> 00:13:18,411
Essentially, we gave the authority to one animator

341
00:13:18,431 --> 00:13:19,572
who oversaw this process.

342
00:13:20,093 --> 00:13:21,954
He used the network folder to add scripts to,

343
00:13:22,415 --> 00:13:24,316
and then called them in a custom user setup file

344
00:13:24,336 --> 00:13:25,397
that any animator could grab.

345
00:13:26,358 --> 00:13:27,739
It worked well enough, but it wasn't really

346
00:13:27,779 --> 00:13:30,101
something that I could oversee or easily quality check.

347
00:13:30,542 --> 00:13:32,504
So because of this, all of our supported as well as

348
00:13:32,564 --> 00:13:33,344
unsupported tools.

349
00:13:34,600 --> 00:13:36,521
came together like that shoebox full of cables

350
00:13:36,561 --> 00:13:38,242
and wall chargers that you keep in the closet

351
00:13:38,282 --> 00:13:39,803
just in case you might need them someday.

352
00:13:41,584 --> 00:13:44,245
Now, for Just Cause 4, instead of trying to add more,

353
00:13:44,645 --> 00:13:46,326
the focus was to see where we could scale back.

354
00:13:47,066 --> 00:13:48,067
Like those constraint tools,

355
00:13:48,107 --> 00:13:49,287
what else didn't we actually need?

356
00:13:49,647 --> 00:13:50,628
What needed a restructure?

357
00:13:50,968 --> 00:13:52,889
What tools needed some serious code refactoring?

358
00:13:53,859 --> 00:13:56,080
When it came down to it, we almost started from scratch

359
00:13:56,120 --> 00:13:56,681
on many things.

360
00:13:57,321 --> 00:13:59,182
There was also a lot of refactoring

361
00:13:59,282 --> 00:14:01,083
and some decisions made to either completely get rid

362
00:14:01,103 --> 00:14:03,284
of things that were barely if ever used,

363
00:14:03,704 --> 00:14:06,225
as well as to push to automate as many things as possible.

364
00:14:07,506 --> 00:14:08,367
This led to the main goal.

365
00:14:08,767 --> 00:14:10,368
Instead of trying to solve every little issue,

366
00:14:10,668 --> 00:14:12,469
we would give more power to the animators.

367
00:14:13,369 --> 00:14:14,990
We realized that we didn't have to try

368
00:14:15,050 --> 00:14:16,371
and make every little thing a button

369
00:14:16,491 --> 00:14:17,971
or try to solve every single problem.

370
00:14:18,412 --> 00:14:20,012
We also realized that the animators in the end

371
00:14:20,052 --> 00:14:20,953
didn't want to work that way.

372
00:14:21,473 --> 00:14:22,874
So simplicity became the goal.

373
00:14:24,642 --> 00:14:27,764
Now, in order to reach our goal of simplicity,

374
00:14:27,844 --> 00:14:29,905
we started focusing on efficiency, speed,

375
00:14:30,205 --> 00:14:31,726
user preference, and customization.

376
00:14:33,427 --> 00:14:35,148
The first thing we did was tie all of our tools

377
00:14:35,188 --> 00:14:37,409
into one main toolbar that can be set and customized

378
00:14:37,449 --> 00:14:38,750
as the animators themselves want.

379
00:14:39,330 --> 00:14:41,211
After watching other GDC talks or checking out

380
00:14:41,331 --> 00:14:43,633
online resources, I realized that many other studios

381
00:14:44,033 --> 00:14:46,234
tie their tools into one specific animation toolbar.

382
00:14:46,674 --> 00:14:48,035
So I wanted to set out to do that first.

383
00:14:48,695 --> 00:14:50,036
but also give it a bit of something extra.

384
00:14:50,776 --> 00:14:52,736
If the animation tools are open on Maya close,

385
00:14:53,177 --> 00:14:54,517
they open when you reopen Maya.

386
00:14:55,177 --> 00:14:56,617
They can be docked or undocked.

387
00:14:56,978 --> 00:14:58,798
You can pop out tools if you only need one,

388
00:14:59,098 --> 00:15:00,558
but don't want the entire UI in your way.

389
00:15:01,239 --> 00:15:02,019
If you like the UI,

390
00:15:02,059 --> 00:15:03,439
but you don't really want to use certain tools,

391
00:15:03,459 --> 00:15:04,980
you can completely hide them from the tool set.

392
00:15:05,460 --> 00:15:07,140
You can also rearrange the order of the tools

393
00:15:07,180 --> 00:15:08,401
if you use one more than others

394
00:15:08,461 --> 00:15:09,661
and prefer it at the top of the stack.

395
00:15:14,308 --> 00:15:15,969
Instead of having animators click a ton of buttons

396
00:15:16,009 --> 00:15:18,249
or use convoluted interfaces to set attachments,

397
00:15:18,689 --> 00:15:21,030
for JC4 we created a simple one-button

398
00:15:21,070 --> 00:15:23,750
attach-detach system that could easily set up

399
00:15:23,790 --> 00:15:25,350
specific attachments, as you see here,

400
00:15:25,730 --> 00:15:26,751
with a parachute and wingsuit.

401
00:15:27,571 --> 00:15:28,811
Underneath the hood of this process,

402
00:15:29,151 --> 00:15:30,651
it detects which rig is active,

403
00:15:31,151 --> 00:15:32,552
and then when the attach function is run,

404
00:15:32,672 --> 00:15:34,112
just sets up the active rig accordingly.

405
00:15:34,892 --> 00:15:36,652
Further, thanks to the power of space switching,

406
00:15:37,073 --> 00:15:38,913
once attached, you can quickly set specific

407
00:15:39,013 --> 00:15:40,653
as to how you wanted things like handles

408
00:15:40,713 --> 00:15:41,993
or buckles to follow the character.

409
00:15:44,680 --> 00:15:47,523
Now, IKFK and space matching are pretty standard these days.

410
00:15:47,924 --> 00:15:50,086
So what we set out to do, instead of reinventing all of

411
00:15:50,106 --> 00:15:52,709
this, was to evaluate and refactor the way that we ran

412
00:15:52,729 --> 00:15:55,992
these tools to create quicker times for both running IKFK

413
00:15:56,012 --> 00:15:57,033
matching and space switching.

414
00:15:58,014 --> 00:16:00,256
Single frame matching almost happened instantaneously now.

415
00:16:00,597 --> 00:16:02,539
And if you wanted to match for the entire timeline, it really

416
00:16:02,559 --> 00:16:03,440
only took a matter of seconds.

417
00:16:04,343 --> 00:16:06,563
Now something that was introduced back on JC3 to our rigs,

418
00:16:07,203 --> 00:16:09,024
the further enhanced quicker speeds of space,

419
00:16:09,304 --> 00:16:10,844
and further enhanced by the quicker speeds

420
00:16:10,944 --> 00:16:12,545
of space matching, was what we called

421
00:16:12,565 --> 00:16:13,405
the driver root control.

422
00:16:13,905 --> 00:16:16,686
You can see it here being that giant brownish colored

423
00:16:16,746 --> 00:16:18,026
control above the character's head,

424
00:16:18,346 --> 00:16:19,066
when it's not selected,

425
00:16:19,926 --> 00:16:21,267
that is controlling the entire character.

426
00:16:21,947 --> 00:16:23,747
Now say you want to animate the entire character

427
00:16:23,787 --> 00:16:25,788
here dangling, with both arms and legs in IK.

428
00:16:26,468 --> 00:16:28,349
You can easily place the driver root to the position

429
00:16:28,369 --> 00:16:31,291
you want to rotate them, set the space for hands, feet,

430
00:16:31,331 --> 00:16:33,293
and the cog control to this driver root,

431
00:16:33,733 --> 00:16:35,154
animate it, say, tilting left and right,

432
00:16:35,514 --> 00:16:37,315
and then space match all of these controls

433
00:16:37,856 --> 00:16:40,097
at once back to world space, where you can then

434
00:16:40,157 --> 00:16:41,338
polish each one individually.

435
00:16:42,019 --> 00:16:43,960
I kind of like to call this a locator on steroids,

436
00:16:44,200 --> 00:16:46,402
because it functions the same way that many animators do

437
00:16:46,442 --> 00:16:48,543
like to use locators to bake and transfer animation.

438
00:16:49,864 --> 00:16:51,665
But having it built into the rig and ready to work

439
00:16:51,705 --> 00:16:53,106
with the space matching gives you

440
00:16:53,126 --> 00:16:54,746
immediate out-of-the-box functionality

441
00:16:54,786 --> 00:16:56,907
the second you reference a character into your scene.

442
00:16:59,348 --> 00:17:01,129
We also introduced rotation order matching.

443
00:17:01,810 --> 00:17:04,091
The rigs themselves were set up with best practice rotation

444
00:17:04,151 --> 00:17:06,292
orders on all controls, but adding the ability

445
00:17:06,332 --> 00:17:09,053
for an animator to change the rotate orders

446
00:17:09,093 --> 00:17:11,294
of the controls on the fly gave them even more control.

447
00:17:19,599 --> 00:17:22,063
We also gave the animators the ability to create custom

448
00:17:22,103 --> 00:17:24,426
selection sets on the fly that were also

449
00:17:24,486 --> 00:17:25,587
simple to make hot keyable.

450
00:17:26,308 --> 00:17:28,271
Multi-select the controls you'd like to group together,

451
00:17:28,832 --> 00:17:30,654
click Create Selection Set, and that's it.

452
00:17:31,215 --> 00:17:33,819
Now you've got a custom group of controls that you can grab

453
00:17:33,859 --> 00:17:34,259
instantly.

454
00:17:40,800 --> 00:17:42,422
Even more power was granted to the animators

455
00:17:42,482 --> 00:17:44,243
to be able to set up their own custom pick walking

456
00:17:44,283 --> 00:17:44,964
for anything.

457
00:17:45,784 --> 00:17:48,006
On JC3, we did have pick walking on the character rigs,

458
00:17:48,126 --> 00:17:48,546
but that's it.

459
00:17:49,327 --> 00:17:50,348
In order to set those settings,

460
00:17:50,368 --> 00:17:51,789
we would have to hard code it into the rig.

461
00:17:52,309 --> 00:17:53,770
This time around, the character rigs

462
00:17:53,950 --> 00:17:55,351
did have default pick walk settings,

463
00:17:55,672 --> 00:17:57,113
but the animators could customize this

464
00:17:57,273 --> 00:17:58,154
any way that they would like,

465
00:17:58,534 --> 00:18:00,956
and also add pick walking to whatever else they may choose.

466
00:18:08,101 --> 00:18:10,363
We also added a custom scripts tab to the tool set.

467
00:18:11,004 --> 00:18:13,706
That tangled mess of third-party scripts and snippets

468
00:18:14,187 --> 00:18:16,509
were turned into official, unofficial scripts.

469
00:18:17,430 --> 00:18:20,112
The TAs can add third-party tools officially

470
00:18:20,172 --> 00:18:21,333
and per force for deployment,

471
00:18:21,834 --> 00:18:23,575
and animators can locally add anything

472
00:18:23,595 --> 00:18:25,277
that they want to their Maya scripts folder,

473
00:18:25,577 --> 00:18:28,019
and then magically populate that tool nice and neatly here.

474
00:18:28,740 --> 00:18:29,901
There's no need to override

475
00:18:30,001 --> 00:18:31,543
or create a custom user setup file.

476
00:18:31,743 --> 00:18:33,865
It's all here for you to pretty much use out of the box.

477
00:18:34,902 --> 00:18:36,603
All those random Mel and Python scripts

478
00:18:36,623 --> 00:18:38,045
that were now nice and neatly organized

479
00:18:38,745 --> 00:18:40,187
were also labeled in a way that anyone

480
00:18:40,267 --> 00:18:41,348
could see and understand.

481
00:18:43,130 --> 00:18:45,372
All custom scripts have an auto-create shelf button.

482
00:18:49,416 --> 00:18:51,518
The ability to hide and show what you would want

483
00:18:51,898 --> 00:18:53,160
just like our official tools.

484
00:19:02,810 --> 00:19:05,991
And a customized help pop-up that includes a unique command,

485
00:19:10,913 --> 00:19:12,134
which through the use of metadata,

486
00:19:12,514 --> 00:19:17,076
create custom runtime commands that, when sourced,

487
00:19:17,236 --> 00:19:18,957
to allow for the animators to easily apply

488
00:19:18,977 --> 00:19:20,197
to hotkeys and marking menus.

489
00:19:23,338 --> 00:19:24,839
Now, I want to show you one specific example

490
00:19:24,859 --> 00:19:26,480
of workflow improvements that actually took away

491
00:19:26,500 --> 00:19:28,561
the power from the animators, but it was not power

492
00:19:28,601 --> 00:19:29,341
that they really wanted.

493
00:19:29,961 --> 00:19:30,681
So here's one of those.

494
00:19:32,715 --> 00:19:35,897
On JC3, any time we wanted to grab footstep data from a file,

495
00:19:36,037 --> 00:19:38,679
we needed to have an animator go and manually tag any time

496
00:19:38,699 --> 00:19:39,640
a footstep occurred.

497
00:19:40,180 --> 00:19:42,481
They had a tool that easily allowed them to scrub through

498
00:19:42,501 --> 00:19:45,663
an animation and click left plant, right plant, left plant,

499
00:19:45,984 --> 00:19:47,405
right plant, so on and so forth.

500
00:19:48,225 --> 00:19:51,327
You can see here that the red and blue foot placement

501
00:19:51,367 --> 00:19:54,129
markers that are getting set for all the frames where a

502
00:19:54,169 --> 00:19:54,909
foot will hit the ground.

503
00:19:55,914 --> 00:19:57,995
While this is a pretty simple and easy process to do,

504
00:19:58,476 --> 00:20:00,537
it's really monotonous and it takes up a lot of time.

505
00:20:01,037 --> 00:20:03,418
That's time that takes away from, say, actually animating.

506
00:20:04,419 --> 00:20:06,620
On JC4, I wanted to take this out of their hands

507
00:20:06,720 --> 00:20:08,281
and automate that process completely.

508
00:20:09,802 --> 00:20:11,303
All it took was a pretty small script.

509
00:20:11,803 --> 00:20:13,444
Now, don't worry about trying to read this.

510
00:20:13,604 --> 00:20:14,765
I'm gonna break it down for you.

511
00:20:15,045 --> 00:20:16,446
I just wanted to kind of give you an idea

512
00:20:16,486 --> 00:20:18,407
of how small that script actually was.

513
00:20:20,488 --> 00:20:21,629
The first thing that we need to do

514
00:20:22,049 --> 00:20:23,790
is find the distance between the ankle joints

515
00:20:23,830 --> 00:20:24,950
within consecutive frames.

516
00:20:25,550 --> 00:20:27,691
For example, let's say you're looking at a run cycle

517
00:20:27,931 --> 00:20:29,172
and the left leg of a character

518
00:20:29,192 --> 00:20:30,652
is swinging back down to hit the ground.

519
00:20:31,372 --> 00:20:33,173
On frame seven, you grab the position

520
00:20:33,233 --> 00:20:34,794
of the left ankle joint in world space,

521
00:20:35,394 --> 00:20:36,774
then you grab the world space position

522
00:20:36,834 --> 00:20:38,355
of the left ankle joint on frame eight.

523
00:20:39,135 --> 00:20:42,336
You can then calculate the distance apart

524
00:20:42,516 --> 00:20:44,657
that the ankle joint has traveled from frame to frame.

525
00:20:46,118 --> 00:20:47,578
Here's a simple function that can return

526
00:20:47,598 --> 00:20:49,359
the difference in distance of two points.

527
00:20:52,750 --> 00:20:55,173
Here, we're just saying that we want to evaluate

528
00:20:55,253 --> 00:20:56,574
the left and right foot joints,

529
00:20:56,814 --> 00:20:59,377
and then depending on an animation being a walk or a run,

530
00:20:59,938 --> 00:21:01,459
there is a predetermined threshold

531
00:21:01,519 --> 00:21:03,341
that is slightly different based on the fact

532
00:21:03,421 --> 00:21:05,183
that the distance each foot moves,

533
00:21:05,483 --> 00:21:07,645
depending on the gait of the character locomotion,

534
00:21:07,745 --> 00:21:08,386
is pretty different.

535
00:21:09,347 --> 00:21:10,548
If you look at a run cycle,

536
00:21:10,868 --> 00:21:12,710
the ankle joint will have a further distance

537
00:21:12,770 --> 00:21:14,252
between frames than a walk cycle.

538
00:21:15,133 --> 00:21:16,674
So what did this threshold actually do?

539
00:21:18,015 --> 00:21:19,596
We know that when the foot is planted,

540
00:21:19,936 --> 00:21:22,457
its position doesn't change a whole lot from frame to frame.

541
00:21:23,337 --> 00:21:25,698
This value simply says, do not bother even looking

542
00:21:25,718 --> 00:21:27,159
at anything greater than this.

543
00:21:27,959 --> 00:21:29,700
It was sort of a hacky but efficient way

544
00:21:29,740 --> 00:21:31,420
to filter out any non-obvious,

545
00:21:32,340 --> 00:21:33,821
any obvious non-planted values,

546
00:21:34,341 --> 00:21:36,822
as sometimes those can otherwise mistakenly get tagged

547
00:21:37,222 --> 00:21:39,143
by the character's leg movement when not planted.

548
00:21:43,004 --> 00:21:43,965
Now here's the bulk of the script

549
00:21:43,985 --> 00:21:45,265
that takes these factors into account.

550
00:21:46,376 --> 00:21:48,598
We analyze twice here, one time for each foot.

551
00:21:49,178 --> 00:21:50,920
The analyzation goes through the timeline,

552
00:21:51,440 --> 00:21:53,502
finds the current value of the world space position

553
00:21:53,642 --> 00:21:54,682
of the foot on each frame,

554
00:21:55,063 --> 00:21:57,204
and compares that value with the world space position

555
00:21:57,244 --> 00:21:58,445
of the foot from the previous frame.

556
00:21:59,326 --> 00:22:01,748
If a distance value is less than the frame before,

557
00:22:02,148 --> 00:22:04,250
as well as less than the frame after that,

558
00:22:04,670 --> 00:22:06,432
we tag the frame the foot is planted.

559
00:22:07,332 --> 00:22:09,154
By tagging the smallest value of movement

560
00:22:09,214 --> 00:22:10,975
in a particular range of values,

561
00:22:11,195 --> 00:22:13,237
we assume that the script has found a planted foot.

562
00:22:14,557 --> 00:22:16,559
For walks, we also added a filter

563
00:22:16,579 --> 00:22:19,381
that made sure a foot wasn't too drastically rotated up

564
00:22:19,441 --> 00:22:22,823
and down or twisted, since the slower nature of walks

565
00:22:23,163 --> 00:22:25,365
meant that the distances of the position of the feet

566
00:22:25,705 --> 00:22:27,206
weren't as drastic from frame to frame.

567
00:22:27,867 --> 00:22:30,148
So surveying the pitch and roll of the foot

568
00:22:30,268 --> 00:22:32,250
gave us another good indication that a foot was actually

569
00:22:32,310 --> 00:22:33,791
planted and flat on the ground.

570
00:22:36,302 --> 00:22:38,385
Another really nice thing that we could do from here is take

571
00:22:38,445 --> 00:22:41,029
the footstep data, and depending on if an animation

572
00:22:41,089 --> 00:22:43,834
is a walk or a run, determine when you'd hear a cloth sound.

573
00:22:44,615 --> 00:22:46,578
The character almost always hits the point where their

574
00:22:46,618 --> 00:22:48,161
legs cross each other after a step.

575
00:22:50,207 --> 00:22:52,207
For runs, this was two frames after a step.

576
00:22:52,547 --> 00:22:53,788
And for walks, it was five.

577
00:22:54,608 --> 00:22:57,109
Thanks to this consistent behavior, we can automatically

578
00:22:57,169 --> 00:22:58,510
gather cloth sound triggers.

579
00:22:58,870 --> 00:23:01,251
And not only are we gathering footstep data, but cloth sound

580
00:23:01,271 --> 00:23:04,652
data, this made the audio team extra happy, as they do not

581
00:23:04,692 --> 00:23:06,452
have to worry about manually tagging all

582
00:23:06,472 --> 00:23:07,153
of this in the game.

583
00:23:08,533 --> 00:23:10,594
They were already benefiting from the automatically tagged

584
00:23:10,614 --> 00:23:12,495
footsteps, as was VFX as well.

585
00:23:13,395 --> 00:23:15,996
So hey, we just made the animators, the sound team, and

586
00:23:16,016 --> 00:23:17,676
the VFX team pretty damn happy.

587
00:23:20,319 --> 00:23:22,981
To the surprise of the animation, VFX, audio teams,

588
00:23:23,201 --> 00:23:26,043
and myself, this method had a really good success rate.

589
00:23:26,303 --> 00:23:28,985
I'd say about 85% to 90% of footsteps and cloth

590
00:23:29,025 --> 00:23:30,746
were tagged correctly just because of this.

591
00:23:31,787 --> 00:23:34,929
The rest was manually fixed, as sometimes extra footstep tags

592
00:23:35,009 --> 00:23:37,691
snuck their way in, or a tag here or there was missed.

593
00:23:38,291 --> 00:23:40,573
But the amount of work to do that small bit of cleanup

594
00:23:40,653 --> 00:23:42,174
was a lot less than actually going

595
00:23:42,194 --> 00:23:44,255
through every single animation and tagging those footsteps

596
00:23:44,295 --> 00:23:44,655
by hand.

597
00:23:49,195 --> 00:23:50,356
Now let's see this in action.

598
00:23:50,376 --> 00:23:52,277
Here's a run.

599
00:23:52,297 --> 00:23:55,438
And by quickly scrubbing,

600
00:23:55,759 --> 00:23:57,319
we can see where the foot is planted.

601
00:23:57,339 --> 00:24:00,361
The right foot there is planted on about eight or nine,

602
00:24:00,841 --> 00:24:03,482
the left on about 17 or 18,

603
00:24:04,203 --> 00:24:06,364
right on 28, so on and so forth.

604
00:24:07,785 --> 00:24:09,105
Now, we run the script,

605
00:24:09,345 --> 00:24:10,686
and it cycles through the animation

606
00:24:11,046 --> 00:24:12,247
as it evaluates each foot.

607
00:24:13,228 --> 00:24:14,309
When it is done evaluating,

608
00:24:14,409 --> 00:24:16,410
we get our auto-generated footstep tags.

609
00:24:17,170 --> 00:24:19,752
Let's actually check and see how accurate this really is.

610
00:24:24,974 --> 00:24:27,215
We got a right footstep on eight or nine,

611
00:24:27,235 --> 00:24:28,956
a left footstep on about 18 or 19,

612
00:24:29,016 --> 00:24:29,656
a right on 28 or 29,

613
00:24:29,716 --> 00:24:30,096
a left on 37, 38,

614
00:24:30,577 --> 00:24:30,957
right on 47, 48,

615
00:24:31,157 --> 00:24:31,657
and a left on 57.

616
00:24:31,697 --> 00:24:32,938
So it's pretty accurate.

617
00:24:43,074 --> 00:24:44,976
And just for fun, let's evaluate four feet

618
00:24:45,096 --> 00:24:46,157
and run this script on a llama,

619
00:24:46,317 --> 00:24:47,878
which is the newest of the animal heroes

620
00:24:47,918 --> 00:24:48,899
in the Just Cause series.

621
00:24:56,885 --> 00:24:58,927
All right, here's our auto-generated data now.

622
00:25:02,490 --> 00:25:06,973
There's a right rear footstep about six or seven there.

623
00:25:06,993 --> 00:25:10,236
A left rear about eight or nine.

624
00:25:11,429 --> 00:25:16,452
Right front about 11 and left front is around 12.

625
00:25:16,572 --> 00:25:18,514
All right, that's pretty good.

626
00:25:20,775 --> 00:25:22,316
Ooh, quick moving over to Mobu now.

627
00:25:23,377 --> 00:25:24,758
Here's what we had custom on JC3.

628
00:25:24,798 --> 00:25:27,379
Yeah, nothing custom.

629
00:25:28,488 --> 00:25:32,111
While we did have a way to send Maya content to MotionBuilder

630
00:25:32,511 --> 00:25:34,933
and then MotionBuilder to Maya, that entire process

631
00:25:34,973 --> 00:25:37,415
on the MotionBuilder side of things only involved making

632
00:25:37,475 --> 00:25:39,317
sure that you save your MotionBuilder file with the

633
00:25:39,357 --> 00:25:41,939
take that you want to transfer over to Maya saved as the

634
00:25:41,999 --> 00:25:42,440
active one.

635
00:25:43,180 --> 00:25:46,143
The only Maya-specific tools that we really had were just

636
00:25:46,183 --> 00:25:48,505
the Maya tools that grabbed FBX files and transferred

637
00:25:48,545 --> 00:25:54,750
animation onto our Maya rigs, or would bake down and export

638
00:25:54,790 --> 00:25:56,531
animation content in Maya out of FBX.

639
00:25:59,727 --> 00:26:01,888
Our goal for MotionBuilder was to actually make some tools.

640
00:26:02,709 --> 00:26:04,470
Now, we did actually have some animation tools

641
00:26:04,490 --> 00:26:06,651
that my counterparts in Sweden had developed over the years,

642
00:26:07,132 --> 00:26:09,913
but there was nothing that existed for project

643
00:26:09,954 --> 00:26:11,815
and workflow-specific needs for us on Just Cause 4.

644
00:26:13,796 --> 00:26:16,118
So now we were developing actual MotionBuilder tools

645
00:26:16,258 --> 00:26:18,739
and allowing animators to use it as more of a standalone tool.

646
00:26:19,120 --> 00:26:21,221
We wanted to extend the default HIK rigs

647
00:26:21,401 --> 00:26:23,162
to allow for more from within MotionBuilder

648
00:26:23,182 --> 00:26:25,264
in terms of things such as retaining root motion data,

649
00:26:25,704 --> 00:26:27,425
weapon attach data, and any other reference

650
00:26:27,485 --> 00:26:29,086
aside from the default HIK controls.

651
00:26:30,352 --> 00:26:32,272
We also needed to drastically improve the process

652
00:26:32,312 --> 00:26:34,193
of sending content from MotionBuilder to Maya.

653
00:26:34,953 --> 00:26:36,994
It became necessary to send multiple takes

654
00:26:37,034 --> 00:26:39,355
from within a MotionBuilder file over to Maya,

655
00:26:39,575 --> 00:26:40,955
which then handled animation content

656
00:26:41,035 --> 00:26:42,876
on a one-animation-per-file structure.

657
00:26:43,536 --> 00:26:44,857
In addition to multiple takes,

658
00:26:45,137 --> 00:26:49,178
we also had to send full cinematic sequences

659
00:26:49,218 --> 00:26:50,158
from MotionBuilder to Maya,

660
00:26:50,498 --> 00:26:52,559
just as we had to do the same from Maya to MotionBuilder.

661
00:26:53,159 --> 00:26:54,380
Now I'll detail that a bit more later

662
00:26:54,400 --> 00:26:55,640
when I actually talk about cutscenes.

663
00:26:59,438 --> 00:27:02,079
What we had on JC3 was the basic default HIK rig

664
00:27:02,099 --> 00:27:03,099
with no additional features.

665
00:27:03,719 --> 00:27:05,619
What we needed for JC4 was to add extensions

666
00:27:05,640 --> 00:27:07,720
to the HIK rigs so that we could pull that data,

667
00:27:08,080 --> 00:27:09,641
retain it, and modify if necessary.

668
00:27:10,461 --> 00:27:11,781
We actually start off with Maya,

669
00:27:12,021 --> 00:27:14,162
we actually start off in Maya with the A pose character,

670
00:27:14,642 --> 00:27:16,122
T pose it, and characterize it.

671
00:27:16,763 --> 00:27:17,943
Now this is our base to work on.

672
00:27:18,223 --> 00:27:19,583
From here we can either build a Maya rig

673
00:27:19,683 --> 00:27:21,264
or an HIK rig from within Maya.

674
00:27:22,964 --> 00:27:24,705
With the MotionBuilder rig, we actually took that

675
00:27:24,945 --> 00:27:26,665
and brought it into MotionBuilder as an FBX.

676
00:27:27,946 --> 00:27:29,487
And that FBX that was generated,

677
00:27:30,228 --> 00:27:31,709
that was brought into MotionBuilder

678
00:27:31,789 --> 00:27:33,250
has sort of an auto build function

679
00:27:33,270 --> 00:27:34,411
that we run in MotionBuilder

680
00:27:34,771 --> 00:27:36,032
that creates the rig extensions

681
00:27:36,152 --> 00:27:37,433
to things like the root bone there

682
00:27:37,494 --> 00:27:38,995
that you see, it's a yellow arrow,

683
00:27:39,475 --> 00:27:40,776
and a bunch of key reference joints.

684
00:27:41,677 --> 00:27:42,778
Possibly you can see here,

685
00:27:42,858 --> 00:27:44,939
I put a cursor on the right hand's

686
00:27:46,280 --> 00:27:47,682
plus sign cross-licking thing,

687
00:27:47,702 --> 00:27:48,702
there's a left side one,

688
00:27:49,103 --> 00:27:50,764
and there's one on the chest for aim target

689
00:27:50,784 --> 00:27:52,886
where animators could animate the...

690
00:27:54,230 --> 00:27:56,051
motion data for where the character was pointed.

691
00:27:56,892 --> 00:27:58,913
So now they actually had controls on these things to

692
00:27:59,053 --> 00:28:01,075
animate those in MotionBuilder, and it's easy to

693
00:28:01,155 --> 00:28:02,836
actually port that data over to Maya.

694
00:28:05,465 --> 00:28:08,568
Now the team has a custom MotionBuilder rig that they're animating with.

695
00:28:09,489 --> 00:28:12,411
Now that the team has a custom MotionBuilder rig that they're animating with, they need

696
00:28:12,431 --> 00:28:14,173
to be able to push that content over to Maya.

697
00:28:14,813 --> 00:28:18,557
On JC3, animators would have to save their MotionBuilder file with the take that they

698
00:28:18,577 --> 00:28:20,398
want to transfer to Maya as the active take.

699
00:28:20,879 --> 00:28:25,082
Since animators were utilizing Mobu much more this time around, and especially for the animator

700
00:28:25,122 --> 00:28:27,985
on our team that only used MotionBuilder, this really wasn't going to cut it.

701
00:28:28,995 --> 00:28:31,497
Some files could contain as many takes such as this one.

702
00:28:32,137 --> 00:28:34,959
So we needed to make a way to quickly get any and all content

703
00:28:34,999 --> 00:28:35,719
out of MotionBuilder.

704
00:28:36,560 --> 00:28:38,501
We developed this UI that allows you to pick and choose

705
00:28:38,521 --> 00:28:41,122
whatever animations you want, which then get plotted down

706
00:28:41,162 --> 00:28:43,664
and completely stripped down so that the result is a simple

707
00:28:43,704 --> 00:28:47,746
skeleton that is very simply able to be quickly brought

708
00:28:47,786 --> 00:28:49,447
into Maya and transferred to the Maya rigs.

709
00:28:52,509 --> 00:28:54,570
Now it may not be a ton, but these changes did make

710
00:28:54,610 --> 00:28:56,691
MotionBuilder much more accessible as a standalone

711
00:28:56,731 --> 00:28:57,471
tool for the team.

712
00:28:58,585 --> 00:29:00,286
Also, I don't have it listed, I don't have it

713
00:29:02,667 --> 00:29:04,428
shown here, rather, but I have it listed.

714
00:29:04,689 --> 00:29:06,710
There was a batch tool for the Xsens content

715
00:29:06,730 --> 00:29:07,730
to bring into MotionBuilder,

716
00:29:08,151 --> 00:29:09,471
but it's literally just a button

717
00:29:09,512 --> 00:29:11,393
that kinda asks what directory you wanna import,

718
00:29:11,473 --> 00:29:13,554
so for sake of visually not being too pleasing

719
00:29:13,614 --> 00:29:15,355
or interesting, I'm just listing it here

720
00:29:15,375 --> 00:29:16,856
to tell you that we did have a batch way

721
00:29:16,876 --> 00:29:19,398
to bring in Xsens data to our animation,

722
00:29:19,718 --> 00:29:20,558
or to MotionBuilder, rather.

723
00:29:22,868 --> 00:29:25,371
Now, this section isn't quite as long as the others

724
00:29:25,431 --> 00:29:26,652
because it was at the core,

725
00:29:27,153 --> 00:29:28,815
but it was really at the core of everything.

726
00:29:28,835 --> 00:29:31,738
I'm gonna restart that sentence.

727
00:29:32,199 --> 00:29:34,081
This section isn't quite as long as the others,

728
00:29:34,321 --> 00:29:36,003
but it really at the core of everything

729
00:29:36,083 --> 00:29:37,945
was making everything quicker and more automated

730
00:29:37,985 --> 00:29:39,547
for both the tech animators and animators.

731
00:29:41,788 --> 00:29:44,169
This batch processing tool became the central core to

732
00:29:44,209 --> 00:29:46,410
running heavy processes into and out of Maya.

733
00:29:47,211 --> 00:29:48,431
Everything was streamed through here.

734
00:29:49,192 --> 00:29:51,633
The way this works is that the user selects a batch process

735
00:29:51,673 --> 00:29:53,594
from a list of JSON files that we've made for them.

736
00:29:54,334 --> 00:29:56,055
This could be an animation export or a

737
00:29:56,095 --> 00:29:57,116
Mobutu Maya transfer.

738
00:29:57,956 --> 00:30:00,417
When they select a file, any options pertaining to that

739
00:30:00,477 --> 00:30:01,838
file show up on the right.

740
00:30:02,498 --> 00:30:04,459
The user can tweak those settings as necessary.

741
00:30:05,000 --> 00:30:07,821
When you load a script, any directories with files that

742
00:30:07,861 --> 00:30:09,862
pertain to the script also pop up on the left.

743
00:30:10,753 --> 00:30:13,354
When you select a folder, the files within that directory

744
00:30:13,394 --> 00:30:15,575
show up for you to multi-select and run the batch on.

745
00:30:16,416 --> 00:30:18,277
When you run a batch, a tab pops up

746
00:30:18,317 --> 00:30:20,498
with the UI that runs a Maya standalone thread

747
00:30:20,578 --> 00:30:21,859
and batches your content headless.

748
00:30:22,639 --> 00:30:25,500
You are able to run different processes at multiple times

749
00:30:25,680 --> 00:30:27,822
at once without ever actually opening up Maya.

750
00:30:28,422 --> 00:30:30,643
This is optimal for computer performance and speed

751
00:30:30,663 --> 00:30:31,463
of data processing.

752
00:30:32,044 --> 00:30:34,605
It's also very optimal for being 100% animator-friendly,

753
00:30:34,965 --> 00:30:36,386
as they do not have to worry about anything

754
00:30:36,406 --> 00:30:38,107
from command line and could potentially

755
00:30:38,147 --> 00:30:39,828
customize these batch options themselves.

756
00:30:44,172 --> 00:30:45,052
Now, quick look under the hood.

757
00:30:45,632 --> 00:30:47,253
We have a very simple JSON dictionary

758
00:30:47,753 --> 00:30:49,334
where we state some rules and list out

759
00:30:49,394 --> 00:30:50,535
all of the options for the user.

760
00:30:51,275 --> 00:30:53,456
In this case, we're looking at our Maya animation exporter.

761
00:30:54,516 --> 00:30:56,217
We tell this file what file types to look for,

762
00:30:57,318 --> 00:30:58,858
which directory to look for them in,

763
00:30:59,959 --> 00:31:02,140
which batch process to actually run,

764
00:31:03,160 --> 00:31:05,181
the version of Maya standalone to use,

765
00:31:06,262 --> 00:31:07,903
and all the options that we wanna list here.

766
00:31:10,561 --> 00:31:12,482
Now using as an example animation exporting,

767
00:31:12,962 --> 00:31:15,063
these options let you create things such as toggles

768
00:31:15,423 --> 00:31:17,144
for maybe turning on or off the generation

769
00:31:17,184 --> 00:31:18,425
of a debug animation file,

770
00:31:18,865 --> 00:31:20,926
or a line edit for customizing what you want

771
00:31:20,946 --> 00:31:22,447
to call the Perforce change list

772
00:31:22,467 --> 00:31:23,928
that all your animations get added to.

773
00:31:25,008 --> 00:31:27,429
We set the type of UI widget, what to label it,

774
00:31:27,689 --> 00:31:30,011
the default behavior, and the command that we will use

775
00:31:30,091 --> 00:31:31,571
to pass the state of each option

776
00:31:31,611 --> 00:31:34,093
through the Python batch file when running the process.

777
00:31:36,225 --> 00:31:39,651
which then magically populates your options here,

778
00:31:39,731 --> 00:31:42,456
as seen a minute ago, whenever you hit that select,

779
00:31:42,656 --> 00:31:44,539
and whenever you hit that select batch script option,

780
00:31:45,160 --> 00:31:46,342
you can choose your specific batch.

781
00:31:47,379 --> 00:31:50,081
You actually see that here I have a few batch scripts

782
00:31:50,661 --> 00:31:51,642
that I've set up for myself.

783
00:31:52,162 --> 00:31:53,723
Some of these are actually official scripts

784
00:31:53,743 --> 00:31:54,784
that were checked into Perforce.

785
00:31:55,644 --> 00:31:56,485
Some really aren't.

786
00:31:56,685 --> 00:31:59,206
There's like a cut scene AnimExport02 and 03 here

787
00:31:59,266 --> 00:32:00,607
that were just kind of local things

788
00:32:00,647 --> 00:32:02,068
that I quickly set up for testing.

789
00:32:02,608 --> 00:32:04,529
But essentially you can either do anything

790
00:32:04,569 --> 00:32:06,330
for yourself locally or do something

791
00:32:06,350 --> 00:32:07,751
that you could check in and allow animators

792
00:32:07,811 --> 00:32:08,932
or any other person to use.

793
00:32:10,957 --> 00:32:12,818
So in the end, thanks to this nifty batch tool,

794
00:32:13,198 --> 00:32:15,100
not only was I able to set up anything for myself

795
00:32:15,140 --> 00:32:17,062
really fast to start churning out lots of content

796
00:32:17,082 --> 00:32:17,862
through Headless Maya,

797
00:32:18,283 --> 00:32:20,184
it opened up a ton of time-saving possibilities

798
00:32:20,224 --> 00:32:21,025
for the animators, too,

799
00:32:21,405 --> 00:32:22,846
and not just for export animations.

800
00:32:23,507 --> 00:32:26,089
In fact, even though our pipeline called for content

801
00:32:26,109 --> 00:32:28,831
to be passed through Maya before export to the game,

802
00:32:29,312 --> 00:32:31,634
our MotionBuilder-only animator used this batch tool

803
00:32:31,674 --> 00:32:34,916
in conjunction with the FBX takes batch exporting tool

804
00:32:34,936 --> 00:32:36,177
that we had within MotionBuilder,

805
00:32:36,618 --> 00:32:39,200
and he never once actually opened up Maya, not once.

806
00:32:40,052 --> 00:32:42,673
We just had the batch script set up for him to select all his

807
00:32:42,753 --> 00:32:46,295
FBX exports here, and then the tool would go through each file,

808
00:32:46,595 --> 00:32:48,276
throw the animation onto the applicable rig,

809
00:32:48,716 --> 00:32:49,657
and export that to game.

810
00:32:50,517 --> 00:32:51,878
And now just with the few months ago,

811
00:32:51,958 --> 00:32:54,339
MotionBuilder 19 coming out with a headless mode,

812
00:32:54,359 --> 00:32:56,840
I plan on actually upgrading this

813
00:32:56,900 --> 00:32:58,521
to adding headless MotionBuilder into the mix.

814
00:32:59,461 --> 00:33:01,522
A world where we're pushing MotionBuilder content

815
00:33:01,642 --> 00:33:03,843
to and from Maya, exporting it out to the game,

816
00:33:04,484 --> 00:33:07,405
all without the need of having to open up any visual DCC

817
00:33:07,605 --> 00:33:08,305
is really a world that I want.

818
00:33:11,130 --> 00:33:12,230
All right, on to cinematics.

819
00:33:16,811 --> 00:33:18,432
We had two full-time team members

820
00:33:18,572 --> 00:33:21,113
as far as managing the actual animation and camera content

821
00:33:21,133 --> 00:33:21,433
goes.

822
00:33:22,233 --> 00:33:24,934
One of these was myself, and the other was our cinematic artist.

823
00:33:25,834 --> 00:33:28,235
In the end, we had about 56 unique sequences.

824
00:33:28,955 --> 00:33:31,556
This number also doesn't include our single camera, single cut,

825
00:33:31,716 --> 00:33:34,217
in-game scenes that were used to quickly set up missions.

826
00:33:35,697 --> 00:33:37,458
Our smallest sequence had about five shots

827
00:33:37,478 --> 00:33:39,158
that made it up, with our largest sequence

828
00:33:39,178 --> 00:33:39,698
having up to 60 cuts.

829
00:33:41,387 --> 00:33:43,809
While all characters and cutscenes were bipedal humans,

830
00:33:44,009 --> 00:33:46,831
we had 12 unique rigs of various heights and sizes

831
00:33:47,152 --> 00:33:48,993
to manage and make sure that they were

832
00:33:49,013 --> 00:33:50,554
correctly used in shots.

833
00:33:52,476 --> 00:33:54,418
Between all of these characters and sequences,

834
00:33:56,199 --> 00:33:59,582
we had about 65 minutes of actual cutscene footage.

835
00:34:00,523 --> 00:34:02,605
Yes, sorry, that was a phrase in the question.

836
00:34:02,725 --> 00:34:04,426
We did have 65 minutes of cutscene footage.

837
00:34:06,468 --> 00:34:08,549
Now actual hands-on production for cut scenes

838
00:34:08,589 --> 00:34:10,870
didn't even start until about halfway through the project,

839
00:34:11,270 --> 00:34:13,431
and we literally didn't have actual content to work with

840
00:34:13,471 --> 00:34:15,152
until about six months before we went gold.

841
00:34:15,552 --> 00:34:16,793
So that's, uh-oh.

842
00:34:19,014 --> 00:34:21,415
Looking at the process, this may not seem too daunting

843
00:34:21,435 --> 00:34:22,696
when you look at what we were working with,

844
00:34:22,796 --> 00:34:24,537
because it's fairly straightforward on the surface.

845
00:34:25,277 --> 00:34:28,258
In creating JC4, like any of our other AAA projects

846
00:34:28,298 --> 00:34:30,620
at Avalanche Studios, we work with outside vendors

847
00:34:30,660 --> 00:34:32,340
for all motion capture and content solving

848
00:34:32,380 --> 00:34:33,321
when it comes to cinematics.

849
00:34:34,712 --> 00:34:36,912
To start the process, we have a narrative team at the studio,

850
00:34:37,252 --> 00:34:38,573
as well as a cinematic artist who

851
00:34:38,593 --> 00:34:41,653
worked on the story and dialogue, which then,

852
00:34:41,893 --> 00:34:44,074
those ideas were transferred into storyboards and animatics

853
00:34:44,114 --> 00:34:46,155
to try and lock down things like pacing and camera work.

854
00:34:48,615 --> 00:34:50,796
Once this was nailed down and our actors signed on,

855
00:34:50,956 --> 00:34:51,476
we had a shoot.

856
00:34:52,256 --> 00:34:54,677
The shoot involved both our Avalanche Studios cinematics

857
00:34:54,717 --> 00:34:57,358
team and our vendor working together with the actors

858
00:34:57,438 --> 00:34:59,998
to best replicate all the factors that our animatics had

859
00:35:00,038 --> 00:35:00,658
tried to prove out.

860
00:35:02,589 --> 00:35:04,610
When the shoot was done, the vendor provided us

861
00:35:04,711 --> 00:35:06,592
with all the takes that were shot during the shoot,

862
00:35:07,352 --> 00:35:08,873
and our team at the studio went through

863
00:35:09,013 --> 00:35:11,055
and selected which content that they wanted to use

864
00:35:11,215 --> 00:35:12,456
and have the vendor solve for us.

865
00:35:13,797 --> 00:35:15,438
After this, there was some back and forth

866
00:35:15,498 --> 00:35:17,319
between us and the vendor to make sure

867
00:35:17,339 --> 00:35:18,920
that our character rigs were set up nicely

868
00:35:18,980 --> 00:35:20,161
for things like good proportions

869
00:35:20,201 --> 00:35:21,422
based on the actor proportions,

870
00:35:22,422 --> 00:35:23,883
and then the content was solved on our rigs,

871
00:35:24,344 --> 00:35:25,965
polished, and delivered to us

872
00:35:26,045 --> 00:35:28,686
as baked-down skeletal animation in the FBX data format.

873
00:35:30,695 --> 00:35:32,997
Each shot was delivered as a separate FBX file

874
00:35:33,037 --> 00:35:34,878
with camera, characters, vehicles, weapons,

875
00:35:34,918 --> 00:35:35,838
and props for that shot.

876
00:35:38,000 --> 00:35:39,781
The content was then brought straight into Maya,

877
00:35:40,181 --> 00:35:41,382
transferred to our Maya rigs,

878
00:35:42,462 --> 00:35:43,803
and then exported to the game from there.

879
00:35:44,343 --> 00:35:45,164
So we're done, right?

880
00:35:46,125 --> 00:35:46,965
In a perfect world, yeah.

881
00:35:47,425 --> 00:35:49,927
But making games is hardly a perfect process, right?

882
00:35:52,348 --> 00:35:53,909
Going back to that gameplay pipeline

883
00:35:54,069 --> 00:35:56,731
we were already working with, we had this pipeline.

884
00:35:57,751 --> 00:35:59,693
Once we started getting cinematic content from our vendor,

885
00:36:00,980 --> 00:36:02,821
we added that content in a similar fashion

886
00:36:02,861 --> 00:36:04,583
to what we had already done with the gameplay content.

887
00:36:05,283 --> 00:36:06,864
This transfer is quite easy to do.

888
00:36:07,285 --> 00:36:09,226
We set up a batch script that takes all the delivered

889
00:36:09,246 --> 00:36:10,727
baked down skeletal mocap data,

890
00:36:11,248 --> 00:36:13,189
and since the skeletons are a perfect one-to-one match

891
00:36:13,209 --> 00:36:14,370
with the Maya control rigs,

892
00:36:14,730 --> 00:36:16,852
we transfer and bake that animation over quite easily.

893
00:36:20,535 --> 00:36:21,715
Now of course, since we're making games,

894
00:36:22,055 --> 00:36:23,755
random emergencies or unknown needs

895
00:36:23,815 --> 00:36:24,736
may come from out of nowhere.

896
00:36:25,576 --> 00:36:27,816
Needs that with the luxury of time and a larger team

897
00:36:27,876 --> 00:36:29,297
can sometimes be met handedly.

898
00:36:29,757 --> 00:36:31,917
But time and numbers were definitely not on our side,

899
00:36:32,457 --> 00:36:39,099
so, yeah, did not really please us to go this way.

900
00:36:39,319 --> 00:36:40,499
But for the sake of brevity,

901
00:36:40,519 --> 00:36:42,660
I'm not gonna go into a post-mortem right now

902
00:36:42,860 --> 00:36:43,740
pertaining to this issue.

903
00:36:44,200 --> 00:36:46,000
I will say that as a technical animator,

904
00:36:46,180 --> 00:36:48,381
my most important role is that of a problem solver.

905
00:36:49,201 --> 00:36:51,142
When working out any issues, the first thing you do

906
00:36:51,202 --> 00:36:53,823
is assess the situation and come up with a viable solution

907
00:36:53,883 --> 00:36:54,623
based off of that.

908
00:36:56,484 --> 00:36:59,685
So going back to our cinematic content integration process,

909
00:37:01,366 --> 00:37:02,547
we needed to be able to do this.

910
00:37:03,547 --> 00:37:05,968
After we got our content into Maya on our game-ready rigs,

911
00:37:06,488 --> 00:37:09,229
we needed a way to get our cut scenes back into Motion Builder

912
00:37:09,289 --> 00:37:11,030
to allow for dealing with changes, tweaks,

913
00:37:11,130 --> 00:37:12,491
and critical fixes or updates.

914
00:37:13,329 --> 00:37:14,369
Now some of you may be asking,

915
00:37:14,509 --> 00:37:15,730
why would you actually go backwards?

916
00:37:16,070 --> 00:37:17,130
And I get that it's not ideal.

917
00:37:17,150 --> 00:37:19,131
It's kind of why I paused a little earlier.

918
00:37:19,871 --> 00:37:21,671
But simply put, our cinematic artist

919
00:37:21,711 --> 00:37:23,392
who handled the camera work, sequence edits,

920
00:37:23,632 --> 00:37:26,132
and any cut scene setup was 100% a MotionBuilder guy. 100%.

921
00:37:27,913 --> 00:37:28,913
Just like that other animator.

922
00:37:29,833 --> 00:37:31,994
This guy did give his best try to learn Maya.

923
00:37:32,354 --> 00:37:33,654
He really did give his best effort,

924
00:37:33,774 --> 00:37:35,835
but the amount of time that it takes to make edits

925
00:37:35,915 --> 00:37:37,355
using the tools that MotionBuilder has,

926
00:37:38,035 --> 00:37:39,436
not only mention the great frame rate

927
00:37:39,496 --> 00:37:40,476
that it gives you for playback,

928
00:37:41,672 --> 00:37:43,273
Remember, animation caching in Maya

929
00:37:43,373 --> 00:37:44,454
just happened a few months ago.

930
00:37:45,154 --> 00:37:46,495
We really couldn't do what we needed to do

931
00:37:46,515 --> 00:37:48,156
without being able to take our Maya files

932
00:37:48,456 --> 00:37:50,817
with that solved motion capture data from the vendor,

933
00:37:51,137 --> 00:37:52,358
put it back in a motion builder,

934
00:37:52,618 --> 00:37:54,879
and then send that back out to Maya for final approval

935
00:37:55,239 --> 00:37:56,299
and export to the game

936
00:37:56,720 --> 00:37:58,401
once any new edits and changes were made.

937
00:38:02,422 --> 00:38:03,543
So in order to best explain

938
00:38:03,583 --> 00:38:05,044
how we tackled our cinematics workflow,

939
00:38:05,464 --> 00:38:06,965
I want to break down one of our cut scenes

940
00:38:07,205 --> 00:38:08,706
that we had put through its paces.

941
00:38:09,086 --> 00:38:10,626
So let's start by watching the full cut scene.

942
00:38:25,170 --> 00:38:27,252
Load up the truck! We're leaving in 60 seconds!

943
00:38:28,073 --> 00:38:29,154
Did you organize this ambush?

944
00:38:29,334 --> 00:38:29,574
Si.

945
00:38:30,575 --> 00:38:32,837
Most of the stuff we recovered is standard black ammunitions.

946
00:38:35,339 --> 00:38:36,440
But I also found some of these.

947
00:38:36,460 --> 00:38:39,283
We're not sure what they do.

948
00:38:39,763 --> 00:38:43,887
We didn't want to mess with them.

949
00:38:43,927 --> 00:38:45,989
Um, there's a bunch more left in the truck.

950
00:38:46,730 --> 00:38:47,811
Good. Fine, Sohento.

951
00:38:48,411 --> 00:38:49,192
These could be useful.

952
00:38:50,093 --> 00:38:50,893
Anyone have a screwdriver?

953
00:38:55,889 --> 00:38:58,210
Are you adding that to your grappler? No jodas.

954
00:38:58,650 --> 00:39:00,231
You have to make do with whatever you find.

955
00:39:00,631 --> 00:39:01,471
What are you going to do with that?

956
00:39:01,491 --> 00:39:08,153
Que chimba!

957
00:39:10,574 --> 00:39:11,875
Black Hand are coming, Sargento!

958
00:39:12,355 --> 00:39:14,555
Mierda! Listo, I'll drive the truck.

959
00:39:14,776 --> 00:39:16,536
I've got a chopper nearby waiting to extract this.

960
00:39:17,316 --> 00:39:18,377
Make sure you get there in one piece.

961
00:39:18,397 --> 00:39:21,218
Gracias, parcero.

962
00:39:28,461 --> 00:39:31,582
All right, so that cut scene shows our main hero, Rico,

963
00:39:32,322 --> 00:39:34,503
meeting with one of his supporting pals, Sargento,

964
00:39:35,124 --> 00:39:37,264
who gives him the part that he adds to his grappling device

965
00:39:37,284 --> 00:39:39,325
that allows the player to use the airlifter in-game

966
00:39:39,385 --> 00:39:41,706
to pretty much turn anything into a giant flying mass.

967
00:39:42,466 --> 00:39:44,807
This particular cut scene has a good mix of characters,

968
00:39:44,867 --> 00:39:46,088
vehicles, weapons, and props,

969
00:39:46,668 --> 00:39:48,549
so we're managing a lot of different types of content.

970
00:39:51,430 --> 00:39:53,611
To start, let's look at the process that we need to take

971
00:39:53,811 --> 00:39:55,791
in order to get our Maya content into MotionBuilder.

972
00:39:57,648 --> 00:39:59,390
We have our Maya files shot by shot,

973
00:39:59,750 --> 00:40:01,371
but MotionBuilder doesn't really work this way.

974
00:40:02,872 --> 00:40:04,653
We needed to take these individual shots

975
00:40:04,793 --> 00:40:07,275
and transfer them into MotionBuilder in one long sequence

976
00:40:07,575 --> 00:40:09,016
so that they can be set up properly

977
00:40:09,076 --> 00:40:10,317
for editing in story mode.

978
00:40:12,159 --> 00:40:13,540
So I love JSON.

979
00:40:13,940 --> 00:40:15,741
I use it all the time to store data settings

980
00:40:15,861 --> 00:40:17,002
for anything and everything I can.

981
00:40:17,542 --> 00:40:18,743
It's everywhere in our pipelines.

982
00:40:18,763 --> 00:40:20,945
It's probably in yours too, even if you don't know it.

983
00:40:22,246 --> 00:40:25,528
It is the base at which our Cinematics content workflow

984
00:40:25,588 --> 00:40:25,948
is driven.

985
00:40:27,813 --> 00:40:30,775
Using the power of JSON files to organize all of our cutscenes

986
00:40:30,875 --> 00:40:32,536
was the solution that not only bridged

987
00:40:32,576 --> 00:40:34,117
the gap between Maya and MotionBuilder,

988
00:40:34,497 --> 00:40:35,918
but it organized our content in a way

989
00:40:35,958 --> 00:40:38,280
that it's really easy to parse and locate with a simple call.

990
00:40:38,980 --> 00:40:40,981
Every cutscene had a master JSON file

991
00:40:41,001 --> 00:40:44,203
for the cutscene data, which included the scene name,

992
00:40:45,344 --> 00:40:50,347
the campaign that it was part of, all characters, props,

993
00:40:51,727 --> 00:40:52,068
shots.

994
00:40:53,713 --> 00:40:57,616
vehicles, and weapons that appear in the entire cutscene

995
00:40:57,656 --> 00:40:58,276
at any point.

996
00:41:00,237 --> 00:41:03,539
Then we had a JSON file for each separate shot that told

997
00:41:03,579 --> 00:41:05,660
us the specifics for that particular camera cut.

998
00:41:06,921 --> 00:41:10,903
We again have the campaign and scene names, the shot number,

999
00:41:12,084 --> 00:41:15,106
the characters that are actually in that cut, the

1000
00:41:15,186 --> 00:41:20,269
props in that cut, vehicles in that cut, and weapons.

1001
00:41:22,465 --> 00:41:24,586
We also have the start and end frame numbers stored.

1002
00:41:26,888 --> 00:41:28,989
Now just to better illustrate what this means for us,

1003
00:41:29,269 --> 00:41:31,110
let's just take a look at a few select shots

1004
00:41:31,130 --> 00:41:31,910
within this cut scene.

1005
00:41:33,631 --> 00:41:35,952
In the first shot, we have just Rico in this dirt bike.

1006
00:41:36,672 --> 00:41:40,734
Since there's nothing else in the scene that isn't already

1007
00:41:40,774 --> 00:41:43,456
part of the environment, only these two items are stored in

1008
00:41:43,476 --> 00:41:45,177
the JSON file for this particular shot.

1009
00:41:46,858 --> 00:41:49,139
The second shot is only Rico, so he's the only

1010
00:41:49,159 --> 00:41:49,739
thing that we store.

1011
00:41:51,977 --> 00:41:53,898
The third shot sets us back to a wide angle

1012
00:41:53,958 --> 00:41:55,299
that reintroduces the dirt bike

1013
00:41:55,839 --> 00:41:58,001
and brings Sargento into the scene with those two trucks.

1014
00:42:00,662 --> 00:42:02,483
I'm gonna skip over the fourth shot to the fifth one

1015
00:42:02,564 --> 00:42:04,245
since this shot includes a little bit of everything.

1016
00:42:05,265 --> 00:42:07,907
All four characters are seen as our three vehicles.

1017
00:42:08,007 --> 00:42:10,589
You can actually see the dirt bike

1018
00:42:10,609 --> 00:42:11,509
a little bit behind that tree.

1019
00:42:13,871 --> 00:42:14,812
That also includes a prop,

1020
00:42:15,212 --> 00:42:16,933
which is the crate in the back of the truck.

1021
00:42:17,213 --> 00:42:18,014
And if you can't tell,

1022
00:42:18,074 --> 00:42:20,295
the rebel there is holding a weapon in the middle.

1023
00:42:22,945 --> 00:42:24,527
Now in an effort to not completely force you

1024
00:42:24,547 --> 00:42:26,389
to look at code, here's what this looks like

1025
00:42:26,409 --> 00:42:27,750
in a more visually pleasing way.

1026
00:42:29,232 --> 00:42:31,174
Because we have all this finer detail

1027
00:42:31,214 --> 00:42:32,916
stored the way that we do, I don't actually

1028
00:42:32,956 --> 00:42:34,518
have to open up Maya to find out

1029
00:42:34,558 --> 00:42:36,720
what is in any given shot, which I'll say

1030
00:42:36,820 --> 00:42:38,642
is even far easier, quicker, and nicer

1031
00:42:38,662 --> 00:42:40,224
than trying to find this stuff on a spreadsheet.

1032
00:42:41,460 --> 00:42:46,786
I can also run a cutscene export, headless, in our batch tool and filter it down to only,

1033
00:42:46,846 --> 00:42:51,330
say, Sargento, because maybe we made a small rig update or added a secondary animation

1034
00:42:51,370 --> 00:42:52,151
pass on his jacket.

1035
00:42:52,671 --> 00:42:57,616
This batch process that we set up will parse every JSON file for the scene, and instead

1036
00:42:57,636 --> 00:43:01,680
of wasting time opening shots where Sargento doesn't exist to check that he's there, it

1037
00:43:01,700 --> 00:43:03,662
will immediately go straight for only the files that he's in.

1038
00:43:05,842 --> 00:43:07,802
For a small team like ours, this time savings,

1039
00:43:07,882 --> 00:43:09,322
when you think about the number of characters,

1040
00:43:09,383 --> 00:43:10,783
scenes, and shots that we're working with

1041
00:43:10,803 --> 00:43:12,143
was a huge, huge win.

1042
00:43:13,183 --> 00:43:15,224
Now, this also made it easier to shot by shot

1043
00:43:15,624 --> 00:43:17,545
deal with our Maya to Motion Builder transfer.

1044
00:43:19,005 --> 00:43:20,705
Now, let's start our content passing process

1045
00:43:20,745 --> 00:43:21,406
on the Maya side.

1046
00:43:22,166 --> 00:43:23,546
It's time to take our entire sequence

1047
00:43:23,586 --> 00:43:26,507
that is cut into multiple files in Maya

1048
00:43:26,807 --> 00:43:29,048
and stitch that all together into one giant sequence

1049
00:43:29,088 --> 00:43:30,808
of content so that it is Mobu-friendly

1050
00:43:31,148 --> 00:43:33,169
for a cinematic artist to use with the story mode

1051
00:43:33,529 --> 00:43:34,209
and camera switcher.

1052
00:43:36,082 --> 00:43:38,143
A short look into this part of script that does it for us.

1053
00:43:38,443 --> 00:43:39,264
I promise I'll go quick.

1054
00:43:40,364 --> 00:43:42,546
When we run our process, we open a fresh Maya scene.

1055
00:43:42,946 --> 00:43:44,046
Let's call this the master file.

1056
00:43:45,127 --> 00:43:47,769
We immediately start at negative 15,000 for a frame.

1057
00:43:48,249 --> 00:43:50,570
This just ensures that each individual shot

1058
00:43:50,671 --> 00:43:52,432
is having its content transferred over

1059
00:43:52,492 --> 00:43:54,013
and it doesn't trip up the shot before it.

1060
00:43:55,594 --> 00:43:56,674
Before this actually though,

1061
00:43:56,774 --> 00:43:59,056
the JSON file for the whole cut scene itself is red

1062
00:43:59,396 --> 00:44:01,457
and all cameras, characters, et cetera that exist

1063
00:44:02,017 --> 00:44:03,338
are referenced into the Maya scene.

1064
00:44:05,119 --> 00:44:07,682
And now that everything exists in the Maya file that we need,

1065
00:44:08,062 --> 00:44:10,324
we loop through all the individual JSON file shots,

1066
00:44:10,764 --> 00:44:13,187
referencing in the corresponding Maya file shot,

1067
00:44:13,927 --> 00:44:17,551
and adding all the animation data for characters,

1068
00:44:17,571 --> 00:44:19,653
weapons, et cetera, sort of in chunks.

1069
00:44:19,773 --> 00:44:22,896
So if you were to transfer that data over one by one,

1070
00:44:23,196 --> 00:44:25,558
you would kind of do it with like shot one goes here,

1071
00:44:25,618 --> 00:44:26,880
shot two goes here, shot three goes here.

1072
00:44:27,420 --> 00:44:28,821
And it's kind of stacked one after the other.

1073
00:44:32,892 --> 00:44:34,313
Once all the shots are fully transferred

1074
00:44:34,353 --> 00:44:37,355
into this master Maya file, there we go.

1075
00:44:38,075 --> 00:44:39,616
Once all shots are fully transferred

1076
00:44:39,656 --> 00:44:42,738
into this master Maya file, all keyframes are grabbed

1077
00:44:44,039 --> 00:44:47,561
and moved up to frame 101, so we're not dealing

1078
00:44:47,581 --> 00:44:49,382
with crazy negative space on the timeline.

1079
00:44:50,023 --> 00:44:52,084
You could easily just make zero your start frame,

1080
00:44:52,304 --> 00:44:54,746
but I personally like to leave frames zero to 100 open

1081
00:44:54,786 --> 00:44:56,987
in case any necessary padding might be needed.

1082
00:44:58,755 --> 00:45:00,556
Now, as you can see here, though, we have all rigs,

1083
00:45:00,676 --> 00:45:03,116
cameras, and everything else kind of nice

1084
00:45:03,257 --> 00:45:04,597
and neatly spliced into one.

1085
00:45:04,617 --> 00:45:06,717
Now, there's another script that actually

1086
00:45:06,777 --> 00:45:09,538
bakes all this animation down, cleans up everything,

1087
00:45:09,978 --> 00:45:12,699
and only makes sure that we have skin characters

1088
00:45:12,959 --> 00:45:14,980
and baked down key frames on the bones.

1089
00:45:20,641 --> 00:45:22,402
Once this file is exported to FBX,

1090
00:45:22,802 --> 00:45:24,662
it's ready for some story editing in Motion Builder.

1091
00:45:30,582 --> 00:45:33,343
So picture this, the Maya file you just saw was baked down,

1092
00:45:33,543 --> 00:45:34,523
transferred into MotionBuilder,

1093
00:45:35,243 --> 00:45:36,564
it's made its way to the cinematic artist,

1094
00:45:37,024 --> 00:45:38,664
this person's made all the necessary edits

1095
00:45:39,145 --> 00:45:41,025
to the cameras, character positions, whatever.

1096
00:45:41,605 --> 00:45:42,906
This person goes up to you and says,

1097
00:45:43,466 --> 00:45:44,627
Brian, it's ready.

1098
00:45:45,347 --> 00:45:45,887
So now we're there.

1099
00:45:47,107 --> 00:45:48,768
I just wanted to skip the whole part of his editing.

1100
00:45:50,329 --> 00:45:51,429
Here's that MotionBuilder file.

1101
00:45:52,309 --> 00:45:53,590
Since we're ready to send it back to Maya,

1102
00:45:53,730 --> 00:45:54,630
we need to split that up,

1103
00:45:55,390 --> 00:45:56,691
we need to split up every single one

1104
00:45:56,711 --> 00:45:58,671
of these individual clips that exist in Story.

1105
00:46:02,705 --> 00:46:04,926
And then we need to export them out into each individual file,

1106
00:46:05,766 --> 00:46:08,467
into individual Maya files, as per our pipeline,

1107
00:46:08,507 --> 00:46:10,728
in order for us to finish off the scene and get it in game.

1108
00:46:12,168 --> 00:46:14,429
In order to do this, we need to run some commands in Motion

1109
00:46:14,449 --> 00:46:16,389
Builder that export out data that

1110
00:46:16,429 --> 00:46:19,250
can be brought into Maya quickly and with little to no load

1111
00:46:19,290 --> 00:46:19,590
times.

1112
00:46:20,211 --> 00:46:22,911
Using the Send to Maya command or opening an FBX straight up

1113
00:46:22,931 --> 00:46:24,952
into Motion Builder means that you send everything

1114
00:46:25,012 --> 00:46:25,892
all at once into Maya.

1115
00:46:26,372 --> 00:46:28,153
And it's not necessarily the cleanest result,

1116
00:46:28,673 --> 00:46:29,493
so we don't really want that.

1117
00:46:30,538 --> 00:46:33,540
File sizes get really huge, as evidenced by the FBX scenes

1118
00:46:33,560 --> 00:46:34,200
here on the right.

1119
00:46:34,860 --> 00:46:37,181
And these can take forever just to open up in Maya, or

1120
00:46:37,241 --> 00:46:37,981
MotionBuilder even.

1121
00:46:38,662 --> 00:46:40,862
To avoid these long and arduous transfer times, we

1122
00:46:40,902 --> 00:46:43,403
break down the MotionBuilder scenes for transfer, then fit

1123
00:46:43,423 --> 00:46:44,544
them back together in Maya.

1124
00:46:46,444 --> 00:46:48,525
Not only do we have to break each of these clips down and

1125
00:46:48,585 --> 00:46:51,226
export them separately, but we need to make sure we do so in

1126
00:46:51,266 --> 00:46:53,627
a manner that doesn't export out large file sizes.

1127
00:46:55,308 --> 00:46:56,549
Since we're getting close to the end here,

1128
00:46:56,669 --> 00:46:58,750
I'll spare you more long code explanations

1129
00:46:58,810 --> 00:47:00,371
and just sort of briefly run through this process.

1130
00:47:01,592 --> 00:47:02,973
We first create a component list

1131
00:47:03,033 --> 00:47:03,934
for everything in the scene,

1132
00:47:04,414 --> 00:47:06,415
then gather all the start and end frame data

1133
00:47:06,515 --> 00:47:10,058
in a list for each shot.

1134
00:47:11,258 --> 00:47:13,260
Then we plot all animation to the skeletons.

1135
00:47:14,200 --> 00:47:15,001
And once we've plotted,

1136
00:47:15,081 --> 00:47:17,002
we grab the root joints of all skeletons

1137
00:47:17,142 --> 00:47:18,683
using our component list to search from.

1138
00:47:20,837 --> 00:47:23,738
Then we iterate through all of that, making sure to grab the

1139
00:47:23,778 --> 00:47:26,439
entire hierarchy of each individual skeleton as we

1140
00:47:26,499 --> 00:47:29,300
create clips per character and export out a separate file per

1141
00:47:29,320 --> 00:47:30,300
character per shot.

1142
00:47:31,540 --> 00:47:32,481
Our results look like this.

1143
00:47:32,901 --> 00:47:35,342
And include file sizes that range from mere kilobytes for

1144
00:47:35,362 --> 00:47:37,742
cameras and anywhere from about a half a megabyte to 10

1145
00:47:37,983 --> 00:47:40,303
megabytes per character, depending on the complexity of

1146
00:47:40,323 --> 00:47:41,804
the skeleton and the length of the shot.

1147
00:47:42,679 --> 00:47:44,421
Rico would happen to have the largest files

1148
00:47:45,121 --> 00:47:46,763
with background characters having less, for example.

1149
00:47:47,403 --> 00:47:49,105
This is much, much more manageable now

1150
00:47:49,465 --> 00:47:51,427
than those giant MotionBuilder files that you found.

1151
00:47:52,908 --> 00:47:54,990
These files truly contain Jeff skeletons

1152
00:47:55,030 --> 00:47:56,131
with baked animation data,

1153
00:47:56,191 --> 00:47:57,332
sort of like what you saw before

1154
00:47:57,392 --> 00:47:59,353
when we were exporting our FBXs

1155
00:47:59,394 --> 00:48:02,356
from MotionBuilder into Maya for the gameplay side.

1156
00:48:03,263 --> 00:48:04,624
They do look exactly the same as that.

1157
00:48:05,465 --> 00:48:08,547
And shot by shot, we can now open up a fresh Maya file,

1158
00:48:08,867 --> 00:48:10,668
reference in only the rigs for the assets

1159
00:48:10,708 --> 00:48:12,770
that actually exist in each specific shot.

1160
00:48:13,190 --> 00:48:14,511
And it only takes a matter of seconds

1161
00:48:14,571 --> 00:48:16,052
to reference these small files in,

1162
00:48:16,432 --> 00:48:18,293
which we then transfer the animation

1163
00:48:18,414 --> 00:48:19,374
onto the Maya rigs from.

1164
00:48:20,035 --> 00:48:21,836
Which then kind of obviously takes a bit more

1165
00:48:21,856 --> 00:48:22,897
than just mere seconds to do,

1166
00:48:23,117 --> 00:48:24,217
but it's a lot easier to do.

1167
00:48:26,979 --> 00:48:28,260
It's all streamed through the batch tool.

1168
00:48:29,400 --> 00:48:33,481
The transfer script for taking those exported pieces from MotionBuilder does all the referencing,

1169
00:48:33,802 --> 00:48:35,382
baking, and file cleanup in a snap.

1170
00:48:36,103 --> 00:48:41,225
We can process multiple shots, scenes, whatever, much more quickly than by using the default

1171
00:48:41,265 --> 00:48:42,265
built-in transfer setups.

1172
00:48:44,050 --> 00:48:45,852
I did mention earlier that Maya was necessary

1173
00:48:45,912 --> 00:48:48,314
for secondary animation policy, I believe, and here's why.

1174
00:48:49,314 --> 00:48:51,076
One awesome content tool that we had in Maya

1175
00:48:51,116 --> 00:48:52,297
was the motion generation tool.

1176
00:48:53,017 --> 00:48:54,659
It could use a number of different solvers

1177
00:48:54,699 --> 00:48:56,880
from Maya dynamics, such as spring or bounce,

1178
00:48:56,980 --> 00:48:58,322
and then take in some user settings

1179
00:48:58,722 --> 00:48:59,843
and process that based off

1180
00:48:59,883 --> 00:49:01,084
of the root motion of the characters.

1181
00:49:01,784 --> 00:49:04,646
We could batch through entire cut scenes in Maya

1182
00:49:04,706 --> 00:49:06,508
and run an auto secondary animation patch

1183
00:49:06,568 --> 00:49:07,669
on all characters very quickly.

1184
00:49:08,590 --> 00:49:10,471
Now I think our first pass maybe took about a week

1185
00:49:10,511 --> 00:49:12,553
to add secondary animation to all those cut scenes.

1186
00:49:14,439 --> 00:49:16,400
You can see here Rico's straps are not really moving,

1187
00:49:16,460 --> 00:49:18,561
mirror's here, nope, now it's moving

1188
00:49:18,841 --> 00:49:20,542
because we just applied the motion generation to it.

1189
00:49:20,562 --> 00:49:23,763
All right, the extra special thing about this tool

1190
00:49:24,163 --> 00:49:25,884
is that we can run it through a PlayBlast script

1191
00:49:25,944 --> 00:49:27,565
that we had in conjunction with Batch,

1192
00:49:27,865 --> 00:49:30,686
and we would actually get a directory of MP4 video files

1193
00:49:30,766 --> 00:49:34,067
for each Maya file shot to see the secondary animation

1194
00:49:34,128 --> 00:49:34,648
after the fact.

1195
00:49:35,008 --> 00:49:36,889
This is super useful for going in and making sure

1196
00:49:36,949 --> 00:49:38,910
that certain shots might need to be fixed up

1197
00:49:39,010 --> 00:49:40,470
or certain shots were fine after a run.

1198
00:49:43,295 --> 00:49:45,458
To wrap this all up, what we were able to accomplish

1199
00:49:45,758 --> 00:49:46,800
included better workflows.

1200
00:49:47,858 --> 00:49:49,018
more power and customization,

1201
00:49:49,038 --> 00:49:51,599
a lot more automation and less manual work,

1202
00:49:52,359 --> 00:49:55,260
a full 360-degree pipeline between Maya and Motion Builder,

1203
00:49:55,921 --> 00:49:57,961
and all this helped us churn out a ton of content

1204
00:49:57,981 --> 00:50:00,442
that we wouldn't have otherwise been possible

1205
00:50:00,622 --> 00:50:02,103
unless we had a small army to help us.

1206
00:50:02,843 --> 00:50:03,964
Now, while there are other studios

1207
00:50:03,984 --> 00:50:05,524
that have similar tools and workflows,

1208
00:50:05,964 --> 00:50:07,625
I do hope that this talk at the very least

1209
00:50:07,665 --> 00:50:09,866
gave a new perspective for those of you that are familiar,

1210
00:50:10,226 --> 00:50:11,646
and for the rest of you, I hope you've enjoyed

1211
00:50:11,686 --> 00:50:13,247
a bit of the behind-the-scenes and under-the-hood

1212
00:50:13,287 --> 00:50:14,007
that I have presented.

1213
00:50:15,493 --> 00:50:19,225
Before I really conclude, I do want to extend a huge thank you to these three guys here

1214
00:50:19,285 --> 00:50:20,369
who all helped me in some way.

1215
00:50:21,773 --> 00:50:24,094
Brad Clark, he's the co-founder of Ringing Dojo,

1216
00:50:24,554 --> 00:50:25,294
he's there on the left.

1217
00:50:25,794 --> 00:50:27,755
He was always available to help answer

1218
00:50:27,835 --> 00:50:29,796
any MotionBuilder specific questions that I had,

1219
00:50:29,976 --> 00:50:31,216
as I was pretty new in setting up

1220
00:50:31,236 --> 00:50:32,617
more advanced features in MotionBuilder.

1221
00:50:34,098 --> 00:50:35,758
He still does, he's really helpful,

1222
00:50:35,818 --> 00:50:37,159
and you can probably ping him on Twitter,

1223
00:50:37,199 --> 00:50:39,379
and he would be happy to talk about MotionBuilder with you.

1224
00:50:40,060 --> 00:50:41,760
He actually made a quick video demo for me

1225
00:50:41,820 --> 00:50:44,101
just on how the camera switcher worked out of his own time.

1226
00:50:44,161 --> 00:50:46,082
It was like a 15 minute demo, and it was super helpful.

1227
00:50:47,522 --> 00:50:48,903
John Molaska, he's in the middle there.

1228
00:50:49,463 --> 00:50:50,963
He actually gave a talk this past Monday

1229
00:50:51,003 --> 00:50:53,824
at the Animation Bootcamp about freelancing for animators,

1230
00:50:54,044 --> 00:50:55,585
so check it out in the vault if you weren't there.

1231
00:50:56,825 --> 00:50:58,446
He came on board actually for a few months

1232
00:50:58,826 --> 00:51:00,886
when I was cold, alone, and in desperate need of help.

1233
00:51:02,027 --> 00:51:04,307
He really made it, he was really an integral part

1234
00:51:04,548 --> 00:51:06,528
of a lot of the motion builder setup that you saw,

1235
00:51:06,768 --> 00:51:08,969
especially the exporting take system

1236
00:51:09,029 --> 00:51:11,150
and kind of working with animators on what workflow worked.

1237
00:51:11,862 --> 00:51:13,183
Now finally, Cole there on the right,

1238
00:51:13,763 --> 00:51:16,046
he was responsible for many Maya optimizations,

1239
00:51:16,766 --> 00:51:19,169
including a bunch of that custom script stuff that you saw

1240
00:51:19,189 --> 00:51:20,290
that's really, really cool,

1241
00:51:20,870 --> 00:51:22,132
and that motion generation tool.

1242
00:51:23,553 --> 00:51:25,115
Also, they aren't listed or shown here,

1243
00:51:25,195 --> 00:51:27,537
but my animation team's awesome.

1244
00:51:28,398 --> 00:51:30,440
Despite all their crazy, crazy demands,

1245
00:51:30,500 --> 00:51:31,921
they truly make me a better TA.

1246
00:51:33,701 --> 00:51:34,801
so I really wanna thank them.

1247
00:51:36,122 --> 00:51:37,763
And also thank you to the conference associates

1248
00:51:37,803 --> 00:51:39,563
in the back who have helped out.

1249
00:51:39,884 --> 00:51:41,284
If you see the red shirts, thank them.

1250
00:51:41,384 --> 00:51:43,225
This really wouldn't be possible without them,

1251
00:51:43,445 --> 00:51:44,666
all this organization and stuff

1252
00:51:44,846 --> 00:51:46,166
that none of us really would wanna do.

1253
00:51:46,506 --> 00:51:47,947
They do for us and it's super awesome.

1254
00:51:50,328 --> 00:51:52,329
And hey, thank you to you so much

1255
00:51:52,349 --> 00:51:53,309
for coming to my talk today.

1256
00:51:54,650 --> 00:51:55,550
Looks like we have about...

1257
00:51:56,897 --> 00:51:58,659
six or seven minutes for questions

1258
00:51:58,739 --> 00:52:00,461
if you wanna ask any questions,

1259
00:52:00,641 --> 00:52:02,964
or you can just see me outside of the hall,

1260
00:52:02,984 --> 00:52:04,546
I believe across the way or something.

1261
00:52:04,566 --> 00:52:06,308
There's a overflow room somewhere.

1262
00:52:06,328 --> 00:52:08,371
But yeah, follow me on Twitter.

1263
00:52:08,811 --> 00:52:09,672
I'm at TechAnimator.

1264
00:52:10,313 --> 00:52:12,215
My email, brian at techanimator.com.

1265
00:52:12,475 --> 00:52:13,917
Yes, I have all those.

1266
00:52:13,937 --> 00:52:16,340
So yeah, thank you so much.

1267
00:52:28,569 --> 00:52:34,958
I was wondering if you had a headless version of MotionBuilder as well?

1268
00:52:35,819 --> 00:52:36,500
We do now.

1269
00:52:36,520 --> 00:52:41,547
I mean, we're looking into moving to 2019, but it's literally headless MotionBuilder

1270
00:52:41,587 --> 00:52:43,089
just started happening like a month ago.

1271
00:52:45,487 --> 00:52:49,529
And also, did you have something to generate all your JSON

1272
00:52:49,569 --> 00:52:51,910
files for your cinematic stuff?

1273
00:52:53,010 --> 00:52:55,611
We got JSON files from the vendor at first.

1274
00:52:56,111 --> 00:52:59,513
But we actually did have to do quite a bit of just kind of

1275
00:53:00,073 --> 00:53:02,214
error checking and manual work just to make sure that they

1276
00:53:02,594 --> 00:53:03,574
kind of were set up properly.

1277
00:53:03,955 --> 00:53:06,035
But kind of once you set those up manually the first time,

1278
00:53:06,216 --> 00:53:06,796
you're kind of good.

1279
00:53:07,156 --> 00:53:09,477
And it was also a really nice way to sort of catalog and

1280
00:53:09,497 --> 00:53:11,458
understand what was in those scenes by hand.

1281
00:53:12,058 --> 00:53:21,972
Okay, and last one. What's the reason for having different files for all the shots in the cinematic?

1282
00:53:22,212 --> 00:53:22,833
For the JSON?

1283
00:53:23,715 --> 00:53:27,380
No, like in your engine you have like different...

1284
00:53:28,974 --> 00:53:30,275
Maya files for each shot?

1285
00:53:30,695 --> 00:53:33,197
And couldn't you have one big animation for the whole cut

1286
00:53:33,217 --> 00:53:33,338
scene?

1287
00:53:33,398 --> 00:53:35,920
That was more done just for frame rate reasons in Maya.

1288
00:53:36,200 --> 00:53:37,701
Because when you have content that's

1289
00:53:37,741 --> 00:53:39,542
like a five-minute cut scene, you really

1290
00:53:39,562 --> 00:53:42,285
don't want to work with multiple characters and all that

1291
00:53:42,405 --> 00:53:45,127
when you have a giant Maya sequence of, say,

1292
00:53:45,167 --> 00:53:45,507
8,000 frames.

1293
00:53:46,087 --> 00:53:49,190
So we just kind of broke those down into quick little files

1294
00:53:49,250 --> 00:53:51,051
that you could kind of go in and update one.

1295
00:53:51,432 --> 00:53:53,653
The idea between that was that if you're in Maya,

1296
00:53:53,753 --> 00:53:54,974
you're in the polish phase, and you're not

1297
00:53:55,014 --> 00:53:56,916
changing your camera framing or anything like that,

1298
00:53:56,956 --> 00:53:58,477
and you're literally just polishing content.

1299
00:53:59,057 --> 00:53:59,297
Okay.

1300
00:53:59,997 --> 00:54:00,237
Thanks.

1301
00:54:01,898 --> 00:54:04,499
Hi, I also talk, and I just want to ask

1302
00:54:05,339 --> 00:54:08,581
the name of the extra tools you use in Maya

1303
00:54:09,241 --> 00:54:10,001
from rigging?

1304
00:54:11,342 --> 00:54:12,762
From, sorry, you phrased that question?

1305
00:54:12,802 --> 00:54:15,844
The extra tools you use in Maya for rigging?

1306
00:54:16,284 --> 00:54:16,684
For rigging?

1307
00:54:16,884 --> 00:54:17,785
Yeah. Oh, we build our own.

1308
00:54:18,624 --> 00:54:18,784
What?

1309
00:54:19,164 --> 00:54:19,704
We build our own.

1310
00:54:19,744 --> 00:54:21,846
We have all auto rigging tools that we build in-house.

1311
00:54:22,667 --> 00:54:24,028
So everything is all Python scripts

1312
00:54:24,068 --> 00:54:27,150
that I sort of started from Just Cause 3, just from scratch.

1313
00:54:27,651 --> 00:54:28,792
So it's all automated stuff.

1314
00:54:28,832 --> 00:54:30,073
We have a bunch of scripts in-house.

1315
00:54:30,113 --> 00:54:33,055
And we build Blueprint files using JSON as well, actually,

1316
00:54:33,415 --> 00:54:35,957
where I just kind of state, this is the name of the control.

1317
00:54:35,997 --> 00:54:36,758
This is the size.

1318
00:54:36,778 --> 00:54:37,559
This is the color.

1319
00:54:37,639 --> 00:54:39,300
Sort of everything offsets all that.

1320
00:54:39,360 --> 00:54:40,941
And then we just run that Blueprint.

1321
00:54:41,001 --> 00:54:42,402
And it just automatically builds our rigs.

1322
00:54:43,463 --> 00:54:47,366
And by any chance, can you say me an equivalent?

1323
00:54:48,504 --> 00:54:50,325
in right and...

1324
00:54:50,865 --> 00:54:51,385
To build rigs?

1325
00:54:51,745 --> 00:54:52,466
Yeah.

1326
00:54:52,666 --> 00:54:54,127
Equivalents to build rigs right now,

1327
00:54:54,687 --> 00:54:56,368
I know a lot of people use something called Mgear,

1328
00:54:57,469 --> 00:54:59,870
which is pretty robust.

1329
00:55:02,672 --> 00:55:03,512
I can't think of anything else

1330
00:55:03,552 --> 00:55:04,392
off the top of my head right now.

1331
00:55:05,113 --> 00:55:06,113
All right, thank you very much.

1332
00:55:06,314 --> 00:55:06,854
Yeah, thank you.

1333
00:55:06,874 --> 00:55:09,315
Anything else?

1334
00:55:10,276 --> 00:55:11,476
All right, that's it, thanks.

