1
00:00:06,357 --> 00:00:16,129
Hi, my name is Matt Lindsay. I'm an independent game developer, and I'd like to show you how Pico-8 is useful for rapid development of prototypes or other small projects.

2
00:00:17,362 --> 00:00:18,303
So what is PICO-8?

3
00:00:19,003 --> 00:00:22,005
PICO-8 describes itself as a fantasy console.

4
00:00:22,546 --> 00:00:27,129
Essentially, it's an all-in-one game creation suite that gives you a variety of simple,

5
00:00:27,369 --> 00:00:32,213
rapid development tools, each of which has useful constraints to help you make games

6
00:00:32,393 --> 00:00:32,813
faster.

7
00:00:33,393 --> 00:00:35,235
It also runs on basically everything.

8
00:00:35,295 --> 00:00:38,777
You can see it has a Windows version, and a Raspberry Pi version, and a Linux version,

9
00:00:38,857 --> 00:00:44,521
and an OS X version, so chances are very good that you can probably work it into your workflow

10
00:00:44,581 --> 00:00:44,961
somehow.

11
00:00:47,392 --> 00:00:55,378
So it gives you a very simple sprite editing tool, wherein you can see, right, you can

12
00:00:55,418 --> 00:00:57,660
very quickly mock up these little sprites.

13
00:00:57,740 --> 00:00:58,681
This here is a ninja.

14
00:00:59,221 --> 00:01:05,526
And it has 16 colors, with a fairly low resolution, which allows you to fairly quickly make easily

15
00:01:05,566 --> 00:01:08,988
differentiated sprites, but not get too caught up in the details.

16
00:01:11,166 --> 00:01:17,371
It has a very rapid tile map editor, so you can go from having a blank screen to new platforms

17
00:01:17,391 --> 00:01:19,433
to jump around in and test on very quickly.

18
00:01:19,933 --> 00:01:27,640
The map itself is large but not huge, so you have some constraints there too, enough to

19
00:01:27,660 --> 00:01:31,583
give you space to test things or make something small, but nothing too gigantic.

20
00:01:34,167 --> 00:01:36,648
It has a very simple sound editing tool.

21
00:01:36,808 --> 00:01:44,172
You can see here I select a sine wave and then increase pitch over time to make a sort of simple jumping bloop sound, right?

22
00:01:44,993 --> 00:01:53,237
You can also select a variety of other different sound effects and a four tracker different music editing tool.

23
00:01:54,211 --> 00:01:57,874
which allows you to import either of these instruments that you've created,

24
00:01:58,314 --> 00:01:59,575
or use some default ones,

25
00:02:00,076 --> 00:02:02,678
and very quickly make some music with different effects,

26
00:02:02,898 --> 00:02:04,359
but nothing too complicated.

27
00:02:07,461 --> 00:02:10,784
It uses a subset of Lua as its scripting language.

28
00:02:11,551 --> 00:02:17,977
So you get a rapid and human-readable codebase that also is kept fairly small.

29
00:02:18,037 --> 00:02:22,621
It has a token limit on the bottom right side of the little PICO-8 screen there.

30
00:02:22,761 --> 00:02:28,146
You can't have more than about 8,200 tokens, which keeps things from getting too bloated.

31
00:02:32,622 --> 00:02:38,129
So Pico-8 gives you a variety of simple, low-level calls, right?

32
00:02:38,249 --> 00:02:41,413
An init function, an update function, a draw function,

33
00:02:41,453 --> 00:02:45,138
things to draw sprites to the screen, or play sounds, or show you the map.

34
00:02:46,260 --> 00:02:49,404
So let's build on top of this and make a little platformer.

35
00:02:50,354 --> 00:02:56,236
Now you could, at this point, write a simple, bespoke engine for whatever kind of game that

36
00:02:56,256 --> 00:02:56,976
you're trying to make.

37
00:02:57,416 --> 00:03:01,698
And depending on your level of experience, or the nature of your idea, or your time frame,

38
00:03:01,778 --> 00:03:03,398
this might be the right idea for you.

39
00:03:04,139 --> 00:03:09,280
But you don't actually need to work from truly nothing if you want to really get up and going

40
00:03:09,320 --> 00:03:09,700
faster.

41
00:03:12,421 --> 00:03:12,942
Any game...

42
00:03:13,425 --> 00:03:20,188
that you load into a Pico-8 console also gives you access to the full assets and source code of that game.

43
00:03:21,189 --> 00:03:26,971
If you run the install demos command, you get a variety of little sample games to learn from and build on.

44
00:03:27,971 --> 00:03:32,493
Like this little platformer here called Jel-Pi. Or Jel-PL, I'm not exactly sure.

45
00:03:33,728 --> 00:03:37,769
And if your goal is just to build on top of something there,

46
00:03:38,429 --> 00:03:41,690
like this demo platformer, this might be all you need to do.

47
00:03:41,770 --> 00:03:44,511
You might just install the demos, load up the demo platformer,

48
00:03:44,611 --> 00:03:46,132
and start adding some new stuff.

49
00:03:47,752 --> 00:03:51,553
And I do want to note here that just because something is open source,

50
00:03:52,213 --> 00:03:55,254
doesn't mean you have the right to modify it and publish it,

51
00:03:55,334 --> 00:03:57,095
especially if this is somebody else's game.

52
00:03:58,795 --> 00:04:00,576
That being said, out of the way, right?

53
00:04:01,762 --> 00:04:04,664
The original Celeste, which was a PICO-8 game,

54
00:04:05,204 --> 00:04:07,846
its movement code has been released under an MIT license.

55
00:04:08,107 --> 00:04:11,689
So you are allowed to distribute it or publish it or even sell it,

56
00:04:11,850 --> 00:04:14,271
as long as you also do so with an MIT license.

57
00:04:15,633 --> 00:04:20,757
Now Celeste and its sequel, Celeste II, another PICO-8 game,

58
00:04:21,717 --> 00:04:27,081
use a very simple and similar foundation of collision, input handling,

59
00:04:27,402 --> 00:04:28,843
drawing things to the screen, etc.

60
00:04:30,081 --> 00:04:33,182
which works very well for a lot of different kinds of games.

61
00:04:33,622 --> 00:04:38,244
Of the two, I think Celeste 2's codebase is a little bit clearer and easier to work in.

62
00:04:39,425 --> 00:04:42,546
So, let's not go completely from scratch.

63
00:04:42,886 --> 00:04:47,468
Let's modify some of the basic structures in the Celeste 2 codebase

64
00:04:47,828 --> 00:04:50,109
into our game to give us something to build on.

65
00:04:51,398 --> 00:04:56,842
Now we're not going to be using the entire code base, we're just going to be picking out the most useful portions of it.

66
00:04:57,242 --> 00:05:04,046
The basic low-level stuff that we don't want to have to worry about when our goal is to iterate on ideas and develop prototypes.

67
00:05:04,706 --> 00:05:11,430
In a few places I'm going to be making some modifications for this purpose as well as for simplicity, and I'll point those out when we get to them.

68
00:05:13,488 --> 00:05:22,362
Also, before we move on, I also want to note, Celeste 2 is not under an MIT license, it's under a Creative Commons license with all of these different attributes,

69
00:05:22,943 --> 00:05:28,151
and you can't sell it if you make a version of this game and then put it on the internet. Just a little note here.

70
00:05:29,944 --> 00:05:34,288
Okay, so we need some assets just to mess around with, right?

71
00:05:34,708 --> 00:05:38,171
So we can see here we've built up a few very simple assets.

72
00:05:38,211 --> 00:05:41,233
We have a target, we have a shuriken, we have a little ninja, we have a platform.

73
00:05:41,594 --> 00:05:45,136
And I want to take a brief moment to point you at flags.

74
00:05:45,397 --> 00:05:48,439
So you'll see here next to the target, right, there's all those little dots.

75
00:05:49,220 --> 00:05:50,321
And one of the dots is red.

76
00:05:51,241 --> 00:05:53,703
That means that that flag is currently turned on.

77
00:05:54,663 --> 00:05:56,924
There are seven of them, eight of them, right? Zero through seven.

78
00:05:57,644 --> 00:05:59,424
And we're going to be using that later.

79
00:05:59,504 --> 00:06:01,865
The flags on them by themselves don't do anything.

80
00:06:01,945 --> 00:06:02,906
These are user defined.

81
00:06:03,606 --> 00:06:07,807
This is just a way of us saying, okay, does this sprite have that flag?

82
00:06:08,287 --> 00:06:09,748
Great. Do something about it.

83
00:06:09,828 --> 00:06:12,729
We can set these and check them in code as well,

84
00:06:13,009 --> 00:06:16,670
but I'm setting one here for a purpose that we're going to get into later.

85
00:06:16,850 --> 00:06:20,331
Just remember that the target and the ninja both have flag zero set.

86
00:06:22,812 --> 00:06:22,932
So...

87
00:06:23,502 --> 00:06:26,864
To start things off, right at the top of our code, we have a few different globals, right?

88
00:06:26,904 --> 00:06:32,767
We have our table of objects and a table of types and a table that's called lookup.

89
00:06:33,467 --> 00:06:37,649
The table is the most useful and flexible data structure in Lua.

90
00:06:37,669 --> 00:06:39,230
You're going to be using it all the time.

91
00:06:40,191 --> 00:06:41,812
Your tables are going to be your arrays.

92
00:06:41,852 --> 00:06:46,014
They're going to be just all of your structs are going to be tables, right?

93
00:06:46,054 --> 00:06:46,634
Everything's tables.

94
00:06:47,632 --> 00:06:52,174
And the lookup table here, which is I think the most interesting of the three,

95
00:06:52,374 --> 00:06:58,056
is something that we're using as a Lua meta table to enable object-oriented style inheritance.

96
00:06:58,696 --> 00:07:03,037
And if that sentence doesn't mean anything to you, that's okay, don't worry about it.

97
00:07:03,397 --> 00:07:06,778
It's all pretty simple to use. You don't need to understand this to use it.

98
00:07:07,479 --> 00:07:14,401
As well as that, we've strutted up a few basic references to the buttons here.

99
00:07:15,554 --> 00:07:21,519
Right? So we don't want to have to remember which button is left and which button is X and which button is O.

100
00:07:21,579 --> 00:07:23,581
We can just set a few consts here.

101
00:07:23,701 --> 00:07:29,987
This is also adapted from the Celeste 1 codebase where this was present and is notably absent from the Celeste 2 codebase.

102
00:07:31,668 --> 00:07:31,808
So.

103
00:07:32,379 --> 00:07:40,365
Everything in our game is going to be an object, and if you are familiar with object-oriented game programming, this is going to look very familiar to you.

104
00:07:40,505 --> 00:07:48,771
I also want to note, you don't have to make your game object-oriented, it's just very easy to work in and comfortable for many different game developers.

105
00:07:49,959 --> 00:07:53,403
So, our objects have a series of shared attributes.

106
00:07:53,463 --> 00:07:55,925
They have a speed in the x and y direction.

107
00:07:56,246 --> 00:07:57,187
They have a position.

108
00:07:57,527 --> 00:08:01,832
They have a unique identifier based on where on the map they spawned.

109
00:08:02,993 --> 00:08:05,095
As well as a few other little notable things here.

110
00:08:06,697 --> 00:08:14,627
They have some collisions, which we're going to get into exactly how the collision engine of Celeste 2 and similarly how Celeste works,

111
00:08:14,747 --> 00:08:20,914
and why that may or may not be useful for your game, but each object has access to those collision and movement functions.

112
00:08:22,177 --> 00:08:23,937
They can see if they overlap or contain.

113
00:08:24,437 --> 00:08:26,778
Another thing, they can see if they are solid, right?

114
00:08:27,038 --> 00:08:29,679
There's a helpful function called cornerCorrect.

115
00:08:30,100 --> 00:08:34,981
So if an object is moving and would just barely bump the edge of another tile,

116
00:08:35,061 --> 00:08:40,103
you can sort of nudge it upwards or downwards slightly to give it a more natural movement path.

117
00:08:40,864 --> 00:08:41,964
I also want to note here...

118
00:08:43,068 --> 00:08:48,093
that each object has a user-defined hitbox, which is an offset from that object's position

119
00:08:48,453 --> 00:08:53,979
and width and height. This allows you to have certain objects have a hitbox which is differently

120
00:08:54,059 --> 00:08:59,545
sized than their sprite might imply. So you can have a hazard be a little bit smaller than it

121
00:08:59,585 --> 00:09:04,710
looks on the screen. You can have a collectible pickup be a little bit bigger than it looks on

122
00:09:04,730 --> 00:09:05,090
the screen.

123
00:09:06,237 --> 00:09:18,963
etc. Right here you can see I have drawn the hitboxes of Celeste 2. I booted up a level and I added a little bit of code to just draw all of the hitboxes and you can see some of them are larger than their sprites, some of them are smaller.

124
00:09:19,483 --> 00:09:22,924
You can see that spikes have very little hitboxes, right, to feel more fair.

125
00:09:23,945 --> 00:09:26,186
And the player's hitbox is just sort of this bottom rectangle.

126
00:09:27,159 --> 00:09:35,727
Now, the way that the collision works in this little engine that we're working on here that we've adapted from Celeste 2 is pixel perfect.

127
00:09:36,107 --> 00:09:43,934
So each object, as it's moving, moves one pixel at a time, first in the x direction, then the y direction.

128
00:09:44,996 --> 00:09:47,037
and checks to see if it's hitting anything on the way.

129
00:09:47,677 --> 00:09:53,840
This is going to give us extremely accurate pixel-perfect collision, and very, very robust

130
00:09:54,060 --> 00:09:54,720
collision at that.

131
00:09:54,800 --> 00:10:00,022
It's unlikely that two objects are going to, out of happenstance, be overlapping when they

132
00:10:00,062 --> 00:10:01,303
shouldn't be with this engine.

133
00:10:01,703 --> 00:10:07,145
However, I do want to stress here that this is great for precise platforming, and it's

134
00:10:07,205 --> 00:10:11,066
great for really precise collision detection, but it's very expensive.

135
00:10:11,757 --> 00:10:14,639
By which I mean, it takes a lot of computation time.

136
00:10:15,359 --> 00:10:20,182
So if your game doesn't rely on really precise collisions between objects,

137
00:10:20,363 --> 00:10:23,305
you may want to use a cheaper collision model.

138
00:10:23,997 --> 00:10:30,084
The platformer that you get when you install the demos for Pico-8 has a much simpler version

139
00:10:30,104 --> 00:10:35,149
of this, where instead of moving one pixel at a time, it simply checks if your end position

140
00:10:35,509 --> 00:10:39,313
is somewhere you are allowed to be, and if it is it moves you there, and if it isn't

141
00:10:39,493 --> 00:10:43,277
it creates a bounce so that you would sort of bounce off of the edge of whatever

142
00:10:44,150 --> 00:10:47,353
you are trying to move into, and this is also, you know, robust enough.

143
00:10:47,433 --> 00:10:51,756
This works fine for a lot of different kinds of games, and if your prototype needs lots

144
00:10:51,816 --> 00:10:55,579
and lots of different objects on screen at the same time, all moving around and detecting

145
00:10:55,619 --> 00:11:00,162
collisions, you may want to consider this alternate collision version instead of the

146
00:11:00,863 --> 00:11:03,345
more intensive but more accurate pixel perfect version.

147
00:11:06,513 --> 00:11:08,938
Oh, also, one other note before we leave this slide.

148
00:11:08,998 --> 00:11:11,663
There's a flag here called remainder.

149
00:11:11,683 --> 00:11:14,148
This allows you to make sure, in this engine,

150
00:11:14,169 --> 00:11:18,377
you're moving only an integer number of collisions per frame.

151
00:11:18,740 --> 00:11:24,784
So if you're moving at a speed of 2.5, first you move at a speed of 2, the next frame you move at a speed of 3.

152
00:11:25,405 --> 00:11:32,570
It carries over a little bit of the non-integer portions of your movement speed to really make sure you have clean collisions,

153
00:11:32,630 --> 00:11:36,873
because you don't want the player moving half a pixel and messing up all of your math.

154
00:11:39,560 --> 00:11:41,662
Inputs are handled fairly simply.

155
00:11:42,382 --> 00:11:44,924
We have this large block here.

156
00:11:44,984 --> 00:11:49,328
It looks kind of scary, but really it's just saying if you push left, you're moving left,

157
00:11:49,388 --> 00:11:53,551
and you push right, you're moving right, even if you were already pushing another direction.

158
00:11:54,932 --> 00:11:55,872
This works very cleanly.

159
00:11:56,793 --> 00:11:59,575
Also notably, we have a quick check for your jump.

160
00:11:59,815 --> 00:12:03,998
We want to make sure that you're not jumping too frequently, because that might feel strange.

161
00:12:04,379 --> 00:12:06,260
So you can only jump every four frames.

162
00:12:07,680 --> 00:12:12,725
Basically, if you're not already jumping, you know, if you haven't just jumped and you push the button,

163
00:12:13,525 --> 00:12:18,589
great, jump. As to how and why you're allowed to jump, that's handled later in the player code.

164
00:12:20,451 --> 00:12:25,175
Speaking of that, the player code has been greatly simplified from the Celeste 2 original version.

165
00:12:25,475 --> 00:12:30,279
We've essentially stripped away everything from it except a basic jump and move around

166
00:12:30,759 --> 00:12:31,780
and collision and update.

167
00:12:32,773 --> 00:12:38,235
I have chosen to keep the wall jump from Celeste 2 because I think it's just sort of a fun,

168
00:12:38,275 --> 00:12:43,857
flexible mechanic, excuse me, and it'll work well in the kind of games that we want

169
00:12:43,877 --> 00:12:44,458
to test out.

170
00:12:44,538 --> 00:12:48,099
We may want a wall jump anyway, and if you wanted to remove it, it wouldn't be hard

171
00:12:48,139 --> 00:12:48,539
to remove.

172
00:12:49,759 --> 00:12:51,780
The player notably has a state.

173
00:12:52,548 --> 00:12:55,689
which is key to how its update function works.

174
00:12:56,209 --> 00:13:02,892
So the player's default state is 0, which is our standard moving around and jumping state.

175
00:13:03,232 --> 00:13:07,013
If you want a different set of updates to happen on a different state,

176
00:13:07,253 --> 00:13:10,055
let's say for example you wanted the player to be able to swim,

177
00:13:10,770 --> 00:13:14,151
That is going to change how they update their movement over time.

178
00:13:14,231 --> 00:13:18,132
It's going to change what happens when you get a jump input, right?

179
00:13:18,452 --> 00:13:21,113
These are things you can handle very easily and very quickly

180
00:13:21,453 --> 00:13:24,814
by adding a new state to the player that does what you want it to do

181
00:13:24,954 --> 00:13:27,155
and then adding a transition between the two states.

182
00:13:27,415 --> 00:13:29,075
We're going to be getting into more of that later.

183
00:13:30,203 --> 00:13:33,246
We also have a brief check here called hazard check.

184
00:13:33,626 --> 00:13:36,289
So if any object in the world is flagged as a hazard,

185
00:13:36,629 --> 00:13:39,071
we can know in what direction it should be a hazard

186
00:13:39,431 --> 00:13:43,515
and enable ourselves to be correctly hurt by it

187
00:13:43,815 --> 00:13:44,476
when that happens.

188
00:13:46,224 --> 00:13:52,467
Otherwise we have the same sort of moveX, moveY, and a simple flag called onGround which

189
00:13:52,547 --> 00:13:57,609
looks one pixel below the player's current hitbox to see if that is a solid object.

190
00:13:57,649 --> 00:13:58,749
If it is, you are on the ground.

191
00:13:58,849 --> 00:14:00,970
You are allowed to jump and do grounded things.

192
00:14:03,711 --> 00:14:06,852
So at the very beginning of our game, we need to spawn in some objects.

193
00:14:07,160 --> 00:14:11,821
This is a very simple little code that looks at every tile on the map.

194
00:14:11,921 --> 00:14:18,523
We're going all 127 across and all 60, you know, 128 over 127 and all 64 down.

195
00:14:19,383 --> 00:14:23,184
We're looking at every tile on the map and we're calling two different functions.

196
00:14:23,884 --> 00:14:27,825
nget tells us what sprite is at the tile position x, y.

197
00:14:29,805 --> 00:14:34,688
And fget tells us if a sprite has a particular flag.

198
00:14:35,069 --> 00:14:38,771
So this looks at every different tile location on the map,

199
00:14:39,132 --> 00:14:42,094
and it sees if anything has flag zero.

200
00:14:42,774 --> 00:14:46,057
If it does, that means that that should spawn an object

201
00:14:46,137 --> 00:14:47,177
of the relevant type,

202
00:14:47,598 --> 00:14:50,060
and shouldn't actually be a tile on the map.

203
00:14:50,440 --> 00:14:53,202
So simply put, if we find something which is a target,

204
00:14:53,522 --> 00:14:54,923
and it has a little zero flag,

205
00:14:55,644 --> 00:15:01,108
Spawn a target in that location and then get rid of the background tile that looks like a target.

206
00:15:02,570 --> 00:15:09,616
Very simple, very flexible. Again, most of the code and structure of this code is useful for lots of

207
00:15:09,676 --> 00:15:15,181
different kinds of games besides platformers. It's just generically, this is a, I think,

208
00:15:15,221 --> 00:15:20,725
a helpful structure for you to adapt in your prototypes. So putting it all together.

209
00:15:21,568 --> 00:15:27,729
We've taken the Celeste II codebase and stripped out everything from it that we don't need and put it into a new project.

210
00:15:28,070 --> 00:15:34,011
You can see we've shrunk the number of tokens in our code from almost 8,000 to about 1,700, give or take,

211
00:15:34,731 --> 00:15:36,432
and we have some basic movement, right?

212
00:15:36,472 --> 00:15:42,453
We can run around, we correctly do not intersect with the wall tiles, we can wall jump.

213
00:15:43,513 --> 00:15:46,980
This is all fairly stable, feels pretty good to move around in, and of course if we wanted

214
00:15:47,020 --> 00:15:52,591
to tweak the jump arcs or gravity or the movement speed or whatever, we could do that very easily.

215
00:15:53,874 --> 00:15:54,235
So now...

216
00:15:54,960 --> 00:15:56,221
Let's build on top of that, right?

217
00:15:56,461 --> 00:15:58,762
We're here to make a platformer.

218
00:15:59,022 --> 00:16:00,003
So let's make a platformer.

219
00:16:00,383 --> 00:16:01,444
Let's iterate on this idea.

220
00:16:01,864 --> 00:16:03,245
So let's add some shurikens, right?

221
00:16:03,305 --> 00:16:05,346
Our ninja has no way of actually interacting

222
00:16:05,366 --> 00:16:06,346
with the targets right now.

223
00:16:06,926 --> 00:16:08,747
So let's add a simple type, right?

224
00:16:08,767 --> 00:16:10,168
We have a new type, it's called shuriken,

225
00:16:10,488 --> 00:16:11,869
and creating it is very easy.

226
00:16:11,989 --> 00:16:14,710
You can see we just invoke the new type function.

227
00:16:15,231 --> 00:16:17,532
And its initialization is very simple.

228
00:16:17,652 --> 00:16:19,693
We just want it to get rid of itself

229
00:16:19,773 --> 00:16:21,714
if it hangs out in the world for too long, right?

230
00:16:21,774 --> 00:16:22,694
After you throw a shuriken,

231
00:16:23,555 --> 00:16:27,877
one second later in a 30 frame per second game, which is the default update.

232
00:16:28,917 --> 00:16:33,259
If 30 frames have passed and this shuriken is still around, it shouldn't be around anymore.

233
00:16:34,460 --> 00:16:40,342
So all we have to do is move it in its directions in its little custom update and check to see if

234
00:16:40,382 --> 00:16:45,845
it overlaps a target, right? If it is overlapping with an object and that object's base is target,

235
00:16:45,985 --> 00:16:49,146
which is another defined type that you can see below the shuriken type,

236
00:16:50,307 --> 00:16:53,228
then destroy the target and destroy yourself, right?

237
00:16:54,916 --> 00:17:04,840
Or more accurately, set the destroyed flag to be true of the target, and the destroyed flag to be true of yourself, to be later cleaned up in the update function.

238
00:17:05,801 --> 00:17:08,202
Otherwise, we need to go update the player, right?

239
00:17:08,542 --> 00:17:09,102
Similarly...

240
00:17:09,122 --> 00:17:09,162
S-

241
00:17:10,403 --> 00:17:16,506
Similarly, to how we are updating jumping and detecting jumping input, we add another function here.

242
00:17:16,939 --> 00:17:21,521
That takes a quick check to see if you're pushing another button.

243
00:17:21,581 --> 00:17:26,424
We have the button which isn't jumping, which I called KOther in this case, which we're

244
00:17:26,464 --> 00:17:27,544
now going to use for a weapon.

245
00:17:28,785 --> 00:17:33,567
So if you push the weapon button, and I want you to be able to throw shurikens more rapidly

246
00:17:33,628 --> 00:17:36,129
than jump, so you can do this every other frame.

247
00:17:38,350 --> 00:17:42,313
You know, now you are considered to have your input weapon pressed.

248
00:17:42,474 --> 00:17:43,935
And later, we have a...

249
00:17:44,295 --> 00:17:47,057
In the update, we're going to see if you're pushing that button.

250
00:17:47,137 --> 00:17:48,598
And if you are, we're going to throw a shuriken.

251
00:17:48,919 --> 00:17:50,420
And throwing a shuriken is very simple.

252
00:17:51,080 --> 00:17:54,023
If you are facing in the direction, it spawns the shuriken in front of you.

253
00:17:54,363 --> 00:17:57,685
And then gives it a speed related to your speed.

254
00:17:57,725 --> 00:18:01,428
So if you're running forward and throwing a shuriken, it behaves how you expect it to.

255
00:18:01,448 --> 00:18:03,530
And so...

256
00:18:04,070 --> 00:18:04,251
Right?

257
00:18:06,833 --> 00:18:06,953
So...

258
00:18:07,415 --> 00:18:08,616
Now we can throw shurikens, right?

259
00:18:08,756 --> 00:18:11,277
There's a little ninja, and he's hopping around, and he's throwing shurikens.

260
00:18:11,737 --> 00:18:12,177
Isn't that great?

261
00:18:12,437 --> 00:18:14,258
And those shurikens interact with targets.

262
00:18:14,578 --> 00:18:17,979
And if you wanted to, right, we could also add sound effects to this pretty easily.

263
00:18:18,459 --> 00:18:20,700
We could add a sound effect for throwing a shuriken,

264
00:18:21,160 --> 00:18:22,981
and then sound effects for blowing up a target.

265
00:18:23,281 --> 00:18:24,601
We could add a sound effect for jumping.

266
00:18:25,121 --> 00:18:27,222
These would all be very fast to do, right?

267
00:18:28,382 --> 00:18:30,723
This is a very, very rapid iteration at this point.

268
00:18:31,103 --> 00:18:33,344
But throwing shurikens is great, but that's not movement.

269
00:18:33,384 --> 00:18:35,765
Let's add some cool movement as well, right?

270
00:18:35,785 --> 00:18:37,065
So let's add the ice skater.

271
00:18:37,905 --> 00:18:41,428
Right? So, think like Frozone or Iceman, right?

272
00:18:41,448 --> 00:18:45,331
They can hang out in the air and skate on a sheet of ice.

273
00:18:45,651 --> 00:18:46,671
What does that actually look like?

274
00:18:46,992 --> 00:18:49,734
Well, if they're moving downwards, right?

275
00:18:49,754 --> 00:18:54,717
If you're falling, then you can convert that speed over 10 frames.

276
00:18:54,757 --> 00:18:57,999
You can move your vertical speed into horizontal speed.

277
00:18:58,800 --> 00:19:00,461
And that works pretty well,

278
00:19:01,082 --> 00:19:03,483
but it also doesn't really sell the illusion on itself.

279
00:19:03,563 --> 00:19:06,165
So we're also adding one other set of small changes.

280
00:19:07,228 --> 00:19:08,149
We're adding icicles.

281
00:19:08,689 --> 00:19:11,211
Icicles are not objects in this case.

282
00:19:11,892 --> 00:19:15,575
They are simply points that we keep track of with an H.

283
00:19:16,376 --> 00:19:19,179
So every icicle just has a point on the map.

284
00:19:19,899 --> 00:19:22,261
And then as it gets older, it gets longer.

285
00:19:23,423 --> 00:19:25,024
And it has a bit of randomness in there too

286
00:19:25,124 --> 00:19:28,447
to make the icicle path look a bit more like natural

287
00:19:28,627 --> 00:19:30,429
instead of a big sheet.

288
00:19:30,649 --> 00:19:32,611
Although, again, if you wanted to make it a big sheet,

289
00:19:32,631 --> 00:19:33,352
you can make it a big sheet.

290
00:19:34,119 --> 00:19:38,842
The only other note that we should track here for the icicles is if you just put one at each position,

291
00:19:39,122 --> 00:19:44,364
if you're moving it faster than one pixel per frame, then you'd have holes in your ice path,

292
00:19:44,384 --> 00:19:48,086
so you need to make sure you iterate your ice path over the entirety of your movement.

293
00:19:49,267 --> 00:19:53,109
Right? And there's a few other little changes to make, right? We have an ice skating state,

294
00:19:53,509 --> 00:20:00,913
which if you let go of the button, then you stop skating. If you hit the ground, you stop skating,

295
00:20:00,973 --> 00:20:01,693
right? All this stuff.

296
00:20:02,739 --> 00:20:04,122
So now you can skate around, right?

297
00:20:04,362 --> 00:20:08,028
Now you can hop off a wall and start skating, and you can still throw shurikens, right?

298
00:20:08,068 --> 00:20:14,980
We've even moved the shuriken throwing code to outside of the zero update and into the generic player update, right?

299
00:20:15,201 --> 00:20:16,663
You can even skate backwards if you want to.

300
00:20:17,667 --> 00:20:22,028
And this is pretty cool. And now we can start iterating level designs off of this, right?

301
00:20:22,468 --> 00:20:26,749
What happens now that you can skate on ice? Well, because you have this fairly controlled

302
00:20:26,789 --> 00:20:32,351
horizontal movement, you can have this ladder-like structure, right? You can very easily sort of

303
00:20:32,431 --> 00:20:37,812
climb up objects if you have access to it. Theoretically, you could do an infinite wall jump.

304
00:20:38,613 --> 00:20:42,374
If you wanted to, you could actually set a limit to this.

305
00:20:42,734 --> 00:20:44,935
You could not have an infinite amount of ice skating,

306
00:20:44,955 --> 00:20:46,236
but a limited amount of ice skating,

307
00:20:46,276 --> 00:20:49,057
or increase that if you pick up an object or whatever, right?

308
00:20:49,377 --> 00:20:50,717
Iterate, just have fun with it.

309
00:20:50,777 --> 00:20:52,438
Just mess around with the idea at this point,

310
00:20:52,778 --> 00:20:54,098
now that you have the basic structure.

311
00:20:55,199 --> 00:20:56,859
I also want to take a note, though, right?

312
00:20:57,300 --> 00:21:01,361
What we did is essentially go through the Celeste II codebase

313
00:21:02,321 --> 00:21:06,163
and take the portions of it that we think are most useful for our game.

314
00:21:06,894 --> 00:21:10,497
and strip it away and port it into a new cart and make it from scratch.

315
00:21:10,937 --> 00:21:14,480
You don't actually have to do that if you don't want to.

316
00:21:14,820 --> 00:21:18,864
Because remember, if you load Celeste 2 into PICO-8,

317
00:21:19,484 --> 00:21:20,685
then you can just modify it.

318
00:21:21,586 --> 00:21:23,648
So, what if you want to do that, right?

319
00:21:23,708 --> 00:21:27,792
What if you want to just load Celeste 2 right into your PICO-8 console

320
00:21:28,132 --> 00:21:29,893
and start modifying it immediately?

321
00:21:32,137 --> 00:21:33,718
There's a few small changes to make here.

322
00:21:34,318 --> 00:21:37,860
You add a little flag at the top that says standalone equals one.

323
00:21:37,900 --> 00:21:40,521
This is something that was already present in the code base

324
00:21:40,741 --> 00:21:43,923
and allows you to have better interactions with the map

325
00:21:44,523 --> 00:21:50,286
as opposed to the compressed tile data that it was originally ingesting.

326
00:21:50,646 --> 00:21:54,748
So by doing this, you can just modify the map in sort of the upper left corner

327
00:21:55,749 --> 00:21:56,609
and start drawing things out.

328
00:21:57,550 --> 00:22:02,093
We also need to create the player, because again, we're no longer loading our levels in the original kind of way,

329
00:22:02,173 --> 00:22:04,855
so in the init, just put the player somewhere. I put them at 30, 30.

330
00:22:06,636 --> 00:22:12,760
Also, you can remove all the grappling hook stuff, because presumably, you're not here to test out the Celeste 2 grappling hook,

331
00:22:13,060 --> 00:22:15,141
you're here to test out your own new movement.

332
00:22:15,421 --> 00:22:18,463
So you can just remove that stuff and the decompression.

333
00:22:18,703 --> 00:22:25,307
I want to note here that the code you're seeing is not taken right from the Pico-8 console,

334
00:22:25,387 --> 00:22:27,108
it's actually taken from Visual Studio.

335
00:22:28,354 --> 00:22:30,095
Or VSC, Visual Studio Code.

336
00:22:30,716 --> 00:22:34,719
In the back end, a PICO-8 file is just a long text file.

337
00:22:35,180 --> 00:22:38,923
So you can edit it with whatever tools you usually like to edit your code,

338
00:22:39,283 --> 00:22:42,966
and then simply reload the game in PICO-8, and it'll load in your changes.

339
00:22:43,787 --> 00:22:45,769
Very simple to integrate into your workflow.

340
00:22:46,029 --> 00:22:50,873
You don't actually have to use the text editor present in PICO-8 if you don't want to.

341
00:22:52,664 --> 00:22:54,805
So you remove the grappling hook stuff, right?

342
00:22:54,825 --> 00:22:57,066
You remove all this stuff that you don't need.

343
00:22:57,607 --> 00:22:59,007
Now we can add some new stuff, right?

344
00:22:59,047 --> 00:22:59,728
Let's modify it.

345
00:23:00,208 --> 00:23:01,448
Let's change things up.

346
00:23:02,949 --> 00:23:04,590
So let's add clinging to ceilings.

347
00:23:04,630 --> 00:23:05,791
That's kind of a fun idea.

348
00:23:05,811 --> 00:23:07,431
I don't think I've seen that in a lot of games.

349
00:23:07,551 --> 00:23:10,133
Some games, yeah, sort of a ninja-like move

350
00:23:10,153 --> 00:23:11,573
where you cling to a ceiling, move around.

351
00:23:12,834 --> 00:23:13,935
So what does that look like?

352
00:23:13,975 --> 00:23:16,156
Well, if you're in the air and you're holding up,

353
00:23:16,983 --> 00:23:20,305
Then you should be clinging to a ceiling if you are next to a ceiling.

354
00:23:20,345 --> 00:23:23,768
So we check two pixels above the player's hitbox,

355
00:23:24,528 --> 00:23:28,531
and then if that's solid and you're holding up, great, you're clinging to the ceiling.

356
00:23:28,571 --> 00:23:33,774
We add a new state that says if you're still below a ceiling, right,

357
00:23:33,814 --> 00:23:37,377
if that ceiling hasn't stopped existing or if you haven't moved away from it,

358
00:23:37,837 --> 00:23:39,038
you're still clinging to the ceiling.

359
00:23:40,753 --> 00:23:43,174
And you can also move around left and right if you're on the ceiling.

360
00:23:43,214 --> 00:23:45,495
If you let go of the button, you shouldn't be clinging anymore, right?

361
00:23:45,835 --> 00:23:50,477
This is all it is, a really small code change to make this new behavior.

362
00:23:51,518 --> 00:23:53,718
And now we can just jump and cling to ceilings, right?

363
00:23:54,719 --> 00:23:56,679
Pretty easy. Pretty clean, right?

364
00:23:56,719 --> 00:23:59,741
Didn't take very long at all to go from Load Up Celeste 2

365
00:24:00,221 --> 00:24:02,822
to add this new different movement option.

366
00:24:02,862 --> 00:24:05,483
But why stop at one, right? Let's keep going. Let's add some more stuff.

367
00:24:06,503 --> 00:24:07,323
Let's add hang gliding.

368
00:24:07,923 --> 00:24:20,230
So what does that look like? Well, we have a hang gliding sprite, which you can see has a little hang glider and the poles and Lani's little hands holding on to the hang glider, which we're going to just draw right on top of Lani as long as he is hang glider.

369
00:24:21,312 --> 00:24:25,713
So you can see that we just add a new state called, you know, we call it hang gliding,

370
00:24:26,353 --> 00:24:30,735
and it has a very simple movement code. It simply accelerates you in the x direction

371
00:24:31,295 --> 00:24:37,077
and ever so slightly dips you down over time, right? That's all it is. This is all of the

372
00:24:37,137 --> 00:24:42,998
code that you need to add this new movement option now that you have the engine, right?

373
00:24:43,078 --> 00:24:44,899
And how does it look like? Well, it looks like this, right?

374
00:24:45,488 --> 00:24:49,169
If you're in the air and you push the hang gliding button, now you're hang gliding, right?

375
00:24:49,189 --> 00:24:50,550
And you can even use the two of them.

376
00:24:50,610 --> 00:24:54,111
You can hang glide off of stuff and you can grab onto ceilings.

377
00:24:54,631 --> 00:24:56,792
So what does it look like if you have both those things, right?

378
00:24:56,832 --> 00:24:59,813
What kind of levels can you make with these two sets of mechanics?

379
00:24:59,853 --> 00:25:01,913
Well, maybe you could do something like this, right?

380
00:25:01,933 --> 00:25:08,055
Where you have a series of horizontally focused different areas for you to platform through,

381
00:25:08,115 --> 00:25:08,275
right?

382
00:25:08,315 --> 00:25:11,717
You have some spikes around there and they're differently traversed

383
00:25:11,797 --> 00:25:13,597
with combinations of these two mechanics.

384
00:25:14,875 --> 00:25:19,413
You can continue to modify this. Maybe you need one upgrade first and then you go get the other one.

385
00:25:20,724 --> 00:25:23,224
You have enemies that you need to glide around, right?

386
00:25:23,244 --> 00:25:26,945
You just set those as hazards in the code and give them some movement.

387
00:25:27,005 --> 00:25:31,687
You can even have them have access to the player if you want to, to be able to track them, right?

388
00:25:32,087 --> 00:25:34,588
Maybe you want moving platforms. That's pretty easy too.

389
00:25:34,628 --> 00:25:38,849
You just make sure that your platforms that can move are listed as solid,

390
00:25:39,229 --> 00:25:44,310
and that's going to satisfy the constraints that we're using to check to see if you can grab onto a ceiling, right?

391
00:25:44,810 --> 00:25:46,231
Very easy to iterate on from here.

392
00:25:47,331 --> 00:25:48,592
So you've, at this point...

393
00:25:48,976 --> 00:25:52,459
Let's say you've made your first pass of your prototype, right?

394
00:25:52,479 --> 00:25:55,783
You have an idea and you've executed it in PICO-8 in some form,

395
00:25:55,803 --> 00:25:58,365
and you want to share it with either other team members,

396
00:25:58,505 --> 00:26:01,488
or you want to get player feedback to see how it feels, right?

397
00:26:02,069 --> 00:26:03,550
How do you do that? How do you share your game?

398
00:26:05,002 --> 00:26:06,042
It's quite easy.

399
00:26:06,842 --> 00:26:10,743
So, you can run a command that says save the name of your game dot png.

400
00:26:10,823 --> 00:26:12,763
This saves it in a cart, right?

401
00:26:12,803 --> 00:26:19,284
A Pico-8 cart is just a very, very small png file that you can load into a Pico-8 console.

402
00:26:19,664 --> 00:26:24,705
You can see here all of the modified Celeste 2 here that I didn't remove a lot of stuff from.

403
00:26:24,765 --> 00:26:29,286
I removed the grappling hook from, and I removed the compression tools from, and I added some other stuff.

404
00:26:29,466 --> 00:26:31,527
That's 36 kilobytes all together.

405
00:26:31,627 --> 00:26:33,427
It's a very, very, very small file.

406
00:26:34,189 --> 00:26:37,631
And this can be loaded into any Pico 8 console by using the load command,

407
00:26:37,791 --> 00:26:40,534
or just by clicking and dragging the file into the console.

408
00:26:40,634 --> 00:26:43,916
And then hit Ctrl-R, that'll load it, and then you can just—

409
00:26:43,936 --> 00:26:45,137
you're off to the races. Now you can go.

410
00:26:45,457 --> 00:26:45,718
Alright?

411
00:26:46,538 --> 00:26:49,961
But if you want to share it with other people who are not internal,

412
00:26:50,081 --> 00:26:51,022
or who don't have Pico 8,

413
00:26:51,542 --> 00:26:55,585
or for whatever reason, if you don't want the code that you're sharing around to be viewable,

414
00:26:55,645 --> 00:26:57,687
right, if you don't want people to have access to the source,

415
00:26:58,127 --> 00:26:59,288
there are other ways of doing it too.

416
00:27:00,237 --> 00:27:02,379
You can export it as a web page, right?

417
00:27:02,519 --> 00:27:04,620
Export your thing.html.

418
00:27:04,980 --> 00:27:07,542
It spits out an HTML file and a JavaScript file.

419
00:27:07,982 --> 00:27:11,264
And now you can host this on itch.io for people to play.

420
00:27:11,584 --> 00:27:14,906
You can hand this to anybody to open in a web browser.

421
00:27:15,947 --> 00:27:17,948
If you have an internal company website,

422
00:27:18,408 --> 00:27:20,429
you can host it on your internal company website

423
00:27:20,469 --> 00:27:23,691
and tell your fellow employees to go check out

424
00:27:23,751 --> 00:27:25,953
your network website, and then they can just go play it

425
00:27:26,013 --> 00:27:26,953
and give you feedback, right?

426
00:27:27,454 --> 00:27:28,134
And there's a full.

427
00:27:28,822 --> 00:27:31,144
web integration player for Pico 8 files.

428
00:27:32,045 --> 00:27:34,728
But if you also don't want to do that, right, if you just want to give them executable,

429
00:27:34,748 --> 00:27:37,790
you can just give them an executable. You just export something .bin

430
00:27:37,850 --> 00:27:40,553
and it generates an executable for any kind of

431
00:27:41,173 --> 00:27:43,735
platform you're likely to be running it on. It's got a Linux

432
00:27:43,776 --> 00:27:46,618
version, then an OS X version, then a Windows version. You just give them

433
00:27:46,658 --> 00:27:49,320
the zip file and in there is your executable

434
00:27:49,741 --> 00:27:52,904
and then they can just play, right? It's just compiled

435
00:27:53,064 --> 00:27:55,806
code. So, I do want to

436
00:27:55,866 --> 00:27:56,186
note here...

437
00:27:56,920 --> 00:28:04,725
That there are some kinds of games which are not especially fast to prototype in PICO-8, right?

438
00:28:04,745 --> 00:28:09,727
3D games, like this is a version of Doom called POOM that somebody made in PICO-8.

439
00:28:09,767 --> 00:28:14,890
It's actually a small team of people over a long period of time, a lot of work to make this very, very cool thing.

440
00:28:15,805 --> 00:28:20,988
And it works great, but this is not their rapid development.

441
00:28:21,028 --> 00:28:22,709
This took a lot of work to make happen.

442
00:28:22,749 --> 00:28:26,971
So these kinds of 3D games, you can see similarly,

443
00:28:27,032 --> 00:28:29,513
we have a port of Virtua Racing.

444
00:28:31,134 --> 00:28:34,155
Also, perfectly possible, very doable in PICO-8.

445
00:28:34,596 --> 00:28:36,337
Ignore my terrible play here for a moment.

446
00:28:36,957 --> 00:28:39,458
You can see there are basic polygons,

447
00:28:39,518 --> 00:28:41,599
and there's a really cool dithering effect,

448
00:28:41,659 --> 00:28:44,101
and you have a little modeled car, and he moves around.

449
00:28:44,521 --> 00:28:45,401
All very possible.

450
00:28:45,823 --> 00:28:49,805
But a lot of work and probably not fast for your prototyping.

451
00:28:50,266 --> 00:28:53,848
The other notable limitation is text-based games or text-heavy games.

452
00:28:53,928 --> 00:28:57,610
This is a PICO-8 cart that has the first three chapters of A Tale of Two Cities,

453
00:28:58,531 --> 00:29:01,753
which works fine but requires a bit of finagling.

454
00:29:01,773 --> 00:29:06,576
So if you're planning to just write your strings right in the code as raw data

455
00:29:07,076 --> 00:29:09,418
and you need a lot of them, like a lot, a lot of them,

456
00:29:09,838 --> 00:29:12,020
maybe consider additional or different tooling.

457
00:29:13,201 --> 00:29:18,544
So, to wrap things up, I use PICO-8. PICO-8 gives you really useful constraints for making your prototypes,

458
00:29:18,844 --> 00:29:24,868
making them really, really quickly, and making them in a way that's very easy to share and export with other people.

459
00:29:25,968 --> 00:29:28,070
Anybody can play your PICO-8 game once you've made it.

460
00:29:29,510 --> 00:29:31,510
So thank you all so much for coming.

461
00:29:32,190 --> 00:29:33,151
My name is Matt Lindsey.

462
00:29:33,191 --> 00:29:36,592
You can find me on Twitter if you want to talk to me about PICO-8 or anything else.

463
00:29:36,792 --> 00:29:37,912
I'm at Matt Lindsey.

464
00:29:38,872 --> 00:29:45,454
This talk was largely developed from a development blog I'm writing for a little PICO-8 game I'm making called Ball Ninja.

465
00:29:46,114 --> 00:29:50,015
And if you want to read about that or other PICO-8 development things as I work on them,

466
00:29:50,035 --> 00:29:50,935
you can find me on Twitter.

467
00:29:51,606 --> 00:29:54,808
If you want to see this project as it goes on, you can just go to ball.ninja,

468
00:29:55,108 --> 00:30:00,032
which is also where I'm going to upload the carts I made specifically for this presentation,

469
00:30:00,072 --> 00:30:01,133
if you want to play with them yourselves.

470
00:30:02,053 --> 00:30:03,574
Thank you all so much for coming.

471
00:30:03,934 --> 00:30:06,316
I've been Matt Lindsay. I hope you all have a good GDC.

472
00:30:06,416 --> 00:30:07,577
It's been an honor to be here.

473
00:30:08,257 --> 00:30:09,778
Thank you all so much. Bye!

