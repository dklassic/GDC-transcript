1
00:00:04,735 --> 00:00:08,157
Hey everybody, so in case you're not familiar with our work.

2
00:00:10,499 --> 00:00:12,880
My name is Aaron Boutier, I'm from Clay Entertainment.

3
00:00:12,980 --> 00:00:15,322
I worked on the Shank series and Mark of the Ninja.

4
00:00:16,002 --> 00:00:19,464
And I'm Jeff Agala, I'm the creative director at Clay Entertainment.

5
00:00:20,225 --> 00:00:22,426
Clay is a small game studio up in Vancouver.

6
00:00:23,367 --> 00:00:26,569
We've worked on the critically acclaimed game Mark of the Ninja,

7
00:00:26,969 --> 00:00:31,331
the whole Shank series, and more recently Don't Starve,

8
00:00:31,612 --> 00:00:33,453
and our new game, Invisible Ink.

9
00:00:34,939 --> 00:00:36,400
So I just want to get a feel for the room.

10
00:00:36,540 --> 00:00:38,581
How many of you are artists or animators?

11
00:00:40,263 --> 00:00:42,304
Nice.

12
00:00:42,384 --> 00:00:43,525
Designers or producers?

13
00:00:45,046 --> 00:00:45,607
I know you guys.

14
00:00:46,868 --> 00:00:48,289
And how about engineers?

15
00:00:49,470 --> 00:00:49,650
Woo.

16
00:00:49,730 --> 00:00:50,050
All right.

17
00:00:51,591 --> 00:00:54,513
OK, so today we're obviously going to talk a lot about art,

18
00:00:54,613 --> 00:00:55,894
but we're also going to talk about how

19
00:00:55,954 --> 00:00:56,915
it benefits our production.

20
00:00:57,275 --> 00:00:58,677
So there's going to be a little bit for everybody.

21
00:01:00,572 --> 00:01:04,655
So at Klay, we wanted to bring the appeal of classical

22
00:01:04,715 --> 00:01:06,156
hand-drawn animation to games.

23
00:01:07,678 --> 00:01:09,819
We're both traditionally trained animators,

24
00:01:10,400 --> 00:01:14,864
and we wanted to kind of base our whole style for the studio

25
00:01:14,964 --> 00:01:15,945
around those ideas.

26
00:01:17,806 --> 00:01:21,529
But high-quality 2D animation has a lot of issues,

27
00:01:21,690 --> 00:01:26,233
like obviously memory, texture, budgets, and runtime issues.

28
00:01:27,197 --> 00:01:30,079
So we wanted to create a process that supported game development

29
00:01:30,579 --> 00:01:32,821
and the fast iteration cycle that we have at Clay.

30
00:01:33,121 --> 00:01:34,802
So over the years, we built a hybrid

31
00:01:35,062 --> 00:01:38,104
of a traditional animation system and a flash system,

32
00:01:38,424 --> 00:01:40,885
which we're going to go through with you right now.

33
00:01:43,127 --> 00:01:46,569
Yeah, so just using this shank knife attack as an example,

34
00:01:46,589 --> 00:01:48,870
I'm going to run you through kind of our rough animation

35
00:01:48,890 --> 00:01:51,852
process through to final symbol cleanup.

36
00:01:55,182 --> 00:01:58,023
So as many, I'm sure many of you know, we work on Cintiqs digitally.

37
00:01:59,344 --> 00:02:03,826
This makes our process more efficient, not having to jump around scanning images, this and that.

38
00:02:06,046 --> 00:02:12,649
Okay, yeah, so when I start roughing out a new character,

39
00:02:12,669 --> 00:02:15,690
I start by learning the model, learning how to draw the character.

40
00:02:16,430 --> 00:02:19,692
I break it down into its basic forms and shapes so I can easily draw it from any angle.

41
00:02:20,572 --> 00:02:22,513
Any of you animators out there, you know how this works, obviously.

42
00:02:24,734 --> 00:02:30,436
At the start of the production, especially for platformers, I like to rough out a lot of the states as quickly as possible.

43
00:02:30,897 --> 00:02:36,679
We know we're going to need runs, jumps, attacks, wall climbs, whatever we think we initially need for the game.

44
00:02:37,719 --> 00:02:42,501
So at this point, we can get those done really quickly, pass those off to the designers for iteration and game,

45
00:02:43,421 --> 00:02:45,982
while we work on cleaning up and finishing the rest of the animation.

46
00:02:50,424 --> 00:02:50,864
At this point...

47
00:02:52,123 --> 00:02:54,765
We're also kind of working out the design. I mean, we have our initial character design,

48
00:02:55,265 --> 00:03:02,410
but after you've roughed out a character for like 300 plus drawings, you get a really good feel for what's actually working and what's not working about the character.

49
00:03:03,591 --> 00:03:05,532
So we're still adjusting, working on the design.

50
00:03:06,593 --> 00:03:09,374
And, yeah, I'm going to move on from there.

51
00:03:09,394 --> 00:03:12,917
I'm going to move on to tightening up our poses for builds.

52
00:03:13,377 --> 00:03:20,002
We're going to get into our build process a little bit later, but first, I'd like to touch on how we clean up our drawings.

53
00:03:22,909 --> 00:03:28,453
So we used to actually create pose sheets and expression sheets in Sketchbook or Photoshop

54
00:03:28,873 --> 00:03:29,754
and bring those into Flash.

55
00:03:30,374 --> 00:03:34,597
But like I said, I found that working in Flash from start to finish is our most efficient

56
00:03:34,637 --> 00:03:34,978
pipeline.

57
00:03:36,925 --> 00:03:41,587
these are the storytelling poses that the player is really going to see and feel throughout the entire game.

58
00:03:41,987 --> 00:03:45,868
So I want to make sure that I'm focusing on keeping the character on model,

59
00:03:45,928 --> 00:03:51,311
I'm tracking details at this point for the build process, looking at volumes, overall appeal.

60
00:03:51,731 --> 00:03:54,452
At this point it's really about getting great drawings that read,

61
00:03:54,932 --> 00:03:57,693
so we'll be tracking, while I'm working I'm zooming in and out a lot

62
00:03:57,713 --> 00:04:02,575
just to make sure that expressions, hands, just the overall pose is actually reading.

63
00:04:06,436 --> 00:04:10,580
So basically everything to this stage is traditional animation.

64
00:04:11,000 --> 00:04:12,602
We just do it digitally in Cintiq.

65
00:04:13,062 --> 00:04:16,805
So that is the core element that we build all our animation from.

66
00:04:18,687 --> 00:04:22,811
At the build stage is where we start taking advantage of all the benefits that Flash gives us.

67
00:04:24,753 --> 00:04:27,475
So in normal traditional animation, as most of you know...

68
00:04:27,875 --> 00:04:29,275
You have to clean up every single frame,

69
00:04:29,435 --> 00:04:31,917
and then do clean up every in-between and color those.

70
00:04:32,557 --> 00:04:35,258
Instead of doing that, in Flash, we clean up all the drawings

71
00:04:35,298 --> 00:04:38,560
with vector line, and then separate each joint

72
00:04:39,060 --> 00:04:41,221
as a separate piece as its own symbol.

73
00:04:41,801 --> 00:04:43,742
A symbol in Flash is a reference object

74
00:04:44,063 --> 00:04:46,284
that has an array of images on a timeline.

75
00:04:47,924 --> 00:04:50,185
So at the end of this process, we

76
00:04:50,245 --> 00:04:52,226
end up with a character that's split up

77
00:04:52,306 --> 00:04:53,827
into an array of body pieces.

78
00:04:53,887 --> 00:04:55,008
So we have a large library.

79
00:04:56,504 --> 00:04:58,905
Overall, in the process, this saves us a lot of time

80
00:04:58,985 --> 00:05:01,546
from cleaning up and coloring new animation

81
00:05:02,286 --> 00:05:03,627
as we clean up and color it

82
00:05:03,727 --> 00:05:05,187
before we actually get into animation.

83
00:05:11,169 --> 00:05:13,790
That's not to say we don't do a lot of building.

84
00:05:14,890 --> 00:05:16,291
If you look at this image right here,

85
00:05:16,751 --> 00:05:18,031
this is not a sprite sheet.

86
00:05:18,532 --> 00:05:20,572
This is all the storytelling poses

87
00:05:20,592 --> 00:05:23,233
that Aaron was talking about that we built.

88
00:05:23,673 --> 00:05:25,194
So for Mark of the Ninja,

89
00:05:26,143 --> 00:05:28,564
This is probably like a fifth of his set.

90
00:05:29,765 --> 00:05:32,406
So these are all separated into individual joints,

91
00:05:32,466 --> 00:05:35,627
individual pieces, so we get a wide variety of hands,

92
00:05:35,727 --> 00:05:38,249
legs, body poses, facial expressions

93
00:05:39,289 --> 00:05:41,690
that our animators could use to get that fluid,

94
00:05:41,750 --> 00:05:43,491
dynamic animation that we have in our games.

95
00:05:45,732 --> 00:05:47,653
So I just took one of those poses that you just saw

96
00:05:48,093 --> 00:05:49,454
and separated it into the pieces,

97
00:05:49,534 --> 00:05:53,016
so it's very clear how many points of articulation

98
00:05:53,036 --> 00:05:53,916
we have in our games.

99
00:05:55,550 --> 00:05:59,652
So each one of these is a symbol that has multiple views inside

100
00:05:59,672 --> 00:05:59,873
of it.

101
00:06:00,293 --> 00:06:02,274
But as you can see, every part of the ninja

102
00:06:02,374 --> 00:06:03,935
is its own separate object.

103
00:06:08,418 --> 00:06:11,300
We take this approach because there's

104
00:06:11,480 --> 00:06:15,582
two major issues with doing HD sprites for animation.

105
00:06:15,963 --> 00:06:18,324
For us, it was obviously a runtime issue

106
00:06:18,344 --> 00:06:23,347
of trying to get full HD sprites running at 60 frames

107
00:06:23,367 --> 00:06:24,808
per second in the game engine.

108
00:06:26,493 --> 00:06:28,194
We actually did a test for Mark of the Ninja.

109
00:06:28,294 --> 00:06:30,035
We wanted to do fully traditional.

110
00:06:30,835 --> 00:06:33,017
So we did a basic set of his animation,

111
00:06:33,117 --> 00:06:35,718
his runs, his jumps, his attacks, his kills.

112
00:06:36,499 --> 00:06:38,440
We put it in game and it ended up being 40 megs.

113
00:06:38,920 --> 00:06:41,681
And that didn't work out with our 256 memory limit

114
00:06:42,022 --> 00:06:43,282
for just the one main character.

115
00:06:43,302 --> 00:06:44,943
And this wasn't even his full set of animation.

116
00:06:44,983 --> 00:06:46,864
This was a small subset of his animation.

117
00:06:47,345 --> 00:06:49,006
So that was scrapped instantly.

118
00:06:49,806 --> 00:06:51,387
But after converting to builds,

119
00:06:51,587 --> 00:06:53,368
his memory footprint for the entire game,

120
00:06:53,388 --> 00:06:54,889
I think, ended up at 12 megabytes.

121
00:06:58,690 --> 00:07:01,050
So now I'm just going to talk a little bit about our symbol animation process,

122
00:07:01,731 --> 00:07:04,131
just basically polishing the animation after we've got our builds in.

123
00:07:08,533 --> 00:07:12,414
So I take the character pose, which is symbolized and segmented,

124
00:07:12,914 --> 00:07:14,634
and distribute that character symbols to layers,

125
00:07:15,274 --> 00:07:16,015
put those in a folder,

126
00:07:16,035 --> 00:07:19,356
and then I have a marker layer on my timeline that allows me to

127
00:07:19,756 --> 00:07:22,036
basically just set a key in my folder, and it'll set a key,

128
00:07:22,336 --> 00:07:26,398
it'll set keys across the board for that particular pose.

129
00:07:27,285 --> 00:07:30,326
As you can see, we're using labels on our timeline.

130
00:07:30,606 --> 00:07:33,507
Those labels are actually called by our state graph by the designers.

131
00:07:34,828 --> 00:07:38,749
In this case, it's a knife attack, so it has a knife pre, a knife attack, and a knife post.

132
00:07:39,409 --> 00:07:44,091
And by segmenting it that way, it allows us to know where we're going to break into the animation,

133
00:07:44,711 --> 00:07:49,213
and we can essentially branch out of those states at any point we want based on player input.

134
00:07:52,279 --> 00:07:54,841
Like Jeff was saying, the game runs at 60 frames a second.

135
00:07:55,041 --> 00:07:58,503
So the nice thing, we're animating at 30 frames in Flash.

136
00:07:58,843 --> 00:08:00,485
And using the tweens, it actually

137
00:08:00,505 --> 00:08:02,586
allows us to interpolate that anim data at runtime

138
00:08:03,046 --> 00:08:04,527
for a much smoother animation than we

139
00:08:04,547 --> 00:08:07,369
could get if we weren't interpolating.

140
00:08:07,969 --> 00:08:10,531
Essentially, to me, it's kind of the difference between ones

141
00:08:10,571 --> 00:08:11,512
and twos, traditionally.

142
00:08:12,252 --> 00:08:14,574
In this case, we can only animate on ones,

143
00:08:14,674 --> 00:08:15,955
but we're actually getting that interpolation.

144
00:08:17,876 --> 00:08:20,938
And just to address texture budget again, while animating,

145
00:08:21,965 --> 00:08:24,047
You know, at this stage, we can still be building new assets.

146
00:08:24,988 --> 00:08:27,431
In this case, if I want to create new breakdown keys

147
00:08:28,091 --> 00:08:31,014
to round up my animation, if I need an expression or a new hand

148
00:08:31,075 --> 00:08:33,377
or a new asset of any kind, I can create that.

149
00:08:33,978 --> 00:08:35,459
But at this stage, we really are trying

150
00:08:35,479 --> 00:08:37,642
to put a cap on how much building we're doing.

151
00:08:42,246 --> 00:08:43,448
So here's an example of the head comp.

152
00:08:44,349 --> 00:08:48,974
The head comp is much like any other regular symbol, it's just that for the heads we like

153
00:08:48,994 --> 00:08:54,701
to put the facial features, we embed those small facial symbols into the head so that

154
00:08:54,961 --> 00:08:58,845
when we're animating on the normal timeline we can actually rotate and skew that head

155
00:08:59,106 --> 00:09:02,490
as a whole rather than having all those smaller symbols kind of flying all over the place

156
00:09:02,530 --> 00:09:04,071
and tweening and being like where the heck did the eye go.

157
00:09:05,432 --> 00:09:10,475
It allows us to have a nice kind of expression library as well, and it does kind of lend

158
00:09:10,976 --> 00:09:14,037
nicely to skinning later on, which we'll talk about here.

159
00:09:16,639 --> 00:09:16,879
Jeffrey?

160
00:09:18,300 --> 00:09:23,463
I just wanted to clarify, too, that we use Flash as a production tool only and not as

161
00:09:23,503 --> 00:09:24,124
a runtime tool.

162
00:09:24,144 --> 00:09:25,324
So we don't have any action script.

163
00:09:25,644 --> 00:09:26,245
We don't have any...

164
00:09:27,952 --> 00:09:30,294
Flash player elements in any of our games.

165
00:09:30,635 --> 00:09:32,957
It's all, we just use this as a production art tool.

166
00:09:33,717 --> 00:09:35,739
It's great for that because we could create custom tools

167
00:09:36,119 --> 00:09:38,802
for ourselves and we obviously created a custom exporter,

168
00:09:39,082 --> 00:09:40,583
actually written by Kevin who's sitting over there.

169
00:09:43,666 --> 00:09:46,628
And our custom exporter exports into two files.

170
00:09:46,709 --> 00:09:49,251
It exports a texture atlas that's a raster image

171
00:09:50,512 --> 00:09:53,074
and a animation file that is just animation data.

172
00:09:53,974 --> 00:09:58,336
We love Flash because it's a vector format and we could export at different sizes.

173
00:09:58,416 --> 00:10:04,740
There was a point in Shank 2 where we were running into texture memory limitations.

174
00:10:06,319 --> 00:10:09,562
HD multi-planing backgrounds with a whole bunch of explosions

175
00:10:10,023 --> 00:10:11,564
and a whole bunch of goons attacking Shank,

176
00:10:11,684 --> 00:10:14,507
and we're like, we wanted to see how we could evaluate this

177
00:10:14,547 --> 00:10:16,749
and make this run better, so we got up the engine

178
00:10:16,789 --> 00:10:20,112
to spit out a list of heavy assets.

179
00:10:20,632 --> 00:10:22,474
And it was just a matter of getting our exporter

180
00:10:22,494 --> 00:10:23,935
to export those at lower resolutions,

181
00:10:23,975 --> 00:10:26,878
since it's a vector format, exporting to raster,

182
00:10:27,198 --> 00:10:28,339
and that quickly solved that problem

183
00:10:28,379 --> 00:10:29,220
for that section of the game.

184
00:10:32,817 --> 00:10:34,277
Like I said, there's two files.

185
00:10:34,297 --> 00:10:37,399
We have an animation file and a texture atlas.

186
00:10:37,739 --> 00:10:41,000
So that allows us to do skinning much like any 3D project.

187
00:10:41,420 --> 00:10:43,181
So now we're kind of going to that realm

188
00:10:43,301 --> 00:10:45,982
of reuse animation, complete skinning.

189
00:10:46,582 --> 00:10:47,723
The skinning is just as easy.

190
00:10:47,763 --> 00:10:49,524
You could take our texture atlas that we have

191
00:10:49,544 --> 00:10:51,144
for our character, our builds, our libraries,

192
00:10:51,184 --> 00:10:51,985
whatever you want to call it.

193
00:10:52,584 --> 00:10:55,707
and take that into Photoshop and do new art on it.

194
00:10:56,147 --> 00:10:59,091
For these characters for Shank, we just took them in Flash

195
00:10:59,411 --> 00:11:01,153
and just redid some of the art.

196
00:11:01,533 --> 00:11:04,196
So as you can see here, these were the unlockable player

197
00:11:04,236 --> 00:11:07,079
skins for Shank 1, which as you play the rest of the game,

198
00:11:07,099 --> 00:11:07,560
you got more.

199
00:11:08,702 --> 00:11:11,824
it just leads to additional content to be created

200
00:11:11,964 --> 00:11:14,425
without all the hard work of redoing the animation.

201
00:11:14,845 --> 00:11:17,987
If this was a full 2D traditional process,

202
00:11:18,407 --> 00:11:21,488
we would have to hand draw each frame of animation

203
00:11:21,608 --> 00:11:23,489
over again, clean it up, and color it

204
00:11:23,789 --> 00:11:24,710
just to add a new outfit.

205
00:11:24,990 --> 00:11:27,531
Here we just do it once for all the elements

206
00:11:28,271 --> 00:11:30,493
of that character, and it allows us to have

207
00:11:30,593 --> 00:11:31,953
this much diversity in our game.

208
00:11:34,594 --> 00:11:37,676
And the one big exciting part that this brought,

209
00:11:38,241 --> 00:11:43,003
forward to is for one of our new games, Don't Starve, it allowed us to open it up to the

210
00:11:43,063 --> 00:11:48,545
community for mods and user generated content, which obviously leads to better engagement

211
00:11:48,565 --> 00:11:53,427
with your players and all that. So we just, for Don't Starve, we just put out our texture

212
00:11:53,467 --> 00:11:57,868
atlas. We just put out like this image that you see here of a whole bunch of different

213
00:11:57,888 --> 00:12:01,590
views of the character. It's for the community to create their own characters and if you

214
00:12:01,630 --> 00:12:04,971
go on Steam, there's a whole bunch of different mods you can play as a whole bunch of different

215
00:12:04,991 --> 00:12:06,192
characters and it's awesome.

216
00:12:08,160 --> 00:12:12,444
So to conclude, our system is a hybrid system.

217
00:12:12,604 --> 00:12:15,126
It's completely based off traditional animation,

218
00:12:15,887 --> 00:12:20,110
but we use Flash to get to the efficiencies

219
00:12:20,170 --> 00:12:21,191
and have that run in game.

220
00:12:22,332 --> 00:12:24,674
And it's awesome that we use one program for the whole thing

221
00:12:24,694 --> 00:12:26,956
because it makes life a lot simpler for the artist.

222
00:12:27,377 --> 00:12:29,118
We've shown you our character process,

223
00:12:29,518 --> 00:12:33,081
but we create most of our art in Flash for all our games.

224
00:12:33,402 --> 00:12:35,123
So we don't only do the characters,

225
00:12:35,163 --> 00:12:35,403
we do.

226
00:12:36,030 --> 00:12:39,633
like a lot of the effects animation, a lot of the prop animation.

227
00:12:39,673 --> 00:12:43,997
We even do our UIs and all the cinematics that you see from our games in Flash.

228
00:12:44,297 --> 00:12:48,601
So we use this one process, this one system to create all our assets,

229
00:12:48,781 --> 00:12:50,042
except for the backgrounds pretty much.

230
00:12:51,963 --> 00:12:55,186
It allows us to be a very positive part of our production

231
00:12:55,686 --> 00:12:57,007
and not a production bottleneck.

232
00:12:57,127 --> 00:12:59,309
It allows us to work fast, work efficiently,

233
00:12:59,750 --> 00:13:02,132
and be, you know, great artists for the games industry

234
00:13:02,172 --> 00:13:04,293
as opposed to just trying to do good art.

235
00:13:05,637 --> 00:13:10,840
I just remembered that during the animation portion of my talk I forgot to talk about handling breakdowns.

236
00:13:12,061 --> 00:13:16,323
Because I feel like that's a big part of the process when you have flash keys.

237
00:13:17,023 --> 00:13:19,845
It's like, how do you, you know, you want to flesh out that animation.

238
00:13:20,445 --> 00:13:22,946
And so I'm just going to jump back and kind of talk about that briefly.

239
00:13:28,131 --> 00:13:35,504
Yeah, so for me personally, I find that I just think of basically favoring the key as I work into my next key.

240
00:13:35,544 --> 00:13:39,892
So once I have my main keys laid out, I basically just work straight ahead.

241
00:13:41,257 --> 00:13:43,458
and I'm constantly flipping back and forth watching my arcs,

242
00:13:44,238 --> 00:13:47,039
you know, even like, it's so simple,

243
00:13:47,059 --> 00:13:48,220
but like foot slip and stuff like that.

244
00:13:48,240 --> 00:13:49,741
In this case, you know, Shank is lunging,

245
00:13:49,801 --> 00:13:51,181
so it's okay to slide his foot forward

246
00:13:51,201 --> 00:13:52,222
and have him put his weight on it.

247
00:13:52,562 --> 00:13:53,803
But I'm not just like shifting Shank

248
00:13:53,823 --> 00:13:55,964
all over the place on his stage for kicks.

249
00:13:56,064 --> 00:13:58,025
I mean, we'll do that in engine at runtime.

250
00:13:59,846 --> 00:14:02,007
So basically to make a breakdown, I just, again,

251
00:14:02,027 --> 00:14:03,387
like I said, I just copy the pose over,

252
00:14:03,647 --> 00:14:05,568
just duplicate it and make adjustments from there

253
00:14:05,588 --> 00:14:07,970
if I need to swap out new arms, if I need new expressions.

254
00:14:08,810 --> 00:14:10,631
One of the things I know that I do often,

255
00:14:11,390 --> 00:14:14,812
is, you know, basically take two keys that I know are going to tween nicely,

256
00:14:15,033 --> 00:14:18,335
because they share many common layers within the folder,

257
00:14:18,635 --> 00:14:22,138
and I'll just set a tween, key that tween. It'll break, some of it will break for sure,

258
00:14:22,978 --> 00:14:25,620
but it's at this point that I can then just fix what's breaking,

259
00:14:26,000 --> 00:14:28,702
watch my arcs, and flesh out my animation.

260
00:14:28,843 --> 00:14:30,644
Yeah, like I said, I like to work straight ahead here because

261
00:14:31,124 --> 00:14:34,206
you get to kind of maintain the flow and the life of the animation.

262
00:14:34,226 --> 00:14:37,189
Thanks.

263
00:14:37,349 --> 00:14:38,349
And the...

264
00:14:39,934 --> 00:14:43,516
People have asked us why we use Flash and if there's other programs we would use.

265
00:14:44,096 --> 00:14:46,717
Like, there's a lot of great programs out there.

266
00:14:48,438 --> 00:14:49,538
There's like Toon Boom.

267
00:14:50,018 --> 00:14:52,599
I know it's a great program to do traditional and 2D animation.

268
00:14:52,960 --> 00:14:54,080
So that's a viable product.

269
00:14:55,060 --> 00:14:58,202
And recently we incorporated Spriter into our process.

270
00:14:58,982 --> 00:15:04,044
So for Spriter, it allows us to do the symbol animation side of this talk

271
00:15:04,444 --> 00:15:06,225
instead of like the traditional animation side.

272
00:15:06,245 --> 00:15:08,406
So if I was going to use Spriter for our whole...

273
00:15:09,747 --> 00:15:12,989
pipeline, I would almost do all the traditional stuff still in

274
00:15:13,009 --> 00:15:16,292
Flash, and if you want to use simple animation in Spryder,

275
00:15:16,312 --> 00:15:19,014
you could totally do that. We've actually allowed Spryder to work

276
00:15:19,134 --> 00:15:22,277
in Don't Starve, so if you're a modder, Spryder animation

277
00:15:22,317 --> 00:15:26,760
actually works in Don't Starve. And that's it. That's how we do

278
00:15:26,800 --> 00:15:29,482
Flash animation and traditional animation at Clay Entertainment.

279
00:15:30,043 --> 00:15:31,784
Any questions at this point?

280
00:15:41,238 --> 00:15:43,682
Hi guys, Ryan from Untold Entertainment.

281
00:15:44,003 --> 00:15:47,829
We use a similar process, but I have trouble with joint breakages.

282
00:15:47,869 --> 00:15:51,476
Do you have any tips on, you know, when you're bending those knees, you got sharp angles,

283
00:15:51,516 --> 00:15:53,479
you see all sorts of corners on elbows and stuff.

284
00:15:53,499 --> 00:15:55,202
Like, what are some of the ways you overcome that?

285
00:15:56,718 --> 00:15:58,401
I guess I'll take this one.

286
00:15:58,781 --> 00:16:04,769
Like I said, I find that a lot of it is in the character design for me.

287
00:16:04,810 --> 00:16:06,151
Because we know we're going to segment the character.

288
00:16:06,171 --> 00:16:09,696
It's like how do you design that character so that your break is just minimized in a lot of ways?

289
00:16:09,857 --> 00:16:10,377
Yes, how?

290
00:16:12,407 --> 00:16:20,030
I could use Ninja as an example. If you're familiar with the Ninja design, he actually, he has these like two flaps that come down below his belt.

291
00:16:20,410 --> 00:16:23,372
And those are great for secondary action, really have like nice flow when we're animating.

292
00:16:23,752 --> 00:16:27,413
But those cover those hip joints. Like that's what those are functionally doing for me.

293
00:16:27,573 --> 00:16:31,195
It's a part of the design, but it's also like, hey, I know those hips are going to break a lot.

294
00:16:31,615 --> 00:16:34,796
So I'm covering them with these additional patches that I can move around.

295
00:16:36,118 --> 00:16:41,641
Knees? Oh, knees, yeah. Ninja, if you'll notice, I take the knee, the leg, from here to the knee,

296
00:16:42,562 --> 00:16:46,564
and this part of the leg, I just keep it below that all the time. He's got a baggy pant,

297
00:16:47,204 --> 00:16:52,446
so I can move this shape, I can change this shape all over the place, but I just about always keep

298
00:16:52,486 --> 00:16:56,188
that lower leg below there. And I can, you know, I can even just like put it behind. If his leg

299
00:16:56,208 --> 00:17:01,291
bends a lot, you'll just see like no leg and a bit of a bit of foot. And yeah, I just, I'm just

300
00:17:01,311 --> 00:17:02,992
hiding stuff. Hide the joints. Yeah.

301
00:17:07,809 --> 00:17:09,290
I have more of a process question.

302
00:17:09,510 --> 00:17:12,372
So once you're done with an animation and export it,

303
00:17:12,772 --> 00:17:14,734
do you guys have a tool for previewing animations

304
00:17:14,794 --> 00:17:16,815
and testing them, or do you just sort of hand the file off

305
00:17:16,835 --> 00:17:18,896
to an engineer and say, get it in there?

306
00:17:19,357 --> 00:17:20,958
I guess, how much does an artist do versus a tech art

307
00:17:20,978 --> 00:17:23,199
or an engineer or something like that?

308
00:17:23,279 --> 00:17:25,361
It really depends on which game we're working on.

309
00:17:25,861 --> 00:17:27,942
Sometimes it's really easy to hook up something in game

310
00:17:28,563 --> 00:17:31,224
by just spawning that object that can get created.

311
00:17:32,265 --> 00:17:34,206
And if you're doing iterations on an object,

312
00:17:34,266 --> 00:17:35,547
it's probably already hooked up in game.

313
00:17:36,244 --> 00:17:38,926
So there is definitely a little bit of hook up by the game designers for sure

314
00:17:38,946 --> 00:17:41,288
to see it running in the in-game engine

315
00:17:41,648 --> 00:17:43,990
but our animation is like

316
00:17:44,530 --> 00:17:47,713
pretty much like very truthful to the flash animation we do

317
00:17:48,473 --> 00:17:50,835
so the main issues like when we're testing builds

318
00:17:50,935 --> 00:17:53,197
like that we didn't do as part of the animation process

319
00:17:53,217 --> 00:17:54,238
we're just like doing the skinning

320
00:17:54,618 --> 00:17:56,879
we would always try to just replace the main character

321
00:17:56,899 --> 00:17:58,581
and it's as easy as replacing that file.

322
00:17:59,041 --> 00:17:59,661
So it's pretty quick.

323
00:17:59,701 --> 00:18:04,024
Just to speak to that again too, like I said, I can give them the rough animation stuff

324
00:18:04,044 --> 00:18:07,967
really quickly, so I'll just give them a run as fast as possible and they'll hook it up

325
00:18:08,067 --> 00:18:10,609
and I can review it before I even do any final symbol animation.

326
00:18:10,929 --> 00:18:11,489
So it's already there.

327
00:18:11,549 --> 00:18:13,751
Once I replace it with the symbol animation, it just goes.

328
00:18:18,095 --> 00:18:20,996
Hi. I'm actually the product manager at Toon Boom.

329
00:18:21,356 --> 00:18:23,717
And my name is Lily. Hi.

330
00:18:23,977 --> 00:18:27,058
I love Don't Starve. So I think you guys have done a superb job on that.

331
00:18:27,838 --> 00:18:38,641
We have recently released a new gaming version that has an export that goes directly from the animation that you do in Toon Boom to Unity and exports out.

332
00:18:38,721 --> 00:18:42,402
Very similar to how you guys do it with a sprite sheet and then you have the animation data separate.

333
00:18:42,882 --> 00:18:49,224
Some of our customers who have been doing that already have moved away from Flash because of the fact that Flash doesn't have a hierarchy system.

334
00:18:49,284 --> 00:18:51,445
So I'm wondering how you guys got around that.

335
00:18:52,205 --> 00:18:55,206
We found our hierarchy system not necessary.

336
00:18:55,226 --> 00:18:58,607
Like, as artists, it was basically, as you probably could see,

337
00:18:58,627 --> 00:19:00,368
though we're limited in time,

338
00:19:00,588 --> 00:19:04,389
as you probably could see, we do very high energy, like, super fast animation.

339
00:19:04,489 --> 00:19:07,790
And as artists, we don't want to be limited by rigs or hierarchies or anything like that.

340
00:19:07,870 --> 00:19:09,791
So the biggest hierarchy we have in our system is...

341
00:19:10,170 --> 00:19:12,093
how Eric explained how we have a head comp

342
00:19:12,113 --> 00:19:13,775
where it's like all the symbols are not a head.

343
00:19:14,155 --> 00:19:16,879
That's the only time we have a hierarchy in our system.

344
00:19:17,099 --> 00:19:19,742
So we basically could move any object

345
00:19:20,002 --> 00:19:21,725
wherever we want for like stretch,

346
00:19:22,065 --> 00:19:25,249
for like the smear poses to get like dynamic drawings.

347
00:19:25,429 --> 00:19:27,371
And it actually allows us to do a lot more freedom.

348
00:19:27,895 --> 00:19:29,236
than the Knot.

349
00:19:29,336 --> 00:19:31,598
So a program like Spriter also allows

350
00:19:31,938 --> 00:19:33,019
for hierarchies as well.

351
00:19:33,539 --> 00:19:34,460
And when I use that program,

352
00:19:34,500 --> 00:19:35,901
I don't even use the bone system.

353
00:19:35,961 --> 00:19:38,103
I just go straight flat on the stage

354
00:19:38,603 --> 00:19:40,564
and I can still get the same quality of animation.

355
00:19:41,485 --> 00:19:41,605
Thanks.

356
00:19:41,985 --> 00:19:44,007
Yeah.

357
00:19:44,467 --> 00:19:48,950
Yeah, another key aspect of Klay's visual aesthetic

358
00:19:49,050 --> 00:19:50,931
is like lighting and shading.

359
00:19:51,372 --> 00:19:53,373
I was wondering if there are any considerations

360
00:19:53,413 --> 00:19:55,635
that you take into effect when designing characters

361
00:19:55,715 --> 00:19:56,275
based on

362
00:19:57,042 --> 00:20:00,383
what effects might be applied to it later on?

363
00:20:00,983 --> 00:20:04,465
For most of our games, I think that kind of came into a lot

364
00:20:04,485 --> 00:20:07,626
with Mark of the Ninja, because we had two states of being

365
00:20:07,886 --> 00:20:08,927
in shadow and out of shadow.

366
00:20:08,947 --> 00:20:10,407
So those are completely two different builds.

367
00:20:11,568 --> 00:20:13,889
So with that, that was like, OK, we're

368
00:20:13,909 --> 00:20:15,589
going to have two different styles for the game.

369
00:20:15,629 --> 00:20:19,331
The character is going to be a traditional line drawn

370
00:20:19,791 --> 00:20:22,952
character for when they're out of shadow.

371
00:20:23,072 --> 00:20:23,933
And then when they're in shadow, they're

372
00:20:23,953 --> 00:20:25,573
going to be pretty much all dark with a white line.

373
00:20:26,390 --> 00:20:30,694
So yeah, we take that into consideration, but most of our stuff is like colored character with black lines

374
00:20:30,754 --> 00:20:34,978
So it makes it a lot easier. We actually bake our shadows in too. So if you look at this stuff closely

375
00:20:34,998 --> 00:20:38,061
It's like sometimes shadows will just flip and it's like yeah that happens

376
00:20:40,443 --> 00:20:40,943
One quick question

377
00:20:43,509 --> 00:20:48,611
I'm getting into flash animation myself, but I think I'm thinking too much like a 2D animator,

378
00:20:48,631 --> 00:20:52,012
and that I'm finding it difficult to find ways to save time by reusing shapes.

379
00:20:52,232 --> 00:20:57,113
Like, at what point do you make a judgment call to completely just redraw the arm or redraw the head?

380
00:20:58,393 --> 00:21:04,135
For me, it's just appeal. If you're trying to do something and reuse a symbol, and it's not an appealing drawing,

381
00:21:04,655 --> 00:21:07,216
just taking it at that base level and being like, I need to create a new asset because

382
00:21:07,636 --> 00:21:11,157
this arm is not doing what I need it to do. So I'll just create stuff anytime I need it.

383
00:21:12,173 --> 00:21:14,975
Yeah, so when you're like fighting with the pieces,

384
00:21:15,175 --> 00:21:15,895
just create a new one.

385
00:21:16,095 --> 00:21:16,635
It's a lot easier.

386
00:21:18,216 --> 00:21:20,957
If anybody who stayed between the two sessions,

387
00:21:22,037 --> 00:21:24,238
if you haven't got your pass scan,

388
00:21:24,278 --> 00:21:26,139
please scan it by the door when you guys exit,

389
00:21:26,459 --> 00:21:29,040
so we could get re-evaluated or something.

390
00:21:29,540 --> 00:21:31,001
Yeah, and we'll be in a wrap-up room

391
00:21:31,021 --> 00:21:32,881
if anybody wants to talk more about Flash Animation

392
00:21:32,901 --> 00:21:33,421
or anything like that.

393
00:21:34,542 --> 00:21:34,922
Yay, 2D.

