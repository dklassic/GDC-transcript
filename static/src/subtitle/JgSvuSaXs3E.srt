1
00:00:06,491 --> 00:00:07,452
So hi everyone.

2
00:00:08,592 --> 00:00:11,274
Welcome to this talk about data-driven gameplay effects

3
00:00:11,374 --> 00:00:11,934
on For Honor.

4
00:00:12,915 --> 00:00:14,395
Before we begin, I'd like to remind you

5
00:00:14,435 --> 00:00:17,497
to silence your phones, and also to please fill out

6
00:00:17,517 --> 00:00:19,038
the evaluation at the end of this talk.

7
00:00:20,459 --> 00:00:22,260
So my name is AurÃ©lie Lechevalier,

8
00:00:22,440 --> 00:00:25,001
and I'm a gameplay programmer at Ubisoft Montreal.

9
00:00:25,702 --> 00:00:27,783
I've been working there for about five years now,

10
00:00:28,023 --> 00:00:30,324
and I've worked on Rainbow Six, Child of Light,

11
00:00:30,784 --> 00:00:32,345
Shape Up, and For Honor.

12
00:00:33,486 --> 00:00:35,987
So I'm sure that many of you have played For Honor.

13
00:00:39,458 --> 00:00:40,900
Come on! Yes!

14
00:00:42,002 --> 00:00:47,552
But for those of you who don't know, it's an online multiplayer combat game.

15
00:00:47,792 --> 00:00:52,621
It's a fighting game, competitive, and let's watch a small trailer.

16
00:01:48,632 --> 00:01:51,713
So what are the modifiers?

17
00:01:52,694 --> 00:01:55,135
Modifiers are contextual gameplay effects.

18
00:01:55,575 --> 00:01:58,957
They serve to change the stats or the behavior of some

19
00:01:58,977 --> 00:02:00,118
of the entities in our game.

20
00:02:02,279 --> 00:02:05,661
So our fighters can apply status effects on their opponents.

21
00:02:06,701 --> 00:02:09,763
In our campaign, we wanted each of our bosses

22
00:02:09,803 --> 00:02:11,384
to feel unique and different.

23
00:02:12,925 --> 00:02:16,247
The feats are abilities that the player can unlock and activate

24
00:02:16,927 --> 00:02:18,128
along the course of a match.

25
00:02:19,584 --> 00:02:23,469
And finally, the gear directly modifies the character's stats.

26
00:02:25,613 --> 00:02:29,479
So what's the problem that we were trying to solve with this, with the modifiers?

27
00:02:30,220 --> 00:02:33,805
Essentially, all the systems I've talked about are all very similar.

28
00:02:34,731 --> 00:02:38,173
They're all trying to affect gameplay in very similar ways.

29
00:02:38,773 --> 00:02:41,934
And originally, the system was developed for the feats.

30
00:02:42,515 --> 00:02:44,816
And so the feats, we knew that we were going to have about

31
00:02:45,616 --> 00:02:47,937
72 unique feats, but we weren't sure what was going to

32
00:02:47,977 --> 00:02:49,058
go in those feats.

33
00:02:49,638 --> 00:02:52,979
So we needed to make our systems be very open and data

34
00:02:53,020 --> 00:02:55,341
driven and allow for experimentation.

35
00:02:57,201 --> 00:02:58,662
So here was how we did it.

36
00:02:59,307 --> 00:03:07,279
Basically entities in our game have a handler and that handler manages a list of modifiers and those modifiers contain

37
00:03:07,459 --> 00:03:13,848
effects. Effects are gameplay blocks written by the programmers that go and change something about that entity.

38
00:03:16,231 --> 00:03:16,351
So

39
00:03:17,779 --> 00:03:21,201
The effects that you're going to need really depend on your game.

40
00:03:21,822 --> 00:03:25,525
But for us, this came into five major categories.

41
00:03:25,725 --> 00:03:30,148
So modifying stats, disabling capabilities, adding tags,

42
00:03:30,608 --> 00:03:33,250
removing modifiers, and creating new effects.

43
00:03:33,711 --> 00:03:34,491
So let's go over that.

44
00:03:35,992 --> 00:03:40,216
So modifying stats, only by a certain percentage.

45
00:03:40,336 --> 00:03:41,397
So that's how we did it.

46
00:03:41,817 --> 00:03:44,259
We come from a base value, and then we want to change it

47
00:03:44,299 --> 00:03:46,300
by a plus or minus some percentage.

48
00:03:47,955 --> 00:03:51,797
So in this video, we will see the berserker activating

49
00:03:51,817 --> 00:03:55,378
the run faster feat, and so after that,

50
00:03:55,878 --> 00:03:59,980
they're gonna run faster, about 50% faster.

51
00:04:02,942 --> 00:04:03,822
This is one example.

52
00:04:05,763 --> 00:04:08,484
So capabilities are actions that the entity can do,

53
00:04:08,765 --> 00:04:11,646
like going on a ladder, doing an attack, dodging.

54
00:04:12,206 --> 00:04:14,887
By default, all the capabilities are set to true,

55
00:04:15,068 --> 00:04:16,828
but the modifiers can come and disable them.

56
00:04:18,448 --> 00:04:22,611
So in this video, we'll see the Peacekeeper, and the player is spamming the dodge input.

57
00:04:23,071 --> 00:04:27,855
But we don't want the character to be able to dodge too often, because that would break the game.

58
00:04:28,355 --> 00:04:35,400
So at the end of her dodge, we apply a modifier that disables her dodging capability.

59
00:04:36,601 --> 00:04:40,724
So despite her pressing that button, she can't dodge right away.

60
00:04:44,047 --> 00:04:48,148
So adding a tag, these are labels that say that the entity

61
00:04:48,208 --> 00:04:50,329
has a certain property or status.

62
00:04:50,589 --> 00:04:53,669
Examples of these are being in stealth mode, being stunned,

63
00:04:54,029 --> 00:04:55,150
or being uninterruptible.

64
00:04:57,030 --> 00:05:00,411
So in this video, we will see the warden throwing a stun

65
00:05:00,451 --> 00:05:02,871
bomb at his own feet and stunning himself.

66
00:05:04,432 --> 00:05:07,732
You'll notice that the UI gets hidden, and there's a post

67
00:05:07,792 --> 00:05:09,673
effect that makes it harder to see what's

68
00:05:09,693 --> 00:05:10,453
happening in the game.

69
00:05:11,353 --> 00:05:12,473
This is done as a modifier.

70
00:05:15,519 --> 00:05:20,601
So an important feature for the system to have was being able to remove active modifiers.

71
00:05:21,061 --> 00:05:24,082
For example, when we heal, we want to remove any poison effects.

72
00:05:24,682 --> 00:05:26,463
This is exactly what you'll see in this video.

73
00:05:27,483 --> 00:05:32,205
The Orochi is going to activate his poison feat and poison the Warden.

74
00:05:32,305 --> 00:05:37,906
The Warden then runs to the nearby capture point to get healing and remove his poison effect.

75
00:05:43,515 --> 00:05:46,595
And finally, the system can create new effects.

76
00:05:46,955 --> 00:05:49,876
So this allows modifiers to spawn other modifiers,

77
00:05:50,316 --> 00:05:51,716
to create areas of effect,

78
00:05:52,296 --> 00:05:55,317
or to create attacks that come from nowhere like the poison,

79
00:05:55,757 --> 00:05:59,138
which ticks every two seconds and is treated as an attack.

80
00:06:01,878 --> 00:06:03,859
So in this video, we'll see the Conqueror,

81
00:06:04,959 --> 00:06:07,900
which has a feat that allows him to heal

82
00:06:08,560 --> 00:06:09,400
every time he blocks.

83
00:06:14,268 --> 00:06:17,229
He doesn't block, nothing happens, he just gets hits.

84
00:06:18,690 --> 00:06:21,810
And then we see that there's a modifier that gets applied

85
00:06:22,811 --> 00:06:27,492
for 1.5 seconds after he manages to successfully block.

86
00:06:27,512 --> 00:06:29,192
These are examples of all of our effects.

87
00:06:31,293 --> 00:06:34,093
So what we've seen so far is only half of the equation.

88
00:06:34,693 --> 00:06:37,794
The second pillar of the modifier system is context.

89
00:06:38,974 --> 00:06:42,475
So context is whatever is happening in the game right now.

90
00:06:43,435 --> 00:06:45,796
This is important because we want our modifiers to be able

91
00:06:45,856 --> 00:06:47,596
to react to the current state of the game.

92
00:06:48,337 --> 00:06:50,317
So context for us came in two parts,

93
00:06:50,517 --> 00:06:52,138
duration and conditions.

94
00:06:53,999 --> 00:06:57,860
So duration is a very simple concept,

95
00:06:58,260 --> 00:07:01,581
but it's very powerful because many of our effects

96
00:07:01,721 --> 00:07:03,922
are temporary, so it was a feature that we needed.

97
00:07:04,402 --> 00:07:06,823
And changing their duration can drastically impact

98
00:07:07,003 --> 00:07:07,544
the gameplay.

99
00:07:07,944 --> 00:07:10,985
For example, the length of a stun is the difference

100
00:07:11,005 --> 00:07:11,885
between life and death.

101
00:07:14,620 --> 00:07:16,620
And the second part of context is conditions.

102
00:07:17,140 --> 00:07:20,281
So we're able to attach conditions to our modifiers

103
00:07:21,222 --> 00:07:23,942
and those conditions are able to have checks

104
00:07:24,122 --> 00:07:24,963
on the game state.

105
00:07:25,923 --> 00:07:27,083
When the condition is met,

106
00:07:27,283 --> 00:07:29,724
the modifier is considered to be active

107
00:07:30,204 --> 00:07:32,145
and thereby it's applying its effects.

108
00:07:32,765 --> 00:07:34,365
When the condition is not met,

109
00:07:34,746 --> 00:07:36,286
then the modifier is inactive.

110
00:07:36,486 --> 00:07:39,007
It's still there, but it's not applying any effects.

111
00:07:41,568 --> 00:07:43,868
Now what's cool is that we can combine these conditions.

112
00:07:44,630 --> 00:07:47,572
with logical operators like and, or, and not.

113
00:07:49,514 --> 00:07:53,698
So for example, our capture points by default give one point per second

114
00:07:53,978 --> 00:07:55,479
while they're captured by a team.

115
00:07:56,940 --> 00:07:58,862
But we have a modifier on them that says...

116
00:07:59,332 --> 00:08:04,038
that has a condition saying if it's captured and we have a player in the zone,

117
00:08:04,619 --> 00:08:06,801
then we double the amount of points that we give.

118
00:08:07,142 --> 00:08:14,390
So our modifiers can also be applied on other entities like the capture points and NPCs and interactive objects.

119
00:08:16,868 --> 00:08:19,309
So some of our most common conditions on For Honor,

120
00:08:19,329 --> 00:08:20,449
I'm going to go through two of these.

121
00:08:21,290 --> 00:08:23,030
One of them is the action state condition.

122
00:08:23,370 --> 00:08:26,031
So this is whatever the player is currently doing.

123
00:08:26,131 --> 00:08:27,551
What movement state are they in?

124
00:08:28,231 --> 00:08:29,852
And what's really powerful about this one

125
00:08:29,972 --> 00:08:32,893
is that we were able to check the clip type

126
00:08:33,333 --> 00:08:35,433
that they were currently doing.

127
00:08:35,473 --> 00:08:37,794
So their animation type that we saw in Katana

128
00:08:38,074 --> 00:08:39,254
if you went to the previous talk.

129
00:08:41,052 --> 00:08:45,795
And so this gives us a whole lot of detail on what the player is doing.

130
00:08:45,955 --> 00:08:52,960
And it's easy, it can be dynamic, so it's easy for designers to tweak.

131
00:08:54,781 --> 00:08:56,582
So in this video, we will see the Lawbringer.

132
00:08:57,563 --> 00:09:03,026
And he has a modifier that makes him uninterruptible while he is reviving a teammate.

133
00:09:04,797 --> 00:09:08,244
So that condition is on the revive action.

134
00:09:08,565 --> 00:09:10,890
So we can see that he didn't react to getting hit,

135
00:09:11,511 --> 00:09:13,395
but when he stopped doing that action,

136
00:09:13,856 --> 00:09:16,001
then he can have hit reactions.

137
00:09:19,032 --> 00:09:23,353
The second major condition that we use is the attack condition.

138
00:09:23,673 --> 00:09:25,793
So the attacks are really the core of our game.

139
00:09:25,893 --> 00:09:27,674
So it made sense for us to have something,

140
00:09:27,854 --> 00:09:30,394
to have the ability to check details about this.

141
00:09:30,974 --> 00:09:34,195
So we can check if we are doing or receiving an attack.

142
00:09:34,615 --> 00:09:36,256
We can check the attack properties,

143
00:09:36,276 --> 00:09:39,716
or if it's a specific move, and we can check the result.

144
00:09:39,977 --> 00:09:42,497
So was it a hit, a block, and who did I hit?

145
00:09:44,298 --> 00:09:45,218
So back to our conqueror.

146
00:09:45,864 --> 00:09:48,144
This is not a video, this is just a screenshot.

147
00:09:49,005 --> 00:09:51,165
And this feat, actually the block feat,

148
00:09:51,385 --> 00:09:52,385
is a little bit more complex

149
00:09:52,425 --> 00:09:53,926
than I showed in the previous video.

150
00:09:55,046 --> 00:09:57,146
What happens in reality is that we have

151
00:09:57,526 --> 00:09:59,346
three modifiers for this feat,

152
00:10:00,167 --> 00:10:04,387
and we want to give different amounts of healing back

153
00:10:04,667 --> 00:10:07,848
according to what type of attack the player blocked.

154
00:10:08,448 --> 00:10:11,129
So if we blocked a light attack from a player,

155
00:10:11,509 --> 00:10:13,609
we want to maybe just give him 10 hit points.

156
00:10:14,231 --> 00:10:16,373
But if he blocked a heavy attack, maybe we want to give him 20.

157
00:10:16,613 --> 00:10:21,237
And if he blocked something from our low NPCs, our soldiers,

158
00:10:22,178 --> 00:10:24,199
then we want to give very little, maybe just 2.

159
00:10:26,841 --> 00:10:27,462
So one last thing.

160
00:10:28,263 --> 00:10:32,846
I already hinted at it previously, but just to be sure that it's clear.

161
00:10:33,579 --> 00:10:36,641
we can apply modifiers on other people as well.

162
00:10:36,801 --> 00:10:39,243
So the modifiers are on the entity,

163
00:10:39,963 --> 00:10:41,945
but there's times where the entity

164
00:10:42,125 --> 00:10:43,486
interacts with other entities.

165
00:10:43,906 --> 00:10:45,407
For instance, when I'm doing a revive

166
00:10:45,547 --> 00:10:46,568
or when I attack somebody.

167
00:10:46,868 --> 00:10:48,649
And this provides an opportunity for us

168
00:10:48,729 --> 00:10:51,631
to apply modifiers on that other person.

169
00:10:52,852 --> 00:10:56,334
So an example of this is for the poison effect,

170
00:10:56,695 --> 00:10:57,455
which you already saw,

171
00:10:57,475 --> 00:10:59,156
but let's show it from the other side.

172
00:10:59,677 --> 00:11:01,318
I activated my feet and now,

173
00:11:01,720 --> 00:11:05,564
the person that I hit has a modifier that's making them bleed over time.

174
00:11:08,968 --> 00:11:10,209
All right, so.

175
00:11:13,773 --> 00:11:15,615
So now that we've seen what the system can do,

176
00:11:16,475 --> 00:11:18,538
let's look at what this means in terms of production.

177
00:11:20,559 --> 00:11:23,241
So the system was very versatile for us

178
00:11:23,701 --> 00:11:26,083
because the conditions and the effects

179
00:11:26,303 --> 00:11:27,844
are all modular blocks.

180
00:11:28,044 --> 00:11:30,065
So we can combine and reuse them

181
00:11:30,385 --> 00:11:32,407
in interesting ways to create complexity.

182
00:11:33,868 --> 00:11:37,330
So let's take, for example, I have a damage boost effect.

183
00:11:38,151 --> 00:11:41,773
And if I combine it with an on capture point condition,

184
00:11:42,493 --> 00:11:45,455
then I've got a sort of defender feel to my modifier.

185
00:11:47,157 --> 00:11:50,919
I can reuse this exact same effect with a low health condition

186
00:11:51,500 --> 00:11:54,621
and now I've got a sort of last stand, maybe berserker effect.

187
00:11:55,922 --> 00:12:01,906
And finally, if I use this damage boost with a condition that says that my attack was blocked,

188
00:12:02,646 --> 00:12:03,546
I get chip damage.

189
00:12:05,210 --> 00:12:09,335
So this is very powerful and it actually enabled us to create generic effects.

190
00:12:10,376 --> 00:12:16,342
I just have a damage, speed, and healing instead of having a damage when low health, damage

191
00:12:16,382 --> 00:12:19,665
when bleeding, and then having a whole bunch of if conditions inside the code.

192
00:12:22,763 --> 00:12:28,385
What's even cooler is that because all of our systems use the modifiers,

193
00:12:28,506 --> 00:12:35,788
when I add a new effect or a new condition for one feature in one specific case,

194
00:12:36,548 --> 00:12:38,549
all of my other systems can benefit from that.

195
00:12:39,089 --> 00:12:43,631
So then all the designers can reuse this and we don't have to add extra code.

196
00:12:45,356 --> 00:12:48,359
So this is actually great for content creation,

197
00:12:48,579 --> 00:12:52,002
because we reuse the options that were already created.

198
00:12:52,122 --> 00:12:55,024
So most of the time, when someone comes to me and asks,

199
00:12:55,264 --> 00:12:57,166
oh, you know, we need to do this new feature.

200
00:12:57,186 --> 00:12:59,868
I'm like, you can already do it, and it's awesome.

201
00:13:00,369 --> 00:13:01,470
I don't have to do anything.

202
00:13:01,910 --> 00:13:03,571
They can work by themselves.

203
00:13:03,712 --> 00:13:04,272
It's perfect.

204
00:13:06,255 --> 00:13:08,175
Which brings me to designer autonomy.

205
00:13:08,376 --> 00:13:09,836
Since this is all in data,

206
00:13:10,596 --> 00:13:12,637
the designers can create this autonomously

207
00:13:13,278 --> 00:13:14,838
and they don't need to go through a programmer

208
00:13:14,878 --> 00:13:17,339
in that long loop of requesting something,

209
00:13:17,399 --> 00:13:19,340
waiting for the programmer, having it tested.

210
00:13:19,680 --> 00:13:20,861
They can bypass all of this.

211
00:13:22,701 --> 00:13:24,902
This allows them to iterate very easily.

212
00:13:25,142 --> 00:13:26,983
They have lots of power to test ideas

213
00:13:27,283 --> 00:13:29,604
and to test variations of their ideas

214
00:13:29,924 --> 00:13:30,945
in a short amount of time.

215
00:13:31,525 --> 00:13:33,366
What's more, if they change their minds,

216
00:13:33,899 --> 00:13:37,280
They don't have to, like, it doesn't need to go through that whole pipeline again.

217
00:13:37,400 --> 00:13:40,522
They can change it themselves and it's much less risky to test.

218
00:13:42,823 --> 00:13:46,084
So this was very, very scalable in terms of programming for us.

219
00:13:46,524 --> 00:13:50,646
Because once the base is done, so you have the handler that's able to manage effects and

220
00:13:50,686 --> 00:13:54,687
conditions, all you have to do is add new gameplay effects and

221
00:13:54,727 --> 00:13:58,869
new conditions as your game progressively gets more and more complicated.

222
00:14:02,975 --> 00:14:05,215
Cool, so now that you understand the concept

223
00:14:05,295 --> 00:14:06,555
and what it means for production,

224
00:14:06,955 --> 00:14:08,516
let's take a look at implementation

225
00:14:08,576 --> 00:14:09,916
and go a little bit deeper into that.

226
00:14:10,556 --> 00:14:11,616
So there's two parts really,

227
00:14:11,636 --> 00:14:13,837
there's how the setup looks in the data

228
00:14:14,037 --> 00:14:15,577
and then there's what happens at runtime.

229
00:14:18,058 --> 00:14:20,638
So let's say that someone comes to me

230
00:14:20,678 --> 00:14:23,319
and they're like, yeah, I need this new feature

231
00:14:23,519 --> 00:14:25,999
and the first question I ask them is where does it start?

232
00:14:26,799 --> 00:14:29,100
Like who is the one that's applying this effect?

233
00:14:31,085 --> 00:14:33,426
These are all examples of the origin,

234
00:14:33,486 --> 00:14:36,027
that's the concept, the name that we use for this.

235
00:14:36,807 --> 00:14:39,868
Modifiers are used as a service by all of these systems.

236
00:14:42,089 --> 00:14:45,210
And when a system wants to apply modifiers in the game,

237
00:14:46,371 --> 00:14:48,391
in the data, they have to be able to reference

238
00:14:48,591 --> 00:14:50,592
a modifier data file.

239
00:14:51,212 --> 00:14:53,593
And so, we made these modifiers,

240
00:14:53,633 --> 00:14:56,094
we chose to make them as separate data files.

241
00:14:56,714 --> 00:15:01,356
to make it easy to track in the Perforce, in the history.

242
00:15:01,896 --> 00:15:04,317
So we're able to see the history of the file,

243
00:15:04,777 --> 00:15:06,238
to track bugs more easily,

244
00:15:06,518 --> 00:15:10,579
and to see why certain choices were made,

245
00:15:10,659 --> 00:15:12,960
because we always have a change list associated to that.

246
00:15:15,801 --> 00:15:17,602
So here's an example of what it looks like

247
00:15:18,722 --> 00:15:20,022
in the data for our designers.

248
00:15:20,082 --> 00:15:22,603
So unfortunately, I don't have a really nice tool

249
00:15:23,044 --> 00:15:26,205
like the Katana guys, but it's coming, it's coming.

250
00:15:27,114 --> 00:15:29,475
So for now this is all in the property grid, but

251
00:15:30,076 --> 00:15:36,759
here we have an example of multiplying the revive other speed, so it's how quickly I'm reviving somebody

252
00:15:37,559 --> 00:15:41,981
by, and we're doing a minus five percent on the amount of time that it takes.

253
00:15:43,777 --> 00:15:48,740
So the effect type that we choose for the stats here

254
00:15:49,501 --> 00:15:51,062
is from a dropdown menu,

255
00:15:51,182 --> 00:15:53,423
and this is created by the programmers.

256
00:15:53,463 --> 00:15:55,044
This is an enum in the code,

257
00:15:55,484 --> 00:15:57,845
and so what's nice about this is that as programmers

258
00:15:57,885 --> 00:15:59,006
we have control over this.

259
00:15:59,827 --> 00:16:04,709
We can choose what's the best way to implement something,

260
00:16:05,810 --> 00:16:08,091
and we can make sure that we're not duplicating effects.

261
00:16:08,131 --> 00:16:09,212
We can keep them generic.

262
00:16:11,433 --> 00:16:12,614
You'll also notice that.

263
00:16:13,437 --> 00:16:15,438
We try to make it easier for our designers

264
00:16:15,498 --> 00:16:16,518
to read all of this,

265
00:16:16,538 --> 00:16:18,980
because sometimes in the property grid

266
00:16:19,020 --> 00:16:20,100
it can be a bit hard to read.

267
00:16:20,540 --> 00:16:23,222
So we provide a little summary at the top of the effect

268
00:16:23,302 --> 00:16:25,003
so that they don't have to go and dig deeper.

269
00:16:27,744 --> 00:16:29,385
All right, so now that you've set up the data,

270
00:16:30,285 --> 00:16:31,626
let's see what happens at the runtime.

271
00:16:33,098 --> 00:16:36,061
So the handler, the handler's job is to handle requests

272
00:16:36,281 --> 00:16:37,903
to activate new modifiers.

273
00:16:39,264 --> 00:16:41,026
So once a new modifier is activated,

274
00:16:41,046 --> 00:16:44,349
it makes an entry for it in its list of entries,

275
00:16:44,850 --> 00:16:47,272
and it's going to update all of these entries.

276
00:16:47,913 --> 00:16:50,175
So at the update, it's gonna check if the conditions

277
00:16:50,336 --> 00:16:51,597
of the modifier are true,

278
00:16:52,318 --> 00:16:53,959
and it's also gonna check the duration.

279
00:16:54,059 --> 00:16:55,441
So when the duration expires,

280
00:16:55,561 --> 00:16:56,862
it's just gonna remove that modifier.

281
00:16:59,514 --> 00:17:00,675
So what does the entry look like?

282
00:17:01,575 --> 00:17:03,477
Basically, we keep the start time,

283
00:17:03,557 --> 00:17:05,399
so the moment at which the modifier was applied.

284
00:17:06,380 --> 00:17:08,242
We track its origin, where it came from,

285
00:17:09,583 --> 00:17:12,245
if the condition is true or not at this frame,

286
00:17:13,006 --> 00:17:14,808
and a pointer to the modifier data.

287
00:17:18,312 --> 00:17:20,434
So, then once we have that,

288
00:17:20,595 --> 00:17:24,138
how does the rest of the code check for the modifiers?

289
00:17:24,779 --> 00:17:27,201
So, I call these queries, code queries,

290
00:17:27,822 --> 00:17:30,344
and they really depend on each effect type.

291
00:17:30,825 --> 00:17:33,968
So, for modifying stats, the sort of accessor

292
00:17:34,028 --> 00:17:37,271
and query I'm going to make is compute the modified value.

293
00:17:37,972 --> 00:17:41,195
So, how much am I currently modifying my attack by,

294
00:17:41,695 --> 00:17:42,176
for instance.

295
00:17:43,460 --> 00:17:46,663
For capabilities and for tags, what I want to check for

296
00:17:46,803 --> 00:17:48,584
is just is it enabled or not?

297
00:17:48,845 --> 00:17:50,586
Like is this capability disabled?

298
00:17:50,646 --> 00:17:53,148
As soon as I find one modifier entry

299
00:17:53,208 --> 00:17:55,870
that says that it has that effect, I can return.

300
00:17:56,631 --> 00:17:57,491
Same for the tag.

301
00:17:58,312 --> 00:18:00,954
And then for removing a modifier and creating a new effect,

302
00:18:00,994 --> 00:18:01,835
these are actions.

303
00:18:02,215 --> 00:18:04,417
So they have to be triggered somehow by an event.

304
00:18:05,017 --> 00:18:08,180
In our case, that can be once we activate the new modifier.

305
00:18:08,600 --> 00:18:12,123
So when it starts, it can be when the condition becomes true.

306
00:18:12,802 --> 00:18:16,223
Or it can be even ticking, just like the damage over time,

307
00:18:16,363 --> 00:18:17,683
which ticks every two seconds.

308
00:18:20,564 --> 00:18:22,304
So let's look at a concrete example in the code.

309
00:18:23,265 --> 00:18:25,485
So for the blinded, the stun effect,

310
00:18:25,685 --> 00:18:27,906
you saw that the HUD gets hidden.

311
00:18:29,086 --> 00:18:31,147
And so in the UI update, we can just

312
00:18:31,167 --> 00:18:35,888
check if the player has the tag blinded, then I hide.

313
00:18:37,329 --> 00:18:40,730
So this creates a query, which is really not a fancy query.

314
00:18:40,750 --> 00:18:41,870
It just goes and asks.

315
00:18:42,718 --> 00:18:50,485
to the handler and the handler is going to go through all of its entries and if it finds an entry which condition is true and

316
00:18:50,525 --> 00:18:55,350
Which has the effect blinded it's going to return true. So that's the sort sort of how it looks like

317
00:18:58,671 --> 00:19:02,396
So I want to take a tiny bit of time to talk about feedback because

318
00:19:03,257 --> 00:19:07,403
our players don't necessarily know that all of this is happening

319
00:19:07,543 --> 00:19:09,325
and we need to communicate that to them.

320
00:19:09,926 --> 00:19:12,489
So the modifiers need the feedback hooks

321
00:19:13,190 --> 00:19:16,895
to be able to show what's going on underneath.

322
00:19:18,017 --> 00:19:19,138
So we have three types.

323
00:19:19,478 --> 00:19:21,580
The most basic one is alive.

324
00:19:21,960 --> 00:19:23,641
So alive is very simple.

325
00:19:24,262 --> 00:19:27,364
It's as soon as the modifier gets created,

326
00:19:27,384 --> 00:19:29,286
as soon as that request is made,

327
00:19:29,586 --> 00:19:32,308
and it disappears at the end of its duration.

328
00:19:32,888 --> 00:19:36,571
So we would say start alive and then end alive.

329
00:19:37,932 --> 00:19:39,593
If the modifier is conditions,

330
00:19:40,653 --> 00:19:43,074
then we have the active feedback hook.

331
00:19:43,334 --> 00:19:46,175
So this is as soon as its condition starts being met,

332
00:19:46,636 --> 00:19:48,677
we say start active, end active.

333
00:19:49,617 --> 00:19:51,018
And then there was a sneakier one,

334
00:19:51,378 --> 00:19:52,579
which we didn't find immediately.

335
00:19:53,839 --> 00:19:55,240
This was effects applied.

336
00:19:56,240 --> 00:20:00,242
Because sometimes I want my cool effects to only happen

337
00:20:00,282 --> 00:20:03,544
when my modifier actually changed something in the gameplay.

338
00:20:04,344 --> 00:20:06,385
So let's imagine that I have a damage buff,

339
00:20:06,925 --> 00:20:08,206
but then I never hit anyone.

340
00:20:08,797 --> 00:20:10,421
Well then it's not very cool.

341
00:20:10,661 --> 00:20:14,208
Like my modifier didn't actually change anything in the game.

342
00:20:14,709 --> 00:20:17,454
So I want maybe some special effect for that.

343
00:20:18,700 --> 00:20:25,961
And what's really cool about this effect applied is that we can send a callback to the origin system.

344
00:20:26,681 --> 00:20:33,162
So in the next video we will see that in this case we want to give a callback to the feat system

345
00:20:33,242 --> 00:20:39,023
so that we can have some feedback in the HUD as well as on the player's sword.

346
00:20:40,983 --> 00:20:44,784
So this is a feat that heals the player every time they kill an NPC.

347
00:20:47,044 --> 00:20:47,985
And we can see that we have...

348
00:20:48,338 --> 00:20:55,221
feedback both in effects on the player and in the bottom left in the UI.

349
00:21:01,264 --> 00:21:08,066
So the players have effects and sound and all this cool stuff, but us developers, we don't really get anything.

350
00:21:09,139 --> 00:21:11,841
we need to be able to visualize the system as well,

351
00:21:11,981 --> 00:21:13,882
even without the pretty effects and all of that.

352
00:21:14,722 --> 00:21:18,165
So debug display is really crucial to this system.

353
00:21:19,095 --> 00:21:19,876
We have two versions.

354
00:21:20,356 --> 00:21:21,936
The first one is the light version.

355
00:21:22,576 --> 00:21:24,257
And as we can see, it's unobtrusive,

356
00:21:24,517 --> 00:21:27,158
it's easy to understand, and it's not too detailed.

357
00:21:27,698 --> 00:21:29,499
And as the programmer who worked on the system,

358
00:21:29,519 --> 00:21:31,559
I always kept it active.

359
00:21:32,240 --> 00:21:35,241
And this really made it easy to spot minor bugs,

360
00:21:35,341 --> 00:21:37,021
like modifiers that never end,

361
00:21:37,341 --> 00:21:39,942
if someone forgot to set their duration.

362
00:21:40,622 --> 00:21:41,863
the conditions that are never met.

363
00:21:42,503 --> 00:21:44,224
And it was good for designers, uh,

364
00:21:44,284 --> 00:21:48,166
for them to check if their modifier was even on the entity,

365
00:21:48,286 --> 00:21:50,607
you know, that they were checking because they might be like,

366
00:21:50,807 --> 00:21:52,588
oh cool, I'm going to start this modifier.

367
00:21:52,628 --> 00:21:54,448
But then it, you know, they're like, it doesn't work.

368
00:21:54,688 --> 00:21:56,969
And I'm like, well, did you check the debug display?

369
00:21:58,070 --> 00:21:59,350
And then they're like, oh yeah,

370
00:21:59,370 --> 00:22:01,251
it's not even on the player.

371
00:22:01,571 --> 00:22:04,493
So then their problem is higher up somewhere else.

372
00:22:07,405 --> 00:22:09,406
And finally, we have also this debug display.

373
00:22:09,426 --> 00:22:10,606
So this is way more detailed.

374
00:22:10,966 --> 00:22:14,227
This is more for when you get a mysterious bug at a tester's

375
00:22:14,247 --> 00:22:17,988
desk and you are not sure exactly which version of the

376
00:22:18,028 --> 00:22:18,748
data they have.

377
00:22:19,688 --> 00:22:22,869
So what's interesting about this is that we show both the

378
00:22:22,909 --> 00:22:26,990
data, so exactly what was set in the modifier, all of the

379
00:22:27,050 --> 00:22:28,490
effects, all the conditions.

380
00:22:29,351 --> 00:22:32,631
And we also show the runtime info, so the origin, the

381
00:22:32,691 --> 00:22:34,712
duration that's left, and whether the condition is

382
00:22:34,752 --> 00:22:35,672
currently being met or not.

383
00:22:36,765 --> 00:22:38,846
But it's a little hard to read, but it's okay.

384
00:22:41,508 --> 00:22:43,230
So I want to take the rest of this time

385
00:22:43,270 --> 00:22:45,311
to talk about challenges because that's really

386
00:22:45,371 --> 00:22:49,254
where we can see interesting and new things happen.

387
00:22:50,295 --> 00:22:53,818
So, there's three areas that I want to talk about.

388
00:22:53,998 --> 00:22:56,640
It's in terms of data, what did this entail,

389
00:22:57,521 --> 00:22:59,983
for effect stacking, and for programming.

390
00:23:02,238 --> 00:23:05,100
So the first issue that we encountered was usability.

391
00:23:05,800 --> 00:23:09,562
And the property grid can get a little bit complicated

392
00:23:09,862 --> 00:23:13,003
and usually it's not so bad for the modifying stats effect

393
00:23:13,023 --> 00:23:17,185
that I showed because it's always one specific effect.

394
00:23:17,625 --> 00:23:21,307
But the complexity in the usability really rose

395
00:23:21,347 --> 00:23:23,248
when we added creating new effects

396
00:23:23,488 --> 00:23:27,369
because all of a sudden there was more layers in there.

397
00:23:28,290 --> 00:23:29,851
So that was a little bit harder to read.

398
00:23:32,374 --> 00:23:34,856
And then another issue that we had was for standards.

399
00:23:35,016 --> 00:23:37,518
So originally, since this was only used by the feet,

400
00:23:37,578 --> 00:23:39,679
there was one designer associated to this.

401
00:23:40,560 --> 00:23:42,301
And so he had his own standards.

402
00:23:43,242 --> 00:23:46,604
And then when other designers started using the system,

403
00:23:46,644 --> 00:23:48,525
because, well, it was very powerful,

404
00:23:48,565 --> 00:23:49,906
so different features were like,

405
00:23:50,046 --> 00:23:51,687
ah, we should use the modifiers.

406
00:23:52,308 --> 00:23:54,829
So then more and more people started using it,

407
00:23:54,849 --> 00:23:56,851
and that's where we had.

408
00:23:57,460 --> 00:24:02,022
a lot of data duplication so some you know the modifiers were always meant to be a little bit

409
00:24:02,162 --> 00:24:09,126
more generic but sometimes we were creating the same effect many times in different files

410
00:24:09,647 --> 00:24:14,890
also the naming conventions well there were none so this is pretty much each designer did whatever

411
00:24:14,950 --> 00:24:21,533
they wanted which was okay it's just we wanted to keep that as clean as possible and of course

412
00:24:21,553 --> 00:24:26,036
the more data you have the more the harder it is to enforce these standards.

413
00:24:27,188 --> 00:24:28,810
So I'm going to talk about that a bit after.

414
00:24:29,530 --> 00:24:32,353
The other problem we had was when we had duplicated data,

415
00:24:33,634 --> 00:24:34,655
how do we feedback it?

416
00:24:34,855 --> 00:24:37,557
Like we needed our feedback artists to go and plug

417
00:24:37,577 --> 00:24:40,520
their feedback on every single modifier file.

418
00:24:40,980 --> 00:24:44,063
It was very easy to miss some and it hindered prototyping

419
00:24:44,443 --> 00:24:46,725
because when we created new cool effects,

420
00:24:46,765 --> 00:24:49,408
well they didn't know where to plug in the effects,

421
00:24:49,628 --> 00:24:52,330
so we weren't able to visualize as well what was happening.

422
00:24:53,091 --> 00:24:54,332
So this was also a challenge.

423
00:24:56,597 --> 00:24:58,418
So our solution, something that we tried,

424
00:24:58,958 --> 00:25:00,659
was called the status effects.

425
00:25:01,320 --> 00:25:02,961
So what I've shown up till now,

426
00:25:04,161 --> 00:25:07,243
the effects are contained directly inside the modifiers.

427
00:25:08,644 --> 00:25:11,645
And then the effects is, the effects, sorry,

428
00:25:11,925 --> 00:25:16,468
effect, effects, the effects is plugged in on that file.

429
00:25:18,449 --> 00:25:21,650
So what we did is we extracted all of the effects

430
00:25:22,031 --> 00:25:24,532
and we put it inside a different structure

431
00:25:24,552 --> 00:25:25,953
that we call the status effects.

432
00:25:27,816 --> 00:25:30,938
And the idea is that all the modifiers could reuse that.

433
00:25:31,139 --> 00:25:34,741
And the status effects were supposed to be set up just once

434
00:25:34,942 --> 00:25:35,942
in a very generic way.

435
00:25:36,022 --> 00:25:38,625
So damage, boost, you know, very standard.

436
00:25:39,886 --> 00:25:42,988
And then they were to be referenced by all the modifiers.

437
00:25:43,048 --> 00:25:46,611
So we were hoping to see less duplicated data,

438
00:25:47,351 --> 00:25:49,553
more consistency in the standards,

439
00:25:49,873 --> 00:25:51,755
and yeah, all these great things.

440
00:25:52,415 --> 00:25:54,837
And then the effects could be plugged directly

441
00:25:55,158 --> 00:25:57,820
on the status effect instead of each modifier.

442
00:26:00,802 --> 00:26:02,703
So the question you might be asking yourself

443
00:26:02,763 --> 00:26:06,426
is how do we share these status effects

444
00:26:06,747 --> 00:26:08,948
if we want different percentage values?

445
00:26:09,309 --> 00:26:12,751
Like in this case, if I want my low level shield

446
00:26:12,851 --> 00:26:13,852
to only give a plus 5%.

447
00:26:15,341 --> 00:26:20,103
and I want my super heroic shield to give plus 50% of defense, let's say,

448
00:26:21,263 --> 00:26:22,683
how can they share that data?

449
00:26:23,344 --> 00:26:29,505
Well, what we ended up doing is having several levels of power inside our status effects.

450
00:26:30,206 --> 00:26:35,387
So the lead designer, the designer would set up all of these levels

451
00:26:35,647 --> 00:26:40,569
and then the modifiers would reference a specific level of a modifier.

452
00:26:42,930 --> 00:26:44,430
So was this a success?

453
00:26:45,812 --> 00:26:47,994
Sort of, sort of, it's not perfect.

454
00:26:49,074 --> 00:26:52,877
So it actually worked pretty well for some designers,

455
00:26:53,577 --> 00:26:56,539
mostly like the designer who helped me make the system,

456
00:26:56,619 --> 00:26:57,780
it was very clear to him.

457
00:26:58,700 --> 00:27:01,202
But I think we didn't actually do a very good job

458
00:27:01,262 --> 00:27:03,783
at teaching other designers how to use it.

459
00:27:04,694 --> 00:27:09,316
So there was a bit of a problem there and I think better tools would have helped with that.

460
00:27:09,876 --> 00:27:15,198
So for the designers that understood it and used it, it worked fantastically well.

461
00:27:15,719 --> 00:27:23,122
For the feeds, what you want to see is only 20 status effects and 100 modifiers, that's the ideal.

462
00:27:24,082 --> 00:27:29,744
But for the designers who weren't using that, it ended up just being an extra layer of complexity for them.

463
00:27:29,824 --> 00:27:31,785
And they didn't really understand why they needed that.

464
00:27:32,685 --> 00:27:33,706
So, mixed.

465
00:27:36,859 --> 00:27:40,600
The next topic I want to talk about is how to stack effects together

466
00:27:41,160 --> 00:27:44,381
when you have effects that are coming from so many different origins.

467
00:27:47,621 --> 00:27:50,562
So at the beginning we were doing it very naively.

468
00:27:52,162 --> 00:27:56,003
We were adding up the stats modifications together.

469
00:27:56,383 --> 00:27:59,244
So if I had a modifier that said plus 40% damage

470
00:27:59,744 --> 00:28:02,205
and then another one that said minus 15% damage,

471
00:28:02,625 --> 00:28:03,525
my total would be 25%.

472
00:28:03,565 --> 00:28:04,265
Makes sense, right?

473
00:28:08,125 --> 00:28:13,688
First problem we encountered was busting our limits of OP.

474
00:28:14,549 --> 00:28:15,789
This was way too powerful.

475
00:28:15,889 --> 00:28:17,210
We quickly went into that realm.

476
00:28:18,111 --> 00:28:22,273
So the first thing we introduced was a min and a max.

477
00:28:22,393 --> 00:28:23,393
Pretty standard, right?

478
00:28:23,513 --> 00:28:25,775
And so what's interesting about this too

479
00:28:25,955 --> 00:28:29,116
is that we had different mins and maxes

480
00:28:29,557 --> 00:28:32,958
by stats that we wanted to be able to modify.

481
00:28:33,564 --> 00:28:37,509
Because maybe I want to be able to revive someone a thousand percent faster,

482
00:28:37,969 --> 00:28:40,152
but I never want my damage to be more than like 200%.

483
00:28:41,573 --> 00:28:46,118
So it's interesting to have this ability of changing that.

484
00:28:48,060 --> 00:28:51,023
Now the second more interesting problem that we had was

485
00:28:51,824 --> 00:28:54,207
how to deal with different origins.

486
00:28:55,366 --> 00:28:58,547
So let's say I'm playing the campaign and I've got a boss

487
00:28:59,528 --> 00:29:01,009
that does 10 damage normally.

488
00:29:01,509 --> 00:29:03,330
But I'm playing the campaign in easy mode.

489
00:29:04,170 --> 00:29:07,472
And let's say that means that he does 80% less damage.

490
00:29:08,032 --> 00:29:09,153
So that would be two damage.

491
00:29:11,954 --> 00:29:14,035
But now, if he activates a feat

492
00:29:14,475 --> 00:29:18,777
that gives him plus 50% damage, how do we stack these?

493
00:29:20,752 --> 00:29:23,753
So the naive way would be minus 80 plus 50,

494
00:29:23,994 --> 00:29:27,035
which is negative 30, which is seven damage.

495
00:29:27,275 --> 00:29:28,295
Now that's kind of weird,

496
00:29:28,355 --> 00:29:30,016
because my boss was hitting at two,

497
00:29:30,716 --> 00:29:32,037
and now he's hitting for seven?

498
00:29:32,157 --> 00:29:33,418
Like, what was this, you know?

499
00:29:34,498 --> 00:29:36,379
So we had to do something a little bit different.

500
00:29:37,860 --> 00:29:39,820
What we ended up doing, and the correct way

501
00:29:40,561 --> 00:29:41,881
that we wanted the system to work,

502
00:29:42,121 --> 00:29:45,823
was to apply the 80% first, and then the 50%.

503
00:29:45,963 --> 00:29:49,024
So that gives us two, and then plus 50% free.

504
00:29:51,126 --> 00:29:57,474
So this led us to introducing the concept of core versus external modifier origins.

505
00:30:00,217 --> 00:30:04,222
So core was the gear, the campaign, and the AI archetypes.

506
00:30:04,722 --> 00:30:07,446
It's anything that's really intrinsic to the character and

507
00:30:07,486 --> 00:30:10,489
that's not going to change along the course of the game.

508
00:30:11,502 --> 00:30:14,785
And for external, that was the feats, the boosts, and the missions.

509
00:30:15,245 --> 00:30:16,026
These are dynamic.

510
00:30:16,146 --> 00:30:20,110
We want, these can change, and we want our players to know about them.

511
00:30:20,731 --> 00:30:23,533
Which also leads me to feedback again.

512
00:30:24,054 --> 00:30:27,217
We did not want to feedback the core modifiers, but

513
00:30:27,257 --> 00:30:29,299
we wanted to feedback the external ones.

514
00:30:29,759 --> 00:30:34,164
Because the player needs to change their play style when that happens.

515
00:30:34,664 --> 00:30:36,246
So we need to, again, communicate that.

516
00:30:38,215 --> 00:30:40,296
So was this concept a success?

517
00:30:40,976 --> 00:30:42,877
Yes, yes it was.

518
00:30:42,897 --> 00:30:46,858
So it worked well on the player side.

519
00:30:46,918 --> 00:30:49,839
They understood when they needed to change their play style.

520
00:30:50,380 --> 00:30:52,801
On the data side, this also enabled us to reuse

521
00:30:52,861 --> 00:30:55,822
the same status effects and even the same modifiers

522
00:30:55,902 --> 00:30:57,783
because we were able to do that.

523
00:30:58,423 --> 00:31:01,464
And it made it easier to balance the campaign and the gear

524
00:31:01,624 --> 00:31:02,945
because we didn't have to worry about

525
00:31:02,985 --> 00:31:05,526
the relative power of modifiers.

526
00:31:06,602 --> 00:31:09,804
However, it also made the code a little bit more complicated

527
00:31:09,864 --> 00:31:12,866
because we had to handle two layers of stacking.

528
00:31:12,886 --> 00:31:15,988
And it made it a little bit harder to predict

529
00:31:16,348 --> 00:31:18,610
the behavior of modifiers,

530
00:31:18,670 --> 00:31:21,832
because the same modifier applied by two different origins

531
00:31:22,613 --> 00:31:24,254
could have different effects on the game.

532
00:31:25,074 --> 00:31:27,776
But with debug display, this was all right.

533
00:31:30,938 --> 00:31:32,099
So for programming.

534
00:31:34,718 --> 00:31:36,659
One of the major challenges was the API.

535
00:31:37,620 --> 00:31:40,441
Making your code easy to use for programmers is just as

536
00:31:40,501 --> 00:31:43,283
important as making your data easy to use for designers.

537
00:31:44,103 --> 00:31:45,724
They might have to add their own effects.

538
00:31:46,464 --> 00:31:50,386
And the thing is, these modifiers were getting called

539
00:31:50,426 --> 00:31:51,387
a bit all over the place.

540
00:31:51,667 --> 00:31:53,888
We have so many different types of effects.

541
00:31:54,368 --> 00:31:57,169
And even though each effect is checked generally just in one

542
00:31:57,229 --> 00:31:59,751
place in the code, well, every time you add a new one,

543
00:32:00,731 --> 00:32:01,812
that's an extra code.

544
00:32:02,637 --> 00:32:05,979
So at the beginning, our code to compute the modified value

545
00:32:06,019 --> 00:32:09,141
was about seven lines long, and this was really horrible.

546
00:32:10,262 --> 00:32:14,464
And it included computations of the plus and minus,

547
00:32:14,524 --> 00:32:15,565
and sometimes we were like.

548
00:32:16,347 --> 00:32:18,048
getting the computation wrong.

549
00:32:18,808 --> 00:32:21,830
So we did a big pass on the API,

550
00:32:21,930 --> 00:32:24,992
we created a separate modifier utilities file

551
00:32:25,672 --> 00:32:27,553
that handles all of our basic queries

552
00:32:28,114 --> 00:32:30,355
in a very clear way and concise way.

553
00:32:30,935 --> 00:32:33,277
And the idea is to encapsulate the complexity

554
00:32:33,337 --> 00:32:34,197
as much as possible.

555
00:32:37,259 --> 00:32:40,021
So data-driven is always a challenge for programmers

556
00:32:40,101 --> 00:32:41,482
because we don't like giving up control.

557
00:32:42,279 --> 00:32:43,540
And I understand.

558
00:32:44,901 --> 00:32:49,445
But in this case, in general, it worked out very, very well

559
00:32:49,485 --> 00:32:53,628
for us because the effects were always checked in one place.

560
00:32:53,729 --> 00:32:57,272
And it was not very complicated what each effect was doing.

561
00:32:57,672 --> 00:32:58,773
So generally, it was fine.

562
00:32:59,213 --> 00:33:01,635
The one case where it was problematic

563
00:33:02,156 --> 00:33:03,537
was when we were trying to compute.

564
00:33:04,149 --> 00:33:07,411
the amount of bleeding that was going to happen.

565
00:33:08,152 --> 00:33:10,514
And now, this seems like a silly example,

566
00:33:10,594 --> 00:33:13,376
but it's, like, this function to compute

567
00:33:13,476 --> 00:33:15,858
that little red bar is like 100 lines long.

568
00:33:16,579 --> 00:33:18,820
Because we have to go through all of our modifiers,

569
00:33:19,381 --> 00:33:21,363
and then check inside their status effects,

570
00:33:21,423 --> 00:33:22,884
and then check each of their effects, like,

571
00:33:23,284 --> 00:33:25,626
okay, is this a looping attack?

572
00:33:26,327 --> 00:33:28,048
Oh, good, that's a poison effect.

573
00:33:28,368 --> 00:33:29,769
But then you have to go back and check

574
00:33:29,929 --> 00:33:32,471
how much time is left on my modifier.

575
00:33:32,898 --> 00:33:34,720
and then you have to add all of those together.

576
00:33:34,820 --> 00:33:36,681
So this was a bit inelegant,

577
00:33:36,961 --> 00:33:39,303
and I hope that it's bound to happen

578
00:33:39,343 --> 00:33:43,566
if you have to go and peek inside that data to do things.

579
00:33:46,288 --> 00:33:49,710
Another note on the poison and damage over time effects.

580
00:33:50,971 --> 00:33:52,952
So we realized that we were gonna need

581
00:33:52,992 --> 00:33:55,354
to add an extra feature to our modifier system.

582
00:33:57,468 --> 00:34:01,212
So let's say this enemy here is really mean

583
00:34:01,312 --> 00:34:02,673
and he's applying damage over time

584
00:34:02,713 --> 00:34:05,135
and he's like, ha ha, now you're poisoned.

585
00:34:06,216 --> 00:34:09,659
So I start bleeding, two damage, two damage.

586
00:34:11,060 --> 00:34:12,541
And now he gets a damage boost.

587
00:34:12,981 --> 00:34:16,044
So like I said, the damage over time

588
00:34:16,104 --> 00:34:17,685
is treated as a normal attack.

589
00:34:19,046 --> 00:34:22,369
So how do we figure out that normally

590
00:34:22,449 --> 00:34:25,091
that the damage boost would be applying on the bleed?

591
00:34:25,754 --> 00:34:29,237
but that wouldn't feel good because it's over time.

592
00:34:29,277 --> 00:34:31,878
So 10 seconds after, if he gets a damage boost

593
00:34:31,898 --> 00:34:33,219
and I start bleeding more, I'm gonna be like,

594
00:34:33,560 --> 00:34:34,100
what happened?

595
00:34:34,260 --> 00:34:36,542
It's really hard for the player to read that.

596
00:34:38,163 --> 00:34:40,264
But we still want the damage to apply

597
00:34:40,825 --> 00:34:42,546
if the boost happened before the bleed.

598
00:34:45,879 --> 00:34:49,361
So what we ended up doing was introducing the concept of snapshots.

599
00:34:50,142 --> 00:34:55,326
So each effect can say, oh, I'm going to require a snapshot.

600
00:34:56,386 --> 00:34:59,409
And we're going to store that in the modifier entry.

601
00:35:00,049 --> 00:35:03,572
And we take it when we activate a new modifier.

602
00:35:04,572 --> 00:35:08,315
At the beginning of that, we're going to take a snapshot of the current modifiers

603
00:35:09,856 --> 00:35:11,457
affecting the attack of.

604
00:35:12,417 --> 00:35:14,778
the attacker and the defense of the victim.

605
00:35:15,398 --> 00:35:17,439
And then when we go through that attack code,

606
00:35:17,579 --> 00:35:18,859
we're gonna use the snapshots

607
00:35:18,999 --> 00:35:20,860
instead of the current modifier state.

608
00:35:24,281 --> 00:35:25,302
So optimization.

609
00:35:25,822 --> 00:35:28,963
As you might have noticed, we do polling on this system.

610
00:35:30,024 --> 00:35:31,664
And we have about 3,000 queries per frame.

611
00:35:33,541 --> 00:35:37,303
because of all our different 200 soldiers and then eight players.

612
00:35:37,323 --> 00:35:39,243
So that can be a bit much.

613
00:35:40,024 --> 00:35:42,545
So we had to optimize it, especially at the end, of course.

614
00:35:44,386 --> 00:35:50,088
So the first thing that we did is have a maximum amount of entries per entity type.

615
00:35:50,528 --> 00:35:53,329
So our soldiers, we don't really need them to be complicated.

616
00:35:53,770 --> 00:35:55,891
We gave them a maximum of six modifiers.

617
00:35:56,811 --> 00:36:00,653
But our players, well, they can have a lot of stuff happen to them, so they have up to 30.

618
00:36:02,583 --> 00:36:03,904
This was good, but it wasn't enough.

619
00:36:05,545 --> 00:36:07,286
So we added a bit field.

620
00:36:08,287 --> 00:36:12,910
So basically, every time I activate a new modifier, I

621
00:36:13,931 --> 00:36:18,434
update a bit field saying what effects I'm currently changing.

622
00:36:19,395 --> 00:36:23,538
So if I add a damage boost, then at the damage boost bit,

623
00:36:23,878 --> 00:36:24,519
I'm going to say 1.

624
00:36:24,679 --> 00:36:27,961
And then that's how it's going to work.

625
00:36:28,081 --> 00:36:30,783
And then once I do my query, I know exactly.

626
00:36:31,408 --> 00:36:34,271
what I'm looking for, like I'm looking for damage,

627
00:36:34,751 --> 00:36:37,073
and I can immediately check right away

628
00:36:37,713 --> 00:36:39,074
if I have that one there or not.

629
00:36:39,995 --> 00:36:42,156
And if I don't have an effect that touches this value,

630
00:36:42,437 --> 00:36:43,998
I completely bypass the query.

631
00:36:44,818 --> 00:36:47,881
This made us save about 80% in performance,

632
00:36:48,441 --> 00:36:51,864
because it also makes sense since not all of our entities

633
00:36:52,464 --> 00:36:53,885
can react to things.

634
00:36:54,406 --> 00:36:56,467
Like we don't really want to have a...

635
00:36:57,017 --> 00:36:58,598
revive for our soldiers.

636
00:36:59,139 --> 00:37:00,500
That's not something that's important.

637
00:37:00,700 --> 00:37:03,762
And instead of having to add specific checks in the code

638
00:37:04,223 --> 00:37:07,005
by effect type, being like, oh, if it's a revive and I'm a

639
00:37:07,025 --> 00:37:08,066
minion, don't do it.

640
00:37:08,166 --> 00:37:08,766
Don't do the check.

641
00:37:09,267 --> 00:37:13,370
Like this query, this bit field allows us to bypass that

642
00:37:13,430 --> 00:37:15,371
no matter what, because they won't be affected by that.

643
00:37:17,893 --> 00:37:20,075
So to recap, the things that went right.

644
00:37:21,015 --> 00:37:22,276
Modifiers were used everywhere.

645
00:37:22,762 --> 00:37:30,466
This is cool. All of our systems were using it. It was a centralized way for our game designers to input content into the game.

646
00:37:32,267 --> 00:37:43,973
debug info was so, so important. It allowed our designers to really visualize the system, not just our designers actually us to like we it was a it was super useful to understand what was going on.

647
00:37:45,256 --> 00:37:53,043
Ownership I think was key as well. I was the only programmer on the system and I was working very closely in collaboration with a designer.

648
00:37:53,524 --> 00:37:59,349
We really tried to make the system appropriate for the needs of the project and their workflow.

649
00:38:00,270 --> 00:38:03,813
And finally I think that the reason it worked was because it was so simple.

650
00:38:04,533 --> 00:38:10,094
Our effects are generally not very complicated, and we didn't do like node driven things.

651
00:38:10,174 --> 00:38:13,115
We didn't let our designers shoot themselves in the foot.

652
00:38:13,715 --> 00:38:17,196
Because when it's complicated, then it's so much harder for everyone.

653
00:38:17,236 --> 00:38:23,017
It's harder to optimize, it's harder to debug, and you end up, if it's too complicated, you

654
00:38:23,077 --> 00:38:27,358
end up having to do a lot of the data yourself, whereas here they were really independent.

655
00:38:30,824 --> 00:38:41,246
So the modifiers, these are our numbers, there was about 60 used for the fight system, 200 for the feats, 40 for the gear, and 200 for the campaign.

656
00:38:41,926 --> 00:38:45,007
And we had an extra 200 that were used just for prototyping.

657
00:38:48,507 --> 00:38:49,628
So things that could have gone better...

658
00:38:50,188 --> 00:38:51,688
The modifiers were used everywhere!

659
00:38:53,714 --> 00:38:57,397
So sometimes modifiers were not the best solution to things,

660
00:38:57,437 --> 00:39:02,520
like especially things like friendly fire in campaign.

661
00:39:03,020 --> 00:39:05,702
There's a modifier on each of those soldiers saying,

662
00:39:05,842 --> 00:39:07,443
I'm not gonna damage my allies.

663
00:39:08,264 --> 00:39:10,785
No, no, that's way too much cost.

664
00:39:11,366 --> 00:39:15,028
And it's something that we know is always gonna be true in campaign.

665
00:39:15,588 --> 00:39:18,470
It would have been just a lot easier to do it without going through that.

666
00:39:19,339 --> 00:39:23,062
There are also cases where, you know, if they take no damage and you push them off a cliff, like what happens?

667
00:39:24,083 --> 00:39:25,004
Had to be careful with that.

668
00:39:26,966 --> 00:39:29,128
In terms of testing as well, so

669
00:39:30,309 --> 00:39:35,194
generally since the system was pretty simple, there were really few bugs.

670
00:39:35,474 --> 00:39:36,575
It was really nice.

671
00:39:37,035 --> 00:39:41,640
But when there were bugs that I would introduce, I would usually, like no one would know.

672
00:39:42,193 --> 00:39:43,934
And that's a little bit sad sometimes.

673
00:39:44,074 --> 00:39:46,916
But, uh, so I'd realize I'd be like,

674
00:39:46,936 --> 00:39:48,737
this hasn't been working for two weeks.

675
00:39:48,897 --> 00:39:51,319
And, you know, everyone's like, oh, cool, cool.

676
00:39:52,019 --> 00:39:54,801
Uh, so, so really like, uh,

677
00:39:55,261 --> 00:39:57,082
testing it could have been a little bit better,

678
00:39:57,142 --> 00:39:58,283
but sometimes it's hard to,

679
00:39:58,363 --> 00:39:59,844
to know the difference between like a 24% and a 26%.

680
00:39:59,884 --> 00:40:01,085
So that's where debug tools are, are really useful.

681
00:40:05,682 --> 00:40:12,153
And yeah, just knowing the system since it's used everywhere. It's good if we try to share that responsibility like each designer can try and

682
00:40:12,967 --> 00:40:15,829
know their system really well and just check that it's fine, you know,

683
00:40:15,929 --> 00:40:16,710
every once in a while.

684
00:40:17,871 --> 00:40:21,534
And finally, in terms of usability, it was still hard for our designers to,

685
00:40:22,014 --> 00:40:25,337
to like see the data, to set up the data itself sometimes,

686
00:40:25,477 --> 00:40:28,200
like they'd get too absorbed into the property grid.

687
00:40:29,220 --> 00:40:30,762
And then like sometimes they would do loops.

688
00:40:31,522 --> 00:40:32,123
So, yeah.

689
00:40:32,904 --> 00:40:34,565
So this brings me to the future plans.

690
00:40:35,846 --> 00:40:37,868
I'd really like to have a dedicated editor

691
00:40:38,288 --> 00:40:41,471
to help with the setup of the data and the debugging as well.

692
00:40:42,748 --> 00:40:45,771
An optimization that would be nice is for permanent modifiers.

693
00:40:46,191 --> 00:40:51,155
Basically right now, our gear is always there during the course of the game.

694
00:40:51,195 --> 00:40:52,677
You can't change it at runtime.

695
00:40:53,858 --> 00:40:58,222
And it takes up 18 of our 30 slots, which is a lot.

696
00:40:58,822 --> 00:41:02,586
But if they have conditions, we need to keep them as runtime entries.

697
00:41:03,106 --> 00:41:05,508
But for those that have no duration and no condition.

698
00:41:06,052 --> 00:41:09,156
we could just store them somewhere else.

699
00:41:09,997 --> 00:41:12,740
Just considering still that memory was really

700
00:41:14,022 --> 00:41:15,464
a scarce resource for us.

701
00:41:16,104 --> 00:41:18,067
So I'll try to find a way to do that.

702
00:41:18,868 --> 00:41:21,891
The status effects, we want to evaluate them

703
00:41:21,931 --> 00:41:22,592
and make sure that.

704
00:41:23,278 --> 00:41:24,419
there's still what we want to do.

705
00:41:24,439 --> 00:41:28,262
I think one of the things is that right now

706
00:41:28,622 --> 00:41:34,105
every effect needs to go through a status effect

707
00:41:34,625 --> 00:41:36,687
and that's not necessarily very useful

708
00:41:36,767 --> 00:41:38,188
when you're creating new effects

709
00:41:38,688 --> 00:41:41,450
because you're usually referencing a specific effect

710
00:41:41,510 --> 00:41:44,411
like I want to create this specific area of effect

711
00:41:44,952 --> 00:41:47,113
or I want to apply this specific modifier.

712
00:41:48,034 --> 00:41:49,855
So maybe there's something to rework there.

713
00:41:50,525 --> 00:41:53,687
And then I'd like even more debug display for our testers,

714
00:41:53,847 --> 00:41:57,108
like seeing exactly how much the total

715
00:41:57,509 --> 00:41:59,109
of the modifications that's happening,

716
00:41:59,149 --> 00:42:01,110
like what's the final state, you know?

717
00:42:02,597 --> 00:42:08,958
So to conclude, I think this system was really empowering for our designers.

718
00:42:09,418 --> 00:42:10,059
It gave them hope.

719
00:42:10,379 --> 00:42:14,099
They were like, oh, maybe I can prototype this by myself.

720
00:42:14,199 --> 00:42:17,480
And they were all excited, and they went in their corner and jammed.

721
00:42:17,560 --> 00:42:19,600
And that was really, really nice.

722
00:42:19,620 --> 00:42:24,861
They were enthusiastic about their work, and it led them to iterate more and

723
00:42:24,901 --> 00:42:28,262
experiment more, which ultimately, I think, created a better game.

724
00:42:29,342 --> 00:42:29,862
So thank you.

725
00:42:39,182 --> 00:42:40,363
Is there time for questions?

726
00:42:41,624 --> 00:42:42,004
I don't know.

727
00:42:42,965 --> 00:42:43,185
Yes?

728
00:42:43,906 --> 00:42:44,166
OK.

729
00:42:45,207 --> 00:42:45,327
One?

730
00:42:45,347 --> 00:42:47,168
OK, cool.

731
00:42:47,349 --> 00:42:47,569
Thanks.

732
00:42:48,309 --> 00:42:48,509
Yes?

733
00:42:49,170 --> 00:42:52,372
I went to the previous talk, and he

734
00:42:52,433 --> 00:42:55,115
had the simulation as deterministic.

735
00:42:56,035 --> 00:42:58,918
And so it would backstep because of inputs and everything

736
00:42:58,958 --> 00:42:59,258
like that.

737
00:42:59,298 --> 00:43:02,220
I'm going to assume that had a huge effect on your modifiers.

738
00:43:04,132 --> 00:43:08,514
Because of damage over time, it has to be backed out and then recalculated and backed out.

739
00:43:08,534 --> 00:43:10,075
Yeah, yeah, yeah. That's a great question.

740
00:43:10,595 --> 00:43:15,377
So actually we were really lucky because there is a history buffer for the modifiers as well.

741
00:43:15,397 --> 00:43:17,738
They're all stored in a deterministic list.

742
00:43:18,258 --> 00:43:21,760
So when we go back in time, we just go back to that stage and then...

743
00:43:21,860 --> 00:43:23,980
So we revert the health, we revert everything.

744
00:43:24,000 --> 00:43:26,642
But all the modifiers had to be kept track of and everything

745
00:43:26,682 --> 00:43:29,063
and then you had to maybe change which ones are applied.

746
00:43:29,963 --> 00:43:30,483
Yeah, yeah.

747
00:43:31,939 --> 00:43:32,819
Wait, can you repeat that?

748
00:43:32,879 --> 00:43:35,801
Well, I mean, because the timing of things are things.

749
00:43:35,861 --> 00:43:39,304
So somebody, so you find out that somebody applied and hit

750
00:43:39,344 --> 00:43:42,246
a button that caused an ability that removed a modifier.

751
00:43:42,326 --> 00:43:44,707
So the modifier you'd already calculated, turns out it

752
00:43:44,787 --> 00:43:47,409
didn't happen in that frame because now it's been removed

753
00:43:47,449 --> 00:43:48,950
and that changed anyways.

754
00:43:49,571 --> 00:43:50,491
No, no, that's a great question.

755
00:43:50,852 --> 00:43:54,114
So since it is in a state.

756
00:43:55,325 --> 00:43:57,506
when we roll back to a previous time,

757
00:43:57,726 --> 00:43:59,887
everyone's gonna be in the right modifier state.

758
00:43:59,927 --> 00:44:02,769
So if it turns out that that modifier got removed,

759
00:44:02,989 --> 00:44:04,789
then when we roll back, it's still there.

760
00:44:05,250 --> 00:44:07,030
And then we can re-simulate all the steps

761
00:44:08,071 --> 00:44:09,852
and come back to the same conclusion.

762
00:44:09,912 --> 00:44:11,832
So we were so lucky with that,

763
00:44:11,872 --> 00:44:14,354
with the way our simulation was made.

764
00:44:14,814 --> 00:44:15,674
As gameplay programmers,

765
00:44:15,714 --> 00:44:17,995
we almost didn't have to ever think about

766
00:44:18,315 --> 00:44:18,935
those sorts of cases.

767
00:44:18,956 --> 00:44:19,976
So it just kind of worked for you?

768
00:44:20,056 --> 00:44:21,377
Yes, it was great.

769
00:44:21,877 --> 00:44:22,197
Thank you.

770
00:44:24,138 --> 00:44:24,278
Yeah.

771
00:44:25,299 --> 00:44:28,001
Hi, you said you had problems with testing.

772
00:44:28,381 --> 00:44:28,661
Yeah.

773
00:44:28,701 --> 00:44:29,902
Did you do any unit testing?

774
00:44:30,463 --> 00:44:31,003
Unit testing.

775
00:44:31,403 --> 00:44:33,205
So we're actually starting that.

776
00:44:33,745 --> 00:44:37,648
Yeah, we're, we didn't do any yet.

777
00:44:38,349 --> 00:44:43,613
And I think that could have helped like so much really, especially when the system, you

778
00:44:43,653 --> 00:44:48,116
know, became more complicated, like all these different origins and the stacking and all

779
00:44:48,136 --> 00:44:49,337
of that, that could have been so useful.

780
00:44:49,838 --> 00:44:52,100
So I think it's definitely something that I want to add.

781
00:44:52,866 --> 00:44:55,007
Okay, and I have another short question.

782
00:44:55,668 --> 00:44:57,589
Because of these handlers and these arrays

783
00:44:57,669 --> 00:44:58,949
and bit masks and so on,

784
00:45:00,390 --> 00:45:03,432
have you considered using an entity component system

785
00:45:03,872 --> 00:45:05,353
to actually code the whole game,

786
00:45:05,573 --> 00:45:07,354
which would have solved all of your problems?

787
00:45:08,655 --> 00:45:09,095
What do you mean?

788
00:45:12,036 --> 00:45:14,058
So I would have to explain what an entity component system is.

789
00:45:14,078 --> 00:45:14,818
Yeah, we can talk about it after.

790
00:45:14,918 --> 00:45:15,458
Yeah, we can talk about it.

791
00:45:15,478 --> 00:45:17,439
Because we use entity component system already.

792
00:45:17,920 --> 00:45:18,940
Okay. So that's why.

793
00:45:19,300 --> 00:45:20,261
Okay, I'll talk to you after.

794
00:45:20,281 --> 00:45:21,081
Yeah, cool.

795
00:45:23,712 --> 00:45:27,073
Hello, I have two questions about the modifiers.

796
00:45:28,213 --> 00:45:33,074
Several years ago I developed a similar system before.

797
00:45:34,054 --> 00:45:37,995
I made two, I think it's a little hard.

798
00:45:38,715 --> 00:45:45,297
One is some effects, depending on the resource you use, the entity you use.

799
00:45:45,517 --> 00:45:50,438
For example, some boss, some monster is very big, very tall, and some is very small.

800
00:45:51,239 --> 00:45:56,384
And if you, the same modifier will attach

801
00:45:56,504 --> 00:46:00,628
or same particle in special bone,

802
00:46:00,908 --> 00:46:07,314
but the two different monster have different skeleton.

803
00:46:08,055 --> 00:46:10,738
So, how do you deal with this?

804
00:46:10,918 --> 00:46:15,783
Another question is, how to say?

805
00:46:16,606 --> 00:46:20,548
If two, for example, if two daughter modify,

806
00:46:21,048 --> 00:46:25,750
take active in the same entity,

807
00:46:26,430 --> 00:46:29,051
and then do the same thing,

808
00:46:29,551 --> 00:46:32,592
and the same thing will complete with each other,

809
00:46:32,612 --> 00:46:35,093
for example, then play the same animation,

810
00:46:35,273 --> 00:46:39,695
or change the same parameter of matrix.

811
00:46:40,415 --> 00:46:41,556
Yeah, okay, I see what you mean.

812
00:46:42,372 --> 00:46:46,877
Uh, yeah, so most of our effect types, they stack nicely.

813
00:46:47,077 --> 00:46:47,798
I forgot to say that.

814
00:46:48,459 --> 00:46:52,143
But, so basically we tried to avoid that problem.

815
00:46:53,024 --> 00:46:56,568
So when we disable capabilities, it's always disable them.

816
00:46:56,588 --> 00:46:58,931
So the capabilities means that you can't go

817
00:46:59,011 --> 00:46:59,992
into a certain animation.

818
00:47:00,532 --> 00:47:03,933
So it's always negative, so it doesn't matter.

819
00:47:04,634 --> 00:47:06,154
The same for like tags.

820
00:47:06,194 --> 00:47:07,875
Basically we don't have any conflicts

821
00:47:08,275 --> 00:47:12,816
except for the modifying of stats.

822
00:47:13,056 --> 00:47:14,497
So adding percentages together.

823
00:47:14,977 --> 00:47:17,678
But we don't have effects that conflict otherwise.

824
00:47:18,352 --> 00:47:19,292
Okay, thank you.

825
00:47:19,612 --> 00:47:24,996
Well, actually there was a slight version of that, you know, when we were...

826
00:47:25,376 --> 00:47:30,300
What happened is we had a health regeneration and the damage over time at the same time,

827
00:47:30,720 --> 00:47:33,862
and that was really hard for the player to read and understand.

828
00:47:34,402 --> 00:47:38,285
So that's why we introduced the concept of removing modifiers.

829
00:47:38,925 --> 00:47:43,288
So that way I can say, as soon as I start healing, I remove my damage over time.

830
00:47:43,509 --> 00:47:44,609
So we sort of bypassed it.

831
00:47:45,590 --> 00:47:47,912
Okay, thank you.

832
00:47:50,652 --> 00:47:55,575
It was kind of curious how you handle balancing all of your effects across from each other

833
00:47:56,555 --> 00:48:00,478
for your designers because I didn't really notice any system for actually like looking

834
00:48:00,638 --> 00:48:05,581
at in bulk multiple items and like stacking them up and all that and I know I could never

835
00:48:05,621 --> 00:48:08,643
get our designer out of Excel because of that very reason.

836
00:48:09,095 --> 00:48:10,696
Yeah, that's a very good question.

837
00:48:10,756 --> 00:48:11,856
How do we handle balancing?

838
00:48:13,537 --> 00:48:16,099
So we don't have an official process,

839
00:48:16,159 --> 00:48:18,000
but basically we try to get designers

840
00:48:18,040 --> 00:48:18,920
to talk to each other.

841
00:48:18,940 --> 00:48:20,801
It's really that simple.

842
00:48:21,982 --> 00:48:25,544
So they really do talk a lot.

843
00:48:25,744 --> 00:48:26,164
It's nice.

844
00:48:26,945 --> 00:48:28,586
Because yeah, we have the gear.

845
00:48:28,706 --> 00:48:28,906
Yeah?

846
00:48:30,487 --> 00:48:31,447
Excel hammer?

847
00:48:31,507 --> 00:48:32,007
Yeah, OK.

848
00:48:32,027 --> 00:48:36,650
So there's also an Excel version of adding these modifiers

849
00:48:36,790 --> 00:48:38,091
to help visualize.

850
00:48:39,138 --> 00:48:41,899
all of the different levels. So for our gear for instance,

851
00:48:41,959 --> 00:48:47,982
we, you know, it can be hard for a designer to like keep track of opening each data entry and being like, okay

852
00:48:48,022 --> 00:48:54,585
how much is it? So they can actually export that and import it back in Excel where they have a pretty good view of it.

853
00:48:55,445 --> 00:48:59,827
But then for stacking between different types, well, we just we ask them to talk to each other.

854
00:49:04,627 --> 00:49:11,571
Hey, great talk. I'm currently using a similar system, even if it's a bit less evolved.

855
00:49:12,912 --> 00:49:21,276
And my question is, have you ever encountered the issue that you have a modifier that turns a feature on and off,

856
00:49:21,296 --> 00:49:27,140
that enables something or disables something, and then the assets that you need for this feature

857
00:49:27,980 --> 00:49:32,763
needs to be baked or cooked in the game. So, since it's all data-driven...

858
00:49:33,875 --> 00:49:37,178
Did you have to manage this in a special way or not?

859
00:49:37,658 --> 00:49:38,959
I mean, do you see my point?

860
00:49:39,460 --> 00:49:40,020
I think I see it.

861
00:49:40,060 --> 00:49:41,882
Do you mean like in terms of, for instance,

862
00:49:41,922 --> 00:49:43,403
like effects and sound loading?

863
00:49:43,423 --> 00:49:46,326
Yeah, or animations or voices.

864
00:49:47,747 --> 00:49:50,189
So that's actually something that we have to work on

865
00:49:50,289 --> 00:49:53,632
as a team, because right now we load a lot of things.

866
00:49:54,553 --> 00:49:57,576
But there would be a way to do that.

867
00:49:57,936 --> 00:49:58,997
The thing is it does.

868
00:50:00,078 --> 00:50:05,568
We try to load only what is currently used in the game, but it's all through references.

869
00:50:05,888 --> 00:50:09,936
So if we have something that's pointing towards that effect, it's going to be loaded.

870
00:50:10,653 --> 00:50:13,434
But right now the problem is we load all the parent things.

871
00:50:13,634 --> 00:50:16,195
You just reference everything so you don't have the problem.

872
00:50:16,695 --> 00:50:18,676
So for instance, the feet right now,

873
00:50:19,056 --> 00:50:21,377
even though you can only equip four in game

874
00:50:21,437 --> 00:50:22,297
and you can't change them,

875
00:50:22,597 --> 00:50:24,738
we're still loading all of them for all of our characters

876
00:50:24,818 --> 00:50:28,219
which points to a lot of effects and sound data.

877
00:50:29,100 --> 00:50:32,121
But we're planning on removing

878
00:50:32,381 --> 00:50:33,862
and only loading the ones that we need.

879
00:50:34,922 --> 00:50:35,802
So that should help a lot.

880
00:50:36,523 --> 00:50:36,743
Thank you.

881
00:50:40,008 --> 00:50:40,773
Yeah, okay. Well, thank you.

