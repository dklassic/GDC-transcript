1
00:00:03,899 --> 00:00:06,980
Hi, I'm Kyle Pittman. I'm a graduate of the Guildhall SMU. I

2
00:00:07,480 --> 00:00:11,202
worked at Gearbox Software for six years, and in 2013 my

3
00:00:11,222 --> 00:00:14,303
brother and I founded Minor Key Games, and now we do indie

4
00:00:14,323 --> 00:00:17,164
development. Today I'm going to be talking about jumping in

5
00:00:17,204 --> 00:00:20,325
video games. The principles I'll be discussing can apply to

6
00:00:20,705 --> 00:00:24,186
platformers, both 2D and 3D, but they can also apply to

7
00:00:24,786 --> 00:00:27,387
first-person shooters or endless runners or really any sort of

8
00:00:27,427 --> 00:00:28,728
game that has a jumping mechanic.

9
00:00:29,548 --> 00:00:36,895
Our goal is going to be to move away from the trial and error that occurs when we start by defining physical constants up front.

10
00:00:37,475 --> 00:00:41,339
I've had this experience in my own development, maybe some of y'all have had a similar experience,

11
00:00:41,719 --> 00:00:44,001
where you're working on a new project and you say,

12
00:00:44,021 --> 00:00:46,223
alright, let's start by defining gravity.

13
00:00:46,443 --> 00:00:51,168
We'll say gravity is 9.8 meters per second squared, real world physics, that's a good place to start.

14
00:00:51,988 --> 00:00:54,269
and then we'll choose a jump velocity relative to that.

15
00:00:54,749 --> 00:00:56,290
And maybe we'll tweak these numbers a little bit.

16
00:00:56,670 --> 00:00:58,670
Get something that feels sort of in the ballpark

17
00:00:58,710 --> 00:01:00,251
of what we expect our character's jump

18
00:01:00,571 --> 00:01:01,451
to look and feel like.

19
00:01:01,871 --> 00:01:03,171
But then maybe we send the build to friends

20
00:01:03,191 --> 00:01:04,412
and get some feedback that says,

21
00:01:04,792 --> 00:01:06,892
jumping feels floaty or jumping feels heavy.

22
00:01:06,912 --> 00:01:08,833
We go, okay, how do we respond to this?

23
00:01:09,173 --> 00:01:11,593
How do we tune the feel of our game

24
00:01:11,933 --> 00:01:14,274
without potentially breaking things,

25
00:01:14,314 --> 00:01:15,534
you know, five levels down the road

26
00:01:15,594 --> 00:01:17,835
because suddenly your character can't jump high enough

27
00:01:18,155 --> 00:01:19,075
to reach a platform

28
00:01:19,135 --> 00:01:20,896
or can't jump far enough to clear a gap.

29
00:01:21,796 --> 00:01:25,198
And what we would like to do instead is start by describing

30
00:01:25,339 --> 00:01:28,521
a jump trajectory in terms that are familiar to us

31
00:01:29,041 --> 00:01:30,702
as players and as designers.

32
00:01:30,842 --> 00:01:32,364
I know that I need to jump this high.

33
00:01:32,484 --> 00:01:34,125
I know that I need to jump this far.

34
00:01:34,645 --> 00:01:37,527
And from that description, derive the mathematical,

35
00:01:39,449 --> 00:01:42,110
sorry, derive the mathematical parameters

36
00:01:42,130 --> 00:01:43,411
that we need to model this in code.

37
00:01:44,710 --> 00:01:46,011
So we'll start with a few assumptions.

38
00:01:46,052 --> 00:01:49,154
We're going to be modeling our player character as a massless,

39
00:01:49,274 --> 00:01:50,776
frictionless particle in a vacuum,

40
00:01:50,816 --> 00:01:52,397
because game programmers love those, right?

41
00:01:52,977 --> 00:01:55,119
We're not going to worry about air friction or drag yet.

42
00:01:55,139 --> 00:01:56,621
We could bring those in later if we want to,

43
00:01:56,761 --> 00:01:58,462
but we're going to keep things simple for right now.

44
00:01:59,403 --> 00:02:03,524
Collision bounds don't matter whether you're using a box or a sphere or a capsule, whatever.

45
00:02:03,585 --> 00:02:05,305
The math is going to be exactly the same.

46
00:02:06,005 --> 00:02:08,206
We're going to be representing our player character's state

47
00:02:08,707 --> 00:02:09,967
as a position in space,

48
00:02:10,387 --> 00:02:12,068
a velocity that they're currently traveling,

49
00:02:12,708 --> 00:02:15,109
and a constant downward acceleration due to gravity.

50
00:02:16,300 --> 00:02:17,082
So let's look at gravity.

51
00:02:17,583 --> 00:02:19,966
Gravity is the one and only external force

52
00:02:19,987 --> 00:02:21,409
that's acting on our player character.

53
00:02:21,790 --> 00:02:24,414
It's constant over time, so if we graph this out,

54
00:02:24,434 --> 00:02:26,678
it's just a flat line, and we can write this as an equation,

55
00:02:27,098 --> 00:02:28,821
F double prime of T equals G,

56
00:02:29,042 --> 00:02:30,424
and G is our gravitational constant.

57
00:02:31,471 --> 00:02:34,415
Now from physics, we know that acceleration,

58
00:02:34,695 --> 00:02:38,080
velocity, and position are all related to each other

59
00:02:38,120 --> 00:02:40,663
and that they are derivatives and integrals of each other.

60
00:02:41,124 --> 00:02:43,427
So if we know acceleration at any time,

61
00:02:43,607 --> 00:02:47,072
we can integrate with respect to time to find velocity.

62
00:02:47,112 --> 00:02:48,013
So we'll go ahead and do that.

63
00:02:49,338 --> 00:02:50,999
And this gives us a function for velocity,

64
00:02:51,820 --> 00:02:54,561
f prime of t equals gt plus,

65
00:02:54,681 --> 00:02:57,063
we have to add an initial condition anytime we integrate,

66
00:02:57,483 --> 00:02:59,764
and we call this v naught, this is our initial velocity.

67
00:03:00,445 --> 00:03:02,246
When we graph this out, it's a descending line,

68
00:03:02,266 --> 00:03:03,907
and in fact the slope of that line

69
00:03:04,087 --> 00:03:05,608
is our gravitational constant g.

70
00:03:07,013 --> 00:03:09,214
We can integrate once more with respect to time

71
00:03:09,254 --> 00:03:11,636
to find a function for position, so we'll do that.

72
00:03:12,196 --> 00:03:13,878
And this gives us a function for position,

73
00:03:14,238 --> 00:03:18,081
F of T equals one half G T squared plus V naught T

74
00:03:18,541 --> 00:03:20,662
plus we add another initial condition

75
00:03:20,702 --> 00:03:22,163
when we integrate P naught.

76
00:03:22,384 --> 00:03:24,125
And this is our initial position.

77
00:03:24,585 --> 00:03:25,546
And throughout the rest of this talk,

78
00:03:25,566 --> 00:03:27,687
I'll be assuming that our initial position is zero,

79
00:03:27,727 --> 00:03:29,489
that we're jumping from a ground height of zero,

80
00:03:29,789 --> 00:03:31,190
and that term just sort of goes away.

81
00:03:31,390 --> 00:03:33,071
But it's important to understand why that's there.

82
00:03:34,281 --> 00:03:37,165
And when we graph this one out, you can see it sort of has a nice smooth curve to it.

83
00:03:37,245 --> 00:03:41,591
It's sort of what you would expect to see if you plotted your player character's jump over time.

84
00:03:43,072 --> 00:03:46,714
In fact, this equation is just the textbook physics 101

85
00:03:47,174 --> 00:03:48,375
projectile motion formula.

86
00:03:48,595 --> 00:03:52,116
If you were asked to solve a physics problem about how high

87
00:03:52,156 --> 00:03:54,797
in the air is a baseball five seconds after being hit by a

88
00:03:54,837 --> 00:03:57,478
batter, this is probably the equation you would be using.

89
00:03:57,999 --> 00:04:00,080
And all that we did to get there is we started by saying

90
00:04:00,460 --> 00:04:03,321
gravity is the one thing that affects us, and we integrated

91
00:04:03,341 --> 00:04:04,601
twice with respect to time.

92
00:04:06,365 --> 00:04:08,266
Now this equation has another cool property,

93
00:04:08,506 --> 00:04:10,647
which is that this is a parabola.

94
00:04:11,308 --> 00:04:13,269
Algebraically, we can define a parabola

95
00:04:13,809 --> 00:04:17,751
as f of x equals ax squared plus bx plus c.

96
00:04:18,811 --> 00:04:20,872
And substituting these values,

97
00:04:20,892 --> 00:04:22,633
you can see that our projectile motion formula

98
00:04:22,953 --> 00:04:24,014
does fit that description.

99
00:04:26,485 --> 00:04:29,347
And what that tells us is that the position

100
00:04:29,847 --> 00:04:31,788
and the path our player character follows

101
00:04:32,248 --> 00:04:33,849
as they are traveling through the air

102
00:04:34,190 --> 00:04:36,851
under the influence of gravity is a parabola.

103
00:04:36,931 --> 00:04:39,893
So necessarily, any properties of parabolas

104
00:04:39,913 --> 00:04:42,695
that we can identify would also hold true for that path.

105
00:04:43,316 --> 00:04:45,817
So let's look at some properties of parabolas next.

106
00:04:47,178 --> 00:04:51,040
Every parabola is symmetric about an axis of symmetry

107
00:04:51,081 --> 00:04:52,561
that intersects its vertex,

108
00:04:52,581 --> 00:04:54,303
what we would think of as the peak of the jump.

109
00:04:54,937 --> 00:04:57,738
So what that tells us is that the duration of time

110
00:04:57,818 --> 00:04:58,919
from when we leave the ground

111
00:04:58,939 --> 00:05:00,260
to when we reach the peak of a jump

112
00:05:00,780 --> 00:05:01,921
is going to be the same as the time

113
00:05:01,941 --> 00:05:03,802
from the peak of the jump back down to the ground again.

114
00:05:05,382 --> 00:05:07,864
Every parabola is geometrically self-similar

115
00:05:07,924 --> 00:05:09,044
to every other parabola.

116
00:05:09,505 --> 00:05:10,785
And what that tells us sort of intuitively

117
00:05:10,866 --> 00:05:15,848
is that if we can find a sufficient set of constraints

118
00:05:15,908 --> 00:05:18,810
to describe a parabolic jump trajectory,

119
00:05:19,802 --> 00:05:21,747
for instance, a vertical axis of symmetry

120
00:05:22,268 --> 00:05:24,513
and desired height and distance,

121
00:05:25,174 --> 00:05:27,460
there's only one parabola that could pass through

122
00:05:27,500 --> 00:05:30,366
that set of points, that could fulfill those constraints.

123
00:05:32,236 --> 00:05:34,236
And finally, the shape of a parabola,

124
00:05:34,256 --> 00:05:37,037
whether it's very wide and flat, or very tall and narrow,

125
00:05:37,357 --> 00:05:40,538
this is entirely dependent on the quadratic coefficient A,

126
00:05:40,918 --> 00:05:43,619
which in our projectile motion formula is one half G.

127
00:05:43,639 --> 00:05:45,939
And hopefully that intuitively makes sense as well,

128
00:05:45,979 --> 00:05:47,600
that this would depend on gravity.

129
00:05:47,680 --> 00:05:49,480
As gravity gets stronger, we expect to see

130
00:05:49,560 --> 00:05:52,021
a steeper, sharper fall off on that curve.

131
00:05:52,681 --> 00:05:56,122
For reference, the B and C terms of this parabola

132
00:05:56,142 --> 00:05:57,662
would be the initial velocity,

133
00:05:57,722 --> 00:05:59,903
what we could think of as the tangent to the jump.

134
00:06:00,743 --> 00:06:03,344
and the initial position, which is sort of just a

135
00:06:03,404 --> 00:06:05,725
translational offset on that graph.

136
00:06:07,346 --> 00:06:10,147
So, understanding that our player's jump trajectory

137
00:06:10,668 --> 00:06:12,488
is a parabola, and understanding some of these

138
00:06:12,548 --> 00:06:14,529
properties of parabolas, what we can do next

139
00:06:14,629 --> 00:06:16,971
is start designing a jump on paver.

140
00:06:17,371 --> 00:06:18,531
And for right now, we're gonna be talking about

141
00:06:18,571 --> 00:06:20,652
standing in place, jumping straight up,

142
00:06:20,752 --> 00:06:21,773
and falling straight down.

143
00:06:22,153 --> 00:06:24,454
We aren't jumping sideways through space yet,

144
00:06:24,494 --> 00:06:25,154
but we'll get there.

145
00:06:26,355 --> 00:06:28,956
So for right now, our x-axis is time.

146
00:06:30,160 --> 00:06:32,281
So we'll draw a graph of what we want our player's

147
00:06:32,341 --> 00:06:33,722
jump trajectory to look like and we'll say

148
00:06:33,762 --> 00:06:35,423
we have some height that we want to.

149
00:06:35,443 --> 00:06:37,043
And we'll call this height h.

150
00:06:37,323 --> 00:06:39,704
Maybe you have a platform that's 50 units off the ground

151
00:06:39,744 --> 00:06:42,065
so you want your jump height to be a little bit above that.

152
00:06:43,906 --> 00:06:45,307
Next we need to answer the question

153
00:06:45,347 --> 00:06:47,047
how long does it take us to reach that height?

154
00:06:47,147 --> 00:06:49,148
And we'll call this duration t sub h.

155
00:06:49,948 --> 00:06:52,309
Now because we know every parabola is symmetric

156
00:06:52,349 --> 00:06:54,991
we know that the time at which we land

157
00:06:55,031 --> 00:06:57,131
back on the ground again will be two t sub h.

158
00:06:58,552 --> 00:07:00,332
Now from this description, what we would like to do

159
00:07:00,872 --> 00:07:03,273
is calculate the mathematical properties

160
00:07:03,593 --> 00:07:05,533
that we need to model this jump in code.

161
00:07:05,853 --> 00:07:07,654
And we need two things, we need to know gravity

162
00:07:08,054 --> 00:07:10,374
and we need to know our initial jump velocity.

163
00:07:11,514 --> 00:07:12,835
So we'll start by looking at velocity.

164
00:07:12,855 --> 00:07:15,375
We go back to our graph from earlier

165
00:07:16,056 --> 00:07:17,516
and we say at time zero,

166
00:07:18,056 --> 00:07:20,256
we have some initial velocity v naught.

167
00:07:20,376 --> 00:07:21,437
We don't know what that is yet,

168
00:07:21,497 --> 00:07:23,157
that's one of the things we want to find.

169
00:07:24,547 --> 00:07:26,890
At time T sub H, our velocity is zero.

170
00:07:26,930 --> 00:07:28,011
This is the peak of the jump.

171
00:07:28,051 --> 00:07:30,414
This is when gravity has pulled down hard enough

172
00:07:30,434 --> 00:07:31,976
that we are momentarily weightless

173
00:07:32,076 --> 00:07:33,177
before we fall back to Earth.

174
00:07:34,038 --> 00:07:35,400
And then at time two T sub H,

175
00:07:35,460 --> 00:07:37,182
this is just as we're landing on the ground again.

176
00:07:37,963 --> 00:07:40,125
Our velocity is equal in magnitude

177
00:07:40,265 --> 00:07:43,409
and opposite in direction to our initial velocity.

178
00:07:43,449 --> 00:07:44,610
So this is negative V naught.

179
00:07:46,041 --> 00:07:47,362
So we'll look at this point in the middle here,

180
00:07:48,102 --> 00:07:50,623
where time is T sub H and velocity is zero.

181
00:07:51,384 --> 00:07:52,684
And we'll substitute these values

182
00:07:52,804 --> 00:07:56,326
into our function for velocity and solve for V naught.

183
00:07:56,886 --> 00:07:58,887
And sort of skipping to the end there,

184
00:07:58,947 --> 00:08:01,348
what this gives us is a solution

185
00:08:01,949 --> 00:08:03,610
for our initial velocity V naught

186
00:08:03,990 --> 00:08:06,431
in terms of gravity, which we don't yet know,

187
00:08:07,351 --> 00:08:09,092
and the duration to the peak of the jump,

188
00:08:09,192 --> 00:08:10,633
which we've defined in advance.

189
00:08:11,373 --> 00:08:13,715
So next we need to find a solution for gravity.

190
00:08:15,100 --> 00:08:17,442
So to solve for gravity, we'll go to the graph of position

191
00:08:17,462 --> 00:08:18,282
that we just drew.

192
00:08:18,663 --> 00:08:20,784
We start at a height of zero at time zero.

193
00:08:21,485 --> 00:08:23,827
At time t sub h, we have some desired height h,

194
00:08:23,927 --> 00:08:25,268
and then at time two t sub h,

195
00:08:25,288 --> 00:08:26,269
we've landed on the ground again.

196
00:08:26,669 --> 00:08:27,290
Our height is zero.

197
00:08:27,930 --> 00:08:30,512
From the previous slide, we know that we can express

198
00:08:30,853 --> 00:08:34,115
our initial velocity as a function of gravity and time.

199
00:08:35,404 --> 00:08:39,529
So we'll substitute these values into our equation for position.

200
00:08:40,390 --> 00:08:42,432
And again, we'll look at this point in the middle where our

201
00:08:42,472 --> 00:08:46,898
height is H and our time is T sub H. And we'll solve this for

202
00:08:46,958 --> 00:08:49,641
G. And again, sort of skipping through all the math there.

203
00:08:50,422 --> 00:08:53,164
What this gives us is a solution for our gravitational

204
00:08:53,204 --> 00:08:56,126
constant g in terms of the height and distance,

205
00:08:56,146 --> 00:08:58,488
or in terms of the height and the duration of the jump.

206
00:08:58,808 --> 00:09:00,890
So that's one of the two things we were wanting to find.

207
00:09:01,650 --> 00:09:03,351
Now that we have a solution for gravity,

208
00:09:03,551 --> 00:09:06,513
we can go back to the previous slide where we wrote

209
00:09:06,634 --> 00:09:09,416
initial velocity in terms of gravity,

210
00:09:09,436 --> 00:09:10,676
and we can substitute this in.

211
00:09:11,457 --> 00:09:14,039
And this gives us a solution for initial velocity,

212
00:09:14,599 --> 00:09:17,441
also in terms of the height and the duration of the jump.

213
00:09:18,407 --> 00:09:20,589
So to review, I know I'm skipping through a little bit

214
00:09:20,849 --> 00:09:23,271
of the math here quickly, but if you're taking notes

215
00:09:23,311 --> 00:09:24,472
or taking pictures on your cell phone,

216
00:09:24,512 --> 00:09:26,033
this would be probably one of the slides

217
00:09:26,053 --> 00:09:26,734
you'd want to remember.

218
00:09:27,655 --> 00:09:29,936
What we've done here is we've described a jump trajectory

219
00:09:29,956 --> 00:09:32,238
in terms of the height and in terms of the duration

220
00:09:32,278 --> 00:09:33,659
that it takes to get us to that height.

221
00:09:34,360 --> 00:09:37,282
And from that description, we can calculate the gravity

222
00:09:37,662 --> 00:09:39,424
and the initial velocity that we need

223
00:09:39,544 --> 00:09:41,886
to model this jump accurately in code.

224
00:09:44,127 --> 00:09:46,809
So this is cool, this gets us some of the way to our goal.

225
00:09:49,442 --> 00:09:51,823
But as long as we're speaking about the height of the jump,

226
00:09:52,123 --> 00:09:53,785
it would also be useful to speak about

227
00:09:53,825 --> 00:09:55,206
the distance of the jump.

228
00:09:55,626 --> 00:09:57,527
And we can do that, but we need to introduce

229
00:09:57,627 --> 00:10:00,209
another parameter, which is how fast

230
00:10:00,229 --> 00:10:01,350
do we move side to side.

231
00:10:01,990 --> 00:10:04,612
So I'll be calling this lateral speed or foot speed.

232
00:10:05,753 --> 00:10:07,755
Depending on your game, depending on your application,

233
00:10:08,135 --> 00:10:09,696
this might not be a constant value.

234
00:10:09,956 --> 00:10:12,058
You might have some ramp up and ramp down time

235
00:10:12,538 --> 00:10:13,799
in your foot speed.

236
00:10:14,039 --> 00:10:15,740
You might have a different horizontal speed

237
00:10:15,760 --> 00:10:17,342
when you're running on the ground

238
00:10:17,382 --> 00:10:18,663
versus jumping through the air.

239
00:10:19,143 --> 00:10:20,864
But for the purposes of this talk,

240
00:10:21,265 --> 00:10:23,186
whatever the maximum horizontal speed

241
00:10:23,206 --> 00:10:25,908
that you could reach as you are moving through the air,

242
00:10:26,048 --> 00:10:27,930
whatever that is, that's the number we want to use.

243
00:10:29,638 --> 00:10:31,640
It's also important to note here that you need to keep the

244
00:10:31,660 --> 00:10:34,303
horizontal and vertical components of your player

245
00:10:34,323 --> 00:10:35,845
character's velocity separate.

246
00:10:36,506 --> 00:10:38,688
If you're making a 2D platformer, this means keeping

247
00:10:38,708 --> 00:10:40,090
your X and Y values separate.

248
00:10:40,411 --> 00:10:42,773
If you're making a 3D platformer, whatever your up

249
00:10:42,894 --> 00:10:45,296
axis is, whether that's Y or Z, you need to keep that

250
00:10:45,336 --> 00:10:47,119
separate from movement in the horizontal plane.

251
00:10:47,679 --> 00:10:49,741
And when I say keep those separate, what I mean is if

252
00:10:49,761 --> 00:10:53,784
your player is running really fast sideways and they press

253
00:10:53,824 --> 00:10:56,667
the jump button, you don't want to kill that horizontal

254
00:10:56,707 --> 00:10:57,988
movement and jump straight up.

255
00:10:58,268 --> 00:11:01,411
You want to keep the horizontal movement going and just add a

256
00:11:01,491 --> 00:11:02,992
vertical component to that.

257
00:11:05,214 --> 00:11:07,756
We also have this relationship among three parameters now.

258
00:11:07,816 --> 00:11:10,558
Previously, we were speaking about the duration of the jump,

259
00:11:10,618 --> 00:11:13,421
the time to reach the peak of the jump, T sub H. Now we're

260
00:11:13,441 --> 00:11:15,943
going to start talking about the horizontal distance that

261
00:11:15,963 --> 00:11:16,403
we cover.

262
00:11:17,660 --> 00:11:20,227
on the way to the peak of the jump. And we're also going to be

263
00:11:20,247 --> 00:11:21,972
talking about our foot speed, V sub X.

264
00:11:22,830 --> 00:11:28,015
You can pick two of these, but the third one necessarily has to be a function of the other two.

265
00:11:28,415 --> 00:11:32,519
So for my money, I think it makes the most sense to define the horizontal distance to the peak of the jump,

266
00:11:32,999 --> 00:11:37,683
and define the foot speed, and allow the duration of the jump to be a function of those.

267
00:11:38,044 --> 00:11:41,527
Just because when we're talking about the duration of a jump, usually we're talking about

268
00:11:42,127 --> 00:11:46,211
fractions of a second, and that's not necessarily the most intuitive thing to speak about,

269
00:11:46,491 --> 00:11:48,713
or the most intuitive thing to design up front.

270
00:11:50,509 --> 00:11:52,810
So just as before, we're going to draw a graph

271
00:11:52,850 --> 00:11:54,830
of what we would like our jump trajectory to look like,

272
00:11:55,250 --> 00:11:56,871
only now we're jumping through space.

273
00:11:57,151 --> 00:12:00,452
So our X axis is distance rather than time.

274
00:12:01,592 --> 00:12:03,552
And in fact, you could draw this graph

275
00:12:03,792 --> 00:12:05,973
over a representative scene from your game,

276
00:12:06,013 --> 00:12:07,873
especially if you're making a 2D platformer.

277
00:12:07,933 --> 00:12:09,994
You could say, well, I have a platform this high,

278
00:12:10,074 --> 00:12:12,154
or I have a pit of spikes that's this long,

279
00:12:12,214 --> 00:12:13,595
I know that I need to jump that high

280
00:12:13,615 --> 00:12:15,415
or that far to cross those.

281
00:12:16,949 --> 00:12:19,350
So we're defining our jump now in terms of the height,

282
00:12:19,590 --> 00:12:21,931
but also the distance horizontally that we cover

283
00:12:22,671 --> 00:12:23,912
on the way to the peak of that jump,

284
00:12:24,012 --> 00:12:25,132
and we call that X sub H.

285
00:12:25,712 --> 00:12:27,073
And then we have our lateral foot speed,

286
00:12:27,093 --> 00:12:28,173
and we call that V sub X.

287
00:12:29,834 --> 00:12:31,995
So just as before, we want to find gravity,

288
00:12:32,075 --> 00:12:33,715
and we want to find initial velocity,

289
00:12:33,775 --> 00:12:35,936
because those are the things we need to model this in code.

290
00:12:36,836 --> 00:12:38,777
And to do this, we're going to take the equations

291
00:12:38,817 --> 00:12:40,638
we found previously for those values,

292
00:12:40,778 --> 00:12:41,958
and make some substitutions.

293
00:12:43,780 --> 00:12:46,862
So on the left here, we have a substitution for T sub H,

294
00:12:46,982 --> 00:12:48,323
the duration to the peak of the jump.

295
00:12:48,783 --> 00:12:51,284
We can rewrite this as X sub H,

296
00:12:51,605 --> 00:12:53,366
the horizontal distance to the peak of the jump,

297
00:12:53,706 --> 00:12:57,108
divided by our lateral foot speed, V sub X.

298
00:12:59,909 --> 00:13:02,271
On the top row, we have the equations we found previously

299
00:13:02,331 --> 00:13:04,972
for initial velocity and gravity.

300
00:13:05,612 --> 00:13:08,694
And on the bottom row, we've substituted that T sub H term

301
00:13:09,134 --> 00:13:10,475
with the substitution from the side.

302
00:13:11,934 --> 00:13:14,375
So again to review, this would probably be one of the slides

303
00:13:14,395 --> 00:13:15,275
you'd want to get a picture of.

304
00:13:16,415 --> 00:13:18,415
What we've done is we've started by describing

305
00:13:18,556 --> 00:13:22,196
an ideal desired jump trajectory in terms of height,

306
00:13:23,076 --> 00:13:25,797
in terms of distance, and in terms of how fast

307
00:13:25,837 --> 00:13:27,757
our player character moves side to side.

308
00:13:28,638 --> 00:13:31,938
And from that description, we can calculate gravity,

309
00:13:31,958 --> 00:13:33,919
and we can calculate initial velocity,

310
00:13:34,279 --> 00:13:35,559
and we have everything that we need

311
00:13:35,739 --> 00:13:37,200
to model this jump in code.

312
00:13:38,512 --> 00:13:40,393
So this is pretty cool, this gets us a little bit further.

313
00:13:41,033 --> 00:13:42,374
But at this point, we're still talking about

314
00:13:42,414 --> 00:13:44,495
very perfect parabolic jumps.

315
00:13:44,855 --> 00:13:46,916
And while that might be true to real world physics

316
00:13:47,056 --> 00:13:49,977
in the case of this massless frictionless particle

317
00:13:49,997 --> 00:13:52,538
in a vacuum, it's not necessarily the most fun

318
00:13:52,598 --> 00:13:55,499
or interesting or good feeling thing for a video game.

319
00:13:56,099 --> 00:13:58,220
So what we'd like to do next is start looking for ways

320
00:13:58,240 --> 00:13:59,881
that we can break the rules a little bit

321
00:14:00,301 --> 00:14:02,342
while still relying on these properties

322
00:14:02,922 --> 00:14:05,343
and knowing that we can design our jump

323
00:14:05,723 --> 00:14:07,004
and trust that we're going to reach

324
00:14:07,044 --> 00:14:08,064
a certain height and distance.

325
00:14:09,444 --> 00:14:11,426
And to do this, we're going to start thinking about our jump

326
00:14:11,446 --> 00:14:14,970
trajectory not as a single parabola, but as multiple

327
00:14:14,990 --> 00:14:17,113
segments of partial parabolas.

328
00:14:17,994 --> 00:14:21,718
And to give you a real world example of a game that does

329
00:14:21,758 --> 00:14:25,722
this sort of rule breaking, in the original Super Mario

330
00:14:25,742 --> 00:14:26,082
Brothers,

331
00:14:27,922 --> 00:14:30,665
I think this was mentioned in Steve Swink's book, Game Feel.

332
00:14:30,965 --> 00:14:32,627
In the original Super Mario Brothers,

333
00:14:32,687 --> 00:14:35,150
Mario runs and jumps and flies through the air,

334
00:14:35,891 --> 00:14:37,413
and he reaches the peak of his jump,

335
00:14:38,034 --> 00:14:41,658
and suddenly gravity triples, and Mario falls like a brick.

336
00:14:42,769 --> 00:14:45,411
Now there's nothing real world physics about a sudden

337
00:14:45,491 --> 00:14:47,352
increase in gravity at the peak of a jump,

338
00:14:48,013 --> 00:14:50,414
but that treatment is part of what gives Mario

339
00:14:50,454 --> 00:14:52,896
his characteristic trademark sense of weight.

340
00:14:53,556 --> 00:14:55,898
Along with a slow ramp up and ramp down time

341
00:14:55,958 --> 00:14:58,119
on his sideways movement, it's what makes him feel

342
00:14:58,239 --> 00:15:00,020
different than other video game characters.

343
00:15:00,501 --> 00:15:01,982
And we'd like to look for ways that we can

344
00:15:02,522 --> 00:15:04,483
bring those sorts of unique characteristics

345
00:15:04,543 --> 00:15:05,244
to our own game.

346
00:15:06,917 --> 00:15:08,318
So, let's look at an example.

347
00:15:09,558 --> 00:15:11,618
We'll take the same example of falling faster

348
00:15:11,658 --> 00:15:12,539
beyond the peak of a jump.

349
00:15:13,739 --> 00:15:16,400
We can start by drawing a jump trajectory

350
00:15:16,500 --> 00:15:17,860
exactly as we have in the past,

351
00:15:18,340 --> 00:15:20,261
in terms of height and distance,

352
00:15:20,801 --> 00:15:22,421
and lateral foot speed, but that's not shown here.

353
00:15:23,501 --> 00:15:24,682
But once we get to the peak of the jump,

354
00:15:24,902 --> 00:15:27,102
we'll break it there, and we'll draw a different curve

355
00:15:27,262 --> 00:15:30,123
on the other side, a different part of a different parabola,

356
00:15:30,383 --> 00:15:33,284
one with the same height, but a shorter distance.

357
00:15:34,572 --> 00:15:36,414
Now from the materials that we've already covered,

358
00:15:36,494 --> 00:15:39,477
we have everything that we need to calculate

359
00:15:39,717 --> 00:15:42,020
an initial velocity and a gravity

360
00:15:42,280 --> 00:15:44,102
for each part of this trajectory.

361
00:15:44,803 --> 00:15:47,085
We only need the initial velocity for the first part

362
00:15:47,365 --> 00:15:48,847
as our character's taken off from the ground.

363
00:15:49,608 --> 00:15:51,489
But what we would do then is we would apply

364
00:15:51,770 --> 00:15:54,132
gravity over time for the first half of the curve.

365
00:15:55,113 --> 00:15:56,594
And when we reach the peak of the jump,

366
00:15:56,914 --> 00:15:59,516
in code, when the vertical component of our velocity

367
00:15:59,536 --> 00:16:01,077
goes from positive to negative,

368
00:16:01,798 --> 00:16:03,579
we would switch over and start applying

369
00:16:03,619 --> 00:16:05,380
the heavier gravity corresponding

370
00:16:05,780 --> 00:16:07,922
to the second half of this trajectory.

371
00:16:08,803 --> 00:16:10,804
And when you play this back in real time,

372
00:16:11,084 --> 00:16:13,766
you would see your character follow a trajectory

373
00:16:13,806 --> 00:16:14,206
just like this.

374
00:16:14,246 --> 00:16:15,607
They would fly through the air,

375
00:16:15,647 --> 00:16:17,068
have sort of a nice smooth ascent,

376
00:16:17,208 --> 00:16:18,469
and they would reach the peak of their jump

377
00:16:18,529 --> 00:16:19,590
and fall much faster.

378
00:16:21,812 --> 00:16:24,133
We can do a similar thing for variable height jumping.

379
00:16:26,625 --> 00:16:29,158
variable height jumping tends to be communicated to the player

380
00:16:29,801 --> 00:16:30,525
in terms of

381
00:16:31,295 --> 00:16:33,297
hold the button down longer to jump higher.

382
00:16:33,877 --> 00:16:35,638
But the way we would think about this in code

383
00:16:35,698 --> 00:16:37,960
is we would treat the maximum height

384
00:16:38,040 --> 00:16:41,022
that the player could ever reach as the default.

385
00:16:41,182 --> 00:16:43,223
That's where we get our initial velocity from.

386
00:16:44,104 --> 00:16:46,526
And if the player releases the jump button early,

387
00:16:46,686 --> 00:16:48,427
before they've reached the peak of the jump,

388
00:16:48,767 --> 00:16:51,029
we switch over to a heavier gravity value

389
00:16:51,069 --> 00:16:52,670
to reach the peak sooner.

390
00:16:53,530 --> 00:16:56,853
So in this graph here, where the line goes from blue to red,

391
00:16:56,873 --> 00:16:58,013
that's the moment where the player

392
00:16:58,033 --> 00:16:59,454
has released the jump button.

393
00:17:00,408 --> 00:17:08,655
You can see another outline of blue, an outline in blue in the back, and that represents sort of that maximum jump height that they could reach if they kept the button held down.

394
00:17:09,055 --> 00:17:13,038
You can see another smaller outline in red, and that's a minimum jump height.

395
00:17:13,358 --> 00:17:18,943
If you were to just feather the button on and off again for a split second, you would still want to cover some distance.

396
00:17:19,203 --> 00:17:21,505
So that's where this minimum jump height comes from.

397
00:17:22,066 --> 00:17:26,950
And that corresponds to the gravity that we use to bring the player character to the peak of their jump sooner.

398
00:17:28,093 --> 00:17:29,594
Now once we reach the peak of the jump,

399
00:17:29,634 --> 00:17:30,554
we have a few options.

400
00:17:30,634 --> 00:17:32,655
In this graph, I show us reverting back

401
00:17:32,695 --> 00:17:34,515
to the original gravity, so we have sort of

402
00:17:34,535 --> 00:17:36,535
a nice smooth descent on the other side.

403
00:17:37,196 --> 00:17:40,336
But you could also remain at a heavier gravity value

404
00:17:40,376 --> 00:17:42,057
if the player had released the button sooner.

405
00:17:42,577 --> 00:17:44,097
Or you could even combine this technique

406
00:17:44,137 --> 00:17:46,138
with the one from the previous slide and say,

407
00:17:46,598 --> 00:17:49,419
regardless of whether the player released the button early,

408
00:17:49,879 --> 00:17:52,499
we always switch to a different falling gravity

409
00:17:52,719 --> 00:17:53,780
beyond the peak of the jump.

410
00:17:55,947 --> 00:18:03,209
If you're implementing double jumping or any number of multi-jumps, you could define each stage of the jump as a separate parabola.

411
00:18:03,749 --> 00:18:07,071
Define these in terms of height and distance again, just as we have in the past.

412
00:18:07,711 --> 00:18:13,033
And calculate an initial velocity and a gravity for each stage of this jump.

413
00:18:13,613 --> 00:18:20,575
In this case, you would need to know the initial velocity for that second part, because you would be treating that just like a jump from a standstill in that case.

414
00:18:22,937 --> 00:18:25,618
So throughout this talk I've been mentioning that we need

415
00:18:25,778 --> 00:18:28,619
two things to model a jump in code.

416
00:18:28,659 --> 00:18:31,040
We need gravity and we need initial velocity.

417
00:18:31,060 --> 00:18:32,981
So let's talk a little bit about how this works.

418
00:18:33,441 --> 00:18:36,122
With initial velocity, as soon as the player presses

419
00:18:36,182 --> 00:18:39,043
the jump button, we want to apply that to the player

420
00:18:39,063 --> 00:18:40,283
character's current state.

421
00:18:40,824 --> 00:18:43,805
But again, it's important to note that you want to decouple

422
00:18:44,005 --> 00:18:46,085
your horizontal movement from your vertical.

423
00:18:46,365 --> 00:18:48,606
You don't want to kill horizontal movement and just

424
00:18:48,806 --> 00:18:49,547
jump straight up.

425
00:18:49,807 --> 00:18:51,027
You want to keep horizontal movement.

426
00:18:51,327 --> 00:18:56,316
going and apply a vertical component to that. Gravity

427
00:18:56,356 --> 00:18:59,081
needs to be applied over time so for that one we need to talk

428
00:18:59,101 --> 00:18:59,782
about integration.

429
00:19:00,970 --> 00:19:03,312
Generally speaking, integration solves the problem of

430
00:19:03,992 --> 00:19:05,813
we have some previous game state

431
00:19:05,913 --> 00:19:07,534
and then there's been some passage of time

432
00:19:07,614 --> 00:19:10,636
and we want to predict with as much accuracy as possible

433
00:19:10,676 --> 00:19:12,377
what the next game state is going to be.

434
00:19:12,877 --> 00:19:14,478
In any engine or any framework,

435
00:19:14,498 --> 00:19:16,979
you're going to have the same sort of integration

436
00:19:17,920 --> 00:19:18,960
with this passage of time.

437
00:19:19,261 --> 00:19:20,942
This might be a variable amount of time,

438
00:19:20,982 --> 00:19:21,802
it might be constant,

439
00:19:22,042 --> 00:19:23,423
it might be sort of obscured a little bit,

440
00:19:23,463 --> 00:19:24,303
but that's always there

441
00:19:24,343 --> 00:19:25,904
and your math does need to account for that.

442
00:19:26,825 --> 00:19:29,107
So the easiest way to do this is with Euler integration.

443
00:19:29,387 --> 00:19:32,169
We increment our position by velocity

444
00:19:32,209 --> 00:19:33,170
multiplied by dollar time.

445
00:19:33,230 --> 00:19:35,392
We increment velocity by acceleration

446
00:19:35,773 --> 00:19:36,853
multiplied by dollar time.

447
00:19:37,594 --> 00:19:39,576
So this is easy to write, but it's not very stable.

448
00:19:39,716 --> 00:19:41,137
And in the worst case scenario,

449
00:19:41,277 --> 00:19:42,999
the player might perceive a difference

450
00:19:43,379 --> 00:19:44,820
in the way their character handles.

451
00:19:45,481 --> 00:19:47,883
For instance, if a lot of stuff is happening on screen

452
00:19:47,923 --> 00:19:48,944
and the frame rate drops.

453
00:19:49,444 --> 00:19:51,246
And those are the sorts of inconsistencies

454
00:19:51,286 --> 00:19:52,247
that we would like to avoid.

455
00:19:53,410 --> 00:19:55,171
So on the far end of the spectrum,

456
00:19:55,331 --> 00:19:56,812
we have the Runge-Kutta methods,

457
00:19:58,993 --> 00:20:00,194
and RK-Far in particular.

458
00:20:00,854 --> 00:20:02,135
I don't have pseudocode for this one

459
00:20:02,155 --> 00:20:03,655
because it tends to be very wordy,

460
00:20:03,715 --> 00:20:05,676
but I would point to the Gaff Runge Games article,

461
00:20:05,737 --> 00:20:08,238
Integration Basics, as a really great overview

462
00:20:08,298 --> 00:20:09,258
of what this might look like

463
00:20:09,618 --> 00:20:11,419
in an actual game development scenario.

464
00:20:12,597 --> 00:20:14,479
However, my takeaway from that article,

465
00:20:14,800 --> 00:20:16,762
and from some of the comments on that article,

466
00:20:16,862 --> 00:20:19,385
is that if all we're doing is dealing with this sort of

467
00:20:19,485 --> 00:20:21,928
projectile motion, the Runge-Kutta methods

468
00:20:21,988 --> 00:20:23,530
are way more complex than what we need.

469
00:20:23,750 --> 00:20:26,253
We can actually find an integration method

470
00:20:26,453 --> 00:20:28,415
that is every bit as accurate,

471
00:20:28,836 --> 00:20:30,658
but much, much simpler to write.

472
00:20:31,979 --> 00:20:34,381
So let's take a look at velocity of relay next.

473
00:20:35,041 --> 00:20:36,442
The way velocity of relay is written,

474
00:20:36,482 --> 00:20:38,644
you start off similar to Euler integration,

475
00:20:38,684 --> 00:20:40,625
you increment position based on velocity,

476
00:20:41,005 --> 00:20:41,926
but then we have this term,

477
00:20:42,266 --> 00:20:45,329
one half acceleration times the square of the delta time.

478
00:20:46,209 --> 00:20:48,211
Then you calculate a new acceleration value

479
00:20:48,311 --> 00:20:50,072
as a function of position.

480
00:20:50,752 --> 00:20:53,774
You increment your velocity by an interpolation

481
00:20:53,854 --> 00:20:57,437
halfway between the previous and new acceleration values,

482
00:20:58,097 --> 00:20:59,739
and then you commit the change to acceleration.

483
00:21:00,559 --> 00:21:03,862
So this is interesting, it's definitely simpler to write

484
00:21:03,882 --> 00:21:06,704
than Runge-Kutta methods, but it's not necessarily

485
00:21:06,764 --> 00:21:09,387
applicable to our situation, because in our case,

486
00:21:09,467 --> 00:21:12,229
gravity is mostly constant, except for those few places

487
00:21:12,269 --> 00:21:13,590
where we've chosen to break the rules

488
00:21:13,650 --> 00:21:15,391
and increase or decrease gravity.

489
00:21:17,353 --> 00:21:19,755
So maybe we can simplify this a little bit further.

490
00:21:19,935 --> 00:21:21,236
What's also interesting to notice here

491
00:21:21,877 --> 00:21:24,479
is we have this one half acceleration

492
00:21:24,619 --> 00:21:26,561
times the square of the dollar time term.

493
00:21:27,535 --> 00:21:31,557
And that sort of recalls our original projectile motion formula.

494
00:21:31,697 --> 00:21:35,560
And in fact if we think about it in those terms, we have this projectile motion formula

495
00:21:35,920 --> 00:21:42,464
and that already answers the question of given any set of initial conditions, for instance

496
00:21:42,845 --> 00:21:49,008
the previous game state, we know with 100% accuracy where our player is going to be at

497
00:21:49,489 --> 00:21:50,589
any time in the future.

498
00:21:50,649 --> 00:21:52,711
For instance, after this delta time.

499
00:21:54,317 --> 00:21:57,058
So if we were to simplify velocity of relay,

500
00:21:57,779 --> 00:21:59,419
assuming a constant acceleration,

501
00:21:59,439 --> 00:22:01,601
this would actually correspond directly

502
00:22:01,661 --> 00:22:03,682
to our projectile motion formula,

503
00:22:04,102 --> 00:22:07,104
and we could trust that we are getting

504
00:22:07,204 --> 00:22:07,924
100% accurate results.

505
00:22:09,485 --> 00:22:11,786
But what about those times when we do deliberately

506
00:22:11,866 --> 00:22:12,927
break the rules a little bit,

507
00:22:12,947 --> 00:22:14,508
and we say we've reached the peak of the jump,

508
00:22:14,588 --> 00:22:15,708
we increase gravity.

509
00:22:16,029 --> 00:22:18,350
How much error do we accumulate in those cases

510
00:22:18,610 --> 00:22:21,732
if we were to just naively integrate this way,

511
00:22:21,792 --> 00:22:23,353
assuming a constant acceleration?

512
00:22:24,731 --> 00:22:28,317
That error would be on the order of the change in acceleration

513
00:22:28,638 --> 00:22:31,763
from the previous frame to the new one. Multiplied by the

514
00:22:31,863 --> 00:22:35,530
square of the dollar time. Now when I ran these numbers on one

515
00:22:35,550 --> 00:22:36,191
of my own games.

516
00:22:38,613 --> 00:22:40,674
This error was about half a pixel.

517
00:22:41,294 --> 00:22:42,995
And this isn't something that would accumulate

518
00:22:43,095 --> 00:22:45,015
over an entire session and eventually

519
00:22:45,055 --> 00:22:46,016
throw things out of whack.

520
00:22:46,316 --> 00:22:49,077
This is a one time offset that gets zeroed out

521
00:22:49,097 --> 00:22:51,117
the next time your player character lands on the ground.

522
00:22:51,157 --> 00:22:53,058
So I would argue this is a perfectly

523
00:22:53,098 --> 00:22:54,238
acceptable amount of error.

524
00:22:54,738 --> 00:22:56,539
And if you've been using Euler integration,

525
00:22:56,619 --> 00:22:58,320
and if you're dealing with projectile motion,

526
00:22:58,740 --> 00:23:00,540
I would recommend giving this simplified

527
00:23:00,600 --> 00:23:02,661
velocity of relay integration method a try.

528
00:23:02,701 --> 00:23:04,521
I think you'll be really happy with the results.

529
00:23:06,690 --> 00:23:09,271
So to review, our goal has been to move away

530
00:23:09,391 --> 00:23:11,872
from trial and error, move away from defining

531
00:23:11,932 --> 00:23:15,133
physical constants up front, and move in a direction

532
00:23:15,233 --> 00:23:17,574
where we can describe a jump trajectory

533
00:23:18,314 --> 00:23:20,675
in terms that are familiar to us as players

534
00:23:20,735 --> 00:23:21,695
and as designers.

535
00:23:22,376 --> 00:23:24,476
I know that I want to jump this high and this far.

536
00:23:25,156 --> 00:23:27,017
And then we want to lean on those abilities

537
00:23:27,177 --> 00:23:28,738
to craft a unique...

538
00:23:29,518 --> 00:23:32,282
individually characteristic jump trajectory

539
00:23:32,603 --> 00:23:35,467
that can give our particular game its own unique feel.

540
00:23:36,148 --> 00:23:38,712
And we still can trust that it's going to feel

541
00:23:38,792 --> 00:23:41,396
rooted in the truth of gravity constantly

542
00:23:41,437 --> 00:23:42,799
pulling our player character down.

543
00:23:42,819 --> 00:23:44,281
So, whoops.

544
00:23:46,313 --> 00:23:48,313
I'll plug my own game here real quick. I have a game on Steam.

545
00:23:48,713 --> 00:23:50,894
It's called You Have to Win the Game. It's free, like actually

546
00:23:50,934 --> 00:23:53,634
free, not in-app purchases free. And it uses most of the

547
00:23:53,674 --> 00:23:55,875
principles I've talked about here today. So if you have a

548
00:23:55,895 --> 00:23:58,835
chance to try that, hopefully you'll like the way it feels and

549
00:23:58,975 --> 00:24:02,236
be convinced that this is a good method to follow. You can find

550
00:24:02,276 --> 00:24:05,396
me on Twitter as well, at Pirate Hearts. My websites are

551
00:24:05,416 --> 00:24:08,377
minorkeygames.com and gunmetalarcadia.com, another

552
00:24:08,477 --> 00:24:11,117
platformer I'm making that uses all of these same principles.

553
00:24:11,757 --> 00:24:13,358
But that's it for me. Thank you for your time.

554
00:24:22,550 --> 00:24:24,150
All right, I guess we do have time for some questions,

555
00:24:24,170 --> 00:24:26,391
so if anyone wants to come up to the mic there.

556
00:24:26,411 --> 00:24:35,035
Can you put up the slide for the last

557
00:24:35,055 --> 00:24:36,096
specific question?

558
00:24:36,116 --> 00:24:38,197
Oh yeah, absolutely.

559
00:24:38,217 --> 00:24:38,317
Yeah.

560
00:24:38,497 --> 00:24:39,817
I guess I wanted to ask really quickly,

561
00:24:40,358 --> 00:24:42,239
I know you briefly mentioned Super Mario Bros.

562
00:24:42,279 --> 00:24:44,239
as a way of, as an example of good jumping.

563
00:24:44,680 --> 00:24:46,480
Are there like any other games you want to mention

564
00:24:46,500 --> 00:24:48,701
that have examples of good or bad jumping?

565
00:24:49,891 --> 00:24:52,813
I haven't analyzed others as specifically as that one,

566
00:24:52,933 --> 00:24:55,835
but I would point to Super Meat Boy as a really good example

567
00:24:56,336 --> 00:24:59,778
of having a unique characteristic sort of floatiness.

568
00:24:59,858 --> 00:25:03,040
But floatiness necessarily doesn't always feel good,

569
00:25:03,080 --> 00:25:05,082
but they managed to make it feel good in that way.

570
00:25:05,362 --> 00:25:09,365
I think it was a combination of the way the character moves,

571
00:25:09,425 --> 00:25:12,167
but also interacts with walls and has wall jumping

572
00:25:12,207 --> 00:25:13,548
and all those sorts of abilities.

573
00:25:15,329 --> 00:25:15,609
Thank you.

574
00:25:16,170 --> 00:25:16,350
Thanks.

575
00:25:18,989 --> 00:25:20,551
If anyone else has another question, I guess we have time

576
00:25:20,571 --> 00:25:21,011
for one more.

577
00:25:30,100 --> 00:25:30,901
Let's thank Kyle.

