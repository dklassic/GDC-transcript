1
00:00:06,579 --> 00:00:08,880
Hello, my name is Amy Phillips.

2
00:00:09,300 --> 00:00:11,441
I am a tools programmer at Media Molecule.

3
00:00:12,262 --> 00:00:14,522
And today I would like to tell you about the tools

4
00:00:14,563 --> 00:00:18,304
that we've written to keep the number of open bugs low.

5
00:00:22,206 --> 00:00:24,347
So firstly, why do you want less open bugs?

6
00:00:25,067 --> 00:00:28,549
Well, because if you are being stopped from working by bugs,

7
00:00:28,589 --> 00:00:30,950
you're not getting on with the fun bit of making games.

8
00:00:31,250 --> 00:00:33,231
And we all want to do the kind of creative bit.

9
00:00:33,951 --> 00:00:35,471
So if we can keep the number of bugs low,

10
00:00:36,431 --> 00:00:37,631
we can all get on with the cool bit.

11
00:00:39,113 --> 00:00:44,156
So what we've done is connect a bunch of off-the-shelf tools together

12
00:00:45,137 --> 00:00:49,520
by writing a bit of bespoke code, but using other people's stuff as well,

13
00:00:49,761 --> 00:00:53,303
which means that we get the advantages of writing our own stuff.

14
00:00:54,124 --> 00:00:59,988
Because we're quite a small team, we don't have the time to write entirely our own stuff.

15
00:01:01,690 --> 00:01:02,750
A little bit about Dreams.

16
00:01:03,551 --> 00:01:05,913
It is a user-generated content game.

17
00:01:06,724 --> 00:01:08,304
It's kind of like LittleBigPlanet,

18
00:01:08,585 --> 00:01:10,646
only much, much, much more so.

19
00:01:11,847 --> 00:01:14,228
So you can sculpt things.

20
00:01:14,928 --> 00:01:18,891
You can then stamp them down to make an environment.

21
00:01:19,411 --> 00:01:21,672
You can add a character to that environment.

22
00:01:22,253 --> 00:01:24,514
And then you can completely change the character.

23
00:01:24,554 --> 00:01:26,375
So you can like re-sculpt your character.

24
00:01:26,835 --> 00:01:28,136
You can animate your character.

25
00:01:28,176 --> 00:01:30,077
You can animate the environment as well.

26
00:01:31,038 --> 00:01:32,459
You can add in sound effects.

27
00:01:32,979 --> 00:01:34,480
You can create your own music.

28
00:01:36,565 --> 00:01:40,888
So it's a really cool, creative sandbox.

29
00:01:41,448 --> 00:01:44,050
And everything that we're shipping with Dreams,

30
00:01:44,110 --> 00:01:46,331
so we're shipping a game with Dreams,

31
00:01:47,552 --> 00:01:50,454
everything that we're shipping, we're making within Dreams.

32
00:01:50,974 --> 00:01:53,276
So it means that our code has to be really stable.

33
00:01:53,876 --> 00:01:56,217
Otherwise, the level designers, the artists,

34
00:01:56,277 --> 00:01:58,319
the audio people can't do any work.

35
00:02:00,760 --> 00:02:03,502
So Media Molecule, we've got about 50 employees.

36
00:02:04,415 --> 00:02:06,456
And in the tools department, there's me.

37
00:02:06,657 --> 00:02:07,577
I do two days a week.

38
00:02:08,318 --> 00:02:09,178
There's Daniel Kidney.

39
00:02:09,299 --> 00:02:10,279
He's five days a week.

40
00:02:10,720 --> 00:02:12,401
And we've recently gained Alex Parker,

41
00:02:13,462 --> 00:02:14,663
who also works full time.

42
00:02:14,963 --> 00:02:17,525
So we've been 1.4 programmers,

43
00:02:17,565 --> 00:02:19,226
and we're now up to 2.4 programmers.

44
00:02:22,869 --> 00:02:24,970
So we really want to get lots of bang for our buck

45
00:02:25,110 --> 00:02:26,111
in terms of these tools.

46
00:02:26,872 --> 00:02:29,894
And also, because Media Molecule is a very flat hierarchy,

47
00:02:30,495 --> 00:02:33,036
it means that any tool that we make

48
00:02:33,742 --> 00:02:37,243
has to improve people's lives significantly.

49
00:02:37,643 --> 00:02:39,143
Otherwise, they're not going to bother to use it.

50
00:02:39,603 --> 00:02:41,324
So the tools I'm talking about today

51
00:02:41,344 --> 00:02:43,845
are in regular use in our studio.

52
00:02:43,965 --> 00:02:46,025
So they've proved that they are useful.

53
00:02:46,045 --> 00:02:50,367
So I'm going to show you a video of Dreams.

54
00:02:51,427 --> 00:02:54,748
This is our trailer video to give you a better

55
00:02:54,828 --> 00:02:55,829
idea of what we're making.

56
00:03:03,388 --> 00:03:08,090
Am I dreaming or am I awake?

57
00:03:08,130 --> 00:03:14,873
Francis, you'd think the phony's around here.

58
00:03:14,933 --> 00:03:20,835
The old fears, they still haunt me.

59
00:03:21,076 --> 00:03:23,276
Hold on lads, we're coming!

60
00:03:23,960 --> 00:03:26,862
That I'm on a train to nowhere.

61
00:03:27,142 --> 00:03:31,465
You are the driver, sir.

62
00:03:31,505 --> 00:03:34,287
When I awake...

63
00:03:35,148 --> 00:03:37,310
Will I face the worst parts of myself?

64
00:03:37,410 --> 00:03:41,833
I need to listen to that quiet voice...

65
00:03:42,553 --> 00:03:46,276
Calling me.

66
00:03:46,496 --> 00:03:47,817
That need...

67
00:03:47,877 --> 00:03:50,599
To make something again.

68
00:03:50,639 --> 00:03:52,161
We'll make it.

69
00:03:52,241 --> 00:03:52,381
Me.

70
00:03:53,288 --> 00:03:53,469
and you.

71
00:04:58,506 --> 00:05:00,387
Sorry, my poor laptop was really struggling

72
00:05:00,427 --> 00:05:01,088
to play that video.

73
00:05:02,669 --> 00:05:06,011
Right, so what I'm gonna do is give you a quick,

74
00:05:10,034 --> 00:05:11,795
quick go-round the life cycle of a bug,

75
00:05:12,496 --> 00:05:14,257
telling you a little bit about the tools that we've got,

76
00:05:14,377 --> 00:05:17,359
and then after that, so you'll know kind of where they fit,

77
00:05:17,900 --> 00:05:20,001
and then after that, I'll go into a bit more detail.

78
00:05:20,342 --> 00:05:22,463
So if anything doesn't make any sense, then don't worry.

79
00:05:22,583 --> 00:05:25,585
It will probably be explained in more detail later,

80
00:05:25,705 --> 00:05:27,226
and if not, there's questions at the end.

81
00:05:28,712 --> 00:05:32,314
Oh, and also, you will be emailed an evaluation form.

82
00:05:32,474 --> 00:05:33,234
Please fill it in.

83
00:05:34,114 --> 00:05:35,375
I was supposed to say that at the beginning.

84
00:05:36,375 --> 00:05:38,517
So we start off, a bug gets written,

85
00:05:38,997 --> 00:05:40,598
and it gets checked in.

86
00:05:41,338 --> 00:05:44,019
So now it's gone orange

87
00:05:44,219 --> 00:05:46,941
because it's now starting to affect programmers.

88
00:05:47,081 --> 00:05:48,842
It's not got as far as the artists,

89
00:05:48,942 --> 00:05:51,083
the designers, and the audio people,

90
00:05:51,683 --> 00:05:53,964
but it will be stopping programmers from working.

91
00:05:54,704 --> 00:05:57,746
So our first line of defense is Autobot.

92
00:05:58,243 --> 00:06:00,265
which is our automated testing system.

93
00:06:01,126 --> 00:06:03,668
And I'll tell you a bit more about how that works

94
00:06:04,388 --> 00:06:09,332
and what we've done to make the flow of bugs smooth

95
00:06:09,472 --> 00:06:12,294
and to help QA to put all the information

96
00:06:12,454 --> 00:06:14,016
into the bugs from Autobot.

97
00:06:15,237 --> 00:06:17,258
Then I'm gonna talk about our next line of defense,

98
00:06:17,298 --> 00:06:18,079
which is QA.

99
00:06:18,379 --> 00:06:19,520
So when they find a bug,

100
00:06:19,900 --> 00:06:22,762
what have we done to help them to report that bug,

101
00:06:23,163 --> 00:06:25,484
make sure all the information is accurate

102
00:06:25,925 --> 00:06:26,025
and

103
00:06:27,100 --> 00:06:30,901
to attach information without having to faff around

104
00:06:30,941 --> 00:06:34,882
like copying screenshots from one folder to another.

105
00:06:35,162 --> 00:06:37,123
We try and make everything one button click,

106
00:06:37,143 --> 00:06:38,263
so it's really simple.

107
00:06:38,543 --> 00:06:41,284
You don't get any mistakes, and you don't waste time,

108
00:06:42,344 --> 00:06:45,345
which then frees QA up to kind of break our game

109
00:06:45,385 --> 00:06:49,366
in new and inventive ways rather than just kind of

110
00:06:49,726 --> 00:06:51,227
going through the boilerplate stuff.

111
00:06:53,427 --> 00:06:55,408
So if a bug gets past Autobot...

112
00:06:55,787 --> 00:07:03,071
gets past QA, and then it gets into the build that gets deployed and starts to stop our

113
00:07:03,131 --> 00:07:08,595
level designers from working. So that's where it gets to that red state, and I'm going to

114
00:07:08,635 --> 00:07:15,459
tell you about the report a bug button that we've added to a Chrome extension so that

115
00:07:15,699 --> 00:07:20,702
level designers can very easily report a bug and we can make sure that the information

116
00:07:20,762 --> 00:07:21,982
they report is accurate.

117
00:07:25,180 --> 00:07:27,381
When the bug gets assigned out by production,

118
00:07:28,041 --> 00:07:31,362
we've already attached all sorts of information to it

119
00:07:31,782 --> 00:07:34,683
to make production's life easier and to make sure

120
00:07:34,703 --> 00:07:37,284
that the bug goes to the right person straight away

121
00:07:37,624 --> 00:07:39,984
so we don't have bugs kind of bouncing around and not

122
00:07:40,024 --> 00:07:42,865
being fixed because they haven't reached the right person.

123
00:07:43,605 --> 00:07:46,486
So for example, in a bug, we'll have the assert message.

124
00:07:46,506 --> 00:07:48,527
We'll have the programmer who added the assert.

125
00:07:48,927 --> 00:07:50,127
We'll have the call stack.

126
00:07:51,072 --> 00:07:53,953
We'll have a link to ReCap, which will have a core dump.

127
00:07:53,993 --> 00:07:55,134
It'll have the TTY.

128
00:07:55,534 --> 00:07:57,615
It'll have a video of the last 60 seconds

129
00:07:57,675 --> 00:07:58,875
before the game crashed.

130
00:08:00,616 --> 00:08:02,877
It'll have the Perforce revision of the build

131
00:08:03,297 --> 00:08:06,218
that the bug was seen on, so you know which

132
00:08:06,318 --> 00:08:08,038
build it should repro on.

133
00:08:09,279 --> 00:08:11,380
So if we can get as much information in there

134
00:08:11,420 --> 00:08:15,041
as possible, it means that production's job is easier

135
00:08:15,301 --> 00:08:16,362
when farming the bugs out.

136
00:08:17,982 --> 00:08:24,427
Then when the bug gets assigned out to a programmer or a level designer, I'll talk about the tools

137
00:08:24,627 --> 00:08:30,171
that we've written to help them to repro the bug, including my favorite button in Jira,

138
00:08:30,452 --> 00:08:36,436
which is in one button press, it will replay the replay on your dev kit, and it will repro

139
00:08:36,456 --> 00:08:42,061
the bug for you, so you don't have to follow through like step-by-step instructions or

140
00:08:42,121 --> 00:08:42,381
anything.

141
00:08:42,401 --> 00:08:44,603
It's just one button press, and it repros on your dev kit.

142
00:08:46,743 --> 00:08:52,885
Then when you've fixed the bug, we've got some more tools to help you to check that

143
00:08:52,905 --> 00:08:59,487
you've fixed it, check that you haven't broken anything else whilst doing the fix.

144
00:09:00,028 --> 00:09:05,530
Then once you've checked in your fix, more tools for QA to verify the fix, and of course

145
00:09:05,570 --> 00:09:09,971
it goes back through our automated testing system to check that nothing else got broken

146
00:09:10,011 --> 00:09:11,532
on the way.

147
00:09:12,212 --> 00:09:13,232
And then job done.

148
00:09:13,412 --> 00:09:14,533
You've deployed a new build.

149
00:09:15,451 --> 00:09:18,473
Everyone can now work again and create cool stuff.

150
00:09:19,614 --> 00:09:26,439
So starting off with Autobot, which is our automated testing

151
00:09:26,500 --> 00:09:29,242
system, it runs after every check-in.

152
00:09:30,222 --> 00:09:31,483
So you check your code in.

153
00:09:31,584 --> 00:09:34,826
Jenkins notices that there's new code, does a build.

154
00:09:35,387 --> 00:09:37,588
Autobot notices that there's a new build

155
00:09:38,069 --> 00:09:41,491
and runs a suite of tests on that build.

156
00:09:42,075 --> 00:09:45,397
and it checks for asserts, crashes, hangs,

157
00:09:45,957 --> 00:09:49,599
it checks for out of syncs, not a numbers,

158
00:09:50,239 --> 00:09:51,340
and some logic errors.

159
00:09:52,120 --> 00:09:55,862
So it runs each test twice to check for out of syncs.

160
00:09:55,902 --> 00:09:58,943
The first time round, it dumps out a bunch of sync points.

161
00:09:59,363 --> 00:10:01,464
Second time round, it compares with the sync points.

162
00:10:01,544 --> 00:10:06,527
So you know immediately if your deterministic game code

163
00:10:06,727 --> 00:10:08,608
is not actually deterministic anymore.

164
00:10:11,195 --> 00:10:14,696
So it takes about between 10 and 20 minutes

165
00:10:15,197 --> 00:10:16,797
to run our smoke test.

166
00:10:17,177 --> 00:10:18,978
We found that keeping it under 20 minutes

167
00:10:19,338 --> 00:10:22,579
is the sweet spot between making sure

168
00:10:22,659 --> 00:10:26,240
that you get enough coverage, but also making sure

169
00:10:26,760 --> 00:10:30,501
that you're not rolling too many revisions into each test

170
00:10:30,921 --> 00:10:34,082
so you can easily tell which check-in it was

171
00:10:34,142 --> 00:10:36,843
that broke something, and also making sure

172
00:10:36,883 --> 00:10:38,903
that programmers get immediate feedback

173
00:10:39,504 --> 00:10:40,784
on the stuff that they've checked in.

174
00:10:41,694 --> 00:10:45,355
because you want your head still to be in the same space

175
00:10:45,555 --> 00:10:47,496
of the code that you've just checked in

176
00:10:48,236 --> 00:10:49,656
when you go back to fix something

177
00:10:49,756 --> 00:10:51,097
if there are issues with it.

178
00:10:53,058 --> 00:10:54,578
So once it runs the test, oh yes,

179
00:10:54,618 --> 00:10:56,859
and it also runs some more in-depth tests overnight

180
00:10:57,099 --> 00:10:58,980
because we're not checking in as much overnight.

181
00:10:59,640 --> 00:11:01,481
We've got some larger suites that test

182
00:11:01,561 --> 00:11:02,981
like sculpting in depth.

183
00:11:03,801 --> 00:11:06,602
We've got some more detailed out-of-sync tests.

184
00:11:07,022 --> 00:11:08,923
So if something is flagged as being out of sync

185
00:11:08,963 --> 00:11:09,683
in the smoke test,

186
00:11:10,040 --> 00:11:14,482
It gets added to the out-of-sync test, which then dumps out a lot more information about

187
00:11:14,562 --> 00:11:16,043
what it was that went out of sync.

188
00:11:17,124 --> 00:11:21,286
And because it's less busy overnight, we can just, it doesn't matter about the whole 20-minute

189
00:11:21,866 --> 00:11:24,027
limit, we can just add in loads of tests.

190
00:11:25,988 --> 00:11:31,931
Results are emailed out, so the email goes to QA, it goes to the tools team, and it goes

191
00:11:31,972 --> 00:11:35,673
to anyone who checked something in that was included in that build.

192
00:11:36,774 --> 00:11:37,735
So you get to check.

193
00:11:39,753 --> 00:11:42,876
whether you've broken something or whether your code has all passed.

194
00:11:46,039 --> 00:11:49,141
So here is the top of the email.

195
00:11:49,822 --> 00:11:55,207
You can see from the subject line that I summarise what the differences were

196
00:11:55,627 --> 00:11:57,969
because programmers are not going to read all their emails.

197
00:11:58,169 --> 00:11:59,931
They're not even going to open all their emails.

198
00:12:00,331 --> 00:12:01,672
So if you've broken something,

199
00:12:01,812 --> 00:12:04,695
you need it to be really obvious from the subject line.

200
00:12:05,355 --> 00:12:08,358
So you get that assert plus one, there's an extra assert.

201
00:12:08,745 --> 00:12:09,966
And then when you open the email,

202
00:12:09,986 --> 00:12:13,048
there's a more wordy description of what it was you broke.

203
00:12:13,408 --> 00:12:16,071
So in this case, there's a new assert message,

204
00:12:16,131 --> 00:12:18,453
but it broke 88 tests,

205
00:12:18,513 --> 00:12:20,214
which is like nearly half of the tests.

206
00:12:20,534 --> 00:12:22,736
So you've clearly broken something really quite important

207
00:12:23,116 --> 00:12:23,837
and need to fix it.

208
00:12:24,658 --> 00:12:27,200
And then there's a link to the assert messages section

209
00:12:27,620 --> 00:12:31,063
where you can scroll down and get more information.

210
00:12:31,083 --> 00:12:33,845
So I'm just gonna kind of nip through this.

211
00:12:33,905 --> 00:12:37,248
You probably can't see it, but I'll describe it to you.

212
00:12:38,511 --> 00:12:45,532
So firstly, you've got a new picture, so you can easily see what the new thing was, i.e.

213
00:12:45,672 --> 00:12:46,673
this is something you broke.

214
00:12:47,393 --> 00:12:51,934
You get the call stack, you get the assert message, you get the programmer who added

215
00:12:51,974 --> 00:12:52,614
the assert.

216
00:12:53,854 --> 00:12:59,035
You get a list at the bottom of all of the replays that failed this test.

217
00:12:59,935 --> 00:13:06,577
And included there is the command line that you would use in Visual Studio to repro exactly

218
00:13:06,657 --> 00:13:07,877
what Autobot ran.

219
00:13:09,481 --> 00:13:11,762
to make it easy to repro and fix.

220
00:13:12,262 --> 00:13:15,624
And you also get a summary of the last five results.

221
00:13:16,424 --> 00:13:21,286
So you can see color coded when it broke.

222
00:13:21,887 --> 00:13:24,488
And you can also see a list of the changes that

223
00:13:24,528 --> 00:13:27,690
went in to that build, who checked them in.

224
00:13:28,130 --> 00:13:30,051
And if you click on the link, it takes you

225
00:13:30,091 --> 00:13:34,513
to a swarm page, which tells you what files got checked in.

226
00:13:34,653 --> 00:13:36,414
And it shows you the diffs of those files.

227
00:13:37,715 --> 00:13:38,795
So in this case.

228
00:13:39,322 --> 00:13:41,843
It's run out of GPU-long memory,

229
00:13:41,863 --> 00:13:44,943
and you would have a look through those three revisions

230
00:13:45,244 --> 00:13:47,764
that got checked in and see who was using more

231
00:13:47,784 --> 00:13:50,505
of that memory, and then go and nag them to fix it.

232
00:13:53,685 --> 00:13:59,207
By the new button, occasionally there's also a JIRA button,

233
00:13:59,227 --> 00:14:01,907
because I look up in JIRA to see

234
00:14:02,107 --> 00:14:03,528
if there's an existing bug for this,

235
00:14:04,448 --> 00:14:06,208
and it looks up based on a cert message

236
00:14:06,328 --> 00:14:07,688
and based on call stack.

237
00:14:08,223 --> 00:14:11,024
but with the line numbers stripped out because they tend to change.

238
00:14:12,364 --> 00:14:13,424
And that's a clickable link.

239
00:14:13,604 --> 00:14:16,365
So if there's a Jira bug, then you can click on it,

240
00:14:16,405 --> 00:14:18,786
go to the bug in Jira, read a bit more information,

241
00:14:19,086 --> 00:14:20,306
fix it, mark it fixed.

242
00:14:25,788 --> 00:14:27,028
So that's the email.

243
00:14:28,709 --> 00:14:32,230
The results are also viewable via a web UI.

244
00:14:32,570 --> 00:14:35,391
So the email is more useful for programmers.

245
00:14:36,050 --> 00:14:38,511
the web UI is more designed for QA to use.

246
00:14:39,352 --> 00:14:42,514
And they can filter the results, they can sort the results,

247
00:14:42,554 --> 00:14:45,235
they can see kind of what it was that failed

248
00:14:45,696 --> 00:14:46,456
about the results.

249
00:14:47,617 --> 00:14:50,559
But we've added some interesting buttons to the web UI.

250
00:14:51,639 --> 00:14:54,201
So there's the Jira button that you can see there,

251
00:14:54,221 --> 00:14:55,262
the orange and blue one.

252
00:14:57,203 --> 00:15:00,685
And that, as with the email, it goes off to Jira,

253
00:15:01,085 --> 00:15:02,846
looks to see if there exists a bug.

254
00:15:03,567 --> 00:15:04,207
If there does,

255
00:15:04,858 --> 00:15:06,759
and the bug is assigned out to a programmer,

256
00:15:06,899 --> 00:15:08,079
so it's in the right state,

257
00:15:08,119 --> 00:15:10,499
it's gonna get fixed hopefully soon,

258
00:15:10,960 --> 00:15:12,740
QA don't need to do anything about it,

259
00:15:13,320 --> 00:15:15,000
then that JIRA button is blue.

260
00:15:16,160 --> 00:15:18,841
If the JIRA button is orange, like in this one,

261
00:15:19,921 --> 00:15:22,341
that means that the bug is not in the right state,

262
00:15:22,541 --> 00:15:25,082
so either someone's marked it as fixed and it's not fixed,

263
00:15:25,422 --> 00:15:27,242
or it hasn't been assigned out to a programmer,

264
00:15:27,822 --> 00:15:30,443
so QA need to click on that button, go to JIRA,

265
00:15:31,063 --> 00:15:33,643
and make sure that the bug ends up in the right state.

266
00:15:34,040 --> 00:15:35,101
so that it can then be fixed.

267
00:15:37,362 --> 00:15:40,684
If there is no bug in Jira for the issue,

268
00:15:41,164 --> 00:15:42,885
then you get the red bug button.

269
00:15:43,826 --> 00:15:47,688
And that brings up the Jira create issue screen,

270
00:15:48,569 --> 00:15:50,930
and it pre-fills a whole load of information.

271
00:15:51,110 --> 00:15:54,432
Basically, all the information that we've got out of AutoBot,

272
00:15:54,452 --> 00:15:57,694
we try and pre-fill it into the bug to save QA time

273
00:15:57,734 --> 00:15:59,895
and to save them copying and pasting stuff around.

274
00:16:00,395 --> 00:16:01,716
So it will attach the replay.

275
00:16:02,361 --> 00:16:04,842
It will mark which revision it was seen in.

276
00:16:04,862 --> 00:16:07,504
It will put in the assert message.

277
00:16:07,844 --> 00:16:11,146
It will insert the programmer who added the assert,

278
00:16:11,506 --> 00:16:13,907
because in Perforce, you can go and look up

279
00:16:14,268 --> 00:16:16,329
who added a particular line of code.

280
00:16:17,449 --> 00:16:20,191
So that gives production a good idea

281
00:16:20,231 --> 00:16:23,873
of who to start with when they're assigning it out.

282
00:16:25,254 --> 00:16:27,655
It will also do a link to Recap.

283
00:16:28,035 --> 00:16:30,157
So Recap is a Sony server.

284
00:16:30,617 --> 00:16:34,439
where you can upload core dumps, and you can upload your symbols,

285
00:16:35,239 --> 00:16:39,761
and it will give you a web interface for browsing those core dumps,

286
00:16:39,801 --> 00:16:42,383
and you can see the call stack, and you can see the TTY,

287
00:16:42,863 --> 00:16:45,264
and you can upload the last 60 seconds of video.

288
00:16:46,244 --> 00:16:50,386
So we upload all of our crashes and asserts to recap,

289
00:16:51,327 --> 00:16:54,268
and then we put a link in the bug to recap

290
00:16:54,488 --> 00:16:56,269
so that programmers can click on it,

291
00:16:57,069 --> 00:16:59,090
can see very easily the call stack,

292
00:16:59,791 --> 00:16:59,871
and

293
00:17:00,807 --> 00:17:10,912
can easily see what went wrong. There is also the launch button, and the launch button takes

294
00:17:11,012 --> 00:17:18,096
the replay and launches it on your dev kit, on your test kit, on whatever build you're

295
00:17:18,116 --> 00:17:23,859
running, so it doesn't have to be like a build running from Visual Studio. You could be running

296
00:17:23,899 --> 00:17:26,801
a package build, and this will still launch that replay.

297
00:17:28,373 --> 00:17:32,575
on your build. So you can have a look at the replay and check that it's doing what you

298
00:17:32,635 --> 00:17:40,139
think it's doing. So one of our early problems with the automated testing system was that

299
00:17:40,760 --> 00:17:47,723
we were replaying a replay. And, by the way, a replay is an initial state plus a bunch

300
00:17:47,743 --> 00:17:53,327
of inputs, which can then be rerun, and you get the same thing.

301
00:17:55,552 --> 00:17:57,113
and inputs would be controller inputs,

302
00:17:57,153 --> 00:17:58,814
it would be like any text that you've input,

303
00:17:58,914 --> 00:18:00,314
any inputs into the system.

304
00:18:01,295 --> 00:18:04,096
So you would, if you were replaying a replay,

305
00:18:04,116 --> 00:18:07,157
you would expect to get the same end state as well.

306
00:18:08,758 --> 00:18:10,838
But say for example, you had a replay

307
00:18:10,878 --> 00:18:13,199
where you were stamping down like five cubes,

308
00:18:14,000 --> 00:18:16,261
and you were stamping them down using the trigger button,

309
00:18:16,481 --> 00:18:18,061
because that was the button at the time.

310
00:18:18,862 --> 00:18:21,043
Then you've recorded your replay,

311
00:18:21,163 --> 00:18:23,223
Autobot is running it, everything's happy.

312
00:18:23,738 --> 00:18:25,780
Then a bit later, someone changes the button mappings.

313
00:18:26,160 --> 00:18:28,442
So now stamp is not on the trigger anymore, it's on X.

314
00:18:29,663 --> 00:18:32,265
And your replay is still running, it's not asserting,

315
00:18:32,325 --> 00:18:35,147
it's not crashing, Autobot thinks that everything is good,

316
00:18:35,528 --> 00:18:36,709
but actually it's not testing

317
00:18:36,749 --> 00:18:38,030
what you thought it was testing.

318
00:18:38,370 --> 00:18:39,911
It's not stamping down the cubes anymore.

319
00:18:41,312 --> 00:18:44,555
So our first attempt at trying to detect this

320
00:18:45,436 --> 00:18:48,979
was dumping out the game state as JSON at the end.

321
00:18:50,800 --> 00:18:51,761
And then we would do a diff.

322
00:18:52,130 --> 00:18:55,832
So we'd have a control run where someone had watched the replay

323
00:18:55,872 --> 00:18:57,473
and said, yes, it's doing the right thing,

324
00:18:57,853 --> 00:19:00,235
and we would store the JSON game state after that.

325
00:19:00,995 --> 00:19:04,277
And then for every subsequent run on later builds,

326
00:19:04,838 --> 00:19:07,459
we would diff the JSON game state.

327
00:19:08,140 --> 00:19:10,882
And so you would be able to see if it had changed.

328
00:19:11,582 --> 00:19:13,183
But it turns out that's quite brittle

329
00:19:13,523 --> 00:19:15,785
because people add things into the game state,

330
00:19:15,825 --> 00:19:19,187
they take them out, things move around.

331
00:19:19,207 --> 00:19:19,267
And...

332
00:19:21,682 --> 00:19:25,764
A diff of a JSON game state is not very useful to a QA person

333
00:19:26,024 --> 00:19:28,106
to know whether a replay is doing the right thing.

334
00:19:29,106 --> 00:19:31,607
So our next attempt was screenshots.

335
00:19:32,548 --> 00:19:34,869
And you can see up on screen, you

336
00:19:34,889 --> 00:19:37,951
get a screenshot from the end of the control run.

337
00:19:38,691 --> 00:19:41,032
And then you get a screenshot from the end of this run

338
00:19:41,252 --> 00:19:41,893
that's just run.

339
00:19:42,953 --> 00:19:45,795
And a human can very easily look at those two screenshots

340
00:19:46,175 --> 00:19:48,716
and see, yes, it did do the same thing.

341
00:19:49,056 --> 00:19:50,677
It's put down the same gadgets.

342
00:19:51,900 --> 00:19:53,241
Everything's in the same place.

343
00:19:54,141 --> 00:19:57,042
So this replay has completed successfully.

344
00:19:58,083 --> 00:20:02,444
And we don't do like a binary compare of those screenshots because they are actually different.

345
00:20:03,145 --> 00:20:05,065
Our sky rendering is not deterministic.

346
00:20:05,886 --> 00:20:08,907
The UI for the palette has changed.

347
00:20:09,347 --> 00:20:11,108
The thermometer has changed slightly.

348
00:20:12,128 --> 00:20:15,329
But to a human eye, you can see that it's done the right thing.

349
00:20:16,049 --> 00:20:18,550
And so it means that QA can just scroll through the results.

350
00:20:19,242 --> 00:20:22,024
and check by eye that it's doing the right thing,

351
00:20:22,744 --> 00:20:24,105
which saves a huge amount of time

352
00:20:24,305 --> 00:20:25,826
because we did have one poor guy,

353
00:20:26,146 --> 00:20:28,728
poor Geddon used to have to press the launch button

354
00:20:28,828 --> 00:20:31,029
and watch the replays on a regular basis

355
00:20:31,830 --> 00:20:33,291
to check that they were doing the right thing.

356
00:20:34,151 --> 00:20:36,553
So then that frees him up to, again,

357
00:20:36,773 --> 00:20:38,814
do more creative breaking of our game

358
00:20:39,115 --> 00:20:40,956
rather than the kind of boilerplate stuff.

359
00:20:43,818 --> 00:20:45,739
We recently added some performance stuff.

360
00:20:46,738 --> 00:20:51,300
So Alex Parker, who joined us recently, has added in some performance tracking, but it's

361
00:20:51,340 --> 00:20:55,941
very much kind of work in progress. We're hoping that we'll be able to pick up when

362
00:20:56,081 --> 00:21:02,543
we have spikes in the frame rate, for example, and be able to see exactly which revision

363
00:21:02,883 --> 00:21:13,667
those came in at. So how does it all fit together from a tech perspective? We have a MySQL database,

364
00:21:14,267 --> 00:21:15,608
which we use to store...

365
00:21:17,308 --> 00:21:23,590
which tests we have and which tests run as part of which suite, so what replays get run

366
00:21:23,751 --> 00:21:28,812
if you run a smoke test, what replays get run if you run a more in-depth sculpt, that

367
00:21:28,832 --> 00:21:34,394
kind of thing, so that's in the database, and we also store the results of each run

368
00:21:34,895 --> 00:21:40,396
in the database. We use a Django web UI on top of that, which then means that QA can

369
00:21:40,697 --> 00:21:43,858
add in new replays. They can browse the results.

370
00:21:45,054 --> 00:21:47,956
And it means they don't have to do database queries.

371
00:21:48,496 --> 00:21:52,699
It puts it all into a nice clickable web UI for QA.

372
00:21:53,780 --> 00:21:56,501
So it means that QA have complete control,

373
00:21:56,541 --> 00:21:59,564
and I don't have to do anything to maintain it,

374
00:21:59,644 --> 00:22:00,524
which is excellent.

375
00:22:02,425 --> 00:22:07,029
So to run the actual tests, we have some Python scripts.

376
00:22:07,309 --> 00:22:10,151
So Django uses Python, so we wrote the rest in Python

377
00:22:10,191 --> 00:22:11,251
so that we could share code.

378
00:22:13,284 --> 00:22:17,887
We've got a script that watches for new builds and puts in test requests.

379
00:22:18,328 --> 00:22:25,973
We've got another script that grabs the test request, sends each replay off to a dev kit

380
00:22:27,514 --> 00:22:31,977
with the relevant ELF. It gets back the results. It parses the TTY.

381
00:22:33,098 --> 00:22:37,721
It puts the results into the database. And then we have a third script.

382
00:22:38,229 --> 00:22:40,530
that cleans up after everything else.

383
00:22:41,010 --> 00:22:43,272
So this system generates a huge amount of data,

384
00:22:44,472 --> 00:22:46,053
and we don't want to make IT cry,

385
00:22:46,434 --> 00:22:50,756
so we have to delete the results after a day or two.

386
00:22:52,197 --> 00:22:57,641
We delete the screenshots from the runs after a few days.

387
00:22:58,081 --> 00:23:00,723
We have to kind of go in there and clean things up.

388
00:23:03,024 --> 00:23:04,845
Now, all of this used to be on one box.

389
00:23:06,516 --> 00:23:08,957
And that was when we had sort of five, six dev kits

390
00:23:09,817 --> 00:23:10,798
in the wall of dev kits.

391
00:23:11,378 --> 00:23:13,459
And it was all kind of ticking along okay

392
00:23:13,559 --> 00:23:16,340
until we got up to like nine, 10, 11 dev kits.

393
00:23:17,601 --> 00:23:18,761
And then it all went horribly wrong

394
00:23:19,381 --> 00:23:23,643
because we were using Orbis Control to launch our tests,

395
00:23:23,743 --> 00:23:26,465
which is a tool from Sony that takes your test

396
00:23:26,525 --> 00:23:28,065
and launches it on a dev kit.

397
00:23:29,626 --> 00:23:31,447
And that was using 5% of CPU

398
00:23:31,807 --> 00:23:33,408
for each test that it was running.

399
00:23:33,842 --> 00:23:35,903
So when you've got like nine, 10 dev kits,

400
00:23:35,943 --> 00:23:37,603
that's 50% of your CPU gone.

401
00:23:38,104 --> 00:23:40,164
Network Neighborhood took another 30%.

402
00:23:41,465 --> 00:23:42,905
So basically the tests were running

403
00:23:43,425 --> 00:23:44,786
and we were getting the results back

404
00:23:44,866 --> 00:23:46,266
and then we went to put them in the database

405
00:23:46,546 --> 00:23:49,267
and we didn't have enough CPU to do the database insert.

406
00:23:50,147 --> 00:23:51,748
So we split it up into two boxes.

407
00:23:52,168 --> 00:23:55,649
We have Perceptor, which does the database and the web UI,

408
00:23:55,909 --> 00:23:58,850
and then we've got Optimus Prime that runs the scripts

409
00:23:59,631 --> 00:24:01,971
and launches them on the dev kits.

410
00:24:04,394 --> 00:24:10,036
and gets the results. And that works quite nicely. And we've now got a wall of 27 DevKits,

411
00:24:10,637 --> 00:24:16,519
so it's toasty warm in that area of the office. I was going to put a photo in, but apparently

412
00:24:16,539 --> 00:24:29,404
I'm not allowed. So we were using Orbis Control to launch our tests, and that was fine until

413
00:24:29,444 --> 00:24:31,685
we came across a really bad hang.

414
00:24:34,109 --> 00:24:37,951
By a hang, I mean when the game is still running,

415
00:24:38,292 --> 00:24:40,433
it's just stuck in, for example, a while one loop

416
00:24:40,493 --> 00:24:41,113
on the main thread.

417
00:24:41,133 --> 00:24:43,875
So it's running, it's not crashed, it's not asserted,

418
00:24:44,115 --> 00:24:45,296
but it's not actually getting anywhere.

419
00:24:46,216 --> 00:24:49,158
So we were launching these tests, they were hanging,

420
00:24:49,578 --> 00:24:51,840
so that was then using up at DevKit.

421
00:24:52,560 --> 00:24:54,761
We didn't have a timeout,

422
00:24:55,022 --> 00:24:57,903
because there's no timeout functionality in Orbis Control,

423
00:24:58,204 --> 00:25:00,185
and we had only written an overall timeout.

424
00:25:02,307 --> 00:25:08,232
you could hang all of the dev kits, and eventually the overall timeout would timeout, but then

425
00:25:08,292 --> 00:25:14,757
most of your tests hadn't run, and you didn't get very useful results. So we replaced Orbis

426
00:25:14,797 --> 00:25:21,563
Control with our own PS4 launcher. There's a target manager API that we used from Sony,

427
00:25:21,963 --> 00:25:27,688
which you can use to launch builds on your dev kit. I wrote some timeout functionality

428
00:25:27,748 --> 00:25:28,408
in the launcher.

429
00:25:30,097 --> 00:25:32,138
And this also meant that we could upload our core dumps

430
00:25:32,198 --> 00:25:35,778
to recap, which gives us a lot more information about crashes

431
00:25:36,699 --> 00:25:37,319
and hangs.

432
00:25:37,659 --> 00:25:41,000
Because when a PS4 launcher detected a hang,

433
00:25:41,540 --> 00:25:44,520
it would send a signal to the dev kit saying core dump.

434
00:25:45,020 --> 00:25:47,301
And then once you had the core dump,

435
00:25:47,881 --> 00:25:49,541
you could see where it had hung.

436
00:25:49,561 --> 00:25:53,542
So you had a call stack for where your while one loop was

437
00:25:53,622 --> 00:25:55,763
that someone had put in your main thread.

438
00:25:57,523 --> 00:25:59,023
And we got some bonus features as well.

439
00:25:59,490 --> 00:26:01,132
in that you can change the language,

440
00:26:02,012 --> 00:26:05,174
you can change a pro dev kit to behave like a pro

441
00:26:05,235 --> 00:26:07,016
or behave like a normal PS4.

442
00:26:07,076 --> 00:26:09,297
So that's kind of nice too.

443
00:26:12,160 --> 00:26:13,681
A little bit more about the replay system,

444
00:26:13,881 --> 00:26:15,802
which I kind of touched upon earlier.

445
00:26:16,263 --> 00:26:18,004
So our game update is deterministic,

446
00:26:18,344 --> 00:26:20,586
which means that if you have an initial game state

447
00:26:20,986 --> 00:26:24,068
and a bunch of inputs, you can rerun them

448
00:26:24,609 --> 00:26:25,609
and you'll get the same result.

449
00:26:27,918 --> 00:26:29,580
There's a couple of drawbacks we've had.

450
00:26:30,400 --> 00:26:31,801
The first is serialized revision.

451
00:26:32,462 --> 00:26:33,663
If you've got one of these replays,

452
00:26:34,263 --> 00:26:37,245
you want to be able to run it on later builds as well.

453
00:26:37,706 --> 00:26:39,747
You don't want to just be able to test a single build,

454
00:26:40,408 --> 00:26:43,990
which means that when you serialize in your game state,

455
00:26:44,090 --> 00:26:46,652
you need to know what you're going to expect to be reading.

456
00:26:47,453 --> 00:26:48,914
So if I've added variables,

457
00:26:48,954 --> 00:26:50,895
I need to bump serialized revision

458
00:26:51,335 --> 00:26:54,578
so that then I will know whether I'm supposed to be reading

459
00:26:54,638 --> 00:26:55,879
in that new variable or not.

460
00:26:57,692 --> 00:27:01,293
But having this one kind of central serialized revision,

461
00:27:01,973 --> 00:27:04,233
firstly, it's a point of contention for programmers

462
00:27:04,413 --> 00:27:07,014
because anyone who's adding or removing stuff

463
00:27:07,034 --> 00:27:09,234
from the game state needs to bump it.

464
00:27:10,294 --> 00:27:12,315
And also, if you branch your code,

465
00:27:12,675 --> 00:27:13,455
it's a bit of a nightmare

466
00:27:14,155 --> 00:27:17,576
because it doesn't deal with being in a branch.

467
00:27:17,616 --> 00:27:20,936
You can't increment serialized revision in the branch

468
00:27:21,416 --> 00:27:24,717
if you're also gonna be incrementing it on trunk

469
00:27:25,017 --> 00:27:25,837
because then you've got to

470
00:27:26,484 --> 00:27:33,407
revisions that mean different things. So what we do is when we branch to do a green build,

471
00:27:33,667 --> 00:27:37,629
we have a very short-lived branch, and if anyone needs to do a fix in the branch that

472
00:27:37,669 --> 00:27:41,931
bumps serialised revision, we pull a whole new branch, which is not ideal, but it kind

473
00:27:41,951 --> 00:27:49,075
of works for us. And the replay system is very important for us for reproing bugs.

474
00:27:52,396 --> 00:27:55,398
So, that's Autobot. On to QA.

475
00:27:56,299 --> 00:27:59,880
So for QA, I've written a Chrome extension.

476
00:28:00,961 --> 00:28:03,101
And if you've not come across a Chrome extension,

477
00:28:03,602 --> 00:28:06,002
it runs in the Chrome browser, and you install it

478
00:28:06,042 --> 00:28:07,203
into your Chrome browser.

479
00:28:07,223 --> 00:28:11,344
It's written in JavaScript, and it can access REST APIs.

480
00:28:11,804 --> 00:28:14,465
So it can query Jira, it can query Recap,

481
00:28:15,206 --> 00:28:17,126
it can query our game server.

482
00:28:18,547 --> 00:28:23,588
It gets information about what tabs you've got open in Chrome.

483
00:28:24,126 --> 00:28:26,748
and you can change the HTML within those tabs.

484
00:28:27,288 --> 00:28:31,411
So if I detect a Jira tab, I can add extra buttons

485
00:28:32,472 --> 00:28:33,412
into the Jira tab.

486
00:28:34,973 --> 00:28:37,655
And I did look at doing it as a Jira extension,

487
00:28:38,076 --> 00:28:39,597
but I backed quickly away from that

488
00:28:39,757 --> 00:28:42,158
and the Chrome extension was much simpler.

489
00:28:43,319 --> 00:28:45,080
It can also access your cookies.

490
00:28:45,300 --> 00:28:48,763
So we use that to find out what your PSN login is,

491
00:28:49,163 --> 00:28:51,365
which then means that I can...

492
00:28:51,852 --> 00:28:54,392
find your dev kit via our server and talk to it.

493
00:28:55,132 --> 00:28:57,653
And it can display some notifications on your screen.

494
00:28:59,013 --> 00:29:01,733
So we use the Chrome extension for QA

495
00:29:02,093 --> 00:29:03,854
to add extra buttons to Jira.

496
00:29:04,494 --> 00:29:06,294
So there's one button that attaches

497
00:29:06,334 --> 00:29:07,534
a screenshot in one click.

498
00:29:07,994 --> 00:29:10,775
So you press the button in your Jira web page.

499
00:29:11,295 --> 00:29:13,555
It goes off to your dev kit, takes a screenshot,

500
00:29:13,695 --> 00:29:15,956
and attaches it to the bug that you're currently

501
00:29:15,996 --> 00:29:17,236
creating or looking at.

502
00:29:17,756 --> 00:29:20,157
So in one button press, it's done all the work for you.

503
00:29:20,754 --> 00:29:25,458
and you don't have to be browsing around to find the screenshot, and it makes sure that

504
00:29:25,478 --> 00:29:30,823
you get the right screenshot as well. We have the same functionality for starting and stopping

505
00:29:30,863 --> 00:29:37,348
replays, so you can start a replay from the Jira page, you can repro the bug on your dev

506
00:29:37,388 --> 00:29:43,013
kit, and then you can stop the replay, and it will attach the replay to the bug that

507
00:29:43,033 --> 00:29:49,658
you're creating. And finally, there's a button for them that will fill in details of...

508
00:29:50,709 --> 00:29:56,294
For example, the Perforce revision that you're currently running and the game location where

509
00:29:56,334 --> 00:29:56,694
you are.

510
00:29:56,854 --> 00:30:00,737
So which stream you're in, whereabouts are you within that dream.

511
00:30:03,640 --> 00:30:09,264
And again, with the Perforce revision, because it's like five numbers, it's really handy

512
00:30:09,304 --> 00:30:13,147
just to be able to click a button and get it filled in without having to kind of try

513
00:30:13,187 --> 00:30:16,710
and remember those numbers, make sure they end up in the right order, because you tend

514
00:30:16,730 --> 00:30:18,011
to get quite a lot of mistakes.

515
00:30:20,728 --> 00:30:22,108
Oh, now I've gone the wrong way. Sorry.

516
00:30:24,809 --> 00:30:27,910
So, on to the designers, the artists, and the audio people.

517
00:30:28,851 --> 00:30:32,272
So, we want to make sure that everyone is running the game

518
00:30:32,332 --> 00:30:33,612
within the same environment.

519
00:30:34,232 --> 00:30:36,373
And that is where Dashboard comes in.

520
00:30:36,773 --> 00:30:39,494
Dashboard is a tool that we've written in-house.

521
00:30:40,354 --> 00:30:42,655
And firstly, when you boot it up,

522
00:30:42,755 --> 00:30:45,036
it checks that you've got all the dependencies installed.

523
00:30:45,056 --> 00:30:45,096
So...

524
00:30:47,688 --> 00:30:50,130
if you've got Target Manager, Remote Viewer Server,

525
00:30:50,430 --> 00:30:53,232
all the dependencies that we use from within the Sony tools,

526
00:30:53,532 --> 00:30:54,693
it checks you've got them installed

527
00:30:54,813 --> 00:30:56,194
and it checks that you've got them installed

528
00:30:56,334 --> 00:30:57,175
at the right version.

529
00:30:59,157 --> 00:31:01,799
And if you don't, it gives you a button that you can click

530
00:31:01,939 --> 00:31:03,039
and it will run the installer.

531
00:31:03,620 --> 00:31:06,722
So that makes sure that everyone in the company

532
00:31:06,802 --> 00:31:10,265
has the right software installed, it's up to date,

533
00:31:10,385 --> 00:31:12,126
so we don't get any weird bugs because of that.

534
00:31:13,467 --> 00:31:15,089
Then once you've done your dependencies,

535
00:31:15,109 --> 00:31:16,550
you can click onto the Builds tab.

536
00:31:16,987 --> 00:31:19,468
And that gives you a list of the current builds

537
00:31:19,809 --> 00:31:21,730
that we have available on our server.

538
00:31:22,170 --> 00:31:23,610
And you can fill in build notes.

539
00:31:23,670 --> 00:31:25,091
So QA will fill in build notes

540
00:31:25,791 --> 00:31:27,812
and you can see kind of what's broken.

541
00:31:29,053 --> 00:31:31,434
And there's a button that will update you

542
00:31:31,474 --> 00:31:32,595
to the latest green build.

543
00:31:32,755 --> 00:31:35,556
Because we want everyone to be on the same build

544
00:31:35,716 --> 00:31:36,737
and on latest code.

545
00:31:37,197 --> 00:31:38,458
So we want to make it really easy

546
00:31:38,878 --> 00:31:41,059
for them to be on latest code.

547
00:31:43,200 --> 00:31:45,641
And finally, there's a button to launch that build

548
00:31:45,761 --> 00:31:46,382
on your dev kit.

549
00:31:46,825 --> 00:31:49,787
And that also checks that you've got the right SDK installed

550
00:31:50,407 --> 00:31:53,648
on your dev kit, because we've had weird bugs in the past.

551
00:31:53,748 --> 00:31:57,510
So if you don't have the right SDK, then it will go away.

552
00:31:57,630 --> 00:32:00,351
It will install the SDK on your dev kit for you,

553
00:32:00,471 --> 00:32:01,331
and then it will run the build.

554
00:32:03,652 --> 00:32:04,612
Quick note on asserts.

555
00:32:05,113 --> 00:32:08,514
So we have fatal asserts, and they're

556
00:32:08,554 --> 00:32:11,875
included in the build that we give to our level designers

557
00:32:11,915 --> 00:32:12,576
and artists.

558
00:32:13,756 --> 00:32:16,497
We decided this near the beginning of the project.

559
00:32:17,187 --> 00:32:21,028
because we wanted to make sure that if you add an assert

560
00:32:21,168 --> 00:32:23,930
in your code, it really is a broken thing.

561
00:32:24,070 --> 00:32:25,470
And we want to make sure that people fix them

562
00:32:25,710 --> 00:32:26,571
as soon as possible.

563
00:32:27,711 --> 00:32:29,732
So if you hit an assert, then it stops.

564
00:32:30,032 --> 00:32:31,873
And it's not recoverable, it's not skippable.

565
00:32:32,253 --> 00:32:33,134
You have to go and fix it.

566
00:32:37,476 --> 00:32:40,897
So what does the Chrome extension do for designers?

567
00:32:41,818 --> 00:32:44,439
They have got a report bug button,

568
00:32:45,899 --> 00:32:46,340
which is.

569
00:32:46,985 --> 00:32:48,326
the yellow button in the middle there.

570
00:32:49,486 --> 00:32:50,447
If they click on that button,

571
00:32:50,767 --> 00:32:53,969
it will open up a Jira webpage in the create issues.

572
00:32:54,910 --> 00:32:57,071
It will pre-fill what revision they're running

573
00:32:57,371 --> 00:33:00,994
because that's not been particularly accurate in the past.

574
00:33:01,154 --> 00:33:02,455
So it goes off to their dev kit,

575
00:33:02,475 --> 00:33:05,156
says what revision of Dreams are you running,

576
00:33:05,317 --> 00:33:06,377
and fills that in for them.

577
00:33:06,417 --> 00:33:08,579
It fills in the game location for them.

578
00:33:09,319 --> 00:33:11,120
And they've also got the same buttons

579
00:33:11,180 --> 00:33:13,182
that QA have got to attach screenshots

580
00:33:13,562 --> 00:33:14,683
and to attach replays.

581
00:33:15,003 --> 00:33:15,923
So it makes it very easy.

582
00:33:16,906 --> 00:33:22,250
for a level designer who's having an issue to fill in a bug and then send that off to

583
00:33:22,310 --> 00:33:28,194
QA, and QA don't have to do very much extra work. They might add in a repro rate or something,

584
00:33:29,115 --> 00:33:33,898
and then they assign it out to a programmer. So very quickly, all the relevant information

585
00:33:35,519 --> 00:33:41,464
has been distributed to the programmer who can fix it. There's no Chinese whispers, and

586
00:33:41,504 --> 00:33:42,184
you know it's accurate.

587
00:33:44,960 --> 00:33:51,902
is a picture of the Chrome extension, and as you go down the screen, it's kind of checking

588
00:33:52,502 --> 00:33:57,103
that everything is working properly with the Chrome extension. So if any of this goes red,

589
00:33:57,623 --> 00:34:04,085
then the artist knows that they need to take some action, and it does explain to them what

590
00:34:04,105 --> 00:34:08,366
the action is that they need to take to fix it. So if you get down to the bottom and you

591
00:34:08,406 --> 00:34:12,067
get a screenshot, it means it can talk to your dev kit, everything's working fine.

592
00:34:16,665 --> 00:34:19,466
So we've now got a bug in Jira.

593
00:34:20,187 --> 00:34:22,088
We need to route it to the right person.

594
00:34:23,509 --> 00:34:28,712
And we've auto-filled lots and lots of information,

595
00:34:29,112 --> 00:34:33,175
which is really useful for production to farm the bug out.

596
00:34:34,055 --> 00:34:35,976
So we've put in the assert message.

597
00:34:36,056 --> 00:34:38,058
We've put in the programmer who added the assert.

598
00:34:39,158 --> 00:34:40,699
And there is a bit of a gotcha here,

599
00:34:41,159 --> 00:34:43,701
in that we have an assert in our game.

600
00:34:45,164 --> 00:34:46,845
for if it goes out of sync.

601
00:34:47,886 --> 00:34:50,648
And it's part of a macro,

602
00:34:51,108 --> 00:34:54,710
which means that one programmer added this assert.

603
00:34:55,731 --> 00:34:57,512
So it means that any out of sync bugs,

604
00:34:58,053 --> 00:35:00,274
it says, yeah, Dave added this one.

605
00:35:00,554 --> 00:35:01,475
So give it to Dave.

606
00:35:01,975 --> 00:35:04,897
So poor Dave ends up with a lot of out of sync bugs.

607
00:35:05,678 --> 00:35:07,419
And luckily Dave knows the code very well

608
00:35:07,459 --> 00:35:09,641
and can kind of farm them out to the right programmer.

609
00:35:10,501 --> 00:35:12,783
But at some point I need to go in and,

610
00:35:13,179 --> 00:35:16,061
maybe change it so that it looks up the variable

611
00:35:16,361 --> 00:35:19,203
that goes out of sync and see who added that variable,

612
00:35:19,283 --> 00:35:20,304
for example, instead.

613
00:35:20,584 --> 00:35:22,045
That would be more useful information

614
00:35:22,225 --> 00:35:24,286
for tracking down and out of sync.

615
00:35:24,987 --> 00:35:26,148
I haven't got around to that yet.

616
00:35:27,488 --> 00:35:29,350
I can also, if anyone wants to talk to me

617
00:35:29,450 --> 00:35:31,831
about Perforce Auth Joy afterwards,

618
00:35:31,871 --> 00:35:32,952
I'm not gonna go into it here,

619
00:35:33,833 --> 00:35:35,554
but I've had all sorts of fun and games

620
00:35:35,894 --> 00:35:37,895
trying to auth against Perforce.

621
00:35:40,217 --> 00:35:41,578
So yes, you got the assert message,

622
00:35:41,598 --> 00:35:42,778
you got the programmer who added it.

623
00:35:43,352 --> 00:35:47,852
got the call stack, you've got the Perforce revision where it went wrong, you've got a

624
00:35:47,912 --> 00:35:56,014
replay so you can reproduce it, you've got a screenshot, you've got a link to recap where

625
00:35:56,034 --> 00:35:59,994
you've got the core dump, you've got the TTY, you've got a video of the last 60 seconds

626
00:36:00,034 --> 00:36:05,975
of gameplay. So you should be able to figure out who to give the bug to.

627
00:36:08,116 --> 00:36:12,757
So then the bug is assigned out to a programmer.

628
00:36:13,860 --> 00:36:18,424
and there are two more buttons in the Chrome extension.

629
00:36:19,665 --> 00:36:21,947
So there is the launch replay button,

630
00:36:22,647 --> 00:36:24,769
which is my favorite button,

631
00:36:25,089 --> 00:36:27,251
and I've got a video of it here.

632
00:36:33,095 --> 00:36:35,297
So I start off with Dreams booted up

633
00:36:36,097 --> 00:36:38,979
in a debugger on my dev kit.

634
00:36:40,561 --> 00:36:42,582
Then when I go to a bug,

635
00:36:44,344 --> 00:36:52,631
in Jira, which has got a replay attached to it, I get a button at the top and this button

636
00:36:52,671 --> 00:37:00,117
is added by the Chrome extension. And when I hit this button, the Chrome extension downloads

637
00:37:00,157 --> 00:37:08,524
the replay data from Jira. It sends it via our server onto my dev kit. So my dev kit

638
00:37:08,564 --> 00:37:12,988
then starts replaying that replay data and

639
00:37:14,035 --> 00:37:16,756
Eventually, it hits the assert.

640
00:37:16,776 --> 00:37:21,919
And there we go, we've reproed the assert in the debugger.

641
00:37:22,359 --> 00:37:25,301
So I hit break, I can see what's asserted,

642
00:37:25,321 --> 00:37:26,641
I can fix the code.

643
00:37:27,302 --> 00:37:29,243
And then once I've fixed the code,

644
00:37:29,543 --> 00:37:31,544
I can rerun the replay and check my fix.

645
00:37:35,186 --> 00:37:36,767
Cool, so that's my favorite button.

646
00:37:37,087 --> 00:37:38,848
It's very cool.

647
00:37:39,188 --> 00:37:42,090
We also have another button to launch the game location.

648
00:37:42,422 --> 00:37:44,503
So replays are very handy for programmers,

649
00:37:44,783 --> 00:37:47,065
but because you've stored the initial game state,

650
00:37:47,085 --> 00:37:49,486
they're less useful for content people

651
00:37:50,267 --> 00:37:52,468
because any fixes to the content won't

652
00:37:52,528 --> 00:37:53,749
be reflected in the replay.

653
00:37:54,109 --> 00:37:56,031
So we also have this idea of game location,

654
00:37:56,091 --> 00:37:59,113
which is like a dream ID and a location within that dream.

655
00:38:00,113 --> 00:38:05,137
So launch game location will launch an artist

656
00:38:05,477 --> 00:38:09,860
into their dream at a particular point.

657
00:38:10,350 --> 00:38:12,072
So for example, if QA were saying,

658
00:38:12,112 --> 00:38:13,714
this tree over here is too green,

659
00:38:14,054 --> 00:38:15,496
they would attach the game location

660
00:38:15,656 --> 00:38:18,199
and then the artist could launch into it

661
00:38:18,299 --> 00:38:22,204
and see the tree that they were talking about and fix it.

662
00:38:22,505 --> 00:38:24,707
And then when QA go to check the fix,

663
00:38:24,747 --> 00:38:26,089
they can launch the game location

664
00:38:26,549 --> 00:38:28,752
and see the new less green tree.

665
00:38:33,890 --> 00:38:37,692
So once you've fixed the code, how do you test it?

666
00:38:38,132 --> 00:38:40,773
You can use the Launch Replay button again,

667
00:38:41,173 --> 00:38:43,294
and then check that the replay finishes

668
00:38:43,494 --> 00:38:46,035
rather than asserting or crashing.

669
00:38:47,615 --> 00:38:50,396
You can also submit a build to Autobot.

670
00:38:51,236 --> 00:38:53,037
So we have a script,

671
00:38:53,477 --> 00:38:56,098
and it doesn't take any command line parameters

672
00:38:56,118 --> 00:38:58,899
because I wanted to make it as simple as possible to run,

673
00:38:58,939 --> 00:38:59,979
so you can just double click on it.

674
00:39:00,800 --> 00:39:02,580
And it takes your local code.

675
00:39:03,064 --> 00:39:06,466
builds a package, uploads that package to Autobot,

676
00:39:06,866 --> 00:39:09,787
and then kicks off a smoke test, which will then,

677
00:39:10,047 --> 00:39:11,888
when it completes, email you the results.

678
00:39:12,928 --> 00:39:17,370
So if you've made a fix that touches lots of bits of code,

679
00:39:18,291 --> 00:39:21,252
or we all have bits of code in our code base

680
00:39:21,312 --> 00:39:23,313
where you know that if you go into that

681
00:39:23,893 --> 00:39:27,815
and change one fix, you will break three other things.

682
00:39:28,155 --> 00:39:30,256
So if you've been in one of those tangly bits of code,

683
00:39:31,577 --> 00:39:34,538
you can kick off an Autobot run before you check in

684
00:39:34,878 --> 00:39:36,579
and just check that you're not gonna break everything.

685
00:39:39,800 --> 00:39:43,182
And we also have a script to mark bugs as fixed.

686
00:39:43,782 --> 00:39:46,723
So previously, when you checked in a fix,

687
00:39:46,963 --> 00:39:49,244
you would put in your Perforce checking comment,

688
00:39:49,724 --> 00:39:51,505
a reference to the bug that you had fixed

689
00:39:51,965 --> 00:39:54,586
and a comment about what it was that you had changed.

690
00:39:56,267 --> 00:39:57,968
And then you would go to JIRA

691
00:39:57,988 --> 00:39:58,148
and...

692
00:39:59,626 --> 00:40:01,828
you would go to the bug and you would put in

693
00:40:02,269 --> 00:40:04,591
what Perforce revision you had just submitted,

694
00:40:04,991 --> 00:40:06,453
which again, a bit error-prone,

695
00:40:06,853 --> 00:40:08,595
and you would put in a comment about what you did.

696
00:40:08,735 --> 00:40:10,437
So you're kind of putting the same information in

697
00:40:10,577 --> 00:40:11,397
in two places.

698
00:40:11,898 --> 00:40:13,880
So we've just got a script that parses

699
00:40:14,000 --> 00:40:16,342
the Perforce check-in comments

700
00:40:16,763 --> 00:40:18,224
after every successful build.

701
00:40:19,505 --> 00:40:23,209
And if there is a comment of the form

702
00:40:23,619 --> 00:40:27,461
with the exclamation mark and then a number.

703
00:40:27,621 --> 00:40:29,802
That means I fixed that bug number

704
00:40:30,583 --> 00:40:32,744
and it will go off to JIRA,

705
00:40:33,244 --> 00:40:37,986
check that that bug is in the in progress state.

706
00:40:38,206 --> 00:40:41,168
If it is, then it adds a comment to the bug saying,

707
00:40:41,668 --> 00:40:44,770
Amy fixed this bug in Perforce revision 320.

708
00:40:45,050 --> 00:40:50,873
This is the checking comment that she put into Perforce

709
00:40:51,193 --> 00:40:52,513
and then it marks it as fixed for me.

710
00:40:53,095 --> 00:40:56,217
So it just means that when you're fixing bugs,

711
00:40:56,718 --> 00:40:58,419
it takes out a little bit of effort.

712
00:40:58,779 --> 00:41:00,880
And if we can take out lots and lots of little bits

713
00:41:00,920 --> 00:41:04,903
of effort, then everyone is working much more quickly,

714
00:41:05,984 --> 00:41:06,984
and we save time overall.

715
00:41:10,187 --> 00:41:13,088
Right, so you've fixed the bug, you've checked it in,

716
00:41:13,449 --> 00:41:15,130
now QA need to verify your fix.

717
00:41:16,551 --> 00:41:18,512
And you can use the...

718
00:41:19,639 --> 00:41:24,422
Chrome extension Jira button to launch the replay, so QA can launch the replay and check

719
00:41:24,462 --> 00:41:32,287
that it doesn't reproduce. They can add a replay to Autobot, so if it hadn't been picked

720
00:41:32,407 --> 00:41:39,091
up by any of the Autobot test suites, then they can think about adding a replay, and

721
00:41:39,131 --> 00:41:43,394
they would want to add a new replay. They wouldn't want to use the replay for the bug

722
00:41:43,614 --> 00:41:46,956
because you want to keep them really, really short.

723
00:41:47,483 --> 00:41:51,885
and you want to make sure that the screenshot at the end shows everything that you have

724
00:41:51,945 --> 00:41:56,806
changed as part of that replay. You want to make sure that the screenshot at the end shows

725
00:41:56,846 --> 00:41:59,027
you that the replay did what you thought it did.

726
00:42:02,368 --> 00:42:09,290
I would also like to track stuff that gets fixed by Autobot, because if Autobot has

727
00:42:11,291 --> 00:42:14,172
reported a bug, and QA have kind of prefilled that bug in.

728
00:42:15,017 --> 00:42:17,438
AutoBot can also detect that that bug has been fixed,

729
00:42:17,738 --> 00:42:20,100
and it can add a comment onto the Jira bug

730
00:42:20,400 --> 00:42:22,601
so that then when a programmer goes to fix it,

731
00:42:22,901 --> 00:42:24,202
they can see that it's already been fixed.

732
00:42:24,522 --> 00:42:25,423
But I haven't done that yet.

733
00:42:25,823 --> 00:42:26,824
Must do that, maybe next week.

734
00:42:30,566 --> 00:42:31,547
Oh, no, I've gone the wrong way.

735
00:42:33,027 --> 00:42:36,049
Right, so in summary, the tools we have.

736
00:42:36,209 --> 00:42:39,371
We have AutoBot, which is our automated testing system,

737
00:42:40,252 --> 00:42:43,213
which is a MySQL database, Django Web UI on top.

738
00:42:43,617 --> 00:42:44,778
and a bunch of Python scripts.

739
00:42:45,999 --> 00:42:48,100
We use Jira for our bug tracking,

740
00:42:48,320 --> 00:42:50,161
which has got an awesome REST API.

741
00:42:51,502 --> 00:42:56,065
We use Recap for storing our core dumps and TTY and video.

742
00:42:56,465 --> 00:42:58,967
They have a REST API, which is improving rapidly.

743
00:42:59,867 --> 00:43:02,269
We use deterministic replays, and they're

744
00:43:03,129 --> 00:43:05,731
essential for the reproing of our bugs.

745
00:43:06,972 --> 00:43:11,315
Our game server can forward a message from the web side.

746
00:43:11,972 --> 00:43:19,519
on to a dev kit and then can send the result back to the website, which is used by a bunch

747
00:43:19,559 --> 00:43:25,303
of these tools. And it's all linked together with the Chrome extension, which has kind

748
00:43:25,343 --> 00:43:36,413
of got fingers in many, many pies. So it's all about trying to make sure that we find

749
00:43:36,453 --> 00:43:40,936
the bugs early. We attach all the information that we need.

750
00:43:41,367 --> 00:43:44,128
to route them to the right person and to repro them.

751
00:43:45,688 --> 00:43:50,571
And then we want to make it really simple to repro the bug and to mark it fixed.

752
00:43:51,091 --> 00:43:56,393
And it's just a bunch of little things trying to make sure that people have the information

753
00:43:56,993 --> 00:44:03,876
in front of them at the right time, and trying to make little improvements to the workflow.

754
00:44:04,196 --> 00:44:10,279
And all the little improvements kind of add up to a really nice, smooth, slick workflow.

755
00:44:10,992 --> 00:44:13,393
And then suddenly you've got less bugs, which is awesome.

756
00:44:15,674 --> 00:44:17,315
So does anyone have any questions?

757
00:44:24,538 --> 00:44:28,580
Hi.

758
00:44:28,840 --> 00:44:29,461
Super cool talk.

759
00:44:30,041 --> 00:44:34,203
I'm curious about the human validation of screenshots for the smoke test.

760
00:44:34,243 --> 00:44:38,225
You mentioned that testing the game state was too error prone or had too much variation.

761
00:44:38,285 --> 00:44:39,666
So does that mean that for every...

762
00:44:40,419 --> 00:44:44,901
smoke test that's being run, there is a validation by a QA person for every test?

763
00:44:44,941 --> 00:44:46,542
Because that seems like a lot of stuff.

764
00:44:47,022 --> 00:44:48,203
Yeah, they don't check every one.

765
00:44:49,024 --> 00:44:54,687
So I think it's about once a day, they will pick a test and will just scroll through.

766
00:44:54,707 --> 00:44:57,008
And then if they...

767
00:44:57,028 --> 00:44:58,929
The ones that are more likely to fail, I guess?

768
00:44:59,750 --> 00:45:02,912
Well, no, they would look at all of the results from a smoke test.

769
00:45:02,952 --> 00:45:06,674
So a smoke test is about 200 tests.

770
00:45:07,635 --> 00:45:09,696
So they can very quickly scroll through.

771
00:45:10,352 --> 00:45:12,312
and just kind of see by eye.

772
00:45:13,212 --> 00:45:15,213
And yeah, they wouldn't do it for every single one.

773
00:45:15,493 --> 00:45:15,773
Thanks.

774
00:45:19,474 --> 00:45:19,834
Hi there.

775
00:45:20,134 --> 00:45:23,674
I was wondering what you do to track

776
00:45:24,035 --> 00:45:26,215
which programmer added asserts.

777
00:45:26,715 --> 00:45:28,976
Is that some sort of metadata, or is that just

778
00:45:29,016 --> 00:45:30,756
like the diff history that you look through?

779
00:45:32,056 --> 00:45:34,317
There is a command.

780
00:45:34,897 --> 00:45:38,258
So the P4 command line, I think it's P4.

781
00:45:40,143 --> 00:45:40,524
Thank you.

782
00:45:40,544 --> 00:45:41,724
P4 Changes.

783
00:45:41,744 --> 00:45:44,365
So you can run that and you can pass in

784
00:45:45,346 --> 00:45:51,009
which revision you're interested in and which line, I think.

785
00:45:52,749 --> 00:45:54,970
Yes, so you can run that and it will tell you

786
00:45:55,030 --> 00:45:56,171
who submitted that change.

787
00:45:56,931 --> 00:45:57,552
That makes sense.

788
00:45:57,952 --> 00:46:00,093
So that's used to route to the programmers.

789
00:46:00,173 --> 00:46:03,314
A follow-up question, what do you do when programmers leave?

790
00:46:03,334 --> 00:46:06,076
Either go on leave or leave the company when you route those?

791
00:46:07,536 --> 00:46:09,157
Then you would have.

792
00:46:09,748 --> 00:46:15,191
I guess the programmer would have handed their code over, so production should know kind

793
00:46:15,812 --> 00:46:19,874
of who they have handed each code area over to.

794
00:46:20,394 --> 00:46:25,957
But yes, it would say in the bug this assert was added by Fred, who has left.

795
00:46:26,898 --> 00:46:30,740
So then production would know who Fred's bugs should go to.

796
00:46:30,760 --> 00:46:31,220
Okay.

797
00:46:31,400 --> 00:46:32,240
Thanks.

798
00:46:32,761 --> 00:46:33,081
Thank you.

799
00:46:36,022 --> 00:46:36,903
Hi.

800
00:46:41,027 --> 00:46:47,592
At what point did Media Molecule decide to have designated tools programmers?

801
00:46:48,313 --> 00:46:53,938
How did you manage having the benefit of a designated tools programmer as opposed to

802
00:46:53,958 --> 00:46:55,559
them working just full-time on the project?

803
00:46:58,021 --> 00:47:04,967
I guess as far back as I can remember, we haven't always had a dedicated tools programmer.

804
00:47:06,948 --> 00:47:08,249
I can't remember when.

805
00:47:09,283 --> 00:47:11,404
we hired our first tools programmer.

806
00:47:12,225 --> 00:47:18,987
I guess it would be when we got to about 12-ish programmers,

807
00:47:19,308 --> 00:47:22,989
although I'm not sure I can remember.

808
00:47:23,669 --> 00:47:25,530
But actually, it's been really, really useful.

809
00:47:25,890 --> 00:47:27,291
Because you write all these tools,

810
00:47:27,671 --> 00:47:29,152
and then all the other programmers

811
00:47:29,192 --> 00:47:31,432
become more productive.

812
00:47:32,033 --> 00:47:33,373
And it's not just the programmers.

813
00:47:33,413 --> 00:47:35,834
The QA people become more productive.

814
00:47:36,735 --> 00:47:38,435
Everyone gets more stuff done.

815
00:47:40,557 --> 00:47:47,059
And it's quite hard to kind of put aside time to invest in tools and infrastructure, but

816
00:47:47,339 --> 00:47:51,661
actually we found that it's been really useful and it has kind of paid back the time that

817
00:47:51,681 --> 00:47:52,321
we've invested.

818
00:47:52,641 --> 00:47:52,921
Cool.

819
00:47:52,941 --> 00:47:53,181
Thanks.

820
00:47:55,502 --> 00:48:03,605
Hey, I'm a QA manager and I'm kind of interested in like how did you implement the process

821
00:48:04,225 --> 00:48:05,005
at the very beginning?

822
00:48:05,740 --> 00:48:13,442
together, maybe together with QA, like how did that whole implementation kind of work?

823
00:48:13,862 --> 00:48:18,343
So you mean how did we implement the process of like the bug flow around?

824
00:48:18,443 --> 00:48:23,105
Exactly, and automation. I don't know, maybe it was a process you iterated on back from

825
00:48:23,545 --> 00:48:26,826
LittleBigPlanet or was this a completely new...

826
00:48:26,846 --> 00:48:33,747
It's definitely been very iterative. So I guess it started off...

827
00:48:34,448 --> 00:48:36,570
with Daniel Kidney writing Autobot.

828
00:48:37,750 --> 00:48:42,313
So he kind of plugged together Autobot for us.

829
00:48:43,174 --> 00:48:44,835
And we've added lots to it,

830
00:48:44,875 --> 00:48:47,676
and we've kind of connected it up to other things

831
00:48:47,977 --> 00:48:48,777
as we went along.

832
00:48:49,157 --> 00:48:52,219
But yes, very iteratively, in that we kind of added that.

833
00:48:53,060 --> 00:48:54,580
Dashboard was completely separate.

834
00:48:54,600 --> 00:48:55,881
We already had dashboard.

835
00:48:58,143 --> 00:48:59,904
And yeah, we just kind of added things in.

836
00:48:59,964 --> 00:49:01,264
Whenever we see...

837
00:49:02,012 --> 00:49:04,673
a problem with the workflow, we try and fix it.

838
00:49:05,353 --> 00:49:07,114
And then it kind of gradually gets better.

839
00:49:07,374 --> 00:49:10,136
But there wasn't some kind of grand plan at the beginning.

840
00:49:10,216 --> 00:49:11,296
This is what we're going to do.

841
00:49:11,357 --> 00:49:12,197
It just kind of happened.

842
00:49:13,117 --> 00:49:13,398
Thank you.

843
00:49:15,679 --> 00:49:17,360
So the last two questions answer my question.

844
00:49:17,520 --> 00:49:18,880
I just want to clarify.

845
00:49:20,121 --> 00:49:23,943
So this whole summary of your current tool setup,

846
00:49:25,804 --> 00:49:28,706
it started, you started arriving that.

847
00:49:29,957 --> 00:49:32,337
during Media Molecule's earliest projects?

848
00:49:32,397 --> 00:49:33,077
Is that true?

849
00:49:33,418 --> 00:49:36,358
Like, it didn't just start with your current Dreams project,

850
00:49:36,418 --> 00:49:36,598
right?

851
00:49:38,179 --> 00:49:38,619
I suppose.

852
00:49:38,879 --> 00:49:43,160
So Dashboard we had for LittleBigPlanet and Tearaway.

853
00:49:43,180 --> 00:49:44,861
So we've had Dashboard for a long time.

854
00:49:45,981 --> 00:49:47,882
Autobot is new for Dreams.

855
00:49:48,742 --> 00:49:51,763
We did have some automated testing on LittleBigPlanet,

856
00:49:52,603 --> 00:49:56,284
but it was very error prone, and it was mostly broken.

857
00:49:58,003 --> 00:50:02,785
And we didn't kind of give the resource to kind of develop it and make it stable and

858
00:50:02,825 --> 00:50:03,486
make it useful.

859
00:50:05,126 --> 00:50:10,609
I guess we were more concentrated on just kind of shipping the game rather than investing

860
00:50:10,649 --> 00:50:18,472
in tools, whereas like this time around, we've had a bit more time, so we've been able to

861
00:50:18,512 --> 00:50:20,493
write more cool stuff.

862
00:50:20,613 --> 00:50:22,494
And the Chrome extension is completely new.

863
00:50:24,072 --> 00:50:26,613
because I was messing around with Chrome extensions

864
00:50:26,693 --> 00:50:29,534
in my free time, but I went along to a game jam

865
00:50:29,814 --> 00:50:31,435
and was writing a Chrome extension,

866
00:50:32,955 --> 00:50:35,096
and then realized quite how powerful it was,

867
00:50:35,156 --> 00:50:38,497
the fact that you could take this HTML web page

868
00:50:38,537 --> 00:50:41,238
and just insert your own HTML,

869
00:50:41,318 --> 00:50:43,679
so you could just add buttons wherever you wanted,

870
00:50:44,160 --> 00:50:44,820
which is really cool.

871
00:50:46,120 --> 00:50:49,722
So yeah, that came about just kind of by lucky accident

872
00:50:50,002 --> 00:50:50,802
after a game jam.

873
00:50:54,427 --> 00:50:56,269
So yes, most of it is new.

874
00:50:56,289 --> 00:50:57,670
Thank you.

875
00:50:58,731 --> 00:51:00,313
Oh, and I just thought of another tool

876
00:51:00,353 --> 00:51:02,015
that we have that I didn't actually mention,

877
00:51:02,095 --> 00:51:02,856
but it's really cool.

878
00:51:02,876 --> 00:51:05,900
So we have a tool where you can record video

879
00:51:06,340 --> 00:51:09,163
and you can record performance data

880
00:51:10,044 --> 00:51:11,145
in the form of telemetry,

881
00:51:11,286 --> 00:51:12,667
and then you can display them together.

882
00:51:12,687 --> 00:51:13,788
So you can...

883
00:51:16,495 --> 00:51:17,875
see where you've got performance spikes.

884
00:51:17,915 --> 00:51:20,296
You can click on the performance spikes in the web UI,

885
00:51:20,556 --> 00:51:21,777
and it'll take you to the video

886
00:51:21,997 --> 00:51:23,577
of where the performance problem was.

887
00:51:23,637 --> 00:51:24,938
You can see what was on screen

888
00:51:24,978 --> 00:51:26,998
and what the game was doing at that point,

889
00:51:28,599 --> 00:51:29,879
which I didn't talk about in this talk

890
00:51:29,899 --> 00:51:30,580
because it didn't fit.

891
00:51:30,700 --> 00:51:32,060
I didn't have time, but it's very cool.

892
00:51:33,501 --> 00:51:34,961
Okay, sorry for my accent, but...

893
00:51:38,406 --> 00:51:43,229
You, what was the principle motivation to do your engine deterministic?

894
00:51:43,309 --> 00:51:49,253
It was for doing a deterministic replay or to do network and to do some

895
00:51:49,313 --> 00:51:51,974
love step and it was interesting.

896
00:51:52,735 --> 00:51:56,337
Ah, so you're saying why did we make it deterministic?

897
00:51:56,837 --> 00:51:57,058
Because.

898
00:51:57,858 --> 00:52:00,739
Your engine is not deterministic like most of the engine.

899
00:52:01,139 --> 00:52:06,000
And even if I see the benefit of having deterministic replay,

900
00:52:06,180 --> 00:52:09,721
I'm not sure if I want to invest in making my engine

901
00:52:09,761 --> 00:52:13,502
deterministic only to have deterministic replay.

902
00:52:13,862 --> 00:52:14,782
Yes, fair point.

903
00:52:14,882 --> 00:52:17,883
It is a lot of work making your engine deterministic

904
00:52:18,143 --> 00:52:19,483
and keeping it deterministic.

905
00:52:19,543 --> 00:52:22,364
So we use Autobot to check for out of syncs.

906
00:52:23,164 --> 00:52:26,324
But we do regularly find out of syncs and have to fix them.

907
00:52:27,732 --> 00:52:31,193
I guess we already wanted it to be deterministic,

908
00:52:31,913 --> 00:52:34,915
because if someone makes something in Dreams,

909
00:52:36,095 --> 00:52:40,597
we want it to play the same on everybody's PS4.

910
00:52:41,238 --> 00:52:44,759
We don't want people to be able to create levels

911
00:52:45,519 --> 00:52:48,621
that will run in multiple different ways,

912
00:52:48,981 --> 00:52:51,822
because then they could create something

913
00:52:51,862 --> 00:52:53,763
where you press the button and the door opened,

914
00:52:54,543 --> 00:52:56,124
and then if it wasn't deterministic,

915
00:52:56,602 --> 00:53:00,225
then some people might play it and they press the button and the door doesn't open.

916
00:53:02,086 --> 00:53:04,789
And that would not be ideal for players.

917
00:53:05,349 --> 00:53:10,334
They want to be able to create stuff and know that everyone will see that stuff exactly

918
00:53:10,374 --> 00:53:10,754
the same.

919
00:53:12,596 --> 00:53:13,496
So that's one reason.

920
00:53:13,596 --> 00:53:14,517
Also multiplayer.

921
00:53:15,818 --> 00:53:17,240
It's very handy for multiplayer.

922
00:53:18,641 --> 00:53:20,683
And yes, for reproing bugs.

923
00:53:21,971 --> 00:53:23,713
And also another quick question.

924
00:53:23,773 --> 00:53:26,637
You said for assign the bug first,

925
00:53:28,859 --> 00:53:31,543
you go to who was the asset.

926
00:53:31,723 --> 00:53:33,765
But probably on your company, I probably

927
00:53:33,825 --> 00:53:36,288
don't want to be the guy that implement

928
00:53:36,348 --> 00:53:38,331
that area out of bound.

929
00:53:39,254 --> 00:53:43,017
I will be annoyed by everyone after.

930
00:53:43,037 --> 00:53:46,319
Have you tried over a joystick, like,

931
00:53:46,739 --> 00:53:52,003
who do the last step change in the call stack,

932
00:53:52,103 --> 00:53:54,004
whatever it is, even if it's not the assert,

933
00:53:54,084 --> 00:53:55,405
it's more on the top of the call stack.

934
00:53:55,425 --> 00:53:56,526
Have you tried that or not?

935
00:53:57,346 --> 00:53:59,428
So one thing we do do is,

936
00:53:59,548 --> 00:54:02,430
if we go back to the email.

937
00:54:05,892 --> 00:54:06,012
Oh.

938
00:54:06,993 --> 00:54:08,774
So in the email, you've got.

939
00:54:09,203 --> 00:54:11,025
an idea of who checked in and broke it.

940
00:54:12,146 --> 00:54:14,268
So you can see that there's three revisions there.

941
00:54:14,428 --> 00:54:16,009
It's kind of small, but there's three revisions.

942
00:54:16,910 --> 00:54:19,252
And you know it was one of those three that broke it.

943
00:54:20,153 --> 00:54:21,755
So you do get extra information there.

944
00:54:21,815 --> 00:54:24,658
But no, we've not tried anything other than looking

945
00:54:25,178 --> 00:54:26,379
at who added the assert.

946
00:54:26,659 --> 00:54:27,560
And yes, it's a good point.

947
00:54:27,981 --> 00:54:29,302
If you fall off the end of an array,

948
00:54:29,862 --> 00:54:31,264
I don't know who added that assert.

949
00:54:32,165 --> 00:54:32,445
OK.

950
00:54:32,465 --> 00:54:32,705
Thank you.

951
00:54:35,311 --> 00:54:36,031
Thank you for the talk.

952
00:54:36,171 --> 00:54:38,573
My question was, you mentioned that you use Autobot

953
00:54:38,613 --> 00:54:40,394
to test for really scary changes.

954
00:54:41,475 --> 00:54:44,678
Have you thought about making Autobot part of a pre-commit,

955
00:54:44,838 --> 00:54:47,020
or like pre-check and process rather than post?

956
00:54:47,300 --> 00:54:49,321
And I was just wondering if you had tried that out

957
00:54:49,341 --> 00:54:49,862
and how it went.

958
00:54:50,802 --> 00:54:51,683
We haven't tried it.

959
00:54:52,324 --> 00:54:54,345
We did think about it briefly,

960
00:54:56,547 --> 00:55:01,230
but IT are very nervous about messing with Perforce,

961
00:55:01,711 --> 00:55:03,352
so they won't even let me add.

962
00:55:05,045 --> 00:55:09,447
a commit hook to kind of get the check-in comment

963
00:55:09,527 --> 00:55:12,208
at the moment, because you just don't mess with Perforce.

964
00:55:14,149 --> 00:55:14,729
Great, thank you.

965
00:55:18,530 --> 00:55:20,671
Hey, so it sounds like

966
00:55:21,532 --> 00:55:24,433
devs can use Autobot for one-off changes

967
00:55:24,493 --> 00:55:27,674
before they submit, and do you automatically run Autobot

968
00:55:27,834 --> 00:55:29,155
when they submit and they get results?

969
00:55:29,235 --> 00:55:30,095
Is that every check-in?

970
00:55:30,955 --> 00:55:32,356
And then, is that gauntlet?

971
00:55:33,427 --> 00:55:37,329
It doesn't go to the main depot before it passes tests or...

972
00:55:38,250 --> 00:55:42,652
So you're saying, how does it work in terms of when does Autobot run

973
00:55:43,192 --> 00:55:44,393
compared to when you check in?

974
00:55:45,174 --> 00:55:48,215
And is anyone else protected from me submitting a change that breaks

975
00:55:48,435 --> 00:55:49,756
if I just say, do I get it right away

976
00:55:49,796 --> 00:55:53,138
or does it have to pass Autobot before it actually goes in?

977
00:55:53,538 --> 00:55:56,460
So what happens is you check in the change,

978
00:55:57,240 --> 00:56:01,302
so it's immediately available and anyone can get latest

979
00:56:01,342 --> 00:56:02,343
and will get your code.

980
00:56:03,309 --> 00:56:08,451
Then Jenkins puts the build together of the latest code.

981
00:56:09,491 --> 00:56:14,392
Then Autobot spots the new build and runs the tests

982
00:56:15,152 --> 00:56:16,513
and then emails the results.

983
00:56:17,173 --> 00:56:20,434
So yes, you do have like a 15, 20 minute window

984
00:56:20,934 --> 00:56:24,035
where the code has not been tested.

985
00:56:24,595 --> 00:56:26,976
We don't really know what state it's in.

986
00:56:27,356 --> 00:56:30,477
So you might get latest and get completely broken code.

987
00:56:31,187 --> 00:56:33,968
So do you have solutions for that, tools to help with that?

988
00:56:34,328 --> 00:56:36,249
It's a constant problem in the studio when people sync,

989
00:56:36,809 --> 00:56:39,889
and it just doesn't build, or it crashes, or something.

990
00:56:40,130 --> 00:56:40,950
We don't.

991
00:56:42,530 --> 00:56:44,251
What we do is the person who broke it

992
00:56:44,371 --> 00:56:45,551
has to fix it really quickly.

993
00:56:47,151 --> 00:56:48,352
That is our current scheme.

994
00:56:48,372 --> 00:56:50,252
Yes, we could think about kind of,

995
00:56:50,992 --> 00:56:53,953
I know that some companies have schemes whereby you check

996
00:56:53,993 --> 00:56:57,054
into a branch, and that branch only gets merged across

997
00:56:57,454 --> 00:56:58,894
if it passes a bunch of tests.

998
00:56:58,954 --> 00:57:00,215
So we could look at that.

999
00:57:00,977 --> 00:57:01,637
but we haven't yet.

1000
00:57:02,258 --> 00:57:02,478
Thank you.

1001
00:57:05,240 --> 00:57:07,943
Hi, so if a member on your QA team

1002
00:57:08,703 --> 00:57:10,104
comes up with some sort of a test case

1003
00:57:10,144 --> 00:57:12,066
for something that should be covered by automation

1004
00:57:12,086 --> 00:57:14,488
but isn't, the code necessarily isn't broken yet,

1005
00:57:14,548 --> 00:57:16,370
but it should be covered via automation

1006
00:57:16,390 --> 00:57:17,931
because maybe future code's gonna break it.

1007
00:57:17,991 --> 00:57:21,074
How do you have that QA team member handle that?

1008
00:57:21,114 --> 00:57:23,115
Like, do they write it up as if it were a ticket?

1009
00:57:23,135 --> 00:57:25,277
Do they contribute to the automation scripts themselves?

1010
00:57:25,337 --> 00:57:27,339
Or I'm just curious as to that process.

1011
00:57:27,893 --> 00:57:31,734
So the tests that get run in Autobot

1012
00:57:31,814 --> 00:57:33,435
are completely controlled by QA.

1013
00:57:33,955 --> 00:57:36,596
So if a QA member came up with a new test,

1014
00:57:37,036 --> 00:57:39,096
they would record a replay of that test.

1015
00:57:39,577 --> 00:57:43,938
They would use the web UI to submit that replay to Autobot.

1016
00:57:44,738 --> 00:57:47,599
Autobot would run that replay once and check

1017
00:57:48,439 --> 00:57:49,239
that it completes.

1018
00:57:49,919 --> 00:57:52,420
Then it would be added to the database as a new test.

1019
00:57:52,940 --> 00:57:56,341
And then that QA member could go in to the web UI again.

1020
00:57:56,885 --> 00:58:01,188
and say I want that test to run as part of the smoke test,

1021
00:58:01,368 --> 00:58:03,029
or as part of the sculpt suite,

1022
00:58:03,389 --> 00:58:05,511
they get to choose which suite it goes in.

1023
00:58:05,871 --> 00:58:08,413
And then every time that suite runs,

1024
00:58:08,493 --> 00:58:09,794
that test will then run.

1025
00:58:09,814 --> 00:58:11,135
Thank you.

1026
00:58:13,496 --> 00:58:15,397
You said that keeping a game deterministic

1027
00:58:15,437 --> 00:58:16,758
has been difficult for you.

1028
00:58:17,599 --> 00:58:19,700
Could you give any examples of the main problems

1029
00:58:19,740 --> 00:58:20,901
you see with determinism?

1030
00:58:20,961 --> 00:58:22,602
And are there any tips you have for people

1031
00:58:22,622 --> 00:58:24,244
that want to make their games deterministic?

1032
00:58:26,470 --> 00:58:27,930
Initialize your variables.

1033
00:58:28,670 --> 00:58:31,971
That is like, I'd say 50% of our out-of-syncs

1034
00:58:32,231 --> 00:58:33,572
are uninitialized variables.

1035
00:58:34,992 --> 00:58:39,333
Don't use rand, so use a random number generator

1036
00:58:39,573 --> 00:58:43,294
that you seed and use deterministically

1037
00:58:43,494 --> 00:58:46,015
if you want a deterministic random number.

1038
00:58:47,795 --> 00:58:49,015
Pointer values as keys.

1039
00:58:50,176 --> 00:58:52,316
Ah, yeah, we don't, we've not come across that one,

1040
00:58:52,376 --> 00:58:53,917
but yes, pointer values as keys.

1041
00:58:58,158 --> 00:58:58,278
Sorry?

1042
00:58:58,298 --> 00:58:58,898
Fixed timestamp.

1043
00:59:00,059 --> 00:59:00,819
Fixed timestamp.

1044
00:59:01,599 --> 00:59:02,400
Oh, for physics.

1045
00:59:03,000 --> 00:59:06,822
Yes, I don't know in detail how Anton has

1046
00:59:06,882 --> 00:59:09,163
made our physics deterministic.

1047
00:59:09,643 --> 00:59:12,985
So Anton has written our physics engine,

1048
00:59:13,665 --> 00:59:16,887
and all I know is that it simulates stuff

1049
00:59:17,807 --> 00:59:19,528
as if it was made out of balls.

1050
00:59:20,989 --> 00:59:24,070
But that is about the limit of my knowledge, I'm afraid.

1051
00:59:24,090 --> 00:59:25,311
Thanks.

1052
00:59:29,087 --> 00:59:31,988
My question is about integration of Autobot.

1053
00:59:32,148 --> 00:59:38,571
I guess with each game it might be sort of idiosyncratic how to get the replay working.

1054
00:59:38,591 --> 00:59:46,734
I mean, you can drop a user right into a certain location on a map in a game, but to recreate

1055
00:59:46,754 --> 00:59:50,236
the exact game state, I imagine from game to game it's a little bit different, even

1056
00:59:50,276 --> 00:59:51,817
if you have atomic...

1057
00:59:52,613 --> 00:59:54,534
unit tests and asserts in there.

1058
00:59:54,554 --> 00:59:56,735
I was just wondering if you have any recommendations

1059
00:59:56,755 --> 01:00:00,116
for best practices for kind of writing that

1060
01:00:00,156 --> 01:00:01,737
in an abstract enough way that would work

1061
01:00:01,757 --> 01:00:02,798
across multiple games?

1062
01:00:04,098 --> 01:00:08,140
I suppose you need a bunch of functionality

1063
01:00:08,200 --> 01:00:09,940
for it to work, so you need to be able

1064
01:00:09,980 --> 01:00:12,922
to serialize out your game state in some way.

1065
01:00:12,942 --> 01:00:17,783
You need to be able to then apply inputs

1066
01:00:17,863 --> 01:00:20,805
on top of that, so you would need a replay system.

1067
01:00:23,177 --> 01:00:25,479
I'm sorry, I've kind of lost the gist of your question.

1068
01:00:25,499 --> 01:00:26,740
Sorry, yeah, I guess it was...

1069
01:00:27,561 --> 01:00:29,342
I guess I'm just sort of wondering

1070
01:00:31,504 --> 01:00:34,446
if there are any recommendations overall

1071
01:00:34,466 --> 01:00:36,188
for writing a replay system

1072
01:00:36,508 --> 01:00:39,730
and writing your code abstract enough

1073
01:00:40,311 --> 01:00:41,372
to do the things like you're saying,

1074
01:00:41,392 --> 01:00:43,373
like serialization of your game states.

1075
01:00:45,115 --> 01:00:49,478
I guess we've not really structured it

1076
01:00:49,778 --> 01:00:51,140
particularly around...

1077
01:00:51,832 --> 01:00:54,173
the whole replay system, our code,

1078
01:00:54,253 --> 01:00:56,735
although the replay system did go in very early on.

1079
01:00:59,956 --> 01:01:02,798
So, I mean, we've written some code

1080
01:01:03,018 --> 01:01:05,759
that makes it easy to serialize out your game state

1081
01:01:06,279 --> 01:01:08,761
and to take into account serialized revision.

1082
01:01:09,121 --> 01:01:12,923
So when you add a variable to the game state,

1083
01:01:13,063 --> 01:01:16,144
we have macros that you use to add that variable

1084
01:01:16,324 --> 01:01:19,486
or to remove that variable, which will automatically do,

1085
01:01:21,553 --> 01:01:27,956
will generate the code for you that kind of checks against serialized revision. So we

1086
01:01:27,996 --> 01:01:36,680
do have that. And then, yeah, I mean, the stuff for kind of saving out the inputs just

1087
01:01:37,081 --> 01:01:43,884
kind of serializes out the inputs. And then the stuff for serializing out things like

1088
01:01:44,624 --> 01:01:50,647
text that we've input, we have a buffer for kind of extra messages.

1089
01:01:51,269 --> 01:01:57,412
that you can serialize into, but different subsystems serialize into that buffer in slightly

1090
01:01:57,532 --> 01:02:00,214
different ways just because different people wrote it.

1091
01:02:02,075 --> 01:02:06,057
We do have quite a variety of code at Media Molecule depending on who wrote it.

1092
01:02:06,437 --> 01:02:12,200
Quite often you can look at it and find who wrote it just by looking at what the variables

1093
01:02:12,280 --> 01:02:16,943
were named and kind of how it was put together, which is kind of handy.

1094
01:02:22,356 --> 01:02:23,283
Cool, thank you.

