1
00:00:04,453 --> 00:00:06,374
I'm Ralph Barbagallo here to talk about the reality of

2
00:00:06,374 --> 00:00:10,595
developing HoloLens games. How many people here have developed

3
00:00:10,595 --> 00:00:13,437
for HoloLens at all? Oh, okay. A bunch. So I think, you know,

4
00:00:13,437 --> 00:00:17,198
this is sort of like if you've developed for HoloLens, this

5
00:00:17,198 --> 00:00:20,559
might be maybe a little basic. But if you've just started

6
00:00:20,559 --> 00:00:24,401
developing for HoloLens or you're investigating it, this is

7
00:00:24,401 --> 00:00:27,442
kind of like a brain dump of what I learned developing my

8
00:00:27,442 --> 00:00:32,024
first HoloLens game, which is Ether Wars. And Ether Wars is

9
00:00:32,024 --> 00:00:33,145
kind of like a...

10
00:00:34,831 --> 00:00:41,175
Oh, nobody can hear me. Oh, this is, apparently we're supposed to use this mic. Alright. Well, I

11
00:00:41,175 --> 00:00:49,500
will use this mic. When it doesn't fall over. Okay. So, basically this is a brain dump of what

12
00:00:49,500 --> 00:00:54,043
I learned, uh, developing Ether Wars, which is, uh, a real time strategy game. It's a mixed

13
00:00:54,043 --> 00:00:59,266
reality real time strategy game. It's kinda like a combination between, you know, StarCraft

14
00:00:59,266 --> 00:01:04,089
2 and, like, playing with toys in your room. Uh, there's a little video of it here, which is,

15
00:01:05,237 --> 00:01:10,319
basically, you know, it's using the HoloLens' ability to know the shape of the world you're in

16
00:01:10,319 --> 00:01:14,360
and your position in the world. So in this case, you know, these little ships are coming out of

17
00:01:14,360 --> 00:01:18,962
the wall. They're attacking this base that's floating around in your room. It's not in this

18
00:01:18,962 --> 00:01:23,324
video, but there's actually, like, ground units and stuff. There's tanks and bases that you can

19
00:01:23,324 --> 00:01:30,386
build on the floor and stuff. And it's using HoloLens' ability to sort of, like, build a 3D

20
00:01:30,386 --> 00:01:33,788
mesh out of your world and play off of the surfaces in your world.

21
00:01:34,460 --> 00:01:38,762
So it's kind of like if you've seen those weird commercials

22
00:01:38,762 --> 00:01:41,443
with Arnold Schwarzenegger for mobile strike, but it's really

23
00:01:41,443 --> 00:01:44,505
just like a regular mobile game. You tap your hamster wheel type

24
00:01:44,505 --> 00:01:48,627
tap finger thing. But in the commercials they show planes

25
00:01:48,627 --> 00:01:52,409
blowing up conference room tables and bases and stuff all

26
00:01:52,409 --> 00:01:55,210
over the office and tanks driving on your floor. I'm trying

27
00:01:55,210 --> 00:01:56,371
to make that the actual game.

28
00:01:57,124 --> 00:02:03,329
which you can kind of do with HoloLens. It's early, but you can kind of get there. So we're

29
00:02:03,329 --> 00:02:08,734
going to talk about how you develop this type of game or really any game for HoloLens. Your

30
00:02:08,734 --> 00:02:11,836
first step is, of course, getting started. You know you need your equipment.

31
00:02:12,605 --> 00:02:15,947
and so you need a hollow lens obviously. There's two hollow

32
00:02:15,947 --> 00:02:19,229
lenses you can buy. They're all the same. One just happens to

33
00:02:19,229 --> 00:02:21,931
cost $5,000. The other one costs $3,000. There's no difference

34
00:02:21,931 --> 00:02:24,452
between them except the $5,000 one has some firmware stuff

35
00:02:24,452 --> 00:02:27,674
that you probably don't need. So you can get the developer

36
00:02:27,674 --> 00:02:28,014
edition.

37
00:02:28,715 --> 00:02:31,916
you need to get a Windows 10 PC. You can kind of develop for it

38
00:02:31,916 --> 00:02:34,897
on Windows 8 but it's kind of weird because the HoloLens

39
00:02:34,897 --> 00:02:38,498
itself is a self-contained Windows 10 PC. You might as

40
00:02:38,498 --> 00:02:42,920
well have a Windows 10 development machine. You need

41
00:02:42,920 --> 00:02:47,481
Unity 3D 5.5 beta or you can use 5.4 if you use the HoloLens

42
00:02:47,481 --> 00:02:48,622
technical preview.

43
00:02:48,862 --> 00:02:51,622
So if you're stuck on 5.4, I'm still on 5.4, I use the HoloLens

44
00:02:51,622 --> 00:02:55,983
technical preview. But if you get 5.5 beta, it's all in one

45
00:02:55,983 --> 00:03:00,485
build. Basically what this means is if you check VR support in

46
00:03:00,485 --> 00:03:03,946
your player settings in Unity, HoloLens will just appear as

47
00:03:03,946 --> 00:03:07,907
another SDK you can support. So if you've developed applications

48
00:03:07,907 --> 00:03:07,967
for

49
00:03:08,788 --> 00:03:13,489
Oculus Rift, for instance, you're halfway there because they kind of treat the HoloLens as any

50
00:03:13,489 --> 00:03:19,812
other VR platform. The main camera is your head model. It basically works like that. Of

51
00:03:19,812 --> 00:03:24,313
course, HoloGraphic Academy, I recommend everybody go through it. It's Microsoft's

52
00:03:24,313 --> 00:03:29,515
tutorials that they put on their website. It covers every major functional block of HoloLens

53
00:03:29,515 --> 00:03:33,877
and some of the code in it is really good, too. I've cut a lot of the code out of their

54
00:03:33,877 --> 00:03:35,657
examples and put them in my own projects. And speaking of which...

55
00:03:38,580 --> 00:03:42,981
there is Holo Toolkit. This is the next thing you need to look at when you're getting

56
00:03:42,981 --> 00:03:47,962
started. Holo Toolkit is ‑‑ well, the Holo Toolkit Unity version that's on GitHub is part

57
00:03:47,962 --> 00:03:53,824
of the greater Holo Toolkit SDK. Holo Toolkit itself is sort of the native SDK. If you have

58
00:03:53,824 --> 00:03:57,905
your own game engine written in C++ or whatever and you want to have it work on HoloLens, you

59
00:03:57,905 --> 00:04:01,846
can use the Holo Toolkit native SDK. And this Holo Toolkit Unity SDK,

60
00:04:02,946 --> 00:04:08,228
contains all the prefabs and scripts and build scripts and stuff that you can use to build

61
00:04:08,228 --> 00:04:12,670
HoloLens games. It has a lot of common functionality. You can see here input sharing, spatial mapping,

62
00:04:12,670 --> 00:04:17,332
all the basics are covered. And it's really good. It's updated constantly. In fact, a lot of the

63
00:04:17,332 --> 00:04:20,734
information I give you in this talk is probably going to be obsolete by the time I'm done because

64
00:04:20,734 --> 00:04:24,675
there's probably been like 15 polls by the time, you know, while we've been talking. It's super

65
00:04:24,675 --> 00:04:28,397
active. It's contributed by the open source community. So Microsoft and the community have

66
00:04:28,397 --> 00:04:30,118
been adding a lot to it.

67
00:04:31,455 --> 00:04:35,817
So I always start a project with it and I always keep it updated. I've never had an update

68
00:04:35,817 --> 00:04:41,380
break my project. They've been pretty good. So the first thing we'll talk about in building

69
00:04:41,380 --> 00:04:46,082
HoloLens application is the interface. This is probably the easiest place to start. It's

70
00:04:46,082 --> 00:04:51,124
probably the least sexy part of making a mixed reality application but it's required.

71
00:04:52,009 --> 00:04:58,211
And HoloLens, Microsoft's whole sort of interaction model they

72
00:04:58,211 --> 00:05:01,912
use for HoloLens, they say gaze, gesture and voice is basically

73
00:05:01,912 --> 00:05:04,653
how you're supposed to interact with a HoloLens application.

74
00:05:04,653 --> 00:05:08,434
Meaning you look around with your head like if you've used

75
00:05:08,434 --> 00:05:09,294
any VR application.

76
00:05:10,075 --> 00:05:13,956
and when you see something you want to interact with, you use a gesture, which is this air tap

77
00:05:13,956 --> 00:05:17,757
thing, which we'll talk about, or you use a voice command, because Cortana is built into the

78
00:05:17,757 --> 00:05:22,899
hollow lens. So that's kind of their interaction model. You can see an example of it here. This

79
00:05:22,899 --> 00:05:28,580
is a video taken in my office of the Ether Wars dialogue system. Now my office is a mess. There's

80
00:05:28,580 --> 00:05:32,701
a reason for that, because in AR, a messy room is better than a clean room. Gives you a lot of

81
00:05:32,701 --> 00:05:34,842
stuff to track. I'm going to use that as an excuse.

82
00:05:35,577 --> 00:05:40,223
But this is a world space canvas floating around in my room.

83
00:05:40,223 --> 00:05:43,206
And you can see a little circle there is your cursor.

84
00:05:43,206 --> 00:05:44,227
And it's pretty simple.

85
00:05:44,227 --> 00:05:46,370
When that cursor looks at that scan button,

86
00:05:46,370 --> 00:05:47,431
it'll highlight yellow.

87
00:05:47,431 --> 00:05:49,193
And I select it with an air tap, which

88
00:05:49,193 --> 00:05:51,236
is kind of out of the camera range, and it selects it.

89
00:05:51,236 --> 00:05:52,257
Pretty simple stuff.

90
00:05:52,257 --> 00:05:55,721
This is a world space canvas, which

91
00:05:56,695 --> 00:06:00,618
everybody is seeing in unity, no big deal. I think I put a collision volume around it so the

92
00:06:00,618 --> 00:06:05,182
cursor has something to bounce off of. But bottom line is it's just a standard world space

93
00:06:05,182 --> 00:06:10,646
canvas. The unique thing about this interface in HoloLens, which I didn't really show in this

94
00:06:10,646 --> 00:06:14,749
video, it floats around in front of your vision. If I walk around, the interface will sort of

95
00:06:14,749 --> 00:06:19,153
follow me around. If you turn, it will sort of scoot into your vision and stuff. It keeps it

96
00:06:19,153 --> 00:06:23,936
floating around in front of you. The way that is done is use this thing called a tag align.

97
00:06:23,936 --> 00:06:25,397
This is in Holo toolkit.

98
00:06:26,318 --> 00:06:29,460
one of many easy to use scripts and prefabs.

99
00:06:29,460 --> 00:06:33,402
This tag along script or behavior that you add

100
00:06:33,402 --> 00:06:35,524
basically does what I was describing.

101
00:06:35,524 --> 00:06:38,465
It keeps the object sort of a certain fixed distance

102
00:06:38,465 --> 00:06:40,587
away from you and as you walk around it follows you around

103
00:06:40,587 --> 00:06:42,308
and if you turn your head the little thing will scoot

104
00:06:42,308 --> 00:06:44,189
and try to get into your vision so you can see it.

105
00:06:44,842 --> 00:06:47,562
You can apply this tag along script to any object.

106
00:06:47,562 --> 00:06:50,243
So, you know, let's say you're making a game and you,

107
00:06:50,243 --> 00:06:51,844
I don't know, you have like a little sidekick

108
00:06:51,844 --> 00:06:53,944
or familiar or something that floats around near you.

109
00:06:53,944 --> 00:06:56,405
You could use this tag along script for that.

110
00:06:56,405 --> 00:06:58,986
But in the case of an interface, you know,

111
00:06:58,986 --> 00:07:00,086
you want it to always face you

112
00:07:00,086 --> 00:07:01,286
so that you can access the buttons.

113
00:07:01,286 --> 00:07:04,087
So that's why I have that little billboard script there.

114
00:07:04,087 --> 00:07:05,307
So the interface always faces me.

115
00:07:05,307 --> 00:07:07,848
That's also part of the Hull toolkit.

116
00:07:09,695 --> 00:07:13,558
Once you have your little interface floating around, how do you select stuff in your

117
00:07:13,558 --> 00:07:17,960
interface? You have to use a cursor. And once again, it's kind of like making games with

118
00:07:17,960 --> 00:07:22,863
Legos these days, once again there's a cursor prefab in the holo toolkit, you can just drag

119
00:07:22,863 --> 00:07:26,466
that into your scene. There's a couple different versions of it. I took one of these and I

120
00:07:26,466 --> 00:07:30,868
customized it for my own uses, but they're pretty well rounded. You just drop that into

121
00:07:30,868 --> 00:07:37,452
your scene and then the way you have that cursor interact with the interface, whoops,

122
00:07:37,452 --> 00:07:37,953
let me go back one.

123
00:07:39,797 --> 00:07:42,721
is you use this HoloLens input module.

124
00:07:42,721 --> 00:07:44,302
Now, this is, you know, if you add a

125
00:07:44,302 --> 00:07:48,607
world space or you add any canvas to a Unity project.

126
00:07:49,146 --> 00:07:52,248
It will add an event system object which has the standard

127
00:07:52,248 --> 00:07:54,830
input module which pipes all the mouse input and stuff to your

128
00:07:54,830 --> 00:07:58,232
canvases. So what they've made is this HoloLens input module

129
00:07:58,232 --> 00:08:01,675
which basically routes all the cursor input through the

130
00:08:01,675 --> 00:08:04,537
interface so that when you're looking at a, like you saw in

131
00:08:04,537 --> 00:08:07,239
that video, the scan button gets highlighted because you're

132
00:08:07,239 --> 00:08:09,200
looking at it. This is all done through the HoloLens input

133
00:08:09,200 --> 00:08:12,522
module. So, so far, to build a HoloLens interface, I've had to

134
00:08:12,522 --> 00:08:15,524
write no code. It pretty much works with the existing Unity

135
00:08:15,524 --> 00:08:17,446
interface if you just follow these steps.

136
00:08:18,823 --> 00:08:21,644
but once, so now that you were able to look at and highlight

137
00:08:21,644 --> 00:08:24,466
the GUI, you have to like do stuff with it. So now we're

138
00:08:24,466 --> 00:08:28,168
going to talk about the gesture part. So this is the air tap.

139
00:08:29,201 --> 00:08:32,262
I mean, I don't know, if people have used HoloLens, you basically stick your hand out like

140
00:08:32,262 --> 00:08:37,324
this and you sort of tap your finger, like no knuckle. It's like a really hard gesture to do.

141
00:08:37,324 --> 00:08:40,985
Nobody knows how to do it. You know, when I do these demos, this is a picture of one of my

142
00:08:40,985 --> 00:08:44,066
demos, I have to spend like 15 minutes showing people how to do it, because nobody really,

143
00:08:44,066 --> 00:08:48,328
it's a really weird thing. I'm sure it's the easiest gesture to be able to detect in a

144
00:08:48,328 --> 00:08:52,249
self‑contained device, but it's kind of a tricky, unnatural thing. Once you get used to it,

145
00:08:52,249 --> 00:08:54,650
it's easy, but for people who never use it, it's a little tricky.

146
00:08:55,687 --> 00:09:00,729
this is the main interaction method for HoloLens. You keep

147
00:09:00,729 --> 00:09:02,950
your hands sort of in front of the camera and it's basically a

148
00:09:02,950 --> 00:09:05,431
mouse click. The air tap itself is just kind of like a mouse

149
00:09:05,431 --> 00:09:09,052
click. Which you would think doesn't give you a lot of

150
00:09:09,052 --> 00:09:12,453
interaction possibilities but inside that gesture you have

151
00:09:12,453 --> 00:09:14,914
sort of a bunch of different things you can do. So you've got

152
00:09:14,914 --> 00:09:16,555
the air tap which is basically a mouse click.

153
00:09:17,652 --> 00:09:20,933
but you have a couple different phases of this tap. So you have

154
00:09:20,933 --> 00:09:23,893
the ready position, your fingers pointed up like you're about to

155
00:09:23,893 --> 00:09:26,894
click, that's kind of the equivalent of a mouse over,

156
00:09:26,894 --> 00:09:31,215
almost like a hovering action. You have the hold, so you can

157
00:09:31,215 --> 00:09:34,075
click and like a mouse down event, you can just hold it. And

158
00:09:34,075 --> 00:09:38,296
then you have the drag. And so one of the tricky parts about

159
00:09:38,296 --> 00:09:41,077
teaching people to use HoloLens is when you immediately put it

160
00:09:41,077 --> 00:09:44,177
on, people start poking at the interface with their fingers.

161
00:09:44,774 --> 00:09:48,638
And the thing is, is that HoloLens doesn't know the absolute

162
00:09:48,638 --> 00:09:51,221
position of your finger in world space. So you can't actually

163
00:09:51,221 --> 00:09:53,604
touch anything with it. But it does know...

164
00:09:54,369 --> 00:09:57,471
the sort of delta between when you held your finger down and

165
00:09:57,471 --> 00:10:01,553
where you moved it. You can use that delta as a drag or scroll

166
00:10:01,553 --> 00:10:04,635
or even sort of like an air joystick type of thing where you

167
00:10:04,635 --> 00:10:08,317
can do a cross in the air and control an object. It's pretty

168
00:10:08,317 --> 00:10:10,358
easy to do. There's a thing called the gesture manager. It's

169
00:10:10,358 --> 00:10:14,900
another behavior. You just drag into your scene and you tell the

170
00:10:14,900 --> 00:10:17,682
gesture manager through the API which gestures you're looking

171
00:10:17,682 --> 00:10:19,943
for and then you just assign delegates to the gestures.

172
00:10:19,943 --> 00:10:22,384
Whenever it detects an air tap it will call your delegate. It's

173
00:10:22,384 --> 00:10:22,725
that easy.

174
00:10:24,738 --> 00:10:29,039
The final, well, the other input method is voice. Cortana is

175
00:10:29,039 --> 00:10:32,301
built into the hall lens. It's a fully self‑contained Windows

176
00:10:32,301 --> 00:10:35,642
10 PC that you wear on your face. You can navigate the

177
00:10:35,642 --> 00:10:37,443
whole interface with Cortana just like you can in Windows 10.

178
00:10:37,443 --> 00:10:41,964
But you can also use Cortana's voice recognition capabilities

179
00:10:41,964 --> 00:10:44,645
in your own app. So in my particular game, to start the

180
00:10:44,645 --> 00:10:48,867
game, you have to say the word play. I do that by using yet

181
00:10:48,867 --> 00:10:50,888
another easy‑to‑use script.

182
00:10:51,668 --> 00:10:54,411
in the hollow tool kit, the key word manager. You can see here

183
00:10:54,411 --> 00:10:57,774
there's an array of key words and responses. I only have one

184
00:10:57,774 --> 00:11:01,398
of them open, four voice commands that I'm using here.

185
00:11:01,398 --> 00:11:05,381
But the key word here is play. So you just type in the word

186
00:11:05,381 --> 00:11:08,444
you're looking for and I just drag an event or delegate to the

187
00:11:08,444 --> 00:11:10,947
response event here. So it's going to call this on play

188
00:11:10,947 --> 00:11:13,089
command when, you know, it's on play.

189
00:11:13,665 --> 00:11:18,628
it will call that play command to start the game. It's that easy. Of course this is an SDK.

190
00:11:18,628 --> 00:11:22,010
You can do this through code. If you want to, like, for localization, you want to switch to

191
00:11:22,010 --> 00:11:29,495
different languages and stuff, you can do that. But it's pretty simple. So next we'll talk

192
00:11:29,495 --> 00:11:30,696
about spatial mapping.

193
00:11:31,495 --> 00:11:35,476
The interface, that's cool, whatever. If you've made a VR game, you've pretty much probably

194
00:11:35,476 --> 00:11:40,337
built the same interface a million times. It's really nothing unique to mixed reality. But here

195
00:11:40,337 --> 00:11:45,499
we'll get into the capabilities of the HoloLens that make it a unique platform. So spatial

196
00:11:45,499 --> 00:11:51,300
mapping is the ability for the HoloLens to sort of build a 3D mesh out of the world you're in

197
00:11:51,300 --> 00:11:56,241
and track your position inside it. And this has a lot of implications for what kind of

198
00:11:56,241 --> 00:11:59,922
applications you can design. You can see here, here's an example of it.

199
00:12:02,056 --> 00:12:04,437
it will start making a mesh when I start triggering spatial

200
00:12:04,437 --> 00:12:08,158
mapping out of my office. The mesh itself, you know, it's

201
00:12:08,158 --> 00:12:11,560
cool. It's not super duper accurate but it's pretty fast

202
00:12:11,560 --> 00:12:15,802
how it builds it and it's very useful even though it might be

203
00:12:15,802 --> 00:12:19,023
considered a little rough. I might be cheating here a little

204
00:12:19,023 --> 00:12:21,704
bit because the HoloLens does cache the scan so if you're in

205
00:12:21,704 --> 00:12:25,125
the same room and you turn on the spatial mapping again it

206
00:12:25,125 --> 00:12:27,726
will kind of like load the previous scan and then

207
00:12:27,726 --> 00:12:31,048
progressively add to it. But it's still pretty fast.

208
00:12:31,773 --> 00:12:35,077
pretty easy to use. If you want to build a 3D mesh out of your

209
00:12:35,077 --> 00:12:37,661
environment, all you do is use yet another prefab, the spatial

210
00:12:37,661 --> 00:12:41,986
mapping prefab in the toolkit. You can see here that the

211
00:12:41,986 --> 00:12:45,992
special mapping observer is the behavior that starts building

212
00:12:45,992 --> 00:12:46,853
the mesh. So.

213
00:12:47,934 --> 00:12:51,056
You can govern the resolution of the mesh here, how many

214
00:12:51,056 --> 00:12:52,678
triangles per cubic meter and the size of the mesh, in this

215
00:12:52,678 --> 00:12:55,640
case one unit is one meter. So this is a 10 by 10 by 10 meter

216
00:12:55,640 --> 00:12:58,943
volume. And then the spatial mapping manager script is what

217
00:12:58,943 --> 00:13:04,628
governs the properties of the actual mesh that it generates.

218
00:13:04,628 --> 00:13:07,951
So in this case you can give it a physics layer, so if you want

219
00:13:07,951 --> 00:13:11,414
to do collision against it you can tell it what layer to use

220
00:13:11,414 --> 00:13:13,615
and you can apply material to it. So I'm using the wireframe

221
00:13:13,615 --> 00:13:15,877
material here, that's why you can see all the polygon edges.

222
00:13:16,558 --> 00:13:20,639
But in some cases you might want to not draw to the color buffer

223
00:13:20,639 --> 00:13:22,900
let's say, but only draw to the depth buffer. So you can use a

224
00:13:22,900 --> 00:13:24,940
different kind of material if you want to have, for instance,

225
00:13:24,940 --> 00:13:27,721
the real world occlude a virtual object, you can just draw this

226
00:13:27,721 --> 00:13:30,222
mesh to the depth buffer and then you can have, for instance,

227
00:13:30,222 --> 00:13:32,763
a virtual object go behind your bookcase or behind your door and

228
00:13:32,763 --> 00:13:36,564
it will be occluded by it. So as an example of what you can do

229
00:13:36,564 --> 00:13:40,405
with a spatial mesh, this is an example of me using it for

230
00:13:40,405 --> 00:13:40,945
collision.

231
00:13:41,829 --> 00:13:44,331
So you can see here, and this is also an example of the tap and

232
00:13:44,331 --> 00:13:47,935
drag, but this little drone here is going to hit my ceiling and

233
00:13:47,935 --> 00:13:50,497
you know, it's just a mesh collider. Boom, it just stops.

234
00:13:50,497 --> 00:13:54,460
It hits my ceiling. If I didn't draw the polygon edges, it would

235
00:13:54,460 --> 00:13:58,143
be a pretty convincing match for the real world geometry. When

236
00:13:58,143 --> 00:14:00,305
you start using this mesh for occlusion, it's not really

237
00:14:00,305 --> 00:14:03,208
accurate enough to really give you a convincing effect of

238
00:14:03,208 --> 00:14:06,170
characters walking behind stuff. But we'll get there at some

239
00:14:06,170 --> 00:14:07,392
point, you know. So...

240
00:14:08,517 --> 00:14:11,499
There's a lot of great possibilities of making a game

241
00:14:11,499 --> 00:14:14,260
that plays over your real world surface when you can build a

242
00:14:14,260 --> 00:14:18,443
mesh collider out of your environment. But that's cool,

243
00:14:18,443 --> 00:14:22,945
and it's largely cosmetic to a certain degree. You can make

244
00:14:22,945 --> 00:14:26,987
some interesting games and applications this way, but what

245
00:14:26,987 --> 00:14:29,509
you really want to know is you really want to know more about

246
00:14:29,509 --> 00:14:32,731
your environment and more about what is in the room. Because

247
00:14:32,731 --> 00:14:35,512
when you're making a game in mixed reality, you know,

248
00:14:36,877 --> 00:14:40,959
you want to know, especially if people can play the game in any arbitrary space, you're going to

249
00:14:40,959 --> 00:14:45,322
need to know where stuff is. I need to know where there's a chair or where there's a table or

250
00:14:45,322 --> 00:14:50,205
different things about my environment. I need to know where's a good empty space to put a game

251
00:14:50,205 --> 00:14:55,649
character or something like that. And so you can do that by analyzing the mesh that's

252
00:14:55,649 --> 00:15:01,393
generated by the spatial mapping system, but they've actually done a lot of the hard work for

253
00:15:01,393 --> 00:15:04,395
you by providing this spatial understanding module. So...

254
00:15:05,437 --> 00:15:09,499
I don't know if anybody's seen, there's a game called Fragments,

255
00:15:09,499 --> 00:15:11,240
which, there's like one point in the game,

256
00:15:11,240 --> 00:15:12,341
it's a HoloLens game, of course,

257
00:15:12,341 --> 00:15:15,783
this character just like walks into your room and sits on your couch and starts talking to you,

258
00:15:15,783 --> 00:15:17,965
and it's like the craziest thing I've ever seen.

259
00:15:17,965 --> 00:15:21,787
And, it turns out that the developer that built that game,

260
00:15:21,787 --> 00:15:24,029
I think it's called Asobo, I don't know how to pronounce the name,

261
00:15:24,029 --> 00:15:26,691
but they built this spatial understanding system,

262
00:15:26,691 --> 00:15:29,332
which basically creates a new kind of mesh, which...

263
00:15:30,233 --> 00:15:33,216
I guess generates a special mesh and turns it into a voxel

264
00:15:33,216 --> 00:15:36,078
volume and turns it into what I call surf holes and I'm sure

265
00:15:36,078 --> 00:15:39,081
it's made up for marketing purposes or whatever. But it's

266
00:15:39,081 --> 00:15:42,584
a thing. And using this new kind of data structure, they can

267
00:15:42,584 --> 00:15:45,486
analyze the space and you can query it to figure out where

268
00:15:45,486 --> 00:15:49,009
stuff is. So to sort of make that a little bit more

269
00:15:50,823 --> 00:15:54,444
example of that. So here is a real simple case. I'm doing a

270
00:15:54,444 --> 00:15:57,546
simple trace through the voxel volume and it's telling me this

271
00:15:57,546 --> 00:16:01,728
is a wall. I did this with the spatial mesh anyway. You check

272
00:16:01,728 --> 00:16:03,608
the normal of what comes back and you can pretty much

273
00:16:03,608 --> 00:16:07,510
determine you've got a wall. And that's cool. But you can see

274
00:16:07,510 --> 00:16:10,772
here it's like here is a wall, here is a floor. But now look at

275
00:16:10,772 --> 00:16:13,973
this. I'm going to say, hey, let me find a chair. So I tap the

276
00:16:13,973 --> 00:16:18,435
chair and this little blue thing flies down and there it goes. I

277
00:16:18,435 --> 00:16:19,055
found my chair.

278
00:16:20,351 --> 00:16:26,775
which seems to me, to the untrained eye, seems kind of magical. But if you look at how they

279
00:16:26,775 --> 00:16:30,518
well, I mean, internally it's kind of a black box. I don't think the source code to this is

280
00:16:30,518 --> 00:16:33,720
actually provided. I could be wrong. I haven't looked at the native SDK too much.

281
00:16:34,667 --> 00:16:37,750
But the way you query this system is sort of you have to

282
00:16:37,750 --> 00:16:39,952
kind of like create a heuristic. You kind of have to

283
00:16:39,952 --> 00:16:43,115
say hey, I'm looking for something where the back is

284
00:16:43,115 --> 00:16:47,900
twice as tall as the bottom part and the bottom part faces up and

285
00:16:47,900 --> 00:16:50,622
that's what I'm going to call a chair and I'm going to search

286
00:16:50,622 --> 00:16:54,886
your data for that chair. So you can define objects in all kinds

287
00:16:54,886 --> 00:16:57,329
of different ways and then it will go try to find the closest

288
00:16:57,329 --> 00:16:59,791
matches to them and bring back all the results. You can also

289
00:17:00,864 --> 00:17:05,730
more details here. You can also say I'm looking for a safe space. I'm looking for an empty

290
00:17:05,730 --> 00:17:10,816
space this big so I can fit my game character and I need it close to a wall. You can give it

291
00:17:10,816 --> 00:17:15,481
all these kind of queries and it will come back and return to you data that tells you where to

292
00:17:15,481 --> 00:17:19,486
put stuff if there are places or where these objects are if there are matches.

293
00:17:19,847 --> 00:17:24,814
So, yeah, it's pretty incredible. It's not super duper

294
00:17:24,814 --> 00:17:27,638
performance. These are the type of things you need to do before

295
00:17:27,638 --> 00:17:30,963
you play the game. Even with spatial mapping. I basically

296
00:17:30,963 --> 00:17:34,347
scan first and then play. But you can cache all the locations

297
00:17:34,347 --> 00:17:35,389
and stuff and use them later.

298
00:17:36,963 --> 00:17:40,525
So the next thing we need to talk about is persistence.

299
00:17:40,525 --> 00:17:44,166
So in a regular game, you're just kind of like,

300
00:17:44,166 --> 00:17:45,927
I can drop, in Skyrim, I can drop my sword

301
00:17:45,927 --> 00:17:48,248
at the XYZ coordinate, you know, one, two, three,

302
00:17:48,248 --> 00:17:51,409
and then I load up Skyrim next week and it's still there.

303
00:17:51,409 --> 00:17:52,270
You know, big deal, right?

304
00:17:52,270 --> 00:17:54,351
Games all just use a coordinate system.

305
00:17:54,351 --> 00:17:55,971
But in the case of the real world,

306
00:17:55,971 --> 00:17:57,992
what is the game coordinate system of the real world?

307
00:17:58,332 --> 00:18:02,375
you know, when you turn on your HoloLens, you're at 000 of your game world, wherever you're

308
00:18:02,375 --> 00:18:06,979
standing. Or, you know, when you, let's say, when you start scanning a mesh of a new room that

309
00:18:06,979 --> 00:18:11,242
you've never been in before, you're now at the origin of your own coordinate system. So you

310
00:18:11,242 --> 00:18:14,984
have to be able to place objects in the real world and have them stay there. So what is the

311
00:18:14,984 --> 00:18:18,727
coordinate system of this table? And how do you tell another HoloLens where this object is in the

312
00:18:18,727 --> 00:18:22,950
real world when they both have completely different coordinate systems internally? Well, the key to

313
00:18:22,950 --> 00:18:24,691
that is the spatial anchor system.

314
00:18:25,653 --> 00:18:29,700
So what they do with this is, it's kind of weird, it's like,

315
00:18:29,700 --> 00:18:32,684
you can create coordinate systems inside the real world.

316
00:18:32,684 --> 00:18:35,669
Basically, you add the spatial anchor behavior to a script,

317
00:18:35,669 --> 00:18:37,813
and what ends up happening is it anchors that game object

318
00:18:37,813 --> 00:18:40,096
to like a chunk of the room scan.

319
00:18:41,696 --> 00:18:44,397
and then the room scan itself gets refined over time. So you

320
00:18:44,397 --> 00:18:46,819
might see those spatial anchors sort of like slightly move as

321
00:18:46,819 --> 00:18:50,581
you keep playing the game. But basically you can attach

322
00:18:50,581 --> 00:18:53,663
objects to that parent object that has a spatial anchor

323
00:18:53,663 --> 00:18:57,005
attached to it and now that object is anchored to this chunk

324
00:18:57,005 --> 00:18:59,306
of the room scan in the real world. When you turn on the

325
00:18:59,306 --> 00:19:01,907
device again you can use the spatial anchor store to load and

326
00:19:01,907 --> 00:19:02,608
save these things.

327
00:19:03,088 --> 00:19:05,929
it will load up the spatial anchors and try to find that

328
00:19:05,929 --> 00:19:08,651
chunk of the scan again and place that object there again.

329
00:19:08,651 --> 00:19:10,992
So you're basically sort of saving a little chunk of the

330
00:19:10,992 --> 00:19:12,893
real world with your virtual object and then it's going to

331
00:19:12,893 --> 00:19:19,157
place it there again. Also, this is how you do multiplayer

332
00:19:19,157 --> 00:19:22,398
experiences. What they call shared holograms. So it comes in

333
00:19:22,398 --> 00:19:23,319
handy because

334
00:19:24,332 --> 00:19:30,679
For instance, there's this JPL experience where it's like a Mars experience thing where you

335
00:19:30,679 --> 00:19:33,963
all can walk around this room and sort of explore Mars together. Everybody is in a room

336
00:19:33,963 --> 00:19:39,129
wearing a hololens and they're all seeing a quote unquote hologram in the same position. Every

337
00:19:39,129 --> 00:19:41,392
hololens can see the same shared hologram.

338
00:19:42,153 --> 00:19:45,594
And the way they do that is there's a sharing service that comes with the HoloToolkit,

339
00:19:45,594 --> 00:19:47,735
which is kind of like a regular game server written in C++.

340
00:19:47,735 --> 00:19:51,816
And what that does is it just sends those spatial anchors over a network,

341
00:19:51,816 --> 00:19:53,797
because it's just a chunk of data.

342
00:19:53,797 --> 00:19:57,558
So, if I spawn an object at this location,

343
00:19:57,916 --> 00:19:59,638
then I create a spatial anchor there and I can send that

344
00:19:59,638 --> 00:20:02,441
spatial anchor over the network and the game server will send it

345
00:20:02,441 --> 00:20:05,004
to all the attached hall lenses and all the other hall lenses

346
00:20:05,004 --> 00:20:07,688
will be looking through their room scan and be like I know

347
00:20:07,688 --> 00:20:10,331
that, I see that chunk of table, I can match that and they put

348
00:20:10,331 --> 00:20:13,234
the spatial anchor there. So that's how you can have a

349
00:20:13,234 --> 00:20:14,896
multiplayer experience where everybody shares.

350
00:20:15,437 --> 00:20:20,479
the same hologram. In theory. I've done this a bunch of times and sometimes it works,

351
00:20:20,479 --> 00:20:23,441
sometimes it doesn't. I think sometimes it depends on if the room is scannable and

352
00:20:23,441 --> 00:20:28,043
trackable enough or whatever. I've seen the spatial anchors appear two feet off from

353
00:20:28,043 --> 00:20:33,186
where they are on the other device. It doesn't work all the time. But, yeah, essentially it's

354
00:20:33,186 --> 00:20:36,168
just sharing data over a network. It's not a big deal.

355
00:20:37,505 --> 00:20:41,508
Finally, building and deploying on the device. You build on the device, you used to have to

356
00:20:41,508 --> 00:20:44,911
build a visual studio project, which you kind of still have to do behind the scenes, then build

357
00:20:44,911 --> 00:20:49,075
inside visual studio and copy that to your HoloLens. They now have a script in the Holo

358
00:20:49,075 --> 00:20:55,061
toolkit that does that with one button. But once you get on the device, you're going to come

359
00:20:55,061 --> 00:20:57,423
into, you're going to encounter the limitations of the hardware.

360
00:20:58,370 --> 00:21:03,313
which there are several. FOV is the one everybody talks about.

361
00:21:03,313 --> 00:21:05,614
It displays an object sort of like a postcard sized

362
00:21:05,614 --> 00:21:08,977
augmentation in front of your vision. But that means you have

363
00:21:08,977 --> 00:21:12,299
to redesign your application a little bit. If you have no

364
00:21:12,299 --> 00:21:15,080
peripheral vision, a game where someone has to walk around and

365
00:21:15,080 --> 00:21:17,522
look for stuff is going to be problematic. You might want to

366
00:21:17,522 --> 00:21:20,844
have floating arrows that guide the user where to look. In fact,

367
00:21:21,785 --> 00:21:24,527
In holo tool kit there are some prefabs that do just that.

368
00:21:24,527 --> 00:21:28,611
They're like guidance tag alongs. They kind of point at

369
00:21:28,611 --> 00:21:31,433
stuff and tell the user, hey, you should look over here. Also

370
00:21:31,433 --> 00:21:34,476
you're going to run into battery life, CPU, GPU limitations. If

371
00:21:34,476 --> 00:21:36,418
you've developed for gear VR you're probably in a good

372
00:21:36,418 --> 00:21:41,362
position because it's a mobile device. Microsoft recommends

373
00:21:41,678 --> 00:21:45,082
you know, like under 100,000 polygons per scene, which is a

374
00:21:45,082 --> 00:21:47,764
lot of polygons when you're not drawing a background. So it's

375
00:21:47,764 --> 00:21:50,106
pretty good. The performance is pretty good. Battery life, you

376
00:21:50,106 --> 00:21:53,750
know, you might get about two hours of constant use on one

377
00:21:53,750 --> 00:21:57,113
charge, which is also pretty good. And also there's control

378
00:21:57,113 --> 00:21:59,475
constraints. So, you know, using air tap can be kind of

379
00:21:59,475 --> 00:22:03,299
constricting. If you find that to be a problem, you can use an

380
00:22:03,299 --> 00:22:04,079
Xbox One S controller with it. So...

381
00:22:05,482 --> 00:22:08,343
I'll leave you with this. It's called mixed reality for a

382
00:22:08,343 --> 00:22:12,386
reason. When you're planning your HoloLens content, I see a

383
00:22:12,386 --> 00:22:15,187
lot of games in the app store that are VR games that float in

384
00:22:15,187 --> 00:22:18,589
front of your face which is a cool parlor trick but it doesn't

385
00:22:18,589 --> 00:22:21,651
do anything you can't do in VR or any other type of platform

386
00:22:21,651 --> 00:22:22,031
like that.

387
00:22:22,632 --> 00:22:25,134
With mixed reality you can use the floors, you can use the

388
00:22:25,134 --> 00:22:27,255
ceilings, you can make persistent objects appear in

389
00:22:27,255 --> 00:22:31,118
reality. It makes it kind of a pain to debug because instead

390
00:22:31,118 --> 00:22:33,680
of just moving your game character to a level and seeing

391
00:22:33,680 --> 00:22:36,022
if it crashes you have to walk to someplace in the real world

392
00:22:36,022 --> 00:22:38,203
and test it. It makes it a little bit more annoying to

393
00:22:38,203 --> 00:22:41,706
develop that way. But that's the unique property of this

394
00:22:41,706 --> 00:22:44,668
platform. Mixed reality I think is going to be as disruptive to

395
00:22:44,668 --> 00:22:47,910
software as the app was 10 years ago. We're just getting started.

396
00:22:47,910 --> 00:22:51,453
So when you start developing for HoloLens you really need to use

397
00:22:51,453 --> 00:22:51,773
those.

398
00:22:52,354 --> 00:22:55,936
those unique abilities to really understand your environment to make a compelling experience. So

399
00:22:55,936 --> 00:23:02,700
I think we have some time for Q&A, but if you want to contact me later, you can contact me on my

400
00:23:02,700 --> 00:23:07,723
website, on Twitter, whatever. I'm pretty accessible. I'm on LinkedIn. Any way you want to

401
00:23:07,723 --> 00:23:12,887
contact me, you can figure it out. But, yeah, if anybody has any questions, feel free. Or not.

402
00:23:26,515 --> 00:23:30,920
Okay. There's a microphone. Sure. So the shared mixed

403
00:23:30,920 --> 00:23:34,823
holograms. Shared mixed realities? Yeah, whatever. So

404
00:23:34,823 --> 00:23:39,989
then with the holo tool kit it's done through a PC server, is

405
00:23:39,989 --> 00:23:40,489
that correct?

406
00:23:40,589 --> 00:23:43,391
Yeah, which is kind of annoying. You can rewrite it. I haven't

407
00:23:43,391 --> 00:23:45,993
done it yet but you can use UNet because it's just sending data.

408
00:23:45,993 --> 00:23:48,676
They just don't have an example of it. Because it's weird, the

409
00:23:48,676 --> 00:23:51,938
hall toolkit sharing example is a complete game server that does

410
00:23:51,938 --> 00:23:54,260
everything UNet does. It seems like they did a lot of work

411
00:23:54,260 --> 00:23:57,543
that they didn't need to do. That's lobbies and message

412
00:23:57,543 --> 00:23:59,925
passing and stuff. But yeah, you can just use UNet because it's

413
00:23:59,925 --> 00:24:01,586
just sending data. Sure. What were the major challenges for

414
00:24:01,586 --> 00:24:02,607
you and what's next based on the learnings that you've had?

415
00:24:11,186 --> 00:24:14,688
debugging, like I said, having to walk around my office to

416
00:24:14,688 --> 00:24:19,672
debug is a real pain. It just makes the development time a lot

417
00:24:19,672 --> 00:24:23,355
longer. The build test debug loop is so much longer than VR.

418
00:24:23,355 --> 00:24:27,398
And also you don't know if it's going to work. I have to go give

419
00:24:27,398 --> 00:24:29,479
a demo somewhere. I don't know if it's going to work in their

420
00:24:29,479 --> 00:24:31,681
office. My game needs to use the ceiling. I've gone to have

421
00:24:31,681 --> 00:24:34,363
meetings. Oh, my God, there's no ceiling in this room. It's too

422
00:24:34,363 --> 00:24:34,723
far up.

423
00:24:35,304 --> 00:24:39,229
So you really have to test in a lot of different physical environments.

424
00:24:39,229 --> 00:24:47,739
So it's almost not a programming challenge, it's more like a practical challenge of how to debug something that can be played in any arbitrary space, basically.

425
00:24:47,739 --> 00:24:49,822
I would say that's the biggest challenge.

426
00:24:52,372 --> 00:24:58,019
Hi. Back to shared experiences. Would you say, you showed an example of more the

427
00:24:58,019 --> 00:25:04,066
educational aspect. Is it a little too early since the anchors are way off to go about with

428
00:25:04,066 --> 00:25:07,430
doing a game? Or would you recommend waiting until maybe?

429
00:25:08,427 --> 00:25:12,430
I never recommend waiting for any reason. I always like to do

430
00:25:12,430 --> 00:25:15,853
something first. Sure, go ahead. I'm planning it with my game. I

431
00:25:15,853 --> 00:25:18,755
just haven't gotten to that point yet. I'm going to design

432
00:25:18,755 --> 00:25:22,118
the game around the anchors. Originally this game I was

433
00:25:22,118 --> 00:25:24,781
working on for project tango. That one has a single coordinate

434
00:25:24,781 --> 00:25:28,183
space for all the devices when they all sync up. You can create

435
00:25:28,183 --> 00:25:30,305
objects and they theoretically would appear where they're

436
00:25:30,305 --> 00:25:32,707
supposed to. This one is a little different because you

437
00:25:32,707 --> 00:25:34,809
have to have them with the spatial anchors. You have to be

438
00:25:34,809 --> 00:25:36,991
a little different. What you can do is you can do things like

439
00:25:37,431 --> 00:25:41,112
I'm going to launch this ship from here to here. I'm going to

440
00:25:41,112 --> 00:25:43,833
spawn it at the spatial anchor but release it from the spatial

441
00:25:43,833 --> 00:25:46,794
anchor and it goes through normal space and attach it to

442
00:25:46,794 --> 00:25:49,774
the spatial anchor when it arrives. You have to play with

443
00:25:49,774 --> 00:25:51,855
it a little bit. Whether the spatial anchors are accurate

444
00:25:51,855 --> 00:25:56,396
enough is a whole different issue. That's just going to be

445
00:25:56,396 --> 00:25:58,417
a factor of testing and making sure you play in the right

446
00:25:58,417 --> 00:26:00,337
space. At some point with mixed reality you have to tell the

447
00:26:00,337 --> 00:26:03,338
player you need to turn on some lights or whatever. They're not

448
00:26:03,338 --> 00:26:04,718
going to have a trackable space.

449
00:26:06,673 --> 00:26:09,996
So this is regarding the shared user space.

450
00:26:09,996 --> 00:26:13,179
Do you get a registered player position

451
00:26:13,179 --> 00:26:14,841
for all the players who are there?

452
00:26:14,841 --> 00:26:16,903
Let's suppose there are 10 people who are on the Mars.

453
00:26:16,903 --> 00:26:19,205
So they actually know where they're located?

454
00:26:19,205 --> 00:26:22,608
Yeah, in the example, I think it's

455
00:26:22,608 --> 00:26:24,870
the final example in Holo Academy.

456
00:26:24,870 --> 00:26:26,832
They show that where they actually have,

457
00:26:26,832 --> 00:26:30,095
on the other players, they put a little avatar head

458
00:26:30,095 --> 00:26:31,316
over the other Holo lenses.

459
00:26:31,957 --> 00:26:36,103
So I think that base, it's been a while since I looked at it.

460
00:26:36,103 --> 00:26:39,768
I think that whenever a player I think joins the session, they

461
00:26:39,768 --> 00:26:42,492
create a spatial anchor of themselves and then they kind

462
00:26:42,492 --> 00:26:45,316
of update their position through the server. And it's kind of

463
00:26:45,316 --> 00:26:47,620
accurate. It works a lot better than I thought it would work. So

464
00:26:47,620 --> 00:26:48,260
it kind of works.

465
00:26:51,172 --> 00:26:57,757
Rolf, talking about waiting, we are, I'm on the investor side of things, we have a fund

466
00:26:57,757 --> 00:27:01,220
that specializes on augmented and virtual reality.

467
00:27:01,220 --> 00:27:06,423
One of the challenges that we're finding is to convince people, LPs or people that are

468
00:27:06,423 --> 00:27:09,906
willing to put money on this kind of future technologies.

469
00:27:10,226 --> 00:27:17,612
that we're not like 10 or 15 years away from this. They are very, not skeptical because they

470
00:27:17,612 --> 00:27:22,516
are excited about what is going on, but they think that these kind of things are like in 10

471
00:27:22,516 --> 00:27:29,822
years. I know that HoloLens is not very public about timing and triangle. In my opinion it has

472
00:27:29,822 --> 00:27:32,164
been slower than other, than should.

473
00:27:32,754 --> 00:27:37,895
But what are your thoughts in, one, monetization opportunities for these kind of opportunities,

474
00:27:37,895 --> 00:27:44,117
specifically around games, but in all the industries? And number two, any thoughts or

475
00:27:44,117 --> 00:27:52,299
recommendations about, you know, educate these people? Well, I mean, I just don't try to waste

476
00:27:52,299 --> 00:27:55,280
time educating investors because it's pointless. I mean, like...

477
00:27:56,167 --> 00:28:00,772
I agree. I mean honestly do you want to spend your life having meetings with these people? I

478
00:28:00,772 --> 00:28:04,697
don't. I'd rather hang out with developers who are smart and know how to do things and we can

479
00:28:04,697 --> 00:28:10,563
make stuff and I'll leave going to lunch with the investors. It's somebody else's job.

480
00:28:12,266 --> 00:28:17,852
I don't have any answers to that question because I think it's impossible. It actually might be

481
00:28:17,852 --> 00:28:23,077
ten years. Whatever this is might be ten years away. As far as a consumer device, maybe. But

482
00:28:23,077 --> 00:28:28,163
right now two thirds of my business is enterprise. I've had a lot of interest in warehouse

483
00:28:28,163 --> 00:28:29,164
logistics.

484
00:28:29,704 --> 00:28:32,466
construction, building information, modeling,

485
00:28:32,466 --> 00:28:33,387
visualization.

486
00:28:33,387 --> 00:28:36,930
It's, but we're still, I mean, I kind of feel weird

487
00:28:36,930 --> 00:28:39,672
telling people that, yeah, I can deploy this now,

488
00:28:39,672 --> 00:28:41,653
because there's still a lot of variables with the device.

489
00:28:41,653 --> 00:28:46,136
I think right now you can build the application,

490
00:28:46,136 --> 00:28:47,898
but you might not be able to launch it

491
00:28:47,898 --> 00:28:50,920
in a real battle-tested enterprise environment

492
00:28:50,920 --> 00:28:52,421
at this moment.

493
00:28:52,421 --> 00:28:53,622
But you might be able to do that next year.

494
00:28:53,622 --> 00:28:54,583
So enterprise maybe,

495
00:28:56,007 --> 00:28:59,631
three-ish years away or something. Consumer, I don't

496
00:28:59,631 --> 00:29:02,254
know. I do think at some point every device on the planet is

497
00:29:02,254 --> 00:29:04,716
going to have some sort of dual camera slam solution in it and

498
00:29:04,716 --> 00:29:08,721
people will be like, of course it's obvious. But when that

499
00:29:08,721 --> 00:29:12,144
point is, I don't really know. I just think that

500
00:29:12,645 --> 00:29:15,566
you know, but what has happened to me is I've had clients, real

501
00:29:15,566 --> 00:29:18,387
giant clients come up to me, huge shipping companies, we want

502
00:29:18,387 --> 00:29:20,188
to use this technology now because we have an actual

503
00:29:20,188 --> 00:29:23,129
problem to solve and we think you can do it with this tech and

504
00:29:23,129 --> 00:29:26,890
we're willing to suffer through all of the beta problems of

505
00:29:26,890 --> 00:29:29,912
small flv and stuff like that to get a job done. So I think that's

506
00:29:29,912 --> 00:29:33,913
where the money is now. It's not a huge market but there are a

507
00:29:33,913 --> 00:29:37,354
bunch of big clients that really need problems to be solved and

508
00:29:37,354 --> 00:29:40,256
they can only solve them with this tech. So I guess that's,

509
00:29:40,256 --> 00:29:40,456
yeah.

510
00:29:41,116 --> 00:29:51,659
That's probably what I would say about that. Sure. All right. I'll be around. So, you know.

