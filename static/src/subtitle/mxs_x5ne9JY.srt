1
00:00:04,737 --> 00:00:11,622
testing. Right on. Cool. So yeah, welcome to my presentation. My name is Matt Dole. I'm a

2
00:00:11,622 --> 00:00:17,286
tech art director on Frostbite at Electronic Arts. And the presentation here is called

3
00:00:17,286 --> 00:00:26,113
Implementing a Scripting Solution for Your Editor. All right. So that we know what we're

4
00:00:26,113 --> 00:00:33,038
talking about when we talk about scripting. We're talking about these types of scripting

5
00:00:33,038 --> 00:00:34,559
and these customizable tools. So.

6
00:00:35,328 --> 00:00:38,991
To get a feeling for the audience here,

7
00:00:38,991 --> 00:00:42,855
who here has not written any scripting or code whatsoever?

8
00:00:42,855 --> 00:00:44,317
Show of hands, who's not written

9
00:00:44,317 --> 00:00:47,139
any scripting or code whatsoever?

10
00:00:47,139 --> 00:00:50,343
So, that's really cool.

11
00:00:50,343 --> 00:00:54,467
I've given presentations where there's a lot of artists

12
00:00:54,467 --> 00:00:58,150
or designers or people that are new to this, but...

13
00:00:58,620 --> 00:01:01,461
being exposed to it, realize that it's not limited

14
00:01:01,461 --> 00:01:03,082
only to tech artists and engineers,

15
00:01:03,082 --> 00:01:05,343
it's something that a much broader audience

16
00:01:05,343 --> 00:01:07,023
can actually utilize.

17
00:01:07,023 --> 00:01:08,664
So if you're familiar with Maya,

18
00:01:08,664 --> 00:01:12,385
obviously they've got Maya embedded language,

19
00:01:12,385 --> 00:01:15,507
mouse scripting, they also have Python.

20
00:01:15,507 --> 00:01:19,728
We have the, I guess, previous Softimage

21
00:01:19,728 --> 00:01:22,109
had Python and many other scripting languages.

22
00:01:22,109 --> 00:01:27,051
3D Studio Max has MaxScript, Photoshop has JavaScript.

23
00:01:27,581 --> 00:01:29,142
And then when I'm talking about Unity,

24
00:01:29,142 --> 00:01:31,903
I'm talking about the Unity editor specifically,

25
00:01:31,903 --> 00:01:33,243
and being able to customize that.

26
00:01:33,243 --> 00:01:36,525
So all of this should kind of start to paint a picture

27
00:01:36,525 --> 00:01:39,586
of where we're going with this presentation,

28
00:01:39,586 --> 00:01:42,787
is about the editor that you use to create content,

29
00:01:42,787 --> 00:01:45,128
and the scripting functionality that you can use

30
00:01:45,128 --> 00:01:49,650
in those editors, for both automation and customizing that.

31
00:01:49,650 --> 00:01:51,151
So let's look at...

32
00:01:53,189 --> 00:01:56,450
What we did with Frostbite and creating something called FBScript,

33
00:01:56,450 --> 00:02:00,372
obviously FB could most likely stand for Frostbite,

34
00:02:00,372 --> 00:02:06,515
the idea that scripting empowers game developers

35
00:02:06,515 --> 00:02:09,296
is something I obviously believe in,

36
00:02:09,296 --> 00:02:11,497
and it does this by providing a framework

37
00:02:11,497 --> 00:02:14,298
for customizing the existing solution

38
00:02:14,298 --> 00:02:16,939
to meet any needs that might emerge during production.

39
00:02:16,939 --> 00:02:19,460
You don't always know what you're getting into at the start, right?

40
00:02:21,927 --> 00:02:23,968
But obviously that isn't in a vacuum, it isn't in a bubble.

41
00:02:23,968 --> 00:02:26,910
It has to be built on a foundation of something

42
00:02:26,910 --> 00:02:29,892
that exists before that.

43
00:02:29,892 --> 00:02:33,755
So we're familiar with the adage that success starts

44
00:02:33,755 --> 00:02:35,096
with standing on the shoulders of giants,

45
00:02:35,096 --> 00:02:36,637
and that's no different here.

46
00:02:36,637 --> 00:02:38,938
So there's a few really cool technologies

47
00:02:38,938 --> 00:02:41,039
that this is built on.

48
00:02:41,039 --> 00:02:43,541
Avalon Edit, which I'll go into a little bit of detail on

49
00:02:43,541 --> 00:02:46,743
as well as Iron Python, all stacks on top

50
00:02:46,743 --> 00:02:49,945
of this Frostbite platform.

51
00:02:49,945 --> 00:02:51,526
A key thing to point out here though.

52
00:02:52,025 --> 00:02:56,646
is that this is all going down into the domain of .NET applications.

53
00:02:56,646 --> 00:03:02,047
And so, I know that's a very common domain, but it is an important thing to point out

54
00:03:02,047 --> 00:03:07,388
that it's a lot of the details that I'll be going over do have that requirement.

55
00:03:07,388 --> 00:03:12,549
And then the largest requirement, the most important thing about all of this, isn't really

56
00:03:12,549 --> 00:03:15,950
just about creating some script editor where you can write some lines of text and have

57
00:03:15,950 --> 00:03:18,590
it execute and do something.

58
00:03:19,594 --> 00:03:22,495
The really key thing is how this is actually used in production.

59
00:03:22,495 --> 00:03:27,998
The game teams that use this effectively, and not only using it effectively, but then

60
00:03:27,998 --> 00:03:30,258
sharing it across a community.

61
00:03:30,258 --> 00:03:32,299
So that is also very key.

62
00:03:32,299 --> 00:03:37,521
So as I go through a lot of the implementation details, it will keep a lot of this in mind.

63
00:03:37,521 --> 00:03:43,044
So we'll look at not only building up a scripting editor, that scripting API, the language,

64
00:03:43,044 --> 00:03:43,964
all of that kind of stuff.

65
00:03:44,733 --> 00:03:46,794
the technology that it interfaces,

66
00:03:46,794 --> 00:03:49,496
but then as well as how it actually gets used in production

67
00:03:49,496 --> 00:03:51,417
and how to facilitate all of that.

68
00:03:51,417 --> 00:03:52,878
Cool, so for those of you that don't know what Frostbite is,

69
00:03:52,878 --> 00:03:58,782
it's not the easiest Google search.

70
00:03:58,782 --> 00:04:05,646
Execute with caution, avoid images.

71
00:04:05,646 --> 00:04:08,888
The shattered hand should give you some kind of indication

72
00:04:08,888 --> 00:04:09,829
of what you might be in for.

73
00:04:11,354 --> 00:04:19,563
In terms of the name of our technology, this stuff originates from Sweden, which is, I know, half a year in darkness and cold, so...

74
00:04:19,563 --> 00:04:23,828
Comes from an inspired place, but in terms of creating games,

75
00:04:23,828 --> 00:04:31,858
the vision of all of this is empowering the game creators to create the future of gaming. So that's something that we're striving towards.

76
00:04:32,422 --> 00:04:33,942
Although we never feel like we're there,

77
00:04:33,942 --> 00:04:36,803
where we've achieved the very best technology

78
00:04:36,803 --> 00:04:37,863
or the very best editors,

79
00:04:37,863 --> 00:04:39,623
that's always what we're aiming towards.

80
00:04:39,623 --> 00:04:41,284
And if you look at the game teams

81
00:04:41,284 --> 00:04:43,424
that are using this technology in shipping games,

82
00:04:43,424 --> 00:04:46,265
I believe it's being used to great success.

83
00:04:46,265 --> 00:04:49,226
So if we look at how scripting has been used

84
00:04:49,226 --> 00:04:50,566
in all of these different editors,

85
00:04:50,566 --> 00:04:53,067
we've got Battlefield here,

86
00:04:53,067 --> 00:04:54,887
which is a first-person shooter.

87
00:04:54,887 --> 00:04:57,788
We've got racing, sports, stylized games

88
00:04:57,788 --> 00:05:00,929
such as Garden Warfare and Dragon Age Inquisition.

89
00:05:00,929 --> 00:05:02,149
And here's just a little video.

90
00:05:02,924 --> 00:05:07,868
to give a flavor of that diversity.

91
00:05:07,868 --> 00:05:15,355
So Frostbite was originally created for Battlefield.

92
00:05:15,355 --> 00:05:17,817
And then the next game that used Frostbite

93
00:05:17,817 --> 00:05:21,000
outside of Battlefield, outside of Dice, was Need for Speed.

94
00:05:21,000 --> 00:05:26,385
And we're seeing it also being used in sports titles now.

95
00:05:30,022 --> 00:05:32,684
And this game was really fun to work on and to play,

96
00:05:32,684 --> 00:05:35,025
and it just kind of breaks the mold in terms of

97
00:05:35,025 --> 00:05:38,347
what to expect from the typical fare of Griddy and Rail.

98
00:05:38,347 --> 00:05:43,749
And then we've got, at least on many charts out there,

99
00:05:43,749 --> 00:05:46,891
Game of the Year, not all of them,

100
00:05:46,891 --> 00:05:50,893
but it's still a proud accomplishment there

101
00:05:50,893 --> 00:05:51,914
to be in that league there.

102
00:05:51,914 --> 00:05:56,476
Cool, so this is how scripting was used in these.

103
00:05:57,579 --> 00:06:02,841
different games here. We've got Battlefield using it for data inspection and optimizations.

104
00:06:02,841 --> 00:06:09,623
We've got Need for Speed using it for a number of things, but Out of the Gates, it was used

105
00:06:09,623 --> 00:06:14,245
heavily for stress testing the editor limitations, and we'll look at what that actually means

106
00:06:14,245 --> 00:06:18,226
in just a moment. Sports have been using it for batch asset conversion and a whole bunch

107
00:06:18,226 --> 00:06:24,088
of other things. On Garden Warfare, which I'll look at later in a bit more detail, it

108
00:06:24,088 --> 00:06:24,988
was used...

109
00:06:25,336 --> 00:06:29,137
to automate the setup of thousands of different assets

110
00:06:29,137 --> 00:06:32,059
earlier on in production, with enough time

111
00:06:32,059 --> 00:06:34,800
to actually test gameplay ramifications.

112
00:06:34,800 --> 00:06:37,161
And then, as well on Dragon Age,

113
00:06:37,161 --> 00:06:40,082
an absolutely monstrous game,

114
00:06:40,082 --> 00:06:42,623
the largest game I've ever seen in production,

115
00:06:42,623 --> 00:06:44,864
and of very high quality, too.

116
00:06:44,864 --> 00:06:47,705
So, to actually dig through all of that data

117
00:06:47,705 --> 00:06:50,366
that gets generated by so many people

118
00:06:50,366 --> 00:06:52,226
actually contributing to create that,

119
00:06:53,340 --> 00:06:57,804
definitely we leveraged scripting to do a lot of testing and optimizations on that project.

120
00:06:57,804 --> 00:06:59,285
So as I mentioned, Frostbite was originally used

121
00:06:59,285 --> 00:07:01,807
to create the original Battlefield

122
00:07:01,807 --> 00:07:08,713
franchise games and then subsequent versions of Battlefield later.

123
00:07:08,713 --> 00:07:11,515
That team was DICE and DICE created

124
00:07:11,515 --> 00:07:21,283
Battlefield and also created these tools and technology called Frostbite.

125
00:07:22,859 --> 00:07:25,400
They had a solution that worked really well for them,

126
00:07:25,400 --> 00:07:26,640
and if they needed to extend it

127
00:07:26,640 --> 00:07:28,281
or add functionality or anything,

128
00:07:28,281 --> 00:07:31,041
they were very well-versed in that environment.

129
00:07:31,041 --> 00:07:35,543
The editor that was being used inside of Frostbyte

130
00:07:35,543 --> 00:07:36,403
is called Frosted.

131
00:07:36,403 --> 00:07:38,704
I guess if you say it fast, it sounds frosted.

132
00:07:38,704 --> 00:07:44,365
The key distinction here, though, is that...

133
00:07:44,898 --> 00:07:46,339
When you have a team like this,

134
00:07:46,339 --> 00:07:49,181
I mean, you're gonna find scripting's gonna be useful anyways,

135
00:07:49,181 --> 00:07:51,463
but they didn't find as much of a need out of the gates

136
00:07:51,463 --> 00:07:52,965
because they're still building the technology,

137
00:07:52,965 --> 00:07:55,887
and every time they bumped into something that they couldn't do,

138
00:07:55,887 --> 00:07:56,328
they could add it.

139
00:07:56,328 --> 00:08:00,691
But as soon as you start looking at having more than one game,

140
00:08:00,691 --> 00:08:03,233
and especially more than one type of game,

141
00:08:03,233 --> 00:08:06,856
it is really key to be able to have as much flexibility there as possible.

142
00:08:07,561 --> 00:08:09,823
without needing to go through that whole process

143
00:08:09,823 --> 00:08:12,685
of not only designing, implementing,

144
00:08:12,685 --> 00:08:14,267
getting first functional testing,

145
00:08:14,267 --> 00:08:16,529
and then iterating on that really slow loop

146
00:08:16,529 --> 00:08:19,691
can be quite challenging, and especially worth noting.

147
00:08:19,691 --> 00:08:23,414
I was one of the members on that Need for Speed,

148
00:08:23,414 --> 00:08:26,337
the run team, which was located in Vancouver, Canada.

149
00:08:26,337 --> 00:08:29,660
And the Frostbite team is located in Stockholm, Sweden,

150
00:08:29,660 --> 00:08:32,482
so when their work day would end,

151
00:08:33,585 --> 00:08:35,967
just as they're leaving work, we're arriving to work.

152
00:08:35,967 --> 00:08:37,287
And so there wasn't a lot of crossover there,

153
00:08:37,287 --> 00:08:39,689
and it was really tricky then to kind of wrangle

154
00:08:39,689 --> 00:08:40,449
that communication.

155
00:08:40,449 --> 00:08:42,530
We could send an email, but then we would expect

156
00:08:42,530 --> 00:08:45,272
maybe a result, if we're lucky, some crossover,

157
00:08:45,272 --> 00:08:47,433
but mostly the next day.

158
00:08:47,433 --> 00:08:49,134
And so when you have a new team that's using

159
00:08:49,134 --> 00:08:51,556
this kind of technology with that kind of a communication

160
00:08:51,556 --> 00:08:55,858
gap, there's a lot of challenges that present themselves.

161
00:08:55,858 --> 00:08:58,560
Not only are the engineers on your team trying to learn

162
00:08:58,560 --> 00:09:01,641
the stuff so that they can later support you,

163
00:09:01,641 --> 00:09:03,222
but that support isn't immediately there.

164
00:09:07,280 --> 00:09:09,381
So it should seem fairly apparent looking at

165
00:09:09,381 --> 00:09:12,062
these two screenshots,

166
00:09:12,062 --> 00:09:15,924
that racing games can be very different both visually,

167
00:09:15,924 --> 00:09:19,245
but especially in the experience

168
00:09:19,245 --> 00:09:20,606
compared to a first-person shooter.

169
00:09:20,606 --> 00:09:24,307
So when we're setting out to actually create this game,

170
00:09:24,307 --> 00:09:25,368
there's a lot of unknowns.

171
00:09:25,368 --> 00:09:28,469
And this all is leading in towards

172
00:09:28,469 --> 00:09:30,450
adding a scripting solution in an editor

173
00:09:30,450 --> 00:09:32,210
to accomplish a lot of this stuff.

174
00:09:32,210 --> 00:09:34,531
But we'll see how we get there in just a second.

175
00:09:36,998 --> 00:09:41,204
the Need for Speed the Run game. This goes back a while. We'll look at some more recent games

176
00:09:41,204 --> 00:09:45,810
soon here. But this was the starting point and it was a really cool and ambitious project.

177
00:09:45,810 --> 00:09:52,879
The experience that we were trying to build was a race from San Francisco to New York.

178
00:09:53,705 --> 00:09:58,348
And what we ended up building was 5,000 square kilometers of terrain,

179
00:09:58,348 --> 00:10:01,211
extracted from USGS satellite data,

180
00:10:01,211 --> 00:10:06,675
handcrafted with extra erosion details and all of that kind of funness.

181
00:10:06,675 --> 00:10:13,801
And then thousands, hundreds of thousands of assets placed

182
00:10:13,801 --> 00:10:17,504
and creating this sense of speed as we raced through that world

183
00:10:17,504 --> 00:10:18,505
at a hundred meters a second,

184
00:10:18,505 --> 00:10:20,226
which is, you know, 260 miles an hour in some cars.

185
00:10:22,287 --> 00:10:24,368
gives an idea of what we're trying to achieve,

186
00:10:24,368 --> 00:10:28,592
and then how do we apply technology towards achieving that?

187
00:10:28,592 --> 00:10:31,915
Well, we had experience creating racing games,

188
00:10:31,915 --> 00:10:34,337
but not creating racing games on this new platform.

189
00:10:34,337 --> 00:10:38,621
And so when we started to create Need for Speed the Run,

190
00:10:38,621 --> 00:10:42,164
we had previous games and lots of data that we could look at

191
00:10:42,164 --> 00:10:43,745
that we were really familiar with.

192
00:10:43,745 --> 00:10:46,728
And in this case, we had over 80,000 different assets

193
00:10:46,728 --> 00:10:49,390
placed in the world of Need for Speed Undercover.

194
00:10:50,700 --> 00:10:54,121
So the idea was that we would bring that stuff over

195
00:10:54,121 --> 00:10:58,702
into this Frostbite ecosystem, bring it into the editor,

196
00:10:58,702 --> 00:11:01,723
you know, turn slide sliders, turn knobs,

197
00:11:01,723 --> 00:11:04,444
get a feeling for cause and effect on a data set

198
00:11:04,444 --> 00:11:05,604
that we were familiar with.

199
00:11:05,604 --> 00:11:09,045
But it wasn't as simple as that because

200
00:11:09,045 --> 00:11:11,226
the automation systems and everything for dealing

201
00:11:11,226 --> 00:11:14,606
and porting an old set of data wasn't readily available.

202
00:11:14,606 --> 00:11:17,027
So that's something that we actually had to build up.

203
00:11:19,355 --> 00:11:23,537
So what we ended up with was an experience

204
00:11:23,537 --> 00:11:26,059
that was much larger than any previous game

205
00:11:26,059 --> 00:11:26,719
that we had created.

206
00:11:26,719 --> 00:11:29,941
And we had over 20 levels with each one of those

207
00:11:29,941 --> 00:11:33,243
containing roughly 40,000 different placements in it.

208
00:11:33,243 --> 00:11:38,606
So that added up easily 10 times as many as our previous game.

209
00:11:45,267 --> 00:11:47,068
How we originally got a lot of this stuff

210
00:11:47,068 --> 00:11:51,131
through the pipeline was creating C-sharp plugins,

211
00:11:51,131 --> 00:11:53,813
was extending the initial functionality of the editor,

212
00:11:53,813 --> 00:11:56,295
was making all of these kinds of improvements.

213
00:11:56,295 --> 00:11:58,856
In order to accomplish that, it did take weeks

214
00:11:58,856 --> 00:12:00,717
to get that first functional look at it.

215
00:12:00,717 --> 00:12:04,120
Even after we had all of that data through

216
00:12:04,120 --> 00:12:06,982
and we're looking at, you know, it's quite a volume of data

217
00:12:06,982 --> 00:12:08,723
just from the previous game.

218
00:12:09,958 --> 00:12:12,279
no one person is going to look through all of those

219
00:12:12,279 --> 00:12:14,460
different assets and try and start tweaking and tuning it

220
00:12:14,460 --> 00:12:17,061
because even once we had a bunch of this stuff in an editor,

221
00:12:17,061 --> 00:12:19,562
there's a whole lot of stuff that became apparent.

222
00:12:19,562 --> 00:12:21,403
It's like, well, how does this stuff get bundled?

223
00:12:21,403 --> 00:12:22,383
How do you put it on disk?

224
00:12:22,383 --> 00:12:23,604
How do you stream it off of disk?

225
00:12:23,604 --> 00:12:27,245
How do we do all of these kinds of optimizations

226
00:12:27,245 --> 00:12:29,246
for texture compression, level of details

227
00:12:29,246 --> 00:12:30,907
of how this stuff will render efficiently

228
00:12:30,907 --> 00:12:32,007
or the most efficiently?

229
00:12:32,007 --> 00:12:33,848
So all of that stuff takes tuning

230
00:12:33,848 --> 00:12:35,689
and a bit of experimentation and iteration.

231
00:12:36,828 --> 00:12:39,648
And to iterate over that much data

232
00:12:39,648 --> 00:12:41,069
is just simply gonna take a lot of time

233
00:12:41,069 --> 00:12:43,429
if you're gonna try and achieve that by hand.

234
00:12:43,429 --> 00:12:46,650
But with scripting, you can apply a rule set

235
00:12:46,650 --> 00:12:48,750
and then apply that across a broad set of data.

236
00:12:48,750 --> 00:12:51,591
I think we get the high level concept there.

237
00:12:51,591 --> 00:12:53,351
But without that scripting functionality,

238
00:12:53,351 --> 00:12:55,372
that wasn't readily available.

239
00:12:55,372 --> 00:12:56,832
So we set out to create this.

240
00:12:56,832 --> 00:12:59,873
So what is the Frostbite Editor scripting?

241
00:12:59,873 --> 00:13:00,833
What is that?

242
00:13:00,833 --> 00:13:03,713
So we had scripting solutions to

243
00:13:04,250 --> 00:13:07,491
port a lot of data over from 3D Studio Max to Maya

244
00:13:07,491 --> 00:13:09,312
and we could use all of these different

245
00:13:09,312 --> 00:13:10,652
scripting languages to do that.

246
00:13:10,652 --> 00:13:13,693
We could do data conversion inside of Photoshop

247
00:13:13,693 --> 00:13:16,494
and we had scripting languages to do that.

248
00:13:16,494 --> 00:13:18,795
We didn't currently have a scripting language

249
00:13:18,795 --> 00:13:21,236
inside of Frostbite, so when we implemented,

250
00:13:21,236 --> 00:13:22,817
this is what it all turned into.

251
00:13:22,817 --> 00:13:25,578
And we'll look at actually how to implement this

252
00:13:25,578 --> 00:13:26,318
in just a moment.

253
00:13:26,318 --> 00:13:29,939
But this was the solution that we came up with.

254
00:13:29,939 --> 00:13:32,800
It was Iron Python plus a thin layer.

255
00:13:33,369 --> 00:13:42,631
that thin layer, I'd describe it as a thin layer instead of an API, and an IDE. And that's

256
00:13:42,631 --> 00:13:50,953
what we call FBScript. Let's give this slide a second to load up here. So, you can see

257
00:13:50,953 --> 00:13:55,014
the video playing there. I'm just going to cue off the slide in the background there.

258
00:13:56,822 --> 00:13:59,485
So it was an epic experience that we ended up crafting.

259
00:13:59,485 --> 00:14:02,087
It turned out well, especially from a visual point of view.

260
00:14:02,087 --> 00:14:04,971
The worlds looked amazing.

261
00:14:04,971 --> 00:14:08,314
We could travel through all of this awesome terrain

262
00:14:08,314 --> 00:14:11,417
between San Francisco to New York,

263
00:14:11,417 --> 00:14:15,162
and we could have it as close to real as possible.

264
00:14:15,162 --> 00:14:18,565
And in getting there, we built up a lot of scripts to help.

265
00:14:19,248 --> 00:14:23,191
not only in the initial data conversion of the previous game,

266
00:14:23,191 --> 00:14:27,333
but as well as working across many different domains,

267
00:14:27,333 --> 00:14:30,215
from the worlds, the lighting, the audio, all of that kind of stuff.

268
00:14:30,215 --> 00:14:36,219
And the key things there that we utilize is what you'd use scripting for anything.

269
00:14:36,219 --> 00:14:39,981
Just to query the hidden information about data, it's not always exposed to you in a UI.

270
00:14:39,981 --> 00:14:43,743
To automate the technical and repetitive tasks,

271
00:14:43,743 --> 00:14:45,805
gets things done faster and it's less error-prone.

272
00:14:46,495 --> 00:14:48,777
and you can quickly create tools and extend functionality.

273
00:14:48,777 --> 00:14:51,019
And there's all sorts of caveats there in terms of

274
00:14:51,019 --> 00:14:52,941
just how much you want to do in scripting versus

275
00:14:52,941 --> 00:14:56,824
something like C sharp or creating an application.

276
00:14:56,824 --> 00:14:58,145
But I can get into a bit more of that later.

277
00:14:58,145 --> 00:15:03,549
So let's look at implementation details.

278
00:15:03,549 --> 00:15:04,450
So IronPython's first up.

279
00:15:04,450 --> 00:15:10,935
This is the layer that's built on top of FrostEd.

280
00:15:10,935 --> 00:15:13,817
Again, it is a .NET application.

281
00:15:13,817 --> 00:15:14,898
And I should say that

282
00:15:15,485 --> 00:15:18,126
Originally, when I was first looking at that application,

283
00:15:18,126 --> 00:15:20,187
I was considering, okay, well, I need an ability

284
00:15:20,187 --> 00:15:21,347
to go in there and automate stuff,

285
00:15:21,347 --> 00:15:23,147
because that's just what I'm familiar with.

286
00:15:23,147 --> 00:15:25,808
I don't know of an environment or a production

287
00:15:25,808 --> 00:15:28,469
that I haven't been able to do that.

288
00:15:28,469 --> 00:15:29,929
I originally wanted C Sharp.

289
00:15:29,929 --> 00:15:32,850
That's something that was really familiar to me.

290
00:15:32,850 --> 00:15:35,711
I had experience using, just on the side,

291
00:15:35,711 --> 00:15:38,071
not specifically at EA, but just looking at

292
00:15:38,071 --> 00:15:41,232
the functionality and things like Unity 3D.

293
00:15:42,175 --> 00:15:44,276
and they have really nice scripting functionality in there

294
00:15:44,276 --> 00:15:46,377
with C sharp, and not only on the runtime,

295
00:15:46,377 --> 00:15:47,917
but in the editor as well.

296
00:15:47,917 --> 00:15:50,958
And so, you get a lot of stuff for that.

297
00:15:50,958 --> 00:15:53,579
You get an IDE, you could be using MonoDevelop,

298
00:15:53,579 --> 00:15:54,860
you could be using Visual Studio.

299
00:15:54,860 --> 00:15:56,801
You don't have to create a script editor.

300
00:15:56,801 --> 00:15:59,702
In that environment, you can have access

301
00:15:59,702 --> 00:16:01,722
to all of those different assemblies

302
00:16:01,722 --> 00:16:03,123
that you would in your project.

303
00:16:03,123 --> 00:16:06,104
So if you wanted to have,

304
00:16:06,104 --> 00:16:07,724
if you wanted to implement something,

305
00:16:07,724 --> 00:16:10,726
that framework is really apparent right away.

306
00:16:12,443 --> 00:16:15,625
But there are limitations there.

307
00:16:15,625 --> 00:16:20,087
And those limitations are things that I wasn't actually

308
00:16:20,087 --> 00:16:21,468
fully aware of at the time.

309
00:16:21,468 --> 00:16:24,750
Python, especially Iron Python, was a very new technology

310
00:16:24,750 --> 00:16:24,950
at the time.

311
00:16:24,950 --> 00:16:26,411
This goes back to maybe 2007.

312
00:16:26,411 --> 00:16:27,532
No, that's too far back.

313
00:16:27,532 --> 00:16:29,233
2008 or 2009, I think.

314
00:16:29,233 --> 00:16:32,215
Anyways, the cool thing, Iron Python

315
00:16:32,215 --> 00:16:35,737
can actually do absolutely everything that C Sharp can do.

316
00:16:35,737 --> 00:16:37,878
It has full access to everything in C Sharp.

317
00:16:38,757 --> 00:16:40,698
and it can do more, which is, okay, cool.

318
00:16:40,698 --> 00:16:43,059
What we're doing is actually starting with C Sharp

319
00:16:43,059 --> 00:16:44,459
and adding additional functionality.

320
00:16:44,459 --> 00:16:47,900
And that additional functionality is a dynamic environment.

321
00:16:47,900 --> 00:16:50,041
And this is a bit tricky to wrap a head around.

322
00:16:50,041 --> 00:16:52,922
If you're an engineer and you're jumping into Visual Studio,

323
00:16:52,922 --> 00:16:55,523
you have an idea about the structure and the framework

324
00:16:55,523 --> 00:16:57,163
and an algorithm of sorts

325
00:16:57,163 --> 00:16:58,744
of what you're gonna be building up.

326
00:16:58,744 --> 00:17:00,904
And then you'll build it, compile it,

327
00:17:00,904 --> 00:17:02,625
and then test a lot of assumptions.

328
00:17:02,625 --> 00:17:05,006
Whereas in a dynamic environment,

329
00:17:05,006 --> 00:17:07,127
specifically what we'll be looking at,

330
00:17:07,810 --> 00:17:09,450
It's very highly iterative.

331
00:17:09,450 --> 00:17:12,271
We use a terminology called REPL, or R-E-P-L,

332
00:17:12,271 --> 00:17:13,831
so read, eval, print loop.

333
00:17:13,831 --> 00:17:15,692
And sometimes you'll execute it ad hoc.

334
00:17:15,692 --> 00:17:17,952
You'll have, write a couple lines

335
00:17:17,952 --> 00:17:19,953
and then execute those couple lines,

336
00:17:19,953 --> 00:17:21,433
no compiling required,

337
00:17:21,433 --> 00:17:23,594
and then test your assumptions and proceed.

338
00:17:23,594 --> 00:17:27,855
So this is the solution that we created.

339
00:17:27,855 --> 00:17:28,895
We'll look at it in action.

340
00:17:29,666 --> 00:17:32,367
But what does this actually look like to implement it?

341
00:17:32,367 --> 00:17:33,828
Like is it really heavy?

342
00:17:33,828 --> 00:17:36,109
Like how do you apply this to an application?

343
00:17:36,109 --> 00:17:39,470
Consider you have an application that's written in .NET

344
00:17:39,470 --> 00:17:41,751
and you want to add this to it.

345
00:17:41,751 --> 00:17:43,992
Is it going to be a big challenge?

346
00:17:43,992 --> 00:17:46,112
And the answer to that is no.

347
00:17:46,112 --> 00:17:49,194
That might seem like a little bit of a daunting wall of text

348
00:17:49,194 --> 00:17:51,295
but that's actually everything that's required

349
00:17:51,295 --> 00:17:53,675
to add Iron Python to an application.

350
00:17:53,675 --> 00:17:56,176
And well, you might very well be able to find

351
00:17:56,176 --> 00:17:57,957
this kind of information online somewhere.

352
00:17:58,574 --> 00:18:01,035
What we'll be doing is taking it a step further

353
00:18:01,035 --> 00:18:03,655
and looking at how to connect not only IronPython

354
00:18:03,655 --> 00:18:06,716
into a .NET application, but then connect that

355
00:18:06,716 --> 00:18:10,297
with an editor and with a production solution here.

356
00:18:10,297 --> 00:18:14,698
But before we proceed beyond all of this,

357
00:18:14,698 --> 00:18:18,279
and this slide right here can get a little bit much

358
00:18:18,279 --> 00:18:19,460
to look at, it's a bit hand-wavy.

359
00:18:19,460 --> 00:18:21,480
It's like, okay, yeah, sure, you can write some code

360
00:18:21,480 --> 00:18:24,721
and get a result, but let's see it in action.

361
00:18:27,986 --> 00:18:29,968
So that's what you see as a screenshot.

362
00:18:29,968 --> 00:18:32,690
But let's actually see this video here play out.

363
00:18:32,690 --> 00:18:36,533
I think this is worth taking four minutes,

364
00:18:36,533 --> 00:18:39,415
although it's a bit of a fast ride here.

365
00:18:39,415 --> 00:18:42,097
What we're gonna see is from the download

366
00:18:42,097 --> 00:18:46,200
the Iron Python DLLs to setting up a .NET application

367
00:18:46,200 --> 00:18:48,762
and applying Iron Python in four minutes.

368
00:18:48,762 --> 00:18:50,444
You know, it's sped up a little bit in some spots

369
00:18:50,444 --> 00:18:52,285
just to speed up the download speed and whatnot.

370
00:18:52,285 --> 00:18:55,027
But I think from a high level you'll quickly appreciate

371
00:18:55,027 --> 00:18:55,728
that.

372
00:18:56,254 --> 00:18:59,495
In order to get something like this stood up,

373
00:18:59,495 --> 00:19:01,796
it doesn't cost a lot.

374
00:19:01,796 --> 00:19:06,138
So there we go, we've created a new WinForms project.

375
00:19:06,138 --> 00:19:08,919
I know it's a little bit old compared to WPF,

376
00:19:08,919 --> 00:19:10,839
but just for simplicity's sake,

377
00:19:10,839 --> 00:19:12,820
we can see we can block stuff in really quickly here.

378
00:19:12,820 --> 00:19:16,682
So we've added a list box, a text box, a button.

379
00:19:16,682 --> 00:19:19,023
We've named the button execute.

380
00:19:19,023 --> 00:19:21,204
We double click on it and we get that functionality

381
00:19:21,204 --> 00:19:21,864
in there for...

382
00:19:23,082 --> 00:19:24,443
what happens when you click that button.

383
00:19:24,443 --> 00:19:26,824
And we'll add those details in a moment.

384
00:19:26,824 --> 00:19:32,328
And then we'll add a new folder for references,

385
00:19:32,328 --> 00:19:35,750
because that Iron Python DLLs that we just downloaded

386
00:19:35,750 --> 00:19:36,690
need some place to put them.

387
00:19:36,690 --> 00:19:39,052
So we'll go and find that zip file.

388
00:19:39,052 --> 00:19:40,773
We'll grab those DLLs and drag them

389
00:19:40,773 --> 00:19:42,814
into that reference folder.

390
00:19:42,814 --> 00:19:45,276
And there you go.

391
00:19:45,276 --> 00:19:49,078
You have a place on disk where they're referenced,

392
00:19:49,078 --> 00:19:51,480
but now we need to plug them into that solution.

393
00:19:55,085 --> 00:20:00,348
So you go to references, do a browse, browse to that spot on disk that you just saved them to,

394
00:20:00,348 --> 00:20:04,549
and now you have access to all those DLLs in your solution.

395
00:20:04,549 --> 00:20:06,030
Cool.

396
00:20:06,030 --> 00:20:09,431
Next up, we have to add a little using line there.

397
00:20:09,431 --> 00:20:10,112
Just a simple one.

398
00:20:10,112 --> 00:20:14,293
So you just reference in that Microsoft hosting, uh, scripting one.

399
00:20:16,898 --> 00:20:20,019
We set up the script runtime and the engine.

400
00:20:20,019 --> 00:20:22,200
A distinction there is the engine is the thing

401
00:20:22,200 --> 00:20:24,261
that evaluates the scripts and the runtime

402
00:20:24,261 --> 00:20:27,201
is the thing that manages memory and scope.

403
00:20:27,201 --> 00:20:28,282
And this is just for an example.

404
00:20:28,282 --> 00:20:34,584
So we create an example class and it does not a lot.

405
00:20:34,584 --> 00:20:37,404
We have a public function in there

406
00:20:37,404 --> 00:20:40,085
that will simply just return a string that says, hello.

407
00:20:46,925 --> 00:20:50,187
And then we initialize that example class.

408
00:20:50,187 --> 00:20:52,049
We initialize the script engine.

409
00:20:52,049 --> 00:20:56,251
And after you execute a script, it has to output somewhere.

410
00:20:56,251 --> 00:21:01,474
You could use it somewhere else in an application,

411
00:21:01,474 --> 00:21:04,796
or you could output it as a text to some output window.

412
00:21:04,796 --> 00:21:06,838
So in this case, we're just gonna fill up that list box

413
00:21:06,838 --> 00:21:09,359
with the results that are being output from the script.

414
00:21:09,359 --> 00:21:13,002
And here we're initializing.

415
00:21:13,987 --> 00:21:17,588
What are we doing? We're adding the example class as a global variable.

416
00:21:17,588 --> 00:21:22,831
This is a big distinction here where you can have any class whatsoever,

417
00:21:22,831 --> 00:21:26,813
any object exposed to scripting in this manner,

418
00:21:26,813 --> 00:21:30,515
and that's why it's thrown in a for loop even though we're just adding one for right now.

419
00:21:34,662 --> 00:21:36,382
Cool, and then we click the button,

420
00:21:36,382 --> 00:21:38,563
and that passes the text that we had in the text editor.

421
00:21:38,563 --> 00:21:40,744
It passes that into the scripting engine.

422
00:21:40,744 --> 00:21:44,306
The results are piped out back to that memory stream,

423
00:21:44,306 --> 00:21:45,947
and then passed into the list box

424
00:21:45,947 --> 00:21:47,048
so that we can see it in the UI.

425
00:21:47,048 --> 00:21:49,769
So that's in really short order,

426
00:21:49,769 --> 00:21:51,790
setting up absolutely everything that you need.

427
00:21:51,790 --> 00:21:53,911
We compile it, build, run.

428
00:21:53,911 --> 00:21:56,572
We type in something really simple, like one plus one.

429
00:21:57,473 --> 00:22:00,975
we've got a calculator. That's using Python to do Python

430
00:22:00,975 --> 00:22:04,216
scripting. You can type in any Python script there and it

431
00:22:04,216 --> 00:22:07,658
would execute. In this case we have access to .NET

432
00:22:07,658 --> 00:22:10,339
functionality as well. So there we're grabbing our example

433
00:22:10,339 --> 00:22:14,320
class, we're executing that method and it says hello is the

434
00:22:14,320 --> 00:22:18,002
result. So super simple, super high level, but I think that you

435
00:22:18,002 --> 00:22:23,764
can see very quickly that you have implementation details that

436
00:22:23,764 --> 00:22:26,045
anyone could utilize. I think it's pretty cool.

437
00:22:27,675 --> 00:22:30,818
I think I probably have a secret agenda in showing that,

438
00:22:30,818 --> 00:22:34,621
because any application that I find myself using,

439
00:22:34,621 --> 00:22:37,364
I would love to find scripting available inside of it,

440
00:22:37,364 --> 00:22:39,305
because that gives me the hooks available

441
00:22:39,305 --> 00:22:42,068
to add in additional functionality

442
00:22:42,068 --> 00:22:45,450
in as lightweight a form as possible.

443
00:22:45,450 --> 00:22:47,212
All right.

444
00:22:47,212 --> 00:22:47,312
So.

445
00:22:49,528 --> 00:22:53,409
I'm going into a little bit more of a production solution side from there.

446
00:22:53,409 --> 00:22:54,769
We can see the groundwork.

447
00:22:54,769 --> 00:22:56,290
That's all foundational stuff.

448
00:22:56,290 --> 00:23:01,031
And if you have that in place, there's a few things that you can add on top of that, and

449
00:23:01,031 --> 00:23:02,471
there you have a production solution.

450
00:23:02,471 --> 00:23:07,152
So the examples that I'm going to be showing are simplified versions, to not go into all

451
00:23:07,152 --> 00:23:11,733
of the cruft of whatever it is that you would create.

452
00:23:11,733 --> 00:23:14,633
Would definitely look a little bit heavier than what I'm about to show.

453
00:23:14,633 --> 00:23:19,234
But I'll cover just enough detail to see how everything hooks together, how it all connects.

454
00:23:20,882 --> 00:23:26,507
So let's take a look. Before I look at the coding examples, let's look at it in action. So

455
00:23:26,507 --> 00:23:36,997
this is a video of the editor FrostEd and the scripting editor, FBScript, interfacing with

456
00:23:36,997 --> 00:23:41,281
each other. And here we have a bunch of things going on. We have the thin wrapper exposed as

457
00:23:41,281 --> 00:23:44,944
FB. We have an assembly exposed as world render.

458
00:23:45,652 --> 00:23:49,295
We have a data explorer on the left hand side.

459
00:23:49,295 --> 00:23:52,398
It's just a list of assets, very common in a lot of different editors.

460
00:23:52,398 --> 00:23:57,762
We can select those things, and we can store whatever we have selected in a variable we specify.

461
00:23:57,762 --> 00:24:00,925
And the command to do that is really simple.

462
00:24:00,925 --> 00:24:04,788
So you can just say, hey, I've got this thin wrapper called FB,

463
00:24:04,788 --> 00:24:09,252
and FB lets me say something like, get assets from data explorer selection.

464
00:24:09,252 --> 00:24:10,373
So that's straightforward.

465
00:24:10,735 --> 00:24:12,957
and then we can iterate over that list of assets

466
00:24:12,957 --> 00:24:15,299
that we have selected and confirm our assumptions.

467
00:24:15,299 --> 00:24:17,021
We can say, hey, I think I selected some stuff

468
00:24:17,021 --> 00:24:19,042
and I suspect it's gonna be in this list of,

469
00:24:19,042 --> 00:24:23,286
this variable as a list, test that assumption.

470
00:24:23,286 --> 00:24:25,588
Go, yeah, it actually is.

471
00:24:25,588 --> 00:24:28,430
So we go, okay, now I know that each one of these assets

472
00:24:28,430 --> 00:24:31,933
that is going to be available now inside of this script,

473
00:24:31,933 --> 00:24:35,016
I can store it iteratively inside of that loop

474
00:24:35,016 --> 00:24:38,619
as the outdoor light is what I wanna get access to

475
00:24:38,619 --> 00:24:39,320
from that asset.

476
00:24:40,728 --> 00:24:44,710
And then not only can you get assets from a list of assets,

477
00:24:44,710 --> 00:24:48,051
you can also kind of pare down into assets.

478
00:24:48,051 --> 00:24:50,252
So look at component pieces, however that happens

479
00:24:50,252 --> 00:24:50,792
to be set up.

480
00:24:50,792 --> 00:24:52,853
I know it's all very specific to Frostbite,

481
00:24:52,853 --> 00:24:54,434
but I think the general principle applies.

482
00:24:54,434 --> 00:24:57,355
And then you have access to the member properties

483
00:24:57,355 --> 00:24:58,115
and functions.

484
00:24:58,115 --> 00:25:00,576
And so there I run a quick query.

485
00:25:00,576 --> 00:25:05,038
So the outdoor light sun rotation for X,

486
00:25:05,038 --> 00:25:07,259
it happens to be at 120, executed that line,

487
00:25:07,259 --> 00:25:09,120
it returns the result to the output field.

488
00:25:09,832 --> 00:25:13,233
But you can type in any value and execute that.

489
00:25:13,233 --> 00:25:15,694
And what I'm clicking on there is just execute current line.

490
00:25:15,694 --> 00:25:18,175
So it's not the entire script that gets re-evaluated,

491
00:25:18,175 --> 00:25:19,316
it's just that one line.

492
00:25:19,316 --> 00:25:20,557
So any portion of your script,

493
00:25:20,557 --> 00:25:23,078
you can always just execute ad hoc that way

494
00:25:23,078 --> 00:25:25,059
and find out further information about that

495
00:25:25,059 --> 00:25:26,619
or operate on that data.

496
00:25:26,619 --> 00:25:28,760
So that's the high-level idea.

497
00:25:28,760 --> 00:25:31,001
I mean, it's a super simple example,

498
00:25:31,001 --> 00:25:31,842
but it's just enough, I think,

499
00:25:31,842 --> 00:25:33,803
to give us an idea of what we're going in for

500
00:25:33,803 --> 00:25:37,484
when I start talking about further implementation details.

501
00:25:37,484 --> 00:25:37,885
All right.

502
00:25:40,475 --> 00:25:43,277
So, iron python exceptions is the thing that was missing

503
00:25:43,277 --> 00:25:45,119
from that very first simple example.

504
00:25:45,119 --> 00:25:48,061
That very first simple example allows us to do things

505
00:25:48,061 --> 00:25:50,743
like one plus one, and it will return a value of two.

506
00:25:50,743 --> 00:25:53,044
So that's fairly intuitive and straightforward.

507
00:25:53,044 --> 00:25:55,926
But if we were to type in something like A plus B,

508
00:25:55,926 --> 00:25:57,287
it was like, well, what the heck is that?

509
00:25:57,287 --> 00:25:58,288
You haven't defined it yet,

510
00:25:58,288 --> 00:26:00,289
and you'd want to throw some sort of an exception.

511
00:26:00,289 --> 00:26:04,852
So, to do that is actually not that difficult.

512
00:26:04,852 --> 00:26:07,094
And so I'm not gonna go into the details

513
00:26:07,094 --> 00:26:09,035
because it's also a solved problem.

514
00:26:09,035 --> 00:26:09,696
So just like.

515
00:26:10,402 --> 00:26:14,425
Some of the other examples I'll be looking at later,

516
00:26:14,425 --> 00:26:17,827
including Avalon Edit, there are solutions

517
00:26:17,827 --> 00:26:19,428
that are already out there that we can utilize.

518
00:26:19,428 --> 00:26:21,670
And so this is a really good resource

519
00:26:21,670 --> 00:26:23,391
that I can point you towards.

520
00:26:23,391 --> 00:26:27,594
Devhawk.net has a lot more than just this particular example

521
00:26:27,594 --> 00:26:29,355
but this is where I started.

522
00:26:29,355 --> 00:26:32,076
And here we can see setting up the traceback framework.

523
00:26:32,076 --> 00:26:37,100
Here, the idea of the awareness that it exists

524
00:26:37,100 --> 00:26:38,801
is more key than exactly how to do it.

525
00:26:39,268 --> 00:26:41,650
But what's going on right here is we have a hook there

526
00:26:41,650 --> 00:26:42,531
into that exception.

527
00:26:42,531 --> 00:26:46,055
So any time there's a problem with a script that gets run,

528
00:26:46,055 --> 00:26:48,838
it has a mechanism to pipe that exception back

529
00:26:48,838 --> 00:26:50,960
and tell us, you know, what's it gonna tell us.

530
00:26:50,960 --> 00:26:53,803
It's gonna say, what line number did a script fail

531
00:26:53,803 --> 00:26:55,485
and what was the error message?

532
00:26:55,485 --> 00:26:56,866
And then we can do something meaningful

533
00:26:56,866 --> 00:26:57,707
with that information.

534
00:26:59,485 --> 00:27:01,667
There's a bunch of other stuff going on in here,

535
00:27:01,667 --> 00:27:04,869
but again, not gonna linger on this particular

536
00:27:04,869 --> 00:27:05,569
side of things.

537
00:27:05,569 --> 00:27:07,991
What I wanna do is move on and look at

538
00:27:07,991 --> 00:27:13,174
the script engine initialization,

539
00:27:13,174 --> 00:27:14,795
and in particular, the scope management.

540
00:27:14,795 --> 00:27:17,197
So as long as you have exception handling set up,

541
00:27:17,197 --> 00:27:19,619
that's great, and you can see right here

542
00:27:19,619 --> 00:27:22,040
in the initialization, you've got this engine.setTrace,

543
00:27:22,040 --> 00:27:25,683
which is kind of kicking all of that stuff off.

544
00:27:25,683 --> 00:27:28,504
We're going into reset scope.

545
00:27:28,504 --> 00:27:28,645
So.

546
00:27:29,135 --> 00:27:32,115
This is important because there's a bunch of stuff that's

547
00:27:32,115 --> 00:27:35,376
going to happen here that helps us hook into an editor.

548
00:27:35,376 --> 00:27:36,736
Let's look at that.

549
00:27:36,736 --> 00:27:44,037
Alright, so in scope by default, we have assemblies,

550
00:27:44,037 --> 00:27:47,218
Python paths, aliases, you could throw in a whole ton

551
00:27:47,218 --> 00:27:52,259
of stuff into here, but it can also be quite simple.

552
00:27:52,259 --> 00:27:54,599
So in this case, what we want to do is just iterate over

553
00:27:54,599 --> 00:27:57,579
all the assemblies that are available in the application

554
00:27:57,579 --> 00:27:58,580
that we're having scripting in.

555
00:27:59,984 --> 00:28:00,864
So that's pretty cool.

556
00:28:00,864 --> 00:28:04,265
We can go everything that you would have access to

557
00:28:04,265 --> 00:28:05,525
if you were inside of C Sharp,

558
00:28:05,525 --> 00:28:07,466
you now have access to inside of scripting

559
00:28:07,466 --> 00:28:09,166
with that simple iteration loop.

560
00:28:09,166 --> 00:28:11,207
And then we can also throw a whole bunch

561
00:28:11,207 --> 00:28:12,147
of other stuff at it.

562
00:28:12,147 --> 00:28:16,188
We can say, here's a list of Python libraries

563
00:28:16,188 --> 00:28:17,308
that we can have access to.

564
00:28:17,308 --> 00:28:21,569
And then we can also declare a bunch of objects.

565
00:28:21,569 --> 00:28:24,030
You could have singletons or whatever the case may be,

566
00:28:24,030 --> 00:28:25,810
but you could build up a bunch of structures in there

567
00:28:25,810 --> 00:28:28,171
that you just have access now as well inside of scripting.

568
00:28:29,135 --> 00:28:31,236
So that's how you pass all that stuff in.

569
00:28:31,236 --> 00:28:37,238
And that was a very high-level quick overview

570
00:28:37,238 --> 00:28:39,219
of Iron Python implementation.

571
00:28:39,219 --> 00:28:43,120
And let's look at that last bit of stuff that we just saw

572
00:28:43,120 --> 00:28:45,361
and how that connects with the FBScript Editor.

573
00:28:45,361 --> 00:28:52,164
So inside of the FBScript Editor or inside of any kind of scripting editor

574
00:28:52,164 --> 00:28:54,105
solution that you would look at

575
00:28:55,851 --> 00:28:57,792
I highly recommend looking at Avalon Edit.

576
00:28:57,792 --> 00:28:59,053
I found it really easy to use,

577
00:28:59,053 --> 00:29:01,915
and it solves all of those common problems

578
00:29:01,915 --> 00:29:04,337
that you would expect as a bar of entry

579
00:29:04,337 --> 00:29:05,317
for any kind of text editor,

580
00:29:05,317 --> 00:29:06,918
would be it LimeWire or Notepad++

581
00:29:06,918 --> 00:29:09,240
or whatever the case may be.

582
00:29:09,240 --> 00:29:10,761
You're gonna end up with Avalon Edit

583
00:29:10,761 --> 00:29:13,743
having syntax highlighting, folding,

584
00:29:13,743 --> 00:29:15,384
code completion, all of that funness.

585
00:29:21,099 --> 00:29:24,642
So before getting into a few more code looking slides,

586
00:29:24,642 --> 00:29:27,223
you can see a quick video of this stuff in action.

587
00:29:27,223 --> 00:29:29,245
And what we're looking at here,

588
00:29:29,245 --> 00:29:34,488
just illustrating the idea behind importing

589
00:29:34,488 --> 00:29:36,390
something that we should be familiar with,

590
00:29:36,390 --> 00:29:41,033
the system namespace in C sharp, in .NET in particular.

591
00:29:41,033 --> 00:29:43,315
And in this case, what we're doing is,

592
00:29:43,315 --> 00:29:45,356
as we're typing, we're getting code completion.

593
00:29:45,356 --> 00:29:46,157
So, okay, that's cool.

594
00:29:46,800 --> 00:29:53,823
A couple other things that are available here, as well as asking for help on giving functions,

595
00:29:53,823 --> 00:29:58,185
as well as, and this is a subtle one, it's kind of something I missed too as the video

596
00:29:58,185 --> 00:30:03,147
is playing, but right out of the gate, when we executed that first line import system,

597
00:30:03,147 --> 00:30:04,248
it wasn't in scope.

598
00:30:04,248 --> 00:30:07,869
After we executed it is, and so it bolds the system.

599
00:30:07,869 --> 00:30:12,871
So syntax highlighting can help us with more than just keywords and all of that kind of

600
00:30:12,871 --> 00:30:12,991
stuff.

601
00:30:12,991 --> 00:30:14,652
It can help us understand what's in scope.

602
00:30:16,648 --> 00:30:21,291
So that in the component pieces again is easy access to .NET

603
00:30:21,291 --> 00:30:26,793
functions. Here we can see a iron python script that says

604
00:30:26,793 --> 00:30:30,655
hey, what's, whether a file exists or not. And then we can

605
00:30:30,655 --> 00:30:33,356
see the code required to expose that and make it available to

606
00:30:33,356 --> 00:30:36,477
the scripting. So there it is. Just adding in all of the

607
00:30:36,477 --> 00:30:37,518
assemblies available there.

608
00:30:41,208 --> 00:30:44,810
Now what about that code completion stuff, the drop-down menus and all of that?

609
00:30:44,810 --> 00:30:46,911
Where are we pulling that information from?

610
00:30:46,911 --> 00:30:52,755
How does that get passed from something that's a script that executes something to an editor

611
00:30:52,755 --> 00:30:55,277
that as you're typing is giving you some feedback?

612
00:30:55,277 --> 00:30:56,958
So that's in two places.

613
00:30:56,958 --> 00:31:02,421
It's in a public execute script method.

614
00:31:02,421 --> 00:31:03,482
What does that mean?

615
00:31:03,482 --> 00:31:04,883
It means that...

616
00:31:05,437 --> 00:31:07,218
yeah, okay, when you wanna hit that play button

617
00:31:07,218 --> 00:31:09,178
or execute script button or whatever it is

618
00:31:09,178 --> 00:31:10,978
that executes multiple lines of code

619
00:31:10,978 --> 00:31:13,059
or one line of code or whatever the case may be,

620
00:31:13,059 --> 00:31:15,619
that same functionality there

621
00:31:15,619 --> 00:31:18,520
that you're gonna execute a large script with,

622
00:31:18,520 --> 00:31:21,880
that same functionality can get called as you're typing.

623
00:31:21,880 --> 00:31:22,721
So you can pass in,

624
00:31:22,721 --> 00:31:25,181
and this is the key point to the next one,

625
00:31:25,181 --> 00:31:26,761
you can pass in the previous word.

626
00:31:26,761 --> 00:31:30,122
So it is helpful to have a very simple script parser

627
00:31:30,122 --> 00:31:32,682
that will parse your script,

628
00:31:32,682 --> 00:31:34,223
find what the previous word was,

629
00:31:35,039 --> 00:31:38,181
and then pass that into the scripting engine.

630
00:31:38,181 --> 00:31:40,463
So you can do things like, well, let's take a look.

631
00:31:40,463 --> 00:31:42,284
You can do things like this,

632
00:31:42,284 --> 00:31:46,767
where you have access to your script engine,

633
00:31:46,767 --> 00:31:48,408
so you can call that execute script function,

634
00:31:48,408 --> 00:31:51,891
and as you're typing, you can get that previous word

635
00:31:51,891 --> 00:31:54,212
and you can do a directory on it.

636
00:31:54,212 --> 00:31:56,314
Like, if you're not familiar with Python,

637
00:31:56,314 --> 00:31:59,236
if you type dir, bracket, and then inside of those brackets

638
00:31:59,236 --> 00:32:00,817
you're gonna put in a variable.

639
00:32:01,729 --> 00:32:04,930
That variable then will be, what you'll get as an output

640
00:32:04,930 --> 00:32:08,611
from that is you'll get a list of the member methods

641
00:32:08,611 --> 00:32:09,251
and properties.

642
00:32:09,251 --> 00:32:13,792
So because we're calling that in code there,

643
00:32:13,792 --> 00:32:16,373
what we can see here is,

644
00:32:16,373 --> 00:32:20,554
what we can see here is that we have

645
00:32:20,554 --> 00:32:21,715
not only the ability to

646
00:32:22,817 --> 00:32:26,039
execute the script from anywhere,

647
00:32:26,039 --> 00:32:28,621
from any part of your C-sharp application,

648
00:32:28,621 --> 00:32:30,922
but we can also execute that on the fly.

649
00:32:30,922 --> 00:32:32,983
So as we're typing that system.io.file,

650
00:32:32,983 --> 00:32:35,665
as soon as you hit that dot,

651
00:32:35,665 --> 00:32:38,926
that dot triggers an event, and it says,

652
00:32:38,926 --> 00:32:42,569
okay, cool, I'm gonna look for a list of members

653
00:32:42,569 --> 00:32:45,230
and attributes that belong to system.io.file,

654
00:32:45,230 --> 00:32:48,432
and then it gives us that list in that drop-down menu.

655
00:32:48,432 --> 00:32:49,673
And that would be the same thing

656
00:32:49,673 --> 00:32:51,093
as if we had put that whole thing in brackets

657
00:32:51,093 --> 00:32:52,194
and get something as an output.

658
00:32:55,497 --> 00:32:58,639
And just one more thing, sorry on that last slide there,

659
00:32:58,639 --> 00:33:01,321
is some of these functionalities here

660
00:33:01,321 --> 00:33:04,363
might not look familiar, but if you did investigate

661
00:33:04,363 --> 00:33:07,145
the Avalon edit there, because it has such nice interfaces

662
00:33:07,145 --> 00:33:09,787
there for building up code completion boxes,

663
00:33:09,787 --> 00:33:12,148
here you can see those in action as well.

664
00:33:12,148 --> 00:33:13,589
And we're just passing in the results

665
00:33:13,589 --> 00:33:14,850
into that code completion.

666
00:33:14,850 --> 00:33:20,014
Cool, and we can do the same thing with Python scripts.

667
00:33:20,963 --> 00:33:23,705
So, it actually goes beyond that,

668
00:33:23,705 --> 00:33:25,466
and I'll reiterate this point later

669
00:33:25,466 --> 00:33:26,986
with an example in production.

670
00:33:26,986 --> 00:33:32,089
But there's so much more that you can do in this space.

671
00:33:32,089 --> 00:33:34,210
So it's not just about going, here's an application,

672
00:33:34,210 --> 00:33:36,171
I wanna bring everything that application can see,

673
00:33:36,171 --> 00:33:39,452
and now I wanna have that in a scripting environment.

674
00:33:39,452 --> 00:33:41,093
Obviously here we're looking at an example

675
00:33:41,093 --> 00:33:42,674
where we can go, okay, here's a whole bunch

676
00:33:42,674 --> 00:33:44,875
of Python libraries, but you can dynamically add

677
00:33:44,875 --> 00:33:46,516
a whole bunch of Python libraries later.

678
00:33:47,117 --> 00:33:50,099
through calls from your script, not only can you do that,

679
00:33:50,099 --> 00:33:52,981
you can also add references to XAML to help with UI,

680
00:33:52,981 --> 00:33:57,264
and you can add in references to DLLs to help with,

681
00:33:57,264 --> 00:34:01,167
well, if you wanted to create an application

682
00:34:01,167 --> 00:34:03,048
or a library with a whole bunch of functionality,

683
00:34:03,048 --> 00:34:05,950
you wanted to write that in C Sharp using Visual Studio,

684
00:34:05,950 --> 00:34:07,671
that's all good, you can have that DLL,

685
00:34:07,671 --> 00:34:10,874
as long as it's a .NET DLL, you can have that available

686
00:34:10,874 --> 00:34:13,355
inside of the script environment as well.

687
00:34:14,954 --> 00:34:17,356
Now syntax highlighting, I'm not gonna go long on,

688
00:34:17,356 --> 00:34:21,019
we all get this fairly standard bar of entry

689
00:34:21,019 --> 00:34:24,221
into script editing, but I just want to reiterate

690
00:34:24,221 --> 00:34:26,583
that point that I called out earlier too there.

691
00:34:26,583 --> 00:34:28,605
If you type in something into this editor,

692
00:34:28,605 --> 00:34:30,026
everything is just gonna be text,

693
00:34:30,026 --> 00:34:31,467
and especially if you know Python,

694
00:34:31,467 --> 00:34:33,549
it's gonna be very dynamic, so there's not gonna be

695
00:34:33,549 --> 00:34:35,830
really any strong typing or anything going on.

696
00:34:35,830 --> 00:34:38,453
However, after you execute something,

697
00:34:38,453 --> 00:34:40,894
it will exist in scope, and it's that reflection

698
00:34:40,894 --> 00:34:41,935
of what is in memory.

699
00:34:42,434 --> 00:34:45,097
that can tell us stuff back to the editor.

700
00:34:45,097 --> 00:34:47,619
And so as soon as we've imported system,

701
00:34:47,619 --> 00:34:50,322
or as soon as we've executed anything

702
00:34:50,322 --> 00:34:54,106
that registers something in memory,

703
00:34:54,106 --> 00:34:56,128
as long as it's being executed and it's there in memory,

704
00:34:56,128 --> 00:34:58,851
it's gonna go bold to help us give that indication.

705
00:35:02,498 --> 00:35:05,639
So that's really useful for REPL workflows.

706
00:35:05,639 --> 00:35:10,080
And something else is just more of a counterpart

707
00:35:10,080 --> 00:35:11,000
to code completion.

708
00:35:11,000 --> 00:35:13,501
So if you hit dot and you get a drop-down list.

709
00:35:13,501 --> 00:35:16,622
In this case, if you use the Python command help

710
00:35:16,622 --> 00:35:20,123
and then throw in any object into help,

711
00:35:20,123 --> 00:35:21,463
you're gonna get some documentation

712
00:35:21,463 --> 00:35:24,664
if there's something that exists for that.

713
00:35:24,664 --> 00:35:28,164
So in this case, we can get documentation

714
00:35:28,164 --> 00:35:31,585
both from Python commands and from...

715
00:35:32,717 --> 00:35:38,520
.NET commands. And that was the FB script editor. I think there's about three slides for the FB

716
00:35:38,520 --> 00:35:43,443
modules. It's just a thin wrapper, so it should be fairly light. And then we'll look at

717
00:35:43,443 --> 00:35:49,226
production examples.

718
00:35:49,905 --> 00:35:52,787
Thin wrapper should be just that, should be very thin,

719
00:35:52,787 --> 00:35:54,728
really light and accessible.

720
00:35:54,728 --> 00:35:57,029
If you wanted to go into the guts

721
00:35:57,029 --> 00:35:59,570
and access absolutely everything and do everything well,

722
00:35:59,570 --> 00:36:02,152
you actually do have access through scripting to do that.

723
00:36:02,152 --> 00:36:03,672
You can also go into C Sharp to do that.

724
00:36:03,672 --> 00:36:06,934
But to make something accessible to a community of people

725
00:36:06,934 --> 00:36:09,875
that are gonna be building stuff and using it,

726
00:36:09,875 --> 00:36:12,197
documentation helps, but it is really important

727
00:36:12,197 --> 00:36:14,758
to make sure that it's as intuitive and easy to use

728
00:36:14,758 --> 00:36:15,938
as possible for new users.

729
00:36:15,938 --> 00:36:19,300
So, here we're looking at a list of commands.

730
00:36:20,992 --> 00:36:22,792
that should seem really simple.

731
00:36:22,792 --> 00:36:24,373
Create, guess you all, you wanna create some stuff,

732
00:36:24,373 --> 00:36:25,513
you gotta create command.

733
00:36:25,513 --> 00:36:27,434
You wanna edit some stuff, you got an edit command.

734
00:36:27,434 --> 00:36:29,914
You wanna get or query some information, you've got that.

735
00:36:29,914 --> 00:36:32,475
The user commands is an interesting aside,

736
00:36:32,475 --> 00:36:34,516
but it's a very reflective system.

737
00:36:34,516 --> 00:36:36,296
So the user commands actually helps us reflect

738
00:36:36,296 --> 00:36:38,137
into the scripting engine itself

739
00:36:38,137 --> 00:36:40,177
and modify parameters about the scripting environment.

740
00:36:40,177 --> 00:36:42,838
A bit crazy, but anyways, it's there.

741
00:36:42,838 --> 00:36:45,119
And also just various utilities that you'd wanna expose.

742
00:36:45,119 --> 00:36:47,800
So this is an example of that.

743
00:36:48,850 --> 00:36:51,131
So here you import that thin wrapper called FB.

744
00:36:51,131 --> 00:36:54,034
So with a thin wrapper imported,

745
00:36:54,034 --> 00:36:55,535
and obviously in your case,

746
00:36:55,535 --> 00:36:57,776
it could be called absolutely anything,

747
00:36:57,776 --> 00:36:59,598
I go with a two-letter designation,

748
00:36:59,598 --> 00:37:00,558
so it's easy to type,

749
00:37:00,558 --> 00:37:02,280
one-letter designation, too easy to conflict

750
00:37:02,280 --> 00:37:06,443
if someone else wanted to use a single variable name.

751
00:37:06,443 --> 00:37:09,125
But with FB imported,

752
00:37:09,125 --> 00:37:11,646
with that thin wrapper imported,

753
00:37:11,646 --> 00:37:12,727
we can do things like...

754
00:37:13,535 --> 00:37:17,937
As soon as we hit FB dot, we get that first list of what do you want to do?

755
00:37:17,937 --> 00:37:21,338
Do you want to get or create or what? So I want to get some information.

756
00:37:21,338 --> 00:37:22,259
So I hit get and they'll say well

757
00:37:22,259 --> 00:37:25,520
what do you want to get and it's like a whole list of assets of like you know

758
00:37:25,520 --> 00:37:29,482
do you want to get a mesh or a texture or what and you get that list and then you go well

759
00:37:29,482 --> 00:37:34,384
I want to get I just want to get assets from the data explorer selection.

760
00:37:34,384 --> 00:37:38,927
So that gives us a quick easy flowing path to actually get the information that we want.

761
00:37:40,947 --> 00:37:45,996
and here we can get a high level idea of how to build up a thin wrapper.

762
00:37:45,996 --> 00:37:50,844
For me, it's really easy to say that it helps to say, you know,

763
00:37:50,844 --> 00:37:54,310
if the sub-modules read like English, it's easier to follow.

764
00:37:54,944 --> 00:37:58,809
In this case, I don't know, some examples that I would pick out.

765
00:37:58,809 --> 00:38:03,554
So you have a level, a scene, and in that scene is some layers.

766
00:38:03,554 --> 00:38:09,080
So you can ask that question, you can say fb.getLayersFromScene,

767
00:38:09,080 --> 00:38:10,963
and then you can pass in maybe a filter to say,

768
00:38:10,963 --> 00:38:13,626
okay, only get me the layers with this string in it or something.

769
00:38:13,626 --> 00:38:14,827
I think you get the idea there.

770
00:38:17,330 --> 00:38:20,951
And we saw that video earlier of executing scripts,

771
00:38:20,951 --> 00:38:24,613
seeing that update not only in the properties of an object,

772
00:38:24,613 --> 00:38:26,494
but also update in the editor.

773
00:38:26,494 --> 00:38:29,315
And in this case, it's just reiterating that point.

774
00:38:29,315 --> 00:38:31,516
So here we're saying, yep, we can query assets,

775
00:38:31,516 --> 00:38:34,517
we can query components, we can pare down into the data

776
00:38:34,517 --> 00:38:36,638
and find the information that we want.

777
00:38:36,638 --> 00:38:38,759
And as soon as we have access to that data,

778
00:38:38,759 --> 00:38:39,299
we can modify it.

779
00:38:39,299 --> 00:38:43,301
So that is what we've accomplished with all of that.

780
00:38:43,301 --> 00:38:44,362
And the interesting thing too,

781
00:38:44,362 --> 00:38:46,763
and I'll touch on it coming up here,

782
00:38:46,763 --> 00:38:47,103
is...

783
00:38:47,560 --> 00:38:50,765
especially on the Dragon Age side of things.

784
00:38:50,765 --> 00:38:54,010
It's really easy to spend a small amount of time,

785
00:38:54,010 --> 00:38:58,817
but still, maybe that takes a couple minutes to write.

786
00:38:58,817 --> 00:38:59,478
To accomplish what?

787
00:38:59,478 --> 00:39:01,341
That you could change with a slider, right?

788
00:39:02,050 --> 00:39:05,813
So from a tech art perspective, it always gets a bit tricky

789
00:39:05,813 --> 00:39:08,175
to justify how much time to spend scripting something

790
00:39:08,175 --> 00:39:10,216
that you can do very readily or easily with the UI.

791
00:39:10,216 --> 00:39:14,399
So the key point is always tracing it back to

792
00:39:14,399 --> 00:39:16,981
how you batch script that and automate it over

793
00:39:16,981 --> 00:39:19,083
tens or thousands of assets there.

794
00:39:19,083 --> 00:39:22,265
So high level goals of implementing a thin wrapper.

795
00:39:22,265 --> 00:39:25,087
Exposing commonly used commands.

796
00:39:25,087 --> 00:39:28,089
You just get a strong base, a strong starting point.

797
00:39:28,607 --> 00:39:31,709
Abstract queries to easily access assets.

798
00:39:31,709 --> 00:39:34,712
So if that same functionality existed,

799
00:39:34,712 --> 00:39:36,854
but it was like nested in some, you know,

800
00:39:36,854 --> 00:39:38,976
some name space inside of some object

801
00:39:38,976 --> 00:39:43,440
inside of some other object, sub-object.

802
00:39:43,440 --> 00:39:45,422
If that functionality is buried away,

803
00:39:45,422 --> 00:39:46,863
just to expose it at a higher level,

804
00:39:46,863 --> 00:39:48,945
especially if it's commonly used.

805
00:39:48,945 --> 00:39:51,027
And then provide a consistent and intuitive way

806
00:39:51,027 --> 00:39:53,369
to get started with scripting.

807
00:39:53,369 --> 00:39:54,670
Alright, production examples.

808
00:39:55,667 --> 00:39:59,827
So all of that was the implementation details

809
00:39:59,827 --> 00:40:02,688
of how to hook up a scripting solution in an editor,

810
00:40:02,688 --> 00:40:03,848
specifically a .NET editor.

811
00:40:03,848 --> 00:40:07,849
But what value does any of that have

812
00:40:07,849 --> 00:40:10,110
if we're not actually using it in production

813
00:40:10,110 --> 00:40:13,210
and creating something that can be appreciated?

814
00:40:13,210 --> 00:40:15,771
So here we're gonna look at some production examples

815
00:40:15,771 --> 00:40:17,291
from Dragon Age Inquisition,

816
00:40:17,291 --> 00:40:18,552
Garden Warfare, and Battlefield.

817
00:40:21,301 --> 00:40:25,724
Should be noted that across the community of people using Frostbite IDA

818
00:40:25,724 --> 00:40:30,728
There's maybe about 200 or more people using

819
00:40:30,728 --> 00:40:35,692
FB scripts creating them and writing them this includes tech artists designers

820
00:40:35,692 --> 00:40:40,455
engineers a surprisingly wide set of people and

821
00:40:40,455 --> 00:40:49,282
They're using it to help make you know the redundant or repetitive parts of their job. You know a bit faster and less error-prone, so

822
00:40:49,282 --> 00:40:50,223
Let's take a look at that

823
00:40:53,153 --> 00:40:54,454
So, Garden Warfare is first up.

824
00:40:54,454 --> 00:40:57,314
And before I go running down that road going,

825
00:40:57,314 --> 00:40:59,835
hey, look at what we did on Garden Warfare.

826
00:40:59,835 --> 00:41:02,556
I know, because I sit through these sessions too,

827
00:41:02,556 --> 00:41:04,096
in the back of my mind is going,

828
00:41:04,096 --> 00:41:05,716
well, how can I use that?

829
00:41:05,716 --> 00:41:08,297
What does that mean to me?

830
00:41:08,297 --> 00:41:11,178
And so, when I go into this detail,

831
00:41:11,178 --> 00:41:15,099
it's important for me to try and find a way

832
00:41:15,099 --> 00:41:17,839
that how does this apply to someone

833
00:41:17,839 --> 00:41:20,260
outside of Zomboss Academy?

834
00:41:21,961 --> 00:41:30,085
EA or wherever. So let's take a look. So when I mentioned earlier that on Garden Warfare

835
00:41:30,085 --> 00:41:36,528
that we set up thousands of assets automatically, what does that mean? It's like, okay, well

836
00:41:36,528 --> 00:41:40,269
you click a button and you get a thousand assets and they're done. And it's not quite

837
00:41:40,269 --> 00:41:40,770
what I meant.

838
00:41:41,170 --> 00:41:44,953
What I mean is that you set up the framework for those assets.

839
00:41:44,953 --> 00:41:47,415
And what does a framework of an asset mean?

840
00:41:47,415 --> 00:41:50,096
We thought that it was really simple, right?

841
00:41:50,096 --> 00:41:53,058
Well, most of us here, I'm guessing, are savvy enough to realize that

842
00:41:53,058 --> 00:41:56,521
anything that you see rendered on screen isn't just one thing.

843
00:41:56,521 --> 00:41:59,763
It's composed of many. And what are those things?

844
00:41:59,763 --> 00:42:01,144
We start with concept art. We get it.

845
00:42:01,144 --> 00:42:05,187
We have an idea, maybe as a Word document or something.

846
00:42:05,187 --> 00:42:08,569
And then it gets represented as some concept.

847
00:42:09,334 --> 00:42:11,355
Again, it could be text or it could be an image.

848
00:42:11,355 --> 00:42:14,378
And then when we have that concept,

849
00:42:14,378 --> 00:42:17,400
we start creating something, something physical,

850
00:42:17,400 --> 00:42:18,441
but it's still not in the game.

851
00:42:18,441 --> 00:42:20,563
It's just like, okay, this is our first steps towards this.

852
00:42:20,563 --> 00:42:23,645
And we create models, sometimes really high-res models,

853
00:42:23,645 --> 00:42:26,488
and we use ZBrush or whatever the case may be

854
00:42:26,488 --> 00:42:28,289
to sculpt something that's way too big

855
00:42:28,289 --> 00:42:30,351
to actually fit in the game.

856
00:42:30,351 --> 00:42:31,572
We build up textures, and the textures

857
00:42:31,572 --> 00:42:32,913
are way higher resolution

858
00:42:32,913 --> 00:42:35,375
than what we'll actually use in the game.

859
00:42:35,375 --> 00:42:38,057
And we start building up this really nice-looking thing.

860
00:42:39,270 --> 00:42:42,470
of diffuse and specular normals and all of that goodness.

861
00:42:42,470 --> 00:42:44,831
And then we start applying it with shaders and materials

862
00:42:44,831 --> 00:42:47,551
and we start building up something that we're starting

863
00:42:47,551 --> 00:42:50,092
to say, hey, I get it, this is what we're making.

864
00:42:50,092 --> 00:42:52,312
And then we start seeing something in the game eventually

865
00:42:52,312 --> 00:42:54,453
with, but maybe it's not moving yet, maybe it's just like,

866
00:42:54,453 --> 00:42:56,633
oh, this is how it renders with this engine,

867
00:42:56,633 --> 00:42:58,953
with these lighting conditions or whatever.

868
00:42:58,953 --> 00:43:03,354
And then we, excuse me, hook up gameplay,

869
00:43:03,354 --> 00:43:04,875
like how does it respond to button clicks,

870
00:43:04,875 --> 00:43:08,695
what is the animation doing, the visual effects.

871
00:43:09,422 --> 00:43:14,005
obviously all of that requires skeletons and character rigs.

872
00:43:14,005 --> 00:43:16,586
And then the component parts need to get rigged and how they

873
00:43:16,586 --> 00:43:24,070
get swapped in and out. So yeah, we've got this guy running around

874
00:43:24,070 --> 00:43:27,172
and he's got a state flow and how he responds to all of that

875
00:43:27,172 --> 00:43:29,573
kind of stuff. And then we've got audio as well. So that

876
00:43:29,573 --> 00:43:37,378
stuff, even though it could be a really simple thing, can be

877
00:43:37,378 --> 00:43:38,458
quite complex. So...

878
00:43:39,351 --> 00:43:42,294
It's also not something that you understand exactly

879
00:43:42,294 --> 00:43:45,096
how it all connects together at the beginning of a project.

880
00:43:45,096 --> 00:43:46,077
You figure it out as you go.

881
00:43:46,077 --> 00:43:47,158
You go like, does this work?

882
00:43:47,158 --> 00:43:48,759
Does this connect over here?

883
00:43:48,759 --> 00:43:51,381
And as you kind of build up enough assets

884
00:43:51,381 --> 00:43:53,443
and you start to see how it all connects together,

885
00:43:53,443 --> 00:43:54,624
you start identifying patterns.

886
00:43:54,624 --> 00:43:56,746
And you're going, okay, I get it.

887
00:43:56,746 --> 00:43:58,747
You know, this type of a thing

888
00:43:58,747 --> 00:44:00,729
is always gonna connect this way.

889
00:44:00,729 --> 00:44:03,131
The interesting thing is after you actually

890
00:44:03,131 --> 00:44:06,294
start to digest that and you start to appreciate just,

891
00:44:06,294 --> 00:44:08,295
okay, this is what we're doing right now.

892
00:44:09,417 --> 00:44:11,238
If you take a moment and pause right there,

893
00:44:11,238 --> 00:44:13,219
you realize that it's actually really complex

894
00:44:13,219 --> 00:44:15,261
because you came about it organically

895
00:44:15,261 --> 00:44:17,162
and you got to that point not because you're like,

896
00:44:17,162 --> 00:44:18,723
ah, this is the best way to design

897
00:44:18,723 --> 00:44:21,424
how everything should get connected together.

898
00:44:21,424 --> 00:44:22,625
It's like, no, this is actually what,

899
00:44:22,625 --> 00:44:23,645
you know, it's a creative process.

900
00:44:23,645 --> 00:44:27,227
If that diagram doesn't make your brain melt,

901
00:44:27,227 --> 00:44:31,110
the idea is that each one of those nodes

902
00:44:31,110 --> 00:44:34,332
has a lot of properties and additional values beneath it yet.

903
00:44:34,332 --> 00:44:36,853
So it's less of an array of things.

904
00:44:36,853 --> 00:44:38,554
It's more of a matrix that goes quite deep.

905
00:44:39,235 --> 00:44:40,856
And that's just a single asset.

906
00:44:40,856 --> 00:44:42,797
So you're like, wow, okay.

907
00:44:42,797 --> 00:44:45,199
You know, there's a lot of button clicking going on

908
00:44:45,199 --> 00:44:47,000
just to connect the dots.

909
00:44:47,000 --> 00:44:49,541
For an artist or a designer or someone

910
00:44:49,541 --> 00:44:50,882
to go, okay, I'm gonna build something.

911
00:44:50,882 --> 00:44:52,363
And every time they're building something,

912
00:44:52,363 --> 00:44:53,783
they're going, okay, this connects to that,

913
00:44:53,783 --> 00:44:55,384
this connects to that, this connects to that.

914
00:44:55,384 --> 00:44:56,865
That takes a lot of time.

915
00:44:56,865 --> 00:44:59,266
So what we did on this project was

916
00:44:59,266 --> 00:45:00,607
once we had that figured out

917
00:45:00,607 --> 00:45:03,429
and we had a way that was consistent enough,

918
00:45:03,429 --> 00:45:05,030
we could script how a lot of this stuff

919
00:45:05,030 --> 00:45:08,511
gets connected together using placeholder assets.

920
00:45:09,565 --> 00:45:12,147
So we build up a volume, say for a head prop

921
00:45:12,147 --> 00:45:14,169
or something like that, and that volume would say

922
00:45:14,169 --> 00:45:16,851
that's where that head prop, be it a hat or something,

923
00:45:16,851 --> 00:45:19,053
needs to exist within.

924
00:45:19,053 --> 00:45:21,194
It's just parameters to say, here's your guidelines,

925
00:45:21,194 --> 00:45:23,837
but this is where it's gonna exist,

926
00:45:23,837 --> 00:45:24,877
that's how it's gonna function,

927
00:45:24,877 --> 00:45:25,938
but it's not the real asset yet.

928
00:45:25,938 --> 00:45:28,440
And then we'd throw the concept art on it,

929
00:45:28,440 --> 00:45:29,621
and it would look ugly.

930
00:45:29,621 --> 00:45:33,244
I mean, a concept art mapped onto some geometry.

931
00:45:33,244 --> 00:45:34,986
It looks completely out of place,

932
00:45:34,986 --> 00:45:36,947
but you get the idea of what it's gonna turn into

933
00:45:36,947 --> 00:45:37,448
at a glance.

934
00:45:39,491 --> 00:45:41,374
And then we do a whole bunch of other things

935
00:45:41,374 --> 00:45:46,039
But the end of all of that stuff is that we could use a framework of real assets

936
00:45:46,039 --> 00:45:49,743
So we could use real geometry real textures all of that kind of stuff. It just doesn't look

937
00:45:49,743 --> 00:45:51,245
The way it should yet

938
00:45:51,955 --> 00:45:54,055
And the things that that tells us is,

939
00:45:54,055 --> 00:45:55,836
you know, how much memory is it gonna consume?

940
00:45:55,836 --> 00:45:58,677
How is that gonna perform in the runtime?

941
00:45:58,677 --> 00:46:00,518
How are you gonna swap these things out?

942
00:46:00,518 --> 00:46:02,398
How is that gonna interface with the UI?

943
00:46:02,398 --> 00:46:04,839
How is that gonna work with the progression of the game

944
00:46:04,839 --> 00:46:07,860
as you unlock things or get weapon upgrades

945
00:46:07,860 --> 00:46:08,821
or whatever the case may be?

946
00:46:08,821 --> 00:46:11,602
All of those questions that usually you don't get to

947
00:46:11,602 --> 00:46:14,363
by the time, like it usually comes after you've created

948
00:46:14,363 --> 00:46:17,344
all of this content, you can front load a lot of that.

949
00:46:18,645 --> 00:46:22,949
That was a really cool success and a learning experience from that project.

950
00:46:22,949 --> 00:46:26,352
There's a few more guys kicking around.

951
00:46:26,352 --> 00:46:29,855
And that's just to highlight that it isn't always just physical geometry.

952
00:46:29,855 --> 00:46:35,261
Sometimes it's particle effects or visual effects or sometimes it's audio or sometimes...

953
00:46:35,261 --> 00:46:37,643
I mean, it spans across all of those domains.

954
00:46:37,643 --> 00:46:40,466
So that is another thing that I did want to mention was that...

955
00:46:41,074 --> 00:46:45,637
beyond actually being able to get an early look at how

956
00:46:45,637 --> 00:46:48,939
everything fits together, it also helps smooth over its

957
00:46:48,939 --> 00:46:51,641
production grease, if you will, so that a lot of these different

958
00:46:51,641 --> 00:46:54,804
domains can be working and they can be building stuff and they

959
00:46:54,804 --> 00:46:57,626
don't have to be waiting on the next person to finish whatever

960
00:46:57,626 --> 00:47:00,388
it is that they're doing because we have a placeholder for that.

961
00:47:00,388 --> 00:47:05,532
Alright, Battlefield. So Battlefield, Daniel Rashidi at

962
00:47:05,532 --> 00:47:08,634
Battlefield, a very talented technical artist.

963
00:47:09,088 --> 00:47:13,492
created something that was way beyond anything I had imagined

964
00:47:13,492 --> 00:47:15,033
FBScript would be used for,

965
00:47:15,033 --> 00:47:19,076
and he found a lot of new ways to utilize this technology

966
00:47:19,076 --> 00:47:21,538
that I hadn't seen it used before as well.

967
00:47:21,538 --> 00:47:25,601
So that was including using loosely bound XAML

968
00:47:25,601 --> 00:47:28,644
and .NET DLLs as I'd mentioned earlier.

969
00:47:28,644 --> 00:47:30,765
So not everything had to be written in scripting.

970
00:47:30,765 --> 00:47:33,007
Some of this stuff, some of the components of it

971
00:47:33,007 --> 00:47:34,628
could be written somewhere else

972
00:47:34,628 --> 00:47:36,130
and then imported into this ecosystem.

973
00:47:38,653 --> 00:47:41,295
The cool thing is, being inside of that ecosystem,

974
00:47:41,295 --> 00:47:43,596
you're now in a highly iterative environment.

975
00:47:43,596 --> 00:47:46,878
So you can take some of those well-understood

976
00:47:46,878 --> 00:47:48,699
component pieces and then add them into this.

977
00:47:48,699 --> 00:47:50,360
So let's see that in action.

978
00:47:50,360 --> 00:47:53,502
An interesting thing is, we're gonna look at something

979
00:47:53,502 --> 00:47:56,224
that Daniel made for Battlefield.

980
00:47:56,224 --> 00:47:58,425
It's called Level Scanner, and he's made a lot

981
00:47:58,425 --> 00:47:59,826
of different types of tools.

982
00:47:59,826 --> 00:48:01,007
We're looking at that.

983
00:48:02,174 --> 00:48:04,655
and it was used to great success on Battlefield

984
00:48:04,655 --> 00:48:07,036
for understanding their large data set.

985
00:48:07,036 --> 00:48:09,177
But it was also used as well on Dragon Age,

986
00:48:09,177 --> 00:48:10,178
and let's take a look at that.

987
00:48:10,178 --> 00:48:10,558
So here's a video.

988
00:48:10,558 --> 00:48:11,538
Alright, so that's the level scanner,

989
00:48:11,538 --> 00:48:12,799
and it kind of picked up a little bit late there,

990
00:48:12,799 --> 00:48:15,440
but we'll come back to the starting thing just in a moment.

991
00:48:27,823 --> 00:48:31,325
So the whole thing there is that you've got all of this information about your data.

992
00:48:31,325 --> 00:48:33,587
A lot of this information is abstract.

993
00:48:33,587 --> 00:48:35,508
It's not ever in one place.

994
00:48:35,508 --> 00:48:40,252
It's using information from a whole bunch of different places to figure stuff out.

995
00:48:40,252 --> 00:48:42,513
You can sort it based on a number of different parameters.

996
00:48:42,513 --> 00:48:47,016
And in this particular case, it's found an asset that has reasonably well-implemented

997
00:48:47,016 --> 00:48:49,738
LODs, but it's used a lot in one given level.

998
00:48:50,352 --> 00:48:52,173
That was the rock example.

999
00:48:52,173 --> 00:48:54,593
And then this other example right here for the door,

1000
00:48:54,593 --> 00:48:56,694
where it's only used once in a level,

1001
00:48:56,694 --> 00:48:59,694
is missing the, it has an LOD,

1002
00:48:59,694 --> 00:49:02,575
but the LOD is not optimized as much as what it could be.

1003
00:49:02,575 --> 00:49:04,835
So this gives you a sense of going,

1004
00:49:04,835 --> 00:49:06,976
ah, we've got all of this data.

1005
00:49:06,976 --> 00:49:09,657
We're going to dedicate our time and money and efforts

1006
00:49:09,657 --> 00:49:10,937
so that we're going to make this game run

1007
00:49:10,937 --> 00:49:12,137
as efficiently as possible.

1008
00:49:13,071 --> 00:49:15,313
But we can't just start with the very first asset we see

1009
00:49:15,313 --> 00:49:16,253
and then go from there.

1010
00:49:16,253 --> 00:49:18,475
We want to have a sense of where to start first.

1011
00:49:18,475 --> 00:49:22,537
And so all of this UI and everything else,

1012
00:49:22,537 --> 00:49:24,979
he put into the hands of the art teams,

1013
00:49:24,979 --> 00:49:26,240
and they could get a better sense

1014
00:49:26,240 --> 00:49:27,601
of how to prioritize their efforts

1015
00:49:27,601 --> 00:49:29,502
of where they wanted to spend time optimizing

1016
00:49:29,502 --> 00:49:31,703
for runtime performance and memory and all that.

1017
00:49:38,195 --> 00:49:41,239
So that takes us as a bit of a segue to Dragon Age

1018
00:49:41,239 --> 00:49:43,642
because we saw some Dragon Age assets there.

1019
00:49:43,642 --> 00:49:45,985
So Jeff Vannell, another really smart guy,

1020
00:49:45,985 --> 00:49:48,789
and really practical too.

1021
00:49:48,789 --> 00:49:50,831
So he had to approach solving problems

1022
00:49:50,831 --> 00:49:51,913
from many different angles.

1023
00:49:51,913 --> 00:49:54,336
And obviously not everyone is gonna include FBScript.

1024
00:49:54,884 --> 00:49:57,987
And another key thing too is that when you set out,

1025
00:49:57,987 --> 00:50:00,649
you're not going to be creating content really

1026
00:50:00,649 --> 00:50:02,110
using scripting or automated process.

1027
00:50:02,110 --> 00:50:02,551
I mean, you can.

1028
00:50:02,551 --> 00:50:04,232
You can use procedural techniques and everything else,

1029
00:50:04,232 --> 00:50:06,815
but ultimately a creative process is going to be involved.

1030
00:50:06,815 --> 00:50:09,837
And that's going to be the starting point anyways.

1031
00:50:09,837 --> 00:50:13,741
So the big thing to point out here is that on Dragon Age,

1032
00:50:14,979 --> 00:50:19,841
I mean, my mind short-circuited when I was looking at that project and looking at the

1033
00:50:19,841 --> 00:50:25,304
data sets and trying to understand even what someone could do to try and optimize for all

1034
00:50:25,304 --> 00:50:27,165
of the different platforms that it was released on.

1035
00:50:27,165 --> 00:50:33,868
And when you look at almost 20,000 different visual effects, 20,000 different assets in

1036
00:50:33,868 --> 00:50:37,570
the visual effects folder alone, it's pretty phenomenal.

1037
00:50:37,570 --> 00:50:40,331
And you click on one of those things, it's like, okay, let's look at this.

1038
00:50:40,827 --> 00:50:45,369
Dragon VFX for when it lands hard and then you go okay open that thing up and

1039
00:50:45,369 --> 00:50:48,411
you get like all of these other assets that it's referencing in there so you've

1040
00:50:48,411 --> 00:50:52,052
got oh I've got this debris and dust and all of that kind of stuff and you click

1041
00:50:52,052 --> 00:50:55,134
on one of those and you go into there and it's got like all of these things

1042
00:50:55,134 --> 00:50:58,795
of how to actually render and animate and do all of that kind of stuff with

1043
00:50:58,795 --> 00:51:04,258
the visual effects and then you've got all of that information for each of the

1044
00:51:04,258 --> 00:51:06,078
different platforms that it's targeted towards.

1045
00:51:06,787 --> 00:51:09,348
It's a bit much, and I think what they did

1046
00:51:09,348 --> 00:51:12,010
was a really cool thing, is they just targeted ultra quality.

1047
00:51:12,010 --> 00:51:13,230
They just try and build this thing up

1048
00:51:13,230 --> 00:51:15,912
for the best possible visual results that they could,

1049
00:51:15,912 --> 00:51:19,834
and then they would do a very smart approach,

1050
00:51:19,834 --> 00:51:23,696
a pass on it, to try and get it to progressively

1051
00:51:23,696 --> 00:51:27,358
be as high visual quality as possible

1052
00:51:27,358 --> 00:51:29,540
while meeting the memory and performance restraints

1053
00:51:29,540 --> 00:51:30,320
as you look at the lower end systems.

1054
00:51:30,320 --> 00:51:31,981
Another key thing, too, about this is that.

1055
00:51:38,168 --> 00:51:39,369
I like his quote here,

1056
00:51:39,369 --> 00:51:41,751
is if the process is technical and repetitive,

1057
00:51:41,751 --> 00:51:44,473
we can script it to save time and reduce user errors.

1058
00:51:44,473 --> 00:51:46,054
And it's that, and reduce user errors

1059
00:51:46,054 --> 00:51:47,455
that really resonates with me too,

1060
00:51:47,455 --> 00:51:48,536
because it's not just about,

1061
00:51:48,536 --> 00:51:49,777
hey, we got this done faster.

1062
00:51:49,777 --> 00:51:52,299
You can have an army of people

1063
00:51:52,299 --> 00:51:53,980
getting something done faster,

1064
00:51:53,980 --> 00:51:56,602
but you also end up with a lot of errors,

1065
00:51:56,602 --> 00:51:58,804
so it's just a nice thing that we can use scripting for.

1066
00:51:58,804 --> 00:52:01,106
And if I look at this next slide here too,

1067
00:52:01,106 --> 00:52:04,388
talks to some of the BioWare's experiences with this.

1068
00:52:05,410 --> 00:52:06,851
And again, talking to the point, too,

1069
00:52:06,851 --> 00:52:09,011
of how much time do you spend scripting something

1070
00:52:09,011 --> 00:52:12,652
versus, you know, if an army of people,

1071
00:52:12,652 --> 00:52:15,212
or if even just a few people just spent, like,

1072
00:52:15,212 --> 00:52:17,413
really a lot of time working on something.

1073
00:52:17,413 --> 00:52:20,354
And there's a tricky balancing act to understand,

1074
00:52:20,354 --> 00:52:22,474
oh, maybe I spent way too much time doing something

1075
00:52:22,474 --> 00:52:24,634
that didn't really save a lot of time.

1076
00:52:24,634 --> 00:52:28,015
So, it was Dave Schaefer, who's the lead SDET

1077
00:52:28,015 --> 00:52:31,496
at BioWare there, did a return on investment.

1078
00:52:32,136 --> 00:52:40,305
analysis and they measured that they saved 30 months based on just QA efforts alone through

1079
00:52:40,305 --> 00:52:45,891
FB scripts. And not every script saved time. So, actually if I look at that last slide

1080
00:52:45,891 --> 00:52:49,195
there again, there's a couple other things I wanted to mention too.

1081
00:52:49,780 --> 00:52:52,222
is they had to ask other questions.

1082
00:52:52,222 --> 00:52:53,843
Like, some scripts that you're running

1083
00:52:53,843 --> 00:52:57,326
are actually doing things that are physically not possible

1084
00:52:57,326 --> 00:52:59,168
no matter how many button clicks you throw at it.

1085
00:52:59,168 --> 00:53:01,570
So there are some scripts like that.

1086
00:53:01,570 --> 00:53:02,891
And so to try to make that distinction of

1087
00:53:02,891 --> 00:53:04,052
could this have been done by hand?

1088
00:53:04,052 --> 00:53:05,753
No, this is new functionality added

1089
00:53:05,753 --> 00:53:07,515
that we just couldn't have even

1090
00:53:07,515 --> 00:53:08,696
tried to take on without this.

1091
00:53:09,367 --> 00:53:12,488
And then in addition to that, of all of the things created,

1092
00:53:12,488 --> 00:53:14,049
if we see in the lower end spectrum,

1093
00:53:14,049 --> 00:53:16,611
there were scripts that were arguably a waste of time.

1094
00:53:16,611 --> 00:53:19,352
So maybe more time was spent creating something

1095
00:53:19,352 --> 00:53:22,074
and it wasn't used as much as it was anticipated.

1096
00:53:22,074 --> 00:53:26,036
And you didn't get your return on investment there.

1097
00:53:26,036 --> 00:53:28,558
But by far and large, you're going to find the medium.

1098
00:53:29,238 --> 00:53:31,179
is gonna return a significant value.

1099
00:53:31,179 --> 00:53:33,020
And then every once in a while you hit the jackpot

1100
00:53:33,020 --> 00:53:35,221
where you're like, wow, that was really taking us

1101
00:53:35,221 --> 00:53:37,501
a lot of time by hand, but we really saved a lot of time.

1102
00:53:37,501 --> 00:53:40,022
And so you see those edge cases there as well.

1103
00:53:40,022 --> 00:53:44,184
Oh, and one other thing too I wanted to point out too

1104
00:53:44,184 --> 00:53:49,186
on this slide is the quote here by Darren Clark.

1105
00:53:49,186 --> 00:53:54,108
And just a key thing there is the fact that

1106
00:53:54,108 --> 00:53:55,829
when you free up the time on your team,

1107
00:53:56,729 --> 00:53:58,891
you can spend more time testing other areas.

1108
00:53:58,891 --> 00:54:01,293
So it's, if you kind of, applying your scripts

1109
00:54:01,293 --> 00:54:04,075
to those technical things that can be automated,

1110
00:54:04,075 --> 00:54:05,516
and that require that technical test,

1111
00:54:05,516 --> 00:54:07,878
the things that you need creative people,

1112
00:54:07,878 --> 00:54:09,520
and in this case QA are creative people

1113
00:54:09,520 --> 00:54:11,942
that help us understand what the quality of a product,

1114
00:54:11,942 --> 00:54:14,904
in this case, gameplay experiences are,

1115
00:54:14,904 --> 00:54:16,205
we can get their time dedicated

1116
00:54:16,205 --> 00:54:17,807
in a much more effective way in that way.

1117
00:54:17,807 --> 00:54:18,447
Alright, so, next steps.

1118
00:54:24,507 --> 00:54:30,513
I've talked about, well, let's see here, I've talked a while about stuff in the past and

1119
00:54:30,513 --> 00:54:32,615
that stuff, I mean, it's a bit tricky.

1120
00:54:32,615 --> 00:54:36,158
I'm a generalist and I think of my mind like a revolving door.

1121
00:54:36,158 --> 00:54:40,042
So that stuff comes in and then it goes out and then I have to really try hard to go back

1122
00:54:40,042 --> 00:54:41,884
and dig it up and understand it again.

1123
00:54:42,938 --> 00:54:44,900
I'm always far more excited about the next steps.

1124
00:54:44,900 --> 00:54:48,543
So this stuff has me really excited going forward.

1125
00:54:48,543 --> 00:54:51,025
It's, okay, we've done some stuff and it was valuable

1126
00:54:51,025 --> 00:54:52,466
and it's shipped games and that's cool,

1127
00:54:52,466 --> 00:54:54,127
but what does the future hold

1128
00:54:54,127 --> 00:54:55,528
and what are we gonna do with that?

1129
00:54:55,528 --> 00:54:58,811
So Michael Sharp at Criterion has created something

1130
00:54:58,811 --> 00:55:00,672
that we're planning to use internally.

1131
00:55:00,672 --> 00:55:03,515
It's called, he's named it Community Toolbox.

1132
00:55:04,100 --> 00:55:08,163
While this is not immediately applicable to this audience,

1133
00:55:08,163 --> 00:55:10,365
you're not going, oh cool, I want to use Community Toolbox,

1134
00:55:10,365 --> 00:55:12,627
it's not an application that we're trying to pitch or sell

1135
00:55:12,627 --> 00:55:15,870
or it's going to be used outside of EA,

1136
00:55:15,870 --> 00:55:18,872
but the idea here is behind how to connect

1137
00:55:18,872 --> 00:55:20,914
a lot of people that are building stuff

1138
00:55:20,914 --> 00:55:24,097
and then wanting to share it between teams, studios,

1139
00:55:24,097 --> 00:55:26,098
domains, whatever the case may be.

1140
00:55:26,098 --> 00:55:27,880
And so that's what I want to look at here,

1141
00:55:27,880 --> 00:55:29,581
is how to best facilitate that.

1142
00:55:29,581 --> 00:55:31,823
So I've got a video, let's take a peek.

1143
00:55:36,601 --> 00:55:40,183
Alright, so he set up a web portal, and that's really nice.

1144
00:55:40,183 --> 00:55:43,584
Everyone can access it across the company.

1145
00:55:43,584 --> 00:55:46,525
We can download this tool.

1146
00:55:46,525 --> 00:55:49,987
The installation process is fairly straightforward.

1147
00:55:49,987 --> 00:55:54,269
Not a lot of options or buttons or fields or things

1148
00:55:54,269 --> 00:55:56,990
to fill up, we just download it, we launch FrostEd,

1149
00:55:56,990 --> 00:55:59,812
it matches up the environment system there with that.

1150
00:56:00,944 --> 00:56:08,486
And then we've got that new tool that's available in the taskbar. So accessibility is always really key

1151
00:56:08,486 --> 00:56:09,686
Here we're looking at a

1152
00:56:09,686 --> 00:56:16,808
Look dev visual environment. We're just getting a feel for how certain things render behave with camera and all that kind of stuff

1153
00:56:16,808 --> 00:56:20,549
When you normally move a camera around in frosted and most editors you're using a mouse

1154
00:56:20,549 --> 00:56:26,510
And you're using a mouse and probably the alt key or something like that and clicking and dragging and orbiting and zooming and trucking and all

1155
00:56:26,510 --> 00:56:26,730
that

1156
00:56:27,479 --> 00:56:30,681
That's the normal way, but if you wanted to use a controller you could.

1157
00:56:30,681 --> 00:56:33,723
Now this isn't functionality that was created by the FrostEd team.

1158
00:56:33,723 --> 00:56:39,527
It's something that Mike hooked up with a bunch of other component pieces here

1159
00:56:39,527 --> 00:56:42,168
to interface with an Xbox controller in the editor.

1160
00:56:42,168 --> 00:56:45,691
So how did he do that? Well, without closing FrostEd there,

1161
00:56:45,691 --> 00:56:48,953
he just browsed on the website there that had this available,

1162
00:56:48,953 --> 00:56:50,774
clicked on that DLL or that plugin.

1163
00:56:51,654 --> 00:56:55,964
and clicked install and then went back to Frosted and there it is available. So now it's the

1164
00:56:55,964 --> 00:57:00,495
Xbox controller doing all sorts of additional functionality like tilt and all of that kind of stuff.

1165
00:57:02,762 --> 00:57:07,845
So again, less about the exact specifics of what's going on right here, and more about the idea behind,

1166
00:57:07,845 --> 00:57:14,248
hey, when you have a framework that actually supports scripting, there's more to it than just scripting.

1167
00:57:14,248 --> 00:57:20,331
There are all these other kind of hooks that you can plug in various plugins into, no pun intended,

1168
00:57:20,331 --> 00:57:23,473
and a lot of additional functionality there.

1169
00:57:24,360 --> 00:57:24,921
So that's cool.

1170
00:57:24,921 --> 00:57:28,102
It has something that's really accessible.

1171
00:57:28,102 --> 00:57:30,504
But this other thing right here is really key too.

1172
00:57:30,504 --> 00:57:33,906
And this is something that he's created called ScriptPad.

1173
00:57:33,906 --> 00:57:38,788
And the way this functions is inside of that same ecosystem,

1174
00:57:38,788 --> 00:57:42,590
the idea of being able to browse the tools and things

1175
00:57:42,590 --> 00:57:46,492
that other people are writing across multiple teams.

1176
00:57:46,492 --> 00:57:50,274
And then when you find something that you're interested or want

1177
00:57:50,274 --> 00:57:53,156
to actually test out, that it's readily available there

1178
00:57:53,156 --> 00:57:54,177
right inside of the editor.

1179
00:57:56,406 --> 00:57:58,367
So in this case, we've got a test camera there

1180
00:57:58,367 --> 00:58:01,009
that we're pulling down as a test from BioWare,

1181
00:58:01,009 --> 00:58:03,130
and we're going, okay, cool, we've got a slider here,

1182
00:58:03,130 --> 00:58:06,392
and it's adjusting the zoom of the camera.

1183
00:58:06,392 --> 00:58:08,073
We can look at the edit script.

1184
00:58:08,073 --> 00:58:09,634
So we can peek behind the functionality

1185
00:58:09,634 --> 00:58:11,636
of any given tool there.

1186
00:58:11,636 --> 00:58:14,337
And this is all inside the editor,

1187
00:58:14,337 --> 00:58:17,199
so it's not like we need to have Visual Studio open

1188
00:58:17,199 --> 00:58:18,860
or that we need to have any other kind of,

1189
00:58:18,860 --> 00:58:21,782
a bunch of stuff to go and figure out

1190
00:58:21,782 --> 00:58:23,023
how was something done.

1191
00:58:23,023 --> 00:58:25,024
All of that stuff is packaged up together there.

1192
00:58:28,777 --> 00:58:31,058
And then, because we had previously downloaded

1193
00:58:31,058 --> 00:58:33,220
the script pad, we don't need to do that again.

1194
00:58:33,220 --> 00:58:34,741
So it's just illustrating that we can always grab

1195
00:58:34,741 --> 00:58:36,682
any existing tool that's on the machine,

1196
00:58:36,682 --> 00:58:38,723
or we can always grab an updated version of it.

1197
00:58:38,723 --> 00:58:41,325
And in this particular example, we're going, okay,

1198
00:58:41,325 --> 00:58:43,847
well, it's common in a pipeline to get a GUID

1199
00:58:43,847 --> 00:58:45,848
or some sort of reference that isn't exactly

1200
00:58:45,848 --> 00:58:47,529
the name of an object.

1201
00:58:47,529 --> 00:58:50,451
So someone created a tool that would allow us

1202
00:58:50,451 --> 00:58:53,053
to take a GUID, put that into a simple text field,

1203
00:58:53,053 --> 00:58:55,154
hit a button, and it would find where that,

1204
00:58:55,154 --> 00:58:57,456
the asset using that GUID is in a scene

1205
00:58:57,456 --> 00:58:58,437
and frame it in selection.

1206
00:58:59,802 --> 00:59:03,304
And then we can look at the code behind that as well.

1207
00:59:03,304 --> 00:59:05,766
And it's a script and it references a whole bunch of stuff,

1208
00:59:05,766 --> 00:59:07,026
but also has lots of revisions.

1209
00:59:07,026 --> 00:59:10,648
And this is a key thing for me going forward,

1210
00:59:10,648 --> 00:59:11,649
is in trying to build...

1211
00:59:12,785 --> 00:59:17,029
To implement, to support and maintain this kind of a solution

1212
00:59:17,029 --> 00:59:20,831
is easy enough on one team with a handful of people using it.

1213
00:59:20,831 --> 00:59:23,293
As you get into the hundreds of people using something,

1214
00:59:23,293 --> 00:59:26,776
and they're across multiple versions of your editor,

1215
00:59:26,776 --> 00:59:30,119
and to try and maintain, well, okay, they have this script,

1216
00:59:30,119 --> 00:59:31,880
but it's for a different version of the editor.

1217
00:59:31,880 --> 00:59:35,363
How you maintain all of that, I'm really excited to look at solutions like this

1218
00:59:35,363 --> 00:59:36,383
that will help manage that.

1219
00:59:39,179 --> 00:59:44,362
And then there's all sorts of searches and filters and advanced filters to not only find a

1220
00:59:44,362 --> 00:59:52,546
tool of a given name, but also even go deeper than that and say, find me all the tools that

1221
00:59:52,546 --> 01:00:00,190
use this keyword or bit of code in it. All right. Wrapping up. So, yes, indeed, on the

1222
01:00:00,190 --> 01:00:06,493
shoulders of giants. Lots of people contributing and helping and supporting and all of that.

1223
01:00:06,957 --> 01:00:09,899
Not the least of which, Ludovic Chavant is the guy

1224
01:00:09,899 --> 01:00:12,960
who introduced me to Iron Python, helped kick this thing off.

1225
01:00:12,960 --> 01:00:15,621
I've done a lot of the implementation since then,

1226
01:00:15,621 --> 01:00:16,482
but big shout out to Ludo.

1227
01:00:16,482 --> 01:00:19,623
DevHawk, found as an invaluable resource online.

1228
01:00:19,623 --> 01:00:22,224
AvalonEdit, another invaluable resource.

1229
01:00:22,224 --> 01:00:26,066
Huge respect for, well, the initial inventor

1230
01:00:26,066 --> 01:00:28,307
of Iron Python, Jim Huggaden,

1231
01:00:28,307 --> 01:00:32,849
and subsequent maintainer of that, Jeff Hardy.

1232
01:00:34,052 --> 01:00:38,036
and a huge long list of credits and thanks

1233
01:00:38,036 --> 01:00:41,099
and really the list does go on.

1234
01:00:41,099 --> 01:00:44,362
And here we are with questions,

1235
01:00:44,362 --> 01:00:46,644
so, and a quick reminder too, evaluations.

1236
01:00:46,644 --> 01:00:48,645
So, there you go, a little guide.

1237
01:00:48,645 --> 01:00:49,906
They take three clicks.

1238
01:01:15,157 --> 01:01:23,263
We have a mic on? Looks like we need help with the mic here.

1239
01:01:23,263 --> 01:01:31,529
When you were showing the autocomplete for the Python, you said you were evaluating the

1240
01:01:31,529 --> 01:01:33,731
Python code before that?

1241
01:01:34,313 --> 01:01:37,956
How are you dealing with side effects in there?

1242
01:01:37,956 --> 01:01:39,377
Sorry, if I understood the question,

1243
01:01:39,377 --> 01:01:41,698
it's when I'm showing the autocomplete dialog

1244
01:01:41,698 --> 01:01:43,640
for the Iron Python.

1245
01:01:43,640 --> 01:01:45,721
What was the second part of the question?

1246
01:01:45,721 --> 01:01:48,063
How are you dealing with the,

1247
01:01:48,063 --> 01:01:51,005
if I have code that has side effects,

1248
01:01:51,005 --> 01:01:52,526
that does something,

1249
01:01:52,526 --> 01:01:53,887
but you're also evaluating it

1250
01:01:53,887 --> 01:01:56,389
just to do the autocomplete in there.

1251
01:01:56,389 --> 01:01:57,910
So if I'm creating objects or something,

1252
01:01:57,910 --> 01:01:59,972
and then you do the autocomplete on the object,

1253
01:02:00,847 --> 01:02:04,829
If I understand the question, it's how to distinguish

1254
01:02:04,829 --> 01:02:08,212
the difference between a property on a code completion

1255
01:02:08,212 --> 01:02:10,593
and a method that's going to do something,

1256
01:02:10,593 --> 01:02:13,375
and perhaps what the parameters are for that method.

1257
01:02:13,375 --> 01:02:14,996
Am I getting that right?

1258
01:02:14,996 --> 01:02:17,278
No, it's like, so if you're in the script,

1259
01:02:17,278 --> 01:02:19,579
you're creating an object, and then later,

1260
01:02:19,579 --> 01:02:21,060
further down in the script, you're offering

1261
01:02:21,060 --> 01:02:23,962
all the autocomplete options on that object.

1262
01:02:23,962 --> 01:02:25,964
Mm-hmm.

1263
01:02:25,964 --> 01:02:27,345
If you have to evaluate that multiple times,

1264
01:02:27,345 --> 01:02:28,986
aren't you creating the object multiple times?

1265
01:02:29,787 --> 01:02:31,988
And wouldn't you have lots of side effects from that?

1266
01:02:31,988 --> 01:02:34,249
Oh, I think it's just for memory and scope management.

1267
01:02:34,249 --> 01:02:36,671
And if you have something already in memory

1268
01:02:36,671 --> 01:02:38,632
and you're looking at a property of that in memory

1269
01:02:38,632 --> 01:02:40,292
and then another property of that in memory,

1270
01:02:40,292 --> 01:02:43,354
the concern is about how that exists inside of scope

1271
01:02:43,354 --> 01:02:47,096
and is there any knock-ons or issues with that?

1272
01:02:47,096 --> 01:02:50,037
Also, if I'm in the level, I'm creating whole objects,

1273
01:02:50,037 --> 01:02:51,318
like actually placing, I don't know,

1274
01:02:51,318 --> 01:02:53,199
trees in the level or something,

1275
01:02:53,199 --> 01:02:54,639
wouldn't I be running that over and over again

1276
01:02:54,639 --> 01:02:55,500
just for the autocomplete?

1277
01:02:57,061 --> 01:03:02,143
The interesting thing about this is that it's actually just referencing, it's just references.

1278
01:03:02,143 --> 01:03:04,725
So it doesn't duplicate anything in memory.

1279
01:03:04,725 --> 01:03:10,147
So when we're looking at an object that is there and we want to access it, we can change a value on it.

1280
01:03:10,147 --> 01:03:15,830
And it's changing the value, because it's referenced to the actual object, it changes the value on the object itself.

1281
01:03:15,830 --> 01:03:18,131
It doesn't exist more than once in memory.

1282
01:03:18,131 --> 01:03:22,433
Okay, so you're only always re-evaluating the current line, not the entire script?

1283
01:03:22,433 --> 01:03:23,654
That's correct, yes.

1284
01:03:23,654 --> 01:03:26,055
Okay, thanks.

1285
01:03:27,014 --> 01:03:29,618
Given that you originally wanted to start with C sharp,

1286
01:03:29,618 --> 01:03:32,481
and now that Microsoft's released Project Roslyn

1287
01:03:32,481 --> 01:03:33,763
and F sharp type providers,

1288
01:03:33,763 --> 01:03:35,866
would you still go back to Iron Python?

1289
01:03:35,866 --> 01:03:37,648
That's a good question.

1290
01:03:37,648 --> 01:03:39,570
I would actually have to learn more about that.

1291
01:03:39,570 --> 01:03:42,474
I mean, if you're available afterwards, I'd love to chat.

1292
01:03:42,474 --> 01:03:42,875
Sure.

1293
01:03:42,875 --> 01:03:43,636
Cool, thanks.

1294
01:03:47,208 --> 01:03:47,248
Hi.

1295
01:03:47,248 --> 01:03:47,448
Hello.

1296
01:03:47,448 --> 01:03:48,329
Oh, hey.

1297
01:03:48,329 --> 01:03:49,350
I just had a question about,

1298
01:03:49,350 --> 01:03:51,952
it's kind of more policy, really.

1299
01:03:51,952 --> 01:03:53,213
If you're opening up those tools,

1300
01:03:53,213 --> 01:03:55,735
and the last slide you showed

1301
01:03:55,735 --> 01:03:57,757
where you've got an online community

1302
01:03:57,757 --> 01:03:59,638
where people can share scripts and so on.

1303
01:04:00,116 --> 01:04:07,001
Do you have any kind of security concerns about basically allowing anybody to write code that effectively ends up running on anybody else's machine?

1304
01:04:07,001 --> 01:04:08,622
Yeah, that's a really good question.

1305
01:04:08,622 --> 01:04:15,626
It's funny because the amount of stuff that we expose in FrostEd is actually truly terrifying to the engineers that wrote it.

1306
01:04:15,626 --> 01:04:18,148
And they're like, well, what if everything breaks?

1307
01:04:18,148 --> 01:04:21,950
Like, someone's going to use it incorrectly and stuff's just going to, you know, stop working.

1308
01:04:23,523 --> 01:04:27,584
The environment that we work in with Perforce is a decent

1309
01:04:27,584 --> 01:04:31,005
safety net, so you can actually run mayhem on a complete

1310
01:04:31,005 --> 01:04:33,266
data set, but that's your local copy and nothing gets

1311
01:04:33,266 --> 01:04:34,927
submitted until it's validated.

1312
01:04:34,927 --> 01:04:37,067
But that validation step is really key.

1313
01:04:37,067 --> 01:04:41,229
So we did really large batch processes on tons of data on

1314
01:04:41,229 --> 01:04:43,250
Dragon Age, for example.

1315
01:04:43,250 --> 01:04:47,231
But we spent a day or two with QA validating and making sure

1316
01:04:47,231 --> 01:04:48,952
all of the runtime implicant...

1317
01:04:49,780 --> 01:04:56,885
try that again. The run time implications of that were all sound. So yeah, there is

1318
01:04:56,885 --> 01:05:02,128
due diligence required to make sure what you're doing, especially in broad strokes, holds up.

1319
01:05:02,128 --> 01:05:05,130
Thank you.

1320
01:05:05,130 --> 01:05:11,033
Hi. How much work did you have to do to the code of your editor to expose all this functionality

1321
01:05:11,033 --> 01:05:14,715
or did you get most of it for free because you were doing everything with C-sharp?

1322
01:05:15,228 --> 01:05:17,588
we got most of it for free because we were doing everything

1323
01:05:17,588 --> 01:05:18,849
with C Sharp, especially in .NET.

1324
01:05:18,849 --> 01:05:23,270
There are tricky bits there, as if you have really

1325
01:05:23,270 --> 01:05:26,470
risk-averse or really, I don't know, I mean,

1326
01:05:26,470 --> 01:05:30,151
there are ways in which you could implement a .NET solution

1327
01:05:30,151 --> 01:05:34,872
that wouldn't be as readily, excuse me, readily exposed.

1328
01:05:34,872 --> 01:05:37,733
But yeah, anything that's declared as a public function,

1329
01:05:37,733 --> 01:05:39,294
if it isn't private or protected,

1330
01:05:39,294 --> 01:05:42,914
we'll be there for you to utilize as you need.

1331
01:05:42,914 --> 01:05:44,075
Cool, thanks.

1332
01:05:46,555 --> 01:05:53,380
When you're using the scripts, are you able to undo and redo the effects that they do?

1333
01:05:53,380 --> 01:05:59,325
Yes and no. There are some commands that are wrapped that way inside of the Frost Editor,

1334
01:05:59,325 --> 01:06:05,811
and we have a roadmap in play for future improvements towards that to better handle undo-redo,

1335
01:06:05,811 --> 01:06:11,676
but for the most part, especially if we're just doing a property change or whatever.

1336
01:06:12,502 --> 01:06:17,364
The future is yes, but at the moment it's a bit sparse that way.

1337
01:06:17,364 --> 01:06:23,268
Yeah, so how you explain it is then if you would go in a for loop and go through all the objects

1338
01:06:23,268 --> 01:06:28,431
and change like one property in all of them, so you would have to undo through each and every object then separately,

1339
01:06:28,431 --> 01:06:30,272
like if you did something wrong.

1340
01:06:30,272 --> 01:06:35,375
That's possible, or yeah, to batch, call a reset value or something like that.

1341
01:06:35,375 --> 01:06:36,235
Yeah, okay, thank you.

1342
01:06:38,455 --> 01:06:41,278
While you were working on this, did you guys end up

1343
01:06:41,278 --> 01:06:44,421
implementing debuggers or like ways to visualize

1344
01:06:44,421 --> 01:06:47,324
like the current state of the Python environment?

1345
01:06:47,324 --> 01:06:51,227
Yes, it's something I did implement fairly early,

1346
01:06:51,227 --> 01:06:56,332
although I haven't seen it in as wide use in production.

1347
01:06:56,332 --> 01:06:59,915
The DevHawk website has some really good examples of it

1348
01:06:59,915 --> 01:07:01,056
there in play as well.

1349
01:07:01,056 --> 01:07:03,959
You absolutely can and I have it hooked up.

1350
01:07:05,032 --> 01:07:07,994
in a prototype fashion, where you could put in

1351
01:07:07,994 --> 01:07:09,716
a breakpoint, hit those breakpoints,

1352
01:07:09,716 --> 01:07:11,577
and on a breakpoint, inspect or watch

1353
01:07:11,577 --> 01:07:14,099
all sorts of variables and modify those variables

1354
01:07:14,099 --> 01:07:14,539
on the fly.

1355
01:07:14,539 --> 01:07:17,582
So all of that stuff is possible, I've seen it in practice,

1356
01:07:17,582 --> 01:07:20,504
but getting it really slick so that it's production ready

1357
01:07:20,504 --> 01:07:21,444
is a bit more tricky.

1358
01:07:21,444 --> 01:07:22,305
Cool, thank you everyone.

