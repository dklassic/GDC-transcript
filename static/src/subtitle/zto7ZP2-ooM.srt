1
00:00:06,880 --> 00:00:11,162
Hello, I'm Drew Ehrich and welcome to GDC 2020 in my living room.

2
00:00:12,563 --> 00:00:17,066
We're going to be talking about building online services for independent games today.

3
00:00:17,446 --> 00:00:23,009
And first I'd like to start with just talking about what that is, why you might need that,

4
00:00:23,590 --> 00:00:26,031
and whether or not you should keep watching this video or stream.

5
00:00:26,952 --> 00:00:29,313
So why would independent games need online services?

6
00:00:29,933 --> 00:00:35,036
There are in fact a lot of great options out there right now for independent games to start

7
00:00:35,076 --> 00:00:35,497
working with.

8
00:00:36,111 --> 00:00:39,194
PlayFab and GameSparks and lots of things that offer a ton of functionality.

9
00:00:39,794 --> 00:00:44,158
But, at the end of the day, there tend to be things that are unique to your game and

10
00:00:44,178 --> 00:00:47,540
things that you might want to offer yourself or things that you want to take control of

11
00:00:47,560 --> 00:00:49,002
so that you can do them differently.

12
00:00:49,882 --> 00:00:53,725
One of the common ones is people want to have their own matchmaking algorithms or things

13
00:00:53,765 --> 00:00:54,106
like that.

14
00:00:54,126 --> 00:01:01,792
At any rate, I've had a lot of experience throughout my career working on online services

15
00:01:01,812 --> 00:01:02,793
sort of from the ground up.

16
00:01:03,936 --> 00:01:09,459
in independent games with the release of a project called The Maestrooms, which I'll talk about today,

17
00:01:09,559 --> 00:01:15,321
and we'll kind of follow that game's journey from a student project to a hobby project and some of

18
00:01:15,341 --> 00:01:21,704
the things that we learned along the way, because I interestingly had a wonderful gift of hindsight

19
00:01:21,764 --> 00:01:27,767
as I was going through that process and working in AAA studios, working at Riot Games, building

20
00:01:27,867 --> 00:01:29,688
the same kind of online services.

21
00:01:30,370 --> 00:01:32,150
but at a much larger scale.

22
00:01:32,631 --> 00:01:36,132
And I took a lot of those ideas and a lot of thinking

23
00:01:36,472 --> 00:01:38,413
from AAA and I applied it to my independent games,

24
00:01:38,453 --> 00:01:40,514
sometimes successfully, sometimes not successfully.

25
00:01:40,534 --> 00:01:43,055
I wanna give you some of the things

26
00:01:43,075 --> 00:01:44,355
that I learned over that process,

27
00:01:44,635 --> 00:01:46,496
so that if you go to implement some of these things yourself

28
00:01:47,436 --> 00:01:48,357
you can do better than I did.

29
00:01:50,296 --> 00:01:52,337
So yeah, this is just a little bit of my timeline.

30
00:01:53,138 --> 00:01:56,060
I started working on Maestro's in pre-production in 2012.

31
00:01:56,720 --> 00:02:00,543
I started working at Riot Games in 2013, 2014 time frame

32
00:02:01,184 --> 00:02:02,665
and spent about five years there.

33
00:02:03,245 --> 00:02:05,126
I shipped Maestro's about two years ago,

34
00:02:05,146 --> 00:02:08,549
a year and a half ago now, onto Steam in early access.

35
00:02:09,329 --> 00:02:12,852
And today I run my own work-for-hire and consulting shop

36
00:02:12,972 --> 00:02:15,594
doing online services for independent games.

37
00:02:15,614 --> 00:02:17,555
So, you know, companies that need backend services

38
00:02:17,615 --> 00:02:18,776
as a platform for their games.

39
00:02:19,557 --> 00:02:20,997
Me and my team come in and build those things.

40
00:02:22,098 --> 00:02:26,519
So I've gotten to see this at a number of different companies at a variety of scales and see how it's done.

41
00:02:28,920 --> 00:02:32,361
So onto the project we're talking about. The Maestros was a hybrid

42
00:02:32,942 --> 00:02:35,963
real-time strategy game and MOBA and

43
00:02:36,303 --> 00:02:40,565
we had these great aspirations for it. I mentioned briefly that it was actually a student project.

44
00:02:41,065 --> 00:02:45,807
This was sort of my senior project, my capstone in college at University of Southern California.

45
00:02:46,644 --> 00:02:48,425
And we had huge aspirations.

46
00:02:48,445 --> 00:02:50,187
We bit off way more than we could chew.

47
00:02:50,747 --> 00:02:51,788
We learned a tremendous amount.

48
00:02:51,848 --> 00:02:53,870
So we were going to build a three versus three

49
00:02:54,010 --> 00:02:54,871
online multiplayer game.

50
00:02:55,812 --> 00:02:57,534
We were gonna run with dedicated servers.

51
00:02:58,414 --> 00:03:00,356
And it was going to be built in Unreal 3,

52
00:03:00,476 --> 00:03:01,978
which was the Unreal developers kit.

53
00:03:02,098 --> 00:03:04,380
Because at the time, Unreal 4 was not announced yet.

54
00:03:04,940 --> 00:03:07,062
I think maybe nine months into our development

55
00:03:07,082 --> 00:03:07,783
or something like that,

56
00:03:07,823 --> 00:03:09,525
after we had gotten a huge amount done,

57
00:03:09,985 --> 00:03:10,706
they announced Unreal 3.

58
00:03:14,129 --> 00:03:18,212
So the next thing was the composition of the team, the size of the team.

59
00:03:19,333 --> 00:03:21,395
We were pretty large for an independent game.

60
00:03:21,735 --> 00:03:26,700
We were all working part-time, hobbyists and stuff, but there were 15 engineers on the

61
00:03:26,720 --> 00:03:31,244
project, but only really two people at a time, at any time, were working on the platform

62
00:03:31,264 --> 00:03:31,564
itself.

63
00:03:31,604 --> 00:03:36,088
So pretty small group there, and I think one to two people was probably what you'll have

64
00:03:36,168 --> 00:03:39,331
working on your back-end services at any given time, especially when we were committing 10

65
00:03:39,471 --> 00:03:40,011
to 20 hours a week.

66
00:03:43,003 --> 00:03:44,824
And eventually after we graduated

67
00:03:44,844 --> 00:03:46,245
and turned it into a hobby project,

68
00:03:46,725 --> 00:03:48,006
the team got a lot smaller.

69
00:03:48,026 --> 00:03:50,147
Just sort of a unique circumstance,

70
00:03:50,167 --> 00:03:51,467
something to be aware of as I'm talking.

71
00:03:51,507 --> 00:03:52,508
But the team got a lot smaller.

72
00:03:52,908 --> 00:03:54,929
We still had one to two people working on the platform

73
00:03:54,949 --> 00:03:55,770
at any given time, though.

74
00:03:58,191 --> 00:04:00,652
So for this game, online multiplayer,

75
00:04:00,692 --> 00:04:02,353
we had a lot of features we needed to support.

76
00:04:03,053 --> 00:04:04,694
We knew that we would need a login,

77
00:04:04,914 --> 00:04:06,975
a way for logging in and storing accounts.

78
00:04:07,516 --> 00:04:09,617
We knew that we would need lobbies

79
00:04:09,697 --> 00:04:11,418
and folks could chat with each other.

80
00:04:12,299 --> 00:04:16,540
And we'd have to manage dedicated servers because we had kind of bought into that as a better user experience.

81
00:04:18,521 --> 00:04:20,081
And we needed a lot of other things.

82
00:04:20,601 --> 00:04:25,623
It turns out there's a lot that needs to be provided when you're building what amounts to a game as a service.

83
00:04:26,283 --> 00:04:28,424
Anything that's going to be online. There's quite a lot of features

84
00:04:29,364 --> 00:04:32,505
kind of under the fold or under the covers when you go to working on this.

85
00:04:34,324 --> 00:04:36,405
Let's rewind to the time frame we were at

86
00:04:36,505 --> 00:04:38,626
and when I had a fantastic haircut.

87
00:04:39,247 --> 00:04:40,447
This is my business partner, Sean,

88
00:04:40,467 --> 00:04:41,648
who worked on that project with me

89
00:04:41,788 --> 00:04:42,809
and still works with me today.

90
00:04:43,129 --> 00:04:45,250
Both of us had much better hair at the time.

91
00:04:47,411 --> 00:04:49,793
But back in 2013, more than just funny pictures,

92
00:04:50,433 --> 00:04:52,754
the circumstances for building services were really different.

93
00:04:53,394 --> 00:04:54,975
The first bullet will not surprise you.

94
00:04:55,095 --> 00:04:57,537
Unity was still really hot five years ago.

95
00:04:59,218 --> 00:05:01,299
Five, seven years ago, gosh.

96
00:05:01,379 --> 00:05:02,159
Seven years ago.

97
00:05:03,080 --> 00:05:04,120
Unreal wasn't out yet.

98
00:05:05,064 --> 00:05:10,867
PlayFab and GameSparks were, I believe, both present, but not in a big way and their feature sets were much much smaller.

99
00:05:11,327 --> 00:05:12,587
I wasn't even aware of them at the time.

100
00:05:13,988 --> 00:05:18,910
Steam Greenlight wasn't available. So you couldn't really use Steam's systems if you weren't

101
00:05:19,370 --> 00:05:21,711
approved to publish on the platform. And

102
00:05:21,911 --> 00:05:25,993
Itch.io, which is another distribution platform, wasn't around in its current state.

103
00:05:26,113 --> 00:05:30,275
It didn't have a lot of downloading capabilities and patching capabilities that it has now.

104
00:05:30,515 --> 00:05:31,555
Great platform for that now.

105
00:05:32,696 --> 00:05:33,936
In the services side,

106
00:05:34,785 --> 00:05:36,166
Node.js was getting really hot.

107
00:05:37,146 --> 00:05:42,170
Google and Microsoft had started to make their plays into the cloud space and

108
00:05:42,931 --> 00:05:51,277
there was no serverless. There was no Kubernetes. So we're still dealing with some pretty basic primitives in the infrastructure space like virtual machines,

109
00:05:52,438 --> 00:05:54,920
you know, basic offerings from EC2, things like that.

110
00:05:54,940 --> 00:06:02,266
And so that brought us to, you know, we're looking at that space and this is also what we're looking at in terms of what

111
00:06:02,306 --> 00:06:03,787
languages we're trying to decide on.

112
00:06:04,424 --> 00:06:07,566
There were two or three of us in the room saying, okay, how are we gonna build this platform?

113
00:06:08,426 --> 00:06:11,549
These are some of the things we evaluated.

114
00:06:12,029 --> 00:06:17,313
PHP and Java are kind of old standbys and Java specifically is used by quite a few

115
00:06:17,453 --> 00:06:19,134
AAA studios and

116
00:06:20,015 --> 00:06:27,039
enterprise software organizations for building these kinds of systems. Lots of great tools in place very verbose.

117
00:06:27,540 --> 00:06:32,283
Rails is extremely fast. It's really really popular around that time for buildings.

118
00:06:33,202 --> 00:06:34,542
web applications really quickly.

119
00:06:34,903 --> 00:06:36,563
And we fall, of course, very much in the realm

120
00:06:36,583 --> 00:06:37,443
of web applications.

121
00:06:37,923 --> 00:06:40,044
Node.js was nuking on the block,

122
00:06:41,604 --> 00:06:43,404
and it was squarely targeted at this space,

123
00:06:43,424 --> 00:06:45,405
but it had a lot of things that got us really excited.

124
00:06:47,345 --> 00:06:51,806
So we ended up choosing Node, and the reasons are,

125
00:06:53,106 --> 00:06:53,947
go back for just a minute,

126
00:06:54,307 --> 00:06:56,787
the reason that we chose Node were that,

127
00:06:57,047 --> 00:06:58,548
A, we were really excited about it,

128
00:06:59,428 --> 00:07:00,428
was sort of a primary one.

129
00:07:00,468 --> 00:07:02,208
We were students, we're still trying to learn new things.

130
00:07:03,026 --> 00:07:04,206
and this looked really exciting.

131
00:07:04,986 --> 00:07:06,367
It seemed to solve a lot of things

132
00:07:06,407 --> 00:07:08,027
that we were unfamiliar with at the time

133
00:07:08,607 --> 00:07:10,987
and it had actually some really good frameworks

134
00:07:11,087 --> 00:07:12,308
even in its early days.

135
00:07:13,788 --> 00:07:16,808
So the question is, is Node an India approved choice?

136
00:07:16,908 --> 00:07:18,269
Would I recommend this to other people

137
00:07:18,949 --> 00:07:20,809
having gone and built services again

138
00:07:20,849 --> 00:07:22,609
and worked with other independent studios?

139
00:07:23,290 --> 00:07:25,070
The answer is actually a resounding yes.

140
00:07:25,370 --> 00:07:28,831
I really love working with Node when I'm on small teams,

141
00:07:28,871 --> 00:07:31,011
when I have the type of constraints and time.

142
00:07:31,649 --> 00:07:38,913
And the type of concerns that you have as an independent studio. I've recommended to multiple people since then and they definitely

143
00:07:38,933 --> 00:07:44,077
I actually just got a text the other day from someone I had recommend this to, it was sort of a one-man programming shop

144
00:07:45,258 --> 00:07:50,261
And he was like 24 hours after I told him to go check out node to solve some of your problems with the lobby system

145
00:07:51,522 --> 00:07:55,685
He 24 hours later he came back and he was like that was awesome. Thank you so much for that

146
00:07:56,305 --> 00:08:00,208
I think this is gonna, you know, get me all the way to launch and they did end up launching shortly thereafter

147
00:08:02,069 --> 00:08:04,471
And it was really some of the things we were excited about

148
00:08:04,491 --> 00:08:05,772
and some of the things we didn't think about.

149
00:08:06,032 --> 00:08:08,194
So we were excited about Express,

150
00:08:09,075 --> 00:08:10,496
and it does turn out to be a really great,

151
00:08:10,536 --> 00:08:12,898
really easy to work with web framework

152
00:08:12,918 --> 00:08:15,480
with lots and lots of sort of plugins

153
00:08:15,520 --> 00:08:16,601
and middleware that you can use.

154
00:08:18,363 --> 00:08:20,765
The biggest thing that I didn't know at the time

155
00:08:21,165 --> 00:08:21,866
that I know now.

156
00:08:22,345 --> 00:08:26,147
is that Node sort of solves is a strong word,

157
00:08:26,187 --> 00:08:29,909
but it definitely targets the hard problems

158
00:08:30,149 --> 00:08:31,309
in online services development.

159
00:08:31,349 --> 00:08:33,750
So if you're building a platform that consists of

160
00:08:34,151 --> 00:08:35,691
matchmakers and account systems

161
00:08:35,751 --> 00:08:36,772
and all these different things,

162
00:08:37,992 --> 00:08:41,714
multi-threading and asynchronous IO on the network

163
00:08:41,914 --> 00:08:43,995
or against the disk or to a database,

164
00:08:44,315 --> 00:08:45,996
those are the hard, hard problems.

165
00:08:46,516 --> 00:08:49,317
And Node acts as a single threaded system.

166
00:08:49,397 --> 00:08:50,178
It's event-based.

167
00:08:50,517 --> 00:08:53,059
So you feel like you're writing more single-threaded code,

168
00:08:54,179 --> 00:08:55,840
which was really, really important for us

169
00:08:55,860 --> 00:08:57,521
to just make progress quickly

170
00:08:57,541 --> 00:09:00,843
and not have to solve really strange edge cases.

171
00:09:01,684 --> 00:09:03,385
Obviously, the devil's in the details

172
00:09:03,445 --> 00:09:05,246
if you try and go deep on certain things,

173
00:09:05,686 --> 00:09:08,267
but we found this to be really, really useful.

174
00:09:09,388 --> 00:09:10,729
And again, we were just excited about it.

175
00:09:11,309 --> 00:09:12,029
So we worked harder.

176
00:09:12,089 --> 00:09:13,570
Motivation cannot be underplayed

177
00:09:13,610 --> 00:09:15,011
when you're working on independent games,

178
00:09:15,131 --> 00:09:17,212
and anyone who's done it for any length of time knows

179
00:09:17,873 --> 00:09:20,094
that's a really important thing to consider as well.

180
00:09:21,661 --> 00:09:23,382
So, no, definitely indie-approved.

181
00:09:24,322 --> 00:09:25,922
There were some obstacles, of course.

182
00:09:27,103 --> 00:09:29,044
It was very, very nascent at the time.

183
00:09:29,264 --> 00:09:32,445
I generally don't recommend choosing a pre-1.0 software

184
00:09:33,165 --> 00:09:34,245
for independent games development,

185
00:09:34,285 --> 00:09:36,686
because you're going to be at the forefront of fixing other people's bugs.

186
00:09:37,606 --> 00:09:39,567
And that's generally not your primary concern.

187
00:09:40,207 --> 00:09:42,468
In fact, building a game is your primary concern,

188
00:09:42,508 --> 00:09:44,509
and the platform needs to facilitate that.

189
00:09:44,629 --> 00:09:47,010
All of your online services are just meant to facilitate that.

190
00:09:47,510 --> 00:09:50,153
So if you can remove hard problems from that space,

191
00:09:50,233 --> 00:09:51,134
I highly recommend it,

192
00:09:51,154 --> 00:09:53,636
especially as an independent developer.

193
00:09:54,817 --> 00:09:55,918
Maybe a personal taste thing,

194
00:09:55,959 --> 00:09:57,480
but as any code base grows,

195
00:09:57,580 --> 00:09:59,602
I find that static typing is extremely helpful.

196
00:10:00,343 --> 00:10:03,005
Eventually we introduced TypeScript to Node.js

197
00:10:03,546 --> 00:10:05,868
and that helped us grow the code base

198
00:10:06,028 --> 00:10:07,570
and maintain it over time.

199
00:10:09,492 --> 00:10:10,793
So that's like the big decision,

200
00:10:10,813 --> 00:10:13,114
and I know a lot of people have a lot of,

201
00:10:14,055 --> 00:10:15,136
spend a lot of calories on this

202
00:10:15,156 --> 00:10:16,176
and ask that question first.

203
00:10:16,797 --> 00:10:18,338
There's actually a number of great choices,

204
00:10:18,398 --> 00:10:20,519
and pretty much everything I put up there is good for that.

205
00:10:20,599 --> 00:10:23,961
But once we had that done, we were super stoked,

206
00:10:24,522 --> 00:10:25,862
and we're like, let's get to work.

207
00:10:25,943 --> 00:10:28,304
And so we had our HP framework with Express

208
00:10:28,404 --> 00:10:30,445
and our language with Node, and we just started hacking.

209
00:10:31,566 --> 00:10:33,907
First thing we needed to do was log in,

210
00:10:34,708 --> 00:10:35,589
as most systems do.

211
00:10:37,872 --> 00:10:38,832
username and password.

212
00:10:38,852 --> 00:10:40,954
So we said, okay, we've got an HTTP framework,

213
00:10:41,054 --> 00:10:42,094
let's make an HTTP call.

214
00:10:43,255 --> 00:10:45,436
And in fact, it's gonna send a password up,

215
00:10:45,456 --> 00:10:46,417
so let's be secure.

216
00:10:46,437 --> 00:10:48,138
Let's make an HTTPS call,

217
00:10:50,059 --> 00:10:51,640
which was super easy to do with Express.

218
00:10:51,680 --> 00:10:52,380
So we set that up,

219
00:10:53,001 --> 00:10:55,222
made a call with the username and password in there.

220
00:10:55,542 --> 00:10:56,583
Awesome, cruising.

221
00:10:57,824 --> 00:11:00,746
Step two, we need to host a game.

222
00:11:01,746 --> 00:11:04,288
And so let's make another HTTP call.

223
00:11:05,646 --> 00:11:08,268
We'll post up the name of the game that we want to create.

224
00:11:09,208 --> 00:11:10,449
I'm making Southeast game.

225
00:11:11,089 --> 00:11:11,430
Awesome.

226
00:11:11,530 --> 00:11:12,550
And people are going to join it.

227
00:11:12,570 --> 00:11:15,412
I'm going to, you know, add people to it or what have you.

228
00:11:16,453 --> 00:11:18,775
And then I need to change what map I have.

229
00:11:20,135 --> 00:11:21,857
So I'm going to change to the map Terra.

230
00:11:23,438 --> 00:11:24,038
Oh, huh.

231
00:11:24,658 --> 00:11:27,821
How can I do that with an HTTP call?

232
00:11:28,241 --> 00:11:33,965
I can send up the map Terra, but then how do all of my buddies in the lobby get notified

233
00:11:33,985 --> 00:11:34,145
about it?

234
00:11:36,467 --> 00:11:41,410
It's actually not a trivial question in HP because HP is unidirectional.

235
00:11:42,151 --> 00:11:44,292
You send up a request and you get a response back.

236
00:11:46,133 --> 00:11:49,495
That makes it a little bit more complex for how you would send an update

237
00:11:49,676 --> 00:11:53,438
or a notification that's sort of out of band that no one requested anything for,

238
00:11:53,458 --> 00:11:56,360
or at least that the particular user didn't request something for.

239
00:11:58,642 --> 00:12:01,063
And so posts and gets in HP are not enough.

240
00:12:02,284 --> 00:12:03,245
Again, it's unidirectional.

241
00:12:03,863 --> 00:12:07,265
One thing you could do is you could start polling for updates and say every five seconds

242
00:12:07,485 --> 00:12:10,627
I'm going to ask the server if anything changed in the lobby so it can let me know.

243
00:12:11,847 --> 00:12:14,829
Obviously this is kind of inefficient and you don't get your updates for maybe up to

244
00:12:14,909 --> 00:12:19,571
five seconds after something happened and overall not an ideal pattern.

245
00:12:20,011 --> 00:12:23,393
It absolutely can work and I've seen it scale but I would not recommend it.

246
00:12:23,413 --> 00:12:27,234
I don't think it represents the domain super well for what you're trying to do.

247
00:12:29,255 --> 00:12:32,017
The other thing that's a little bit more subtle and over time I've

248
00:12:32,342 --> 00:12:37,204
that experience this you don't have this idea of a session. So you don't really know if someone is present

249
00:12:38,465 --> 00:12:44,227
because you're making HTTP calls and you open a connection make a request response and close a connection.

250
00:12:45,587 --> 00:12:46,168
In between

251
00:12:47,128 --> 00:12:49,809
making two requests you actually don't know if a player is still present.

252
00:12:50,329 --> 00:12:54,051
So in order to keep them out of the lobby, you don't have sort of an event.

253
00:12:54,431 --> 00:12:57,892
You again need to rely on some sort of polling and so some sort of heartbeat.

254
00:12:58,387 --> 00:13:00,447
to note that they're alive, there's no native session.

255
00:13:00,727 --> 00:13:05,268
You're sort of implementing a session on top of HTTP.

256
00:13:05,809 --> 00:13:07,849
So again, knowing when to kick somebody out,

257
00:13:08,089 --> 00:13:10,150
knowing when they've left, harder to know.

258
00:13:10,310 --> 00:13:12,310
Someone turned off the power on their computer,

259
00:13:12,350 --> 00:13:14,851
you actually don't know until your timeout happens,

260
00:13:15,291 --> 00:13:16,912
and that timeout's something you had to implement yourself.

261
00:13:18,612 --> 00:13:19,612
So you need another protocol,

262
00:13:20,213 --> 00:13:22,333
or you need to work with HTTP polling,

263
00:13:22,353 --> 00:13:23,894
implement sessions on top of it.

264
00:13:24,394 --> 00:13:25,774
And there's a lot of options out there.

265
00:13:26,497 --> 00:13:33,340
especially today. So you could go the polling route. You could use TCP, which is a native, reliable socket connection.

266
00:13:33,400 --> 00:13:36,082
It's been around since the inception of the internet.

267
00:13:37,142 --> 00:13:43,905
You could use UDP like the rest of your game is implemented in. There's no session, but it's known to be really performant, etc.

268
00:13:44,946 --> 00:13:46,206
Web sockets are really cool,

269
00:13:46,706 --> 00:13:52,769
and this is sort of a newfangled thing where you can upgrade an HP connection to be an open socket that you can have

270
00:13:52,829 --> 00:13:53,870
bi-directional communication over.

271
00:13:54,848 --> 00:13:56,609
And gRPC is sort of similar to that,

272
00:13:56,669 --> 00:14:00,232
except for it operates on newer HTTP2.

273
00:14:01,153 --> 00:14:04,215
And this is a protocol buffers and remote procedure calls.

274
00:14:05,196 --> 00:14:07,938
Really any of these can solve this problem.

275
00:14:08,538 --> 00:14:09,679
We were using HTTP,

276
00:14:09,759 --> 00:14:11,620
and so we definitely thought about HTTP polling,

277
00:14:11,700 --> 00:14:13,582
but in order to get that out of band stuff,

278
00:14:13,602 --> 00:14:15,863
we actually decided to use TCP.

279
00:14:15,903 --> 00:14:19,626
It was just easier to implement in Unreal 3 at that time.

280
00:14:20,287 --> 00:14:21,627
And of course, we were still using HTTP.

281
00:14:21,668 --> 00:14:22,588
So we basically making,

282
00:14:23,260 --> 00:14:28,585
calls up to the service in HTTP and receiving messages back over TCP primarily.

283
00:14:29,866 --> 00:14:36,471
So is that an IDE approved path? We certainly were able to do it and ship with it, but I wouldn't

284
00:14:36,511 --> 00:14:41,415
recommend it. It sort of poorly represents the domain that we were in. It poorly addresses the

285
00:14:41,515 --> 00:14:47,080
problem. So if that's not a good way to do it, what is?

286
00:14:48,184 --> 00:14:56,430
This is such an important question because the process that we went through, I've actually seen multiple studios sort of repeat where they do the obvious thing and they start making HTTP calls.

287
00:14:58,091 --> 00:15:07,418
But then they realize later that they really wanted a session and they really need to notify people out of band. So having a socket open is really important.

288
00:15:08,679 --> 00:15:13,803
Again, how should we do it then? What should we choose? I think we need to look at our criteria.

289
00:15:14,263 --> 00:15:16,865
We know that we want a bi-directional communication.

290
00:15:17,811 --> 00:15:22,214
over ideally a single socket connection because we shouldn't need more than that.

291
00:15:23,535 --> 00:15:28,178
We want something that's gonna be easy to set up. It's gonna have you know native implementations in a lot of our languages.

292
00:15:28,798 --> 00:15:31,200
And it's gonna have support for a session.

293
00:15:32,221 --> 00:15:34,422
UDP for instance not as good of a

294
00:15:35,383 --> 00:15:39,045
option because it doesn't have native sessions and we don't really want to reinvent the wheel on that.

295
00:15:39,346 --> 00:15:41,607
Time is of the essence as an independent developer.

296
00:15:44,008 --> 00:15:45,989
So I would actually recommend any of these three.

297
00:15:46,169 --> 00:15:49,110
I think they're perfectly great options to do this.

298
00:15:49,210 --> 00:15:51,430
TCP sockets being sort of the most low level,

299
00:15:52,070 --> 00:15:54,591
perhaps you should consider gRPC or WebSockets first.

300
00:15:55,131 --> 00:15:55,531
Excuse me.

301
00:15:57,732 --> 00:16:00,753
But any of those three things meets those criteria

302
00:16:00,853 --> 00:16:01,573
and I would recommend them.

303
00:16:03,353 --> 00:16:07,134
So once we've decided on our protocol for communicating

304
00:16:07,194 --> 00:16:09,255
and over what pipe we're communicating.

305
00:16:10,738 --> 00:16:12,780
the question of what we put in our messages,

306
00:16:12,940 --> 00:16:14,922
and especially what do we put in messages

307
00:16:14,982 --> 00:16:15,702
when we're in a lobby.

308
00:16:16,223 --> 00:16:18,684
So we're just talking about the create game flow,

309
00:16:19,085 --> 00:16:20,185
and then I update a map.

310
00:16:21,166 --> 00:16:22,187
What should that look like?

311
00:16:22,267 --> 00:16:23,208
What should I send the server,

312
00:16:23,228 --> 00:16:24,389
and what should I receive back?

313
00:16:25,289 --> 00:16:27,391
There tend to be a couple of schools of thought on this.

314
00:16:29,733 --> 00:16:31,634
You could put in just the changes.

315
00:16:32,074 --> 00:16:34,276
So if I say update the map to Terra,

316
00:16:35,457 --> 00:16:37,438
it could tell all of the different players that are there.

317
00:16:37,458 --> 00:16:39,300
It's like there's a new map, and it's Terra.

318
00:16:40,708 --> 00:16:42,789
You can also send down the entire state of the lobby

319
00:16:42,829 --> 00:16:46,290
and be like, this is all the players that are in it,

320
00:16:46,870 --> 00:16:49,350
the map is Terra, and then they could just diff,

321
00:16:49,490 --> 00:16:52,151
sort of look at the delta between the two payloads.

322
00:16:53,011 --> 00:16:54,611
So, or you could do a hybrid of the two.

323
00:16:54,851 --> 00:16:57,032
But let's look at only the changes.

324
00:16:57,412 --> 00:17:00,213
So, I've sent up a message, and this is the message

325
00:17:00,253 --> 00:17:01,953
that's coming back down to all the players.

326
00:17:03,273 --> 00:17:05,474
It just has an action, it said, somebody updated the map,

327
00:17:05,854 --> 00:17:06,634
the new map is Terra.

328
00:17:07,194 --> 00:17:09,475
And so on your client, you flip the image of the map,

329
00:17:10,082 --> 00:17:10,822
you know, change the name.

330
00:17:11,882 --> 00:17:12,923
That seems appealing.

331
00:17:13,623 --> 00:17:16,344
It's certainly a lot less data going back and forth.

332
00:17:16,904 --> 00:17:18,405
And if you've got a reliable connection,

333
00:17:18,485 --> 00:17:19,986
it seems like this should work really well.

334
00:17:22,367 --> 00:17:24,788
The opposite would be to send the entire state at once.

335
00:17:25,408 --> 00:17:27,889
You make a request of change the map,

336
00:17:28,229 --> 00:17:30,430
and it tells everyone the entire state of the lobby

337
00:17:31,791 --> 00:17:32,291
all at once.

338
00:17:32,771 --> 00:17:34,332
And they're just looking for the Delta.

339
00:17:34,752 --> 00:17:37,473
So, obviously, more data in there.

340
00:17:37,993 --> 00:17:38,533
You have this.

341
00:17:39,575 --> 00:17:42,736
thing where you need to look at what changed from one payload to the next.

342
00:17:44,737 --> 00:17:48,098
So the question is which what should we put in each?

343
00:17:48,498 --> 00:17:53,700
I actually sort of counterintuitively and especially for independent developers recommend sending down the entire state

344
00:17:54,600 --> 00:17:58,601
of the lobby and this goes for a bunch of different things. It could be a lobby. It could be

345
00:18:00,902 --> 00:18:06,583
there's a whole bunch of different things, but anything that's not going to grow exponentially in terms of its size, it's gonna have a

346
00:18:06,875 --> 00:18:11,540
pretty fixed state for its size. I actually recommend sending down the whole state in

347
00:18:11,560 --> 00:18:16,564
platform land. Don't do this in your game for sure. But in platform, sending down just the

348
00:18:17,005 --> 00:18:23,030
state or sending on the entire state is great. It removes a lot of edge cases. And if you have

349
00:18:23,110 --> 00:18:26,733
unreliable connections, missing a message means that you need this whole protocol.

350
00:18:27,153 --> 00:18:29,273
to implement to send the entire state anyways.

351
00:18:29,734 --> 00:18:32,654
So it turns out that implementing just sending the deltas

352
00:18:33,055 --> 00:18:34,275
is actually implementing that

353
00:18:34,415 --> 00:18:36,676
plus implementing sending the entire state.

354
00:18:36,956 --> 00:18:38,336
And again, times of the essence.

355
00:18:39,216 --> 00:18:42,998
So the difference in size is not going to be measurable

356
00:18:43,458 --> 00:18:44,238
under bottom line.

357
00:18:45,278 --> 00:18:47,259
So yeah, this is the India approved thing,

358
00:18:47,879 --> 00:18:48,919
is sending the entire state.

359
00:18:49,420 --> 00:18:49,580
Cool.

360
00:18:53,660 --> 00:18:55,302
We implemented some basic features,

361
00:18:55,442 --> 00:18:57,303
and then we kind of took a step back and said,

362
00:18:57,423 --> 00:19:00,285
all right, what should our architecture overall be for this?

363
00:19:00,806 --> 00:19:02,827
We've been writing code in a Node.js server,

364
00:19:03,387 --> 00:19:06,370
but how should we implement all of these features

365
00:19:06,410 --> 00:19:07,350
that we're gonna need?

366
00:19:07,430 --> 00:19:08,631
You saw that large list.

367
00:19:10,873 --> 00:19:13,235
Well, there are many different schools of thought

368
00:19:13,275 --> 00:19:15,076
on this right now, or different approaches.

369
00:19:16,414 --> 00:19:19,575
The old school way is known as the monolith,

370
00:19:19,655 --> 00:19:21,876
and you just have one sort of large code base.

371
00:19:22,716 --> 00:19:24,016
I've seen these get up to a million

372
00:19:24,076 --> 00:19:26,177
or a couple million lines of code,

373
00:19:26,817 --> 00:19:29,818
and all of your functionality lives in one code base.

374
00:19:30,158 --> 00:19:31,758
You tend to need to have multiple of them

375
00:19:31,798 --> 00:19:32,599
if you want to scale,

376
00:19:32,919 --> 00:19:34,919
or you're deploying multiple of the same piece of code.

377
00:19:36,160 --> 00:19:39,401
Alternatively, microservices got really popular

378
00:19:39,421 --> 00:19:40,321
around the time that we were.

379
00:19:40,832 --> 00:19:46,977
working on this, and that is a mechanism where you'd have maybe a dozen different projects

380
00:19:47,037 --> 00:19:50,099
and each project is tackling a really specific feature set.

381
00:19:50,179 --> 00:19:55,964
So you've got one project for your player account, and you've got another project for

382
00:19:56,064 --> 00:19:57,345
matchmaking.

383
00:19:57,385 --> 00:20:01,788
Some of the properties of this that people like are that it can scale because your most

384
00:20:01,869 --> 00:20:05,471
intensely used project can be separated from all the other ones.

385
00:20:06,030 --> 00:20:10,953
Your performance in your lobbies could be really good if all of the CPU is really just being used on your matchmaker.

386
00:20:13,055 --> 00:20:22,041
And then there's serverless. Can you use lambdas or some other mechanism for executing code remotely without having to manage all the operations of servers?

387
00:20:22,461 --> 00:20:23,382
It's really, really appealing.

388
00:20:26,464 --> 00:20:31,787
I can only tell you what we've worked with and sort of evolution that I saw. This is where we started with the maestros.

389
00:20:32,127 --> 00:20:38,070
There's, it looks like there's a lot here and platforms tend to kind of grow large in the number of different

390
00:20:38,450 --> 00:20:41,152
pieces of technology that they're using and deploying.

391
00:20:41,672 --> 00:20:44,173
So we've got a client talking to our mega platform.

392
00:20:44,193 --> 00:20:47,655
This is kind of where we started. We've got one Node.js project.

393
00:20:48,436 --> 00:20:55,580
That Node.js project serves up a web page that we can use for administrating and making changes. It talks to our database, it talks to a cache.

394
00:20:57,024 --> 00:21:01,988
We did have a separate project for our chat server because we realized that also needed

395
00:21:02,008 --> 00:21:06,432
to be on the TCP connection prior to learning that we would need our main game to be on

396
00:21:06,452 --> 00:21:07,273
the TCP connection.

397
00:21:08,094 --> 00:21:14,099
And the game servers themselves had another little node just executable to manage starting

398
00:21:14,139 --> 00:21:21,066
and stopping the UDK or the Unreal process on them that had to live on the same boxes.

399
00:21:22,349 --> 00:21:23,850
So we had three projects at this point,

400
00:21:24,070 --> 00:21:25,310
and our client talked to you about

401
00:21:25,330 --> 00:21:27,051
a couple other pieces of technology

402
00:21:27,071 --> 00:21:29,312
that were deployed as sort of supporting systems.

403
00:21:30,733 --> 00:21:32,634
And we looked at this and we said,

404
00:21:32,854 --> 00:21:35,956
okay, what are the problems with the architecture?

405
00:21:35,976 --> 00:21:36,876
Let's do a little review.

406
00:21:37,456 --> 00:21:38,877
Well, we know we don't have enough redundancy.

407
00:21:39,277 --> 00:21:41,698
There's one server that kind of underpins the whole thing

408
00:21:41,738 --> 00:21:44,159
that does the lobbies and the logging in

409
00:21:44,179 --> 00:21:46,500
and a whole bunch of different things.

410
00:21:47,001 --> 00:21:48,982
So there's not a lot of redundancy.

411
00:21:49,002 --> 00:21:49,762
If we lose that box,

412
00:21:50,955 --> 00:21:55,757
If we were on Azure at the time, if Microsoft Azure decides to turn off that box, our game is down.

413
00:21:57,217 --> 00:22:02,878
So that's not good. Our game server management was kind of buggy, and so we wanted to change that around.

414
00:22:04,239 --> 00:22:06,899
The deployment system we were using was copy-paste,

415
00:22:08,000 --> 00:22:11,140
which was not very robust, and we tended to have errors in that sometimes.

416
00:22:13,350 --> 00:22:14,711
And it probably won't scale.

417
00:22:14,971 --> 00:22:17,252
Not the biggest concern as an independent game,

418
00:22:17,312 --> 00:22:19,612
but you would love to know that,

419
00:22:20,273 --> 00:22:21,273
given you were having scale,

420
00:22:21,293 --> 00:22:23,293
there was some way that you could just throw money

421
00:22:23,333 --> 00:22:24,674
at the problem to scale.

422
00:22:24,974 --> 00:22:26,474
In this case, that would have just been increasing

423
00:22:26,514 --> 00:22:28,295
the size of that one box.

424
00:22:28,695 --> 00:22:30,856
But even more specifically, with Node.js,

425
00:22:30,876 --> 00:22:32,376
we would actually just need to be increasing

426
00:22:32,456 --> 00:22:35,217
the performance of a single core of the CPU,

427
00:22:35,277 --> 00:22:36,398
or a single thread performance.

428
00:22:37,538 --> 00:22:38,718
So it doesn't scale super well,

429
00:22:38,838 --> 00:22:41,219
and that's the thing that we're thinking about.

430
00:22:43,099 --> 00:22:45,600
Our solution, because we were so infatuated

431
00:22:45,640 --> 00:22:47,681
with microservices and I was learning all about them

432
00:22:47,741 --> 00:22:51,663
in AAA land, was to apply a microservices philosophy

433
00:22:51,964 --> 00:22:52,984
to the platform that we had.

434
00:22:54,185 --> 00:22:56,826
And what we ended up with was our player stats

435
00:22:56,906 --> 00:22:58,307
and player accounts and player lobbies

436
00:22:58,347 --> 00:23:00,788
turned into three separate services,

437
00:23:01,148 --> 00:23:02,149
three separate projects.

438
00:23:02,549 --> 00:23:04,390
They were deployed behind load balancers

439
00:23:04,450 --> 00:23:05,791
so we could have multiple of each

440
00:23:06,311 --> 00:23:07,671
and that gave us that redundancy.

441
00:23:10,233 --> 00:23:12,734
And yeah, I mean we had this whole.

442
00:23:13,153 --> 00:23:15,414
new fangled deployment in microservices.

443
00:23:15,714 --> 00:23:17,035
We didn't get all the way through,

444
00:23:17,135 --> 00:23:19,936
so our chat system was not multi-serviced.

445
00:23:20,496 --> 00:23:22,036
It was not turned into microservice.

446
00:23:23,817 --> 00:23:25,057
But we implemented this whole thing,

447
00:23:26,018 --> 00:23:31,479
and so the question is, was this the solution or not?

448
00:23:33,560 --> 00:23:35,461
Again, hindsight being 20-20,

449
00:23:35,941 --> 00:23:40,762
I think that we did encounter a lot of unknown effort.

450
00:23:41,372 --> 00:23:43,233
underneath the covers of deciding we're gonna be

451
00:23:43,253 --> 00:23:44,814
a microservices ecosystem.

452
00:23:45,734 --> 00:23:47,735
It actually ended up costing me months of tooling,

453
00:23:48,376 --> 00:23:49,537
especially on the deployment side,

454
00:23:49,957 --> 00:23:54,420
where copying folders felt bad with a single service,

455
00:23:55,040 --> 00:23:57,301
but worked, it was just impossible.

456
00:23:57,361 --> 00:23:58,442
When I needed to deploy,

457
00:23:58,462 --> 00:24:01,784
I think we ended up with seven microservices

458
00:24:02,464 --> 00:24:05,446
on probably seven microservices

459
00:24:05,506 --> 00:24:07,107
across multiple different boxes.

460
00:24:07,888 --> 00:24:09,829
You're talking about maybe 14 to 20 deploys.

461
00:24:12,290 --> 00:24:13,070
Not ideal.

462
00:24:14,191 --> 00:24:16,533
And then all of our projects had to look identical

463
00:24:17,073 --> 00:24:19,475
in order to be deployed the same way, operated the same way.

464
00:24:19,795 --> 00:24:21,676
We needed a lot of tooling to monitor.

465
00:24:22,416 --> 00:24:24,578
Sharing code was a lot less easy

466
00:24:24,858 --> 00:24:27,100
when it was actually sharing libraries

467
00:24:27,180 --> 00:24:28,981
or copy pasting files across,

468
00:24:29,641 --> 00:24:33,063
and much more difficult than just reusing a class,

469
00:24:33,384 --> 00:24:33,804
for instance.

470
00:24:36,165 --> 00:24:42,390
And it made the code a lot more complicated in a lot of ways because where we used to have a method call between two classes

471
00:24:43,051 --> 00:24:46,294
just calling function now we might have to call overHP.

472
00:24:47,455 --> 00:24:50,257
A really specific use case for this was

473
00:24:51,118 --> 00:24:53,000
when we separated player counts and player stats.

474
00:24:54,021 --> 00:24:58,264
It felt like a really great idea at the time and I think for large-scale games

475
00:24:58,304 --> 00:25:03,649
it's really important to do that. For an independent game you incur a specific cost so creating an account

476
00:25:04,275 --> 00:25:07,137
means that you're gonna have to create a row in your database

477
00:25:07,217 --> 00:25:09,879
or a document in MongoDB, which we were using,

478
00:25:10,519 --> 00:25:12,480
for the account and the email, et cetera.

479
00:25:13,101 --> 00:25:14,281
And then you're going to have to tell

480
00:25:14,301 --> 00:25:16,162
the PlayerStatsService as well

481
00:25:16,282 --> 00:25:18,404
to create statistics for this player,

482
00:25:19,224 --> 00:25:20,605
saying that they've played zero games,

483
00:25:20,705 --> 00:25:23,306
they're at level zero with zero experience, et cetera.

484
00:25:23,727 --> 00:25:28,710
And now you have this multi-hop asynchronous situation

485
00:25:28,790 --> 00:25:30,651
where the player calls up to the server

486
00:25:30,971 --> 00:25:31,952
and asks for an account to be created.

487
00:25:32,532 --> 00:25:34,413
Player accounts calls to its database and says,

488
00:25:34,473 --> 00:25:35,134
make me a record.

489
00:25:36,515 --> 00:25:39,077
Then player accounts calls to the player stats service

490
00:25:39,117 --> 00:25:40,698
who says, go make some new stats.

491
00:25:41,258 --> 00:25:42,259
And then the stats service,

492
00:25:42,679 --> 00:25:43,920
let's go back and take a look at this.

493
00:25:45,221 --> 00:25:47,303
Then the stats service calls to his database and says,

494
00:25:47,703 --> 00:25:48,984
make a row for their stats.

495
00:25:49,825 --> 00:25:51,766
And then that returns and then that returns

496
00:25:52,106 --> 00:25:52,987
and then that returns.

497
00:25:53,407 --> 00:25:56,470
So we've just introduced something like five to six hops

498
00:25:57,190 --> 00:25:58,111
just to create a new account.

499
00:25:59,302 --> 00:26:02,722
The problem comes if you have a failure in any one of those links.

500
00:26:02,902 --> 00:26:08,243
You have to walk back each one of those creations one at a time,

501
00:26:08,363 --> 00:26:11,564
or else you'll end up in sort of a corrupt state with half of a player created.

502
00:26:15,585 --> 00:26:20,926
So, lots of code complications and where does the data live and who owns it.

503
00:26:21,706 --> 00:26:22,986
Lots of interesting questions there.

504
00:26:23,786 --> 00:26:26,027
Hard problems to solve that we didn't know going into it.

505
00:26:27,747 --> 00:26:27,867
So.

506
00:26:28,848 --> 00:26:31,969
Which of these many different paths are indie approved?

507
00:26:33,570 --> 00:26:38,472
I certainly felt like I put a lot of effort into that but the system we ended up with was really a great ecosystem to

508
00:26:38,512 --> 00:26:43,635
work in which we solved some of the issues. So the answer is I'm not sure and

509
00:26:43,855 --> 00:26:47,696
in fact for your particular case, I would recommend you go and read some literature on this.

510
00:26:48,457 --> 00:26:49,577
Listen to some smart people.

511
00:26:51,578 --> 00:26:52,098
Martin Fowler

512
00:26:52,785 --> 00:26:55,026
wrote an entire thing about microservices premium,

513
00:26:55,246 --> 00:26:56,967
which this article talks about

514
00:26:57,247 --> 00:26:59,268
the cost of implementing microservices.

515
00:26:59,668 --> 00:27:01,309
And that's sort of things that we experienced

516
00:27:02,510 --> 00:27:05,391
naively sort of charging into this space.

517
00:27:06,492 --> 00:27:10,113
And Paul Hammett has an interesting article

518
00:27:10,134 --> 00:27:13,895
on cookie-cutter scaling, which addresses this notion of,

519
00:27:13,955 --> 00:27:15,376
well, what if we were to build a monolith

520
00:27:16,797 --> 00:27:20,039
and replicate it so that we have three of these monoliths

521
00:27:20,059 --> 00:27:20,979
so that we can scale?

522
00:27:21,402 --> 00:27:23,283
horizontally by adding more boxes.

523
00:27:24,304 --> 00:27:30,188
What are the costs associated with that? How does that compare to microservices or even a single server things like that?

524
00:27:31,589 --> 00:27:34,652
Definitely be mindful of your time and know what you're getting into.

525
00:27:37,053 --> 00:27:41,377
So having talked about all of this, I think that there are some really key takeaways here.

526
00:27:41,997 --> 00:27:49,103
One is that as you'll probably learn or maybe you already have your most limited resources your time. It feels infinite, but

527
00:27:50,147 --> 00:27:52,649
for every day that you're working on your game,

528
00:27:52,709 --> 00:27:56,112
especially if you're doing it as your primary job.

529
00:27:57,133 --> 00:27:59,235
You've gotta pay your rent, you've gotta pay for your food,

530
00:28:00,456 --> 00:28:03,619
and time is also important in terms of market timing.

531
00:28:03,699 --> 00:28:05,481
So things that take a long time

532
00:28:05,721 --> 00:28:07,342
are things you should second guess

533
00:28:07,402 --> 00:28:08,644
as an independent developer.

534
00:28:09,424 --> 00:28:10,685
And it's hard to be mindful

535
00:28:10,725 --> 00:28:12,307
in a space that you're not super aware of,

536
00:28:12,727 --> 00:28:14,349
but hopefully this has highlighted some things

537
00:28:14,389 --> 00:28:16,490
that can be black hole for your time.

538
00:28:18,163 --> 00:28:24,546
motivation is sort of equally important because a lot of times the amount of time that you spend is really determined

539
00:28:24,906 --> 00:28:29,609
not just by how much time you have but also how motivated you are by the project and by the ideas so

540
00:28:30,149 --> 00:28:34,712
choosing Node.js for us was a great motivator and allowed us to learn new things and get excited.

541
00:28:34,952 --> 00:28:41,315
We made mistakes along the way, but I would say the trade-off as an indie is that you get a little bit more

542
00:28:42,556 --> 00:28:47,738
your players hopefully are a little bit more lax about your bugs and are more just excited about the ideas that you're excited about and

543
00:28:48,253 --> 00:28:49,755
of concepts you're trying to get across.

544
00:28:50,756 --> 00:28:52,778
The other one is sort of to beware the hype train.

545
00:28:53,318 --> 00:28:55,180
There are definitely dragons in the hype train.

546
00:28:55,481 --> 00:28:57,723
The hype train for us happen to be microservices, I think.

547
00:28:58,484 --> 00:29:02,688
And specifically about being aware of the hype train is,

548
00:29:03,289 --> 00:29:04,510
as an independent developer,

549
00:29:04,570 --> 00:29:06,472
you probably have some fantastic game mechanics

550
00:29:06,492 --> 00:29:07,754
that you want to be on the bleeding edge of.

551
00:29:08,354 --> 00:29:10,336
But you can only be on the bleeding edge of so many things.

552
00:29:11,391 --> 00:29:15,955
You probably don't want to be on the bleeding edge of online services as an independent

553
00:29:15,995 --> 00:29:19,238
game because it's going to cost you a lot of time and it's not going to give you the

554
00:29:19,278 --> 00:29:25,463
value that it might give a AAA studio or a publisher where they're getting cost savings

555
00:29:25,544 --> 00:29:31,329
across tens of thousands of players or millions of players and multiple games and things like

556
00:29:31,369 --> 00:29:31,589
that.

557
00:29:31,689 --> 00:29:34,031
So your goal should be to release your game.

558
00:29:34,515 --> 00:29:41,945
And so beware of the hype train because there are unsolved problems in new technologies

559
00:29:42,425 --> 00:29:47,832
and it's probably not your best use of your time to be solving those problems unless that's

560
00:29:47,872 --> 00:29:48,253
your jam.

561
00:29:49,955 --> 00:29:51,017
Cool, but thank you for your time.

