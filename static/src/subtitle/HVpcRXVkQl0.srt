1
00:00:07,153 --> 00:00:07,773
Good day.

2
00:00:08,074 --> 00:00:08,914
Hi, everyone.

3
00:00:09,395 --> 00:00:11,397
So if we could start off with some housekeeping.

4
00:00:11,577 --> 00:00:14,079
First of all, if you could turn off your cell phones

5
00:00:14,119 --> 00:00:16,301
for the next hour, just mute them or whatever.

6
00:00:17,182 --> 00:00:19,744
And at the end of the talk, I'm going to ask you this again.

7
00:00:19,804 --> 00:00:22,067
But if you could answer the feedback email

8
00:00:22,487 --> 00:00:24,209
that GDC sends through to you.

9
00:00:24,229 --> 00:00:27,291
OK, with that, let's get started.

10
00:00:28,050 --> 00:00:28,991
Hi, I'm Claire.

11
00:00:29,151 --> 00:00:29,952
I'm from Sony.

12
00:00:30,072 --> 00:00:33,254
I work out of London, and I work as a senior online consultant.

13
00:00:33,394 --> 00:00:35,835
So mostly I work with first party titles.

14
00:00:36,376 --> 00:00:37,777
And occasionally, I'm lucky enough

15
00:00:37,797 --> 00:00:40,118
to work with some indies through our strategic content

16
00:00:40,258 --> 00:00:41,899
or ex dev teams.

17
00:00:43,298 --> 00:00:45,539
So what is this talk and what isn't it?

18
00:00:45,840 --> 00:00:48,461
First of all, this talk is for generalists and indies,

19
00:00:48,521 --> 00:00:50,243
people without network experience.

20
00:00:50,763 --> 00:00:52,344
At the end of this talk, hopefully you

21
00:00:52,384 --> 00:00:56,087
should know all the things you don't know about networking.

22
00:00:56,447 --> 00:00:58,588
And you can take maybe one or two of those topics,

23
00:00:59,029 --> 00:01:00,930
and you can research them in your own time

24
00:01:00,970 --> 00:01:02,971
and find out what you need to do for your game.

25
00:01:06,852 --> 00:01:10,553
Okay, so the first rule is everyone connects.

26
00:01:10,893 --> 00:01:13,194
Even if you are making a single-player title,

27
00:01:13,574 --> 00:01:16,074
you will be connecting to platform services.

28
00:01:17,075 --> 00:01:20,395
So, we're going to go through a bunch of stuff that you can do

29
00:01:20,535 --> 00:01:22,876
in a single-player and a multiplayer title.

30
00:01:23,536 --> 00:01:26,157
First of all, you need to leverage the power

31
00:01:26,317 --> 00:01:27,137
of the platform.

32
00:01:27,657 --> 00:01:29,918
If you're on Steam, if you're on Xbox, or if you're

33
00:01:29,938 --> 00:01:32,758
on PlayStation, there is a whole range of services

34
00:01:32,778 --> 00:01:36,339
that are provided to you for free to use and abuse.

35
00:01:37,239 --> 00:01:42,323
Now, the difficult part about networking is actually to make it cheap, to make it scalable,

36
00:01:42,463 --> 00:01:43,544
and to make it fast.

37
00:01:46,829 --> 00:01:50,432
OK, so the other thing I love about networking

38
00:01:50,512 --> 00:01:52,133
is with a little bit of networking,

39
00:01:52,153 --> 00:01:54,875
you can actually do really powerful features.

40
00:01:55,495 --> 00:01:58,317
But these are the kind of things that a designer can't necessarily

41
00:01:58,378 --> 00:01:59,398
come up with themselves.

42
00:01:59,779 --> 00:02:02,380
And that's where your technical expertise in networking

43
00:02:02,440 --> 00:02:03,361
is really going to help.

44
00:02:03,761 --> 00:02:06,664
And if you're an indie where you've got multiple of this stuff in your head,

45
00:02:07,124 --> 00:02:08,365
that's kind of a superpower.

46
00:02:09,285 --> 00:02:14,268
So, let's start off with trophies. Traditionally not thought of as a networking feature, every

47
00:02:14,328 --> 00:02:19,570
title has it. Now, the interesting thing about trophies is that they're stored on the server

48
00:02:19,590 --> 00:02:24,452
and they're shared. So, this is a water cooler moment that you can create. This is a shared

49
00:02:24,532 --> 00:02:25,393
social landmark.

50
00:02:25,973 --> 00:02:28,655
So without writing any real network code,

51
00:02:29,075 --> 00:02:31,697
you already can have this common reference point.

52
00:02:32,137 --> 00:02:34,099
And you can say, hey, your friend

53
00:02:34,159 --> 00:02:36,000
has already achieved this trophy.

54
00:02:36,601 --> 00:02:39,363
Or you can highlight activity that's going on in the game.

55
00:02:39,983 --> 00:02:43,386
It's a very simplistic example, but it's

56
00:02:43,426 --> 00:02:46,568
a good example of how a traditionally non-network

57
00:02:46,608 --> 00:02:49,270
library can be used for networking features.

58
00:02:52,217 --> 00:02:56,218
Leaderboards are perhaps one of my favorite little hacks and usages.

59
00:02:56,778 --> 00:03:01,880
High score tables were kind of the first reason we invented save states and persistence, right?

60
00:03:02,240 --> 00:03:07,202
They're the first long-term data store that we started doing in games.

61
00:03:07,922 --> 00:03:13,304
But then once we took those same leaderboards and we made them online, they're now shared

62
00:03:13,464 --> 00:03:14,664
online persistent state.

63
00:03:15,244 --> 00:03:16,825
And that's really exciting.

64
00:03:17,266 --> 00:03:19,928
That is a world view we all share.

65
00:03:20,688 --> 00:03:23,590
Now, the cool thing about leaderboards is,

66
00:03:23,951 --> 00:03:27,914
first of all, find out if your platform has fixed or flexible leaderboards.

67
00:03:28,354 --> 00:03:30,335
Fixed leaderboards can be a bit of a pain in the ass

68
00:03:30,375 --> 00:03:32,137
because they require pre-setup.

69
00:03:32,617 --> 00:03:35,039
And flexible leaderboards, you can do all sorts of things

70
00:03:35,079 --> 00:03:36,860
like create leaderboards on demand

71
00:03:37,220 --> 00:03:40,343
for challenges and features that are hyper-specific.

72
00:03:41,366 --> 00:03:47,629
then the really cool thing is your leaderboard data does not need to match the UI you display.

73
00:03:48,249 --> 00:03:49,589
So let's say I get a score of 100.

74
00:03:50,610 --> 00:03:57,172
Well, if instead of posting 100, I post 1,001, then that 1 can be used to represent that

75
00:03:57,212 --> 00:03:59,573
I played a rogue on that particular mission.

76
00:04:00,354 --> 00:04:02,234
And I can surface that data up.

77
00:04:02,615 --> 00:04:05,036
And as long as a good score is a higher number,

78
00:04:06,112 --> 00:04:07,434
the leaderboard will still function.

79
00:04:08,014 --> 00:04:11,579
You are responsible for always displaying your leaderboards.

80
00:04:11,939 --> 00:04:13,601
So that's a really cool little hack.

81
00:04:13,721 --> 00:04:15,543
And using the least significant bits,

82
00:04:15,904 --> 00:04:17,666
you can pack a lot of data in,

83
00:04:18,266 --> 00:04:21,110
and that can give you a much more interesting leaderboard.

84
00:04:21,910 --> 00:04:24,772
The other thing you can do is you can put a simple checksum

85
00:04:25,173 --> 00:04:26,574
in your leaderboard score posting.

86
00:04:26,934 --> 00:04:29,095
Now that sounds like a bit of redundancy,

87
00:04:29,516 --> 00:04:31,517
but by putting a simple checksum bit in,

88
00:04:31,897 --> 00:04:34,159
you will avoid a lot of the hacks that

89
00:04:34,199 --> 00:04:37,641
happen on PC leaderboards and mobile leaderboards

90
00:04:37,661 --> 00:04:39,963
where they do large-scale score posting.

91
00:04:40,343 --> 00:04:44,406
And if your score has some intrinsic little bits to it,

92
00:04:44,446 --> 00:04:46,707
like some custom code that's yours,

93
00:04:47,408 --> 00:04:49,289
it's very easy to pick out when someone's

94
00:04:49,349 --> 00:04:49,709
posting 999999.

95
00:04:52,211 --> 00:04:53,813
It's a simple example, but I like it.

96
00:04:54,293 --> 00:04:59,119
The other thing is most modern leaderboard systems have a binary data attachment.

97
00:04:59,840 --> 00:05:04,005
Now that score trick I mentioned is still super useful because when you retrieve a page

98
00:05:04,045 --> 00:05:09,271
of leaderboard results, you're typically retrieving a page of scores, whereas the binary data

99
00:05:09,291 --> 00:05:09,531
stuff...

100
00:05:09,931 --> 00:05:12,054
It's typically a separate follow-on call.

101
00:05:12,574 --> 00:05:16,578
So that binary data is really handy because you've got the shared persistent state.

102
00:05:16,939 --> 00:05:21,624
That binary data could be a challenge, it could be a ghost, it could be the particular

103
00:05:21,724 --> 00:05:22,965
loot you finished it with.

104
00:05:23,366 --> 00:05:27,971
There's all sorts of things you can do with that once you've wired it up and supported

105
00:05:28,011 --> 00:05:29,813
it and exposed it up to your designers.

106
00:05:31,608 --> 00:05:33,010
and plan for leaderboard bugs

107
00:05:33,150 --> 00:05:34,873
because you are going to have them.

108
00:05:35,333 --> 00:05:37,676
Find out what your platform's policies are

109
00:05:38,057 --> 00:05:40,480
in regards to fixing a single leaderboard entry,

110
00:05:40,580 --> 00:05:42,362
fixing multiple entries in bulk,

111
00:05:42,843 --> 00:05:44,705
or potentially resetting the leaderboards.

112
00:05:45,146 --> 00:05:46,728
Have contingency plans in place

113
00:05:46,748 --> 00:05:47,909
because I guarantee you,

114
00:05:48,270 --> 00:05:50,353
you will have to fix some leaderboard entries.

115
00:05:52,435 --> 00:05:54,417
So this is the most basic example.

116
00:05:54,477 --> 00:05:56,378
Pretty much all of these platform features

117
00:05:56,418 --> 00:05:58,359
that I'm talking about and these social features

118
00:05:58,939 --> 00:06:00,560
are built on REST APIs.

119
00:06:01,100 --> 00:06:04,282
This isn't complicated stuff, but it's a good starting point.

120
00:06:04,943 --> 00:06:06,944
So Curl is something that's going

121
00:06:06,964 --> 00:06:09,445
to be available on pretty much every platform you ever

122
00:06:09,505 --> 00:06:10,006
work with.

123
00:06:10,346 --> 00:06:12,527
And before you write a single line of code

124
00:06:12,547 --> 00:06:15,849
to hit a new web API, you really should

125
00:06:15,909 --> 00:06:19,631
look at just poking it with Curl and figuring some bits out.

126
00:06:20,432 --> 00:06:26,374
Now, as you move on from curl, you can look at tools like Postman, which are a suite of

127
00:06:26,474 --> 00:06:30,496
curl-like tools to do automated testing or bulk calls.

128
00:06:30,996 --> 00:06:32,276
Now, Postman is just one example.

129
00:06:32,296 --> 00:06:34,737
There's a whole suite of REST API stuff out there.

130
00:06:35,358 --> 00:06:39,579
As we get on to real-time networking later in the talk, I will mention Wireshark again,

131
00:06:39,639 --> 00:06:45,262
but I'm going to mention it here because you can use Wireshark to debug REST-style calls

132
00:06:45,322 --> 00:06:47,483
and to look at the actual payloads that are being sent.

133
00:06:48,183 --> 00:06:51,207
But that's a very simple example where we're posting some JSON

134
00:06:51,247 --> 00:06:53,289
data through to an endpoint.

135
00:06:53,870 --> 00:06:56,954
Now, there's a big gotcha here about memory allocation

136
00:06:57,014 --> 00:06:58,156
and runtime performance.

137
00:06:58,696 --> 00:07:02,942
Most web tools and most of these RESTful API sets and libraries

138
00:07:02,982 --> 00:07:06,166
that are written are not written with performance in mind.

139
00:07:06,706 --> 00:07:10,028
So especially when they're parsing XML or JSON

140
00:07:10,068 --> 00:07:11,509
and those kind of things, they'll

141
00:07:11,689 --> 00:07:13,850
often do a lot of runtime allocations.

142
00:07:13,970 --> 00:07:15,771
That'll cause you big performance issues

143
00:07:15,792 --> 00:07:17,252
with your garbage collector.

144
00:07:17,873 --> 00:07:20,594
So it's worth looking for a gaming-specific alternative

145
00:07:20,634 --> 00:07:23,596
library or just analyzing in your profiler

146
00:07:23,956 --> 00:07:25,517
what your networking libraries are doing,

147
00:07:25,557 --> 00:07:27,358
because that can cause you a lot of problems.

148
00:07:29,420 --> 00:07:32,361
OK, but now here's a really simple Unity example.

149
00:07:32,401 --> 00:07:34,082
That's a very small amount of code

150
00:07:34,122 --> 00:07:35,823
to actually post a screenshot.

151
00:07:36,341 --> 00:07:37,261
to an endpoint.

152
00:07:37,601 --> 00:07:40,982
So that's posting some binary data to a web endpoint.

153
00:07:41,622 --> 00:07:42,783
And that's really powerful.

154
00:07:43,023 --> 00:07:46,324
So really, you need to look at what platform and middleware

155
00:07:46,384 --> 00:07:47,424
is available to you.

156
00:07:47,844 --> 00:07:49,565
You don't want to reinvent the wheel.

157
00:07:49,985 --> 00:07:52,465
Because if you actually go behind the scenes of what

158
00:07:52,505 --> 00:07:55,366
this is doing, if you look at it like a C++ lib,

159
00:07:55,806 --> 00:07:58,427
you'll see multi-part form processing,

160
00:07:58,767 --> 00:08:00,888
where you've actually got to split up this data,

161
00:08:01,308 --> 00:08:03,168
can be actually quite a headache.

162
00:08:05,977 --> 00:08:09,940
Okay, so let's use Pixel to go into our next little bit

163
00:08:10,120 --> 00:08:10,921
on real time.

164
00:08:11,461 --> 00:08:14,123
Now, sockets are something I find a lot of people

165
00:08:14,164 --> 00:08:17,486
get scared off by, but they're actually really simple

166
00:08:17,566 --> 00:08:18,207
as a concept.

167
00:08:19,068 --> 00:08:22,771
A socket is the basic tool we use in real time networking,

168
00:08:23,171 --> 00:08:25,513
where you set it up, you get it to listen,

169
00:08:26,093 --> 00:08:26,914
and then you loop it.

170
00:08:27,415 --> 00:08:29,676
And now listening is a blocking operation,

171
00:08:29,857 --> 00:08:32,119
and that's kind of where our problems start.

172
00:08:32,139 --> 00:08:33,380
We'll get back to that in a sec.

173
00:08:34,320 --> 00:08:36,182
There are three kinds of sockets you can get, well,

174
00:08:36,242 --> 00:08:37,183
really two kinds.

175
00:08:37,443 --> 00:08:40,665
TCP or the standard internet socket that you'll be used to.

176
00:08:40,725 --> 00:08:43,687
This is where there's a lot of overhead to ensure the data

177
00:08:43,707 --> 00:08:46,189
that you're sending is arriving and is definitely

178
00:08:46,229 --> 00:08:46,930
being confirmed.

179
00:08:47,811 --> 00:08:51,794
UDP is much more low level and faster and generally what you

180
00:08:51,834 --> 00:08:52,794
want to use in games.

181
00:08:53,355 --> 00:08:55,837
Of course, the old joke with UDP is I'd tell you a UDP

182
00:08:55,877 --> 00:08:57,218
joke, but I don't care if you get it.

183
00:08:59,019 --> 00:09:03,782
But as you move into games, you'll probably find that you want to use some flavor of UDP

184
00:09:03,922 --> 00:09:05,543
like reliable UDP.

185
00:09:06,143 --> 00:09:11,987
In this case, it'll have a bit of extra helper functionality that's added in by a library

186
00:09:12,087 --> 00:09:16,930
or some middleware to allow you to do, say, reliable UDP packets so you know they've been

187
00:09:16,950 --> 00:09:20,372
delivered or allows you to do in-order packet delivery.

188
00:09:21,373 --> 00:09:24,358
You can set this on a per packet basis, which is really handy,

189
00:09:24,378 --> 00:09:26,281
because if you're sending all of your traffic

190
00:09:26,702 --> 00:09:28,966
as in-order, reliable UDP, you've

191
00:09:29,006 --> 00:09:32,271
kind of lost all the benefit of working in UDP.

192
00:09:32,912 --> 00:09:35,076
So it's worth thinking that that comes with an overhead.

193
00:09:36,505 --> 00:09:38,246
WebSockets are super cool.

194
00:09:38,606 --> 00:09:40,487
If you're doing anything with mobile,

195
00:09:40,527 --> 00:09:41,807
or if you want a companion app,

196
00:09:42,168 --> 00:09:43,768
there's a whole bunch of functionality there.

197
00:09:44,249 --> 00:09:46,990
If you're doing your game and you're maybe deploying

198
00:09:47,010 --> 00:09:49,671
to console or something where you might not always

199
00:09:49,691 --> 00:09:51,752
have access to the build,

200
00:09:51,772 --> 00:09:53,253
so let's say you're taking a build to PAX.

201
00:09:54,254 --> 00:09:56,575
and you've got a shipping build, because you don't want

202
00:09:56,595 --> 00:09:58,136
all your debug stuff in there, you

203
00:09:58,156 --> 00:10:00,478
can actually put a little HTTP server in there

204
00:10:00,518 --> 00:10:02,279
that's doing a little TCP socket.

205
00:10:02,679 --> 00:10:04,440
And you can connect from your laptop,

206
00:10:04,540 --> 00:10:07,722
and you can do some basic turn on stuff and debugging stuff.

207
00:10:08,102 --> 00:10:09,243
And that's really handy.

208
00:10:09,283 --> 00:10:11,404
So web sockets have a lot of hidden uses.

209
00:10:11,805 --> 00:10:14,386
And all they really are is a TCP socket

210
00:10:14,687 --> 00:10:16,688
with a few standards wrapped around them,

211
00:10:16,748 --> 00:10:20,070
so they are a bit safer, because the browser's a bit concerned

212
00:10:20,110 --> 00:10:20,870
about security.

213
00:10:21,931 --> 00:10:23,851
And as I said, the gotcha with sockets

214
00:10:24,031 --> 00:10:24,972
isn't so much sockets.

215
00:10:24,992 --> 00:10:26,072
They're actually quite easy,

216
00:10:26,112 --> 00:10:27,512
and you should just play around with them.

217
00:10:28,312 --> 00:10:29,633
You'll pick them up very quickly.

218
00:10:30,113 --> 00:10:31,653
The gotcha is concurrency,

219
00:10:31,753 --> 00:10:32,933
and obviously every programmer

220
00:10:32,953 --> 00:10:34,233
who's ever worked with concurrency

221
00:10:34,293 --> 00:10:35,734
knows the overheads that comes with.

222
00:10:36,194 --> 00:10:38,614
You've gotta think about your mutex locks,

223
00:10:38,654 --> 00:10:39,394
and you've gotta think about

224
00:10:39,494 --> 00:10:41,035
how you're dealing with your memory,

225
00:10:41,055 --> 00:10:42,875
and how you're gonna stomp on top of each other.

226
00:10:43,375 --> 00:10:45,836
The good news is if you're working in C Sharp

227
00:10:45,876 --> 00:10:46,796
or a modern language,

228
00:10:47,096 --> 00:10:49,676
there's a lot of tools that really help you out.

229
00:10:50,157 --> 00:10:51,798
with concurrent programming.

230
00:10:52,659 --> 00:10:54,260
C++ is getting better as well.

231
00:10:56,362 --> 00:10:59,344
OK, so the most common kind of real-time networking

232
00:10:59,364 --> 00:11:00,685
you're going to come across is actually

233
00:11:00,725 --> 00:11:01,786
one of the most complex.

234
00:11:02,266 --> 00:11:05,709
Implicit networking systems or object replication systems

235
00:11:06,129 --> 00:11:08,712
are the Unity or Unreal default. So this

236
00:11:08,752 --> 00:11:12,094
is when you go into your Unity networking tutorial

237
00:11:12,114 --> 00:11:13,515
or your Unreal networking tutorial,

238
00:11:13,555 --> 00:11:15,977
and they'll tell you, let's make an object networked.

239
00:11:16,718 --> 00:11:18,858
and they hide away a lot of the complexity.

240
00:11:19,359 --> 00:11:21,859
The first thing to realize is object replication

241
00:11:21,899 --> 00:11:25,720
is actually quite a complex technique under the hood,

242
00:11:25,820 --> 00:11:29,001
and it is very state heavy, and it is a bandwidth hog.

243
00:11:29,622 --> 00:11:32,722
The most common mistake I see newer network programmers

244
00:11:32,762 --> 00:11:34,703
doing is replicating everything.

245
00:11:35,443 --> 00:11:38,104
Only replicate what you need to replicate.

246
00:11:39,124 --> 00:11:44,108
So, a classic example is let's say you've got this object in your scene that has a whole

247
00:11:44,148 --> 00:11:48,412
bunch of state and scripts and everything attached to it, but all you really care about

248
00:11:48,492 --> 00:11:50,153
is how it moves about in the scene.

249
00:11:50,673 --> 00:11:55,437
It's better to parent another object to that or to have a hierarchical relationship or

250
00:11:55,457 --> 00:12:00,040
if you're able to replicate, say, just a single component, that's the position component on

251
00:12:00,060 --> 00:12:05,304
the object, because so many times I've seen people basically replicate the entire complex

252
00:12:05,344 --> 00:12:08,047
state of this object and all they cared about was how it moved about in the scene.

253
00:12:08,247 --> 00:12:09,128
was the position.

254
00:12:10,309 --> 00:12:12,050
So that's a classic problem.

255
00:12:12,471 --> 00:12:14,973
The other big gotcha I see with replication systems,

256
00:12:15,394 --> 00:12:16,535
catches people all the time,

257
00:12:17,035 --> 00:12:20,098
is often a zero, a null, or a default value

258
00:12:20,419 --> 00:12:21,820
won't be replicated.

259
00:12:22,301 --> 00:12:23,602
This sounds like a weird edge case,

260
00:12:23,622 --> 00:12:25,303
but you'd be amazed how many bugs

261
00:12:25,404 --> 00:12:26,405
I've seen come up from that.

262
00:12:29,605 --> 00:12:32,088
The other more classical style of networking,

263
00:12:32,148 --> 00:12:34,790
and I'm going very simplistic here as an introduction,

264
00:12:35,191 --> 00:12:36,412
is sort of input only.

265
00:12:36,812 --> 00:12:39,455
So this is when you're saying, I've pushed a button,

266
00:12:39,535 --> 00:12:41,577
and I'm sending that button across the network.

267
00:12:41,977 --> 00:12:44,039
The first bit of advice is don't send the button.

268
00:12:44,420 --> 00:12:45,561
Make it abstracted out.

269
00:12:45,621 --> 00:12:46,602
So I am pushing.

270
00:12:47,042 --> 00:12:50,425
I choose to accelerate at this time, and you timestamp that.

271
00:12:51,166 --> 00:12:54,669
The first implementation you can look at this is a lockstep implementation.

272
00:12:55,149 --> 00:12:58,231
What this means is we gather the inputs from every single client,

273
00:12:58,631 --> 00:13:01,533
we look at them and we go, okay, we can move to the next frame.

274
00:13:01,954 --> 00:13:03,835
Now that sounds really basic,

275
00:13:04,355 --> 00:13:06,137
but it's super reliable.

276
00:13:06,297 --> 00:13:08,658
It has no weird complexity to it.

277
00:13:09,099 --> 00:13:10,720
You can always ensure it's fair.

278
00:13:11,561 --> 00:13:16,205
And outside of some horrible lag spikes, which is where you're going to get your main problems,

279
00:13:16,305 --> 00:13:19,269
like when the lag spikes up to 500, 800 milliseconds,

280
00:13:19,849 --> 00:13:23,633
most of the time your latency is going to be sort of around the 200, 300 range.

281
00:13:24,053 --> 00:13:29,199
And you can easily hide that in your game if you're dealing in a turn-based or a slower action game.

282
00:13:30,946 --> 00:13:32,647
So as I say, it's very low bandwidth,

283
00:13:32,707 --> 00:13:35,249
it's very performance, but it is sensitive to spikes.

284
00:13:35,849 --> 00:13:39,552
And it's worth looking at if you can rewind your state.

285
00:13:40,132 --> 00:13:42,734
Because that gets us onto alternative facts.

286
00:13:43,275 --> 00:13:45,776
Now I could do a whole nother talk on this,

287
00:13:45,896 --> 00:13:49,039
but the laws of physics, I'm afraid, cannot be broken.

288
00:13:49,099 --> 00:13:50,600
The speed of light is a thing

289
00:13:50,680 --> 00:13:52,161
we actually have to deal with.

290
00:13:53,482 --> 00:13:55,903
It's worth realizing that even computers

291
00:13:55,923 --> 00:13:58,105
in the same data sensor talking to each other

292
00:13:58,525 --> 00:13:59,806
add significant overhead.

293
00:14:00,507 --> 00:14:04,729
So the first thing you want to do is think about not what is the truth,

294
00:14:05,290 --> 00:14:10,353
but what the client sees as the truth. Whether they think they hit the target.

295
00:14:10,973 --> 00:14:14,495
So some common techniques you'll come across in research, for instance if you're doing a

296
00:14:14,755 --> 00:14:19,779
shooter, you should look at relative target aim systems. There's some very good talks on that

297
00:14:19,839 --> 00:14:25,522
where basically the the concept is rather than caring about where I shot the bullet out,

298
00:14:25,963 --> 00:14:28,927
and doing a simulation that all the clients agree on

299
00:14:29,087 --> 00:14:31,771
on whether or not I hit, I'm saying,

300
00:14:32,152 --> 00:14:34,816
do I as a client think I hit?

301
00:14:35,376 --> 00:14:37,620
Or I'm saying, I'm shooting relative

302
00:14:37,880 --> 00:14:39,763
from my position at this angle.

303
00:14:40,664 --> 00:14:43,926
Now, obviously, this is open to cheating and exploitation,

304
00:14:44,326 --> 00:14:47,207
and it's where a lot of this hitbox problems come,

305
00:14:47,227 --> 00:14:49,549
and it's where a lot of gaming of lag and stuff comes in.

306
00:14:50,349 --> 00:14:51,890
But it is a good technique, and if you

307
00:14:51,910 --> 00:14:53,310
want to make a performance shooter,

308
00:14:53,330 --> 00:14:55,932
it is really one of the basic techniques you're going to use.

309
00:14:56,952 --> 00:14:59,333
Also, smoothing or correction.

310
00:14:59,353 --> 00:15:01,454
Remember how I was talking about lag spikes?

311
00:15:01,934 --> 00:15:03,554
In the old days, you'd get a situation

312
00:15:03,574 --> 00:15:05,035
where you're playing Quake or something,

313
00:15:05,355 --> 00:15:08,336
and you'd get your character sort of jumping about the level.

314
00:15:08,816 --> 00:15:11,877
And that was because there was no smoothing or correction.

315
00:15:12,457 --> 00:15:14,277
These days, when we get lag spikes

316
00:15:14,477 --> 00:15:18,199
and the truth drifts away from our alternative truth,

317
00:15:18,639 --> 00:15:20,999
we need to kind of sort of bring those together

318
00:15:21,039 --> 00:15:22,500
without the player noticing.

319
00:15:22,940 --> 00:15:25,201
And so we do that over several frames

320
00:15:25,461 --> 00:15:25,741
using...

321
00:15:26,202 --> 00:15:28,152
smoothing techniques and correction.

322
00:15:29,853 --> 00:15:32,715
Also, if you look at a lot of libraries, they'll have some kind

323
00:15:32,755 --> 00:15:35,676
of projectile motion option available often,

324
00:15:36,617 --> 00:15:42,020
and this will basically do a lot of this smoothing and correction

325
00:15:42,100 --> 00:15:44,501
for you over the network, and it'll handle a lot

326
00:15:44,521 --> 00:15:45,401
of the negotiation.

327
00:15:46,022 --> 00:15:49,403
All of these topics are worth investigating individually

328
00:15:49,443 --> 00:15:54,026
if you think they fit your game, but most importantly,

329
00:15:54,046 --> 00:15:56,747
I would say if a library offers it,

330
00:15:57,407 --> 00:16:00,191
Take the libraries or the middlewares offer

331
00:16:00,351 --> 00:16:02,834
as a starting point because there's a lot

332
00:16:02,855 --> 00:16:06,479
of really good code that's been written out on these areas.

333
00:16:06,800 --> 00:16:08,983
And you can always replace it later with your own.

334
00:16:10,651 --> 00:16:14,153
Which comes me to my final topic in the real-time section,

335
00:16:14,634 --> 00:16:16,275
rolling your own networking.

336
00:16:16,455 --> 00:16:19,937
Please, please don't do it until you feel very confident

337
00:16:19,977 --> 00:16:20,477
in networking.

338
00:16:20,918 --> 00:16:23,339
A much better approach is to mix and match.

339
00:16:23,720 --> 00:16:27,622
You can start with an object replication system doing 100%

340
00:16:27,702 --> 00:16:29,023
of your networking.

341
00:16:29,363 --> 00:16:32,625
And for a lot of smaller games, that is actually sufficient.

342
00:16:33,026 --> 00:16:36,548
But then what you can do in the engine is you can say, okay,

343
00:16:37,088 --> 00:16:38,089
first step, I need to.

344
00:16:38,509 --> 00:16:39,450
and my game state.

345
00:16:39,930 --> 00:16:42,551
So you go off and you take some Post-it notes

346
00:16:42,672 --> 00:16:44,212
and whiteboard it and document it,

347
00:16:44,533 --> 00:16:47,574
and you understand at any given time in your frame

348
00:16:48,074 --> 00:16:50,496
what data really matters to you.

349
00:16:51,016 --> 00:16:53,698
And then you decide what data you need to send across.

350
00:16:54,238 --> 00:16:56,239
And you may find that there is some data

351
00:16:56,559 --> 00:16:58,439
that you care about more than others.

352
00:16:58,879 --> 00:17:01,580
And in those situations, you can basically say,

353
00:17:01,620 --> 00:17:04,461
for this particular object, for this particular class,

354
00:17:04,882 --> 00:17:07,342
I'm gonna not use object replication,

355
00:17:07,622 --> 00:17:10,403
but I'm going to write my own implementation for that.

356
00:17:10,944 --> 00:17:13,024
Usually, talking directly to the middleware,

357
00:17:13,044 --> 00:17:15,025
because the middleware will have some kind of

358
00:17:15,105 --> 00:17:17,266
exposed layer for low-level calls.

359
00:17:17,686 --> 00:17:19,346
And that's very, very handy.

360
00:17:21,181 --> 00:17:24,083
Then the next question is, can you rewind and replay?

361
00:17:25,363 --> 00:17:27,805
First of all, this is a cool feature if you have demos,

362
00:17:27,905 --> 00:17:30,626
right, if you can actually save off the game state

363
00:17:30,666 --> 00:17:32,507
and a later time play back the game state.

364
00:17:32,527 --> 00:17:34,308
That's a cool single player feature anyway.

365
00:17:34,989 --> 00:17:39,091
But if your network code, if your game at a basic level

366
00:17:39,131 --> 00:17:39,731
supports this.

367
00:17:40,072 --> 00:17:42,054
you're in a really great state for networking.

368
00:17:42,074 --> 00:17:43,635
There's a lot of advanced techniques

369
00:17:43,675 --> 00:17:44,816
that open up to you.

370
00:17:45,277 --> 00:17:47,479
Everything from service state verification

371
00:17:47,919 --> 00:17:51,242
to rolling back the state when you're doing host migration.

372
00:17:51,262 --> 00:17:53,465
There's a lot of cool stuff that comes up

373
00:17:53,605 --> 00:17:56,628
if your game supports a rewind and a replay state.

374
00:17:57,268 --> 00:17:58,750
And that's no networking code.

375
00:17:58,770 --> 00:18:00,271
So if you're a confident coder,

376
00:18:00,692 --> 00:18:02,053
that's a good place to start

377
00:18:02,093 --> 00:18:03,935
when you're trying to optimize your networking.

378
00:18:05,076 --> 00:18:08,097
And different channels, some platforms will offer you,

379
00:18:08,458 --> 00:18:10,559
or some middlewares will offer you the option

380
00:18:10,799 --> 00:18:12,780
of prioritizing your traffic.

381
00:18:13,380 --> 00:18:14,881
That's a big win a lot of the times,

382
00:18:14,921 --> 00:18:17,102
where you can go, okay, I really want

383
00:18:17,122 --> 00:18:18,603
to prioritize this above this.

384
00:18:18,623 --> 00:18:20,905
So for instance, voice channels are something

385
00:18:20,925 --> 00:18:22,566
we usually put on a very low priority,

386
00:18:22,946 --> 00:18:24,787
or if you're doing a VR game and you care

387
00:18:24,847 --> 00:18:26,548
about the player's position a lot,

388
00:18:26,808 --> 00:18:28,809
but you might not care about their exact

389
00:18:28,949 --> 00:18:32,711
fine-grain motion tracking until they're right up close.

390
00:18:34,739 --> 00:18:37,501
Okay, so because we can't change the laws of physics,

391
00:18:37,561 --> 00:18:39,502
the best thing we can do to help networking

392
00:18:39,882 --> 00:18:42,764
is to send less data and to do more with that data.

393
00:18:43,365 --> 00:18:45,546
So the first thing you can do is throw away data

394
00:18:45,586 --> 00:18:46,947
you don't need to send, right?

395
00:18:47,307 --> 00:18:49,248
So in the classic shooter situation

396
00:18:49,308 --> 00:18:51,390
where you've got eight players battling it out,

397
00:18:51,710 --> 00:18:53,351
but there's three players across the map.

398
00:18:53,851 --> 00:18:58,095
Rather than simulating the whole physics and everything that's going off where those three

399
00:18:58,135 --> 00:19:02,039
players are fighting, you can say, I don't care about those three players, update their

400
00:19:02,099 --> 00:19:07,104
position once every second, and if there's things like rocket explosions and gunfire

401
00:19:07,144 --> 00:19:13,410
going off, just tell, just as custom networking calls, send off the fact that there are explosions

402
00:19:13,550 --> 00:19:16,233
and rocket fire going off in that general direction.

403
00:19:16,713 --> 00:19:18,274
and that's a much more optimal way

404
00:19:18,634 --> 00:19:20,334
to handle that particular situation.

405
00:19:20,694 --> 00:19:23,875
You'll find a lot of cases where you can just throw away

406
00:19:24,015 --> 00:19:26,236
huge reams of data that previously

407
00:19:26,256 --> 00:19:27,676
you were just sending by default.

408
00:19:28,736 --> 00:19:30,637
C++ unions are a very basic topic,

409
00:19:30,677 --> 00:19:32,537
but I find too often in networking

410
00:19:32,957 --> 00:19:35,218
because people haven't come from

411
00:19:35,278 --> 00:19:36,778
a performance critical background

412
00:19:36,818 --> 00:19:38,178
or a memory critical background.

413
00:19:38,659 --> 00:19:46,227
they might not realize how much using an int32 or an int8 would suffice will actually cost them.

414
00:19:46,727 --> 00:19:51,513
And in a situation where you can actually use a C++ union or many other languages equivalent

415
00:19:51,673 --> 00:19:55,617
to bitpack a structure, you'll get a lot more bang for buck.

416
00:19:56,778 --> 00:20:00,421
You know, if you're sending something every single network frame

417
00:20:00,741 --> 00:20:04,344
and you're sending maybe eight instances of the player's data, right,

418
00:20:04,364 --> 00:20:09,348
because it's an eight-player game, and you're able to shave 16 bits off that,

419
00:20:09,728 --> 00:20:11,910
you'd be amazed how much that all adds up.

420
00:20:13,738 --> 00:20:16,300
So the next thing I'd say with compression is we're not talking

421
00:20:16,360 --> 00:20:18,301
about writing a better zip program.

422
00:20:18,581 --> 00:20:21,363
What we're talking about is writing domain-specific

423
00:20:21,423 --> 00:20:22,003
compression.

424
00:20:22,484 --> 00:20:24,825
So if you have UGC, for instance,

425
00:20:24,885 --> 00:20:27,226
where people have a custom hair color,

426
00:20:27,707 --> 00:20:30,148
instead of sending a full RGB value over,

427
00:20:30,528 --> 00:20:33,330
you might just have a selection of colors that you're sending

428
00:20:33,410 --> 00:20:34,911
over that can be compressed right down.

429
00:20:35,351 --> 00:20:39,452
or you might move your custom colors to say a hue saturation value space,

430
00:20:39,832 --> 00:20:42,072
decide you only need to see increments of hue,

431
00:20:42,412 --> 00:20:45,393
decide when the value is too low that you just throw away the hue.

432
00:20:45,453 --> 00:20:47,674
There's a whole bunch of cool stuff you can do.

433
00:20:48,174 --> 00:20:51,674
And if you're interested in some more advanced compression techniques

434
00:20:51,734 --> 00:20:53,475
that will really help your networking,

435
00:20:53,855 --> 00:20:56,415
I highly recommend the Google Compress Ahead videos

436
00:20:56,755 --> 00:21:00,276
as a good introduction to a wide range of networking techniques,

437
00:21:00,556 --> 00:21:01,637
of compression techniques.

438
00:21:02,972 --> 00:21:05,174
Okay, social features, one of my favorites.

439
00:21:05,674 --> 00:21:07,756
We'll use Vertex to go into this one.

440
00:21:08,436 --> 00:21:09,257
Okay, messaging.

441
00:21:09,417 --> 00:21:11,738
This is top of my list.

442
00:21:13,259 --> 00:21:17,142
We have all heard the story of playing a game

443
00:21:17,342 --> 00:21:21,065
and finding a message or a present from a loved one

444
00:21:21,685 --> 00:21:23,466
or someone you haven't spoken to, right?

445
00:21:23,486 --> 00:21:25,928
We've all heard that story that tugs the heartstrings.

446
00:21:26,989 --> 00:21:31,653
The vast majority of messages players send in your game are going to be yo.

447
00:21:31,914 --> 00:21:34,857
They're going to be simple, don't really care.

448
00:21:35,237 --> 00:21:37,239
But out of that minutiae of messages,

449
00:21:37,279 --> 00:21:40,363
you're going to have some really, really special moments.

450
00:21:40,843 --> 00:21:44,387
And every single platform has an option to send

451
00:21:44,767 --> 00:21:49,552
sort of messages with a bit of binary data to another player for free.

452
00:21:50,273 --> 00:21:51,553
with no server on your side.

453
00:21:52,213 --> 00:21:53,594
So why not use that?

454
00:21:53,654 --> 00:21:55,234
That's a really powerful thing.

455
00:21:55,794 --> 00:21:58,095
When you can attach a bit of binary data

456
00:21:58,135 --> 00:22:01,756
to something like this, you can build whole systems

457
00:22:01,996 --> 00:22:02,956
around messaging.

458
00:22:03,256 --> 00:22:05,917
You can not only send someone a message,

459
00:22:05,957 --> 00:22:07,417
you can send them an item.

460
00:22:07,517 --> 00:22:09,098
You can send them a challenge.

461
00:22:09,418 --> 00:22:11,118
You can send them all kinds of stuff.

462
00:22:11,619 --> 00:22:14,022
Messaging is a really, really powerful system,

463
00:22:14,342 --> 00:22:16,965
and especially if you've got a smaller indie game

464
00:22:17,025 --> 00:22:18,708
that doesn't have a huge player base,

465
00:22:19,108 --> 00:22:21,211
it doesn't mean that everyone has to be online

466
00:22:21,231 --> 00:22:22,352
at the same time as well.

467
00:22:22,472 --> 00:22:24,855
It's, I really am a big fan of messaging.

468
00:22:26,342 --> 00:22:28,924
Forums and communities, one of the things everyone

469
00:22:28,964 --> 00:22:32,686
who plays your game has in common is they play your game.

470
00:22:33,407 --> 00:22:37,530
Wiring in communities or wiring in platforms,

471
00:22:37,630 --> 00:22:42,073
forums into your game is technically not as hard a task

472
00:22:42,193 --> 00:22:42,833
as it sounds.

473
00:22:42,993 --> 00:22:45,755
Many times there'll be helper libraries and tools

474
00:22:45,795 --> 00:22:46,876
that'll assist you in this.

475
00:22:47,256 --> 00:22:50,378
And when those social tools are brought into your game,

476
00:22:50,638 --> 00:22:53,400
your players are much more likely to engage around the game.

477
00:22:54,060 --> 00:22:57,124
A very 90s concept I like is shout boxes.

478
00:22:57,665 --> 00:23:01,790
Yes, the shout box may just be you going to your players, hey, look at this thing that's

479
00:23:01,830 --> 00:23:02,471
happened or whatever.

480
00:23:02,871 --> 00:23:05,554
And it could be an RSS feed on your personal website.

481
00:23:05,674 --> 00:23:07,917
It could be on Dropbox.

482
00:23:07,977 --> 00:23:09,279
You know, there's all sorts of places.

483
00:23:09,379 --> 00:23:11,602
Or you could put it on a platform data store.

484
00:23:12,282 --> 00:23:14,444
but you could also maybe allow your players

485
00:23:14,504 --> 00:23:15,646
to use the shout box.

486
00:23:16,106 --> 00:23:18,368
There are a whole range of ways you can approach that.

487
00:23:18,769 --> 00:23:20,691
And with the gotcha of moderation,

488
00:23:21,171 --> 00:23:23,573
if you are relying on platform systems,

489
00:23:24,014 --> 00:23:26,356
you can rely on the platform for moderation,

490
00:23:26,496 --> 00:23:27,778
and that's a big win.

491
00:23:28,338 --> 00:23:30,480
Because if you have to take on the moderation task,

492
00:23:30,540 --> 00:23:31,601
it can get a bit daunting.

493
00:23:31,922 --> 00:23:32,963
You may be fortunate enough

494
00:23:33,003 --> 00:23:34,564
that you're making an 18 plus game,

495
00:23:34,584 --> 00:23:36,046
and you say, oh well, free speech.

496
00:23:37,367 --> 00:23:40,491
But for a lot of people, moderation becomes a very big topic.

497
00:23:40,852 --> 00:23:44,957
So if you use the platform services, moderation gets taken out of your hands and you don't

498
00:23:44,997 --> 00:23:45,858
have to worry about it.

499
00:23:47,835 --> 00:23:50,156
Help, share, sharing, right?

500
00:23:51,356 --> 00:23:54,058
In this day and age, everyone is taking photos

501
00:23:54,218 --> 00:23:55,338
and videos of your game.

502
00:23:55,399 --> 00:23:58,400
The first step is make those photos and videos look good.

503
00:23:58,940 --> 00:24:02,502
The second step is don't send them out into the wilderness

504
00:24:02,562 --> 00:24:04,863
like these files to be lost forever.

505
00:24:05,263 --> 00:24:06,664
Give them some metadata.

506
00:24:07,064 --> 00:24:11,406
You know that photo was taken when they had a hammer equipped

507
00:24:11,467 --> 00:24:12,767
and they were on level five

508
00:24:12,847 --> 00:24:14,808
and they were fighting this monster, right?

509
00:24:15,769 --> 00:24:17,450
You can pack all that data in.

510
00:24:17,770 --> 00:24:19,392
You can put it in the image as well,

511
00:24:19,832 --> 00:24:21,914
but you can put it in the XF data

512
00:24:21,994 --> 00:24:23,495
or the metadata of the image.

513
00:24:24,135 --> 00:24:25,957
Another thing that's becoming a trend

514
00:24:26,277 --> 00:24:28,579
that hasn't surfaced up a lot,

515
00:24:29,139 --> 00:24:30,881
but more and more we're talking about

516
00:24:30,941 --> 00:24:32,902
temporal tagging in videos,

517
00:24:33,222 --> 00:24:35,364
where you're able, when you're recording a video,

518
00:24:35,384 --> 00:24:38,126
to say, at this moment the player scored a goal,

519
00:24:38,286 --> 00:24:40,148
at this moment the player killed an enemy,

520
00:24:40,468 --> 00:24:42,270
and actually tagging that in the...

521
00:24:42,630 --> 00:24:44,170
VTT track of a video.

522
00:24:44,671 --> 00:24:46,871
And that's very interesting because all of this data

523
00:24:46,891 --> 00:24:48,972
that your game is generating goes out,

524
00:24:49,372 --> 00:24:51,313
and then you can use platform services,

525
00:24:51,373 --> 00:24:55,715
or you can even hook up to YouTube or Images API and stuff

526
00:24:55,755 --> 00:24:58,636
and actually pull the stuff back into your game

527
00:24:58,996 --> 00:25:01,497
and sort of show the community all the cool stuff

528
00:25:01,917 --> 00:25:03,417
that is happening around your game.

529
00:25:03,838 --> 00:25:06,399
Now, you don't have to go the full Final Fantasy level,

530
00:25:06,439 --> 00:25:08,900
but we all are kind of prompted at the top there,

531
00:25:08,940 --> 00:25:10,980
and we kind of suck at taking photos.

532
00:25:11,701 --> 00:25:15,444
And if you give players help, if you, when they post,

533
00:25:15,484 --> 00:25:18,587
they don't see this white box, but you've primed the social pump

534
00:25:18,987 --> 00:25:21,049
with a personalized message that says,

535
00:25:21,530 --> 00:25:23,852
I know you are fighting pirates on the sea.

536
00:25:23,892 --> 00:25:26,814
And in your pirated game, you know, you actually get your copywriter

537
00:25:26,834 --> 00:25:30,518
to go, yaar, and do that, you know, flavor text.

538
00:25:30,998 --> 00:25:31,839
That's very cool.

539
00:25:32,319 --> 00:25:34,260
Also, if you look at AI captioning,

540
00:25:34,521 --> 00:25:36,442
I'm not suggesting using AI captioning,

541
00:25:36,502 --> 00:25:38,304
but it's a good inspiration point

542
00:25:38,744 --> 00:25:40,365
because you can see the stuff they're doing

543
00:25:40,485 --> 00:25:41,386
just from an image.

544
00:25:41,866 --> 00:25:43,107
You have the frustum,

545
00:25:43,387 --> 00:25:45,049
you know what's in the camera's view,

546
00:25:45,389 --> 00:25:47,330
you know what the player was locked on

547
00:25:47,471 --> 00:25:48,792
when the photo was taken.

548
00:25:49,152 --> 00:25:52,274
You can do a much better job of captioning that image

549
00:25:52,615 --> 00:25:54,116
and making a story from that image

550
00:25:54,396 --> 00:25:56,518
than any AI algorithm can do at the moment

551
00:25:56,758 --> 00:25:58,259
with just a basic image.

552
00:26:00,230 --> 00:26:01,510
Config in the cloud.

553
00:26:02,031 --> 00:26:06,713
So patching is really hard, but changing a config is easy.

554
00:26:07,414 --> 00:26:11,836
So you can store a JSON blob in, again, like Dropbox,

555
00:26:12,096 --> 00:26:16,379
or your own server preferably, or a platform data store that

556
00:26:16,439 --> 00:26:18,720
has some basic balance values in, right?

557
00:26:19,240 --> 00:26:21,682
So this means that if you discover an enemy is too

558
00:26:21,762 --> 00:26:24,363
overpowered or a particular level needs a tweak,

559
00:26:24,684 --> 00:26:28,626
you can just update this JSON and very quickly push that out.

560
00:26:29,126 --> 00:26:32,148
That's a very powerful tool as you rebalance on the fly.

561
00:26:32,488 --> 00:26:34,389
You can also unlock or trigger events,

562
00:26:34,449 --> 00:26:36,971
so a special Halloween event or a Christmas event,

563
00:26:37,491 --> 00:26:39,392
using this kind of config.

564
00:26:40,173 --> 00:26:42,715
A big gotcha is no execution.

565
00:26:42,856 --> 00:26:45,298
I know some people try sneak lure or something

566
00:26:45,338 --> 00:26:46,419
in these kind of systems.

567
00:26:46,880 --> 00:26:47,801
It's a bad idea.

568
00:26:48,201 --> 00:26:51,644
The reason why we're so careful with patching on platforms

569
00:26:51,785 --> 00:26:54,587
is because this kind of injection point

570
00:26:55,128 --> 00:26:57,871
can be where your game gets broken open.

571
00:26:58,331 --> 00:26:59,212
in a horrible way.

572
00:26:59,753 --> 00:27:03,077
Some other gotchas is make sure the game is playable

573
00:27:03,117 --> 00:27:05,320
with whatever local version of the config

574
00:27:05,360 --> 00:27:06,982
the player may currently have.

575
00:27:07,603 --> 00:27:10,827
Don't rebalance the entire game on the player mid-mission.

576
00:27:11,368 --> 00:27:14,151
Think about when you're going to update those configs.

577
00:27:14,652 --> 00:27:19,917
And it's worth having a versioning system and noting that in your save files and such like that.

578
00:27:19,977 --> 00:27:24,421
Because you'll get situations where players pull old saves to new machines

579
00:27:24,701 --> 00:27:28,685
or maybe a new save to a machine that isn't 100% updated

580
00:27:28,725 --> 00:27:30,587
because they've still got the save data installed,

581
00:27:31,008 --> 00:27:35,052
but they've put in the disk and they've never connected to the internet,

582
00:27:35,072 --> 00:27:36,413
so they haven't pulled that stuff down.

583
00:27:36,433 --> 00:27:39,276
So there's a whole range of stuff around there that you want to think about.

584
00:27:40,903 --> 00:27:43,005
Platform data, oh, I love platform data.

585
00:27:43,465 --> 00:27:47,809
You can do so much with a bit of binary data in a store

586
00:27:47,849 --> 00:27:50,271
that you can access, and it's 10 times better

587
00:27:50,311 --> 00:27:51,812
if you're not paying for the storage.

588
00:27:52,312 --> 00:27:55,075
It's a big bonus feature if you can take this dump,

589
00:27:55,115 --> 00:27:56,156
you dump it on a server,

590
00:27:56,736 --> 00:27:58,818
and you can get your friends' data dumps.

591
00:27:59,238 --> 00:28:01,380
The moment you've got that, you've got, again,

592
00:28:01,420 --> 00:28:03,642
the shared persistent state that I love talking about,

593
00:28:04,102 --> 00:28:05,924
and you can, first of all,

594
00:28:06,004 --> 00:28:08,086
check if you have atomic access to that.

595
00:28:08,606 --> 00:28:12,609
So some of these data store systems will provide atomic access functions.

596
00:28:12,629 --> 00:28:15,912
So for instance, if you want to get a number and increment it,

597
00:28:16,812 --> 00:28:19,094
they may have a low-level function that allows you to do it,

598
00:28:19,134 --> 00:28:20,775
that's very efficient, and it means

599
00:28:20,835 --> 00:28:22,516
that you're not stomping over each other.

600
00:28:23,197 --> 00:28:24,858
If you don't have atomic access,

601
00:28:25,198 --> 00:28:28,501
be very aware of when a player is getting data from that,

602
00:28:28,681 --> 00:28:30,002
who owns that data,

603
00:28:30,342 --> 00:28:31,663
so you don't get a situation where

604
00:28:31,723 --> 00:28:33,925
multiple people are writing on top of each other.

605
00:28:34,645 --> 00:28:39,588
So that's a good thing to look at if the particular data store you're using has some atomic access functionality.

606
00:28:40,809 --> 00:28:48,332
Now with this basic binary data, it doesn't sound super exciting, but you can build an entire trade and loot system out of this.

607
00:28:48,733 --> 00:28:52,234
You can build a basic auction house. You can build seasonal events.

608
00:28:52,675 --> 00:28:56,316
You can do your mission editor and user generated content.

609
00:28:56,797 --> 00:28:58,338
by putting stuff in there.

610
00:28:58,818 --> 00:29:00,280
And you don't even have to go as stream

611
00:29:00,320 --> 00:29:03,302
as a full level editor, even if you're,

612
00:29:04,223 --> 00:29:06,204
let's say you've got a customization system

613
00:29:06,244 --> 00:29:08,726
where your character's picking particular loot and stuff.

614
00:29:09,106 --> 00:29:11,728
You can just upload the person's gear,

615
00:29:11,788 --> 00:29:13,650
their current loadout to that,

616
00:29:13,830 --> 00:29:16,612
and then you've mimicked the blizzard armory system

617
00:29:16,932 --> 00:29:19,294
in your little game using platform data.

618
00:29:20,175 --> 00:29:21,756
And all of this won't cost you a cent.

619
00:29:21,956 --> 00:29:23,216
So it's super, super powerful.

620
00:29:23,577 --> 00:29:26,138
Player signs and Dark Souls messages

621
00:29:26,198 --> 00:29:28,379
is another obvious one that's not hard to do.

622
00:29:29,520 --> 00:29:32,641
And I think that also adds a lot of vitality to a lot of games.

623
00:29:33,262 --> 00:29:35,743
I know it's a commonly used function now,

624
00:29:35,803 --> 00:29:37,144
but I think it's still a powerful one.

625
00:29:38,985 --> 00:29:39,745
Online saves.

626
00:29:40,219 --> 00:29:45,402
So online saves, our basic promise here is never lose progress.

627
00:29:45,502 --> 00:29:47,363
That's the key headline here.

628
00:29:47,383 --> 00:29:51,626
So the first thing you want to do is some basic sanity checking on your saves.

629
00:29:52,246 --> 00:29:55,188
Be assured that you always have multiple saves in your game.

630
00:29:55,589 --> 00:30:00,335
Whenever you're pulling down a save, you've verified that you've got one or two save files

631
00:30:00,376 --> 00:30:02,959
that are good, so you're not overwriting anything.

632
00:30:03,420 --> 00:30:06,164
Don't have a monolithic save state, right?

633
00:30:06,625 --> 00:30:10,250
When you're doing online saves and when you're syncing this kind of stuff,

634
00:30:10,650 --> 00:30:13,794
it's very good to think of it in a version control mindset, right?

635
00:30:14,254 --> 00:30:16,977
So first of all, if you can break this monolith up to, for instance,

636
00:30:17,838 --> 00:30:19,880
if you're tracking how many monsters they kill,

637
00:30:20,301 --> 00:30:22,863
break out the monster killing bits

638
00:30:23,344 --> 00:30:25,386
to the story progression bits, right?

639
00:30:25,746 --> 00:30:27,729
Because if you're doing a story-based game

640
00:30:27,749 --> 00:30:30,511
and I'm on chapter five on one machine and chapter four on another,

641
00:30:31,032 --> 00:30:32,833
yeah, clearly I want chapter five,

642
00:30:33,314 --> 00:30:35,936
but maybe I was killing just a lot more monsters here.

643
00:30:36,536 --> 00:30:38,337
Now, this is down to a design decision

644
00:30:38,377 --> 00:30:41,200
and you need to decide for your game what's the right,

645
00:30:41,240 --> 00:30:42,641
whether you just let them take

646
00:30:43,121 --> 00:30:44,922
whichever monster kills the highest,

647
00:30:44,983 --> 00:30:46,724
whether you just add both in.

648
00:30:47,224 --> 00:30:49,066
You've got to figure that out for your particular game,

649
00:30:49,086 --> 00:30:51,568
but you need to make these intelligent decisions

650
00:30:51,988 --> 00:30:53,349
about how you merge data.

651
00:30:53,869 --> 00:30:56,510
And if your save data has a delta,

652
00:30:56,850 --> 00:30:59,512
like you know what's changed between each save state,

653
00:30:59,912 --> 00:31:02,773
it makes this kind of merging behavior much easier.

654
00:31:03,693 --> 00:31:07,275
Obviously, as you have more backup systems for online saves

655
00:31:07,315 --> 00:31:09,396
and as you open this up more,

656
00:31:09,536 --> 00:31:12,837
it is a bigger exploit potential for cheating.

657
00:31:12,857 --> 00:31:15,038
So that is worth thinking about.

658
00:31:16,139 --> 00:31:19,440
And as a fallback, whenever online save data goes wrong,

659
00:31:20,000 --> 00:31:21,481
always ask the player.

660
00:31:22,041 --> 00:31:23,041
Make it their decision.

661
00:31:25,407 --> 00:31:28,771
Okay, so getting together is one of the hardest topics

662
00:31:28,931 --> 00:31:31,134
because as you're a smaller developer

663
00:31:31,995 --> 00:31:33,237
or if you've got a smaller community,

664
00:31:33,317 --> 00:31:37,282
hell, even AAA titles worry about getting enough

665
00:31:37,322 --> 00:31:39,064
of their community together to play.

666
00:31:39,845 --> 00:31:42,267
So the first thing is we all love your game,

667
00:31:42,327 --> 00:31:45,410
we all play your game, that's what brings us together.

668
00:31:45,950 --> 00:31:48,512
So your community features need to be in your game.

669
00:31:48,973 --> 00:31:51,034
So think about the journey from stranger

670
00:31:51,074 --> 00:31:54,457
to acquaintance to friend, and how you can enable that.

671
00:31:55,218 --> 00:31:57,720
The first step is to think about when are we going to play.

672
00:31:57,780 --> 00:32:00,502
If you can have functionality in your game

673
00:32:00,842 --> 00:32:02,664
that helps other players decide

674
00:32:02,784 --> 00:32:04,165
when they want to play a game,

675
00:32:04,625 --> 00:32:06,887
that's extremely useful if you can highlight that.

676
00:32:07,287 --> 00:32:10,550
Another hack I quite like is IRC chat.

677
00:32:10,970 --> 00:32:13,112
So Frozen Synapse did this quite well,

678
00:32:13,132 --> 00:32:14,473
and I've seen a few other games do it,

679
00:32:14,793 --> 00:32:17,035
where they've basically just put some IRC client

680
00:32:17,095 --> 00:32:19,256
code into their game, and they connect up

681
00:32:19,337 --> 00:32:21,899
to a chat room on AfterNet or Freenode,

682
00:32:22,259 --> 00:32:24,681
check the policies of whatever IRC server you're using.

683
00:32:25,882 --> 00:32:28,123
And then you have a community chat in game.

684
00:32:28,423 --> 00:32:30,405
So even when people are playing the single player,

685
00:32:30,445 --> 00:32:33,067
maybe they're playing the multiplayer and they're still

686
00:32:33,087 --> 00:32:35,829
in the middle of a match, but you're matchmaking or whatever.

687
00:32:36,449 --> 00:32:40,032
It's a basic route for people to see the rest of the community

688
00:32:40,352 --> 00:32:41,293
and to sort of hook in.

689
00:32:41,633 --> 00:32:43,635
And maybe someone is struggling with the game

690
00:32:43,655 --> 00:32:44,675
and they can just go in.

691
00:32:45,116 --> 00:32:49,459
And yes, the chances are that there's going to be some toxic

692
00:32:49,519 --> 00:32:52,641
chat in there or it's going to totally derail and stuff.

693
00:32:53,422 --> 00:32:54,162
But that's.

694
00:32:55,243 --> 00:32:59,447
not your problem, you can do community management and stuff like that.

695
00:32:59,727 --> 00:33:05,772
On the purely technical side, getting IRC in is a cool function to explore.

696
00:33:06,933 --> 00:33:09,034
And that brings me to my next topic, social APIs.

697
00:33:09,074 --> 00:33:11,656
A lot of the stuff I'm not mentioning here is the smaller stuff.

698
00:33:12,017 --> 00:33:16,420
It varies platform to platform, whether you're on Google Games,

699
00:33:16,460 --> 00:33:18,782
whether you're on Steam, whether you're on PlayStation.

700
00:33:19,182 --> 00:33:23,023
There's little features, social APIs that every platform has.

701
00:33:23,384 --> 00:33:27,185
It's really worth reading those and putting them in the game.

702
00:33:27,645 --> 00:33:29,766
Even if your game doesn't end up using them,

703
00:33:30,126 --> 00:33:31,846
doing the technical implementation

704
00:33:31,886 --> 00:33:34,327
for these features tends not to be very hard.

705
00:33:34,787 --> 00:33:37,548
It gives the designers something to work with,

706
00:33:37,588 --> 00:33:38,309
something to put in.

707
00:33:38,389 --> 00:33:38,449
And

708
00:33:40,069 --> 00:33:43,991
Platform holders love it when you use their social API stuff

709
00:33:44,071 --> 00:33:46,673
and they will potentially give you a bit more of a leg up.

710
00:33:47,073 --> 00:33:50,095
And the other cool thing is a lot of these features

711
00:33:50,155 --> 00:33:51,356
are often overlooked.

712
00:33:51,736 --> 00:33:54,097
So when someone goes into some section

713
00:33:54,257 --> 00:33:56,699
of a social functionality on a platform that's

714
00:33:57,199 --> 00:34:01,284
not widely served, they're much more likely to see your game.

715
00:34:01,884 --> 00:34:03,046
So that's a big feature.

716
00:34:03,546 --> 00:34:05,428
Events and calendars, again, that's

717
00:34:05,448 --> 00:34:08,271
becoming a more common API we're seeing on platforms.

718
00:34:08,612 --> 00:34:11,274
And that's a big helper for your community

719
00:34:11,355 --> 00:34:13,517
to get together and to gather.

720
00:34:15,241 --> 00:34:17,703
So social matchmaking, matchmaking's a hard topic,

721
00:34:17,763 --> 00:34:18,884
it's a really tough topic.

722
00:34:19,224 --> 00:34:21,786
There is a way to think about matchmaking

723
00:34:21,806 --> 00:34:23,027
that's much more open,

724
00:34:23,488 --> 00:34:25,829
and that's around social matchmaking.

725
00:34:26,230 --> 00:34:28,872
So this is how do you make that journey

726
00:34:28,932 --> 00:34:31,154
from acquaintance to friend, right?

727
00:34:31,174 --> 00:34:32,635
So stranger, acquaintance, friend.

728
00:34:33,516 --> 00:34:37,020
Whenever I have a match, whenever I compete against you,

729
00:34:37,721 --> 00:34:39,163
it is a story, right?

730
00:34:39,503 --> 00:34:41,606
The first time, it's not much of a story,

731
00:34:41,646 --> 00:34:43,088
the first time the story is simply,

732
00:34:43,688 --> 00:34:46,232
oh, I beat you, you were really heavy on the rockets,

733
00:34:46,372 --> 00:34:48,074
I had really good aim, right?

734
00:34:48,935 --> 00:34:52,278
Not much of a story, but the next time we match up,

735
00:34:53,079 --> 00:34:55,060
you can say, hey, do you know you played this person

736
00:34:55,100 --> 00:34:55,621
on Friday?

737
00:34:56,001 --> 00:34:59,184
Oh, yeah, you beat them, but they were really favored rockets

738
00:34:59,264 --> 00:35:00,485
or their aim was really good.

739
00:35:00,766 --> 00:35:02,587
And you can start telling the story.

740
00:35:02,607 --> 00:35:03,968
You can start building on that.

741
00:35:04,269 --> 00:35:06,471
And as you save this relationship up,

742
00:35:06,851 --> 00:35:09,672
There's more data there to do storytelling.

743
00:35:10,032 --> 00:35:11,333
And if you're the kind of programmer

744
00:35:11,373 --> 00:35:14,914
who's into narrative and procedural storytelling stuff,

745
00:35:14,934 --> 00:35:16,995
there's some very cool stuff you can do there.

746
00:35:17,435 --> 00:35:19,175
You don't have to save this on a server.

747
00:35:19,195 --> 00:35:20,716
You can save this locally.

748
00:35:21,136 --> 00:35:22,577
Obviously, if you're saving it on a server,

749
00:35:22,597 --> 00:35:25,057
there's more functionality you can do with it.

750
00:35:25,538 --> 00:35:27,979
But even saving locally, it's very powerful.

751
00:35:28,339 --> 00:35:31,540
And graphs are really your friend here as a data

752
00:35:31,580 --> 00:35:32,040
structure.

753
00:35:33,300 --> 00:35:36,161
Don't go mad with some crazy graph in API.

754
00:35:36,622 --> 00:35:39,982
Graph data structure is literally node edge node, right?

755
00:35:40,102 --> 00:35:41,403
It's the simplest thing.

756
00:35:41,943 --> 00:35:46,864
And you can make graph operations really efficient

757
00:35:47,344 --> 00:35:49,985
when you think about it in a memory sensitive way.

758
00:35:50,045 --> 00:35:51,745
Again, that's a whole nother talk,

759
00:35:52,145 --> 00:35:55,246
but graph operations are really cool.

760
00:35:55,706 --> 00:35:59,467
And if you're interested in how you can do nifty stuff

761
00:35:59,507 --> 00:36:01,847
with your matchmaking and build these shared stories.

762
00:36:02,147 --> 00:36:04,728
So the next time I play against a stranger,

763
00:36:04,948 --> 00:36:07,349
they're not a stranger, they're an acquaintance.

764
00:36:07,629 --> 00:36:09,670
And maybe then we have like three games

765
00:36:09,770 --> 00:36:12,891
over the period of a week, and we maybe start chatting,

766
00:36:12,971 --> 00:36:15,472
or we maybe start, you know, interacting more.

767
00:36:16,012 --> 00:36:18,393
And if a friendship is built around your game,

768
00:36:19,093 --> 00:36:21,817
That's very powerful and friends remember that.

769
00:36:21,877 --> 00:36:24,541
They remember how they meet and they often go back to the game

770
00:36:24,561 --> 00:36:26,924
and that's how you build real fans.

771
00:36:27,685 --> 00:36:30,069
That is a very powerful networking feature.

772
00:36:31,030 --> 00:36:32,573
Also, spectating matches.

773
00:36:34,295 --> 00:36:38,298
If someone I know is playing your game and I can watch in on that,

774
00:36:38,999 --> 00:36:42,182
that's again another way to sort of bring that stuff together,

775
00:36:42,262 --> 00:36:44,724
especially if you're doing this with acquaintances,

776
00:36:45,164 --> 00:36:47,446
because it's a way to just sort of see, oh yeah,

777
00:36:47,466 --> 00:36:50,028
that person that beat me two games ago is playing

778
00:36:50,068 --> 00:36:51,690
up against someone else I've played against

779
00:36:51,750 --> 00:36:52,691
or playing against a friend.

780
00:36:53,463 --> 00:36:54,384
Very, very useful.

781
00:36:55,085 --> 00:36:55,545
Invites.

782
00:36:56,006 --> 00:36:59,429
Okay, so invites could be as simple as a phone text message

783
00:36:59,469 --> 00:37:01,471
to someone saying, yo, you want to play this game?

784
00:37:02,192 --> 00:37:06,076
But it can be a handcrafted message,

785
00:37:06,536 --> 00:37:09,239
and that's the really fun and interesting bit.

786
00:37:09,920 --> 00:37:12,482
So the invite is the thing that lures someone into your game.

787
00:37:12,863 --> 00:37:13,924
Most platforms support

788
00:37:16,186 --> 00:37:21,952
Attaching an image and some text right and again. This is a basic rest API

789
00:37:22,532 --> 00:37:28,478
So you can actually do some really cool stuff rather than sending generic test and check text and generic image

790
00:37:28,878 --> 00:37:35,584
You can actually select a specific image for your invite and you can generate specific text

791
00:37:36,706 --> 00:37:39,708
And if you want to do some cool stuff with the programmatic images,

792
00:37:40,189 --> 00:37:41,951
this is a really cool opportunity.

793
00:37:42,491 --> 00:37:45,154
Now the first thing I want you to do with your invites,

794
00:37:45,314 --> 00:37:46,375
after you've thought about that,

795
00:37:46,695 --> 00:37:49,138
before you even touch the networking libraries,

796
00:37:49,598 --> 00:37:53,422
is I want you to make your game boot up using command line arguments

797
00:37:53,582 --> 00:37:55,143
and go straight to a level.

798
00:37:55,724 --> 00:37:58,507
Go straight to a particular match-up case.

799
00:37:58,907 --> 00:38:00,068
Skip all the menu guff.

800
00:38:00,569 --> 00:38:03,831
Now, once you have the command line functionality in place,

801
00:38:04,512 --> 00:38:08,275
it's much easier to integrate the invite system

802
00:38:08,355 --> 00:38:10,336
of whatever particular platform you're working on.

803
00:38:10,777 --> 00:38:12,618
And so when someone loads up this invite,

804
00:38:12,958 --> 00:38:14,460
they go straight to the game.

805
00:38:14,500 --> 00:38:16,121
They skip loading the menus.

806
00:38:16,441 --> 00:38:18,082
They skip a whole bunch of guff.

807
00:38:18,803 --> 00:38:20,384
And that can really speed it up.

808
00:38:20,684 --> 00:38:23,867
Because every time you do anything with matchmaking,

809
00:38:24,187 --> 00:38:29,129
We care about if matchmaking is 10 seconds or 15 seconds or 30 seconds or a minute.

810
00:38:29,789 --> 00:38:30,969
We really care about that.

811
00:38:31,250 --> 00:38:32,850
But we don't often talk about,

812
00:38:33,470 --> 00:38:35,651
oh, matchmaking was only one minute for me,

813
00:38:35,711 --> 00:38:38,512
but then I had a five-minute load screen.

814
00:38:39,292 --> 00:38:40,613
There is a whole path.

815
00:38:41,093 --> 00:38:43,374
there, a whole journey that you need to go through.

816
00:38:43,794 --> 00:38:46,295
And it's not something that's easy to retrofit.

817
00:38:47,076 --> 00:38:50,857
So it's really up to you to handle that as early as you can.

818
00:38:51,298 --> 00:38:53,018
And really, death to the Dell Lobby.

819
00:38:53,058 --> 00:38:56,500
There's so much more interesting things you can do with the lobby.

820
00:38:56,520 --> 00:38:58,361
And if you can skip the lobby altogether,

821
00:38:58,721 --> 00:39:01,342
you're in a much better situation for your networking flow.

822
00:39:03,084 --> 00:39:04,164
Okay, matchmaking.

823
00:39:04,725 --> 00:39:06,065
Concurrency is king.

824
00:39:06,745 --> 00:39:08,506
Everyone worries about concurrency,

825
00:39:08,546 --> 00:39:10,847
from small titles to very large titles.

826
00:39:12,067 --> 00:39:14,948
Concurrency is one of your key cost factors

827
00:39:14,988 --> 00:39:16,228
that you can use to determine,

828
00:39:16,909 --> 00:39:18,949
but it's also one of your key success metrics

829
00:39:19,069 --> 00:39:20,070
with networking.

830
00:39:20,490 --> 00:39:23,011
And it's the thing that smaller titles really struggle

831
00:39:23,051 --> 00:39:25,311
to get that critical mass for matchmaking.

832
00:39:26,752 --> 00:39:31,856
So your peak concurrency is probably going to be just off after launch, but be very aware

833
00:39:32,236 --> 00:39:37,580
that your game may be much more active on the weekends, you may have Tuesday as your most

834
00:39:37,780 --> 00:39:43,004
active game. Think about what regions are active and how you can action that and improve that for

835
00:39:43,024 --> 00:39:48,228
your community. Give the community actionable information, right? If you say to people,

836
00:39:48,248 --> 00:39:48,628
find out.

837
00:39:49,289 --> 00:39:50,411
5,000 people are playing the game.

838
00:39:50,732 --> 00:39:52,235
Great, I feel awesome.

839
00:39:52,415 --> 00:39:54,539
Well, that information's kind of useless to me.

840
00:39:54,980 --> 00:39:56,423
But then you tell those same people,

841
00:39:56,964 --> 00:39:58,106
six people are playing the game.

842
00:39:58,748 --> 00:39:58,948
Well.

843
00:39:59,889 --> 00:40:00,509
I'm bummed out.

844
00:40:00,969 --> 00:40:02,651
What are the chances of me finding a good match?

845
00:40:03,151 --> 00:40:05,293
That's not actionable information.

846
00:40:05,673 --> 00:40:07,734
What's much more useful is to tell your players,

847
00:40:08,135 --> 00:40:11,717
hey, did you know Tuesday 7 p.m. is our most active time?

848
00:40:12,258 --> 00:40:14,800
Or, hey, do you know your friends currently playing

849
00:40:14,860 --> 00:40:17,422
single player, you know, like bring them in?

850
00:40:17,922 --> 00:40:21,124
Or, hey, this match with someone that you know

851
00:40:21,284 --> 00:40:23,606
is ending soon, like here's the score, right?

852
00:40:23,646 --> 00:40:26,108
Maybe go spectate it until the end.

853
00:40:26,848 --> 00:40:30,189
There's loads of cool, actionable information you can give the player.

854
00:40:30,909 --> 00:40:32,069
Drop-in is queen.

855
00:40:33,570 --> 00:40:35,810
If concurrency is king, drop-in is queen.

856
00:40:36,970 --> 00:40:41,051
The factor with drop-in is based on your session length

857
00:40:41,711 --> 00:40:43,531
and based on your concurrency numbers,

858
00:40:43,931 --> 00:40:47,252
drop-in becomes either not a really critical feature

859
00:40:47,392 --> 00:40:49,752
or an absolute must-have.

860
00:40:50,413 --> 00:40:52,173
If you've got low concurrency numbers

861
00:40:52,513 --> 00:40:55,573
and your session time for a game is, say, 10 minutes,

862
00:40:57,082 --> 00:40:59,164
What'll happen is people will get matched up,

863
00:40:59,624 --> 00:41:00,886
they'll go into that game,

864
00:41:01,606 --> 00:41:04,949
and if your matchmaking cues are slightly longer,

865
00:41:04,969 --> 00:41:08,552
they're much more likely to jump straight back

866
00:41:08,612 --> 00:41:10,854
into that game, straight back into the cue,

867
00:41:11,174 --> 00:41:12,716
and get matched up very quickly.

868
00:41:13,016 --> 00:41:15,058
And so you'll have these bursts of activities,

869
00:41:15,318 --> 00:41:16,879
and you'll have this cascade effect,

870
00:41:17,220 --> 00:41:19,241
which means sometimes your matchmaking

871
00:41:19,281 --> 00:41:21,623
can be 80% of your session time.

872
00:41:22,464 --> 00:41:26,108
So you can get some really bad behavior if you've got a longer session time,

873
00:41:26,429 --> 00:41:29,792
especially if you've got a strategic game where session time is say 30 minutes.

874
00:41:30,113 --> 00:41:32,235
You can get into really black hole with that.

875
00:41:33,176 --> 00:41:34,998
So drop-in becomes extremely useful.

876
00:41:35,319 --> 00:41:42,046
The other big gotcha is unless you are supremely confident about your concurrency numbers,

877
00:41:42,587 --> 00:41:43,107
one bucket.

878
00:41:43,748 --> 00:41:46,231
Just have a quick play bucket, shove everyone in it.

879
00:41:46,892 --> 00:41:48,774
If they want to do custom games or whatever,

880
00:41:49,155 --> 00:41:51,497
let them use the invite functionality for that.

881
00:41:51,758 --> 00:41:55,422
Put in other social tools for them to do those custom games.

882
00:41:56,143 --> 00:41:59,808
Every time you add another cue or another bucket

883
00:41:59,868 --> 00:42:01,049
for your matchmaking to go in,

884
00:42:01,490 --> 00:42:04,651
you drastically increase the matchmaking time.

885
00:42:05,131 --> 00:42:07,852
And it could be that you actually have a fairly active community,

886
00:42:08,332 --> 00:42:10,192
but they're going into different queues.

887
00:42:10,512 --> 00:42:13,413
And the other problem is you may have a game mode

888
00:42:13,713 --> 00:42:16,714
that players don't enjoy as much as other modes,

889
00:42:17,034 --> 00:42:19,435
but because the matchmaking times are faster,

890
00:42:19,795 --> 00:42:21,175
they go into those modes.

891
00:42:21,556 --> 00:42:22,816
And then your premier mode,

892
00:42:22,856 --> 00:42:24,616
or the mode that you think is the most fun,

893
00:42:25,097 --> 00:42:28,037
actually suffers because people are going into 1v1, say.

894
00:42:30,070 --> 00:42:32,611
So that's a big functionality there.

895
00:42:34,392 --> 00:42:36,453
Okay, so jumping straight onto servers,

896
00:42:36,994 --> 00:42:38,274
Pixel again, very shocked

897
00:42:38,334 --> 00:42:40,055
because servers are quite shocking.

898
00:42:41,096 --> 00:42:43,657
I fucking love my cats, I'm sorry.

899
00:42:45,178 --> 00:42:46,099
So peer-to-peer.

900
00:42:46,699 --> 00:42:50,161
Peer-to-peer is extremely complicated, okay?

901
00:42:50,581 --> 00:42:52,182
But it is the default option.

902
00:42:52,222 --> 00:42:53,923
And the reason it's the default option

903
00:42:53,983 --> 00:42:55,604
is because it keeps things cheap.

904
00:42:56,404 --> 00:43:00,729
Peer-to-peer is going to always produce a sub-optimal topology, right?

905
00:43:00,829 --> 00:43:07,456
Unless you're a one-to-one, there's going to be a situation where things are not the best, okay?

906
00:43:08,056 --> 00:43:14,303
But the existing frameworks for peer-to-peer multiplayer are very powerful and well-written.

907
00:43:15,464 --> 00:43:21,309
Nat Punchthrough basically relies on a third party server somewhere doing that for you.

908
00:43:21,730 --> 00:43:25,773
So if you're using, for instance, platform matchmaking, they've got a server doing that,

909
00:43:27,054 --> 00:43:31,999
but chances are you have to rely on like a Steam server or PlayStation server or Microsoft

910
00:43:32,019 --> 00:43:36,683
server or a Unity offer an option for it as well to actually do that for you.

911
00:43:37,083 --> 00:43:38,404
So that's something you have to consider.

912
00:43:39,544 --> 00:43:42,867
And the other thing is, going back to that sending less data,

913
00:43:42,948 --> 00:43:45,290
it's very important in a peer-to-peer situation

914
00:43:45,770 --> 00:43:49,414
where if you've got eight people playing a game together,

915
00:43:50,275 --> 00:43:52,637
don't send all data to all peers.

916
00:43:53,678 --> 00:43:55,961
Throw away data as much as possible, right?

917
00:43:56,021 --> 00:43:59,284
Because if you have to propagate data to all peers,

918
00:43:59,324 --> 00:44:01,967
you can get into some pretty horrible situations.

919
00:44:02,347 --> 00:44:03,668
Now the cost of this.

920
00:44:04,149 --> 00:44:06,829
is if you've got partial game state shared

921
00:44:06,889 --> 00:44:07,870
between all your peers,

922
00:44:08,430 --> 00:44:10,931
and you get into a situation of host migration,

923
00:44:10,991 --> 00:44:13,652
or you get into a situation where people

924
00:44:13,692 --> 00:44:18,233
who hold key parts of your game state drop off your mesh,

925
00:44:18,694 --> 00:44:20,414
you can end up in a situation where you're like,

926
00:44:20,614 --> 00:44:21,935
how do I recreate the state?

927
00:44:22,395 --> 00:44:23,795
Again, a bit more of an advanced topic,

928
00:44:23,955 --> 00:44:26,396
but it's worth knowing that that's a black hole

929
00:44:26,436 --> 00:44:27,156
you can fall down.

930
00:44:28,850 --> 00:44:31,311
It sounds like I'm really dissing peer-to-peer.

931
00:44:31,491 --> 00:44:31,931
I'm not.

932
00:44:32,131 --> 00:44:34,173
I'm advising you, it's technically complex,

933
00:44:34,293 --> 00:44:35,833
it comes with a lot of compromise,

934
00:44:36,174 --> 00:44:39,415
but for most titles it is the correct solution

935
00:44:39,836 --> 00:44:44,278
because it's cheap and it's very easy to end up

936
00:44:44,318 --> 00:44:47,239
in a situation where you might as well put two dollars

937
00:44:47,760 --> 00:44:50,581
in an envelope and send it to every player playing your game.

938
00:44:52,002 --> 00:44:53,783
So it's to be avoided.

939
00:44:55,184 --> 00:44:56,184
Sorry, it's to be used.

940
00:44:56,724 --> 00:44:57,625
So Tiny Sewer.

941
00:44:58,546 --> 00:45:05,496
The first thing about servers is I would say a very small server can be very powerful.

942
00:45:05,856 --> 00:45:12,266
You can write a simple C++ or Node.js or Golang server that does some basic REST API functionality.

943
00:45:13,627 --> 00:45:17,991
This can do all the kind of stuff I've been talking about with platform services,

944
00:45:18,312 --> 00:45:20,834
but even more, right? It can be really powerful.

945
00:45:20,874 --> 00:45:25,718
A Raspberry Pi scale server for most smaller indie games

946
00:45:26,159 --> 00:45:30,983
can serve most of its needs for basic, low...

947
00:45:32,984 --> 00:45:34,365
low cadence networking.

948
00:45:35,286 --> 00:45:36,427
That's very powerful.

949
00:45:36,867 --> 00:45:39,489
And you can later move that small server

950
00:45:39,529 --> 00:45:40,609
to the cloud and such,

951
00:45:40,950 --> 00:45:43,451
but it's a much lower commitment.

952
00:45:43,852 --> 00:45:46,033
The other thing to think about with this kind of server

953
00:45:46,613 --> 00:45:49,956
is that if it's providing additional functionality,

954
00:45:49,996 --> 00:45:51,477
sort of premier functionality,

955
00:45:52,177 --> 00:45:54,999
If it's down, can people still play your game?

956
00:45:55,019 --> 00:45:57,721
Because if the server goes down and all that suffers

957
00:45:57,801 --> 00:45:59,482
is some social features in your game,

958
00:45:59,722 --> 00:46:01,803
but people can still play the core experience,

959
00:46:02,163 --> 00:46:03,484
you're in a very good shape.

960
00:46:04,245 --> 00:46:06,686
However, if the server goes down

961
00:46:06,866 --> 00:46:09,208
and it hinders gameplay in a significant way,

962
00:46:09,628 --> 00:46:12,030
you're basically in a DevOps situation.

963
00:46:12,510 --> 00:46:13,671
So that's worth thinking about.

964
00:46:14,311 --> 00:46:16,792
The other thing is, when you write a small server like this,

965
00:46:17,193 --> 00:46:20,375
you should be writing tests and restart scripts and stuff.

966
00:46:20,875 --> 00:46:24,637
Even if it seems a bit overkill for your small application,

967
00:46:25,037 --> 00:46:25,818
it's really useful.

968
00:46:25,918 --> 00:46:29,560
I have an app on my phone which pings my home servers

969
00:46:29,620 --> 00:46:33,062
and stuff, just a few small ones and some actual proper servers

970
00:46:33,102 --> 00:46:33,362
as well.

971
00:46:33,402 --> 00:46:35,383
And so when a server goes down, my phone just buzzes.

972
00:46:35,784 --> 00:46:38,946
And if the server doesn't come up in a bit, I call home

973
00:46:38,966 --> 00:46:40,186
and I'm like, what's happened?

974
00:46:40,687 --> 00:46:42,247
The cats have chewed the network cable again.

975
00:46:42,388 --> 00:46:42,568
Right.

976
00:46:43,368 --> 00:46:47,751
replace that. So it's good idea to have these tests and restarts. You'd be amazed

977
00:46:47,851 --> 00:46:52,494
at how many times to fix a problem on a server we just restart it and we just

978
00:46:52,514 --> 00:46:55,416
restart it because putting in the engineering time to fix it is

979
00:46:56,212 --> 00:46:56,612
Expensive.

980
00:46:57,352 --> 00:46:57,912
Infrastructure.

981
00:46:58,313 --> 00:47:00,153
So now to go from that small server,

982
00:47:00,474 --> 00:47:02,895
to go to a situation where you are spinning up

983
00:47:03,015 --> 00:47:06,977
game instances on demand, running game logic

984
00:47:07,477 --> 00:47:09,898
on the server side, is really shifting

985
00:47:10,298 --> 00:47:12,659
from a battery to a power grid.

986
00:47:12,899 --> 00:47:15,661
You're now in the infrastructure business, right?

987
00:47:16,041 --> 00:47:19,903
And running game state server side is expensive as hell.

988
00:47:20,343 --> 00:47:22,224
I know it sounds really appealing to say,

989
00:47:22,244 --> 00:47:23,884
oh, I'm just gonna run Unity on my server.

990
00:47:24,665 --> 00:47:26,446
or I'm going to run Unreal on my server,

991
00:47:26,866 --> 00:47:29,448
you can run up some big server bills that way.

992
00:47:30,088 --> 00:47:32,830
It may be the right option for your game,

993
00:47:33,850 --> 00:47:36,472
but be aware it will cost you a lot of money.

994
00:47:36,992 --> 00:47:39,153
And the moment you go into that situation,

995
00:47:39,213 --> 00:47:41,595
you can't use platform networking typically.

996
00:47:41,915 --> 00:47:44,416
You have to have a standalone matchmaking solution.

997
00:47:45,626 --> 00:47:47,928
You have to manage spinning up your own instances.

998
00:47:48,388 --> 00:47:50,691
Your bills can spike horribly.

999
00:47:52,092 --> 00:47:55,115
And your DevOps becomes a lot more complex.

1000
00:47:56,656 --> 00:48:00,580
But there is a bit of a trap door getaway if you're PC dev.

1001
00:48:00,720 --> 00:48:04,383
If you're PC dev, player servers are kind of awesome

1002
00:48:04,843 --> 00:48:07,526
because you just provide a server executable

1003
00:48:08,026 --> 00:48:09,708
and you say to your players, hey,

1004
00:48:09,728 --> 00:48:11,269
do you mind running my server for me?

1005
00:48:12,030 --> 00:48:14,472
And you'd be amazed at how good players are doing that.

1006
00:48:14,832 --> 00:48:17,755
The big caveat is you've now lost control of your servers.

1007
00:48:18,175 --> 00:48:19,776
Piracy is much more likely.

1008
00:48:21,458 --> 00:48:23,520
And you may have a whole secondary market.

1009
00:48:23,820 --> 00:48:26,582
The thing is, if you've got an indie game and it's competitive,

1010
00:48:27,653 --> 00:48:30,196
no one's going to run better servers than your community.

1011
00:48:30,216 --> 00:48:32,058
They're going to spend out the wazoo

1012
00:48:32,439 --> 00:48:34,221
to make sure they get no latency.

1013
00:48:34,842 --> 00:48:37,285
So PC servers and player-run servers

1014
00:48:37,465 --> 00:48:40,228
are actually a good sort of trapdoor exit

1015
00:48:40,288 --> 00:48:42,491
if you really care about performance

1016
00:48:43,392 --> 00:48:45,415
and you're willing to make those sacrifices.

1017
00:48:46,295 --> 00:48:51,337
The other thing I want to mention is local for development, which is you need to run

1018
00:48:51,457 --> 00:48:56,458
your infrastructure locally, especially as you get to a more complicated structure, something

1019
00:48:56,798 --> 00:49:02,000
that runs over multiple instances and stuff and uses a bunch of different servers and

1020
00:49:02,380 --> 00:49:05,021
technologies, and you need to document.

1021
00:49:05,582 --> 00:49:07,542
what that setting up your local system is.

1022
00:49:07,582 --> 00:49:09,703
You know, how do you run Cassandra locally?

1023
00:49:09,743 --> 00:49:11,584
You know, what is your particular LAMP stack?

1024
00:49:11,884 --> 00:49:14,605
There's probably like 20 different pieces of technology

1025
00:49:14,625 --> 00:49:15,865
you've installed locally.

1026
00:49:16,326 --> 00:49:17,506
And you need to know what that is,

1027
00:49:17,526 --> 00:49:19,427
because you're going to onboard another programmer at some

1028
00:49:19,447 --> 00:49:21,247
point, or your machine is going to break,

1029
00:49:21,308 --> 00:49:23,008
and you're going to need to move to a new machine.

1030
00:49:23,308 --> 00:49:24,469
And that's usually going to happen

1031
00:49:24,509 --> 00:49:25,749
when you're having server trouble,

1032
00:49:26,529 --> 00:49:28,690
and you don't want to be in that situation.

1033
00:49:29,475 --> 00:49:31,536
The other thing I'll mention, and I can do a whole nother

1034
00:49:31,576 --> 00:49:33,357
talk, in fact, I have done a whole nother talk on this,

1035
00:49:33,737 --> 00:49:36,359
configuration outperforms single threaded.

1036
00:49:38,461 --> 00:49:43,464
So in the modern infrastructure of networking,

1037
00:49:43,524 --> 00:49:46,846
we have a tendency to go wide, to have a lot of server

1038
00:49:46,886 --> 00:49:49,828
redundancy, and to use a lot of complex middleware.

1039
00:49:50,608 --> 00:49:53,871
And often, this is the correct solution, but.

1040
00:49:54,571 --> 00:49:57,553
many times a single threaded C++ server

1041
00:49:57,873 --> 00:50:02,697
can drastically outperform these broader implementations.

1042
00:50:03,517 --> 00:50:05,278
If you Google that, you'll find a bunch

1043
00:50:05,298 --> 00:50:07,320
of interesting talks around it.

1044
00:50:08,480 --> 00:50:11,422
But for one example, there was a graph.

1045
00:50:12,243 --> 00:50:15,865
a processing situation where someone found an old laptop

1046
00:50:16,265 --> 00:50:19,466
would run at orders of magnitude faster

1047
00:50:19,927 --> 00:50:25,529
than a full-scale, like, multi-instance AWS deployment

1048
00:50:25,890 --> 00:50:29,111
with the top-tier professional graph processing software,

1049
00:50:29,451 --> 00:50:31,392
and this was something a guy had written in C++

1050
00:50:31,672 --> 00:50:32,453
in, like, a weekend,

1051
00:50:33,113 --> 00:50:34,934
because there's overhead in communication.

1052
00:50:36,074 --> 00:50:38,536
So that's an important topic to look at as well.

1053
00:50:39,556 --> 00:50:40,857
One of my favorite stories to tell

1054
00:50:40,937 --> 00:50:43,959
is there's actually a AAA title inside Sony

1055
00:50:44,039 --> 00:50:47,600
that deploys pretty much one server and then

1056
00:50:47,701 --> 00:50:50,062
one server for redundancy for a pretty major title.

1057
00:50:50,442 --> 00:50:54,044
And that's because of that cost of single threaded

1058
00:50:54,904 --> 00:50:56,625
configuration that outperforms single threaded.

1059
00:50:56,885 --> 00:50:57,086
OK.

1060
00:50:57,406 --> 00:50:57,886
So cheaters.

1061
00:50:58,086 --> 00:50:59,647
You're going to have cheaters in your game.

1062
00:51:00,912 --> 00:51:02,173
It's a given.

1063
00:51:02,794 --> 00:51:04,416
State verification is really good

1064
00:51:04,456 --> 00:51:05,898
if you can do some basic checking

1065
00:51:05,918 --> 00:51:08,061
to see if the state they've gotten to is valid.

1066
00:51:08,742 --> 00:51:11,004
Building peer trust, if you have multiple peers

1067
00:51:11,064 --> 00:51:13,768
and you're able to communicate between those

1068
00:51:13,828 --> 00:51:16,752
and find out who's the bad peer, that's a common technique.

1069
00:51:17,352 --> 00:51:20,914
Replay verification, if you've got the functionality

1070
00:51:20,934 --> 00:51:23,016
to play back those replays I mentioned in the past,

1071
00:51:23,056 --> 00:51:24,697
that's a really solid technique

1072
00:51:24,737 --> 00:51:27,478
for detecting a lot of behavior.

1073
00:51:27,999 --> 00:51:28,719
Machine learning.

1074
00:51:28,879 --> 00:51:30,440
Machine learning sounds like something

1075
00:51:30,520 --> 00:51:32,201
only a really big company would use,

1076
00:51:32,621 --> 00:51:36,444
but you'd be surprised at the tools and services available

1077
00:51:36,584 --> 00:51:38,685
out there at the moment to basically use

1078
00:51:38,705 --> 00:51:41,246
machine learning to detect aberrant behavior.

1079
00:51:41,927 --> 00:51:44,748
And then the worst case, figure out what your worst case is.

1080
00:51:44,768 --> 00:51:45,249
You shh.

1081
00:51:46,410 --> 00:51:47,851
You shouldn't have credit card numbers,

1082
00:51:48,952 --> 00:51:51,575
but you might have embarrassing karaoke videos

1083
00:51:51,675 --> 00:51:52,696
that people don't want leaked.

1084
00:51:53,997 --> 00:51:57,301
So moving to the cloud, everyone who is aware of cloud stuff,

1085
00:51:57,421 --> 00:51:59,323
AWS shat the bed yesterday.

1086
00:51:59,563 --> 00:52:00,864
And that was fun, because that was

1087
00:52:00,884 --> 00:52:02,085
in the middle of a big game launch.

1088
00:52:03,501 --> 00:52:04,562
It is someone else's machine.

1089
00:52:04,882 --> 00:52:07,444
It will typically be more reliable than your machine,

1090
00:52:08,104 --> 00:52:09,325
but it is someone else's machine.

1091
00:52:09,625 --> 00:52:12,047
Moving a small server like the Raspberry Pi instance

1092
00:52:12,107 --> 00:52:14,849
I explained earlier to the cloud is actually very simple

1093
00:52:14,889 --> 00:52:18,011
and I would encourage it as your first foray

1094
00:52:18,491 --> 00:52:19,532
into cloud computing.

1095
00:52:19,892 --> 00:52:22,274
But building up infrastructure is much more.

1096
00:52:23,254 --> 00:52:27,817
Complicated. Compare service providers. AWS is kind of the default choice but

1097
00:52:27,877 --> 00:52:33,381
you may find that Azure or the Google offering will actually be better for you

1098
00:52:33,821 --> 00:52:37,843
and if you're talking to the sales people of these particular platforms you

1099
00:52:37,883 --> 00:52:39,505
would be amazed the deals you can get.

1100
00:52:40,962 --> 00:52:42,823
So understand what that platform offers you,

1101
00:52:42,863 --> 00:52:44,684
because what they're offering you isn't hardware.

1102
00:52:44,704 --> 00:52:45,884
They're not offering you computers.

1103
00:52:46,885 --> 00:52:50,547
The cloud offering is really about the tools and services

1104
00:52:50,567 --> 00:52:53,508
they're providing, like AWS's Elasticsearch, for example.

1105
00:52:54,505 --> 00:52:57,627
OK, and DevOps, I've mentioned already, which is a huge cost.

1106
00:52:57,847 --> 00:53:01,010
So in conclusion, REST APIs and platform features

1107
00:53:01,210 --> 00:53:03,092
really are the key thing to look at.

1108
00:53:03,492 --> 00:53:04,833
They're the bread and butter stuff.

1109
00:53:04,913 --> 00:53:06,354
It's not super complicated.

1110
00:53:06,694 --> 00:53:08,216
And they're basically free to get in.

1111
00:53:08,236 --> 00:53:10,557
There's a lot of core social functionality,

1112
00:53:10,938 --> 00:53:12,419
networking you can get into the game,

1113
00:53:12,699 --> 00:53:13,820
that isn't a huge headache.

1114
00:53:14,480 --> 00:53:18,823
Real time, again, start with the basic middleware

1115
00:53:18,863 --> 00:53:20,785
provided stuff, optimize later.

1116
00:53:21,525 --> 00:53:23,647
And servers, if you're going small scale,

1117
00:53:23,707 --> 00:53:24,527
it's not a huge headache.

1118
00:53:24,587 --> 00:53:25,708
If you're going to the infrastructure,

1119
00:53:26,108 --> 00:53:26,709
it's pretty big.

1120
00:53:27,169 --> 00:53:30,611
Find two things in the talk and follow that up.

1121
00:53:31,532 --> 00:53:34,134
So as I say, you will be getting a feedback email.

1122
00:53:34,754 --> 00:53:36,836
Pixel and Vertex ask kindly that you fill it out.

1123
00:53:37,396 --> 00:53:38,417
And with that, if any of you want

1124
00:53:38,457 --> 00:53:40,318
to come to the microphones and ask questions,

1125
00:53:41,279 --> 00:53:43,100
or if you want to poke me on social media,

1126
00:53:43,120 --> 00:53:43,860
my Twitter is there.

1127
00:53:45,098 --> 00:53:45,584
Thank you very much.

