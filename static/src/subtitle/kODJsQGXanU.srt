1
00:00:08,058 --> 00:00:12,704
Hello and welcome to Control Lessons in Procedural Destruction.

2
00:00:12,704 --> 00:00:14,146
My name is Johannes WÃ¤chter.

3
00:00:14,146 --> 00:00:17,109
I'm principal effects artist at Remedy.

4
00:00:17,109 --> 00:00:22,216
I used to work in film as effects supervisor and artist for more than 10 years.

5
00:00:22,216 --> 00:00:24,959
And I have moved into games in 2019.

6
00:00:25,440 --> 00:00:29,202
Now, I don't really have to introduce Remedy because it's quite well-known already, but

7
00:00:29,202 --> 00:00:33,604
for the ones who don't, we are based in Espoo in Finland, that would be up there.

8
00:00:33,604 --> 00:00:39,327
And Remedy has been known for over 20 years for iconic narrative-driven action.

9
00:00:39,327 --> 00:00:43,669
So Max Payne would be a thing, Max Payne 2, Alan Wake, Quantum Break, and of course, not

10
00:00:43,669 --> 00:00:46,150
at least, most recently, Control.

11
00:00:46,990 --> 00:00:56,076
Introducing Control. Control is a supernatural third-person action adventure and you play as Jesse Faden,

12
00:00:56,076 --> 00:01:01,379
director of the Federal Bureau of Control which you suddenly become right at the beginning of the game

13
00:01:01,379 --> 00:01:06,382
and you take over this government agency that is investigating that supernatural.

14
00:01:07,357 --> 00:01:12,140
The agenda for my talk today is, well, I'm going to talk about the mission, the challenge

15
00:01:12,140 --> 00:01:17,404
that we have put out, and I'm going to introduce sort of our core principle for a lot of the

16
00:01:17,404 --> 00:01:20,826
VFX that we've been doing on controls, or the principle of granularity.

17
00:01:20,826 --> 00:01:25,650
I'm going to talk about workflow and implementation, and then highlight some lessons learned and

18
00:01:25,650 --> 00:01:29,893
a little bit of an outlook on things that we probably would like to do better in the

19
00:01:29,893 --> 00:01:31,514
future.

20
00:01:31,514 --> 00:01:35,397
And to start here, a little destruction breakdown of control.

21
00:02:08,930 --> 00:02:14,132
To the challenges that we faced, a lot of the mission statement was about the location.

22
00:02:14,132 --> 00:02:19,434
So the whole game plays inside this government agency's building, which is a bit of a supernatural

23
00:02:19,434 --> 00:02:24,536
building so the walls are moving and everything is a little bit different than what you expect

24
00:02:24,536 --> 00:02:26,236
and it's almost a character in itself.

25
00:02:26,236 --> 00:02:32,038
And it's key is sort of it's very, well it's the brutalist architecture, it's very suitable

26
00:02:32,038 --> 00:02:33,719
for government building.

27
00:02:34,119 --> 00:02:38,003
And another key was the believability, because it's a government agency, there are thousands

28
00:02:38,003 --> 00:02:42,507
of agents all about and it had to feel like a place that was sort of inhabited by so many

29
00:02:42,507 --> 00:02:45,570
agents that go about their day-to-day work.

30
00:02:45,570 --> 00:02:48,973
They have telephones and coffee mugs and coffee machines.

31
00:02:49,113 --> 00:02:52,436
desks in their places where they are, in the different departments, and that was

32
00:02:52,436 --> 00:02:57,400
quite crucial to sell that and to tell that story of that place. The lighting

33
00:02:57,400 --> 00:03:03,005
had a very cinematic look to it and that was the desired style. Control is very

34
00:03:03,005 --> 00:03:08,109
big in the whole RTX ray tracing and while obviously the lighting had to cater

35
00:03:08,109 --> 00:03:08,930
for that and had to be

36
00:03:09,250 --> 00:03:14,033
quite cinematic. And well, Brutalism is all about exposed materials. So you have that boarded

37
00:03:14,033 --> 00:03:19,216
concrete, you have lots of wooden glass and you know, the sort of very suitable agency

38
00:03:19,216 --> 00:03:24,159
building kind of style. Now, obviously, when we talk about destruction, we talk about the haptics.

39
00:03:24,159 --> 00:03:28,901
So we wanted to sell a rich reactive environment conveying the sense of being able to consistently

40
00:03:28,901 --> 00:03:31,363
interact with anything inside it.

41
00:03:31,703 --> 00:03:37,387
And obviously limitations are another challenge because we have target platforms we have to hit.

42
00:03:37,387 --> 00:03:40,510
So we were after realistic, rewarding physical impact.

43
00:03:40,510 --> 00:03:45,874
And we were, no, go wild, create havoc wherever you go, but please don't do that all too much.

44
00:03:45,874 --> 00:03:50,298
Because obviously there's performance and memory that we have to hit and the AI requirements.

45
00:03:50,298 --> 00:03:54,261
And we were a very, very small team to achieve all that.

46
00:03:55,300 --> 00:04:00,722
There's sort of an overarching principle that I just coined, the principle of granularity,

47
00:04:00,722 --> 00:04:05,484
and that is really that we decide to represent every level of natural detail in every effect

48
00:04:05,484 --> 00:04:08,766
that you create, and it's actually not a thing that's specific to what we did in Control.

49
00:04:08,766 --> 00:04:13,448
This is also a very, very common principle for any VFX work for film.

50
00:04:13,448 --> 00:04:16,510
You try to sort of capture nature because nature isn't quantified.

51
00:04:16,850 --> 00:04:33,018
Nature is sort of a continuum from very big objects down to dust and very very thin veils of smoke and those kind of things and all that you always want to encapsulate to create this richness, this rich gradient across all those different scales to it.

52
00:04:33,018 --> 00:04:45,145
Now if you look at that, how to do this in a game engine, we're looking at an overlapping representation and three different layers and the first one is, well you can do rigid body simulations, you have chunks and parts of props and props and environments and all that is RBDs.

53
00:04:45,623 --> 00:04:48,665
And the environments are, you know, like a big static kind of mesh you can collide with,

54
00:04:48,665 --> 00:04:52,267
and objects are like chairs or tables. And then you've got to start maybe representing

55
00:04:52,267 --> 00:04:55,688
them with something else, because the smaller you get, the more of them you will have on screen.

56
00:04:55,688 --> 00:05:00,191
So we're now looking at something like mesh particles or rigid body hierarchies,

57
00:05:00,191 --> 00:05:06,554
or material decals even, to sort of sell a certain material richness on those layers.

58
00:05:06,554 --> 00:05:10,657
So we're now moving from objects to chunks and almost into the debris already.

59
00:05:10,657 --> 00:05:11,577
And then the last layer.

60
00:05:11,977 --> 00:05:16,119
actually is pure particles, particles, bright particles,

61
00:05:16,119 --> 00:05:20,181
for embers, sparks, smoke, fires, blinters, gravel, sand, all that kind of stuff

62
00:05:20,181 --> 00:05:23,783
that plays a big role when filling all that kind of gradient.

63
00:05:25,371 --> 00:05:33,596
Now for control, I chose this particular angle inside our research sector to demonstrate

64
00:05:33,596 --> 00:05:39,800
the different aspects of this gradient, how we fulfilled it, or how we filled it in our

65
00:05:39,800 --> 00:05:40,140
VFX work.

66
00:05:40,140 --> 00:05:43,062
Now what you're looking at here is the static environment.

67
00:05:43,062 --> 00:05:46,444
This is all the stuff that can't actually move.

68
00:05:46,444 --> 00:05:48,946
And it looks like, okay, cool, it's a bit empty and a bit vast.

69
00:05:49,386 --> 00:05:53,928
And then there is sort of another layer and it's a bit underrepresented in this particular angle,

70
00:05:53,928 --> 00:05:57,330
but you see like that the railings have been added for example, and this would be sort of

71
00:05:57,330 --> 00:06:00,851
concrete parts of your environment that you sort of can interact with, and you actually see it's

72
00:06:00,851 --> 00:06:05,774
actually not all that much, it's quite surprising. And then the big difference comes in when you

73
00:06:05,774 --> 00:06:07,134
start adding all the props.

74
00:06:09,316 --> 00:06:13,179
Really for that kind of part it just shows the richness the game had to sort of have

75
00:06:13,179 --> 00:06:17,824
in terms of like filling everything with bits that you can actually interact with and move,

76
00:06:17,824 --> 00:06:20,927
which are the props and all those kind of additional items that can be placed.

77
00:06:20,927 --> 00:06:25,371
And kudos to our environments team, they've done a marvelous job to sell

78
00:06:25,371 --> 00:06:28,935
sort of the richness of the place by using all those kind of elements.

79
00:06:31,437 --> 00:06:34,557
For our workflow, it was actually quite a standard thing how you would expect it.

80
00:06:34,557 --> 00:06:38,198
You have an environment build, you have environment artists that sort of provide

81
00:06:38,198 --> 00:06:42,779
level geometry modules, kits and props. And then that goes into the VFX department for

82
00:06:42,779 --> 00:06:46,900
destruction setup. And we had a lot of systemic setups and prop rigs. And also there was cinematic

83
00:06:46,900 --> 00:06:50,941
animation for specific aspects of what we've been doing. And that then goes into Northlight,

84
00:06:50,941 --> 00:06:54,882
which is our in-house engine where everything is sort of running on.

85
00:06:56,890 --> 00:06:59,952
But we had to choose a certain approach to this and we went procedural.

86
00:06:59,952 --> 00:07:02,354
And you're like, what does it mean? What does procedural mean?

87
00:07:02,354 --> 00:07:05,096
Everyone talks about it all the time. What does it mean?

88
00:07:05,096 --> 00:07:07,197
It's a rule-based processing and interpretation of real data.

89
00:07:07,197 --> 00:07:09,218
That's really all it is. You get some data and you have some rules.

90
00:07:09,218 --> 00:07:10,659
You apply the rules and change the data.

91
00:07:10,659 --> 00:07:14,381
That's sort of the key of this and how that looked like for us

92
00:07:14,381 --> 00:07:16,583
and for this kind of environment process.

93
00:07:16,683 --> 00:07:21,269
Well, we got the art models in the world and there was our data and the data was actually

94
00:07:21,269 --> 00:07:25,695
amended or augmented with a bit of extra stuff, extra metadata that basically told us what

95
00:07:25,695 --> 00:07:26,596
everything is made of.

96
00:07:26,596 --> 00:07:30,461
So we could say, hey, those cushions are fabric and that concrete is well concrete and the

97
00:07:30,461 --> 00:07:31,522
plant is made out of plant.

98
00:07:32,083 --> 00:07:38,666
Once you know that for an object, then you can start actually applying rules on those based on what those objects are made of.

99
00:07:38,666 --> 00:07:45,729
So you could say, well, grass spawns bits of leaves when you shoot it or concrete breaks into sort of smaller concrete bits when you shoot it and spawns dust.

100
00:07:45,729 --> 00:07:52,993
And you shoot a metal pipe, it spawns like a water that dribbles out of the hole and then you add like a bend decal to sort of sell a little bit of a deformation on there.

101
00:07:53,313 --> 00:07:58,037
And you have a finite set of rules that sort of encapsulates that whole process and sort

102
00:07:58,037 --> 00:08:02,701
of makes sure that everything sort of has a reaction to whatever can happen in the world.

103
00:08:02,701 --> 00:08:07,826
And then that is fed into the engine and then they impact the effects and breaking the effects

104
00:08:07,826 --> 00:08:12,070
and rigid body behavior that is sort of driven by the material and that sort of creates that

105
00:08:12,070 --> 00:08:13,191
interactable environment.

106
00:08:14,087 --> 00:08:17,070
Now, why would you do that? Why would you go procedural?

107
00:08:17,070 --> 00:08:19,933
Because setting all that up is a little bit more difficult,

108
00:08:19,933 --> 00:08:21,854
a little bit harder than just sort of kind of doing it.

109
00:08:21,854 --> 00:08:25,358
But the thing is, you needed a consistent and fast turnaround.

110
00:08:25,358 --> 00:08:29,181
And we also needed a predictable behavior within very clear defined metrics.

111
00:08:29,181 --> 00:08:30,863
So we needed to know like how many things...

112
00:08:31,763 --> 00:08:36,786
something can break into, etc. And we had hundreds of assets and variations.

113
00:08:36,786 --> 00:08:40,969
So at the top, in that top image, you kind of see like all kinds of building blocks that make out

114
00:08:40,969 --> 00:08:45,432
rooms and walls and pillars and concrete railings and all that kind of stuff and

115
00:08:45,432 --> 00:08:46,893
all the lots of astral plane

116
00:08:46,893 --> 00:08:51,336
things in there. And at the bottom you see a selection of props, which is like

117
00:08:51,336 --> 00:08:54,998
desks and toilet cubicles and walls and dividers and planters

118
00:08:54,998 --> 00:08:58,641
and plants and computers and telephones and other kind of stuff.

119
00:08:59,121 --> 00:09:02,986
And we had so much of them, but we only had a team for, well, you could say on average

120
00:09:02,986 --> 00:09:05,188
one to three people actually working on all of that.

121
00:09:05,188 --> 00:09:08,572
So we needed something that we could just unleash on certain things that come through

122
00:09:08,572 --> 00:09:08,853
the pipe.

123
00:09:08,853 --> 00:09:11,916
And when they're tagged in a certain way, something specific would happen to them that

124
00:09:11,916 --> 00:09:13,138
we have predetermined.

125
00:09:13,138 --> 00:09:17,483
But you couldn't do it per item because it was just not possible.

126
00:09:17,483 --> 00:09:18,244
And it doesn't scale.

127
00:09:20,061 --> 00:09:24,084
So if you look at the material-driven behavior now, what you would want to do is on the left you see

128
00:09:24,084 --> 00:09:27,927
the concrete, you know, you shoot concrete, concrete stuff happens and you look at the

129
00:09:27,927 --> 00:09:32,751
middle and that's sort of like wood, when you shoot wood it breaks into chunks or it breaks

130
00:09:32,751 --> 00:09:36,655
into those splinter pieces and then they're like splinters on the floor and on the right you see

131
00:09:36,655 --> 00:09:42,219
what happens when you shoot glass and that's sort of like three different materials demonstrated

132
00:09:42,219 --> 00:09:46,903
here. So the material-based interactions on dynamic objects and then you see the particles and decals

133
00:09:46,903 --> 00:09:47,523
sort of reacting.

134
00:09:47,904 --> 00:09:52,327
also to what the material is. And I'm going to go a little bit more into detail on this.

135
00:09:52,327 --> 00:09:55,148
So the first part of this is the geometry layer.

136
00:09:55,148 --> 00:10:00,072
We are looking at a piece of railing here and it's made out of concrete at the bottom and then a bit of metal in

137
00:10:00,072 --> 00:10:05,015
the middle and then there's wood on top and from the left to right it's sort of you see a hierarchy of how that

138
00:10:05,015 --> 00:10:08,517
stuff breaks. So you see level A that

139
00:10:08,517 --> 00:10:13,120
is sort of broken up the concrete. It doesn't have decals on it because you don't want to see all the cracks when you

140
00:10:13,120 --> 00:10:13,761
break an object.

141
00:10:14,221 --> 00:10:18,304
And then you see the wood is sort of going on to longer, kind of splintery things, and the metal is a bit bent.

142
00:10:18,304 --> 00:10:23,067
And then level B already doesn't have metal anymore, it doesn't break any further, but the wood does and the concrete does.

143
00:10:23,067 --> 00:10:28,610
And then even level C, also optional, depending on the material, would break even further.

144
00:10:28,610 --> 00:10:31,672
And now it might look a little bit funny here, because you're like, oh, that's like super regular,

145
00:10:31,672 --> 00:10:33,654
kind of, you know, this like screams Voronoi right there.

146
00:10:33,654 --> 00:10:37,736
But you've got to imagine that you're not actually breaking all the parts of the object at all times.

147
00:10:37,736 --> 00:10:41,999
So you're literally shooting a certain corner of it, and that's where it would break into all the pieces.

148
00:10:42,439 --> 00:10:45,662
Now, we had different simulation entities and this is like nothing new.

149
00:10:45,662 --> 00:10:49,926
We had rigid bodies that's just, you know, the physical objects that can be flying around the world.

150
00:10:49,926 --> 00:10:52,929
And then we had a system that we called chunks and chunks could have bonds.

151
00:10:52,929 --> 00:10:57,073
And really what that is, that is rigid bodies that sort of share a compound collision.

152
00:10:57,073 --> 00:11:01,537
In some cases it's called a composite, some call it an aggregate, it depends a little bit.

153
00:11:01,537 --> 00:11:03,339
And then we were using drawings as regular.

154
00:11:03,899 --> 00:11:08,201
And so chunks, as I just described, chunks are sort of just a compound.

155
00:11:08,201 --> 00:11:11,442
And they're created at initialization time, so like those two things belong together in

156
00:11:11,442 --> 00:11:15,223
the shear collider and they sort of move as one until they break.

157
00:11:15,223 --> 00:11:18,004
So close proximity leaf nodes are basically bonded together.

158
00:11:18,004 --> 00:11:22,846
And if you look at joins, they were just created on geometry hierarchy based on a

159
00:11:22,846 --> 00:11:26,607
metadata description. So this rigid body and this rigid body are connected by something like a

160
00:11:27,047 --> 00:11:33,472
revolute or a hinge joint to be a door or to be a drawer or you know whatever else we needed

161
00:11:33,472 --> 00:11:37,615
structurally to represent a prop or part of the environment in the game.

162
00:11:38,494 --> 00:11:41,977
And they were dynamically breakable based again on an impulse strength.

163
00:11:41,977 --> 00:11:47,202
And there's something special about the breaking of the joints because internally when you create

164
00:11:47,202 --> 00:11:50,805
sort of a joint between two rigid bodies what we actually wanted to do, what we actually did is

165
00:11:50,805 --> 00:11:54,748
that we actually connected the two lowest level chunks inside of that

166
00:11:54,748 --> 00:11:56,890
which essentially means that you can break a door.

167
00:11:57,440 --> 00:12:01,381
And there's a big hole in the door, but the door is still attached to it on a hinge.

168
00:12:01,381 --> 00:12:05,763
It's not like that the joints would actually break as soon as the parent box, like the RB1 box,

169
00:12:05,763 --> 00:12:10,424
as soon as that breaks into parts, it wouldn't actually fall off the hinges. It would stay on

170
00:12:10,424 --> 00:12:13,805
the hinges as long as the chunk that is on the hinges is still around. And that actually allowed

171
00:12:13,805 --> 00:12:18,266
us to have a little bit richer interaction because you can punch a hole in the door and the door still

172
00:12:18,786 --> 00:12:25,313
opens and closes like a door for example and that helped to not create those kind of you know fall apart on impact

173
00:12:25,313 --> 00:12:31,360
scenarios which is quite prominent in some games where you sort of feel like okay as soon as you touch a thing once it sort of

174
00:12:31,360 --> 00:12:36,786
just disassembles into all its pieces. So it retains a bit of structure and that was sort of how that was achieved.

175
00:12:37,086 --> 00:12:43,052
And on the simulation side, inside the engine, it was sort of all Northlight driven, all in-house

176
00:12:43,052 --> 00:12:46,636
software driven basically. The data and hierarchy handling, the breaking logic, and

177
00:12:46,636 --> 00:12:51,360
what events and particles were spawned around all that kind of process. And then internally,

178
00:12:51,360 --> 00:12:56,445
it was physics that did the simulation of the rigid bodies and the constraints.

179
00:12:57,949 --> 00:13:01,831
Now the destruction toolchain, how to create all that was, again, you would say, like,

180
00:13:01,831 --> 00:13:03,232
that's kind of pretty standard.

181
00:13:03,232 --> 00:13:04,633
So we have the geometry that comes in.

182
00:13:04,633 --> 00:13:05,954
We had to do a bit of model prep.

183
00:13:05,954 --> 00:13:09,276
In some cases, we created some sort of bonding geometry that would say, hey, these

184
00:13:09,276 --> 00:13:11,777
parts here of the thing can break and these parts can't break.

185
00:13:12,102 --> 00:13:14,563
And that went then into a destruction tool inside Houdini.

186
00:13:14,563 --> 00:13:19,766
It's a pretty big sort of HDA kind of setup that would then do the whole material based

187
00:13:19,766 --> 00:13:22,528
breaking of everything and write out the data to disk.

188
00:13:22,528 --> 00:13:26,210
And sometimes you had to manually patch some of the physics metadata to just make sure some of

189
00:13:26,210 --> 00:13:29,953
the settings are correct, especially when we did more complex things that contained

190
00:13:29,953 --> 00:13:32,294
joints and this kind of stuff. Certain values had to be.

191
00:13:32,847 --> 00:13:35,970
set manually in there and then that went into the engine that metadata and the

192
00:13:35,970 --> 00:13:39,152
mesh data sort of was used by the engine to then create the world

193
00:13:39,152 --> 00:13:42,795
and simulate it. And the destruction tool looked a bit like this so you had an

194
00:13:42,795 --> 00:13:44,977
input geo that comes in like this concrete kind of block

195
00:13:44,977 --> 00:13:48,760
and then we were sort of defining was which areas can break which is those two

196
00:13:48,760 --> 00:13:50,101
wing shape kind of things on the side.

197
00:13:50,641 --> 00:13:57,003
and then decided, oh yeah, it's concrete, it's tagged as concrete, so it would do the concrete

198
00:13:57,003 --> 00:14:00,984
breaking and operate it through and sort of create all the different hierarchies that come out of

199
00:14:00,984 --> 00:14:04,686
that in terms of vendor and collision geometry and make sure that this is sort of all within

200
00:14:04,686 --> 00:14:08,107
the metrics of the style that we kind of wanted to. It would add all the decals and would add

201
00:14:08,107 --> 00:14:11,568
like rebars in terms of for the concrete part, for example, etc. And it would do that for wood,

202
00:14:11,568 --> 00:14:16,309
glass, concrete, and all the other materials that were supported by it and they would export into

203
00:14:16,309 --> 00:14:16,930
Unreal Engine.

204
00:14:17,467 --> 00:14:21,089
And in engine it looks like this, you end up with a hierarchy, it's literally a hierarchy of nodes,

205
00:14:21,089 --> 00:14:27,532
and they are, you know, ABC level, under a chunk, and the name drove what the material would be,

206
00:14:27,532 --> 00:14:31,754
and also other things about if they were static or not, and some things about the joints,

207
00:14:31,754 --> 00:14:33,555
and the type of joints, and all those kind of things.

208
00:14:34,119 --> 00:14:39,922
And so the hierarchy was represented by the layers, by the depth in the hierarchy,

209
00:14:39,922 --> 00:14:43,605
and the physics properties were driven by naming convention material assignments.

210
00:14:43,605 --> 00:14:49,849
And all the physics then would be driven off that kind of stuff by the engine when it was

211
00:14:49,849 --> 00:14:55,493
set up correctly as well. And that's something I'm going to get back to later on.

212
00:14:55,493 --> 00:15:01,577
And then it looked like this, basically. This is the rigidbody video.

213
00:15:03,248 --> 00:15:09,430
showing that scenario again, just with the rigid body simulations. So Jesse's doing the shooting

214
00:15:09,430 --> 00:15:12,392
and then we have this little tool, you click on things and then they just explode. So that's what

215
00:15:12,392 --> 00:15:18,654
I'm doing here, basically just destroying everything. And you kind of see this is sort of,

216
00:15:18,654 --> 00:15:22,136
you know, physics room is happening, looks a little bit empty, but this is all the rigid

217
00:15:22,136 --> 00:15:24,036
body stuff that is actually happening in the scenario.

218
00:15:25,264 --> 00:15:29,088
So now some things about optimizations on the site,

219
00:15:29,088 --> 00:15:31,391
especially when it comes to rigid bodies.

220
00:15:31,391 --> 00:15:32,713
Well, at any point in time,

221
00:15:32,713 --> 00:15:34,395
we only had about 200 active rigid bodies on screen

222
00:15:34,395 --> 00:15:38,259
because that's our sort of the budget we had to operate on

223
00:15:38,259 --> 00:15:40,682
to make it run on consoles, et cetera, et cetera.

224
00:15:41,157 --> 00:15:45,860
and that meant that we sort of kind of started culling things that were off-screen and make them

225
00:15:45,860 --> 00:15:50,883
disappear. There was a collision delay on big events so whenever there were big forces,

226
00:15:50,883 --> 00:15:55,306
sort of impulse waves implemented, that would essentially disable the

227
00:15:55,306 --> 00:15:57,207
self-collision on objects for a bunch of frames.

228
00:15:58,488 --> 00:16:05,894
to make sure that you don't do too crazy collision calculations of objects that are fast moving in very close proximity to one another

229
00:16:05,894 --> 00:16:11,719
because you don't really need it, because if you put an impulse somewhere, it usually means it's quite clear where things are moving

230
00:16:11,719 --> 00:16:15,923
and mostly in an explosion they move apart, so you're not really interested in those collisions

231
00:16:15,923 --> 00:16:22,108
so that's why I've used collision delay, well the term collision delay itself I know from the film world as well, we did about the same things

232
00:16:22,529 --> 00:16:25,351
It helps a lot with other issues like self-indetect sections and stuff as well.

233
00:16:25,351 --> 00:16:28,894
And then we use the sleeping thresholds a lot.

234
00:16:28,894 --> 00:16:34,679
And well, luckily if things made of concrete and drop onto the floor, they can fall asleep

235
00:16:34,679 --> 00:16:35,339
really quickly.

236
00:16:35,339 --> 00:16:37,221
No one would expect them to bounce around a lot.

237
00:16:37,621 --> 00:16:42,323
And funnily enough, the more realistic you go, the more you can actually bank on the

238
00:16:42,323 --> 00:16:43,463
whole sleepiness.

239
00:16:43,463 --> 00:16:45,844
So you don't have a lot of bounce when you drop something on the floor.

240
00:16:45,844 --> 00:16:53,047
It really has to be marbles to really have them sort of do a longer lifetime across the

241
00:16:53,047 --> 00:16:54,028
floor or something.

242
00:16:54,028 --> 00:16:56,228
So we had a really, really high sleeping threshold.

243
00:16:56,228 --> 00:16:59,910
And it's also the reason that we could reliably stack objects on top of each other, which

244
00:16:59,910 --> 00:17:02,191
is actually quite fun when you do that in game.

245
00:17:03,118 --> 00:17:08,180
Well, and then, of course, we filled in the blanks with a lot of particles, which brings me to the next section,

246
00:17:08,180 --> 00:17:13,562
which is the particle simulation that we did is everything is systemic and event-driven, right?

247
00:17:13,562 --> 00:17:17,684
So the particle events that we have a bullet impact, so you should think something happens,

248
00:17:17,684 --> 00:17:21,745
that was driven by the material, what will happen were particles to sort of play back.

249
00:17:21,745 --> 00:17:25,746
We had bond breaking, so when chunks disconnect, rigid body chunks disconnect, they would have

250
00:17:25,746 --> 00:17:28,788
a bond breaking event where particles would be released, which is nice because then you have

251
00:17:28,788 --> 00:17:29,208
like cracking.

252
00:17:30,108 --> 00:17:33,552
you know, cracking concrete, sort of pebbles and all that kind of stuff you can do with it.

253
00:17:33,552 --> 00:17:36,895
And then the despawning, so whenever we actually made objects disappear,

254
00:17:36,895 --> 00:17:40,638
we didn't just pop them off, we actually made them disappear

255
00:17:40,638 --> 00:17:44,842
in sort of, by breaking into particles that were predetermined based on their material,

256
00:17:44,842 --> 00:17:47,164
which, if you would see them despawn on screen,

257
00:17:47,164 --> 00:17:50,267
you would actually see them sort of feel like they're breaking apart.

258
00:17:50,267 --> 00:17:54,871
And that was very, very effective to sort of hide that kind of optimization.

259
00:17:55,992 --> 00:17:59,354
This is here just a quick view on how we edited particles.

260
00:17:59,354 --> 00:18:01,435
This was all done sort of it's live edit,

261
00:18:01,435 --> 00:18:02,536
it's a hot loaded live edit.

262
00:18:02,536 --> 00:18:04,157
This is the game running and you can place down

263
00:18:04,157 --> 00:18:05,998
a specific particle system

264
00:18:05,998 --> 00:18:07,478
and then you can go in and change things.

265
00:18:07,478 --> 00:18:09,239
And I'm really just going in here,

266
00:18:09,239 --> 00:18:11,260
changing like the emission frequency for the sparks.

267
00:18:11,260 --> 00:18:11,981
And I think I'm like,

268
00:18:11,981 --> 00:18:14,002
oh, maybe that is actually too many sparks.

269
00:18:14,002 --> 00:18:14,782
Maybe I go down on that.

270
00:18:14,782 --> 00:18:16,023
And then I changed that,

271
00:18:16,023 --> 00:18:18,424
a lot more rocks to the simulation.

272
00:18:18,424 --> 00:18:22,226
And the cool thing is you can literally play it back live.

273
00:18:22,226 --> 00:18:24,367
So you really get an instant feedback

274
00:18:24,367 --> 00:18:24,828
and then you can.

275
00:18:25,525 --> 00:18:28,848
go around and chew the thing and see how it feels like and then go back and keep iterating.

276
00:18:28,848 --> 00:18:33,713
And that really fast-paced iteration loop really allowed us to polish that kind of stuff very,

277
00:18:33,713 --> 00:18:40,158
very, very much until it really sort of felt about right and then was very, very beneficial.

278
00:18:41,128 --> 00:18:46,452
Another specific part about the particles is standard simulation, but we also hijacked

279
00:18:46,452 --> 00:18:51,555
the rendering SDF at times, so you could optionally collide with the SDF, which is, well, so much

280
00:18:51,555 --> 00:18:53,156
faster than colliding with anything else.

281
00:18:53,156 --> 00:18:58,039
And that sort of took care of a lot of the particle collisions, not to have things either

282
00:18:58,039 --> 00:19:00,681
fall through the floor or look really weird.

283
00:19:00,681 --> 00:19:01,522
So we use that.

284
00:19:01,522 --> 00:19:09,467
This part here now would be the particles and the rigid bodies at the same time.

285
00:19:10,410 --> 00:19:20,299
So now it's the same thing as before I was shooting and then I'm going around and just exploding everything and you notice instantly, oh my god, this is like so much more responsive and so much more fun because there's stuff happening, there's dust in the air.

286
00:19:20,299 --> 00:19:31,850
It makes it instantly much richer and that sort of, well, it's all for the additional particle layers sort of that fills in that missing that gap in that gradient of granularity that is now covered by that.

287
00:19:32,833 --> 00:19:34,994
And the last aspect is material decals.

288
00:19:34,994 --> 00:19:38,956
So we have a lot of them, we dynamically spawn them.

289
00:19:38,956 --> 00:19:40,437
So if something breaks, it would sort of spawn

290
00:19:40,437 --> 00:19:42,958
sort of ground decal of like broken shards

291
00:19:42,958 --> 00:19:44,498
of the kind of stuff on the floor.

292
00:19:44,498 --> 00:19:47,259
If you slam the floor, it would crack the floor by decal

293
00:19:47,259 --> 00:19:51,361
that we had generally generated sort of in Houdini

294
00:19:51,361 --> 00:19:52,641
or Substance or things like that.

295
00:19:52,641 --> 00:19:54,942
And we could dynamically spawn them based on the material

296
00:19:54,942 --> 00:19:56,643
they happened on as well.

297
00:19:56,643 --> 00:19:58,944
And that sort of helped to really also include.

298
00:19:59,264 --> 00:20:03,726
the quite big portion of static geometry you saw in the beginning. There's like a lot of kinesthetic

299
00:20:03,726 --> 00:20:08,388
stuff around. But as soon as you provide an impact on that, it really makes a difference. And this is

300
00:20:08,388 --> 00:20:13,251
how that looks like, right? So, you know, if you hit the floor, it still is just a single polygon,

301
00:20:13,251 --> 00:20:19,254
like a single quad, but it really looks much different when you start adding decals. I mean,

302
00:20:19,254 --> 00:20:24,176
decals are kind of awesome in general. And yeah, we could sell all kinds of effects on that. And

303
00:20:24,176 --> 00:20:26,477
it's quite surprising how much you get away with.

304
00:20:27,114 --> 00:20:31,496
Although you don't really have a lot of texture budget, even just a few of them really instantly

305
00:20:31,496 --> 00:20:35,277
make something sort of connect to a destructive element, like throwing something on the wall,

306
00:20:35,277 --> 00:20:37,738
and then you kind of have a dent in there. Although, you know, it's concrete, it wouldn't

307
00:20:37,738 --> 00:20:42,619
really make a dent, but it sort of helps with making it feel just about right. And we're talking

308
00:20:42,619 --> 00:20:43,420
superpowers there.

309
00:20:44,049 --> 00:20:49,230
So that's now when everything comes together. So we have the particles, the IBDs and the decals.

310
00:20:49,230 --> 00:20:52,991
And I had to trick a little bit because just the explosion tool wouldn't actually spawn that many

311
00:20:52,991 --> 00:20:57,373
decals. So I think I started to launch something up in the air, like I think I take a chair and

312
00:20:57,373 --> 00:21:02,094
throw it. And then you kind of see that I make a dent in the floor and the floor still is just

313
00:21:02,094 --> 00:21:06,015
static geometry, but the decals make it so much better. And yeah, this is sort of filling the

314
00:21:06,015 --> 00:21:07,775
last bit on that missing gradient.

315
00:21:08,487 --> 00:21:10,689
And the other part is custom props and hazards.

316
00:21:10,689 --> 00:21:13,792
There are a lot of things you can throw around, like computers and lamps and stuff like that,

317
00:21:13,792 --> 00:21:16,395
that wouldn't be fully procedurally generated.

318
00:21:16,395 --> 00:21:23,201
They needed some more custom events and custom things that artists created to make it feel rich.

319
00:21:23,201 --> 00:21:28,085
So you have the fire extinguisher that obviously can't be missing, same as a computer having

320
00:21:28,085 --> 00:21:31,689
sparks and all those kind of things, and a cable attached to it and stuff like that.

321
00:21:32,226 --> 00:21:39,791
So lessons learned. The four main things I want to talk about is the quality of geometry of input data, because procedural is driven by data, so it's all about that.

322
00:21:39,791 --> 00:21:42,433
Name-based convention, kind of the same the alley really.

323
00:21:42,433 --> 00:21:46,635
Monolithic destruction tools and performance monitoring. So the four items I really want to pick.

324
00:21:46,635 --> 00:21:48,376
And the first thing, quality of geometry.

325
00:21:49,037 --> 00:21:53,178
That is a problem I've dealt with my entire career in film and now in games.

326
00:21:53,178 --> 00:21:55,219
Inconsistent incoming geometry.

327
00:21:55,219 --> 00:21:58,080
And it can go, well, it's scaled the wrong way.

328
00:21:58,080 --> 00:22:01,121
The orientation is wrong, but it can also be the material assignments are wrong.

329
00:22:01,121 --> 00:22:04,322
You know, something that actually looks like wood, but it's sort of tagged as

330
00:22:04,322 --> 00:22:06,163
plant or it's tagged as flesh or something.

331
00:22:06,163 --> 00:22:10,024
But sometimes also the mesh quality being too low.

332
00:22:10,024 --> 00:22:14,146
And that could mean that the subdivisions aren't nice or it's sort of really single-sided

333
00:22:14,146 --> 00:22:14,866
and that kind of stuff.

334
00:22:14,866 --> 00:22:17,927
Sometimes you break things and realize, well, there's nothing inside.

335
00:22:18,580 --> 00:22:24,850
But there should be something inside because we can break it and that's sort of a difficult part of communicating standards and making that all work.

336
00:22:24,850 --> 00:22:29,216
And obviously we're using procedural tools to break that kind of stuff.

337
00:22:30,412 --> 00:22:32,073
So it has to be of a certain way.

338
00:22:32,073 --> 00:22:34,654
And what can you do to fix it is improve the incoming data,

339
00:22:34,654 --> 00:22:36,916
standardize across the CCC geometry pipeline,

340
00:22:36,916 --> 00:22:39,797
making sure that everything is sanity checked and export.

341
00:22:39,797 --> 00:22:41,878
So at export, the exporter would say,

342
00:22:41,878 --> 00:22:44,320
hey, this doesn't fulfill the criteria it needs to fulfill,

343
00:22:44,320 --> 00:22:45,720
please fix it before you export.

344
00:22:45,720 --> 00:22:48,262
And that would sort of help a lot to avoid that,

345
00:22:48,262 --> 00:22:50,903
that constant feedback loop between different departments

346
00:22:50,903 --> 00:22:53,885
even and sort of put the problems exactly

347
00:22:53,885 --> 00:22:56,066
where they actually caused it can be fixed at the same time.

348
00:22:56,486 --> 00:22:59,630
Also, what would be good to have embedded tools to simplify the setup.

349
00:22:59,630 --> 00:23:03,094
So you literally have someone who's modeling a prop being able to instantly see what it

350
00:23:03,094 --> 00:23:04,475
would look like if it gets destroyed.

351
00:23:04,475 --> 00:23:09,040
But obviously that puts a lot of strain on creating more tools with more user-friendly

352
00:23:09,040 --> 00:23:11,363
interfaces and all that kind of stuff, and that is a lot of work.

353
00:23:11,363 --> 00:23:14,527
And then you sort of have to find the right trader for that.

354
00:23:14,527 --> 00:23:16,329
But we are definitely looking into that kind of thing.

355
00:23:17,229 --> 00:23:21,653
Name-based conventions, well, we name things that then get interpreted to be something

356
00:23:21,653 --> 00:23:26,216
specific, and the issue with that is names can be wrong.

357
00:23:26,216 --> 00:23:30,640
Apparently, there are 17 different ways how you can spell concrete, for example.

358
00:23:30,640 --> 00:23:36,524
And it's not really to blame anyone, because if it's a manual thing that artists have to

359
00:23:36,524 --> 00:23:39,626
do, it's given that there will always be a certain percentage of data that is just not

360
00:23:39,626 --> 00:23:39,947
correct.

361
00:23:39,947 --> 00:23:44,730
And you can also not express a lot of the range that you'd need in especially physics

362
00:23:44,730 --> 00:23:45,711
definition stuff.

363
00:23:45,951 --> 00:23:50,792
with just naming things. And yeah, and then the mesh hierarchy might not be standard conformed

364
00:23:50,792 --> 00:23:54,313
because you know what happens if you do things in Maya, you shuffle things around and you do

365
00:23:54,313 --> 00:23:59,434
all kinds of operations on it and then your hierarchy just goes bust. So while all I can

366
00:23:59,434 --> 00:24:04,595
say about this is don't ever do name-based conventions, abandon them, use physics authored

367
00:24:04,595 --> 00:24:08,156
straight in the DCC so many people tag things directly where they need to be tagged.

368
00:24:09,204 --> 00:24:12,186
And for that, you probably need some kind of unified metadata API.

369
00:24:12,186 --> 00:24:14,628
So from whatever tool the artists are using to creating their props,

370
00:24:14,628 --> 00:24:17,491
they are able to actually author that type of data and information as well.

371
00:24:17,491 --> 00:24:20,213
So you don't have a translation process in between.

372
00:24:20,213 --> 00:24:22,095
You literally export the data that you want to export

373
00:24:22,095 --> 00:24:24,097
straight where it's being created.

374
00:24:24,097 --> 00:24:27,780
Monolithic destruction tool, it's almost like a Houdini specific thing.

375
00:24:27,780 --> 00:24:31,243
But in general, you don't want to have the one tool that does it all.

376
00:24:31,745 --> 00:24:36,527
And quite often it happens that you start with one thing and then you start adding something and you start adding something.

377
00:24:36,527 --> 00:24:41,328
And the more you add, the more powerful it gets and the slower and harder it gets to maintain.

378
00:24:41,328 --> 00:24:42,328
And very inflexible.

379
00:24:42,328 --> 00:24:47,029
The answer to that is you've got to be more granular, but more granular comes with lots of challenges.

380
00:24:47,029 --> 00:24:51,090
Because we're looking at a lot of individual interchangeable components.

381
00:24:51,090 --> 00:24:53,691
And the problem is you have to maintain them somehow.

382
00:24:53,691 --> 00:24:55,291
You need to make sure that you version them correctly.

383
00:24:55,291 --> 00:24:56,292
You need to make sure that...

384
00:24:56,672 --> 00:25:00,772
Even two years into a project, you can open something from the beginning of the project

385
00:25:00,772 --> 00:25:05,253
and you're still able to sort of work with that, although the tool might have changed

386
00:25:05,253 --> 00:25:05,994
20 times in between.

387
00:25:05,994 --> 00:25:10,134
So for us, it means an improved standardized HDA management that we're now operating on

388
00:25:10,134 --> 00:25:16,716
and making sure that everything is namespace and everything is properly sort of distributed

389
00:25:16,716 --> 00:25:17,336
within the artist.

390
00:25:17,336 --> 00:25:19,777
So you will never actually lose any type of version of a tool.

391
00:25:19,777 --> 00:25:24,297
You will always be able to rerun something that you did in the past, especially for long

392
00:25:24,297 --> 00:25:24,838
production cycles.

393
00:25:24,838 --> 00:25:25,978
So it's very crucial.

394
00:25:26,158 --> 00:25:30,341
And also what is important that you're making tools that you can fully automate and you just run them,

395
00:25:30,341 --> 00:25:33,624
but actually use exactly the same tool if you would do it manually.

396
00:25:33,624 --> 00:25:37,527
So there aren't actually any differences in them and that will really, that is very flexible then

397
00:25:37,527 --> 00:25:42,090
for you to say, hey, actually this is automated really nice, but then I go in and tweak it and

398
00:25:42,090 --> 00:25:46,073
do something different to it in the places where you need it, those 10% of the cases where you

399
00:25:46,073 --> 00:25:48,815
kind of need to do something with it. But as long as they have the same backend,

400
00:25:48,815 --> 00:25:50,817
everything should be consistent and that is quite important.

401
00:25:51,625 --> 00:25:53,807
Now performance and testing is almost the biggest aspect of it.

402
00:25:53,807 --> 00:25:58,790
We had no automated testing of functionality so it was really like you

403
00:25:58,790 --> 00:26:01,352
put something in the level, run around, you shoot it a bunch of times and you

404
00:26:01,352 --> 00:26:04,935
see if it works and that's kind of nice. But then something changes in the

405
00:26:04,935 --> 00:26:07,937
engine, the backend changes, something's being optimized and all of a sudden you

406
00:26:07,937 --> 00:26:11,379
have to kind of retest and that is very dangerous because you will always forget

407
00:26:11,379 --> 00:26:15,021
something to test and the effort is quite big. So you will

408
00:26:15,021 --> 00:26:17,863
have a potential regression over time and that is something that needs to be

409
00:26:17,863 --> 00:26:18,324
improved.

410
00:26:19,064 --> 00:26:21,348
to make sure that we don't run into this kind of problem.

411
00:26:21,348 --> 00:26:24,332
The second part is performance testing.

412
00:26:24,332 --> 00:26:25,714
So we don't have any tangible metrics.

413
00:26:25,714 --> 00:26:28,919
Like what do you, it's like, you know, you can't really go by FPS.

414
00:26:28,919 --> 00:26:31,342
It's not as easy as that or like millisecond spend on calculation

415
00:26:31,342 --> 00:26:33,646
because it's not a thing that you constantly do in every frame.

416
00:26:34,186 --> 00:26:38,812
So you can optimize for a specific scenario, but it doesn't really cover what everything is.

417
00:26:38,812 --> 00:26:42,516
So quite often performance issues only flare up when they were spotted.

418
00:26:42,516 --> 00:26:46,541
It has to do with, well, we make the props breakable and then they're being put into the level.

419
00:26:46,541 --> 00:26:49,424
And sometimes the props are so nice, they're being put into the level a lot.

420
00:26:49,424 --> 00:26:51,607
And all of a sudden you end up with areas that have...

421
00:26:53,129 --> 00:26:59,876
Sort of lots of props, desks, computers placed and then, well, someone in gameplay adds a bunch of enemies that throw grenades and then you earn a pickle.

422
00:26:59,876 --> 00:27:06,803
But you don't want to actually make everything break a little bit less nice just because of that. So somehow you need to find a way how to deal with this.

423
00:27:07,043 --> 00:27:10,587
Especially then that you can only react to the full picture very late in the project.

424
00:27:10,587 --> 00:27:15,573
And the two things that we kind of can do about this maybe is better performance metrics.

425
00:27:15,573 --> 00:27:19,137
So be able to sort of, even if it's magic numbers, something that falls out of the system

426
00:27:19,137 --> 00:27:22,802
that gives you some number, which means if it's bigger, it's worse, if it's lower, it's

427
00:27:22,802 --> 00:27:22,942
better.

428
00:27:22,942 --> 00:27:26,226
You can then start optimizing against that kind of stuff.

429
00:27:26,835 --> 00:27:31,861
And also to use those magic numbers to establish production boundaries, sort of like physics bandwidth.

430
00:27:31,861 --> 00:27:35,125
Because saying, oh, it's 200 rigid bodies is too coarse.

431
00:27:35,125 --> 00:27:37,908
It doesn't necessarily mean it's bad if you have more than 200.

432
00:27:37,908 --> 00:27:40,852
It's only bad if you have more than 200 and three hand grenades.

433
00:27:40,852 --> 00:27:44,456
And that's that kind of stuff is something that needs to be balanced out correctly.

434
00:27:44,456 --> 00:27:47,740
But if you have that kind of metrics, you can push the boundaries a little bit more.

435
00:27:48,204 --> 00:27:52,107
And the second part is automated testing that will help with that as well, and an automated

436
00:27:52,107 --> 00:27:56,710
assessment of assets through a testing environment, so you can diff outputs and see the impact

437
00:27:56,710 --> 00:27:57,870
of engine changes.

438
00:27:57,870 --> 00:28:01,393
Another thing that can be done is just performance-issue countermeasures.

439
00:28:01,393 --> 00:28:04,835
So maybe something that can adjust the physics performance at runtime, and obviously you

440
00:28:04,835 --> 00:28:08,237
can't change those distraction hierarchies necessarily, but you could say, hey, maybe

441
00:28:08,237 --> 00:28:11,980
this guy goes from breaking into level two straight into breaking into particles and

442
00:28:11,980 --> 00:28:16,142
despawn, and not into another level, because oh my god, mayhem is already happening, hand

443
00:28:16,142 --> 00:28:16,803
grenades everywhere.

444
00:28:17,243 --> 00:28:19,684
And so that's one part of it.

445
00:28:19,684 --> 00:28:25,207
But for that, actually, it would be good to actually have better physics performance metrics.

446
00:28:25,207 --> 00:28:28,909
Because right now it's very hard to get that kind of information really out of physics, for example.

447
00:28:28,909 --> 00:28:32,791
And then the second part, well, zoning of areas based on expected and load.

448
00:28:32,791 --> 00:28:36,053
That's an idea sort of to say, hey, you know, you might not have known that in the beginning.

449
00:28:36,053 --> 00:28:38,714
But now we have an area with lots of really awesome breakable props.

450
00:28:38,714 --> 00:28:40,015
And we have guys and hand grenades.

451
00:28:40,015 --> 00:28:42,076
And what do we like? Enemies and hand grenades. What do we do?

452
00:28:42,396 --> 00:28:46,440
And maybe you could put a box around this and say, hey, in here, you know, heavy load physics,

453
00:28:46,440 --> 00:28:49,443
maybe, you know, ignore the last level of destruction hierarchy or stuff like that.

454
00:28:49,443 --> 00:28:54,948
And that would sort of help us to manually zone certain things where we know things could get bad,

455
00:28:54,948 --> 00:29:02,235
to avoid having to downgrade all the assets for the entire game just because of a certain area.

456
00:29:02,235 --> 00:29:04,317
And that could be another thing that could be done about this.

457
00:29:05,525 --> 00:29:07,445
Well, to a conclusion to come to the end,

458
00:29:07,445 --> 00:29:10,806
while controls reception was very well,

459
00:29:10,806 --> 00:29:12,307
it has generally been quite liked

460
00:29:12,307 --> 00:29:13,807
and especially been quite liked

461
00:29:13,807 --> 00:29:14,948
for its destructive environments

462
00:29:14,948 --> 00:29:17,949
and for the feel of launching an object

463
00:29:17,949 --> 00:29:19,629
into a bunch of desks and enemies

464
00:29:19,629 --> 00:29:20,669
and have everything go to bits.

465
00:29:20,669 --> 00:29:25,171
So I think we are quite happy that we achieved this.

466
00:29:25,171 --> 00:29:27,451
The workflow held up better than expected almost.

467
00:29:27,451 --> 00:29:29,812
So it went really, really well

468
00:29:29,812 --> 00:29:31,633
considering the small team that we had.

469
00:29:32,093 --> 00:29:38,559
And we are quite happy that this actually worked and we are quite inspired and excited to see where we can take this one next.

470
00:29:38,559 --> 00:29:47,768
And what remains for me to say is thank you to Matti Hemmellein who did the greater part of the destruction work for the destruction tool and all that kind of stuff.

471
00:29:47,768 --> 00:29:53,654
And then Sami Hakkarainen on the NorthLight side doing all the physics programming and Daniel Forsberg for the particles and also the render side.

472
00:29:53,654 --> 00:29:55,476
But also the entire VFX department.

473
00:29:55,576 --> 00:30:00,739
remedy that sort of obviously partook in all the different moving parts of control and

474
00:30:00,739 --> 00:30:01,979
made it what it is today.

475
00:30:01,979 --> 00:30:05,121
So thank you to them and thank you for tuning in.

