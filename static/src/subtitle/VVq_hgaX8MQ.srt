1
00:00:07,038 --> 00:00:12,540
Hello everyone, thanks for coming. I'm super IP to be here today and I'm very happy that you

2
00:00:12,580 --> 00:00:18,303
are all here because else it would be a bit weird for me to be here right now. Um before we

3
00:00:18,343 --> 00:00:25,666
start, shocking announcement, I need to request that you silence your cell phones because you

4
00:00:25,686 --> 00:00:30,488
don't want to be that guy and um I need to remind you to fill in the survey that you'll

5
00:00:30,528 --> 00:00:36,610
receive at the end of this talk. Now that this is done and out of the way, I'm going to

6
00:00:37,457 --> 00:00:39,478
It's my pleasure to present to you today

7
00:00:39,739 --> 00:00:42,440
Assassin's Creed Origin, monitoring and validation

8
00:00:42,960 --> 00:00:43,901
of world design data.

9
00:00:45,182 --> 00:00:47,223
But this talk could also have been called

10
00:00:47,823 --> 00:00:49,344
how I got to listen to more music

11
00:00:49,804 --> 00:00:50,725
while developing this game.

12
00:00:53,507 --> 00:00:56,268
I'm Nicolas Routier, I'm a design technical director

13
00:00:56,328 --> 00:00:57,369
at Ubisoft Montreal.

14
00:00:58,029 --> 00:00:59,590
I've been there for 15 years now.

15
00:01:00,230 --> 00:01:01,331
I've worked on several brands,

16
00:01:01,631 --> 00:01:03,812
including Far Cry and Prince of Persia.

17
00:01:04,844 --> 00:01:06,184
But for the last seven years, I've

18
00:01:06,204 --> 00:01:07,685
been on the Assassin's Creed brand,

19
00:01:07,705 --> 00:01:11,086
where I ship Assassin's Creed Revelation, AC4 Black Flag,

20
00:01:11,686 --> 00:01:14,146
and lately, Assassin's Creed Origins, which

21
00:01:14,186 --> 00:01:16,907
I'll refer from now on as ACO.

22
00:01:18,787 --> 00:01:21,108
So as a technical director in Montreal,

23
00:01:21,828 --> 00:01:25,469
I get to work with the content creators, the world designers,

24
00:01:25,509 --> 00:01:29,550
the level artists, and with the tools, engine, and gameplay

25
00:01:29,590 --> 00:01:31,370
programmers to create the.

26
00:01:32,614 --> 00:01:35,755
world creation pipeline that we'll use to create our game world.

27
00:01:37,035 --> 00:01:42,396
I'm also the person that programmers and content creators will come to see when something

28
00:01:42,436 --> 00:01:42,696
breaks.

29
00:01:44,157 --> 00:01:48,258
So you can imagine that I don't get much time to listen to music because I'm always being

30
00:01:48,298 --> 00:01:49,698
interrupted throughout the day.

31
00:01:50,938 --> 00:01:51,918
But enough about me.

32
00:01:52,398 --> 00:01:53,299
Why are we here today?

33
00:01:55,039 --> 00:01:58,400
Well we're here because on ACO we were faced with a problem.

34
00:01:58,900 --> 00:02:00,880
Or should I say a challenge.

35
00:02:01,716 --> 00:02:02,676
or an opportunity.

36
00:02:04,357 --> 00:02:06,799
This problem was created by the world

37
00:02:07,059 --> 00:02:09,500
that we're trying to make, the scope of the game

38
00:02:09,540 --> 00:02:12,701
that we're trying to make, and all the data that

39
00:02:12,721 --> 00:02:14,823
goes into that world to create this game.

40
00:02:16,203 --> 00:02:18,204
How do we test all of that data?

41
00:02:19,065 --> 00:02:22,206
How do we make sure that everything is fine and tested?

42
00:02:24,007 --> 00:02:25,168
So we're here today because.

43
00:02:26,678 --> 00:02:28,959
I want to share with you a solution that the ACO team,

44
00:02:29,059 --> 00:02:31,520
it's not only me, there's a lot of people involved in this,

45
00:02:32,400 --> 00:02:34,440
developed to tackle this challenge.

46
00:02:35,281 --> 00:02:37,201
I think there is something in that you can bring back

47
00:02:37,261 --> 00:02:40,662
to your production, no matter the size of the game

48
00:02:41,102 --> 00:02:42,402
or the type of game that you're making.

49
00:02:43,563 --> 00:02:46,043
We'll then talk about the impact that this solution add

50
00:02:46,643 --> 00:02:47,403
on the production of our game.

51
00:02:51,879 --> 00:02:54,081
As I said, the problem starts with the game

52
00:02:54,101 --> 00:02:54,822
that we're trying to make.

53
00:02:55,382 --> 00:02:57,244
So who here played ACO?

54
00:02:59,565 --> 00:02:59,786
Cool.

55
00:03:00,266 --> 00:03:00,566
Thank you.

56
00:03:01,427 --> 00:03:03,369
So for those of you who don't know what ACO is,

57
00:03:05,791 --> 00:03:09,153
it's a massive open world game set in ancient Egypt,

58
00:03:09,233 --> 00:03:11,715
where the player can explore tombs and pyramids

59
00:03:12,236 --> 00:03:15,839
and the full country of Egypt, from the tombs of Giza.

60
00:03:16,932 --> 00:03:20,913
to the beautiful, lush Nile Delta region with its farm

61
00:03:21,073 --> 00:03:23,014
and its fields and its dangerous animals,

62
00:03:23,834 --> 00:03:26,455
to the beautiful cities of Alexandria and Memphis.

63
00:03:27,935 --> 00:03:30,396
All of this world is filled with persistent,

64
00:03:30,836 --> 00:03:32,577
a new persistent AI system.

65
00:03:33,937 --> 00:03:36,378
So as you can imagine, developing a game like this

66
00:03:36,618 --> 00:03:39,078
requires the work of hundreds of developers.

67
00:03:39,859 --> 00:03:41,479
Hundreds of developers that create

68
00:03:41,519 --> 00:03:43,760
an insane amount of data every day.

69
00:03:44,937 --> 00:03:46,959
And they make this data using new tech

70
00:03:47,419 --> 00:03:49,560
that we develop during the production of this game.

71
00:03:50,061 --> 00:03:52,903
So as you can imagine, developing game data

72
00:03:53,363 --> 00:03:55,945
and new tech at the same time brings its own challenge.

73
00:03:57,266 --> 00:03:59,667
We also use procedural to create much of the game world.

74
00:04:00,548 --> 00:04:02,029
So because of all these moving parts,

75
00:04:03,550 --> 00:04:05,291
a lot of stuff can break often.

76
00:04:06,132 --> 00:04:07,452
And that's the problem we're trying to solve.

77
00:04:08,013 --> 00:04:09,514
We need to know when things break.

78
00:04:10,835 --> 00:04:13,416
So before to dig into the solution that we've developed,

79
00:04:14,395 --> 00:04:17,677
I'll explain how we build things and how we break them.

80
00:04:19,398 --> 00:04:21,760
So here is a small village from Egypt

81
00:04:21,820 --> 00:04:24,702
with tons of debug data being drawn.

82
00:04:26,584 --> 00:04:27,144
Let's build this.

83
00:04:27,364 --> 00:04:29,326
So first, what we would do is a world designer

84
00:04:29,346 --> 00:04:30,987
would come in and start placing buildings.

85
00:04:31,527 --> 00:04:32,928
And then he would place ladders so

86
00:04:32,948 --> 00:04:35,530
that the NPCs can go up on those buildings and the players

87
00:04:35,550 --> 00:04:35,830
as well.

88
00:04:36,691 --> 00:04:39,333
We'd then place a trajectory all around the location

89
00:04:39,573 --> 00:04:41,855
to tell the procedural system not to place

90
00:04:41,955 --> 00:04:43,536
any trees inside this location.

91
00:04:44,632 --> 00:04:48,294
We'll then create another trajectory to tell the system

92
00:04:48,514 --> 00:04:50,416
to create a road going through this village.

93
00:04:52,737 --> 00:04:54,899
And then it will continue placing gameplay ingredients

94
00:04:54,939 --> 00:04:57,080
like the zip lines so that the player can move freely

95
00:04:57,140 --> 00:04:57,921
through the environment.

96
00:04:58,581 --> 00:05:00,803
And an artist will come in, start placing vegetation,

97
00:05:00,963 --> 00:05:04,685
trees, bushes, and then we'll place A stacks

98
00:05:04,725 --> 00:05:07,227
and other gameplay ingredient, light sources, collectibles,

99
00:05:07,747 --> 00:05:09,789
and then we'll place all the necessary data

100
00:05:10,549 --> 00:05:12,631
for the AI to use this village.

101
00:05:13,964 --> 00:05:18,567
So at the end it's a big mess. So, how can we break these

102
00:05:18,607 --> 00:05:22,250
things? I'll give three examples. First example is about

103
00:05:22,270 --> 00:05:28,836
the zip line. So the zip line is a fairly simple ingredient. The

104
00:05:28,856 --> 00:05:31,978
player jumps on the rope, slides down the rope, ends up at the

105
00:05:32,018 --> 00:05:38,164
target position. So let's break this. It's the same set up from

106
00:05:38,204 --> 00:05:40,966
a side view. You can see the rope between the two posts.

107
00:05:42,378 --> 00:05:46,141
So let's suppose that a level designer or a level artist

108
00:05:46,862 --> 00:05:50,805
or procedural system places a tree in the middle of the row

109
00:05:51,666 --> 00:05:51,986
right here.

110
00:05:54,628 --> 00:05:56,710
Well, now we have a problem because the player won't

111
00:05:56,750 --> 00:06:00,053
be able to reach the intended destination.

112
00:06:00,453 --> 00:06:01,134
So that's a problem.

113
00:06:01,614 --> 00:06:02,095
This is broken.

114
00:06:05,955 --> 00:06:10,937
What if for level design direction reason or art direction reason we want to make this feel more

115
00:06:11,017 --> 00:06:18,520
epic or we want to allow the player to steer across the river? Well, by doing this, the angle

116
00:06:18,560 --> 00:06:23,521
of the rope is too high now. So the animation system, the player behavior won't be as fluid,

117
00:06:23,801 --> 00:06:29,343
will be glitches, it will impact the player experience. We don't want that. That's a problem.

118
00:06:32,668 --> 00:06:37,631
The next example is about our meta AI system, the persistent AI system I talked about at the

119
00:06:37,651 --> 00:06:45,294
beginning. Uh the meta AI system is a system that tells every NPC of the game what it should be

120
00:06:45,334 --> 00:06:51,137
doing right now. So every NPC has its own schedule. When does it wake, wake, wake up? Go to

121
00:06:51,177 --> 00:06:57,480
work, eat, socialize, and go back to sleep. Every NPC has its own uh schedule, so guards has a

122
00:06:57,500 --> 00:07:01,462
schedule. So when you destroy the town you get a reward if you have all the orbs. When you

123
00:07:01,873 --> 00:07:04,034
They wake up, they go patrol, they go back to eat,

124
00:07:04,054 --> 00:07:04,614
they go to sleep.

125
00:07:04,975 --> 00:07:07,096
Farmers will go work the farmland instead.

126
00:07:07,516 --> 00:07:08,156
You get the idea.

127
00:07:09,797 --> 00:07:12,579
So when the Meta-AI system tells an NPC

128
00:07:12,619 --> 00:07:14,140
what it should be doing, it will also tell it

129
00:07:14,340 --> 00:07:16,001
where it should be performing that action.

130
00:07:16,121 --> 00:07:18,863
And the where information is in the AI network.

131
00:07:19,983 --> 00:07:22,024
The AI network is a high-level representation

132
00:07:22,325 --> 00:07:22,925
of the game world.

133
00:07:23,105 --> 00:07:26,907
It's made by and by-level designers inside the game engine.

134
00:07:28,594 --> 00:07:33,218
um it's a collection of nodes and edges that are linked around the the world and this is

135
00:07:33,338 --> 00:07:39,264
what allows us to um have NPCs travel throughout the world even though the player is not there

136
00:07:39,484 --> 00:07:45,749
because this is always in memory. So once an NPC is near the player it will still use the AI

137
00:07:45,769 --> 00:07:51,574
network to move around so targeting nodes but it will use the nav mesh to move from nodes to

138
00:07:53,104 --> 00:07:59,409
that's a very eye level view and super fast overview of this system. Um, if you want to know

139
00:07:59,469 --> 00:08:05,594
more, you're in luck because this is GDC and Mr. Shalala5 over here will be talking about

140
00:08:05,634 --> 00:08:12,640
this whole system tomorrow, um, at ten, ten AM, so tonight no parties. You have a class to

141
00:08:12,700 --> 00:08:19,566
attend. Um, so we will explain the whole meta AI system. So let's take a look at that AI

142
00:08:19,586 --> 00:08:22,428
network. This is a RAM part. So this is a RAM part. This is a memory part. So this is a RAM

143
00:08:23,014 --> 00:08:32,004
in a fort in Egypt. So you can see here the nodes and edges highlighted in yellow. So if we

144
00:08:32,024 --> 00:08:38,090
suppose there's a guard that can spawn inside of this rampart. Suppose it wants to reach one of

145
00:08:38,150 --> 00:08:43,636
the pink nodes up in the rampart. So one of this potential position. Uh how you will

146
00:08:44,935 --> 00:08:50,099
get to there, it will start by using the AI network edge that is on the ladder to go up and

147
00:08:50,139 --> 00:08:57,726
then it will be able to reach one of the guard position. So if the player comes in, the

148
00:08:57,746 --> 00:09:01,429
MetEye system will go, alright, let's fight the player and it will take one of the guard and

149
00:09:01,469 --> 00:09:07,394
say use the ballista to fight the player. So the ballista here, the uh, basically a turret that

150
00:09:07,414 --> 00:09:12,939
the, the NPCs can use. So the NPC will be able to pathfind to these nodes and fight the

151
00:09:12,959 --> 00:09:13,299
player off.

152
00:09:14,451 --> 00:09:19,793
when night comes the system will tell alright time to go to sleep and the NPCs will be able to

153
00:09:19,894 --> 00:09:25,936
use the network to reach their sleeping positions. All of these nodes as mentioned needs to be

154
00:09:26,136 --> 00:09:31,499
on nav mesh. So here we can see in green all of our nav mesh for this location and so all the

155
00:09:31,559 --> 00:09:38,522
nodes are above valid nav mesh. This is what allows the NPCs to path find from nodes to

156
00:09:44,229 --> 00:09:46,270
So, let's break this now.

157
00:09:48,371 --> 00:09:50,912
Suppose that the level designer or level artist

158
00:09:50,952 --> 00:09:55,314
for level art dressing pass or to add cover information

159
00:09:55,334 --> 00:09:56,895
for the player, cover objects,

160
00:09:57,255 --> 00:09:59,696
add two shield props here right here on this ramp part.

161
00:09:59,876 --> 00:10:02,337
Well, when they added these things

162
00:10:02,977 --> 00:10:04,138
and we generate nav mesh,

163
00:10:05,258 --> 00:10:06,399
what might happen is that

164
00:10:06,899 --> 00:10:08,800
an AI network node might be off nav mesh.

165
00:10:10,775 --> 00:10:16,581
So this is pretty bad because if an NPC tries to reach that node, you'll never be able to

166
00:10:16,701 --> 00:10:23,989
because there's no nav mesh leading to that node. So in this case, who broke the system? It's

167
00:10:24,009 --> 00:10:30,436
whoever pray- placed the, the shield prop. So it could be a designer or an artist. Um,

168
00:10:31,635 --> 00:10:36,458
But maybe the artist or designer that did place that shield there did his work correctly

169
00:10:36,498 --> 00:10:44,983
and it did generate navmesh and made sure that the node was still above navmesh. But perhaps a

170
00:10:45,023 --> 00:10:51,287
prop modeler in another studio received a bug about this shield prop saying that there is a

171
00:10:51,347 --> 00:10:57,851
navigation problem for the player in a certain, when you collide with it in a certain way. Um,

172
00:10:58,578 --> 00:11:00,859
So he fixes the collision, checks it in,

173
00:11:01,619 --> 00:11:03,180
make sure it's fine, it works well.

174
00:11:03,720 --> 00:11:05,460
It doesn't create any problem for dislocation

175
00:11:05,500 --> 00:11:06,140
he's been assigned to.

176
00:11:06,680 --> 00:11:08,201
But this shield is being used everywhere

177
00:11:08,301 --> 00:11:08,861
throughout the game.

178
00:11:09,481 --> 00:11:11,202
So now, next time we generate NavMesh,

179
00:11:11,622 --> 00:11:12,562
we have the same problem.

180
00:11:13,182 --> 00:11:14,182
So who broke it this time?

181
00:11:14,823 --> 00:11:17,443
It's a prop modeler by fixing a bug.

182
00:11:22,765 --> 00:11:25,325
Now, another way we can break this is,

183
00:11:26,645 --> 00:11:31,406
Let's suppose an engine programmer changes or updates the fixes fix a bug in the nav mesh

184
00:11:31,426 --> 00:11:36,547
generation system and we end up with no more nav mesh in every slope of the game. Or every

185
00:11:36,628 --> 00:11:42,129
stair flag a certain way. Well now we have no path find no valid path on the nav mesh

186
00:11:42,189 --> 00:11:46,470
between those nodes. So once again, no one will be able to lose use these ballistas and no

187
00:11:46,530 --> 00:11:53,792
one will be able to go to sleep. So who broke up this time? The engine programmer. The last

188
00:11:53,852 --> 00:11:55,573
example is about our procedural placement.

189
00:11:57,020 --> 00:11:59,401
To replace our asset, we use Udini Engine.

190
00:12:00,042 --> 00:12:05,605
And what we use it for was placing vegetation,

191
00:12:05,845 --> 00:12:08,727
creating roads, and placing cliffs.

192
00:12:09,587 --> 00:12:12,009
The next example would be about vegetation and roads.

193
00:12:13,750 --> 00:12:16,971
So as we said earlier, to create roads,

194
00:12:17,292 --> 00:12:19,273
the artist or designer can simply

195
00:12:19,453 --> 00:12:20,634
place a spline through the world.

196
00:12:21,374 --> 00:12:23,255
It will create a road, and it will make sure

197
00:12:23,275 --> 00:12:25,456
that vegetation is placed next to the road.

198
00:12:26,602 --> 00:12:32,469
and this result in beautiful navmesh that the NPCs can freely use. But as we develop the

199
00:12:32,509 --> 00:12:38,797
system, um, it would happen sometime that trees would end up in the wrong location. So this is

200
00:12:38,837 --> 00:12:43,122
pretty bad because of course then we generate navmesh and we have holes.

201
00:12:44,900 --> 00:12:50,023
on the in the navmesh because of the tree trunks and so it's bad for AI network because no

202
00:12:50,063 --> 00:12:55,086
navmesh is not good for AI network uh and so no one can use this road now. No one can reach

203
00:12:55,286 --> 00:13:00,229
their their location. So once again this is broken. Who broke it this time? Could be the tech

204
00:13:00,289 --> 00:13:08,314
artist that tweak the Udini rule um to place trees. But it could also be a code error. Maybe

205
00:13:08,334 --> 00:13:09,315
it's a build machine that uh

206
00:13:09,802 --> 00:13:14,145
didn't load in the right order all the data that was required to process and build the

207
00:13:14,185 --> 00:13:20,649
procedural content. So it ended up having trees on the road. And this sometime also

208
00:13:20,689 --> 00:13:29,275
happened with rocks. And so in this case this would be very broken. So to recap who breaks

209
00:13:29,336 --> 00:13:35,520
things, well it can be content creators as they create their location initially or as they

210
00:13:35,600 --> 00:13:38,542
iterate on them or fix bugs. It can be programmer.

211
00:13:39,922 --> 00:13:47,024
it can be the push it all system. So the answer to who break things is everyone. All the time.

212
00:13:47,564 --> 00:13:55,927
For a lot of different reasons. So this is why we need a system to track all of that. We don't

213
00:13:55,967 --> 00:14:02,429
want to everyday run into these problems. We want something to find these problems. So

214
00:14:02,509 --> 00:14:07,270
usually how would we go around to solve this problem? Well we would give everyone a

215
00:14:07,650 --> 00:14:08,030
checklist.

216
00:14:08,928 --> 00:14:12,992
that they need to run through every time they do task X.

217
00:14:14,113 --> 00:14:15,375
Verify this, this, this, and that.

218
00:14:15,575 --> 00:14:18,297
And once you're happy, we're done with the checklist,

219
00:14:18,858 --> 00:14:20,980
we check it in, and then we rely on human testing.

220
00:14:21,320 --> 00:14:24,723
We tell the designers, the artists, and QA people

221
00:14:24,783 --> 00:14:27,066
to test everything in the location,

222
00:14:27,106 --> 00:14:28,227
make sure everything is fine,

223
00:14:28,267 --> 00:14:30,229
play every quest that can be in that location,

224
00:14:30,269 --> 00:14:31,810
and make sure that they work.

225
00:14:33,167 --> 00:14:37,710
And once we know that everything works, we'll lock the data and make sure that no one

226
00:14:37,770 --> 00:14:45,134
touches it again because we know it's fine and we'll ship it. Problem is, this is the

227
00:14:45,154 --> 00:14:52,939
village we saw earlier. It's just one of the 500 locations we have in the game. It's this

228
00:14:53,039 --> 00:15:00,704
tiny dot over here and these are all the locations that we have in the game. To give you an

229
00:15:00,724 --> 00:15:02,585
idea of the size of this world, we have a lot of data in this world. We have a lot of

230
00:15:03,508 --> 00:15:08,170
This is London from Assassin's Creed Syndicate, so it's about 12 square kilometer, it was

231
00:15:08,530 --> 00:15:16,692
quite a large city. But it's just 10 percent of Assassin's Creed origins. Uh, Egypt is over

232
00:15:18,313 --> 00:15:25,715
120 square kilometers. So because of the scale and the complexity of our data, it's very

233
00:15:25,835 --> 00:15:31,516
challenging to have complete coverage using our traditional testing methods. So we add to

234
00:15:31,576 --> 00:15:32,777
make our methods evolve.

235
00:15:34,973 --> 00:15:48,315
needed a solution to help us tackle this huge problem. So, let's talk about that. Sorry. So, in

236
00:15:48,355 --> 00:15:55,556
a nutshell, it's daily automated testing of world design data. Keywords being daily and

237
00:15:55,696 --> 00:16:02,097
automated. So everyday, we have a set of input that are being fed into a data, data

238
00:16:02,117 --> 00:16:03,998
analysis system which perform.

239
00:16:04,889 --> 00:16:11,877
an array of tests. And then we output all the information necessary to understand, find, and

240
00:16:11,957 --> 00:16:20,567
fix these errors. It sounds very simple, and it is, conceptually, uh but for us it was a game

241
00:16:20,627 --> 00:16:26,133
changer. So let's talk about these inputs. So, uh, so, so, so, so, so, so, so, so, so, so, so, so, so, so,

242
00:16:27,138 --> 00:16:28,218
First, there's the world data.

243
00:16:28,679 --> 00:16:31,160
This includes all the end place data.

244
00:16:31,240 --> 00:16:33,341
So that's the buildings and the trees

245
00:16:33,381 --> 00:16:35,162
that the artist and designer place in the game.

246
00:16:35,722 --> 00:16:37,784
That's the chests that the designer place in

247
00:16:37,804 --> 00:16:38,844
so that the player can loot stuff.

248
00:16:39,304 --> 00:16:43,447
The ladders, all the interaction items that the game features.

249
00:16:44,747 --> 00:16:46,168
We then have the procedural content,

250
00:16:46,228 --> 00:16:47,929
which is being built by Build Machine

251
00:16:47,989 --> 00:16:49,210
and checked into the data.

252
00:16:49,930 --> 00:16:51,831
And the nav mesh as well, which is also

253
00:16:51,891 --> 00:16:55,213
being built by Build Machine and checked into the world data.

254
00:16:57,138 --> 00:16:57,899
We don't have code.

255
00:17:00,041 --> 00:17:03,964
It's weird to say that code is an input, but basically the

256
00:17:04,004 --> 00:17:06,386
point is that we always need to test with the latest code.

257
00:17:07,127 --> 00:17:08,888
Because what if gameplay code changes?

258
00:17:09,569 --> 00:17:13,552
What if, for animation reason, a gameplay programmer needs to

259
00:17:13,612 --> 00:17:15,954
change the angle threshold that we can't tolerate?

260
00:17:15,974 --> 00:17:17,856
This is the point to be at.

261
00:17:19,437 --> 00:17:19,617
Well.

262
00:17:20,610 --> 00:17:24,973
it could be that because of that new animation we need to lower the threshold and so

263
00:17:25,294 --> 00:17:29,136
zip lines that were placed in the world and that were valid are now invalid because of that

264
00:17:29,176 --> 00:17:35,000
new code. If that happens, we need to find out. And once again, if we change the engine code,

265
00:17:35,120 --> 00:17:40,584
if we change the way NPCs path find through the world, well, now we could also break

266
00:17:40,624 --> 00:17:45,747
something that used to work, an NPC that was able to reach a location can no longer reach a

267
00:17:45,807 --> 00:17:49,970
location because of a code change. So we need to know when this happens.

268
00:17:51,749 --> 00:17:54,790
Lastly, we have our game design intentions.

269
00:17:55,250 --> 00:17:56,870
And the keyword here is intention.

270
00:17:57,871 --> 00:17:59,931
Basically, it's an Excel file listing

271
00:18:00,131 --> 00:18:01,211
all the location of the game.

272
00:18:01,772 --> 00:18:03,852
And for every location, we say, what

273
00:18:03,892 --> 00:18:05,032
is the type of the location?

274
00:18:05,493 --> 00:18:07,073
What should the player be able to do there?

275
00:18:07,533 --> 00:18:09,754
Can the player fast travel to this location?

276
00:18:09,914 --> 00:18:11,294
What is the type of loot that we can find?

277
00:18:11,954 --> 00:18:13,134
So on.

278
00:18:13,254 --> 00:18:15,715
This is the level design director

279
00:18:16,295 --> 00:18:17,436
fills in this information.

280
00:18:17,616 --> 00:18:19,976
And this is what we expect the designers

281
00:18:20,036 --> 00:18:21,377
to put in every location.

282
00:18:25,573 --> 00:18:32,538
that's it for our inputs. When we have all of that data we feed it in our data analysis

283
00:18:32,578 --> 00:18:39,202
system. This is simply a collection of automated tests uh that run on all that data. Uh but

284
00:18:39,282 --> 00:18:43,225
before talking about these tests and giving you examples about them I want to talk about how

285
00:18:43,285 --> 00:18:49,249
we write those tests because it's really a cornerstone of uh our entire effort. And that's

286
00:18:49,289 --> 00:18:53,271
anvil script. Anvil script is a feature that we have in our

287
00:18:54,391 --> 00:19:00,134
uh, game editor tools, which are, which is called Anvil. Uh, it's basically C sharp script, um,

288
00:19:00,614 --> 00:19:07,557
that run inside the game editor. And using these scripts, we can query every piece of data in

289
00:19:07,577 --> 00:19:13,420
the game. I can access a chest object and know what is the loot inside the chest. What is the

290
00:19:13,580 --> 00:19:18,522
mesh of the chest? Where is it in the world? What is its recurrent rotation? And so on.

291
00:19:19,792 --> 00:19:25,034
and I also have access to all editor features and most game engine features. So we can do

292
00:19:25,094 --> 00:19:30,536
raycast to query the collision information of the world, we can do shapecast, we can do uh

293
00:19:31,336 --> 00:19:34,938
pathfinding test on the AI network to know to make sure that people can reach their

294
00:19:34,978 --> 00:19:35,418
locations.

295
00:19:37,544 --> 00:19:43,606
this is some code because it's cool to have a code slide. Um so here we're simply going

296
00:19:43,626 --> 00:19:49,408
through a list of location looking for for stuff. Uh we'll talk about that later on. Um these

297
00:19:49,428 --> 00:19:56,830
level scripts were written by TDs like myself and my colleagues. So uh we have 3 broad

298
00:19:56,871 --> 00:20:02,192
categories of tests and these includes placement metric tests, AI network tests and

299
00:20:02,232 --> 00:20:03,053
location tests.

300
00:20:05,062 --> 00:20:11,164
For every test, um, we have a checklist basically for every type of test. Uh, and these tests

301
00:20:11,244 --> 00:20:19,768
are objective tests. It's either true, false, pass or fail. Zero, one. Um, every item, every

302
00:20:19,848 --> 00:20:24,250
object has its own list of tests and guess what? Computers are really good at this type of

303
00:20:24,291 --> 00:20:27,852
test. So, we decided to use them. So, let's take a few examples. First, about placement

304
00:20:28,272 --> 00:20:31,594
metrics. So, let's take a few examples. So, let's take a few examples. First, about placement

305
00:20:32,655 --> 00:20:37,902
So this is our friend the zip line from earlier. Um we have to make sure that nothing is in the

306
00:20:37,942 --> 00:20:42,467
way of the player right? So what we do is we make a big shape cast underneath the rope and we

307
00:20:42,507 --> 00:20:46,532
make sure there is nothing placed there underneath the rope that would block the player.

308
00:20:47,193 --> 00:20:52,520
Like a 3. So if we do find a 3, we don't want that, that's a bug, we report an error.

309
00:20:54,607 --> 00:20:56,787
Like I said, we need to validate that the angle of the rope

310
00:20:57,027 --> 00:20:58,488
is within the accepted threshold.

311
00:20:59,048 --> 00:21:00,968
So here it's fine, there it's bad.

312
00:21:01,568 --> 00:21:03,209
Super simple for a computer to do.

313
00:21:03,289 --> 00:21:06,129
Just compare two points and you get the angle

314
00:21:06,630 --> 00:21:08,710
and you report an error if there is one.

315
00:21:09,310 --> 00:21:10,451
In this case, there is one.

316
00:21:12,531 --> 00:21:14,071
So we do this type of test on.

317
00:21:16,227 --> 00:21:20,931
uh, variety of, uh, of, uh, gameplay ingredients like navigation ingredients, interaction

318
00:21:20,971 --> 00:21:25,996
ingredient and, and spawners. Uh, the type of test that we would do on the, on the chest is

319
00:21:26,056 --> 00:21:31,060
make sure that it's oriented in such a way that the player will be able to loot the object. For

320
00:21:31,080 --> 00:21:34,923
spawners, we'll make sure that there is nav mesh. If it's a boat spawner, we'll make sure that

321
00:21:35,144 --> 00:21:43,491
it's over water. Um, this type of thing. In total, we have 22 object types that we test.

322
00:21:46,362 --> 00:21:51,283
And once again, every object has its own list of tests.

323
00:21:52,123 --> 00:21:54,524
So, some of you right now might be thinking,

324
00:21:54,784 --> 00:21:56,404
there's nothing new in this.

325
00:21:57,004 --> 00:21:59,205
Like, we've been building worlds before,

326
00:21:59,685 --> 00:22:02,985
and we've been successful, so why not just, you know,

327
00:22:03,386 --> 00:22:05,146
use the same things as we did before,

328
00:22:05,166 --> 00:22:06,646
just use more testers?

329
00:22:08,026 --> 00:22:09,007
Well, let's do some math.

330
00:22:11,447 --> 00:22:12,567
There is 228 ziplines in our game.

331
00:22:16,234 --> 00:22:21,317
Let's suppose that it takes two minutes for a tester to get to

332
00:22:21,337 --> 00:22:25,600
the location, load the location first, get to it, test it a

333
00:22:25,620 --> 00:22:29,602
bunch of times, and if he finds bug, report the bugs.

334
00:22:31,143 --> 00:22:34,345
Well, this would take one tester a full day of work, so

335
00:22:34,405 --> 00:22:36,887
eight hours, just to go through all the zip lines.

336
00:22:37,607 --> 00:22:39,348
And that's once, only one time.

337
00:22:41,110 --> 00:22:42,190
Now the kicker is that

338
00:22:43,397 --> 00:22:46,058
From the previous slides, I thought there was 22 object

339
00:22:46,078 --> 00:22:47,679
types we test.

340
00:22:47,699 --> 00:22:53,142
These ends up being over 200,000 instances of

341
00:22:53,202 --> 00:22:54,983
ingredients throughout the world.

342
00:22:55,803 --> 00:22:59,385
So once again, if it's two minutes to test one instance,

343
00:23:00,305 --> 00:23:05,428
then it would take 20 testers two full months to test

344
00:23:05,488 --> 00:23:06,669
everything once.

345
00:23:07,749 --> 00:23:10,911
So that's a lot of people to test simple things.

346
00:23:11,962 --> 00:23:17,284
So forget it, it does not scale. We cannot rely on human testing. We need, we need

347
00:23:17,324 --> 00:23:29,408
automated tests. Second example is about the AI network. So as we said, we need, we, every

348
00:23:29,428 --> 00:23:32,309
uh AI network node needs to be over a valid nav mesh.

349
00:23:34,969 --> 00:23:38,511
very easy to know if they are over navmesh. We simply go

350
00:23:38,531 --> 00:23:41,012
through all the nodes and we check underneath them, cast

351
00:23:41,032 --> 00:23:44,294
array down 50 centimeters and make sure there is navmesh

352
00:23:44,334 --> 00:23:47,556
underneath the the nodes. So here, there are two nodes that

353
00:23:47,576 --> 00:23:54,599
are not over navmesh. So that's two errors that we report. We

354
00:23:54,660 --> 00:23:57,841
also need by definition, every nodes that are linked by an

355
00:23:57,961 --> 00:24:01,783
edge, there needs to be a valid path on the navmesh linking the

356
00:24:01,824 --> 00:24:02,204
two nodes.

357
00:24:03,211 --> 00:24:08,476
So in this case, we have four edges that do not have a valid

358
00:24:08,496 --> 00:24:13,400
path to reach node A to node B. So here, we have a problem.

359
00:24:14,301 --> 00:24:15,542
Four errors that we need to report.

360
00:24:19,161 --> 00:24:24,386
As we said, every NPC has a schedule. And every schedule, every action in the schedule is

361
00:24:24,527 --> 00:24:28,811
associated with a station that the designer places in the world. So, where they should be

362
00:24:28,891 --> 00:24:34,457
eating, sleeping, working. Um, so we need to make sure that when we spawn an NPC, you will be

363
00:24:34,517 --> 00:24:40,083
able to reach all these potential stations that the schedule will assign you to.

364
00:24:41,004 --> 00:24:45,666
So what we do is we take the spawner, we look at the type of unit that is in there, if it's a

365
00:24:45,706 --> 00:24:50,909
guard, we go through that schedule and we make sure that every potential station he would

366
00:24:50,949 --> 00:24:56,671
like to use is reachable from his spawner. So here in this case, if the player shows up and

367
00:24:56,691 --> 00:25:04,095
we need to tell the NPC to go use the ballista, we will tell him to go to that ballista. The

368
00:25:04,115 --> 00:25:09,438
problem is, there's no nav mesh in the stairs. So the NPC won't be able to reach that. So

369
00:25:09,478 --> 00:25:10,658
that's a bug that we need to report.

370
00:25:11,869 --> 00:25:17,433
It's super easy for a computer to do this test. It's super fast. And you can do it every day.

371
00:25:18,533 --> 00:25:25,798
But for a tester, it's not super easy to notice that when I did fight NPCs in this location, no

372
00:25:25,878 --> 00:25:31,441
one used the ballista and yesterday they they were using it. Uh if your tester are able to

373
00:25:31,521 --> 00:25:37,925
give you that information every day, keep them. They're really good. Alright and last

374
00:25:38,026 --> 00:25:39,546
example is about location tests.

375
00:25:40,756 --> 00:25:46,581
So remember the Excel file we talked about with all the intentions? Um well this is where we

376
00:25:46,641 --> 00:25:52,146
use it. This is a bandit camp in the desert. So in red around the bandit camp you see a

377
00:25:52,206 --> 00:25:57,411
trajectory that we call the footprint. Um using this footprint we know that everything that is

378
00:25:57,451 --> 00:26:02,335
placed inside belongs to that location. So everything here belongs to that bandit camp.

379
00:26:03,085 --> 00:26:08,689
So if a world designer places a chest inside that tent, inside the footprint, then we know

380
00:26:08,849 --> 00:26:15,395
that this chest belongs to this location. So we can then cross reference the information of

381
00:26:15,455 --> 00:26:21,219
the loop type that is inside the chest inside the game with what we wanted from the the

382
00:26:21,319 --> 00:26:22,320
design intention document.

383
00:26:24,005 --> 00:26:30,271
by doing that we can see that here we found we were expecting to find one high value item but

384
00:26:30,311 --> 00:26:36,737
we found zero and we were expecting to find zero rare value items but we found one. So here

385
00:26:36,797 --> 00:26:40,300
the designer simply used the wrong loot type and we can just go in and change it.

386
00:26:42,741 --> 00:26:47,324
So, these were just a few examples of a test that we do run on our data. We have much more

387
00:26:47,364 --> 00:26:51,847
tests than that. But once we have all these tests and gathered all of this, this information,

388
00:26:52,207 --> 00:26:56,570
what do we do with it? Well, we need to communicate it to people so that we can act on it. So,

389
00:26:57,170 --> 00:27:03,914
we do that through our outputs, which are, uh, Excel files, emails, and Atlas. Let's take a

390
00:27:03,954 --> 00:27:11,519
look at the Excel first. Each test that is done, uh, writes its result into an Excel file.

391
00:27:14,207 --> 00:27:19,532
the excel file contains all the information needed to understand, find and fix the errors. So

392
00:27:19,572 --> 00:27:24,517
here we can see the excel file generated while we are going through all the zip lines. So here

393
00:27:24,537 --> 00:27:31,944
in the columns you can see the name of the zip line, it's unique ID, is it valid or not? And if

394
00:27:32,004 --> 00:27:36,468
it's not valid, we have the error written in plain English saying what's wrong.

395
00:27:37,447 --> 00:27:39,529
And lastly, we have a link that, if clicked,

396
00:27:39,669 --> 00:27:43,611
will take you exactly to the location of the error

397
00:27:43,832 --> 00:27:44,572
in our game engine.

398
00:27:47,054 --> 00:27:48,074
So this is an example.

399
00:27:48,094 --> 00:27:49,255
It's quite simple.

400
00:27:49,315 --> 00:27:51,537
It's a simplification of our Excel files.

401
00:27:52,657 --> 00:27:54,619
Each test writes its own Excel file.

402
00:27:55,159 --> 00:27:57,140
But to give you an idea, the location test,

403
00:27:57,321 --> 00:28:00,723
the output, an Excel file that is over 50 columns,

404
00:28:00,783 --> 00:28:02,404
because we do a lot of different tests.

405
00:28:04,224 --> 00:28:09,086
So once we've generated our Excel files, we can then generate an email. And in our email, we

406
00:28:09,126 --> 00:28:15,549
create a summary of the information that we found during our tests. We send that email to

407
00:28:15,889 --> 00:28:21,012
everyone in the world team. So that's every world designer, every level artist, every

408
00:28:21,052 --> 00:28:28,996
managers, technical directors like me, and uh QC members. Here's a snapshot of uh one of

409
00:28:29,036 --> 00:28:33,017
the first emails that we we sent using the system. So as you can see it's in 2016. So

410
00:28:34,745 --> 00:28:37,067
There's only four object types that we're testing.

411
00:28:38,308 --> 00:28:41,551
You can see the total amount of instances we found in the

412
00:28:41,591 --> 00:28:44,934
game world, total amount of valid objects, and total

413
00:28:44,974 --> 00:28:46,976
amount of invalid game objects.

414
00:28:48,737 --> 00:28:51,459
This is the summary email.

415
00:28:51,479 --> 00:28:52,440
This is not the Excel file.

416
00:28:52,460 --> 00:28:56,864
So we have a link that will take you to the Excel file if

417
00:28:56,904 --> 00:28:57,885
you want more information.

418
00:28:59,526 --> 00:29:01,007
So as you can see, we have 1,000 ladders.

419
00:29:02,464 --> 00:29:10,353
and 75% of them have some type of problem with it. So that's not good. That's another snapshot

420
00:29:10,373 --> 00:29:16,300
from later in production. 5 months to store shelves. We have now 18 type of object that we

421
00:29:16,320 --> 00:29:16,540
test.

422
00:29:17,958 --> 00:29:22,302
uh we did several improvement to the system but something that is very very cool and turned

423
00:29:22,342 --> 00:29:27,127
out to be really useful is that we have the delta with the previous error uh with the

424
00:29:27,167 --> 00:29:32,852
previous error count from the day before. So we can see in green which is good uh that we're

425
00:29:32,912 --> 00:29:39,859
fixing errors getting rid of invalid um ingredients and you can see in in red the invalid

426
00:29:39,939 --> 00:29:42,782
ones so that's bad. We don't want red. Um

427
00:29:43,390 --> 00:29:49,396
And uh big columns at the end is uh we split up Egypt in 5 regions with 5 sub teams, each

428
00:29:49,436 --> 00:29:54,961
with their own managers and teams of uh designers. And we would assign every error to the

429
00:29:55,001 --> 00:30:01,647
region so that each individual team can track how good they're doing. Or bad. Uh you'll

430
00:30:01,667 --> 00:30:07,313
notice that we are now have 1300 ladders with only 7 left to fix. So, go team.

431
00:30:09,817 --> 00:30:15,280
last output, uh, we wanted something to visualize our error. Because so far we're generating

432
00:30:15,380 --> 00:30:23,063
Excel files and emails. That's a lot of boring text. Um, and not everyone, well managers enjoy

433
00:30:23,103 --> 00:30:28,966
text and Excel files, but most developers, they, they're more of the visual type. So we

434
00:30:29,006 --> 00:30:31,607
wanted something that we can see visually what's going on.

435
00:30:32,514 --> 00:30:38,898
So to do so we outputted our test to something that we call Atlas. Atlas is a Nintool uh an

436
00:30:38,958 --> 00:30:43,781
in-house tool sorry developed at Ubisoft Montreal. It's basically Google Maps for our game

437
00:30:43,841 --> 00:30:48,824
world. So with it we can pan the game map, zoom in and look at the data that we have there. But

438
00:30:48,864 --> 00:30:52,246
the cool thing is that uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh,

439
00:30:53,338 --> 00:30:58,679
it's also web house, sorry. Web house, web base, developed in house. Um, the cool thing is

440
00:30:58,719 --> 00:31:04,801
that through Envelope Script, we can write to a, to Atlas. So, when we find an error, we can

441
00:31:05,882 --> 00:31:12,223
create an icon and put it on the map at the exact position that we found the error at. So, I'll

442
00:31:12,264 --> 00:31:16,025
show a quick work, uh, quick video of Atlas in action.

443
00:31:17,399 --> 00:31:23,203
So you can see the game world map and on the left side there's a bunch of layers. Every layer is a

444
00:31:23,483 --> 00:31:32,331
gameplay ingredient test. If we turn them on, we'll see the content of these layers. So you can

445
00:31:32,391 --> 00:31:38,736
see a few red dots. And if you do click on the dots, we have the same information that we have

446
00:31:38,756 --> 00:31:40,097
in the Excel file, so we have the link.

447
00:31:41,138 --> 00:31:42,519
to the game editor.

448
00:31:42,539 --> 00:31:45,121
So if you click that link, it will open up Anvil,

449
00:31:45,381 --> 00:31:47,082
our game editor, and it will take the camera

450
00:31:47,122 --> 00:31:49,184
and put it exactly where the error is.

451
00:31:49,604 --> 00:31:52,066
So it makes it really simple and fast

452
00:31:52,586 --> 00:31:55,188
for content developers to find their bugs

453
00:31:55,588 --> 00:31:56,608
and to get to fix them.

454
00:31:56,969 --> 00:32:01,912
So it makes things way faster and way easier for everyone.

455
00:32:02,012 --> 00:32:03,653
It's almost too easy.

456
00:32:04,474 --> 00:32:06,515
And this is pretty damn cool.

457
00:32:06,775 --> 00:32:08,096
You're saving a lot of time

458
00:32:08,236 --> 00:32:09,977
and people are really enjoying this feature.

459
00:32:12,242 --> 00:32:18,528
that was our inputs. If we recap we have inputs which are world, world data, code and design

460
00:32:18,548 --> 00:32:24,372
intention that we then feed into our data analysis system and from there we create a bunch of

461
00:32:24,412 --> 00:32:32,259
outputs to excel, email and atlas. And this is done every single night on a dedicated build

462
00:32:32,279 --> 00:32:32,559
machine.

463
00:32:33,302 --> 00:32:39,905
And in between, we fix the errors by going in and fixing the data or code. Um, and then we

464
00:32:39,965 --> 00:32:44,907
improve our tests. Make sure that we output more information so that people can fix their

465
00:32:44,947 --> 00:32:50,170
problem more easily. But we also add more tests. Cause like we saw, we started with 4

466
00:32:50,430 --> 00:32:56,712
gameplay ingredients and we ended up with 22. So we keep improving the test based on how the

467
00:32:56,732 --> 00:33:01,535
production goes. So a few, a bit, a few stats about the system.

468
00:33:02,510 --> 00:33:07,875
this system runs on one build machine and it takes three hours to execute. Most of this time

469
00:33:07,915 --> 00:33:14,321
is spent loading the game world actually. Running the test are super fast. Uh we generate 12

470
00:33:14,661 --> 00:33:21,187
reports from there which are in our three broad categories of test. And we test 500 look over

471
00:33:21,227 --> 00:33:21,848
500 location making over 150,000.

472
00:33:27,665 --> 00:33:31,629
pathfinding tests, testing over 200,000 gameplay ingredients,

473
00:33:32,149 --> 00:33:35,151
testing over a million AI network nodes and edges,

474
00:33:35,892 --> 00:33:39,375
and 5 million procedural assets being placed in the world.

475
00:33:40,616 --> 00:33:44,599
And that's every single day, automatically.

476
00:33:47,642 --> 00:33:48,122
And that's it.

477
00:33:49,583 --> 00:33:50,144
That is it.

478
00:33:51,685 --> 00:33:53,046
That's our solution.

479
00:33:53,066 --> 00:33:54,868
It's simple in concept.

480
00:33:55,608 --> 00:34:02,332
It's simple in execution, but for us, it was a huge game changer and it made a huge difference

481
00:34:03,693 --> 00:34:04,654
in the shipping of our game.

482
00:34:06,295 --> 00:34:13,680
And we'll then talk about the impacts and why was it such a big impact on the production of our game.

483
00:34:14,780 --> 00:34:16,541
Well, first water.

484
00:34:20,164 --> 00:34:24,867
It has a big impact because a system like this has several benefits that are not all apparent on the surface,

485
00:34:24,987 --> 00:34:25,107
but...

486
00:34:25,960 --> 00:34:28,381
Because it's simple, you don't see them right away.

487
00:34:28,501 --> 00:34:32,263
But once you start using it, it's really a big difference.

488
00:34:33,043 --> 00:34:37,966
So it's been very useful for the quality of our game,

489
00:34:38,226 --> 00:34:41,688
but it also greatly improved the quality of our life

490
00:34:42,128 --> 00:34:43,328
as we develop this game.

491
00:34:44,049 --> 00:34:45,690
So what are these benefits?

492
00:34:46,750 --> 00:34:49,011
Well, the first one, which is quite cool,

493
00:34:49,672 --> 00:34:50,972
is that we ship this game.

494
00:34:54,141 --> 00:35:02,024
with a relatively low number of bugs in the tested systems. And let's be clear, uh, we would

495
00:35:02,064 --> 00:35:07,886
never be able to ship this game with the, uh, the same scope, same size, same quality in the

496
00:35:07,926 --> 00:35:14,428
same time frame if it wasn't for this system. Um, I'll then talk about how this system

497
00:35:14,468 --> 00:35:19,670
changed the way we produced the game before and now, how it gave us quantifiable data and

498
00:35:19,690 --> 00:35:23,631
how it led to a smoother debug. So regression.

499
00:35:26,207 --> 00:35:31,610
every game I made there was always regression so at some point, well every week, if not

500
00:35:31,690 --> 00:35:36,233
every day, uh so we need to know about the regressions. So basically what would happen

501
00:35:36,393 --> 00:35:43,458
before, alright, um a regression would go like this. I would get into work, coffee and end,

502
00:35:43,858 --> 00:35:49,903
sit down at my desk, put on my headphones, start listening to some music, and then 10

503
00:35:49,943 --> 00:35:53,985
seconds into a track someone would come to me, bump on my shoulder and go, hey Nick!

504
00:35:55,099 --> 00:35:58,562
Ladders are broken in my village. I don't know why.

505
00:35:59,743 --> 00:36:01,644
All right. Have you read the documentation?

506
00:36:02,444 --> 00:36:04,506
Yes, I did. I did read the manual.

507
00:36:05,346 --> 00:36:06,667
Really? You did that?

508
00:36:09,089 --> 00:36:10,170
Awesome. Thanks, man.

509
00:36:11,331 --> 00:36:16,674
So, I'll stand up, go to his desk, start finding the errors.

510
00:36:17,830 --> 00:36:23,275
I cannot find the errors. Uh so I'm starting to wonder what's going on. But luckily there's

511
00:36:23,315 --> 00:36:28,439
another level designers she uh standing by she says hey I have the same problem in my

512
00:36:28,479 --> 00:36:34,143
location can you can you help me out please? And so whoo okay nice. It's not an error only in

513
00:36:34,163 --> 00:36:37,666
this location it's it's everywhere. So that's bad. Um.

514
00:36:38,687 --> 00:36:42,649
So now, okay, we need to figure out what's going on, so I would ask you, see, have you seen

515
00:36:42,689 --> 00:36:47,553
that anywhere? Please go check all ladders everywhere. And then I would need to start

516
00:36:47,593 --> 00:36:52,896
invig- investigating looking at if maybe programmers did ch- changes in the ladder, so the,

517
00:36:53,537 --> 00:37:00,201
the, the, the, um, player navigation ability code. Uh, I would look at the original ladder

518
00:37:00,241 --> 00:37:03,823
prefab that we're placing in the world was, did someone change something yesterday that

519
00:37:03,863 --> 00:37:04,544
could have caused this?

520
00:37:05,510 --> 00:37:11,834
So basically I discover the regression at some point during the day, usually very early, and

521
00:37:11,895 --> 00:37:21,962
I don't know the scope of the the error until I dig and find the uh the error. But now, what

522
00:37:21,982 --> 00:37:28,787
happened is I get to work with my coffee, sit down at my desk, put on my headphones, put on

523
00:37:28,827 --> 00:37:34,412
some music, and then I go through my emails. Because I have a daily report by email.

524
00:37:35,109 --> 00:37:38,333
So then I can look, see gameplay ingredients, ladders,

525
00:37:38,673 --> 00:37:41,036
plus 500 in red.

526
00:37:42,558 --> 00:37:43,139
That's not good.

527
00:37:43,339 --> 00:37:45,202
So right away what I do is I write an email

528
00:37:45,222 --> 00:37:46,604
to my world design team and I say,

529
00:37:46,824 --> 00:37:49,067
all right, there is a problem with ladders,

530
00:37:49,247 --> 00:37:52,271
we know about it, we'll investigate, don't come see me.

531
00:37:55,358 --> 00:37:58,421
So I know the scope, and so I can take the right decisions

532
00:37:58,681 --> 00:38:01,243
and talk to the right people from my desk,

533
00:38:01,624 --> 00:38:02,364
listening to music.

534
00:38:03,846 --> 00:38:04,806
So basically I'm proactive.

535
00:38:04,846 --> 00:38:06,408
I'm not reacting to what's going on.

536
00:38:06,668 --> 00:38:09,791
I take the action to fix the problems,

537
00:38:10,111 --> 00:38:11,252
because I know I'm on the problems.

538
00:38:14,214 --> 00:38:15,876
The system gave us more iteration time.

539
00:38:18,278 --> 00:38:20,399
So before, when we created the...

540
00:38:22,426 --> 00:38:26,650
we integrated data in the world. Once we integrated all the data that need, that was

541
00:38:26,690 --> 00:38:32,716
required for one feature, we would ask QC to do a pass and test that everything is fine. We

542
00:38:32,756 --> 00:38:36,200
would give them a checklist. Please go through all of that, make sure everything is okay and

543
00:38:36,320 --> 00:38:41,965
try to break it. See, see, see if you can break it. And once we, they report the bugs and we

544
00:38:42,006 --> 00:38:45,089
fix them and then it's solid, we lock the data.

545
00:38:45,801 --> 00:38:50,244
because we've been through this pass, we fixed everything, lock it down, we don't want to

546
00:38:50,264 --> 00:38:56,089
break it again, we'll ship that, we know it works. But now, with daily automated tests, we're a

547
00:38:56,129 --> 00:39:02,774
bit more confident to change things because every day we have tests being executed. We don't

548
00:39:02,794 --> 00:39:06,517
have a fixed number of QC pass. So, uh, we're a bit more confident to change things. So,

549
00:39:07,350 --> 00:39:11,774
we have more iteration time for content creators because we allow them to change things much

550
00:39:11,814 --> 00:39:17,559
later into the production. Uh I think you'll agree that more iteration leads to more quality.

551
00:39:17,699 --> 00:39:27,787
So that's why I'm sure that the system helped this game have a very uh good quality level. And

552
00:39:28,428 --> 00:39:33,732
lastly um finding bugs. The system gave us a new ways to find bug. And I'll illustrate this

553
00:39:33,792 --> 00:39:36,074
through the wall torch example.

554
00:39:36,811 --> 00:39:38,891
Wall torch is a simple ingredient.

555
00:39:39,151 --> 00:39:40,652
It's just a torch that is unlit.

556
00:39:40,872 --> 00:39:43,132
It's placed up on a wall, and the player

557
00:39:43,152 --> 00:39:45,733
can go next to it with his own pocket torch

558
00:39:46,373 --> 00:39:48,373
and light the wall torch.

559
00:39:50,014 --> 00:39:53,234
So one day, late into production, very late,

560
00:39:55,055 --> 00:39:56,435
late into debug, actually, should I say,

561
00:39:57,515 --> 00:40:02,276
we receive one bug by one tester in one location,

562
00:40:02,596 --> 00:40:04,797
saying that one wall torch instance.

563
00:40:06,224 --> 00:40:12,848
did not work. The player couldn't reach it. It was just out of reach. Just a bit too high. So

564
00:40:12,908 --> 00:40:17,271
the player felt like he could reach it but he couldn't so that's bad. It's a false call. We

565
00:40:17,291 --> 00:40:22,535
don't want that in our game. So alright we need to fix it. But the first thing I think when I

566
00:40:22,575 --> 00:40:27,238
receive a bug like this is this is not the only wall torch in the game. There's a few of them.

567
00:40:27,918 --> 00:40:32,721
As you can imagine. So we take a look. There's about 700 of them throughout the game.

568
00:40:33,615 --> 00:40:39,139
So usually what we would do is ask QC. Oh alright, cool. We we think this is everywhere. Go

569
00:40:39,199 --> 00:40:45,504
everywhere. Look for all wall torches and make sure that they're fine. So once again uh we

570
00:40:45,524 --> 00:40:51,148
would do a QC pass and we would do probably only do it once because this is this is long to do.

571
00:40:51,909 --> 00:40:57,913
Um but now what we do is we write the test. We cast the ray down from the wall torch and we

572
00:40:58,013 --> 00:40:58,634
try to find

573
00:40:59,491 --> 00:41:05,494
a ground into a certain threshold and this is the threshold that we know that the player can

574
00:41:05,974 --> 00:41:16,799
light these torches. So if the wall torch is in the red zone we report an error. And now until the

575
00:41:16,839 --> 00:41:22,142
end of the project it's daily and automated. So until the end of the project we'll know if someone

576
00:41:22,282 --> 00:41:25,423
adds a new wall torch and it's broken and we'll know if

577
00:41:27,163 --> 00:41:35,167
we have a regression about the wall torch. We don't need a QC pass anymore for this. The

578
00:41:35,207 --> 00:41:40,090
system gave us quantifiable data and every manager in the room will appreciate that

579
00:41:40,190 --> 00:41:46,573
because they know that what gets quantified gets managed. So as a TD it's super cool for me

580
00:41:46,633 --> 00:41:53,257
because I can know the numbers of errors that are in the game for feature X, Y, Z. So I can

581
00:41:53,297 --> 00:41:54,597
go see the managers and tell them

582
00:41:55,449 --> 00:42:01,693
you got 500 error of this, we know it's a data error, we've, we know how to fix it, we train

583
00:42:01,713 --> 00:42:06,937
the people, it needs to be done. Or it can also tell the managers that, or a manager will

584
00:42:06,957 --> 00:42:11,201
tell me that, please train people on this feature because everyone is having problem as you

585
00:42:11,221 --> 00:42:17,626
can see. So uh, it gives us the information to take the valid decisions. And it also tells us

586
00:42:17,686 --> 00:42:22,790
the, our current velocity. Are we fixing enough of these bugs to reach our target of zero bugs

587
00:42:23,050 --> 00:42:23,570
by date?

588
00:42:25,445 --> 00:42:33,450
X. It also led to a smoother debug cause typically in game production most of the bugs come at the

589
00:42:33,570 --> 00:42:39,013
end of the production so during debug this is where we find out about all the bugs so this is

590
00:42:39,073 --> 00:42:45,518
where we crunch to fix all the bugs um but that's not so fun. Uh but since our system was

591
00:42:45,558 --> 00:42:46,658
developed during production

592
00:42:48,480 --> 00:42:53,882
we found all of these error during production. So we were able to allow time in our schedule to

593
00:42:53,942 --> 00:42:59,683
fix these bugs and we were able to fix them up front. So basically we front loaded the the the

594
00:42:59,723 --> 00:43:07,385
debug phase. And this allowed the uh content creators and the QC team to focus on tricky bugs

595
00:43:07,905 --> 00:43:13,066
and focus on putting quality into the game rather than going through everything to find the

596
00:43:13,106 --> 00:43:18,287
three in the middle of a zip line. So lesson learned.

597
00:43:19,808 --> 00:43:25,210
uh, we, I would like to have this earlier in production next time around. Uh, well, I would

598
00:43:25,230 --> 00:43:29,310
like to have this on every production that I work on in the future because I know that a system

599
00:43:29,350 --> 00:43:33,731
like this would have changed the way our production would have been done in the past. Like

600
00:43:33,771 --> 00:43:39,893
on Black Flag, I know we would have loved to, to have that. Uh, it would also help us not to

601
00:43:39,973 --> 00:43:45,934
find lots of bug at the end because throughout the game we can know that we can find these

602
00:43:45,994 --> 00:43:47,154
errors as we develop them.

603
00:43:49,457 --> 00:43:54,201
There's a big dangers of false positive though, so as TDs it's super important that we make

604
00:43:54,261 --> 00:43:59,625
sure that our tests are accurate, that we don't report false information because if we do so,

605
00:43:59,645 --> 00:44:05,809
um, the people on the rece- receiving end, they, they see errors and then they go in the data

606
00:44:05,889 --> 00:44:11,273
and they don't find any errors, uh, so we're wasting their time and so they lost, they lose

607
00:44:11,313 --> 00:44:12,554
faith into the, the system.

608
00:44:13,135 --> 00:44:17,237
and they'll never use it again and we've built all this for nothing. So we have to make sure

609
00:44:17,297 --> 00:44:22,701
that everything is fine. So it did happen. Um and what we learned from this is that we have to

610
00:44:22,941 --> 00:44:27,684
test and use someone as a guinea pig to test the test and make sure that the test is accurate.

611
00:44:29,545 --> 00:44:32,447
And lastly we wrote way too many emails. Um

612
00:44:33,544 --> 00:44:39,087
Like I said, every report sent its own email and we had 12 of them, so that's 12 email a day

613
00:44:39,308 --> 00:44:44,431
for everyone in the world team. So that's, that's a bit spammy. Uh, but as we developed

614
00:44:44,451 --> 00:44:49,534
this, we thought, done is better than perfect, let's just get this out so that people can

615
00:44:49,594 --> 00:44:57,399
start using it. This is where the return is. Um, so we just put it out there. Um, maybe in the

616
00:44:57,439 --> 00:45:01,501
future we should only make one email with all the information or I'll put it to a

617
00:45:01,541 --> 00:45:02,322
dashboard somewhere.

618
00:45:04,503 --> 00:45:07,724
So the next step for us would be to add these velocity chart.

619
00:45:08,804 --> 00:45:11,905
Well, we said that we had the delta for a few of our errors

620
00:45:12,705 --> 00:45:13,066
reports.

621
00:45:14,026 --> 00:45:16,766
We didn't have it on every report,

622
00:45:16,846 --> 00:45:18,047
but it was super useful.

623
00:45:18,527 --> 00:45:21,328
So we would like to have a velocity

624
00:45:21,368 --> 00:45:24,208
chart on every of these reports so that we

625
00:45:24,228 --> 00:45:25,689
can see if we're going well.

626
00:45:26,509 --> 00:45:26,949
What's the trend?

627
00:45:27,009 --> 00:45:28,809
Are we fixing our things correctly or not?

628
00:45:30,390 --> 00:45:32,430
A lot of you might be thinking right now, why?

629
00:45:33,027 --> 00:45:39,437
in hell are they not preventing these errors from being created? It's a very valid question. We

630
00:45:39,497 --> 00:45:47,950
actually had a few slides about that, um, but uh, for time reasons they're gone. Um, even like

631
00:45:48,303 --> 00:45:52,205
error creation is super important and we we have a few of these systems in place but even if

632
00:45:52,225 --> 00:45:58,847
you have them, errors will show up. Because like we we said like data that was fine on day

633
00:45:58,987 --> 00:46:05,329
one might be broken on day ten for a bunch of other reasons. So even if you have a gate,

634
00:46:06,329 --> 00:46:11,971
at submit and make sure or at save or addition to make sure that everything is fine, stuff

635
00:46:11,991 --> 00:46:16,032
will go through that will be get broken later by another change. So we still need to have a

636
00:46:16,052 --> 00:46:17,432
snapshot and test everything.

637
00:46:19,536 --> 00:46:20,717
And lastly, create more tests.

638
00:46:21,817 --> 00:46:24,558
We are testing three broad categories of objects,

639
00:46:25,979 --> 00:46:26,499
of features.

640
00:46:27,560 --> 00:46:29,280
We have way more features than that in the game.

641
00:46:29,440 --> 00:46:32,162
So I'm sure we'll be able to expand that and take it

642
00:46:32,222 --> 00:46:33,442
to other features.

643
00:46:33,502 --> 00:46:35,363
And I'm sure that you right now in your head,

644
00:46:35,383 --> 00:46:39,125
hopefully, you are thinking of stuff in your game,

645
00:46:39,325 --> 00:46:41,866
your own games, that you might want to test with something

646
00:46:42,006 --> 00:46:42,546
similar to that.

647
00:46:44,407 --> 00:46:48,229
Lastly, I need to say thanks and mention my colleagues who

648
00:46:49,170 --> 00:46:49,990
built this with me.

649
00:46:50,451 --> 00:46:53,853
So I need to say thank you to Kevin Coughlin, who's right

650
00:46:53,893 --> 00:46:56,595
here, who built this.

651
00:46:56,735 --> 00:46:59,757
And actually, Kevin co-wrote this presentation with me.

652
00:47:00,398 --> 00:47:01,238
So thank you, Kevin.

653
00:47:02,759 --> 00:47:04,961
Kevin will be joining me on stage for the Q&A sessions.

654
00:47:05,201 --> 00:47:08,463
So please have one question at least, so that Kevin has not

655
00:47:09,003 --> 00:47:10,424
come all the way here for nothing.

656
00:47:11,465 --> 00:47:14,466
And I need to mention Roland Levesque and Rémi Toupin-Godet,

657
00:47:14,506 --> 00:47:17,788
who wrote a lot of the tests that we've talked about today.

658
00:47:20,750 --> 00:47:22,951
So my colleagues and I have been in the industry for a while,

659
00:47:23,271 --> 00:47:26,993
and between all of us, we've shipped a lot of open world games.

660
00:47:27,973 --> 00:47:32,756
We're proud that on ACO, our designers were able to focus on the right things

661
00:47:33,176 --> 00:47:35,157
and work on the quality of the game.

662
00:47:36,237 --> 00:47:40,720
Never we've been so confident that the system that we tested, at least,

663
00:47:41,307 --> 00:47:46,270
we're bug free and that the player won't find any problems with these systems in the game.

664
00:47:47,471 --> 00:47:53,194
We know that the, the, the, our system of daily automated tests was a major contributor to that

665
00:47:53,655 --> 00:47:59,639
and it was a huge contributor to the quality of the game and the quality of the life of the people building that game.

666
00:48:00,439 --> 00:48:06,923
So I invite you and your teams to think about how you could integrate a similar system into your pipeline.

667
00:48:07,604 --> 00:48:10,045
Your game and your team will thank you.

668
00:48:21,377 --> 00:48:22,937
We have 12 minutes for questions.

669
00:48:23,117 --> 00:48:25,578
AUDIENCE MEMBER 5 Hi.

670
00:48:25,638 --> 00:48:27,178
Really awesome talk.

671
00:48:27,738 --> 00:48:28,459
Thank you for this talk.

672
00:48:28,479 --> 00:48:29,419
It's awesome.

673
00:48:29,919 --> 00:48:30,519
I had a question.

674
00:48:30,559 --> 00:48:35,120
What would you do if you couldn't run a script that you

675
00:48:35,140 --> 00:48:36,861
can easily iterate on in the editor?

676
00:48:37,501 --> 00:48:44,303
What if you had to go through coders, C++, every single time

677
00:48:44,323 --> 00:48:45,143
you wanted to add a test?

678
00:48:45,243 --> 00:48:46,764
What would be your approach there?

679
00:48:51,020 --> 00:48:53,420
Well, so I guess the question you're asking is, what do you

680
00:48:53,440 --> 00:48:55,441
do if you don't have something?

681
00:48:55,501 --> 00:48:57,241
If you don't have that NVL script, what do you do?

682
00:48:57,261 --> 00:49:03,062
I've got to say that my gut reaction is you need something

683
00:49:03,102 --> 00:49:03,462
like that.

684
00:49:04,482 --> 00:49:09,723
Some of the game teams that we've talked to about this, at

685
00:49:09,763 --> 00:49:13,544
the very least, they can maybe run Python scripts to parse

686
00:49:13,644 --> 00:49:17,165
their XML files, to extract as much data as they can.

687
00:49:18,065 --> 00:49:18,585
But really, the

688
00:49:19,305 --> 00:49:23,168
that easy access to the attributes of all the data,

689
00:49:23,549 --> 00:49:26,591
and to be able to run those pathfinding and shapecat

690
00:49:26,611 --> 00:49:30,474
tests, that's really such a key part of this that you

691
00:49:30,814 --> 00:49:31,975
probably want to look at that first.

692
00:49:32,776 --> 00:49:36,799
Thanks.

693
00:49:36,859 --> 00:49:38,020
Just a few questions.

694
00:49:38,520 --> 00:49:42,123
Did you consider, instead of it just being daily, like

695
00:49:42,183 --> 00:49:45,786
doing some sort of continuous integration of the tests?

696
00:49:47,227 --> 00:49:48,488
Yep, valid question.

697
00:49:49,445 --> 00:49:57,088
Um, so, um, some of these tests, they rely on data that is being generated overnight on

698
00:49:57,128 --> 00:50:02,630
build machines. So we have, we need that data to run those tests. So that's why we need, we, we

699
00:50:02,670 --> 00:50:06,671
decided that we only run the tests once that we generated everything and we have all the

700
00:50:06,791 --> 00:50:13,554
necessary data. But yes, some of those tests we could execute every hour. Okay, and uh,

701
00:50:14,094 --> 00:50:18,636
because the game is so big and you have all these um, gameplay ingredients all over it,

702
00:50:19,357 --> 00:50:22,159
When you're testing, you have to interact with the streaming

703
00:50:22,199 --> 00:50:24,221
systems, like, OK, we've got to stream this part of the world

704
00:50:24,281 --> 00:50:25,182
and then test that stuff.

705
00:50:25,202 --> 00:50:26,763
OK, then we've got to stream this part of the world.

706
00:50:28,004 --> 00:50:30,606
I may have just said something obvious.

707
00:50:30,626 --> 00:50:32,007
I don't know if there was a question in there.

708
00:50:32,848 --> 00:50:34,209
Well, yeah, you have to load everything.

709
00:50:34,249 --> 00:50:36,611
Because when you're doing collision tests, you have to

710
00:50:36,651 --> 00:50:38,132
make sure that every collision are loaded.

711
00:50:38,812 --> 00:50:44,276
So we need to make sure that all the collisions are in the

712
00:50:44,316 --> 00:50:45,938
game world so that we can find them.

713
00:50:47,066 --> 00:50:48,746
And yeah, maybe just something to make clear,

714
00:50:48,766 --> 00:50:51,888
the tests that we run were all on static data,

715
00:50:52,448 --> 00:50:54,209
so you're not actually running the game

716
00:50:54,269 --> 00:50:55,890
and having the player go through the world.

717
00:50:56,411 --> 00:50:59,592
So you are, when you talked about it taking three hours

718
00:50:59,612 --> 00:51:01,673
to run the test, but most of it being loading

719
00:51:01,693 --> 00:51:03,614
the game world is because he was loading

720
00:51:03,675 --> 00:51:05,395
the whole game world in one shot,

721
00:51:05,916 --> 00:51:07,357
and then running all the tests.

722
00:51:08,277 --> 00:51:09,958
And maybe just another thing about

723
00:51:09,978 --> 00:51:11,599
the continuous integration question,

724
00:51:12,239 --> 00:51:13,800
some of the tests, like the location test,

725
00:51:15,512 --> 00:51:19,774
The level designers could run that test before checking in.

726
00:51:19,894 --> 00:51:22,816
So they were able to go, OK, I got this error.

727
00:51:22,836 --> 00:51:24,117
I think I fixed it.

728
00:51:24,177 --> 00:51:26,258
Run the error suite, and poof, yep.

729
00:51:26,478 --> 00:51:30,461
Either fixed or not fixed, and go from there.

730
00:51:30,661 --> 00:51:32,762
So, and you may have just answered the other question I

731
00:51:32,782 --> 00:51:33,342
was going to ask.

732
00:51:33,382 --> 00:51:36,805
So all the tests were for what you could test statically.

733
00:51:37,305 --> 00:51:39,746
And I was going to ask a question of, as you progress

734
00:51:39,766 --> 00:51:41,127
through the game's plot or whatever, the

735
00:51:41,167 --> 00:51:42,228
world state changes.

736
00:51:42,308 --> 00:51:44,229
And I was going to ask, oh, we have to like.

737
00:51:45,502 --> 00:51:49,604
Tested in this world state tested in this world state test, but it sounds like you're not doing something like that

738
00:51:50,424 --> 00:51:51,605
Cool. Thanks

739
00:51:53,446 --> 00:51:58,749
Hi great talk, thank you. I just want to ask do you have some way to test some

740
00:51:59,810 --> 00:52:05,613
Dependency resources. Let's say I change one one feature one content or some

741
00:52:06,033 --> 00:52:12,195
I did some code change, but actually, you know, sometimes I think designers or we want

742
00:52:12,215 --> 00:52:18,596
to, we care more about how many other contents or stuff in the world will be influenced by

743
00:52:18,636 --> 00:52:18,856
that.

744
00:52:19,296 --> 00:52:25,018
Do you have any thought or any test of using this tool to do that?

745
00:52:25,038 --> 00:52:25,578
Thank you.

746
00:52:32,674 --> 00:52:35,315
So I'm not sure I understood the question.

747
00:52:37,417 --> 00:52:40,839
One thing certainly that is nice in Anvil that wasn't in

748
00:52:40,859 --> 00:52:43,561
some of the other engines I've worked with is the

749
00:52:43,581 --> 00:52:44,842
dependencies are very clear.

750
00:52:44,902 --> 00:52:48,024
There's a dependency viewer that maps out all the

751
00:52:48,044 --> 00:52:48,604
dependencies.

752
00:52:48,644 --> 00:52:51,306
You know exactly, oh, on this object, I wonder what depends

753
00:52:51,386 --> 00:52:54,468
on it, boom, viewer, you see exactly what it depends on.

754
00:52:56,409 --> 00:53:01,195
But, and again, because the tests that we run, it's all on static data, we know what the

755
00:53:01,215 --> 00:53:05,320
dependencies are when we're doing our tests and we can just go from there. I'm not sure that

756
00:53:05,360 --> 00:53:08,925
answered your question? Uh, yeah, part of that, yeah, thank you.

757
00:53:09,521 --> 00:53:13,463
Because you have a lot of content shared in the world, right?

758
00:53:13,904 --> 00:53:17,485
So actually you change one stuff,

759
00:53:17,986 --> 00:53:20,907
let's say a collision mesh of a letter,

760
00:53:20,967 --> 00:53:22,008
but actually it's larger.

761
00:53:22,528 --> 00:53:28,091
So you find the error in another place.

762
00:53:29,152 --> 00:53:30,373
But actually I want to say,

763
00:53:30,593 --> 00:53:34,455
oh, actually this is the collision mesh causing this error.

764
00:53:35,815 --> 00:53:40,177
How's, I mean, but when you, will all of the,

765
00:53:40,977 --> 00:53:43,418
I mean, will you, let's see, this letter is,

766
00:53:43,998 --> 00:53:47,900
we have five letters of these broken letters in the wall,

767
00:53:48,360 --> 00:53:51,361
will you get five error reports on the same,

768
00:53:51,441 --> 00:53:54,262
in the wall, okay, so that's, okay, thank you.

769
00:53:54,802 --> 00:53:55,082
Thank you.

770
00:53:58,124 --> 00:53:59,664
Hi, I just had one question.

771
00:54:00,024 --> 00:54:02,265
By the time you shipped this gigantic game,

772
00:54:02,365 --> 00:54:04,406
how many red dots were left on your map?

773
00:54:06,072 --> 00:54:08,232
Good question. Close to zero.

774
00:54:11,533 --> 00:54:18,214
And honestly just to be very close to zero, I honestly think it was like four or something.

775
00:54:19,315 --> 00:54:27,476
And maybe just an extra little thing, a question you could have asked also is, well, were there ever any exceptions to the rule, right?

776
00:54:27,496 --> 00:54:31,777
Because sometimes we've got these hard and fast rules, but there's this one case that, you know what?

777
00:54:33,603 --> 00:54:35,186
You're reporting an error on that instance,

778
00:54:35,266 --> 00:54:36,668
but it's not really an error.

779
00:54:37,228 --> 00:54:40,653
We had the ability to go to that instance and say,

780
00:54:41,154 --> 00:54:43,277
this particular test, don't run it.

781
00:54:43,638 --> 00:54:44,279
We know it's good.

782
00:54:44,299 --> 00:54:44,339
Hi.

783
00:54:48,374 --> 00:54:53,438
So I wanted to ask, since all the objects are in some sort of a database,

784
00:54:53,959 --> 00:55:00,043
then why didn't you make the QA team able to create their own tests using something like

785
00:55:00,604 --> 00:55:05,708
queries or something on the database, using scripts or anything in the real world,

786
00:55:05,828 --> 00:55:10,511
like to help them decide on what to test and what not to?

787
00:55:14,194 --> 00:55:17,617
So why don't we allow the QA team to write their own tests? Is that the question?

788
00:55:17,817 --> 00:55:17,917
Yeah.

789
00:55:18,197 --> 00:55:26,580
Yeah, uh, well, um, we, we wrote the tests ourselves because we were a bit lucky, um, we,

790
00:55:27,120 --> 00:55:31,821
we're all, all the TDs that I mentioned, uh, we are super confident writing C sharp

791
00:55:31,881 --> 00:55:36,503
code, so it would happen that a tester finds a bug and would come to us and say, hey, uh,

792
00:55:36,863 --> 00:55:38,804
there's a, like, something, this always breaks.

793
00:55:39,482 --> 00:55:44,686
can you help us out to find it more fast and if make faster or uh can you write a test for

794
00:55:44,726 --> 00:55:49,730
this and we would work with them and we would write the the test ourselves. Uh some of the

795
00:55:49,770 --> 00:55:55,875
tests are also not in code they're actually data. Uh so uh we there was ways for people to

796
00:55:55,915 --> 00:56:05,382
tweak the the data uh to get more information. Cool well if there's no more questions uh

797
00:56:06,363 --> 00:56:07,504
thanks for staying until the end.

