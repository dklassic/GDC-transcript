1
00:00:07,844 --> 00:00:08,264
Hi, everyone.

2
00:00:09,044 --> 00:00:18,746
Today I'm here to talk about this game we made, Hi-Fi Rush, and more specifically, how we went about designing it and our methods for iterating on our gameplay loop to reach the result that we wanted for the project.

3
00:00:19,906 --> 00:00:22,587
So as most of you know, this was a new challenge for us at the studio.

4
00:00:23,187 --> 00:00:25,987
And we knew that we would be doing a lot of learning while developing.

5
00:00:26,547 --> 00:00:34,869
But I think the biggest thing we came away with was how we basically completely re-approached development in order to design elements to make the game that we wanted to make work.

6
00:00:35,689 --> 00:00:41,596
So looking back, it's strange, but we developed in a way that I would call backwards, hence the title of this presentation.

7
00:00:42,437 --> 00:00:47,903
And just for reference, there are some musical terminology being used in here, but I don't think anything's too complicated.

8
00:00:49,085 --> 00:00:52,629
But before I get into this, let me just give you a quick overview over who I am.

9
00:00:54,090 --> 00:00:59,294
So my name is John Johannes, and I've been working at Tango Gameworks as a game designer for about 13 years now.

10
00:01:00,394 --> 00:01:05,217
I joined when the studio started, and I had no prior game design or development experience.

11
00:01:05,377 --> 00:01:07,299
So for me, everything was learning while doing.

12
00:01:08,579 --> 00:01:13,783
And the projects I worked on this before were the Evil Within, which I did game and level design.

13
00:01:15,553 --> 00:01:23,578
After that, I worked on both story DLCs we did for the game, The Assignment and The Consequence, where I was not only director on the projects, but I did story and script writing.

14
00:01:24,739 --> 00:01:27,821
And then following that, I was the director on the sequel, The Evil Within 2.

15
00:01:29,702 --> 00:01:38,228
And when that wrapped up, I began working on a project that we should be familiar with as Hi-Fi Rush, which I was the director on this title as well.

16
00:01:39,312 --> 00:01:44,423
and to clear up what a director does at Tango, since depending on the studio, director might mean a lot of things.

17
00:01:45,385 --> 00:01:49,233
For us, it really means a game director and a creative director all in one role.

18
00:01:50,427 --> 00:01:58,734
Now that being said, I was pretty hands-on for this project for a long time, since we were quite a small team until sort of the end part of development.

19
00:02:00,075 --> 00:02:03,157
So I did things, again, like I created the story and wrote the script.

20
00:02:04,578 --> 00:02:09,322
I assisted in level design, even grayboxing things sometimes, putting together things in engine.

21
00:02:10,323 --> 00:02:15,407
I had my hands in all parts of the game design with the game design team, including about half the game's boss fights.

22
00:02:17,018 --> 00:02:20,462
And again, we were a small team for a while.

23
00:02:20,502 --> 00:02:26,809
And because of the nature of this game, which I'll go into later, it required everyone to be extra hands-on and wear many hats.

24
00:02:27,509 --> 00:02:28,530
So it wasn't just myself.

25
00:02:28,631 --> 00:02:32,695
Most of the team members had their hands in multiple features, sometimes outside of their skill set.

26
00:02:35,649 --> 00:02:37,330
So a quick look at what I want to talk about today.

27
00:02:38,671 --> 00:02:49,720
The first is I want to go over how this project started, how we kind of came with our initial pitch, and then how we started developing it and determining our approach to developing the full game.

28
00:02:51,861 --> 00:03:03,090
And then from that approach, I'll go over what we called positive gameplay loop that we discovered, and how we iterated on it to match our image of how the game should play ideally to the vision that we had in our heads.

29
00:03:05,464 --> 00:03:14,672
Then I'd like to show how we took those early learnings from the project, this sort of working backwards idea, and incorporated it into almost all aspects of the game development and our workflow.

30
00:03:15,773 --> 00:03:27,803
There'll be examples from just general gameplay, there'll be level design, and the sequences that we made around licensed music choices, and how we had to essentially reverse engineer those from what we would call our musical impact.

31
00:03:29,895 --> 00:03:30,976
And then I have some takeaways.

32
00:03:32,096 --> 00:03:44,604
While a lot of the methods on this project are very bespoke and unique to the type of game that this is, I think a lot of learnings that we took away from it are applicable to any project that's probably trying something new or outside of your safety zone.

33
00:03:46,725 --> 00:03:54,390
And so for the first section, I'll jump into how this project, HiFi Rush, all started and our goals for the project, just beginning with the pitch.

34
00:03:57,205 --> 00:04:07,934
So this is quite abridged, but I initially brought this game idea to the table after finishing The Evil Within 2 as a non-traditional game from our studio.

35
00:04:08,194 --> 00:04:15,080
We knew that we were working on Ghostwire Tokyo Next, which is in the same sort of thread, and we were kind of being solidified as a horror studio.

36
00:04:16,181 --> 00:04:41,674
So I pitched a concept that I was personally very passionate about, it was very different, and I'd been planning it in my mind for a while, and obviously it was like nothing we'd developed before, and I pitched something that I said was a colorful and stylish action game combining music, describing it specifically as a 3D action game where everything in the world, including your actions, syncs to the music, creating the feeling of a music video being edited around you.

37
00:04:43,488 --> 00:04:51,415
And probably as surprised as most of you would be, the initial reaction to me pitching this was actually positive.

38
00:04:51,816 --> 00:04:53,497
I expected them to walk out of the room laughing.

39
00:04:54,698 --> 00:04:55,499
But that didn't happen.

40
00:04:56,900 --> 00:04:59,783
However, there were a bit of concerns about the project.

41
00:05:01,184 --> 00:05:06,067
While we as a studio thought it was cool, we did have no experience at all in this type of genre.

42
00:05:06,507 --> 00:05:09,488
And obviously it was the complete opposite of everything that we had done before.

43
00:05:10,069 --> 00:05:16,912
So we had our studio image, like I mentioned before, that was focusing on horror, as well as the games that Bethesda at that point was known for.

44
00:05:18,053 --> 00:05:21,595
So just sort of pitching it on paper we thought would be an extremely difficult sell.

45
00:05:22,898 --> 00:05:24,379
but we thought it had promise.

46
00:05:24,659 --> 00:05:28,481
We thought it was a cool idea and we thought it had potential and we wanted to try something new.

47
00:05:29,261 --> 00:05:31,363
And it was a good opportunity for us at the studio at the time.

48
00:05:32,463 --> 00:05:35,105
So we decided to prototype the idea.

49
00:05:36,325 --> 00:05:41,728
We wanted to prove the concept and if we could nail it, we could use it to kind of push the idea internally with less friction.

50
00:05:42,689 --> 00:05:49,012
And if we did a good job, it could be the groundwork for when we actually started developing the project to kind of hit the ground running.

51
00:05:52,475 --> 00:05:59,641
So when I pitched the game, I defined the gameplay as rhythm action, and I immediately got a lot of questions asking what that meant.

52
00:06:00,321 --> 00:06:01,102
Was it a rhythm game?

53
00:06:01,142 --> 00:06:01,982
Was it an action game?

54
00:06:02,963 --> 00:06:08,908
And I had an image of what I meant with rhythm action, and I usually explained it by comparing it to both genres individually.

55
00:06:09,488 --> 00:06:13,932
So to explain this, I kind of put both genres on a spectrum, both rhythm games and action games.

56
00:06:15,875 --> 00:06:17,116
On one hand, we have rhythm games.

57
00:06:17,256 --> 00:06:24,679
And this is a very general and extreme statement, but I defined it as where the gameplay is strictly matching your gameplay to an existing song.

58
00:06:26,500 --> 00:06:31,902
So there would be low player freedom and limitations to gameplay, since essentially you're just matching to a music track.

59
00:06:33,283 --> 00:06:34,884
But on the other hand, we had action games.

60
00:06:35,124 --> 00:06:43,648
And again, this is very extreme, but these would normally be considered having a high level of player freedom and few to almost no restrictions to gameplay.

61
00:06:45,051 --> 00:06:48,793
And for Hi-Fi Rush, I imagined it much closer to action games.

62
00:06:49,654 --> 00:06:55,017
I wanted there to be a freedom of choosing your actions and that free-flowing action gameplay you expect from these character action games.

63
00:06:55,577 --> 00:07:01,661
But there was a musicality to your actions, in this case, literally, as everything I wanted to be tied to the music.

64
00:07:02,922 --> 00:07:07,264
And for that, I wanted specifically there to be no UI telling you where to play.

65
00:07:08,425 --> 00:07:12,928
There would have to be a natural cadence to gameplay where everything would just work in tandem with the music.

66
00:07:14,480 --> 00:07:19,725
The goal being that music coordination wouldn't feel restrictive, but actually enhance the action elements.

67
00:07:22,527 --> 00:07:29,553
So, we went into this prototype phase, and I set the goal of the prototype to define that ideal form of rhythm action.

68
00:07:30,274 --> 00:07:36,919
Make it not just that concept that I put on that chart, but actually a playable actuality, so people could understand what the game was supposed to be.

69
00:07:37,915 --> 00:07:40,357
And so quick rundown of what we did to make this work.

70
00:07:42,018 --> 00:07:43,779
We basically just had a team of two people.

71
00:07:44,439 --> 00:07:45,900
It was myself and our lead programmer.

72
00:07:46,841 --> 00:07:51,644
And we had some assist work from animation, sound, and VFX at various points.

73
00:07:52,365 --> 00:08:07,295
And the whole dev time we took about nine months with to come up with a 10 to 15 minute playable demo which fleshed out the core concept, focusing mainly on combat but included some touches on the general tone of the game and visual nuances like how the world would react to the music.

74
00:08:08,195 --> 00:08:13,038
But an important thing that we decided early on was that we intentionally included no art in this prototype.

75
00:08:13,718 --> 00:08:17,380
So we can focus purely on this gameplay experience, the music and gameplay combination.

76
00:08:20,421 --> 00:08:33,388
And actually, this was hugely successful for us, as it did prove the initial concept of Rhythm Action into a fun, understandable, playable experience, and helped us to get the project fully greenlit.

77
00:08:34,298 --> 00:08:39,544
but it also did what I hoped it would do, which is kind of set up the fundamentals of how we could approach designing the full game.

78
00:08:40,966 --> 00:08:44,871
And I have a short video here kind of showing you a little bit of what that prototype was.

79
00:08:45,211 --> 00:08:46,293
So let's take a look at that.

80
00:09:57,409 --> 00:10:06,669
Okay, so as you can see, and if you played the game, you know that this is actually extremely, extremely close to how the final project was in terms of direction and functionality in the gameplay.

81
00:10:08,874 --> 00:10:16,558
So I'm going to jump back a little bit of talking about the sort of design fundamentals that we had when we were kind of planning out this prototype and then going into the full game.

82
00:10:18,338 --> 00:10:24,822
So of course, what I imagined rhythm action to be was having gameplay actions synchronize their impact with the music beat.

83
00:10:26,082 --> 00:10:28,883
And when I say beat, in musical terms, I mean a quarter note interval.

84
00:10:30,024 --> 00:10:36,047
So in my mind, this made sense, having the impact land with the music, as it would basically make the impact feel stronger.

85
00:10:37,162 --> 00:10:45,304
But not only that, having the beat interact with the impact as well would also reinforce synchronization with the music.

86
00:10:46,484 --> 00:10:49,005
And honestly, I just thought this would feel really good in general.

87
00:10:50,105 --> 00:11:01,848
The core idea was that you were the star of a music video, and if you look at any music video or movie or trailer that's edited to the music or does something similar, they always do it where the hit of the action lands with the music, giving it that extra power.

88
00:11:03,388 --> 00:11:07,169
But we had a problem, because we weren't making a video or a music video or anything like that.

89
00:11:07,189 --> 00:11:07,950
We were making a game.

90
00:11:09,250 --> 00:11:17,413
And in action terms, gameplay, specifically technical action gameplay, we really kind of think of the gameplay in terms of your input.

91
00:11:17,653 --> 00:11:19,814
And the gameplay response is usually the result of that.

92
00:11:20,955 --> 00:11:28,197
And I was always looking at the result, that sort of impact of synchronization of music and action, as something that I wanted the player to feel.

93
00:11:28,717 --> 00:11:32,119
And we had to figure out a way to make a game that somehow gave the player that feeling.

94
00:11:33,160 --> 00:11:39,525
So what I designed with our programmer in the prototype phase was the foundation for the game, the sort of work backwards approach.

95
00:11:42,127 --> 00:11:45,749
So basically, we started with what we wanted and then just figured out how to get there.

96
00:11:46,850 --> 00:11:53,795
The solution we came up with was to interpolate all aspects of gameplay, regardless of when the player inputted their actions, to synchronize with the music.

97
00:11:55,396 --> 00:11:58,619
We used the sound system Wwise to take the music data playing in the game.

98
00:12:00,354 --> 00:12:07,497
We then converted the BPM, or the speed of the song, into a tick that the game would use to define where the beats or quarter note intervals were.

99
00:12:09,397 --> 00:12:17,400
And then we would interpolate animation and actions to run in coordination with that tick, which was again, generally in quarter notes, to drive all aspects of the game.

100
00:12:18,981 --> 00:12:28,164
And we called this, for us, we called it the Rhythm Synchro System, or RSS, which basically meant, you know, hey, don't worry where the beat is, we'll find it for you and we'll make it sync up for you.

101
00:12:29,386 --> 00:12:41,316
So as developers, we're assuming that the player will not press the buttons on the beat and create a system that works backwards to ensure that we cover for player error so that they get the desired impact no matter how they play.

102
00:12:42,416 --> 00:12:44,218
And I'll kind of show you how this works with an example.

103
00:12:46,279 --> 00:12:50,263
That example being the player's one beat light attack, the basic attack that you do in the game.

104
00:12:51,103 --> 00:12:56,628
So this is an attack that takes one quarter note, or beat, from inputting the attack to landing on the next following beat.

105
00:12:57,928 --> 00:13:03,051
The goal being that no matter where the player inputs their action, the attack will always land on a quarter note interval.

106
00:13:04,312 --> 00:13:08,355
So here's the extremely crude timeline for quarter notes and their subdivision in eighth note.

107
00:13:09,235 --> 00:13:16,080
And in this situation, which I'm going to show you, we have just timing, which is what the attack was based around, one beat from input to impact.

108
00:13:17,861 --> 00:13:22,185
So in this case, ideally the player would input their attack on the beat and the impact would be on the next beat.

109
00:13:22,625 --> 00:13:27,369
And we don't need to do anything because there's no interpolation, it's exactly as planned, this is fantastic.

110
00:13:28,050 --> 00:13:33,434
But we knew that this would never be the case because people will miss this or not play with the beat sometimes.

111
00:13:35,296 --> 00:13:41,862
So let's say the player inputs their beat late, sorry, inputs their input late, which would be a little bit after the beat timing.

112
00:13:42,984 --> 00:13:46,948
In this case, we speed up the animation so the impact will still land in the same place.

113
00:13:47,308 --> 00:13:49,570
The animation is the same, it's just slightly sped up.

114
00:13:51,192 --> 00:13:53,775
The same goes for if the player is pressing their input early.

115
00:13:54,936 --> 00:14:00,141
The animation would be extended to land on the beat, but again, the impact timing is always the same.

116
00:14:02,076 --> 00:14:09,140
And this process of looking for players' inputs and assigning the correct impact timing was constantly happening on the backend with our RSS system.

117
00:14:09,801 --> 00:14:16,805
And this logic even worked for passive inputs, like the player just pressing the stick and having the player's footsteps interact with the beat, like running.

118
00:14:20,424 --> 00:14:25,807
Okay, so we have our basic kind of logic with this RSS system and the underlying systems that we developed.

119
00:14:26,488 --> 00:14:35,113
But now I just want to talk about how this kind of worked in our favor to finding our key core game loop, and then how we expanded on it to hit the intended player reaction that we wanted.

120
00:14:38,255 --> 00:14:48,641
So the great part about having actions impact on the beat is that with our logic, we had actually inadvertently created what we called our positive feedback loop within the system that we made.

121
00:14:50,198 --> 00:14:53,562
So this helped players play the music even without UI telling them to do so.

122
00:14:54,162 --> 00:15:02,131
And again, we wanted to create a game that had natural flowing action without gameplay telling the player when they should play with UI.

123
00:15:03,293 --> 00:15:03,994
So how did this work?

124
00:15:05,255 --> 00:15:07,417
And I will use combat again as an example.

125
00:15:08,952 --> 00:15:10,033
and it all starts with the input.

126
00:15:10,633 --> 00:15:19,638
So the player's gonna input something, and in this case, it'll be an attack, which, just for the case of this graph, we're gonna assume it to be perfect timing if input on beat.

127
00:15:20,819 --> 00:15:22,260
But again, we're not gonna force that on the player.

128
00:15:22,420 --> 00:15:24,141
They can press the button whenever they want.

129
00:15:24,321 --> 00:15:25,341
We only guide them to that.

130
00:15:26,822 --> 00:15:31,865
So again, if they press an action, whenever inputted, the action will impact on beat.

131
00:15:33,462 --> 00:15:43,570
And if you do combos by linking attacks and the impact is on beat, by just attacking again when the attack hits, it will then have the player responding in perfect timing to continue attacking.

132
00:15:45,251 --> 00:15:53,838
And if the player somehow gets off beat, let's say they button mash or they miss something, they just need to look at their next action or attack to get back on and continue playing in rhythm.

133
00:15:54,939 --> 00:16:00,363
So at its core, again, we essentially created a self-servicing cycle, which we called our positive gameplay loop.

134
00:16:03,499 --> 00:16:05,819
So we had that philosophy that was working out great for us.

135
00:16:06,140 --> 00:16:14,061
The general systems were working together to support the player playing to the music, but we wanted to feel even more special, because the idea is we wanted you to feel like a rock star.

136
00:16:15,121 --> 00:16:18,462
So part of that approach that we took was focusing on these points.

137
00:16:19,882 --> 00:16:27,724
The first being, we wanted you to have a positive reaction when playing to the music to encourage that type of rhythm action gameplay that we ideally hoped you to play with.

138
00:16:29,650 --> 00:16:34,431
But at the same time, we wanted to not punish the player for messing up or not always attacking in rhythm.

139
00:16:36,152 --> 00:16:45,314
The key goal was that this would be an accessible experience to those without a musical background, and that was constantly providing the player with a positive feeling.

140
00:16:46,054 --> 00:16:52,536
And to do that, we needed to figure out ways to inform the player how to play, that they're playing well, and also not discourage them if they weren't.

141
00:16:54,335 --> 00:17:08,361
And for you to be able to play in like a rock star without having, without playing musically, without having musical experience, you may notice this directly correlates to our protagonist and the narrative, who himself doesn't have a musical background.

142
00:17:08,401 --> 00:17:13,163
So this is all sort of coalescing in this sort of a full package experience as we expanded on this.

143
00:17:15,984 --> 00:17:21,466
So the main approach we used was making it clear when you succeeded, but downplaying if you didn't perform perfectly.

144
00:17:22,862 --> 00:17:30,444
One of the basics of successfully playing in perfect timing was that we would have an audio response and try to make your actions feel more like part of the song.

145
00:17:32,405 --> 00:17:38,627
So if you were to attack on beat, if you played the game, you know there's a vocalized hey or yeah that has an immediate response.

146
00:17:39,207 --> 00:17:41,988
And in game, it looked and sounded like this, which you probably know.

147
00:17:49,997 --> 00:17:51,999
Another example would be if the player was dashing.

148
00:17:52,899 --> 00:18:00,085
It had a normal sound effect with it, but when done in rhythm, we would add a drum hi-hat to it to add a musical element to the dash effect.

149
00:18:07,151 --> 00:18:13,236
So subtle, but these small things kind of added up to just sort of make it feel like more part of the music.

150
00:18:15,815 --> 00:18:16,696
But we didn't stop there.

151
00:18:17,817 --> 00:18:23,863
We had a lot of UI also respond to just timing attacks to give the player more feedback as if they were playing to the music.

152
00:18:25,524 --> 00:18:32,751
So we had a visualization of just timing around the player with a note mark, as well as added VFX around your metronome-like hovering cat companion, 808.

153
00:18:35,493 --> 00:18:40,738
We also had the health and score meter react similarly with vivid colors flashing when actions are timed correctly.

154
00:18:42,715 --> 00:18:47,138
And of course, we did things like include physical feedback with the controller rumble when things were timed perfectly.

155
00:18:49,519 --> 00:19:02,087
And then we had our score ranking system, which along with indicating just timing, like I showed you previously, also adjusted its rank dynamically, increasing more when the player played with better rhythm with bonuses and scores.

156
00:19:03,207 --> 00:19:05,629
But the score system didn't penalize you for not playing in time.

157
00:19:05,829 --> 00:19:07,690
It just adjusted the way the meter changed.

158
00:19:09,195 --> 00:19:16,240
And then there was more of a secret element, but we added damage bonuses to just timing attacks, which made battles quicker when played in time.

159
00:19:17,140 --> 00:19:22,083
And we specifically didn't show damage points in game to not make you feel like you're doing less damage.

160
00:19:22,644 --> 00:19:27,367
So it's more of a subtle hidden feature where you just tend to feel like you're playing better when you're playing in rhythm.

161
00:19:30,889 --> 00:19:36,953
And on the opposite, if you didn't play in time, we just didn't have any of these features show.

162
00:19:38,700 --> 00:19:47,008
So the thing is that the UI didn't have additional effects, you wouldn't get that sound feedback, and the score system wouldn't have those bonuses, along with your damage being its normal level.

163
00:19:48,089 --> 00:19:54,575
But your attacks still landed with the music no matter what, and our sound design had hits always play with musical audio all the time as well.

164
00:19:55,476 --> 00:20:00,621
So overall, not having these extras didn't feel like a failure and wouldn't distract you when playing.

165
00:20:01,803 --> 00:20:09,513
The only obvious thing was after battle we would give you a rank that reflected your performance to show where you needed improvement, but we didn't want to discourage you during combat.

166
00:20:12,554 --> 00:20:23,479
However, there were clear game elements that when they were explicitly tied with a very specific timing, we did use UI to show the player how they were performing.

167
00:20:24,580 --> 00:20:27,901
We did want you to know where there was room for improvement, when it really mattered in gameplay.

168
00:20:29,002 --> 00:20:33,844
The most obvious version of this being the combo finishers, which we call beat hits.

169
00:20:35,929 --> 00:20:45,754
So looking at from the perfect version on the left, in the game they have an explicit countdown, so performing in perfect timing, we're going to acknowledge that timing.

170
00:20:46,214 --> 00:20:58,699
We show you specifically the word perfect will appear on the screen, and you can even see some screen effects come in to sort of support that as well to make it feel like you did a great job, as well as you can see the follow-up attack, the sort of two bursts of energy that appear on the ground.

171
00:21:00,538 --> 00:21:07,201
Now, if the player performed what we would consider a good timing, not quite perfect, we would still count it as a success.

172
00:21:08,041 --> 00:21:12,763
And the attack will play out as normal, but we do let you know that it wasn't perfect, of course.

173
00:21:13,343 --> 00:21:15,844
You can see the good, instead of perfect, good is being shown.

174
00:21:16,464 --> 00:21:22,867
And if you notice, there's even those sort of elements, the screen elements, sort of lines coming in on the side, those are not there.

175
00:21:23,647 --> 00:21:28,389
Again, not too distracting that you wouldn't notice that they weren't there, but again, not as intense as if they were perfect.

176
00:21:31,269 --> 00:21:33,370
And in this case, we actually do have a failure state.

177
00:21:33,390 --> 00:21:34,311
It's technically a miss.

178
00:21:35,631 --> 00:21:42,595
But the character still proceeds with their final attack, but they don't have that sort of bonus attack of those two energy things that are coming out after them.

179
00:21:43,680 --> 00:21:51,366
And so while this is technically a failure, the final attack does play out normally and the player doesn't stall or feel like you can't attack, so it doesn't feel terrible.

180
00:21:52,427 --> 00:21:54,448
And we try to downplay failure as much as possible.

181
00:21:54,808 --> 00:21:57,931
You'll notice there's no negative UI, we don't tell you miss on the screen.

182
00:21:59,032 --> 00:22:06,637
And the center two circles just sort of fade to red instead of just feeling like maybe put an X on it to make you feel like you missed your timing or things like that.

183
00:22:07,538 --> 00:22:14,121
So clear enough so that the player could understand that the attack didn't proceed, but not enough to be discouraging was what we thought.

184
00:22:16,182 --> 00:22:22,125
And again, when there was a key timing element that alters gameplay, we want to make sure that we were clear with UI information.

185
00:22:23,134 --> 00:22:30,597
We decided to do this with some special attacks, which had rhythm game-like UI, or a rhythm parry system, which visualizes a call-and-repeat pattern.

186
00:22:31,257 --> 00:22:39,160
Since, again, these were specific musical games with a success and failure rate, and we didn't want the player to guess on how their performance was when they were playing these sections.

187
00:22:43,024 --> 00:22:50,530
So that combat system which I've just been talking about was arguably our biggest challenge but also our greatest strength as it was our key gameplay mechanic.

188
00:22:51,671 --> 00:23:02,100
The iteration and small touches all added up to a positive experience for players that we felt and even got feedback that was informative on how to play but not overbearing, which was great for us.

189
00:23:03,083 --> 00:23:14,874
But as we fleshed out how to make the rest of the game, we needed to take our learnings that were the foundation that led us to finding that core gameplay, that sort of working backwards from the impact idea, and ingrain it in everything else with the rest of the game.

190
00:23:16,035 --> 00:23:25,784
So going forward, I'll use the word impact again, but you should think of it less of a physical hit and more of about the combination of a feature and music experience intersecting together.

191
00:23:29,727 --> 00:23:34,089
So we had a system that helped things arrive at our impact points with the RSS system.

192
00:23:35,090 --> 00:23:40,072
But as developers, we kind of needed to adjust our approach to make sure we knew what we were designing towards.

193
00:23:40,912 --> 00:23:44,654
And to do that, we had to start essentially thinking backwards, adjusting our workflow.

194
00:23:46,715 --> 00:23:56,040
So when designing every part of the game, I instructed the team to think of every aspect of the game as something that contributes to a world that is synchronized with the music, supporting the player experience.

195
00:23:57,045 --> 00:24:04,651
We learned early in the prototype phase that designing a feature then adding in musicality afterwards didn't work to make the experience feel coherent.

196
00:24:05,052 --> 00:24:08,334
Instead it kind of made it feel tacked on or sometimes even dissonant with the music.

197
00:24:10,416 --> 00:24:16,261
So we applied the approach of thinking from the desired impact and then working backwards with the intended musicality.

198
00:24:19,284 --> 00:24:31,793
and a much simpler version of this to explain it, is we would just basically think of where every action should hit ideally musically, and then we would create features leading into that timing.

199
00:24:32,914 --> 00:24:36,757
So the music or beat would continue regardless of what the player would do.

200
00:24:37,738 --> 00:24:39,259
Obviously, we can't change music.

201
00:24:39,299 --> 00:24:43,982
We can't just stop the music and restart it when the player wants to do what they want to do.

202
00:24:44,383 --> 00:24:45,584
That's going to continue regardless.

203
00:24:46,633 --> 00:24:51,015
But we can change how the player could interact with the music.

204
00:24:52,135 --> 00:24:56,317
So to do this, we had to kind of rethink how we would design features in the game and adjust our workflow.

205
00:24:58,178 --> 00:25:04,200
So almost every aspect of the game was synchronized to the music, and we needed to know what musical timing we wanted to hit.

206
00:25:05,000 --> 00:25:06,321
Sometimes it would be a single beat.

207
00:25:06,841 --> 00:25:10,042
Sometimes it was the beginning of a measure of a part of the song.

208
00:25:10,283 --> 00:25:16,005
And sometimes it was a specific part of a song, like a guitar solo or the chorus kicks in or something like that.

209
00:25:16,877 --> 00:25:19,678
So everything in the game had an ideal timing of when it would occur.

210
00:25:21,498 --> 00:25:35,300
So if the game is always moving with the music, and this was a constant sort of just a timeline that was always proceeding, we would basically identify what's the ideal timing for the feature's impact, the combination of the result with the music.

211
00:25:36,401 --> 00:25:43,562
And then with that in mind, we then work backwards to know when things needed to start to get that desired result naturally in gameplay.

212
00:25:44,673 --> 00:25:52,351
and just like in the combat example since the user defines the initial interaction we also need to know how to adjust or interpolate each feature to make it work

213
00:25:53,410 --> 00:26:00,875
So I showed you some very big things like the whole combat mechanics, but even very small things in the game were designed with this in mind.

214
00:26:01,636 --> 00:26:07,100
For example, something that all developers can relate to is doors.

215
00:26:08,841 --> 00:26:22,071
So for our game, doors not only just need to open, which is the ideal thing that we want doors to do, but they needed to sync up with the music, opening on beat, based off proximity with the player, so that it worked with the musicality of the world.

216
00:26:23,114 --> 00:26:25,817
And I'm going to show you a video, and it's going to seem very, very subtle.

217
00:26:26,417 --> 00:26:37,128
But you can see that the speed of this door opening, depending on when the player interacts with it, will either be faster or slower, depending on when the player interacts with it.

218
00:26:37,789 --> 00:26:43,495
And that's so it hits its ideal musical timing, which is that the door should always open on beat to support the music of the game.

219
00:27:06,158 --> 00:27:07,479
OK, very, very subtle.

220
00:27:08,220 --> 00:27:10,381
But you also may have noticed we have a debug menu on the bottom.

221
00:27:10,662 --> 00:27:20,490
And that helped us sort of see the game in a musical view and see is that impact timing where we ideally would want things to occur happening where it's intended to be.

222
00:27:20,590 --> 00:27:22,912
And we would always check to make sure things were working correctly.

223
00:27:25,053 --> 00:27:28,176
So that was something that we used throughout the entire game.

224
00:27:28,436 --> 00:27:30,638
The doors were used in multiple levels and things like that.

225
00:27:31,118 --> 00:27:32,920
But we also had more unique experiences.

226
00:27:34,127 --> 00:27:36,330
and we call these kind of unique events or bespoke events.

227
00:27:37,091 --> 00:27:39,395
And this one actually is another door, fantastically.

228
00:27:40,697 --> 00:27:44,743
And this is one that we needed to sync to the first beat of a measure to transition musical tracks.

229
00:27:45,604 --> 00:27:47,888
And I'll kind of let this video play and then I'll talk about it.

230
00:27:56,656 --> 00:28:01,459
OK, so in this case, we don't know when the player is going to hit that button to open the door.

231
00:28:02,179 --> 00:28:05,241
We know the final action will be on a beat, but we don't know what beat it will be.

232
00:28:06,521 --> 00:28:21,310
So we did things like create an initial loop state after it activated to basically wait until the next measure would occur, where then we can then do the opening animation that transitioned with the musical element so that it would transition correctly into the next musical section.

233
00:28:22,310 --> 00:28:29,714
And this all worked from, again, working backwards from when the song should change, to when the door should open, to what happens when the player interacts with it.

234
00:28:29,974 --> 00:28:31,135
Always thinking backwards from there.

235
00:28:33,356 --> 00:28:35,257
So these were small details for the levels.

236
00:28:35,918 --> 00:28:40,060
But on the macro scale, the level design itself was also based around musicality.

237
00:28:41,040 --> 00:28:49,005
Our approach to level design structure focused on musical peaks and valleys, which was a starting point before we even went into greyboxing levels.

238
00:28:50,103 --> 00:28:54,747
And I have an image of what our game design document looked like.

239
00:28:55,167 --> 00:28:59,831
And I apologize for it being in Japanese, but I just wanted to show you the original documentation.

240
00:29:00,471 --> 00:29:04,154
But basically, this is the initial draft of a level design document for our game.

241
00:29:05,776 --> 00:29:09,018
We had story beats and event beats that coincided with musical points.

242
00:29:09,258 --> 00:29:10,860
We wanted to impact together in the level.

243
00:29:12,041 --> 00:29:14,082
We would often model them around song structure.

244
00:29:14,222 --> 00:29:17,925
For example, choruses were fights, and verses were the in-between platforming.

245
00:29:19,028 --> 00:29:28,630
And these were kind of like mood graphs that gave us the sort of impact points in our level goals, which then we would lock in and work backwards from before we even started laying out the levels physically.

246
00:29:31,931 --> 00:29:35,712
So all these features, both large and small, were designed in a fairly similar fashion.

247
00:29:36,672 --> 00:29:44,154
We would plan them out, making a detailed timeline of how things would occur on paper in a way we could see things musically and gameplay-wise making sense.

248
00:29:45,936 --> 00:29:48,517
Then we would build them out in a prototype or gray box form.

249
00:29:48,918 --> 00:29:59,844
This was very important for us, but in this phase we would focus on getting all the key elements, especially sound design, in and functional as soon as possible to ensure that the proposed idea was working as intended.

250
00:30:00,644 --> 00:30:07,127
So I'll come back to this in the takeaways, but this approach was immensely helpful in identifying what worked quickly and what needed to be adjusted.

251
00:30:08,868 --> 00:30:15,172
So if adjustments were needed, depending on the severity, we would adjust them right there in the prototype phase until we got them to where we wanted them to be.

252
00:30:16,363 --> 00:30:19,284
or if they didn't work, we basically returned and rethought the whole plan.

253
00:30:20,685 --> 00:30:27,307
But if the early version was clearly the right step, we would lock in the timing and feature set and then build them out with everyone on the team.

254
00:30:28,207 --> 00:30:32,849
It was important that we didn't leave features dangling if they would work out later on.

255
00:30:33,909 --> 00:30:40,872
We wanted to identify those impact points that they were working correctly early, and then we could spend more time iterating and improving the quality of them.

256
00:30:44,127 --> 00:30:51,431
And so those were just some ways that we approached the workflow, but then we had a very extreme version of this.

257
00:30:51,971 --> 00:30:54,592
And this was any time that we were using the licensed music in the game.

258
00:30:55,813 --> 00:31:03,716
And this was because of my stance on using the licensed music was that I wanted to pay tribute to the songs that we were using and not just use them as background music.

259
00:31:05,277 --> 00:31:11,080
So these sections were essentially reverse engineered around the song so that the gameplay would sync up with it in all aspects.

260
00:31:12,401 --> 00:31:19,628
We had boss fights where phases and actions were determined by the structure as well as specific rhythmic patterns of the songs dictating attacks or movesets.

261
00:31:21,009 --> 00:31:24,893
And then we had full stages, which were, again, made completely around the structure of the song.

262
00:31:25,333 --> 00:31:28,076
And these were by far the most complicated thing that we had to do in this game.

263
00:31:29,357 --> 00:31:34,362
I have examples from both of these sections to give you a rundown on kind of how we made them work and the challenges that we had with them.

264
00:31:36,603 --> 00:31:39,504
But first, again, when I say pay tribute to the songs, what do I mean?

265
00:31:41,124 --> 00:31:47,746
It really means that we would literally design the entire sections around the song as if they were a music video.

266
00:31:48,506 --> 00:31:52,907
We would break apart the song, we would analyze it, and bring gameplay and event beats into the song.

267
00:31:54,027 --> 00:31:57,208
And this required an even more intense production and pre-production timeline.

268
00:31:57,648 --> 00:32:05,550
And for a detailed example, I'll use the first boss of the game against a robot named QA1Mill, which we used the licensed song One Million by Nine Inch Nails.

269
00:32:08,809 --> 00:32:17,491
So we always started with a general image or idea of what the boss fight would entail, including story beats, the visual, the type of fight we want to have.

270
00:32:18,611 --> 00:32:21,751
But once we knew what song we were putting it towards, we followed these steps.

271
00:32:23,052 --> 00:32:26,212
The first being is that we would take the song and we would break it apart.

272
00:32:26,792 --> 00:32:29,173
We would identify its structure and just kind of lay it all out.

273
00:32:30,213 --> 00:32:36,094
We'd identify parts of the songs that could theoretically be looped, which meant longer gameplay opportunities, and parts that could not.

274
00:32:38,052 --> 00:32:46,015
And then we put it all in a timeline and start assigning where we think gameplay would be, where in-game events could occur, and things like that.

275
00:32:46,695 --> 00:32:53,538
And we took our initial ideas for the fight, like general attack ideas and phases, and how we could match how the song feels at certain intervals.

276
00:32:54,839 --> 00:33:03,142
Cutscenes and story beats were tied in with the music to not only be fun, of course, but to reinforce the connection with the song and make sure that they're musically connected.

277
00:33:06,414 --> 00:33:10,938
And after we had that general layout defined, we would then go into the specifics of each section.

278
00:33:12,240 --> 00:33:23,130
Creating cutscenes was comparatively easy because we were setting them mostly to establish lengths of songs, but it was the playable portions that had to be broken down to ensure that the song was always syncing appropriately to how you played.

279
00:33:25,387 --> 00:33:37,293
So here's a visual breakdown, again, sorry for the Japanese, but this is how we just kind of wanted to show you the original documentation, where we created a flowchart based off how the music should change based off the player's progress.

280
00:33:38,688 --> 00:33:43,890
To prevent the song from awkwardly changing, we identified sections that needed to play out, like the lyrical sections.

281
00:33:43,950 --> 00:33:46,691
We didn't want to cut those off midway through a lyric.

282
00:33:47,351 --> 00:33:52,533
So we did things like adjust the boss's HP so the song structure would be kept if the player was playing too well.

283
00:33:53,893 --> 00:34:03,156
The opposite was if the player was taking too long, we factored that in with looping sections to keep the song in the consistent phase without making it feel awkward or feeling like a broken record.

284
00:34:04,554 --> 00:34:10,676
And this page is just a visualization of how we broke down the lyrics and looping sections of one phase of one boss fight.

285
00:34:11,797 --> 00:34:20,080
Each boss fight and each phase and each song was different, so they each kind of required their own unique take on how they would work, so we need to break down each one individually.

286
00:34:23,481 --> 00:34:34,185
So then, once we had this kind of overall structure done, we would comb through the actual musical audio data, or what we call stems, looking for rhythms that can be used for certain movements or attacks.

287
00:34:36,192 --> 00:34:39,675
So at this point, we had general attack ideas for how the bosses would fight.

288
00:34:40,275 --> 00:34:43,958
But it's now when we would kind of finalize the rhythm that these attacks would come up with.

289
00:34:45,038 --> 00:34:54,805
So in general, we followed the approach that any time an attack would be specifically tied to a musical part of the song, they should happen exactly when that section happens in the music.

290
00:34:55,466 --> 00:35:03,512
And we would do that by dictating it with cues set up in the audio data, and then also determined by the enemy AI based how the player was playing.

291
00:35:04,645 --> 00:35:07,386
And a good example is a video I'm going to show you here.

292
00:35:07,726 --> 00:35:12,967
But because of cool music licensing restrictions, I can't actually play you the song.

293
00:35:14,347 --> 00:35:15,587
But I can play the sound effects.

294
00:35:16,507 --> 00:35:17,187
So it's close enough.

295
00:35:17,367 --> 00:35:21,708
And I think it kind of helps with understanding what I'm talking about.

296
00:35:22,408 --> 00:35:22,989
So let's check this out.

297
00:35:31,397 --> 00:35:47,139
Okay, so if you play the game, you probably know this section and the song, but this boss uses, obviously uses lasers out of his hand as a sort of gameplay mechanic that we wanted to do, but it obviously has a musicality to it with this guitar riff that's included, this da da da da, da da da da.

298
00:35:48,380 --> 00:35:53,364
and if you play the game and you know that song, that that guitar riff is constantly happening in the background.

299
00:35:53,904 --> 00:36:04,972
And so we made it that obviously we want the player to experience this sort of attack as a way to play the fight, but we made sure that that attack was always happening in tandem with when that part of the song was playing.

300
00:36:06,393 --> 00:36:09,295
So that was just one example of one attack sort of syncing up with the music.

301
00:36:12,847 --> 00:36:19,011
And then once we had sort of the gameplay aspect done, we would then turn to non-gameplay related elements to tie to the song.

302
00:36:20,392 --> 00:36:22,754
We would look at the environment design and start breaking it apart.

303
00:36:23,755 --> 00:36:27,857
We would identify things that could pulse to match the song's BPM or speed.

304
00:36:29,158 --> 00:36:34,222
Or maybe there were things that we could flash or move to specific melodies to make it feel like it's part of the song.

305
00:36:36,278 --> 00:36:44,182
And then depending on the song's change in mood or volume, we maybe would change the colors of objects or the way things move just to match that.

306
00:36:45,663 --> 00:36:54,147
And there were a lot of other things that just kind of tied to specific ways that the player interacted with the boss, things that the player could do, special attacks that the boss can do.

307
00:36:55,328 --> 00:36:57,669
And this all was basically around the same concept, right?

308
00:36:57,789 --> 00:37:02,752
If we were making a music video, we needed everything in the game to sync up so everything felt synchronized.

309
00:37:05,919 --> 00:37:07,400
So that was our very basic approach.

310
00:37:07,800 --> 00:37:13,823
Some stuff worked and some didn't, and we were constantly iterating to find what matched the song times and expressions perfectly.

311
00:37:14,964 --> 00:37:19,207
But one thing that we kind of kept consistent was we rarely, if ever, changed the initial structure.

312
00:37:19,667 --> 00:37:23,389
And this was just based off what I talked about before, is we were building it from an existing song.

313
00:37:23,449 --> 00:37:25,090
We were not going to change that song.

314
00:37:26,721 --> 00:37:37,005
But that final steps of adjusting the rules of each gameplay section, creating and adjusting actions and attacks to the movement, and adjusting the environment, were always to get it as close to the song as possible.

315
00:37:38,606 --> 00:37:41,327
And this was constant, even to the end of development.

316
00:37:42,008 --> 00:37:43,768
So realistically, it felt like it never ended.

317
00:37:43,808 --> 00:37:45,689
There was never a clear cut, okay, it's good enough.

318
00:37:47,650 --> 00:37:54,233
Probably one of the final things we did before even finishing sending the game off was adjusting the way lights flash during boss fights and things like that.

319
00:37:56,078 --> 00:38:05,644
And while it was a lot of work, I would say that it wasn't that bad because the stages that we set to licensed music were much, much harder to do.

320
00:38:08,846 --> 00:38:16,511
The idea here was that we wanted you, of course, to play to the music, but we wanted to keep the freedom of how you played and not feel like you were just on a linear path.

321
00:38:18,356 --> 00:38:22,424
So to do this we had to find lots of ways to make the stages sync up with your actions.

322
00:38:23,125 --> 00:38:28,296
Sometimes this required thinking of unique solutions for every section the way that the levels transitioned.

323
00:38:29,615 --> 00:38:50,430
An example I have is a sequence very early in the game of an escape sequence in the level where we had to think of multiple ways for the player to re-sync with the song transition based off how they encountered it so they can change cleanly into the chorus or battle portion of the stage so the song didn't feel like it was changing awkwardly.

324
00:38:51,911 --> 00:38:56,755
So remember that we always wanted the player to feel like these sections worked even if they were playing in a non-perfect way.

325
00:38:58,484 --> 00:38:59,485
and I have videos of this.

326
00:38:59,745 --> 00:39:07,692
And again, I can't play the original licensed song, but I can use the unique version we made for players who stream the game, which follows the same structure and gives that point across.

327
00:39:10,293 --> 00:39:13,414
So, for now, I just want you to see how this section plays through.

328
00:39:14,214 --> 00:39:22,437
But setting it up, if you haven't played the game, the player's running through a level that they're kind of free to sort of move around and do some actions based off, you know, how they feel about doing them.

329
00:39:24,077 --> 00:39:28,919
But they're leaving this area, and we want them to transition to a battle which acts as a chorus.

330
00:39:29,439 --> 00:39:32,980
And we want that transition to be very clean and match with how the song's supposed to play.

331
00:39:34,013 --> 00:39:39,217
and the player is going to transition using these grappling or magnet points to eventually transition to a fight sequence.

332
00:39:39,898 --> 00:39:42,420
So this is the official correct timing that I'm going to show you.

333
00:39:56,072 --> 00:39:58,534
Okay, so that should have sounded like it matched the music.

334
00:40:00,518 --> 00:40:05,399
So the issue here is we don't know when the player will start the sequence of events because they're free to play in this section.

335
00:40:05,739 --> 00:40:08,360
But we wanted to transition correctly to again, match the song.

336
00:40:09,300 --> 00:40:17,141
Again, we knew our desired impact point, but we needed to work backwards to figure out how the player experiences it correctly and adjust for their play style.

337
00:40:18,701 --> 00:40:22,942
So for that part, we took two sections we could adjust to make sure you can match up with a song transition.

338
00:40:23,742 --> 00:40:26,363
That being the magnet points and the landing animation.

339
00:40:27,383 --> 00:40:38,592
So depending on what beat you grabbed the first magnet and how many beats were left until the song needed to naturally change over, we would adjust how many magnets you had to grab and how long the landing animation was.

340
00:40:40,033 --> 00:40:41,634
And there were lots of mixes and matches.

341
00:40:42,755 --> 00:40:47,659
For example, five magnets or one beat animation or four magnets or two beats of the landing animation.

342
00:40:48,380 --> 00:40:51,943
And I think there were up to 18 different combinations in this case of how this can play out.

343
00:40:52,938 --> 00:40:55,441
And all of this effort, ideally, you would never notice.

344
00:40:55,981 --> 00:40:57,143
And it would just work.

345
00:40:58,124 --> 00:41:02,108
But to show you that I'm not making this up, I will show you what some of these variations look like.

346
00:41:04,471 --> 00:41:09,957
So this is a version where there's three magnets, and you'll have the longest three-beat landing animation to connect.

347
00:41:23,652 --> 00:41:25,956
Okay, so that should still sound like it works, right?

348
00:41:27,259 --> 00:41:32,809
And then for this version, it's when the game determines you need five magnets and the shortest one beat landing animation to sync up.

349
00:41:46,826 --> 00:41:52,472
All right, and this was just one small part of a big sequence with a bunch of these type of situations.

350
00:41:53,533 --> 00:42:02,641
There wasn't one answer that solved every problem, and we needed to approach each situation with a unique angle, but the development logic, realistically, was always the same.

351
00:42:02,741 --> 00:42:08,187
We were always working backwards from the impact of when the player should land to start the course for this fight, for example.

352
00:42:09,264 --> 00:42:14,846
So realistically, it was a lot of hard work and clever engineering, but the end goal was the same.

353
00:42:15,307 --> 00:42:23,250
We just wanted the player to feel like they were playing correctly no matter how they played, even if technically the last two examples I showed were theoretically wrong.

354
00:42:26,391 --> 00:42:32,674
Okay, so those are some very specific things showing how our workflow changed and how we approached design from a musical perspective.

355
00:42:33,234 --> 00:42:36,576
But as I spoke before, this extended to almost every section of our team.

356
00:42:37,642 --> 00:42:45,750
So each section had their own unique adjustments to coordinate their approach, which required section leads to rethink their methods and when they should get involved in features.

357
00:42:47,591 --> 00:42:49,974
The most obvious example is something like music and sound.

358
00:42:50,334 --> 00:42:57,641
They had to completely overhaul the work timeline to assist in features at a very early state instead of coming in later in development to finish polishing up things.

359
00:42:59,864 --> 00:43:08,934
And all of this was on top of all the other challenges we had, like our attempt at a new art style that required animation, art teams, and cutscene production to learn all new techniques.

360
00:43:10,455 --> 00:43:20,326
But in the end, clearly deciding the direction, having the whole team buy in early to the concept, and always reinforcing it from myself and section leads kept the team focused on what we were making.

361
00:43:23,393 --> 00:43:24,554
And so now some takeaways.

362
00:43:25,174 --> 00:43:35,762
And again, you may not all be making a rhythm action game like this, but some ways we approach this new challenge may work for you if you are thinking of branching into something that you or your team isn't quite familiar with.

363
00:43:36,623 --> 00:43:43,308
And I'll preface this by saying that I realized this when I was writing it, that a lot of this seems like very basic common sense.

364
00:43:44,428 --> 00:43:53,957
But it is frighteningly surprisingly how easy it is to forget these things when you're struggling to make sense of a brand new concept and figuring things out as you go, even for an experienced team.

365
00:43:54,878 --> 00:44:08,611
So that being said, one of the biggest takeaways that I'll echo throughout this section is that we spent a good deal of time early on in the project finding a process and workflow that worked for the unique challenges that making this game required.

366
00:44:09,926 --> 00:44:13,852
and a lot of these methods were almost the opposite of how we approach things on previous projects.

367
00:44:14,894 --> 00:44:24,169
So realigning the team was both difficult as well as actually eye-opening since the techniques mentioned here we can see ourselves using on future projects going forward regardless of the content of the game.

368
00:44:26,209 --> 00:44:33,755
So first, for HiFi Rush, we always had a final goal that was communicated to the team members, giving us a blueprint to work backwards from right from the start.

369
00:44:34,675 --> 00:44:39,679
It's often in game development you have members working forward without a clear image of where things end.

370
00:44:39,879 --> 00:44:40,980
You have things like scope creep.

371
00:44:41,700 --> 00:44:50,707
But here, instead of making things abstract, we tried to make that goal post clear to avoid confusion as multiple sections work together to build features and scope to a finish line.

372
00:44:52,912 --> 00:45:04,295
The next thing is that I discussed this earlier, but with our blueprint, we focused first on getting everything in and playable, especially our key features, which in our case were our impact points and how they work with the music.

373
00:45:05,355 --> 00:45:17,198
The goal here was taking anything conceptual, which can be confusing, and in Hi-Fi Russia's case, musicality sometimes is, and making it real, so any lingering questions from the team could be answered in a gameplay form.

374
00:45:18,868 --> 00:45:28,398
And this led to our next point, that by having an early version running with temporary, yet directionally close assets, iteration was much quicker and allowed us to adjust scope.

375
00:45:29,700 --> 00:45:35,286
As we locked in ideas, polishing was easier to see and focus on, and direction was less likely to be misinterpreted.

376
00:45:36,974 --> 00:45:43,236
But all this really meant was that the image of what the final product would be became clearer to the teams at a much earlier state.

377
00:45:43,956 --> 00:45:49,878
This was in stark contrast to our previous projects, that finally the vision was kind of coalescing and seen at the end.

378
00:45:50,658 --> 00:45:55,920
So here we were able to, in some ways, reverse that late dev worry of, is this all going to come together?

379
00:45:56,320 --> 00:45:59,001
And instead just worry at the beginning of how complicated it was going to be.

380
00:46:01,940 --> 00:46:07,789
And while we learned a lot and had a lot of great success with this project, it did not come without its caveats and challenges.

381
00:46:09,030 --> 00:46:13,417
For example, there was this big production timeline before starting to dive in and make anything.

382
00:46:13,517 --> 00:46:18,144
As you saw, the licensed music sessions were even the most extreme example of this.

383
00:46:20,222 --> 00:46:33,543
Another was that when the game was kind of close to complete, it was hard or next to impossible to make big sweeping changes because of how closely combined gameplay and music was, which basically meant you would have to redo everything.

384
00:46:36,109 --> 00:46:43,270
Another thing that almost every part of the game, even reused assets, had to be custom tailored to each section of the game.

385
00:46:43,691 --> 00:46:50,912
So BPM changes, song nuances, those all kind of changed, even things that we assumed would be reused.

386
00:46:52,512 --> 00:47:00,994
And that required a lot of hand adjustments, so game developers had to go back and constantly reiterate on things that theoretically were working but not perfect.

387
00:47:02,950 --> 00:47:10,752
And this is something similar, but that there was just an insane amount of detail management making sure that everything in this game moved to the music and felt correct.

388
00:47:11,052 --> 00:47:13,032
And felt is kind of like a theoretical thing.

389
00:47:14,032 --> 00:47:18,193
Because obviously we did have things on a program side automatically sync to the music.

390
00:47:18,753 --> 00:47:26,635
Sometimes music isn't always logical, and balancing gameplay and music required combing through every part of the game to fine-tune details to match with the music.

391
00:47:27,355 --> 00:47:34,901
because the reality was that if it wasn't perfect, the game just wouldn't feel synchronized and the perception of, you know, this world being set to the music would be broken.

392
00:47:36,622 --> 00:47:37,563
So how do we handle this?

393
00:47:39,404 --> 00:47:42,387
Well, here's the thing, and I think this is an important point that we often forget.

394
00:47:43,427 --> 00:47:47,831
Just because we have challenges during development doesn't mean that everything needs to be fixed.

395
00:47:48,551 --> 00:47:50,252
Instead, it just needs to be recognized.

396
00:47:51,280 --> 00:47:54,502
So any developer will tell you that there is no perfect way to make a game.

397
00:47:55,503 --> 00:48:03,187
So we learned early that making this type of game was going to be A, difficult, and B, really annoying, even though we knew it would be fun as well.

398
00:48:04,869 --> 00:48:08,631
So all those key issues that I showed you before, that we knew would come up with development,

399
00:48:10,728 --> 00:48:13,309
We basically just acknowledged them early and planned around them.

400
00:48:14,189 --> 00:48:22,773
We could have spent time trying to find a fix for everything, but in a way, accepting the challenge and all the caveats let us focus on just making the content and quality of the game.

401
00:48:23,773 --> 00:48:32,637
So all those challenges we faced, we knew that they were inherent to the game that we were making, and we kind of prepared ourselves for them, picking our battles based off what our team could do.

402
00:48:32,737 --> 00:48:35,938
Because again, we weren't a big team and couldn't solve every issue that we would come up with.

403
00:48:38,919 --> 00:48:48,730
But outside of the important lesson we learned about accepting the difficulty of the project, there's some strong points that I think applies to any project trying something new, which we learned during development of HiFiRush.

404
00:48:49,531 --> 00:48:54,197
Again, all this sounds very basic, but it's amazing that even a professional team can forget these points.

405
00:48:55,660 --> 00:48:59,822
The first is you want to approach your challenge like what it is, something you are unfamiliar with.

406
00:49:00,582 --> 00:49:04,063
For this title, we basically told ourselves we need to relearn how to make a game.

407
00:49:04,743 --> 00:49:11,966
We worked on horror titles for so long that we had to put all of that know-how aside and just focus on work for what Hi-Fi Rush was supposed to be.

408
00:49:13,175 --> 00:49:15,897
We couldn't be overconfident, and we actually had to humble ourselves.

409
00:49:17,238 --> 00:49:19,980
And we used all of our learned knowledge as reference.

410
00:49:21,040 --> 00:49:32,408
And this helped us prevent the game losing its originality and identity in exchange for a safe and known experience by just relying on what we thought game design should be.

411
00:49:36,061 --> 00:49:38,583
The next lesson was getting things running as soon as possible.

412
00:49:40,204 --> 00:49:50,050
Once we planned everything out and the team was kind of aligned on goals, getting it running and playable while executing on the core idea allows for the team to align quicker on that final goal.

413
00:49:51,291 --> 00:50:01,077
This provides everyone with a good way to give good feedback, which by good I consider constructive feedback that leads to achieving the goal of the game rather than just a personal opinion.

414
00:50:03,598 --> 00:50:12,920
And then, for my final obvious point, but for Hi-Fi Rush, we took the time of really figuring out what the core of the game is and understanding what's necessary to build it.

415
00:50:13,920 --> 00:50:20,801
We obviously had our core pillars as a project, and we acknowledged the difficulties, and we decided to work around them instead of fixing everything.

416
00:50:22,222 --> 00:50:32,944
Since there is no correct way of making a game, it really is about finding a process that works for you and what your team is capable of doing, but most importantly, of what the game itself requires to be made.

417
00:50:34,045 --> 00:50:42,093
So whatever it is, what you want to do is find that early and stick with it, warts and all, because it's immensely important to realizing your vision.

418
00:50:43,194 --> 00:50:48,339
Just like we had to learn as we were doing it that sometimes to get to the end, we had to work backwards from it.

419
00:50:50,882 --> 00:50:51,302
And that's it.

420
00:50:51,762 --> 00:50:52,063
All right.

421
00:50:52,143 --> 00:50:53,544
So thank you for listening.

422
00:50:54,885 --> 00:50:55,146
Thank you.

423
00:51:02,694 --> 00:51:05,616
Yeah, I hope this was useful and enlightening for you.

424
00:51:05,976 --> 00:51:08,577
And if there are any questions, we do have some Q&A time.

425
00:51:09,498 --> 00:51:10,298
I managed to finish in time.

426
00:51:10,378 --> 00:51:13,199
But I must remind you, you must fill out the survey for this talk.

427
00:51:13,239 --> 00:51:14,200
They actually won't let you leave.

428
00:51:14,280 --> 00:51:18,022
If you're letting people leave, you can't leave until you fill out the survey.

429
00:51:18,322 --> 00:51:19,523
That is very important, I was told.

430
00:51:22,791 --> 00:51:24,832
Hi, uh, I just want to say I love the game.

431
00:51:25,513 --> 00:51:33,337
Um, so what was the process for deciding which license tracks to use and like for which sequences?

432
00:51:33,377 --> 00:51:40,381
So like one example, I really liked the use of the prodigy track in like one of the later kind of big fights.

433
00:51:40,541 --> 00:51:46,945
And so like, what was the process for deciding which songs you wanted and when did you kind of use them for which sequences?

434
00:51:47,495 --> 00:51:54,502
OK, the process for choosing licensed music was purely I just chose what I liked and then I put it in.

435
00:51:55,883 --> 00:52:03,651
But I got some feedback from members about stuff that, hey, wouldn't it be cool if that worked here or that doesn't work as well, and then we adjusted some stuff.

436
00:52:04,332 --> 00:52:06,253
For example, the prodigy section was something that was

437
00:52:07,554 --> 00:52:11,037
That situation was made, but actually wasn't tied to the Prodigy song.

438
00:52:11,637 --> 00:52:15,960
And then a team member came back and said, what if we coordinate to that section?

439
00:52:15,980 --> 00:52:18,521
And then we decided to make that sequence happen like that.

440
00:52:20,623 --> 00:52:20,843
Thanks.

441
00:52:21,583 --> 00:52:21,843
Thank you.

442
00:52:22,604 --> 00:52:23,505
Thanks so much for the talk.

443
00:52:23,885 --> 00:52:28,988
I was really impressed about how you all made something new and unique that you've never done before.

444
00:52:29,048 --> 00:52:32,070
In your talk, you said you spent about nine months in the prototype phase.

445
00:52:32,865 --> 00:52:37,729
But with it being something you've never done before, how did you decide on that timeline to be able to make a prototype?

446
00:52:38,950 --> 00:52:42,573
Well, the nine-month timeline was actually just sort of what we were told.

447
00:52:42,593 --> 00:52:44,254
It's like, you got nine months.

448
00:52:44,854 --> 00:52:48,277
So there was a lot of panic.

449
00:52:48,337 --> 00:52:52,580
But realistically, I think probably the first six months or so was like us figuring out.

450
00:52:52,620 --> 00:52:54,261
Actually, this was our first time using Unreal as well.

451
00:52:54,782 --> 00:52:57,143
So we were figuring out how to make things work

452
00:52:58,004 --> 00:53:00,265
as a game in general, and then figuring out what we can do.

453
00:53:01,306 --> 00:53:02,486
But a lot of it was playing around.

454
00:53:02,606 --> 00:53:09,990
Like all the stuff you saw with the environment moving to the beat, it was just me playing around with, hey, look, I made this cube move to the music.

455
00:53:10,030 --> 00:53:10,470
That's cool.

456
00:53:10,830 --> 00:53:12,151
And we just made it a feature.

457
00:53:13,712 --> 00:53:19,274
But yeah, it was really just playing around until probably the final three months where we figured out what the gameplay was like.

458
00:53:19,414 --> 00:53:23,637
And then we just got everything in and figuring out that loop and supporting it and working from there.

459
00:53:24,017 --> 00:53:24,177
Awesome.

460
00:53:24,537 --> 00:53:25,838
Sounds tough, but thanks for your hard work.

461
00:53:25,918 --> 00:53:26,178
Awesome.

462
00:53:28,394 --> 00:53:37,465
One of the key mechanics of the game is being able to summon other characters to do assist attacks.

463
00:53:37,926 --> 00:53:43,372
What was the development process on that like and how did that affect the work backwards mentality?

464
00:53:44,053 --> 00:53:49,197
OK, so the questions about the partner attacks and how the working backwards worked there.

465
00:53:50,618 --> 00:54:04,428
So the partner attacks just mainly came from when we were expanding on gameplay ideas as well as story ideas of working as a team and more ways to add depth to the combat.

466
00:54:05,549 --> 00:54:08,030
But for those, we decided, OK, how

467
00:54:09,011 --> 00:54:13,414
How can these attacks work from a musical angle as well as a gameplay angle?

468
00:54:13,494 --> 00:54:18,778
So for example, like the Peppermint character, we said, it's hard for the player to play in triplets.

469
00:54:19,299 --> 00:54:22,461
What if we had an assist character do that and add their own musicality to that?

470
00:54:22,961 --> 00:54:25,123
So we decided, OK, so that should be the timing.

471
00:54:25,623 --> 00:54:28,285
Whenever you summon them in, when should those triplets happen?

472
00:54:28,545 --> 00:54:30,026
And it's kind of reverse engineered from that.

473
00:54:30,207 --> 00:54:33,249
And each kind of character had their own sort of timing for that.

474
00:54:33,729 --> 00:54:35,930
But it was all sort of based off the same concept.

475
00:54:35,950 --> 00:54:40,931
If you're pressing a button that's on the beat, they'll come in on the next following beat.

476
00:54:41,211 --> 00:54:48,493
The lessons we learned by just creating a simple light attack with Chai, we just kind of applied them to all the other characters as well.

477
00:54:49,073 --> 00:54:49,714
All right, cool.

478
00:54:49,754 --> 00:54:50,394
Thank you very much.

479
00:54:50,574 --> 00:54:50,814
Thank you.

480
00:54:52,372 --> 00:54:52,532
Hi.

481
00:54:54,554 --> 00:54:58,757
Naturally, some people have bad or no rhythm at all.

482
00:54:59,177 --> 00:55:04,041
Was that ever an issue in development, or was it just something that you guys kind of overcame?

483
00:55:04,676 --> 00:55:11,579
Yeah, so if the question is, in development, if people didn't have rhythm, what were the issues?

484
00:55:12,340 --> 00:55:13,580
That was a massive issue.

485
00:55:15,682 --> 00:55:20,424
The biggest, funniest example being the original prototype was made with two people, myself and our lead programmer.

486
00:55:21,204 --> 00:55:22,845
Our lead programmer had no musical knowledge.

487
00:55:23,686 --> 00:55:26,347
So basically I was there instructing him, I was like, this is a beat.

488
00:55:26,687 --> 00:55:27,608
This is a quarter note.

489
00:55:28,048 --> 00:55:30,590
And I'd write all these diagrams and do all this stuff.

490
00:55:30,991 --> 00:55:36,055
And then as people joined the team, some were more musically inclined, which you didn't have to speak to them.

491
00:55:36,375 --> 00:55:37,796
A good example is our lead animator.

492
00:55:37,916 --> 00:55:44,842
I still think to this day does not quite understand some of the musicality stuff, which is always fun.

493
00:55:45,983 --> 00:55:49,666
But it's kind of interesting to see how people just naturally got into it.

494
00:55:50,046 --> 00:55:51,307
But it did help us a lot.

495
00:55:52,108 --> 00:56:01,752
Early on, when we were talking about making an accessible experience, if it was two people making this game who were very musically oriented, we probably would have made a game that was not accessible.

496
00:56:02,932 --> 00:56:07,934
I was giving out ideas early on, and our lead programmer was putting them in and playing them, and he's like, I can't play this game.

497
00:56:08,154 --> 00:56:09,074
Well, to me, it made sense.

498
00:56:10,155 --> 00:56:19,058
So that was kind of another eye-opening experience of, OK, we need to take this down a level so that even if my lead programmer can play it, then it's more accessible to other people.

499
00:56:19,318 --> 00:56:26,222
Does that play into the optional toggle UI for the rhythm mechanic?

500
00:56:26,643 --> 00:56:34,308
Oh, so the optional UI toggle for rhythm was actually one of the final things we implemented as something that I was adamant about not doing.

501
00:56:35,448 --> 00:56:38,150
But we realized that people did need that assist.

502
00:56:38,871 --> 00:56:41,172
And so we put it as an option for them.

503
00:56:41,492 --> 00:56:41,652
Yes.

504
00:56:42,193 --> 00:56:42,333
Cool.

505
00:56:42,473 --> 00:56:42,693
Thank you.

506
00:56:44,847 --> 00:56:56,304
Hi, you mentioned haptic feedback, and I was wondering if you had any specific challenges with, like, controller rumble, especially spinning motor style rumble that takes time to spin up before you feel it, and syncing that with the music?

507
00:56:57,443 --> 00:57:04,768
Yeah, controller rumble in general, since we were designing it with a traditional rumble, there were problems with that.

508
00:57:05,629 --> 00:57:11,693
We tried to tie a lot of stuff to do these quick beats and things like that, and that was not working.

509
00:57:12,633 --> 00:57:18,057
So that's why I think one of the first things we tried, which people still ask us, why did you not make the controller rumble with every beat?

510
00:57:18,477 --> 00:57:25,162
It's because, realistically, it would never stop rumbling, because it's constantly going to be revving that wheel.

511
00:57:25,982 --> 00:57:28,465
So we decided to time it only to the beats, the impact beats.

512
00:57:30,467 --> 00:57:33,391
Yeah, so that's one of those things that we just kind of through trial and error figured out.

513
00:57:33,531 --> 00:57:38,096
There wasn't a specific kind of final ideal goal for that.

514
00:57:38,196 --> 00:57:39,117
We just figured out what worked.

515
00:57:40,079 --> 00:57:40,279
Thanks.

516
00:57:40,639 --> 00:57:40,980
Awesome thing.

517
00:57:41,465 --> 00:57:43,767
Hey, as an animator, I did not use the UI toggle.

518
00:57:43,827 --> 00:57:46,549
I got used to the rhythm and it was really nice playing the game.

519
00:57:47,170 --> 00:57:54,976
So my question is, were there any specific challenges when, you know, you're faced with the animation team in particular with respect to the gameplay loops?

520
00:57:55,577 --> 00:57:56,818
The language?

521
00:57:56,838 --> 00:57:59,360
With the animation team as an animator, you know.

522
00:57:59,740 --> 00:58:01,181
with not a lot of musical knowledge.

523
00:58:17,253 --> 00:58:18,894
Because 15 frames was the idea of one beat.

524
00:58:19,334 --> 00:58:23,557
So everything, no matter what they made, was made with beat intervals in their animation timeline.

525
00:58:24,478 --> 00:58:35,946
And so we said, OK, if the attack is here, how do we make it so every 15 frame interval you have a feeling of a beat or an impact in the animation that makes it feel musical without making it feel stilted?

526
00:58:37,247 --> 00:58:38,468
So it was very, very challenging.

527
00:58:38,668 --> 00:58:42,951
But it also kind of, in a way, helped because they knew their limitations of how they built out animation.

528
00:58:43,251 --> 00:58:45,996
I guess yeah, my question, I may have missed this because I showed up a little late, but

529
00:58:57,398 --> 00:59:09,082
What motivated the overall game design decision to make it so even if the player doesn't time an action specifically to the beat, Chai himself always moves in time.

530
00:59:09,722 --> 00:59:14,103
Yeah, essentially like no matter what the player does, the game state more or less always stays synchronized.

531
00:59:14,123 --> 00:59:16,264
And I guess I'm curious what motivated that.

532
00:59:17,837 --> 00:59:26,601
The motivation for just making sure it automatically synced to the beat was kind of that initial idea that I just had in my head.

533
00:59:26,861 --> 00:59:28,422
I love those character action games.

534
00:59:29,302 --> 00:59:32,824
Anything that I saw that was a rhythm game, you have an immediate reaction.

535
00:59:32,884 --> 00:59:34,805
It's the moment you press the button, the action comes out.

536
00:59:35,405 --> 01:00:02,178
but if you want to have things like a wind-up or something that makes it feels like you're hitting a character you had to want to keep that in and so when we were iterating on the idea of how do we keep that in but keep the rhythm applied the idea of interpolating it so you still got the sort of the wind-up or the intro to the attack and then having it land with the beat just made it feel much more like a traditional action game but keeping those rhythm elements but it also

537
01:00:03,719 --> 01:00:09,364
in that way helped us define, so you couldn't be offbeat.

538
01:00:09,444 --> 01:00:10,706
We could make sure that it always worked.

539
01:00:11,386 --> 01:00:11,686
Right.

540
01:00:11,707 --> 01:00:18,793
There was like a feeling of consistency, regardless maybe of your input, which might go back to being more forgiving of the player's timing and so forth.

541
01:00:19,554 --> 01:00:20,635
Yes, yes.

542
01:00:20,655 --> 01:00:21,596
Awesome.

543
01:00:21,616 --> 01:00:21,876
Thank you.

544
01:00:22,137 --> 01:00:22,397
Thank you.

545
01:00:23,638 --> 01:00:23,838
Hi.

546
01:00:23,898 --> 01:00:24,659
Thank you for the talk.

547
01:00:25,500 --> 01:00:26,281
My question was,

548
01:00:27,455 --> 01:00:31,158
You said that you planned as much as you could and then you started implementing early.

549
01:00:31,699 --> 01:00:36,423
Did you ever find yourself in a situation where something that you had implemented early had to be revised?

550
01:00:36,643 --> 01:00:38,084
And how did you deal with it if you had to?

551
01:00:39,305 --> 01:00:40,927
Yes, there was one stage.

552
01:00:42,861 --> 01:00:42,921
to

553
01:01:00,609 --> 01:01:13,118
It's, we did it so no one actually noticed this, but we did it so it's when you're like doing one of those rhythm jumps, we actually secretly warp you to a, we skip an entire stage that we built and we finished and polished and everything like that, and we skipped it.

554
01:01:13,479 --> 01:01:18,562
But otherwise there were no other sections that could be cleanly cut, so we said that's the only, that's the only way we can do it.

555
01:01:18,943 --> 01:01:21,204
And everything else we just had, we just left it in.

556
01:01:21,284 --> 01:01:24,507
So some of the criticisms we got that the stages were a little bit too long,

557
01:01:26,496 --> 01:01:27,036
Could have been worse.

558
01:01:27,336 --> 01:01:28,276
Really nothing we could do with it.

559
01:01:29,417 --> 01:01:30,597
That's at the macro level.

560
01:01:30,757 --> 01:01:33,277
Was there anything at the micro level that had the same experience?

561
01:01:34,478 --> 01:01:35,578
At that point, surprisingly, no.

562
01:01:36,218 --> 01:01:46,040
A lot of that stuff was figured out very early, and I don't think anything later was cut just outside of, or adjusted outside of just chunks of the game that can clearly be just sort of removed.

563
01:01:46,760 --> 01:01:50,541
But no features or gameplay features were kind of cut later in the game.

564
01:01:50,721 --> 01:01:52,141
They were kind of locked in early.

565
01:01:53,308 --> 01:02:17,361
all right thank you so much yeah and i'm being like waved at so that our time is up but i can answer questions apparently uh in something called an alcove that's on the other side of the the uh pavilion or west what what is it west pavilion somewhere over there that's exactly correct so i will i will proceed over there if if you want to continue asking questions i'll stick around for a little bit but thank you again for showing up

