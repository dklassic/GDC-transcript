1
00:00:06,338 --> 00:00:08,839
So, hello, everyone. Thank you for coming.

2
00:00:08,839 --> 00:00:10,500
I'm Robbie van Storm, and I'm here to talk

3
00:00:10,500 --> 00:00:12,840
about improving tool design through Editor Triage.

4
00:00:12,840 --> 00:00:13,581
Now, who I am in a quick nutshell.

5
00:00:13,581 --> 00:00:16,162
So, I'm from the Netherlands.

6
00:00:16,162 --> 00:00:19,683
I used to be a game and level designer.

7
00:00:19,683 --> 00:00:22,184
I worked at Ximion, Team 6, through games.

8
00:00:22,184 --> 00:00:25,505
I worked on all kinds of titles like racing games,

9
00:00:25,505 --> 00:00:27,586
to shooters, to puzzle games, to platformers,

10
00:00:27,586 --> 00:00:29,787
which the most well-known I was probably through.

11
00:00:30,347 --> 00:00:34,350
I noticed during all that work that sort of time and money

12
00:00:34,350 --> 00:00:37,312
was being wasted by missing UX and UI solutions

13
00:00:37,312 --> 00:00:38,213
and level editors,

14
00:00:38,213 --> 00:00:41,255
and I couldn't see anybody else doing anything about it

15
00:00:41,255 --> 00:00:44,237
at the time, so I decided to do something about it myself.

16
00:00:44,237 --> 00:00:46,919
I decided to do something about it myself,

17
00:00:46,919 --> 00:00:48,740
and I became a freelance tool designer.

18
00:00:48,740 --> 00:00:52,823
I've done QA and UX design for Realtime CSG and Saber CSG,

19
00:00:52,823 --> 00:00:56,406
which are two level editors on the Unity Asset Store.

20
00:00:57,238 --> 00:01:00,906
Now, I did a talk also at GDC about improving level editors

21
00:01:00,906 --> 00:01:04,434
last year, after which I got hired by IEO Interactive.

22
00:01:04,434 --> 00:01:06,760
And I'm now there as a full-time tools designer.

23
00:01:08,767 --> 00:01:11,990
Now, so I gave that talk, I compared Source, Unreal,

24
00:01:11,990 --> 00:01:14,112
Unity, 3ds Max, and the Creation Kit,

25
00:01:14,112 --> 00:01:16,014
and I showed the good and bad sides

26
00:01:16,014 --> 00:01:17,495
of the UX that they contain.

27
00:01:17,495 --> 00:01:19,137
And if you want to watch it later,

28
00:01:19,137 --> 00:01:21,499
I linked it on Twitter, so you can grab it there.

29
00:01:21,499 --> 00:01:23,441
There's no need for vault access, it's on YouTube,

30
00:01:23,441 --> 00:01:25,704
and my handle is at rystorm.

31
00:01:25,704 --> 00:01:26,845
But I'll give a quick overview

32
00:01:26,845 --> 00:01:28,627
for those who did not see that talk yet.

33
00:01:29,732 --> 00:01:32,113
So here's how good tools can save time, save money,

34
00:01:32,113 --> 00:01:35,374
and improve the quality of your games at the same time.

35
00:01:35,374 --> 00:01:37,815
Your tool's health affects your developer's probable work

36
00:01:37,815 --> 00:01:38,675
quality output.

37
00:01:38,675 --> 00:01:41,317
I'm not saying tools are a replacement of developer skill.

38
00:01:41,317 --> 00:01:43,117
They are both important.

39
00:01:43,117 --> 00:01:46,139
For example, if your developers are good and your tools are OK,

40
00:01:46,139 --> 00:01:48,440
you get a times one modifier on the quality

41
00:01:48,440 --> 00:01:49,540
your developers can output.

42
00:01:49,880 --> 00:01:52,343
But if your tools work slowly or have many issues,

43
00:01:52,343 --> 00:01:54,865
or they're just sort of like lagging a lot,

44
00:01:54,865 --> 00:01:57,447
you might get a modifier of times 0.5,

45
00:01:57,447 --> 00:02:00,110
in which case you need to hire many more expensive and hard

46
00:02:00,110 --> 00:02:02,211
to find designers to make sure that you

47
00:02:02,211 --> 00:02:03,673
can make something great.

48
00:02:03,673 --> 00:02:05,634
But if your tools are fast and deep enough,

49
00:02:05,634 --> 00:02:07,156
you might even get a modifier of times 2,

50
00:02:07,156 --> 00:02:11,199
which means that your developers' qualities are

51
00:02:11,199 --> 00:02:13,201
amplified to make your games an even higher quality.

52
00:02:13,762 --> 00:02:16,423
And this is not some kind of new idea, of course.

53
00:02:16,423 --> 00:02:19,504
For example, in 2010, Jim Brown, a designer at Epic Games,

54
00:02:19,504 --> 00:02:23,226
gave an example of what happens when you improve tools

55
00:02:23,226 --> 00:02:24,047
even a little bit.

56
00:02:24,047 --> 00:02:26,508
So in this case, 2.4 minutes a day times 100 employees,

57
00:02:26,508 --> 00:02:27,708
four hours a day, 20 hours a week,

58
00:02:27,708 --> 00:02:30,390
becomes one year of your time on a project.

59
00:02:30,390 --> 00:02:33,011
So fixing small things is a big deal.

60
00:02:33,011 --> 00:02:35,612
So producers, this is something important to look at

61
00:02:35,612 --> 00:02:37,453
if your developers are not doing it yet.

62
00:02:37,453 --> 00:02:40,015
And level designers, there's your facts to push change.

63
00:02:42,342 --> 00:02:43,802
So the talk was very well received,

64
00:02:43,802 --> 00:02:44,803
and it even hit YouTube.

65
00:02:44,803 --> 00:02:46,364
I'm really happy about it.

66
00:02:46,364 --> 00:02:47,844
But one question kept on coming up,

67
00:02:47,844 --> 00:02:50,426
which is I cannot hire 10 more tool programmers.

68
00:02:50,426 --> 00:02:53,787
What techniques can I use to solve these level editor UX

69
00:02:53,787 --> 00:02:57,209
problems quickly, cheaply, and efficiently?

70
00:02:57,209 --> 00:02:59,010
Now, instead of looking at the programmers,

71
00:02:59,010 --> 00:03:00,171
I looked at the designers.

72
00:03:00,171 --> 00:03:01,872
And that is where tool triage comes in.

73
00:03:03,550 --> 00:03:05,611
Tool triage is how you make sure the correct features

74
00:03:05,611 --> 00:03:08,792
get created and worked on for your team and project.

75
00:03:08,792 --> 00:03:10,893
For definition, triage is a process

76
00:03:10,893 --> 00:03:12,433
for sorting injured people into groups

77
00:03:12,433 --> 00:03:13,654
based on their need for,

78
00:03:13,654 --> 00:03:16,875
or likely benefit from, immediate medical treatment.

79
00:03:16,875 --> 00:03:20,336
Now, we too, as developers, have to allocate limited resources

80
00:03:20,336 --> 00:03:22,536
and still get incredible results.

81
00:03:22,536 --> 00:03:24,937
But are game developers actually triaging their tools?

82
00:03:24,937 --> 00:03:26,778
And if so, how are they doing it?

83
00:03:26,778 --> 00:03:28,958
And what contingencies did these methods have?

84
00:03:28,958 --> 00:03:30,999
And so to answer these questions,

85
00:03:30,999 --> 00:03:33,000
I went around the game industry in the last years

86
00:03:33,945 --> 00:03:35,867
And I talked to experienced developers

87
00:03:35,867 --> 00:03:38,689
who work or have worked at many different companies

88
00:03:38,689 --> 00:03:39,930
to find out what kind of triage processes

89
00:03:39,930 --> 00:03:42,572
they've personally used or witnessed.

90
00:03:42,572 --> 00:03:45,955
And every single person that I've talked to

91
00:03:45,955 --> 00:03:48,637
has seen or used different ways to triage tools,

92
00:03:48,637 --> 00:03:51,179
but are unaware of what other developers are doing.

93
00:03:51,179 --> 00:03:52,500
It looked like a mostly silent topic.

94
00:03:52,500 --> 00:03:55,703
Now, these are developers from all over the place.

95
00:03:55,703 --> 00:03:57,264
So all these logos are just to quickly identify

96
00:03:57,264 --> 00:03:58,545
how broad this research was.

97
00:04:00,207 --> 00:04:03,556
It does not mean that any of these opinions in this talk are part of these companies,

98
00:04:03,556 --> 00:04:05,321
much like what you read in a lot of Twitter bios.

99
00:04:05,321 --> 00:04:08,089
I talked to them, and they represented themselves.

100
00:04:08,620 --> 00:04:10,881
Now, of course, some people were happy to represent themselves.

101
00:04:10,881 --> 00:04:14,402
For the sake of simplicity, I'm just going to say no one did.

102
00:04:14,402 --> 00:04:16,162
And also, for some companies, such as Guerrilla,

103
00:04:16,162 --> 00:04:18,003
I did not talk to developers there,

104
00:04:18,003 --> 00:04:19,983
but their developers talked publicly

105
00:04:19,983 --> 00:04:22,004
about their systems in interviews, podcasts,

106
00:04:22,004 --> 00:04:24,024
or GDC talks.

107
00:04:24,024 --> 00:04:25,485
Now, in the end, I found many different ways

108
00:04:25,485 --> 00:04:28,506
that many different companies do their tool triage.

109
00:04:28,506 --> 00:04:31,086
But I'm not going to say what is the best

110
00:04:31,086 --> 00:04:32,407
objective way to do it.

111
00:04:32,407 --> 00:04:34,167
And the reason for that is the variables.

112
00:04:35,791 --> 00:04:38,656
So many variables count when working to make tool triage better.

113
00:04:38,656 --> 00:04:42,582
It's company culture, country culture, production methods, publisher relations,

114
00:04:42,582 --> 00:04:45,427
deadlines, communication structures, hiring practices, etc.

115
00:04:46,184 --> 00:04:48,126
For example, on the last one, hiring practices

116
00:04:48,126 --> 00:04:50,227
can affect what to do when it comes to tool triage.

117
00:04:50,227 --> 00:04:53,810
How many people are let go and hired affects that a lot.

118
00:04:53,810 --> 00:04:55,532
Like for example, if you hire and let go

119
00:04:55,532 --> 00:04:57,453
only two or three people per year

120
00:04:57,453 --> 00:05:00,535
and have your developers in a company for 15 plus years

121
00:05:00,535 --> 00:05:03,778
working with tools that have been iterated on for 30 years,

122
00:05:03,778 --> 00:05:05,179
then doing a tool triage method

123
00:05:05,179 --> 00:05:06,921
that rapidly changes things a lot

124
00:05:06,921 --> 00:05:09,403
is probably not a good idea, it's gonna cost time.

125
00:05:09,903 --> 00:05:12,225
But if you have a huge amount of studios all over the world

126
00:05:12,225 --> 00:05:15,027
with hundreds of developers coming in and out every year,

127
00:05:15,027 --> 00:05:16,929
of course, they need to find a tool triage approach

128
00:05:16,929 --> 00:05:18,650
that makes sure you can change things fast

129
00:05:18,650 --> 00:05:22,393
and make things work directly when they join your company.

130
00:05:22,393 --> 00:05:24,295
And also, a thing is culture.

131
00:05:24,295 --> 00:05:26,697
Not just company culture, but country culture.

132
00:05:26,697 --> 00:05:27,858
Different cultures have different ways

133
00:05:27,858 --> 00:05:29,139
of bringing up new ideas.

134
00:05:29,139 --> 00:05:30,941
For example, in the Netherlands, we

135
00:05:30,941 --> 00:05:33,463
can be very direct when talking about or accepting

136
00:05:33,463 --> 00:05:34,864
or declining ideas.

137
00:05:34,864 --> 00:05:36,285
We'll just say no.

138
00:05:38,544 --> 00:05:41,764
In the US, there could be a lot of talking

139
00:05:41,764 --> 00:05:44,485
to soften the blow of an idea not being accepted.

140
00:05:44,485 --> 00:05:46,525
Americans might say, that's interesting.

141
00:05:46,525 --> 00:05:49,306
It means the exact same thing.

142
00:05:49,306 --> 00:05:51,586
So this also shapes the way tool triage works at your company.

143
00:05:51,586 --> 00:05:53,727
There's no one size fits all approach.

144
00:05:53,727 --> 00:05:57,188
As with anything UX-related, it depends on your target audience.

145
00:05:57,188 --> 00:06:00,528
In this case, your target audience is your developers.

146
00:06:00,528 --> 00:06:01,989
You probably know them best.

147
00:06:01,989 --> 00:06:03,609
So you know what works for you.

148
00:06:05,311 --> 00:06:07,312
Now, there's a couple of problems to consider.

149
00:06:07,312 --> 00:06:08,912
No approach is perfect, but these

150
00:06:08,912 --> 00:06:11,453
were the problems most developers ran into when

151
00:06:11,453 --> 00:06:12,794
using any kind of tool triage.

152
00:06:12,794 --> 00:06:14,254
So let's go through them before we

153
00:06:14,254 --> 00:06:15,655
talk about the actual solutions so we

154
00:06:15,655 --> 00:06:18,436
know what we have to solve.

155
00:06:18,436 --> 00:06:20,296
First is time and money investment.

156
00:06:20,296 --> 00:06:23,117
Some approaches worked, but they're very time intensive

157
00:06:23,117 --> 00:06:26,098
and money intensive to get a good return on investment.

158
00:06:26,098 --> 00:06:28,159
Canvassing and politics.

159
00:06:28,430 --> 00:06:32,092
Canvassing apolitics can create suboptimal solutions or compromises.

160
00:06:32,092 --> 00:06:35,915
If you have a flat hierarchy or an approach where anyone can triage, you might not get

161
00:06:35,915 --> 00:06:40,738
the best solution because some people are simply better at social constructs than others.

162
00:06:40,738 --> 00:06:45,641
A quiet person who does not talk a lot may have the best idea, but be shouted down by

163
00:06:45,641 --> 00:06:50,204
someone who's way better at canvassing their ideas, while those ideas may not necessarily

164
00:06:50,204 --> 00:06:50,744
be as good.

165
00:06:52,747 --> 00:06:56,369
Join multidisciplinary teams can create huge time investments.

166
00:06:56,369 --> 00:06:58,331
If you have all kinds of disciplines

167
00:06:58,331 --> 00:07:00,512
talking to each other on a set time interval,

168
00:07:00,512 --> 00:07:02,314
you will lose time and simply due

169
00:07:02,314 --> 00:07:04,515
to having to communicate between them.

170
00:07:04,515 --> 00:07:06,297
Programmers, designers, artists, et cetera,

171
00:07:06,297 --> 00:07:08,078
they all have different ways of thinking

172
00:07:08,078 --> 00:07:09,199
and different ways of talking.

173
00:07:09,199 --> 00:07:10,560
If you put those together and try

174
00:07:10,560 --> 00:07:13,262
to make them find a solution, you might get there,

175
00:07:13,262 --> 00:07:15,544
you might get not, but you'll be spending a lot of time.

176
00:07:15,544 --> 00:07:18,266
Set special meetings.

177
00:07:19,297 --> 00:07:22,081
Special meetings are kind of annoying for everyone.

178
00:07:22,081 --> 00:07:24,083
Nobody likes to have a lot of meetings.

179
00:07:24,083 --> 00:07:27,547
So if you're using an approach that makes it

180
00:07:27,547 --> 00:07:29,509
like you have to do particular meetings every week,

181
00:07:29,509 --> 00:07:31,872
like every month, it might not be the best idea.

182
00:07:31,872 --> 00:07:33,053
Communication between non-physical teams.

183
00:07:37,473 --> 00:07:39,034
Communication between non-physical teams

184
00:07:39,034 --> 00:07:40,476
will be neglected over time.

185
00:07:40,476 --> 00:07:42,478
I mean, human beings are used to communicating

186
00:07:42,478 --> 00:07:44,340
with those in their physical circle.

187
00:07:44,340 --> 00:07:45,541
So if there's a barrier of entry,

188
00:07:45,541 --> 00:07:48,284
such as technology or time zones between teams,

189
00:07:48,284 --> 00:07:50,686
then that communication will be very clear at first,

190
00:07:50,686 --> 00:07:52,528
but sort of deteriorate over time,

191
00:07:52,528 --> 00:07:54,150
or maybe even just stop outright.

192
00:07:55,951 --> 00:07:57,631
a faceless system.

193
00:07:57,631 --> 00:07:59,272
If it's not clear who is assigning

194
00:07:59,272 --> 00:08:01,132
what is happening with the tools in editor,

195
00:08:01,132 --> 00:08:02,412
then there's a faceless system, which

196
00:08:02,412 --> 00:08:04,333
makes it very difficult for users

197
00:08:04,333 --> 00:08:08,013
to know where to request a kind of feature or something

198
00:08:08,013 --> 00:08:10,414
that they want, or who to talk to about problems

199
00:08:10,414 --> 00:08:11,294
they're having.

200
00:08:11,294 --> 00:08:14,635
Having a person, a team, or even just an email address

201
00:08:14,635 --> 00:08:16,375
that can help give a face to where

202
00:08:16,375 --> 00:08:17,875
you can go to if you have tool problems

203
00:08:17,875 --> 00:08:20,476
can really be awesome for people.

204
00:08:22,890 --> 00:08:25,453
A person, so in the constant change,

205
00:08:25,453 --> 00:08:28,858
a person to physically go to is better than a faceless system

206
00:08:28,858 --> 00:08:30,981
and a faceless system is still better than constant change.

207
00:08:30,981 --> 00:08:33,945
Now this is something that most people are actually doing,

208
00:08:33,945 --> 00:08:37,730
which is that multiple people or different people over time

209
00:08:37,730 --> 00:08:39,052
are deciding what to do.

210
00:08:39,252 --> 00:08:40,754
This changing of the guard creates

211
00:08:40,754 --> 00:08:43,977
a layer cake of different ideas and concept over time,

212
00:08:43,977 --> 00:08:45,058
which is very unhealthy for tools.

213
00:08:45,058 --> 00:08:47,340
Because tools need to work in such a way

214
00:08:47,340 --> 00:08:49,582
that they complement each other, that the UI and UX are

215
00:08:49,582 --> 00:08:49,862
the same.

216
00:08:49,862 --> 00:08:53,226
So if a different person is doing the tool designs

217
00:08:53,226 --> 00:08:55,508
or the tool triage over every month

218
00:08:55,508 --> 00:08:58,190
there's a different person, the end result

219
00:08:58,190 --> 00:08:59,351
will not mesh together as well.

220
00:09:01,435 --> 00:09:02,736
Mid and low priority items.

221
00:09:02,736 --> 00:09:06,437
You will almost never get to mid and low priority items.

222
00:09:06,437 --> 00:09:08,498
The high priority items will keep on piling up,

223
00:09:08,498 --> 00:09:10,259
and you'll have to continually fix those.

224
00:09:10,259 --> 00:09:13,080
If you're using an approach that constantly creates

225
00:09:13,080 --> 00:09:15,281
a list of high, medium, and low priority items,

226
00:09:15,281 --> 00:09:16,441
then it can be safe to assume

227
00:09:16,441 --> 00:09:18,302
you'll never get to mid and low.

228
00:09:18,302 --> 00:09:21,603
Having a time investment to make these lists

229
00:09:21,603 --> 00:09:24,805
might actually be wasting your time and money.

230
00:09:24,805 --> 00:09:26,265
You might as well be doing something

231
00:09:26,265 --> 00:09:27,406
that quickly gets rid of those.

232
00:09:28,253 --> 00:09:31,154
And also, it means that programmers are constantly

233
00:09:31,154 --> 00:09:33,515
seeing these useless items going higher and higher and higher.

234
00:09:33,515 --> 00:09:35,475
And they see how much they are behind.

235
00:09:35,475 --> 00:09:37,416
And it just feels bad, because they

236
00:09:37,416 --> 00:09:38,937
know they can't reach those.

237
00:09:38,937 --> 00:09:39,117
OK.

238
00:09:39,117 --> 00:09:41,277
So those are the problems to consider.

239
00:09:41,277 --> 00:09:43,978
And I shorted them a little bit and added some info as well.

240
00:09:45,620 --> 00:09:47,542
So at the bottom, I have big team, medium team,

241
00:09:47,542 --> 00:09:48,383
and small team.

242
00:09:48,383 --> 00:09:50,205
So what that means is, is this approach

243
00:09:50,205 --> 00:09:53,728
viable for a big team, a small team, or a medium team?

244
00:09:53,728 --> 00:09:55,570
Now, let's get into the meat of the talk.

245
00:09:55,570 --> 00:09:56,992
What are these different methods?

246
00:09:56,992 --> 00:09:58,693
And what are the pros and cons of these methods?

247
00:09:59,674 --> 00:10:01,637
So the Ticket to Moscow approach.

248
00:10:01,637 --> 00:10:03,980
So this is an approach used by many companies.

249
00:10:03,980 --> 00:10:05,543
It's really kind of the basic approach.

250
00:10:05,543 --> 00:10:08,166
So this one can have big time investments,

251
00:10:08,166 --> 00:10:11,010
can have multi-teams, special meetings, constant change,

252
00:10:11,010 --> 00:10:13,874
and fail to reach mid or low priority items,

253
00:10:13,874 --> 00:10:15,176
but can fit any size team.

254
00:10:15,877 --> 00:10:17,699
So in this case, anyone can submit tickets,

255
00:10:17,699 --> 00:10:19,861
and they're gathered in one place.

256
00:10:19,861 --> 00:10:22,723
The tickets then undergo the Moscow method of must have,

257
00:10:22,723 --> 00:10:25,145
should have, could have, would have to figure out

258
00:10:25,145 --> 00:10:26,786
low and high priority.

259
00:10:26,786 --> 00:10:28,928
Now, of course, a large amount of other priority calculation

260
00:10:28,928 --> 00:10:31,430
methods can be used as well, but in the tool programmer,

261
00:10:31,430 --> 00:10:32,891
simply implement high to low.

262
00:10:33,552 --> 00:10:36,253
But the thing is, again, you'll never reach low priority,

263
00:10:36,253 --> 00:10:37,973
and high keeps piling up.

264
00:10:37,973 --> 00:10:41,015
And it's difficult to find out who performs this priority

265
00:10:41,015 --> 00:10:41,595
check.

266
00:10:41,595 --> 00:10:42,475
Is it the users?

267
00:10:42,475 --> 00:10:43,716
Is it the tool programmers?

268
00:10:43,716 --> 00:10:44,916
Is it some kind of different team?

269
00:10:44,916 --> 00:10:48,017
So it's very time consuming to get those people together

270
00:10:48,017 --> 00:10:49,498
to do checks if you have a bunch of them.

271
00:10:51,373 --> 00:10:53,114
Another approach is the programmer checkup approach.

272
00:10:53,114 --> 00:10:55,474
This is used by two companies that I talked to.

273
00:10:55,474 --> 00:10:57,375
So this one can have big time investments,

274
00:10:57,375 --> 00:11:00,577
requires special meetings, and can have constant change,

275
00:11:00,577 --> 00:11:02,157
but it can fit any size team.

276
00:11:02,157 --> 00:11:04,458
So in this case, you have weekly or monthly meetings,

277
00:11:04,458 --> 00:11:07,079
and the tool programmers and level designers meet together.

278
00:11:07,079 --> 00:11:09,240
They then go through the levels in editor.

279
00:11:09,860 --> 00:11:11,622
So in this case, the tool programmers

280
00:11:11,622 --> 00:11:14,424
can check on how things are built using their tool

281
00:11:14,424 --> 00:11:15,345
set inside the editor.

282
00:11:15,345 --> 00:11:18,547
So then they can discuss what can be done more efficiently.

283
00:11:18,547 --> 00:11:20,569
Like, for example, show different approaches

284
00:11:20,569 --> 00:11:21,850
the user might not have heard of.

285
00:11:21,850 --> 00:11:23,451
Like a level designer shows how they built a thing,

286
00:11:23,451 --> 00:11:24,732
or shows something in the editor,

287
00:11:24,732 --> 00:11:26,253
and the tool programmer goes, actually, I

288
00:11:26,253 --> 00:11:27,654
have a way better way of doing this,

289
00:11:27,654 --> 00:11:29,615
but you've got to go in this menu down here to this thing,

290
00:11:29,615 --> 00:11:31,677
and then there's a thing over here that makes you do that.

291
00:11:31,917 --> 00:11:32,998
They might not know.

292
00:11:32,998 --> 00:11:34,539
This is a good way to find that out.

293
00:11:34,539 --> 00:11:38,861
And the level designers can also discuss what's difficult to create and difficult to maintain.

294
00:11:38,861 --> 00:11:43,024
There might be specific sections of a level that are really hard to constantly redo and

295
00:11:43,024 --> 00:11:44,965
redo because it constantly keeps breaking.

296
00:11:44,965 --> 00:11:48,307
Now they can talk face to face and solve these problems.

297
00:11:48,307 --> 00:11:50,228
So it's sort of in-person triage.

298
00:11:51,951 --> 00:11:53,312
The design by committee approach.

299
00:11:53,312 --> 00:11:55,434
Now this one is used by one company that I talked to.

300
00:11:55,434 --> 00:11:57,215
This one can have big time investments,

301
00:11:57,215 --> 00:12:00,097
can have multi-teams, special meetings, constant change,

302
00:12:00,097 --> 00:12:02,059
and fail to reach a lot of priority items,

303
00:12:02,059 --> 00:12:03,340
but again, could fit any size team.

304
00:12:03,340 --> 00:12:07,323
So in this case, any requests that the users have

305
00:12:07,323 --> 00:12:08,424
go to a committee first.

306
00:12:08,424 --> 00:12:11,647
And this committee can be made up of whoever is necessary.

307
00:12:11,647 --> 00:12:14,469
Could be leads of the project, producers of the project,

308
00:12:14,469 --> 00:12:15,870
key tool users and programmers.

309
00:12:16,619 --> 00:12:17,759
whatever works for you.

310
00:12:17,759 --> 00:12:20,180
And this committee decides which requests

311
00:12:20,180 --> 00:12:21,641
go to the tool programmers.

312
00:12:21,641 --> 00:12:23,581
Now, design by committee has a tendency

313
00:12:23,581 --> 00:12:25,542
to come up with an average of solutions

314
00:12:25,542 --> 00:12:26,542
that are the best solutions.

315
00:12:26,542 --> 00:12:28,303
And anyone on the committee needs

316
00:12:28,303 --> 00:12:30,363
to have knowledge of their entire department,

317
00:12:30,363 --> 00:12:33,424
if they're the leader of them, to make accurate decisions.

318
00:12:33,424 --> 00:12:35,585
And of course, it can be slow, depending on how many times

319
00:12:35,585 --> 00:12:36,945
the committee meets.

320
00:12:36,945 --> 00:12:38,566
So if there's a huge problem right now,

321
00:12:38,566 --> 00:12:40,246
you might only come to it and talk about it

322
00:12:40,246 --> 00:12:41,987
when the meeting between these people happens.

323
00:12:43,889 --> 00:12:45,050
The in-the-room approach.

324
00:12:45,050 --> 00:12:46,692
This one was used by one company I talked to.

325
00:12:46,692 --> 00:12:49,535
So in this case, you can have big time investments,

326
00:12:49,535 --> 00:12:52,417
can have multi-teams, constant change,

327
00:12:52,417 --> 00:12:54,339
and it can fit medium and small teams.

328
00:12:54,339 --> 00:12:57,222
In this case, one level designer is put

329
00:12:57,222 --> 00:12:59,104
into the tool programmer's room,

330
00:12:59,104 --> 00:13:00,465
or area for open floor plans,

331
00:13:00,465 --> 00:13:02,707
or Slack chat channel for online teams.

332
00:13:03,348 --> 00:13:06,609
So if the tool programmer has questions, problems,

333
00:13:06,609 --> 00:13:09,210
or any just curiosity for the level designer,

334
00:13:09,210 --> 00:13:11,831
they can discuss with that level designer right away.

335
00:13:11,831 --> 00:13:14,372
So solutions are brought up, accepted, or discarded

336
00:13:14,372 --> 00:13:15,832
face to face.

337
00:13:15,832 --> 00:13:18,413
Now of course, the user has to know their user base

338
00:13:18,413 --> 00:13:20,194
and not make personal decisions.

339
00:13:20,194 --> 00:13:22,094
So you have to find the right person.

340
00:13:22,094 --> 00:13:24,715
And time is saved as no meetings are scheduled

341
00:13:24,715 --> 00:13:25,696
and communication is instant.

342
00:13:26,416 --> 00:13:28,017
But it has to be done for all user bases

343
00:13:28,017 --> 00:13:30,018
if you want to do this not just for level designers,

344
00:13:30,018 --> 00:13:32,980
but for other people as well, like modelers, lighting,

345
00:13:32,980 --> 00:13:34,201
any other kind of tool users.

346
00:13:34,201 --> 00:13:36,662
And of course, it can also be reversed

347
00:13:36,662 --> 00:13:38,844
by putting a tool programmer in a user department

348
00:13:38,844 --> 00:13:40,805
for a month or two so that they come back to the tool

349
00:13:40,805 --> 00:13:42,406
programmers and talk to the tool programmers

350
00:13:42,406 --> 00:13:44,547
in their own language, talking to each other in a way

351
00:13:44,547 --> 00:13:45,768
that they both understand.

352
00:13:48,149 --> 00:13:49,330
The point assignment approach.

353
00:13:49,330 --> 00:13:51,631
This one is used by two companies I talked to.

354
00:13:51,631 --> 00:13:53,992
This one can suffer from politics,

355
00:13:53,992 --> 00:13:54,813
non-physical communication.

356
00:13:54,813 --> 00:13:56,614
It could be a faceless system

357
00:13:56,614 --> 00:13:58,755
and fail to reach mid and low priority items.

358
00:13:58,755 --> 00:14:01,636
But the really best fit of this is really big teams.

359
00:14:02,377 --> 00:14:03,818
So in this case, every level designer

360
00:14:03,818 --> 00:14:05,879
gets a limited amount of points.

361
00:14:05,879 --> 00:14:07,660
And when suggesting features, level designers

362
00:14:07,660 --> 00:14:09,242
spend those points.

363
00:14:09,242 --> 00:14:11,683
So suggestions have to be balanced by the suggester.

364
00:14:11,683 --> 00:14:15,666
But this can result in really difficult and time-consuming

365
00:14:15,666 --> 00:14:16,927
programming tasks.

366
00:14:16,927 --> 00:14:19,649
But it works well if there are many features in contention.

367
00:14:19,649 --> 00:14:21,110
If you have a lot of features, a lot of people

368
00:14:21,110 --> 00:14:23,132
want a lot of things, you can give the limited points

369
00:14:23,132 --> 00:14:24,253
and find out the best stuff.

370
00:14:24,882 --> 00:14:27,243
But it can feel like you waste your votes

371
00:14:27,243 --> 00:14:29,945
if you don't vote on one of the two big things.

372
00:14:29,945 --> 00:14:31,627
It could feel like your voice isn't heard

373
00:14:31,627 --> 00:14:32,928
if you're one of many.

374
00:14:32,928 --> 00:14:36,070
So, and of course, users might not have the best idea

375
00:14:36,070 --> 00:14:37,231
on what features to make.

376
00:14:37,231 --> 00:14:39,112
There's the age old quote that apparently

377
00:14:39,112 --> 00:14:41,074
isn't actually a quote of Henry Ford

378
00:14:41,074 --> 00:14:42,355
asking people what they wanted

379
00:14:42,355 --> 00:14:45,697
and they asked for faster horses, he made a car.

380
00:14:45,697 --> 00:14:46,998
Your users might not always know

381
00:14:46,998 --> 00:14:49,160
what the best thing is for them.

382
00:14:49,160 --> 00:14:50,661
The brute force approach.

383
00:14:50,661 --> 00:14:52,462
Now this one was used by two companies.

384
00:14:53,451 --> 00:14:55,531
Now, this one can have big time investments,

385
00:14:55,531 --> 00:14:57,392
can suffer from politics, constant change,

386
00:14:57,392 --> 00:14:59,812
but can work well with small team sizes.

387
00:14:59,812 --> 00:15:03,413
In this case, you hire only the best of the best,

388
00:15:03,413 --> 00:15:05,673
just 15 plus years of experience only.

389
00:15:05,673 --> 00:15:07,654
And there's no pipeline for triage.

390
00:15:07,654 --> 00:15:11,294
You just keep the teams or the decision makers very small

391
00:15:11,294 --> 00:15:14,355
and give them almost unlimited time to just figure things out.

392
00:15:14,355 --> 00:15:17,416
Now, in this case, developers are experienced enough

393
00:15:17,416 --> 00:15:18,476
to take decisions themselves.

394
00:15:19,156 --> 00:15:20,899
But of course, this is heavily limited

395
00:15:20,899 --> 00:15:23,324
to the amount of funding and time available.

396
00:15:23,324 --> 00:15:25,928
And of course, the loudest voice could win.

397
00:15:25,928 --> 00:15:29,194
So the great ideas might not be implemented due to canvassing.

398
00:15:31,340 --> 00:15:33,041
the dedicated QA team approach.

399
00:15:33,041 --> 00:15:34,722
So this one was used by two companies I talked to.

400
00:15:34,722 --> 00:15:37,063
This one can have big time investments,

401
00:15:37,063 --> 00:15:39,084
can have multi-teams, can sometimes

402
00:15:39,084 --> 00:15:40,645
become a faceless system.

403
00:15:40,645 --> 00:15:42,827
It can face constant change, but can work well

404
00:15:42,827 --> 00:15:44,608
with really big teams.

405
00:15:44,608 --> 00:15:47,129
So in this case, a separate QA team is created.

406
00:15:47,129 --> 00:15:50,471
And tool updates are not pushed until QA verifies them.

407
00:15:51,032 --> 00:15:52,874
So this prevents bugs from being rolled out.

408
00:15:52,874 --> 00:15:54,917
But if these people also know a little bit about UX UI,

409
00:15:54,917 --> 00:15:57,140
they can also see what is easily reachable

410
00:15:57,140 --> 00:15:58,101
and what is not reachable.

411
00:15:58,101 --> 00:16:01,365
So in this case, they can make sure features are well-rounded

412
00:16:01,365 --> 00:16:02,467
before use.

413
00:16:02,467 --> 00:16:05,871
But it costs considerable time and money to maintain.

414
00:16:08,262 --> 00:16:09,343
the command center approach.

415
00:16:09,343 --> 00:16:11,303
So this one was used by three companies.

416
00:16:11,303 --> 00:16:13,584
This one can have big time investments,

417
00:16:13,584 --> 00:16:15,485
suffer from politics and non-physical teams,

418
00:16:15,485 --> 00:16:17,786
and fail to reach mid and low priority items,

419
00:16:17,786 --> 00:16:18,767
but fits big teams.

420
00:16:18,767 --> 00:16:21,088
So in this case, multiple studios

421
00:16:21,088 --> 00:16:23,148
are using the same engine and tools.

422
00:16:23,148 --> 00:16:24,729
And especially if multiple game genres

423
00:16:24,729 --> 00:16:26,990
are being made on the same code basis, works really well.

424
00:16:26,990 --> 00:16:29,431
In this case, there's a single location

425
00:16:29,431 --> 00:16:30,732
and team of tool programmers,

426
00:16:30,732 --> 00:16:33,113
and all feature requests go to that location.

427
00:16:33,773 --> 00:16:35,737
Then the team works together to implement features.

428
00:16:35,737 --> 00:16:38,563
And such a team can also help other first-party developers,

429
00:16:38,563 --> 00:16:40,968
like, for example, the ICE team at Naughty Dog does,

430
00:16:40,968 --> 00:16:41,810
if I recall correct.

431
00:16:42,500 --> 00:16:45,321
Now, this can be, of course, be adapted to multiple locations

432
00:16:45,321 --> 00:16:46,081
as well.

433
00:16:46,081 --> 00:16:48,342
And there's consistent communication.

434
00:16:48,342 --> 00:16:50,903
And if feature requests are similar between studios,

435
00:16:50,903 --> 00:16:52,783
you can simply copy and paste the same solutions,

436
00:16:52,783 --> 00:16:55,284
because they all work with the same tools.

437
00:16:55,284 --> 00:16:57,244
But it can be difficult to figure out

438
00:16:57,244 --> 00:16:58,445
which parts to keep and cut.

439
00:16:58,445 --> 00:16:59,905
Who makes that decision?

440
00:16:59,905 --> 00:17:03,006
And it's, of course, never as easy as just copy pasting.

441
00:17:03,006 --> 00:17:04,626
There might be specific things they want.

442
00:17:04,626 --> 00:17:08,347
But a command center can help to make merges clear,

443
00:17:08,347 --> 00:17:11,028
so we know exactly like these people decide in this location.

444
00:17:12,953 --> 00:17:13,994
The DIY approach.

445
00:17:13,994 --> 00:17:15,675
So this one was used by two companies.

446
00:17:15,675 --> 00:17:18,618
So this one can have big time and money investment

447
00:17:18,618 --> 00:17:20,759
and constant change, but it can fit any size team.

448
00:17:20,759 --> 00:17:25,062
So in this case, you create a powerful scripting language,

449
00:17:25,062 --> 00:17:27,884
and you make it easy enough for non-programmers to use.

450
00:17:28,465 --> 00:17:31,186
then your users implement features themselves.

451
00:17:31,186 --> 00:17:34,267
And the features, so the features depend on how much users

452
00:17:34,267 --> 00:17:36,348
are willing to work for them.

453
00:17:36,348 --> 00:17:38,429
And the user can also prototype these features

454
00:17:38,429 --> 00:17:40,449
and then make it so that if it's really awesome

455
00:17:40,449 --> 00:17:42,410
and everyone likes it, a tool programmer can make it

456
00:17:42,410 --> 00:17:44,491
to a fully-fledged feature.

457
00:17:44,491 --> 00:17:47,892
But the backbone of this is really good hiring practices.

458
00:17:47,892 --> 00:17:50,473
And of course, it's difficult to find enough capable devs

459
00:17:50,473 --> 00:17:52,494
that can apply, that can do these kinds of things.

460
00:17:54,811 --> 00:17:55,692
the focus approach.

461
00:17:55,692 --> 00:17:57,293
This one was used by one company.

462
00:17:57,293 --> 00:17:59,814
This one can have big time investments,

463
00:17:59,814 --> 00:18:01,556
suffer from politics, constant change,

464
00:18:01,556 --> 00:18:03,777
and fail to reach mid and low priority items,

465
00:18:03,777 --> 00:18:06,419
but can fit big and medium teams.

466
00:18:06,419 --> 00:18:08,220
So in this case, requests come in through JIRA

467
00:18:08,220 --> 00:18:10,822
or just word of mouth, and then the tool programmers

468
00:18:10,822 --> 00:18:12,964
are asked what they like to work on.

469
00:18:13,564 --> 00:18:17,328
Now, work on that request, bug, or issue can be short or long,

470
00:18:17,328 --> 00:18:19,550
sometimes even like six months long.

471
00:18:19,550 --> 00:18:21,011
But that tool programmer that's working at

472
00:18:21,011 --> 00:18:23,474
knows the context very well.

473
00:18:23,474 --> 00:18:25,176
And that person is then the contact point

474
00:18:25,176 --> 00:18:27,198
for any features or requests that are clear to that.

475
00:18:27,198 --> 00:18:29,780
So there's a personal communication point.

476
00:18:29,780 --> 00:18:32,263
But of course, it's completely not agile at all.

477
00:18:32,263 --> 00:18:35,045
And again, smaller issues will pile up.

478
00:18:37,241 --> 00:18:38,621
The Indie approach.

479
00:18:38,621 --> 00:18:40,482
So this one was used by two companies.

480
00:18:40,482 --> 00:18:42,703
This one can have big time investments,

481
00:18:42,703 --> 00:18:45,224
non-physical communication, constant change,

482
00:18:45,224 --> 00:18:47,245
and fail to reach mid and low priority items,

483
00:18:47,245 --> 00:18:48,545
but it can fit small teams.

484
00:18:48,545 --> 00:18:51,667
So in this case, you have a single programmer.

485
00:18:51,667 --> 00:18:53,547
You create a list of requests.

486
00:18:53,547 --> 00:18:55,448
You go through them to find the severity of the problem

487
00:18:55,448 --> 00:18:57,229
versus time of implementation.

488
00:18:57,229 --> 00:18:59,970
You do progressive releases, so you sort of find out

489
00:18:59,970 --> 00:19:01,230
what is currently necessary.

490
00:19:02,489 --> 00:19:04,250
You keep continual communication with users,

491
00:19:04,250 --> 00:19:05,630
so Slack, email, or Twitter.

492
00:19:05,630 --> 00:19:08,691
But there's large differences in qualitative

493
00:19:08,691 --> 00:19:09,971
and quantitative feedback.

494
00:19:09,971 --> 00:19:13,352
I mean, big UX issues will be brought up by our users,

495
00:19:13,352 --> 00:19:15,213
but the small issues maybe not as much,

496
00:19:15,213 --> 00:19:16,773
so you won't know exactly what to fix.

497
00:19:16,773 --> 00:19:19,834
And you sort of have to make it up as you go along,

498
00:19:19,834 --> 00:19:21,895
which might not be the best way of doing things.

499
00:19:23,860 --> 00:19:25,422
the double prioritization approach.

500
00:19:25,422 --> 00:19:27,684
So this one was used by one company I talked to.

501
00:19:27,684 --> 00:19:29,486
So this one can suffer from politics,

502
00:19:29,486 --> 00:19:30,947
can feel like a faceless system.

503
00:19:30,947 --> 00:19:32,488
There's a constant change,

504
00:19:32,488 --> 00:19:35,051
and you can fail to reach mid and low priority items.

505
00:19:35,051 --> 00:19:36,993
But it can fit big and medium-sized teams.

506
00:19:36,993 --> 00:19:40,456
So in this case, requests are submitted by users,

507
00:19:40,456 --> 00:19:43,399
and the user states benefit with numbers, like one to five.

508
00:19:43,939 --> 00:19:46,503
And for a request, I go to the tool programmer,

509
00:19:46,503 --> 00:19:48,326
and the tool programmer states the cost again

510
00:19:48,326 --> 00:19:49,869
with numbers one to five.

511
00:19:49,869 --> 00:19:52,252
For example, if it ends up three to three,

512
00:19:52,252 --> 00:19:53,895
it goes into the backlog.

513
00:19:53,895 --> 00:19:56,699
But if it's low cost, good benefit, like five to one,

514
00:19:56,699 --> 00:19:58,882
we're going to implement it right away.

515
00:19:59,163 --> 00:20:01,346
The problem here is though, is that cost and benefit

516
00:20:01,346 --> 00:20:04,009
may change over time, depending on how the project progresses.

517
00:20:04,009 --> 00:20:05,411
Maybe big things change.

518
00:20:05,411 --> 00:20:06,673
That happens in game development.

519
00:20:06,673 --> 00:20:09,056
So then it's hard to make an automatic system that

520
00:20:09,056 --> 00:20:10,778
goes through them like the old ones

521
00:20:10,778 --> 00:20:13,402
and sort of reassesses them and see what has changed

522
00:20:13,402 --> 00:20:14,824
and do we still need these features.

523
00:20:16,831 --> 00:20:17,932
The tool designer approach.

524
00:20:17,932 --> 00:20:20,153
This one was used by two companies.

525
00:20:20,153 --> 00:20:22,815
So this one comparatively has less time investment

526
00:20:22,815 --> 00:20:25,037
as you hire a person to take these tasks on them,

527
00:20:25,037 --> 00:20:27,539
but there is the monetary investment

528
00:20:27,539 --> 00:20:28,900
of hiring a new person.

529
00:20:28,900 --> 00:20:31,121
So in this case, any and all features

530
00:20:31,121 --> 00:20:32,923
can be requested at any time,

531
00:20:32,923 --> 00:20:35,384
and the tool designer or tool designer team

532
00:20:35,384 --> 00:20:36,445
looks through all of them.

533
00:20:36,625 --> 00:20:39,706
The tool designer then continuously communicates

534
00:20:39,706 --> 00:20:42,307
with all departments, artists, game designers,

535
00:20:42,307 --> 00:20:44,507
level designers, producers, engine programmers,

536
00:20:44,507 --> 00:20:45,147
tool programmers.

537
00:20:45,147 --> 00:20:48,788
So the tool designer decides to remove, change,

538
00:20:48,788 --> 00:20:51,209
but also approve or combine.

539
00:20:51,209 --> 00:20:54,430
If there's multiple things that people are suggesting,

540
00:20:54,430 --> 00:20:56,710
that person knows, oh, this person requested this,

541
00:20:56,710 --> 00:20:58,031
this person requested this.

542
00:20:58,031 --> 00:21:00,111
Actually, we can solve this with one feature

543
00:21:00,111 --> 00:21:01,351
that covers all of these things.

544
00:21:02,152 --> 00:21:04,214
So the tool designer is a sieve in this case.

545
00:21:04,214 --> 00:21:07,456
It slows down the process but removes unnecessary items

546
00:21:07,456 --> 00:21:09,218
and makes them digestible.

547
00:21:09,218 --> 00:21:11,500
Now, so in this case, tool programmers do not need

548
00:21:11,500 --> 00:21:13,502
to think about what it looks like or how it works.

549
00:21:13,502 --> 00:21:15,563
It's about how it works.

550
00:21:15,563 --> 00:21:17,565
But it can be difficult to find a good tool designer

551
00:21:17,565 --> 00:21:18,566
because you need to have a person

552
00:21:18,566 --> 00:21:20,968
that has the wide experiences over all those areas.

553
00:21:21,649 --> 00:21:24,310
Now, mind that this should be a permanent position.

554
00:21:24,310 --> 00:21:26,891
Not someone to just put into this role for a few months

555
00:21:26,891 --> 00:21:28,391
and then a person is pulled off again.

556
00:21:28,391 --> 00:21:29,812
Because again, the changing of the guard.

557
00:21:29,812 --> 00:21:32,493
Otherwise, you're going to have that layer cake problem again.

558
00:21:32,493 --> 00:21:35,374
And of course, it's going to be difficult for people

559
00:21:35,374 --> 00:21:36,354
to actually find that person.

560
00:21:36,354 --> 00:21:37,695
Who is currently the tool designer?

561
00:21:37,695 --> 00:21:39,435
Who do I talk to about issues that I'm having?

562
00:21:40,155 --> 00:21:42,697
Now personally, this is the approach I would recommend

563
00:21:42,697 --> 00:21:44,298
simply because it solves the issues

564
00:21:44,298 --> 00:21:45,799
that most people are having.

565
00:21:45,799 --> 00:21:47,220
It has the least concurrent issues.

566
00:21:47,220 --> 00:21:49,781
It's hard to find one, but if you can find one,

567
00:21:49,781 --> 00:21:50,742
I would say go for it.

568
00:21:50,742 --> 00:21:53,324
It will certainly help you out in the long run.

569
00:21:53,324 --> 00:21:56,506
And if this approach sounds interesting, go buy that book.

570
00:21:56,506 --> 00:21:57,846
It will help you immensely.

571
00:21:57,846 --> 00:22:00,248
David Lightbound, the guy who wrote this,

572
00:22:00,248 --> 00:22:01,649
is also in the audience around here.

573
00:22:02,349 --> 00:22:05,154
He's right there, so go talk to him if this sounds interesting to you.

574
00:22:05,154 --> 00:22:08,539
And this book is also available in the GDC store.

575
00:22:08,539 --> 00:22:09,320
So go take a look at it.

576
00:22:09,320 --> 00:22:10,221
It's really good.

577
00:22:10,221 --> 00:22:13,006
So those are all the approaches that I found.

578
00:22:13,006 --> 00:22:15,149
But of course, there's other ones out there as well.

579
00:22:17,075 --> 00:22:19,855
For example, the one that I use at IOI is a combination.

580
00:22:19,855 --> 00:22:22,416
I am a tool designer, but I also do in the room.

581
00:22:22,416 --> 00:22:25,497
I move my desk to whoever currently needs my help.

582
00:22:25,497 --> 00:22:27,297
So for example, I'm currently sitting with level designers

583
00:22:27,297 --> 00:22:28,237
to improve their system.

584
00:22:28,237 --> 00:22:30,498
Now, the reason I'm doing that is because I can then

585
00:22:30,498 --> 00:22:32,338
overhear what people are saying.

586
00:22:32,338 --> 00:22:34,219
Sometimes there's an issue and they don't know

587
00:22:34,219 --> 00:22:36,479
who to talk to or they are afraid to talk about it,

588
00:22:36,479 --> 00:22:38,620
but I overhear it and I go, hey, I can help out with that.

589
00:22:39,020 --> 00:22:40,520
And we also use the focus system.

590
00:22:40,520 --> 00:22:41,881
So there's a specific tool programmer

591
00:22:41,881 --> 00:22:43,081
working on specific issues.

592
00:22:43,081 --> 00:22:45,362
So in this case, also for me, I know exactly

593
00:22:45,362 --> 00:22:47,582
who to talk to if there's a specific problem somewhere.

594
00:22:47,582 --> 00:22:49,763
And of course, you can make your own combinations.

595
00:22:49,763 --> 00:22:53,144
So for example, the tool designer plus a command

596
00:22:53,144 --> 00:22:56,265
center, meaning you have multiple teams or studios,

597
00:22:56,265 --> 00:22:58,986
but a single tool designer and tool programmer team.

598
00:22:58,986 --> 00:23:01,367
Or the committee and in-the-room approach,

599
00:23:01,367 --> 00:23:04,928
where a committee of leads decide which team members

600
00:23:04,928 --> 00:23:07,149
should sit with who for a set time

601
00:23:07,149 --> 00:23:08,569
to figure out issues with tools.

602
00:23:10,245 --> 00:23:11,526
Or the point assignment approach

603
00:23:11,526 --> 00:23:13,407
plus the double prioritization approach

604
00:23:13,407 --> 00:23:16,010
by giving the level designers and the tool programmers

605
00:23:16,010 --> 00:23:18,532
both points to spend on what they think is important

606
00:23:18,532 --> 00:23:19,693
and what they think can be done.

607
00:23:19,693 --> 00:23:22,335
Or some other combination or something new.

608
00:23:22,335 --> 00:23:24,557
I mean, this is only what I've been able to research

609
00:23:24,557 --> 00:23:27,180
in a year for those who are willing to talk about it.

610
00:23:27,180 --> 00:23:29,301
I mean, who knows what else is out there?

611
00:23:29,301 --> 00:23:31,603
And every team, of course, tries to make their own way.

612
00:23:31,603 --> 00:23:33,345
So, of course, you need to find out

613
00:23:33,345 --> 00:23:34,986
what works best for your team.

614
00:23:34,986 --> 00:23:36,187
How?

615
00:23:36,187 --> 00:23:36,448
Again.

616
00:23:37,142 --> 00:23:39,266
Company culture, country culture, production methods,

617
00:23:39,266 --> 00:23:40,948
publisher relations, these are the problems

618
00:23:40,948 --> 00:23:41,909
most people run into.

619
00:23:41,909 --> 00:23:44,393
So which ones of these are a problem for you?

620
00:23:44,393 --> 00:23:45,915
Or which ones don't you care about?

621
00:23:45,915 --> 00:23:48,179
Maybe you have a lot of money and a lot of time

622
00:23:48,179 --> 00:23:50,903
on your hands, and you can do the brute force system.

623
00:23:50,903 --> 00:23:51,524
Or maybe you don't.

624
00:23:51,524 --> 00:23:52,826
Maybe there's other things you care about.

625
00:23:54,170 --> 00:23:57,773
But the core is this, finding an effective filter

626
00:23:57,773 --> 00:23:59,234
is key to good tool triage.

627
00:23:59,234 --> 00:24:02,317
You need to find out for yourself what works for your team.

628
00:24:02,317 --> 00:24:04,018
And be critical about this approach.

629
00:24:04,018 --> 00:24:06,920
Change it if it happens to not work in your specific team.

630
00:24:06,920 --> 00:24:08,361
This is your team.

631
00:24:08,361 --> 00:24:10,743
You can save your team time and headaches.

632
00:24:10,743 --> 00:24:11,744
You want to hire the best,

633
00:24:11,744 --> 00:24:14,406
you want to give them the best office environment,

634
00:24:14,406 --> 00:24:16,568
so make that effort to give your level designers

635
00:24:16,568 --> 00:24:19,170
the best tools and level editors that they could have,

636
00:24:19,170 --> 00:24:20,330
because it's possible.

637
00:24:20,330 --> 00:24:21,712
Thank you very much.

638
00:24:30,605 --> 00:24:33,108
I'd like to give thanks to these people for feedback

639
00:24:33,108 --> 00:24:33,689
and helping out.

640
00:24:33,689 --> 00:24:34,770
It's awesome.

641
00:24:34,770 --> 00:24:38,034
And also, this talk was about tool triage.

642
00:24:38,034 --> 00:24:40,596
But I'm also doing two roundtables about tool triage

643
00:24:40,596 --> 00:24:41,978
on Wednesday and Thursday.

644
00:24:41,978 --> 00:24:44,301
And we will discuss these approaches

645
00:24:44,301 --> 00:24:46,723
and discuss what problems you have been having.

646
00:24:46,723 --> 00:24:47,324
Come talk to us.

647
00:24:47,324 --> 00:24:48,025
It's an hour long.

648
00:24:48,025 --> 00:24:49,927
We can talk about it and see what works for everyone.

649
00:24:50,487 --> 00:24:52,909
So if you're in the audience here, you're a level designer,

650
00:24:52,909 --> 00:24:55,090
you think, wow, these problems is what we're having.

651
00:24:55,090 --> 00:24:57,531
I'd love to have better tools, but I don't really

652
00:24:57,531 --> 00:24:58,752
have the power to change things.

653
00:24:58,752 --> 00:25:01,373
Cool, send your producers, send your executives

654
00:25:01,373 --> 00:25:02,674
to these roundtables.

655
00:25:02,674 --> 00:25:03,414
I have the figures.

656
00:25:03,414 --> 00:25:04,895
I'll talk to them and convince them

657
00:25:04,895 --> 00:25:07,557
that these are really good things you guys probably need.

658
00:25:07,557 --> 00:25:10,358
All right, are there any questions?

659
00:25:14,009 --> 00:25:15,069
Yes.

660
00:25:15,069 --> 00:25:15,829
One question.

661
00:25:15,829 --> 00:25:19,250
You didn't mention anything about narrative tools.

662
00:25:19,250 --> 00:25:24,811
Would you view them as the same treatment as level design tools?

663
00:25:24,811 --> 00:25:31,092
Just from experience, a lot of narrative design tools, quest design tools in general, seem

664
00:25:31,092 --> 00:25:36,053
to be a very overlooked part of game design and they happen very late and then it's very,

665
00:25:36,053 --> 00:25:39,794
you know, it's always a difficult situation there.

666
00:25:40,949 --> 00:25:42,410
I would say, yeah, the same approaches.

667
00:25:42,410 --> 00:25:45,233
Especially in this case, I'm also doing some,

668
00:25:45,233 --> 00:25:47,134
looking at the narrative tools at IO Interactive.

669
00:25:47,134 --> 00:25:50,517
And it's really a thing of,

670
00:25:50,517 --> 00:25:51,858
if you have a person doing this,

671
00:25:51,858 --> 00:25:52,899
if you have a tools designer,

672
00:25:52,899 --> 00:25:55,141
they are communicating with all these teams.

673
00:25:55,141 --> 00:25:58,043
So in this case, they know that the narrative team

674
00:25:58,043 --> 00:25:59,364
is having a problem with the tool.

675
00:25:59,604 --> 00:26:01,286
So if they're then in a production talk somewhere,

676
00:26:01,286 --> 00:26:03,749
they can go, actually, we might be overlooking this thing

677
00:26:03,749 --> 00:26:07,153
right here, because there's not a narrative person in the room.

678
00:26:07,153 --> 00:26:08,594
But I know about it, so we should probably

679
00:26:08,594 --> 00:26:10,637
look into this, because they can find out,

680
00:26:10,637 --> 00:26:12,278
like, is this a thing we currently need?

681
00:26:12,278 --> 00:26:13,640
Is this a thing we do in the future?

682
00:26:13,640 --> 00:26:16,263
Could it be part of the level design editor kit?

683
00:26:16,263 --> 00:26:18,005
Like, do we need to combine these things?

684
00:26:18,005 --> 00:26:20,167
So definitely say, like, all these different kinds of tools.

685
00:26:20,808 --> 00:26:22,209
whatever works for you and your team,

686
00:26:22,209 --> 00:26:23,769
but in this case, the tool designer

687
00:26:23,769 --> 00:26:27,291
can look at all these things and make something

688
00:26:27,291 --> 00:26:28,532
that works in this case.

689
00:26:28,532 --> 00:26:29,613
Does that answer your question?

690
00:26:29,613 --> 00:26:30,373
Yeah, that's great, thanks.

691
00:26:30,373 --> 00:26:31,214
All right, thanks.

692
00:26:31,214 --> 00:26:34,916
I have a pretty simple question, but I was curious,

693
00:26:34,916 --> 00:26:39,118
since everything's sort of framed with big team,

694
00:26:39,118 --> 00:26:41,939
medium team, small team, I was just curious,

695
00:26:41,939 --> 00:26:43,660
what you consider the thresholds of each of them,

696
00:26:43,660 --> 00:26:45,721
like how many people would you consider

697
00:26:45,721 --> 00:26:46,922
a small team, medium team, et cetera?

698
00:26:47,388 --> 00:26:50,390
So for big teams, I would say like 300, 400 plus.

699
00:26:50,390 --> 00:26:53,293
Like you have a lot of people.

700
00:26:53,293 --> 00:26:54,754
For medium teams, I would say about like 100.

701
00:26:54,754 --> 00:26:56,876
And for small teams, I would say about 10 to 15.

702
00:26:56,876 --> 00:27:00,999
But of course, this also goes with the teams within teams.

703
00:27:00,999 --> 00:27:02,140
I'm not saying company.

704
00:27:02,140 --> 00:27:03,201
I'm saying specifically team.

705
00:27:03,201 --> 00:27:05,663
If you have a really big company,

706
00:27:05,663 --> 00:27:08,485
but working with small teams, that's sort of what I mean.

707
00:27:08,485 --> 00:27:10,206
Like you can use one of those approaches

708
00:27:10,206 --> 00:27:11,608
that fits the small teams.

709
00:27:11,608 --> 00:27:14,050
Any other questions?

710
00:27:14,517 --> 00:27:17,002
Well, I did tweet out that anyone who would come

711
00:27:17,002 --> 00:27:19,607
would get a stroopwafel, so I have a couple of them here.

712
00:27:19,607 --> 00:27:21,851
If you like them, come and get them.

713
00:27:21,851 --> 00:27:24,697
Also, don't forget to fill in your forms at the end.

714
00:27:24,697 --> 00:27:25,598
So, thank you very much.

