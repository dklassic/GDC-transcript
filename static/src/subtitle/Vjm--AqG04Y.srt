1
00:00:03,025 --> 00:00:05,646
So thank you all for coming for delaying your lunch to come to

2
00:00:05,686 --> 00:00:08,048
my talk, Lessons Learned from a Decade of Audio Programming. My

3
00:00:08,088 --> 00:00:12,691
name is Guy Somburg and I'm a core programmer at Telltale

4
00:00:12,711 --> 00:00:16,493
Games. And so here I'm going to share my wisdom of the last 10

5
00:00:17,174 --> 00:00:21,657
plus years of programming audio engines. So who am I? Why should

6
00:00:21,677 --> 00:00:24,339
you bother listening to me? I've been in games since 2002. That

7
00:00:25,479 --> 00:00:27,841
turns out it's actually 12 years so my talk should really be

8
00:00:27,881 --> 00:00:30,162
called Lessons Learned from a Doh Decade of Audio Programming

9
00:00:30,182 --> 00:00:31,483
which is totally my new favorite word.

10
00:00:33,524 --> 00:00:37,367
Over the years I've owned the audio engine at every company I've ever worked at that was either the

11
00:00:37,848 --> 00:00:40,830
engine for the whole company or the engine just for the product I was working on.

12
00:00:41,331 --> 00:00:44,954
And more importantly though I've actually shipped lots of games, everything from slot machines,

13
00:00:45,074 --> 00:00:47,956
Game Boy Advance, AAA PC and everything in between.

14
00:00:49,117 --> 00:00:52,600
And over those games I've actually written 13 different audio engines from the ground up,

15
00:00:52,640 --> 00:00:53,761
from zero source code.

16
00:00:54,778 --> 00:00:57,221
And some of those are more than one for each game.

17
00:00:57,681 --> 00:00:59,603
For example, Hellgate London actually had three audio

18
00:00:59,664 --> 00:01:03,528
engines that evolved as the needs of the game evolved.

19
00:01:03,548 --> 00:01:07,933
We decided it was just time to rewrite the engine from the

20
00:01:07,953 --> 00:01:08,273
ground up.

21
00:01:08,313 --> 00:01:10,235
And so over the years, I've actually gotten pretty good at

22
00:01:10,275 --> 00:01:10,315
it.

23
00:01:11,223 --> 00:01:15,807
So in this talk I'm going to give you six kind of pithy lessons that I've learned targeted at,

24
00:01:16,428 --> 00:01:20,251
you know, people who want to be audio programmers or people who are forced to be audio

25
00:01:20,271 --> 00:01:25,957
programmers and don't want to be audio programmers. So the first lesson is that playing

26
00:01:25,997 --> 00:01:28,319
audio is really easy, in fact it's one of the simplest things.

27
00:01:29,347 --> 00:01:30,767
that your audio engine can do,

28
00:01:30,987 --> 00:01:32,347
or that your game engine does.

29
00:01:32,568 --> 00:01:33,488
And to demonstrate this,

30
00:01:33,508 --> 00:01:34,608
we're gonna start from the very beginning.

31
00:01:34,628 --> 00:01:36,489
It's like the fundamentals, how does the speaker work?

32
00:01:37,209 --> 00:01:38,269
This is a great diagram.

33
00:01:38,689 --> 00:01:40,070
There's a cone attached to a magnet.

34
00:01:40,090 --> 00:01:41,490
There's wires coiled around the magnet.

35
00:01:41,510 --> 00:01:44,071
When electricity runs through the wires,

36
00:01:44,131 --> 00:01:45,711
it generates a magnetic field, which moves the magnet,

37
00:01:45,731 --> 00:01:47,112
which moves the cone, which creates sound.

38
00:01:48,312 --> 00:01:49,232
I hope you all followed that.

39
00:01:49,432 --> 00:01:52,613
So you can think about, if you graph the position,

40
00:01:52,633 --> 00:01:55,994
or the offset of that magnet from center over time,

41
00:01:56,615 --> 00:01:58,555
that is kind of your waveform of your sound.

42
00:01:59,375 --> 00:02:01,116
And if you actually draw that out, it'll look like this.

43
00:02:01,157 --> 00:02:02,758
And then what we do is we sample it very frequently,

44
00:02:02,798 --> 00:02:05,020
typically 44,000 or 48,000 times per second,

45
00:02:05,501 --> 00:02:06,402
and that'll look like this.

46
00:02:06,422 --> 00:02:10,025
And then what we do with that is we just move the magnet

47
00:02:10,105 --> 00:02:12,247
to wherever it is at that curve,

48
00:02:12,288 --> 00:02:14,730
that point in the curve, and we generate a sound.

49
00:02:16,462 --> 00:02:17,662
Great, we can play one sound.

50
00:02:18,542 --> 00:02:20,083
Right, big deal, that's not very exciting.

51
00:02:20,123 --> 00:02:21,223
It becomes more exciting when you start

52
00:02:21,243 --> 00:02:22,444
to play more than one sound.

53
00:02:23,044 --> 00:02:26,885
So what happens if you try and play the blue curve

54
00:02:26,925 --> 00:02:30,126
with the, what is that, puke green colored curve

55
00:02:30,746 --> 00:02:31,146
on the right?

56
00:02:31,646 --> 00:02:33,827
Well, it turns out that if you play those two together,

57
00:02:33,987 --> 00:02:35,588
your curve looks like this orange curve.

58
00:02:36,962 --> 00:02:40,525
And if you do all the math, you figure out all the Nyquist and all the voodoo behind it,

59
00:02:40,585 --> 00:02:45,210
it turns out that all you're really doing is adding these two curves sample by sample, just like this.

60
00:02:45,711 --> 00:02:48,393
Your signal A plus signal B equals your output signal.

61
00:02:48,834 --> 00:02:52,297
And because the output signal is itself a signal, it turns out that we can generalize this.

62
00:02:53,323 --> 00:02:56,424
very trivially. Adding up a whole bunch of just all the

63
00:02:56,444 --> 00:02:59,724
signals together becomes your output. Now I can keep going, I

64
00:02:59,884 --> 00:03:02,905
can talk about, you know, I can introduce sub mixing and

65
00:03:03,005 --> 00:03:05,606
clipping and all these other things. But there's kind of one

66
00:03:05,626 --> 00:03:07,786
thing that I want to focus on here and that is that all of

67
00:03:07,846 --> 00:03:12,167
this stuff is embarrassingly vectorizable. So whatever your

68
00:03:12,287 --> 00:03:16,008
particular single instruction multiple data set for your

69
00:03:16,048 --> 00:03:19,789
hardware is, it's going to get a big workout when mixing audio

70
00:03:19,849 --> 00:03:20,830
and playing audios back.

71
00:03:21,710 --> 00:03:24,872
So the point of all this is that playing sounds is free.

72
00:03:24,892 --> 00:03:26,533
It doesn't matter how many sounds you play.

73
00:03:27,194 --> 00:03:28,235
It's, you know what, I'm lying.

74
00:03:28,335 --> 00:03:29,075
Playing sound isn't free.

75
00:03:29,115 --> 00:03:29,996
Playing sound is really cheap.

76
00:03:30,256 --> 00:03:33,439
You can play as many sounds as you want within reason

77
00:03:34,059 --> 00:03:37,382
and it's not gonna cause like resource problems.

78
00:03:37,442 --> 00:03:38,803
Memory is still a concern.

79
00:03:38,843 --> 00:03:40,624
But in terms of CPU cost, it's nothing.

80
00:03:41,305 --> 00:03:44,507
So if playing sounds is cheap bordering on free,

81
00:03:45,208 --> 00:03:46,629
it turns out that the audio mix

82
00:03:47,109 --> 00:03:48,370
is actually what the hard part is.

83
00:03:49,339 --> 00:03:53,783
So what I mean when I say the audio mix? Audio mix is how you combine the sounds that are playing.

84
00:03:53,803 --> 00:03:59,229
It's what the game players are actually hearing. There's a lot of things that go into it.

85
00:03:59,249 --> 00:04:03,233
Some examples are like how the music and the ambience will mesh together. It's how when you

86
00:04:03,273 --> 00:04:07,898
enter sniper mode, maybe the footsteps get louder so you can hear if somebody's sneaking up on

87
00:04:07,938 --> 00:04:10,701
you. It's how the environment, the reverb and the...

88
00:04:12,122 --> 00:04:17,263
the background ambiance of the environment sounds.

89
00:04:17,843 --> 00:04:19,624
And it turns out that one of the biggest hammers

90
00:04:19,684 --> 00:04:22,504
that we have is just lowering volume of sounds

91
00:04:22,524 --> 00:04:23,545
that are less important.

92
00:04:23,585 --> 00:04:25,925
And there's lots of tools in your,

93
00:04:26,385 --> 00:04:28,766
whatever audio engine you're using,

94
00:04:28,786 --> 00:04:32,247
the audio middleware, to do many of these things.

95
00:04:32,267 --> 00:04:33,287
For example, gain reduction.

96
00:04:34,268 --> 00:04:41,114
sound cone so that as I turn my head I get quieter, 3D distance attenuation and ducking is

97
00:04:41,755 --> 00:04:45,038
the process of kind of lowering sounds whenever other sounds, lowering the volume of sounds

98
00:04:45,058 --> 00:04:48,922
whenever other sounds are playing. And all these things are either built into your audio

99
00:04:49,002 --> 00:04:51,624
engine or they're really easy to implement.

100
00:04:53,193 --> 00:04:57,436
There's also more advanced features, I call them mix states, I think they're called sound

101
00:04:57,476 --> 00:05:01,860
moods in Crytek, they're called mixer snapshots in many other engines including FMOD studio.

102
00:05:02,961 --> 00:05:06,884
And this is a much more involved subject where you're basically taking a snapshot of what

103
00:05:06,924 --> 00:05:12,249
you want your mix to look like and fading up to that state whenever certain game events

104
00:05:12,309 --> 00:05:13,049
happen and fading out.

105
00:05:13,089 --> 00:05:15,231
And I wish I had more time to talk about this, I only have a 25 minute talk.

106
00:05:16,132 --> 00:05:20,036
But just mix states, mixer snapshots is like a 60 minute talk on its own.

107
00:05:21,177 --> 00:05:22,379
So there's a lot going there.

108
00:05:22,419 --> 00:05:25,342
Now if you take the lowering volume and kind of take it to its extreme,

109
00:05:26,163 --> 00:05:29,767
it turns out that a big chunk of audio technology actually revolves around not playing sounds at all.

110
00:05:31,043 --> 00:05:33,947
And that takes the form of things like maximum playbacks,

111
00:05:34,247 --> 00:05:36,430
where just the sound can't play more than so many times.

112
00:05:36,450 --> 00:05:39,033
Stream limits, which are usually a restriction

113
00:05:39,074 --> 00:05:41,717
on your bandwidth or kind of your spinning medium,

114
00:05:41,817 --> 00:05:44,321
which is becoming less of a concern with more modern stuff.

115
00:05:44,381 --> 00:05:47,405
But for example, the Xbox 360 often has stream limits.

116
00:05:48,196 --> 00:05:50,458
Virtualized sound sources where just sounds that are less

117
00:05:50,518 --> 00:05:53,200
important get cut off completely so they don't become a part of

118
00:05:53,220 --> 00:05:56,002
the mix. And all these things are again either already built

119
00:05:56,082 --> 00:05:58,224
in, for example, virtualized sound sources or they're things

120
00:05:58,244 --> 00:06:01,166
that are pretty easy to implement in your audio engine.

121
00:06:01,787 --> 00:06:04,729
But I want to talk now about one that's a little bit more involved

122
00:06:04,769 --> 00:06:07,571
in advance and that is Walter Merch's rule of two and a half.

123
00:06:08,312 --> 00:06:10,954
So this gentleman here is Walter Merch, he is an Academy Award

124
00:06:10,974 --> 00:06:13,576
winning sound designer, worked on THX 1138 and a number of other

125
00:06:13,616 --> 00:06:13,896
great movies.

126
00:06:17,739 --> 00:06:22,721
And while he was mixing, uh, THX1138, he realized, he had this realization, he said,

127
00:06:22,741 --> 00:06:26,962
you know, so long as, uh, I'm laying out these footsteps, if I have one person walking,

128
00:06:26,982 --> 00:06:32,664
I have to like, synchronize the footsteps with the, uh, with the scene. So if I have two people

129
00:06:32,724 --> 00:06:36,525
walking, I have to synchronize the footsteps with the scene. As soon as I get past two,

130
00:06:36,565 --> 00:06:41,426
the two and a half thing, all of a sudden it's less about every individual footstep,

131
00:06:41,466 --> 00:06:43,567
and it's more about the sound of footsteps.

132
00:06:45,044 --> 00:06:50,247
So how did we take this and make it into something that was valuable for a game?

133
00:06:51,067 --> 00:06:53,489
And for Hellgate London, and we did this also on Bioshock 2...

134
00:06:54,640 --> 00:06:56,741
We implemented this thing which we called max within radius.

135
00:06:57,101 --> 00:07:00,383
And we allowed for each sound in the game,

136
00:07:00,443 --> 00:07:02,043
we allowed the sound designers to define

137
00:07:02,083 --> 00:07:04,985
a maximum number of playbacks within a given radius.

138
00:07:05,045 --> 00:07:06,105
And they defined the max playbacks

139
00:07:06,205 --> 00:07:07,326
and the radius for that sound.

140
00:07:07,966 --> 00:07:08,887
So in this situation here,

141
00:07:08,907 --> 00:07:10,548
we have the blue triangle as the listener,

142
00:07:10,708 --> 00:07:13,049
the green dots are the sound sources.

143
00:07:13,829 --> 00:07:16,190
And so we draw a circle, or a sphere really,

144
00:07:16,571 --> 00:07:20,072
around the sound sources at the given radius.

145
00:07:20,172 --> 00:07:21,233
And then we cut out in this case,

146
00:07:21,393 --> 00:07:22,814
all but two of these sounds.

147
00:07:24,174 --> 00:07:25,615
which was the max playbacks for the sound.

148
00:07:25,655 --> 00:07:28,236
And what this does is it maintains spatialization.

149
00:07:28,356 --> 00:07:30,357
So in this situation we have two sounds

150
00:07:30,417 --> 00:07:31,637
coming from the left, we have two sounds

151
00:07:31,677 --> 00:07:33,458
coming from the right, two sounds from behind.

152
00:07:33,878 --> 00:07:36,199
To maintain that, but the mix isn't getting muddy.

153
00:07:36,960 --> 00:07:39,641
You start to play all these sounds on top of each other,

154
00:07:39,741 --> 00:07:41,121
it starts to sound like noise.

155
00:07:41,481 --> 00:07:44,983
And so by doing this, we are creating a situation

156
00:07:45,103 --> 00:07:47,184
where we still have all the spatialization,

157
00:07:47,224 --> 00:07:48,404
we still have the sound coming,

158
00:07:48,704 --> 00:07:50,085
but we're actually using less resources

159
00:07:50,385 --> 00:07:52,446
while still having a cleaner mix.

160
00:07:54,262 --> 00:07:58,288
So if I were to summarize the audio mix in kind of one pithy sentence,

161
00:07:58,308 --> 00:08:00,631
it would be that you want to let the most important sounds shine.

162
00:08:01,912 --> 00:08:04,816
But more precisely, since we are audio programmers, not sound designers,

163
00:08:04,976 --> 00:08:07,119
it's that you need to provide tools for your sound designers

164
00:08:07,239 --> 00:08:09,862
to allow them to make the most important sounds shine.

165
00:08:11,370 --> 00:08:13,391
Speaking of sound designers, you need to learn to work with them.

166
00:08:13,431 --> 00:08:14,432
They are your customers.

167
00:08:14,992 --> 00:08:16,913
And they are wonderful, beautiful people.

168
00:08:17,974 --> 00:08:24,737
And they will create awesome content with whatever you give them.

169
00:08:25,978 --> 00:08:30,180
But really what they want to do is ship a copy of Pro Tools with every game.

170
00:08:31,241 --> 00:08:32,741
And we'll come back to this, I promise.

171
00:08:33,669 --> 00:08:38,952
They also have their own language, with lots of crazy terms that you have to learn.

172
00:08:39,232 --> 00:08:42,514
And this shouldn't come as a surprise, we as programmers have our own language.

173
00:08:43,175 --> 00:08:48,818
And so what you need to do with all these things is you need to learn their language.

174
00:08:48,838 --> 00:08:51,800
You need to learn, speak it to them, and you need to love it,

175
00:08:51,940 --> 00:08:54,262
because your sound designers will love you for loving their language.

176
00:08:54,302 --> 00:08:58,144
If you come to them and speak to them about decibels and headroom and VCAs...

177
00:08:59,667 --> 00:09:02,749
It makes it much easier to communicate when you're talking to them in their own language.

178
00:09:03,189 --> 00:09:06,231
There's one of these terms in particular I want to talk about, that is the decibel.

179
00:09:06,251 --> 00:09:09,052
A decibel is simply defined as one-tenth of a bell.

180
00:09:10,353 --> 00:09:10,793
What's a bell?

181
00:09:11,914 --> 00:09:13,875
Turns out that the answer is, it doesn't matter.

182
00:09:13,895 --> 00:09:19,919
A bell, the most important thing you need to know is that 6 dB is half or double volume.

183
00:09:20,439 --> 00:09:25,662
So to find out what your decibels are, or what the volume percent is,

184
00:09:26,082 --> 00:09:27,903
you divide by 6 and turn it into a power of 2.

185
00:09:29,856 --> 00:09:30,256
Easy enough.

186
00:09:30,897 --> 00:09:35,039
And in fact, whenever I write a new audio engine, the first thing that I do, these four

187
00:09:35,059 --> 00:09:37,680
lines of code are the first four lines of code that I write.

188
00:09:38,380 --> 00:09:41,342
These are conversion functions from decibels to volume percent and back.

189
00:09:41,942 --> 00:09:45,724
And I'm going to stay here for about four more seconds to let people who are taking

190
00:09:45,764 --> 00:09:47,685
pictures of it or writing them furiously down.

191
00:09:47,705 --> 00:09:51,167
These are wonderful functions.

192
00:09:51,187 --> 00:09:52,227
The first thing that I do.

193
00:09:52,247 --> 00:09:55,049
I hear lots of snaps.

194
00:09:55,709 --> 00:09:55,989
Oh, here.

195
00:09:56,189 --> 00:09:56,429
Hold on.

196
00:09:56,489 --> 00:09:56,890
I can go back.

197
00:09:57,430 --> 00:09:57,930
Quick, quick, quick.

198
00:10:03,427 --> 00:10:07,189
Okay, alright, we got it. So I'm gonna, before we leave this subject, I'm gonna leave, uh,

199
00:10:07,249 --> 00:10:11,931
leave you with the biggest, best secret that I know for working with sound designers. So

200
00:10:11,951 --> 00:10:15,974
let's say your sound designer comes to you and he says, I want to be able to kinda play

201
00:10:15,994 --> 00:10:20,936
these, you know, this list of sounds randomly, kinda with a timer on it and, uh, go from

202
00:10:20,957 --> 00:10:26,380
there. You tell him in one word. You can say, no. No, I'm not gonna do that for you. That

203
00:10:26,420 --> 00:10:31,623
is not at all what you want. You're not trying to solve that problem. You're trying to solve

204
00:10:32,567 --> 00:10:34,727
the problem of creating a background, an ambience.

205
00:10:34,767 --> 00:10:37,328
Let's see if we can find a solution for that

206
00:10:37,688 --> 00:10:39,249
and give you what you're actually asking for.

207
00:10:39,269 --> 00:10:41,910
Because remember, sound designers will create wonderful content

208
00:10:42,050 --> 00:10:45,891
even if you give them trash, horrible, awful tools to do it with.

209
00:10:47,352 --> 00:10:50,213
And the situation that I talked about is a dramatization

210
00:10:50,453 --> 00:10:52,294
of something that happened before I came on

211
00:10:52,734 --> 00:10:55,315
on a previous product that was actually hugely award-winning.

212
00:10:57,305 --> 00:10:59,346
So, even, you know, this is true.

213
00:10:59,406 --> 00:11:01,467
They will create award-winning content, even with trash.

214
00:11:01,847 --> 00:11:04,428
So your goal then should be, don't give them trash.

215
00:11:04,488 --> 00:11:05,928
Even if your sound designer comes to you and says,

216
00:11:06,568 --> 00:11:08,269
I would like a steaming pile of trash, please.

217
00:11:08,869 --> 00:11:09,509
You say no.

218
00:11:10,230 --> 00:11:11,510
Instead, you give them the tool,

219
00:11:11,550 --> 00:11:13,531
best tool to solve their more general problem

220
00:11:14,611 --> 00:11:16,071
in a long-term lazy fashion.

221
00:11:16,732 --> 00:11:20,293
If you are long-term lazy, you spend more time up front

222
00:11:20,533 --> 00:11:21,913
and you give them great tools

223
00:11:22,393 --> 00:11:23,914
that solve exactly what they're trying to do.

224
00:11:24,989 --> 00:11:29,212
And if you do this, then your product will ship on time, it will ship maybe even early,

225
00:11:29,273 --> 00:11:33,275
and sound will not be a problem if you spend the time up front.

226
00:11:34,036 --> 00:11:37,198
So we're all game developers, we have to do things quickly.

227
00:11:38,119 --> 00:11:39,320
And middleware is awesome.

228
00:11:39,420 --> 00:11:44,964
There's Fmod and Wwise and various other middleware things that will make bootstrapping your audio

229
00:11:45,004 --> 00:11:46,165
engine really, really quick.

230
00:11:47,144 --> 00:11:49,529
So the fact that I'm going to bootstrap an audio engine here

231
00:11:49,549 --> 00:11:49,910
in front of you.

232
00:11:49,930 --> 00:11:51,233
This is all the source code for an audio engine.

233
00:11:51,253 --> 00:11:53,918
I'm going to go about 99% light speed, but I'm hoping that I

234
00:11:53,958 --> 00:11:55,021
will get my point across.

235
00:11:56,444 --> 00:11:56,744
Here we go.

236
00:11:57,681 --> 00:12:00,823
This is our header for audio engine, we have some static init update and shutdown functions.

237
00:12:01,523 --> 00:12:04,665
We have some functions to manage sounds and playing channels.

238
00:12:05,446 --> 00:12:07,747
We're using the pointed implementation, so here's our pimple.

239
00:12:08,228 --> 00:12:11,950
And then we have some... here I'm using fmod for my source data, but the principle applies

240
00:12:12,410 --> 00:12:14,231
for whatever audio engine you're using.

241
00:12:14,271 --> 00:12:18,194
And then we have some init and shutdown functions, there is constructors and destructors,

242
00:12:18,554 --> 00:12:21,076
which I'm not going to show the source code here for, because they're boring,

243
00:12:21,196 --> 00:12:25,318
they're just copy-pasted from the documentation, and then just releasing all your assets.

244
00:12:26,239 --> 00:12:33,923
Here's our update function. We're going through all of our channels, seeing what's stopped, we remove anything that's no longer valid and then we update the system.

245
00:12:35,244 --> 00:12:43,128
Our load sound and unload sound are really kind of mirrors of each other. First we check our cache, then we either load or unload the sound, and then we either add or remove it from the cache.

246
00:12:43,829 --> 00:12:46,110
I'm going to spend just a little bit more time on play sound here.

247
00:12:47,131 --> 00:12:54,275
So here we have, we see if the sound is already loaded, if not we load the sound, and then if we still don't have the sound then we...

248
00:12:55,444 --> 00:12:59,081
Then we exit early, and then finally we play the sound and set all of its parameters.

249
00:12:59,764 --> 00:13:01,205
Now there's three things I want to call out here.

250
00:13:01,245 --> 00:13:02,686
Number one is this parameter here.

251
00:13:02,746 --> 00:13:05,228
The third parameter to play sound, it's boolean true.

252
00:13:05,248 --> 00:13:05,728
What does that mean?

253
00:13:06,229 --> 00:13:09,091
It's starting the sound as paused.

254
00:13:09,331 --> 00:13:11,252
And what that does is if you don't pass it,

255
00:13:11,272 --> 00:13:13,574
if you pass false, the sound will start playing immediately

256
00:13:13,674 --> 00:13:14,615
or as close to immediately.

257
00:13:14,635 --> 00:13:17,116
And the audio thread, the mixer thread, is going to get that.

258
00:13:17,897 --> 00:13:20,639
And what can happen is there will be a brief window

259
00:13:20,999 --> 00:13:22,040
after you've started the sound,

260
00:13:22,680 --> 00:13:25,462
before you have set the 3D parameters and the volume

261
00:13:25,482 --> 00:13:26,503
and whatever else you're setting,

262
00:13:26,983 --> 00:13:27,884
while that sound can play.

263
00:13:27,904 --> 00:13:28,724
And you get a little pop.

264
00:13:29,185 --> 00:13:33,367
little pop and then the sound goes to whatever volume and stuff you've set.

265
00:13:33,667 --> 00:13:37,049
So by starting it as paused and then setting your parameters and unpausing it,

266
00:13:37,550 --> 00:13:40,832
you are preventing that pop and kind of priming the pump.

267
00:13:41,612 --> 00:13:44,133
Second thing I want to call it is the return value of this is an integer.

268
00:13:44,634 --> 00:13:48,316
And basically this is how the external system deals with playing sounds or

269
00:13:48,376 --> 00:13:49,477
interacts with playing sounds.

270
00:13:49,937 --> 00:13:52,538
Is through this and yes you do have to do a lookup every time

271
00:13:53,099 --> 00:13:54,479
to actually get the underlying object.

272
00:13:54,640 --> 00:13:56,681
And it's tempting to say well let me create an object.

273
00:13:57,061 --> 00:13:59,102
like a playing sound or a channel object

274
00:13:59,162 --> 00:14:00,843
or something that you can call functions on.

275
00:14:01,264 --> 00:14:03,505
The problem is now all of a sudden you have this object

276
00:14:03,625 --> 00:14:05,607
that is in cahoots with the sound system.

277
00:14:05,647 --> 00:14:07,668
It needs to know about the internals of the sound system,

278
00:14:08,328 --> 00:14:10,930
but it's not really owned by the sound system.

279
00:14:11,090 --> 00:14:13,592
And so the underlying concept,

280
00:14:13,612 --> 00:14:16,394
so the underlying memory that this object is pointing at

281
00:14:17,434 --> 00:14:19,896
can disappear and then it doesn't know about it.

282
00:14:20,776 --> 00:14:23,018
I have fixed a lot of crashes, a lot of weird crashes,

283
00:14:23,238 --> 00:14:26,700
simply by converting from sound objects to integer IDs.

284
00:14:27,775 --> 00:14:31,536
The last thing I want to call out here is that even if we fail to load the sound, we

285
00:14:31,596 --> 00:14:33,477
still return a valid channel ID.

286
00:14:33,537 --> 00:14:36,698
And this is really just to protect against one particular pattern of coding, which I've

287
00:14:36,718 --> 00:14:41,179
seen particularly in particle systems, where there's a sound that they want to play, and

288
00:14:41,219 --> 00:14:43,520
then every frame they say, is my channel ID valid?

289
00:14:43,660 --> 00:14:44,861
If not, play the sound.

290
00:14:45,381 --> 00:14:46,641
Next frame, is my channel ID valid?

291
00:14:46,681 --> 00:14:47,462
If not, play the sound.

292
00:14:47,865 --> 00:14:49,968
if you are constantly returning an invalid channel ID,

293
00:14:49,988 --> 00:14:50,929
if you fail to load the sound,

294
00:14:51,249 --> 00:14:52,791
you're gonna be wasting all this processing

295
00:14:52,871 --> 00:14:53,792
trying to play the sound

296
00:14:53,832 --> 00:14:55,214
that you're never gonna actually succeed on.

297
00:14:55,695 --> 00:14:57,337
So always return a valid channel ID

298
00:14:57,617 --> 00:14:58,738
even if you fail to load the sound.

299
00:15:00,443 --> 00:15:02,645
Last piece of this is just the set channel, whatever.

300
00:15:02,725 --> 00:15:05,907
These are really boring, just follow the pattern and go from there.

301
00:15:06,707 --> 00:15:11,171
So in summary, we have, it took about 300 lines of code for a fully functional audio engine.

302
00:15:11,731 --> 00:15:15,534
It took me about an hour and a half, I'll grant you, I know what I'm doing and what it needs to look like at the end.

303
00:15:16,034 --> 00:15:18,776
So, you know, it might take other people longer, but...

304
00:15:19,756 --> 00:15:21,277
So what? Like, why did I show this to you?

305
00:15:22,175 --> 00:15:26,177
Well, it turns out that you can ship on the moral equivalent of this code.

306
00:15:26,457 --> 00:15:29,398
There's a few little bits and bobs other than the initial destruct that you need.

307
00:15:29,918 --> 00:15:31,299
But you can actually ship on this.

308
00:15:31,339 --> 00:15:31,819
And I have.

309
00:15:32,019 --> 00:15:35,380
Like Minion Master, this is a game that I did as an indie at BitFlip Games.

310
00:15:35,960 --> 00:15:41,522
This is more or less the audio engine that we shipped with.

311
00:15:42,543 --> 00:15:43,803
But, like, remember this?

312
00:15:44,063 --> 00:15:47,284
I showed you this wonderful Pro Tools that we want to ship a copy of with every game?

313
00:15:48,241 --> 00:15:49,001
Does this look familiar?

314
00:15:49,601 --> 00:15:51,422
Here on the left we have Wwise,

315
00:15:51,482 --> 00:15:52,883
on the right we have FMOD Studio.

316
00:15:53,603 --> 00:15:54,603
They're very similar to this,

317
00:15:54,663 --> 00:15:56,224
and these tools will provide your sound designers

318
00:15:56,244 --> 00:15:58,165
with a lot of features just right out of the box.

319
00:15:58,345 --> 00:16:02,186
Snapshots and busing and all these wonderful things.

320
00:16:03,167 --> 00:16:05,808
And it's really tempting just to give them the tools

321
00:16:05,868 --> 00:16:06,828
and say, great, I'm done.

322
00:16:07,829 --> 00:16:09,409
But you can't just throw these tools at them

323
00:16:09,449 --> 00:16:10,129
and call it a day.

324
00:16:10,189 --> 00:16:11,490
Like off the top of my head,

325
00:16:12,590 --> 00:16:14,571
here's a small subset of some of the things

326
00:16:14,591 --> 00:16:15,652
you might have to think about.

327
00:16:17,430 --> 00:16:21,553
in your game engine. Now not every game engine or audio engine needs all of these things but

328
00:16:21,914 --> 00:16:27,578
all audio engines will need some of these things. So I wish I had time to talk about all of them but

329
00:16:27,598 --> 00:16:34,463
I don't. So lesson five is that sound is always the first thing to get the shaft and I'm going

330
00:16:34,483 --> 00:16:39,867
to present you with some, I can see some people nodding here that's awesome, some situations

331
00:16:39,887 --> 00:16:45,631
that are inspired by real life events not exactly but you know sufficient close enough. So we need

332
00:16:45,691 --> 00:16:46,392
five megs of ram.

333
00:16:47,467 --> 00:16:53,612
take it from sound, they have too much anyway. Our ship date hasn't changed, but everybody else

334
00:16:53,692 --> 00:17:01,218
is running late. Well, sound is post process, so guess who gets to crunch? We're staffing up,

335
00:17:01,258 --> 00:17:01,698
who do we need?

336
00:17:04,128 --> 00:17:07,250
we don't, nobody, the audio engine, yeah, nobody gets to do

337
00:17:07,310 --> 00:17:11,312
work on the audio. And I want to do a little bit of, this little

338
00:17:11,352 --> 00:17:17,175
dude here is the flagship studio's sound caveman. The

339
00:17:17,895 --> 00:17:21,257
people, before I started working at flagship studios, they all

340
00:17:21,297 --> 00:17:23,018
knew that they were sound cavemen and they had a very

341
00:17:23,038 --> 00:17:25,179
primitive audio engine. So whoever kind of touched it last

342
00:17:25,259 --> 00:17:29,462
became the expert. They became the sound Neanderthal. And they

343
00:17:29,502 --> 00:17:32,543
got the sound caveman and became the expert.

344
00:17:32,950 --> 00:17:36,192
So when I came in I got to keep the sound caveman because I own that audio engine.

345
00:17:37,632 --> 00:17:38,112
So what can you do?

346
00:17:38,172 --> 00:17:41,213
Like these are kind of fun little situations but what can you do if you're faced with these

347
00:17:41,233 --> 00:17:41,754
situations?

348
00:17:41,794 --> 00:17:46,235
So the first thing is the best ideal case is push for a dedicated audio programmer.

349
00:17:46,335 --> 00:17:47,676
I mean if you can.

350
00:17:47,996 --> 00:17:48,836
It's not always possible.

351
00:17:48,896 --> 00:17:51,557
Maybe you're a small indie and you can't hire anybody.

352
00:17:51,617 --> 00:17:55,338
Maybe there's just no budget for a particular audio programmer.

353
00:17:56,048 --> 00:17:59,232
But if you can, then there's, like, it's awesome.

354
00:17:59,472 --> 00:18:02,276
It's a great position to have in your studio.

355
00:18:03,177 --> 00:18:04,658
If you can't, then you can learn it yourself.

356
00:18:04,899 --> 00:18:07,462
It's actually really rewarding, it's not that difficult,

357
00:18:07,602 --> 00:18:10,245
and it's actually quite fun to do this.

358
00:18:10,445 --> 00:18:11,086
Here we got somebody.

359
00:18:12,428 --> 00:18:12,768
Thank you, sir.

360
00:18:15,226 --> 00:18:17,187
And the last one is a little bit sneakier.

361
00:18:17,888 --> 00:18:19,869
You can ask for more resources than you actually need.

362
00:18:20,469 --> 00:18:25,312
So you ask for 50 megabytes, they give you 40 megabytes, and then you plan for 35 at

363
00:18:25,332 --> 00:18:26,813
the end of the project when they steal from you.

364
00:18:27,293 --> 00:18:30,114
But make sure if you do this that you use everything that you get.

365
00:18:30,214 --> 00:18:34,277
If you actually use 35 megs of the 40 that they give you, then on your next project they'll

366
00:18:34,297 --> 00:18:38,479
say you only used 35, so they'll give you 35, and then they still steal from you at

367
00:18:38,499 --> 00:18:38,779
the end.

368
00:18:40,400 --> 00:18:43,562
The last lesson here I'm going to leave you with is listen to your games.

369
00:18:45,128 --> 00:18:47,048
critically important that you listen to your games

370
00:18:47,408 --> 00:18:48,249
as much as you can.

371
00:18:48,829 --> 00:18:50,529
Over the years, I've learned to tell the difference

372
00:18:50,549 --> 00:18:52,070
between all these different kinds of noise

373
00:18:52,250 --> 00:18:53,250
just from listening to them.

374
00:18:53,270 --> 00:18:55,151
And I can tell where they're coming from and why.

375
00:18:56,131 --> 00:18:58,372
And this is, it's not easy, but you know,

376
00:18:58,672 --> 00:18:59,692
over the years I've developed this.

377
00:18:59,892 --> 00:19:00,872
And so I can do this.

378
00:19:01,573 --> 00:19:01,953
Can you?

379
00:19:02,013 --> 00:19:03,513
Now I bet all the sound designers here are going,

380
00:19:03,633 --> 00:19:05,614
well yeah, but the sound programmers,

381
00:19:05,634 --> 00:19:06,834
you need to develop your ear.

382
00:19:06,914 --> 00:19:09,255
You need to listen and know what the difference

383
00:19:09,295 --> 00:19:11,215
between a sample discontinuity and a buffer under it

384
00:19:11,235 --> 00:19:12,476
and how they sound different and why.

385
00:19:13,532 --> 00:19:18,298
So, I cannot stress this enough, there is no substitute for listening to your games

386
00:19:18,959 --> 00:19:22,945
in as many situations and speakers and whatnot as you can.

387
00:19:24,703 --> 00:19:29,947
Last thing I want to do here is talk a little bit about the history of where I've come from

388
00:19:29,987 --> 00:19:33,631
and where I'm going and what went right and what went wrong with a little bit of a mini

389
00:19:33,671 --> 00:19:35,312
post-mortem on my audio engines.

390
00:19:36,273 --> 00:19:37,234
So a lot went right.

391
00:19:37,434 --> 00:19:39,235
I mean, I wouldn't be here if that weren't true.

392
00:19:40,076 --> 00:19:40,557
I learned a lot.

393
00:19:40,617 --> 00:19:44,880
You know, I started in slot machines and I really didn't want to be doing audio, but

394
00:19:45,141 --> 00:19:47,383
I have embraced it and I love it now.

395
00:19:47,743 --> 00:19:49,164
I also shit.

396
00:19:49,965 --> 00:19:50,965
You know, shipping is a big deal.

397
00:19:51,085 --> 00:19:53,167
If you can't ship or you haven't shipped,

398
00:19:53,267 --> 00:19:54,347
then you're just noodling around.

399
00:19:55,188 --> 00:19:57,409
And so shipping is a really big feature,

400
00:19:57,769 --> 00:20:00,131
even if you're not complete or beautiful or perfect.

401
00:20:01,231 --> 00:20:04,053
Or, well, even if your code, rather, is not beautiful.

402
00:20:04,233 --> 00:20:05,354
So I've also made some wonderful tools

403
00:20:05,374 --> 00:20:06,114
for my sound designers.

404
00:20:06,635 --> 00:20:08,976
The Bioshock 2 voice packager took a process

405
00:20:09,036 --> 00:20:10,737
that was just...

406
00:20:11,845 --> 00:20:15,408
hours upon hours. It was literally an all-nighter if they needed to do this.

407
00:20:15,928 --> 00:20:19,110
And it was error-prone and horrible and I took this into something that he could

408
00:20:19,130 --> 00:20:20,531
set up in five minutes before he left

409
00:20:20,791 --> 00:20:23,593
for home and he would come back the next day and it would be done perfectly every time.

410
00:20:24,434 --> 00:20:27,436
The background sound engine for Hellgate London and its iteration

411
00:20:27,776 --> 00:20:31,899
rewrite slash iteration in Bioshock 2 is a beautiful piece of work that I'm really

412
00:20:31,939 --> 00:20:32,239
proud of.

413
00:20:33,220 --> 00:20:36,442
And also the third-person camera listener tech that I wish I had time to

414
00:20:36,502 --> 00:20:37,042
talk about here.

415
00:20:38,043 --> 00:20:40,244
in Hellgate London is where we originally developed this.

416
00:20:40,444 --> 00:20:41,584
I'm particularly proud of that,

417
00:20:41,644 --> 00:20:43,685
and if you want to talk to me afterwards,

418
00:20:43,845 --> 00:20:45,366
I'll be happy to describe that to you.

419
00:20:45,866 --> 00:20:46,126
Thank you.

420
00:20:47,687 --> 00:20:49,107
So, excuse me.

421
00:20:49,947 --> 00:20:51,168
It was not all sunshine and roses.

422
00:20:52,228 --> 00:20:53,489
There were some really big missteps,

423
00:20:53,529 --> 00:20:54,769
and the one in particular I want to call out

424
00:20:54,809 --> 00:20:56,210
is the Hellgate London music engine,

425
00:20:56,810 --> 00:20:59,371
which was this horribly over-engineered piece of work

426
00:20:59,391 --> 00:21:01,552
that really didn't solve the problem at hand.

427
00:21:01,632 --> 00:21:02,132
Dave, I'm sorry.

428
00:21:05,060 --> 00:21:05,981
And I want to say that here.

429
00:21:06,101 --> 00:21:06,702
I'm really sorry.

430
00:21:06,742 --> 00:21:10,344
For all you people who played Hellgate London and never heard the action music that our

431
00:21:10,464 --> 00:21:12,405
awesome composers wrote, that's my fault.

432
00:21:13,486 --> 00:21:15,847
I've also historically not been aggressive enough about threading.

433
00:21:16,768 --> 00:21:20,550
You know, there were opportunities that have been there for a long time to thread your

434
00:21:20,570 --> 00:21:24,373
audio engines and to, you know, obviously you need a mixer thread, you need some threads

435
00:21:24,453 --> 00:21:30,237
built in, but threading the interface is a very valuable part that isolates the rest

436
00:21:30,257 --> 00:21:33,679
of your code from any kind of hitches that may be in your audio engine.

437
00:21:35,079 --> 00:21:37,301
So, where am I going from here? Future plans.

438
00:21:37,781 --> 00:21:38,902
I'm at Keltel Games right now.

439
00:21:38,942 --> 00:21:41,544
I can't talk too much about what we're doing and where we're going.

440
00:21:41,985 --> 00:21:44,967
But I can tell you that this is the best audio engine I've ever built.

441
00:21:45,067 --> 00:21:48,290
And in fact, that's my goal, is always to make some sort of measurable improvement

442
00:21:48,370 --> 00:21:49,871
in the lives of my sound designers.

443
00:21:51,192 --> 00:21:54,715
And before I finish up here, I want to leave you with one last bonus session,

444
00:21:54,755 --> 00:21:56,237
which is—bonus lesson, excuse me—

445
00:21:56,257 --> 00:21:57,818
which is that audio programming is fun.

446
00:21:59,419 --> 00:22:01,701
You should do it, and you should not be afraid of it.

447
00:22:03,381 --> 00:22:05,982
Thank you very much. We have about three minutes for questions.

448
00:22:16,507 --> 00:22:18,868
Any questions? Yes, sir.

449
00:22:25,231 --> 00:22:30,534
So the question is, other than FMOD and WISE and similar things, what tools can I recommend?

450
00:22:32,071 --> 00:22:37,296
That's an excellent question. I'm an FMOD guy, so I've focused on FMOD throughout my career.

451
00:22:37,937 --> 00:22:45,564
There are some open source audio engines. SDL has a mixer, a lib mixer I think it's called,

452
00:22:45,784 --> 00:22:48,367
and there's OpenAL. So there's some of those.

453
00:22:48,387 --> 00:22:51,270
Sorry, say again?

454
00:22:53,352 --> 00:22:54,273
Maverick if you use Unity.

455
00:22:55,222 --> 00:22:59,670
Oh, fabrics. Fabric, if you use Unity. So there are some

456
00:23:00,351 --> 00:23:05,240
alternatives, but that's what I got. We have a question back

457
00:23:05,280 --> 00:23:05,401
there.

458
00:23:07,130 --> 00:23:12,433
So I'm working with a sound designer on a project and historically I've been

459
00:23:12,753 --> 00:23:17,115
rolling a custom audio engine but he's been really interested in leveraging the

460
00:23:17,295 --> 00:23:21,458
features of the editor tools and fmod sound system so currently we're talking

461
00:23:21,518 --> 00:23:29,022
about a sort of integration stuff. I guess what's your general

462
00:23:30,699 --> 00:23:39,427
experience with like the level of autonomy you have with a middleware sound engine versus a ground up system.

463
00:23:42,229 --> 00:23:50,697
It's a fair question. I much prefer working with middleware because I've written a low-level mixer for slot machines, really like mixing at the sample level.

464
00:23:51,218 --> 00:23:57,984
And the problem is that that's tedious and error-prone and you have to deal with driver differences and you have to actually parse the sounds yourself.

465
00:23:58,585 --> 00:24:04,470
So if you can get a middleware that is at whatever level abstracts the best for you.

466
00:24:05,972 --> 00:24:07,094
then that's the right one.

467
00:24:07,635 --> 00:24:10,620
So FMOD is, I like FMOD because it abstracts

468
00:24:10,660 --> 00:24:14,386
at multiple levels, but there, you know,

469
00:24:14,486 --> 00:24:16,088
Wwise is also great because it abstracts

470
00:24:16,108 --> 00:24:16,850
at a very high level.

471
00:24:17,732 --> 00:24:22,135
and there are like the SDL mixer and some of these other ones abstract at a very low level.

472
00:24:22,596 --> 00:24:27,079
And so whatever your mixing philosophy is, wherever you are spending your most time,

473
00:24:27,540 --> 00:24:28,320
that's where we want to spend it.

474
00:24:28,501 --> 00:24:30,923
Wherever you're trying to solve your problems,

475
00:24:31,183 --> 00:24:33,605
that's the appropriate level of abstraction for your middleware.

476
00:24:34,225 --> 00:24:38,549
So just as an extension of that, I find a lot of like...

477
00:24:39,013 --> 00:24:44,015
potential and enjoyment honestly in writing custom DSPs. What's

478
00:24:44,055 --> 00:24:48,817
your experience with middleware that's easily extensible with

479
00:24:49,538 --> 00:24:53,219
custom DSPs? I hate to sound like a broken record but FMOD

480
00:24:53,259 --> 00:24:56,420
actually has a great plugin architecture for that. I believe

481
00:24:56,440 --> 00:24:59,441
Wwise does as well. I haven't looked at their API recently.

482
00:25:02,503 --> 00:25:04,463
Beyond that I cannot speak.

483
00:25:06,390 --> 00:25:11,592
I think we have about 30 seconds and then I will be at the wrap-up room at 3.07 so we'll take one more question.

484
00:25:12,172 --> 00:25:21,615
As a sound designer, how much do you recommend that we dive into the code and learning audio programming for the most successful collaboration with audio programmers?

485
00:25:21,815 --> 00:25:25,736
That's an excellent question. In general, you shouldn't have to be a programmer.

486
00:25:25,896 --> 00:25:30,178
I went to a great talk about the audio engine and I think it was...

487
00:25:30,806 --> 00:25:33,387
one of the Killzone games recently, it was just yesterday or the day before,

488
00:25:33,767 --> 00:25:37,349
where they did... they had kind of a boxes and lines scripting language

489
00:25:37,769 --> 00:25:42,911
for their audio team and that's the kind of deepest I would allow a sound designer to get.

490
00:25:43,772 --> 00:25:45,512
Somebody who's kind of focused on creating sound.

491
00:25:45,692 --> 00:25:49,454
If you're an indie and you want to do both, then more power to you.

492
00:25:49,574 --> 00:25:53,496
But if you're more just like, I'm a sound designer, how much should I know how to program?

493
00:25:54,036 --> 00:25:56,237
That's the level of abstraction I would recommend.

494
00:25:57,510 --> 00:26:00,239
Cool, so I think that I will be at the,

495
00:26:00,259 --> 00:26:01,643
I think they're kicking us out,

496
00:26:01,683 --> 00:26:03,690
so I will be across the hall in 3.07

497
00:26:03,770 --> 00:26:04,573
if you have any more questions.

