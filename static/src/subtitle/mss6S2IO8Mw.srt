1
00:00:06,663 --> 00:00:08,985
Hello everyone, this is Breaking the Ankh,

2
00:00:09,165 --> 00:00:12,087
Deterministic Propagation Netcode in Spelunky 2.

3
00:00:12,847 --> 00:00:14,968
Please remember to silence your phone,

4
00:00:15,168 --> 00:00:17,930
fill out the feedback form, and enjoy life.

5
00:00:20,171 --> 00:00:22,333
To introduce a bit myself, I'm Guillermo,

6
00:00:22,373 --> 00:00:24,954
and I've been balancing the last five years of my life

7
00:00:25,514 --> 00:00:28,016
with working at Bladeworks and helping as part

8
00:00:28,336 --> 00:00:30,838
of the teaching staff of local universities,

9
00:00:31,578 --> 00:00:34,240
where I try my best to improve the system from within.

10
00:00:35,627 --> 00:00:40,549
I consider myself an in-perpetual training problem solver who happens to be working on

11
00:00:40,669 --> 00:00:46,151
his maths overviews master thesis, and enjoys creating and experiencing all kinds of fiction.

12
00:00:48,472 --> 00:00:50,333
I'd also like to introduce Bleedworks.

13
00:00:50,833 --> 00:00:55,855
We are a medium-sized studio specialized in high-quality game porting that does a bit

14
00:00:55,895 --> 00:00:57,515
of publishing and co-development.

15
00:00:58,439 --> 00:01:03,384
We have been very lucky to work with incredibly talented developers from all over the world

16
00:01:03,884 --> 00:01:08,368
on awesome indie titles including the original Spelunky HD port.

17
00:01:09,509 --> 00:01:11,311
Also I am very thankful for the whole...

18
00:01:14,285 --> 00:01:20,230
Bleedworks team for being a great community, and to management for providing me the extreme

19
00:01:20,290 --> 00:01:26,615
flexibility needed to contribute mentoring students and new developers at both Open University

20
00:01:26,655 --> 00:01:28,357
of Catalonia and University of Barcelona.

21
00:01:30,979 --> 00:01:36,824
Now for all of you who aren't familiar with Spelunky series, Spelunky is a precision platformer

22
00:01:36,884 --> 00:01:38,765
run based game designed by Derek Yu.

23
00:01:39,587 --> 00:01:44,949
In Spelunky, each run is different due to changing room layouts and there is no progression.

24
00:01:45,709 --> 00:01:50,591
Because of this, the focus of the game is put on the player, who is changed through

25
00:01:50,611 --> 00:01:59,235
the emergent stories experienced on each run and each run will also provide a lot of knowledge

26
00:01:59,295 --> 00:01:59,955
and practice.

27
00:02:00,315 --> 00:02:06,118
More specifically, Spelunky 2 introduces a lot of novelties to the series, such as real-time

28
00:02:06,138 --> 00:02:08,178
liquid physics and online multiplayer.

29
00:02:09,270 --> 00:02:12,675
You can get more information about Spelunky 2 in Derek's YouTube.

30
00:02:16,300 --> 00:02:22,749
I'd also like to introduce this talk course so that you can identify if it is interesting for you.

31
00:02:25,316 --> 00:02:29,018
This talk is about how the online stack of Spelunky 2 works.

32
00:02:29,459 --> 00:02:31,340
It's about the problems we didn't expect,

33
00:02:31,560 --> 00:02:33,462
the netcode, the servers, the decisions,

34
00:02:33,642 --> 00:02:35,103
and the problem that surprised us

35
00:02:35,563 --> 00:02:37,745
even after doing our homework

36
00:02:37,885 --> 00:02:39,546
and reading all previous literature

37
00:02:39,687 --> 00:02:42,589
and watching related talks.

38
00:02:43,069 --> 00:02:44,490
More specifically, we will talk

39
00:02:45,436 --> 00:02:51,560
we will try to avoid the topics related to determinism problems, optimization, clock drifting,

40
00:02:52,000 --> 00:02:56,303
and general engine design that previous talks covered in detail.

41
00:02:58,624 --> 00:03:02,967
So let's start from the beginning. After being introduced to the project,

42
00:03:03,267 --> 00:03:08,170
the top priority was evaluating the situation, the constraints, and getting familiar with the codebase.

43
00:03:10,113 --> 00:03:15,804
The most significant constraint was probably that we wanted to keep the world as alive

44
00:03:15,864 --> 00:03:21,455
as possible, so in order to do so, we decided that everything should update without camera-aware

45
00:03:21,495 --> 00:03:22,216
optimizations.

46
00:03:23,415 --> 00:03:28,540
This would limit a lot us into what kind of optimizations we could do.

47
00:03:29,180 --> 00:03:35,486
Also, a possible arena mode had to be as fair as possible,

48
00:03:35,606 --> 00:03:38,629
and because it's a punishing precision platforming game,

49
00:03:39,389 --> 00:03:43,833
we wanted to minimize input delay and target a local multiplayer field

50
00:03:43,973 --> 00:03:47,296
without nonsense interpolations and following game mechanics.

51
00:03:48,093 --> 00:03:53,876
I believe this led the team to decide that rollback netcode would be a perfect fit and

52
00:03:53,936 --> 00:03:55,956
it makes a lot of sense.

53
00:03:57,897 --> 00:04:02,119
Next were staffing constraints, because the whole game including work done on all three

54
00:04:02,139 --> 00:04:09,643
supported platforms and the 53 patches to date were around 8 months of engineering work

55
00:04:10,603 --> 00:04:12,564
and maybe at each one week.

56
00:04:13,447 --> 00:04:17,668
Peak time, we had around four concurrent engineers at peak.

57
00:04:18,288 --> 00:04:20,929
So that means that not a lot of resources

58
00:04:21,009 --> 00:04:22,770
can be dedicated to a side feature,

59
00:04:22,930 --> 00:04:24,250
such as online multiplayer.

60
00:04:24,811 --> 00:04:28,032
So using other solutions would have significantly increased

61
00:04:28,152 --> 00:04:30,593
engineering man years, or maybe even delayed the game.

62
00:04:31,293 --> 00:04:33,434
Also keeping up with the constant changes,

63
00:04:33,514 --> 00:04:36,935
which were on average around 60 changes per patch

64
00:04:37,355 --> 00:04:40,216
with a weekly patch, would have been a bit insane.

65
00:04:42,137 --> 00:04:44,398
There were also codebase constraints.

66
00:04:44,558 --> 00:04:46,739
Spelunky 2 codebase, as far as I know,

67
00:04:46,999 --> 00:04:49,280
tries to keep the feel of Spelunky HD

68
00:04:49,880 --> 00:04:52,021
while providing online mechanics and a testbed

69
00:04:52,061 --> 00:04:54,522
for new mechanics and features that you wanted to try.

70
00:04:55,448 --> 00:04:58,710
This in itself leads to a very flexible codebase

71
00:04:58,750 --> 00:05:00,211
that isn't very cache-friendly.

72
00:05:00,591 --> 00:05:03,093
However, performance profiling didn't look as bad

73
00:05:03,613 --> 00:05:04,974
as to raise any alarms.

74
00:05:05,714 --> 00:05:09,296
So it was definitely a net of work.

75
00:05:09,956 --> 00:05:12,578
Early on, replays were introduced to guarantee

76
00:05:13,118 --> 00:05:15,399
that the required amount for rollback net code.

77
00:05:16,171 --> 00:05:21,552
the required amount of determinism for rollback netcode was provided.

78
00:05:22,073 --> 00:05:25,934
This combo of replace and determinism is very powerful,

79
00:05:26,094 --> 00:05:28,554
and we have used it in multiple projects.

80
00:05:29,054 --> 00:05:31,535
Replace will show up again later in the talk,

81
00:05:31,595 --> 00:05:33,636
but I'd recommend everyone who hasn't watched

82
00:05:34,116 --> 00:05:37,937
the RetroCity Rampage talk on the topic of replace

83
00:05:38,017 --> 00:05:39,497
and automated testing to watch it.

84
00:05:40,410 --> 00:05:44,914
Other than that, the existing netcode didn't work out of the box after laying around for

85
00:05:44,954 --> 00:05:51,080
around 3 years, and considering how small it was and still is, we decided to redo it

86
00:05:51,220 --> 00:05:53,523
in order to be way more familiar with the code.

87
00:05:55,325 --> 00:05:56,626
So before getting to the meat...

88
00:05:57,150 --> 00:05:59,773
Let me provide a sales pitch of RollbackNetCon.

89
00:06:00,134 --> 00:06:02,557
Rollback synchronization is a technique

90
00:06:02,977 --> 00:06:05,660
that, given enough compute time and a deterministic update

91
00:06:05,721 --> 00:06:08,564
function, keeps in sync any game without worrying

92
00:06:08,644 --> 00:06:10,326
about mechanics, latency, or cheats.

93
00:06:11,179 --> 00:06:15,723
In most reasonable network conditions, players will feel exactly like local multiplayer.

94
00:06:16,284 --> 00:06:20,127
Also, programmers will be able to program the online multiplayer as if it was a local

95
00:06:20,447 --> 00:06:25,792
multiplayer game. So that's obviously great. Not to mention the point of cheating not being

96
00:06:25,852 --> 00:06:31,657
really possible without the agreement of all participating players. So well, I mean, it's

97
00:06:31,737 --> 00:06:36,041
perfect. That will be everything. Thank you for coming to my GDC talk. You can buy Rollback

98
00:06:36,081 --> 00:06:38,583
Netcode shirts in the gift shop. See you!

99
00:06:40,451 --> 00:06:41,433
But wait, hold it.

100
00:06:41,954 --> 00:06:43,177
Stay around for a bit longer.

101
00:06:43,317 --> 00:06:47,105
Before closing the case, let's see how rollback works.

102
00:06:49,422 --> 00:06:52,084
Rollback is based on a deterministic approach to netcode.

103
00:06:52,304 --> 00:06:54,926
Deterministic netcode is built on a design

104
00:06:55,066 --> 00:06:57,587
where each possible state is the result

105
00:06:57,747 --> 00:06:59,288
of running the update function

106
00:06:59,368 --> 00:07:01,670
with a specific input, game state and time step.

107
00:07:02,170 --> 00:07:04,011
For this to happen, a lot of considerations

108
00:07:04,111 --> 00:07:05,932
must go into developing the game,

109
00:07:05,992 --> 00:07:08,574
including avoiding the use of system calls,

110
00:07:08,594 --> 00:07:09,734
CPU instructions and...

111
00:07:10,575 --> 00:07:15,656
events and more things. I mean, previous talks have done a really great job explaining this.

112
00:07:15,956 --> 00:07:21,237
So for the specific case of rollback, we use this property to predict the state assuming unknown

113
00:07:21,257 --> 00:07:26,838
inputs will be unchanged. And when our prediction is wrong, not if, when our prediction is wrong,

114
00:07:27,158 --> 00:07:31,979
we roll back the state to the last good known prediction and rerun the simulation. This means

115
00:07:32,380 --> 00:07:35,820
that for this to work, we need to copy and store multiple copies of the state.

116
00:07:37,452 --> 00:07:40,474
So now that we have seen a bit more, let's talk about the negatives.

117
00:07:40,814 --> 00:07:45,017
First of all, in order to process a rollback of a given amount of frames,

118
00:07:45,357 --> 00:07:48,339
that many frames should run in a reasonable amount of time.

119
00:07:48,720 --> 00:07:53,183
Also, because multiple copies of the game state needs to exist in the heap,

120
00:07:54,324 --> 00:07:56,625
this means that the game must make copies.

121
00:07:57,529 --> 00:08:03,255
and sometimes restore previous copies. This is what causes memory to become entangled with space

122
00:08:03,996 --> 00:08:11,745
and the whole memory space trade-off stops being a trade-off. Also because it's built so heavy

123
00:08:11,785 --> 00:08:16,510
on determinism this means that information can be hidden from the clients. It's not important

124
00:08:16,530 --> 00:08:18,993
at all for Spelunky but it might be in other games.

125
00:08:21,219 --> 00:08:25,782
The game also needs to run deterministically in all platforms, and that will take part

126
00:08:25,863 --> 00:08:28,305
in multiplayer, and this is no small feat.

127
00:08:29,686 --> 00:08:35,390
And finally, it's worth mentioning that resource management becomes much more complex when

128
00:08:35,410 --> 00:08:36,772
working with rollback networks.

129
00:08:38,978 --> 00:08:42,220
With all this context in mind, we started optimizing the game.

130
00:08:42,681 --> 00:08:45,703
Because maybe three, six frames in 16 milliseconds

131
00:08:45,783 --> 00:08:47,365
aren't enough for rollback after all.

132
00:08:47,785 --> 00:08:50,047
That would give us around 64 milliseconds

133
00:08:50,107 --> 00:08:51,568
of flawless latency support.

134
00:08:51,928 --> 00:08:52,949
But would that be enough?

135
00:08:54,090 --> 00:08:55,671
We knew it wouldn't be enough.

136
00:08:55,771 --> 00:08:58,534
So in order to investigate how to improve this,

137
00:08:59,214 --> 00:09:04,678
we did performance profiling, and we

138
00:09:05,900 --> 00:09:11,067
areas of potential improvement. The four main areas of improvement were entities in red,

139
00:09:12,629 --> 00:09:16,114
liquids in dark blue, memory overhead which is light blue,

140
00:09:16,735 --> 00:09:19,078
and automated resource memory management.

141
00:09:22,752 --> 00:09:27,035
So the most interesting optimization surface, after all, were memory operations.

142
00:09:27,435 --> 00:09:32,318
As we have seen, rollback directly ties space to time. This is pretty bad for some

143
00:09:32,879 --> 00:09:37,202
kind of games such as Spelunky, as you can see in the blue version of the performance stats.

144
00:09:38,002 --> 00:09:45,187
Probably between 25 and 65% of the time, depending on mispredictions and the generated level,

145
00:09:45,628 --> 00:09:49,270
were spent on memory copies. This was because

146
00:09:50,297 --> 00:09:56,782
This was especially annoying because memory usage had very little surface of improvement.

147
00:09:57,442 --> 00:10:04,126
Our lead programmer, Miki, had always kept this in mind and the whole memory was very

148
00:10:04,186 --> 00:10:10,991
optimized with custom allocators and most data structures using small data types, bit

149
00:10:11,031 --> 00:10:15,313
fields and also structured packing by hand in order to avoid padding.

150
00:10:16,522 --> 00:10:18,804
As such, a lot of systems, such as particles,

151
00:10:19,525 --> 00:10:21,186
run in the non-deterministic state

152
00:10:21,226 --> 00:10:24,790
in order to reduce the deterministic state size.

153
00:10:25,570 --> 00:10:27,853
And the memory copy operation also didn't have

154
00:10:27,893 --> 00:10:29,694
a significant improvement surface.

155
00:10:30,535 --> 00:10:32,797
So what do you do when a big challenge comes up?

156
00:10:33,318 --> 00:10:36,861
Obviously, you do nothing, move on to something else,

157
00:10:37,162 --> 00:10:38,843
and start looking for a solution to it.

158
00:10:41,710 --> 00:10:42,930
So we moved on.

159
00:10:43,231 --> 00:10:45,612
One of the first areas we tried to optimize was liquids.

160
00:10:46,152 --> 00:10:48,494
Liquid physics are one of the most delicate parts

161
00:10:48,534 --> 00:10:51,515
of Spelunky 2 due to determinism, performance,

162
00:10:51,696 --> 00:10:56,699
and the cost that, well, every single particle

163
00:10:56,819 --> 00:10:59,500
must update every single frame.

164
00:10:59,980 --> 00:11:03,382
So it's pretty heavy performance-wise.

165
00:11:04,873 --> 00:11:16,002
We had been using LiquidFan, a very nice library that implements particle-based liquid physics on top of Box2D.

166
00:11:17,263 --> 00:11:26,249
Optimizing this made a lot of sense, because we were running the liquid simulation in parallel to entities and a few other systems,

167
00:11:26,730 --> 00:11:30,733
so optimizing most of the codebase wouldn't improve anything.

168
00:11:31,534 --> 00:11:33,956
as long as liquids were the bottleneck.

169
00:11:34,397 --> 00:11:36,358
It also meant that optimizing liquids

170
00:11:36,498 --> 00:11:38,660
wasn't going to solve the problem by itself,

171
00:11:39,121 --> 00:11:41,523
since then entities would become the bottleneck,

172
00:11:41,563 --> 00:11:43,004
but it was a good start.

173
00:11:43,504 --> 00:11:45,426
So we were trying to optimize liquids

174
00:11:45,966 --> 00:11:48,889
by moving away from particle-based solutions.

175
00:11:49,529 --> 00:11:51,771
For this purpose, we researched a lot.

176
00:11:52,729 --> 00:11:56,952
of alternatives in order to get significant performance gains, starting with building

177
00:11:57,032 --> 00:12:01,515
our own vectorized backwards moving least squares material point method.

178
00:12:02,196 --> 00:12:07,719
And it was really fast, like 8 times faster for 10 times more particles.

179
00:12:08,440 --> 00:12:14,944
It also allowed us to play around with deformable materials such as snow and jelly.

180
00:12:15,524 --> 00:12:20,548
However, we ended up reverting to liquid fun because at big granularities the liquids didn't

181
00:12:20,924 --> 00:12:30,092
feel really right in grid-based methods and that small granularities were very frustrating because

182
00:12:30,132 --> 00:12:38,320
of the game mechanics of Spelunky. You could be killed by a bunch of lava that was very small

183
00:12:38,420 --> 00:12:45,506
and you didn't see and it wasn't as clear as to when lava would kill you and when it would.

184
00:12:46,841 --> 00:12:52,564
Other alternatives we evaluated were LVM and cellular automata solutions, but due to the

185
00:12:52,644 --> 00:12:58,908
continuous movement of push blocks and moving platforms in Spelunky 2, this would have required

186
00:12:59,028 --> 00:13:04,871
to discretize the space at a very small granularity, which would have added a lot of inconsistencies

187
00:13:05,031 --> 00:13:06,992
and other performance overhead.

188
00:13:08,993 --> 00:13:09,633
This, in turn,

189
00:13:10,462 --> 00:13:13,244
meant that we couldn't optimize leakage that much.

190
00:13:13,604 --> 00:13:16,566
So we had to optimize the automated memory management.

191
00:13:16,666 --> 00:13:17,606
It was pretty easy.

192
00:13:17,686 --> 00:13:21,549
We went ahead and made the cleanup process

193
00:13:21,689 --> 00:13:23,050
around five times faster

194
00:13:23,110 --> 00:13:25,452
by using a more cache-friendly data structure

195
00:13:25,932 --> 00:13:28,954
based in Robinhood addressing.

196
00:13:31,276 --> 00:13:33,137
And then you keep working, working, working.

197
00:13:33,217 --> 00:13:36,199
And one day you can call it day...

198
00:13:37,243 --> 00:13:39,345
minus 403 based on release date,

199
00:13:39,985 --> 00:13:42,466
the idea of propagation network pops up.

200
00:13:43,467 --> 00:13:47,389
The deterministic propagation is essentially

201
00:13:47,489 --> 00:13:48,890
a rethinking of the relationship

202
00:13:48,950 --> 00:13:50,351
between lockstep and rollback.

203
00:13:51,131 --> 00:13:52,152
In order to explain this,

204
00:13:52,232 --> 00:13:55,634
I really like the analogy of time travel and multiverses.

205
00:13:56,174 --> 00:13:57,735
In deterministic rollback model,

206
00:13:57,875 --> 00:13:59,576
it's as if you messed up the past,

207
00:13:59,636 --> 00:14:01,437
so you decide to go back, fix it,

208
00:14:01,857 --> 00:14:04,158
and return to the present to see a more synchronized world.

209
00:14:04,918 --> 00:14:10,242
With deterministic propagation, you instead are always living in the current universe,

210
00:14:10,802 --> 00:14:14,145
and then one day you just wake up at the start of your update loop,

211
00:14:14,605 --> 00:14:19,808
and are in a different, more synchronized universe by magic.

212
00:14:20,689 --> 00:14:25,492
So, implementation-wise, the main idea is to have multiple states that are updated simultaneously.

213
00:14:25,992 --> 00:14:31,436
So, you have a fair simulation that does nothing special, nothing sings, and we know.

214
00:14:32,276 --> 00:14:36,278
we know everyone's last input,

215
00:14:37,338 --> 00:14:40,819
we pick it and use it to simulate the next frame.

216
00:14:40,939 --> 00:14:43,260
So it's pretty much always wrong,

217
00:14:43,801 --> 00:14:46,382
but only slightly wrong.

218
00:14:47,302 --> 00:14:49,403
Then a second simulation exists,

219
00:14:49,583 --> 00:14:52,824
which is just a regular lockstep simulation

220
00:14:53,264 --> 00:14:54,425
that only knows the truth

221
00:14:54,625 --> 00:14:57,466
and waits for everyone's inputs before running a frame.

222
00:14:59,167 --> 00:15:01,328
And then, well, the information...

223
00:15:01,915 --> 00:15:03,615
has its always ground truth.

224
00:15:04,296 --> 00:15:07,437
Finally, we have at least one propagation simulation

225
00:15:07,497 --> 00:15:09,217
that forks the lockstep simulation

226
00:15:09,277 --> 00:15:11,138
and predicts unknown inputs until it

227
00:15:11,178 --> 00:15:14,779
becomes the new present, replacing the existing present

228
00:15:14,839 --> 00:15:16,940
with a more synchronized universe.

229
00:15:18,721 --> 00:15:20,901
So if we show this in a more visual format,

230
00:15:20,961 --> 00:15:23,542
we can see that there are multiple blocks that

231
00:15:23,622 --> 00:15:26,403
access fully independent memory and have different time

232
00:15:26,423 --> 00:15:28,144
constraints and a few interesting properties.

233
00:15:28,932 --> 00:15:31,533
This model mitigates the cost of resizing the game.

234
00:15:32,533 --> 00:15:36,875
The amount of state copies you need to keep around is drastically reduced to a constant value,

235
00:15:37,235 --> 00:15:43,278
regardless of the resizing window. It's much easier to multithread than rollback model,

236
00:15:43,478 --> 00:15:50,521
since by itself each simulation can be used can be using a different

237
00:15:51,709 --> 00:15:53,110
thread with different memory.

238
00:15:53,730 --> 00:15:56,491
And also given equal compute power for each simulation,

239
00:15:56,651 --> 00:15:59,052
there is an equilibrium that guarantees

240
00:15:59,132 --> 00:16:01,552
that the proprietor can catch up with the present.

241
00:16:02,773 --> 00:16:05,854
Also because each simulation can run in a separate thread,

242
00:16:06,654 --> 00:16:08,415
in a transient functional manner,

243
00:16:08,915 --> 00:16:11,856
cache is improved as less thrashing occurs,

244
00:16:12,456 --> 00:16:14,297
and pretty much no locking is required

245
00:16:14,377 --> 00:16:15,857
except when swapping states.

246
00:16:18,722 --> 00:16:22,444
Also, it's pretty nice that only one operation per propagation is required.

247
00:16:23,104 --> 00:16:28,666
And this, because only one copy operation per propagation is required,

248
00:16:28,926 --> 00:16:31,828
it disentangles space from time.

249
00:16:31,868 --> 00:16:35,730
So it allows us to start trading of memory for time again.

250
00:16:38,565 --> 00:16:43,907
So to sum everything up, you can see here a totally unbiased, objective comparison table

251
00:16:43,947 --> 00:16:48,849
designed by a committee of myself, of no one else, who is obviously not biased towards

252
00:16:49,470 --> 00:16:54,712
his own solution, comparing what I consider the ideal netcode features.

253
00:16:56,252 --> 00:17:00,474
So first of all, as you can see, netcode, not based on determinism in the first column,

254
00:17:00,794 --> 00:17:01,594
is reactive.

255
00:17:02,746 --> 00:17:08,427
It's very implementation-specific, so it must be customized for individual game events, mechanics, and entities.

256
00:17:08,967 --> 00:17:15,388
This kind of netcode requires a huge amount of work and care that grows with the game's scope.

257
00:17:16,128 --> 00:17:23,130
So in order to provide a good experience, prevent cheating, and keep up with the gameplay logic and project scale,

258
00:17:23,610 --> 00:17:27,810
you need to add more resources to developing the netcode.

259
00:17:29,011 --> 00:17:30,391
Compare that with input delay.

260
00:17:30,975 --> 00:17:37,959
or lockstep netcode. That only requires determinism and doesn't really have any

261
00:17:38,020 --> 00:17:43,563
extra performance requirements or extrapolation issues. It's a really good model for some genres

262
00:17:44,284 --> 00:17:52,109
but the maximum delay before the game becomes unplayable is pretty low, especially with

263
00:17:52,329 --> 00:17:58,253
action games, so it's not perfect. Rollback netcode on the other side improves a lot this, a lot.

264
00:17:59,055 --> 00:18:04,960
by trading off performance, but it wastes cache usage and dyes performance to actively use the

265
00:18:04,980 --> 00:18:11,246
space. It can be mitigated in multiple ways and can be potentially improved with kernel support

266
00:18:11,286 --> 00:18:18,293
for only copying memory pages on write and mapping page by hand, but unfortunately this

267
00:18:18,373 --> 00:18:20,395
is not available on most platforms.

268
00:18:21,952 --> 00:18:24,393
Finally, propagation netcode rethinks determinism

269
00:18:24,413 --> 00:18:27,814
in order to mitigate the performance requirements

270
00:18:27,874 --> 00:18:28,914
introduced by rollback,

271
00:18:29,334 --> 00:18:31,474
while also providing some additional features

272
00:18:31,574 --> 00:18:33,035
at a small development cost

273
00:18:33,075 --> 00:18:36,355
when compared to other solutions.

274
00:18:39,036 --> 00:18:40,917
And then after talking a lot about it,

275
00:18:41,257 --> 00:18:43,517
this we decided to do nothing.

276
00:18:44,117 --> 00:18:48,118
It was something that we believed it would be required

277
00:18:48,758 --> 00:18:51,619
if a Nintendo Switch version would ever be a thing.

278
00:18:52,384 --> 00:18:57,686
But since it required a lot of changes from the existing version

279
00:18:58,006 --> 00:19:01,748
in order to work well with our code base

280
00:19:01,968 --> 00:19:05,229
and fix the update so it had no side effects,

281
00:19:05,990 --> 00:19:11,232
we decided to stop working here and focus on other things.

282
00:19:12,172 --> 00:19:14,073
So we started working on bad things,

283
00:19:14,453 --> 00:19:16,294
things that have nothing to do with this tool.

284
00:19:16,354 --> 00:19:19,855
We talked with Sony, we worked on the game.

285
00:19:20,336 --> 00:19:20,876
We decide...

286
00:19:21,572 --> 00:19:27,416
to add support for about 60 hz, which is something that doesn't play well with deterministic

287
00:19:27,456 --> 00:19:34,061
netcode and is often implemented either by increasing update rates or by having variable

288
00:19:34,221 --> 00:19:34,781
delta time.

289
00:19:36,102 --> 00:19:39,164
So we decided to go instead with a different solution.

290
00:19:39,885 --> 00:19:43,708
We decided to use interpolation in order to support higher update rates.

291
00:19:44,842 --> 00:19:50,010
This idea was validated through the creation of a prototype called SuperDot Boy Platformer

292
00:19:50,330 --> 00:19:55,919
that would run at 20 updates per second and be interpolated to arbitrary frame rates.

293
00:19:56,505 --> 00:20:01,309
It's something that works really great and the improvement was very obvious and

294
00:20:01,369 --> 00:20:05,572
perceptible to the members of the team with 144 Hz screens.

295
00:20:06,453 --> 00:20:10,997
And even though it still has a couple of glitches, we think that this is a great approach

296
00:20:11,457 --> 00:20:16,802
to get most of the benefits from an increased refresh rate without increasing compute costs.

297
00:20:17,775 --> 00:20:22,939
Similarly, it would have been interesting to update most of the world, but the players,

298
00:20:23,559 --> 00:20:28,463
at a rate of 10 to 20 updates per second while keeping the players at higher updates rates

299
00:20:28,944 --> 00:20:33,988
in order to improve performance, but that would have required too many changes at that

300
00:20:34,068 --> 00:20:41,093
stage that could introduce unintended and unnoticeable changes to gameplay that we didn't

301
00:20:41,113 --> 00:20:44,076
want to deal with at that stage of development.

302
00:20:46,243 --> 00:20:49,464
So we spend weeks meeting platform requirements,

303
00:20:49,504 --> 00:20:55,786
fixing bugs and then it just launches on PS4.

304
00:20:56,206 --> 00:20:57,687
So the game is out on PS4.

305
00:20:57,867 --> 00:21:01,908
We are barely able to release the day one patch in time.

306
00:21:02,929 --> 00:21:08,651
And then we crash with the ugly part of rollback.

307
00:21:08,671 --> 00:21:11,092
We have seen the good, we have seen the bad,

308
00:21:11,272 --> 00:21:14,733
now we will see the ugly part of rollback.

309
00:21:15,293 --> 00:21:15,853
The gradation.

310
00:21:17,380 --> 00:21:22,702
rollback netcode and other determinism-based netcode

311
00:21:24,243 --> 00:21:27,465
that does extrapolation such as propagation itself

312
00:21:28,525 --> 00:21:29,326
degrades so fully.

313
00:21:29,366 --> 00:21:31,747
For, I mean, for Frisa's sake,

314
00:21:31,847 --> 00:21:35,789
I can't even express in English how bad it degrades.

315
00:21:36,389 --> 00:21:39,871
So let me show this to you with a couple of videos

316
00:21:40,391 --> 00:21:44,893
publicly available, recorded on the day one, okay?

317
00:21:44,913 --> 00:21:45,473
So you can see,

318
00:21:46,534 --> 00:21:54,799
in this video how rollback works well, the character is juking a ghost, everything works.

319
00:21:55,199 --> 00:21:59,682
It's a happy day for that player on day one on PS4.

320
00:22:01,022 --> 00:22:06,646
Here you can see a very different game, a game that is pretty much turn-based,

321
00:22:06,786 --> 00:22:10,108
a game that runs at most at 10 frames per second.

322
00:22:11,353 --> 00:22:16,536
As you can see, this is pretty bad and fully broken and unacceptable.

323
00:22:18,857 --> 00:22:23,859
Let's compare this with a simple interpolation I developed for a title called Full Metal

324
00:22:23,899 --> 00:22:26,120
Furies, released by Cellar Door Games.

325
00:22:26,701 --> 00:22:33,784
Just keep looking at the top right enemy in the left gif, and you can see the enemy in

326
00:22:33,824 --> 00:22:37,946
orange with the last known server position.

327
00:22:38,703 --> 00:22:45,005
and the enemy in regular sprite with the local position.

328
00:22:45,545 --> 00:22:48,666
In this situation there was very bad network conditions,

329
00:22:49,166 --> 00:22:52,828
over 20% of packet loss, up to 1 second of jitter.

330
00:22:53,268 --> 00:22:56,909
You can see how simple interpolation manages to hide all of this in a way

331
00:22:56,969 --> 00:22:59,330
that isn't noticeable to players in the game.

332
00:23:00,210 --> 00:23:04,291
It just looks great, especially when you compare that to this.

333
00:23:05,917 --> 00:23:11,981
ok, you can see that there are a lot of teleports that it doesn't seem to work well

334
00:23:12,142 --> 00:23:14,383
it's extrapolation at its best

335
00:23:15,144 --> 00:23:16,685
ok if you notice the difference

336
00:23:17,125 --> 00:23:23,730
what whenever determinism messes up or extrapolation kicks in it goes very wrong

337
00:23:24,430 --> 00:23:29,073
ok if it's if determinism goes wrong well the game

338
00:23:30,170 --> 00:23:36,474
Each player starts playing a completely different game and nothing seems to make sense about

339
00:23:36,494 --> 00:23:37,795
the movement of other players.

340
00:23:38,516 --> 00:23:46,922
And if clock drifts due to extrapolation, extrapolation begins to go crazy and it's

341
00:23:46,982 --> 00:23:47,802
not very pleasant.

342
00:23:50,498 --> 00:23:52,659
So, well, that was the first day.

343
00:23:52,759 --> 00:23:54,540
We spent a lot of...

344
00:23:55,020 --> 00:23:56,961
We move on to the second day.

345
00:23:57,441 --> 00:23:59,822
We decided to stay awake until pretty late

346
00:23:59,862 --> 00:24:01,623
watching the stream and identifying issues.

347
00:24:01,723 --> 00:24:02,403
We conclude.

348
00:24:03,222 --> 00:24:10,006
we investigate and conclude that the issue is caused by very high latency locations to our server

349
00:24:10,466 --> 00:24:17,131
that we didn't take into consideration and also to people who, depending on the internet's mode,

350
00:24:17,631 --> 00:24:23,015
had big latency spikes that made the game update spiral out of control,

351
00:24:23,335 --> 00:24:27,658
with simulation times growing with each frame.

352
00:24:30,343 --> 00:24:32,844
Okay, so you might be asking yourselves,

353
00:24:32,984 --> 00:24:35,884
how could performance spiral out of control that much?

354
00:24:37,045 --> 00:24:43,847
Well, Spelunky 2 didn't really take more than one millisecond

355
00:24:43,887 --> 00:24:48,388
to run a full update on a nine-year-old dev PC.

356
00:24:48,848 --> 00:24:50,588
So how did this happen?

357
00:24:51,149 --> 00:24:53,489
Well, it was due to a combination of cachet,

358
00:24:53,529 --> 00:24:57,190
rollback, misprediction, latency, and core speed.

359
00:24:58,524 --> 00:25:03,028
Because the game is 2D, players will often assume that it shouldn't require much resources

360
00:25:03,549 --> 00:25:08,413
and it should work on all hardware. This is not the case at all for Spelunky 2. We wanted

361
00:25:08,473 --> 00:25:13,757
our world to feel alive. We wanted the player to ask what the freak happened here that there is

362
00:25:13,797 --> 00:25:22,765
this turkey dead? Why? What happened? Why is there meat there? I mean, it's that kind of thing that makes the experience much better.

363
00:25:24,012 --> 00:25:28,816
So this meant that the whole stage had to update its frame regardless of player position,

364
00:25:29,476 --> 00:25:37,583
which is in itself pretty challenging due to the sheer size of the fully destructible stage,

365
00:25:38,343 --> 00:25:42,407
real-time physics, dual layers, pathfindings and collisions, not to mention that everything

366
00:25:42,447 --> 00:25:48,191
can interact with everything, and by interact I mean explode, freeze, crush, ride, or whatever

367
00:25:48,252 --> 00:25:48,932
you can imagine.

368
00:25:50,047 --> 00:25:55,412
Also, don't forget that the game has huge stages, with two fluffing layers.

369
00:25:55,472 --> 00:26:01,237
I mean, can you look at both pictures and say it's just one level with two layers?

370
00:26:01,277 --> 00:26:04,560
I mean, that's huge. That's one level what you can see over here.

371
00:26:07,383 --> 00:26:14,910
So since changing the way that matchmaking worked to expand more regions wasn't trivial,

372
00:26:15,649 --> 00:26:20,252
we decided to work on a single threaded version of the propagation netcode.

373
00:26:21,472 --> 00:26:27,055
So other cores are used by liquids and particles, so it's not really that the

374
00:26:27,115 --> 00:26:33,739
whole implantation was single core, but both simulations didn't run at the same time.

375
00:26:34,580 --> 00:26:42,344
Okay, so it should have worked fine as far as long as we could have pushed four updates per frame.

376
00:26:43,358 --> 00:26:47,400
and the main objective was fixing the turn-based Spelunky issue,

377
00:26:47,920 --> 00:26:52,963
but it turns out the additional memory copying kept it unplayable.

378
00:26:54,263 --> 00:26:57,005
After profiling the cost for running four updates per frame,

379
00:26:57,705 --> 00:27:01,407
with the copies required to replace the state for each simulation,

380
00:27:01,827 --> 00:27:05,569
we found out that some levels, such as Blood or AllMech, were clogging

381
00:27:05,789 --> 00:27:07,930
at over 30 milliseconds per frame.

382
00:27:15,019 --> 00:27:23,344
So at this point we were pretty exhausted. We were thinking, whoa, this is bad. But in a last push,

383
00:27:23,484 --> 00:27:31,409
we managed to improve a lot this experience before publishing the last patch of the week.

384
00:27:31,809 --> 00:27:38,173
I believe it was the seventh patch. The two main improvements were abusing virtual memory

385
00:27:38,974 --> 00:27:41,775
in order to swap the game states without copying.

386
00:27:42,700 --> 00:27:49,966
and we also added another improvement by skipping the CPU cache using platform-specific functionality

387
00:27:50,406 --> 00:27:55,851
so that allowed us to reduce execution time a lot

388
00:27:58,273 --> 00:28:06,960
but unfortunately it wasn't perfect yet. So now the game worked pretty well on PS4 against PS4

389
00:28:07,541 --> 00:28:10,383
but because some frames didn't make it to the 60 feet

390
00:28:12,371 --> 00:28:19,997
16 millisecond barrier. This meant that in some situations, such as when one player was using a

391
00:28:20,217 --> 00:28:28,684
PS4 and the other was using a PS4 Pro, the performance would have diverged too much.

392
00:28:29,204 --> 00:28:34,188
Well, we have a system that allows us to accelerate or slow down frames, but it has

393
00:28:34,288 --> 00:28:39,232
some limits in order to feel good, to make the game feel better.

394
00:28:40,049 --> 00:28:43,391
So, well, in these situations the game was not able to catch up.

395
00:28:44,152 --> 00:28:49,476
Okay, what this meant, if you check the video, is that in some situations

396
00:28:49,596 --> 00:28:52,018
the game would work, would seemingly work

397
00:28:52,258 --> 00:28:59,343
well, and then when CPU was bored, the other universe would catch up

398
00:28:59,924 --> 00:29:03,626
with the present and replace the current

399
00:29:04,067 --> 00:29:06,969
one. You can see this is pretty bad.

400
00:29:07,845 --> 00:29:15,029
Fortunately, a lot of people were playing PS4, PS4, so it wasn't that bad to a big

401
00:29:15,089 --> 00:29:23,513
portion of our player base, but the problem was that a lot of friends were playing using

402
00:29:23,533 --> 00:29:25,894
different systems, different PS4 systems.

403
00:29:26,534 --> 00:29:30,496
So for them, all games...

404
00:29:30,988 --> 00:29:38,315
would at some point, if they reach a deep enough portion of the game, be fully unplayable.

405
00:29:42,219 --> 00:29:51,188
Okay, so on a side note from all the bad news, we were really happy that adding an

406
00:29:51,288 --> 00:29:53,971
option to pick input delay was a well-received decision.

407
00:29:54,599 --> 00:29:58,522
Okay, we believed from the very beginning that it was the right choice,

408
00:29:59,683 --> 00:30:06,488
because everyone has its own preference, but we were worried it may cause a lot of, a swarm of

409
00:30:06,868 --> 00:30:11,391
the same lag reports because people, because of people lowering their delay to zero

410
00:30:11,851 --> 00:30:13,873
or increasing it too much, but it didn't happen.

411
00:30:15,433 --> 00:30:20,975
So this proved a good decision since different players have different preferences.

412
00:30:21,055 --> 00:30:28,117
For example, I don't care if the game has one or two or three frames of constant input delay.

413
00:30:28,597 --> 00:30:30,637
It's very important for me that it is constant.

414
00:30:31,758 --> 00:30:36,899
However, instead, Tony Cabello, BlitzWolf's CEO, didn't enjoy the game with more than

415
00:30:37,039 --> 00:30:42,560
one frame of input delay. And some people, like Colin Norway, the blue spelunker,

416
00:30:43,510 --> 00:30:50,335
Well, we're also very thrilled to know that they could disable all input delay,

417
00:30:51,076 --> 00:30:54,058
even if that meant having frequent extrapolation glitches,

418
00:30:54,198 --> 00:30:55,639
but a much better experience.

419
00:30:56,620 --> 00:31:01,063
A popular streamer of Spelunky 2 called Janagir

420
00:31:02,705 --> 00:31:06,888
has been making a lot of content with pretty much everything Spelunky 2 related,

421
00:31:06,948 --> 00:31:08,529
including patch notes.

422
00:31:09,739 --> 00:31:12,660
And for example, he prefers to have input delay

423
00:31:12,780 --> 00:31:16,142
at the default value because it makes for a much better viewer

424
00:31:16,162 --> 00:31:18,543
experience in his Twitch channel.

425
00:31:21,804 --> 00:31:24,485
Back to the main topic, in order to get propagation fully

426
00:31:24,525 --> 00:31:26,806
working, we needed to make the game

427
00:31:27,106 --> 00:31:30,168
able to run multiple instances of the simulation concurrently.

428
00:31:30,912 --> 00:31:33,213
we needed each universe to do its thing.

429
00:31:33,833 --> 00:31:36,314
This was a problem as our update function

430
00:31:36,354 --> 00:31:37,675
wasn't made with this in mind.

431
00:31:38,115 --> 00:31:41,456
So it had a lot of side effects and existing optimizations

432
00:31:41,796 --> 00:31:44,377
used shared data outside the deterministic state,

433
00:31:44,977 --> 00:31:48,378
which meant we couldn't make this really easy or fast.

434
00:31:49,059 --> 00:31:53,040
This meant that we had to make a lot of very small

435
00:31:53,620 --> 00:31:56,701
and deliberate changes so that everything would work well

436
00:31:57,022 --> 00:32:00,503
without crashes, race conditions, and all kinds of issues.

437
00:32:01,797 --> 00:32:04,858
So eventually we get a pretty solid playable version.

438
00:32:05,418 --> 00:32:07,939
It has multi-instance and you can play it with,

439
00:32:08,819 --> 00:32:12,741
or at least 60 minutes without crashes.

440
00:32:13,261 --> 00:32:16,442
So we decide to release that preview version

441
00:32:16,862 --> 00:32:19,443
so that we can spot any unforeseen problems

442
00:32:19,703 --> 00:32:21,484
and avoid what happened on PS4.

443
00:32:22,897 --> 00:32:28,938
It was very useful, we received a lot of feedback and patches on a daily basis using Discord to distribute the patches.

444
00:32:29,598 --> 00:32:34,399
Both using Discord and releasing a preview proved very useful.

445
00:32:36,320 --> 00:32:42,821
Using Discord gave us a tight control over who could play the preview through the use of roles that could be revoked when needed.

446
00:32:43,621 --> 00:32:48,683
And Discord also facilitated receiving feedback, sharing files and updating the build.

447
00:32:51,840 --> 00:32:59,504
So in the end deciding how many people and who and why we would invite to the review was hard.

448
00:33:00,124 --> 00:33:09,248
We didn't know how many crashes due to obscure race conditions there could be. We didn't know

449
00:33:09,328 --> 00:33:14,090
how long it would take to get the game to a playable state for more than 10 hours.

450
00:33:15,430 --> 00:33:21,371
We didn't expect many problems and the build was definitely playable, so we wanted to invite

451
00:33:21,511 --> 00:33:26,913
people that were very vocal and could complain about things, as to improve as many things

452
00:33:26,993 --> 00:33:34,755
as possible while we were setting up the new server fleet and adding some PC-specific features

453
00:33:35,315 --> 00:33:37,316
such as the Discord and Steam invites.

454
00:33:40,532 --> 00:33:43,875
Okay, so this led us to multiple inviting criteria,

455
00:33:44,656 --> 00:33:47,619
starting with everyone that had created something cool,

456
00:33:47,639 --> 00:33:51,002
such a mod, a modding tool, streams, videos, fan art,

457
00:33:51,842 --> 00:33:52,903
and pretty much everything,

458
00:33:53,284 --> 00:33:56,006
which ended up being a very good decision

459
00:33:56,547 --> 00:34:00,190
that would give them early material for their content.

460
00:34:00,490 --> 00:34:04,114
And also it had some unexpected perks for us.

461
00:34:04,854 --> 00:34:10,138
such as being able to watch a 10-hour stream at higher speed in order to

462
00:34:11,520 --> 00:34:14,562
investigate issues that happened or could happen.

463
00:34:17,064 --> 00:34:24,390
This also ended up building a lot of hype. Building a lot of hype has been a very weird

464
00:34:24,490 --> 00:34:29,634
experience. We'll see later how this was both good and bad for us.

465
00:34:32,583 --> 00:34:34,825
And well, we invited more groups of people.

466
00:34:34,845 --> 00:34:38,567
We invited a group that was already playing online.

467
00:34:39,047 --> 00:34:41,149
We wanted to improve their life.

468
00:34:42,390 --> 00:34:46,212
As streaming a precision platformer is a super experience.

469
00:34:47,053 --> 00:34:51,256
And it was very nice from them to provide us with feedback

470
00:34:51,536 --> 00:34:55,739
comparing our solution to compare to a streaming solution.

471
00:34:56,739 --> 00:34:57,480
We were also...

472
00:34:58,409 --> 00:35:02,371
inviting some people that had somehow problematic setups,

473
00:35:02,831 --> 00:35:05,952
such as people that didn't meet the minimum requirements,

474
00:35:06,672 --> 00:35:10,234
people that didn't play on North America or Europe,

475
00:35:11,454 --> 00:35:14,855
and people who had very bad internet connection.

476
00:35:16,196 --> 00:35:18,917
All this helped us validate some of the most

477
00:35:19,357 --> 00:35:20,938
extreme and worst cases.

478
00:35:22,180 --> 00:35:27,724
And finally, we also wanted to reward users that were active on multiple communities,

479
00:35:28,024 --> 00:35:35,349
such as Reddit, Steam, Discord and Twitter. We believed this would be to the best of everyone's

480
00:35:35,429 --> 00:35:45,156
interest because in the current world, it's very hard to keep up with everything that goes around

481
00:35:45,657 --> 00:35:49,599
and communicative people that are honest and

482
00:35:50,706 --> 00:35:53,907
they express their opinion in all platforms

483
00:35:53,987 --> 00:35:58,429
without sugarcoating the truth are very helpful,

484
00:35:59,009 --> 00:36:02,130
especially when empowered with first-hand information

485
00:36:02,810 --> 00:36:06,271
so that we can in some way

486
00:36:06,331 --> 00:36:08,272
be more transparent to our community.

487
00:36:13,845 --> 00:36:15,366
Also, during the preview days,

488
00:36:15,806 --> 00:36:17,527
we took one of the best decisions,

489
00:36:17,787 --> 00:36:20,329
adding the best feature I haven't seen

490
00:36:20,409 --> 00:36:22,371
praised enough in the Terminism talks.

491
00:36:23,391 --> 00:36:24,952
Imagine the following situation.

492
00:36:25,213 --> 00:36:28,295
There is a ghost issue that our awesome

493
00:36:28,395 --> 00:36:31,577
CUDA team at Lollipop Robot had tried to reproduce

494
00:36:31,637 --> 00:36:35,860
for a very extended period of time at a sink at Olmec.

495
00:36:36,620 --> 00:36:38,602
However, no matter what they tried,

496
00:36:38,742 --> 00:36:40,803
it was impossible to reproduce the issue.

497
00:36:41,543 --> 00:36:47,505
and not much information was provided by the seven PS4 players that had reported this issue.

498
00:36:48,685 --> 00:36:53,206
So, after more than a month, we believed that it was the same issue that was

499
00:36:53,747 --> 00:36:57,728
affecting other players. The game just couldn't keep up.

500
00:36:58,732 --> 00:37:07,620
A month later, during the preview, two people, including one streamer that was streaming,

501
00:37:07,800 --> 00:37:09,622
had a full desync live.

502
00:37:10,182 --> 00:37:16,928
So after watching it, we went ahead and made a special build in a few hours with this specific

503
00:37:17,008 --> 00:37:18,870
feature and asked them to play again.

504
00:37:19,810 --> 00:37:22,553
Six hours later, the bug was fixed.

505
00:37:24,450 --> 00:37:27,332
As you can see the scene was a very heavy scene.

506
00:37:27,492 --> 00:37:30,214
This is the same frame running in both games.

507
00:37:30,695 --> 00:37:32,957
It's very early in the OMEG level.

508
00:37:33,437 --> 00:37:36,039
So it was where no one could reproduce it.

509
00:37:36,259 --> 00:37:42,764
Even more after a whole month of time testing,

510
00:37:43,165 --> 00:37:44,526
fiddling around with settings,

511
00:37:44,766 --> 00:37:50,771
running automated tests with our AI player, et cetera.

512
00:37:52,344 --> 00:37:55,687
See, at this point, if you told me that it was caused

513
00:37:55,747 --> 00:37:58,709
because of a game setting such as a screen shake,

514
00:37:58,809 --> 00:38:00,590
I would have said, okay, it makes sense.

515
00:38:01,331 --> 00:38:02,332
It's something we expect.

516
00:38:02,632 --> 00:38:04,153
It's something we are very careful with,

517
00:38:04,574 --> 00:38:05,594
but mistakes happen.

518
00:38:05,774 --> 00:38:07,516
So it wouldn't be surprising at all.

519
00:38:07,996 --> 00:38:10,278
Pretty sure everyone working with determinism

520
00:38:10,378 --> 00:38:12,099
has experienced something similar.

521
00:38:12,520 --> 00:38:14,942
But what if you told me that the code

522
00:38:15,322 --> 00:38:18,825
had already rolled the random numbers outside the branch?

523
00:38:20,087 --> 00:38:24,629
Well, at that point, I would have assumed that the screenshot wasn't deterministic.

524
00:38:26,070 --> 00:38:34,376
But why was it happening if the deterministic code was fully, if the screenshot code was fully

525
00:38:34,416 --> 00:38:42,761
deterministic? Well, it turns out that after some, at some point, the number generator we had

526
00:38:44,310 --> 00:38:45,851
had this very common check.

527
00:38:45,971 --> 00:38:47,673
If you are rolling a random number

528
00:38:48,133 --> 00:38:50,135
and the maximum value is the same value

529
00:38:50,576 --> 00:38:52,037
or less than the minimum value,

530
00:38:52,197 --> 00:38:53,399
return the minimum value.

531
00:38:53,999 --> 00:38:56,622
This would mean that if you wanted to roll a number

532
00:38:56,702 --> 00:38:58,864
between four and four, the result was four.

533
00:38:59,164 --> 00:39:01,967
So why even bother rolling the random number generator?

534
00:39:03,208 --> 00:39:07,833
Well, of course, this doesn't apply to deterministic

535
00:39:09,387 --> 00:39:14,153
online multiplayer games, so the internal state of the random number generator would

536
00:39:14,193 --> 00:39:15,334
desync at this point.

537
00:39:16,997 --> 00:39:22,464
When investigating how this could happen, we noticed that this code comes from a very

538
00:39:22,564 --> 00:39:26,329
early comic, probably something we inherited from a previous title.

539
00:39:27,317 --> 00:39:30,882
it from a previous title, meaning Spelunk HD.

540
00:39:31,002 --> 00:39:33,806
It was a little optimization that wouldn't matter

541
00:39:33,946 --> 00:39:35,689
in most codebases, but not here.

542
00:39:36,249 --> 00:39:38,673
So how did we manage to reproduce this

543
00:39:38,813 --> 00:39:40,796
and fix it within six hours?

544
00:39:42,687 --> 00:39:47,669
Meet ReplayTech. ReplayTech is an awesome piece of software,

545
00:39:48,109 --> 00:39:50,390
great for testing, iterating and debugging.

546
00:39:50,930 --> 00:39:52,751
We also used automatic debugging

547
00:39:53,211 --> 00:39:55,112
for sniffing out determinism books,

548
00:39:55,232 --> 00:39:57,092
but that's a story for another day

549
00:39:57,353 --> 00:39:59,053
that should be told by another person.

550
00:40:00,074 --> 00:40:01,514
Network replays are crucial.

551
00:40:01,954 --> 00:40:05,656
It's something we had used in multiple earlier titles

552
00:40:05,676 --> 00:40:06,836
to do network debugging.

553
00:40:07,780 --> 00:40:10,881
The general idea is that at any given point in time,

554
00:40:11,081 --> 00:40:14,502
a replay capable of recreating the whole session

555
00:40:14,542 --> 00:40:16,342
can be sent to the development team.

556
00:40:17,163 --> 00:40:21,064
So if a bug happens with a properly working replay system

557
00:40:21,224 --> 00:40:22,685
hooked at a very low level,

558
00:40:23,185 --> 00:40:25,786
a single file can be sent to the development team

559
00:40:25,846 --> 00:40:28,947
that will provide all information needed

560
00:40:29,387 --> 00:40:30,627
to investigate the issue.

561
00:40:31,627 --> 00:40:38,673
These will make issues that are almost impossible to reproduce, even after two months, 100% reproducible.

562
00:40:39,614 --> 00:40:43,517
And will empower whatever programming, whatever the programmer is using.

563
00:40:46,346 --> 00:40:53,612
So he can, for example, live in a situation similar to the movie Groundhog Day, in an

564
00:40:53,692 --> 00:40:54,873
environment with the book.

565
00:40:55,674 --> 00:41:01,659
In that situation, it is trivial to allocate memory at a deterministic address and to assign

566
00:41:02,099 --> 00:41:08,765
a deterministic ID to stuff in the world, so that you know that freaky ghost with ID

567
00:41:09,365 --> 00:41:13,849
37 on frame 42 causes a crash because of stuff.

568
00:41:14,642 --> 00:41:17,724
Furthermore, it will make each iteration faster,

569
00:41:17,864 --> 00:41:23,208
since you will know better each time you run the replay.

570
00:41:24,829 --> 00:41:26,150
You can do binary search.

571
00:41:26,630 --> 00:41:29,192
You can note down frames, IDs, and it

572
00:41:29,252 --> 00:41:31,974
doesn't require the reporter to try

573
00:41:31,994 --> 00:41:37,138
to find a set of specific steps or guidelines

574
00:41:37,178 --> 00:41:38,519
to reproduce an issue.

575
00:41:39,099 --> 00:41:40,720
None, no steps at all.

576
00:41:42,266 --> 00:41:46,431
It can be of help even to catch race conditions

577
00:41:46,511 --> 00:41:48,794
by rolling multiple times each frame.

578
00:41:49,735 --> 00:41:50,897
And if properly implemented,

579
00:41:50,977 --> 00:41:53,580
it also allows to swap between release and debug

580
00:41:53,941 --> 00:41:55,603
without losing information.

581
00:41:56,918 --> 00:42:01,381
Furthermore, because the developer has both the code and the replay, it's easy to check

582
00:42:01,901 --> 00:42:09,606
that the issue has been fixed by applying a code change at an exact frame and replaying

583
00:42:09,666 --> 00:42:13,169
the replay to see if the bug no longer happens.

584
00:42:14,002 --> 00:42:19,488
Honestly, if something in development could be called a superpower or cheat, it's this.

585
00:42:19,649 --> 00:42:24,435
And it's baffling that this tech is pretty much nowhere by default,

586
00:42:24,675 --> 00:42:31,603
specifically, especially when so many engines rely on virtual machines for script execution.

587
00:42:33,634 --> 00:42:39,878
So while the preview was ongoing, we went forward with the plans to expand our server

588
00:42:39,898 --> 00:42:45,942
fleet, which we did in multiple stages. We felt reassured doing this as Glenn Cleveland

589
00:42:46,483 --> 00:42:52,747
kept threshing out reliability at the edge, and we have had a pretty bad experience on

590
00:42:52,787 --> 00:42:57,070
previous peer-to-peer titles regarding host bandwidth and NAT traversal.

591
00:42:58,197 --> 00:43:02,262
So we started the preview with a single server in Chicago

592
00:43:02,742 --> 00:43:05,125
that was later during the following two weeks

593
00:43:05,205 --> 00:43:09,269
expanded to 14 servers pretty much everywhere in the globe.

594
00:43:10,470 --> 00:43:13,594
The positive experience that players of the preview

595
00:43:13,634 --> 00:43:16,256
reported, including popular streamers playing

596
00:43:16,316 --> 00:43:17,938
for more than 10 hours a session.

597
00:43:19,623 --> 00:43:21,984
without any sort of crash or the sink,

598
00:43:22,444 --> 00:43:24,726
were generating a lot of hype in the community.

599
00:43:24,766 --> 00:43:27,608
So we decided to rush a public beta

600
00:43:28,108 --> 00:43:31,030
so that everyone could enjoy an online multiplayer

601
00:43:31,511 --> 00:43:33,752
on Spelunky 2 before Christmas.

602
00:43:35,493 --> 00:43:38,736
As a side note for everyone, or for everyone or anyone,

603
00:43:38,996 --> 00:43:42,438
trying to build a similar infrastructure as an indie,

604
00:43:43,340 --> 00:43:49,422
If you use a deterministic model for networking, you can use pretty much any server with a fair

605
00:43:49,462 --> 00:43:56,145
share of CPU time and good peering, regardless of RAM and storage. There are a lot of service

606
00:43:56,826 --> 00:44:04,989
providers other than Amazon Web Services, Google, Compute Platform and Azure, so be careful about

607
00:44:05,129 --> 00:44:11,172
bandwidth. Look for a provider that gives you a free coupon to test their servers and

608
00:44:12,150 --> 00:44:15,852
check that they have helpful features for your use case.

609
00:44:16,872 --> 00:44:19,434
For some examples of helpful features

610
00:44:19,594 --> 00:44:21,515
are digital source bandwidth pooling

611
00:44:22,516 --> 00:44:27,419
and vultr shutdown after reaching a specified amount

612
00:44:27,479 --> 00:44:29,560
of bandwidth, which are great ways

613
00:44:29,600 --> 00:44:31,581
to avoid unexpected expenses.

614
00:44:34,102 --> 00:44:37,804
Regarding tech or backends, RCC++ hot reloading

615
00:44:37,865 --> 00:44:40,266
dynamic libraries that run on free base server.

616
00:44:43,129 --> 00:44:46,891
The whole reliability of the system that has four processes,

617
00:44:46,951 --> 00:44:48,931
including the server is great.

618
00:44:49,392 --> 00:44:52,433
And even after more than 50 patches across 20 updates

619
00:44:53,013 --> 00:44:54,394
during more than half a year,

620
00:44:54,514 --> 00:44:57,615
we have only had one partial interruption of service.

621
00:44:58,876 --> 00:45:01,837
Regarding implementation details, it's nothing too fancy.

622
00:45:01,897 --> 00:45:05,278
We are just batching a few received buffered syscalls

623
00:45:05,338 --> 00:45:09,920
to receive truncated data into fixed size buffers

624
00:45:09,960 --> 00:45:11,601
that are always zero-value.

625
00:45:12,944 --> 00:45:18,248
The most interesting design choices are probably the leaderboard system that is designed so

626
00:45:18,268 --> 00:45:23,873
that clients fetch the whole leaderboard as a compressed block through content delivery

627
00:45:23,913 --> 00:45:31,839
networks, not complex APIs, and also the log image-making system, which is unreliable by

628
00:45:31,859 --> 00:45:37,504
design so communication is performed by merging changes to a desired state structure that

629
00:45:37,524 --> 00:45:41,347
defines how the client envisions itself in the future.

630
00:45:42,383 --> 00:45:45,544
It works nice, it's easy to implement, it's easy to test,

631
00:45:46,425 --> 00:45:49,265
but it's a very bad model to provide

632
00:45:49,726 --> 00:45:51,686
meaningful error handling on logs.

633
00:45:54,667 --> 00:45:57,048
So was using a hosted service

634
00:45:57,748 --> 00:46:00,048
instead of peer-to-peer a good idea?

635
00:46:00,749 --> 00:46:02,389
For whom, you might ask?

636
00:46:03,149 --> 00:46:06,210
It provides guarantees regarding quality of services,

637
00:46:06,370 --> 00:46:08,391
allows players behind asymmetric.

638
00:46:09,377 --> 00:46:12,760
we find a symmetric knot to play together

639
00:46:13,200 --> 00:46:14,981
and makes cross-play easier.

640
00:46:15,501 --> 00:46:17,923
For deterministic games, it's also

641
00:46:18,744 --> 00:46:21,826
something that provides us explicit timeline of events

642
00:46:22,486 --> 00:46:24,848
and makes it easier to compensate for latency.

643
00:46:26,573 --> 00:46:30,416
However, it's also very harsh, especially as an indie,

644
00:46:30,937 --> 00:46:33,099
you can have someone in each time zone

645
00:46:33,179 --> 00:46:34,600
looking out for the clip.

646
00:46:35,041 --> 00:46:36,502
So if any problem arises,

647
00:46:36,722 --> 00:46:39,004
you might take a lot of time to react.

648
00:46:39,625 --> 00:46:40,806
This didn't happen to us,

649
00:46:40,886 --> 00:46:44,029
but it concerned me to the point of waking up

650
00:46:44,209 --> 00:46:46,251
during weeks in the middle of the night

651
00:46:46,692 --> 00:46:49,054
with nightmares to check if the server was up.

652
00:46:51,230 --> 00:46:57,014
In the end, having an Android app to check the Plit health helped a lot getting over it.

653
00:46:58,615 --> 00:47:04,858
Another frustrating point is that the player base becomes smaller on consoles because of gatekeeping.

654
00:47:05,118 --> 00:47:11,822
This is annoying because small games often don't have the luxury of having big player bases,

655
00:47:12,182 --> 00:47:14,404
so gatekeeping a portion ends up with...

656
00:47:15,331 --> 00:47:22,477
way more dead online modes on consoles where no one is playing online while on PC you can find

657
00:47:22,577 --> 00:47:29,263
two or three players if you wait a bit of time. This is the case for many small games and it's

658
00:47:29,343 --> 00:47:34,508
even more frustrating when it's the platform gatekeeping players who paid for your game

659
00:47:35,128 --> 00:47:38,391
and they want to play on the servers we paid for.

660
00:47:39,344 --> 00:47:46,667
It's also a bit annoying because it's the path of most resistance regarding requirements.

661
00:47:47,067 --> 00:47:52,708
Going with independent servers and crossplay seems to be very biased and focused on pre-to-play

662
00:47:52,749 --> 00:47:57,430
titles with in-app purchases or games that are full services with leagues,

663
00:47:57,750 --> 00:48:00,591
grant systems, party systems, ranked systems, etc.

664
00:48:01,011 --> 00:48:03,912
It's a pity that it has become so complex.

665
00:48:03,992 --> 00:48:07,393
We want crossplay so our players can have fun.

666
00:48:07,954 --> 00:48:12,577
We don't want account system, we don't want retention techniques, daily missions, in-app purchases,

667
00:48:13,098 --> 00:48:17,641
and definitely we don't want to exploit the variable ratio and interval schedule of

668
00:48:17,681 --> 00:48:22,385
reinforcement to keep the player spending. We just want them to play with their friends

669
00:48:22,605 --> 00:48:30,412
regardless of platform. So the promised day comes and we release the public online beta

670
00:48:30,652 --> 00:48:34,015
on Steam so that everyone can play. It was a beautiful day, a Tuesday the 13th.

671
00:48:35,548 --> 00:48:39,330
The sky was taking a beautiful orange shade during sunrise

672
00:48:39,730 --> 00:48:40,610
and the day went mad.

673
00:48:41,871 --> 00:48:43,211
No, I'm not superstitious,

674
00:48:43,251 --> 00:48:46,333
but maybe we should have waited for the 16th.

675
00:48:47,253 --> 00:48:48,713
To sum everything up,

676
00:48:49,194 --> 00:48:51,194
first multiple Google services went down.

677
00:48:51,475 --> 00:48:54,696
This was bad because that would prove discouraged presence.

678
00:48:55,096 --> 00:48:56,857
And discouraged presence is what made

679
00:48:56,877 --> 00:48:58,877
the invite system work well.

680
00:48:59,458 --> 00:49:01,358
We didn't have this information at the beginning.

681
00:49:01,438 --> 00:49:04,600
So we were investigating what was going on.

682
00:49:05,730 --> 00:49:10,376
It was a catastrophe. Our money was on something we had recently added.

683
00:49:10,836 --> 00:49:15,662
Dynamically assigning matchmaking servers based on quality of service to the matchmaking service.

684
00:49:16,582 --> 00:49:20,084
Fortunately, a very cool community member called Gary,

685
00:49:20,164 --> 00:49:22,786
who also has been developing a lot of stuff

686
00:49:23,086 --> 00:49:24,607
to mod Spelunky 2,

687
00:49:25,108 --> 00:49:27,489
happened to work at Discord and pointed to us

688
00:49:27,589 --> 00:49:28,970
that this could be the problem

689
00:49:29,070 --> 00:49:32,012
and it would be outside of our control.

690
00:49:32,352 --> 00:49:35,094
So we went ahead and did a pair of run on lines

691
00:49:35,134 --> 00:49:36,194
before releasing the build.

692
00:49:36,875 --> 00:49:40,017
And then the Steam invite system had stopped working.

693
00:49:40,517 --> 00:49:41,878
It didn't make much sense.

694
00:49:41,978 --> 00:49:43,099
We had to investigate.

695
00:49:43,659 --> 00:49:48,782
However, because of the hype for the online release was huge, probably thanks to multiple

696
00:49:48,802 --> 00:49:54,466
streamers such as ChocolateCake, Xanagir, HecTic, Ix, Twiggle, TicTacToe, IbyoJari,

697
00:49:54,646 --> 00:50:01,530
Nobduro and more were playing during the preview, and other players such as Akira or Redscan

698
00:50:01,570 --> 00:50:03,952
were also making videos of the multiplayer.

699
00:50:05,090 --> 00:50:11,417
So it was huge to the point that 30% of the messages sent during all the lifetime of the

700
00:50:11,437 --> 00:50:12,959
Discord server, three months.

701
00:50:13,862 --> 00:50:15,423
had been sent that day.

702
00:50:15,643 --> 00:50:18,625
It was huge to the point we had to disallow all people

703
00:50:18,685 --> 00:50:21,106
without a special role to chat for an hour.

704
00:50:21,547 --> 00:50:25,329
So huge that we had two rates of more than 200 people.

705
00:50:25,749 --> 00:50:27,970
So huge that it was the day of the year

706
00:50:28,010 --> 00:50:29,951
that most people joined the server.

707
00:50:29,991 --> 00:50:33,373
So huge that emote reactions on message became a problem.

708
00:50:33,814 --> 00:50:35,775
So incredibly huge that even then,

709
00:50:36,135 --> 00:50:38,696
many players decided to buy Nitro and boost the server

710
00:50:38,716 --> 00:50:40,978
in order to get a special role and toll.

711
00:50:41,418 --> 00:50:44,159
effectively making our Discord pay to chat.

712
00:50:46,040 --> 00:50:47,461
So we decided to release a siege.

713
00:50:48,081 --> 00:50:50,523
It went wrong, Steam invites were broken,

714
00:50:50,703 --> 00:50:53,584
and lots of people couldn't join through Discord too.

715
00:50:54,385 --> 00:50:58,147
We had no idea of what was causing the invite problem.

716
00:50:58,167 --> 00:51:01,088
We investigated and investigated and investigated and investigated.

717
00:51:01,168 --> 00:51:03,209
We couldn't reproduce it, but they could.

718
00:51:03,309 --> 00:51:03,509
Why?

719
00:51:04,449 --> 00:51:10,771
At some point near 1am, after trying to do pretty much everything, I happened to misclick

720
00:51:10,811 --> 00:51:13,933
the build event and ended clicking the rebuild event.

721
00:51:14,553 --> 00:51:22,416
Both invites on Steam and Discord were working again, and they didn't break anymore to this

722
00:51:22,436 --> 00:51:22,656
date.

723
00:51:23,156 --> 00:51:29,378
Obviously some object of the build was corrupt, and for some reason it didn't trigger a rebuild.

724
00:51:30,127 --> 00:51:32,069
It's something that every now and then happens.

725
00:51:32,109 --> 00:51:35,393
So we always do a review before submitting a patch.

726
00:51:35,873 --> 00:51:39,437
But that day had been so chaotic with Google going down

727
00:51:39,678 --> 00:51:41,339
and all the moderation we had to do,

728
00:51:42,120 --> 00:51:44,263
that protocols were broken and we paid for it.

729
00:51:45,561 --> 00:51:48,603
But what if I told you that that wasn't all?

730
00:51:48,984 --> 00:51:51,005
That at the same time we were investigating,

731
00:51:51,105 --> 00:51:53,287
people playing in ArcanaLab were having problems.

732
00:51:53,607 --> 00:51:56,069
What if I told you that after fixing that

733
00:51:56,130 --> 00:51:57,351
and waking up the next morning,

734
00:51:57,431 --> 00:52:00,613
we noticed some emails from our service provider

735
00:52:01,033 --> 00:52:02,575
or that specific server stating,

736
00:52:02,615 --> 00:52:04,356
hey, we are having a DDoS here.

737
00:52:05,037 --> 00:52:06,978
Either way, it was a fun crazy day.

738
00:52:07,739 --> 00:52:10,521
In the end, all went good enough so we can complain.

739
00:52:10,901 --> 00:52:13,163
But deep down, sometimes I think,

740
00:52:15,372 --> 00:52:18,134
maybe we should have waited for Wednesday.

741
00:52:20,896 --> 00:52:24,138
So a few days later, we released the PlayStation 4

742
00:52:24,178 --> 00:52:27,660
Propagation Network version and the feedback is very positive,

743
00:52:28,101 --> 00:52:29,281
with expressions such as,

744
00:52:29,361 --> 00:52:31,663
Online on PS4 feels amazing now,

745
00:52:32,263 --> 00:52:35,786
and today I played with a friend and it was really the best time.

746
00:52:36,406 --> 00:52:38,928
The feedback from the PC version was also very encouraging

747
00:52:39,068 --> 00:52:41,770
and this feedback was the best Christmas present

748
00:52:41,790 --> 00:52:43,772
that the community could have given us.

749
00:52:45,366 --> 00:52:47,528
So was adding online multiplayer a good idea?

750
00:52:48,148 --> 00:52:51,290
I don't think that multiplayer, by default, is a good idea.

751
00:52:51,591 --> 00:52:54,312
The rationale being that netcode takes a lot of time

752
00:52:54,333 --> 00:52:56,414
to implement, and you have to wait

753
00:52:56,674 --> 00:52:59,756
what the multiplayer will bring to the table

754
00:52:59,997 --> 00:53:02,999
against what you could implement in that amount of time.

755
00:53:03,379 --> 00:53:06,842
Of course, for games that rely on increasing LTV

756
00:53:07,302 --> 00:53:08,843
and retention, it's another issue.

757
00:53:09,023 --> 00:53:10,624
But from our point of view,

758
00:53:11,185 --> 00:53:13,526
it just may not be worth for all games.

759
00:53:15,060 --> 00:53:17,981
You may feel inclined to add it because it's requested,

760
00:53:18,021 --> 00:53:20,421
but keep in mind, it will always be requested.

761
00:53:20,581 --> 00:53:22,622
It has been requested in Kerbal, gone home,

762
00:53:23,082 --> 00:53:25,623
and life is strange because it's a very appealing concept

763
00:53:25,783 --> 00:53:27,683
and each person has its own preferences.

764
00:53:28,143 --> 00:53:29,424
However, going that way,

765
00:53:29,504 --> 00:53:31,304
the stream of requests will never end.

766
00:53:31,785 --> 00:53:34,605
Matchmaking, VoteKick, Lobby Browser, Crossplay,

767
00:53:35,606 --> 00:53:38,286
Player vs. Player, Invite Codes, Friendlist,

768
00:53:38,406 --> 00:53:40,427
Reconnection, Race Modes, Battle Royales.

769
00:53:41,067 --> 00:53:46,050
progress, achievements, 8-player multiplayer, voice chat, text chat, quick chat,

770
00:53:46,430 --> 00:53:53,294
pinging markers, custom online controller mappings, LAN modes, more randoms in the online matches,

771
00:53:53,314 --> 00:53:59,277
which is something we can't even control, drop-in, options to customize online user interface,

772
00:53:59,417 --> 00:54:02,358
seated online multiplayer, etc. It will never end.

773
00:54:03,878 --> 00:54:07,683
Also, we believe that the Arcade Vivo online multiplayer is a good option.

774
00:54:08,163 --> 00:54:09,905
We don't want to optimize retention.

775
00:54:09,945 --> 00:54:11,527
We don't want an app purchases.

776
00:54:11,567 --> 00:54:16,033
We just want the players to go online and play as if they were using

777
00:54:16,253 --> 00:54:18,876
Arcade cabinets with multiplayer and a leaderboard.

778
00:54:20,178 --> 00:54:23,762
And we believe that this approach for Spelunky works really well.

779
00:54:25,843 --> 00:54:26,963
Enter server analytics.

780
00:54:27,143 --> 00:54:31,525
It let us measure big community reactions,

781
00:54:31,605 --> 00:54:34,286
such as when an awesome Korean streamer

782
00:54:34,306 --> 00:54:37,468
going by the name of Noctudo invited viewers to play online.

783
00:54:37,508 --> 00:54:39,188
You can see the spikes in the chat,

784
00:54:39,669 --> 00:54:41,309
how a lot of players were in lobbies,

785
00:54:41,850 --> 00:54:44,371
but the amount of ongoing runs didn't change that much.

786
00:54:45,551 --> 00:54:47,292
In general, a server dashboard

787
00:54:47,492 --> 00:54:49,273
feels very satisfying to look at.

788
00:54:50,098 --> 00:54:53,580
Analytics have proven very useful in many situations,

789
00:54:53,620 --> 00:54:58,241
such as keeping calm when someone says that the server doesn't work,

790
00:54:58,761 --> 00:55:02,603
but there are 700 online players.

791
00:55:03,303 --> 00:55:07,144
It also helps scheduling patches in order to avoid...

792
00:55:09,345 --> 00:55:13,487
in order to release them in peak hours to avoid inconveniencing for player base.

793
00:55:14,667 --> 00:55:18,608
And it allows us to verify that the bandwidth usage...

794
00:55:20,734 --> 00:55:26,417
well, that we avoided a huge bandwidth cost by using the right providers.

795
00:55:26,898 --> 00:55:30,140
Overall, we are really happy with our setup.

796
00:55:30,680 --> 00:55:34,683
It's understandable that some people assume it costs a lot,

797
00:55:35,083 --> 00:55:37,264
but for deterministic netcode, the needs...

798
00:55:38,485 --> 00:55:43,467
means that probably 10 years of the whole fleet

799
00:55:44,048 --> 00:55:50,631
costs less than the average yearly salary of a junior game developer that just left college.

800
00:55:51,632 --> 00:55:56,034
So we believe it's a pretty reasonable and cheap price to pay

801
00:55:56,414 --> 00:55:58,915
in order to improve player stability and experience.

802
00:56:00,775 --> 00:56:06,439
Before Christmas, we also managed to squeeze in the last patch we wanted the community to have, invite codes.

803
00:56:06,860 --> 00:56:17,847
We believe that invite codes are a great way for communities to allow inviting through any platform, including things such as WhatsApp or people that are in offline modes.

804
00:56:19,013 --> 00:56:21,956
and it will also be very useful for cross-play.

805
00:56:22,497 --> 00:56:26,161
Two details worth mentioning are that the invite codes are automatically copied

806
00:56:26,641 --> 00:56:31,847
from the clipboard and pasted, and that we decided not to show the invite code by default

807
00:56:31,887 --> 00:56:39,176
so that the streamers could keep a code room private when inviting specific guests.

808
00:56:41,363 --> 00:56:45,164
Moving on to the last big topic of the talk, problems.

809
00:56:45,344 --> 00:56:47,964
We didn't have much problems with determinism,

810
00:56:48,104 --> 00:56:51,885
probably thanks to the culture of determinism

811
00:56:52,325 --> 00:56:55,146
and a very small engineering time in.

812
00:56:55,926 --> 00:56:59,147
However, extrapolation working as intended

813
00:56:59,167 --> 00:57:00,407
has been an issue.

814
00:57:01,087 --> 00:57:04,128
It has been brought on multiple GDC talks

815
00:57:04,548 --> 00:57:08,129
and it's something that most people, including us,

816
00:57:08,906 --> 00:57:15,449
deemed unacceptable. Unfortunately, this can happen in rollback and propagation if

817
00:57:16,730 --> 00:57:24,533
under certain circumstances. Also, clogged drifting of machines that don't meet the requirements

818
00:57:24,994 --> 00:57:35,338
was quite a problem and is quite a problem. However, the biggest problem of all,

819
00:57:35,879 --> 00:57:37,439
the most significant problem was

820
00:57:38,322 --> 00:57:42,309
and this, the ambiguous feedback we receive.

821
00:57:43,271 --> 00:57:44,513
So ambiguous feedback.

822
00:57:45,835 --> 00:57:50,223
You may know this game called Chinese whispers

823
00:57:50,624 --> 00:57:52,206
or broken telephone.

824
00:57:53,575 --> 00:58:01,240
And it feels a lot like that. I mean, the users try to communicate a problem, a problem they are

825
00:58:01,280 --> 00:58:06,824
having, using the best description they can provide with the knowledge they have. And that

826
00:58:07,124 --> 00:58:11,107
tends to be the game design. The game...

827
00:58:12,299 --> 00:58:14,925
crashed the game, whatever.

828
00:58:15,045 --> 00:58:17,410
The point of it is that all these,

829
00:58:17,590 --> 00:58:20,316
you will see all these words being used

830
00:58:20,616 --> 00:58:23,983
as if they, as if all words were perfect synonyms.

831
00:58:24,911 --> 00:58:33,338
you'll see people say that lag is stuttering, that clock drifting is crashing, that disconnections

832
00:58:33,878 --> 00:58:41,324
are sluggish, that input delay is the same, all combinations are possible and it makes very hard

833
00:58:41,464 --> 00:58:49,230
to know what problem a user has in order to help the user enjoy the game.

834
00:58:50,878 --> 00:58:52,900
So regarding other open challenges,

835
00:58:53,400 --> 00:58:55,562
one of the open challenges we are still facing

836
00:58:56,282 --> 00:58:58,384
is as mentioned before, extrapolation.

837
00:58:58,844 --> 00:59:01,046
It's something we are considering addressing

838
00:59:01,146 --> 00:59:03,247
by adding some sort of output delay.

839
00:59:03,627 --> 00:59:06,790
We believe that buffering the last end stage

840
00:59:07,010 --> 00:59:08,251
of remote client

841
00:59:09,295 --> 00:59:13,637
and then using a past state to render the remote players

842
00:59:14,217 --> 00:59:18,518
might mitigate enough this to actually remove input delay

843
00:59:18,638 --> 00:59:22,319
in a non-competitive mode where other players' positions

844
00:59:22,339 --> 00:59:24,240
doesn't need to be that accurate.

845
00:59:25,820 --> 00:59:27,881
Also, regarding matchmaking, we have

846
00:59:27,901 --> 00:59:30,902
been running A-B testing global.

847
00:59:32,425 --> 00:59:37,170
comparing global matchmaking on PS4 versus regional matchmaking on PC.

848
00:59:38,011 --> 00:59:43,017
And this has been going on for a few months and we are still unsure of what approach is the

849
00:59:43,057 --> 00:59:48,382
best approach. Regional matchmaking provides a great experience but creates fragmentation.

850
00:59:48,422 --> 00:59:51,445
It's hard to find a match of peak hours.

851
00:59:51,966 --> 00:59:58,191
so most users rely on the discord server to find a match that may provide a worse network

852
00:59:58,251 --> 00:59:58,891
experience.

853
00:59:59,091 --> 01:00:04,255
On the other side, non-regional matchmaking makes matchmaking actually useful, but every

854
01:00:04,295 --> 01:00:08,819
now and then we receive sporadic complaints of people that found a match

855
01:00:09,519 --> 01:00:13,741
with someone on the other side of the world and had a subpar experience.

856
01:00:13,921 --> 01:00:17,402
It's something we are still debating about and in the end,

857
01:00:17,582 --> 01:00:22,585
the best solution might be mixing both so players can fall back to a global matchmaking.

858
01:00:24,525 --> 01:00:29,668
Another open challenge is how to handle computers not meeting minimum requirements,

859
01:00:30,508 --> 01:00:34,410
because you can lower the resolution to almost zero without

860
01:00:35,290 --> 01:00:39,814
with pretty much any PC supporting DX11,

861
01:00:41,515 --> 01:00:46,760
be it through an integrated graphics or dedicated,

862
01:00:47,360 --> 01:00:51,704
can actually run Spelunky 2, even way below minimum requirements.

863
01:00:51,764 --> 01:00:56,027
This means, instead of four cores, a single-core Pentium 4 computer.

864
01:00:56,047 --> 01:00:57,148
We have seen this.

865
01:00:58,096 --> 01:01:02,699
real life. So we have a lot of players unable to enjoy online because of

866
01:01:02,779 --> 01:01:08,704
hardware. Keep in mind that this is not exclusive of potato PCs, but also happens

867
01:01:08,804 --> 01:01:14,448
to laptops running on battery. Happens to desktop PCs that just got the

868
01:01:14,488 --> 01:01:15,889
latest Windows update.

869
01:01:16,610 --> 01:01:23,253
happens when one computer has only one fast core and the rest of the cores are very slow.

870
01:01:23,773 --> 01:01:31,177
And it happens to high-end Intel laptops that can sustain boosts for only a very short amount

871
01:01:31,257 --> 01:01:33,078
of time and then throttle a lot.

872
01:01:33,805 --> 01:01:41,111
External programs that show notifications also sometimes cause lags, spikes, frame drops, and sporadic extrapolation teleports.

873
01:01:41,671 --> 01:01:49,057
It's something we detected early in 2021, and we're still considering how to approach this as we were able to conclude without a doubt

874
01:01:49,577 --> 01:01:54,821
that 32 of the 36 cases in which players were seeing constant teleports were caused by this.

875
01:01:55,361 --> 01:02:01,744
It's a big problem for us because other than detecting this reliably, it doesn't seem to have

876
01:02:01,764 --> 01:02:07,948
an obvious solution, as micropausing would actually hurt a lot precision platforming.

877
01:02:08,508 --> 01:02:13,411
We could also slow more the game below 57 updates per second, but it may throw

878
01:02:13,531 --> 01:02:17,873
experienced players out of rhythm and it may be exploitable in Arena.

879
01:02:18,253 --> 01:02:24,056
We may be able to show this information in the HUD, but it could cause discrimination.

880
01:02:25,573 --> 01:02:27,415
There are also many unexpected findings,

881
01:02:27,775 --> 01:02:28,756
interesting findings.

882
01:02:28,977 --> 01:02:31,540
One of them was that roughly 8% of players

883
01:02:32,100 --> 01:02:34,984
experienced internet microcodes of more than three seconds.

884
01:02:35,004 --> 01:02:36,165
We didn't see this coming,

885
01:02:36,605 --> 01:02:38,768
and we have found a variety of reasons for this.

886
01:02:39,128 --> 01:02:42,232
Cheap routers, Wi-Fi adapters performing background scans.

887
01:02:42,672 --> 01:02:44,935
and ESP service microcodes.

888
01:02:45,376 --> 01:02:48,380
We plan on increasing the disconnect windows,

889
01:02:48,460 --> 01:02:51,524
but we first need to find a way to mitigate the damage

890
01:02:52,004 --> 01:02:56,089
that PC not meeting requirements could do in these situations.

891
01:02:57,057 --> 01:03:01,341
Also regarding crossplay requirements, we didn't expect platforms to be so focused on

892
01:03:01,961 --> 01:03:07,887
one-size-fits-all requirements clearly designed for in-app purchases and games as a service

893
01:03:08,347 --> 01:03:13,071
that doesn't fit at all indie games. We would appreciate if this was revised in the future

894
01:03:13,772 --> 01:03:18,896
as the requirements are an overkill for an arcade-like online multiplayer.

895
01:03:21,075 --> 01:03:28,858
Finally, we found out why many people couldn't connect to any of the 30 servers.

896
01:03:29,339 --> 01:03:34,941
It wasn't because of a network problem, but because of players not following mother's

897
01:03:35,021 --> 01:03:35,582
instructions.

898
01:03:36,002 --> 01:03:42,465
It caught us by surprise, but finally it made sense why some layout bugs that were fixed

899
01:03:42,645 --> 01:03:45,246
in the past kept happening and being reported.

900
01:03:45,992 --> 01:03:48,873
On a separate note, modding can cause desyncs.

901
01:03:48,933 --> 01:03:51,094
We haven't been able to analyze this in depth

902
01:03:52,375 --> 01:03:54,295
because of how time-consuming it is,

903
01:03:54,516 --> 01:04:00,898
but two out of the three early, long investigations

904
01:04:00,958 --> 01:04:03,039
of hard desyncs in the wild,

905
01:04:04,294 --> 01:04:05,476
were caused by mods.

906
01:04:06,076 --> 01:04:07,578
Still, modding is great.

907
01:04:07,858 --> 01:04:11,962
We announced that we would evaluate it early on,

908
01:04:12,423 --> 01:04:15,947
and our plan was to fix up some bugs, then evaluate it.

909
01:04:16,808 --> 01:04:20,551
However, because of all the problems that came up

910
01:04:20,611 --> 01:04:22,994
while developing the online multiplayer, we...

911
01:04:24,393 --> 01:04:30,994
didn't manage to do this in time and somehow the a full-blown modding community with more

912
01:04:31,034 --> 01:04:37,456
than 800 mods became a thing before the online was released and with no tools and a lot of

913
01:04:37,556 --> 01:04:42,997
reverse engineering work. We are sure that mods are here to stay and while it's low priority we

914
01:04:43,017 --> 01:04:49,439
want to integrate mods with online in a safe way for everyone but right now it's well wasted.

915
01:04:51,359 --> 01:04:53,123
So this will be everything.

916
01:04:53,604 --> 01:04:55,709
Thank you for coming to my GBC talk.

917
01:04:55,829 --> 01:04:57,833
I hope you have enjoyed the talk a lot.

918
01:04:58,455 --> 01:04:59,838
And feel free to ask me whatever.

919
01:04:59,878 --> 01:05:01,120
Have a good day.

