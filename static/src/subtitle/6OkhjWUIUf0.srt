1
00:00:06,427 --> 00:00:09,829
Good afternoon. My name is Chris Stark, and I'm a programmer at Robot Entertainment.

2
00:00:09,829 --> 00:00:15,172
I've been in the industry now for around 13 years at several different companies,

3
00:00:15,172 --> 00:00:17,913
most recently Robot Entertainment for the last 8 years,

4
00:00:17,913 --> 00:00:19,974
where I've primarily worked on the Orcs Must Die franchise.

5
00:00:21,199 --> 00:00:23,642
So for those of you not familiar with orcs,

6
00:00:23,642 --> 00:00:25,043
here's a quick rundown.

7
00:00:25,043 --> 00:00:27,846
You have one more mage and friends versus hordes of orcs,

8
00:00:27,846 --> 00:00:31,069
AI, trolls, ogres, and worse,

9
00:00:31,069 --> 00:00:33,332
and weapons and traps to hold them back

10
00:00:33,332 --> 00:00:35,193
from entering your rift.

11
00:00:35,193 --> 00:00:37,015
There are tons of AIs that want to shoot you,

12
00:00:37,015 --> 00:00:38,076
stab you, and or blow you up.

13
00:00:39,492 --> 00:00:44,636
I'm going to be talking today about how to use ranged AIs in this franchise, specifically

14
00:00:44,636 --> 00:00:46,237
AIs that fire projectiles.

15
00:00:46,237 --> 00:00:49,860
I'll be talking about math, code, and design, all three.

16
00:00:49,860 --> 00:00:54,843
The design drives your math and your code, keeping it fun is your foremost job.

17
00:00:54,843 --> 00:00:56,625
So most action games have ranged AI.

18
00:00:56,625 --> 00:01:02,009
Like I mentioned, I'm going to be talking about the ones that do projectiles.

19
00:01:02,009 --> 00:01:04,391
Some of this, but not much of it, is relevant to hitscan.

20
00:01:04,572 --> 00:01:07,493
The projectiles need to be slow enough for the player to dodge.

21
00:01:07,493 --> 00:01:09,714
This way, the player has a chance

22
00:01:09,714 --> 00:01:11,115
to have some counterplay against the AIs,

23
00:01:11,115 --> 00:01:13,236
and it makes the AIs more fun to play against.

24
00:01:13,236 --> 00:01:15,077
However, this means that by the time

25
00:01:15,077 --> 00:01:17,618
the projectile gets there, the player won't be there.

26
00:01:17,618 --> 00:01:19,618
If you're not aiming ahead, this is what you're going to get.

27
00:01:19,618 --> 00:01:20,879
Looks pretty bad, doesn't it?

28
00:01:20,879 --> 00:01:23,300
You really want something more like this.

29
00:01:23,300 --> 00:01:24,941
So the first class of projectiles

30
00:01:24,941 --> 00:01:26,941
we'll be talking about are linear projectiles.

31
00:01:33,708 --> 00:01:35,450
And then the second are ballistic projectiles.

32
00:01:35,450 --> 00:01:38,033
I'm going to be talking through how to aim, debug,

33
00:01:38,033 --> 00:01:40,916
and most importantly, miss with both types of projectiles,

34
00:01:40,916 --> 00:01:43,118
and a few things I ran across while I was implementing them.

35
00:01:43,118 --> 00:01:45,581
So let's start off by talking about predicting

36
00:01:45,581 --> 00:01:46,822
player movement.

37
00:01:46,822 --> 00:01:49,084
So first, a few assumptions we're going to make.

38
00:01:49,084 --> 00:01:53,049
We're typically working over a short enough time frame

39
00:01:53,049 --> 00:01:55,071
that we don't need to worry about rotations.

40
00:01:55,733 --> 00:01:57,933
And we also want to make sure we ignore the player's

41
00:01:57,933 --> 00:01:59,254
vertical velocity when they're jumping.

42
00:01:59,254 --> 00:02:02,574
Otherwise, it's going to throw off our aiming results.

43
00:02:02,574 --> 00:02:05,735
We're going to be pretending that we're operating in a vacuum.

44
00:02:05,735 --> 00:02:08,856
It helps keep the math and ultimately the code quite a bit simpler.

45
00:02:08,856 --> 00:02:11,456
So we need to know which way the player is going to be going.

46
00:02:11,456 --> 00:02:15,097
The easiest thing to do is look at how fast the player is going right now

47
00:02:15,097 --> 00:02:17,057
and in what direction and just use that.

48
00:02:17,057 --> 00:02:19,618
This works well as long as the player is doing something like this.

49
00:02:22,214 --> 00:02:26,415
However, when your player starts doing things more like this, it doesn't work quite as well.

50
00:02:26,415 --> 00:02:30,717
Is there something we can do better than just the instantaneous velocity?

51
00:02:30,717 --> 00:02:31,377
There is.

52
00:02:31,377 --> 00:02:34,698
We can use a history buffer, which will give us a more accurate result.

53
00:02:34,698 --> 00:02:39,820
You're going to want to take that history buffer and tweak it until you're accurate,

54
00:02:39,820 --> 00:02:42,321
but players still have a chance to dodge the projectiles.

55
00:02:44,772 --> 00:02:46,792
So now that we've got a velocity,

56
00:02:46,792 --> 00:02:48,493
let's walk through how to use that to predict

57
00:02:48,493 --> 00:02:50,334
the player's future position.

58
00:02:50,334 --> 00:02:53,014
So we'll start with a war mage here in a position.

59
00:02:53,014 --> 00:02:54,775
In our first two games, just as a side note,

60
00:02:54,775 --> 00:02:57,196
the origin of the player was on the ground.

61
00:02:57,196 --> 00:02:58,276
You want to make sure you're actually

62
00:02:58,276 --> 00:02:59,797
using the center of their bounding box

63
00:02:59,797 --> 00:03:01,057
and not shooting at the ground.

64
00:03:01,057 --> 00:03:04,078
We know from our history buffer that they're

65
00:03:04,078 --> 00:03:05,399
moving at some velocity.

66
00:03:05,399 --> 00:03:08,480
And then they're going to be moving for t seconds.

67
00:03:08,480 --> 00:03:10,721
We don't know how long t is yet, but we'll come back to that

68
00:03:10,721 --> 00:03:11,541
here in a little bit.

69
00:03:12,258 --> 00:03:13,258
So when you put that all together,

70
00:03:13,258 --> 00:03:15,199
that will give us our final predict position,

71
00:03:15,199 --> 00:03:18,160
X prime, which is the board ranger's original position

72
00:03:18,160 --> 00:03:20,041
plus his velocity times the amount of time

73
00:03:20,041 --> 00:03:21,741
he's been traveling.

74
00:03:21,741 --> 00:03:23,282
We'll see this again here in just a minute.

75
00:03:23,282 --> 00:03:26,343
First, though, let's talk about linear projectiles a little bit.

76
00:03:26,343 --> 00:03:28,804
This is a linear projectile. There's no gravity on it.

77
00:03:28,804 --> 00:03:31,845
It's going to go in a straight line forever

78
00:03:31,845 --> 00:03:33,005
or until it hits something.

79
00:03:33,005 --> 00:03:35,806
But before we go ahead and fire one of these off,

80
00:03:35,806 --> 00:03:38,047
there's a few things we want to do first.

81
00:03:38,047 --> 00:03:40,088
We want to predict the player's position,

82
00:03:40,088 --> 00:03:41,808
which we'll talk about how we're going to do.

83
00:03:43,024 --> 00:03:46,505
Then we want to make sure that we're not going to be firing this through a wall.

84
00:03:46,505 --> 00:03:50,327
We may also want to check against friendly units between us and that predicted player

85
00:03:50,327 --> 00:03:51,307
position.

86
00:03:51,307 --> 00:03:52,047
We wound up not.

87
00:03:52,047 --> 00:03:57,569
However, we did have the friendlies block shots because players were a little bit baffled

88
00:03:57,569 --> 00:04:02,071
where the shots were coming from since our range units tended to be in the back.

89
00:04:02,071 --> 00:04:04,872
We didn't do a line of sight check though just because we have a lot of orcs and it

90
00:04:04,872 --> 00:04:06,793
would have been pretty performance heavy to do so.

91
00:04:07,902 --> 00:04:11,003
And then the other thing you want to think about is when you're actually going to do

92
00:04:11,003 --> 00:04:13,024
the math to do the intersection prediction.

93
00:04:13,024 --> 00:04:16,845
You can do it before you fire off or you can do it at the actual launch point in your animation.

94
00:04:16,845 --> 00:04:19,766
So now that we've got that out of the way, let's talk about how we're looking at the

95
00:04:19,766 --> 00:04:20,866
projectile.

96
00:04:20,866 --> 00:04:24,347
So, like the wormage, it's going to start in a fixed position.

97
00:04:24,347 --> 00:04:27,388
In this case, it's going to be the end of the orc's crossbow.

98
00:04:28,388 --> 00:04:30,549
It's going to be moving at some fixed speed.

99
00:04:30,549 --> 00:04:32,790
We let design decide what the speed was.

100
00:04:32,790 --> 00:04:35,270
We also had a maximum speed or a maximum range,

101
00:04:35,270 --> 00:04:38,591
sorry, on our projectiles so that they would time out

102
00:04:38,591 --> 00:04:40,271
after a certain amount of time and we

103
00:04:40,271 --> 00:04:43,432
wouldn't have a lot of entities cluttering up the world.

104
00:04:43,432 --> 00:04:46,293
And then it's going to be moving for some amount of time

105
00:04:46,293 --> 00:04:47,993
t since launch.

106
00:04:47,993 --> 00:04:51,354
And since the AI can actually fire in any direction,

107
00:04:51,354 --> 00:04:53,374
sp, your speed, times the amount of time it's been out

108
00:04:53,374 --> 00:04:55,455
is actually going to form a circle around the AI that's

109
00:04:55,455 --> 00:04:56,455
expanding over time.

110
00:04:57,143 --> 00:04:59,911
So the radius of that circle, like I said, is the speed times the time it's been out.

111
00:04:59,911 --> 00:05:05,085
X prime, which is going to be our new projectile position, lives somewhere on that expanding circle.

112
00:05:12,213 --> 00:05:14,855
This can also be written as the equation for a circle, which

113
00:05:14,855 --> 00:05:16,156
I've done here.

114
00:05:16,156 --> 00:05:18,297
I'm going to be doing and showing all my math

115
00:05:18,297 --> 00:05:20,038
on my slides here in 2D.

116
00:05:20,038 --> 00:05:21,479
I, for some reason, am not a very good artist

117
00:05:21,479 --> 00:05:23,661
when it comes to 3D.

118
00:05:23,661 --> 00:05:26,183
So just so you know, this math actually

119
00:05:26,183 --> 00:05:28,124
does all work in 3D without any modification.

120
00:05:28,124 --> 00:05:30,706
So when you take the player's movement

121
00:05:30,706 --> 00:05:32,767
and the projectile's movement and you put them together,

122
00:05:32,767 --> 00:05:34,929
you can see what we wind up with is a circle

123
00:05:34,929 --> 00:05:35,790
versus line intersection.

124
00:05:36,694 --> 00:05:38,816
And so if we think about a circle versus line intersection,

125
00:05:38,816 --> 00:05:40,337
we really have three cases.

126
00:05:40,337 --> 00:05:42,839
We don't hit it all, we have one potential hit,

127
00:05:42,839 --> 00:05:44,039
or we have two potential hits.

128
00:05:44,039 --> 00:05:46,241
So just keep that in mind as we go here.

129
00:05:46,241 --> 00:05:47,822
So here are our equations again

130
00:05:47,822 --> 00:05:51,605
for both the player movement and the projectile movement.

131
00:05:51,605 --> 00:05:53,686
So you'll notice both of these have an x prime.

132
00:05:53,686 --> 00:05:55,648
This is actually gonna be our intersection point

133
00:05:55,648 --> 00:05:57,049
where the projectile hits the player.

134
00:05:58,240 --> 00:05:59,861
And you also notice we have a t in both of these

135
00:05:59,861 --> 00:06:01,701
for how long it's been.

136
00:06:01,701 --> 00:06:03,882
So we don't know t, which is our intersection time.

137
00:06:03,882 --> 00:06:05,942
So if you take these two equations

138
00:06:05,942 --> 00:06:08,063
and you solve them through t, you wind up

139
00:06:08,063 --> 00:06:10,123
with a quadratic equation, which you can solve

140
00:06:10,123 --> 00:06:11,163
using the quadratic formula.

141
00:06:11,163 --> 00:06:14,684
a, b, and c here are all scalars.

142
00:06:14,684 --> 00:06:16,485
There's a bunch of vector multiplies in there

143
00:06:16,485 --> 00:06:17,305
that are just dot products.

144
00:06:17,305 --> 00:06:20,466
For folks interested in how we got from the last slide

145
00:06:20,466 --> 00:06:22,626
to this slide, the online versions

146
00:06:22,626 --> 00:06:24,646
of these slides, which will be up shortly after GDC,

147
00:06:24,646 --> 00:06:27,467
will actually have that whole derivation in the appendix.

148
00:06:29,023 --> 00:06:31,925
So let's take our quadratic formula that we got from there.

149
00:06:31,925 --> 00:06:32,825
It's pretty simple.

150
00:06:32,825 --> 00:06:34,346
It's not too difficult to code this up and go.

151
00:06:34,346 --> 00:06:35,747
However, there's a couple edge cases

152
00:06:35,747 --> 00:06:36,848
you want to make sure you think about

153
00:06:36,848 --> 00:06:39,509
while you're working through solving this.

154
00:06:39,509 --> 00:06:41,290
So first, if you take a look at the bottom of this,

155
00:06:41,290 --> 00:06:42,951
your intuition would be if a is zero,

156
00:06:42,951 --> 00:06:45,172
you don't have a valid solution.

157
00:06:45,172 --> 00:06:47,213
But remember, we're actually solving a polynomial,

158
00:06:47,213 --> 00:06:50,435
a t squared plus b t plus c equals zero.

159
00:06:50,435 --> 00:06:52,516
So we actually do have a valid solution if a is zero.

160
00:06:54,121 --> 00:06:58,202
The next thing we want to do is we want to take a look at the discriminant inside of the square root here.

161
00:06:58,202 --> 00:06:59,823
If it's zero, we wind up with one solution.

162
00:06:59,823 --> 00:07:02,603
If it's negative, we don't have any solution at all.

163
00:07:02,603 --> 00:07:05,364
Otherwise, we're going to get two solutions.

164
00:07:05,364 --> 00:07:09,165
We want to take the smallest positive solution of the two because you want to hit as soon as you can.

165
00:07:09,165 --> 00:07:11,866
If you have a negative solution, it's invalid.

166
00:07:11,866 --> 00:07:16,948
In my experience, you're almost always going to wind up with one invalid solution.

167
00:07:16,948 --> 00:07:19,528
It's very rare to actually wind up with two valid solutions out of this.

168
00:07:19,793 --> 00:07:22,255
So once you have your solution for time t,

169
00:07:22,255 --> 00:07:23,956
you can circle back around and plug that into

170
00:07:23,956 --> 00:07:26,238
the warmage movement equation,

171
00:07:26,238 --> 00:07:28,220
and this will give us x prime, the location we're aiming at.

172
00:07:28,220 --> 00:07:31,483
You can take x prime and your initial firing point

173
00:07:31,483 --> 00:07:33,384
from the orc, and that will give you

174
00:07:33,384 --> 00:07:34,405
the direction you're firing in,

175
00:07:34,405 --> 00:07:36,527
and then if you multiply that by the speed

176
00:07:36,527 --> 00:07:37,908
the projectile is firing at,

177
00:07:37,908 --> 00:07:39,970
you will have your final projectile velocity,

178
00:07:39,970 --> 00:07:41,291
as you can see here.

179
00:07:43,996 --> 00:07:46,338
So what happens if you don't come up with a valid solution?

180
00:07:46,338 --> 00:07:48,560
Because it can and will happen to you.

181
00:07:48,560 --> 00:07:51,323
So if you did your math before you played your firing

182
00:07:51,323 --> 00:07:53,265
animation, you can just not fire at all.

183
00:07:53,265 --> 00:07:55,067
Nobody will ever know anything happened.

184
00:07:55,067 --> 00:07:57,609
However, if you're like us, and you actually did your

185
00:07:57,609 --> 00:07:59,671
math at the time you hit the firing point in your

186
00:07:59,671 --> 00:08:00,111
animation,

187
00:08:01,032 --> 00:08:02,993
The orcs already played a firing animation.

188
00:08:02,993 --> 00:08:04,553
It looks really bad in our experience

189
00:08:04,553 --> 00:08:06,673
if nothing comes out of the crossbow at that point.

190
00:08:06,673 --> 00:08:07,914
So what we wound up doing was actually

191
00:08:07,914 --> 00:08:10,754
just shooting a projectile at the player's current position.

192
00:08:10,754 --> 00:08:11,754
Nobody ever really noticed.

193
00:08:11,754 --> 00:08:12,815
It happened frequently enough.

194
00:08:12,815 --> 00:08:13,475
It still looked fine.

195
00:08:13,475 --> 00:08:15,955
And we have a lot of cases, too, where the player wasn't

196
00:08:15,955 --> 00:08:18,676
moving around, so it still actually looked pretty decent.

197
00:08:18,676 --> 00:08:22,117
So once you have your math all coded up and in your game,

198
00:08:22,117 --> 00:08:24,597
you may want to actually visually double check it

199
00:08:24,597 --> 00:08:26,758
just to make sure it's working like you expected.

200
00:08:26,758 --> 00:08:27,818
So we did that.

201
00:08:28,552 --> 00:08:30,874
So the first thing we did is under the orc here,

202
00:08:30,874 --> 00:08:31,994
we drew the launch point.

203
00:08:31,994 --> 00:08:33,915
You can't see it because he's standing on top of it.

204
00:08:33,915 --> 00:08:36,296
The next thing we drew here in red

205
00:08:36,296 --> 00:08:37,997
was the actual predicted point of intersection

206
00:08:37,997 --> 00:08:39,978
between the War Mage and the projectile.

207
00:08:39,978 --> 00:08:43,040
Then we drew the motion of the projectile.

208
00:08:43,040 --> 00:08:45,161
Every frame we just draw its position in white.

209
00:08:46,018 --> 00:08:49,321
And then we draw the final impact point in blue.

210
00:08:49,321 --> 00:08:51,304
So if you notice, the impact point and the predicted point

211
00:08:51,304 --> 00:08:52,385
are actually slightly different here.

212
00:08:52,385 --> 00:08:54,787
But that's expected, since the player's collision isn't

213
00:08:54,787 --> 00:08:55,668
a point in space.

214
00:08:55,668 --> 00:08:57,530
In our case, it's actually a cylinder.

215
00:08:57,530 --> 00:08:59,672
So that impact point is actually on the surface of the cylinder.

216
00:08:59,672 --> 00:09:01,354
So those two points are close enough

217
00:09:01,354 --> 00:09:02,796
that this is what we would expect to see,

218
00:09:02,796 --> 00:09:03,576
and this lines up.

219
00:09:05,246 --> 00:09:06,688
So now that we've talked about hitting a little bit

220
00:09:06,688 --> 00:09:07,469
with linear printer tiles,

221
00:09:07,469 --> 00:09:09,591
let's talk about missing with them.

222
00:09:09,591 --> 00:09:12,054
We're trying to write fun AI opponents here and not aim bots.

223
00:09:12,054 --> 00:09:13,956
So we wound up giving the design

224
00:09:13,956 --> 00:09:15,478
two different accuracy settings,

225
00:09:15,478 --> 00:09:17,380
one for horizontal and one for vertical.

226
00:09:18,138 --> 00:09:20,101
We would then take that and do a random roll

227
00:09:20,101 --> 00:09:22,543
between the negative value and the positive value.

228
00:09:22,543 --> 00:09:25,386
So we defaulted to two degrees, interestingly enough,

229
00:09:25,386 --> 00:09:26,948
for both horizontal and vertical,

230
00:09:26,948 --> 00:09:29,210
which gave us a total cone of four degrees.

231
00:09:29,210 --> 00:09:32,814
We would then take those two rotations,

232
00:09:32,814 --> 00:09:35,396
generate a rotation matrix, and multiply it

233
00:09:35,396 --> 00:09:39,420
by our initial direction vector to randomize the shots.

234
00:09:40,524 --> 00:09:42,365
One thing we noted, especially on the vertical,

235
00:09:42,365 --> 00:09:44,947
is that you want to avoid shooting too far up

236
00:09:44,947 --> 00:09:47,489
or too far down, especially if you're shooting to the ground.

237
00:09:47,489 --> 00:09:48,969
It made the AI look especially dumb.

238
00:09:48,969 --> 00:09:52,752
They are orcs, but at the end of the day,

239
00:09:52,752 --> 00:09:54,553
you don't want them to look too dumb, after all.

240
00:09:54,553 --> 00:09:55,794
So this worked well.

241
00:09:55,794 --> 00:09:57,175
We had this in our game for quite a while.

242
00:09:57,175 --> 00:09:59,176
And then we added barricades, which

243
00:09:59,176 --> 00:10:00,817
are obstructions that block the AI's paths

244
00:10:00,817 --> 00:10:01,738
and that they can damage.

245
00:10:02,344 --> 00:10:04,605
And we noticed that archers were really being rough on the

246
00:10:04,605 --> 00:10:05,726
barricades, as you can see here.

247
00:10:05,726 --> 00:10:07,668
Pretty much all their shots were hitting the barricades.

248
00:10:07,668 --> 00:10:08,409
It looked really bad.

249
00:10:08,409 --> 00:10:10,851
Players were complaining because all their expensive

250
00:10:10,851 --> 00:10:11,631
traps are getting torn up.

251
00:10:12,542 --> 00:10:14,484
So what we wound up doing is we added a new value

252
00:10:14,484 --> 00:10:16,827
into the equation we called tilt that we applied

253
00:10:16,827 --> 00:10:18,528
to the vertical value only.

254
00:10:18,528 --> 00:10:20,430
So tilt automatically shrunk the cone by half.

255
00:10:20,430 --> 00:10:22,793
So now we had a 2 degree cone instead of a 4 degree cone.

256
00:10:22,793 --> 00:10:27,157
And then we had a range 0 to 1 where 0.5 kept it centered.

257
00:10:27,157 --> 00:10:30,040
0 would remove the bottom and 1 would remove the top.

258
00:10:30,040 --> 00:10:32,062
We wound up defaulting our tilt value

259
00:10:32,062 --> 00:10:34,704
to 3 quarters, which got the majority of the shots clear

260
00:10:34,704 --> 00:10:36,206
of the barricades, as you can see here.

261
00:10:36,787 --> 00:10:41,500
We didn't want to remove all of the down because we do want to incent players to not fight around the barricades

262
00:10:41,500 --> 00:10:43,486
But we didn't want to be overly penalizing either

263
00:10:44,612 --> 00:10:46,393
As it turns out, that actually still wasn't enough

264
00:10:46,393 --> 00:10:47,934
to fix all of our problems with barricades.

265
00:10:47,934 --> 00:10:50,295
We had a number of short characters in the game,

266
00:10:50,295 --> 00:10:52,396
as you can see here, whose center point,

267
00:10:52,396 --> 00:10:53,736
which is what we were aiming at,

268
00:10:53,736 --> 00:10:55,877
was actually below the barricade height.

269
00:10:55,877 --> 00:10:57,578
So what we did for those cases is we had the AI

270
00:10:57,578 --> 00:10:59,739
look at the height of the thing they were shooting at,

271
00:10:59,739 --> 00:11:01,880
and if their center was below the top of the barricades,

272
00:11:01,880 --> 00:11:03,601
we'd pull it up, but not above the top

273
00:11:03,601 --> 00:11:05,522
of the player's collision cylinder.

274
00:11:05,522 --> 00:11:08,223
We threw a warning if that point actually did need

275
00:11:08,223 --> 00:11:09,383
to go over the top of the cylinder.

276
00:11:09,383 --> 00:11:10,944
Fortunately, it's never come up for us.

277
00:11:12,892 --> 00:11:15,232
So here's everything all working on a layer projectile.

278
00:11:15,232 --> 00:11:18,393
So in summary, they have a fixed constant speed.

279
00:11:18,393 --> 00:11:22,114
You want to take that speed and the player movement prediction

280
00:11:22,114 --> 00:11:25,635
to solve for the intersection time and location.

281
00:11:25,635 --> 00:11:27,855
As far as missing, we used a cone.

282
00:11:27,855 --> 00:11:30,316
We used a different angle for both horizontal and vertical

283
00:11:30,316 --> 00:11:31,276
on that cone.

284
00:11:31,276 --> 00:11:34,117
And we did need to do some additional game dependent

285
00:11:34,117 --> 00:11:35,217
tweaks in UMEI as well.

286
00:11:35,217 --> 00:11:37,778
So next up, let's talk about their cousins,

287
00:11:37,778 --> 00:11:39,978
the ballistic projectiles.

288
00:11:41,515 --> 00:11:43,257
So this is a ballistic projectile.

289
00:11:43,257 --> 00:11:46,580
Unlike a linear projectile, it has an upwards initial

290
00:11:46,580 --> 00:11:50,525
velocity, or some up velocity to its initial velocity.

291
00:11:50,525 --> 00:11:52,908
And it's affected by gravity, so you get this

292
00:11:52,908 --> 00:11:53,608
nice arcing motion.

293
00:11:53,608 --> 00:11:57,813
So you really want to do the same set of operations here as

294
00:11:57,813 --> 00:11:59,795
you did on a linear projectile before firing.

295
00:12:00,527 --> 00:12:02,688
You want to predict the player's position.

296
00:12:02,688 --> 00:12:04,349
One slight difference here is you may actually

297
00:12:04,349 --> 00:12:06,750
want to predict on the ground, which

298
00:12:06,750 --> 00:12:08,931
because a lot of times you'll have a bouncy grenade

299
00:12:08,931 --> 00:12:10,792
and this will actually get you less bounciness

300
00:12:10,792 --> 00:12:12,713
and will land it closer to the player.

301
00:12:12,713 --> 00:12:16,195
You want to do a line of sight check.

302
00:12:16,195 --> 00:12:17,716
In theory, you'd actually want to do

303
00:12:17,716 --> 00:12:19,777
a piecewise approximation of your arc

304
00:12:19,777 --> 00:12:21,798
to make sure you're not going to hit anything up in the air.

305
00:12:22,813 --> 00:12:25,596
However, our hallways in our game were pretty much square

306
00:12:25,596 --> 00:12:27,359
and didn't have any obstructions at top,

307
00:12:27,359 --> 00:12:29,261
so we actually just kept the straight line check.

308
00:12:29,261 --> 00:12:31,624
It saved us some performance and was good enough for us,

309
00:12:31,624 --> 00:12:33,586
but your mileage may vary on that point.

310
00:12:33,586 --> 00:12:36,149
And then, just like before, we wanted

311
00:12:36,149 --> 00:12:38,612
to look at when we were doing our math, either before the shot

312
00:12:38,612 --> 00:12:39,593
or at the time of the shot.

313
00:12:41,370 --> 00:12:43,692
So this is your basic ballistic motion equation.

314
00:12:43,692 --> 00:12:46,214
If you're interested in seeing how this is all derived out,

315
00:12:46,214 --> 00:12:47,896
I'm gonna refer you to last year's excellent talk

316
00:12:47,896 --> 00:12:48,796
on building a better jump,

317
00:12:48,796 --> 00:12:51,158
where it's talked through in some depth.

318
00:12:51,158 --> 00:12:53,900
So after seeing how we solve for a linear projectile,

319
00:12:53,900 --> 00:12:55,722
you'd probably assume we just take this

320
00:12:55,722 --> 00:12:58,104
and the one-range movement equation

321
00:12:58,104 --> 00:12:59,405
and put them together and solve them.

322
00:13:00,301 --> 00:13:02,782
Except you wind up with this, which is a quartic equation

323
00:13:02,782 --> 00:13:05,784
and can be a little bit hairy to solve.

324
00:13:05,784 --> 00:13:07,464
If you're curious how these are actually solved,

325
00:13:07,464 --> 00:13:09,285
I've got some good references in the note.

326
00:13:09,285 --> 00:13:12,027
GraphicsGems1 is probably the best one.

327
00:13:12,027 --> 00:13:14,788
We actually wound up doing some approximations here

328
00:13:14,788 --> 00:13:15,208
in cheating.

329
00:13:15,208 --> 00:13:17,809
So how did we cheat, you might wonder.

330
00:13:17,809 --> 00:13:18,490
Well, we started with an arc.

331
00:13:18,490 --> 00:13:21,131
And we noted that you could actually

332
00:13:21,131 --> 00:13:26,313
break the motion of the arc into horizontal and vertical pieces.

333
00:13:27,186 --> 00:13:29,508
So we solve the horizontal one first with actually

334
00:13:29,508 --> 00:13:31,750
our good old linear projectile code, which we already had.

335
00:13:31,750 --> 00:13:34,412
The one slight difference here is we actually

336
00:13:34,412 --> 00:13:36,293
had a maximum range on this, which I'll talk about more

337
00:13:36,293 --> 00:13:38,055
here in a little bit.

338
00:13:38,055 --> 00:13:39,376
We go ahead, we solve that for t,

339
00:13:39,376 --> 00:13:41,097
we get our intersection point, and we're done.

340
00:13:41,097 --> 00:13:44,560
So we take that intersection point with our vertical motion

341
00:13:44,560 --> 00:13:46,942
and say, this is where we want it to land.

342
00:13:46,942 --> 00:13:49,204
So let's solve for our throw so that it will, in fact, land

343
00:13:49,204 --> 00:13:50,105
at our intersection point.

344
00:13:51,112 --> 00:13:53,273
So we'll start with our projectile equation

345
00:13:53,273 --> 00:13:54,293
from a couple sides back,

346
00:13:54,293 --> 00:13:56,734
and we'll break into x and y components here,

347
00:13:56,734 --> 00:13:58,375
which we're just going to solve

348
00:13:58,375 --> 00:14:00,056
at the distance of the target.

349
00:14:00,056 --> 00:14:01,876
So x is gonna be your horizontal distance,

350
00:14:01,876 --> 00:14:04,098
and y is gonna be your vertical distance.

351
00:14:04,098 --> 00:14:05,198
We wanna solve these for theta,

352
00:14:05,198 --> 00:14:08,339
which we can use to calculate our launch speeds.

353
00:14:08,339 --> 00:14:10,620
So we have two equations and two unknowns,

354
00:14:10,620 --> 00:14:12,161
and if you take these and you solve them,

355
00:14:12,161 --> 00:14:14,442
you wind up with this,

356
00:14:14,442 --> 00:14:16,983
which is actually the quadratic equation again.

357
00:14:18,320 --> 00:14:19,661
And once you solve that through for theta,

358
00:14:19,661 --> 00:14:21,643
you're going to wind up with this.

359
00:14:21,643 --> 00:14:23,604
And you can use this to get your launch angle.

360
00:14:23,604 --> 00:14:24,925
So you may have one solution, in which case you're good.

361
00:14:24,925 --> 00:14:25,746
You know what your throw angle is.

362
00:14:25,746 --> 00:14:26,066
You're done.

363
00:14:26,066 --> 00:14:29,348
If you wind up with no solution, we just

364
00:14:29,348 --> 00:14:32,011
threw it straight at the player, but we kept gravity

365
00:14:32,011 --> 00:14:33,672
on the projectile.

366
00:14:33,672 --> 00:14:38,175
We found it was important to keep gravity on there

367
00:14:38,175 --> 00:14:39,897
just for the feel of things.

368
00:14:39,897 --> 00:14:42,879
Sometimes it wouldn't land close enough,

369
00:14:42,879 --> 00:14:46,041
but frequently it was good enough that nobody ever noticed.

370
00:14:46,903 --> 00:14:49,164
And then sometimes you wind up with two solutions,

371
00:14:49,164 --> 00:14:51,906
in which case we just picked the smaller of the two.

372
00:14:51,906 --> 00:14:52,946
We felt that looked better.

373
00:14:52,946 --> 00:14:55,047
The higher of the two frequently was a pretty large arc,

374
00:14:55,047 --> 00:14:56,548
which I'll talk about again here in a minute.

375
00:14:56,548 --> 00:15:00,369
So now that we have theta, we can solve for our speeds,

376
00:15:00,369 --> 00:15:02,130
which is a pretty simple solve.

377
00:15:02,130 --> 00:15:04,151
You just multiply by the cosine of the angle

378
00:15:04,151 --> 00:15:05,812
or the sine of the angle.

379
00:15:05,812 --> 00:15:08,333
And we're driving that from just basic trig equations,

380
00:15:08,333 --> 00:15:09,393
SOH CAH TOA in this case,

381
00:15:09,393 --> 00:15:11,674
if anybody remembers back to high school algebra.

382
00:15:12,859 --> 00:15:14,680
So now that we've got these, we actually

383
00:15:14,680 --> 00:15:18,441
need a horizontal and vertical vector to throw along.

384
00:15:18,441 --> 00:15:20,482
That way it all works when you have a case like this.

385
00:15:20,482 --> 00:15:23,043
So for calculating throw vectors,

386
00:15:23,043 --> 00:15:26,564
you're going to have r, which is the vector between the launch

387
00:15:26,564 --> 00:15:29,645
point and the target, which may be non-horizontal,

388
00:15:29,645 --> 00:15:32,486
as it is here.

389
00:15:32,486 --> 00:15:34,166
All you want to do is actually just project that down

390
00:15:34,166 --> 00:15:34,786
to the ground.

391
00:15:34,786 --> 00:15:36,487
The math for that winds up being you're just

392
00:15:36,487 --> 00:15:38,648
removing the up component of your vector.

393
00:15:38,648 --> 00:15:39,388
Nice and simple.

394
00:15:39,388 --> 00:15:42,069
Then you take that component, which I'm calling r prime.

395
00:15:42,928 --> 00:15:45,009
multiplying it by your horizontal speed

396
00:15:45,009 --> 00:15:47,030
and then adding your vertical speed in.

397
00:15:47,030 --> 00:15:49,690
And you are now in the grenade throwing business.

398
00:15:49,690 --> 00:15:52,451
So one note here is that using a quadratic equation like we did

399
00:15:52,451 --> 00:15:54,872
is not a perfect solution to this problem.

400
00:15:54,872 --> 00:15:57,693
You will hit where you want to, but it may alter your impact

401
00:15:57,693 --> 00:15:58,033
time slightly.

402
00:15:58,033 --> 00:16:01,614
We found that for us and for the ranges we were fighting at,

403
00:16:01,614 --> 00:16:03,714
it didn't matter, and it still worked just fine.

404
00:16:03,714 --> 00:16:05,735
And the fact that our grenades were AOE

405
00:16:05,735 --> 00:16:07,195
didn't really hurt much either there.

406
00:16:07,195 --> 00:16:11,237
So just something to be aware of if you use this solution.

407
00:16:13,054 --> 00:16:15,896
So as far as actually calculating what our base throw

408
00:16:15,896 --> 00:16:18,818
speed was, we changed our approach between games here.

409
00:16:18,818 --> 00:16:20,800
So at first, we just had a constant speed

410
00:16:20,800 --> 00:16:22,862
that design would set for how fast these were thrown.

411
00:16:22,862 --> 00:16:25,304
However, it was kind of difficult to work with

412
00:16:25,304 --> 00:16:27,285
because they wouldn't know how much arc that would give them

413
00:16:27,285 --> 00:16:28,586
or kind of what the feel was on that.

414
00:16:28,586 --> 00:16:31,048
So we found actually giving them some values

415
00:16:31,048 --> 00:16:32,630
to play with that more just described

416
00:16:32,630 --> 00:16:35,052
how the projectile was going to behave

417
00:16:35,052 --> 00:16:37,494
gave us better looking results.

418
00:16:37,494 --> 00:16:39,916
So instead of one value, we actually gave them three.

419
00:16:40,273 --> 00:16:41,674
So we gave them a gravity multiplier.

420
00:16:41,674 --> 00:16:45,196
So a larger gravity multiplier would make the projectile heavier and feel a little bit

421
00:16:45,196 --> 00:16:46,557
weightier like a grenade.

422
00:16:46,557 --> 00:16:48,898
Making it smaller would give you more of an arc.

423
00:16:48,898 --> 00:16:53,141
We gave them an ideal launch angle, which we defaulted to 45 degrees.

424
00:16:53,141 --> 00:16:57,083
That way you'd get, since a 45 degree launch of the projectile will give you the maximum

425
00:16:57,083 --> 00:17:00,245
range for your speed, it would actually give us the lowest possible speed there.

426
00:17:00,245 --> 00:17:04,547
I don't think design ever actually changes from 45 degrees, but the option was there

427
00:17:04,547 --> 00:17:05,108
if they wanted it.

428
00:17:05,849 --> 00:17:08,110
And then, like I mentioned earlier, we had a maximum range.

429
00:17:08,110 --> 00:17:09,610
We had a little bit of a constraint

430
00:17:09,610 --> 00:17:12,491
on how far that could be, which I'll talk about here again

431
00:17:12,491 --> 00:17:13,852
in a minute.

432
00:17:13,852 --> 00:17:16,993
So solving out for our derived throw speed from that

433
00:17:16,993 --> 00:17:18,033
works just like before.

434
00:17:18,033 --> 00:17:19,794
We're splitting into x and y components, like we did.

435
00:17:19,794 --> 00:17:23,435
And then we're actually going to solve these

436
00:17:23,435 --> 00:17:25,496
for where the projectile comes back to the ground

437
00:17:25,496 --> 00:17:26,476
at the maximum range.

438
00:17:27,263 --> 00:17:29,505
And this will wind up being the speed we used earlier.

439
00:17:29,505 --> 00:17:31,886
Just a friendly reminder, all the derivations for all

440
00:17:31,886 --> 00:17:33,387
of these are going to be on the online slides

441
00:17:33,387 --> 00:17:35,428
later if you're curious how the math actually all works

442
00:17:35,428 --> 00:17:36,328
kind of beneath the covers.

443
00:17:36,328 --> 00:17:39,590
And then we're actually also going

444
00:17:39,590 --> 00:17:41,511
to use those trig identities again to calculate

445
00:17:41,511 --> 00:17:43,832
our horizontal throw speed specifically.

446
00:17:46,450 --> 00:17:49,012
So maximum range, which I've mentioned a couple of times.

447
00:17:49,012 --> 00:17:50,673
So Art and Design in our game agreed

448
00:17:50,673 --> 00:17:52,875
on a minimum ceiling height, which is to say nothing

449
00:17:52,875 --> 00:17:55,136
will ever be lower than this.

450
00:17:55,136 --> 00:17:57,318
Don't forget to take into account when you're actually

451
00:17:57,318 --> 00:17:59,019
calculating how high that is that you

452
00:17:59,019 --> 00:18:01,100
want to calculate it from the throw point of the character

453
00:18:01,100 --> 00:18:01,901
and not from the ground.

454
00:18:01,901 --> 00:18:03,962
So different characters might actually

455
00:18:03,962 --> 00:18:04,883
have a different height here.

456
00:18:04,883 --> 00:18:07,144
So we would take that height, we would plug it

457
00:18:07,144 --> 00:18:09,346
in the projectile equation, and we'd solve it through

458
00:18:09,346 --> 00:18:11,747
and wind up with our possible maximum range for that height.

459
00:18:13,930 --> 00:18:16,152
Debugging this is actually pretty similar to debugging

460
00:18:16,152 --> 00:18:17,173
linear projectiles.

461
00:18:17,173 --> 00:18:19,074
We had the same colors, did the same things.

462
00:18:19,074 --> 00:18:21,476
One thing you might notice here, though, is we actually

463
00:18:21,476 --> 00:18:23,538
had a couple of impact points, since the grenades will bounce

464
00:18:23,538 --> 00:18:23,878
around.

465
00:18:23,878 --> 00:18:25,259
That's OK, and that's expected.

466
00:18:25,259 --> 00:18:28,902
So one problem we ran across with these grenades is when the

467
00:18:28,902 --> 00:18:31,924
players got really close, you got something like this.

468
00:18:31,924 --> 00:18:34,286
Which, it's not really so good.

469
00:18:34,286 --> 00:18:36,487
You really wouldn't want to ship with this, right?

470
00:18:36,487 --> 00:18:38,889
So we wound up cheating a little bit to solve this.

471
00:18:38,889 --> 00:18:40,931
We noticed it was really only when the player got close.

472
00:18:42,029 --> 00:18:45,313
So we had a maximum angle of 70 degrees we used in our game.

473
00:18:45,313 --> 00:18:47,535
And then we had a minimum distance that we set to about

474
00:18:47,535 --> 00:18:48,356
two to three meters.

475
00:18:48,356 --> 00:18:50,919
And that actually seemed to work pretty well for us.

476
00:18:50,919 --> 00:18:52,421
The players would get close, the AIs would just do a

477
00:18:52,421 --> 00:18:54,343
straight line throw again with gravity, and it looked good.

478
00:18:54,343 --> 00:18:57,927
Later on in the game, we actually wound up making an AI

479
00:18:57,927 --> 00:19:00,209
change so that when players got close enough, the AIs

480
00:19:00,209 --> 00:19:01,891
would just break off doing range attacks.

481
00:19:03,153 --> 00:19:05,473
It wound up making this a little bit better,

482
00:19:05,473 --> 00:19:06,814
and it also wound up looking better,

483
00:19:06,814 --> 00:19:09,014
because an orc shooting you with a crossbow,

484
00:19:09,014 --> 00:19:11,895
when he's right up in your face like this,

485
00:19:11,895 --> 00:19:14,076
it just looks a little bit silly.

486
00:19:14,076 --> 00:19:15,436
It also gave players one other way

487
00:19:15,436 --> 00:19:16,416
to counterplay against range AI,

488
00:19:16,416 --> 00:19:17,857
since it could get up close to them

489
00:19:17,857 --> 00:19:19,297
and force AI to break off

490
00:19:19,297 --> 00:19:21,657
and continue running down the path.

491
00:19:21,657 --> 00:19:22,398
There's some other ways

492
00:19:22,398 --> 00:19:24,518
you can possibly cheat physics here.

493
00:19:24,518 --> 00:19:25,999
I've got some more information on these

494
00:19:25,999 --> 00:19:27,999
in the references if you're curious.

495
00:19:27,999 --> 00:19:29,199
All of them have different trade-offs.

496
00:19:31,092 --> 00:19:33,154
So ours is not the only way to solve it,

497
00:19:33,154 --> 00:19:35,276
but we were happy with the results.

498
00:19:35,276 --> 00:19:38,819
So as far as ballistic projectiles go,

499
00:19:38,819 --> 00:19:40,380
you still want to be able to miss.

500
00:19:40,380 --> 00:19:42,322
So the first project we did these,

501
00:19:42,322 --> 00:19:43,603
we actually just picked a random point

502
00:19:43,603 --> 00:19:45,044
in a circle around the player and just,

503
00:19:45,044 --> 00:19:47,826
or the predicted position of the player, sorry,

504
00:19:47,826 --> 00:19:49,127
and then we threw in there.

505
00:19:49,127 --> 00:19:50,929
Worked fine, we shipped with it, not a problem.

506
00:19:50,929 --> 00:19:53,791
We actually wound up changing a little bit on our latest game.

507
00:19:53,791 --> 00:19:56,093
The thing we noticed was players were not always

508
00:19:56,093 --> 00:19:57,574
facing towards the grenade-throwing units.

509
00:19:58,355 --> 00:20:02,496
And so they would frequently miss the fact that a grenade had just shown up and then

510
00:20:02,496 --> 00:20:04,057
they'd be like, hey, where did that damage come from?

511
00:20:04,057 --> 00:20:04,477
That's not cool.

512
00:20:04,477 --> 00:20:08,279
So what we wound up doing was a handful of things.

513
00:20:08,279 --> 00:20:10,760
So we added a few sounds of the grenade.

514
00:20:10,760 --> 00:20:12,600
There was a nice hissing sound as it flew through the air.

515
00:20:12,600 --> 00:20:16,442
It was 3D, so you'd hear it getting closer, closer, closer, closer.

516
00:20:16,442 --> 00:20:18,623
Then we beefed up the impact sounds.

517
00:20:18,623 --> 00:20:21,084
So there's a nice solid clunk when you hit the ground nearby.

518
00:20:23,277 --> 00:20:26,780
And then as you can see here, we also added a decal to show the danger zone to give the

519
00:20:26,780 --> 00:20:30,503
player notice it was there and give them a chance to run out of the way.

520
00:20:30,503 --> 00:20:34,906
As a result, we actually pulled off the missing in a circle code and just had the grenade

521
00:20:34,906 --> 00:20:36,927
throwing units always hit the player.

522
00:20:36,927 --> 00:20:40,410
We actually were a lot happier with the results of this than we were just trying to throw

523
00:20:40,410 --> 00:20:41,211
an encircle around the player.

524
00:20:41,211 --> 00:20:45,374
So when you put it all together, this is what you get for ballistic projectiles.

525
00:20:46,460 --> 00:20:48,861
So we had a derived speed on these.

526
00:20:48,861 --> 00:20:50,522
We threw them with an arc.

527
00:20:50,522 --> 00:20:51,882
We came up with an approximate solution

528
00:20:51,882 --> 00:20:53,403
that we were happy with.

529
00:20:53,403 --> 00:20:55,124
And then we solved it with a quadratic equation.

530
00:20:55,124 --> 00:20:57,685
You may need to, if you use that solution,

531
00:20:57,685 --> 00:20:59,565
you may need to compensate for high arcs

532
00:20:59,565 --> 00:21:01,326
or some other edge cases.

533
00:21:01,326 --> 00:21:04,127
As far as missing goes, you can either aim around the player

534
00:21:04,127 --> 00:21:05,848
or just make the grenades avoidable.

535
00:21:05,848 --> 00:21:08,729
So wrapping up, make sure you aim ahead of the player.

536
00:21:08,729 --> 00:21:11,190
Make sure it's fun.

537
00:21:11,190 --> 00:21:12,231
Fun is your priority here.

538
00:21:12,231 --> 00:21:13,852
It's okay to cheat as long as it's fun

539
00:21:13,852 --> 00:21:15,152
and it looks good at the end of the day.

540
00:21:16,119 --> 00:21:18,140
Make sure players have a chance to react to AIs.

541
00:21:18,140 --> 00:21:21,082
We're trying to write a fun opponent and not an aim bot.

542
00:21:21,082 --> 00:21:22,923
And then make sure design can control your core set

543
00:21:22,923 --> 00:21:26,325
of parameters, and then derive your math code and fun

544
00:21:26,325 --> 00:21:26,605
from there.

545
00:21:26,605 --> 00:21:26,965
Any questions?

546
00:21:26,965 --> 00:21:29,967
If you have questions, by the way,

547
00:21:29,967 --> 00:21:32,208
please step up to the mic.

