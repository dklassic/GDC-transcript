1
00:00:10,531 --> 00:00:14,674
Hello everybody, today I'm gonna talk about the theory

2
00:00:14,714 --> 00:00:17,836
and practice of cameras in side scrollers

3
00:00:18,116 --> 00:00:21,278
and 2D games in general.

4
00:00:21,959 --> 00:00:24,901
Side scrollers is just a private case

5
00:00:24,941 --> 00:00:26,562
of what I'm gonna talk about.

6
00:00:26,582 --> 00:00:30,465
There are a lot of parallels to 3D games

7
00:00:30,545 --> 00:00:34,288
but we're gonna focus on what's interesting to me

8
00:00:34,708 --> 00:00:36,249
specifically for the game that I'm working on

9
00:00:36,289 --> 00:00:37,770
which is Mushroom 11.

10
00:00:38,875 --> 00:00:41,818
I've been working on this game for the past three years

11
00:00:42,418 --> 00:00:44,399
and still not ready.

12
00:00:45,460 --> 00:00:47,962
As you can see, there are quite a lot of issues

13
00:00:48,002 --> 00:00:51,445
with the camera that needs to be tackled,

14
00:00:52,425 --> 00:00:55,508
which kind of threw me into this journey

15
00:00:55,528 --> 00:00:58,109
of trying to figure out how to do proper camera systems.

16
00:00:59,250 --> 00:01:01,412
And the result is what you see here,

17
00:01:01,432 --> 00:01:03,673
and I'll talk a little bit about that later on.

18
00:01:06,339 --> 00:01:09,541
Scrolling, when we have more to show

19
00:01:09,601 --> 00:01:12,503
than what the screen supports, we'll obviously

20
00:01:12,563 --> 00:01:15,445
need to leave some things out of the screen.

21
00:01:15,986 --> 00:01:19,088
But when we start moving the screen,

22
00:01:19,489 --> 00:01:23,972
there are some neural aspects that we need to figure out.

23
00:01:25,673 --> 00:01:27,835
So first of all, let's talk a little bit

24
00:01:27,855 --> 00:01:29,896
about the neural aspect of scrolling.

25
00:01:31,137 --> 00:01:32,839
We view the image.

26
00:01:33,889 --> 00:01:39,758
through our eyeball and the image is presented on a set of cones and receptors in the back

27
00:01:39,778 --> 00:01:44,104
of our eyeball called the fovea centralis, the parfovea and the perifovea.

28
00:01:45,126 --> 00:01:46,988
The centralis is in charge of the...

29
00:01:49,134 --> 00:01:52,036
center of the image, gives a very sharp image,

30
00:01:52,076 --> 00:01:54,758
but kind of low frames per second, so to speak.

31
00:01:55,558 --> 00:01:57,200
There's a secondary belt, and then the third

32
00:01:57,420 --> 00:01:59,421
and biggest belt with the most cones

33
00:02:01,003 --> 00:02:04,225
is the periphobia, responsible for the peripheral vision.

34
00:02:04,805 --> 00:02:10,370
It has a very low density, but great depth of color.

35
00:02:11,270 --> 00:02:12,972
But in order to get all this information

36
00:02:13,292 --> 00:02:17,075
from such a huge set of receptor,

37
00:02:17,818 --> 00:02:21,980
it actually compresses the images into patterns.

38
00:02:22,100 --> 00:02:25,062
And the patterns are visual textural patterns

39
00:02:25,142 --> 00:02:28,644
as well as motion patterns and changes in velocity.

40
00:02:29,745 --> 00:02:35,629
That information is fed like other pieces of signals

41
00:02:35,689 --> 00:02:38,070
from the brain through our thalamus.

42
00:02:38,490 --> 00:02:43,193
And then it's sent to the visual cortex as well as the amygdala.

43
00:02:43,233 --> 00:02:44,974
The amygdala is the part of our brain

44
00:02:44,994 --> 00:02:45,815
that's in charge of...

45
00:02:46,775 --> 00:02:52,739
emotional reactions and inhibition of those reactions of fear and anxiety, what we call

46
00:02:52,759 --> 00:02:53,560
the fight or flight.

47
00:02:54,820 --> 00:03:07,728
By teaching our brain to ignore those signals, eventually our amygdala knows to ignore those

48
00:03:07,768 --> 00:03:11,450
signals and just let the visual cortex take charge.

49
00:03:12,962 --> 00:03:16,124
And when we're talking about visual patterns

50
00:03:16,304 --> 00:03:18,085
in our peripheral vision, it could be something

51
00:03:18,105 --> 00:03:20,886
that just reminds us of something scary that we've seen

52
00:03:21,287 --> 00:03:22,247
in the corner of our eye,

53
00:03:22,547 --> 00:03:24,808
could be something that moves really fast,

54
00:03:26,209 --> 00:03:28,730
or it can also be the entire image,

55
00:03:28,810 --> 00:03:32,012
which is the background of the screen, moving really fast.

56
00:03:33,793 --> 00:03:36,094
On top of that, we have what we call the vestibular system,

57
00:03:36,694 --> 00:03:41,317
which is our internal spatial orientation balancing system,

58
00:03:41,417 --> 00:03:41,997
allowing us to.

59
00:03:42,417 --> 00:03:43,417
basically stand straight.

60
00:03:43,897 --> 00:03:47,359
And when this thing is coupled with the vision,

61
00:03:48,279 --> 00:03:52,401
it basically gives us a full orientation of where we are,

62
00:03:53,401 --> 00:03:55,022
how to walk and whatnot.

63
00:03:56,703 --> 00:03:58,944
Now, the amount of information is given to our,

64
00:03:58,964 --> 00:04:03,766
sent to our brain, we try to minimize that information.

65
00:04:04,880 --> 00:04:08,122
In fact, even if you try to move your head really fast,

66
00:04:08,142 --> 00:04:10,263
you'll see that your eyes will use

67
00:04:10,363 --> 00:04:12,804
what we call the vestibular ocular reflex,

68
00:04:12,904 --> 00:04:17,146
trying to minimize the amount of changes in our view.

69
00:04:17,506 --> 00:04:21,128
We are not wired to see the image move really fast.

70
00:04:22,828 --> 00:04:29,311
In fact, when we have any conflicting sensory signals

71
00:04:29,371 --> 00:04:32,733
between our eyes and our vestibular systems,

72
00:04:33,570 --> 00:04:37,191
then it may lead to nausea and discomfort.

73
00:04:38,712 --> 00:04:41,593
Of course, this, everybody knows it when they,

74
00:04:41,733 --> 00:04:43,874
well, some people are very sensitive to reading

75
00:04:43,914 --> 00:04:47,695
in a moving car, and this is even more dramatic

76
00:04:48,535 --> 00:04:52,317
when playing first person games or virtual reality,

77
00:04:52,397 --> 00:04:54,918
obviously this is much more dramatic.

78
00:04:56,398 --> 00:04:56,558
So.

79
00:04:57,834 --> 00:05:00,275
How do we properly scroll?

80
00:05:01,075 --> 00:05:03,336
I split it into three main groups.

81
00:05:03,356 --> 00:05:04,996
Tension, interaction, and comfort.

82
00:05:05,457 --> 00:05:07,537
Attention is making sure that

83
00:05:08,918 --> 00:05:12,239
all the necessary gameplay elements are in the frame.

84
00:05:13,119 --> 00:05:16,060
Interaction, how do we make the cycle

85
00:05:16,120 --> 00:05:18,801
that we teach the amygdala to know

86
00:05:18,841 --> 00:05:20,501
that those changes are predictable

87
00:05:20,561 --> 00:05:22,882
and tightly bound to the controls.

88
00:05:23,542 --> 00:05:25,903
And those changes, as they are made,

89
00:05:25,943 --> 00:05:26,823
and they have to be made,

90
00:05:27,475 --> 00:05:28,716
they need to be easy on the eyes.

91
00:05:30,076 --> 00:05:33,278
Those, of course, are all part of the same equation.

92
00:05:33,898 --> 00:05:35,019
They all fit into each other.

93
00:05:35,659 --> 00:05:36,920
So throughout this presentation,

94
00:05:36,940 --> 00:05:40,822
I'm gonna go through my own personal nostalgia

95
00:05:41,582 --> 00:05:43,744
of games all the way from the 80s,

96
00:05:44,344 --> 00:05:46,585
how they started working with scrolling,

97
00:05:47,025 --> 00:05:50,327
as well as the indie games of today,

98
00:05:50,347 --> 00:05:55,770
where all the innovation and the care and attention

99
00:05:55,810 --> 00:05:56,571
that you can see in.

100
00:05:57,488 --> 00:05:58,489
Only in indie games, really.

101
00:05:59,829 --> 00:06:01,330
So, how do you scroll?

102
00:06:01,631 --> 00:06:04,412
First of all, obviously, you need to follow your character.

103
00:06:05,493 --> 00:06:07,855
So, if we go back to what's considered

104
00:06:07,895 --> 00:06:09,696
the first real scroller,

105
00:06:10,356 --> 00:06:13,378
it's a game called Rally X, from 1980.

106
00:06:13,478 --> 00:06:16,720
It did the only thing that you could really do,

107
00:06:17,100 --> 00:06:19,402
which is follow the character.

108
00:06:19,622 --> 00:06:20,903
I call it position locking.

109
00:06:21,523 --> 00:06:23,384
The camera moves with the character.

110
00:06:25,435 --> 00:06:27,357
interesting here except for the fact that scrolling

111
00:06:27,437 --> 00:06:30,318
at the time was really, you know,

112
00:06:31,599 --> 00:06:33,320
difficult feat to achieve.

113
00:06:33,600 --> 00:06:36,122
There were issues with the fact that the resolution

114
00:06:36,162 --> 00:06:39,284
was really low, the CPU was very slow,

115
00:06:39,344 --> 00:06:42,646
there were segmentation issues, you couldn't display

116
00:06:42,686 --> 00:06:45,647
more than a few sprites per line, bunch of issues.

117
00:06:45,707 --> 00:06:48,109
So this technically is a huge breakthrough.

118
00:06:48,889 --> 00:06:50,811
By the way, you'll see that throughout this presentation

119
00:06:51,031 --> 00:06:52,472
I'll present my own terminology.

120
00:06:53,476 --> 00:06:54,897
just from my own reference,

121
00:06:55,718 --> 00:06:57,179
and I'll definitely post it later.

122
00:06:59,181 --> 00:07:01,823
Moving on, the game called Kung Fu Master

123
00:07:02,003 --> 00:07:03,605
used the same idea, only horizontally.

124
00:07:03,945 --> 00:07:05,486
You just lock to the character.

125
00:07:05,847 --> 00:07:10,591
As the level ends, you'd snap to the end of the level.

126
00:07:10,651 --> 00:07:12,352
Obviously, this is so obvious

127
00:07:12,392 --> 00:07:14,654
that I'm not gonna really talk about edge snapping.

128
00:07:14,694 --> 00:07:18,097
I just wanted to, you know, just mention it quickly.

129
00:07:19,622 --> 00:07:22,626
Just a quick shout out to Takashi Nishiyama,

130
00:07:22,666 --> 00:07:23,687
the guy who made this game.

131
00:07:25,129 --> 00:07:27,272
He made this game between making Moon Patrol

132
00:07:27,452 --> 00:07:30,936
two years before and Street Fighter 1 three years after.

133
00:07:32,363 --> 00:07:35,066
So this technology still works very well today.

134
00:07:35,807 --> 00:07:38,750
Some games really benefit from this kind of behavior,

135
00:07:38,770 --> 00:07:40,952
especially when you have a smaller character,

136
00:07:40,972 --> 00:07:42,034
it doesn't move really fast.

137
00:07:42,634 --> 00:07:47,079
You need to see everything left and right, up and down.

138
00:07:47,259 --> 00:07:48,600
Terraria is the perfect,

139
00:07:49,381 --> 00:07:53,165
this position locking is the perfect technology to use here.

140
00:07:55,818 --> 00:07:59,180
How do we curb camera motion in order to

141
00:07:59,580 --> 00:08:01,841
eliminate those unpredictable bumps?

142
00:08:04,082 --> 00:08:07,464
If we go back to 1981, there's a game called Jump Bug

143
00:08:07,624 --> 00:08:10,866
that is still considered the first platform.

144
00:08:12,251 --> 00:08:14,972
It introduced a system that I call camera window,

145
00:08:15,192 --> 00:08:18,313
which allows the player to move within that window

146
00:08:18,533 --> 00:08:20,994
without moving the camera, without scrolling.

147
00:08:21,274 --> 00:08:24,176
Again, scrolling was a really problematic thing to do

148
00:08:24,776 --> 00:08:28,137
with the CPU and the resolution.

149
00:08:28,577 --> 00:08:31,558
So you would move freely, but as you touch the edge

150
00:08:31,598 --> 00:08:34,319
of the window, it will start pulling the camera with it.

151
00:08:36,840 --> 00:08:37,661
So this system is...

152
00:08:39,495 --> 00:08:41,216
Pretty problematic if you think about the fact

153
00:08:41,256 --> 00:08:43,077
that you're moving away from that window,

154
00:08:43,137 --> 00:08:45,939
which leaves you very little room to see what's ahead

155
00:08:46,260 --> 00:08:48,822
and what's up, and the exit of the level is up.

156
00:08:50,323 --> 00:08:52,384
One way you could do it is like they did

157
00:08:52,424 --> 00:08:55,086
with Rust and Saga, one of my favorite games of the 80s.

158
00:08:56,047 --> 00:08:58,589
They just placed the window off center,

159
00:08:58,609 --> 00:09:00,951
allowing for 50% view forward and downward.

160
00:09:06,163 --> 00:09:08,145
This is great, but the problem is that

161
00:09:08,185 --> 00:09:10,707
when you start backtracking, or if you jump

162
00:09:10,767 --> 00:09:12,268
and end up in the middle of the window,

163
00:09:13,148 --> 00:09:14,569
you'll have even less room to see

164
00:09:14,610 --> 00:09:16,771
what's coming ahead or above.

165
00:09:18,712 --> 00:09:19,933
This system is still used.

166
00:09:20,954 --> 00:09:24,096
In Fez, it's used perfectly.

167
00:09:24,216 --> 00:09:27,739
In fact, the system is maintained,

168
00:09:28,159 --> 00:09:30,201
the horizontal window is maintained

169
00:09:30,241 --> 00:09:31,922
even throughout dimension shifts.

170
00:09:31,982 --> 00:09:34,424
And we're gonna talk a little more about this game

171
00:09:34,884 --> 00:09:35,865
and the camera system here.

172
00:09:37,920 --> 00:09:40,602
So we talked about, when we showed Raston Saga,

173
00:09:40,622 --> 00:09:42,843
we showed that the character could end up

174
00:09:43,023 --> 00:09:44,024
in the middle of the window.

175
00:09:44,204 --> 00:09:48,426
How do you snap it so you center the player

176
00:09:49,266 --> 00:09:50,387
back into the center of the window?

177
00:09:52,028 --> 00:09:54,269
My favorite game of all time, if I may say,

178
00:09:54,289 --> 00:09:55,230
is Shinobi from 1987.

179
00:09:55,330 --> 00:09:59,632
It used a horizontal locking system,

180
00:10:01,053 --> 00:10:04,995
but vertically it had a really long window.

181
00:10:05,597 --> 00:10:07,678
because it fit the game perfectly,

182
00:10:08,739 --> 00:10:10,360
the player is pretty big on the screen,

183
00:10:10,380 --> 00:10:11,680
the jumps are really high.

184
00:10:11,860 --> 00:10:15,322
So they tried to keep the window as high as possible.

185
00:10:15,362 --> 00:10:17,723
The problem is that the player would potentially

186
00:10:18,043 --> 00:10:20,444
be off center really quickly.

187
00:10:20,544 --> 00:10:22,325
So what they would do is every frame

188
00:10:22,705 --> 00:10:24,406
when the player was off center,

189
00:10:25,247 --> 00:10:29,589
they would start slowly to focus back onto the player,

190
00:10:30,149 --> 00:10:32,530
keeping you always in check.

191
00:10:35,651 --> 00:10:37,273
And we're gonna talk a lot about the work of

192
00:10:37,313 --> 00:10:41,837
Shigeru Miyamoto, but going forward a little bit,

193
00:10:42,097 --> 00:10:45,600
Super Mario World was the first one that I noticed

194
00:10:45,620 --> 00:10:48,182
that introduced platform snapping.

195
00:10:48,742 --> 00:10:51,565
And in this game, they really tried very hard to

196
00:10:53,907 --> 00:10:56,949
maintain the minimum amount of camera movement.

197
00:10:57,510 --> 00:11:00,532
And in this case, the window is the entire screen.

198
00:11:00,572 --> 00:11:01,913
The camera window is the entire screen.

199
00:11:01,953 --> 00:11:03,595
It will only move when you push the,

200
00:11:03,988 --> 00:11:07,330
edge of the screen, unless you land on a platform

201
00:11:07,450 --> 00:11:09,030
where it would quickly snap.

202
00:11:10,611 --> 00:11:12,832
I think this is obviously a brilliant idea.

203
00:11:13,333 --> 00:11:18,075
Some find the landing and the snapping a little abrupt,

204
00:11:19,256 --> 00:11:21,517
but that's the first one that I noticed that used it.

205
00:11:22,838 --> 00:11:26,600
You can see a more regulated version of this in Rayman

206
00:11:26,640 --> 00:11:28,040
and throughout the Rayman franchise.

207
00:11:29,776 --> 00:11:31,717
You still see this today.

208
00:11:31,737 --> 00:11:36,799
Awesome and Outs from 2012 use the same technique.

209
00:11:37,520 --> 00:11:40,301
Obviously there's always a problem when you have characters

210
00:11:40,461 --> 00:11:43,123
that don't land on platforms.

211
00:11:43,483 --> 00:11:47,745
So like the jet pack character would be pre-snapped,

212
00:11:48,706 --> 00:11:50,607
basically keeping it position locked

213
00:11:50,947 --> 00:11:52,868
both horizontally and vertically.

214
00:11:55,759 --> 00:11:56,979
the motion that we have to do,

215
00:11:57,059 --> 00:11:58,360
either horizontally or vertically,

216
00:11:58,480 --> 00:12:00,260
or when we touch the edge of the window,

217
00:12:00,300 --> 00:12:04,381
how do we smooth that motion?

218
00:12:04,401 --> 00:12:07,602
And may I remind you that in the 80s,

219
00:12:08,642 --> 00:12:10,903
we had a very low resolution.

220
00:12:10,943 --> 00:12:13,563
We're talking about 256 by 240 at the NES.

221
00:12:15,324 --> 00:12:16,984
So the pixels there were huge.

222
00:12:17,204 --> 00:12:19,405
Today, when we're talking about pixel art,

223
00:12:19,605 --> 00:12:22,425
we can, we need to remember that,

224
00:12:22,835 --> 00:12:24,916
The pixels that we use actually contain

225
00:12:25,037 --> 00:12:27,478
a lot of screen pixels, and that's a luxury

226
00:12:27,518 --> 00:12:29,879
that people in the 80s didn't really have.

227
00:12:31,640 --> 00:12:34,041
So, for example, if you look at Pac-Land from 84,

228
00:12:34,862 --> 00:12:36,183
which this is actually considered

229
00:12:36,323 --> 00:12:38,184
as their first real platformer,

230
00:12:39,704 --> 00:12:41,505
it didn't really do anything special

231
00:12:41,626 --> 00:12:43,106
with regard to smoothing the window.

232
00:12:43,186 --> 00:12:45,127
It just locked to the position of the player,

233
00:12:45,167 --> 00:12:48,489
but the player actually created some sort of pseudo physics,

234
00:12:48,669 --> 00:12:52,712
and that physics was smoothing the camera.

235
00:12:53,613 --> 00:12:54,033
on its own.

236
00:12:54,994 --> 00:12:56,475
When we're talking about pseudo physics,

237
00:12:56,575 --> 00:12:59,478
obviously, even today everything is pseudo physics,

238
00:12:59,538 --> 00:13:01,480
but in this case, we didn't have,

239
00:13:01,500 --> 00:13:05,363
they didn't have damping and friction,

240
00:13:05,423 --> 00:13:10,328
so we're talking about accelerate from one pixel per frame,

241
00:13:10,428 --> 00:13:12,610
two pixels, three pixels, and so on,

242
00:13:12,630 --> 00:13:14,231
then slowing it down back again.

243
00:13:17,050 --> 00:13:20,492
Now I'm gonna do a quick shout out to Chigero Miyamoto.

244
00:13:20,872 --> 00:13:25,534
And remind us his first early experiments in scrolling.

245
00:13:25,574 --> 00:13:27,135
In 1984, he made a couple of games

246
00:13:27,175 --> 00:13:28,956
that introduced scrolling in some way.

247
00:13:30,017 --> 00:13:31,817
One of them was Excitebike,

248
00:13:32,118 --> 00:13:36,540
which the scrolling was kind of the background of the game.

249
00:13:36,560 --> 00:13:37,680
It didn't really have a lot of,

250
00:13:38,721 --> 00:13:40,402
the game was not about scrolling.

251
00:13:40,442 --> 00:13:42,363
You didn't really have a lot of control with scrolling.

252
00:13:43,503 --> 00:13:44,824
Devil World, from the same year, had...

253
00:13:46,382 --> 00:13:47,523
everything to do with scrolling.

254
00:13:47,563 --> 00:13:50,584
In fact, the game, the devil, was controlling the scroll

255
00:13:51,064 --> 00:13:55,366
in this really weird Pac-Man clone.

256
00:13:55,386 --> 00:13:59,268
And this game was, I don't know if it's considered

257
00:13:59,428 --> 00:14:01,008
one of the best work of Miyamoto.

258
00:14:01,909 --> 00:14:06,110
In fact, due to some weird religious iconography,

259
00:14:06,150 --> 00:14:07,811
this was denied release in North America.

260
00:14:08,191 --> 00:14:12,133
And the reason why I'm reminding this really quickly is that

261
00:14:13,173 --> 00:14:14,954
I don't know, more in a philosophical way,

262
00:14:15,634 --> 00:14:17,335
if you look at some of the early works

263
00:14:17,395 --> 00:14:19,075
of the geniuses of today,

264
00:14:19,295 --> 00:14:21,716
seeing some of their more mediocre work

265
00:14:21,956 --> 00:14:24,817
is kind of encouraging to everybody.

266
00:14:27,038 --> 00:14:29,978
And I do that a lot sometimes when I feel down.

267
00:14:31,359 --> 00:14:34,600
Maybe the biggest accomplishment,

268
00:14:34,680 --> 00:14:37,681
and this is completely my own conspiracy theory,

269
00:14:37,761 --> 00:14:40,962
is that I believe that there's some

270
00:14:41,582 --> 00:14:42,902
cross-reference to bubble bubble.

271
00:14:43,320 --> 00:14:46,322
from this, but I'm not sure, it's not official.

272
00:14:46,702 --> 00:14:48,683
All right, so moving on to 1985,

273
00:14:50,964 --> 00:14:54,686
Miyamoto actually did his first true experiment

274
00:14:54,727 --> 00:14:58,189
in scrolling, and in Super Mario World,

275
00:14:58,529 --> 00:15:00,490
the character was moving really, really fast.

276
00:15:00,530 --> 00:15:03,552
And if you think about it, this is a one-sided window.

277
00:15:03,712 --> 00:15:06,313
You could backtrack for the half of the screen.

278
00:15:07,154 --> 00:15:10,396
And then when you would go back and push against that window

279
00:15:11,480 --> 00:15:15,301
it would move from zero to maximum speed in one frame.

280
00:15:15,521 --> 00:15:17,262
And that would feel very uncomfortable.

281
00:15:19,023 --> 00:15:22,184
What he did is something I call speed up push zone.

282
00:15:22,384 --> 00:15:25,906
So it would, as it hit a certain point on the screen,

283
00:15:26,046 --> 00:15:27,326
it would start spinning it up.

284
00:15:27,987 --> 00:15:31,428
So when Mario hits that anchor point,

285
00:15:32,048 --> 00:15:33,469
the camera's already in full speed.

286
00:15:34,489 --> 00:15:38,131
And this thing, I actually didn't notice it for 30 years

287
00:15:38,331 --> 00:15:40,972
because it's so brilliant and so clean.

288
00:15:42,396 --> 00:15:46,538
And I think this is just a genius solution.

289
00:15:47,939 --> 00:15:50,660
Another solution of the same idea,

290
00:15:50,760 --> 00:15:53,441
but kind of the opposite, is what they did with Metroid.

291
00:15:53,741 --> 00:15:56,942
They had either a horizontal or a vertical window,

292
00:15:56,982 --> 00:15:59,903
depends on the level, and it allowed the player

293
00:15:59,923 --> 00:16:03,745
to step out of that window and then start catching up

294
00:16:03,825 --> 00:16:05,085
with the speed of that window.

295
00:16:06,306 --> 00:16:08,407
So the character would always be a little bit,

296
00:16:08,427 --> 00:16:10,368
a couple of pixels, depending on the speed.

297
00:16:11,784 --> 00:16:13,585
out of that window, but that worked really well.

298
00:16:14,546 --> 00:16:16,587
It didn't leave a lot of room to see what's ahead,

299
00:16:16,667 --> 00:16:19,189
but that's the problem with camera window

300
00:16:19,369 --> 00:16:20,029
in the first place.

301
00:16:21,850 --> 00:16:23,491
When you're talking about smoothing, of course,

302
00:16:23,831 --> 00:16:27,133
when there were more pixels to play with

303
00:16:27,673 --> 00:16:30,755
and use of floating point became a little more easy,

304
00:16:31,476 --> 00:16:32,736
you can start doing LURPing,

305
00:16:32,996 --> 00:16:35,158
which stands for linear interpolation.

306
00:16:35,558 --> 00:16:37,379
The idea is that you would, in every frame,

307
00:16:37,419 --> 00:16:39,460
you would reduce the distance.

308
00:16:40,614 --> 00:16:43,834
between the camera and your character by a certain factor.

309
00:16:44,975 --> 00:16:46,735
They did it with Donkey Kong Country.

310
00:16:48,215 --> 00:16:49,756
That's the first game that I've noticed

311
00:16:49,796 --> 00:16:54,517
that they did it properly, but they do it ever since.

312
00:16:55,017 --> 00:16:58,097
You can see it in almost every game of today.

313
00:16:58,317 --> 00:16:59,238
Super Meat Boy uses it.

314
00:16:59,598 --> 00:17:05,719
It's one of the best ways of easing the camera motion.

315
00:17:06,199 --> 00:17:08,940
If you think about it, lerping is ease out.

316
00:17:09,753 --> 00:17:11,935
There's another thing which is ease in out,

317
00:17:12,175 --> 00:17:13,656
if you know that term.

318
00:17:13,816 --> 00:17:16,338
The idea is that you ease the camera into motion

319
00:17:16,418 --> 00:17:17,619
and then out of motion again,

320
00:17:18,379 --> 00:17:21,341
by applying some actual velocity to the camera itself,

321
00:17:21,721 --> 00:17:24,664
using for example, a smooth damp function.

322
00:17:25,364 --> 00:17:27,726
It's used in the amazing Never Alone game from 2014,

323
00:17:27,866 --> 00:17:32,509
and many other games of today.

324
00:17:32,549 --> 00:17:36,212
It works very well when you need to have some drama

325
00:17:36,232 --> 00:17:38,413
and narrative and smoothness that,

326
00:17:39,442 --> 00:17:40,783
some games really benefit from.

327
00:17:42,444 --> 00:17:44,486
And if we go back to pixel art,

328
00:17:44,926 --> 00:17:48,069
what they did with, they're doing with Hyper Light Drifter,

329
00:17:48,970 --> 00:17:51,071
coming out soon, hopefully.

330
00:17:52,633 --> 00:17:56,996
They actually have true pixel perfect art

331
00:17:57,797 --> 00:17:59,418
that they present on a canvas,

332
00:17:59,919 --> 00:18:05,003
and that canvas is moved on the true screen pixels.

333
00:18:06,321 --> 00:18:10,002
you would still have the pixel perfect big game pixels,

334
00:18:10,362 --> 00:18:11,922
but the scrolling is the only thing

335
00:18:11,962 --> 00:18:14,263
that breaks that pixel perfect behavior

336
00:18:14,343 --> 00:18:16,404
by applying the scrolling on,

337
00:18:17,564 --> 00:18:19,164
true scrolling on the canvas.

338
00:18:21,485 --> 00:18:24,226
So framing, how do we make sure

339
00:18:24,326 --> 00:18:27,946
that the player sees everything they need to see?

340
00:18:29,721 --> 00:18:31,601
So, auto-scrolling, as you can see,

341
00:18:31,641 --> 00:18:34,603
is not exactly part of this presentation

342
00:18:34,643 --> 00:18:37,324
because I feel like, well, if you don't have control

343
00:18:37,364 --> 00:18:40,185
of the scrolling, it's a different kind of question.

344
00:18:40,525 --> 00:18:42,505
But what they did with Scramble,

345
00:18:42,526 --> 00:18:46,487
which is also considered one of the first scrollers,

346
00:18:48,048 --> 00:18:51,089
it gives you a good sense of what the player would do

347
00:18:51,249 --> 00:18:55,470
if they had true control, full control over

348
00:18:55,590 --> 00:18:56,871
where they want the player to be.

349
00:18:57,238 --> 00:18:59,880
you have the entire screen, you have things coming at you,

350
00:19:00,120 --> 00:19:03,082
you wanna be as far away from the edge as possible,

351
00:19:03,282 --> 00:19:05,523
but still leave a little bit of room behind you

352
00:19:05,543 --> 00:19:07,324
to make sure that nothing creeps up.

353
00:19:08,885 --> 00:19:10,747
And that's more or less what they did with Pac-Land.

354
00:19:11,367 --> 00:19:14,109
Instead of locking it to the center like they did

355
00:19:14,209 --> 00:19:17,571
with other game like Kung Fu Master,

356
00:19:18,071 --> 00:19:21,954
they put the anchor point a little bit off center

357
00:19:21,974 --> 00:19:25,096
because that's the principal direction of the...

358
00:19:25,746 --> 00:19:26,286
of the player.

359
00:19:26,946 --> 00:19:28,647
You would still be able to go back,

360
00:19:28,807 --> 00:19:29,708
you don't do that a lot,

361
00:19:29,748 --> 00:19:31,168
but you still have a little bit of room.

362
00:19:32,249 --> 00:19:34,650
The idea in general is that the player

363
00:19:34,670 --> 00:19:36,131
would want to go to the center,

364
00:19:36,151 --> 00:19:38,952
and you'll see that throughout the presentation in general.

365
00:19:39,152 --> 00:19:41,553
You always want to aim towards the center.

366
00:19:43,754 --> 00:19:46,095
Another way, going back to 1981,

367
00:19:46,915 --> 00:19:48,416
is what they did with Defender.

368
00:19:48,876 --> 00:19:51,017
They had what I call the dual forward focus.

369
00:19:52,178 --> 00:19:55,139
You had forward focus that's based on where you're heading,

370
00:19:55,239 --> 00:19:55,599
as it...

371
00:19:56,141 --> 00:19:58,922
As soon as you switch, it will immediately start

372
00:19:59,062 --> 00:20:00,763
snapping toward the other anchor point.

373
00:20:01,403 --> 00:20:03,184
This game is way ahead of its time.

374
00:20:04,285 --> 00:20:06,706
It took a lot of years until they actually

375
00:20:07,166 --> 00:20:08,827
figured out how to do this properly.

376
00:20:09,447 --> 00:20:11,648
This worked really well even back then.

377
00:20:15,089 --> 00:20:16,430
Okay, one second.

378
00:20:20,192 --> 00:20:21,672
Technical difficulties.

379
00:20:23,333 --> 00:20:23,853
Sorry about that.

380
00:20:24,876 --> 00:20:25,997
I'm running off Google Docs.

381
00:20:34,806 --> 00:20:35,167
Nightmare?

382
00:20:41,713 --> 00:20:42,114
Okay.

383
00:20:46,178 --> 00:20:47,159
Alright, let's see if we can do this.

384
00:20:52,332 --> 00:20:52,872
Bear with me.

385
00:20:52,892 --> 00:20:54,092
Alright, so.

386
00:20:54,112 --> 00:20:57,373
It's okay?

387
00:20:58,173 --> 00:20:58,473
For now?

388
00:21:00,533 --> 00:21:02,994
Trying to connect, okay, cool.

389
00:21:03,474 --> 00:21:06,395
So, going forward a decade or so,

390
00:21:08,735 --> 00:21:11,656
Bonanza Brothers is another type of implementation

391
00:21:11,676 --> 00:21:16,277
of the same idea, but unlike what they did with Defender

392
00:21:16,357 --> 00:21:17,617
from 1981, they, instead of having

393
00:21:22,237 --> 00:21:24,738
the switch abrupt and immediate,

394
00:21:25,099 --> 00:21:28,180
they actually made the change based on your walking speed.

395
00:21:28,400 --> 00:21:30,201
If you look at the character at the bottom,

396
00:21:30,601 --> 00:21:33,522
you would see that the switch between the anchors

397
00:21:33,702 --> 00:21:36,064
would be based on the speed of your character.

398
00:21:36,164 --> 00:21:37,604
And you wouldn't even notice it when you play,

399
00:21:38,185 --> 00:21:40,446
unless you start placing some lines over there.

400
00:21:42,406 --> 00:21:44,187
So, going back to Miyamoto,

401
00:21:48,005 --> 00:21:52,027
Again, I'm gonna talk a lot about this Super Mario World.

402
00:21:52,087 --> 00:21:54,287
It had a lot of interesting ideas,

403
00:21:54,307 --> 00:21:55,788
but this is my favorite one.

404
00:21:56,548 --> 00:21:58,789
It also had a dual threshold,

405
00:22:00,509 --> 00:22:02,850
but the true genius here is that

406
00:22:03,030 --> 00:22:05,551
it actually let the player backtrack a little bit

407
00:22:05,591 --> 00:22:08,672
before switching to the other anchor.

408
00:22:09,372 --> 00:22:10,813
And this is perfect for this kind of game

409
00:22:10,833 --> 00:22:13,215
because this game actually allowed,

410
00:22:13,236 --> 00:22:17,559
kind of encouraged the player to do all sorts

411
00:22:17,660 --> 00:22:19,221
of back and forth motion.

412
00:22:20,162 --> 00:22:23,685
So instead of every time that you switch back and forth,

413
00:22:24,126 --> 00:22:25,447
it would switch to the other,

414
00:22:25,867 --> 00:22:28,189
or start moving to the other anchor,

415
00:22:28,490 --> 00:22:32,033
in this case it actually let you walk a significant amount

416
00:22:32,153 --> 00:22:35,436
before hitting, switching to the other anchor.

417
00:22:36,658 --> 00:22:39,979
A game that does this today, not exactly this,

418
00:22:40,319 --> 00:22:42,200
it's closer to what Bonanza Brother actually did,

419
00:22:42,480 --> 00:22:44,281
is Cave Story, well it's not exactly today.

420
00:22:46,442 --> 00:22:50,603
You can see that this game requires a lot of forward view.

421
00:22:50,963 --> 00:22:52,724
You have a lot of things coming at you,

422
00:22:53,344 --> 00:22:57,526
and you would really require a vast,

423
00:22:57,686 --> 00:22:59,426
clear view of what's coming ahead.

424
00:23:00,507 --> 00:23:01,827
They did more or less the same idea.

425
00:23:01,867 --> 00:23:04,468
They had two anchors, and as soon as you would switch,

426
00:23:04,925 --> 00:23:08,769
it will start slowly walk, go to the other anchor

427
00:23:09,169 --> 00:23:12,693
based on your walking speed.

428
00:23:18,972 --> 00:23:23,354
Another thing that I noticed is what I call target focus.

429
00:23:23,394 --> 00:23:24,914
And the reason why I call it target focus

430
00:23:24,954 --> 00:23:27,535
is because it actually maps to the actual target

431
00:23:27,795 --> 00:23:28,375
of the player.

432
00:23:28,875 --> 00:23:30,136
How do we know what the target is,

433
00:23:30,536 --> 00:23:32,837
is where the player really wants to go.

434
00:23:33,837 --> 00:23:36,578
What they did with Jazz Jackrabbit 2 from Epic,

435
00:23:37,338 --> 00:23:37,938
back in the day,

436
00:23:39,759 --> 00:23:43,780
they moved the camera based on what the player did.

437
00:23:46,015 --> 00:23:48,597
So if the player pushed the stick left,

438
00:23:49,037 --> 00:23:50,338
they would move the camera left.

439
00:23:50,858 --> 00:23:53,660
If they did it right, they would move slowly right

440
00:23:53,800 --> 00:23:55,601
until a certain distance.

441
00:23:56,261 --> 00:23:59,263
This is pretty brilliant because it really maps perfectly

442
00:23:59,303 --> 00:24:00,304
to what the player wants to do,

443
00:24:00,364 --> 00:24:01,904
and I haven't seen this done a lot.

444
00:24:03,365 --> 00:24:05,967
The good thing about this idea is that it actually works

445
00:24:06,507 --> 00:24:08,208
up and down as well, because in some cases

446
00:24:08,248 --> 00:24:11,530
you want to see what's going underneath you,

447
00:24:12,471 --> 00:24:13,691
you would do the same exact thing.

448
00:24:15,525 --> 00:24:19,247
press the down cursor key, and it would react

449
00:24:19,307 --> 00:24:20,527
exactly in the same manner.

450
00:24:22,869 --> 00:24:26,731
So, and we're talking about target focus,

451
00:24:26,871 --> 00:24:29,532
of course it doesn't, it's not limited to

452
00:24:31,273 --> 00:24:34,195
cursor keys or controllers.

453
00:24:34,275 --> 00:24:37,657
Some games introduce mouse action, like a snapshot,

454
00:24:37,717 --> 00:24:40,839
which allowed you to capture elements from one side

455
00:24:40,859 --> 00:24:42,039
and move them to another side.

456
00:24:43,387 --> 00:24:44,928
So if you already have the mouse,

457
00:24:44,968 --> 00:24:47,368
the mouse is a good representation of your actual view.

458
00:24:47,388 --> 00:24:48,829
You know where you're looking at.

459
00:24:49,669 --> 00:24:53,670
So why not put the camera in this sort of average

460
00:24:53,730 --> 00:24:57,351
between the character and the cursor.

461
00:24:57,551 --> 00:24:59,831
That is very clear that that's where you want to go.

462
00:25:02,072 --> 00:25:04,572
In the same way as they did with the swapper,

463
00:25:05,412 --> 00:25:11,374
an amazing game that has a bunch of great camera behaviors,

464
00:25:13,816 --> 00:25:16,017
So if you have a gun, or in this case,

465
00:25:16,097 --> 00:25:18,219
a cloning device that aims to some place,

466
00:25:18,699 --> 00:25:21,161
this is where the player is looking at.

467
00:25:21,261 --> 00:25:23,422
This is where our attention is directed.

468
00:25:23,782 --> 00:25:26,244
In fact, you would sometimes want to look

469
00:25:26,944 --> 00:25:28,665
to some direction and will go to the other one,

470
00:25:28,725 --> 00:25:31,247
and you would want the camera to follow

471
00:25:31,807 --> 00:25:33,728
the looking direction and not the walking direction.

472
00:25:33,768 --> 00:25:35,309
So this is a perfect solution.

473
00:25:35,669 --> 00:25:38,631
It also obviously requires either an additional,

474
00:25:38,972 --> 00:25:40,112
some sort of additional control,

475
00:25:40,172 --> 00:25:42,033
either a mouse or an additional stick.

476
00:25:44,695 --> 00:25:48,639
projected focus, doesn't work necessarily very well

477
00:25:48,679 --> 00:25:51,983
for platformers, it could work for horizontally,

478
00:25:52,043 --> 00:25:55,226
but vertically you have differential that's very abrupt.

479
00:25:55,486 --> 00:25:57,548
If you think about it, about jumping,

480
00:25:57,969 --> 00:26:02,093
jumping changes your vertical speed

481
00:26:02,133 --> 00:26:05,837
from zero to x in one frame.

482
00:26:06,170 --> 00:26:07,430
that doesn't really work very well

483
00:26:07,450 --> 00:26:08,831
when you try to project the speed.

484
00:26:09,651 --> 00:26:12,312
But in all sorts of flying elements,

485
00:26:12,392 --> 00:26:15,073
like they did with Secrets of Redikon from last year,

486
00:26:15,694 --> 00:26:17,454
this works really, really well.

487
00:26:17,534 --> 00:26:19,935
You just aim for where the player's gonna be

488
00:26:19,955 --> 00:26:21,396
in a few milliseconds.

489
00:26:23,697 --> 00:26:27,939
A great representation of a very intelligent system

490
00:26:28,399 --> 00:26:29,859
can be found in the Luftrausers.

491
00:26:30,760 --> 00:26:32,361
I guess I spelled that wrong.

492
00:26:33,261 --> 00:26:34,561
I'm sorry.

493
00:26:35,299 --> 00:26:35,820
Kind of weird.

494
00:26:36,460 --> 00:26:41,064
Um, uh, so, yeah, they have a really interesting

495
00:26:41,244 --> 00:26:45,267
combination of target focus and projected focus.

496
00:26:45,948 --> 00:26:48,129
Projected focus, as we said, it looks to,

497
00:26:48,430 --> 00:26:50,051
looks at your actual velocity.

498
00:26:50,351 --> 00:26:53,093
Target focus is, it looks at where you're actually aiming.

499
00:26:53,514 --> 00:26:56,776
So they found this nice combination of those two,

500
00:26:57,377 --> 00:26:59,118
always giving you a good sense of

501
00:26:59,178 --> 00:27:00,339
where you're actually going.

502
00:27:00,399 --> 00:27:02,281
Sometimes you're aiming to some direction,

503
00:27:02,321 --> 00:27:03,421
but you're thrusting.

504
00:27:03,987 --> 00:27:06,888
to get to someplace else, so they found a good

505
00:27:06,908 --> 00:27:10,489
averaging of those behaviors.

506
00:27:10,989 --> 00:27:12,910
On top of that, they have other elements

507
00:27:13,330 --> 00:27:14,891
that we'll talk about in a sec.

508
00:27:16,272 --> 00:27:18,012
All right, so so far we've been talking about

509
00:27:18,132 --> 00:27:19,713
what the player needs to see,

510
00:27:20,153 --> 00:27:23,615
but what about what we want as the directors

511
00:27:23,755 --> 00:27:26,436
of our own games, we want the player to see.

512
00:27:26,716 --> 00:27:29,717
We have some choice more in the narrative aspect.

513
00:27:32,538 --> 00:27:34,099
One of my favorite games of the 80s,

514
00:27:35,080 --> 00:27:37,262
I'm not that old, just bear with me,

515
00:27:39,164 --> 00:27:40,405
is Wonder Boy.

516
00:27:41,767 --> 00:27:43,348
That game actually introduced something that's,

517
00:27:44,089 --> 00:27:45,530
it was very modern at the time,

518
00:27:45,610 --> 00:27:48,173
and even technically it's not very easy

519
00:27:48,193 --> 00:27:49,374
if you think about how to do this.

520
00:27:49,874 --> 00:27:52,236
It would move the camera along a path

521
00:27:52,276 --> 00:27:55,980
that was not parallel like other games of the time.

522
00:27:57,599 --> 00:28:00,642
In fact, it would not only center it,

523
00:28:01,223 --> 00:28:05,608
it would sometimes just move the camera up, for example,

524
00:28:05,668 --> 00:28:08,531
and keeping the boy at the bottom,

525
00:28:09,092 --> 00:28:11,995
kind of foreshadowing something that's coming up ahead.

526
00:28:14,077 --> 00:28:17,357
us as level designers, much more freedom,

527
00:28:17,477 --> 00:28:19,218
something that we can do a lot with.

528
00:28:21,238 --> 00:28:22,979
Going forward at almost a decade,

529
00:28:23,179 --> 00:28:27,020
in the birth of the fifth generation of consoles,

530
00:28:27,040 --> 00:28:27,940
this is the PlayStation,

531
00:28:27,960 --> 00:28:29,740
the clone off from the PlayStation,

532
00:28:31,001 --> 00:28:32,301
they started having 2.5D or 3D in general,

533
00:28:32,321 --> 00:28:33,161
and 2.5D in particular.

534
00:28:38,037 --> 00:28:41,358
So the camera path, as we've seen with Wonderball,

535
00:28:41,378 --> 00:28:43,078
could be much more versatile.

536
00:28:43,118 --> 00:28:44,739
It doesn't have to be necessarily position.

537
00:28:44,759 --> 00:28:48,480
It's position and zooming and tilting and whatnot.

538
00:28:48,720 --> 00:28:50,820
You can use it in any way you want.

539
00:28:50,840 --> 00:28:54,181
You could start moving towards certain elements

540
00:28:54,201 --> 00:28:55,381
that you want the player to notice,

541
00:28:56,802 --> 00:29:00,682
or zoom out to give some more interesting dramatic effect.

542
00:29:01,683 --> 00:29:03,843
It works very well for that grain.

543
00:29:06,283 --> 00:29:09,145
This is super important and not a lot of game did that

544
00:29:10,006 --> 00:29:10,586
at the time.

545
00:29:11,027 --> 00:29:15,110
Donkey Kong Country has a bunch of standard elements

546
00:29:15,310 --> 00:29:17,952
like lerp smoothing, we talked about that.

547
00:29:18,893 --> 00:29:21,635
Vertical position locking, dual forward view horizontally.

548
00:29:22,536 --> 00:29:24,398
But the interesting thing that they did is that

549
00:29:24,598 --> 00:29:27,320
every level has multiple regions.

550
00:29:27,881 --> 00:29:29,422
And those regions would

551
00:29:32,557 --> 00:29:34,858
each one of those regions would set different anchors.

552
00:29:35,378 --> 00:29:38,540
Some regions would be more linear, go from left to right.

553
00:29:39,280 --> 00:29:42,842
Other ones would be more exploratory,

554
00:29:43,102 --> 00:29:46,583
and those would actually place those anchors in the center,

555
00:29:46,983 --> 00:29:48,964
kind of giving you an idea where you need to go.

556
00:29:49,284 --> 00:29:51,285
And that was very clever, and you could see when you play it

557
00:29:51,325 --> 00:29:53,466
you can see the camera would shift dramatically

558
00:29:53,506 --> 00:29:54,447
between different regions.

559
00:29:56,648 --> 00:29:58,588
Another thing that you could do back at the time when

560
00:29:59,210 --> 00:30:00,931
the technology kind of started allowing that,

561
00:30:01,151 --> 00:30:02,512
is using zoom to fit.

562
00:30:03,372 --> 00:30:05,193
You have a certain element that you want

563
00:30:05,213 --> 00:30:08,014
to include in the screen no matter what, like the boss,

564
00:30:08,554 --> 00:30:09,955
then you would zoom out to make sure

565
00:30:09,995 --> 00:30:12,876
that that element is always on the screen.

566
00:30:13,256 --> 00:30:15,037
So if you're the player and you see

567
00:30:15,077 --> 00:30:16,337
that it starts zooming out,

568
00:30:16,678 --> 00:30:17,978
you immediately know what you need to do.

569
00:30:20,419 --> 00:30:21,820
That was Yoshi's story, by the way.

570
00:30:23,820 --> 00:30:26,721
Q-Focus, and I think this is one of the most important

571
00:30:27,021 --> 00:30:29,602
elements that we can learn from other games.

572
00:30:30,442 --> 00:30:31,883
Other games have done this before,

573
00:30:31,923 --> 00:30:33,463
but Insanely Twisted Shadow Plant

574
00:30:33,503 --> 00:30:35,624
really made this into almost an art form.

575
00:30:35,644 --> 00:30:37,344
And in fact, they had a blog post

576
00:30:37,584 --> 00:30:38,945
exactly about this technology,

577
00:30:39,405 --> 00:30:40,825
and that's where I got this footage from.

578
00:30:42,245 --> 00:30:45,406
What they do is they have what they call attractors,

579
00:30:46,947 --> 00:30:50,048
that as you get in close enough to those attractors,

580
00:30:51,368 --> 00:30:52,548
it would start slowly.

581
00:30:53,125 --> 00:30:55,247
shift the camera towards that attractor

582
00:30:55,327 --> 00:30:57,429
based on the distance from the center.

583
00:30:58,350 --> 00:30:59,751
I call it double ring attractors

584
00:30:59,791 --> 00:31:01,352
because you have this outer ring.

585
00:31:01,553 --> 00:31:02,573
Once you're inside that ring,

586
00:31:02,634 --> 00:31:06,457
it will start doing some weighted average

587
00:31:07,338 --> 00:31:10,040
between the character and that cue.

588
00:31:10,961 --> 00:31:13,664
And the closer you get to the center of that cue,

589
00:31:14,064 --> 00:31:15,786
it would get closer to that cue.

590
00:31:16,466 --> 00:31:18,028
You immediately know what you need to do

591
00:31:18,068 --> 00:31:19,489
because you see the camera will start shift.

592
00:31:20,244 --> 00:31:24,729
As you get into the center ring, it will lock on that cue.

593
00:31:25,250 --> 00:31:26,571
In this case, it's the checkpoint.

594
00:31:27,072 --> 00:31:28,373
And the good thing about that,

595
00:31:28,414 --> 00:31:32,218
you can have a bunch of overlapping outer rings,

596
00:31:32,779 --> 00:31:34,341
so the camera would average

597
00:31:34,361 --> 00:31:35,702
between all the different elements.

598
00:31:36,223 --> 00:31:38,746
This game has a bunch of other elements

599
00:31:38,946 --> 00:31:40,228
that are very interesting, such as...

600
00:31:41,265 --> 00:31:44,426
using the gun that they have as a target focus,

601
00:31:44,866 --> 00:31:46,886
representation of where you're actually looking at.

602
00:31:48,066 --> 00:31:49,567
You should check out that blog post.

603
00:31:50,967 --> 00:31:54,428
Another way of doing Q-focus in a very innovative way

604
00:31:54,548 --> 00:31:57,769
is what Edwin McMillan and Tyler Gale did with ether.

605
00:31:59,309 --> 00:32:02,810
They have, as soon as you get into the gravity zone

606
00:32:03,110 --> 00:32:04,350
of any planet.

607
00:32:04,865 --> 00:32:09,188
they would start slowly shift or tilt the screen,

608
00:32:09,568 --> 00:32:14,311
so downward would lead to that gravity source,

609
00:32:14,891 --> 00:32:18,134
which is very predictable, very clean,

610
00:32:18,774 --> 00:32:22,457
and gives you a good sense of drama and narrative,

611
00:32:22,957 --> 00:32:24,658
and it's a perfect solution,

612
00:32:24,798 --> 00:32:26,079
and something that you don't see a lot.

613
00:32:28,211 --> 00:32:31,895
and no presentation on camera work

614
00:32:31,935 --> 00:32:33,476
would be complete without talking about Limbo.

615
00:32:35,037 --> 00:32:38,060
It's really a perfect combination of using

616
00:32:39,802 --> 00:32:41,323
very simple camera system,

617
00:32:41,503 --> 00:32:44,847
which is simple position locking if you think about it,

618
00:32:44,887 --> 00:32:47,389
but then the anchor changes dramatically

619
00:32:47,429 --> 00:32:50,392
between regions in the same level even.

620
00:32:51,012 --> 00:32:52,193
Well, it's all the same level really.

621
00:32:54,753 --> 00:32:55,934
And you have a bunch of cues.

622
00:32:56,134 --> 00:32:58,536
And those cues are set on or off.

623
00:32:58,576 --> 00:33:02,218
So all of a sudden, you have a boss coming into the screen.

624
00:33:02,578 --> 00:33:04,719
And that would take the attention

625
00:33:04,800 --> 00:33:09,783
or is used as a tractor to get the camera closer.

626
00:33:11,624 --> 00:33:16,787
Something else that I call region focus is, in this case,

627
00:33:16,827 --> 00:33:19,428
you can see that the camera is based

628
00:33:19,528 --> 00:33:22,690
on some sort of average between the center of the region.

629
00:33:23,286 --> 00:33:25,887
There's only one region at Geometry Wars, really.

630
00:33:27,108 --> 00:33:27,928
And the character.

631
00:33:29,349 --> 00:33:30,950
So there are a bunch of different ways

632
00:33:31,210 --> 00:33:32,930
that Geometry Wars could have scrolled.

633
00:33:33,291 --> 00:33:34,211
They chose this one.

634
00:33:34,551 --> 00:33:35,992
They could have used camera window.

635
00:33:36,012 --> 00:33:39,874
They could have used any type of target locking.

636
00:33:39,994 --> 00:33:43,215
They used this one because it actually gives you

637
00:33:43,235 --> 00:33:45,136
a sense of where you need to go.

638
00:33:45,216 --> 00:33:45,996
Where's the center?

639
00:33:46,016 --> 00:33:48,498
You always know where you are in relation to the center,

640
00:33:48,518 --> 00:33:49,778
and that's really important.

641
00:33:50,098 --> 00:33:51,179
And you're always on the move.

642
00:33:51,219 --> 00:33:52,940
It's also kind of a dramatic effect.

643
00:33:55,562 --> 00:33:58,123
The same kind of idea combined with other elements

644
00:33:58,203 --> 00:34:00,424
is what they did with Vessel from 2012.

645
00:34:01,524 --> 00:34:04,846
This is a very heavy puzzle platform.

646
00:34:04,906 --> 00:34:09,027
A lot of things happening at once in each puzzle.

647
00:34:09,127 --> 00:34:10,868
You need to see a lot of different elements.

648
00:34:11,588 --> 00:34:15,610
And each of those regions, it's like room puzzles

649
00:34:15,650 --> 00:34:17,511
that you would see in earlier games.

650
00:34:18,031 --> 00:34:21,352
But instead of having that, they actually have anchors

651
00:34:22,052 --> 00:34:23,213
that focus.

652
00:34:23,884 --> 00:34:26,787
and zoom into or out of certain elements

653
00:34:27,007 --> 00:34:28,608
to make sure that everything that's important

654
00:34:28,648 --> 00:34:36,836
for that specific puzzle would be shown to the player.

655
00:34:36,856 --> 00:34:39,058
But on top of that, what they would do is

656
00:34:39,979 --> 00:34:44,142
they wouldn't just freeze the position of the camera

657
00:34:44,583 --> 00:34:45,844
on the center of that region.

658
00:34:46,144 --> 00:34:46,625
If you notice.

659
00:34:47,974 --> 00:34:50,735
the motion of the player actually takes the,

660
00:34:50,995 --> 00:34:52,355
moves the camera slightly.

661
00:34:52,795 --> 00:34:55,776
So, there's like a small extra slack

662
00:34:55,816 --> 00:34:58,556
that they allow the camera to move around their region.

663
00:34:58,716 --> 00:34:59,937
And this is pretty brilliant.

664
00:34:59,977 --> 00:35:01,597
It gives you the sense of control.

665
00:35:02,077 --> 00:35:04,017
You're actually moving the camera as well.

666
00:35:04,358 --> 00:35:06,478
But also, as you hit the next region,

667
00:35:06,538 --> 00:35:08,018
or the edge of the region that you're in,

668
00:35:08,618 --> 00:35:10,299
the camera's already in motion.

669
00:35:10,859 --> 00:35:13,359
So, there's never really unpredictable

670
00:35:13,740 --> 00:35:14,480
movement of the camera.

671
00:35:16,530 --> 00:35:18,992
One other thing that was done in the first days

672
00:35:19,132 --> 00:35:23,214
of PlayStation, Tomba from 1997,

673
00:35:24,275 --> 00:35:26,056
used something I call gesture cues,

674
00:35:26,176 --> 00:35:28,657
which is elements that are based,

675
00:35:29,277 --> 00:35:31,879
camera movement that is based on what you actually do.

676
00:35:32,479 --> 00:35:33,800
There are a bunch of things in that game

677
00:35:33,820 --> 00:35:35,741
that change the camera behavior.

678
00:35:36,781 --> 00:35:38,903
One of them is when you start climbing,

679
00:35:38,963 --> 00:35:41,084
the camera would shift behind you,

680
00:35:41,284 --> 00:35:43,305
give you more sense of control and drama,

681
00:35:44,159 --> 00:35:46,941
you're just looking ahead, you can't see what's behind you.

682
00:35:48,143 --> 00:35:51,006
Giving you a lot of control, a feeling of control.

683
00:35:52,787 --> 00:35:57,652
They did this with Aztez in many, many different elements.

684
00:35:57,752 --> 00:35:59,995
This is a great fighting game that's supposed

685
00:36:00,015 --> 00:36:01,596
to come out sometime.

686
00:36:02,177 --> 00:36:06,061
And, um, and, no, I have the same problem.

687
00:36:08,062 --> 00:36:10,382
And a lot of the different elements

688
00:36:10,642 --> 00:36:12,122
cause different camera effects.

689
00:36:12,723 --> 00:36:15,003
And that gives a lot of sense of drama,

690
00:36:15,403 --> 00:36:17,524
control, and also kind of lack of control

691
00:36:17,804 --> 00:36:19,084
when some of these things happen.

692
00:36:19,224 --> 00:36:22,965
You feel almost powerless sometimes

693
00:36:22,985 --> 00:36:24,325
when you see these things happening,

694
00:36:25,145 --> 00:36:26,185
especially in succession.

695
00:36:27,526 --> 00:36:29,066
And I feel like this is one of those things

696
00:36:29,086 --> 00:36:31,086
that we're just scratching the surface

697
00:36:31,767 --> 00:36:33,707
with gesture cues, moving the camera

698
00:36:33,747 --> 00:36:34,907
based on what you actually do.

699
00:36:37,431 --> 00:36:40,553
Now we already have a camera, why not use that camera

700
00:36:40,593 --> 00:36:41,794
to actually tell a story?

701
00:36:42,195 --> 00:36:44,316
I call this cinematic path, paths.

702
00:36:46,057 --> 00:36:48,559
So instead of having a cut scene telling something

703
00:36:48,619 --> 00:36:52,021
that happened someplace else, why not just use that camera?

704
00:36:52,041 --> 00:36:55,404
It's also, I almost see this as a lazy solution,

705
00:36:55,664 --> 00:36:57,745
but it's exactly the one thing that you need to do.

706
00:36:58,986 --> 00:37:01,308
They did sort of like, something like that

707
00:37:01,348 --> 00:37:02,409
in Streets of Rage from 91.

708
00:37:04,237 --> 00:37:06,177
And the Behemoths did this with Alien Hominid

709
00:37:06,217 --> 00:37:08,558
and Castle Crashers, they do it all the time.

710
00:37:08,718 --> 00:37:10,839
And it achieves a few goals,

711
00:37:10,939 --> 00:37:12,979
one of them is obviously tell a story,

712
00:37:13,380 --> 00:37:17,821
but also provide a direction of where the player needs to go.

713
00:37:17,961 --> 00:37:19,402
So it's two in one.

714
00:37:19,922 --> 00:37:22,243
And you feel like you're playing the whole time,

715
00:37:22,283 --> 00:37:26,684
there's no cut scene, the game is running the whole time.

716
00:37:28,365 --> 00:37:31,025
All right, so what do we do when we have

717
00:37:31,165 --> 00:37:32,626
more than one thing to focus on?

718
00:37:35,713 --> 00:37:38,695
I think we all played this game, Gauntlet from 1985.

719
00:37:40,176 --> 00:37:42,098
It's a pretty amazing game.

720
00:37:42,118 --> 00:37:46,861
The technology is pretty well ahead of its time.

721
00:37:46,881 --> 00:37:48,302
The scrolling is wonderful.

722
00:37:48,362 --> 00:37:49,543
So many things running at once.

723
00:37:50,404 --> 00:37:52,885
There is a slight problem when you have more than one player

724
00:37:52,905 --> 00:37:56,468
and we all know this, what happens if one of the players

725
00:37:56,488 --> 00:37:59,150
just slacks off or just tries to go to the other direction.

726
00:37:59,250 --> 00:38:00,631
Everybody's stuck.

727
00:38:01,031 --> 00:38:02,372
I call this position averaging.

728
00:38:02,452 --> 00:38:03,133
It's pretty clear.

729
00:38:03,153 --> 00:38:04,013
We have a lot of things.

730
00:38:04,894 --> 00:38:07,215
At the same time, you would try to average,

731
00:38:07,555 --> 00:38:09,035
to go to the average position.

732
00:38:10,195 --> 00:38:13,736
But that's an obvious problem.

733
00:38:13,856 --> 00:38:17,117
This problem could be seen also pretty clearly.

734
00:38:17,137 --> 00:38:19,538
I mean, I really love this game.

735
00:38:19,578 --> 00:38:21,938
It's a pretty crazy game, but what happens

736
00:38:21,958 --> 00:38:27,659
when you have all these players die and respawn

737
00:38:27,719 --> 00:38:30,700
or move from one side and then reappear on the other one?

738
00:38:30,720 --> 00:38:32,701
All of a sudden, the average

739
00:38:32,761 --> 00:38:34,381
would just shift dramatically.

740
00:38:34,835 --> 00:38:38,559
So it works really well for Samurai Gun as a player,

741
00:38:38,599 --> 00:38:42,202
but if you're not a player and you're trying to watch

742
00:38:42,522 --> 00:38:48,027
someone else play, it could be a little uneasy on the eyes.

743
00:38:50,509 --> 00:38:52,191
One solution is what they did with Street Fighter 1,

744
00:38:52,511 --> 00:38:53,852
and then throughout the franchise,

745
00:38:53,892 --> 00:38:56,294
they created the camera window, the good old camera window.

746
00:38:56,595 --> 00:38:59,317
If one player pushes the edge of the window,

747
00:39:02,449 --> 00:39:03,910
It would push the camera obviously,

748
00:39:03,971 --> 00:39:05,292
but also push the other player.

749
00:39:05,832 --> 00:39:07,814
So the only way you could actually get stuck

750
00:39:07,874 --> 00:39:10,196
if both players forcefully try to push

751
00:39:10,476 --> 00:39:11,417
to different directions.

752
00:39:13,018 --> 00:39:13,979
It works for some games,

753
00:39:14,339 --> 00:39:16,882
definitely works for one-on-one fighting games like this.

754
00:39:18,743 --> 00:39:21,145
And obviously the best solution is what they did

755
00:39:21,185 --> 00:39:24,548
with Super Smash Brothers 1 and throughout the franchise.

756
00:39:26,093 --> 00:39:31,162
You average the position, add some additional smoothing,

757
00:39:31,643 --> 00:39:33,727
and you zoom out to make sure that everything

758
00:39:33,747 --> 00:39:35,249
that's important is in the frame.

759
00:39:35,269 --> 00:39:36,191
Yeah.

760
00:39:39,502 --> 00:39:43,164
Rockets, Rockets, Rockets, which came out last year,

761
00:39:43,584 --> 00:39:46,425
is also a great representation of what they did

762
00:39:46,465 --> 00:39:49,026
with Super Smash Brothers, and here is kind of

763
00:39:49,066 --> 00:39:51,607
the designer choice as well.

764
00:39:53,068 --> 00:39:56,610
It will always try to zoom out the minimal amount of zooming

765
00:39:56,870 --> 00:40:00,351
so the player would not really see what's behind,

766
00:40:00,931 --> 00:40:04,873
and also, if you get back far enough,

767
00:40:04,993 --> 00:40:07,354
it's actually uncomfortable, you don't really see very well.

768
00:40:07,414 --> 00:40:08,255
So you have this.

769
00:40:09,016 --> 00:40:12,299
implicit encouragement to always go back

770
00:40:12,559 --> 00:40:15,562
to make close encounters, which is exactly

771
00:40:15,582 --> 00:40:17,163
what the designers wanted.

772
00:40:18,965 --> 00:40:21,367
Another solution is what they did with Spelunky, obviously.

773
00:40:23,469 --> 00:40:25,531
The solution is not even get to the,

774
00:40:26,052 --> 00:40:29,896
not even address the problem of multiple characters.

775
00:40:29,916 --> 00:40:31,437
You just give the camera to one.

776
00:40:31,497 --> 00:40:34,160
If that person dies, the camera would move.

777
00:40:34,797 --> 00:40:36,658
to another player, and that's super important

778
00:40:36,698 --> 00:40:38,879
for a game that, if you go out of the screen,

779
00:40:38,979 --> 00:40:42,000
you actually, well, it has some grave consequences.

780
00:40:44,262 --> 00:40:48,184
And everything that pertains to multiplayer

781
00:40:49,865 --> 00:40:52,706
would fit multi-character, and you don't have to do

782
00:40:52,866 --> 00:40:55,828
a straight 50-50 average, you can do whatever.

783
00:40:57,669 --> 00:40:59,330
40 and something else.

784
00:41:02,242 --> 00:41:06,483
Manual control, when would you provide additional control

785
00:41:06,543 --> 00:41:08,683
to what is implicit by the camera movement?

786
00:41:11,044 --> 00:41:13,925
So, I think this might be the last time

787
00:41:13,965 --> 00:41:15,425
I'm gonna talk about Super Mario World,

788
00:41:15,625 --> 00:41:17,045
and it's pretty interesting.

789
00:41:17,065 --> 00:41:19,426
I feel like the fact that they introduced

790
00:41:19,486 --> 00:41:21,867
so many different systems in one game

791
00:41:22,127 --> 00:41:26,308
is some sort of overcompensation for a really bad system

792
00:41:26,328 --> 00:41:28,988
that they had in Super Mario Bros. 3 or something.

793
00:41:30,649 --> 00:41:31,769
On top of everything they did.

794
00:41:32,462 --> 00:41:34,763
they actually had an additional manual control,

795
00:41:35,403 --> 00:41:38,645
the shoulder buttons would move the camera as well.

796
00:41:38,705 --> 00:41:41,527
I don't think anybody really used it a lot.

797
00:41:42,268 --> 00:41:43,969
I don't think it's really needed.

798
00:41:45,330 --> 00:41:47,431
And it's not implicit, it's not very clear.

799
00:41:47,451 --> 00:41:50,893
The player wouldn't even know that this thing existed.

800
00:41:53,054 --> 00:41:54,875
This is obviously not a real,

801
00:41:54,996 --> 00:41:57,637
I mean it's not your classic side-scroller.

802
00:41:58,290 --> 00:42:01,712
But what they did with OSMOS is using a control that's

803
00:42:01,792 --> 00:42:06,155
very clear and implicit to produce exactly the results

804
00:42:06,175 --> 00:42:06,915
that you would expect.

805
00:42:06,975 --> 00:42:11,058
In this case, the mouse wheel or in tablets that pinch to zoom

806
00:42:11,338 --> 00:42:13,279
would do exactly what you would expect.

807
00:42:14,460 --> 00:42:17,121
That's what they did with Jazz Jackrabbit.

808
00:42:17,802 --> 00:42:22,225
They used the left and right keys or a stick

809
00:42:23,105 --> 00:42:24,246
to move the camera.

810
00:42:24,802 --> 00:42:27,843
but the same exact behavior would move the camera

811
00:42:27,983 --> 00:42:30,924
up and down, which is very useful in some cases.

812
00:42:33,264 --> 00:42:34,745
They did the same thing with Spelunky.

813
00:42:36,926 --> 00:42:38,386
You just expect that if you,

814
00:42:38,586 --> 00:42:41,467
and you would probably do it even if you didn't notice

815
00:42:41,487 --> 00:42:43,708
as you were climbing or crouching.

816
00:42:46,289 --> 00:42:47,649
Quickly, I wanna talk about Camera Shake.

817
00:42:50,130 --> 00:42:52,631
Camera Shake is kind of the opposite of,

818
00:42:54,364 --> 00:42:55,444
what we're talking about right now.

819
00:42:55,724 --> 00:42:58,485
It's providing some sort of lack of control.

820
00:42:58,725 --> 00:43:00,205
The player has no control,

821
00:43:00,245 --> 00:43:02,286
there's something happening on the screen that's bigger

822
00:43:02,906 --> 00:43:08,008
than the player could actually control.

823
00:43:08,668 --> 00:43:11,549
So I try to look back, and with the help of friends,

824
00:43:11,589 --> 00:43:15,290
to figure out when was the first implementation

825
00:43:15,370 --> 00:43:16,290
of Camera Shake.

826
00:43:16,390 --> 00:43:20,032
This is the farthest I got, and of course it's Miyamoto.

827
00:43:22,305 --> 00:43:24,967
It's not exactly the camera shake that we know of today

828
00:43:25,007 --> 00:43:28,829
because it actually has some part in the game.

829
00:43:28,969 --> 00:43:30,730
It's not just an effect.

830
00:43:31,731 --> 00:43:34,833
But it's still a camera shake close to what we know today.

831
00:43:35,253 --> 00:43:37,855
The funny thing is that you would only see this behavior

832
00:43:37,975 --> 00:43:38,615
on the arcade.

833
00:43:38,655 --> 00:43:39,896
You wouldn't see it on the NES.

834
00:43:41,017 --> 00:43:44,359
They probably tried and couldn't get scrolling to work.

835
00:43:45,061 --> 00:43:48,463
And I have this theory that that's when Miyamoto decided

836
00:43:48,563 --> 00:43:50,825
that scrolling is something that he wants to pursue.

837
00:43:50,885 --> 00:43:53,927
So I built an entire story in my head.

838
00:43:55,268 --> 00:43:58,309
So, and we were talking about screen shakes

839
00:43:58,369 --> 00:44:03,373
and screen freezes, Vlambeer, they know best,

840
00:44:03,413 --> 00:44:05,094
they made it into an art form really,

841
00:44:05,374 --> 00:44:08,216
and they had some talks about that.

842
00:44:08,296 --> 00:44:14,440
If you look up JW's work, it's a huge subject on its own.

843
00:44:15,974 --> 00:44:18,515
Alright, so how do we put everything together

844
00:44:18,595 --> 00:44:21,017
and make our own custom made camera?

845
00:44:23,939 --> 00:44:28,202
So, first of all we look at what we want to do,

846
00:44:28,242 --> 00:44:30,343
what are the characteristic and significant

847
00:44:31,124 --> 00:44:32,485
important features of our game.

848
00:44:33,025 --> 00:44:35,026
Then we get inspired by other games

849
00:44:35,166 --> 00:44:37,628
as I try to do here as well.

850
00:44:38,188 --> 00:44:39,489
And then we make it our own,

851
00:44:39,609 --> 00:44:41,731
change what we need, we take some tips,

852
00:44:41,851 --> 00:44:44,773
we combine and make our own camera solution.

853
00:44:47,331 --> 00:44:50,031
This game from 1985, Legend of Cage,

854
00:44:50,811 --> 00:44:53,132
doesn't have anything amazing going for it,

855
00:44:53,172 --> 00:44:56,132
except for the fact that it's probably the last game

856
00:44:56,172 --> 00:44:58,232
going from right to left, for some reason.

857
00:44:59,793 --> 00:45:00,413
Except for mine.

858
00:45:02,093 --> 00:45:03,053
What they did is,

859
00:45:05,154 --> 00:45:06,494
they created a camera window

860
00:45:06,554 --> 00:45:08,374
that's exactly the width of a tree,

861
00:45:08,594 --> 00:45:11,955
because most fighting actually happened on trees.

862
00:45:12,115 --> 00:45:13,235
So once you're on a tree,

863
00:45:14,295 --> 00:45:14,875
the camera would...

864
00:45:15,376 --> 00:45:15,997
stay still.

865
00:45:16,737 --> 00:45:21,322
And again, not a brilliant camera solution necessarily,

866
00:45:21,722 --> 00:45:24,885
but the implementation is ideal for that specific game.

867
00:45:26,026 --> 00:45:28,208
As we've seen before with Shinobi,

868
00:45:28,649 --> 00:45:32,292
if you have high jumps, use a very high vertical window,

869
00:45:32,312 --> 00:45:36,236
but remember to snap it back to the center.

870
00:45:38,618 --> 00:45:41,039
If you have a character that moves really, really fast

871
00:45:41,139 --> 00:45:42,580
in all directions, up and down,

872
00:45:43,100 --> 00:45:46,102
maybe use a camera window that's very narrow.

873
00:45:47,202 --> 00:45:48,363
That would work really well,

874
00:45:48,423 --> 00:45:51,605
especially since most direction changes

875
00:45:51,645 --> 00:45:52,545
happen on the ground,

876
00:45:53,026 --> 00:45:55,867
so you wouldn't really see the bumps

877
00:45:55,947 --> 00:45:56,908
from one side to another,

878
00:45:57,028 --> 00:45:58,849
except when you're flying down

879
00:45:59,069 --> 00:46:01,010
into the bottom edge of the screen,

880
00:46:01,790 --> 00:46:04,152
which in this case, it's kind of abrupt.

881
00:46:04,679 --> 00:46:06,159
And that's exactly what they did.

882
00:46:06,199 --> 00:46:08,641
They solved this in, so that was Sonic 1.

883
00:46:08,761 --> 00:46:12,003
In Sonic 2, they solved the same problem

884
00:46:12,483 --> 00:46:16,545
by using what Super Mario Brothers 1 used.

885
00:46:16,705 --> 00:46:19,307
That's the speed up push zone.

886
00:46:19,727 --> 00:46:22,349
Each one of the halves, horizontally and vertically,

887
00:46:22,789 --> 00:46:24,210
stops the motion of the camera

888
00:46:24,250 --> 00:46:26,111
and then starts easing it out back again.

889
00:46:26,191 --> 00:46:28,532
So even when you go into a high speed loop,

890
00:46:28,853 --> 00:46:30,313
you wouldn't even notice that the fact

891
00:46:30,373 --> 00:46:33,675
that it actually reduced the speed.

892
00:46:34,015 --> 00:46:35,735
in one side immediately increased it back

893
00:46:36,135 --> 00:46:37,496
and it feels very, very smooth.

894
00:46:37,636 --> 00:46:40,557
And it's a major change, specifically on the camera system

895
00:46:40,577 --> 00:46:41,277
between the two games.

896
00:46:42,917 --> 00:46:45,218
Long distance view, we talked about in Cave Story.

897
00:46:45,398 --> 00:46:47,179
I think that's a perfect solution for games

898
00:46:47,219 --> 00:46:48,779
that require a lot of forward view.

899
00:46:50,480 --> 00:46:52,440
I wanna talk a little bit about Fez.

900
00:46:53,621 --> 00:46:55,761
Again, for games, for platformers,

901
00:46:56,021 --> 00:46:58,142
we don't really see camera windows too much these days

902
00:46:58,202 --> 00:47:02,463
because you miss out, we miss out a lot of information

903
00:47:02,483 --> 00:47:03,243
of what's coming ahead.

904
00:47:03,816 --> 00:47:05,377
But that's not Fez.

905
00:47:05,457 --> 00:47:07,958
Fez doesn't have a lot of things coming at you.

906
00:47:09,498 --> 00:47:15,381
In fact, I think that most of the important elements,

907
00:47:15,821 --> 00:47:18,882
since most of the dimension shifts

908
00:47:19,022 --> 00:47:20,563
happen in corners of buildings.

909
00:47:20,703 --> 00:47:23,824
So you could argue that most of everything that's important

910
00:47:23,904 --> 00:47:24,885
is actually behind you.

911
00:47:25,305 --> 00:47:29,507
And that is maintained throughout the dimension shift.

912
00:47:29,907 --> 00:47:32,448
So this solution, the camera window solution.

913
00:47:32,750 --> 00:47:34,332
that works throughout dimension shift

914
00:47:34,652 --> 00:47:36,614
is the perfect solution for this kind of game.

915
00:47:39,016 --> 00:47:40,477
If you have elaborate puzzle systems

916
00:47:40,537 --> 00:47:43,160
with a lot of things happening at the same time,

917
00:47:44,521 --> 00:47:48,424
make the regions as the jurisdiction

918
00:47:48,604 --> 00:47:50,226
of where the camera needs to be.

919
00:47:51,087 --> 00:47:53,569
But you can easily do what Vessel did,

920
00:47:54,530 --> 00:47:56,071
still allow a little bit of motion,

921
00:47:58,233 --> 00:48:00,275
some control of the motion to the character.

922
00:48:00,674 --> 00:48:02,915
giving them more sense of control.

923
00:48:04,895 --> 00:48:06,215
And if you're telling a story,

924
00:48:06,455 --> 00:48:10,456
like we've seen with Alien Hominid,

925
00:48:11,656 --> 00:48:14,757
the swapper actually told the entire story

926
00:48:15,217 --> 00:48:19,398
based on in-game camera shifts

927
00:48:19,798 --> 00:48:22,998
and region changes and cinematic paths.

928
00:48:23,078 --> 00:48:25,019
The entire story is told that way,

929
00:48:25,119 --> 00:48:27,079
zooming in, zooming out, changing, of course,

930
00:48:27,139 --> 00:48:28,319
and lighting and whatnot.

931
00:48:28,799 --> 00:48:29,780
If you want to tell a story,

932
00:48:30,663 --> 00:48:34,284
We already in the game just use the camera

933
00:48:34,905 --> 00:48:35,745
to tell your story.

934
00:48:37,045 --> 00:48:39,086
So what do I do in Mushroom 11?

935
00:48:40,147 --> 00:48:45,229
So Mushroom 11 has multiple regions per each level.

936
00:48:46,729 --> 00:48:49,250
You can see that each of those regions

937
00:48:49,750 --> 00:48:54,092
is a very basic rectangular area

938
00:48:54,692 --> 00:48:56,473
and could be angular as well.

939
00:48:59,778 --> 00:49:02,499
And the camera can only move in that specific region.

940
00:49:02,679 --> 00:49:06,261
Also, each one of those region has a zoom factor,

941
00:49:06,281 --> 00:49:09,082
a field of view factor that allows me,

942
00:49:09,102 --> 00:49:11,624
in some cases where there are a lot of things happening,

943
00:49:11,704 --> 00:49:18,107
I can zoom out and give more attention to things up ahead.

944
00:49:21,108 --> 00:49:24,050
All these regions are numbered, so the first region.

945
00:49:24,652 --> 00:49:28,455
the first mushroom piece to go through the next region

946
00:49:29,556 --> 00:49:30,677
would take the camera with it.

947
00:49:34,700 --> 00:49:36,902
There are two main region archetypes.

948
00:49:37,462 --> 00:49:41,285
One is the center oriented, which is basically

949
00:49:41,305 --> 00:49:43,187
the camera goes to the average position

950
00:49:43,267 --> 00:49:44,448
of all the different cells.

951
00:49:48,591 --> 00:49:50,252
And the other archetype,

952
00:49:51,962 --> 00:49:56,004
is the progression-oriented regions,

953
00:49:56,604 --> 00:50:00,825
where those regions have a trajectory.

954
00:50:01,065 --> 00:50:04,727
In this case, it's just going from right to left.

955
00:50:05,507 --> 00:50:08,808
And I'm looking at all the different cells,

956
00:50:09,388 --> 00:50:10,448
different mushroom pieces,

957
00:50:11,189 --> 00:50:14,410
and the one that's most progressed on that line,

958
00:50:14,470 --> 00:50:16,971
on that trajectory, gets the camera.

959
00:50:17,211 --> 00:50:20,972
And since I know that I'm only using this behavior,

960
00:50:20,992 --> 00:50:21,552
this region.

961
00:50:24,395 --> 00:50:26,516
in cases where it's more linear motion,

962
00:50:26,876 --> 00:50:27,716
not really puzzle.

963
00:50:28,317 --> 00:50:31,238
I know that I can apply an additional static forward focus.

964
00:50:31,318 --> 00:50:34,300
I'm moving the camera even further based on that trajectory.

965
00:50:36,261 --> 00:50:39,222
In some cases, there are additional cues,

966
00:50:39,422 --> 00:50:41,823
like the attractors that we've seen in other games,

967
00:50:43,444 --> 00:50:45,605
in which case I would average the position

968
00:50:45,945 --> 00:50:47,866
based on a certain weight that I decide on

969
00:50:48,507 --> 00:50:50,588
between certain elements.

970
00:50:51,032 --> 00:50:53,053
in the game, in this case the tip of the boss,

971
00:50:53,974 --> 00:50:55,535
and the control mushroom.

972
00:50:58,258 --> 00:51:00,459
And of course, on top of everything,

973
00:51:00,519 --> 00:51:04,062
there's an interesting behavior for smoothing.

974
00:51:04,082 --> 00:51:05,844
I'm using projected focus.

975
00:51:06,024 --> 00:51:08,306
Obviously, there's no control here.

976
00:51:09,046 --> 00:51:11,148
The only thing I know of each mushroom piece

977
00:51:11,829 --> 00:51:13,750
is its velocity, really.

978
00:51:14,111 --> 00:51:15,632
I can't make it jump or anything.

979
00:51:16,152 --> 00:51:18,174
So I'm looking at its current trajectory.

980
00:51:18,601 --> 00:51:22,604
and then apply further physics smoothing based on it.

981
00:51:24,906 --> 00:51:26,687
The interesting thing that took me a long time

982
00:51:26,727 --> 00:51:31,130
to kind of figure out is the physics smoothing factor

983
00:51:31,531 --> 00:51:33,892
is based on the speed of that specific mushroom.

984
00:51:34,893 --> 00:51:37,535
When I move really, really fast, either in tunnels or...

985
00:51:38,313 --> 00:51:41,354
like we see in this case, we have a mushroom piece

986
00:51:41,374 --> 00:51:43,175
that moves really, really fast between regions,

987
00:51:45,195 --> 00:51:47,456
then the factor would be very, very low.

988
00:51:47,776 --> 00:51:50,677
I would basically try to aim for 0.5 seconds

989
00:51:50,797 --> 00:51:51,938
of full smoothing.

990
00:51:52,638 --> 00:51:55,039
But in case I'm just trimming and just exploring,

991
00:51:55,559 --> 00:51:58,860
it could easily go to two and a half, three seconds smoothing

992
00:51:59,420 --> 00:52:01,661
and that works very well for me.

993
00:52:03,207 --> 00:52:06,250
And when we have a lot of different mushroom pieces,

994
00:52:07,211 --> 00:52:09,514
different velocities, and different regions,

995
00:52:10,615 --> 00:52:12,036
this is how it all comes together.

996
00:52:17,922 --> 00:52:21,086
So that's Mushroom 11, and that's my talk.

997
00:52:21,106 --> 00:52:21,686
Thank you very much.

