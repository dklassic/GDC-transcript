1
00:00:05,684 --> 00:00:11,707
Alright, cool. So hello, thanks for coming out to the TA bootcamp, hanging out for my talk, which is

2
00:00:12,108 --> 00:00:16,570
Honey, Where's My Wingsuit? The Building the Just Cause 3 Animation and Rigging Pipeline.

3
00:00:17,311 --> 00:00:22,054
My name is Brian Vinesky. I'm the technical animator at Avalanche Studios, located in New

4
00:00:22,074 --> 00:00:25,736
York City, where for the past three and a half years I've been working on Just Cause 3.

5
00:00:25,776 --> 00:00:30,579
Now I'm going to do my best within the next hour to cover a general outline

6
00:00:31,099 --> 00:00:32,500
of some major points of note.

7
00:00:33,001 --> 00:00:36,463
as well as some specifics that are hopefully useful and interesting for you all to see.

8
00:00:40,185 --> 00:00:42,026
Just a bit about me and Avalanche to start.

9
00:00:42,946 --> 00:00:47,029
I myself am originally from the Boston area and I went to college in Boston at Northeastern

10
00:00:47,069 --> 00:00:47,549
University.

11
00:00:48,549 --> 00:00:52,592
The program at the time was pretty broad, but I found myself really enjoying the rigging

12
00:00:52,672 --> 00:00:54,052
aspect of animation.

13
00:00:55,393 --> 00:00:59,495
I dabbled by watching digital tutors, studying rigs I found on the internet, and dabbling

14
00:00:59,535 --> 00:01:00,336
a bit in mal-scripting.

15
00:01:01,617 --> 00:01:02,717
My first job out of college.

16
00:01:03,170 --> 00:01:05,953
was working on 3D visualizations for a combat simulator.

17
00:01:07,414 --> 00:01:09,256
And that actually ran off an open source engine,

18
00:01:09,796 --> 00:01:12,098
so I got used to game-like content pipeline

19
00:01:12,299 --> 00:01:12,979
pretty early on.

20
00:01:15,241 --> 00:01:17,363
About a year out of college, I was hired at 38 Studios,

21
00:01:17,703 --> 00:01:19,405
located near my home in Massachusetts

22
00:01:19,505 --> 00:01:20,326
and later Rhode Island.

23
00:01:22,027 --> 00:01:24,650
My official game dev career began as a tech artist there.

24
00:01:26,051 --> 00:01:30,075
At 38 Studios, I learned all about automation and pipelines.

25
00:01:30,724 --> 00:01:34,245
while getting smarter and more knowledgeable with things like Python scripting and more

26
00:01:34,305 --> 00:01:41,766
advanced rigging techniques in the process. I was at 38 Studios until its very end, where

27
00:01:41,786 --> 00:01:47,288
I then found my way into Avalanche. It was at Avalanche where I got to take all of the

28
00:01:47,328 --> 00:01:53,229
power and knowledge that I gained at 38 Studios and use that to build the pipeline that I'm

29
00:01:53,249 --> 00:01:54,209
about to present to you today.

30
00:01:57,093 --> 00:01:59,896
For those of you that may not know, Avalanche Studios has been around since 2003,

31
00:02:01,116 --> 00:02:03,618
where the first Just Cause was brought to life in Stockholm, Sweden.

32
00:02:04,579 --> 00:02:09,323
In late 2011, Avalanche expanded into the U.S. and opened up the studio where I'm located at,

33
00:02:09,483 --> 00:02:11,284
in the Soho neighborhood of New York City.

34
00:02:12,325 --> 00:02:14,527
New York City is the location where Just Cause 3 was created,

35
00:02:15,047 --> 00:02:17,629
and is the first and currently only game in the Avalanche catalog

36
00:02:17,809 --> 00:02:20,651
to actually be predominantly created outside of Sweden.

37
00:02:22,132 --> 00:02:23,734
Not only do we have the Just Cause series,

38
00:02:23,894 --> 00:02:26,015
but we have the recently released Mad Max game.

39
00:02:26,698 --> 00:02:30,900
the Hunter and Hunter Primal, Renegade Ops, and a recent jump into mobile with Rumble City.

40
00:02:33,501 --> 00:02:39,724
A few quick questions, who here has actually played Just Cause 3? Quite a few. Who here is an

41
00:02:39,804 --> 00:02:48,548
animator? How about tech artist or rigger working with animation teams? Awesome. So some of you

42
00:02:49,068 --> 00:02:53,250
might know a little bit about what I'm about to talk about, some of you might be completely new

43
00:02:53,450 --> 00:02:53,710
with it.

44
00:02:54,741 --> 00:02:59,245
But either way, I hope that I put something together that everyone can learn something from or at least that's interesting

45
00:03:00,806 --> 00:03:05,130
So for those of you that may not know what just cause three is it's a massive open-world sandbox

46
00:03:05,790 --> 00:03:12,156
There are tons of random characters from civilians enemies allied forces and some animals including cows

47
00:03:12,316 --> 00:03:14,477
Which for some reason people love cows?

48
00:03:18,120 --> 00:03:19,141
Now of course this talk

49
00:03:19,862 --> 00:03:22,504
Says that it's going to be about animation and rigging pipelines

50
00:03:23,144 --> 00:03:24,105
But taking it past that

51
00:03:24,563 --> 00:03:26,084
What is this talk really going to be about?

52
00:03:26,845 --> 00:03:28,506
What challenges do we have?

53
00:03:28,947 --> 00:03:30,808
What solutions did we come up to solve the issues?

54
00:03:31,589 --> 00:03:32,590
To break it down a little bit,

55
00:03:34,852 --> 00:03:36,773
there was a transition of animation software

56
00:03:37,334 --> 00:03:38,315
that I'm going to talk about.

57
00:03:41,757 --> 00:03:43,239
The transition of animation software

58
00:03:43,279 --> 00:03:44,520
was that we had MotionBuilder

59
00:03:45,020 --> 00:03:46,782
as an initial animation software

60
00:03:46,802 --> 00:03:48,323
and we wanted to move that into Maya.

61
00:03:51,466 --> 00:03:52,947
Some pipeline building we'll go through.

62
00:03:53,432 --> 00:03:57,692
includes character setup, creation of rigs and solutions,

63
00:04:04,354 --> 00:04:06,554
FBX data handling and motion capture,

64
00:04:08,294 --> 00:04:09,774
dialogue animation creation,

65
00:04:10,735 --> 00:04:11,995
and a quick post-mortem at the end.

66
00:04:14,355 --> 00:04:16,396
So, to plan the pipeline, we have to figure out

67
00:04:16,676 --> 00:04:18,256
what we have and why we have it.

68
00:04:20,936 --> 00:04:21,657
Well, we have Maya.

69
00:04:22,694 --> 00:04:27,258
We use that for character model, skeleton, ragdoll, and skinning weight export.

70
00:04:29,139 --> 00:04:33,423
That would get streamed to MotionBuilder, where a rig was created, animations are created,

71
00:04:33,823 --> 00:04:36,085
and all of the animations could be exported out to the game.

72
00:04:41,069 --> 00:04:42,450
So why do we have this pipeline?

73
00:04:43,551 --> 00:04:48,254
Now, the team in Stockholm was actually a completely MotionBuilder animation team.

74
00:04:49,515 --> 00:04:51,337
Any tools, exporter rigs, etc.

75
00:04:52,083 --> 00:04:54,205
had MotionBuilder support and no more.

76
00:04:55,946 --> 00:04:58,148
Both the tech animator and animation team in Sweden

77
00:04:58,188 --> 00:05:00,469
had been using MotionBuilder for years,

78
00:05:00,530 --> 00:05:02,851
dating back to, I believe, the first Just Cause,

79
00:05:02,971 --> 00:05:04,993
definitely the second one, and Mad Max used it.

80
00:05:06,514 --> 00:05:09,176
Just Cause 3 started with the same pipeline as Mad Max,

81
00:05:09,997 --> 00:05:12,679
but the team in New York wanted to move to Maya,

82
00:05:13,159 --> 00:05:15,061
as that was both the preference and expertise

83
00:05:15,081 --> 00:05:15,721
of most of the team.

84
00:05:17,623 --> 00:05:19,925
Now, Just Cause 3 is also a game that's about crazy,

85
00:05:20,025 --> 00:05:20,745
over-the-top style.

86
00:05:21,267 --> 00:05:23,688
Our main character Rico is a sports car riding,

87
00:05:24,088 --> 00:05:26,088
wingsuit flying, parachute deploying,

88
00:05:26,168 --> 00:05:27,529
explosion making son of a gun.

89
00:05:28,389 --> 00:05:30,890
We need a hand key pipeline that Maya provides

90
00:05:30,930 --> 00:05:32,350
to create much of this new content.

91
00:05:32,850 --> 00:05:34,551
We were planning to have such as the wingsuit.

92
00:05:37,431 --> 00:05:39,252
Now what do we want and why do we want it?

93
00:05:42,413 --> 00:05:44,513
We wanted to use Maya as our main animation package

94
00:05:44,953 --> 00:05:46,594
for its benefits with hand key animation.

95
00:05:47,134 --> 00:05:49,534
But that includes the graph editor and tangents,

96
00:05:50,114 --> 00:05:50,755
oiler filters.

97
00:05:51,729 --> 00:05:56,671
and easy to find scripts and tools on the internet such as comet tools which is an oldie

98
00:05:56,691 --> 00:06:04,794
but a goodie and a lot of other things you can find on a site like creative crash. It's also a

99
00:06:04,954 --> 00:06:10,756
little hard to capture mocap on something like a cow or a goat or a parachute or wingsuit so we

100
00:06:10,796 --> 00:06:14,358
really wanted to be able to hand key the animations for those things and make them look

101
00:06:14,438 --> 00:06:15,558
really organic and great.

102
00:06:25,105 --> 00:06:27,267
Now with this setup of using Maya for rigs and animating,

103
00:06:27,787 --> 00:06:29,828
we would also need to make sure we can get our Maya animation

104
00:06:29,868 --> 00:06:32,510
content from Maya to JustEdit, which is our editor.

105
00:06:37,433 --> 00:06:39,214
However, we still wanted to retain the features

106
00:06:39,254 --> 00:06:42,276
that MotionBuilder does so well, such as story mode, a take

107
00:06:42,316 --> 00:06:45,078
system for comparing and blending multiple motion

108
00:06:45,098 --> 00:06:46,839
capture takes of the same animation together,

109
00:06:48,160 --> 00:06:50,422
and pretty much anything that will allow us to easily

110
00:06:50,482 --> 00:06:52,883
and quickly stitch and blend together all animations

111
00:06:52,943 --> 00:06:54,064
without having to create.

112
00:06:54,683 --> 00:06:55,923
or need additional tools.

113
00:07:01,686 --> 00:07:04,707
So the first phase of our pipeline was to set up an initial workflow

114
00:07:04,847 --> 00:07:09,929
that allowed animators to both work in Maya and still have

115
00:07:10,129 --> 00:07:15,511
and get their content over from MotionBuilder. So a simple question is

116
00:07:15,851 --> 00:07:17,352
what do we need in order to make this move?

117
00:07:22,094 --> 00:07:22,914
Well we need a Maya rig.

118
00:07:23,769 --> 00:07:26,231
All of our animations are on MotionBuilder native rig,

119
00:07:26,511 --> 00:07:27,892
which at the time was FBIK,

120
00:07:28,332 --> 00:07:29,833
since we were using Maya 2012

121
00:07:30,193 --> 00:07:31,574
and MotionBuilder 2012 at the time.

122
00:07:32,875 --> 00:07:34,736
FBIK stands for full-body IK,

123
00:07:34,936 --> 00:07:36,637
which is based off the human IK solver.

124
00:07:37,678 --> 00:07:39,339
We wanted to make an equivalent rig in Maya

125
00:07:39,559 --> 00:07:40,640
that would work hand-in-hand.

126
00:07:46,083 --> 00:07:47,604
We also needed to transfer animation

127
00:07:47,644 --> 00:07:48,765
from MotionBuilder to Maya.

128
00:07:50,306 --> 00:07:51,787
MotionBuilder uses a take system.

129
00:07:52,926 --> 00:07:57,009
which is pretty much a container that stores animation data for objects in a MotionBuilder scene.

130
00:07:58,710 --> 00:08:02,653
Now I mentioned before that it has built-in properties that allow you to blend animations

131
00:08:02,713 --> 00:08:05,635
together and easily compare multiple versions of the same animation.

132
00:08:06,896 --> 00:08:10,039
Say you have a run animation and you have five different versions of that run.

133
00:08:10,399 --> 00:08:15,383
You could call the file run, but each take would be run version one, run version two.

134
00:08:17,884 --> 00:08:22,408
Our MotionBuilder pipeline at the time was set up to be run with...

135
00:08:22,798 --> 00:08:27,680
within the file, run base, run aim 90 left, run aim 90 right, if you're using additives.

136
00:08:29,800 --> 00:08:32,601
The problem is, MotionBuilder takes aren't supported in Maya.

137
00:08:33,882 --> 00:08:38,864
Now at the time I showed up at Avalanche, we had about 1,000 animations in MotionBuilder, all stored in takes.

138
00:08:41,004 --> 00:08:42,305
Now as you can see here in this picture,

139
00:08:43,785 --> 00:08:47,107
we had about roughly 40 to 50 animations in this idle animation alone.

140
00:08:48,290 --> 00:08:51,351
we needed to figure out a way to easily extract these one by one

141
00:08:51,611 --> 00:08:53,292
as separate files and get them into Maya.

142
00:08:58,794 --> 00:09:01,076
We also have an in-house data format for animations,

143
00:09:01,296 --> 00:09:03,957
so we needed to get a custom exporting process working

144
00:09:03,997 --> 00:09:06,638
in Maya, working the same way that we have in MotionBuilder.

145
00:09:11,400 --> 00:09:12,341
So to the Maya rig.

146
00:09:12,961 --> 00:09:15,582
When making our first iteration of the Maya rig,

147
00:09:16,002 --> 00:09:17,023
there was an importance on time.

148
00:09:17,672 --> 00:09:22,834
We really wanted to get into Maya as soon as possible and kind of leave MotionBuilder behind, at least for the moment.

149
00:09:23,694 --> 00:09:28,335
We were gearing up for production, and we couldn't afford to waste much time trying to figure out new things in MotionBuilder,

150
00:09:28,616 --> 00:09:30,876
while at the same time trying to build new content in Maya.

151
00:09:33,657 --> 00:09:38,438
So we used the existing skeleton that we already had, and since time was of the essence,

152
00:09:38,519 --> 00:09:44,400
we didn't really want to take the time to re-target and fix any content, which would be a huge...

153
00:09:44,962 --> 00:09:50,529
headache at the time since we really wanted to get into Maya and any sort of

154
00:09:50,949 --> 00:09:59,159
skeleton updates would be done later. It also made sure that we could get one-to-

155
00:09:59,239 --> 00:10:03,283
one transfer of animation and not have to worry about any sort of retargeting.

156
00:10:15,834 --> 00:10:17,555
We also built the rig with straightforward features

157
00:10:17,775 --> 00:10:19,055
and the basic needs for animating.

158
00:10:19,495 --> 00:10:20,656
There weren't any bells and whistles,

159
00:10:21,576 --> 00:10:24,457
and it was really important that the animators

160
00:10:24,677 --> 00:10:27,158
also had something functional and usable

161
00:10:27,778 --> 00:10:28,758
to do what they needed at the time.

162
00:10:30,939 --> 00:10:32,979
The animators also needed to get used to Maya again.

163
00:10:33,680 --> 00:10:36,380
At the time in New York, MotionBuilder was being used

164
00:10:36,400 --> 00:10:38,621
for about eight to 10 months since the studio had opened,

165
00:10:39,541 --> 00:10:41,142
and other animators on the team

166
00:10:41,562 --> 00:10:43,923
had been using MotionBuilder for longer at previous jobs.

167
00:10:48,129 --> 00:10:50,710
Using the same skeleton also allowed us to debug issues.

168
00:10:51,851 --> 00:10:55,233
There are some issues on our rig that cause a little bit of undesired behavior in the game.

169
00:10:59,016 --> 00:11:02,238
This Maya rig actually allowed me to take a look at some of the outstanding issues

170
00:11:02,698 --> 00:11:05,681
and able to debug them in Maya versus in MotionBuilder.

171
00:11:06,881 --> 00:11:10,904
Such as, I don't know if it's easy to see on this picture, but the middle spine here is

172
00:11:11,184 --> 00:11:12,405
rotated 180 and Z.

173
00:11:13,206 --> 00:11:14,907
One issue that we had was that the

174
00:11:16,242 --> 00:11:19,705
spine was in negative 180 joint orientation,

175
00:11:19,905 --> 00:11:22,347
which would make the top spine have to get countered in 180.

176
00:11:23,167 --> 00:11:25,949
In MotionBuilder, you would have to retarget

177
00:11:26,009 --> 00:11:27,631
or go through every single new animation

178
00:11:27,711 --> 00:11:30,993
with the FBIK rig to actually fix any sort of skeleton

179
00:11:31,754 --> 00:11:33,014
that got screwed up like this.

180
00:11:33,275 --> 00:11:36,857
Now in Maya, I was able to fix the skeleton between that

181
00:11:37,518 --> 00:11:40,600
and on the new rig, since we kept the same joint position,

182
00:11:40,860 --> 00:11:42,882
I could easily transfer the animation over

183
00:11:43,082 --> 00:11:44,503
and it would sort of fix itself on the web.

184
00:11:59,856 --> 00:12:02,897
Now we need to go back to MotionBuilder takes in order to discuss our animation transfer

185
00:12:02,937 --> 00:12:08,220
process. Since Maya doesn't use them, we chose to organize our animations one per file and

186
00:12:08,280 --> 00:12:11,662
use folders and naming conventions for things like additive animations to organize them.

187
00:12:13,042 --> 00:12:19,406
Now how do we get the takes exported as single files? While I was busy working on the Maya

188
00:12:19,426 --> 00:12:19,506
rig,

189
00:12:21,733 --> 00:12:28,935
Another tech artist at Avalanche at the time helped me by teaching himself some Python API within MotionBuilder also known as PyFBSDK

190
00:12:30,936 --> 00:12:33,457
He also helped me along the way to learn this

191
00:12:34,757 --> 00:12:42,240
But this allowed us to find all of our animations and takes and physically cycle through each one while batch exporting them all as single files

192
00:12:44,661 --> 00:12:49,502
These animation files contained only a skeleton and baked down keyframe animation on that skeleton

193
00:12:50,578 --> 00:12:52,759
The single files were also completely stripped and cleaned

194
00:12:52,799 --> 00:12:54,380
of any artifacts and rig information.

195
00:12:56,020 --> 00:12:58,241
These data files could actually be exported straight

196
00:12:58,281 --> 00:13:01,263
from the game, or perhaps transferred to a proper Maya

197
00:13:01,283 --> 00:13:01,463
rig.

198
00:13:02,664 --> 00:13:03,964
And here's the main function that we

199
00:13:04,064 --> 00:13:07,306
use to actually transfer this animation over in Maya

200
00:13:07,446 --> 00:13:10,807
from that FBX export from MotionBuilder.

201
00:13:15,029 --> 00:13:18,691
What the script does exactly is allow the animator in Maya

202
00:13:18,711 --> 00:13:19,531
to choose an FBX.

203
00:13:21,286 --> 00:13:25,087
It adds the rig to a fresh Maya file with the FBX animation.

204
00:13:26,567 --> 00:13:29,588
It constrains them together and it bakes that animation data

205
00:13:29,608 --> 00:13:30,608
down onto a Maya rig.

206
00:13:33,389 --> 00:13:35,770
For good measure, it copied all of the key frame animation,

207
00:13:35,930 --> 00:13:39,271
opened a fresh new file, re-referenced the Maya rig and

208
00:13:39,331 --> 00:13:41,971
pasted all of this data back onto a Maya rig.

209
00:13:42,311 --> 00:13:44,332
This was done just to ensure that we didn't have any

210
00:13:44,512 --> 00:13:47,853
unneeded artifacts or data that we didn't want inside the file.

211
00:13:49,775 --> 00:13:53,977
Now just to note, we did later have a batch process to do all this, but of course, since

212
00:13:54,017 --> 00:13:59,459
time was of the essence, we didn't have that right now, and the animators would just need

213
00:13:59,499 --> 00:14:03,260
to import the MotionBuilder files on an as-needed basis.

214
00:14:05,701 --> 00:14:09,263
Now I also mentioned the custom format at Avalanche for exporting and reading animation

215
00:14:09,283 --> 00:14:09,523
data.

216
00:14:10,603 --> 00:14:15,025
Originally, that export process was written in C++ and run using a plugin that loaded

217
00:14:15,045 --> 00:14:15,865
it up in MotionBuilder.

218
00:14:17,588 --> 00:14:20,490
that C++ was converted to Python and modularized

219
00:14:21,151 --> 00:14:24,053
so that there was a common core used to write

220
00:14:24,693 --> 00:14:27,535
our custom data structures and wasn't software dependent,

221
00:14:28,396 --> 00:14:29,937
allowing us to write our Maya exporter

222
00:14:29,977 --> 00:14:33,119
and wrap up our animation data into the proper format in Maya

223
00:14:33,559 --> 00:14:35,320
the same way the motion builder side of things were done.

224
00:14:37,242 --> 00:14:39,103
So now that we have a Maya rig, the ability

225
00:14:39,143 --> 00:14:41,505
to move our current animation content onto this rig

226
00:14:41,785 --> 00:14:44,286
and a way to export our animation to our editor,

227
00:14:45,908 --> 00:14:47,168
it's time to build a proper pipeline.

228
00:14:53,752 --> 00:14:57,715
So let's take a quick look at character setup, which will provide the base for our rigging.

229
00:14:59,316 --> 00:15:02,038
Here we have a basic mesh and our NPC character skeleton.

230
00:15:03,119 --> 00:15:06,441
Every character model we have has a file that looks pretty similar to this,

231
00:15:06,901 --> 00:15:09,243
which is just a bound mesh and its skin to the skeleton.

232
00:15:12,826 --> 00:15:17,269
This is the file that we use to export our skinning data, model information, and skeleton to the game.

233
00:15:17,909 --> 00:15:19,891
From this, the game knows our default bind post.

234
00:15:20,611 --> 00:15:22,373
It's also the same setup that we build our rigs on.

235
00:15:24,248 --> 00:15:26,069
Now each skeleton has an accompanying ragdoll,

236
00:15:26,269 --> 00:15:27,730
which we use Havok technology for.

237
00:15:27,770 --> 00:15:31,411
The ragdoll itself has its own file

238
00:15:31,431 --> 00:15:32,552
with the skeleton referenced in.

239
00:15:34,793 --> 00:15:37,014
Now not only do we use Havok as our ragdoll solution,

240
00:15:37,414 --> 00:15:39,135
we actually use it for our skeletal data

241
00:15:39,195 --> 00:15:40,055
and animation as well.

242
00:15:42,437 --> 00:15:43,917
We had a few hundred unique characters

243
00:15:43,937 --> 00:15:45,638
that needed to be bound, skinned, and exported though.

244
00:15:46,719 --> 00:15:48,540
So we had a need for a tool that allowed

245
00:15:48,560 --> 00:15:50,661
the character artists to take their created characters

246
00:15:50,841 --> 00:15:52,742
and quickly bind them with any resulting weights.

247
00:15:53,779 --> 00:15:55,780
that were much better than the Maya default setting

248
00:15:56,021 --> 00:15:57,742
and at a level good enough to see and review

249
00:15:57,782 --> 00:15:58,582
those models in game.

250
00:16:02,745 --> 00:16:04,786
But binding a mesh for export to just edit

251
00:16:04,866 --> 00:16:05,947
has a few strict rules.

252
00:16:06,728 --> 00:16:09,089
One example in particular is that even if a joint

253
00:16:09,109 --> 00:16:10,470
has zero influence on a whole mesh,

254
00:16:10,650 --> 00:16:11,651
such as a reference joint,

255
00:16:12,091 --> 00:16:14,273
it still needs to be a known object to that model in game.

256
00:16:15,614 --> 00:16:19,876
Now, most of you might be aware of Maya having a setting

257
00:16:20,517 --> 00:16:22,878
in Smoothbind called remove unused influences.

258
00:16:23,695 --> 00:16:26,457
we needed to make sure that remove unused influences

259
00:16:26,497 --> 00:16:27,278
was unchecked.

260
00:16:28,438 --> 00:16:30,259
But a setting like that could easily be passed over.

261
00:16:31,400 --> 00:16:33,481
So this tool sort of did that exactly for you.

262
00:16:46,789 --> 00:16:48,310
And that basic mesh that we just looked at

263
00:16:48,370 --> 00:16:50,191
was actually an envelope mesh

264
00:16:50,652 --> 00:16:52,533
and is used to reference into a character file.

265
00:16:52,895 --> 00:16:56,198
have its weights copied over to the actual mesh, and then it would be unreferenced.

266
00:16:57,138 --> 00:17:01,221
The result isn't quite 100% shippable skin weighting, but it got us to maybe 80% of the

267
00:17:01,241 --> 00:17:02,182
weight we needed to be.

268
00:17:02,202 --> 00:17:07,145
It was good enough so that arms, legs, torso, and for the most part the rest of the body

269
00:17:07,185 --> 00:17:11,108
moved around as expected without any crazy deformations, and skinning polish wasn't nearly

270
00:17:11,148 --> 00:17:11,868
as bad as it could be.

271
00:17:16,865 --> 00:17:20,788
Now the tool itself also had a vert weight export and import feature that was run using

272
00:17:20,848 --> 00:17:25,312
some Python API because of its speed benefits over commands or even mount.

273
00:17:30,176 --> 00:17:35,160
This tool also has the ability to see if a mesh has over R4 joint influence maximum on

274
00:17:35,180 --> 00:17:40,644
any verts and allow you to auto prune that to 4 influences or even just check to see

275
00:17:40,704 --> 00:17:41,665
if anything has more than 4.

276
00:17:44,487 --> 00:17:46,388
So you might say that it's just character skinning.

277
00:17:46,828 --> 00:17:48,849
Why do we actually need some fancy tools to bind?

278
00:17:49,209 --> 00:17:50,810
Well, this is why.

279
00:17:50,830 --> 00:17:53,632
If proper settings weren't applied when binding,

280
00:17:54,072 --> 00:17:56,033
we ran the risk of running problems like skeleton

281
00:17:56,173 --> 00:17:57,154
and model mismatching.

282
00:17:57,914 --> 00:17:59,695
It could lead to something that we dubbed in the studio

283
00:17:59,755 --> 00:18:01,076
as the mesh monster of doom.

284
00:18:01,096 --> 00:18:06,339
All right, time to talk rigging.

285
00:18:07,200 --> 00:18:10,122
We used an auto build system built in Python

286
00:18:10,182 --> 00:18:11,022
using Maya commands.

287
00:18:11,502 --> 00:18:14,124
Now, auto build systems are pretty par for the course

288
00:18:14,184 --> 00:18:15,305
in many studios today.

289
00:18:16,859 --> 00:18:18,680
But hopefully the look into the way that we did it

290
00:18:18,800 --> 00:18:21,081
could be a little different than some of you are used to.

291
00:18:22,481 --> 00:18:23,781
So we didn't have a ton of unique rigs

292
00:18:23,821 --> 00:18:25,642
that a game such as an MMO or a MOBA

293
00:18:25,762 --> 00:18:29,523
with lots of characters, shapes, heights, what have you,

294
00:18:29,603 --> 00:18:30,224
would actually need.

295
00:18:30,944 --> 00:18:32,384
And AutoBuilder was important to us

296
00:18:32,464 --> 00:18:34,965
due to the amount of iteration we planned to do

297
00:18:35,105 --> 00:18:35,685
and actually did.

298
00:18:36,286 --> 00:18:38,226
And it also helped to iterate quickly

299
00:18:38,686 --> 00:18:40,207
due to a small rigging team size.

300
00:18:41,788 --> 00:18:44,008
Now the bind post skin character models you just saw

301
00:18:44,088 --> 00:18:46,149
were that base that we built the rigs on, as I had said.

302
00:18:49,572 --> 00:18:53,295
Each unique rig would get a build file, which is the blueprint that would tell the system

303
00:18:53,335 --> 00:18:54,175
how to build the rig.

304
00:18:56,777 --> 00:19:01,140
This is where our character would be set into a rig pose or T-pose, add reference controls,

305
00:19:01,420 --> 00:19:05,943
set up secondary animation controls, call our build modules, save the rig out.

306
00:19:06,563 --> 00:19:09,345
If it's not in this blueprint file, it's not going to be in the rig.

307
00:19:12,607 --> 00:19:15,249
Now all rigs use the same initialize and finalize process.

308
00:19:16,107 --> 00:19:19,810
which is where groups and nodes are created to organize everything into a single top group

309
00:19:19,850 --> 00:19:23,593
in the outliner and any housekeeping and clean up was done to neatly package a rig together.

310
00:19:25,735 --> 00:19:31,860
Also modules were being called by the build files were the same for each character. Cows

311
00:19:32,620 --> 00:19:39,866
could use the same leg as a human for example. So I'm going to do my best to take a quick

312
00:19:39,886 --> 00:19:43,869
look at our build files for you. With all this code and what not going on.

313
00:19:47,545 --> 00:19:50,527
But let's break it down to a few pieces to actually try to understand it better.

314
00:19:51,148 --> 00:19:55,151
To start the process, we would initialize all our modules in classes that we'll be calling.

315
00:19:56,131 --> 00:19:58,733
As you can see, we called the build class first up at the top,

316
00:19:59,554 --> 00:20:02,036
which would hold all of our base rig modules such as armor leg.

317
00:20:03,457 --> 00:20:07,580
We then start the build by initializing and adding a meta group and master node.

318
00:20:17,667 --> 00:20:19,148
The rest of the modules are then called,

319
00:20:20,990 --> 00:20:24,373
which are later used to create things like reference controls such as root position arrow,

320
00:20:24,893 --> 00:20:27,916
cameras used for visual reference in Maya which would include a follow cam,

321
00:20:28,336 --> 00:20:30,418
made to mimic the player camera that you would see in game,

322
00:20:30,938 --> 00:20:32,820
and deformers such as like arm twist helpers.

323
00:20:37,444 --> 00:20:41,888
Now that deformer module is used to set up most of our secondary and helper controls used for corrective animation.

324
00:20:43,429 --> 00:20:45,050
Setup secondary was the simplest form.

325
00:20:45,427 --> 00:20:49,229
and we'd just create a simple control on something like Rico's harness straps in order to be

326
00:20:49,269 --> 00:20:49,689
hand keyed.

327
00:20:50,350 --> 00:20:53,671
You could also add a driven node to the control if you wanted to or an expression.

328
00:20:58,514 --> 00:21:02,977
Setup driven, which would create expressions and utility nodes such as multiply, divide

329
00:21:02,997 --> 00:21:04,318
and clamp could also be created here.

330
00:21:04,958 --> 00:21:10,822
This allowed us to create something where we could have the arm rotate up and say multiply

331
00:21:10,862 --> 00:21:14,704
that by a certain value to get a translational value of a helper joint in the chest.

332
00:21:19,230 --> 00:21:23,294
I had a setDrivenKeys command written up that was an easy way to create setDrivenKeys by

333
00:21:23,334 --> 00:21:26,756
stating the value of a particular attribute of a driver and giving you the values and

334
00:21:26,796 --> 00:21:28,177
type of animation curve you wanted.

335
00:21:30,779 --> 00:21:34,682
These were used when we wanted more organic motion in our corrective joints and were able

336
00:21:34,702 --> 00:21:38,565
to use tangents on the in and out rather than using expressions straightforward.

337
00:21:41,548 --> 00:21:44,890
Now to finish the process we would t-pose our rig after all the helpers and correctives

338
00:21:44,910 --> 00:21:47,973
were created and build the core base of our setup.

339
00:21:48,927 --> 00:21:51,208
This included the torso, head, arm, and leg.

340
00:21:52,209 --> 00:21:53,890
And to note, the arm and the leg were actually built

341
00:21:54,050 --> 00:21:55,711
on their own IK limb nodule,

342
00:21:56,391 --> 00:21:58,052
and just inherited that class from that.

343
00:22:00,073 --> 00:22:01,013
Next, we would add hands,

344
00:22:01,153 --> 00:22:02,734
which for Rico included five fingers,

345
00:22:02,794 --> 00:22:04,595
and for NPCs included three fingers,

346
00:22:04,635 --> 00:22:06,776
which was actually the thumb index

347
00:22:06,936 --> 00:22:08,577
in these three fingers as one.

348
00:22:11,058 --> 00:22:11,899
Feet would come next.

349
00:22:12,699 --> 00:22:14,900
And here we give values for toe tip, heel,

350
00:22:15,020 --> 00:22:17,262
and sides of feet for foot bank.

351
00:22:19,660 --> 00:22:21,680
And before finalizing the rig, we could save it out,

352
00:22:22,380 --> 00:22:23,841
add a face setup if we wanted to,

353
00:22:24,521 --> 00:22:26,641
which for cinematic rigs was just pure FK,

354
00:22:27,101 --> 00:22:29,062
and for in-game was about a 10 joint face

355
00:22:29,302 --> 00:22:30,202
with some drivens on it.

356
00:22:37,023 --> 00:22:38,403
One cool process that we utilized

357
00:22:38,463 --> 00:22:40,384
was a controls.py file,

358
00:22:41,224 --> 00:22:44,785
which was used to actually build custom controls per rig.

359
00:22:45,865 --> 00:22:48,285
The file was full of functions like this clavicle control,

360
00:22:48,783 --> 00:22:51,423
and allowed us to create unique curves, shapes, and colors

361
00:22:51,464 --> 00:22:53,524
based on a per rig basis.

362
00:22:54,704 --> 00:22:56,045
Shapes could be created by hand,

363
00:22:56,225 --> 00:22:58,125
and a script would be used to convert them

364
00:22:58,185 --> 00:22:59,486
into a point-by-point form,

365
00:23:00,026 --> 00:23:01,966
which then we could copy and paste into this file.

366
00:23:05,867 --> 00:23:07,408
Now you can see some of those unique curves

367
00:23:07,448 --> 00:23:08,228
between rigs here.

368
00:23:09,348 --> 00:23:12,149
Doesn't matter if you're a human, animal, or wingsuit,

369
00:23:12,449 --> 00:23:13,929
or even a cinematic-specific rig,

370
00:23:14,389 --> 00:23:15,890
every rig gets a similar build file.

371
00:23:16,859 --> 00:23:19,820
animals such as the cow, more similar to a human byped set up

372
00:23:20,120 --> 00:23:23,742
which get four legs instead of two arms and two legs. The wing

373
00:23:23,762 --> 00:23:26,463
suit doesn't use an arm or a head of course, but we still set

374
00:23:26,503 --> 00:23:30,265
it up, create utility nodes, set driven keys, so forth. And we

375
00:23:30,285 --> 00:23:36,287
finalize it in the same way. Same goes for the parachute. Now

376
00:23:36,307 --> 00:23:38,969
for anyone who's actually a Max user, I recommend checking out a

377
00:23:38,989 --> 00:23:42,270
talk from last year, I believe it was Richard Katz, who spoke a

378
00:23:42,310 --> 00:23:45,512
little bit about Max, a Max rigging pipeline that he had set

379
00:23:45,552 --> 00:23:45,592
up.

380
00:23:50,299 --> 00:23:52,380
And here's a few essential tools that accompany our rigs.

381
00:23:52,660 --> 00:23:54,921
I mean, these are pretty standard as well for the course.

382
00:24:02,025 --> 00:24:04,646
Our IK-FK match was able to do a single frame timeline

383
00:24:04,686 --> 00:24:06,807
or specified range of arms, legs, and spine.

384
00:24:07,827 --> 00:24:12,770
Whether we're going from an IK or whether going from FK to IK or vice versa,

385
00:24:13,590 --> 00:24:15,371
our parent space switching could do the same thing.

386
00:24:16,653 --> 00:24:21,395
and would allow, in eBulletools would actually allow us to multi select controls and run the same

387
00:24:21,435 --> 00:24:22,155
process on

388
00:24:23,136 --> 00:24:25,597
up to as many controls as you wanted to at once.

389
00:24:30,279 --> 00:24:33,500
We also had a weapon constraining tool that would allow for quick placement of weapons and

390
00:24:33,540 --> 00:24:34,560
props if you're a civilian

391
00:24:35,041 --> 00:24:37,322
into the left or right hands or holster positions.

392
00:24:40,063 --> 00:24:43,444
You could also choose to have a weapon follow the hands in either FK or IK

393
00:24:43,784 --> 00:24:46,025
as well as have a weapon drive the IK arm itself.

394
00:24:46,917 --> 00:24:50,600
Any setup could easily be deleted and recreated should you choose to switch it up.

395
00:24:55,845 --> 00:24:57,246
Now going back to the rigs themselves,

396
00:24:57,986 --> 00:25:03,851
one really cool technique that we utilized in conjunction with our set-driven keys and expression nodes was joint riveting to follicles.

397
00:25:04,672 --> 00:25:09,436
If you're unaware of what a follicle in Maya is, you can get it from creating a hair system and deleting the actual hair node.

398
00:25:10,156 --> 00:25:12,638
You're left with a small little red crosshair-like object.

399
00:25:13,688 --> 00:25:17,250
that has UV properties that allow you to slide it along the UVs of the mesh.

400
00:25:17,510 --> 00:25:20,592
I'm not sure if you can actually see the little red crosshairs on that picture.

401
00:25:21,392 --> 00:25:25,014
But you can use this follicle to rivet or constrain any object to that mesh.

402
00:25:26,475 --> 00:25:30,437
Now on the right side, there's a bluish mesh that is the duplicate of Rico's jacket.

403
00:25:31,917 --> 00:25:34,178
And Rico being our main character in the game of Just Cause 3.

404
00:25:38,821 --> 00:25:41,642
This driver mesh, or this mesh rather, is skinned.

405
00:25:42,210 --> 00:25:46,411
just to the base skeletal joints of the character, which is spine, shoulders, and arm.

406
00:25:49,272 --> 00:25:53,413
These follicles were set up to, and then follicles were set up to coincide with the joints set

407
00:25:53,473 --> 00:25:56,314
up for the harness of Rico, which you can see on the left side.

408
00:25:59,834 --> 00:26:05,116
Now this driver mesh on the right, thanks to being skinned, moves with Rico along with

409
00:26:05,196 --> 00:26:09,477
it the follicles, and in turn drive controls and joints that we have set up with the harness.

410
00:26:11,832 --> 00:26:15,453
This was set up in a way that the harness controls would not only move with Rico's jacket,

411
00:26:15,873 --> 00:26:19,434
but also have the ability for extra driven keys or expressions on top of that,

412
00:26:20,014 --> 00:26:24,155
which helped create some nice subtle offset movement and fix problems like mesh clipping.

413
00:26:25,196 --> 00:26:27,936
On top of it all, you could still tweak animation by hand on the control itself.

414
00:26:31,797 --> 00:26:35,638
So as you can see, lifting the arms up, the harness will move with the body.

415
00:26:36,018 --> 00:26:39,499
Same goes if you twist the spine left-right or back-and-forth.

416
00:26:46,760 --> 00:26:50,901
Also taking this riveting one step further, we used it to simulate a cloth-like look on

417
00:26:50,921 --> 00:26:51,401
the wingsuit.

418
00:26:52,181 --> 00:26:55,562
Now the wingsuit mesh was duplicated as well, follicles applied per joint.

419
00:26:57,902 --> 00:27:03,703
And here we have the duplicated mesh in wireframe form with the follicles attached to it.

420
00:27:04,684 --> 00:27:09,565
Now for the wingsuit, we took a sine wave deformer and applied this to that driver mesh,

421
00:27:10,045 --> 00:27:13,465
which could be keyframed with settings like amplitude and offset.

422
00:27:14,075 --> 00:27:18,217
to create some really nice secondary motion to simulate some wind movement on the wingsuit.

423
00:27:22,780 --> 00:27:26,102
Add in some driven keys created from extreme poses made by an animator and with just a

424
00:27:26,182 --> 00:27:28,744
few animation controls we get some great movement on the wingsuit.

425
00:27:30,065 --> 00:27:33,727
And all of these cloth-like movements was just me playing around with keyframes for

426
00:27:33,767 --> 00:27:35,488
like maybe four or five minutes.

427
00:27:39,114 --> 00:27:42,316
Just remember this is all simple joint based animation on a skin mesh.

428
00:27:42,356 --> 00:27:44,117
There's actually no sim going on.

429
00:27:46,538 --> 00:27:50,241
And if you think about the tools like sine deformer or even go further like bend, wave

430
00:27:50,261 --> 00:27:55,944
deformers or using end cloth to drive a joint, a mesh, you can get some pretty awesome organic

431
00:27:55,984 --> 00:27:57,645
looking results with this technique.

432
00:28:02,408 --> 00:28:07,711
Well now that we can build our rigs, we have some, we need to, and have some, sorry.

433
00:28:08,253 --> 00:28:11,294
Now that we can build our rigs, we need some essential tools to go with them.

434
00:28:12,534 --> 00:28:16,896
It's time to tie MotionBuilder back into this pipeline and get to that full circle that

435
00:28:16,916 --> 00:28:18,096
we talked about at the beginning of the talk.

436
00:28:26,719 --> 00:28:28,519
This was mainly done with the power of this tool.

437
00:28:29,720 --> 00:28:31,940
On top, there's the import FBX to Maya rig.

438
00:28:32,420 --> 00:28:35,281
On the bottom, there's export animation for MotionBuilder.

439
00:28:36,702 --> 00:28:37,742
You simply choose your target.

440
00:28:38,250 --> 00:28:41,273
and the Maya animation or FBX you want to import or export and you run it.

441
00:28:44,476 --> 00:28:47,799
To set up our rigs for the motion builder side, we could build them in Maya thanks to

442
00:28:47,859 --> 00:28:49,440
its integration of the human IK plugin.

443
00:28:50,281 --> 00:28:55,286
Any human or biped skeleton was characterized before their respective rigs were built, done

444
00:28:55,326 --> 00:28:56,607
thanks to the function here on the right.

445
00:29:00,610 --> 00:29:04,414
We ended up building not only our Maya rig after characterization, but we built an HIK

446
00:29:04,454 --> 00:29:04,894
rig as well.

447
00:29:05,669 --> 00:29:10,573
When transferring animation, the HIK rig here on the left would be imported into a fresh Maya file.

448
00:29:11,014 --> 00:29:17,339
Then the Maya animation on the Maya rig you see on the right would be referenced into the same file.

449
00:29:18,800 --> 00:29:23,664
When importing to Maya, the result is an FBX animation transferred and baked down to our Maya rig.

450
00:29:24,725 --> 00:29:28,028
In MotionBuilder, you have your Maya animation baked down to a human IK rig.

451
00:29:30,049 --> 00:29:32,772
Now earlier I mentioned that the initial rig the animation team used...

452
00:29:33,229 --> 00:29:38,512
was an FBIK which was based off the human IK solver. So using human IK or HIK as I'll

453
00:29:38,552 --> 00:29:43,454
refer to it as wasn't any different for the team. And for reference, anyone who may not

454
00:29:43,494 --> 00:29:48,516
be familiar with the human IK solver or rig solution, HIK is a system that includes manipulation

455
00:29:48,556 --> 00:29:53,118
controls with the ability to pin them as if you're using an IK control in Maya set to

456
00:29:53,138 --> 00:29:57,740
the world. It is both a full body and body part keying solution.

457
00:30:01,272 --> 00:30:03,293
So here we have a short run cycle on Rico.

458
00:30:06,576 --> 00:30:13,660
And we run that script, it would bring that HIK rig in, and we would get that animation into MotionBuilder.

459
00:30:14,941 --> 00:30:15,181
With...

460
00:30:19,724 --> 00:30:24,107
And that's just the same exact animation, mesh hidden, so it's easier to see the HIK rig for you.

461
00:30:26,208 --> 00:30:28,950
So now that the animation is baked down onto our HIK rig...

462
00:30:29,288 --> 00:30:32,870
The Maya rig would be unreferenced and we can open that up in MotionBuilder as you just saw.

463
00:30:33,911 --> 00:30:37,954
Once the animation is in MotionBuilder, the animators can then edit this animation up,

464
00:30:38,414 --> 00:30:41,256
compare takes, bring it into story mode, stitch things together,

465
00:30:41,316 --> 00:30:43,417
do whatever they needed to that MotionBuilder provides.

466
00:30:44,878 --> 00:30:49,922
All that we need to do is save this file out, and then use that tool in Maya to import it back.

467
00:30:55,986 --> 00:30:58,828
Now we have a way to wrangle our FBX files and motion capture.

468
00:30:59,267 --> 00:31:00,868
using both Maya and MotionBuilder.

469
00:31:05,269 --> 00:31:07,350
Here's a quick look at our motion capture solutions.

470
00:31:08,230 --> 00:31:10,111
We did use your typical studio capture

471
00:31:10,171 --> 00:31:13,432
for both cinematics and in-game animations.

472
00:31:17,773 --> 00:31:19,894
We also had a really great in-house workflow

473
00:31:19,954 --> 00:31:21,234
using Xsense technology.

474
00:31:21,955 --> 00:31:23,575
And here's just a quick picture of me

475
00:31:23,595 --> 00:31:25,056
putting the suit on just a few weeks ago.

476
00:31:26,896 --> 00:31:28,677
For anyone not familiar with Xsens tech,

477
00:31:28,958 --> 00:31:31,099
they're gyroscopic motion capture suits

478
00:31:31,180 --> 00:31:32,761
that you can use at home, in studio,

479
00:31:33,141 --> 00:31:35,123
or pretty much anywhere people won't find it weird

480
00:31:35,163 --> 00:31:37,285
that a person in a skin tight spandex suit

481
00:31:37,345 --> 00:31:38,726
is moving around like a crazy person.

482
00:31:40,247 --> 00:31:42,589
Now real estate in New York is not the easiest to come by,

483
00:31:43,009 --> 00:31:45,431
so having something that we could use right in the studio

484
00:31:45,471 --> 00:31:46,752
was pretty necessary for us.

485
00:31:47,533 --> 00:31:49,354
Xsens proved beneficial in the fact

486
00:31:49,475 --> 00:31:51,296
that it allowed us to work really quickly,

487
00:31:51,917 --> 00:31:53,258
and we can capture multiple takes

488
00:31:53,638 --> 00:31:55,680
and get pickup animations all in a,

489
00:31:56,123 --> 00:31:57,304
Pretty quick moments notice.

490
00:32:03,265 --> 00:32:06,826
Now all of our motion capture whether it was studio created or Xsens created

491
00:32:07,326 --> 00:32:10,547
was easily brought into MotionBuilder for stitching and editing and then brought

492
00:32:10,567 --> 00:32:12,147
straight into Maya for some hand-keyed love.

493
00:32:16,088 --> 00:32:19,989
Now HumanIK not only allows us to bring our animations from Maya to MotionBuilder

494
00:32:20,029 --> 00:32:21,370
for editing and back to Maya

495
00:32:21,790 --> 00:32:24,350
but we reap the benefits of its retargeting properties as well.

496
00:32:25,610 --> 00:32:29,133
Our Ricoh skeleton had a different proportion and size from our NPC skeleton.

497
00:32:29,653 --> 00:32:33,115
So if an animator wanted to take a Ricoh animation and transfer it to an enemy or rebel,

498
00:32:33,556 --> 00:32:38,999
which is what you see here, or a civilian, the FBX Import-Export tool could be used to do so.

499
00:32:39,800 --> 00:32:43,982
As you can see, this is an idle on Ricoh, and the same idle on the rebel.

500
00:32:44,563 --> 00:32:47,805
Rebel's a little shorter, but retargeting over wasn't too much of a problem.

501
00:32:50,166 --> 00:32:54,429
Now all you need to do is actually choose the target character that you want the source animation to be applied to.

502
00:32:54,970 --> 00:32:59,712
And then the reach and pull settings on the HIK rig would be set for the arms, legs and

503
00:32:59,752 --> 00:33:01,633
torso and kind of lock them into place.

504
00:33:16,922 --> 00:33:20,864
Now here are those HIK reach and pull settings if you're unfamiliar with HIK.

505
00:33:21,713 --> 00:33:25,016
There's a HIK properties node that every HIK rig has,

506
00:33:25,516 --> 00:33:27,938
and we'll help the HIK work the magic of retargeting.

507
00:33:29,979 --> 00:33:31,900
Now with this in mind, let's go back to our initial

508
00:33:31,960 --> 00:33:33,801
Ricoh skeleton that we had during the transfer

509
00:33:33,821 --> 00:33:35,002
of animation from MotionBuilder.

510
00:33:36,483 --> 00:33:38,284
Now I mentioned we would add the bells and whistles later,

511
00:33:38,765 --> 00:33:39,725
and here's the bells and whistles.

512
00:33:41,687 --> 00:33:45,409
While the animators were busy working happily in Maya,

513
00:33:45,869 --> 00:33:47,731
let's call it our transition to Maya phase,

514
00:33:48,491 --> 00:33:50,092
or our transition to Maya rig, rather.

515
00:33:50,714 --> 00:33:53,376
our new Ricoh rig was built on a completely remade skeleton.

516
00:33:53,956 --> 00:33:55,297
This skeleton was a little taller,

517
00:33:55,397 --> 00:33:57,058
included slightly different proportions

518
00:33:57,318 --> 00:33:59,540
than the existing one, which was necessary

519
00:33:59,580 --> 00:34:01,261
and made for better deformation than we had.

520
00:34:02,422 --> 00:34:04,423
And overall look of animation was better as well.

521
00:34:08,946 --> 00:34:11,027
We were able to utilize our nice new retargeter,

522
00:34:11,187 --> 00:34:13,469
thanks to HIK, which allowed this final switch

523
00:34:13,489 --> 00:34:15,290
from the old skeleton to the new skeleton.

524
00:34:20,104 --> 00:34:23,046
All we had to do was run a batch of this retarget,

525
00:34:23,447 --> 00:34:25,348
of the FBX import export tool,

526
00:34:26,109 --> 00:34:28,731
onto a rig in a new file and rename it out.

527
00:34:29,672 --> 00:34:31,793
Now having this dual Maya and MotionBuilder workflow

528
00:34:31,813 --> 00:34:34,055
was a huge win for us and gave us that original goal

529
00:34:34,395 --> 00:34:36,337
of being able to utilize both motion capture

530
00:34:36,477 --> 00:34:37,818
and traditional hand-keyed animation

531
00:34:37,878 --> 00:34:38,819
in a pretty painless way.

532
00:34:47,405 --> 00:34:49,627
Now, we also had an in-game dialogue system.

533
00:34:51,272 --> 00:34:55,015
that we wanted to set up with an automatic lip-sync process to drive animation.

534
00:34:56,175 --> 00:34:59,438
Now we actually achieved this using MotionBuilder's built-in voice device.

535
00:35:00,578 --> 00:35:03,540
Now if you're unfamiliar with it, it is similar to face effect software

536
00:35:04,081 --> 00:35:07,723
and allows you to create automatically generated animation based off of sounds

537
00:35:07,763 --> 00:35:08,964
given off from audio files.

538
00:35:10,305 --> 00:35:13,427
Now here we have a face GUI that is driving our NPC skeleton.

539
00:35:14,508 --> 00:35:18,950
And this is showing frame poses, one frame poses that we had created

540
00:35:19,051 --> 00:35:20,431
and used as additive animations.

541
00:35:20,915 --> 00:35:24,098
This included things like mouth open closed, mouth narrow wide.

542
00:35:29,162 --> 00:35:32,565
Once the poses were figured out and set to sliders, we got a typical face rig

543
00:35:32,605 --> 00:35:33,566
suitable for animating.

544
00:35:38,290 --> 00:35:40,072
The face setup was pretty simple

545
00:35:40,572 --> 00:35:44,475
for NPCs. About ten joints, and even Rico had the same in-game face setup.

546
00:35:45,296 --> 00:35:48,599
It made pretty quick to iterate and work out the way sliders drove the face.

547
00:35:49,210 --> 00:35:53,373
as well as stay within memory budget when you start populating the screen with dozens

548
00:35:53,433 --> 00:35:54,714
and dozens of these characters.

549
00:35:58,216 --> 00:36:00,237
A character face is used to set up phoneme shapes.

550
00:36:00,938 --> 00:36:02,999
If you need a quick refresher, here are some basic shapes.

551
00:36:04,160 --> 00:36:07,122
Phonemes are basically the sounds we make when we speak the distinguished words from

552
00:36:07,142 --> 00:36:07,482
each other.

553
00:36:08,582 --> 00:36:11,865
And of course our models move and make different shapes depending on the sounds that we're

554
00:36:11,885 --> 00:36:12,085
making.

555
00:36:17,703 --> 00:36:19,943
Now, CharacterFace is used to set up phoneme shapes.

556
00:36:20,224 --> 00:36:22,824
CharacterFace is actually a node within VoiceDevice

557
00:36:22,944 --> 00:36:25,445
in MotionBuilder that you use to drive the face.

558
00:36:27,466 --> 00:36:29,646
Using CharacterFace, we would set up cluster groups

559
00:36:30,066 --> 00:36:31,927
in order to tell it what controls and nodes

560
00:36:31,947 --> 00:36:33,887
that we wanted to create the phoneme shapes with.

561
00:36:34,728 --> 00:36:37,568
So for this, each slider control was its own cluster group.

562
00:36:37,609 --> 00:36:41,410
Now, after some iteration, I decided

563
00:36:41,470 --> 00:36:43,090
on a particular set of phoneme shapes

564
00:36:43,130 --> 00:36:44,891
that seemed to work really well and tweaked them

565
00:36:45,091 --> 00:36:46,011
in our slider controls.

566
00:36:47,234 --> 00:36:52,018
Now on the right we have the ah and fv sounds which are made using a combination of a few

567
00:36:52,058 --> 00:36:56,762
sliders so there's different percentages of our 0 to 100 percent.

568
00:37:02,166 --> 00:37:06,969
A wave file is imported to MotionBuilder and linked to the voice device. This voice device

569
00:37:07,070 --> 00:37:13,675
picks up the phonemes from the wave, does its best at least, and plays them as we specified

570
00:37:13,755 --> 00:37:16,597
in the character face. The result is such.

571
00:37:17,717 --> 00:37:25,680
Rico Rodriguez, it's really you! I have your old race car tattooed on my back! Welcome home!

572
00:37:27,761 --> 00:37:33,983
Now, lucky for me, this technique was sort of piggybacked off of Mad Max. The tech artist there

573
00:37:34,084 --> 00:37:38,565
sort of helped me learn his ways of doing this, and it meant that we already had a batch export

574
00:37:38,585 --> 00:37:43,327
solution waiting for us to use to get all this animation out, and it had the tech that would

575
00:37:43,347 --> 00:37:47,129
allow us to drive this in-game. I won't go into detail about specifics.

576
00:37:47,556 --> 00:37:51,959
but I was able to sort of hack and slash my way through the Python code that they used to make it

577
00:37:51,999 --> 00:37:57,443
work for our project as well. Essentially the batch process for this was a C++ plugin that

578
00:37:57,463 --> 00:38:03,348
these Python scripts would call. It proved pretty effective and we could get thousands of lines of

579
00:38:03,388 --> 00:38:08,832
dialogue batched overnight. In the end we had around 13,000 lines of just English dialogue.

580
00:38:12,775 --> 00:38:15,677
Now the magic of these animation files themselves, there was

581
00:38:16,225 --> 00:38:18,747
In-game there was actually no animation data involved at all.

582
00:38:19,507 --> 00:38:21,108
Remember those face poses that we looked at?

583
00:38:21,648 --> 00:38:23,409
They were used in conjunction with float data.

584
00:38:24,670 --> 00:38:27,992
The rig sliders that drove the face were hooked up to specific float tracks.

585
00:38:28,732 --> 00:38:30,713
These float tracks were from 0 to 1,

586
00:38:30,953 --> 00:38:33,855
and they corresponded to the one-frame face poses.

587
00:38:35,596 --> 00:38:37,517
The game would read this compiled animation,

588
00:38:37,977 --> 00:38:41,559
which at that point was just a bunch of frame-by-frame data from 0 to 1.

589
00:38:42,730 --> 00:38:44,852
and it would stream a corresponding animation file

590
00:38:44,892 --> 00:38:46,173
whenever the wave is triggered,

591
00:38:46,653 --> 00:38:47,774
both named the same thing,

592
00:38:48,735 --> 00:38:51,037
and blends together at runtime using these poses.

593
00:38:52,398 --> 00:38:54,179
The great thing about all this that we're using,

594
00:38:55,380 --> 00:38:57,202
the great thing is that because we're using

595
00:38:57,342 --> 00:38:58,983
all of these poses to drive through data,

596
00:38:59,704 --> 00:39:00,985
in order to create Rico,

597
00:39:01,265 --> 00:39:03,667
all we had to do is create new poses for Rico,

598
00:39:05,128 --> 00:39:07,610
and the same exact animation files

599
00:39:07,651 --> 00:39:08,711
could be played on him as well.

600
00:39:09,152 --> 00:39:11,814
We didn't have to make another new template just for him.

601
00:39:19,450 --> 00:39:20,550
So, quick post-mortem.

602
00:39:21,431 --> 00:39:22,711
What didn't go so well for us?

603
00:39:24,192 --> 00:39:26,653
I do actually feel like we had a lot more wins during this

604
00:39:26,713 --> 00:39:29,874
process than we did losses, and great things to come out of the

605
00:39:29,914 --> 00:39:30,714
process as well.

606
00:39:31,215 --> 00:39:33,476
So, I'm only going to bring up a few things here before we get

607
00:39:33,496 --> 00:39:34,896
into some of the things that really went well.

608
00:39:40,218 --> 00:39:40,579
Time.

609
00:39:41,059 --> 00:39:41,499
Okay, yes.

610
00:39:41,599 --> 00:39:44,420
Lack of time is always an issue in game development, but there

611
00:39:44,480 --> 00:39:46,181
are so many things that I would have liked to have done.

612
00:39:48,025 --> 00:39:50,847
UI beautification was the first thing. The tools I made were

613
00:39:51,928 --> 00:39:55,890
built using pie side as a UI. And it's all default pie side

614
00:39:55,930 --> 00:39:59,192
buttons, check boxes, et cetera. I would have loved to have given

615
00:39:59,212 --> 00:40:02,054
the chance to give them their own specific avalanche flavor.

616
00:40:04,235 --> 00:40:07,277
I wish I could have used a lot more JSON and metadata to

617
00:40:07,317 --> 00:40:11,100
accomplish some tasks as well. At the time I started building

618
00:40:11,120 --> 00:40:14,502
the pipeline, I wasn't super well versed on things like JSON

619
00:40:14,582 --> 00:40:16,183
and I sort of learned them as I went on.

620
00:40:16,740 --> 00:40:20,801
and looking back I wish I knew more about them before the process started. If you don't

621
00:40:20,821 --> 00:40:27,023
really know much about JSON or using metadata to drive animations or within rigs, definitely

622
00:40:27,043 --> 00:40:34,825
look up those two topics. And obviously more rig features. By the end, we definitely had a

623
00:40:34,885 --> 00:40:39,506
solid rig that animators could use to create everything they needed to, but there are also a

624
00:40:39,546 --> 00:40:43,667
handful of things that we wish we could have gotten done and added to the rig within that

625
00:40:43,727 --> 00:40:43,907
time.

626
00:40:45,222 --> 00:40:47,464
But on a positive note, these will all be good learnings for

627
00:40:47,484 --> 00:40:53,027
the future. Another thing that didn't go so well was the

628
00:40:53,147 --> 00:40:57,590
aftermath of retargeting RICO. HumanIK did give us an awesome

629
00:40:57,630 --> 00:41:00,832
way to create our Maya motion builder dual workflow and allow

630
00:41:00,852 --> 00:41:04,134
us to retarget. But when we went through the actual process of

631
00:41:04,194 --> 00:41:07,136
retargeting RICO, it proved to be a nightmare at some points.

632
00:41:08,797 --> 00:41:14,200
We did manage to completely remake RICO skeleton. And it was

633
00:41:14,320 --> 00:41:14,860
necessary.

634
00:41:15,513 --> 00:41:22,177
but it did add a lot more time to actually having to get these animations into game without bugs.

635
00:41:24,419 --> 00:41:28,181
The animators did spend a lot more time fixing poses for animations,

636
00:41:29,262 --> 00:41:33,384
and I also had to go through and, after a full batch of these animations,

637
00:41:33,505 --> 00:41:36,887
chase down animations that weren't checked in to Perforce,

638
00:41:37,627 --> 00:41:40,409
and were kind of living locally on other animators' computers.

639
00:41:40,983 --> 00:41:43,344
So in the end, everything kind of worked out,

640
00:41:43,544 --> 00:41:45,884
but chasing these things down, fixing these things up,

641
00:41:46,124 --> 00:41:47,365
took a lot of time.

642
00:41:47,905 --> 00:41:51,025
So if you can avoid having to actually retarget animations

643
00:41:51,105 --> 00:41:53,746
onto a new skeleton, I would completely tell you

644
00:41:53,886 --> 00:41:56,026
not to ever try it or think that it's gonna take

645
00:41:56,126 --> 00:41:57,226
less time than you want it to.

646
00:42:06,768 --> 00:42:07,768
So what went well, though?

647
00:42:09,128 --> 00:42:09,268
Well.

648
00:42:09,932 --> 00:42:11,173
We accomplished our main goals.

649
00:42:11,653 --> 00:42:12,754
We didn't really shoot for the moon.

650
00:42:13,675 --> 00:42:16,797
We made our major scripts and tools that were created,

651
00:42:17,117 --> 00:42:18,238
and we made them as needed.

652
00:42:18,779 --> 00:42:20,800
So there were a lot more tools that I didn't get to show you

653
00:42:20,940 --> 00:42:23,983
just due to time, but we had a full range tool set

654
00:42:24,123 --> 00:42:26,204
that really helped us get our work done quickly.

655
00:42:26,965 --> 00:42:29,547
And all of these tools were just created as we needed them.

656
00:42:30,047 --> 00:42:32,729
We didn't kind of make a tool hoping that it would be used

657
00:42:32,770 --> 00:42:34,291
by an animator or somebody else.

658
00:42:34,771 --> 00:42:36,973
We made it when somebody said they had a need for it.

659
00:42:40,408 --> 00:42:41,829
working closely with the animation team.

660
00:42:42,629 --> 00:42:44,650
It was really important for me to sit down with the animators

661
00:42:44,670 --> 00:42:47,792
and actually see their issues or talk out a new rig feature.

662
00:42:48,393 --> 00:42:50,354
I wanted to be hands-on as much as possible.

663
00:42:50,734 --> 00:42:52,975
I didn't just want to take requests, sit in my corner,

664
00:42:53,436 --> 00:42:55,137
and figure out the best solutions on my own.

665
00:42:55,997 --> 00:42:57,978
Our animation team was always looking to learn how

666
00:42:58,098 --> 00:43:00,220
and why tools and rigs work the way they did.

667
00:43:00,240 --> 00:43:02,341
And it was really fun working with a group

668
00:43:02,381 --> 00:43:03,662
that was so ambitious and willing

669
00:43:03,702 --> 00:43:05,163
to do more technical-related things.

670
00:43:10,662 --> 00:43:13,884
The knowledge share with the Stockholm team, most importantly the tech animator on their

671
00:43:13,924 --> 00:43:19,188
project was awesome. Not only was he on Mad Max, but prior to that he had worked on Just

672
00:43:19,208 --> 00:43:24,412
Cause 2 as their tech animator. There was some really useful tech, such as the dialogue

673
00:43:24,432 --> 00:43:29,435
animation system that you saw, and other things that he always was happy to teach me or answer

674
00:43:29,455 --> 00:43:34,839
my questions on. And even though we had that 6 to 7 hour time difference at times, he was

675
00:43:34,959 --> 00:43:37,061
always there to answer my emails within the...

676
00:43:37,739 --> 00:43:44,024
the day or even get back to me right away if it was at night time for him. Now Maya went really

677
00:43:44,044 --> 00:43:52,332
well. We were able to use found tools and we actually had an animator who owned our third

678
00:43:52,372 --> 00:43:56,816
party tool set deployment that was separate from all our other in house tools. This way

679
00:43:56,916 --> 00:44:01,700
animators could gather, find new tools and I wouldn't have to worry about taking the time to

680
00:44:01,780 --> 00:44:02,641
add them to our tool set.

681
00:44:03,807 --> 00:44:07,989
We utilized a lot of outside tools, but one tool of note was actually Studio Library.

682
00:44:08,589 --> 00:44:13,731
It's made by the creator of Advanced Skeleton, and it actually allowed us to have a pose

683
00:44:13,851 --> 00:44:18,592
and animation library that was super robust and very production-ready for us, at least,

684
00:44:19,132 --> 00:44:24,814
and didn't make me have to take the time to actually build a full-featured pose and animation

685
00:44:24,854 --> 00:44:25,194
library.

686
00:44:29,936 --> 00:44:33,037
Now, also managed by the animator were Animation Team Scripts.

687
00:44:33,656 --> 00:44:35,757
The animators actually took it upon themselves to create their

688
00:44:35,777 --> 00:44:38,698
own MEL scripts for processes that weren't too involved since

689
00:44:38,718 --> 00:44:41,519
I was busy working on sort of bigger picture things. It was a

690
00:44:41,579 --> 00:44:44,580
huge time savings and I was pretty impressed by the scripts

691
00:44:44,600 --> 00:44:47,501
that they actually came up with. It was super helpful and super

692
00:44:47,561 --> 00:44:53,744
awesome that they were really that ambitious. And just a note

693
00:44:53,784 --> 00:44:57,885
before I conclude, come say hi, we're recruiting this week and

694
00:44:57,925 --> 00:45:01,206
hiring actually. We have a number of positions open in both

695
00:45:01,246 --> 00:45:03,027
New York City and Stockholm.

696
00:45:03,531 --> 00:45:08,293
We need lots of programmers. We have a few tech artist positions open even. And I should be

697
00:45:08,313 --> 00:45:11,555
there midday between Wednesday and Friday if you specifically just want to come say hi to me.

698
00:45:13,876 --> 00:45:21,860
Oh, and rather I should go back to that slide because we are at booth CC2124. Now quick

699
00:45:21,880 --> 00:45:27,282
thank yous. Thank you to Fred Hooper for letting me use his slide templates. I completely

700
00:45:27,322 --> 00:45:30,564
stole them off of him. Check out his talk on Thursday.

701
00:45:30,990 --> 00:45:38,354
He is speaking at 1130 in West Hall 2020. It's all about the VFX in JC3. So all those sweet

702
00:45:38,394 --> 00:45:43,537
explosions and a lot more will be covered by him. Also Emil Persson, a programmer in our

703
00:45:43,577 --> 00:45:50,100
Stockholm office. Oops. Emil Persson, a programmer in the Stockholm office is speaking

704
00:45:50,140 --> 00:45:56,063
tomorrow at 3.30. If anybody here is interested in DX12 stuff, that talk is also here in

705
00:45:56,103 --> 00:45:56,924
West Hall at room 3007.

706
00:46:00,042 --> 00:46:02,724
I just want to thank the animation team and fellow TAs at Avalanche.

707
00:46:03,484 --> 00:46:06,506
Again, they were super awesome and I can't really say that enough.

708
00:46:07,567 --> 00:46:09,508
Thanks to you guys for coming out to the boot camp.

709
00:46:11,109 --> 00:46:15,652
And just to remind anybody who plays Just Cause 3, Sky Fortress DLC came out today.

710
00:46:16,032 --> 00:46:19,574
So you should probably go get that when you're home at GDC, play some Sky Fortress.

711
00:46:20,535 --> 00:46:25,058
It includes a Bavarian jetpack on the wingsuit, so you can jetpack yourself around plus wingsuit.

712
00:46:27,093 --> 00:46:31,194
I guess the coffee break is coming up now. So feel free to approach me if you want to ask any

713
00:46:31,234 --> 00:46:37,756
questions that you don't want to necessarily ask here. There's so much more I wish I could have

714
00:46:37,836 --> 00:46:41,957
like talked to you guys about that I was constrained for time. So if you have anything you

715
00:46:41,977 --> 00:46:46,618
really want to know in terms of my pipeline or what we had at Avalanche, please approach me.

716
00:46:47,438 --> 00:46:51,059
I'm happy to talk. So yeah. Time for Q&A if anybody has questions.

717
00:47:01,957 --> 00:47:05,959
I had a lot of helper joints on that skeleton. Did you bake all that animation out and

718
00:47:06,499 --> 00:47:09,960
they all have their own animations in the game engine or did your game engine

719
00:47:10,000 --> 00:47:10,761
had equivalent

720
00:47:11,561 --> 00:47:13,062
helper joints running in real time?

721
00:47:13,906 --> 00:47:19,570
The question was baked down helper joints. Do we have that in-game or was it all baked down and exported out?

722
00:47:19,770 --> 00:47:24,393
Yeah, it was actually baked down and exported out. We didn't have any runtime features in our engine

723
00:47:24,593 --> 00:47:29,317
Okay, and then are you you're blending all those animations together did all the helper joints blends?

724
00:47:29,437 --> 00:47:34,140
Okay, or did you have any issues with that? Yes for the most part everything did blend. Okay

725
00:47:35,741 --> 00:47:37,062
There was some issue with

726
00:47:37,863 --> 00:47:40,565
Going into save like ragdoll. Yeah

727
00:47:41,245 --> 00:47:42,186
It actually it wasn't awful

728
00:47:42,915 --> 00:47:47,559
you know, it still came out okay, but, yeah, it wasn't able to sort of twist the arm joints,

729
00:47:47,619 --> 00:47:50,902
right, if you went into ragdoll. So yeah, that was one issue that we did have.

730
00:47:51,242 --> 00:47:51,722
Thanks a lot, Matt.

731
00:47:51,983 --> 00:47:52,123
Yep.

732
00:47:56,106 --> 00:47:59,689
You said there were more features you would have liked to implement into your rigs.

733
00:48:00,209 --> 00:48:01,270
Could you give a couple examples?

734
00:48:03,011 --> 00:48:07,335
One in particular that we had talked about to help sort of creating additive animations

735
00:48:07,955 --> 00:48:10,717
that I would love to implement in the future if we get the chance to.

736
00:48:12,574 --> 00:48:17,656
was actually our animator, one of our animators kind of built a set up for me and I had looked

737
00:48:17,676 --> 00:48:24,359
at it with him, would be to have a master control that you could say create an animation where you

738
00:48:24,399 --> 00:48:31,122
would point uh say two revolvers ahead and be able to just rotate one control and sort of bring the

739
00:48:31,162 --> 00:48:38,104
entire body up with like a nice uh sort of fall off um very similar to I guess the way like a

740
00:48:38,164 --> 00:48:40,245
motion builder type rig would work um.

741
00:48:40,827 --> 00:48:44,049
but just more features like that that would allow animators to instead of

742
00:48:44,710 --> 00:48:48,132
sort of have to rotate the spine back and bring the arms up just

743
00:48:48,573 --> 00:48:51,795
one big master control that would allow them to sort of twist the body and bring

744
00:48:51,835 --> 00:48:52,615
it up to create

745
00:48:52,976 --> 00:48:56,278
sort of ninety degrees up or ninety degree left or right sort of additives.

746
00:48:57,119 --> 00:49:01,342
Thank you.

747
00:49:01,582 --> 00:49:05,324
You mentioned Studio Library as one of the Maya tools that you guys found really helpful.

748
00:49:06,085 --> 00:49:10,208
Are there a few off the top of your head that you think were super awesome to have around?

749
00:49:10,659 --> 00:49:12,000
as far as Maya tools and plugins?

750
00:49:12,881 --> 00:49:18,585
Um, the question is, I mentioned Studio Library, are there any other tools that I would recommend?

751
00:49:19,446 --> 00:49:25,070
Check out Red9. Red9 is really impressive. It was created by a guy named Mark Jackson.

752
00:49:26,051 --> 00:49:31,635
There's a bunch of animation tools in there. I'm actually looking into using it for metadata right now.

753
00:49:32,516 --> 00:49:38,841
Because it's super robust and there's actually even an animation binder in there.

754
00:49:39,844 --> 00:49:43,806
If you look up Mark Jackson master class, he actually goes through retargeting using

755
00:49:43,847 --> 00:49:44,067
that.

756
00:49:45,127 --> 00:49:46,588
So that's another retargeting option as well.

757
00:49:46,608 --> 00:49:50,310
But Red9 is certainly one of the tools I'm looking into right now.

758
00:49:50,751 --> 00:49:51,031
Thank you.

759
00:49:51,271 --> 00:49:51,371
Hi.

760
00:49:53,992 --> 00:49:54,132
Hi.

761
00:49:54,793 --> 00:49:57,174
Just curious what your experience was using Havoc.

762
00:49:58,115 --> 00:50:00,836
I don't know how much knowledge the team had, especially tech artists.

763
00:50:01,597 --> 00:50:05,159
Basically, we're using it now and it's a lot of emailing support and figuring it out by

764
00:50:05,199 --> 00:50:06,540
looking at demo projects.

765
00:50:07,383 --> 00:50:10,363
Yeah, the question was what our experience was using Havok.

766
00:50:10,883 --> 00:50:12,944
I myself didn't use Havok a ton.

767
00:50:13,104 --> 00:50:16,884
I mean, I used it to create ragdolls, export them, export skeletons out.

768
00:50:17,365 --> 00:50:23,146
But we actually had a really close relationship with Havok and we used it for all of our destruction

769
00:50:23,186 --> 00:50:23,566
as well.

770
00:50:24,186 --> 00:50:28,246
So, we kept a pretty close-knit relationship with them and I'm pretty sure that any of

771
00:50:28,266 --> 00:50:32,067
the guys working on the destruction stuff had a really good, like, back and forth with

772
00:50:32,107 --> 00:50:32,247
them.

773
00:50:32,267 --> 00:50:32,727
Oh yeah.

774
00:50:33,007 --> 00:50:33,167
Yeah.

775
00:50:33,347 --> 00:50:33,667
Cool, thanks.

776
00:50:34,107 --> 00:50:36,148
Mm-hmm.

777
00:50:38,204 --> 00:50:38,912
Alright, thanks guys.

