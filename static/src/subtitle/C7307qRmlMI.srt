1
00:00:04,389 --> 00:00:04,629
All right.

2
00:00:05,490 --> 00:00:05,750
Hello?

3
00:00:09,093 --> 00:00:11,977
I'm very happy to see that people are still filling in.

4
00:00:12,077 --> 00:00:13,358
And there are so many people here

5
00:00:13,498 --> 00:00:16,081
who care about video game cameras,

6
00:00:16,862 --> 00:00:21,266
because I haven't really found a community of game developers

7
00:00:21,306 --> 00:00:22,788
who specialize in game cameras.

8
00:00:24,689 --> 00:00:27,190
It's true that there's at least one book on the subject,

9
00:00:28,530 --> 00:00:30,571
Real-Time Cameras, by Mark A. Hutchinson.

10
00:00:31,872 --> 00:00:34,433
But I feel like there's still a lot of room

11
00:00:34,493 --> 00:00:36,773
to delve deeper into this discipline.

12
00:00:38,414 --> 00:00:40,655
I want to see more role models talking

13
00:00:40,675 --> 00:00:43,216
about how they solve problems with their camera designs.

14
00:00:44,658 --> 00:00:47,619
But, actually, I guess it kind of makes a little bit of sense

15
00:00:48,220 --> 00:00:51,261
that there's not a whole lot of attention being paid to cameras

16
00:00:51,661 --> 00:00:57,584
because the whole point of cameras is to focus attention on something other than themselves.

17
00:01:00,645 --> 00:01:03,546
Cameras are most noticeable when they fail.

18
00:01:04,993 --> 00:01:09,016
As players, we only talk about cameras in order to complain when they're distracting.

19
00:01:09,977 --> 00:01:15,701
So, I decided that in order to really talk about camera design, I have to embrace failure.

20
00:01:17,022 --> 00:01:22,546
So this talk is about all the things that go wrong when you're developing a game with

21
00:01:22,646 --> 00:01:23,867
a third-person camera design.

22
00:01:26,629 --> 00:01:30,272
I am John Eske, I'm a field engineer at Backend Company.

23
00:01:32,556 --> 00:01:36,738
I was sort of thrown into this camera design thing by accident actually.

24
00:01:36,758 --> 00:01:43,240
I just hired as a general designer but I became really passionate about improving the camera

25
00:01:43,260 --> 00:01:43,660
in the game.

26
00:01:44,861 --> 00:01:49,442
It was my first time developing a game with a dynamic camera and I discovered that it's

27
00:01:49,622 --> 00:01:55,744
a massive challenge and I now know that this is probably the hardest style of camera to

28
00:01:55,884 --> 00:01:56,765
design for a video game.

29
00:01:59,742 --> 00:02:02,764
We can certainly learn a lot from cinematography,

30
00:02:03,604 --> 00:02:08,427
but game cameras, I think, have a lot of their own special rules.

31
00:02:08,467 --> 00:02:11,568
They're pretty hard to begin with for any kind of game.

32
00:02:14,210 --> 00:02:18,152
Like in movies, camera operators can deliberately plan out a shot in detail,

33
00:02:18,732 --> 00:02:20,473
but as game designers, we don't have that luxury.

34
00:02:21,694 --> 00:02:23,195
Everything in the game, including the camera,

35
00:02:23,235 --> 00:02:25,376
has to react to what the player is doing,

36
00:02:26,097 --> 00:02:28,198
and it has to adapt to the situation.

37
00:02:29,517 --> 00:02:31,897
And in order for the game camera to adapt to the situation,

38
00:02:31,917 --> 00:02:37,579
we have to formalize the rules of good camera design

39
00:02:37,919 --> 00:02:41,541
and teach it to the computer, to the software,

40
00:02:41,681 --> 00:02:44,101
so they can do that on our behalf.

41
00:02:45,522 --> 00:02:47,282
And I call this discipline, gametography.

42
00:02:47,983 --> 00:02:49,123
Not the first person to use this word,

43
00:02:49,183 --> 00:02:50,083
but I think it's a good one.

44
00:02:53,829 --> 00:02:57,611
There's basically three gametography styles in video games.

45
00:02:58,832 --> 00:03:04,655
The one on the left is fixed angle third person.

46
00:03:04,675 --> 00:03:09,958
So these little diagrams are representing an avatar standing in the middle of a square room

47
00:03:10,918 --> 00:03:11,819
with a camera pointed at them.

48
00:03:12,059 --> 00:03:17,622
And the one on the left is fixed angle third person, meaning the camera never rotates.

49
00:03:19,433 --> 00:03:22,954
The one in the middle is dynamic angle third person,

50
00:03:23,814 --> 00:03:25,054
and the one on the right is first person.

51
00:03:27,255 --> 00:03:28,715
And there's a lot of differences between these,

52
00:03:29,096 --> 00:03:31,116
but the main difference, I think,

53
00:03:31,616 --> 00:03:34,017
that kind of everything else revolves around,

54
00:03:34,217 --> 00:03:36,838
is the distance between the camera and the avatar.

55
00:03:38,333 --> 00:03:40,893
On the left you have a camera that's basically

56
00:03:41,514 --> 00:03:42,514
intrinsically far away.

57
00:03:43,114 --> 00:03:45,434
Or at least far enough away that you pretty much have to

58
00:03:45,474 --> 00:03:49,855
tear down everything between the avatar and the cameras in

59
00:03:49,895 --> 00:03:51,976
order to be able to see through all that

60
00:03:52,096 --> 00:03:52,836
and see the avatar.

61
00:03:53,836 --> 00:03:55,457
You're basically tearing down the fourth wall.

62
00:03:56,717 --> 00:03:59,538
This is common in basically all two-dimensional games do

63
00:03:59,558 --> 00:04:02,678
this, as well as, honestly, many three-dimensional games

64
00:04:02,698 --> 00:04:04,639
with an overhead perspective have basically the same

65
00:04:04,679 --> 00:04:06,579
effect, like League of Legends.

66
00:04:08,596 --> 00:04:10,697
just tears down the upper fourth wall.

67
00:04:13,199 --> 00:04:16,421
First-person games, on the other hand, just have a distance of zero.

68
00:04:16,681 --> 00:04:19,683
The camera's literally inside the skull of the avatar.

69
00:04:20,323 --> 00:04:24,186
This means you never have to worry about losing track of where the avatar is,

70
00:04:24,226 --> 00:04:25,226
because you are the avatar.

71
00:04:26,867 --> 00:04:29,609
And since there's no danger of losing sight of the avatar,

72
00:04:29,729 --> 00:04:35,593
we can leave in the fourth wall that we removed for the first camera style.

73
00:04:37,502 --> 00:04:40,543
and leaving in all of the parts of the environment

74
00:04:40,563 --> 00:04:41,823
allows the camera to spin around

75
00:04:43,084 --> 00:04:44,124
without losing sight

76
00:04:44,745 --> 00:04:46,605
or without like seeing a gaping hole

77
00:04:46,645 --> 00:04:47,446
where the camera used to be.

78
00:04:49,246 --> 00:04:51,987
The middle one, dynamic angle third-person games

79
00:04:52,968 --> 00:04:54,989
are on this weird sliding scale

80
00:04:55,069 --> 00:04:57,910
between close and far camera distances

81
00:04:58,770 --> 00:05:00,551
with kind of all the downsides of both.

82
00:05:02,745 --> 00:05:08,250
For Journey, we did want a game where players could look in any direction and explore on their own.

83
00:05:08,810 --> 00:05:11,553
So we couldn't use the fixed angle third person.

84
00:05:13,014 --> 00:05:17,559
But we also wanted the player to have a clear view of the avatar's body, so we couldn't use first person.

85
00:05:18,279 --> 00:05:19,160
And we needed something in between.

86
00:05:21,132 --> 00:05:24,434
And that means we need a camera that physically fits inside the world

87
00:05:25,414 --> 00:05:27,635
alongside the avatar and

88
00:05:28,295 --> 00:05:31,676
That means we have to worry about all of these collision detection problems

89
00:05:32,857 --> 00:05:39,539
And keep just in general keeping the space between the camera and the avatar empty so that you can always see what you're doing

90
00:05:41,669 --> 00:05:44,551
And these design constraints leave us with a whole lot of problems.

91
00:05:45,532 --> 00:05:47,635
In fact, there's definitely at least 50 problems,

92
00:05:48,175 --> 00:05:50,618
which I have taken the liberty of enumerating for your convenience.

93
00:05:53,661 --> 00:05:56,243
I encountered most of these problems working on Journey,

94
00:05:57,084 --> 00:05:59,547
and usually I got it wrong the first time.

95
00:06:00,227 --> 00:06:02,630
It's only through iteration that these problems get fixed.

96
00:06:05,855 --> 00:06:08,496
Many mistakes remain in shipped products often.

97
00:06:09,136 --> 00:06:11,497
And some of these can even still happen in Journey.

98
00:06:14,178 --> 00:06:16,699
As a side note, I actually started with a list of a hundred problems

99
00:06:17,179 --> 00:06:19,941
and had to narrow them down to fit into the space of this talk.

100
00:06:20,021 --> 00:06:21,541
So I'm going to have to talk a little bit quickly.

101
00:06:22,061 --> 00:06:23,062
So let's get started.

102
00:06:25,663 --> 00:06:26,043
Number one.

103
00:06:27,984 --> 00:06:28,504
Using a...

104
00:06:28,564 --> 00:06:30,225
Let's see. Yes. OK, good.

105
00:06:32,606 --> 00:06:33,446
Yes, they're both animated. Good.

106
00:06:34,541 --> 00:06:37,222
using a dynamic camera when another poach would work.

107
00:06:38,202 --> 00:06:40,743
Dynamic third-person cameras are, as I said,

108
00:06:40,843 --> 00:06:42,684
are the hardest kind of camera to design,

109
00:06:43,404 --> 00:06:46,345
and really there's no shame in taking the easy way out

110
00:06:46,506 --> 00:06:48,546
if it lets you focus on other parts of the game

111
00:06:48,967 --> 00:06:49,527
to make them better.

112
00:06:50,727 --> 00:06:52,748
Dynamic cameras don't automatically make games better.

113
00:06:52,888 --> 00:06:54,549
In fact, they frequently make them worse.

114
00:06:56,730 --> 00:07:00,011
For example, the early 3D Mario and Zelda games

115
00:07:00,891 --> 00:07:02,372
all had dynamic camera angles.

116
00:07:03,560 --> 00:07:07,424
But the more recent ones, like Super Mario 3D World and The Legend of Zelda A Link Between Worlds,

117
00:07:08,666 --> 00:07:10,928
these have reverted to fixed camera angles.

118
00:07:11,088 --> 00:07:12,550
And these are highly respected sequels.

119
00:07:13,931 --> 00:07:15,453
So, yeah.

120
00:07:15,813 --> 00:07:20,097
Pay attention to the, for example, the background on the image on the left,

121
00:07:20,498 --> 00:07:22,300
and how it swings around as the camera turns,

122
00:07:22,760 --> 00:07:25,263
while the right video has a stable background,

123
00:07:25,783 --> 00:07:27,245
because the camera angle is fixed.

124
00:07:28,454 --> 00:07:31,095
So for student projects, game jams, and other games

125
00:07:31,115 --> 00:07:32,255
developed under tight constraints,

126
00:07:32,735 --> 00:07:35,776
I highly recommend picking an easier camera style,

127
00:07:35,996 --> 00:07:37,877
such as first person or fixed angle.

128
00:07:40,758 --> 00:07:44,979
Next problem is designing levels and camera behaviors

129
00:07:45,039 --> 00:07:45,660
that don't match.

130
00:07:49,681 --> 00:07:52,862
Level design and camera design are closely related disciplines,

131
00:07:53,502 --> 00:07:56,043
and they need to cooperate to help players navigate.

132
00:07:57,320 --> 00:08:00,883
If you know the camera angle ahead of time, you can design the entire level around that.

133
00:08:02,404 --> 00:08:05,666
And if you don't, if you have a dynamic camera angle, then you have to make sure that the

134
00:08:05,706 --> 00:08:12,251
levels gracefully flow from one point to the next with the camera easily showing you where

135
00:08:12,271 --> 00:08:12,772
you need to go.

136
00:08:14,753 --> 00:08:20,578
Meanwhile, the camera itself has to be good at navigating the kinds of environments that

137
00:08:20,598 --> 00:08:21,198
are in your game.

138
00:08:23,589 --> 00:08:28,991
I like this video because I find it telling that the author chose to include the original

139
00:08:29,071 --> 00:08:32,012
side-scrolling game in the top left corner of the screen.

140
00:08:33,033 --> 00:08:33,633
Yeah, you can see it.

141
00:08:34,733 --> 00:08:36,434
So that the player can actually tell what's going on.

142
00:08:36,474 --> 00:08:39,615
I think that's a clue that this is not a good camera for this game.

143
00:08:43,659 --> 00:08:48,521
Using global coordinates or quaternions to persist the camera's state.

144
00:08:49,582 --> 00:08:52,743
Obviously this is sort of a programmer-oriented issue, I'm afraid.

145
00:08:53,103 --> 00:08:54,444
So I wanted to get this one out of the way early.

146
00:08:55,824 --> 00:08:57,305
But it is also sort of a design issue.

147
00:08:58,305 --> 00:09:03,928
It's easy to assume that a third-person camera for a game should behave like...

148
00:09:04,527 --> 00:09:07,988
like maybe a human holding a camera who can pivot around in place.

149
00:09:08,629 --> 00:09:12,151
But in third-person games like this,

150
00:09:13,971 --> 00:09:17,053
the focus of attention is really the avatar, not the camera.

151
00:09:17,493 --> 00:09:18,354
It's not a first-person game.

152
00:09:19,454 --> 00:09:21,275
So whenever the camera rotates,

153
00:09:21,315 --> 00:09:24,277
it should always be pivoting around the avatar,

154
00:09:26,318 --> 00:09:27,678
like a moon orbiting around.

155
00:09:30,635 --> 00:09:37,438
That means it's not important to store the global XYZ coordinates of the camera,

156
00:09:38,258 --> 00:09:42,160
because you can always just derive those as an offset from the avatar,

157
00:09:43,000 --> 00:09:44,961
finding where it is on the orbit.

158
00:09:47,902 --> 00:09:49,422
And the other issue is the quaternion thing.

159
00:09:50,022 --> 00:09:57,765
Quaternions are often considered the correct way to represent orientations of things by programmers,

160
00:09:58,245 --> 00:09:59,206
and they're very useful.

161
00:10:00,240 --> 00:10:01,501
But that's not how players think.

162
00:10:02,521 --> 00:10:03,902
Players think in terms of Euler angles.

163
00:10:03,942 --> 00:10:06,683
That means pitch and yaw.

164
00:10:06,743 --> 00:10:08,544
They rotate sideways and they look up and down.

165
00:10:08,604 --> 00:10:12,605
That's how players want to control with, for example, an analog stick,

166
00:10:12,625 --> 00:10:14,666
or whatever it is that you're using to control the camera.

167
00:10:16,747 --> 00:10:23,490
So, use Euler angles to represent the orientation of your camera,

168
00:10:23,510 --> 00:10:25,871
or at least at some point in the code.

169
00:10:26,531 --> 00:10:27,671
You can convert to quadraniums later.

170
00:10:29,132 --> 00:10:29,272
And...

171
00:10:30,666 --> 00:10:38,033
As for the position, instead of storing global X, Y, Z coordinates, store like distance from

172
00:10:38,073 --> 00:10:43,739
the avatar and maybe like a vertical or lateral offset if you want to frame the avatar somewhere

173
00:10:43,759 --> 00:10:44,760
other than the center of the screen.

174
00:10:49,164 --> 00:10:52,928
Using a camera distance that's likely to break line of sight.

175
00:10:54,660 --> 00:10:59,042
This means, well, the line of sight,

176
00:10:59,662 --> 00:11:03,004
this, like, imaginary line between the camera and the avatar

177
00:11:03,824 --> 00:11:05,065
is very crucial.

178
00:11:05,585 --> 00:11:08,487
Kind of the entire camera code is basically designed around

179
00:11:09,147 --> 00:11:11,708
keeping this line of sight clear.

180
00:11:12,849 --> 00:11:14,630
Not all the camera code, but quite a lot of it.

181
00:11:15,570 --> 00:11:18,211
And here's an example of an important game,

182
00:11:18,792 --> 00:11:19,412
Popo Iiyo.

183
00:11:20,728 --> 00:11:23,249
But this game nevertheless fails to preserve line of sight.

184
00:11:23,269 --> 00:11:24,870
For example, this pipe on the left.

185
00:11:25,410 --> 00:11:26,891
Yep.

186
00:11:27,211 --> 00:11:33,414
And if the camera was closer to the avatar by default,

187
00:11:34,214 --> 00:11:36,735
it would be a lot harder for this sort of problem to occur.

188
00:11:38,896 --> 00:11:39,056
Um...

189
00:11:39,857 --> 00:11:40,717
Do-do-do-do-do.

190
00:11:42,478 --> 00:11:45,779
Allowing obstacles to break line of sight from the side.

191
00:11:47,020 --> 00:11:50,161
This is the most common way that obstacles will break line of sight.

192
00:11:51,952 --> 00:11:59,338
And the simplest way to fix the problem is to just detect by casting a ray from the avatar

193
00:11:59,358 --> 00:11:59,838
to the camera.

194
00:12:00,599 --> 00:12:08,946
Detect when the avatar has been occluded and just push the camera immediately closer to

195
00:12:09,906 --> 00:12:10,687
the avatar.

196
00:12:12,088 --> 00:12:14,310
But that is a cut.

197
00:12:14,410 --> 00:12:15,231
That is a camera cut.

198
00:12:17,150 --> 00:12:19,631
If all you're doing is changing the position of the camera,

199
00:12:19,711 --> 00:12:21,651
that violates the 30-degree rule.

200
00:12:23,172 --> 00:12:26,593
In cinema, the 30-degree rule means all camera cuts

201
00:12:27,053 --> 00:12:29,613
should change the angle by at least 30 degrees.

202
00:12:30,694 --> 00:12:34,415
And failing to do that creates a jarring sense of motion.

203
00:12:35,715 --> 00:12:40,016
So it's much more pleasant when an obstacle is threatening

204
00:12:40,056 --> 00:12:43,437
to break line of sight to preemptively turn out

205
00:12:43,457 --> 00:12:43,777
of the way.

206
00:12:45,326 --> 00:12:48,247
So, for example, in this case, the camera swings to the right

207
00:12:48,307 --> 00:12:49,767
to avoid the obstacle on the left.

208
00:12:51,768 --> 00:12:54,148
And you can detect these obstacles early

209
00:12:54,728 --> 00:12:56,909
with raycasts that I call whiskers.

210
00:12:57,609 --> 00:12:59,789
You can see the green arrows on the diagram.

211
00:13:02,050 --> 00:13:04,571
And if any of those whiskers detect an obstacle,

212
00:13:05,231 --> 00:13:07,651
you can use that to preemptively swing away.

213
00:13:09,152 --> 00:13:12,912
And if necessary, you can reuse results from previous frames

214
00:13:12,952 --> 00:13:14,133
to reduce processor load.

215
00:13:15,427 --> 00:13:16,829
if that's a problem.

216
00:13:20,873 --> 00:13:23,315
However, we have our first conflict.

217
00:13:25,598 --> 00:13:27,419
Pushing away from an obstacle like that,

218
00:13:29,081 --> 00:13:30,923
while the player is trying to swing towards it.

219
00:13:31,063 --> 00:13:33,385
So, in Journey, and in many games like this,

220
00:13:34,086 --> 00:13:38,190
the player has a control stick or something to control the camera.

221
00:13:39,317 --> 00:13:43,778
And it is important to always honor the player's intent.

222
00:13:44,638 --> 00:13:46,918
So if the player wants to turn the camera one way,

223
00:13:46,958 --> 00:13:48,199
the camera must turn that direction.

224
00:13:48,259 --> 00:13:49,719
Otherwise, the player will be very frustrated.

225
00:13:51,579 --> 00:13:54,380
Which means we come across these situations

226
00:13:55,100 --> 00:13:58,981
where the camera wants to swing away from an obstacle,

227
00:13:59,021 --> 00:14:00,521
but the player is swinging it towards the obstacle.

228
00:14:00,561 --> 00:14:03,082
And in that case, the only solution, as far as I know,

229
00:14:04,242 --> 00:14:05,923
is to pull the camera closer.

230
00:14:06,852 --> 00:14:09,273
But as long as we know ahead of time

231
00:14:09,914 --> 00:14:12,255
that the obstacle is on the side that we're trying to avoid

232
00:14:12,856 --> 00:14:14,017
and the player is swinging towards it,

233
00:14:14,577 --> 00:14:18,540
we can gradually interpolate the camera closer

234
00:14:18,600 --> 00:14:21,302
towards the avatar so that by the time

235
00:14:21,962 --> 00:14:24,964
the obstacle is in the way, we're already squeezing by it

236
00:14:25,304 --> 00:14:26,105
by getting closer.

237
00:14:30,528 --> 00:14:33,810
Letting the player push the camera inside an obstacle.

238
00:14:39,843 --> 00:14:42,185
We still want to prevent breaking line of sight, of course.

239
00:14:42,705 --> 00:14:46,927
So, as I said, move the camera closer to avoid the obstacle.

240
00:14:48,007 --> 00:14:52,710
And we may need to use some actual sphere collision detection.

241
00:14:52,730 --> 00:14:53,930
I'll get into that a little bit later.

242
00:14:53,950 --> 00:14:58,593
To avoid, to make sure that the camera doesn't accidentally find itself

243
00:14:58,673 --> 00:15:00,454
inside the obstacle that you're pushing the camera towards.

244
00:15:03,015 --> 00:15:06,276
Letting independent forces compete to push the camera.

245
00:15:09,386 --> 00:15:13,687
As we've seen, we need to deal with this special case where obstacle avoidance says to do one

246
00:15:13,727 --> 00:15:15,187
thing and camera control says to do another thing.

247
00:15:16,247 --> 00:15:18,428
But this is hardly the only special case we have to deal with.

248
00:15:19,128 --> 00:15:21,989
The camera has to satisfy many constraints at a time.

249
00:15:23,589 --> 00:15:29,051
And if constraints are allowed to compete with each other by applying forces in opposite

250
00:15:29,071 --> 00:15:34,352
directions, they'll often cancel out without satisfying either constraint.

251
00:15:35,723 --> 00:15:40,245
But we can organize the constraints a little bit better

252
00:15:40,445 --> 00:15:44,246
because we know that there are seven axes, or degrees

253
00:15:44,286 --> 00:15:46,627
of freedom, that matter to the camera.

254
00:15:47,868 --> 00:15:53,390
There's yaw, pitch, and roll, and the horizontal, vertical,

255
00:15:53,550 --> 00:15:56,451
and forward-backward offsets, and field of view.

256
00:15:57,404 --> 00:15:58,585
Those are the seven degrees of freedom.

257
00:15:59,365 --> 00:16:01,767
And we can organize all of the constraints

258
00:16:02,587 --> 00:16:04,869
according to which degree of freedom they matter to.

259
00:16:06,150 --> 00:16:08,471
This is separation of concerns, basically,

260
00:16:09,512 --> 00:16:10,472
which is a programming principle.

261
00:16:15,224 --> 00:16:18,968
the problem that I described earlier with the swinging toward and away from the obstacle,

262
00:16:19,008 --> 00:16:22,913
those are both applied to the yaw axis. So we can get all of the forces that apply to

263
00:16:22,933 --> 00:16:27,337
the yaw axis and prioritize them. And in this case, we know that the player control has

264
00:16:27,357 --> 00:16:28,278
the priority.

265
00:16:32,603 --> 00:16:35,947
Number nine is keeping narrow columns from breaking line of sight.

266
00:16:38,172 --> 00:16:43,977
It is important, as I've said, to avoid breaking line of sight. However, there are cases where

267
00:16:44,618 --> 00:16:50,563
here you can see that this column breaks line of sight with the avatar on the right. And

268
00:16:51,904 --> 00:16:57,509
it would be more trouble than it's worth for the camera to try to avoid letting that happen.

269
00:16:57,969 --> 00:17:02,693
It actually looks pretty graceful in this case to just swing around the obstacle on

270
00:17:02,713 --> 00:17:03,134
the outside.

271
00:17:05,837 --> 00:17:10,539
And you can accomplish this, or in Journey we accomplish this by tagging obstacles based

272
00:17:10,579 --> 00:17:13,740
on whether or not they're allowed to break line of sight.

273
00:17:14,920 --> 00:17:17,281
And this one, this particular obstacle is very narrow.

274
00:17:17,861 --> 00:17:24,303
The player should be able to track the avatar with their eyes even though the avatar is

275
00:17:24,343 --> 00:17:25,344
temporarily eclipsed.

276
00:17:30,205 --> 00:17:33,486
Ten is letting the camera intersect narrow columns.

277
00:17:34,457 --> 00:17:38,923
So, I just explained that it's okay to let this narrow column break line of sight.

278
00:17:38,983 --> 00:17:45,290
However, it's not okay to let the obstacle actually collide into the camera itself.

279
00:17:46,211 --> 00:17:48,915
That would be confusing to the player.

280
00:17:50,476 --> 00:17:57,544
So this is where more ordinary collision detection algorithms like a sphere collision check is

281
00:17:57,885 --> 00:17:58,245
helpful.

282
00:17:58,305 --> 00:18:06,275
You can check if the camera itself is touching the column and if so, just push it out until

283
00:18:06,315 --> 00:18:07,356
it's not touching anymore.

284
00:18:11,111 --> 00:18:16,896
interpreting a hill as a wall to be avoided. Journey is full of sand dunes with smooth

285
00:18:16,956 --> 00:18:22,320
slopes and like any other obstacle, it is important to keep line of sight from colliding

286
00:18:22,400 --> 00:18:28,265
with the sand dunes. However, we don't necessarily want to swing sideways away from the hills.

287
00:18:28,305 --> 00:18:32,688
It actually makes much more sense to rise the camera above the hill.

288
00:18:34,517 --> 00:18:39,701
So in the case of Journey, I actually just skip collision detection with whiskers and sand dunes.

289
00:18:40,281 --> 00:18:47,907
But you can also try checking the surface normal of the slope to see if it's the kind of obstacle

290
00:18:48,567 --> 00:18:50,929
that you should be swinging away from or rising above.

291
00:18:53,426 --> 00:18:55,527
Swinging sideways when occluders come from behind.

292
00:18:57,309 --> 00:19:00,091
So far, all of the obstacle avoidance has been

293
00:19:00,872 --> 00:19:05,415
these sideways whisker swinging around.

294
00:19:05,896 --> 00:19:11,060
But line of sight can be broken from many directions.

295
00:19:11,100 --> 00:19:13,341
There's the sides, and then there's also behind.

296
00:19:13,862 --> 00:19:16,244
For example, if the avatar, if the player's

297
00:19:16,824 --> 00:19:18,466
making the avatar run towards the camera

298
00:19:18,546 --> 00:19:21,968
and the camera's backing up, it can be backed up into a corner.

299
00:19:22,822 --> 00:19:24,725
And if the camera finds itself backed into a corner,

300
00:19:25,125 --> 00:19:27,168
then swinging either direction won't actually get it out.

301
00:19:27,649 --> 00:19:28,329
It won't help at all.

302
00:19:29,992 --> 00:19:32,154
So in this case, you should use a ray cast

303
00:19:32,435 --> 00:19:33,736
like immediately behind the camera

304
00:19:33,776 --> 00:19:35,178
to detect if it's being backed into a corner.

305
00:19:35,198 --> 00:19:38,122
And if so, just pull closer without swinging sideways.

306
00:19:40,896 --> 00:19:44,238
13 is letting the camera's near-clipping plane intersect the avatar.

307
00:19:45,239 --> 00:19:49,581
This is a technical problem that pretty much all virtual cameras have what's called a near-clipping

308
00:19:49,621 --> 00:19:53,764
plane, and anything closer to that gets cut off and leaves a big gaping hole in the object.

309
00:19:53,784 --> 00:19:55,645
So

310
00:19:57,775 --> 00:20:02,098
We want to make sure that this almost never happens or never happens preferably.

311
00:20:02,558 --> 00:20:08,663
So there needs to be enough space between the avatar and any adjacent walls for the

312
00:20:08,683 --> 00:20:11,585
camera to fit as near a clipping plane through the space.

313
00:20:13,264 --> 00:20:19,346
And one way you can do that is by making sure that the avatar's collision radius is wider

314
00:20:19,386 --> 00:20:24,008
than the actual avatar, so that they'll never actually like press up, right up against the

315
00:20:24,048 --> 00:20:28,290
wall so you can just like still fit the camera between the model and the wall.

316
00:20:31,652 --> 00:20:35,013
Fourteen is using the same camera distance for all angles.

317
00:20:36,254 --> 00:20:38,655
In particular, I'm talking about up and down tilting.

318
00:20:39,973 --> 00:20:45,856
If you're looking up, that means the camera has to swing downwards to keep the avatar

319
00:20:45,876 --> 00:20:47,877
in view while you're looking at the sky.

320
00:20:49,017 --> 00:20:52,419
But if your camera is swinging downwards, it's going to crash into the ground unless

321
00:20:52,659 --> 00:20:54,159
you make it closer.

322
00:20:54,800 --> 00:21:01,623
So some games will make the camera crash into the ground and then pull closer, but I prefer

323
00:21:01,723 --> 00:21:07,025
to have a smooth curve that kind of knows in advance what the shape of the floor is

324
00:21:07,185 --> 00:21:07,505
and it can...

325
00:21:09,237 --> 00:21:13,144
kind of glide into the position at the avatar's feet for a worm's eye view.

326
00:21:14,967 --> 00:21:20,456
It's also good to extend this curve the other direction, so when you're looking downwards

327
00:21:20,657 --> 00:21:21,558
and you swing the camera up...

328
00:21:23,318 --> 00:21:28,763
Um, this, uh, looking downwards means the horizon is the long, no longer in the view.

329
00:21:29,844 --> 00:21:32,866
And if you can, you can just see this little patch of ground around the avatar and it can

330
00:21:32,886 --> 00:21:34,067
feel a little bit claustrophobic.

331
00:21:34,908 --> 00:21:39,172
Uh, so I recommend pulling the camera out a little bit when you're looking downwards

332
00:21:39,192 --> 00:21:44,917
so you can have a little bit more, uh, uh, to, to see around the avatar so you don't

333
00:21:44,937 --> 00:21:46,118
feel a, uh, closed in.

334
00:21:48,588 --> 00:21:53,669
uh, 15, using the same field of view for worm's eye and standard angles.

335
00:21:55,489 --> 00:21:59,010
Um, the, uh, the sky is really, really big.

336
00:21:59,710 --> 00:22:02,011
It's nice to be able to take in more of the sky at once,

337
00:22:02,171 --> 00:22:03,931
and in reality, uh, as humans,

338
00:22:04,131 --> 00:22:08,812
we use our peripheral vision to, to see the most or all of the sky.

339
00:22:09,092 --> 00:22:11,953
Uh, we can see almost 180 degrees, uh, to our sides.

340
00:22:12,653 --> 00:22:12,973
Um, so...

341
00:22:14,040 --> 00:22:22,088
In order to create the same feeling when the game is looking at the sky, it should expand

342
00:22:22,128 --> 00:22:24,370
its field of view as it's transitioning to a bird's eye view.

343
00:22:24,410 --> 00:22:30,335
You can kind of see the sides of the canyon filling in the sides of the video clip here.

344
00:22:32,658 --> 00:22:37,262
And that just makes you feel more like you are the character looking the way the character

345
00:22:37,282 --> 00:22:37,542
would look.

346
00:22:41,537 --> 00:22:46,579
Let's see, 16 is shifting pitch, distance, and field of view independently.

347
00:22:48,280 --> 00:22:53,162
So as I explained, as the camera is pitching up and down, the distance needs to change

348
00:22:53,803 --> 00:22:55,423
and the field of view also needs to change.

349
00:22:57,576 --> 00:23:03,337
But if these degrees of freedom are not completely linked together,

350
00:23:03,957 --> 00:23:07,338
then you can create this weird effect where, like,

351
00:23:08,119 --> 00:23:10,959
as you look up or down, the field of view will change,

352
00:23:10,999 --> 00:23:13,220
and that will affect the size of everything on the screen,

353
00:23:13,240 --> 00:23:14,220
because field of view is zoom.

354
00:23:15,827 --> 00:23:18,867
But then the distance will also change and it'll change in the opposite direction.

355
00:23:19,307 --> 00:23:23,368
So you might end up with the avatar appearing to expand and then shrink or shrink and then expand.

356
00:23:24,429 --> 00:23:32,711
So it's best to make sure that the distance and the field of view are both like derived from the pitch,

357
00:23:33,371 --> 00:23:35,712
so that they transition together like gears.

358
00:23:38,224 --> 00:23:45,526
However, you do end up with situations where other, other factors want to affect the distance

359
00:23:45,566 --> 00:23:46,106
of field of view.

360
00:23:46,726 --> 00:23:51,627
So in that case, you can kind of have like a base distance of field of view that drive

361
00:23:51,647 --> 00:23:58,569
from pitch, and then other modifiers can like be multipliers or offsets to the base field

362
00:23:58,589 --> 00:24:02,110
of view.

363
00:24:03,010 --> 00:24:05,811
17, not cutting when the avatar passes through opaque areas.

364
00:24:07,342 --> 00:24:14,950
This is a case where the line of sight is being threatened from the front, which is actually super rare because the avatar itself

365
00:24:15,591 --> 00:24:15,952
has

366
00:24:16,472 --> 00:24:20,436
Collision and will prevent obstacles from hitting the front of the line of sight

367
00:24:22,499 --> 00:24:26,243
But there are cases for example this the sand fallen journey

368
00:24:27,632 --> 00:24:32,255
where an opaque surface can still be passed through.

369
00:24:33,415 --> 00:24:35,997
And in that case, the only thing it can really do

370
00:24:36,657 --> 00:24:39,399
to bring back line of sight is to cut.

371
00:24:44,922 --> 00:24:48,624
18 is letting cuts remap directional controls.

372
00:24:50,726 --> 00:24:55,208
Up on the analog stick means go forward,

373
00:24:55,568 --> 00:24:56,109
but forward.

374
00:24:57,449 --> 00:24:59,871
is determined by whatever direction the camera is looking in.

375
00:25:00,811 --> 00:25:03,833
And when the camera suddenly rotates to a different direction,

376
00:25:04,974 --> 00:25:08,276
forward changes and then up on the control stick changes.

377
00:25:09,036 --> 00:25:13,559
And players, they physically can't teleport their thumb when the camera cuts.

378
00:25:15,020 --> 00:25:17,342
They need a moment to adapt to the new direction.

379
00:25:18,042 --> 00:25:23,205
So this is a good opportunity for either like a cutscene or some kind of transition effect.

380
00:25:24,480 --> 00:25:32,003
Or just put the player in a situation where they're not in danger of being attacked or anything like that when the cut happens.

381
00:25:32,463 --> 00:25:34,143
Because players do need a moment to adapt.

382
00:25:38,805 --> 00:25:41,886
Alternatively, you could also try to interpolate the forward direction during the cut.

383
00:25:42,727 --> 00:25:49,469
I don't know how well that works, but some people do it. I've seen it happen.

384
00:25:50,010 --> 00:25:51,690
19 is breaking the player's sense of direction.

385
00:25:54,250 --> 00:25:58,932
Remapping controls is a temporary problem because the player can quickly adapt to whatever

386
00:25:58,952 --> 00:26:00,332
the forward direction is on the camera.

387
00:26:00,752 --> 00:26:08,375
But cuts that change the camera angle also create a longer term loss of the player's

388
00:26:08,415 --> 00:26:09,116
sense of direction.

389
00:26:11,116 --> 00:26:14,998
I think players use primarily two different techniques for navigating.

390
00:26:16,118 --> 00:26:20,980
Head reckoning, which is keeping track of all the...

391
00:26:22,443 --> 00:26:26,825
changes in your position and orientation. So, like, if I rotate my body 180 degrees,

392
00:26:26,885 --> 00:26:35,008
I know that north is now south or... But a camera cut... Sorry, the second technique

393
00:26:35,388 --> 00:26:43,691
is recognizing landmarks. So, dead reckoning and recognizing landmarks. And camera cuts,

394
00:26:43,971 --> 00:26:48,072
they make dead reckoning impossible. You can't tell all the time when a camera cuts how much

395
00:26:48,092 --> 00:26:51,693
it has been rotated. So, you don't know how much to rotate your mental model of the map.

396
00:26:53,173 --> 00:26:58,414
So this is a crucial moment to make sure that the camera is

397
00:26:58,974 --> 00:27:02,475
showing the player either recognizable landmarks or

398
00:27:02,535 --> 00:27:05,695
something to help them understand where they are when

399
00:27:05,735 --> 00:27:08,876
the camera is cutting so that they don't lose their sense of

400
00:27:08,896 --> 00:27:09,976
direction too badly.

401
00:27:13,577 --> 00:27:15,097
20 is violating the 180 degree rule.

402
00:27:15,177 --> 00:27:18,718
This is a commonly known rule in cinematography.

403
00:27:19,498 --> 00:27:20,959
The 180 degree rule means.

404
00:27:23,022 --> 00:27:25,804
Don't cut the camera such that two subjects,

405
00:27:25,824 --> 00:27:27,866
like characters talking to each other, swap sides.

406
00:27:28,866 --> 00:27:31,228
That means, like, don't rotate the camera behind them,

407
00:27:31,348 --> 00:27:31,849
that kind of a thing.

408
00:27:34,071 --> 00:27:35,792
But fortunately, we don't actually have to worry

409
00:27:35,832 --> 00:27:37,814
about the 180-degree rule very often in games

410
00:27:38,574 --> 00:27:42,137
because, as I've explained, cuts are dangerous

411
00:27:42,177 --> 00:27:43,638
and we should avoid using them whenever possible.

412
00:27:45,320 --> 00:27:47,542
However, there are situations where 180-degree rule

413
00:27:47,562 --> 00:27:49,663
does apply, especially during cut scenes.

414
00:27:51,184 --> 00:27:57,426
Um, so like at the end of a cut scene, uh, you should be showing the, the player, uh,

415
00:27:57,566 --> 00:28:07,431
what they, they need to be seeing to be able to navigate. Um, yeah.

416
00:28:07,911 --> 00:28:10,292
21 is focusing only on the avatar.

417
00:28:12,269 --> 00:28:13,870
So far I've only been talking about the avatar, but

418
00:28:14,970 --> 00:28:17,711
the player also needs to see other stuff in the environment

419
00:28:18,391 --> 00:28:19,251
in order to navigate.

420
00:28:19,672 --> 00:28:22,512
For example, the player needs to be able to see

421
00:28:22,592 --> 00:28:25,373
the terrain immediately around the avatar's feet

422
00:28:25,413 --> 00:28:27,794
to see whether or not they're going to bump into a wall

423
00:28:27,814 --> 00:28:29,174
or whether or not they're going to fall off a cliff.

424
00:28:30,815 --> 00:28:33,276
And they also need to keep track of things that are far away

425
00:28:34,136 --> 00:28:36,737
like the mountain on the horizon in Journey

426
00:28:37,117 --> 00:28:38,377
or the partner they're traveling with.

427
00:28:41,312 --> 00:28:47,221
So, number 22 is relying on players to be controlling the camera at all times.

428
00:28:50,145 --> 00:28:54,512
For many players, controlling an avatar and the camera at the same time

429
00:28:55,531 --> 00:28:57,793
is a lot like patting your head and rubbing your belly.

430
00:29:00,034 --> 00:29:02,035
You can see this is Beyond Good and Evil,

431
00:29:02,075 --> 00:29:04,337
and this player is probably pretty good at this game,

432
00:29:04,377 --> 00:29:06,538
but they still end up, like, jerking the camera around

433
00:29:07,679 --> 00:29:11,502
because this game doesn't have any automatic guidance

434
00:29:11,582 --> 00:29:12,102
for the camera.

435
00:29:13,623 --> 00:29:15,664
So I recommend, whenever possible,

436
00:29:16,345 --> 00:29:17,766
the camera should be doing its best

437
00:29:18,246 --> 00:29:21,888
to look where the player wants to see in advance

438
00:29:21,989 --> 00:29:23,650
so that the player doesn't have to be controlling it.

439
00:29:27,725 --> 00:29:31,066
23 is leaving the camera yaw alone while the player is running.

440
00:29:32,066 --> 00:29:37,167
And the simplest way to help the players see where they're going is to show them where

441
00:29:37,187 --> 00:29:37,907
they're already going.

442
00:29:38,708 --> 00:29:45,449
Just take the direction that the player is running in and map that to the yaw of the

443
00:29:45,469 --> 00:29:45,790
camera.

444
00:29:46,250 --> 00:29:48,810
So it kind of like drifts behind the avatar as they're running.

445
00:29:50,959 --> 00:29:53,520
However, even this rule has a little bit of nuance.

446
00:29:54,240 --> 00:29:57,401
For example, if the player is running right into a wall,

447
00:29:58,161 --> 00:30:01,822
it doesn't do them any good to, like, show them a direct view of the wall

448
00:30:01,902 --> 00:30:03,583
because there's nothing beyond it.

449
00:30:04,883 --> 00:30:09,485
So use the player's velocity to figure out where they're going

450
00:30:10,205 --> 00:30:12,506
rather than the direction they're pressing on the analog stick.

451
00:30:12,886 --> 00:30:15,667
Because they may be pressing in, like, or even worse,

452
00:30:15,707 --> 00:30:17,288
they may be running into an invisible wall.

453
00:30:17,308 --> 00:30:19,268
EDITED-88DF-ACP-MGN-DQ

454
00:30:19,666 --> 00:30:22,468
you don't want to taunt the player by showing them beyond the invisible wall.

455
00:30:22,488 --> 00:30:24,229
You want to swing the camera around the other direction

456
00:30:24,289 --> 00:30:25,770
to show them where they should be going.

457
00:30:25,790 --> 00:30:31,493
Uh, 24 is making it hard to judge distances.

458
00:30:31,513 --> 00:30:33,395
Uh, I love this game a lot, but

459
00:30:34,035 --> 00:30:34,755
this is a, uh,

460
00:30:35,836 --> 00:30:38,558
a situation where the challenge is created entirely by the camera

461
00:30:39,118 --> 00:30:42,540
kind of refusing to align with the direction you're going in.

462
00:30:45,082 --> 00:30:47,824
The problem is that the screen is two-dimensional,

463
00:30:48,966 --> 00:30:50,887
and even if you've got some kind of three-dimensional screen,

464
00:30:50,907 --> 00:30:52,068
depth perception is pretty weak.

465
00:30:53,890 --> 00:30:55,972
Players are much better at judging distances

466
00:30:56,032 --> 00:30:58,875
that align with the plane of the screen.

467
00:31:01,477 --> 00:31:01,978
And there's the...

468
00:31:02,578 --> 00:31:04,640
So, for example, if you have a top view...

469
00:31:05,513 --> 00:31:09,574
you're good at judging all horizontal motion.

470
00:31:09,614 --> 00:31:10,674
Whereas if you have a side view, you're

471
00:31:10,694 --> 00:31:13,755
good at judging vertical motion and also horizontal motion

472
00:31:13,795 --> 00:31:14,315
on one axis.

473
00:31:16,355 --> 00:31:18,176
And in this case, for this catwalk,

474
00:31:18,616 --> 00:31:19,916
the most important thing for the player

475
00:31:19,956 --> 00:31:23,197
is to know how far they are from either side of the catwalk,

476
00:31:25,217 --> 00:31:26,517
which means that the camera really

477
00:31:26,537 --> 00:31:28,398
should be pointing right down the catwalk

478
00:31:28,578 --> 00:31:31,419
so you can see, so you can align that axis

479
00:31:31,479 --> 00:31:33,699
with the sideways axis of the screen.

480
00:31:40,691 --> 00:31:44,933
25 is looking straight ahead as the avatar approaches a cliff.

481
00:31:47,094 --> 00:31:53,098
When people walk towards a ledge, they will look down to see what's below,

482
00:31:53,538 --> 00:31:54,639
and the camera should do the same thing.

483
00:31:56,300 --> 00:32:01,883
You can cast more rays, kind of a downwards ray in front of the avatar

484
00:32:01,923 --> 00:32:05,225
to see if there's any drop in front of the avatar.

485
00:32:06,333 --> 00:32:10,934
And if you detect a drop, the camera can rotate its pitch to swing into a bird's eye view.

486
00:32:12,695 --> 00:32:18,616
And an additional benefit of this, in addition to just showing you what's down there, the

487
00:32:18,716 --> 00:32:23,018
camera is ready to get out of the way if the player falls off the cliff.

488
00:32:24,078 --> 00:32:30,300
Otherwise, if the camera is level when you fall off a cliff and the avatar falls, then

489
00:32:30,320 --> 00:32:32,640
the camera wants to fall with it and will crash into the cliff itself.

490
00:32:34,072 --> 00:32:35,733
But if it's looking from a bird's eye view,

491
00:32:35,753 --> 00:32:43,277
it can just slip over the edge.

492
00:32:44,377 --> 00:32:47,839
26 is keeping the camera level when the avatar is

493
00:32:47,899 --> 00:32:48,959
running up or down a slope.

494
00:32:51,440 --> 00:32:55,182
The same kind of technique for cliffs applies to slopes.

495
00:32:56,263 --> 00:32:58,844
Detect what the height of the ground is in front of you.

496
00:32:58,904 --> 00:33:00,805
And if it's above or below, you can look up and down.

497
00:33:02,806 --> 00:33:03,086
However.

498
00:33:05,199 --> 00:33:07,320
Some people might try to just use, like,

499
00:33:07,400 --> 00:33:09,341
the shape of the terrain directly under the player's feet.

500
00:33:10,502 --> 00:33:12,663
But if it's bumpy terrain, that might give you

501
00:33:12,743 --> 00:33:14,544
noisy information, so you should be really

502
00:33:15,284 --> 00:33:18,105
doing some kind of rate cast ahead of the player

503
00:33:18,145 --> 00:33:21,027
to figure out, like, the average slope of the terrain.

504
00:33:27,470 --> 00:33:29,571
27 is misusing rule of thirds.

505
00:33:31,265 --> 00:33:35,689
Rule of thirds is another well-known rule from cinematography.

506
00:33:36,589 --> 00:33:42,914
It basically says that pictures are more attractive when the subjects are off-center, usually

507
00:33:42,954 --> 00:33:43,535
facing inwards.

508
00:33:45,476 --> 00:33:50,981
This is a simple way to improve the perceived quality of your camera design, but the wrong

509
00:33:51,021 --> 00:33:56,485
way to implement it is to rotate the camera in place.

510
00:33:58,083 --> 00:34:02,586
Like, if you're trying to implement rule of thirds by holding a physical camera in your

511
00:34:02,606 --> 00:34:06,769
hands, you'll probably just rotate your hands a little bit and you're pivoting in place.

512
00:34:07,749 --> 00:34:12,432
But again, a game camera should never pivot in place.

513
00:34:12,492 --> 00:34:15,755
It should be rotating around the avatar when it's doing the rotations.

514
00:34:16,435 --> 00:34:22,679
So instead, in order to create an off-center avatar, you can just slide the camera sideways.

515
00:34:28,570 --> 00:34:33,672
There's a problem here, however, which is that players use the center of the screen

516
00:34:33,973 --> 00:34:38,975
to aim their analog stick. If you have the player on the off-center while they're running,

517
00:34:39,555 --> 00:34:44,938
they'll get confused about what direction they're running in. So, in Journey, we only

518
00:34:45,038 --> 00:34:48,760
use rule of thirds when the player is standing still. When they have to be running or when

519
00:34:48,780 --> 00:34:52,581
the player is pressing the analog stick, we make the avatar drift back to the center.

520
00:34:54,401 --> 00:34:56,343
And I'm showing a clip from Shadow of the Colossus here,

521
00:34:56,443 --> 00:34:58,404
because it's actually an interesting counterexample.

522
00:34:59,685 --> 00:35:03,308
In this game, I think it's OK that the horse is off center

523
00:35:03,388 --> 00:35:04,069
as you're riding it.

524
00:35:04,669 --> 00:35:07,331
Because in this game, you're not using the analog stick to

525
00:35:07,952 --> 00:35:08,592
aim, actually.

526
00:35:08,633 --> 00:35:10,434
You're pressing the gas pedal to go forwards.

527
00:35:11,315 --> 00:35:13,016
And then you just use the analog stick to press left and

528
00:35:13,036 --> 00:35:13,596
right to steer.

529
00:35:14,797 --> 00:35:19,681
So in this case, I think it's OK that the player doesn't

530
00:35:19,741 --> 00:35:21,863
need to associate up on the analog stick with the center

531
00:35:21,883 --> 00:35:22,223
of the screen.

532
00:35:24,841 --> 00:35:28,884
because you don't use the analog stick to go forward.

533
00:35:29,504 --> 00:35:32,447
28 is using the same logic for ground and air motion.

534
00:35:34,929 --> 00:35:37,290
I've mostly been talking about ground motion so far.

535
00:35:38,912 --> 00:35:41,614
But depending on the kind of game you have,

536
00:35:41,654 --> 00:35:44,316
there may be different kinds of locomotion in the game.

537
00:35:44,796 --> 00:35:46,277
In Journey, you have running and flying.

538
00:35:47,578 --> 00:35:50,700
Shout out to the Colossus has, as we said, the horse.

539
00:35:52,029 --> 00:35:55,092
And these different transportation modes

540
00:35:55,573 --> 00:35:58,175
take different paths and trajectories through space.

541
00:35:58,736 --> 00:36:00,898
And the player needs to be able to make different kinds of judgments.

542
00:36:02,720 --> 00:36:04,241
And in the case of flying and journey,

543
00:36:05,823 --> 00:36:07,585
what goes up always must come down.

544
00:36:08,646 --> 00:36:11,569
And it's important to always show the player where they're going to land.

545
00:36:13,270 --> 00:36:13,471
So...

546
00:36:15,290 --> 00:36:16,631
Especially when you're running out of juice.

547
00:36:17,031 --> 00:36:18,812
In Journey, you have like a special amount of,

548
00:36:19,113 --> 00:36:20,373
or a limited amount of flying juice.

549
00:36:20,393 --> 00:36:21,654
It's like at the very beginning,

550
00:36:21,674 --> 00:36:22,495
you might be flying upwards

551
00:36:22,535 --> 00:36:24,536
and the camera will look up to show you where you're going.

552
00:36:25,056 --> 00:36:26,057
But as you're running out of juice,

553
00:36:26,137 --> 00:36:28,058
it's important to tilt the camera downwards

554
00:36:28,278 --> 00:36:30,179
so that you're prepared to land at any time.

555
00:36:31,740 --> 00:36:32,500
To see where you're gonna land.

556
00:36:36,672 --> 00:36:40,993
29 is relying entirely on procedural camera behaviors.

557
00:36:42,294 --> 00:36:43,454
Pretty much all of the camera behaviors

558
00:36:43,474 --> 00:36:46,795
I've described so far are just automatic things

559
00:36:46,815 --> 00:36:48,516
that it does to respond to the environment

560
00:36:48,556 --> 00:36:49,136
and to the player.

561
00:36:50,977 --> 00:36:55,818
But ray casting is only gonna tell you

562
00:36:55,838 --> 00:36:56,478
the shape of the terrain.

563
00:36:56,518 --> 00:36:58,179
It doesn't tell you what's important.

564
00:37:00,729 --> 00:37:04,812
We, as game designers, need to decide this, this, this other character in the game is

565
00:37:04,852 --> 00:37:08,655
important or this, this mountain is important. And the, the player needs to see these things.

566
00:37:09,455 --> 00:37:18,542
So, in, in our, in our maps or in levels, we, we add scripted hints to tell the camera

567
00:37:18,622 --> 00:37:25,407
in this context sensitive situation, the camera should be pointing at this particular target.

568
00:37:29,902 --> 00:37:33,264
I think camera hints become even more important in small closed environments

569
00:37:33,945 --> 00:37:39,369
because dynamic cameras are pretty good at open environments

570
00:37:39,589 --> 00:37:40,970
where there's not very many obstacles.

571
00:37:41,751 --> 00:37:44,833
But in small closed environments, there's a lot of stuff for the camera to watch out

572
00:37:44,873 --> 00:37:45,073
for.

573
00:37:46,014 --> 00:37:47,295
And the more we can help it out, the better.

574
00:37:50,165 --> 00:37:54,108
And here I have an example from Journey of a large tower.

575
00:37:54,428 --> 00:37:58,971
It's a very, it's a mostly complex, sorry, convex shape,

576
00:38:00,052 --> 00:38:02,153
which means there's like a pretty well-defined

577
00:38:02,213 --> 00:38:02,934
center of the tower.

578
00:38:03,594 --> 00:38:06,216
And as long as the camera is on the other side

579
00:38:06,857 --> 00:38:08,318
of the avatar from the center of the tower,

580
00:38:09,298 --> 00:38:10,659
then you can have a pretty clear view

581
00:38:10,719 --> 00:38:11,660
of what's going on here.

582
00:38:12,561 --> 00:38:14,622
So this is a scripted hint in the game

583
00:38:15,062 --> 00:38:17,504
that's not a general purpose behavior.

584
00:38:21,870 --> 00:38:25,753
30 is letting players make themselves lost and confused.

585
00:38:27,274 --> 00:38:28,655
Players do love to explore,

586
00:38:29,455 --> 00:38:30,796
and we want to enable them to do so.

587
00:38:31,937 --> 00:38:34,539
But we also want to make sure they don't get too lost.

588
00:38:36,061 --> 00:38:38,703
And the simplest solution employed by minigames

589
00:38:38,783 --> 00:38:41,285
is to put an arrow or radar on the screen.

590
00:38:42,365 --> 00:38:44,487
I feel that these are a bit heavy-handed.

591
00:38:44,547 --> 00:38:45,388
We do not use them in Journey.

592
00:38:46,747 --> 00:38:51,751
I prefer relying on subtle camera tricks to suggest the direction to go.

593
00:38:53,712 --> 00:38:57,936
For example, as I said, when you're running up against the boundary of the world and journey,

594
00:38:57,976 --> 00:39:03,080
the camera will spin around to show the opposite direction, to point you back towards the center

595
00:39:03,100 --> 00:39:03,881
or where you're supposed to go.

596
00:39:06,164 --> 00:39:10,045
Another thing you might try doing is detecting whether or not the player has backtracked

597
00:39:10,625 --> 00:39:16,026
a significant distance. And if they have, then spin the camera around to point them

598
00:39:16,046 --> 00:39:27,429
forwards again. 31 is rotating to look at nearby targets. When you have a scripted hint

599
00:39:27,489 --> 00:39:32,810
that's telling the camera to look at, for example, another character or avatar who is

600
00:39:32,830 --> 00:39:33,630
standing right next to you.

601
00:39:34,718 --> 00:39:38,461
Maybe your first approach would be to make the camera rotate to point at it.

602
00:39:39,302 --> 00:39:44,866
But if you keep doing that, on the left you see Batman Arkham Asylum, and the camera just

603
00:39:44,886 --> 00:39:49,610
keeps spinning around because these two things that are in close proximity keep kind of basically

604
00:39:49,650 --> 00:39:52,813
dancing around each other, and it's hard to keep up with that kind of rotation.

605
00:39:54,992 --> 00:39:57,332
But fortunately, there's an alternative approach here,

606
00:39:57,372 --> 00:40:02,193
which is to just pull the camera either to the side or back

607
00:40:02,733 --> 00:40:05,954
to include more in its view.

608
00:40:07,334 --> 00:40:09,095
In Journey, for example, what happens

609
00:40:09,175 --> 00:40:10,555
is the camera pulls out right about now

610
00:40:11,055 --> 00:40:13,996
to show both avatars without doing any rotation.

611
00:40:15,256 --> 00:40:19,797
And that just is less disorienting and more graceful.

612
00:40:24,010 --> 00:40:26,831
32 is translating to look at distant targets.

613
00:40:27,231 --> 00:40:28,712
This is the opposite situation.

614
00:40:28,992 --> 00:40:30,973
If you have a nearby thing, you should

615
00:40:32,693 --> 00:40:35,775
slide the camera sideways or backwards to include it.

616
00:40:36,235 --> 00:40:38,856
But if you have a distant thing, like something

617
00:40:38,896 --> 00:40:42,778
on the horizon of the screen, or like the sun, for example,

618
00:40:43,938 --> 00:40:46,039
no amount of sliding the camera around

619
00:40:46,679 --> 00:40:48,820
would change the position of the sun on the screen.

620
00:40:49,220 --> 00:40:51,722
So the correct thing to do in that case is to rotate.

621
00:40:56,730 --> 00:41:00,140
33 is letting the avatar's own body occlude targets ahead.

622
00:41:02,550 --> 00:41:06,934
If you're rotating the camera to point at something and the avatar is in the center

623
00:41:06,954 --> 00:41:11,198
of the screen, there's a danger that the avatar itself will actually eclipse what you're looking

624
00:41:11,238 --> 00:41:17,263
at. You can point either to the side or you can, this would be a good opportunity for

625
00:41:17,283 --> 00:41:20,987
rule of thirds to slide to the side so that the avatar is on the side of the screen. But

626
00:41:21,067 --> 00:41:23,329
in any case, you should just be aware of this situation.

627
00:41:25,502 --> 00:41:28,163
Often, the easiest thing to do is to just make sure

628
00:41:28,183 --> 00:41:29,543
that the camera's tilted down slightly

629
00:41:29,583 --> 00:41:31,384
so it can see over the top of the avatar's head.

630
00:41:34,385 --> 00:41:37,927
34 is giving the player control over the camera

631
00:41:38,247 --> 00:41:39,107
and then taking it away.

632
00:41:42,069 --> 00:41:43,829
It's very frustrating to give players control

633
00:41:43,889 --> 00:41:45,310
only to take it away again later.

634
00:41:45,930 --> 00:41:48,071
So when you're making these scripted camera hints,

635
00:41:48,771 --> 00:41:53,013
you should be aware that, or at least enable the player

636
00:41:53,113 --> 00:41:54,874
to override the hints whenever possible.

637
00:41:58,354 --> 00:42:04,656
And if you have to make a hint that will override player control, make sure it's in a situation

638
00:42:05,436 --> 00:42:10,118
where the camera is already looking at everything that the player needs to see so that they

639
00:42:10,138 --> 00:42:19,702
won't feel the need to control it. 35 is immediately applying a hint to, a scripted hint to control

640
00:42:19,722 --> 00:42:23,844
the camera after the player has finished turning the camera to look at something.

641
00:42:25,502 --> 00:42:27,024
If the player is deliberately controlling the camera,

642
00:42:27,044 --> 00:42:29,506
they probably want to be looking

643
00:42:30,086 --> 00:42:31,107
wherever they point at the camera.

644
00:42:32,048 --> 00:42:34,570
And if you have a, like, a scripted hint

645
00:42:34,590 --> 00:42:36,472
that's always on and always trying to push the camera

646
00:42:36,492 --> 00:42:37,112
in a certain direction,

647
00:42:38,013 --> 00:42:39,314
as soon as you stop overriding it,

648
00:42:39,434 --> 00:42:41,756
it'll start, it'll kick in again and turn the camera.

649
00:42:42,477 --> 00:42:45,760
So the, there should be, like, a little delay.

650
00:42:46,404 --> 00:42:49,987
after controlling the camera where the camera will continue to look where the players want

651
00:42:50,007 --> 00:42:58,675
it, wants it to be pointed. And either after delay or after maybe the player started moving

652
00:42:58,735 --> 00:43:09,324
again, then you can let the hint kick in again. 36 is not letting experts explore.

653
00:43:11,448 --> 00:43:17,511
Even if the player is technically still in control of the camera and constantly controlling it,

654
00:43:18,232 --> 00:43:24,776
it can be frustrating when overbearing hints are constantly trying to get them to go in a different direction.

655
00:43:26,277 --> 00:43:30,799
Especially when experts are replaying a game, they're likely to want to go to new places.

656
00:43:31,940 --> 00:43:35,842
So after the hints have helped the players establish their goals,

657
00:43:36,842 --> 00:43:41,184
the hint can be disengaged to allow the player to find their own way to get there.

658
00:43:43,886 --> 00:43:46,647
37 is not providing inverted controls.

659
00:43:46,687 --> 00:43:47,928
This is a big problem.

660
00:43:48,288 --> 00:43:50,649
I think pretty much everyone in the game industry kind of knows about this problem,

661
00:43:50,669 --> 00:43:52,070
especially first-person shooter developers.

662
00:43:53,310 --> 00:43:59,153
But a significant fraction of the game-playing population wants up to be down.

663
00:44:00,044 --> 00:44:05,267
and the other half or large fraction wants down to be down and up to be up.

664
00:44:06,908 --> 00:44:10,010
And they probably will either refuse to play your game

665
00:44:10,130 --> 00:44:11,711
or just complain a whole lot about the game

666
00:44:11,751 --> 00:44:15,273
if they can't set the controls to be the way they want.

667
00:44:15,914 --> 00:44:20,616
So make sure you have an option somewhere in the game to invert the axes.

668
00:44:21,557 --> 00:44:25,740
This is actually the only option we have in Journey for controls.

669
00:44:29,136 --> 00:44:31,177
38 is responding to accidental controller input.

670
00:44:32,498 --> 00:44:36,161
In Journey, we made the decision to support

671
00:44:36,622 --> 00:44:38,483
two different inputs for controlling the camera.

672
00:44:38,603 --> 00:44:42,066
There's the analog stick, and there's also

673
00:44:42,146 --> 00:44:44,928
the actual gyroscope or orientation

674
00:44:44,968 --> 00:44:46,209
of the PS3 controller.

675
00:44:48,792 --> 00:44:51,374
And this is partly left over from Flower,

676
00:44:51,634 --> 00:44:54,056
where you control the game with tilting the controller.

677
00:44:55,214 --> 00:44:57,455
Honestly, I think it made a lot more sense in Flower

678
00:44:57,495 --> 00:44:59,256
because it's the only thing you do in the game.

679
00:45:00,597 --> 00:45:02,438
Whereas in Journey, it's more of a

680
00:45:03,338 --> 00:45:04,979
pat your head and rub your belly type of a problem.

681
00:45:07,040 --> 00:45:09,662
And we end up in Journey with people often

682
00:45:10,862 --> 00:45:13,143
tilting the controller accidentally

683
00:45:13,644 --> 00:45:15,345
and accidentally making the camera swing around.

684
00:45:17,290 --> 00:45:19,872
There are reasons why we supported the tilt.

685
00:45:20,092 --> 00:45:23,895
I think it is an intuitive control

686
00:45:23,955 --> 00:45:25,476
for especially new players.

687
00:45:27,818 --> 00:45:31,480
But I think, at the very least, we probably

688
00:45:31,500 --> 00:45:37,324
should have had an option to disable it.

689
00:45:37,705 --> 00:45:40,667
39 is using linear sensitivity, especially on the analog stick.

690
00:45:41,387 --> 00:45:42,748
Analog sticks don't have much range.

691
00:45:45,789 --> 00:45:49,771
Often it doesn't matter much, honestly, because players have a tendency to push the stick

692
00:45:49,892 --> 00:45:53,033
all of the way. You kind of saw this in the Beyond Good and Evil clip where the player

693
00:45:53,053 --> 00:45:58,436
kept twitching the camera. But I think it would have been nicer to provide sort of an

694
00:45:58,517 --> 00:46:04,280
intermediate or a very slow way, a way to control the camera very slowly for fine tuning

695
00:46:04,300 --> 00:46:07,021
the camera direction. And you can do that by

696
00:46:08,320 --> 00:46:12,882
stretching the input axis from the analog stick

697
00:46:12,942 --> 00:46:23,226
into sort of an S-curve that reduces the neutral positions.

698
00:46:23,826 --> 00:46:26,047
40 is letting the camera pivot drift too far.

699
00:46:26,187 --> 00:46:28,028
So this means...

700
00:46:30,269 --> 00:46:32,510
Well, in order to smooth out camera motion,

701
00:46:32,530 --> 00:46:35,131
for example, if you have an avatar that is jerkily...

702
00:46:35,952 --> 00:46:36,853
dashing back and forth.

703
00:46:37,953 --> 00:46:43,017
It's nice to smooth it out by letting the avatar drift

704
00:46:43,057 --> 00:46:44,038
from the center of the screen.

705
00:46:45,880 --> 00:46:46,720
But if you do that too much,

706
00:46:46,900 --> 00:46:49,182
if you let the camera be too lazy,

707
00:46:49,382 --> 00:46:51,424
then the avatar might actually run outside the screen,

708
00:46:51,444 --> 00:46:52,084
and that's a problem.

709
00:46:54,006 --> 00:46:56,988
So if you're using an elastic band type thing

710
00:46:57,048 --> 00:46:59,951
to make the camera attracted to the avatar,

711
00:47:00,851 --> 00:47:01,972
make sure it has a limit

712
00:47:02,072 --> 00:47:04,334
to how far the avatar can get from the center of the screen.

713
00:47:06,706 --> 00:47:11,628
And you might actually want the camera to look ahead of the avatar.

714
00:47:12,769 --> 00:47:19,312
For example, in Yoshi's Island, if the player is running in a certain direction for a little

715
00:47:19,352 --> 00:47:23,154
while, the camera will adjust by looking ahead of Yoshi.

716
00:47:25,176 --> 00:47:28,377
However, problem 41, using a small field of view.

717
00:47:34,053 --> 00:47:36,094
When the camera zooms in on a tiny little thing,

718
00:47:37,355 --> 00:47:39,877
then tiny little motions become large motions.

719
00:47:41,158 --> 00:47:44,180
And zooming in exaggerates the speed of everything.

720
00:47:44,220 --> 00:47:47,282
And zooming out makes everything appear to move much slower.

721
00:47:48,923 --> 00:47:52,985
And here's a game that is, I think,

722
00:47:53,005 --> 00:47:54,366
nostalgic for a lot of people.

723
00:47:54,506 --> 00:47:55,387
I enjoy the game quite a lot.

724
00:47:57,408 --> 00:47:59,910
But when I tried, this is an example of a game

725
00:47:59,950 --> 00:48:03,052
where when I tried to show it to some of my friends.

726
00:48:04,167 --> 00:48:07,931
they're not able to play the game because the camera just moves too rapidly.

727
00:48:09,452 --> 00:48:11,614
This is something I care about a lot.

728
00:48:12,074 --> 00:48:13,655
This is called simulation sickness.

729
00:48:13,735 --> 00:48:20,281
It's when people play games and just from playing the game and watching the screen,

730
00:48:20,741 --> 00:48:21,642
they feel sick.

731
00:48:27,063 --> 00:48:30,566
I wish that Yoshi's Island, for example, or many other games,

732
00:48:31,386 --> 00:48:33,487
would zoom out a bit more,

733
00:48:33,587 --> 00:48:36,609
so you have a bit more space to look around,

734
00:48:36,649 --> 00:48:38,731
and the camera wouldn't have to move as quickly

735
00:48:38,771 --> 00:48:41,272
to keep up with the action on the screen.

736
00:48:44,674 --> 00:48:46,395
And on the subject of zooming out,

737
00:48:46,415 --> 00:48:48,857
this is also applicable to first-person shooter games.

738
00:48:49,897 --> 00:48:51,398
I don't have a clip, but you could easily put

739
00:48:51,438 --> 00:48:53,220
a first-person shooter clip on the screen.

740
00:48:57,398 --> 00:49:01,102
First person shooters are actually probably the most common trigger for simulation sickness.

741
00:49:02,043 --> 00:49:07,208
And the way that people usually recommend that players deal with it is by going into

742
00:49:07,248 --> 00:49:11,252
the configuration for the game they're playing and expanding the default field of view.

743
00:49:13,354 --> 00:49:16,957
And as I explained, this has the effect of making everything appear to move slower.

744
00:49:17,958 --> 00:49:21,721
And I think this is a good way to deal with this situation.

745
00:49:21,741 --> 00:49:25,844
And if you're making a first-person shooter, especially for console where you don't always

746
00:49:25,884 --> 00:49:30,648
have as much configuration options, include a way to expand the field of view or just

747
00:49:30,708 --> 00:49:37,634
have it expanded by default so that you don't exclude players who would otherwise be made

748
00:49:37,674 --> 00:49:38,194
sick by your game.

749
00:49:41,001 --> 00:49:42,562
42 is rapidly shifting field of view.

750
00:49:43,002 --> 00:49:46,483
This is actually increasing a problem in first-person shooters.

751
00:49:48,844 --> 00:49:54,686
When aiming with a sniper rifle or other type of weapon with a scope, the camera often zooms

752
00:49:54,746 --> 00:49:55,346
in rapidly.

753
00:49:56,887 --> 00:49:58,127
And also racing games do this.

754
00:49:58,247 --> 00:50:04,189
When you're boosting, the camera will zoom out to make it feel like you're going faster.

755
00:50:05,769 --> 00:50:08,991
And these kinds of things are also triggers for simulation sickness.

756
00:50:09,191 --> 00:50:10,952
So be aware.

757
00:50:14,594 --> 00:50:15,754
43 is shaking the camera.

758
00:50:17,675 --> 00:50:21,717
Screen shake is an effect that is commonly used in all kinds of video games.

759
00:50:23,118 --> 00:50:26,360
It's popular because it emphasizes impacts that happens in the game world.

760
00:50:26,520 --> 00:50:31,442
And alongside vibration, this is used to make the game feel more real.

761
00:50:33,958 --> 00:50:37,179
Some people say that screen shake is the easiest way to make a game feel more polished.

762
00:50:38,179 --> 00:50:40,439
So it's clearly a very useful tool for game developers.

763
00:50:41,280 --> 00:50:47,641
But I want you to be aware that not all players experience shaking in the same way.

764
00:50:48,021 --> 00:50:50,522
The right amount of shake for you might be too much shake for someone else.

765
00:50:52,262 --> 00:50:58,483
So again, I urge you to have accessibility settings for tuning down effects like screen shake.

766
00:50:59,624 --> 00:51:01,504
I have a clip from...

767
00:51:03,126 --> 00:51:10,347
TowerFall here. And I'm told that TowerFall actually does include a setting to turn off

768
00:51:10,407 --> 00:51:19,029
the camera effects. So I'm putting it here as a good example. 44, bouncing the camera

769
00:51:19,049 --> 00:51:23,250
with the avatar's walk cycle. This is another common one, especially in over the head games,

770
00:51:23,750 --> 00:51:29,391
over the shoulder games. This again is to make the camera feel more real.

771
00:51:31,938 --> 00:51:34,019
feeling real to you might not feel real to someone else,

772
00:51:34,079 --> 00:51:35,320
might feel nauseous to someone else.

773
00:51:37,241 --> 00:51:38,142
Um, nauseating, rather.

774
00:51:38,542 --> 00:51:41,263
The goal is to...

775
00:51:42,044 --> 00:51:44,085
the same as screen shake again, to make it feel more real.

776
00:51:44,545 --> 00:51:45,485
And the effect is similar.

777
00:51:45,986 --> 00:51:49,508
Camera bobbing is just a longer, slower shake,

778
00:51:50,168 --> 00:51:52,089
and equally likely to trigger simulation sickness.

779
00:51:53,130 --> 00:51:54,790
So you should be able to disable that as well.

780
00:51:55,971 --> 00:51:58,953
I have seen plenty of games with an option to disable this.

781
00:51:58,993 --> 00:52:00,433
This is a common one. Do it, please.

782
00:52:04,090 --> 00:52:08,092
translating or sliding up and down or rotating up and down

783
00:52:09,432 --> 00:52:10,513
when the avatar is jumping.

784
00:52:12,414 --> 00:52:18,557
A lot of games, both third person and side scrollers,

785
00:52:18,697 --> 00:52:21,639
have the camera kind of locked onto the avatar when they jump.

786
00:52:22,599 --> 00:52:25,401
And that means, like, at the moment when they jump and when they land,

787
00:52:25,801 --> 00:52:27,662
the camera has this abrupt start and stop.

788
00:52:28,923 --> 00:52:30,323
And that can be triggering as well.

789
00:52:33,604 --> 00:52:36,565
This is another situation where we know what goes up must come down.

790
00:52:37,886 --> 00:52:45,309
And we know that the camera, the avatar is probably not in danger of going off the top

791
00:52:45,329 --> 00:52:45,869
of the screen.

792
00:52:46,349 --> 00:52:51,091
So we can just let the camera stay in place as long as they're just jumping up and down

793
00:52:51,131 --> 00:52:51,451
in place.

794
00:52:52,631 --> 00:52:58,694
And often what happens, like in Mario games, what happens is the camera waits until the

795
00:52:58,734 --> 00:53:01,535
player has landed on a higher surface before moving upwards.

796
00:53:04,304 --> 00:53:10,929
In Journey, we use sort of a rubber band to smooth out the rapid vertical motions that

797
00:53:10,949 --> 00:53:11,570
happen on the screen.

798
00:53:16,493 --> 00:53:20,736
46 is rapidly transitioning to a new camera position.

799
00:53:22,697 --> 00:53:24,819
This happens often in games.

800
00:53:25,499 --> 00:53:32,224
I think actually some game developers take the rule of not cutting a bit too far in games.

801
00:53:33,346 --> 00:53:35,527
Um, Zelda games are...

802
00:53:36,327 --> 00:53:38,589
The 3D Zelda games are especially bad at this.

803
00:53:39,309 --> 00:53:41,791
Uh, I think these camera transitions

804
00:53:41,851 --> 00:53:43,032
might as well be camera cuts.

805
00:53:43,932 --> 00:53:46,594
Um, but because they're smooth transitions,

806
00:53:47,474 --> 00:53:49,676
um, but they're really fast, smooth transitions,

807
00:53:49,736 --> 00:53:50,756
they create a sense of motion

808
00:53:50,777 --> 00:53:57,461
that wouldn't be there with a cut.

809
00:53:57,661 --> 00:53:59,902
47 is maintaining pitch speed until hitting the limit.

810
00:54:01,123 --> 00:54:01,203
Um...

811
00:54:02,011 --> 00:54:03,772
One of the downsides of using Euler angles

812
00:54:04,493 --> 00:54:07,595
is that there's gimbal lock and other problems

813
00:54:07,655 --> 00:54:08,596
if you look straight up and down.

814
00:54:08,616 --> 00:54:11,158
So you pretty much never want to have the,

815
00:54:11,819 --> 00:54:13,400
allow the player to look straight up and down.

816
00:54:13,420 --> 00:54:16,522
You want to have like some limit of how high and down they can look.

817
00:54:19,144 --> 00:54:20,305
But I've seen a lot of games.

818
00:54:21,340 --> 00:54:25,524
will make it so that if you're pressing like up on the camera control stick,

819
00:54:26,104 --> 00:54:29,487
it will rapidly move the camera upwards up until hitting the limit

820
00:54:29,827 --> 00:54:31,189
and then it'll come to an abrupt stop.

821
00:54:32,209 --> 00:54:35,452
And it's much better to anticipate hitting the top end

822
00:54:36,033 --> 00:54:37,694
to slow down as you approach the limit.

823
00:54:46,258 --> 00:54:52,201
This is probably a controversial thing to put as a mistake, but what I mean by this

824
00:54:52,942 --> 00:54:58,945
is that as games get more and more lifelike, and they're getting better and better at simulating

825
00:54:59,005 --> 00:55:05,328
motion, they're also getting better and better at triggering simulation sickness, because

826
00:55:05,368 --> 00:55:11,611
simulation sickness is what happens when there's a mismatch between what you see, the motion

827
00:55:11,631 --> 00:55:12,751
that you see and the motion that you feel.

828
00:55:14,754 --> 00:55:17,896
And I know that the Oculus Rift developers are doing their best to improve it,

829
00:55:18,096 --> 00:55:19,978
and I'm sure they are improving it.

830
00:55:21,899 --> 00:55:26,201
But for the purposes of maximizing your audience,

831
00:55:27,602 --> 00:55:33,106
and not excluding anybody, I urge everyone to not make games exclusively for the Oculus Rift.

832
00:55:34,306 --> 00:55:36,348
Make sure there's always some other way to play the game,

833
00:55:36,808 --> 00:55:40,270
because some people, I think, will probably never be able to play an Oculus Rift,

834
00:55:40,290 --> 00:55:42,411
or at least not in the next few years.

835
00:55:47,737 --> 00:55:49,018
49, testing with a narrow demographic.

836
00:55:51,239 --> 00:56:00,944
Children, especially, are eager to point out flaws and other people who don't have a personal

837
00:56:00,964 --> 00:56:04,406
relationship with you will be eager to criticize you.

838
00:56:06,094 --> 00:56:16,177
But, you may need to pry a bit with testers because I know from experience that some people

839
00:56:16,217 --> 00:56:19,058
who have simulation sickness don't want to admit it.

840
00:56:19,798 --> 00:56:20,699
It feels like a weakness.

841
00:56:22,879 --> 00:56:27,561
And you want to make sure that they feel comfortable telling you when there's a problem with their

842
00:56:27,581 --> 00:56:31,782
game because I'm sure that none of you want your customers to feel sick.

843
00:56:37,552 --> 00:56:40,594
And 50, writing a general constraint solver.

844
00:56:42,135 --> 00:56:49,340
Given the complexity of all of these constraints that I've been describing, it's probably tempting

845
00:56:49,880 --> 00:56:54,663
to just come up with a function that, like, evaluates how effectively each of these constraints

846
00:56:54,703 --> 00:57:01,067
has been satisfied, and to just try to optimize and pick the one angle that satisfies them

847
00:57:01,087 --> 00:57:04,949
all the best, and let the computer kind of figure out which one that is, which angle

848
00:57:04,969 --> 00:57:05,209
that is.

849
00:57:06,468 --> 00:57:09,070
But I believe this is actually almost never the right approach.

850
00:57:10,351 --> 00:57:12,353
Because when you let the computer do all the work,

851
00:57:12,973 --> 00:57:15,375
it can be very difficult to predict what the results are going to be.

852
00:57:16,476 --> 00:57:18,398
And if you can't predict it, then you can't really design it.

853
00:57:18,518 --> 00:57:20,399
You have to be able to iterate on the design

854
00:57:20,860 --> 00:57:23,942
with changes that affect the behavior in somewhat predictable ways.

855
00:57:25,846 --> 00:57:27,907
So I think it's important to deeply understand

856
00:57:28,607 --> 00:57:30,989
the relationship between the different camera constraints

857
00:57:31,849 --> 00:57:34,991
so that you're able to prioritize or otherwise figure out

858
00:57:35,051 --> 00:57:38,332
how to satisfy all the constraints as best as possible.

859
00:57:38,352 --> 00:57:39,133
Um...

860
00:57:39,153 --> 00:57:42,654
Let's see.

861
00:57:43,235 --> 00:57:43,355
So...

862
00:57:45,367 --> 00:57:46,467
The devil is in the details.

863
00:57:48,569 --> 00:57:50,870
These solutions that work for Journey

864
00:57:50,910 --> 00:57:51,690
might not work for you.

865
00:57:52,871 --> 00:57:56,073
So this list can serve as criteria

866
00:57:56,093 --> 00:57:57,554
to help you evaluate how well your solutions work.

867
00:57:58,675 --> 00:58:00,816
But it's not a replacement for doing your own research.

868
00:58:02,117 --> 00:58:05,939
So many of you will have to do some

869
00:58:05,959 --> 00:58:08,200
of the same kind of research and development

870
00:58:08,981 --> 00:58:09,981
that we have to do on Journey.

871
00:58:10,882 --> 00:58:12,463
So good luck.

872
00:58:12,993 --> 00:58:16,297
And first of all, I think I have two minutes for questions.

873
00:58:16,397 --> 00:58:17,338
One, two?

874
00:58:17,478 --> 00:58:18,920
Two minutes for questions.

875
00:58:19,501 --> 00:58:22,084
Anyone have any?

876
00:58:23,285 --> 00:58:23,385
Hello?

877
00:58:34,007 --> 00:58:39,532
Hi. So you mentioned a few options that you think everybody should have, view bob, field

878
00:58:39,572 --> 00:58:44,556
of view, camera shake. Do you think it's worthwhile to combine all those into a single option

879
00:58:44,676 --> 00:58:46,257
for people with simulation sickness?

880
00:58:47,639 --> 00:58:54,925
That may be a good idea, although I think there's some differences in how people experience

881
00:58:54,945 --> 00:58:58,288
simulation sickness. So some things that are triggering to some person, some people might

882
00:58:58,328 --> 00:58:59,269
not be triggering to someone else.

883
00:59:00,341 --> 00:59:05,725
Did you find that a lot of people with simulation sickness were very familiar with what precisely

884
00:59:05,745 --> 00:59:07,906
it was that caused their simulation sickness?

885
00:59:08,067 --> 00:59:08,987
That is actually a good question.

886
00:59:09,007 --> 00:59:10,408
That is not always the case.

887
00:59:11,029 --> 00:59:19,375
But if these options can be surfaced, you can let people know about them so that they'll

888
00:59:19,555 --> 00:59:22,036
know what to look for to figure it out.

889
00:59:22,597 --> 00:59:22,777
Okay.

890
00:59:22,837 --> 00:59:22,997
Thanks.

891
00:59:24,156 --> 00:59:27,478
So I know a bunch of us are probably going to go run and try to fix our third person cameras.

892
00:59:28,018 --> 00:59:30,579
And while you mentioned that like there's not a one size fits all,

893
00:59:30,599 --> 00:59:32,680
there's definitely also some principles that maybe extrapolate.

894
00:59:32,700 --> 00:59:33,300
Yeah.

895
00:59:33,601 --> 00:59:36,662
Not to put you on the spot, any chance you're going to like make a Unity plugin or something

896
00:59:36,682 --> 00:59:39,964
that's like a starting point that already acknowledges some of the major stuff

897
00:59:40,144 --> 00:59:44,566
so we can start from there instead of like having to recreate some of these foundations.

898
00:59:44,986 --> 00:59:47,067
I'm deeply considering it. It's a matter of having time.

899
00:59:47,567 --> 00:59:47,908
Fair enough.

900
00:59:49,508 --> 00:59:49,748
Thank you.

901
00:59:50,589 --> 00:59:52,090
Um, you can, I think I have one more person.

902
00:59:53,190 --> 00:59:57,994
So you mentioned modifying field of view in order to help with simulation sickness.

903
00:59:58,835 --> 01:00:04,259
However, in competitive first-person shooters, field of view can also be important to the

904
01:00:04,299 --> 01:00:08,123
player's ability to react to things on the edge of their vision.

905
01:00:08,163 --> 01:00:09,684
So it's actually a balance concern.

906
01:00:10,084 --> 01:00:13,747
Do you have any thoughts or experience with how to strike a reasonable balance between

907
01:00:13,787 --> 01:00:14,628
those two constraints?

908
01:00:16,069 --> 01:00:21,494
Well, I remember reading about in Quake people deliberately expanding field of view for an

909
01:00:21,534 --> 01:00:21,674
edge.

910
01:00:23,004 --> 01:00:26,547
So, sounds like expanded field of view is an advantage for everyone, just do it.

911
01:00:26,567 --> 01:00:39,999
Alright, you can contact me on Twitter, I can probably find my way over to the wrap-up

912
01:00:40,039 --> 01:00:40,639
room somehow.

913
01:00:41,640 --> 01:00:41,880
Thank you.

