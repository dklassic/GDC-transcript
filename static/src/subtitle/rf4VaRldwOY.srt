1
00:00:05,691 --> 00:00:08,332
I'm Heather Robertson, and I'm gonna be talking

2
00:00:08,552 --> 00:00:10,133
not just about procedural generation,

3
00:00:10,653 --> 00:00:12,374
but about procedural regeneration,

4
00:00:12,454 --> 00:00:14,334
which is the act of changing level design

5
00:00:15,815 --> 00:00:17,356
in response to player action.

6
00:00:18,836 --> 00:00:19,877
So hi, I'm Heather.

7
00:00:19,897 --> 00:00:22,298
I'm a cool person, I like to think,

8
00:00:22,818 --> 00:00:25,019
but one time last year I was at this big shot

9
00:00:25,059 --> 00:00:26,719
industry party, and this guy that I know

10
00:00:26,739 --> 00:00:28,160
walked by with a couple of CEO types,

11
00:00:28,220 --> 00:00:29,421
and he just kind of turned to them and said,

12
00:00:29,681 --> 00:00:31,101
hey, that's Heather, she ate paper once,

13
00:00:31,882 --> 00:00:33,582
and I haven't really lived that moment down.

14
00:00:35,971 --> 00:00:39,172
quick content warnings for this talk. There's one slide with minor zombie body horror in

15
00:00:39,192 --> 00:00:44,635
it. I'll let you know when it's going to happen. I make games. I make a lot of games. These

16
00:00:44,995 --> 00:00:51,618
are some of the games that I made since the start of 2017. I made 30 games last year.

17
00:00:52,198 --> 00:00:56,620
Most of the ones that aren't up there are board games. I like procedural generation.

18
00:00:56,640 --> 00:00:58,001
I think it's a really cool topic.

19
00:00:59,988 --> 00:01:02,310
I don't know, it's very near and dear to my heart.

20
00:01:02,850 --> 00:01:04,771
So just a quick introduction to that,

21
00:01:04,931 --> 00:01:06,692
because I want everybody to be on the same page

22
00:01:06,752 --> 00:01:08,353
for when this talk goes off the rails.

23
00:01:09,614 --> 00:01:12,576
Procedural generation is the act of using systems of rules

24
00:01:12,596 --> 00:01:14,177
to create large amounts of content.

25
00:01:16,419 --> 00:01:17,499
Now, a lot of people,

26
00:01:17,519 --> 00:01:19,080
when they think of procedural generation,

27
00:01:19,120 --> 00:01:21,862
they think of games like Minecraft and Spelunky,

28
00:01:22,002 --> 00:01:25,204
where the thing that is procedurally generated

29
00:01:25,405 --> 00:01:28,767
is the level design itself, the world of it, if you will.

30
00:01:29,762 --> 00:01:33,084
Minecraft, by the way, uses a Perlin noise generation system,

31
00:01:33,224 --> 00:01:36,245
while Spelunky uses a series of rooms

32
00:01:36,445 --> 00:01:39,627
with mildly randomized elements within those rooms.

33
00:01:40,747 --> 00:01:43,408
But procedural generation can be used

34
00:01:43,448 --> 00:01:45,349
for a large number of different things.

35
00:01:45,509 --> 00:01:49,071
So on the center right there, we have Vilmonic,

36
00:01:50,271 --> 00:01:51,792
which is a game where you raise,

37
00:01:52,881 --> 00:01:55,422
procedurally generated creatures with their own DNA,

38
00:01:55,542 --> 00:01:57,162
and that DNA decides their habits,

39
00:01:57,262 --> 00:01:58,503
and what they like and dislike,

40
00:01:58,563 --> 00:02:00,183
and also just the shape of their bodies.

41
00:02:01,064 --> 00:02:03,024
And on the far right there,

42
00:02:03,084 --> 00:02:06,585
we have Epitaph by the inimitable Max Kerminsky,

43
00:02:07,786 --> 00:02:09,006
who I think is in the audience.

44
00:02:09,606 --> 00:02:10,046
Hi, Max.

45
00:02:12,307 --> 00:02:16,308
Which is a game about watching hundreds of civilizations die

46
00:02:16,428 --> 00:02:17,949
and you can't do anything to help them.

47
00:02:19,434 --> 00:02:21,596
which is kind of a bummer,

48
00:02:21,636 --> 00:02:23,657
but also it does a lot of really interesting things

49
00:02:23,697 --> 00:02:25,699
with world generation and history generation,

50
00:02:25,939 --> 00:02:27,100
which is a cool thing.

51
00:02:27,660 --> 00:02:29,522
So I really like procedural generation.

52
00:02:29,802 --> 00:02:32,144
It has a lot of really cool things going for it.

53
00:02:32,784 --> 00:02:35,726
And while it may not always make a lot of sense

54
00:02:35,766 --> 00:02:37,047
from a level design perspective,

55
00:02:37,107 --> 00:02:39,629
there is a definitive level design aspect

56
00:02:39,689 --> 00:02:40,970
in procedural generation,

57
00:02:41,611 --> 00:02:43,132
and just it's important for everybody

58
00:02:43,152 --> 00:02:44,593
to have the same tools in their toolkit.

59
00:02:46,317 --> 00:02:49,460
So it allows you to make large amounts of content in a fairly short amount of time.

60
00:02:50,781 --> 00:02:54,825
It allows you to use systems-based design, which is my personal favorite kind of design.

61
00:02:54,845 --> 00:02:57,187
I just think it's really fun.

62
00:02:57,948 --> 00:02:59,490
There's a great community involved with it.

63
00:02:59,510 --> 00:03:04,755
On Twitter, the ProcJunk community is super helpful and super kind.

64
00:03:05,956 --> 00:03:09,538
just very willing to let you submit to their zines.

65
00:03:10,619 --> 00:03:12,700
It's a lot of fun to work with once it's up and running.

66
00:03:12,780 --> 00:03:16,142
That is one of the main problems with procedural generation

67
00:03:16,302 --> 00:03:19,984
is that until you have everything, you have nothing.

68
00:03:20,284 --> 00:03:22,465
And that's a very difficult concept

69
00:03:22,485 --> 00:03:23,726
to wrap your head around at first.

70
00:03:24,126 --> 00:03:25,386
So it is just a little bit scary,

71
00:03:25,427 --> 00:03:28,348
but also it's a lot of fun and it's cool.

72
00:03:29,479 --> 00:03:32,342
So, what if we took that concept of procedural generation

73
00:03:32,502 --> 00:03:33,763
and looped it back in on itself?

74
00:03:34,404 --> 00:03:35,885
This is the part of the talk where we go straight

75
00:03:35,905 --> 00:03:38,929
into mad science territory, by the way.

76
00:03:40,570 --> 00:03:42,052
This is something that I have been calling

77
00:03:42,132 --> 00:03:44,595
procedural regeneration, which is the act of changing

78
00:03:44,655 --> 00:03:47,438
level design dynamically in response to player action.

79
00:03:48,719 --> 00:03:51,481
There are a lot of really interesting things going on here,

80
00:03:51,541 --> 00:03:52,722
so I'm just going to take a second

81
00:03:52,742 --> 00:03:54,063
to pick apart that definition.

82
00:03:54,604 --> 00:03:57,266
This is essentially saying, you make a level,

83
00:03:57,846 --> 00:04:01,089
and then you have an AI in control of that level

84
00:04:01,149 --> 00:04:03,110
decide what the player can handle,

85
00:04:03,911 --> 00:04:05,592
and from there decide which paths

86
00:04:05,632 --> 00:04:07,154
the player should take down that level.

87
00:04:08,134 --> 00:04:09,595
This is a concept that I've been calling

88
00:04:09,636 --> 00:04:10,736
the gentle guiding hand,

89
00:04:10,816 --> 00:04:13,499
which allows you to use these less obvious systems

90
00:04:13,859 --> 00:04:15,380
to keep players on the right path.

91
00:04:16,922 --> 00:04:19,282
in general, just auto-balance the game for them

92
00:04:19,402 --> 00:04:23,644
so that high-level players encounter more difficult areas of the game, etc.

93
00:04:23,664 --> 00:04:27,945
So we're going to be going through a couple case studies real fast.

94
00:04:28,225 --> 00:04:31,006
We're going to be going for Left 4 Dead first,

95
00:04:31,246 --> 00:04:33,667
followed by Secret Spaces, followed by Eternity.

96
00:04:35,628 --> 00:04:36,708
Left 4 Dead is the next one.

97
00:04:36,888 --> 00:04:38,808
Next slide is the one with the zombie body horror.

98
00:04:38,908 --> 00:04:40,629
If that's not your thing, look away in 3, 2, 1.

99
00:04:41,689 --> 00:04:42,469
Okay.

100
00:04:42,509 --> 00:04:43,449
So this is Left 4 Dead.

101
00:04:45,050 --> 00:04:47,410
It is a ‑‑ all right, we're off that slide now.

102
00:04:47,430 --> 00:04:51,371
A four‑player cooperative zombie shooter where you try to survive through hordes of

103
00:04:51,391 --> 00:04:57,553
zombies and make your way through the post‑apocalypse in all these different areas like a carnival

104
00:04:57,933 --> 00:05:02,594
and a mill and a hospital and all of these different places.

105
00:05:04,554 --> 00:05:08,777
As you go through, there are a lot of interesting things about this game.

106
00:05:08,817 --> 00:05:10,498
It is a very well-designed zombie shooter.

107
00:05:11,178 --> 00:05:14,600
But the thing that is interesting to me and relevant to this talk

108
00:05:14,680 --> 00:05:19,724
is that the AI in this game is all directed by something called the director,

109
00:05:19,744 --> 00:05:20,384
which...

110
00:05:21,854 --> 00:05:28,419
depending on how well you're doing can throw all of these different obstacles at you from spawning hordes of zombies to special zombies

111
00:05:29,660 --> 00:05:33,724
to deciding whether you deserve a health pack and to

112
00:05:34,504 --> 00:05:38,708
changing physical level design making players go down one path or the other or

113
00:05:40,049 --> 00:05:44,753
moving the choke points or just making it rain so that you can't shoot as well and

114
00:05:44,893 --> 00:05:49,197
It does all of this stuff to try and give everybody a tense experience regardless of skill level

115
00:05:50,811 --> 00:05:53,033
which is interesting from an accessibility point as well.

116
00:05:53,874 --> 00:05:56,036
The director does this through a combination

117
00:05:56,256 --> 00:05:59,719
of dynamic and static procedural regeneration elements.

118
00:06:00,019 --> 00:06:02,581
The dynamic ones are things like placing zombies

119
00:06:02,621 --> 00:06:05,163
in the environment because that can happen

120
00:06:05,484 --> 00:06:07,766
in a spectrum of different locations

121
00:06:07,886 --> 00:06:11,389
and the director decides exactly for that situation

122
00:06:11,949 --> 00:06:13,010
where that zombie should go.

123
00:06:13,831 --> 00:06:16,333
Meanwhile, static or scripted elements

124
00:06:16,373 --> 00:06:18,535
of procedural regeneration are the...

125
00:06:19,636 --> 00:06:26,381
AI choosing between one of, say, two or three different scripts, like if the player is above

126
00:06:26,982 --> 00:06:31,566
75% health, they go down this hallway, and if they're below 75% health, they go down

127
00:06:31,646 --> 00:06:32,266
this hallway.

128
00:06:33,307 --> 00:06:37,871
As a general rule, dynamic is more difficult to implement for a lot of systems, but also

129
00:06:37,931 --> 00:06:39,212
potentially more rewarding.

130
00:06:40,112 --> 00:06:44,713
Especially since there's this concept of a level that you can sort of know,

131
00:06:45,033 --> 00:06:48,054
but you can never truly know, no matter how many times you go down it.

132
00:06:48,214 --> 00:06:49,735
That's a really powerful experience.

133
00:06:50,955 --> 00:06:55,356
So let's just go down a quick example of procedural regeneration

134
00:06:55,596 --> 00:06:59,537
in a generic shooter game in action, so that y'all can see.

135
00:07:00,477 --> 00:07:02,078
an example of what this is all about.

136
00:07:02,618 --> 00:07:05,859
So the player starts out in that room down there with the star.

137
00:07:06,559 --> 00:07:12,821
And they go north into this room, which has three guards, and the player viciously kills

138
00:07:12,881 --> 00:07:15,262
those guards, but takes a lot of damage in the process.

139
00:07:15,502 --> 00:07:21,024
And so from here, the game can decide whether to put the player into the easy path or the

140
00:07:21,064 --> 00:07:21,604
hard path.

141
00:07:23,128 --> 00:07:27,591
Since the player took a lot of damage, they go through the easy path and go to this room

142
00:07:27,771 --> 00:07:30,733
on the right with two other guards in it.

143
00:07:31,154 --> 00:07:35,457
But if the player had done well in that previous room, then they might go through this hallway

144
00:07:35,557 --> 00:07:37,638
in the north, which is close corridors.

145
00:07:39,319 --> 00:07:44,105
There are four enemies up there, and then they have to still face through those two enemies on the room on the right.

146
00:07:44,706 --> 00:07:49,291
Then, both players, regardless of how well they did, go through this hallway on the right.

147
00:07:49,732 --> 00:07:58,142
The player who needs a health pack at this point, and this could be either the player who did well at first or the player who did poorly at first, gets that health pack on the room on the left.

148
00:07:59,844 --> 00:08:03,946
then both players would go up to that room on top,

149
00:08:04,767 --> 00:08:06,528
then follow that left into the boss fight.

150
00:08:06,708 --> 00:08:08,809
But if the player is doing well,

151
00:08:09,010 --> 00:08:12,332
then that boss fight might have more enemies in it.

152
00:08:12,732 --> 00:08:16,815
Now I want to emphasize, this is not two separate players.

153
00:08:16,875 --> 00:08:19,676
This is the same player going through the same map

154
00:08:20,097 --> 00:08:21,057
with different realities.

155
00:08:21,097 --> 00:08:22,718
These are different branching paths

156
00:08:22,819 --> 00:08:25,060
that the level could decide to put them on.

157
00:08:25,981 --> 00:08:30,865
Of course, there are other examples for procedural regeneration as well, which I'm about to get to now.

158
00:08:31,746 --> 00:08:35,110
With the second case study, this is a game called Secret Spaces.

159
00:08:35,570 --> 00:08:38,353
I made it. It's really good. I hope you all like it.

160
00:08:40,395 --> 00:08:44,198
In it, you grow plants to explore this gigantic living building,

161
00:08:44,258 --> 00:08:47,902
searching for your girlfriend who fell down a hole because she's bad at not dying.

162
00:08:49,753 --> 00:08:55,256
It's about a lot of things, but for the purposes of our talk,

163
00:08:55,796 --> 00:08:57,416
it's about forging a positive relationship

164
00:08:57,436 --> 00:08:58,237
with your environment.

165
00:08:59,097 --> 00:09:00,918
And the way that it does this is through an AI

166
00:09:00,978 --> 00:09:02,458
that I've been calling the Tower AI.

167
00:09:03,099 --> 00:09:04,459
As you move through the building,

168
00:09:04,639 --> 00:09:07,180
the building forms an opinion on you.

169
00:09:07,300 --> 00:09:10,581
It is an active participant in the story and also

170
00:09:12,924 --> 00:09:16,227
decides what level of difficulty you go against.

171
00:09:16,907 --> 00:09:19,129
It rewards and punishes you based on your actions,

172
00:09:19,229 --> 00:09:21,932
but this is less of a, are you doing well at the game,

173
00:09:21,972 --> 00:09:23,153
are you doing poorly at the game,

174
00:09:23,253 --> 00:09:27,116
and more of a, are you acting in accordance

175
00:09:27,157 --> 00:09:29,058
to the building's own morality system,

176
00:09:29,519 --> 00:09:33,002
which is about forming a relationship with the environment,

177
00:09:33,782 --> 00:09:35,864
which moves plants around in the level,

178
00:09:35,964 --> 00:09:38,407
which are the primary interaction points of the game.

179
00:09:39,075 --> 00:09:43,045
uh... so if there are fewer plants in the level then you can't move as well

180
00:09:43,085 --> 00:09:46,053
you can't see as well you can't heal at all

181
00:09:46,073 --> 00:09:47,937
uh... and yeah

182
00:09:48,678 --> 00:09:51,500
So it makes this decision both on the micro and the macro scale.

183
00:09:51,940 --> 00:09:55,383
On the micro scale there's just constant day-to-day decisions

184
00:09:55,463 --> 00:09:58,005
like how many plants does the player have in their inventory.

185
00:09:58,845 --> 00:10:00,426
But there are also larger scale events

186
00:10:00,506 --> 00:10:02,788
like how far has the player progressed in the story

187
00:10:02,908 --> 00:10:06,571
and how have they reacted to specific rare events.

188
00:10:06,651 --> 00:10:08,712
There's a lot of events in this game that only happen one

189
00:10:08,752 --> 00:10:09,833
every thousand playthroughs,

190
00:10:10,113 --> 00:10:12,275
which I think is a really fun design space to work with.

191
00:10:15,012 --> 00:10:18,715
So this originally started out as a deterrent

192
00:10:18,755 --> 00:10:19,676
for mechanic abuse.

193
00:10:20,316 --> 00:10:21,657
I'm not quite sure if you can see it,

194
00:10:21,757 --> 00:10:23,279
but on the screenshot there on the right,

195
00:10:23,439 --> 00:10:25,560
if you check the player's inventory in the bottom center,

196
00:10:26,021 --> 00:10:30,464
you can see that they have 100 of the rarest fruits

197
00:10:30,524 --> 00:10:31,725
in the game in their inventory.

198
00:10:32,505 --> 00:10:35,446
which I figured should not be how any of this works.

199
00:10:36,347 --> 00:10:38,347
That was sent to me early on in development.

200
00:10:38,407 --> 00:10:39,988
This game was in early access for a while.

201
00:10:40,068 --> 00:10:41,448
I got that screenshot from somebody,

202
00:10:41,969 --> 00:10:44,149
and I said, nope, no, okay, this isn't happening,

203
00:10:44,469 --> 00:10:45,790
and added this AI into the game

204
00:10:45,830 --> 00:10:47,671
to try and stop that from happening.

205
00:10:47,731 --> 00:10:48,251
So right now...

206
00:10:48,891 --> 00:10:53,814
If you have more than five plants in your inventory at any given time, there isn't a hard inventory cap,

207
00:10:54,415 --> 00:10:58,378
but the game starts to heavily punish you by removing plants from the environment.

208
00:10:58,878 --> 00:11:03,481
In order to get things from the environment, you have to give back to it, in a sense.

209
00:11:05,402 --> 00:11:12,285
This ended up, in addition to being a good way to balance the game, also added to the tension.

210
00:11:12,585 --> 00:11:15,866
It made the game more fun because you had to make all these hard decisions.

211
00:11:16,666 --> 00:11:19,747
And in addition, it helped with the story and message in the long term.

212
00:11:20,648 --> 00:11:24,649
So let's move on to our third case study now, which is a game called Eternity.

213
00:11:25,329 --> 00:11:32,132
This one is still in progress. It is a game that I am currently making right now, as we speak, in that laptop over there.

214
00:11:32,152 --> 00:11:33,132
It is a game that I am currently making right now.

215
00:11:34,671 --> 00:11:35,632
a very special laptop.

216
00:11:36,852 --> 00:11:38,954
It is a stealth horror game about a monster

217
00:11:38,994 --> 00:11:40,095
who can change the past.

218
00:11:40,315 --> 00:11:42,797
You play as a person who has entered this house

219
00:11:43,317 --> 00:11:46,319
in search of a cure for death.

220
00:11:47,100 --> 00:11:48,961
And in that house, what they find instead

221
00:11:49,241 --> 00:11:52,663
is the same reality rearranged over and over again.

222
00:11:52,764 --> 00:11:55,205
They are a person shoved between hundreds

223
00:11:55,265 --> 00:11:56,946
and thousands of different timelines,

224
00:11:57,087 --> 00:11:59,508
each of which is the same house rearranged.

225
00:12:01,862 --> 00:12:04,844
This is the extreme case in procedural regeneration.

226
00:12:05,365 --> 00:12:08,767
It's based on player action and movement like the others are,

227
00:12:08,968 --> 00:12:13,311
but the world itself shuffles every couple seconds,

228
00:12:14,832 --> 00:12:16,934
which turns what should just be a simple house

229
00:12:17,274 --> 00:12:18,195
into a labyrinth.

230
00:12:19,270 --> 00:12:21,432
Is this feasible? Is this reasonable?

231
00:12:21,892 --> 00:12:23,193
Well, we're just gonna have to find out.

232
00:12:23,213 --> 00:12:24,193
The game's still in development.

233
00:12:24,253 --> 00:12:25,214
I don't have all the answers.

234
00:12:25,894 --> 00:12:27,195
Come to my talk next year, I hope.

235
00:12:29,136 --> 00:12:31,457
So there's only one monster in this game,

236
00:12:31,577 --> 00:12:33,238
but because of the warp nature of space,

237
00:12:33,318 --> 00:12:35,619
this monster confronts you at almost every turn.

238
00:12:36,060 --> 00:12:37,741
Like you can evade the monster once

239
00:12:38,401 --> 00:12:40,742
by hiding under a table and the monster will pass you by.

240
00:12:40,842 --> 00:12:42,023
And then you go into the next room

241
00:12:42,383 --> 00:12:43,884
where the monster logically shouldn't be,

242
00:12:44,004 --> 00:12:45,005
and yet there they are again,

243
00:12:45,165 --> 00:12:47,546
because that next room swapped itself

244
00:12:47,566 --> 00:12:48,447
with the previous room.

245
00:12:50,495 --> 00:12:56,999
So there is a quick distinction that I want to make between two main categories of procedural regeneration.

246
00:12:57,500 --> 00:13:05,866
There is outward procedural regeneration, which is the kind of procedural regeneration used in Left 4 Dead and Secret Spaces,

247
00:13:06,866 --> 00:13:09,808
in which the procedural regeneration moves outward.

248
00:13:10,189 --> 00:13:13,911
It sees where the player is and decides where they deserve to go from there.

249
00:13:14,772 --> 00:13:21,674
The other example is inward procedural regeneration, which is buck wild and deeply experimental even more so than outward

250
00:13:23,435 --> 00:13:25,375
The primary example of it there is eternity

251
00:13:26,636 --> 00:13:28,837
now in order to display a

252
00:13:29,417 --> 00:13:34,979
Like make and throw into sharp relief the difference between these two kinds of procedural regeneration on the left

253
00:13:34,999 --> 00:13:40,241
we had that example of outward procedural regeneration from before from before with the

254
00:13:40,721 --> 00:13:40,961
shooter

255
00:13:41,943 --> 00:13:45,185
And on the right, we have inward procedural regeneration

256
00:13:46,165 --> 00:13:47,526
with a level in eternity.

257
00:13:47,586 --> 00:13:50,047
That's a part of the floor plan of the house.

258
00:13:50,987 --> 00:13:52,088
Now it has a lot of the same.

259
00:13:53,993 --> 00:13:57,956
major components going on, like the player is still in there and there's still an enemy in there

260
00:13:58,756 --> 00:14:04,741
and the different doors in the environment can change position based on whether the player is

261
00:14:04,761 --> 00:14:12,106
doing well or poorly. In this case it's based less off of health and a number of guards killed,

262
00:14:12,246 --> 00:14:16,029
it's more based off of how many times the player has been spotted by the monster

263
00:14:16,509 --> 00:14:18,491
to try and achieve that sort of happy medium.

264
00:14:20,031 --> 00:14:25,193
Of course, there is one major difference in that the level changes shape every 20 seconds.

265
00:14:25,793 --> 00:14:29,414
That's the main difference between outward and inward procedural regeneration.

266
00:14:29,874 --> 00:14:32,455
Outward sees where you are and decides where you're going.

267
00:14:33,135 --> 00:14:35,436
Inward sees where you are and changes where you are.

268
00:14:37,397 --> 00:14:40,199
So, just real quick, the way that I'm implementing

269
00:14:40,459 --> 00:14:42,901
this inward procedural regeneration for eternity

270
00:14:43,041 --> 00:14:45,543
is using a double buffer system,

271
00:14:45,743 --> 00:14:48,745
which is something that is used often in graphics programming.

272
00:14:49,266 --> 00:14:52,488
Essentially, the player interacts with the world as it is,

273
00:14:52,769 --> 00:14:56,071
and a copy of that same world underneath it

274
00:14:56,752 --> 00:14:59,394
is constantly trying new forms, new arrangements,

275
00:14:59,494 --> 00:15:01,015
so that there isn't a huge lag spike

276
00:15:01,075 --> 00:15:02,856
every time the world tries to rearrange itself.

277
00:15:03,677 --> 00:15:04,978
Because it's happening over time,

278
00:15:05,178 --> 00:15:05,719
that allows.

279
00:15:06,664 --> 00:15:12,288
for smoother gameplay even though it does mean a larger CPU load on the second-to-second

280
00:15:12,328 --> 00:15:12,769
basis.

281
00:15:12,929 --> 00:15:17,452
It's not too big of a difficulty, it's just something that I figured I should discuss

282
00:15:17,472 --> 00:15:19,754
how I implemented because this game is deeply weird.

283
00:15:20,815 --> 00:15:25,999
So an important thing to grasp in procedural regeneration is that there is no difference

284
00:15:26,039 --> 00:15:28,160
between a hard path and an easy path.

285
00:15:29,322 --> 00:15:34,847
The hard path and the easy path are things in the environment, but it's not a difficulty setting.

286
00:15:34,988 --> 00:15:39,152
The player doesn't decide this. I mean, they could. I'll get into that in a second.

287
00:15:39,372 --> 00:15:46,219
But the level itself sees the player and decides what they're going to be comfortable dealing with.

288
00:15:47,198 --> 00:15:49,420
Now, part of the reason this is interesting

289
00:15:49,480 --> 00:15:51,001
is because players are kind of stubborn.

290
00:15:51,362 --> 00:15:54,905
They're not always the most willing to admit

291
00:15:54,965 --> 00:15:56,467
when they're not having a good time,

292
00:15:56,987 --> 00:15:58,849
especially when something is too hard for them.

293
00:15:59,449 --> 00:16:01,932
So having a system that can just straight up decide,

294
00:16:02,092 --> 00:16:04,534
okay, this is something that you would have fun with

295
00:16:05,035 --> 00:16:06,556
is something that could be deeply powerful

296
00:16:06,596 --> 00:16:07,537
as a design mechanic.

297
00:16:09,429 --> 00:16:14,134
Of course, design and easy path could be a difficulty setting in procedural regeneration

298
00:16:14,274 --> 00:16:19,980
in addition to other ways of doing hardness and easiness by, say, making enemies harder

299
00:16:20,000 --> 00:16:20,881
to kill, etc.

300
00:16:20,941 --> 00:16:25,386
You could also just have the AI decide to be meaner to the player.

301
00:16:25,886 --> 00:16:29,890
Just have the player say, okay, I want you to give me your worst and see how that goes

302
00:16:29,931 --> 00:16:30,291
from there.

303
00:16:31,567 --> 00:16:36,712
Um, so let's go over the pros and cons of procedural regeneration real fast,

304
00:16:36,812 --> 00:16:39,615
because no level design paradigm is perfect, unfortunately.

305
00:16:40,556 --> 00:16:42,697
Though actually, quick plug for my talk.

306
00:16:42,817 --> 00:16:44,537
Two years from now where I give the perfect

307
00:16:44,917 --> 00:16:47,618
level design paradigm, it's gonna rule.

308
00:16:49,099 --> 00:16:51,900
So the pros of procedural regeneration

309
00:16:52,060 --> 00:16:54,040
are that it is extremely cutting edge.

310
00:16:55,121 --> 00:16:56,781
You can do some really cool stuff with it

311
00:16:57,381 --> 00:17:00,422
and you will be innovating almost all the time

312
00:17:00,462 --> 00:17:01,103
while doing this.

313
00:17:02,003 --> 00:17:03,924
It's really good for game balancing on the fly.

314
00:17:03,964 --> 00:17:06,304
Like we talked earlier about the gentle guiding hand

315
00:17:06,424 --> 00:17:06,805
and about...

316
00:17:08,899 --> 00:17:12,366
there not being any true difference between the hard path and the easy path.

317
00:17:12,406 --> 00:17:15,412
The player can switch between them at any time depending on their performance.

318
00:17:17,246 --> 00:17:20,649
In addition, disorienting spaces are super spooky.

319
00:17:21,229 --> 00:17:23,611
Imagine a moment in a game where you walk through a door

320
00:17:24,171 --> 00:17:25,632
into a room, you turn around,

321
00:17:25,732 --> 00:17:27,354
and that door just isn't there anymore.

322
00:17:27,594 --> 00:17:28,554
That's lightning in a bottle.

323
00:17:28,675 --> 00:17:31,056
You can capture that with procedural regeneration

324
00:17:31,857 --> 00:17:34,499
and do other fun stuff with it in that same sense.

325
00:17:34,879 --> 00:17:36,881
It has a lot of fun horror elements going for it

326
00:17:36,941 --> 00:17:39,202
because the game is always one step ahead of the player.

327
00:17:41,357 --> 00:17:44,520
the game literally knows what the player has done

328
00:17:44,740 --> 00:17:47,622
and can form itself around that fact.

329
00:17:48,443 --> 00:17:50,885
For example, if a player lingers too long in one room,

330
00:17:50,945 --> 00:17:54,908
that same room might show up again in a different context.

331
00:17:55,669 --> 00:17:58,151
And in addition, it works well with different play styles,

332
00:17:58,251 --> 00:18:00,113
not just in the sense of some players

333
00:18:00,133 --> 00:18:02,915
will be better at the game and the game will adjust to that,

334
00:18:03,495 --> 00:18:04,897
but also in the sense of...

335
00:18:06,075 --> 00:18:12,318
Say you are developing a shooter game where there are three regular weapons, let's say a gun, a

336
00:18:12,358 --> 00:18:20,322
shotgun and I don't know, a sword. And one super powerful mini gun. Now, you could, now the mini

337
00:18:20,342 --> 00:18:24,464
gun is a lot of fun to play with because it just shreds through enemies and you really don't want

338
00:18:24,504 --> 00:18:29,066
to nerf it but also the player can access that thing at any time. How do you deal with that

339
00:18:30,945 --> 00:18:33,566
difference in weapon strength.

340
00:18:33,946 --> 00:18:36,027
Well, a normal game would say that you need

341
00:18:36,047 --> 00:18:37,307
to just nerf the minigun.

342
00:18:37,707 --> 00:18:39,548
But you don't have to with procedural regeneration

343
00:18:39,588 --> 00:18:42,689
because you can just, because the AI will detect

344
00:18:43,189 --> 00:18:47,110
that the player is just tearing through hordes of enemies

345
00:18:47,190 --> 00:18:49,011
and will just throw more and more enemies

346
00:18:49,071 --> 00:18:50,971
until it's reached the same level of difficulty.

347
00:18:52,252 --> 00:18:53,452
Which is something really interesting

348
00:18:53,512 --> 00:18:54,952
because it means that the player is still having

349
00:18:54,972 --> 00:18:57,533
a good time and fulfilling a completely different

350
00:18:57,573 --> 00:18:59,994
kind of power fantasy than they would have otherwise.

351
00:19:01,299 --> 00:19:03,620
Of course, there are some cons of procedural regeneration.

352
00:19:04,520 --> 00:19:06,762
Right now it is a very specific design space.

353
00:19:07,262 --> 00:19:09,783
Right now it's mainly used for balancing

354
00:19:09,883 --> 00:19:10,824
and horror purposes.

355
00:19:10,924 --> 00:19:12,545
I do want to see this changed over time.

356
00:19:13,045 --> 00:19:14,546
I'll talk about that more in a little bit.

357
00:19:15,391 --> 00:19:17,993
In addition, it is a relatively unexplored field.

358
00:19:19,074 --> 00:19:21,315
There are very few games that have done things like this.

359
00:19:21,495 --> 00:19:23,356
If you have any more examples after the talk,

360
00:19:23,416 --> 00:19:25,078
I would love to hear them, to be honest.

361
00:19:25,998 --> 00:19:28,140
In addition, disorienting spaces are super cool,

362
00:19:28,160 --> 00:19:29,621
but they're also super confusing,

363
00:19:29,721 --> 00:19:31,482
especially if you don't wanna give your player a map.

364
00:19:31,922 --> 00:19:35,845
That's something that I have experienced with playtests of Eternity, is that the player

365
00:19:35,885 --> 00:19:41,408
gets turned around so easily, it's very difficult for them to know where they are, where they're

366
00:19:41,428 --> 00:19:43,430
going, or even what the point of the game is.

367
00:19:44,530 --> 00:19:48,633
And in addition, procedural regeneration is difficult to program.

368
00:19:49,133 --> 00:19:51,054
I use the catchphrase, better out than in here.

369
00:19:51,515 --> 00:19:52,315
That's a reference to...

370
00:19:53,576 --> 00:19:56,740
the difference between outward versus inward procedural regeneration.

371
00:19:57,441 --> 00:19:59,824
Outward procedural regeneration is easier to program,

372
00:20:00,004 --> 00:20:02,367
it makes more sense from a level design perspective,

373
00:20:03,588 --> 00:20:06,392
it also makes more sense for a player perspective,

374
00:20:06,852 --> 00:20:09,335
and while inward procedural regeneration is super cool,

375
00:20:09,456 --> 00:20:11,178
it is also super unexplored.

376
00:20:13,742 --> 00:20:16,722
In addition, procedural regeneration can be risky

377
00:20:16,782 --> 00:20:17,723
in AAA development.

378
00:20:18,163 --> 00:20:20,903
That's something that's true of all procedural generation

379
00:20:21,064 --> 00:20:26,865
paradigms is that there is that same concept of you

380
00:20:26,905 --> 00:20:29,086
don't have anything until you have everything.

381
00:20:29,146 --> 00:20:31,466
You can't really start playtesting until you have the

382
00:20:31,506 --> 00:20:33,887
world, and you can't have the world until you've done hours

383
00:20:33,907 --> 00:20:34,727
and hours of coding.

384
00:20:35,367 --> 00:20:38,748
So that is a minor problem with procedural regeneration.

385
00:20:40,745 --> 00:20:47,029
In addition, Kate Compton has this concept of procedural oatmeal in procedural generation,

386
00:20:47,589 --> 00:20:52,212
which is that you can make a bowl full of oats and each oat has its own geometry and

387
00:20:52,312 --> 00:20:57,255
its own history and all of these cool things and you could spend years working on this

388
00:20:57,295 --> 00:20:57,835
bowl of oats.

389
00:20:58,296 --> 00:20:59,757
What are the players going to see is a bowl of oatmeal?

390
00:20:59,777 --> 00:21:01,418
They're going to eat in three seconds, then it's done.

391
00:21:01,918 --> 00:21:05,460
So you need to make sure that you have enough variation in your...

392
00:21:06,080 --> 00:21:10,203
procedural regeneration formula so that players will have,

393
00:21:10,243 --> 00:21:12,945
that players will actually be affected by the differences

394
00:21:12,985 --> 00:21:14,826
that you're making in the game's code.

395
00:21:15,706 --> 00:21:17,948
For example, if you have the player,

396
00:21:19,149 --> 00:21:20,990
if you have the AI choose for the player

397
00:21:21,010 --> 00:21:22,871
to either go down a hallway with four enemies

398
00:21:23,031 --> 00:21:24,332
or a hallway with four enemies,

399
00:21:25,012 --> 00:21:26,273
that's not going to affect the player.

400
00:21:26,473 --> 00:21:29,195
You need to actually make there be a palatable difference

401
00:21:29,255 --> 00:21:32,517
in order for that system to properly work.

402
00:21:33,749 --> 00:21:36,310
So, is procedural regeneration right for you?

403
00:21:36,330 --> 00:21:41,132
I will admit it is a relatively unexplored design space,

404
00:21:41,172 --> 00:21:43,433
as I have said, but it's worth checking out.

405
00:21:44,234 --> 00:21:47,035
This is another tool that you could put into your toolkit,

406
00:21:47,335 --> 00:21:49,976
and in a game maybe five or 10 years down the line,

407
00:21:50,016 --> 00:21:51,577
you might find a really cool use for this.

408
00:21:53,358 --> 00:21:55,098
No level design paradigm is a panacea,

409
00:21:55,138 --> 00:21:56,939
which is what makes level design so wonderful.

410
00:21:57,059 --> 00:21:58,920
If we all just did the same thing every time,

411
00:21:58,940 --> 00:21:59,720
it would just be boring.

412
00:22:02,315 --> 00:22:08,078
I do want to imagine a future with you for a second real fast, where every game ten years

413
00:22:08,118 --> 00:22:13,521
down the line uses these wildly different forms of procedural regeneration, where all

414
00:22:13,601 --> 00:22:20,124
levels are in some way interacting with their players, where every level is its own Galatea.

415
00:22:21,185 --> 00:22:23,267
We are not bound by the shackles of reality.

416
00:22:24,068 --> 00:22:27,391
And we, as level designers, can do some really

417
00:22:27,711 --> 00:22:29,973
fascinating things with this concept.

418
00:22:30,674 --> 00:22:33,056
And I am deeply excited to see where y'all take it.

419
00:22:33,637 --> 00:22:34,137
So thank you.

420
00:22:34,517 --> 00:22:35,599
My name is Heather Robertson.

421
00:22:36,039 --> 00:22:39,442
There's my website, and my email, and my Twitter.

422
00:22:41,044 --> 00:22:43,206
We have a couple minutes for questions

423
00:22:43,726 --> 00:22:45,168
if people want to step up to the mics.

424
00:22:51,922 --> 00:22:53,622
Oh yeah, the microphones are there and there.

425
00:22:54,042 --> 00:22:55,923
If anybody has any questions.

426
00:23:02,665 --> 00:23:02,906
Neat.

427
00:23:04,006 --> 00:23:08,067
Hey Heather, why's your talk so good?

428
00:23:08,227 --> 00:23:09,648
I don't know, just kinda did it.

429
00:23:11,889 --> 00:23:12,649
Looks like we got one.

430
00:23:12,669 --> 00:23:12,709
Hi.

431
00:23:18,111 --> 00:23:18,231
Hi.

432
00:23:20,352 --> 00:23:26,775
So how would you prevent players from, for example, in this case of procedural regeneration,

433
00:23:27,455 --> 00:23:32,378
how would you prevent players from, for example, abusing the system in terms of going on the

434
00:23:32,438 --> 00:23:37,521
hard path, maybe taking damage on purpose and then just going the easy way, and then

435
00:23:37,621 --> 00:23:39,322
taking damage again, going the easy way?

436
00:23:40,117 --> 00:23:42,218
That definitely is a thing to consider.

437
00:23:42,278 --> 00:23:43,940
I could see this really becoming a problem

438
00:23:43,980 --> 00:23:46,642
because you can no longer easily define how a speed run works

439
00:23:47,062 --> 00:23:50,104
because, I mean, like, you would have to figure out

440
00:23:50,204 --> 00:23:52,446
exactly what is the correct path to follow

441
00:23:52,506 --> 00:23:54,247
and how to take damage during certain parts,

442
00:23:54,768 --> 00:23:56,709
which then again is it's interesting design problem

443
00:23:56,749 --> 00:23:57,410
in and of itself.

444
00:23:57,530 --> 00:23:58,871
But anyways, to answer your question.

445
00:24:00,724 --> 00:24:03,726
I feel like players don't want to intentionally take damage.

446
00:24:04,207 --> 00:24:06,949
They will just keep doing their best

447
00:24:07,129 --> 00:24:08,810
until their best isn't good enough

448
00:24:08,890 --> 00:24:10,652
and they'll be put onto the easy path.

449
00:24:10,692 --> 00:24:12,213
And it doesn't just have to be hard and easy.

450
00:24:12,233 --> 00:24:13,974
There could be any number of paths going

451
00:24:14,434 --> 00:24:16,416
as a spectrum between doing really good

452
00:24:16,516 --> 00:24:17,497
and doing really bad.

453
00:24:18,057 --> 00:24:19,758
And if they decide to go down the path

454
00:24:19,919 --> 00:24:21,560
of having an easy time for a little bit,

455
00:24:21,780 --> 00:24:23,281
I feel like that's their decision to make.

456
00:24:23,301 --> 00:24:25,022
All right, thank you.

457
00:24:25,783 --> 00:24:26,063
Thank you.

458
00:24:28,285 --> 00:24:29,946
Looks like we have another couple of folks.

459
00:24:31,076 --> 00:24:38,068
Um, so I've never played Left 4 Dead, so this might be something that a bunch of people in the audience already know the answer to, but, um...

460
00:24:39,044 --> 00:24:40,945
you know, I think as any game developer knows,

461
00:24:41,245 --> 00:24:44,465
players are often very quick to encounter something

462
00:24:44,505 --> 00:24:46,626
they didn't expect and just decide it's a bug.

463
00:24:47,166 --> 00:24:50,047
And so I'm wondering with procedural regeneration,

464
00:24:50,167 --> 00:24:52,407
when you are, you know, on this play through,

465
00:24:52,727 --> 00:24:53,527
they're doing really well,

466
00:24:53,587 --> 00:24:54,708
so you send them down the hard path,

467
00:24:54,748 --> 00:24:56,368
and on this play through, they're not doing so well,

468
00:24:56,388 --> 00:24:57,608
so you send them down the easy path.

469
00:24:58,529 --> 00:25:01,849
Do you have any tips for how to sort of indicate

470
00:25:01,889 --> 00:25:03,270
to the player that there's a reason

471
00:25:03,330 --> 00:25:05,950
why this door worked last time and it doesn't this time?

472
00:25:06,644 --> 00:25:13,747
That is an interesting conundrum. I feel like a good way to potentially do that is to hide the existence of both doors until

473
00:25:13,987 --> 00:25:17,508
It's decided to go down one path or another you could do this fairly easily

474
00:25:18,689 --> 00:25:19,689
Let me go back to

475
00:25:20,649 --> 00:25:22,130
This example here on the left

476
00:25:23,982 --> 00:25:26,545
where instead of having the two doors in the same room,

477
00:25:26,585 --> 00:25:28,527
you could have them be down a hallway

478
00:25:28,688 --> 00:25:30,470
and be obscured by line of sight that way.

479
00:25:30,610 --> 00:25:31,951
And I feel like that would obscure

480
00:25:31,971 --> 00:25:32,912
the problem for the player.

481
00:25:33,733 --> 00:25:35,075
Another way of potentially doing it

482
00:25:35,115 --> 00:25:36,577
would just to be frank with the player

483
00:25:36,617 --> 00:25:38,239
and say this is a thing that we're doing,

484
00:25:38,359 --> 00:25:40,101
the game will auto balance itself to you.

485
00:25:40,141 --> 00:25:42,103
And I feel like some players would really be into that.

486
00:25:42,123 --> 00:25:43,384
Fair enough.

487
00:25:44,506 --> 00:25:44,706
Thank you.

488
00:25:47,330 --> 00:25:48,930
Hi, thanks for the talk, I really enjoyed it.

489
00:25:49,831 --> 00:25:52,872
Regarding playtesting, how difficult was it

490
00:25:53,172 --> 00:25:55,853
when you were doing a lot of this procedural regeneration

491
00:25:56,173 --> 00:25:59,414
and kind of locking a scenario through a playtest?

492
00:25:59,434 --> 00:26:00,855
Because it seems like every time you would start

493
00:26:00,875 --> 00:26:03,515
to playtest over, the data would be different.

494
00:26:03,696 --> 00:26:06,517
And so, explain maybe some of the challenges

495
00:26:06,557 --> 00:26:08,337
you went through with playtesting.

496
00:26:09,364 --> 00:26:10,426
Thank you for the question.

497
00:26:11,767 --> 00:26:16,674
I am still very early on in development for Eternity, so I can't super answer questions

498
00:26:16,694 --> 00:26:20,038
for playtesting that really well, but I can talk about secret spaces really fast, which

499
00:26:20,138 --> 00:26:22,762
uses that outward procedural regeneration element.

500
00:26:24,244 --> 00:26:27,184
And in that game, the playtesting was less about

501
00:26:28,545 --> 00:26:30,245
the large-scale game.

502
00:26:30,305 --> 00:26:32,506
It was always about the moment-to-moment.

503
00:26:32,926 --> 00:26:36,967
And that moment-to-moment is the same regardless

504
00:26:37,067 --> 00:26:38,847
of the overall structure of the level.

505
00:26:41,388 --> 00:26:43,328
You can see... Oh, just one minute left.

506
00:26:44,008 --> 00:26:46,469
Do you want to ask your question real fast?

507
00:26:46,709 --> 00:26:49,050
And that'll probably be the last one unless I'm really fast.

508
00:26:49,597 --> 00:26:51,038
I feel special now.

509
00:26:51,679 --> 00:26:55,161
So in the case of Eternity, you said that the player was going in search for the cure

510
00:26:55,181 --> 00:26:55,622
for death.

511
00:26:56,142 --> 00:26:56,362
Yes.

512
00:26:57,423 --> 00:27:02,367
Are we assuming that the cure for death is in one of these procedurally regenerated rooms

513
00:27:02,447 --> 00:27:02,647
then?

514
00:27:04,308 --> 00:27:07,871
Okay, so this is going to get a little bit spoilery, but I feel comfortable doing this

515
00:27:08,011 --> 00:27:08,711
in this room.

516
00:27:09,812 --> 00:27:16,037
In Eternity, the player is searching for a way to stop time, and the monster in the house

517
00:27:16,457 --> 00:27:17,297
controls time.

518
00:27:17,378 --> 00:27:18,498
So it's not a MacGuffin then?

519
00:27:19,222 --> 00:27:20,802
basically, so it's not just an object.

520
00:27:20,983 --> 00:27:22,643
It's not an object, it is a creature.

521
00:27:22,663 --> 00:27:25,285
I was gonna ask if they were capable of just finding it,

522
00:27:25,505 --> 00:27:26,726
walking through the front door and saying,

523
00:27:26,786 --> 00:27:28,527
oh, it's there on the nightstand, all right, cool.

524
00:27:28,667 --> 00:27:29,347
That would be cool.

525
00:27:30,648 --> 00:27:34,550
That's sort of like the concept in Fallout 2, I believe,

526
00:27:34,570 --> 00:27:36,511
where you can just kind of go to the final boss immediately

527
00:27:36,551 --> 00:27:37,371
if you just head west.

528
00:27:37,611 --> 00:27:37,771
Yeah.

529
00:27:39,973 --> 00:27:42,034
All right, do we have time for one more question?

530
00:27:42,234 --> 00:27:43,675
No, we do not, okay, cool.

531
00:27:44,075 --> 00:27:44,835
Thank you all for coming.

