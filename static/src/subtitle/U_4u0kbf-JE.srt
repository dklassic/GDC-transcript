1
00:00:05,843 --> 00:00:06,943
Welcome to the knee of the curve.

2
00:00:07,143 --> 00:00:08,064
I'm David Hunt Bosch.

3
00:00:08,144 --> 00:00:09,584
I'm the rigging tech art lead at Bungie.

4
00:00:09,604 --> 00:00:11,285
And I'm Forrest O'Donoghue.

5
00:00:11,385 --> 00:00:13,746
I'm also a rigging tech artist and leader of the

6
00:00:13,786 --> 00:00:15,566
MyTechTools development group at Bungie.

7
00:00:16,127 --> 00:00:17,987
We're here to talk about the rigging and tools work we did

8
00:00:18,047 --> 00:00:18,988
to help create Destiny.

9
00:00:21,908 --> 00:00:24,671
So Forrest and I are both riggers, and we're also scripters.

10
00:00:25,512 --> 00:00:26,994
Because in order to do rigging well,

11
00:00:27,014 --> 00:00:28,996
it really is necessary to also do scripting.

12
00:00:29,637 --> 00:00:30,758
Rigging is complicated stuff,

13
00:00:31,159 --> 00:00:33,121
and there's thousands of files that you need to maintain,

14
00:00:33,181 --> 00:00:34,763
animation files, 3D art files,

15
00:00:35,624 --> 00:00:37,766
and it wouldn't be possible to do by hand

16
00:00:37,786 --> 00:00:39,648
to be able to keep up with this amount of work.

17
00:00:40,558 --> 00:00:42,538
So we need to harness the power of computers

18
00:00:42,578 --> 00:00:45,899
and speak their own language and operate them with scripting.

19
00:00:46,319 --> 00:00:48,760
And we've taken this beyond mere automation

20
00:00:49,280 --> 00:00:52,000
and taken it to a level of fully-fledged tool development

21
00:00:53,021 --> 00:00:57,222
because it naturally arises out of this scripted rigging

22
00:00:57,382 --> 00:01:00,182
that you can make tools and help people like animators

23
00:01:00,242 --> 00:01:00,902
be more efficient.

24
00:01:01,503 --> 00:01:03,223
And we also write the tools that are

25
00:01:03,243 --> 00:01:05,463
the gateway for their exporting content into the game.

26
00:01:06,464 --> 00:01:07,864
And at one time, long ago.

27
00:01:08,584 --> 00:01:10,765
All this was doable, the leadership of this was doable

28
00:01:10,805 --> 00:01:12,205
by one person, me.

29
00:01:12,765 --> 00:01:13,786
But the time is long gone.

30
00:01:15,266 --> 00:01:17,447
We're a really big company and we have a lot to do.

31
00:01:18,607 --> 00:01:21,128
So it is awesome to have Forrest here leading up MayaTek.

32
00:01:21,968 --> 00:01:23,188
And Forrest, you're doing a much better job

33
00:01:23,208 --> 00:01:23,969
than I possibly could.

34
00:01:24,109 --> 00:01:24,689
Thank you very much.

35
00:01:26,129 --> 00:01:28,130
So, and at Bungie, all of this is within

36
00:01:28,150 --> 00:01:29,170
the umbrella of tech art.

37
00:01:31,411 --> 00:01:33,031
As tech artists, we're a support crew.

38
00:01:33,311 --> 00:01:33,852
We're here to help.

39
00:01:34,892 --> 00:01:36,732
We enable other departments to do their work.

40
00:01:37,553 --> 00:01:37,673
And...

41
00:01:38,110 --> 00:01:39,891
I love approaching rigging from this standpoint

42
00:01:39,971 --> 00:01:43,673
because rigging is intrinsically the place

43
00:01:43,713 --> 00:01:45,414
where 3D art and animation come together.

44
00:01:45,874 --> 00:01:46,655
It's this collaboration.

45
00:01:46,695 --> 00:01:48,876
I feel that from this standpoint of a support crew,

46
00:01:49,476 --> 00:01:51,298
we are really able to serve that collaboration well.

47
00:01:53,499 --> 00:01:54,900
So let's take a look at the table of contents.

48
00:01:55,580 --> 00:01:57,141
First, I want to talk a little bit about Destiny

49
00:01:57,321 --> 00:01:58,922
and why we chose this approach to rigging.

50
00:01:58,942 --> 00:02:01,524
And we're going to give a tour of our rigging system.

51
00:02:01,844 --> 00:02:03,245
And Forrest is going to go into detail

52
00:02:03,265 --> 00:02:05,546
about how we've set up our code base in Python.

53
00:02:07,300 --> 00:02:10,141
And then we'll talk about how we used it to create Destiny.

54
00:02:10,161 --> 00:02:12,162
Starting off in pre-production, building new characters,

55
00:02:12,842 --> 00:02:15,023
and then later in production when they're already animated

56
00:02:15,043 --> 00:02:19,265
and how we can stay agile and update those rigs as we go.

57
00:02:19,825 --> 00:02:23,027
And then Forrest is going to give us a tour of these tools

58
00:02:23,047 --> 00:02:24,847
that we've built for the animators mainly,

59
00:02:25,027 --> 00:02:27,489
and also tools for automatically building rigs.

60
00:02:31,970 --> 00:02:34,372
So before we start, we want to add a brief disclaimer.

61
00:02:34,742 --> 00:02:36,502
The rigging strategies we are presenting here

62
00:02:36,702 --> 00:02:38,122
are based on the needs of our project

63
00:02:38,323 --> 00:02:40,023
and the needs of the design, 3D art,

64
00:02:40,143 --> 00:02:41,463
and animation teams at Bungie.

65
00:02:42,284 --> 00:02:43,924
This, of course, is not the only way

66
00:02:44,004 --> 00:02:45,464
or the right way for everyone to do rigging,

67
00:02:45,664 --> 00:02:47,025
but it has worked well for us,

68
00:02:47,285 --> 00:02:48,625
so we want to share it with all of you.

69
00:02:49,666 --> 00:02:52,146
We chose to prioritize two main things in our rigging system.

70
00:02:52,446 --> 00:02:53,707
The first one being demand.

71
00:02:54,327 --> 00:02:56,467
Focusing on the need to create lots and lots of rigs

72
00:02:56,547 --> 00:02:58,688
is critical because our project is so large.

73
00:02:59,468 --> 00:03:00,608
The second one being agility.

74
00:03:01,109 --> 00:03:02,809
We are a highly play-test-driven studio.

75
00:03:03,368 --> 00:03:04,829
As we make things and playtest them,

76
00:03:04,949 --> 00:03:06,451
we discover how to make them better.

77
00:03:07,051 --> 00:03:09,513
As riggers, we need to help enable these changes

78
00:03:09,593 --> 00:03:10,834
at all stages of production,

79
00:03:11,195 --> 00:03:13,397
while continuing to maintain our high-quality bar.

80
00:03:15,539 --> 00:03:17,340
So let's talk a little bit about the large scope

81
00:03:17,380 --> 00:03:18,982
of rigging work we had to do for Destiny.

82
00:03:27,509 --> 00:03:29,691
And here they are, the combatant characters of Destiny.

83
00:03:30,068 --> 00:03:32,429
So here's some screenshots of the enemy races.

84
00:03:33,189 --> 00:03:36,570
And there are all the base units plus all of the variants.

85
00:03:37,290 --> 00:03:38,750
And you can see how many rigs we had to build.

86
00:03:38,790 --> 00:03:39,871
This is just the combatants.

87
00:03:39,891 --> 00:03:42,031
There's also all the players, the cinematic characters,

88
00:03:42,051 --> 00:03:43,511
the vehicles, weapons, props.

89
00:03:44,252 --> 00:03:45,132
And the list goes on and on.

90
00:03:45,452 --> 00:03:49,413
And so there's just a really high magnitude of rigs

91
00:03:49,433 --> 00:03:50,053
that we had to build.

92
00:03:50,073 --> 00:03:52,113
It was a lot of fun, but it was also a lot of work.

93
00:03:54,158 --> 00:03:55,819
So a lot of these variants that you're seeing here,

94
00:03:55,879 --> 00:03:57,159
these ultra characters are,

95
00:03:57,659 --> 00:03:59,200
they have special bones of their own.

96
00:03:59,340 --> 00:04:01,140
They need extra animation controls.

97
00:04:01,540 --> 00:04:04,181
So there's often customized rigging going on in there too.

98
00:04:07,821 --> 00:04:09,822
Another challenge we had was building a whole new engine.

99
00:04:09,942 --> 00:04:11,402
So our tools were constantly evolving

100
00:04:11,442 --> 00:04:12,302
and changing as we went.

101
00:04:12,942 --> 00:04:14,363
And as tools developers ourselves,

102
00:04:14,383 --> 00:04:15,743
we had to stay in touch with that change.

103
00:04:19,024 --> 00:04:20,844
So the key to being able to do all of this

104
00:04:21,024 --> 00:04:22,645
was being agile with our rigging.

105
00:04:23,546 --> 00:04:26,808
And I love this picture because it really speaks to me

106
00:04:26,848 --> 00:04:28,789
about what it felt like to be on the rigging team at Bungie.

107
00:04:31,350 --> 00:04:32,210
It can be scary at times.

108
00:04:32,230 --> 00:04:33,611
It feels like the boat's about to flip over

109
00:04:33,631 --> 00:04:34,652
and we're hanging off the edge.

110
00:04:35,772 --> 00:04:37,773
But this is the kind of challenge that we live for

111
00:04:38,213 --> 00:04:38,794
and we love it.

112
00:04:39,114 --> 00:04:43,916
And because we found that when you're making

113
00:04:43,936 --> 00:04:46,418
a big, giant, new IP, you can't just make things

114
00:04:46,478 --> 00:04:47,158
and lock them down.

115
00:04:47,698 --> 00:04:49,539
You have to constantly keep updating and changing them

116
00:04:49,639 --> 00:04:50,760
if you're gonna make the game work

117
00:04:50,800 --> 00:04:51,620
and be the best it can be.

118
00:04:52,212 --> 00:04:55,414
So as riggers, it's our job to support that change as best we can,

119
00:04:55,434 --> 00:04:56,935
and by staying agile.

120
00:05:05,722 --> 00:05:07,964
So at Bungie, we make games we love to play.

121
00:05:08,504 --> 00:05:10,466
These are some shots of the rigging tech art team

122
00:05:10,506 --> 00:05:12,347
keeping it agile on one of the old ships,

123
00:05:12,587 --> 00:05:15,270
just like the World Cup.

124
00:05:16,033 --> 00:05:18,535
We're passionate players of our own game, so just for fun,

125
00:05:18,595 --> 00:05:20,316
we decided to theme a lot of these slides

126
00:05:20,637 --> 00:05:22,278
in this presentation to look like Destiny.

127
00:05:23,038 --> 00:05:25,861
That being said, we just don't play games all day long.

128
00:05:25,901 --> 00:05:27,362
We still had a number of problems to solve.

129
00:05:27,722 --> 00:05:31,565
In order to help the other teams create great content,

130
00:05:32,026 --> 00:05:34,628
we need to help alleviate rigging production bottlenecks.

131
00:05:39,271 --> 00:05:41,613
So the solution we came up with to remain agile

132
00:05:41,733 --> 00:05:43,295
is what we're called tools-based rigging.

133
00:05:44,332 --> 00:05:46,774
We're not just talking about the scripts and tools to go with your rigs.

134
00:05:47,255 --> 00:05:50,897
We're talking about a way to completely merge the rigs and tools

135
00:05:50,958 --> 00:05:52,659
so that they're unified from their creation

136
00:05:53,039 --> 00:05:54,861
and onward through their lifetime and animation.

137
00:05:55,741 --> 00:05:58,944
The rig that animators interact with isn't just a static piece of content.

138
00:05:59,384 --> 00:06:02,807
It's actually a user interface to a deeper set of tools and functionality under the hood.

139
00:06:03,668 --> 00:06:05,389
To enable functionality even further,

140
00:06:05,589 --> 00:06:08,572
we have built a lot of GUI-based windows with buttons and sliders,

141
00:06:08,992 --> 00:06:10,313
just like all the windows you see here.

142
00:06:11,099 --> 00:06:13,500
This way of animating is awesome for supporting agility,

143
00:06:13,880 --> 00:06:16,101
which makes it the right choice for our productions at Bungie.

144
00:06:17,221 --> 00:06:20,443
A lot of this tools-based approach is driven by the freeform animation style

145
00:06:20,543 --> 00:06:23,704
pioneered by guys like Rick Lico, one of our animation leads.

146
00:06:24,244 --> 00:06:27,566
If you haven't seen it yet, it's worth checking out his GDC talk from last year,

147
00:06:27,946 --> 00:06:31,047
where he went into a lot of great detail on how freeform animation works.

148
00:06:35,128 --> 00:06:36,589
All right, now let's talk about rigging.

149
00:06:39,601 --> 00:06:41,623
And there I am, about to solo the vault of glass.

150
00:06:42,924 --> 00:06:44,405
Never mind, I'm gonna wait for my fire team,

151
00:06:44,445 --> 00:06:46,207
and rigging's a whole lot more fun on a team.

152
00:06:46,227 --> 00:06:49,009
All right, so here's some design pillars

153
00:06:49,049 --> 00:06:51,391
that we often come back to when we're talking about

154
00:06:51,591 --> 00:06:52,492
building our rigging system,

155
00:06:53,413 --> 00:06:54,353
and how we like to approach it.

156
00:06:55,114 --> 00:06:57,916
So, our rigs are assembled using modular components.

157
00:06:58,397 --> 00:07:01,439
This really helps us share our rigging that we build

158
00:07:01,620 --> 00:07:03,161
with as many things as we can.

159
00:07:04,210 --> 00:07:07,472
and these components are all built to support animation retargeting

160
00:07:08,172 --> 00:07:12,074
so that you can add and remove these on the fly in an animation scene

161
00:07:12,614 --> 00:07:13,635
and save the animator's work.

162
00:07:15,516 --> 00:07:17,877
The resulting rig is relatively straightforward

163
00:07:18,758 --> 00:07:20,879
and the key to it is that it can be modified.

164
00:07:21,099 --> 00:07:23,460
So it can be modified by the animators in several ways.

165
00:07:24,841 --> 00:07:27,223
We provide a whole set of tools which they can use

166
00:07:27,283 --> 00:07:29,484
and Forrest is going to give us an awesome tour of that later on.

167
00:07:30,224 --> 00:07:33,266
But we also encourage the animators to go ahead and hack the rigs.

168
00:07:34,124 --> 00:07:36,165
using locators and constraints and whatever they want to do.

169
00:07:36,886 --> 00:07:39,988
Because this is a natural part of the whole ecosystem

170
00:07:40,808 --> 00:07:42,149
where they will innovate new things

171
00:07:42,890 --> 00:07:44,631
and they'll come up with really clever things

172
00:07:44,671 --> 00:07:47,233
that we'll then sometimes build into Python tools

173
00:07:47,533 --> 00:07:48,674
and offer to the rest of the people.

174
00:07:49,755 --> 00:07:51,836
We definitely aren't the kind of working group

175
00:07:51,856 --> 00:07:53,037
that is telling them what to do.

176
00:07:53,257 --> 00:07:55,038
You know, we have a nice kind of balance back and forth.

177
00:07:55,799 --> 00:07:57,880
And it's really important to let them keep innovating

178
00:07:58,020 --> 00:07:59,561
and it's a big part of our process.

179
00:08:07,300 --> 00:08:10,764
So talking about rigging, I like to think of it in kind of two main categories,

180
00:08:10,804 --> 00:08:12,185
and one of them is the deformation rig.

181
00:08:12,646 --> 00:08:14,508
And a deformation rig can be thought of as

182
00:08:15,429 --> 00:08:18,932
techniques for changing the shape of the model for animation.

183
00:08:19,573 --> 00:08:22,676
So the most fundamental part of this is the skeleton,

184
00:08:23,117 --> 00:08:25,820
and the way it moves the model is with smooth bind, as skinning.

185
00:08:26,000 --> 00:08:30,084
So our engine offers both classic linear skinning and dual quaternion.

186
00:08:31,648 --> 00:08:33,388
We have a couple of special bones on the skeleton

187
00:08:33,408 --> 00:08:35,709
that are driven by the engine to automatically rotate

188
00:08:35,749 --> 00:08:37,349
the shoulders and the wrists to look good.

189
00:08:39,049 --> 00:08:40,369
And there's a bunch of other stuff we can do

190
00:08:40,509 --> 00:08:42,950
with vertex shaders like blend shapes

191
00:08:43,230 --> 00:08:44,830
and some procedural stuff

192
00:08:44,890 --> 00:08:46,991
and channel-driven animation by the animators.

193
00:08:47,671 --> 00:08:49,611
Plus a lot of cool stuff like physics simulation.

194
00:08:50,011 --> 00:08:51,371
And if you missed it yesterday,

195
00:08:51,391 --> 00:08:54,872
there was a great talk by our Bungie character tech art team.

196
00:08:55,592 --> 00:08:56,552
But don't worry if you missed it.

197
00:08:56,612 --> 00:08:58,933
It's going to be hosted on the Autodesk area website.

198
00:08:59,630 --> 00:09:02,110
So, big thanks to Tom Snocky and Natalie Burke.

199
00:09:06,071 --> 00:09:06,392
Okay.

200
00:09:11,473 --> 00:09:12,873
Now let's talk about the control rig.

201
00:09:13,353 --> 00:09:15,434
So the control rig is what the animators interact with.

202
00:09:16,714 --> 00:09:17,635
Here's a picture of it right here.

203
00:09:18,855 --> 00:09:20,335
When setting out to build a control rig,

204
00:09:20,375 --> 00:09:22,316
it can be daunting to try to think of building

205
00:09:22,336 --> 00:09:23,196
the whole thing at once,

206
00:09:23,816 --> 00:09:25,257
because there's a lot of moving parts.

207
00:09:25,897 --> 00:09:28,558
And it's also not that obvious how that would be shared

208
00:09:28,638 --> 00:09:28,958
between.

209
00:09:29,549 --> 00:09:31,390
different kinds of characters if you were to build one.

210
00:09:32,230 --> 00:09:34,170
So, I got this great inspiration

211
00:09:34,310 --> 00:09:37,691
from an Autodesk master class back in 2006

212
00:09:38,311 --> 00:09:41,012
by Jason Schleifer called Animator-Friendly Rigging.

213
00:09:41,192 --> 00:09:43,433
And it really inspired me to think of the rig in regions,

214
00:09:44,293 --> 00:09:45,913
where you can kind of take parts of the body,

215
00:09:46,413 --> 00:09:48,234
like the head, neck, and arms, and legs,

216
00:09:48,854 --> 00:09:51,135
and individually approach them and think about,

217
00:09:51,175 --> 00:09:52,815
well, what's the best way to rig this,

218
00:09:52,855 --> 00:09:54,576
and how would an animator want to interact with it?

219
00:09:54,916 --> 00:09:55,896
How would it behave in game?

220
00:09:56,396 --> 00:09:58,077
And you can develop specialized rigging.

221
00:09:58,732 --> 00:09:59,873
for that part of the body.

222
00:10:00,533 --> 00:10:01,674
And it really made a ton of sense.

223
00:10:01,794 --> 00:10:03,755
And it's also, like, well, obvious how

224
00:10:04,156 --> 00:10:05,276
the left side of the body would share

225
00:10:05,336 --> 00:10:06,177
with the right side of the body,

226
00:10:06,237 --> 00:10:07,398
because you've rigged the arm once,

227
00:10:08,398 --> 00:10:10,740
and you can run the scripts again and rig the other side.

228
00:10:11,941 --> 00:10:14,642
So I took this idea back and started working on it,

229
00:10:14,662 --> 00:10:19,345
and I discovered that it's not quite as modular

230
00:10:19,385 --> 00:10:21,126
as I would like, because if you're rigging an arm,

231
00:10:21,146 --> 00:10:22,867
the way the arm joins to the clavicle

232
00:10:22,927 --> 00:10:25,109
and that joins to the spine is very, very specific

233
00:10:25,129 --> 00:10:25,969
to that part of the body.

234
00:10:26,703 --> 00:10:29,384
So we have all kinds of different props and rigs in our game.

235
00:10:29,724 --> 00:10:33,525
Some, you know, mechanical objects, some, you know, skybox objects.

236
00:10:33,885 --> 00:10:36,026
And I would love to just share that cool thing I made.

237
00:10:36,666 --> 00:10:38,447
So I did notice that they have this in common.

238
00:10:38,627 --> 00:10:40,927
These regions have associated bone chains.

239
00:10:42,148 --> 00:10:43,388
So here they are being highlighted.

240
00:10:43,868 --> 00:10:45,688
And if we look at them in terms of these bone chains,

241
00:10:45,788 --> 00:10:48,989
it's a lot easier to think of, like, very truly modular components.

242
00:10:49,890 --> 00:10:51,750
Very, very generic that could be shared

243
00:10:51,890 --> 00:10:53,891
across a whole library of different kinds of rigs,

244
00:10:53,911 --> 00:10:55,071
whether they're a character or not.

245
00:11:00,016 --> 00:11:02,958
So now it becomes important to figure out how to track these bone chains.

246
00:11:03,799 --> 00:11:06,161
And the first idea is naming conventions.

247
00:11:06,221 --> 00:11:10,505
So I think many of us riggers have found value in creating a consistent naming convention.

248
00:11:10,525 --> 00:11:12,947
That's great. I think it's good practice.

249
00:11:13,087 --> 00:11:18,972
But it becomes limiting because you see here we have the arm1, arm2, arm3.

250
00:11:19,232 --> 00:11:23,556
It's real easy to think about writing a Python script to identify the start and the end of that.

251
00:11:24,577 --> 00:11:24,717
But...

252
00:11:25,578 --> 00:11:26,980
What if you wanted to call them something different?

253
00:11:27,040 --> 00:11:30,562
Because parts of the body are like the shoulder and the wrist and the elbow.

254
00:11:31,303 --> 00:11:32,984
And that's how people tend to think about it.

255
00:11:33,945 --> 00:11:36,066
So, I don't like to be locked into this way of doing it.

256
00:11:36,126 --> 00:11:38,108
If I want that data to track the bone chain,

257
00:11:38,128 --> 00:11:39,329
I wonder if there's another way.

258
00:11:39,349 --> 00:11:42,791
I'm not saying don't do naming convention.

259
00:11:42,832 --> 00:11:44,233
I'm saying don't rely on it too much.

260
00:11:44,253 --> 00:11:47,735
So, there's another way.

261
00:11:47,775 --> 00:11:49,597
Maya provides this thing called joint labeling.

262
00:11:49,777 --> 00:11:51,578
And it's attributes on the joints.

263
00:11:52,129 --> 00:11:55,912
It has side and region, and it does just what I said. It says right shoulder and right hand.

264
00:11:57,473 --> 00:12:04,879
So that's great, but it doesn't necessarily track the bone chains in an easily understandable way via script.

265
00:12:05,900 --> 00:12:09,823
So, that's not quite going to work for our chain metadata.

266
00:12:11,264 --> 00:12:13,466
We came to this system called ChainMarkup.

267
00:12:14,006 --> 00:12:18,250
It uses a combination of both, and it lets us call the names of the bones whatever we want.

268
00:12:19,135 --> 00:12:21,397
And what this is, is just some attributes on the bones,

269
00:12:22,097 --> 00:12:22,718
where we say,

270
00:12:22,738 --> 00:12:27,241
the chain root is called arm, and the chain end is called arm.

271
00:12:27,521 --> 00:12:28,742
We also identify a terminator,

272
00:12:28,982 --> 00:12:31,524
which can help us understand the orientation of the final joint.

273
00:12:32,644 --> 00:12:35,406
And then the side, we actually use joint labeling in Maya system,

274
00:12:35,426 --> 00:12:36,247
because it's already there,

275
00:12:36,567 --> 00:12:38,208
and we like to use that for other purposes,

276
00:12:38,308 --> 00:12:39,909
like interfacing with MotionBuilder.

277
00:12:41,990 --> 00:12:44,012
So that's great. Now we can track these bone chains,

278
00:12:44,412 --> 00:12:46,493
and our rigging system can easily identify

279
00:12:46,947 --> 00:12:49,129
how to apply these generic rig components

280
00:12:49,149 --> 00:12:49,830
that we're gonna be building.

281
00:12:52,052 --> 00:12:53,173
You can name it whatever you want now.

282
00:12:53,393 --> 00:12:54,534
And so here are some examples

283
00:12:55,195 --> 00:12:56,896
that are much more kind of human-friendly.

284
00:12:57,417 --> 00:12:58,518
I'm not necessarily recommending this,

285
00:12:58,598 --> 00:13:00,579
but you can do whatever you want with that name now.

286
00:13:04,243 --> 00:13:06,585
Okay, this character's ready to upgrade to level 30

287
00:13:07,125 --> 00:13:08,867
and get some control rig components on it.

288
00:13:08,887 --> 00:13:13,451
Okay, so on the arm, there are...

289
00:13:13,833 --> 00:13:16,795
several components. There are several bone chains, but on the main bone chain,

290
00:13:17,255 --> 00:13:19,515
we apply this component called the FKIK component.

291
00:13:20,176 --> 00:13:23,377
And it's pretty straightforward stuff. I think most rigging systems have one of these.

292
00:13:24,657 --> 00:13:27,798
This is where the animators are able to

293
00:13:28,038 --> 00:13:31,019
do an animated switch between the forward K and the inverse kinematics

294
00:13:31,540 --> 00:13:34,140
systems. And they're both really useful for different things.

295
00:13:34,801 --> 00:13:37,122
FK is for free-swinging animations, you get nice arcs.

296
00:13:37,733 --> 00:13:39,754
And IK is great for contacting objects.

297
00:13:40,195 --> 00:13:42,036
And they do need the ability to create an animated switch

298
00:13:42,076 --> 00:13:43,997
between them, so the rig component comes with both of

299
00:13:44,037 --> 00:13:44,558
them built in.

300
00:13:48,480 --> 00:13:50,262
On the legs, it's a very similar structure.

301
00:13:50,802 --> 00:13:53,084
And it's great that our rigging system lets us share

302
00:13:53,144 --> 00:13:55,926
this great work that was done on the arm down to the leg.

303
00:13:56,246 --> 00:13:58,507
And we've added just a few things here for the need to

304
00:13:58,547 --> 00:14:01,449
contact the ground and have some remote pivots for

305
00:14:01,509 --> 00:14:03,591
walking and for controlling the toe.

306
00:14:03,911 --> 00:14:06,093
But ultimately, it's very similar to the one we saw up

307
00:14:06,113 --> 00:14:06,233
there.

308
00:14:07,292 --> 00:14:09,072
The animator has the choice to animate like this.

309
00:14:09,092 --> 00:14:10,813
And I actually have seen animators do this.

310
00:14:10,853 --> 00:14:13,034
We're in a walk cycle, do animated switch

311
00:14:13,054 --> 00:14:13,834
between each step.

312
00:14:13,874 --> 00:14:16,936
I think it was Matt Kelly, he and I formed the Corpus

313
00:14:16,956 --> 00:14:20,197
Colossum, the bridge between creativity and analysis,

314
00:14:20,897 --> 00:14:21,998
between rigging and animation.

315
00:14:22,238 --> 00:14:25,019
And all the technical animators were part of this

316
00:14:25,719 --> 00:14:27,640
bundle of nerve fibers, I like to think about.

317
00:14:29,081 --> 00:14:31,422
Really, really, really clever folks, and we have a great

318
00:14:31,462 --> 00:14:32,002
collaboration.

319
00:14:36,597 --> 00:14:39,537
On the chest, there are two bone chains.

320
00:14:39,557 --> 00:14:41,618
We're going to look at the RFK component right here.

321
00:14:42,038 --> 00:14:45,378
This is a great example of one that was actually developed and devised by

322
00:14:45,958 --> 00:14:47,999
Rick Lico, one of our lead technical animators.

323
00:14:48,679 --> 00:14:52,600
So, he demonstrated how useful this could be with his own MEL script.

324
00:14:53,360 --> 00:14:55,040
And we took it into our Python system

325
00:14:55,540 --> 00:14:58,341
and built what is now the standard way of controlling the chest.

326
00:14:59,121 --> 00:15:01,962
And it has a top control and a bottom control that are the main ones.

327
00:15:02,372 --> 00:15:03,972
And the middle controls automatically

328
00:15:04,112 --> 00:15:06,032
rotate to create a blended result.

329
00:15:06,473 --> 00:15:08,673
So animators can get a really nice pose very quickly

330
00:15:08,693 --> 00:15:08,973
and easily.

331
00:15:08,993 --> 00:15:11,614
And if they want to, they can go into detail on the middle one,

332
00:15:11,774 --> 00:15:12,854
but they don't necessarily have to.

333
00:15:15,335 --> 00:15:17,275
And our animation engineers then were

334
00:15:17,295 --> 00:15:18,876
able to implement this at runtime.

335
00:15:19,116 --> 00:15:20,816
So here, we're showing on the sparrow,

336
00:15:20,876 --> 00:15:24,177
the guardian is showing his chest joints.

337
00:15:24,217 --> 00:15:25,897
And the middle joint is automatically

338
00:15:25,937 --> 00:15:29,258
derived as part of our runtime rig, thanks to Eric Brown.

339
00:15:30,078 --> 00:15:30,178
And.

340
00:15:32,382 --> 00:15:34,863
So this is a really helpful thing for animation retargeting

341
00:15:35,423 --> 00:15:37,525
so that characters with different length spines

342
00:15:37,625 --> 00:15:38,765
can share their animation.

343
00:15:39,566 --> 00:15:41,707
And if animators had created detail animation

344
00:15:41,747 --> 00:15:43,708
on the middle joint, then it will come through

345
00:15:44,249 --> 00:15:46,670
if they specify, but otherwise,

346
00:15:46,910 --> 00:15:48,571
it can have a lower memory usage

347
00:15:49,051 --> 00:15:50,773
and it can share between different skeletons.

348
00:15:50,793 --> 00:15:51,853
This is really, really useful.

349
00:15:51,873 --> 00:15:58,997
Okay, the shoulders and wrists are controlled by

350
00:15:59,137 --> 00:16:01,339
this one called the multi-axis twist fixup.

351
00:16:02,387 --> 00:16:04,468
And this is another one that's part of our runtime rig.

352
00:16:05,588 --> 00:16:07,689
What it does, we have a version in Maya

353
00:16:07,789 --> 00:16:09,690
and a version in our runtime engine.

354
00:16:10,470 --> 00:16:13,551
And this will blend the result of the parent

355
00:16:13,631 --> 00:16:16,092
and the grandparent to automatically twist the shoulder.

356
00:16:16,672 --> 00:16:18,633
And it's great for keeping large shoulder pads

357
00:16:18,693 --> 00:16:20,794
from interpenetrating the body too much.

358
00:16:20,814 --> 00:16:24,135
And it's also great for saving

359
00:16:24,255 --> 00:16:25,755
keyframe animation data in game.

360
00:16:25,875 --> 00:16:27,056
We have lower memory costs

361
00:16:27,136 --> 00:16:28,997
because we don't have to store those keyframes.

362
00:16:33,038 --> 00:16:36,040
We also have a prop component, and it's very simple on the rig.

363
00:16:36,080 --> 00:16:37,501
It's a single FK control,

364
00:16:37,981 --> 00:16:40,843
but this is an interface to a much larger set of tools

365
00:16:41,223 --> 00:16:42,444
created by our rigger, Javier.

366
00:16:44,305 --> 00:16:47,547
So this gives them access to a whole library of rigs

367
00:16:47,828 --> 00:16:49,629
that can import a whole rig of its own

368
00:16:50,009 --> 00:16:51,470
that exports its own animation data.

369
00:16:52,791 --> 00:16:55,172
And we have utilities for aligning the hands

370
00:16:55,613 --> 00:16:59,035
and switching what is controlling which one is driving,

371
00:16:59,595 --> 00:17:00,836
whether the hands are following the gun

372
00:17:01,296 --> 00:17:02,297
or the guns are following the hand.

373
00:17:05,379 --> 00:17:09,800
It really speeds up animators workflow to not have to go and file browse through a directory and import

374
00:17:10,220 --> 00:17:13,701
maybe the wrong file and then guess about the alignment of the hands. They just hit a button and

375
00:17:14,341 --> 00:17:18,842
it saves a lot of time, not only in their working day, but less bugs to fix at the end.

376
00:17:18,862 --> 00:17:21,203
You know, that might have been our problem to fix later.

377
00:17:22,223 --> 00:17:23,843
It's really good to solve it nicely.

378
00:17:28,064 --> 00:17:31,805
This yellow control in the middle is what we call the cog. It is the center of gravity control.

379
00:17:32,724 --> 00:17:34,185
and it is an offshoot of the pelvis.

380
00:17:34,565 --> 00:17:35,706
It has single FK control.

381
00:17:36,707 --> 00:17:38,088
And seen here in this animation,

382
00:17:38,108 --> 00:17:40,550
it gives the animators the freedom to do things like

383
00:17:40,670 --> 00:17:43,292
splitting the rotation and translation differently

384
00:17:43,312 --> 00:17:45,694
between the hips and the cog.

385
00:17:46,054 --> 00:17:47,496
So right here, it's only translating,

386
00:17:47,756 --> 00:17:48,997
even though the character is rotating.

387
00:17:49,918 --> 00:17:51,699
And you also notice that it is kind of drifting

388
00:17:51,839 --> 00:17:52,500
away from the body.

389
00:17:52,520 --> 00:17:55,843
That's because the animator has chosen to

390
00:17:56,663 --> 00:17:58,685
represent what is more the true center of mass

391
00:17:58,745 --> 00:18:00,566
of the character, which drifts as the character

392
00:18:00,586 --> 00:18:01,387
changes its pose.

393
00:18:01,992 --> 00:18:05,233
And we have a tool called Center Mass Tool which enables them to

394
00:18:06,033 --> 00:18:07,694
approximate that position automatically.

395
00:18:15,376 --> 00:18:17,496
And here's the pedestal component at the base.

396
00:18:18,197 --> 00:18:21,397
And this controls the topmost bone in the game skeleton.

397
00:18:22,538 --> 00:18:25,278
In the control rig, though, it is actually the opposite.

398
00:18:25,478 --> 00:18:28,619
It is not the topmost control of the rig hierarchy.

399
00:18:29,099 --> 00:18:29,900
It's actually a sibling.

400
00:18:30,379 --> 00:18:33,781
And that's very important for being able to move at a very precise speed

401
00:18:33,921 --> 00:18:36,462
while you can have variation movement of the hips independently.

402
00:18:38,042 --> 00:18:41,444
And you can also have the feet plant on the ground

403
00:18:41,624 --> 00:18:44,285
because if the base of your character was moving you'd have to counter-animate.

404
00:18:45,386 --> 00:18:46,506
It also has an aim vector.

405
00:18:47,246 --> 00:18:49,327
As seen in this animation, it's what we call an aim screen.

406
00:18:50,228 --> 00:18:54,970
These are actually a series of still poses that define where the gun's pointing.

407
00:18:55,270 --> 00:18:57,111
And the whole body can be used in these poses.

408
00:18:57,991 --> 00:18:58,671
And aim vector...

409
00:18:59,272 --> 00:19:02,134
unambiguously tells the engine where the character is aiming.

410
00:19:02,635 --> 00:19:04,536
So we can get a very precise aim with that.

411
00:19:04,836 --> 00:19:06,137
We can also create them for the head,

412
00:19:06,277 --> 00:19:07,838
for the eyes, separately and independently,

413
00:19:08,199 --> 00:19:10,120
and blend those to our liking.

414
00:19:15,524 --> 00:19:18,126
Okay, that's it for our tour of the control rig

415
00:19:18,726 --> 00:19:19,807
and our rig components.

416
00:19:20,167 --> 00:19:22,489
I'd like to take a quick close-up on the chest region.

417
00:19:24,250 --> 00:19:25,691
There's two components on the chest.

418
00:19:26,148 --> 00:19:27,789
The first one is on the pelvis.

419
00:19:28,689 --> 00:19:30,410
We apply a reverse component.

420
00:19:30,531 --> 00:19:32,392
So this is a forward K component

421
00:19:32,452 --> 00:19:35,314
where the pivot is offset to the child.

422
00:19:35,954 --> 00:19:38,195
So you get kind of a offset where

423
00:19:38,836 --> 00:19:41,037
very nice and tight control over the upper body.

424
00:19:41,377 --> 00:19:43,038
And animators need this level of precision

425
00:19:43,058 --> 00:19:44,159
when they're creating game content.

426
00:19:47,221 --> 00:19:49,662
And the upper chest region is controlled by

427
00:19:49,682 --> 00:19:52,044
the RFK, which I described before.

428
00:19:53,102 --> 00:19:56,004
And as I mentioned, we have a version of this at runtime.

429
00:19:57,345 --> 00:19:58,865
And this component is pretty cool,

430
00:19:58,925 --> 00:20:01,487
because you can apply it to an arbitrary length bone chain.

431
00:20:01,927 --> 00:20:03,548
And it's pretty neat to see it blending

432
00:20:03,588 --> 00:20:05,989
a whole lot of bones in the spine together simultaneously.

433
00:20:06,009 --> 00:20:09,191
Now, if anyone would like to hear more about how this is

434
00:20:09,211 --> 00:20:10,572
built, we can talk afterwards.

435
00:20:11,292 --> 00:20:12,553
We didn't have time to include it here,

436
00:20:13,113 --> 00:20:14,454
but it's a pretty simple trick.

437
00:20:15,695 --> 00:20:17,856
We were able to find the way to get without any flipping,

438
00:20:18,496 --> 00:20:19,417
up to 180 degrees.

439
00:20:19,437 --> 00:20:21,238
It's probably good enough for our characters.

440
00:20:26,267 --> 00:20:28,950
Now I'd like to do a hands-on demo of building one of these rig components.

441
00:20:28,970 --> 00:20:32,513
It's kind of to demonstrate that you can put whatever kind of rigging you want into one

442
00:20:32,533 --> 00:20:33,374
of these components.

443
00:20:33,894 --> 00:20:38,038
And Forrest will go and talk about how they can be made standardized to fit within our

444
00:20:38,058 --> 00:20:40,100
tool system with the Python.

445
00:20:41,381 --> 00:20:43,603
So this is the FKIK component of the ARM.

446
00:20:46,505 --> 00:20:51,048
So, to build this, we're going to first start off by duplicating the arm joint chain.

447
00:20:51,388 --> 00:20:55,030
We're going to create two copies, one of them for the FK and the other for the IK.

448
00:20:57,371 --> 00:21:02,053
Now we're going to rig the FK chain, and here I am applying some control flags, as we call them.

449
00:21:02,233 --> 00:21:05,735
These are what the animators interact with, the blue polygon cubes.

450
00:21:06,735 --> 00:21:10,057
You can use whatever shape you want, and some people prefer NURBS curves,

451
00:21:10,277 --> 00:21:12,898
and that's totally fine, it's just a shape node, it's really easy to swap.

452
00:21:14,599 --> 00:21:15,280
Our animators have...

453
00:21:15,653 --> 00:21:18,014
chosen to prefer these polygons, that's what we do.

454
00:21:20,275 --> 00:21:21,635
Now we'll rig the IK chain.

455
00:21:21,855 --> 00:21:25,957
So I'm going to add an IK handle for the shoulder and the wrist.

456
00:21:28,678 --> 00:21:30,659
And that lets us translate the end effector,

457
00:21:31,059 --> 00:21:32,659
and it's great for contacting objects.

458
00:21:34,660 --> 00:21:37,341
And I'm going to apply control flag shapes to that as well.

459
00:21:42,383 --> 00:21:43,003
Now we need a way.

460
00:21:43,520 --> 00:21:46,261
to switch between these two sets of controls.

461
00:21:46,661 --> 00:21:48,161
So I'm creating another control flag,

462
00:21:48,762 --> 00:21:49,842
just another polygon shape,

463
00:21:50,202 --> 00:21:52,223
and onto that I'm going to add a custom attribute

464
00:21:52,243 --> 00:21:53,443
called fkikSwitch.

465
00:21:54,044 --> 00:21:55,464
And that attribute is going to drive

466
00:21:57,525 --> 00:21:59,446
the visibility of these two controls,

467
00:21:59,466 --> 00:22:01,166
so we're only looking at the ones that we're using.

468
00:22:01,566 --> 00:22:03,827
And it's also going to blend the constraint weights

469
00:22:04,287 --> 00:22:07,208
so that the resulting joint chain follows one or the other.

470
00:22:10,584 --> 00:22:13,426
Okay, that's pretty much finished. Now I can create a test animation.

471
00:22:14,467 --> 00:22:18,809
And, um, so you notice during this demo, I built this all manually, by hand.

472
00:22:19,390 --> 00:22:22,832
And that's a great thing to do when you're first figuring out what you want in a rig component.

473
00:22:23,432 --> 00:22:29,176
But as soon as you decide what you want, it's really important to take the next step of writing a script to generate it automatically.

474
00:22:29,876 --> 00:22:35,159
Because, um, enough times of, uh, redoing this the tenth time in a row and staying up all night,

475
00:22:35,480 --> 00:22:36,940
and you realize there's gotta be a better way.

476
00:22:37,921 --> 00:22:39,522
And, and scripting is, is definitely that.

477
00:22:43,768 --> 00:22:46,489
All right, great. Now I'm going to talk about scene organization.

478
00:22:46,509 --> 00:22:49,130
Hi there. That's the rig component I just built.

479
00:22:50,150 --> 00:22:51,270
And take a look at the outliner.

480
00:22:52,050 --> 00:22:52,811
It's a giant mess.

481
00:22:53,791 --> 00:22:56,072
I wouldn't want to ship this out to the animators in this condition

482
00:22:56,412 --> 00:22:58,693
because it's really not easy to know what to interact with

483
00:22:58,833 --> 00:23:00,213
and things might get deleted or...

484
00:23:00,853 --> 00:23:02,194
And look in the dependency graph.

485
00:23:02,374 --> 00:23:04,074
It's also a tangled web of confusion.

486
00:23:04,474 --> 00:23:06,735
And yes, it makes sense for how Maya actually functions,

487
00:23:06,815 --> 00:23:09,156
but it doesn't make that much sense for someone like me later

488
00:23:09,236 --> 00:23:11,016
coming back to find the parts that I want.

489
00:23:11,925 --> 00:23:14,266
So what we do is we create these things called metanodes.

490
00:23:14,727 --> 00:23:19,270
And all it is, is a network node with custom attributes and connections to parts of the rig.

491
00:23:20,031 --> 00:23:21,332
And it helps us organize the scene.

492
00:23:22,733 --> 00:23:24,534
So here I am organizing the outliner.

493
00:23:24,934 --> 00:23:28,577
I'm going to parent the internal workings into a do not touch group.

494
00:23:29,077 --> 00:23:33,741
And I'm going to parent the animator controls into a nice public group that they know to interact with.

495
00:23:36,623 --> 00:23:37,644
Now it's all nice and clean.

496
00:23:37,664 --> 00:23:39,605
You can collapse down to one node.

497
00:23:43,454 --> 00:23:46,475
And on the metanode itself, in the dependency graph out here,

498
00:23:46,855 --> 00:23:48,816
I can now create custom connections

499
00:23:48,917 --> 00:23:50,557
to the inner workings of the rig.

500
00:23:51,078 --> 00:23:53,239
And that enables our scripts to be able to find

501
00:23:53,279 --> 00:23:54,259
specific parts of it.

502
00:23:55,400 --> 00:23:58,122
So, and that is the interface between the MyAscene

503
00:23:58,242 --> 00:24:00,663
and our Python code, which Forrest is going to elaborate on.

504
00:24:00,683 --> 00:24:06,466
I originally presented this idea back in GDC of 2009.

505
00:24:09,333 --> 00:24:12,636
It's been really exciting to see how people have innovated on this. I know that

506
00:24:13,857 --> 00:24:18,280
David who is at harmonics at the time and Jason Parks who is at Sony at the time and Christopher

507
00:24:19,121 --> 00:24:21,723
Built their own versions of this and kind of did amazing things with it

508
00:24:21,763 --> 00:24:25,806
so guys if you're out there if you're watching come and talk to me, I want to hear what you've been doing next and

509
00:24:26,447 --> 00:24:29,989
There was a student at University of Washington. I know by the name of Jason Garris Jones who?

510
00:24:30,910 --> 00:24:34,273
saw the talk and decided to implement the whole thing in Python and

511
00:24:34,573 --> 00:24:35,974
He did such a good job. We ended up hiring him

512
00:24:36,556 --> 00:24:39,117
And now he was one of the key architects on our new system,

513
00:24:39,397 --> 00:24:42,519
which makes use of object-oriented Python

514
00:24:43,419 --> 00:24:45,480
in PyMEL in a really awesome way.

515
00:24:46,080 --> 00:24:48,781
So we had originally even considered calling this talk

516
00:24:49,362 --> 00:24:52,483
object-oriented rigging because object-oriented is so useful

517
00:24:52,543 --> 00:24:53,564
and so powerful.

518
00:24:54,044 --> 00:24:56,245
If there's ever any debate about MEL versus Python,

519
00:24:56,905 --> 00:24:57,505
there is no debate.

520
00:24:58,586 --> 00:25:00,887
Object-oriented makes it so much more effective.

521
00:25:01,587 --> 00:25:04,849
So, and Forrest will demonstrate to you exactly why

522
00:25:04,869 --> 00:25:05,729
in just a minute.

523
00:25:09,912 --> 00:25:12,694
Okay, so I mentioned that we can add and remove these rig components.

524
00:25:13,114 --> 00:25:15,576
I'm going to talk about an example of where you might want to do that.

525
00:25:16,136 --> 00:25:17,477
Here's a first-person animation.

526
00:25:18,778 --> 00:25:20,719
We're close up on the gun and we're looking at the fingers.

527
00:25:21,239 --> 00:25:22,660
And the fingers are contacting the gun.

528
00:25:23,321 --> 00:25:25,883
So here they are in IK. I can translate the end

529
00:25:26,963 --> 00:25:28,845
and have the middle solve and get a nice result.

530
00:25:29,945 --> 00:25:32,047
And the pole vector helps me choose the orientation.

531
00:25:33,047 --> 00:25:35,429
It's really how you want to be animating if you're contacting an object.

532
00:25:35,489 --> 00:25:37,731
Otherwise, if you're in FK, here we switch back to FK,

533
00:25:38,411 --> 00:25:38,932
you're rotating.

534
00:25:39,256 --> 00:25:42,198
and there's a lot of work to do to make it look like it's actually touching the gun.

535
00:25:43,158 --> 00:25:47,361
So, I could have applied an FK-IK switch to each one of these fingers,

536
00:25:48,581 --> 00:25:51,483
but you saw how many nodes there are in construction of that rig component.

537
00:25:51,683 --> 00:25:54,845
It would really bog down the Maya scene and make it slow for animators to interact with.

538
00:25:55,405 --> 00:25:58,807
So, this is the perfect place for adding or removing a rig component,

539
00:25:59,207 --> 00:26:01,468
and that's what happened just there with our tool, the FingerIK.

540
00:26:02,605 --> 00:26:04,686
So it automatically switches all of the fingers.

541
00:26:05,166 --> 00:26:07,647
It removes one component and bakes the animation down to the bones

542
00:26:08,307 --> 00:26:11,068
and applies the other one while saving the animation.

543
00:26:11,108 --> 00:26:13,889
Now I can translate the hand and the fingers will nicely stay on the gun.

544
00:26:16,730 --> 00:26:18,531
All of our rig components are built to support this

545
00:26:19,151 --> 00:26:22,152
and it has bought us just so much flexibility in our system.

546
00:26:22,172 --> 00:26:25,713
So I highly recommend it.

547
00:26:27,854 --> 00:26:30,535
And if you'd like to hear more about first-person animation,

548
00:26:31,094 --> 00:26:32,775
Dave Helsby just did a talk yesterday

549
00:26:33,416 --> 00:26:35,277
about all of the art of first-person animation,

550
00:26:35,838 --> 00:26:37,599
and it'll be available on the GDC Vault.

551
00:26:37,619 --> 00:26:42,323
All right, over to Forrest.

552
00:26:44,544 --> 00:26:46,166
All right, who's ready to look at some code?

553
00:26:47,427 --> 00:26:48,948
All right, yeah, I know I am.

554
00:26:50,009 --> 00:26:52,110
We have about 69 pages of code to go through,

555
00:26:52,791 --> 00:26:55,293
but a dozen syntax errors.

556
00:26:55,853 --> 00:26:57,995
Let's see, we'll file some bugs.

557
00:26:59,083 --> 00:27:01,305
And yeah, we'll kick off a build.

558
00:27:02,265 --> 00:27:03,846
Yeah, this is going to be great.

559
00:27:04,847 --> 00:27:06,228
Actually, I'm joking.

560
00:27:06,348 --> 00:27:07,729
I only have 45 pages of code.

561
00:27:09,490 --> 00:27:12,512
All right, so in this animation clip, each of the fingers

562
00:27:12,593 --> 00:27:14,874
is now being controlled by their own IK component,

563
00:27:14,994 --> 00:27:16,455
just like the FP animation.

564
00:27:16,916 --> 00:27:18,757
Each of the IK components is represented

565
00:27:18,777 --> 00:27:20,218
by a class in Python.

566
00:27:20,818 --> 00:27:22,860
By using the rig as a tool, animators

567
00:27:22,880 --> 00:27:26,502
can add this IK to any finger or all fingers, do their work,

568
00:27:26,642 --> 00:27:28,123
and remove the IK when they've finished.

569
00:27:28,601 --> 00:27:30,282
They could also just leave it in place in the scene

570
00:27:30,382 --> 00:27:32,863
for future work and all of our other tools will still work.

571
00:27:34,224 --> 00:27:36,525
So the component is designed to work on any finger.

572
00:27:37,006 --> 00:27:38,867
We only have to write or patch the code once.

573
00:27:39,447 --> 00:27:40,548
If there is a patch involved,

574
00:27:40,728 --> 00:27:43,089
we can update an existing setup right in the scene

575
00:27:43,549 --> 00:27:45,330
and the animator can continue working.

576
00:27:47,872 --> 00:27:50,854
So here's some simple code that shows the create method

577
00:27:50,894 --> 00:27:52,675
for the IKFinger component class.

578
00:27:53,315 --> 00:27:54,736
All it needs is a start and end joint

579
00:27:55,156 --> 00:27:56,137
and a side and region name

580
00:27:56,237 --> 00:27:58,218
in order to create itself on any joint chain.

581
00:27:58,881 --> 00:28:01,062
All of our components use the same type of chain system

582
00:28:01,382 --> 00:28:03,003
to avoid the naming convention problem.

583
00:28:03,684 --> 00:28:06,025
This solidifies the idea that rigs are tools.

584
00:28:06,526 --> 00:28:09,267
We can create an IK component, an FK component,

585
00:28:09,607 --> 00:28:11,609
or any other type of component on a joint chain

586
00:28:11,929 --> 00:28:12,989
just by using the markup.

587
00:28:13,630 --> 00:28:15,991
Animators can switch to different components as needed.

588
00:28:18,012 --> 00:28:19,133
So after the create function,

589
00:28:19,213 --> 00:28:21,875
we include all the functions common for any component.

590
00:28:22,395 --> 00:28:24,116
By making sure all the components in the scene

591
00:28:24,156 --> 00:28:25,077
have similar setups.

592
00:28:25,438 --> 00:28:27,119
we can perform a wide variety of tasks,

593
00:28:27,479 --> 00:28:29,921
knowing that each component will handle themselves appropriately.

594
00:28:30,762 --> 00:28:32,323
When our code comes across the scene node,

595
00:28:32,683 --> 00:28:35,706
it instantiates the class as an object in my.js memory,

596
00:28:36,066 --> 00:28:38,648
and we now have access to all the methods within the class.

597
00:28:39,229 --> 00:28:41,690
The methods do things like add and remove the component,

598
00:28:42,171 --> 00:28:45,213
connect to other components, switch between states,

599
00:28:45,533 --> 00:28:47,355
or pretty much anything else we want it to do.

600
00:28:50,797 --> 00:28:52,739
So that's how the components look as code objects.

601
00:28:53,139 --> 00:28:54,560
Let's take a look at the scene nodes again.

602
00:28:55,322 --> 00:28:57,103
The class name is stored in an attribute

603
00:28:57,243 --> 00:28:58,244
on a custom metanode.

604
00:28:58,745 --> 00:29:00,206
By storing information like this,

605
00:29:00,426 --> 00:29:02,208
we can get an all-access pass to the code

606
00:29:02,568 --> 00:29:03,649
by querying the node's type

607
00:29:04,030 --> 00:29:06,352
and get even more specific by using side and region.

608
00:29:07,713 --> 00:29:08,814
XRig type is stored here,

609
00:29:10,075 --> 00:29:12,057
side is stored here, and region.

610
00:29:12,437 --> 00:29:15,000
It became more effective to encode metadata like this

611
00:29:15,300 --> 00:29:17,022
as nodes with attributes and connections

612
00:29:17,442 --> 00:29:18,843
so that each rig knows about itself

613
00:29:19,204 --> 00:29:20,665
and can communicate with other rigs

614
00:29:20,705 --> 00:29:21,686
and components in the scene.

615
00:29:23,391 --> 00:29:24,631
If we look at the finger example,

616
00:29:25,052 --> 00:29:26,852
we can query the scene for the active rig

617
00:29:27,012 --> 00:29:29,213
and get all finger components on that rig.

618
00:29:33,955 --> 00:29:35,596
Or we can just query the current selection

619
00:29:35,696 --> 00:29:37,937
and find all currently selected finger controls.

620
00:29:38,757 --> 00:29:40,578
In this case, we have the middle finger selected.

621
00:29:41,258 --> 00:29:43,899
In either case, we can just attach the fingerIK component

622
00:29:44,019 --> 00:29:44,960
in place to the fingers

623
00:29:45,400 --> 00:29:47,060
and get them ready for the animator to use

624
00:29:47,441 --> 00:29:49,682
by using the methods and functions on the component.

625
00:29:53,679 --> 00:29:59,367
So now that we've seen the scene nodes, let's dive a little bit deeper into the underlying structure of the code object itself.

626
00:30:00,068 --> 00:30:02,852
This is the top-level node from which our components inherit from.

627
00:30:03,352 --> 00:30:04,694
We call this an XRig node.

628
00:30:05,536 --> 00:30:07,138
Earlier, we referred to it as a meta node.

629
00:30:07,619 --> 00:30:09,461
The code for the class is on the left side.

630
00:30:10,343 --> 00:30:11,984
Our Xorg nodes are set up like this.

631
00:30:12,524 --> 00:30:14,945
We don't use init to create our nodes directly,

632
00:30:15,505 --> 00:30:17,186
although it makes sense to do so,

633
00:30:17,846 --> 00:30:19,787
but we want to control the creation ourselves.

634
00:30:20,447 --> 00:30:22,868
Instead, we actually use a create method

635
00:30:22,908 --> 00:30:24,149
to spawn the node in the scene,

636
00:30:24,809 --> 00:30:27,010
which calls the init, which calls the new,

637
00:30:27,550 --> 00:30:29,511
and ultimately returns the correct type of node

638
00:30:29,531 --> 00:30:31,011
for us to use as a code object.

639
00:30:33,152 --> 00:30:34,433
We can get the children of the node

640
00:30:34,473 --> 00:30:35,573
as correct class objects,

641
00:30:35,793 --> 00:30:37,274
and filter by inherited classes.

642
00:30:38,130 --> 00:30:45,892
In this example, .getXRigChildren of type FKComponent returns type FKComponent instead of XRigNode,

643
00:30:46,272 --> 00:30:49,693
and we can access all the methods associated with the FKComponent class.

644
00:30:50,533 --> 00:30:54,233
By using generic components, we have less reliance on naming conventions

645
00:30:54,453 --> 00:30:57,394
and can perform operations on all components of the same type,

646
00:30:57,914 --> 00:31:03,815
like FK switching, patch updating, or getting all the joints per component for export into the game engine.

647
00:31:04,736 --> 00:31:08,017
This further allows us to remain agile and keep our rigs dynamic.

648
00:31:10,397 --> 00:31:12,438
By using components that inherit from XRigNode,

649
00:31:12,738 --> 00:31:15,619
we get all the functionality of the XRigNode class as well.

650
00:31:16,299 --> 00:31:19,540
Additionally, we chose to wrap the XRigNodes with a PyNode,

651
00:31:20,100 --> 00:31:22,001
so we can get PyNode inheritance for free.

652
00:31:22,681 --> 00:31:26,202
In this example, .listConnections works as though it was a PyNode

653
00:31:26,522 --> 00:31:29,763
and returns to us a list of connections to the selected index finger flag.

654
00:31:32,563 --> 00:31:32,783
Boom.

655
00:31:33,544 --> 00:31:35,846
So now that we've seen how the XRig node is set up,

656
00:31:36,026 --> 00:31:38,888
let's take a look and see how a rig component tree is designed.

657
00:31:41,090 --> 00:31:43,932
In this example, the FKIK component class tree

658
00:31:44,172 --> 00:31:46,274
inherits from multiple classes and interfaces.

659
00:31:46,815 --> 00:31:48,436
We get all the functions from each tree

660
00:31:48,596 --> 00:31:49,597
to keep our code lean.

661
00:31:50,858 --> 00:31:54,481
The key is we aren't just rigging an arm modularly.

662
00:31:54,661 --> 00:31:57,663
We are actually rigging a class and associating the arm class

663
00:31:57,683 --> 00:31:58,784
to the control rig class.

664
00:31:59,805 --> 00:32:01,326
It's totally based on inheritance.

665
00:32:02,010 --> 00:32:02,790
This is how it works.

666
00:32:04,330 --> 00:32:06,391
The component class inherits from XRigNode

667
00:32:06,551 --> 00:32:07,691
as soon as it's unlocked.

668
00:32:09,751 --> 00:32:12,732
Once component is available, both animatable component

669
00:32:12,932 --> 00:32:14,432
and fixup component can use it.

670
00:32:16,673 --> 00:32:19,993
FKIK component inherits from animatable component class,

671
00:32:20,493 --> 00:32:22,814
as well as other components that use animated controls,

672
00:32:23,414 --> 00:32:24,834
like the SFK component.

673
00:32:27,095 --> 00:32:29,335
The fixup component also inherits from the component

674
00:32:29,355 --> 00:32:29,615
class.

675
00:32:30,056 --> 00:32:33,037
But since this component's joints are handled by the runtime rig in-game,

676
00:32:33,498 --> 00:32:36,559
it actually doesn't have any user-facing animatable controls.

677
00:32:37,499 --> 00:32:40,961
It's used for components like the multi-twist axis fix-up component,

678
00:32:41,401 --> 00:32:44,142
which is used in places like shoulders to handle better deformations.

679
00:32:45,383 --> 00:32:46,524
You guys ready to file a bug?

680
00:32:48,625 --> 00:32:50,265
So let's take a look at a few use cases.

681
00:32:52,566 --> 00:32:55,528
Let's assume we need to get all the control flags for a character

682
00:32:55,688 --> 00:32:56,548
in order to set a key.

683
00:32:57,298 --> 00:33:01,940
We can query the control flags on a character by asking the control rig for all of its associated controls.

684
00:33:02,721 --> 00:33:06,902
To do this, we ask the control rig for all components of type AnimatableComponent,

685
00:33:07,362 --> 00:33:10,303
and then ask each component for its .getFlag method.

686
00:33:11,104 --> 00:33:14,165
Here, we've just assigned the list result to a variable called allFlags.

687
00:33:16,446 --> 00:33:20,527
So let's say that we need to switch all the IK controls on the rig to FK.

688
00:33:21,088 --> 00:33:24,609
We can query the control rig for all components of a line switch interface.

689
00:33:25,210 --> 00:33:28,392
and then ask each component for its .setToFK method,

690
00:33:28,732 --> 00:33:29,773
calling it to make the switch.

691
00:33:30,653 --> 00:33:32,234
Here we've set up a batch-like process

692
00:33:32,274 --> 00:33:35,036
to switch the rig in the scene with FK, IK controls,

693
00:33:35,436 --> 00:33:37,678
and set them all to FK by using a for loop.

694
00:33:42,481 --> 00:33:43,501
Just as easy as that.

695
00:33:44,922 --> 00:33:46,663
So now that we've seen how class inheritance

696
00:33:46,703 --> 00:33:48,424
works in our system and how we can use it,

697
00:33:48,764 --> 00:33:49,945
let's take a look at another way

698
00:33:49,985 --> 00:33:51,986
that we connect nodes to classes.

699
00:33:55,025 --> 00:33:57,347
To help keep the creation of extra nodes at a minimum,

700
00:33:57,747 --> 00:34:00,269
we use an attribute called .bungeeFlag.

701
00:34:00,869 --> 00:34:02,851
This single attribute lets us interface

702
00:34:02,891 --> 00:34:04,212
with the flag class directly.

703
00:34:05,092 --> 00:34:07,795
The flag class enables us to turn a specific type

704
00:34:07,815 --> 00:34:09,456
of object into a class wrapper.

705
00:34:09,976 --> 00:34:12,638
In our case, we're using a joint type of object.

706
00:34:13,059 --> 00:34:15,540
It just happens to have a polygon as its shape node.

707
00:34:16,241 --> 00:34:19,203
This turns an object in Maya into a Python class instance.

708
00:34:19,944 --> 00:34:21,345
It's much simpler than XregNode

709
00:34:21,405 --> 00:34:22,646
because there is only one class

710
00:34:22,766 --> 00:34:24,247
instead of a branching tree of classes.

711
00:34:25,022 --> 00:34:27,104
but the power of this lies in the fact that we can add

712
00:34:27,284 --> 00:34:29,185
extra functionality to objects in the scene

713
00:34:29,726 --> 00:34:31,107
by only adding an attribute

714
00:34:31,487 --> 00:34:33,329
and gaining an entire Python class.

715
00:34:34,189 --> 00:34:36,091
From there, we get functions that allow us

716
00:34:36,131 --> 00:34:37,772
to generate rig controls on the fly

717
00:34:38,493 --> 00:34:41,235
or perform functions on all rig controls with this attribute.

718
00:34:41,895 --> 00:34:44,017
Each rig component knows about its own flags

719
00:34:44,057 --> 00:34:44,918
for easy traversal,

720
00:34:45,518 --> 00:34:47,280
and each flag knows about its component.

721
00:34:48,260 --> 00:34:50,382
We can also do things like replace the control flags

722
00:34:50,422 --> 00:34:51,543
with other shapes,

723
00:34:52,304 --> 00:34:53,765
customize them for a specific rig,

724
00:34:54,323 --> 00:34:56,164
or even change them for a specific animator.

725
00:34:58,184 --> 00:35:00,965
So let's see how all this comes together in rig templates.

726
00:35:02,785 --> 00:35:04,785
We'll start by creating a player rig.

727
00:35:05,645 --> 00:35:08,146
Rig templates are comprised of any number of rig components

728
00:35:08,506 --> 00:35:10,466
which use common utility functions

729
00:35:10,526 --> 00:35:11,626
to make up a control rig.

730
00:35:12,207 --> 00:35:14,247
It could be a rig with a simple two-joint structure

731
00:35:14,627 --> 00:35:15,727
or something more complex,

732
00:35:15,807 --> 00:35:17,948
like a character with forearms and a couple of props.

733
00:35:18,568 --> 00:35:20,888
By using templates, we can generate the rig quickly

734
00:35:20,988 --> 00:35:22,348
to deliver it to the animators.

735
00:35:23,220 --> 00:35:24,381
If we need to change the character,

736
00:35:24,461 --> 00:35:27,243
like alter the number of limbs, adjust the skeleton,

737
00:35:27,763 --> 00:35:29,544
or modify the number of rig controls,

738
00:35:29,865 --> 00:35:31,326
we can easily do that in a template

739
00:35:31,686 --> 00:35:33,728
and regenerate the rig in a matter of minutes.

740
00:35:34,588 --> 00:35:37,450
The rig components also draw from common utility scripts,

741
00:35:37,510 --> 00:35:39,772
so we can share a lot of the general purpose functionality

742
00:35:40,192 --> 00:35:41,593
between different rig components.

743
00:35:44,055 --> 00:35:45,656
So let's create a fallen captain.

744
00:35:46,737 --> 00:35:48,799
Rig components are an excellent design pattern

745
00:35:48,819 --> 00:35:50,420
for object-oriented programming,

746
00:35:50,940 --> 00:35:52,581
which is, of course, how Python works.

747
00:35:53,147 --> 00:35:55,849
This native inheritance behavior lets us share code

748
00:35:55,889 --> 00:35:59,212
between components, and because of this componentized

749
00:35:59,352 --> 00:36:01,934
architecture, we can also update and add functionality

750
00:36:01,974 --> 00:36:04,116
on the fly while preserving the underlying

751
00:36:04,156 --> 00:36:04,957
mesh or animation.

752
00:36:06,658 --> 00:36:07,459
So that's pretty much it.

753
00:36:07,539 --> 00:36:08,840
That's how our rig components work.

754
00:36:09,301 --> 00:36:11,843
We assemble them in a script that we call the rig template

755
00:36:12,203 --> 00:36:14,025
to construct them into a complete control rig

756
00:36:14,065 --> 00:36:16,747
for a character, a vehicle, or a prop.

757
00:36:17,508 --> 00:36:19,409
The rig template is simply assigning components

758
00:36:19,569 --> 00:36:21,211
and connecting them to other parts of the body.

759
00:36:25,168 --> 00:36:25,888
Thanks, little light.

760
00:36:26,808 --> 00:36:27,348
Don't do that.

761
00:36:30,830 --> 00:36:33,210
Awesome. So that's a tour of our rigging system and how it's built.

762
00:36:34,071 --> 00:36:36,912
And now we'd love to talk about how we used it to help build Destiny.

763
00:36:38,492 --> 00:36:40,353
So starting out in pre-production,

764
00:36:40,933 --> 00:36:42,814
we're setting out to build a whole bunch of new characters.

765
00:36:43,354 --> 00:36:46,855
So that often starts from some beautiful concept art,

766
00:36:47,035 --> 00:36:47,975
as we see on the left,

767
00:36:48,696 --> 00:36:52,097
and it ends up over here in a fully-fledged game character,

768
00:36:52,397 --> 00:36:52,937
as seen on the right.

769
00:36:54,963 --> 00:36:57,605
So here is the work that's needed to get that.

770
00:36:58,686 --> 00:37:01,048
You start with a concept art, you make a model,

771
00:37:01,729 --> 00:37:03,610
you do some rigging, and then you do some animation.

772
00:37:04,431 --> 00:37:06,372
But if you do just that and call it done,

773
00:37:09,155 --> 00:37:10,396
it doesn't always end up with a character

774
00:37:10,436 --> 00:37:11,196
that works that well.

775
00:37:11,497 --> 00:37:13,518
Because what looked good on 2D concept art,

776
00:37:13,598 --> 00:37:15,560
once you see it moving, it might have problems.

777
00:37:15,640 --> 00:37:17,201
Like the legs might not be long enough

778
00:37:17,242 --> 00:37:18,723
to create a good locomotion cycle.

779
00:37:19,223 --> 00:37:21,105
Or the arms might not even be able to reach the gun.

780
00:37:21,625 --> 00:37:23,227
We've seen things like this happen from time to time.

781
00:37:25,189 --> 00:37:33,299
So, we've developed a different process, which really attempts to accelerate change at this early stage when it's easy to do,

782
00:37:33,560 --> 00:37:35,462
when there's not a whole bunch of data depending on it.

783
00:37:36,143 --> 00:37:43,051
So, we stay closely organized as interdisciplinary group of concept art modeling, rigging, and animation.

784
00:37:43,495 --> 00:37:46,056
and we go through multiple phases of development

785
00:37:46,417 --> 00:37:48,878
where we're re-rigging this thing every step of the way.

786
00:37:49,298 --> 00:37:51,499
And it wouldn't be possible without what Forrest mentioned

787
00:37:51,539 --> 00:37:53,320
about the rig template script

788
00:37:53,420 --> 00:37:55,881
that can get us that control rig back instantaneously.

789
00:37:56,901 --> 00:37:58,922
So we can move bones around, change the skeleton,

790
00:37:59,042 --> 00:38:00,202
and then make the rig.

791
00:38:01,003 --> 00:38:03,084
And we have various ways of saving animation,

792
00:38:03,104 --> 00:38:04,904
which I'll talk about in the post-production section.

793
00:38:06,245 --> 00:38:08,286
So how this works is it starts out with some concept art.

794
00:38:09,066 --> 00:38:13,050
And here's some 2D concept art, but I think these days there's a lot of 3D concept art happening as well.

795
00:38:13,190 --> 00:38:17,575
People will make an awesome sketch in ZBrush, but it's very tempting to want to call that thing done.

796
00:38:18,336 --> 00:38:21,339
Not a good idea. We would put that through the same process here that we're doing.

797
00:38:21,719 --> 00:38:23,341
Well, we will next go to a block model.

798
00:38:24,302 --> 00:38:27,105
And I know it's not the Fallen Captain, but bear with me.

799
00:38:27,185 --> 00:38:31,469
That's what a block model looks like, and it's a bunch of rigid chunks that are parented to the skeleton.

800
00:38:32,131 --> 00:38:36,714
And what we're doing here is we're avoiding all of the really time-consuming parts of everybody's process.

801
00:38:36,754 --> 00:38:37,634
For rigging, that's skinning.

802
00:38:38,094 --> 00:38:42,357
For modelers, that's the UV layout and the high-res modeling, the texturing, normal map ripping.

803
00:38:42,377 --> 00:38:44,098
We'll just wait on that. Hold on.

804
00:38:45,478 --> 00:38:50,321
And then we'll test it, we'll animate it, we'll bring it back, and we'll try it again

805
00:38:50,581 --> 00:38:52,442
after we make some changes based on what we learned.

806
00:38:52,782 --> 00:38:55,824
And the animators will give some great screenshots of like, oh, I want to make this pose.

807
00:38:56,277 --> 00:38:58,959
but I'm not quite able to do it with the proportions like this.

808
00:38:58,999 --> 00:39:00,680
What if we change the length of the legs?

809
00:39:01,460 --> 00:39:04,962
And we really work together as a group to get the right balance.

810
00:39:04,982 --> 00:39:07,924
And what finally results is a really nicely performing character in-game.

811
00:39:08,604 --> 00:39:10,566
But it often takes, like, multiple rounds

812
00:39:10,726 --> 00:39:13,087
through this process of iteration.

813
00:39:14,408 --> 00:39:18,270
Until we finally result in a nice, stable character model and rig

814
00:39:18,810 --> 00:39:21,172
that all the departments can go off in parallel

815
00:39:21,372 --> 00:39:22,292
and do all their great work.

816
00:39:22,392 --> 00:39:23,093
High-res modeling.

817
00:39:23,533 --> 00:39:26,515
animators can create hundreds of animations that we'll need for the gameplay systems,

818
00:39:27,135 --> 00:39:27,675
and so forth.

819
00:39:30,496 --> 00:39:32,637
So here's a video of some pre-production.

820
00:39:33,318 --> 00:39:36,879
This video was not created for GDC, it was created for an early team meeting

821
00:39:37,379 --> 00:39:39,480
where we're doing a sort of concept animation,

822
00:39:40,020 --> 00:39:40,841
and early models

823
00:39:41,481 --> 00:39:45,883
are being put on rigs and animated to just explore the character's performance.

824
00:39:46,463 --> 00:39:50,345
And we also have early builds of the game where we're doing playtesting,

825
00:39:50,625 --> 00:39:52,145
and what is it like to shoot at these characters.

826
00:39:52,950 --> 00:39:55,871
And often you'll see a small thumbnail in the top left,

827
00:39:56,171 --> 00:39:57,572
and that's so we can just make sure,

828
00:39:58,032 --> 00:39:59,153
is it readable from a distance?

829
00:39:59,713 --> 00:40:01,394
And can the designers feel like, is that a threat?

830
00:40:01,414 --> 00:40:02,534
Does the player know what to do?

831
00:40:03,515 --> 00:40:05,856
So here we see the Cabal.

832
00:40:06,176 --> 00:40:07,517
The Cabal is a block model.

833
00:40:07,697 --> 00:40:08,798
It's a very early stage,

834
00:40:09,478 --> 00:40:10,678
compared to some of the other characters

835
00:40:10,719 --> 00:40:11,659
that were farther along.

836
00:40:12,539 --> 00:40:14,100
And we're learning a lot about how these characters

837
00:40:14,240 --> 00:40:15,341
actually work at this stage,

838
00:40:15,381 --> 00:40:16,581
and we're doing what's necessary

839
00:40:16,641 --> 00:40:17,922
to make them really, really cool.

840
00:40:20,433 --> 00:40:23,655
So big thanks to the character animation team

841
00:40:23,875 --> 00:40:25,336
and the character 3D art team.

842
00:40:25,836 --> 00:40:27,397
Thanks a lot for letting us share your work here.

843
00:40:28,157 --> 00:40:29,138
We also have a hive ogre.

844
00:40:29,338 --> 00:40:31,499
Hive ogre's at the gray model stage, kind of in the middle.

845
00:40:33,940 --> 00:40:35,281
Okay, so here's what that looks like

846
00:40:35,361 --> 00:40:37,482
with the progress meters at the bottom,

847
00:40:37,622 --> 00:40:39,223
showing that we've kind of started a block model

848
00:40:39,263 --> 00:40:42,665
like the Cabal Legionary, and move on to a gray model

849
00:40:43,005 --> 00:40:44,246
where we are applying skinning.

850
00:40:44,446 --> 00:40:45,727
We can see how deformations work.

851
00:40:46,287 --> 00:40:47,408
You get a little bit more detailed

852
00:40:47,508 --> 00:40:49,129
and hone in on actual bone positions.

853
00:40:49,984 --> 00:40:51,365
And finally, add a production model.

854
00:40:51,605 --> 00:40:53,845
So we're ready at that point with the fall-in character

855
00:40:53,885 --> 00:40:55,986
to go out and do real animation and modeling.

856
00:40:57,387 --> 00:40:58,647
One of the keys to making this work

857
00:40:58,927 --> 00:41:01,928
is some tools we've built for the 3D artists.

858
00:41:02,768 --> 00:41:04,609
So we have one called one-button skinning,

859
00:41:06,069 --> 00:41:09,871
which we've heard about from previous GDC talk.

860
00:41:12,471 --> 00:41:14,512
Yes, I'm going to give that reference and include it later.

861
00:41:15,774 --> 00:41:16,895
And we have animation previews.

862
00:41:16,975 --> 00:41:19,217
One-button skinning imports a pre-skinned version

863
00:41:19,237 --> 00:41:21,119
of the model and does a Maya copy skins.

864
00:41:21,319 --> 00:41:22,860
So they get rigging for free,

865
00:41:22,880 --> 00:41:24,662
and the modelers can see what it's going to look like

866
00:41:24,702 --> 00:41:25,182
when it's rigged.

867
00:41:25,823 --> 00:41:27,264
And animation preview is a tool,

868
00:41:27,284 --> 00:41:29,346
a little tool I wrote for them to actually bring

869
00:41:30,046 --> 00:41:31,307
these animations into the scene

870
00:41:31,427 --> 00:41:32,568
that the animators have made.

871
00:41:33,349 --> 00:41:35,210
And they can test it out with one-button skinning

872
00:41:35,311 --> 00:41:37,292
and the animation to just see exactly

873
00:41:37,352 --> 00:41:38,793
how everything is going to collapse

874
00:41:39,514 --> 00:41:41,956
and create better-looking results.

875
00:41:42,276 --> 00:41:44,798
And it's awesome because when it comes to our desk for rigging...

876
00:41:45,225 --> 00:41:46,466
most of these problems are already solved.

877
00:41:46,987 --> 00:41:49,328
And we just connect the dots and send it the other direction.

878
00:41:49,348 --> 00:41:51,510
So awesome.

879
00:41:51,530 --> 00:41:53,291
I really love working with character artists

880
00:41:53,331 --> 00:41:54,232
who know how to work that way.

881
00:41:54,252 --> 00:41:58,095
OK, so that's pre-production.

882
00:41:58,135 --> 00:42:01,117
We've done our best to do all the changes up front.

883
00:42:01,938 --> 00:42:04,459
But the reality of making games is a little bit

884
00:42:04,479 --> 00:42:05,860
of an inherently chaotic process.

885
00:42:05,920 --> 00:42:06,761
And that's not bad.

886
00:42:06,781 --> 00:42:07,402
That's just how it is.

887
00:42:08,142 --> 00:42:10,164
And later on, we'll discover that sometimes things

888
00:42:10,184 --> 00:42:10,724
need to change.

889
00:42:11,898 --> 00:42:14,080
So, we're going to go through a couple of scenarios,

890
00:42:14,100 --> 00:42:15,920
and just for fun, I've themed them as bounties.

891
00:42:16,841 --> 00:42:20,382
So, the first one, for a modest XP gain,

892
00:42:20,743 --> 00:42:22,824
is, let's say the character model changes,

893
00:42:23,264 --> 00:42:25,345
and we're going to need to update that in the animation scenes.

894
00:42:25,845 --> 00:42:27,466
And this is not a real problem,

895
00:42:27,506 --> 00:42:29,347
it's actually a really common, just part of the process.

896
00:42:29,847 --> 00:42:30,947
For example, on our players,

897
00:42:31,528 --> 00:42:33,068
we have a lot of player gear.

898
00:42:33,088 --> 00:42:35,330
And I see a warlock standing in the back.

899
00:42:36,170 --> 00:42:36,690
Thank you very much.

900
00:42:38,071 --> 00:42:39,411
Um, and...

901
00:42:40,830 --> 00:42:42,591
you need to be able to update these independently.

902
00:42:42,611 --> 00:42:45,272
So that's where it's great to keep your deformation rig

903
00:42:45,292 --> 00:42:47,253
and your control rig separate like this.

904
00:42:47,273 --> 00:42:49,534
It lets you update them independently.

905
00:42:49,954 --> 00:42:53,096
So for example, here I am doing a sweet Nova bomb.

906
00:42:53,896 --> 00:42:55,937
And that's what it looks like in the animation scene

907
00:42:55,977 --> 00:42:57,958
where an animator would be working on it.

908
00:42:57,978 --> 00:43:00,480
So if they're going to start out creating this animation,

909
00:43:00,640 --> 00:43:02,161
the first rig they would import is a hunter.

910
00:43:03,361 --> 00:43:05,622
And that will not do if you're ranking a warlock animation.

911
00:43:05,662 --> 00:43:06,843
They have totally different silhouettes.

912
00:43:07,023 --> 00:43:07,783
The hunter has a cape.

913
00:43:08,538 --> 00:43:09,419
the Warlock has a robe.

914
00:43:09,759 --> 00:43:11,260
So we need to know what it's gonna look like.

915
00:43:11,761 --> 00:43:13,602
So we use this process called X-Plan.

916
00:43:14,342 --> 00:43:16,584
And what it does is it imports the render scene.

917
00:43:17,544 --> 00:43:19,346
And for each bone in the old skeleton,

918
00:43:19,446 --> 00:43:20,666
it will get a list of the connections,

919
00:43:21,007 --> 00:43:22,708
and it will rewire them to a new skeleton.

920
00:43:23,308 --> 00:43:25,930
At that point, it's safe to swap the namespace

921
00:43:25,990 --> 00:43:27,031
and purge the old one.

922
00:43:27,551 --> 00:43:28,572
And it works just like that.

923
00:43:28,652 --> 00:43:31,213
It's really simple, and it works really nicely.

924
00:43:32,150 --> 00:43:34,571
A lot of studios will use referencing to solve this problem.

925
00:43:34,791 --> 00:43:38,293
And Maya's scene referencing is where you can make changes to one file

926
00:43:38,393 --> 00:43:41,615
and have it automatically get propagated to multiple files.

927
00:43:42,395 --> 00:43:45,637
And that works great, but it comes along with a few limitations.

928
00:43:46,017 --> 00:43:48,898
Like, for example, you cannot modify the DAG hierarchy.

929
00:43:49,439 --> 00:43:51,860
And that is something we need to do constantly with our Freeform

930
00:43:52,200 --> 00:43:53,581
rigging and animation system.

931
00:43:54,261 --> 00:43:58,443
So, we've been able to overcome those limitations by this technique called Xplant.

932
00:44:00,922 --> 00:44:02,243
Alright, that bounty is complete.

933
00:44:02,824 --> 00:44:03,846
Let's move on to the next one.

934
00:44:06,910 --> 00:44:08,772
So for a slightly higher XP gain here,

935
00:44:09,053 --> 00:44:11,015
let's say we need to add new bones to the skeleton.

936
00:44:11,596 --> 00:44:14,961
And in that, we have to also add controls

937
00:44:14,981 --> 00:44:16,483
for the animators to animate those bones.

938
00:44:18,708 --> 00:44:22,449
So in this example, we have the Nexus boss

939
00:44:23,229 --> 00:44:24,309
in the Venus Nexus strike.

940
00:44:24,789 --> 00:44:26,029
And at first, he didn't have that shield.

941
00:44:26,449 --> 00:44:27,550
And the designers came to us and said,

942
00:44:27,570 --> 00:44:28,830
look, he's just too easy to kill.

943
00:44:29,350 --> 00:44:30,350
So we gotta do something about this.

944
00:44:30,590 --> 00:44:32,851
And they decided to add a rotating shield.

945
00:44:33,511 --> 00:44:34,451
And it adds a lot more gameplay,

946
00:44:34,491 --> 00:44:35,771
makes it more fun, more challenging.

947
00:44:36,391 --> 00:44:38,752
So we do everything we can as riggers to make this happen.

948
00:44:39,232 --> 00:44:41,572
And we have a simple technique here called patch update.

949
00:44:42,193 --> 00:44:44,333
So patch update starts with an X-plant,

950
00:44:44,513 --> 00:44:46,073
the thing we saw in the previous bounty.

951
00:44:47,147 --> 00:44:49,768
And once that imports the new skeleton with the new bones,

952
00:44:50,469 --> 00:44:52,790
then we run a small Python script called patch update

953
00:44:53,110 --> 00:44:54,551
that will just add the new rig components.

954
00:44:55,531 --> 00:44:57,512
And it works. We don't even need to bake animations.

955
00:44:57,952 --> 00:44:59,533
It's really easy to do.

956
00:44:59,593 --> 00:45:01,734
We'll upgrade the rig version we can track

957
00:45:01,774 --> 00:45:02,955
and know, did you get this upgrade?

958
00:45:05,516 --> 00:45:06,676
Okay, moving on to the next one.

959
00:45:08,737 --> 00:45:12,039
So now let's say that we have to apply these fixes

960
00:45:12,659 --> 00:45:13,660
in 1,000 different files.

961
00:45:16,063 --> 00:45:17,844
So I don't want to stay up all night and do that.

962
00:45:18,084 --> 00:45:19,265
I would rather have the computer do it.

963
00:45:20,365 --> 00:45:21,586
So we have developed a tool.

964
00:45:22,226 --> 00:45:24,187
Jason Garris-Jones did. Thank you very much, Jason.

965
00:45:24,907 --> 00:45:25,828
Called ProblemSpotter.

966
00:45:26,528 --> 00:45:28,569
That lets us write Python script

967
00:45:28,589 --> 00:45:31,431
to analyze the files for known problems in our rigs.

968
00:45:31,911 --> 00:45:33,452
And it can produce an XML report

969
00:45:34,032 --> 00:45:36,093
which will tell us where the problem actually exists.

970
00:45:36,473 --> 00:45:38,655
And we might have thought there was a problem in 1,000 files,

971
00:45:38,935 --> 00:45:40,516
but maybe there's only a problem in 10 files.

972
00:45:41,096 --> 00:45:43,077
So great, we can apply a targeted fix

973
00:45:43,157 --> 00:45:44,458
and only touch the files that need it.

974
00:45:45,671 --> 00:45:48,413
And if we want, we can let that thing run automatically and apply the fix.

975
00:45:48,954 --> 00:45:50,315
We've developed that fix in Python.

976
00:45:51,076 --> 00:45:55,379
So, if it doesn't require manual QA, then we'll just let the computer run overnight.

977
00:45:55,800 --> 00:45:58,102
You know, I love taking coffee breaks when this happens.

978
00:45:58,142 --> 00:46:01,004
I feel like my computer is doing as much work as it possibly could.

979
00:46:02,025 --> 00:46:03,786
I'm working hard by going to get some coffee.

980
00:46:04,387 --> 00:46:05,488
Humans are good at that stuff, so...

981
00:46:07,499 --> 00:46:09,700
We've also applied Problem Spotter here

982
00:46:09,900 --> 00:46:11,061
to the top of the rig toolbar.

983
00:46:11,081 --> 00:46:12,622
It's that blue shield at the top.

984
00:46:12,662 --> 00:46:14,283
So whenever animators are in their scenes,

985
00:46:14,463 --> 00:46:16,064
if they encounter one of these known problems,

986
00:46:16,525 --> 00:46:17,345
the shield turns red.

987
00:46:17,746 --> 00:46:18,726
And they can just click that button,

988
00:46:18,946 --> 00:46:19,927
and it applies the fix.

989
00:46:21,208 --> 00:46:23,910
It's really nice to distribute that kind of fixing.

990
00:46:25,211 --> 00:46:27,372
Okay, so now we're moving on to the exotic bounty.

991
00:46:28,073 --> 00:46:28,873
This one's gonna be hard.

992
00:46:31,575 --> 00:46:33,957
Okay, so let's say we need to change that skeleton

993
00:46:33,997 --> 00:46:36,278
in ways that will totally break the animations.

994
00:46:36,957 --> 00:46:39,440
And like I said, we tried in pre-production to make it all right,

995
00:46:39,860 --> 00:46:41,722
but we know how reality works.

996
00:46:41,822 --> 00:46:43,223
We often have to change things later.

997
00:46:47,026 --> 00:46:49,329
So we have this great tool called Reanimator.

998
00:46:49,909 --> 00:46:51,851
And we first built it for riggers

999
00:46:51,891 --> 00:46:54,213
to go in and fix problems with scenes like this

1000
00:46:54,253 --> 00:46:55,374
and do animation retargeting.

1001
00:46:55,934 --> 00:46:58,477
But it was so useful, we put a user interface on it

1002
00:46:58,517 --> 00:46:59,478
and let the animators use it.

1003
00:46:59,938 --> 00:47:01,940
And now it has become one of the core parts

1004
00:47:01,960 --> 00:47:02,961
of our animation pipeline.

1005
00:47:03,590 --> 00:47:05,592
This is how we transfer motion capture onto our rigs

1006
00:47:06,092 --> 00:47:08,654
and a whole bunch of other great stuff that Forrest is going to talk about.

1007
00:47:10,115 --> 00:47:12,517
So what it is, is skeleton-to-rig retargeting.

1008
00:47:13,418 --> 00:47:18,001
And each one of our rig components knows how to apply itself to a baked skeleton.

1009
00:47:18,362 --> 00:47:21,444
So I can rip individual poses like this. We call it pose ripping.

1010
00:47:22,725 --> 00:47:26,067
And it might be useful if you're going to repurpose this walk cycle into something else.

1011
00:47:26,147 --> 00:47:29,050
Maybe I'll make a walk variant or a cinematic animation.

1012
00:47:29,817 --> 00:47:31,958
And with the sparse key frames, an animator can go in

1013
00:47:32,018 --> 00:47:34,500
and really do big work on it and get a nice head start.

1014
00:47:36,020 --> 00:47:37,961
Or they might decide, I want to transfer the whole

1015
00:47:38,722 --> 00:47:40,463
animation right onto this rig.

1016
00:47:40,483 --> 00:47:44,285
So they can do that with a single button click, transfer

1017
00:47:44,305 --> 00:47:44,905
motion to rig.

1018
00:47:45,565 --> 00:47:46,046
And here we are.

1019
00:47:46,506 --> 00:47:47,646
That warlock is walking now.

1020
00:47:49,047 --> 00:47:49,747
And my work is done.

1021
00:47:49,768 --> 00:47:52,489
Let's go collect some rewards.

1022
00:47:53,089 --> 00:47:53,910
Oh, one more thing.

1023
00:47:55,102 --> 00:47:56,303
It can work on different skeletons.

1024
00:47:56,703 --> 00:48:00,026
So, Reanimator knows how to analyze these different skeletons.

1025
00:48:00,046 --> 00:48:01,447
Even though I have different topologies,

1026
00:48:01,607 --> 00:48:04,109
they might even have different spine joints, number of spine joints.

1027
00:48:05,750 --> 00:48:07,431
By analyzing the chain markup,

1028
00:48:08,132 --> 00:48:10,793
the joint names, and the information in the rig components,

1029
00:48:11,474 --> 00:48:14,376
we can take this fallen animation and apply it to a player.

1030
00:48:15,957 --> 00:48:17,478
So, I have brought the fallen into the scene,

1031
00:48:17,538 --> 00:48:19,319
scaled him down close to the player,

1032
00:48:19,980 --> 00:48:22,142
and voila, I have the warlock animation now.

1033
00:48:23,442 --> 00:48:29,246
And it's not perfect, you can see the arms are different lengths, you might get some hyper extension, but it's a great starting point.

1034
00:48:30,667 --> 00:48:34,050
We have other tools like transfer scenery targeting for getting a more precise result.

1035
00:48:34,711 --> 00:48:36,952
I didn't have time for that one, I can talk about it later if you want.

1036
00:48:38,273 --> 00:48:42,377
Alright, these bounties are finished. Let's head back to the tower and see what we got.

1037
00:48:44,718 --> 00:48:50,183
Oh sweet, exotic chest engram and a legendary primary. I'm hoping for the heart of the Praxic fire.

1038
00:48:53,202 --> 00:48:58,026
Oh, I can go and reroll my Iron Banner weapons.

1039
00:49:00,087 --> 00:49:00,327
Okay.

1040
00:49:01,108 --> 00:49:02,069
Alright, Vanquisher 8.

1041
00:49:02,469 --> 00:49:04,191
This is a great auto-rifle for PvP.

1042
00:49:05,211 --> 00:49:07,914
But I already have one, so let's compare it to the one I have

1043
00:49:07,954 --> 00:49:09,935
and see what the randomly rolled stats look like.

1044
00:49:11,356 --> 00:49:12,918
Oh, not as much stability, I see.

1045
00:49:13,018 --> 00:49:16,080
So, stability is very important for being agile.

1046
00:49:16,420 --> 00:49:18,082
We know how important agility is for rigging.

1047
00:49:18,762 --> 00:49:20,324
So I'm going to dismantle that.

1048
00:49:20,344 --> 00:49:22,425
Get some more Ascendant Energy.

1049
00:49:23,446 --> 00:49:24,206
Thanks a lot, Cryptarch.

1050
00:49:25,307 --> 00:49:25,807
Tough luck.

1051
00:49:27,569 --> 00:49:30,030
All right, so let's take a look at some more of the animation tools.

1052
00:49:31,731 --> 00:49:35,833
Reanimator is indeed one of the most amazing tools within our animation and rigging toolset.

1053
00:49:36,634 --> 00:49:42,798
We have applied it as a standard on all of our rigs, therefore they can all retarget animation from their skeleton back into their control rig.

1054
00:49:43,418 --> 00:49:44,899
This has saved us a ton of times.

1055
00:49:45,880 --> 00:49:51,603
In fact, X-Pose, the tool that you see here, this is our Pose Save and Restore tool.

1056
00:49:52,597 --> 00:49:53,878
This is built on Reanimator.

1057
00:49:54,318 --> 00:49:56,260
It has the standard features of any Pose library,

1058
00:49:56,500 --> 00:49:59,563
Pose saving, mirroring, sharing between users,

1059
00:50:00,464 --> 00:50:02,426
but it can also restore on a component level

1060
00:50:02,746 --> 00:50:03,647
because of our system.

1061
00:50:04,308 --> 00:50:07,250
We can grab only finger rotations and apply it to the rig,

1062
00:50:07,611 --> 00:50:10,914
or we can grab only upper body components if we want.

1063
00:50:11,695 --> 00:50:13,256
X-Pose can also apply a pose

1064
00:50:13,296 --> 00:50:15,658
based on any flag's position or rotation,

1065
00:50:16,079 --> 00:50:18,441
which is excellent for getting foot placement correct.

1066
00:50:19,626 --> 00:50:23,008
Xpose gets its power by using the fundamental parts of the way components work.

1067
00:50:23,489 --> 00:50:26,071
And because each rig is built with its functionality in mind,

1068
00:50:26,471 --> 00:50:27,932
it is compatible with any rig.

1069
00:50:28,512 --> 00:50:31,034
In fact, it can transfer poses between characters as well,

1070
00:50:31,494 --> 00:50:33,276
even if they have a different number of components.

1071
00:50:34,817 --> 00:50:38,900
Pretty sure I tried to put a player animation on a player ship once.

1072
00:50:39,520 --> 00:50:40,561
It was kind of interesting.

1073
00:50:43,818 --> 00:50:46,359
So with our rigs tightly integrated into our Python tools,

1074
00:50:46,499 --> 00:50:48,240
it unlocks the door to writing all kinds

1075
00:50:48,280 --> 00:50:49,720
of other awesome tools for animation.

1076
00:50:50,460 --> 00:50:52,121
We developed these tools to help the animator

1077
00:50:52,161 --> 00:50:53,061
work with the rig easily.

1078
00:50:53,441 --> 00:50:54,922
If the rig is in the wrong control scheme,

1079
00:50:55,042 --> 00:50:56,442
it takes a ton of counter-animation

1080
00:50:56,562 --> 00:50:57,922
to make it move the way they want.

1081
00:50:59,603 --> 00:51:02,984
So in this case, we see an animator working away,

1082
00:51:03,224 --> 00:51:04,404
and he wants to adjust the pose.

1083
00:51:06,025 --> 00:51:07,325
In his fist of havoc here.

1084
00:51:07,885 --> 00:51:11,046
So he's rotating the spine, but as you can see,

1085
00:51:11,066 --> 00:51:12,607
the hands don't stay planted on the ground.

1086
00:51:13,417 --> 00:51:15,559
So using the context-sensitive toolbar

1087
00:51:15,799 --> 00:51:17,680
that we've developed for them on the left there,

1088
00:51:18,160 --> 00:51:20,822
they can easily switch both arms to IK,

1089
00:51:22,263 --> 00:51:23,364
and the arms will stay planted.

1090
00:51:23,384 --> 00:51:26,266
Oh, I guess we included a character picker in there as well

1091
00:51:26,306 --> 00:51:27,146
to make it even easier.

1092
00:51:27,867 --> 00:51:31,449
Great, so now they can rotate the spine,

1093
00:51:32,049 --> 00:51:33,590
and the hands will stay planted on the ground,

1094
00:51:33,730 --> 00:51:35,011
which is exactly what they want.

1095
00:51:37,433 --> 00:51:38,273
Well, let's say they want to do

1096
00:51:38,313 --> 00:51:39,694
something slightly more drastic,

1097
00:51:40,335 --> 00:51:41,996
and adjust the cog control here.

1098
00:51:42,723 --> 00:51:46,424
Well, unfortunately, the hands don't stay planted

1099
00:51:46,464 --> 00:51:48,205
because they're actually following

1100
00:51:48,245 --> 00:51:49,585
the parent space of the cog.

1101
00:51:50,485 --> 00:51:53,926
So, no problem, we can just grab the hand flags here

1102
00:51:53,986 --> 00:51:59,268
and easily switch them to what we call F super.

1103
00:51:59,528 --> 00:52:01,309
This is our topmost node in the rig.

1104
00:52:02,589 --> 00:52:06,110
And now the hands will stay locked into that position.

1105
00:52:06,510 --> 00:52:08,671
And they can freely adjust the cog however they want

1106
00:52:09,191 --> 00:52:10,292
and hands will stay planted.

1107
00:52:12,265 --> 00:52:17,247
That's pretty sweet. They can also still adjust the spine, and hands will definitely still stay planted.

1108
00:52:19,108 --> 00:52:20,148
Works for rotation too.

1109
00:52:21,289 --> 00:52:21,649
Excellent.

1110
00:52:22,829 --> 00:52:29,092
Alright, so perhaps he's going to transition back into the rifle pose.

1111
00:52:31,033 --> 00:52:31,993
But he doesn't have a weapon.

1112
00:52:32,373 --> 00:52:35,255
Okay, well, let's take a look at the armory here.

1113
00:52:36,455 --> 00:52:39,917
We sort of gave them a list of any kind of weapon that they're going to want.

1114
00:52:41,256 --> 00:52:43,617
We'll just equip the standard assault rifle for now.

1115
00:52:45,057 --> 00:52:46,258
He didn't win at the Crypt Arc.

1116
00:52:47,698 --> 00:52:48,678
So great.

1117
00:52:49,639 --> 00:52:50,779
He now has a rifle.

1118
00:52:51,459 --> 00:52:52,960
Notice everything stayed in place.

1119
00:52:53,220 --> 00:52:54,520
It just added on the fly.

1120
00:52:55,241 --> 00:52:57,001
So in this case, the animator only

1121
00:52:57,041 --> 00:53:01,603
wants to adjust the prop here, but the hands aren't following.

1122
00:53:01,803 --> 00:53:07,485
So of course, we can just use our weapon toolbar widget here

1123
00:53:07,765 --> 00:53:08,285
and have.

1124
00:53:09,374 --> 00:53:13,177
easy button selection to have the hands follow the space of the weapon.

1125
00:53:15,539 --> 00:53:16,800
It's looking pretty good right there.

1126
00:53:18,061 --> 00:53:21,464
All I have to do is animate that one flag. It works for rotation and

1127
00:53:22,044 --> 00:53:23,205
translation as well.

1128
00:53:23,586 --> 00:53:24,526
Both hands will follow.

1129
00:53:24,707 --> 00:53:29,090
It looks like there's a problem. His left hand isn't in the right position.

1130
00:53:29,150 --> 00:53:30,671
It's kind of loading off in space.

1131
00:53:31,332 --> 00:53:34,534
Well, using the weapon toolbar widget here, we can

1132
00:53:35,395 --> 00:53:37,957
easily snap to a predefined position on the weapon.

1133
00:53:38,533 --> 00:53:39,733
just to keep consistency.

1134
00:53:40,493 --> 00:53:44,294
And lo and behold, the hands are still set to follow.

1135
00:53:44,394 --> 00:53:46,895
So it makes it pretty easy for them.

1136
00:53:47,635 --> 00:53:50,196
And with a few button clicks, he now has a weapon equipped,

1137
00:53:50,336 --> 00:53:51,496
and he's holding it in the right way.

1138
00:53:53,977 --> 00:53:55,538
So we've developed our component structure

1139
00:53:55,578 --> 00:53:57,778
to make it easy for us to write advanced functionality

1140
00:53:58,098 --> 00:53:59,939
and expose it in the window-based UI,

1141
00:54:00,339 --> 00:54:01,699
just like the rig tool bar you see here.

1142
00:54:03,600 --> 00:54:06,361
Everything is constrained to the top there.

1143
00:54:06,381 --> 00:54:07,441
We call this the active rig.

1144
00:54:07,905 --> 00:54:10,066
It can be interacted with in a multitude of ways,

1145
00:54:10,486 --> 00:54:11,906
including the multi-constraint example

1146
00:54:12,066 --> 00:54:14,147
where the hands can be set to follow the weapon.

1147
00:54:16,868 --> 00:54:18,349
So multi-constraint is very useful,

1148
00:54:18,909 --> 00:54:21,210
but since it becomes built into the rig,

1149
00:54:21,290 --> 00:54:23,050
it can only depend on parts of its own self.

1150
00:54:23,691 --> 00:54:25,231
There's another way we have solved this problem,

1151
00:54:25,391 --> 00:54:26,792
and this way is even more flexible.

1152
00:54:27,352 --> 00:54:30,213
The Overdriver tool lets the animators drive rig controls

1153
00:54:30,233 --> 00:54:32,754
by anything in the scene, like in this cinematic shot

1154
00:54:32,914 --> 00:54:34,595
where the pistol needs to change hands

1155
00:54:34,635 --> 00:54:35,855
from one character to another.

1156
00:54:36,853 --> 00:54:41,736
We can tell the control to have its position and or its rotation be driven by another object

1157
00:54:42,537 --> 00:54:44,158
or even be driven by world coordinates.

1158
00:54:44,719 --> 00:54:48,562
The flexibility in this system is that OverDriver is completely compatible with all the other

1159
00:54:48,582 --> 00:54:52,685
tools so they know to treat it as a rig control just like any other rig control.

1160
00:54:53,885 --> 00:54:58,249
This means that it also works with our Pose Save and Restore tool, our Transfer Animation

1161
00:54:58,289 --> 00:55:01,951
tool and our Component Add and Remove functions as well as the other tools.

1162
00:55:02,992 --> 00:55:04,933
What we have found is that there isn't necessarily

1163
00:55:05,014 --> 00:55:06,615
one right way of doing a lot of these things

1164
00:55:06,675 --> 00:55:09,236
in rigging and animation, but more that it's great

1165
00:55:09,256 --> 00:55:11,878
to have a variety of tools for animators to mix and match,

1166
00:55:12,198 --> 00:55:13,799
get the specific behavior they might need

1167
00:55:13,879 --> 00:55:14,840
for a given animation.

1168
00:55:17,862 --> 00:55:18,462
Yeah, that's right.

1169
00:55:20,043 --> 00:55:20,484
Overdrive.

1170
00:55:20,524 --> 00:55:22,445
So it's great that all of our characters

1171
00:55:22,485 --> 00:55:23,966
have access to all these animation tools,

1172
00:55:24,286 --> 00:55:26,628
but our game design calls for all other kinds of things

1173
00:55:26,648 --> 00:55:27,948
that need rigging and animation too.

1174
00:55:28,622 --> 00:55:30,643
There are a ton of vehicles, weapons, props,

1175
00:55:31,104 --> 00:55:33,685
environment objects, skybox objects.

1176
00:55:34,086 --> 00:55:34,906
They all need rigs.

1177
00:55:35,446 --> 00:55:37,748
Because they are created from the same rig component system,

1178
00:55:37,868 --> 00:55:39,789
they have access to all these animation tools.

1179
00:55:40,249 --> 00:55:42,270
Everything automatically inherits the functionality

1180
00:55:42,951 --> 00:55:44,852
with zero extra work needed by us riggers

1181
00:55:44,932 --> 00:55:46,513
because of the way we design the components.

1182
00:55:48,374 --> 00:55:50,756
That being said, animators still need standard rigs

1183
00:55:50,776 --> 00:55:52,917
to work with while maintaining the core functionality

1184
00:55:52,977 --> 00:55:54,418
of retargeting and modularity.

1185
00:55:56,918 --> 00:56:02,081
So there are so many rigs in Destiny that us riggers couldn't possibly have created all of them by ourselves.

1186
00:56:02,601 --> 00:56:07,083
We removed ourselves as a bottleneck in the pipeline by building tools for artists to create their own rigs.

1187
00:56:07,663 --> 00:56:11,945
The majority of the props for cinematics, environments, and skies were made by the artists in those departments

1188
00:56:12,425 --> 00:56:14,767
using tools like this one, the Create Rig Render tool.

1189
00:56:15,427 --> 00:56:19,369
This is the big satellite dish from the final Cosmonaut mission, and it was automatically generated.

1190
00:56:20,129 --> 00:56:24,271
The tool automatically creates either a single-node rig for basic placement in the world,

1191
00:56:24,754 --> 00:56:26,675
or a full FK rig like you see here,

1192
00:56:27,055 --> 00:56:29,337
with components that get connected in the same order

1193
00:56:29,397 --> 00:56:30,558
as the skeletal hierarchy.

1194
00:56:32,920 --> 00:56:36,063
So we initially set out to make a rig builder tool

1195
00:56:36,083 --> 00:56:38,264
to go beyond simple rigs like the satellite dish.

1196
00:56:38,945 --> 00:56:40,166
But as we were designing it,

1197
00:56:40,226 --> 00:56:42,668
we realized it's also useful as an animation tool

1198
00:56:43,048 --> 00:56:44,730
because of the way our rig components can add

1199
00:56:44,770 --> 00:56:46,811
and remove themselves while preserving animation.

1200
00:56:48,052 --> 00:56:50,094
Naturally, the next stage of our rig building tools

1201
00:56:50,214 --> 00:56:52,776
led us to create a tool that gives animators the freedom

1202
00:56:52,816 --> 00:56:53,957
to adjust the rigs themselves.

1203
00:56:54,634 --> 00:56:58,216
The animators can start with one of the default rigs to add and remove as they go,

1204
00:56:58,696 --> 00:57:03,638
or they can start out with a skeleton and add only the components they need to craft a particular animation.

1205
00:57:04,358 --> 00:57:07,340
Either way, they have the complete freedom to animate comfortably,

1206
00:57:07,700 --> 00:57:10,361
and all animation is preserved while constructing their rigs.

1207
00:57:12,222 --> 00:57:14,863
So this video demonstrates the power of having a modular system.

1208
00:57:15,383 --> 00:57:19,705
Animators can add or remove components at will, depending on the needs of the animation work.

1209
00:57:20,388 --> 00:57:23,891
They can strip off an FK-IK component, replace it with FK,

1210
00:57:24,552 --> 00:57:27,614
or they can replace the reverse foot component

1211
00:57:27,634 --> 00:57:28,715
with a standard IK.

1212
00:57:29,996 --> 00:57:31,917
Sometimes animation calls for a new pivot point

1213
00:57:31,958 --> 00:57:33,319
to be set to an elbow or a knee.

1214
00:57:34,039 --> 00:57:36,741
They can remove the existing component,

1215
00:57:36,881 --> 00:57:38,683
start the chain at the clavicle or the hip,

1216
00:57:39,083 --> 00:57:40,584
to pivot from the desired location.

1217
00:57:41,225 --> 00:57:43,447
Some animators like to keyframe on the skeleton itself

1218
00:57:43,867 --> 00:57:45,188
and only add IK to the legs.

1219
00:57:46,029 --> 00:57:48,210
All this is possible while preserving animation.

1220
00:57:49,717 --> 00:57:51,098
By keeping this system flexible, we

1221
00:57:51,138 --> 00:57:53,260
can put more of the rigging in the animator's hands

1222
00:57:53,600 --> 00:57:56,002
and give them the freedom to use the tools however they need to.

1223
00:57:59,464 --> 00:58:00,465
So final thoughts.

1224
00:58:01,466 --> 00:58:03,327
Let's summarize everything that we just learned.

1225
00:58:04,188 --> 00:58:06,310
The rig is thought of in terms of regions,

1226
00:58:06,350 --> 00:58:08,531
so we can add or remove components as necessary.

1227
00:58:09,012 --> 00:58:10,613
This greatly increases our agility

1228
00:58:10,773 --> 00:58:12,994
and allows us to iterate quickly.

1229
00:58:13,975 --> 00:58:15,496
Components are designed to be generic,

1230
00:58:15,516 --> 00:58:17,458
so we can use them wherever we need to.

1231
00:58:17,966 --> 00:58:21,088
For example, an FKIK component isn't defined as an arm.

1232
00:58:21,528 --> 00:58:23,810
It can be used on any three-joint chain

1233
00:58:23,830 --> 00:58:24,910
that needs the functionality.

1234
00:58:25,410 --> 00:58:26,811
Doesn't even need to be a character.

1235
00:58:26,831 --> 00:58:29,313
It could be a vehicle, spider tank.

1236
00:58:30,173 --> 00:58:31,954
Components are required to be retargetable

1237
00:58:32,195 --> 00:58:33,435
and as lossless as possible.

1238
00:58:33,776 --> 00:58:35,397
We can update components at any time

1239
00:58:35,717 --> 00:58:37,818
and preserve animation content along the way.

1240
00:58:38,799 --> 00:58:40,139
The tools complement the components

1241
00:58:40,240 --> 00:58:41,320
and interface with classes,

1242
00:58:41,480 --> 00:58:42,801
keeping it lean by sharing code.

1243
00:58:43,562 --> 00:58:45,883
Animators are totally happy with the freedom to hack away,

1244
00:58:46,263 --> 00:58:47,584
knowing that their tools will still work.

1245
00:58:51,705 --> 00:58:52,166
There you go.

1246
00:58:53,206 --> 00:58:53,927
Go Space Magic.

1247
00:58:54,627 --> 00:58:56,568
Yeah, this is our whole team.

1248
00:58:56,628 --> 00:58:58,269
This is using our actual characters

1249
00:58:59,450 --> 00:59:00,450
because we like to play.

1250
00:59:03,892 --> 00:59:04,092
Yeah.

1251
00:59:04,292 --> 00:59:04,933
We like to dance.

1252
00:59:05,893 --> 00:59:07,214
Yeah, who doesn't like to dance?

1253
00:59:10,916 --> 00:59:11,536
Sweet, all right.

1254
00:59:11,596 --> 00:59:13,257
Well, thanks to all the people that helped us out.

1255
00:59:16,019 --> 00:59:16,939
Yeah, we had a great time.

