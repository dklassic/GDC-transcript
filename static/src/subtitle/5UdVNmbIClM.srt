1
00:00:05,735 --> 00:00:06,436
Hello, everybody.

2
00:00:06,496 --> 00:00:08,638
Welcome to Game Design Case Studies.

3
00:00:08,658 --> 00:00:11,181
I am Eric Zimmerman, and I'm moderating this panel.

4
00:00:13,609 --> 00:00:15,450
What is game design case studies?

5
00:00:16,131 --> 00:00:19,375
Game design case studies was inspired by a question

6
00:00:19,555 --> 00:00:23,879
about what is an advanced game design talk.

7
00:00:24,620 --> 00:00:27,463
Unlike our sisters and brothers, our spiritual sisters

8
00:00:27,503 --> 00:00:29,785
and brothers in other design fields like architecture,

9
00:00:30,186 --> 00:00:31,888
graphic design, industrial design,

10
00:00:32,668 --> 00:00:33,770
we're a very young field.

11
00:00:33,810 --> 00:00:36,272
We're still kind of figuring out what an advanced.

12
00:00:36,973 --> 00:00:38,994
understanding of game design might be.

13
00:00:39,715 --> 00:00:44,577
And I'm inspired for panels like this by things like Detail Magazine,

14
00:00:44,678 --> 00:00:47,139
architectural detail, not the men's magazine.

15
00:00:47,479 --> 00:00:50,961
They have magazines that are extremely focused.

16
00:00:51,001 --> 00:00:53,203
These individual magazines are about, like,

17
00:00:53,643 --> 00:00:56,304
timber construction and building libraries.

18
00:00:56,765 --> 00:01:00,147
And inside, they basically have porn for architects, right?

19
00:01:00,207 --> 00:01:00,427
Like...

20
00:01:01,047 --> 00:01:04,190
detailed diagrams and layouts that just explain,

21
00:01:04,210 --> 00:01:06,433
hey, how does this design system work?

22
00:01:06,473 --> 00:01:09,936
How is it put together beyond what you see on the surface?

23
00:01:09,976 --> 00:01:11,798
And the challenge for us as game designers,

24
00:01:12,078 --> 00:01:13,580
especially with video games, is that we

25
00:01:13,620 --> 00:01:16,402
play each other's games, but we have to extrapolate

26
00:01:16,703 --> 00:01:17,724
how the system works.

27
00:01:18,344 --> 00:01:21,325
based on how we think it's functioning under the hood.

28
00:01:21,686 --> 00:01:25,187
So the idea here is to be able to lift up the hood

29
00:01:25,527 --> 00:01:27,008
and really see what's underneath.

30
00:01:28,008 --> 00:01:29,709
The session was approved by GDC.

31
00:01:29,869 --> 00:01:33,431
I did a call for papers and I got a lot of excellent...

32
00:01:34,251 --> 00:01:36,273
proposals for game design case studies,

33
00:01:36,653 --> 00:01:38,475
and I chose these three amazing ones

34
00:01:38,515 --> 00:01:39,696
that you're going to see today.

35
00:01:40,017 --> 00:01:42,519
So we're going to see three 15-minute presentations.

36
00:01:43,100 --> 00:01:47,564
And the guidelines for what they're doing is just,

37
00:01:47,704 --> 00:01:50,587
each of them are going to show one game that they designed

38
00:01:50,767 --> 00:01:52,289
and one system in that game.

39
00:01:52,649 --> 00:01:55,432
And all we want them to do is show us how it works.

40
00:01:56,513 --> 00:02:00,114
Without some of the other things that sometimes take up time.

41
00:02:00,134 --> 00:02:01,435
They only have fifteen minutes.

42
00:02:01,815 --> 00:02:04,697
So we really want them to focus just on how it works.

43
00:02:04,917 --> 00:02:09,079
And hopefully what we'll get as a result is porn for game designers.

44
00:02:10,200 --> 00:02:16,263
So please join me in welcoming Tanya Short, Dan Kassar and Bennett Foddy today to give

45
00:02:16,303 --> 00:02:17,583
their game design case study.

46
00:02:19,476 --> 00:02:21,518
We're going to start with Tanya Short.

47
00:02:21,938 --> 00:02:27,183
Tanya, we are so lucky to have her design brilliance here today.

48
00:02:27,563 --> 00:02:30,306
She is the captain at Kit Fox Games.

49
00:02:30,766 --> 00:02:33,969
And she is going to be here talking about a game

50
00:02:33,989 --> 00:02:35,771
that she designed, Shattered Planet.

51
00:02:35,811 --> 00:02:36,512
Take it away, Tanya.

52
00:02:37,052 --> 00:02:37,633
Thanks, Eric.

53
00:02:39,938 --> 00:02:42,040
Right, so I'm the captain of Kit Fox Games,

54
00:02:42,680 --> 00:02:44,922
and I'm going to tell you about the way

55
00:02:44,962 --> 00:02:46,844
that the levels in Shattered Planet

56
00:02:46,924 --> 00:02:48,845
are procedurally generated according

57
00:02:48,905 --> 00:02:49,986
to design philosophies.

58
00:02:50,687 --> 00:02:54,250
So Kit Fox Games is actually made up of four people.

59
00:02:54,570 --> 00:02:56,472
Another one is in the audience over there somewhere.

60
00:02:57,352 --> 00:02:59,895
And the reason I bring this up is because a lot of what

61
00:02:59,915 --> 00:03:00,895
I'm going to be talking about today

62
00:03:00,955 --> 00:03:04,278
is actually systems developed by Zhang Wu, but also primarily

63
00:03:04,358 --> 00:03:05,059
Mike Ditchburn.

64
00:03:06,259 --> 00:03:16,502
and he would rather die than be up here talking to you right now, so I'm here to tell you about the procedures that we developed together and the design philosophies that I developed with him.

65
00:03:17,362 --> 00:03:26,725
So Shattered Planet came to Steam last July and it's a science fiction dungeon crawler of sorts. It could be called a roguelike by some.

66
00:03:27,325 --> 00:03:28,586
And the point to take away here,

67
00:03:28,606 --> 00:03:29,747
by looking at the screenshot,

68
00:03:29,867 --> 00:03:32,570
is that it is procedurally generated tile by tile.

69
00:03:32,630 --> 00:03:36,353
So all of the walkable area is generated by an algorithm.

70
00:03:36,393 --> 00:03:38,415
There's no hand-built pieces there.

71
00:03:40,903 --> 00:03:43,323
And it started at the beginning, we

72
00:03:43,483 --> 00:03:46,464
wanted to make levels that felt like someone had designed them.

73
00:03:46,684 --> 00:03:50,865
So we took apart a, this is a very early mock-up of a level

74
00:03:50,905 --> 00:03:53,546
that we were designing, and looked at what made

75
00:03:53,606 --> 00:03:55,186
it feel like it was designed.

76
00:03:55,446 --> 00:03:56,987
And so I'll be going through the procedure

77
00:03:57,027 --> 00:03:58,567
that the algorithm actually takes

78
00:03:58,987 --> 00:04:00,208
and why it takes those steps.

79
00:04:00,668 --> 00:04:05,269
And then what content design tools and methods that we used,

80
00:04:05,329 --> 00:04:06,569
and then what's missing.

81
00:04:07,189 --> 00:04:08,109
So the procedure.

82
00:04:09,550 --> 00:04:11,272
of the procedural generation

83
00:04:11,913 --> 00:04:14,035
begins with the actual geometry.

84
00:04:14,256 --> 00:04:17,319
So it builds a shopping list of possible rooms

85
00:04:17,579 --> 00:04:19,101
in the dungeon that you can walk along.

86
00:04:20,002 --> 00:04:22,125
And that's, you can think of that as analogous

87
00:04:22,185 --> 00:04:25,008
to a level designer coming up with what the possible

88
00:04:25,068 --> 00:04:27,110
minimum and maximum size is that they can

89
00:04:27,391 --> 00:04:28,392
build a given room in.

90
00:04:28,933 --> 00:04:30,355
And then it starts placing them out,

91
00:04:30,555 --> 00:04:32,798
deciding where doors can be placed.

92
00:04:33,299 --> 00:04:34,300
It chooses one as a door.

93
00:04:34,661 --> 00:04:36,423
It places another island, it connects the island.

94
00:04:36,523 --> 00:04:39,247
And it makes a critical path and it makes side paths.

95
00:04:39,327 --> 00:04:42,772
And it understands which is the main

96
00:04:42,812 --> 00:04:43,333
and which is the off.

97
00:04:44,975 --> 00:04:47,356
the critical path, which will be important later.

98
00:04:48,416 --> 00:04:50,297
But at this point, you have basic geometry,

99
00:04:50,877 --> 00:04:53,598
and it decays to look a little bit more organic,

100
00:04:53,638 --> 00:04:55,279
a little bit more like a shattered planet,

101
00:04:55,339 --> 00:04:57,400
and a little less like a dungeon

102
00:04:57,420 --> 00:05:01,441
that you would find under the ground with a lich in it.

103
00:05:02,842 --> 00:05:06,725
And it does that by each individual cell along the edge,

104
00:05:07,245 --> 00:05:09,707
kind of managing itself, having cellular automata

105
00:05:10,127 --> 00:05:11,708
to decide, based on its neighbors,

106
00:05:12,029 --> 00:05:14,210
its probability of disappearing,

107
00:05:14,670 --> 00:05:18,393
with possible doors kept as an exception for reasons.

108
00:05:19,554 --> 00:05:24,040
The next step is it paints the texture of what it should actually look like to humans.

109
00:05:24,640 --> 00:05:25,702
It uses Perlin noise.

110
00:05:26,823 --> 00:05:30,788
Mike squashed it until it had a good contrast at the resolution we wanted,

111
00:05:30,828 --> 00:05:32,290
which was 5 to 5 or 9 by 9.

112
00:05:33,131 --> 00:05:36,595
And then along the seams it paints a transition texture,

113
00:05:36,756 --> 00:05:37,977
which on the right you'll see between 1 and 2.

114
00:05:38,878 --> 00:05:39,739
They never actually touch.

115
00:05:39,759 --> 00:05:41,280
There's a transition texture put in there

116
00:05:41,820 --> 00:05:42,881
where they would have touched.

117
00:05:43,261 --> 00:05:45,702
So you get this result of the primary texture,

118
00:05:45,782 --> 00:05:48,404
the secondary texture, and a transition texture in between,

119
00:05:48,784 --> 00:05:49,805
which is pleasing.

120
00:05:51,965 --> 00:05:53,206
One thing that you'll notice here, actually,

121
00:05:53,246 --> 00:05:56,789
is that the bridges never got quite transitioned correctly.

122
00:05:56,829 --> 00:05:59,851
They still stick to only one of the primary textures.

123
00:06:01,432 --> 00:06:01,732
Oh, well.

124
00:06:03,774 --> 00:06:05,335
The third thing that it does is it

125
00:06:05,395 --> 00:06:08,538
makes it feel even more organic and even more shattered

126
00:06:09,418 --> 00:06:10,999
by, again, using cellular automata

127
00:06:11,040 --> 00:06:14,862
to have the individual spaces around a given room

128
00:06:15,203 --> 00:06:18,065
decide its probability of having what we call crumblies.

129
00:06:19,005 --> 00:06:21,627
Each edge has that percentage chance to spawn a new crumbly,

130
00:06:21,647 --> 00:06:25,208
and it inherits the texture of the cell next to it.

131
00:06:25,268 --> 00:06:26,929
In the case of a transition texture,

132
00:06:26,969 --> 00:06:30,070
it just picks one of the two textures to inherit.

133
00:06:31,291 --> 00:06:33,272
We did have to move the islands a bit further away

134
00:06:33,312 --> 00:06:35,533
from each other to prevent the illusion that you

135
00:06:35,553 --> 00:06:37,613
could walk on these crumblies between islands.

136
00:06:38,334 --> 00:06:39,534
That was the only real adjustment

137
00:06:39,554 --> 00:06:40,515
we had to make to the algorithm.

138
00:06:40,850 --> 00:06:42,911
And you can see this is before we added the crumblies.

139
00:06:43,592 --> 00:06:46,874
It looks very geometric, very rigid.

140
00:06:47,975 --> 00:06:51,258
And then adding crumblies and also a background texture

141
00:06:51,578 --> 00:06:54,300
helps immensely with the feeling that you're actually

142
00:06:54,320 --> 00:06:57,302
in a level that someone may have designed by hand.

143
00:06:58,929 --> 00:07:03,032
So next, we have to figure out where to put the obstacles.

144
00:07:03,252 --> 00:07:06,514
So we wanted obstacles to make the terrain more varied,

145
00:07:06,994 --> 00:07:08,876
to not let you just walk everywhere you can see.

146
00:07:09,476 --> 00:07:13,599
And to do that, we first used a depth-first algorithm,

147
00:07:13,859 --> 00:07:15,440
a depth-first maze generation.

148
00:07:15,740 --> 00:07:17,541
And what you can see it's doing here

149
00:07:17,822 --> 00:07:21,084
is any given place that is part of the maze,

150
00:07:21,764 --> 00:07:26,567
connects to every other place, right? There is no place in this maze where you will get stuck.

151
00:07:26,847 --> 00:07:32,251
You can always move around even though there's obstacles, and so we used a variant of this

152
00:07:33,091 --> 00:07:39,555
on the map using pathfinding, so the pathfinder would decide where obstacles were allowed to go.

153
00:07:40,236 --> 00:07:41,797
We would not do it this way again.

154
00:07:41,817 --> 00:07:42,838
I do not recommend it.

155
00:07:43,538 --> 00:07:47,101
And it's because this works especially well with rectangles.

156
00:07:47,601 --> 00:07:50,764
And as I described before, we don't actually use rectangles.

157
00:07:50,884 --> 00:07:53,966
So for example, if you start with the door

158
00:07:54,086 --> 00:07:57,929
at the top white section, if you start walking on that path,

159
00:07:58,009 --> 00:08:00,331
it no longer connects to a lot of the other paths.

160
00:08:00,671 --> 00:08:03,113
You actually will get stuck almost constantly.

161
00:08:04,294 --> 00:08:05,035
using this method.

162
00:08:05,095 --> 00:08:08,057
So we had to actually add and duct tape a second system

163
00:08:08,438 --> 00:08:10,760
which would go around and destroy obstacles

164
00:08:11,160 --> 00:08:12,301
that were placed in the way

165
00:08:12,922 --> 00:08:16,305
if the pathfinder couldn't find the rest of the maze

166
00:08:16,345 --> 00:08:17,106
that it had generated.

167
00:08:17,666 --> 00:08:18,587
So that was fun.

168
00:08:21,723 --> 00:08:26,870
So, next, I mentioned before that there's a critical path and an off-critical path.

169
00:08:27,771 --> 00:08:31,977
The reason why you needed to know that was because, although there's different entities

170
00:08:32,017 --> 00:08:36,403
that could spawn in them, one of these was actually a particular kind of entity which

171
00:08:36,483 --> 00:08:36,623
would

172
00:08:37,264 --> 00:08:41,288
So, we could pick a bridge and turn it into an invisible bridge

173
00:08:41,388 --> 00:08:46,112
and put a locked door on it, and then put a key along the main path.

174
00:08:46,313 --> 00:08:50,136
So, the design tools, we could specify zero to three of these locked doors,

175
00:08:50,577 --> 00:08:52,979
and it would segment away one of the side paths,

176
00:08:53,079 --> 00:08:54,440
and make sure you couldn't get stuck,

177
00:08:55,181 --> 00:08:57,483
and that room could only be accessed through that bridge.

178
00:08:59,139 --> 00:09:05,586
And that's important to happen first because the next step was to find where there were dead ends in the level

179
00:09:06,487 --> 00:09:08,429
and actually loop them around again.

180
00:09:08,569 --> 00:09:11,172
Because as any level designers in the room might know,

181
00:09:11,532 --> 00:09:13,895
you shouldn't have players backtracking constantly.

182
00:09:14,736 --> 00:09:17,518
So all of the possible doors that we flagged earlier,

183
00:09:17,538 --> 00:09:20,762
now look around and see, are there any possible doors kind of near me?

184
00:09:21,262 --> 00:09:23,644
If so, I have a 50% chance of connecting to you

185
00:09:23,664 --> 00:09:24,724
with an additional bridge.

186
00:09:25,164 --> 00:09:28,426
So you end up with a much better flow, a much more

187
00:09:28,526 --> 00:09:31,708
fun experience to explore, because you're not constantly

188
00:09:31,788 --> 00:09:33,829
going out into the tree and then back again, and then out

189
00:09:33,949 --> 00:09:35,110
in the side path and back again.

190
00:09:36,927 --> 00:09:39,728
So next, the algorithm looks around and says,

191
00:09:39,788 --> 00:09:41,829
OK, well, let's put in some enemies, some treasure,

192
00:09:41,869 --> 00:09:43,170
some items, some story bits.

193
00:09:44,171 --> 00:09:46,392
And it has a similarly built shopping list

194
00:09:46,852 --> 00:09:49,294
that I've defined of possible entities.

195
00:09:50,074 --> 00:09:53,316
So it puts a certain amount of risk and reward,

196
00:09:53,816 --> 00:09:55,157
like little breadcrumbs of treasure,

197
00:09:55,677 --> 00:09:57,278
and smaller enemies along the main path,

198
00:09:57,338 --> 00:09:59,860
and bigger enemies and bigger treasures along the side paths.

199
00:10:00,945 --> 00:10:06,386
And it actually uses the obstacle list here that we generated earlier. Remember the maze

200
00:10:06,446 --> 00:10:11,108
everywhere where it was generating where obstacles were allowed to go? It uses that because enemies

201
00:10:11,168 --> 00:10:17,269
are basically obstacles. You have to be able to get through them at some point to get to the end.

202
00:10:17,509 --> 00:10:22,771
So that's a reuse there of the algorithm's side system.

203
00:10:23,531 --> 00:10:25,673
And finally, after the whole level is built,

204
00:10:25,793 --> 00:10:27,514
it's all living, there's enemies and treasure,

205
00:10:27,534 --> 00:10:28,595
and you're ready to start playing,

206
00:10:29,135 --> 00:10:32,077
it splats a big layer of darkness on top,

207
00:10:32,898 --> 00:10:35,179
and then the player goes around deleting it as he walks.

208
00:10:36,500 --> 00:10:38,421
This simultaneously adds a bit of mystery,

209
00:10:39,042 --> 00:10:40,603
making it feel like maybe there's something

210
00:10:40,643 --> 00:10:42,664
around the corner that the designer has intended for you,

211
00:10:43,425 --> 00:10:46,267
but it also, as a side benefit,

212
00:10:46,667 --> 00:10:48,509
gives the player a sense of where they came from

213
00:10:48,549 --> 00:10:49,389
and where they're going,

214
00:10:49,549 --> 00:10:51,050
because if they haven't been there yet,

215
00:10:51,250 --> 00:10:52,571
then there's darkness in front.

216
00:10:53,152 --> 00:10:59,176
And it kind of allows the player to have a self-directed, strategic exploration of the space.

217
00:10:59,236 --> 00:11:04,259
If they're more of a careful player, they'll use the fog differently than a very bold player or a completionist player.

218
00:11:04,859 --> 00:11:08,641
And it was interesting watching Fafagavore specifically to get those cues.

219
00:11:09,863 --> 00:11:11,304
So the planet has created itself.

220
00:11:11,844 --> 00:11:13,244
We now have an algorithm that will

221
00:11:13,264 --> 00:11:14,645
generate the basic islands.

222
00:11:15,805 --> 00:11:19,506
So the problem at that point is, what should it actually

223
00:11:19,646 --> 00:11:20,847
generate and why?

224
00:11:20,867 --> 00:11:24,028
And that's something the algorithm can't really

225
00:11:24,088 --> 00:11:24,648
help us with.

226
00:11:25,788 --> 00:11:31,210
As the level designer, game designer of Kit Fox, I look at

227
00:11:31,250 --> 00:11:34,411
the tools, and they're just a pile of mad libs.

228
00:11:34,691 --> 00:11:38,012
So I start defining the upper bounds and the lower bounds,

229
00:11:38,052 --> 00:11:39,072
and I start thinking of themes.

230
00:11:40,733 --> 00:11:48,337
I tell it, okay, this is a cold room where there's mushrooms, and it can be about this big, and it can have these kinds of things in it.

231
00:11:49,118 --> 00:11:53,540
And I hope that the algorithm gets it, and I play it a little bit.

232
00:11:54,561 --> 00:11:56,282
And so this is kind of what that looks like.

233
00:11:56,322 --> 00:12:05,347
This is me defining the primary, secondary, transition tiles, potential holes in the geometry, and obstacles, and things like that.

234
00:12:07,814 --> 00:12:13,478
Yeah, so another consideration in picking the minimum and maximum sizes was actually

235
00:12:13,518 --> 00:12:17,301
to think about the theme emotionally of a given level.

236
00:12:17,421 --> 00:12:23,386
So if a level is supposed to be very claustrophobic, that's more of a defensive level because you

237
00:12:23,406 --> 00:12:25,947
have more backing when you're fighting enemies.

238
00:12:25,967 --> 00:12:27,288
You're not going to get surrounded as much.

239
00:12:27,328 --> 00:12:28,729
You can see everything all at once.

240
00:12:29,450 --> 00:12:35,238
smaller rooms are better, whereas we have a place called the Wasteland, which is a much bigger, open,

241
00:12:35,718 --> 00:12:36,539
agoraphobic,

242
00:12:37,400 --> 00:12:40,745
scary place, that's better suited to larger

243
00:12:42,534 --> 00:12:50,039
numbers and the sizes of the islands. So, at some point, we realised that although we wanted to

244
00:12:50,860 --> 00:12:54,883
support various player strategies, there were a few that needed special attention.

245
00:12:55,763 --> 00:12:58,825
One was fire. Everybody loved setting things on fire.

246
00:12:59,846 --> 00:13:02,769
and we wanted to encourage that, but part of the problem was that there wasn't enough

247
00:13:02,909 --> 00:13:08,495
grass everywhere, which was the flammable stuff, and so part of it was actually going

248
00:13:08,515 --> 00:13:13,060
through methodically and thinking about what are exactly all of the strategies that we're

249
00:13:13,100 --> 00:13:15,462
supporting, how exactly are...

250
00:13:16,844 --> 00:13:19,266
are the different island themes supporting this.

251
00:13:19,326 --> 00:13:21,067
So fire is a strategy that's supported,

252
00:13:21,087 --> 00:13:24,190
and the various other things.

253
00:13:24,210 --> 00:13:27,172
We have to make sure that there are enemies and treasure

254
00:13:27,312 --> 00:13:30,035
to be found that suit the way that the player is

255
00:13:30,075 --> 00:13:30,575
trying to play.

256
00:13:30,615 --> 00:13:33,037
And that meant tweaking exactly the content in there.

257
00:13:33,137 --> 00:13:35,639
Even if the algorithm itself remained the same,

258
00:13:35,659 --> 00:13:37,741
a given level will generate very differently,

259
00:13:38,262 --> 00:13:41,104
depending on what strategy it's trying to encourage.

260
00:13:42,859 --> 00:13:49,221
One special shout-out is that we had an explosion effect that everybody wanted instantly, which

261
00:13:49,281 --> 00:13:53,162
was making all of the tiles fall off the face of the earth.

262
00:13:53,182 --> 00:13:55,822
It was exploding, shattering the planet.

263
00:13:55,842 --> 00:13:57,583
It's everybody's fantasy, right?

264
00:13:59,423 --> 00:14:02,064
And then the player would get stuck, and then they weren't as happy.

265
00:14:02,624 --> 00:14:07,845
So we added in a little bit of a caveat there, that if you exploded part of the level that

266
00:14:07,945 --> 00:14:10,486
led to the exit, that...

267
00:14:12,106 --> 00:14:16,610
maze algorithm I mentioned before would kick in, it would path-find between you and the ending,

268
00:14:16,630 --> 00:14:20,673
and it would make sure that particular path cannot get blown up, and instead it exposes

269
00:14:20,713 --> 00:14:26,838
this dynamically generated skeleton of the world, which most players don't even understand exactly

270
00:14:26,898 --> 00:14:31,482
when it's skeleton and when it's not, but it's not letting you get stranded, basically.

271
00:14:33,328 --> 00:14:35,349
So, we were pretty proud of ourselves,

272
00:14:36,110 --> 00:14:38,470
and we were very happy that the game came out

273
00:14:38,530 --> 00:14:40,531
and had 400,000 downloads and whatever,

274
00:14:41,552 --> 00:14:43,412
but there were some problems,

275
00:14:44,072 --> 00:14:45,693
and it's very obvious,

276
00:14:46,033 --> 00:14:48,194
it became very obvious in the last few months of development.

277
00:14:49,014 --> 00:14:53,595
The primary one was actually that a given room had no idea what its purpose was.

278
00:14:54,015 --> 00:14:59,377
It had no idea if it was on the main path, if it was on the critical path, if it was a locked room, if it was a boss room.

279
00:14:59,717 --> 00:15:05,238
There just wasn't any sense in the algorithm of what a room was at all.

280
00:15:05,258 --> 00:15:09,179
It was just geometry that was connected together and painted with a texture and everything I told you about.

281
00:15:10,080 --> 00:15:14,265
And that caused a problem because this is actually a screenshot I just took in the game as I was playing.

282
00:15:14,565 --> 00:15:21,533
And you can see that the key in the door that was supposed to encourage, you know, exploration and risk for reward of go find the key and bring it back to the door and get a reward.

283
00:15:22,434 --> 00:15:25,357
It's non-functional because the key is right next to the door.

284
00:15:25,638 --> 00:15:27,200
Like, why bother?

285
00:15:28,301 --> 00:15:32,343
And meanwhile, although this particular example has crystals floating over there, which is

286
00:15:32,363 --> 00:15:38,188
very exciting, half the time there'd be no treasure on the other side, and that's fun

287
00:15:38,248 --> 00:15:38,848
too, right?

288
00:15:38,868 --> 00:15:38,968
Yeah.

289
00:15:40,309 --> 00:15:45,313
So, if we could go back in time, we would definitely tell ourselves to build in an idea

290
00:15:45,353 --> 00:15:46,293
of what each room is doing.

291
00:15:48,531 --> 00:15:54,415
Another thing that we wished we had done is more of a meta-level design of difficulty.

292
00:15:54,835 --> 00:15:57,777
So we had a ramping difficulty kick in after a certain point,

293
00:15:58,838 --> 00:16:01,140
and it would make it harder and harder and harder,

294
00:16:01,240 --> 00:16:04,282
but it really just kind of felt like a bunch of random stuff

295
00:16:04,362 --> 00:16:06,303
that was sometimes harder and sometimes easier,

296
00:16:07,364 --> 00:16:13,088
whereas a better-designed pacing would have peaks of very difficult fights

297
00:16:13,148 --> 00:16:15,850
and then let you relax a little bit and then build back up and so forth.

298
00:16:16,310 --> 00:16:18,852
that is not a good thing, and that does not do that. And

299
00:16:18,892 --> 00:16:21,954
finally, the number one thing that people complained about,

300
00:16:21,974 --> 00:16:24,956
they said that it was, it felt a little empty, and, to me, I

301
00:16:25,016 --> 00:16:29,819
interpreted that as lacking deep consequences. It lacked any

302
00:16:29,900 --> 00:16:31,441
rooms that were hand-built. It lacked

303
00:16:32,981 --> 00:16:35,322
any kind of sense that things were connected.

304
00:16:36,003 --> 00:16:37,243
And I think that we as humans,

305
00:16:37,283 --> 00:16:38,704
and especially roguelike players,

306
00:16:38,744 --> 00:16:40,364
we're suckers for deep patterns.

307
00:16:40,404 --> 00:16:42,845
We just love making constellations out of nothing.

308
00:16:43,506 --> 00:16:46,927
And it really needed to feed that a little bit more.

309
00:16:47,707 --> 00:16:49,148
And so that's what we're building into our next game,

310
00:16:49,168 --> 00:16:50,048
which is Moon Hunters.

311
00:16:50,368 --> 00:16:52,489
We're building a lot more hand-built content

312
00:16:52,509 --> 00:16:54,550
and completely redoing the procedural generation.

313
00:16:55,491 --> 00:16:57,231
And so now, I will take your questions.

314
00:16:57,251 --> 00:16:57,571
Thank you.

315
00:17:05,349 --> 00:17:10,393
If we have time for a couple quick questions for Tanya before we move on to Dan.

316
00:17:10,853 --> 00:17:15,037
And while we're getting Dan's laptop set up, any questions about Tanya?

317
00:17:15,077 --> 00:17:15,237
Yeah.

318
00:17:15,257 --> 00:17:23,163
So you're making the shift between blue design and then moving towards the tank or what does

319
00:17:24,485 --> 00:17:24,865
that look like?

320
00:17:27,387 --> 00:17:31,951
So the question, just to repeat it for everyone, was as you're making the move from the procedural

321
00:17:31,991 --> 00:17:33,332
to the designer.

322
00:17:34,858 --> 00:17:35,619
The other way around.

323
00:17:35,839 --> 00:17:39,743
From the feel to the mechanics of the procedural generation.

324
00:17:41,044 --> 00:17:43,007
I mean, it's just part of the process for me.

325
00:17:43,387 --> 00:17:45,309
I feel that that's an important part for every designer,

326
00:17:45,389 --> 00:17:47,391
to think about the goal, the vision,

327
00:17:47,772 --> 00:17:50,234
and then break that down into rules.

328
00:17:50,294 --> 00:17:51,716
And the way that we did that was we actually

329
00:17:51,776 --> 00:17:54,159
built a hand-built tutorial level.

330
00:17:54,939 --> 00:17:56,360
and gave it to people and tested it

331
00:17:56,380 --> 00:17:57,181
and made sure we liked it.

332
00:17:57,221 --> 00:17:59,503
And then once we had something we liked, we analyzed it.

333
00:17:59,523 --> 00:18:00,843
And we looked at, okay, well, what are these rules?

334
00:18:01,044 --> 00:18:02,905
I was traditionally trained as a level designer,

335
00:18:02,925 --> 00:18:04,126
so I knew some of it.

336
00:18:04,726 --> 00:18:06,207
But some of it was unique to the game

337
00:18:06,247 --> 00:18:08,249
that we couldn't have known before building that prototype

338
00:18:08,269 --> 00:18:09,970
because it was specific for that game.

339
00:18:10,370 --> 00:18:11,651
So that gave us rules about like,

340
00:18:11,731 --> 00:18:13,132
oh, this is how big that room should be,

341
00:18:13,152 --> 00:18:14,593
and this is how long corridors should be,

342
00:18:14,633 --> 00:18:15,274
and that kind of thing.

343
00:18:15,614 --> 00:18:17,996
And so that helped us build towards code.

344
00:18:19,717 --> 00:18:20,117
You're welcome.

345
00:18:21,078 --> 00:18:22,479
All right, thank you very much, Tanya.

346
00:18:27,980 --> 00:18:31,302
All right, I'm here to introduce next Dan Kassar.

347
00:18:31,662 --> 00:18:33,943
So don't tell anybody, this is a secret,

348
00:18:33,983 --> 00:18:36,504
but we've snuck in a tabletop game designer

349
00:18:36,645 --> 00:18:37,405
into this session.

350
00:18:37,825 --> 00:18:38,986
So, yeah.

351
00:18:39,946 --> 00:18:43,048
So Dan is here to talk about one of his card games

352
00:18:43,068 --> 00:18:45,209
and its drafting mechanic, but the twist is that

353
00:18:45,229 --> 00:18:46,650
he's also a software developer.

354
00:18:46,690 --> 00:18:48,111
So he's also gonna talk a little bit about

355
00:18:48,451 --> 00:18:50,112
some of the digital tools that he created

356
00:18:50,152 --> 00:18:52,994
in order to test and balance his card game

357
00:18:53,014 --> 00:18:53,794
as it was being developed.

358
00:18:53,834 --> 00:18:54,875
So take it away, Dan.

359
00:19:00,961 --> 00:19:01,461
Thank you, Eric.

360
00:19:08,523 --> 00:19:09,843
Hi, I'm Dan Kassar.

361
00:19:10,224 --> 00:19:12,684
I'm a tabletop game designer, originally from New York,

362
00:19:12,804 --> 00:19:13,885
now based in Philadelphia.

363
00:19:13,905 --> 00:19:16,565
And I'm going to be talking about how I use digital tools

364
00:19:16,765 --> 00:19:19,546
to help me balance the Rochester draft in Cavemen,

365
00:19:19,566 --> 00:19:20,306
the Quest for Fire.

366
00:19:22,047 --> 00:19:24,368
Drafting is one of the most fundamental game mechanics

367
00:19:24,428 --> 00:19:24,708
out there.

368
00:19:25,988 --> 00:19:28,209
After all, we all remember picking teams for kickball

369
00:19:28,229 --> 00:19:28,789
in the schoolyard.

370
00:19:29,593 --> 00:19:31,034
But in the world of modern board games,

371
00:19:31,354 --> 00:19:32,675
when people talk about drafting,

372
00:19:33,156 --> 00:19:35,757
what they usually mean is a particular kind of card drafting

373
00:19:35,917 --> 00:19:37,518
that I call pick and pass.

374
00:19:38,579 --> 00:19:39,459
The way it works is this.

375
00:19:40,240 --> 00:19:41,780
Each player is given a hand of cards.

376
00:19:42,301 --> 00:19:43,982
He selects one card from his hand

377
00:19:44,422 --> 00:19:46,083
and then passes the remainder to his left,

378
00:19:46,663 --> 00:19:49,205
simultaneously receiving a new hand

379
00:19:49,345 --> 00:19:50,345
from his neighbor on the right.

380
00:19:51,286 --> 00:19:53,927
Again, players pick one of the cards for themselves

381
00:19:54,368 --> 00:19:55,388
and continue to pass them on.

382
00:19:56,827 --> 00:19:59,248
I think it's safe to say that the prominence of this approach

383
00:19:59,528 --> 00:20:01,209
probably came from Magic the Gathering

384
00:20:01,609 --> 00:20:03,490
and its booster draft tournament format,

385
00:20:03,950 --> 00:20:05,731
where instead of building a deck beforehand,

386
00:20:06,691 --> 00:20:08,952
it makes deck construction part of the tournament itself.

387
00:20:09,833 --> 00:20:11,474
Each participant is given a booster pack.

388
00:20:11,934 --> 00:20:14,155
Players each open their pack, select a card,

389
00:20:14,655 --> 00:20:15,996
and then pass the remaining cards.

390
00:20:18,031 --> 00:20:20,993
Antoine Bausa proved how successful this mechanic could be

391
00:20:21,274 --> 00:20:23,495
when he won the prestigious Kenne Spiel des Jahres,

392
00:20:23,896 --> 00:20:26,818
the German Expert Game of the Year Award,

393
00:20:27,118 --> 00:20:28,679
in 2011 for his game Seven Wonders,

394
00:20:29,140 --> 00:20:32,082
which is entirely based on the pick-and-pass draft mechanic.

395
00:20:33,864 --> 00:20:35,725
But I remember some time in the early 90s,

396
00:20:36,145 --> 00:20:38,607
I saw a group of players at a local game store

397
00:20:38,828 --> 00:20:41,249
drafting Magic cards in a way that I hadn't seen before.

398
00:20:42,085 --> 00:20:45,408
Instead of opening one pack per player and passing the cards,

399
00:20:45,889 --> 00:20:47,390
they would open a single booster,

400
00:20:47,850 --> 00:20:49,412
spread the cards face up on the table,

401
00:20:49,832 --> 00:20:51,914
and then players would take turns making their picks.

402
00:20:53,355 --> 00:20:55,617
I later learned that this was called a Rochester draft,

403
00:20:55,937 --> 00:20:57,459
named for the city in western New York,

404
00:20:58,019 --> 00:20:59,841
where the format is supposed to have originated.

405
00:21:00,581 --> 00:21:02,703
Widely regarded among serious magic players

406
00:21:02,823 --> 00:21:05,586
as the drafting format that requires the most skillful play,

407
00:21:06,126 --> 00:21:09,089
an open draft plays quite differently from pick and pass.

408
00:21:10,520 --> 00:21:12,241
It turns cards into chess.

409
00:21:12,982 --> 00:21:15,144
It challenges a player to make the best decision

410
00:21:15,505 --> 00:21:16,986
based on what he has already chosen

411
00:21:17,306 --> 00:21:19,008
and what he has seen the other players select.

412
00:21:19,789 --> 00:21:21,510
Turn order becomes all important

413
00:21:21,851 --> 00:21:24,013
and counter drafting becomes a much greater factor.

414
00:21:24,553 --> 00:21:26,175
Because there's no hidden information,

415
00:21:26,455 --> 00:21:28,057
you can choose to thwart an opponent

416
00:21:28,457 --> 00:21:30,499
by denying him a card that he needs,

417
00:21:30,799 --> 00:21:32,641
but only if you're willing to sacrifice

418
00:21:32,761 --> 00:21:33,722
one of your picks to do it.

419
00:21:35,208 --> 00:21:39,769
Cavemen the Quest for Fire is a card drafting game I designed based on the Rochester draft

420
00:21:39,949 --> 00:21:46,610
that was published by Rio Grande Games in 2012. Players bid for turn order before drafting

421
00:21:46,650 --> 00:21:51,531
cards to contribute to their tableau that represents their tribe. Combining an open

422
00:21:51,571 --> 00:21:56,312
draft with an auction creates a game experience that can be highly competitive without the

423
00:21:56,352 --> 00:22:04,293
need for direct conflict. Players take the role of tribal leaders and compete for scarce

424
00:22:04,353 --> 00:22:04,853
resources.

425
00:22:06,804 --> 00:22:08,065
such as dinosaurs to hunt,

426
00:22:09,906 --> 00:22:10,987
cavemen to recruit,

427
00:22:12,868 --> 00:22:14,008
and inventions to discover,

428
00:22:16,150 --> 00:22:17,991
vying to be the first to invent fire.

429
00:22:19,872 --> 00:22:21,333
Gameplay is organized as follows.

430
00:22:22,794 --> 00:22:23,254
Each turn,

431
00:22:24,735 --> 00:22:27,216
a number of cards are drawn face up into a common card pool.

432
00:22:28,477 --> 00:22:30,178
Then the players use teeth,

433
00:22:30,578 --> 00:22:32,520
representing prestige amongst the tribes,

434
00:22:33,060 --> 00:22:35,481
to bid for the conch, which is the first player token.

435
00:22:36,862 --> 00:22:41,006
After the bid, players pay food for the cavemen in their tribe to keep everyone alive.

436
00:22:42,608 --> 00:22:47,213
Then starting with the conch holder and proceeding clockwise around the table, players take actions

437
00:22:47,294 --> 00:22:52,680
that allow them to draft cards from the pool, and then some of the remaining cards are discarded

438
00:22:52,980 --> 00:22:54,682
and the pools replenish for another round.

439
00:22:56,312 --> 00:22:59,136
So the challenge was how to achieve cost and reward curves

440
00:22:59,416 --> 00:23:01,639
that not only kept the pace of the game moving forward,

441
00:23:02,000 --> 00:23:04,142
but also created opportunities for players

442
00:23:04,162 --> 00:23:07,266
to compete meaningfully in a game that used resource denial

443
00:23:07,547 --> 00:23:09,549
as its primary means of player aggression.

444
00:23:10,330 --> 00:23:12,213
For example, suppose we're early on

445
00:23:12,253 --> 00:23:13,214
in a game with three players.

446
00:23:15,286 --> 00:23:19,029
Abe has the conch at the start of the round, and if no one bids, he will go first.

447
00:23:19,629 --> 00:23:21,490
He's trying a technology-focused strategy.

448
00:23:22,051 --> 00:23:25,753
Since invention is the way to win the game, it's very efficient, but it can be hard to

449
00:23:25,814 --> 00:23:28,455
keep your tribe fed, and starvation can ruin your plans.

450
00:23:29,916 --> 00:23:31,197
Brenda sits to Abe's left.

451
00:23:32,038 --> 00:23:34,420
She's trying to pursue a strategy that relies on foraging.

452
00:23:34,880 --> 00:23:39,683
It's a slower but safer strategy than hunting, and also gives her the freedom to go after

453
00:23:39,723 --> 00:23:40,444
certain inventions.

454
00:23:41,750 --> 00:23:42,791
Chris is the third player.

455
00:23:43,231 --> 00:23:44,932
He's pursuing a hunter-based strategy

456
00:23:44,992 --> 00:23:47,693
that ensures that his tribe will be well-fed.

457
00:23:48,673 --> 00:23:50,233
But it might be hard for him to compete

458
00:23:50,273 --> 00:23:52,134
for special abilities later on in the game.

459
00:23:56,316 --> 00:23:59,957
In this spread, the most interesting card is this one.

460
00:24:01,678 --> 00:24:04,379
Baskets, which is an invention that grants its owner

461
00:24:04,919 --> 00:24:06,860
a considerable bonus to their foraging score.

462
00:24:08,996 --> 00:24:12,057
Obviously, any of the players would derive a benefit from this card.

463
00:24:12,677 --> 00:24:15,858
But Brenda will benefit most, since it suits her strategy best.

464
00:24:18,338 --> 00:24:21,759
Abe bids first, since he starts with the conch, but he decides to pass,

465
00:24:22,459 --> 00:24:25,300
since he thinks that the other players will bid, and in Cavemen,

466
00:24:25,740 --> 00:24:27,401
you are allowed to jump back into an auction,

467
00:24:27,581 --> 00:24:29,161
even if you passed in an earlier round.

468
00:24:31,262 --> 00:24:34,903
Brenda also passes, because she's betting Abe won't draft the card that she wants.

469
00:24:36,614 --> 00:24:40,016
Chris decides he can't take a chance, and he bids two teeth to gain the conch.

470
00:24:40,397 --> 00:24:43,439
He wins the auction and drafts baskets so that Brenda can't get it.

471
00:24:44,860 --> 00:24:46,961
Moments like this are where the fun of the game really come from,

472
00:24:47,261 --> 00:24:52,064
and they require a number of conditions to be met in order for those situations to emerge.

473
00:24:52,845 --> 00:24:57,448
To create that tension, players need to have both the desire and the ability to be in the bidding.

474
00:24:57,888 --> 00:25:03,572
And in Cavemen, that means having sufficient total skill to make use of the card in question.

475
00:25:04,592 --> 00:25:08,234
as well as enough teeth to make it worthwhile to participate in the auction.

476
00:25:09,715 --> 00:25:13,878
In order to achieve this balance, I went through a huge number of evolutions of the deck

477
00:25:14,278 --> 00:25:16,079
before settling on the one that made it to print.

478
00:25:16,500 --> 00:25:20,002
And I was only able to manage that complexity with the help of technology.

479
00:25:22,042 --> 00:25:24,985
I started writing code on my Commodore 64 when I was 8 years old.

480
00:25:25,765 --> 00:25:28,408
And I've been writing software professionally for the last 15 years.

481
00:25:28,929 --> 00:25:33,253
So I suppose it's almost second nature that for me to record the information related to

482
00:25:33,293 --> 00:25:36,997
my games, be they analog or digital, in a computer readable format.

483
00:25:38,278 --> 00:25:42,463
I chose to use a form of loosely structured data called XML to represent the dead.

484
00:25:43,840 --> 00:25:46,180
XML, extensible markup language,

485
00:25:46,620 --> 00:25:49,241
was designed to be both human and machine readable

486
00:25:49,681 --> 00:25:51,241
and to permit evolution over time.

487
00:25:52,041 --> 00:25:53,982
Data elements are represented as tags

488
00:25:54,142 --> 00:25:57,622
with names and values that you can expand on arbitrarily

489
00:25:57,662 --> 00:25:58,383
to suit your needs.

490
00:25:59,223 --> 00:26:00,543
Since the data was human readable,

491
00:26:00,963 --> 00:26:02,803
I could work with it without any special tools,

492
00:26:03,204 --> 00:26:05,044
just a text editor like Windows Notepad,

493
00:26:05,484 --> 00:26:07,704
and it allowed me to quickly add and remove cards.

494
00:26:08,505 --> 00:26:09,725
And since it was machine readable,

495
00:26:10,025 --> 00:26:11,745
I could use it for all sorts of automation.

496
00:26:13,035 --> 00:26:15,956
from printing my prototype decks to running scripts

497
00:26:16,016 --> 00:26:17,717
that exercise different play scenarios.

498
00:26:18,617 --> 00:26:21,139
Over time, however, editing the document by hand

499
00:26:21,199 --> 00:26:24,660
became a cumbersome, and importing the data into Excel,

500
00:26:24,780 --> 00:26:27,362
while helpful, was a tedious manual process.

501
00:26:28,542 --> 00:26:30,343
So instead, I developed a piece of software

502
00:26:30,403 --> 00:26:33,445
that worked much like Excel, but used my XML document

503
00:26:33,565 --> 00:26:36,086
as its data source and would save a copy of the document

504
00:26:36,226 --> 00:26:37,207
every time I made a change.

505
00:26:37,807 --> 00:26:39,548
This offered a number of key advantages.

506
00:26:41,537 --> 00:26:46,238
For one thing, this automatic version tracking ensured that I never lost any of my ideas.

507
00:26:46,939 --> 00:26:48,780
I could always go back to a previous revision.

508
00:26:49,740 --> 00:26:51,941
Over the two and a half years I spent working on the game,

509
00:26:52,381 --> 00:26:54,982
I created more than 450 versions of the deck.

510
00:26:55,862 --> 00:26:58,003
Sometimes they worked, but more often they didn't.

511
00:26:58,664 --> 00:27:01,005
If I decided I didn't like the direction things were going in,

512
00:27:01,505 --> 00:27:03,405
I could simply go back through the history of the data

513
00:27:03,886 --> 00:27:05,927
and carry on from an earlier version.

514
00:27:09,727 --> 00:27:13,049
Additionally, the flexibility that I had in adding and removing fields

515
00:27:13,349 --> 00:27:15,330
allowed me the freedom to discover over time

516
00:27:15,690 --> 00:27:18,271
what data was important to track and what was not.

517
00:27:19,071 --> 00:27:21,713
As I conducted playtesting, I went back to my document

518
00:27:21,913 --> 00:27:23,453
and tried to incorporate what I learned.

519
00:27:24,645 --> 00:27:26,487
Sometimes I needed to tweak a cost.

520
00:27:27,067 --> 00:27:29,090
Sometimes I wanted to change the wording on a card.

521
00:27:29,750 --> 00:27:32,133
But just as often, I was trying to capture data

522
00:27:32,253 --> 00:27:35,416
that was beyond just what appeared on the physical card.

523
00:27:36,097 --> 00:27:39,140
I wanted data about how that card affected gameplay overall.

524
00:27:39,621 --> 00:27:41,823
I wanted to understand how each card fit in,

525
00:27:42,304 --> 00:27:44,746
at which players selected them, and at what time.

526
00:27:46,410 --> 00:27:48,332
Since there was no strict structure to the data,

527
00:27:48,773 --> 00:27:50,494
I could make up new fields as I went along,

528
00:27:50,935 --> 00:27:53,097
and I could remove them later without causing problems

529
00:27:53,177 --> 00:27:54,639
if the information didn't prove valuable.

530
00:27:55,319 --> 00:27:57,521
This allowed me to incorporate playtesting metadata

531
00:27:57,581 --> 00:27:59,483
directly alongside my card data,

532
00:28:00,024 --> 00:28:02,146
so that I could then edit and analyze all of it

533
00:28:02,246 --> 00:28:03,127
using the same tool.

534
00:28:03,948 --> 00:28:06,671
And this was how I identified the three core strategies

535
00:28:06,731 --> 00:28:08,092
that players generally followed.

536
00:28:08,962 --> 00:28:13,825
I noted the number of cavemen that a player had and of which types at the time that an

537
00:28:13,885 --> 00:28:17,527
invention was taken and over time, certain patterns started to emerge.

538
00:28:20,389 --> 00:28:25,053
The hunter strategy was characterized by selecting additional hunters early and gaining an advantage

539
00:28:25,093 --> 00:28:25,893
in food and teeth.

540
00:28:26,854 --> 00:28:30,256
It's straightforward and effective, but it means that the player cannot leverage many

541
00:28:30,296 --> 00:28:31,857
of the higher cost inventions in the game.

542
00:28:34,228 --> 00:28:37,730
The inventor strategy usually meant taking a thinker as your first recruit

543
00:28:38,070 --> 00:28:40,031
and then carefully managing your food supply

544
00:28:40,292 --> 00:28:42,613
while amassing inventions that only you could use.

545
00:28:43,554 --> 00:28:44,934
It has the advantage of being efficient,

546
00:28:45,115 --> 00:28:46,756
but thinkers can't help you feed your tribe,

547
00:28:47,056 --> 00:28:48,497
so food often becomes a problem.

548
00:28:50,278 --> 00:28:53,980
The elder strategy focuses on foraging as a safe food supply

549
00:28:54,340 --> 00:28:58,263
and can be dominant if it manages to acquire one of the few key inventions

550
00:28:58,543 --> 00:28:59,664
that help it gain teeth

551
00:28:59,964 --> 00:29:02,465
so that they can compete for fire at the end of the game.

552
00:29:05,051 --> 00:29:08,717
Once I had made that discovery, I started including the strategies in my data.

553
00:29:09,097 --> 00:29:12,883
When I designed a card, I would tag it with the strategy I was gearing it towards.

554
00:29:13,424 --> 00:29:18,973
And then after playtesting, I would add additional information about the strategy being used by the player who drafted it.

555
00:29:19,726 --> 00:29:23,809
This helped by not only making sure that the cards were doing what I designed them to do,

556
00:29:24,370 --> 00:29:28,833
but also helped me make sure that I could easily see how many of the cards I had intended

557
00:29:29,154 --> 00:29:30,975
to help each of the three major strategies.

558
00:29:31,616 --> 00:29:37,060
If I added or removed cards, I could make sure that the strategies remained relatively equally supported.

559
00:29:38,521 --> 00:29:44,346
I remember one time in particular where my playtesting data showed its value in an unexpected way.

560
00:29:46,152 --> 00:29:49,074
I had been taking the game to designer meetups for playtesting sessions,

561
00:29:49,395 --> 00:29:51,056
and the game was generally well-received.

562
00:29:51,496 --> 00:29:54,438
But there were a number of questions about the balance of the inventions in the game.

563
00:29:55,039 --> 00:29:58,241
So, I had been steadily tweaking costs and swapping out cards,

564
00:29:58,602 --> 00:30:00,343
and gradually, a strange thing happened.

565
00:30:00,943 --> 00:30:02,625
Players had stopped engaging in the auction.

566
00:30:03,810 --> 00:30:07,615
Everyone was content to simply let the conch pass around the table and take what they could.

567
00:30:08,496 --> 00:30:13,662
At first I thought this was some sort of anomaly or something particular to the way the cards had been drawn.

568
00:30:13,882 --> 00:30:21,291
So I kept going the way I was going, trying to achieve a perfect balance between costs and benefits for the inventions relative to one another.

569
00:30:22,798 --> 00:30:25,320
But looking back over successive versions of the data,

570
00:30:25,840 --> 00:30:28,302
I saw that during the process of balancing

571
00:30:28,342 --> 00:30:31,544
the invention costs, I had gradually increased the cost

572
00:30:31,584 --> 00:30:32,925
for the most useful inventions,

573
00:30:33,585 --> 00:30:35,166
thus putting them further out of reach

574
00:30:35,246 --> 00:30:36,907
for more players for more of the game.

575
00:30:37,728 --> 00:30:39,709
As a result, all the tension was gone.

576
00:30:40,430 --> 00:30:43,832
Somehow, more balanced costs killed contention.

577
00:30:45,093 --> 00:30:47,534
That's when I realized that in order to make the game fun,

578
00:30:48,094 --> 00:30:49,956
I had to create sufficient opportunities

579
00:30:49,996 --> 00:30:50,956
for players to compete.

580
00:30:51,805 --> 00:30:54,127
Leveraging the data that I had gleaned from playtesting,

581
00:30:54,468 --> 00:30:57,831
I identified inventions that were suited to multiple strategies.

582
00:30:58,371 --> 00:31:01,974
Then, I made those inventions intentionally under-costed

583
00:31:02,235 --> 00:31:04,857
so that players would bid for the opportunity to draft them.

584
00:31:06,739 --> 00:31:11,223
For example, the Feast Card allows a player to convert food into teeth.

585
00:31:11,983 --> 00:31:14,225
This, of course, only works if you have enough food to spare,

586
00:31:14,305 --> 00:31:15,787
so it's not suitable for a player...

587
00:31:16,777 --> 00:31:21,002
focus solely on invention, but it does work well for other players that can gain a surplus

588
00:31:21,022 --> 00:31:25,146
through hunting or foraging. If it appears late game, this is a card that is intended

589
00:31:25,166 --> 00:31:29,170
to be bid over because it's mathematically superior to all other ways of gaining teeth

590
00:31:29,210 --> 00:31:29,611
in the game.

591
00:31:31,745 --> 00:31:35,990
Similarly, medicinal herbs greatly reduces the chances that you will incur losses when

592
00:31:36,010 --> 00:31:36,611
you go hunting.

593
00:31:37,091 --> 00:31:41,616
This works well for both hunters and inventors because both of those strategies rely on hunting

594
00:31:41,656 --> 00:31:42,297
to gain food.

595
00:31:42,957 --> 00:31:47,562
It's got the lowest possible cost, so anyone can take it, and it's more useful than many

596
00:31:47,662 --> 00:31:49,504
other cards at the two and three cost levels.

597
00:31:49,885 --> 00:31:51,927
So this encourages players to compete over it.

598
00:31:54,385 --> 00:31:56,726
Tabletop designers may not always think about the ways

599
00:31:56,746 --> 00:31:58,827
they can leverage technology to help them enrich

600
00:31:58,847 --> 00:31:59,947
an analog experience.

601
00:32:00,647 --> 00:32:03,528
Balancing a set of cards can be a tremendously tedious task.

602
00:32:04,028 --> 00:32:06,249
A single design decision can cause changes

603
00:32:06,349 --> 00:32:08,109
that ripple throughout the entire deck

604
00:32:08,590 --> 00:32:10,730
as cost curves shift and card counts

605
00:32:10,750 --> 00:32:11,650
are thrown out of balance.

606
00:32:12,191 --> 00:32:13,951
Having software to make this more manageable

607
00:32:14,451 --> 00:32:15,972
encouraged me to take more chances,

608
00:32:16,392 --> 00:32:19,593
make bigger changes, and ultimately led to a better design.

609
00:32:29,988 --> 00:32:33,734
Dan, it's a crime that you're not working in the digital game industry.

610
00:32:34,214 --> 00:32:35,356
I think we have a question over here.

611
00:32:35,656 --> 00:32:35,936
Sure.

612
00:32:36,397 --> 00:32:36,537
So...

613
00:32:37,324 --> 00:32:39,904
First of all, yeah, the tool is excellent.

614
00:32:40,565 --> 00:32:43,886
I built something similar, but I was using Google Spreadsheets,

615
00:32:43,926 --> 00:32:44,966
which does a lot of this stuff.

616
00:32:45,346 --> 00:32:49,367
But what I found was, and you can export things, export XML,

617
00:32:49,888 --> 00:32:51,928
you can do the revision history.

618
00:32:52,308 --> 00:32:55,009
But what I found difficult was figuring out a way

619
00:32:55,089 --> 00:32:57,530
to actually visually display these cards.

620
00:32:58,090 --> 00:33:01,391
I used HTML, but it's really hard to get that to print properly.

621
00:33:01,411 --> 00:33:05,533
I'm just wondering what kind of tool you built or used for that display.

622
00:33:06,340 --> 00:33:08,541
Yeah, that's a problem that I worked on.

623
00:33:08,942 --> 00:33:10,923
I went through a few iterations on that.

624
00:33:12,143 --> 00:33:16,805
First, I tried SVG, which turned out to be really difficult.

625
00:33:17,546 --> 00:33:18,246
Don't recommend that.

626
00:33:19,166 --> 00:33:23,849
So I tried using my second, more successful attempt.

627
00:33:24,229 --> 00:33:26,570
I leveraged an external tool called NANDEC.

628
00:33:27,170 --> 00:33:28,411
If you're a tabletop game designer,

629
00:33:28,451 --> 00:33:29,251
you might know this one.

630
00:33:29,711 --> 00:33:31,052
It's actually.

631
00:33:31,632 --> 00:33:38,475
scripting software that you write code to generate your cards. So out of my tool I would generate a

632
00:33:38,535 --> 00:33:44,398
script for Nandeck so I could leverage it to generate my cards and print them. So that worked a

633
00:33:44,438 --> 00:33:52,682
lot better. So whenever I'm building tools for a game, I'm thinking always about how I'm not

634
00:33:52,722 --> 00:33:57,964
spending time making my game. I was wondering if you measured the amount of time you invested in

635
00:33:57,984 --> 00:34:01,125
your tool because it seems like all of your work is spent on your tool. So I'm wondering if

636
00:34:01,963 --> 00:34:07,167
Like, with a video game usually when you work on your editor you're also like salvaging some of that technology for your game,

637
00:34:07,207 --> 00:34:10,509
but it seems like in this case there's absolutely no overlap.

638
00:34:10,789 --> 00:34:13,691
Perfect test case for the tool has, yeah, nothing to do with the production.

639
00:34:13,731 --> 00:34:13,871
Right.

640
00:34:14,471 --> 00:34:19,935
And was there anything that you did to like make sure that the features you were adding were paying off on like an individual basis?

641
00:34:19,955 --> 00:34:26,859
Because obviously the tool paid off, but there were a lot of like, you know, seems like luxury, quality of life stuff in your tool.

642
00:34:27,119 --> 00:34:28,680
Did that work out well?

643
00:34:30,472 --> 00:34:33,392
Yeah, I would say that without the benefit of the tool,

644
00:34:33,412 --> 00:34:37,873
I wouldn't be able to surface the same data that I

645
00:34:37,914 --> 00:34:39,314
was able to see with it.

646
00:34:40,514 --> 00:34:43,535
It was kind of the thing that started as a hobby project,

647
00:34:43,575 --> 00:34:44,395
started very small.

648
00:34:44,675 --> 00:34:47,796
Like I said, I was originally just tweaking the XML

649
00:34:47,976 --> 00:34:49,016
by hand in Notepad.

650
00:34:50,057 --> 00:34:51,897
And then I was like, well, I'm a programmer.

651
00:34:51,957 --> 00:34:53,077
I can do better than this.

652
00:34:53,157 --> 00:34:53,958
And so I did.

653
00:34:54,818 --> 00:34:56,558
And, you know, it evolved over time.

654
00:34:57,098 --> 00:34:59,459
No, I never measured how much time I actually spent on it.

655
00:34:59,519 --> 00:35:02,160
Like I said, it was kind of, you know, grew up with the game.

656
00:35:03,140 --> 00:35:05,020
Over time, I just added more and more features.

657
00:35:06,101 --> 00:35:09,281
And as I said, I spent years working on the game.

658
00:35:09,341 --> 00:35:11,222
So it was...

659
00:35:12,322 --> 00:35:15,003
I never really paid attention to, you know, how much time it was.

660
00:35:15,023 --> 00:35:17,963
I don't... Because it was fairly generic,

661
00:35:18,083 --> 00:35:19,664
I didn't feel like it was wasted time

662
00:35:19,724 --> 00:35:22,644
because I am using it for future games as well.

663
00:35:23,225 --> 00:35:23,385
Cool.

664
00:35:23,703 --> 00:35:23,843
Thanks.

665
00:35:23,963 --> 00:35:24,183
Thanks.

666
00:35:24,363 --> 00:35:25,364
Let's take one more for Dan.

667
00:35:25,544 --> 00:35:25,844
Thank you.

668
00:35:26,545 --> 00:35:30,808
How much of the analytics stuff you got was out of the running

669
00:35:31,088 --> 00:35:33,149
your, you mentioned software to run games

670
00:35:33,249 --> 00:35:34,310
following certain strategies.

671
00:35:34,650 --> 00:35:37,933
How much would you say came from that versus how much you

672
00:35:37,973 --> 00:35:42,716
got from watching and I presume recording human play sessions?

673
00:35:42,756 --> 00:35:45,258
Did you record those and feed it back into analytics?

674
00:35:46,252 --> 00:35:49,534
I recorded it in that I watched and then put the data back in.

675
00:35:50,834 --> 00:35:54,977
And so I did do a certain amount of scripting and automation.

676
00:35:55,117 --> 00:35:57,618
And what that allowed me to do, what that was generally to do

677
00:35:57,678 --> 00:35:59,440
was to just run algorithms to check my math.

678
00:36:00,160 --> 00:36:02,121
Once I was comfortable with that,

679
00:36:02,501 --> 00:36:04,402
then it was pretty much all hand play testing

680
00:36:04,442 --> 00:36:06,023
that gave me the best results.

681
00:36:06,764 --> 00:36:07,044
Thank you.

682
00:36:07,464 --> 00:36:07,724
All right.

683
00:36:07,904 --> 00:36:08,545
Thank you, Dan.

684
00:36:08,645 --> 00:36:08,985
Thank you.

685
00:36:14,208 --> 00:36:14,528
Thank you.

686
00:36:15,687 --> 00:36:21,652
One of the funny things about games is that games and game designers are kind of like dogs, right?

687
00:36:21,672 --> 00:36:31,219
I mean, as a species, you would never guess that, like, some strange little thing that looks like a shaved rat is also this...

688
00:36:31,616 --> 00:36:35,899
the same, same species as a sort of huge, giant, hairy bear of a dog, right?

689
00:36:35,939 --> 00:36:39,202
That is like ten times as large and looks like it's from a different planet.

690
00:36:39,582 --> 00:36:44,185
So what's amazing about the, the, the designers that we have for you today is that they're

691
00:36:44,225 --> 00:36:44,786
so different.

692
00:36:45,666 --> 00:36:49,709
And it's, it's my pleasure to introduce Bennett Foddy, who's going to give you a completely

693
00:36:49,789 --> 00:36:51,451
different kind of case study.

694
00:36:52,271 --> 00:36:57,835
He's here to talk today about real-time physics in, in his game Super Pole Riders.

695
00:36:58,295 --> 00:37:03,219
Bennett is a legendary indie game designer, best known for QWOP.

696
00:37:03,299 --> 00:37:07,181
He's also a professor at the NYU Game Center, where I also teach.

697
00:37:07,442 --> 00:37:08,662
Let's give it up for Bennett Foddy!

698
00:37:08,682 --> 00:37:15,547
APPLAUSE

699
00:37:15,567 --> 00:37:15,987
Thanks, Eric.

700
00:37:18,507 --> 00:37:22,011
So Super Pole Riders is a game of pole vaulting polo.

701
00:37:22,091 --> 00:37:25,855
It's part of a compilation of four local multiplayer games

702
00:37:26,055 --> 00:37:29,799
called Sports Friends, which is out for PCs and PlayStations.

703
00:37:30,643 --> 00:37:33,566
So the basic idea of Super Pole Riders is that players

704
00:37:34,106 --> 00:37:38,210
traverse an arena primarily by vaulting up on a pole vault pole,

705
00:37:38,690 --> 00:37:41,252
which allows them to kick a ball that's suspended on a wire

706
00:37:42,013 --> 00:37:43,655
towards a goal and score points, right?

707
00:37:43,695 --> 00:37:45,536
So that's the basic layout of the game.

708
00:37:46,077 --> 00:37:50,341
And what I'm going to talk about today is how I designed the input scheme for the pole,

709
00:37:50,681 --> 00:37:53,263
the pole pointing mechanics.

710
00:37:55,533 --> 00:38:01,237
The game itself is a gamepad redesign of an older Flash game I made called Pole Riders.

711
00:38:01,677 --> 00:38:04,519
A game that I thought had some pretty bad design flaws.

712
00:38:04,599 --> 00:38:05,720
I was really unhappy with.

713
00:38:05,740 --> 00:38:08,922
The original game is a browser game.

714
00:38:08,942 --> 00:38:12,665
So you're using digital keys to control the pole.

715
00:38:13,065 --> 00:38:15,867
And the way that works is you can only rotate the pole

716
00:38:16,608 --> 00:38:20,111
towards pointing up with the up key or towards pointing down with the down key.

717
00:38:20,831 --> 00:38:27,263
And it moves really slowly and I think inaccurately and it feels unresponsive and very loose,

718
00:38:27,443 --> 00:38:30,448
which is funny but not very fun.

719
00:38:32,942 --> 00:38:39,446
And I also had this really serious problem, which was that people were blocking the goal with their poles.

720
00:38:40,547 --> 00:38:44,449
And, you know, this is super embarrassing to admit in front of a crowd like this,

721
00:38:44,569 --> 00:38:49,452
but my attempt to solve it was that I made the defending player have really weak arms

722
00:38:49,532 --> 00:38:52,774
if he was standing near his own goal, so he couldn't lift up his pole very well.

723
00:38:53,535 --> 00:38:56,138
uh... which you can imagine not a very good solution doesn't work anyway

724
00:38:56,158 --> 00:38:59,802
because you can kind of like run towards the wall and get it wedged up there and

725
00:38:59,823 --> 00:39:03,006
then the other person can't score a goal. So I was really unhappy with that as well.

726
00:39:05,069 --> 00:39:08,971
And I came to see all of those problems as stemming from a kind of a central conflict

727
00:39:09,431 --> 00:39:15,855
between the design goals of real-time input schemes, input schemes for real-time games,

728
00:39:16,335 --> 00:39:19,517
and the technical limitations when you're using a physics engine for your games.

729
00:39:19,597 --> 00:39:26,260
So in real-time games, there is this thing that you want, which is a really tight correspondence

730
00:39:26,300 --> 00:39:27,621
between the control surface.

731
00:39:28,101 --> 00:39:30,922
and the controlled object. So the classic example would be

732
00:39:31,142 --> 00:39:34,763
in Super Mario Brothers, your character is basically instantly in the air when you

733
00:39:34,803 --> 00:39:35,623
hit the jump button.

734
00:39:36,564 --> 00:39:38,964
And, you know, what's more of a kind of a

735
00:39:39,365 --> 00:39:44,546
apropos example is really the design touchstone for my game is the arcade game

736
00:39:44,846 --> 00:39:45,947
720 Degrees, the old Atari game,

737
00:39:47,567 --> 00:39:50,668
which has a special joystick called a spinner, which is a joystick

738
00:39:50,688 --> 00:39:52,969
that's constrained to the edge of a circle. So you can see

739
00:39:53,409 --> 00:39:55,430
you're only able to move it around the edge of the circle.

740
00:39:57,749 --> 00:40:00,311
And then what it does is it makes the skateboard always

741
00:40:00,371 --> 00:40:03,553
point exactly where the spinner is pointing, no matter what.

742
00:40:03,613 --> 00:40:05,734
So there is this one-to-one correspondence

743
00:40:05,835 --> 00:40:08,016
between the position of the joystick

744
00:40:08,696 --> 00:40:11,138
and the position of the skateboard in the digital realm.

745
00:40:11,158 --> 00:40:16,842
And by contrast, games that have fully dynamic physics

746
00:40:16,922 --> 00:40:18,783
engines, which we're starting to see more and more of,

747
00:40:19,623 --> 00:40:21,865
typically use indirect controls that

748
00:40:21,925 --> 00:40:24,587
have a very weak correspondence between the input

749
00:40:24,607 --> 00:40:26,288
surface and the game.

750
00:40:26,668 --> 00:40:26,888
Because

751
00:40:27,469 --> 00:40:31,751
At an engine level, you can't manipulate things in the same absolute direct way

752
00:40:32,212 --> 00:40:33,312
without risking glitches.

753
00:40:33,372 --> 00:40:35,334
So, for example, this is Angry Birds.

754
00:40:35,634 --> 00:40:38,796
In Angry Birds, what you do is you pull back on an invisible spring

755
00:40:38,836 --> 00:40:40,817
which attracts the bird towards your finger

756
00:40:41,758 --> 00:40:44,120
without it mattering whether or not the spring

757
00:40:44,580 --> 00:40:46,041
can get the bird all the way to your finger.

758
00:40:46,081 --> 00:40:46,321
In fact...

759
00:40:47,162 --> 00:40:50,687
If you made it so that the bird stuck absolutely to your finger's position,

760
00:40:51,027 --> 00:40:53,691
you'd get glitches if you put your finger over the ground, for example.

761
00:40:53,871 --> 00:40:57,176
The physics engine wouldn't know what to do and you'd get flaws and glitches.

762
00:40:59,285 --> 00:41:02,186
Or in Lander, you're applying this gentle thrust

763
00:41:02,307 --> 00:41:06,568
to a moving object with this thrust control

764
00:41:07,609 --> 00:41:09,629
to gradually alter its velocity.

765
00:41:09,729 --> 00:41:12,150
So you can't make the position of the Lander correspond

766
00:41:12,691 --> 00:41:14,691
one to one to the thrust control.

767
00:41:14,711 --> 00:41:17,553
You can't even make the velocity of it correspond one to one.

768
00:41:18,473 --> 00:41:20,453
you're just applying a kind of weak acceleration.

769
00:41:20,473 --> 00:41:23,734
And I think we still see a lot of physics-based games

770
00:41:23,794 --> 00:41:27,235
that are in that vein, using buttons or joysticks

771
00:41:27,675 --> 00:41:29,736
or triggers to control an acceleration,

772
00:41:29,796 --> 00:41:32,877
rather than have a kind of one-to-one correspondence.

773
00:41:35,077 --> 00:41:36,478
And Pole Riders is a physics game,

774
00:41:36,698 --> 00:41:38,658
and it has this fully dynamic world, which

775
00:41:38,698 --> 00:41:41,279
means the players, the poles, and the ball

776
00:41:41,739 --> 00:41:43,240
are all able to push back on each other.

777
00:41:44,119 --> 00:41:50,104
But it's also an action sports game, so I wanted the pole to be controlled with that one-to-one correspondence to the controls.

778
00:41:52,225 --> 00:41:56,889
Which for the sequel meant using an analog stick, partly because we're also targeting consoles and PCs.

779
00:41:57,869 --> 00:42:04,494
So those two things are in conflict, since in-game objects can push back on the digital pole, but they can't push back on the real thumbstick.

780
00:42:05,396 --> 00:42:09,839
The pole can even get jammed against the walls or against environmental objects or players,

781
00:42:10,219 --> 00:42:12,560
in which case it won't do anything when you move the controller.

782
00:42:12,580 --> 00:42:14,341
So it's going to completely break correspondence.

783
00:42:15,122 --> 00:42:16,843
So when I went to make Super Pole Riders,

784
00:42:17,003 --> 00:42:20,665
I had the idea that I wanted to solve or at least reduce that conflict.

785
00:42:21,645 --> 00:42:24,826
And so my approach was to start by making two grounding decisions,

786
00:42:24,906 --> 00:42:27,047
which I was reasonably confident were correct,

787
00:42:27,447 --> 00:42:29,328
and then to try and solve all of the kind of

788
00:42:30,388 --> 00:42:33,409
secondary problems which bubbled up out of those two decisions.

789
00:42:33,789 --> 00:42:35,570
So the first grounding decision I made

790
00:42:36,050 --> 00:42:38,030
was the pole should always at least try to move

791
00:42:38,350 --> 00:42:41,611
so that it's pointing in the direction that you're pushing the analog stick,

792
00:42:41,731 --> 00:42:43,972
like the spinner joystick in 720 degrees.

793
00:42:43,992 --> 00:42:44,132
So that...

794
00:42:46,313 --> 00:42:51,241
allows you to at least have the goal of creating a strong or perfect correspondence

795
00:42:51,302 --> 00:42:55,749
between the game world, the pole in the game world, and then the analog stick on the game pad,

796
00:42:56,611 --> 00:42:59,195
because the pole is literally mimicking the motion of the thumb stick.

797
00:43:01,738 --> 00:43:03,559
The second grounding decision I made

798
00:43:03,619 --> 00:43:05,781
was that the pole should be unrealistically heavy,

799
00:43:06,381 --> 00:43:08,523
much heavier than the player and the ball.

800
00:43:09,124 --> 00:43:09,964
And that's for two reasons.

801
00:43:10,024 --> 00:43:11,526
So the first is just a technical reason.

802
00:43:11,586 --> 00:43:13,927
So the way these physics simulations work

803
00:43:14,648 --> 00:43:16,489
is if you've got two objects that are connected,

804
00:43:16,529 --> 00:43:19,312
they won't be stable unless they have similar mass, which

805
00:43:19,352 --> 00:43:22,394
in this case means that the mass of the very first part

806
00:43:22,434 --> 00:43:24,075
of the pole, the very first segment of it,

807
00:43:24,616 --> 00:43:26,137
has to be close to the player's mass.

808
00:43:26,257 --> 00:43:28,098
So the total mass of the pole will

809
00:43:28,118 --> 00:43:29,019
be greater than the player.

810
00:43:30,004 --> 00:43:34,628
And second, since the pole is the main element that you're controlling,

811
00:43:34,668 --> 00:43:36,910
that's where all of the kind of strategy and action happens.

812
00:43:37,330 --> 00:43:39,752
I was thinking of the pole as being the real character, right?

813
00:43:40,132 --> 00:43:41,973
It's the real avatar of the player.

814
00:43:42,714 --> 00:43:45,656
So I wanted it to have physical dominion over the player's body.

815
00:43:46,277 --> 00:43:49,179
So it, for that reason, needed to be far heavier than the player as well.

816
00:43:51,252 --> 00:43:53,373
So I went about implementing it, and to do that,

817
00:43:53,673 --> 00:43:56,034
I anchored the pole to the player's body

818
00:43:56,134 --> 00:43:57,434
using a rotational joint.

819
00:43:57,635 --> 00:44:00,255
So this is just a, you can imagine,

820
00:44:00,295 --> 00:44:02,816
like a little pivot joint that has a motor on it

821
00:44:02,856 --> 00:44:05,597
that can apply a rotational force or a torque

822
00:44:05,637 --> 00:44:06,498
to rotate the pole.

823
00:44:07,358 --> 00:44:09,259
And the question is, how fast and how strong

824
00:44:09,279 --> 00:44:11,059
should the motor turn?

825
00:44:11,099 --> 00:44:12,740
And so as a first step, what I did

826
00:44:12,760 --> 00:44:16,981
is I just gave it a proportional control, which just means

827
00:44:17,061 --> 00:44:18,142
that the torque of the motor.

828
00:44:20,198 --> 00:44:24,100
is some arbitrary tunable constant, which I've written here as K,

829
00:44:24,120 --> 00:44:26,440
because I did a physics degree in college,

830
00:44:27,621 --> 00:44:31,923
multiplied by the difference between the joystick angle,

831
00:44:31,963 --> 00:44:33,323
the angle that you're pushing the joystick in,

832
00:44:33,703 --> 00:44:35,004
and the pole's angle in the game.

833
00:44:35,784 --> 00:44:37,365
So the idea is that it's pushing hard

834
00:44:37,445 --> 00:44:39,186
when the pole is far away from the position

835
00:44:39,206 --> 00:44:40,686
that you're requesting with the joystick,

836
00:44:40,966 --> 00:44:43,568
and it lets up a little bit as you get closer.

837
00:44:44,348 --> 00:44:47,609
So I also made it that if the person let go of the joystick altogether,

838
00:44:47,629 --> 00:44:48,630
the motor would just switch off.

839
00:44:51,341 --> 00:44:53,963
But that leads to the problem of overshoot, right?

840
00:44:54,003 --> 00:44:55,744
So the pole reaches its target quickly,

841
00:44:55,784 --> 00:44:58,587
but it's so heavy that the weak proportional torque,

842
00:44:58,627 --> 00:45:00,888
remember it's going down to a kind of force of zero

843
00:45:00,928 --> 00:45:03,971
at that point, can't stop this super heavy, fast moving pole

844
00:45:03,991 --> 00:45:05,312
when it reaches the target position.

845
00:45:05,372 --> 00:45:08,955
You wind up with a wildly oscillating pole that never,

846
00:45:09,175 --> 00:45:10,776
never points where you want it to point.

847
00:45:11,717 --> 00:45:13,678
So what I realized is that my two grounding decisions

848
00:45:13,718 --> 00:45:14,459
were in conflict.

849
00:45:16,356 --> 00:45:18,757
So in engineering, I did some research, and in engineering,

850
00:45:19,577 --> 00:45:22,178
that sort of overstrute and oscillation

851
00:45:22,238 --> 00:45:24,799
is a problem that occurs in all kinds of systems,

852
00:45:25,680 --> 00:45:27,760
from the furnaces that heat up large buildings

853
00:45:28,701 --> 00:45:30,862
to thermostats in coffee makers and so on.

854
00:45:31,602 --> 00:45:32,702
And they have a standard solution

855
00:45:32,722 --> 00:45:33,943
in engineering, which is to use what's

856
00:45:33,963 --> 00:45:36,624
called a PID controller, PID controller, which

857
00:45:36,664 --> 00:45:39,825
stands for Proportional Integral Derivative Control.

858
00:45:41,109 --> 00:45:44,050
which takes the proportional control I described on the previous slide

859
00:45:44,390 --> 00:45:47,851
and it adds integral and derivative components to the proportional control.

860
00:45:47,891 --> 00:45:50,912
Now, that sounds very complicated and technical, but it's not.

861
00:45:52,093 --> 00:45:54,754
It just means that you're going to speed up the motor based on

862
00:45:54,994 --> 00:45:56,374
its angle relative to the target.

863
00:45:56,394 --> 00:45:57,335
That's what we're already doing.

864
00:45:57,735 --> 00:46:00,936
But you're also going to slow it down relative to its angular speed

865
00:46:01,616 --> 00:46:04,697
and to its average angle over time.

866
00:46:04,737 --> 00:46:07,538
So you've got, instead of one constant K, you've got three constants,

867
00:46:07,558 --> 00:46:08,298
K1, K2, and K3.

868
00:46:08,338 --> 00:46:10,559
These are just tunable constants.

869
00:46:11,968 --> 00:46:15,669
And it turns out, you know, there's no magic way of tuning this system,

870
00:46:15,909 --> 00:46:18,810
whether it's a boiler or whether it's a video game.

871
00:46:19,590 --> 00:46:23,251
The way people do it when they're fixing the furnace in your building

872
00:46:23,951 --> 00:46:27,792
is you just tune the numbers manually

873
00:46:27,852 --> 00:46:30,473
until you find the right combination of magic numbers.

874
00:46:31,593 --> 00:46:35,114
I did that. Eventually I tuned these constants to the point

875
00:46:35,134 --> 00:46:38,895
where I had a reasonable blend of speed and stability.

876
00:46:41,032 --> 00:46:43,492
So with that, with that added, it looks something like that.

877
00:46:44,653 --> 00:46:47,013
And with the PID tuned, I was able to find this kind of,

878
00:46:47,033 --> 00:46:51,474
I think, a reasonable balance. Like, as good of a balance as you'll get with a super heavy pole.

879
00:46:52,715 --> 00:46:57,676
And so I had, kind of, first pass of my direct pointing controls that I wanted with the heavy pole.

880
00:46:58,256 --> 00:47:00,617
But latency is still a problem here, right?

881
00:47:00,637 --> 00:47:03,497
You know, it's taking time for the pole to reach its target, which is a problem.

882
00:47:04,898 --> 00:47:05,178
Because...

883
00:47:06,125 --> 00:47:08,046
you know, although it takes time for the pole to rotate,

884
00:47:08,226 --> 00:47:10,667
your control stick can be moved around instantly.

885
00:47:11,147 --> 00:47:12,227
So it was feeling sluggish.

886
00:47:12,667 --> 00:47:14,628
It also breaking that one-to-one correspondence

887
00:47:14,668 --> 00:47:16,089
in the controls that I was going for.

888
00:47:16,409 --> 00:47:18,910
And I'm spending a lot of time with the pole pointing

889
00:47:18,950 --> 00:47:22,412
in a direction that's different from where I'm pointing the stick.

890
00:47:24,423 --> 00:47:29,045
In 720 degrees they have that same problem, but they were able to implement a fix in hardware.

891
00:47:29,085 --> 00:47:31,506
This is the underside of that spinner controller.

892
00:47:31,526 --> 00:47:35,087
There's a bike chain and a heavy weight hidden under the joystick.

893
00:47:35,107 --> 00:47:37,207
So it just resists being moved around too fast.

894
00:47:37,287 --> 00:47:40,108
So there's this hard mechanical limit on how fast you can rotate it.

895
00:47:41,009 --> 00:47:43,250
which limits the rotation of the skateboard in the game.

896
00:47:43,530 --> 00:47:46,231
But that's obviously not an option if you have a thumbstick on a gamepad.

897
00:47:46,271 --> 00:47:51,273
It's also not an option to try to rotate the in-game pole as fast as the thumbstick

898
00:47:51,373 --> 00:47:54,415
because that would require near infinite forces in the physics simulation

899
00:47:54,815 --> 00:47:57,596
which will certainly cause bugs and glitches. So I couldn't do that.

900
00:47:59,227 --> 00:48:01,989
You need controls that can respond instantly,

901
00:48:02,649 --> 00:48:04,550
but you can't force things in physics games

902
00:48:04,590 --> 00:48:07,211
to react instantly, especially if they're heavy.

903
00:48:07,272 --> 00:48:08,932
So it's kind of a fundamental problem

904
00:48:09,633 --> 00:48:11,094
facing most physics-based games.

905
00:48:11,134 --> 00:48:12,654
And I don't think it's usually solved well.

906
00:48:13,135 --> 00:48:14,655
But I came up with two fixes to it.

907
00:48:15,076 --> 00:48:19,358
So the first one is to add some one-to-one instant cosmetic

908
00:48:19,418 --> 00:48:21,959
feedback that's reacting instantly to the thumbstick,

909
00:48:22,200 --> 00:48:23,680
but which isn't part of the physics world.

910
00:48:23,840 --> 00:48:25,461
So if you look closely here, I know it's subtle.

911
00:48:26,302 --> 00:48:28,265
But the instant that I move my thumb stick,

912
00:48:28,305 --> 00:48:29,627
the player's elbows rotate.

913
00:48:30,348 --> 00:48:32,511
So it looks like he's kind of twisting his upper arm

914
00:48:32,652 --> 00:48:34,835
to apply leverage to the pole.

915
00:48:35,768 --> 00:48:37,328
So that kind of squares the circle, right?

916
00:48:37,348 --> 00:48:39,289
We keep our slow, dynamic physics world

917
00:48:39,709 --> 00:48:40,670
without having glitches,

918
00:48:41,030 --> 00:48:43,671
but we're adding fast visual feedback elements

919
00:48:43,731 --> 00:48:45,712
that aren't part of the physics simulation.

920
00:48:46,212 --> 00:48:48,993
So the controls now respond at least cosmetically perfectly

921
00:48:49,033 --> 00:48:51,514
to the joystick, at least in these kind of elbows.

922
00:48:52,475 --> 00:48:54,775
And so players feel at least like the game is reacting

923
00:48:54,815 --> 00:48:56,116
to their input even though the pole,

924
00:48:56,556 --> 00:48:57,597
even if the pole is blocked,

925
00:48:57,777 --> 00:48:59,117
even if it can't rotate at all.

926
00:48:59,137 --> 00:49:01,958
And I think that reduces the feeling of latency.

927
00:49:03,791 --> 00:49:07,872
The second approach I took was to design the game so that the player is unconsciously encouraged

928
00:49:08,152 --> 00:49:13,454
to request positions with the thumbstick that are close to the pole's current rotation,

929
00:49:13,654 --> 00:49:14,295
current angle.

930
00:49:14,855 --> 00:49:18,676
So it's like the player is enforcing one-to-one correspondence between the stick and the pole

931
00:49:18,736 --> 00:49:19,656
rather than the system.

932
00:49:20,157 --> 00:49:20,897
So how do you do that?

933
00:49:21,217 --> 00:49:23,698
Well, this is again back to 720 degrees.

934
00:49:23,738 --> 00:49:28,159
What they do is they wipe you out if you point the stick in a direction that's perpendicular

935
00:49:28,199 --> 00:49:29,560
to the direction you're traveling in.

936
00:49:29,680 --> 00:49:32,521
So it gives you this message you're trying to spin too far, it wipes you out.

937
00:49:33,301 --> 00:49:39,744
So you usually, what you're doing when you're playing that game is you're trying to keep the joystick pointed in a direction that's close to the direction of travel,

938
00:49:40,064 --> 00:49:41,785
rather than making really fast corrections.

939
00:49:42,425 --> 00:49:46,307
I couldn't do that in my game. I can't wipe people out because they moved the thumbstick too far.

940
00:49:46,807 --> 00:49:50,269
But it did provide the inspiration for the actual fix that I came up with.

941
00:49:50,909 --> 00:49:55,932
So while I was tuning the game, I realized that I could make the ball a lot lighter than the pole and the player.

942
00:49:56,132 --> 00:50:01,214
And if I made the ball really light, then it would be easy to block it, either with the pole or with your body.

943
00:50:01,955 --> 00:50:06,516
So then what you find when you test it is that the players want to spend more of their time in a defensive pole,

944
00:50:06,556 --> 00:50:10,117
either with the stick straight up or with the stick straight down,

945
00:50:10,577 --> 00:50:12,758
where they're trying to keep the pole still.

946
00:50:12,998 --> 00:50:17,019
They're only making these kind of minor corrections, like in 720 degrees, to the angle of the pole.

947
00:50:17,380 --> 00:50:21,121
So the thumbstick and the pole are usually pointing the same way.

948
00:50:21,901 --> 00:50:29,046
And I don't think people really notice that they're doing it, but they're doing this job of bringing the thumbstick and the pole into one-to-one correspondence for you.

949
00:50:29,086 --> 00:50:34,669
So you still have this kind of high latency and poor correspondence if you need to switch the pole's position suddenly,

950
00:50:35,209 --> 00:50:37,171
but you're only doing that a small proportion of the time.

951
00:50:37,331 --> 00:50:42,394
So by making the ball extra light, I made the correspondence better more of the time.

952
00:50:45,044 --> 00:50:49,807
Okay, but that solution leaves me with one further kind of problem,

953
00:50:50,567 --> 00:50:52,768
which is it brings back this problem from the original game.

954
00:50:52,828 --> 00:50:55,810
So now that I can block with the pole,

955
00:50:57,050 --> 00:50:59,031
I can use the pole to block the goal indefinitely,

956
00:50:59,111 --> 00:51:01,132
since the ball can't pass through the pole.

957
00:51:02,513 --> 00:51:03,894
So I really struggled with that problem.

958
00:51:03,914 --> 00:51:08,957
I think it's evidenced by the fact that what I did with the Flash version,

959
00:51:08,997 --> 00:51:11,438
with his arms getting really weak when he was standing near his goal.

960
00:51:12,278 --> 00:51:16,983
But after really kind of thinking about it for a long time, I found some solutions to this in level design.

961
00:51:17,924 --> 00:51:24,551
So by adding a dip in front of the goal, so that when you're standing in it, your pole just can't reach high enough to block.

962
00:51:25,271 --> 00:51:26,132
That was one solution.

963
00:51:27,173 --> 00:51:31,278
Another level, I added a hole in the goal area, so you just can't stand there and defend.

964
00:51:32,916 --> 00:51:39,497
And the other thing I did is I made some levels where there's this uncollidable backboard that the pole can't rest against.

965
00:51:40,018 --> 00:51:44,979
Which means that if somebody comes and pushes you, the pole is just going to be pushed back past the goal and it's not able to defend anymore.

966
00:51:47,799 --> 00:51:50,680
So that's how I designed the input scheme for Super Pole Riders.

967
00:51:50,720 --> 00:51:57,081
It's a system that doesn't just happen at the level of interpreting the joystick movement and deciding what to do with that joint.

968
00:51:58,096 --> 00:52:01,658
but also at the level of how the player and the ball objects are constructed.

969
00:52:01,698 --> 00:52:03,719
How heavy they are and how the levels are designed.

970
00:52:03,739 --> 00:52:06,280
And I think, in the end, that does a pretty good job

971
00:52:06,540 --> 00:52:08,321
of solving the fundamental conflict here.

972
00:52:08,361 --> 00:52:10,683
I've got my fully dynamic physics world

973
00:52:10,703 --> 00:52:12,243
where everything can push back on each other.

974
00:52:12,263 --> 00:52:17,286
And I've got a control system that corresponds, most of the time at least,

975
00:52:17,306 --> 00:52:18,627
to the thumbstick on a gamepad.

976
00:52:18,827 --> 00:52:21,268
It's not as good as 720 degrees,

977
00:52:21,788 --> 00:52:23,950
but I think it's a lot better than the original version of the game,

978
00:52:24,150 --> 00:52:25,931
and it makes pretty good use of the analog sticks.

979
00:52:27,331 --> 00:52:27,511
Thanks.

