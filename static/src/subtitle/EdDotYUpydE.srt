1
00:00:04,332 --> 00:00:07,955
Hello, I'm Richard Katz, and I'll be speaking today

2
00:00:07,995 --> 00:00:09,756
about the character pipeline I worked on

3
00:00:10,357 --> 00:00:13,360
on at Zenimax Online Studios for the Elder Scrolls Online.

4
00:00:14,701 --> 00:00:17,523
I'm gonna talk in detail about the character rigging pipeline,

5
00:00:17,563 --> 00:00:19,505
the rigging tools, the animation tools,

6
00:00:19,605 --> 00:00:21,907
and I'll wrap up the talk with a short post-mortem

7
00:00:22,207 --> 00:00:24,269
from my perspective as a senior technical artist

8
00:00:25,150 --> 00:00:26,431
on a team of well over 100 developers.

9
00:00:29,615 --> 00:00:35,438
I'm going to compress six years of development into about 60 minutes, so it might go a little quick.

10
00:00:36,598 --> 00:00:43,501
And in contrast to the quick development cycles that Louise and Brian talked about earlier today,

11
00:00:44,121 --> 00:00:46,122
this is quite a long project that I've been on.

12
00:00:47,382 --> 00:00:53,645
First, let me tell you a little about myself.

13
00:00:53,665 --> 00:00:56,906
I received a bachelor's degree in fine arts from the College of New Jersey.

14
00:00:59,087 --> 00:01:02,888
I started in the games industry in 1997, over 17 years ago.

15
00:01:03,928 --> 00:01:07,669
Back then it wasn't enough just to be a competent artist.

16
00:01:09,289 --> 00:01:11,670
You also had to be fairly competent with some

17
00:01:11,690 --> 00:01:13,570
of the technical aspects of game development as well.

18
00:01:15,451 --> 00:01:17,471
My first industry job was at Sierra Online,

19
00:01:17,511 --> 00:01:19,132
working on the MMO Middle Earth Online.

20
00:01:20,092 --> 00:01:22,253
I worked at the O'Kerr Studio for about a year and a half

21
00:01:22,293 --> 00:01:23,053
until it was shut down.

22
00:01:23,974 --> 00:01:25,114
I was a 3D generalist.

23
00:01:25,775 --> 00:01:28,396
I touched every stage of a character from concept to game.

24
00:01:28,416 --> 00:01:31,157
I was doing concept, model, UVs, texture,

25
00:01:31,237 --> 00:01:33,197
skinning, animation, and technical art.

26
00:01:34,678 --> 00:01:37,439
We were working in 3D Studio Max version 2.0

27
00:01:38,099 --> 00:01:39,920
and the first release of MaxScript.

28
00:01:40,820 --> 00:01:42,321
And I built a layer system

29
00:01:42,381 --> 00:01:44,141
that Max did not include back then.

30
00:01:44,261 --> 00:01:47,302
Max didn't have layers in version 2.0.

31
00:01:48,083 --> 00:01:50,143
And a sprite rendering system that cut times.

32
00:01:51,106 --> 00:01:53,106
for getting a character from max into the game

33
00:01:53,366 --> 00:01:54,647
from eight hours to 30 minutes.

34
00:01:57,847 --> 00:02:00,988
My second job was at the 3DO company

35
00:02:01,028 --> 00:02:02,248
in Redwood City, California,

36
00:02:02,888 --> 00:02:04,929
where I worked on three Might & Magic titles.

37
00:02:05,689 --> 00:02:06,889
Crusaders of Might & Magic,

38
00:02:07,049 --> 00:02:08,690
Warriors of Might & Magic, and Shifters.

39
00:02:10,310 --> 00:02:11,810
The parenthetical of Might & Magic,

40
00:02:11,830 --> 00:02:12,871
since it was a sequel to Warriors.

41
00:02:13,811 --> 00:02:16,391
I started at 3DO doing more of the same thing

42
00:02:16,431 --> 00:02:17,231
I was doing at Sierra.

43
00:02:18,232 --> 00:02:20,572
Concept model UVs, texture skinning.

44
00:02:22,047 --> 00:02:23,368
animation and tech art.

45
00:02:24,069 --> 00:02:25,170
Within my first few months there,

46
00:02:25,190 --> 00:02:27,431
I was promoted to lead artist,

47
00:02:28,032 --> 00:02:30,014
where I ended up doing a lot less character work

48
00:02:30,554 --> 00:02:31,955
and a lot more of everything else.

49
00:02:33,176 --> 00:02:36,418
UI design and scripting, particle effects and scripting,

50
00:02:36,519 --> 00:02:39,641
and I was managing a team of between four to eight artists

51
00:02:39,681 --> 00:02:40,502
plus outsourcers.

52
00:02:46,546 --> 00:02:48,528
Most of what I've done since 3DO

53
00:02:49,429 --> 00:02:50,750
has been character technical art.

54
00:02:51,792 --> 00:02:54,774
Over the past 11 years, I've worked at Z-Axis,

55
00:02:55,254 --> 00:02:58,536
Visual Concepts, Secret Level, and ZeniMax Online.

56
00:02:59,717 --> 00:03:02,499
Of those 11 years, five of those years working in Maya,

57
00:03:03,259 --> 00:03:05,200
and six years working in 3D Studio Max.

58
00:03:06,401 --> 00:03:08,122
Some of the titles I shipped over that time,

59
00:03:08,903 --> 00:03:10,924
X-Men, The Official Game, Fantastic Four,

60
00:03:10,964 --> 00:03:12,985
Rise of the Silver Surfer, and Iron Man.

61
00:03:17,468 --> 00:03:19,329
But I'm here to talk to you about my work

62
00:03:19,610 --> 00:03:20,750
on The Elder Scrolls Online.

63
00:03:21,866 --> 00:03:26,910
Elder Scrolls Online, or ESO, is a massively multiplayer online role-playing game.

64
00:03:27,651 --> 00:03:30,032
MMORPG, or just MMO for short.

65
00:03:33,335 --> 00:03:39,220
ESO is a progression to online from the popular Elder Scrolls single-player RPG series from Bethesda Softworks,

66
00:03:39,960 --> 00:03:41,121
Bethesda Game Studio.

67
00:03:41,882 --> 00:03:43,043
Elder Scrolls III Morrowind,

68
00:03:43,663 --> 00:03:45,204
Elder Scrolls IV Oblivion,

69
00:03:45,765 --> 00:03:47,326
and Elder Scrolls V Skyrim.

70
00:03:48,427 --> 00:03:50,408
Skyrim came out during ESO production.

71
00:03:51,580 --> 00:03:55,344
I started working on ESO in 2008 and the game shipped in 2014

72
00:03:56,505 --> 00:03:58,306
after numerous style and design revamps.

73
00:04:06,735 --> 00:04:07,756
ESO is an MMO.

74
00:04:08,477 --> 00:04:10,078
Massive is the operative word here.

75
00:04:11,039 --> 00:04:13,562
We had 10 playable races multiplied by two genders,

76
00:04:14,002 --> 00:04:15,644
mostly variations on human or elf.

77
00:04:16,399 --> 00:04:17,859
We also had two beast races.

78
00:04:18,300 --> 00:04:20,521
The Khajiit, or cat-headed humanoids,

79
00:04:20,681 --> 00:04:22,902
and the Argonians, or lizard-headed humanoids.

80
00:04:23,923 --> 00:04:25,524
So we didn't have a huge variation

81
00:04:25,584 --> 00:04:26,845
in playable race anatomy,

82
00:04:27,925 --> 00:04:30,007
but we did need to expose to the players

83
00:04:30,567 --> 00:04:31,868
a system for customizing

84
00:04:32,668 --> 00:04:34,830
their playable characters' physiques and faces.

85
00:04:41,878 --> 00:04:45,380
We had a very ambitious 90, yes nine zero,

86
00:04:46,121 --> 00:04:47,101
unique monster rigs.

87
00:04:48,242 --> 00:04:50,283
Some of those rigs had as many as four or five

88
00:04:50,363 --> 00:04:51,264
mesh variations.

89
00:04:51,924 --> 00:04:53,606
These humanoid monster rigs were built

90
00:04:53,826 --> 00:04:55,407
on a custom rigging system and tool set.

91
00:04:56,768 --> 00:05:00,010
We had been established as a 3DS Max studio,

92
00:05:01,010 --> 00:05:03,232
but most of the animators came from a Maya background.

93
00:05:05,633 --> 00:05:08,395
Early on, we wanted to avoid using biped

94
00:05:08,455 --> 00:05:09,476
as an animation framework.

95
00:05:13,508 --> 00:05:16,810
So we built proprietary animation rigs and tools,

96
00:05:18,551 --> 00:05:21,153
which evolved over the first few years of the project.

97
00:05:23,895 --> 00:05:26,017
There were several major limitations from tech.

98
00:05:26,977 --> 00:05:32,121
We needed to render up to 200 players on screen

99
00:05:32,962 --> 00:05:34,343
in our player versus player battles.

100
00:05:35,423 --> 00:05:37,845
So the characters needed to be a single draw call each.

101
00:05:39,489 --> 00:05:48,797
For most of the project, DirectX 9 was our minimum spec, so every conceivable, potentially movable part on a humanoid character needed to be influenced by 77 bones or less,

102
00:05:49,537 --> 00:05:52,440
and there would be no LODs, either geometry or skeleton.

103
00:05:53,400 --> 00:05:57,263
Every deformable part had to be accounted for in the 77 bone limit.

104
00:05:58,404 --> 00:06:03,629
Hair, loincloths, tail, shoulder armor, eyeballs, weapons, tassets, etc.

105
00:06:04,865 --> 00:06:10,708
Originally, monsters and NPCs were going to be limited to 56 bones.

106
00:06:11,728 --> 00:06:13,749
But that constraint was removed pretty early on,

107
00:06:14,290 --> 00:06:16,311
and everything was allowed up to the 77 bone limit.

108
00:06:19,692 --> 00:06:23,614
We were tied to 3ds Max 2010 for the entirety of production.

109
00:06:26,656 --> 00:06:29,537
3ds Max has no useful referencing for animation.

110
00:06:29,838 --> 00:06:31,718
There are two referencing systems in Max,

111
00:06:31,839 --> 00:06:33,760
but neither one is suitable for character animation.

112
00:06:34,740 --> 00:06:37,101
Xrefs either replace your animation controllers with an

113
00:06:38,301 --> 00:06:41,383
Xref controller or merge in copies of source controllers

114
00:06:41,743 --> 00:06:44,004
with no updates and no hierarchy changes possible.

115
00:06:45,065 --> 00:06:47,026
Containers still seem like a work in progress.

116
00:06:47,766 --> 00:06:52,528
And in 2010, I don't think they've been updated much since.

117
00:06:52,588 --> 00:06:54,569
They were pretty awkward to use with animated characters.

118
00:06:58,611 --> 00:07:02,153
So we needed a system that embedded rigs in each Max scene.

119
00:07:02,942 --> 00:07:04,403
and that could be updated via batch.

120
00:07:05,343 --> 00:07:07,344
There's a couple of major disadvantages with this.

121
00:07:08,325 --> 00:07:11,486
Custom animation scene setups get blown away

122
00:07:11,546 --> 00:07:12,447
when a rig is updated,

123
00:07:13,928 --> 00:07:17,269
and embedded rigs and scenes easily become out of sync

124
00:07:17,569 --> 00:07:20,031
with the latest master rig for a character.

125
00:07:21,872 --> 00:07:21,972
Oop.

126
00:07:25,914 --> 00:07:27,314
One animator, Dave Sanita,

127
00:07:27,574 --> 00:07:29,555
authored a rough animation rig before I was hired,

128
00:07:30,416 --> 00:07:31,737
which we used as a starting point.

129
00:07:36,924 --> 00:07:37,905
And that's what I just said.

130
00:07:39,706 --> 00:07:41,747
The 3ds Max scene that contained the rig

131
00:07:42,427 --> 00:07:44,808
already had acquired tons of cruft.

132
00:07:46,529 --> 00:07:47,670
Orphan custom attributes,

133
00:07:48,110 --> 00:07:50,151
unused materials and animation controllers.

134
00:07:51,112 --> 00:07:53,773
One thing Max is good at is accumulating this cruft.

135
00:07:54,613 --> 00:07:56,414
But it's bad at allowing you to clean it out

136
00:07:56,915 --> 00:07:57,695
once contaminated.

137
00:07:58,615 --> 00:08:00,356
So from the start, we knew we needed a way

138
00:08:00,396 --> 00:08:03,158
to build brand new rigs and fresh, uncontaminated scenes.

139
00:08:07,442 --> 00:08:10,243
I started by just disassembling and scriptifying the rig.

140
00:08:11,223 --> 00:08:13,004
I broke down the animation rig into modules.

141
00:08:13,584 --> 00:08:19,786
Base, torso, legs, arms, hands, head, robe, and cape and tail.

142
00:08:24,328 --> 00:08:27,870
At the same time, I created a template skeleton guide rig.

143
00:08:28,650 --> 00:08:31,031
A skeleton with freely movable joint locations.

144
00:08:31,291 --> 00:08:33,312
The guide rig could be saved out to an XML file

145
00:08:34,032 --> 00:08:35,773
and rebuilt in the scene from the XML file.

146
00:08:36,821 --> 00:08:40,703
Each module in the animation rig then built along the guide rig locations.

147
00:08:46,187 --> 00:08:48,989
Once the initial generic humanoid template rig was set up,

148
00:08:49,769 --> 00:08:52,831
rigging any humanoid was as simple as duplicating the template skeleton,

149
00:08:52,971 --> 00:08:56,573
adjusting joint locations, clicking the build rig button, and then skinning it.

150
00:09:00,656 --> 00:09:03,478
About half the animations in the game, about 5,000 out of about 10,000.

151
00:09:06,450 --> 00:09:08,151
were authored on the standard humanoid rig.

152
00:09:09,252 --> 00:09:11,913
For player characters, NPCs, and some humanoid monsters,

153
00:09:13,254 --> 00:09:15,975
on the surface, it's pretty easy to sit down

154
00:09:16,035 --> 00:09:18,216
and start animating with, but it has a deep array

155
00:09:18,256 --> 00:09:19,897
of options baked into the basic rig.

156
00:09:22,779 --> 00:09:25,200
Our spine only had two bones because of our low bone limit.

157
00:09:25,940 --> 00:09:27,501
It was FK only, and it had options

158
00:09:27,521 --> 00:09:30,062
for rotational space switching to the parent body or root.

159
00:09:31,143 --> 00:09:32,463
You rotate the abdomen and the chest

160
00:09:32,483 --> 00:09:35,025
could optionally follow it or maintain its orientation

161
00:09:35,065 --> 00:09:36,105
relative to the hips or the world.

162
00:09:37,312 --> 00:09:39,633
We also had switches on many controls in the rig,

163
00:09:39,673 --> 00:09:41,934
so the animators could animate using Max's

164
00:09:41,974 --> 00:09:45,135
TCB Quaternion controllers instead of the rig's default

165
00:09:45,335 --> 00:09:46,536
Euler XYZ controllers.

166
00:09:51,838 --> 00:09:53,459
The head defaults to an aim system,

167
00:09:53,599 --> 00:09:55,600
but it can be switched to animate in FK,

168
00:09:55,620 --> 00:09:59,521
or it can be switched to animate in FK.

169
00:10:00,462 --> 00:10:02,343
In aim mode, we have an auto neck

170
00:10:02,363 --> 00:10:04,323
that inherits about half of the head's orientation.

171
00:10:05,678 --> 00:10:08,541
The Autodeck has an XY switch for forward-facing necks,

172
00:10:08,741 --> 00:10:10,963
in the case of humanoids with extremely hunched shoulders

173
00:10:11,603 --> 00:10:12,324
or quadrupeds.

174
00:10:13,705 --> 00:10:15,567
The eyes have independent look-at target

175
00:10:15,647 --> 00:10:17,408
that can follow the head or world,

176
00:10:18,569 --> 00:10:19,470
and an FK override.

177
00:10:21,111 --> 00:10:24,074
The head aim and head and neck FK controls

178
00:10:24,134 --> 00:10:26,315
have space switching and Euler-Quaternion switching

179
00:10:26,355 --> 00:10:26,916
like the torso.

180
00:10:33,478 --> 00:10:36,300
Our legs are IK only, but that generally wasn't a problem.

181
00:10:37,120 --> 00:10:39,041
The foot control could be switched from root space

182
00:10:39,081 --> 00:10:40,502
to body space in the case the character

183
00:10:40,542 --> 00:10:41,443
needed to leave the ground.

184
00:10:42,483 --> 00:10:44,124
We have a hip fudge control to tweak

185
00:10:44,164 --> 00:10:45,125
the femur and hip joint.

186
00:10:47,246 --> 00:10:48,987
The foot has a bunch of driven attributes.

187
00:10:49,647 --> 00:10:51,328
Rolled ball, heel, and toe tip,

188
00:10:51,528 --> 00:10:53,750
a twist with a sliding pivot, and a few different tilts.

189
00:10:56,751 --> 00:10:58,452
The arms were built with fake FK.

190
00:10:59,093 --> 00:11:00,854
The bones thought they were in IK at all times.

191
00:11:01,585 --> 00:11:07,188
But the FK hand control was an IK control that was a child of the forearm control, as was the elbow pull vector control.

192
00:11:08,208 --> 00:11:11,729
When we switched to IK, the bones constraints would blend between different sets of controls.

193
00:11:14,490 --> 00:11:19,252
There's an IK-FK snap built-in custom attribute on the wrist config node.

194
00:11:20,333 --> 00:11:23,814
Like the other modules, the arm controls have space switching and Euler-Quaternion switching.

195
00:11:25,815 --> 00:11:28,036
The hands have two layers of finger attributes.

196
00:11:28,576 --> 00:11:29,697
A set of meta properties

197
00:11:30,057 --> 00:11:31,899
and a set of finer per-digit properties.

198
00:11:32,579 --> 00:11:34,860
All the keyable channels lived on the config bar

199
00:11:35,821 --> 00:11:37,962
but had some two-way wires so that we could,

200
00:11:38,363 --> 00:11:40,024
so they could be posed in the viewport as well.

201
00:11:40,944 --> 00:11:42,846
We used Paul Neill's pen attribute holder

202
00:11:42,906 --> 00:11:43,746
on the config bar.

203
00:11:43,826 --> 00:11:45,387
It made it easy to bake save poses

204
00:11:46,208 --> 00:11:47,208
into the rig at build time.

205
00:11:50,390 --> 00:11:51,411
For most of the project,

206
00:11:51,831 --> 00:11:55,073
our player characters were going to be able to equip capes.

207
00:11:55,915 --> 00:11:57,436
So our rigs had a cape module.

208
00:11:58,397 --> 00:12:02,219
The tails for the beast races were originally going to just follow the cape animations.

209
00:12:03,220 --> 00:12:05,181
Then we added mutually exclusive tails.

210
00:12:05,861 --> 00:12:10,124
So a character could either have something skinned to the cape bones or the tail bones,

211
00:12:10,244 --> 00:12:11,204
but not at the same time.

212
00:12:12,605 --> 00:12:17,068
With the capes unlocked from the tails, we still couldn't move the capes very much

213
00:12:18,249 --> 00:12:20,990
because we still had to support weapon docking on the character's backs.

214
00:12:22,550 --> 00:12:25,471
Eventually we cut capes to reclaim some texture atlas space

215
00:12:25,951 --> 00:12:28,131
for higher resolution weapons in first person camera view.

216
00:12:29,972 --> 00:12:33,372
But our tails are still driven by phantom cape controls in the rig.

217
00:12:34,213 --> 00:12:37,093
They have some space switching to follow, excuse me,

218
00:12:37,473 --> 00:12:41,054
follow the back or pelvis depending on whether it's a cape or a tail.

219
00:12:41,834 --> 00:12:44,955
There's also an IK mode for the cape, but I don't think it ever got any use

220
00:12:44,975 --> 00:12:48,335
from the player animations. One feature that did get a lot of use is

221
00:12:48,355 --> 00:12:52,096
the procedural wave settings to drive a looping sine wave like motion.

222
00:12:53,090 --> 00:12:53,951
with a couple of sliders.

223
00:12:59,094 --> 00:13:00,896
As any self-respecting RPG does,

224
00:13:02,277 --> 00:13:03,538
we have robes and dresses.

225
00:13:05,219 --> 00:13:07,281
Unfortunately, we have no game side simulation.

226
00:13:08,501 --> 00:13:11,704
So, and we only had four bones allocated to the robe.

227
00:13:13,665 --> 00:13:16,147
The animators basically just wanted it to stay out of their way.

228
00:13:17,368 --> 00:13:20,871
So a large majority of the robe animation was driven automatically by the leg motion.

229
00:13:21,844 --> 00:13:26,205
then the animators could clean up any outstanding issues with the FK controls that sat on top of the automation.

230
00:13:27,305 --> 00:13:28,726
This is how we ended up driving the rope.

231
00:13:30,106 --> 00:13:31,606
One bone in the front between the shins,

232
00:13:32,326 --> 00:13:33,827
one bone in the back between the calves,

233
00:13:34,347 --> 00:13:36,087
and one on each side of the lower legs.

234
00:13:37,227 --> 00:13:40,228
The front and back bones maintained a position between the lower legs,

235
00:13:40,988 --> 00:13:42,969
oriented to the plane between the lower legs,

236
00:13:43,969 --> 00:13:46,389
and forced outward when necessary to preserve volume.

237
00:13:47,629 --> 00:13:51,410
The side bones then slid around the calf centers to maintain volume there.

238
00:13:52,495 --> 00:13:55,498
The actual lower legs themselves weren't weighted to the robe geometry.

239
00:14:00,942 --> 00:14:04,385
The weapon controls can be docked at several locations on the character's back and hips,

240
00:14:04,746 --> 00:14:08,229
and there's an IK system built in to plant the weapons on the ground.

241
00:14:11,151 --> 00:14:13,293
But humanoids weren't the only characters in our game.

242
00:14:17,045 --> 00:14:22,367
The Watcher is a take on the classic fantasy beholder character, a giant flying eyeball.

243
00:14:23,427 --> 00:14:26,308
But the Watcher's most obvious feature are its 15 arms.

244
00:14:27,189 --> 00:14:33,411
Three main arms with leaf-like mittens, four mid-sized tentacles, and eight smaller minor tentacles.

245
00:14:34,771 --> 00:14:40,173
The main arms had independent controls for FK, IK, and could also be driven procedurally

246
00:14:40,213 --> 00:14:41,993
with the same system we used on the humanoid tails.

247
00:14:43,363 --> 00:14:49,785
The middle tentacles were driven mainly by the ambient procedural motion with an FK layer on top to refine the motion and fix collisions.

248
00:14:50,885 --> 00:14:58,687
The eight minor tentacles were all driven by a single set of procedural settings with a phase setting to keep them all different shapes at any given frame.

249
00:15:00,207 --> 00:15:03,948
And of course, like the mid-sized tentacle, the minor ones had an FK tweak layer on top as well.

250
00:15:12,520 --> 00:15:15,121
We had a snake module that we used for various creatures.

251
00:15:16,081 --> 00:15:19,602
A plain old snake critter, a giant snake monster,

252
00:15:19,622 --> 00:15:22,083
like pictured, that had a torso section that always

253
00:15:22,103 --> 00:15:25,004
stayed vertical, an ice wraith that

254
00:15:25,044 --> 00:15:26,944
looked like a flying snake skeleton that

255
00:15:26,984 --> 00:15:29,445
sort of swam through the air, and two

256
00:15:29,465 --> 00:15:32,446
different naga-like monsters, the two-armed lamia

257
00:15:32,606 --> 00:15:34,567
and the four-armed harvester.

258
00:15:36,007 --> 00:15:38,348
It took a lot of iteration to iron out

259
00:15:38,368 --> 00:15:39,468
the kinks in the snake rig.

260
00:15:40,661 --> 00:15:42,522
There's a spline IK underneath everything,

261
00:15:43,003 --> 00:15:46,265
but Max's spline IK just has no consistency for up vectors,

262
00:15:46,325 --> 00:15:50,488
so I only used the position from the spline IK

263
00:15:50,508 --> 00:15:52,709
to drive the, and drove the orientation

264
00:15:52,729 --> 00:15:54,030
with another layer of helper nodes.

265
00:15:55,051 --> 00:15:56,632
But it was easy to flip those as well

266
00:15:56,712 --> 00:15:59,273
when the look at targets turn 90 degrees on any axis.

267
00:15:59,874 --> 00:16:01,495
So we ended up subdividing the chain

268
00:16:01,535 --> 00:16:03,216
by adding more point helpers constrained

269
00:16:03,256 --> 00:16:05,378
between the bones on the spline IK,

270
00:16:06,358 --> 00:16:09,100
so that we could twist the controls at least 360 degrees

271
00:16:09,140 --> 00:16:10,301
before the bones started flipping.

272
00:16:14,580 --> 00:16:17,141
When our second winged demon type character came up,

273
00:16:17,961 --> 00:16:20,722
the animator working on it showed me a God of War III

274
00:16:20,822 --> 00:16:22,343
behind the scenes video on YouTube.

275
00:16:23,103 --> 00:16:25,824
The rig featured in the video was for a manticore.

276
00:16:26,544 --> 00:16:28,885
The wings on the creature had a single master billowing

277
00:16:29,125 --> 00:16:31,366
control that drove the shape of the wing membrane.

278
00:16:32,747 --> 00:16:35,388
I built something similar for our wing rig,

279
00:16:36,148 --> 00:16:38,549
but the wings on our gargoyle and grievous twilight

280
00:16:38,569 --> 00:16:40,850
characters only had about 40 polygons.

281
00:16:41,550 --> 00:16:43,451
So the results weren't as awesome as they could have been.

282
00:16:47,101 --> 00:16:49,301
We ended up with two different kinds of quadruped legs.

283
00:16:49,661 --> 00:16:51,622
Predators, like bears, wolves, and cats,

284
00:16:51,762 --> 00:16:53,962
have forelegs with pretty short hand segments.

285
00:16:54,602 --> 00:16:57,663
The majority of the limb is humerus and forearm.

286
00:16:58,823 --> 00:17:01,984
The module we used for those had an IK chain from shoulder

287
00:17:02,024 --> 00:17:04,304
to wrist, similar to a biped.

288
00:17:05,625 --> 00:17:07,985
Hooved animals tend to have much longer carpal or tarsal

289
00:17:08,005 --> 00:17:10,166
segments, and their knees sometimes

290
00:17:10,206 --> 00:17:12,066
don't even come below the bottom of their torsos.

291
00:17:13,642 --> 00:17:16,965
Three or four bone IK chains are unpredictable, in Max at least.

292
00:17:17,466 --> 00:17:19,487
So the solution I used for these kinds of limbs

293
00:17:19,788 --> 00:17:22,610
incorporated two bone IK chains into a larger hole.

294
00:17:24,292 --> 00:17:26,654
The module for those limbs, and some predator hind limbs,

295
00:17:26,874 --> 00:17:28,615
had an IK chain that started at the knee

296
00:17:29,136 --> 00:17:30,937
and ended between the carpals and phalanges.

297
00:17:32,139 --> 00:17:34,861
The wrist or ankle was in the middle of the chain.

298
00:17:35,762 --> 00:17:39,065
The thigh then had a toggleable aim

299
00:17:39,525 --> 00:17:41,106
toward the IK control on the ground.

300
00:17:42,373 --> 00:17:45,355
There was a knee tweak control to get some specific shapes

301
00:17:45,595 --> 00:17:46,816
and stretch the leg a little bit,

302
00:17:47,336 --> 00:17:48,857
which the animators tended to abuse.

303
00:17:54,741 --> 00:17:57,262
Quadruped torsos could switch between IK and FK

304
00:17:57,302 --> 00:17:59,824
depending on the shapes the animators wanted to achieve

305
00:18:00,024 --> 00:18:00,745
in an animation.

306
00:18:01,745 --> 00:18:04,367
The body root defaulted to a position near the center of mass

307
00:18:05,988 --> 00:18:08,270
but could slide up and down the length of the torso

308
00:18:08,430 --> 00:18:10,311
so it could pivot anywhere from the neck to the tail.

309
00:18:15,830 --> 00:18:18,732
The rigs themselves are the products of a suite of tools

310
00:18:19,112 --> 00:18:20,653
authored to create and edit the rigs.

311
00:18:21,474 --> 00:18:22,955
The pipeline looks something like this.

312
00:18:26,678 --> 00:18:29,600
A master XML metadata file that contains the locations

313
00:18:29,680 --> 00:18:32,342
of each character's specific data relative to itself.

314
00:18:33,883 --> 00:18:35,805
The master file is called rigbuild.xml.

315
00:18:36,325 --> 00:18:38,166
Each character had about 10 XML files

316
00:18:38,366 --> 00:18:40,868
and one clean mesh scene, just the mesh, no cruft.

317
00:18:42,155 --> 00:18:46,156
When we build a rig, it looks up the character in the rig build metadata file

318
00:18:46,676 --> 00:18:49,077
and finds the character's rig config file,

319
00:18:49,377 --> 00:18:51,578
which tells us what modules to build for that character.

320
00:18:52,078 --> 00:18:54,238
For instance, we'll build the guide skeleton first.

321
00:18:54,759 --> 00:18:57,279
The config file will just say, yes, build a guide skeleton.

322
00:19:00,060 --> 00:19:03,321
The scripts look up the location of the guide skeleton XML in the rig build meta file

323
00:19:03,601 --> 00:19:07,462
and then runs the guide skeleton XML through some scripts that build the skeleton in the scene.

324
00:19:09,303 --> 00:19:10,803
Then we go back to the config file.

325
00:19:15,034 --> 00:19:17,315
to see what other modules to build for this rig.

326
00:19:18,456 --> 00:19:20,038
Look up the location of the XML data

327
00:19:20,198 --> 00:19:21,199
for each relevant module

328
00:19:21,539 --> 00:19:23,581
and build the module from the XML data.

329
00:19:28,245 --> 00:19:30,607
After initially setting up and building a rig once,

330
00:19:30,887 --> 00:19:32,829
a rig could be constructed from these few components

331
00:19:32,869 --> 00:19:33,689
in just a few seconds.

332
00:19:36,952 --> 00:19:38,634
This is the tool we use to build the rigs.

333
00:19:39,434 --> 00:19:40,535
The character list is built from...

334
00:19:41,294 --> 00:19:43,375
from the rigbuild.xml file,

335
00:19:43,655 --> 00:19:45,015
and when you select a character,

336
00:19:45,055 --> 00:19:47,295
it loads character-specific rigconfig file

337
00:19:47,335 --> 00:19:50,456
that can describe what to build for this character,

338
00:19:50,496 --> 00:19:51,276
which modules to build.

339
00:19:52,276 --> 00:19:54,537
The left pane is a list of rig modules in our library,

340
00:19:55,257 --> 00:19:57,577
and the right pane is a view of selected characters,

341
00:19:57,637 --> 00:19:58,578
rigconfig.xml,

342
00:20:00,018 --> 00:20:01,358
telling the tool which modules to build.

343
00:20:02,178 --> 00:20:02,979
When we click Build,

344
00:20:03,539 --> 00:20:06,059
the tool collects a list of modules for this character,

345
00:20:06,219 --> 00:20:06,979
to build for this character,

346
00:20:07,359 --> 00:20:08,140
and sends the list.

347
00:20:08,966 --> 00:20:11,367
to a MaxRep function that builds each module in order

348
00:20:11,847 --> 00:20:12,867
along the guide skeleton.

349
00:20:13,267 --> 00:20:15,108
And when it's done, it deletes the guide skeleton.

350
00:20:18,769 --> 00:20:20,450
This is a simple MaxUI floater

351
00:20:21,430 --> 00:20:22,731
for editing the guide skeleton,

352
00:20:22,911 --> 00:20:24,491
also known as the proportion skeleton.

353
00:20:25,792 --> 00:20:27,372
It builds and saves the guide skeleton

354
00:20:27,452 --> 00:20:30,433
and has tools for mirroring locator positions,

355
00:20:30,753 --> 00:20:31,714
aligning locators,

356
00:20:31,754 --> 00:20:33,754
and globally scaling the rig via translation.

357
00:20:34,935 --> 00:20:36,315
It has some editing functionality,

358
00:20:36,355 --> 00:20:38,216
but we always just added joints in the text editor.

359
00:20:39,132 --> 00:20:41,173
position the joints in max and resave the XML.

360
00:20:42,054 --> 00:20:44,555
It also builds and saves the mesh skeleton

361
00:20:44,575 --> 00:20:47,697
to verify hierarchy and for adding additional export data.

362
00:20:53,740 --> 00:20:55,681
So we lay out the skeleton, set up the rig,

363
00:20:55,841 --> 00:20:58,483
code additional bits if needed, and build the rig.

364
00:20:59,163 --> 00:21:01,625
Some nodes get automatically placed in layers and sets,

365
00:21:02,145 --> 00:21:02,745
but many don't.

366
00:21:03,466 --> 00:21:06,007
So we sort all the nodes into nicely named layers.

367
00:21:07,022 --> 00:21:08,944
sort controls into various selection sets,

368
00:21:10,485 --> 00:21:13,988
and adjust the size and location of any controls that are hard to see.

369
00:21:15,410 --> 00:21:18,733
Now we want to save all that sorting and cleanup so we don't have to do it ever again.

370
00:21:19,894 --> 00:21:22,336
That's where this tool comes in, the Unbuild rig tool.

371
00:21:23,237 --> 00:21:27,220
It shows another view of the character's XML files from the rigbuild.xml meta file.

372
00:21:27,841 --> 00:21:31,604
It has Perforce integration so we can check out the files, click save, and resubmit them.

373
00:21:35,484 --> 00:21:37,907
Now the rig is built and we need to skin the mesh to follow it.

374
00:21:38,367 --> 00:21:40,350
Some monsters only have a single mesh and that's it.

375
00:21:41,031 --> 00:21:42,392
Some have multiple mesh variants.

376
00:21:43,053 --> 00:21:45,916
And our dynamic characters, our playable races and other humanoids,

377
00:21:46,697 --> 00:21:48,639
they're a whole other level of crazy.

378
00:21:51,302 --> 00:21:52,724
The main interface for the skin weights

379
00:21:53,925 --> 00:21:55,687
here shows visible geometry in the scene.

380
00:21:56,490 --> 00:21:58,612
and will tell you if each mesh has a skin modifier

381
00:21:59,152 --> 00:22:01,594
and shows you each weight file's perforce status.

382
00:22:02,475 --> 00:22:04,557
After we've skinned a mesh, this panel lets us save

383
00:22:04,997 --> 00:22:07,759
the skin out to an XML file with weights per vertex.

384
00:22:08,560 --> 00:22:09,701
It has perforce integration,

385
00:22:11,102 --> 00:22:13,504
and we can sync edit, add, submit, and revert the weights

386
00:22:13,564 --> 00:22:15,205
and XML files right from the panel.

387
00:22:16,246 --> 00:22:19,068
When we rebuild the rig, assuming the mesh doesn't get updated,

388
00:22:21,170 --> 00:22:23,351
the saved weights file will get applied to the mesh.

389
00:22:24,054 --> 00:22:28,798
And that only works if the mesh's vertex order or vertex count don't change.

390
00:22:32,581 --> 00:22:38,125
However, the weight file also contains enough vertex and face info to rebuild a facsimile of the original mesh.

391
00:22:38,766 --> 00:22:44,671
When the mesh topology has to change, we use another mode in this tool to get the old weights onto the new geometry.

392
00:22:45,681 --> 00:22:49,424
The tool rebuilds the original mesh from the saved XML skin weights file

393
00:22:49,944 --> 00:22:52,766
and loads the per-vertex weights onto the new temporary mesh.

394
00:22:53,446 --> 00:22:55,988
It applies Max's skin-wrap modifier to the target mesh,

395
00:22:56,228 --> 00:22:58,830
interpolates the weights from the source to the temporary mesh,

396
00:22:59,290 --> 00:23:01,592
and then converts the skin-wrap to a skin modifier.

397
00:23:02,212 --> 00:23:03,573
Then it deletes the temporary mesh.

398
00:23:03,993 --> 00:23:06,715
Now we can clean up anything that didn't transfer from the skin-wrap well

399
00:23:06,895 --> 00:23:09,477
and resave the XML with the correct per-vertex weights.

400
00:23:15,698 --> 00:23:16,779
That was what that slide was.

401
00:23:18,780 --> 00:23:23,041
Like most games, we have a 4 influence per vertex limit on skin weights.

402
00:23:23,902 --> 00:23:26,923
I don't like to work with the skin's preset to a 4 influence limit.

403
00:23:27,303 --> 00:23:32,325
I leave it at the 20 influence default because I don't want Max to automatically remove influences as I'm working.

404
00:23:33,245 --> 00:23:36,307
So I have a weight cleaner utility which removes weights below a threshold

405
00:23:36,807 --> 00:23:39,068
and removes the smallest influences above the limit of 4.

406
00:23:43,869 --> 00:23:48,612
Our dynamic character parts system allows players to wear a huge assortment of mixed armor sets.

407
00:23:49,493 --> 00:23:51,715
So the geometry is broken up into body parts.

408
00:23:52,655 --> 00:23:57,959
Eight for the basic body, that's torso, heads, upper arms, lower arms, hands, upper legs, lower legs, and feet.

409
00:23:59,620 --> 00:24:01,602
Another half dozen deformable clothing bits.

410
00:24:02,402 --> 00:24:05,344
Each of those had about a dozen variations per gender at launch.

411
00:24:06,325 --> 00:24:09,567
But we've had a mandate since launch to add more silhouette variation in the armor,

412
00:24:09,587 --> 00:24:12,229
so we're up to about 30 variants on some body sections now.

413
00:24:13,113 --> 00:24:18,475
On top of that, we have a metric ton of hair and adornment variations and dozens of rigid armor attachments.

414
00:24:19,715 --> 00:24:23,376
For all of this to work, we needed to synchronize the seams between all of these parts,

415
00:24:24,897 --> 00:24:26,777
skin weights and vertex normals.

416
00:24:27,838 --> 00:24:31,539
The normals needed to be contiguous for shading purposes,

417
00:24:31,819 --> 00:24:34,520
and Max has poor support for vertex normals in general.

418
00:24:36,462 --> 00:24:41,144
The base editable poly doesn't have any support to view or edit vertex normals.

419
00:24:41,704 --> 00:24:45,225
Max traditionally derived vertex normals from its face smoothing groups.

420
00:24:46,306 --> 00:24:49,107
The editable poly does support vertex normals though,

421
00:24:49,687 --> 00:24:52,248
but you need to edit them in an edit normal modifier,

422
00:24:53,268 --> 00:24:54,389
and then collapse it down.

423
00:24:55,809 --> 00:24:59,370
So our copy normals tool needed to apply edit normal modifiers

424
00:24:59,430 --> 00:25:02,692
to the source and target meshes, copy the normals, and then collapse them down.

425
00:25:05,791 --> 00:25:08,213
Back to weights, the dynamic character meshes

426
00:25:08,433 --> 00:25:10,234
actually each have two sets of weights.

427
00:25:11,015 --> 00:25:12,756
The animation skeleton bone weights

428
00:25:12,996 --> 00:25:14,777
and the second set of weights for customizing

429
00:25:15,158 --> 00:25:16,999
characters body shape and facial features.

430
00:25:18,380 --> 00:25:21,022
Both sets have to have their seams match up exactly.

431
00:25:21,262 --> 00:25:23,624
Every forearm had to have the same exact weights

432
00:25:23,684 --> 00:25:24,865
where it meets the upper arms.

433
00:25:25,425 --> 00:25:27,687
And all the upper arms had to have the same exact weights

434
00:25:27,767 --> 00:25:29,108
at the forearms at the same seam.

435
00:25:30,068 --> 00:25:30,809
We created a disc man.

436
00:25:34,549 --> 00:25:38,472
templates of seam locations to apply weights to multiple targets at once.

437
00:25:42,135 --> 00:25:46,458
Every studio I work at, I end up creating a variation of this tool to do batches in Max or Maya scenes.

438
00:25:47,479 --> 00:25:50,601
It takes a list of files, a chunk of Max script code to run on each file

439
00:25:50,941 --> 00:25:53,043
with an optional resave after the script executes.

440
00:25:53,784 --> 00:25:57,907
It runs everything through a try-catch construct to avoid batches ending prematurely

441
00:25:58,007 --> 00:26:01,630
and saves out a log file with success or fail results to review after long batches.

442
00:26:05,025 --> 00:26:07,207
We ended up doing a lot with Max's custom attributes,

443
00:26:07,327 --> 00:26:09,708
but Max doesn't provide much for viewing or editing

444
00:26:09,808 --> 00:26:12,529
the contents of a custom attribute's parameters.

445
00:26:13,530 --> 00:26:16,672
This tool recurses through each object and modifiers

446
00:26:17,452 --> 00:26:18,873
and lets us view or edit the data.

447
00:26:19,433 --> 00:26:21,414
We can directly enter values for simple types

448
00:26:22,355 --> 00:26:24,836
or elements of complex types like vectors or matrices

449
00:26:25,877 --> 00:26:27,698
and pick objects for Max object tabs

450
00:26:27,818 --> 00:26:30,259
and it automatically inserts node transform monitors

451
00:26:30,299 --> 00:26:31,099
for weak referencing.

452
00:26:31,740 --> 00:26:33,921
It can grow or shrink parameter tabs too.

453
00:26:37,678 --> 00:26:40,399
We also have a suite of tools that face the artists and animators.

454
00:26:44,000 --> 00:26:50,842
The pipeline started simple, and there was never time or reason to expand it much further later.

455
00:26:52,262 --> 00:26:56,223
The users would just add a startup script path in 3ds Max preferences.

456
00:26:57,424 --> 00:27:04,225
It was a single startup script in the target path, and it built a tools menu in Max at startup, and that was about all there was to it.

457
00:27:05,266 --> 00:27:06,726
The tools all ran from network path.

458
00:27:07,672 --> 00:27:09,752
I would develop them in a source-controlled local folder

459
00:27:09,792 --> 00:27:11,653
and push them to a user-run network path

460
00:27:11,693 --> 00:27:12,333
when they were ready.

461
00:27:13,474 --> 00:27:16,235
The toolset didn't have any DLLs or other binary components,

462
00:27:16,515 --> 00:27:19,056
so we never had any network access conflicts.

463
00:27:19,776 --> 00:27:21,857
The coolest thing was that I could fix bugs

464
00:27:21,977 --> 00:27:23,558
and update scripts on the network,

465
00:27:24,218 --> 00:27:26,459
and then the artist could rerun the tools from the menu

466
00:27:26,499 --> 00:27:28,780
and see the updates without even needing to restart Max.

467
00:27:32,761 --> 00:27:34,722
The animators use this tool daily,

468
00:27:35,222 --> 00:27:36,483
the Animation Transfer Panel.

469
00:27:37,261 --> 00:27:40,562
It allows the animators to update rigs in single scenes or multiple scenes

470
00:27:41,503 --> 00:27:43,423
since our rigs have to live in each Max scene.

471
00:27:44,504 --> 00:27:45,124
And it wraps up...

472
00:27:45,704 --> 00:27:50,166
It wraps the functionality of Max's XAF or XML animation format

473
00:27:50,586 --> 00:27:54,007
but with additional custom data that this tool packed into the XAF files.

474
00:27:54,968 --> 00:27:56,988
Perforce status is integrated into the UI

475
00:27:57,009 --> 00:28:00,570
so animators can see what's up to date or who has what file checked out at a glance

476
00:28:01,090 --> 00:28:03,211
and they can sync and check out Max and XAF files.

477
00:28:07,923 --> 00:28:09,764
The rigs have data-driven display panels

478
00:28:09,804 --> 00:28:11,945
for toggling visibility of controls in the rig.

479
00:28:12,585 --> 00:28:13,505
They were designed to take up

480
00:28:13,545 --> 00:28:15,326
as little screen real estate as possible.

481
00:28:16,006 --> 00:28:17,567
It's authored as an XML file,

482
00:28:17,587 --> 00:28:19,508
and that file is encoded and stored in the rig

483
00:28:19,548 --> 00:28:20,228
when the rig is built.

484
00:28:21,309 --> 00:28:23,029
The panel interprets the encoded data

485
00:28:23,089 --> 00:28:24,630
and it constructs the panel on demand.

486
00:28:25,571 --> 00:28:27,111
The same tech is used for other panels

487
00:28:27,151 --> 00:28:29,492
for visibility of mesh body parts

488
00:28:29,552 --> 00:28:32,073
and for trajectories.

489
00:28:34,575 --> 00:28:35,895
The animators use a pose tool

490
00:28:35,955 --> 00:28:37,576
to save, load, and mirror single poses.

491
00:28:38,568 --> 00:28:40,289
The poses are saved in an XML file.

492
00:28:41,449 --> 00:28:44,691
The tool has options for working in world space or local space,

493
00:28:45,412 --> 00:28:48,013
whole character selection, and has per-force integration

494
00:28:48,033 --> 00:28:50,054
to show the status of the pose files in sync edit

495
00:28:50,094 --> 00:28:51,395
and submit them into the depot.

496
00:28:55,137 --> 00:28:57,138
3D Studio Max has animation layers.

497
00:28:57,218 --> 00:28:59,400
They were introduced around Max 2009.

498
00:29:00,500 --> 00:29:02,221
But for my first six months on the project,

499
00:29:02,261 --> 00:29:03,982
we were working in Max release 9,

500
00:29:04,323 --> 00:29:05,863
which predated the animation layers.

501
00:29:07,154 --> 00:29:12,137
We used Max's freeze transform system to create zero default values on controls.

502
00:29:12,317 --> 00:29:14,859
It's a macro script included with Max for many years.

503
00:29:15,479 --> 00:29:18,181
It creates a list controller on the position and rotation tracks

504
00:29:18,961 --> 00:29:21,943
and stuffs the current transform into controllers at the first index

505
00:29:22,983 --> 00:29:24,304
of the list labeled frozen

506
00:29:24,844 --> 00:29:27,646
and then creates new controllers at the second index labeled zero

507
00:29:28,407 --> 00:29:29,307
and sets it as default.

508
00:29:30,080 --> 00:29:32,840
In Maya, I would just build up a hierarchy of empty transforms.

509
00:29:33,821 --> 00:29:37,862
However, our tools made assumptions about this frozen transform list controller paradigm.

510
00:29:38,382 --> 00:29:45,884
When animators needed to use Max's animation layers,

511
00:29:46,624 --> 00:29:49,985
it would collapse everything, blow away the frozen transform list controllers,

512
00:29:50,025 --> 00:29:51,785
and break our rigs and tools.

513
00:29:52,665 --> 00:29:54,666
So we brewed up our own version of the animation layers

514
00:29:54,686 --> 00:29:57,147
that respected the freeze transform list controllers.

515
00:30:01,208 --> 00:30:06,010
The animation layer system kept track of additional list controllers and layer membership via an XML file

516
00:30:06,551 --> 00:30:08,812
embedded in a single string property on a custom attribute.

517
00:30:09,692 --> 00:30:15,015
Collapsing the layers worked per key for keyable tracks and distributed the values as one would expect.

518
00:30:15,896 --> 00:30:21,639
But since they were just more list controllers, animators could replace default layer controllers with non-keyable controllers,

519
00:30:21,819 --> 00:30:26,381
a noise controller for jitter, or a position constraint to fake a hand holding a character's head.

520
00:30:27,282 --> 00:30:30,123
Then the animator could bake the results down into keys if they wished.

521
00:30:34,651 --> 00:30:38,675
The Animation Transfer Panel needed to peek into XAF files during load,

522
00:30:39,076 --> 00:30:44,621
read some custom data from the file to see if there were animation layers in the saved XAF.

523
00:30:44,982 --> 00:30:48,225
If there were, it would need to build out the additional animation layer controllers

524
00:30:48,285 --> 00:30:50,147
before loading the animation data into the rig.

525
00:30:53,891 --> 00:30:57,334
The Dynamics Panel was originally created with the intent of breaking characters.

526
00:30:58,080 --> 00:31:00,782
with 3ds Max's Havok Reactor Dynamics system.

527
00:31:01,342 --> 00:31:03,143
It allowed the animators to group rig bones

528
00:31:03,483 --> 00:31:06,525
into separately definable sets of animatable controls

529
00:31:07,086 --> 00:31:08,567
to keyframe independent of hierarchy

530
00:31:08,947 --> 00:31:11,028
and then blend to and from the normal rig behavior.

531
00:31:11,809 --> 00:31:13,810
Ultimately, it did see some creative uses,

532
00:31:13,990 --> 00:31:16,672
but mainly for keyframing instead of reactor dynamics.

533
00:31:20,993 --> 00:31:23,795
Our tools weren't tied to specific object names,

534
00:31:23,915 --> 00:31:26,897
but they were tied to specific set and layer names,

535
00:31:27,037 --> 00:31:29,019
which were shared across all rigs.

536
00:31:30,660 --> 00:31:34,043
If you merge in objects from another file in 3D Studio Max,

537
00:31:34,183 --> 00:31:36,124
layers with the same names get combined,

538
00:31:37,385 --> 00:31:39,867
and selection sets don't merge at all.

539
00:31:42,789 --> 00:31:44,811
The namespace tool let animators define

540
00:31:44,831 --> 00:31:47,433
a Maya-like namespace for up to four characters

541
00:31:47,473 --> 00:31:48,153
in a single scene.

542
00:31:49,380 --> 00:31:51,581
It switches a character out of namespace mode

543
00:31:51,621 --> 00:31:53,362
so that it can perform tool operations

544
00:31:53,422 --> 00:31:55,102
like load or save animation or export.

545
00:31:56,083 --> 00:31:58,264
It was a little clumsy, but it was a quick solution

546
00:31:58,324 --> 00:32:02,366
around systemic problems in the tools and rigs

547
00:32:02,386 --> 00:32:03,646
that would take too long to fix.

548
00:32:07,468 --> 00:32:09,069
3ds Max's built-in ghosting

549
00:32:09,449 --> 00:32:11,590
only ghosts the currently selected mesh.

550
00:32:12,970 --> 00:32:14,351
And the options are only accessible

551
00:32:14,411 --> 00:32:15,611
in a tab in the preferences.

552
00:32:16,623 --> 00:32:18,884
The ghosting tool allows for color and alpha settings,

553
00:32:19,104 --> 00:32:21,744
interval settings, forward or backward ghosting,

554
00:32:22,104 --> 00:32:25,325
and of course, any specified mesh.

555
00:32:25,545 --> 00:32:28,706
It uses 3D Studio Max's point cache modifier,

556
00:32:28,726 --> 00:32:32,987
which is surprisingly responsive with five to 10 meshes.

557
00:32:39,708 --> 00:32:41,848
I mentioned earlier about our built-in parallel Euler

558
00:32:41,888 --> 00:32:46,289
and TCB rotation tracks on many of our rig controls.

559
00:32:47,460 --> 00:32:50,402
This is a tool to convert the Euler to Quaternion and vice versa.

560
00:32:51,602 --> 00:32:54,844
Either one-to-one key conversion or bake out a keeper frame.

561
00:32:55,524 --> 00:32:59,326
If an animator found weird, wobbly Euler gimbling in something they've already animated,

562
00:32:59,466 --> 00:33:02,908
it's pretty easy to convert a time segment to TCB keys and smooth out their arcs.

563
00:33:08,810 --> 00:33:11,732
Our character team had a subgroup devoted to character customization.

564
00:33:12,594 --> 00:33:15,956
One of the character artists gave me some specifications for a rig

565
00:33:16,356 --> 00:33:19,458
to allow the other customization artists to sculpt body and face shapes.

566
00:33:20,219 --> 00:33:21,660
I worked the rig into our pipeline.

567
00:33:22,581 --> 00:33:24,262
It gets built just like an animation rig,

568
00:33:24,322 --> 00:33:28,185
even though it has a different set of requirements and a different user base.

569
00:33:29,325 --> 00:33:31,307
Our character artists are good at what they do,

570
00:33:32,628 --> 00:33:35,250
but on average they're a little more tech-phobic than the animators.

571
00:33:36,162 --> 00:33:38,283
So their interface for the customization rig

572
00:33:38,303 --> 00:33:40,025
tries to support them with a ton of callbacks

573
00:33:40,045 --> 00:33:42,146
to make sure they're working in the correct pose in the rig

574
00:33:42,507 --> 00:33:44,648
and make sure they're not editing poses with auto key off.

575
00:33:45,789 --> 00:33:49,552
The customization artists work on the rig in local Mac scenes

576
00:33:49,892 --> 00:33:52,935
and save out single poses to be merged

577
00:33:52,955 --> 00:33:54,336
into a master customization rig.

578
00:33:56,077 --> 00:33:58,599
The UI synced scene control selection

579
00:33:58,619 --> 00:34:00,300
with labeled buttons and shaped buttons.

580
00:34:01,021 --> 00:34:03,043
Similar to the animation rig display panel,

581
00:34:03,203 --> 00:34:04,604
the layout is authored in an XML file.

582
00:34:06,242 --> 00:34:07,783
encoded into the rig at build time

583
00:34:07,883 --> 00:34:09,825
and then rendered by the panel when it's opened.

584
00:34:13,647 --> 00:34:16,529
We made extensive use of 3ds Max's custom attributes

585
00:34:16,569 --> 00:34:17,430
in the animation rig.

586
00:34:18,170 --> 00:34:19,731
At its simplest, they're Maya-like,

587
00:34:20,412 --> 00:34:21,853
animatable, user-defined properties

588
00:34:21,913 --> 00:34:23,934
stored in a parameter block.

589
00:34:24,734 --> 00:34:26,936
Max then lets you embed user interfaces

590
00:34:26,996 --> 00:34:28,877
to interact with these user-defined properties.

591
00:34:29,718 --> 00:34:31,359
But it's all MaxScript, so you can embed

592
00:34:31,399 --> 00:34:33,140
some pretty complicated functionality

593
00:34:33,200 --> 00:34:34,321
into these custom attributes.

594
00:34:35,030 --> 00:34:38,910
and they live in the rig so that makes them extremely portable.

595
00:34:44,651 --> 00:34:46,552
I told you this was going to be a post-mortem.

596
00:34:48,352 --> 00:34:51,633
We made a number of decisions during the course of the production that worked out pretty well.

597
00:34:57,694 --> 00:34:59,874
The rigging system was, for the most part, data-driven.

598
00:35:00,594 --> 00:35:02,075
We used XML as our data format.

599
00:35:02,775 --> 00:35:05,056
3ds Max's integration of .NET made this easy.

600
00:35:05,797 --> 00:35:07,797
Everyone has system.xml on their computers.

601
00:35:08,398 --> 00:35:10,498
JSON might have been a better format for data,

602
00:35:11,199 --> 00:35:12,339
but it would have meant distributing

603
00:35:12,859 --> 00:35:14,400
additional DLLs to the artists.

604
00:35:15,400 --> 00:35:18,201
It's easier to do Perforce merges on text data files

605
00:35:18,261 --> 00:35:19,822
over binaries or even over code.

606
00:35:23,984 --> 00:35:26,425
As I mentioned earlier, we used one big metadata file

607
00:35:26,485 --> 00:35:27,665
called rigbuild.xml,

608
00:35:28,445 --> 00:35:30,846
which is a huge file containing a flat list of characters

609
00:35:30,886 --> 00:35:31,326
with sub-it.

610
00:35:32,027 --> 00:35:34,809
sub-element pointers to character-specific XML files.

611
00:35:36,610 --> 00:35:38,091
Everything in the rig was broken down

612
00:35:38,151 --> 00:35:40,373
into text-based data descriptions.

613
00:35:42,234 --> 00:35:44,976
XML files describe their skeletons, layers, sets,

614
00:35:45,156 --> 00:35:47,838
skinning, poses, animations, and where to find all that data.

615
00:35:52,161 --> 00:35:53,562
Looking forward, it might be beneficial

616
00:35:53,602 --> 00:35:55,123
to abstract this data a little further

617
00:35:55,483 --> 00:35:58,345
and have the file point to character-specific meta files

618
00:35:58,945 --> 00:36:01,147
containing the sub-element file locations for each character.

619
00:36:02,040 --> 00:36:04,361
it would make it easier to find what you're looking for in a smaller file.

620
00:36:10,646 --> 00:36:12,167
I think, still on this one.

621
00:36:13,228 --> 00:36:16,671
Including vertex and face data in our skin files was pure win.

622
00:36:17,351 --> 00:36:20,954
Though there is enough information to recreate original meshes and skin wrap

623
00:36:21,534 --> 00:36:22,855
to updated topologies.

624
00:36:23,596 --> 00:36:26,778
One of our tech artists recently used that data to allow customization artists

625
00:36:26,858 --> 00:36:29,640
to preview part meshes in Macs while they construct new armor parts.

626
00:36:30,321 --> 00:36:33,723
In the future, we might add more mesh data, like UVs or vertex normals,

627
00:36:34,283 --> 00:36:38,305
to totally remove the dependency on a clean mesh living in a 3ds Max scene.

628
00:36:39,205 --> 00:36:42,247
But I think we'll probably end up moving the data over to FBX

629
00:36:42,607 --> 00:36:44,708
to make a future switch to Maya easier.

630
00:36:48,250 --> 00:36:49,490
There are two types of artists.

631
00:36:50,891 --> 00:36:53,853
The ones that give way more feedback than possible to respond to,

632
00:36:55,233 --> 00:36:58,175
and those that bang their heads against the tools in silent frustration.

633
00:36:59,562 --> 00:37:04,385
The artists that provide feedback are the ones that help make the tools and rigs better for everyone.

634
00:37:05,345 --> 00:37:08,187
No tool or rig is perfect, and some requests are ridiculous,

635
00:37:08,527 --> 00:37:10,829
but listening, responding, and prioritizing is important.

636
00:37:11,749 --> 00:37:14,491
We can't fix tools if we don't know how frustrating they are to use.

637
00:37:15,191 --> 00:37:19,013
In a perfect world, the technical artists would be using those tools too,

638
00:37:19,113 --> 00:37:22,875
but schedule constraints cause this to happen far less often than desirable.

639
00:37:26,935 --> 00:37:28,276
There's also two kinds of meetings.

640
00:37:28,796 --> 00:37:30,017
Good meetings and bad meetings.

641
00:37:30,658 --> 00:37:32,940
We had a lot of meetings, and most of them were good ones.

642
00:37:33,220 --> 00:37:35,402
Solution-focused, don't veer off topic,

643
00:37:35,442 --> 00:37:37,424
and make sure everyone has all the information they need

644
00:37:37,944 --> 00:37:41,267
to make informed decisions in the meeting and on their own.

645
00:37:42,608 --> 00:37:44,550
We had daily check-ins and bottleneck checks.

646
00:37:44,910 --> 00:37:46,671
I think most studios do this nowadays,

647
00:37:47,092 --> 00:37:49,834
but it wasn't always as regular earlier in my career.

648
00:37:50,975 --> 00:37:53,437
At Zoss, we generically refer to it as Scrum,

649
00:37:53,517 --> 00:37:55,339
but it's not really capital-S Scrum.

650
00:37:56,540 --> 00:37:58,981
Producers tend to focus on checklists of tasks.

651
00:38:00,562 --> 00:38:02,263
In the art pipeline, there are just too many

652
00:38:02,543 --> 00:38:04,344
nested dependencies to be too flexible

653
00:38:04,384 --> 00:38:06,185
or agile with the schedule.

654
00:38:14,349 --> 00:38:16,250
Modular rigging made our timelines feasible.

655
00:38:17,491 --> 00:38:19,532
We can prototype new monsters on existing modules

656
00:38:19,572 --> 00:38:21,433
and branch them later if we need something more unique.

657
00:38:23,134 --> 00:38:24,735
Rigging speed was king when creating

658
00:38:25,175 --> 00:38:26,296
90 plus different monster rigs.

659
00:38:27,573 --> 00:38:31,075
For the animator, everything is familiar and consistent between rigs.

660
00:38:32,256 --> 00:38:34,637
Further along into production, fixes and modifications

661
00:38:35,338 --> 00:38:37,439
to behavior on one rig can propagate to older stuff.

662
00:38:38,400 --> 00:38:41,382
For instance, we made significant fixes to the snake tail rig

663
00:38:41,422 --> 00:38:44,464
to correct flipping issues, and we were able to apply that fix

664
00:38:44,484 --> 00:38:46,645
to the other monsters that use that module.

665
00:38:52,469 --> 00:38:53,709
I sat in the animator bullpen.

666
00:38:54,210 --> 00:38:55,390
I could peek over my monitor

667
00:38:58,052 --> 00:39:01,194
or over the cubicle wall to communicate with the animators

668
00:39:01,214 --> 00:39:02,554
who were using the rigs that I was building.

669
00:39:03,955 --> 00:39:05,496
They could do the same to ask me questions.

670
00:39:05,896 --> 00:39:08,497
It required a minimum of energy to hop five feet

671
00:39:08,517 --> 00:39:09,498
to help someone at their desk.

672
00:39:13,540 --> 00:39:15,501
Finally, we had a ton of experience on our team.

673
00:39:16,361 --> 00:39:18,202
Two out of six of our senior animators

674
00:39:18,242 --> 00:39:20,743
were former lead animators at their previous studios.

675
00:39:21,584 --> 00:39:22,804
Across the rest of the art team,

676
00:39:22,844 --> 00:39:25,906
we have so many 10-year game dev veterans.

677
00:39:26,429 --> 00:39:28,510
When you're talking to people with this level of experience,

678
00:39:28,950 --> 00:39:30,491
it makes explanations much easier.

679
00:39:31,311 --> 00:39:33,593
Veteran artists often have good technical chops.

680
00:39:33,673 --> 00:39:35,894
They had to, to be pretty technical,

681
00:39:35,974 --> 00:39:38,976
to have been a game artist back in the day.

682
00:39:40,717 --> 00:39:42,798
Sorry for the cliche, but experienced developers

683
00:39:42,858 --> 00:39:45,360
are the most valuable asset a game studio has.

684
00:39:51,509 --> 00:39:53,970
The politically correct version of what went wrong,

685
00:39:54,230 --> 00:39:57,070
but I believe that every mistake is a learning experience.

686
00:40:00,171 --> 00:40:02,951
We should have pushed harder to adopt Maya as our DCC.

687
00:40:04,111 --> 00:40:07,092
Working around 3ds Max's limitations is a full-time job.

688
00:40:08,112 --> 00:40:11,273
For example, 3ds Max has various UI features

689
00:40:11,313 --> 00:40:12,393
that are just not scriptable.

690
00:40:13,513 --> 00:40:15,053
Also, certain features like skin

691
00:40:15,113 --> 00:40:18,634
are only accessible in script if it's selected in the UI.

692
00:40:19,852 --> 00:40:21,914
And for speed, complex rigs such as ours

693
00:40:21,974 --> 00:40:23,515
can be downright sluggish in Max.

694
00:40:25,677 --> 00:40:27,539
Referenced rigs would have made rig updates

695
00:40:27,639 --> 00:40:28,620
infinitely easier

696
00:40:29,080 --> 00:40:30,761
and may have made some things possible

697
00:40:31,542 --> 00:40:33,564
to update that we were just too afraid to do

698
00:40:33,644 --> 00:40:35,165
because of the time, labor,

699
00:40:35,346 --> 00:40:36,827
and potential for broken animations

700
00:40:36,887 --> 00:40:37,848
after a batch update.

701
00:40:39,129 --> 00:40:39,369
Ahem.

702
00:40:44,934 --> 00:40:46,736
We should have pushed harder for better game tech.

703
00:40:48,097 --> 00:40:52,602
such as cloth, dangly bits, hair, foot and arm IK, and state machines.

704
00:40:54,183 --> 00:40:57,706
All we had was export the entire skeleton as an FK animation,

705
00:40:57,867 --> 00:41:00,329
and a programmer tied a lot of it together behind a wall of code.

706
00:41:01,930 --> 00:41:06,175
We used RAD Game Tools' Granny as an animation platform,

707
00:41:06,195 --> 00:41:10,238
but we weren't even using all the features offered in that system.

708
00:41:17,398 --> 00:41:19,299
Even though we fought against it until the end,

709
00:41:19,719 --> 00:41:21,740
eventually pretty much every humanoid

710
00:41:22,520 --> 00:41:25,061
and player character used a single animation set.

711
00:41:26,121 --> 00:41:28,842
The set grew and grew and had infinite refinement passes,

712
00:41:29,262 --> 00:41:32,343
but at the cost of variation among races and genders.

713
00:41:33,063 --> 00:41:34,584
The physical and skeletal variation

714
00:41:34,604 --> 00:41:36,404
between races and genders had to be reduced

715
00:41:36,424 --> 00:41:38,925
to almost nothing because our retargeting couldn't handle it.

716
00:41:39,886 --> 00:41:41,826
We had poor man's arm IK for females

717
00:41:41,926 --> 00:41:43,007
using two-handed weapons,

718
00:41:43,247 --> 00:41:44,887
but it was difficult to set up or edit.

719
00:41:51,960 --> 00:41:55,282
There was a word I saw players use to describe our animation in beta.

720
00:41:55,962 --> 00:41:56,462
Janky.

721
00:41:58,143 --> 00:41:59,704
In my opinion, our animations look

722
00:42:00,165 --> 00:42:02,686
pretty consistently fluid and believable in max,

723
00:42:03,226 --> 00:42:06,168
but the animations became extremely compressed after export.

724
00:42:07,429 --> 00:42:09,310
We experimented with flatter hierarchies,

725
00:42:10,331 --> 00:42:12,672
but that caused issues with

726
00:42:13,473 --> 00:42:15,914
blending upper body and lower body motion.

727
00:42:17,734 --> 00:42:20,876
and it was during our flirtation with impacts driven by code,

728
00:42:20,916 --> 00:42:22,917
which didn't understand a non-standard hierarchy.

729
00:42:24,118 --> 00:42:26,319
We did have a processor written that was supposed to

730
00:42:27,079 --> 00:42:31,022
isolate and compress separate branches of that skeleton hierarchy differently,

731
00:42:31,522 --> 00:42:33,343
based on the motion in each animation,

732
00:42:33,643 --> 00:42:35,604
but I don't think it ever made it into our pipeline.

733
00:42:38,086 --> 00:42:40,267
Compression was worst where it mattered the most.

734
00:42:41,207 --> 00:42:44,229
Feet, which were supposed to be planted on the ground, jittered visibly.

735
00:42:45,378 --> 00:42:54,062
Weapon arcs at the end of a long chain from the root up the spine down the arm terminating in a weapon bone became zigzag W shapes instead of smooth arcs.

736
00:42:56,043 --> 00:43:02,866
Our exporter, in conjunction with 3ds Max, sampled subframes, making single frame mode switches problematic.

737
00:43:03,967 --> 00:43:09,810
Similarly, we had fake parent space switches for sheathing a weapon temporarily to free a hand to cast a spell.

738
00:43:10,935 --> 00:43:17,456
And that looked fine in Max but never worked perfectly in the game because the sheathed weapon was still a child of the hand.

739
00:43:19,597 --> 00:43:20,997
The sheathed weapon was still a child of the hand.

740
00:43:22,457 --> 00:43:23,597
For a game of this caliber,

741
00:43:26,638 --> 00:43:28,879
being limited to so few bones was harsh.

742
00:43:29,819 --> 00:43:31,879
At launch, we had no skeletal LODs.

743
00:43:32,739 --> 00:43:35,900
We made a lot of sacrifices and compromises for the bone limitations.

744
00:43:37,040 --> 00:43:39,401
We really could have used more than three bones for a cape.

745
00:43:40,209 --> 00:43:42,771
four bones for a robe or two bones for hair,

746
00:43:43,811 --> 00:43:46,633
or even nine bones for a hand instead of a full 16.

747
00:43:50,096 --> 00:43:53,899
Full voiceover and first person view

748
00:43:53,959 --> 00:43:55,640
were tacked on late in development

749
00:43:56,221 --> 00:43:57,942
and saw their scope creep wide open

750
00:43:57,962 --> 00:44:00,164
without getting the tech or manpower to support it.

751
00:44:01,985 --> 00:44:03,567
We released the game at launch

752
00:44:04,067 --> 00:44:05,828
with only a single bone flappy jaw.

753
00:44:07,225 --> 00:44:11,648
We finally adopted face effects for NPC conversation post-launch

754
00:44:11,708 --> 00:44:14,469
but really should have planned better and shipped with it in the first place.

755
00:44:18,431 --> 00:44:21,693
Something I've been interested in exploring lately is

756
00:44:21,773 --> 00:44:25,155
some studios moving away from a rig that does everything at all times

757
00:44:25,775 --> 00:44:29,717
and using a lighter base rig with extendable control construction tools.

758
00:44:30,877 --> 00:44:34,399
Our animation rig was a monstrosity of confusing panels and options.

759
00:44:35,320 --> 00:44:36,260
It was heavy and slow.

760
00:44:37,003 --> 00:44:44,589
and the built-in configuration options made overhauling modules impossible without breaking existing animations.

761
00:44:47,410 --> 00:44:50,693
A lighter, simple rig would basically just be an FK rig.

762
00:44:51,053 --> 00:44:55,756
You want IK arms? Push the button to construct an IK control overlay on the fly.

763
00:44:56,677 --> 00:44:59,599
And then, possibly collapse it back to FK when you're done.

764
00:45:00,359 --> 00:45:03,901
Especially if we move to adopt motion capture in the future, this could be the way to go.

765
00:45:08,411 --> 00:45:12,413
As mentioned several times, 3ds Max does not have usable referencing.

766
00:45:13,314 --> 00:45:15,835
So our rigs were duplicated in every animation scene.

767
00:45:16,795 --> 00:45:19,877
We should have implemented frequent automatic batch rig updates

768
00:45:20,037 --> 00:45:23,539
to ensure all of our animation scenes were always on the up-to-date rigs.

769
00:45:24,379 --> 00:45:27,981
When things broke, we would have been able to find the offending systems

770
00:45:28,081 --> 00:45:30,503
as soon as they failed, rather than sometimes months later.

771
00:45:38,054 --> 00:45:40,155
Always listen to your instincts, otherwise known as

772
00:45:40,235 --> 00:45:41,515
don't believe the artists.

773
00:45:42,256 --> 00:45:44,757
Animators swore they didn't want a control picker UI

774
00:45:44,817 --> 00:45:46,537
for three years until they did.

775
00:45:47,938 --> 00:45:50,159
Part of that was different animators coming onto the team

776
00:45:50,199 --> 00:45:51,779
with different methods and styles of working.

777
00:45:56,081 --> 00:45:59,022
Always assume animators need more than one character

778
00:45:59,062 --> 00:45:59,442
in a scene.

779
00:46:00,603 --> 00:46:02,624
Our namespace tool had too many limitations

780
00:46:02,864 --> 00:46:04,504
and most tools were written with the assumption

781
00:46:04,524 --> 00:46:06,965
that there would only be a single rig in a Mac scene.

782
00:46:08,017 --> 00:46:11,597
Again, the animators said that they would never need more than one rig in a scene.

783
00:46:14,098 --> 00:46:16,499
Because there was no tech to support paired animations.

784
00:46:17,199 --> 00:46:20,840
Later on, we realized we needed to sync multiple characters in cutscenes

785
00:46:21,680 --> 00:46:23,020
and mount rider animations.

786
00:46:23,360 --> 00:46:25,261
The hacky namespace system I put together

787
00:46:26,001 --> 00:46:29,282
for one-off cutscenes ended up being used for entire mount rider suites

788
00:46:29,962 --> 00:46:32,362
which then made it difficult to update the rigs in those scenes

789
00:46:32,382 --> 00:46:34,183
with tools that didn't support the namespaces.

790
00:46:34,803 --> 00:46:36,563
It was like an animator tools arms race.

791
00:46:40,785 --> 00:46:47,148
I started out with good intentions in keeping our MaxScript tools strictly layered between library functions, tools functions, and UI functionality.

792
00:46:47,749 --> 00:46:51,751
But eventually random functions in the tools layer ended up being cross-used in other tools.

793
00:46:52,931 --> 00:47:00,035
Encapsulation of functions into structs wasn't a thing that was obvious in 2008, but became standard across the tech art forums by 2011.

794
00:47:01,476 --> 00:47:08,260
Some of our tools, especially UIs, were updated to this format, but many old tools and libraries remain as big clumps of global functions.

795
00:47:13,715 --> 00:47:16,716
The iteration cycle on our customization rig was pretty bad.

796
00:47:17,357 --> 00:47:21,818
It took 20 to 30 minutes per iteration from a max side fix to seeing it in game,

797
00:47:22,239 --> 00:47:23,859
especially if I had to rebuild the rig.

798
00:47:24,819 --> 00:47:28,341
Building the template skeleton, building deformation rig, building the animation skeleton,

799
00:47:28,361 --> 00:47:30,702
and merging in the raw meshes only took 30 seconds.

800
00:47:31,682 --> 00:47:35,944
The slowest part of the build was loading the skin weights onto dozens of meshes.

801
00:47:35,984 --> 00:47:36,804
It took 10 minutes.

802
00:47:37,964 --> 00:47:39,745
I think part of that huge limitation is...

803
00:47:40,846 --> 00:47:42,508
Part of that was the huge limitation in Max.

804
00:47:43,049 --> 00:47:47,834
The skin modifier requires that it is active in the modifier panel to do any scripted modifications.

805
00:47:48,674 --> 00:47:50,496
Even with redraw off, it's slow.

806
00:47:51,297 --> 00:47:52,718
Then the export took 5 minutes.

807
00:47:53,439 --> 00:47:56,602
And there is no hot loading of the customization rig in-game,

808
00:47:56,883 --> 00:47:59,065
so we needed to fully quit and restart the game,

809
00:47:59,085 --> 00:48:01,267
which took another 5 to 10 minutes on our dev server.

810
00:48:06,037 --> 00:48:08,538
Finally, for most of the project,

811
00:48:08,578 --> 00:48:10,059
there was no technical art team.

812
00:48:11,720 --> 00:48:13,581
And what did exist was not seen as being

813
00:48:13,621 --> 00:48:15,962
at the same level of the other art subdisciplines.

814
00:48:16,922 --> 00:48:18,803
We needed more tech artists earlier.

815
00:48:20,104 --> 00:48:21,604
For three years, it was just me.

816
00:48:23,365 --> 00:48:25,366
And I was assigned to report to the lead animator.

817
00:48:26,487 --> 00:48:27,967
For the next two years after that,

818
00:48:28,147 --> 00:48:29,868
it was just me and a junior tech artist,

819
00:48:30,768 --> 00:48:31,969
both under the lead animator.

820
00:48:33,638 --> 00:48:36,040
We were not seen as equal as other disciplines,

821
00:48:36,160 --> 00:48:38,962
and therefore had little voice or advocation in the studio.

822
00:48:44,746 --> 00:48:46,387
Finally, just a couple months before launch,

823
00:48:47,347 --> 00:48:48,728
we hired a lead technical artist.

824
00:48:49,749 --> 00:48:52,350
Merged one tools programmer and one technical modeler

825
00:48:52,430 --> 00:48:54,332
onto the team, and hired another tech artist

826
00:48:54,372 --> 00:48:55,412
with a programming background.

827
00:48:55,913 --> 00:48:57,013
But it was too little, too late.

828
00:48:57,514 --> 00:48:58,354
By the time this happened,

829
00:48:58,394 --> 00:48:59,935
we were in code and art lock for launch.

830
00:49:04,742 --> 00:49:07,524
The Elder Scrolls Online has been in release for 11 months,

831
00:49:07,944 --> 00:49:10,726
but as a live MMO, we've released tons of new content

832
00:49:10,766 --> 00:49:11,746
and features since launch.

833
00:49:12,707 --> 00:49:15,309
Xenomax recently announced that we're going to transition

834
00:49:15,329 --> 00:49:17,870
to buy-to-play, which means there will no longer be

835
00:49:17,910 --> 00:49:19,551
a monthly subscription required to play.

836
00:49:20,151 --> 00:49:23,053
And we're looking forward to our imminent launch

837
00:49:23,093 --> 00:49:24,974
for PlayStation 4 and Xbox One.

838
00:49:24,994 --> 00:49:31,338
I wanted to give a shout out to these fine folks

839
00:49:31,498 --> 00:49:32,719
who contributed to the game.

840
00:49:36,002 --> 00:49:37,242
And... what time is it?

841
00:49:39,343 --> 00:49:39,944
Ten minutes left?

842
00:49:43,265 --> 00:49:44,106
Anybody have questions?

843
00:50:01,694 --> 00:50:02,775
Okay, thanks for coming.

844
00:50:03,535 --> 00:50:05,156
And hope I didn't put anybody to sleep.

845
00:50:05,790 --> 00:50:06,030
Hello?

846
00:50:06,230 --> 00:50:08,392
Hey, got one for you over here.

847
00:50:08,452 --> 00:50:08,632
Oh, hi.

848
00:50:08,652 --> 00:50:09,473
How are you doing?

849
00:50:10,554 --> 00:50:11,635
Good talk, thank you very much.

850
00:50:12,916 --> 00:50:16,159
Yeah, so you were talking about trying to push for Maya

851
00:50:16,540 --> 00:50:17,400
and adopting that.

852
00:50:17,821 --> 00:50:19,722
Would you see that as a realistic goal

853
00:50:19,782 --> 00:50:21,264
this far into the project?

854
00:50:22,105 --> 00:50:23,506
I'm assuming it's a live game that's

855
00:50:23,546 --> 00:50:24,907
going to have continual support.

856
00:50:25,630 --> 00:50:29,272
Right, well we are looking forward to a future product.

857
00:50:30,933 --> 00:50:40,577
And, you know, nowadays with FBX it's fairly easy to get stuff from Max to Maya.

858
00:50:41,397 --> 00:50:44,599
As long as the rig on the other end kind of supports the input.

859
00:50:44,679 --> 00:50:48,520
So, we're talking about doing some of that.

860
00:50:49,001 --> 00:50:53,503
Just like rebuilding our system in Maya and then loading all the animations into it and seeing what happens.

861
00:50:54,537 --> 00:50:58,421
So further on in that, I've worked in environments

862
00:50:58,441 --> 00:51:01,844
where 3ds Max and Maya are both used in the same environment,

863
00:51:01,964 --> 00:51:03,466
and it can be a little tricky.

864
00:51:03,946 --> 00:51:07,009
So if that was adopted for the animation pipeline,

865
00:51:07,089 --> 00:51:08,750
would you also push for that being adopted

866
00:51:08,810 --> 00:51:10,372
by the environment and the rest of the studio?

867
00:51:11,713 --> 00:51:12,414
Probably not.

868
00:51:12,854 --> 00:51:15,477
It would mostly be for the animation team.

869
00:51:15,517 --> 00:51:16,618
So they keep that separate.

870
00:51:16,798 --> 00:51:17,098
Yeah.

871
00:51:17,639 --> 00:51:17,719
OK.

872
00:51:17,739 --> 00:51:18,439
Yeah.

873
00:51:18,880 --> 00:51:19,701
Well, thank you very much.

874
00:51:22,589 --> 00:51:28,071
Uh, level questions. You mentioned about IK, so which method do you use to solve IK problem?

875
00:51:28,751 --> 00:51:29,091
Which what?

876
00:51:29,472 --> 00:51:32,453
I mean, you use which method to solve a universal kinematic problem?

877
00:51:32,513 --> 00:51:36,695
You use, you only use the built-in IK handler, or you have your own?

878
00:51:36,715 --> 00:51:39,516
No, there's a built-in solver, whatever the...

879
00:51:40,516 --> 00:51:40,776
Okay.

880
00:51:41,467 --> 00:51:43,067
hierarchy independent or whatever it's called.

881
00:51:43,167 --> 00:51:46,549
And another question is, I heard a saying that

882
00:51:46,849 --> 00:51:50,690
if you want to import your animation into game,

883
00:51:51,130 --> 00:51:54,032
you need to remove the IK before you do the import?

884
00:51:54,412 --> 00:51:57,673
Well, it just samples the skeleton as...

885
00:51:59,114 --> 00:52:00,954
as if the whole thing was just an FK.

886
00:52:01,935 --> 00:52:02,795
So, I mean...

887
00:52:03,600 --> 00:52:07,403
I know you need to bake all the animation into frame and then import.

888
00:52:07,423 --> 00:52:11,846
Do you think it is necessary to remove the IK before you import the—

889
00:52:12,026 --> 00:52:17,289
No, the exporter just samples whatever the skeleton is doing at any particular frame.

890
00:52:17,309 --> 00:52:19,150
It doesn't matter how the skeleton is driven.

891
00:52:20,351 --> 00:52:22,412
Like I have that one tool, the dynamics tool,

892
00:52:22,452 --> 00:52:26,655
where I'm, you know, changing the constraint on the skeleton to go from—

893
00:52:27,968 --> 00:52:31,170
you know, from the regular rig behavior to a whole separate set of controls

894
00:52:31,631 --> 00:52:36,514
that have no hierarchy whatsoever so that you can break skeletons up or, you know,

895
00:52:37,275 --> 00:52:42,239
did some crazy stuff with, you know, with golems that are made of rocks and stuff,

896
00:52:42,279 --> 00:52:44,120
make the rocks all fall apart and tumble around.

897
00:52:44,661 --> 00:52:49,264
And the, hierarchically in Max, that's still a hierarchy,

898
00:52:49,845 --> 00:52:54,588
but controlled entirely by a separate set of controllers, controls.

899
00:52:56,582 --> 00:52:59,924
The thing is, I think if the animation is down,

900
00:53:00,405 --> 00:53:01,846
whether IK is existing,

901
00:53:01,926 --> 00:53:04,627
it doesn't affect the animation itself,

902
00:53:04,748 --> 00:53:06,489
but it also takes some CPU time.

903
00:53:06,589 --> 00:53:09,971
So I think to the efficiency part, maybe...

904
00:53:10,671 --> 00:53:12,753
I heard a thing that if you want to, like,

905
00:53:12,773 --> 00:53:16,255
improve your efficiency, you need to remove the IK,

906
00:53:16,275 --> 00:53:17,296
but I don't know.

907
00:53:17,356 --> 00:53:20,758
Yeah, we don't have any IK in game side in the client.

908
00:53:21,598 --> 00:53:22,739
So it's all FK, yeah.

909
00:53:26,092 --> 00:53:26,472
Anybody else?

910
00:53:29,515 --> 00:53:29,795
Hi.

911
00:53:30,655 --> 00:53:33,178
I'm not sure this is a relevant question,

912
00:53:33,278 --> 00:53:35,820
but, like, on the Elder Scrolls line,

913
00:53:35,860 --> 00:53:38,742
there's a lot of dialogue for NPC,

914
00:53:39,123 --> 00:53:41,905
and I know they have, like, lip sync on it.

915
00:53:42,505 --> 00:53:46,709
And that animation was, like, manually created by an animator,

916
00:53:46,889 --> 00:53:50,092
or there was, like, kind of a technical thing going on?

917
00:53:50,412 --> 00:53:53,475
Yeah, well, at launch, all we had was the jaw flapping.

918
00:53:54,026 --> 00:53:59,651
like one bone, and that was driven by just the audio waveforms.

919
00:53:59,991 --> 00:54:01,092
Okay, thank you.

920
00:54:01,512 --> 00:54:03,094
After launch, we implemented face effects,

921
00:54:03,114 --> 00:54:07,617
and that was all generated procedurally,

922
00:54:07,898 --> 00:54:10,460
you know, automatically by the face effects system.

923
00:54:10,840 --> 00:54:11,461
Okay, thank you.

