1
00:00:05,770 --> 00:00:07,167
So here we go.

2
00:00:10,049 --> 00:00:13,731
Hello everyone, my name is Marco Renzo.

3
00:00:13,731 --> 00:00:15,152
Welcome to our presentation,

4
00:00:15,152 --> 00:00:19,715
the Animation Pipeline of Mario Bros. Rabbit Kingdom Battle.

5
00:00:19,715 --> 00:00:22,317
I'm the Animation Director at Ubisoft Milan

6
00:00:22,317 --> 00:00:24,558
and I'm here today with Tommaso Sanguini,

7
00:00:24,558 --> 00:00:26,940
our Animation Technical Director at Ubisoft Milan.

8
00:00:26,940 --> 00:00:30,702
And it's amazing to have you all here today.

9
00:00:30,702 --> 00:00:34,164
We are super, super excited to be able to show you

10
00:00:34,164 --> 00:00:35,765
some of the tools we've been working on

11
00:00:35,765 --> 00:00:36,786
in the past few years.

12
00:00:37,486 --> 00:00:46,131
and talk a bit about the reason why they've been necessary in the first place.

13
00:00:46,131 --> 00:00:50,193
But before we start, let me show you a quick trailer for those of you who do not know the game.

14
00:00:50,193 --> 00:00:58,838
Who do you think you are? You should kneel!

15
00:00:58,838 --> 00:01:01,699
I'm the star! You are nothing but a parody!

16
00:01:01,699 --> 00:01:06,062
I'll find you a good role in a tragedy!

17
00:01:06,992 --> 00:01:12,294
In a million years ago, the only words you know

18
00:01:12,294 --> 00:01:17,816
By heart will touch your princess's heart

19
00:01:17,816 --> 00:01:20,637
And you will be torn apart

20
00:01:20,637 --> 00:01:24,678
You think you win this tournament

21
00:01:24,678 --> 00:01:27,859
I swear you do, I swear

22
00:01:27,859 --> 00:01:30,960
You so half-heart, half-heart

23
00:01:30,960 --> 00:01:34,722
You think you win this tournament

24
00:01:41,248 --> 00:02:01,354
So, what kind of game is exactly Mario Plus Rabbids Kingdom Battle?

25
00:02:01,354 --> 00:02:07,276
Well, it's a Nintendo Switch exclusive, a turn-based tactical adventure starring Ubisoft

26
00:02:07,276 --> 00:02:09,417
Rabbids and of course Mario and his friends.

27
00:02:10,115 --> 00:02:16,624
The project has been developed in the last four years by Ubisoft Milan and Ubisoft Paris in collaboration with Nintendo.

28
00:02:16,624 --> 00:02:19,529
And the gameplay is composed by two main parts.

29
00:02:19,529 --> 00:02:26,279
There's an exploration where the player is free to move around, solve puzzles, find coins.

30
00:02:27,428 --> 00:02:33,335
and collect items such as new weapons, artworks, and music tracks.

31
00:02:33,335 --> 00:02:35,277
And a tactical combat phase.

32
00:02:35,277 --> 00:02:39,061
And here the player can plan the strategy to win the battles.

33
00:02:39,061 --> 00:02:40,522
You can use different characters,

34
00:02:40,522 --> 00:02:42,885
choose different moving and attack abilities.

35
00:02:42,885 --> 00:02:48,972
Different kind of weapons and fight various kind of enemies.

36
00:02:53,594 --> 00:02:57,535
and unlock and upgrade skills that will help you

37
00:02:57,535 --> 00:03:03,417
progress through the game and beat increasingly hard fights.

38
00:03:03,417 --> 00:03:06,317
So here's a quick overview of what we'll discuss today.

39
00:03:06,317 --> 00:03:07,658
The talk will be split in two parts.

40
00:03:07,658 --> 00:03:09,938
In the first one, I'll show you how this project

41
00:03:09,938 --> 00:03:12,599
came to life and what kind of goals and constraints

42
00:03:12,599 --> 00:03:15,180
we had to consider when planning our pipeline.

43
00:03:16,028 --> 00:03:18,730
This would be key to understand how these factors translated

44
00:03:18,730 --> 00:03:19,551
into our tools.

45
00:03:19,551 --> 00:03:22,993
In the second part, in fact, starting

46
00:03:22,993 --> 00:03:24,974
from these requirements, Tomaso will

47
00:03:24,974 --> 00:03:27,616
discuss the technical implementation of some of them,

48
00:03:27,616 --> 00:03:30,778
showing the functionalities that made this project possible.

49
00:03:30,778 --> 00:03:32,539
So where did we start?

50
00:03:32,539 --> 00:03:37,041
We started from here, a paper prototype,

51
00:03:37,041 --> 00:03:41,004
and then a digital one made with Unity 3D and a pipeline

52
00:03:41,004 --> 00:03:41,844
based on MotionBuilder.

53
00:03:42,838 --> 00:03:47,120
And I still remember how surreal at the moment I was told we were going to

54
00:03:47,120 --> 00:03:52,921
work with Mario was. A game of Mario and the Rabbids. It just sounded insane.

55
00:03:52,921 --> 00:03:57,042
But as crazy as it sounded, we sure didn't want to mess it up.

56
00:03:57,042 --> 00:04:00,623
I mean, you don't get every day the chance to animate Mario,

57
00:04:00,623 --> 00:04:03,924
let alone to present a prototype staring him to Nintendo itself.

58
00:04:03,924 --> 00:04:08,586
That's why we wanted to be as respectful as possible with both brands.

59
00:04:09,986 --> 00:04:12,089
Nintendo and Ubisoft IPs.

60
00:04:12,089 --> 00:04:14,613
So we started meticulously previous games,

61
00:04:14,613 --> 00:04:18,799
looking for references and going through them frame by frame

62
00:04:18,799 --> 00:04:22,784
and try to learn as much as we could as fast as we could.

63
00:04:22,784 --> 00:04:27,010
Because the plan was to show something playable in just a few weeks.

64
00:04:28,198 --> 00:04:30,799
So we managed to pack a prototype

65
00:04:30,799 --> 00:04:32,920
and present it to Miyamoto-san.

66
00:04:32,920 --> 00:04:35,040
And his reaction was great.

67
00:04:35,040 --> 00:04:37,781
He did not expect something playable

68
00:04:37,781 --> 00:04:40,242
and he was actually surprised by the amount

69
00:04:40,242 --> 00:04:41,842
of detail we put into it.

70
00:04:41,842 --> 00:04:45,483
But he also added something during that meeting,

71
00:04:45,483 --> 00:04:48,864
something that would completely change

72
00:04:48,864 --> 00:04:50,365
our approach to the game.

73
00:04:50,365 --> 00:04:53,525
He literally told us, make a Mario game

74
00:04:53,525 --> 00:04:55,066
that has never been done before.

75
00:04:57,793 --> 00:05:04,161
meaning to be innovative, proposing something new, fresh, somewhat unique and unusual.

76
00:05:04,161 --> 00:05:13,051
And receiving this feedback, we realized that he was encouraging us to fully express ourselves,

77
00:05:13,051 --> 00:05:16,976
to get out of our comfort zone and try the unexpected.

78
00:05:17,774 --> 00:05:24,388
And we deeply thought about his advices and defined what became the core pillars of our game,

79
00:05:24,388 --> 00:05:29,478
based on our passions as game makers, of course, but also as gamers.

80
00:05:31,122 --> 00:05:34,224
So first one, which shows an unexplored genre

81
00:05:34,224 --> 00:05:37,046
for both the Mario and the Rabbid IPs?

82
00:05:37,046 --> 00:05:40,107
And as you can imagine, this decision brought challenges.

83
00:05:40,107 --> 00:05:43,950
First of all, it's a genre usually considered as complex

84
00:05:43,950 --> 00:05:46,571
and for a very specific public of dedicated players.

85
00:05:46,571 --> 00:05:49,473
And secondly, it involves many new mechanics

86
00:05:49,473 --> 00:05:51,154
and interactions between characters.

87
00:05:52,003 --> 00:05:55,506
Now, from an animation point of view, this is a huge, huge deal.

88
00:05:55,506 --> 00:06:01,210
Suddenly, not only we had to bring to life probably the most iconic character of the whole industry,

89
00:06:01,210 --> 00:06:05,554
but also make him perform actions he had never performed before

90
00:06:05,554 --> 00:06:09,897
and make him look believable and acceptable by the fans.

91
00:06:09,897 --> 00:06:13,800
Now, add the rabbits to the equation and...

92
00:06:13,800 --> 00:06:14,541
It was challenging.

93
00:06:16,593 --> 00:06:20,894
Once we decided the genre, we focused on the mood we wanted for the bottles.

94
00:06:20,894 --> 00:06:24,496
And have you ever played with water guns in a house

95
00:06:24,496 --> 00:06:29,838
summer afternoon or maybe with the snowballs during the winter?

96
00:06:29,838 --> 00:06:33,339
That's the kind of mood we wanted to convey. We wanted

97
00:06:33,339 --> 00:06:36,420
to be colorful, we wanted to be playful, joyful.

98
00:06:37,329 --> 00:06:40,611
And the video here shows the very first proof of concept

99
00:06:40,611 --> 00:06:42,512
of our core system.

100
00:06:42,512 --> 00:06:45,533
It should give you an idea of the tone we set

101
00:06:45,533 --> 00:06:48,515
for the whole combat system of the game.

102
00:06:48,515 --> 00:06:50,816
And then cartels.

103
00:06:51,886 --> 00:06:56,588
Our goal was to communicate their personalities and let them feel well grounded into the world.

104
00:06:56,588 --> 00:07:01,911
And as I said earlier, having Nintendo characters performing new actions was a challenge by

105
00:07:01,911 --> 00:07:07,954
itself, but at least their personality is well defined, with tons of references to study

106
00:07:07,954 --> 00:07:09,054
and analyze.

107
00:07:09,054 --> 00:07:15,737
The rabbits, however, historically have always had a generic personality, and the challenge

108
00:07:15,737 --> 00:07:19,559
we set for ourselves was to make each one of them feel unique.

109
00:07:20,125 --> 00:07:25,706
We did not want them to simply cosplay as their Nintendo counterparts.

110
00:07:25,706 --> 00:07:30,207
We want them to have a unique personality, thought process, and acting choices,

111
00:07:30,207 --> 00:07:32,328
which is basically a dream for an animator.

112
00:07:32,328 --> 00:07:41,110
Okay, so we identified our core pillars, tactical genre, hide-and-seek mood, unique characters.

113
00:07:41,110 --> 00:07:44,350
It was time to implement them into the game and focus on the mechanics.

114
00:07:45,282 --> 00:07:51,769
On our side, on the animation side, to be able to achieve these goals, we had to first

115
00:07:51,769 --> 00:07:55,734
and foremost answer a simple yet complex question.

116
00:07:55,734 --> 00:07:58,978
How do we mix and balance characters so different?

117
00:07:58,978 --> 00:08:01,621
I mean, just look at that.

118
00:08:02,109 --> 00:08:07,753
And let's be honest here, I guess the reaction most people have when they hear for the first

119
00:08:07,753 --> 00:08:14,137
time about a game mixing the Mario universe and the Rabbids is at the very least surprise,

120
00:08:14,137 --> 00:08:15,658
maybe confusion.

121
00:08:15,658 --> 00:08:20,821
So it was obvious that it was of the utmost importance for us to find a way to mix these

122
00:08:20,821 --> 00:08:25,164
two worlds in a way that felt new and fresh, but also believable.

123
00:08:25,164 --> 00:08:30,307
And the way we approached this problem was letting the two brands mutually influence

124
00:08:30,307 --> 00:08:30,708
each other.

125
00:08:31,553 --> 00:08:34,957
For example, from Mario, like I said earlier, the Rabbids gain a strong personality and

126
00:08:34,957 --> 00:08:36,700
a unique personality.

127
00:08:36,700 --> 00:08:41,085
Every Rabbid hero is a parody or an exaggerated version of the Nintendo counterpart.

128
00:08:41,085 --> 00:08:44,270
But we didn't stop there, of course.

129
00:08:44,270 --> 00:08:49,557
In fact, the usual clarity of a Nintendo character's posing has been applied also to the Rabbids.

130
00:08:50,053 --> 00:08:53,676
strong line of actions, clear silhouette, great readability,

131
00:08:53,676 --> 00:08:57,740
the concept of posing as a mean to communicate gameplay rules

132
00:08:57,740 --> 00:09:00,002
are all state-of-the-art elements in Mario games.

133
00:09:00,002 --> 00:09:02,544
And these elements have been key for us

134
00:09:02,544 --> 00:09:05,586
because they made the actions read clearly

135
00:09:05,586 --> 00:09:08,569
from the gameplay camera, which in our case is quite far away,

136
00:09:08,569 --> 00:09:12,092
and communicating mechanics without overloading the player

137
00:09:12,092 --> 00:09:13,573
with information from the UI.

138
00:09:15,283 --> 00:09:16,845
Here's some examples with the rabbits.

139
00:09:16,845 --> 00:09:19,087
And their shapes are challenging.

140
00:09:19,087 --> 00:09:21,228
Huge head, very short legs.

141
00:09:21,228 --> 00:09:23,010
And to push their poses, we focus

142
00:09:23,010 --> 00:09:26,573
on the line of action of the two main masses, head and torso,

143
00:09:26,573 --> 00:09:29,675
and use the ears to strengthen the line,

144
00:09:29,675 --> 00:09:32,518
like in the poses here of a rabbit Luigi and a rabbit

145
00:09:32,518 --> 00:09:37,061
Yoshi, for example, or to create a rhythm with S curves going

146
00:09:37,061 --> 00:09:39,643
through their bodies, like in the case of rabbit Peter

147
00:09:39,643 --> 00:09:40,384
and rabbit Mario.

148
00:09:42,095 --> 00:09:45,577
The timing and spacing have been affected

149
00:09:45,577 --> 00:09:46,918
by this mix as well.

150
00:09:46,918 --> 00:09:50,621
In most cases, they've been inspired by Mario.

151
00:09:50,621 --> 00:09:54,845
For example, cycles, damage animations, locomotion speed

152
00:09:54,845 --> 00:09:58,367
have all been set and tuned using Mario as a reference

153
00:09:58,367 --> 00:10:00,809
since he's always present in the party.

154
00:10:00,809 --> 00:10:03,511
As a result, Rabbids are now more organic

155
00:10:03,511 --> 00:10:05,873
and way less snappy compared to the past

156
00:10:05,873 --> 00:10:08,715
because, generally speaking, their animations last longer.

157
00:10:09,790 --> 00:10:11,831
Here's an example, two walks,

158
00:10:11,831 --> 00:10:13,792
and if you look at Rabbit Peach,

159
00:10:13,792 --> 00:10:16,574
you can notice how her walk is much slower

160
00:10:16,574 --> 00:10:19,515
compared to the typical generic walk of the past.

161
00:10:19,515 --> 00:10:21,917
And one of the reasons we made it this way,

162
00:10:21,917 --> 00:10:25,879
that it just felt more natural when coupled with Mario.

163
00:10:27,714 --> 00:10:30,037
Here's another example with the damage animation.

164
00:10:30,037 --> 00:10:32,320
And it's interesting to notice how the animations

165
00:10:32,320 --> 00:10:34,503
last exactly the same number of frames,

166
00:10:34,503 --> 00:10:36,225
but the ziggy on the right,

167
00:10:36,225 --> 00:10:37,947
which is one of our enemy archetypes,

168
00:10:37,947 --> 00:10:40,190
it's much more exaggerated

169
00:10:40,190 --> 00:10:42,973
in terms of deformations and spacing.

170
00:10:45,152 --> 00:10:50,640
Moreover, we realize that the characters should not look in pain, and therefore in our game

171
00:10:50,640 --> 00:10:54,545
they are not suffering and they do not die.

172
00:10:54,545 --> 00:10:59,552
Heroes are just knocked out and enemies are set free from a malicious influence.

173
00:11:02,277 --> 00:11:03,898
On the other hand, the rabbits.

174
00:11:03,898 --> 00:11:07,800
They have introduced their humor and their craziness

175
00:11:07,800 --> 00:11:08,260
to Mario's world.

176
00:11:08,260 --> 00:11:12,142
This was key for us because it created the contrast

177
00:11:12,142 --> 00:11:15,104
and it helped to push the personality of the characters.

178
00:11:15,104 --> 00:11:17,745
We wanted to develop a new take on the Mushroom Kingdom,

179
00:11:17,745 --> 00:11:20,487
keeping its familiar tone,

180
00:11:20,487 --> 00:11:22,028
yet feeling fresh at the same time.

181
00:11:22,028 --> 00:11:24,449
We tried to push the humor,

182
00:11:24,449 --> 00:11:26,830
both on gameplay and in cinematics.

183
00:11:26,830 --> 00:11:28,991
Here's a couple of examples from gameplay.

184
00:11:30,785 --> 00:11:35,168
And we looked for every opportunity to add some humor,

185
00:11:35,168 --> 00:11:42,093
like damages, bosses, just love Rubby Kong, it's awesome.

186
00:11:42,093 --> 00:11:42,333
Simple runs.

187
00:11:42,333 --> 00:11:54,340
Or losing animations, and as you can see here on the left,

188
00:11:54,340 --> 00:11:57,102
Rubby Peach really hates losing.

189
00:12:00,938 --> 00:12:04,801
And here are some more examples from our cinematics.

190
00:12:04,801 --> 00:12:11,787
And as you can see here we had fun playing around a bit with the personalities

191
00:12:11,787 --> 00:12:23,757
and relationships between the characters. So, Peach, Rabbit, Peach.

192
00:12:23,757 --> 00:12:28,661
Mario and Rabbid Mario.

193
00:12:28,661 --> 00:12:29,742
Rabbids and Luigi.

194
00:12:38,600 --> 00:12:46,595
Robbie Peach, Mario and Peach.

195
00:12:46,595 --> 00:12:50,964
And here's a sequence which I believe perfectly gathers all these elements.

196
00:12:53,874 --> 00:12:57,597
You think yours is a real moustache?

197
00:12:57,597 --> 00:13:03,924
Who's done me a thousand wrongs ever since Donkey Kong?

198
00:13:03,924 --> 00:13:13,473
Slithering down every pipe, despite his plum-shaped body type.

199
00:13:15,628 --> 00:13:21,537
He's gone a-running, fia, why screaming, mama mia?

200
00:13:21,537 --> 00:13:24,782
Who leaves me grey and grim?

201
00:13:24,782 --> 00:13:29,209
Oh, what does Pete see in him?

202
00:13:34,574 --> 00:13:40,240
And I truly believe these are examples of interactions that have been possible for us

203
00:13:40,240 --> 00:13:44,844
to make solely because, thanks to the rabbits and their innate ability to break the rules

204
00:13:44,844 --> 00:13:47,367
and get any carter out of their comfort zone.

205
00:13:49,539 --> 00:13:52,820
Obviously, we had to mix the cartoony style of both IPs,

206
00:13:52,820 --> 00:13:57,322
but we wanted to push forward, exploring new directions.

207
00:13:57,322 --> 00:14:00,123
In order to do this, we exaggerated the deformations,

208
00:14:00,123 --> 00:14:01,364
especially through squash and stretch,

209
00:14:01,364 --> 00:14:04,885
to achieve a more organic feeling.

210
00:14:04,885 --> 00:14:06,526
Rigs have been built to support

211
00:14:06,526 --> 00:14:08,927
these kind of animations and deformations.

212
00:14:09,975 --> 00:14:13,217
So here are a couple of examples with Robby Kong.

213
00:14:13,217 --> 00:14:19,662
And as you can see, the animator has really a lot of freedom

214
00:14:19,662 --> 00:14:21,223
in the way they can adjust and change

215
00:14:21,223 --> 00:14:23,405
the shapes of the character.

216
00:14:23,405 --> 00:14:24,646
Sometimes too much, probably.

217
00:14:24,646 --> 00:14:28,929
And you can also see how specific each one of them

218
00:14:28,929 --> 00:14:35,454
is due to huge differences in terms of the design

219
00:14:35,454 --> 00:14:39,777
and size between all the characters, heroes and enemies.

220
00:14:47,954 --> 00:14:55,519
An example of deformations is the use of smear frames and the Rabbits usually feature full-body

221
00:14:55,519 --> 00:15:04,805
extreme deformations, while for the Nintendo characters they are limited only to the extremities

222
00:15:04,805 --> 00:15:09,968
and used very sparingly. So here's a for example Rabbit Peach

223
00:15:09,968 --> 00:15:17,513
or White Rabbit and here you can see how the whole mouse is changing, it's deforming.

224
00:15:19,267 --> 00:15:23,710
while for Luigi, it's limited only to his feet.

225
00:15:23,710 --> 00:15:28,975
And hopefully you won't notice it in real time.

226
00:15:28,975 --> 00:15:32,237
So we had our goals set on a specific style.

227
00:15:32,237 --> 00:15:34,679
It was time to focus on the actual implementation

228
00:15:34,679 --> 00:15:36,140
of some of the core mechanics.

229
00:15:36,140 --> 00:15:39,363
And we first started from the locomotion.

230
00:15:40,380 --> 00:15:44,484
We actually have two types of locomotion in combat and during exploration phase,

231
00:15:44,484 --> 00:15:47,866
and each one of them has its own set of specific animations.

232
00:15:47,866 --> 00:15:51,750
They're both code-driven in order to achieve a classic arcade feeling,

233
00:15:51,750 --> 00:15:55,253
and plus it allowed the designers to tune it as much as they wanted

234
00:15:55,253 --> 00:15:57,674
without having a strong dependency on our work.

235
00:15:58,352 --> 00:16:00,593
And the same is true for special movement abilities

236
00:16:00,593 --> 00:16:03,513
like the dash or the team jump.

237
00:16:03,513 --> 00:16:05,494
And here you can see an example of Luigi

238
00:16:05,494 --> 00:16:08,855
changing these actions, dashing enemies

239
00:16:08,855 --> 00:16:09,835
and jumping on top of a rabbit Luigi.

240
00:16:09,835 --> 00:16:12,135
And going back to cover.

241
00:16:12,135 --> 00:16:13,556
Speaking of which, our cover system

242
00:16:13,556 --> 00:16:14,856
is actually animation driven.

243
00:16:26,466 --> 00:16:30,508
This allowed the animators to push as much as possible

244
00:16:30,508 --> 00:16:34,251
interactions between the characters and the environment.

245
00:16:34,251 --> 00:16:36,372
And this is especially true during the combat phase

246
00:16:36,372 --> 00:16:40,034
as the characters interact a lot with covers.

247
00:16:40,034 --> 00:16:43,637
Here for example, Rabbid Luigi leaning off of an off cover.

248
00:16:45,737 --> 00:16:48,138
We have a total of several cover positions

249
00:16:48,138 --> 00:16:50,239
between low and high ones,

250
00:16:50,239 --> 00:16:52,420
and as you can see in the video,

251
00:16:52,420 --> 00:16:54,661
each position displays a different idol.

252
00:16:54,661 --> 00:16:56,922
Also having unique characters

253
00:16:56,922 --> 00:16:58,803
means that each one of them

254
00:16:58,803 --> 00:17:02,984
needs a different way of taking cover.

255
00:17:02,984 --> 00:17:04,105
And the transitions,

256
00:17:04,105 --> 00:17:07,946
which have been for us equally important.

257
00:17:08,624 --> 00:17:13,767
We spent a lot of time and attention to make sure that each one of them stayed true to their character.

258
00:17:13,767 --> 00:17:16,609
They are not simply a bridge between state A and state B,

259
00:17:16,609 --> 00:17:20,052
but they are key to convey their personality.

260
00:17:20,052 --> 00:17:25,915
If you look at the video, the way Rabbit Yoshi and Rabbit Mario switch side of the cover tells a lot about their character.

261
00:17:25,915 --> 00:17:30,338
And here's another example of one of our enemies

262
00:17:30,338 --> 00:17:33,981
playing different animations depending on the starting and ending position.

263
00:17:33,981 --> 00:17:37,043
So, left to right, front to back, also.

264
00:17:37,780 --> 00:17:40,061
back right to left front and so on.

265
00:17:40,061 --> 00:17:43,042
And another area that's worth mentioning

266
00:17:43,042 --> 00:17:44,703
is the targeting mechanic.

267
00:17:44,703 --> 00:17:46,524
And from a gameplay point of view,

268
00:17:46,524 --> 00:17:50,486
its goal is to easily communicate to the player

269
00:17:50,486 --> 00:17:53,287
if the target will be hit or not.

270
00:17:53,287 --> 00:17:55,488
If the character is hiding,

271
00:17:55,488 --> 00:17:57,229
it means no chance of success.

272
00:17:57,229 --> 00:18:01,611
And also you can see here the line of action

273
00:18:01,611 --> 00:18:02,972
of Robin Mario being pushed.

274
00:18:05,577 --> 00:18:11,483
And the characters of course have their own personalities, so they react accordingly.

275
00:18:11,483 --> 00:18:19,410
So here's an example with one of our enemies and their reaction is also based on the position

276
00:18:19,410 --> 00:18:20,351
of the attacker.

277
00:18:20,351 --> 00:18:26,096
So if Mario is in front of him, he will have a reaction, but if he's on his side, he will

278
00:18:26,096 --> 00:18:27,037
react differently.

279
00:18:32,300 --> 00:18:34,563
And of course, again, different heroes, different reactions to

280
00:18:34,563 --> 00:18:37,186
Rabbid Yoshi will probably react differently compared to

281
00:18:37,186 --> 00:18:38,107
Rabbid Mario.

282
00:18:38,107 --> 00:18:39,469
We love Italian acting cliches.

283
00:18:39,469 --> 00:18:40,610
But we're Italians, so we can.

284
00:18:51,272 --> 00:18:54,254
So another tiny detail that might be hard to notice,

285
00:18:54,254 --> 00:18:56,935
but when we are attacking and another character

286
00:18:56,935 --> 00:18:59,796
is on the way, the one in the middle will duck.

287
00:18:59,796 --> 00:19:02,198
To give you the idea, he's actually trying

288
00:19:02,198 --> 00:19:03,578
to get himself out of the way.

289
00:19:03,578 --> 00:19:06,200
So Mario is trying to dodge the bullet here.

290
00:19:09,172 --> 00:19:12,072
And props, of course, have been used to better define the characters.

291
00:19:12,072 --> 00:19:15,353
So what's interesting is the fact that it happened quite a few times

292
00:19:15,353 --> 00:19:19,314
that we added props that were not included in the original design of the character

293
00:19:19,314 --> 00:19:24,755
to support specific animations that were crucial to push his or her personality.

294
00:19:24,755 --> 00:19:29,156
For example, the moustache, the toothpick, the mandolin and the pizza of Rabbid Mario

295
00:19:29,156 --> 00:19:32,797
have been introduced very, very late in the development cycle

296
00:19:32,797 --> 00:19:35,417
to bring his personality on par with the other heroes.

297
00:19:36,999 --> 00:19:40,183
And again, of course, to convey humor and parody.

298
00:19:40,183 --> 00:19:46,392
So everything you've seen so far hopefully has shed some light

299
00:19:46,392 --> 00:19:49,357
on some of the artistic challenges we had to overcome.

300
00:19:50,077 --> 00:19:53,238
But I guess that no project comes without its own amount

301
00:19:53,238 --> 00:19:54,959
of technical challenges.

302
00:19:54,959 --> 00:19:57,261
And this one was no different.

303
00:19:57,261 --> 00:20:02,504
In fact, first of all, we had to switch to a new game engine.

304
00:20:02,504 --> 00:20:05,506
And Snowdrop is the latest Ubisoft proprietary game engine.

305
00:20:05,506 --> 00:20:08,747
It has been chosen for its flexibility, scalability,

306
00:20:08,747 --> 00:20:11,089
and of course, rendering quality.

307
00:20:11,089 --> 00:20:14,391
But it was built with a division in mind,

308
00:20:14,391 --> 00:20:16,892
which is a totally different game compared to our project.

309
00:20:18,133 --> 00:20:20,897
We also had to develop for a new console,

310
00:20:20,897 --> 00:20:24,881
and probably you know what it means, right?

311
00:20:26,298 --> 00:20:34,424
We also had to handle two important IPs, which meant that not only the artists had to learn

312
00:20:34,424 --> 00:20:39,408
how to work with the characters, learning their psychology and mechanics to the point

313
00:20:39,408 --> 00:20:45,813
of knowing them by heart, but we also had to learn how to handle the feedback received,

314
00:20:45,813 --> 00:20:48,175
which would come at any time during the process.

315
00:20:49,898 --> 00:20:53,639
And we also started with a fairly small animation team.

316
00:20:53,639 --> 00:20:57,140
In fact, we started with just four animators,

317
00:20:57,140 --> 00:20:59,921
one pipeline TD and one character rigger.

318
00:20:59,921 --> 00:21:04,042
So to sum up, we developed on a new engine, a new console.

319
00:21:04,042 --> 00:21:07,062
We had to prepare to react to a feedback

320
00:21:07,062 --> 00:21:11,463
we have never received before with a small team

321
00:21:11,463 --> 00:21:15,684
that was working on a Nintendo IP for the very first time.

322
00:21:15,684 --> 00:21:17,025
So, how?

323
00:21:18,062 --> 00:21:22,623
How did we avoid all the mistakes we were leading into?

324
00:21:22,623 --> 00:21:23,444
Actually, we didn't.

325
00:21:23,444 --> 00:21:27,105
What we did was planning for mistakes.

326
00:21:27,105 --> 00:21:30,947
We quickly realized that there were just too many variables

327
00:21:30,947 --> 00:21:33,848
and avoiding mistakes would have been simply impossible.

328
00:21:33,848 --> 00:21:37,869
Therefore, we focused on planning the inevitable mistakes,

329
00:21:37,869 --> 00:21:41,411
giving our animators ways to explore, experiment,

330
00:21:41,411 --> 00:21:45,052
prototype new ideas, and above anything else,

331
00:21:45,052 --> 00:21:46,233
learning while doing so.

332
00:21:47,206 --> 00:21:50,468
We set the time for them to prototype and experiment

333
00:21:50,468 --> 00:21:52,729
or simply play with the characters.

334
00:21:52,729 --> 00:21:55,610
And these gave birth to some of the coolest ideas

335
00:21:55,610 --> 00:21:58,412
that we ended up implementing in the game.

336
00:21:58,412 --> 00:22:01,053
So here you can see some example of this process

337
00:22:01,053 --> 00:22:02,354
and if you look at the admission in the bottom row,

338
00:22:02,354 --> 00:22:05,595
for example, they've been used in some way or the other

339
00:22:05,595 --> 00:22:06,996
in the game.

340
00:22:06,996 --> 00:22:10,278
And our tools and pipeline have been developed

341
00:22:10,278 --> 00:22:13,059
to simplify and increase the speed of iteration process.

342
00:22:13,893 --> 00:22:15,874
to give the artists this kind of space

343
00:22:15,874 --> 00:22:18,175
in order to let them express themselves

344
00:22:18,175 --> 00:22:20,416
and iterate on their animations,

345
00:22:20,416 --> 00:22:23,778
even at an advanced state of the production.

346
00:22:23,778 --> 00:22:27,760
And Tommaso will now show you some of these tools

347
00:22:27,760 --> 00:22:30,461
which have been key to the success of the project.

348
00:22:30,461 --> 00:22:31,702
Hello everyone, it's such great to be here.

349
00:22:44,854 --> 00:22:47,877
It's now time to go a little bit more technical.

350
00:22:47,877 --> 00:22:51,219
As you can imagine, after all the consideration

351
00:22:51,219 --> 00:22:55,423
that Marco has made so far, we were heading

352
00:22:55,423 --> 00:22:57,745
for a huge amount of key frame animation data.

353
00:22:57,745 --> 00:23:03,349
And as our technical department, we wanted to make sure

354
00:23:03,349 --> 00:23:06,112
that the iteration on this amount of data

355
00:23:06,112 --> 00:23:08,874
wasn't frustrating for the artist.

356
00:23:08,874 --> 00:23:13,037
So we tried to keep being focused on these two main concepts

357
00:23:13,037 --> 00:23:14,398
for the development of the pipeline.

358
00:23:15,553 --> 00:23:18,715
Freedom to explore, in order to let the animators

359
00:23:18,715 --> 00:23:22,158
easily manipulate such amount of data.

360
00:23:22,158 --> 00:23:24,159
And fast iteration.

361
00:23:24,159 --> 00:23:27,942
In our case especially, in order to react quickly

362
00:23:27,942 --> 00:23:31,325
to the feedbacks that could arrive from both IPs

363
00:23:31,325 --> 00:23:33,786
any time at any stage of the production.

364
00:23:33,786 --> 00:23:38,410
The first step was to find a logical way

365
00:23:38,410 --> 00:23:41,252
to rationalize and organize such an amount

366
00:23:41,252 --> 00:23:42,173
of animation data.

367
00:23:43,320 --> 00:23:45,621
If we could arrange multiple clips in the same file,

368
00:23:45,621 --> 00:23:49,983
it is easier for the animators to iterate and compare

369
00:23:49,983 --> 00:23:51,264
on related animation clips.

370
00:23:51,264 --> 00:23:54,805
There are different ways of achieving this.

371
00:23:54,805 --> 00:23:56,526
If you are on a motion builder,

372
00:23:56,526 --> 00:23:59,328
you could take advantage of the take system.

373
00:23:59,328 --> 00:24:00,588
But our pipeline is on Maya,

374
00:24:00,588 --> 00:24:03,490
and we don't have a native take system.

375
00:24:04,947 --> 00:24:10,171
We tried to arrange clips on the timeline one after the other. We tried to use the

376
00:24:10,171 --> 00:24:16,756
tracks editor but in the end we decided to go for animation layers as at first glance it

377
00:24:16,756 --> 00:24:24,642
looked like to be the answer to our question. However for the animators working with the

378
00:24:24,642 --> 00:24:29,106
animation layer wasn't really intuitive. If you have to move one clip or the other

379
00:24:29,875 --> 00:24:32,697
You have to turn on the corresponding animation layer,

380
00:24:32,697 --> 00:24:36,459
turn off the others, adjust the timeline, and so on.

381
00:24:36,459 --> 00:24:39,101
So collecting all the feedbacks we received

382
00:24:39,101 --> 00:24:43,084
from the animators, we came up with our take system in Maya.

383
00:24:43,084 --> 00:24:44,925
It is basically animation layers

384
00:24:44,925 --> 00:24:47,487
wrapped with additional functionalities.

385
00:24:47,487 --> 00:24:49,828
Something very simple, but very effective.

386
00:24:51,272 --> 00:24:54,913
From a very simple interface, the animators can handle

387
00:24:54,913 --> 00:24:57,854
the different takes present in the current scene,

388
00:24:57,854 --> 00:24:59,534
and for each one of them,

389
00:24:59,534 --> 00:25:01,935
you can still have additive animation layers.

390
00:25:01,935 --> 00:25:05,496
Let's see the tool in action.

391
00:25:05,496 --> 00:25:10,457
The animator can select the controls he wants to animate.

392
00:25:10,457 --> 00:25:14,098
From the takes pane, he can create a new take

393
00:25:14,098 --> 00:25:17,098
and assign a nice name for it.

394
00:25:20,945 --> 00:25:27,149
and adjust the timeline. As you can see when the timeline changes the new frame range is

395
00:25:27,149 --> 00:25:38,538
recorded inside the take pane. And then the animator can keep working as usual. After a

396
00:25:38,538 --> 00:25:45,443
while what you get of course is a single animation on a take. And anytime the animator can

397
00:25:45,443 --> 00:25:47,004
right click and create a new take.

398
00:25:49,700 --> 00:25:52,541
or uh just uh adjust the time uh the time range. Rename the

399
00:25:52,541 --> 00:25:59,484
take of course. And uh even assign a nice color. As you will

400
00:25:59,484 --> 00:26:04,387
see in the next slide we took advantage of the color coding a

401
00:26:04,387 --> 00:26:08,009
lot in our pipeline. Since we have a lot of animation using

402
00:26:08,009 --> 00:26:12,231
color coding is very effective to have a quick uh feedback on

403
00:26:12,231 --> 00:26:14,032
the related animations.

404
00:26:15,330 --> 00:26:19,432
After a while what you get is a single Maya file with different

405
00:26:19,432 --> 00:26:23,594
clips. And you can see how it is reactive for the animator to

406
00:26:23,594 --> 00:26:26,795
just click on a specific take and activate the corresponding

407
00:26:26,795 --> 00:26:32,438
clip. The frame range is adjusted. The timeline is color

408
00:26:32,438 --> 00:26:35,179
coded to reflect the current active take.

409
00:26:40,325 --> 00:26:45,368
and uh we we took advantage of uh meta data and attributes so

410
00:26:45,368 --> 00:26:50,092
something very simple uh like uh a reordering takes is very

411
00:26:50,092 --> 00:26:55,256
quick compared to reordering reordering animation layers. We

412
00:26:55,256 --> 00:26:59,479
stressed the take system and the animation layers to the max and

413
00:26:59,479 --> 00:27:03,422
it resulted to be so reliable and so effective and so intuitive

414
00:27:03,422 --> 00:27:06,844
for the animators that that we started to build upon of this

415
00:27:06,844 --> 00:27:08,045
uh simple tool.

416
00:27:09,147 --> 00:27:20,006
So we integrated the text system with uh our exporter on the left and our process library on the right. But uh we didn't stop there of course.

417
00:27:22,478 --> 00:27:26,100
even if our scene files are under version control we may

418
00:27:26,100 --> 00:27:30,202
wanted to save in the same Maya file different versions of the

419
00:27:30,202 --> 00:27:36,105
same uh animation clip. So we created a tech version system in

420
00:27:36,105 --> 00:27:41,268
a way that the animator can uh realize such uh functionality.

421
00:27:41,268 --> 00:27:44,650
Let's see it in action. The animator can right click on a

422
00:27:44,650 --> 00:27:45,650
specific take.

423
00:27:46,357 --> 00:27:50,139
and create a new version for that take. It can be an empty

424
00:27:50,139 --> 00:27:56,622
version or a duplicate of the current version. And you can

425
00:27:56,622 --> 00:27:59,784
animate the one version or the other.

426
00:28:05,577 --> 00:28:08,339
As you can see here the animator can uh right click and

427
00:28:08,339 --> 00:28:11,861
activate a specific version for the take. As the different

428
00:28:11,861 --> 00:28:15,863
version belong to the same take in export it will result as a

429
00:28:15,863 --> 00:28:20,366
single clip. And this is very nice to it is very effective to

430
00:28:20,366 --> 00:28:24,748
keep uh very nice and uh uh clean uh uh files in exports.

431
00:28:29,624 --> 00:28:32,786
But let's suppose that uh you have a specific version that you

432
00:28:32,786 --> 00:28:36,269
like so much and you want to have like a separate uh separate

433
00:28:36,269 --> 00:28:39,992
take and uh create a version upon on that. Anytime the

434
00:28:39,992 --> 00:28:43,655
animator can right click on a take and extract the current

435
00:28:43,655 --> 00:28:49,539
version. And uh this will become a a separate take. This is uh

436
00:28:49,539 --> 00:28:53,682
very simple and quick since uh I said before we use uh

437
00:28:53,682 --> 00:28:58,866
metadata and not networks to um create such a meta structure on

438
00:28:58,866 --> 00:28:59,346
the takes.

439
00:29:00,644 --> 00:29:03,813
and of course you have the opposite function. You can set

440
00:29:03,813 --> 00:29:06,922
a specific take to be a subversion of another take.

441
00:29:19,034 --> 00:29:25,259
and time markers. For each take we also added the possibility to set specific time markers. Uh

442
00:29:25,259 --> 00:29:33,446
this allow the animators to visually uh mark specific areas of the timeline. As you can see

443
00:29:33,446 --> 00:29:43,354
here the animator can uh select a specific area of the time range of the timeline and mark this

444
00:29:43,354 --> 00:29:46,336
area. In this case as an interface.

445
00:29:53,118 --> 00:29:56,762
then it keeps working by selecting another area and

446
00:29:56,762 --> 00:30:04,630
marking this on hydro as uh um idle phase. And just like uh

447
00:30:04,630 --> 00:30:08,694
said before you can assign uh uh specific color coding for

448
00:30:08,694 --> 00:30:09,215
that area.

449
00:30:10,084 --> 00:30:14,146
It may sound like something very simple but um the good thing

450
00:30:14,146 --> 00:30:17,167
here is that the animator can frame any time the specific

451
00:30:17,167 --> 00:30:20,389
area of the timeline. This is very effective for uh for

452
00:30:20,389 --> 00:30:24,050
instance for framing the idle phase and making sure that uh

453
00:30:24,050 --> 00:30:29,652
the looping uh animation is working properly. And uh also

454
00:30:29,652 --> 00:30:34,394
the animator has the possibility to export the uh markers uh

455
00:30:34,394 --> 00:30:36,095
separately or as a whole.

456
00:30:38,287 --> 00:30:41,747
I don't know if you, how many of you have played the game?

457
00:30:41,747 --> 00:30:44,568
How many of you have played the game?

458
00:30:44,568 --> 00:30:45,508
Yeah, cool, very cool.

459
00:30:45,508 --> 00:30:51,450
And yeah, we have this kind of gameplay cinematics

460
00:30:51,450 --> 00:30:54,550
where we have balloons that you have to confirm.

461
00:30:54,550 --> 00:30:56,891
And this tool has been crucial for us

462
00:30:56,891 --> 00:31:00,212
to make sure that during the idle animations,

463
00:31:00,212 --> 00:31:02,792
during the balloon being visible,

464
00:31:02,792 --> 00:31:04,073
the idle was working properly.

465
00:31:05,664 --> 00:31:10,226
As you can see all the tools are very relative to our domain,

466
00:31:10,226 --> 00:31:14,627
but our focus was always to design for the animators.

467
00:31:14,627 --> 00:31:20,289
As you saw earlier, the transitions

468
00:31:20,289 --> 00:31:22,530
play a key role in our game.

469
00:31:22,530 --> 00:31:26,111
And we made this very simple tool

470
00:31:26,111 --> 00:31:28,252
for automating the creation of the takes

471
00:31:28,252 --> 00:31:30,512
for these transitions.

472
00:31:30,512 --> 00:31:31,973
From this interface, the animator

473
00:31:31,973 --> 00:31:35,434
can freeze different poses.

474
00:31:37,105 --> 00:31:40,747
and uh the tool takes care of generating the possible

475
00:31:40,747 --> 00:31:44,370
transitions between these poses and uh nice color coding is

476
00:31:44,370 --> 00:31:54,035
automatically assigned. Then we have some other little extra

477
00:31:54,035 --> 00:31:58,458
features like uh the ability to mark specific takes to the to

478
00:31:58,458 --> 00:32:03,921
be ignored. Uh let's suppose you use uh takes for uh um just

479
00:32:03,921 --> 00:32:05,722
storing poses or whatever you want.

480
00:32:06,502 --> 00:32:09,143
and you don't want this to be exported. And then we have the

481
00:32:09,143 --> 00:32:12,844
ability to mirror specific takes. See here rapid widget

482
00:32:12,844 --> 00:32:19,667
going from left to right and uh the tool creates the opposite

483
00:32:19,667 --> 00:32:23,068
uh uh clip. Having rapid widget going from right to left.

484
00:32:29,763 --> 00:32:33,987
The same way we can create a reverse of the current take. We

485
00:32:33,987 --> 00:32:38,211
have Rabbit Luigi going from cover left to back and we can

486
00:32:38,211 --> 00:32:42,514
reverse the animation and having a take going from back to cover

487
00:32:42,514 --> 00:32:51,362
left. It's now time to see how we uh took advantage of the

488
00:32:51,362 --> 00:32:52,624
take system.

489
00:32:54,092 --> 00:32:59,434
Here you can see a typical file structure of one of our heroes. As you can see it's uh it's

490
00:32:59,434 --> 00:33:07,198
very nice and uh clean. All that light blue files are our Maya scenes. And on the right you

491
00:33:07,198 --> 00:33:14,020
can see uh an example with uh Rabbid Mario. Starting from a 92 Maya scenes the animators

492
00:33:14,020 --> 00:33:21,303
generated 592 takes and in export uh there was just 530 exports.

493
00:33:22,767 --> 00:33:26,430
Could you imagine iterating on 530 Maya files separately?

494
00:33:26,430 --> 00:33:28,952
Probably it's a nightmare.

495
00:33:28,952 --> 00:33:36,177
And here you can see one of the heaviest scenes,

496
00:33:36,177 --> 00:33:41,261
just to give you a quick feedback in terms of performance.

497
00:33:41,261 --> 00:33:45,144
On the left you can see the standard Maya animation layers.

498
00:33:45,144 --> 00:33:47,005
On the right, our take system.

499
00:33:47,005 --> 00:33:49,748
Every time the animator clicks on a specific take,

500
00:33:50,341 --> 00:33:52,983
The corresponding animation layer is activated,

501
00:33:52,983 --> 00:33:55,545
the time range is adjusted,

502
00:33:55,545 --> 00:33:59,829
the markers are made visible, and so on.

503
00:33:59,829 --> 00:34:03,772
Again, handling such amount of animation layers manually,

504
00:34:03,772 --> 00:34:05,634
it would have been a nightmare for the animator.

505
00:34:12,254 --> 00:34:14,175
Let's talk about poses now.

506
00:34:14,175 --> 00:34:19,597
We have seen with Marco how important are poses for us

507
00:34:19,597 --> 00:34:21,977
in order to convey the personality of the character

508
00:34:21,977 --> 00:34:26,359
and to give feedbacks in terms of the gameplay status

509
00:34:26,359 --> 00:34:29,500
of the character.

510
00:34:29,500 --> 00:34:33,801
In our case, having poses under version control and shared

511
00:34:33,801 --> 00:34:34,682
wasn't enough.

512
00:34:34,682 --> 00:34:38,723
We had to find a way to be as reactive as possible

513
00:34:38,723 --> 00:34:39,583
to the feedbacks.

514
00:34:41,438 --> 00:34:45,219
here you can see a typical feedback that our animators

515
00:34:45,219 --> 00:34:51,220
received during the production. And they had a very short time

516
00:34:51,220 --> 00:34:55,721
to address such kind of feedbacks. For these reasons we

517
00:34:55,721 --> 00:34:59,562
needed to track where and how the poses had been used and

518
00:34:59,562 --> 00:35:03,843
eventually update them automatically. So we created a

519
00:35:03,843 --> 00:35:09,024
post system. The post system is made of a classic post library.

520
00:35:10,672 --> 00:35:18,076
poses tab showing the poses used in the current take and uh the timeline where you can uh

521
00:35:18,076 --> 00:35:28,502
see where the pose has been used. Let's see it in action. Every time the animator apply a pose

522
00:35:28,502 --> 00:35:36,446
from the library the pose is marked on the timeline and on the poses tab. So the pose

523
00:35:39,555 --> 00:35:43,397
since we might have poses for the body, poses for the face or

524
00:35:43,397 --> 00:35:51,500
any other different limbs or props, the pose system source

525
00:35:51,500 --> 00:35:55,762
not only which pose has been applied and where but also how

526
00:35:55,762 --> 00:35:59,724
the pose has been applied in terms of controls for instance.

527
00:35:59,724 --> 00:36:06,127
So we could have different poses applied on the same frame.

528
00:36:06,127 --> 00:36:08,468
Yeah you can see here after a while all the poses applied.

529
00:36:09,620 --> 00:36:14,081
and from the poses tab you can click on a specific pose that

530
00:36:14,081 --> 00:36:18,061
it will act pretty much like a bookmark to go straight to that

531
00:36:18,061 --> 00:36:21,102
frame where the pose has been applied. And also you can check

532
00:36:21,102 --> 00:36:29,884
the synchronization status of the pose. Let's have a look at

533
00:36:29,884 --> 00:36:34,685
how we update a pose to react to a feedback. When a feedback

534
00:36:34,685 --> 00:36:38,865
arrives the animator can right click on that specific pose

535
00:36:39,637 --> 00:36:52,768
choose edit and tweak the pose as required by the feedback. Once everyone is happy with the new

536
00:36:52,768 --> 00:37:00,835
pose the pose can be submitted of course to our versioning system and shared to the others. If

537
00:37:00,835 --> 00:37:06,420
we open the previous scene and go to the poses tab we can see that the pose results to be out

538
00:37:06,420 --> 00:37:06,880
of date.

539
00:37:07,690 --> 00:37:10,592
the animator can just right click on that specific pose and

540
00:37:10,592 --> 00:37:13,635
choose re apply and the pose will be updated. Like the take

541
00:37:13,635 --> 00:37:20,020
system also the poses rely on a shared library so we can easily

542
00:37:20,020 --> 00:37:22,982
script the update of the different poses or check the

543
00:37:22,982 --> 00:37:28,887
status on the different scenes all in batch. And also we my uh

544
00:37:28,887 --> 00:37:30,308
we also have the ability to uh

545
00:37:34,564 --> 00:37:38,525
fade the poses with the current animation in a way that we can

546
00:37:38,525 --> 00:37:41,125
have a nice blending transitions. Let's talk a bit

547
00:37:41,125 --> 00:37:46,266
about uh data management. As you can imagine the take system and

548
00:37:46,266 --> 00:37:51,247
the post system is at the animators work. But on the

549
00:37:51,247 --> 00:37:54,468
technical side they introduced a lot of additional data to be

550
00:37:54,468 --> 00:38:01,509
managed. In fact now for a single uh Maya sim file we have

551
00:38:01,509 --> 00:38:02,869
rigs that may be updated anytime.

552
00:38:04,268 --> 00:38:07,331
we have different takes stored inside this scene.

553
00:38:07,331 --> 00:38:10,393
And for each one of them, we have different poses.

554
00:38:10,393 --> 00:38:15,417
We have explicit dependencies like the rigs,

555
00:38:15,417 --> 00:38:18,319
but the poses and takes are implicit.

556
00:38:18,319 --> 00:38:22,142
So how we could make sure that everything is nice

557
00:38:22,142 --> 00:38:24,003
and in sync?

558
00:38:24,003 --> 00:38:27,546
We created an overseer tool that basically

559
00:38:27,546 --> 00:38:28,667
is the answer to this question.

560
00:38:30,270 --> 00:38:33,572
Here you can see basically the same dependency graph you have

561
00:38:33,572 --> 00:38:38,957
seen before. On the left the animator can load different

562
00:38:38,957 --> 00:38:43,380
scene files and quickly check what is the synchronization

563
00:38:43,380 --> 00:38:48,544
status of the pose of the scene file. On the right you can get

564
00:38:48,544 --> 00:38:54,089
information about the takes contained inside the scene file

565
00:38:54,089 --> 00:38:58,593
and poses synchronization status and text log of what is the

566
00:38:58,593 --> 00:38:59,633
synchronization status.

567
00:39:01,199 --> 00:39:02,376
Let's see how it works in action.

568
00:39:04,992 --> 00:39:11,497
we can load um specific folder with all the it's all subfolders and contained uh sim files.

569
00:39:11,497 --> 00:39:18,322
The tool loads in background the dependency um the dependencies of the sim file and checks

570
00:39:18,322 --> 00:39:25,307
for the synchronization status. From here you can get the version status, the takes

571
00:39:25,307 --> 00:39:31,192
synchronization, the poses and uh the file owner. If you click on a specific my sim you can

572
00:39:31,192 --> 00:39:33,414
see I said before the takes contained there.

573
00:39:34,415 --> 00:39:49,395
and check if everything is in sync.

574
00:40:02,832 --> 00:40:06,134
Moreover the overseal handles the batch update process of the

575
00:40:06,134 --> 00:40:11,817
poses and the exports in the engine. When we load the

576
00:40:11,817 --> 00:40:15,758
different sim files you can see that only specific sim files are

577
00:40:15,758 --> 00:40:18,740
checked. This corresponds to the Maya file that needs to be

578
00:40:18,740 --> 00:40:24,023
updated. It may sound like something very simple but if you

579
00:40:24,023 --> 00:40:27,184
think about scaling such amount of data with all the takes.

580
00:40:28,364 --> 00:40:35,106
exporting everything every time is just a lot time consuming and risky. As you can see

581
00:40:35,106 --> 00:40:40,267
here the batch exporter select not only the specific scene files but also the takes that

582
00:40:40,267 --> 00:40:51,570
needs to be updated. We have a lighter version of uh the overseer for the cinematics. On the

583
00:40:51,570 --> 00:40:52,970
left we have the

584
00:40:54,564 --> 00:40:58,647
different cinematics and on the right we have the different

585
00:40:58,647 --> 00:41:01,789
shots that belong to the cinematics. Like before just

586
00:41:01,789 --> 00:41:05,712
watching at the icons you can get a visual feedback on what is

587
00:41:05,712 --> 00:41:13,819
out of date. And you can see a play blast of the specific shot

588
00:41:13,819 --> 00:41:16,221
or the whole sequence.

589
00:41:17,389 --> 00:41:20,750
Every time the animator updates a specific shot the whole

590
00:41:20,750 --> 00:41:23,771
sequence preview is automatically regenerated on

591
00:41:23,771 --> 00:41:32,453
server side. Let's go a bit deeper on how we realize that

592
00:41:32,453 --> 00:41:35,474
the dependency tracking. To track the Maya scene content we

593
00:41:35,474 --> 00:41:36,974
use the uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh,

594
00:41:38,399 --> 00:41:41,921
aside the card technique basically we have a descriptor

595
00:41:41,921 --> 00:41:46,185
describing what's inside a specific Maya file in terms of

596
00:41:46,185 --> 00:41:54,191
takes, markers, poses and rigs. If for some reason the scene is

597
00:41:54,191 --> 00:41:57,854
modified outside of our pipeline a ghost process takes care of

598
00:41:57,854 --> 00:42:01,077
regenerating this descriptor by scaffolding the scene file.

599
00:42:03,623 --> 00:42:08,485
to checking the synchronization status of the takes we use a

600
00:42:08,485 --> 00:42:12,806
technique. Every time the animator updates a curve Maya

601
00:42:12,806 --> 00:42:18,748
call back triggers a method on the current take in a way that

602
00:42:18,748 --> 00:42:25,470
the animator can just watch the takes and if the current take

603
00:42:25,470 --> 00:42:27,910
has been updated it will be marked with a star.

604
00:42:31,147 --> 00:42:34,548
synchronization status of the poses we use both the dirty B

605
00:42:34,548 --> 00:42:40,772
technique as before and the time stamp technique. In fact poses

606
00:42:40,772 --> 00:42:46,054
are just files so we could easily check the last time the

607
00:42:46,054 --> 00:42:49,596
pose has been updated with the last time the pose has been

608
00:42:49,596 --> 00:42:54,419
applied on the specific take. For the export things are a

609
00:42:54,419 --> 00:42:59,782
little bit simpler since the exports are just my FBX file

610
00:43:01,812 --> 00:43:05,215
animation data that we feed to our engine. So we could just

611
00:43:05,215 --> 00:43:13,463
check the um latest update of the FBX with the latest time the

612
00:43:13,463 --> 00:43:22,232
current take the corresponding take has been updated. Now the

613
00:43:22,232 --> 00:43:22,593
future.

614
00:43:23,905 --> 00:43:28,208
We already have in mind some very cool ideas to extend the

615
00:43:28,208 --> 00:43:29,950
functional use of our tool.

616
00:43:29,950 --> 00:43:33,212
But of course for us the priority is still to improve

617
00:43:33,212 --> 00:43:37,455
the overall performance and usability of the tools.

618
00:43:37,455 --> 00:43:43,700
Maya introduced a cool time editor in the latest version.

619
00:43:43,700 --> 00:43:45,941
It is very useful to do non-linear editing of

620
00:43:45,941 --> 00:43:46,702
different clips.

621
00:43:46,702 --> 00:43:50,304
And we aim to integrate our tech system with

622
00:43:50,304 --> 00:43:51,305
this time editor.

623
00:43:56,197 --> 00:44:00,304
And at last, we are working for having a tighter Maya engine

624
00:44:00,304 --> 00:44:04,370
workflow in a way that we can short the time from Maya to the

625
00:44:04,370 --> 00:44:07,916
engine and transfer metadata from Maya to the engine.

626
00:44:12,990 --> 00:44:14,511
So this concludes our talk.

627
00:44:14,511 --> 00:44:16,513
I just want to thank you all for being here

628
00:44:16,513 --> 00:44:20,876
in behalf of the Ubisoft Milan and Ubisoft Paris studios.

629
00:44:20,876 --> 00:44:23,198
This project was really made by heart

630
00:44:23,198 --> 00:44:24,779
by every person in the studio.

631
00:44:24,779 --> 00:44:28,502
And of course, we had a lot of fun working with that.

632
00:44:28,502 --> 00:44:30,543
So thank you.

633
00:44:30,543 --> 00:44:33,085
And these are our contacts.

634
00:44:33,085 --> 00:44:36,608
Feel free to contact us for questions

635
00:44:36,608 --> 00:44:38,829
or just get in contact.

636
00:44:38,829 --> 00:44:42,092
And I guess we have time for Q&A.

637
00:44:43,353 --> 00:44:43,893
Thank you.

638
00:44:43,893 --> 00:44:54,583
Is it loading?

639
00:44:54,583 --> 00:44:55,163
Yeah, um...

640
00:44:59,171 --> 00:44:59,971
Does this work?

641
00:44:59,971 --> 00:45:00,912
I can also just shout.

642
00:45:00,912 --> 00:45:01,592
Oh, there we go.

643
00:45:01,592 --> 00:45:01,632
Hi.

644
00:45:01,632 --> 00:45:01,812
Hi, I'm Alex.

645
00:45:01,812 --> 00:45:02,372
I work at Ride.

646
00:45:02,372 --> 00:45:06,154
First of all, thanks for the game.

647
00:45:06,154 --> 00:45:06,774
It was awesome.

648
00:45:06,774 --> 00:45:07,455
I really enjoyed it.

649
00:45:07,455 --> 00:45:10,316
And I think the opera scene is probably

650
00:45:10,316 --> 00:45:12,537
one of the funniest moments I had in games ever.

651
00:45:12,537 --> 00:45:13,657
It's amazing.

652
00:45:13,657 --> 00:45:16,779
Can you guys talk a little bit about how you hook up

653
00:45:16,779 --> 00:45:18,099
animations within the game?

654
00:45:18,099 --> 00:45:19,280
Is there an HSM running?

655
00:45:19,280 --> 00:45:21,921
Or is it literally just one sequential animation

656
00:45:21,921 --> 00:45:22,922
after the other?

657
00:45:22,922 --> 00:45:24,942
How are you guys blending between animations

658
00:45:24,942 --> 00:45:25,583
during runtime?

659
00:45:29,139 --> 00:45:29,960
uh... right

660
00:45:29,960 --> 00:45:37,303
it depends but usually we

661
00:45:37,303 --> 00:45:40,725
we have our animation system which are in

662
00:45:40,725 --> 00:45:43,466
property tool of Zodrop

663
00:45:43,466 --> 00:45:46,968
and uh... they're usually

664
00:45:46,968 --> 00:45:50,990
connected to states so they're played sequentially

665
00:45:52,637 --> 00:45:57,362
But it supports also the use of layers, if you want.

666
00:45:57,362 --> 00:45:59,504
So it depends on the feature.

667
00:45:59,504 --> 00:45:59,564
OK.

668
00:45:59,564 --> 00:46:00,165
Thank you.

669
00:46:00,165 --> 00:46:01,286
You're welcome.

670
00:46:01,286 --> 00:46:03,949
I was just curious about how you give your feedback back

671
00:46:03,949 --> 00:46:09,194
to your animators, because you had a little sketch over the,

672
00:46:09,194 --> 00:46:10,735
like, what's your system?

673
00:46:10,735 --> 00:46:14,439
Do you have an in-house tool or anything?

674
00:46:15,372 --> 00:46:18,034
Uh, not really.

675
00:46:18,034 --> 00:46:25,060
Uh, usually, um, the feedback is based mostly on, uh, recording in engine.

676
00:46:25,060 --> 00:46:31,746
And, uh, we, we do use a draw overs if needed, but we have several steps of

677
00:46:31,746 --> 00:46:37,150
a validation, actually we have a very first one, a very, very, very soon, um,

678
00:46:37,150 --> 00:46:42,275
to get a roll approval by the brands and other people involved to do that.

679
00:46:42,275 --> 00:46:43,656
If the idea is right.

680
00:46:44,511 --> 00:46:49,294
and then uh... the more uh... we move forward uh... it moves into polishing

681
00:46:49,294 --> 00:46:52,836
details so for those uh... usually it's uh...

682
00:46:52,836 --> 00:46:56,939
we actually have a tool that generates uh...

683
00:46:56,939 --> 00:47:00,661
play blast uh... of the animation from several camera angles

684
00:47:00,661 --> 00:47:05,183
to speed up this process and it's what we usually do for example to get

685
00:47:05,183 --> 00:47:05,904
approvals from

686
00:47:05,904 --> 00:47:09,966
the rabbits brand or from nintendo it's just ease the process

687
00:47:10,772 --> 00:47:14,735
And then it's just we have dailies to get the feedback

688
00:47:14,735 --> 00:47:16,316
from the whole team.

689
00:47:16,316 --> 00:47:17,897
And basically that's it.

690
00:47:17,897 --> 00:47:18,157
Thanks.

691
00:47:18,157 --> 00:47:20,559
I was wondering if are you able to get real-time playback

692
00:47:20,559 --> 00:47:23,341
with all that info in the Maya scenes?

693
00:47:23,341 --> 00:47:30,246
Are your rigs pretty light that you're able to do that?

694
00:47:30,246 --> 00:47:35,349
Well, we started three years and a half ago.

695
00:47:35,349 --> 00:47:36,871
We started with Maya 2014.

696
00:47:39,491 --> 00:47:44,993
uh... at the moment we are uh... migrating to the latest versions and uh... of course

697
00:47:44,993 --> 00:47:49,674
we will uh... uh... improve our rigs to make to take advantage of all the new features

698
00:47:49,674 --> 00:47:55,036
like the uh... gpu caching uh... anything else the parallel evaluation of course and

699
00:47:55,036 --> 00:48:00,578
uh... there was a nice talk on yesterday about uh... forward facing rigs and uh... it was

700
00:48:00,578 --> 00:48:04,299
very inspiring for us it totally blew my mind on yesterday so I

701
00:48:05,399 --> 00:48:09,501
For sure I'll start from, uh, with that ideas.

702
00:48:09,501 --> 00:48:14,484
Yeah, it's one of the area we'll, uh, focus on the most, uh, moving forward to add, uh,

703
00:48:14,484 --> 00:48:20,668
real-time feedback, uh, in, in our scene. Uh, I, I think, uh, there's the latest version

704
00:48:20,668 --> 00:48:27,532
of, uh, Maya, there's a beta right now that, uh, they're working on it to, to, to, to remove

705
00:48:27,532 --> 00:48:31,514
the, the need to do, to, to make PlayBlast at all. So, that, that's super cool. It's,

706
00:48:31,514 --> 00:48:32,475
it's, it's, uh,

707
00:48:33,695 --> 00:48:37,800
A good frame rate, but for gameplay animations,

708
00:48:37,800 --> 00:48:38,902
it's real time.

709
00:48:38,902 --> 00:48:43,167
But for the cinematics, we're still not there.

710
00:48:43,167 --> 00:48:45,069
And that's what we're aiming for.

711
00:48:45,069 --> 00:48:47,813
Also, gameplay was able to get real time on this project?

712
00:48:47,813 --> 00:48:48,153
I'm sorry?

713
00:48:48,697 --> 00:48:55,302
So the gameplay sequences, the takes, were able to get real-time playback?

714
00:48:55,302 --> 00:48:56,322
Yeah, for those, yes.

715
00:48:56,322 --> 00:49:01,365
It was mostly, the issues were mostly on some sequences that were heavy,

716
00:49:01,365 --> 00:49:05,368
very heavy with many characters and environment and so on.

717
00:49:05,368 --> 00:49:07,189
Yeah, I can tell you that

718
00:49:07,189 --> 00:49:12,933
what we did for having these more efficient animation layers

719
00:49:13,892 --> 00:49:17,595
Part of the handling of the animation layers in Maya

720
00:49:17,595 --> 00:49:22,440
has been rewrote in a way that could be more efficient.

721
00:49:22,440 --> 00:49:25,602
I can give you maybe a deeper insight.

722
00:49:25,602 --> 00:49:29,506
If you think about the corresponding animation curves

723
00:49:29,506 --> 00:49:31,868
belonging to the same animation layers,

724
00:49:31,868 --> 00:49:35,211
the Maya standard way of

725
00:49:36,423 --> 00:49:40,245
enabling of disabling this layer is to turn on and off the lock

726
00:49:40,245 --> 00:49:48,210
of this curves. What we do really is just deferral sorry

727
00:49:48,210 --> 00:49:52,632
doing deferred evaluation of the lock and unlock curves in a way

728
00:49:52,632 --> 00:49:56,635
that Maya doesn't have to wait to change the lock status of all

729
00:49:56,635 --> 00:49:59,957
the curves. It just basically delays this after the Maya goes

730
00:49:59,957 --> 00:50:02,998
in idle. I don't know if that's clear in my English.

731
00:50:04,231 --> 00:50:06,572
We have an additional layer as Italians.

732
00:50:06,572 --> 00:50:09,274
We have to convert.

733
00:50:09,274 --> 00:50:15,117
And also another nice tip for everyone.

734
00:50:15,117 --> 00:50:19,440
For the cinematics, we used a lot the GPU cache for the

735
00:50:19,440 --> 00:50:23,262
environment, and that dramatically improved the

736
00:50:23,262 --> 00:50:25,283
frame rate of the cinematics.

737
00:50:25,283 --> 00:50:27,484
Good talk.

738
00:50:27,484 --> 00:50:28,285
I appreciate that.

739
00:50:29,071 --> 00:50:33,012
Can you talk more about how you decided where to split the scene?

740
00:50:33,012 --> 00:50:39,675
It looked like you had multiple Maya files per character and how you decided to split

741
00:50:39,675 --> 00:50:43,956
this Maya scene has these takes and this other Maya scene has these takes and go more into

742
00:50:43,956 --> 00:50:46,277
how you, where you decided to split it up.

743
00:50:47,118 --> 00:51:00,624
It's mainly based on features and we usually try to gather the animation clips that you'll

744
00:51:00,624 --> 00:51:03,966
probably have to iterate on the most.

745
00:51:03,966 --> 00:51:10,009
For example, the locomotion ones, we tend to keep them together because there's a lot

746
00:51:10,009 --> 00:51:11,189
of iteration on those.

747
00:51:11,189 --> 00:51:13,951
You know, you adjust one, maybe you have to fix the other one.

748
00:51:14,591 --> 00:51:18,192
And for example, for the text, all the variations,

749
00:51:18,192 --> 00:51:24,234
like all the clips that are logically connected

750
00:51:24,234 --> 00:51:26,735
in some way, we try to keep them in the same file.

751
00:51:26,735 --> 00:51:29,175
If they are just split, separated,

752
00:51:29,175 --> 00:51:33,177
then we probably keep them on different files.

753
00:51:33,177 --> 00:51:35,057
Or if in.

754
00:51:36,626 --> 00:51:41,690
We have usually two animators working on a card at any given

755
00:51:41,690 --> 00:51:42,210
time.

756
00:51:42,210 --> 00:51:45,413
So if they're working on two features, like damages

757
00:51:45,413 --> 00:51:49,837
and acting, for example, we try to keep those separated

758
00:51:49,837 --> 00:51:52,019
so they can work on it at the same time

759
00:51:52,019 --> 00:51:55,282
without having an impact on each other.

760
00:51:55,282 --> 00:51:55,922
Thank you.

761
00:51:55,922 --> 00:51:59,626
Hi, thanks for the talk.

762
00:51:59,626 --> 00:51:59,866
Sorry.

763
00:52:00,706 --> 00:52:06,648
Did the animators have to fight sort of the animation compression that might happen when they move the,

764
00:52:06,648 --> 00:52:12,231
because I noticed you were able to get some very specific smear frames with some of the animations.

765
00:52:12,231 --> 00:52:16,913
Was that ever an issue and did the animators have to learn to work around it or was it the other way around?

766
00:52:18,694 --> 00:52:23,875
uh... we had some uh... generally speaking no

767
00:52:23,875 --> 00:52:28,437
uh... it's we got uh... most of the time one on one uh...

768
00:52:28,437 --> 00:52:30,218
match between Maya and the engine

769
00:52:30,218 --> 00:52:32,518
but there are some cases where uh...

770
00:52:32,518 --> 00:52:38,060
there are I don't know some props uh... down the hierarchy down the chain

771
00:52:38,060 --> 00:52:41,161
and we have a prop that has to stay someplace or

772
00:52:41,161 --> 00:52:46,003
there's the idle in the character selection menu where uh... the there's a

773
00:52:47,323 --> 00:52:51,125
In places where there are specific contacts

774
00:52:51,125 --> 00:52:55,547
and really, really detailed animations,

775
00:52:55,547 --> 00:52:58,809
you can probably notice slightly some glitches there.

776
00:52:58,809 --> 00:53:00,469
But it's very, very hard to notice.

777
00:53:00,469 --> 00:53:01,450
Good enough, right?

778
00:53:01,450 --> 00:53:02,991
Yeah.

779
00:53:02,991 --> 00:53:03,811
Hopefully.

780
00:53:03,811 --> 00:53:06,952
We could tell you where, but we will not.

781
00:53:09,565 --> 00:53:15,327
So my favorite part of the game was walking through the game world and seeing the Rabbids

782
00:53:15,327 --> 00:53:20,509
on the side like slapping each other and doing all those different animations.

783
00:53:20,509 --> 00:53:28,372
So I was wondering from a creative standpoint how you went about figuring out what those

784
00:53:28,372 --> 00:53:30,793
would be and sort of divvying out the task.

785
00:53:32,214 --> 00:53:37,717
We actually have one amazing animator that works on those.

786
00:53:37,717 --> 00:53:40,378
She has a lot of experience with the rabbits.

787
00:53:40,378 --> 00:53:43,939
She's worked with, I think, on all the games ever created.

788
00:53:43,939 --> 00:53:47,221
So she's a master at that.

789
00:53:47,221 --> 00:53:52,063
And the way we usually work is she brainstorms ideas,

790
00:53:52,063 --> 00:53:55,485
and she creates these sequences.

791
00:53:55,485 --> 00:53:59,326
And then we try to fit them in the world

792
00:53:59,326 --> 00:54:00,687
where it makes sense.

793
00:54:01,695 --> 00:54:05,477
Or sometimes it's the other way around.

794
00:54:05,477 --> 00:54:11,641
We just look at the environment and see if there's

795
00:54:11,641 --> 00:54:13,522
anything that sparks a cool idea.

796
00:54:13,522 --> 00:54:14,343
And we just try.

797
00:54:14,692 --> 00:54:23,196
And then we try to understand where it's probably best to put them in a way that it doesn't

798
00:54:23,196 --> 00:54:26,277
annoy the player but they can be noticed.

799
00:54:26,277 --> 00:54:33,161
They are there to give life to the world and the rabbits must be doing something while

800
00:54:33,161 --> 00:54:35,862
they are there.

801
00:54:35,862 --> 00:54:40,665
Thanks, I was amazed by the amount of unique animation in the game.

802
00:54:42,517 --> 00:54:51,504
Um, thanks for that talk. Um, your implementations on, um, letting animators quickly iterate over several

803
00:54:51,504 --> 00:54:57,829
hundreds and hundreds of files blew my mind. Um, and how well your tool was connected to source control, that was amazing. Um,

804
00:54:58,550 --> 00:55:04,495
My question was, you have so much of animation content that's being pumped out.

805
00:55:04,495 --> 00:55:11,862
On the runtime side, does the tool help the runtime in loading these animation assets separately?

806
00:55:11,862 --> 00:55:18,248
Or does the tool employ any strategies in deciding, okay, this batch of animation content gets loaded first,

807
00:55:18,248 --> 00:55:21,371
and then this other batch gets loaded conditionally?

808
00:55:21,371 --> 00:55:22,832
Does the tool allow...

809
00:55:23,693 --> 00:55:31,196
um, any content author to specify that this batch of content needs to be loaded all the time

810
00:55:31,196 --> 00:55:34,697
and this batch of content can be loaded at some other time.

811
00:55:34,697 --> 00:55:38,819
Um, can you reformulate the question maybe? I just, I just lost the last part. I don't know if

812
00:55:38,819 --> 00:55:44,121
you were, uh, telling us if you can, uh, separate the takes in different scene fights or, uh,

813
00:55:44,121 --> 00:55:47,603
something like that. Um, I actually was talking more about, um,

814
00:55:48,527 --> 00:55:52,651
conditional loading of these animation assets on the runtime side.

815
00:55:52,651 --> 00:55:59,077
Did the tool have any strategies to suggest that certain animation content should be loaded

816
00:55:59,077 --> 00:56:04,202
all the time and certain content only on the engine side, right?

817
00:56:04,679 --> 00:56:09,965
My question was, did the tool make any improvements on the metadata layer?

818
00:56:09,965 --> 00:56:18,034
Okay, so the way the engine works right now is the clips are loaded for any character that is in gameplay.

819
00:56:18,034 --> 00:56:21,938
But, for example, for cinematics, to avoid the load of...

820
00:56:23,920 --> 00:56:30,142
usually to avoid loading usual useless animations.

821
00:56:30,142 --> 00:56:34,524
What we usually do is we have specific characters

822
00:56:34,524 --> 00:56:35,224
made for that.

823
00:56:35,224 --> 00:56:39,145
So for those, basically don't load anything.

824
00:56:39,145 --> 00:56:41,206
So do not overload the game.

825
00:56:41,886 --> 00:56:48,171
Okay, and I also really appreciated the dependency graph that you showed that helped, you know,

826
00:56:48,171 --> 00:56:52,875
visualize where things are going and what's dependent on what else.

827
00:56:52,875 --> 00:56:57,778
So as part of that, was there any visualization tool that you used?

828
00:56:58,439 --> 00:57:03,826
uh... that showed how animations were being shared across multiple

829
00:57:03,826 --> 00:57:07,090
uh... characters for example and were there any challenges that you faced in

830
00:57:07,090 --> 00:57:10,454
sharing animation content among several characters

831
00:57:10,454 --> 00:57:12,937
that have different skeletons and different rigs for example?

832
00:57:14,513 --> 00:57:16,656
Yeah, sharing was an issue.

833
00:57:16,656 --> 00:57:20,843
In fact, most of the missions are specific.

834
00:57:20,843 --> 00:57:26,972
But it happened that we shared the stuff between the

835
00:57:26,972 --> 00:57:30,197
rabbits, for example, as a starting point, at least.

836
00:57:30,425 --> 00:57:37,147
And I don't think we don't have that kind of way of

837
00:57:37,147 --> 00:57:40,208
visualizing how the dependencies are used.

838
00:57:40,208 --> 00:57:46,010
We have a database that we can query using standard queries

839
00:57:46,010 --> 00:57:46,870
to check the dependencies.

840
00:57:46,870 --> 00:57:49,531
But it's something separate from Maya.

841
00:57:49,531 --> 00:57:53,752
Basically, it works on the data that is baked inside the

842
00:57:53,752 --> 00:57:55,793
engine to check the dependencies.

843
00:57:56,490 --> 00:58:01,657
And the fact of sharing, it was a challenge for us,

844
00:58:01,657 --> 00:58:04,681
mostly because the difference in terms of proportions

845
00:58:04,681 --> 00:58:08,566
of the characters, but also in terms of creative intentions.

846
00:58:08,566 --> 00:58:11,489
Even the rabbits, as you saw,

847
00:58:11,489 --> 00:58:13,131
they have to convey different personalities.

848
00:58:13,512 --> 00:58:17,415
so it was also a creative choice to don't share everything.

849
00:58:17,415 --> 00:58:19,897
Maybe we just start from the same file,

850
00:58:19,897 --> 00:58:22,518
but after they go for their own way.

851
00:58:22,518 --> 00:58:24,900
And of course it has a cost in terms of iteration,

852
00:58:24,900 --> 00:58:27,682
so that's why we built all these structure

853
00:58:27,682 --> 00:58:30,364
to make iteration easier.

854
00:58:30,364 --> 00:58:30,925
Cool, thank you.

855
00:58:30,925 --> 00:58:31,385
Thank you.

856
00:58:34,169 --> 00:58:40,592
I'm trying to apply those old Looney Tunes techniques of squash and stretch and silhouette

857
00:58:40,592 --> 00:58:42,553
to the game I'm working on.

858
00:58:42,553 --> 00:58:47,475
So I studied this game like a textbook, because I really can't think of a better example.

859
00:58:47,475 --> 00:58:54,198
And watching that Rabid Kong deform in all those crazy ways was pretty exciting.

860
00:58:54,198 --> 00:58:58,400
So do you have any secrets you're willing to share about how to get that sort of crazy

861
00:58:58,400 --> 00:59:01,522
deformation without breaking the mesh and breaking the rig?

862
00:59:02,840 --> 00:59:06,364
You mean on the technical side or on the artistic side, or both?

863
00:59:06,364 --> 00:59:07,125
Or both.

864
00:59:07,125 --> 00:59:09,888
OK, I'll try to reply on the technical side.

865
00:59:09,888 --> 00:59:12,091
It is challenging.

866
00:59:12,091 --> 00:59:17,197
We used some parts of the rig are automated,

867
00:59:17,197 --> 00:59:19,600
some parts are handcrafted.

868
00:59:19,980 --> 00:59:25,483
And that was the secret to make that kind of freedom we had on the rigs.

869
00:59:25,483 --> 00:59:31,046
But it was challenging because you have everything basically on joint-based.

870
00:59:31,046 --> 00:59:37,149
And at some point of the production we introduced a kind of blend shape based on vertex shader.

871
00:59:37,149 --> 00:59:39,811
We created a tool for automating all this stuff.

872
00:59:40,491 --> 00:59:45,113
And that gave us a little bit more freedom in terms of deformations.

873
00:59:45,113 --> 00:59:49,956
But the challenge for us was to let everything work real time with just joints.

874
00:59:49,956 --> 00:59:52,157
And, yeah, that's it.

875
00:59:52,157 --> 01:00:02,442
And, yeah, the advice is, of course, smear frames and deformation have to be felt but not really seen.

876
01:00:02,442 --> 01:00:02,682
So...

877
01:00:04,211 --> 01:00:16,394
The focus should be in keeping the volumes and try to avoid getting the character out of his design.

878
01:00:16,394 --> 01:00:28,338
But what we usually do, we go broad, we exaggerate it, and then if it's not simple, if it just doesn't work, we scale it back.

879
01:00:28,338 --> 01:00:31,718
It's better than go up little by little.

880
01:00:33,365 --> 01:00:34,205
Thank you.

881
01:00:34,205 --> 01:00:34,965
You're welcome.

882
01:00:34,965 --> 01:00:38,627
All right, I think, okay.

883
01:00:38,627 --> 01:00:45,549
And if anyone has any questions, we will be able to show some of these tools at the Ubisoft

884
01:00:45,549 --> 01:00:47,450
Lounge this afternoon.

885
01:00:47,450 --> 01:00:48,891
We'll be there to answer any questions.

886
01:00:48,891 --> 01:00:53,813
So if you want to drop by and say hello, we'll be there.

887
01:00:53,813 --> 01:00:54,853
Thank you all.

888
01:00:54,853 --> 01:00:55,613
Thank you.

