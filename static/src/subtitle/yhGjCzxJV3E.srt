1
00:00:18,601 --> 00:00:26,205
Ditch nature, we'll come out of nowhere

2
00:00:27,005 --> 00:00:37,832
Freak shit, frown like sulfur in the air

3
00:00:41,074 --> 00:00:45,436
So many people, many pieces, only pain and

4
00:00:46,673 --> 00:00:48,883
Six times knocking on the door

5
00:00:49,165 --> 00:00:51,495
No response but hey, you're an imbecile!

6
00:01:17,409 --> 00:01:26,514
Just wanna get a perfect at my game

7
00:01:26,534 --> 00:01:27,155
It's plain easy now

8
00:01:27,175 --> 00:01:27,955
Wanna have a game?

9
00:01:35,460 --> 00:01:36,261
Guilty Gear Exile

10
00:01:45,893 --> 00:01:51,395
I'd like to talk about our art style of our latest title, Guilty Gear Xrd.

11
00:01:52,395 --> 00:01:54,035
Why did we choose this art style?

12
00:01:54,715 --> 00:01:57,196
What made it so hard to fake 2D in 3D?

13
00:01:58,456 --> 00:01:59,596
How did we accomplish it?

14
00:02:00,257 --> 00:02:01,557
What made the difference?

15
00:02:02,797 --> 00:02:04,357
We only have a limited time frame,

16
00:02:05,038 --> 00:02:07,398
and I won't be able to cover each and every aspect of it,

17
00:02:08,138 --> 00:02:12,199
so it mostly consists on the 3D character art and the animation.

18
00:02:13,160 --> 00:02:19,422
If you have any specific questions, I'll try to leave as much Q&A time as possible at the end of the session.

19
00:02:19,882 --> 00:02:21,643
So please ask me at the end of the session.

20
00:02:22,723 --> 00:02:26,725
Before we go on, I want to know how many people here have actually played the game.

21
00:02:30,906 --> 00:02:32,787
Much more than I expected. Thank you.

22
00:02:35,487 --> 00:02:37,488
How many of you have no idea what the game is about?

23
00:02:39,289 --> 00:02:40,629
Okay. Okay.

24
00:02:43,368 --> 00:02:45,089
How many of you are artists?

25
00:02:47,110 --> 00:02:47,370
Okay.

26
00:02:49,551 --> 00:02:49,971
Quite a lot.

27
00:02:50,631 --> 00:02:51,252
And coders?

28
00:02:53,053 --> 00:02:53,773
Oh, quite a lot too.

29
00:02:54,273 --> 00:02:54,493
Great.

30
00:02:56,014 --> 00:02:57,675
How many of you like anime?

31
00:03:00,016 --> 00:03:02,097
Oh, super.

32
00:03:03,338 --> 00:03:03,658
Okay.

33
00:03:04,118 --> 00:03:05,559
How many of you are interested

34
00:03:05,699 --> 00:03:07,520
in non-photorealistic rendering?

35
00:03:09,101 --> 00:03:10,701
Oh, that makes me so happy.

36
00:03:13,513 --> 00:03:17,134
I know our art style is not the most conventional in the West,

37
00:03:18,134 --> 00:03:21,634
so I was just curious to know what kind of people were interested in this topic.

38
00:03:23,495 --> 00:03:24,175
Now let's get started.

39
00:03:26,575 --> 00:03:28,656
First, let me do a super fast introduction.

40
00:03:31,056 --> 00:03:33,097
I am Junior Christopher Motomura,

41
00:03:33,897 --> 00:03:37,017
a technical artist and character modeler working at Arc System Works.

42
00:03:38,157 --> 00:03:40,338
I've been working at the company for 13 years,

43
00:03:41,378 --> 00:03:43,098
mostly as a third 3D artist.

44
00:03:43,908 --> 00:03:46,569
but in many other positions, such as game designer,

45
00:03:46,849 --> 00:03:51,011
game director, story script, localization, voice acting,

46
00:03:51,511 --> 00:03:54,472
and even some singing, which I personally don't want to touch.

47
00:03:57,014 --> 00:04:00,115
My role in Guilty Gear Xrd were lead character modeler,

48
00:04:01,035 --> 00:04:02,176
character look development.

49
00:04:03,176 --> 00:04:05,557
That included writing shaders, rigging,

50
00:04:06,078 --> 00:04:06,938
and other bits and pieces.

51
00:04:07,998 --> 00:04:11,200
So basically, I'm the guy behind how the three characters

52
00:04:11,360 --> 00:04:12,160
look on the screen.

53
00:04:15,015 --> 00:04:18,576
Guilty Gear Ex-Aid is the latest installment of the Guilty Gear franchise,

54
00:04:19,596 --> 00:04:21,896
a long-running series of 2D fighting games.

55
00:04:23,057 --> 00:04:25,897
Previously, most games in the series used 2D sprites.

56
00:04:27,218 --> 00:04:30,178
This title is a reboot from a long-time halt on the series

57
00:04:30,638 --> 00:04:32,699
and has some drastic change in art style.

58
00:04:33,759 --> 00:04:37,400
We chose to do it in 3D, instead of 2D sprites,

59
00:04:37,540 --> 00:04:39,780
while maintaining the charm of the sprites it had.

60
00:04:41,121 --> 00:04:44,662
This was a great leap of faith, and we're thankful it paid out.

61
00:04:46,126 --> 00:04:51,709
To get a better idea of what we are talking about, let's see another video mainly showing how the gameplay looks.

62
00:05:01,435 --> 00:05:09,159
In Guilty Gear Xrd, our goal was to keep the look and feel of the old titles and represent them in a new form, 3D.

63
00:05:10,260 --> 00:05:14,222
The visuals needed to resemble those of the sprites we had used for so many years.

64
00:05:15,120 --> 00:05:17,422
and look even better with higher resolution in mind.

65
00:05:18,383 --> 00:05:23,308
Although it utilizes 3D a lot, the game itself is still played in a 2D plane,

66
00:05:23,988 --> 00:05:25,169
being true to its nature.

67
00:05:26,230 --> 00:05:29,753
As you may see, the art style is strictly based on Japanese anime,

68
00:05:30,214 --> 00:05:33,777
which is also a tradition brought over from the 2D sprites back in the days.

69
00:05:41,297 --> 00:05:47,340
This was done by combining custom cell shaders and 3D models made especially for these shaders.

70
00:05:48,541 --> 00:05:51,963
Turning 3D meant that we were no longer limited by the resolution.

71
00:05:52,904 --> 00:05:57,626
The screen is now 1080p for PS4, 720p for PS3.

72
00:05:58,207 --> 00:06:01,969
So that was a great boost in resolution from the old 480p sprites.

73
00:06:07,565 --> 00:06:11,547
The shift to 3D graphics gave us much more benefit than just higher resolution.

74
00:06:12,648 --> 00:06:14,569
It's the freedom we achieved on the camera.

75
00:06:15,690 --> 00:06:18,512
The cel-shaded 3D graphics work well in the battle screen,

76
00:06:19,072 --> 00:06:21,874
but the real shine is when the camera swings.

77
00:06:22,854 --> 00:06:28,018
Being able to move the camera at will, dynamic camera angles are now viable in the game.

78
00:06:29,398 --> 00:06:32,400
For special effects and final and finished scenes,

79
00:06:32,921 --> 00:06:34,622
the camera moves around the 3D space

80
00:06:34,822 --> 00:06:38,305
and shows the action from a more dramatic perspective.

81
00:06:39,286 --> 00:06:41,708
We're happy with the result and the feedback

82
00:06:41,728 --> 00:06:42,709
we got from our audience.

83
00:06:43,729 --> 00:06:46,372
Thanks to that, I'm standing here today at GDC.

84
00:06:51,356 --> 00:06:51,776
Thank you.

85
00:06:54,598 --> 00:06:54,878
Thanks.

86
00:06:56,900 --> 00:07:00,201
So we got a new art style, but where did the idea come from?

87
00:07:01,181 --> 00:07:02,521
Why did we choose this path?

88
00:07:03,362 --> 00:07:04,942
Why didn't we stick to 2D sprites?

89
00:07:05,822 --> 00:07:07,043
Well, there's a simple answer.

90
00:07:09,344 --> 00:07:10,484
We already had BlazBlue.

91
00:07:11,504 --> 00:07:14,385
BlazBlue is our other 2D fighting game franchise

92
00:07:14,405 --> 00:07:16,026
that utilizes high-res sprites.

93
00:07:16,986 --> 00:07:18,726
And it does it so well, we didn't

94
00:07:18,787 --> 00:07:20,107
see much room for improvement.

95
00:07:21,267 --> 00:07:22,888
We didn't want to compete with ourselves.

96
00:07:23,567 --> 00:07:26,688
So for Guilty Gear Xrd, we needed something different.

97
00:07:28,569 --> 00:07:31,590
And that's when we decided to use cel-shaded 3D.

98
00:07:32,591 --> 00:07:34,431
Well, we considered many other options,

99
00:07:34,511 --> 00:07:37,853
such as vector art, ultra-high-res sprites, and others.

100
00:07:38,773 --> 00:07:41,695
But what emerged most promising was cel-shaded 3D,

101
00:07:42,175 --> 00:07:45,256
which I, at the time, happened to be experimenting with.

102
00:07:46,857 --> 00:07:49,138
This here is a piece from a canceled project

103
00:07:49,158 --> 00:07:49,978
that I was working on.

104
00:07:50,989 --> 00:07:54,732
The project didn't work out, but the art style showed a lot of potential.

105
00:07:56,113 --> 00:08:01,637
So when Guilty Gear Ex-Art finally started to take form, we decided to take this art style even further.

106
00:08:02,878 --> 00:08:08,063
If done right, we could maintain our anime style while gaining the various benefits of 3D.

107
00:08:09,304 --> 00:08:14,108
Dynamic camera angles and animated cutscenes were things we were craving for back in the days.

108
00:08:15,469 --> 00:08:19,192
We also found potential in it because the technique was not well explored.

109
00:08:19,820 --> 00:08:22,181
and had lots of space for improvement.

110
00:08:23,262 --> 00:08:24,742
By advancing the state of the art,

111
00:08:25,202 --> 00:08:27,763
there was a great chance to stand out in the crowded market.

112
00:08:31,105 --> 00:08:32,545
So we decided which way to go.

113
00:08:32,565 --> 00:08:35,286
Now we needed to actually start moving.

114
00:08:35,986 --> 00:08:38,007
Let's have a look at how we faced the challenge.

115
00:08:42,289 --> 00:08:45,870
Getting 3D to look 2D was going to be a tough challenge,

116
00:08:46,230 --> 00:08:46,790
and we knew it.

117
00:08:47,837 --> 00:08:52,159
It was seldom accomplished, so we had to find our own way and pave our own path.

118
00:08:53,320 --> 00:08:56,562
A lot of study went into both 2D art and 3D technology,

119
00:08:57,382 --> 00:09:00,744
because knowing both sides was essential to tackle this task.

120
00:09:02,144 --> 00:09:07,927
Elements that were not translated well enough from 2D to 3D were picked out and solved one by one.

121
00:09:08,788 --> 00:09:12,910
We broke a lot of conventions on the way, because they just didn't suit this style.

122
00:09:14,695 --> 00:09:17,376
As a result, we came up with a new unique workflow,

123
00:09:17,556 --> 00:09:18,757
mostly built from scratch.

124
00:09:21,098 --> 00:09:23,859
At the same time, we introduced ourselves to new tools

125
00:09:23,999 --> 00:09:25,560
in order to face this huge challenge.

126
00:09:26,520 --> 00:09:28,301
First, Unreal Engine 3.

127
00:09:29,421 --> 00:09:32,843
We considered multiple engines, and Unreal Engine 3

128
00:09:32,943 --> 00:09:34,583
was chosen because of multiple reasons.

129
00:09:36,044 --> 00:09:37,585
We needed a new engine that could

130
00:09:37,625 --> 00:09:39,566
handle multiple platforms.

131
00:09:40,406 --> 00:09:41,526
Our deadline was strict.

132
00:09:42,137 --> 00:09:44,499
and building an engine from scratch was not an option.

133
00:09:45,720 --> 00:09:47,861
We had a team mostly consisting of artists,

134
00:09:48,442 --> 00:09:51,805
and the artist-friendly design of Unreal 3 matched our needs.

135
00:09:52,986 --> 00:09:55,067
The fact that Unreal 4 was on its way

136
00:09:55,207 --> 00:09:57,649
and Unreal 3 was around the end of its lifecycle

137
00:09:58,270 --> 00:09:59,071
also benefited us.

138
00:10:00,071 --> 00:10:01,973
The engine was well-developed and stable,

139
00:10:02,654 --> 00:10:05,056
and we had a lot of freedom customizing it

140
00:10:05,296 --> 00:10:06,236
with the full source code.

141
00:10:07,898 --> 00:10:10,780
The other tool that helped us a lot was Autodesk Softimage.

142
00:10:11,844 --> 00:10:15,228
The flexibility in modeling and animation let us focus on quality.

143
00:10:16,409 --> 00:10:20,053
A built-in shader editor made it possible to experiment with cell shading a lot.

144
00:10:22,555 --> 00:10:30,023
Because of its non-destructive workflow, we were able to improve our assets continuously throughout the whole production right till the last minute.

145
00:10:31,144 --> 00:10:33,747
Without this tool, I believe it just wouldn't have happened.

146
00:10:40,453 --> 00:10:43,574
Now, let's dive into the details of how we did it,

147
00:10:44,675 --> 00:10:46,295
starting with the look of the characters.

148
00:10:49,136 --> 00:10:51,817
The most important asset of our game were the characters.

149
00:10:52,857 --> 00:10:54,278
Without getting them right, there

150
00:10:54,318 --> 00:10:56,459
was just no way we were going to get the game right.

151
00:10:57,419 --> 00:11:00,480
First, the characters needed to represent the 2D design well

152
00:11:00,520 --> 00:11:01,920
enough to appeal to the audience.

153
00:11:02,781 --> 00:11:06,122
The models had to be as good as the designs, or even better.

154
00:11:07,202 --> 00:11:09,303
And they had to look 2D as much as possible.

155
00:11:10,741 --> 00:11:12,621
To do this, our principle was simple.

156
00:11:13,642 --> 00:11:15,122
Kill everything 3D.

157
00:11:16,562 --> 00:11:18,322
If you find something that looks 3D,

158
00:11:18,842 --> 00:11:20,663
you just have to find a way to avoid it.

159
00:11:22,203 --> 00:11:25,324
This often boiled down to hand crafting by the artists.

160
00:11:26,324 --> 00:11:29,705
Because while the math within the shaders are always correct,

161
00:11:30,565 --> 00:11:32,005
correct is just not good enough.

162
00:11:33,565 --> 00:11:36,266
To get a convincing 2D look, everything on screen

163
00:11:36,386 --> 00:11:39,126
has to be an intentional choice, not just

164
00:11:39,146 --> 00:11:40,367
the result of a calculation.

165
00:11:41,541 --> 00:11:43,842
To achieve all this, instant feedback was key.

166
00:11:45,043 --> 00:11:47,485
We were fortunate to have a real-time shader preview

167
00:11:47,865 --> 00:11:50,126
on our modeling software that gave us

168
00:11:50,527 --> 00:11:52,968
trustworthy representations of the actual game.

169
00:11:53,949 --> 00:11:56,130
I would like to show you a demonstration of this.

170
00:12:12,758 --> 00:12:13,378
It's not coming on.

171
00:12:20,300 --> 00:12:20,860
Just a second.

172
00:12:23,160 --> 00:12:23,701
Things happen.

173
00:12:40,845 --> 00:12:41,345
No, that's not.

174
00:12:41,505 --> 00:12:42,345
That's the presentation.

175
00:12:43,250 --> 00:12:43,890
I need the other one.

176
00:12:48,411 --> 00:12:49,111
This should be one.

177
00:12:59,593 --> 00:13:00,834
Oh, there we go. Okay, great.

178
00:13:02,154 --> 00:13:02,654
Sorry for that.

179
00:13:04,975 --> 00:13:05,755
Okay, um...

180
00:13:06,955 --> 00:13:08,736
Here is a model of one of our characters.

181
00:13:10,676 --> 00:13:12,877
As you can see, real-time shading is taking place.

182
00:13:14,654 --> 00:13:16,956
and it completely resembles the look in the actual game.

183
00:13:23,302 --> 00:13:25,804
The models and animation were created in this environment,

184
00:13:26,304 --> 00:13:29,387
so the artist would know exactly how the end result will look,

185
00:13:30,047 --> 00:13:31,629
even without exporting to the game.

186
00:13:32,470 --> 00:13:36,733
For example, the modeler will know exactly how it will look

187
00:13:37,474 --> 00:13:39,656
in-game if some vertices were modified.

188
00:13:57,645 --> 00:14:02,489
Well, you wouldn't really do that, but you'll see how it looks in the real game if you do that.

189
00:14:03,210 --> 00:14:04,731
So let me just undo that.

190
00:14:04,751 --> 00:14:09,175
Okay.

191
00:14:10,436 --> 00:14:12,258
Okay, so let's go on.

192
00:14:12,278 --> 00:14:15,540
So let me turn...

193
00:14:15,560 --> 00:14:17,842
Okay.

194
00:14:19,764 --> 00:14:20,024
There we go.

195
00:14:21,051 --> 00:14:26,255
The models have a fairly high polycount, around 40,000 triangles on average.

196
00:14:27,056 --> 00:14:29,978
We knew we were going to do extra close-ups in cutscenes,

197
00:14:30,558 --> 00:14:34,602
so the models had to hold up even at extremely close distance.

198
00:14:35,583 --> 00:14:38,045
Details were directly modelled in with geometry.

199
00:14:39,226 --> 00:14:41,988
What made this special about the character models in Guilty Gear Xrd

200
00:14:42,448 --> 00:14:44,150
are that they are very texture independent.

201
00:14:45,110 --> 00:14:45,631
For example...

202
00:14:46,407 --> 00:14:51,089
Unlike our average 3D games, we do not use textures such as normal maps for our characters.

203
00:14:52,089 --> 00:14:59,092
Instead, we use vertex properties such as vertex normals, vertex colors, and UV coordinates a lot to store data in.

204
00:15:00,152 --> 00:15:02,613
The reason for this is, again, the extra close-ups.

205
00:15:03,594 --> 00:15:07,075
The problem with texture data is that they're very resolution dependent.

206
00:15:08,076 --> 00:15:10,917
Pixel data easily can get jaggy at super close-ups.

207
00:15:11,557 --> 00:15:14,878
And that cannot be helped unless you have ultra-high resolution.

208
00:15:16,103 --> 00:15:20,245
On the other hand, vertex properties are linearly interpolated between vertices,

209
00:15:21,026 --> 00:15:22,886
which is completely resolution independent.

210
00:15:25,668 --> 00:15:27,528
Now, let's go into the actual shading.

211
00:15:28,849 --> 00:15:34,291
In cell shading, the surface is either lit or not, and no value in between.

212
00:15:35,392 --> 00:15:38,573
This is one of the reasons cell shading is so hard to get right.

213
00:15:39,693 --> 00:15:45,436
In a drawing, the artist will choose the most convincing distribution of light and darkness.

214
00:15:46,340 --> 00:15:49,982
But in a shader, it's all math, where unforgiving thresholds

215
00:15:50,242 --> 00:15:52,282
mercilessly split between light and dark.

216
00:15:53,563 --> 00:15:56,224
In cell shading, every little noise on the surface

217
00:15:56,284 --> 00:15:58,044
will become extremely distracting.

218
00:15:58,865 --> 00:16:00,725
The slightest difference in the surface normal

219
00:16:00,865 --> 00:16:02,486
may end up as a huge blotch.

220
00:16:03,906 --> 00:16:05,967
A convincing 2D look can only be achieved

221
00:16:06,067 --> 00:16:08,628
with precise control over the distribution of shades.

222
00:16:11,129 --> 00:16:13,630
The code for our cell shader is actually pretty simple.

223
00:16:14,848 --> 00:16:20,931
In the main part of the calculation, a generic step function is used to decide if the pixel is lit or not.

224
00:16:22,411 --> 00:16:26,053
To put it simple for artists, this code works like this.

225
00:16:27,133 --> 00:16:30,254
If the surface normal is facing the light source, it's lit.

226
00:16:31,755 --> 00:16:35,236
If it's facing more than 90 degrees away from the light source, it's not.

227
00:16:36,736 --> 00:16:41,178
90 degrees is the threshold here, but it could be any other value.

228
00:16:42,178 --> 00:16:43,799
What matters here are the following.

229
00:16:44,347 --> 00:16:47,169
the threshold, the light vector, and the normal vector.

230
00:16:48,490 --> 00:16:49,010
And that's all.

231
00:16:49,330 --> 00:16:51,932
Only these three components matter in this shading code.

232
00:16:53,092 --> 00:16:54,353
So what we have to do is simple.

233
00:16:55,173 --> 00:16:56,914
Take full control over those three.

234
00:16:59,616 --> 00:17:02,498
First, let's have a look at the threshold.

235
00:17:03,398 --> 00:17:05,299
We use the channel from vertex color

236
00:17:05,739 --> 00:17:07,140
as an offset to the threshold.

237
00:17:08,081 --> 00:17:09,642
This made it possible for artists

238
00:17:09,702 --> 00:17:12,503
to make certain areas on the model get darker more easily.

239
00:17:13,610 --> 00:17:16,232
This could be used to represent the occlusion of the vertex.

240
00:17:17,093 --> 00:17:20,575
Areas more occluded from the light have less chance to be lit.

241
00:17:21,696 --> 00:17:24,018
The artist will go around the mesh setting values,

242
00:17:24,558 --> 00:17:27,841
defining the areas most likely to be shaded.

243
00:17:27,861 --> 00:17:32,744
The artist may even set the value to zero, making the area always shaded no

244
00:17:32,784 --> 00:17:37,347
matter what. We use texture data in the same way in

245
00:17:37,387 --> 00:17:41,350
places, but vertex colors served us better in many cases.

246
00:17:42,635 --> 00:17:46,277
Again, texture is dependent on resolution, but vertex properties are not.

247
00:17:46,957 --> 00:17:50,499
The linear interpolation between vertices gave us a very clean result

248
00:17:51,199 --> 00:17:53,240
without any pixelation.

249
00:17:54,201 --> 00:17:57,963
Adding to that, it was much easier to adjust the vertex colors

250
00:17:58,063 --> 00:18:02,305
because you can just get instant feedback from the preview,

251
00:18:02,825 --> 00:18:04,266
even while fiddling with the values.

252
00:18:07,707 --> 00:18:08,648
Next, to lighting.

253
00:18:09,821 --> 00:18:15,022
Unlike normal 3D games, Guilty Gear Xrd does not have a global lighting system affecting the characters.

254
00:18:16,303 --> 00:18:23,105
Each character has his or her own dedicated light vector that lights their idle pose in the best way.

255
00:18:24,105 --> 00:18:32,427
The lighting doesn't change frame by frame in the battle scene, but in cutscenes it animates along with the character to get the best result each and every frame.

256
00:18:35,628 --> 00:18:37,128
And finally, the normals.

257
00:18:38,219 --> 00:18:42,242
Surface normals are one of the main reasons cell shading is so hard to get right.

258
00:18:43,182 --> 00:18:48,907
The smallest inconsistency in normals results in a super evident artifact under cell shading.

259
00:18:49,747 --> 00:18:53,410
The problem with the normals are that they are automatically calculated.

260
00:18:54,511 --> 00:18:58,073
And the result of this calculation is often not what the artist intended.

261
00:18:59,435 --> 00:19:02,317
On the other hand, shading in 2D art is very intentional.

262
00:19:03,538 --> 00:19:06,960
To close this gap, there was only one thing we had to do.

263
00:19:08,188 --> 00:19:09,969
Control the normals with intention.

264
00:19:11,170 --> 00:19:13,371
Fortunately, Softimage had powerful tools

265
00:19:13,431 --> 00:19:14,671
built in for this purpose.

266
00:19:16,092 --> 00:19:18,853
Although editing normals is nothing new to game graphics,

267
00:19:20,174 --> 00:19:21,314
we took it even further.

268
00:19:22,314 --> 00:19:24,235
To get rid of unintentional shading,

269
00:19:24,395 --> 00:19:27,457
we modified the normals on every major feature of the character.

270
00:19:28,677 --> 00:19:30,458
The faces of the characters especially

271
00:19:30,518 --> 00:19:33,199
needed to be handcrafted to get clean anime look.

272
00:19:35,920 --> 00:19:37,481
Here, I'd like to show you the comparison.

273
00:19:43,876 --> 00:19:46,537
This character model has his face normals edited.

274
00:19:48,659 --> 00:19:50,520
It looks clean from any light angle.

275
00:19:55,982 --> 00:19:59,684
And here is what, here it was how it's gonna look

276
00:19:59,784 --> 00:20:02,426
if I delete the normals.

277
00:20:07,368 --> 00:20:07,589
Yeah.

278
00:20:11,291 --> 00:20:11,791
Pretty ugly.

279
00:20:12,493 --> 00:20:16,655
practically unusable. So let me undo that.

280
00:20:21,678 --> 00:20:26,061
And there we go, clean again. Okay, something in common with these three

281
00:20:26,121 --> 00:20:31,204
components I just talked about is intention. Being able to reflect the

282
00:20:31,284 --> 00:20:35,506
artist's intention on the final result is the key when it comes to stylized art.

283
00:20:44,241 --> 00:20:45,662
Now, we sorted the lighting out.

284
00:20:48,103 --> 00:20:51,845
We have to think what color to paint the lit and shaded colors.

285
00:20:53,286 --> 00:20:56,007
Color selection in anime is vital.

286
00:20:56,827 --> 00:21:01,710
Every color is carefully chosen to express not just the material, but the character itself.

287
00:21:03,111 --> 00:21:06,793
It is not as simple as just multiplying the shaded area with an ambient color.

288
00:21:07,813 --> 00:21:13,256
The coloring style in anime can vary from title to title, but one thing is in common.

289
00:21:14,076 --> 00:21:15,717
This too is very intentional.

290
00:21:16,718 --> 00:21:18,740
The combination of lit and shaded colors

291
00:21:18,780 --> 00:21:20,902
can express a vast amount of characteristics,

292
00:21:21,602 --> 00:21:23,504
not just the material, but the atmosphere

293
00:21:23,584 --> 00:21:24,424
the character wields.

294
00:21:25,385 --> 00:21:26,686
It's an art in its own sense,

295
00:21:27,567 --> 00:21:28,928
and it's a task usually given

296
00:21:29,028 --> 00:21:30,409
to professional color designers.

297
00:21:31,730 --> 00:21:33,572
To get the anime look right in 3D,

298
00:21:33,652 --> 00:21:34,753
we took this by heart,

299
00:21:35,313 --> 00:21:37,475
and worked on a way to replicate this process.

300
00:21:41,178 --> 00:21:43,260
By studying anime art style extensively,

301
00:21:43,807 --> 00:21:47,929
we found that shaded colors often express how solid the material is.

302
00:21:49,210 --> 00:21:52,012
A less solid material will pass more light through it,

303
00:21:52,712 --> 00:21:54,313
getting a lighter color for the shades.

304
00:21:55,394 --> 00:21:57,895
The light passing through the material will get tinted

305
00:21:58,215 --> 00:22:00,016
depending on the material's composition.

306
00:22:01,017 --> 00:22:03,959
For example, shades on human skin get a red tint

307
00:22:04,179 --> 00:22:05,280
because of the flesh under it.

308
00:22:06,600 --> 00:22:09,722
In order to implement this in the shader, we used two textures.

309
00:22:10,743 --> 00:22:13,345
The base texture defines the color of the surface when it's lit.

310
00:22:14,314 --> 00:22:17,756
while the tint texture defines how dark it gets when shaded.

311
00:22:19,237 --> 00:22:21,739
Multiplying the two textures, we get the shaded color.

312
00:22:22,900 --> 00:22:26,563
This way, the choice of color is completely up to the artist.

313
00:22:27,384 --> 00:22:30,687
The artist can choose whatever color he or she may see fit

314
00:22:31,347 --> 00:22:33,849
for the lit area and the shaded area of the material.

315
00:22:35,731 --> 00:22:38,553
On a side note, as you can see, both these textures

316
00:22:38,753 --> 00:22:42,336
are just square areas consisting of single colors.

317
00:22:43,088 --> 00:22:45,550
This is because we simply use them as color lookups

318
00:22:46,810 --> 00:22:50,872
and do not draw in any details to the textures as images.

319
00:22:52,112 --> 00:22:54,733
As stated before, most meaningful information

320
00:22:54,793 --> 00:22:57,555
is stored in the mesh itself rather than in the textures.

321
00:23:01,156 --> 00:23:03,577
Along with colors and shading, lines

322
00:23:03,677 --> 00:23:05,378
play a huge role in cell shading.

323
00:23:06,478 --> 00:23:09,119
In fact, if you think in black and white manga style,

324
00:23:10,080 --> 00:23:12,441
lines would be the most important aspect of the visual.

325
00:23:14,175 --> 00:23:18,336
In Guilty Gear Ixard, we use a traditional inverted hull method

326
00:23:18,616 --> 00:23:19,857
as outlines for the characters.

327
00:23:20,917 --> 00:23:24,077
A second set of darker polygons are generated in the shader

328
00:23:24,758 --> 00:23:26,518
and are expanded in the normal direction

329
00:23:26,778 --> 00:23:28,758
to create the hull, which shapes the outline.

330
00:23:29,959 --> 00:23:32,419
We added some new tricks to this long-established method

331
00:23:32,799 --> 00:23:34,920
to achieve even more control over the results.

332
00:23:36,300 --> 00:23:39,081
It's common these days to use post effect for the outlines,

333
00:23:40,101 --> 00:23:43,002
but we found this method suited our needs better.

334
00:23:44,328 --> 00:23:47,771
First of all, we could preview the result right in the modeling viewport,

335
00:23:48,271 --> 00:23:51,014
letting us know exactly how it's going to look in the game.

336
00:23:57,419 --> 00:24:00,962
We had more control over the lines through the vertex shader,

337
00:24:01,422 --> 00:24:03,424
giving precise control over the whole model.

338
00:24:04,365 --> 00:24:07,147
With this, we were able to give the outline variable width

339
00:24:07,307 --> 00:24:10,710
in places we saw fit, even erasing it completely at times.

340
00:24:11,621 --> 00:24:15,543
Again, vertex colors was used to control these line properties.

341
00:24:19,465 --> 00:24:24,128
We got our outlines solved, but there's another set of lines that need to be discussed.

342
00:24:25,109 --> 00:24:27,590
The inner lines, or the lines on the surface.

343
00:24:28,691 --> 00:24:33,633
We needed a different approach for the inner lines, because the inverted hull method used

344
00:24:33,673 --> 00:24:36,275
for the outlines did not work for these kinds of lines.

345
00:24:38,056 --> 00:24:40,217
These lines play a huge role in 2D art.

346
00:24:40,940 --> 00:24:44,943
conducting where one surface ends and another starts.

347
00:24:46,405 --> 00:24:48,866
In order to get a 2D look, we just

348
00:24:48,907 --> 00:24:50,548
needed to find a way to get this right.

349
00:24:52,109 --> 00:24:55,812
The easiest way would have been to simply draw

350
00:24:55,832 --> 00:24:58,154
the lines on the texture, but we knew

351
00:24:58,214 --> 00:25:01,736
that there was a major limitation to this.

352
00:25:02,637 --> 00:25:04,579
The challenge here was, again, resolution.

353
00:25:05,819 --> 00:25:08,141
We needed the characters to be able to hold up

354
00:25:08,261 --> 00:25:09,222
at extra close-ups.

355
00:25:09,800 --> 00:25:12,181
without any jaggies or pixelations to be found.

356
00:25:13,161 --> 00:25:17,003
To avoid pixelation, you would need an infinitely high resolution for the textures,

357
00:25:17,623 --> 00:25:18,863
which is simply impractical.

358
00:25:19,804 --> 00:25:21,224
So we had to find a better way.

359
00:25:22,425 --> 00:25:25,346
We came up with a technique using special UV assignments

360
00:25:26,326 --> 00:25:29,588
to get jaggy-free, super clean lines, even at close-ups.

361
00:25:30,868 --> 00:25:32,629
Here is how this technique goes.

362
00:25:34,302 --> 00:25:39,665
All the lines are drawn as axis-aligned beams

363
00:25:39,785 --> 00:25:43,187
on the texture, and the UV is lined up alongside them.

364
00:25:44,027 --> 00:25:46,188
How much the UV overlaps these beams

365
00:25:46,789 --> 00:25:48,930
defines how thick the line becomes.

366
00:25:50,310 --> 00:25:53,352
As long as the pixels are aligned to an axis,

367
00:25:53,792 --> 00:25:54,893
they don't get any jaggy.

368
00:25:55,753 --> 00:25:58,014
So we figured we could use this to our advantage.

369
00:25:59,395 --> 00:26:02,177
The downside is that you get a very distorted UV

370
00:26:02,237 --> 00:26:02,717
for the surface.

371
00:26:04,117 --> 00:26:08,465
But that was not a problem for us, because we do not put any details on the texture.

372
00:26:12,131 --> 00:26:14,976
It may be difficult to imagine, so let me demonstrate it to you.

373
00:26:42,060 --> 00:26:46,282
Okay, this would be how a freehand line on a texture would look like.

374
00:26:50,704 --> 00:26:51,184
Pretty bad.

375
00:26:52,125 --> 00:26:53,885
It may look okay from distance,

376
00:26:56,827 --> 00:26:58,808
but it clearly does not hold up at close-ups.

377
00:27:01,709 --> 00:27:03,910
Let me get rid of that and show you the UV.

378
00:27:16,629 --> 00:27:19,673
As you can see, all lines align to the X and Y axis.

379
00:27:20,774 --> 00:27:22,877
This is the area of the shoulder.

380
00:27:23,798 --> 00:27:24,558
Here's the shoulder.

381
00:27:28,163 --> 00:27:31,967
By nudging the UV onto the black area, you can control how wide the line is.

382
00:27:31,987 --> 00:27:34,050
I'll show you.

383
00:27:49,650 --> 00:27:56,123
You can precisely define the width of the line at each UV point and get super sharp edges at places you see fit.

384
00:28:24,885 --> 00:28:30,229
With the same texture resolution, you get a super clean line without any noticeable pixelation going on.

385
00:28:33,632 --> 00:28:36,614
I zoom up, and still no pixelation.

386
00:28:38,215 --> 00:28:40,317
I zoom out, still clean.

387
00:28:41,698 --> 00:28:47,842
These lines look great close by, but because texture filtering is in play, it also looks very good from a distance.

388
00:29:05,959 --> 00:29:10,163
With that, we have a pretty good model with many features representing a 2D feel.

389
00:29:11,084 --> 00:29:12,765
Now let's move on to animation.

390
00:29:15,167 --> 00:29:19,011
Animation is where the merits of the models and the shaders truly come to play.

391
00:29:20,192 --> 00:29:24,576
As with the models and the shaders, our goal was to make it look as 2D as possible.

392
00:29:25,757 --> 00:29:28,720
To do this, we took a style called limited animation.

393
00:29:29,917 --> 00:29:35,839
This is a term often used in Japanese animation industry in comparison with full animation.

394
00:29:37,099 --> 00:29:42,380
Unlike Western animations such as Disney, it focuses more on tricking the eye with less

395
00:29:42,720 --> 00:29:48,622
frames. This was the way the old Guilty Gear titles were animated, and to replicate that,

396
00:29:49,182 --> 00:29:55,483
we decided to use the same principle, but this time in 3D. We did try the full animation path

397
00:29:55,663 --> 00:29:59,284
in early development, but it simply didn't convey the sense that it was 2D.

398
00:30:00,758 --> 00:30:03,239
Having the poses interpolate between keyframes

399
00:30:03,860 --> 00:30:06,300
makes it look smoother, but at the same time

400
00:30:06,440 --> 00:30:07,741
makes it look more 3D.

401
00:30:08,741 --> 00:30:11,202
So we just stopped using interpolations

402
00:30:11,662 --> 00:30:12,562
between keyframes.

403
00:30:13,643 --> 00:30:16,724
Every frame now is a keyframe, and the animator

404
00:30:17,084 --> 00:30:19,145
poses the character in the best way possible.

405
00:30:20,205 --> 00:30:22,246
You could imagine stop motion animation

406
00:30:22,406 --> 00:30:24,146
where dolls oppose each frame.

407
00:30:25,107 --> 00:30:27,167
Basically, that is exactly what we're doing.

408
00:30:28,488 --> 00:30:30,488
This looked more true to our old sprites.

409
00:30:31,140 --> 00:30:33,900
and also made the cutscenes look way more 2D-ish.

410
00:30:38,021 --> 00:30:40,302
In order to use limited animation as our style,

411
00:30:40,602 --> 00:30:43,043
we needed to build a rig to match this method.

412
00:30:44,223 --> 00:30:47,704
Because we were going to have less frames per animation,

413
00:30:48,324 --> 00:30:51,024
we knew we had to add more information to each frame.

414
00:30:52,865 --> 00:30:55,105
This was done by having a lot of bones

415
00:30:55,645 --> 00:30:58,506
so the animator can move every feature on the model

416
00:30:58,926 --> 00:31:00,207
at a frame-by-frame basis.

417
00:31:01,340 --> 00:31:04,201
The bone count is about 500 per character on average.

418
00:31:05,401 --> 00:31:08,982
No simulation was used, because again, it just doesn't look 2D.

419
00:31:10,383 --> 00:31:14,204
There's just no way to capture the anime-style movement with simulation.

420
00:31:15,905 --> 00:31:20,727
Scale animation was used a lot, because it lets us do many sorts of tricks.

421
00:31:21,747 --> 00:31:25,588
Exaggerations of actions, let things hide or appear,

422
00:31:26,449 --> 00:31:28,870
traditional squash and stretch, and more.

423
00:31:30,469 --> 00:31:33,231
We knew we needed it, but the engine didn't support it.

424
00:31:34,091 --> 00:31:37,373
So we had to implement the scale system by ourselves.

425
00:31:38,474 --> 00:31:40,335
It was a difficult task, but thanks

426
00:31:40,355 --> 00:31:42,356
to our talented programmers, it was done.

427
00:31:43,316 --> 00:31:44,497
And it was totally worth it.

428
00:31:47,499 --> 00:31:49,820
Turning off interpolations between key frames

429
00:31:49,940 --> 00:31:53,242
is essential, but that alone is not enough.

430
00:31:54,463 --> 00:31:56,804
You need another trick to mimic 2D animation.

431
00:31:58,023 --> 00:32:02,465
The secret is to deform the mesh every keyframe to add imperfection.

432
00:32:03,706 --> 00:32:07,688
The human eyes and brains are very sensitive when it comes to perspectives.

433
00:32:08,869 --> 00:32:13,671
If a part of a 3D model moves through the perspective perfectly maintaining its shape,

434
00:32:14,592 --> 00:32:18,614
the human brain instantly recognizes it as a rigid 3D object.

435
00:32:19,635 --> 00:32:22,416
To avoid this, adding imperfection was the only way.

436
00:32:24,918 --> 00:32:26,158
Nature is imperfect.

437
00:32:27,011 --> 00:32:28,352
The artist is imperfect.

438
00:32:29,152 --> 00:32:31,774
Therefore, perfection looks too artificial.

439
00:32:33,095 --> 00:32:35,896
As an example, let me show you how the animation actually

440
00:32:35,936 --> 00:32:37,757
looks like in Softimage.

441
00:32:49,965 --> 00:32:52,126
Every keyframe, every bone on screen

442
00:32:52,386 --> 00:32:55,768
is adjusted by the animator to break the perfect transition.

443
00:32:57,184 --> 00:33:02,227
This makes each keyframe more distinctive, adding even more information to a single frame.

444
00:33:03,348 --> 00:33:07,991
You need to think in 2D, is a word used a lot while animating in our team.

445
00:33:09,312 --> 00:33:16,376
3D accuracy is not priority in this workflow. We often sacrifice it in order to get more dynamic

446
00:33:16,416 --> 00:33:22,820
composition. Limbs, hands and feet get a lot of scale animation to exaggerate the perspective,

447
00:33:23,621 --> 00:33:26,343
and facial parts do not maintain natural positions.

448
00:33:27,730 --> 00:33:30,093
This is exactly the same as 2D animation.

449
00:33:30,954 --> 00:33:32,796
Expressiveness over accuracy.

450
00:33:34,418 --> 00:33:37,421
And what we did was simply bring the same principle to 3D.

451
00:33:40,324 --> 00:33:43,748
And here is how the final cut scene looks like.

452
00:33:57,185 --> 00:33:59,607
For those curious, here's a comparison

453
00:33:59,647 --> 00:34:02,088
between full animation and limited animation.

454
00:34:02,869 --> 00:34:03,389
Let's have a look.

455
00:34:07,152 --> 00:34:09,674
This is how a full animation with interpolation

456
00:34:09,774 --> 00:34:10,295
would look like.

457
00:34:11,756 --> 00:34:13,877
And here is how limited animation would look.

458
00:34:16,439 --> 00:34:18,241
Simply having more frames, it's obvious

459
00:34:18,261 --> 00:34:20,402
that the full animation looks a lot smoother.

460
00:34:21,583 --> 00:34:24,165
However, it's more apparent that it's actually

461
00:34:25,226 --> 00:34:26,887
compared to the limited animation version.

462
00:34:28,835 --> 00:34:31,537
The limited animation version may look less smooth,

463
00:34:32,017 --> 00:34:35,660
but has more distinctive poses, easier to recognize.

464
00:34:37,161 --> 00:34:39,823
It's up to you which to prefer, but we

465
00:34:39,863 --> 00:34:42,305
chose limited animation for the clarity it holds.

466
00:34:48,130 --> 00:34:50,232
So that was some short explanations

467
00:34:50,912 --> 00:34:53,414
of the major aspects on how we built

468
00:34:53,434 --> 00:34:54,755
the assets for the art style.

469
00:34:55,456 --> 00:34:56,516
Of course, there's much more.

470
00:34:57,381 --> 00:35:00,643
but there's no way I could have covered it all within time.

471
00:35:01,703 --> 00:35:04,945
If you have anything specific, you want to know how it was done,

472
00:35:05,705 --> 00:35:07,306
you may question me in a few minutes.

473
00:35:08,407 --> 00:35:12,529
In the meanwhile, let me talk a bit about the reason why we were able to get this done.

474
00:35:14,970 --> 00:35:15,930
What made the difference?

475
00:35:17,231 --> 00:35:20,553
In my opinion, it was figuring out this one thing.

476
00:35:21,673 --> 00:35:24,435
The X factor is the artist's intention.

477
00:35:25,695 --> 00:35:26,976
All the techniques were used.

478
00:35:27,968 --> 00:35:31,270
All the techniques we used are actually nothing new.

479
00:35:32,250 --> 00:35:34,952
No new hardware or software innovation was involved.

480
00:35:35,892 --> 00:35:38,654
Technically, the art style could have been done years ago.

481
00:35:40,055 --> 00:35:41,936
What made the difference was the notion

482
00:35:41,996 --> 00:35:44,097
that the artist's intention was the X-factor.

483
00:35:45,338 --> 00:35:48,080
A workflow which lets the artist's intention carry

484
00:35:48,120 --> 00:35:49,700
through right till the final result

485
00:35:50,341 --> 00:35:51,842
was the core of our accomplishment.

486
00:35:54,503 --> 00:35:56,825
But why was it us and not anyone else?

487
00:35:58,481 --> 00:36:00,682
One simple answer would be that we were lucky.

488
00:36:02,163 --> 00:36:05,265
Thinking about it now, we were in a very fortunate situation

489
00:36:05,305 --> 00:36:06,006
to get this done.

490
00:36:06,987 --> 00:36:08,948
We were a 2D-oriented studio that

491
00:36:09,028 --> 00:36:11,810
had a lot of 2D experience, many artists who

492
00:36:11,870 --> 00:36:13,151
knew 2D inside out.

493
00:36:14,231 --> 00:36:16,953
We were not new to 3D, but not heavily invested

494
00:36:16,993 --> 00:36:18,134
in photo realism either.

495
00:36:19,635 --> 00:36:21,616
We were in a need for a new art style

496
00:36:21,996 --> 00:36:24,838
to differentiate from the best of our own, BlazBlue.

497
00:36:26,119 --> 00:36:27,280
The project was a reboot.

498
00:36:27,840 --> 00:36:31,483
of a very well-established game so we knew exactly what we were working on.

499
00:36:32,824 --> 00:36:33,344
And the team.

500
00:36:34,425 --> 00:36:35,986
The team was a dream team.

501
00:36:37,067 --> 00:36:41,010
We had exactly the right people with the exact skill set needed for this challenge.

502
00:36:42,191 --> 00:36:44,052
Of course, fortune wasn't all.

503
00:36:44,913 --> 00:36:48,155
The dedication and the hard work of the people involved in the project

504
00:36:48,956 --> 00:36:52,379
and the strong support from our fan base was what made all this possible.

505
00:36:55,601 --> 00:36:56,261
Now to wrap up.

506
00:36:57,028 --> 00:36:58,288
Here's my final proposition.

507
00:36:59,969 --> 00:37:01,830
I want to see more studios explore

508
00:37:02,210 --> 00:37:03,470
non-photorealistic rendering.

509
00:37:04,531 --> 00:37:07,992
I feel that not enough research has been put into this area,

510
00:37:08,812 --> 00:37:11,433
and there's much more room to explore and improve.

511
00:37:12,634 --> 00:37:15,775
Photorealism is great, but it's not the only route.

512
00:37:16,876 --> 00:37:17,936
It's a crowded one, too.

513
00:37:19,116 --> 00:37:20,397
If you look in different directions,

514
00:37:20,897 --> 00:37:22,098
there's a whole new horizon.

515
00:37:23,058 --> 00:37:25,719
You could be the pioneer that gets there first.

516
00:37:26,846 --> 00:37:29,348
The frontier is there, waiting to be discovered.

517
00:37:30,669 --> 00:37:30,969
Thank you.

518
00:37:44,979 --> 00:37:46,521
It seems we have a couple more minutes.

519
00:37:47,141 --> 00:37:47,982
How many more minutes?

520
00:37:48,062 --> 00:37:50,664
I'm not really on track.

521
00:37:52,005 --> 00:37:54,186
So if you have any questions, please go up to the mic.

522
00:37:55,132 --> 00:37:56,693
I'll try to answer them as much as possible.

523
00:38:10,681 --> 00:38:12,542
Okay.

524
00:38:12,882 --> 00:38:13,503
How does this go?

525
00:38:14,223 --> 00:38:15,043
Please, go ahead.

526
00:38:15,504 --> 00:38:19,906
Hi. My first question is how many people does it take to create each character?

527
00:38:20,186 --> 00:38:21,287
And how long does it take?

528
00:38:22,707 --> 00:38:28,172
The character model and texture, the rig, is basically done by the same person.

529
00:38:28,252 --> 00:38:31,495
We had about three or four modelers all together.

530
00:38:32,976 --> 00:38:38,622
So, and it takes about two months altogether for one character.

531
00:38:39,202 --> 00:38:42,645
That's only for modeling, and then another two months, I guess, for animation.

532
00:38:43,486 --> 00:38:44,887
So it's quite intensive.

533
00:38:45,976 --> 00:39:04,763
Okay, the second question is, you have a very unique UV layout, so for each character, each character design is very unique as well, so do you just look at the 2D concept art and figure out how many specific patch of UV you need to create and then figure out the final layout for each individual character texture?

534
00:39:06,323 --> 00:39:08,124
So your question is about the UV layout?

535
00:39:08,804 --> 00:39:08,984
Yes.

536
00:39:10,905 --> 00:39:12,185
Yeah, basically we just...

537
00:39:16,409 --> 00:39:20,352
stage of UV layouting, I think, is not that different from any other project.

538
00:39:21,573 --> 00:39:26,757
We just layout the UV depending on how big the area is.

539
00:39:27,798 --> 00:39:32,202
But after that, we kind of line them up into straight lines.

540
00:39:34,724 --> 00:39:35,464
And after that...

541
00:39:36,968 --> 00:39:40,812
Once we get straight line UVs, we draw lines on the textures,

542
00:39:41,192 --> 00:39:43,975
and then nudge the UV back onto the textures.

543
00:39:44,515 --> 00:39:45,937
I see. Thank you very much.

544
00:39:46,137 --> 00:39:46,637
Thank you very much.

545
00:39:46,657 --> 00:39:49,901
Okay, um, please.

546
00:39:50,741 --> 00:39:55,066
Um, I totally understand not wanting to do the interpolation between keyframes.

547
00:39:55,446 --> 00:39:58,849
Did you, because it does end up looking more 3D and more artificial,

548
00:39:59,070 --> 00:40:00,231
did you guys ever consider...

549
00:40:01,045 --> 00:40:07,410
Doubling the keyframes themselves by hand obviously that doubles the amount of animation work, but was that ever a consideration or?

550
00:40:08,231 --> 00:40:11,453
Having more keyframes in the animation is one thing we wanted to do

551
00:40:12,714 --> 00:40:12,994
but

552
00:40:15,737 --> 00:40:17,058
Doing it too much also

553
00:40:18,078 --> 00:40:20,440
kind of cost cost a lot so

554
00:40:21,061 --> 00:40:28,166
Keeping it down and also keeping it down makes it more 2d so kind of we looking for the best balance there

555
00:40:28,186 --> 00:40:29,747
Very cool. Thank you. Thank you

556
00:40:32,977 --> 00:40:33,637
Okay, please.

557
00:40:34,838 --> 00:40:44,668
So you mentioned that each character takes about two months or so to model and animate, correct?

558
00:40:45,048 --> 00:40:53,297
Well, not anymore maybe. The first stage, while we were trying to figure out how to do it, I think it took more.

559
00:40:54,257 --> 00:40:55,018
It's getting shorter.

560
00:40:55,479 --> 00:40:55,639
Right.

561
00:40:57,917 --> 00:41:11,566
The main thrust of my question is, is it seems like the models for Exert might be substantially more labor-intensive than a sprite-based game like BlazBlue,

562
00:41:11,646 --> 00:41:17,890
but then I'm also not sure about that because I believe the BlazBlue sprites start out as 3D models, don't they?

563
00:41:17,910 --> 00:41:23,713
And then they just get, you know, sort of sprite-captured...

564
00:41:24,555 --> 00:41:24,756
Yes.

565
00:41:25,256 --> 00:41:25,736
But the frame.

566
00:41:26,296 --> 00:41:26,496
Yes.

567
00:41:26,837 --> 00:41:30,658
Um, BlazeBlue also uses 3D models to make 2D sprites.

568
00:41:31,279 --> 00:41:33,720
They basically are used as lotoscopes.

569
00:41:34,520 --> 00:41:39,362
The models from BlazeBlue are a bit simpler than the GuildGear ones.

570
00:41:39,743 --> 00:41:42,664
Um, because the hair, the facial expressions...

571
00:41:44,144 --> 00:41:47,505
drawn in afterwards, so they don't have facial expressions in models.

572
00:41:49,345 --> 00:41:55,347
Yeah, and basically they're not designed for close-ups, the BlazBlue models.

573
00:41:55,407 --> 00:42:01,788
So is it a lot more labor intensive to do the XRD models?

574
00:42:02,548 --> 00:42:05,149
Does that make it hard to add in more characters?

575
00:42:05,249 --> 00:42:09,210
Because, you know, obviously Arc System Works likes to, you know,

576
00:42:10,070 --> 00:42:11,810
put out some updates to its games and whatnot.

577
00:42:12,408 --> 00:42:15,330
Yes, we would totally love to add more characters more.

578
00:42:16,510 --> 00:42:20,693
Quickly, yeah, but it to stand out.

579
00:42:20,773 --> 00:42:22,394
We just needed to pursue quality,

580
00:42:22,834 --> 00:42:23,935
so it takes a lot of time.

581
00:42:25,016 --> 00:42:27,137
Alright. Yeah.

582
00:42:28,438 --> 00:42:30,519
Dizzy when is basically what I'm asking here.

583
00:42:31,840 --> 00:42:34,442
Yeah, I was sort of sort of expecting that.

584
00:42:36,563 --> 00:42:38,044
I wouldn't be able to answer that,

585
00:42:38,064 --> 00:42:40,886
so alright, thank you sometime sometime.

586
00:42:42,149 --> 00:42:43,089
Thank you.

587
00:42:43,790 --> 00:42:48,111
So for your inverse hole outline system,

588
00:42:48,551 --> 00:42:51,552
did you expand that along the generated normals

589
00:42:51,772 --> 00:42:53,633
or the normals that you handcrafted

590
00:42:53,713 --> 00:42:54,793
or separate set of normals?

591
00:42:55,053 --> 00:42:56,914
OK, that's a good question.

592
00:42:56,954 --> 00:42:58,875
I didn't really go too deep into it,

593
00:42:59,035 --> 00:43:03,356
but the normals for the extraction of the hull polygons

594
00:43:03,516 --> 00:43:06,317
are actually separate from the shading normals.

595
00:43:06,497 --> 00:43:08,618
So we have another set of normals

596
00:43:10,158 --> 00:43:11,859
that are automatically calculated.

597
00:43:12,854 --> 00:43:14,135
for that purpose, yes.

598
00:43:14,155 --> 00:43:14,675
All right, thank you.

599
00:43:15,115 --> 00:43:15,375
Thank you.

600
00:43:17,316 --> 00:43:20,017
I wanted to ask, so you went with limited animations

601
00:43:20,237 --> 00:43:25,199
for the character animations and their finishes and stuff.

602
00:43:25,619 --> 00:43:29,821
I was wondering, what was the reasoning behind not also

603
00:43:29,901 --> 00:43:32,302
doing limited animation for the camera rotation

604
00:43:32,362 --> 00:43:34,383
as it goes around the character?

605
00:43:35,223 --> 00:43:36,684
OK, that's a good question.

606
00:43:37,324 --> 00:43:40,985
Camera rotation is, it looks ugly.

607
00:43:41,824 --> 00:43:43,126
with less frames.

608
00:43:43,567 --> 00:43:46,931
And in anime, although in limited animation,

609
00:43:46,991 --> 00:43:52,098
although the frame per second is like low,

610
00:43:53,160 --> 00:43:59,388
eight or 12, but the actual, how the background moves,

611
00:44:00,537 --> 00:44:05,303
24 frames per second so it it differs from characters background and when the

612
00:44:05,323 --> 00:44:10,949
camera rotates the background moves with it so it kind of if you turn down the

613
00:44:11,189 --> 00:44:15,994
camera too much it gets really snappy.

614
00:44:18,059 --> 00:44:19,060
if that answers the question.

615
00:44:19,100 --> 00:44:22,524
Yeah, I have a friend of mine who felt as though it was very,

616
00:44:22,824 --> 00:44:24,987
kind of, for him at least, it was very disjointed,

617
00:44:25,007 --> 00:44:27,229
you know, the limited animation of characters

618
00:44:27,249 --> 00:44:29,752
versus the very smooth animations of the backgrounds.

619
00:44:30,452 --> 00:44:32,395
Yeah, we tried to,

620
00:44:33,396 --> 00:44:36,739
we tried lower frame camera movement,

621
00:44:36,799 --> 00:44:37,840
but it just didn't feel good.

622
00:44:37,860 --> 00:44:39,082
Okay, cool, thank you very much.

623
00:44:39,102 --> 00:44:39,442
Thank you.

624
00:44:41,763 --> 00:44:45,624
Did you have to swap out models and stuff for things like Milia's hair?

625
00:44:46,645 --> 00:44:52,947
Yes, I didn't touch that today because it was going to take a lot of time, but yes.

626
00:44:54,047 --> 00:44:57,909
Lots of characters in Guilty Gear have really crazy animations.

627
00:44:58,849 --> 00:45:01,750
Shadows of Zato, hairs of Milia.

628
00:45:02,834 --> 00:45:04,937
They do a lot of morphing animation,

629
00:45:05,197 --> 00:45:07,781
and that is practically impossible

630
00:45:07,841 --> 00:45:09,404
to just do by a single mesh.

631
00:45:09,704 --> 00:45:12,148
So we just have to make a bunch of meshes

632
00:45:12,969 --> 00:45:16,334
to kind of switch in between shapes.

633
00:45:16,875 --> 00:45:17,055
Yes.

634
00:45:18,257 --> 00:45:18,497
Thank you.

635
00:45:21,043 --> 00:45:24,446
I was just wondering with like these highly detailed models,

636
00:45:24,946 --> 00:45:27,148
these hundreds of bones per character,

637
00:45:27,168 --> 00:45:29,190
a lot of animations,

638
00:45:29,470 --> 00:45:32,432
like how difficult was it to get a locked in,

639
00:45:32,793 --> 00:45:34,114
solid performance out of the game?

640
00:45:34,834 --> 00:45:36,736
And how scalable is this whole workflow?

641
00:45:39,758 --> 00:45:43,981
The shader itself is not that performance heavy.

642
00:45:44,762 --> 00:45:48,125
So, and only having two characters on the screen.

643
00:45:49,103 --> 00:45:55,688
It's much more forgiving, so maintaining 60 FPS was possible on PS4 easily.

644
00:45:56,228 --> 00:46:05,276
We had to tone down the shader and the polygons for PS3 a bit, but it still runs mainly in

645
00:46:05,816 --> 00:46:06,457
60 FPS, yes.

646
00:46:07,318 --> 00:46:10,660
And it seems like because of the way you're doing your textures, you can actually do them

647
00:46:10,881 --> 00:46:13,643
quite low resolution without losing that kind of quality?

648
00:46:13,683 --> 00:46:13,983
Yes.

649
00:46:14,143 --> 00:46:14,784
Textures.

650
00:46:17,772 --> 00:46:20,615
Some textures, we have three textures per character.

651
00:46:21,215 --> 00:46:24,478
Basically, one is 2K and two are 1K.

652
00:46:24,558 --> 00:46:27,060
All right, thank you very much.

653
00:46:27,080 --> 00:46:27,700
Thank you very much.

654
00:46:28,681 --> 00:46:29,882
Please.

655
00:46:30,222 --> 00:46:31,804
First of all, it's an honor to have you here,

656
00:46:31,864 --> 00:46:33,565
so thanks for giving this talk.

657
00:46:34,045 --> 00:46:34,506
Thank you.

658
00:46:35,006 --> 00:46:36,928
My question relates to specular highlights.

659
00:46:37,388 --> 00:46:37,648
I see.

660
00:46:38,149 --> 00:46:41,491
I could be mistaken, but for instance, on Sol's deltoids,

661
00:46:42,872 --> 00:46:45,254
there was a bright lit area.

662
00:46:45,595 --> 00:46:45,735
Yes.

663
00:46:46,173 --> 00:46:49,955
Do you have a third texture for specular highlight?

664
00:46:49,975 --> 00:46:51,796
Tint?

665
00:46:52,016 --> 00:46:54,397
No, we do speculars.

666
00:46:54,917 --> 00:46:56,158
I didn't touch on speculars either.

667
00:46:58,379 --> 00:47:01,660
Yes, speculars basically.

668
00:47:03,741 --> 00:47:05,462
No, we don't have an extra texture for that.

669
00:47:06,222 --> 00:47:08,663
It's basically based off the base color and the tint color.

670
00:47:08,984 --> 00:47:11,345
So we kind of mix that to get the right specular color.

671
00:47:12,080 --> 00:47:17,945
OK, and it uses the same normals that the shading calculations

672
00:47:17,985 --> 00:47:18,405
are used for?

673
00:47:18,786 --> 00:47:19,006
Yes.

674
00:47:19,386 --> 00:47:19,766
That's true.

675
00:47:20,307 --> 00:47:20,367
OK.

676
00:47:20,387 --> 00:47:20,467
OK.

677
00:47:20,787 --> 00:47:21,027
Thank you.

678
00:47:21,288 --> 00:47:21,748
Thank you very much.

679
00:47:22,689 --> 00:47:23,829
OK, I lost track.

680
00:47:26,472 --> 00:47:26,712
Please.

681
00:47:28,293 --> 00:47:30,174
Thank you also, again, for speaking today.

682
00:47:30,615 --> 00:47:32,276
I have two questions, if that's OK.

683
00:47:32,716 --> 00:47:36,960
I was curious if the effects are hand animated the same way,

684
00:47:37,480 --> 00:47:38,541
or if they are particles.

685
00:47:39,050 --> 00:47:44,734
Okay, effects. Some, some, okay that's a good question. I couldn't really go into effects today.

686
00:47:45,494 --> 00:47:54,540
Sorry about that. Most of the effects are particles, but not just particles flying around, but animated particles.

687
00:47:55,261 --> 00:48:07,009
So, the hit effects and everything like that are actually 2D, but have a set of pictures switching every frame to get the animation.

688
00:48:08,211 --> 00:48:14,535
Some particles or effects, such as the smoke from the character's feet when they jump,

689
00:48:15,536 --> 00:48:21,400
they are actually done in a pretty, kind of a brute force way.

690
00:48:22,020 --> 00:48:25,883
They are modeled each frame and swapped each frame,

691
00:48:26,103 --> 00:48:31,706
so we have a bunch of meshes swapping every frame as a smoke.

692
00:48:37,327 --> 00:48:40,709
Well, it actually isn't that hard to do.

693
00:48:41,370 --> 00:48:42,931
And we were kind of joking about it,

694
00:48:43,472 --> 00:48:45,914
how we're going to do smokes in this game.

695
00:48:46,074 --> 00:48:49,977
And one of the jokes was we're going to model them each frame.

696
00:48:50,517 --> 00:48:53,079
And it turned out to be the best way, actually.

697
00:48:55,441 --> 00:48:56,762
And then my last question was just,

698
00:48:57,063 --> 00:48:59,144
were there some key features of XSI

699
00:48:59,965 --> 00:49:02,587
that you could only do in XSI for this game?

700
00:49:05,727 --> 00:49:08,368
I think it'll be pretty hard.

701
00:49:08,388 --> 00:49:10,928
I wouldn't want to do it in any other software.

702
00:49:11,929 --> 00:49:15,910
That is simply because you can just go back to any state

703
00:49:16,170 --> 00:49:18,110
and continue fiddling with the model

704
00:49:19,711 --> 00:49:25,512
without any redoing the skins or redoing the UVs.

705
00:49:25,732 --> 00:49:27,452
It just keeps there, and you can just

706
00:49:27,633 --> 00:49:30,633
keep working on it until the last minute, as I said.

707
00:49:32,654 --> 00:49:33,714
And yeah, some.

708
00:49:34,996 --> 00:49:42,258
The normal editing is pretty good in Softimage, so I'm pretty sure how Maya and 3D Studio Max do it,

709
00:49:43,138 --> 00:49:52,500
but as much as I know, 3D Studio Max has some problems with normal mapping, I mean the normal editing.

710
00:49:53,501 --> 00:49:55,301
Yeah, so that's about it. Thank you.

711
00:49:55,481 --> 00:49:56,021
Thank you very much.

712
00:49:56,781 --> 00:49:56,981
Please.

713
00:49:58,491 --> 00:50:02,394
So the effects question was actually what I was going to ask, but to expand on that,

714
00:50:02,554 --> 00:50:06,156
the parts like if they're swinging swords and there's some drag on the shape,

715
00:50:06,716 --> 00:50:10,259
is that just the mesh of the sword being, like the verts being dragged?

716
00:50:11,279 --> 00:50:21,206
Yes, that is a combination with switching meshes, a question. Some characters' swords are switched

717
00:50:21,546 --> 00:50:24,008
when they are kind of expanded.

718
00:50:25,028 --> 00:50:29,609
And other times we just add an extra mesh of that shape,

719
00:50:30,170 --> 00:50:32,671
because it only lasts for like a frame on the screen,

720
00:50:32,751 --> 00:50:36,092
so it's no point putting the mesh into the actual mesh.

721
00:50:37,212 --> 00:50:38,633
So we just add it as an effect.

722
00:50:39,493 --> 00:50:40,013
Cool, thank you.

723
00:50:40,193 --> 00:50:40,433
Thank you.

724
00:50:43,928 --> 00:50:46,769
Hi, I actually had a question about the normals editing.

725
00:50:46,929 --> 00:50:50,690
It seemed like you had some really specific control over the normals on the models,

726
00:50:50,731 --> 00:50:53,472
and I was wondering what tools you were using to do that.

727
00:50:53,512 --> 00:50:58,233
Was that just the XSI modeling tools, or did you build your own?

728
00:50:59,532 --> 00:51:03,773
Yes, basically what we know use a lot is Gator.

729
00:51:05,493 --> 00:51:10,435
It's a tool in Softimage that lets you copy a set of normals

730
00:51:10,875 --> 00:51:13,756
from a simpler mesh to a more complicated mesh.

731
00:51:14,756 --> 00:51:18,117
This gives you a more smoother mesh, smoother normal,

732
00:51:18,817 --> 00:51:22,578
and everything else basically we just hand tweak

733
00:51:22,818 --> 00:51:24,079
by the normal editing tool.

734
00:51:25,479 --> 00:51:26,499
Thanks, it looks really awesome.

735
00:51:26,759 --> 00:51:27,480
Thank you, thanks a lot.

736
00:51:30,772 --> 00:51:38,056
I actually did have a second, much more serious question about your lighting solution.

737
00:51:40,458 --> 00:51:47,942
So you have each character lit individually, separate from a global lighting solution.

738
00:51:48,563 --> 00:51:52,945
You've got the lighting for the stage, and then lighting for each character.

739
00:51:54,044 --> 00:52:02,087
But first of all, does the lighting per character change a little bit depending on the stage they're in?

740
00:52:03,267 --> 00:52:05,128
To make them sort of match the feel of the stage better?

741
00:52:05,388 --> 00:52:09,369
Okay, first of all, the background isn't lit.

742
00:52:09,869 --> 00:52:12,410
It's all the shadows in the background are pre-baked.

743
00:52:13,927 --> 00:52:15,548
So there's no global lighting.

744
00:52:16,669 --> 00:52:20,211
One thing that has global lighting is the character's shadows on the ground.

745
00:52:21,031 --> 00:52:23,193
So the shadow maps have one global lighting,

746
00:52:23,553 --> 00:52:27,695
and that's independent from the character's own light set.

747
00:52:28,676 --> 00:52:32,198
The light set doesn't move, and that is an intentional choice.

748
00:52:32,898 --> 00:52:35,200
We have the same light set in every stage.

749
00:52:36,350 --> 00:52:39,173
because we didn't want to change the impression of an action.

750
00:52:39,774 --> 00:52:44,819
If the shape of the shadow changes from stage to stage,

751
00:52:44,919 --> 00:52:47,181
it will give a different impression in each action.

752
00:52:47,681 --> 00:52:49,804
And that is not a good idea for fighting games.

753
00:52:50,384 --> 00:52:53,507
Right. Which sort of gets to my bigger question.

754
00:52:53,647 --> 00:52:57,871
It sounds like because of the way you have the lighting sort of

755
00:52:58,512 --> 00:53:01,875
customized per character and like no global lighting,

756
00:53:02,470 --> 00:53:10,776
it would be extraordinarily difficult to use your specific sort of solution for a game

757
00:53:10,816 --> 00:53:15,981
that would require somewhat more open movement through a stage, like an RPG for example.

758
00:53:17,382 --> 00:53:17,502
Yes.

759
00:53:17,542 --> 00:53:22,646
Like, you know, where you... there's just sort of this requirement for global lighting

760
00:53:22,786 --> 00:53:28,210
or local lighting, and the character has no choice but to interact with that somehow,

761
00:53:28,370 --> 00:53:29,331
or else it'll look really weird.

762
00:53:29,351 --> 00:53:30,152
That's true, yes.

763
00:53:30,472 --> 00:53:30,692
Yeah.

764
00:53:32,079 --> 00:53:35,701
Basically, we knew it was going to be a fighting game with a fixed camera.

765
00:53:35,841 --> 00:53:36,061
Yeah.

766
00:53:36,281 --> 00:53:39,683
So it was a choice with that in mind.

767
00:53:39,843 --> 00:53:40,123
Okay.

768
00:53:40,183 --> 00:53:44,805
If we were going to do an RPG or action game, we would take a different route, obviously.

769
00:53:45,546 --> 00:53:47,406
Okay, so yeah, so that just...

770
00:53:48,847 --> 00:53:51,769
Your lighting solution just can't really apply to sort of wider games.

771
00:53:53,930 --> 00:53:54,130
Well...

772
00:53:54,150 --> 00:53:54,590
Probably not.

773
00:53:54,890 --> 00:53:55,470
Probably, yeah.

774
00:53:55,811 --> 00:53:56,251
Oh, okay.

775
00:53:56,331 --> 00:53:56,591
Thank you.

776
00:53:56,671 --> 00:53:56,891
Okay.

777
00:53:57,431 --> 00:53:57,731
Thank you.

778
00:53:58,152 --> 00:53:58,492
You're welcome.

779
00:53:58,552 --> 00:53:58,812
Thank you.

780
00:53:58,992 --> 00:53:59,172
Sorry.

781
00:53:59,670 --> 00:54:07,917
Hi, thank you. First of all, I'd like to say it's great seeing Japanese companies kind of embracing NPR rendering or NPR rather

782
00:54:09,751 --> 00:54:18,333
We don't have a lot of companies here in the West that are doing that, and stuff that your company and CyberConnect2 with the Ultimate Ninja Story games is just really inspiring.

783
00:54:19,693 --> 00:54:29,855
My actual question is, I noticed that you're using a lot of the vertex color information for the outlines, but you're also using some to define the lighting on the character?

784
00:54:30,993 --> 00:54:38,019
Are you managed to fitting that all that information in the RGB and A channels or do you have to store it some other way?

785
00:54:39,080 --> 00:54:50,910
Yes, we are using all the four channels RGBA for the lighting or the threshold of the lighting and the other three are basically dedicated for the outline.

786
00:54:51,971 --> 00:54:53,312
Okay, great, thanks. Thank you.

787
00:54:58,043 --> 00:55:01,305
I had another question about the editing of the normals.

788
00:55:01,745 --> 00:55:05,466
Do you allow non-unit normals when you are editing them?

789
00:55:05,606 --> 00:55:07,247
So in the case of the front of the face,

790
00:55:07,307 --> 00:55:09,768
that you would actually scale them down.

791
00:55:09,808 --> 00:55:11,829
So when you do the normal dotted with the light,

792
00:55:12,589 --> 00:55:17,211
it would more easily bias into shadow or highlight.

793
00:55:17,391 --> 00:55:19,052
Yes, we considered that.

794
00:55:19,892 --> 00:55:25,494
But at the moment, we keep it at unit normals

795
00:55:25,994 --> 00:55:26,755
because it kind of.

796
00:55:27,449 --> 00:55:33,034
It kind of gets unpredictable in places, so we just keep it to that state.

797
00:55:33,174 --> 00:55:33,414
Yes.

798
00:55:34,034 --> 00:55:35,315
And one more quick question.

799
00:55:35,435 --> 00:55:41,660
With the textures that you fetch, do you just point sample those only?

800
00:55:41,861 --> 00:55:47,205
And I assume you don't use mipmaps because you would worry about at far views they would

801
00:55:47,885 --> 00:55:51,808
sort of blur and give you non-controllable issues.

802
00:55:53,711 --> 00:55:56,772
Although I said we don't really treat them as images,

803
00:55:57,512 --> 00:55:59,152
we do sample them as textures.

804
00:56:00,152 --> 00:56:03,313
Without that, we wouldn't get the inner lines like that.

805
00:56:03,533 --> 00:56:07,274
So it's basically the same texture sampling,

806
00:56:07,614 --> 00:56:09,514
but with a special UV set.

807
00:56:10,214 --> 00:56:10,314
OK.

808
00:56:10,595 --> 00:56:13,355
But the sampling mode, like for the line control

809
00:56:13,415 --> 00:56:15,996
and the extrusion, is that in like a point sample mode

810
00:56:16,036 --> 00:56:18,696
where it's actually, or is it linear?

811
00:56:19,036 --> 00:56:21,337
So when you zoom out into the distance,

812
00:56:21,657 --> 00:56:23,117
it's smoothly adjusting.

813
00:56:23,842 --> 00:56:29,445
Okay, I assume you're talking about texture filtering?

814
00:56:29,585 --> 00:56:29,825
Yes.

815
00:56:30,185 --> 00:56:30,705
Okay.

816
00:56:30,725 --> 00:56:33,326
Texture filtering in the shader when you're looking up those textures.

817
00:56:33,606 --> 00:56:34,447
Yes, texture filtering.

818
00:56:34,487 --> 00:56:37,148
Having them, yeah, drive the extrusion.

819
00:56:37,168 --> 00:56:37,468
Yeah.

820
00:56:38,228 --> 00:56:43,630
Texture filtering is in use, therefore texture blurs at far away.

821
00:56:43,750 --> 00:56:43,930
Yes.

822
00:56:44,271 --> 00:56:49,853
And that blurring area kind of acts as a fill-in to the lines.

823
00:56:49,873 --> 00:56:51,654
So you allow it to filter it then.

824
00:56:52,674 --> 00:56:52,894
Okay.

825
00:56:53,432 --> 00:56:53,692
Thank you.

826
00:56:53,972 --> 00:56:56,473
Thank you very much.

827
00:56:56,514 --> 00:56:57,494
Please.

828
00:56:57,534 --> 00:56:59,776
For characters that cast shadows on themselves,

829
00:56:59,816 --> 00:57:03,318
do you kind of author the self-shadowed areas manually?

830
00:57:03,438 --> 00:57:08,141
Or do you do something special with lighting

831
00:57:08,161 --> 00:57:09,001
to deal with those?

832
00:57:09,722 --> 00:57:12,483
OK, so this question is about self-shadowing?

833
00:57:12,623 --> 00:57:12,804
Yeah.

834
00:57:13,184 --> 00:57:16,326
OK, self-shadowing is one thing we wanted to do,

835
00:57:17,306 --> 00:57:18,987
but we didn't do.

836
00:57:19,408 --> 00:57:20,608
So basically, we.

837
00:57:23,094 --> 00:57:25,936
We use the threshold mechanic instead.

838
00:57:26,976 --> 00:57:31,839
The problem with self-shadowing is that it's very uncontrollable.

839
00:57:33,159 --> 00:57:37,841
In anime, you get like characters with big hairs.

840
00:57:39,122 --> 00:57:41,823
And big hairs drop big shadows on the faces.

841
00:57:42,864 --> 00:57:45,525
And there's just no way to control that.

842
00:57:47,006 --> 00:57:51,408
You either have to turn it off and kind of deal with it.

843
00:57:52,373 --> 00:58:03,503
We just decided not to deal with the self-shadowing and do kind of a manually set the sort of self shadows by hand.

844
00:58:03,763 --> 00:58:10,388
So for all the characters with like coats, all of this like shadowed regions are just the threshold, vertex paint, manually edited and...

845
00:58:11,770 --> 00:58:12,831
Wow. Thanks.

846
00:58:13,371 --> 00:58:15,153
Okay, thank you.

847
00:58:15,493 --> 00:58:17,975
Yeah, I think that the game looks really amazing.

848
00:58:18,856 --> 00:58:19,416
Excuse me, sorry.

849
00:58:19,436 --> 00:58:19,616
So...

850
00:58:21,283 --> 00:58:26,087
We don't have much time, so this will be the end of the questioners, so please go on.

851
00:58:26,427 --> 00:58:35,874
Yeah, I'm just wondering if you have any further thoughts on what to do to improve even more on the 2D look in the future.

852
00:58:35,894 --> 00:58:39,537
OK, yeah, we have various ideas.

853
00:58:42,299 --> 00:58:44,321
I can't really talk about them yet.

854
00:58:45,062 --> 00:58:46,503
it will kind of ruin the surprise.

855
00:58:47,143 --> 00:58:50,886
So I hope you just stick around and see how it goes.

856
00:58:50,906 --> 00:58:52,067
Yeah, that sounds interesting enough.

857
00:58:52,087 --> 00:58:52,647
Thanks.

858
00:58:52,707 --> 00:58:53,027
Thank you.

859
00:58:53,067 --> 00:58:54,949
OK, thank you.

860
00:58:56,029 --> 00:58:56,430
Thank you very much.

