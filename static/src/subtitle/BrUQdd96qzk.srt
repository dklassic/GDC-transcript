1
00:00:04,737 --> 00:00:10,942
Hello everyone. My name is Kohata Shuji. I'm an audio programmer at Platinum Games.

2
00:00:10,982 --> 00:00:16,466
Before joining Platinum Games, I worked at Roland as a guitar effector.

3
00:00:31,921 --> 00:00:36,242
I'm Andrew Blasher, from Platinum Games.

4
00:00:36,582 --> 00:00:41,104
I used to teach in the company,

5
00:00:41,184 --> 00:00:44,305
and one of the students was Mr. Yoko Taro.

6
00:00:44,345 --> 00:00:48,166
We've been preparing for this event for a few months.

7
00:00:49,026 --> 00:00:51,727
I hope it goes well.

8
00:00:51,807 --> 00:00:53,868
I'm just going to introduce myself for a second.

9
00:00:54,928 --> 00:00:57,989
My name is Andrew. I work in localization at Platinum Games.

10
00:00:59,389 --> 00:00:59,849
I also...

11
00:01:01,072 --> 00:01:05,874
Probably, I didn't work on Near directly very much,

12
00:01:06,914 --> 00:01:08,575
but I think the biggest connection that I had

13
00:01:09,035 --> 00:01:12,577
was I did a small English class in the company briefly

14
00:01:13,277 --> 00:01:14,718
and only about three people came,

15
00:01:14,858 --> 00:01:16,639
but one of them was Yoko-san,

16
00:01:17,019 --> 00:01:20,060
so I think that I was pretty happy about that.

17
00:01:21,201 --> 00:01:23,282
I've been working with Kohata-san

18
00:01:23,342 --> 00:01:25,503
for the last few months on this presentation,

19
00:01:25,603 --> 00:01:26,643
so I'm happy.

20
00:01:27,184 --> 00:01:31,509
hopefully everything goes well. Uh, just wanted to say also, just to take this moment here,

21
00:01:32,170 --> 00:01:37,236
um, that we've been asked that if you have, uh, your cell phones, that please put them on

22
00:01:37,256 --> 00:01:42,162
silent mode. You know, we'll be recording this, so, uh, please turn anything off if you've, uh,

23
00:01:42,382 --> 00:01:44,385
got that. Thank you. And...

24
00:01:45,580 --> 00:01:48,724
In this session, we will talk about the various audio techniques

25
00:01:48,744 --> 00:01:51,867
we used in Nier Automata to create a real-time audio process for the game.

26
00:01:51,887 --> 00:01:52,107
Sorry.

27
00:01:52,227 --> 00:01:52,828
Wait a minute.

28
00:01:52,848 --> 00:01:53,148
I messed up.

29
00:01:53,168 --> 00:01:56,691
There are a lot of delicate sounds in the demo,

30
00:01:56,711 --> 00:02:02,477
so I would appreciate it if you could keep the audio as quiet as possible.

31
00:02:09,759 --> 00:02:11,480
Yeah, so in this session, we're going

32
00:02:11,500 --> 00:02:13,242
to talk about the different sound techniques used

33
00:02:13,282 --> 00:02:15,583
in Nier Automata, focusing specifically

34
00:02:15,623 --> 00:02:16,984
on real-time audio processing.

35
00:02:17,344 --> 00:02:20,086
Yeah, he's just saying to be super sensitive to anything

36
00:02:20,106 --> 00:02:21,608
that makes any sound, because of course, we'll

37
00:02:21,628 --> 00:02:23,429
be playing some video, and we'll want you

38
00:02:23,449 --> 00:02:24,510
to pay attention to the audio.

39
00:02:24,530 --> 00:02:24,570
OK.

40
00:02:24,590 --> 00:02:24,630
OK.

41
00:02:24,650 --> 00:02:24,710
OK.

42
00:02:24,730 --> 00:02:24,770
OK.

43
00:02:25,490 --> 00:02:25,530
OK.

44
00:02:25,550 --> 00:02:25,590
OK.

45
00:02:25,610 --> 00:02:25,650
OK.

46
00:02:25,670 --> 00:02:25,710
OK.

47
00:02:26,031 --> 00:02:28,612
OK.

48
00:02:28,673 --> 00:02:28,733
OK.

49
00:02:28,773 --> 00:02:28,813
OK.

50
00:02:28,853 --> 00:02:28,893
OK.

51
00:02:28,913 --> 00:02:28,973
OK.

52
00:02:28,993 --> 00:02:29,033
OK.

53
00:02:29,053 --> 00:02:29,093
OK.

54
00:02:29,113 --> 00:02:29,153
OK.

55
00:02:29,173 --> 00:02:29,233
OK.

56
00:02:29,253 --> 00:02:29,293
OK.

57
00:02:29,313 --> 00:02:29,353
OK.

58
00:02:29,373 --> 00:02:29,413
OK.

59
00:02:29,433 --> 00:02:29,493
OK.

60
00:02:29,513 --> 00:02:29,553
OK.

61
00:02:29,573 --> 00:02:29,613
OK.

62
00:02:29,633 --> 00:02:29,673
OK.

63
00:02:29,693 --> 00:02:29,733
OK.

64
00:02:29,753 --> 00:02:29,793
OK.

65
00:02:29,833 --> 00:02:29,873
OK.

66
00:02:29,893 --> 00:02:29,933
OK.

67
00:02:29,953 --> 00:02:29,993
OK.

68
00:02:33,932 --> 00:02:37,677
First, how many people have played NieR before?

69
00:02:37,697 --> 00:02:38,198
Thank you!

70
00:02:50,675 --> 00:02:56,640
As you can see, Nier Automata has a very sophisticated world view.

71
00:02:57,261 --> 00:03:05,588
In this session, we would like to tell you what the role of real-time audio processing is to express this unique world view.

72
00:03:05,868 --> 00:03:11,213
So, those of you who have played would know, Nier Automata has a very unique, carefully crafted world.

73
00:03:11,353 --> 00:03:17,138
In this session, I'd like to discuss what role real-time audio processing played in tying this world together.

74
00:03:19,118 --> 00:03:27,441
The interactivity of the game is greatly influenced by the real-time audio processing.

75
00:03:27,481 --> 00:03:31,182
By following the player's movements, the game can be more interactive.

76
00:03:31,583 --> 00:03:35,084
Real-time audio has a powerful influence on a game's interactivity.

77
00:03:35,584 --> 00:03:40,606
Receiving audio feedback right after pressing a button can strongly affect the player's immersion in their environment.

78
00:03:41,866 --> 00:03:46,989
Also, I think it has the role of strengthening the expression by sound designers.

79
00:03:47,169 --> 00:03:51,931
It has the possibility of realizing a variety of expressions while reducing material and workload by automatic control.

80
00:03:52,431 --> 00:03:59,775
Furthermore, giving our sound designers this technology significantly improves their ability to communicate audio to the listener in a more direct way,

81
00:04:00,175 --> 00:04:02,676
and you can get a lot of mileage with even a simple tool set.

82
00:04:05,192 --> 00:04:09,262
With this in mind, I'd like to discuss how I approached audio processing in Nier Automata.

83
00:04:18,977 --> 00:04:24,022
Okay, so let's briefly touch on the points of this talk.

84
00:04:24,583 --> 00:04:32,010
First, we'll discuss spatial audio effects, we'll talk about our 3D audio effect, and the new reverb we designed for Ritmir Automata.

85
00:04:41,153 --> 00:04:46,358
Next, we'll talk about some electronic effects in the game, specifically transitioning the

86
00:04:46,378 --> 00:04:50,402
hacking sequences and how simple lo-fi effects played an important part in the game.

87
00:05:01,211 --> 00:05:09,074
The two main topics are audio processing, but Nier Automata also uses other audio processing techniques.

88
00:05:09,294 --> 00:05:14,136
After these two topics, we can spend any leftover time on a few other audio techniques we tried in Nier Automata.

89
00:05:14,156 --> 00:05:22,359
First, let's discuss the spatial audio effects employed in the game.

90
00:05:22,379 --> 00:05:24,520
In terms of spatial audio effects,

91
00:05:33,162 --> 00:05:39,145
So, when I say spatial audio, I'm trying to encompass reverb, occlusion, and other 3D audio effects in one term.

92
00:05:47,468 --> 00:05:51,169
If you're more comfortable with graphic terms, you can think of this as your model's shader.

93
00:05:51,349 --> 00:05:54,971
It adds a layer of realism that creates a more immersive experience for the player.

94
00:05:55,719 --> 00:05:58,581
This helps properly structure the atmosphere of a scene and makes certain every sound works

95
00:05:58,601 --> 00:05:58,882
together.

96
00:05:58,922 --> 00:05:59,823
Nothing feels out of place.

97
00:06:08,887 --> 00:06:12,648
In games, spatial audio effects are handled in real time, and this is one reason why real-time

98
00:06:12,688 --> 00:06:17,010
audio processing is so important and I think will continue to be important to game audio

99
00:06:17,070 --> 00:06:18,130
in the future.

100
00:06:41,438 --> 00:06:58,623
For this talk, I'd like to focus specifically on the approaches used regarding 3D audio effects and interactive reverb in Nier Automata.

101
00:06:58,983 --> 00:07:03,064
So, we may have had a somewhat uncommon approach to 3D audio for Nier Automata.

102
00:07:03,656 --> 00:07:07,899
The biggest point is that we tried to create effects that do not depend on the playback environment.

103
00:07:08,739 --> 00:07:12,382
Nier Automata is not a game that has the characteristics of VR or headphone recommendation,

104
00:07:12,402 --> 00:07:18,986
so we wanted to make it a mechanism that allows you to feel three-dimensional in the stereo speaker environment in a normal stereo home.

105
00:07:19,793 --> 00:07:22,576
So first, we decided to create effects

106
00:07:22,616 --> 00:07:24,658
that wouldn't rely on the user's speaker setup.

107
00:07:25,359 --> 00:07:28,222
The audio in NieR Automata isn't tailored to headphones

108
00:07:28,322 --> 00:07:30,584
or VR or some special playback environment.

109
00:07:30,944 --> 00:07:33,267
So I wanted it to feel like the sound enveloped the player

110
00:07:33,367 --> 00:07:35,069
even from regular stereo speakers.

111
00:07:35,089 --> 00:07:38,392
At the same time, we also made sure

112
00:07:38,412 --> 00:07:40,854
that the sound was not affected by the gain.

113
00:07:42,477 --> 00:07:46,439
I also wanted something that wouldn't alter the original audio to the point that sound

114
00:07:46,459 --> 00:07:51,022
designers had to be mindful of the 3D audio effect when creating the original sound.

115
00:07:51,822 --> 00:07:55,424
The original sound needs to be preserved when played from the front for balancing later.

116
00:07:55,464 --> 00:07:55,665
Anyways.

117
00:08:04,782 --> 00:08:09,025
I wanted to apply this to any and every sound, so I needed it to be as lightweight as possible.

118
00:08:09,045 --> 00:08:12,908
If effects were only applied to some sounds, I think it would take the user out of a 3D

119
00:08:12,968 --> 00:08:13,829
sound experience.

120
00:08:36,159 --> 00:08:40,682
Based on the concept I showed you, I was able to implement 3D audio effects in the game.

121
00:08:41,102 --> 00:08:44,645
So, after a little bit of work, I came up with something close to what I was looking for.

122
00:08:44,665 --> 00:08:50,609
I borrowed the name Simple3D from here, but in the end, I couldn't buy it.

123
00:08:51,309 --> 00:08:54,472
First, I would like you to see what it is like in the video.

124
00:08:54,752 --> 00:08:58,955
So, I started by calling it Simple3D and never really got around to changing the name.

125
00:08:59,375 --> 00:09:02,157
Let me play a short video to demonstrate how it works.

126
00:09:04,171 --> 00:09:06,634
The green sphere will rotate around the player and produce sound.

127
00:09:06,655 --> 00:09:08,978
Please listen to the sound when the effect is on and off.

128
00:09:56,319 --> 00:09:56,800
Thank you for watching.

129
00:11:00,052 --> 00:11:03,835
So hopefully you were able to kind of see the difference between the effect off and

130
00:11:03,895 --> 00:11:04,956
on with that video.

131
00:11:10,927 --> 00:11:13,848
I will introduce the DSP of Simple3D.

132
00:11:14,288 --> 00:11:16,230
All right, so let's touch on the DSP for Simple3D.

133
00:11:16,330 --> 00:11:19,451
As the name implies, it is composed of very simple processing.

134
00:11:19,491 --> 00:11:29,117
The system creates a sense of direction by modifying the volume of each circuit and the parameters of the bandpass filter according to the direction of the sound source.

135
00:11:31,615 --> 00:11:33,798
So, like its name, it has a simple design.

136
00:11:34,138 --> 00:11:36,681
Simple3D takes the direction of the sound's origin

137
00:11:37,041 --> 00:11:39,924
and sends it through multiple routes to adjust its volume,

138
00:11:40,425 --> 00:11:42,226
one including a bandpass filter

139
00:11:42,367 --> 00:11:43,888
for continually adjusting the phase.

140
00:11:45,295 --> 00:11:46,576
Japanese interpretation

141
00:12:03,492 --> 00:12:10,899
So on the top we have a 4K plus 500 Hz low-pass filter branch, followed by a 4K branch, followed

142
00:12:10,919 --> 00:12:11,999
by an As-Is branch.

143
00:12:12,620 --> 00:12:16,443
Volume is adjusted among these three to find the right high and low levels.

144
00:12:18,633 --> 00:12:25,721
The bottom line is to represent the change in frequency that is strongly heard when the sound source is turned back.

145
00:12:25,741 --> 00:12:32,568
The result of looking for effects other than high and low frequencies was the bandpass filter that modifies this frequency.

146
00:12:34,450 --> 00:12:40,314
So, the bottom route is used to emphasize the frequencies that are heard when the sound is behind you.

147
00:12:40,834 --> 00:12:48,178
It's a bandpass filter that I stumbled upon looking for something that might create noticeable audio differences outside of adjusting low and high frequencies.

148
00:12:53,240 --> 00:12:56,382
I'd like to explain how I designed the DSP for simple 3D and determinants parameters.

149
00:12:56,422 --> 00:12:58,624
This should give you an idea of how the effect works.

150
00:12:58,644 --> 00:12:59,284
This is a diagram.

151
00:12:59,324 --> 00:13:00,745
I have two speakers.

152
00:13:00,865 --> 00:13:01,626
One is fixed in front of me.

153
00:13:01,686 --> 00:13:03,227
The other is placed in the direction of 2.

154
00:13:24,260 --> 00:13:31,406
In the image on the slide, we have two speakers.

155
00:13:32,006 --> 00:13:33,808
One is placed directly in front of the listener.

156
00:13:34,268 --> 00:13:36,069
The other can be placed at a point of our choosing.

157
00:13:36,810 --> 00:13:38,431
I would either carry the second speaker

158
00:13:38,571 --> 00:13:40,533
or have one of my colleagues carry it for me,

159
00:13:40,693 --> 00:13:41,573
usually the latter.

160
00:13:44,816 --> 00:13:45,636
Thank you very much.

161
00:13:51,742 --> 00:13:53,863
So, pink noise is played through both speakers

162
00:13:53,943 --> 00:13:55,284
with EQ for the front.

163
00:13:56,844 --> 00:13:59,605
We recorded the parameter of the equalizer

164
00:13:59,625 --> 00:14:03,046
before the sound was played

165
00:14:03,066 --> 00:14:04,827
by comparing pink noise with the main tube.

166
00:14:04,847 --> 00:14:06,828
We designed the effect based on this parameter.

167
00:14:09,007 --> 00:14:12,268
So I would listen back and forth to the pink noise from both speakers,

168
00:14:12,848 --> 00:14:16,930
playing with the EQ until what I heard from both sounded as close as possible.

169
00:14:17,490 --> 00:14:21,631
I'd repeat that for multiple directions, recording the EQ parameters for each one,

170
00:14:22,051 --> 00:14:24,112
then I'd use those parameters to build the effect.

171
00:14:26,086 --> 00:14:32,551
I think that's pretty much all I did to perform the sounds we just heard, but I was pretty happy with the results.

172
00:14:56,059 --> 00:14:59,562
The second part of spatial audio I'd like to discuss is interactive reverb.

173
00:15:00,303 --> 00:15:04,406
I built this effect to automatically read the player's surroundings and create reverb to fit them.

174
00:15:04,426 --> 00:15:06,087
I also wanted to continuously change all parameters.

175
00:15:17,430 --> 00:15:21,813
Additionally, I wanted everything in the effect to continually update in real time.

176
00:15:21,833 --> 00:15:30,478
I wanted to maximize the game's interactivity and try lots of things through automation that wouldn't have been possible manually.

177
00:15:39,603 --> 00:15:47,149
I also tried to study the material of the terrain, and tried to reproduce the different reflections, time, and sound quality depending on the direction.

178
00:15:47,209 --> 00:15:49,671
In addition, I also aimed to respond to the change of terrain in real time.

179
00:15:49,971 --> 00:15:55,555
My goal was to take the terrain, find how it affects the time, strength, and quality of the reverb,

180
00:15:55,715 --> 00:15:59,618
continually updating any change found in surroundings in real time.

181
00:15:59,638 --> 00:16:07,204
I used Raycast for terrain detection.

182
00:16:08,646 --> 00:16:10,808
For terrain detection, we used ray casts.

183
00:16:12,549 --> 00:16:17,713
YOSHIMASA ENJI, SPEAKING JAPANESE

184
00:16:18,033 --> 00:16:20,996
Every frame, we would ray cast in several random directions.

185
00:16:21,656 --> 00:16:24,138
Each ray cast would record and temporarily store

186
00:16:24,338 --> 00:16:25,419
any collisions that occurred.

187
00:16:27,100 --> 00:16:29,943
YOSHIMASA ENJI, SPEAKING JAPANESE

188
00:16:36,854 --> 00:16:39,315
Using these collision points in the player's position,

189
00:16:39,495 --> 00:16:42,358
I was able to calculate the proper distance, reverb,

190
00:16:42,478 --> 00:16:44,379
and filter that should be applied to each sound.

191
00:16:51,444 --> 00:16:54,626
So here are two images to illustrate

192
00:16:54,707 --> 00:16:55,787
how we used ray casts.

193
00:17:07,530 --> 00:17:10,011
The green dots represent where the ray casts are hitting.

194
00:17:10,371 --> 00:17:13,812
On the left we have a small room and on the right we have a more open area.

195
00:17:15,152 --> 00:17:19,853
It's a little small, but the UI at the bottom right is supposed to be a map where the green

196
00:17:19,873 --> 00:17:20,974
represents the size of the area.

197
00:17:32,949 --> 00:17:42,614
I needed to take this collision data and use it to calculate reverb, so I guess the next thing on the agenda would be making reverb.

198
00:17:53,713 --> 00:18:03,420
I wanted to create something that kept the reverb relative to its origin instead of following the player.

199
00:18:03,800 --> 00:18:11,206
On top of the goals we previously discussed, I wanted to create something that kept the reverb relative to its origin instead of following the player.

200
00:18:11,226 --> 00:18:18,551
As I mentioned in the request, I focused on creating a sound that was pleasant to listen to rather than doing a precise simulation.

201
00:18:26,782 --> 00:18:28,943
So regarding the effects architecture,

202
00:18:29,123 --> 00:18:32,565
from throwing raycasts to the actual reverb itself,

203
00:18:33,145 --> 00:18:37,328
I opted to make the effect easily recognizable and audibly pleasing

204
00:18:37,488 --> 00:18:39,629
rather than attempting a precise simulation.

205
00:18:40,129 --> 00:18:42,790
Keeping CPU usage to a minimum was also important.

206
00:18:42,810 --> 00:18:46,793
This K-Verb is a temporary name for this effect,

207
00:18:46,873 --> 00:18:51,235
and I took the initials from it, but for some reason it's still there.

208
00:18:52,435 --> 00:18:55,597
So I called this effect Kverb for Kohada

209
00:18:55,977 --> 00:18:57,138
when I started working on it

210
00:18:57,758 --> 00:18:59,980
and also never got around to changing that either.

211
00:19:00,000 --> 00:19:08,325
So I called this effect Kverb for Kohada

212
00:19:10,067 --> 00:19:11,828
and also never got around to changing that either.

213
00:19:11,888 --> 00:19:14,389
And also never got around to changing that either.

214
00:19:14,550 --> 00:19:16,871
So, here's a video that demonstrates Kverb.

215
00:19:17,331 --> 00:19:18,893
Try to notice how sounds change

216
00:19:19,013 --> 00:19:21,034
based on the size of the space the player is in.

217
00:20:28,822 --> 00:20:42,118
So hopefully that, uh, you could see that. The difference there. So now I'll explain the DSP for K verb.

218
00:20:42,997 --> 00:20:51,939
This is a bit complicated and it will take a long time to explain in detail, so I will just briefly explain the features.

219
00:20:52,019 --> 00:20:56,500
So the design is a little too complicated for me to go into detail with everything here,

220
00:20:57,120 --> 00:21:00,361
so I'd like to just give a brief synopsis of the effects layout.

221
00:21:01,621 --> 00:21:05,882
The input on the left is the mix for the dry component,

222
00:21:06,282 --> 00:21:08,823
and the AX on the top is the mix for the wet component.

223
00:21:09,102 --> 00:21:13,827
We start with two sounds, one an input that will represent the dry level in the mix,

224
00:21:14,067 --> 00:21:17,631
and then anything that goes into aux will become the wet level of the mix.

225
00:21:18,832 --> 00:21:21,795
The aux is the channel that comes from a listener.

226
00:21:21,835 --> 00:21:23,917
We then do a parallel, absolute parallel mix

227
00:21:23,937 --> 00:21:25,438
to each channel for 8�.

228
00:21:31,350 --> 00:21:36,131
The sound fed to aux starts as five channels positioned from the listener.

229
00:21:36,811 --> 00:21:40,272
We first break this up into eight channels, each for a cardinal direction.

230
00:22:01,323 --> 00:22:03,944
The loop in the middle is where the reverb is processed.

231
00:22:04,604 --> 00:22:11,246
Data is extracted from the collision points from each direction to determine delay length, level, and filter strength.

232
00:22:11,866 --> 00:22:20,468
On its own, the delay is too strong, so an all-pass filter and a cross-feed using each direction is applied to give a proper reverb effect.

233
00:22:29,191 --> 00:22:32,013
The result is combined into four channels that are returned

234
00:22:32,053 --> 00:22:34,915
to the listener's perspective and added to the main output.

235
00:22:50,306 --> 00:22:53,228
So next, let's discuss the electronic effects in the game.

236
00:22:53,968 --> 00:22:55,730
I feel these effects were important in adding

237
00:22:55,770 --> 00:22:56,770
to the game's atmosphere.

238
00:22:58,315 --> 00:23:06,856
I'll discuss the music transition during the hacking sequences and a lo-fi effect.

239
00:23:06,876 --> 00:23:13,037
In Nier Automata, there is a feature called hacking.

240
00:23:13,057 --> 00:23:19,198
When you take a code called hacking in a normal game, it will be transferred to a minigame.

241
00:23:19,379 --> 00:23:23,939
When you hack, the music will continuously change to a sound like an 8-bit game.

242
00:23:26,339 --> 00:23:29,802
In NieR Automata, the player has the ability to hack enemies and items.

243
00:23:30,383 --> 00:23:31,684
When the player hacks something,

244
00:23:32,084 --> 00:23:35,227
they move from the regular game screen to a mini-game of sorts.

245
00:23:35,968 --> 00:23:40,232
As this happens, the music also shifts to a more 8-bit version of the current track.

246
00:23:41,593 --> 00:23:45,677
We didn't just cross-fade the music from the regular version to the 8-bit version,

247
00:23:45,717 --> 00:23:50,201
but we also used an 8-bit-like effect to enhance the sense of progression of the hacking.

248
00:23:52,202 --> 00:23:56,446
Rather than simply crossfade, an effect is applied to the original track to bit crush it,

249
00:23:56,907 --> 00:23:59,129
after which at a certain point crossfading is applied.

250
00:23:59,149 --> 00:24:08,858
So just for those who are unfamiliar with hacking, here are a few images.

251
00:24:13,515 --> 00:24:16,497
YUSUKE USTUNOMIYA So, hacking Monenomy takes us from the regular

252
00:24:16,517 --> 00:24:21,441
game screen on the left to the low-poly looking interface on the right.

253
00:24:38,484 --> 00:24:42,890
Next, I'd like to share a video that demonstrates the tone filter used during hacking transitions.

254
00:24:51,058 --> 00:24:54,340
Some of the tracks in the game don't have 8-bit versions that are switched to,

255
00:24:54,420 --> 00:24:57,682
and this is one of those examples where the track simply uses the effect only.

256
00:27:06,167 --> 00:27:08,430
So, let's look into the Tone Filter's DSP.

257
00:27:09,391 --> 00:27:14,576
Tone Filter is an effect that takes the tones of a track and repurposes them into square waves.

258
00:27:22,296 --> 00:27:27,660
The effect is not to produce sound by determining the pitch,

259
00:27:27,680 --> 00:27:30,302
but to transform the original waveform.

260
00:27:30,322 --> 00:27:37,928
This time, we made the effect to emphasize the continuity of change.

261
00:27:38,449 --> 00:27:43,433
What's unique about this effect is that it's not generating different sounds based on the tones it hears.

262
00:27:43,933 --> 00:27:46,195
It's actually deconstructing the tone it receives.

263
00:27:46,775 --> 00:27:51,179
The effect was designed to gradually deconstruct the sound for natural sounding transitions.

264
00:27:53,041 --> 00:27:53,442
in Japanese.

265
00:27:53,502 --> 00:27:58,268
Let's uh, so first input is made mono and we don't need stereo and we keep uh, keeping

266
00:27:58,288 --> 00:27:59,809
things in mono keeps down on processing costs.

267
00:28:13,887 --> 00:28:18,968
Next we take 48 tones spanning 4 octaves and extract something close to a sine wave from them.

268
00:28:18,988 --> 00:28:25,350
At this step we remember the volume of each tone, then clip it into something like a square wave.

269
00:28:39,940 --> 00:28:43,441
At this point, we'll have too much noise, so we need to do some balancing and drop what's irrelevant.

270
00:28:43,461 --> 00:28:46,243
Then we mix the remaining tones into the main output.

271
00:29:01,913 --> 00:29:03,295
Actually, when we put it into the game,

272
00:29:03,315 --> 00:29:05,577
we didn't just use the basic part of the game,

273
00:29:05,597 --> 00:29:07,859
but also the spatial effects,

274
00:29:07,919 --> 00:29:12,043
and the gain and mix to balance it.

275
00:29:12,683 --> 00:29:14,605
Ultimately, there are some area effects

276
00:29:14,665 --> 00:29:16,627
and other small details that come into play,

277
00:29:17,047 --> 00:29:18,969
but this describes the bulk of the process.

278
00:29:25,395 --> 00:29:27,036
Next, we'll look at Lo-Fi.

279
00:29:27,356 --> 00:29:28,738
All right, so next we'll look at Lo-Fi.

280
00:29:29,982 --> 00:29:33,183
I think that low-fi processing is a relatively common process,

281
00:29:33,203 --> 00:29:38,486
but what I wanted to highlight here was that it is very difficult to produce a low-fi feeling that is not unpleasant.

282
00:29:38,626 --> 00:29:44,549
I think that it is also one of the roles of real-time audio processing to make such expressions freely.

283
00:29:44,969 --> 00:29:48,231
So creating a low-fi effect is pretty common these days,

284
00:29:48,351 --> 00:29:51,753
but I found it's hard to create an effect that doesn't perturb the player.

285
00:29:52,413 --> 00:29:57,576
I found this is another way that real-time audio can really help provide some potential to sound crafting.

286
00:29:59,091 --> 00:30:03,274
In the game, the effect of lo-fi is used in many situations,

287
00:30:03,314 --> 00:30:07,756
such as when the sound of communication or the player's senses are affected.

288
00:30:08,177 --> 00:30:10,578
Nier Automata uses lo-fi in a few different ways.

289
00:30:11,139 --> 00:30:13,440
It can be used for transmissions between characters

290
00:30:13,600 --> 00:30:15,561
or when players are hit with certain status effects.

291
00:30:17,002 --> 00:30:18,723
Knowing how it would be used in the game,

292
00:30:18,743 --> 00:30:21,585
I attempted to make an effect that mimics old digital hardware.

293
00:30:35,450 --> 00:30:37,871
Here's a video that demonstrate how Lo-Fi sounds.

294
00:30:38,331 --> 00:30:42,013
This video shows how noise is increased as the player starts to become more and more

295
00:30:42,033 --> 00:30:42,314
corrupted.

296
00:31:24,765 --> 00:31:30,488
Virus contamination rate up to 16 percent malfunction detected in NFCS circuit

297
00:31:30,608 --> 00:31:34,811
I have to keep it from spreading to other androids

298
00:31:35,491 --> 00:31:38,833
Pod give me a location that's low on android signals

299
00:31:42,915 --> 00:31:53,701
Alert virus contamination rate up to 32 percent

300
00:31:54,772 --> 00:31:57,675
Malfunction detected in visual processing system.

301
00:32:03,399 --> 00:32:06,762
The Council of Humanity has a message for all of us.

302
00:32:06,922 --> 00:32:10,044
Fighting on the surface.

303
00:32:10,084 --> 00:32:12,426
Today, I have wonderful news.

304
00:32:19,246 --> 00:32:21,148
This is a test flight.

305
00:32:21,168 --> 00:32:23,611
Contamination rate up to 57%.

306
00:32:23,711 --> 00:32:31,180
The function detected in FMCS circuit.

307
00:32:42,439 --> 00:32:45,900
Alert. Button's contamination rate, 70%. Infiltrating system-protected region.

308
00:32:45,920 --> 00:32:48,340
Alert. Button's contamination rate, 90%.

309
00:33:07,688 --> 00:33:13,131
Alert! Unusual heat generation in central nervous system. Internal combustion imminent.

310
00:33:14,933 --> 00:33:19,335
Detection! Natural malady detected in visual sensors.

311
00:33:20,056 --> 00:33:22,738
Alert! Deterioration found in black box.

312
00:33:23,458 --> 00:33:26,060
Alert! Damage to data backup system.

313
00:33:26,760 --> 00:33:30,503
Step damage will make it difficult to retain sub-consciousness upon backup.

314
00:33:43,855 --> 00:33:51,201
So next let's look into the DSP for the lo-fi effect.

315
00:33:51,221 --> 00:33:51,841
Let's do this.

316
00:33:52,041 --> 00:33:53,743
Let's do this.

317
00:33:53,783 --> 00:33:54,683
Let's do this.

318
00:33:54,703 --> 00:33:55,064
Let's do this.

319
00:34:06,233 --> 00:34:12,595
The example diagram on this slide is a mono setup, but this flow is just duplicated to fit the number of channels needed.

320
00:34:12,615 --> 00:34:17,237
Starting at the beginning, we take the sampling rate and cut it in half.

321
00:34:17,257 --> 00:34:21,539
We don't need a high sampling rate for lo-fi, and it saves some processing power.

322
00:34:35,572 --> 00:34:42,556
Next, we bring values closer to the values before them and then quantize.

323
00:34:42,596 --> 00:34:46,918
Bringing the values close together helps relieve some of the jagged buzzing noise that can

324
00:34:46,958 --> 00:34:48,138
occur through quantization.

325
00:35:00,992 --> 00:35:05,035
The closer we bring the values together, the more chopped up the sound will feel.

326
00:35:05,055 --> 00:35:09,739
The looser we quantize the notes, the more buzzing will be heard.

327
00:35:25,990 --> 00:35:28,212
So the setup is relatively simple in design.

328
00:35:28,553 --> 00:35:29,894
What's important about this graph

329
00:35:29,954 --> 00:35:31,956
is how the later values are pulled closer

330
00:35:31,996 --> 00:35:33,017
to the values before them.

331
00:35:37,581 --> 00:35:39,943
Then we just return the sampling rate to its default

332
00:35:40,124 --> 00:35:41,245
and send the sound to output.

333
00:35:43,181 --> 00:35:51,404
YOSHIMASA ENOCHI, JR.: With Lo-Fi, I

334
00:35:51,464 --> 00:35:54,286
think we were able to take a pretty common effect

335
00:35:54,486 --> 00:35:57,387
and breathe some new life into it, which ultimately drew

336
00:35:57,427 --> 00:35:58,888
the player into the game deeper.

337
00:35:58,908 --> 00:36:06,511
YOSHIMASA ENOCHI, JR.:

338
00:36:07,672 --> 00:36:08,452
JAPANESE

339
00:36:12,410 --> 00:36:13,551
I hope you enjoy this video.

340
00:37:07,822 --> 00:37:09,904
Looks like it's time to help 2B get herself set up.

341
00:37:10,404 --> 00:37:11,986
She's probably waiting in her room now.

342
00:37:41,254 --> 00:37:45,537
We'll get brings of time now to be a staff job.

343
00:37:45,557 --> 00:37:49,439
Fair enough.

344
00:37:49,499 --> 00:37:58,405
Lady, we'll be right back.

345
00:37:58,445 --> 00:38:01,687
We don't have much left to say to you,

346
00:38:01,747 --> 00:38:03,468
we're just here to help.

347
00:39:47,203 --> 00:39:50,609
You're a monster, I say

348
00:39:50,669 --> 00:39:53,453
You're a monster, I say

349
00:39:53,473 --> 00:39:54,956
You're a monster, I say

350
00:40:26,420 --> 00:40:43,489
you. Okay. Thank you. So, in conclusion.

351
00:40:55,232 --> 00:41:10,804
Nier Automata's sound design focused on utilizing the capabilities of real-time audio processing that recent consoles have made possible.

352
00:41:12,225 --> 00:41:18,010
Sound designers crafted audio processing tools specifically for Nier Automata to increase user connectivity.

353
00:41:25,972 --> 00:41:31,836
Sound designers and engineers can maximize audio expressivity by venturing into each other's territories.

354
00:41:31,856 --> 00:41:32,656
Thank you very, very much.

355
00:41:32,676 --> 00:41:33,437
Just some thanks.

356
00:41:56,587 --> 00:42:03,951
applause

357
00:42:04,412 --> 00:42:08,874
so on the left, is the Niiya Automata audio team after receiving our SEDEC award

358
00:42:08,894 --> 00:42:10,375
everyone helped us out a lot

359
00:42:26,802 --> 00:42:29,402
And on the right, I have Andrew.

360
00:43:03,064 --> 00:43:07,547
I think that we talked a little fast, so we have a lot of time left over.

361
00:43:07,567 --> 00:43:09,909
But yeah, we can take some questions if anyone has anything.

362
00:43:09,929 --> 00:43:11,991
Like I said, I'll try my best to convey them.

363
00:43:27,277 --> 00:43:33,743
Sorry if this question is very technical, but for the ray casting reverb system that you made did you

364
00:43:34,905 --> 00:43:41,812
reuse pre-existing geometry such as the collision mesh to do the ray casting or do you create your own acoustic mesh and

365
00:43:41,872 --> 00:43:45,695
What kind of parameters did you tag this the acoustic surfaces with?

366
00:43:46,656 --> 00:43:50,380
Reusing the geometry you recreate. What did you say? I'm sorry

367
00:43:51,892 --> 00:43:56,374
For the geometry, did you have to build your own acoustic geometry?

368
00:43:56,974 --> 00:44:00,215
Or did you reuse something that already existed, like the collision geometry?

369
00:44:17,636 --> 00:44:22,780
Yeah, it's just the geometry from, I guess, what, 3D assets.

370
00:44:23,200 --> 00:44:24,361
Yeah, not audio geometry.

371
00:44:25,722 --> 00:44:29,244
And did you tag the surfaces with specific parameters,

372
00:44:29,284 --> 00:44:31,525
you know, for like sound absorption and whatnot?

373
00:44:34,668 --> 00:44:39,491
I don't know.

374
00:44:39,571 --> 00:44:40,532
In Japanese.

375
00:44:41,052 --> 00:44:43,033
In Japanese?

376
00:44:43,213 --> 00:44:43,694
No, no, no.

377
00:44:43,774 --> 00:44:46,956
I think he was adding a parameter to the surface.

378
00:44:47,783 --> 00:44:52,867
So I said that we had material that was used for like footsteps if that answers the question?

379
00:44:53,207 --> 00:44:53,548
Okay, thanks.

380
00:44:53,568 --> 00:44:55,649
Okay, thank you.

381
00:45:17,017 --> 00:45:19,498
I was also interested in the ray casting system.

382
00:45:19,738 --> 00:45:22,479
How did you determine the amount to use, and was it

383
00:45:22,519 --> 00:45:24,439
different per level, per stage, or per sound?

384
00:45:31,861 --> 00:45:34,281
What did you do with the amount you used?

385
00:45:40,844 --> 00:45:43,667
So he would create different, I guess, mounts,

386
00:45:44,047 --> 00:45:47,651
and then the sound designers would kind of adjust those as necessary.

387
00:45:50,553 --> 00:45:59,882
Yeah, I mean, our main goal, I guess, was just to get it as audibly pleasing as possible,

388
00:46:00,282 --> 00:46:01,864
just trying to find the way it sounded the best.

389
00:46:02,573 --> 00:46:05,175
And then small follow-up, if the game needed additional performance,

390
00:46:05,255 --> 00:46:07,677
could you scale down the amount of recasts being done at a time,

391
00:46:07,757 --> 00:46:09,938
or was it always kept to the appropriate amount?

392
00:46:10,158 --> 00:46:10,419
Oh.

393
00:46:10,479 --> 00:46:14,621
so how much would you scale the amount of recasts so that you can reduce the load when playing?

394
00:46:14,661 --> 00:46:23,027
the amount of recasts to be able to do that isn't determined by the location does the calculation and

395
00:46:23,047 --> 00:46:28,250
the amount is decided by one frame, eight retakes,

396
00:46:28,270 --> 00:46:28,430
yes.

397
00:46:33,375 --> 00:46:36,217
So, um, we decided that at the game's beginning,

398
00:46:36,417 --> 00:46:39,518
just like to create a, what, like, standard value

399
00:46:39,558 --> 00:46:40,398
for anywhere in the game.

400
00:46:40,538 --> 00:46:41,779
We just said it was going to be, like,

401
00:46:41,919 --> 00:46:43,159
eight raycasts per frame.

402
00:46:43,179 --> 00:46:44,540
Yeah. Yeah.

403
00:46:45,180 --> 00:46:45,560
Thank you.

404
00:46:47,361 --> 00:46:49,742
I have a third question about the audio raycast system.

405
00:46:49,782 --> 00:46:50,623
Okay. Sure.

406
00:46:53,404 --> 00:46:56,565
I'm curious why you chose to do random raycast directions

407
00:46:56,665 --> 00:46:58,106
rather than either fixed directions

408
00:46:58,586 --> 00:47:00,106
or a predetermined sequence

409
00:47:00,767 --> 00:47:01,687
that you could just round-robin.

410
00:47:04,814 --> 00:47:05,134
Random?

411
00:47:05,174 --> 00:47:07,536
You can use anything.

412
00:47:07,556 --> 00:47:08,357
You can use anything.

413
00:47:08,477 --> 00:47:09,619
Random.

414
00:47:11,220 --> 00:47:11,641
Random.

415
00:47:11,721 --> 00:47:12,842
Random is...

416
00:47:12,862 --> 00:47:13,402
Direction.

417
00:47:13,482 --> 00:47:14,043
Direction is...

418
00:47:14,083 --> 00:47:14,343
Random.

419
00:47:22,898 --> 00:47:25,161
It doesn't have to be random, but it does need to be balanced.

420
00:47:25,201 --> 00:47:30,185
And when that happens, there is a balance between horizontal and vertical,

421
00:47:30,246 --> 00:47:32,508
and it's a pain to do it evenly.

422
00:47:46,418 --> 00:47:49,640
I guess it would just be easier just to find any differences

423
00:47:50,021 --> 00:47:53,443
between, obviously, there's going to be what differences,

424
00:47:53,543 --> 00:47:55,865
high and low differences, and then what differences

425
00:47:55,905 --> 00:47:57,446
in geometry with right and left, right?

426
00:47:57,786 --> 00:48:00,348
So it didn't need to be random, but I

427
00:48:00,388 --> 00:48:03,050
think that making it random was probably the easiest way for us

428
00:48:03,070 --> 00:48:04,371
to catch all of those differences.

429
00:48:06,153 --> 00:48:06,353
Thanks.

430
00:48:06,973 --> 00:48:07,133
Thanks.

431
00:48:08,397 --> 00:48:16,867
Hi. The DSP, was that, were they built as plugins to run within Wwise or somewhere else in the game engine somewhere?

432
00:48:17,427 --> 00:48:20,711
So DSP, do you know what Wwise is? Do you know what plugin do you use?

433
00:48:20,891 --> 00:48:23,054
Ah, subete Wwise plugin desu.

434
00:48:23,234 --> 00:48:24,355
Yes, they're all Wwise plugins.

435
00:48:24,536 --> 00:48:28,200
Okay, created by, by, yes, terrific.

436
00:48:28,220 --> 00:48:28,400
Yes.

437
00:48:31,144 --> 00:48:35,289
Hi, first of all, I must admit I have not played the game yet, but I will.

438
00:48:35,750 --> 00:48:43,419
But I was very much impressed with the tone DSP filter, how it translated very well the

439
00:48:43,479 --> 00:48:44,260
original material.

440
00:48:44,720 --> 00:48:46,502
My question is, was it...

441
00:48:48,584 --> 00:48:53,246
applied to one single stereo file, which was the whole of the music?

442
00:48:53,706 --> 00:48:57,108
Or was it applied to several tracks that you kept separate,

443
00:48:57,608 --> 00:48:59,229
in order to apply them separately?

444
00:48:59,449 --> 00:49:01,149
The first tone filter,

445
00:49:01,169 --> 00:49:03,290
is it applied to one track,

446
00:49:03,330 --> 00:49:05,631
or to several tracks, like a stem?

447
00:49:13,445 --> 00:49:21,394
I think it depends on the song, but I make it with the assumption that it can be applied to one song, to mix songs.

448
00:49:21,615 --> 00:49:27,701
But I know that the accuracy changes when I apply the same effect to another stem.

449
00:49:31,836 --> 00:49:36,699
Generally, it was just used in one track, but there would be certain situations where,

450
00:49:37,140 --> 00:49:40,842
you know, if we did use the stem, I know that it would create a different result.

451
00:49:41,482 --> 00:49:41,663
Yeah.

452
00:49:42,103 --> 00:49:43,304
So, just a follow-up.

453
00:49:43,724 --> 00:49:48,867
This is essentially a resynthesis then of that original wave file?

454
00:49:50,008 --> 00:49:51,169
Is a resynth...

455
00:49:51,489 --> 00:49:52,690
Yeah, it's a resynthesis.

456
00:49:52,970 --> 00:49:53,470
Resynthesis.

457
00:49:53,530 --> 00:49:55,352
Is that being resynthesized on real time?

458
00:50:01,949 --> 00:50:02,670
Sorry I stumped you.

459
00:50:26,868 --> 00:50:29,149
It's a filter, a bandpass filter.

460
00:50:29,429 --> 00:50:35,990
It's a very, how do you say it?

461
00:50:36,490 --> 00:50:38,371
I don't know.

462
00:50:38,431 --> 00:50:39,811
You don't know?

463
00:50:39,851 --> 00:50:40,391
It's narrow.

464
00:50:40,591 --> 00:50:42,111
High density?

465
00:50:42,991 --> 00:50:46,692
Okay, he's just saying it's not exactly a resynthesis,

466
00:50:46,732 --> 00:50:49,593
it's using just like a high density bandpass filter.

467
00:50:49,953 --> 00:50:51,773
Okay, I have to do some homework.

468
00:50:52,093 --> 00:50:52,653
Okay.

469
00:50:52,673 --> 00:50:53,453
Thank you so much.

470
00:50:54,273 --> 00:50:54,613
Thank you.

471
00:50:58,105 --> 00:50:58,325
Hello.

472
00:50:59,486 --> 00:51:03,948
So you mentioned that it can be fruitful for designers

473
00:51:04,028 --> 00:51:07,049
and programmers to enter into one another's domain

474
00:51:07,549 --> 00:51:08,189
as a programmer.

475
00:51:08,569 --> 00:51:11,150
Can you mention a specific example or a general example

476
00:51:11,251 --> 00:51:13,171
where classical sound designers would

477
00:51:13,211 --> 00:51:15,012
be entering into the more technical domain?

478
00:51:18,582 --> 00:51:21,583
I'm wondering if sound designers and engineers

479
00:51:21,623 --> 00:51:22,603
can get along with each other.

480
00:51:22,623 --> 00:51:23,703
What do you think

481
00:51:24,764 --> 00:51:25,744
about the sound designer

482
00:51:25,764 --> 00:51:27,364
working more like an engineer in this?

483
00:51:27,404 --> 00:51:28,625
The most important aspect was

484
00:51:28,705 --> 00:51:31,566
to confirm the processing load.

485
00:51:43,009 --> 00:51:47,010
Yes, a sound designer wants to give his best,

486
00:51:47,030 --> 00:51:48,571
but if you're not just giving your best,

487
00:51:48,611 --> 00:51:51,993
but also focusing on the process itself,

488
00:51:52,013 --> 00:51:53,613
that process will have some setbacks,

489
00:52:05,060 --> 00:52:17,408
I think that probably the most common example would be just to get them to understanding how much processing power the sounds that they were using was creating.

490
00:52:18,449 --> 00:52:21,672
because obviously we want them to create the best kind of sounds possible,

491
00:52:21,992 --> 00:52:28,279
but if they get too crazy with stuff, then it will take away from different parts of the game.

492
00:52:28,880 --> 00:52:34,225
So it was kind of just training them into exactly what level of processing power

493
00:52:34,265 --> 00:52:36,408
the sounds they're creating is actually causing in the game.

494
00:52:37,088 --> 00:52:37,289
Thank you.

495
00:52:43,275 --> 00:52:50,842
Thank you for your session. I have one question. When player hacked some enemies, music changed

496
00:52:50,862 --> 00:53:00,590
into 8-bit version. Do you put the 2-version music in the resident memories? Because, I

497
00:53:00,630 --> 00:53:00,770
mean,

498
00:53:01,642 --> 00:53:13,250
So, in the root, in the root, player can't hack enemy. So, only B root. So, do you put

499
00:53:13,390 --> 00:53:15,852
on the two version on resident memory?

500
00:53:21,035 --> 00:53:22,896
You always have to switch between two versions of music.

501
00:53:22,916 --> 00:53:25,258
I think it's the same with overclocking.

502
00:53:25,278 --> 00:53:28,580
I'd like to know if you always have two versions of music on your memory.

503
00:53:28,600 --> 00:53:29,860
The songs are mostly streamed.

504
00:53:29,880 --> 00:53:30,601
They're mostly streamed.

505
00:53:31,061 --> 00:53:32,502
We make a lot of settings for that as well.

506
00:53:48,947 --> 00:53:51,007
Basically, only one stream is being played.

507
00:53:51,027 --> 00:53:54,568
When switching, of course, both streams are being played at the same time.

508
00:53:54,608 --> 00:53:57,069
I'm sorry, but I'm interested in this.

509
00:53:57,469 --> 00:54:01,630
I think there was a picture of hacking with A root and B root.

510
00:54:01,650 --> 00:54:04,811
Does that mean that the structure of the bank has changed with A root and B root?

511
00:54:04,851 --> 00:54:07,351
No, basically, all songs are streamed in A root.

512
00:54:22,590 --> 00:54:24,371
I think the question is just that,

513
00:54:24,512 --> 00:54:26,273
are there being two versions of the,

514
00:54:26,293 --> 00:54:28,034
is there an 8-bit version and a,

515
00:54:28,674 --> 00:54:33,338
a just regular version of the track being applied to memory

516
00:54:33,658 --> 00:54:36,140
in, um, all the roots of the game?

517
00:54:36,180 --> 00:54:38,141
Because in the A-Root of the game you can't use,

518
00:54:38,221 --> 00:54:40,483
there's no actual hacking sequences I guess.

519
00:54:42,344 --> 00:54:45,006
And he's saying that the song is usually streamed

520
00:54:45,126 --> 00:54:47,768
and in certain instances there

521
00:54:48,889 --> 00:54:54,412
needs to have both of the tracks in memory, but not always.

522
00:54:58,475 --> 00:54:59,436
Thank you very much.

523
00:55:02,598 --> 00:55:08,382
Hi, I was wondering if you could talk a little bit about the machine life form voices.

524
00:55:08,402 --> 00:55:13,565
I found it's a pretty simple thing, but I think it was very...

525
00:55:13,905 --> 00:55:15,807
I really enjoyed the sound of their voices.

526
00:55:16,954 --> 00:55:19,936
Are you talking about the machine life form or the voice changer that we heard?

527
00:55:19,956 --> 00:55:21,817
The machine life form, not the voice changer.

528
00:55:21,937 --> 00:55:22,037
OK.

529
00:55:53,136 --> 00:55:54,617
Here's our sound designer, Shindo.

530
00:55:54,637 --> 00:56:04,125
First, I really wanted to get up on this stage, so I'm glad that you asked a question that

531
00:56:04,145 --> 00:56:05,186
would allow me to do so.

532
00:56:05,206 --> 00:56:05,426
Thank you.

533
00:56:05,446 --> 00:56:05,786
Thank you.

534
00:56:05,806 --> 00:56:06,006
Thank you.

535
00:56:06,026 --> 00:56:06,327
Thank you.

536
00:56:14,007 --> 00:56:19,191
What was your focus when you were making the voice for the mechanical life form?

537
00:56:19,211 --> 00:56:19,351
Focus?

538
00:56:20,192 --> 00:56:21,773
What do you mean by focus?

539
00:56:21,813 --> 00:56:22,033
Process.

540
00:56:22,053 --> 00:56:24,595
Can I ask you about process or focus?

541
00:56:24,836 --> 00:56:29,399
So just, you want to know the, what, the process of making it, I guess?

542
00:56:29,940 --> 00:56:34,143
Yeah, like I'm curious about the specific type of effects that might have been used,

543
00:56:34,383 --> 00:56:37,566
or like if there was bit crushing, or like a vocoder.

544
00:56:37,586 --> 00:56:38,707
What effect did you use?

545
00:56:38,727 --> 00:56:39,067
Effect was...

546
00:56:41,498 --> 00:56:45,180
Specifically, we need to have the pitch correct.

547
00:56:45,260 --> 00:56:50,183
So we used the pitch correct effect

548
00:56:50,403 --> 00:56:51,384
from Nuendo.

549
00:56:51,464 --> 00:56:54,005
And then...

550
00:56:54,405 --> 00:56:56,206
I'll just say it.

551
00:56:58,108 --> 00:56:59,989
So there's Nuendo.

552
00:57:01,770 --> 00:57:04,771
And what we needed to do first is

553
00:57:04,791 --> 00:57:07,093
we needed to make sure that all of the pitches were corrected.

554
00:57:07,453 --> 00:57:09,034
So we used the pitch correct in Nuendo for that.

555
00:57:10,537 --> 00:57:13,098
And then I wanted to add some vocodering,

556
00:57:13,118 --> 00:57:16,920
so I used the plugin called Waves HDlay

557
00:57:16,960 --> 00:57:18,340
to flange the delay a little bit.

558
00:57:18,400 --> 00:57:21,662
That's how I made the image of a vocoder.

559
00:57:21,722 --> 00:57:23,963
I might not remember the rest.

560
00:57:23,983 --> 00:57:25,284
I probably spent too much time on this.

561
00:57:39,864 --> 00:57:48,866
We probably had something else but I don't remember.

562
00:57:49,386 --> 00:57:53,967
But I think that if you were to use those two plugins, you could probably create something similar.

563
00:57:53,987 --> 00:57:58,788
There was one point, and pitch correct has a lot of effects from a lot of companies,

564
00:57:58,808 --> 00:58:00,788
but NUEND's was not very precise, so we adopted it.

565
00:58:08,870 --> 00:58:15,172
So there are a lot of different companies that have pitch correction software or plugins, I suppose,

566
00:58:15,292 --> 00:58:20,654
but we enjoyed the Nuendo version because actually of its poor performance.

567
00:58:21,414 --> 00:58:21,654
Yeah.

568
00:58:24,555 --> 00:58:27,216
That can be a good thing. That makes sense to me.

569
00:58:27,756 --> 00:58:28,496
Thank you very much.

570
00:58:28,516 --> 00:58:29,236
Thank you.

571
00:58:29,696 --> 00:58:29,996
Thank you.

572
00:58:37,814 --> 00:58:42,056
Hello, I'm just trying to ask a unprofessional question.

573
00:58:42,236 --> 00:58:43,636
Okay.

574
00:58:43,956 --> 00:58:53,039
So I'm wondering when the sound team and Yoko-san discuss his request for the game,

575
00:58:53,260 --> 00:59:02,263
like the sound team, do you know the story beforehand or how do you fit in all the schedules?

576
00:59:02,383 --> 00:59:02,583
Okay.

577
00:59:03,782 --> 00:59:10,287
I just want to ask you about your relationship with Yoko-san.

578
00:59:14,510 --> 00:59:14,730
Again?

579
00:59:14,810 --> 00:59:26,220
I just want to ask you about your relationship with Yoko-san.

580
00:59:26,260 --> 00:59:27,100
Thank you for the question.

581
00:59:27,120 --> 00:59:28,541
I'm glad to be up here again.

582
00:59:31,993 --> 00:59:33,656
もう一言です。シンプルです。横尾さんに全て任されてました。 So, very simple answer.

583
00:59:33,696 --> 00:59:34,897
横尾さん just left us to do everything.

584
00:59:44,355 --> 00:59:44,696
Thank you.

585
01:00:02,611 --> 01:00:05,432
He says that obviously we would have him check at the ending

586
01:00:06,153 --> 01:00:08,854
after we've made something, but usually he's just like,

587
01:00:08,874 --> 01:00:09,875
yeah, sounds pretty good.

588
01:00:09,895 --> 01:00:11,035
OK, I like it.

589
01:00:11,596 --> 01:00:14,617
And you know, I mean, sometimes he would request a change here

590
01:00:14,657 --> 01:00:17,699
or there, but usually he was pretty lenient.

591
01:00:18,679 --> 01:00:20,160
OK, thank you so much.

592
01:00:20,400 --> 01:00:20,741
Thank you.

593
01:00:20,761 --> 01:00:23,142
SPEAKER 1 IN JAPANESE

594
01:00:23,162 --> 01:00:24,923
SPEAKER 2 IN JAPANESE

595
01:00:28,884 --> 01:00:30,224
We all agreed on the same thing.

596
01:00:30,524 --> 01:00:32,985
Including Mr. Yokoo.

597
01:00:33,005 --> 01:00:35,005
We didn't have to ask anyone.

598
01:00:35,425 --> 01:00:37,826
We were all thinking the same thing.

599
01:00:37,906 --> 01:00:38,546
It was great.

600
01:00:53,647 --> 01:00:54,508
including Yoko-san.

601
01:00:55,289 --> 01:00:56,290
Are we okay?

602
01:00:56,310 --> 01:00:56,390
Okay.

603
01:00:56,410 --> 01:00:57,812
Thank you very much.

