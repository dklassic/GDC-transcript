1
00:00:30,474 --> 00:00:39,500
Hello, I'm Richard Katz, and I'll be speaking today about the character pipeline I worked on at Zenimax Online Studios for The Elder Scrolls Online.

2
00:00:40,820 --> 00:00:53,028
I'm going to talk in detail about the character rigging pipeline, the rigging tools, the animation tools, and I'll wrap up the talk with a short post-mortem from my perspective as a senior technical artist on a team of well over 100 developers.

3
00:00:55,761 --> 00:01:01,562
I'm going to compress six years of development into about 60 minutes, so it might go a little quick.

4
00:01:02,722 --> 00:01:09,624
And, yeah, in contrast to the quick development cycles that Louise and Brian talked about earlier today,

5
00:01:10,244 --> 00:01:12,244
this is quite a long project that I've been on.

6
00:01:13,525 --> 00:01:16,965
First, let me tell you a little about myself.

7
00:01:19,706 --> 00:01:23,027
I received a bachelor's degree in fine arts from the College of New Jersey.

8
00:01:25,206 --> 00:01:29,010
I started in the games industry in 1997, over 17 years ago.

9
00:01:30,050 --> 00:01:33,814
Back then, it wasn't enough just to be a competent artist.

10
00:01:35,415 --> 00:01:37,818
You also had to be fairly competent with some

11
00:01:37,838 --> 00:01:39,699
of the technical aspects of game development as well.

12
00:01:41,601 --> 00:01:43,623
My first industry job was at Sierra Online,

13
00:01:43,663 --> 00:01:45,284
working on the MMO Middle Earth Online.

14
00:01:46,245 --> 00:01:48,387
I worked at the O'Kers Studio for about a year and a half

15
00:01:48,447 --> 00:01:49,208
until it was shut down.

16
00:01:50,093 --> 00:01:51,254
I was a 3D generalist.

17
00:01:51,915 --> 00:01:54,517
I touched every stage of a character from concept to game.

18
00:01:54,537 --> 00:01:57,300
I was doing concept, model, UVs, texture,

19
00:01:57,360 --> 00:01:59,321
skinning, animation, and technical art.

20
00:02:00,803 --> 00:02:03,565
We were working in 3D Studio Max version 2.0

21
00:02:04,225 --> 00:02:06,067
and the first release of MaxScript.

22
00:02:06,948 --> 00:02:08,469
And I built a layer system

23
00:02:08,529 --> 00:02:10,291
that Max did not include back then.

24
00:02:10,411 --> 00:02:13,453
Max didn't have layers in version 2.0.

25
00:02:14,234 --> 00:02:16,276
And a sprite rendering system that cut times.

26
00:02:17,248 --> 00:02:20,791
for getting a character from max into the game from eight hours to thirty minutes.

27
00:02:23,974 --> 00:02:28,397
My second job was at the 3DO company in Redwood City, California,

28
00:02:29,037 --> 00:02:31,079
where I worked on three Might and Magic titles.

29
00:02:31,819 --> 00:02:34,842
Crusaders of Might and Magic, Warriors of Might and Magic, and Shifters.

30
00:02:36,323 --> 00:02:39,025
With a parenthetical of Might and Magic, since it was a sequel to Warriors.

31
00:02:39,946 --> 00:02:43,388
I started at 3DO doing more of the same thing I was doing at Sierra.

32
00:02:44,369 --> 00:02:46,711
Concept model UVs, texture skinning.

33
00:02:48,190 --> 00:02:49,491
animation and tech art.

34
00:02:50,211 --> 00:02:53,573
Within my first few months there, I was promoted to lead artist,

35
00:02:54,174 --> 00:02:56,155
where I ended up doing a lot less character work

36
00:02:56,675 --> 00:02:58,096
and a lot more of everything else.

37
00:02:59,297 --> 00:03:00,678
UI design and scripting,

38
00:03:01,158 --> 00:03:03,860
particle effects and scripting, and I was managing a team

39
00:03:04,461 --> 00:03:06,642
of between four to eight artists plus outsourcers.

40
00:03:12,666 --> 00:03:14,647
Most of what I've done since 3DO

41
00:03:15,568 --> 00:03:16,869
has been character technical art.

42
00:03:17,917 --> 00:03:20,918
Over the past 11 years, I've worked at Z-Axis,

43
00:03:21,378 --> 00:03:24,680
Visual Concepts, Secret Level, and ZeniMax Online.

44
00:03:25,860 --> 00:03:28,621
Of those 11 years, five of those years working in Maya,

45
00:03:29,381 --> 00:03:31,322
and six years working in 3D Studio Max.

46
00:03:32,523 --> 00:03:34,243
Some of the titles I shipped over that time,

47
00:03:35,023 --> 00:03:37,044
X-Men, The Official Game, Fantastic Four,

48
00:03:37,104 --> 00:03:39,105
Rise of the Silver Surfer, and Iron Man.

49
00:03:43,607 --> 00:03:45,467
But I'm here to talk to you about my work

50
00:03:45,727 --> 00:03:46,888
on The Elder Scrolls Online.

51
00:03:48,005 --> 00:03:53,049
Elder Scrolls Online, or ESO, is a massively multiplayer online role-playing game.

52
00:03:53,770 --> 00:03:56,152
MMORPG, or just MMO for short.

53
00:03:59,474 --> 00:04:03,037
ESO is a progression to online from the popular Elder Scrolls single-player

54
00:04:03,537 --> 00:04:05,358
RPG series from Bethesda Softworks,

55
00:04:06,159 --> 00:04:07,240
or Bethesda Game Studio.

56
00:04:08,020 --> 00:04:09,181
Elder Scrolls III Morrowind,

57
00:04:09,802 --> 00:04:11,343
Elder Scrolls IV Oblivion,

58
00:04:11,903 --> 00:04:13,465
and Elder Scrolls V Skyrim.

59
00:04:14,565 --> 00:04:16,547
Skyrim came out during ESO production.

60
00:04:17,719 --> 00:04:22,063
I started working on ESO in 2008 and the game shipped in

61
00:04:22,644 --> 00:04:33,894
2014 after numerous style and design revamps. ESO is an MMO.

62
00:04:34,615 --> 00:04:36,176
Massive is the operative word here.

63
00:04:37,159 --> 00:04:39,660
We had 10 playable races multiplied by two genders,

64
00:04:40,120 --> 00:04:41,801
mostly variations on human or elf,

65
00:04:42,441 --> 00:04:43,982
but we also had two beast races,

66
00:04:44,442 --> 00:04:46,663
the Khajiit, or cat-headed humanoids,

67
00:04:46,823 --> 00:04:49,024
and the Argonians, or lizard-headed humanoids.

68
00:04:50,064 --> 00:04:51,665
So we didn't have a huge variation

69
00:04:51,705 --> 00:04:52,986
in playable race anatomy,

70
00:04:54,046 --> 00:04:56,127
but we did need to expose to the players

71
00:04:56,707 --> 00:04:58,008
a system for customizing

72
00:04:58,808 --> 00:05:00,949
their playable characters' physiques and faces.

73
00:05:08,017 --> 00:05:13,241
We had a very ambitious 90, yes 9-0, unique monster rigs.

74
00:05:14,362 --> 00:05:17,385
Some of those rigs had as many as four or five mesh variations.

75
00:05:18,065 --> 00:05:20,687
These humanoid monster rigs were built on a custom rigging

76
00:05:20,728 --> 00:05:21,548
system and tool set.

77
00:05:22,909 --> 00:05:26,152
We had been established as a 3DS Max studio,

78
00:05:27,153 --> 00:05:29,355
but most of the animators came from a Maya background.

79
00:05:31,776 --> 00:05:34,038
Early on, we wanted to avoid using

80
00:05:34,098 --> 00:05:35,640
BiPED as an animation framework.

81
00:05:39,627 --> 00:05:42,930
So we built proprietary animation rigs and tools,

82
00:05:44,691 --> 00:05:47,294
which evolved over the first few years of the project.

83
00:05:50,036 --> 00:05:52,158
There were several major limitations from tech.

84
00:05:53,119 --> 00:05:58,243
We needed to render up to 200 players on screen

85
00:05:59,104 --> 00:06:00,485
in our player versus player battles.

86
00:06:01,566 --> 00:06:03,988
So the characters needed to be a single draw call each.

87
00:06:05,628 --> 00:06:18,562
For most of the project, DirectX 9 was our minimum spec, so every conceivable, potentially movable part on a humanoid character needed to be influenced by 77 bones or less, and there would be no LODs, either geometry or skeleton.

88
00:06:19,543 --> 00:06:22,586
Every deformable part had to be accounted for in the 77 bone limit.

89
00:06:24,521 --> 00:06:30,066
hair, loincloths, tail, shoulder armor, eyeballs, weapons, tassets, etc.

90
00:06:31,006 --> 00:06:36,831
Originally, monsters and NPCs were going to be limited to 56 bones,

91
00:06:37,872 --> 00:06:39,914
but that constraint was removed pretty early on,

92
00:06:40,434 --> 00:06:42,436
and everything was allowed up to the 77 bone limit.

93
00:06:45,839 --> 00:06:49,742
We were tied to 3ds Max 2010 for the entirety of production.

94
00:06:52,789 --> 00:06:55,650
3ds Max has no useful referencing for animation.

95
00:06:55,950 --> 00:06:57,851
There are two referencing systems in Max,

96
00:06:57,951 --> 00:06:59,912
but neither one is suitable for character animation.

97
00:07:00,872 --> 00:07:02,953
Xrefs either replace your animation controllers

98
00:07:02,993 --> 00:07:05,274
with an Xref controller,

99
00:07:05,534 --> 00:07:07,535
or merge in copies of source controllers

100
00:07:07,875 --> 00:07:10,136
with no updates and no hierarchy changes possible.

101
00:07:11,196 --> 00:07:13,157
Containers still seem like a work in progress,

102
00:07:13,917 --> 00:07:18,659
and in 2010, I don't think they've been updated much since.

103
00:07:18,719 --> 00:07:20,660
They were pretty awkward to use with animated characters.

104
00:07:24,734 --> 00:07:26,836
So we needed a system that embedded rigs

105
00:07:27,336 --> 00:07:28,337
in each max scene.

106
00:07:29,077 --> 00:07:30,538
And that could be updated via batch.

107
00:07:31,499 --> 00:07:33,480
There's a couple of major disadvantages with this.

108
00:07:34,461 --> 00:07:37,623
Custom animation scene setups get blown away

109
00:07:37,683 --> 00:07:38,584
when a rig is updated.

110
00:07:40,065 --> 00:07:43,427
And embedded rigs and scenes easily become out of sync

111
00:07:43,707 --> 00:07:46,149
with the latest master rig for a character.

112
00:07:46,169 --> 00:07:48,070
Oops.

113
00:07:52,041 --> 00:07:55,683
One animator, Dave Sanita, authored a rough animation rig before I was hired,

114
00:07:56,544 --> 00:07:57,885
which we used as a starting point.

115
00:08:03,068 --> 00:08:04,028
And that's what I just said.

116
00:08:05,849 --> 00:08:07,891
The 3ds Max scene that contained the rig

117
00:08:08,591 --> 00:08:10,952
already had acquired tons of cruft.

118
00:08:12,673 --> 00:08:16,256
Orphan custom attributes, unused materials and animation controllers.

119
00:08:17,235 --> 00:08:19,897
One thing Max is good at is accumulating this cruft,

120
00:08:20,738 --> 00:08:23,820
but it's bad at allowing you to clean it out once contaminated.

121
00:08:24,740 --> 00:08:27,582
So from the start, we knew we needed a way to build brand new rigs

122
00:08:27,642 --> 00:08:29,304
and fresh uncontaminated scenes.

123
00:08:33,566 --> 00:08:36,388
I started by just disassembling and scriptifying the rig.

124
00:08:37,349 --> 00:08:39,150
I broke down the animation rig into modules.

125
00:08:39,731 --> 00:08:42,312
Base, torso, legs, arms,

126
00:08:43,353 --> 00:08:45,875
hands, head, robe, and cape and tail.

127
00:08:50,456 --> 00:08:53,998
At the same time, I created a template skeleton guide rig,

128
00:08:54,779 --> 00:08:57,161
a skeleton with freely movable joint locations.

129
00:08:57,421 --> 00:08:59,442
The guide rig could be saved out to an XML file

130
00:09:00,163 --> 00:09:01,924
and rebuilt in the scene from the XML file.

131
00:09:02,965 --> 00:09:04,546
Each module in the animation rig

132
00:09:04,606 --> 00:09:06,847
then built along the guide rig locations.

133
00:09:12,331 --> 00:09:15,113
Once the initial generic humanoid template rig was set up,

134
00:09:15,893 --> 00:09:18,955
Rigging any humanoid was as simple as duplicating the template skeleton,

135
00:09:19,095 --> 00:09:20,296
adjusting joint locations,

136
00:09:20,736 --> 00:09:22,677
clicking the build rig button, and then skinning it.

137
00:09:26,780 --> 00:09:28,341
About half the animations in the game,

138
00:09:28,781 --> 00:09:30,842
about 5,000 out of about 10,000,

139
00:09:32,584 --> 00:09:34,285
were authored on the standard humanoid rig.

140
00:09:35,405 --> 00:09:38,007
For player characters, NPCs, and some humanoid monsters.

141
00:09:39,390 --> 00:09:43,052
On the surface, it's pretty easy to sit down and start animating with,

142
00:09:43,492 --> 00:09:46,034
but it has a deep array of options baked into the basic rig.

143
00:09:48,915 --> 00:09:51,336
Our spine only had two bones because of our low bone limit.

144
00:09:52,057 --> 00:09:56,199
It was FK only and had options for rotational space switching to the parent body or root.

145
00:09:57,279 --> 00:09:59,900
You rotate the abdomen and the chest could optionally follow it

146
00:10:00,060 --> 00:10:02,221
or maintain its orientation relative to the hips or the world.

147
00:10:03,451 --> 00:10:05,772
We also had switches on many controls in the rig,

148
00:10:05,812 --> 00:10:10,194
so the animators could animate using Max's TCB Quaternion controllers

149
00:10:10,234 --> 00:10:12,675
instead of the rig's default Euler XYZ controllers.

150
00:10:17,977 --> 00:10:19,578
The head defaults to an aim system,

151
00:10:19,738 --> 00:10:21,719
but it can be switched to animate in FK.

152
00:10:21,739 --> 00:10:25,641
Or it can be switched to animate in FK.

153
00:10:26,601 --> 00:10:30,463
In aim mode, we have an auto-neck that inherits about half of the head's orientation.

154
00:10:31,818 --> 00:10:38,465
The Autodeck has an X-Y switch for forward-facing necks, in the case of humanoids with extremely hunched shoulders or quadrupeds.

155
00:10:39,846 --> 00:10:45,592
The eyes have independent look-at target that can follow the head or world, and an FK override.

156
00:10:47,234 --> 00:10:53,060
The head aim and head and neck FK controls have space switching and Euler-Quaternion switching like the torso.

157
00:10:59,600 --> 00:11:02,442
Our legs are IK only, but that generally wasn't a problem.

158
00:11:03,243 --> 00:11:05,865
The foot control could be switched from root space to body space

159
00:11:05,925 --> 00:11:07,586
in the case the character needed to leave the ground.

160
00:11:08,607 --> 00:11:11,269
We have a hip fudge control to tweak the femur and hip joint.

161
00:11:13,390 --> 00:11:15,111
The foot has a bunch of driven attributes.

162
00:11:15,792 --> 00:11:18,854
Roll at ball, heel, and toe tip, a twist with a sliding pivot,

163
00:11:19,034 --> 00:11:19,895
and a few different tilts.

164
00:11:22,877 --> 00:11:24,578
The arms were built with fake FK.

165
00:11:25,219 --> 00:11:26,980
The bones thought they were in IK at all times.

166
00:11:27,728 --> 00:11:31,110
But the FK hand control was an IK control that was a child of the forearm control,

167
00:11:31,531 --> 00:11:33,312
as was the elbow pull vector control.

168
00:11:34,333 --> 00:11:37,875
When we switched to IK, the bones constraints would blend between different sets of controls.

169
00:11:40,637 --> 00:11:45,381
There's an IK-FK snap built-in custom attribute on the wrist config node.

170
00:11:46,481 --> 00:11:49,944
Like the other modules, the arm controls have space switching and Euler-Quaternion switching.

171
00:11:51,957 --> 00:11:54,158
The hands have two layers of finger attributes,

172
00:11:54,718 --> 00:11:55,819
a set of meta properties,

173
00:11:56,179 --> 00:11:58,040
and a set of finer per-digit properties.

174
00:11:58,700 --> 00:12:01,001
All the keyable channels lived on the config bar,

175
00:12:01,942 --> 00:12:05,223
but had some two-way wires so they could be posed

176
00:12:05,263 --> 00:12:06,143
in the viewport as well.

177
00:12:07,084 --> 00:12:08,985
We used Paul Neill's pen attribute holder

178
00:12:09,025 --> 00:12:09,885
on the config bar.

179
00:12:09,965 --> 00:12:11,506
It made it easy to bake save poses

180
00:12:12,326 --> 00:12:13,347
into the rig at build time.

181
00:12:16,528 --> 00:12:17,548
For most of the project,

182
00:12:17,949 --> 00:12:21,190
our player characters were going to be able to equip capes.

183
00:12:22,055 --> 00:12:23,556
so our rigs had a cape module.

184
00:12:24,516 --> 00:12:28,358
The tails for the beast races were originally going to just follow the cape animations.

185
00:12:29,359 --> 00:12:31,320
Then we added mutually exclusive tails,

186
00:12:31,981 --> 00:12:36,263
so a character could either have something skinned to the cape bones or the tail bones,

187
00:12:36,383 --> 00:12:37,344
but not at the same time.

188
00:12:38,745 --> 00:12:43,207
With the capes unlocked from the tails, we still couldn't move the capes very much

189
00:12:44,368 --> 00:12:47,129
because we still had to support weapon docking on the character's backs.

190
00:12:48,677 --> 00:12:51,599
Eventually we cut capes to reclaim some texture atlas space

191
00:12:52,099 --> 00:12:54,260
for higher resolution weapons and first-person camera view.

192
00:12:56,121 --> 00:12:59,522
But our tails are still driven by phantom cape controls in the rig.

193
00:13:00,362 --> 00:13:03,904
They have some space switching to follow

194
00:13:03,944 --> 00:13:07,205
the back or pelvis depending on whether it's a cape or a tail.

195
00:13:07,966 --> 00:13:09,426
There's also an IK mode for the cape,

196
00:13:09,567 --> 00:13:12,008
but I don't think it ever got any use in the player animations.

197
00:13:13,051 --> 00:13:15,893
One feature that did get a lot of use is the procedural wave settings

198
00:13:16,213 --> 00:13:18,295
to drive a looping sine wave-like motion

199
00:13:19,235 --> 00:13:20,096
with a couple of sliders.

200
00:13:25,240 --> 00:13:27,041
As any self-respecting RPG does,

201
00:13:28,422 --> 00:13:29,683
we have robes and dresses.

202
00:13:31,344 --> 00:13:33,425
Unfortunately, we have no game-side simulation.

203
00:13:34,626 --> 00:13:37,848
So, and we only had four bones allocated to the robe.

204
00:13:39,790 --> 00:13:42,231
The animators basically just wanted it to stay out of their way.

205
00:13:43,470 --> 00:13:47,032
So a large majority of the robe animation was driven automatically by the leg motion.

206
00:13:47,993 --> 00:13:52,335
Then the animators could clean up any outstanding issues with the FK controls that sat on top of the automation.

207
00:13:53,456 --> 00:13:54,857
This is how we ended up driving the robe.

208
00:13:56,237 --> 00:13:57,738
One bone in the front between the shins,

209
00:13:58,459 --> 00:13:59,959
one bone in the back between the calves,

210
00:14:00,480 --> 00:14:02,221
and one on each side of the lower legs.

211
00:14:03,381 --> 00:14:06,363
The front and back bones maintained a position between the lower legs,

212
00:14:07,123 --> 00:14:09,105
oriented to the plane between the lower legs,

213
00:14:10,125 --> 00:14:12,506
and forced outward when necessary to preserve volume.

214
00:14:13,755 --> 00:14:17,576
The sidebones then slid around the calf centers to maintain volume there.

215
00:14:18,616 --> 00:14:21,617
The actual lower legs themselves weren't weighted to the robe geometry.

216
00:14:27,079 --> 00:14:30,520
The weapon controls can be docked at several locations on the characters' back and hips,

217
00:14:30,880 --> 00:14:34,361
and there's an IK system built in to plant the weapons on the ground.

218
00:14:37,262 --> 00:14:39,423
But humanoids weren't the only characters in our game.

219
00:14:43,174 --> 00:14:46,938
The Watcher is a take on the classic fantasy beholder character,

220
00:14:47,398 --> 00:14:48,499
a giant flying eyeball.

221
00:14:49,580 --> 00:14:52,443
But the Watcher's most obvious feature are its 15 arms,

222
00:14:53,343 --> 00:14:55,425
three main arms with leaf-like mittens,

223
00:14:55,906 --> 00:14:59,569
four mid-sized tentacles, and eight smaller minor tentacles.

224
00:15:00,910 --> 00:15:04,654
The main arms had independent controls for FK, IK,

225
00:15:04,734 --> 00:15:08,137
and could also be driven procedurally with the same system we used on the humanoid tails.

226
00:15:09,499 --> 00:15:12,922
The middle tentacles were driven mainly by the ambient procedural motion

227
00:15:13,002 --> 00:15:15,905
with an FK layer on top to refine the motion and fix collisions.

228
00:15:17,026 --> 00:15:20,790
The eight minor tentacles were all driven by a single set of procedural settings

229
00:15:20,890 --> 00:15:24,833
with a phase setting to keep them all different shapes at any given frame.

230
00:15:26,355 --> 00:15:30,098
And of course, like the mid-sized tentacle, the minor ones had an FK tweak layer on top as well.

231
00:15:38,642 --> 00:15:41,265
We had a snake module that we used for various creatures.

232
00:15:42,205 --> 00:15:43,446
A plain old snake critter,

233
00:15:44,467 --> 00:15:46,549
a giant snake monster, like pictured,

234
00:15:46,629 --> 00:15:48,811
that had a torso section that always stayed vertical,

235
00:15:49,792 --> 00:15:52,935
an ice wraith that looked like a flying snake skeleton

236
00:15:52,975 --> 00:15:54,316
that sort of swam through the air,

237
00:15:55,357 --> 00:15:57,178
and two different naga-like monsters,

238
00:15:57,399 --> 00:16:00,721
the two-armed lamia and the four-armed harvester.

239
00:16:02,163 --> 00:16:03,304
It took a lot of iteration

240
00:16:03,744 --> 00:16:05,626
to iron out the kinks in the snake rig.

241
00:16:06,800 --> 00:16:08,662
There's a spline IK underneath everything,

242
00:16:09,142 --> 00:16:12,384
but Max's spline IK just has no consistency for up vectors,

243
00:16:12,444 --> 00:16:16,627
so I only used the position from the spline IK

244
00:16:16,647 --> 00:16:18,848
to drive the, and drove the orientation

245
00:16:18,868 --> 00:16:20,149
with another layer of helper nodes.

246
00:16:21,190 --> 00:16:22,771
But it was easy to flip those as well

247
00:16:22,831 --> 00:16:25,393
when the look at targets turn 90 degrees on any axis.

248
00:16:25,993 --> 00:16:27,634
So we ended up subdividing the chain

249
00:16:27,674 --> 00:16:29,356
by adding more point helpers constrained

250
00:16:29,396 --> 00:16:31,517
between the bones on the spline IK,

251
00:16:32,498 --> 00:16:35,239
so that we could twist the controls at least 360 degrees

252
00:16:35,280 --> 00:16:36,440
before the bones started flipping.

253
00:16:40,722 --> 00:16:43,263
When our second winged demon type character came up,

254
00:16:44,084 --> 00:16:46,865
the animator working on it showed me a God of War III

255
00:16:46,965 --> 00:16:48,465
behind-the-scenes video on YouTube.

256
00:16:49,226 --> 00:16:51,947
The rig featured in the video was for a manticore.

257
00:16:52,667 --> 00:16:55,688
The wings on the creature had a single master billowing control

258
00:16:55,728 --> 00:16:57,509
that drove the shape of the wing membrane.

259
00:16:58,889 --> 00:17:01,510
I built something similar for our wing rig,

260
00:17:02,271 --> 00:17:05,172
but the wings on our gargoyle and grievous twilight characters

261
00:17:05,412 --> 00:17:06,992
only had about 40 polygons,

262
00:17:07,693 --> 00:17:09,573
so the results weren't as awesome as they could have been.

263
00:17:13,220 --> 00:17:15,442
We ended up with two different kinds of quadruped legs.

264
00:17:15,803 --> 00:17:17,744
Predators, like bears, wolves, and cats,

265
00:17:17,904 --> 00:17:20,106
have forelegs with pretty short hand segments.

266
00:17:20,727 --> 00:17:23,789
The majority of the limb is humerus and forearm.

267
00:17:24,971 --> 00:17:27,573
The module we used for those had an IK chain

268
00:17:27,613 --> 00:17:30,435
from shoulder to wrist, similar to a biped.

269
00:17:31,776 --> 00:17:34,138
Hooved animals tend to have much longer carpal or tarsal

270
00:17:34,158 --> 00:17:36,320
segments, and their knees sometimes

271
00:17:36,340 --> 00:17:38,222
don't even come below the bottom of their torsos.

272
00:17:39,765 --> 00:17:43,107
Three or four bone IK chains are unpredictable, in Max at least,

273
00:17:43,608 --> 00:17:45,629
so the solution I used for these kinds of limbs

274
00:17:45,929 --> 00:17:48,732
incorporated two bone IK chains into a larger whole.

275
00:17:50,413 --> 00:17:52,775
The module for those limbs, and some predator hind limbs,

276
00:17:53,015 --> 00:17:54,736
had an IK chain that started at the knee

277
00:17:55,277 --> 00:17:57,078
and ended between the carpals and phalanges.

278
00:17:58,279 --> 00:18:01,001
The wrist or ankle was in the middle of the chain.

279
00:18:01,902 --> 00:18:05,184
The thigh then had a toggleable aim

280
00:18:05,645 --> 00:18:07,226
toward the IK control on the ground.

281
00:18:08,509 --> 00:18:11,471
There was a knee tweak control to get some specific shapes

282
00:18:11,731 --> 00:18:12,931
and stretch the leg a little bit,

283
00:18:13,472 --> 00:18:14,992
which the animators tended to abuse.

284
00:18:20,855 --> 00:18:23,396
Quadruped torsos could switch between IK and FK

285
00:18:23,416 --> 00:18:25,958
depending on the shapes the animators wanted to achieve

286
00:18:26,138 --> 00:18:26,858
in an animation.

287
00:18:27,879 --> 00:18:30,480
The body root defaulted to a position near the center of mass

288
00:18:32,121 --> 00:18:34,402
but could slide up and down the length of the torso

289
00:18:34,542 --> 00:18:36,443
so it could pivot anywhere from the neck to the tail.

290
00:18:41,952 --> 00:18:44,874
The rigs themselves are the products of a suite of tools

291
00:18:45,254 --> 00:18:46,775
authored to create and edit the rigs.

292
00:18:47,615 --> 00:18:49,096
The pipeline looks something like this.

293
00:18:52,798 --> 00:18:55,739
A master XML metadata file that contains the locations

294
00:18:55,799 --> 00:18:58,480
of each character's specific data relative to itself.

295
00:19:00,021 --> 00:19:01,922
The master file is called rigbuild.xml.

296
00:19:02,462 --> 00:19:04,303
Each character had about 10 XML files

297
00:19:04,483 --> 00:19:07,005
and one clean mesh scene, just the mesh, no cruft.

298
00:19:08,288 --> 00:19:12,289
When we build a rig, it looks up the character in the rig build metadata file

299
00:19:12,809 --> 00:19:15,210
and finds the character's rig config file,

300
00:19:15,510 --> 00:19:17,711
which tells us what modules to build for that character.

301
00:19:18,211 --> 00:19:20,371
For instance, we'll build the guide skeleton first.

302
00:19:20,892 --> 00:19:23,412
The config file will just say, yes, build a guide skeleton.

303
00:19:26,193 --> 00:19:29,454
The scripts look up the location of the guide skeleton XML in the rig build meta file

304
00:19:29,734 --> 00:19:33,596
and then runs the guide skeleton XML through some scripts that build the skeleton in the scene.

305
00:19:35,436 --> 00:19:36,937
Then we go back to the config file.

306
00:19:41,176 --> 00:19:43,437
to see what other modules to build for this rig.

307
00:19:44,578 --> 00:19:46,179
Look up the location of the XML data

308
00:19:46,319 --> 00:19:47,339
for each relevant module

309
00:19:47,679 --> 00:19:49,700
and build the module from the XML data.

310
00:19:54,383 --> 00:19:56,724
After initially setting up and building a rig once,

311
00:19:57,024 --> 00:19:58,945
a rig could be constructed from these few components

312
00:19:58,985 --> 00:19:59,805
in just a few seconds.

313
00:20:03,087 --> 00:20:04,768
This is the tool we use to build the rigs.

314
00:20:05,548 --> 00:20:06,669
The character list is built from...

315
00:20:07,433 --> 00:20:09,494
from the rigbuild.xml file,

316
00:20:09,775 --> 00:20:11,155
and when you select a character,

317
00:20:11,195 --> 00:20:13,436
it loads character-specific rigconfig file

318
00:20:13,456 --> 00:20:16,598
that can describe what to build for this character,

319
00:20:16,638 --> 00:20:17,418
which modules to build.

320
00:20:18,419 --> 00:20:20,660
The left pane is a list of rig modules in our library,

321
00:20:21,400 --> 00:20:23,721
and the right pane is a view of selected characters,

322
00:20:23,781 --> 00:20:24,721
rigconfig.xml,

323
00:20:26,162 --> 00:20:27,443
telling the tool which modules to build.

324
00:20:28,285 --> 00:20:33,108
When we click build, the tool collects a list of modules for this character, to build for this character,

325
00:20:33,488 --> 00:20:39,012
and sends the list to a MaxRip function that builds each module in order along the guide skeleton.

326
00:20:39,412 --> 00:20:41,253
And when it's done, it deletes the guide skeleton.

327
00:20:44,915 --> 00:20:50,599
This is a simple MaxUI floater for editing the guide skeleton, also known as the proportion skeleton.

328
00:20:51,913 --> 00:20:56,577
It builds and saves the guide skeleton and has tools for mirroring locator positions,

329
00:20:56,877 --> 00:20:59,880
aligning locators, and globally scaling the rig via translation.

330
00:21:01,061 --> 00:21:04,404
It has some editing functionality, but we always just added joints in the text editor,

331
00:21:05,264 --> 00:21:07,306
position the joints in max, and re-save the XML.

332
00:21:08,207 --> 00:21:13,812
It also builds and saves the mesh skeleton to verify hierarchy and for adding additional export data.

333
00:21:19,852 --> 00:21:24,613
So we lay out the skeleton, set up the rig, code additional bits if needed, and build the rig.

334
00:21:25,273 --> 00:21:28,854
Some nodes get automatically placed in layers and sets, but many don't.

335
00:21:29,574 --> 00:21:32,135
So we sort all the nodes into nicely named layers,

336
00:21:33,155 --> 00:21:35,076
sort controls into various selection sets,

337
00:21:36,616 --> 00:21:40,117
and adjust the size and location of any controls that are hard to see.

338
00:21:41,538 --> 00:21:44,859
Now we want to save all that sorting and cleanup so we don't have to do it ever again.

339
00:21:46,019 --> 00:21:48,360
That's where this tool comes in, the Unbuild Rig tool.

340
00:21:49,355 --> 00:21:53,337
It shows another view of the character's XML files from the rigbuild.xml meta file.

341
00:21:53,957 --> 00:21:57,758
It has Perforce integration so we can check out the files, click save, and resubmit them.

342
00:22:01,620 --> 00:22:04,020
Now the rig is built and we need to skin the mesh to follow it.

343
00:22:04,501 --> 00:22:06,481
Some monsters only have a single mesh and that's it.

344
00:22:07,181 --> 00:22:08,522
Some have multiple mesh variants.

345
00:22:09,182 --> 00:22:12,043
And our dynamic characters, our playable races, and other humanoids,

346
00:22:12,823 --> 00:22:14,724
they're a whole other level of crazy.

347
00:22:17,415 --> 00:22:18,836
The main interface for the skin weights

348
00:22:20,036 --> 00:22:21,836
here shows visible geometry in the scene,

349
00:22:22,616 --> 00:22:24,737
and will tell you if each mesh has a skin modifier

350
00:22:25,277 --> 00:22:27,717
and shows you each weight file's perforce status.

351
00:22:28,617 --> 00:22:30,678
After we've skinned a mesh, this panel lets us save

352
00:22:31,138 --> 00:22:33,878
the skin out to an XML file with weights per vertex.

353
00:22:34,678 --> 00:22:35,839
It has perforce integration,

354
00:22:37,239 --> 00:22:39,619
and we can sync edit, add, submit, and revert the weights

355
00:22:39,679 --> 00:22:41,320
and XML files right from the panel.

356
00:22:42,360 --> 00:22:43,640
When we rebuild the rig,

357
00:22:43,700 --> 00:22:45,160
assuming the mesh doesn't get updated,

358
00:22:47,298 --> 00:22:49,522
the saved weights file will get applied to the mesh.

359
00:22:50,183 --> 00:22:54,911
And that only works if the mesh's vertex order or vertex count don't change.

360
00:22:58,708 --> 00:23:04,251
However, the weight file also contains enough vertex and face info to rebuild a facsimile of the original mesh.

361
00:23:04,891 --> 00:23:10,814
When the mesh topology has to change, we use another mode in this tool to get the old weights onto the new geometry.

362
00:23:11,815 --> 00:23:15,557
The tool rebuilds the original mesh from the saved.xml.skin.weights file

363
00:23:16,077 --> 00:23:18,858
and loads the per-vertex weights onto the new temporary mesh.

364
00:23:19,558 --> 00:23:22,099
It applies Max's skin wrap modifier to the target mesh,

365
00:23:22,359 --> 00:23:24,960
interpolates the weights from the source to the temporary mesh,

366
00:23:25,400 --> 00:23:27,721
and then converts the skin wrap to a skin modifier.

367
00:23:28,341 --> 00:23:29,702
Then it deletes the temporary mesh.

368
00:23:30,122 --> 00:23:32,843
Now we can clean up anything that didn't transfer from the skin wrap well

369
00:23:33,023 --> 00:23:35,604
and resave the XML with the correct per-vertex weights.

370
00:23:35,624 --> 00:23:42,866
That was what that slide was.

371
00:23:44,912 --> 00:23:49,175
Like most games, we have a 4 influence per vertex limit on skin weights.

372
00:23:50,036 --> 00:23:53,058
I don't like to work with the skin's preset to a 4 influence limit.

373
00:23:53,438 --> 00:23:57,621
I leave it at the 20 influence default because I don't want Max to automatically remove influences

374
00:23:57,662 --> 00:23:58,442
while I'm working.

375
00:23:59,363 --> 00:24:03,726
So I have a weight cleaner utility which removes weights below a threshold and removes the

376
00:24:03,766 --> 00:24:05,207
smallest influences above the limit of 4.

377
00:24:09,992 --> 00:24:14,735
Our dynamic character parts system allows players to wear a huge assortment of mixed armor sets.

378
00:24:15,616 --> 00:24:17,857
So the geometry is broken up into body parts.

379
00:24:18,778 --> 00:24:24,082
Eight for the basic body, that's torso, heads, upper arms, lower arms, hands, upper legs, lower legs, and feet.

380
00:24:25,763 --> 00:24:27,725
Another half dozen deformable clothing bits.

381
00:24:28,525 --> 00:24:31,488
Each of those had about a dozen variations per gender at launch.

382
00:24:32,468 --> 00:24:35,711
But we've had a mandate since launch to add more silhouette variation in the armor,

383
00:24:35,731 --> 00:24:38,373
so we're up to about 30 variants on some body sections now.

384
00:24:39,250 --> 00:24:44,612
On top of that, we have a metric ton of hair and adornment variations and dozens of rigid armor attachments.

385
00:24:45,833 --> 00:24:49,515
For all of this to work, we needed to synchronize the seams between all of these parts.

386
00:24:51,036 --> 00:24:52,916
Skin weights and vertex normals.

387
00:24:53,977 --> 00:25:00,660
The normals needed to be contiguous for shading purposes, and Max has poor support for vertex normals in general.

388
00:25:02,582 --> 00:25:07,283
The base editable poly doesn't have any support to view or edit vertex normals.

389
00:25:07,843 --> 00:25:11,365
Max traditionally derived vertex normals from its face smoothing groups.

390
00:25:12,425 --> 00:25:15,246
The editable poly does support vertex normals though,

391
00:25:15,806 --> 00:25:18,387
but you need to edit them in an edit normal modifier,

392
00:25:19,408 --> 00:25:20,508
and then collapse it down.

393
00:25:21,928 --> 00:25:25,490
So our copy normals tool needed to apply edit normal modifiers

394
00:25:25,550 --> 00:25:28,811
to the source and target meshes, copy the normals, and then collapse them down.

395
00:25:31,917 --> 00:25:36,360
Back to weights, the dynamic character meshes actually each have two sets of weights.

396
00:25:37,141 --> 00:25:40,904
The animation skeleton bone weights, and a second set of weights for customizing

397
00:25:41,284 --> 00:25:43,146
characters' body shape and facial features.

398
00:25:44,527 --> 00:25:47,149
Both sets had to have their seams match up exactly.

399
00:25:47,389 --> 00:25:50,992
Every forearm had to have the same exact weights where it meets the upper arms.

400
00:25:51,553 --> 00:25:55,256
And all the upper arms had to have the same exact weights at the forearms at the same seam.

401
00:25:56,197 --> 00:25:56,877
We created a...

402
00:25:56,897 --> 00:25:58,899
Discman.

403
00:26:00,695 --> 00:26:04,617
templates of seam locations to apply weights to multiple targets at once.

404
00:26:08,280 --> 00:26:12,602
Every studio I work at, I end up creating a variation of this tool to do batches in Max or Maya scenes.

405
00:26:13,623 --> 00:26:16,745
It takes a list of files, a chunk of Max script code to run on each file,

406
00:26:17,065 --> 00:26:19,167
with an optional resave after the script executes.

407
00:26:19,907 --> 00:26:24,050
It runs everything through a try-catch construct to avoid batches ending prematurely,

408
00:26:24,150 --> 00:26:27,772
and saves out a log file with success or fail results to review after long batches.

409
00:26:31,142 --> 00:26:33,343
We ended up doing a lot with Max's custom attributes,

410
00:26:33,463 --> 00:26:35,844
but Max doesn't provide much for viewing or editing

411
00:26:35,944 --> 00:26:38,665
the contents of a custom attribute's parameters.

412
00:26:39,665 --> 00:26:42,807
This tool recurses through each object and modifiers

413
00:26:43,587 --> 00:26:45,008
and lets us view or edit the data.

414
00:26:45,568 --> 00:26:47,549
We can directly enter values for simple types

415
00:26:48,489 --> 00:26:50,970
or elements of complex types like vectors or matrices

416
00:26:52,011 --> 00:26:53,831
and pick objects for Max object tabs,

417
00:26:53,951 --> 00:26:56,392
and it automatically inserts node transform monitors

418
00:26:56,432 --> 00:26:57,233
for weak referencing.

419
00:26:57,873 --> 00:27:00,054
It can grow or shrink parameter tabs, too.

420
00:27:03,801 --> 00:27:06,542
We also have a suite of tools that face the artists and animators.

421
00:27:10,124 --> 00:27:16,988
The pipeline started simple, and there was never time or reason to expand it much further later.

422
00:27:18,388 --> 00:27:22,370
The users would just add a startup script path in 3D Studio Max Preferences.

423
00:27:23,571 --> 00:27:29,174
It was a single startup script in the target path, and it built a tools menu in Max at startup,

424
00:27:29,214 --> 00:27:30,375
and that was about all there was to it.

425
00:27:31,415 --> 00:27:32,876
The tools all ran from a network path.

426
00:27:33,811 --> 00:27:35,892
I would develop them in a source-controlled local folder

427
00:27:35,912 --> 00:27:37,774
and push them to a user-run network path

428
00:27:37,834 --> 00:27:38,454
when they were ready.

429
00:27:39,615 --> 00:27:41,216
The tool set didn't have any DLLs

430
00:27:41,276 --> 00:27:42,377
or other binary components,

431
00:27:42,657 --> 00:27:45,199
so we never had any network access conflicts.

432
00:27:45,919 --> 00:27:48,000
The coolest thing was that I could fix bugs

433
00:27:48,120 --> 00:27:49,701
and update scripts on the network,

434
00:27:50,362 --> 00:27:52,603
and then the artist could rerun the tools from the menu

435
00:27:52,623 --> 00:27:54,905
and see the updates without even needing to restart Max.

436
00:27:58,888 --> 00:28:00,869
The animators use this tool daily,

437
00:28:01,369 --> 00:28:02,630
the Animation Transfer Panel.

438
00:28:03,403 --> 00:28:06,685
It allows the animators to update rigs in single scenes or multiple scenes

439
00:28:07,626 --> 00:28:09,547
since our rigs have to live in each Max scene.

440
00:28:10,627 --> 00:28:11,247
And it wraps up...

441
00:28:11,848 --> 00:28:16,290
it wraps the functionality of Max's XAF or XML animation format

442
00:28:16,730 --> 00:28:20,132
but with additional custom data that this tool packed into the XAF files.

443
00:28:21,112 --> 00:28:23,113
Perforce status is integrated into the UI

444
00:28:23,153 --> 00:28:26,715
so animators can see what's up to date or who has what file checked out at a glance

445
00:28:27,235 --> 00:28:29,336
and they can sync and check out Max and XAF files.

446
00:28:34,062 --> 00:28:38,085
The rigs have data-driven display panels for toggling visibility of controls in the rig.

447
00:28:38,725 --> 00:28:41,467
They were designed to take up as little screen real estate as possible.

448
00:28:42,148 --> 00:28:46,351
It's authored as an XML file, and that file is encoded and stored in the rig when the rig is built.

449
00:28:47,452 --> 00:28:50,774
The panel interprets the encoded data and it constructs the panel on demand.

450
00:28:51,694 --> 00:28:58,179
The same tech is used for other panels for visibility of mesh body parts and for trajectories.

451
00:29:00,691 --> 00:29:03,735
The animators use a pose tool to save, load, and mirror single poses.

452
00:29:04,696 --> 00:29:06,419
The poses are saved in an XML file.

453
00:29:07,580 --> 00:29:12,767
The tool has options for working in world space or local space, whole character selection,

454
00:29:12,987 --> 00:29:16,312
and has per-force integration to show the status of the pose files in sync, edit, and

455
00:29:16,332 --> 00:29:17,513
submit them into the depot.

456
00:29:21,262 --> 00:29:23,284
3D Studio Max has animation layers.

457
00:29:23,344 --> 00:29:25,526
They were introduced around Max 2009.

458
00:29:26,627 --> 00:29:28,349
But for my first six months on the project,

459
00:29:28,389 --> 00:29:30,431
we were working in Max release nine,

460
00:29:30,451 --> 00:29:32,012
which predated the animation layers.

461
00:29:33,277 --> 00:29:38,258
We used Max's freeze transform system to create zero default values on controls.

462
00:29:38,458 --> 00:29:40,979
It's a macro script included with Max for many years.

463
00:29:41,619 --> 00:29:44,320
It creates a list controller on the position and rotation tracks

464
00:29:45,100 --> 00:29:48,061
and stuffs the current transform into controllers at the first index

465
00:29:49,121 --> 00:29:50,421
of the list labeled frozen

466
00:29:50,962 --> 00:29:53,782
and then creates new controllers at the second index labeled zero

467
00:29:54,523 --> 00:29:55,483
and sets it as default.

468
00:29:56,223 --> 00:29:58,944
In Maya, I would just build up a hierarchy of empty transforms.

469
00:29:59,944 --> 00:30:03,988
However, our tools made assumptions about this frozen transform list controller paradigm.

470
00:30:04,508 --> 00:30:12,015
When animators needed to use Max's animation layers,

471
00:30:12,776 --> 00:30:16,139
it would collapse everything, blow away the frozen transform list controllers,

472
00:30:16,179 --> 00:30:17,941
and break our rigs and tools.

473
00:30:18,822 --> 00:30:20,804
So we brewed up our own version of the animation layers

474
00:30:20,844 --> 00:30:23,286
that respected the freeze transform list controllers.

475
00:30:27,327 --> 00:30:32,130
The animation layer system kept track of additional list controllers and layer membership via an XML file

476
00:30:32,691 --> 00:30:34,952
embedded in a single string property on a custom attribute.

477
00:30:35,833 --> 00:30:41,156
Collapsing the layers worked per-key for keyable tracks and distributed the values as one would expect,

478
00:30:42,017 --> 00:30:47,780
but since they were just more list controllers, animators could replace default layer controllers with non-keyable controllers,

479
00:30:47,941 --> 00:30:52,523
a noise controller for jitter or position constraint to fake a hand holding a character's head.

480
00:30:53,424 --> 00:30:56,246
Then the animator could bake the results down into keys if they wished.

481
00:31:00,774 --> 00:31:04,799
The animation transfer panel needed to peek into XAF files during load,

482
00:31:05,200 --> 00:31:10,748
read some custom data from the file to see if there were animation layers in the saved XAF.

483
00:31:11,108 --> 00:31:14,353
If there were, it would need to build out the additional animation layer controllers

484
00:31:14,413 --> 00:31:16,195
before loading the animation data into the rig.

485
00:31:20,011 --> 00:31:23,494
The Dynamics panel was originally created with the intent of breaking characters

486
00:31:24,214 --> 00:31:26,916
with 3ds Max's Havok Reactor Dynamics system.

487
00:31:27,477 --> 00:31:29,278
It allowed the animators to group rig bones

488
00:31:29,638 --> 00:31:32,661
into separately definable sets of animatable controls

489
00:31:33,221 --> 00:31:34,702
to keyframe independent of hierarchy,

490
00:31:35,102 --> 00:31:37,164
and then blend to and from the normal rig behavior.

491
00:31:37,945 --> 00:31:39,946
Ultimately, it did see some creative uses,

492
00:31:40,126 --> 00:31:42,808
but mainly for keyframing instead of reactor dynamics.

493
00:31:47,118 --> 00:31:55,163
Our tools weren't tied to specific object names, but they were tied to specific set and layer names, which were shared across all rigs.

494
00:31:56,784 --> 00:32:02,267
If you merge in objects from another file in 3DS Max, layers with the same names get combined,

495
00:32:03,508 --> 00:32:05,989
and selection sets don't merge at all.

496
00:32:08,931 --> 00:32:14,274
The namespace tool let animators define a Maya-like namespace for up to four characters in a single scene.

497
00:32:15,519 --> 00:32:17,700
It switches a character out of namespace mode

498
00:32:17,740 --> 00:32:19,502
so that it can perform tool operations

499
00:32:19,562 --> 00:32:21,243
like load or save animation or export.

500
00:32:22,203 --> 00:32:24,405
It was a little clumsy, but it was a quick solution

501
00:32:24,465 --> 00:32:28,487
around systemic problems in the tools and rigs

502
00:32:28,527 --> 00:32:29,788
that would take too long to fix.

503
00:32:33,610 --> 00:32:35,191
3ds Max's built-in ghosting

504
00:32:35,591 --> 00:32:37,733
only ghosts the currently selected mesh.

505
00:32:39,113 --> 00:32:40,494
And the options are only accessible

506
00:32:40,554 --> 00:32:41,755
in a tab in the preferences.

507
00:32:42,766 --> 00:32:45,007
The ghosting tool allows for color and alpha settings,

508
00:32:45,247 --> 00:32:47,888
interval settings, forward or backward ghosting,

509
00:32:48,228 --> 00:32:51,469
and of course, any specified mesh.

510
00:32:51,689 --> 00:32:54,830
It uses 3DS Max's point cache modifier,

511
00:32:54,870 --> 00:32:59,132
which is surprisingly responsive with 5 to 10 meshes.

512
00:33:05,854 --> 00:33:07,995
I mentioned earlier about our built-in parallel Euler

513
00:33:08,015 --> 00:33:10,276
and TCB rotation tracks.

514
00:33:11,348 --> 00:33:12,448
on many of our rig controls.

515
00:33:13,589 --> 00:33:16,530
This is a tool to convert the Euler to Quaternion and vice versa.

516
00:33:17,751 --> 00:33:19,092
Either 1-to-1 key conversion

517
00:33:19,732 --> 00:33:20,993
or bake out a key per frame.

518
00:33:21,653 --> 00:33:25,455
If an animator found weird, wobbly Euler gimbling in something they've already animated,

519
00:33:25,595 --> 00:33:29,016
it's pretty easy to convert a time segment to TCB keys and smooth out their arcs.

520
00:33:34,930 --> 00:33:37,912
Our character team had a subgroup devoted to character customization.

521
00:33:38,732 --> 00:33:42,094
One of the character artists gave me some specifications for a rig

522
00:33:42,474 --> 00:33:45,596
to allow the other customization artists to sculpt body and face shapes.

523
00:33:46,357 --> 00:33:47,777
I worked the rig into our pipeline.

524
00:33:48,698 --> 00:33:50,399
It gets built just like an animation rig,

525
00:33:50,459 --> 00:33:54,321
even though it has a different set of requirements and a different user base.

526
00:33:55,462 --> 00:33:57,443
Our character artists are good at what they do,

527
00:33:58,764 --> 00:34:01,386
but on average they're a little more tech-phobic than the animators.

528
00:34:02,310 --> 00:34:04,411
So their interface for the customization rig

529
00:34:04,451 --> 00:34:06,151
tries to support them with a ton of callbacks

530
00:34:06,171 --> 00:34:08,292
to make sure they're working in the correct pose in the rig

531
00:34:08,652 --> 00:34:10,772
and make sure they're not editing poses with auto key off.

532
00:34:11,933 --> 00:34:15,674
The customization artists work on the rig in local Mac scenes

533
00:34:16,014 --> 00:34:19,055
and save out single poses to be merged

534
00:34:19,095 --> 00:34:20,455
into a master customization rig.

535
00:34:22,195 --> 00:34:24,716
The UI synced scene control selection

536
00:34:24,736 --> 00:34:26,416
with labeled buttons and shape buttons.

537
00:34:27,157 --> 00:34:29,157
Similar to the animation rig display panel,

538
00:34:29,317 --> 00:34:30,858
the layout is authored in an XML file.

539
00:34:32,388 --> 00:34:33,909
encoded into the rig at build time

540
00:34:34,009 --> 00:34:35,970
and then rendered by the panel when it's opened.

541
00:34:39,793 --> 00:34:42,654
We made extensive use of 3ds Max's custom attributes

542
00:34:42,694 --> 00:34:43,575
in the animation rig.

543
00:34:44,295 --> 00:34:45,856
At its simplest, they're Maya-like,

544
00:34:46,537 --> 00:34:47,998
animatable, user-defined properties

545
00:34:48,038 --> 00:34:50,059
stored in a parameter block.

546
00:34:50,879 --> 00:34:53,061
Max then lets you embed user interfaces

547
00:34:53,121 --> 00:34:54,982
to interact with these user-defined properties.

548
00:34:55,842 --> 00:35:00,467
But it's all Mac script, so you can embed some pretty complicated functionality into these custom attributes.

549
00:35:01,148 --> 00:35:05,052
And they live in the rig, so that makes them extremely portable.

550
00:35:10,818 --> 00:35:12,700
I told you this was going to be a postmortem.

551
00:35:14,502 --> 00:35:17,765
We made a number of decisions during the course of the production that worked out pretty well.

552
00:35:23,827 --> 00:35:26,008
The rigging system was, for the most part, data-driven.

553
00:35:26,729 --> 00:35:28,270
We used XML as our data format.

554
00:35:28,730 --> 00:35:31,191
3ds Max's integration of .NET made this easy.

555
00:35:31,952 --> 00:35:33,933
Everyone has system.xml on their computers.

556
00:35:34,533 --> 00:35:36,634
JSON might have been a better format for data,

557
00:35:37,334 --> 00:35:40,536
but it would have meant distributing additional DLLs to the artists.

558
00:35:41,537 --> 00:35:44,338
It's easier to do Perforce merges on text data files

559
00:35:44,418 --> 00:35:45,919
over binaries or even over code.

560
00:35:50,115 --> 00:35:52,557
As I mentioned earlier, we used one big metadata file

561
00:35:52,617 --> 00:35:53,798
called rigbuild.xml,

562
00:35:54,578 --> 00:35:56,980
which is a huge file containing a flat list of characters

563
00:35:57,020 --> 00:36:00,943
with subelement pointers to character-specific XML files.

564
00:36:02,744 --> 00:36:04,225
Everything in the rig was broken down

565
00:36:04,285 --> 00:36:06,526
into text-based data descriptions.

566
00:36:08,368 --> 00:36:11,130
XML files describe their skeletons, layers, sets,

567
00:36:11,310 --> 00:36:12,791
skinning, poses, animations,

568
00:36:12,851 --> 00:36:13,952
and where to find all that data.

569
00:36:18,280 --> 00:36:21,245
Looking forward, it might be beneficial to abstract this data a little further

570
00:36:21,606 --> 00:36:24,491
and have the file point to character-specific metafiles

571
00:36:25,073 --> 00:36:27,337
containing the sub-element file locations for each character.

572
00:36:28,198 --> 00:36:30,483
It would make it easier to find what you're looking for in a smaller file.

573
00:36:36,766 --> 00:36:38,287
I need that. I'm still on this one.

574
00:36:39,368 --> 00:36:42,089
Including vertex and face data in our skin files

575
00:36:42,129 --> 00:36:45,170
was pure win, though there is enough information

576
00:36:45,210 --> 00:36:47,071
to recreate original meshes and skin wrap

577
00:36:47,672 --> 00:36:48,972
to updated topologies.

578
00:36:49,713 --> 00:36:51,593
One of our tech artists recently used that data

579
00:36:51,613 --> 00:36:54,015
to allow customization artists to preview part meshes

580
00:36:54,055 --> 00:36:55,795
in Max while they construct new armor parts.

581
00:36:56,476 --> 00:36:58,257
In the future, we might add more mesh data,

582
00:36:58,317 --> 00:36:59,857
like UVs or vertex normals,

583
00:37:00,438 --> 00:37:02,939
to totally remove the dependency on a clean mesh

584
00:37:02,979 --> 00:37:04,400
living in a 3DS Max scene.

585
00:37:05,338 --> 00:37:08,380
but I think we'll probably end up moving the data over to FBX

586
00:37:08,741 --> 00:37:10,822
to make a future switch to Maya easier.

587
00:37:14,385 --> 00:37:15,626
There are two types of artists.

588
00:37:17,027 --> 00:37:19,989
The ones that give way more feedback than possible to respond to,

589
00:37:21,350 --> 00:37:24,353
and those that bang their heads against the tools in silent frustration.

590
00:37:25,714 --> 00:37:27,515
The artists that provide feedback

591
00:37:27,916 --> 00:37:30,538
are the ones that help make the tools and rigs better for everyone.

592
00:37:31,473 --> 00:37:34,315
No tool or rig is perfect, and some requests are ridiculous,

593
00:37:34,675 --> 00:37:36,957
but listening, responding, and prioritizing is important.

594
00:37:37,877 --> 00:37:40,619
We can't fix tools if we don't know how frustrating they are to use.

595
00:37:41,320 --> 00:37:45,143
In a perfect world, the technical artists would be using those tools too,

596
00:37:45,243 --> 00:37:49,005
but schedule constraints cause this to happen far less often than desirable.

597
00:37:53,091 --> 00:37:56,153
There's also two kinds of meetings, good meetings and bad meetings.

598
00:37:56,793 --> 00:38:01,015
We had a lot of meetings and most of them were good ones, solution focused, don't veer

599
00:38:01,035 --> 00:38:05,518
off topic and make sure everyone has all the information they need to make informed decisions

600
00:38:05,618 --> 00:38:07,359
in the meeting and on their own.

601
00:38:08,740 --> 00:38:10,681
We had daily check-ins and bottleneck checks.

602
00:38:11,041 --> 00:38:12,781
I think most studios do this nowadays,

603
00:38:13,202 --> 00:38:15,962
but it wasn't always as regular earlier in my career.

604
00:38:17,083 --> 00:38:19,543
At Zoss, we generically refer to it as Scrum,

605
00:38:19,623 --> 00:38:21,544
but it's not really capital-S Scrum.

606
00:38:22,684 --> 00:38:25,125
Producers tend to focus on checklists of tasks.

607
00:38:26,685 --> 00:38:28,406
In the art pipeline, there are just too many

608
00:38:28,666 --> 00:38:31,086
nested dependencies to be too flexible or agile

609
00:38:31,446 --> 00:38:32,287
with the schedule.

610
00:38:40,468 --> 00:38:42,369
Modular rigging made our timelines feasible.

611
00:38:43,610 --> 00:38:45,651
We can prototype new monsters on existing modules

612
00:38:45,691 --> 00:38:47,531
and branch them later if we need something more unique.

613
00:38:49,272 --> 00:38:50,853
Rigging speed was king when creating

614
00:38:50,873 --> 00:38:52,434
90-plus different monster rigs.

615
00:38:53,694 --> 00:38:55,755
For the animator, everything is familiar

616
00:38:56,015 --> 00:38:57,196
and consistent between rigs.

617
00:38:58,396 --> 00:39:00,757
Further along into production, fixes and modifications

618
00:39:00,777 --> 00:39:03,538
into behavior on one rig can propagate to older stuff.

619
00:39:04,515 --> 00:39:06,456
For instance, we made significant fixes

620
00:39:06,516 --> 00:39:08,537
to the snake tail rig to correct flipping issues,

621
00:39:09,117 --> 00:39:10,578
and we were able to apply that fix

622
00:39:10,618 --> 00:39:12,779
to the other monsters that used that module.

623
00:39:18,581 --> 00:39:19,822
I sat in the animator bullpen.

624
00:39:20,342 --> 00:39:21,543
I could peek over my shoulder,

625
00:39:22,543 --> 00:39:23,224
over my monitor,

626
00:39:24,204 --> 00:39:25,124
or over the cubicle wall

627
00:39:25,785 --> 00:39:27,345
to communicate with the animators

628
00:39:27,385 --> 00:39:28,666
who were using the rigs that I was building.

629
00:39:30,095 --> 00:39:31,636
they could do the same to ask me questions.

630
00:39:32,036 --> 00:39:34,638
It required a minimum of energy to hop five feet

631
00:39:34,658 --> 00:39:35,619
to help someone at their desk.

632
00:39:39,682 --> 00:39:41,623
Finally, we had a ton of experience on our team.

633
00:39:42,504 --> 00:39:44,325
Two out of six of our senior animators

634
00:39:44,345 --> 00:39:46,887
were former lead animators at their previous studios.

635
00:39:47,707 --> 00:39:48,928
Across the rest of the art team,

636
00:39:48,968 --> 00:39:52,070
we have so many 10-year game dev veterans.

637
00:39:52,571 --> 00:39:54,672
When you're talking to people with this level of experience,

638
00:39:55,093 --> 00:39:56,594
it makes explanations much easier.

639
00:39:57,445 --> 00:39:59,725
Veteran artists often have good technical chops.

640
00:39:59,806 --> 00:40:02,026
They had to, to be pretty technical,

641
00:40:02,106 --> 00:40:05,107
to have been a game artist back in the day.

642
00:40:06,828 --> 00:40:08,929
Sorry for the cliché, but experienced developers

643
00:40:08,989 --> 00:40:11,549
are the most valuable asset a game studio has.

644
00:40:17,652 --> 00:40:20,112
The politically correct version of what went wrong,

645
00:40:20,372 --> 00:40:23,193
but I believe that every mistake is a learning experience.

646
00:40:26,302 --> 00:40:29,085
We should have pushed harder to adopt Maya as our DCC.

647
00:40:30,246 --> 00:40:33,229
Working around 3ds Max's limitations is a full-time job.

648
00:40:34,250 --> 00:40:38,535
For example, 3ds Max has various UI features that are just not scriptable.

649
00:40:39,656 --> 00:40:44,881
Also, certain features like skin are only accessible in script if it's selected in the UI.

650
00:40:46,002 --> 00:40:49,546
And for speed, complex rigs such as ours can be downright sluggish in Max.

651
00:40:51,807 --> 00:40:54,748
referenced rigs would have made rig updates infinitely easier

652
00:40:55,208 --> 00:40:56,889
and may have made some things possible

653
00:40:57,669 --> 00:40:59,690
to update that we were just too afraid to do

654
00:40:59,770 --> 00:41:02,951
because of the time, labor, and potential for broken animations

655
00:41:03,011 --> 00:41:03,972
after a batch update.

656
00:41:05,252 --> 00:41:05,493
Ahem.

657
00:41:11,055 --> 00:41:12,916
We should have pushed harder for better game tech,

658
00:41:14,236 --> 00:41:16,197
such as cloth, dangly bits, hair,

659
00:41:16,878 --> 00:41:18,718
foot and arm IK, and state machines.

660
00:41:20,325 --> 00:41:23,848
All we had was export the entire skeleton as an FK animation,

661
00:41:23,989 --> 00:41:26,471
and a programmer tied a lot of it together behind a wall of code.

662
00:41:28,052 --> 00:41:32,296
We used RAD Game Tools' Granny as an animation platform,

663
00:41:32,316 --> 00:41:36,399
but we weren't even using all the features offered in that system.

664
00:41:43,545 --> 00:41:45,467
Even though we fought against it until the end,

665
00:41:45,887 --> 00:41:47,849
eventually, pretty much every humanoid—

666
00:41:48,642 --> 00:41:51,204
and player character used a single animation set.

667
00:41:52,265 --> 00:41:54,968
The set grew and grew and had infinite refinement passes,

668
00:41:55,408 --> 00:41:58,471
but at the cost of variation among races and genders.

669
00:41:59,212 --> 00:42:00,714
The physical and skeletal variation

670
00:42:00,734 --> 00:42:02,535
between races and genders had to be reduced

671
00:42:02,556 --> 00:42:05,058
to almost nothing because our retargeting couldn't handle it.

672
00:42:06,039 --> 00:42:07,981
We had poor man's arm IK for females

673
00:42:08,061 --> 00:42:09,162
using two-handed weapons,

674
00:42:09,402 --> 00:42:11,044
but it was difficult to set up or edit.

675
00:42:18,082 --> 00:42:21,403
There was a word I saw players use to describe our animation in beta.

676
00:42:22,104 --> 00:42:22,604
Janky.

677
00:42:24,284 --> 00:42:25,845
In my opinion, our animations looked

678
00:42:26,305 --> 00:42:28,806
pretty consistently fluid and believable in Max,

679
00:42:29,346 --> 00:42:32,307
but the animations became extremely compressed after export.

680
00:42:33,567 --> 00:42:35,448
We experimented with flatter hierarchies,

681
00:42:36,468 --> 00:42:42,050
but that caused issues with blending upper body and lower body motion.

682
00:42:43,853 --> 00:42:47,015
and it was during our flirtation with impacts driven by code,

683
00:42:47,055 --> 00:42:49,036
which didn't understand a non-standard hierarchy.

684
00:42:50,256 --> 00:42:52,437
We did have a processor written that was supposed to

685
00:42:53,218 --> 00:42:57,139
isolate and compress separate branches of that skeleton hierarchy differently,

686
00:42:57,640 --> 00:42:59,460
based on the motion in each animation,

687
00:42:59,781 --> 00:43:01,741
but I don't think it ever made it into our pipeline.

688
00:43:04,223 --> 00:43:06,384
Compression was worst where it mattered the most.

689
00:43:07,324 --> 00:43:10,365
Feet, which were supposed to be planted on the ground, jittered visibly.

690
00:43:11,518 --> 00:43:20,180
Weapon arcs at the end of a long chain from the root up the spine down the arm terminating in a weapon bone became zigzag W shapes instead of smooth arcs.

691
00:43:22,181 --> 00:43:29,002
Our exporter, in conjunction with 3ds Max, sampled subframes, making single-frame mode switches problematic.

692
00:43:30,083 --> 00:43:35,944
Similarly, we had fake parent space switches for sheathing a weapon temporarily to free a hand to cast a spell.

693
00:43:37,074 --> 00:43:43,598
And that looked fine in Max, but never worked perfectly in the game, because the sheathed weapon was still a child of the hand.

694
00:43:45,740 --> 00:43:47,140
The sheathed weapon was still a child of the hand.

695
00:43:48,601 --> 00:43:49,742
For a game of this caliber,

696
00:43:52,784 --> 00:43:55,025
being limited to so few bones was harsh.

697
00:43:55,946 --> 00:43:58,027
At launch, we had no skeletal LODs.

698
00:43:58,868 --> 00:44:02,030
We made a lot of sacrifices and compromises for the bone limitations.

699
00:44:03,191 --> 00:44:05,552
We really could have used more than three bones for a cape.

700
00:44:06,337 --> 00:44:08,898
four bones for a robe or two bones for hair,

701
00:44:09,938 --> 00:44:12,759
or even nine bones for a hand instead of a full 16.

702
00:44:16,240 --> 00:44:20,041
Full voiceover and first person view

703
00:44:20,101 --> 00:44:21,762
were tacked on late in development

704
00:44:22,342 --> 00:44:24,062
and saw their scope creep wide open

705
00:44:24,102 --> 00:44:26,283
without getting the tech or manpower to support it.

706
00:44:28,104 --> 00:44:29,684
We released the game at launch

707
00:44:30,204 --> 00:44:31,965
with only a single bone flappy jaw.

708
00:44:33,355 --> 00:44:37,777
We finally adopted face effects for NPC conversation post-launch,

709
00:44:37,837 --> 00:44:40,618
but really should have planned better and shipped with it in the first place.

710
00:44:44,560 --> 00:44:49,302
Something I've been interested in exploring lately is some studios moving away from a rig

711
00:44:49,342 --> 00:44:51,283
that does everything at all times,

712
00:44:51,903 --> 00:44:55,845
and using a lighter base rig with extendable control construction tools.

713
00:44:57,005 --> 00:45:00,507
Our animation rig was a monstrosity of confusing panels and options.

714
00:45:01,435 --> 00:45:06,559
It was heavy and slow, and the built-in configuration options

715
00:45:06,719 --> 00:45:10,723
made overhauling modules impossible without breaking existing animations.

716
00:45:13,545 --> 00:45:16,847
A lighter, simple rig would basically just be an FK rig.

717
00:45:17,188 --> 00:45:21,891
You want IK arms? Push the button to construct an IK control overlay on the fly.

718
00:45:22,812 --> 00:45:25,754
And then, possibly collapse it back to FK when you're done.

719
00:45:26,495 --> 00:45:30,038
Especially if we move to adopt motion capture in the future, this could be the way to go.

720
00:45:34,540 --> 00:45:38,544
As mentioned several times, 3ds Max does not have usable referencing.

721
00:45:39,465 --> 00:45:41,947
So our rigs were duplicated in every animation scene.

722
00:45:42,928 --> 00:45:46,011
We should have implemented frequent automatic batch rig updates

723
00:45:46,172 --> 00:45:49,675
to ensure all of our animation scenes were always on the up-to-date rigs.

724
00:45:50,516 --> 00:45:54,120
When things broke, we would have been able to find the offending systems

725
00:45:54,220 --> 00:45:56,642
as soon as they failed rather than sometimes months later.

726
00:46:04,177 --> 00:46:06,298
Always listen to your instincts, otherwise known as

727
00:46:06,378 --> 00:46:07,658
don't believe the artists.

728
00:46:08,399 --> 00:46:10,900
Animators swore they didn't want a control picker UI

729
00:46:10,940 --> 00:46:12,661
for three years, until they did.

730
00:46:14,061 --> 00:46:16,302
Part of that was different animators coming onto the team

731
00:46:16,322 --> 00:46:17,923
with different methods and styles of working.

732
00:46:22,205 --> 00:46:25,587
Always assume animators need more than one character in a scene.

733
00:46:26,747 --> 00:46:28,748
Our namespace tool had too many limitations

734
00:46:29,008 --> 00:46:30,649
and most tools were written with the assumption

735
00:46:30,669 --> 00:46:33,110
that there would only be a single rig in a Max scene.

736
00:46:34,142 --> 00:46:37,725
Again, the animators said that they would never need more than one rig in a scene

737
00:46:40,227 --> 00:46:42,648
because there was no tech to support paired animations.

738
00:46:43,349 --> 00:46:46,971
Later on, we realized we needed to sync multiple characters in cutscenes

739
00:46:47,812 --> 00:46:49,153
and mount rider animations.

740
00:46:49,513 --> 00:46:51,395
The hacky namespace system I put together

741
00:46:52,155 --> 00:46:55,437
for one-off cutscenes ended up being used for entire mount rider suites

742
00:46:56,098 --> 00:46:58,500
which then made it difficult to update the rigs in those scenes

743
00:46:58,540 --> 00:47:00,321
with tools that didn't support the namespaces.

744
00:47:00,941 --> 00:47:02,703
It was like an animator tool's arms race.

745
00:47:06,907 --> 00:47:13,289
I started out with good intentions in keeping our MaxScript tools strictly layered between library functions, tools functions, and UI functionality.

746
00:47:13,869 --> 00:47:17,891
But eventually random functions in the tools layer ended up being cross-used in other tools.

747
00:47:19,051 --> 00:47:26,153
Encapsulation of functions into structs wasn't a thing that was obvious in 2008, but became standard across the tech art forums by 2011.

748
00:47:27,614 --> 00:47:34,376
Some of our tools, especially UIs, were updated to this format, but many old tools and libraries remain as big clumps of global functions.

749
00:47:39,858 --> 00:47:42,840
The iteration cycle on our customization rig was pretty bad.

750
00:47:43,481 --> 00:47:47,945
It took 20 to 30 minutes per iteration from a max side fix to seeing it in game,

751
00:47:48,385 --> 00:47:50,007
especially if I had to rebuild the rig.

752
00:47:50,968 --> 00:47:54,491
Building the template skeleton, building deformation rig, building the animation skeleton,

753
00:47:54,511 --> 00:47:56,833
and merging in the raw meshes only took 30 seconds.

754
00:47:57,834 --> 00:48:02,077
The slowest part of the build was loading the skin weights onto dozens of meshes.

755
00:48:02,137 --> 00:48:02,958
It took 10 minutes.

756
00:48:04,097 --> 00:48:05,878
I think part of that huge limitation is...

757
00:48:06,980 --> 00:48:08,641
part of that was the huge limitation in Max.

758
00:48:09,182 --> 00:48:12,345
The skin modifier requires that it is active in the modifier panel

759
00:48:12,385 --> 00:48:13,967
to do any scripted modifications.

760
00:48:14,807 --> 00:48:16,629
Even with redraw off, it's slow.

761
00:48:17,430 --> 00:48:18,852
Then the export took five minutes.

762
00:48:19,572 --> 00:48:22,715
And there is no hot loading of the customization rig in-game,

763
00:48:23,016 --> 00:48:25,178
so we needed to fully quit and restart the game,

764
00:48:25,218 --> 00:48:27,400
which took another five to ten minutes on our dev server.

765
00:48:32,180 --> 00:48:36,203
Finally, for most of the project, there was no technical art team.

766
00:48:37,844 --> 00:48:42,107
And what did exist was not seen as being at the same level of the other art sub-disciplines.

767
00:48:43,068 --> 00:48:44,949
We needed more tech artists earlier.

768
00:48:46,250 --> 00:48:47,731
For three years, it was just me.

769
00:48:49,493 --> 00:48:51,494
And I was assigned to report to the lead animator.

770
00:48:52,635 --> 00:48:55,997
For the next two years after that, it was just me and a junior tech artist,

771
00:48:56,918 --> 00:48:58,119
both under the lead animator.

772
00:48:59,778 --> 00:49:02,179
We were not seen as equal as other disciplines,

773
00:49:02,299 --> 00:49:05,080
and therefore had little voice or advocation in the studio.

774
00:49:10,882 --> 00:49:12,523
Finally, just a couple months before launch,

775
00:49:13,483 --> 00:49:14,844
we hired a lead technical artist,

776
00:49:15,884 --> 00:49:18,465
merged one tools programmer and one technical modeler

777
00:49:18,565 --> 00:49:20,466
onto the team, and hired another tech artist

778
00:49:20,486 --> 00:49:21,547
with a programming background.

779
00:49:22,047 --> 00:49:23,147
But it was too little, too late.

780
00:49:23,647 --> 00:49:24,488
By the time this happened,

781
00:49:24,508 --> 00:49:26,068
we were in code and art lock for launch.

782
00:49:30,882 --> 00:49:33,663
The Elder Scrolls Online has been in release for 11 months,

783
00:49:34,064 --> 00:49:36,865
but as a live MMO, we've released tons of new content

784
00:49:36,885 --> 00:49:37,866
and features since launch.

785
00:49:38,826 --> 00:49:41,448
ZeniMax recently announced that we're going to transition

786
00:49:41,468 --> 00:49:44,009
to buy-to-play, which means there will no longer be

787
00:49:44,050 --> 00:49:46,691
a monthly subscription required to play.

788
00:49:46,711 --> 00:49:49,193
And we're looking forward to our imminent launch

789
00:49:49,213 --> 00:49:51,114
for PlayStation 4 and Xbox One.

790
00:49:51,134 --> 00:49:57,458
I wanted to give a shout out to these fine folks

791
00:49:57,638 --> 00:49:58,858
who contributed to the game.

792
00:50:02,127 --> 00:50:03,368
And what time is it?

793
00:50:05,650 --> 00:50:06,090
10 minutes left?

794
00:50:09,393 --> 00:50:10,233
Anybody have questions?

795
00:50:27,846 --> 00:50:28,007
OK.

796
00:50:28,047 --> 00:50:28,227
Thanks.

797
00:50:28,367 --> 00:50:28,907
Thanks for coming.

798
00:50:29,668 --> 00:50:31,289
And hope I didn't put anybody to sleep.

799
00:50:31,912 --> 00:50:32,172
Hello.

800
00:50:32,373 --> 00:50:34,534
Hey, got one for you over here.

801
00:50:34,574 --> 00:50:34,774
Oh, hi.

802
00:50:34,794 --> 00:50:35,615
How are you doing?

803
00:50:36,696 --> 00:50:37,096
Good talk.

804
00:50:37,136 --> 00:50:37,757
Thank you very much.

805
00:50:39,058 --> 00:50:42,300
Yeah, so you were talking about trying to push for Maya

806
00:50:42,660 --> 00:50:43,521
and adopting that.

807
00:50:43,961 --> 00:50:45,863
Would you see that as a realistic goal

808
00:50:45,923 --> 00:50:47,384
this far into the project?

809
00:50:48,244 --> 00:50:49,625
I'm assuming it's a live game that's

810
00:50:49,665 --> 00:50:51,026
going to have continual support.

811
00:50:51,770 --> 00:51:02,753
Right, well we are looking forward to a future product and you know nowadays with FBX it's

812
00:51:03,253 --> 00:51:09,816
fairly easy to get stuff from Max to Maya as long as the rig on the other end kind of

813
00:51:09,836 --> 00:51:10,736
supports the input.

814
00:51:10,796 --> 00:51:17,378
So we're talking about doing some of that, just like rebuilding our system in Maya and

815
00:51:17,398 --> 00:51:19,639
then loading all the animations into it and seeing what happens.

816
00:51:20,657 --> 00:51:24,539
So further on in that, I've worked in environments

817
00:51:24,579 --> 00:51:27,981
where 3ds Max and Maya are both used in the same environment,

818
00:51:28,101 --> 00:51:29,602
and it can be a little tricky.

819
00:51:30,082 --> 00:51:33,144
So if that was adopted for the animation pipeline,

820
00:51:33,224 --> 00:51:34,885
would you also push for that being adopted

821
00:51:34,945 --> 00:51:36,505
by the environment and the rest of the studio?

822
00:51:37,846 --> 00:51:38,547
Probably not.

823
00:51:38,967 --> 00:51:41,688
It would mostly be for the animation team.

824
00:51:41,708 --> 00:51:42,729
So they keep that separate.

825
00:51:42,929 --> 00:51:43,209
Yeah.

826
00:51:43,770 --> 00:51:43,850
OK.

827
00:51:43,870 --> 00:51:44,550
Yeah.

828
00:51:45,010 --> 00:51:45,811
Well, thank you very much.

829
00:51:48,708 --> 00:51:49,568
I have a question.

830
00:51:49,909 --> 00:51:51,730
You mentioned about IK, so which method

831
00:51:51,770 --> 00:51:54,211
do you use to solve IK problem?

832
00:51:54,892 --> 00:51:55,232
Which what?

833
00:51:55,612 --> 00:51:57,413
I mean, you use which method to solve

834
00:51:57,433 --> 00:51:58,594
a universal kinematic problem?

835
00:51:58,634 --> 00:52:02,877
You only use the built-in IK handler, or you have your own?

836
00:52:02,897 --> 00:52:05,578
No, there's a built-in solver, whatever the.

837
00:52:06,651 --> 00:52:06,871
Okay.

838
00:52:06,911 --> 00:52:09,172
The hierarchy independent or whatever it's called.

839
00:52:09,292 --> 00:52:16,835
And another question is I heard a saying that if you want to import your animation into game,

840
00:52:17,255 --> 00:52:20,177
you need to remove the IK before you do the import.

841
00:52:20,537 --> 00:52:26,800
Well, it just samples the skeleton as if the whole thing was just an FK.

842
00:52:28,061 --> 00:52:33,546
So, I mean, I know you need to bake all the animations into frame and then import.

843
00:52:33,566 --> 00:52:37,990
Do you think it is necessary to remove the IK before you import the...

844
00:52:38,150 --> 00:52:43,435
No, the exporter just samples whatever the skeleton is doing at any particular frame.

845
00:52:43,455 --> 00:52:45,256
It doesn't matter how the skeleton is driven.

846
00:52:46,613 --> 00:52:52,196
I have that one tool, the dynamics tool, where I'm changing the constraint on the skeleton

847
00:52:52,256 --> 00:52:58,819
to go from the regular rig behavior to a whole separate set of controls that have no hierarchy

848
00:52:58,839 --> 00:53:07,043
whatsoever so that you can break skeletons up or do some crazy stuff with golems that

849
00:53:07,103 --> 00:53:10,224
are made of rocks and stuff, make the rocks all fall apart and tumble around.

850
00:53:11,930 --> 00:53:20,003
hierarchically in Max, that's still a hierarchy, but controlled entirely by a separate set of controls.

851
00:53:22,725 --> 00:53:26,067
The thing is, I think if the animation is down,

852
00:53:26,547 --> 00:53:30,749
whether IK is existing doesn't affect the animation itself,

853
00:53:30,889 --> 00:53:32,630
but it also takes some CPU time,

854
00:53:32,730 --> 00:53:36,112
so I think to the efficiency part, maybe...

855
00:53:36,812 --> 00:53:38,773
I heard a thing that if you want to, like,

856
00:53:38,853 --> 00:53:42,375
improve your efficiency, you need to remove the IK,

857
00:53:42,395 --> 00:53:43,416
but I don't know.

858
00:53:43,476 --> 00:53:46,877
Yeah, we don't have any IK in game side in the client.

859
00:53:47,718 --> 00:53:48,878
So it's all FK, yeah.

860
00:53:52,231 --> 00:53:52,611
Anybody else?

861
00:53:55,654 --> 00:53:55,914
Hi.

862
00:53:56,795 --> 00:53:59,317
I'm not sure this is a relevant question,

863
00:53:59,398 --> 00:54:02,240
but on the Elder Scrolls line, there's

864
00:54:02,280 --> 00:54:04,882
a lot of dialogue for NPC.

865
00:54:05,243 --> 00:54:08,045
And I know they have a lip sync on it.

866
00:54:08,646 --> 00:54:12,830
And that animation was manually created by an animator,

867
00:54:13,010 --> 00:54:16,133
or there was kind of a technical thing going on.

868
00:54:16,582 --> 00:54:23,885
Yeah, well at launch, all we had was the jaw flapping, like one bone, and that was driven

869
00:54:23,925 --> 00:54:25,785
by just the audio waveforms.

870
00:54:27,626 --> 00:54:35,109
After launch, we implemented face effects, and that was all generated procedurally, automatically,

871
00:54:35,329 --> 00:54:36,550
by the face effects system.

