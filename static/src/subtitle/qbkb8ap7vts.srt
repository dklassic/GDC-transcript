1
00:00:11,671 --> 00:00:15,453
Hello all and welcome to this presentation about VFX learnings on Returnal.

2
00:00:17,034 --> 00:00:22,457
My name is Risto and I'm the lead VFX artist at Housemarque and with me is Sharman, who

3
00:00:22,477 --> 00:00:24,479
is one of our senior graphics programmers.

4
00:00:26,540 --> 00:00:28,181
Just a little bit about the company as well.

5
00:00:28,781 --> 00:00:30,502
Housemarque was established in 1995 and before Returnal.

6
00:00:33,056 --> 00:00:36,579
We were best known for arcade tile twin stick shooters

7
00:00:36,599 --> 00:00:39,020
such as Dead Nation, Resogun and Ex Machina.

8
00:00:40,962 --> 00:00:44,504
Returnal was by far our biggest project to date

9
00:00:44,584 --> 00:00:46,326
and that was released in April last year.

10
00:00:47,647 --> 00:00:50,028
And we have been working with Sony for quite some time

11
00:00:50,609 --> 00:00:52,650
and since last June we have been part of the PlayStation

12
00:00:52,670 --> 00:00:53,411
Studios as well.

13
00:00:55,392 --> 00:00:58,374
So, this presentation is about how we utilized

14
00:00:58,434 --> 00:01:01,537
our own VFX tool set to create some unconventional stuff

15
00:01:01,617 --> 00:01:02,217
for Returnal.

16
00:01:02,911 --> 00:01:11,173
By unconventional, I'm referring to things like vegetation, character effects like tentacles, and volumetric environment effects with fluid simulations.

17
00:01:11,914 --> 00:01:15,054
Basically things that you wouldn't expect to be done with a particle system.

18
00:01:15,915 --> 00:01:21,596
In addition to those things, we also produced a huge amount of conventional effects with regular billboards and point particles.

19
00:01:22,176 --> 00:01:28,958
And since those are probably familiar to most of you in the audience already, we'll focus more on the unusual stuff during this presentation.

20
00:01:31,199 --> 00:01:31,299
Okay.

21
00:01:31,821 --> 00:01:34,041
quick overview of what we are going to talk about.

22
00:01:34,681 --> 00:01:37,802
We will introduce our proprietary VFX engine briefly.

23
00:01:38,642 --> 00:01:42,763
I feel that the tool set is quite unique, so it is essential to understand how things

24
00:01:42,823 --> 00:01:46,703
work before we present what we did with them.

25
00:01:46,984 --> 00:01:51,864
After that, I will present particle hierarchies and Sharman will present the last segment

26
00:01:51,944 --> 00:01:54,305
about external resources and simulations.

27
00:02:02,136 --> 00:02:04,417
A little bit about the history of our VFX engine.

28
00:02:06,238 --> 00:02:08,440
We have been developing our own particle system since 2014.

29
00:02:10,081 --> 00:02:12,202
Back then, we used to have our own game engine as well.

30
00:02:13,603 --> 00:02:16,404
Already for Resogun, the team had made some particle effects

31
00:02:16,424 --> 00:02:18,485
with compute shaders, and based on that work,

32
00:02:18,706 --> 00:02:21,407
we started developing a particle system for alienation.

33
00:02:22,868 --> 00:02:25,109
We moved to Unreal for the production of Matterfall

34
00:02:25,389 --> 00:02:29,012
and ported our VFX tool set to Unreal at the same time as well.

35
00:02:30,305 --> 00:02:36,866
and design wise, we try to focus on flexibility and performance, all the effects run on GPU

36
00:02:36,946 --> 00:02:42,387
only and everything is fully programmable in HLSL.

37
00:02:43,428 --> 00:02:45,968
While we are at it, let's go through some definitions as well.

38
00:02:46,848 --> 00:02:51,969
So in our system, when I say a particle, that's a single particle, it's just a text file with

39
00:02:52,009 --> 00:02:56,630
some HLSL code in it, so in order to create effects for our engine, you actually have

40
00:02:56,670 --> 00:02:59,110
to create an empty text file and start typing code.

41
00:03:00,860 --> 00:03:06,864
An effect on the other hand, it's a system of particles that reference each other.

42
00:03:07,044 --> 00:03:10,086
For example an emitter that emits other particles.

43
00:03:10,626 --> 00:03:13,889
The engine itself does not distinguish between particles and emitters.

44
00:03:14,269 --> 00:03:16,430
Any particle can be an emitter or not.

45
00:03:17,811 --> 00:03:21,114
And finally we have the VFX engine that runs the whole show.

46
00:03:21,494 --> 00:03:25,857
It keeps particles alive and discards dead particles and does other useful things for

47
00:03:25,877 --> 00:03:25,977
you.

48
00:03:26,597 --> 00:03:29,039
The VFX engine itself is a plugin for Unreal.

49
00:03:29,515 --> 00:03:36,260
Previously we just called it a particle engine, but since it does so many other things as well, we decided to start calling it the VFX engine.

50
00:03:38,081 --> 00:03:43,765
So there's going to be a bit of code. I'll try to keep it as brief as possible, since I'm aware that this is an art summit.

51
00:03:45,366 --> 00:03:45,606
So

52
00:03:47,288 --> 00:03:51,811
let's create a simple particle effect for our engine just to give you an idea how it actually happens.

53
00:03:52,775 --> 00:03:57,077
As I mentioned, you start by creating a text file and inside that text file we need to

54
00:03:57,137 --> 00:04:01,118
define what particle is, but we also need to define what the particle does.

55
00:04:03,439 --> 00:04:07,521
What the particle is, is defined by implementing a thing called particle struct.

56
00:04:09,102 --> 00:04:12,623
Those things that you see inside the struct are particle variables.

57
00:04:12,863 --> 00:04:16,045
Variables are the data that the particle can store and modify.

58
00:04:17,358 --> 00:04:19,419
You can add as many variables as you want to,

59
00:04:19,939 --> 00:04:22,200
and you're free to choose their data types and names.

60
00:04:22,720 --> 00:04:24,841
Typical variables would be what we have here,

61
00:04:25,461 --> 00:04:28,442
like life, lifetime, but also position, velocity,

62
00:04:28,502 --> 00:04:30,643
size, color, or whatever you can think of.

63
00:04:30,783 --> 00:04:33,364
There's no practical limit to those,

64
00:04:33,644 --> 00:04:35,705
and also the naming is free, as I mentioned earlier.

65
00:04:36,865 --> 00:04:39,386
But actually none of these are required,

66
00:04:39,466 --> 00:04:41,287
so basically you'd have to,

67
00:04:41,567 --> 00:04:44,748
you can survive with just the dummy variable there as well.

68
00:04:45,922 --> 00:04:47,822
And after we have defined what particle is,

69
00:04:48,042 --> 00:04:51,284
we can proceed and define what the particle does.

70
00:04:53,284 --> 00:04:55,385
This is done by implementing an update function.

71
00:04:56,086 --> 00:04:58,126
Here you can see that the particle we just created

72
00:04:58,607 --> 00:04:59,927
is passed to the update function,

73
00:04:59,967 --> 00:05:01,148
and we can modify it there.

74
00:05:02,288 --> 00:05:05,049
In this simple example, we just accumulate the delta time

75
00:05:05,169 --> 00:05:06,450
to our particle's life variable.

76
00:05:08,410 --> 00:05:09,991
And when it exceeds lifetime variable,

77
00:05:10,031 --> 00:05:11,712
we choose to exit the update function

78
00:05:12,552 --> 00:05:14,233
and not to keep the particle alive anymore.

79
00:05:15,630 --> 00:05:17,450
and we're not even rendering the particle here.

80
00:05:17,810 --> 00:05:19,271
The render component is optional,

81
00:05:19,451 --> 00:05:20,591
and we'll have a look at that later.

82
00:05:21,591 --> 00:05:24,512
The system supports all HLSL features, branchings,

83
00:05:25,192 --> 00:05:27,573
and all the intrinsics are there, et cetera,

84
00:05:28,013 --> 00:05:30,113
and this allows us a great deal of flexibility.

85
00:05:30,454 --> 00:05:32,254
For example, it's trivial for the particle

86
00:05:32,274 --> 00:05:33,914
to handle multiple different states

87
00:05:34,335 --> 00:05:36,495
and execute update logic based on a given state.

88
00:05:38,756 --> 00:05:38,996
Okay.

89
00:05:40,396 --> 00:05:43,777
What we have here is actually considered a particle

90
00:05:43,817 --> 00:05:44,697
in our VFX engine.

91
00:05:45,081 --> 00:05:47,622
So if we were editing this, we could press save

92
00:05:47,702 --> 00:05:50,604
and the system would create an effect graphical user

93
00:05:50,644 --> 00:05:52,604
interface for us.

94
00:05:52,665 --> 00:05:54,946
This is a place where other team members and artists can

95
00:05:54,966 --> 00:05:56,366
do modifications for our effect.

96
00:05:57,147 --> 00:05:59,087
For example, you can do material assignments,

97
00:05:59,748 --> 00:06:01,208
or you can edit animation curves.

98
00:06:01,549 --> 00:06:04,290
For example, if you want to have a curve for, let's say,

99
00:06:04,310 --> 00:06:07,691
color over lifetime, you need to declare it in the shader code.

100
00:06:07,792 --> 00:06:10,413
And it will be available for others via this asset.

101
00:06:11,655 --> 00:06:15,116
And also, you can add color pickers, custom tweakables,

102
00:06:15,156 --> 00:06:15,576
and everything.

103
00:06:15,636 --> 00:06:18,138
But everything has to be declared in the code.

104
00:06:18,418 --> 00:06:20,499
So we don't assume that anything exists

105
00:06:20,559 --> 00:06:23,500
unless you actually explicitly announce it in the code.

106
00:06:24,060 --> 00:06:27,201
Basically, what we have is a small custom graphical user

107
00:06:27,241 --> 00:06:28,222
interface per effect.

108
00:06:28,982 --> 00:06:30,643
In Returnal, we didn't have this.

109
00:06:30,683 --> 00:06:32,664
So this is part of the learnings from Returnal.

110
00:06:32,904 --> 00:06:36,085
And not having this was actually a major bottleneck

111
00:06:36,125 --> 00:06:38,326
for the production, because all the modifications

112
00:06:38,346 --> 00:06:40,527
have to be done by people who understood the JEDA code.

113
00:06:42,465 --> 00:06:48,228
Okay, so basically, writing that file and editing this graphical user interface is the

114
00:06:48,248 --> 00:06:52,550
whole process of doing an effect in HouseMod in its simplicity.

115
00:06:53,611 --> 00:06:57,472
You start with a blank file, write some code, and the system produces an interface that

116
00:06:57,512 --> 00:06:59,353
non-technical people can tweak or modify.

117
00:07:04,736 --> 00:07:10,278
Okay, now we can move on to particle hierarchies, which is pretty much node particles in our

118
00:07:10,318 --> 00:07:10,598
system.

119
00:07:11,717 --> 00:07:13,478
Let's talk a bit about them.

120
00:07:14,038 --> 00:07:15,519
When we started developing Returnal,

121
00:07:15,919 --> 00:07:17,620
node particles were a new thing for us.

122
00:07:18,320 --> 00:07:20,401
They were developed for branching vegetation

123
00:07:20,621 --> 00:07:22,582
in another project, but they turned out

124
00:07:22,642 --> 00:07:24,803
to be very useful for Returnal as well.

125
00:07:26,504 --> 00:07:27,764
The concept is really simple.

126
00:07:28,865 --> 00:07:31,766
Node particles are just like any other particle in our engine,

127
00:07:32,266 --> 00:07:34,247
but they can all read the parent data

128
00:07:34,707 --> 00:07:35,828
that the parent actually has.

129
00:07:41,602 --> 00:07:43,242
And parent can have multiple children,

130
00:07:43,362 --> 00:07:44,903
but child can only have one parent.

131
00:07:45,083 --> 00:07:47,964
And parent and child need to be the same particle type.

132
00:07:48,624 --> 00:07:51,845
And we ended up using these node particles a lot.

133
00:07:51,925 --> 00:07:54,706
We used them for ribbons, vegetations, tentacles,

134
00:07:54,806 --> 00:07:56,987
and all kinds of stuff, as we're about to see.

135
00:08:03,429 --> 00:08:06,550
So, let's have a quick look at the node particle code.

136
00:08:06,830 --> 00:08:07,930
Let's create some of them.

137
00:08:08,753 --> 00:08:11,794
and see how we can utilize the parent-child relationship that they have.

138
00:08:12,114 --> 00:08:14,295
Our goal will be to create one of the tentacles

139
00:08:14,335 --> 00:08:16,635
that we had on many of our enemies in Returnal.

140
00:08:19,996 --> 00:08:23,177
First, we need to tell the system that that particle is a node particle.

141
00:08:23,337 --> 00:08:27,138
That's done in the header, so that system knows to include relevant code for it.

142
00:08:28,838 --> 00:08:31,019
We can do the particle definition as usual.

143
00:08:32,919 --> 00:08:34,180
And then in the update code,

144
00:08:34,500 --> 00:08:37,400
the engine will provide us a function for getting the parent particle.

145
00:08:39,592 --> 00:08:43,874
After that you are free to do whatever logic you want based on the parent particle data.

146
00:08:46,095 --> 00:08:51,058
In this case we are just checking if you look at the code, we are just checking if the parent

147
00:08:51,098 --> 00:08:55,360
is more than 100 units away and then we move the child particle closer to the parent if

148
00:08:55,400 --> 00:08:55,620
true.

149
00:08:57,801 --> 00:09:02,584
Next we are going to have a look at an animated example of how this can be useful for us.

150
00:09:07,375 --> 00:09:11,596
What we can see here is some node particles moving around and spawning child particles.

151
00:09:12,657 --> 00:09:16,778
As we can read the parent particle data, we can draw a debug line from child particle

152
00:09:16,838 --> 00:09:17,678
to the parent particle.

153
00:09:19,298 --> 00:09:22,039
This looks a bit messy as all particles are moving independently.

154
00:09:22,799 --> 00:09:24,780
Let's add some constraints to their movement.

155
00:09:26,840 --> 00:09:30,901
First we'll limit the distance that the particles can move away from their parent, and that

156
00:09:31,001 --> 00:09:33,962
distance is visualized by those green circles around each particle.

157
00:09:35,064 --> 00:09:38,246
Now let's apply uniform velocity to the left of the screen

158
00:09:38,967 --> 00:09:40,888
and start slowly rotating the velocity

159
00:09:41,208 --> 00:09:42,729
and damp it towards the end of the chain.

160
00:09:45,851 --> 00:09:48,473
And finally, we can apply some curl noise to the movement.

161
00:09:55,017 --> 00:09:57,939
Now we have something that we could use as a base

162
00:09:58,079 --> 00:10:00,040
for a tentacle motion in Returnal,

163
00:10:00,420 --> 00:10:02,121
but it's still lacking on many areas.

164
00:10:04,070 --> 00:10:05,851
The rendering being the main offender here.

165
00:10:06,391 --> 00:10:09,454
So we have the motion, but we need to be able to visualize it somehow.

166
00:10:10,134 --> 00:10:15,258
We considered multiple options, like quad strips, point particles, and separate tube render,

167
00:10:16,079 --> 00:10:18,801
but ended up doing it all from our particle update function.

168
00:10:22,604 --> 00:10:23,705
So how did we do that?

169
00:10:25,686 --> 00:10:29,629
On top of the usual render types that one might have in a particle engine, such as sprites

170
00:10:29,649 --> 00:10:32,191
or oriented quads, we also added triangles.

171
00:10:34,647 --> 00:10:36,808
The two key takeaway things here are,

172
00:10:37,748 --> 00:10:40,670
we can define the triangle vertex locations freely.

173
00:10:40,690 --> 00:10:44,212
And secondly, we can render as many triangles

174
00:10:44,392 --> 00:10:45,813
as we want per particle.

175
00:10:47,282 --> 00:10:50,324
In our engine, we define render types in the particle code

176
00:10:51,325 --> 00:10:53,146
by implementing a thing called render struct.

177
00:10:53,567 --> 00:10:56,229
It works similarly to the particle struct we saw earlier,

178
00:10:56,389 --> 00:10:57,910
but the user can freely choose

179
00:10:57,970 --> 00:10:59,431
what kind of variables they put there.

180
00:10:59,952 --> 00:11:01,713
I'm not going to go too much into detail here,

181
00:11:02,153 --> 00:11:04,255
but it's enough to say with that kind of render struct

182
00:11:04,275 --> 00:11:05,256
that you see on the screen,

183
00:11:06,377 --> 00:11:07,577
the system already knows

184
00:11:07,838 --> 00:11:09,459
that I'm trying to render a triangle.

185
00:11:11,669 --> 00:11:14,030
And in the update function, we currently have a loop

186
00:11:14,050 --> 00:11:17,331
that just creates 10 triangles and places them side by side.

187
00:11:18,552 --> 00:11:19,392
Okay, and there you go.

188
00:11:20,612 --> 00:11:21,933
If we would execute that code,

189
00:11:21,953 --> 00:11:24,774
what we would get is 10 triangles, as promised.

190
00:11:25,094 --> 00:11:27,495
It's not too exciting, so we'll have to dig a bit deeper.

191
00:11:28,715 --> 00:11:31,997
But so far, we have established two important things for us.

192
00:11:33,217 --> 00:11:35,838
First one being, we can read other particle data,

193
00:11:36,178 --> 00:11:38,419
and secondly, we can render as many triangles

194
00:11:38,559 --> 00:11:39,699
as we want per particle.

195
00:11:40,485 --> 00:11:43,327
Now we can proceed and build a renderable mesh for our particles.

196
00:11:46,109 --> 00:11:48,951
First, we need to think of particles as control points for a curve.

197
00:11:49,711 --> 00:11:52,613
And if we have a curve, you can also have tangents.

198
00:11:52,933 --> 00:11:53,754
Those are the red lines.

199
00:11:55,214 --> 00:11:58,476
If you have a tangent for a curve, you can also have a normal for the curve as well.

200
00:11:59,037 --> 00:12:00,158
And those would be the green lines.

201
00:12:00,798 --> 00:12:04,480
The only thing we need to do now is rotate the normal around the tangent.

202
00:12:05,321 --> 00:12:09,523
We can use the blue dots resulting from this rotation as vertices for our tentacle mesh.

203
00:12:10,365 --> 00:12:14,048
Then we can just proceed adding triangles to those positions as vertex locations.

204
00:12:17,771 --> 00:12:19,913
Okay, that's pretty close to what we have in the game.

205
00:12:20,574 --> 00:12:23,056
We just need to change the thickness a bit and swap the material.

206
00:12:23,777 --> 00:12:27,220
I know this is a pretty standard way to do tube rendering, so nothing new there.

207
00:12:28,081 --> 00:12:33,145
But the fact that we can do all of these things per particle and on the GPU makes it perform really well.

208
00:12:35,019 --> 00:12:37,761
Like here, basically, you can have all the tentacles in the world,

209
00:12:38,281 --> 00:12:40,502
and it's not going to cost you an arm and a leg in performance.

210
00:12:41,463 --> 00:12:44,564
And since each tentacle is basically a bunch of particles,

211
00:12:45,165 --> 00:12:49,047
we can control their behavior and implement things like player collisions

212
00:12:49,507 --> 00:12:51,468
and fluid velocities really easily.

213
00:12:52,829 --> 00:12:55,970
I can't recall how many tentacles this particular scene has,

214
00:12:56,010 --> 00:12:58,052
but I think the update costs something.

215
00:12:58,512 --> 00:12:59,393
around a millisecond.

216
00:12:59,953 --> 00:13:03,235
I think this is a bit of an excess amount of tentacles.

217
00:13:03,315 --> 00:13:05,156
I don't think we ever had used that in the game.

218
00:13:13,962 --> 00:13:15,783
Okay, so we ended up using these things

219
00:13:16,403 --> 00:13:17,444
in the game quite liberally.

220
00:13:17,884 --> 00:13:18,965
Since they performed well,

221
00:13:19,205 --> 00:13:20,846
and we were able to program their behavior.

222
00:13:21,086 --> 00:13:22,207
We attached them to enemies,

223
00:13:22,627 --> 00:13:24,668
and had the enemy AI drive the tentacle state

224
00:13:25,489 --> 00:13:26,009
so that they would.

225
00:13:26,312 --> 00:13:29,293
for example, grow and become emissive before the attacks.

226
00:13:30,854 --> 00:13:31,955
And since they performed well,

227
00:13:32,155 --> 00:13:34,756
we were able to use them as vegetation in some rooms as well.

228
00:13:35,877 --> 00:13:38,298
And that was really nice because we were able to use

229
00:13:38,318 --> 00:13:39,679
the fluid sim and the player collisions

230
00:13:39,719 --> 00:13:41,260
to drive the vegetation behavior.

231
00:13:41,740 --> 00:13:43,581
And each grass blade can have its state,

232
00:13:43,621 --> 00:13:45,122
so we didn't have to jump through hoops

233
00:13:45,302 --> 00:13:46,742
trying to implement their behavior

234
00:13:46,803 --> 00:13:48,403
via vertex offsets or something.

235
00:13:49,404 --> 00:13:50,585
In this last example,

236
00:13:51,325 --> 00:13:54,026
we had the player head attract the vegetation,

237
00:13:54,146 --> 00:13:54,246
so...

238
00:13:54,712 --> 00:13:58,615
would look like the vegetation is inspecting the player.

239
00:14:03,978 --> 00:14:06,119
I think another good example of the flexibility

240
00:14:06,139 --> 00:14:08,260
of node particles is that we also use them

241
00:14:08,320 --> 00:14:10,521
to do simple destructible objects for Returnal.

242
00:14:11,982 --> 00:14:14,544
Destructibles had to be pre-processed in Houdini.

243
00:14:15,444 --> 00:14:18,206
In Houdini, we first split the object into two pieces,

244
00:14:18,366 --> 00:14:20,307
interior and exterior, and after that,

245
00:14:20,387 --> 00:14:21,808
we do a simple Voronoi shatter

246
00:14:21,928 --> 00:14:23,249
on both of the resulting meshes.

247
00:14:24,068 --> 00:14:28,870
Then we export the mesh to Unreal, and in-game we create a single particle per mesh piece.

248
00:14:29,471 --> 00:14:33,592
Each of those particles can have access to a lookup table that constraints the start

249
00:14:33,632 --> 00:14:35,573
vertex and end vertex of that piece.

250
00:14:36,153 --> 00:14:40,055
That way we can tell each particle to loop through those triangles and render them.

251
00:14:43,296 --> 00:14:45,877
So in-game we first show the intact static mesh.

252
00:14:46,617 --> 00:14:52,059
When the object is hit by a bullet, we hide the static mesh and show the mesh constructed

253
00:14:52,079 --> 00:14:52,640
of particles.

254
00:14:53,512 --> 00:14:56,534
For visualization purposes, we're showing particles as green dots here.

255
00:14:56,774 --> 00:15:00,716
Each of those particles render a segment of the mesh that is assigned to it.

256
00:15:01,657 --> 00:15:04,918
When the destructible object health reaches zero, it's destroyed.

257
00:15:05,379 --> 00:15:08,060
And at that point, we can start animating the particles.

258
00:15:08,841 --> 00:15:12,443
We make the particles that are below the hit point fly away explosively,

259
00:15:12,923 --> 00:15:17,365
and particles that are above the hit point get grouped together under a single node particle.

260
00:15:18,453 --> 00:15:20,294
We can then animate that particle,

261
00:15:20,874 --> 00:15:22,615
visualized by the green bounding box,

262
00:15:22,955 --> 00:15:24,896
and the child particles will animate with it.

263
00:15:26,737 --> 00:15:29,098
This gives an illusion that the big piece is actually

264
00:15:29,278 --> 00:15:30,658
a single solid object.

265
00:15:33,139 --> 00:15:34,240
And let's see.

266
00:15:34,300 --> 00:15:36,201
I'm going to rewind the video a bit.

267
00:15:38,101 --> 00:15:38,602
I'll let it play.

268
00:15:39,462 --> 00:15:41,263
So when the big piece is moving, we

269
00:15:41,283 --> 00:15:44,264
can query the SDF collisions in each of the child particles

270
00:15:44,384 --> 00:15:46,265
and detach them from the group on collision.

271
00:15:49,550 --> 00:15:51,490
I call this method scripted destruction.

272
00:15:51,850 --> 00:15:55,651
It's not as generic as real RBD, but it's very fast.

273
00:15:56,111 --> 00:15:59,412
I also think that there are several interesting opportunities for improving it.

274
00:16:00,092 --> 00:16:04,853
One could, for example, export the connectivity data from Houdini and simulate node particle

275
00:16:04,893 --> 00:16:06,714
collisions with that information.

276
00:16:07,754 --> 00:16:14,836
Basically we used it for destroying mechanical enemies and lots of statues and in the bottom

277
00:16:15,517 --> 00:16:16,358
right-hand corner.

278
00:16:16,438 --> 00:16:18,940
We even did a whole boss with this destruction system.

279
00:16:20,221 --> 00:16:21,862
So it's just basically a bunch of pieces

280
00:16:21,882 --> 00:16:23,963
that you can move around with particle code.

281
00:16:28,847 --> 00:16:30,868
OK, that was the end of my part.

282
00:16:30,948 --> 00:16:33,610
Next, Saruman is up, and he will present us

283
00:16:33,850 --> 00:16:35,231
external resources and simulations.

284
00:16:35,251 --> 00:16:40,435
Thank you.

285
00:16:40,455 --> 00:16:41,455
Yes, hello, everybody.

286
00:16:42,076 --> 00:16:44,037
Thanks, Risto, for doing the first part of this

287
00:16:44,197 --> 00:16:44,838
presentation.

288
00:16:46,006 --> 00:16:48,127
And Risto didn't leave me any tentacles,

289
00:16:48,167 --> 00:16:51,748
but we'll be looking into some other things,

290
00:16:51,788 --> 00:16:54,189
such as fluid simulations and volumetric fog,

291
00:16:54,269 --> 00:16:55,330
how we solve those things.

292
00:16:57,211 --> 00:16:59,051
We use external resources.

293
00:16:59,271 --> 00:17:00,132
Let me elaborate.

294
00:17:01,392 --> 00:17:03,813
By resource, we mean a GPU resource.

295
00:17:03,833 --> 00:17:05,554
It's something that the particle can read.

296
00:17:06,174 --> 00:17:09,136
Our particles are explicit in nature.

297
00:17:09,736 --> 00:17:12,017
They don't do anything on their own.

298
00:17:12,097 --> 00:17:14,538
For example, if you want to emit something from a mesh.

299
00:17:15,212 --> 00:17:17,873
you will need to bind that resource, like mesh resource,

300
00:17:17,913 --> 00:17:20,775
to the particle and then manually look up

301
00:17:20,795 --> 00:17:24,096
the information from those buffers.

302
00:17:25,437 --> 00:17:29,860
So buffers could be, let's look at what they could be.

303
00:17:30,840 --> 00:17:33,462
We can have 2D textures, 3D volumes,

304
00:17:34,122 --> 00:17:36,703
and as I mentioned, bone buffers, vertex buffers,

305
00:17:36,783 --> 00:17:39,085
index buffers, tangents, and these kinds of things.

306
00:17:42,914 --> 00:17:49,980
I think the best way is to approach this using a real example that we used quite liberally in the game.

307
00:17:51,321 --> 00:17:55,043
We have a real-time fluid simulation running at all times in the game.

308
00:17:56,484 --> 00:18:00,908
We've used this technique since Alien Nation, which was launched in 2016.

309
00:18:01,108 --> 00:18:06,492
So there's always, at all times, a grid-based fluid simulation following the player,

310
00:18:07,132 --> 00:18:11,956
and the artists are free to sample from that fluid simulation.

311
00:18:12,444 --> 00:18:15,105
and have the vegetation, for example, react or point

312
00:18:15,145 --> 00:18:17,065
particles or what they want to have there.

313
00:18:17,785 --> 00:18:20,726
We can also have dedicated fluid simulations

314
00:18:20,826 --> 00:18:22,466
for set piece effects.

315
00:18:23,106 --> 00:18:27,847
And throughout the remaining of this presentation,

316
00:18:27,887 --> 00:18:29,288
we'll be watching a lot of videos,

317
00:18:29,468 --> 00:18:32,568
and I'll be commenting on the tech on those things.

318
00:18:33,749 --> 00:18:36,829
So we can start with the player following fluid simulation.

319
00:18:37,009 --> 00:18:41,970
Those red arrows indicate how the velocity field is currently

320
00:18:44,390 --> 00:18:47,671
We can rasterize forces into the field.

321
00:18:47,891 --> 00:18:56,612
We can also sample SDF and rasterize objects into the field to get interesting motions.

322
00:18:57,973 --> 00:19:03,234
Here is an actual example from the game where the vegetation as well as the volumetric fog

323
00:19:03,834 --> 00:19:05,034
is using all of that.

324
00:19:06,834 --> 00:19:11,535
As you can see when the enemy shoots at you, the vegetation as well as the volumetric fog

325
00:19:12,590 --> 00:19:13,530
move accordingly.

326
00:19:17,272 --> 00:19:19,172
Using resources is very, very simple.

327
00:19:20,953 --> 00:19:23,254
Our VFX systems are such that you

328
00:19:23,274 --> 00:19:24,574
can think of them as modules.

329
00:19:25,215 --> 00:19:27,216
They are not coupled in code, but they

330
00:19:27,256 --> 00:19:28,536
are coupled with data.

331
00:19:28,996 --> 00:19:30,977
One module can produce some data.

332
00:19:30,997 --> 00:19:33,478
For example, the fluid simulation

333
00:19:33,758 --> 00:19:37,800
gives you a volume which contains the velocities.

334
00:19:38,600 --> 00:19:40,461
And you can feed that into the next.

335
00:19:42,287 --> 00:19:44,247
next module, for example, our particle engine.

336
00:19:48,329 --> 00:19:49,950
So in here, can you see the mouse cursor?

337
00:19:49,970 --> 00:19:50,990
I don't think you can.

338
00:19:51,290 --> 00:19:53,611
But the idea is that you set this kind of,

339
00:19:53,951 --> 00:19:55,192
we call it fluid bell.

340
00:19:55,952 --> 00:19:57,173
So fluid bell is to here.

341
00:19:57,593 --> 00:19:59,694
And we grab it in that second line.

342
00:19:59,774 --> 00:20:02,015
You can see that that's what we call it.

343
00:20:02,575 --> 00:20:04,316
And we use, again, our metalanguage

344
00:20:04,416 --> 00:20:07,597
to expose these things to the gameplay side.

345
00:20:08,156 --> 00:20:11,498
And we're free to sample from this velocity field.

346
00:20:11,598 --> 00:20:13,639
In fact, we can even write to that velocity field

347
00:20:13,999 --> 00:20:14,820
from the particles.

348
00:20:16,801 --> 00:20:19,382
And with this code, well, it's pretty simplistic.

349
00:20:19,563 --> 00:20:21,324
But it actually doesn't take too much

350
00:20:21,544 --> 00:20:23,545
to create this kind of an effect.

351
00:20:24,766 --> 00:20:27,367
We're just spawning a bunch of point particles in the middle.

352
00:20:28,068 --> 00:20:29,728
And we have a constant, this kind

353
00:20:29,748 --> 00:20:33,911
of a repetitive fluid impulse blowing

354
00:20:34,211 --> 00:20:37,193
towards that direction, where you have that wall.

355
00:20:37,654 --> 00:20:43,599
And because we're automatically rasterizing all of the environment into the obstacles,

356
00:20:43,639 --> 00:20:45,821
you'll have very interesting looking motion there.

357
00:20:47,382 --> 00:20:48,263
Super simple to do.

358
00:20:50,725 --> 00:20:51,566
As I said, we can...

359
00:20:52,046 --> 00:20:53,928
Or I don't know if I said, but now I'll say it.

360
00:20:53,988 --> 00:20:55,369
We can use multiple resources.

361
00:20:55,429 --> 00:21:02,896
We can have, for example, a fluid velocity field as well as a mesh buffer bound to the

362
00:21:02,916 --> 00:21:03,576
same particle.

363
00:21:03,616 --> 00:21:05,038
And you can do these kinds of things.

364
00:21:07,870 --> 00:21:11,233
In this video, you will see white point particles

365
00:21:11,394 --> 00:21:12,635
attached to this mesh.

366
00:21:12,655 --> 00:21:19,621
And once shot at, they just get detached from their positions.

367
00:21:19,741 --> 00:21:21,503
And they follow the fluid velocity field.

368
00:21:21,943 --> 00:21:23,404
And after some kind of a cool down,

369
00:21:23,845 --> 00:21:25,906
they will try to figure out their way back

370
00:21:25,967 --> 00:21:27,268
to the original position.

371
00:21:29,009 --> 00:21:33,113
We do have an example from the game.

372
00:21:35,610 --> 00:21:36,831
Yeah, there's trigger area.

373
00:21:36,851 --> 00:21:39,172
You walk past that, and you get these.

374
00:21:39,752 --> 00:21:40,833
We call these murals.

375
00:21:40,953 --> 00:21:43,575
There is a better term that I already forgot.

376
00:21:44,155 --> 00:21:48,258
But I always call these by the names

377
00:21:48,298 --> 00:21:50,579
that we come up with them from a technical point of view.

378
00:21:50,880 --> 00:21:52,080
Well, mural isn't technical.

379
00:21:53,121 --> 00:21:54,402
Anyway, particles, look at them.

380
00:21:58,545 --> 00:22:00,466
Let's talk a little bit about volumes,

381
00:22:00,526 --> 00:22:02,247
because we use those a lot.

382
00:22:03,143 --> 00:22:06,966
In Resogun, as well as Nex Machina, the whole world was constructed of volumes.

383
00:22:07,226 --> 00:22:09,548
Here we take a different approach.

384
00:22:09,588 --> 00:22:11,429
We use them using our resources.

385
00:22:12,890 --> 00:22:15,852
And we get volumes from fluid simulation.

386
00:22:15,872 --> 00:22:18,034
We also have a real-time voxelizer that will

387
00:22:18,074 --> 00:22:20,696
be able to voxelize static meshes and skeletal meshes.

388
00:22:21,496 --> 00:22:23,598
But we need to understand what volumes are.

389
00:22:23,658 --> 00:22:25,679
They're basically 3D textures, right?

390
00:22:26,180 --> 00:22:27,641
In a 2D texture, you have pixels.

391
00:22:27,681 --> 00:22:28,582
Here, we have voxels.

392
00:22:30,285 --> 00:22:34,187
This video shows you how you can access particles.

393
00:22:34,687 --> 00:22:36,829
Each point particle represents one voxel,

394
00:22:37,089 --> 00:22:38,129
and they have an ID.

395
00:22:38,950 --> 00:22:42,412
It's a flat number running from 0 to however many voxels

396
00:22:42,432 --> 00:22:44,974
you have, and that can be converted into a voxel

397
00:22:45,194 --> 00:22:46,294
or a world position.

398
00:22:48,656 --> 00:22:49,856
I'm not sure.

399
00:22:50,057 --> 00:22:51,097
Can you read those numbers?

400
00:22:51,197 --> 00:22:51,978
But there are numbers.

401
00:22:56,220 --> 00:22:58,262
We can use this, for example, for density fields.

402
00:22:59,040 --> 00:23:01,521
So the particles, again, here in this case,

403
00:23:01,581 --> 00:23:04,542
we are writing to the GPU resource.

404
00:23:04,682 --> 00:23:07,084
Previous examples showed how we read from them.

405
00:23:07,264 --> 00:23:08,064
Here we are writing.

406
00:23:08,544 --> 00:23:10,846
We are free to write to whatever voxels.

407
00:23:10,866 --> 00:23:13,007
We just have to take care that we

408
00:23:13,047 --> 00:23:16,628
don't have multiple threads writing into the same voxel.

409
00:23:19,010 --> 00:23:22,031
This is an example showcasing how we use volumetric fog

410
00:23:22,051 --> 00:23:22,851
in our case.

411
00:23:23,172 --> 00:23:24,252
On the right, you can see a.

412
00:23:24,754 --> 00:23:26,636
particle representation of that volume.

413
00:23:26,696 --> 00:23:28,658
And on the left, you can see a volumetric fog

414
00:23:28,718 --> 00:23:29,879
that we make out of that.

415
00:23:30,920 --> 00:23:35,444
The idea is that you spawn some density based on the SDF.

416
00:23:36,304 --> 00:23:37,886
And once you shoot at this thing,

417
00:23:38,226 --> 00:23:40,308
the fluid simulation will advect the particles.

418
00:23:40,388 --> 00:23:42,610
And you'll see particles higher up also.

419
00:23:45,333 --> 00:23:49,236
The artists were able to place these volumetric fog

420
00:23:49,276 --> 00:23:51,738
components in the level using this kind of very crude.

421
00:23:52,503 --> 00:23:54,645
visualization, and once you press play,

422
00:23:54,685 --> 00:23:56,406
it looks something like that.

423
00:23:56,906 --> 00:23:58,228
So the setup was pretty simple.

424
00:23:59,188 --> 00:24:02,191
And we used a player following fluid simulation, by the way,

425
00:24:02,411 --> 00:24:02,671
in this.

426
00:24:02,711 --> 00:24:03,752
So it's very affordable.

427
00:24:03,832 --> 00:24:06,054
Just write your particle code that does the advection,

428
00:24:06,114 --> 00:24:09,917
and you basically read from the fluid velocity

429
00:24:10,057 --> 00:24:11,398
and advect the density.

430
00:24:12,019 --> 00:24:12,599
Simple, right?

431
00:24:15,081 --> 00:24:16,522
Another use case, we can, of course,

432
00:24:16,582 --> 00:24:18,044
make a mesh out of the density field.

433
00:24:18,084 --> 00:24:20,005
We use marching cubes to extract the.

434
00:24:21,794 --> 00:24:27,755
extract the triangle mesh, and we get that kind of a pie.

435
00:24:28,355 --> 00:24:31,456
But we also have, in Returnal, I think

436
00:24:31,516 --> 00:24:34,057
it was within the first five minutes, if we're good,

437
00:24:34,077 --> 00:24:36,797
you could reach this room, which we call Cavern.

438
00:24:37,057 --> 00:24:39,278
There's a pit of fog, and there's a sphere.

439
00:24:40,138 --> 00:24:44,459
And whenever I watch a video of people playing this game,

440
00:24:44,559 --> 00:24:46,239
they just walk past that sphere.

441
00:24:47,730 --> 00:24:51,033
I hate it, there's so much tech behind this thing.

442
00:24:51,853 --> 00:24:53,615
Like there's, okay, I'll explain,

443
00:24:53,675 --> 00:24:56,497
I'll just use the rest of the time on this slide.

444
00:24:56,597 --> 00:24:59,339
There's a particle effect that spawns the density,

445
00:25:00,860 --> 00:25:03,261
there's a fluid simulation, dedicated one,

446
00:25:03,281 --> 00:25:05,763
that drives, I mean, that affects that density field,

447
00:25:05,823 --> 00:25:08,045
that gets fed back to the fluid simulation,

448
00:25:08,085 --> 00:25:10,126
that gets fed back to the marting cubes,

449
00:25:10,347 --> 00:25:13,229
and people walk past it.

450
00:25:13,289 --> 00:25:16,411
The GPU will perform equally.

451
00:25:17,292 --> 00:25:19,093
Well, if you shoot at it, or don't.

452
00:25:22,474 --> 00:25:24,054
Respect the sphere, shoot at it.

453
00:25:27,515 --> 00:25:30,916
As I mentioned, we have a real-time voxelizer.

454
00:25:31,216 --> 00:25:33,217
On the right-hand side, we have a skeletal mesh.

455
00:25:33,417 --> 00:25:36,738
On the left-hand side, we have a particle representation of that thing.

456
00:25:37,378 --> 00:25:41,099
And then we construct this kind of an isosurface out of it.

457
00:25:41,159 --> 00:25:44,340
And we just use a translucent material on that.

458
00:25:45,081 --> 00:25:45,941
It's very flexible.

459
00:25:46,348 --> 00:25:47,508
Again, data only.

460
00:25:47,809 --> 00:25:50,090
And the particle code, I won't be showing it here,

461
00:25:50,150 --> 00:25:51,070
but it's super simple.

462
00:25:51,290 --> 00:25:54,432
Sample from this voxelized result,

463
00:25:55,092 --> 00:25:58,494
spawn some density, feed it to fluid velocity,

464
00:25:59,174 --> 00:26:01,476
make a marching cube surface out of it, done.

465
00:26:03,477 --> 00:26:06,718
And as Risto already mentioned, in one of the bosses,

466
00:26:06,798 --> 00:26:11,361
we used it on that skull that will appear, 3, 2, 1, now.

467
00:26:12,341 --> 00:26:14,102
And again, shoot at that thing.

468
00:26:15,026 --> 00:26:15,726
You can shoot at it.

469
00:26:15,966 --> 00:26:17,847
It has a dedicated fluid simulation there.

470
00:26:18,167 --> 00:26:21,948
And if you shoot at it, you will be rewarded with this thing.

471
00:26:24,109 --> 00:26:27,030
It won't do any damage, so you might actually die.

472
00:26:27,530 --> 00:26:28,170
But it's worth it.

473
00:26:31,731 --> 00:26:32,631
I'll wrap up now.

474
00:26:32,651 --> 00:26:35,892
So the initial question was, can we do it with particles?

475
00:26:37,093 --> 00:26:37,753
I think we can.

476
00:26:40,494 --> 00:26:41,134
Thank you very much.

477
00:26:48,799 --> 00:26:51,161
And let me say this one thing.

478
00:26:51,922 --> 00:26:56,285
We love to talk about this, our own VFX and VFX in general.

479
00:26:56,345 --> 00:26:59,148
So we invite all people who want to come into,

480
00:26:59,208 --> 00:27:02,871
was it, to the wrap up room, it was maybe 2, 0, 4, or 7, 4.

481
00:27:03,451 --> 00:27:06,134
Either one.

482
00:27:07,515 --> 00:27:08,436
We'll be in one of those.

483
00:27:09,196 --> 00:27:09,637
OK, thanks.

