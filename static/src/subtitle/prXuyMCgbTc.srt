1
00:00:05,468 --> 00:00:08,290
We're going to be talking about exploring the tech and design of Noita,

2
00:00:08,310 --> 00:00:11,573
and because the game is not out yet, I'm just going to show you a trailer,

3
00:00:11,813 --> 00:00:14,274
and hopefully it'll explain a little bit about the game.

4
00:00:15,175 --> 00:00:17,376
We had some trouble getting the audio working, so it's not...

5
00:00:18,257 --> 00:00:18,617
again.

6
00:00:18,637 --> 00:00:20,498
This is a curse of mine.

7
00:00:21,739 --> 00:00:22,940
No, we have audio! Oh my god!

8
00:01:06,355 --> 00:01:09,472
So, thank you.

9
00:01:13,559 --> 00:01:14,699
This is essentially us.

10
00:01:15,279 --> 00:01:18,680
There's three of us and then this is our audio department here.

11
00:01:21,461 --> 00:01:25,182
So the talk is going to be divided into two parts.

12
00:01:25,322 --> 00:01:28,783
And the first part we're going to talk about the tech stuff and then it's going to be the

13
00:01:28,803 --> 00:01:29,503
design stuff.

14
00:01:29,543 --> 00:01:34,664
And I'm just going to say right now that the design part is there's not probably going

15
00:01:34,684 --> 00:01:37,505
to be enough time to go into too much detail about it.

16
00:01:37,545 --> 00:01:40,325
So it's going to be a bit more rambly.

17
00:01:40,345 --> 00:01:40,545
All right.

18
00:01:43,167 --> 00:01:47,991
For the tech, so we have a custom engine that's called Falling Everything, and you can kind

19
00:01:48,011 --> 00:01:56,336
of see from the trailer, we can do sand, and we can do liquids of all kinds, and then we

20
00:01:56,356 --> 00:01:57,938
can do gases as well.

21
00:01:59,679 --> 00:02:03,882
And for the blasting, we also have rigid bodies in there.

22
00:02:04,502 --> 00:02:08,605
And essentially I'm going to talk to you how we've sort of done all of that and how that

23
00:02:08,645 --> 00:02:09,746
is sort of being accomplished.

24
00:02:11,453 --> 00:02:17,916
And we're going to start at the basics by traveling back into a much better time period

25
00:02:18,556 --> 00:02:24,199
into the 90s when you could type into a text editor and characters would appear immediately.

26
00:02:26,180 --> 00:02:31,602
So back in the 90s I got started in Quick Basic and I discovered in Quick Basic that

27
00:02:32,583 --> 00:02:34,864
you can do this thing where you can put a pixel onto the screen.

28
00:02:35,946 --> 00:02:39,628
by Pset, and you can ask for a color of a pixel by point.

29
00:02:40,209 --> 00:02:41,570
So you point at something, and you ask

30
00:02:41,610 --> 00:02:42,570
what the color of that is.

31
00:02:44,051 --> 00:02:46,173
And with this amazing technology,

32
00:02:46,353 --> 00:02:51,016
I was able to essentially write a sand simulation.

33
00:02:51,036 --> 00:02:54,598
So what's happening here is it's testing

34
00:02:54,638 --> 00:02:56,660
that if there is a sand pixel here,

35
00:02:56,780 --> 00:02:59,001
it's looking at the line below it.

36
00:02:59,942 --> 00:03:01,403
If that's empty, then move down.

37
00:03:02,416 --> 00:03:06,962
And then if that's occupied, it looks to the left and to the right, to the down left

38
00:03:07,022 --> 00:03:08,685
and to the right, and it moves in that direction.

39
00:03:09,085 --> 00:03:14,813
And with that, you essentially get this, which is a rudimentary sand simulation.

40
00:03:15,675 --> 00:03:17,117
And this is like 95% of our tech is this.

41
00:03:21,301 --> 00:03:25,625
Then I really quickly discovered that you can also do water, and it's essentially the

42
00:03:25,685 --> 00:03:31,430
same algorithm, but at the very end of that, you also check to the left and to the right,

43
00:03:31,750 --> 00:03:33,592
and if they're empty, you move in that direction.

44
00:03:34,072 --> 00:03:39,637
So with that, all of it sort of settles down, and now you've got water and sand, and then

45
00:03:39,777 --> 00:03:42,479
the gases are just like inverse of this.

46
00:03:43,520 --> 00:03:46,022
So it's not that complicated.

47
00:03:46,603 --> 00:03:48,384
Now you all know if you've been wondering.

48
00:03:50,694 --> 00:03:57,558
But we're travel forward in time, about 12 years, and I'm using Visual C++ 6.0, and I

49
00:03:57,738 --> 00:03:59,139
do not know how good my life is.

50
00:04:01,220 --> 00:04:05,602
And I ended up making this game called Bloody Zombies, and this was made in 2008.

51
00:04:05,982 --> 00:04:12,006
And it was made for Gamma 256, and it was a competition where you had to make a game

52
00:04:12,046 --> 00:04:13,846
that used the resolution 256 times 256 or lower.

53
00:04:13,886 --> 00:04:13,927
So...

54
00:04:18,974 --> 00:04:23,981
While I was working on this, this is essentially using the same algorithm as in the Quick Basic

55
00:04:24,081 --> 00:04:24,201
one.

56
00:04:25,623 --> 00:04:31,031
But what I discovered is you can also, like, make it a bit more liquid-like.

57
00:04:32,213 --> 00:04:33,334
I'll show you more GIFs.

58
00:04:34,975 --> 00:04:40,079
So you can make it more liquid-like by adding another sort of simulation, which is like

59
00:04:40,119 --> 00:04:41,240
this particle simulation.

60
00:04:42,200 --> 00:04:46,343
And so the thing that's happening in this, like when the player jumps into the blood

61
00:04:46,403 --> 00:04:50,246
and it splatters all around, what's happening is it's taking one of those pixels out of

62
00:04:50,286 --> 00:04:51,747
that falling sand simulation.

63
00:04:52,508 --> 00:04:56,710
And it's putting it into a separate particle simulation,

64
00:04:57,310 --> 00:04:59,691
and it's tracking its velocity and gravity in there.

65
00:05:00,351 --> 00:05:03,813
And it's traveling in that until it hits another pixel

66
00:05:03,853 --> 00:05:05,854
in the world, and then it gets put back

67
00:05:05,954 --> 00:05:07,435
into the falling sand simulation.

68
00:05:09,276 --> 00:05:12,517
So with this, you can make things a lot more liquid-like

69
00:05:12,557 --> 00:05:14,638
and not just like this blobby thing that's falling down.

70
00:05:15,718 --> 00:05:18,640
And we're using this technique still to this day in Noita.

71
00:05:21,751 --> 00:05:29,955
So after I was done with Bloody Zombies, which was kind of like a quick game, I made Crayon

72
00:05:29,995 --> 00:05:36,038
Physics and then after that I was interested in like, can I add rigid bodies to this simulation?

73
00:05:37,599 --> 00:05:40,480
And I was using Visual Studio C++ 2008.

74
00:05:42,701 --> 00:05:46,103
And it turns out you can add rigid bodies to this.

75
00:05:47,583 --> 00:05:49,564
But it's a bit more complicated.

76
00:05:50,642 --> 00:05:57,291
And essentially the way this works is I'm using Box2D for the Rigidbody stuff.

77
00:05:59,294 --> 00:06:02,918
And it's sort of like integrated with this falling sand simulation.

78
00:06:03,659 --> 00:06:08,426
So the way it works is you have all the pixels that belong to a Rigidbody.

79
00:06:09,364 --> 00:06:12,567
They know their material and they know they want to be one sort of rigid body.

80
00:06:12,947 --> 00:06:17,931
And what you do with all those pixels is you apply a marching square algorithm to it.

81
00:06:18,652 --> 00:06:24,317
And that marching square algorithm essentially produces this outline of where all the pixels

82
00:06:24,477 --> 00:06:24,537
are.

83
00:06:26,413 --> 00:06:27,814
And that's a lot of vertices.

84
00:06:27,914 --> 00:06:32,617
So what you do then is you give it a douglas-pecker algorithm.

85
00:06:32,957 --> 00:06:34,978
And that's essentially to smooth that out.

86
00:06:35,519 --> 00:06:37,480
So you get a lot less vertices.

87
00:06:38,480 --> 00:06:44,004
And once you have the smoothed out mesh,

88
00:06:44,184 --> 00:06:46,385
you give it into a triangulation algorithm,

89
00:06:46,425 --> 00:06:47,786
and you get a bunch of triangles.

90
00:06:48,901 --> 00:06:51,722
And at this point, you're at a stage where you can just

91
00:06:51,742 --> 00:06:53,882
give those triangles into Box2D,

92
00:06:54,082 --> 00:06:57,823
and Box2D can sort of simulate those bodies.

93
00:06:59,464 --> 00:07:02,585
And the sort of final step to this is that every pixel

94
00:07:03,605 --> 00:07:07,386
that's here, it knows its UV coordinates

95
00:07:07,946 --> 00:07:10,507
inside of that triangle,

96
00:07:10,827 --> 00:07:12,527
and it knows which body it belongs to.

97
00:07:13,727 --> 00:07:16,268
So that's the way it can kind of like figure out

98
00:07:16,308 --> 00:07:17,128
its new position.

99
00:07:18,722 --> 00:07:22,328
And the way you put these two simulations together,

100
00:07:22,528 --> 00:07:24,631
so you have two different simulations at this stage.

101
00:07:25,112 --> 00:07:26,454
So the way you put them together is,

102
00:07:29,198 --> 00:07:30,580
at the very beginning of the frame,

103
00:07:31,501 --> 00:07:35,126
you take your rigid body pixels out of the world.

104
00:07:36,797 --> 00:07:40,959
Then you run your falling sand simulation one step and you run your box 2D one step

105
00:07:41,539 --> 00:07:47,222
and then you put your rigid body pixels back into the world and they get their updated

106
00:07:47,262 --> 00:07:49,043
positions from box 2D.

107
00:07:51,284 --> 00:07:56,166
And there might be this case where there is a pixel now in the way of a rigid body.

108
00:07:57,188 --> 00:07:59,649
And what you do in that case, you just take that pixel out

109
00:07:59,729 --> 00:08:02,591
and you put it into that bloody zombie's particle system

110
00:08:02,611 --> 00:08:03,651
and you throw it into the air.

111
00:08:04,112 --> 00:08:08,594
So what ends up happening with that is you get these splashes.

112
00:08:09,835 --> 00:08:12,336
Like, oh, that's not a good example.

113
00:08:12,476 --> 00:08:13,657
Let me give you a better example here.

114
00:08:14,237 --> 00:08:16,619
So when this body hits the water,

115
00:08:17,639 --> 00:08:19,660
all those water pixels get thrown into the world.

116
00:08:20,761 --> 00:08:22,122
So that's pretty much it.

117
00:08:24,554 --> 00:08:26,296
We had to do a bit more to it.

118
00:08:28,859 --> 00:08:34,085
One thing is if one of these pixels gets destroyed, you have to recalculate all of the marching

119
00:08:34,125 --> 00:08:37,629
squares and the box 2D body stuff and whatnot.

120
00:08:39,466 --> 00:08:45,451
For the rest of the world, wherever there's static, I'm using static in air quotes because

121
00:08:45,931 --> 00:08:47,392
there's nothing really static in our game.

122
00:08:48,753 --> 00:08:54,557
Static stuff, you just do the first two steps of that algorithm.

123
00:08:54,637 --> 00:08:59,581
So you do marching squares and Douglas Pecker and then you just make these hollow bodies

124
00:09:00,101 --> 00:09:00,522
of the world.

125
00:09:01,302 --> 00:09:09,184
And you only have to do that in places where there are rigid bodies or places where there are going to be rigid bodies.

126
00:09:10,405 --> 00:09:11,525
And that saves you a lot of...

127
00:09:13,686 --> 00:09:16,907
So that's pretty much the tech.

128
00:09:19,607 --> 00:09:21,468
There is one more step to it.

129
00:09:22,508 --> 00:09:22,968
And this is...

130
00:09:24,591 --> 00:09:25,792
Well, there's two more steps to it.

131
00:09:26,352 --> 00:09:27,932
So we're getting to Visual Studio 2013.

132
00:09:28,313 --> 00:09:32,735
And I have here a video of it taking eight minutes to boot up.

133
00:09:34,175 --> 00:09:35,956
And I'm making all of you suffer through this.

134
00:09:38,877 --> 00:09:40,058
Because I've had to suffer through it.

135
00:09:40,558 --> 00:09:46,241
So sort of the last step of this process of making The Tech of Noita was that...

136
00:09:47,284 --> 00:09:50,727
I had it running in this 256 times 256 area.

137
00:09:52,048 --> 00:09:56,612
But it was really hard to make good gameplay in 256 times 256.

138
00:09:58,313 --> 00:10:02,597
So the last step was figuring out how to make a really big world.

139
00:10:03,358 --> 00:10:05,319
Where you can have everything simulated.

140
00:10:06,480 --> 00:10:10,764
And the problem was that it was taking so much CPU time to test all the pixels

141
00:10:11,465 --> 00:10:13,406
that it was getting really complicated to do that.

142
00:10:15,451 --> 00:10:20,675
The solution to this was to figure out how to multi-thread the sort of falling sand simulation.

143
00:10:22,996 --> 00:10:34,704
And essentially, the way it's done is the sort of world is divided into these 64 times

144
00:10:35,165 --> 00:10:35,545
64 chunks.

145
00:10:37,346 --> 00:10:43,831
And each of those chunks keeps a dirty rack of things that it needs to update.

146
00:10:44,598 --> 00:10:48,300
So you can see here the dirty rex that are getting updated.

147
00:10:48,841 --> 00:10:52,142
And what this alone, like even if you don't multithread this,

148
00:10:52,703 --> 00:10:57,105
what this alone does is it removes so many of the pixels

149
00:10:57,125 --> 00:10:57,925
that you have to test.

150
00:10:58,986 --> 00:11:02,047
Because very often, the world ends up

151
00:11:02,268 --> 00:11:04,549
in some sort of semi-stable state.

152
00:11:04,829 --> 00:11:06,570
So then you don't have to update that much stuff.

153
00:11:08,651 --> 00:11:10,852
But you can also multithread this pretty easily.

154
00:11:13,927 --> 00:11:19,348
And the problem with multi-threading a simulation like this is because it's using the same buffer,

155
00:11:19,668 --> 00:11:21,509
so there's not like two buffers.

156
00:11:22,769 --> 00:11:28,590
You have to make sure that another thread is not updating the same pixel as you're updating.

157
00:11:29,691 --> 00:11:34,672
If there's like two threads trying to update the same pixel, all hell breaks loose and

158
00:11:34,752 --> 00:11:35,672
everything is destroyed.

159
00:11:38,253 --> 00:11:45,276
So, the way to do this is you, or the way we did it is we update the world in this sort

160
00:11:45,297 --> 00:11:47,238
of a checker pattern fashion.

161
00:11:49,819 --> 00:11:53,401
So, at the, we do four update rounds of the world.

162
00:11:53,801 --> 00:11:59,964
So, at the very beginning you gather all the things that have to be updated and then you

163
00:12:00,004 --> 00:12:03,566
pick, like in this case we're picking these white ones here.

164
00:12:06,254 --> 00:12:12,259
What it allows things to do is this guarantees that any pixel that's getting updated in this

165
00:12:13,040 --> 00:12:19,926
can go 32 pixels in any direction and it's guaranteed that another thread won't update

166
00:12:19,946 --> 00:12:19,986
it.

167
00:12:20,687 --> 00:12:25,832
So like you can see here this green area are all the pixels where it can kind of like travel

168
00:12:25,872 --> 00:12:26,032
to.

169
00:12:27,553 --> 00:12:32,157
And so the multi-threading is essentially like you take sort of every four.

170
00:12:33,462 --> 00:12:38,967
chunk and you throw them into a thread pool, then you wait for all of those to be calculated,

171
00:12:39,407 --> 00:12:46,793
then you do the next set of four, 64, 64 areas, you throw those into a thread pool, you wait

172
00:12:46,853 --> 00:12:51,897
until they're done, you do it once more, and then you do it once more.

173
00:12:52,777 --> 00:12:57,561
And then you've essentially managed to multitread the simulation and get a lot more out of your

174
00:12:58,902 --> 00:12:59,443
CPUs.

175
00:13:02,971 --> 00:13:10,074
The real final bit, because we have sort of a continuous big world, is probably the most

176
00:13:10,114 --> 00:13:13,536
standard technique of this, which is essentially just streaming.

177
00:13:13,956 --> 00:13:22,840
So in this, this yellow rectangle bit here represents the screen, and all of these other

178
00:13:26,702 --> 00:13:29,163
It's 512, 512 areas of the world.

179
00:13:29,883 --> 00:13:34,364
So as you sort of travel around in the world, the procedural generation system is generating

180
00:13:34,404 --> 00:13:35,645
new worlds as you're going.

181
00:13:36,465 --> 00:13:40,187
And we try to keep 12 of these in there at the same time.

182
00:13:41,627 --> 00:13:45,909
And then we just like take the furthest one and we write it to the disk.

183
00:13:47,249 --> 00:13:48,910
And then you read it back if you ever go there.

184
00:13:50,220 --> 00:13:56,666
And all of this sort of creates this very nice feeling that the whole world is being

185
00:13:56,706 --> 00:14:02,551
simulated all the time, even though we're kind of cleverly figuring out what needs to

186
00:14:02,591 --> 00:14:03,072
be updated.

187
00:14:06,775 --> 00:14:09,978
So, that was the tech.

188
00:14:11,419 --> 00:14:13,261
And now we're off into the design.

189
00:14:17,297 --> 00:14:24,259
I just want to say that the tech part is, for us, or for me, it's been the sort of easier

190
00:14:24,319 --> 00:14:25,159
thing to work on.

191
00:14:25,179 --> 00:14:28,260
And it's the game design that has been the more complicated and difficult.

192
00:14:28,620 --> 00:14:35,841
And the reason for that is that for the tech stuff, you can ask these falsifiable questions.

193
00:14:36,481 --> 00:14:38,302
Like you can ask, does this look like water?

194
00:14:38,322 --> 00:14:40,602
Is it running at 60 frames a second?

195
00:14:40,862 --> 00:14:41,842
Yes, it's kind of done.

196
00:14:42,563 --> 00:14:46,003
But when you come to game design, you have all these questions like, is this game fun?

197
00:14:47,376 --> 00:14:50,019
And it's like, well, depends who's asking the question,

198
00:14:50,359 --> 00:14:51,320
who's answering.

199
00:14:51,780 --> 00:14:55,183
I enjoy kicking ragdolls around for eight hours a day.

200
00:14:55,824 --> 00:14:58,286
But I don't know if anyone else is going to enjoy that.

201
00:14:59,407 --> 00:15:02,751
So for us, the real question is, hopefully,

202
00:15:02,791 --> 00:15:04,272
the tech was kind of cool and impressive.

203
00:15:04,412 --> 00:15:07,015
But does it produce interesting gameplay?

204
00:15:09,662 --> 00:15:14,824
And the answer to that is, I mean, the game's not out so we don't quite know,

205
00:15:14,924 --> 00:15:17,224
but the answer to this is very complicated.

206
00:15:21,426 --> 00:15:24,767
So the naive answer to this question, does it produce interesting gameplay,

207
00:15:24,787 --> 00:15:29,288
and this is the position I had when I sort of started this, is that, of course,

208
00:15:29,408 --> 00:15:31,508
this is going to produce all this interesting gameplay.

209
00:15:31,528 --> 00:15:35,570
It's going to work as like this perpetual motion machine of emerging gameplay.

210
00:15:36,739 --> 00:15:37,699
And I was kind of right.

211
00:15:37,900 --> 00:15:42,143
This physics engine works in that way, that there's a lot of emergent stuff that happens.

212
00:15:42,784 --> 00:15:48,309
But what I did not realize is that emergent gameplay comes in two colors.

213
00:15:48,769 --> 00:15:52,813
You've got the cool and interesting thing that everyone is always hyped about and you

214
00:15:52,833 --> 00:15:54,715
think when you hear the words emergent gameplay.

215
00:15:55,656 --> 00:15:58,578
But it also comes in this game-breaking fashion.

216
00:16:00,033 --> 00:16:02,535
That can just completely devastate your game.

217
00:16:03,316 --> 00:16:07,540
So this is an early prototype I did, and the idea is that you have this 2D building.

218
00:16:07,980 --> 00:16:12,163
And what I didn't realize is if you simulate all of that, it's going to end up as this

219
00:16:12,884 --> 00:16:14,545
pile of rubble at the bottom of the screen.

220
00:16:16,547 --> 00:16:21,211
And this is kind of cool in a way, but how are you going to build a game out of this

221
00:16:21,531 --> 00:16:24,093
when all your level design is going to end up as rubble?

222
00:16:25,136 --> 00:16:27,878
And you can imagine building a game on top of a system like this.

223
00:16:28,158 --> 00:16:29,800
It's going to be a nightmare.

224
00:16:31,941 --> 00:16:37,165
So really, the process of making Noita

225
00:16:37,205 --> 00:16:39,948
has really been a process of trial and error,

226
00:16:41,689 --> 00:16:48,534
and a process of trying to tame this emergent chaos beast

227
00:16:49,035 --> 00:16:50,055
that is our physics engine,

228
00:16:51,336 --> 00:16:53,118
and to find a game that's sort of like...

229
00:16:54,083 --> 00:16:58,247
Maximises the good emergent stuff while sort of minimising the bad ones.

230
00:16:58,888 --> 00:17:02,071
And the way we've approached this is testing a lot of things.

231
00:17:02,111 --> 00:17:05,475
So we've tested a bunch of different games, we've tested a lot of different things.

232
00:17:05,895 --> 00:17:10,520
And it's because it's so hard to know, like, if you put something in there, is it the coolest

233
00:17:10,560 --> 00:17:12,542
thing or the thing that's going to break the game.

234
00:17:18,454 --> 00:17:21,357
So besides testing a bunch of different games,

235
00:17:23,519 --> 00:17:26,161
what's ended up happening often is we've made changes.

236
00:17:27,422 --> 00:17:30,084
And then we've sort of ended at a sort of local maxima.

237
00:17:30,684 --> 00:17:32,666
So a local maxima is sort of a place

238
00:17:32,686 --> 00:17:34,007
where the game was kind of fun.

239
00:17:35,188 --> 00:17:37,590
But we felt that there could be something much better out there.

240
00:17:37,630 --> 00:17:41,714
And we didn't know what we should be doing to get there.

241
00:17:42,414 --> 00:17:44,536
So as an example of that sort of a thing,

242
00:17:49,244 --> 00:17:52,186
This is an earlier version of the game.

243
00:17:53,346 --> 00:17:57,789
The player had this tool where they could like dick through everything.

244
00:17:58,429 --> 00:17:59,029
This drill.

245
00:18:00,250 --> 00:18:01,190
And it was kind of fun.

246
00:18:01,391 --> 00:18:04,012
You would get this at the very beginning of the game.

247
00:18:04,472 --> 00:18:08,734
And it was kind of fun and interesting to go around the world using this tool.

248
00:18:09,135 --> 00:18:10,295
But the problem with it...

249
00:18:11,730 --> 00:18:15,753
was that it essentially broke all the combat gameplay.

250
00:18:16,293 --> 00:18:21,798
Because what you would do is you'd drill this hole into a wall and you'd shoot all the enemies

251
00:18:21,858 --> 00:18:22,899
through that tiny hole.

252
00:18:23,979 --> 00:18:30,624
And then it was kind of fun but it was also kind of like breaking the whole combat gameplay.

253
00:18:31,145 --> 00:18:37,910
So what we ended up doing at some point was just like taking the drill out completely.

254
00:18:39,076 --> 00:18:43,939
And what ended up happening there for a while was that the game got a lot worse.

255
00:18:45,421 --> 00:18:51,024
Because like the whole procedural generation system was built with that in mind that you

256
00:18:51,065 --> 00:18:52,005
would go through everything.

257
00:18:52,766 --> 00:18:57,089
And it was kind of worse for a while until we actually fixed everything and then we were

258
00:18:57,149 --> 00:18:59,310
actually at a better position than we started.

259
00:19:04,097 --> 00:19:08,321
And sort of besides being stuck at these sort of local maximas, which happens very often,

260
00:19:08,842 --> 00:19:15,048
we few times sort of managed to push the game forward in a big splash into something better.

261
00:19:15,749 --> 00:19:22,575
And one of those things was when we decided to sort of make it roguelite, which means

262
00:19:22,635 --> 00:19:25,058
it's a permadeath game with procedural generation.

263
00:19:31,310 --> 00:19:36,492
What really happened when we sort of made it Roguelite was that we managed to sort of

264
00:19:36,693 --> 00:19:41,454
shift this sort of, like we have this emergent chaos beast that is our physics engine.

265
00:19:41,615 --> 00:19:47,977
We're sort of shifting, dealing with it first A, to the player, and then B, to the sort

266
00:19:47,997 --> 00:19:49,458
of random nature of the game.

267
00:19:50,378 --> 00:19:54,340
So like because the world's out there to kill you, you as a player have to pay attention

268
00:19:54,380 --> 00:19:58,621
to it, and sort of B, because of the random nature of the game.

269
00:20:00,751 --> 00:20:02,853
We got to put back some stuff.

270
00:20:02,873 --> 00:20:08,697
So for example, the drill that I mentioned earlier that broke our previous game that

271
00:20:08,757 --> 00:20:13,561
wasn't Rougelike, it has made its comeback in Noita.

272
00:20:14,421 --> 00:20:20,946
And because the game is random, you as a player, you can't build all your strategies around

273
00:20:21,006 --> 00:20:25,710
just finding this one tool and beating the game with it, because it's not that good.

274
00:20:26,450 --> 00:20:29,132
It can sort of go back into the game and be there.

275
00:20:30,198 --> 00:20:32,639
And it's actually kind of fun as a player, like now,

276
00:20:34,541 --> 00:20:37,723
as a player, like finding this drill

277
00:20:38,263 --> 00:20:39,724
and then figuring out how to use it,

278
00:20:39,844 --> 00:20:43,606
and then figuring out that you can kind of break a bit of the combat if you use that.

279
00:20:43,907 --> 00:20:45,127
That's like an exciting thing.

280
00:20:45,167 --> 00:20:48,570
Like, you think you're really clever and you found something that the designers don't know,

281
00:20:48,650 --> 00:20:50,111
and it's kind of like an exciting moment.

282
00:20:51,772 --> 00:20:55,594
But we've gotten away with a lot of that stuff because of the random nature.

283
00:20:58,261 --> 00:21:01,763
Another thing making it permadeath really fixed for us is

284
00:21:03,044 --> 00:21:05,245
you essentially get a new world every time you play.

285
00:21:05,986 --> 00:21:07,807
So previously it used to be...

286
00:21:10,458 --> 00:21:15,101
It used to be sort of a similar game, but it would be like in Terraria,

287
00:21:15,161 --> 00:21:18,583
that when you died, your stuff would remain in the world and you could go pick that up.

288
00:21:19,044 --> 00:21:22,846
But the problem with that was because we have such a highly dynamic world,

289
00:21:23,326 --> 00:21:26,768
you as a player, you could like, let's say you have to get into this portal

290
00:21:27,989 --> 00:21:32,472
and you fill out this place with lava and it's a persistent world,

291
00:21:32,912 --> 00:21:34,973
then you sort of essentially screw to yourself.

292
00:21:35,614 --> 00:21:37,475
You can't ever make it there anymore.

293
00:21:39,186 --> 00:21:42,891
But because we have a permadeath game, we don't really care about that that much.

294
00:21:43,211 --> 00:21:49,819
So if you as a player are dumb enough to block your progress in the game, that's on you.

295
00:21:50,620 --> 00:21:53,864
Get a new chance when you die, and hopefully you'll die very quickly.

296
00:21:56,227 --> 00:21:58,609
Or very likely you're going to.

297
00:22:02,175 --> 00:22:05,737
So I'm going to talk about a few more things, hopefully.

298
00:22:06,177 --> 00:22:06,597
We have time.

299
00:22:06,857 --> 00:22:10,960
So this is probably the thing that's most obvious to people,

300
00:22:11,000 --> 00:22:13,441
is when we made it a roguelite, we

301
00:22:13,481 --> 00:22:15,862
managed to make it a challenging game.

302
00:22:16,483 --> 00:22:20,945
And the benefit of that for us is, in a moment,

303
00:22:21,325 --> 00:22:25,287
the benefit of that for us is you as a player,

304
00:22:25,367 --> 00:22:28,529
you really have to pay attention to the world and to the physics

305
00:22:28,669 --> 00:22:29,410
and how it works.

306
00:22:32,358 --> 00:22:33,998
physics are there to kill you.

307
00:22:37,200 --> 00:22:41,962
And a related note to this was one of the prototypes we did, you played as sort of a

308
00:22:42,062 --> 00:22:46,304
God-like entity and you could like spam lightning everywhere and kill everyone.

309
00:22:46,604 --> 00:22:52,747
And it was really fun for about 20 minutes, like being this super powerful entity.

310
00:22:55,339 --> 00:23:00,401
But the problem with this was that you wouldn't essentially pay that much attention to the

311
00:23:00,481 --> 00:23:01,282
physics of the world.

312
00:23:01,842 --> 00:23:06,685
Like the physics simulation turned into sort of a visual effect for you instead of being

313
00:23:06,725 --> 00:23:08,046
a thing that you had to pay attention to.

314
00:23:09,214 --> 00:23:14,696
But now making this a rogue-lite has sort of allowed us to have our cake and eat it too.

315
00:23:15,216 --> 00:23:19,638
So at the very beginning of the game, you sort of, as a player, have to pay a lot of attention to the world,

316
00:23:20,078 --> 00:23:23,099
but if you make it far enough there, you can become, like, super powerful

317
00:23:23,119 --> 00:23:24,640
and you can just, like, destroy everything in this one.

318
00:23:27,721 --> 00:23:30,722
And the reason we did not, like, figure out that we should make this

319
00:23:32,203 --> 00:23:34,263
rogue-lite impermanent game at the very beginning...

320
00:23:36,513 --> 00:23:38,915
I think we had a very good reason for that.

321
00:23:39,015 --> 00:23:45,759
And the idea behind that was that it's going to be super annoying playing this game and

322
00:23:45,819 --> 00:23:49,822
you're going to get killed because of a physics glitch or some sort of physics thing that's

323
00:23:49,842 --> 00:23:51,583
going to kill you and you don't understand what's happening.

324
00:23:53,865 --> 00:23:59,849
And sort of our fix to that has been to try and fix as many of the glitches as possible.

325
00:24:01,494 --> 00:24:05,695
or make it so that if there's a glitch that we haven't figured out how to fix,

326
00:24:06,235 --> 00:24:07,356
that it's not going to kill you.

327
00:24:08,656 --> 00:24:13,498
So, like, right now the rigid bodies don't damage the player,

328
00:24:13,818 --> 00:24:15,439
but they damage the enemies in there.

329
00:24:16,159 --> 00:24:18,680
And the reason for that is we haven't, like, figured out

330
00:24:18,720 --> 00:24:20,561
that maybe sometimes the rigid bodies can get...

331
00:24:21,333 --> 00:24:24,874
It's kind of like wobbly in a place and there's going to be huge forces that would kill the

332
00:24:24,914 --> 00:24:25,734
player immediately.

333
00:24:25,754 --> 00:24:27,875
So we're just like, let's just disable that.

334
00:24:28,095 --> 00:24:29,375
That seems to work decently.

335
00:24:30,256 --> 00:24:31,976
It'll probably make its comeback later on.

336
00:24:35,918 --> 00:24:43,840
But the other part of that, which I have realized during this process, is that it's really about

337
00:24:45,180 --> 00:24:46,401
communication to the player.

338
00:24:49,072 --> 00:24:54,396
So if the player dies because of something, like there's lava that drops out of nowhere,

339
00:24:55,216 --> 00:24:58,238
they're going to be super, they might be super pissed at the game if they think that's like

340
00:24:58,258 --> 00:24:59,699
a glitch or some random thing.

341
00:25:00,660 --> 00:25:04,703
But if the player notices that there's like a wooden plank here and there's lava on top

342
00:25:04,743 --> 00:25:09,867
of that and they walk underneath there and then the wooden plank sets on fire and the

343
00:25:09,907 --> 00:25:10,828
lava drops on them.

344
00:25:11,817 --> 00:25:16,180
Then if the player sees that, they're going to blame themselves for it.

345
00:25:16,280 --> 00:25:18,482
They're going to be like, oh, I wasn't careful enough.

346
00:25:19,502 --> 00:25:24,666
And really the difference between someone hating your permadeath game and sort of blaming

347
00:25:24,706 --> 00:25:30,529
themselves for it really is almost I think communication of these emerging systems.

348
00:25:31,670 --> 00:25:36,453
And if you look at some classic games, like if you look at NetHack.

349
00:25:37,607 --> 00:25:42,928
NetHack is actually really good at communicating what's happening in there.

350
00:25:43,028 --> 00:25:47,929
Like it stops, the game stops and there's a line on top of the screen that says, that

351
00:25:48,029 --> 00:25:49,789
actually says what's happening in the world.

352
00:25:51,230 --> 00:25:55,511
And there's a funny thing like when you add this sort of communication thing there that

353
00:25:55,571 --> 00:26:02,372
happens is you as a player sort of attribute more to the emergent system than actually

354
00:26:02,892 --> 00:26:03,972
might even be in there.

355
00:26:05,113 --> 00:26:05,293
So.

356
00:26:06,893 --> 00:26:13,196
We had a sort of a thing where you would get stained by the liquids that you walk through.

357
00:26:14,517 --> 00:26:20,081
So, for example, if you got covered in blood, you'd be red and whatnot.

358
00:26:20,521 --> 00:26:22,682
And it was purely visual at some point.

359
00:26:23,743 --> 00:26:28,145
And then we added, like, let's make it so that if you're covered in oil, you're more likely to ignite.

360
00:26:30,007 --> 00:26:33,749
And that was kind of confusing to people.

361
00:26:33,809 --> 00:26:35,490
Like, they didn't realize, okay, they're going to get...

362
00:26:37,615 --> 00:26:42,798
So the last thing we just did was we added these UI icons on top of you as a player that

363
00:26:42,918 --> 00:26:45,059
indicate which liquid you're covered in.

364
00:26:45,559 --> 00:26:47,280
So the blue one here indicates you're wet.

365
00:26:48,040 --> 00:26:53,363
And as soon as that went in, it went from being like this obscure thing that no one

366
00:26:53,403 --> 00:26:56,944
got into a thing where people started attributing things to this.

367
00:26:57,364 --> 00:27:01,606
So like they said, oh, I'm wet now, so I would probably take more damage from being electrocuted.

368
00:27:02,167 --> 00:27:05,688
And that wasn't implemented in there, but everyone sort of assumed that that's the case.

369
00:27:07,066 --> 00:27:13,071
And to demonstrate, like, as an anecdote, how powerful this thing was, we had, like,

370
00:27:13,632 --> 00:27:17,635
when you're wet, now I think you take more damage from being electrocuted, but when you're

371
00:27:17,655 --> 00:27:22,039
wet you're not as easily, you don't ignite as easily, and that was actually implemented

372
00:27:22,079 --> 00:27:22,379
in there.

373
00:27:23,340 --> 00:27:28,704
And then we broke it at some point, and for like two months it was not working, but we

374
00:27:28,824 --> 00:27:32,908
all sort of assumed that it's working there and we're just like avoiding it because it's

375
00:27:32,928 --> 00:27:34,069
like it's communicating this thing.

376
00:27:35,225 --> 00:27:39,168
And I think some games like Dwarf Fortress and The Sims, for example,

377
00:27:39,969 --> 00:27:44,512
managed to rise above to a certain level where players actually attribute more

378
00:27:44,572 --> 00:27:47,113
to the emergent systems that actually are in there.

379
00:27:48,294 --> 00:27:51,556
Okay, that's about all the things that I have.

380
00:27:51,596 --> 00:27:53,338
I think we have a few minutes for questions.

381
00:27:54,078 --> 00:27:54,999
We have one question or two?

382
00:27:56,179 --> 00:27:57,200
Two minutes. Okay, thank you.

383
00:28:05,098 --> 00:28:05,379
Hello.

384
00:28:05,619 --> 00:28:05,899
Hey.

385
00:28:06,739 --> 00:28:11,742
I'm curious, you mentioned that the simulation was single buffered, everything happened in

386
00:28:11,762 --> 00:28:12,602
the same buffer.

387
00:28:12,622 --> 00:28:13,363
Yes.

388
00:28:13,883 --> 00:28:15,744
Is there a reason or did you try double buffering?

389
00:28:17,625 --> 00:28:21,847
Well, originally it was just that's the way it got going.

390
00:28:22,988 --> 00:28:27,510
But later on I realized like you can't, like if you do a double buffer then you have to

391
00:28:27,570 --> 00:28:28,551
actually update everything.

392
00:28:29,779 --> 00:28:33,662
Right, unless you sort of double buffer every chunk separately,

393
00:28:33,882 --> 00:28:36,143
but then you have to sort of maintain two different buffers.

394
00:28:37,384 --> 00:28:40,646
And I don't think there's different kinds of simulations

395
00:28:40,686 --> 00:28:42,447
that you can do if you do double buffer.

396
00:28:44,328 --> 00:28:46,369
Falling sand stuff is much more harder, I think,

397
00:28:46,750 --> 00:28:49,631
because then you have to figure out where does this pixel have to go,

398
00:28:49,651 --> 00:28:52,633
because right now pixels can only occupy one place.

399
00:28:53,774 --> 00:28:54,174
Cool, thanks.

400
00:28:54,474 --> 00:28:54,674
Thank you.

401
00:29:00,943 --> 00:29:01,804
Great talk, thank you.

402
00:29:02,785 --> 00:29:07,171
I wanted to ask about the procedural level generation, like how did you get that part

403
00:29:07,231 --> 00:29:07,872
going for you?

404
00:29:07,892 --> 00:29:10,996
Okay.

405
00:29:12,518 --> 00:29:12,899
As with...

406
00:29:13,239 --> 00:29:13,379
So...

407
00:29:14,652 --> 00:29:20,115
I forgot to mention that we've been working on this game for like seven, six years now.

408
00:29:20,855 --> 00:29:22,216
So we've tried a lot of things.

409
00:29:22,836 --> 00:29:25,578
And for procedural generation, we've tried a few different things.

410
00:29:25,978 --> 00:29:31,281
And there are a few different things in the game right now, but the main part of it is

411
00:29:31,942 --> 00:29:37,225
using Sean Barrett's Herringbone Wang tileset.

412
00:29:37,885 --> 00:29:39,526
So essentially...

413
00:29:42,275 --> 00:29:46,256
What it is, if everyone here knows how Spelunky does procedural generation.

414
00:29:46,736 --> 00:29:53,598
Spelunky does four times four squares and those squares can be connected with certain

415
00:29:53,638 --> 00:29:53,898
rules.

416
00:29:56,459 --> 00:30:00,300
The herringbone wang tileset is essentially...

417
00:30:00,320 --> 00:30:03,901
Do we have anything?

418
00:30:05,061 --> 00:30:06,221
I'll demonstrate it with these things.

419
00:30:06,641 --> 00:30:07,401
So it's like...

420
00:30:08,905 --> 00:30:11,025
This is the problem, you don't see the seam as easily.

421
00:30:11,065 --> 00:30:13,726
There's not a seam that goes throughout the whole world where you see like, oh, this is

422
00:30:13,746 --> 00:30:18,547
the part where we are on this grid and this is the part where we are on this grid.

423
00:30:43,460 --> 00:30:45,342
Do we have, are we done?

424
00:30:45,362 --> 00:30:49,586
Okay, if there are more questions,

425
00:30:49,667 --> 00:30:52,009
I think there's some sort of a place out there

426
00:30:52,049 --> 00:30:53,951
and I can, and hopefully answer those.

427
00:30:54,932 --> 00:30:56,094
Thank you so much for everyone.

