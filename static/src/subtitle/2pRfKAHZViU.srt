1
00:00:03,650 --> 00:00:05,431
So, we're both ready to get started.

2
00:00:06,011 --> 00:00:07,412
Jeez, I hope I said about, not about.

3
00:00:07,432 --> 00:00:08,613
That would completely give me away.

4
00:00:10,695 --> 00:00:12,176
All right, we're gonna, the lights?

5
00:00:13,797 --> 00:00:13,977
Yes?

6
00:00:14,438 --> 00:00:14,578
No?

7
00:00:17,440 --> 00:00:18,301
Yes, we're getting the lights?

8
00:00:18,661 --> 00:00:19,181
Okay, good.

9
00:00:20,262 --> 00:00:22,063
Okay, so if you're attending to,

10
00:00:22,844 --> 00:00:24,125
intending to see my presentation,

11
00:00:24,165 --> 00:00:25,526
How to Build Nightly When There Is No Night,

12
00:00:25,546 --> 00:00:26,747
then you are in the right place.

13
00:00:27,828 --> 00:00:29,369
I'm supposed to start with some housekeeping.

14
00:00:31,350 --> 00:00:35,792
You know, it's pretty late in the day, so they ask you to defrag, but I suspect it's probably not that big a deal.

15
00:00:37,013 --> 00:00:41,415
The surveys they send out afterwards, they encourage me to tell you to fill that out.

16
00:00:41,795 --> 00:00:44,936
If you have good things to say, then I would absolutely encourage that you do.

17
00:00:45,977 --> 00:00:49,098
If there's something that I don't cover as part of this or that I don't touch enough on,

18
00:00:49,939 --> 00:00:53,802
If you don't feel like telling me or asking about it in the Q&A afterwards, please let me know.

19
00:00:53,822 --> 00:01:00,688
This build CMCI stuff is a bit of the neglected stepchild of the industry in the process.

20
00:01:00,728 --> 00:01:03,790
If it's something that you're passionate about, which I'm assuming you are since you're here,

21
00:01:04,951 --> 00:01:07,833
let them know and like I said, maybe I can come back and do some more.

22
00:01:09,730 --> 00:01:12,131
I also wanted to extend a personal thanks just before we get started.

23
00:01:12,171 --> 00:01:13,771
I know everybody thanks you guys for coming,

24
00:01:14,252 --> 00:01:18,393
but it's 5.30, it's Thursday, it's late, we're tired, we're hungry,

25
00:01:18,693 --> 00:01:21,473
the Zork presentation is on, the South Park presentation is on,

26
00:01:22,154 --> 00:01:23,374
even I want to be at the Zork one,

27
00:01:23,394 --> 00:01:26,075
so I really appreciate that all you guys are here to listen to me instead.

28
00:01:26,975 --> 00:01:29,415
Alright, so I'm just going to take a quick second and introduce myself.

29
00:01:29,475 --> 00:01:30,716
So my name is Josh Nixdorf,

30
00:01:31,256 --> 00:01:34,557
I'm an Associate Technical Director up at Electronic Arts in Burnaby,

31
00:01:34,597 --> 00:01:36,457
which is in Canada, if I didn't already give that away.

32
00:01:37,277 --> 00:01:41,800
Technical Director is just a fancy title at EA for the guy who's always in trouble when things don't work.

33
00:01:42,400 --> 00:01:50,025
So I currently work with EA Sports, which doesn't really exist in terms of an organizational structure anymore.

34
00:01:50,905 --> 00:01:58,089
It used to be the studio in Orlando and the studio in Burnaby that made all the sports games that have the big EA Sports when you actually start the game.

35
00:01:58,549 --> 00:02:02,291
That'll still be there, that's not going away, it's just a marketing thing rather than organizational now.

36
00:02:03,052 --> 00:02:07,594
They've changed the company so now we're all working together and we can do more cool stuff.

37
00:02:07,654 --> 00:02:09,835
So my team is the development and release engineering team.

38
00:02:10,216 --> 00:02:17,760
We're responsible for the source control, the continuous integration, the builds, the dev side automated tests, the whole pile of that kind of stuff.

39
00:02:18,360 --> 00:02:26,824
As well as a bunch of the development workflows for the dev teams including FIFA, NHL, Madden, Tiger, UFC, that kind of stuff.

40
00:02:27,105 --> 00:02:32,027
And now that sports doesn't exist, we'll be extending that into various other games within EA.

41
00:02:33,762 --> 00:02:35,322
Alright, so...

42
00:02:37,863 --> 00:02:39,383
What did I mean by no night?

43
00:02:40,824 --> 00:02:45,025
Is it, you know, convincing your developers that they should, you know, forego sleep in order to work on the game?

44
00:02:45,045 --> 00:02:45,085
No.

45
00:02:46,606 --> 00:02:51,047
And even if I was here to talk to that, there's no way legal would have ever approved me giving you that secret.

46
00:02:52,428 --> 00:02:54,368
Thank you for whoever laughed, I appreciate that.

47
00:02:55,189 --> 00:02:58,650
No, seriously, I've never seen anything like that while I've been at EA.

48
00:03:00,230 --> 00:03:00,490
It's...oop.

49
00:03:03,533 --> 00:03:04,554
There we go.

50
00:03:04,614 --> 00:03:07,636
It's also not a presentation on how to work in an environment where the sun doesn't set.

51
00:03:07,816 --> 00:03:10,638
As I mentioned, I'm from Burnaby, which is in Vancouver, and if you've ever been there,

52
00:03:10,658 --> 00:03:12,119
you know that the sun's barely up.

53
00:03:12,760 --> 00:03:15,161
If you're specifically interested in how to work when the sun doesn't set,

54
00:03:15,221 --> 00:03:17,643
I can get you in touch with some of the guys in DICE in Sweden,

55
00:03:17,703 --> 00:03:19,484
and they could probably have much more insight into that.

56
00:03:19,504 --> 00:03:22,446
So what do I mean by this no night thing?

57
00:03:23,874 --> 00:03:30,240
Classically, our workdays are, I say, 9 to 5, but I don't know if you guys are anything like us, it's more like 11 to 7.

58
00:03:30,400 --> 00:03:32,361
And maybe that creeps even longer.

59
00:03:33,042 --> 00:03:38,647
The point is, there's some set period of time beyond which there's this window, this magic window after everybody goes home,

60
00:03:39,067 --> 00:03:40,548
where the automation can do its thing.

61
00:03:40,628 --> 00:03:44,692
It's generating artifacts, it's going back and getting coverage, it's doing things.

62
00:03:44,752 --> 00:03:46,493
It's these nightly builds that we all have.

63
00:03:47,394 --> 00:03:51,175
And typically when you've got your base automation set up going for a team,

64
00:03:51,195 --> 00:03:55,196
you've got some set of continuous builds and some set of nightly builds going on.

65
00:03:56,077 --> 00:03:59,098
So the problem we encountered, and it's what a lot of this presentation is going to cover,

66
00:03:59,178 --> 00:04:02,219
is as we took some of our games, specifically FIFA,

67
00:04:02,599 --> 00:04:05,620
and we moved that development of those teams more and more global,

68
00:04:06,461 --> 00:04:07,521
We lost that window.

69
00:04:07,882 --> 00:04:09,843
And it's really easy to take for granted that window.

70
00:04:10,343 --> 00:04:11,484
How important are your nightlies?

71
00:04:11,524 --> 00:04:12,744
Well, you'd find another way around it.

72
00:04:13,185 --> 00:04:17,387
At a certain point, that window is actually the flexibility for a lot of your processes.

73
00:04:17,707 --> 00:04:21,329
And when you lose it, you kind of find out how fragile a lot of these things really are.

74
00:04:23,173 --> 00:04:27,097
So in the course of this presentation, I'm going to discuss a couple of dirty secrets that we have.

75
00:04:28,778 --> 00:04:32,041
You will probably find, if you really think about it, that you have a lot of these things too.

76
00:04:32,442 --> 00:04:35,625
If any of you really thinks that your build system is absolutely perfect,

77
00:04:36,506 --> 00:04:39,749
and that nothing I said applies, I'd really like to hear from you at the end of this,

78
00:04:39,769 --> 00:04:40,950
because I want to know how you've done it.

79
00:04:41,671 --> 00:04:43,472
In the meantime, can I just do a quick poll of everybody?

80
00:04:43,812 --> 00:04:46,254
How many people are build engineers, build managers,

81
00:04:46,314 --> 00:04:48,295
someone who's responsible for the actual build stuff?

82
00:04:48,956 --> 00:04:50,837
Okay, I see a few hands. Okay, good.

83
00:04:51,398 --> 00:04:55,421
And how many people are here because they're really concerned about the builds they have?

84
00:04:55,801 --> 00:04:57,222
They're not convinced that they work well enough.

85
00:04:58,307 --> 00:05:00,667
Okay, that's a lot more hands. That's what I expected. Good. Okay.

86
00:05:01,047 --> 00:05:07,028
So this will cover things, a lot of best practices, even if you're not in an environment where you're going to be going highly distributed.

87
00:05:07,048 --> 00:05:12,950
One of the most helpful things that you'll get from this will be evidence to help your arguments.

88
00:05:13,070 --> 00:05:15,030
A lot of the stuff I'm going to talk about will be a no-brainer.

89
00:05:15,050 --> 00:05:17,951
You're going to look at that and go, why did you even tell me that? That's obvious.

90
00:05:18,371 --> 00:05:21,371
The point is I'm giving you an argument to take to the guys that have that money

91
00:05:21,792 --> 00:05:25,312
so that you can actually use that to improve your odds of getting this stuff.

92
00:05:25,332 --> 00:05:27,713
Because just because it makes sense doesn't mean that they give you money for it.

93
00:05:29,927 --> 00:05:30,447
All right.

94
00:05:32,168 --> 00:05:34,269
So in the beginning, our dev teams start like this.

95
00:05:34,630 --> 00:05:36,111
Apparently, we're all very, very young.

96
00:05:37,371 --> 00:05:40,053
We're happy, we're excited, we're all working together.

97
00:05:40,133 --> 00:05:42,094
We can see each other, we can talk to each other.

98
00:05:42,775 --> 00:05:44,796
When there's a problem, we run over to each other's desks,

99
00:05:44,836 --> 00:05:45,736
we work these things out.

100
00:05:45,996 --> 00:05:48,158
It's fantastic. This is the glory days.

101
00:05:48,918 --> 00:05:51,400
But typically it only works for really, really small teams.

102
00:05:52,140 --> 00:05:54,422
It doesn't take very long before you start organizing.

103
00:05:55,142 --> 00:06:00,045
And I'm going to use organizing as a dirty word here. Before you know it, you've got some set of game development.

104
00:06:00,065 --> 00:06:02,387
You've got a department for that. You've got an art department.

105
00:06:02,727 --> 00:06:05,889
Maybe you've got a localization department. Of course, you're going to have a QA department.

106
00:06:06,930 --> 00:06:12,493
And these guys are going to work together, but you get to the point where people don't need to talk to each other anymore.

107
00:06:13,534 --> 00:06:18,517
And once you get to that point, then it becomes a very logical progression of, well,

108
00:06:18,797 --> 00:06:20,818
do these people even really need to be co-located?

109
00:06:22,226 --> 00:06:23,767
And so I'm going to do a quick example of what

110
00:06:23,787 --> 00:06:24,808
ended up happening with FIFA.

111
00:06:25,249 --> 00:06:28,471
So largely, the FIFA soccer game is developed in Burnaby.

112
00:06:29,032 --> 00:06:30,853
And yes, for anyone who's thinking it,

113
00:06:30,913 --> 00:06:33,776
we get the irony of making a world-class soccer

114
00:06:33,816 --> 00:06:34,897
game in Canada.

115
00:06:35,297 --> 00:06:38,660
If it makes you feel any better, a huge proportion of the team

116
00:06:38,680 --> 00:06:39,400
are all European.

117
00:06:39,921 --> 00:06:42,763
So they're just a tiny little conclave in Canada.

118
00:06:43,204 --> 00:06:45,444
So classically the development happens in Burnaby.

119
00:06:47,445 --> 00:06:48,766
That was everything. It wasn't just the development.

120
00:06:48,786 --> 00:06:51,647
The art happens there. QA happens there. Everything happens there.

121
00:06:53,207 --> 00:06:54,848
Eventually these teams get to the point where,

122
00:06:54,868 --> 00:06:57,409
well, you know, maybe some of the stuff could get moved.

123
00:06:57,809 --> 00:07:01,230
And so localization was the first one that I remember to move somewhere else.

124
00:07:01,250 --> 00:07:02,371
So we moved that off to Madrid.

125
00:07:02,811 --> 00:07:08,115
Why did we do that? I don't know, I didn't make the decision, but I can make a pretty good guess that it probably had something to do with money.

126
00:07:08,516 --> 00:07:17,543
In this case, it's really easy to get access to people who speak a variety of languages in Europe, and Madrid was a nice low-cost place to do this.

127
00:07:18,023 --> 00:07:21,045
So in the old days, we would create our build, same as we would for QA,

128
00:07:21,405 --> 00:07:26,128
and we would transfer that massive ISO disk over to Spain,

129
00:07:26,168 --> 00:07:28,669
and they would play the game and add some sort of localization data,

130
00:07:28,749 --> 00:07:30,630
and potentially send that back.

131
00:07:30,990 --> 00:07:33,392
Now originally, they weren't really checking into the depot,

132
00:07:34,012 --> 00:07:38,255
but eventually someone pointed out that transferring 8.5 gig to Spain once a week

133
00:07:38,275 --> 00:07:39,495
was a really big waste of time,

134
00:07:39,896 --> 00:07:42,197
and if we were to simply get them access to the source control,

135
00:07:42,517 --> 00:07:46,680
they could likely build that build themselves faster than we can actually transfer it there.

136
00:07:47,440 --> 00:07:49,721
And once that happened, once they had access to source control,

137
00:07:50,081 --> 00:07:53,723
it becomes a viable option for them to start making their localization check-ins themselves

138
00:07:54,144 --> 00:07:55,825
rather than through working with someone in Burnaby.

139
00:07:57,605 --> 00:07:59,286
So then we added Hydrobat in India.

140
00:08:00,187 --> 00:08:04,689
And this started out being reasonably simple QA type stuff.

141
00:08:04,729 --> 00:08:07,511
Maybe they helped write some automation scripts that we would use for testing.

142
00:08:08,671 --> 00:08:09,232
Simple stuff.

143
00:08:09,612 --> 00:08:12,153
But as we worked with those guys more, we started to trust them more,

144
00:08:12,474 --> 00:08:14,555
we start using them for more and more stuff.

145
00:08:14,595 --> 00:08:16,716
And thankfully, they're causing some check-ins.

146
00:08:19,004 --> 00:08:23,427
Then we outsourced more, and we're still all doing Madrid and Hyderabad.

147
00:08:23,447 --> 00:08:24,208
We didn't stop that.

148
00:08:24,508 --> 00:08:27,991
We started doing more stuff in Buenos Aires and other parts of Argentina as well.

149
00:08:28,771 --> 00:08:34,416
And this was the first time that we really started working with people doing actual development on the main code base,

150
00:08:34,776 --> 00:08:38,859
not just some QA stuff or localization, general development going on.

151
00:08:39,619 --> 00:08:43,242
But still not necessarily a ton, and usually around specific features.

152
00:08:43,262 --> 00:08:45,544
So maybe we'll give them this feature and they'll do that.

153
00:08:45,624 --> 00:08:47,485
It's part of why I've got these guys colored in light blue.

154
00:08:47,906 --> 00:08:49,728
is they're not doing a ton of interactions.

155
00:08:51,449 --> 00:08:55,253
Well, and I probably shouldn't admit this, but I'm going to anyway, at some point

156
00:08:55,333 --> 00:08:58,857
we may have burned through all the people willing to be QA testers in Vancouver,

157
00:08:59,618 --> 00:09:02,080
and so we needed to do QA somewhere else.

158
00:09:02,100 --> 00:09:03,862
So Baton Rouge is where we moved it to.

159
00:09:04,483 --> 00:09:07,286
Probably not how it actually happened, but it's more colorful that way.

160
00:09:08,531 --> 00:09:13,094
And so a lot of our games do, at least a lot of the sports games, do testing on a Baton Rouge.

161
00:09:13,674 --> 00:09:16,536
And the same thing happens there. You start getting some really bright people there,

162
00:09:16,556 --> 00:09:18,457
and suddenly check-ins start flowing from there.

163
00:09:19,197 --> 00:09:24,900
And then finally, when what we would call Gen 4, but PS4 and Xbox One came along,

164
00:09:26,341 --> 00:09:30,183
we couldn't really just double the size of our dev team to handle the old,

165
00:09:30,463 --> 00:09:32,524
the current generation and the new stuff coming out.

166
00:09:32,884 --> 00:09:36,526
So we needed to find a way to get that dev team able to build for all these platforms.

167
00:09:37,027 --> 00:09:40,228
So, well, we opened up a studio in Bucharest in Romania,

168
00:09:40,889 --> 00:09:43,150
and actually I think we already had a mobile one, but we expanded it,

169
00:09:43,650 --> 00:09:49,053
and a bunch of the development of the main FIFA game started happening out of there.

170
00:09:49,734 --> 00:09:51,895
And that was the point where it really tipped the scales to,

171
00:09:51,915 --> 00:09:54,516
you know, almost half the check-ins are coming from Burnaby,

172
00:09:54,816 --> 00:09:57,718
and almost half the check-ins are coming from Bucharest,

173
00:09:57,838 --> 00:10:00,640
with small other sort of spice coming in from all these other ones.

174
00:10:01,040 --> 00:10:04,222
But the point was, once we got our check-ins looking like this,

175
00:10:04,743 --> 00:10:07,024
we stopped having those windows where we could do things.

176
00:10:07,044 --> 00:10:09,827
At any given time of the day, somebody was checking in.

177
00:10:12,889 --> 00:10:15,591
So what challenges did we hit when we started doing this?

178
00:10:15,971 --> 00:10:19,294
The first one, obvious, this sounds expensive.

179
00:10:19,754 --> 00:10:20,795
Obviously we're saving money,

180
00:10:21,235 --> 00:10:23,697
presumably the reason why we would do this outsourcing,

181
00:10:25,238 --> 00:10:26,499
but what is this doing technically?

182
00:10:27,300 --> 00:10:28,281
Integrations become...

183
00:10:29,623 --> 00:10:34,209
common. It was one thing when they were all localized, you could talk to people, now some

184
00:10:34,249 --> 00:10:38,055
guy in a different time zone is doing this thing and he's not talking to you at all. So

185
00:10:38,115 --> 00:10:42,742
these became much more expensive than they usually are. We've all seen this, we all know

186
00:10:42,782 --> 00:10:43,403
this problem.

187
00:10:44,725 --> 00:10:47,987
The works on my machine problem is a nightmare on a good day.

188
00:10:48,948 --> 00:10:52,271
When it's some guy in Romania who doesn't ever work any hours that you work,

189
00:10:52,331 --> 00:10:55,913
telling you that it works on his machine, this got substantially worse.

190
00:10:56,614 --> 00:10:58,455
I can't stress how much worse this got.

191
00:10:59,416 --> 00:11:01,337
Your branch health becomes another interesting note.

192
00:11:01,978 --> 00:11:06,021
As I called out before, you're working, you've got people checking in 24 hours a day,

193
00:11:06,341 --> 00:11:09,063
so you've just lost that window where you could do that risky check-in

194
00:11:09,123 --> 00:11:12,626
after everybody else goes home and just make sure that you've got things fixed by the morning.

195
00:11:13,306 --> 00:11:13,987
Alternatively...

196
00:11:14,907 --> 00:11:19,069
Maybe I check in, I take off for the day, and if it's broken, I'm going to log in at night, no big deal.

197
00:11:19,670 --> 00:11:25,292
You can't do that anymore. If your code base is broken, you're impacting someone else's ability to work.

198
00:11:27,533 --> 00:11:31,695
So let's start by talking about what were some of the things we did to address this integration cost.

199
00:11:33,136 --> 00:11:37,938
The first thing was recognizing how good we used to have it, basically.

200
00:11:37,958 --> 00:11:41,740
That local integrations were really, really simple, and we really wanted that back.

201
00:11:43,341 --> 00:11:44,362
What were we trying to do?

202
00:11:44,803 --> 00:11:49,107
At a certain point, we realized there was no way to make less integrations happen.

203
00:11:49,527 --> 00:11:52,310
When we went more distributed, things just got more complicated.

204
00:11:52,571 --> 00:11:57,896
It was basically not giving up, but accepting that it wasn't just integrations,

205
00:11:57,936 --> 00:11:59,838
there was a variety of things that got more difficult.

206
00:12:00,579 --> 00:12:04,581
An example I'll give is even syncing for the very first time.

207
00:12:05,301 --> 00:12:07,823
You've hired a new guy in Europe, it's his first day, what's he going to do?

208
00:12:08,443 --> 00:12:10,104
Well, he's got to sync the game, right?

209
00:12:10,604 --> 00:12:15,247
So we start syncing that from your North American depot and suddenly it's slowed down for everybody.

210
00:12:15,987 --> 00:12:20,310
Any time that we have these type of interactions, where developers can impact other developers,

211
00:12:20,390 --> 00:12:23,731
and I'm going to say developers a lot, but what I really mean is content creators,

212
00:12:24,112 --> 00:12:27,593
so these are your developers, your level designers, anyone who's checking in.

213
00:12:29,564 --> 00:12:34,227
Anything really. Anytime they're doing that, they're going to have some interactions.

214
00:12:34,707 --> 00:12:38,229
These things are going to run amok, and that's what you really need to be worrying about.

215
00:12:38,249 --> 00:12:41,451
And that was, I guess to reiterate this one last time, the key point.

216
00:12:41,951 --> 00:12:45,093
It wasn't really integrations that were a problem, it was interactions.

217
00:12:48,042 --> 00:12:54,264
So how we started addressing this was, we started thinking about our commits, our work, as a flow.

218
00:12:55,024 --> 00:13:00,485
And this is maybe a bit weird, especially if there's any product managers or any of that ilk present.

219
00:13:01,126 --> 00:13:05,507
You have these people, it's these people's jobs to make sure that the features get into the game,

220
00:13:05,787 --> 00:13:09,348
that it happens on schedule, that this thing ships and that you guys make money.

221
00:13:09,448 --> 00:13:10,268
Someone is planning that.

222
00:13:10,628 --> 00:13:14,409
If you're on the development side of things, you should care about that, you should be aware of that.

223
00:13:14,769 --> 00:13:19,513
But if you're responsible for the build and the build health, as a few of you were,

224
00:13:19,874 --> 00:13:22,296
or as a lot of you were if you're concerned about that stuff,

225
00:13:22,616 --> 00:13:25,278
then the right mindset for this is flow.

226
00:13:25,598 --> 00:13:27,320
How much work are these people able to do?

227
00:13:27,400 --> 00:13:29,722
What are the things that are blocking them from doing more work?

228
00:13:29,742 --> 00:13:33,105
Don't worry about the nature of that work. Think of it purely as a volume thing.

229
00:13:33,926 --> 00:13:37,429
At Electronic Arts, the team that I'm with, the development and release engineering team,

230
00:13:37,769 --> 00:13:38,429
that's what we do.

231
00:13:39,230 --> 00:13:43,654
We're the guys that are there to facilitate via CI or tools or processes.

232
00:13:43,974 --> 00:13:49,638
Whatever we can do, it's our job to make sure that that developer can get his features into the game as fast as possible

233
00:13:49,959 --> 00:13:55,043
and spend the least overhead possible worrying about whether or not the build is healthy.

234
00:13:57,174 --> 00:14:02,641
This flow analogy is really important too, as we're going to get to in a minute, because flows intersect.

235
00:14:03,402 --> 00:14:09,029
That individual user thinking this is work as a flow, this is obvious. I haven't told you anything particularly important.

236
00:14:09,410 --> 00:14:12,754
It's recognizing that all those flows have to meet at some point.

237
00:14:14,655 --> 00:14:16,677
And so, source control is where we call that out.

238
00:14:16,737 --> 00:14:21,160
So the best practice here is that recognizing that source control is the confluence of all your effort.

239
00:14:22,221 --> 00:14:24,263
There isn't a heck of a lot that you can do about that.

240
00:14:24,583 --> 00:14:27,365
Source control is where people's work are going to interact.

241
00:14:27,625 --> 00:14:30,968
And you may have other systems that do pre-submit or other things,

242
00:14:30,988 --> 00:14:34,811
so that things happen before it goes right to source control,

243
00:14:35,151 --> 00:14:37,913
but ultimately there's some place where all this data is going.

244
00:14:37,933 --> 00:14:39,995
That's probably source control.

245
00:14:40,335 --> 00:14:42,016
And that's where you're going to hit all these problems.

246
00:14:42,377 --> 00:14:49,302
And so recognizing what I said before, team growth makes it inevitable for the number of these interactions to grow.

247
00:14:52,773 --> 00:14:55,395
Branching is hopefully something that's crossed all of your minds by this point.

248
00:14:55,415 --> 00:14:57,136
Why isn't this guy talking about branching yet?

249
00:14:57,857 --> 00:14:59,958
This is absolutely a solution to this problem.

250
00:15:00,659 --> 00:15:03,261
For a little bit, it's a solution, not necessarily the solution.

251
00:15:03,541 --> 00:15:06,764
You get all these guys working in branches or some set of appropriate branches,

252
00:15:07,584 --> 00:15:10,567
and it definitely reduces the likelihood that you're impacted by someone else

253
00:15:10,627 --> 00:15:12,848
leaving their branch in an unhealthy state.

254
00:15:13,229 --> 00:15:15,590
But at some point, these things still need to get merged,

255
00:15:15,891 --> 00:15:18,112
and a lot of the same interaction problems still pop up.

256
00:15:19,413 --> 00:15:24,735
Game architecture is another perfectly reasonable way to solve a lot of the problems associated with this.

257
00:15:25,496 --> 00:15:35,280
If you can get your AI completely segregated such that it has almost no overlapping files, code, dependencies on your rendering system,

258
00:15:35,300 --> 00:15:37,260
which hopefully there aren't too many there anyway.

259
00:15:39,245 --> 00:15:40,647
Then it just makes it that much easier.

260
00:15:41,227 --> 00:15:44,289
The more dependent your code is, definitely the more you're going to hit this problem.

261
00:15:44,610 --> 00:15:46,731
But it is a solution, not necessarily the solution.

262
00:15:47,292 --> 00:15:50,815
So, some of what I've said so far probably sounds a little bit, you know, strange.

263
00:15:51,195 --> 00:15:54,378
Why would they have all these people that sound like they're checking into one branch?

264
00:15:54,438 --> 00:15:58,020
Well, this is the first dirty secret that I want to get out there.

265
00:15:58,661 --> 00:16:00,342
For almost all of the sports titles...

266
00:16:01,183 --> 00:16:07,285
Everybody works in the same branch. Now Madden guys don't work in the FIFA branch obviously. Madden has its branch, FIFA has its branch,

267
00:16:07,345 --> 00:16:14,308
NHL has its branch, but for the most part everybody, regardless of where they are in the world, is checking into mainline all the time.

268
00:16:14,877 --> 00:16:17,198
There's no staging branch, there's no anything else.

269
00:16:17,539 --> 00:16:18,579
Now, there's some exceptions to this.

270
00:16:18,619 --> 00:16:22,241
We definitely branch for events, E3, that kind of stuff.

271
00:16:22,642 --> 00:16:24,202
And there are exceptions to the rule.

272
00:16:24,463 --> 00:16:26,544
FIFA has done some clever things with their AI

273
00:16:26,564 --> 00:16:28,525
to allow that to be off in its own branch.

274
00:16:28,905 --> 00:16:30,346
But everybody who isn't working on the AI,

275
00:16:30,786 --> 00:16:32,887
checking into the same branch all the time.

276
00:16:34,308 --> 00:16:35,569
Why in the world would we do that?

277
00:16:35,629 --> 00:16:36,429
How does that work?

278
00:16:36,990 --> 00:16:39,831
Some of the stuff we're gonna cover in the next little bit.

279
00:16:40,752 --> 00:16:42,493
The trick is recognizing that

280
00:16:43,153 --> 00:16:46,136
The easier you can make those interactions that I've been talking about,

281
00:16:46,156 --> 00:16:48,177
and the earlier you can make them happen,

282
00:16:48,478 --> 00:16:50,439
the more viable you make something like this be able to work.

283
00:16:50,459 --> 00:16:53,942
So I'm going to give you some fake math because I couldn't help myself.

284
00:16:55,504 --> 00:16:59,047
And a graph, in case this isn't startlingly clear at this point.

285
00:17:01,515 --> 00:17:02,977
Reducing those interactions is bad.

286
00:17:03,197 --> 00:17:04,998
The number of interactions that you have, whether that's

287
00:17:05,899 --> 00:17:08,822
typically commits per day is the right kind of metric to think of for this,

288
00:17:09,122 --> 00:17:11,504
but it might be your team size if you don't know what your commits per day is.

289
00:17:12,765 --> 00:17:14,907
Trying to hold that constant or reduce that

290
00:17:15,267 --> 00:17:17,048
means that you're either going to have a smaller team

291
00:17:17,549 --> 00:17:20,852
or you're making people hold their check-ins locally longer.

292
00:17:21,172 --> 00:17:23,814
Holding those check-ins locally longer is just increasing the amount of effort

293
00:17:23,834 --> 00:17:25,636
you're going to have to do when it comes time to integrate.

294
00:17:26,977 --> 00:17:29,480
So the nice pretty line here, this optimized one,

295
00:17:29,901 --> 00:17:32,584
is trying to show you that you can reduce the pain of the interactions

296
00:17:33,064 --> 00:17:34,706
not by reducing the number of interactions,

297
00:17:35,027 --> 00:17:37,570
but by reducing the magnitude of those interactions.

298
00:17:37,950 --> 00:17:40,353
So what do I mean by that? It's time for some specifics.

299
00:17:43,157 --> 00:17:44,999
Make source control fast from every location.

300
00:17:45,917 --> 00:17:49,761
This is a no-brainer. Boy, if this is what this presentation is going to be about, you guys are going to be disappointed.

301
00:17:49,781 --> 00:17:51,263
I promise you it'll get better from here.

302
00:17:52,424 --> 00:17:57,189
This is one of those ones I'm talking about at the beginning where everybody knows this,

303
00:17:57,209 --> 00:17:59,832
but that doesn't mean that you're going to be able to get the money spent on this.

304
00:18:00,333 --> 00:18:02,836
So you're going to open up a new location.

305
00:18:02,856 --> 00:18:05,799
I don't know, you're doing some outsourcing again. Look at our case, Romania.

306
00:18:06,199 --> 00:18:08,741
How do you make sure that those guys are working really fast?

307
00:18:09,001 --> 00:18:11,843
Speed is easy when it's local, you just throw more hardware at the problem.

308
00:18:12,163 --> 00:18:14,465
When you're doing this in some type of distributed global environment,

309
00:18:14,705 --> 00:18:16,346
you have to rely on someone else's network,

310
00:18:16,607 --> 00:18:19,389
which means you're paying for access, you're paying for bandwidth.

311
00:18:19,449 --> 00:18:21,090
These things have a cost associated with them.

312
00:18:21,470 --> 00:18:25,493
Plus, moving large volumes of data is still expensive in 2014.

313
00:18:25,713 --> 00:18:27,855
I'd be interested to know what anybody's best metric is.

314
00:18:28,295 --> 00:18:31,416
But I can't imagine that we can move an ISO anywhere else in the world.

315
00:18:32,157 --> 00:18:33,818
Any signal... Overseas, let's put it that way.

316
00:18:33,838 --> 00:18:36,419
I don't think we can move a disk image, any big disk image overseas

317
00:18:36,839 --> 00:18:38,360
in under probably four hours.

318
00:18:38,720 --> 00:18:41,382
And even that's massively faster than it was just a couple years ago.

319
00:18:43,592 --> 00:18:49,718
So I'll go back to that early example where we talk about having someone in Europe that is doing their initial sync.

320
00:18:50,098 --> 00:18:53,481
Well, if he does their initial sync, he's impacting those local users.

321
00:18:53,902 --> 00:18:56,164
Say that problem is taken care of, but it's slow.

322
00:18:56,244 --> 00:18:58,886
He's connecting to this remote North American depot.

323
00:18:59,207 --> 00:19:04,231
Every time he goes to do a commit or any type of operation, it just sits there and does nothing for five minutes.

324
00:19:04,251 --> 00:19:05,773
It's from his perspective, it does nothing.

325
00:19:06,193 --> 00:19:09,056
Well, how's he going to react to that? He's going to start doing it less.

326
00:19:09,456 --> 00:19:12,079
And again, the less he starts doing it, the less he's integrating,

327
00:19:12,199 --> 00:19:15,382
the more expensive those are going to be, the more it's costing you.

328
00:19:16,183 --> 00:19:19,767
And so this is where a trade-off comes into this.

329
00:19:20,207 --> 00:19:21,428
Obviously, it's easy for me to say,

330
00:19:21,569 --> 00:19:23,671
spend all the money you can on getting that bandwidth.

331
00:19:23,991 --> 00:19:25,292
But that might not be the right thing to do.

332
00:19:26,292 --> 00:19:28,854
What you're going for here is to recognize that you have that option.

333
00:19:29,174 --> 00:19:31,496
The more you spend on bandwidth, the more you save on time.

334
00:19:31,836 --> 00:19:33,337
If you have no money to spend on that bandwidth,

335
00:19:33,697 --> 00:19:35,378
just recognize that you're paying for it in time.

336
00:19:35,638 --> 00:19:38,600
That might be a completely reasonable way to pay for it.

337
00:19:39,320 --> 00:19:42,962
So I'll go over what the architecture looks like on FIFA for this briefly.

338
00:19:44,443 --> 00:19:46,945
Imagine that that's Vancouver, sort of.

339
00:19:47,785 --> 00:19:49,667
All our developers are very classy. They wear suits.

340
00:19:51,514 --> 00:19:55,175
So the main repository for FIFA for historical reasons is located in

341
00:19:55,955 --> 00:19:59,256
Vancouver, Burnaby. All the local developers work on that.

342
00:20:00,356 --> 00:20:05,118
When we move to Romania, we set up a proxy in that location. All those developers work on that.

343
00:20:05,598 --> 00:20:11,720
When we expand it into South America, same thing. You set up a proxy there, you have all those developers work on that.

344
00:20:17,308 --> 00:20:20,290
The interesting thing here is, it goes back to the bandwidth,

345
00:20:20,330 --> 00:20:22,131
depending on the source control system that you're using,

346
00:20:22,151 --> 00:20:26,372
ours is set up such that those remote users,

347
00:20:26,672 --> 00:20:27,993
when they're using that proxy,

348
00:20:28,733 --> 00:20:30,374
when they do an initial action,

349
00:20:30,694 --> 00:20:32,215
that's when it synchronizes the surfer.

350
00:20:32,555 --> 00:20:36,456
So the proxy allows the data to be cached locally,

351
00:20:36,777 --> 00:20:38,978
but it isn't necessarily synchronizing locally.

352
00:20:39,298 --> 00:20:41,218
So those guys are paying some type of a time penalty

353
00:20:41,238 --> 00:20:42,299
when they do an initial sync.

354
00:20:43,300 --> 00:20:48,244
These little recycle arrows I put on here to represent what we built on top of the source control

355
00:20:48,644 --> 00:20:53,908
was just a local CI job that just does nothing but sync that local repository.

356
00:20:54,169 --> 00:20:57,051
And the purpose of doing that is to keep that thing always up to date

357
00:20:57,351 --> 00:21:01,475
so that on the end user's side, the sync is always as fast as possible.

358
00:21:01,515 --> 00:21:06,038
He never has to pay the initial penalty of synchronizing the data overseas.

359
00:21:06,338 --> 00:21:10,042
But again, this is a trade-off. We're paying for that in bandwidth.

360
00:21:10,962 --> 00:21:12,323
But we save devs time.

361
00:21:14,368 --> 00:21:19,611
And this is important for us because time is the most valuable resource on FIFA.

362
00:21:20,451 --> 00:21:23,573
As you already know, this is an iterative title, we put it out every single year.

363
00:21:23,913 --> 00:21:25,814
You'd think that means we have 12 months to work on it,

364
00:21:26,134 --> 00:21:29,075
but the reality is we have to do some amount of launch support,

365
00:21:29,416 --> 00:21:32,997
so we're not getting started until, thinking about the next one until a couple months,

366
00:21:33,318 --> 00:21:34,938
maybe six to eight weeks after launch.

367
00:21:35,399 --> 00:21:38,460
By then it's Christmas time, so nobody's really thinking about what they're doing,

368
00:21:39,481 --> 00:21:40,841
maybe they're doing some amount of pre-pro.

369
00:21:41,282 --> 00:21:46,526
The reality is in the best case we only get nine months to actually put proper development into FIFA

370
00:21:46,586 --> 00:21:48,508
before we're trying to get it out the door again.

371
00:21:49,429 --> 00:21:57,456
So giving up even a week because we have some synchronization issue with our remote development

372
00:21:57,857 --> 00:21:59,118
hurts our schedules terribly.

373
00:22:00,487 --> 00:22:04,948
Now, if you happen to be using Perforce like we are, this should sound reasonably familiar.

374
00:22:05,348 --> 00:22:06,968
There are some benefits coming down the road.

375
00:22:07,028 --> 00:22:09,949
Perforce has assured us they have new technology.

376
00:22:09,969 --> 00:22:11,729
I think they call them edge servers coming out.

377
00:22:12,430 --> 00:22:17,811
And the edge server should really prevent us from needing that local CI job that's keeping that stuff in sync.

378
00:22:17,851 --> 00:22:20,291
That it has some intelligence I'm not entirely familiar with.

379
00:22:21,032 --> 00:22:27,773
But the idea there is that it's going to do the best it can to make sure that that data is synchronized and reducing that bandwidth.

380
00:22:28,614 --> 00:22:31,455
If you happen to be using a distributed source control system,

381
00:22:32,355 --> 00:22:34,256
you may actually have even more traffic than this.

382
00:22:34,276 --> 00:22:36,197
There's a ton of benefits from doing that, I'm not slagging them.

383
00:22:36,977 --> 00:22:39,918
But it's just noting that there's a tendency for those to actually transmit

384
00:22:40,558 --> 00:22:43,440
even more complete sets of data than something like Perforce would.

385
00:22:43,800 --> 00:22:46,521
And so you may actually find that you're paying a lot more in-bandwidth.

386
00:22:47,221 --> 00:22:51,083
Now, this doesn't necessarily matter a whole bunch if you have small branches,

387
00:22:52,343 --> 00:22:52,904
which we don't.

388
00:22:53,224 --> 00:22:53,764
It leads to...

389
00:22:54,864 --> 00:22:56,065
Your branch size matters.

390
00:22:56,966 --> 00:23:01,589
So my original purpose for this presentation was getting back to that sort of dirty secret of

391
00:23:02,210 --> 00:23:04,691
why do we have all our developers work in one branch?

392
00:23:04,952 --> 00:23:06,553
Anyone who joins the company will say,

393
00:23:07,273 --> 00:23:10,456
this is really bad CM you guys, why are you doing this?

394
00:23:11,597 --> 00:23:14,639
And they usually get some type of an answer that doesn't represent reality.

395
00:23:15,500 --> 00:23:17,341
And so I thought, okay, I'm going to do this presentation.

396
00:23:17,361 --> 00:23:19,023
I'm going to admit to all these guys this secret.

397
00:23:19,343 --> 00:23:21,825
And I'm going to answer why it was that we've done this.

398
00:23:22,486 --> 00:23:24,988
And my goal, I'll admit, was to blame integrations.

399
00:23:25,665 --> 00:23:27,647
I called that out earlier, integrations are expensive.

400
00:23:28,227 --> 00:23:30,109
And so I sat down and I started thinking, well,

401
00:23:30,489 --> 00:23:33,211
what is it about integrations that we really hate, you know?

402
00:23:33,732 --> 00:23:35,053
Why is this such a problem for us?

403
00:23:36,414 --> 00:23:37,975
And it turns out integrations aren't a problem.

404
00:23:38,255 --> 00:23:40,417
They're really not that hard in the grand scheme of things.

405
00:23:41,058 --> 00:23:42,078
They're not that expensive.

406
00:23:42,419 --> 00:23:44,661
They're a nuisance and developers generally don't like them,

407
00:23:45,021 --> 00:23:47,443
but there wasn't anything that was actually wrong with them.

408
00:23:47,943 --> 00:23:49,645
So it turned out what our problem actually was,

409
00:23:50,085 --> 00:23:51,346
was that we were avoiding branches.

410
00:23:51,586 --> 00:23:53,028
We avoided branching altogether.

411
00:23:53,668 --> 00:23:55,890
And that was kind of a startling realization,

412
00:23:55,950 --> 00:23:58,772
like, wait, why is branching such a problem?

413
00:23:59,912 --> 00:24:01,293
And so we dig into that, and it turns out

414
00:24:01,333 --> 00:24:02,815
it's because our branches are huge.

415
00:24:03,255 --> 00:24:06,477
And when I say huge, I mean 150 gig.

416
00:24:06,757 --> 00:24:07,718
They're really big branches.

417
00:24:07,738 --> 00:24:08,939
You decide you want to cut a branch

418
00:24:08,959 --> 00:24:11,301
to do some feature in a safe way,

419
00:24:11,321 --> 00:24:13,262
that's a lot of extra sync that you just had

420
00:24:13,282 --> 00:24:14,163
to pull down to your system,

421
00:24:14,203 --> 00:24:17,025
that's a lot of waiting that you had to do to get that.

422
00:24:17,505 --> 00:24:19,086
It's painful, so as a result,

423
00:24:19,126 --> 00:24:20,407
people have an aversion to doing that.

424
00:24:20,927 --> 00:24:25,771
So if we continue asking why, well, why in the world do we have such large sinks?

425
00:24:26,372 --> 00:24:28,254
Well, data synchronization.

426
00:24:28,434 --> 00:24:32,477
We never really invented a good way to make sure that our assets were in line with our code.

427
00:24:33,378 --> 00:24:37,041
How we did this was, if you change the code that would impact the assets,

428
00:24:37,061 --> 00:24:39,923
you're expected to rebuild the assets and check it all at the same time.

429
00:24:40,704 --> 00:24:44,027
And we'll get to why that has other downsides in a minute,

430
00:24:44,387 --> 00:24:46,629
but that was really how we solved that problem.

431
00:24:48,709 --> 00:24:49,710
Why do we do it that way?

432
00:24:49,770 --> 00:24:51,411
Like, why would we do that?

433
00:24:51,851 --> 00:24:54,633
Well, that was how the game team was organized.

434
00:24:54,673 --> 00:24:57,615
We had an art department, we had a dev department,

435
00:24:57,635 --> 00:24:59,296
and those guys worked together.

436
00:24:59,376 --> 00:25:02,057
There are obviously all sorts of roles that bridge that gap,

437
00:25:02,438 --> 00:25:05,600
but not necessarily anyone who was responsible

438
00:25:05,640 --> 00:25:06,460
for that whole picture.

439
00:25:06,860 --> 00:25:08,281
And so this process made sense.

440
00:25:08,421 --> 00:25:11,163
One team hands the process over via check-in,

441
00:25:11,483 --> 00:25:13,104
and it just, it makes sense.

442
00:25:13,144 --> 00:25:15,206
Everybody works and nobody ever gets blocked by this.

443
00:25:16,906 --> 00:25:19,527
How did we end up, you know, why would we organize that way?

444
00:25:20,007 --> 00:25:21,387
Why would the system work that way?

445
00:25:21,927 --> 00:25:23,547
If anyone's familiar with Conway's Law,

446
00:25:23,567 --> 00:25:27,108
it basically says something to the effect of

447
00:25:27,328 --> 00:25:29,489
any software designed by an organization

448
00:25:29,889 --> 00:25:32,749
will almost always end up resembling the interfaces

449
00:25:33,929 --> 00:25:35,690
of communication in that organization.

450
00:25:36,050 --> 00:25:37,670
And this ends up being very true here.

451
00:25:37,750 --> 00:25:41,111
The only reason I could find for why we did it this way was...

452
00:25:42,193 --> 00:25:43,134
There was an art department.

453
00:25:43,514 --> 00:25:45,574
So we handled all the art this way.

454
00:25:45,975 --> 00:25:47,415
And there was one guy from the art department

455
00:25:47,435 --> 00:25:48,655
who talked to one guy in dev.

456
00:25:49,275 --> 00:25:50,676
This was the process they came up with.

457
00:25:51,476 --> 00:25:53,397
Okay, so it made sense.

458
00:25:54,257 --> 00:25:55,277
Now, why are we stuck with it?

459
00:25:55,397 --> 00:25:58,198
Knowing that, it's because asset synchronization

460
00:25:58,238 --> 00:25:59,578
was a huge problem for us.

461
00:26:00,299 --> 00:26:04,380
For years, it was you could sync to head

462
00:26:04,640 --> 00:26:07,221
and not be guaranteed that you had some good set of data

463
00:26:07,281 --> 00:26:08,421
to actually go along with that.

464
00:26:08,801 --> 00:26:11,143
And this caused us no amount of grief.

465
00:26:11,803 --> 00:26:14,966
It was especially bad for producers or other people that need to play that game.

466
00:26:15,246 --> 00:26:19,450
I mean, QA was slightly insulated because we made sure that something was blessed before

467
00:26:19,490 --> 00:26:20,190
we gave it to them.

468
00:26:20,570 --> 00:26:25,194
But for embedded QA or production or designers, those guys need to have access to that stuff.

469
00:26:25,494 --> 00:26:29,958
And there was no really good way that we could say, hey, here's that thing that's brand

470
00:26:30,018 --> 00:26:30,158
new.

471
00:26:31,799 --> 00:26:33,940
And here's a set of data that's guaranteed to work with it.

472
00:26:34,261 --> 00:26:35,701
So for us, it was absolutely huge.

473
00:26:35,741 --> 00:26:36,922
It was a very important problem.

474
00:26:37,242 --> 00:26:38,363
And at some point, somebody decided

475
00:26:38,383 --> 00:26:40,544
it was much more valuable than the integration cost.

476
00:26:41,645 --> 00:26:42,425
So we stuck with it.

477
00:26:42,745 --> 00:26:44,146
And over the years, we've developed around it.

478
00:26:44,206 --> 00:26:47,248
We've re-architected the game so that we

479
00:26:47,288 --> 00:26:49,269
need to do less integrations.

480
00:26:49,609 --> 00:26:51,070
We've re-architected the build system

481
00:26:51,150 --> 00:26:53,111
to make some aspects of that much easier.

482
00:26:54,411 --> 00:26:57,193
We've built tons and tons and tons of tools and process

483
00:26:57,233 --> 00:26:59,394
around the pipelines just to make that stuff out

484
00:26:59,414 --> 00:27:00,215
a little bit faster.

485
00:27:00,656 --> 00:27:02,830
So integrations become less necessary.

486
00:27:04,290 --> 00:27:06,051
Looking back, would we do this again now?

487
00:27:06,291 --> 00:27:08,253
No, and every time I pointed out to someone,

488
00:27:08,293 --> 00:27:09,793
hey, I think I figured out why we do this,

489
00:27:10,194 --> 00:27:11,975
it was a face palm every single time,

490
00:27:12,015 --> 00:27:14,016
and people just wanna sort of forget about it,

491
00:27:14,136 --> 00:27:15,537
but that's the way it was.

492
00:27:15,557 --> 00:27:17,398
So as we're getting back on track,

493
00:27:17,418 --> 00:27:21,280
so I'll give you some quick details about FIFA after this.

494
00:27:21,620 --> 00:27:23,181
So this is sort of a mock histogram

495
00:27:23,301 --> 00:27:25,042
of what commits look like over time.

496
00:27:25,382 --> 00:27:27,103
And this is sort of going back to the flow point

497
00:27:27,143 --> 00:27:29,325
a little bit, and this window of availability

498
00:27:29,365 --> 00:27:31,406
for automation or process.

499
00:27:32,587 --> 00:27:36,450
Odds are good if you've never created a histogram of what your source controlled commits look like.

500
00:27:36,830 --> 00:27:38,271
It probably is something like this.

501
00:27:38,652 --> 00:27:40,433
The leftmost is whenever your people come in.

502
00:27:40,453 --> 00:27:43,075
There's typically some large volume of commits in the morning.

503
00:27:43,095 --> 00:27:44,636
People have done some type of testing.

504
00:27:44,656 --> 00:27:46,018
They've done something overnight.

505
00:27:46,298 --> 00:27:47,839
They come in the morning to make sure that it's good.

506
00:27:47,979 --> 00:27:48,840
They check in in the morning.

507
00:27:49,681 --> 00:27:52,343
Typically, commits will stay reasonably high for a little while.

508
00:27:52,703 --> 00:27:53,664
Some guys get in later.

509
00:27:53,744 --> 00:27:54,765
Some guys need to fix a bug.

510
00:27:54,785 --> 00:27:57,367
They'll get done.

511
00:27:57,547 --> 00:27:58,227
They commit as well.

512
00:27:58,688 --> 00:28:00,129
That first low bar, that's lunch.

513
00:28:01,983 --> 00:28:05,867
The higher one after that is of course when everybody gets back from lunch.

514
00:28:06,227 --> 00:28:09,250
And then that last one is right before everybody's trying to leave for the day.

515
00:28:09,531 --> 00:28:10,171
This makes sense.

516
00:28:10,532 --> 00:28:13,775
All that white space on either side is that window I'm talking about where you have

517
00:28:14,135 --> 00:28:16,558
the ability to go and do all sorts of wonderful things.

518
00:28:17,279 --> 00:28:19,781
And when you have people working all over the world...

519
00:28:20,832 --> 00:28:22,957
This is more what it looks like.

520
00:28:23,257 --> 00:28:27,766
You end up with maybe a couple of low bars while you're transitioning from North America to Asia,

521
00:28:27,787 --> 00:28:32,115
because it's a big, there's a whole bunch of time zones and unless you've got guys in Australia or

522
00:28:33,252 --> 00:28:33,572
Hawaii.

523
00:28:35,012 --> 00:28:37,873
You know, there's not a lot of time in there, but eventually it'll pick back up.

524
00:28:38,273 --> 00:28:42,115
And now we've gone from this case where there really weren't going to be any chickens overnight to

525
00:28:42,555 --> 00:28:46,256
we maybe have a couple hours right after the guys in North America went home,

526
00:28:46,576 --> 00:28:51,118
and they absolutely won't allow us to do any major automation or anything risky during that time,

527
00:28:51,498 --> 00:28:53,618
because they've got a milestone or a gate or anything.

528
00:28:54,025 --> 00:28:56,266
That's the time they want to eat into to be able to use.

529
00:28:57,446 --> 00:29:00,227
So for some numbers on FIFA, just to give a scope of what I'm talking about.

530
00:29:00,247 --> 00:29:03,808
I told you that our branches were in the range of about 150 gig.

531
00:29:04,568 --> 00:29:11,169
They do go up to about 250 gig, depending on how careful you are with your client spec.

532
00:29:11,469 --> 00:29:14,470
But if you are really good about that, you can actually get it down to about 75 gig.

533
00:29:14,770 --> 00:29:17,151
This is the essential amount of data, but that's the minimum data.

534
00:29:17,631 --> 00:29:20,912
I think that's the thing the build machines actually have, so they're not wasting any storage.

535
00:29:22,952 --> 00:29:26,856
The number of files, if that's an optimized sync, is about 360,000 files.

536
00:29:27,336 --> 00:29:31,200
If you don't put a lot of effort in determining that sync down, it's easily upwards of a million.

537
00:29:32,781 --> 00:29:35,724
Which is ridiculous. Our largest file is about 700 meg.

538
00:29:36,524 --> 00:29:38,827
It's a bundled audio asset. I'm sure a lot of you guys have that.

539
00:29:39,187 --> 00:29:45,553
Our most edited file is... the most edited I could find was about 74 edits between now and last September.

540
00:29:45,573 --> 00:29:47,715
So that's quite a few per week.

541
00:29:48,997 --> 00:29:52,040
Revisions per day, I only took a look at last week.

542
00:29:52,280 --> 00:29:55,763
Not including AI for any of these numbers, there was about 50 per day.

543
00:29:57,024 --> 00:30:00,327
If I include the AI guys, who like I said were on a separate branch,

544
00:30:00,607 --> 00:30:03,430
that gets to about another 25 per day on top of that.

545
00:30:03,470 --> 00:30:07,033
So even right now we're way out from final or sort of,

546
00:30:07,053 --> 00:30:09,836
I guess we're well into production, there's 75 commits a day.

547
00:30:13,982 --> 00:30:18,025
Another interesting note while we're here is QA and localization always have current builds.

548
00:30:18,786 --> 00:30:21,628
We don't give it to them once a week or once every couple of days.

549
00:30:22,469 --> 00:30:28,373
Localization has the build that's absolutely as current as when we started copying it to local.

550
00:30:29,074 --> 00:30:30,395
And QA is the same way.

551
00:30:30,755 --> 00:30:34,838
We have every single night, or every morning, they have a build waiting for them

552
00:30:35,859 --> 00:30:39,041
that is the most current build as of usually 3 in the morning.

553
00:30:42,970 --> 00:30:44,012
Yeah, actually that's fair enough.

554
00:30:45,093 --> 00:30:51,401
Alright, so in order to make all this stuff work in one branch, there's a fair amount of discipline and automation.

555
00:30:51,902 --> 00:30:57,729
We're going to get to the automation in the next second, or in the next couple slides, but for now let's finish up with source control.

556
00:30:59,312 --> 00:31:01,514
So at this point I would like to make a quick apology.

557
00:31:01,914 --> 00:31:05,258
At some point I developed a warped sense of humor

558
00:31:05,398 --> 00:31:07,019
in the process of making this presentation

559
00:31:07,500 --> 00:31:10,543
and almost all the slides after this attempt to be funny.

560
00:31:10,923 --> 00:31:12,425
So hopefully you'll find some humor in them.

561
00:31:12,565 --> 00:31:13,886
If not, my bad.

562
00:31:14,915 --> 00:31:19,620
Alright, so this one's obvious, right? Limiting binary files and source control.

563
00:31:19,681 --> 00:31:24,006
Binary files take up a lot of space. Source control is particularly terrible usually.

564
00:31:24,026 --> 00:31:29,433
I don't know of any system that actually does diffs on binary files for these things.

565
00:31:30,434 --> 00:31:37,378
So you end up in a case where the more you're putting in there, the more storage you're using up, and you typically end up using up really, really fast.

566
00:31:37,778 --> 00:31:39,819
But you do want revision history on a bunch of this stuff.

567
00:31:40,240 --> 00:31:45,363
As I said, in our case, we're checking in a bunch of the assets along with the code to make sure that it's synchronized.

568
00:31:45,763 --> 00:31:48,884
There's not a lot we can do about limiting binary files.

569
00:31:48,925 --> 00:31:50,025
In that case, we need those.

570
00:31:50,405 --> 00:31:52,406
At the end of the year, or at the end of the cycle,

571
00:31:52,446 --> 00:31:54,507
we want to make sure that you can sync back to any changelist

572
00:31:54,807 --> 00:31:56,168
and have that good set of data there.

573
00:31:56,508 --> 00:31:57,829
So we have to leave those files.

574
00:31:59,310 --> 00:32:01,451
But what we try to use as a trade-off here

575
00:32:01,811 --> 00:32:04,572
is any files that we can regenerate reasonably easily,

576
00:32:05,833 --> 00:32:06,953
we'll try to not check in.

577
00:32:07,374 --> 00:32:14,000
So an example of this is the Madden game has sort of their asset bundles that they check into Perforce.

578
00:32:14,100 --> 00:32:20,507
Now they will limit these things, but the reason that they do this is so that if you happen to be at head or near head,

579
00:32:20,927 --> 00:32:23,670
you can get the last couple of these things, you're working very, very fast.

580
00:32:23,930 --> 00:32:25,031
You don't need to generate these.

581
00:32:25,392 --> 00:32:28,955
If for some reason you need to go back, say, more than a week or however many of these things they keep,

582
00:32:29,555 --> 00:32:33,756
You can absolutely do that, you just need to take the time to regenerate your quick load files.

583
00:32:34,216 --> 00:32:40,037
FIFA doesn't do this, because unfortunately the rate at which they churn just makes it such that they'd be burning space.

584
00:32:40,137 --> 00:32:45,998
So as part of your building of FIFA, you almost always need to build those quick loads,

585
00:32:46,158 --> 00:32:51,319
but how they got around having to spend that time was that the game almost always works with those loose assets as well.

586
00:32:51,699 --> 00:32:56,500
You wouldn't do any performance profiling with that, but it's playable. Very playable.

587
00:33:00,108 --> 00:33:02,069
This is NSync, in case you couldn't tell.

588
00:33:03,570 --> 00:33:04,810
Protect yourself from bad syncs.

589
00:33:04,950 --> 00:33:06,931
So we kind of touched on this one a little bit early.

590
00:33:07,992 --> 00:33:09,392
You're a new member to a new team.

591
00:33:09,432 --> 00:33:10,513
What's the first thing you're going to do?

592
00:33:10,533 --> 00:33:11,833
You're going to go and sync.

593
00:33:12,334 --> 00:33:14,815
What impact does that sync have on everybody else?

594
00:33:15,515 --> 00:33:18,256
I don't know about you guys, but I know when I started, we had a very firm rule.

595
00:33:18,656 --> 00:33:22,098
You do not do a full sync during work hours.

596
00:33:22,458 --> 00:33:24,879
You set it up, you do it right before you leave, you go home for the night,

597
00:33:24,899 --> 00:33:27,100
so you were not likely to be impacting people.

598
00:33:28,781 --> 00:33:30,082
But it always happened.

599
00:33:30,383 --> 00:33:32,544
And part of this was, I don't know about your build systems,

600
00:33:33,005 --> 00:33:37,248
but we definitely had a couple bugs in ours where things would leak into the source tree

601
00:33:37,628 --> 00:33:40,190
and at some point you would go, I don't know why this isn't working,

602
00:33:40,210 --> 00:33:43,233
I'm just going to re-sync everything and see if that fixes it.

603
00:33:43,693 --> 00:33:45,414
And you don't want that guy to say,

604
00:33:45,454 --> 00:33:47,695
well, 10 o'clock and I think this is the solution.

605
00:33:47,715 --> 00:33:48,795
I'm going to have to go home now.

606
00:33:49,876 --> 00:33:50,796
So you let them think.

607
00:33:51,917 --> 00:33:53,817
But suddenly these things start taking a toll

608
00:33:53,957 --> 00:33:56,018
on what everybody else can do.

609
00:33:56,699 --> 00:33:58,079
Not such a big deal if this is local.

610
00:33:58,439 --> 00:34:01,861
If these guys are remote, this becomes a really big cost.

611
00:34:01,881 --> 00:34:03,382
They're sucking juice out of your server.

612
00:34:03,722 --> 00:34:04,382
This gets slow.

613
00:34:04,422 --> 00:34:05,863
The more of these actions that you have,

614
00:34:06,323 --> 00:34:07,524
the less everybody else is getting

615
00:34:07,544 --> 00:34:08,424
through your source control.

616
00:34:08,884 --> 00:34:14,853
So obviously the solutions to this are simple things like documentation or triggers on your source control, and that's largely what we do.

617
00:34:14,913 --> 00:34:22,664
In fact, we have a trigger on the source control that points you at the documentation if you do something particularly terrible, like say, I'd like to sync all of FIFA.

618
00:34:24,026 --> 00:34:27,069
You get the big denied email that makes you feel particularly upset.

619
00:34:27,489 --> 00:34:30,892
And then it points you at the documentation where it says you may not sync the root.

620
00:34:31,232 --> 00:34:34,515
You must only sync some of these folders.

621
00:34:35,195 --> 00:34:37,017
As a protri... triggers are great.

622
00:34:37,617 --> 00:34:38,778
Use them for as much as you can.

623
00:34:38,818 --> 00:34:41,400
If you can kick off your CI that way, do it.

624
00:34:42,221 --> 00:34:44,323
Some of the best ones that we have block you from...

625
00:34:45,284 --> 00:34:47,825
If you didn't put a bug number or a feature number,

626
00:34:47,865 --> 00:34:50,087
some, you know, you have some system where you're doing work.

627
00:34:50,127 --> 00:34:53,670
If you don't have a number indicating why you submitted this check-in,

628
00:34:54,030 --> 00:34:54,710
it gets blocked.

629
00:34:56,972 --> 00:34:58,573
Again, continuing the warp sense of humor,

630
00:34:59,193 --> 00:35:00,995
keep your CI syncs separated.

631
00:35:01,435 --> 00:35:03,276
So this is a really interesting one,

632
00:35:03,336 --> 00:35:04,978
and I don't know that you'd normally hit it

633
00:35:05,118 --> 00:35:06,819
unless you had a really big scale,

634
00:35:07,680 --> 00:35:10,502
but for a good chunk of FIFA's development during the year,

635
00:35:10,842 --> 00:35:12,903
we actually have more automation than we have people.

636
00:35:13,924 --> 00:35:20,611
And so there may be up to 100 machines that are doing various CI jobs all at exactly the same time.

637
00:35:21,171 --> 00:35:26,016
First thing in the morning, if you're the first guy to put a check in, when the system has managed to hit an idle point,

638
00:35:27,057 --> 00:35:30,440
100 machines just kicked off and they're all thinking, what you just submitted.

639
00:35:30,460 --> 00:35:33,363
If someone else tries to do something...

640
00:35:34,413 --> 00:35:36,575
It's just, it's junk. Their experience is slow.

641
00:35:37,216 --> 00:35:40,338
This typically would happen, say, first thing in the morning in Romania,

642
00:35:40,358 --> 00:35:41,660
or first thing in the morning in Burnaby,

643
00:35:42,060 --> 00:35:45,323
and it's a painful experience. First thing in the morning, people are actually excited to work.

644
00:35:45,383 --> 00:35:47,045
They get in, they want to do stuff,

645
00:35:47,765 --> 00:35:49,727
and if their first experience with source control is,

646
00:35:50,127 --> 00:35:51,769
well, I hit sync and it's not doing anything,

647
00:35:52,069 --> 00:35:54,672
or I tried to submit my check-in and I tested all night, and

648
00:35:55,432 --> 00:35:57,935
it's lagging, these guys get upset, and...

649
00:35:58,915 --> 00:35:59,896
They're unhappy with you.

650
00:36:00,736 --> 00:36:03,537
So the solution to this was we actually set up a proxy

651
00:36:03,898 --> 00:36:07,479
inside of our local site that only our CI system uses.

652
00:36:08,159 --> 00:36:09,860
This is a relatively cheap thing to set up.

653
00:36:09,940 --> 00:36:11,921
It's all local. You just need another machine to do it.

654
00:36:12,781 --> 00:36:16,963
But it makes it so that your CI never actually negatively impacts your development.

655
00:36:17,744 --> 00:36:20,025
This made a huge difference during FIFA's final last year.

656
00:36:21,489 --> 00:36:24,050
And that it got people to stop yelling at me.

657
00:36:24,571 --> 00:36:26,892
Don't stop for backups. This is a really interesting one.

658
00:36:26,912 --> 00:36:31,514
I'm going to touch on sort of how we came across something like this later.

659
00:36:32,395 --> 00:36:34,075
The point is you back up your source control.

660
00:36:35,276 --> 00:36:39,318
You probably need to stop your source control in order to back up your source control.

661
00:36:39,638 --> 00:36:41,739
Which means you have some window where it's not usable.

662
00:36:42,500 --> 00:36:45,061
Again, we go back to a scenario where you're working across the world.

663
00:36:45,601 --> 00:36:48,143
Well, you still have weekends, probably.

664
00:36:48,983 --> 00:36:52,906
Less of a weekend than that full 48-plus hour window,

665
00:36:52,926 --> 00:36:53,867
but you've still got something.

666
00:36:55,348 --> 00:36:56,188
But you don't need to stop.

667
00:36:56,528 --> 00:36:58,990
There's lots of technologies and approaches that are available.

668
00:37:00,291 --> 00:37:03,233
For example, if you happen to be using a storage area network at all,

669
00:37:03,433 --> 00:37:05,314
and even if you're not using some big fancy device

670
00:37:05,354 --> 00:37:08,096
that you license from some global IT outfit,

671
00:37:09,017 --> 00:37:11,318
I've got a NAS at home that supports this functionality.

672
00:37:11,719 --> 00:37:16,242
The point is that you set up your machine, you back end it off this NAS stuff,

673
00:37:16,602 --> 00:37:20,185
you do a tiny pause to your source control, flush any outgoing transactions,

674
00:37:20,485 --> 00:37:23,267
you take that snapshot, which is like an instantaneous copy,

675
00:37:23,367 --> 00:37:25,408
it's not really a copy, it's a redirection layer,

676
00:37:26,129 --> 00:37:30,192
and you pay based on how much it differs from the snapshot at the time you took it.

677
00:37:30,552 --> 00:37:33,274
But at that point you can turn your source control back on,

678
00:37:33,614 --> 00:37:35,616
so you've been down for maybe a couple minutes,

679
00:37:35,676 --> 00:37:37,818
maybe not even a noticeable amount of time,

680
00:37:38,278 --> 00:37:40,359
but then you can do that back up off that snapshot.

681
00:37:41,480 --> 00:37:43,481
Same thing kind of applies to databases.

682
00:37:44,142 --> 00:37:48,405
If you need to do a backup on a database that's an operational database you're using all the time,

683
00:37:48,825 --> 00:37:50,266
why are you stopping that database?

684
00:37:52,367 --> 00:37:54,308
You know, if we were to set up a replicant to do something,

685
00:37:54,649 --> 00:37:59,111
take any action that you can so that you can backup off something that isn't your live system.

686
00:38:00,490 --> 00:38:04,511
I do have a side note. Oh, actually I've got a little anecdote here.

687
00:38:05,552 --> 00:38:08,392
Take your backups seriously. I know everybody knows that.

688
00:38:08,512 --> 00:38:10,953
Everybody's been, you know, we've all used a computer before.

689
00:38:10,973 --> 00:38:14,434
We know how backups work. But stuff happens, and it always happens in

690
00:38:14,454 --> 00:38:17,975
the most inopportune times. Two Christmases back, we deleted Madden.

691
00:38:19,075 --> 00:38:20,595
Like source control, gone.

692
00:38:22,304 --> 00:38:27,726
We had an IT bug and something went wrong with one of the disks that was back in the Perforce server

693
00:38:28,126 --> 00:38:31,847
and some very helpful engineer thought he knew how to solve the problem

694
00:38:31,867 --> 00:38:35,868
and so he went in and he remounted the drive to the server.

695
00:38:36,408 --> 00:38:39,048
And in the process, he wiped it. Unrecoverably.

696
00:38:41,609 --> 00:38:43,390
You can imagine that that did not go over well.

697
00:38:44,610 --> 00:38:47,171
So the guys came back from the Christmas break and Perforce wasn't there.

698
00:38:49,040 --> 00:38:51,040
They had to just work with what they had on their local machine.

699
00:38:52,121 --> 00:38:54,281
Eventually, we were able to recover from tape backups,

700
00:38:54,441 --> 00:38:56,502
and we were really lucky that that actually worked.

701
00:38:57,522 --> 00:38:58,823
And we were able to rebuild the diffs.

702
00:38:58,863 --> 00:39:01,823
There was a fortunate engineer who, at his desk, was thinking

703
00:39:02,584 --> 00:39:05,084
he had just sunk everything right before it got deleted.

704
00:39:05,484 --> 00:39:07,925
So we were able to, you know, recover from the backup,

705
00:39:07,985 --> 00:39:09,266
fill in the gaps with that stuff,

706
00:39:09,586 --> 00:39:11,086
recreate some of the history, and get going.

707
00:39:12,006 --> 00:39:13,887
But there was a better part of, I think, it was almost a week

708
00:39:13,927 --> 00:39:14,627
where the developers...

709
00:39:15,208 --> 00:39:18,311
Just sort of sat there and twiddled their thumbs. So take this stuff seriously.

710
00:39:18,331 --> 00:39:27,221
As a tip, if you happen to have source control in, say, a less potentially stable source of the world, consider those backups additionally.

711
00:39:27,982 --> 00:39:33,348
We have a studio in South Korea. It definitely gets backed up more than some of our other Perforce servers.

712
00:39:35,091 --> 00:39:40,594
While we're on this note, disaster recovery is obvious, and I think it's everybody's natural reaction.

713
00:39:41,074 --> 00:39:43,215
Business continuity might not be something that you've heard of.

714
00:39:43,575 --> 00:39:47,557
So disaster recovery I'll define as recovering from something went wrong,

715
00:39:47,597 --> 00:39:51,159
getting the system back exactly the way it was, which you've lost as time.

716
00:39:51,599 --> 00:39:54,200
Business continuity is where you say, I don't want to be back the way I was,

717
00:39:54,561 --> 00:39:57,162
I want my time to be the least amount possible.

718
00:39:57,462 --> 00:39:59,863
This would be like if the Apple store down the street burned down.

719
00:40:00,544 --> 00:40:02,365
Disaster recovery is them rebuilding it.

720
00:40:02,706 --> 00:40:06,870
Business continuity is them opening up shop next door so people can keep buying that apple swag.

721
00:40:07,811 --> 00:40:11,595
Business continuity is important because there's a lot of stuff that you do and you rely on

722
00:40:12,136 --> 00:40:17,582
that probably can be recovered without actually needing to do all the...

723
00:40:18,843 --> 00:40:23,307
The disaster recovery. So the example we've got for this is our CI systems.

724
00:40:23,967 --> 00:40:30,633
We have about 150 gig, 250 gig worth of data in one of our CI systems that unfortunately flakes out about once a year.

725
00:40:31,454 --> 00:40:33,636
That's five days worth of data. It's about 200 gig.

726
00:40:34,036 --> 00:40:37,459
It's operational data. It's mostly logs. We're all used to that for the builds.

727
00:40:39,485 --> 00:40:40,586
We don't need that data.

728
00:40:41,127 --> 00:40:42,268
If that system goes down,

729
00:40:43,229 --> 00:40:46,814
to re-import 200 gig into SQL is going to take all day.

730
00:40:47,655 --> 00:40:48,996
Usually it takes us a day to realize

731
00:40:49,016 --> 00:40:50,238
that the database is borked

732
00:40:50,318 --> 00:40:52,080
and we need to actually completely recover it.

733
00:40:52,440 --> 00:40:53,782
So we've lost a day for that.

734
00:40:54,183 --> 00:40:56,085
Then we're gonna lose a day to actually rebuild.

735
00:40:58,146 --> 00:41:02,347
And then by the time the system gets online, it's been down for two days.

736
00:41:02,367 --> 00:41:05,488
So then it needs to spend another half a day trying to purge out all the old data

737
00:41:05,508 --> 00:41:07,509
because it's not supposed to keep data for more than five days.

738
00:41:07,809 --> 00:41:08,709
We're down for forever.

739
00:41:09,150 --> 00:41:13,051
Eventually, and after, you know, seven or eight times of us suffering from this,

740
00:41:13,431 --> 00:41:16,452
we got used to the, you know, hope is our problem, stop hoping.

741
00:41:17,032 --> 00:41:22,617
Immediately something goes wrong. Let's take those project definitions. The CI project definitions are what really matter.

742
00:41:22,958 --> 00:41:25,600
Let's get them into another CI system and get everything rolling again.

743
00:41:25,620 --> 00:41:31,885
And that's kind of the best practice around here is that hope is not your friend when you're in a disaster situation.

744
00:41:32,166 --> 00:41:35,709
But it's where we all tend to go. We'll just give this an hour and see what happens.

745
00:41:35,769 --> 00:41:41,534
It'll probably come back. If you need your system running, CI is a really good example of one where

746
00:41:42,154 --> 00:41:46,266
If your developers aren't comfortable working because you built up a ton of process around this thing,

747
00:41:46,286 --> 00:41:48,853
what are you going to do to make sure that these guys can keep working?

748
00:41:50,788 --> 00:41:53,889
Okay, so we're going to get to that second problem now, where it works on my machine.

749
00:41:55,169 --> 00:41:58,330
This is the one where CI is really how you solve this problem.

750
00:41:58,390 --> 00:41:59,890
We couldn't come up with any other way around it.

751
00:42:00,830 --> 00:42:02,111
Your machine is the problem.

752
00:42:03,271 --> 00:42:05,132
So you don't get to say it works on your machine,

753
00:42:05,432 --> 00:42:06,872
and especially on FIFA.

754
00:42:06,892 --> 00:42:08,012
If you say it works on my machine,

755
00:42:08,392 --> 00:42:11,013
the answer is, well, it doesn't work on the build machine, so it's your problem.

756
00:42:12,113 --> 00:42:14,594
You're completely responsible for it. There's no way around it.

757
00:42:16,094 --> 00:42:17,235
We've made it the gold standard.

758
00:42:17,812 --> 00:42:21,699
So let's just take a quick look at what CI looks like at sports so you have a sense of what I'm talking about.

759
00:42:22,200 --> 00:42:25,847
So we've got this content creator. He's working at his local desk.

760
00:42:25,867 --> 00:42:27,850
He's got his feature. He's got this thing finished.

761
00:42:28,792 --> 00:42:31,236
So what he starts to do, he does some local testing.

762
00:42:34,947 --> 00:42:36,707
Now we don't want to burden him with a bunch of effort.

763
00:42:36,828 --> 00:42:40,589
We've got five platforms that we work on, we've got four different configs.

764
00:42:40,970 --> 00:42:45,332
If I ask him to do some, even, you know, nominal matrix of that stuff,

765
00:42:45,352 --> 00:42:46,892
he's going to spend a ton of time on this.

766
00:42:47,233 --> 00:42:50,114
If our build times are down to five minutes per platform per config,

767
00:42:51,315 --> 00:42:52,915
he could spend a ton of time on this.

768
00:42:53,236 --> 00:42:57,097
So we come up with some very, very, very minimal set that these guys need to do,

769
00:42:58,218 --> 00:43:00,779
and we trust them to do that at every iteration,

770
00:43:01,199 --> 00:43:02,940
and then check willingly into Perforce.

771
00:43:05,431 --> 00:43:12,814
So that goes to the source control, which sends either there's a set of CI servers which will be polling the source control servers,

772
00:43:14,235 --> 00:43:15,535
or potentially they're triggered.

773
00:43:16,796 --> 00:43:18,497
And then we have some set of builds that will kick off.

774
00:43:18,537 --> 00:43:21,298
I'm only going to do the CI process as far as the builds actually go.

775
00:43:22,578 --> 00:43:26,180
So we've got some set of quick builds, some set of complete builds.

776
00:43:26,340 --> 00:43:30,182
When I say quick, we'll get into this more in a minute, but what I'm really going for is

777
00:43:30,542 --> 00:43:33,903
something that validates as quickly as possible that you didn't just break everything.

778
00:43:34,824 --> 00:43:36,864
The complete builds are the ones that can take their time.

779
00:43:36,884 --> 00:43:41,245
The quick builds are telling you that you didn't break what we care about.

780
00:43:41,265 --> 00:43:44,325
The complete builds are telling you that you did not break anything.

781
00:43:45,446 --> 00:43:49,466
The analysis builds are things like lint or coverity that are checking out your code quality.

782
00:43:50,167 --> 00:43:53,167
Profiling are typically going to be memory metrics, these kinds of things.

783
00:43:53,687 --> 00:43:55,788
And artifacts are everything else.

784
00:43:55,808 --> 00:43:58,488
These are the ISOs for QA. This is potentially art.

785
00:43:58,988 --> 00:44:02,429
Whenever you're actually generating a thing that some other processor will use,

786
00:44:03,297 --> 00:44:04,459
That falls into this type of build.

787
00:44:08,350 --> 00:44:12,233
This was a particularly important one over here, and this bites us constantly.

788
00:44:12,293 --> 00:44:13,835
So hopefully you've seen this XKCD.

789
00:44:14,615 --> 00:44:17,277
And it's funny, we all look at it, and we all know it to be true.

790
00:44:18,479 --> 00:44:20,961
The problem is just because it's true doesn't make it okay.

791
00:44:21,761 --> 00:44:25,324
And so we spend a ton of time, we waste time, allowing people to compile.

792
00:44:25,645 --> 00:44:29,668
And this ties back into my earlier point about the developer at his desk.

793
00:44:29,948 --> 00:44:32,851
You're paying him, or your content creator at their desk,

794
00:44:33,151 --> 00:44:36,094
you're paying them to generate something for you.

795
00:44:36,774 --> 00:44:40,115
If they have to spend time compiling, they're not working.

796
00:44:40,915 --> 00:44:43,355
You can fix that with the build system. You can do all sorts of things.

797
00:44:43,415 --> 00:44:46,236
I'm going to assume that you've already optimized your build system to the point

798
00:44:46,556 --> 00:44:48,476
where there aren't any easy gains to be had there.

799
00:44:48,857 --> 00:44:51,017
So then it becomes the matrix of things that they can do.

800
00:44:51,437 --> 00:44:52,997
Don't make them do everything.

801
00:44:53,337 --> 00:44:55,018
Pick something that probably works,

802
00:44:55,978 --> 00:44:57,098
allow them to check that in,

803
00:44:57,278 --> 00:45:00,979
and then use the continuous integration to do everything else.

804
00:45:03,794 --> 00:45:08,437
As a side note for how we come up with that, that minimal set of things we want them to build and test,

805
00:45:08,717 --> 00:45:11,479
that's typically going to vary by game team to game team.

806
00:45:11,659 --> 00:45:14,401
It's going to be the technical directors that are going to decide that.

807
00:45:14,501 --> 00:45:19,185
Some titles may favour their final build because they've been having, say, frame rate problems

808
00:45:19,225 --> 00:45:20,406
and that's really the one they care about.

809
00:45:20,766 --> 00:45:25,550
Titles that have had 60 fps frame rates for years worry less about that

810
00:45:25,850 --> 00:45:30,533
and maybe they'll worry about something with more metrics in it so they can do some profiling.

811
00:45:30,794 --> 00:45:34,256
So these things are highly variable, I don't have an answer for what is the one that makes sense for you.

812
00:45:34,556 --> 00:45:35,657
It'll depend on your game.

813
00:45:36,578 --> 00:45:41,261
Whatever one your developers are most comfortable using is probably the one that you want.

814
00:45:44,303 --> 00:45:47,986
Okay, so now we've said already, well, let's bias for speed.

815
00:45:48,286 --> 00:45:50,107
Let's make sure that you're always doing the fast stuff,

816
00:45:50,167 --> 00:45:54,070
and that we're going to do the completeness stuff can happen on the side later.

817
00:45:54,470 --> 00:45:54,991
No big deal.

818
00:45:55,751 --> 00:45:57,352
So that completeness stuff is coverage.

819
00:45:58,317 --> 00:46:01,280
The speed and completeness are the stuff that you can do everywhere in the world.

820
00:46:01,600 --> 00:46:04,023
These builds are typically the reasonably cheap ones.

821
00:46:05,344 --> 00:46:08,147
They're the ones where they're not generating artifacts you need to move around.

822
00:46:08,568 --> 00:46:14,534
So their stuff, in our case, we do CI in both the main development place in Burnaby

823
00:46:15,075 --> 00:46:18,819
and the other development in Bucharest. They've got their own CI.

824
00:46:19,559 --> 00:46:20,500
The reason for doing this...

825
00:46:21,397 --> 00:46:23,879
It's convenient for these guys, so we can do it nice and fast there.

826
00:46:23,919 --> 00:46:26,581
The amount of time that it takes to transmit the data back over the ocean

827
00:46:26,942 --> 00:46:31,046
and the user experience these guys get getting report data back from us isn't worth it.

828
00:46:31,146 --> 00:46:34,048
We can throw a couple machines in place over there, do that stuff locally.

829
00:46:34,769 --> 00:46:38,072
But that completely breaks down if we start talking about artifacts.

830
00:46:38,473 --> 00:46:40,675
As soon as we need to move files between locations...

831
00:46:41,540 --> 00:46:47,410
Absolutely falls apart and it goes to that earlier point of that's really, really expensive.

832
00:46:48,252 --> 00:46:51,157
So we avoid creating artifacts at the remote locations.

833
00:46:52,415 --> 00:46:55,338
We tend to try and figure out where the artifacts are going

834
00:46:55,698 --> 00:46:58,100
and try and make sure that the continuous integration for those things

835
00:46:58,441 --> 00:46:59,762
are happening in that location.

836
00:47:00,202 --> 00:47:03,666
So if QA is happening in Burnaby, that's when we're going to make sure that the

837
00:47:04,646 --> 00:47:06,588
build that's generating the disk is going to happen.

838
00:47:07,429 --> 00:47:09,911
As I pointed out earlier, it happens in Baton Rouge.

839
00:47:10,252 --> 00:47:11,693
We don't have hardware in Baton Rouge,

840
00:47:11,973 --> 00:47:13,995
so we make sure that we do it somewhere else in North America

841
00:47:14,015 --> 00:47:16,538
because at least we can shunt the builds over there reasonably quickly.

842
00:47:19,174 --> 00:47:23,416
And again, just to drive this point home, there's no point transferring data that you can build faster.

843
00:47:23,717 --> 00:47:30,221
I called this out earlier, but with our localization guys in Madrid, at some point we discovered that it did take substantially longer to copy that build to those guys,

844
00:47:30,581 --> 00:47:35,624
than it did just give them their own source control and let them build it themselves.

845
00:47:36,185 --> 00:47:40,948
We can drive this point into the ground. We'll skip this one. Avoid copying those artifacts around the world.

846
00:47:41,960 --> 00:47:44,481
Okay, don't share environments.

847
00:47:44,501 --> 00:47:52,626
I did a presentation at GDC a couple years back where we were talking about how to scale your test infrastructure, using virtualization and things like that.

848
00:47:52,646 --> 00:47:54,346
This was a principle topic on that.

849
00:47:55,267 --> 00:47:55,807
Basically...

850
00:47:57,008 --> 00:47:59,249
Sharing an environment is going to allow you to waste time.

851
00:47:59,349 --> 00:48:03,811
So in this example, you do a build, and you do a test, and a build, and a test, and a build, and a test, and a build, and a test.

852
00:48:04,111 --> 00:48:05,432
This is really easy to do, right?

853
00:48:05,472 --> 00:48:09,674
Everybody does this because you start off with a build, because that's where you start,

854
00:48:09,974 --> 00:48:14,776
and at some point you added unit tests, or an integration test, or a functional test, or you added something,

855
00:48:15,096 --> 00:48:19,258
and it made sense to just put it on that build machine. It was already doing that. It already has the artifacts.

856
00:48:19,739 --> 00:48:26,102
But as you scale those tests, you need to realize that builds and tests tend to have that one-to-many relationship.

857
00:48:26,402 --> 00:48:30,003
And so suddenly you don't want to be rebuilding things you've already built

858
00:48:30,044 --> 00:48:32,365
in order so that you can do some other type of test on it.

859
00:48:33,763 --> 00:48:38,907
So if you can, split your build environment from your test environment.

860
00:48:39,247 --> 00:48:42,630
If you can get distinct environments, then you're going to get more builds out of that,

861
00:48:42,690 --> 00:48:44,711
which has the benefit of being more atomic.

862
00:48:44,731 --> 00:48:48,614
You're getting fewer check-ins per build, assuming that your build is happening on a schedule.

863
00:48:50,435 --> 00:48:58,081
Which makes debugging a lot easier, you're potentially getting more tests and more importantly, you're getting those results to people faster, which is really what this is all about.

864
00:48:59,042 --> 00:49:03,165
If you've done some clever things here, you don't even really need two machines to do this.

865
00:49:03,425 --> 00:49:09,990
It could be a simple matter of making sure that your environment is set up sufficiently well that you can move a build over to some other location,

866
00:49:10,330 --> 00:49:14,994
and start executing a test from there, and then kick off a build on that same machine at that same time.

867
00:49:17,265 --> 00:49:23,409
Additionally, if you're really, really keen, that copy I just mentioned where you move it from the build environment to the test environment,

868
00:49:23,689 --> 00:49:26,231
there are lots of clever ways that you can completely mitigate that time.

869
00:49:26,611 --> 00:49:31,275
That GDC 2012 presentation I mentioned has tons of detail about that.

870
00:49:31,315 --> 00:49:35,498
So if you're interested, come talk to me afterwards or check that out in the vault.

871
00:49:37,826 --> 00:49:39,727
Do your best to avoid desktop hardware.

872
00:49:41,889 --> 00:49:43,570
This stuff is expensive. It'll always get you.

873
00:49:43,630 --> 00:49:45,271
And it's not expensive in terms of the

874
00:49:45,651 --> 00:49:47,952
you go to Best Buy and you buy it. It's nice and cheap.

875
00:49:47,992 --> 00:49:49,573
That's actually why we have so much of it.

876
00:49:50,314 --> 00:49:52,255
We have desktop machines. We have all sorts of...

877
00:49:53,215 --> 00:49:55,477
We have our developers, our content creators using these things.

878
00:49:55,957 --> 00:49:59,419
Typically, you have an abundance of desktop machines.

879
00:49:59,479 --> 00:50:03,102
So it's very common for your automation farm to be built out of the leftovers of that.

880
00:50:05,431 --> 00:50:09,292
Eventually that's going to cost you. The desktop hardware isn't as reliable.

881
00:50:10,492 --> 00:50:13,593
You start getting flaky errors, and that ends up being the real thing.

882
00:50:13,893 --> 00:50:17,574
It's easy if the drive dies, you go buy a new one. When it starts to die,

883
00:50:17,594 --> 00:50:22,475
and it isn't quite dead, that's when it starts introducing weird things that start plaguing your results,

884
00:50:22,795 --> 00:50:25,195
and now you have this one machine that just does something inconsistent.

885
00:50:27,596 --> 00:50:32,719
For us, it got to the point where I think we had about a farm of a hundred of these things set up in sports

886
00:50:33,779 --> 00:50:39,962
so that we could do the various just test automation, not even build automation, just test automation for the couple of titles in Burnaby.

887
00:50:40,362 --> 00:50:45,105
And we had to have one guy who did nothing but just make sure that all these things were actually in a healthy state.

888
00:50:45,545 --> 00:50:46,926
This is assuming that you're using Windows.

889
00:50:46,986 --> 00:50:48,647
If you can get away with other development environments,

890
00:50:48,967 --> 00:50:50,789
then you will probably find greater stability.

891
00:50:50,849 --> 00:50:52,650
But if you're developing for Xbox,

892
00:50:52,710 --> 00:50:53,831
then you're using Windows,

893
00:50:54,792 --> 00:50:57,313
which means that it's reasonably easy to run into problems.

894
00:50:58,134 --> 00:51:00,816
So the solution that we went to for this was,

895
00:51:00,836 --> 00:51:03,678
if you have access to a data center, fantastic.

896
00:51:03,998 --> 00:51:04,799
Get into that stuff.

897
00:51:05,519 --> 00:51:12,343
Odds are good they're using server-grade hardware, which is going to have extra reliability on top of it, but ideally virtualization would be the recommendation here.

898
00:51:14,405 --> 00:51:20,148
You don't want to waste your time trying to muck out environment errors. If there's something wonky happening in the machine that you don't see everywhere else,

899
00:51:20,849 --> 00:51:23,230
Create a new machine, move the process to there and see if it happens.

900
00:51:23,630 --> 00:51:27,792
If it doesn't, fantastic, delete that old one, debug it if you've got the time, but move on.

901
00:51:28,513 --> 00:51:32,175
You're trying to not have yourself dragged down by all this hardware that you're maintaining.

902
00:51:32,895 --> 00:51:35,637
If you don't have an IT department and data center, don't fret about this stuff.

903
00:51:35,877 --> 00:51:38,198
There's lots of services that you can rent VMs from,

904
00:51:38,518 --> 00:51:41,580
assuming that you don't have security or IP issues associated with that.

905
00:51:43,061 --> 00:51:45,842
Desk kits, dev kits fall into the same thing.

906
00:51:45,862 --> 00:51:47,884
I don't know about you guys, but...

907
00:51:49,470 --> 00:51:52,793
PlayStation 4s are giving us some grief at the moment, that's all I'll say about that.

908
00:51:53,814 --> 00:51:59,079
But if you're hitting the same kind of problem, devices like iBootbars really make a big difference

909
00:51:59,139 --> 00:51:59,339
there.

910
00:51:59,359 --> 00:52:02,081
An iBootbar is a network addressable power strip.

911
00:52:03,463 --> 00:52:07,867
Send a signal to that, turn that thing off, power cycle it back on.

912
00:52:08,227 --> 00:52:11,290
If you can do a wake-on LAN, you can typically recover your environment.

913
00:52:12,111 --> 00:52:16,575
That's not healthy for the kit, but if the kit has already given you that much grief anyway, who cares?

914
00:52:17,295 --> 00:52:18,496
At least you get it working again.

915
00:52:18,516 --> 00:52:23,781
And the worst possible scenario you can have is that QA didn't get a build in the morning because the automated process

916
00:52:24,142 --> 00:52:29,286
relied on a kit that happened to die on the test right before the important one that you needed it to do.

917
00:52:30,550 --> 00:52:37,034
As an additional pro tip here, we've had great luck using PBRs attached to consoles for additional

918
00:52:37,134 --> 00:52:39,396
information or even just remote viewing these things.

919
00:52:39,776 --> 00:52:43,459
If you're doing Gen 4 development, there's actually some neat stuff that I know we have

920
00:52:43,479 --> 00:52:46,881
working on the Xbox and I think we can get going with the PlayStation as well, where

921
00:52:46,901 --> 00:52:48,903
it's already capturing this type of video output.

922
00:52:49,203 --> 00:52:52,505
We can throw it into a buffer on the side and in the event of a crash, we can just dump

923
00:52:52,525 --> 00:52:54,587
that and get the last couple minutes of video.

924
00:52:54,747 --> 00:52:55,928
I can't recommend that highly enough.

925
00:52:59,079 --> 00:52:59,980
This is one of my favorites.

926
00:53:00,180 --> 00:53:01,680
So test your processes from within.

927
00:53:02,180 --> 00:53:04,081
So this is a canary in a coal mine.

928
00:53:06,321 --> 00:53:08,702
If you're familiar with the analogy, or if you're not familiar with the analogy,

929
00:53:09,482 --> 00:53:11,682
basically the idea was at some point in the past,

930
00:53:11,722 --> 00:53:13,423
and I really hope this isn't an old wives tale,

931
00:53:14,043 --> 00:53:15,984
they had canaries in coal mines, and if something went wrong

932
00:53:16,004 --> 00:53:17,404
and they released, I'm assuming gas,

933
00:53:17,904 --> 00:53:19,864
the canary would pass out, or probably die,

934
00:53:20,125 --> 00:53:21,825
and everybody knew to hightail it out of the mine.

935
00:53:23,425 --> 00:53:27,427
We apply the same idea to our continuous integration.

936
00:53:28,927 --> 00:53:32,189
One of the problems, it's really easy to erode trust with your developers.

937
00:53:33,569 --> 00:53:36,850
In our environment, as I said, they check in when they've done some set of things,

938
00:53:37,170 --> 00:53:38,511
we take care of the rest of it for them.

939
00:53:38,911 --> 00:53:42,232
If we aren't taking care of it in a very successful way, or reliable way,

940
00:53:42,632 --> 00:53:45,153
then we can't claim that that CI is the gold standard.

941
00:53:45,434 --> 00:53:48,235
And suddenly that it works on my machine problem creeps back in.

942
00:53:48,855 --> 00:53:53,539
So what we built when we called the system Canary, it's basically a fake build.

943
00:53:53,800 --> 00:53:56,943
It'll never fail. Well, it fails all the time, but it's not supposed to fail.

944
00:53:57,523 --> 00:54:01,167
It doesn't do a real build. It does a process, which is always supposed to pass,

945
00:54:01,587 --> 00:54:06,852
but it exercises almost all of the dependencies that a real build would actually exercise.

946
00:54:07,373 --> 00:54:12,738
So you actually get, it's really interesting because you can map out what are all the dead spots in your network infrastructure.

947
00:54:13,058 --> 00:54:15,439
When exactly does your Perforce server go offline?

948
00:54:16,180 --> 00:54:17,601
When does your antivirus kick in?

949
00:54:17,621 --> 00:54:19,442
Because if you have an IT department and antivirus,

950
00:54:19,742 --> 00:54:22,264
you'd probably be surprised how badly that's plaguing your systems.

951
00:54:23,464 --> 00:54:24,425
All sorts of stuff like that.

952
00:54:24,445 --> 00:54:26,246
So you can absolutely map out those windows

953
00:54:26,806 --> 00:54:29,428
and you use that data, you get that back in front of your...

954
00:54:30,429 --> 00:54:32,330
Your developers, so that they can trust the system.

955
00:54:32,670 --> 00:54:36,492
And you can show that 99% of the time these canaries are alive and sending chirps.

956
00:54:37,753 --> 00:54:38,414
Fantastic.

957
00:54:38,734 --> 00:54:41,115
But even for yourself, or whoever your build guys are,

958
00:54:42,576 --> 00:54:45,158
if only 80% of the time it's working,

959
00:54:46,679 --> 00:54:48,260
then you know and you can adjust accordingly.

960
00:54:50,605 --> 00:54:56,767
So I have many conversations with one of our guys in Bioware,

961
00:54:57,607 --> 00:55:00,028
who's a big fan of, what's his motto?

962
00:55:00,548 --> 00:55:02,708
AAA tools for AAA teams.

963
00:55:03,748 --> 00:55:05,649
This is often not common on central teams.

964
00:55:06,249 --> 00:55:09,710
We build tools, and it's not that we make them ugly on purpose.

965
00:55:10,590 --> 00:55:13,271
But we don't have artists, and we don't have budgets for artists,

966
00:55:13,371 --> 00:55:15,311
and so we make tools that are functional.

967
00:55:15,911 --> 00:55:17,011
And darn it, they work for us.

968
00:55:17,051 --> 00:55:18,712
I don't understand why that guy can't use it.

969
00:55:18,732 --> 00:55:20,152
I don't understand.

970
00:55:20,733 --> 00:55:22,496
You really need to make compelling reports.

971
00:55:22,776 --> 00:55:23,958
You want to get this in front of people.

972
00:55:23,999 --> 00:55:26,343
You need people looking at this data.

973
00:55:26,543 --> 00:55:28,246
Make it something they actually want to look at.

974
00:55:30,430 --> 00:55:32,972
And as a final pro tip, don't report off of live systems.

975
00:55:33,813 --> 00:55:35,914
If anybody is using Tableau,

976
00:55:35,934 --> 00:55:37,716
I don't need any hands here I suppose,

977
00:55:38,757 --> 00:55:40,338
we actually found a, not destroyed,

978
00:55:40,378 --> 00:55:42,860
but took out a couple of our test databases.

979
00:55:43,401 --> 00:55:44,602
The way that it would generate data,

980
00:55:44,622 --> 00:55:46,143
especially if you've got it set in a polling mode,

981
00:55:46,463 --> 00:55:48,365
just didn't play nicely to our live systems.

982
00:55:49,026 --> 00:55:50,527
And so we actually found that we were dropping

983
00:55:50,807 --> 00:55:53,029
our automation testbed systems.

984
00:55:53,389 --> 00:55:57,110
It's a simple fix, build a replicated database and point Tableau at that,

985
00:55:57,410 --> 00:56:01,411
but it's really easy to do wrong and it's really easy to not realize that that's what's happening.

986
00:56:03,011 --> 00:56:05,411
So that third problem, this is this branch health.

987
00:56:06,292 --> 00:56:09,532
Like I said, we've already touched on this a lot with many of these other ones,

988
00:56:09,832 --> 00:56:13,813
but there's some additional insights that we've got that just help you make sure

989
00:56:13,833 --> 00:56:17,474
that you're not putting your branch into a state where it's broken or unusable

990
00:56:17,514 --> 00:56:18,734
by other people that depend on it.

991
00:56:21,245 --> 00:56:23,886
A poll of hands, who loves their build system?

992
00:56:23,926 --> 00:56:26,027
Who thinks their build system is great and they would recommend it?

993
00:56:26,047 --> 00:56:28,048
Okay.

994
00:56:28,828 --> 00:56:30,809
You I want to talk to after, please.

995
00:56:30,909 --> 00:56:32,289
Yeah, that's kind of what I figured, right?

996
00:56:32,930 --> 00:56:33,870
Nobody likes their build system.

997
00:56:34,070 --> 00:56:36,051
This guy does, but nobody else likes their build system.

998
00:56:36,391 --> 00:56:39,112
And it's not because we do a terrible job of developing these things.

999
00:56:39,452 --> 00:56:39,692
Maybe.

1000
00:56:40,053 --> 00:56:42,794
But generally, it's because they're full of trade-offs.

1001
00:56:42,854 --> 00:56:43,834
It's the nature of these things.

1002
00:56:43,854 --> 00:56:45,915
They're hiding all that dirty laundry that we've done.

1003
00:56:46,215 --> 00:56:47,856
So they have to be nasty like that.

1004
00:56:48,896 --> 00:56:52,578
So how we get around this is we don't make our users actually use the build system.

1005
00:56:52,598 --> 00:56:55,880
Now, if they're changing files such that they need to add things, that's inevitable.

1006
00:56:56,860 --> 00:57:00,242
But for the most part, in order for it to work with automation, we have command line interfaces.

1007
00:57:00,602 --> 00:57:02,063
There's nothing worse than telling your artist,

1008
00:57:02,103 --> 00:57:07,386
OK, in order for you to build your art, I need you to type in this 256-character command line to make that happen.

1009
00:57:07,946 --> 00:57:18,952
So, bundle up behind a GUI to make sure that your art guys, your level designers, your producers, your execs, if they're going to generate a build from source, make it easy for them to do that.

1010
00:57:19,892 --> 00:57:25,075
And just because your developers are power users and are comfortable on the command line, don't make them do that either.

1011
00:57:25,355 --> 00:57:27,116
If they want to use the GUI, great.

1012
00:57:27,136 --> 00:57:30,498
But the other tool that we built was sort of a fast version of the command line.

1013
00:57:30,798 --> 00:57:33,940
The automation uses the 256 character version.

1014
00:57:34,460 --> 00:57:37,161
The other guys just sort of type build.

1015
00:57:38,100 --> 00:57:40,466
And based on what they usually do, it figures out what they need to do.

1016
00:57:40,806 --> 00:57:43,032
Ton of time saving, and everybody loves the build system.

1017
00:57:48,255 --> 00:57:49,336
Telemetry is your friend.

1018
00:57:50,537 --> 00:57:51,697
Build system, again, same thing.

1019
00:57:51,737 --> 00:57:52,698
Track how it's being used.

1020
00:57:53,778 --> 00:57:55,479
One of the reasons people tend to hate build systems, or at

1021
00:57:55,499 --> 00:57:57,100
least we did, is because it rotted.

1022
00:57:57,741 --> 00:58:00,982
And it rotted because there were workflows that were being

1023
00:58:01,002 --> 00:58:04,684
supported that may or may not be getting used.

1024
00:58:04,884 --> 00:58:07,526
The build system, or having telemetry on that, allows you

1025
00:58:07,546 --> 00:58:09,727
to identify what's getting used, what's not getting used.

1026
00:58:10,367 --> 00:58:12,248
And it allows you to go to that one senior guy who

1027
00:58:12,288 --> 00:58:14,970
maintains that everybody uses a flow, to go to him and say,

1028
00:58:15,010 --> 00:58:15,930
no, it's just you.

1029
00:58:16,291 --> 00:58:16,851
It's just you.

1030
00:58:16,911 --> 00:58:17,851
I need to kill this now.

1031
00:58:20,487 --> 00:58:24,709
IT is your friend. I mean this one's not too difficult. We touched on this before.

1032
00:58:25,009 --> 00:58:28,952
Things like virtualization, SAN, snapshots. If these aren't things that you've heard of,

1033
00:58:29,232 --> 00:58:34,355
your IT guys definitely have. Go talk to those guys. They're going to be able to help you do stuff.

1034
00:58:34,615 --> 00:58:37,857
They've probably forgotten more about your network and your infrastructure

1035
00:58:38,177 --> 00:58:40,698
than your devs will probably ever learn about that stuff.

1036
00:58:41,039 --> 00:58:44,060
If they're not looped into making your processes faster, you're missing out.

1037
00:58:46,997 --> 00:58:48,078
Validate before commit.

1038
00:58:48,839 --> 00:58:50,240
This is this idea of a gauntlet.

1039
00:58:52,001 --> 00:58:53,822
Basically, this isn't what we're doing.

1040
00:58:53,962 --> 00:58:57,105
I already told you guys that we just check directly in and we let the automation take care of it.

1041
00:58:57,465 --> 00:59:00,828
But this is what we should recommend and this is what hopefully you guys are all doing.

1042
00:59:01,148 --> 00:59:05,631
Have some battery of tests to get run on this stuff before it goes into source control.

1043
00:59:09,073 --> 00:59:14,759
And then the other one is no idling. If you can avoid letting your system actually sit idle, that's the best possible case.

1044
00:59:14,779 --> 00:59:20,445
You're going to have these fast builds that are running all the time. Their goal is to provide a result as quickly as they can.

1045
00:59:20,786 --> 00:59:25,531
Don't stop those builds, but take those coverage builds, those other builds that are slow, repurpose them.

1046
00:59:25,571 --> 00:59:28,695
Get them to do something else. Do anything but sit there doing nothing.

1047
00:59:30,174 --> 00:59:31,495
All right, so that just about wraps it.

1048
00:59:31,655 --> 00:59:33,336
So the key takeaways from this,

1049
00:59:33,777 --> 00:59:36,959
think of your commits as a flow and keep them flowing.

1050
00:59:37,179 --> 00:59:40,021
Don't fall ever for the it works on my machine.

1051
00:59:40,722 --> 00:59:42,563
Gold standard's gotta be your automation servers.

1052
00:59:43,143 --> 00:59:45,885
And recognize that branch health is your team health.

1053
00:59:46,586 --> 00:59:46,746
Oops.

1054
00:59:49,328 --> 00:59:49,608
Thank you.

1055
00:59:50,749 --> 00:59:51,229
Any questions?

1056
01:00:04,630 --> 01:00:12,151
Hi, I was wondering, do you have a per team build system or is there a centralised EA one that covers all the titles?

1057
01:00:13,192 --> 01:00:14,232
That's a really good question.

1058
01:00:15,633 --> 01:00:16,934
Yes, yes and no.

1059
01:00:17,994 --> 01:00:21,796
So there is a standard build system tech stack

1060
01:00:22,157 --> 01:00:25,518
that probably everybody uses, except for the Frostbite guys.

1061
01:00:25,558 --> 01:00:26,779
Hopefully none of them are in the room.

1062
01:00:27,360 --> 01:00:29,661
But they tend to roll their own just about everything.

1063
01:00:29,721 --> 01:00:31,602
Although I think they may have even merged now too.

1064
01:00:32,562 --> 01:00:35,004
How everybody uses it tends to vary.

1065
01:00:35,604 --> 01:00:37,585
And the CI system they build on top of that

1066
01:00:37,605 --> 01:00:38,786
can be potentially different.

1067
01:00:39,046 --> 01:00:41,087
But they do all start from the same root tech stack.

1068
01:00:42,993 --> 01:00:44,222
Thank you.

1069
01:00:45,128 --> 01:00:45,812
All right, thank you all.

