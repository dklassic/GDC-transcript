1
00:00:03,069 --> 00:00:08,933
Welcome to our talk. I am Nikunj Raghuvanshi. I work at Microsoft Research in Redmond.

2
00:00:08,933 --> 00:00:14,617
I'm John Tennant. I'm lead technical sound designer at The Coalition,

3
00:00:14,617 --> 00:00:18,080
which is a Microsoft studio up in Vancouver, British Columbia.

4
00:00:18,462 --> 00:00:20,804
And today we'll talk about Project Triton,

5
00:00:20,804 --> 00:00:23,907
which shipped in Gears of War 4 last year in October.

6
00:00:23,907 --> 00:00:26,970
And Triton is a acoustic system that models

7
00:00:26,970 --> 00:00:30,833
how sound waves behave in 3D game environments.

8
00:00:30,833 --> 00:00:33,836
And the thought behind Triton is acoustics

9
00:00:33,836 --> 00:00:35,978
is very important for immersion in games.

10
00:00:36,538 --> 00:00:42,582
Because in everyday life we understand our surroundings audio visually, sound and light work together.

11
00:00:42,582 --> 00:00:48,565
If somebody walks into a different room, they become invisible and their sound should also get muffled accordingly.

12
00:00:48,565 --> 00:00:54,149
And also sound gets around the head, it gets around corners, it fills up spaces.

13
00:00:54,149 --> 00:01:01,413
So sound is very important for giving us this persistent awareness of what's going on around us all of the time.

14
00:01:01,413 --> 00:01:03,234
So we need good acoustics in games.

15
00:01:04,025 --> 00:01:06,168
And there's a lot of interest in virtual and augmented

16
00:01:06,168 --> 00:01:09,792
reality these days, and a lot of focus on headphone-based

17
00:01:09,792 --> 00:01:13,057
HRTF directional audio rendering.

18
00:01:13,057 --> 00:01:16,982
But environmental acoustics is a crucial portion to get

19
00:01:16,982 --> 00:01:19,886
positional audio, which conveys not only direction,

20
00:01:19,886 --> 00:01:22,369
but actually locations in the environment around you.

21
00:01:25,301 --> 00:01:28,823
But compared to lighting, sound has limited CPU and RAM,

22
00:01:28,823 --> 00:01:30,964
and sound behavior is physically more complex.

23
00:01:30,964 --> 00:01:32,584
I'll show you some examples.

24
00:01:32,584 --> 00:01:34,585
For sound, you have to model all these wave effects

25
00:01:34,585 --> 00:01:35,846
to get convincing results.

26
00:01:35,846 --> 00:01:40,368
And because of a combination of both these problems,

27
00:01:40,368 --> 00:01:43,389
right now we have a mixture of approximate methods,

28
00:01:43,389 --> 00:01:44,690
which work well in some cases,

29
00:01:44,690 --> 00:01:46,491
but you need to know the caveats,

30
00:01:46,491 --> 00:01:49,112
and manual tagging work, like drawing reverb volumes.

31
00:01:49,472 --> 00:01:52,216
And what this means is the designer has to do a lot of work

32
00:01:52,216 --> 00:01:54,219
to get a baseline sound going.

33
00:01:54,219 --> 00:01:57,824
And ultimately it limits the time for audio designers

34
00:01:57,824 --> 00:01:59,726
to work on the thing they'd like,

35
00:01:59,726 --> 00:02:02,570
to make the games an emotional experience

36
00:02:02,570 --> 00:02:05,654
and a medium for creative expression.

37
00:02:06,843 --> 00:02:09,907
So the thought behind Triton is why not follow the path

38
00:02:09,907 --> 00:02:11,409
that game lighting took,

39
00:02:11,409 --> 00:02:14,372
which is do the physics based on the scene,

40
00:02:14,372 --> 00:02:17,216
get a baseline result that's physically plausible,

41
00:02:17,216 --> 00:02:20,480
and then you design on top of that so you get automation

42
00:02:20,480 --> 00:02:23,484
as well as freedom to do the artistic expression

43
00:02:23,484 --> 00:02:24,585
that games need to have.

44
00:02:26,138 --> 00:02:28,960
As soon as we started thinking along these lines,

45
00:02:28,960 --> 00:02:31,482
we realized we had a two-part problem.

46
00:02:31,482 --> 00:02:34,764
Part one, doing these accurate simulations is expensive

47
00:02:34,764 --> 00:02:37,786
if you want moving sources and listeners, which we wanted.

48
00:02:37,786 --> 00:02:42,829
So in GDC 2011, I had given a talk on a research system

49
00:02:42,829 --> 00:02:45,090
I'd been working on that could, for the first time,

50
00:02:45,090 --> 00:02:46,591
do real-time-wave acoustics.

51
00:02:46,972 --> 00:02:49,853
But this formed the basis for Triton.

52
00:02:49,853 --> 00:02:52,455
But when we got together and I started talking

53
00:02:52,455 --> 00:02:54,036
to the Coalition audio team,

54
00:02:54,036 --> 00:02:55,657
and we started thinking about,

55
00:02:55,657 --> 00:02:58,439
okay, what's the requirements for a real game,

56
00:02:58,439 --> 00:03:00,480
I realized this was very far off.

57
00:03:00,480 --> 00:03:02,602
So this system used to take a full,

58
00:03:02,602 --> 00:03:04,743
this previous system used to take a full core

59
00:03:04,743 --> 00:03:05,804
for doing like 20 sources.

60
00:03:05,804 --> 00:03:09,366
It took gigabytes of RAM for a few rooms.

61
00:03:09,366 --> 00:03:10,587
And it used a custom audio engine

62
00:03:10,587 --> 00:03:12,548
because the audio filters were changing

63
00:03:12,548 --> 00:03:13,689
on the fly per source.

64
00:03:14,329 --> 00:03:19,313
So thinking about this, the second part of the problem emerged.

65
00:03:19,313 --> 00:03:21,654
This system used to just do pure physics.

66
00:03:21,654 --> 00:03:26,518
So how do you design with a system like that if you don't want to be struck rigidly to

67
00:03:26,518 --> 00:03:28,099
what physics predicted?

68
00:03:28,099 --> 00:03:33,063
And secondly, so design is a problem and audio middleware integration is another problem.

69
00:03:33,063 --> 00:03:36,785
We couldn't have a custom audio engine in a production game.

70
00:03:37,966 --> 00:03:38,286
easily.

71
00:03:38,286 --> 00:03:41,468
So over the last five years, we've been working hard at this

72
00:03:41,468 --> 00:03:43,629
and we managed to solve this two part problem

73
00:03:43,629 --> 00:03:46,010
and that's why we're here to talk to you about.

74
00:03:46,010 --> 00:03:46,910
So to give you a flavor of the solution,

75
00:03:46,910 --> 00:03:47,491
it's similar to light mapping.

76
00:03:47,491 --> 00:03:54,034
You do accurate physics, but offline you bake the results

77
00:03:54,034 --> 00:03:57,415
and then you bake out these results

78
00:03:57,415 --> 00:04:01,077
into some sort of volumetric acoustic data

79
00:04:01,077 --> 00:04:03,778
and then you can take this data and design on top of it

80
00:04:03,778 --> 00:04:06,460
and do expressive acoustics in standard audio middleware.

81
00:04:07,507 --> 00:04:10,448
So basically, you get to have your cake and eat it too.

82
00:04:10,448 --> 00:04:13,030
You get automation and you get expressive design

83
00:04:13,030 --> 00:04:14,271
together with that.

84
00:04:14,271 --> 00:04:16,152
So I will talk about this first portion

85
00:04:16,152 --> 00:04:18,894
of how to do the physics and what to put in the data.

86
00:04:18,894 --> 00:04:20,355
And then John will talk about how to take that

87
00:04:20,355 --> 00:04:21,495
and do audio design with it for a game.

88
00:04:21,495 --> 00:04:22,876
So let's dive right in into the physics of what sounds do.

89
00:04:29,467 --> 00:04:31,890
So here's a scene you're seeing.

90
00:04:31,890 --> 00:04:33,631
This is a 3D simulation.

91
00:04:33,631 --> 00:04:36,093
You're seeing a horizontal slice through it.

92
00:04:36,093 --> 00:04:39,256
And if I put a pulse of source, pulse of sound in there,

93
00:04:39,256 --> 00:04:41,018
you immediately see these wave fronts

94
00:04:41,018 --> 00:04:43,160
making their way around the doorways

95
00:04:43,160 --> 00:04:44,461
in that building on the left.

96
00:04:44,461 --> 00:04:47,304
And I've put two microphones in this scene

97
00:04:47,304 --> 00:04:48,865
at point A and B.

98
00:04:48,865 --> 00:04:50,487
So when the wave fronts make their way,

99
00:04:50,487 --> 00:04:52,669
you start receiving some signal at A,

100
00:04:52,669 --> 00:04:55,211
and then you start receiving some signal at point B.

101
00:04:55,789 --> 00:04:59,333
Now this thing that sound propagates like ripples in water

102
00:04:59,333 --> 00:05:01,375
where it goes around all these obstructions,

103
00:05:01,375 --> 00:05:03,557
that's called diffraction.

104
00:05:03,557 --> 00:05:06,881
And you need to model that to get the effect

105
00:05:06,881 --> 00:05:08,302
of sound bending around corners.

106
00:05:08,302 --> 00:05:10,565
That's what makes sound useful for navigation

107
00:05:10,565 --> 00:05:11,586
because you can always hear it.

108
00:05:12,086 --> 00:05:14,348
And the other one is that sound is just bouncing around

109
00:05:14,348 --> 00:05:15,609
and shimmering in the space.

110
00:05:15,609 --> 00:05:17,271
That's reverberation.

111
00:05:17,271 --> 00:05:18,932
Because sound speed is low enough

112
00:05:18,932 --> 00:05:20,914
that you can hear it bouncing around in the space.

113
00:05:20,914 --> 00:05:21,955
You can hear it in this hall.

114
00:05:21,955 --> 00:05:24,477
And that's a very important effect.

115
00:05:24,477 --> 00:05:27,039
So these two are very distinct from light.

116
00:05:27,039 --> 00:05:28,621
So that's why sound simulation is different.

117
00:05:29,624 --> 00:05:32,346
And so at point A and B you get very different signals.

118
00:05:32,346 --> 00:05:35,108
And these signals capture everything

119
00:05:35,108 --> 00:05:37,290
that the scene did to the sound

120
00:05:37,290 --> 00:05:39,552
when it went from the source to listener.

121
00:05:39,552 --> 00:05:40,833
And it's called the impulse response.

122
00:05:40,833 --> 00:05:42,955
This is the key quantity we're after.

123
00:05:42,955 --> 00:05:44,816
If you model this correctly,

124
00:05:44,816 --> 00:05:46,518
if you model its characteristics nicely,

125
00:05:46,518 --> 00:05:47,438
you get good acoustics.

126
00:05:49,091 --> 00:05:51,814
So perceptually for our brain, there are two important

127
00:05:51,814 --> 00:05:53,756
portions of this impulse response.

128
00:05:53,756 --> 00:05:56,639
The initial energy, which is the straight energy

129
00:05:56,639 --> 00:05:59,042
that gets from source to listener through shortest path,

130
00:05:59,042 --> 00:06:01,684
and then all these reflection, all these meandering paths

131
00:06:01,684 --> 00:06:04,187
through the scene that get from source to listener.

132
00:06:04,187 --> 00:06:06,169
So you want, these are important quantities,

133
00:06:06,169 --> 00:06:06,670
I'll get to them.

134
00:06:08,281 --> 00:06:10,943
So based on the impulse response,

135
00:06:10,943 --> 00:06:13,425
you hear all sorts of interesting acoustic effects.

136
00:06:13,425 --> 00:06:14,446
These are perceptual.

137
00:06:14,446 --> 00:06:17,729
So the four most important ones that we focused on

138
00:06:17,729 --> 00:06:20,651
are obstruction, occlusion, wetness ratio,

139
00:06:20,651 --> 00:06:21,712
and reverb decay time.

140
00:06:21,712 --> 00:06:24,274
And there's a whole long list,

141
00:06:24,274 --> 00:06:25,575
but this is just an initial set.

142
00:06:25,575 --> 00:06:29,018
This is the first step, and these are pretty important.

143
00:06:29,018 --> 00:06:30,018
So we focused on those.

144
00:06:31,062 --> 00:06:33,683
So the first two effects, obstruction and occlusion.

145
00:06:33,683 --> 00:06:35,484
Usually these two concepts are conflated,

146
00:06:35,484 --> 00:06:37,064
but they're quite distinct.

147
00:06:37,064 --> 00:06:40,966
So obstruction refers to how much of the initial energy

148
00:06:40,966 --> 00:06:42,466
gets from the source to the listener.

149
00:06:42,466 --> 00:06:44,807
So if you see the scene on the bottom left,

150
00:06:44,807 --> 00:06:45,968
there's a source on the left,

151
00:06:45,968 --> 00:06:49,289
and the initial sound would get blocked by this obstruction.

152
00:06:49,289 --> 00:06:51,270
So the sound waves have to make their way around it.

153
00:06:52,193 --> 00:06:54,434
But reflections can get there just fine.

154
00:06:54,434 --> 00:06:57,635
So this is a case of strong obstruction,

155
00:06:57,635 --> 00:06:59,816
but little occlusion,

156
00:06:59,816 --> 00:07:03,017
because occlusion refers to the total energy,

157
00:07:03,017 --> 00:07:03,537
initial plus reflected.

158
00:07:03,537 --> 00:07:07,278
But in the second case, if I extend the partition,

159
00:07:07,278 --> 00:07:09,419
both the initial energy and reflected energy,

160
00:07:09,419 --> 00:07:10,779
both of them get blocked.

161
00:07:10,779 --> 00:07:12,320
So you have a case of strong obstruction

162
00:07:12,320 --> 00:07:13,180
and strong occlusion.

163
00:07:15,595 --> 00:07:17,596
So to approximate obstruction,

164
00:07:17,596 --> 00:07:20,056
one of the approximations used these days,

165
00:07:20,056 --> 00:07:23,397
one of the nicer ones, is to use the shortest path length.

166
00:07:23,397 --> 00:07:24,957
So you compute the shortest path

167
00:07:24,957 --> 00:07:26,878
and then you compare its length

168
00:07:26,878 --> 00:07:28,618
to just the straight line distance.

169
00:07:28,618 --> 00:07:31,459
And if it's much longer, if it's a winding path,

170
00:07:31,459 --> 00:07:33,339
then you reduce the loudness by some amount.

171
00:07:33,339 --> 00:07:34,200
You make it weaker.

172
00:07:34,200 --> 00:07:37,660
But even with this, there are some issues.

173
00:07:37,660 --> 00:07:39,001
Like for example, in this case,

174
00:07:39,001 --> 00:07:41,881
you have a little bit of wave scattering from the corner.

175
00:07:41,881 --> 00:07:44,162
Maybe you can ignore this, get away with it.

176
00:07:44,162 --> 00:07:45,062
But think about this case.

177
00:07:46,214 --> 00:07:48,335
The shortest path tells you that the sound

178
00:07:48,335 --> 00:07:49,315
should be very weak.

179
00:07:49,315 --> 00:07:51,456
But there's a strong reflection right there.

180
00:07:51,456 --> 00:07:53,736
So you would still hear strong sound in this case,

181
00:07:53,736 --> 00:07:55,477
even in the initial energy.

182
00:07:55,477 --> 00:07:58,318
So even the initial sound is not just shortest path,

183
00:07:58,318 --> 00:08:00,198
but shortest plus a few paths.

184
00:08:00,198 --> 00:08:02,759
And you need to model them to get good effects.

185
00:08:02,759 --> 00:08:04,119
And life can get much worse from there.

186
00:08:04,119 --> 00:08:05,080
And this is a simple scene.

187
00:08:05,080 --> 00:08:07,901
So you could have a 3D environment with broken windows

188
00:08:07,901 --> 00:08:09,401
and ceilings and all that.

189
00:08:09,401 --> 00:08:11,062
It gets pretty complicated very quickly.

190
00:08:14,003 --> 00:08:15,363
Now think about occlusion.

191
00:08:15,363 --> 00:08:18,244
Occlusion refers to the total energy, all paths.

192
00:08:18,244 --> 00:08:20,545
So what does that look like?

193
00:08:20,545 --> 00:08:24,046
This should scare you, because there are so many paths

194
00:08:24,046 --> 00:08:24,946
to compute.

195
00:08:24,946 --> 00:08:28,708
How do you do this in a fraction of an audio core per source

196
00:08:28,708 --> 00:08:30,288
all over the game in a complicated scene?

197
00:08:31,084 --> 00:08:33,325
And with sound, you need to worry about these diffractions

198
00:08:33,325 --> 00:08:34,266
going on at the edges.

199
00:08:34,266 --> 00:08:37,588
If you ignore those paths, you severely underestimate

200
00:08:37,588 --> 00:08:39,469
how much loudness a person would hear.

201
00:08:39,469 --> 00:08:42,071
And this is ironic, because total loudness

202
00:08:42,071 --> 00:08:44,273
is one of the simplest perceptual things,

203
00:08:44,273 --> 00:08:47,095
but it turns out to be the hardest one,

204
00:08:47,095 --> 00:08:48,156
technically, to figure out.

205
00:08:48,156 --> 00:08:50,918
And because of these difficulties,

206
00:08:50,918 --> 00:08:52,979
and also there's another problem that

207
00:08:52,979 --> 00:08:54,500
if you're computing these paths,

208
00:08:54,880 --> 00:08:56,061
and you're moving through the scene,

209
00:08:56,061 --> 00:08:58,603
if you miss a path at one frame and find it in another,

210
00:08:58,603 --> 00:09:00,044
the loudness will bounce around.

211
00:09:00,044 --> 00:09:01,025
That's also not good.

212
00:09:01,025 --> 00:09:03,927
So there are no fast methods.

213
00:09:03,927 --> 00:09:05,628
There's research going on on this,

214
00:09:05,628 --> 00:09:08,090
but as far as game scenarios,

215
00:09:08,090 --> 00:09:10,212
there's no approximate fast methods for this.

216
00:09:11,878 --> 00:09:13,338
So that was obstruction and occlusion.

217
00:09:13,338 --> 00:09:16,120
The third effect is wetness ratio.

218
00:09:16,120 --> 00:09:18,961
And it just says what's the relation or ratio

219
00:09:18,961 --> 00:09:22,542
between the reflected energy to the initial energy.

220
00:09:22,542 --> 00:09:23,523
So if you're in a room,

221
00:09:23,523 --> 00:09:26,144
you're standing very close to the source,

222
00:09:26,144 --> 00:09:28,285
initial energy gets there with very high loudness

223
00:09:28,285 --> 00:09:29,105
because you're close by.

224
00:09:30,063 --> 00:09:32,044
but reflections are relatively weaker.

225
00:09:32,044 --> 00:09:34,145
But if you walk further away,

226
00:09:34,145 --> 00:09:36,246
the initial energy decays quite a bit,

227
00:09:36,246 --> 00:09:37,847
but reflections are still similar.

228
00:09:37,847 --> 00:09:40,988
So you have the effect of the sound losing clarity

229
00:09:40,988 --> 00:09:42,149
and becoming more reverberant

230
00:09:42,149 --> 00:09:44,570
as somebody walks away from you in a room.

231
00:09:44,570 --> 00:09:47,432
And the scene's geometry is also important.

232
00:09:47,432 --> 00:09:50,273
What if I'm behind this little partition?

233
00:09:50,273 --> 00:09:52,034
Now the initial energy drops quite a bit

234
00:09:52,034 --> 00:09:53,635
because it has to make its way around that,

235
00:09:53,635 --> 00:09:55,376
but the reflections can still get there.

236
00:09:55,376 --> 00:09:58,077
So you have a case of very high wetness.

237
00:09:58,780 --> 00:10:02,541
and very low clarity in the sound and lots of reverberance,

238
00:10:02,541 --> 00:10:06,742
which conveys to you that the sound is in an adjoining room,

239
00:10:06,742 --> 00:10:07,843
and it conveys location.

240
00:10:07,843 --> 00:10:08,583
And the way we do it in games right now

241
00:10:08,583 --> 00:10:13,645
is a designer specifies a distance roll-off for the reverb,

242
00:10:13,645 --> 00:10:15,405
but as I just showed you,

243
00:10:15,405 --> 00:10:19,867
it's heavily dependent on the room size

244
00:10:19,867 --> 00:10:22,408
and the specifics of what's in the room.

245
00:10:22,408 --> 00:10:25,088
So a distance-based curve doesn't work very well

246
00:10:25,088 --> 00:10:26,369
to model this effect,

247
00:10:26,369 --> 00:10:28,510
and it really needs the scene geometry to work properly.

248
00:10:30,181 --> 00:10:32,062
So I'm going to show you some demos now,

249
00:10:32,062 --> 00:10:34,324
and these are real-time captures from the game.

250
00:10:34,324 --> 00:10:37,586
But keep in mind that these are tech demos,

251
00:10:37,586 --> 00:10:39,047
so I've changed a lot of things.

252
00:10:39,047 --> 00:10:41,248
So you can hear these effects clearly,

253
00:10:41,248 --> 00:10:44,310
hopefully despite this halts reverb.

254
00:10:44,310 --> 00:10:47,632
And what I've done is you'll hear a helicopter sound,

255
00:10:47,632 --> 00:10:49,573
and I'm playing only the chopping sound

256
00:10:49,573 --> 00:10:52,155
from the helicopter, so you can focus on one sound

257
00:10:52,155 --> 00:10:53,035
and listen to the effects.

258
00:10:53,035 --> 00:10:55,737
All the guns and everything is turned off.

259
00:10:55,737 --> 00:10:58,539
So this first demo is with Triton off

260
00:10:58,539 --> 00:10:59,600
to give you a baseline.

261
00:11:14,073 --> 00:11:18,384
Okay, now we'll try to listen to the loudness transitions and reverberance on the sound.

262
00:11:58,741 --> 00:12:00,882
So throughout this scene with its complicated broken

263
00:12:00,882 --> 00:12:03,704
geometry, Triton is computing right on the geometry

264
00:12:03,704 --> 00:12:04,825
you're seeing.

265
00:12:04,825 --> 00:12:06,786
There's no extra audio geometry to draw.

266
00:12:06,786 --> 00:12:08,687
And it's computing all these transitions, smooth

267
00:12:08,687 --> 00:12:10,008
transitions for you automatically

268
00:12:10,008 --> 00:12:10,728
from the geometry.

269
00:12:10,728 --> 00:12:13,850
And this shows that all those three effects I showed you

270
00:12:13,850 --> 00:12:16,552
kind of matter for getting these effects.

271
00:12:16,552 --> 00:12:18,693
So now I'm going to break down that sound for you and show

272
00:12:18,693 --> 00:12:20,414
you how these effects kick in.

273
00:12:21,353 --> 00:12:24,596
So I'm just going to play the initial portion of that video.

274
00:12:24,596 --> 00:12:26,738
And this one just shows the initial energy,

275
00:12:26,738 --> 00:12:29,080
the initial wavefronts from the helicopter to the player.

276
00:12:29,080 --> 00:12:39,128
So this one is pretty dramatic, because it's just

277
00:12:39,128 --> 00:12:40,729
the initial energy.

278
00:12:40,729 --> 00:12:43,491
But if you play just the reflected energy,

279
00:12:43,491 --> 00:12:45,253
no initial energy, it sounds like this.

280
00:12:52,147 --> 00:12:53,608
So this doesn't vary as much,

281
00:12:53,608 --> 00:12:55,190
because once a sound gets into a room,

282
00:12:55,190 --> 00:12:57,692
it keeps bouncing around and fills the whole room.

283
00:12:57,692 --> 00:12:59,013
So you get that effect.

284
00:12:59,013 --> 00:13:00,394
And when you combine them, you get.

285
00:13:00,394 --> 00:13:09,282
So when you're hidden from the helicopter,

286
00:13:09,282 --> 00:13:12,445
it's more reverberant, but still has some loudness,

287
00:13:12,445 --> 00:13:15,407
because the reflected energy is providing some energy,

288
00:13:15,407 --> 00:13:16,828
even in the shadowed areas,

289
00:13:16,828 --> 00:13:18,190
which the initial energy doesn't get to.

290
00:13:19,353 --> 00:13:21,153
So the first one relates to obstruction,

291
00:13:21,153 --> 00:13:23,954
the initial energy, total energy relates to occlusion,

292
00:13:23,954 --> 00:13:26,994
and the interaction between the initial

293
00:13:26,994 --> 00:13:29,435
and reflected energy, that's the wetness.

294
00:13:29,435 --> 00:13:31,795
So all these three effects arise from these two numbers.

295
00:13:31,795 --> 00:13:34,256
The fourth effect is decay rate,

296
00:13:34,256 --> 00:13:36,496
and this conveys scene size to us.

297
00:13:36,496 --> 00:13:38,056
So think of this scene I've shown you,

298
00:13:38,056 --> 00:13:41,017
this is a top view, source is outside, listener is inside,

299
00:13:41,017 --> 00:13:45,118
and the way we do it right now is to draw reverb volumes

300
00:13:45,118 --> 00:13:46,618
driven based on the player location.

301
00:13:47,767 --> 00:13:50,068
And this is a lot of work to draw.

302
00:13:50,068 --> 00:13:51,709
Like ideally you'd want to draw this many,

303
00:13:51,709 --> 00:13:52,890
but this is a lot of work.

304
00:13:52,890 --> 00:13:54,610
It's too much work.

305
00:13:54,610 --> 00:14:00,713
So physically what do the paths look like?

306
00:14:00,713 --> 00:14:02,154
They look like very complicated

307
00:14:02,154 --> 00:14:05,015
because they include diffractions and lots of bounces

308
00:14:05,015 --> 00:14:08,417
and you have to compute these sort of weak paths

309
00:14:08,417 --> 00:14:10,378
to get reverberation going on in a scene.

310
00:14:11,479 --> 00:14:13,440
And there's another problem with listener location

311
00:14:13,440 --> 00:14:16,722
driven reverb, which is what if I reverse

312
00:14:16,722 --> 00:14:17,823
the source and listener?

313
00:14:17,823 --> 00:14:19,644
All these paths simply reverse.

314
00:14:19,644 --> 00:14:22,446
In other words, if the source is inside a cathedral,

315
00:14:22,446 --> 00:14:25,068
you still expect sound to take a long time to decay out.

316
00:14:25,068 --> 00:14:27,410
But if you just drove this based on the listener

317
00:14:27,410 --> 00:14:29,231
in this case, you'd get a short sort of reverb

318
00:14:29,231 --> 00:14:30,852
because the listener is outside.

319
00:14:30,852 --> 00:14:33,834
So you need both locations even for the decay rate of reverb.

320
00:14:33,834 --> 00:14:36,136
And this is a quick demo of this.

321
00:14:36,136 --> 00:14:37,497
I'll play it and explain later.

322
00:14:42,902 --> 00:14:45,924
Great, there's even more of them up here.

323
00:14:45,924 --> 00:14:47,745
So the player and the male squad member,

324
00:14:47,745 --> 00:14:50,186
they speak a line both in the main hall,

325
00:14:50,186 --> 00:14:52,087
and you're getting a consistent reverb.

326
00:14:52,087 --> 00:14:54,969
The reverb is not very different between them,

327
00:14:54,969 --> 00:14:57,290
even though the listener has gone into a smaller room.

328
00:14:57,290 --> 00:14:57,931
So I'll play it again.

329
00:14:57,931 --> 00:15:03,494
Through that door.

330
00:15:03,494 --> 00:15:06,756
Great, there's even more of them up here.

331
00:15:06,756 --> 00:15:08,197
So you're getting a mix of the spaces.

332
00:15:08,197 --> 00:15:08,737
That's the important part.

333
00:15:08,737 --> 00:15:12,119
This demo shows that acoustics can convey location

334
00:15:12,119 --> 00:15:12,400
in a scene.

335
00:15:16,627 --> 00:15:21,990
Across the way.

336
00:15:21,990 --> 00:15:23,791
They're coming around.

337
00:15:23,791 --> 00:15:24,091
Look out.

338
00:15:24,091 --> 00:15:25,872
So her line at the end, she's speaking two lines.

339
00:15:25,872 --> 00:15:28,613
One when she's inside the room, and one she's in the same hall as you.

340
00:15:28,613 --> 00:15:30,975
And from that, you can get a sense of where she's located.

341
00:15:30,975 --> 00:15:31,555
I'll play it again.

342
00:15:31,555 --> 00:15:31,795
Across the way.

343
00:15:39,780 --> 00:15:41,944
So you can see her acoustics building up properly

344
00:15:41,944 --> 00:15:43,747
as she's in the same space as you.

345
00:15:43,747 --> 00:15:45,590
So in a gameplay situation, if she's behind you,

346
00:15:45,590 --> 00:15:48,215
just from the sound you can get a sense of

347
00:15:48,215 --> 00:15:49,837
is she right behind you in the scene

348
00:15:49,837 --> 00:15:52,502
or stuck in a room, in an earlier room.

349
00:15:54,201 --> 00:15:55,842
So to quickly summarize this,

350
00:15:55,842 --> 00:15:57,803
these are the four effects we wanted

351
00:15:57,803 --> 00:16:00,365
and they all depend on where the source and listener

352
00:16:00,365 --> 00:16:02,946
are moving around in a complicated scene geometry

353
00:16:02,946 --> 00:16:04,347
and with Triton we can model them.

354
00:16:04,347 --> 00:16:06,608
And the question is how?

355
00:16:06,608 --> 00:16:08,389
So let's jump into that.

356
00:16:08,389 --> 00:16:12,151
So the idea of Triton is to bake wave simulations

357
00:16:12,151 --> 00:16:14,192
and these wave simulations look like the animation

358
00:16:14,192 --> 00:16:15,593
I showed you in the beginning

359
00:16:15,593 --> 00:16:17,554
and they give us accuracy and reliability

360
00:16:17,554 --> 00:16:19,736
on all these complex geometries you've been seeing.

361
00:16:20,779 --> 00:16:22,760
And then once we bake out the data at runtime,

362
00:16:22,760 --> 00:16:23,901
it's lookup plus interpolation.

363
00:16:23,901 --> 00:16:25,402
So it's like light maps in that regard.

364
00:16:25,402 --> 00:16:27,664
It's CPU light, memory heavy.

365
00:16:27,664 --> 00:16:30,826
And the thing is, if you want dynamic sources on listener,

366
00:16:30,826 --> 00:16:34,468
we have to sample source and listener location possibilities

367
00:16:34,468 --> 00:16:36,009
and that means a lot of RAM.

368
00:16:36,009 --> 00:16:39,091
So that's the key technical problem here.

369
00:16:39,091 --> 00:16:41,172
And baking, of course, restricts to static geometry,

370
00:16:41,172 --> 00:16:42,833
but this is not a preference.

371
00:16:42,833 --> 00:16:45,415
It's just the first feasible step in our view.

372
00:16:45,415 --> 00:16:48,077
Just like lighting, maybe we can layer dynamic stuff

373
00:16:48,077 --> 00:16:49,618
on top of it later on.

374
00:16:51,323 --> 00:16:53,445
So here's what the baking pipeline looks like.

375
00:16:53,445 --> 00:16:57,328
The input is a game map in FBX format

376
00:16:57,328 --> 00:17:00,010
with per triangle materials assigned.

377
00:17:00,010 --> 00:17:02,332
And along with that we have some NavMesh geometry

378
00:17:02,332 --> 00:17:03,293
which I'll get to later.

379
00:17:03,293 --> 00:17:07,036
So once we have this 3D geometry, we voxelize all of it.

380
00:17:07,036 --> 00:17:08,838
Each voxel gets a material code,

381
00:17:08,838 --> 00:17:11,720
so you get proper reflectivities throughout the scene.

382
00:17:11,720 --> 00:17:12,941
And the material name's mapped

383
00:17:12,941 --> 00:17:14,743
to acoustic reflectivity coefficients.

384
00:17:14,743 --> 00:17:18,166
And the simulator runs on this voxel data directly.

385
00:17:19,765 --> 00:17:21,586
But the problem is we need to sample

386
00:17:21,586 --> 00:17:22,987
where the player can be.

387
00:17:22,987 --> 00:17:25,749
Now how do we do this sampling?

388
00:17:25,749 --> 00:17:29,693
We can draw boxes in the scene to indicate

389
00:17:29,693 --> 00:17:31,014
where to do sampling.

390
00:17:31,014 --> 00:17:33,376
And John's immediate point was,

391
00:17:33,376 --> 00:17:35,918
this is similar work as reverb volumes.

392
00:17:35,918 --> 00:17:38,460
So this is not very good.

393
00:17:38,460 --> 00:17:39,540
So we solve the problem.

394
00:17:39,540 --> 00:17:41,902
We realize that the nav mesh already tells us

395
00:17:41,902 --> 00:17:43,884
very nicely where the player can be.

396
00:17:43,884 --> 00:17:46,206
So we just lay out our samples at some fixed height

397
00:17:46,206 --> 00:17:47,407
above this nav mesh in the scene.

398
00:17:48,380 --> 00:17:50,261
and then we get these blue boxes,

399
00:17:50,261 --> 00:17:52,662
those are the player probe samples.

400
00:17:52,662 --> 00:17:55,042
And along with that, we do adaptive sampling,

401
00:17:55,042 --> 00:17:57,663
which simply means that in narrow regions,

402
00:17:57,663 --> 00:18:00,464
we sample more densely, and in very wide open areas,

403
00:18:00,464 --> 00:18:01,884
we sample more coarsely,

404
00:18:01,884 --> 00:18:04,145
because this gives us a better RAM budget,

405
00:18:04,145 --> 00:18:06,786
and it doesn't produce bugs where you just miss samples

406
00:18:06,786 --> 00:18:08,566
in some areas, which used to keep me up at night,

407
00:18:08,566 --> 00:18:09,247
so this was great.

408
00:18:11,918 --> 00:18:14,561
And then the bake process is the same thing repeated

409
00:18:14,561 --> 00:18:16,843
for all of these probes independently.

410
00:18:16,843 --> 00:18:18,485
And what that process looks like is,

411
00:18:18,485 --> 00:18:21,889
suppose I pick this probe with the red circle one,

412
00:18:21,889 --> 00:18:26,094
the bake process for that guy will look something like

413
00:18:26,094 --> 00:18:28,016
you do a 3D wave simulation from that location.

414
00:18:28,016 --> 00:18:30,459
Because then it tells you

415
00:18:31,412 --> 00:18:34,494
for this player location, what the acoustics is like

416
00:18:34,494 --> 00:18:35,855
in 3D throughout the map.

417
00:18:35,855 --> 00:18:38,436
So now the source can fly anywhere at runtime

418
00:18:38,436 --> 00:18:40,258
and we can calculate the acoustics.

419
00:18:40,258 --> 00:18:41,579
If you look at the lower right,

420
00:18:41,579 --> 00:18:42,639
you can see sound leaking out

421
00:18:42,639 --> 00:18:44,140
of the broken roof of the cathedral.

422
00:18:44,140 --> 00:18:45,501
Again, this is a 2D slice of a 3D simulation.

423
00:18:45,501 --> 00:18:47,122
And you can see sound going into that adjoining room,

424
00:18:47,122 --> 00:18:47,583
radiating outdoors.

425
00:18:47,583 --> 00:18:49,304
And with time, you can see the sound decay out properly,

426
00:18:49,304 --> 00:18:50,505
which captures the absorptivity of the scene.

427
00:19:00,582 --> 00:19:02,625
So we repeat this process for all probes.

428
00:19:02,625 --> 00:19:04,848
So think about, you did a probe simulation,

429
00:19:04,848 --> 00:19:07,111
you capture the signal at one possible point.

430
00:19:07,111 --> 00:19:09,594
So you have a pair of source and listener location.

431
00:19:09,594 --> 00:19:11,597
For each one of those, you get an impulse response,

432
00:19:11,597 --> 00:19:13,880
which if you remember, each of these spikes

433
00:19:13,880 --> 00:19:16,423
represent a wave front coming from source to listener

434
00:19:16,423 --> 00:19:18,025
with some delay and some loudness.

435
00:19:18,892 --> 00:19:20,673
And then we have this nice data.

436
00:19:20,673 --> 00:19:23,195
I told you which things we want out of it,

437
00:19:23,195 --> 00:19:24,616
so we just extract them.

438
00:19:24,616 --> 00:19:27,979
So we take the initial energy and just take a time bin

439
00:19:27,979 --> 00:19:28,880
and calculate that.

440
00:19:28,880 --> 00:19:30,901
It can have multiple paths in it.

441
00:19:30,901 --> 00:19:34,204
And then we do the same for the reflected energy.

442
00:19:34,204 --> 00:19:36,586
We want the decay rate, so we also compute the decay rate

443
00:19:36,586 --> 00:19:38,787
of the reflections, and then the decay rate

444
00:19:38,787 --> 00:19:39,288
of the reverb tail.

445
00:19:39,288 --> 00:19:40,569
So four numbers.

446
00:19:41,656 --> 00:19:45,459
So we went from these impulse responses to four numbers,

447
00:19:45,459 --> 00:19:46,680
and we can visualize them.

448
00:19:46,680 --> 00:19:50,262
So this is for a single-player probe location,

449
00:19:50,262 --> 00:19:53,765
we have mapped out what the initial energy variation

450
00:19:53,765 --> 00:19:56,187
is throughout the scene.

451
00:19:56,187 --> 00:19:58,488
And in this you can see, in the initial energy,

452
00:19:58,488 --> 00:20:01,010
you can see strong shadowing effects.

453
00:20:01,010 --> 00:20:02,932
Like I'm zooming in into one portion,

454
00:20:02,932 --> 00:20:05,193
it's like you get soft shadow edges,

455
00:20:05,193 --> 00:20:06,775
and if you walked across a doorway,

456
00:20:06,775 --> 00:20:08,936
you get the effect of sound going from faint

457
00:20:08,936 --> 00:20:11,078
to loud to faint again in a smooth way.

458
00:20:13,178 --> 00:20:14,719
Reflected energy behaves differently.

459
00:20:14,719 --> 00:20:17,181
In the helicopter demo, you saw it stayed constant

460
00:20:17,181 --> 00:20:18,962
in the room, it didn't change that much.

461
00:20:18,962 --> 00:20:20,823
And that we see in the data as well.

462
00:20:20,823 --> 00:20:23,224
If you look at this room, it's pretty constant

463
00:20:23,224 --> 00:20:24,044
throughout the room.

464
00:20:24,044 --> 00:20:26,005
Once the energy gets in there, it keeps bouncing around.

465
00:20:26,005 --> 00:20:30,048
And so you automatically, just from the 3D geometry,

466
00:20:30,048 --> 00:20:32,069
you get this room division of the whole scene

467
00:20:32,069 --> 00:20:34,370
where the reflected energy is mapped out

468
00:20:34,370 --> 00:20:36,111
as constant areas in the scene.

469
00:20:37,431 --> 00:20:39,052
And similar for sound decay rate,

470
00:20:39,052 --> 00:20:42,013
you can see it's decaying faster for the smaller room

471
00:20:42,013 --> 00:20:43,674
and it's decaying slower for the main hall.

472
00:20:43,674 --> 00:20:46,655
So all the four effects I was talking about,

473
00:20:46,655 --> 00:20:48,836
they're all in this data.

474
00:20:48,836 --> 00:20:50,636
Now the thing is, this data is smooth.

475
00:20:50,636 --> 00:20:52,697
These are not impulse responses, these are parameters.

476
00:20:52,697 --> 00:20:54,758
And they're perceptual parameters,

477
00:20:54,758 --> 00:20:56,399
so we can compress them.

478
00:20:56,399 --> 00:20:59,500
And we can go from 50 terabytes to 100 megabytes.

479
00:20:59,500 --> 00:21:01,101
So this is what makes it practical.

480
00:21:02,054 --> 00:21:04,737
So 100 megabytes, we can live with.

481
00:21:04,737 --> 00:21:07,639
And that was the budget for campaign maps

482
00:21:07,639 --> 00:21:08,160
in years of war for this.

483
00:21:08,160 --> 00:21:11,462
Actually, the initial budget was.

484
00:21:12,230 --> 00:21:14,673
150, so we came in under budget.

485
00:21:14,673 --> 00:21:14,813
Yes.

486
00:21:14,813 --> 00:21:19,837
So we have, so these bigs are costly.

487
00:21:19,837 --> 00:21:22,320
You do pay pre-compute cost for this,

488
00:21:22,320 --> 00:21:24,281
for getting the smooth results.

489
00:21:24,281 --> 00:21:25,983
100 machines take about four hours.

490
00:21:25,983 --> 00:21:27,585
It's 10 minutes per task, 10 to 20 minutes,

491
00:21:27,585 --> 00:21:29,506
and we have thousands of these

492
00:21:29,506 --> 00:21:31,728
for potential player locations.

493
00:21:31,728 --> 00:21:33,150
But it's trivially parallel.

494
00:21:33,150 --> 00:21:34,551
Throw more machines, it gets faster.

495
00:21:36,389 --> 00:21:39,552
Now once we have this data, runtime is lookup.

496
00:21:39,552 --> 00:21:42,074
So we need to decompress out the data,

497
00:21:42,074 --> 00:21:43,495
which is the bottleneck.

498
00:21:43,495 --> 00:21:45,597
So we use ZLIB for the compression.

499
00:21:45,597 --> 00:21:47,278
So we keep a decompression cache,

500
00:21:47,278 --> 00:21:48,619
which is a 20 MB overhead.

501
00:21:48,619 --> 00:21:50,701
Triton runs in its own worker thread,

502
00:21:50,701 --> 00:21:53,744
and it's receiving queries at visual frame rates,

503
00:21:53,744 --> 00:21:55,605
so we're uploading acoustics.

504
00:21:55,605 --> 00:21:59,509
And for about 32 sources, which we do per frame,

505
00:21:59,509 --> 00:22:01,150
we can do 10 to 20% of an Xbox score,

506
00:22:01,150 --> 00:22:02,811
because it's only 100 microseconds per query,

507
00:22:02,811 --> 00:22:03,832
so it's pretty fast.

508
00:22:06,565 --> 00:22:08,527
So overall, after we're done with all this,

509
00:22:08,527 --> 00:22:10,829
this is the big picture of the game integration.

510
00:22:10,829 --> 00:22:12,491
There's a static library for Triton.

511
00:22:12,491 --> 00:22:14,433
It loads up the data during map load.

512
00:22:14,433 --> 00:22:16,536
It loads the Triton data as well.

513
00:22:16,536 --> 00:22:19,039
At runtime, you get a source and listener location.

514
00:22:19,039 --> 00:22:22,082
You do this table lookup that I just described to you,

515
00:22:22,082 --> 00:22:23,564
and you get these four numbers out.

516
00:22:24,104 --> 00:22:26,426
Now the cool thing is these four numbers mean something.

517
00:22:26,426 --> 00:22:28,467
They are not samples in an impulse response.

518
00:22:28,467 --> 00:22:31,329
They're actually parameters that describe something.

519
00:22:31,329 --> 00:22:33,111
So they are meaningful for an audio designer

520
00:22:33,111 --> 00:22:36,954
to take and interpret into an existing audio pipeline.

521
00:22:36,954 --> 00:22:39,335
And in our case, they amount to reverb send values

522
00:22:39,335 --> 00:22:40,316
and occlusion obstruction values,

523
00:22:40,316 --> 00:22:41,477
which John will talk about.

524
00:22:41,477 --> 00:22:42,458
So to wrap up my portion,

525
00:22:42,458 --> 00:22:48,102
this idea of going to perceptual data

526
00:22:48,102 --> 00:22:51,404
gives us efficient efficiency.

527
00:22:53,344 --> 00:22:54,905
Because we're doing wave simulations,

528
00:22:54,905 --> 00:22:56,747
we get robustness in complex geometry.

529
00:22:56,747 --> 00:22:58,609
From the designer's viewpoint, it's automatic,

530
00:22:58,609 --> 00:23:00,570
no geometric cleanup, no volumes to draw.

531
00:23:00,570 --> 00:23:03,553
And it's pretty expressive, as John would talk about.

532
00:23:03,553 --> 00:23:05,415
There's a paper reference.

533
00:23:05,415 --> 00:23:07,016
This will be on GDC Vault, so you can look at it later.

534
00:23:07,016 --> 00:23:10,139
So that was my portion, how to get to the acoustic data

535
00:23:10,139 --> 00:23:11,160
from the 3D map.

536
00:23:11,160 --> 00:23:15,444
And then the question is how to use this data

537
00:23:15,444 --> 00:23:17,286
to do audio design.

538
00:23:17,286 --> 00:23:18,447
So I'll hand it over to John.

539
00:23:18,447 --> 00:23:18,967
Thanks, Nikunj.

540
00:23:26,154 --> 00:23:31,617
So that's

541
00:23:31,617 --> 00:23:36,060
what I got from the coons.

542
00:23:36,060 --> 00:23:39,322
So I you know.

543
00:23:39,322 --> 00:23:42,164
I like wise I can know how to work with blueprints fairly well.

544
00:23:42,164 --> 00:23:46,527
But this is what we have to work with.

545
00:23:46,527 --> 00:23:50,690
So the challenge was is how do we take this

546
00:23:50,690 --> 00:23:54,532
and interpreted to do something that we can actually here in the game.

547
00:23:57,481 --> 00:23:58,301
move right into it.

548
00:23:58,301 --> 00:24:01,622
So, it's important for me to kind of,

549
00:24:01,622 --> 00:24:03,182
might be a little bit of reiteration,

550
00:24:03,182 --> 00:24:05,463
but to describe what Triton actually is

551
00:24:05,463 --> 00:24:08,024
for me as a sound designer,

552
00:24:08,024 --> 00:24:11,724
as opposed to what Triton is for Nacoonge as a researcher.

553
00:24:11,724 --> 00:24:14,385
So, as a sound designer,

554
00:24:14,385 --> 00:24:17,386
it's a set of listener and source positions

555
00:24:17,386 --> 00:24:22,087
that refer to these four numbers,

556
00:24:22,087 --> 00:24:24,968
collusion obstruction, wetness, decay rate.

557
00:24:26,570 --> 00:24:28,311
And it's a lookup table.

558
00:24:28,311 --> 00:24:31,673
It's an inert set of data that has to be interpreted.

559
00:24:31,673 --> 00:24:34,915
And that data is very big.

560
00:24:34,915 --> 00:24:37,556
So it takes up a lot of our RAM budget.

561
00:24:37,556 --> 00:24:39,738
Going to get into this later.

562
00:24:39,738 --> 00:24:42,559
But audio designers are often working with smaller and smaller

563
00:24:42,559 --> 00:24:43,720
RAM budgets.

564
00:24:43,720 --> 00:24:48,142
So this is a fairly big sell for an audio team to use this.

565
00:24:50,738 --> 00:24:54,001
What Triton is not, is it's not a reverb plug-in.

566
00:24:54,001 --> 00:24:57,925
You can't just take it, put it on a sub-bus,

567
00:24:57,925 --> 00:24:59,426
turn it on and have it work.

568
00:24:59,426 --> 00:25:03,590
It's not a plug-in that goes into an audio engine

569
00:25:03,590 --> 00:25:05,291
like UE4, turn it on and it works.

570
00:25:05,291 --> 00:25:09,335
It has to be, at this stage, implemented.

571
00:25:09,335 --> 00:25:13,398
Maybe one day, but at this stage, has to be implemented.

572
00:25:13,398 --> 00:25:17,562
So, to reiterate,

573
00:25:18,798 --> 00:25:23,661
what the ideal interpretation of the ideal implementation of Triton is

574
00:25:23,661 --> 00:25:25,762
uh...

575
00:25:25,762 --> 00:25:27,963
because it generates a whole bunch of

576
00:25:27,963 --> 00:25:29,244
impulse responses

577
00:25:29,244 --> 00:25:33,506
uh... ideally we would use those impulse responses

578
00:25:33,506 --> 00:25:35,327
for every sound in the game

579
00:25:35,327 --> 00:25:37,008
as the game is rendering

580
00:25:37,008 --> 00:25:38,949
so that would end up being

581
00:25:38,949 --> 00:25:39,249
you know

582
00:25:40,219 --> 00:25:42,861
maybe a hundred sounds in a complex scene.

583
00:25:42,861 --> 00:25:45,504
Different games use different number of voices,

584
00:25:45,504 --> 00:25:48,927
but obviously this is way over CPU budget,

585
00:25:48,927 --> 00:25:50,908
and to use this many impulse responses,

586
00:25:50,908 --> 00:25:52,650
it's way over the RAM budget.

587
00:25:52,650 --> 00:25:55,712
So, that's not practical for video games.

588
00:25:55,712 --> 00:26:01,537
So, the next thing that we had to figure out was

589
00:26:01,537 --> 00:26:05,741
how do we get variable reverb decay rates

590
00:26:07,169 --> 00:26:10,332
without instancing one reverb plugin per sound.

591
00:26:10,332 --> 00:26:12,494
So we came up with.

592
00:26:12,494 --> 00:26:13,575
Let me interject quickly.

593
00:26:13,575 --> 00:26:14,436
Please.

594
00:26:14,436 --> 00:26:16,938
So this ideal system is describing,

595
00:26:16,938 --> 00:26:18,500
that's what we started with.

596
00:26:18,500 --> 00:26:19,541
That's the GDC 2011 system.

597
00:26:19,541 --> 00:26:20,141
That's right.

598
00:26:20,141 --> 00:26:23,244
And you can see the RAM footprint right there.

599
00:26:23,244 --> 00:26:23,985
So it was 100 GB.

600
00:26:23,985 --> 00:26:25,066
So that's the motivation here.

601
00:26:25,066 --> 00:26:25,206
Good job.

602
00:26:25,206 --> 00:26:25,486
Thank you.

603
00:26:25,486 --> 00:26:29,350
So this was the first version of our implementation.

604
00:26:31,479 --> 00:26:38,170
It's very simple we use 3 instances of wise room for and we sent to those 3

605
00:26:38,170 --> 00:26:45,662
instances of wise re room for her 3 game object to achieve different river to K

606
00:26:45,662 --> 00:26:45,962
times.

607
00:26:46,382 --> 00:26:48,423
So the big one was three seconds,

608
00:26:48,423 --> 00:26:50,884
the middle one was one second,

609
00:26:50,884 --> 00:26:52,964
and the smaller one was half a second.

610
00:26:52,964 --> 00:26:55,765
So if you wanted a reverb tail of, say,

611
00:26:55,765 --> 00:26:57,586
.75 seconds long, you would send a little bit

612
00:26:57,586 --> 00:27:00,126
to the middle one and a little bit to the small one,

613
00:27:00,126 --> 00:27:01,807
and what your ear actually heard

614
00:27:01,807 --> 00:27:03,827
was about a .75 second decay rate.

615
00:27:03,827 --> 00:27:10,789
And so what it gave us was send levels controlled by Triton

616
00:27:10,789 --> 00:27:11,790
that gave us

617
00:27:12,300 --> 00:27:14,161
decay rates per 3D sound.

618
00:27:14,161 --> 00:27:16,862
So this, we didn't know if it was gonna work.

619
00:27:16,862 --> 00:27:18,143
We gave it a shot.

620
00:27:18,143 --> 00:27:19,583
Turned out that it worked really, really well.

621
00:27:19,583 --> 00:27:24,426
Occlusion obstruction in this,

622
00:27:24,426 --> 00:27:28,808
in this implementation was immediately awesome.

623
00:27:28,808 --> 00:27:36,452
So I'm gonna show a video example of that in a second.

624
00:27:36,452 --> 00:27:36,692
But the

625
00:27:36,692 --> 00:27:38,733
reverb still needed work.

626
00:27:38,733 --> 00:27:41,034
RoomVerb, when stacked on top of each other,

627
00:27:42,418 --> 00:27:46,382
again and again can sound a little bit cacophonous.

628
00:27:46,382 --> 00:27:49,786
It's the same tone stacked.

629
00:27:49,786 --> 00:27:51,367
We didn't quite know how to control

630
00:27:51,367 --> 00:27:55,652
all these sources going through RoomVerb

631
00:27:55,652 --> 00:27:59,235
and it was unpredictable about 25% of the time.

632
00:27:59,235 --> 00:28:01,478
So it wasn't yet shippable,

633
00:28:01,478 --> 00:28:03,520
but it was a successful proof of concept.

634
00:28:04,468 --> 00:28:07,571
Mainly because occlusion obstruction was excellent.

635
00:28:07,571 --> 00:28:11,976
And that is typically one of the hardest problems to solve.

636
00:28:11,976 --> 00:28:15,139
So here's a little demo of what we got

637
00:28:15,139 --> 00:28:17,161
out of that first implementation.

638
00:28:17,161 --> 00:28:20,984
So there's a firefight happening

639
00:28:20,984 --> 00:28:22,426
around where that red circle is.

640
00:28:22,426 --> 00:28:25,549
And the player's just gonna move around in the scene.

641
00:28:25,549 --> 00:28:27,290
You can hear it occluding and obstructing.

642
00:28:58,735 --> 00:29:02,578
What is this?

643
00:29:02,578 --> 00:29:10,024
Jin's bucket heads are taking on the swarm.

644
00:29:10,024 --> 00:29:12,005
Jeez.

645
00:29:12,005 --> 00:29:12,686
Okay, so...

646
00:29:13,485 --> 00:29:15,547
Obviously, we knew we had something cool.

647
00:29:15,547 --> 00:29:18,550
Inclusion obstruction's working really well.

648
00:29:18,550 --> 00:29:21,332
So the rest of the talk's going to kind of focus on the story

649
00:29:21,332 --> 00:29:24,214
of how we got the reverb to sound a bit better.

650
00:29:24,214 --> 00:29:28,018
So our next version of the implementation

651
00:29:28,018 --> 00:29:30,220
was significantly more complex, because we

652
00:29:30,220 --> 00:29:32,361
had all of these numbers to work with.

653
00:29:32,361 --> 00:29:33,662
We wanted to do something cooler.

654
00:29:33,662 --> 00:29:35,604
So this is what it looked like.

655
00:29:35,604 --> 00:29:35,964
We added.

656
00:29:41,630 --> 00:29:43,471
Well, we added nine more reverbs.

657
00:29:43,471 --> 00:29:48,294
So what you're seeing here is a matrix of reverbs.

658
00:29:48,294 --> 00:29:54,759
The first row of six, there's indoor reflections

659
00:29:54,759 --> 00:29:55,900
and outdoor reflections.

660
00:29:55,900 --> 00:30:01,184
The second row of six are indoor late reflections

661
00:30:01,184 --> 00:30:02,605
and outdoor late reflections.

662
00:30:02,605 --> 00:30:06,267
And so Triton is controlling the sends

663
00:30:06,267 --> 00:30:09,249
per 3D game object to each,

664
00:30:10,067 --> 00:30:16,251
matrix of reverbs as the player moves around the scene.

665
00:30:16,251 --> 00:30:21,835
So in theory, it should have worked really, really well.

666
00:30:21,835 --> 00:30:22,475
And it did.

667
00:30:22,475 --> 00:30:24,857
And I'm gonna just, actually just give you a picture

668
00:30:24,857 --> 00:30:27,098
of what this looks like in Wwise real quick.

669
00:30:27,098 --> 00:30:29,800
So we have our Triton bus there on the top left.

670
00:30:29,800 --> 00:30:30,520
Expanded.

671
00:30:30,520 --> 00:30:33,322
That looks kinda crazy.

672
00:30:34,165 --> 00:30:40,587
But the reason there's so many buses there is we were doing a set of 12 reverbs per map.

673
00:30:40,587 --> 00:30:48,810
And because there was no signal being sent to the buses that weren't being used,

674
00:30:48,810 --> 00:30:51,191
those buses didn't register on the CPU.

675
00:30:51,191 --> 00:30:54,012
So we were only ever running 12 convolution reverbs at a time.

676
00:30:54,012 --> 00:30:59,414
Which sounds like a lot, but it actually worked kind of okay.

677
00:30:59,414 --> 00:31:01,535
CPU was not the problem with this implementation.

678
00:31:02,960 --> 00:31:08,064
So then, as you can see there, the map, the working name of that map was Dan B.

679
00:31:08,064 --> 00:31:13,729
And then a single instance would look like that.

680
00:31:13,729 --> 00:31:18,053
So it's just the Wwise Convolution Reverb plugin.

681
00:31:18,053 --> 00:31:23,758
Now the difficult thing with this system, the main problem with it, was we're working with

682
00:31:24,449 --> 00:31:26,351
a very new set of tech.

683
00:31:26,351 --> 00:31:30,834
And we knew we had this squirrelly behavior

684
00:31:30,834 --> 00:31:34,637
about 25% of the time, which is definitely not shippable.

685
00:31:34,637 --> 00:31:38,299
The hard part with this stuff was calibrating and tuning.

686
00:31:38,299 --> 00:31:41,442
So, because we were working with impulse responses

687
00:31:41,442 --> 00:31:44,004
that were recorded by different people,

688
00:31:44,004 --> 00:31:46,546
different parts of the world, with different microphones,

689
00:31:46,546 --> 00:31:48,707
using different theories of game structure.

690
00:31:50,107 --> 00:31:58,200
we had to calibrate and tune every single reverb that was in this matrix of 12 perfectly

691
00:31:58,200 --> 00:32:02,548
to be sure that what we were getting in the end wasn't...

692
00:32:04,102 --> 00:32:09,284
a mistake in tuning, but was actually what Triton was trying to give us.

693
00:32:09,284 --> 00:32:14,846
So this task of calibrating and tuning every single reverb that we wanted to use ended

694
00:32:14,846 --> 00:32:18,327
up being the main flaw in this implementation.

695
00:32:18,327 --> 00:32:30,472
So the version 2 summary, there's two sets of six reverbs, and Triton is feeding indoor

696
00:32:30,472 --> 00:32:33,093
and outdoor signals to both of them.

697
00:32:34,042 --> 00:32:38,322
You can change reverb sets per map.

698
00:32:38,322 --> 00:32:40,523
You could also change reverb sets mid-map

699
00:32:40,523 --> 00:32:41,583
if you wanted to.

700
00:32:41,583 --> 00:32:45,184
So there was a lot of versatility for it.

701
00:32:45,184 --> 00:32:50,025
We had great response for the reverbs

702
00:32:50,025 --> 00:32:52,005
and the early reflections as you moved around room.

703
00:32:52,005 --> 00:32:54,206
There were incredible relevatory moments

704
00:32:54,206 --> 00:32:58,267
that this system can work and is going to work.

705
00:32:58,267 --> 00:33:01,067
But we didn't know whether or not.

706
00:33:02,398 --> 00:33:05,619
we could calibrate and tune this much stuff in time.

707
00:33:05,619 --> 00:33:09,440
So, because calibrating and tuning were so hard,

708
00:33:09,440 --> 00:33:11,601
it was very, very difficult to figure out

709
00:33:11,601 --> 00:33:13,081
where the bugs were coming from.

710
00:33:13,081 --> 00:33:14,562
I always thought they were coming from Nacoonj,

711
00:33:14,562 --> 00:33:16,122
Nacoonj always thought they were coming from me.

712
00:33:16,122 --> 00:33:22,925
So, one of the things that worked really, really well

713
00:33:22,925 --> 00:33:25,325
with this implementation was the blending

714
00:33:25,325 --> 00:33:27,166
that we did between indoors and outdoors.

715
00:33:27,166 --> 00:33:28,867
So, I'm going back to.

716
00:33:29,872 --> 00:33:31,313
This slide is familiar.

717
00:33:31,313 --> 00:33:33,195
This is the matrix of reverbs.

718
00:33:33,195 --> 00:33:35,858
I want to talk about how we achieved

719
00:33:35,858 --> 00:33:40,083
the indoor and outdoor blend.

720
00:33:40,083 --> 00:33:46,409
So, in a video game that isn't completely simplistic,

721
00:33:46,409 --> 00:33:47,110
you often have...

722
00:33:48,177 --> 00:33:58,324
partially destroyed buildings, you have doorways of various sizes, and so it's not really a binary concept

723
00:33:58,324 --> 00:34:03,648
whether you're inside or outside. You're usually partially indoors or partially outdoors.

724
00:34:03,648 --> 00:34:10,533
And so for a while, what I was doing was I was just shooting a ray above the player 15 meters.

725
00:34:10,533 --> 00:34:14,776
If it intersected with geometry, the player's inside. If it didn't intersect,

726
00:34:15,215 --> 00:34:19,678
I used filtering over time to gradually smooth the value out

727
00:34:19,678 --> 00:34:21,700
to the players outside.

728
00:34:21,700 --> 00:34:24,822
So this is still binary, didn't work at portals.

729
00:34:24,822 --> 00:34:27,704
So I told the problem to Nacoon, and Nacoon said,

730
00:34:27,704 --> 00:34:31,306
well, all the hard work is already done to get this data.

731
00:34:31,306 --> 00:34:36,809
We can just use the Triton data set to figure out

732
00:34:36,809 --> 00:34:39,531
how indoors or outdoors the player is.

733
00:34:39,531 --> 00:34:41,432
So we shoot energy around.

734
00:34:41,432 --> 00:34:43,674
How much of that energy intersects with the sky?

735
00:34:44,419 --> 00:34:49,303
determines how outdoors a player is.

736
00:34:49,303 --> 00:34:54,607
So as the player moves towards the portal,

737
00:34:54,607 --> 00:34:57,969
the outdoors value, which is that 1.33 here,

738
00:34:57,969 --> 00:34:58,890
would change to 0.72 here.

739
00:34:58,890 --> 00:35:02,773
So this is how we achieved the mix

740
00:35:02,773 --> 00:35:06,316
between the indoor Reverb Bus and the outdoor Reverb Bus.

741
00:35:06,316 --> 00:35:08,218
And it gave us a really nice blend.

742
00:35:08,218 --> 00:35:08,538
Check, check.

743
00:35:08,538 --> 00:35:08,718
Mic check.

744
00:35:08,718 --> 00:35:11,160
Gave us a really nice blend.

745
00:35:13,780 --> 00:35:15,981
as the player moved through thresholds and spaces,

746
00:35:15,981 --> 00:35:19,162
which are traditionally very difficult to manage.

747
00:35:19,162 --> 00:35:23,743
This had unforeseen uses as well.

748
00:35:23,743 --> 00:35:27,124
We were using a six-channel ambience for wind

749
00:35:27,124 --> 00:35:28,884
and a six-channel ambience for rain.

750
00:35:28,884 --> 00:35:31,885
In the game, I think my batteries

751
00:35:31,885 --> 00:35:33,105
might be low or something.

752
00:35:33,105 --> 00:35:34,526
Anyway, I'll just keep talking.

753
00:35:34,526 --> 00:35:36,306
Should I talk into here?

754
00:35:36,306 --> 00:35:36,446
OK.

755
00:35:36,446 --> 00:35:36,566
Whoa.

756
00:35:41,564 --> 00:35:48,246
Is my loud down? Okay, cool. We're using, as I said, sick channel ambiences for wind and rain.

757
00:35:48,246 --> 00:35:54,767
And we played, for various reasons, we played those on the listener position. And so then as

758
00:35:54,767 --> 00:36:00,989
the player moves through the spaces, we use the outdoorsness value to determine how much of the

759
00:36:00,989 --> 00:36:01,729
wind and rain.

760
00:36:01,949 --> 00:36:09,158
the player should hear. So as we pass by thresholds, we use the outdoors value to modulate the

761
00:36:09,158 --> 00:36:13,984
filtering, the pitch and the voice volume of those sounds. And so I got a demo of that

762
00:36:13,984 --> 00:36:18,169
here. So you're hearing just the rain. Just the rain.

763
00:36:44,352 --> 00:36:46,854
So portals are no longer an issue.

764
00:36:46,854 --> 00:36:48,536
This was huge for me.

765
00:36:48,536 --> 00:36:52,440
It solved many issues, I was very excited about this.

766
00:36:52,440 --> 00:36:55,343
So version two, although it solved the problem

767
00:36:55,343 --> 00:36:56,725
of whether you're inside and outside

768
00:36:56,725 --> 00:36:59,868
and it solved a lot of problems with our ambiences,

769
00:36:59,868 --> 00:37:03,331
it still generated some uncomfortable questions.

770
00:37:03,331 --> 00:37:06,295
We still had some squirrelly behavior from time to time.

771
00:37:06,295 --> 00:37:06,915
We didn't know why.

772
00:37:08,159 --> 00:37:16,866
and the system was going to require a lot of sound designer time to calibrate, tune and

773
00:37:16,866 --> 00:37:24,212
interpret, aesthetically, to be honest. So about six months out from shipping, we had Chuck

774
00:37:24,212 --> 00:37:30,096
and Rod in my office and we were doing a demo of I think it was a dialogue tuning level

775
00:37:30,096 --> 00:37:31,197
where you could walk around and.

776
00:37:31,764 --> 00:37:37,426
and trigger squad speech at random so that you could get further from your squad and do

777
00:37:37,426 --> 00:37:42,448
roll offs and stuff. I thought this level was pretty great. I said, please ignore the

778
00:37:42,448 --> 00:37:48,290
reverb. We haven't tuned it yet. Well, there was this one spot, we walked through and all

779
00:37:48,290 --> 00:37:52,632
of a sudden the squad sounded like they were inside an airplane hangar. They weren't

780
00:37:52,632 --> 00:37:58,914
inside an airplane hangar. And the conversation very quickly switched to a conversation

781
00:37:58,914 --> 00:38:01,115
about Triton. And they asked us

782
00:38:01,552 --> 00:38:05,494
politely to get it to a shippable level of quality

783
00:38:05,494 --> 00:38:09,657
on one map in two weeks to see if the work would scale

784
00:38:09,657 --> 00:38:11,519
to the rest of the maps of the game.

785
00:38:11,519 --> 00:38:14,461
It's a completely fair challenge.

786
00:38:14,461 --> 00:38:17,063
So, big change of strategy.

787
00:38:17,063 --> 00:38:20,345
We had to figure out where the bugs were coming from

788
00:38:20,345 --> 00:38:24,208
and we had to reduce timing for calibration and tuning.

789
00:38:24,208 --> 00:38:26,950
So, we had to reduce the number of sounds going into Triton.

790
00:38:27,978 --> 00:38:31,959
and we had to reduce the number of reverb outputs

791
00:38:31,959 --> 00:38:34,540
coming out of Triton.

792
00:38:34,540 --> 00:38:38,621
Again, occlusion obstruction worked just fine,

793
00:38:38,621 --> 00:38:40,602
so I'm not even talking about occlusion obstruction

794
00:38:40,602 --> 00:38:44,483
anymore, we're only talking about reverb here.

795
00:38:44,483 --> 00:38:48,785
Once we simplified, we started to get a real understanding

796
00:38:48,785 --> 00:38:51,165
of the root causes of our problems.

797
00:38:51,165 --> 00:38:55,247
So what did that simplification look like?

798
00:38:55,247 --> 00:38:56,387
It looked like this.

799
00:38:57,483 --> 00:39:02,924
We cut six of the buses and combined the late reflections

800
00:39:02,924 --> 00:39:07,325
and early reflections into the first six buses.

801
00:39:07,325 --> 00:39:11,327
So it was a dramatically simplified implementation.

802
00:39:11,327 --> 00:39:14,527
We knew the indoor and outdoor switching worked really well

803
00:39:14,527 --> 00:39:19,989
and we knew we could manage six buses per map

804
00:39:19,989 --> 00:39:21,889
as a set rather than 12.

805
00:39:21,889 --> 00:39:21,989
So.

806
00:39:23,977 --> 00:39:26,878
The rest of the talk is gonna be about what we learned

807
00:39:26,878 --> 00:39:29,019
once we did this and how we shipped.

808
00:39:29,019 --> 00:39:33,121
First, I'm just gonna run through these points real quick.

809
00:39:33,121 --> 00:39:34,181
Explain them later.

810
00:39:34,181 --> 00:39:37,203
Physical dynamic range that's modeled

811
00:39:37,203 --> 00:39:40,264
by the Triton numbers versus an aesthetic dynamic range

812
00:39:40,264 --> 00:39:42,285
that sound designers interpret to create a mix.

813
00:39:42,285 --> 00:39:47,327
Dry gain, Triton models dry gain that can be applied

814
00:39:47,327 --> 00:39:49,448
to a sound when you're in certain enclosed spaces.

815
00:39:51,968 --> 00:39:58,473
physics-based decay times versus aesthetically chosen decay

816
00:39:58,473 --> 00:39:58,614
times.

817
00:39:58,614 --> 00:40:07,521
So it turns out that we choose decay times in film, TV,

818
00:40:07,521 --> 00:40:12,125
and games on an emotional scale as well as a physical scale.

819
00:40:12,125 --> 00:40:14,908
It's not just physics-based interpretations.

820
00:40:14,908 --> 00:40:16,749
So this got to a shift in thinking.

821
00:40:21,605 --> 00:40:26,469
We're getting these realistic values from Trident,

822
00:40:26,469 --> 00:40:28,952
but how real is too real for the game?

823
00:40:28,952 --> 00:40:33,576
So, lesson number one, dynamic range.

824
00:40:33,576 --> 00:40:39,021
Real world dynamic range is about 190 decibels

825
00:40:39,021 --> 00:40:43,445
between barely audible and permanent hearing damage.

826
00:40:45,415 --> 00:40:47,477
This is no news for sound designers.

827
00:40:47,477 --> 00:40:50,058
We've always had to interpret this in a game mix.

828
00:40:50,058 --> 00:40:53,081
But what was new was a realization

829
00:40:53,081 --> 00:40:56,543
that we had to make that interpretation pre-reverb sound

830
00:40:56,543 --> 00:40:58,404
when using a system like Triton.

831
00:40:58,404 --> 00:41:00,706
So that was new.

832
00:41:00,706 --> 00:41:04,949
So to illustrate for the non-sound designers in the room

833
00:41:04,949 --> 00:41:09,912
what that looks like, there's a map of real world sounds.

834
00:41:09,912 --> 00:41:12,074
A map of sounds that are in Gears of War 4

835
00:41:12,074 --> 00:41:14,295
as they would fall in a real world decibel scale.

836
00:41:15,358 --> 00:41:19,524
All of that has to be mapped into about a 35 decibel scale

837
00:41:19,524 --> 00:41:20,165
of dynamic range.

838
00:41:20,165 --> 00:41:22,749
All of that was going through Triton.

839
00:41:22,749 --> 00:41:25,454
And it didn't sound right.

840
00:41:25,454 --> 00:41:27,797
Obviously, now, seems obvious now.

841
00:41:27,797 --> 00:41:29,099
Wasn't obvious then.

842
00:41:30,147 --> 00:41:34,809
So we knew we needed to focus on a specific dynamic range

843
00:41:34,809 --> 00:41:36,490
going into the reverb.

844
00:41:36,490 --> 00:41:38,991
And even more so than that, we knew we had to nail it

845
00:41:38,991 --> 00:41:42,553
for a single, the single most important element of sound

846
00:41:42,553 --> 00:41:45,654
in the game, which is the squad speech.

847
00:41:45,654 --> 00:41:48,035
So we figured once we nail the squad speech,

848
00:41:48,035 --> 00:41:50,697
get that sounding good through all of the reverb spaces

849
00:41:50,697 --> 00:41:53,938
in the game, then we can start adding the other stuff.

850
00:41:56,746 --> 00:41:59,987
The other fallout from realizing the dynamic range

851
00:41:59,987 --> 00:42:04,569
characteristic of Triton was that we were too aggressive

852
00:42:04,569 --> 00:42:06,790
with our occlusion obstruction curves

853
00:42:06,790 --> 00:42:08,951
and we backed them off a little bit.

854
00:42:08,951 --> 00:42:13,212
So we were working with a attenuation of 100 decibels

855
00:42:13,212 --> 00:42:15,934
before and we backed it off to an attenuation

856
00:42:15,934 --> 00:42:16,714
of 25 decibels.

857
00:42:16,714 --> 00:42:20,555
In a linear game experience like Gears of War,

858
00:42:20,555 --> 00:42:25,117
this was an aesthetic choice to move away from reality.

859
00:42:26,185 --> 00:42:32,670
other games wouldn't want to make this choice. This would be a per‑game decision. So

860
00:42:32,670 --> 00:42:43,498
lesson number two, dry gain. Once we moved to this more simplified implementation, I was

861
00:42:43,498 --> 00:42:44,879
walking around the office.

862
00:42:45,926 --> 00:42:50,607
and I was snapping my fingers, I was clicking my tongue,

863
00:42:50,607 --> 00:42:52,808
and I was trying to figure out all of these things

864
00:42:52,808 --> 00:42:55,128
that Nukunj is telling me that happen in the real world.

865
00:42:55,128 --> 00:42:57,469
Do they actually happen in the real world?

866
00:42:57,469 --> 00:43:00,409
And it turns out that if you just cup your hands

867
00:43:00,409 --> 00:43:03,690
in front of your face, all of a sudden sounds get louder.

868
00:43:03,690 --> 00:43:07,231
So if you walk into a dead end hallway

869
00:43:07,231 --> 00:43:10,632
and snap your fingers, it's a lot louder.

870
00:43:10,632 --> 00:43:14,492
So Nukunj rightly so had a dry gain component

871
00:43:14,492 --> 00:43:15,813
to the Triton implementation.

872
00:43:16,976 --> 00:43:23,004
It turns out that dry gain, when implemented into a video game, at least when implemented

873
00:43:23,004 --> 00:43:27,110
into Gears of War, did not sound expected.

874
00:43:27,110 --> 00:43:30,975
It was an unexpected bit of reality.

875
00:43:32,602 --> 00:43:34,423
So the solution to that was very simple.

876
00:43:34,423 --> 00:43:38,006
We took the dry gain bus, which had the capability

877
00:43:38,006 --> 00:43:42,769
of being plus 12 dB and reduced its range to plus 3 dB.

878
00:43:42,769 --> 00:43:44,850
So the loudest that the dry gain could be added

879
00:43:44,850 --> 00:43:47,311
to any sound was three decibels instead of 12 decibels.

880
00:43:47,311 --> 00:43:48,372
So now it's lesson number three.

881
00:43:48,372 --> 00:43:49,453
And this was perhaps the coolest lesson of all.

882
00:43:49,453 --> 00:43:50,013
Triton simulations were.

883
00:44:04,084 --> 00:44:07,526
Very real.

884
00:44:07,526 --> 00:44:13,850
Sometimes, small spaces like a marble bathroom can generate a very, very long decay time.

885
00:44:13,850 --> 00:44:19,633
Other times, large spaces can generate very, very short decay times.

886
00:44:19,633 --> 00:44:30,560
And so, what we realized is we needed a way to tweak these numbers to fit our expectations

887
00:44:30,560 --> 00:44:31,741
as sound designers.

888
00:44:33,392 --> 00:44:36,855
to emotionally interpret a space.

889
00:44:36,855 --> 00:44:39,756
So what did this mean?

890
00:44:39,756 --> 00:44:43,679
It meant if there was a church and something really grim

891
00:44:43,679 --> 00:44:45,700
was about to happen in the church,

892
00:44:45,700 --> 00:44:48,862
perhaps we'd want a very long decay time in that church,

893
00:44:48,862 --> 00:44:50,924
longer than what that church would actually

894
00:44:50,924 --> 00:44:51,904
give us in real life.

895
00:44:51,904 --> 00:44:52,245
So the solution was.

896
00:44:57,523 --> 00:45:05,088
a new blueprint node to make the distortion or reinterpretation,

897
00:45:05,088 --> 00:45:10,792
the creative reinterpretation of the Triton values possible

898
00:45:10,792 --> 00:45:13,453
for sound designers as we move through the maps.

899
00:45:13,453 --> 00:45:14,714
So I've got a demo showing this.

900
00:45:14,714 --> 00:45:20,438
So this is Triton turned off in this map,

901
00:45:20,438 --> 00:45:22,659
and then Triton turned on afterwards.

902
00:45:25,302 --> 00:45:28,965
I'd say it's about time we got the hell out of here.

903
00:45:28,965 --> 00:45:33,169
Hey, are we not going to talk about what happened back there?

904
00:45:33,169 --> 00:45:34,370
With the nest? I mean, what the hell was that?

905
00:45:34,370 --> 00:45:37,913
It looked like they were transforming.

906
00:45:37,913 --> 00:45:39,254
Wait, you mean like evolving?

907
00:45:39,254 --> 00:45:41,196
Shouldn't that take a lot of time?

908
00:45:41,196 --> 00:45:44,098
It's amazing how much you can hear this room.

909
00:45:44,098 --> 00:45:44,298
Okay, so

910
00:45:44,298 --> 00:45:46,540
I swear there was no reverb on that.

911
00:45:48,705 --> 00:45:54,086
So here is the same scene with Triton turned on

912
00:45:54,086 --> 00:46:01,248
with exaggerated reverb for the big space and then as the squad moves into

913
00:46:01,248 --> 00:46:13,430
the smaller space we start to get a more physically accurate reverb.

914
00:46:15,440 --> 00:46:19,923
Wait, you mean like evolving? Shouldn't that take a lot of time?

915
00:46:19,923 --> 00:46:23,966
Well, some insect juveniles can become drones in days. Hours even.

916
00:46:23,966 --> 00:46:26,888
So, juvies and drones. Juvies and drones of what?

917
00:46:26,888 --> 00:46:29,650
I have a feeling we're going to find out.

918
00:46:29,650 --> 00:46:38,916
So you're hearing in this demo an amalgamation of all of the things that I've been talking about

919
00:46:38,916 --> 00:46:40,838
so far. We've got

920
00:46:41,538 --> 00:46:45,981
conversation over multiple spaces, a big church space to a small room,

921
00:46:45,981 --> 00:46:50,043
and then moving smoothly into the outdoors. You hear the rain fading up smoothly.

922
00:46:50,043 --> 00:46:57,588
And all of that was accomplished with this final implementation.

923
00:46:57,588 --> 00:46:58,749
So yeah.

924
00:46:58,749 --> 00:47:05,813
So in conclusion, implementing Triton.

925
00:47:09,491 --> 00:47:15,412
the biggest risk of implementing this system turned out not to be the tech itself, but

926
00:47:15,412 --> 00:47:21,134
the tuning and calibration of it. So we really ‑‑ we initially bit off more than we could

927
00:47:21,134 --> 00:47:27,836
chew. We pulled that back. We found all of the problems. And we were able to ship a system

928
00:47:27,836 --> 00:47:31,377
that sounded pretty good. The second big lesson was to focus on the

929
00:47:37,377 --> 00:47:41,000
on an emotionally motivated cinematic experience

930
00:47:41,000 --> 00:47:46,044
for acoustics rather than a physics-based,

931
00:47:46,044 --> 00:47:47,685
reality-driven experience.

932
00:47:47,685 --> 00:47:48,305
So, this is my favorite slide.

933
00:47:48,305 --> 00:47:49,066
Who knows what the uncanny valley is?

934
00:47:49,066 --> 00:47:49,366
Raise your hand.

935
00:47:49,366 --> 00:47:49,606
Sweet, okay.

936
00:47:49,606 --> 00:47:53,089
Our first implementation of Trident put us about here.

937
00:48:05,035 --> 00:48:10,639
We knew we had something cool. We were moving towards reality pretty cool our second implementation of Triton

938
00:48:10,639 --> 00:48:13,841
Definitely put us here people were freaked out. We got a lot of

939
00:48:13,841 --> 00:48:14,602
Interesting feedback

940
00:48:14,602 --> 00:48:16,483
Version 2.5 was cool, but it was still too real

941
00:48:27,915 --> 00:48:31,257
too real. I don't know. It's an aesthetic choice, right? We were still getting the

942
00:48:31,257 --> 00:48:38,782
interesting feedback. But at that stage, we had the simplification of the parameters to

943
00:48:38,782 --> 00:48:45,387
achieve something that was shippable. So we moved to something fairly simple, but we

944
00:48:45,387 --> 00:48:50,890
still have a lot ‑‑ all the hard work to create the Triton data is done.

945
00:48:51,877 --> 00:48:55,220
All we need to do now is start pulling more numbers from it

946
00:48:55,220 --> 00:48:57,862
and figuring out creative ways to add them

947
00:48:57,862 --> 00:48:59,283
to the acoustics in our game.

948
00:48:59,283 --> 00:49:04,687
So, we really think that we've only scratched the surface

949
00:49:04,687 --> 00:49:06,709
of what we're gonna be able to do with this system.

950
00:49:06,709 --> 00:49:08,150
So, there's a final demo.

951
00:49:08,150 --> 00:49:10,792
This is kind of like the victory lap demo.

952
00:49:10,792 --> 00:49:11,332
It shows.

953
00:49:12,549 --> 00:49:17,333
Triton working through various indoor and outdoor spaces.

954
00:49:17,333 --> 00:49:21,517
It's got some aesthetically chosen reverbs for caves.

955
00:49:21,517 --> 00:49:24,720
It's got rain, it's got wind.

956
00:49:24,720 --> 00:49:28,183
And yeah, it's maybe Triton's proudest moment.

957
00:49:28,183 --> 00:49:29,684
At least it's my favorite.

958
00:49:29,684 --> 00:49:31,065
It's my favorite moment in the game.

959
00:49:37,372 --> 00:49:45,195
You won't be able to see the burial site from here. It's on the other side of the dam. Come on.

960
00:49:45,195 --> 00:49:46,896
So, who are the four guys on top of that thing?

961
00:49:46,896 --> 00:49:52,879
Uh, no one. They represent the four sources of energy. Water, air, solar and gas.

962
00:49:52,879 --> 00:49:54,359
No emulsion?

963
00:49:54,359 --> 00:49:56,540
The dam was built pre-emulsion.

964
00:49:56,540 --> 00:50:00,062
Wow, it's that old. There's hardly anything left that's that old.

965
00:50:00,062 --> 00:50:02,743
There are still a few things.

966
00:50:19,070 --> 00:50:25,879
You know, a while back, I looked up how many locust burial sites there actually were, and I got a big ol' classifier.

967
00:50:25,879 --> 00:50:28,602
There were dozens of them. Maybe even hundreds.

968
00:50:28,602 --> 00:50:31,886
They can't all be infested, right?

969
00:50:31,886 --> 00:50:33,368
Well, we're gonna find out one way or another.

970
00:50:51,848 --> 00:50:56,070
So, conclusions, both of us.

971
00:50:56,070 --> 00:51:00,572
So the major takeaway that we hope all of you will take away

972
00:51:00,572 --> 00:51:04,674
is that baked wave acoustics systems

973
00:51:04,674 --> 00:51:06,615
are practical for video games today.

974
00:51:06,615 --> 00:51:07,916
The designing of those...

975
00:51:12,423 --> 00:51:19,520
The designing of those numbers, the sound designing of those numbers is what is critical.

976
00:51:19,520 --> 00:51:22,727
So how you interpret those numbers for your game.

977
00:51:23,651 --> 00:51:25,652
And what makes it challenging to begin with

978
00:51:25,652 --> 00:51:28,594
is the sources and listeners are all moving around.

979
00:51:28,594 --> 00:51:29,834
We wanted that from the beginning,

980
00:51:29,834 --> 00:51:31,896
and that gives you a large amount of data.

981
00:51:31,896 --> 00:51:34,437
And the key idea to compress it

982
00:51:34,437 --> 00:51:37,118
is to go to these perceptual parameters.

983
00:51:37,118 --> 00:51:38,579
And it's a pretty sweet spot,

984
00:51:38,579 --> 00:51:41,941
because you get low memory usage, it makes it practical,

985
00:51:41,941 --> 00:51:44,663
but also this perceptual data is now in a vocabulary

986
00:51:44,663 --> 00:51:46,404
where a designer can take this and design it.

987
00:51:47,224 --> 00:51:50,785
So for the future, the very next thing we're looking at

988
00:51:50,785 --> 00:51:52,365
is to add directional effects.

989
00:51:52,365 --> 00:51:54,165
I told you we have four parameters.

990
00:51:54,165 --> 00:51:54,826
We want more.

991
00:51:54,826 --> 00:51:56,586
We want the directional effects of sound

992
00:51:56,586 --> 00:51:59,226
coming out the cave of a mouth and its proper direction

993
00:51:59,226 --> 00:52:01,567
and reflected, delayed echoes.

994
00:52:01,567 --> 00:52:03,827
We're looking at streaming to reduce the memory footprint.

995
00:52:03,827 --> 00:52:06,648
We just load up everything right now so we can stream that.

996
00:52:06,648 --> 00:52:08,488
And we want to make the bakes faster

997
00:52:08,488 --> 00:52:11,949
because that's the key cost right now associated with this.

998
00:52:12,429 --> 00:52:15,111
And we feel that once we have these features,

999
00:52:15,111 --> 00:52:18,594
it would be in a place where we could package it and share

1000
00:52:18,594 --> 00:52:20,656
with other interested studios.

1001
00:52:20,656 --> 00:52:23,899
And longer term, we'd also want to do dynamic geometry,

1002
00:52:23,899 --> 00:52:24,960
of course, with this thing.

1003
00:52:24,960 --> 00:52:26,361
That's a longer term goal.

1004
00:52:26,361 --> 00:52:27,302
So this system never would have happened

1005
00:52:27,302 --> 00:52:31,485
if it wasn't for the support of a lot of people.

1006
00:52:36,011 --> 00:52:42,778
It's new tech, never shipped in a game before. A lot of people put a lot of faith that we

1007
00:52:42,778 --> 00:52:49,465
could figure it out and make it sound okay. It didn't sound okay for a fair amount of time.

1008
00:52:49,465 --> 00:52:51,508
So, big thanks to these people.

1009
00:53:02,268 --> 00:53:05,671
So I'd highly recommend you listen to these videos

1010
00:53:05,671 --> 00:53:08,533
with headphones on or a good speaker setup later on,

1011
00:53:08,533 --> 00:53:09,934
because this all adds a lot.

1012
00:53:09,934 --> 00:53:11,415
And I put the slides on my website,

1013
00:53:11,415 --> 00:53:12,456
but they'll also be on GDC Vault.

1014
00:53:12,456 --> 00:53:16,378
So if you have questions, just step up to the mic.

1015
00:53:16,378 --> 00:53:16,499
Hey.

1016
00:53:26,214 --> 00:53:29,937
So first off, thank you for that talk.

1017
00:53:29,937 --> 00:53:36,641
That was really eye opening and, you know, just gets all our creative minds just going.

1018
00:53:36,641 --> 00:53:42,204
But I missed a certain idea that you had in one of the slides.

1019
00:53:42,204 --> 00:53:44,846
And it was during the outdoorness.

1020
00:53:44,846 --> 00:53:50,050
And it was energy reaching sky and then that was divided by what was it?

1021
00:53:51,388 --> 00:53:53,549
the total energy shot from it.

1022
00:53:53,549 --> 00:53:56,490
So it's a fraction of energy that gets to escape the scene.

1023
00:53:56,490 --> 00:53:59,432
If nothing gets out, then it's zero.

1024
00:53:59,432 --> 00:54:01,693
Everything escapes, then it's one.

1025
00:54:01,693 --> 00:54:03,373
OK, no, thank you so much.

1026
00:54:03,373 --> 00:54:03,813
Great talk.

1027
00:54:03,813 --> 00:54:04,114
Two questions.

1028
00:54:04,114 --> 00:54:13,197
One is for when you tweet the values for your reverbs,

1029
00:54:13,197 --> 00:54:16,338
I was wondering roughly what percentage of the space

1030
00:54:16,338 --> 00:54:18,899
did you have to adjust to get the more

1031
00:54:18,899 --> 00:54:20,600
emotional kind of response?

1032
00:54:25,743 --> 00:54:27,792
I would say that there were fewer than a dozen.

1033
00:54:29,009 --> 00:54:34,133
Yeah. Because it really was ‑‑ tried and worked really, really well most of the time.

1034
00:54:34,133 --> 00:54:37,295
There was just certain spaces that you would walk into and the squad would say something

1035
00:54:37,295 --> 00:54:41,278
really key and something really cool was about to happen. You would be like, it's not doing

1036
00:54:41,278 --> 00:54:46,642
it for me. I want something cooler. And so you pick a certain, you know, that's when you

1037
00:54:46,642 --> 00:54:51,766
would go crazy by tweaking the values. Like I want this ‑‑ I want this way wetter. I want

1038
00:54:51,766 --> 00:54:56,070
the decay time way longer. And then when the fire fight starts, okay, we'll pull it back.

1039
00:54:56,893 --> 00:55:01,774
And another thing that happens is many spaces are in real life much more cluttered than

1040
00:55:01,774 --> 00:55:05,315
they are in a game, but our expectation comes from real life.

1041
00:55:05,315 --> 00:55:07,516
And clutter reduces the decay rate.

1042
00:55:07,516 --> 00:55:11,016
So it's like you walk into this empty room and it reverberates for a long time and you

1043
00:55:11,016 --> 00:55:11,997
feel this is a small room.

1044
00:55:11,997 --> 00:55:16,078
Because typically when you see those small rooms, they have stuff in them.

1045
00:55:16,078 --> 00:55:18,358
And so those cases also happen.

1046
00:55:19,751 --> 00:55:24,074
And the other quick question is for your reverbs,

1047
00:55:24,074 --> 00:55:27,316
you said you didn't do any kind of directional kind of panning

1048
00:55:27,316 --> 00:55:27,797
on that?

1049
00:55:27,797 --> 00:55:27,897
No.

1050
00:55:27,897 --> 00:55:28,557
OK.

1051
00:55:28,557 --> 00:55:32,600
Did you find that it impacted the effect

1052
00:55:32,600 --> 00:55:34,901
of not having panning on it?

1053
00:55:34,901 --> 00:55:37,543
It is the first thing I asked for after we shipped.

1054
00:55:37,543 --> 00:55:40,765
Because these simulations you're seeing have all that.

1055
00:55:40,765 --> 00:55:43,247
The question is, can we get the data we want

1056
00:55:43,247 --> 00:55:44,628
without blowing our RAM budget?

1057
00:55:44,628 --> 00:55:45,929
That's really the only question.

1058
00:55:46,570 --> 00:55:48,011
And how do we render it, of course?

1059
00:55:48,011 --> 00:55:50,352
How does it go into the middleware or our DSP or what?

1060
00:55:50,352 --> 00:55:54,315
So those are the two questions you need to go solve

1061
00:55:54,315 --> 00:55:55,336
for each parameter.

1062
00:55:55,336 --> 00:55:58,518
Once we figure out, okay, this is something we want,

1063
00:55:58,518 --> 00:55:58,858
that's the process.

1064
00:55:58,858 --> 00:55:59,298
Right, cool, thank you.

1065
00:55:59,298 --> 00:56:01,880
Hello, I had a question about how you generated

1066
00:56:01,880 --> 00:56:02,861
your impulse responses.

1067
00:56:02,861 --> 00:56:04,502
Do you use like a normal raycast method

1068
00:56:04,502 --> 00:56:07,304
or did you do finite difference or anything else?

1069
00:56:07,304 --> 00:56:08,765
This is finite difference.

1070
00:56:08,765 --> 00:56:10,146
So it's a finite difference.

1071
00:56:10,146 --> 00:56:12,928
This is actually a solver I worked on in grad school,

1072
00:56:12,928 --> 00:56:14,369
so it's faster than finite difference.

1073
00:56:14,369 --> 00:56:15,550
It's faster than finite difference.

1074
00:56:15,730 --> 00:56:19,673
Are you talking about the impulse responses that were used for the reverbs in the final game?

1075
00:56:19,673 --> 00:56:21,194
Or the impulse responses?

1076
00:56:21,194 --> 00:56:23,116
No, no, no. You're asking about how we got them.

1077
00:56:23,116 --> 00:56:27,960
So these simulations I've been showing you are like fluid simulations, you could think of.

1078
00:56:27,960 --> 00:56:31,743
So they're solving for pressure values over space on a grid over time.

1079
00:56:31,743 --> 00:56:34,986
Yeah, and you do that at high orders.

1080
00:56:34,986 --> 00:56:35,527
What's that?

1081
00:56:35,527 --> 00:56:37,628
High orders of reflection or...

1082
00:56:38,123 --> 00:56:40,305
Yeah, this is infinite order, pretty much.

1083
00:56:40,305 --> 00:56:42,166
Like if you have a small space, they can bounce around

1084
00:56:42,166 --> 00:56:43,087
any number of times they want.

1085
00:56:43,087 --> 00:56:45,610
So this is different from ray tracing for sound.

1086
00:56:45,610 --> 00:56:48,872
This is an advantage of, that's why we went with this.

1087
00:56:48,872 --> 00:56:51,255
Because it gives us diffraction and all that for free.

1088
00:56:51,255 --> 00:56:52,255
And it's a big cost to start with this,

1089
00:56:52,255 --> 00:56:56,419
but if you bite the bullet, then it gives you all the cool effects.

1090
00:56:56,419 --> 00:56:58,561
And you didn't do anything with the room node data

1091
00:56:58,561 --> 00:56:59,762
that you got back from that.

1092
00:56:59,762 --> 00:57:00,903
Say that again, please.

1093
00:57:00,903 --> 00:57:03,806
The nodal data that you got back.

1094
00:57:03,806 --> 00:57:04,666
Which data?

1095
00:57:04,914 --> 00:57:06,375
The room nodes are like, you know,

1096
00:57:06,375 --> 00:57:08,377
like if you get a base trap in the corner of a room,

1097
00:57:08,377 --> 00:57:10,438
that kind of information that you get back.

1098
00:57:10,438 --> 00:57:13,280
Yeah, we didn't, yes, so frequency dependent data,

1099
00:57:13,280 --> 00:57:15,222
we didn't get that out, so that's another thing.

1100
00:57:15,222 --> 00:57:17,964
Yeah, that you get from a problem.

1101
00:57:17,964 --> 00:57:19,705
Even if you get, do low, mid, and high,

1102
00:57:19,705 --> 00:57:20,846
that triples the numbers.

1103
00:57:20,846 --> 00:57:21,626
Yeah, sure.

1104
00:57:21,626 --> 00:57:24,668
So, yeah, so it's like how to extract that.

1105
00:57:24,668 --> 00:57:25,429
Yeah, cool.

1106
00:57:25,429 --> 00:57:26,530
All cool problems.

1107
00:57:26,530 --> 00:57:26,890
Yeah.

1108
00:57:27,390 --> 00:57:30,812
Another quick one, so did you ever think of,

1109
00:57:30,812 --> 00:57:32,673
I know you couldn't use the full impulse responses

1110
00:57:32,673 --> 00:57:34,974
that you got back because it's too much RAM

1111
00:57:34,974 --> 00:57:36,835
and too much processing to do,

1112
00:57:36,835 --> 00:57:38,976
but did you think about just using the first part,

1113
00:57:38,976 --> 00:57:42,017
like the early reflection part of the impulse responses

1114
00:57:42,017 --> 00:57:43,038
because it's much less data?

1115
00:57:43,038 --> 00:57:44,898
You're describing the 2011 system.

1116
00:57:44,898 --> 00:57:45,639
Oh, okay.

1117
00:57:45,639 --> 00:57:49,541
It took the early reflections and looked for peaks in that

1118
00:57:49,541 --> 00:57:51,682
to get the sharp reflections

1119
00:57:51,682 --> 00:57:53,963
and it kept their amplitudes and delays.

1120
00:57:53,963 --> 00:57:54,403
And that's 100 GB.

1121
00:57:54,403 --> 00:57:56,704
Right, oh, okay, so it's too much, okay.

1122
00:57:57,550 --> 00:57:59,532
That's why we did this.

1123
00:57:59,532 --> 00:58:01,054
So thanks for asking a good question.

1124
00:58:01,054 --> 00:58:02,275
I guess just a wise question,

1125
00:58:02,275 --> 00:58:04,398
if you guys could theoretically run

1126
00:58:04,398 --> 00:58:07,000
four concurrent convolution reverbs,

1127
00:58:07,000 --> 00:58:11,425
what were your memory pools

1128
00:58:11,425 --> 00:58:13,687
for your lower engine and default?

1129
00:58:16,219 --> 00:58:21,383
Okay, so we were, we ran up to 12 and then we shipped with 6.

1130
00:58:21,383 --> 00:58:27,367
And so the question is how much memory we were using

1131
00:58:27,367 --> 00:58:32,831
for those, well the convolutions were always fixed length

1132
00:58:32,831 --> 00:58:36,193
to .5 seconds, .75, no, sorry, .5, one second

1133
00:58:36,193 --> 00:58:38,155
and three seconds, so it was always the same.

1134
00:58:38,155 --> 00:58:41,117
You could, you know, I think we were doing 48K.

1135
00:58:43,568 --> 00:58:44,950
resolution convolutions, so I don't know the math,

1136
00:58:44,950 --> 00:58:45,550
but you can figure it out.

1137
00:58:45,550 --> 00:58:46,251
Cool, thanks.

1138
00:58:46,251 --> 00:58:46,591
No problem.

1139
00:58:46,591 --> 00:58:47,252
Well, I guess if that's it,

1140
00:58:47,252 --> 00:58:48,113
we are duty-bound to put that slide up.

1141
00:58:48,113 --> 00:58:48,473
Oh, one more question.

1142
00:58:48,473 --> 00:58:49,594
I'm just wondering what your RAM budget was on the game.

1143
00:58:49,594 --> 00:58:49,874
Say again?

1144
00:58:49,874 --> 00:58:50,515
The RAM budget was for the runtime.

1145
00:59:07,753 --> 00:59:10,894
We were initially given a RAM budget of 500 megabytes,

1146
00:59:10,894 --> 00:59:16,136
and we shipped with 400 because we came in under budget.

1147
00:59:16,136 --> 00:59:20,537
So Triton initially had a budget of 150 megs.

1148
00:59:20,537 --> 00:59:25,619
And so we shipped most maps were 100 to 110 megs.

1149
00:59:25,619 --> 00:59:28,640
We can improve that with existing tech.

1150
00:59:28,640 --> 00:59:30,480
The problem was time to get it lower.

1151
00:59:30,480 --> 00:59:30,780
Thank you.

1152
00:59:30,780 --> 00:59:31,361
You're welcome.

1153
00:59:31,361 --> 00:59:31,901
Thanks so much, guys.

