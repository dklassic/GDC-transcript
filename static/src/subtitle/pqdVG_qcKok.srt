1
00:00:12,212 --> 00:00:16,395
Hello all, and thank you for coming to my talk on how to use shaders to create stylized

2
00:00:16,415 --> 00:00:17,116
visual effects.

3
00:00:17,976 --> 00:00:20,498
Let me start off by saying that this will be a two-part talk.

4
00:00:21,219 --> 00:00:24,802
The first part will focus on a generalized overview

5
00:00:25,022 --> 00:00:26,023
of shader concepts.

6
00:00:26,683 --> 00:00:29,726
Part two will then walk you through a step-by-step way

7
00:00:30,046 --> 00:00:33,068
of how to implement said shader concepts in the game

8
00:00:33,108 --> 00:00:33,949
engine of your choice.

9
00:00:34,690 --> 00:00:37,272
For the purposes of this talk, we'll be using Unreal Engine 4.

10
00:00:37,692 --> 00:00:40,494
However, feel free to follow along in a game engine or shade

11
00:00:40,534 --> 00:00:41,655
editor of your choice.

12
00:00:43,845 --> 00:00:45,047
A little bit about myself.

13
00:00:45,568 --> 00:00:48,532
My name is Bir Sharma, and I'm a visual effects artist

14
00:00:48,592 --> 00:00:51,656
at a studio called Probably Monsters in Bellevue, Washington.

15
00:00:52,297 --> 00:00:54,680
I've had the honor of working on some amazing titles

16
00:00:55,241 --> 00:00:59,286
on platforms from PC, current gen, next gen consoles,

17
00:00:59,406 --> 00:01:01,269
mobile phones, and even VR.

18
00:01:03,637 --> 00:01:06,377
To give you a brief overview of what this talk is all about,

19
00:01:07,037 --> 00:01:09,198
we will start by talking about some of the common

20
00:01:09,238 --> 00:01:12,459
misconceptions and perceptions around stylized VFX.

21
00:01:12,979 --> 00:01:15,559
And you'll just see in a bit why this is important.

22
00:01:16,740 --> 00:01:19,340
We'll then move on to a VFX Shader 101

23
00:01:19,740 --> 00:01:20,661
type of introduction,

24
00:01:21,321 --> 00:01:23,341
and you'll learn how these different systems work,

25
00:01:23,841 --> 00:01:26,202
or more importantly, how they come together

26
00:01:26,222 --> 00:01:28,483
to create some of the VFX that you see

27
00:01:28,523 --> 00:01:29,283
in your favorite games.

28
00:01:30,505 --> 00:01:33,087
And then next, we move on to some neat shader tips

29
00:01:33,147 --> 00:01:35,630
and tricks that will help level up your VFX.

30
00:01:36,631 --> 00:01:39,994
And then finally, we will do a Unreal Engine step-by-step

31
00:01:40,054 --> 00:01:41,916
walkthrough to implement the shader concepts

32
00:01:41,936 --> 00:01:42,677
that you just learned.

33
00:01:44,378 --> 00:01:45,940
The topics on the right are not really

34
00:01:45,960 --> 00:01:47,121
in the scope of this talk.

35
00:01:47,542 --> 00:01:49,644
However, I'm more than happy to chat with you about them

36
00:01:49,764 --> 00:01:51,245
if you grab me after this presentation.

37
00:01:53,947 --> 00:01:56,190
So one of the bigger misconceptions

38
00:01:56,330 --> 00:01:58,253
about being a stylized visual effects artist

39
00:01:58,713 --> 00:02:01,237
is that you're either this hand-drawn,

40
00:02:01,357 --> 00:02:04,961
frame-by-frame, hand-painted visual effects artist,

41
00:02:04,981 --> 00:02:09,507
or you're this tech-savvy shader and simulation guru,

42
00:02:10,148 --> 00:02:10,929
but in reality...

43
00:02:11,396 --> 00:02:17,678
If you have a strong grasp of these simple shader fundamentals, these simple shader concepts,

44
00:02:18,358 --> 00:02:24,060
you will be able to approach 90% of all visual effects problems of the stylized kind that

45
00:02:24,100 --> 00:02:24,700
come your way.

46
00:02:26,460 --> 00:02:32,042
Another misconception that affects not just VFX, but the game industry as a whole, is

47
00:02:33,022 --> 00:02:35,263
what exactly is stylized?

48
00:02:37,124 --> 00:02:41,085
Is Cuphead stylized or is Battlefield stylized?

49
00:02:42,340 --> 00:02:46,483
is Fortnite or Uncharted or Borderlands stylized?

50
00:02:48,325 --> 00:02:50,727
Well, you see, most people think of stylization

51
00:02:51,367 --> 00:02:54,229
as a spectrum, where on one end you've got cartoony

52
00:02:54,309 --> 00:02:55,951
and on the other end you've got realistic.

53
00:02:56,771 --> 00:03:01,155
And I think that stylization can only fully be understood.

54
00:03:02,128 --> 00:03:06,449
If you take a step back and take a look at the art holistically,

55
00:03:06,889 --> 00:03:12,370
from a point of view of the principles and elements of art, design, and animation, right?

56
00:03:12,971 --> 00:03:19,472
And so there you realize that stylization is more of this design space as opposed to a linear spectrum.

57
00:03:20,512 --> 00:03:23,593
Sure, making things cartoony is one way of stylizing your art,

58
00:03:24,213 --> 00:03:27,813
but you could very well choose to stylize just your motion,

59
00:03:28,313 --> 00:03:31,274
or I could very well choose to stylize just my form.

60
00:03:32,088 --> 00:03:40,332
So a better definition of stylization could be that stylization is the abstraction of realism.

61
00:03:40,832 --> 00:03:46,174
You know with realism you're forced to make your things look as realistic as possible while

62
00:03:46,234 --> 00:03:49,416
enhancing the visual language a little bit. However with stylization...

63
00:03:49,974 --> 00:03:53,618
you're free to play with the shapes, colors, forms, motion.

64
00:03:54,019 --> 00:03:55,761
You can exaggerate some elements

65
00:03:55,821 --> 00:03:57,764
or you can completely remove some elements

66
00:03:58,124 --> 00:04:01,108
to make sure it's in the line with your art direction.

67
00:04:01,709 --> 00:04:02,810
Doing so with realism,

68
00:04:02,831 --> 00:04:05,895
it just break that illusion of reality

69
00:04:05,935 --> 00:04:08,318
and won't belong in the world of our video game.

70
00:04:09,230 --> 00:04:13,313
And as you progress through this presentation and the different examples you will see,

71
00:04:13,673 --> 00:04:17,336
you will realize that they might be in opposite ends of the design space.

72
00:04:17,376 --> 00:04:24,242
However, the same simple shader concepts apply to both those VFX or all those VFX even,

73
00:04:24,602 --> 00:04:27,244
regardless of where on the stylized design space they fall.

74
00:04:27,264 --> 00:04:28,365
Okay?

75
00:04:29,466 --> 00:04:33,429
So, here's an example of a personal piece that I made a couple years ago.

76
00:04:34,551 --> 00:04:40,678
And as you can see, you might be like, hey, you know, Beard, you've stylized the cartoony values

77
00:04:41,159 --> 00:04:48,288
and you've got a color that is mostly cel-shaded and anime-like, but however,

78
00:04:48,388 --> 00:04:51,632
the motion of the liquid and the fluid is kind of realistic.

79
00:04:52,147 --> 00:04:57,069
the buoyancy of that cube is kind of realistic. And you know, you would be right. But the reality

80
00:04:57,209 --> 00:05:03,452
is, even though the colors and values are stylized, there is absolutely nothing about

81
00:05:03,492 --> 00:05:10,254
this piece that has hand-painted elements in it. Even though the liquid motion or the buoyancy of

82
00:05:10,294 --> 00:05:16,016
the cube might be more on the realistic end of this design space, there is absolutely no liquid

83
00:05:16,056 --> 00:05:21,318
or fluid simulations involved. Every single thing that in this piece

84
00:05:22,113 --> 00:05:27,941
exists, you will be able to do just through all the simple shader concepts, excuse me,

85
00:05:28,362 --> 00:05:34,310
that you will learn throughout this talk. So let's begin with our first shader concept, okay?

86
00:05:34,851 --> 00:05:37,715
It is the scrolling texture along UVs shader.

87
00:05:38,472 --> 00:05:41,554
Now, this shader is called a few different things.

88
00:05:41,574 --> 00:05:46,076
You can hear it called curve sweeps or swipe meshes

89
00:05:46,316 --> 00:05:51,258
or even the community of VFX favorite solar coasters,

90
00:05:51,718 --> 00:05:53,039
but they all do the same thing,

91
00:05:53,099 --> 00:05:56,040
which is they scroll a texture

92
00:05:56,420 --> 00:05:58,641
along the UVs of a particular mesh.

93
00:05:59,670 --> 00:06:04,514
Now, just for instance, imagine I had a polystrip, okay?

94
00:06:05,154 --> 00:06:08,357
And I had its UVs flat in a zero to one space.

95
00:06:09,718 --> 00:06:13,680
If I scrolled a texture along that zero to one UV space,

96
00:06:14,261 --> 00:06:17,263
that would correspond to scrolling the texture

97
00:06:17,863 --> 00:06:20,886
on my polystrip, okay?

98
00:06:21,386 --> 00:06:22,827
Now here you can see this in motion.

99
00:06:22,927 --> 00:06:25,769
As I scroll my texture in my UV space,

100
00:06:26,109 --> 00:06:28,911
the same texture gets scrolled along my polystrip as well.

101
00:06:29,658 --> 00:06:31,280
Okay, so let's go over real quick

102
00:06:31,300 --> 00:06:32,461
how to set this up in Unreal.

103
00:06:33,161 --> 00:06:36,864
So here I've got a alpha texture and a emissive texture.

104
00:06:37,585 --> 00:06:39,547
We will take a texture coordinate node

105
00:06:40,387 --> 00:06:42,509
and we will do a component mask

106
00:06:42,969 --> 00:06:46,752
where we will split this into a R channel and a G channel.

107
00:06:47,193 --> 00:06:51,336
Now these directly correspond to the U and the V channel.

108
00:06:51,636 --> 00:06:54,539
Okay, now, since this texture is horizontal

109
00:06:54,579 --> 00:06:56,280
and we wanna scroll it horizontally,

110
00:06:57,087 --> 00:06:58,707
we would scroll it along the U.

111
00:06:59,388 --> 00:07:01,068
So we will do an add operation.

112
00:07:01,088 --> 00:07:04,009
Now, add or subtract moves, okay?

113
00:07:04,169 --> 00:07:05,490
This is important, remember this.

114
00:07:06,150 --> 00:07:08,511
So we will do an add operation in the R channel,

115
00:07:08,531 --> 00:07:09,212
which is the U,

116
00:07:09,972 --> 00:07:12,973
and we will add a parameter called offset to this.

117
00:07:14,314 --> 00:07:19,296
We will then do a append operation on both our R and G,

118
00:07:20,116 --> 00:07:23,157
and then it's just as simple as plugging that

119
00:07:23,517 --> 00:07:26,258
into the UVs of our alpha and our meso.

120
00:07:27,310 --> 00:07:31,633
There you go, you have your very first simple scrolling texture shader.

121
00:07:34,394 --> 00:07:37,877
And now that we have our shader ready, we can play around with the offset parameter

122
00:07:38,417 --> 00:07:39,918
and achieve our desired result.

123
00:07:42,060 --> 00:07:45,502
Now, this brings me to our next important point, which is...

124
00:07:46,459 --> 00:07:55,205
repeat textures versus clamped textures. A repeat texture, also known as a wrap texture mode in

125
00:07:55,245 --> 00:08:01,389
Unreal, does exactly what it sounds like. It repeats indefinitely loops your texture over

126
00:08:01,429 --> 00:08:04,411
and over again. This is useful for VFX that

127
00:08:05,652 --> 00:08:11,597
repeat themselves over and over again. As you can see in these examples you've got two games which

128
00:08:11,698 --> 00:08:19,265
are stylistically extremely different. However, they both follow the same simple shader concept

129
00:08:19,285 --> 00:08:24,910
which is on the left you've got Gears 5 whose waterfall is more on the realistic end of this

130
00:08:24,990 --> 00:08:30,596
design space. You see the colors, the values, the motion. However, the reason this is so

131
00:08:31,156 --> 00:08:34,540
so that the waterfall element exists in the world of Gears 5

132
00:08:34,840 --> 00:08:36,582
without breaking that immersion for the player,

133
00:08:36,863 --> 00:08:40,707
especially at the very beginning of the game where this moment occurs.

134
00:08:41,408 --> 00:08:43,049
And then you've got Spyro on the right,

135
00:08:43,109 --> 00:08:45,412
a radically different game in terms of stylization.

136
00:08:45,853 --> 00:08:50,778
However, the lava faults are using the same repeating loop of a scrolling texture.

137
00:08:51,839 --> 00:08:52,120
All right.

138
00:08:53,041 --> 00:09:00,788
Now a clamp in contrast, what clamp does, is it indefinitely tiles very last pixel of your texture.

139
00:09:01,269 --> 00:09:06,114
Okay, so in this instance if you see the alpha texture over here, it's got black pixels to either

140
00:09:06,154 --> 00:09:10,978
side. As we know black pixels represent transparency, so you can see once that your

141
00:09:11,038 --> 00:09:17,104
texture has scrolled past, it just repeats that very last transparent black pixels for the remainder of its life.

142
00:09:19,333 --> 00:09:23,174
And these clamped textures can be useful for effects

143
00:09:23,754 --> 00:09:25,815
that go from point A to point B.

144
00:09:26,375 --> 00:09:28,996
So effects that happen one-off, all right?

145
00:09:29,436 --> 00:09:31,257
So you can see in these examples,

146
00:09:31,617 --> 00:09:33,338
stylistically quite different.

147
00:09:33,738 --> 00:09:35,978
However, they all use VFX.

148
00:09:36,058 --> 00:09:37,679
They go from one point to the other,

149
00:09:38,579 --> 00:09:40,540
and these use clamp textures, okay?

150
00:09:41,280 --> 00:09:42,421
And as you can see,

151
00:09:42,441 --> 00:09:45,161
they can be used for VFX like sword slashes.

152
00:09:46,101 --> 00:09:50,284
or a VFX like a projectile and trail or even bullet tracers.

153
00:09:50,864 --> 00:09:51,184
Okay.

154
00:09:53,566 --> 00:09:58,749
So in my example, I've used a repeat or wrap mode texture

155
00:09:59,170 --> 00:10:01,871
that scrolls along the UVs of the strip mesh.

156
00:10:02,292 --> 00:10:02,552
Okay.

157
00:10:03,387 --> 00:10:07,250
This scrolling was done using a banner node, okay?

158
00:10:07,591 --> 00:10:10,073
Which scrolls your input in any given direction.

159
00:10:10,514 --> 00:10:12,736
And since I wanted to scroll it downwards,

160
00:10:13,176 --> 00:10:16,199
I plugged in a value of negative one on the Y-axis.

161
00:10:16,780 --> 00:10:19,222
So that'll make sure that my texture

162
00:10:19,643 --> 00:10:21,745
scrolls downward on my mesh.

163
00:10:24,328 --> 00:10:26,229
Now, this is very interesting,

164
00:10:26,269 --> 00:10:28,491
because this principle of scrolling textures

165
00:10:28,551 --> 00:10:30,872
along your UVs doesn't have to be

166
00:10:31,252 --> 00:10:33,033
on strips of polygons as well.

167
00:10:33,953 --> 00:10:37,175
In this example, you can see how the ripples

168
00:10:37,495 --> 00:10:39,656
moving outwards on the surface of the liquid

169
00:10:40,097 --> 00:10:42,558
were created using the exact same technique.

170
00:10:44,799 --> 00:10:46,720
So, if you look at our previous example,

171
00:10:46,740 --> 00:10:48,801
we had a strip where the UVs were laid flat,

172
00:10:49,161 --> 00:10:51,863
scrolling that along it, scrolled it along the mesh.

173
00:10:52,665 --> 00:11:00,290
Now, if we have a circular mesh, and if we lay its UVs out flat, let's say we have a ring, okay,

174
00:11:00,850 --> 00:11:06,814
now what you could do is have the bottom part of your UVs be the inner ring, and you can have the

175
00:11:06,854 --> 00:11:11,998
top part of your UVs be the outer ring. And now as you scroll your texture from the bottom to the

176
00:11:12,058 --> 00:11:17,541
top of the UVs, you'll have your same texture scrolling from the inner ring to the outward ring

177
00:11:17,962 --> 00:11:18,522
of your UVs.

178
00:11:19,472 --> 00:11:23,314
right? And there's so many use cases of this technique guys. You could use it for like

179
00:11:23,695 --> 00:11:29,939
shock waves in the ground or you know maybe even like block VFX where you have you know if somebody

180
00:11:29,979 --> 00:11:35,383
hits you and block you have the circular almost dome like VFX that plays. They all use this

181
00:11:35,423 --> 00:11:43,368
similar technique. Now moving on to shader number two we have alpha erosion.

182
00:11:44,336 --> 00:11:46,318
Now this one has a couple of different names as well.

183
00:11:46,538 --> 00:11:48,660
You have heard it being called Alpha Threshold,

184
00:11:49,100 --> 00:11:53,524
Alpha Crushing, Alpha Clipping, Black Point Fading.

185
00:11:53,544 --> 00:11:54,706
There's a couple of different names,

186
00:11:55,006 --> 00:11:56,467
but they all do the same thing.

187
00:11:57,908 --> 00:11:59,870
Now, basically what an alpha does

188
00:12:00,551 --> 00:12:03,634
is it controls what parts of your texture

189
00:12:04,294 --> 00:12:05,916
are visible and which parts are not.

190
00:12:06,556 --> 00:12:08,638
So a value of one or white.

191
00:12:09,517 --> 00:12:15,081
usually means fully opaque, and a value of 0, or black, means fully transparent.

192
00:12:15,962 --> 00:12:19,584
So, moving your value from 0 to 1 and back

193
00:12:20,645 --> 00:12:25,449
gives you a fade in and fade out, as you can see in the example below.

194
00:12:26,429 --> 00:12:28,111
Now this is okay for some use cases.

195
00:12:28,451 --> 00:12:32,874
However, sometimes we want a bit more fidelity in the way our texture fades in and out.

196
00:12:33,824 --> 00:12:36,145
And that's where alpha erosion comes in handy.

197
00:12:36,565 --> 00:12:38,667
And now you can see using alpha erosion,

198
00:12:39,087 --> 00:12:41,848
it gives this texture a more sense

199
00:12:41,908 --> 00:12:43,289
of being kind of eaten away,

200
00:12:43,349 --> 00:12:44,790
more of a dissolving feeling,

201
00:12:45,230 --> 00:12:48,872
as opposed to a uniform fade in and fade out, okay?

202
00:12:49,812 --> 00:12:51,773
The way alpha erosion works is,

203
00:12:52,253 --> 00:12:54,515
if you supply it a gradient,

204
00:12:55,495 --> 00:13:00,918
Okay? Alpha erosion starts eating up from one end of the gradient all the way to the other.

205
00:13:00,938 --> 00:13:05,740
So in this case, it will start eating up all the black values first, then the gray values,

206
00:13:05,800 --> 00:13:11,123
and finally make its way all the way up to the white values. This way, you get some sense of

207
00:13:11,183 --> 00:13:17,727
like non-uniform fading in and out, as opposed to the whole texture just going in and out. Okay?

208
00:13:19,063 --> 00:13:21,007
Here you can see the comparison side by side

209
00:13:21,027 --> 00:13:23,433
of a traditional alpha fade in and out

210
00:13:23,733 --> 00:13:25,618
as opposed to alpha abrasion fade in and out.

211
00:13:25,958 --> 00:13:26,199
Okay?

212
00:13:29,318 --> 00:13:32,399
So setting this up, we will set up a very simple version

213
00:13:32,680 --> 00:13:33,700
of our alpha erosion.

214
00:13:34,420 --> 00:13:37,801
We already have our noise map baked into our texture.

215
00:13:38,261 --> 00:13:41,062
So we have our alpha mask with varying degrees

216
00:13:41,122 --> 00:13:42,563
of grays, blacks, and whites.

217
00:13:43,343 --> 00:13:46,384
Now we're gonna make a parameter, call it erosion,

218
00:13:47,024 --> 00:13:50,445
and then we're gonna subtract this from our texture.

219
00:13:51,266 --> 00:13:53,346
Then we're going to saturate

220
00:13:54,155 --> 00:14:00,260
this result. What saturation does is it clamps your result between 0 to 1. This is important

221
00:14:00,280 --> 00:14:03,523
because you don't want it going to super whites and neither do you want it going to negative

222
00:14:03,543 --> 00:14:08,426
values, okay? You plug this into your opacity and there you go, you have your very simple

223
00:14:08,807 --> 00:14:15,872
alpha erosion shader guys. And once it's ready, play around with your erosion parameter and

224
00:14:16,753 --> 00:14:17,353
see the result.

225
00:14:20,212 --> 00:14:22,033
Here are some of the uses of alpha erosion.

226
00:14:22,673 --> 00:14:24,494
We can see on the left-hand corner,

227
00:14:25,254 --> 00:14:26,895
Legend of Zelda, Breath of the Wild,

228
00:14:27,715 --> 00:14:30,656
the explosion and the smoke doesn't just fade out, right?

229
00:14:31,176 --> 00:14:34,218
It has the smoke kind of being eroded away.

230
00:14:35,097 --> 00:14:41,139
on the right side we've got Assassin's Creed, a game more on the realistic end of this design

231
00:14:41,179 --> 00:14:46,121
space, quite different from the style of Breath of the Wild. However, they used the exact same

232
00:14:46,181 --> 00:14:52,603
principle on their blood effects. So their blood effects erode out instead of dissolving, instead

233
00:14:52,623 --> 00:14:59,105
of fading away, sorry, they erode out giving this more sense of chunkier, goopier, globbier feeling

234
00:14:59,625 --> 00:15:04,507
to it. All right, moving on we have

235
00:15:05,222 --> 00:15:09,543
third and my personal favorite UV distortion shader. Now this shader does

236
00:15:09,603 --> 00:15:16,144
exactly what you think it does, it distorts your UVs. So as you can see here

237
00:15:16,184 --> 00:15:23,426
we have a static texture, if we pass some UV distortion onto it, it instantly comes

238
00:15:23,466 --> 00:15:28,767
to life. It's not more wiggly, it has this sense of motion than just the static

239
00:15:28,807 --> 00:15:30,627
texture on a card that it previously was.

240
00:15:32,760 --> 00:15:39,142
The core principle behind UV distortion is if you take a scrolling texture and

241
00:15:39,182 --> 00:15:45,764
you add it to the UVs of another texture, it can manipulate its UVs. And so here we

242
00:15:45,824 --> 00:15:50,385
achieved the wiggly motion by scrolling this noise texture into our alpha

243
00:15:50,405 --> 00:15:56,747
texture. So a simple way to set this up would be we're gonna take a normal map.

244
00:15:57,087 --> 00:15:59,707
Now we'll come to this in a moment why this is important, but we're gonna take a

245
00:15:59,807 --> 00:16:00,848
normal map texture.

246
00:16:02,267 --> 00:16:04,990
And then if you remember from our very first shader,

247
00:16:05,451 --> 00:16:10,597
we used a panner node to move our texture, right?

248
00:16:11,058 --> 00:16:12,780
So we will do something exactly similar.

249
00:16:12,800 --> 00:16:14,622
We're gonna make a panner node

250
00:16:15,162 --> 00:16:20,449
and we're gonna move it downwards in the Y axis, okay?

251
00:16:20,569 --> 00:16:20,689
By 0.5.

252
00:16:22,102 --> 00:16:25,063
Now, for the purposes of this demonstration,

253
00:16:25,184 --> 00:16:29,106
I go ahead and scale the UVs to be 0.5 and 0.5.

254
00:16:29,746 --> 00:16:32,188
And the reason for this is because I want to see

255
00:16:32,408 --> 00:16:35,710
more blobby-er distortion on my alpha texture,

256
00:16:36,230 --> 00:16:38,932
as opposed to more high-frequency noise, okay?

257
00:16:39,712 --> 00:16:42,174
We're then going to multiply the red channel

258
00:16:42,894 --> 00:16:45,376
with a parameter, let's call it distortion.

259
00:16:46,637 --> 00:16:48,478
And then finally, as we mentioned earlier,

260
00:16:48,518 --> 00:16:51,800
we're going to add this to the texture coordinate.

261
00:16:52,690 --> 00:16:56,433
And then when we plug this value into our texture,

262
00:16:56,953 --> 00:17:01,257
we finally have our very first UV distortion shader.

263
00:17:01,277 --> 00:17:02,458
Okay.

264
00:17:03,479 --> 00:17:07,303
Now, when we play around with our distortion value,

265
00:17:07,783 --> 00:17:10,525
we've got a wiggly little line coming to life.

266
00:17:13,308 --> 00:17:15,830
Now, as you saw in that previous walkthrough,

267
00:17:16,582 --> 00:17:22,627
we use a normal map. Now the reason for this is a normal map by default operates

268
00:17:22,687 --> 00:17:30,754
in a minus 1 to 1 texture range. Okay now a regular noise texture is usually in a

269
00:17:31,015 --> 00:17:38,321
0 to 1 space. So the way we fix this is using an operation known as remapping.

270
00:17:39,062 --> 00:17:39,302
Okay

271
00:17:40,030 --> 00:17:45,954
the way ReMAMIC works is we take a simple 0 to 1 space and using some math

272
00:17:46,014 --> 00:17:51,498
operations we convert it into a negative 1 to 1 space. Alright, now it's

273
00:17:51,538 --> 00:17:59,463
important to remember this little bit of math. Multiplying scales your texture

274
00:17:59,504 --> 00:18:08,730
range. Adding or subtracting moves your texture range. Okay, so let's visualize

275
00:18:08,770 --> 00:18:09,350
this really quick.

276
00:18:10,301 --> 00:18:16,462
we've got our 0 to 1 space and if we multiply this by 2

277
00:18:18,162 --> 00:18:28,964
scale 0 times 2 is 0 1 times 2 is 2 so our 0 to 1 space scales to 0 to 2

278
00:18:29,024 --> 00:18:39,666
space okay now we can subtract by 1 okay subtracting moves so 0 minus 1 is minus 1

279
00:18:40,778 --> 00:18:49,245
2 minus 1 is 1 and there you go it has moved now to a negative 1 to 1 range and our UVs have now

280
00:18:49,285 --> 00:18:56,631
been pre-mapped. Okay so another way to do this we take our 0 to 1 space and we can subtract this

281
00:18:56,871 --> 00:19:04,598
by negative 0.5. Subtracting moves our texture so 0 minus 0.5 is minus 0.5. 1 minus 0.5 is 0.5.

282
00:19:10,154 --> 00:19:12,315
So this moves it right there.

283
00:19:13,496 --> 00:19:17,379
Now we can multiply this by two to scale our texture.

284
00:19:17,760 --> 00:19:20,662
So negative 0.5 into two is negative one

285
00:19:21,162 --> 00:19:23,324
and 0.5 into two is positive one.

286
00:19:23,865 --> 00:19:27,488
And then boom, you have your texture is zero to one,

287
00:19:28,328 --> 00:19:32,011
from zero to one, excuse me, to minus one to one range.

288
00:19:34,974 --> 00:19:37,776
So here we will do a remapping.

289
00:19:38,362 --> 00:19:40,764
However, we'll use a built-in node in Unreal Engine

290
00:19:41,144 --> 00:19:42,405
called constant bias scale.

291
00:19:43,126 --> 00:19:44,407
If you take a look at this texture,

292
00:19:44,447 --> 00:19:47,269
you can see it's off the center, right?

293
00:19:47,890 --> 00:19:51,193
So we're gonna create our constant bias scale

294
00:19:52,534 --> 00:19:55,056
and we're gonna subtract by 0.5

295
00:19:55,196 --> 00:19:57,838
and we're gonna multiply it by two.

296
00:19:58,959 --> 00:20:00,420
And so what this will essentially do

297
00:20:00,620 --> 00:20:05,344
is move our UVs in the negative one to one range.

298
00:20:05,864 --> 00:20:07,666
Now, if you take a look at that texture down below.

299
00:20:08,919 --> 00:20:18,428
it is now in the center. So UV distortion has many many uses.

300
00:20:19,029 --> 00:20:23,974
Alright, we take a look at Legend of Zelda once again. You can see these fires.

301
00:20:24,695 --> 00:20:27,758
They were all done using the UV distortion shader.

302
00:20:28,484 --> 00:20:29,685
That is the cool thing about this.

303
00:20:29,785 --> 00:20:31,765
You do not need to hand draw these fires.

304
00:20:32,366 --> 00:20:34,946
You do not need to simulate them in a software like Houdini

305
00:20:35,006 --> 00:20:36,027
or use FumeFX.

306
00:20:36,467 --> 00:20:37,988
These are totally achievable

307
00:20:38,328 --> 00:20:41,129
by using some UV distortion noise on a texture.

308
00:20:42,209 --> 00:20:44,730
Simon Trumpler has an amazing talk

309
00:20:45,030 --> 00:20:47,851
on how he created the fire in Rhyme.

310
00:20:47,871 --> 00:20:50,212
And I would highly suggest taking a look at that talk

311
00:20:50,252 --> 00:20:52,153
if you're interested in how to make these kinds of fires.

312
00:20:53,326 --> 00:20:56,587
And if you remember from our alpha erosion section,

313
00:20:57,147 --> 00:20:58,668
the Assassin's Creed blood,

314
00:20:59,368 --> 00:21:02,849
we can now go ahead and add some UV distortion to it.

315
00:21:03,329 --> 00:21:05,990
And it totally gives this visceral,

316
00:21:06,050 --> 00:21:09,471
really flowy kind of motion to our blood textures,

317
00:21:09,511 --> 00:21:11,532
which is essentially just a static card texture

318
00:21:11,872 --> 00:21:14,753
and not some fancy liquid simulation being played.

319
00:21:15,173 --> 00:21:15,473
All right?

320
00:21:16,314 --> 00:21:18,854
And guys, UV distortion is...

321
00:21:20,831 --> 00:21:27,977
really versatile. I've seen it being used in 2D games before where we had a flag texture

322
00:21:27,997 --> 00:21:32,500
that was a static card and passing some UV distortion to it just brought the flag back

323
00:21:32,540 --> 00:21:40,086
to life and had it waving. This has got to be one of my favorite UV shaders. So following

324
00:21:40,106 --> 00:21:45,410
the same principle, all the splashes and splatters were done by UV distorting these textures.

325
00:21:48,593 --> 00:21:51,875
So let's move on to our next shader, vertex offset.

326
00:21:53,256 --> 00:21:57,499
Now, vertex offset is also known as world position offset.

327
00:21:58,480 --> 00:22:02,282
And the way it works is it allows the vertices of a mesh

328
00:22:02,723 --> 00:22:07,706
to be manipulated in world space by the shader, okay?

329
00:22:08,167 --> 00:22:10,948
Now this is useful for making objects move around

330
00:22:11,209 --> 00:22:14,791
or change scale or change shape or rotate

331
00:22:14,851 --> 00:22:15,932
and plenty of other effects.

332
00:22:16,780 --> 00:22:22,342
In this effect, you can see how we have passed a scrolling noise into our sphere,

333
00:22:23,122 --> 00:22:26,503
and that has created a more blobby sphere.

334
00:22:26,704 --> 00:22:29,765
Okay, for this example, we will use vertex normals.

335
00:22:31,525 --> 00:22:35,806
So, let's talk about what exactly the concept of a normal is.

336
00:22:36,267 --> 00:22:44,449
Okay, a normal can be described as a vector that defines the orientation of the surface.

337
00:22:45,410 --> 00:22:45,650
Okay.

338
00:22:46,677 --> 00:22:51,961
As we can see over here, we all know that a sphere is not really a sphere, right?

339
00:22:52,041 --> 00:22:58,266
It's a collection of quads or tris that come together to form that sphere.

340
00:22:59,107 --> 00:23:05,632
And so the normals for each one of those faces is a line that is perpendicular to that surface

341
00:23:06,332 --> 00:23:08,994
that defines the orientation of that face.

342
00:23:09,631 --> 00:23:12,292
Okay, so in our engine,

343
00:23:12,893 --> 00:23:14,954
we can get the world space vertex normal

344
00:23:15,294 --> 00:23:17,655
by using the vertex normal WS node.

345
00:23:18,556 --> 00:23:21,257
As you may have guessed, the WS stands for world space.

346
00:23:21,858 --> 00:23:22,798
And with this node,

347
00:23:22,938 --> 00:23:25,840
we can do operations in our vertex shader.

348
00:23:28,021 --> 00:23:31,463
So let's create a very simple vertex offset shader.

349
00:23:32,363 --> 00:23:33,484
As you saw in our previous example,

350
00:23:33,544 --> 00:23:36,886
we have a scrolling noise that goes down our sphere.

351
00:23:37,790 --> 00:23:42,974
So what we're going to do is we're going to call the vertex normal node and then we're going to

352
00:23:43,534 --> 00:23:51,360
multiply this with a parameter. Let's call this parameter offset. Okay now we will once again

353
00:23:51,820 --> 00:24:01,307
multiply this parameter with another parameter and call it strength. Okay and then once we plug

354
00:24:01,407 --> 00:24:07,051
this into the world position offset node you will have control

355
00:24:07,612 --> 00:24:09,513
of the vertex shader of your object.

356
00:24:10,313 --> 00:24:11,914
So if you can guess what this does,

357
00:24:11,934 --> 00:24:16,576
it will scale your object.

358
00:24:17,216 --> 00:24:20,278
So in this example, we can see you can make your mesh grow

359
00:24:20,358 --> 00:24:21,978
or shrink within the material

360
00:24:22,018 --> 00:24:23,739
without having to manually transform it.

361
00:24:23,899 --> 00:24:24,900
How cool is that guys?

362
00:24:26,460 --> 00:24:30,222
Now, if we wanted our spherical blob

363
00:24:30,482 --> 00:24:32,783
that we saw in the previous example, in the first example,

364
00:24:33,443 --> 00:24:36,745
all you have to do is really just take your normal

365
00:24:37,530 --> 00:24:40,471
and pass that instead of your offset parameter node.

366
00:24:40,932 --> 00:24:43,492
Because it's scrolling downwards, just like the distortion,

367
00:24:43,993 --> 00:24:47,554
it will create the same effect and it will create this blob.

368
00:24:48,194 --> 00:24:52,135
Now once we tweak the strength, you can feel free to go as subtle or as

369
00:24:52,656 --> 00:24:55,436
crazy as possible depending on what your effect's called.

370
00:24:58,550 --> 00:25:05,253
Some applications of this include Uncharted, where they have some really amazing, amazing

371
00:25:05,333 --> 00:25:11,875
examples of how they use vertex offset to create really great effects all throughout the game.

372
00:25:12,435 --> 00:25:17,176
However, this is just one example. It barely scratches the surface, but it's still really cool.

373
00:25:18,037 --> 00:25:23,018
The motion, the flowing of the liquid in the glass, is controlled by the vertex offset.

374
00:25:24,388 --> 00:25:28,170
On the opposite end of the stylistic design space,

375
00:25:28,410 --> 00:25:29,930
way far away from Uncharted,

376
00:25:30,231 --> 00:25:31,891
we've got Abzu and Pathless,

377
00:25:32,472 --> 00:25:35,433
where their fish and birds are controlled

378
00:25:35,913 --> 00:25:37,554
by animated vertex offsets.

379
00:25:38,074 --> 00:25:40,715
And that is really cool because it helps save the cost

380
00:25:41,275 --> 00:25:43,436
of having bones or having animations.

381
00:25:43,937 --> 00:25:46,358
Everything can be controlled just through the shader.

382
00:25:47,675 --> 00:25:50,879
I've seen many more useful applications, guys.

383
00:25:51,900 --> 00:25:56,967
One example is ambient grass flowing in the wind,

384
00:25:57,027 --> 00:25:58,729
and this is a pretty universal application,

385
00:25:58,769 --> 00:26:02,394
regardless of where in the stylized design space

386
00:26:02,414 --> 00:26:03,074
your game falls.

387
00:26:05,633 --> 00:26:07,035
All right, so coming back to our piece,

388
00:26:07,755 --> 00:26:10,218
this stream of water has this undulating,

389
00:26:10,318 --> 00:26:11,820
kind of uneven flow to it.

390
00:26:12,221 --> 00:26:14,243
And so it's literally just a polygon strip

391
00:26:14,684 --> 00:26:17,046
with some scrolling noise, just like the sphere,

392
00:26:17,427 --> 00:26:19,389
creating that downward blobby motion

393
00:26:19,609 --> 00:26:20,390
that I showed you before.

394
00:26:23,102 --> 00:26:26,002
So now we can move on to our neat tips and tricks.

395
00:26:26,903 --> 00:26:28,503
The first tip is mask.

396
00:26:29,183 --> 00:26:29,804
What is a mask?

397
00:26:30,304 --> 00:26:32,985
A mask is usually a black and white texture

398
00:26:33,365 --> 00:26:35,785
that can be used to perform certain operations.

399
00:26:36,506 --> 00:26:39,947
Just like an alpha, black usually means zero

400
00:26:40,027 --> 00:26:41,667
and white usually means one.

401
00:26:42,427 --> 00:26:45,568
And so, operations from this, you know,

402
00:26:45,608 --> 00:26:47,748
you can have masks do really simple things

403
00:26:47,788 --> 00:26:49,989
to all the way to really complex things.

404
00:26:50,509 --> 00:26:54,090
Here's an example from the vertex offset section

405
00:26:54,290 --> 00:26:55,790
with the fish from Abzu.

406
00:26:56,150 --> 00:26:57,510
And here you can see you have the mask

407
00:26:57,570 --> 00:26:58,950
going from black at the head

408
00:26:59,511 --> 00:27:00,851
all the way to white at the tail.

409
00:27:01,271 --> 00:27:03,291
What this means is your vertex offset

410
00:27:03,631 --> 00:27:05,772
will mostly affect that tail end

411
00:27:06,192 --> 00:27:09,212
and reduce in intensity the closer and closer

412
00:27:09,252 --> 00:27:10,853
it gets to the head, okay?

413
00:27:13,076 --> 00:27:14,637
The next step is gradient mapping.

414
00:27:15,137 --> 00:27:16,417
The concept behind gradient mapping

415
00:27:17,258 --> 00:27:20,059
is that given a black and white input image

416
00:27:20,339 --> 00:27:21,399
and a colored gradient,

417
00:27:22,039 --> 00:27:24,400
all black and white values are mapped

418
00:27:24,440 --> 00:27:26,641
to the equivalent color values of that gradient.

419
00:27:27,081 --> 00:27:28,942
So where the image is darker,

420
00:27:29,402 --> 00:27:31,383
the colors at the left of the gradient are applied.

421
00:27:31,723 --> 00:27:33,264
Where the image is lighter,

422
00:27:33,724 --> 00:27:35,945
the colors at the right of the gradient are applied.

423
00:27:37,566 --> 00:27:39,726
So essentially, the way we map

424
00:27:40,280 --> 00:27:45,103
our gradient to our texture is as you can see above we have our gradient that goes all the way from

425
00:27:45,223 --> 00:27:52,907
teal to tan to pink. Okay down below we have our texture that is got some whites and grays and

426
00:27:52,947 --> 00:27:58,970
blacks and when it's fully mapped you can see that the white parts are pink, the gray parts are tan

427
00:27:59,910 --> 00:28:01,691
and the black parts are teal.

428
00:28:04,699 --> 00:28:17,127
To set this up in our shader, it's just as simple as plugging the red channel or a combination of channels of your choices right into the UVs. That's it.

429
00:28:17,568 --> 00:28:23,952
One of the great things about Unreal Engine is traditionally we used to make these gradients in a software like Photoshop externally.

430
00:28:24,407 --> 00:28:27,028
But now in Unreal Engine, you can use curve atlases.

431
00:28:27,449 --> 00:28:29,970
So you can create and preview gradients

432
00:28:30,250 --> 00:28:32,011
within the engine itself in real time.

433
00:28:32,232 --> 00:28:34,593
It's super helpful when it comes to iteration.

434
00:28:37,295 --> 00:28:42,658
Here are some examples of a gradient mapping in action.

435
00:28:43,699 --> 00:28:47,061
Besides just saving a lot of texture memory,

436
00:28:47,541 --> 00:28:51,203
it is also very useful for creating this amazing variety

437
00:28:51,544 --> 00:28:52,905
using a limited number of assets.

438
00:28:56,087 --> 00:28:59,669
Now debugging is something that I personally use

439
00:29:00,109 --> 00:29:02,090
to visualize the math that I'm doing,

440
00:29:02,150 --> 00:29:04,892
to visualize what controlling a potential parameter

441
00:29:05,092 --> 00:29:06,192
could look like, okay?

442
00:29:06,572 --> 00:29:09,174
Out of all of these, I use scalar values

443
00:29:09,594 --> 00:29:10,935
and debug time sign the most.

444
00:29:12,435 --> 00:29:14,937
Sine wave traditionally goes from negative one to one,

445
00:29:15,157 --> 00:29:17,538
but the debug time sign node has been normalized

446
00:29:17,598 --> 00:29:20,580
in Unreal Engine to go from zero to one, okay?

447
00:29:20,780 --> 00:29:21,860
If you want a regular sine,

448
00:29:22,100 --> 00:29:25,722
you should plug a time into sine.

449
00:29:26,260 --> 00:29:32,424
Okay? And below here, you can see that plugging the sign into a debug scaler values helps us visualize our math,

450
00:29:32,664 --> 00:29:34,526
seeing it go from negative one to one.

451
00:29:36,647 --> 00:29:39,769
Our next step is LERP, also known as linear interpolate.

452
00:29:40,270 --> 00:29:44,432
Now, this is many, many uses from scaling, transforming, colors.

453
00:29:45,013 --> 00:29:49,216
It's pretty universal. The concept behind this is if you have two inputs, A and B,

454
00:29:50,156 --> 00:29:53,519
the alpha will denote a point either at A

455
00:29:54,408 --> 00:29:57,592
or at B or a blend of something in between.

456
00:29:58,933 --> 00:30:02,517
Now your alpha can be anything, it can be a mask, it can be a scalar value, it can

457
00:30:03,178 --> 00:30:07,463
even be a Fresnel, whatever it is, it can be your alpha and that will denote that point

458
00:30:07,503 --> 00:30:08,704
between A and B.

459
00:30:10,466 --> 00:30:13,429
So here we have an example where we have two colors, we've got red

460
00:30:13,630 --> 00:30:14,230
and we've got green.

461
00:30:14,637 --> 00:30:16,458
we plug that into the A and B inputs.

462
00:30:16,859 --> 00:30:21,262
Okay. Now, since the alpha of this lerp is by default set at 0.5,

463
00:30:21,582 --> 00:30:23,563
you get yellow, which is a blend of red and green.

464
00:30:24,223 --> 00:30:27,045
If I set this value to 0, we get just red.

465
00:30:27,466 --> 00:30:29,627
Set the value to 1, get just green.

466
00:30:30,327 --> 00:30:32,409
All right. Now, to preview this,

467
00:30:33,169 --> 00:30:35,351
I can select the debug time sign node.

468
00:30:35,391 --> 00:30:36,731
Remember, it goes from 0 to 1.

469
00:30:37,372 --> 00:30:41,194
Once I plug that in, we can see our color going from 0 to 1,

470
00:30:41,354 --> 00:30:43,636
red to green, and blending in between.

471
00:30:44,728 --> 00:30:53,655
right? Our last tip for the day is dynamic parameters. So initially we were

472
00:30:53,695 --> 00:30:57,698
controlling all our parameters manually through a material instance.

473
00:30:58,434 --> 00:31:04,458
But if we want to access these properties in a particle system like Niagara or Cascade,

474
00:31:04,838 --> 00:31:10,521
we will use dynamic parameters instead. As you can see there are four inputs and they all

475
00:31:10,561 --> 00:31:17,045
correspond to RGBA values. You can see that we've named our first input offset and we've given a

476
00:31:17,105 --> 00:31:24,269
default value of zero. To control these parameters inside your particle system, you will use the

477
00:31:24,329 --> 00:31:27,971
dynamic parameter module in Cascade as well as Niagara.

478
00:31:30,549 --> 00:31:33,271
And this is the end of part one guys.

479
00:31:34,032 --> 00:31:35,413
And thank you for watching.

480
00:31:35,613 --> 00:31:37,474
And I will catch up with you in part two,

481
00:31:37,534 --> 00:31:39,856
where we'll go through the simple concepts

482
00:31:40,236 --> 00:31:41,657
in Unreal Engine and set them up.

483
00:31:43,198 --> 00:31:45,179
Hey guys, and welcome back to part two

484
00:31:45,259 --> 00:31:48,041
of how to use shaders to create stylized visual effects.

485
00:31:49,342 --> 00:31:52,144
In this part, we'll be going over how to create

486
00:31:52,184 --> 00:31:55,086
those same simple shader concepts in Unreal Engine 4.

487
00:31:56,127 --> 00:31:58,389
So to begin with, I've got one,

488
00:31:59,238 --> 00:32:02,199
mesh and four textures. Let's go over our mesh first.

489
00:32:03,279 --> 00:32:07,361
Our mesh is a simple curve mesh that I built in Maya

490
00:32:09,021 --> 00:32:12,943
and its UVs have been laid out flat in a 0

491
00:32:12,983 --> 00:32:14,803
to 1 space. Now

492
00:32:15,775 --> 00:32:19,636
It is important to note that these UVs are laid out vertically.

493
00:32:20,116 --> 00:32:24,817
Now this is different to the examples we had in the previous presentation where they were laid out horizontally.

494
00:32:25,337 --> 00:32:28,678
This does make a tiny bit of a difference in the way we do our operations,

495
00:32:29,118 --> 00:32:31,959
but we will get to that when we come to compiling our shader.

496
00:32:34,019 --> 00:32:35,980
Next we have our four textures.

497
00:32:39,760 --> 00:32:42,621
Just open them all up so we can talk through them.

498
00:32:43,589 --> 00:32:50,954
So firstly we have our trail texture. Now our trail texture is what will be scrolling along our curved mesh.

499
00:32:52,976 --> 00:33:02,323
We then have our noise texture. Now this is used for our UV distortion and can be used for several other purposes as well.

500
00:33:03,542 --> 00:33:05,743
We next have a gradient texture.

501
00:33:06,203 --> 00:33:07,643
Now a gradient map,

502
00:33:08,324 --> 00:33:10,984
this particular one was built in Photoshop.

503
00:33:11,344 --> 00:33:15,085
This particular one has also a brown start

504
00:33:15,506 --> 00:33:19,387
and goes all the way to orange and yellows and white values.

505
00:33:21,247 --> 00:33:22,708
Lastly, we have a alpha mask.

506
00:33:22,748 --> 00:33:24,848
Now this alpha mask is what we will use

507
00:33:24,908 --> 00:33:28,069
on top of our curve mesh to hide the edges.

508
00:33:28,129 --> 00:33:30,150
And the reason we do that is when your

509
00:33:30,530 --> 00:33:32,390
to rail texture scrolls along.

510
00:33:32,918 --> 00:33:36,500
you do not want there to be this jarring hard edge that it clips against.

511
00:33:36,660 --> 00:33:41,222
And so we use this soft edge to kind of create this softer mask on an edge.

512
00:33:41,562 --> 00:33:41,882
Okay.

513
00:33:44,303 --> 00:33:46,324
So let's begin by

514
00:33:48,084 --> 00:33:50,865
tossing our mesh into our scene.

515
00:33:56,408 --> 00:33:56,768
Excuse me.

516
00:34:07,668 --> 00:34:09,648
We will then go ahead and create a material.

517
00:34:09,668 --> 00:34:11,929
We'll call this M underscore Shader.

518
00:34:13,190 --> 00:34:14,070
Open this bad boy up.

519
00:34:15,010 --> 00:34:16,691
Now the first thing you will do is

520
00:34:17,131 --> 00:34:20,072
change this from opaque to translucent blend mode.

521
00:34:20,092 --> 00:34:21,753
Now the reason you do this is because

522
00:34:23,213 --> 00:34:27,595
you want to be able to use your alpha mask as your opacity input.

523
00:34:27,675 --> 00:34:30,836
If something is opaque, there is no opacity input. It's just opaque.

524
00:34:34,994 --> 00:34:39,077
We will then get our alpha mask texture and trail texture into our shader.

525
00:34:40,058 --> 00:34:44,681
You can do that by selecting your texture, going into your material,

526
00:34:45,101 --> 00:34:47,383
holding down T for texture and clicking.

527
00:34:48,504 --> 00:34:51,946
Once again, select the texture you want, go into your material graph,

528
00:34:52,346 --> 00:34:54,428
hold down T and click.

529
00:34:56,669 --> 00:35:01,793
What I'm going to do is multiply these textures because I kind of want my trail

530
00:35:01,833 --> 00:35:03,994
texture to have a nice soft.

531
00:35:04,869 --> 00:35:13,471
edge just like that. I'll plug that into the opacity channel. Then I will... then let's just make a

532
00:35:13,491 --> 00:35:19,552
vector parameter. Hold down V for vector parameter. Let's just call this emission and plug that into

533
00:35:19,632 --> 00:35:31,934
the emissive. Let's get a value of like 3 in the red channel. Hit save.

534
00:35:32,413 --> 00:35:35,255
go back and let's right click and create material instance.

535
00:35:36,957 --> 00:35:40,159
Now material instance is kind of like the child

536
00:35:40,359 --> 00:35:41,540
of a master material.

537
00:35:42,520 --> 00:35:47,244
It inherits all the properties from the parent material,

538
00:35:47,284 --> 00:35:49,025
but it has its own values.

539
00:35:49,125 --> 00:35:51,306
It's kind of its own entity in a way, okay?

540
00:35:52,007 --> 00:35:54,469
Let's drag and drop this material instance onto our mesh.

541
00:35:54,689 --> 00:35:57,751
You can see it automatically populated the material field.

542
00:35:59,232 --> 00:35:59,752
Let's open it up.

543
00:36:02,792 --> 00:36:08,194
Sorry guys, I just have the ability to record one screen at a time and so I have to drop this down here.

544
00:36:09,755 --> 00:36:13,737
You see the emission parameter has shown up right here in my instance.

545
00:36:14,457 --> 00:36:16,538
And you can click this and there's two ways to update it.

546
00:36:16,598 --> 00:36:19,480
If you know your values, you can just plug them in right there.

547
00:36:19,940 --> 00:36:25,343
Let's say I want to in blue and I have this nice neon pink trail thing going on.

548
00:36:25,883 --> 00:36:30,305
Or you can always use your trusty color wheel if that's what you prefer.

549
00:36:30,345 --> 00:36:31,386
Let's just go down here.

550
00:36:32,528 --> 00:36:36,289
Very nice little wispy trail thing going on.

551
00:36:36,349 --> 00:36:36,669
Okay.

552
00:36:39,250 --> 00:36:42,931
So you see how even though both the parent and the child have the same

553
00:36:43,011 --> 00:36:48,172
property of color, they each have their own value of what that color means to

554
00:36:48,232 --> 00:36:48,372
them.

555
00:36:49,772 --> 00:36:53,353
Let's go back to our shader and let's create our first shader function.

556
00:36:53,373 --> 00:36:55,233
Let's do scrolling texture on UVs.

557
00:36:56,907 --> 00:36:58,768
we need a texture coordinate node for that.

558
00:36:58,828 --> 00:37:01,330
And the easiest way to create that in the material graph

559
00:37:01,551 --> 00:37:07,075
is to use, sorry, to hold down U for UVs and click.

560
00:37:08,597 --> 00:37:11,179
We'll then, component masks,

561
00:37:11,239 --> 00:37:13,481
and we will mask out red and green channels.

562
00:37:16,083 --> 00:37:17,905
In our previous demonstration.

563
00:37:19,479 --> 00:37:21,401
we did the add operation in the red channel

564
00:37:21,421 --> 00:37:24,443
because we wanted to move our texture horizontally.

565
00:37:25,064 --> 00:37:27,426
In this case, we wanted moving vertically,

566
00:37:27,466 --> 00:37:28,967
so we're going to do our add operation

567
00:37:29,027 --> 00:37:30,949
on the green channel instead, okay?

568
00:37:35,813 --> 00:37:37,495
Just like we held down V

569
00:37:37,535 --> 00:37:39,517
to create a vector parameter for the emission,

570
00:37:39,557 --> 00:37:41,799
we'll hold down S to create a scalar parameter

571
00:37:42,099 --> 00:37:42,840
for our offset.

572
00:37:51,595 --> 00:37:55,178
Now we'll do a append vector operation on these bad boys.

573
00:37:58,501 --> 00:37:59,562
We'll plug them into the UVs.

574
00:37:59,582 --> 00:38:10,711
Let's open up our instance. Let's see what we have here.

575
00:38:14,234 --> 00:38:16,756
So now we have our offset parameter that's shown up.

576
00:38:17,997 --> 00:38:20,299
And now if we scroll this guy,

577
00:38:21,802 --> 00:38:26,385
There you go, you have your nice infinite scrolling trail of doom.

578
00:38:28,947 --> 00:38:34,911
Now what I would like is to see it just be a one-off trail, so just a one-off slash almost if you will.

579
00:38:35,752 --> 00:38:42,877
And to do that we will need to change our texture repeat mode from repeat, from wrap to clamp.

580
00:38:45,779 --> 00:38:49,041
So the way you do that is you open your trail texture.

581
00:38:49,926 --> 00:38:54,327
Click on this little drop down, you see this tiling method. It says wrap. We want to change that to clamp.

582
00:38:59,368 --> 00:38:59,908
Hit save.

583
00:38:59,928 --> 00:39:04,129
Open up the texture.

584
00:39:04,149 --> 00:39:08,350
Now we go from

585
00:39:08,970 --> 00:39:09,790
sun negative one.

586
00:39:11,311 --> 00:39:13,371
We're going to go from negative one to one.

587
00:39:13,391 --> 00:39:17,272
We have a nice little sweet little squirrel. Let's do that again.

588
00:39:18,830 --> 00:39:19,830
Let's go from negative one.

589
00:39:19,850 --> 00:39:23,471
Boom.

590
00:39:24,132 --> 00:39:24,412
Okay.

591
00:39:27,893 --> 00:39:28,233
Save.

592
00:39:30,114 --> 00:39:33,035
And let us, let's unplug this guy.

593
00:39:33,675 --> 00:39:34,296
Drag these away.

594
00:39:34,916 --> 00:39:37,297
Let's select on those, press C.

595
00:39:38,237 --> 00:39:39,277
Create a nice little box for them.

596
00:39:39,898 --> 00:39:40,918
Texture.

597
00:39:41,638 --> 00:39:42,239
Put that away.

598
00:39:44,259 --> 00:39:46,880
Let's move on to our second operation now.

599
00:39:47,060 --> 00:39:48,301
Let's do UV distortion.

600
00:39:49,406 --> 00:39:52,107
So for that we're going to use our noise texture.

601
00:39:53,968 --> 00:39:57,830
And we can select it, hold down T.

602
00:39:57,850 --> 00:40:01,752
Okay.

603
00:40:01,812 --> 00:40:04,774
For scrolling this noise I'm gonna use a panner node.

604
00:40:05,734 --> 00:40:08,656
What a panner node does is it moves your

605
00:40:10,016 --> 00:40:11,317
texture in a given direction.

606
00:40:11,517 --> 00:40:13,898
I'm gonna move it speed of maybe,

607
00:40:14,619 --> 00:40:16,740
let's say one in the Y direction.

608
00:40:19,184 --> 00:40:23,625
Now if you want to visualize what's happening with your nodes, one good method is to click

609
00:40:23,765 --> 00:40:25,425
live nodes and live updates.

610
00:40:26,486 --> 00:40:27,526
So now you can see it moving.

611
00:40:30,647 --> 00:40:35,728
I think this noise is a bit too high frequency for me, for my liking, so I'm going to go

612
00:40:35,768 --> 00:40:40,589
ahead and scale the U and the V just a little bit.

613
00:40:40,609 --> 00:40:46,110
Let's give this a 0.3 and let's give it a 0.1.

614
00:40:50,032 --> 00:40:54,974
that is way too fast so let's go down and still 0.1

615
00:40:57,535 --> 00:40:58,015
much better

616
00:40:58,155 --> 00:41:02,757
okay now remember since this is not a normal map you're gonna have to

617
00:41:03,998 --> 00:41:07,279
remap this using the constant bias scale

618
00:41:07,699 --> 00:41:10,881
or performing individual operation. Let's just go ahead

619
00:41:11,981 --> 00:41:13,782
and remap this from negative 1 to 1

620
00:41:14,122 --> 00:41:15,463
let's put in 0.5 and 0.2

621
00:41:19,499 --> 00:41:25,323
Now we can multiply this with the scale parameters, close distortion.

622
00:41:30,007 --> 00:41:35,372
And remember you want to add these to the UVs, the trail texture.

623
00:41:41,157 --> 00:41:42,158
All right, very nice.

624
00:41:42,438 --> 00:41:44,260
Now we go back in here.

625
00:41:45,092 --> 00:41:50,637
you have a distortion parameter. Let's start small. Let's give it a value of 0.1 maybe.

626
00:41:50,657 --> 00:41:59,347
There you go. You have a nice little wispy motion going on there.

627
00:41:59,367 --> 00:42:03,311
Let's turn this back off.

628
00:42:04,632 --> 00:42:07,315
Here. Unplug this guy.

629
00:42:21,149 --> 00:42:24,892
All right, let's do alpha erosion next.

630
00:42:24,972 --> 00:42:27,393
Now our trail texture already has built in

631
00:42:27,413 --> 00:42:31,016
a decent range of grays, blacks, and whites,

632
00:42:31,136 --> 00:42:32,817
so let's just use that to our advantage.

633
00:42:34,338 --> 00:42:37,920
We are going to subtract that.

634
00:42:41,523 --> 00:42:44,445
And let's subtract it from chronic erosion.

635
00:42:48,490 --> 00:42:51,331
then you want to saturate this because you want to make sure your values are

636
00:42:51,831 --> 00:42:56,073
between 0 to 1. Let's use this to multiply with

637
00:42:57,053 --> 00:42:57,793
our alpha mask.

638
00:43:00,394 --> 00:43:01,595
Now one thing you want to make sure is

639
00:43:03,975 --> 00:43:09,979
Try and keep your parameters to be in the range that you want for your shader.

640
00:43:10,039 --> 00:43:14,063
So in this case, I want my parameter tweakable from 0 to 1.

641
00:43:14,643 --> 00:43:16,484
So what we can do is click on that parameter.

642
00:43:17,025 --> 00:43:20,748
And where you see slider min and slider max, you can set those to 0 to 1.

643
00:43:20,808 --> 00:43:24,991
What that will mean is your erosion parameter will only be slideable between 0 to 1.

644
00:43:25,331 --> 00:43:27,753
Save this.

645
00:43:27,773 --> 00:43:28,914
Let's go back in here.

646
00:43:29,855 --> 00:43:32,216
Now that we have this, let's turn on our erosion.

647
00:43:33,911 --> 00:43:35,392
And you see it doesn't go lower than zero.

648
00:43:36,153 --> 00:43:37,814
And when we work towards one,

649
00:43:40,497 --> 00:43:41,337
it fades in and out.

650
00:43:42,338 --> 00:43:44,460
A really cool way to visualize this

651
00:43:44,500 --> 00:43:46,462
without even going outside or leaving the editor

652
00:43:46,582 --> 00:43:49,404
is to, you can select your curved mesh,

653
00:43:50,925 --> 00:43:52,327
click this little T part right here,

654
00:43:52,347 --> 00:43:55,509
get your curved mesh in here, right?

655
00:43:56,250 --> 00:43:57,030
Now you can,

656
00:43:59,220 --> 00:44:04,462
erosion, we know it goes from 0 to 1, so you can plug in a debug time sign node which does

657
00:44:05,382 --> 00:44:06,082
exactly the same.

658
00:44:08,983 --> 00:44:13,765
As you plug that in, if you check out your preview, or even this right here, you can

659
00:44:13,825 --> 00:44:16,886
see your texture eroding in and out from 0 to 1.

660
00:44:20,627 --> 00:44:25,188
Alright, I'm going to put this back here for now.

661
00:44:29,159 --> 00:44:33,460
and let's...

662
00:44:40,682 --> 00:44:43,242
Now lastly, let's do our world position offset.

663
00:44:44,222 --> 00:44:45,743
Now you can do that.

664
00:44:46,583 --> 00:44:49,003
Let's just copy these nodes right here.

665
00:44:50,324 --> 00:44:51,744
In fact, let's do that.

666
00:44:51,844 --> 00:44:52,104
All right.

667
00:44:59,481 --> 00:44:59,561
uh...

668
00:45:02,442 --> 00:45:05,784
you want to multiply this with your vertex normals

669
00:45:07,885 --> 00:45:10,327
remember WS stands for world space

670
00:45:15,950 --> 00:45:19,552
multiply this with another parameter, let's call this WPO strength

671
00:45:19,692 --> 00:45:21,133
oh wait, just WPO is enough

672
00:45:24,555 --> 00:45:26,476
we'll plug this into our world position offset

673
00:45:30,962 --> 00:45:41,826
Apply, save. Let's go in here and give this a value of maybe 0.1, 0.3 and 0.3.

674
00:45:43,027 --> 00:45:49,489
Then I think this is panning way too quick, so let's halve this to 0.05.

675
00:45:49,549 --> 00:45:53,051
Alright, let's do that.

676
00:45:55,512 --> 00:45:57,873
And go back out, you can see a little trail.

677
00:45:59,806 --> 00:46:03,627
turn on WPO. Let's set this to, I don't know, let's start small 10.

678
00:46:03,767 --> 00:46:08,689
All right, you see that? Now, unlike UV distortion, this thing is actually

679
00:46:08,769 --> 00:46:12,491
lifting the vertices. So let's set it to 50. See that?

680
00:46:16,472 --> 00:46:20,794
Okay, and set it to something really crazy, like 500. But there's not too

681
00:46:20,814 --> 00:46:24,335
many use cases where, you know, you would do something like this. And

682
00:46:24,355 --> 00:46:24,635
there's

683
00:46:26,530 --> 00:46:28,151
There's more smarter ways to do things like that.

684
00:46:28,191 --> 00:46:32,595
So we'll set this back to zero, go back into our shader,

685
00:46:35,057 --> 00:46:35,897
unplug this guy.

686
00:46:37,799 --> 00:46:43,023
Let's go over to Studio.

687
00:46:43,043 --> 00:46:45,685
So now we've individually created

688
00:46:45,705 --> 00:46:49,488
all of our four different shader functions in Unreal Engine.

689
00:46:50,983 --> 00:46:56,425
Let's go ahead and add our gradient map into this. So let's get rid of our

690
00:46:56,445 --> 00:47:04,887
emission parameter and let's take our

691
00:47:04,907 --> 00:47:14,490
let's take our trail

692
00:47:19,928 --> 00:47:21,670
and we can bring in our gradient.

693
00:47:30,317 --> 00:47:33,399
Now, the simplest way

694
00:47:34,280 --> 00:47:36,582
to get your gray to white values

695
00:47:37,282 --> 00:47:40,485
from this texture to this, is to take your red channel

696
00:47:41,505 --> 00:47:44,388
in here and boom.

697
00:47:44,908 --> 00:47:47,570
You can see right here, all your values, everything in here.

698
00:47:48,619 --> 00:47:59,442
drag this, plug it into the emissive, hit apply, and boom! Now I have a nice little

699
00:47:59,502 --> 00:48:06,024
fiery thing going on. It seems a little off and the reason for this is your

700
00:48:06,044 --> 00:48:11,305
gradient map needs to be clamp not wrap and you can see over here it's repeating

701
00:48:11,325 --> 00:48:17,107
the last pixel we do not want that so let's go to clamp, clamp, save

702
00:48:20,648 --> 00:48:21,208
There you go.

703
00:48:29,754 --> 00:48:32,736
Now that we've built these

704
00:48:34,437 --> 00:48:38,460
functions individually, let's compile them all together so we can

705
00:48:38,860 --> 00:48:41,341
perform all of these operations on all of the trail.

706
00:48:44,123 --> 00:48:46,965
So let's start with our UV distortion and

707
00:48:47,265 --> 00:48:48,046
scrolling texture.

708
00:48:49,217 --> 00:48:54,359
In fact this thing is independent. We can just plug this in directly. This will not

709
00:48:55,379 --> 00:48:59,261
be dependent on any of the other functions. These two however will be

710
00:48:59,301 --> 00:49:07,804
dependent on each other so let's drag that out of the way. And our erosion as

711
00:49:07,884 --> 00:49:14,947
well is independent so we can take this, plug this into the subtract and plug our

712
00:49:15,347 --> 00:49:18,048
saturate into the multiply.

713
00:49:30,271 --> 00:49:35,473
Okay, very messy, spaghetti noodles all over.

714
00:49:37,893 --> 00:49:40,594
Try to work as neatly as possible, but you know.

715
00:49:43,915 --> 00:49:47,516
All right, so now we know that our scrolling texture

716
00:49:47,837 --> 00:49:50,517
is just scrolling on G.

717
00:49:50,597 --> 00:49:52,178
So what we can do is take this mask

718
00:49:56,139 --> 00:49:57,800
and steal it for this right here.

719
00:50:01,678 --> 00:50:04,440
and we can plug this ad into the append

720
00:50:10,643 --> 00:50:13,744
one cool little trick you can do is in Unreal you can

721
00:50:14,405 --> 00:50:17,346
double click a node link and it creates this little

722
00:50:19,607 --> 00:50:20,788
dot that you can drag around

723
00:50:20,808 --> 00:50:24,510
and

724
00:50:26,271 --> 00:50:28,111
now we will take this and

725
00:50:28,352 --> 00:50:29,412
plug it into our

726
00:50:30,912 --> 00:50:34,795
lovely trail texture UVs.

727
00:50:37,397 --> 00:50:38,898
Now if you hit apply and save

728
00:50:41,700 --> 00:50:45,002
in your material instance, you have all your parameters showing up.

729
00:50:46,023 --> 00:50:49,806
Go back here. Let's say WPL, let's just leave it at zero.

730
00:50:50,786 --> 00:50:54,409
Offset, we can leave it at that. Distortion, let's set it to 0.1.

731
00:50:56,971 --> 00:50:58,792
And there you go. Now you have a moving trail.

732
00:50:59,921 --> 00:51:03,742
that you can control, say, it goes on, like that.

733
00:51:03,802 --> 00:51:07,304
And then it starts out full, but towards the end of it,

734
00:51:07,324 --> 00:51:10,546
it kind of erodes away instead of just like traveling

735
00:51:10,566 --> 00:51:11,326
all the way out, it goes,

736
00:51:11,346 --> 00:51:14,047
and then just like dissipates away out of existence.

737
00:51:14,768 --> 00:51:16,649
A lot of cool things you can do over here.

738
00:51:19,043 --> 00:51:26,508
One of the main ways to control all these parameters as VFX artists is in a VFX Editor system, a particle system.

739
00:51:26,568 --> 00:51:29,491
So you can use Cascade and Agra, whatever.

740
00:51:29,531 --> 00:51:35,555
The way we will do that is using dynamic parameters instead of scalar parameters, okay?

741
00:51:36,335 --> 00:51:41,579
So what we're going to do is go in and replace all our scalar parameters with dynamic parameters instead.

742
00:51:41,599 --> 00:51:43,501
Let's go ahead and start that.

743
00:51:44,662 --> 00:51:45,442
So we're going to go in here.

744
00:51:47,383 --> 00:51:48,944
You create a dynamic parameter.

745
00:51:53,487 --> 00:51:57,250
Let's see.

746
00:51:57,530 --> 00:51:58,270
Distortion.

747
00:51:58,290 --> 00:52:01,773
Erosion.

748
00:52:07,236 --> 00:52:07,636
Offset.

749
00:52:09,257 --> 00:52:10,078
And VPO.

750
00:52:12,039 --> 00:52:12,860
Our default values are 0.1, 0, 0, 0.

751
00:52:19,827 --> 00:52:26,631
Let's plug this bad boy in distortion. Duplicate it. Plug offset in offset.

752
00:52:32,935 --> 00:52:37,418
We will then plug this guy, erosion, into erosion.

753
00:52:39,579 --> 00:52:42,861
And lastly, WPL in there.

754
00:52:45,803 --> 00:52:46,623
Alright, fantastic.

755
00:52:52,636 --> 00:52:56,557
Now let's build a really quick particle system that shows the slash working.

756
00:52:57,337 --> 00:53:00,438
Let's select this guy and delete it.

757
00:53:02,679 --> 00:53:06,020
Save our little instance.

758
00:53:06,480 --> 00:53:12,822
As you can see now, all our parameters have disappeared because now they are dynamic and not scalar and tweakable through this anymore.

759
00:53:14,103 --> 00:53:16,843
So let's right click and create a particle system.

760
00:53:17,464 --> 00:53:20,164
Let's call it p underscore slash.

761
00:53:23,436 --> 00:53:33,459
open that guy up. We want a mesh. Let's select our little curve mesh right here.

762
00:53:37,980 --> 00:53:45,622
Alright, now we definitely don't want 20 plus meshes, so let's go in here and turn

763
00:53:45,642 --> 00:53:51,483
the spawn rate to zero. And let's just spawn one mesh at a time.

764
00:53:54,922 --> 00:54:00,523
There you go. I don't really want a velocity, so let's just want one and let it stay in place.

765
00:54:01,363 --> 00:54:10,025
Size seems a bit too big, so yeah, that is, so let's set it to 1, 1, 1. There you go, now it spawns one.

766
00:54:12,865 --> 00:54:19,226
Very good. Lifetime, it stays on a bit too long, you know, slashes are usually gone

767
00:54:19,266 --> 00:54:23,907
within less than a second. So let's set it to a point...

768
00:54:25,924 --> 00:54:30,266
three, five. See what that does. So we have...

769
00:54:33,348 --> 00:54:37,310
Okay, all right, great. Now let's drag this guy in.

770
00:54:37,870 --> 00:54:40,732
Oh, wrong thing, I'm sorry. Drag our slash in.

771
00:54:44,493 --> 00:54:50,957
Okay, now let us assign our... you go over here and click override

772
00:54:50,977 --> 00:54:54,538
material. The required tab you put your instance.

773
00:54:54,819 --> 00:54:55,639
So go here.

774
00:54:57,713 --> 00:54:58,394
Lock this guy in.

775
00:55:02,377 --> 00:55:05,060
All right, now it's coming to life.

776
00:55:05,300 --> 00:55:06,041
We see it.

777
00:55:09,123 --> 00:55:10,965
Go to parameter, select dynamic.

778
00:55:12,026 --> 00:55:14,668
Now you'll notice that all your values

779
00:55:14,788 --> 00:55:17,470
and parameter names are missing.

780
00:55:17,570 --> 00:55:18,711
You right click, hit refresh.

781
00:55:19,512 --> 00:55:21,273
It doesn't look like it refreshed the values,

782
00:55:21,353 --> 00:55:23,595
so we'll have to insert those manually.

783
00:55:23,876 --> 00:55:25,117
We have 0.1 and the 0.0.0, call.

784
00:55:31,885 --> 00:55:41,809
0, 0, 0, and there we go. Now we have our trail that spawns in. Spawns in way too quick.

785
00:55:41,829 --> 00:55:46,691
Let's change the duration to 2. Spawns in once, we'll do twice. 2 seconds.

786
00:55:55,446 --> 00:55:59,449
Now we can select our offset parameter.

787
00:56:00,610 --> 00:56:02,712
Let's change that from a constant to a constant curve.

788
00:56:03,253 --> 00:56:07,756
Now a constant curve will allow you to choose two points

789
00:56:07,817 --> 00:56:10,499
in time and their respective values as well.

790
00:56:11,600 --> 00:56:15,043
So let's create, or I say two, but you can have multiple.

791
00:56:15,083 --> 00:56:17,004
Let's just do two for the sake of simplicity

792
00:56:17,064 --> 00:56:17,865
for this example.

793
00:56:20,667 --> 00:56:24,030
So at zero, I want my offset to have a value of minus one.

794
00:56:24,609 --> 00:56:26,730
Now at one I want my offset to have value of one.

795
00:56:27,830 --> 00:56:30,211
And now you can see it just swooshes.

796
00:56:30,691 --> 00:56:31,972
Oof, there it goes.

797
00:56:37,034 --> 00:56:40,615
Okay, and now what we can do is do a similar thing

798
00:56:40,635 --> 00:56:41,215
with the erosion.

799
00:56:41,236 --> 00:56:43,256
Right now it's just traveling this entire path,

800
00:56:43,276 --> 00:56:44,657
but it's not like fading out.

801
00:56:45,317 --> 00:56:48,878
So what we can do is go in to the erosion parameter

802
00:56:48,938 --> 00:56:50,099
and do the exact same thing.

803
00:56:50,299 --> 00:56:52,020
Let's go into erosion, set that to curve.

804
00:56:59,213 --> 00:57:10,522
grid two points for simplicity. Say at 0.3 seconds in, 0.35 seconds in, it's still full,

805
00:57:11,182 --> 00:57:21,129
but it slowly starts fading away the rest of the trail. So now you can see it's kind

806
00:57:21,149 --> 00:57:23,131
of eating up itself before it reaches the end.

807
00:57:28,465 --> 00:57:31,529
We can obviously change the lifetime to be really, really slow.

808
00:57:31,549 --> 00:57:33,030
So we can see this whole thing in action.

809
00:57:33,050 --> 00:57:36,975
In slow-mo.

810
00:57:56,224 --> 00:58:06,253
Alright, and there we have it. That is how to use dynamic parameters, how to create shader functions in Unreal Engine 4.

811
00:58:06,854 --> 00:58:14,521
Alright, so guys, I will have a...

812
00:58:15,730 --> 00:58:21,913
link to these project files in the chat, a few of the resources that have been very helpful

813
00:58:21,973 --> 00:58:26,795
for me while I was learning VFX, as well as a few resources I've mentioned throughout

814
00:58:26,835 --> 00:58:33,738
these slides, Simon Trumpler's blog with the UV distortion fire, and many other cool tricks

815
00:58:33,798 --> 00:58:36,519
if you're interested in learning how shaders can help support VFX.

816
00:58:37,800 --> 00:58:40,762
their blog is a really fantastic read for that.

817
00:58:41,703 --> 00:58:46,407
Shannon has a wonderful post on VFX forums on

818
00:58:46,928 --> 00:58:52,652
how she built different elements for the League of Legends VFX, and it is always wonderful

819
00:58:52,973 --> 00:58:55,595
to read through how the experts and the pros

820
00:58:56,355 --> 00:59:03,517
do their technique so you can learn from it and build phenomenal VFX of your own. Tobias has a

821
00:59:04,517 --> 00:59:09,799
blog where he talks in detail about gradient mapping if you would like to learn more on that

822
00:59:09,839 --> 00:59:18,541
topic. Other than that guys, the real-time VFX form is this wonderful trove of knowledge that

823
00:59:18,581 --> 00:59:20,061
I cannot recommend enough.

824
00:59:20,582 --> 00:59:26,045
to people. They have a forum, they have a discord, they have a Facebook group even.

825
00:59:26,065 --> 00:59:32,208
And if you're a student or even just starting out with real-time VFX, I highly recommend this

826
00:59:32,288 --> 00:59:40,053
group. You know, it is wonderful for networking, wonderful for getting the eyes of professionals

827
00:59:40,113 --> 00:59:45,536
in the industry, get eyes on your work and getting critiques and feedbacks and

828
00:59:46,454 --> 00:59:50,336
and just an all-round wonderful experience learning and becoming a VFX artist.

829
00:59:53,077 --> 00:59:57,539
Other than that, I have left all my contact information on the screen. If y'all have any

830
00:59:57,619 --> 01:00:04,342
further questions or would like any feedback or critiques on your VFX art pieces, I'm more

831
01:00:04,362 --> 01:00:09,265
than happy to help. Shoot me an email and let's figure something out.

832
01:00:10,966 --> 01:00:19,650
That being said, I have laid out all the wonderful and magical tools that we as VFX artists use

833
01:00:19,690 --> 01:00:26,013
to create VFX, and I hope with these tools in your arsenal, you can go ahead and create

834
01:00:26,093 --> 01:00:30,074
something wonderful and magical of your own.

835
01:00:31,195 --> 01:00:33,576
Thank you so much for coming to this presentation.

836
01:00:34,016 --> 01:00:36,497
Hope you all have a great summer 2021.

837
01:00:41,283 --> 01:00:41,523
You

