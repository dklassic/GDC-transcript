1
00:00:06,413 --> 00:00:07,194
Good, alright.

2
00:00:08,174 --> 00:00:10,054
Hello everyone, my name is Sebastian.

3
00:00:10,194 --> 00:00:12,435
I'm the founder and CEO at Allegorithmic

4
00:00:12,695 --> 00:00:16,696
and I'm today very proud to start this session

5
00:00:16,876 --> 00:00:19,156
about how the people at Naughty Dog

6
00:00:19,456 --> 00:00:23,017
used the Substance tool set which we develop

7
00:00:23,897 --> 00:00:25,698
to texture Uncharted for one of the most

8
00:00:25,758 --> 00:00:27,938
anticipated game ever, basically.

9
00:00:28,998 --> 00:00:32,099
It started about three years ago and the

10
00:00:33,353 --> 00:00:36,575
They will explain the journey, because it's been a journey,

11
00:00:37,936 --> 00:00:39,717
and it's working.

12
00:00:40,178 --> 00:00:44,360
So today, without further ado, basically I want to introduce

13
00:00:44,380 --> 00:00:48,043
you to Brad and Rogelio from Naughty Dog here.

14
00:00:48,963 --> 00:00:52,005
They will explain how they first discovered the tool set,

15
00:00:52,526 --> 00:00:56,268
then did a lot of tests, and I say a lot.

16
00:00:56,969 --> 00:01:02,751
and decided on using it to texture their next project

17
00:01:02,771 --> 00:01:03,852
at the time which was Uncharted 4.

18
00:01:05,052 --> 00:01:07,813
So it's my great pleasure to welcome Brad on stage

19
00:01:07,833 --> 00:01:08,554
to talk about that.

20
00:01:08,974 --> 00:01:09,234
Thank you.

21
00:01:18,500 --> 00:01:21,082
Thank you, Sebastian, and thank you to Legorithmic for hosting

22
00:01:21,122 --> 00:01:25,344
us. It's really a pleasure for us to be here. As we speak, the

23
00:01:25,384 --> 00:01:29,086
team is actually still working really hard to finish up the

24
00:01:29,146 --> 00:01:32,068
greatest Uncharted game ever made, and we can't wait to get

25
00:01:32,108 --> 00:01:36,470
it into everybody's hands. So to kick things off, we'd like to

26
00:01:36,510 --> 00:01:40,112
share the story trailer with you, and minor spoiler warnings.

27
00:01:40,633 --> 00:01:43,374
If you haven't seen this, you may want to close your eyes and

28
00:01:43,414 --> 00:01:43,574
ears.

29
00:01:48,201 --> 00:01:49,182
Ratings will be coming soon.

30
00:01:52,624 --> 00:01:54,345
We were meant for this, Nathan.

31
00:01:57,247 --> 00:01:59,728
You and me, together.

32
00:02:00,769 --> 00:02:04,791
We were destined for something great.

33
00:02:04,871 --> 00:02:16,258
For those who prove worthy, Paradise awaits.

34
00:02:19,438 --> 00:02:21,639
Took a long time for him to get out of this game.

35
00:02:21,679 --> 00:02:22,760
He's meant for this life.

36
00:02:22,880 --> 00:02:23,920
Oh, oh crap!

37
00:02:24,581 --> 00:02:26,321
Last I checked, we're all a bunch of thieves,

38
00:02:26,662 --> 00:02:27,662
digging around where we shouldn't.

39
00:02:28,703 --> 00:02:30,023
Shame we're not on the same side.

40
00:02:30,804 --> 00:02:37,327
I am a man of fortune, and I must seek my fortune.

41
00:02:38,028 --> 00:02:41,669
So, are you ready to seek your fortune?

42
00:02:41,810 --> 00:02:46,152
Hang on, Nathan!

43
00:02:46,232 --> 00:02:47,513
Murder's the artifact.

44
00:02:47,553 --> 00:02:47,993
That's all!

45
00:02:51,999 --> 00:02:54,420
I made a promise that I was done with this life.

46
00:02:54,520 --> 00:02:56,061
How long have we been chasing this thing?

47
00:02:56,201 --> 00:02:57,041
Long time.

48
00:02:57,061 --> 00:02:59,002
A real long time.

49
00:02:59,022 --> 00:03:00,983
Just you and me.

50
00:03:01,183 --> 00:03:03,484
No offense to these guys, but they don't get it.

51
00:03:03,784 --> 00:03:07,005
If you're done lying to me, then you should stop lying to yourself.

52
00:03:07,025 --> 00:03:10,967
The biggest pirate treasure of all time is within our grasp.

53
00:03:11,227 --> 00:03:13,628
Watch out!

54
00:03:13,648 --> 00:03:15,488
Look, Nate, I'm gonna make you a one-time offer.

55
00:03:16,769 --> 00:03:17,569
Drop everything.

56
00:03:18,469 --> 00:03:19,090
Go home.

57
00:03:23,455 --> 00:03:24,036
Live your life.

58
00:03:26,398 --> 00:03:27,879
Or we can just end it right here.

59
00:03:29,500 --> 00:03:30,481
There's gotta be another way.

60
00:03:30,801 --> 00:03:31,542
I need you on this one.

61
00:03:31,562 --> 00:03:32,443
Stop!

62
00:03:32,543 --> 00:03:48,476
You ever wonder, like, different choices, how we might have ended up?

63
00:03:49,236 --> 00:03:49,596
No.

64
00:03:51,718 --> 00:03:52,759
I like the hand we've been dealt.

65
00:03:59,914 --> 00:04:00,361
Playstation.

66
00:04:18,998 --> 00:04:20,279
Gets me every time, that trailer.

67
00:04:20,959 --> 00:04:23,300
The team has a lot to be proud of,

68
00:04:23,340 --> 00:04:26,441
and as Sebastian said, it really was quite a journey,

69
00:04:26,961 --> 00:04:29,962
and one that Substance Designer was a huge part of

70
00:04:30,222 --> 00:04:31,483
from a texturing perspective.

71
00:04:32,503 --> 00:04:34,444
So I'm here to talk a bit about the evolution

72
00:04:34,464 --> 00:04:37,945
and the pipeline that we created at Naughty Dog,

73
00:04:38,105 --> 00:04:41,006
along with Allegorithmic, to integrate Substance Designer

74
00:04:41,046 --> 00:04:42,887
into our internal and external tools.

75
00:04:43,667 --> 00:04:44,747
My name is Bradford Smith,

76
00:04:44,787 --> 00:04:46,288
and I'm a texture artist at Naughty Dog.

77
00:04:48,229 --> 00:04:51,033
So some of the artwork that our artists generated,

78
00:04:51,053 --> 00:04:55,941
this is Sam's, Young Sam's dirt bike here by Brian Kenny.

79
00:04:56,441 --> 00:04:57,864
These are all substance materials.

80
00:04:58,444 --> 00:05:01,249
And a city car by Tate Macessian and Jacob Norris.

81
00:05:02,572 --> 00:05:05,655
And the Hero 4x4 that you might recognize from the trailer.

82
00:05:06,475 --> 00:05:09,077
And it's Arch Nemesis, the Turret Truck

83
00:05:09,137 --> 00:05:10,518
by the fantastic Yen-Kyo Lee.

84
00:05:11,559 --> 00:05:15,102
And here, Roelio has some great fully procedural

85
00:05:15,142 --> 00:05:17,223
tiling materials from Substance Designer.

86
00:05:18,044 --> 00:05:20,045
And there's another one, some rough cobblestones.

87
00:05:21,446 --> 00:05:24,909
And here's an example of mostly fully procedural textures

88
00:05:24,949 --> 00:05:26,911
in the context of an architectural level.

89
00:05:27,835 --> 00:05:31,176
And then again, but in an organic context.

90
00:05:31,457 --> 00:05:33,257
So what we could achieve with Substance Designer

91
00:05:33,297 --> 00:05:35,238
was very broad and diverse.

92
00:05:37,259 --> 00:05:39,360
So our journey is gonna take us through the pipeline

93
00:05:39,400 --> 00:05:43,042
and the history and the evolution of the pipeline,

94
00:05:43,622 --> 00:05:45,383
and we're gonna look at how we really utilize

95
00:05:45,423 --> 00:05:47,805
Substance Designer to handle our outsourcing

96
00:05:47,825 --> 00:05:48,925
and our content management.

97
00:05:49,658 --> 00:05:53,503
We're going to come back home and we're going to look at how we used substance products

98
00:05:53,683 --> 00:05:57,848
internally and just a few bits on what the horizon looks like moving forward.

99
00:05:59,283 --> 00:06:01,884
So it's important to understand when we're evaluating tools,

100
00:06:02,464 --> 00:06:05,405
Naughty Dog has a culture that's very open, it's flat,

101
00:06:05,785 --> 00:06:07,566
and it's extremely creative.

102
00:06:08,326 --> 00:06:10,707
It really lives and dies on collaboration,

103
00:06:11,527 --> 00:06:14,048
and flexibility is a key component

104
00:06:14,128 --> 00:06:16,928
into what really makes everybody successful there

105
00:06:16,968 --> 00:06:19,189
and ultimately creates successful products.

106
00:06:20,369 --> 00:06:24,190
So we really were jumping into uncharted territory

107
00:06:24,210 --> 00:06:25,351
at the beginning of the project.

108
00:06:26,408 --> 00:06:29,570
So we were, of course, rolling off of Uncharted 3, and this was

109
00:06:29,950 --> 00:06:34,613
2012. The Last of Us was in full production, and resources were

110
00:06:34,713 --> 00:06:37,895
very tight. So it was really up to the art department to find

111
00:06:37,955 --> 00:06:38,495
solutions.

112
00:06:40,094 --> 00:06:42,816
And like most of you are probably already familiar with,

113
00:06:42,896 --> 00:06:44,778
we were adopting physically-based renderings.

114
00:06:44,818 --> 00:06:47,521
Of course, consistency and library materials

115
00:06:47,541 --> 00:06:48,722
were very important to us.

116
00:06:49,763 --> 00:06:52,626
And as were material layering and inheritance.

117
00:06:53,287 --> 00:06:55,349
We wanted robust libraries

118
00:06:55,409 --> 00:06:56,911
that artists could utilize quickly.

119
00:06:58,363 --> 00:07:01,246
But the biggest thing that we knew we were going to run into

120
00:07:01,306 --> 00:07:04,130
was the scope and the scale of the environments and the

121
00:07:04,170 --> 00:07:04,550
props.

122
00:07:05,672 --> 00:07:08,175
If you're familiar with the Uncharted franchise, you know

123
00:07:08,195 --> 00:07:10,698
that it's as richly diverse as it is large.

124
00:07:11,438 --> 00:07:14,342
And we knew we had to be able to work efficiently and

125
00:07:14,462 --> 00:07:17,586
quickly and respond to changes on the fly.

126
00:07:19,351 --> 00:07:22,435
So revisiting our culture and the needs for our tools,

127
00:07:22,815 --> 00:07:24,397
we really had to find that marriage

128
00:07:24,437 --> 00:07:26,239
between a standardized common workflow

129
00:07:26,660 --> 00:07:31,065
and still allow our artists to be free and creative

130
00:07:31,105 --> 00:07:32,186
and do what they do best.

131
00:07:32,907 --> 00:07:35,310
And Substance Designer really fit the bill there.

132
00:07:36,352 --> 00:07:39,373
So of course, we were looking at the time at Substance 2.5.

133
00:07:39,873 --> 00:07:42,574
And it was really the start of an amazing relationship with

134
00:07:42,614 --> 00:07:45,454
Allegorithmic that we were thrilled to be a part of.

135
00:07:46,175 --> 00:07:49,396
Not only did they help define our internal pipeline, but we

136
00:07:49,436 --> 00:07:52,216
helped inform some software design as well.

137
00:07:52,517 --> 00:07:54,297
So it was a very special relationship.

138
00:07:54,357 --> 00:07:58,178
And to have tools that really focus on the games industry

139
00:07:58,198 --> 00:08:00,639
and texturing in general was a big win, and

140
00:08:00,699 --> 00:08:01,579
very well-timed, too.

141
00:08:03,183 --> 00:08:06,705
But of course, we started off with these very early questions

142
00:08:06,745 --> 00:08:09,026
of, well, can we really get high quality results out

143
00:08:09,046 --> 00:08:12,388
of a procedural and node-based system, as many of you

144
00:08:12,429 --> 00:08:14,050
are probably wondering or have encountered?

145
00:08:14,990 --> 00:08:16,631
And can we prototype our pipeline?

146
00:08:16,651 --> 00:08:18,212
Because again, our resources are tight,

147
00:08:18,252 --> 00:08:19,873
so we need to prove this out on the art side.

148
00:08:19,893 --> 00:08:24,356
And can our internal artists and our vendors

149
00:08:24,516 --> 00:08:25,497
effectively use it?

150
00:08:25,637 --> 00:08:27,658
Because there is a learning curve, right?

151
00:08:27,738 --> 00:08:28,518
And it's node-based.

152
00:08:28,598 --> 00:08:30,500
And not everybody responds to that.

153
00:08:31,947 --> 00:08:33,828
So naturally, as you may know,

154
00:08:33,848 --> 00:08:37,211
you know, Uncharted is a very stylized

155
00:08:37,271 --> 00:08:38,772
but hyper real environment,

156
00:08:38,872 --> 00:08:41,954
and we hand sculpt and paint a lot of things.

157
00:08:41,974 --> 00:08:44,335
There's a lot of pride and work that goes into every asset.

158
00:08:44,775 --> 00:08:48,078
So it was natural to start in our ZBrush pipeline,

159
00:08:48,638 --> 00:08:50,839
and we simply took our height maps out of ZBrush,

160
00:08:51,019 --> 00:08:52,861
we brought everything in a substance designer,

161
00:08:53,321 --> 00:08:55,342
generated all of our material maps,

162
00:08:55,943 --> 00:08:57,684
and then blended our materials in Engine.

163
00:08:58,716 --> 00:08:59,997
And it was very straightforward.

164
00:09:00,017 --> 00:09:01,357
We could see that was very efficient.

165
00:09:02,178 --> 00:09:03,398
So OK, well, that's great.

166
00:09:03,438 --> 00:09:06,019
Now let's take those maps, and now let's prototype

167
00:09:06,199 --> 00:09:07,240
our material pipeline.

168
00:09:07,680 --> 00:09:10,341
So let's look at how we can combine materials together,

169
00:09:10,861 --> 00:09:13,922
not just blend them, but find interesting ways

170
00:09:13,983 --> 00:09:18,244
to achieve material effects, like this rusted paint

171
00:09:18,284 --> 00:09:18,965
you see on the right.

172
00:09:20,592 --> 00:09:24,652
So this was a very elaborate early prototype

173
00:09:24,672 --> 00:09:26,213
of a material layering system.

174
00:09:26,673 --> 00:09:28,333
It's actually much simpler now.

175
00:09:30,233 --> 00:09:31,773
But it proved to be very successful.

176
00:09:33,174 --> 00:09:35,974
And of course now in practice, we have our height maps

177
00:09:36,014 --> 00:09:38,215
that are plugged into one of our early generators,

178
00:09:38,295 --> 00:09:39,275
this woodwork node.

179
00:09:40,355 --> 00:09:42,495
And as we move through the graph to the right,

180
00:09:42,515 --> 00:09:44,176
you'll see we're blending a lot of materials

181
00:09:44,216 --> 00:09:45,956
and generating our final game textures.

182
00:09:46,676 --> 00:09:48,836
And that was beautiful because we could simply swap

183
00:09:48,896 --> 00:09:49,496
the height map.

184
00:09:50,277 --> 00:09:53,978
and tweak a few parameters. Whoops, too soon. Tweak a few

185
00:09:54,018 --> 00:09:56,959
parameters and you've got a whole new texture set. So the

186
00:09:57,059 --> 00:10:00,261
iteration and the speed and the power once you get things set

187
00:10:00,321 --> 00:10:03,162
up became really apparent. So we said, okay, let's take this

188
00:10:03,362 --> 00:10:06,343
one step further. Let's do a small scene. Let's really prove

189
00:10:06,383 --> 00:10:10,925
this out. And so we did that. We took a bunch of architectural

190
00:10:10,945 --> 00:10:13,727
and organic elements, made a lot of base materials. A lot of

191
00:10:13,767 --> 00:10:17,708
these are fully procedural or using Z brush height maps.

192
00:10:18,671 --> 00:10:20,392
We also did a few props here as well.

193
00:10:20,773 --> 00:10:22,854
And we thought it was largely successful at the time.

194
00:10:24,456 --> 00:10:25,476
And this is the result of that.

195
00:10:26,768 --> 00:10:30,270
While we were also doing that, it was important for us to gauge

196
00:10:30,670 --> 00:10:34,132
whether or not our vendors would respond to this. So with very

197
00:10:34,212 --> 00:10:37,273
little training and very little information, we actually did a

198
00:10:37,353 --> 00:10:40,835
test and were pleasantly surprised that it was a little

199
00:10:40,855 --> 00:10:45,557
bit of a hurdle, but the results were far exceeded our

200
00:10:45,617 --> 00:10:48,519
expectations. And we said, okay, this, we can move forward with

201
00:10:48,539 --> 00:10:52,501
this. So we were ready to take the leap. I don't know about

202
00:10:52,521 --> 00:10:53,561
that, though. I'm afraid of heights.

203
00:10:55,480 --> 00:10:57,202
So now we have some implementation pipeline,

204
00:10:57,222 --> 00:10:58,963
so some implementation questions.

205
00:10:59,004 --> 00:11:00,505
We need to turn this into a pipeline.

206
00:11:01,666 --> 00:11:03,889
And we still need to really get the artists

207
00:11:03,929 --> 00:11:06,051
to rally around the procedural workflow.

208
00:11:06,071 --> 00:11:07,733
There is still some hesitation.

209
00:11:08,656 --> 00:11:11,418
But we also needed to standardize our asset packages.

210
00:11:11,458 --> 00:11:13,919
And this is really important because we

211
00:11:14,439 --> 00:11:17,781
utilize outsourcing heavily for a lot of our props and objects.

212
00:11:18,362 --> 00:11:20,043
So things had to come back consistent.

213
00:11:20,543 --> 00:11:23,045
And a lot of times, these assets would go through changes

214
00:11:23,125 --> 00:11:23,685
internally.

215
00:11:24,065 --> 00:11:25,546
And it's important that we utilize

216
00:11:25,566 --> 00:11:27,667
the non-destructive texturing aspects.

217
00:11:28,108 --> 00:11:30,249
And our artists can quickly turn around changes.

218
00:11:32,098 --> 00:11:34,439
So the next natural place to start

219
00:11:34,559 --> 00:11:36,180
would be to make a bunch of awesome nodes.

220
00:11:36,700 --> 00:11:40,101
And the important thing about these library nodes

221
00:11:40,161 --> 00:11:44,723
is that they emulate existing workflows and applications

222
00:11:44,763 --> 00:11:46,403
that artists are already used to.

223
00:11:46,804 --> 00:11:51,445
So the tools that you would use and software

224
00:11:51,485 --> 00:11:54,406
that you're familiar with, you would have access to right here

225
00:11:54,446 --> 00:11:55,527
inside Substance Designer.

226
00:11:57,195 --> 00:11:59,697
And then we created some even more advanced ones

227
00:11:59,737 --> 00:12:03,120
that could do some material effects, like the chipped

228
00:12:03,200 --> 00:12:06,063
paint, and then some topology mask blending.

229
00:12:06,103 --> 00:12:08,265
Ro's going to go into more detail a little bit about that

230
00:12:08,305 --> 00:12:08,545
later.

231
00:12:10,207 --> 00:12:10,967
So we said, OK, well.

232
00:12:11,930 --> 00:12:14,352
The workflow seems pretty straightforward. This is great.

233
00:12:14,653 --> 00:12:18,236
We're going to use substance in the middle in the red here as

234
00:12:18,256 --> 00:12:22,200
our sort of content management system for a particular asset.

235
00:12:22,761 --> 00:12:28,327
All of the required meshes, the Maya file, any bit maps, the

236
00:12:28,507 --> 00:12:30,749
high poly meshes, they're all going to get fed into substance

237
00:12:30,769 --> 00:12:33,632
and we're going to output our game textures from there. Pretty

238
00:12:34,233 --> 00:12:34,713
straightforward.

239
00:12:36,392 --> 00:12:38,834
So we put a few restrictions on our sculpts.

240
00:12:39,154 --> 00:12:41,917
So you can see on the left here, the primary and secondary

241
00:12:41,997 --> 00:12:43,698
forms are very well established.

242
00:12:44,719 --> 00:12:48,242
And a lot of the surface detail in the sculpts are largely

243
00:12:48,402 --> 00:12:51,364
absent, because we're going to add that in Designer later on

244
00:12:51,384 --> 00:12:52,105
in the process.

245
00:12:52,465 --> 00:12:54,567
And ultimately, that gave us the most flexibility.

246
00:12:54,607 --> 00:12:56,909
We could take this asset, we could have a stone version, a

247
00:12:56,949 --> 00:12:58,210
marble version, or a wood version.

248
00:12:59,867 --> 00:13:02,308
And so material IDs became really important.

249
00:13:02,428 --> 00:13:05,970
And we used to have an old method on the left here

250
00:13:06,490 --> 00:13:08,611
that we would have a ZBrush plugin that

251
00:13:08,631 --> 00:13:10,431
would do mesh IDs for us.

252
00:13:10,511 --> 00:13:12,072
Or you could use material IDs.

253
00:13:12,532 --> 00:13:16,214
But it was kind of cumbersome until Designer released

254
00:13:16,294 --> 00:13:18,695
their name pair baking and their.

255
00:13:19,767 --> 00:13:23,669
their mesh ID and their poly group ID bakers,

256
00:13:24,110 --> 00:13:25,230
it became very flexible.

257
00:13:25,290 --> 00:13:28,012
Now we could just organize our assets nicely

258
00:13:28,052 --> 00:13:30,033
and automatically bake all of our IDs.

259
00:13:31,934 --> 00:13:34,595
So we said, OK, let's just say we're

260
00:13:34,615 --> 00:13:35,856
going to use Substance as our baker.

261
00:13:36,176 --> 00:13:37,397
And it gave us great results.

262
00:13:39,261 --> 00:13:41,905
Everything was reproducible inside the substance package.

263
00:13:41,925 --> 00:13:44,108
We got all of our bake maps here in the center,

264
00:13:44,529 --> 00:13:47,012
from world normal to curvature, tangent space,

265
00:13:47,153 --> 00:13:48,555
all the necessary maps.

266
00:13:48,975 --> 00:13:51,258
And we, again, would output all of our game assets

267
00:13:51,299 --> 00:13:51,579
from there.

268
00:13:53,443 --> 00:13:56,746
So we couldn't call a particular asset package complete until all

269
00:13:56,806 --> 00:14:00,349
those components were together into the delivery package.

270
00:14:00,389 --> 00:14:03,891
The game asset, the high poly, any little bit of source.

271
00:14:04,331 --> 00:14:06,853
And the important bit is that they were all tied together

272
00:14:06,913 --> 00:14:07,754
through substance.

273
00:14:08,354 --> 00:14:11,176
That was essentially the little mini content management

274
00:14:11,256 --> 00:14:12,778
bit for each asset.

275
00:14:14,339 --> 00:14:14,899
So great.

276
00:14:15,399 --> 00:14:16,400
Mission accomplished, right?

277
00:14:17,301 --> 00:14:18,562
Not so fast.

278
00:14:20,416 --> 00:14:22,758
We have a lot of nodes now. We're starting to get a lot of

279
00:14:22,898 --> 00:14:26,862
assets. Management overhead became an issue, as did debugging

280
00:14:27,022 --> 00:14:30,285
and training, because we have a lot of standards in place. And

281
00:14:30,325 --> 00:14:32,867
then trying to stay on top of technical issues and updates

282
00:14:32,907 --> 00:14:34,849
became a challenge. And remember, at this point, we're

283
00:14:34,869 --> 00:14:39,913
still just an art team. So it was time to learn Python. So I

284
00:14:39,953 --> 00:14:43,316
rolled up my sleeves, right? And luckily I have the logic side,

285
00:14:43,356 --> 00:14:44,017
but not the math.

286
00:14:45,517 --> 00:14:47,940
So the first step there, right, we want to automate this.

287
00:14:48,360 --> 00:14:49,882
So let's compile the library.

288
00:14:49,902 --> 00:14:52,546
And right away, this fixed a lot of the issues that we had.

289
00:14:52,946 --> 00:14:56,892
And by compile, I mean take the substance source, the SBS file,

290
00:14:56,932 --> 00:14:57,833
if you're not familiar with this,

291
00:14:58,353 --> 00:15:03,000
and generate a SBSAR file, which is a black-boxed compiled node.

292
00:15:03,680 --> 00:15:07,444
This right away solved a lot of the dependency issues we had

293
00:15:07,524 --> 00:15:09,406
with our external partners.

294
00:15:09,946 --> 00:15:13,209
And it also meant we were source protecting our substance

295
00:15:13,330 --> 00:15:16,252
designer files now, which was great because we built

296
00:15:16,292 --> 00:15:19,375
a significant number of them, and some of them very complex.

297
00:15:20,396 --> 00:15:21,577
And it might be slightly faster.

298
00:15:21,597 --> 00:15:22,238
I don't know.

299
00:15:22,458 --> 00:15:23,339
Sebastian might know.

300
00:15:23,419 --> 00:15:24,500
Maybe by a millisecond or so.

301
00:15:25,780 --> 00:15:27,402
So here you can see on the left hand side

302
00:15:27,422 --> 00:15:29,263
what a very simple asset would be

303
00:15:29,303 --> 00:15:30,604
where we're taking the bake maps,

304
00:15:31,044 --> 00:15:32,565
we're blending a couple materials,

305
00:15:33,246 --> 00:15:34,567
and you see that since it's red,

306
00:15:34,587 --> 00:15:38,089
that's an artist using the in-house nodes.

307
00:15:38,810 --> 00:15:40,311
And on the, whoops, and on the right,

308
00:15:40,731 --> 00:15:43,193
you see that all the nodes are green,

309
00:15:43,413 --> 00:15:45,634
so that's gonna be a vendor using the compiled nodes.

310
00:15:46,075 --> 00:15:49,237
Same results, same workflow, just different libraries.

311
00:15:50,722 --> 00:15:52,484
So to manage those different libraries,

312
00:15:53,285 --> 00:15:54,827
Substance Designer allowed us to create

313
00:15:54,887 --> 00:15:57,190
custom configurations and project files.

314
00:15:57,831 --> 00:16:00,314
And this became, this made it really easy

315
00:16:00,354 --> 00:16:03,277
in order for us to control what our in-house artists see

316
00:16:03,698 --> 00:16:07,002
and what our out-of-artists, out-of-house artists see.

317
00:16:09,197 --> 00:16:12,159
But we also had a significant amount of software

318
00:16:12,199 --> 00:16:15,281
applications and configuration files to deploy.

319
00:16:15,781 --> 00:16:18,463
It seems pretty lo-fi these days, but BatchScript was the

320
00:16:18,483 --> 00:16:19,123
best I can do.

321
00:16:19,163 --> 00:16:20,484
And it worked really well, actually.

322
00:16:20,504 --> 00:16:23,266
With one click, you got all the substance applications,

323
00:16:23,386 --> 00:16:26,368
painter, designer, bitmap to material, and

324
00:16:26,408 --> 00:16:27,388
everything was updated.

325
00:16:27,448 --> 00:16:29,550
And there's a smiley face in the end, too, so that always

326
00:16:29,570 --> 00:16:30,110
makes you feel good.

327
00:16:32,065 --> 00:16:36,206
This is one of my favorite shader customizations.

328
00:16:36,506 --> 00:16:38,706
We're having some issues with the video, but the idea,

329
00:16:38,786 --> 00:16:39,106
are we?

330
00:16:39,587 --> 00:16:40,407
Yeah, I'm not even gonna go there.

331
00:16:42,087 --> 00:16:44,688
But the idea is that even the shader was customizable.

332
00:16:45,028 --> 00:16:47,909
And what we're doing here is we're actually picking

333
00:16:48,309 --> 00:16:51,289
material IDs off of the model in the viewport,

334
00:16:51,809 --> 00:16:53,690
which for complex models you know

335
00:16:53,730 --> 00:16:55,050
would save significant time.

336
00:16:56,070 --> 00:16:57,831
So that was a really nice win as well.

337
00:16:59,092 --> 00:17:01,974
And I've been talking about substance being a little

338
00:17:02,054 --> 00:17:03,455
content management system.

339
00:17:03,495 --> 00:17:05,217
And this is something kind of unique.

340
00:17:06,118 --> 00:17:09,421
And essentially, the substance file is XML.

341
00:17:09,641 --> 00:17:12,663
And that was awesome when we found that out.

342
00:17:12,683 --> 00:17:14,245
Because now you can parse into it.

343
00:17:14,525 --> 00:17:15,386
It's very open.

344
00:17:15,446 --> 00:17:16,767
You can check for errors.

345
00:17:16,827 --> 00:17:18,108
And you can fix errors.

346
00:17:18,148 --> 00:17:21,391
So you can automatically, technically review and fix a

347
00:17:21,491 --> 00:17:22,192
lot of things.

348
00:17:23,633 --> 00:17:26,135
So OK, let's take this automation thing a little bit

349
00:17:26,175 --> 00:17:26,435
further.

350
00:17:27,468 --> 00:17:31,930
So we had a fairly robust Python package that was all just a

351
00:17:31,970 --> 00:17:35,232
bunch of, like, substance-related functions. And

352
00:17:35,252 --> 00:17:38,674
then we also used substance batch tools, which ships with

353
00:17:38,714 --> 00:17:41,636
Substance Designer. And this automated everything from our

354
00:17:41,676 --> 00:17:46,098
library maintenance, our SPSAR conversion process. We even

355
00:17:46,198 --> 00:17:49,900
automatically deployed a lot of our outsourcing tools so that

356
00:17:49,960 --> 00:17:53,382
burden wasn't on any of our in-house management team.

357
00:17:54,472 --> 00:17:59,013
And then we also had some batch XML editing tools and I also

358
00:17:59,074 --> 00:18:02,114
would collect certain analytics. Unfortunately the UI

359
00:18:02,154 --> 00:18:05,295
didn't make it because I had to switch to art-related tasks. So

360
00:18:05,775 --> 00:18:08,516
it was largely me just, you know, running it in the IDE.

361
00:18:11,077 --> 00:18:13,998
So we were in a pretty good spot to say, okay, you know, let's

362
00:18:14,058 --> 00:18:18,839
lock down production. This is really good. So a bit about our

363
00:18:18,939 --> 00:18:20,400
vendors. And this is where

364
00:18:21,459 --> 00:18:23,480
the amount of volume really comes into light.

365
00:18:23,841 --> 00:18:26,003
So we work with about seven to 10 studios,

366
00:18:26,523 --> 00:18:28,125
and we're still working on these numbers.

367
00:18:28,225 --> 00:18:29,706
As you know, we're finishing up production.

368
00:18:30,327 --> 00:18:32,449
We're looking at about 3,000 assets

369
00:18:32,469 --> 00:18:34,531
that were done with our external partners.

370
00:18:35,291 --> 00:18:36,913
And we estimate about 2 3rds of those

371
00:18:36,973 --> 00:18:38,294
are background and prop related.

372
00:18:38,675 --> 00:18:40,416
So that's a lot of assets that are going

373
00:18:40,436 --> 00:18:41,978
through the substance designer pipeline.

374
00:18:43,798 --> 00:18:46,619
So training became really important.

375
00:18:47,479 --> 00:18:50,600
And ultimately, we tried a lot of documentation,

376
00:18:50,640 --> 00:18:52,561
but really, who reads documentation, right?

377
00:18:53,841 --> 00:18:55,902
And example files, and then videos.

378
00:18:56,022 --> 00:18:58,263
Ro and I did a lot of demos and time-lapse.

379
00:18:58,663 --> 00:18:59,843
And those proved helpful.

380
00:18:59,883 --> 00:19:01,984
But the important bit, you can see here on the right,

381
00:19:02,504 --> 00:19:05,985
is that the example files are all browsable in the library.

382
00:19:06,025 --> 00:19:07,066
They are just assets.

383
00:19:08,612 --> 00:19:13,115
But ultimately, what was most successful is we did a lot of in-house vendor training.

384
00:19:13,155 --> 00:19:18,259
We actually flew some senior and lead level artists for a week or more.

385
00:19:18,279 --> 00:19:19,980
And they spent time in the studio.

386
00:19:20,020 --> 00:19:21,581
We were doing classroom sessions.

387
00:19:21,982 --> 00:19:24,443
We also had in-house assignments and reviews.

388
00:19:24,924 --> 00:19:27,746
And that proved to be incredibly successful.

389
00:19:29,630 --> 00:19:32,673
And you can see here an example of what a typical asset package

390
00:19:32,733 --> 00:19:35,595
might look like. This is a weapon set done by original

391
00:19:35,655 --> 00:19:38,497
force. So this is what the artist would see upon return.

392
00:19:38,837 --> 00:19:42,159
And this is a little more on the complex side, but the flow is

393
00:19:42,219 --> 00:19:44,881
the same. Materials are being blended, masks are being

394
00:19:44,961 --> 00:19:50,085
output, and there's a lot of flexibility in that graph. So

395
00:19:50,105 --> 00:19:54,808
what makes our back home or our internal workflows unique? Well,

396
00:19:55,469 --> 00:19:58,191
it's about the same, really, just a different library.

397
00:19:59,955 --> 00:20:02,258
And again, we did a lot of internal training,

398
00:20:02,638 --> 00:20:04,500
and at this time, now that we have a lot of tools,

399
00:20:04,560 --> 00:20:06,443
our artists really embraced the workflow.

400
00:20:07,324 --> 00:20:10,427
And our usage is, I would say, a majority of our artists

401
00:20:10,487 --> 00:20:12,149
have used it, but at different capacities.

402
00:20:14,174 --> 00:20:17,395
Allegorithmic, also their own Jeremy, he would come up fairly

403
00:20:17,495 --> 00:20:20,876
often and do training sessions for us. And email updates

404
00:20:20,956 --> 00:20:23,696
actually ended up being a big win. Just weekly email updates,

405
00:20:23,736 --> 00:20:26,237
here are the library updates and changes. That constant

406
00:20:26,297 --> 00:20:29,358
communication during this growth process was really important.

407
00:20:30,679 --> 00:20:33,739
And you can see our texture pipeline is actually very

408
00:20:33,780 --> 00:20:38,361
similar to our asset pipeline. Our 3D tiling scopes, they get

409
00:20:38,441 --> 00:20:41,862
baked inside Substance Designer, and all of our textures get

410
00:20:41,902 --> 00:20:42,482
output from there.

411
00:20:44,130 --> 00:20:46,571
And here you can see these are actually all fully procedural

412
00:20:46,631 --> 00:20:47,411
base materials.

413
00:20:48,051 --> 00:20:50,052
So not everything is sculpted.

414
00:20:51,132 --> 00:20:53,172
A lot of stuff can be done fully procedurally.

415
00:20:54,953 --> 00:20:57,653
And our character and our prop departments are actually

416
00:20:57,693 --> 00:21:01,394
starting to largely use Painter, mainly because of just

417
00:21:01,514 --> 00:21:04,075
how awesome it is to make masks and then do all of the

418
00:21:04,115 --> 00:21:05,335
runtime material blending.

419
00:21:07,196 --> 00:21:09,236
So what does the future look like for the pipeline?

420
00:21:09,896 --> 00:21:11,077
These are predictions, by the way.

421
00:21:11,097 --> 00:21:12,197
I'm supposed to say that.

422
00:21:14,337 --> 00:21:15,257
But we really don't know.

423
00:21:15,337 --> 00:21:17,378
But we know that we need more base materials.

424
00:21:18,099 --> 00:21:20,720
We wanted flexible tools that artists could use,

425
00:21:21,080 --> 00:21:22,982
but we didn't invest heavily in base materials

426
00:21:23,002 --> 00:21:26,003
because we don't want to black box anyone.

427
00:21:26,464 --> 00:21:28,965
But we know that this is going to be a critical component

428
00:21:29,085 --> 00:21:31,326
to getting even more efficiency.

429
00:21:31,985 --> 00:21:35,267
We're also looking at completely moving our vendor workflow over

430
00:21:35,307 --> 00:21:38,670
to Painter. And we're going to continue to automate the

431
00:21:38,730 --> 00:21:43,693
internal workflow, provide more deployable UIs, and really get

432
00:21:44,374 --> 00:21:48,497
these Python tools into the hands of the artists. So I want

433
00:21:48,517 --> 00:21:51,859
to thank you for listening to the evolution of the pipeline.

434
00:21:51,879 --> 00:21:54,421
And I'd like to introduce my talented colleague, Ro, here,

435
00:21:54,461 --> 00:21:57,944
who's going to go into more depth. I hope you enjoyed it.

436
00:22:08,100 --> 00:22:11,245
Hi, my name is Rogelio Olguin and I'm a texture artist at Naughty Dog.

437
00:22:12,366 --> 00:22:18,033
And to get right to it, Substance Designer in its basic form is like Lego blocks.

438
00:22:18,114 --> 00:22:22,659
You have different nodes and you just attach them together and get something magnificent.

439
00:22:25,344 --> 00:22:28,707
So here's an example of a ZBrush workflow.

440
00:22:29,228 --> 00:22:33,033
And what happened early on is that the pavilion of artists

441
00:22:33,193 --> 00:22:37,338
that came in were kind of scared of the initial tool

442
00:22:37,378 --> 00:22:39,660
because it's not like a traditional painting tool

443
00:22:39,680 --> 00:22:42,163
or like ZBrush where you end up being more artistic

444
00:22:42,203 --> 00:22:45,287
with like a pen or a Wacom tablet, for example.

445
00:22:46,588 --> 00:22:50,531
So being a node based system, it initially was kind of scary to

446
00:22:51,032 --> 00:22:56,896
deal with. So we ended up making examples like this one where we

447
00:22:56,956 --> 00:23:02,241
showed how time wise we were able to do a color map and

448
00:23:02,521 --> 00:23:03,142
painting program.

449
00:23:03,734 --> 00:23:06,916
The color map that you see there on the left side is,

450
00:23:08,237 --> 00:23:09,598
it took around like an hour or so,

451
00:23:10,139 --> 00:23:11,740
while the substance variations,

452
00:23:12,420 --> 00:23:15,562
all these three were around like 10, 15 minutes.

453
00:23:18,164 --> 00:23:19,645
And here's a few more examples.

454
00:23:21,987 --> 00:23:24,769
And as you see, this was when we were baking with X-Normal.

455
00:23:24,969 --> 00:23:26,950
We bake now exclusively with substance.

456
00:23:29,632 --> 00:23:36,379
So, in this case, we are also trying to see how we can do procedural materials and if

457
00:23:36,459 --> 00:23:41,524
it would fit our quality, our patriotic quality that we have in Naughty Dog.

458
00:23:42,165 --> 00:23:48,871
This was one of the procedural materials, stucco, and basically you can get enormous

459
00:23:48,891 --> 00:23:53,095
amounts of variation and this was part of the vetting process.

460
00:23:54,062 --> 00:23:59,283
So this is the same stucco generator and as you can see you

461
00:23:59,303 --> 00:24:05,305
can get plenty of variations from it. And then going back to

462
00:24:05,385 --> 00:24:08,626
what Brad was saying about this car, we actually ended up doing

463
00:24:08,666 --> 00:24:12,607
this layering process and vetting it because we are also

464
00:24:12,647 --> 00:24:18,049
working with our internal material system to figure out

465
00:24:18,529 --> 00:24:21,370
how we're going to layer all these materials into one asset

466
00:24:24,374 --> 00:24:29,598
We sent this same car to the outsourcing vendors so they can

467
00:24:30,679 --> 00:24:34,623
see the results and at the same time we gave them this test and

468
00:24:34,663 --> 00:24:37,785
we were surprised with the cars that they sent out to us.

469
00:24:40,606 --> 00:24:43,388
And while looking into doing this test,

470
00:24:43,408 --> 00:24:45,389
we also found out some interesting tools

471
00:24:45,490 --> 00:24:48,372
within the node structure of Substance.

472
00:24:48,792 --> 00:24:50,233
And within the node structure of Substance,

473
00:24:50,273 --> 00:24:54,276
we found adaptive masks like we're showing here.

474
00:24:54,916 --> 00:24:56,558
And these masks would basically do is

475
00:24:56,578 --> 00:24:58,199
they grab information from like curvature,

476
00:24:58,639 --> 00:25:01,701
AO, world space, maps, or position,

477
00:25:02,142 --> 00:25:04,463
and you're able to move around the dirt or the.

478
00:25:04,946 --> 00:25:13,039
grime and raindrops and stuff like that on top of it. Using these masks, you can mask away the dirt

479
00:25:13,179 --> 00:25:17,966
and or rust and or like, what is it, edge cracking and stuff like that.

480
00:25:20,087 --> 00:25:28,155
this video doesn't work so I'll move on. Basically I was going to show the adaptive masks. And in

481
00:25:28,195 --> 00:25:33,541
this case, well, we ended up having a lot of discoveries. Things that we didn't initially

482
00:25:33,721 --> 00:25:39,527
even think were going to happen without our intention. This is one example of an asphalt

483
00:25:39,607 --> 00:25:40,648
flat material.

484
00:25:41,553 --> 00:25:44,275
and it has an asphalt breaker attached to it.

485
00:25:44,695 --> 00:25:46,756
Now what the asphalt breaker does is basically

486
00:25:46,776 --> 00:25:49,378
it breaks up the asphalt flat and makes it into,

487
00:25:49,678 --> 00:25:50,779
have all these kind of cracks.

488
00:25:52,300 --> 00:25:55,342
So one thing that happened was happy little accidents.

489
00:25:56,542 --> 00:25:58,324
We attached this asphalt,

490
00:25:59,865 --> 00:26:00,545
was a breaker,

491
00:26:01,205 --> 00:26:05,788
to one of the Brad's Substance rock material,

492
00:26:06,569 --> 00:26:09,231
and we were able to get a totally different texture

493
00:26:09,251 --> 00:26:10,351
that was not even intended.

494
00:26:11,231 --> 00:26:14,232
And as we went on, these are the kind of things that just kept on happening.

495
00:26:14,332 --> 00:26:20,113
Artists would come up with interesting things, and we would end up getting different results

496
00:26:21,114 --> 00:26:24,395
without even our initial push and knowledge.

497
00:26:25,475 --> 00:26:27,515
And that's what makes Substance amazing.

498
00:26:27,595 --> 00:26:28,796
It's like Lego blocks.

499
00:26:29,496 --> 00:26:33,757
It's fun to play with, and at the same time, you get some amazing stuff just putting it

500
00:26:33,797 --> 00:26:34,077
together.

501
00:26:35,767 --> 00:26:37,109
And well, greatness awaits.

502
00:26:37,149 --> 00:26:40,432
This is a node by Jonathan Smith, a very talented

503
00:26:40,472 --> 00:26:41,674
texture artist at Nadia.

504
00:26:42,394 --> 00:26:46,899
And this is a node that basically has a pattern node,

505
00:26:47,140 --> 00:26:49,522
and it goes into a stone carver node.

506
00:26:50,443 --> 00:26:54,628
And what this does is that we can get multiple variations of

507
00:26:54,688 --> 00:26:56,950
this kind of material.

508
00:27:00,077 --> 00:27:03,318
This node, as far as I know from talking to the artist at

509
00:27:03,338 --> 00:27:06,739
Naughty Dog, it was used in seven different levels in a

510
00:27:06,819 --> 00:27:07,899
very different context.

511
00:27:08,479 --> 00:27:12,601
So when we see these kind of nodes just pop up, it just

512
00:27:13,361 --> 00:27:16,102
gives an enormous amount of variation and flexibility.

513
00:27:16,762 --> 00:27:19,223
And the iteration process gets shorter and shorter because

514
00:27:19,263 --> 00:27:19,363
of it.

515
00:27:21,165 --> 00:27:25,471
So we got to a point of no turning back. So the next

516
00:27:25,531 --> 00:27:29,737
images are from the E3 demo. If you guys remember for the chase

517
00:27:29,757 --> 00:27:33,882
sequence where the truck is going full speed ahead, et

518
00:27:33,922 --> 00:27:34,163
cetera.

519
00:27:35,442 --> 00:27:40,704
So theory into action. Now this is a huge Vista scene and if

520
00:27:41,145 --> 00:27:44,766
you've seen that demo, the Vista scene is all over. Basically

521
00:27:45,007 --> 00:27:47,508
you can turn the camera around and it's going to be all around

522
00:27:47,548 --> 00:27:51,890
you. The artist that worked on this Vista scene is Artem and he

523
00:27:51,910 --> 00:27:55,872
did an amazing job of setting up the scene. Around 70 percent

524
00:27:56,012 --> 00:27:59,434
of this scene when it comes to textures was substance.

525
00:28:01,828 --> 00:28:05,230
And these are various substance materials. Some of these went

526
00:28:05,290 --> 00:28:09,813
from C-brush workflow to the substance or fully procedural.

527
00:28:12,755 --> 00:28:20,599
And these four are fully procedural materials. The cloth

528
00:28:21,100 --> 00:28:24,802
you can change it up and get more threading, less threading.

529
00:28:25,322 --> 00:28:28,825
Change up the threading if you like. The same stucco and the

530
00:28:28,865 --> 00:28:30,446
same stucco combined with.

531
00:28:31,417 --> 00:28:37,163
brick and rust material here. And all these you can change

532
00:28:37,183 --> 00:28:42,368
them up whichever way, change the color and et cetera. So we

533
00:28:42,408 --> 00:28:46,092
got to a point also that we are making all these awesome tools

534
00:28:46,793 --> 00:28:49,776
and for this demo specifically, since it was going to be a huge

535
00:28:49,816 --> 00:28:51,718
demo, we were able to get a lot of information out of it.

536
00:28:52,691 --> 00:28:58,556
we had to do like patterns. In this case we end up making these

537
00:28:58,596 --> 00:29:01,999
patterns that could be used in multiple situations. This kind

538
00:29:02,019 --> 00:29:05,642
of pattern could be used for cobblestone but it can also be

539
00:29:05,762 --> 00:29:11,847
used for like wood by combining these nodes together. And this

540
00:29:11,867 --> 00:29:13,828
is an in game shot of that same cobblestone.

541
00:29:17,075 --> 00:29:22,140
And we also did this for the city shape sequence. It was

542
00:29:22,200 --> 00:29:27,084
different kind of tiles for rooftops. We only have

543
00:29:27,124 --> 00:29:30,107
practically used probably two of these, but there's more of

544
00:29:30,147 --> 00:29:32,829
these. There's actually like seven or eight of these. And

545
00:29:32,849 --> 00:29:38,494
they're all based on actual architectural tiles. And you

546
00:29:38,534 --> 00:29:43,298
can make these look destroyed or clean, et cetera. And here's a

547
00:29:43,378 --> 00:29:44,960
few examples of them in game.

548
00:29:46,198 --> 00:29:47,959
with the pattern showing where it is.

549
00:29:53,081 --> 00:29:55,762
And here we're getting to the actual images of the level.

550
00:29:56,182 --> 00:29:58,103
And in this case, there's a market sequence

551
00:29:59,223 --> 00:30:01,924
where you're battling it out, trying to get to your Jeep.

552
00:30:02,905 --> 00:30:04,826
So here, what I want to point out

553
00:30:04,886 --> 00:30:06,887
is all the outsourcing assets that we have to do

554
00:30:07,607 --> 00:30:09,127
to get them into our levels.

555
00:30:09,628 --> 00:30:12,029
A lot of these, actually all of them,

556
00:30:12,609 --> 00:30:14,370
are from used substance.

557
00:30:17,370 --> 00:30:20,131
And this scene is an interior scene.

558
00:30:20,311 --> 00:30:22,712
And I know that the artist, the texture artist that worked on

559
00:30:22,732 --> 00:30:26,513
this, Alice, as you see, the names below are the artists

560
00:30:26,553 --> 00:30:27,833
that worked on these scenes.

561
00:30:28,414 --> 00:30:32,895
Alice, our texture artist here, did an amazing job of

562
00:30:32,935 --> 00:30:35,736
getting the quality for all the materials in here.

563
00:30:36,356 --> 00:30:38,157
And she exclusively works with substance.

564
00:30:40,790 --> 00:30:43,216
This scene for the downhill chase section,

565
00:30:43,838 --> 00:30:47,546
and this area that I worked with Zach Oliver,

566
00:30:48,529 --> 00:30:50,574
and everything here is substance as well.

567
00:30:52,707 --> 00:30:56,350
There's another scene for the staircase sequence. I work with

568
00:30:56,550 --> 00:31:00,993
Jacob Norris and it's outsourcing a full substance.

569
00:31:01,634 --> 00:31:04,696
And what's interesting about this one scene is that I don't

570
00:31:04,716 --> 00:31:07,758
know if you guys remember, it's a scene where the jeep is

571
00:31:07,818 --> 00:31:10,920
actually just pile driving through the staircase. And

572
00:31:10,981 --> 00:31:15,164
there's ‑‑ it's just like amazing how much detail is put

573
00:31:15,204 --> 00:31:17,265
into a scene that you're really only going to see for like 6, 10

574
00:31:17,345 --> 00:31:17,605
seconds.

575
00:31:20,810 --> 00:31:25,032
And right after that staircase there's a municipal area.

576
00:31:28,473 --> 00:31:30,954
And there's a road that goes downhill

577
00:31:31,234 --> 00:31:37,236
and it's kind of like a community road.

578
00:31:38,477 --> 00:31:43,638
And then we get into the vastness of the outskirts

579
00:31:43,778 --> 00:31:45,459
with more shanty town areas.

580
00:31:46,457 --> 00:31:49,258
And you can see the art direction starts to change and

581
00:31:49,278 --> 00:31:52,580
it becomes much more saturated. These scenes are amazing

582
00:31:52,640 --> 00:31:57,401
actually. You can actually go and literally inside our game

583
00:31:57,881 --> 00:32:00,583
plop the character and she's walking around. This is great.

584
00:32:03,724 --> 00:32:06,745
There's a place where Nate and Drake is dragging on the mud

585
00:32:06,825 --> 00:32:12,947
and hitting everything in sight. Another scene from that area.

586
00:32:14,527 --> 00:32:20,228
There's a scene where the jeep actually tumbles over and Drake

587
00:32:20,288 --> 00:32:22,648
is trying to get out of the jeep and shooting the bad guys

588
00:32:22,668 --> 00:32:29,250
there while the evil truck is after you. And there's an

589
00:32:29,590 --> 00:32:35,051
industrial zone area where the grand finale for that scene. And

590
00:32:35,071 --> 00:32:38,251
then it goes into the cinematic sequence here.

591
00:32:40,135 --> 00:32:44,799
So, yeah, I mean, this was all done with Substance,

592
00:32:44,879 --> 00:32:48,342
the demo, at least 80% of the assets

593
00:32:48,362 --> 00:32:51,084
when it came to textures were used Substance.

594
00:32:51,884 --> 00:32:53,826
And I just want to say thanks to Algorithmic

595
00:32:53,906 --> 00:32:55,568
for letting us use an amazing tool.

596
00:32:56,128 --> 00:32:57,829
And also to the outsourcing team,

597
00:32:58,350 --> 00:33:00,752
and props to Mark, our outsourcing manager,

598
00:33:00,892 --> 00:33:02,934
who has been amazingly patient with all of us

599
00:33:03,534 --> 00:33:05,316
dealing with outsourcing.

600
00:33:06,096 --> 00:33:06,316
Thank you.

601
00:33:17,343 --> 00:33:25,228
Thank you. All right. So that was amazing. I hope you enjoyed it. At the beginning it was not

602
00:33:25,288 --> 00:33:31,072
working. I have to tell you this. It's working now. But the tools three years ago were

603
00:33:31,092 --> 00:33:37,637
different than they are now. And thanks to these guys and a few other people in the

604
00:33:37,657 --> 00:33:44,722
studios, we've been able to make the tool evolve in such a way that it's really made for

605
00:33:44,762 --> 00:33:45,362
game developers.

606
00:33:47,510 --> 00:33:55,893
I have to say a few words. So first, let me see. So it's not

607
00:33:55,933 --> 00:34:01,195
confidential obviously. But a few words about the road map for

608
00:34:01,215 --> 00:34:06,076
substance painter. So you've heard Brad say about painter and

609
00:34:06,196 --> 00:34:08,857
designer. So we have mainly two tools, substance designer and

610
00:34:08,897 --> 00:34:12,319
substance painter. So substance designer has been the hub tool

611
00:34:12,399 --> 00:34:16,140
and the management tool that the guys at Naughty Dog have been

612
00:34:16,220 --> 00:34:16,660
using a lot.

613
00:34:17,301 --> 00:34:19,523
and painter came after this one.

614
00:34:20,304 --> 00:34:22,326
And it's a 3D paint application,

615
00:34:22,346 --> 00:34:24,728
a little bit closer to what Mudbox, Mari,

616
00:34:26,390 --> 00:34:27,631
or 3D code can do.

617
00:34:29,352 --> 00:34:31,535
So it's newer.

618
00:34:31,855 --> 00:34:33,537
And we just released a version 2.0 today.

619
00:34:35,984 --> 00:34:40,127
a few minutes ago. So if you want to have demos of both tools,

620
00:34:40,187 --> 00:34:44,430
substance designer and substance painter too, you can come to our

621
00:34:44,490 --> 00:34:51,036
booth at our booth 316, if I'm not mistaken. Not only will you

622
00:34:51,076 --> 00:34:56,920
get some demos from us, but also you will see more talks like

623
00:34:56,940 --> 00:35:03,145
this from Brad, from Rogelio, from Christophe and from

624
00:35:03,546 --> 00:35:12,093
and Glauco from Naughty Dog as well, from Lucas from Ubisoft, from other people, Josh from

625
00:35:13,375 --> 00:35:19,821
Infinity Ward, sorry. So you will have some more talks like this about how these guys, amazing

626
00:35:19,861 --> 00:35:20,141
talent.

627
00:35:21,142 --> 00:35:24,163
use Substance for some of their creations.

628
00:35:24,203 --> 00:35:26,445
So, a few words about the roadmap.

629
00:35:27,325 --> 00:35:31,047
What will be added in 2016, or has been added already,

630
00:35:32,028 --> 00:35:34,109
like scripting features in Substance Painter,

631
00:35:34,129 --> 00:35:37,010
you will be able to, yeah, script things.

632
00:35:37,311 --> 00:35:38,551
And it's available already.

633
00:35:39,352 --> 00:35:41,193
You cannot do much right now, to be fair,

634
00:35:41,273 --> 00:35:42,293
but you can do some.

635
00:35:43,601 --> 00:35:48,426
integration. We just presented it just a few hours also with

636
00:35:48,526 --> 00:35:52,830
NVIDIA. I don't know if you know that. It's a path tracer from

637
00:35:52,930 --> 00:35:56,594
NVIDIA. What that means is that right within substance painter

638
00:35:56,634 --> 00:35:59,937
now you can use the path tracer instead of a raster engine.

639
00:36:00,717 --> 00:36:01,998
to come up with a beauty shot.

640
00:36:02,058 --> 00:36:04,319
So if you're working on an asset

641
00:36:04,719 --> 00:36:07,080
and you want to shed the best light on it

642
00:36:07,640 --> 00:36:12,102
and potentially export that to Sketchfab or Artstation,

643
00:36:12,822 --> 00:36:14,602
now you can do that right within the tool

644
00:36:14,843 --> 00:36:16,363
without having to export all the maps

645
00:36:16,663 --> 00:36:19,744
and re-import them in a rendering application.

646
00:36:19,804 --> 00:36:22,445
So you can do that right within the tool Substance Painter.

647
00:36:22,645 --> 00:36:25,126
So it's a very, very nice workflow,

648
00:36:25,206 --> 00:36:29,268
look dev, look development workflow that you have now.

649
00:36:31,615 --> 00:36:33,416
Layered material authoring and visualization.

650
00:36:33,456 --> 00:36:37,097
It's, the visualization part is already available.

651
00:36:37,137 --> 00:36:39,358
Again, we haven't, you can have demos about that.

652
00:36:39,378 --> 00:36:40,558
So it's a little bit more technical.

653
00:36:40,578 --> 00:36:42,619
So let's say you have a special type of shader

654
00:36:42,959 --> 00:36:44,540
that you're using in your game engine.

655
00:36:45,140 --> 00:36:46,040
You can load it up.

656
00:36:46,920 --> 00:36:50,202
I mean you can tweak it so that in the comments section,

657
00:36:50,242 --> 00:36:53,643
if I'm not mistaken, you make sure that Substance Painter

658
00:36:53,683 --> 00:36:57,424
will only display what's useful and will remap things

659
00:36:57,464 --> 00:37:00,405
here and there so that you can work within the context

660
00:37:00,445 --> 00:37:04,306
and within the constraints of that specific shader type

661
00:37:04,426 --> 00:37:05,327
you're using for your game.

662
00:37:05,947 --> 00:37:07,848
So that's very, very powerful.

663
00:37:08,088 --> 00:37:09,688
You can have demos on the booth as well.

664
00:37:10,128 --> 00:37:13,029
So there's a new UI, new shelf, better quality content.

665
00:37:13,129 --> 00:37:15,010
Obviously it's better now.

666
00:37:16,852 --> 00:37:20,176
New painting tool, like clone and blur and smudge,

667
00:37:20,856 --> 00:37:22,939
that sounds stupid, like having a smudge tool

668
00:37:23,479 --> 00:37:25,942
or blur tool, but a clone tool.

669
00:37:26,242 --> 00:37:29,006
But the thing is that Substance Painter

670
00:37:29,046 --> 00:37:30,808
is a fully non-destructive tool,

671
00:37:31,228 --> 00:37:34,452
which means that it's, when you actually use the clone tool.

672
00:37:35,333 --> 00:37:38,955
Whatever you cloned, if you do a modification on what was

673
00:37:39,056 --> 00:37:42,939
cloned originally, it will follow the steps.

674
00:37:43,019 --> 00:37:44,140
It will follow the clone steps.

675
00:37:44,180 --> 00:37:47,242
So if you say, cloned a, I don't know,

676
00:37:47,442 --> 00:37:52,246
a part on a hard surface, if you want to change the screw,

677
00:37:53,184 --> 00:37:56,327
if you change the screw it will be repeated for you

678
00:37:56,588 --> 00:37:59,731
automatically. So that was kind of complicated to actually

679
00:37:59,751 --> 00:38:04,216
implement and we're pretty, pretty happy with it. Sub

680
00:38:04,237 --> 00:38:08,582
surface scattering, we have a fake one. At least you can do

681
00:38:08,622 --> 00:38:08,782
some.

682
00:38:09,856 --> 00:38:12,857
And that will be coming, these two items are important,

683
00:38:12,917 --> 00:38:16,538
and 8K painting and UDIM support.

684
00:38:16,558 --> 00:38:20,620
So we currently have an 8K export, it's hidden somewhere,

685
00:38:21,360 --> 00:38:24,641
but we don't talk about it, but it's an export function.

686
00:38:26,041 --> 00:38:29,322
And it's because when you want to paint in 8K,

687
00:38:29,342 --> 00:38:30,903
to be fair, it's a bit laggy,

688
00:38:31,223 --> 00:38:32,663
so it's not a great experience,

689
00:38:32,683 --> 00:38:36,665
and we don't like the fact to not having our customers

690
00:38:39,146 --> 00:38:41,228
users have a bad experience with the tool,

691
00:38:41,268 --> 00:38:43,029
so we prefer to hide it for now.

692
00:38:43,429 --> 00:38:46,031
So 8-bit painting, full painting will come eventually,

693
00:38:46,271 --> 00:38:46,872
we're working on that.

694
00:38:47,692 --> 00:38:50,454
And we're not only hoping about the fact

695
00:38:50,474 --> 00:38:51,795
that hardware will get better,

696
00:38:51,875 --> 00:38:54,477
so we're actually actively working on it.

697
00:38:54,858 --> 00:38:57,800
And UDIMM support, I don't know if you know what UDIMMs are,

698
00:38:58,280 --> 00:39:02,363
it's basically a way for you to not having to care about

699
00:39:02,583 --> 00:39:02,723
the...

700
00:39:04,044 --> 00:39:08,846
the amount of data and texture information

701
00:39:08,926 --> 00:39:10,067
you want to paint on your object.

702
00:39:10,087 --> 00:39:11,508
So you can get crazy with that.

703
00:39:11,948 --> 00:39:17,130
It's a standard in the visual effects animation fields

704
00:39:17,930 --> 00:39:21,252
where they really want to have the finest details

705
00:39:21,312 --> 00:39:23,513
on every nails of King Kong.

706
00:39:23,693 --> 00:39:26,574
So now if you want to have like the finest details,

707
00:39:26,614 --> 00:39:28,115
like 8K texture on the nail,

708
00:39:28,155 --> 00:39:30,236
each nail of a character, you will be able to do that.

709
00:39:30,276 --> 00:39:31,517
So that's, I'm very happy.

710
00:39:34,629 --> 00:39:40,110
Substance designer, same thing, scripting features are already

711
00:39:40,310 --> 00:39:45,072
partly here and will get stronger. This is a biggie here.

712
00:39:46,832 --> 00:39:49,073
I mentioned the fact that we've integrated IRAE inside of

713
00:39:49,113 --> 00:39:51,033
substance painter. IRAE relies on...

714
00:39:51,714 --> 00:39:55,219
Something that is maybe not more important,

715
00:39:55,259 --> 00:39:57,242
but super important, which is the MDL,

716
00:39:57,583 --> 00:39:59,045
is material definition language.

717
00:39:59,426 --> 00:40:01,729
So this is something NVIDIA is trying to push now.

718
00:40:01,829 --> 00:40:05,315
It's open material definition language.

719
00:40:07,337 --> 00:40:10,039
It's been missing in the industry for years to be fair.

720
00:40:10,139 --> 00:40:12,700
And we certainly hope, and we support it at least,

721
00:40:12,740 --> 00:40:15,702
and we think it has the potential to become a real standard.

722
00:40:16,583 --> 00:40:18,364
When you want to describe full materials,

723
00:40:18,404 --> 00:40:21,065
not only textures, but materials, not shaders,

724
00:40:21,385 --> 00:40:23,246
it's between the textures and the shaders actually.

725
00:40:23,266 --> 00:40:27,509
There is no lighting information instructions in the EMDL.

726
00:40:28,429 --> 00:40:32,753
But if you want to define what makes a material,

727
00:40:33,233 --> 00:40:36,075
MDL is the, we think it's a good solution.

728
00:40:36,115 --> 00:40:38,397
So we're turning basically Substance Editor

729
00:40:38,477 --> 00:40:41,079
into not only a texture editor,

730
00:40:41,799 --> 00:40:45,963
but also an authoring system, but also an MDL editor.

731
00:40:46,343 --> 00:40:48,204
So we're adding one more type of graphs.

732
00:40:48,645 --> 00:40:50,646
There were a lot of them already.

733
00:40:51,687 --> 00:40:53,488
it's going to be a new type of graph

734
00:40:53,508 --> 00:40:55,569
that will let you define the materials

735
00:40:55,669 --> 00:40:56,730
on top of the textures.

736
00:40:56,810 --> 00:41:00,913
And these materials can then rely and refer to textures

737
00:41:00,953 --> 00:41:02,734
that are minified by substance designer.

738
00:41:02,774 --> 00:41:04,275
So you can get crazy with that.

739
00:41:05,315 --> 00:41:09,558
Hard surfacing tools, we definitely want to have

740
00:41:09,578 --> 00:41:10,158
something like this.

741
00:41:11,039 --> 00:41:13,481
Text tool, again, it's been missing.

742
00:41:14,381 --> 00:41:15,722
But we want to make it right, again.

743
00:41:15,842 --> 00:41:18,184
We want it to be really non-destructive.

744
00:41:19,630 --> 00:41:20,171
the way it should be.

745
00:41:21,332 --> 00:41:23,494
We're working on that and enhanced viewport,

746
00:41:23,594 --> 00:41:25,656
obviously having a better viewport.

747
00:41:26,316 --> 00:41:30,320
You already have one-one parity with Unity, Unreal,

748
00:41:30,780 --> 00:41:32,442
all the best engines out there.

749
00:41:34,143 --> 00:41:37,006
Because we basically use the same underlying principles.

750
00:41:38,006 --> 00:41:41,888
And we also have been working closely with these guys.

751
00:41:42,808 --> 00:41:45,449
So we made sure that what you see in Substance,

752
00:41:45,769 --> 00:41:48,490
either painter or designer, is what you will get

753
00:41:48,550 --> 00:41:53,632
eventually in Unity or all the other good engines.

754
00:41:54,913 --> 00:41:57,033
Yeah, that's pretty much it.

755
00:41:57,073 --> 00:41:59,895
So I guess time for questions.

756
00:42:06,337 --> 00:42:06,717
And thank you.

757
00:42:15,845 --> 00:42:21,728
Before the questions I want to thank you guys again. I cannot

758
00:42:21,808 --> 00:42:25,770
express how proud I am today. And really glad to have you here.

759
00:42:25,810 --> 00:42:35,114
So thank you again. Any questions?

760
00:42:41,008 --> 00:42:41,388
Yeah.

761
00:42:41,808 --> 00:42:55,656
We will have to repeat the question, I guess.

762
00:42:57,231 --> 00:43:01,293
So your question was, did we use it on the terrain textures?

763
00:43:01,893 --> 00:43:02,714
We did, actually.

764
00:43:03,494 --> 00:43:05,875
Ro can probably speak more about those particular terrains.

765
00:43:05,895 --> 00:43:07,656
But we've used it on a number of different surfaces,

766
00:43:07,696 --> 00:43:11,318
from hard surface materials, organic terrain materials.

767
00:43:13,438 --> 00:43:16,721
really, we've used it just about everywhere across the game.

768
00:43:17,521 --> 00:43:20,864
Yeah, most definitely. We've definitely used it everywhere.

769
00:43:21,024 --> 00:43:25,187
We also used World Machine. And I didn't do a lot of the

770
00:43:25,327 --> 00:43:30,811
whites, which are like the huge, you know, expansive vistas that

771
00:43:30,831 --> 00:43:36,475
we see. But the artists that did use World Machine and used the

772
00:43:36,555 --> 00:43:40,278
substance as well for the tile and materials that the masks

773
00:43:40,318 --> 00:43:42,480
were created from. So we definitely did use that.

774
00:43:44,895 --> 00:43:49,258
There's a line. So there are mics here. So if you want to ask

775
00:43:49,318 --> 00:43:50,239
questions, please line up.

776
00:43:50,980 --> 00:43:54,662
Hi. I have a question regarding the analytics. You mentioned

777
00:43:54,702 --> 00:43:57,404
that as part of your automation package you were gathering

778
00:43:57,444 --> 00:44:01,047
analytics. If you can elaborate on what kind of analytics you

779
00:44:01,067 --> 00:44:03,469
were gathering and how they were useful eventually?

780
00:44:04,469 --> 00:44:07,131
Absolutely. So your question was what kind of analytics did I

781
00:44:07,171 --> 00:44:11,895
gather and how was it helpful? They were very basic. At the

782
00:44:11,935 --> 00:44:16,838
time I was really curious about what type of nodes people were

783
00:44:16,958 --> 00:44:21,021
using and what was working and what wasn't. Because we were

784
00:44:21,061 --> 00:44:24,444
really figuring all this stuff out. And one important thing I

785
00:44:24,524 --> 00:44:27,006
found is that really complex Uber node

786
00:44:27,586 --> 00:44:32,587
uber nodes weren't being used heavily. It was the small

787
00:44:32,667 --> 00:44:36,368
modular ones that allowed people to do one simple thing very

788
00:44:36,428 --> 00:44:40,190
well that were being used across a number of assets. So it was

789
00:44:40,230 --> 00:44:43,771
really just about how to better build a library of nodes.

790
00:44:44,771 --> 00:44:45,011
Thanks.

791
00:44:49,049 --> 00:44:50,851
Thanks a lot, great presentation, really enjoyed it.

792
00:44:52,052 --> 00:44:53,553
I was wondering the enhanced viewport.

793
00:44:53,573 --> 00:44:54,674
Can you get closer to the mic, sorry.

794
00:44:54,714 --> 00:44:54,874
Yeah.

795
00:44:54,974 --> 00:44:57,276
The enhanced viewport, is it possible

796
00:44:57,336 --> 00:44:59,578
we have our own lighting model and our own engine?

797
00:45:00,399 --> 00:45:02,660
Would it be possible to adapt the lighting shaders as well?

798
00:45:03,901 --> 00:45:04,642
Look at the what, sorry?

799
00:45:04,922 --> 00:45:05,583
Can you repeat?

800
00:45:05,703 --> 00:45:08,145
The lighting model of the viewport itself.

801
00:45:08,900 --> 00:45:10,521
The lighting mode of the viewport itself?

802
00:45:10,541 --> 00:45:13,463
You mean changing the lighting conditions and adding lights

803
00:45:13,483 --> 00:45:14,144
and that kind of stuff?

804
00:45:14,164 --> 00:45:15,765
Well, we support Unreal and Unity.

805
00:45:16,325 --> 00:45:17,025
We have our own engine.

806
00:45:17,586 --> 00:45:20,067
Would it be possible to hack into the lighting shader

807
00:45:20,087 --> 00:45:23,389
somehow and try to get some results?

808
00:45:23,569 --> 00:45:24,410
I don't know, actually.

809
00:45:24,490 --> 00:45:24,970
Well, we would.

810
00:45:26,397 --> 00:45:33,339
talk about that after. Go ahead. Sorry. I want to add one thing to that. It is just, it's open

811
00:45:33,379 --> 00:45:37,379
GL, right? So we were able to customize a very few things. We changed some of the energy

812
00:45:37,419 --> 00:45:42,861
conservation. And then we did a lot of weird things. I wish I could have showed you. We were

813
00:45:42,921 --> 00:45:49,422
able to pick material IDs from the view port. So anything you could do in open GL, we were

814
00:45:49,482 --> 00:45:54,163
able to do inside of the view port shader. I managed to find a compiled open GL shader.

815
00:45:55,791 --> 00:45:56,896
No source.

816
00:45:59,833 --> 00:46:00,294
What's the question?

817
00:46:00,774 --> 00:46:01,014
Sorry.

818
00:46:01,174 --> 00:46:02,154
Can you repeat the question?

819
00:46:02,354 --> 00:46:02,915
Can you get closer?

820
00:46:02,935 --> 00:46:04,415
I indeed found the viewport shaders,

821
00:46:04,615 --> 00:46:06,976
but I managed to only find the compiled version,

822
00:46:07,316 --> 00:46:08,637
and I couldn't find the source, really.

823
00:46:09,417 --> 00:46:09,597
Oh.

824
00:46:09,697 --> 00:46:11,498
I'm digging through the files.

825
00:46:11,518 --> 00:46:13,419
They're actually in, they're somewhere

826
00:46:13,539 --> 00:46:14,559
installed on the system.

827
00:46:14,639 --> 00:46:15,420
It's all open.

828
00:46:15,460 --> 00:46:18,541
You can actually open it up and see what's in there.

829
00:46:18,601 --> 00:46:20,282
I think it's in the app data location.

830
00:46:21,362 --> 00:46:22,722
So it's open to a certain degree.

831
00:46:22,743 --> 00:46:26,104
So this is why I needed to hear more about your issues.

832
00:46:26,664 --> 00:46:27,664
All right, we'll talk later.

833
00:46:27,905 --> 00:46:28,065
Sure.

834
00:46:30,508 --> 00:46:30,988
Cyril.

835
00:46:31,568 --> 00:46:32,129
Sorry, hi.

836
00:46:34,010 --> 00:46:36,331
I have to apologize for my English first.

837
00:46:36,872 --> 00:46:39,893
Sorry.

838
00:46:39,933 --> 00:46:41,654
Two new questions.

839
00:46:42,055 --> 00:46:46,717
What's the standard resolution of your textures in the game?

840
00:46:49,459 --> 00:46:50,179
Well, that varies.

841
00:46:50,239 --> 00:46:53,021
Depends on the project and what we need it for.

842
00:46:53,862 --> 00:46:56,783
Most of our materials, we cap them at 1024.

843
00:46:58,718 --> 00:47:05,067
that's what we've gone for. But when it came to memory management and stuff like that, we

844
00:47:05,087 --> 00:47:11,215
would have to bump them down to 512 or et cetera. And sometimes the quality was enough at

845
00:47:11,255 --> 00:47:15,260
512. But our standards stayed at mostly 1024s.

846
00:47:17,187 --> 00:47:31,679
and you can generate them at upper resolution because of substance. Each time if you want to make more HD textures, you just have to switch parameters. There is another... you know what I mean?

847
00:47:31,799 --> 00:47:32,980
Oh, you mean like runtime?

848
00:47:33,641 --> 00:47:38,245
Not runtime. If you want to... in the next Uncharted, if you want to use...

849
00:47:39,026 --> 00:47:46,031
I don't know, on the PS5 you want to reuse all these materials because it's a very big problem.

850
00:47:46,251 --> 00:47:51,315
You have to rebuild all your materials each time you switch your game.

851
00:47:51,776 --> 00:47:57,000
And now you can make a material and then use it during five years, six years.

852
00:47:57,640 --> 00:48:03,425
It's not deprecated because you can regenerate it with a better resolution.

853
00:48:03,765 --> 00:48:08,889
Yes, I mean that's really the deepest core that we don't even understand.

854
00:48:08,909 --> 00:48:12,012
That's like the future of substance.

855
00:48:12,432 --> 00:48:17,816
That's a good question because we currently don't know how much it's going to expand.

856
00:48:17,876 --> 00:48:21,138
I mean the tools that we're making now just keep on growing.

857
00:48:23,604 --> 00:48:25,126
It's predictable that we're going

858
00:48:25,146 --> 00:48:27,267
to use many of these tools and our textures

859
00:48:28,308 --> 00:48:29,469
into the next game.

860
00:48:30,931 --> 00:48:31,771
And that's.

861
00:48:32,132 --> 00:48:34,094
And just because you mentioned one,

862
00:48:34,214 --> 00:48:38,858
World Machine, it's a software I used a lot, and I love this.

863
00:48:39,158 --> 00:48:41,961
But it's very close to Substance Designer.

864
00:48:42,721 --> 00:48:48,142
Finally, there is a fabulous blog called Erosion to make

865
00:48:48,182 --> 00:48:48,563
turrents.

866
00:48:48,983 --> 00:48:52,323
And I was many times asking to myself

867
00:48:52,484 --> 00:48:57,025
if I have to rebuild it in Substance Designer

868
00:48:57,125 --> 00:48:59,485
to not use the world machine anymore.

869
00:49:00,025 --> 00:49:04,647
Did you try to replace softwares with Substance Designers?

870
00:49:05,267 --> 00:49:08,568
I actually, it's funny because I actually did a test.

871
00:49:09,540 --> 00:49:17,243
very early on. Yes, you could. I don't think we went there

872
00:49:17,303 --> 00:49:21,845
because it wasn't practical and why remake the wheel if it's

873
00:49:21,885 --> 00:49:25,407
already done well for that example. Even though I got a

874
00:49:25,447 --> 00:49:28,889
really cool result from it and I was very proud of that initial

875
00:49:28,949 --> 00:49:33,791
node, it was a terrain node that could have expanded into

876
00:49:33,811 --> 00:49:37,073
something more but at the end the world machine did an amazing

877
00:49:37,093 --> 00:49:38,993
job for us and that's why we stayed with it.

878
00:49:39,575 --> 00:49:41,296
Okay. Thank you very much.

879
00:49:43,637 --> 00:49:47,578
Hey, so my question is for your foliage in world, did you guys

880
00:49:47,678 --> 00:49:49,338
use substance for that or was that a more traditional

881
00:49:49,358 --> 00:49:49,738
workflow?

882
00:49:52,039 --> 00:49:55,320
That's a separate workflow. I'm almost wondering, I don't want

883
00:49:55,340 --> 00:49:58,161
to say too much about it because the people that worked on it are

884
00:49:58,201 --> 00:50:00,842
extremely talented. I almost want to leave that information

885
00:50:00,902 --> 00:50:05,663
for them. But there was some foliage that did use substance

886
00:50:06,363 --> 00:50:07,564
and some of them used a

887
00:50:09,295 --> 00:50:13,318
different work flow that's not necessarily see brush either. So

888
00:50:13,599 --> 00:50:15,720
I kind of want to leave that to those artists. Okay. Fair

889
00:50:15,740 --> 00:50:20,784
enough. Thanks. What's up, guys? I guess I sort of have a

890
00:50:20,864 --> 00:50:25,608
related question. And I'm just curious if did any of these

891
00:50:25,628 --> 00:50:29,671
like procedural texturing stuff with substance, the libraries,

892
00:50:29,991 --> 00:50:32,493
did that affect your character art at all? Did that

893
00:50:33,612 --> 00:50:35,274
or effects for that part of the team?

894
00:50:35,794 --> 00:50:38,676
So your question was did the libraries and the workflow,

895
00:50:38,696 --> 00:50:40,498
did that go into the character department?

896
00:50:40,918 --> 00:50:42,979
Yeah, did the character guys use it?

897
00:50:43,140 --> 00:50:44,240
I'm supposed to repeat the question?

898
00:50:45,141 --> 00:50:49,524
So it did, but to a different extent.

899
00:50:49,825 --> 00:50:53,007
And Ro kind of touched on this with the foliage.

900
00:50:53,307 --> 00:50:55,369
There was a lot of different pipelines

901
00:50:55,889 --> 00:50:57,350
within the art department that were

902
00:50:57,370 --> 00:50:58,812
being developed in parallel.

903
00:50:58,852 --> 00:51:02,294
So what we covered is largely background and prop related.

904
00:51:03,355 --> 00:51:08,637
And the character needs, while they're conceptually similar, are very different in a number of

905
00:51:08,697 --> 00:51:09,217
respects.

906
00:51:09,758 --> 00:51:13,819
They actually ended up going more toward painter as soon as that was released because it's

907
00:51:14,100 --> 00:51:18,802
just a much more fluid, artist-controlled program for their type of work.

908
00:51:19,722 --> 00:51:24,644
But that isn't to say that designer still has a very real use in the content management

909
00:51:24,684 --> 00:51:29,046
side of things and the baking, and I would like to see more of that for sure.

910
00:51:33,917 --> 00:51:41,643
Hi, I'm interested to know if you've got say a metal shader in Substance and one day you go,

911
00:51:41,663 --> 00:51:49,969
we want that to be more shiny and you've got shed loads of materials using it.

912
00:51:50,069 --> 00:51:55,654
If you've got some kind of workflow that can change everything that's using that metal

913
00:51:55,734 --> 00:51:58,356
to be more shiny and get it into your editor.

914
00:51:59,078 --> 00:52:04,462
So your question was how do we propagate changes to everything

915
00:52:04,502 --> 00:52:06,663
in the editor if we're using the source.

916
00:52:06,743 --> 00:52:07,304
Is that correct?

917
00:52:07,364 --> 00:52:08,324
Yeah.

918
00:52:09,665 --> 00:52:10,246
Brute force.

919
00:52:11,365 --> 00:52:12,647
And many, many times.

920
00:52:13,608 --> 00:52:16,171
And it sounds bad, but the reality

921
00:52:16,371 --> 00:52:19,535
is that we did standardize a lot of things.

922
00:52:19,595 --> 00:52:21,578
But oftentimes when you get into the game environment,

923
00:52:22,179 --> 00:52:25,082
lighting conditions, g-buffer precision, you name it,

924
00:52:25,122 --> 00:52:28,166
there's a number of things that just create different results.

925
00:52:30,089 --> 00:52:32,570
And it was easy in a lot of respects to go back

926
00:52:32,610 --> 00:52:36,092
to the substance package, re-export a modified output,

927
00:52:36,132 --> 00:52:37,032
and you're good to go.

928
00:52:37,532 --> 00:52:41,734
Or we could also override things in our proprietary shader

929
00:52:41,814 --> 00:52:42,375
editor too.

930
00:52:43,015 --> 00:52:47,757
So both of those methods proved to be really flexible

931
00:52:47,797 --> 00:52:49,738
at the end when you're really polishing.

932
00:52:50,619 --> 00:52:50,839
Right.

933
00:52:50,999 --> 00:52:53,800
To add to that, we do have an inherited base,

934
00:52:53,861 --> 00:52:56,242
the layering process in our shader system.

935
00:52:56,302 --> 00:52:59,003
So if we were to take that one metal material

936
00:52:59,023 --> 00:52:59,083
and

937
00:53:00,491 --> 00:53:07,537
inherited into another material, then it doesn't break the

938
00:53:07,577 --> 00:53:09,899
information, the information goes with it, but it doesn't

939
00:53:09,939 --> 00:53:14,183
affect the hierarchy of the main material. So I'm able to change

940
00:53:14,223 --> 00:53:20,468
that metal and make it less shiny in that layer that's been

941
00:53:20,528 --> 00:53:25,773
put in. So that would help in some of those situations in our

942
00:53:25,793 --> 00:53:26,173
pipeline.

943
00:53:27,794 --> 00:53:27,915
Hi.

944
00:53:28,468 --> 00:53:33,250
Hi. So, in the way to build the library of materials,

945
00:53:34,370 --> 00:53:37,032
did you use a real reference with a character,

946
00:53:37,592 --> 00:53:42,714
or have you a more artistic way about the look of the materials?

947
00:53:44,667 --> 00:53:46,109
I'm sorry, can you repeat the question?

948
00:53:46,149 --> 00:53:48,011
Did you use references, like real life references,

949
00:53:48,472 --> 00:53:49,654
for coming up with the materials?

950
00:53:49,934 --> 00:53:51,897
Yeah, you know, I actually cut those slides out.

951
00:53:51,917 --> 00:53:53,519
What is the start of your materials?

952
00:53:53,940 --> 00:53:57,084
Is it a physical reference of a reality,

953
00:53:57,565 --> 00:54:00,709
or is it more a vision of an artistic way?

954
00:54:01,597 --> 00:54:02,898
It's actually a little bit of both.

955
00:54:02,958 --> 00:54:04,419
We started with a lot of data.

956
00:54:04,559 --> 00:54:05,960
In fact, we went out and we captured

957
00:54:05,980 --> 00:54:08,361
a lot of color calibrated photo reference

958
00:54:08,381 --> 00:54:10,162
to try to get accurate albedos.

959
00:54:11,023 --> 00:54:15,926
A lot of material presets for different shellac and paints.

960
00:54:15,986 --> 00:54:18,347
And I could nerd out on that stuff all the time.

961
00:54:18,387 --> 00:54:20,569
At the end of the day, it wasn't getting the game done.

962
00:54:21,029 --> 00:54:23,010
And ultimately, it came down to just

963
00:54:24,142 --> 00:54:28,543
let's just make tools that allow people to make awesome art.

964
00:54:28,863 --> 00:54:30,003
And ultimately, that's what we did.

965
00:54:30,183 --> 00:54:32,744
We had that data and reference to fall back on.

966
00:54:33,544 --> 00:54:37,685
But for artistic control and also game limitations,

967
00:54:39,245 --> 00:54:41,926
we relied heavily on just our intuition and eye.

968
00:54:43,886 --> 00:54:45,447
Yeah, nothing to add on that.

969
00:54:45,507 --> 00:54:46,427
It's basically that.

970
00:54:48,887 --> 00:54:51,428
Well, the conclusion is that you can do ugly stuff

971
00:54:51,548 --> 00:54:52,788
with Substance Designer as well.

972
00:54:54,314 --> 00:54:56,055
It's a very capable tool for this as well.

973
00:54:56,435 --> 00:54:57,376
Not a joke.

974
00:54:57,416 --> 00:54:59,016
Just ask me to do something, for instance.

975
00:55:01,258 --> 00:55:01,678
Hey, guys.

976
00:55:01,838 --> 00:55:03,879
I know that your style is pretty stylized

977
00:55:03,939 --> 00:55:06,260
and that you do a lot of your detail sculpting first

978
00:55:06,320 --> 00:55:08,181
in ZBrush before you actually texture it.

979
00:55:08,581 --> 00:55:11,122
Did you find yourself having to compromise on your style

980
00:55:11,162 --> 00:55:13,423
so that you could keep the efficiency of Substance

981
00:55:13,463 --> 00:55:15,364
Designer when you try to make the change?

982
00:55:15,424 --> 00:55:18,026
Or could you still do your style in Substance Designer?

983
00:55:19,647 --> 00:55:21,287
That's an interesting question.

984
00:55:21,327 --> 00:55:21,908
I mean, it's a.

985
00:55:24,018 --> 00:55:27,359
With ZBrush and changing, well, that's the thing.

986
00:55:28,180 --> 00:55:30,561
Not everybody changed entirely to Substance Designer.

987
00:55:31,061 --> 00:55:35,724
Our workflow is very open, and we enjoy seeing

988
00:55:35,964 --> 00:55:38,025
what the artists can put, because we have amazing artists,

989
00:55:38,505 --> 00:55:41,267
and many have different techniques.

990
00:55:41,927 --> 00:55:44,608
And Substance being almost like a hub system,

991
00:55:44,748 --> 00:55:48,390
where everything eventually will get to Substance,

992
00:55:48,530 --> 00:55:52,473
to get into our engine, is part of it.

993
00:55:53,860 --> 00:55:59,825
Yes, being in a stylistic game, we realized that we needed to test it further.

994
00:55:59,945 --> 00:56:04,468
And as we tested it, obviously now at this point, we're very happy with the results.

995
00:56:04,889 --> 00:56:13,236
We were able to get that painterly look within substance and almost eliminate the sense that these materials look procedural.

996
00:56:14,096 --> 00:56:16,919
And that was quite a challenge initially, sure.

997
00:56:16,979 --> 00:56:20,181
The learning curve, not all the texture artists had.

998
00:56:21,164 --> 00:56:22,806
and have gotten to that point.

999
00:56:24,168 --> 00:56:25,611
There's still many texture artists

1000
00:56:25,631 --> 00:56:27,794
that go through the ZBrush workflow

1001
00:56:27,874 --> 00:56:29,757
and then finish it off in Substance.

1002
00:56:31,404 --> 00:56:33,046
I'll add one small thing to that, too.

1003
00:56:33,206 --> 00:56:35,608
And that's when it came to the library nodes,

1004
00:56:35,628 --> 00:56:38,531
that's really why it was important to focus

1005
00:56:38,591 --> 00:56:40,212
on what our core workflow was.

1006
00:56:40,633 --> 00:56:44,576
So instead of creating like a make this thing painterly node,

1007
00:56:45,017 --> 00:56:47,039
it was here's a color scheme generator.

1008
00:56:47,459 --> 00:56:53,264
Here's like an oil wash and like a direct opaque painting

1009
00:56:53,344 --> 00:56:54,265
layer.

1010
00:56:54,545 --> 00:56:56,027
It's very traditionally based.

1011
00:56:56,747 --> 00:56:59,928
and it was really derived from existing workflows.

1012
00:56:59,948 --> 00:57:01,869
So it felt like a natural transition.

1013
00:57:02,109 --> 00:57:03,530
That was really kind of the goal.

1014
00:57:03,550 --> 00:57:06,171
Right, thank you.

1015
00:57:06,791 --> 00:57:07,111
Thank you.

1016
00:57:09,672 --> 00:57:10,212
More questions?

1017
00:57:11,313 --> 00:57:11,933
All right, one more.

1018
00:57:14,834 --> 00:57:14,974
Hi.

1019
00:57:16,201 --> 00:57:19,022
So I'm a modeler, and I have some questions

1020
00:57:19,062 --> 00:57:22,464
about how you handle smoothing groups while you're

1021
00:57:22,484 --> 00:57:24,125
texturing with substance.

1022
00:57:25,225 --> 00:57:26,746
Something I get stuck with a lot is

1023
00:57:27,467 --> 00:57:29,148
using either one smoothing group for models

1024
00:57:29,468 --> 00:57:31,129
or multiple smoothing groups.

1025
00:57:31,849 --> 00:57:33,330
I was wondering how you guys deal with that,

1026
00:57:35,931 --> 00:57:38,673
when you use one smoothing group and when you use multiple.

1027
00:57:40,134 --> 00:57:42,737
your question is about how we handle smoothing groups. I

1028
00:57:43,158 --> 00:57:47,262
assume you're using 3D max? I can't weigh in on that.

1029
00:57:47,703 --> 00:57:53,009
Well, I haven't used max in a long time. You're talking about

1030
00:57:53,049 --> 00:57:55,692
the baking as well. So, you know, I can't weigh in on that.

1031
00:57:56,423 --> 00:58:01,707
you've got to make sure that the tools are in line with each other. What we did in studios

1032
00:58:01,847 --> 00:58:07,892
is we used Maya. So we made sure with various tests that Brad and I and many other artists

1033
00:58:07,932 --> 00:58:13,697
did is to try to find the gotchas of getting a good normal map fake.

1034
00:58:14,678 --> 00:58:18,321
and that was the situation that was really kind of in pre-pro.

1035
00:58:18,862 --> 00:58:25,748
And once we figured that out, that same workflow, step-by-step, was sent to the outsourcing team,

1036
00:58:25,868 --> 00:58:28,030
and obviously we have it in-house as well.

1037
00:58:28,651 --> 00:58:30,673
And that will be the most important thing, too.

1038
00:58:31,113 --> 00:58:34,176
If you're trying to get substance into your workflow,

1039
00:58:34,196 --> 00:58:37,399
make sure that the tools are talking to each other early on.

1040
00:58:37,759 --> 00:58:39,361
That way there's no surprises.

1041
00:58:40,604 --> 00:58:45,386
I use like, I watch a lot of the tutorials, algorithmic, which are great by the way.

1042
00:58:46,106 --> 00:58:51,628
And they kind of teach that like, one of the models they use is one entire swimming group.

1043
00:58:51,848 --> 00:58:54,169
And that works out for a lot of my models.

1044
00:58:54,989 --> 00:59:01,632
But I was wondering when you, when you decide a model doesn't have to be one swimming group

1045
00:59:01,932 --> 00:59:06,354
because the normals will get weird, the normal net for instance.

1046
00:59:08,578 --> 00:59:14,646
clarify anything of that? Maybe Jeremy who is here. Maybe you can answer. Come up. Jeremy,

1047
00:59:15,367 --> 00:59:21,995
he's the guy. He's the guy. He's the guy. He's the guy. He's the guy. He's the guy. He's the

1048
00:59:23,866 --> 00:59:27,067
We spent a lot of time at Naughty Dog.

1049
00:59:27,127 --> 00:59:29,768
But I'm a previous Maxi user, so I can actually answer that.

1050
00:59:30,808 --> 00:59:34,209
So it really depends on your preferences

1051
00:59:34,829 --> 00:59:36,110
and on the type of model you're using.

1052
00:59:36,170 --> 00:59:37,410
If you're doing something organic,

1053
00:59:38,090 --> 00:59:39,871
usually one smoothing group for everything is fine.

1054
00:59:40,271 --> 00:59:43,452
Because even if you have some messy gradients

1055
00:59:43,472 --> 00:59:46,213
on your normal map, it won't show in the game.

1056
00:59:46,693 --> 00:59:48,133
As soon as you're doing hard surface stuff,

1057
00:59:49,373 --> 00:59:51,654
you may want to do actually hard edges

1058
00:59:51,734 --> 00:59:53,075
and kind of split things up.

1059
00:59:54,535 --> 00:59:56,237
Especially when you're using, for example,

1060
00:59:56,357 --> 00:59:57,578
math generators, that kind of thing,

1061
00:59:57,598 --> 00:59:58,918
that are based on the normal map.

1062
00:59:58,939 --> 01:00:00,460
They will interpret the normal map

1063
01:00:00,480 --> 01:00:01,620
to create a mask, for example.

1064
01:00:02,241 --> 01:00:04,763
If you get too many gradients on your normal map,

1065
01:00:05,143 --> 01:00:07,865
did that just account for the smoothing errors?

1066
01:00:08,545 --> 01:00:11,267
Then your math generators may get you some weird results.

1067
01:00:12,328 --> 01:00:14,510
So it's really up to you to see what type of assets

1068
01:00:14,530 --> 01:00:15,110
you're generating.

1069
01:00:15,551 --> 01:00:18,012
Do you see any artifacts with your current method

1070
01:00:18,052 --> 01:00:19,714
and adjust as you go?

1071
01:00:20,454 --> 01:00:22,916
There's really no absolute rule about it.

1072
01:00:24,911 --> 01:00:29,013
learning a lot. Yeah, it's really like learn as you go.

1073
01:00:29,973 --> 01:00:33,674
There is no easy answer to that. I got one more question.

1074
01:00:33,734 --> 01:00:36,655
Actually, sorry. Before we get to our question, there is

1075
01:00:36,735 --> 01:00:39,275
actually, if you guys are familiar with poly count,

1076
01:00:39,295 --> 01:00:42,776
there is a wiki there that shows a lot of different baking

1077
01:00:42,816 --> 01:00:46,638
techniques and it also shows a lot of great tips on how to bake

1078
01:00:46,898 --> 01:00:47,318
in general.

1079
01:00:48,307 --> 01:00:51,029
So it might be one thing that you might want to look into is

1080
01:00:51,129 --> 01:00:55,171
polycount.com and they have a wiki and right there they have

1081
01:00:55,232 --> 01:01:00,315
many pages with many amazing artists dealing with this issue

1082
01:01:00,355 --> 01:01:02,777
and they might actually have that information for you right

1083
01:01:02,797 --> 01:01:02,957
there.

1084
01:01:03,457 --> 01:01:03,897
That's a good one.

1085
01:01:04,898 --> 01:01:07,920
So my second question was did I understand correctly that you

1086
01:01:08,060 --> 01:01:10,862
only get height maps out of ZBrush or also normal maps?

1087
01:01:12,943 --> 01:01:13,564
Excuse me.

1088
01:01:16,521 --> 01:01:21,124
I personally, these days, I actually just export 3D models

1089
01:01:21,184 --> 01:01:21,824
out of ZBrush.

1090
01:01:22,605 --> 01:01:25,007
So tiling textures and props for me

1091
01:01:25,047 --> 01:01:26,648
are completely baked in Designer,

1092
01:01:27,168 --> 01:01:29,310
just because of the type of maps that I can output there.

1093
01:01:29,530 --> 01:01:31,011
And it's a much more flexible workflow.

1094
01:01:32,992 --> 01:01:33,273
Thanks.

1095
01:01:35,054 --> 01:01:35,534
That's gone.

1096
01:01:36,495 --> 01:01:36,875
Good one.

1097
01:01:39,377 --> 01:01:42,099
Maybe I have a simple question or a request.

1098
01:01:42,794 --> 01:01:45,416
Since you're creating the geometry typically

1099
01:01:45,436 --> 01:01:47,979
like coming from ZBrush, that's obj,

1100
01:01:48,720 --> 01:01:50,802
and then we're adding the substance for the material,

1101
01:01:50,842 --> 01:01:54,306
why don't you come up with a file format for simple shapes

1102
01:01:54,686 --> 01:01:56,328
with their material, and we're done with that?

1103
01:01:56,848 --> 01:01:57,209
Thank you.

1104
01:02:00,412 --> 01:02:01,333
I like that idea.

1105
01:02:01,674 --> 01:02:01,934
Yes.

1106
01:02:03,576 --> 01:02:03,896
All right.

1107
01:02:05,106 --> 01:02:05,246
Hi.

1108
01:02:05,766 --> 01:02:07,967
So I was just wondering if did you guys

1109
01:02:08,007 --> 01:02:12,428
get to try using photogrammetry into your texture pipeline?

1110
01:02:12,948 --> 01:02:14,769
And if you did, how effective was it?

1111
01:02:17,749 --> 01:02:21,150
I know in our pre-pro, we then tested out.

1112
01:02:22,251 --> 01:02:22,931
We looked at it.

1113
01:02:23,691 --> 01:02:31,073
And I think when it comes to Naughty Dog's artistic technique

1114
01:02:31,173 --> 01:02:33,333
for how we arrived to these textures.

1115
01:02:33,878 --> 01:02:41,860
and a painterly approach, and especially the type of environments we make, these materials

1116
01:02:41,900 --> 01:02:48,301
are not easily found. A lot of these materials are things that you probably won't even see

1117
01:02:48,341 --> 01:02:53,442
in the actual world, so it becomes harder and harder if you're going to approach, especially

1118
01:02:53,462 --> 01:03:00,563
with stylistic games. But there is a lot to gather from that. I mean, there's many amazing

1119
01:03:00,583 --> 01:03:01,483
games that have done it.

1120
01:03:03,001 --> 01:03:05,762
have mentioned it and it's something to look into in the

1121
01:03:05,822 --> 01:03:06,462
future for sure.

1122
01:03:07,922 --> 01:03:11,404
It really is a labor of love and that was one thing we really

1123
01:03:11,444 --> 01:03:18,086
wanted to stay true to is just the artistry behind not only the

1124
01:03:18,166 --> 01:03:22,528
tech but ultimately that hand painted, hand sculpted feel. So

1125
01:03:22,568 --> 01:03:23,708
we wanted to stay true to that.

1126
01:03:23,728 --> 01:03:27,129
One more question.

1127
01:03:27,149 --> 01:03:28,450
We don't have no more questions. Sorry.

1128
01:03:33,479 --> 01:03:33,780
Thank you.

1129
01:03:34,122 --> 01:03:34,383
Thank you.

1130
01:03:34,524 --> 01:03:34,986
Well, thank you.

1131
01:03:35,187 --> 01:03:35,690
Sam, come on.

1132
01:03:35,871 --> 01:03:36,072
Sorry.

1133
01:03:36,092 --> 01:03:36,373
Thank you.

