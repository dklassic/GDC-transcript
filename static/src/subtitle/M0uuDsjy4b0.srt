1
00:00:08,317 --> 00:00:10,923
Hello, this session is called Taming the Chaos.

2
00:00:10,923 --> 00:00:14,310
It's about creating sustainable pace to development

3
00:00:14,310 --> 00:00:17,096
without sacrificing innovation and creativity.

4
00:00:17,875 --> 00:00:20,036
So a little bit of introduction here.

5
00:00:20,036 --> 00:00:23,899
This session was helped along by a friend of mine

6
00:00:23,899 --> 00:00:25,561
called Grant Schankweiler,

7
00:00:25,561 --> 00:00:28,002
who's also the co-author of a book called Gear Up,

8
00:00:28,002 --> 00:00:31,445
which is a collected set of over a hundred practices

9
00:00:31,445 --> 00:00:34,868
that we put together from our experiences

10
00:00:34,868 --> 00:00:37,289
and experiences of a number of game developers

11
00:00:37,289 --> 00:00:40,412
around the industry and applying agile to game development.

12
00:00:40,412 --> 00:00:42,233
Also mentioned the second edition of my book,

13
00:00:42,233 --> 00:00:43,494
Agile Game Development,

14
00:00:43,494 --> 00:00:45,075
should be out by the time you see this.

15
00:00:46,303 --> 00:00:47,744
All right, so let's dive in here.

16
00:00:47,744 --> 00:00:49,164
Let's talk about this session.

17
00:00:49,164 --> 00:00:51,946
So we're talking about chaos

18
00:00:51,946 --> 00:00:55,427
and chaos is really just a disorder and confusion.

19
00:00:55,427 --> 00:00:58,529
Not necessarily complete, but it's...

20
00:00:59,499 --> 00:01:03,282
kind of the chaotic things that we go through

21
00:01:03,282 --> 00:01:04,043
in game development.

22
00:01:04,043 --> 00:01:08,147
Now, the thing is that chaos is often necessary

23
00:01:08,147 --> 00:01:09,988
in game development where we're exploring,

24
00:01:09,988 --> 00:01:13,131
finding the fun and discovering new things

25
00:01:13,131 --> 00:01:16,394
that might disrupt our plan of developing a game.

26
00:01:16,394 --> 00:01:18,696
So what we want to do is tame that,

27
00:01:18,696 --> 00:01:23,480
is like make it less powerful and easier to control.

28
00:01:24,198 --> 00:01:25,460
And there's some reasons for that.

29
00:01:25,460 --> 00:01:30,867
And some of the primary reasons is that we want to avoid

30
00:01:30,867 --> 00:01:32,469
the crunch, the death marches

31
00:01:32,469 --> 00:01:36,675
that commonly occur in game development.

32
00:01:36,675 --> 00:01:38,958
When chaos comes at the end of development,

33
00:01:38,958 --> 00:01:41,601
we're trying to get something out for a critical ship date.

34
00:01:41,917 --> 00:01:47,902
Also to reduce and eliminate the waste. A lot of times we're in a rush, we make content,

35
00:01:47,902 --> 00:01:53,526
we make characters, long before we really know what we want to do inside of those levels or

36
00:01:53,526 --> 00:01:58,571
with those characters. And I've been on games where we've thrown away probably about 50%

37
00:01:58,571 --> 00:02:03,935
of the content we created because we created it far too soon.

38
00:02:04,836 --> 00:02:05,997
to avoid making bad games.

39
00:02:05,997 --> 00:02:08,180
And there's plenty of examples where chaos

40
00:02:08,180 --> 00:02:10,102
at the end of the game makes us compromise

41
00:02:10,102 --> 00:02:14,847
or drop key features just to get something out the door

42
00:02:14,847 --> 00:02:17,971
that is not fun, something that we're not proud of,

43
00:02:17,971 --> 00:02:20,954
or that we just release something

44
00:02:20,954 --> 00:02:23,637
that just doesn't meet its business goals.

45
00:02:23,637 --> 00:02:24,918
I mean, we are a business.

46
00:02:25,491 --> 00:02:28,373
We wanna release games that, you know,

47
00:02:28,373 --> 00:02:30,315
allow us to sustain that business,

48
00:02:30,315 --> 00:02:32,717
to make a little bit of profit,

49
00:02:32,717 --> 00:02:34,999
so we can continue doing what we love.

50
00:02:34,999 --> 00:02:37,101
But speaking of what we love,

51
00:02:37,101 --> 00:02:40,824
I think one of the major problems that I see,

52
00:02:40,824 --> 00:02:43,746
and I personally experienced is just burnout.

53
00:02:43,746 --> 00:02:47,470
Really, as a project manager, after three months of crunch,

54
00:02:47,819 --> 00:02:51,441
It turned me into from being an enthusiastic game developer

55
00:02:51,441 --> 00:02:52,282
into a risk avoider.

56
00:02:52,282 --> 00:02:56,664
You know, someone that I didn't wanna take chances

57
00:02:56,664 --> 00:02:59,286
by trying something that potentially could be fun.

58
00:02:59,286 --> 00:03:03,329
I started managing based on hitting a goal,

59
00:03:03,329 --> 00:03:04,970
hitting a ship date,

60
00:03:04,970 --> 00:03:10,694
meeting the specifications of a plan or cost limitations.

61
00:03:10,694 --> 00:03:13,896
And what it turned me into was really just someone

62
00:03:13,896 --> 00:03:16,398
who looked for a cookbook.

63
00:03:17,152 --> 00:03:20,773
Something that allowed game development to be

64
00:03:20,773 --> 00:03:22,793
something that we could control

65
00:03:22,793 --> 00:03:24,374
and something that would be simple.

66
00:03:24,374 --> 00:03:25,934
And there really is no cookbook.

67
00:03:25,934 --> 00:03:30,836
But it turned me and many other project managers

68
00:03:30,836 --> 00:03:35,237
into someone who focused on the project itself,

69
00:03:35,237 --> 00:03:37,598
as I mentioned, the goals of the project,

70
00:03:37,598 --> 00:03:38,779
rather than the game,

71
00:03:38,779 --> 00:03:40,699
rather than what the game is telling us.

72
00:03:40,699 --> 00:03:44,160
And it also turned me into a C-goal manager.

73
00:03:44,974 --> 00:03:49,176
And if you're not familiar with the term, a CGO manager is someone who flies in,

74
00:03:49,176 --> 00:03:54,418
craps over everything and flies away. And I was doing that to kind of keep people in,

75
00:03:54,418 --> 00:03:59,119
keep things into control. Say, hey, don't try that. That's not part of the plan. I don't care

76
00:03:59,119 --> 00:04:06,182
how fun you might think it is. We're not going to get paid for that. And so I want to talk about,

77
00:04:06,182 --> 00:04:13,565
I want to talk about avoiding that and focusing really on things to avoid that uncontrollable

78
00:04:13,565 --> 00:04:13,885
chaos.

79
00:04:15,211 --> 00:04:24,200
So one of the things I want to mention getting into this is some or maybe all of this might not be possible for your culture.

80
00:04:24,200 --> 00:04:24,301
And uh

81
00:04:24,301 --> 00:04:24,621
in 2003 I

82
00:04:24,621 --> 00:04:32,649
Read this book that had just come out about Scrum and I took this two-day course from one of the authors

83
00:04:32,649 --> 00:04:34,751
one of the creators of Scrum

84
00:04:35,671 --> 00:04:42,435
And I left that kind of infected with some ideas about things that I wanted to try.

85
00:04:42,435 --> 00:04:46,137
But some of those things weren't possible for my studio, so I tried a few things,

86
00:04:46,137 --> 00:04:51,040
but kind of kept that infection in my head in terms of things that, when I moved to a

87
00:04:51,040 --> 00:04:56,063
different studio or moved to a different part of my career, I could try out in a new organization.

88
00:04:56,772 --> 00:05:00,954
And so there's some ideas in here I want to potentially infect you with,

89
00:05:00,954 --> 00:05:06,536
probably not a great term these days to use, but just to implant some ideas that

90
00:05:06,536 --> 00:05:11,898
you can kind of create your own practices by applying some of this.

91
00:05:11,898 --> 00:05:16,620
So an inspiration for this talk came from this book called Anti-Fragile.

92
00:05:16,620 --> 00:05:21,302
And a very popular book that came out a few years back.

93
00:05:21,302 --> 00:05:25,063
And in this book, he describes three different types of systems.

94
00:05:26,093 --> 00:05:28,536
And the first type of system is called a fragile system.

95
00:05:28,536 --> 00:05:32,860
It's a system that breaks under stress.

96
00:05:32,860 --> 00:05:37,124
And many of us, we made games when we were kids.

97
00:05:37,124 --> 00:05:38,365
We kind of hacked games.

98
00:05:38,365 --> 00:05:40,627
And we didn't really pay attention

99
00:05:40,627 --> 00:05:42,549
to fixing the bugs or things like that,

100
00:05:42,549 --> 00:05:44,111
because that wasn't the exciting part.

101
00:05:44,111 --> 00:05:46,973
And then we found out over time that the game

102
00:05:46,973 --> 00:05:50,257
became more unstable and broke much more easier.

103
00:05:51,389 --> 00:05:54,211
The second system is called a robust system.

104
00:05:54,211 --> 00:05:56,853
It's a system that bears the stress,

105
00:05:56,853 --> 00:05:59,535
but it doesn't break, but it's very fixed.

106
00:05:59,535 --> 00:06:01,497
And this is the system I was describing

107
00:06:01,497 --> 00:06:04,499
as a project manager that I got into to say,

108
00:06:04,499 --> 00:06:06,441
hey, we're gonna go according to plan.

109
00:06:06,441 --> 00:06:09,863
We're not gonna experiment as much.

110
00:06:09,863 --> 00:06:13,186
And it was a robust system,

111
00:06:13,186 --> 00:06:15,968
but it didn't respond to change very well.

112
00:06:15,968 --> 00:06:20,371
And so like risk adverse waterfall is how I describe it.

113
00:06:20,860 --> 00:06:25,941
And then it describes a third system, which is the title of the book called Anti-Fragile.

114
00:06:25,941 --> 00:06:35,784
And it's a system which not only survives stress, but it actually gets stronger under stress and improves under stress.

115
00:06:35,784 --> 00:06:42,085
And what we're going to talk about are these things we call them stressors, things that stress the system.

116
00:06:42,085 --> 00:06:48,467
But I want to look at some of the things that are beneficial stressors, which actually make the system stronger.

117
00:06:48,467 --> 00:06:50,667
So diving into that.

118
00:06:51,100 --> 00:06:59,502
The analogy he uses in the book, which is a great analogy, is working out. So the idea of you go to a

119
00:06:59,502 --> 00:07:05,484
gym is you want to stress out your body to the point where it gets stronger, and there's a range

120
00:07:05,484 --> 00:07:10,985
of stress that you're aiming for. So for example, if you don't go to the gym, it's not like your

121
00:07:10,985 --> 00:07:16,226
body stays the same. It's not a stable system. It actually gets weaker over time if you don't

122
00:07:16,226 --> 00:07:16,887
go to the gym.

123
00:07:17,772 --> 00:07:20,613
And the opposite of that, and as you see this at gyms on the

124
00:07:20,613 --> 00:07:25,734
every January 2nd is a lot of people come in and make their

125
00:07:25,734 --> 00:07:29,895
New Year's resolution to go back to the gym, but then they come

126
00:07:29,895 --> 00:07:32,455
in and they load up too much weight. And they don't realize

127
00:07:32,455 --> 00:07:35,056
that they've gotten weaker by not going to the gym and they

128
00:07:35,056 --> 00:07:38,516
injure themselves. But there's a range of stress that we're

129
00:07:38,516 --> 00:07:41,457
aiming for going to the gym regularly, where you put up

130
00:07:41,457 --> 00:07:45,038
enough weight where you can barely maybe do

131
00:07:45,960 --> 00:07:47,420
you know, eight to 10 repetitions,

132
00:07:47,420 --> 00:07:50,581
and you're actually damaging your body a little bit.

133
00:07:50,581 --> 00:07:52,722
And you give it a day or two off,

134
00:07:52,722 --> 00:07:55,063
your body grows new muscle to get stronger.

135
00:07:55,063 --> 00:07:58,064
And then as those weights become easier,

136
00:07:58,064 --> 00:07:59,785
you actually load up a little bit more,

137
00:07:59,785 --> 00:08:01,725
you add a little bit more stress.

138
00:08:01,725 --> 00:08:05,067
So if you apply this to various areas of game development,

139
00:08:05,067 --> 00:08:08,128
like dealing with bugs,

140
00:08:08,128 --> 00:08:10,749
we could ignore bugs like we did when we were hacking

141
00:08:10,749 --> 00:08:12,209
and let them pile up.

142
00:08:12,635 --> 00:08:18,961
And of course the quality goes down over time and the game gets less fun with more bugs.

143
00:08:18,961 --> 00:08:22,965
Or we can overdo it like we usually do post-alpha and we basically say,

144
00:08:22,965 --> 00:08:25,127
all right, we have 10,000 bugs in our bug database,

145
00:08:25,127 --> 00:08:27,970
let's solve them all and we go into a death march crunch.

146
00:08:29,035 --> 00:08:32,759
And so this beneficial stress or range we're looking at,

147
00:08:32,759 --> 00:08:34,541
you kind of call it continuous improvement.

148
00:08:34,541 --> 00:08:39,025
Not only fix those problems, but find the root cause.

149
00:08:39,025 --> 00:08:41,688
Why did that bug get into our game?

150
00:08:41,688 --> 00:08:45,172
And how can we prevent that type of bug

151
00:08:45,172 --> 00:08:47,114
from getting into our game in the future?

152
00:08:47,114 --> 00:08:49,276
Really, because the best way of solving bugs

153
00:08:49,276 --> 00:08:51,198
is just not to make them in the first place.

154
00:08:52,616 --> 00:08:54,818
So these beneficial stressors,

155
00:08:54,818 --> 00:08:56,339
they actually Googled this and found

156
00:08:56,339 --> 00:08:58,761
there's a word called eustress,

157
00:08:58,761 --> 00:09:00,522
which means a beneficial stress.

158
00:09:00,522 --> 00:09:04,085
So the rest of this talk is going into four different areas

159
00:09:04,085 --> 00:09:08,108
and exploring what are the beneficial stresses,

160
00:09:08,108 --> 00:09:11,531
these eustresses, that we can apply to game development.

161
00:09:13,710 --> 00:09:19,994
So we're going to be building this anti-fragility into four areas as I mentioned, focusing on

162
00:09:19,994 --> 00:09:25,857
outcomes over output, iterating on fun and course correcting rather than following a plan,

163
00:09:25,857 --> 00:09:33,162
embracing risk rather than avoiding it, being proactive about it, managing debt.

164
00:09:33,913 --> 00:09:35,615
And we talked about bugs and things like that,

165
00:09:35,615 --> 00:09:36,455
not only fixing them,

166
00:09:36,455 --> 00:09:40,358
but hardening our process against the reoccurrence of bugs

167
00:09:40,358 --> 00:09:41,458
in the future or defects.

168
00:09:41,458 --> 00:09:44,400
And then building a culture where developers thrive,

169
00:09:44,400 --> 00:09:45,781
where they take more accountability,

170
00:09:45,781 --> 00:09:48,623
they're more creative, they're more engaged in their work.

171
00:09:48,623 --> 00:09:51,304
All right, so let's dive in.

172
00:09:51,304 --> 00:09:55,607
So focusing on outcomes over output.

173
00:09:55,607 --> 00:10:00,210
And the example I use is my experience working

174
00:10:00,210 --> 00:10:01,911
in the game industry at the beginning,

175
00:10:01,911 --> 00:10:03,412
working with Nintendo of Japan.

176
00:10:04,163 --> 00:10:09,167
And the idea with working with Miyamoto directly

177
00:10:09,167 --> 00:10:11,009
was that he would come in,

178
00:10:11,009 --> 00:10:13,351
he would discuss an idea for a game,

179
00:10:13,351 --> 00:10:16,875
and he would give us three months of money

180
00:10:16,875 --> 00:10:18,336
and tell us to go find the fund.

181
00:10:18,336 --> 00:10:20,098
He didn't wanna read any documents,

182
00:10:20,098 --> 00:10:21,399
anything else like that.

183
00:10:21,399 --> 00:10:22,480
He said, you'll find the fund,

184
00:10:22,480 --> 00:10:24,442
I'll be back in three months.

185
00:10:25,338 --> 00:10:26,999
And so this kept going on and on.

186
00:10:26,999 --> 00:10:30,783
And the game we produced with him, if I think about it,

187
00:10:30,783 --> 00:10:33,245
if I think about, hey, when did we find the fun over time?

188
00:10:33,245 --> 00:10:36,347
And you look at this graph, time is on the horizontal axis.

189
00:10:36,347 --> 00:10:41,112
How much fun we knew we had found was on the vertical axis.

190
00:10:41,112 --> 00:10:43,674
And their focus was on finding the fun first,

191
00:10:43,674 --> 00:10:45,936
which is that phrase he used.

192
00:10:45,936 --> 00:10:47,597
And after three months,

193
00:10:47,873 --> 00:10:49,555
If we didn't find the fun, cancel it.

194
00:10:49,555 --> 00:10:52,778
And so that led to a lot of this chaos at the beginning,

195
00:10:52,778 --> 00:10:55,221
which is exploring, throwing things out,

196
00:10:55,221 --> 00:10:58,444
trying different things, and then discovering,

197
00:10:58,444 --> 00:11:00,286
hey, that worked, that didn't work.

198
00:11:00,286 --> 00:11:05,591
And the benefit of that, and Miyamoto had his three Cs.

199
00:11:05,591 --> 00:11:08,013
He said, hey, make sure we get the camera control

200
00:11:08,013 --> 00:11:09,895
and character down before we move forward

201
00:11:09,895 --> 00:11:12,678
with levels and more characters based on those things.

202
00:11:13,631 --> 00:11:16,953
is that we would explore the game.

203
00:11:16,953 --> 00:11:18,834
We'd explore what was fun.

204
00:11:18,834 --> 00:11:19,875
Sometimes you'd come in and say,

205
00:11:19,875 --> 00:11:22,656
hey, that driving game you worked on wasn't that fun.

206
00:11:22,656 --> 00:11:26,218
We didn't find the fun, so let's go do a fantasy golf game.

207
00:11:26,218 --> 00:11:28,740
And so a lot of exploration, a lot of chaos.

208
00:11:28,740 --> 00:11:31,201
And then things would emerge.

209
00:11:31,201 --> 00:11:33,723
We'd build up the basics of camera control and character

210
00:11:33,723 --> 00:11:35,564
and then build upon those things

211
00:11:35,564 --> 00:11:37,945
with various things you can do in the environments

212
00:11:37,945 --> 00:11:39,346
and build up a vocabulary.

213
00:11:40,051 --> 00:11:45,916
and then exploit those things over the course of the game. So example of exploitation

214
00:11:45,916 --> 00:11:51,121
was a different game, a game called Smuggler's Run, which was a launch title for the PlayStation 2.

215
00:11:51,121 --> 00:11:56,706
It was an open world racing game, you're smuggling something. It was a rock star game.

216
00:11:56,706 --> 00:12:00,149
And towards the end of it, we tried something. We said, hey, let's make

217
00:12:00,149 --> 00:12:03,312
this outdoor environment more living. Let's throw deer into it.

218
00:12:04,279 --> 00:12:07,322
And so we put deer just that were running around, very simple,

219
00:12:07,322 --> 00:12:10,184
but it turned out people like that more than racing.

220
00:12:10,184 --> 00:12:14,548
They liked chasing down the deer and running over them or hitting them.

221
00:12:14,548 --> 00:12:18,651
And basically the deer had perfect elasticity and they ragdolled and they'd go over the horizon.

222
00:12:18,651 --> 00:12:23,135
So people were making up games and scoring how many deer they hit, things like that.

223
00:12:23,135 --> 00:12:28,119
That'd be one of the most popular features in the game that didn't require us to

224
00:12:28,119 --> 00:12:33,083
throw out a bunch of things, just take advantage of what we already had inside of the game.

225
00:12:34,490 --> 00:12:38,495
So traditional game development,

226
00:12:38,495 --> 00:12:39,957
waterfall-based development,

227
00:12:39,957 --> 00:12:41,760
you know, we have these different phases of design.

228
00:12:41,760 --> 00:12:43,602
We write a bunch of documents.

229
00:12:43,602 --> 00:12:45,245
We go into pre-production.

230
00:12:45,245 --> 00:12:46,567
We go into content production.

231
00:12:46,567 --> 00:12:47,728
It's all scheduled out,

232
00:12:47,728 --> 00:12:49,651
and then we make the game fun at the end.

233
00:12:50,909 --> 00:12:55,671
through integration and fixing the bugs and making it run an acceptable frame rate,

234
00:12:55,671 --> 00:12:59,954
and then the chaos comes at the end. And the problem with that, obviously, we're running

235
00:12:59,954 --> 00:13:06,257
out of time. We're chopping out key features. An example of that would be a game called Midtown

236
00:13:06,257 --> 00:13:11,019
Madness, where there was a lot of ideas that came in in the end that would have made that game twice

237
00:13:11,019 --> 00:13:16,962
as fun, but we're just trying to fix the bugs. We're given a fixed ship date. So we had to choose

238
00:13:16,962 --> 00:13:17,863
one over the other.

239
00:13:18,819 --> 00:13:22,521
Now this kind of pattern occurs again and again in game development.

240
00:13:22,521 --> 00:13:27,283
And one example of that would be like with Midtown Madness is,

241
00:13:27,283 --> 00:13:31,524
you know, the game was kind of rigged against us in terms of the development game,

242
00:13:31,524 --> 00:13:34,045
the publishing game, is that marketing would ignore us.

243
00:13:34,045 --> 00:13:38,167
They're just not used to seeing anything that's of value of the first 90% of the game.

244
00:13:38,167 --> 00:13:43,229
And then the entire marketing department post-alpha would suddenly pay attention to you.

245
00:13:43,229 --> 00:13:44,450
We call this

246
00:13:44,743 --> 00:13:45,864
the eye of Sauron.

247
00:13:45,864 --> 00:13:47,645
And all of a sudden the eye turns on you

248
00:13:47,645 --> 00:13:50,746
and it's blinding light with a bunch of requests

249
00:13:50,746 --> 00:13:52,186
from marketing to do this.

250
00:13:52,186 --> 00:13:53,727
Oh, can you do that?

251
00:13:53,727 --> 00:13:57,468
And a lot of times we say, no, that's a great idea,

252
00:13:57,468 --> 00:13:58,549
but we just don't have the time.

253
00:13:58,549 --> 00:14:02,850
We're trying to make the game work and get it out the door.

254
00:14:02,850 --> 00:14:05,791
Even worse examples of this in the game industry

255
00:14:05,791 --> 00:14:08,753
is when marketing or the stakeholders

256
00:14:08,753 --> 00:14:10,553
finally see the cinematics of the game.

257
00:14:11,524 --> 00:14:13,346
towards the end and then they say,

258
00:14:13,346 --> 00:14:16,509
no, that's the wrong framing of the cinematics

259
00:14:16,509 --> 00:14:19,632
or we want a different format of cinematics.

260
00:14:19,632 --> 00:14:22,415
Go off and redo all those dozens and dozens of hours

261
00:14:22,415 --> 00:14:23,716
of cinematics that you've spent

262
00:14:23,716 --> 00:14:24,938
the last two years working on.

263
00:14:25,759 --> 00:14:28,861
And there's examples in this particular game of the team

264
00:14:28,861 --> 00:14:32,922
working crunch, working overtime for six months

265
00:14:32,922 --> 00:14:35,343
to do those things, those late requests,

266
00:14:35,343 --> 00:14:38,045
when they could have just seen a simple test animation

267
00:14:38,045 --> 00:14:39,765
early on and given their feedback,

268
00:14:39,765 --> 00:14:42,887
early in development, push that chaos sooner.

269
00:14:42,887 --> 00:14:46,108
So at the end of every area,

270
00:14:46,108 --> 00:14:48,209
I wanna just describe things that you can try

271
00:14:48,209 --> 00:14:50,130
in your own environment for this area.

272
00:14:51,408 --> 00:14:55,430
of outcome, finding the fun, over output, following a plan.

273
00:14:55,430 --> 00:14:58,853
Plans are necessary, but fun is a risk.

274
00:14:58,853 --> 00:15:03,436
Also going to give you a link at the end of this session

275
00:15:03,436 --> 00:15:06,458
to a PDF that contains all these takeaways of things to try

276
00:15:06,458 --> 00:15:08,940
and things that might get in your way.

277
00:15:08,940 --> 00:15:12,482
So things like establishing transparency with your stakeholders,

278
00:15:12,482 --> 00:15:15,344
getting them involved earlier on, avoiding that eye of Sauron

279
00:15:15,344 --> 00:15:17,886
and saying, look at this, give us some feedback,

280
00:15:17,886 --> 00:15:19,387
even if you have to drag them in.

281
00:15:20,035 --> 00:15:23,458
Create a collaborative culture, but give and take on scope.

282
00:15:23,458 --> 00:15:25,359
Don't just accept all their changes to say,

283
00:15:25,359 --> 00:15:27,181
hey, if we're going to add something,

284
00:15:27,181 --> 00:15:29,242
we've got to drop something else.

285
00:15:29,242 --> 00:15:30,523
And grow trust.

286
00:15:30,523 --> 00:15:31,584
That's one of the hardest areas.

287
00:15:31,584 --> 00:15:35,107
We're going to talk later about creating a shippable build

288
00:15:35,107 --> 00:15:36,168
every three months.

289
00:15:36,168 --> 00:15:37,789
We call the magazine demo,

290
00:15:37,789 --> 00:15:39,250
something that could show us the challenge

291
00:15:39,250 --> 00:15:40,691
of getting something out the door

292
00:15:40,691 --> 00:15:43,613
a year or two ahead of time.

293
00:15:43,613 --> 00:15:45,475
And not all late changes are bad.

294
00:15:45,475 --> 00:15:48,837
We want to exploit opportunities that the game gives us.

295
00:15:48,837 --> 00:15:49,758
Now, the Gear Up book.

296
00:15:50,475 --> 00:15:53,558
It talks about various things like tracer bullets,

297
00:15:53,558 --> 00:15:55,821
things that we can experiment with,

298
00:15:55,821 --> 00:15:58,584
do a test version of a level to see

299
00:15:58,584 --> 00:16:01,388
if your game runs well in those levels.

300
00:16:02,281 --> 00:16:05,283
Plenty of barriers to implementing some of these things.

301
00:16:05,283 --> 00:16:07,124
Current contracting patterns don't allow for change.

302
00:16:07,124 --> 00:16:09,705
A lot of middle management that might say,

303
00:16:09,705 --> 00:16:11,466
hey, write the 300 page document.

304
00:16:11,466 --> 00:16:14,548
And where it's like, hey, the stakeholders

305
00:16:14,548 --> 00:16:16,490
like a Miyamoto might not care about the document.

306
00:16:16,490 --> 00:16:18,891
The developers understand that the documents

307
00:16:18,891 --> 00:16:20,532
kind of lie sometimes,

308
00:16:20,532 --> 00:16:24,634
but there's always a middle management layer

309
00:16:24,634 --> 00:16:27,176
that demands that level of detail.

310
00:16:28,166 --> 00:16:31,288
Some stage gate approaches request or require you

311
00:16:31,288 --> 00:16:34,091
to prove a lot of these mechanics in concept

312
00:16:34,091 --> 00:16:36,693
and documentation form ahead of time.

313
00:16:36,693 --> 00:16:38,474
I mentioned to you stressors, these beneficial stressors,

314
00:16:38,474 --> 00:16:42,797
like I said, is getting iterative stakeholder collaboration

315
00:16:42,797 --> 00:16:44,419
on the working game.

316
00:16:44,419 --> 00:16:46,340
Say, bring them in, talk to you,

317
00:16:46,340 --> 00:16:47,961
have them talk to you about

318
00:16:47,961 --> 00:16:49,362
what they're seeing on the screen.

319
00:16:49,362 --> 00:16:51,664
A lot of stakeholders don't understand

320
00:16:51,664 --> 00:16:52,905
that this is a benefit

321
00:16:52,905 --> 00:16:56,208
or getting their attention is a challenge.

322
00:16:56,208 --> 00:16:56,488
All right.

323
00:16:57,088 --> 00:17:03,229
So the second area I want to talk about is embracing risk.

324
00:17:03,229 --> 00:17:06,870
When we talk about risk, you've got to categorize risk.

325
00:17:06,870 --> 00:17:09,210
There's different levels of risk.

326
00:17:09,210 --> 00:17:13,331
I identify four different areas based on things that we know

327
00:17:13,331 --> 00:17:16,332
and things that we don't know, and things

328
00:17:16,332 --> 00:17:18,972
that we know that we know for certain,

329
00:17:18,972 --> 00:17:21,393
and things that we've done in the past,

330
00:17:21,393 --> 00:17:23,373
things that have no risk whatsoever

331
00:17:23,373 --> 00:17:24,753
and have a lot of certainty.

332
00:17:25,330 --> 00:17:29,312
These are things that we can document away. We can plan away.

333
00:17:29,312 --> 00:17:32,813
I don't want to take the pure agile approach of saying don't

334
00:17:32,813 --> 00:17:36,614
plan on anything, don't document anything. Yeah, there's things we can plan for,

335
00:17:36,614 --> 00:17:39,535
things we can document, things that we can be certain about.

336
00:17:39,535 --> 00:17:42,196
Let's not fool ourselves about things that we

337
00:17:43,304 --> 00:17:49,086
know that that we might not know. For example, we're making, there's a, we have to launch our

338
00:17:49,086 --> 00:17:54,108
game on a new platform. There's a new PlayStation coming out. There's a new Xbox. If your game is

339
00:17:54,108 --> 00:17:58,390
coming out on the platform, then there's, you know that there's things you don't know.

340
00:17:59,211 --> 00:18:01,113
And so there's big question marks about that.

341
00:18:01,113 --> 00:18:05,359
It's like, well, you know, Microsoft or Sony tells us

342
00:18:05,359 --> 00:18:08,002
that their platform is going to behave a certain way

343
00:18:08,002 --> 00:18:11,146
and they're going to be really easy and super powerful,

344
00:18:11,146 --> 00:18:13,709
but we really don't know until we get our game running on it.

345
00:18:13,709 --> 00:18:16,272
So what are some of the things we can do ahead of time

346
00:18:16,272 --> 00:18:16,793
to reduce that risk?

347
00:18:17,693 --> 00:18:18,894
But that's not the worst of it,

348
00:18:18,894 --> 00:18:20,895
in terms of uncertainty and risk.

349
00:18:20,895 --> 00:18:23,096
There's things we don't know that we know,

350
00:18:23,096 --> 00:18:24,957
which can kind of sound weird,

351
00:18:24,957 --> 00:18:28,738
but I kind of think of this as that Han Solo moment

352
00:18:28,738 --> 00:18:33,240
when he sees this big moon in the first Star Wars movie,

353
00:18:33,240 --> 00:18:35,862
where he's like, I got a bad feeling about this.

354
00:18:36,172 --> 00:18:37,472
This is more intuition.

355
00:18:37,472 --> 00:18:39,874
These are things that if you go through a number of game

356
00:18:39,874 --> 00:18:42,296
development efforts, there's like things that's like,

357
00:18:42,296 --> 00:18:44,317
hey, I'm not sure what's wrong with this,

358
00:18:44,317 --> 00:18:46,558
but I got a bad feeling about this,

359
00:18:46,558 --> 00:18:48,219
and we should do something about that

360
00:18:48,219 --> 00:18:50,801
to understand how to reduce that risk.

361
00:18:50,801 --> 00:18:55,464
And with tracer bullets, doing experiments before it's time,

362
00:18:55,464 --> 00:18:57,706
before you depend on something.

363
00:18:57,706 --> 00:18:58,646
We'll talk about that.

364
00:18:58,646 --> 00:19:01,048
Unfortunately, there's something even worse than that.

365
00:19:01,048 --> 00:19:02,789
There's things that we don't know that we don't know.

366
00:19:03,477 --> 00:19:07,459
Example for this was we're doing a born-based game

367
00:19:07,459 --> 00:19:09,439
based on the born movies.

368
00:19:09,439 --> 00:19:12,960
And unknown to us, Matt Damon's mom

369
00:19:12,960 --> 00:19:14,441
was an anti-video game crusader.

370
00:19:14,441 --> 00:19:17,162
And so Matt dropped out of the project late in development.

371
00:19:17,162 --> 00:19:20,043
And when he left, all the other actors left

372
00:19:20,043 --> 00:19:23,104
and we had to scramble to find new actors

373
00:19:23,104 --> 00:19:24,664
to take their places.

374
00:19:24,664 --> 00:19:28,626
And so we missed the movie and it had an impact

375
00:19:28,626 --> 00:19:30,146
on the game quality as well

376
00:19:30,146 --> 00:19:32,747
and doing these things late in development.

377
00:19:34,142 --> 00:19:37,323
So the idea is to embrace risk, as I mentioned early on,

378
00:19:37,323 --> 00:19:39,344
and that there's a couple of books,

379
00:19:39,344 --> 00:19:42,105
I'll give you a reference to in that PDF later on,

380
00:19:42,105 --> 00:19:45,846
Waltzing with Bears and Risk Upfront,

381
00:19:45,846 --> 00:19:47,927
which talk about not avoiding risk,

382
00:19:47,927 --> 00:19:49,287
not planning away risk,

383
00:19:49,287 --> 00:19:51,068
but embracing it and doing something about it,

384
00:19:51,068 --> 00:19:53,409
being proactive about it.

385
00:19:53,409 --> 00:19:57,570
And so the process I kind of derive from that

386
00:19:57,570 --> 00:19:58,230
is to first identify risk.

387
00:19:58,230 --> 00:20:01,291
And we start at the beginning of the game and say,

388
00:20:01,291 --> 00:20:01,452
all right.

389
00:20:02,065 --> 00:20:03,526
Let's talk about what could go wrong.

390
00:20:03,526 --> 00:20:05,766
We actually make a game out of it called a premortem.

391
00:20:05,766 --> 00:20:10,027
It's like future postmortem, and talk about all the things

392
00:20:10,027 --> 00:20:10,767
that could go wrong.

393
00:20:10,767 --> 00:20:12,627
And so for example, it's like, hey,

394
00:20:12,627 --> 00:20:14,228
we have a critical launch date.

395
00:20:14,228 --> 00:20:17,648
We're a movie-based game, or we're a sports-based game,

396
00:20:17,648 --> 00:20:19,009
or a launch title.

397
00:20:19,009 --> 00:20:20,869
We have to hit a specific date.

398
00:20:20,869 --> 00:20:25,590
So then our next step is to go into find a root cause.

399
00:20:25,590 --> 00:20:27,550
Let's dive into this a little bit further

400
00:20:27,550 --> 00:20:30,151
and find out what could cause us to miss the critical launch

401
00:20:30,151 --> 00:20:30,231
date.

402
00:20:30,853 --> 00:20:34,474
Well, one thing that happened to us was a key middleware,

403
00:20:34,474 --> 00:20:36,074
a piece of middleware was not ported

404
00:20:36,074 --> 00:20:38,495
to the platform in time.

405
00:20:38,495 --> 00:20:40,675
And so we take that further and say,

406
00:20:40,675 --> 00:20:43,096
when will we know whether this risk is true or not,

407
00:20:43,096 --> 00:20:47,476
whether we're missing this middleware date?

408
00:20:47,476 --> 00:20:49,977
And so we derive some key performance indicators

409
00:20:49,977 --> 00:20:52,978
like to say, hey, if on, I'll buy October 1st.

410
00:20:52,978 --> 00:20:56,138
If this piece of middleware isn't running our game

411
00:20:56,138 --> 00:20:59,179
on this particular platform we're shipping on,

412
00:20:59,693 --> 00:21:01,254
this risk has come true.

413
00:21:01,254 --> 00:21:04,936
And then we say, what are we gonna do about it?

414
00:21:04,936 --> 00:21:06,397
What's our mitigation strategy?

415
00:21:06,397 --> 00:21:09,439
And we can say, well, not gonna be cheap,

416
00:21:09,439 --> 00:21:11,420
but we're gonna buy the source code license

417
00:21:11,420 --> 00:21:14,862
imported ourselves to avoid missing

418
00:21:14,862 --> 00:21:16,203
this critical launch date.

419
00:21:16,203 --> 00:21:19,124
And then we continue this on a regular basis,

420
00:21:19,124 --> 00:21:19,725
every maybe,

421
00:21:20,955 --> 00:21:24,336
a month, three months, we come back and evaluate these,

422
00:21:24,336 --> 00:21:27,217
not only evaluate these triggers, but identify,

423
00:21:27,217 --> 00:21:28,717
has there any new risks emerged

424
00:21:28,717 --> 00:21:30,198
that we didn't identify earlier on

425
00:21:30,198 --> 00:21:32,939
and keep adding to our database?

426
00:21:32,939 --> 00:21:37,340
And then, you know, if October 1st comes around,

427
00:21:37,340 --> 00:21:38,381
is the KPI met?

428
00:21:38,381 --> 00:21:41,162
If not, well, then we have to mitigate.

429
00:21:41,162 --> 00:21:44,143
We have to do something about that.

430
00:21:44,143 --> 00:21:45,923
And going through this, you know,

431
00:21:45,923 --> 00:21:48,044
about 20% of our risks actually came through

432
00:21:48,044 --> 00:21:49,184
and we were able to...

433
00:21:50,280 --> 00:21:56,083
to mitigate many of those risks that we could spot ahead of time.

434
00:21:56,083 --> 00:21:58,204
All right, sum up, things you can try on this.

435
00:21:58,204 --> 00:22:01,226
Obviously, go through this process, which I'll document in the PDF.

436
00:22:01,226 --> 00:22:03,707
Things to try, risk mitigation strategy.

437
00:22:03,707 --> 00:22:04,347
I talked about this.

438
00:22:04,347 --> 00:22:07,489
There's various practices in the gear up book.

439
00:22:07,489 --> 00:22:13,772
The primordium, embracing risk, which describes this flow, risk matrix, things like that.

440
00:22:13,772 --> 00:22:17,293
Plenty of barriers, cultural barriers to this.

441
00:22:18,040 --> 00:22:19,562
A lot of stakeholders don't like hearing

442
00:22:19,562 --> 00:22:20,985
about things that could go wrong.

443
00:22:20,985 --> 00:22:22,627
They just want all the good news.

444
00:22:22,627 --> 00:22:25,792
And they want to plan about how that's not going to happen.

445
00:22:25,792 --> 00:22:28,437
Well, risk means uncertainty.

446
00:22:28,437 --> 00:22:29,859
You can't plan away risk.

447
00:22:29,859 --> 00:22:30,099
And so

448
00:22:31,665 --> 00:22:34,127
Part of this is selling this.

449
00:22:34,127 --> 00:22:38,371
And the key part of selling this is the mitigation plan.

450
00:22:38,371 --> 00:22:39,492
Be proactive about it.

451
00:22:39,492 --> 00:22:41,774
Don't just say, hey, we're scared about this.

452
00:22:41,774 --> 00:22:44,456
Just say, hey, this is something we don't know.

453
00:22:44,456 --> 00:22:45,837
This is how we're gonna identify it.

454
00:22:45,837 --> 00:22:47,278
And this is how we're gonna solve it.

455
00:22:47,278 --> 00:22:49,420
So it's not just a cover your ass document.

456
00:22:49,420 --> 00:22:54,464
This is something that says we're taking charge

457
00:22:54,464 --> 00:22:57,627
of what's potentially going to sink us.

458
00:22:58,003 --> 00:23:01,946
So the eustress is doing this on a regular basis,

459
00:23:01,946 --> 00:23:05,509
embracing this, overcoming the cultural barriers

460
00:23:05,509 --> 00:23:08,852
to saying, hey, let's pay attention to risk.

461
00:23:08,852 --> 00:23:15,098
All right, third one, managing debt.

462
00:23:15,098 --> 00:23:19,061
All right, so debt,

463
00:23:19,061 --> 00:23:20,002
unlike financial debt,

464
00:23:20,772 --> 00:23:22,633
It's something that is whose cost grows over time.

465
00:23:22,633 --> 00:23:24,694
You have an interest rate on financial debt.

466
00:23:24,694 --> 00:23:26,756
The longer you take to pay off a loan,

467
00:23:26,756 --> 00:23:30,798
the more it's going to cost you to pay off that loan.

468
00:23:30,798 --> 00:23:33,540
And so for debt, for game development, bugs.

469
00:23:33,540 --> 00:23:36,102
You know, the longer you push off fixing a bug,

470
00:23:36,102 --> 00:23:39,264
the harder is it going to be to find it.

471
00:23:39,264 --> 00:23:41,886
The harder it is going to be to fix it

472
00:23:41,886 --> 00:23:44,027
because it's not fresh on the mind of the programmer

473
00:23:44,027 --> 00:23:45,228
that created the bug

474
00:23:45,228 --> 00:23:46,909
or somebody else has to find it and fix it.

475
00:23:47,532 --> 00:23:52,115
But that extends to other things like design and content, production.

476
00:23:52,115 --> 00:23:57,599
And I kind of sum all these up in terms of the debt it takes to ship the game

477
00:23:57,599 --> 00:24:03,002
that we usually postpone to post-alpha to get the first version out the door.

478
00:24:03,002 --> 00:24:08,505
And so a lot of agile practices deal with this like defining a definition of done,

479
00:24:08,505 --> 00:24:11,287
knowing when a feature is done and asking that question.

480
00:24:11,875 --> 00:24:12,896
Are we there yet?

481
00:24:12,896 --> 00:24:16,819
Is this shippable or does this reach a level

482
00:24:16,819 --> 00:24:18,120
of definition of done?

483
00:24:18,120 --> 00:24:21,123
And a lot of teams, they evolve that definition over time.

484
00:24:21,123 --> 00:24:24,526
So it could be definition done is like,

485
00:24:24,526 --> 00:24:26,207
hey, it doesn't crash to,

486
00:24:26,207 --> 00:24:29,230
or it passes all internal tests and play tests

487
00:24:29,230 --> 00:24:32,432
that builds up over time with things like test automation

488
00:24:32,432 --> 00:24:34,474
and things like that.

489
00:24:34,474 --> 00:24:37,236
So to look at it, you look at this graph,

490
00:24:37,236 --> 00:24:39,398
the horizontal is time, development time,

491
00:24:39,398 --> 00:24:41,560
and this could be the entire development.

492
00:24:42,115 --> 00:24:47,419
timeline, and to measure debt. I mean, you can measure debt in terms of the number of bugs in

493
00:24:47,419 --> 00:24:52,322
your bug database, which in many cases I've been on games where it's like, hey, we have tens of

494
00:24:52,322 --> 00:24:58,506
thousands of bugs by the time we get to alpha. And I call that the shipping debt. There's content,

495
00:24:58,506 --> 00:25:02,708
technical debt, design debt, all sorts of different type of debt. But this is the stuff

496
00:25:02,708 --> 00:25:07,852
we have to fix before we get the game out the door. And unfortunately, this is where the chaos

497
00:25:07,852 --> 00:25:10,613
occurs. This is where the death march occurs.

498
00:25:11,400 --> 00:25:15,701
laid in the game to really, you know,

499
00:25:15,701 --> 00:25:18,302
get the game out the door

500
00:25:18,302 --> 00:25:21,583
and get it to that point where we can ship it.

501
00:25:21,583 --> 00:25:23,904
Now, not only is it bad on the developers,

502
00:25:23,904 --> 00:25:25,085
it's bad for the game.

503
00:25:25,085 --> 00:25:28,106
We make compromises many times to get the game out the door

504
00:25:28,106 --> 00:25:30,186
because we're simply out of time.

505
00:25:30,186 --> 00:25:32,747
Example, this is a game called Midnight Club.

506
00:25:32,747 --> 00:25:35,288
And in this game, it was a launch title for PlayStation 2,

507
00:25:35,288 --> 00:25:35,908
and we found out that,

508
00:25:35,908 --> 00:25:38,669
hey, we thought in these big, huge,

509
00:25:38,669 --> 00:25:40,990
open city racing environments.

510
00:25:41,472 --> 00:25:44,234
that we could stream in all of our textures for the city.

511
00:25:44,234 --> 00:25:47,136
And it turns out we couldn't do that.

512
00:25:47,136 --> 00:25:50,418
We had to fit all the textures into memory

513
00:25:50,418 --> 00:25:52,259
at one point for the entire city.

514
00:25:52,259 --> 00:25:55,721
And so late in development, we figured this out

515
00:25:55,721 --> 00:25:59,204
and we asked all the artists to trim down their textures.

516
00:25:59,204 --> 00:26:01,325
They weren't able to do it in time.

517
00:26:01,325 --> 00:26:04,187
And so about a week before we submitted the game,

518
00:26:04,187 --> 00:26:07,189
our technical director got frustrated and he went in

519
00:26:07,189 --> 00:26:09,610
and he decimated all the textures by 75%.

520
00:26:09,991 --> 00:26:11,512
And they didn't tell any of the artists,

521
00:26:11,512 --> 00:26:12,594
and they didn't find this out

522
00:26:12,594 --> 00:26:14,455
until they got the retail copies of the game.

523
00:26:14,455 --> 00:26:15,697
And they were a little upset

524
00:26:15,697 --> 00:26:19,320
at how fuzzy their textures were in the game.

525
00:26:19,320 --> 00:26:22,564
And it compromised the quality of the game.

526
00:26:22,564 --> 00:26:23,605
So a different approach,

527
00:26:23,605 --> 00:26:28,610
I mentioned getting that magazine demo every few months.

528
00:26:28,610 --> 00:26:33,274
And the idea is every three months, we take a week off,

529
00:26:34,121 --> 00:26:39,424
polish the game, we would make it look like something we could put in a magazine. We would

530
00:26:39,424 --> 00:26:44,286
disable certain features, maybe online wasn't ready, so we'd gray out that menu selection,

531
00:26:44,286 --> 00:26:50,769
and we'd polish it a little bit, get to that magazine demo. So one week every three months.

532
00:26:50,769 --> 00:26:56,732
And by continuing to do this, we still had a crew, but by the time we got to this alpha date,

533
00:26:56,732 --> 00:27:01,015
we had much less shipping debt left over.

534
00:27:01,790 --> 00:27:05,853
And so we had the choice of saying, well, we can get it out a little bit earlier,

535
00:27:05,853 --> 00:27:12,198
or we could actually spend a little bit more time polishing.

536
00:27:12,198 --> 00:27:15,401
So, you know, this kind of approach actually improves quality

537
00:27:15,401 --> 00:27:19,124
and there could save time over the course of the project

538
00:27:19,124 --> 00:27:21,606
by not just accumulating all this debt over time.

539
00:27:21,606 --> 00:27:23,548
And you wouldn't stop there.

540
00:27:23,548 --> 00:27:26,550
You know, you would you would continuously improve.

541
00:27:27,565 --> 00:27:30,087
a practice, so maybe we do a day every iteration.

542
00:27:30,087 --> 00:27:31,909
If we have a two- or three-week iteration,

543
00:27:31,909 --> 00:27:33,610
let's spend a day polishing it

544
00:27:33,610 --> 00:27:36,412
and getting it to this definition of done.

545
00:27:36,412 --> 00:27:38,634
Save that week every three months,

546
00:27:38,634 --> 00:27:41,236
and then maybe do something on a day-to-day basis

547
00:27:41,236 --> 00:27:43,878
before we go home for the day.

548
00:27:43,878 --> 00:27:45,720
The idea of continuous improvement.

549
00:27:47,879 --> 00:27:49,180
So various things you can do.

550
00:27:49,180 --> 00:27:52,022
Like I said, this doesn't happen overnight.

551
00:27:52,022 --> 00:27:53,623
Garrett Book describes various ways

552
00:27:53,623 --> 00:27:55,605
that we can automate testing,

553
00:27:55,605 --> 00:27:57,887
or we can have, we even have the gameplay itself.

554
00:27:57,887 --> 00:28:00,629
We would have a racing game where we'd say,

555
00:28:00,629 --> 00:28:03,711
let's just have all the AI cars race each other.

556
00:28:03,711 --> 00:28:05,773
We do all 20 races and have it run overnight

557
00:28:05,773 --> 00:28:07,695
in various configurations.

558
00:28:07,695 --> 00:28:09,136
And we occasionally find where,

559
00:28:09,136 --> 00:28:12,819
something like an artist would have moved a mailbox

560
00:28:12,819 --> 00:28:13,720
a couple of feet over.

561
00:28:14,275 --> 00:28:19,277
a car would hit the mailbox when it's cutting the curve, that mailbox would bounce off a street

562
00:28:19,277 --> 00:28:26,239
lamppost, lamppost would call it fall across the street, the physics engine couldn't handle it,

563
00:28:26,239 --> 00:28:33,061
and we'd find a big pile of cars all wrecked together in the middle of a race. So finding

564
00:28:33,061 --> 00:28:38,503
that kind of problem manually would take tons of time, but through automation you would find that

565
00:28:38,503 --> 00:28:39,083
very quickly.

566
00:28:40,036 --> 00:28:46,044
Also a cultural thing is try to keep the game as close to shipping as reasonably possible.

567
00:28:46,044 --> 00:28:51,010
Again, with a magazine demo every three months, we improved automation, things like that,

568
00:28:51,010 --> 00:28:55,936
to continuous integration, unit testing. We could always keep it a little bit closer than

569
00:28:55,936 --> 00:28:59,480
six months away of post-alpha crunch debugging.

570
00:29:01,154 --> 00:29:04,375
And it would come up with silly little practices like,

571
00:29:04,375 --> 00:29:07,176
yeah, with continuous integration and unit testing,

572
00:29:07,176 --> 00:29:08,456
if you check something in,

573
00:29:08,456 --> 00:29:09,996
it would find out in five minutes

574
00:29:09,996 --> 00:29:12,237
whether you've created a problem or not.

575
00:29:12,237 --> 00:29:13,677
It would tell you, it's like,

576
00:29:13,677 --> 00:29:15,998
oh, the changes you just checked in

577
00:29:15,998 --> 00:29:18,939
broke the release build on the PlayStation.

578
00:29:18,939 --> 00:29:21,799
And we had a practice where it'd give you 20 minutes

579
00:29:21,799 --> 00:29:22,860
to fix this problem.

580
00:29:23,733 --> 00:29:30,579
And if you didn't fix it in 20 minutes, then it would display the Muppet of the day on every single screen around the studio.

581
00:29:30,579 --> 00:29:34,543
And that Muppet would start singing their theme song.

582
00:29:34,543 --> 00:29:48,857
And I discovered this one day by checking in a change, running off to a meeting, and then 20 minutes later hearing the Swedish chef singing his theme song on a slightly asynchronous on 100 different workstations around the studio, which people love because it's.

583
00:29:49,415 --> 00:29:51,097
Segal manager implemented this practice.

584
00:29:51,097 --> 00:29:53,839
Just a little bit of warning is that this is not meant

585
00:29:53,839 --> 00:29:54,560
to humiliate people.

586
00:29:54,560 --> 00:29:56,461
You have a sense of fun about this stuff.

587
00:29:56,461 --> 00:29:57,602
People make mistakes.

588
00:29:57,602 --> 00:30:00,264
You have to have a culture where it's like,

589
00:30:00,264 --> 00:30:01,705
hey, we all make mistakes.

590
00:30:01,705 --> 00:30:04,728
Failure is part of the process.

591
00:30:04,728 --> 00:30:06,849
All right, so things to try.

592
00:30:06,849 --> 00:30:10,712
Again, this will be in the document at the end.

593
00:30:10,712 --> 00:30:12,254
Don't separate debt from other work.

594
00:30:12,254 --> 00:30:14,856
One of the best things we did was get rid of a bug database.

595
00:30:15,745 --> 00:30:18,346
Because that allowed us to say, hey,

596
00:30:18,346 --> 00:30:19,766
fixing the problem with a feature

597
00:30:19,766 --> 00:30:23,668
is part of the same database, Jira or whatever.

598
00:30:23,668 --> 00:30:25,088
And so we're able to measure the cost

599
00:30:25,088 --> 00:30:26,469
of implementing the features,

600
00:30:26,469 --> 00:30:29,130
which included making those features work.

601
00:30:29,130 --> 00:30:31,031
Because the problem with a bug database

602
00:30:31,031 --> 00:30:33,752
is it's part of the cost, but it's unpredictable

603
00:30:33,752 --> 00:30:35,893
because it grows over time.

604
00:30:35,893 --> 00:30:38,334
So integrating those two helped us measure progress

605
00:30:38,334 --> 00:30:39,394
much, much better.

606
00:30:40,358 --> 00:30:43,319
slowly introduced debt reduction practices,

607
00:30:43,319 --> 00:30:46,519
establishing definitions of done, things like that.

608
00:30:46,519 --> 00:30:48,480
Lots of barriers to this.

609
00:30:48,480 --> 00:30:51,780
Fixing the bugs makes the cost of features

610
00:30:51,780 --> 00:30:55,221
appear more expensive.

611
00:30:55,221 --> 00:30:58,102
But like I said, it's just, it gives you a better metric.

612
00:30:58,102 --> 00:31:01,243
And it does improve productivity

613
00:31:01,243 --> 00:31:02,923
by fixing bugs sooner over time.

614
00:31:02,923 --> 00:31:04,163
But stakeholders can push back on this.

615
00:31:04,163 --> 00:31:07,004
It's like, I want you to implement a new feature

616
00:31:07,004 --> 00:31:09,705
rather than fixing bugs and polishing and refactoring.

617
00:31:10,349 --> 00:31:14,093
Stakeholders could be like kids in a candy shop.

618
00:31:14,093 --> 00:31:15,995
They want fun, new features.

619
00:31:15,995 --> 00:31:19,378
They don't want to worry about bugs until the end.

620
00:31:19,378 --> 00:31:21,301
And we developers are sometimes the problem.

621
00:31:21,301 --> 00:31:23,142
It's like, I like implementing a feature.

622
00:31:23,142 --> 00:31:27,107
I don't like fixing it as the bugs associated with it as much.

623
00:31:27,107 --> 00:31:30,570
So it's part of the discipline of the development culture too.

624
00:31:30,570 --> 00:31:31,171
So the use stress.

625
00:31:31,814 --> 00:31:33,876
Raising that quality bar is like working out.

626
00:31:33,876 --> 00:31:35,557
Just throw a little bit of weight on it.

627
00:31:35,557 --> 00:31:36,438
It's going to be painful.

628
00:31:36,438 --> 00:31:38,940
You're expecting people to change the way they work.

629
00:31:38,940 --> 00:31:43,083
Don't throw too much change, cause that injury.

630
00:31:43,083 --> 00:31:47,326
But when the quality bar rises and people become comfortable

631
00:31:47,326 --> 00:31:52,090
with those new practices, push it a little bit further.

632
00:31:52,090 --> 00:31:55,193
All right, so finally, I talk about number four,

633
00:31:55,193 --> 00:31:57,234
which is build a culture where developers thrive.

634
00:31:57,234 --> 00:32:00,697
And this is probably one of the most productive, important parts.

635
00:32:01,632 --> 00:32:08,459
is you want to create a culture where people behave based on the benefit of

636
00:32:08,459 --> 00:32:14,345
the work being done, the quality of the game, to focus on that and even measure that.

637
00:32:14,345 --> 00:32:18,809
Now there's lots of bad metrics out there and this is one of the big lessons I learned which

638
00:32:18,809 --> 00:32:23,854
harmed company culture. For example, one of the studios I worked for was owned by a Japanese

639
00:32:23,854 --> 00:32:24,455
corporation.

640
00:32:25,358 --> 00:32:34,583
And from their point of view, the commitment, the engagement of their developers was measured by how many hours they spent in the building,

641
00:32:34,583 --> 00:32:37,265
regardless of whether they're working or not.

642
00:32:37,265 --> 00:32:40,186
And that didn't match our culture at all in California.

643
00:32:40,186 --> 00:32:46,570
But what we found out later on, what they were doing is they had an office in Los Angeles about 100 miles away.

644
00:32:46,570 --> 00:32:52,993
Every so often, they would ask somebody to drive past our studio at two o'clock in the morning and count the cars in our parking lot.

645
00:32:54,132 --> 00:32:59,636
And they were very disappointed at first because they didn't see very many cars in the parking lot.

646
00:32:59,636 --> 00:33:03,538
But when we found out about this, what we did was we made a deal

647
00:33:03,538 --> 00:33:09,602
with this newspaper distributor in the next building over, you know, who normally have

648
00:33:09,602 --> 00:33:13,364
people working there at two o'clock in the morning getting ready to distribute newspapers for the

649
00:33:13,364 --> 00:33:18,587
next morning. We made a little deal with them to park their cars in our parking lot to get our

650
00:33:20,063 --> 00:33:22,566
our owners off of our back.

651
00:33:22,566 --> 00:33:25,689
And that fixed the problem,

652
00:33:25,689 --> 00:33:28,332
but it really didn't help development as a metric.

653
00:33:28,332 --> 00:33:32,916
And I found this out personally as that Seagull manager,

654
00:33:32,916 --> 00:33:35,219
when we first started doing iterations,

655
00:33:35,219 --> 00:33:38,202
first started measuring scope added to the game,

656
00:33:38,202 --> 00:33:40,544
rather than the number of hours people are sitting

657
00:33:40,544 --> 00:33:41,826
in their seats in the building.

658
00:33:42,608 --> 00:33:44,529
But I was a late learner to that.

659
00:33:44,529 --> 00:33:48,150
And so when we were behind schedule

660
00:33:48,150 --> 00:33:51,892
in getting all the scope that we hoped to get into the game,

661
00:33:51,892 --> 00:33:53,133
as a C-Goal manager, I said,

662
00:33:53,133 --> 00:33:56,754
all right, we're gonna do crunch, we're gonna do overtime.

663
00:33:56,754 --> 00:34:00,056
Because that's my practice for the past decade

664
00:34:00,056 --> 00:34:01,997
as the project manager.

665
00:34:01,997 --> 00:34:04,038
But I felt I was a good project manager

666
00:34:04,038 --> 00:34:05,858
because I would be there with the team

667
00:34:05,858 --> 00:34:09,800
working all these seven day a week, 10 hour a day hours.

668
00:34:10,594 --> 00:34:12,096
but we had a different metric,

669
00:34:12,096 --> 00:34:15,879
how much debug scope was getting into the game.

670
00:34:15,879 --> 00:34:19,483
Now at first, hey, scope went up, our velocity went up.

671
00:34:19,483 --> 00:34:21,805
But we noticed that it slowly declined

672
00:34:21,805 --> 00:34:24,328
so that by the fourth week of crunch,

673
00:34:24,328 --> 00:34:27,791
we saw that we're getting less scope in the game

674
00:34:27,791 --> 00:34:31,615
than we were during the five day a week pace.

675
00:34:32,504 --> 00:34:34,965
And I realized, you know, people are getting tired.

676
00:34:34,965 --> 00:34:36,305
They're typing more slowly.

677
00:34:36,305 --> 00:34:38,846
They're making more mistakes.

678
00:34:38,846 --> 00:34:39,967
They're tired.

679
00:34:39,967 --> 00:34:42,247
As well as the last time seeing this metric,

680
00:34:42,247 --> 00:34:44,288
which not only created transparency and development,

681
00:34:44,288 --> 00:34:47,269
but transparency with me as a manager,

682
00:34:47,269 --> 00:34:49,250
that was the last time I ever called for crunch

683
00:34:49,250 --> 00:34:50,510
with the team.

684
00:34:51,133 --> 00:34:55,857
So the idea is to find these metrics, which are not vanity metrics, which don't make you feel

685
00:34:55,857 --> 00:35:00,842
good that people are sitting at their desk at 10 o'clock at night, but actually add to creating

686
00:35:00,842 --> 00:35:06,427
value in the game. A lot of times when we were forcing people to be late in the studio,

687
00:35:06,427 --> 00:35:10,150
it represents a lack of trust. Now,

688
00:35:10,582 --> 00:35:13,303
You think about this from a systems point of view,

689
00:35:13,303 --> 00:35:15,565
or from a team building point of view,

690
00:35:15,565 --> 00:35:18,807
if anyone's read the five dysfunctions of a team,

691
00:35:18,807 --> 00:35:20,688
they know that an absence of trust

692
00:35:20,688 --> 00:35:24,290
is the fundamental thing that breaks team performance.

693
00:35:24,290 --> 00:35:25,551
If the team doesn't trust each other,

694
00:35:25,551 --> 00:35:28,133
or management doesn't trust the team,

695
00:35:28,133 --> 00:35:30,695
then they behave in a certain way.

696
00:35:30,695 --> 00:35:32,896
So from lack of trust, what happens a lot of times

697
00:35:32,896 --> 00:35:34,577
is that the stakeholders say,

698
00:35:34,577 --> 00:35:35,398
hey, we don't trust you,

699
00:35:35,398 --> 00:35:37,139
we're gonna leave you on your own,

700
00:35:37,139 --> 00:35:39,560
you're just gonna be lazy and waste our money.

701
00:35:40,185 --> 00:35:43,749
We're going to have you create a big, huge document with lots of details,

702
00:35:43,749 --> 00:35:48,614
and we're going to task you down to the hour because we just simply don't trust you.

703
00:35:48,614 --> 00:35:55,401
And the problem is that that creates a system where it doesn't allow for emergence,

704
00:35:55,401 --> 00:36:00,046
as I mentioned earlier, very little slack because we're trying to push as much

705
00:36:00,046 --> 00:36:03,830
as we can to make those untrustworthy developers work.

706
00:36:04,401 --> 00:36:09,467
And it leads to people optimizing their behavior based on their discipline.

707
00:36:09,467 --> 00:36:10,408
It creates silos.

708
00:36:10,408 --> 00:36:12,130
As a programmer, I'm given a ton of tasks.

709
00:36:12,130 --> 00:36:14,572
I'm just going to write the code to fulfill them.

710
00:36:14,572 --> 00:36:18,477
When I was in the defense industry, I was measured on the number of lines of code.

711
00:36:18,477 --> 00:36:20,119
So I wrote very fluffy code.

712
00:36:20,119 --> 00:36:23,222
If I can write something in 10 lines of code rather than one,

713
00:36:23,222 --> 00:36:24,223
I got a bigger raise.

714
00:36:25,053 --> 00:36:29,075
So it leads to all sorts of problems, like developers protecting themselves.

715
00:36:29,075 --> 00:36:32,796
If you're an animator and you come to me as a programmer and ask for help,

716
00:36:32,796 --> 00:36:35,658
I'm going to tell you to go away because I got to get my stuff done.

717
00:36:35,658 --> 00:36:39,139
That's how I'm being measured by this silly, silly metric.

718
00:36:39,139 --> 00:36:41,781
Rather than getting things in the game, it's how, you know,

719
00:36:41,781 --> 00:36:45,502
whether my stuff compiles and I can move on to more tasks.

720
00:36:45,502 --> 00:36:48,704
It avoids emergent work.

721
00:36:48,704 --> 00:36:50,365
It leads to padding estimates.

722
00:36:51,253 --> 00:36:53,134
which rarely works.

723
00:36:53,134 --> 00:36:56,175
Work expands to fill the pad very often.

724
00:36:56,175 --> 00:36:57,535
And we ignore dependencies.

725
00:36:57,535 --> 00:36:59,055
It's like, hey, throw, you know, or bugs,

726
00:36:59,055 --> 00:37:00,256
throw it into a bug database.

727
00:37:00,256 --> 00:37:03,096
I can get my stuff done so I look good as an individual,

728
00:37:03,096 --> 00:37:04,717
not as a member of the team.

729
00:37:04,717 --> 00:37:07,758
And we get poor results as, you know, nothing's working.

730
00:37:07,758 --> 00:37:09,618
We can't demonstrate anything.

731
00:37:09,618 --> 00:37:12,679
I can say, hey, these tasks are done,

732
00:37:12,679 --> 00:37:14,279
but you can't see any of that in the game.

733
00:37:14,279 --> 00:37:17,700
We're postponing the emergence of value.

734
00:37:17,700 --> 00:37:20,241
And that just drives that cycle.

735
00:37:20,926 --> 00:37:22,228
So if you have poor results, that

736
00:37:22,228 --> 00:37:25,613
means that we didn't write enough documentation.

737
00:37:25,613 --> 00:37:28,878
So let's ask for more documentation.

738
00:37:28,878 --> 00:37:31,322
So to reverse that cycle, we have to extend trust.

739
00:37:31,322 --> 00:37:32,684
This is where leadership comes in.

740
00:37:32,684 --> 00:37:33,726
What can we do to grow trust?

741
00:37:34,677 --> 00:37:39,744
And yeah, it takes a little bit of extension from the stakeholders and the developers themselves.

742
00:37:39,744 --> 00:37:47,393
So to give them a little bit more freedom, let's form cross-discipline teams. Let's let you start

743
00:37:47,393 --> 00:37:53,421
to create your own plan, to break down the individual tasks, to own your estimates eventually,

744
00:37:53,421 --> 00:37:54,482
and focus on the results.

745
00:37:55,332 --> 00:37:57,833
This is where your practices like sprints come in,

746
00:37:57,833 --> 00:37:59,093
where it's just like, all right,

747
00:37:59,093 --> 00:38:01,134
this is what we want to see in the game.

748
00:38:01,134 --> 00:38:02,594
You tell us whether you can do it.

749
00:38:02,594 --> 00:38:03,734
You manage the individual tasks.

750
00:38:03,734 --> 00:38:05,175
We're not going to micromanage you,

751
00:38:05,175 --> 00:38:08,536
but we want to see the game improved in two weeks

752
00:38:08,536 --> 00:38:09,996
in the way that we all agree on.

753
00:38:09,996 --> 00:38:13,277
And so that results in more accountability

754
00:38:13,277 --> 00:38:15,758
at the team level, focusing on what's in the game

755
00:38:15,758 --> 00:38:18,918
rather than how many lines of code that I've written.

756
00:38:19,582 --> 00:38:22,163
taking advantage of emergent work.

757
00:38:22,163 --> 00:38:25,266
If something's fun and it wasn't part of the plan,

758
00:38:25,266 --> 00:38:27,407
well, let's talk to some of the stakeholders

759
00:38:27,407 --> 00:38:29,409
during this iteration and talk about,

760
00:38:29,409 --> 00:38:30,469
hey, can we ditch this thing

761
00:38:30,469 --> 00:38:32,891
because we found that this thing works?

762
00:38:32,891 --> 00:38:34,152
And it's a team result.

763
00:38:34,152 --> 00:38:36,594
You get people behaving as a team

764
00:38:36,594 --> 00:38:38,695
and they don't want to let their team members down.

765
00:38:38,695 --> 00:38:41,277
So you get improved results,

766
00:38:41,277 --> 00:38:44,199
which kind of drives a better game, better forecasting.

767
00:38:44,199 --> 00:38:45,580
It drives better behavior.

768
00:38:45,580 --> 00:38:48,462
And it drives elevating.

769
00:38:49,139 --> 00:38:49,520
levels of trust.

770
00:38:49,520 --> 00:38:54,905
So one last thing I want to talk about is this sense of flow.

771
00:38:54,905 --> 00:38:58,869
Now, as a game developer, there is occasional games

772
00:38:58,869 --> 00:39:02,232
that I worked on, and I wish it was more frequent, where

773
00:39:02,232 --> 00:39:04,134
I just thoroughly enjoyed the development of the game.

774
00:39:04,134 --> 00:39:06,036
And I would be brushing my teeth in the morning

775
00:39:06,036 --> 00:39:08,779
to think of this great idea and rush in.

776
00:39:09,743 --> 00:39:13,966
to find people implementing their own ideas aligned with the overall goals.

777
00:39:13,966 --> 00:39:17,587
Or, you know, you start and I'm sure everyone's experiences

778
00:39:17,587 --> 00:39:20,589
where you start working on something and you look up at the clock

779
00:39:20,589 --> 00:39:23,930
and you think it's it's lunchtime, it's three o'clock in the afternoon.

780
00:39:23,930 --> 00:39:25,151
It's like, oh, that's why my stomach hurts.

781
00:39:25,151 --> 00:39:27,812
You're so engaged with the work.

782
00:39:27,812 --> 00:39:29,813
And this is called flow.

783
00:39:30,676 --> 00:39:34,960
And as developers, we love being in this state of flow.

784
00:39:34,960 --> 00:39:36,781
And there's this book that came out,

785
00:39:36,781 --> 00:39:38,283
I kind of described it,

786
00:39:38,283 --> 00:39:41,766
kind of summed up what I felt as during these rare situations

787
00:39:41,766 --> 00:39:46,931
where I'll just completely engage creatively with my work.

788
00:39:46,931 --> 00:39:49,993
And this is based on a lot of studies that show,

789
00:39:49,993 --> 00:39:51,515
you know, there's a correlation,

790
00:39:51,515 --> 00:39:53,857
there's levels of skill that developers have,

791
00:39:53,857 --> 00:39:56,499
and there's levels of challenge from low to high

792
00:39:56,499 --> 00:39:57,680
that they encounter.

793
00:39:58,638 --> 00:40:02,259
And what we want to do is find that range where those two things match.

794
00:40:02,259 --> 00:40:06,240
Because if you have a certain level of skill and you're given

795
00:40:06,240 --> 00:40:10,121
too low of a challenge for your skill level, you get bored.

796
00:40:10,121 --> 00:40:13,582
You're bored with the work. You're not engaged.

797
00:40:13,582 --> 00:40:15,162
You're not doing your best work.

798
00:40:15,162 --> 00:40:18,904
But if you're if you're given too much of a challenge

799
00:40:18,904 --> 00:40:21,964
for your existing skill level, you get stressed out.

800
00:40:21,964 --> 00:40:25,125
You don't do your best work. You get frustrated.

801
00:40:25,839 --> 00:40:29,060
you don't want to hang around, you don't get engaged with your work.

802
00:40:29,060 --> 00:40:32,981
And so what we're trying to do is find that middle ground where

803
00:40:32,981 --> 00:40:37,283
we're challenged at our skill level with a particular

804
00:40:37,283 --> 00:40:41,104
task that we're trying to accomplish, this feature we're trying to implement.

805
00:40:41,104 --> 00:40:45,386
And what we're trying to do as leaders, again using this workout analogy,

806
00:40:45,386 --> 00:40:46,506
is we're trying to push that.

807
00:40:47,005 --> 00:40:50,507
We're trying to say it's like, hey, your skill level is going to grow over time.

808
00:40:50,507 --> 00:40:51,828
Let's just push you a little bit.

809
00:40:51,828 --> 00:40:55,111
Let's give you a little bit more challenge than you're used to.

810
00:40:55,111 --> 00:40:55,911
Not too much.

811
00:40:55,911 --> 00:40:59,033
We don't want to get into that injury range, but let's get into that strengthening

812
00:40:59,033 --> 00:40:59,854
range so that.

813
00:41:00,349 --> 00:41:06,695
your skill grows to meet that challenge level and continuously find ways of pushing, raising that

814
00:41:06,695 --> 00:41:12,621
weight limit, raising that challenge level so people's skill level grows. And this is one of

815
00:41:12,621 --> 00:41:16,926
things that motivates the developers the most. And they do their best work. And when they do

816
00:41:16,926 --> 00:41:19,909
their best work, it directly benefits to the game.

817
00:41:21,335 --> 00:41:22,655
All right, so things to try.

818
00:41:22,655 --> 00:41:26,017
Keep developers focused on those shorter cycles,

819
00:41:26,017 --> 00:41:28,178
give them more challenges,

820
00:41:28,178 --> 00:41:30,099
come up with metrics that mean something.

821
00:41:30,099 --> 00:41:33,420
People behave based on how they feel are being measured.

822
00:41:33,420 --> 00:41:35,181
And so what's the best measure?

823
00:41:35,181 --> 00:41:37,542
Is just improving the quality of the game.

824
00:41:37,542 --> 00:41:40,604
If you can measure that based on what the scope is

825
00:41:40,604 --> 00:41:43,905
we're putting into the game, discover those things.

826
00:41:43,905 --> 00:41:44,345
Grow trust.

827
00:41:44,937 --> 00:41:48,219
Give the team more autonomy over time.

828
00:41:48,219 --> 00:41:51,421
Not all at once, just give them little challenges

829
00:41:51,421 --> 00:41:54,223
of autonomy and self-management.

830
00:41:54,223 --> 00:41:57,565
And build the flow like we discussed.

831
00:41:57,565 --> 00:42:01,467
Give them more and more challenges

832
00:42:01,467 --> 00:42:04,229
that meet their skill level.

833
00:42:05,185 --> 00:42:06,826
So plenty of barriers to this as well.

834
00:42:06,826 --> 00:42:07,947
This is a cultural thing.

835
00:42:07,947 --> 00:42:10,228
And trust is a two-way street.

836
00:42:10,228 --> 00:42:12,129
It's hard to build, easy to destroy.

837
00:42:12,129 --> 00:42:16,251
And sometimes it's as a leader, you can extend trust,

838
00:42:16,251 --> 00:42:19,233
but maybe because of your past, the culture,

839
00:42:19,233 --> 00:42:20,394
you're a CGL manager as well,

840
00:42:20,394 --> 00:42:23,315
people just don't trust you as much.

841
00:42:23,315 --> 00:42:24,916
It takes time for them to kind of say,

842
00:42:24,916 --> 00:42:29,859
hey, is this a trick or what?

843
00:42:29,859 --> 00:42:31,900
I said, hard to build, easy to destroy.

844
00:42:32,857 --> 00:42:37,999
Like myself, I was very easily tempted to go back to say,

845
00:42:37,999 --> 00:42:40,040
all right, let's go back to crunch

846
00:42:40,040 --> 00:42:42,902
and put it on the developer's shoulder

847
00:42:42,902 --> 00:42:47,043
to meet the schedule that I predicted for them.

848
00:42:47,043 --> 00:42:48,364
So some use stresses, again,

849
00:42:48,364 --> 00:42:51,545
it's to slowly empower the teams, slowly back off.

850
00:42:51,545 --> 00:42:54,127
It's gonna be painful for the teams to take more ownership.

851
00:42:54,127 --> 00:42:56,067
It's gonna be even more painful as managers

852
00:42:56,067 --> 00:42:56,968
to give it to them.

853
00:42:57,760 --> 00:43:00,922
and not give up at the first sign of problem.

854
00:43:00,922 --> 00:43:02,322
There's always going to be problems.

855
00:43:02,322 --> 00:43:06,724
And raising the challenge bar for developers.

856
00:43:06,724 --> 00:43:07,325
OK, that's it.

857
00:43:07,325 --> 00:43:09,926
I want to thank you for taking the time.

858
00:43:09,926 --> 00:43:12,967
And as I mentioned, there's a PDF at this website

859
00:43:12,967 --> 00:43:14,968
called tamingthechaos.com.

860
00:43:14,968 --> 00:43:17,669
Single link there to the PDF, which

861
00:43:17,669 --> 00:43:21,151
summarizes all those things to try,

862
00:43:21,151 --> 00:43:23,692
and all the barriers, and all practices

863
00:43:23,692 --> 00:43:25,673
that you can try in Gear Up.

864
00:43:25,673 --> 00:43:26,053
Thank you.

