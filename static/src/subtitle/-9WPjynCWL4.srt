1
00:00:05,853 --> 00:00:09,597
So welcome to this talk on cementing your duct tape.

2
00:00:09,657 --> 00:00:10,918
My name is Matthias van Kamp.

3
00:00:11,678 --> 00:00:13,580
This is my first GDC, so kind of bear with me.

4
00:00:13,600 --> 00:00:15,081
I'm a little nervous for the presentation,

5
00:00:15,121 --> 00:00:16,602
but I hope you'll enjoy it.

6
00:00:17,703 --> 00:00:19,665
First some housekeeping before we get started.

7
00:00:19,745 --> 00:00:22,047
Please keep your phones on silent

8
00:00:22,247 --> 00:00:23,728
and do remember to fill in your surveys

9
00:00:23,848 --> 00:00:24,709
at the end of the talk.

10
00:00:25,130 --> 00:00:27,672
We should have some time for questions,

11
00:00:27,732 --> 00:00:31,034
but if we don't, room 3022 will be the wrap-up room.

12
00:00:31,515 --> 00:00:33,176
It's just around the corner of the hallway,

13
00:00:33,196 --> 00:00:34,998
so you will be able to find me there after the talk.

14
00:00:36,518 --> 00:00:40,481
So first, who am I, and what am I doing here?

15
00:00:41,041 --> 00:00:43,022
I am currently a senior technical artist

16
00:00:43,062 --> 00:00:44,643
working on the Total War franchise.

17
00:00:44,703 --> 00:00:46,984
I'm sure most of you have at least heard of the franchise.

18
00:00:47,484 --> 00:00:49,526
It is my fourth year working at Creative Assembly

19
00:00:49,646 --> 00:00:51,867
in that position, which makes it my seventh year

20
00:00:51,987 --> 00:00:52,707
in the industry.

21
00:00:52,787 --> 00:00:55,709
I've worked on games such as Divinity Original Sin

22
00:00:56,229 --> 00:00:57,690
at Larian Studios in Ghent.

23
00:00:57,910 --> 00:01:01,092
I've also worked afterwards on Created.be,

24
00:01:01,212 --> 00:01:02,693
which was an educational game

25
00:01:03,033 --> 00:01:04,694
using the Unity engine in the web browser.

26
00:01:05,174 --> 00:01:08,376
where kids would do homework as a currency to progress the game's story.

27
00:01:08,596 --> 00:01:09,716
Very interesting implementation.

28
00:01:10,577 --> 00:01:12,738
And then I transitioned to working on

29
00:01:12,758 --> 00:01:16,039
the farming simulator titles in Zurich in Switzerland before

30
00:01:16,079 --> 00:01:19,621
eventually making it into Creative Assembly as a technical artist.

31
00:01:19,721 --> 00:01:23,162
I've since worked on titles such as Total War, Warhammer 1 and 2.

32
00:01:24,123 --> 00:01:27,564
I've spent most of my time there working on Total War Arena,

33
00:01:27,784 --> 00:01:32,666
which who here is aware of Total War Arena that it exists, right?

34
00:01:32,947 --> 00:01:33,747
A fair amount of people.

35
00:01:34,609 --> 00:01:37,431
I've also worked on the upcoming Total War Three Kingdoms.

36
00:01:38,433 --> 00:01:40,475
Before we dig any deeper into Arena,

37
00:01:41,175 --> 00:01:43,057
as those who know Arena will know,

38
00:01:43,538 --> 00:01:46,441
it was shut down on February 27th of this year.

39
00:01:46,881 --> 00:01:49,284
So I'll not be fielding any questions about the shutdown,

40
00:01:49,544 --> 00:01:51,186
but the talk is more about what we

41
00:01:51,206 --> 00:01:52,307
learned from its development.

42
00:01:52,347 --> 00:01:54,529
So it's not because the game is shut down

43
00:01:54,549 --> 00:01:56,571
that we can't learn from the things that we did on it.

44
00:01:58,408 --> 00:02:01,650
So first an overview of what the talk is going to touch on.

45
00:02:02,210 --> 00:02:03,691
The first thing we're gonna do is define

46
00:02:03,711 --> 00:02:06,072
what technical art really means on Total War.

47
00:02:06,272 --> 00:02:08,453
As I'm sure I don't have to tell a lot of you,

48
00:02:08,593 --> 00:02:10,293
technical art kind of means different things

49
00:02:10,333 --> 00:02:12,514
depending on who you're talking to,

50
00:02:12,574 --> 00:02:16,096
what studio you're at, even the people that you work with

51
00:02:16,256 --> 00:02:18,116
or the phase of production that you're currently in.

52
00:02:18,356 --> 00:02:20,097
That depends on, your job description

53
00:02:20,117 --> 00:02:22,798
essentially changes over time, which is very interesting.

54
00:02:22,818 --> 00:02:24,479
It makes technical artists a bit obscure.

55
00:02:25,779 --> 00:02:30,881
I brought with me some examples as well from the production of Total War Arena to illustrate

56
00:02:30,921 --> 00:02:36,062
what we're talking about today and how we used essentially duct tape solutions to then

57
00:02:36,162 --> 00:02:40,923
learn from what we did implementing those hacks or what we considered to be hacks but

58
00:02:41,143 --> 00:02:43,564
while being aware that they needed to be removed afterwards.

59
00:02:44,064 --> 00:02:46,365
So we use these things as learning processes really.

60
00:02:47,853 --> 00:02:49,574
Then we're going to go over some lessons,

61
00:02:49,834 --> 00:02:52,676
things that we in hindsight wish we had done differently.

62
00:02:53,397 --> 00:02:54,938
Obviously, hindsight is 20-20,

63
00:02:55,418 --> 00:02:57,760
but going forward we'll implement a lot of

64
00:02:57,800 --> 00:03:01,402
the lessons that we learned from using this technique.

65
00:03:02,043 --> 00:03:05,345
Then lastly, hopefully you'll take something away from this presentation.

66
00:03:06,306 --> 00:03:10,828
So, for those of you who don't know Arena, which is apparently a fair few of you, I brought

67
00:03:10,868 --> 00:03:15,350
along a video with me that illustrates, there's actually a marketing material that markets

68
00:03:15,710 --> 00:03:19,772
our, one of our commanders, Ambiorix, which has a bit of special meaning to me because

69
00:03:19,792 --> 00:03:22,173
I'm Belgian and he is a Belgian folk hero.

70
00:04:32,431 --> 00:04:33,592
So that was Total War Arena.

71
00:04:33,732 --> 00:04:36,754
As you can see, it's a MOBA-style RTS,

72
00:04:37,174 --> 00:04:40,296
very high action, a bit of a high action implementation

73
00:04:40,336 --> 00:04:42,617
of the traditional Total War franchise.

74
00:04:42,857 --> 00:04:44,638
So onto defining what technical art

75
00:04:44,678 --> 00:04:45,919
in Total War actually means.

76
00:04:46,759 --> 00:04:48,280
We are a centralized team.

77
00:04:48,320 --> 00:04:50,422
That means that we work on every single project,

78
00:04:50,502 --> 00:04:52,863
which also means that our tools and pipelines need to work,

79
00:04:53,083 --> 00:04:55,084
at least theoretically, on every project.

80
00:04:56,102 --> 00:05:00,104
That does of course not mean that some of our tools cannot be project specific.

81
00:05:00,444 --> 00:05:05,447
On Total War Arena, as on Warhammer and on Three Kingdoms, we always have specific solutions

82
00:05:05,487 --> 00:05:06,788
for very specific problems.

83
00:05:07,428 --> 00:05:11,050
They all have separate branches of the engine as well, so that means that certain engine

84
00:05:11,090 --> 00:05:15,972
tools on older versions, such as Total War Arena, which technically is still a branch

85
00:05:16,012 --> 00:05:16,853
of the Rome 2 engine.

86
00:05:18,134 --> 00:05:21,920
certain tools will not be available to us that will be available to other

87
00:05:21,960 --> 00:05:25,064
projects and then Total War Three Kingdoms being the most modern one had

88
00:05:25,084 --> 00:05:31,193
the fanciest tools. So we end up having different solutions to similar but also

89
00:05:31,233 --> 00:05:33,496
different problems because the tech is fundamentally different.

90
00:05:34,671 --> 00:05:39,614
We're also a fairly small team, with just four technical artists we supply support for

91
00:05:39,794 --> 00:05:44,857
over 80 clients, clients being defined as just developers who use our tools, mostly

92
00:05:44,897 --> 00:05:48,860
character artists and environment artists, but also sometimes animators and effects artists.

93
00:05:49,500 --> 00:05:55,804
That's actually closer to 100 now, and that covers roughly six concurrent game projects,

94
00:05:56,044 --> 00:05:58,706
so we're working on roughly six projects at any given time.

95
00:05:59,954 --> 00:06:03,875
Our role in that picture is to establish art pipelines and tools.

96
00:06:03,935 --> 00:06:09,597
We build things like exporters for Substance Designer and Substance Painter, as well as

97
00:06:09,657 --> 00:06:11,038
for 3ds Max and Maya.

98
00:06:11,738 --> 00:06:16,439
And we maintain the tools that we build for artists and make sure that their content can

99
00:06:16,459 --> 00:06:19,460
get from one place to another in the pipeline as smoothly as possible.

100
00:06:20,417 --> 00:06:25,159
We also play a key role in establishing conventions and standards, which is going to be an important

101
00:06:25,199 --> 00:06:27,700
thing in this talk later on, but I'll come back to that.

102
00:06:28,540 --> 00:06:33,842
And probably most importantly, tech artists on Total War, and I think tech artists in

103
00:06:33,862 --> 00:06:37,963
the entire industry, play a key role as an interface between art and programming.

104
00:06:38,023 --> 00:06:40,985
I think that's the one common denominator that every tech artist seems to share.

105
00:06:41,705 --> 00:06:44,427
where we make sure that when an artist says,

106
00:06:44,867 --> 00:06:48,550
we need this, then by the time that request gets to programming,

107
00:06:48,711 --> 00:06:49,932
it's actually what they need,

108
00:06:50,012 --> 00:06:51,393
not what they say they need.

109
00:06:51,413 --> 00:06:52,634
It's a genie swish kind of thing.

110
00:06:54,395 --> 00:06:56,857
Because it really happens quite a lot when an artist says,

111
00:06:56,957 --> 00:06:59,779
oh, I need this particular type of exporter,

112
00:06:59,940 --> 00:07:02,101
but then a tech artist gets their hands on it and says,

113
00:07:02,161 --> 00:07:03,282
no, actually you don't,

114
00:07:03,362 --> 00:07:05,164
because there's a tool that does this for you already.

115
00:07:06,084 --> 00:07:10,707
And that happens quite a lot and that ends up costing thousands of man hours in some cases or gaining

116
00:07:11,227 --> 00:07:12,728
thousands of man hours if you get it right.

117
00:07:14,349 --> 00:07:15,590
Into the meat of the talk then,

118
00:07:16,130 --> 00:07:21,894
cementing your duct tape. So what does duct tape actually really mean? I'm sure a few of you have wondered about this.

119
00:07:22,834 --> 00:07:29,258
When I talk about duct tape in the context of this presentation, I'm really talking about very quickly implemented solutions.

120
00:07:29,698 --> 00:07:32,480
There's a key difference with hacks, which will become clear throughout the talk.

121
00:07:33,781 --> 00:07:36,882
And also, they prioritize function over form.

122
00:07:37,022 --> 00:07:39,684
It means we need to get the stuff out the door,

123
00:07:40,644 --> 00:07:42,905
basically now or yesterday in some cases.

124
00:07:43,806 --> 00:07:46,687
And that means that when we write the code for these things,

125
00:07:46,747 --> 00:07:49,429
we are keenly aware of the fact that this code is going to be

126
00:07:49,669 --> 00:07:51,970
dumped in the garbage as soon as the content is out.

127
00:07:52,971 --> 00:07:56,694
Going in, that is essentially the key difference between duct tape and hacks,

128
00:07:57,074 --> 00:07:59,196
is a hack will tend to survive,

129
00:07:59,737 --> 00:08:04,741
whereas duct tapes, the duct tape solution in this context will be implemented with

130
00:08:04,781 --> 00:08:08,344
the idea and the prerequisite that it will be removed afterwards.

131
00:08:10,105 --> 00:08:13,528
Basically, the metaphor for that is plug the leak versus replace the pipe.

132
00:08:15,090 --> 00:08:19,553
So some examples that I brought with me today from the production of Total War Arena.

133
00:08:20,480 --> 00:08:25,923
The first example will go into how we made a data change that led to a host of improvements.

134
00:08:26,463 --> 00:08:30,785
Very important to note with that is that a lot of the improvements that we ended up having

135
00:08:30,985 --> 00:08:34,107
were not actually planned when we went in to make the change.

136
00:08:34,767 --> 00:08:38,969
What we did do going in to make the changes was just to simplify our data so our artists

137
00:08:39,009 --> 00:08:40,810
would have an easier time interacting with it.

138
00:08:41,239 --> 00:08:45,321
What we could never have imagined is that one of the changes, because of the change we made,

139
00:08:45,482 --> 00:08:49,184
one of the things we got, not for free but it became feasible,

140
00:08:49,664 --> 00:08:51,925
was an entire dynamic UI pipeline,

141
00:08:52,145 --> 00:08:54,907
something that we would otherwise never even have conceived of.

142
00:08:56,916 --> 00:08:58,897
So first example then, the variant cleanup.

143
00:08:58,957 --> 00:09:03,680
This is the term that we refer to on Arena during production

144
00:09:03,980 --> 00:09:06,501
as the single small data change that we made,

145
00:09:06,981 --> 00:09:09,042
which resulted in a big production speed increase,

146
00:09:09,143 --> 00:09:11,904
better tools, and eventually automatic UI generation.

147
00:09:12,044 --> 00:09:13,485
Something that I'm sure a lot of you

148
00:09:13,505 --> 00:09:16,707
would be happy with having on a production.

149
00:09:16,767 --> 00:09:19,548
So what is a variant really?

150
00:09:19,748 --> 00:09:22,990
So variants, the term variant came from code mostly.

151
00:09:23,770 --> 00:09:28,715
Basically what it does is it describes the parts that make up a unit or an entity on the battlefield.

152
00:09:29,115 --> 00:09:32,738
The reason that these parts are distinct is because in Total War Arena,

153
00:09:32,918 --> 00:09:35,901
and in most Total War games, but in Arena more so,

154
00:09:36,501 --> 00:09:38,603
these individual pieces can be swapped out.

155
00:09:38,984 --> 00:09:41,626
On Arena we had an upgradable equipment pipeline,

156
00:09:41,746 --> 00:09:46,670
which meant that we needed to have systems to deal with the fact that our units would be upgraded.

157
00:09:47,551 --> 00:09:53,515
This also means that our art assets had to be authored to make sure that they would all fit on the same body, for example,

158
00:09:53,555 --> 00:09:57,318
if you had a piece of armor that could be swapped out because armor was a separate mesh.

159
00:09:57,958 --> 00:10:02,521
That means also that you have to avoid skinning issues and debug clipping issues,

160
00:10:02,601 --> 00:10:08,546
and of course that also means that you need to have the ability to preview what your unit will look like when it gets upgraded,

161
00:10:08,626 --> 00:10:11,348
or rather when it equips the equipment you're making for it.

162
00:10:12,482 --> 00:10:18,346
What we saw actually, in part because Arena was running on a rather old code base, was

163
00:10:18,426 --> 00:10:23,809
that the pipeline didn't actually allow for us to preview our units being upgraded as

164
00:10:23,849 --> 00:10:24,770
they were in the game.

165
00:10:25,270 --> 00:10:29,212
The reason for that is that multiple systems were added over the years, but very little

166
00:10:29,252 --> 00:10:31,414
tools were built to deal with the new data.

167
00:10:32,414 --> 00:10:38,818
Total War Arena was actually the first title in a Total War franchise that had a player-driven upgrading system.

168
00:10:39,399 --> 00:10:46,644
The other Total War games do have upgradable equipments, but it's more system-driven, which means that for artists it's less exposed.

169
00:10:47,624 --> 00:10:54,068
For Arena, it was much more integrated, because we had everything from cosmetics to ranked battle achievements.

170
00:10:57,672 --> 00:11:05,676
Rewards that you could upgrade that you could get and unlock new cosmetics for commanders your units could be entirely customized

171
00:11:06,156 --> 00:11:12,278
This is a system that we hadn't built before and obviously the implementation for it was kind of done in a straightforward way

172
00:11:12,959 --> 00:11:15,260
ironically in a duct tape way

173
00:11:16,500 --> 00:11:22,183
So what we ended up with was a system where all of the individual upgrades were actually stored in separate files

174
00:11:23,123 --> 00:11:27,446
Obviously, the obvious result of this is that our character artists could not actually preview

175
00:11:27,486 --> 00:11:28,968
the unit before it went to the game.

176
00:11:29,488 --> 00:11:33,351
That means that our character artists had a very tough time previewing their content

177
00:11:33,411 --> 00:11:37,955
and making sure it didn't clip with the other meshes before their stuff went into the game,

178
00:11:38,015 --> 00:11:43,419
and that actually turned into a bit of a nightmare with QA bugs, and we constantly had to iterate

179
00:11:43,660 --> 00:11:47,142
our content to make sure everything was conforming to the same standard.

180
00:11:48,179 --> 00:12:00,790
It wasn't made any easier that a lot of the content we used in Total War Arena was also reused from different projects, both previous and current, to ensure that we could handle the content requirements for the project.

181
00:12:01,981 --> 00:12:03,961
Now the reason for this, really, we found,

182
00:12:04,541 --> 00:12:06,042
the first question we asked ourselves is,

183
00:12:06,242 --> 00:12:07,462
why is this actually the case?

184
00:12:07,922 --> 00:12:10,603
Obviously, we know that it's because of multiple systems

185
00:12:10,643 --> 00:12:11,563
were added over the years,

186
00:12:11,623 --> 00:12:14,183
but the question we really asked ourselves was,

187
00:12:15,003 --> 00:12:16,844
how does the system actually work?

188
00:12:17,464 --> 00:12:19,104
By visualizing this in a flow graph,

189
00:12:19,164 --> 00:12:21,565
it became quickly apparent that basically

190
00:12:21,585 --> 00:12:23,805
what was happening is the database contained

191
00:12:24,225 --> 00:12:26,346
a reference to some external file

192
00:12:26,386 --> 00:12:28,446
that the game engine then loaded at runtime

193
00:12:28,506 --> 00:12:30,547
and constructed the variant at runtime.

194
00:12:31,583 --> 00:12:37,230
Obviously the obvious upgrade to that, the obvious step forward, would have been to just

195
00:12:37,350 --> 00:12:40,294
implement what the game does in the unit editor.

196
00:12:40,475 --> 00:12:42,397
In fact that would have been the straightforward solution.

197
00:12:43,432 --> 00:12:44,893
However, we didn't want to do that.

198
00:12:45,093 --> 00:12:46,914
Instead, we wanted a data change.

199
00:12:47,014 --> 00:12:50,235
We wanted to make sure that instead of upgrading our editor

200
00:12:50,295 --> 00:12:52,616
to add more complex behavior to a problem

201
00:12:52,656 --> 00:12:54,577
that shouldn't really exist in the first place,

202
00:12:55,397 --> 00:12:57,838
instead of doing that, we wanted just to change our data

203
00:12:57,938 --> 00:13:00,639
so the data was simpler and the editor required

204
00:13:00,680 --> 00:13:02,880
just a very small change to just deal with

205
00:13:02,980 --> 00:13:04,421
how the new data was formatted.

206
00:13:04,941 --> 00:13:07,843
So what we did then was to just remove a single column

207
00:13:07,883 --> 00:13:09,423
from the database, which was the reference

208
00:13:09,443 --> 00:13:10,584
to the visual information,

209
00:13:10,924 --> 00:13:12,685
but we kept the key to the equipment.

210
00:13:13,245 --> 00:13:20,568
And then all we needed to do in our variant files, which are XML-based, was add a single attribute in the XML tag that the database could recognize and say,

211
00:13:20,688 --> 00:13:26,491
oh, I need to now enable this piece, which was then the proper helmet, the proper shield, etc.

212
00:13:26,831 --> 00:13:28,492
So we visualized how we wanted to do it.

213
00:13:28,632 --> 00:13:36,495
Essentially, we just wanted to cut out that step of the database where the database was loading visual content, because obviously a database is not a visual system.

214
00:13:37,195 --> 00:13:40,056
and instead stored all of the visual information

215
00:13:40,256 --> 00:13:43,597
in files that were actually built to handle visual information.

216
00:13:44,698 --> 00:13:46,658
So it became a much more straightforward process.

217
00:13:47,638 --> 00:13:50,899
Obviously, it's easy to say we want to do it this way,

218
00:13:51,199 --> 00:13:53,840
but we actually have to find out whether we can do it.

219
00:13:54,060 --> 00:13:55,961
So we spent about a day of R&D,

220
00:13:56,581 --> 00:13:58,581
which turned into about three days of code work,

221
00:13:59,082 --> 00:14:02,262
which then resulted in a lot of redundant code actually being removed.

222
00:14:02,282 --> 00:14:04,963
I'm sure any programmer would think that's a very good thing.

223
00:14:06,524 --> 00:14:08,645
Our programmers were actually really happy with this change

224
00:14:08,685 --> 00:14:10,486
because a lot of spaghetti code could be removed

225
00:14:10,526 --> 00:14:13,207
and a lot of edge cases could be handled as well.

226
00:14:13,487 --> 00:14:16,509
And the code became much more straightforward,

227
00:14:16,529 --> 00:14:20,130
which resulted in a bunch more improvements over time,

228
00:14:20,150 --> 00:14:21,051
which I'll touch on later.

229
00:14:22,148 --> 00:14:23,429
So the question really then was,

230
00:14:23,909 --> 00:14:25,231
obviously three days of code work

231
00:14:25,471 --> 00:14:28,133
doesn't mean that our data has suddenly magically changed.

232
00:14:28,213 --> 00:14:31,336
What we actually found is that we had about a month of work

233
00:14:31,556 --> 00:14:33,718
to change how the content files were stored,

234
00:14:34,378 --> 00:14:36,080
because we obviously needed to transfer

235
00:14:36,160 --> 00:14:38,222
all of that visual information from the database

236
00:14:38,422 --> 00:14:40,083
into our text-based variant files.

237
00:14:40,123 --> 00:14:43,106
They don't just magically update because the code changed.

238
00:14:43,766 --> 00:14:45,988
So how to do that transfer?

239
00:14:46,188 --> 00:14:48,631
Well, we wrote a entirely one-off script.

240
00:14:49,677 --> 00:14:51,178
this is where the duct tape really comes in.

241
00:14:51,779 --> 00:14:55,121
Because this script was, well, basically the ugliest thing you've ever seen,

242
00:14:55,421 --> 00:14:55,922
but it worked.

243
00:14:56,852 --> 00:14:59,814
So it transferred all of that content from the database

244
00:15:00,114 --> 00:15:03,456
into our variant files, and that one-off change

245
00:15:04,837 --> 00:15:07,498
taught us basically how we needed to make that change

246
00:15:07,538 --> 00:15:08,198
in the first place.

247
00:15:08,719 --> 00:15:10,220
Instead of going in and saying,

248
00:15:10,500 --> 00:15:12,641
let's make a super solid tool

249
00:15:12,941 --> 00:15:15,042
to handle this information change,

250
00:15:15,702 --> 00:15:18,304
instead of doing that, we said, let's just try it.

251
00:15:18,324 --> 00:15:19,244
Let's prototype that,

252
00:15:19,445 --> 00:15:21,526
and just use the actual prototype in production,

253
00:15:21,706 --> 00:15:23,867
and just debug the content, and just deal with it.

254
00:15:24,507 --> 00:15:28,772
And by doing that, we actually learned enough about what we needed to do over time

255
00:15:28,993 --> 00:15:31,175
to then later turn it into a passive process.

256
00:15:31,376 --> 00:15:34,099
Because by then, we understood the problem space.

257
00:15:34,299 --> 00:15:37,102
We knew what we had to do, we knew the problems that we could encounter

258
00:15:37,283 --> 00:15:40,907
because we understood both the data and how to interact with it.

259
00:15:42,135 --> 00:15:45,077
What that actually looks like, if you visualize the before and after,

260
00:15:45,577 --> 00:15:49,339
is on the left you see the unit in its basic default configuration,

261
00:15:49,379 --> 00:15:52,180
which is what the artists were actually seeing, and then to the left of it,

262
00:15:52,661 --> 00:15:56,022
you can see the several equipments for higher upgrade levels

263
00:15:56,042 --> 00:15:57,423
that were stored in separate files.

264
00:15:57,983 --> 00:16:00,344
On the right, you see the editor after the change.

265
00:16:01,005 --> 00:16:04,667
Now the only change that we actually needed to do to the editor was to give it the ability

266
00:16:04,727 --> 00:16:06,007
to hide certain slots.

267
00:16:06,387 --> 00:16:11,970
That was a very tiny code change, relatively speaking, compared to the implementation change

268
00:16:12,010 --> 00:16:15,912
that we would have needed to do to implement database interaction from the editor.

269
00:16:16,432 --> 00:16:21,475
So just by changing how the content was formatted, we were able to add a lot of improvements

270
00:16:21,775 --> 00:16:22,435
into our editor.

271
00:16:24,249 --> 00:16:25,991
But again, this was a very small change.

272
00:16:26,051 --> 00:16:28,033
Basically all we did is remove a single column

273
00:16:28,053 --> 00:16:29,955
from a single table in a database

274
00:16:30,095 --> 00:16:32,157
and moved that information somewhere else.

275
00:16:32,638 --> 00:16:33,939
And while it was a complex change,

276
00:16:34,440 --> 00:16:36,662
it wasn't really all that impressive.

277
00:16:37,263 --> 00:16:37,603
However...

278
00:16:38,444 --> 00:16:40,785
What we did get is a host of later improvements

279
00:16:40,845 --> 00:16:42,005
that we did not see coming.

280
00:16:42,525 --> 00:16:44,585
For one, our programmers, because the code

281
00:16:44,645 --> 00:16:46,245
was now much simpler to deal with,

282
00:16:46,326 --> 00:16:48,726
and because the data was now much simpler to interact with,

283
00:16:48,806 --> 00:16:50,286
came up with the fact that we,

284
00:16:50,766 --> 00:16:53,027
instead of loading every single conceivable part

285
00:16:53,067 --> 00:16:54,467
for every unit on startup,

286
00:16:54,627 --> 00:16:56,387
which is terrible for startup time,

287
00:16:56,827 --> 00:17:00,108
we could now start loading our unit parts on demand,

288
00:17:00,328 --> 00:17:02,008
which meant that when you equip an equipment,

289
00:17:02,368 --> 00:17:03,709
it's at that point in time

290
00:17:03,729 --> 00:17:05,269
that it will actually start loading the model.

291
00:17:05,909 --> 00:17:09,476
That was only possible because our data files were now structured in such a way that the

292
00:17:09,496 --> 00:17:11,639
data model was much easier to interact with.

293
00:17:12,579 --> 00:17:16,641
That of course resulted in a bunch of startup time improvements, but additionally, because

294
00:17:16,681 --> 00:17:21,663
our data files were now, essentially now contained all of the visual information that a unit

295
00:17:21,683 --> 00:17:27,766
could ever have, that meant that because they're XML based, Python became incredibly powerful.

296
00:17:28,106 --> 00:17:33,869
Suddenly, we could do metrics gathering offline, because these metadata files, the variant

297
00:17:33,889 --> 00:17:35,669
files, which are essentially metadata files,

298
00:17:36,630 --> 00:17:39,391
referenced our models. So, okay, it's

299
00:17:39,591 --> 00:17:41,913
basically one step from reading some XML

300
00:17:41,933 --> 00:17:44,114
data to then reading the model files to

301
00:17:44,134 --> 00:17:46,415
then simulating what a unit would behave

302
00:17:46,475 --> 00:17:49,637
like in the game engine, which meant you

303
00:17:49,657 --> 00:17:50,998
could measure things like draw calls

304
00:17:51,038 --> 00:17:53,839
without ever starting the game up. That

305
00:17:53,859 --> 00:17:56,001
also led to ideas for future

306
00:17:56,061 --> 00:17:57,922
performance improvement systems because

307
00:17:58,282 --> 00:18:00,263
again we understood the data much better

308
00:18:00,323 --> 00:18:02,064
now because it was just formatted in a

309
00:18:02,124 --> 00:18:03,144
more human-friendly way.

310
00:18:04,340 --> 00:18:08,221
Most importantly though, it also led to the creation of our entire UI pipeline.

311
00:18:08,441 --> 00:18:09,921
So that's pretty significant as well.

312
00:18:10,942 --> 00:18:13,662
What this essentially is, is an example of an accelerator.

313
00:18:13,942 --> 00:18:17,403
It's something that on the user's side is actually a net zero change.

314
00:18:17,603 --> 00:18:20,004
But on the development side, it makes a huge difference.

315
00:18:20,524 --> 00:18:24,425
Because the simplification of data led to a much deeper understanding of it, which in

316
00:18:24,485 --> 00:18:26,106
turn led to better processes.

317
00:18:26,606 --> 00:18:30,467
Because these processes could now be informed by this deeper understanding of the data.

318
00:18:32,300 --> 00:18:35,364
That then leads me to the second example that I brought with me today,

319
00:18:35,524 --> 00:18:37,366
which is Total War Arena's UI pipeline.

320
00:18:37,547 --> 00:18:39,169
I've referenced it a few times so far,

321
00:18:39,749 --> 00:18:41,512
so I'm sure you're all curious to see what it looks like.

322
00:18:42,413 --> 00:18:46,718
So, the problem that we had on Arena was that UI production is quite expensive.

323
00:18:46,778 --> 00:18:49,001
I'm sure this is a common problem in almost any production.

324
00:18:49,822 --> 00:18:52,204
But on Arena, we had a lot of icons.

325
00:18:52,365 --> 00:18:54,827
This is also a fairly common problem.

326
00:18:55,007 --> 00:18:57,990
On Arena, we had hundreds, I think actually thousands,

327
00:18:58,010 --> 00:18:58,530
of icons.

328
00:18:59,271 --> 00:19:00,612
Every single equipment in our game,

329
00:19:00,792 --> 00:19:04,555
and you have to imagine, when the game shut down,

330
00:19:04,595 --> 00:19:07,258
we had four factions, each of which had 50 units,

331
00:19:07,478 --> 00:19:09,079
each of which had five equipments,

332
00:19:09,820 --> 00:19:10,781
and three upgrade levels.

333
00:19:10,981 --> 00:19:12,402
So you can do the math on that one.

334
00:19:13,323 --> 00:19:14,965
Most of those had unique icons.

335
00:19:16,166 --> 00:19:20,652
On top of that we had things like unit cards, commander portraits. We had I think

336
00:19:20,672 --> 00:19:27,282
30-ish commanders each of which had a few cosmetic skins. So those needed icons as well.

337
00:19:28,409 --> 00:19:31,110
That's a bit high maintenance because content changes,

338
00:19:31,230 --> 00:19:32,790
things like character artists changing

339
00:19:32,830 --> 00:19:34,890
what a shield looks like, for example,

340
00:19:34,930 --> 00:19:37,891
would require the icon to be updated to reflect the changes.

341
00:19:38,471 --> 00:19:40,391
That's really not that scalable.

342
00:19:40,732 --> 00:19:43,232
To give you really an idea of just the scale

343
00:19:43,552 --> 00:19:46,693
that this problem has, this is a tiny sampling

344
00:19:46,933 --> 00:19:49,353
of the amount of icons we actually have in our game.

345
00:19:49,793 --> 00:19:51,774
These are just all equipment icons, by the way,

346
00:19:51,834 --> 00:19:53,934
not commander portraits, not achievement icons,

347
00:19:53,994 --> 00:19:56,015
not skill icons, and not unit portraits.

348
00:19:56,775 --> 00:20:00,759
So that really gives you an idea of just how high maintenance our pipeline was.

349
00:20:02,040 --> 00:20:04,963
So again, we took the same approach as we did on the first example.

350
00:20:05,764 --> 00:20:07,245
How is the data maintained?

351
00:20:07,826 --> 00:20:10,529
Well, that question was answered rather quickly.

352
00:20:11,530 --> 00:20:15,514
Basically, a ui artist would go into the game engine,

353
00:20:15,654 --> 00:20:19,197
take a screenshot of whatever asset they would make an icon for.

354
00:20:19,898 --> 00:20:22,560
take it into Photoshop, and then after 30 minutes of,

355
00:20:23,060 --> 00:20:24,681
actually not after 30 minutes of work,

356
00:20:24,761 --> 00:20:26,823
the reason it says 30 minutes is because opening

357
00:20:26,843 --> 00:20:28,484
the game engine and the various tools

358
00:20:28,644 --> 00:20:29,685
takes some time as well.

359
00:20:30,206 --> 00:20:32,287
So for a single icon, it might take 30 minutes.

360
00:20:32,327 --> 00:20:33,568
For 10 icons, it might take 35.

361
00:20:34,068 --> 00:20:36,070
I'm sure you're all familiar with this type of problem.

362
00:20:36,930 --> 00:20:39,412
But even so, the overhead is quite large

363
00:20:39,532 --> 00:20:40,713
and really not sustainable.

364
00:20:42,014 --> 00:20:44,496
So we found this is really not scalable,

365
00:20:44,656 --> 00:20:46,518
super high maintenance, and we needed to change this.

366
00:20:47,576 --> 00:20:53,620
So, stepping back then, I think a good way to do that is basically to abstract what you're doing.

367
00:20:54,801 --> 00:21:02,146
We actually asked ourselves, we have a toolbox of stuff, like we have solutions and other projects that have similar problems,

368
00:21:02,266 --> 00:21:07,309
and maybe we have some things in place, some pieces of tech that we can scrap from other solutions.

369
00:21:09,010 --> 00:21:12,573
Okay, so we had an existing Python code base.

370
00:21:13,628 --> 00:21:17,269
We had everything from version control to image manipulation tools,

371
00:21:17,329 --> 00:21:19,630
the ability to interact with our game data,

372
00:21:20,771 --> 00:21:26,253
and just general Python implementations for all kinds of solutions.

373
00:21:26,793 --> 00:21:28,954
What we also had was Marmoset Toolbag 3.

374
00:21:29,515 --> 00:21:30,815
This is where it gets really interesting.

375
00:21:31,575 --> 00:21:33,997
Just a month before we had this problem,

376
00:21:34,118 --> 00:21:36,800
or rather just a month before we decided there was a problem,

377
00:21:38,161 --> 00:21:42,485
Python 3, I'm sorry, Marmoset Toolbag 3.03 shipped.

378
00:21:43,105 --> 00:21:45,047
It included Python 3.6 support.

379
00:21:45,647 --> 00:21:47,229
Now this became really interesting for us

380
00:21:47,329 --> 00:21:49,791
because at the time, suddenly we found,

381
00:21:49,951 --> 00:21:51,592
oh, we have this existing code base.

382
00:21:52,473 --> 00:21:54,853
Our artists know how to use Marmoset Toolbag 3,

383
00:21:55,434 --> 00:21:57,954
and Marmoset Toolbag 3 has a proven track record

384
00:21:58,134 --> 00:22:00,695
of just making really pretty renders.

385
00:22:01,195 --> 00:22:02,255
And now it has a Python API.

386
00:22:02,356 --> 00:22:04,396
I think we can probably do a few things there.

387
00:22:05,416 --> 00:22:07,137
We also had the Substance Batch tools.

388
00:22:07,997 --> 00:22:10,438
On Total War, we used the Substance Automation Toolkit

389
00:22:10,518 --> 00:22:13,118
quite a bit, mostly in a headless fashion.

390
00:22:13,759 --> 00:22:16,199
Usually we use this for image processing

391
00:22:16,239 --> 00:22:17,520
between various applications.

392
00:22:18,597 --> 00:22:22,223
On Total War Arena, actually the implementation we had for the Substance Automation Toolkit

393
00:22:22,503 --> 00:22:25,127
was to get our textures from Substance Painter into the game.

394
00:22:26,628 --> 00:22:32,554
Basically what we did is in Substance Painter, our textures would be authored in the Substance

395
00:22:32,594 --> 00:22:36,738
default metalness roughness shading model, but our game engine didn't actually have that

396
00:22:37,038 --> 00:22:37,599
shading model.

397
00:22:37,839 --> 00:22:41,903
So we used Substance to transform our textures into a different lighting model.

398
00:22:42,304 --> 00:22:47,969
That sounds counterintuitive, but what that means is because we were under the assumption

399
00:22:47,989 --> 00:22:50,272
that our assets would be used on other projects as well.

400
00:22:50,912 --> 00:22:55,975
Basically all we needed to do was to change that process for a different game engine

401
00:22:56,275 --> 00:23:00,477
and then our assets would be globally compatible with every project on Total War.

402
00:23:02,258 --> 00:23:05,719
So this is what we use the Substance Batch tools for, so we knew we had a track record

403
00:23:05,739 --> 00:23:07,220
of like, we can do something with this.

404
00:23:08,338 --> 00:23:11,560
So the idea then became, why don't we just take a screenshot

405
00:23:11,660 --> 00:23:14,341
from an asset that's been set up in Marmoset,

406
00:23:14,982 --> 00:23:16,662
pipe it through Substance Designer Graph,

407
00:23:16,963 --> 00:23:18,343
and then just put it into the game?

408
00:23:18,804 --> 00:23:20,104
I'm sure we can do something with that.

409
00:23:20,985 --> 00:23:22,165
So, well, basically, yeah.

410
00:23:22,966 --> 00:23:25,467
We had a proof of concept working in less than an hour,

411
00:23:25,627 --> 00:23:27,128
which was really impressive for us,

412
00:23:28,129 --> 00:23:32,171
which mostly is down to the power of the Toolbag API.

413
00:23:33,292 --> 00:23:36,133
While it's a bit nascent, it is very good at what it does

414
00:23:36,333 --> 00:23:37,154
and extremely fast.

415
00:23:38,094 --> 00:23:41,696
It's also production capable- our tool is also production capable in under a day.

416
00:23:42,056 --> 00:23:44,317
That doesn't mean that it was an actual tool.

417
00:23:44,437 --> 00:23:46,238
Again, this is a talk about duct tape.

418
00:23:47,158 --> 00:23:51,020
I don't have a video or a screenshot of what that thing looked like,

419
00:23:51,100 --> 00:23:52,321
and I will never show it to anyone.

420
00:23:54,122 --> 00:23:56,903
What I do have is a video of what it looked like a month ago,

421
00:23:57,143 --> 00:23:59,384
because I'm going to pretend that this is what it always looked like.

422
00:24:00,758 --> 00:24:06,741
So basically what we did is we built a tool that allows us to set up lighting and camera

423
00:24:06,761 --> 00:24:12,905
settings and basically any kind of settings in a single Marmoset scene that then allows

424
00:24:13,345 --> 00:24:18,248
us to duplicate the settings in other scenes that already just have a model set up in them.

425
00:24:18,868 --> 00:24:21,110
What that means is you only have to light a single scene,

426
00:24:21,210 --> 00:24:23,771
and you can reuse that setup in all of your renders.

427
00:24:24,092 --> 00:24:26,894
Which really, because of the speed of Marmoset,

428
00:24:26,974 --> 00:24:29,315
means that your iteration time becomes extremely low.

429
00:24:29,936 --> 00:24:32,818
What you see happen here is commander portraits,

430
00:24:33,078 --> 00:24:36,381
specifically for Ambiorix is being used as a test asset.

431
00:24:36,941 --> 00:24:39,224
But for keen-eyed among you,

432
00:24:39,244 --> 00:24:41,287
I actually don't know if it's legible, probably not,

433
00:24:41,388 --> 00:24:44,051
but the asset in this video is actually

434
00:24:44,552 --> 00:24:46,475
parented to a group called underscore ignore,

435
00:24:46,495 --> 00:24:48,698
so the pipeline is just not implementing

436
00:24:48,758 --> 00:24:50,441
that particular mesh in the render

437
00:24:50,521 --> 00:24:51,522
for the other commanders.

438
00:24:51,963 --> 00:24:53,985
but obviously it's useful to have a test asset.

439
00:24:54,065 --> 00:24:57,588
So it's just duplicating the lighting, the render settings,

440
00:24:57,628 --> 00:25:00,150
the camera angle, camera position, and everything else

441
00:25:00,331 --> 00:25:01,892
for all of those other commanders, which

442
00:25:01,932 --> 00:25:03,734
we've posed in the same pose.

443
00:25:04,314 --> 00:25:06,356
Obviously, this also requires that your commanders

444
00:25:06,396 --> 00:25:10,220
have the same bodily shape and general proportions.

445
00:25:10,820 --> 00:25:13,022
But basically, what you can do is if they don't,

446
00:25:13,082 --> 00:25:14,523
you can just make another template.

447
00:25:15,324 --> 00:25:18,790
and merge in lighting from one template and a camera from another.

448
00:25:19,411 --> 00:25:22,516
So there are various things that you can do to deal with that.

449
00:25:23,452 --> 00:25:25,232
At that point, what you have is a raw render.

450
00:25:25,252 --> 00:25:28,193
Obviously, that can't really go to the game engine.

451
00:25:28,333 --> 00:25:30,614
Sometimes it might, depending on your setup,

452
00:25:30,814 --> 00:25:34,075
but you probably will want to do something like transparency,

453
00:25:34,215 --> 00:25:36,556
maybe some cropping, maybe adding a frame onto it.

454
00:25:36,856 --> 00:25:38,936
That's where Substance Designer basically comes in.

455
00:25:39,056 --> 00:25:40,797
Any Substance Designer artist will

456
00:25:40,817 --> 00:25:42,798
be able to turn that image into something

457
00:25:42,818 --> 00:25:43,998
that can go into the game.

458
00:25:45,018 --> 00:25:47,579
Those networks ended up being rather simple.

459
00:25:49,312 --> 00:25:50,472
So why is this really duct tape?

460
00:25:50,773 --> 00:25:52,634
Well, the proof of concept was created

461
00:25:52,674 --> 00:25:53,695
and working in two days.

462
00:25:54,275 --> 00:25:55,676
It was a very quick turnaround,

463
00:25:56,056 --> 00:25:57,597
and it was designed for single use,

464
00:25:58,178 --> 00:26:00,800
and mostly not designed for other work either.

465
00:26:02,060 --> 00:26:04,822
The original version of the tool was so hacky

466
00:26:04,902 --> 00:26:07,944
that I actually had to alter the code

467
00:26:07,984 --> 00:26:09,546
while a UI artist was sitting next to me.

468
00:26:10,206 --> 00:26:12,007
But we did get the content out on time.

469
00:26:12,608 --> 00:26:15,430
We went from production saying, we need this now,

470
00:26:15,670 --> 00:26:17,912
to we have the content in a couple of days.

471
00:26:18,412 --> 00:26:20,734
So that was actually a super quick turnaround.

472
00:26:20,774 --> 00:26:23,936
And we ended up producing 200 assets in a couple of days.

473
00:26:25,139 --> 00:26:28,922
So really at that time, because it was so,

474
00:26:30,183 --> 00:26:32,805
not badly implemented, but because it was such a hack,

475
00:26:32,885 --> 00:26:34,887
it wouldn't even have been useful on other projects.

476
00:26:34,947 --> 00:26:37,569
In fact, not two weeks after we produced the content,

477
00:26:37,649 --> 00:26:39,571
it broke because of some environment thing.

478
00:26:40,091 --> 00:26:41,572
We never really figured out what it was.

479
00:26:42,653 --> 00:26:44,475
But obviously, that's not really the point.

480
00:26:44,515 --> 00:26:46,096
The point is we got the content out

481
00:26:46,256 --> 00:26:48,698
and we learned about the solutions that we needed.

482
00:26:49,359 --> 00:26:53,262
In fact, what's important to note about that is really this implementation was

483
00:26:53,422 --> 00:26:57,846
only possible because of the data work from the previous example. The reason for

484
00:26:57,886 --> 00:27:02,369
this is because our variant data files that I referred to in that I referred to

485
00:27:02,389 --> 00:27:06,953
in the first example were now so simplified that we knew how to interact

486
00:27:06,993 --> 00:27:10,856
with our data and know and we knew where to find the models that would make up a

487
00:27:10,916 --> 00:27:13,358
particular equipment or a particular configuration.

488
00:27:14,019 --> 00:27:18,983
We also knew where to get the FBX files, the TGA files, and everything else from our resource

489
00:27:19,003 --> 00:27:21,264
folders to then import into Marmoset.

490
00:27:21,605 --> 00:27:26,549
The biggest challenge by far for this pipeline was not to take the screenshot, it was to

491
00:27:26,589 --> 00:27:28,470
get the stuff into Marmoset in the first place.

492
00:27:29,051 --> 00:27:35,316
Because obviously interacting with game data information, you can't directly import some

493
00:27:35,436 --> 00:27:38,959
custom binary format into Marmoset, so you have to get an FBX file.

494
00:27:39,659 --> 00:27:43,641
our pipelines were not optimized to provide this FBX file in the first place,

495
00:27:44,181 --> 00:27:49,843
but because of the simplification of data we were much more able to create some sort of patched

496
00:27:49,883 --> 00:27:55,745
solution that would export those FBXs that we needed. So that was actually really convenient

497
00:27:55,765 --> 00:28:01,727
for us. But importantly as well is because we now understood our data much better,

498
00:28:02,767 --> 00:28:06,050
we wouldn't have had the idea to make this pipeline in the first place

499
00:28:06,370 --> 00:28:07,451
had that not been the case.

500
00:28:07,991 --> 00:28:09,452
And I think that's really the key message here.

501
00:28:10,213 --> 00:28:15,517
So, this tool, or rather the first duct tape implementation of it

502
00:28:15,557 --> 00:28:17,519
was used in production while prototyping.

503
00:28:18,299 --> 00:28:21,602
Production work with the tool was actually mostly done by myself

504
00:28:21,902 --> 00:28:24,083
with a U-Artist sitting next to me, like I said earlier,

505
00:28:24,704 --> 00:28:27,786
me actually altering the code while we were doing the actual work.

506
00:28:29,407 --> 00:28:36,851
But key to that is that actually working with the tool led to a host of improvements later on that we would otherwise never have conceived of.

507
00:28:37,431 --> 00:28:43,153
I think that's a phenomenon that any tool developer can relate to, is you probably have a good idea of how you want your tool to work,

508
00:28:43,213 --> 00:28:47,595
but actually working with it usually leads to insights that you just can't have otherwise.

509
00:28:49,225 --> 00:28:55,494
So, this is where also the distinction between it being a hack or it being duct tape really

510
00:28:55,534 --> 00:28:55,955
comes in.

511
00:28:57,497 --> 00:29:01,483
If you consider something to be duct tape, at least in the meaning of the term of this

512
00:29:01,523 --> 00:29:05,428
talk, is that you are going to rip the bandaid off later.

513
00:29:06,690 --> 00:29:08,351
many quick iterations early on really,

514
00:29:08,371 --> 00:29:10,472
and that resulted in a much more robust tool than the Lion,

515
00:29:10,492 --> 00:29:12,853
but we rewrote the entire thing from scratch.

516
00:29:13,134 --> 00:29:15,815
Every single line of code was rewritten.

517
00:29:15,935 --> 00:29:17,476
In fact, the original prototype

518
00:29:17,516 --> 00:29:19,037
was never even submitted to Perforce

519
00:29:19,077 --> 00:29:20,218
because I refused to do that.

520
00:29:22,759 --> 00:29:23,439
But there's a catch.

521
00:29:24,160 --> 00:29:26,361
Everything you just saw is built on one thing,

522
00:29:26,501 --> 00:29:29,783
and I really want to see if anyone can guess what it is.

523
00:29:29,823 --> 00:29:30,904
I'm going to give you 20 seconds.

524
00:29:32,445 --> 00:29:32,505
No?

525
00:29:34,450 --> 00:29:36,253
Alright, so file conventions.

526
00:29:37,534 --> 00:29:40,678
Anyone who knows me knows that I'm a naming conventions guy.

527
00:29:40,818 --> 00:29:45,303
In fact, when I went to do a talk in London at industry workshops,

528
00:29:45,383 --> 00:29:47,606
which is like a super artistic convention,

529
00:29:48,087 --> 00:29:51,851
I managed to somehow amuse 45 artists long enough

530
00:29:51,891 --> 00:29:54,835
that they stuck around for a 50-minute presentation on folder structures.

531
00:29:57,327 --> 00:29:57,527
Yes.

532
00:29:59,167 --> 00:30:04,469
So, the reason why I really hammer on this, and I swear I will have something about naming

533
00:30:04,509 --> 00:30:09,351
conventions on my gravestone, is that good conventions really make tool development easier.

534
00:30:09,491 --> 00:30:11,892
Any tool developer can confirm this.

535
00:30:12,672 --> 00:30:15,915
Because if your data is all formatted in a consistent way,

536
00:30:16,315 --> 00:30:18,777
then the amount of lines that you have to write

537
00:30:19,297 --> 00:30:20,738
to deal with edge cases

538
00:30:21,378 --> 00:30:23,700
goes from an entire framework

539
00:30:23,920 --> 00:30:26,182
just to deal with edge cases to, in our case,

540
00:30:26,222 --> 00:30:28,063
we basically didn't deal with edge cases.

541
00:30:28,123 --> 00:30:29,604
We just let the edge cases fail.

542
00:30:30,325 --> 00:30:32,927
Because our data was formatted in such a good way

543
00:30:33,067 --> 00:30:35,368
that even at a 10% failure rate,

544
00:30:35,388 --> 00:30:36,729
we would just deal with the 10%

545
00:30:36,809 --> 00:30:37,870
rather than doing it in code.

546
00:30:39,480 --> 00:30:45,103
It also makes prototyping a lot faster because, again, you don't have to start at a point

547
00:30:45,183 --> 00:30:47,745
where you're still trying to get to the data in the first place.

548
00:30:48,325 --> 00:30:53,728
If you automatically know where the data is and how to interact with it, again, by simplifying

549
00:30:53,748 --> 00:30:55,909
the data, that's a really good first step.

550
00:30:56,489 --> 00:31:00,451
Your prototyping is going to be so much faster because you can start at the point of your

551
00:31:00,471 --> 00:31:04,253
prototype where your prototype will immediately do what it's designed to do.

552
00:31:05,153 --> 00:31:07,675
just maybe not in the best way, but that's why it's a prototype.

553
00:31:07,895 --> 00:31:12,577
But if it has to interact with data and you don't have the data to begin with, then prototyping

554
00:31:12,617 --> 00:31:13,817
is just a whole lot slower.

555
00:31:15,398 --> 00:31:19,020
It also makes tools more reliable, because again, if your tools don't have to worry about

556
00:31:19,140 --> 00:31:25,523
edge cases and essentially don't implement behavior that will deal with edge cases, it

557
00:31:25,563 --> 00:31:30,065
means that the actual behavior that the tool is designed to do will be a lot more reliable,

558
00:31:30,205 --> 00:31:33,946
because you can just tell an artist who says the tool doesn't work to format their data

559
00:31:33,986 --> 00:31:34,347
properly.

560
00:31:36,099 --> 00:31:39,902
Our conventions really in this case meant that validation was easier because, well,

561
00:31:39,942 --> 00:31:40,643
we didn't do any.

562
00:31:41,904 --> 00:31:44,706
It also means that the use of duct tape was a lot safer.

563
00:31:45,206 --> 00:31:50,110
Basically what we did is because we had this reliable database of data, essentially, we

564
00:31:50,150 --> 00:31:52,452
knew where to find our models, we knew where to find our textures.

565
00:31:53,436 --> 00:31:58,560
It meant that we could just take a branch or a copy of the original data and do some

566
00:31:59,441 --> 00:32:04,705
transforms on it, do some animation on it, make the character pose, but we knew we didn't

567
00:32:04,805 --> 00:32:06,126
have to touch the original data.

568
00:32:06,166 --> 00:32:09,888
We just left the original data intact and just made a copy and then worked on the copy.

569
00:32:10,389 --> 00:32:13,691
But because we always knew where to find the source, we could just do that again and again

570
00:32:13,731 --> 00:32:17,774
and again and always make sure that we can go back to that source, which meant that our

571
00:32:17,794 --> 00:32:22,298
original data, formatted in the way it was, served as a safety net independent of any

572
00:32:22,438 --> 00:32:22,858
one tool.

573
00:32:23,358 --> 00:32:25,099
because everything fails sooner or later

574
00:32:25,159 --> 00:32:26,619
in every game development process.

575
00:32:27,199 --> 00:32:28,520
And if you have that safety net,

576
00:32:28,660 --> 00:32:30,440
it means you can just always go back to the source.

577
00:32:32,101 --> 00:32:33,501
Obviously that's easier said than done.

578
00:32:33,541 --> 00:32:36,222
Good conventions are really hard and they take a lot of work.

579
00:32:36,342 --> 00:32:38,922
So I brought with me three golden rules

580
00:32:39,142 --> 00:32:42,483
for good conventions that I hope you'll take home with you.

581
00:32:43,697 --> 00:32:46,119
First one is that good conventions take a lot of work

582
00:32:46,700 --> 00:32:48,681
because they require constant evaluation

583
00:32:48,801 --> 00:32:50,303
but not constant change.

584
00:32:50,943 --> 00:32:53,025
That's a really important distinction.

585
00:32:54,005 --> 00:32:55,407
What we actually do on Total War

586
00:32:55,607 --> 00:32:57,428
is when we come up with a new naming convention

587
00:32:57,508 --> 00:32:59,110
or an iteration on an existing one

588
00:32:59,230 --> 00:33:01,451
for a new project or a new branch

589
00:33:01,511 --> 00:33:02,993
or a new DLC or whatever,

590
00:33:03,933 --> 00:33:05,655
we actually sit down in a meeting room

591
00:33:05,855 --> 00:33:07,836
and I will stress this until the day I die,

592
00:33:07,876 --> 00:33:09,117
there is no amount of work

593
00:33:09,198 --> 00:33:11,219
that you can put in a naming convention that is too much.

594
00:33:12,020 --> 00:33:15,721
Because six months down the line, suddenly you realize,

595
00:33:15,861 --> 00:33:17,401
oh, your convention wasn't strong enough

596
00:33:17,461 --> 00:33:18,862
to deal with this new pipeline.

597
00:33:19,362 --> 00:33:22,123
Well, OK, that's 6,000 man hours down the drain

598
00:33:22,243 --> 00:33:24,583
just to transfer those 10,000 assets

599
00:33:24,623 --> 00:33:26,344
into the new convention that does deal with it.

600
00:33:27,584 --> 00:33:30,405
Or you build some patched tech to deal with the new change,

601
00:33:30,485 --> 00:33:31,866
and then suddenly you have technical debt.

602
00:33:33,066 --> 00:33:34,506
If you just avoid it to begin with,

603
00:33:34,626 --> 00:33:36,467
then if your conventions are good enough

604
00:33:36,527 --> 00:33:38,167
to deal with whatever you're going to encounter,

605
00:33:38,948 --> 00:33:41,228
well, that's going to save you a lot of time down the line.

606
00:33:42,212 --> 00:33:45,995
So good evaluation but not constant change essentially means when you nail down your

607
00:33:46,015 --> 00:33:48,097
conventions just do a review.

608
00:33:48,878 --> 00:33:52,881
For us we actually validate the very first submission in a new convention.

609
00:33:53,541 --> 00:33:57,985
The first submission for art in the new naming convention will not go into Perforce until

610
00:33:58,025 --> 00:33:59,386
a tech artist actually approves it.

611
00:33:59,967 --> 00:34:02,529
What we then do is one week in we do another evaluation.

612
00:34:03,722 --> 00:34:06,523
as much to see if the conventions are being respected

613
00:34:06,804 --> 00:34:09,125
as to see that the conventions actually hold up

614
00:34:09,225 --> 00:34:10,286
under the stress of production.

615
00:34:11,106 --> 00:34:13,007
And then we do the same thing a month afterwards,

616
00:34:13,708 --> 00:34:15,749
again, to see if the conventions are good,

617
00:34:15,829 --> 00:34:17,530
but also to see if they're being enforced.

618
00:34:17,730 --> 00:34:19,652
So it's kind of a two-way street

619
00:34:19,752 --> 00:34:22,133
where you ensure that your conventions are strong enough,

620
00:34:22,193 --> 00:34:23,874
but also that they're being enforced properly.

621
00:34:24,515 --> 00:34:29,599
This also allows you to nip certain mistakes in the bud really early on while you're still

622
00:34:29,619 --> 00:34:34,564
in your prototyping phase to make sure that you provide enough data for your future pipelines

623
00:34:34,824 --> 00:34:35,745
all to all work.

624
00:34:36,105 --> 00:34:41,490
An example of what we maybe could have done on Total War Arena was to always export an

625
00:34:41,570 --> 00:34:47,675
FBX file with a MAX file just to ensure that any pipeline that might make use of it would

626
00:34:47,715 --> 00:34:47,996
have it.

627
00:34:48,196 --> 00:34:50,738
We have plenty of space on Perforce, so there's no reason not to do it.

628
00:34:51,259 --> 00:34:54,641
So in hindsight, we could have always exported an FBX file

629
00:34:54,681 --> 00:34:56,122
and we could have skipped an entire step

630
00:34:56,142 --> 00:34:57,282
in our prototyping process.

631
00:34:58,924 --> 00:35:00,565
The second, and this is, I think,

632
00:35:00,865 --> 00:35:02,106
one of the most important ones,

633
00:35:02,706 --> 00:35:05,028
but not necessarily one of the most intuitive ones,

634
00:35:05,228 --> 00:35:06,969
is a strong underpinning philosophy.

635
00:35:07,929 --> 00:35:10,651
What this really means is that you have to have something

636
00:35:10,691 --> 00:35:12,573
that can underbuild your naming conventions

637
00:35:12,933 --> 00:35:14,774
that can be summed up in a mantra.

638
00:35:16,115 --> 00:35:18,536
The three steps that I say there is print it,

639
00:35:18,837 --> 00:35:19,937
workshop it, teach it.

640
00:35:20,787 --> 00:35:23,230
Because what we actually did on Total War Arena

641
00:35:23,411 --> 00:35:26,976
is we had a half hour workshop where I actually

642
00:35:27,116 --> 00:35:29,339
taught the artists our naming conventions,

643
00:35:29,920 --> 00:35:32,143
essentially taking them through the steps

644
00:35:32,183 --> 00:35:34,927
that I would take to come up with the name for the file.

645
00:35:35,959 --> 00:35:42,602
What that actually resulted in is maybe 10 minutes of a summing up of the mantra of the naming convention,

646
00:35:42,742 --> 00:35:44,882
if you will, the summing up in five sentences,

647
00:35:45,323 --> 00:35:47,563
and then 15 minutes of actual exercises.

648
00:35:47,603 --> 00:35:49,644
I would give them an image and tell them to label it.

649
00:35:50,724 --> 00:35:52,185
And that actually made it.

650
00:35:52,505 --> 00:35:55,446
It sounds silly, but two years afterward,

651
00:35:55,566 --> 00:35:58,087
I hadn't done a single correction to any submission.

652
00:35:59,693 --> 00:36:02,995
sit for two years, which is something that I've never seen before.

653
00:36:03,755 --> 00:36:06,657
So our naming conventions essentially became self-reinforcing.

654
00:36:06,697 --> 00:36:08,578
We taught them how to fish, in other words.

655
00:36:09,559 --> 00:36:13,581
A good example of what a strong underpinning philosophy might be, in our case one of the

656
00:36:13,622 --> 00:36:17,164
strongest we have, is call it what it is, not what it's used for.

657
00:36:18,188 --> 00:36:22,190
A good example of in a real world object where that might be the case is if you have a simple

658
00:36:22,230 --> 00:36:22,770
Lego brick.

659
00:36:23,230 --> 00:36:29,993
Lego will label their bricks as a 6x2 or 4x2 or a wheel, but they won't say it's a wheel

660
00:36:30,033 --> 00:36:32,634
for a police car because it might be on a fire truck.

661
00:36:32,994 --> 00:36:37,376
So that's an important distinction between what it is versus what it's used for.

662
00:36:38,246 --> 00:36:40,867
It's true that for some assets these two things will overlap,

663
00:36:40,987 --> 00:36:43,248
but if you keep a conscious distinction between the two,

664
00:36:43,528 --> 00:36:46,068
then you'll find that you're prepared for way more use cases

665
00:36:46,168 --> 00:36:49,329
because what it results in is essentially a Lego kit

666
00:36:49,529 --> 00:36:51,170
that your designers can use,

667
00:36:51,370 --> 00:36:52,750
and they're free to change their minds

668
00:36:52,871 --> 00:36:54,731
without the fundamental naming conventions

669
00:36:54,771 --> 00:36:55,671
and labeling systems.

670
00:36:56,312 --> 00:37:00,234
of your entire repository needing to change to deal with design changes.

671
00:37:00,734 --> 00:37:06,557
This is not because the underlying thinking there is not that we don't want design to change their

672
00:37:06,577 --> 00:37:12,840
mind, we want them to be able to change their mind without needing to overhaul our entire repository

673
00:37:13,300 --> 00:37:17,162
because for game design it's just as much an iterative process as any other craft.

674
00:37:18,523 --> 00:37:20,504
Lastly, consistent enforcement.

675
00:37:20,604 --> 00:37:23,045
I think this is the one that requires the least explanation.

676
00:37:23,526 --> 00:37:25,086
The only solution we found for that

677
00:37:25,166 --> 00:37:26,907
was just make people clean up their own mess.

678
00:37:28,328 --> 00:37:31,169
If they make a wrong submission, just make him fix it,

679
00:37:31,489 --> 00:37:32,870
and they won't do it again.

680
00:37:32,890 --> 00:37:35,131
And if they do, just make him fix it again until they stop.

681
00:37:38,519 --> 00:37:41,561
So, we're nearing the, I think,

682
00:37:41,581 --> 00:37:42,921
the last third of the presentation.

683
00:37:43,642 --> 00:37:45,282
What we learned, looking back,

684
00:37:45,803 --> 00:37:48,284
there are a few things that we learned from this process.

685
00:37:49,719 --> 00:37:53,501
Basically, tunnel vision is the enemy of any production.

686
00:37:54,141 --> 00:37:57,242
It's all about the big picture and your solutions really only

687
00:37:57,282 --> 00:37:59,243
make sense in the context of the product

688
00:37:59,263 --> 00:37:59,944
that they're meant for.

689
00:38:00,684 --> 00:38:03,685
So what you should do there, this is a really tricky one.

690
00:38:03,765 --> 00:38:05,706
There's not really a golden solution for that.

691
00:38:05,806 --> 00:38:07,787
But what we found is that regular follow-up

692
00:38:07,847 --> 00:38:09,788
productions of three evaluations,

693
00:38:11,329 --> 00:38:16,351
help basically. The questions you have to ask is do the solution, does the

694
00:38:16,391 --> 00:38:21,573
solution still fit the project? Do you really need that asset processor or is

695
00:38:22,353 --> 00:38:25,755
your production requirement, has it changed? Does it

696
00:38:25,775 --> 00:38:29,476
need to do things that it wasn't designed for? Does it call for a new tool

697
00:38:29,756 --> 00:38:33,438
or can you use a different tool for it that's maybe better at dealing with the

698
00:38:33,478 --> 00:38:33,698
data?

699
00:38:34,366 --> 00:38:36,827
A good example of that might be that, for example,

700
00:38:36,867 --> 00:38:40,027
we could have made our game engine produce the UI icons

701
00:38:40,107 --> 00:38:42,128
because it's basically already a renderer,

702
00:38:42,848 --> 00:38:45,529
but it would have added a bunch of overhead

703
00:38:45,729 --> 00:38:47,869
and it didn't have the render features that Toolbag had.

704
00:38:48,289 --> 00:38:51,570
What we have now instead is a rendering pipeline

705
00:38:51,710 --> 00:38:54,691
in Marmoset Toolbag that is compatible with any 3D data,

706
00:38:55,131 --> 00:38:57,031
including data that wasn't necessarily meant

707
00:38:57,071 --> 00:38:57,751
for the game engine.

708
00:38:58,916 --> 00:39:01,598
So that really gave us a much more powerful tool

709
00:39:01,638 --> 00:39:03,899
than I think the game engine would realistically

710
00:39:03,940 --> 00:39:05,000
have been able to implement.

711
00:39:06,882 --> 00:39:08,623
It's also important to evaluate your tools

712
00:39:08,663 --> 00:39:10,204
in the context of the whole project,

713
00:39:10,324 --> 00:39:12,806
because the first question you always must ask

714
00:39:13,006 --> 00:39:14,847
is, can the need for this tool be eliminated?

715
00:39:15,908 --> 00:39:18,670
Obviously, a shorter pipeline is always going to be more stable,

716
00:39:19,250 --> 00:39:20,771
and fewer tools is always better.

717
00:39:21,552 --> 00:39:24,094
So the question also there is, is another tool

718
00:39:24,114 --> 00:39:24,814
more appropriate?

719
00:39:24,914 --> 00:39:26,635
Again, that's the comparison between should we

720
00:39:26,655 --> 00:39:28,196
have used the game engine or Marmoset.

721
00:39:31,043 --> 00:39:34,506
Also, lots of things actually do require a proper solution now.

722
00:39:35,286 --> 00:39:38,209
Using a duct tape solution to learn from is,

723
00:39:38,749 --> 00:39:40,971
it shouldn't be your go-to solution, I would say.

724
00:39:42,072 --> 00:39:45,515
It's not always obvious and errors in judgment can happen for this,

725
00:39:45,615 --> 00:39:48,697
but it's kind of up to your own intuition about whether to

726
00:39:48,858 --> 00:39:51,179
use a hack to just get the content out,

727
00:39:51,500 --> 00:39:54,462
or rather duct tape to just get the content out,

728
00:39:54,662 --> 00:39:59,126
or to go through the motions of just prototype development delivery.

729
00:40:00,047 --> 00:40:04,089
it's kind of really up to the context in this specific situation that you're in.

730
00:40:06,251 --> 00:40:09,593
So, some of the more important lessons are as well,

731
00:40:09,753 --> 00:40:12,075
if you do use duct tape solutions,

732
00:40:12,876 --> 00:40:14,076
for the love of God, get rid of them.

733
00:40:15,217 --> 00:40:18,279
Because patch tech like this accumulates technical debt very quickly.

734
00:40:19,080 --> 00:40:21,321
These kinds of solutions are beautiful to learn from.

735
00:40:21,602 --> 00:40:23,483
It allows you to look to teach yourself.

736
00:40:24,343 --> 00:40:28,204
the solution you actually need instead of the one you think you need.

737
00:40:28,464 --> 00:40:32,045
Again, going back to the first example where we had

738
00:40:32,665 --> 00:40:35,506
an editor that wasn't really equipped to deal with the new data,

739
00:40:36,066 --> 00:40:39,287
and the straightforward solution was just implement database behavior.

740
00:40:40,307 --> 00:40:42,548
Instead, we implemented a different data format,

741
00:40:43,488 --> 00:40:44,988
which we then used duct tape for,

742
00:40:45,028 --> 00:40:46,229
which taught us that, oh,

743
00:40:46,369 --> 00:40:50,030
actually using a different data format is much better, much more sustainable.

744
00:40:51,567 --> 00:40:55,972
But very key about that is never ever build anything on top of duct tape tech.

745
00:40:56,092 --> 00:41:01,398
If you find that a hack went in to ship some content, notify production and

746
00:41:01,458 --> 00:41:05,643
tell them you can get your content, but you need to give us the time to

747
00:41:05,803 --> 00:41:08,546
reimplement this from the ground up because it will bite you in the ass

748
00:41:08,986 --> 00:41:09,747
six months down the line.

749
00:41:11,989 --> 00:41:13,613
So going forward then, basically,

750
00:41:13,633 --> 00:41:15,717
it's saying the same thing, work out

751
00:41:15,877 --> 00:41:18,703
when to remove the duct tape, because you always

752
00:41:18,743 --> 00:41:21,128
have to find when is duct tape appropriate

753
00:41:21,268 --> 00:41:23,232
and when will production require proper tools.

754
00:41:24,170 --> 00:41:27,251
For the pipeline that we had, we actually asked production,

755
00:41:27,371 --> 00:41:31,172
or we told production, you're gonna need to give us time

756
00:41:31,352 --> 00:41:33,653
to reimplement this from the ground up

757
00:41:33,893 --> 00:41:35,994
because we can give you the content on time,

758
00:41:36,694 --> 00:41:38,255
but if we keep this in the production,

759
00:41:38,315 --> 00:41:39,555
it will break in two weeks

760
00:41:39,595 --> 00:41:41,056
and we're gonna have to keep fixing it.

761
00:41:41,276 --> 00:41:42,876
Instead, if we just reimplement it,

762
00:41:42,976 --> 00:41:44,197
it will keep working forever,

763
00:41:44,337 --> 00:41:45,937
or well, nothing works forever,

764
00:41:46,037 --> 00:41:47,438
but it will keep working

765
00:41:47,478 --> 00:41:48,898
for at least a couple months or years.

766
00:41:50,359 --> 00:41:54,680
So basically you just work with the other departments to ensure that you get

767
00:41:54,720 --> 00:41:57,982
the appropriate amount of time to rip the band-aid off as it will.

768
00:42:01,063 --> 00:42:04,264
So takeaways of the talk then, nearing the end.

769
00:42:04,944 --> 00:42:06,604
There is actually a benefit.

770
00:42:06,885 --> 00:42:10,226
First key message is that there is a benefit to using temporary solutions.

771
00:42:11,331 --> 00:42:16,254
Not everything requires the proper solution now, and managed duct tape can be very useful.

772
00:42:16,394 --> 00:42:22,098
Again, the idea is that you, going in, realize that the solution you're implementing is temporary

773
00:42:22,198 --> 00:42:23,519
and you're going to need to get rid of it.

774
00:42:24,079 --> 00:42:25,880
But the idea is that you learn from it.

775
00:42:26,000 --> 00:42:28,362
You learn the problem space and the solution space.

776
00:42:28,382 --> 00:42:32,665
You learn the actual solution that you need instead of the one you think you need.

777
00:42:34,589 --> 00:42:37,011
So changing production requirements in that context

778
00:42:37,231 --> 00:42:39,852
also might mean that a solution is best left

779
00:42:39,952 --> 00:42:42,714
as a temporary fix until a bigger system replaces it.

780
00:42:43,234 --> 00:42:44,655
It happens all the time in production

781
00:42:44,735 --> 00:42:46,777
when some new big system comes online

782
00:42:46,837 --> 00:42:49,258
that suddenly your solution is either redundant

783
00:42:49,498 --> 00:42:51,319
or requires a complete overhaul.

784
00:42:52,460 --> 00:42:57,082
The straightforward solution might seem that you just adapt it to whatever the new environment is,

785
00:42:57,642 --> 00:43:02,944
but at that point it might be more productive to just step back and take a look to see if you can make

786
00:43:03,425 --> 00:43:08,267
a bigger or smaller solution that does what you need it to do more elegantly.

787
00:43:10,792 --> 00:43:14,635
In that context, I think the key message of this entire talk is that every solution is

788
00:43:14,675 --> 00:43:15,736
a learning opportunity.

789
00:43:16,456 --> 00:43:19,359
Everything can be done better, but not everything really has to.

790
00:43:19,539 --> 00:43:23,382
It doesn't mean it's not because you want to build a rocket that you have to reach the

791
00:43:23,402 --> 00:43:23,602
moon.

792
00:43:24,843 --> 00:43:30,287
It's kind of up to you to determine how big the solution is that you need.

793
00:43:31,068 --> 00:43:33,892
Because it kind of really matters how big the problem is,

794
00:43:34,272 --> 00:43:37,297
how urgent the problem is, how soon you need a solution as well.

795
00:43:37,737 --> 00:43:41,703
There's always a lot of factors determining this, essentially, but

796
00:43:41,723 --> 00:43:44,527
it's kind of up to you to figure out with production and

797
00:43:44,547 --> 00:43:47,071
the other departments to know what your priorities are.

798
00:43:48,150 --> 00:43:51,332
But in that, every step clarifies the problem space,

799
00:43:51,432 --> 00:43:53,433
and it really helps you understand a better solution.

800
00:43:54,073 --> 00:43:59,476
It really allows you to come up with new understanding

801
00:43:59,676 --> 00:44:01,997
of the data and how to best interact with it.

802
00:44:02,017 --> 00:44:03,718
It allows you to come up with best practices,

803
00:44:04,418 --> 00:44:06,719
and it allows you to really understand

804
00:44:06,900 --> 00:44:09,981
your own pipeline in ways that you thought you did,

805
00:44:10,101 --> 00:44:10,861
but you didn't really.

806
00:44:12,658 --> 00:44:16,941
Then I think also one of the bigger ones is that fewer tools is always better.

807
00:44:17,581 --> 00:44:19,663
A shorter chain is less likely to fail.

808
00:44:20,964 --> 00:44:24,026
That doesn't mean that you must have less steps in your pipeline.

809
00:44:24,046 --> 00:44:27,348
You can have as many steps in your pipeline as you want as long as it's hidden from the

810
00:44:27,428 --> 00:44:27,769
artists.

811
00:44:29,389 --> 00:44:31,530
So a one-button solution will always be better.

812
00:44:32,631 --> 00:44:34,372
That doesn't mean that your black box

813
00:44:34,432 --> 00:44:35,792
must be the biggest thing ever written.

814
00:44:36,933 --> 00:44:38,714
There is also the same concept

815
00:44:38,794 --> 00:44:40,875
applies if you do make a black box.

816
00:44:41,975 --> 00:44:44,736
But in general, if you have a one-button solution,

817
00:44:45,157 --> 00:44:49,819
then at least you can debug what's going on rather than ask

818
00:44:49,859 --> 00:44:52,640
an artist whether they've pressed a very particular button or

819
00:44:52,760 --> 00:44:55,681
checked a box somewhere hidden in a UI panel.

820
00:44:58,789 --> 00:45:00,990
One of the last ones then is to pick your targets.

821
00:45:01,930 --> 00:45:04,871
You should work to eliminate tools, not build new ones.

822
00:45:05,171 --> 00:45:07,892
I think the go-to solution for a lot of problems is,

823
00:45:07,972 --> 00:45:10,172
oh, we can build a tool to do this really easily

824
00:45:10,192 --> 00:45:10,993
the next time around.

825
00:45:11,593 --> 00:45:15,234
And I think that's a pitfall that a lot of tech artists

826
00:45:15,314 --> 00:45:17,334
and a lot of tool developers easily fall into

827
00:45:17,394 --> 00:45:19,475
because you get caught in the joy of making tools

828
00:45:20,115 --> 00:45:22,276
and you end up making tools for their own sake.

829
00:45:22,616 --> 00:45:26,157
And if you find yourself doing that, just stop.

830
00:45:28,477 --> 00:45:30,478
a shorter pipeline is just always better.

831
00:45:30,698 --> 00:45:33,318
And a data change, as we saw in the first example,

832
00:45:33,458 --> 00:45:35,679
can just be way more effective than any tool.

833
00:45:36,339 --> 00:45:38,859
You should just always question whether data

834
00:45:38,959 --> 00:45:41,460
is being treated by the tools that are meant to treat it,

835
00:45:42,400 --> 00:45:44,861
and whether data is being stored in the format

836
00:45:45,041 --> 00:45:47,021
that the data was meant to be stored in.

837
00:45:47,501 --> 00:45:50,202
In our case, we had visual information being stored

838
00:45:50,362 --> 00:45:52,462
in a largely binary database,

839
00:45:52,962 --> 00:45:55,503
which are two formats that are inherently incompatible.

840
00:45:57,768 --> 00:46:00,510
And lastly, build safety nets.

841
00:46:01,090 --> 00:46:03,291
System independent structures that don't fail,

842
00:46:03,431 --> 00:46:05,833
such as good folder structures and naming conventions,

843
00:46:05,893 --> 00:46:10,236
will help you ensure that you have something to fall back on.

844
00:46:10,816 --> 00:46:13,818
It will allow you to treat your content in different ways

845
00:46:13,978 --> 00:46:16,099
and just try out new pipelines without ever

846
00:46:16,139 --> 00:46:17,400
needing to consult an artist.

847
00:46:18,020 --> 00:46:20,281
because you will have the content available to you.

848
00:46:20,481 --> 00:46:23,442
If you already have that repository of FBX files,

849
00:46:23,942 --> 00:46:26,783
it means you don't need a max installation to get to the model data.

850
00:46:27,623 --> 00:46:31,205
That is very relevant for any tool developer and very important.

851
00:46:31,685 --> 00:46:36,406
So these system independent structures that are very slow moving and therefore

852
00:46:36,446 --> 00:46:38,207
hard to break will serve as

853
00:46:38,227 --> 00:46:41,048
your safety net and ensure that you have something to fall back on.

854
00:46:43,063 --> 00:46:48,488
A few great resources then that really helped me make this talk and really helped me build

855
00:46:48,528 --> 00:46:54,533
the tools actually was the first one I want to point out is the GDC 2018 talk from Michael

856
00:46:54,553 --> 00:46:58,817
Malinowski, Practical Approaches to Developing Forward-Facing Rigs, Tools, and Pipelines.

857
00:47:00,018 --> 00:47:02,240
Was anyone at that talk in this room?

858
00:47:03,172 --> 00:47:07,414
Yeah, so it dealt with the plugin factory design pattern.

859
00:47:08,275 --> 00:47:10,737
This is probably the most prolific design pattern

860
00:47:10,797 --> 00:47:13,879
that we currently use on Total War on technical art tools

861
00:47:14,019 --> 00:47:16,300
because it is by definition extremely good

862
00:47:16,320 --> 00:47:17,501
at dealing with edge cases.

863
00:47:18,362 --> 00:47:20,143
So I highly recommend you check out that talk.

864
00:47:20,203 --> 00:47:21,624
It's freely available on default.

865
00:47:23,045 --> 00:47:24,646
Second, I think really obvious,

866
00:47:25,006 --> 00:47:27,327
just look up the Wikipedia definition on technical debt

867
00:47:27,448 --> 00:47:29,969
because it's got so many external links.

868
00:47:31,470 --> 00:47:36,152
It obviously is kind of like, let me Google that for you, I know, but it's also, it's

869
00:47:36,172 --> 00:47:38,852
just a very relevant, still a very relevant definition.

870
00:47:38,873 --> 00:47:43,094
It stems from regular software development, not just game development.

871
00:47:43,674 --> 00:47:48,696
And it really helps people who don't necessarily understand what technical that is, or maybe

872
00:47:48,736 --> 00:47:54,938
think they do, really come to terms with the various concepts that go into it and help

873
00:47:54,958 --> 00:47:57,399
you understand how to deal with it as well, because obviously over the years.

874
00:47:57,940 --> 00:48:02,271
As software development has aged, various techniques and tactics have been developed to deal with it.

875
00:48:03,320 --> 00:48:06,843
Then lastly, there's an article on breakingthewheel.com,

876
00:48:07,544 --> 00:48:08,685
video game art pipelines.

877
00:48:09,325 --> 00:48:11,227
That's actually a really good article

878
00:48:11,327 --> 00:48:13,508
that does an incredibly good job of breaking down

879
00:48:13,608 --> 00:48:14,949
how to identify bottlenecks

880
00:48:15,009 --> 00:48:16,431
in your asset production pipeline.

881
00:48:17,652 --> 00:48:20,874
It uses the same principles that were used

882
00:48:21,154 --> 00:48:24,277
on like factory pipelines and factory production lines

883
00:48:24,717 --> 00:48:27,799
to identify essentially the slowest part in your production

884
00:48:28,060 --> 00:48:30,482
and ensure that you can prioritize properly

885
00:48:30,582 --> 00:48:32,283
which things you need to optimize first.

886
00:48:33,484 --> 00:48:35,964
So that did a very good job of describing that.

887
00:48:37,185 --> 00:48:39,666
With that I just want to thank everyone for listening

888
00:48:39,966 --> 00:48:42,046
and you can contact me on the email address here.

889
00:48:42,506 --> 00:48:43,687
We have some time for questions.

890
00:48:43,707 --> 00:48:43,987
Thank you.

891
00:48:44,007 --> 00:48:44,127
Thanks.

892
00:48:44,147 --> 00:48:44,327
Thank you.

893
00:48:44,347 --> 00:48:44,587
Thank you.

894
00:48:44,607 --> 00:48:44,867
Thank you.

895
00:48:44,907 --> 00:48:45,347
Thank you.

896
00:48:45,587 --> 00:48:45,948
Thank you.

897
00:48:46,128 --> 00:48:46,508
Thank you.

898
00:48:46,688 --> 00:48:51,229
Thank you.

899
00:48:53,610 --> 00:48:53,810
Thank you.

900
00:48:53,830 --> 00:48:54,010
Thank you.

901
00:48:54,030 --> 00:48:54,290
Thank you.

902
00:48:54,310 --> 00:48:55,911
So yeah so for questions you can go to the mic.

903
00:48:57,311 --> 00:48:59,052
Also I have business cards if anyone wants

904
00:48:59,092 --> 00:49:00,312
to contact me later.

905
00:49:01,268 --> 00:49:01,308
Hi.

906
00:49:03,430 --> 00:49:06,993
I have quite a few issues in our studio with managing these

907
00:49:07,073 --> 00:49:07,813
Band-Aid tools.

908
00:49:07,853 --> 00:49:12,878
And the biggest pushback I get about either removing them or

909
00:49:13,078 --> 00:49:15,940
promoting them to something a little bit more permanent is

910
00:49:16,161 --> 00:49:18,803
there's a fear of the time cost that it's going to take to do

911
00:49:18,843 --> 00:49:20,685
that and the risk that's associated with it.

912
00:49:21,165 --> 00:49:25,108
How do you convince people to buy in toward making that

913
00:49:25,149 --> 00:49:27,030
leap of faith in either direction?

914
00:49:28,139 --> 00:49:29,540
I get the right allies.

915
00:49:31,281 --> 00:49:35,703
It's a bit political, but for the variant cleanup, it actually took me roughly a month

916
00:49:36,424 --> 00:49:40,646
to convince the various key people that would end up making the call that we actually needed

917
00:49:40,706 --> 00:49:41,146
to do this.

918
00:49:41,946 --> 00:49:45,008
I did that at the time by actually writing up a big Word doc.

919
00:49:45,849 --> 00:49:48,650
explaining like, this is how we should do it,

920
00:49:49,051 --> 00:49:50,992
and these are the things that we would get in return.

921
00:49:52,132 --> 00:49:54,694
And then you just list out all of the things that we,

922
00:49:54,834 --> 00:49:56,275
all of the problems that you encounter

923
00:49:56,615 --> 00:49:58,516
as a result of this not being a thing yet.

924
00:50:00,778 --> 00:50:02,299
Various bugs are always good.

925
00:50:03,560 --> 00:50:05,060
Like if you have like a thousand bugs

926
00:50:05,120 --> 00:50:07,282
that basically could be avoided.

927
00:50:08,613 --> 00:50:11,154
by implementing this new system, then it's kind of,

928
00:50:11,674 --> 00:50:13,334
at that point, it just becomes a numbers game.

929
00:50:13,734 --> 00:50:15,935
So you can just hit someone in the face with a big number

930
00:50:16,155 --> 00:50:18,716
and say, look, this is costing us a ton of time and money.

931
00:50:19,576 --> 00:50:20,456
We should really do this.

932
00:50:21,237 --> 00:50:22,177
It is difficult, though.

933
00:50:23,517 --> 00:50:24,898
It's just getting the right allies.

934
00:50:24,918 --> 00:50:26,038
Thanks.

935
00:50:26,838 --> 00:50:27,138
Thank you.

936
00:50:29,299 --> 00:50:30,039
Thank you for your talk.

937
00:50:30,239 --> 00:50:33,540
I have a question regarding how do you catch

938
00:50:33,600 --> 00:50:34,981
the errors in the conventions?

939
00:50:35,201 --> 00:50:37,861
Do you have scripts or CI or something?

940
00:50:38,817 --> 00:50:40,278
Yeah, so that's a good question.

941
00:50:40,298 --> 00:50:43,840
On Total War Arena, by the end of the production,

942
00:50:44,541 --> 00:50:46,662
we actually did have a script that

943
00:50:46,702 --> 00:50:49,163
would go through our entire folder structure

944
00:50:49,243 --> 00:50:50,144
and catch any errors.

945
00:50:51,165 --> 00:50:52,685
But I think in general, that's really

946
00:50:52,746 --> 00:50:57,408
hard to achieve because of various concerns in terms

947
00:50:57,448 --> 00:50:59,329
of there will always be edge cases.

948
00:51:00,747 --> 00:51:05,710
I think the best, so the way we actually do deal with it is to just do periodical evaluations.

949
00:51:06,691 --> 00:51:12,214
If you do an evaluation the day of the first submission, then one a week after the first

950
00:51:12,254 --> 00:51:16,657
submission when more stuff has gone in, and then a month and then two months afterwards.

951
00:51:17,277 --> 00:51:22,320
And if you catch things that have been done wrong or if a particularly egregious

952
00:51:23,180 --> 00:51:27,162
number of mistakes have been made, then you can just do your

953
00:51:27,622 --> 00:51:29,883
periodical evaluations at a higher frequency and

954
00:51:29,943 --> 00:51:31,824
keep doing them until people get it right.

955
00:51:32,004 --> 00:51:37,106
But again, there it's just important to trust in the area leads to enforce

956
00:51:37,146 --> 00:51:39,847
those conventions for you, cuz you won't have the resources or

957
00:51:39,867 --> 00:51:40,947
the time to do it yourself.

958
00:51:42,848 --> 00:51:43,088
Thank you.

959
00:51:44,005 --> 00:51:44,826
Great talk, thank you.

960
00:51:45,067 --> 00:51:45,367
Thank you.

961
00:51:45,768 --> 00:51:49,973
Sounds like you've put a ton of time and thought and energy into naming conventions.

962
00:51:50,333 --> 00:51:55,380
I'm curious, do you plan on publishing the work that you've come up with in that specifics,

963
00:51:55,420 --> 00:52:00,366
like those conventions as well as the presentation you gave on getting people to buy into it?

964
00:52:01,083 --> 00:52:09,245
Yeah, so quick note, the presentation slides will be available on tech-artists.org.

965
00:52:09,965 --> 00:52:13,365
But for the naming conventions thing, I think so.

966
00:52:13,465 --> 00:52:17,566
I think we are kind of looking into publishing our mantra, if you will.

967
00:52:18,226 --> 00:52:22,887
I think our mantra for Total War was actually, call it what it is, not what it's used for.

968
00:52:25,408 --> 00:52:32,393
Labels have weights, so shield is bigger than shield small, so small comes after shield

969
00:52:32,553 --> 00:52:33,054
in that sense.

970
00:52:33,234 --> 00:52:39,219
Not every shield is small, but all small shields are part of a shield group, kind of that consideration.

971
00:52:40,199 --> 00:52:41,721
And there were some other things as well.

972
00:52:41,981 --> 00:52:44,763
We summed it up and we actually did print it out on a poster, so it's possible.

973
00:52:44,883 --> 00:52:48,105
I'll try and see if we can publish that somewhere.

974
00:52:48,386 --> 00:52:48,646
Thank you.

975
00:52:48,986 --> 00:52:49,226
Thank you.

976
00:52:51,288 --> 00:52:51,728
Hi, Matthias.

977
00:52:52,955 --> 00:52:54,837
Naming conventions are outmoded, fight me.

978
00:52:56,699 --> 00:52:58,060
So, sorry, could you repeat that?

979
00:52:58,260 --> 00:53:01,162
Naming conventions are outmoded, fight me.

980
00:53:01,402 --> 00:53:06,967
Why do we continue to encode metadata into a fixed string of a given length

981
00:53:07,467 --> 00:53:09,849
when we should be putting our assets in an asset database

982
00:53:09,890 --> 00:53:12,612
and doing proper meta-tagging that we can dynamically update

983
00:53:12,672 --> 00:53:14,413
over the process of the entire project?

984
00:53:14,573 --> 00:53:14,794
Sure.

985
00:53:16,135 --> 00:53:18,717
I would agree if we had the resources to build a data bank.

986
00:53:20,220 --> 00:53:27,243
Well, we are looking into building one, but if you as a developer don't have the resources

987
00:53:27,323 --> 00:53:32,546
to build an asset management tool, which many don't, because that kind of thing tends to

988
00:53:32,566 --> 00:53:38,328
be a mammoth task, then naming conventions are your first and last line of defense.

989
00:53:38,549 --> 00:53:42,550
So I absolutely agree that they're outmoded if you have the resources to deal with that

990
00:53:42,590 --> 00:53:47,213
kind of system, but if you don't, then they, I think, are your only fallback.

991
00:53:48,193 --> 00:53:48,453
Thanks.

992
00:53:48,813 --> 00:53:49,013
Thank you.

993
00:53:50,649 --> 00:53:52,222
All right, I think that brings us to an end.

994
00:53:52,242 --> 00:53:52,908
Thank you.

