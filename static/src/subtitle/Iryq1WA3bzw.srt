1
00:00:03,896 --> 00:00:05,937
All right, let's get started.

2
00:00:05,937 --> 00:00:08,779
It looks like this might be a little bit full,

3
00:00:08,779 --> 00:00:11,121
so if any of you guys that are on the edge could move in.

4
00:00:11,121 --> 00:00:13,022
It just makes it easier for anybody who comes in late

5
00:00:13,022 --> 00:00:13,682
to find a seat.

6
00:00:13,682 --> 00:00:20,747
I like that this is a room of completionists.

7
00:00:20,747 --> 00:00:24,670
You guys all stuck around to the very last talks at GDC,

8
00:00:24,670 --> 00:00:26,951
and I personally appreciate that

9
00:00:26,951 --> 00:00:29,393
because I'm one of the last talks at GDC.

10
00:00:29,393 --> 00:00:32,735
Now the conference is almost over.

11
00:00:32,735 --> 00:00:33,195
How was it?

12
00:00:40,272 --> 00:00:43,414
Was that bad?

13
00:00:43,414 --> 00:00:47,355
Yeah, so I'm also curious.

14
00:00:47,355 --> 00:00:50,377
How many of you guys were just at Chris Butcher's

15
00:00:50,377 --> 00:00:53,358
engine architecture talk upstairs?

16
00:00:53,358 --> 00:00:54,178
Oh, sweet, most of you.

17
00:00:54,178 --> 00:00:58,260
So I do not have the silky sexy Kiwi voice that he does,

18
00:00:58,260 --> 00:01:01,221
so you'll have to listen to me and I'm a little bit hoarse.

19
00:01:01,221 --> 00:01:03,262
So I am Justin Truman.

20
00:01:03,262 --> 00:01:06,483
I'm one of the engineering leads over at Bungie.

21
00:01:07,238 --> 00:01:09,420
And before I start talking about anything,

22
00:01:09,420 --> 00:01:11,802
I want to make sure that I make it super clear

23
00:01:11,802 --> 00:01:14,563
that I'm not even close to the sole contributor

24
00:01:14,563 --> 00:01:17,165
of the architecture that I'm going to be talking about today.

25
00:01:17,165 --> 00:01:19,427
There was a good, probably, 50 man years

26
00:01:19,427 --> 00:01:22,269
that went into our activity networking systems for Destiny,

27
00:01:22,269 --> 00:01:25,371
built on top of all of the Halo Reach tech.

28
00:01:25,371 --> 00:01:27,032
It was a very large group effort,

29
00:01:27,032 --> 00:01:29,593
and that's why I'm going to be saying we a lot

30
00:01:29,593 --> 00:01:30,134
during this talk.

31
00:01:30,134 --> 00:01:32,215
And I want to answer any questions

32
00:01:32,215 --> 00:01:33,276
that you guys have at the end.

33
00:01:33,276 --> 00:01:35,798
I'm going to try to leave time for some Q&A.

34
00:01:36,442 --> 00:01:38,502
Assuming I don't go long.

35
00:01:38,502 --> 00:01:45,204
Now is also a great time for you to silence your cell phones.

36
00:01:45,204 --> 00:01:49,325
And if you like the talk, please rate me and give me feedback.

37
00:01:49,325 --> 00:01:51,425
If you didn't like the talk, you can keep it to yourselves.

38
00:01:51,425 --> 00:01:52,165
But.

39
00:01:52,165 --> 00:01:55,846
So who here has played Destiny?

40
00:01:55,846 --> 00:01:55,906
OK.

41
00:01:55,906 --> 00:01:57,506
Good number.

42
00:01:57,506 --> 00:02:00,967
Who's got a level 32 character in Destiny?

43
00:02:00,967 --> 00:02:01,347
A few of you.

44
00:02:01,347 --> 00:02:04,148
Who has three level 32s?

45
00:02:04,148 --> 00:02:05,048
Oh, wow.

46
00:02:05,048 --> 00:02:05,808
I don't.

47
00:02:06,537 --> 00:02:08,657
That was great.

48
00:02:08,657 --> 00:02:10,858
Destiny was a lot of firsts for Bungie.

49
00:02:10,858 --> 00:02:14,498
It was our first four-platform game.

50
00:02:14,498 --> 00:02:17,899
We had only ever shifted on one platform before that.

51
00:02:17,899 --> 00:02:19,980
It was our first always-online game.

52
00:02:19,980 --> 00:02:26,381
It was pretty scary getting into a room in 2010 before stuff like the Xbox One had even

53
00:02:26,381 --> 00:02:31,202
been announced, and planning a console shooter that requires an always-online internet connection.

54
00:02:33,183 --> 00:02:37,326
It was also the first time that we tried seamless background matchmaking.

55
00:02:37,326 --> 00:02:39,669
Halo had matchmaking lobbies and menus.

56
00:02:39,669 --> 00:02:41,210
We wanted to get rid of all of that

57
00:02:41,210 --> 00:02:44,613
and just let strangers wander into your game automatically and organically.

58
00:02:44,613 --> 00:02:49,757
We wanted to get rid of the single-player versus multiplayer menu options

59
00:02:49,757 --> 00:02:52,580
and just have play destiny.

60
00:02:52,580 --> 00:02:55,442
To accomplish that goal, we built a unique

61
00:02:55,442 --> 00:02:58,725
and uniquely complicated networking topology.

62
00:02:59,847 --> 00:03:03,590
Over the next hour, I'm going to talk through the decisions

63
00:03:03,590 --> 00:03:04,871
that led us to this unique architecture,

64
00:03:04,871 --> 00:03:07,072
and both the advantages and disadvantages that

65
00:03:07,072 --> 00:03:08,173
resulted from our choices.

66
00:03:08,173 --> 00:03:11,455
Instead of just using a peer-to-peer architecture

67
00:03:11,455 --> 00:03:14,177
like our previous Halo games, or implementing

68
00:03:14,177 --> 00:03:15,838
traditional dedicated servers, we

69
00:03:15,838 --> 00:03:20,982
built a hybrid approach that we call Activity Hosts.

70
00:03:20,982 --> 00:03:23,584
Activity Hosts are cloud-hosted machines

71
00:03:23,584 --> 00:03:26,726
that run a stripped-down simulation of just our mission

72
00:03:26,726 --> 00:03:27,447
script logic.

73
00:03:28,299 --> 00:03:31,122
With our activity hosts, which I'll be describing in detail,

74
00:03:31,122 --> 00:03:34,847
we were able to successfully scale at launch

75
00:03:34,847 --> 00:03:36,129
without any queues or downtime.

76
00:03:36,129 --> 00:03:39,553
And we were able to support that million player

77
00:03:39,553 --> 00:03:42,797
load with just a few hundred servers in our data center,

78
00:03:42,797 --> 00:03:46,742
because we could handle over 10,000 players per server.

79
00:03:48,110 --> 00:03:51,592
By combining our activity hosts with traditional peer-to-peer networking,

80
00:03:51,592 --> 00:03:55,035
we got the low latency action gameplay of a Call of Duty or Halo,

81
00:03:55,035 --> 00:04:00,099
while constantly seamlessly matchmaking you to new strangers.

82
00:04:00,099 --> 00:04:03,962
A typical Destiny player is host migrating between different PS4s

83
00:04:03,962 --> 00:04:06,023
once every 160 seconds,

84
00:04:06,023 --> 00:04:08,965
without noticing any discontinuity in their simulation.

85
00:04:08,965 --> 00:04:12,528
So that's the player experience that we ended up with today.

86
00:04:12,528 --> 00:04:15,310
But when I joined Bungie five years ago to work on Destiny,

87
00:04:15,310 --> 00:04:16,972
we didn't have any of that.

88
00:04:18,816 --> 00:04:21,818
All we really had to start with was some key design pillars

89
00:04:21,818 --> 00:04:25,541
that informed all of the early architectural planning.

90
00:04:25,541 --> 00:04:29,864
These design pillars were making a kick-ass action game,

91
00:04:29,864 --> 00:04:33,706
making sure that it always supported co-op,

92
00:04:33,706 --> 00:04:38,910
allowing you to meet strangers, and untethered freedom

93
00:04:38,910 --> 00:04:39,490
to explore.

94
00:04:39,490 --> 00:04:42,172
Before talking about the tech, it's

95
00:04:42,172 --> 00:04:44,734
worth diving into each one of these in a bit of detail.

96
00:04:46,356 --> 00:04:49,577
Kick-Ass action game means that we needed Halo parody.

97
00:04:49,577 --> 00:04:50,978
We needed FPS genre parody.

98
00:04:50,978 --> 00:04:53,879
We needed to make a highly responsive,

99
00:04:53,879 --> 00:04:56,620
low latency action game that's instantly familiar

100
00:04:56,620 --> 00:04:59,682
and competitive with all of the other great FPSs out there.

101
00:04:59,682 --> 00:05:02,603
The internal bar that we used to great effect was,

102
00:05:02,603 --> 00:05:05,504
it needs to feel like a single player shooter.

103
00:05:05,504 --> 00:05:08,666
This was important to us because the online experience

104
00:05:08,666 --> 00:05:09,326
is not opt-in.

105
00:05:09,326 --> 00:05:12,447
We force you to matchmake with other players,

106
00:05:12,447 --> 00:05:15,328
even if all you want to do is play a solo campaign.

107
00:05:15,993 --> 00:05:18,274
Therefore, we need to make sure that our matchmaking

108
00:05:18,274 --> 00:05:20,476
and our networking goals never hurt

109
00:05:20,476 --> 00:05:22,777
that solo campaign experience.

110
00:05:22,777 --> 00:05:25,719
So this means that we started with the Halo code base

111
00:05:25,719 --> 00:05:27,941
and networking model.

112
00:05:27,941 --> 00:05:30,602
David Aldridge did a GDC talk four years ago

113
00:05:30,602 --> 00:05:32,484
about the Halo Reach networking model,

114
00:05:32,484 --> 00:05:33,705
which describes it in detail.

115
00:05:33,705 --> 00:05:35,446
I'm gonna skip over most of that.

116
00:05:35,446 --> 00:05:37,487
You should really watch his talk, though,

117
00:05:37,487 --> 00:05:38,808
if you're interested in the details

118
00:05:38,808 --> 00:05:40,489
of our action game networking.

119
00:05:42,215 --> 00:05:45,196
But I will quickly touch on some Halo networking terminology,

120
00:05:45,196 --> 00:05:47,177
which I'll be relying on later in this talk.

121
00:05:47,177 --> 00:05:50,578
The most important thing to know about Halo Reach

122
00:05:50,578 --> 00:05:53,720
was that it had two networking models, one for PVP

123
00:05:53,720 --> 00:05:56,801
and one for PVE.

124
00:05:56,801 --> 00:06:01,022
PVP used standard peer-to-peer host-client networking.

125
00:06:01,022 --> 00:06:02,603
One Xbox was the host of a game.

126
00:06:02,603 --> 00:06:05,284
Let's call that the physics host for reasons

127
00:06:05,284 --> 00:06:06,104
that will be useful later.

128
00:06:06,104 --> 00:06:08,885
The other Xboxes were all clients

129
00:06:08,885 --> 00:06:10,726
communicating with that host.

130
00:06:11,251 --> 00:06:13,132
But the host arbitrated all state changes.

131
00:06:13,132 --> 00:06:17,073
For PVE, we used lockstep networking.

132
00:06:17,073 --> 00:06:19,895
This is the networking model most commonly

133
00:06:19,895 --> 00:06:21,795
used for stuff like a real-time strategy game.

134
00:06:21,795 --> 00:06:23,996
If your game is fully deterministic,

135
00:06:23,996 --> 00:06:25,497
which means the same set of inputs

136
00:06:25,497 --> 00:06:27,518
always produce the same set of simulation outputs,

137
00:06:27,518 --> 00:06:29,659
then you can just network the controller inputs

138
00:06:29,659 --> 00:06:32,340
from each machine and not simulate the next tick

139
00:06:32,340 --> 00:06:33,940
until you've received the inputs from everyone else

140
00:06:33,940 --> 00:06:35,161
about what should happen.

141
00:06:36,082 --> 00:06:37,783
We do some tricks in our lockstep networking

142
00:06:37,783 --> 00:06:40,166
to hide that latency, but ultimately you have to pay

143
00:06:40,166 --> 00:06:42,829
full round-trip networking time between when you pull

144
00:06:42,829 --> 00:06:44,611
the trigger and when the gun actually fires.

145
00:06:44,611 --> 00:06:47,935
So that meant that while we had a networking model

146
00:06:47,935 --> 00:06:50,017
in Halo Reach for campaign and PvE games,

147
00:06:50,017 --> 00:06:52,139
you could play through the whole Halo Reach campaign

148
00:06:52,139 --> 00:06:52,900
with four players.

149
00:06:52,900 --> 00:06:56,104
It was a noticeably more latent experience

150
00:06:56,104 --> 00:06:57,045
than our PvP game.

151
00:06:58,645 --> 00:07:00,566
So going back to the original design goals,

152
00:07:00,566 --> 00:07:03,407
this lockstep networking latency was unacceptable

153
00:07:03,407 --> 00:07:06,129
for the feels like a single player shooter bar

154
00:07:06,129 --> 00:07:07,149
that I talked about earlier.

155
00:07:07,149 --> 00:07:10,330
So that meant that we chose to instead start

156
00:07:10,330 --> 00:07:13,852
with our Halo era PVP networking model.

157
00:07:13,852 --> 00:07:17,234
But we had to extend it to support the full story campaign,

158
00:07:17,234 --> 00:07:19,294
which leads well into the second design pillar.

159
00:07:19,294 --> 00:07:21,415
What I like to call,

160
00:07:21,415 --> 00:07:23,736
everything is more fun with your friends.

161
00:07:23,736 --> 00:07:26,458
This meant to us that every activity

162
00:07:26,458 --> 00:07:28,318
supports co-op gameplay, always.

163
00:07:29,069 --> 00:07:31,730
This also meant that you can always hook up with your friends.

164
00:07:31,730 --> 00:07:33,450
Every activity supports join in progress,

165
00:07:33,450 --> 00:07:37,351
and we endeavor to make that available at all times.

166
00:07:37,351 --> 00:07:39,011
For our cooperative campaign,

167
00:07:39,011 --> 00:07:42,712
that meant that while we could start with our PVP networking model,

168
00:07:42,712 --> 00:07:46,733
we had to build it out to support AI and complex activity scripting for the first time.

169
00:07:46,733 --> 00:07:51,534
Lots of really cool stuff was done to accomplish this networking goal for AI,

170
00:07:51,534 --> 00:07:53,534
but I'm not giving that talk either.

171
00:07:53,534 --> 00:07:56,215
I am going to talk about activity scripting though a little later in the talk.

172
00:07:58,811 --> 00:08:00,552
So, moving on to our third pillar,

173
00:08:00,552 --> 00:08:02,013
which I like to state as,

174
00:08:02,013 --> 00:08:05,035
showing off is more fun if others are watching.

175
00:08:05,035 --> 00:08:07,177
At Bungie, we believe really strongly

176
00:08:07,177 --> 00:08:09,858
that even with the minimal social interaction verbs

177
00:08:09,858 --> 00:08:11,179
that we provided in Destiny,

178
00:08:11,179 --> 00:08:13,381
the mere existence of other players,

179
00:08:13,381 --> 00:08:16,743
perceiving you, perceiving your avatar,

180
00:08:16,743 --> 00:08:18,004
gives value to your actions.

181
00:08:18,004 --> 00:08:22,767
Xbox 360 achievements were intrinsically more valuable

182
00:08:22,767 --> 00:08:23,287
than in-game rewards,

183
00:08:23,287 --> 00:08:25,629
because you could easily show them off to your friends.

184
00:08:26,191 --> 00:08:31,755
As another example, as soon as you build something awesome in Minecraft, if you're like me,

185
00:08:31,755 --> 00:08:34,817
you immediately want to show it to your other friends who play Minecraft.

186
00:08:34,817 --> 00:08:39,560
So we're convinced that if we can take even a solo player who has no friends on Xbox Live or PSN

187
00:08:39,560 --> 00:08:43,082
and regularly put them in rooms with other people,

188
00:08:43,082 --> 00:08:47,906
they will care more about their fancy hat and their attack power and the level number over their head.

189
00:08:47,906 --> 00:08:52,709
We also want these strangers to not be pursuing the same goals as you.

190
00:08:53,326 --> 00:08:56,188
We think of it as intersecting, not parallel lines.

191
00:08:56,188 --> 00:08:58,649
We don't want these strangers competing with you

192
00:08:58,649 --> 00:09:01,471
for resources or pushing you forward at a pace

193
00:09:01,471 --> 00:09:02,652
faster than you would like.

194
00:09:02,652 --> 00:09:04,793
Instead, intersecting with strangers

195
00:09:04,793 --> 00:09:07,635
that are not directly competing for any of your goals

196
00:09:07,635 --> 00:09:09,996
minimizes friction and potential resentment.

197
00:09:09,996 --> 00:09:14,499
So the last pillar that I'll be talking about

198
00:09:14,499 --> 00:09:17,421
was untethered freedom to explore.

199
00:09:17,421 --> 00:09:19,823
This means that our activity designs

200
00:09:19,823 --> 00:09:21,984
shouldn't stop you from leaving the activity line

201
00:09:21,984 --> 00:09:22,885
and just exploring.

202
00:09:23,855 --> 00:09:26,076
In Halo Co-op, you were always tethered

203
00:09:26,076 --> 00:09:28,298
to a maximum radius from the physics host.

204
00:09:28,298 --> 00:09:30,900
If you fell behind or you tried to run too far away,

205
00:09:30,900 --> 00:09:32,161
we'd teleport you back to the host.

206
00:09:32,161 --> 00:09:35,903
In Destiny, we wanted to let you meet up with your friends,

207
00:09:35,903 --> 00:09:38,165
but have parallel play in different areas

208
00:09:38,165 --> 00:09:39,486
of the same destination.

209
00:09:39,486 --> 00:09:41,587
You could run alongside them for a mission,

210
00:09:41,587 --> 00:09:42,988
or stop to harvest some spin metal

211
00:09:42,988 --> 00:09:44,209
while your friend rushes ahead.

212
00:09:44,209 --> 00:09:48,432
So, these are the four design pillars

213
00:09:48,432 --> 00:09:50,393
that our architecture was trying to satisfy.

214
00:09:51,270 --> 00:09:54,732
And looking at them, I feel like they're pretty scary

215
00:09:54,732 --> 00:09:57,172
from a risk perspective, especially when you stack it up

216
00:09:57,172 --> 00:10:01,254
with stuff like new IP, first multi-platform title,

217
00:10:01,254 --> 00:10:02,434
new engine.

218
00:10:02,434 --> 00:10:05,796
Therefore, while we were setting ambitious design goals,

219
00:10:05,796 --> 00:10:07,616
we also set some early scoping constraints

220
00:10:07,616 --> 00:10:08,336
on our architecture.

221
00:10:08,336 --> 00:10:10,577
One of the strongest early constraints

222
00:10:10,577 --> 00:10:12,158
is what we call bubbles.

223
00:10:12,158 --> 00:10:18,940
And it's important to think about them as a constraint.

224
00:10:19,456 --> 00:10:23,298
Bubbles were not an accomplishment of a design goal or vision.

225
00:10:23,298 --> 00:10:25,079
They were a scoping decision.

226
00:10:25,079 --> 00:10:29,702
I could certainly imagine a version of Destiny without these, but I couldn't imagine us shipping

227
00:10:29,702 --> 00:10:31,183
in 2014 without these.

228
00:10:31,183 --> 00:10:32,364
So what is a bubble?

229
00:10:32,364 --> 00:10:34,945
A bubble is our unit of simulation.

230
00:10:34,945 --> 00:10:39,808
A player is only ever simulating one bubble's worth of combat and physics at any time.

231
00:10:39,808 --> 00:10:42,670
A bubble is also our unit of asset streaming.

232
00:10:43,208 --> 00:10:47,270
You have at most two bubbles asset memory loaded at any time.

233
00:10:47,270 --> 00:10:49,671
The one that you're currently simulating

234
00:10:49,671 --> 00:10:52,952
and the one that you're pre-caching.

235
00:10:52,952 --> 00:10:55,433
For simulation perf, we had a bunch of different perf rules

236
00:10:55,433 --> 00:10:58,875
depending on the max player count, vehicles, et cetera.

237
00:10:58,875 --> 00:11:01,736
But our standard bubble was six versus 25.

238
00:11:01,736 --> 00:11:02,836
That meant six players and 25 AI

239
00:11:02,836 --> 00:11:04,797
in a single bubble active at any one time.

240
00:11:04,797 --> 00:11:08,919
25 AI ought to be enough to give you the kick-ass action game.

241
00:11:09,440 --> 00:11:11,700
And with three player fire teams, a population of six

242
00:11:11,700 --> 00:11:13,881
gives you the ability to play with friends

243
00:11:13,881 --> 00:11:14,981
and have three strangers to interact with.

244
00:11:14,981 --> 00:11:17,722
But over a one hour experience in Destiny,

245
00:11:17,722 --> 00:11:20,142
we need a lot more than three strangers.

246
00:11:20,142 --> 00:11:23,123
That's why bubbles are also our unit of matchmaking.

247
00:11:23,123 --> 00:11:26,764
So here's an example of two bubbles

248
00:11:26,764 --> 00:11:28,585
with a Z-leg transition between them.

249
00:11:28,585 --> 00:11:30,145
From an asset loading perspective,

250
00:11:30,145 --> 00:11:32,746
this is pretty standard zone-based or airlock streaming.

251
00:11:32,746 --> 00:11:36,006
15 seconds out from the bubble swap,

252
00:11:36,006 --> 00:11:39,167
you start pre-caching all of the resources for the new bubble.

253
00:11:39,865 --> 00:11:41,907
When you get to the bubble swap part at the end,

254
00:11:41,907 --> 00:11:44,770
we've got all of your resource loaded for the new bubble,

255
00:11:44,770 --> 00:11:47,492
and we can instantly de-instantiate everything

256
00:11:47,492 --> 00:11:49,914
in bubble A and instantiate everything in bubble B.

257
00:11:49,914 --> 00:11:53,577
The neat thing that we also do during these transitions

258
00:11:53,577 --> 00:11:55,999
is matchmake you to a new networked game.

259
00:11:55,999 --> 00:11:58,982
In order to meet new strangers in bubble B,

260
00:11:58,982 --> 00:12:00,643
we start matchmaking for a new host

261
00:12:00,643 --> 00:12:02,605
at around the 10-second mark, and are

262
00:12:02,605 --> 00:12:04,487
ready to seamlessly swap you to the new game

263
00:12:04,487 --> 00:12:06,268
when we perform our bubble swap.

264
00:12:07,775 --> 00:12:11,479
If we don't find a suitable bubble to match you with by the five second mark,

265
00:12:11,479 --> 00:12:15,963
we abort matchmaking, which gives you enough time to spin up your own standalone bubble

266
00:12:15,963 --> 00:12:17,665
that other strangers should eventually join.

267
00:12:17,665 --> 00:12:27,454
So, as you're running through the world, you're continuously matchmaking to new bubble instances.

268
00:12:27,454 --> 00:12:30,197
Fireteam is the term that we use for a party.

269
00:12:30,617 --> 00:12:32,377
an intentionally formed group of friends

270
00:12:32,377 --> 00:12:34,698
that all go on the same activity together.

271
00:12:34,698 --> 00:12:37,139
For most activities, the fireteam size limit is three.

272
00:12:37,139 --> 00:12:40,200
A notable exception is six fireteammates for raids.

273
00:12:40,200 --> 00:12:44,002
So you and your fireteammates are always guaranteed

274
00:12:44,002 --> 00:12:46,763
to matchmake into the same bubble instance

275
00:12:46,763 --> 00:12:48,903
if you go to the same geographic location.

276
00:12:48,903 --> 00:12:51,965
But while your fireteam is guaranteed to matchmake

277
00:12:51,965 --> 00:12:53,645
to the same bubble instances,

278
00:12:53,645 --> 00:12:55,586
you're not actually required to stay together.

279
00:12:56,081 --> 00:12:58,483
You're untethered, which means you could be in an activity

280
00:12:58,483 --> 00:13:00,385
with some fire teammates, but each of you

281
00:13:00,385 --> 00:13:03,347
is matched and connected to a completely different bubble

282
00:13:03,347 --> 00:13:05,108
instance in a different part of the world.

283
00:13:05,108 --> 00:13:08,191
Strangers, on the other hand, will match with you

284
00:13:08,191 --> 00:13:10,192
in one bubble, but your connection to them

285
00:13:10,192 --> 00:13:11,634
is not guaranteed if you leave that bubble.

286
00:13:11,634 --> 00:13:14,936
So you and a stranger could matchmake together in one bubble,

287
00:13:14,936 --> 00:13:17,679
then run through a bubble transition side by side,

288
00:13:17,679 --> 00:13:19,840
and end up matching into separate bubble instances

289
00:13:19,840 --> 00:13:21,281
on the other side.

290
00:13:21,281 --> 00:13:23,743
On your screen, he'll just phase out midway through the Z-leg

291
00:13:23,743 --> 00:13:24,484
and disappear.

292
00:13:26,697 --> 00:13:29,099
So bubbles are a unit of autonomous simulation

293
00:13:29,099 --> 00:13:31,821
and matchmaking, but not all bubbles are the same.

294
00:13:31,821 --> 00:13:33,963
If we talk about design goals again,

295
00:13:33,963 --> 00:13:37,205
we definitely want to achieve the pacing, spectacle,

296
00:13:37,205 --> 00:13:39,567
and designer curated experiences

297
00:13:39,567 --> 00:13:41,328
of a Halo or other single player FPS.

298
00:13:41,328 --> 00:13:44,091
So we want you to be able to go to a boss battle

299
00:13:44,091 --> 00:13:46,553
and not have some random stranger ruin the experience

300
00:13:46,553 --> 00:13:47,954
for you or potentially show up

301
00:13:47,954 --> 00:13:49,695
and have the boss already be half dead.

302
00:13:50,513 --> 00:13:53,275
On the other hand, we also really want you to meet strangers,

303
00:13:53,275 --> 00:13:56,096
and these goals are fundamentally at odds

304
00:13:56,096 --> 00:13:58,858
if we try to satisfy them simultaneously.

305
00:13:58,858 --> 00:14:03,700
So we settled on the notion of public versus private bubbles.

306
00:14:03,700 --> 00:14:06,642
Public bubbles are the canonical destiny experience.

307
00:14:06,642 --> 00:14:10,524
Lots of strangers interacting on intersecting activity lines.

308
00:14:10,524 --> 00:14:14,866
Private bubbles are all reserved exclusively for your fire team.

309
00:14:14,866 --> 00:14:17,347
No strangers ever show up in a private bubble.

310
00:14:18,267 --> 00:14:21,668
In MMO terminology, the private bubbles would be instances,

311
00:14:21,668 --> 00:14:24,129
but that terminology isn't a perfect fit for Destiny,

312
00:14:24,129 --> 00:14:25,629
because all of our bubbles are instances.

313
00:14:25,629 --> 00:14:28,050
There could be thousands of copies

314
00:14:28,050 --> 00:14:29,350
of a single public bubble,

315
00:14:29,350 --> 00:14:32,511
each connecting up to six strangers.

316
00:14:32,511 --> 00:14:34,352
So, here's an idea of how we lay out

317
00:14:34,352 --> 00:14:35,873
one of our planets in Destiny.

318
00:14:35,873 --> 00:14:36,913
We call them destinations.

319
00:14:36,913 --> 00:14:40,774
The squares in this diagram are public bubbles.

320
00:14:40,774 --> 00:14:42,295
The circles are private bubbles.

321
00:14:44,162 --> 00:14:46,563
You can see how there's a loop with the public bubbles,

322
00:14:46,563 --> 00:14:48,363
a fairly easy way for you to roll around

323
00:14:48,363 --> 00:14:50,444
in a patrol activity, moving predominantly

324
00:14:50,444 --> 00:14:52,905
between public bubbles, opening treasure chests

325
00:14:52,905 --> 00:14:55,865
while interacting with strangers.

326
00:14:55,865 --> 00:14:57,866
Now if I add some other activity lines,

327
00:14:57,866 --> 00:15:00,587
most of our activities start in a public bubble,

328
00:15:00,587 --> 00:15:02,167
and they all take you on a deliberate path

329
00:15:02,167 --> 00:15:03,147
through many bubbles.

330
00:15:03,147 --> 00:15:06,328
You typically get some exposure to one or two public bubbles

331
00:15:06,328 --> 00:15:08,229
during the activity line, and then you

332
00:15:08,229 --> 00:15:10,029
dive into a private bubble chain where

333
00:15:10,029 --> 00:15:12,050
we can have a hand-authored mission climax.

334
00:15:13,630 --> 00:15:16,734
Now as I continue to layer on the various activities

335
00:15:16,734 --> 00:15:18,476
that strangers can be on in the same bubble,

336
00:15:18,476 --> 00:15:20,358
the intent is that when you encounter folks

337
00:15:20,358 --> 00:15:22,180
in a public bubble, they're likely to be

338
00:15:22,180 --> 00:15:25,543
intersecting lines, passing by, but having different goals

339
00:15:25,543 --> 00:15:26,704
and different directions of travel.

340
00:15:26,704 --> 00:15:30,649
So I mentioned that every time that you enter

341
00:15:30,649 --> 00:15:32,891
a new public bubble, we matchmake you to a new host.

342
00:15:32,891 --> 00:15:36,295
So who should be responsible for hosting each of these bubbles?

343
00:15:37,297 --> 00:15:40,538
We could make it the traditional Halo Reach-era physics host,

344
00:15:40,538 --> 00:15:43,259
whichever console was elected to be the authoritative arbiter

345
00:15:43,259 --> 00:15:45,260
of all the combat events.

346
00:15:45,260 --> 00:15:48,802
We decided not to simply use the physics hosting console,

347
00:15:48,802 --> 00:15:51,363
and to help explain why, we need to talk about host migrations.

348
00:15:51,363 --> 00:15:57,066
A host migration occurs whenever the physics hosting console

349
00:15:57,066 --> 00:15:58,866
disconnects from the game.

350
00:15:58,866 --> 00:16:00,227
In order to keep the game running,

351
00:16:00,227 --> 00:16:02,108
we need to elect a new physics host from one

352
00:16:02,108 --> 00:16:03,168
of the remaining players.

353
00:16:03,893 --> 00:16:05,794
We pick a new host, and then we need to get

354
00:16:05,794 --> 00:16:10,156
new authoritative simulation state from the new host.

355
00:16:10,156 --> 00:16:12,757
In Halo Reach, this was a pretty abrupt experience

356
00:16:12,757 --> 00:16:13,157
for players.

357
00:16:13,157 --> 00:16:15,358
It always caused a black screen for a few seconds,

358
00:16:15,358 --> 00:16:17,199
and it could result in inconsistent state.

359
00:16:17,199 --> 00:16:20,980
It was okay that this experience was a little sucky,

360
00:16:20,980 --> 00:16:22,961
because it was reasonably rare.

361
00:16:22,961 --> 00:16:26,482
Not only did we tie all PvP rewards to finishing a match,

362
00:16:26,482 --> 00:16:30,564
we even temporarily banned players who quit PvP too often.

363
00:16:30,564 --> 00:16:32,565
So host migrations did not typically interrupt

364
00:16:32,565 --> 00:16:33,525
the player experience.

365
00:16:35,221 --> 00:16:39,082
But Destiny is a world of intersecting, not parallel lines.

366
00:16:39,082 --> 00:16:41,042
Most of the time, players are just passing

367
00:16:41,042 --> 00:16:42,242
through public bubbles.

368
00:16:42,242 --> 00:16:45,903
Any one of these players could be the current physics host.

369
00:16:45,903 --> 00:16:48,944
And as soon as she leaves and de-instantiates the bubble,

370
00:16:48,944 --> 00:16:49,864
we need to migrate to a new physics host.

371
00:16:49,864 --> 00:16:52,624
So in most Destiny public bubbles,

372
00:16:52,624 --> 00:16:54,905
physics host migrations happen all the time.

373
00:16:54,905 --> 00:16:57,425
The average player in a public bubble

374
00:16:57,425 --> 00:16:59,826
experiences a host migration every 160 seconds.

375
00:16:59,826 --> 00:17:03,147
I pulled that data from our server logs from the live game.

376
00:17:03,887 --> 00:17:05,008
One every two and a half minutes.

377
00:17:05,008 --> 00:17:07,550
We knew that we needed a better solution

378
00:17:07,550 --> 00:17:09,671
that didn't create a black screen load

379
00:17:09,671 --> 00:17:12,153
and hopefully doesn't cause obvious player facing artifacts.

380
00:17:12,153 --> 00:17:15,776
At this point, I'm sure some of you are thinking,

381
00:17:15,776 --> 00:17:16,977
just use dedicated servers.

382
00:17:16,977 --> 00:17:18,878
If we just never host migrate

383
00:17:18,878 --> 00:17:21,220
because we put all of our physics hosts in the cloud,

384
00:17:21,220 --> 00:17:24,042
we don't have to solve all of these annoying problems.

385
00:17:24,042 --> 00:17:25,823
There's a couple of strong reasons

386
00:17:25,823 --> 00:17:28,065
why we didn't simply run dedicated servers

387
00:17:28,065 --> 00:17:30,326
that were traditional physics hosts.

388
00:17:30,326 --> 00:17:32,008
For one, they need to be cost feasible.

389
00:17:32,720 --> 00:17:35,041
To support our launch, we'd have needed

390
00:17:35,041 --> 00:17:37,462
hundreds of thousands of headless PS3 parody executables

391
00:17:37,462 --> 00:17:40,022
in the cloud, and that becomes a significant

392
00:17:40,022 --> 00:17:41,123
continuous cost to maintain,

393
00:17:41,123 --> 00:17:44,344
especially if our player retention continues to stay

394
00:17:44,344 --> 00:17:45,624
as strong as it has been.

395
00:17:45,624 --> 00:17:49,945
Additionally, peer-to-peer networking supports

396
00:17:49,945 --> 00:17:52,026
maximally responsive action gameplay.

397
00:17:52,026 --> 00:17:54,767
In many cases, we can match you with players

398
00:17:54,767 --> 00:17:56,327
that are in the exact same city as you,

399
00:17:56,327 --> 00:17:59,508
and you get extremely low latency with your physics host,

400
00:17:59,508 --> 00:18:01,488
much better than what we could do with dedicated servers.

401
00:18:02,020 --> 00:18:05,722
We don't want to increase our latency for firing bullets and doing damage.

402
00:18:05,722 --> 00:18:09,224
That violates our feels-like-a-single-player-shooter goal.

403
00:18:09,224 --> 00:18:12,066
So, can we keep our traditional physics hosts around,

404
00:18:12,066 --> 00:18:17,430
but fix the host migration problems that Halo had?

405
00:18:17,430 --> 00:18:20,572
Halo Reach host migrations were typically abrupt black screens.

406
00:18:20,572 --> 00:18:24,014
What does a Destiny host migration look like to players?

407
00:18:24,014 --> 00:18:24,695
It depends, really.

408
00:18:24,695 --> 00:18:27,116
We can talk about two examples to begin with,

409
00:18:27,116 --> 00:18:30,478
what I'll call fully graceful and fully ungraceful.

410
00:18:31,042 --> 00:18:34,044
This isn't a binary switch, but two poles on a continuum.

411
00:18:34,044 --> 00:18:36,705
Fully graceful would be our best case.

412
00:18:36,705 --> 00:18:40,468
So the current host knows that he's about to transition

413
00:18:40,468 --> 00:18:42,889
to another bowl, and as soon as he enters,

414
00:18:42,889 --> 00:18:44,471
the transition interior.

415
00:18:44,471 --> 00:18:46,512
That gives us about 10 seconds of anticipation

416
00:18:46,512 --> 00:18:48,853
during which we can elect a new host

417
00:18:48,853 --> 00:18:50,695
and transfer ownership to them seamlessly.

418
00:18:52,287 --> 00:18:54,649
In the best case, the current physics state

419
00:18:54,649 --> 00:18:57,190
is also fully compatible with the old host state,

420
00:18:57,190 --> 00:18:59,291
so there's no need for discontinuous state,

421
00:18:59,291 --> 00:19:01,513
and players never notice that we switch physics host

422
00:19:01,513 --> 00:19:02,533
midway through combat.

423
00:19:02,533 --> 00:19:04,975
This sort of host migration happens a lot

424
00:19:04,975 --> 00:19:06,655
during a typical player experience,

425
00:19:06,655 --> 00:19:08,036
and most of the time no one notices a thing.

426
00:19:08,036 --> 00:19:10,097
I feel like this is one of the pretty cool things

427
00:19:10,097 --> 00:19:11,138
about the Destiny architecture.

428
00:19:11,138 --> 00:19:14,460
On the other end, you could imagine

429
00:19:14,460 --> 00:19:16,741
our worst case ungraceful host migration.

430
00:19:16,741 --> 00:19:19,263
The physics host pulls their Ethernet cable,

431
00:19:19,263 --> 00:19:21,424
and we stop receiving any packets from them.

432
00:19:22,122 --> 00:19:25,183
We have pretty lenient timeouts because we're always online

433
00:19:25,183 --> 00:19:27,965
and we don't want to be constantly kicking people

434
00:19:27,965 --> 00:19:31,346
out of the game world if they have a bad internet connection.

435
00:19:31,346 --> 00:19:32,687
So it could be 15 or 20 seconds

436
00:19:32,687 --> 00:19:35,608
before we fully timeout the old host.

437
00:19:35,608 --> 00:19:38,529
During that time, you'll be locally predicting state changes,

438
00:19:38,529 --> 00:19:41,030
but they won't ever apply anything authoritative.

439
00:19:41,030 --> 00:19:43,411
So you'll see predictive health bar damage,

440
00:19:43,411 --> 00:19:45,412
but be unable to kill any AI.

441
00:19:45,412 --> 00:19:48,053
And your public events won't advance in any significant way.

442
00:19:48,929 --> 00:19:51,231
Eventually, we'll elect a new physics host,

443
00:19:51,231 --> 00:19:52,972
and public events and AI death, et cetera,

444
00:19:52,972 --> 00:19:54,053
will start functioning again.

445
00:19:54,053 --> 00:19:56,996
So that's the player experience,

446
00:19:56,996 --> 00:19:59,518
but what's going on under the hood?

447
00:19:59,518 --> 00:20:01,799
We obviously need to elect a new host

448
00:20:01,799 --> 00:20:03,961
to hand off all of our simulation authority.

449
00:20:03,961 --> 00:20:06,243
But that new host simulation state

450
00:20:06,243 --> 00:20:09,465
will not be identical to the old host.

451
00:20:09,465 --> 00:20:12,348
Not only may objects be in slightly different states,

452
00:20:12,348 --> 00:20:14,409
they might not have all the same objects

453
00:20:14,409 --> 00:20:15,770
instantiated as the old host.

454
00:20:15,770 --> 00:20:17,872
They might have prematurely deleted some objects.

455
00:20:18,586 --> 00:20:21,348
And this can cause some pretty severe experiential bugs.

456
00:20:21,348 --> 00:20:24,651
In the worst case, it can completely break

457
00:20:24,651 --> 00:20:25,671
activity script progression.

458
00:20:25,671 --> 00:20:30,035
So let's imagine a really simple case from PVE scripting.

459
00:20:30,035 --> 00:20:32,637
You have a door that is scripted to open

460
00:20:32,637 --> 00:20:34,138
when a player presses a switch.

461
00:20:34,138 --> 00:20:36,199
These are both separate objects

462
00:20:36,199 --> 00:20:39,042
that each track a separate Boolean state.

463
00:20:39,042 --> 00:20:42,284
Open closed for the door, on off for the switch.

464
00:20:42,284 --> 00:20:46,387
Crucially, because these objects are separate and unattached

465
00:20:46,387 --> 00:20:47,908
outside of the script logic itself.

466
00:20:48,420 --> 00:20:49,440
They're networked separately.

467
00:20:49,440 --> 00:20:52,681
Destiny bubbles have many dozens of complex objects

468
00:20:52,681 --> 00:20:54,161
all being simultaneously networked

469
00:20:54,161 --> 00:20:56,102
and competing for traffic.

470
00:20:56,102 --> 00:20:58,962
By networking each one of the objects separately,

471
00:20:58,962 --> 00:21:01,183
we can heavily prioritize our networking traffic

472
00:21:01,183 --> 00:21:02,683
to emphasize the objects that are

473
00:21:02,683 --> 00:21:04,424
most important to the player.

474
00:21:04,424 --> 00:21:05,924
We've been doing that since the Halo days.

475
00:21:05,924 --> 00:21:10,305
So let's say that the physics host goes over to the door,

476
00:21:10,305 --> 00:21:12,446
presses the switch, which opens the door.

477
00:21:12,446 --> 00:21:14,387
He then immediately pulls out his ethernet cable.

478
00:21:16,062 --> 00:21:18,164
It's entirely possible that all clients,

479
00:21:18,164 --> 00:21:20,826
or whomever we elect as the new host,

480
00:21:20,826 --> 00:21:24,490
could receive the packet saying set switch state to on,

481
00:21:24,490 --> 00:21:28,533
but never receive the packet saying set door state to open.

482
00:21:28,533 --> 00:21:29,935
That packet could just get lost

483
00:21:29,935 --> 00:21:31,696
through ordinary packet loss,

484
00:21:31,696 --> 00:21:33,978
and the host is no longer available to resend it.

485
00:21:33,978 --> 00:21:37,541
In that case, you now have a new host

486
00:21:37,541 --> 00:21:40,164
with a switch that has already been pressed,

487
00:21:40,164 --> 00:21:42,005
but a door that is still closed,

488
00:21:42,005 --> 00:21:43,967
and you've now got a critical path progression blocker.

489
00:21:45,451 --> 00:21:47,732
And for what it's worth, this case is very real.

490
00:21:47,732 --> 00:21:49,792
Halo Reach had to deal with lots of inconsistent state

491
00:21:49,792 --> 00:21:50,913
like this during host migrations.

492
00:21:50,913 --> 00:21:53,554
It could easily break games like Capture the Flag.

493
00:21:53,554 --> 00:21:56,054
This is a bug screenshot that I grabbed from Halo Reach.

494
00:21:56,054 --> 00:21:58,315
This was a host migration causing the script

495
00:21:58,315 --> 00:22:00,476
to spawn duplicate flags and break the score.

496
00:22:00,476 --> 00:22:01,076
There's two red flags.

497
00:22:01,076 --> 00:22:07,258
And while I don't think we shipped with this bug,

498
00:22:07,258 --> 00:22:08,879
we did ship with host migration bugs,

499
00:22:08,879 --> 00:22:10,259
and plenty more than we wanted.

500
00:22:10,259 --> 00:22:14,581
So, there's a couple of ways that you could imagine

501
00:22:14,581 --> 00:22:15,321
fixing this problem.

502
00:22:16,085 --> 00:22:18,346
One would be to program defensively.

503
00:22:18,346 --> 00:22:21,346
The CTF game ensures that there's never more than one flag

504
00:22:21,346 --> 00:22:22,287
of a given team color.

505
00:22:22,287 --> 00:22:25,167
The door switch resets itself off after a few seconds

506
00:22:25,167 --> 00:22:26,307
so you can reuse it if necessary.

507
00:22:26,307 --> 00:22:28,948
We have to think about each of those cases

508
00:22:28,948 --> 00:22:31,628
as you're writing each activity script or feature,

509
00:22:31,628 --> 00:22:33,489
and it's hard to catch them all.

510
00:22:33,489 --> 00:22:36,089
Plus, host migrations are frequently not covered

511
00:22:36,089 --> 00:22:38,110
in the standard development testing and iteration,

512
00:22:38,110 --> 00:22:40,290
so you can get very close to shipping

513
00:22:40,290 --> 00:22:42,250
before you find all these weird edge cases.

514
00:22:44,337 --> 00:22:47,238
Many of them you won't even find, they're timing sensitive.

515
00:22:47,238 --> 00:22:49,359
Our simple diagram that we just used required

516
00:22:49,359 --> 00:22:51,480
that two packets get sent, but you managed to drop

517
00:22:51,480 --> 00:22:53,801
exactly one of them, which is gonna be hard to repro.

518
00:22:53,801 --> 00:22:57,642
Halo reached ship with way more of these bugs than we'd like

519
00:22:57,642 --> 00:22:59,103
and that was just PVP.

520
00:22:59,103 --> 00:23:01,744
How do we avoid this tax on every single PVE script,

521
00:23:01,744 --> 00:23:04,565
each of which is typically much more complicated

522
00:23:04,565 --> 00:23:05,645
than a PVP game type?

523
00:23:07,695 --> 00:23:10,778
So, what if we go back to the dedicated host idea,

524
00:23:10,778 --> 00:23:13,360
but we only host the mission-critical state

525
00:23:13,360 --> 00:23:14,661
that could break activity scripts?

526
00:23:14,661 --> 00:23:18,385
We keep all of the combat and physics peer-to-peer,

527
00:23:18,385 --> 00:23:21,387
so we have a responsive action game with low latency.

528
00:23:21,387 --> 00:23:24,430
But we keep a minimal, cost-feasible set of state

529
00:23:24,430 --> 00:23:26,772
up in the cloud, so that it never host migrates.

530
00:23:26,772 --> 00:23:31,616
So what do I mean by mission-critical state?

531
00:23:32,330 --> 00:23:34,411
Mission Critical State is any contract

532
00:23:34,411 --> 00:23:38,812
that an activity script explicitly or implicitly requires.

533
00:23:38,812 --> 00:23:42,594
If an activity script says that a button opens a door,

534
00:23:42,594 --> 00:23:44,754
it's implicitly linking the two together

535
00:23:44,754 --> 00:23:46,235
and saying if the button is on,

536
00:23:46,235 --> 00:23:48,136
the door is open and vice versa.

537
00:23:48,136 --> 00:23:51,397
And the really important and really tricky thing here

538
00:23:51,397 --> 00:23:54,558
is that these contracts are typically implicit,

539
00:23:54,558 --> 00:23:55,258
not explicit.

540
00:23:55,258 --> 00:23:57,939
You have to first figure out how to discover

541
00:23:57,939 --> 00:23:59,780
all of the activity script contracts

542
00:23:59,780 --> 00:24:01,701
before you can find a way to enforce them all.

543
00:24:03,580 --> 00:24:05,761
So some of our early attempts here were to try to create

544
00:24:05,761 --> 00:24:08,522
atomicity guarantees between any linked state.

545
00:24:08,522 --> 00:24:10,763
So if the button is connected to a door,

546
00:24:10,763 --> 00:24:12,623
you just make sure that all networking updates

547
00:24:12,623 --> 00:24:15,764
for both of them are atomic, and you're all good.

548
00:24:15,764 --> 00:24:17,725
This approach has two major problems.

549
00:24:17,725 --> 00:24:21,146
One, a lot of contracts within real scripts

550
00:24:21,146 --> 00:24:22,386
are a lot more indirect.

551
00:24:22,386 --> 00:24:25,327
You kill two AI, that spawns a third guy.

552
00:24:25,327 --> 00:24:28,568
The third guy runs over to a door, and he opens the door.

553
00:24:28,568 --> 00:24:31,749
In that case, is the door linked to the original two AI?

554
00:24:33,230 --> 00:24:34,611
Also, it requires that someone,

555
00:24:34,611 --> 00:24:36,152
and if we're talking activity script,

556
00:24:36,152 --> 00:24:37,232
we typically mean a designer,

557
00:24:37,232 --> 00:24:40,394
actively think about host migrations and atomic linkage,

558
00:24:40,394 --> 00:24:43,276
which puts us back in the defensive programming trap

559
00:24:43,276 --> 00:24:46,478
that we'd really like to avoid.

560
00:24:46,478 --> 00:24:48,980
So instead, what if we just compiled a list

561
00:24:48,980 --> 00:24:51,642
of every object that the activity script ever cares about?

562
00:24:51,642 --> 00:24:54,764
All three AI, the door, the CTF flag,

563
00:24:54,764 --> 00:24:56,525
and we make them all atomic with each other.

564
00:24:57,209 --> 00:24:58,390
then we only update atomically,

565
00:24:58,390 --> 00:25:01,012
and every client always gets a fully consistent set

566
00:25:01,012 --> 00:25:03,534
of activity state that satisfies all contracts.

567
00:25:03,534 --> 00:25:05,336
And it's important to note here,

568
00:25:05,336 --> 00:25:09,299
we're trying to get the minimal set of necessary state.

569
00:25:09,299 --> 00:25:11,781
That way, as much as possible is still hosted

570
00:25:11,781 --> 00:25:13,142
by your low latency physics host.

571
00:25:13,142 --> 00:25:16,765
We call this minimal subset of game state

572
00:25:16,765 --> 00:25:20,869
that we care about and want to atomically reconstile

573
00:25:20,869 --> 00:25:21,750
activity state.

574
00:25:22,591 --> 00:25:26,833
ActivityState is all authoritative on the activity host,

575
00:25:26,833 --> 00:25:29,175
which runs up in the cloud and never migrates.

576
00:25:29,175 --> 00:25:32,256
So all of our activity scripts,

577
00:25:32,256 --> 00:25:34,538
like a story mission script, run in the cloud.

578
00:25:34,538 --> 00:25:37,319
And these scripts all declare up front

579
00:25:37,319 --> 00:25:38,600
what state they care about.

580
00:25:38,600 --> 00:25:42,542
Activity scripts operate on some set of objects.

581
00:25:42,542 --> 00:25:46,024
Those are by definition the objects that they care about.

582
00:25:46,024 --> 00:25:48,165
You can't reference an object in ActivityScript

583
00:25:48,165 --> 00:25:50,387
without including it in ActivityState.

584
00:25:51,040 --> 00:25:53,782
There's tons of other objects in the simulations they never care about.

585
00:25:53,782 --> 00:25:57,163
Bullets and crates and vehicles.

586
00:25:57,163 --> 00:25:59,164
But we can do even better than that.

587
00:25:59,164 --> 00:26:03,206
Because activity scripts also declare what they care about each of these objects.

588
00:26:03,206 --> 00:26:06,187
Let's take a squad, for example.

589
00:26:06,187 --> 00:26:08,048
A group of coordinated AI in Destiny.

590
00:26:08,048 --> 00:26:12,710
An activity script might care, has the squad spawned?

591
00:26:12,710 --> 00:26:14,131
How many AI are alive or dead?

592
00:26:14,131 --> 00:26:18,473
But they probably don't care about the individual health or world space positions of those AI.

593
00:26:19,277 --> 00:26:24,218
We call these bits of discrete mission-critical state sensors.

594
00:26:24,218 --> 00:26:28,679
We can take all this specified state, which isn't very much,

595
00:26:28,679 --> 00:26:30,680
and make it all atomically reconcilable

596
00:26:30,680 --> 00:26:31,860
and persisted in the cloud.

597
00:26:31,860 --> 00:26:35,721
This way, at any time, a new physics host can take over

598
00:26:35,721 --> 00:26:38,982
and can set itself into a fully consistent state that

599
00:26:38,982 --> 00:26:40,522
will allow the activity script to proceed.

600
00:26:42,399 --> 00:26:43,839
So here's an example of activity state

601
00:26:43,839 --> 00:26:45,700
on both the physics hosts,

602
00:26:45,700 --> 00:26:48,080
that's the PS4 360 console in someone's house

603
00:26:48,080 --> 00:26:50,281
down at the bottom,

604
00:26:50,281 --> 00:26:53,522
and the activity host which lives up in the cloud.

605
00:26:53,522 --> 00:26:55,682
There's a full duplication of sensor state

606
00:26:55,682 --> 00:26:56,302
on both machines.

607
00:26:56,302 --> 00:27:00,043
Auth state is what we call sensor communication

608
00:27:00,043 --> 00:27:01,704
from the activity host to the client

609
00:27:01,704 --> 00:27:04,764
because the activity host is always the authority

610
00:27:04,764 --> 00:27:05,705
over activity state.

611
00:27:05,705 --> 00:27:07,205
Those are the red arrows going down.

612
00:27:07,205 --> 00:27:10,726
And sense state is communication in the other direction,

613
00:27:10,726 --> 00:27:11,546
the green arrows.

614
00:27:13,702 --> 00:27:17,163
So as a simple example, let's suppose that you have a squad.

615
00:27:17,163 --> 00:27:19,904
You want to spawn it and trigger an activity complete banner

616
00:27:19,904 --> 00:27:21,604
when everyone in the squad is dead.

617
00:27:21,604 --> 00:27:24,765
I've written a sample script up there on the right,

618
00:27:24,765 --> 00:27:28,486
where you place the squad, you wait for them all to die,

619
00:27:28,486 --> 00:27:30,487
and then you play activity complete.

620
00:27:30,487 --> 00:27:32,308
So first the activity host script calls place.

621
00:27:32,308 --> 00:27:36,089
This sends down auth state to the physics host,

622
00:27:36,089 --> 00:27:37,409
which spawns three AI.

623
00:27:38,935 --> 00:27:41,696
At this point, the three AI are simulated on the physics host

624
00:27:41,696 --> 00:27:43,477
and peer-to-peer networked to other clients.

625
00:27:43,477 --> 00:27:47,318
There's already a couple of interesting things to note here.

626
00:27:47,318 --> 00:27:50,400
First, the activity script itself is running in the cloud.

627
00:27:50,400 --> 00:27:52,961
None of our Lua logic for activity scripts

628
00:27:52,961 --> 00:27:54,801
are actually executing on the PS4 client.

629
00:27:54,801 --> 00:27:58,923
Second, it's worth pointing out that these three AI

630
00:27:58,923 --> 00:28:00,144
are not in activity state.

631
00:28:00,144 --> 00:28:03,085
There's a squad sensor inside activity state,

632
00:28:03,085 --> 00:28:05,606
but it's tracking very minimal state.

633
00:28:06,057 --> 00:28:07,659
that three of them are alive,

634
00:28:07,659 --> 00:28:09,681
that they're using this specific firing area,

635
00:28:09,681 --> 00:28:10,181
stuff like that.

636
00:28:10,181 --> 00:28:12,223
Outside of activity state,

637
00:28:12,223 --> 00:28:15,326
there are three linked heavyweight objects.

638
00:28:15,326 --> 00:28:19,350
Those are the actual bipeds with world space positions

639
00:28:19,350 --> 00:28:22,112
and skeletons and specific animation state.

640
00:28:22,112 --> 00:28:23,554
None of that state lives on the activity host.

641
00:28:23,554 --> 00:28:26,056
The networking protocols are also different.

642
00:28:26,056 --> 00:28:28,158
Those three AI are networked

643
00:28:28,158 --> 00:28:29,980
just like any other peer-to-peer object.

644
00:28:30,393 --> 00:28:33,655
They're each separately networked to all physics clients

645
00:28:33,655 --> 00:28:36,537
in the bubble, independent of the sensors,

646
00:28:36,537 --> 00:28:39,219
using traditional Halo PVP networking.

647
00:28:39,219 --> 00:28:40,620
So now let's start killing some aliens.

648
00:28:40,620 --> 00:28:43,802
As the physics host detects each kill,

649
00:28:43,802 --> 00:28:46,364
it sends sense state up to the activity host,

650
00:28:46,364 --> 00:28:48,425
decrementing the alive count on the sensor.

651
00:28:48,425 --> 00:28:53,108
These updates are time-sliced to be relatively infrequent.

652
00:28:53,108 --> 00:28:55,550
We use 10 hertz for both CPU and bandwidth reasons.

653
00:28:56,323 --> 00:28:59,304
and it's atomic with all other sense state changes.

654
00:28:59,304 --> 00:29:02,625
We send all coherent sensor changes up simultaneously

655
00:29:02,625 --> 00:29:03,685
on a given sensor update.

656
00:29:03,685 --> 00:29:06,325
After the alive count hits zero,

657
00:29:06,325 --> 00:29:08,286
during the next script update,

658
00:29:08,286 --> 00:29:11,226
the script coroutine continues on the activity host.

659
00:29:11,226 --> 00:29:13,626
At this point, it would communicate down

660
00:29:13,626 --> 00:29:16,967
via an objective sensor, which would then update the HUD

661
00:29:16,967 --> 00:29:20,888
to display the activity complete banner.

662
00:29:20,888 --> 00:29:23,088
So, for a given activity,

663
00:29:23,088 --> 00:29:25,208
we specify all of its sensors up front.

664
00:29:25,678 --> 00:29:27,499
all the objects that it might care about

665
00:29:27,499 --> 00:29:28,119
during the activity.

666
00:29:28,119 --> 00:29:30,880
Sensors can be related to game objects,

667
00:29:30,880 --> 00:29:31,921
but they aren't one-to-one.

668
00:29:31,921 --> 00:29:33,841
You can have multiple objects

669
00:29:33,841 --> 00:29:36,602
tracked by a single sensor, like a squad,

670
00:29:36,602 --> 00:29:38,843
or multiple sensors on a single object

671
00:29:38,843 --> 00:29:40,844
for discrete, unrelated components of state.

672
00:29:40,844 --> 00:29:44,925
Basically, on the physics host,

673
00:29:44,925 --> 00:29:47,366
any sensor can read anything at once

674
00:29:47,366 --> 00:29:48,466
about game state.

675
00:29:48,466 --> 00:29:51,587
But whatever internal memory it decides to store

676
00:29:51,587 --> 00:29:54,168
gets communicated up to the activity host

677
00:29:54,168 --> 00:29:54,928
as sense state.

678
00:29:55,711 --> 00:29:58,853
The sensor internal memory is a very small subset

679
00:29:58,853 --> 00:30:00,453
of the overall game state.

680
00:30:00,453 --> 00:30:02,554
So our activity hosts are much cheaper

681
00:30:02,554 --> 00:30:04,455
than a traditional physics host dedicated server.

682
00:30:04,455 --> 00:30:06,797
We only need to pay for our data center,

683
00:30:06,797 --> 00:30:09,678
simulating a networking activity state,

684
00:30:09,678 --> 00:30:13,860
not the entirety of the physical simulation.

685
00:30:13,860 --> 00:30:15,241
By pruning activity state down

686
00:30:15,241 --> 00:30:16,602
to what's absolutely necessary,

687
00:30:16,602 --> 00:30:19,403
we're able to get significant scale on our data center.

688
00:30:19,403 --> 00:30:21,824
Each of our activity host executables

689
00:30:21,824 --> 00:30:23,485
is around 45 megabytes.

690
00:30:24,010 --> 00:30:25,331
We could make this even smaller.

691
00:30:25,331 --> 00:30:27,511
It's a stripped down version of the Destiny executable

692
00:30:27,511 --> 00:30:29,432
where we just tore out anything that wasn't

693
00:30:29,432 --> 00:30:30,892
needed for activity state.

694
00:30:30,892 --> 00:30:32,892
And we basically stopped memory optimizing

695
00:30:32,892 --> 00:30:36,513
when we became CPU bound on our servers.

696
00:30:36,513 --> 00:30:38,714
We took our activity hosts at 10 hertz,

697
00:30:38,714 --> 00:30:41,675
which allows us to run almost 5,000 of them per server.

698
00:30:41,675 --> 00:30:44,015
That's a 40 core, 256 gigabyte machine.

699
00:30:45,325 --> 00:30:48,147
Given that we typically have a bit over two players

700
00:30:48,147 --> 00:30:50,628
per activity host in real world conditions,

701
00:30:50,628 --> 00:30:53,109
that means that our data center could hypothetically handle

702
00:30:53,109 --> 00:30:56,531
one million concurrent users with only a couple hundred

703
00:30:56,531 --> 00:30:59,112
servers, and that's with plenty of safety headroom

704
00:30:59,112 --> 00:31:00,192
on each machine.

705
00:31:00,192 --> 00:31:02,774
That's dramatically better scale than trying to use

706
00:31:02,774 --> 00:31:03,754
a full dedicated server.

707
00:31:03,754 --> 00:31:06,816
With full dedicated servers, that same hypothetical

708
00:31:06,816 --> 00:31:09,417
million players would require half a million

709
00:31:09,417 --> 00:31:11,778
headless PS3 processes, each running

710
00:31:11,778 --> 00:31:12,958
our full game simulation.

711
00:31:15,295 --> 00:31:17,436
So now, what happens if you have a host migration?

712
00:31:17,436 --> 00:31:20,658
Let's suppose that the activity host

713
00:31:20,658 --> 00:31:22,939
has an alive count of three.

714
00:31:22,939 --> 00:31:25,600
It never got send state saying that any of the AI died.

715
00:31:25,600 --> 00:31:28,602
But the new physics host, for whatever reason,

716
00:31:28,602 --> 00:31:31,043
has inconsistent state that gives it an alive count of one.

717
00:31:31,043 --> 00:31:34,945
So the new physics host has only one AI left alive,

718
00:31:34,945 --> 00:31:38,147
and it's only networking one AI to physics clients

719
00:31:38,147 --> 00:31:39,927
using Halo peer-to-peer networking.

720
00:31:39,927 --> 00:31:42,589
Whereas the activity host authoritatively states

721
00:31:42,589 --> 00:31:44,610
that there should be three AI left alive.

722
00:31:46,343 --> 00:31:48,165
The activity host is the session authority,

723
00:31:48,165 --> 00:31:50,867
who arbitrates election of new physics hosts

724
00:31:50,867 --> 00:31:52,508
and handles all the migrations.

725
00:31:52,508 --> 00:31:54,590
So any host migration necessarily goes

726
00:31:54,590 --> 00:31:56,111
through the activity host,

727
00:31:56,111 --> 00:31:59,114
and it calls a special reconcile function on each sensor.

728
00:31:59,114 --> 00:32:01,535
The squad sensor, along with every other sensor,

729
00:32:01,535 --> 00:32:05,298
sends down auth state in a special reconcile command,

730
00:32:05,298 --> 00:32:07,440
which requires that the new physics host

731
00:32:07,440 --> 00:32:09,942
modify his simulation to match the auth state.

732
00:32:11,874 --> 00:32:14,196
In the common graceful migration case

733
00:32:14,196 --> 00:32:15,878
that we talked about earlier,

734
00:32:15,878 --> 00:32:18,360
this often results in zero or imperceptible changes

735
00:32:18,360 --> 00:32:21,183
if the new physics host is up to date with activity state.

736
00:32:21,183 --> 00:32:24,926
In this case, the physics host has to spawn two new AI

737
00:32:24,926 --> 00:32:27,869
to match the auth state requirement of three.

738
00:32:27,869 --> 00:32:31,952
And one cool thing here is how we spawn the dregs.

739
00:32:31,952 --> 00:32:35,575
We already have squad place logic in the sensor

740
00:32:35,575 --> 00:32:36,696
that knows how to tell the game

741
00:32:36,696 --> 00:32:38,758
to instantiate new AI bipeds.

742
00:32:39,285 --> 00:32:42,168
we can typically reuse those exact same code pathways

743
00:32:42,168 --> 00:32:43,870
to handle reconcile.

744
00:32:43,870 --> 00:32:45,531
It's just like any other auth state update

745
00:32:45,531 --> 00:32:46,652
that you might get through that sensor.

746
00:32:46,652 --> 00:32:49,435
Similarly, if the auth state had said

747
00:32:49,435 --> 00:32:52,277
that there were fewer AI than the physics host

748
00:32:52,277 --> 00:32:54,059
was simulating, code in the sensor

749
00:32:54,059 --> 00:32:56,161
would choose AI to instantly kill in order

750
00:32:56,161 --> 00:32:58,643
to get it down to the correct count.

751
00:32:58,643 --> 00:33:02,486
There's several other powerful benefits

752
00:33:02,486 --> 00:33:04,568
that come from having these dedicated activity hosts.

753
00:33:04,568 --> 00:33:06,210
One is security.

754
00:33:06,856 --> 00:33:09,098
For every Destiny activity being played right now,

755
00:33:09,098 --> 00:33:11,179
there's a machine that we can trust

756
00:33:11,179 --> 00:33:13,061
that has fairly complex understanding

757
00:33:13,061 --> 00:33:15,182
of the minute-to-minute gameplay.

758
00:33:15,182 --> 00:33:16,984
This helps greatly in combating piracy,

759
00:33:16,984 --> 00:33:18,985
is a strong avenue for investigating

760
00:33:18,985 --> 00:33:21,947
suspected cheaters and exploits.

761
00:33:21,947 --> 00:33:24,969
Additionally, activity bubbles can execute scripts

762
00:33:24,969 --> 00:33:26,631
without any players being present.

763
00:33:26,631 --> 00:33:29,313
We don't have to leash you to a boss room,

764
00:33:29,313 --> 00:33:30,834
and we can maintain an activity script

765
00:33:30,834 --> 00:33:33,075
even when every player has left the bubble

766
00:33:33,075 --> 00:33:34,977
and locally deleted every single object

767
00:33:34,977 --> 00:33:36,298
from their console's physical memory.

768
00:33:38,765 --> 00:33:41,846
And what happens if a player re-enters one of these empty activity bubbles?

769
00:33:41,846 --> 00:33:46,609
The player herself will spin up the simulation in the default state when she crosses the

770
00:33:46,609 --> 00:33:46,789
z-leg.

771
00:33:46,789 --> 00:33:51,071
She'll be elected as the new physics host, since it was previously empty.

772
00:33:51,071 --> 00:33:56,613
And then she will get a reconcile call where she can fix up all of her simulation state

773
00:33:56,613 --> 00:33:58,795
to match the authoritative sensor state.

774
00:33:58,795 --> 00:34:00,315
This is actually pretty cool.

775
00:34:00,927 --> 00:34:03,849
we automatically get a minimal state load functionality

776
00:34:03,849 --> 00:34:06,451
when entering an empty activity bubble

777
00:34:06,451 --> 00:34:09,694
because we only fix up the declared sensors

778
00:34:09,694 --> 00:34:12,276
and we leave everything else in its default state.

779
00:34:12,276 --> 00:34:16,760
So, all the examples that we've talked about so far

780
00:34:16,760 --> 00:34:18,241
are co-op scripting.

781
00:34:18,241 --> 00:34:20,583
Two or three players and a single fire team

782
00:34:20,583 --> 00:34:22,164
on the same activity in a networked environment.

783
00:34:22,164 --> 00:34:26,068
But Destiny is also about meeting strangers

784
00:34:26,068 --> 00:34:27,088
on intersecting paths.

785
00:34:27,601 --> 00:34:29,062
What happens when two players meet

786
00:34:29,062 --> 00:34:31,264
who are on two completely different activities?

787
00:34:31,264 --> 00:34:33,926
This is where it starts to get even more complicated.

788
00:34:33,926 --> 00:34:38,150
So, let's suppose that we've got three players

789
00:34:38,150 --> 00:34:39,591
in this public bubble.

790
00:34:39,591 --> 00:34:40,993
Alice, Bob, and Charpy.

791
00:34:40,993 --> 00:34:43,435
They're peer-to-peer connected to each other

792
00:34:43,435 --> 00:34:45,777
using traditional reach networking,

793
00:34:45,777 --> 00:34:47,058
and Alice is the physics host.

794
00:34:47,058 --> 00:34:50,861
Two of them, Alice and Bob, are doing a strike together.

795
00:34:50,861 --> 00:34:53,603
This means that they're connected

796
00:34:53,603 --> 00:34:55,725
to a mission activity host for their mission.

797
00:34:56,423 --> 00:34:59,286
The mission activity host is where all of the script logic

798
00:34:59,286 --> 00:35:00,467
for the chosen activity lives.

799
00:35:00,467 --> 00:35:03,310
Firing off objectives, spawning bosses

800
00:35:03,310 --> 00:35:06,873
in their private bubbles, et cetera.

801
00:35:06,873 --> 00:35:08,595
Charlie is playing a patrol,

802
00:35:08,595 --> 00:35:10,757
so while he's in the same bubble,

803
00:35:10,757 --> 00:35:13,139
he has a separate mission activity host

804
00:35:13,139 --> 00:35:16,662
giving him local patrol objectives.

805
00:35:16,662 --> 00:35:19,224
Finally, they're also simultaneously all connected

806
00:35:19,224 --> 00:35:21,747
to the same bubble activity host.

807
00:35:22,327 --> 00:35:26,449
The bubble host is responsible for all of the ambient scripting in the public bubble.

808
00:35:26,449 --> 00:35:31,792
It spawns and scripts all of the ambient AI that you fight, it handles the respawn timing

809
00:35:31,792 --> 00:35:36,174
and placement of all the resource nodes and treasure chests, and it runs all of the logic

810
00:35:36,174 --> 00:35:37,115
for all of the public events.

811
00:35:37,115 --> 00:35:42,518
Those are the main things that we do in our Destiny public bubbles, but technologically,

812
00:35:42,518 --> 00:35:44,799
a bubble host is almost identical to a mission host.

813
00:35:44,799 --> 00:35:49,702
So you could write an arbitrarily complex script in there for a crazy public boss encounter.

814
00:35:50,737 --> 00:35:53,698
I said almost identical because there's one key difference

815
00:35:53,698 --> 00:35:56,479
between mission activity hosts and bubble activity hosts

816
00:35:56,479 --> 00:35:57,419
that's worth mentioning.

817
00:35:57,419 --> 00:36:00,820
If you go back to look at our activity line,

818
00:36:00,820 --> 00:36:03,942
with all of these public and private bubbles,

819
00:36:03,942 --> 00:36:05,642
we could make them interchangeable

820
00:36:05,642 --> 00:36:08,203
and have an activity host for every single public bubble

821
00:36:08,203 --> 00:36:09,684
and one for every single private bubble.

822
00:36:09,684 --> 00:36:12,145
But there isn't really a need to split up

823
00:36:12,145 --> 00:36:13,925
the private bubbles for a given fire team.

824
00:36:14,563 --> 00:36:16,705
one fire team has their own shared instance

825
00:36:16,705 --> 00:36:18,926
of every private bubble in the destination,

826
00:36:18,926 --> 00:36:21,348
so we can simulate all of them simultaneously

827
00:36:21,348 --> 00:36:24,111
on a single activity host.

828
00:36:24,111 --> 00:36:27,093
So you have one bubble host for each of the public bubbles,

829
00:36:27,093 --> 00:36:28,875
and then one mission activity host

830
00:36:28,875 --> 00:36:32,057
that manages every other bubble on the destination,

831
00:36:32,057 --> 00:36:32,998
all of the private bubbles

832
00:36:32,998 --> 00:36:36,601
specific to the mission that you're on.

833
00:36:36,601 --> 00:36:37,702
So, to reiterate,

834
00:36:37,702 --> 00:36:40,884
each fire team gets their own mission host.

835
00:36:41,437 --> 00:36:43,597
All Fireteam mates are always connected

836
00:36:43,597 --> 00:36:44,597
to the same Mission Host.

837
00:36:44,597 --> 00:36:47,438
And this may be the only connection that they share

838
00:36:47,438 --> 00:36:48,779
if they're not in the same bubble.

839
00:36:48,779 --> 00:36:51,339
The Mission Host runs the activity script

840
00:36:51,339 --> 00:36:53,240
specific to the activity that you're on,

841
00:36:53,240 --> 00:36:55,100
like a given story mission script.

842
00:36:55,100 --> 00:36:59,042
The Mission Host also owns all of the private bubbles

843
00:36:59,042 --> 00:36:59,802
in the destination.

844
00:36:59,802 --> 00:37:01,782
That way your Fireteam can meet up

845
00:37:01,782 --> 00:37:03,683
in any of these private bubbles,

846
00:37:03,683 --> 00:37:05,403
but no stranger will ever show up there.

847
00:37:07,492 --> 00:37:09,932
Then you also have bubble activity hosts

848
00:37:09,932 --> 00:37:11,233
which control public bubbles.

849
00:37:11,233 --> 00:37:14,533
For every public bubble instance that we have running

850
00:37:14,533 --> 00:37:16,954
in the Destiny universe, there is exactly one

851
00:37:16,954 --> 00:37:18,455
bubble activity host in the cloud.

852
00:37:18,455 --> 00:37:20,995
It does all of the scripting for the public bubble itself,

853
00:37:20,995 --> 00:37:25,777
public events, spawning treasure chests, ambient encounters,

854
00:37:25,777 --> 00:37:28,717
and at any given time, a bubble host will likely

855
00:37:28,717 --> 00:37:31,018
have several strangers in it who each have

856
00:37:31,018 --> 00:37:32,498
their own separate mission hosts.

857
00:37:33,326 --> 00:37:35,587
Additionally, every member of a fire team

858
00:37:35,587 --> 00:37:37,327
could be connected to different bubble hosts

859
00:37:37,327 --> 00:37:39,068
if they're all in different public bubbles.

860
00:37:39,068 --> 00:37:41,329
So going back to our public bubble case,

861
00:37:41,329 --> 00:37:43,309
you've got three different activity hosts

862
00:37:43,309 --> 00:37:46,030
all running scripts simultaneously

863
00:37:46,030 --> 00:37:49,992
and injecting state into these consoles down at the bottom.

864
00:37:49,992 --> 00:37:52,873
How do we keep the scripts from stomping all over each other?

865
00:37:53,849 --> 00:37:55,751
As an example, you've got Charlie on the right

866
00:37:55,751 --> 00:37:56,271
who's on a patrol.

867
00:37:56,271 --> 00:37:58,953
Lots of the patrol jobs take place in public bubbles.

868
00:37:58,953 --> 00:38:00,895
How is that ownership distributed

869
00:38:00,895 --> 00:38:06,419
between the patrol mission host and the public bubble host?

870
00:38:06,419 --> 00:38:08,801
In order to keep these scripts from fighting each other,

871
00:38:08,801 --> 00:38:12,984
we have a few policies that we enforce on mission hosts.

872
00:38:12,984 --> 00:38:14,865
They're allowed to do whatever they want

873
00:38:14,865 --> 00:38:16,827
inside all of those private bubbles that they own.

874
00:38:16,827 --> 00:38:21,110
But they're not allowed to instantiate or modify

875
00:38:21,110 --> 00:38:23,052
any networked objects inside a public bubble.

876
00:38:23,868 --> 00:38:26,288
This way, there's only ever one activity host per bubble

877
00:38:26,288 --> 00:38:29,149
who can create or modify the shared simulation.

878
00:38:29,149 --> 00:38:33,430
However, they are allowed to do some stuff in public bubbles,

879
00:38:33,430 --> 00:38:36,350
as long as it doesn't affect the shared simulation.

880
00:38:36,350 --> 00:38:38,290
They can play lines of dialogue.

881
00:38:38,290 --> 00:38:39,551
They can set objectives.

882
00:38:39,551 --> 00:38:41,411
They can play full screen effects,

883
00:38:41,411 --> 00:38:43,491
all stuff that is just local to that fire team.

884
00:38:43,491 --> 00:38:47,332
Additionally, it's a common occurrence

885
00:38:47,332 --> 00:38:50,273
for the public bubble script to have some activity-specific

886
00:38:50,273 --> 00:38:50,693
logic in it.

887
00:38:51,180 --> 00:38:54,282
For example, it can say, if any players in my bubble

888
00:38:54,282 --> 00:38:56,464
are on this specific story activity,

889
00:38:56,464 --> 00:38:59,486
allow this interactable to be used by one of those players.

890
00:38:59,486 --> 00:39:03,810
A really great example of public bubble hosts

891
00:39:03,810 --> 00:39:06,031
triggering mission-specific logic

892
00:39:06,031 --> 00:39:10,355
is the raid entrance bubble for the Vault of Glass on Venus.

893
00:39:10,355 --> 00:39:11,576
If you wander through that bubble,

894
00:39:11,576 --> 00:39:13,557
you might see a raid party show up,

895
00:39:13,557 --> 00:39:16,400
and their presence in the bubble causes the bubble host

896
00:39:16,400 --> 00:39:18,061
to trigger the first encounter of the raid.

897
00:39:18,987 --> 00:39:20,568
Special enemies from the raid spawn

898
00:39:20,568 --> 00:39:23,970
and players in the bubble have to stand on three switches

899
00:39:23,970 --> 00:39:25,671
long enough to open a giant door.

900
00:39:25,671 --> 00:39:28,914
All this logic occurs on the public bubble host,

901
00:39:28,914 --> 00:39:30,395
not the mission host for the raid.

902
00:39:30,395 --> 00:39:32,716
And the cool thing here is that not only

903
00:39:32,716 --> 00:39:36,059
can the stranger wandering through this bubble

904
00:39:36,059 --> 00:39:38,660
see all of this happening, because it's all happening

905
00:39:38,660 --> 00:39:40,742
on the shared bubble host that they're all connected to,

906
00:39:40,742 --> 00:39:43,624
but you can also participate in that first encounter

907
00:39:43,624 --> 00:39:46,526
and help out without having to be on the raid activity.

908
00:39:47,129 --> 00:39:49,111
If she helps them complete this encounter,

909
00:39:49,111 --> 00:39:53,174
they'll run off inside the door, which is a private bubble,

910
00:39:53,174 --> 00:39:57,377
and phase out of her game, even if she tries to follow them.

911
00:39:57,377 --> 00:40:00,559
This cool upside carries with it additional complexity.

912
00:40:00,559 --> 00:40:02,421
In order to do something like this,

913
00:40:02,421 --> 00:40:04,522
you have to split up your activity

914
00:40:04,522 --> 00:40:06,404
into public and private portions.

915
00:40:06,404 --> 00:40:08,986
The public portions live on their respective

916
00:40:08,986 --> 00:40:10,146
public bubble hosts.

917
00:40:10,146 --> 00:40:12,548
The private portions live on the mission activity host.

918
00:40:13,591 --> 00:40:16,414
And for reasonably complex interactions between the two,

919
00:40:16,414 --> 00:40:18,816
you have to pass global flags back and forth between them

920
00:40:18,816 --> 00:40:20,858
because there's very limited interaction

921
00:40:20,858 --> 00:40:21,939
between activity hosts.

922
00:40:21,939 --> 00:40:23,581
This constraint, plus the fact that a single

923
00:40:23,581 --> 00:40:27,965
public bubble script needs to know how to arbitrate

924
00:40:27,965 --> 00:40:30,348
all of the different possible events

925
00:40:30,348 --> 00:40:33,231
that could happen inside of it simultaneously,

926
00:40:33,231 --> 00:40:35,913
kept us pretty conservative with what we do

927
00:40:35,913 --> 00:40:37,715
in public bubbles for Destiny so far.

928
00:40:39,052 --> 00:40:41,314
But I believe that we've only just scratched the surface here

929
00:40:41,314 --> 00:40:43,336
and there's a lot of really ambitious stuff

930
00:40:43,336 --> 00:40:46,198
we can start doing in public bubbles for future releases

931
00:40:46,198 --> 00:40:48,380
now that we're starting to get our sea legs

932
00:40:48,380 --> 00:40:48,960
with all this tech.

933
00:40:48,960 --> 00:40:53,844
So, while I do think that we've managed

934
00:40:53,844 --> 00:40:55,545
to create some pretty cool tech

935
00:40:55,545 --> 00:40:57,907
and have even more ambitious designs coming down the pipe,

936
00:40:57,907 --> 00:40:59,729
it's also worth spending a little time

937
00:40:59,729 --> 00:41:01,890
talking about the downsides and challenges

938
00:41:01,890 --> 00:41:02,711
that we've encountered.

939
00:41:02,711 --> 00:41:05,894
A phrase we like to use internally a lot at Bungie

940
00:41:05,894 --> 00:41:07,975
for this is, we're not the best.

941
00:41:11,460 --> 00:41:15,261
Yeah, so...

942
00:41:15,261 --> 00:41:18,622
Back in January, players found the first repeatable

943
00:41:18,622 --> 00:41:20,863
host migration exploit that I'm aware of for Destiny.

944
00:41:20,863 --> 00:41:24,684
They could cheese the final boss fight in our first DLC raid

945
00:41:24,684 --> 00:41:26,945
by pulling out their network cable at a key moment.

946
00:41:26,945 --> 00:41:30,626
This rapidly turned into the de facto way to defeat the raid.

947
00:41:30,626 --> 00:41:35,088
Raise your hands if you've played in a game that cheesed Crota

948
00:41:35,088 --> 00:41:37,068
by having the host pull out their network cable.

949
00:41:37,068 --> 00:41:38,849
Alright, a few of you are honest. I appreciate that.

950
00:41:40,460 --> 00:41:42,261
I mean, if this makes you think,

951
00:41:42,261 --> 00:41:44,621
so isn't all of this talk's resilience

952
00:41:44,621 --> 00:41:47,002
to host migration stuff total bullshit?

953
00:41:47,002 --> 00:41:50,122
I don't really blame you.

954
00:41:50,122 --> 00:41:51,502
This case was an interesting book.

955
00:41:51,502 --> 00:41:54,303
We have several client-side systems

956
00:41:54,303 --> 00:41:56,003
that don't run on the activity host

957
00:41:56,003 --> 00:41:58,904
for handling damage state and AI behavior transitions.

958
00:41:58,904 --> 00:42:01,704
In this case, a mission-critical portion

959
00:42:01,704 --> 00:42:03,765
of the raid boss logic was set up

960
00:42:03,765 --> 00:42:06,005
entirely using those client-side systems.

961
00:42:06,569 --> 00:42:08,571
so it never got persisted or secured

962
00:42:08,571 --> 00:42:09,591
by our activity host model,

963
00:42:09,591 --> 00:42:11,933
even though we had built sensors

964
00:42:11,933 --> 00:42:14,755
specifically to secure this sort of state transition.

965
00:42:14,755 --> 00:42:17,477
This is a general problem that we have.

966
00:42:17,477 --> 00:42:20,019
Any time that we expose new complexity

967
00:42:20,019 --> 00:42:21,420
that is client-side only,

968
00:42:21,420 --> 00:42:23,202
you run the risk of anyone in the studio

969
00:42:23,202 --> 00:42:26,544
unintentionally rigging up some Rube Goldberg machine

970
00:42:26,544 --> 00:42:27,785
that runs entirely on the client

971
00:42:27,785 --> 00:42:30,267
and then making that machine mission-critical.

972
00:42:31,964 --> 00:42:34,765
And to be clear, I'm not selling out the content creators here.

973
00:42:34,765 --> 00:42:38,426
It's our job as the engineers to create intuitive systems

974
00:42:38,426 --> 00:42:41,067
and communicate their usage patterns well

975
00:42:41,067 --> 00:42:42,368
to the entire design team.

976
00:42:42,368 --> 00:42:45,229
I view this case as an engineering failure

977
00:42:45,229 --> 00:42:46,870
for not paying close enough attention

978
00:42:46,870 --> 00:42:51,872
to and auditing the more complex raid scripts and damage setups.

979
00:42:52,972 --> 00:42:54,753
Ideally, we all want to live in a world

980
00:42:54,753 --> 00:42:56,314
where designers don't ever have to think

981
00:42:56,314 --> 00:42:58,295
about host migrations, or about which machine

982
00:42:58,295 --> 00:43:00,076
their logic is executing on,

983
00:43:00,076 --> 00:43:01,997
and everything should just work.

984
00:43:01,997 --> 00:43:04,258
Some other stuff that sucks.

985
00:43:04,258 --> 00:43:07,399
Our bubble system has some strong constraints

986
00:43:07,399 --> 00:43:09,060
that it imposes in our combat spaces.

987
00:43:09,060 --> 00:43:14,262
The Z-legs are a significant amount of real estate

988
00:43:14,262 --> 00:43:16,363
where we can't really put any interesting gameplay.

989
00:43:17,312 --> 00:43:18,893
You also get some weird player artifacts.

990
00:43:18,893 --> 00:43:20,974
If you run through a public bubble transition

991
00:43:20,974 --> 00:43:22,715
with another player on your fire team,

992
00:43:22,715 --> 00:43:24,836
you'll see them disappear and then respawn.

993
00:43:24,836 --> 00:43:26,797
That's because when you bubble swap,

994
00:43:26,797 --> 00:43:30,219
you're fully disconnecting with that player and his game,

995
00:43:30,219 --> 00:43:33,020
leaving their game, then joining a new game

996
00:43:33,020 --> 00:43:34,681
and respawning them in that new game

997
00:43:34,681 --> 00:43:36,022
that you've connected to

998
00:43:36,022 --> 00:43:40,084
on the other side of the transition.

999
00:43:40,084 --> 00:43:42,625
Writing sensors is also a pretty expensive new cost

1000
00:43:42,625 --> 00:43:43,626
that we have for Destiny.

1001
00:43:44,501 --> 00:43:47,222
If you want to expose a new type of state to activity script,

1002
00:43:47,222 --> 00:43:47,722
you have to write a new sensor

1003
00:43:47,722 --> 00:43:52,044
and handle reconciliation and all of the networking details.

1004
00:43:52,044 --> 00:43:54,205
This is a lot heavier weight

1005
00:43:54,205 --> 00:43:56,826
than exposing a function to script in a single-player game.

1006
00:43:56,826 --> 00:43:59,768
This trade-off is made directly against

1007
00:43:59,768 --> 00:44:01,248
host migration bug costs, though.

1008
00:44:01,248 --> 00:44:03,909
Rather than paying a cost per script

1009
00:44:03,909 --> 00:44:06,351
to hunt down host migration and networking bugs,

1010
00:44:06,351 --> 00:44:08,612
we're paying an upfront cost per sensor.

1011
00:44:09,385 --> 00:44:11,567
It's still a very expensive upfront cost,

1012
00:44:11,567 --> 00:44:13,049
and it slows down early iteration

1013
00:44:13,049 --> 00:44:14,350
of new mechanics by design.

1014
00:44:14,350 --> 00:44:17,033
Designer complexity.

1015
00:44:17,033 --> 00:44:18,974
This goes back to the rate example.

1016
00:44:18,974 --> 00:44:21,897
Overall complexity for creating

1017
00:44:21,897 --> 00:44:23,659
and maintaining activity scripts

1018
00:44:23,659 --> 00:44:25,701
is definitely higher than it was on Halo.

1019
00:44:25,701 --> 00:44:28,663
Designers frequently create content

1020
00:44:28,663 --> 00:44:30,145
that runs exclusively on the client,

1021
00:44:30,145 --> 00:44:32,927
and then they write script that runs exclusively

1022
00:44:32,927 --> 00:44:33,988
on the activity host.

1023
00:44:34,358 --> 00:44:37,701
And while in many cases you can hand wave away

1024
00:44:37,701 --> 00:44:39,382
the distinction as an implementation detail,

1025
00:44:39,382 --> 00:44:41,544
in other cases you have to fully understand

1026
00:44:41,544 --> 00:44:43,746
the activity host, physics host distinction,

1027
00:44:43,746 --> 00:44:45,787
and understand where each piece of content lives.

1028
00:44:45,787 --> 00:44:49,871
The silver lining here is that while you're

1029
00:44:49,871 --> 00:44:52,473
in ActivityScript, what you see is what you get.

1030
00:44:52,473 --> 00:44:55,715
You only have access to the sensors that we've provided,

1031
00:44:55,715 --> 00:44:57,557
and they only have access to activity state,

1032
00:44:57,557 --> 00:45:00,919
so the delineation is usually intuitive,

1033
00:45:00,919 --> 00:45:02,701
even if you don't realize that it's all running

1034
00:45:02,701 --> 00:45:03,941
on a separate machine in the cloud.

1035
00:45:04,565 --> 00:45:07,447
That rate example was an exception because most of the time,

1036
00:45:07,447 --> 00:45:09,869
our designers write activity script and then they write

1037
00:45:09,869 --> 00:45:11,651
other stuff that happens on the client,

1038
00:45:11,651 --> 00:45:13,392
and they don't really have to pay attention

1039
00:45:13,392 --> 00:45:15,894
or even necessarily understand the distinction

1040
00:45:15,894 --> 00:45:17,095
and what runs up where.

1041
00:45:17,095 --> 00:45:22,900
So, because we want your players to be,

1042
00:45:22,900 --> 00:45:25,102
your friends to be able to join you at any time,

1043
00:45:25,102 --> 00:45:27,464
we reserve slots in any public bubble

1044
00:45:27,464 --> 00:45:28,605
for the rest of your fire team.

1045
00:45:29,224 --> 00:45:31,685
For fireteams that already have two or three players,

1046
00:45:31,685 --> 00:45:33,986
this is great, but a lot of players run around

1047
00:45:33,986 --> 00:45:34,806
in our game solo.

1048
00:45:34,806 --> 00:45:38,907
When three solo players all meet in a public bubble,

1049
00:45:38,907 --> 00:45:40,568
each one of them is reserving two extra slots

1050
00:45:40,568 --> 00:45:43,129
for their friends that might want to join.

1051
00:45:43,129 --> 00:45:45,690
That fills up the bubble, preventing it from matchmaking

1052
00:45:45,690 --> 00:45:47,650
with any more strangers, and you end up

1053
00:45:47,650 --> 00:45:48,731
with a low-population bubble.

1054
00:45:48,731 --> 00:45:51,112
We thought this was gonna be rare,

1055
00:45:51,112 --> 00:45:53,212
but this actually turns out to be the typical case.

1056
00:45:53,212 --> 00:45:56,713
Average public bubble populations are not far off from three

1057
00:45:56,713 --> 00:45:58,394
when we'd like it to be more like six.

1058
00:45:59,223 --> 00:46:01,203
And it's pretty tricky to solve this case

1059
00:46:01,203 --> 00:46:02,384
while still allowing your friends

1060
00:46:02,384 --> 00:46:04,344
to seamlessly join you at any time

1061
00:46:04,344 --> 00:46:05,605
and not crash the simulation.

1062
00:46:05,605 --> 00:46:09,806
So, to conclude, let's walk through a summary example

1063
00:46:09,806 --> 00:46:11,846
of the entire ecosystem.

1064
00:46:11,846 --> 00:46:13,647
Because it's kind of crazy.

1065
00:46:13,647 --> 00:46:18,308
You have multiple public bubbles,

1066
00:46:18,308 --> 00:46:21,529
each with their own bubble activity host.

1067
00:46:21,529 --> 00:46:24,450
In this case, the archer's line bubble

1068
00:46:24,450 --> 00:46:26,250
has one player in it, Deborah.

1069
00:46:27,565 --> 00:46:29,987
while Hellmouth has three players in it,

1070
00:46:29,987 --> 00:46:31,289
Alice, Bob, and Charlie.

1071
00:46:31,289 --> 00:46:34,591
You also have multiple fire teams,

1072
00:46:34,591 --> 00:46:37,414
each with their own mission activity host.

1073
00:46:37,414 --> 00:46:40,516
In this case, a strike that Alice and Bob

1074
00:46:40,516 --> 00:46:42,858
are playing together, and a patrol

1075
00:46:42,858 --> 00:46:45,280
that Charlie and Deborah are playing together.

1076
00:46:45,280 --> 00:46:48,443
You can also have multiple players on the same fire team

1077
00:46:48,443 --> 00:46:51,025
who aren't connected to the same bubbles,

1078
00:46:51,025 --> 00:46:52,407
like Charlie and Deborah.

1079
00:46:52,407 --> 00:46:53,828
Charlie's over in Hellmouth,

1080
00:46:53,828 --> 00:46:55,309
and Deborah is in Archer's Line.

1081
00:46:56,060 --> 00:46:58,742
In that case, they're sharing the same local activity state.

1082
00:46:58,742 --> 00:47:01,403
They get the same dialogue lines, same objectives,

1083
00:47:01,403 --> 00:47:04,065
activity UI, but they're in completely separate bubbles,

1084
00:47:04,065 --> 00:47:07,027
which means they have fully separated simulations

1085
00:47:07,027 --> 00:47:09,308
match made with completely separate groups of players.

1086
00:47:09,308 --> 00:47:13,251
You also have a world server up in the cloud.

1087
00:47:13,251 --> 00:47:15,633
That's the system that persists all of our character

1088
00:47:15,633 --> 00:47:17,614
and progression data for the RPG that I

1089
00:47:17,614 --> 00:47:19,615
avoided talking about today, since it's

1090
00:47:19,615 --> 00:47:22,297
a whole additional unit of complexity that's not directly

1091
00:47:22,297 --> 00:47:23,558
related to activity logic.

1092
00:47:25,247 --> 00:47:29,270
Each bubble, public and private, also has its own physics host,

1093
00:47:29,270 --> 00:47:32,932
which is one of the peer-to-peer consoles that's not in the cloud.

1094
00:47:32,932 --> 00:47:36,194
In this case, Alice is the physics host for the Hellmouth bubble,

1095
00:47:36,194 --> 00:47:38,676
and Deborah is the physics host for the Archer's Line bubble.

1096
00:47:38,676 --> 00:47:43,559
The physics host does all of the traditional Halo-era host responsibilities,

1097
00:47:43,559 --> 00:47:47,062
like firing bullets and tracking damage and moving crates around.

1098
00:47:47,792 --> 00:47:52,522
Crucially, we don't have to pay for any of that bandwidth or simulation in our data center,

1099
00:47:52,522 --> 00:47:55,968
and it's always low latency if there's other players you can match to.

1100
00:47:55,968 --> 00:48:00,197
And that, ladies and gentlemen, is destiny.

1101
00:48:12,632 --> 00:48:14,113
So we've still got a few minutes,

1102
00:48:14,113 --> 00:48:15,735
if anybody has any questions,

1103
00:48:15,735 --> 00:48:18,777
just step up to one of those mics and introduce yourself.

1104
00:48:18,777 --> 00:48:18,937
Hi.

1105
00:48:18,937 --> 00:48:20,158
How's it going?

1106
00:48:20,158 --> 00:48:22,340
Thank you for the talk.

1107
00:48:22,340 --> 00:48:26,243
So how did you build consistency into the activity hosts,

1108
00:48:26,243 --> 00:48:28,704
so as you have so many of them as they're coming up

1109
00:48:28,704 --> 00:48:31,086
and dying while still maintaining

1110
00:48:31,086 --> 00:48:32,667
an excellent client experience?

1111
00:48:32,667 --> 00:48:35,510
What do you mean by consistency?

1112
00:48:36,511 --> 00:48:40,213
If those instances that are running in the cloud are dying

1113
00:48:40,213 --> 00:48:44,656
for whatever reason because those boxes are having issues,

1114
00:48:44,656 --> 00:48:47,438
do you build any kind of consistency?

1115
00:48:47,438 --> 00:48:50,961
Because that is your authoritative state for the activities.

1116
00:48:50,961 --> 00:48:53,843
So how do you build consistency so that you can migrate

1117
00:48:53,843 --> 00:48:55,884
from one activity host to another activity host

1118
00:48:55,884 --> 00:48:57,345
if something happens to your activity host?

1119
00:48:57,345 --> 00:49:00,988
Oh, yeah, we didn't.

1120
00:49:00,988 --> 00:49:01,788
So basically,

1121
00:49:02,214 --> 00:49:05,056
In general, it's pretty rare for a player's activity host

1122
00:49:05,056 --> 00:49:06,398
to suffer a problem and crash.

1123
00:49:06,398 --> 00:49:09,120
And if that does happen, you get kicked to orbit,

1124
00:49:09,120 --> 00:49:11,902
and you get one of those wacky animal name error reports

1125
00:49:11,902 --> 00:49:13,663
that you can report.

1126
00:49:13,663 --> 00:49:14,924
But it's pretty rare.

1127
00:49:14,924 --> 00:49:19,388
Hi, I was wondering, are you able to flex your capacity

1128
00:49:19,388 --> 00:49:20,089
up and down?

1129
00:49:20,089 --> 00:49:23,451
Do you guys utilize that at all with the number of hosts?

1130
00:49:23,451 --> 00:49:25,193
Do you flex your capacity up and down?

1131
00:49:25,520 --> 00:49:27,821
Oh, you mean like scaling our data center?

1132
00:49:27,821 --> 00:49:29,142
Yeah, well, not just the data center,

1133
00:49:29,142 --> 00:49:31,544
but like during peak times, do you go up and down

1134
00:49:31,544 --> 00:49:34,586
in terms of the activity and public hosts that you have?

1135
00:49:34,586 --> 00:49:36,188
Yeah, no, absolutely.

1136
00:49:36,188 --> 00:49:39,270
We have one data center that runs all of our servers

1137
00:49:39,270 --> 00:49:43,233
for the activity hosts, and it manages to scale up and down

1138
00:49:43,233 --> 00:49:45,374
based on the amount of load that we have.

1139
00:49:45,769 --> 00:49:48,511
We've never really hit our population caps,

1140
00:49:48,511 --> 00:49:51,193
which has been nice, because it means we've been able

1141
00:49:51,193 --> 00:49:52,874
to have a stable launch.

1142
00:49:52,874 --> 00:49:54,855
We did have to buy all the machines up front.

1143
00:49:54,855 --> 00:49:57,017
It's not an arbitrarily scalable cloud service

1144
00:49:57,017 --> 00:49:59,979
that we're renting, but because of the ability

1145
00:49:59,979 --> 00:50:02,321
to build the tech specifically for that,

1146
00:50:02,321 --> 00:50:05,223
we got a pretty good cost savings involved.

1147
00:50:05,223 --> 00:50:06,024
Cool, thanks.

1148
00:50:07,649 --> 00:50:09,970
Hi, I'm one of the server engineers on World of Warcraft.

1149
00:50:09,970 --> 00:50:13,071
One of the things that I think is interesting about this

1150
00:50:13,071 --> 00:50:14,831
that I have a question for you on is

1151
00:50:14,831 --> 00:50:17,112
degrees of separation in the design

1152
00:50:17,112 --> 00:50:19,732
between mission critical state and other state.

1153
00:50:19,732 --> 00:50:21,333
Like you sort of hand wave around the like,

1154
00:50:21,333 --> 00:50:22,893
well, there's three guys alive,

1155
00:50:22,893 --> 00:50:24,734
and then the host, the physics host,

1156
00:50:24,734 --> 00:50:27,154
is actually simulating bullets and damage,

1157
00:50:27,154 --> 00:50:29,155
which means then you just move the exploit potential

1158
00:50:29,155 --> 00:50:30,675
to fake bullets and fake damage

1159
00:50:30,675 --> 00:50:32,636
because it's considered the authority.

1160
00:50:32,636 --> 00:50:33,156
How do you...

1161
00:50:33,476 --> 00:50:36,138
work with design to figure out where the right line

1162
00:50:36,138 --> 00:50:37,819
for acceptable exploiting is?

1163
00:50:37,819 --> 00:50:39,661
Because like the way that we solve it

1164
00:50:39,661 --> 00:50:41,802
is there's a simulation in the cloud, right?

1165
00:50:41,802 --> 00:50:43,323
And clearly you guys can't do that

1166
00:50:43,323 --> 00:50:45,565
because of peer latency and other things you talked about.

1167
00:50:45,565 --> 00:50:47,807
Yeah, this is a tricky question

1168
00:50:47,807 --> 00:50:49,067
that I'll have to skate around

1169
00:50:49,067 --> 00:50:50,729
because I don't want to reveal too much

1170
00:50:50,729 --> 00:50:53,851
about what we're doing with security in a recorded talk.

1171
00:50:53,851 --> 00:50:53,971
But.

1172
00:50:55,172 --> 00:50:56,473
We'll meet afterwards.

1173
00:50:56,473 --> 00:50:58,075
Yeah, I know.

1174
00:50:58,075 --> 00:51:01,398
But in general, I mean, we do allow a certain amount

1175
00:51:01,398 --> 00:51:03,900
of exploiting to happen on the individual consoles

1176
00:51:03,900 --> 00:51:05,601
because we don't host everything in the cloud.

1177
00:51:05,601 --> 00:51:10,025
And we rely on other metrics to monitor those players

1178
00:51:10,025 --> 00:51:12,528
and ban them, typically retroactively.

1179
00:51:12,528 --> 00:51:13,709
Thanks.

1180
00:51:13,709 --> 00:51:14,850
Thank you.

1181
00:51:16,815 --> 00:51:19,837
I just want to know, how does this system impact

1182
00:51:19,837 --> 00:51:22,159
the memory management for gameplay missions,

1183
00:51:22,159 --> 00:51:24,040
since you can have a bunch of missions

1184
00:51:24,040 --> 00:51:25,201
stacked on top of each other?

1185
00:51:25,201 --> 00:51:27,342
So how do you prevent your designers

1186
00:51:27,342 --> 00:51:29,424
from going over budget with too many stuff

1187
00:51:29,424 --> 00:51:31,805
happening at the same time?

1188
00:51:31,805 --> 00:51:35,808
Yeah, so that hasn't been a huge problem,

1189
00:51:35,808 --> 00:51:38,570
because in general, you're only ever in one bubble

1190
00:51:38,570 --> 00:51:39,390
at any given time.

1191
00:51:39,900 --> 00:51:43,041
and that bubble has a single script for it

1192
00:51:43,041 --> 00:51:45,142
that determines what loads.

1193
00:51:45,142 --> 00:51:48,062
So if, hypothetically, you have three different missions

1194
00:51:48,062 --> 00:51:49,763
that all intersect in the same bubble

1195
00:51:49,763 --> 00:51:52,703
and they all have the opportunity to do something,

1196
00:51:52,703 --> 00:51:55,264
that script already has to deal with

1197
00:51:55,264 --> 00:51:57,185
the built-in memory limits of, like,

1198
00:51:57,185 --> 00:51:58,705
for example, if you're allowed 25 AI in the bubble

1199
00:51:58,705 --> 00:52:02,246
and you have one boss encounter that spawns eight AI,

1200
00:52:02,246 --> 00:52:03,486
but then you have 22 ambient AI,

1201
00:52:03,486 --> 00:52:05,427
that script has to deal with the fact that,

1202
00:52:05,427 --> 00:52:08,087
oh, we need the eight AI for the boss.

1203
00:52:08,398 --> 00:52:10,139
find some other guys to despawn.

1204
00:52:10,139 --> 00:52:13,181
And we wrote some tools to help that happen

1205
00:52:13,181 --> 00:52:15,802
pretty automatically for the designers,

1206
00:52:15,802 --> 00:52:17,843
but they just have to deal with that

1207
00:52:17,843 --> 00:52:19,124
in the public bubble scripts.

1208
00:52:19,124 --> 00:52:19,464
Thank you.

1209
00:52:19,464 --> 00:52:24,207
So, being that Destiny is a game

1210
00:52:24,207 --> 00:52:29,530
that you want to keep supporting for 10 years,

1211
00:52:29,530 --> 00:52:30,631
basically what I'm asking is,

1212
00:52:30,631 --> 00:52:33,853
if you happen upon a paradigm for doing all of this

1213
00:52:33,853 --> 00:52:35,874
that's significantly different,

1214
00:52:36,505 --> 00:52:41,669
worry about? Was that a concern? We're going to make

1215
00:52:41,669 --> 00:52:46,733
sure this is agile and we can unhook this and hook this in

1216
00:52:46,733 --> 00:52:51,777
over here and change it all. You get what I'm saying.

1217
00:52:52,791 --> 00:52:56,954
Did you go to Chris Butcher's talk right before this about engine architecture?

1218
00:52:56,954 --> 00:52:58,335
No, I didn't get a chance.

1219
00:52:58,335 --> 00:53:00,717
Can you talk a little bit about the principle of that?

1220
00:53:00,717 --> 00:53:05,581
We tried to plan out what we thought were going to be the major architectural changes

1221
00:53:05,581 --> 00:53:08,543
and technological changes that we could see coming down the road,

1222
00:53:08,543 --> 00:53:10,865
but we already got a few of them wrong.

1223
00:53:10,865 --> 00:53:15,589
We assumed that machines were going to get arbitrarily more multithreaded

1224
00:53:15,589 --> 00:53:18,511
and have more and more cores, and that hasn't really been the case.

1225
00:53:19,289 --> 00:53:22,610
Also, at launch, it makes a lot of sense for us

1226
00:53:22,610 --> 00:53:25,791
to host our own servers and do all of this optimization work

1227
00:53:25,791 --> 00:53:28,352
and complexity in order to save some

1228
00:53:28,352 --> 00:53:30,053
of the costs of full dedicated servers,

1229
00:53:30,053 --> 00:53:32,734
as well as provide latency benefits.

1230
00:53:32,734 --> 00:53:35,435
But it's entirely possible that five years from now,

1231
00:53:35,435 --> 00:53:39,356
there's awesome, cheap, scalable cloud services that

1232
00:53:39,356 --> 00:53:41,837
are co-located in every city and can

1233
00:53:41,837 --> 00:53:42,997
provide the same guarantees.

1234
00:53:42,997 --> 00:53:45,638
And we could just switch to dedicated physics hosts.

1235
00:53:46,298 --> 00:53:54,703
If that happens, we're just going to have to pay an expensive cost to migrate over to that.

1236
00:53:54,703 --> 00:53:54,924
Cool.

1237
00:53:54,924 --> 00:53:55,764
Yeah.

1238
00:53:55,764 --> 00:53:56,364
Yep.

1239
00:53:56,364 --> 00:54:04,930
How big, in terms of, like, number of bytes, would you say the average mission host,

1240
00:54:04,930 --> 00:54:07,991
the gameplay data for that takes up?

1241
00:54:07,991 --> 00:54:08,412
Oh, gosh.

1242
00:54:08,412 --> 00:54:12,514
Do you mean, like, in networking bandwidth, or on the activity host?

1243
00:54:12,514 --> 00:54:15,536
I'm just talking about, like, storage.

1244
00:54:16,732 --> 00:54:20,694
these three bots are alive, that's one byte of data.

1245
00:54:20,694 --> 00:54:21,955
How much do you think that is?

1246
00:54:21,955 --> 00:54:26,838
Yeah, so I mean, our activity hosts themselves

1247
00:54:26,838 --> 00:54:30,820
typically use about 45 megabytes of data when they're running.

1248
00:54:30,820 --> 00:54:34,622
And then of that, gosh, I don't actually know.

1249
00:54:34,622 --> 00:54:36,283
Probably less than half of that is just

1250
00:54:36,283 --> 00:54:37,984
the sensor and the activity state.

1251
00:54:37,984 --> 00:54:40,826
But I'm kind of making up that number.

1252
00:54:40,826 --> 00:54:43,928
Sorry.

1253
00:54:44,187 --> 00:54:49,751
How many sensors would an activity host normally,

1254
00:54:49,751 --> 00:54:53,714
on average, survey?

1255
00:54:53,714 --> 00:54:55,575
So in a typical story mission,

1256
00:54:55,575 --> 00:54:57,957
I would guess that we have

1257
00:54:57,957 --> 00:55:00,739
less than 100 sensors.

1258
00:55:00,739 --> 00:55:04,361
Typically maybe something like 50.

1259
00:55:04,361 --> 00:55:06,363
A public bubble script might have like 20 to 40,

1260
00:55:06,363 --> 00:55:09,985
depending on how much interesting stuff happens there.

1261
00:55:10,768 --> 00:55:13,831
probably our peak is in the low hundreds.

1262
00:55:13,831 --> 00:55:15,672
I would be really surprised if we had something

1263
00:55:15,672 --> 00:55:16,713
that was like 500.

1264
00:55:16,713 --> 00:55:21,096
And all of those sensors are for every

1265
00:55:21,096 --> 00:55:24,498
script tracked object for the entire mission.

1266
00:55:24,498 --> 00:55:26,620
So that'll include sensors that like,

1267
00:55:26,620 --> 00:55:28,081
of those hundred sensors,

1268
00:55:28,081 --> 00:55:30,403
there would probably only be 15 to 20 of them at most,

1269
00:55:30,403 --> 00:55:34,386
instantiated at any one time in any one bubble.

1270
00:55:34,386 --> 00:55:37,528
And it's tracking all the sensors across many bubbles.

1271
00:55:37,528 --> 00:55:38,248
Thank you.

1272
00:55:40,616 --> 00:55:43,086
Alright, I guess that's all the questions.

1273
00:55:43,086 --> 00:55:43,969
So, thanks guys.

