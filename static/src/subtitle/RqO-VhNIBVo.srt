1
00:00:07,268 --> 00:00:12,915
So, hello and welcome. Today we're going to be talking about randomness in game programming.

2
00:00:12,915 --> 00:00:18,561
If game development is like baking pastries, then random numbers are the delicious cinnamon.

3
00:00:20,116 --> 00:00:23,099
I'm Dr. Kat, and I've been making games professionally

4
00:00:23,099 --> 00:00:24,059
for 34 years now.

5
00:00:24,059 --> 00:00:26,481
I'm also a game designer, so we'll

6
00:00:26,481 --> 00:00:30,045
be covering some design considerations as well as code

7
00:00:30,045 --> 00:00:31,246
samples today.

8
00:00:31,246 --> 00:00:34,869
It's good to be able to clearly understand and communicate

9
00:00:34,869 --> 00:00:37,411
what options you can provide to the designers on your team.

10
00:00:39,087 --> 00:00:43,188
And I know a lot of programmers are also involved in design,

11
00:00:43,188 --> 00:00:44,208
as I've always been.

12
00:00:44,208 --> 00:00:46,568
I kind of flip back and forth, but I

13
00:00:46,568 --> 00:00:48,969
found game programming pays better

14
00:00:48,969 --> 00:00:53,810
than being creative director a lot of places.

15
00:00:53,810 --> 00:00:55,130
Also, you're harder to fire.

16
00:00:55,130 --> 00:00:58,231
We have three parts to our talk today.

17
00:00:58,231 --> 00:01:02,252
First, I'm going to rush through some basic best practices,

18
00:01:02,252 --> 00:01:04,733
because I think a lot of you already know those.

19
00:01:05,602 --> 00:01:12,671
Then I'm going to cover how you can control result distributions with some example code from a live game I worked on.

20
00:01:13,610 --> 00:01:16,312
And finally, there's a set of tips and tricks,

21
00:01:16,312 --> 00:01:18,393
mostly focused around taking advantage

22
00:01:18,393 --> 00:01:20,775
of what recorded random number seeds can do for you.

23
00:01:20,775 --> 00:01:22,136
There's a few other ideas, too.

24
00:01:22,136 --> 00:01:25,539
I won't be explaining the code snippets very much

25
00:01:25,539 --> 00:01:26,820
because they're short and simple

26
00:01:26,820 --> 00:01:30,022
and we can cover more ground that way.

27
00:01:30,022 --> 00:01:31,884
So you can review the code

28
00:01:31,884 --> 00:01:33,465
and the funny animal photos later.

29
00:01:33,465 --> 00:01:37,107
These slides are all available at tinyurl.com

30
00:01:37,107 --> 00:01:39,369
slash pdc-random, like it says there.

31
00:01:39,369 --> 00:01:41,171
That'll be repeated again on the last slide.

32
00:01:42,249 --> 00:01:45,132
So, without further ado, let's get started.

33
00:01:45,132 --> 00:01:45,732
Best practices.

34
00:01:45,732 --> 00:01:47,254
The first thing I'm going to recommend

35
00:01:47,254 --> 00:01:53,320
is that you have your own pseudo random number generator code

36
00:01:53,320 --> 00:01:56,343
instead of using any random number function that's

37
00:01:56,343 --> 00:01:59,467
provided by your OS, a language, or platform API.

38
00:01:59,467 --> 00:02:01,769
There's multiple reasons for this.

39
00:02:02,685 --> 00:02:09,628
One is, you can't guarantee the quality of the randomness or the CPU efficiency if you don't know

40
00:02:09,628 --> 00:02:14,129
what's in the black box that you're calling that was provided to you. Some web browser

41
00:02:14,129 --> 00:02:20,491
JavaScript RNGs have very uneven distribution and you don't want to get stuck with junk like that.

42
00:02:20,491 --> 00:02:25,173
More importantly, if you use your own code, you can guarantee matching results on multiple

43
00:02:25,173 --> 00:02:27,233
platforms, giving the same starting seed.

44
00:02:28,072 --> 00:02:30,534
Even if you have to port your game to a different language,

45
00:02:30,534 --> 00:02:34,077
you can port the RNG math and still achieve this.

46
00:02:34,077 --> 00:02:37,000
That's very valuable, as it enables a lot of the tricks

47
00:02:37,000 --> 00:02:38,802
we'll be covering in part three of the talk.

48
00:02:38,802 --> 00:02:39,522
For the vast majority of games, I'm

49
00:02:39,522 --> 00:02:44,848
going to recommend XOR Shift 128+.

50
00:02:44,848 --> 00:02:49,932
I've been using something called Mersenne Twister

51
00:02:49,932 --> 00:02:52,775
for the last 20 years in a lot of my games.

52
00:02:53,895 --> 00:03:01,259
it's more than you need. This is fast, it's small, and it passes popular statistical tests like

53
00:03:01,259 --> 00:03:06,842
Big Crush. If you're trying to program professional quality encryption or maybe doing real money

54
00:03:06,842 --> 00:03:12,105
casino games, you might want to look at something fancier like Mersenne Twister. Otherwise, just

55
00:03:12,105 --> 00:03:15,527
use this little gem for everything and you should be fine. I do want to mention a couple of

56
00:03:15,527 --> 00:03:22,591
common mistakes to avoid. The big one is improper seeding.

57
00:03:24,677 --> 00:03:30,184
For most purposes, you want to seed your RNG once on game launch and never again.

58
00:03:30,184 --> 00:03:41,359
I've seen somebody seed the RNG before every request they made, at which point your quality is not equal to the quality of your RNG, it's equal to the quality of your seeding source. So don't be that guy.

59
00:03:42,991 --> 00:03:47,653
I recommend seeding from a high resolution system clock.

60
00:03:47,653 --> 00:03:49,214
Millisecond precision at least.

61
00:03:49,214 --> 00:03:51,975
If you can get it one that has microsecond or nanosecond

62
00:03:51,975 --> 00:03:52,976
precision, that's even better.

63
00:03:52,976 --> 00:03:56,017
Although milliseconds is really fine.

64
00:03:56,017 --> 00:03:58,259
If you only have a 64-bit timer, you'll

65
00:03:58,259 --> 00:04:00,720
notice this wants 128-bit seed value.

66
00:04:00,720 --> 00:04:06,182
You could put something in the high word like the date,

67
00:04:06,182 --> 00:04:08,944
or you can just put a second copy of the timer in there.

68
00:04:08,944 --> 00:04:09,364
That's fine.

69
00:04:10,470 --> 00:04:18,574
Some lower quality RNGs have a flaw where if you have a seed with a lot of zeros, like you stuffed a high word full of zeros,

70
00:04:18,574 --> 00:04:24,898
it can take a number of calls before they start producing results with variety to them.

71
00:04:24,898 --> 00:04:29,520
So it's a good habit to fill your whole seed up with some bits.

72
00:04:29,520 --> 00:04:39,386
Other common mistake that people make is very imperceptible in impact, but let's avoid it anyway.

73
00:04:40,641 --> 00:04:42,662
And again, if you ever go into real money gambling,

74
00:04:42,662 --> 00:04:45,542
you're going to have to do this right.

75
00:04:45,542 --> 00:04:47,243
I've done a little of that.

76
00:04:47,243 --> 00:04:48,883
In some high volume applications,

77
00:04:48,883 --> 00:04:50,804
this could actually matter in your game.

78
00:04:50,804 --> 00:04:53,104
If you have an RNG that's 16 bits or less,

79
00:04:53,104 --> 00:04:55,325
it can matter quite a lot more.

80
00:04:55,325 --> 00:04:59,026
So this is a common way you might take the output of an RNG

81
00:04:59,026 --> 00:05:01,047
and use it to roll an N-sided dice.

82
00:05:04,216 --> 00:05:06,739
It looks fine, the top one, doesn't it?

83
00:05:06,739 --> 00:05:09,964
But, you know, thousands of games do it that way,

84
00:05:09,964 --> 00:05:10,925
they get away with it.

85
00:05:12,065 --> 00:05:16,849
But imagine you're rolling 100-sided dice with a 16-bit RNG.

86
00:05:16,849 --> 00:05:21,253
So the numbers go up to 65535, and then you add your 1.

87
00:05:21,253 --> 00:05:24,717
So we're going to get 655 groups of 100 numbers,

88
00:05:24,717 --> 00:05:28,961
and one little group left over that goes from 1 to 36.

89
00:05:28,961 --> 00:05:35,607
So now our dice are slightly biased towards numbers from 1 to 36.

90
00:05:36,288 --> 00:05:39,270
So this second version here is just a nice clean way to fix

91
00:05:39,270 --> 00:05:43,512
that. It's almost always going to make only one call to your

92
00:05:43,512 --> 00:05:47,294
core RNG. Occasionally it'll make two and you'll probably

93
00:05:47,294 --> 00:05:51,597
never see three in your lifetime. So you're not paying a

94
00:05:51,597 --> 00:05:57,720
lot of CPU cycles to make this fix. And finally if you want to

95
00:05:57,720 --> 00:06:00,382
randomly reorder a list of things, like, I don't know,

96
00:06:00,382 --> 00:06:04,244
cards, here's the Fisher-Yates shuffle, also known as the

97
00:06:04,244 --> 00:06:05,124
Knuth shuffle.

98
00:06:06,114 --> 00:06:09,877
It does an optimal randomization in optimal O of N time.

99
00:06:09,877 --> 00:06:14,461
And if you think this code sample has a deck size of 60

100
00:06:14,461 --> 00:06:17,204
because I like to play Magic the Gathering,

101
00:06:17,204 --> 00:06:17,804
well, you got me.

102
00:06:17,804 --> 00:06:22,409
You can use this for any type of result pool, of course.

103
00:06:22,409 --> 00:06:24,250
It doesn't have to be cards.

104
00:06:26,142 --> 00:06:31,545
You can find some more variants and info on Fisher-Yates on the Wikipedia link there.

105
00:06:31,545 --> 00:06:38,190
And the second link gives implementations in 104 different programming languages, because that amuses me.

106
00:06:38,190 --> 00:06:44,314
Our next section is entitled Controlling Your Distribution.

107
00:06:44,314 --> 00:06:49,437
Sorry I don't have a slide with that title. I ran out of pixels at the last moment, but I do have this slide.

108
00:06:51,199 --> 00:06:56,741
So, I'd like to introduce this topic with the story that inspired me to do this talk.

109
00:06:56,741 --> 00:07:04,123
Back when I was working on Ultima 5 at Origin, back in the caveman days, Lord British mentioned

110
00:07:04,123 --> 00:07:06,744
to me how the invisibility ring had worked in Ultima 4.

111
00:07:06,744 --> 00:07:12,025
Each turn of use, there was a 1 in 256 chance it would get used up and vanish.

112
00:07:12,025 --> 00:07:17,207
This way, he could give it a limited duration without having to use up a byte or two of

113
00:07:17,207 --> 00:07:18,907
storage for a duration value.

114
00:07:19,682 --> 00:07:24,887
Back in the days of 64K games, we were pretty serious about saving bytes wherever we could.

115
00:07:24,887 --> 00:07:29,992
He decided to do invisibility rings the same way in Ultima V, which I was working on with

116
00:07:29,992 --> 00:07:30,593
him.

117
00:07:30,593 --> 00:07:33,135
So I thought about this a little bit.

118
00:07:33,135 --> 00:07:39,341
Was this a case of carefully crafting the range of variation of gameplay experiences?

119
00:07:40,088 --> 00:07:44,391
Or was it a matter of finding a solution that was fairly easy to implement and seemed to

120
00:07:44,391 --> 00:07:46,652
be in the ballpark of the desired experience?

121
00:07:46,652 --> 00:07:51,535
You could easily figure out, oh, 1 in 256, the ring will probably last 100, 200, 300

122
00:07:51,535 --> 00:07:52,275
turns, you know.

123
00:07:52,275 --> 00:07:54,536
Surely, surely it was the latter.

124
00:07:54,536 --> 00:07:57,538
Surely that's what he was thinking.

125
00:07:57,538 --> 00:07:58,378
I didn't ask.

126
00:07:58,378 --> 00:08:03,661
But given the minor importance of this one item in the game, this was a perfectly reasonable

127
00:08:03,661 --> 00:08:04,501
design approach.

128
00:08:05,883 --> 00:08:10,524
But being an inquisitive feline, I couldn't help but ask myself design questions about

129
00:08:10,524 --> 00:08:13,905
this, especially mathematical ones.

130
00:08:13,905 --> 00:08:20,367
How would you characterize the duration of invisibility rings in Ultima games?

131
00:08:20,367 --> 00:08:24,408
What other options could a game designer be given there if we wanted to put more work

132
00:08:24,408 --> 00:08:24,808
into it?

133
00:08:26,073 --> 00:08:31,276
Well, the simplest way to think about random results in a game

134
00:08:31,276 --> 00:08:32,277
is with averages.

135
00:08:32,277 --> 00:08:37,160
You could calculate the average number of turns

136
00:08:37,160 --> 00:08:38,621
this ring would last if you wanted to.

137
00:08:38,621 --> 00:08:41,463
I want to encourage all of you to believe, as I do,

138
00:08:41,463 --> 00:08:41,883
that averages suck.

139
00:08:41,883 --> 00:08:44,044
Abstractions that simplify reality

140
00:08:44,044 --> 00:08:47,727
can be useful to help us get an overview

141
00:08:47,727 --> 00:08:49,608
and understand a subject.

142
00:08:49,608 --> 00:08:51,069
But you can go too far with that.

143
00:08:51,976 --> 00:08:56,219
What if you tell your development team that the average payout of a mini-game is 7 coins?

144
00:08:56,219 --> 00:09:03,806
They're going to focus their imagination on what the player experience is like when they

145
00:09:03,806 --> 00:09:04,947
get 7 or something near 7.

146
00:09:04,947 --> 00:09:11,572
And you know, if you have a distribution that's somewhere close to a bell-shaped curve, that's

147
00:09:11,572 --> 00:09:13,013
not the worst way to think about it.

148
00:09:13,013 --> 00:09:15,996
But what if we have a flat distribution?

149
00:09:17,298 --> 00:09:20,359
Now the very low results and the very high results

150
00:09:20,359 --> 00:09:21,839
are common rather than rare.

151
00:09:21,839 --> 00:09:25,641
Some people would look at average plus standard deviation

152
00:09:25,641 --> 00:09:28,042
to get an idea of the game result.

153
00:09:28,042 --> 00:09:29,642
I'm sorry, but I think that still sucks.

154
00:09:29,642 --> 00:09:33,464
What if you have a distribution like this?

155
00:09:33,464 --> 00:09:34,224
Or like this?

156
00:09:34,224 --> 00:09:34,404
Or this?

157
00:09:34,404 --> 00:09:42,267
You could have a distribution where the average is 7,

158
00:09:42,267 --> 00:09:46,408
but the numbers 6, 7, and 8 never actually occur at all.

159
00:09:47,608 --> 00:09:51,010
So I recommend thinking instead about a distribution graph

160
00:09:51,010 --> 00:09:54,552
of your results of a random outcome in your game.

161
00:09:54,552 --> 00:09:58,194
Those can show you clearly what blend of experiences

162
00:09:58,194 --> 00:09:59,835
players are going to have when they

163
00:09:59,835 --> 00:10:03,697
run into a particular random element in your game.

164
00:10:03,697 --> 00:10:06,918
So I'd encourage you all to get comfortable

165
00:10:06,918 --> 00:10:09,000
with the charting options in your spreadsheet

166
00:10:09,000 --> 00:10:09,820
if you aren't already.

167
00:10:09,820 --> 00:10:10,080
So the, uh.

168
00:10:19,372 --> 00:10:24,177
The ultimate invisibility ring distribution of total turns of use before it expires is

169
00:10:24,177 --> 00:10:28,782
an exponential decay, just like our muon decay graph at the upper right.

170
00:10:28,782 --> 00:10:34,668
And I thought to myself, that's great if that's exactly how you want to sculpt your range

171
00:10:34,668 --> 00:10:39,253
of player experiences mathematically, but what if you wanted something else?

172
00:10:40,215 --> 00:10:44,476
Well, I knew what you would get from various combinations of dice rolls and other common

173
00:10:44,476 --> 00:10:47,197
mechanisms in real-world randomized games.

174
00:10:47,197 --> 00:10:49,418
We could simulate those.

175
00:10:49,418 --> 00:10:55,279
But since we're making software here, what about something more flexible?

176
00:10:55,279 --> 00:11:00,200
That's when it occurred to me, why not just draw the bar graph of the distribution pattern

177
00:11:00,200 --> 00:11:03,701
you want with a table of numbers and work backwards?

178
00:11:03,701 --> 00:11:08,623
Write a piece of code that looks at that table and generates random results in those exact

179
00:11:08,623 --> 00:11:09,303
proportions.

180
00:11:10,512 --> 00:11:13,996
Now you could have any style of probability distribution you want.

181
00:11:13,996 --> 00:11:16,958
Neat.

182
00:11:16,958 --> 00:11:20,762
So I promptly filed that idea away for the next 25 years

183
00:11:20,762 --> 00:11:22,504
and got back to finishing Ultima V.

184
00:11:22,504 --> 00:11:28,249
And then some squirrel invited me to give a talk in this math rack.

185
00:11:34,323 --> 00:11:39,285
I thought, well, I could give a nice talk on randomness and code up that idea I had

186
00:11:39,285 --> 00:11:40,665
in the 1980s.

187
00:11:40,665 --> 00:11:46,407
Then I realized the bonus games in 1UP Casino, which I've been working on the last two years,

188
00:11:46,407 --> 00:11:49,589
have exactly that code already written.

189
00:11:49,589 --> 00:11:51,569
I love saving time.

190
00:11:51,569 --> 00:11:52,330
So here it is.

191
00:11:55,439 --> 00:12:02,483
You'll note here I could just return the value of i rather than returning values of i if

192
00:12:02,483 --> 00:12:05,624
I wanted a continuous range of results like numbers from 1 to 6.

193
00:12:05,624 --> 00:12:12,548
Having a lookup table lets me have gaps in the range or, you know, whatever kind of result

194
00:12:12,548 --> 00:12:12,888
you want.

195
00:12:12,888 --> 00:12:17,090
I could also return a more complex object rather than an integer.

196
00:12:18,319 --> 00:12:23,522
To get a random floating point result, you might want to specify ranges of numbers in

197
00:12:23,522 --> 00:12:28,045
your table and then as a last step pick a random point within the interval you chose.

198
00:12:28,045 --> 00:12:30,507
Would be one way you could approach that.

199
00:12:30,507 --> 00:12:36,992
Or you could return a pointer to any kind of relevant game object that exists in your

200
00:12:36,992 --> 00:12:37,752
game.

201
00:12:37,752 --> 00:12:42,435
In our casino game, we use this logic to choose one of several sub-pools of bonus prizes,

202
00:12:42,435 --> 00:12:42,976
for instance.

203
00:12:44,658 --> 00:12:48,680
Now, this function is an example of what we call sampling with replacement.

204
00:12:48,680 --> 00:12:53,922
It's like picking multiple letters from a bag of 100 Scrabble tiles,

205
00:12:53,922 --> 00:12:58,605
putting your chosen letter back in after each pick, and then choosing again.

206
00:12:58,605 --> 00:13:02,807
That means the odds of each letter are exactly the same on every pick.

207
00:13:02,807 --> 00:13:06,789
The other obvious alternative is sampling without replacement,

208
00:13:06,789 --> 00:13:08,589
which is how actual Scrabble works.

209
00:13:09,151 --> 00:13:11,352
If you pick the Z tile on your first pick,

210
00:13:11,352 --> 00:13:13,833
the odds of a Z on the second pick are zero.

211
00:13:13,833 --> 00:13:15,814
You've taken it out of the bag already.

212
00:13:15,814 --> 00:13:19,336
That's how we actually pick our final set of prizes

213
00:13:19,336 --> 00:13:23,438
in 1UP Casino, after this picker has selected our sub-pool.

214
00:13:23,438 --> 00:13:25,459
When you play games with a deck of cards,

215
00:13:25,459 --> 00:13:28,281
that's generally sampling without replacement as well.

216
00:13:30,257 --> 00:13:37,359
Generally speaking, sampling without replacement gives you more consistent results as later

217
00:13:37,359 --> 00:13:43,721
picks will have a tendency to correct early variants back towards the mean. And unusual

218
00:13:43,721 --> 00:13:51,863
outliers like a scrabble hand of ZZZZZZZ are impossible. Choosing with replacement gives

219
00:13:51,863 --> 00:13:56,724
you both more short term variants and in the longer term it takes more trials before your

220
00:13:56,724 --> 00:13:59,845
player will have experienced all the possible items in the pool.

221
00:14:00,957 --> 00:14:05,039
It's common in choosing without replacement to keep going until the pool is exhausted

222
00:14:05,039 --> 00:14:09,821
and then generate a fresh copy of the pool, like reshuffling cards after the deck runs

223
00:14:09,821 --> 00:14:10,162
out.

224
00:14:10,162 --> 00:14:16,885
So, if you have 52 cards or 52 potions or 52 magic weapons, players will have seen them

225
00:14:16,885 --> 00:14:17,945
all after 52 picks.

226
00:14:19,580 --> 00:14:21,401
One-up bonus games fall somewhere in between.

227
00:14:21,401 --> 00:14:24,844
We give you three to five prizes out of a pool of 20,

228
00:14:24,844 --> 00:14:27,446
and then we generate a fresh prize pool for the next play.

229
00:14:27,446 --> 00:14:30,729
So you're not guaranteed to see the jackpot after just 20

230
00:14:30,729 --> 00:14:30,969
plays.

231
00:14:30,969 --> 00:14:33,912
This is done with a simple Fisher-Yates shuffle.

232
00:14:33,912 --> 00:14:36,754
For sampling without replacement,

233
00:14:36,754 --> 00:14:39,236
you can iterate through the whole pool,

234
00:14:39,236 --> 00:14:41,518
or just the first n choices, and then reshuffle.

235
00:14:45,500 --> 00:14:50,543
Another nice use for a randomly sampled pool is random messages, such as tips and tricks,

236
00:14:50,543 --> 00:14:53,124
flavorful background, or whatever you like.

237
00:14:53,124 --> 00:14:58,507
In Ultima Underworld 2, I had Blog the Troll play a game called White Rock Black Rock with

238
00:14:58,507 --> 00:14:59,948
the player.

239
00:14:59,948 --> 00:15:05,231
While entertaining to his minuscule brain, it's a little dull for a typical human.

240
00:15:05,231 --> 00:15:09,814
I added 10 random you win messages and 10 random you lose messages to make it a little

241
00:15:09,814 --> 00:15:10,574
more entertaining.

242
00:15:11,625 --> 00:15:16,068
If I use sampling without replacement, you'd exhaust all the game's varieties after 10

243
00:15:16,068 --> 00:15:17,409
wins.

244
00:15:17,409 --> 00:15:18,209
Or 10 losses.

245
00:15:18,209 --> 00:15:22,252
But trust me, it's very easy to win this game.

246
00:15:22,252 --> 00:15:31,918
If anyone likes, I'll play some White Rock, Black Rock with you in the lunch break.

247
00:15:31,918 --> 00:15:37,141
I have since, after 20 years of thought, simplified the game down to one rock, which I felt was

248
00:15:37,141 --> 00:15:39,023
a real design breakthrough for me.

249
00:15:41,322 --> 00:15:44,123
But you can ask me about that after the talk.

250
00:15:44,123 --> 00:15:47,624
So sampling with replacement gives a much larger number

251
00:15:47,624 --> 00:15:51,925
of plays before the player stops encountering new results.

252
00:15:51,925 --> 00:15:55,066
Note that this average number of trials

253
00:15:55,066 --> 00:15:58,908
is lowest if you give each choice equal probability.

254
00:15:58,908 --> 00:16:03,029
And it's higher if you bias it towards some choices

255
00:16:03,029 --> 00:16:04,629
and away from others.

256
00:16:04,629 --> 00:16:07,790
But they'll see less short-term variety if you use a bias pool.

257
00:16:08,626 --> 00:16:12,789
The main problem here is the very real chance of seeing the same message twice in a row,

258
00:16:12,789 --> 00:16:14,190
which often feels bad.

259
00:16:14,190 --> 00:16:20,615
The nice little variant I use for blog the troll is sample or the replacement, but re-pick

260
00:16:20,615 --> 00:16:24,097
if your choice matches the last choice you made.

261
00:16:24,097 --> 00:16:29,301
You can generalize that and say re-pick if you match any of the last n elements chosen.

262
00:16:29,301 --> 00:16:32,564
Some games will feel better with n equals 2 or 3 rather than n equals 1.

263
00:16:32,564 --> 00:16:38,068
Anyway, this is fairly easy to code, so I will leave that as an exercise for the viewer.

264
00:16:40,618 --> 00:16:43,999
Before we move on to our last part, I have a grab bag of

265
00:16:43,999 --> 00:16:46,920
terms you can Google if you don't already know them.

266
00:16:46,920 --> 00:16:51,622
I imagine you'll know a lot of these already, but if you spot

267
00:16:51,622 --> 00:16:53,502
some new ones, then enjoy.

268
00:16:53,502 --> 00:16:56,504
I wanted to list random walk as drunkard's walk, by the

269
00:16:56,504 --> 00:16:58,724
way, the name I learned it by.

270
00:16:58,724 --> 00:17:01,645
But apparently somebody wrote a novel with that title and

271
00:17:01,645 --> 00:17:03,026
ruined Google for everyone.

272
00:17:04,583 --> 00:17:07,927
Anyway, having a better grasp of the range of likely results

273
00:17:07,927 --> 00:17:10,829
of a random walk is helpful for doing good randomness design,

274
00:17:10,829 --> 00:17:12,031
so it's worth learning about.

275
00:17:12,031 --> 00:17:17,516
And if you're interested in combinations and permutations,

276
00:17:17,516 --> 00:17:20,899
Nathan will be discussing those in his talk.

277
00:17:20,899 --> 00:17:21,580
It's either 210 or 240.

278
00:17:21,580 --> 00:17:25,063
I'm not sure I have the right time written down here.

279
00:17:25,063 --> 00:17:27,745
Squirrel will check for me. 210.

280
00:17:27,745 --> 00:17:29,047
OK, I did write it down wrong.

281
00:17:30,608 --> 00:17:33,509
He tells me he's got a cool ranking algorithm to present as well.

282
00:17:33,509 --> 00:17:34,830
That's in the same room here.

283
00:17:34,830 --> 00:17:38,551
And speaking of statistical significance,

284
00:17:38,551 --> 00:17:42,853
I feel the amount of time and effort it's worth spending on randomness design

285
00:17:42,853 --> 00:17:44,694
for a given element of your game

286
00:17:44,694 --> 00:17:49,096
should be related to factors such as how often the event occurs,

287
00:17:49,096 --> 00:17:50,617
how high is the variance,

288
00:17:50,617 --> 00:17:53,618
and how big is the impact of the different results.

289
00:17:53,618 --> 00:17:55,879
Know how to choose your battles wisely.

290
00:17:55,879 --> 00:17:59,361
And now it's time for fun with seeds.

291
00:18:00,923 --> 00:18:04,926
Okay, I told you at the start, only seed your RNG once.

292
00:18:04,926 --> 00:18:09,229
Now I'm going to tell you when to break that rule.

293
00:18:09,229 --> 00:18:14,272
Because RNG seeds are secretly one of the most powerful forces

294
00:18:14,272 --> 00:18:16,174
in the universe, if you're a true Jedi seed master.

295
00:18:16,174 --> 00:18:21,497
Example one, how long do invisibility rings in Ultimate

296
00:18:21,497 --> 00:18:23,519
4 and 5 tend to last with optimal gameplay?

297
00:18:24,945 --> 00:18:27,247
Well, I don't have to give you a distribution graph

298
00:18:27,247 --> 00:18:30,089
to avoid the evils of averages on this one,

299
00:18:30,089 --> 00:18:34,092
because the answer is forever.

300
00:18:34,092 --> 00:18:35,573
What's that, you say?

301
00:18:35,573 --> 00:18:37,254
Before using the invisibility ring

302
00:18:37,254 --> 00:18:41,217
to get through a tough battle, a hardcore player saves the game.

303
00:18:41,217 --> 00:18:44,399
If the ring expires, reload the save.

304
00:18:44,399 --> 00:18:45,040
Play it again.

305
00:18:45,040 --> 00:18:46,721
Hope for better dice rolls.

306
00:18:46,721 --> 00:18:49,323
You never save the game when you have an expired invisibility

307
00:18:49,323 --> 00:18:51,624
ring, and you just never have to find another one.

308
00:18:51,624 --> 00:18:52,685
You never use that thing up.

309
00:18:53,552 --> 00:18:57,736
Solution? Save the RNG seed in your save game file.

310
00:18:57,736 --> 00:19:01,961
When people load a save game, take that saved value,

311
00:19:01,961 --> 00:19:03,362
reseed your random number generator.

312
00:19:03,362 --> 00:19:07,126
Now, if they saved a game where they were four steps away

313
00:19:07,126 --> 00:19:09,669
from their invisibility ring expiring,

314
00:19:09,669 --> 00:19:12,112
they're going to load a game where they're still

315
00:19:12,112 --> 00:19:13,773
four steps away from it expiring.

316
00:19:15,078 --> 00:19:18,602
Of course, if players can vary the flow of random numbers to

317
00:19:18,602 --> 00:19:21,445
different game systems by saying, oh, I'm going to make

318
00:19:21,445 --> 00:19:23,507
zero, one or two attacks before I take my next step of

319
00:19:23,507 --> 00:19:27,251
movement, then they can cheat around that. So you might want

320
00:19:27,251 --> 00:19:31,316
to have multiple RNGs in a game where that might be an issue.

321
00:19:31,316 --> 00:19:33,899
One for player attacks, one for monster attacks, one for

322
00:19:33,899 --> 00:19:36,121
invisibility ring expires and so forth.

323
00:19:36,502 --> 00:19:42,365
Of course, if you think this is a cool trick for your players to be able to do, you can

324
00:19:42,365 --> 00:19:46,788
deliberately build it into your system that, oh, I'm going to reseed my RNG every time

325
00:19:46,788 --> 00:19:49,890
they load a save game so they can have a chance at a different result.

326
00:19:49,890 --> 00:19:51,511
That's a valid design decision also.

327
00:19:51,511 --> 00:19:55,473
So that's a small trick.

328
00:19:55,473 --> 00:19:58,055
Procedurally generated content is a big one.

329
00:19:58,690 --> 00:20:03,232
The old dungeon crawler, Tellengard, figured out what each square of the dungeon had in

330
00:20:03,232 --> 00:20:09,354
the way of walls, doors, magic fountains, traps, and stairs by taking the X, Y, and

331
00:20:09,354 --> 00:20:14,957
Z, aka dungeon level, combining them into a seed, and then calling the RNG to generate

332
00:20:14,957 --> 00:20:15,977
what was in that square.

333
00:20:16,780 --> 00:20:18,821
This let the game put an enormous dungeon

334
00:20:18,821 --> 00:20:20,681
into even the 8K version.

335
00:20:20,681 --> 00:20:23,722
Yes, there were 8K games back in the early days, where

336
00:20:23,722 --> 00:20:26,603
the map remained constant.

337
00:20:26,603 --> 00:20:28,203
If you left an area and came back,

338
00:20:28,203 --> 00:20:30,083
you'd find the same thing there again.

339
00:20:30,083 --> 00:20:32,944
But there was no storage space required.

340
00:20:32,944 --> 00:20:35,885
And the designer only had to design and tweak

341
00:20:35,885 --> 00:20:37,785
their content generation algorithm,

342
00:20:37,785 --> 00:20:40,666
rather than laying out enormous amounts of map data by hand.

343
00:20:42,177 --> 00:20:46,700
A more current example of seeded procedurally generated content would be the upcoming No

344
00:20:46,700 --> 00:20:52,024
Man's Sky, where they have a whole enormous galaxy that multiple players can explore and

345
00:20:52,024 --> 00:20:56,007
find the same things at every planet consistently and repeatedly.

346
00:20:56,007 --> 00:21:01,210
Of course, you'll want a separate dedicated RNG for world generation, apart from the one

347
00:21:01,210 --> 00:21:04,352
you lose for combat results and loot and such.

348
00:21:07,280 --> 00:21:15,003
On a simpler level, I used an XY-seeded algorithm for Fricadia, my online game, plug plug, Guinness

349
00:21:15,003 --> 00:21:15,823
world record holder.

350
00:21:15,823 --> 00:21:21,246
So it's to keep large patches of grass and trees from looking too monotonous.

351
00:21:21,926 --> 00:21:26,189
We're a user-created content game, one of the first, and I didn't want to require all

352
00:21:26,189 --> 00:21:31,812
players to hand scatter all the extra grass and tree shapes to make their maps look good.

353
00:21:31,812 --> 00:21:37,456
Or count on them to do so, so that other players wouldn't see boring maps that our users made.

354
00:21:37,456 --> 00:21:40,538
So I made our map plotter call this random sort function.

355
00:21:40,538 --> 00:21:45,041
I wasn't as good at function naming back in the 1990s, I will freely admit.

356
00:21:46,176 --> 00:21:51,999
You'll also note I coded this to require power of two values for the range parameter.

357
00:21:51,999 --> 00:21:57,122
You can use modulus rather than a bitwise and to fix this in my code here.

358
00:21:57,122 --> 00:22:00,963
For historical reasons, I left that intact for you all.

359
00:22:00,963 --> 00:22:08,187
In my defense, in 1980s 8-bit CPUs, bit masking was a much cheaper CPU operation than division,

360
00:22:08,187 --> 00:22:09,468
and old habits die hard.

361
00:22:10,443 --> 00:22:17,366
So here is before and after photos to show you how many pounds of boredom were shed by

362
00:22:17,366 --> 00:22:18,066
this simple piece of code.

363
00:22:18,066 --> 00:22:24,669
Another thing I do in Fricadia is to keep the level map synced up, even when modified

364
00:22:24,669 --> 00:22:29,431
by player written scripts in real time, by just sending instructions to every client

365
00:22:29,431 --> 00:22:32,152
indicating scripting line 87 just triggered.

366
00:22:32,152 --> 00:22:32,852
Do that stuff.

367
00:22:33,798 --> 00:22:37,060
If that section of scripting contains random effects,

368
00:22:37,060 --> 00:22:40,382
I send the current seed to every client in that same packet.

369
00:22:40,382 --> 00:22:43,404
That way I know they'll all get the same random results

370
00:22:43,404 --> 00:22:45,785
as the server and all the other clients.

371
00:22:45,785 --> 00:22:48,447
Everyone stays in sync, and a large amount

372
00:22:48,447 --> 00:22:50,068
of interesting changes to the map

373
00:22:50,068 --> 00:22:52,869
can happen in an identical way for every player

374
00:22:52,869 --> 00:22:54,570
with a very small amount of bandwidth used.

375
00:22:57,879 --> 00:23:04,020
Another great use of random number seeds

