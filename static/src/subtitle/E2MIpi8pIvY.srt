1
00:00:02,799 --> 00:00:10,504
Hello, everybody. Welcome to the talk, id software's early days,

2
00:00:11,224 --> 00:00:16,848
as told by me. So welcome, everybody. I'm John Romero. I'm

3
00:00:16,868 --> 00:00:19,810
cofounder of id software. And I'm going to take you on a

4
00:00:19,850 --> 00:00:23,953
journey back to the beginning of id software. Are you ready to

5
00:00:23,993 --> 00:00:27,975
be entertained? Everybody needs some entertainment today, all

6
00:00:27,995 --> 00:00:28,175
right?

7
00:00:29,539 --> 00:00:34,244
Okay. So I realize that some of what I'm about to say may sound

8
00:00:34,324 --> 00:00:38,969
insane, but we were in our 20s, and when we started it, we

9
00:00:39,009 --> 00:00:43,074
didn't know that there were any limits. So I grew up in a

10
00:00:43,554 --> 00:00:49,220
wonderful small town in northern California named Rockland. The

11
00:00:49,240 --> 00:00:50,081
population was only 6,000.

12
00:00:52,880 --> 00:00:56,083
In the 70s I was massively addicted to spending loads of

13
00:00:56,143 --> 00:01:01,287
time in cold, dark arcades playing all the games there and

14
00:01:01,327 --> 00:01:06,672
I just got really good at playing them. In 1979 before

15
00:01:06,813 --> 00:01:11,657
anyone really had a computer at their house, including me, I

16
00:01:11,737 --> 00:01:16,221
went to the local college when I was 11. And I started learning

17
00:01:16,281 --> 00:01:17,803
basic from the college students.

18
00:01:18,901 --> 00:01:21,543
I just went up to them and I just asked them what the words

19
00:01:22,063 --> 00:01:25,045
in their listings were and I wrote them all down on paper and

20
00:01:25,105 --> 00:01:29,168
I started experimenting with them on the HP 9000 mainframe

21
00:01:29,188 --> 00:01:32,010
there. I was mostly interested in just making and playing

22
00:01:32,030 --> 00:01:38,635
games. To keep me at home, my parents got an Apple 2 plus. I

23
00:01:38,675 --> 00:01:42,317
was done going outside after that. I spent all my time

24
00:01:42,377 --> 00:01:46,900
programming games on that computer. A few years and

25
00:01:47,843 --> 00:01:52,266
20 Apple II games later and I finally learned 6502 assembly

26
00:01:52,306 --> 00:01:55,989
language from this book. It was the language that all fast

27
00:01:56,049 --> 00:02:00,933
arcade games were written in back in the 80s. Then I could

28
00:02:01,273 --> 00:02:06,857
really make 80s games like this. Except that they kind of looked

29
00:02:06,877 --> 00:02:11,300
like this on a computer. So not quite arcade games, but home

30
00:02:11,320 --> 00:02:13,381
computer games which were on the Apple II.

31
00:02:14,510 --> 00:02:18,251
let's just say the Apple 2 was my personal home arcade as well

32
00:02:18,331 --> 00:02:23,893
as one million other Apple owners back then. When I was a

33
00:02:23,953 --> 00:02:27,034
sophomore in high school, I did some programming for the Air

34
00:02:27,074 --> 00:02:30,935
Force when I was 15 years old. I can't tell you what I was

35
00:02:30,975 --> 00:02:36,277
programming, though. It's classified. After high school, I

36
00:02:36,297 --> 00:02:41,458
kept making games. And by 1987, I was finally working at one of

37
00:02:41,478 --> 00:02:43,619
my favorite companies in the industry, which was Origin

38
00:02:43,659 --> 00:02:44,039
Systems.

39
00:02:45,517 --> 00:02:50,101
My first job was porting 2400 AD from the Apple II to the

40
00:02:50,141 --> 00:02:59,609
Commodore 64. By this time in 1987, 1988, I had made 74 games

41
00:03:00,650 --> 00:03:03,712
and three previous start-up companies. Capital ideas

42
00:03:03,732 --> 00:03:07,875
software on top, inside out software where I ported might

43
00:03:07,895 --> 00:03:12,039
and magic II from the Apple II to the Commodore 64 and ideas

44
00:03:12,079 --> 00:03:13,600
from the deep. And I was 21 years old.

45
00:03:16,257 --> 00:03:19,578
So then I went to work at a company named Softdisk at the

46
00:03:19,618 --> 00:03:25,499
start of 1989. I learned how to program a DOS PC there and I

47
00:03:25,579 --> 00:03:32,521
made a small game or a utility per month for a whole year. Then

48
00:03:32,561 --> 00:03:37,182
I created a game product called Gamer's Edge at Softdisk and I

49
00:03:37,242 --> 00:03:42,363
had to hire a very small team of developers to make games. So I

50
00:03:42,403 --> 00:03:45,744
hired John Carmack and Adrian Carmack. And I had to make a

51
00:03:46,838 --> 00:03:51,740
not related, into the department for programming and art. And

52
00:03:51,760 --> 00:03:55,402
then Tom Hall came in at night to help us out since he was

53
00:03:55,462 --> 00:03:59,804
already at Softdisk and he loved making games. So this was the

54
00:04:00,204 --> 00:04:07,467
first time in ten years that any of us had worked with one other

55
00:04:07,547 --> 00:04:12,349
person or more on any game. After making them alone, right,

56
00:04:12,389 --> 00:04:15,231
for a decade each, and it was incredible getting together

57
00:04:15,291 --> 00:04:16,051
finally on a team.

58
00:04:17,621 --> 00:04:22,282
So while creating our first game together, Slordax, John Carmack

59
00:04:22,322 --> 00:04:26,443
discovered the smooth scrolling trick on the PC. So Tom and

60
00:04:26,483 --> 00:04:30,624
John stayed up until 5 a.m. and they made a little demo called

61
00:04:31,264 --> 00:04:34,405
dangerous Dave and copyright infringement. And so they put a

62
00:04:34,445 --> 00:04:39,667
disk on my desk. The next day I came in, I saw the disk, I ran

63
00:04:39,707 --> 00:04:43,608
the demo and I watched the screen scroll smoothly pixel by

64
00:04:43,668 --> 00:04:47,128
pixel. And it was a massive eureka moment for me.

65
00:04:48,234 --> 00:04:51,778
It was like a bolt of lightning hit me. I'll elaborate on why

66
00:04:51,858 --> 00:04:56,202
that was in a moment. But id Software was born that instant

67
00:04:56,282 --> 00:05:02,128
on September 20th of 1990. So one thing led to another. And we

68
00:05:02,188 --> 00:05:05,672
spent a whole week putting together a demo of Super Mario

69
00:05:05,972 --> 00:05:07,914
3 for Nintendo. We did this after work.

70
00:05:09,943 --> 00:05:13,084
and Nintendo liked it, but they decided not to publish it

71
00:05:13,144 --> 00:05:16,625
because they decided to only publish their games on their own

72
00:05:16,885 --> 00:05:22,248
NES platform back then, which was a smart move. So no problem.

73
00:05:22,368 --> 00:05:24,508
We just used the tech for a different game, which was the

74
00:05:24,528 --> 00:05:30,171
Commander Keen trilogy. So why would a side scroller be a huge

75
00:05:30,211 --> 00:05:36,093
hit on PCs in 1990? Well, it was because no games on the PC had

76
00:05:36,193 --> 00:05:37,713
scrolled smoothly per pixel.

77
00:05:39,101 --> 00:05:43,864
The PC had been out since August of 1981 and in nine years no one

78
00:05:43,904 --> 00:05:47,407
had figured out how to make smooth scrolling pixel by pixel

79
00:05:47,427 --> 00:05:50,429
like a Nintendo until the dangerous Dave and copyright

80
00:05:50,449 --> 00:05:54,833
infringement demo which led to Commander Keen. Does anyone

81
00:05:54,873 --> 00:05:58,295
remember the original Duke Nukem game? All right.

82
00:05:59,688 --> 00:06:02,571
It scrolled by in chunks of 8 pixels like other games of that

83
00:06:02,671 --> 00:06:04,933
era and the reason why it scrolled with any speed is

84
00:06:04,973 --> 00:06:09,116
because I taught Todd how to do it while he was coding Dark Ages

85
00:06:09,597 --> 00:06:11,999
and he made the game that he made right before Duke Nukem.

86
00:06:13,560 --> 00:06:16,383
So the Commander King trilogy provided the start of the

87
00:06:16,423 --> 00:06:21,227
company, its software, and we made these three games in three

88
00:06:21,267 --> 00:06:24,150
months, from September 20th to December 14th in 1990.

89
00:06:27,292 --> 00:06:30,655
So Commander Keen was a massive hit for us. And it was so

90
00:06:30,715 --> 00:06:34,358
popular that people cosplayed as Keen for years at events, even

91
00:06:34,398 --> 00:06:39,963
today. And Commander Keen pioneered the creation of game

92
00:06:40,043 --> 00:06:43,746
engines. So we designed the game as an engine that operated on

93
00:06:43,827 --> 00:06:46,949
different data for different games. It was the only way to

94
00:06:46,989 --> 00:06:51,013
get the trilogy done so quickly. In fact, in 1991, when we were

95
00:06:51,133 --> 00:06:53,675
working on Keen 4, we were working on a game called

96
00:06:54,933 --> 00:06:57,595
We started licensing the engine for the first time, so it was

97
00:06:57,615 --> 00:07:00,577
the beginning of the modern engine licensing business.

98
00:07:03,519 --> 00:07:06,201
Development on our games went very smoothly and quickly

99
00:07:06,241 --> 00:07:09,543
because we stuck to some core principles that are important

100
00:07:09,663 --> 00:07:12,965
even today. So through this talk I'm going to highlight some of

101
00:07:13,005 --> 00:07:16,287
our core principles. I'd like to highlight something else right

102
00:07:16,327 --> 00:07:19,550
now, namely this photo. Has anyone seen this photo before?

103
00:07:21,781 --> 00:07:28,204
so not in Europe. It's a picture of John and I at the lake house

104
00:07:28,604 --> 00:07:32,666
in Shreveport, Louisiana where we started in software. So the

105
00:07:32,686 --> 00:07:35,047
funny thing is that people have asked me for years what was in

106
00:07:35,087 --> 00:07:39,349
this picture. So I analyzed it recently and here's what you

107
00:07:39,389 --> 00:07:39,549
see.

108
00:07:40,992 --> 00:07:45,477
So this is John, me and John, in early September of 1990. We

109
00:07:45,497 --> 00:07:49,200
were working on the Super Mario 3 demo that we planned on

110
00:07:49,240 --> 00:07:53,304
sending to Nintendo. So we both worked on this huge Dungeons &

111
00:07:53,344 --> 00:07:57,168
Dragons table that John had. We used to play D&D on the

112
00:07:57,208 --> 00:07:59,910
weekends and those sessions led to ideas for future games like

113
00:07:59,950 --> 00:08:05,155
Doom and Quake. So this is John and me. Tom Hall took the photo.

114
00:08:07,759 --> 00:08:10,300
We were working on the Super Mario 3 demo that we planned on

115
00:08:10,320 --> 00:08:12,600
sending to Nintendo and the computers were brought home from

116
00:08:12,660 --> 00:08:16,401
work on the weekends so this pic was taken on a Saturday or a

117
00:08:16,481 --> 00:08:20,541
Sunday. On top of the monitor is one of those old Intel

118
00:08:20,581 --> 00:08:24,822
reflective astronaut plushies from a long time ago and on my

119
00:08:24,862 --> 00:08:29,783
left is my notepad which is a task list of bugs to fix. And

120
00:08:29,803 --> 00:08:31,943
this is our high level task list of what had to get done to

121
00:08:31,963 --> 00:08:34,704
finish the demo. There wasn't really anything online back

122
00:08:34,744 --> 00:08:37,204
then. There was no online really.

123
00:08:39,235 --> 00:08:41,978
This is Tom Hall's area where he was doing all the graphics for

124
00:08:41,998 --> 00:08:46,603
the demo. He recorded gameplay on a VCR, then he played it back

125
00:08:46,703 --> 00:08:50,267
and he paused the action so he could duplicate the tiles

126
00:08:50,407 --> 00:08:54,491
exactly in Deluxe Paint 2, if anyone remembers that. The TV

127
00:08:54,551 --> 00:08:58,596
set had a 13-channel selector on it, and it was connected by an

128
00:08:58,776 --> 00:09:01,519
RF modulator. So it was very old school.

129
00:09:02,977 --> 00:09:06,578
So it software was formally founded on February 1st of 1991

130
00:09:07,398 --> 00:09:12,120
and we made 12 games that year. Shadow night, dangerous day in

131
00:09:12,140 --> 00:09:15,540
the haunted mansion, rescue rover, hover tank, tons of games.

132
00:09:16,501 --> 00:09:20,302
We actually took two months per game but we made two games

133
00:09:20,382 --> 00:09:25,303
simultaneously. So this was due to basically having ten years of

134
00:09:25,363 --> 00:09:28,284
intense game development experience prior. But it's also

135
00:09:28,324 --> 00:09:30,004
due to the first principle that we had.

136
00:09:30,686 --> 00:09:35,250
which was no prototypes. Just make the game, polish as you go

137
00:09:35,310 --> 00:09:38,353
and don't depend on polish happening later. So always

138
00:09:38,413 --> 00:09:42,476
maintain constantly shippable code. This is how we made so

139
00:09:42,516 --> 00:09:45,839
many games so quickly. We had the whole game designed in our

140
00:09:45,859 --> 00:09:49,982
heads. We just needed to quantify what needed to be done

141
00:09:50,383 --> 00:09:52,745
and then went about working on it until the game was finished.

142
00:09:52,765 --> 00:09:56,228
There were no prototypes for our games. So we just made them.

143
00:09:57,234 --> 00:09:59,715
And remember, we did have a small team of four people that

144
00:09:59,755 --> 00:10:01,797
could do this, and large teams definitely require more

145
00:10:01,857 --> 00:10:07,461
planning. So time for a quick story. One day, it rained really

146
00:10:07,521 --> 00:10:11,804
hard, and Cross Lake in Louisiana rose, and it was

147
00:10:11,944 --> 00:10:15,126
flooding everywhere, and I needed to get to work. We were

148
00:10:15,226 --> 00:10:18,168
furiously working away on our games, and I had to get back

149
00:10:18,228 --> 00:10:22,191
into it. And I just took a shower and everything and went

150
00:10:22,211 --> 00:10:25,553
down the road in the car, and then I saw this. The whole road

151
00:10:25,593 --> 00:10:26,193
was flooded.

152
00:10:27,884 --> 00:10:31,526
basically I waded through the huge flood with water snakes in

153
00:10:31,546 --> 00:10:35,008
Louisiana all the way to the house and I took another shower

154
00:10:35,088 --> 00:10:38,029
and I could start coding. And this was because we were all so

155
00:10:38,069 --> 00:10:43,613
excited to be making our own games 24-7 basically. Also note

156
00:10:43,633 --> 00:10:48,816
that during this time, during this year that we made 12 games

157
00:10:48,856 --> 00:10:53,058
we also moved id software from Louisiana to Wisconsin, to

158
00:10:53,098 --> 00:10:55,920
Madison, Wisconsin. And that takes a lot of time out of

159
00:10:55,980 --> 00:10:56,620
making games.

160
00:10:57,761 --> 00:11:00,163
but we couldn't afford to have anything go wrong while making

161
00:11:00,203 --> 00:11:02,845
our games at such a pace, so we created another principle that

162
00:11:02,885 --> 00:11:07,388
kept us developing quickly. It's incredibly important that your

163
00:11:07,408 --> 00:11:10,930
game can always be run by your team. So bulletproof your engine

164
00:11:11,410 --> 00:11:14,973
by providing defaults on load failure. So if you have 100

165
00:11:15,693 --> 00:11:18,756
people on your team trying to develop a game that will not

166
00:11:18,876 --> 00:11:21,978
run, you're paying for 100 people to sit around and wait

167
00:11:22,018 --> 00:11:22,758
for it to get fixed.

168
00:11:23,968 --> 00:11:25,989
So we recognize the importance of keeping the game always

169
00:11:26,029 --> 00:11:28,690
playable and we decided to bull proof our engine by making all

170
00:11:28,770 --> 00:11:32,212
input into the game solid. So game engines typically fail

171
00:11:32,232 --> 00:11:35,073
because they're trying to load bad, corrupted or non-existent

172
00:11:35,093 --> 00:11:38,835
data. So checking for this and providing a default for a

173
00:11:38,895 --> 00:11:42,237
failure case will keep the game running and it will quickly show

174
00:11:42,297 --> 00:11:45,438
you what's missing. So if you fail to load a sprite into the

175
00:11:45,498 --> 00:11:46,779
engine, just show bagel.

176
00:11:47,997 --> 00:11:51,318
theme song is not working or loading up, play something

177
00:11:51,498 --> 00:11:54,219
obviously wrong for the game. Like, I don't know, heavy metal

178
00:11:54,259 --> 00:11:57,780
or something. Missing a sound effect, same thing. Just play

179
00:11:57,820 --> 00:12:03,241
something very obnoxious. So after 1991, id software's first

180
00:12:03,281 --> 00:12:07,602
stage of company development was complete. And another important

181
00:12:07,662 --> 00:12:12,223
principle was in effect. Keep your code absolutely simple.

182
00:12:13,179 --> 00:12:16,141
keep looking at your functions and figure out how you can

183
00:12:16,181 --> 00:12:20,745
simplify even further. So we wrote all of the games that we

184
00:12:20,785 --> 00:12:27,891
made up to and including Quake in plain C, no C++. Not saying

185
00:12:27,911 --> 00:12:32,896
that you shouldn't be using C++. So, okay, stage 2 is about to

186
00:12:32,916 --> 00:12:37,440
begin. In August of 1991, we decided to move to Madison,

187
00:12:37,460 --> 00:12:41,143
Wisconsin. Tom Hall and I visited at that time.

188
00:12:41,754 --> 00:12:45,817
in August and we found it to be really nice because Tom Hall

189
00:12:45,897 --> 00:12:49,579
used to live there while he was in college. So we moved all four

190
00:12:49,619 --> 00:12:53,441
of us there and we continued working on our games. Only four

191
00:12:53,461 --> 00:12:55,623
months later we were found dead in the snow, victims of

192
00:12:55,683 --> 00:12:59,565
Wisconsin's brutal winters that we did not research. So the

193
00:12:59,585 --> 00:13:02,687
moral of the story is do your research. We knew how to program

194
00:13:02,707 --> 00:13:05,849
in assembly language but not how to ask Tom Hall, hey, what are

195
00:13:05,869 --> 00:13:06,610
winters like up here?

196
00:13:07,837 --> 00:13:15,020
So after six months of cold hell, we moved to Texas. So

197
00:13:15,760 --> 00:13:20,582
new principle, great tools help make great games. Spend as much

198
00:13:20,642 --> 00:13:23,924
time on tools as possible. I wrote a tile editor in 1991

199
00:13:24,004 --> 00:13:24,264
named Ted.

200
00:13:27,125 --> 00:13:33,909
for tile editor. It was used for 33 shipped retail games, several

201
00:13:33,949 --> 00:13:36,930
of which were 3D games even like hover tank, catacombs 3D,

202
00:13:36,950 --> 00:13:41,513
wolf of Zion 3D, spear of destiny, corridor 7, et cetera.

203
00:13:43,734 --> 00:13:48,957
So it was January 1992, we decided to go all 3D based on

204
00:13:49,037 --> 00:13:53,620
catacombs 3D's promise that we had just made it a couple months

205
00:13:53,660 --> 00:13:53,780
ago.

206
00:13:55,103 --> 00:13:58,945
So it looked cool, it just didn't play very cool. So in

207
00:13:58,985 --> 00:14:03,027
Wolfenstein 3D, it took us four months of development time to

208
00:14:03,067 --> 00:14:06,889
make Wolfenstein and launch the shareware version with one

209
00:14:06,929 --> 00:14:11,631
episode of levels. It took two more months to finish all six

210
00:14:11,711 --> 00:14:14,912
episodes of the game plus the hint book. And in the first

211
00:14:14,992 --> 00:14:19,354
month, the game sold 4,000 copies, all priced at $60 each.

212
00:14:20,254 --> 00:14:21,995
So that was really pretty cool for us.

213
00:14:23,444 --> 00:14:26,786
Spirit of Destiny took two months. It's a prequel to

214
00:14:26,866 --> 00:14:31,309
Wolfenstein 3D and it was retail only. So we got two games done

215
00:14:31,349 --> 00:14:37,834
that year. Soon after, Tom Hall traveled to Kentucky to work for

216
00:14:37,854 --> 00:14:44,238
a couple months on Wolfenstein VR. Yes, this was 1992 VR. Back

217
00:14:44,278 --> 00:14:47,901
in the days of Commander Keen, I discovered a small three-person

218
00:14:48,101 --> 00:14:51,423
game company called Raven Software in Madison, Wisconsin.

219
00:14:51,924 --> 00:14:52,444
I called them up.

220
00:14:53,097 --> 00:14:56,777
We went over, we introduced ourselves, and flash forward

221
00:14:56,837 --> 00:14:59,498
seven months later and we did a little work with them by

222
00:14:59,558 --> 00:15:03,259
modifying the Wolfenstein 3D engine and licensing it to them

223
00:15:03,299 --> 00:15:06,440
for a game called Shadow Caster, if anybody remembers this game.

224
00:15:06,480 --> 00:15:10,881
It was released in 93. Shadow Caster's tech improvements were

225
00:15:10,981 --> 00:15:15,042
sloping floors, lighting and fog. This engine looked slightly

226
00:15:15,082 --> 00:15:18,443
better than Wolfenstein 3D but it just wasn't good enough for

227
00:15:18,643 --> 00:15:19,363
our next game.

228
00:15:20,859 --> 00:15:25,560
So John Carmack, he spent some months thinking about how more

229
00:15:25,600 --> 00:15:28,581
advanced the new engine should be for the game that we decided

230
00:15:28,621 --> 00:15:32,862
to call Doom. Based on the rapid development of our previous

231
00:15:32,902 --> 00:15:37,443
games, we came up with another important principle. We are our

232
00:15:37,663 --> 00:15:41,684
own best testing team, and we should never allow anyone else

233
00:15:41,704 --> 00:15:44,965
to experience bugs or see the game crash. Don't waste other

234
00:15:44,985 --> 00:15:45,585
people's time.

235
00:15:46,593 --> 00:15:50,016
test thoroughly before checking in your code. No throwing it

236
00:15:50,076 --> 00:15:54,378
over the fence for testers to find and put a bug in the

237
00:15:54,418 --> 00:15:59,441
database and fix it later. It's a wasteful cycle. So after 1992

238
00:15:59,541 --> 00:16:02,383
id software's second stage of company development was

239
00:16:02,403 --> 00:16:07,166
complete along with another principle. As soon as you see a

240
00:16:07,206 --> 00:16:08,787
bug, you fix it.

241
00:16:09,976 --> 00:16:13,417
do not continue on. If you don't fix your bugs, your new code

242
00:16:13,437 --> 00:16:16,919
will be built on a buggy code base and ensure an unstable

243
00:16:16,980 --> 00:16:20,702
foundation. If you check in buggy code, someone will be

244
00:16:20,782 --> 00:16:24,304
writing code based on your bad code and you can just imagine

245
00:16:24,364 --> 00:16:32,348
how much waste that creates. Okay. So the ideas for doom came

246
00:16:32,408 --> 00:16:37,471
from our D&D campaign, which is full of demons. We also love the

247
00:16:37,511 --> 00:16:39,212
movies Evil Dead and Aliens.

248
00:16:40,270 --> 00:16:43,873
So Doom's design was just a mash-up of these ideas. And at

249
00:16:43,893 --> 00:16:47,095
the beginning of Doom's development, we created a new

250
00:16:47,175 --> 00:16:51,739
core principle. Use a superior development system than your

251
00:16:51,779 --> 00:16:57,163
target to develop your game. So before Doom, we were making

252
00:16:57,203 --> 00:17:01,247
games for DOS while developing on DOS computers. And we knew

253
00:17:01,287 --> 00:17:04,950
that we could do better if we used more powerful computers and

254
00:17:04,970 --> 00:17:07,752
a more advanced operating system to develop our games.

255
00:17:08,842 --> 00:17:13,165
So we developed Doom on Next Step workstations. So they are

256
00:17:13,225 --> 00:17:17,989
far superior to DOS. Next Step eventually turned into OSX, OSX.

257
00:17:19,250 --> 00:17:21,832
This also meant that one of our core principles was upheld.

258
00:17:22,912 --> 00:17:25,915
Great tools help make great games. We could make far better

259
00:17:25,955 --> 00:17:31,979
tools on Next Step. So DoomEd and QuakeEd were two of the most

260
00:17:32,039 --> 00:17:36,522
important tools that we used. They both really helped us

261
00:17:36,562 --> 00:17:37,923
create levels and test them.

262
00:17:38,464 --> 00:17:44,888
very quickly. You might not have known this, but we had five

263
00:17:44,948 --> 00:17:50,551
people on our team creating Doom. After Tom Hall left, we

264
00:17:50,591 --> 00:17:53,592
hired Sandy Peterson and Dave Taylor, which brought us up to

265
00:17:53,652 --> 00:17:59,255
six people. We also did a Super Nintendo port of Wolfenstein 3D

266
00:17:59,796 --> 00:18:02,617
right in the middle of Doom's development. It took us three

267
00:18:02,677 --> 00:18:06,319
weeks to make this port because we had to learn the Super

268
00:18:06,379 --> 00:18:07,140
Nintendo hardware.

269
00:18:09,847 --> 00:18:13,068
So we uploaded the shareware version of Doom to the

270
00:18:13,148 --> 00:18:17,869
University of Wisconsin server on December 10th of 1993. The

271
00:18:18,509 --> 00:18:22,050
excitement for the game was unprecedented. People were

272
00:18:22,670 --> 00:18:27,211
sitting on the server in the upload directory creating files

273
00:18:27,311 --> 00:18:31,212
with sentences like, when will we see Doom? And we got random

274
00:18:31,252 --> 00:18:36,233
calls in the office asking when it would be out. So time for a

275
00:18:36,273 --> 00:18:36,673
quick story.

276
00:18:37,717 --> 00:18:42,240
during the final day of Doom's creation, we worked 30 hours

277
00:18:42,280 --> 00:18:48,485
that day. So we had the game running on all the computers in

278
00:18:48,506 --> 00:18:52,108
the office to ensure that the game was really solid. So on a

279
00:18:52,189 --> 00:18:55,912
couple computers, the game froze. The menu could be brought

280
00:18:55,952 --> 00:18:59,555
up, but the game play, it just stopped. So John Carmack thought

281
00:18:59,635 --> 00:19:02,917
about what could possibly be happening in the game. And he

282
00:19:02,937 --> 00:19:05,640
figured out the solution without actually doing any debugging.

283
00:19:06,967 --> 00:19:09,249
So he was correcting the solution and we finally

284
00:19:09,309 --> 00:19:11,810
uploaded it after this five-minute fix and more and

285
00:19:11,830 --> 00:19:17,694
more testing. So at the beginning of 1994, I started

286
00:19:17,734 --> 00:19:20,956
working with Raven software and developed Heretic using the

287
00:19:20,976 --> 00:19:24,398
Doom engine. I wanted to see how an inventory system in a

288
00:19:24,438 --> 00:19:28,520
medieval version of Doom would play. It turned out great, I

289
00:19:28,560 --> 00:19:34,123
think. Does anyone remember Heretic? Okay, made it. We also

290
00:19:34,163 --> 00:19:35,364
made Doom II in 1994.

291
00:19:36,980 --> 00:19:41,584
over eight months and it was released October 10th. In

292
00:19:41,644 --> 00:19:45,927
addition to this, we did the Jaguar port ourselves and again

293
00:19:45,947 --> 00:19:49,110
we were multitasking and making multiple games. So we made two

294
00:19:49,150 --> 00:19:50,291
games in 1993, three games in 1994. In 1995, we started

295
00:19:50,331 --> 00:19:52,072
working on Quake and we got up to nine developers.

296
00:20:00,890 --> 00:20:04,913
There were four designers, three coders, two artists, and I was

297
00:20:04,933 --> 00:20:09,015
the only one to actually do both coding and design. I wrote Quake

298
00:20:09,135 --> 00:20:13,318
Ed, I experimented with level design and full 3D. Again, we

299
00:20:13,358 --> 00:20:17,660
started with a clean code base. We had no code from Doom using

300
00:20:17,700 --> 00:20:21,102
Quake, which was another one of our core principles of

301
00:20:21,162 --> 00:20:25,044
development up to that time. Write your code for this game

302
00:20:25,184 --> 00:20:27,506
only, not for some future game.

303
00:20:28,196 --> 00:20:30,257
you're going to be writing new code later because you're going

304
00:20:30,277 --> 00:20:33,659
to be smarter. Also, you're not tying yourself down to the

305
00:20:33,719 --> 00:20:39,862
limitations of your past code. Always try new things. So

306
00:20:39,902 --> 00:20:42,384
Quake's engine was being developed by John Carmack and

307
00:20:42,424 --> 00:20:45,825
the rasterization was being developed by Michael Abrash.

308
00:20:47,266 --> 00:20:50,968
John Cash worked on the network code and he went on to become

309
00:20:51,028 --> 00:20:55,731
the lead programmer of World of Warcraft. Time for another

310
00:20:55,751 --> 00:20:56,171
quick story.

311
00:20:58,032 --> 00:21:00,774
So this relates back to our belief that developing in a

312
00:21:00,834 --> 00:21:04,797
superior operating system can result in a better game. So

313
00:21:05,177 --> 00:21:08,560
while making Quake, we actually had to deal with Cray

314
00:21:08,600 --> 00:21:14,884
supercomputers to buy a Cray YMP for half price. So our plan was

315
00:21:14,924 --> 00:21:18,327
to have our development team connected to this Cray to BSP

316
00:21:18,367 --> 00:21:21,389
and light our maps at supercomputer speeds, as well as

317
00:21:21,449 --> 00:21:23,911
crunch whatever kinds of new data that we thought we might

318
00:21:23,951 --> 00:21:25,172
need for our next games engine.

319
00:21:26,672 --> 00:21:29,995
So the computer room in Quake's DM3 level was going to be full

320
00:21:30,035 --> 00:21:33,637
of Cray computers as a reference to this new hardware that we're

321
00:21:33,657 --> 00:21:36,899
going to acquire. Unfortunately, Cray was bought by Silicon

322
00:21:36,939 --> 00:21:42,143
Graphics before Quake was done and that deal fell apart. So the

323
00:21:42,163 --> 00:21:45,265
computer room in Quake is filled with the usual rectangular

324
00:21:45,305 --> 00:21:48,227
mainframes instead of C-shaped Cray supercomputers.

325
00:21:51,161 --> 00:21:53,462
After publishing Heretic, I started working with Raven on

326
00:21:53,502 --> 00:21:58,283
Hexen. I wanted to see how an FPS would play with a hub level

327
00:21:58,323 --> 00:22:02,444
system and character classes on it. Hexen launched on October

328
00:22:02,544 --> 00:22:07,205
30th of 1995 during the Deathmatch 95 event that was

329
00:22:07,225 --> 00:22:11,326
happening at Microsoft headquarters in Redmond. So a

330
00:22:11,386 --> 00:22:15,067
month later, I got Raven started on my next design, which was

331
00:22:15,207 --> 00:22:18,868
Hecatomb. It would be the third game in the series, Heretic,

332
00:22:19,108 --> 00:22:20,208
Hexen, and Hecatomb.

333
00:22:21,830 --> 00:22:24,351
Hecatomb was never finished. It was turned into Hexen 2.

334
00:22:25,831 --> 00:22:30,992
Because I left it. During this time, we noticed a small game

335
00:22:31,032 --> 00:22:34,793
company making some nice games like Raptor, Call of the

336
00:22:34,833 --> 00:22:38,554
Shadows, and we brought them down from Illinois to make a

337
00:22:38,594 --> 00:22:41,134
game that we would publish. They called themselves Rogue

338
00:22:41,154 --> 00:22:44,195
Entertainment and about 14 months later they released

339
00:22:44,255 --> 00:22:48,596
Strife, which used the Doom engine. It was an FPS RPG.

340
00:22:49,703 --> 00:22:51,944
and it was really fun and it showed that combining genres

341
00:22:52,004 --> 00:22:54,766
could actually make a fun FPS. Has anyone played Strive here?

342
00:22:54,786 --> 00:23:01,309
All right. It's on Steam, by the way. Also during 1995, we made

343
00:23:01,849 --> 00:23:05,711
Ultimate Doom, which was a retail version of the full

344
00:23:06,351 --> 00:23:10,012
version of Doom with an extra episode, and we made the master

345
00:23:10,052 --> 00:23:13,854
levels of Doom that year as well. So id Software was still

346
00:23:13,934 --> 00:23:18,176
nine developers in size, and we released two games in 1995 while

347
00:23:18,336 --> 00:23:19,477
we were working on Quake.

348
00:23:21,490 --> 00:23:25,793
So work continued on Quake and 14 months after we started, we

349
00:23:25,833 --> 00:23:30,938
released Q-Test on February 24th of 1996 for the world to test

350
00:23:31,498 --> 00:23:35,622
our first Internet game play. During the next four months we

351
00:23:35,662 --> 00:23:39,645
worked very hard to complete Quake. We also released Final

352
00:23:39,685 --> 00:23:45,169
Doom, which was created by team TNT and the Casali brothers, and

353
00:23:45,210 --> 00:23:49,033
we also released Death Kings of the Dark Citadel, which was an

354
00:23:49,073 --> 00:23:50,534
additional set of levels for Hexen.

355
00:23:51,648 --> 00:23:54,010
So one important principle that helped us get Quake done

356
00:23:54,090 --> 00:23:59,872
faster was this one. Encapsulate functionality to ensure design

357
00:24:00,032 --> 00:24:04,114
consistency. Examples of this in Quake would be like just the

358
00:24:04,174 --> 00:24:07,696
torches on the wall. We could have had us level designers

359
00:24:07,896 --> 00:24:12,078
place a torch model, then a fire model that animated, then a

360
00:24:12,158 --> 00:24:15,919
torch sound entity all at the same location in a map. But then

361
00:24:15,939 --> 00:24:18,540
if we needed to move things around, something could have

362
00:24:18,560 --> 00:24:19,381
gotten left behind.

363
00:24:20,407 --> 00:24:22,988
So it was far easier to just create a torch entity that we

364
00:24:23,028 --> 00:24:26,990
dropped in the game with all the functionality built in and spawned

365
00:24:27,010 --> 00:24:31,913
by the engine. So also the water in the game needed sound effect

366
00:24:31,953 --> 00:24:34,694
entities all over the place to fully cover the water areas so

367
00:24:34,734 --> 00:24:38,196
you'd hear it everywhere. So if the water got modified in the

368
00:24:38,216 --> 00:24:41,418
level, moving all those entities around and deleting some, it

369
00:24:41,438 --> 00:24:45,080
would have been a huge mess. So it was easier to make the game

370
00:24:45,640 --> 00:24:50,143
just play water sound when the water was being rendered.

371
00:24:50,998 --> 00:24:53,339
So it was a renderer level feature and it was out of the

372
00:24:53,379 --> 00:24:56,940
designer's hands and that ensured consistency and it

373
00:24:56,960 --> 00:25:00,002
saved memory. And we did the same thing for the skies in

374
00:25:00,122 --> 00:25:06,545
Quake, sky audio. So I released Quake shareware on June 22nd at

375
00:25:08,025 --> 00:25:10,786
530 central time on the University of Wisconsin at

376
00:25:10,826 --> 00:25:17,129
Madison site. So quick story. While Michael Abrash was

377
00:25:17,249 --> 00:25:18,370
programming the renderer,

378
00:25:19,300 --> 00:25:22,642
He was interleaving CPU instructions with FPU

379
00:25:22,702 --> 00:25:25,823
instructions to calculate perspective correct texture

380
00:25:25,843 --> 00:25:30,004
mapping. So sometimes while he was playing the game, for one

381
00:25:30,104 --> 00:25:33,225
frame the game would show a completely different part of the

382
00:25:33,245 --> 00:25:37,427
level. He isolated the only instruction where that result

383
00:25:37,467 --> 00:25:40,228
could actually happen and determined that it was

384
00:25:40,288 --> 00:25:42,949
impossible for it to be an invalid value.

385
00:25:43,901 --> 00:25:47,964
So he had a friend from Intel come over and go through his

386
00:25:48,004 --> 00:25:51,746
analysis and his friend agreed with him and told him that

387
00:25:51,766 --> 00:25:54,528
there was a known error with the floating point divide

388
00:25:54,588 --> 00:25:59,272
instruction on the Pentium and it was a hardware error. So

389
00:25:59,532 --> 00:26:01,814
there was nothing that we could do about it so we left it alone

390
00:26:02,074 --> 00:26:05,536
but this bug is known as the Pentium F div bug which you can

391
00:26:05,556 --> 00:26:10,500
look up online. So Quake is the game that introduced the world

392
00:26:10,560 --> 00:26:11,360
to mouse look.

393
00:26:12,282 --> 00:26:17,647
to high speed true 3D worlds, texture mapped and internet

394
00:26:17,667 --> 00:26:23,233
multiplayer. So clans sprung up immediately as soon as the game

395
00:26:23,253 --> 00:26:26,196
came out and eSports and tournaments were starting all

396
00:26:26,256 --> 00:26:30,220
over the place. Quake world launched five months later to

397
00:26:30,580 --> 00:26:34,705
smooth out the internet game play. So making games

398
00:26:35,295 --> 00:26:39,037
was and still is our life. We love it more than anything else.

399
00:26:39,177 --> 00:26:42,679
As you can tell by our release of 28 games in five and a half

400
00:26:42,759 --> 00:26:47,081
years by less than ten people. Many other games were released

401
00:26:47,101 --> 00:26:50,303
that used our license technology over the years. And here's some

402
00:26:50,343 --> 00:26:52,884
more core principles that we learned from doing all of this

403
00:26:52,944 --> 00:27:00,148
work. Try to code transparently. Tell your lead and peers exactly

404
00:27:00,588 --> 00:27:02,309
how you're going to solve your current task.

405
00:27:03,025 --> 00:27:05,886
and get feedback and advice. Don't treat game programming

406
00:27:05,946 --> 00:27:09,668
like each coder is a black box. Project could just totally go

407
00:27:09,708 --> 00:27:14,590
off the rails and cause delays. Programming is a creative art

408
00:27:14,610 --> 00:27:18,051
form based in logic. Every programmer is different and

409
00:27:18,071 --> 00:27:21,152
will code differently. Don't waste time focusing on a rigid

410
00:27:21,212 --> 00:27:23,173
coding style. It's the output that matters.

411
00:27:25,229 --> 00:27:28,071
So we keep working to make great games. It's in our blood as it's

412
00:27:28,131 --> 00:27:31,333
in your blood and it's why you're here at GDC. So you want

413
00:27:31,353 --> 00:27:34,915
to be the best. Go be the best. Thank you for your time and I'm

414
00:27:34,935 --> 00:27:37,796
ready for any kind of questions you might have. Thanks.

415
00:27:47,041 --> 00:27:49,143
So, yeah, I don't know if someone is handing a mic around

416
00:27:49,223 --> 00:27:51,944
or if anyone has any questions about this stuff. Okay, got one.

417
00:27:52,805 --> 00:27:54,746
All right. Who wants to ask some questions first?

418
00:27:56,127 --> 00:27:59,008
or does nobody want to ask a question? Oh, got one right over

419
00:27:59,028 --> 00:27:59,148
here.

420
00:28:05,489 --> 00:28:11,171
Great talk. Thank you. In one of the first principles you show,

421
00:28:12,131 --> 00:28:17,312
you mentioned that don't prototype. And today one of the

422
00:28:17,352 --> 00:28:20,773
main principles in our game production as we learn, as we

423
00:28:20,813 --> 00:28:24,334
work, we are prototyping. What's your opinion on that?

424
00:28:25,158 --> 00:28:29,440
Well, we, because of the time pressures, we had no time to do

425
00:28:29,480 --> 00:28:32,940
prototypes. And we were a small company that only had four

426
00:28:32,980 --> 00:28:36,181
people at the time. So we could actually not, we didn't need a

427
00:28:36,221 --> 00:28:39,262
prototype because we knew from our 10 years of experience that

428
00:28:40,642 --> 00:28:43,143
the games that we were making were small in scope. They were

429
00:28:43,243 --> 00:28:48,544
very easy to visualize in our minds. And that when we started

430
00:28:48,584 --> 00:28:52,425
it and we finished it, say one or two months later, it was what

431
00:28:52,525 --> 00:28:54,406
needed to be done in that amount of time. So...

432
00:28:55,306 --> 00:28:58,588
there may be 20 levels in the game and it might end up being

433
00:28:58,808 --> 00:29:01,889
10 levels. It's like whatever would fit in that time but all

434
00:29:01,909 --> 00:29:05,551
the game play and most of the characters and AI and all that

435
00:29:05,571 --> 00:29:10,954
stuff could totally get done in that space. But I think nowadays

436
00:29:11,054 --> 00:29:13,855
obviously with any really big project you're definitely going

437
00:29:13,875 --> 00:29:16,456
to be prototyping. But if you're still like a lot of mobile

438
00:29:16,496 --> 00:29:19,978
games, they might not need prototyping if you already know

439
00:29:20,018 --> 00:29:22,219
exactly how the game is going to play. But if you don't know,

440
00:29:22,859 --> 00:29:25,421
if you're developing your game kind of organically and you want

441
00:29:25,441 --> 00:29:28,462
to see where the game goes, I don't know if I would call it

442
00:29:28,502 --> 00:29:32,805
prototyping. I mean, it's like if you start making your game

443
00:29:32,865 --> 00:29:35,807
and at some point you might discover something about it that

444
00:29:35,867 --> 00:29:39,289
changes what you're doing in the game, but that's your game. It's

445
00:29:39,309 --> 00:29:41,570
a prototype if you're throwing it all away and starting over.

446
00:29:42,030 --> 00:29:44,051
But if you're still going forward, I don't know if that's

447
00:29:44,091 --> 00:29:46,053
a prototype. I think that's just the beginning of your game.

448
00:29:46,073 --> 00:29:47,694
All right.

449
00:29:48,074 --> 00:29:51,736
Thank you.

450
00:29:57,695 --> 00:30:07,302
Yeah, hi. I always felt, especially looking back on Doom and Quake, that the music in your games was always a big part of the games.

451
00:30:08,163 --> 00:30:17,670
I, for example, I often listen to the Doom soundtrack, and I was just wondering, for example, the collaboration with Trent Reznor on Quake, how did that happen?

452
00:30:17,910 --> 00:30:21,092
Maybe you've got another quick story that you could share?

453
00:30:21,112 --> 00:30:25,676
Yeah, so the story with how we got Trent Reznor involved in Quake was kind of funny.

454
00:30:26,785 --> 00:30:30,968
After Doom, it was ‑‑ it hit everybody. Doom was such a big

455
00:30:31,008 --> 00:30:35,472
game that Hollywood started to get into ‑‑ they tried to

456
00:30:35,512 --> 00:30:38,534
get into games. So they knew there had been an earlier

457
00:30:38,975 --> 00:30:41,477
Hollywood invasion of the game industry and they were rejected.

458
00:30:42,237 --> 00:30:46,781
And they decided to go in in a different way. So we were

459
00:30:46,821 --> 00:30:52,526
contacted by Hollywood agents, ICM, and we had a person

460
00:30:52,546 --> 00:30:55,388
handling our account that are named Buildblock.

461
00:30:55,953 --> 00:31:00,036
in Bill Block at that time had a lot of other clients and one of

462
00:31:00,076 --> 00:31:06,659
which was 9 Inch Nails. Well, 9 Inch Nails, they played Doom all

463
00:31:06,679 --> 00:31:09,640
the time on the tour bus. They had four computers all networked

464
00:31:09,760 --> 00:31:11,781
on the tour bus. When they were done with their concerts, they

465
00:31:11,801 --> 00:31:15,183
were on the tour bus death matching. And they did it all

466
00:31:15,203 --> 00:31:17,504
the time. It's funny because I just spoke to someone like two

467
00:31:17,544 --> 00:31:21,886
weeks ago about that. Like they were interviewing Chris Verena.

468
00:31:22,507 --> 00:31:24,868
and getting all this like, oh, we play Doom all the time

469
00:31:24,948 --> 00:31:29,210
stories. And so Bill found out about that and said, hey, they

470
00:31:29,230 --> 00:31:32,091
are clients of mine. And we heard they were clients and we

471
00:31:32,131 --> 00:31:34,412
said, wow, it would be really cool if they would do the

472
00:31:34,452 --> 00:31:37,693
soundtrack for the next game instead of having MIDI kind of

473
00:31:37,773 --> 00:31:40,714
metal soundtrack. We could actually get some industrial

474
00:31:40,854 --> 00:31:47,457
real music in here. So basically they agreed to meet up with us

475
00:31:47,517 --> 00:31:49,858
and they came over to our office in Mesquite.

476
00:31:50,527 --> 00:31:54,150
you know, Trent would pull up in a limo and I don't know how,

477
00:31:54,250 --> 00:31:55,971
but there would be a bunch of women outside the building

478
00:31:56,051 --> 00:31:59,934
waiting. They don't tell anybody that they're going there, but

479
00:31:59,954 --> 00:32:03,557
they find out where he's going. And so they just wait outside

480
00:32:03,577 --> 00:32:06,719
while he's up there and we're talking about stuff, you know,

481
00:32:06,759 --> 00:32:09,401
about the games and the kind of music that we're thinking about

482
00:32:09,441 --> 00:32:12,884
doing. And we hung out several times and just kind of kept in

483
00:32:12,904 --> 00:32:17,587
touch through e-mail and American McGee would fly to New

484
00:32:17,647 --> 00:32:19,148
Orleans where Trent lived.

485
00:32:19,835 --> 00:32:23,016
and just basically kind of coordinate the music creation.

486
00:32:23,656 --> 00:32:27,417
And it was kind of funny because Quake was delayed because of

487
00:32:27,457 --> 00:32:31,178
the music. Because if you involve someone like Trent who

488
00:32:31,258 --> 00:32:36,440
is out on tour all the time and has a ton of rights around the

489
00:32:36,500 --> 00:32:39,921
music, there were 12 signatures we had to get from Interscope

490
00:32:39,941 --> 00:32:43,182
to actually get that music released to us. So it took us

491
00:32:43,302 --> 00:32:45,763
extra time and finally as soon as it was signed off, then we

492
00:32:45,783 --> 00:32:47,743
could actually release the game. So.

493
00:32:48,763 --> 00:33:02,306
just watch out for that. Thank you. He was nice. Okay. So you

494
00:33:02,346 --> 00:33:05,407
had a rule stating that you didn't want to reuse code

495
00:33:05,587 --> 00:33:10,028
because you would not get the results that you wanted?

496
00:33:10,818 --> 00:33:15,521
At what level did you decide between using engine code and specific game code?

497
00:33:15,561 --> 00:33:19,563
Because you use Commander Keen engine code several times over.

498
00:33:19,863 --> 00:33:22,765
At what level do you make that decision and how?

499
00:33:23,365 --> 00:33:28,168
Well, the Commander Keen code, let's say for Commander Keen 1 through 3, it was the same engine.

500
00:33:28,708 --> 00:33:30,830
So it ran the data that we created.

501
00:33:30,890 --> 00:33:34,532
So we created levels and characters and audio and all that.

502
00:33:34,552 --> 00:33:36,233
And that was just data the engine worked on.

503
00:33:37,116 --> 00:33:41,319
and the engine itself had if defs basically in it for each

504
00:33:41,359 --> 00:33:44,482
of the commander keens back then. So if this is keen one,

505
00:33:44,862 --> 00:33:49,086
then these actors would be, you know, their code would be

506
00:33:49,106 --> 00:33:50,167
running.

507
00:33:51,729 --> 00:33:55,451
and we would load these files. So there were if deaths in the

508
00:33:55,531 --> 00:33:59,533
engine just to handle the specific sets of data that or

509
00:33:59,593 --> 00:34:02,235
sets of code that were different for the different ‑‑ we just

510
00:34:02,275 --> 00:34:05,036
didn't want the executable to be full of three games worth of

511
00:34:05,196 --> 00:34:08,558
specialized information so we if deathed some of it. But ‑‑

512
00:34:09,418 --> 00:34:13,040
but ‑‑ and to keep things really small on a disk, we had

513
00:34:13,120 --> 00:34:17,362
to take, like, generic data files and ‑‑

514
00:34:18,484 --> 00:34:21,326
turn them into object files and then link them into our

515
00:34:21,366 --> 00:34:23,708
executable and then compress the executable because we had to

516
00:34:23,768 --> 00:34:26,689
fit on a 140 or a 3, what was it back then? It was a 1.44, 3.5

517
00:34:26,749 --> 00:34:27,050
inch disk.

518
00:34:34,241 --> 00:34:38,543
So we did need to do that where we didn't keep all of our code

519
00:34:38,563 --> 00:34:41,925
in one big executable, but it was if defed out. So in the

520
00:34:41,965 --> 00:34:46,007
code it was there but not in the executable. But what I was

521
00:34:46,047 --> 00:34:50,289
talking about was when you went between major jumps like keen

522
00:34:50,389 --> 00:34:52,530
one through three to keen four through six.

523
00:34:53,371 --> 00:34:57,896
those engines have no shared code in them. Or Wolfenstein, or

524
00:34:57,936 --> 00:35:01,860
Doom, or Quake. It's basically start with a new code base. And

525
00:35:02,240 --> 00:35:06,405
that was actually back in the 80s, that was pretty typical.

526
00:35:06,485 --> 00:35:09,208
Like if you look at the ultimate games, you know, like Lord

527
00:35:09,228 --> 00:35:11,771
British's ultimate games, every one of them was just brand new

528
00:35:11,831 --> 00:35:13,613
code. Just start writing a new game.

529
00:35:14,281 --> 00:35:17,682
and maybe there's a faster way to render tiles on the screen or

530
00:35:18,142 --> 00:35:21,163
use code paging where you're overwriting code in memory

531
00:35:21,183 --> 00:35:25,985
because the game is too big, et cetera. So, yeah, we didn't

532
00:35:26,945 --> 00:35:30,266
reuse code unless it was something that didn't ‑‑ it

533
00:35:30,326 --> 00:35:33,887
was very small and it didn't matter like loading a file. But

534
00:35:33,967 --> 00:35:36,108
usually it's so small that we probably just type it ourselves

535
00:35:36,148 --> 00:35:36,308
again.

536
00:35:45,843 --> 00:35:55,591
the runner. All right. Now, obviously you were working on

537
00:35:57,572 --> 00:36:01,435
porn across your eyebrows free during the 80s, stroke, early

538
00:36:01,455 --> 00:36:01,475
90s.

539
00:36:03,720 --> 00:36:07,622
Why do you think side scrollers, even though they were really popular during that era,

540
00:36:08,482 --> 00:36:09,883
even though they've fallen out of favor now,

541
00:36:11,884 --> 00:36:16,166
why do you think as a pioneer of the first person shooter genre,

542
00:36:16,587 --> 00:36:19,508
why do you think the genre has gone from strength to strength to strength to strength

543
00:36:19,608 --> 00:36:25,071
and there are no signs of it going down in terms of popularity?

544
00:36:25,111 --> 00:36:26,072
You mean the shooter genre?

545
00:36:26,252 --> 00:36:29,473
Yeah, the first person shooter genre that ultimately IID pioneered back in the day.

546
00:36:30,702 --> 00:36:36,846
Well, the great thing about the shooter genre is that it started to fragment its design across different styles.

547
00:36:37,386 --> 00:36:43,289
So when we were making our games, like we just made this one type of game,

548
00:36:44,130 --> 00:36:49,073
which I mean, I'd say Wolfenstein and Doom and Quake are very similar in that you go through levels

549
00:36:49,113 --> 00:36:52,795
and you just like kill monsters and get to the exit and it just looked better each time

550
00:36:52,855 --> 00:36:56,977
and things acted differently and sounded better and looked better.

551
00:36:59,461 --> 00:37:02,864
As soon as other people started to get into making shooters,

552
00:37:02,905 --> 00:37:05,668
then we started to see people needing to be more creative

553
00:37:05,768 --> 00:37:07,990
because they're not the only game in town.

554
00:37:08,290 --> 00:37:09,852
Now there's a bunch of people making them.

555
00:37:10,373 --> 00:37:12,555
So if you look at, say, the Red Storm games, when they

556
00:37:12,575 --> 00:37:15,198
started coming out with Ghost Recon, Rainbow Six, and

557
00:37:15,418 --> 00:37:18,241
Splinter Cell, that was basically saying

558
00:37:19,036 --> 00:37:22,938
here's a whole tactical section of the shooter genre where

559
00:37:23,418 --> 00:37:26,880
you're creeping along, you're getting to do really long

560
00:37:26,920 --> 00:37:34,645
distance sniper rifle shots and so call of duty where you have

561
00:37:34,725 --> 00:37:37,886
checkpoints and everything advances between checkpoints. So

562
00:37:37,926 --> 00:37:41,428
people started to really try and innovate within the genre and

563
00:37:41,468 --> 00:37:44,910
now you have, you know, overwatch, TF2 and, you know,

564
00:37:48,379 --> 00:37:52,583
lawbreakers in this whole competitive way of playing

565
00:37:52,643 --> 00:37:59,009
shooters. And I know that we have, let's say, MMO shooter

566
00:37:59,089 --> 00:38:02,292
destiny. So everybody is taking this viewpoint and this way of

567
00:38:02,733 --> 00:38:05,796
basically shooting stuff and applying it to a lot of

568
00:38:05,856 --> 00:38:08,839
different ways of getting through, you know, or getting

569
00:38:08,859 --> 00:38:09,940
through objectives, basically.

570
00:38:10,545 --> 00:38:12,547
and wrapping some kind of narrative around it that's

571
00:38:12,567 --> 00:38:15,730
really different and sometimes you get something that's very

572
00:38:15,770 --> 00:38:18,953
different like Splinter Cell is pretty different from those

573
00:38:18,993 --> 00:38:25,959
other games. But you're still shooting in some parts. So I

574
00:38:25,979 --> 00:38:29,742
think it's just because there's so much competition, people are

575
00:38:29,802 --> 00:38:36,048
trying to do something new with it. Has anyone played the hit

576
00:38:36,088 --> 00:38:37,650
man sniper game on mobile?

577
00:38:38,704 --> 00:38:41,566
because that's another really cool way of making a shooter

578
00:38:41,626 --> 00:38:44,669
where you just have a vantage point somewhere on your mobile

579
00:38:44,709 --> 00:38:47,631
phone and you're just zooming into a scene and scrolling

580
00:38:47,671 --> 00:38:50,954
across the scene and tracking people. And it's totally a

581
00:38:51,014 --> 00:38:54,016
first-person shooter, but you don't move. And it's just

582
00:38:54,036 --> 00:38:57,099
another way, just another example of how people are trying

583
00:38:57,139 --> 00:39:00,501
to innovate and push forward with this first-person shooter

584
00:39:00,541 --> 00:39:04,284
perspective, but how you play it is different. And I know that

585
00:39:04,405 --> 00:39:06,026
the innovation is just going to continue.

586
00:39:07,085 --> 00:39:11,467
people are just going to continue trying to innovate with that viewpoint and what else can you do with it.

587
00:39:17,850 --> 00:39:22,752
So your story has been very inspirational to many people in the industry.

588
00:39:23,272 --> 00:39:28,114
What do you think was unique to Eat Software in those days that enabled this to happen?

589
00:39:28,514 --> 00:39:33,096
Do you think it can happen again to teams these days and what would be your advice?

590
00:39:34,592 --> 00:39:39,873
Yeah, I mean, I think it's super common. And, you know, really,

591
00:39:39,893 --> 00:39:43,854
everybody can do the same thing. And what it comes down to is

592
00:39:44,194 --> 00:39:48,215
people that match pretty well, having a pretty good amount of

593
00:39:48,255 --> 00:39:54,237
experience, but really having focus and determination to make

594
00:39:54,497 --> 00:39:56,057
your game and finish your game.

595
00:39:56,810 --> 00:40:01,157
and do that over and over again. So when Wolfenstein came out,

596
00:40:01,197 --> 00:40:05,323
that was game number 87 for me. And Doom was game number 90. And

597
00:40:07,043 --> 00:40:10,524
we had made so many games and we had iterated and we have shipped

598
00:40:10,884 --> 00:40:15,906
over and over that we knew how to do it. And we didn't have to

599
00:40:15,946 --> 00:40:18,786
really worry about how to finish a game or even how to start a

600
00:40:18,826 --> 00:40:22,267
game. We were just worried about how to design a really good game

601
00:40:22,427 --> 00:40:25,348
and to create new technology and kind of make those things work

602
00:40:25,388 --> 00:40:28,089
together. Nowadays you don't really have to worry so much

603
00:40:28,129 --> 00:40:31,370
about the tech and it really is all about design is law. It's

604
00:40:31,410 --> 00:40:33,430
all about what is that design that you're doing.

605
00:40:33,982 --> 00:40:38,024
that you're creating that no one has seen before because the tech is already there for you to use.

606
00:40:38,744 --> 00:40:42,786
You know, except for when you're in VR and AR and there's a lot of new stuff that you're going to create there,

607
00:40:42,866 --> 00:40:45,227
but basically traditionally on console and PC,

608
00:40:45,887 --> 00:40:51,490
what is the design? And can you focus and spend a lot of time on that, you know,

609
00:40:51,890 --> 00:40:55,731
innovative, unique design to make something people haven't seen before?

610
00:40:56,548 --> 00:40:58,650
the engines are already out there. If you look at Minecraft,

611
00:40:58,690 --> 00:41:02,753
it's a perfect example of here's an amazing design that one

612
00:41:02,813 --> 00:41:07,016
person created, you know, and it was all about what you do in

613
00:41:07,056 --> 00:41:10,399
this simple world. People, you know, it's easy to complexify a

614
00:41:10,439 --> 00:41:12,981
design. That takes nothing to make something really complex.

615
00:41:13,615 --> 00:41:16,476
it's hard to simplify everything. And if you just sit

616
00:41:16,516 --> 00:41:21,417
there and spend time simplifying your design, taking away things

617
00:41:21,457 --> 00:41:24,117
from your UI and things that would just complicate what

618
00:41:24,157 --> 00:41:27,678
you're doing and try to make it contextual within the game, then

619
00:41:27,738 --> 00:41:31,799
you're getting better and better at what you do. And so I say

620
00:41:31,999 --> 00:41:36,380
everybody has the same chance to do it. It's just it takes, you

621
00:41:36,420 --> 00:41:39,760
know, not really a team, but it's helpful if you have a team.

622
00:41:40,069 --> 00:41:43,072
and it takes focus and determination and I think for

623
00:41:43,152 --> 00:41:46,915
us it was us being in the same room and being co-located. Over

624
00:41:46,955 --> 00:42:01,628
the Internet it's a lot harder. Given that you didn't make

625
00:42:01,668 --> 00:42:04,270
prototypes and you made so many games, were there any concepts

626
00:42:04,290 --> 00:42:06,052
that you had to walk away from or throw away?

627
00:42:08,327 --> 00:42:14,991
Let me see. Yeah, we did. So after we made our first

628
00:42:15,031 --> 00:42:17,952
Commander King games, we were going to make a game called

629
00:42:18,032 --> 00:42:21,594
Quake, the fight for justice. It was going to be an RPG and

630
00:42:21,634 --> 00:42:23,996
everything. So we started working on it. We worked on it

631
00:42:24,016 --> 00:42:29,399
for about two weeks. And then we decided we knew that Quake was

632
00:42:29,419 --> 00:42:31,720
supposed to be a really great game. It was supposed to look

633
00:42:31,740 --> 00:42:33,701
great. It was supposed to be a powerful

634
00:42:34,410 --> 00:42:37,311
game and what we were making right after Commander Keen was

635
00:42:37,431 --> 00:42:43,014
not matching that idea of who Quake was in our minds from D&D.

636
00:42:43,074 --> 00:42:46,656
So we basically said forget it. We're still making these simple

637
00:42:46,776 --> 00:42:49,837
kind of cartoony games. Let's just keep on getting better at

638
00:42:49,857 --> 00:42:53,539
it. But we're going to put Quake off. So that was early 1991. So

639
00:42:53,559 --> 00:42:56,300
we waited four years before we actually got the tech together

640
00:42:56,340 --> 00:43:00,562
and what we knew we could deliver on the original promise

641
00:43:00,623 --> 00:43:03,804
or design of Quake in 1995 when we started working on Quake.

642
00:43:04,929 --> 00:43:12,030
Other than that, we didn't really start on any game that we didn't finish.

643
00:43:12,170 --> 00:43:19,412
It was, we talked about games and talked about ideas, such as when we finished Catacomb 3D

644
00:43:19,452 --> 00:43:23,233
and we were planning on making the next set of Commander Keens, Keens 7 through 9.

645
00:43:25,375 --> 00:43:28,498
we decided that, you know what, let's not do this side scrolling

646
00:43:28,558 --> 00:43:31,921
thing again. We can do maybe a Keen someday in the future, and

647
00:43:31,961 --> 00:43:36,024
maybe it will be in 3D. But let's start doing 3D stuff. We

648
00:43:36,104 --> 00:43:39,067
just made Catacombs 3D, which was one of the first texture

649
00:43:39,107 --> 00:43:43,730
mapped games, even though it was in EGA. So Tom Hall thought of

650
00:43:43,991 --> 00:43:46,533
this idea where, you know,

651
00:43:46,935 --> 00:43:51,238
what if there's a research facility and there's mutants all

652
00:43:51,278 --> 00:43:53,019
over the place because they created these monsters and

653
00:43:53,039 --> 00:43:54,841
they're destroying all the scientists and you're going to

654
00:43:54,861 --> 00:43:57,983
go in and rescue them all. And I just told them that's an awful

655
00:43:58,063 --> 00:44:02,566
idea. I don't want to play that game already. And so I said, why

656
00:44:02,586 --> 00:44:05,147
don't we just remake Wolfenstein, Castle Wolfenstein.

657
00:44:05,447 --> 00:44:08,129
And we all just immediately went, oh, my God, let's do that.

658
00:44:08,209 --> 00:44:11,571
So that original idea, that was just another idea that we had

659
00:44:11,611 --> 00:44:13,653
that we didn't do. But that's like pretty much the end.

660
00:44:14,287 --> 00:44:18,310
the only extent that we had back then of not making something. We

661
00:44:18,711 --> 00:44:20,512
kind of knew what we were going to make and we just made them.

662
00:44:20,653 --> 00:44:25,517
So there wasn't a let's start doom and then reboot or

663
00:44:25,597 --> 00:44:28,840
something like that. We just made the games. We just came up

664
00:44:28,860 --> 00:44:34,365
with the designs and made them. Yeah.

665
00:44:35,506 --> 00:44:39,270
Hello. My question is you managed to make games so

666
00:44:39,330 --> 00:44:39,690
quickly.

667
00:44:40,425 --> 00:44:43,453
So very, very quickly, how did you do it and what happened afterwards?

668
00:44:43,935 --> 00:44:45,619
Because I think it became a little bit slower.

669
00:44:47,449 --> 00:44:50,932
Yeah, it's kind of funny. A lot of new programmers don't fully

670
00:44:50,952 --> 00:44:53,634
understand what we had to do back then because there's so

671
00:44:53,654 --> 00:44:57,277
many APIs nowadays that do everything for you. So let's

672
00:44:57,317 --> 00:45:00,500
pretend in a world where there are no APIs, because that's what

673
00:45:00,540 --> 00:45:03,342
we lived in, there were no APIs when we were making our stuff,

674
00:45:03,382 --> 00:45:06,484
there was BIOS, you know, the thing that when you boot your

675
00:45:06,504 --> 00:45:09,107
PC and you see some of that text that you should never see ever

676
00:45:09,147 --> 00:45:12,730
again, like that's your BIOS. And that's the only thing that

677
00:45:12,770 --> 00:45:15,212
we could actually talk to through this simple interrupt

678
00:45:17,173 --> 00:45:22,318
API. That was it. So putting pixels on the screen for us was

679
00:45:22,899 --> 00:45:25,982
we knew where in the computer's memory if we put a value in

680
00:45:26,022 --> 00:45:30,066
memory a dot would show up. And so that's how we put our

681
00:45:30,126 --> 00:45:32,128
graphics on the screen. We actually had to write all the

682
00:45:32,148 --> 00:45:35,551
code in assembly to put the dots on the screen quickly so you'd

683
00:45:35,591 --> 00:45:36,112
see a shape.

684
00:45:36,781 --> 00:45:41,784
in backgrounds and everything. There was no API to send a

685
00:45:41,844 --> 00:45:45,686
display list of triangles to a GPU or anything, because it

686
00:45:45,706 --> 00:45:48,328
didn't even exist. So while making Quake, if you can just

687
00:45:48,368 --> 00:45:51,189
imagine a full 3D world, everything that those video

688
00:45:51,229 --> 00:45:54,772
cards were doing, we actually had to do that in our own code.

689
00:45:55,512 --> 00:45:58,774
And we knew that when we were developing those APIs,

690
00:45:59,603 --> 00:46:04,124
that when we're developing the code to rasterize Quake, we're

691
00:46:04,144 --> 00:46:07,145
also working with NVIDIA on the pipeline that we wanted the

692
00:46:07,225 --> 00:46:13,006
cards to be using, which are the APIs that turned into the on

693
00:46:13,026 --> 00:46:17,668
card APIs that DirectX and OpenGL and stuff talk to. But we

694
00:46:17,708 --> 00:46:19,888
had to put every pixel on the screen ourselves. We had to

695
00:46:19,928 --> 00:46:22,469
read the keyboard ourselves. There was no nice functions to

696
00:46:22,509 --> 00:46:26,430
call to do stuff like that. And that is just to get the tech

697
00:46:26,470 --> 00:46:27,670
working, not to mention

698
00:46:28,429 --> 00:46:33,510
drawing characters in 2D. So 2D key frame animation. Everyone

699
00:46:33,530 --> 00:46:38,491
knows how long that takes. There was no tweening. There was no

700
00:46:38,831 --> 00:46:43,473
3D stuff. So it took us a long ‑‑ it sounds like it did take

701
00:46:43,513 --> 00:46:46,733
us a long time. But we spent all of our hours working. So

702
00:46:47,493 --> 00:46:49,554
especially when we're in Madison, Wisconsin, why would we

703
00:46:49,614 --> 00:46:52,915
go outside? There's no reason to even go out. We could order

704
00:46:52,955 --> 00:46:54,355
pizza and live inside of one room.

705
00:46:55,780 --> 00:47:00,170
So that's what we did. And so we basically slept for eight hours

706
00:47:00,290 --> 00:47:03,978
and all the rest of the time we worked for half a year while we

707
00:47:03,998 --> 00:47:06,804
were doing that, which got several games done at that

708
00:47:06,864 --> 00:47:07,044
point.

709
00:47:07,876 --> 00:47:10,617
but really it was all about, like we didn't have anything

710
00:47:10,657 --> 00:47:12,878
else going on. There was no Twitter, no Facebook, no

711
00:47:12,958 --> 00:47:16,359
Internet, no nothing. So nothing is popping up and bugging us. So

712
00:47:16,379 --> 00:47:19,400
we could just sit there and code all day long listening to heavy

713
00:47:19,420 --> 00:47:22,641
metal and stuff. So that's what we did. There were no

714
00:47:22,681 --> 00:47:25,062
interruptions and it was all about time, focus and

715
00:47:25,102 --> 00:47:28,983
determination. Okay.

716
00:47:33,154 --> 00:47:39,836
Since you left ID Software, Doom 3 came out and Doom 2016 came out only recently.

717
00:47:41,017 --> 00:47:46,919
Doom 3 was criticized by some people for the fact that it focused too much on survival horror,

718
00:47:46,939 --> 00:47:54,201
whereas Doom 2016 has been criticized even though a lot of early Doom fans have

719
00:47:55,422 --> 00:47:58,183
praised it for the fact that it's gone back to basics formula.

720
00:47:58,783 --> 00:48:01,924
A lot of people have also stated that it hasn't

721
00:48:02,584 --> 00:48:10,486
taking into account the innovations that have occurred since Doom 2. If you were to be,

722
00:48:11,987 --> 00:48:17,868
say, like in an alternative universe, if you could have had a hand in the making of Doom 3 and 2016,

723
00:48:19,169 --> 00:48:25,851
how would you have done Doom? What would I have done for Doom 3 or Doom 4?

724
00:48:27,924 --> 00:48:32,589
Well, I would have made a sequel, I think. I would have made a sequel to Doom II.

725
00:48:32,609 --> 00:48:37,654
Because Doom III and Doom IV were reboots of the original Doom in different ways.

726
00:48:38,375 --> 00:48:41,478
So it would have been a sequel. I can't say what that sequel would have been,

727
00:48:41,518 --> 00:48:44,822
because I never thought about making a sequel to Doom II.

728
00:48:46,023 --> 00:48:50,585
If you look at the games we made back then, we made a game and

729
00:48:50,705 --> 00:48:55,287
sometimes we made a sequel to the game. Like Wolfenstein, we

730
00:48:55,307 --> 00:48:58,028
did a sequel, kind of prequel, but then we did Spirit Destiny.

731
00:48:58,168 --> 00:49:01,849
We did Doom, Doom II, Quake, and I started designing Quake II

732
00:49:01,889 --> 00:49:05,650
before I left. But it was always main shareware game, retail

733
00:49:05,690 --> 00:49:08,371
game, main shareware game, retail game, invent new IP,

734
00:49:08,451 --> 00:49:09,852
invent new IP, invent new IP.

735
00:49:11,661 --> 00:49:14,543
we probably wouldn't have done that if I was there because we

736
00:49:14,583 --> 00:49:17,845
needed to create new franchises. That was more interesting than

737
00:49:17,925 --> 00:49:20,927
living inside of our franchise for a long period of time. If it

738
00:49:20,967 --> 00:49:23,929
was a game that was a service-based game that was

739
00:49:24,149 --> 00:49:27,071
operational every day, yes, I could live inside of that for a

740
00:49:27,091 --> 00:49:31,434
long time. But we weren't making those back then. And probably

741
00:49:31,955 --> 00:49:35,477
wouldn't have personally wanted to make a Doom 3 back then. That's

742
00:49:35,497 --> 00:49:36,138
why we made Quake.

743
00:49:37,155 --> 00:49:41,616
And so after quake 2, if I was still there, we would have done

744
00:49:41,636 --> 00:49:45,236
a totally different game. So I guess the answer is I wouldn't

745
00:49:45,256 --> 00:49:51,518
have done it. All right. Six more minutes.

746
00:49:51,618 --> 00:49:56,298
Excuse me for my a bit stupid question. But I play games

747
00:49:56,458 --> 00:50:01,960
today, now. And what's your favorite title or genre of

748
00:50:02,820 --> 00:50:05,600
video games now? If it's not a secret.

749
00:50:07,825 --> 00:50:12,468
understand that. What's your favorite genre of video games

750
00:50:12,949 --> 00:50:16,912
now today? What's my favorite game or genre? Yes. Oh, wow.

751
00:50:17,572 --> 00:50:23,217
Favorite genre. Well, I kind of like FPSs. That's kind of

752
00:50:23,317 --> 00:50:29,762
obvious. I also love MMOs. People don't know this, but I

753
00:50:30,282 --> 00:50:34,106
worked on an MMO for four years. Has anyone heard of gazillion

754
00:50:34,126 --> 00:50:34,606
entertainment?

755
00:50:35,766 --> 00:50:39,087
So Gazillion is an MMO company that I founded with two other

756
00:50:39,127 --> 00:50:45,710
people in 2005. And we worked on an MMO that I designed for four

757
00:50:45,750 --> 00:50:48,531
years before we had to stop working on the game. But during

758
00:50:48,571 --> 00:50:53,172
that time, I played World of Warcraft every single day for

759
00:50:53,252 --> 00:50:57,994
five years, six hours minimum, 12 hours minimum on weekends. So

760
00:50:58,034 --> 00:51:03,896
I have thousands of hours in WoW. That's why I love MMOs. So

761
00:51:03,916 --> 00:51:04,656
you got five minutes.

762
00:51:07,894 --> 00:51:11,536
So when you did your original games, we didn't really have the

763
00:51:11,676 --> 00:51:14,398
internet as we know it today, and we didn't have the feedback

764
00:51:14,418 --> 00:51:18,000
cycles on, for instance, books as we have today. We've also

765
00:51:18,040 --> 00:51:20,721
gotten more advanced in our engines, so it's easier to

766
00:51:20,761 --> 00:51:24,884
create books. How has that, how did that, and how has that

767
00:51:24,944 --> 00:51:28,746
influenced game design and the creative process? And do you

768
00:51:28,766 --> 00:51:31,628
think that's, do you think it's a benefit, or do you think it's

769
00:51:32,648 --> 00:51:33,108
a bad thing?

770
00:51:34,257 --> 00:51:38,119
Well, yeah, back then, the only feedback cycles that I had back

771
00:51:38,179 --> 00:51:41,680
then was when I tried to get something published. So I would

772
00:51:41,700 --> 00:51:46,562
have to send my games through the mail, like paper mail, with

773
00:51:46,622 --> 00:51:51,123
a disc and an envelope. And then the editor at a magazine back

774
00:51:51,163 --> 00:51:53,964
when people for some reason typed games in from magazines

775
00:51:54,024 --> 00:51:57,486
in the computer. So I published a bunch of games like that. And

776
00:51:57,566 --> 00:51:59,987
the editors would get the manuscript, they'd get the disc

777
00:52:00,307 --> 00:52:01,487
and the big huge

778
00:52:03,660 --> 00:52:06,522
and the big huge listing, you know, some of the language

779
00:52:06,562 --> 00:52:10,925
listing or whatever, and I would, I would, they would see

780
00:52:10,965 --> 00:52:14,087
that, they would review it and they would send back pages of

781
00:52:14,227 --> 00:52:18,470
little tweaks here and there. Some of them were in the game.

782
00:52:18,510 --> 00:52:21,812
Most of them were in the text of the manuscript. And that was

783
00:52:22,332 --> 00:52:24,754
helpful because that actually, they were usually really good

784
00:52:24,794 --> 00:52:27,175
suggestions. And as we

785
00:52:27,805 --> 00:52:31,187
as we kind of got into the age where people could just like get

786
00:52:31,247 --> 00:52:34,109
online and start posting feedback. We actually had beta

787
00:52:34,129 --> 00:52:37,511
testers we would send our disks in the mail to in the early 90s

788
00:52:38,192 --> 00:52:41,414
and really good feedback because they would find some bugs in our

789
00:52:41,454 --> 00:52:44,515
games that we couldn't ‑‑ that were not obviously crash

790
00:52:44,556 --> 00:52:49,478
bugs or anything, just weird, obscure little things. And so

791
00:52:49,539 --> 00:52:52,480
that was helpful. And then when we actually get to the point

792
00:52:52,520 --> 00:52:55,522
where we're on the Internet, people are just coming up with

793
00:52:55,562 --> 00:52:56,383
really good ideas.

794
00:52:57,230 --> 00:53:03,374
And, you know, there's, you have to like obviously take everything with a grain of salt and you can't read the comments and all that.

795
00:53:03,775 --> 00:53:07,718
You have to, as a game developer, you trust yourself, you trust your design.

796
00:53:11,580 --> 00:53:16,924
And you just kind of have to believe that you're making something that you like.

797
00:53:19,018 --> 00:53:21,559
but you do have to listen to criticism because sometimes

798
00:53:22,059 --> 00:53:25,220
people have a lot of really good stuff to say. So I think

799
00:53:25,481 --> 00:53:28,842
nowadays it's gotten better. Games are getting better.

800
00:53:29,562 --> 00:53:32,103
There's a lot of good feedback out there if you listen to it.

801
00:53:33,304 --> 00:53:35,445
And sometimes the players can be a really good part of the

802
00:53:35,485 --> 00:53:38,986
process of defining where the games are going as you can kind

803
00:53:39,046 --> 00:53:41,647
of see with the way Kickstarter works. There's a lot of

804
00:53:41,687 --> 00:53:45,449
feedback going into Kickstarter campaigns and people going

805
00:53:45,969 --> 00:53:46,249
forward.

806
00:53:50,058 --> 00:53:52,441
I think we'll just do this one more.

807
00:53:53,662 --> 00:53:57,245
What was that?

808
00:53:57,265 --> 00:53:57,445
Okay.

809
00:53:59,507 --> 00:54:02,570
So yeah, I'm just starting out with programming,

810
00:54:02,850 --> 00:54:05,612
well, like two years.

811
00:54:05,632 --> 00:54:07,794
And I'm starting older than you,

812
00:54:08,074 --> 00:54:10,797
so this is kind of like a philosophical question more.

813
00:54:13,019 --> 00:54:15,821
How did you, when you started learning to program,

814
00:54:16,001 --> 00:54:17,603
avoid burnouts, or did you?

815
00:54:18,209 --> 00:54:20,891
did you just program and you just had fun at it?

816
00:54:21,111 --> 00:54:22,052
There was no burnout.

817
00:54:23,153 --> 00:54:25,995
Like I couldn't wait to wait, like in the summer times

818
00:54:26,035 --> 00:54:28,617
when I was going to school, or when I wasn't going to school,

819
00:54:28,798 --> 00:54:32,380
like get out of high school ends and then it's like

820
00:54:32,581 --> 00:54:34,642
at eight o'clock I could wake up and I could code

821
00:54:34,702 --> 00:54:36,424
until two or three in the morning.

822
00:54:37,004 --> 00:54:37,965
I couldn't wait to do that.

823
00:54:38,305 --> 00:54:40,527
I actually used to get mad that I had to go to the bathroom.

824
00:54:41,127 --> 00:54:44,570
So there was no burnout because I was so excited

825
00:54:44,610 --> 00:54:45,351
that every time, you know.

826
00:54:47,472 --> 00:54:50,094
programming that I like to do is I like to see results all the

827
00:54:50,134 --> 00:54:53,215
time. I don't like to build a giant chunk of something that

828
00:54:53,275 --> 00:54:56,697
hopefully will be cool at some point and I'll see it. I like to

829
00:54:56,737 --> 00:55:01,380
see stuff as much as possible. So my iteration time is just

830
00:55:01,520 --> 00:55:04,561
usually a couple lines of code before I look at it again. I

831
00:55:04,781 --> 00:55:08,944
run my code over and over like thousands and thousands of times

832
00:55:08,964 --> 00:55:11,525
I'll write a couple lines. I want to see how it works so I

833
00:55:11,565 --> 00:55:13,886
know what I wrote is not going to turn into this big huge

834
00:55:13,946 --> 00:55:14,567
problem later.

835
00:55:15,566 --> 00:55:19,108
And so I'm always working on getting cool stuff up on the

836
00:55:19,148 --> 00:55:21,329
screen. So I'm always excited the whole time I'm making

837
00:55:21,389 --> 00:55:25,932
something. So burnout is maybe, you know, you need to get

838
00:55:25,992 --> 00:55:29,113
outside and eat and see something other than the

839
00:55:29,133 --> 00:55:34,656
computer screen. But anyway, I really don't burn out that much.

840
00:55:36,197 --> 00:55:42,701
Okay. Yeah, that was the last question. All right. That was

841
00:55:42,741 --> 00:55:43,761
the last question, I believe.

842
00:55:44,801 --> 00:55:50,787
So thanks, everybody, for listening to the story.

