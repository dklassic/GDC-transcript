1
00:00:05,992 --> 00:00:08,613
Thank you all for coming to my talk on Spider-Man.

2
00:00:08,633 --> 00:00:10,194
There's a lot of ground to cover today,

3
00:00:10,214 --> 00:00:11,415
so I'm gonna go really fast.

4
00:00:11,775 --> 00:00:13,136
You will be super stressed out

5
00:00:13,176 --> 00:00:14,917
if you're trying to take pictures of every slide.

6
00:00:15,498 --> 00:00:17,379
Fear not, I will put them at the URL.

7
00:00:17,399 --> 00:00:19,000
Sit back, relax, do not panic.

8
00:00:19,640 --> 00:00:21,001
Also, remember to send in those e-mails

9
00:00:21,021 --> 00:00:22,282
so I can get on a deck of cards.

10
00:00:23,242 --> 00:00:24,863
And if you have anything that beeps, silence it.

11
00:00:25,958 --> 00:00:28,399
Today I'm going to talk about the biggest game we ever made,

12
00:00:28,439 --> 00:00:31,301
our biggest city, our most populous city,

13
00:00:31,321 --> 00:00:33,162
the greatest responsibility we've ever faced.

14
00:00:33,803 --> 00:00:34,903
And, well, you know.

15
00:00:36,345 --> 00:00:39,228
Insomniac Games is two studios, one in California,

16
00:00:39,308 --> 00:00:40,129
one in North Carolina.

17
00:00:40,189 --> 00:00:43,032
We are about 250 people across multiple projects.

18
00:00:43,712 --> 00:00:45,754
Spider-Man took us three years to make.

19
00:00:46,455 --> 00:00:49,498
The engine we used began life more or less on Fuse.

20
00:00:50,559 --> 00:00:52,681
It has been used on two open world games, Sunset

21
00:00:52,781 --> 00:00:54,022
and Marvel's Spider-Man.

22
00:00:54,082 --> 00:00:57,065
But one of them is a much more open world than the other.

23
00:00:57,706 --> 00:01:01,909
Our Marvel's Manhattan is about five and a half kilometers from north to south.

24
00:01:02,850 --> 00:01:04,091
And that's not the only thing that's bigger.

25
00:01:04,432 --> 00:01:06,593
Basically everything was bigger about Marvel's Spider-Man.

26
00:01:07,374 --> 00:01:10,797
Our source assets, about 3.3 terabytes, 335 gigabytes of textures, 151 gigabytes of models,

27
00:01:10,837 --> 00:01:11,838
150 megs of source code, somehow.

28
00:01:11,858 --> 00:01:13,219
And that is several times larger than Sunset Overdrive.

29
00:01:22,928 --> 00:01:25,230
So today I'm going to break down one frame for you

30
00:01:25,470 --> 00:01:28,994
I'm going to talk about how we built the city how we stream the city how we fit it on disk how we fill the

31
00:01:29,014 --> 00:01:34,019
Street something else best place to start at the beginning. I'm sorry the whole story would take forever to get through

32
00:01:34,039 --> 00:01:35,280
So I'm just gonna talk about these five rigs

33
00:01:35,320 --> 00:01:39,004
We stepped on and the best place to start is at the beginning. So three two one

34
00:01:56,895 --> 00:01:57,965
All right, let's break down a frame.

35
00:01:59,558 --> 00:02:01,460
30 frames a second, 33 milliseconds a frame.

36
00:02:01,800 --> 00:02:04,242
PlayStation 4 has six CPU cores, so we have a main thread,

37
00:02:04,282 --> 00:02:05,363
a render thread, and four workers.

38
00:02:05,383 --> 00:02:06,884
We render a frame behind the CPU.

39
00:02:06,944 --> 00:02:07,765
Of course, I'm lying.

40
00:02:08,225 --> 00:02:10,247
We can share half of the CPU with the operating system.

41
00:02:10,287 --> 00:02:11,208
We use that for the loader.

42
00:02:11,908 --> 00:02:13,770
And we render more like one and a third frames

43
00:02:13,830 --> 00:02:15,391
behind the sim because we do our post-processing

44
00:02:15,431 --> 00:02:16,192
at the start of the frame.

45
00:02:16,952 --> 00:02:17,473
I'll get back to it.

46
00:02:18,233 --> 00:02:19,775
And instead of having four workers,

47
00:02:19,795 --> 00:02:23,137
we actually have three tiers of priority times four workers.

48
00:02:23,177 --> 00:02:24,759
And we also have audio on its own threads,

49
00:02:24,819 --> 00:02:26,120
which we let run wherever it needs to

50
00:02:26,160 --> 00:02:28,502
because it needs to interrupt things or else it pops.

51
00:02:29,182 --> 00:02:30,884
Here's our frame, 33 milliseconds.

52
00:02:30,944 --> 00:02:32,366
The top one is the main thread.

53
00:02:32,406 --> 00:02:33,867
The second one is the render thread.

54
00:02:34,228 --> 00:02:37,091
The bottom two are a low and high priority worker thread

55
00:02:37,111 --> 00:02:39,153
that share the same CPU.

56
00:02:39,273 --> 00:02:41,055
And sorry.

57
00:02:46,175 --> 00:02:47,036
And let's start with the main thread.

58
00:02:47,056 --> 00:02:48,857
So the first thing that the main thread does

59
00:02:48,957 --> 00:02:50,738
for about two to five milliseconds a frame

60
00:02:51,158 --> 00:02:52,019
is deal with streaming.

61
00:02:52,439 --> 00:02:54,300
We are either loading assets or getting rid of assets

62
00:02:54,340 --> 00:02:56,582
or initializing assets or like spawning actors

63
00:02:56,602 --> 00:02:57,422
or getting rid of actors.

64
00:02:57,442 --> 00:02:58,623
We're always doing something because

65
00:02:59,263 --> 00:03:01,345
spawning everything that needs to be active

66
00:03:01,365 --> 00:03:03,886
when you come into a block takes many, many milliseconds.

67
00:03:03,946 --> 00:03:05,047
It's too much to do in one frame.

68
00:03:05,487 --> 00:03:07,148
So we just amortize that work.

69
00:03:07,749 --> 00:03:09,129
Also, I learned yesterday that God of War people

70
00:03:09,169 --> 00:03:10,450
have a very interesting way of dealing with this.

71
00:03:10,470 --> 00:03:11,751
So you should go look at their talk in the vault.

72
00:03:11,791 --> 00:03:13,272
It's the pipeline one, I think it's called.

73
00:03:14,273 --> 00:03:17,174
We spent about 10 milliseconds on gameplay logic

74
00:03:17,214 --> 00:03:18,495
spread across five threads.

75
00:03:19,356 --> 00:03:22,658
Spent about six milliseconds on physics and audio,

76
00:03:22,718 --> 00:03:23,919
also across multiple threads.

77
00:03:24,719 --> 00:03:27,221
The end of the frame on the main thread

78
00:03:27,301 --> 00:03:29,262
is taken up with making stuff ready for the render thread

79
00:03:29,282 --> 00:03:30,223
to draw up the next frame.

80
00:03:30,263 --> 00:03:31,404
So we have like a double buffering

81
00:03:31,424 --> 00:03:33,705
where we copy the state of the scene out for it to draw.

82
00:03:34,145 --> 00:03:35,907
We also do like our last skinning

83
00:03:35,947 --> 00:03:37,207
and our occlusion at this point.

84
00:03:38,088 --> 00:03:40,489
RenderThread picks up all that buffer from the previous frame

85
00:03:40,629 --> 00:03:43,290
and basically submits draw calls as fast as it can,

86
00:03:44,091 --> 00:03:46,152
renders the models, the shadows, all that thing,

87
00:03:47,032 --> 00:03:51,054
spends about six milliseconds on GUI because scale form.

88
00:03:53,055 --> 00:03:55,416
And then if it has any time left over at the end of the frame,

89
00:03:56,096 --> 00:03:58,457
it joins in on the workers, just does occlusion

90
00:03:58,477 --> 00:03:59,078
like anything else.

91
00:04:00,338 --> 00:04:03,544
Obviously, on some frames it has more leftover time than on other frames.

92
00:04:04,366 --> 00:04:07,292
Here's all of our other threads in priority order.

93
00:04:07,412 --> 00:04:08,714
Audio gets first crack, of course.

94
00:04:11,694 --> 00:04:14,256
We have a high priority and a low priority tier on our workers.

95
00:04:15,297 --> 00:04:20,621
The reason for that is we have a bunch of jobs that take a long time but can start early.

96
00:04:21,121 --> 00:04:25,104
But then while they're running, occasionally urgent things need to step in and interrupt

97
00:04:25,144 --> 00:04:25,264
them.

98
00:04:25,304 --> 00:04:28,386
For example, during gameplay, there are some skeletal animation that we have to do right

99
00:04:28,406 --> 00:04:31,568
away because if it's like a locator at the end of the hand of somebody who has a gun

100
00:04:31,588 --> 00:04:31,969
or something.

101
00:04:32,649 --> 00:04:34,632
So if we use a cooperative multitasking model,

102
00:04:34,652 --> 00:04:35,773
it would be this big palaver where

103
00:04:35,793 --> 00:04:37,815
we have to cut the big job up into little pieces

104
00:04:37,835 --> 00:04:39,057
and do all the synchronization.

105
00:04:39,677 --> 00:04:41,179
But by simply having a high priority

106
00:04:41,199 --> 00:04:42,661
tier and a low priority tier of threads,

107
00:04:42,681 --> 00:04:45,444
the process scheduler does the work for us.

108
00:04:45,464 --> 00:04:46,665
Let's skip ahead.

109
00:04:49,367 --> 00:04:53,211
So, I'm whipping through this, but when you go back and see it on the vault, you tech

110
00:04:53,251 --> 00:04:54,952
vampires can see all of our timings and numbers.

111
00:04:55,893 --> 00:04:58,155
I.O. is always ready to run.

112
00:04:58,196 --> 00:04:59,657
It's waiting for bytes to come off the disk.

113
00:04:59,817 --> 00:05:01,919
As they come in, it decompresses them as fast as it can.

114
00:05:02,039 --> 00:05:02,860
Once they're ready, they're ready.

115
00:05:03,460 --> 00:05:04,981
It sends it off to the main thread to initialize.

116
00:05:05,621 --> 00:05:07,422
It's a best effort, and we just deal with stuff

117
00:05:07,702 --> 00:05:09,122
loading at variable times.

118
00:05:09,662 --> 00:05:11,423
All right, what about that additional third of a frame

119
00:05:11,463 --> 00:05:11,803
behind?

120
00:05:12,243 --> 00:05:16,024
So like I said, the main thread ends its frame

121
00:05:16,064 --> 00:05:17,985
by submitting the scene over to the render thread, which

122
00:05:18,025 --> 00:05:18,405
draws it.

123
00:05:18,865 --> 00:05:21,146
The GPU executes those calls as they come in.

124
00:05:21,726 --> 00:05:24,487
At the end of its frame, it says, I'm done rendering models,

125
00:05:24,627 --> 00:05:27,148
meshes, textures, anything that relies on an asset.

126
00:05:27,968 --> 00:05:29,869
So the main thread can go ahead and unload all that stuff.

127
00:05:30,855 --> 00:05:32,556
which means there's a whole bunch of churn

128
00:05:32,616 --> 00:05:35,137
at the Asset Heap at the beginning of the frame.

129
00:05:35,237 --> 00:05:37,297
Like, we're moving things around, getting rid of things.

130
00:05:37,698 --> 00:05:39,078
So it's not safe for the render thread

131
00:05:39,118 --> 00:05:40,378
to start issuing draw calls

132
00:05:40,418 --> 00:05:42,139
in anything that might touch an Asset,

133
00:05:42,159 --> 00:05:43,659
because those pointers might invalidate.

134
00:05:44,060 --> 00:05:46,140
So we had this big bubble on the GPU

135
00:05:46,580 --> 00:05:48,241
for a significant part of the project

136
00:05:48,321 --> 00:05:50,382
until suddenly somebody at Spark noticed,

137
00:05:50,562 --> 00:05:52,142
well, there is some work that the GPU can do

138
00:05:52,202 --> 00:05:54,603
that doesn't depend on Meshes or Models or Textures,

139
00:05:54,683 --> 00:05:56,523
just on the pixels already on the screen.

140
00:05:57,084 --> 00:05:58,944
And of course, that's post-processing and tone mapping.

141
00:05:59,464 --> 00:05:59,584
So...

142
00:06:00,545 --> 00:06:02,786
The GPU is ending its frame when the CPU is beginning it.

143
00:06:03,046 --> 00:06:04,086
That's like color correction.

144
00:06:05,047 --> 00:06:06,807
Let's look at the GPU frame in Razor.

145
00:06:07,308 --> 00:06:08,588
We use a deferred rendering model.

146
00:06:08,608 --> 00:06:10,409
That means we put the polys up in the buffer

147
00:06:10,429 --> 00:06:11,689
and then go around and light them later.

148
00:06:12,430 --> 00:06:14,671
I've mixed up the pixel shaders and the compute shaders

149
00:06:14,771 --> 00:06:16,611
in this graphic because we don't really distinguish them.

150
00:06:16,631 --> 00:06:18,752
They're both small programs that run in the GPU

151
00:06:18,792 --> 00:06:19,372
and make graphics.

152
00:06:19,452 --> 00:06:19,993
What's the difference?

153
00:06:20,573 --> 00:06:22,054
On the asynchronous compute pipeline,

154
00:06:22,495 --> 00:06:24,497
the first half of the frame we do our water simulation,

155
00:06:24,577 --> 00:06:26,138
which is fast Fourier, it is like,

156
00:06:26,378 --> 00:06:27,700
our waves are actually waves,

157
00:06:28,440 --> 00:06:31,003
and screen space reflection and ambient occlusion

158
00:06:31,063 --> 00:06:32,644
happens like vaguely somewhere

159
00:06:32,664 --> 00:06:33,705
in the second half of the frame.

160
00:06:34,185 --> 00:06:34,846
Why those things?

161
00:06:35,746 --> 00:06:37,827
So on our last game, global illumination

162
00:06:37,887 --> 00:06:38,828
ran on async compute.

163
00:06:38,948 --> 00:06:41,049
And async compute is this miracle thing, right?

164
00:06:41,069 --> 00:06:41,850
It's zero cost.

165
00:06:41,870 --> 00:06:42,930
Stuff just runs in the background.

166
00:06:42,950 --> 00:06:45,612
You don't have to worry about it until it doesn't fit anymore.

167
00:06:45,652 --> 00:06:46,833
And then all of a sudden, there is a cost,

168
00:06:46,853 --> 00:06:49,234
because you're synchronizing on this asynchronous thing.

169
00:06:49,975 --> 00:06:52,236
So that got too big, so we moved it over

170
00:06:52,276 --> 00:06:54,378
to the regular compute pipeline, which

171
00:06:54,418 --> 00:06:57,279
made room for reflection and ambient occlusion.

172
00:06:57,359 --> 00:06:57,960
Why those things?

173
00:06:58,380 --> 00:06:59,721
They happen to be the things that fit.

174
00:06:59,861 --> 00:07:00,781
It's just a juggling act.

175
00:07:02,829 --> 00:07:04,150
Now, I'm showing you the end product here,

176
00:07:04,210 --> 00:07:06,993
but we were way over frame for a long time.

177
00:07:07,474 --> 00:07:10,117
And for once, I don't have any fancy optimization tricks,

178
00:07:10,137 --> 00:07:11,919
because we did them all on the last project.

179
00:07:11,979 --> 00:07:15,222
So this was just a long slog of going through every component

180
00:07:15,262 --> 00:07:17,625
and making it better, doing the micro-optimizations,

181
00:07:18,365 --> 00:07:20,187
most importantly, trying to make things more concurrent.

182
00:07:20,227 --> 00:07:21,449
We had a lot of concurrency before,

183
00:07:21,509 --> 00:07:22,210
but there was locking.

184
00:07:22,250 --> 00:07:22,950
It wasn't efficient.

185
00:07:23,411 --> 00:07:24,011
We made it better.

186
00:07:24,872 --> 00:07:26,573
Concurrency is hard in our engine.

187
00:07:27,073 --> 00:07:28,714
Creating actors isn't thread-safe for us.

188
00:07:29,114 --> 00:07:30,795
Creating components isn't thread-safe for us.

189
00:07:30,815 --> 00:07:32,696
Creating event handlers isn't thread-safe for us.

190
00:07:33,176 --> 00:07:33,976
Allocating memories.

191
00:07:34,456 --> 00:07:36,757
Also, we have a batch component update model,

192
00:07:36,797 --> 00:07:40,239
which means that we do all the animation

193
00:07:40,259 --> 00:07:42,240
components in the world, and then all the A components

194
00:07:42,260 --> 00:07:43,880
in the world, and then all the movers in the world,

195
00:07:43,900 --> 00:07:44,981
and then all the sound in the world.

196
00:07:45,521 --> 00:07:47,742
So we have a really good way of saying which classes

197
00:07:47,782 --> 00:07:49,902
of component come after which other classes.

198
00:07:49,922 --> 00:07:52,183
So we can say that movers always come after AI.

199
00:07:52,803 --> 00:07:55,844
But we don't have a good way of ordering individual actors

200
00:07:55,864 --> 00:07:56,884
within that component class.

201
00:07:56,924 --> 00:07:59,845
So if two AIs are running at the same time

202
00:08:00,365 --> 00:08:02,526
and they're trying to read data on each other's AI components,

203
00:08:02,546 --> 00:08:03,526
that data may be changing.

204
00:08:03,906 --> 00:08:05,287
If they're both moving, then they literally

205
00:08:05,327 --> 00:08:06,007
step on each other.

206
00:08:06,847 --> 00:08:09,508
So in those cases, we couldn't fend them out.

207
00:08:09,808 --> 00:08:10,008
But.

208
00:08:13,017 --> 00:08:16,318
If we had components that didn't touch other component classes,

209
00:08:16,698 --> 00:08:19,199
we could run all of the pedestrian components

210
00:08:19,239 --> 00:08:21,380
in one thread while we ran all of the sound components

211
00:08:21,400 --> 00:08:22,941
in another thread, for example.

212
00:08:23,281 --> 00:08:25,562
Those jobs would be huge, but they would be huge in parallel.

213
00:08:25,902 --> 00:08:27,183
In fact, for some of our components,

214
00:08:27,203 --> 00:08:28,864
we said, do they need to be components at all?

215
00:08:29,564 --> 00:08:31,325
A bunch of them, like the pedestrians in particular,

216
00:08:31,365 --> 00:08:33,706
we just turned them into this big global system.

217
00:08:33,746 --> 00:08:34,987
We took that work away from the actor

218
00:08:35,267 --> 00:08:37,228
because then it can have a very big, simple for loop.

219
00:08:37,248 --> 00:08:38,388
And it just does all the things.

220
00:08:38,428 --> 00:08:39,849
And there's no stepping on each other.

221
00:08:39,869 --> 00:08:40,649
And there's no.

222
00:08:41,850 --> 00:08:42,834
There's no ordering problems.

223
00:08:43,336 --> 00:08:45,003
Again, it ends up being this gigantic job,

224
00:08:45,043 --> 00:08:46,890
but four gigantic jobs at the same time.

225
00:08:48,291 --> 00:08:49,592
So, that's the TLDR.

226
00:08:50,372 --> 00:08:53,433
In addition to all that, we had to do level of detail

227
00:08:53,613 --> 00:08:54,414
very aggressively.

228
00:08:54,934 --> 00:08:56,795
I don't just mean geometric level of detail,

229
00:08:56,915 --> 00:08:58,255
although that matters for skinning,

230
00:08:58,576 --> 00:09:00,917
but also just things that are farther away.

231
00:09:00,957 --> 00:09:03,118
We had to go through a lot of work to make them think less,

232
00:09:03,218 --> 00:09:05,659
tick less, shut stuff off as soon as it's out of camera.

233
00:09:06,519 --> 00:09:08,280
On the other hand, this old model

234
00:09:08,300 --> 00:09:10,501
that we've been using for years of the main thread

235
00:09:10,541 --> 00:09:12,722
and the render thread in workers, it's fine.

236
00:09:12,962 --> 00:09:14,242
It's fine. It's still good, right?

237
00:09:14,302 --> 00:09:15,843
We come to the first moral of the story.

238
00:09:15,923 --> 00:09:16,643
Simple is good.

239
00:09:18,142 --> 00:09:19,903
I mean, we could have done the cooperative multitasking.

240
00:09:20,043 --> 00:09:21,984
It really would have just complicated things.

241
00:09:22,624 --> 00:09:24,485
Also, the LOD thing, before I leave it,

242
00:09:24,505 --> 00:09:26,727
it was a continuing struggle for us

243
00:09:26,767 --> 00:09:27,927
because the game is so big,

244
00:09:28,328 --> 00:09:29,528
stuff keeps falling through the cracks.

245
00:09:29,909 --> 00:09:32,270
For example, here's the body on Dr. Morgan Michaels.

246
00:09:32,710 --> 00:09:34,171
On the left, we have the cinematic asset,

247
00:09:34,191 --> 00:09:35,452
which is 90,000 triangles.

248
00:09:35,552 --> 00:09:37,053
On the right is the gameplay asset,

249
00:09:37,573 --> 00:09:38,774
which is 5,000 triangles.

250
00:09:39,174 --> 00:09:40,415
Can you tell the difference at this distance?

251
00:09:41,075 --> 00:09:42,636
All right, there is a gameplay scene that uses him.

252
00:09:42,976 --> 00:09:44,918
Would you like to guess which LOD we used for?

253
00:09:46,180 --> 00:09:49,882
a while. Yeah, there he is in all his 90,000 polygon glory.

254
00:09:51,162 --> 00:09:55,204
Obviously the fix for this is simple once we found it, right? We just fixed the LOD

255
00:09:55,224 --> 00:09:57,604
distance. But this happened over and over again.

256
00:09:58,065 --> 00:10:01,746
Somebody modeled cars that had these beautifully detailed motors and animation

257
00:10:01,806 --> 00:10:03,287
on them. The hood never opens.

258
00:10:04,047 --> 00:10:04,227
So...

259
00:10:06,988 --> 00:10:07,288
I'm like,

260
00:10:07,808 --> 00:10:10,709
there's no lesson here other than just that it's a continual struggle and you have to

261
00:10:10,749 --> 00:10:11,409
stay on top of it.

262
00:10:12,030 --> 00:10:13,670
Especially for a project this big. Let's keep going.

263
00:10:23,991 --> 00:10:27,777
All right, we built this city on mostly Houdini.

264
00:10:28,378 --> 00:10:31,624
Manhattan's pretty big, and our team was not that much bigger.

265
00:10:32,445 --> 00:10:35,951
So for the details, go see Santiago's talk seven hours ago.

266
00:10:35,971 --> 00:10:37,393
Well, go find it on the vault.

267
00:10:39,116 --> 00:10:43,260
The overview is we divided Manhattan into districts, neighborhoods, each of which was

268
00:10:43,320 --> 00:10:47,685
tiles which are like a couple of city blocks and every one of those are stacked up zones.

269
00:10:47,705 --> 00:10:49,187
A zone is just our atom of streaming.

270
00:10:49,227 --> 00:10:51,449
It's a list of seen objects and the assets that go with them.

271
00:10:52,130 --> 00:10:56,175
The TLDR is that Houdini made a whole bunch of stuff relevant to this talk are the streets,

272
00:10:56,335 --> 00:10:57,957
the ground, and the buildings.

273
00:10:59,074 --> 00:11:01,915
The thing is, after Houdini exported the final art

274
00:11:01,955 --> 00:11:03,655
for the building, well, its notion of the final art

275
00:11:03,675 --> 00:11:04,635
for the buildings, we then, of course,

276
00:11:04,675 --> 00:11:05,656
have to go and do it by hand,

277
00:11:05,676 --> 00:11:07,956
because you can never just procedurally adjust everything,

278
00:11:07,976 --> 00:11:09,857
I mean, you can never count on the procedurality.

279
00:11:10,517 --> 00:11:13,218
However, we also used Houdini to make the markup

280
00:11:13,258 --> 00:11:14,858
for a lot of stuff, the navigation,

281
00:11:14,958 --> 00:11:16,438
in particular, the traversal markup,

282
00:11:16,478 --> 00:11:18,239
like the swing points and the ledge grabs

283
00:11:18,279 --> 00:11:20,099
and all that stuff, and that depends

284
00:11:20,219 --> 00:11:22,420
on the final position of the geometry, right?

285
00:11:22,460 --> 00:11:24,420
Like the artists go in and they push around a skylight,

286
00:11:24,520 --> 00:11:25,641
and now we have to fix that markup.

287
00:11:26,421 --> 00:11:29,004
So we needed a process where we could procedurally make art,

288
00:11:29,704 --> 00:11:30,985
edit it by hand in the level editor,

289
00:11:31,065 --> 00:11:33,228
and then feed it back into Houdini for it

290
00:11:33,528 --> 00:11:34,729
to do the markup.

291
00:11:35,229 --> 00:11:36,491
Here we got lucky.

292
00:11:37,351 --> 00:11:39,874
Our common data interchange format

293
00:11:39,894 --> 00:11:43,137
for levels and entities and a bunch of stuff is JSON.

294
00:11:43,597 --> 00:11:44,098
Why JSON?

295
00:11:44,138 --> 00:11:45,920
Because a few years ago, we had this dream

296
00:11:46,300 --> 00:11:47,941
of getting into web development.

297
00:11:48,222 --> 00:11:48,762
And we decided.

298
00:11:50,324 --> 00:11:57,211
We decided to try to write our tools, our level editor in particular, as Chrome apps.

299
00:11:58,012 --> 00:12:01,496
We backed off of that idea for reasons that you can see in Andreas' talk in the vault

300
00:12:01,636 --> 00:12:06,581
and Ron's talk tomorrow, but the short of it is that because all those things were written

301
00:12:06,621 --> 00:12:09,224
in JavaScript, JSON was a natural format and we stuck with that.

302
00:12:09,925 --> 00:12:11,505
For example, this means that Houdini

303
00:12:11,525 --> 00:12:14,146
doesn't have to emit any kind of complicated binary asset.

304
00:12:14,186 --> 00:12:15,846
We don't have to teach it how to do anything complicated.

305
00:12:15,866 --> 00:12:18,267
It just emits prefabs as JSON objects.

306
00:12:18,287 --> 00:12:20,387
And for us, a prefab is just this structure

307
00:12:20,428 --> 00:12:21,868
that we copy and paste into the level

308
00:12:22,328 --> 00:12:23,308
automatically in the builder.

309
00:12:23,828 --> 00:12:27,549
And our prefabs contain actors, and models, and decals,

310
00:12:27,729 --> 00:12:30,470
and other prefabs, all of which are other JSON objects.

311
00:12:31,190 --> 00:12:35,012
So this was super useful for the tech artists

312
00:12:35,152 --> 00:12:36,412
and for custom gameplay systems.

313
00:12:36,993 --> 00:12:39,353
Every scripting language can read JSON without trouble.

314
00:12:39,834 --> 00:12:42,195
So we kind of lucked into this very easy way

315
00:12:42,235 --> 00:12:43,835
to move things between different kinds of tools.

316
00:12:44,395 --> 00:12:48,037
Also, it let us write new builders for new kinds of asset

317
00:12:48,077 --> 00:12:48,697
pretty easily.

318
00:12:49,517 --> 00:12:52,318
Crime, like mugging, it's a first class asset in our game.

319
00:12:52,538 --> 00:12:53,879
because Houdini could make that prefab

320
00:12:53,899 --> 00:12:55,701
and then we had a special crime builder

321
00:12:55,741 --> 00:12:57,402
that went through all the crimes in the world

322
00:12:57,762 --> 00:12:59,744
and then offline computed the data structure

323
00:12:59,764 --> 00:13:01,065
with a tree that knows how to spawn them

324
00:13:01,105 --> 00:13:03,306
under what conditions so that the crime system

325
00:13:03,346 --> 00:13:05,108
in the game didn't have to go digging through the level

326
00:13:05,168 --> 00:13:06,389
and enumerating all the volumes.

327
00:13:07,049 --> 00:13:08,270
Like that was a small optimization,

328
00:13:08,310 --> 00:13:08,870
but the point is,

329
00:13:09,951 --> 00:13:11,732
writing these kinds of custom gameplay builders

330
00:13:12,072 --> 00:13:15,093
for custom things specific to this game was super handy.

331
00:13:15,833 --> 00:13:17,113
Some numbers about our Houdini.

332
00:13:17,613 --> 00:13:19,874
It takes like seven hours to generate just the ground.

333
00:13:20,514 --> 00:13:22,615
Every one of the overlays, like the traffic, the props,

334
00:13:22,635 --> 00:13:24,516
the crimes, the vignettes, all that, about 40 minutes each.

335
00:13:24,616 --> 00:13:26,776
Better part of the day to regen the city if we have to,

336
00:13:26,856 --> 00:13:27,657
not counting lighting.

337
00:13:28,437 --> 00:13:29,337
We have 8,300 buildings, 350 storefronts,

338
00:13:29,377 --> 00:13:30,117
3,000 random crimes, 3,000 vignettes.

339
00:13:30,137 --> 00:13:31,458
That's stuff like traffic accidents.

340
00:13:31,518 --> 00:13:32,658
544 roads and 1,200 alleys, which of course,

341
00:13:39,440 --> 00:13:42,723
we need in a game because we have to have crime-infested alleys for crime to take place

342
00:13:42,783 --> 00:13:48,828
in, but by contrast, the real Manhattan has one, two, three, four, five, six, seven. Seven

343
00:13:49,008 --> 00:13:54,493
alleys in lower Manhattan. If you have seen movies shot in New York and ever wondered

344
00:13:54,533 --> 00:13:58,976
like, why do alleys in New York look the same? It's the same alley, Cortlandt Alley in Chinatown.

345
00:13:58,996 --> 00:14:02,860
That's the only one you can film in. TLZR.

346
00:14:04,618 --> 00:14:07,220
This whole shtick of creating procedural content,

347
00:14:07,320 --> 00:14:09,442
editing it by hand, and loading it back in, it's fine.

348
00:14:10,143 --> 00:14:12,525
It's cyclic and annoying, but because we

349
00:14:12,545 --> 00:14:14,367
had this convenient format, it was much less annoying

350
00:14:14,387 --> 00:14:14,927
than it could have been.

351
00:14:15,047 --> 00:14:16,709
And then go see Santiago's talk for the rest,

352
00:14:16,729 --> 00:14:17,650
because we've got a lot of stuff to do.

353
00:14:18,773 --> 00:14:21,535
We come to moral number two, fit the tech to the context.

354
00:14:21,915 --> 00:14:23,896
Because we control the format of all of our data,

355
00:14:24,496 --> 00:14:26,317
we were able to create custom gameplay builders

356
00:14:26,357 --> 00:14:28,479
for stuff that was super specific to this game,

357
00:14:28,559 --> 00:14:31,801
like I said, crimes, traffic, the ambient vermin system.

358
00:14:32,421 --> 00:14:35,063
All of this was stuff that is specific to making

359
00:14:35,103 --> 00:14:37,564
a game set in Manhattan, but it was cool.

360
00:14:39,025 --> 00:14:40,146
Oh, also if you care about the art,

361
00:14:40,186 --> 00:14:41,587
go see Hickey's talk tomorrow.

362
00:14:42,227 --> 00:14:42,687
Let's keep going.

363
00:14:42,727 --> 00:14:47,550
♪ Fire, fire ♪

364
00:14:47,590 --> 00:14:48,411
All right, let's beat this up a bit.

365
00:14:50,650 --> 00:14:51,074
All right, so.

366
00:14:51,979 --> 00:14:54,000
We go at breakneck pace through the city,

367
00:14:54,100 --> 00:14:55,922
and that's a lot to stream.

368
00:14:56,442 --> 00:14:58,704
So let's talk about our streaming technology.

369
00:14:58,784 --> 00:15:01,166
Actually, I've done that in this room before.

370
00:15:01,186 --> 00:15:03,028
So you can go take a look at that.

371
00:15:03,768 --> 00:15:05,530
The gist is that we tessellate the city

372
00:15:05,630 --> 00:15:06,791
into regular polygons.

373
00:15:07,351 --> 00:15:09,153
Regular polygons in a plane, you have three choices,

374
00:15:09,213 --> 00:15:10,494
rectangles, triangles, and hexes.

375
00:15:10,914 --> 00:15:12,375
On Sunset Overdrive, we went with hexes.

376
00:15:13,016 --> 00:15:14,377
Hexes are definitely the right way

377
00:15:14,417 --> 00:15:16,539
to go if you're making a streaming city game.

378
00:15:16,939 --> 00:15:18,560
You definitely don't want to go with a rectangular grid,

379
00:15:18,580 --> 00:15:20,162
because then you end up with these long streets that

380
00:15:20,182 --> 00:15:21,403
are from one side of the city to the other.

381
00:15:21,863 --> 00:15:22,824
And there's nothing including...

382
00:15:24,385 --> 00:15:24,465
Ugh.

383
00:15:25,146 --> 00:15:26,728
Yeah, you know what? It's fine. It's fine.

384
00:15:27,188 --> 00:15:28,209
They were never hexes.

385
00:15:29,090 --> 00:15:30,871
It's just, like, a point and a radius.

386
00:15:30,891 --> 00:15:33,013
And when you're within the radius of the point,

387
00:15:33,554 --> 00:15:35,636
we load all the zones that are associated with that point.

388
00:15:35,856 --> 00:15:38,498
So if you arrange your points like this, it's a hex grid.

389
00:15:38,518 --> 00:15:40,680
You arrange them like this, it's a rectangular grid.

390
00:15:41,261 --> 00:15:41,741
Whatever.

391
00:15:42,102 --> 00:15:43,543
Let's talk about Washington and Mercer.

392
00:15:45,148 --> 00:15:46,949
Here is the ground plane.

393
00:15:47,330 --> 00:15:50,032
We divided the environment art up into multiple zones

394
00:15:50,092 --> 00:15:51,833
on sunset because we had multiple actors working

395
00:15:51,893 --> 00:15:52,694
on them at the same time.

396
00:15:53,154 --> 00:15:54,816
Here, Houdini did the heavy lifting for us,

397
00:15:54,856 --> 00:15:56,197
so all the art's in one zone.

398
00:15:57,378 --> 00:15:59,139
Gameplay zone overlaid on top of that,

399
00:15:59,379 --> 00:16:02,101
mostly navigation and script hooks.

400
00:16:03,122 --> 00:16:05,084
We also have an overlay for stuff that is different

401
00:16:05,164 --> 00:16:07,166
at different times of day or different points in the plot.

402
00:16:07,546 --> 00:16:10,108
So for example, daytime at the beginning of the game,

403
00:16:10,128 --> 00:16:11,189
we have a hot dog cart.

404
00:16:11,709 --> 00:16:13,250
At nighttime, it's a closed hot dog cart.

405
00:16:13,831 --> 00:16:15,951
At the end of the game, it's a post-apocalyptic hot dog cart.

406
00:16:17,272 --> 00:16:19,232
Traffic global zone for the entire city,

407
00:16:19,252 --> 00:16:20,712
because it's less than a megabyte

408
00:16:20,772 --> 00:16:21,793
and might complicate things.

409
00:16:22,553 --> 00:16:24,853
Ditto the pedestrian grid, ditto the pedestrian spawner volumes,

410
00:16:24,873 --> 00:16:25,793
ditto a whole bunch of stuff.

411
00:16:26,734 --> 00:16:31,014
So here's everything that stacks up to make tile M34 go.

412
00:16:31,895 --> 00:16:34,555
So like I said, we decided to build our city on a grid.

413
00:16:35,655 --> 00:16:37,276
Well, no, Alexander Hamilton did,

414
00:16:37,296 --> 00:16:38,216
but that's the city that we have.

415
00:16:39,780 --> 00:16:42,701
So, on a rectangular grid, typically about nine tiles loaded.

416
00:16:42,741 --> 00:16:44,681
The one you're standing on, the eight that are adjacent.

417
00:16:45,201 --> 00:16:46,702
If you're close to a border, it's more like 12.

418
00:16:47,882 --> 00:16:48,982
If you move from one to the other,

419
00:16:49,042 --> 00:16:50,283
three tiles are now adjacent.

420
00:16:50,343 --> 00:16:52,143
Three we can toss overboard, so we load them in.

421
00:16:53,283 --> 00:16:55,764
Move diagonally, it's five and five, still fine.

422
00:16:56,584 --> 00:16:59,005
Missions, random crimes, and basketball games

423
00:16:59,045 --> 00:16:59,725
and stuff like that.

424
00:17:00,285 --> 00:17:02,167
are also zones, the only difference is

425
00:17:02,587 --> 00:17:03,968
the ground tiles load when you're

426
00:17:03,988 --> 00:17:05,049
within a geographical point,

427
00:17:05,670 --> 00:17:07,331
missions load when script tells them to load.

428
00:17:07,851 --> 00:17:09,873
And because of that, they can poke out geographically,

429
00:17:09,913 --> 00:17:12,495
like car chases obviously go right across the city.

430
00:17:13,516 --> 00:17:15,817
Some system we had in Sunset, pretty simple.

431
00:17:16,378 --> 00:17:18,519
We didn't really complicate it, works fine.

432
00:17:19,685 --> 00:17:21,166
Streaming that can keep up with the player

433
00:17:21,346 --> 00:17:23,407
is a much bigger challenge on Spider-Man, though.

434
00:17:23,447 --> 00:17:24,788
So the Sunset Overdrive character

435
00:17:24,848 --> 00:17:28,069
moved at about 30 miles an hour, whereas Spider-Man is possibly

436
00:17:28,089 --> 00:17:29,890
the only human being who can move through Manhattan

437
00:17:29,970 --> 00:17:30,950
at 70 miles an hour.

438
00:17:32,211 --> 00:17:35,952
And the tiles in Marvel's Spider-Man were slightly bigger.

439
00:17:36,432 --> 00:17:37,673
And because we're on rectangles, we

440
00:17:37,713 --> 00:17:39,634
might have to load five instead of three.

441
00:17:39,774 --> 00:17:42,895
OK, so now we can figure out how long do we have to load a tile,

442
00:17:43,235 --> 00:17:44,716
and how many bytes big can the tile be.

443
00:17:45,737 --> 00:17:47,438
32 meters per second, 128 meters by,

444
00:17:47,978 --> 00:17:50,440
gives us a little under a second to load each tile.

445
00:17:50,920 --> 00:17:51,461
It's not a lot.

446
00:17:52,261 --> 00:17:54,123
However, we really only need the three tiles

447
00:17:54,203 --> 00:17:54,983
that are ahead of you.

448
00:17:55,404 --> 00:17:57,225
You're not going to the ones on either side.

449
00:17:57,645 --> 00:17:59,767
And if you decide to turn and go to the ones on either side,

450
00:17:59,807 --> 00:18:01,188
it takes you about a second to do that.

451
00:18:01,268 --> 00:18:03,490
So we have enough time to go and pull the switcheroo.

452
00:18:03,510 --> 00:18:05,291
All right, so we don't have to load five tiles.

453
00:18:05,851 --> 00:18:07,413
We only have to load three.

454
00:18:07,613 --> 00:18:08,674
It's one and a third seconds.

455
00:18:08,814 --> 00:18:09,474
That's more time.

456
00:18:10,335 --> 00:18:12,596
Of course, ground tiles are not the only thing

457
00:18:12,716 --> 00:18:13,596
coming off the disk.

458
00:18:14,097 --> 00:18:14,937
Audio is streaming.

459
00:18:15,357 --> 00:18:16,238
Missions are streaming.

460
00:18:16,938 --> 00:18:18,299
You might be recording a video.

461
00:18:18,359 --> 00:18:20,560
You might be streaming your game up to Twitch.

462
00:18:21,080 --> 00:18:22,281
Also, did you know that you can replace

463
00:18:22,301 --> 00:18:23,482
the hard drive in your PlayStation

464
00:18:23,502 --> 00:18:24,442
without voiding the warranty?

465
00:18:24,802 --> 00:18:25,563
Which is neat, right?

466
00:18:25,603 --> 00:18:26,183
Bigger hard drive.

467
00:18:26,583 --> 00:18:28,444
Some people use not very good hard drives,

468
00:18:28,524 --> 00:18:29,945
so we had to come up with a min spec.

469
00:18:30,045 --> 00:18:31,186
And yada, yada, yada.

470
00:18:33,707 --> 00:18:36,189
The budget we came up with was 20 megabytes per tile.

471
00:18:36,209 --> 00:18:38,331
That's as much as we could confidently stream

472
00:18:38,371 --> 00:18:39,932
with all of the other stuff that was happening.

473
00:18:40,393 --> 00:18:43,175
That includes geometry, terrain, actors, nav, decals, shaders,

474
00:18:43,295 --> 00:18:45,016
and most but not all of the textures.

475
00:18:45,637 --> 00:18:47,519
The very highest tier of textures,

476
00:18:48,139 --> 00:18:49,780
we stream on demand when you get close to them.

477
00:18:49,900 --> 00:18:52,943
In this video, I've replaced the high MIPS with solid red

478
00:18:52,963 --> 00:18:54,064
so you can see them coming in and out.

479
00:18:54,684 --> 00:18:57,086
About 700 megabytes of memory given over to them,

480
00:18:57,427 --> 00:18:58,388
but they're always churning.

481
00:18:58,768 --> 00:18:59,168
It's about 360 textures.

482
00:19:00,940 --> 00:19:03,721
All right, in 2015, we looked at a tile, a random one

483
00:19:03,741 --> 00:19:04,441
in Hell's Kitchen.

484
00:19:05,182 --> 00:19:06,762
By the way, why is Hell's Kitchen always

485
00:19:06,782 --> 00:19:08,523
this crime-infested neighborhood in comic books?

486
00:19:08,543 --> 00:19:09,804
It has not been that way in years.

487
00:19:09,824 --> 00:19:11,404
The worst robbery I've ever seen in Hell's Kitchen

488
00:19:11,444 --> 00:19:13,365
is what Mickey Spillane's bar charges for a martini.

489
00:19:14,146 --> 00:19:15,846
Anyway, I'm kidding.

490
00:19:15,866 --> 00:19:16,687
It's actually very affordable.

491
00:19:17,727 --> 00:19:21,229
28 megabytes was what we had in 2015, which is more than 20.

492
00:19:21,789 --> 00:19:25,471
So we started to ask, well, we don't want to cut content,

493
00:19:25,491 --> 00:19:26,551
because then the game will look grody.

494
00:19:27,311 --> 00:19:28,352
So what else can we postpone?

495
00:19:29,233 --> 00:19:31,434
Because if we load all those 20 megabytes up front,

496
00:19:31,454 --> 00:19:33,996
and then you stop moving, we're wasting bandwidth.

497
00:19:34,096 --> 00:19:34,797
Nothing is coming in.

498
00:19:35,477 --> 00:19:37,318
So do we need all the stuff up front?

499
00:19:37,999 --> 00:19:40,020
Like I said, we have multiple MIPS for every texture,

500
00:19:40,160 --> 00:19:40,641
like everyone.

501
00:19:41,121 --> 00:19:43,082
And we delay the biggest two MIPS.

502
00:19:43,863 --> 00:19:45,844
And we obviously have to have the lowest, the smallest MIPS

503
00:19:46,064 --> 00:19:47,345
loaded in when you come into the tile.

504
00:19:47,365 --> 00:19:49,006
Otherwise, the buildings are all solid color.

505
00:19:49,627 --> 00:19:51,088
But what about the ones in the middle?

506
00:19:52,115 --> 00:19:53,256
Do we really need those right away?

507
00:19:53,736 --> 00:19:55,137
Yeah, it turns out when you're going really fast,

508
00:19:55,197 --> 00:19:56,037
everything is blurry.

509
00:19:56,678 --> 00:19:59,299
So, like, I actually, I took out the middle MIPS

510
00:19:59,499 --> 00:20:00,260
in this screenshot.

511
00:20:00,280 --> 00:20:01,200
Can you even tell the difference?

512
00:20:02,365 --> 00:20:05,205
So that gave us two budgets for the tile, 20 megs up front

513
00:20:05,285 --> 00:20:08,166
and then 20 megs of detail that we load when you're not

514
00:20:08,226 --> 00:20:09,246
going at a breakneck pace.

515
00:20:09,266 --> 00:20:10,666
So when you slow down, if you stop moving,

516
00:20:10,686 --> 00:20:11,626
we pull in all that stuff.

517
00:20:12,706 --> 00:20:15,067
So we introduced this idea in 2016.

518
00:20:15,427 --> 00:20:17,607
But then the next spring, we saw there's

519
00:20:17,627 --> 00:20:19,228
a whole bunch of other detailed stuff

520
00:20:19,728 --> 00:20:21,728
that we can also postpone, like storefronts.

521
00:20:21,948 --> 00:20:24,348
We have these lovingly modeled cafes

522
00:20:24,428 --> 00:20:26,209
with tables and baristas and customers.

523
00:20:26,469 --> 00:20:28,009
You're never going to see it from five stories up.

524
00:20:28,069 --> 00:20:29,709
So we can wait until you're on the ground

525
00:20:29,809 --> 00:20:31,570
and not running around or not swinging around.

526
00:20:32,230 --> 00:20:33,150
to load all that stuff in.

527
00:20:34,031 --> 00:20:36,092
So in this video, on the top left

528
00:20:36,452 --> 00:20:38,013
is our delay loading pipeline.

529
00:20:39,254 --> 00:20:40,955
While I'm swinging at maximum speed,

530
00:20:41,856 --> 00:20:43,597
nothing really comes in because it doesn't have a chance.

531
00:20:44,297 --> 00:20:47,139
But the moment I stop moving, boom,

532
00:20:47,359 --> 00:20:49,420
look at all those textures and potted plants.

533
00:20:49,500 --> 00:20:52,242
It's about 12 megs a second just of delay loaded assets.

534
00:20:53,212 --> 00:20:54,874
So by procrastinating half the tile,

535
00:20:55,475 --> 00:20:57,658
we got our base zone down to 20 megabytes,

536
00:20:57,738 --> 00:20:59,821
mostly by saving space on textures, which gave us

537
00:20:59,881 --> 00:21:02,204
more room for models, materials, and what

538
00:21:02,244 --> 00:21:04,947
we call zone, which is like script and actors and terrain

539
00:21:04,967 --> 00:21:05,368
and collision.

540
00:21:06,959 --> 00:21:10,360
This is another place that our handcrafted, artisanal,

541
00:21:10,480 --> 00:21:11,721
bespoke engine worked for us.

542
00:21:12,181 --> 00:21:13,881
We changed the idea of what a level was

543
00:21:14,001 --> 00:21:15,162
for this specific game.

544
00:21:15,702 --> 00:21:18,163
Manhattan came with a very specific challenge,

545
00:21:18,723 --> 00:21:22,664
and we were able to change the notion of what even loading

546
00:21:22,704 --> 00:21:25,005
means for this specific problem.

547
00:21:25,265 --> 00:21:26,386
And we will probably do something different

548
00:21:26,426 --> 00:21:27,566
for a game that doesn't have this problem.

549
00:21:29,043 --> 00:21:30,223
While I'm talking about streaming,

550
00:21:30,263 --> 00:21:32,524
we originally hoped to have a game with no load times ever.

551
00:21:33,004 --> 00:21:36,086
We could, given this technology, use a bunch of air locking

552
00:21:36,146 --> 00:21:39,007
and movie magic to completely hide transitions,

553
00:21:39,127 --> 00:21:40,848
even for coming from an exterior space

554
00:21:40,928 --> 00:21:42,608
into an interior space that is instanced.

555
00:21:43,149 --> 00:21:45,049
So here's an early example of that, the Fisk mission,

556
00:21:45,109 --> 00:21:47,410
coming in from Broadway, going into an interior tower.

557
00:21:48,831 --> 00:21:49,891
Bottom right's what you see in the game,

558
00:21:50,011 --> 00:21:50,952
pulling the debug camera out.

559
00:21:51,932 --> 00:21:52,412
What are we doing?

560
00:21:53,013 --> 00:21:55,073
Getting rid of that city as fast as we can.

561
00:21:57,280 --> 00:21:58,821
Here comes the Fisk interior.

562
00:21:59,442 --> 00:22:01,403
Twice the size, 100 meters in the sky.

563
00:22:01,423 --> 00:22:02,624
And lock down the airspace.

564
00:22:03,564 --> 00:22:04,185
Yuri, you OK?

565
00:22:04,205 --> 00:22:07,026
If he makes it out of that building, we're going to lose him.

566
00:22:07,046 --> 00:22:08,487
Camera cropping hides the dirty work.

567
00:22:10,869 --> 00:22:11,449
Do your thing.

568
00:22:12,009 --> 00:22:12,250
Yes.

569
00:22:14,191 --> 00:22:15,011
He's the dick, Willie.

570
00:22:15,031 --> 00:22:16,412
Coming into the exterior building.

571
00:22:16,432 --> 00:22:18,133
Heads up.

572
00:22:18,573 --> 00:22:20,495
All units, head down.

573
00:22:20,515 --> 00:22:21,615
Heads up.

574
00:22:21,635 --> 00:22:22,556
Lighting change.

575
00:22:22,576 --> 00:22:24,897
Hey, where are you going?

576
00:22:30,804 --> 00:22:31,524
And we're inside.

577
00:22:31,784 --> 00:22:32,505
Yeah, seamless, right?

578
00:22:32,585 --> 00:22:33,046
Really cool.

579
00:22:33,086 --> 00:22:34,227
Took us a month to do.

580
00:22:34,287 --> 00:22:35,688
If we did everything like this, we would still

581
00:22:35,708 --> 00:22:36,409
be making the game.

582
00:22:37,210 --> 00:22:39,372
So we bit the bullet and said load screens.

583
00:22:42,655 --> 00:22:44,697
Oh, also, if you've wondered why we have some unskippable

584
00:22:44,717 --> 00:22:46,118
cut scenes, they're not cut scenes.

585
00:22:46,138 --> 00:22:47,079
They're animated load screens.

586
00:22:49,736 --> 00:22:52,780
So, that's what it took to fit into the streaming budget, but getting it onto disk was another

587
00:22:52,820 --> 00:22:53,180
story.

588
00:22:53,701 --> 00:22:57,226
Like I said, Marvel's Manhattan, a little bit more than six times bigger than Sunset

589
00:22:57,246 --> 00:22:57,507
City.

590
00:22:58,107 --> 00:22:59,710
Sunset Overdrive came on one disk.

591
00:22:59,770 --> 00:23:03,395
Does that mean that we would need to come on, like that's a really big box to take home.

592
00:23:04,416 --> 00:23:06,637
So let's back off, let's look at one of the technologies

593
00:23:06,657 --> 00:23:09,178
that we used on Sunset to speed up loads,

594
00:23:09,198 --> 00:23:10,059
which is duplication.

595
00:23:10,559 --> 00:23:13,180
We relied really heavy on duplicating assets.

596
00:23:13,821 --> 00:23:14,981
And the reason for that is a disk

597
00:23:15,021 --> 00:23:17,002
is a spinning mechanical device of momentum.

598
00:23:17,102 --> 00:23:18,983
And the best way to get good bandwidth out of that

599
00:23:19,423 --> 00:23:21,544
is to have a consistent read size and never seek,

600
00:23:21,584 --> 00:23:23,005
never move that head back and forth.

601
00:23:23,565 --> 00:23:25,866
It is often better to, if you have a piece of data

602
00:23:25,886 --> 00:23:27,767
you don't need, sandwich between two pieces of data

603
00:23:27,787 --> 00:23:30,088
that you do need, to read over the thing you don't need

604
00:23:30,108 --> 00:23:31,669
and then throw it out than it is to seek.

605
00:23:32,701 --> 00:23:36,382
So very simple, we can find all the assets that a zone needs.

606
00:23:36,542 --> 00:23:39,763
And then if asset B is needed by both zones X and Y,

607
00:23:40,223 --> 00:23:42,163
we just put it on the disk twice because we

608
00:23:42,183 --> 00:23:43,303
didn't know which one you'd load first,

609
00:23:43,363 --> 00:23:45,164
and we didn't want to move that head back and forth.

610
00:23:45,844 --> 00:23:46,504
So here's where we were in 2017.

611
00:23:46,584 --> 00:23:49,225
We decided to finally measure how big our package was.

612
00:23:50,305 --> 00:23:52,686
44 gigabytes, which is about 90% of a Blu-ray,

613
00:23:52,766 --> 00:23:53,966
and we had not yet made 90% of the game.

614
00:23:56,027 --> 00:23:56,868
Where does this number come from?

615
00:23:57,049 --> 00:23:59,153
Well, we've got 700 tiles in the city.

616
00:23:59,193 --> 00:24:01,017
That's not even counting the interiors and the raft.

617
00:24:01,819 --> 00:24:03,622
And 40 megabytes a tile, like we just said.

618
00:24:04,003 --> 00:24:04,664
So that works out to 28 gigs.

619
00:24:07,291 --> 00:24:08,512
This was our budget per tile.

620
00:24:08,792 --> 00:24:11,334
However, like, when we're talking about lighting up there,

621
00:24:11,594 --> 00:24:12,515
that's one time of day.

622
00:24:12,935 --> 00:24:15,997
And contrary to popular belief, the sun does set on Manhattan.

623
00:24:16,397 --> 00:24:17,938
In fact, we have four times of day.

624
00:24:18,318 --> 00:24:20,940
Daytime, sunset, nighttime, and overcast.

625
00:24:20,960 --> 00:24:22,361
That's four times the lighting data.

626
00:24:22,381 --> 00:24:24,582
That gets us up to 40 and a half gigs right there.

627
00:24:25,323 --> 00:24:27,084
What's missing from that number?

628
00:24:27,384 --> 00:24:29,145
Well, those detailed textures, the characters,

629
00:24:29,185 --> 00:24:32,027
the cinematics, the animation, basically most of the game.

630
00:24:32,587 --> 00:24:38,371
So with that added in, we are at about 67 gigabytes,

631
00:24:38,651 --> 00:24:41,472
which is more than one Blu-ray, but less than two.

632
00:24:41,833 --> 00:24:43,473
We could chip on two disks, right?

633
00:24:43,614 --> 00:24:44,234
We considered it.

634
00:24:44,714 --> 00:24:46,415
Raise your hand if you like games that come on two disks.

635
00:24:48,297 --> 00:24:49,158
It kind of stinks, right?

636
00:24:49,198 --> 00:24:50,879
Because swapping disks for installs

637
00:24:50,900 --> 00:24:52,621
and knowing if it's a digital download.

638
00:24:52,662 --> 00:24:53,502
I live in Burbank.

639
00:24:53,603 --> 00:24:54,984
It's like a three-day download for me.

640
00:24:55,625 --> 00:24:57,527
And even when you're developing, installing

641
00:24:57,567 --> 00:24:59,269
that gigantic package onto your dev kit

642
00:24:59,309 --> 00:25:01,672
every time you want to get timings, huge pain.

643
00:25:02,272 --> 00:25:04,615
So let's back off the duplication thing.

644
00:25:05,862 --> 00:25:07,584
So on the left are the assets that we duplicate,

645
00:25:07,744 --> 00:25:09,906
on the right are assets that we do not duplicate.

646
00:25:10,527 --> 00:25:12,429
Remember how I said for the middle MIP textures,

647
00:25:12,509 --> 00:25:14,791
we wait until the disk is quieted down and then read them.

648
00:25:14,931 --> 00:25:16,873
That means we have time enough to seek the drive head

649
00:25:16,913 --> 00:25:19,135
over there, so we unduplicated those,

650
00:25:19,375 --> 00:25:20,376
saved us a couple gigabytes.

651
00:25:21,597 --> 00:25:23,017
Anything bigger than four megabytes,

652
00:25:23,077 --> 00:25:24,978
we just arbitrarily don't duplicate that,

653
00:25:24,998 --> 00:25:26,439
because, well, because it's big.

654
00:25:27,559 --> 00:25:30,300
And anything that was duplicated more than 400 times,

655
00:25:30,340 --> 00:25:32,021
anything that appeared in more than 400 places,

656
00:25:32,461 --> 00:25:34,822
again, a disproportionate cost on the disks,

657
00:25:34,882 --> 00:25:35,982
we unduplicated those.

658
00:25:36,382 --> 00:25:37,763
Besides, if they're in every other tile,

659
00:25:37,783 --> 00:25:39,083
they'll probably always stay in memory

660
00:25:39,123 --> 00:25:40,083
until you go to an interior.

661
00:25:40,564 --> 00:25:41,944
Oh, like, if you're wondering what we had

662
00:25:42,204 --> 00:25:44,105
in more than 400 tiles, you know, usual New York stuff,

663
00:25:44,125 --> 00:25:46,926
like pavements and bushes and piles of trash.

664
00:25:48,106 --> 00:25:48,767
Because New York.

665
00:25:50,359 --> 00:25:52,480
We duplicate about 56,000 assets.

666
00:25:52,981 --> 00:25:55,703
They would add up to a gigabyte if we didn't duplicate them.

667
00:25:55,743 --> 00:25:59,365
But with duplication, it's 11 gigabytes of space on disk.

668
00:25:59,826 --> 00:26:02,168
So it's about a 10 gigabyte cost for the duplication, which

669
00:26:02,208 --> 00:26:03,809
is a price we pay for faster loading.

670
00:26:05,075 --> 00:26:08,137
We also considered switching to a better compressor than LZ4.

671
00:26:08,197 --> 00:26:09,858
It's fast, but it's not the compressiest.

672
00:26:10,518 --> 00:26:11,939
But it has a bunch of nice properties.

673
00:26:12,820 --> 00:26:13,641
It's byte-wise.

674
00:26:13,661 --> 00:26:14,561
You can interrupt it.

675
00:26:14,861 --> 00:26:16,302
It's really compact in memory.

676
00:26:17,163 --> 00:26:19,124
Nothing else we tried compressed that much better

677
00:26:19,144 --> 00:26:20,685
that it was worth doing away with LZ,

678
00:26:21,206 --> 00:26:23,687
except for textures, obviously, which use lossy compression.

679
00:26:23,707 --> 00:26:25,488
Jazz hands.

680
00:26:25,909 --> 00:26:26,429
Simple's good.

681
00:26:27,870 --> 00:26:30,512
But that doesn't mean that we couldn't rearrange our assets

682
00:26:30,532 --> 00:26:31,452
so that they compressed better.

683
00:26:32,791 --> 00:26:34,473
For example, models at that point in the project

684
00:26:34,493 --> 00:26:37,575
took about seven and a half gigabytes of disk space.

685
00:26:38,496 --> 00:26:40,938
So we figured, can we at least get them to compress better?

686
00:26:41,198 --> 00:26:43,460
So we looked at our biggest model, Peter Parker's body,

687
00:26:44,902 --> 00:26:47,784
100,000 triangles, about 4.86 megabytes.

688
00:26:48,225 --> 00:26:49,666
After an intensive weight loss program,

689
00:26:49,686 --> 00:26:50,487
we got him down to 3.2 megabytes.

690
00:26:52,949 --> 00:26:55,211
The details here, I put them in the appendix

691
00:26:55,271 --> 00:26:57,152
because they're gaudy, but I want to talk about

692
00:26:57,172 --> 00:26:59,314
the one thing that made the biggest difference,

693
00:27:00,135 --> 00:27:01,856
which is in the index buffer, that's the thing

694
00:27:01,876 --> 00:27:03,518
that says for every triangle what verts

695
00:27:03,598 --> 00:27:04,339
add up to that triangle.

696
00:27:05,079 --> 00:27:07,501
We moved towards storing every index there

697
00:27:07,641 --> 00:27:09,003
as a delta from the previous one,

698
00:27:09,063 --> 00:27:10,824
because 72 usually comes after 71

699
00:27:11,024 --> 00:27:12,385
and is then followed by 73.

700
00:27:12,445 --> 00:27:15,188
So our buffer ended up with these long strings

701
00:27:15,228 --> 00:27:16,929
of just ones repeated over and over again.

702
00:27:17,550 --> 00:27:19,571
which is exactly what LZ4 compresses really well.

703
00:27:19,591 --> 00:27:21,292
It's basically a glorified run-length encoder.

704
00:27:21,932 --> 00:27:24,574
So it was mental how much this one change

705
00:27:25,554 --> 00:27:26,635
did for our compression.

706
00:27:26,715 --> 00:27:29,217
We actually thought there was a bug in our measurement code.

707
00:27:30,277 --> 00:27:33,079
So here, this is a graph of our package size

708
00:27:33,179 --> 00:27:34,660
across March and April 2018.

709
00:27:36,240 --> 00:27:39,322
The y-axis is zeroed at 45 gigabytes at one blu-ray

710
00:27:39,342 --> 00:27:41,883
So all the orange bars represent how much over target we are

711
00:27:41,903 --> 00:27:46,265
You can see it getting bigger and bigger and bigger and you can see the point where we put in our model

712
00:27:46,305 --> 00:27:52,507
Optimizations for that and for like a bunch of other stuff and like that's like five gigabytes just from better compression

713
00:27:52,947 --> 00:27:54,068
So maybe huge difference

714
00:27:55,357 --> 00:27:56,318
Lighting. Lighting is big.

715
00:27:56,338 --> 00:27:58,599
Our lighting model uses two terms.

716
00:27:59,059 --> 00:28:01,161
A diffuse term, which is like incident light,

717
00:28:01,881 --> 00:28:03,342
and a specular term, which is basically

718
00:28:03,382 --> 00:28:05,623
an environment map that we use for gloss and reflection.

719
00:28:05,643 --> 00:28:07,224
I'll get back to the specular term.

720
00:28:07,244 --> 00:28:08,685
Let's talk about the diffuse term first.

721
00:28:08,745 --> 00:28:11,006
We call them light grids, because essentially

722
00:28:11,026 --> 00:28:13,187
there's just a farm of computers that divides the city

723
00:28:13,207 --> 00:28:15,449
into a grid and marches down it

724
00:28:15,629 --> 00:28:17,170
with an incident light meter, takes a picture

725
00:28:17,190 --> 00:28:17,870
in every direction.

726
00:28:18,410 --> 00:28:20,651
so that if there's a brick wall to my right

727
00:28:20,691 --> 00:28:21,951
and there's a concrete wall to my left,

728
00:28:22,071 --> 00:28:23,532
I know when I'm standing in that block

729
00:28:23,812 --> 00:28:25,532
that the light coming from over here is a little bit redder.

730
00:28:26,152 --> 00:28:28,673
We just store that information for every voxel in the city.

731
00:28:28,693 --> 00:28:30,733
That is our ambient light solution.

732
00:28:30,753 --> 00:28:34,474
So, all right, we're cutting the whole city up into cubes

733
00:28:34,514 --> 00:28:35,275
and voxelizing it.

734
00:28:35,355 --> 00:28:36,615
Yeah, it turns out that empty sky

735
00:28:36,655 --> 00:28:38,075
does not cast a lot of bounce light.

736
00:28:38,455 --> 00:28:39,876
There's not much up there to bounce anything,

737
00:28:39,956 --> 00:28:41,936
so we just stopped capturing cells

738
00:28:41,976 --> 00:28:42,937
that were not near anything,

739
00:28:43,377 --> 00:28:44,877
and that saved an embarrassing amount of memory.

740
00:28:45,920 --> 00:28:49,037
For the details, go dig up X-Ray's talk that he did a couple hours ago.

741
00:28:50,180 --> 00:28:53,121
After all that, the budget for a tile

742
00:28:53,181 --> 00:28:55,082
was determined not by streaming bandwidth,

743
00:28:55,102 --> 00:28:56,503
but how much space we had on disk.

744
00:28:56,663 --> 00:28:58,344
It came in at just under 12 megabytes,

745
00:28:59,244 --> 00:29:00,365
which is way less than 20.

746
00:29:00,505 --> 00:29:02,926
So we now have a lot more room to stream stuff in.

747
00:29:02,966 --> 00:29:04,647
Like, we've got bigger mission overlays,

748
00:29:04,687 --> 00:29:06,968
and we can have more of those high-MIP textures churning

749
00:29:06,988 --> 00:29:08,249
in and out, and we can do more audio.

750
00:29:09,009 --> 00:29:10,710
And of course, like I said, we paid for this

751
00:29:10,830 --> 00:29:12,931
by putting more seeks on the, like,

752
00:29:13,492 --> 00:29:14,712
by adding more seeks to our loading.

753
00:29:14,752 --> 00:29:18,014
So some of what we saved in space, we paid for in speed.

754
00:29:18,554 --> 00:29:20,335
which is our third moral of this talk,

755
00:29:20,815 --> 00:29:22,196
revisit speed space trade-offs.

756
00:29:22,336 --> 00:29:24,457
Our choice to duplicate assets in previous games

757
00:29:24,598 --> 00:29:27,799
was based on our having not a lot of CPU time,

758
00:29:28,099 --> 00:29:29,680
but having a whole lot of slack disk space.

759
00:29:30,321 --> 00:29:33,082
On this project, we realized, belatedly,

760
00:29:33,563 --> 00:29:35,384
disk space was at much more of a premium,

761
00:29:35,504 --> 00:29:37,245
and we actually had a little bit more slack on the CPU

762
00:29:37,285 --> 00:29:40,166
because we'd optimized other stuff a little bit better.

763
00:29:41,267 --> 00:29:44,068
So we had to basically recalculate that trade-off

764
00:29:44,449 --> 00:29:46,049
in the context of this specific game.

765
00:29:47,310 --> 00:29:48,730
If you're wondering what's on the disk, it's this.

766
00:29:49,590 --> 00:29:51,711
The interesting thing here is every one of our localizations

767
00:29:51,771 --> 00:29:53,991
is about a gig and a half, which is why we had to have

768
00:29:54,071 --> 00:29:55,652
multiple SKUs for different regions.

769
00:29:56,032 --> 00:29:57,172
It's just we literally could not fit

770
00:29:57,212 --> 00:29:58,452
all the languages on the same disk.

771
00:29:59,113 --> 00:30:01,093
In retrospect, a better compressor would have let us fit

772
00:30:01,473 --> 00:30:02,894
maybe one more language on the disk,

773
00:30:03,134 --> 00:30:04,194
but still not all of them.

774
00:30:04,814 --> 00:30:05,234
Let's keep going.

775
00:30:05,254 --> 00:30:07,035
Although what would we do if we did?

776
00:30:07,055 --> 00:30:07,875
We would d Jenpotional, and in particular,

777
00:30:07,895 --> 00:30:08,435
we would do a seaters drive.

778
00:30:08,455 --> 00:30:09,375
If we had tickets, we'd put them up completely,

779
00:30:09,395 --> 00:30:10,115
in front of those seats, we'd be able

780
00:30:10,135 --> 00:30:10,695
to go in from every location,

781
00:30:10,715 --> 00:30:11,376
and you'd be able to just set out

782
00:30:11,396 --> 00:30:11,836
for pick one locations

783
00:30:11,856 --> 00:30:12,416
for which we wanted to go in.

784
00:30:12,436 --> 00:30:13,516
I would actually definitely take the seat dramatically

785
00:30:13,536 --> 00:30:13,996
and not change anything.

786
00:30:14,016 --> 00:30:14,916
So if we did give you a spot when you started,

787
00:30:14,936 --> 00:30:15,337
it would be worth it.

788
00:30:18,474 --> 00:30:20,275
Rendering New York is kind of a deal.

789
00:30:20,355 --> 00:30:23,557
It's big, it's shiny, it's full of stuff that's moving around,

790
00:30:23,637 --> 00:30:25,858
and you can see everything from the top of the Empire State

791
00:30:25,898 --> 00:30:26,198
Building.

792
00:30:26,898 --> 00:30:29,200
Rendering could be multiple talks in and of itself.

793
00:30:29,460 --> 00:30:31,521
Luckily, Digital Foundry has done one of them for me.

794
00:30:31,561 --> 00:30:34,162
They've done this amazing video just from looking

795
00:30:34,242 --> 00:30:35,203
at the retail product.

796
00:30:36,003 --> 00:30:36,583
Yeah, so go see that.

797
00:30:37,524 --> 00:30:38,644
I want to talk about a couple of things

798
00:30:38,664 --> 00:30:40,385
that we changed for this specific project

799
00:30:40,405 --> 00:30:41,186
from our previous one.

800
00:30:42,007 --> 00:30:43,748
So remember when I was talking about loading tiles,

801
00:30:44,228 --> 00:30:45,989
obviously there's more city out there that you can see.

802
00:30:46,269 --> 00:30:47,930
So what's loaded out there?

803
00:30:50,691 --> 00:30:53,412
So we have a single low res zone.

804
00:30:53,452 --> 00:30:54,812
It's the background for the entire city.

805
00:30:54,832 --> 00:30:56,193
It's loaded all the time.

806
00:30:56,233 --> 00:30:57,093
You can see it from everywhere.

807
00:30:57,913 --> 00:31:01,435
And it's about 110 megabytes of models and 85 megs textures.

808
00:31:02,275 --> 00:31:04,236
Now I'm about to start using the word imposters.

809
00:31:04,936 --> 00:31:06,856
Just to warn you, it is not the same way

810
00:31:06,896 --> 00:31:08,237
that everybody else means imposter,

811
00:31:08,277 --> 00:31:10,237
which is the thing where you render a model onto a billboard

812
00:31:10,257 --> 00:31:11,077
and then show the billboard.

813
00:31:11,618 --> 00:31:15,058
For us, an imposter is like this super low, optimized shader

814
00:31:15,098 --> 00:31:15,919
piece of geometry.

815
00:31:15,979 --> 00:31:17,559
Because it's confusing to me, too.

816
00:31:17,599 --> 00:31:19,439
If you can think of a better name, please tweet it, Abdul.

817
00:31:19,460 --> 00:31:20,680
You can come up with something better.

818
00:31:21,700 --> 00:31:24,481
For us, an imposter is a lightweight scene object.

819
00:31:24,761 --> 00:31:26,501
The minimum that we need to render something,

820
00:31:26,741 --> 00:31:30,062
basically a transform, a mesh, and some flags.

821
00:31:31,462 --> 00:31:33,924
Our imposters are automatically generated

822
00:31:33,964 --> 00:31:36,587
from the full res geometry by the zone builder.

823
00:31:37,448 --> 00:31:41,232
They are essentially like super decimated things.

824
00:31:41,313 --> 00:31:42,334
It loads up the final version,

825
00:31:42,414 --> 00:31:43,775
like the full res version of the building,

826
00:31:44,156 --> 00:31:45,397
simplifies it, decimates it,

827
00:31:45,918 --> 00:31:48,540
takes a picture of it from every side to create a cube map.

828
00:31:48,881 --> 00:31:50,883
We project the cube map onto the imposter

829
00:31:50,903 --> 00:31:52,024
to create the illusion of detail.

830
00:31:53,255 --> 00:31:53,815
And that's that.

831
00:31:54,595 --> 00:31:58,316
All of the textures go into a big atlas per block.

832
00:31:59,137 --> 00:32:00,477
It's about 4K tops.

833
00:32:01,117 --> 00:32:02,618
And because they're so simple, we

834
00:32:02,638 --> 00:32:04,459
don't need a bunch of information for this texture

835
00:32:04,479 --> 00:32:05,519
that we would need in other things.

836
00:32:05,999 --> 00:32:08,580
For example, the imposters don't have any UVs per phase.

837
00:32:08,640 --> 00:32:09,860
It's just pixels per meter.

838
00:32:09,880 --> 00:32:15,102
So we just know how many pixels to go down in the texture map.

839
00:32:15,702 --> 00:32:17,023
We have an axis-aligned city.

840
00:32:17,243 --> 00:32:18,483
So we don't have to store normals.

841
00:32:19,344 --> 00:32:21,347
and basically it's just smaller.

842
00:32:21,767 --> 00:32:24,311
However, we do need to store a high,

843
00:32:24,431 --> 00:32:28,016
sorry, stream a high-res version of that atlas

844
00:32:28,496 --> 00:32:29,077
when you get close,

845
00:32:29,097 --> 00:32:30,379
because you can tell even at a distance.

846
00:32:31,435 --> 00:32:34,278
Also, flat, diffuse textures in that super simple shader

847
00:32:34,818 --> 00:32:35,539
are not always enough.

848
00:32:35,619 --> 00:32:37,641
Some stuff is emissive, especially in the city.

849
00:32:38,481 --> 00:32:39,502
Some stuff is reflective.

850
00:32:39,682 --> 00:32:42,024
We have those neat windows that you can see inside.

851
00:32:42,505 --> 00:32:45,027
So for that, we have a notion of a high quality imposter,

852
00:32:45,087 --> 00:32:46,989
which is just an initial model

853
00:32:47,049 --> 00:32:48,530
with a little bit smarter shader

854
00:32:48,910 --> 00:32:49,971
tacked onto the side of the building

855
00:32:49,991 --> 00:32:50,712
when you get close enough.

856
00:32:51,645 --> 00:32:53,746
All right, not everything is an axis-aligned bounding box.

857
00:32:53,826 --> 00:32:55,547
Trees are notoriously not box-shaped.

858
00:32:56,368 --> 00:33:00,670
Also, stuff like water towers, AC units, stuff like that,

859
00:33:01,370 --> 00:33:03,051
they really affect the silhouette of a building.

860
00:33:03,171 --> 00:33:05,232
And you can notice them from very far away

861
00:33:05,272 --> 00:33:05,812
if they're missing.

862
00:33:06,573 --> 00:33:08,194
On Sunset Overdrive, our solution to this

863
00:33:08,254 --> 00:33:10,695
was to just mark these things as always loaded.

864
00:33:11,135 --> 00:33:12,576
All the water towers in that game

865
00:33:12,596 --> 00:33:14,537
were loaded all the time because there weren't many of them.

866
00:33:16,220 --> 00:33:18,662
We have 600,000 of them in Manhattan.

867
00:33:19,123 --> 00:33:21,785
And the minimum that we need to store just the instance

868
00:33:21,825 --> 00:33:24,066
data for a rendered model, I'm not

869
00:33:24,086 --> 00:33:26,268
talking about the geometry, just like its position

870
00:33:26,288 --> 00:33:26,848
and all that stuff.

871
00:33:27,549 --> 00:33:30,251
The minimum is 384 bytes per each of them,

872
00:33:30,291 --> 00:33:33,053
which would be 230 megabytes of memory, which

873
00:33:33,093 --> 00:33:34,774
is more than our entire gameplay heap.

874
00:33:35,394 --> 00:33:36,255
Obviously not going to fly.

875
00:33:37,259 --> 00:33:39,582
So we decided to come up with something called Hibernates

876
00:33:39,762 --> 00:33:44,088
on this project to save on the runtime cost of those things.

877
00:33:44,128 --> 00:33:46,451
We still have the mesh loaded, but by storing only

878
00:33:46,491 --> 00:33:48,414
the bare minimum, because these things are not

879
00:33:48,434 --> 00:33:49,956
going to animate when they're at that distance.

880
00:33:50,216 --> 00:33:52,159
We don't need any clever shaders on them at that distance.

881
00:33:52,199 --> 00:33:53,601
The player obviously can't interact with them

882
00:33:53,641 --> 00:33:54,161
at that distance.

883
00:33:54,962 --> 00:33:57,224
So we can get away with storing only 40 bytes

884
00:33:57,864 --> 00:33:59,085
through using a bunch of trickery,

885
00:33:59,365 --> 00:34:01,867
like all of these things are associated with a city block,

886
00:34:02,027 --> 00:34:03,888
so we don't need an absolute position for them,

887
00:34:03,948 --> 00:34:05,789
it can just be an offset in the middle of the block,

888
00:34:06,530 --> 00:34:07,811
fits into a 16-bit fix point.

889
00:34:11,693 --> 00:34:12,574
And when you get close to them,

890
00:34:12,614 --> 00:34:14,955
we basically swap out the hibernate

891
00:34:14,975 --> 00:34:17,417
with the full instance with all the animation and the stuff.

892
00:34:18,538 --> 00:34:20,781
All told, 600,000 hibernating objects

893
00:34:20,861 --> 00:34:22,885
takes up 24 megabytes of memory at runtime,

894
00:34:23,405 --> 00:34:26,330
and the geometry is really just 13 megabytes

895
00:34:26,390 --> 00:34:29,835
because it's mostly the same water tower and fire escape.

896
00:34:30,617 --> 00:34:33,578
All right, so, TLDR in the background, let's review.

897
00:34:34,358 --> 00:34:38,179
We use billboards and low-poly models in the distance

898
00:34:38,539 --> 00:34:40,180
for Brooklyn, Queens, Bronx, New Jersey,

899
00:34:40,220 --> 00:34:41,140
you know, all the boroughs.

900
00:34:42,680 --> 00:34:44,401
The skybox is an ordinary skybox.

901
00:34:45,321 --> 00:34:47,181
Imposters are, as I've said,

902
00:34:47,942 --> 00:34:49,242
the high-quality imposter is stuck on.

903
00:34:49,682 --> 00:34:50,482
Those are the hibernates.

904
00:34:50,762 --> 00:34:52,123
Everything else is not background.

905
00:34:53,123 --> 00:34:57,407
Once again, this is all about fitting the tech to the context.

906
00:34:58,107 --> 00:35:02,111
This whole notion of hibernates is because Manhattan has the water towers and the antennas

907
00:35:02,151 --> 00:35:05,854
and the billboards and those weird fire escapes that you bolt to the side of the building.

908
00:35:06,555 --> 00:35:09,337
They're a very specific solution for this very specific product.

909
00:35:10,738 --> 00:35:12,320
Oh yeah, specular lighting, forgot about that.

910
00:35:15,062 --> 00:35:17,124
So it would have taken 8 gigabytes to put on disk.

911
00:35:19,885 --> 00:35:22,432
Our specular model is based on something we call envprobes.

912
00:35:22,993 --> 00:35:24,899
Env because they're environment maps, and probes

913
00:35:24,959 --> 00:35:26,703
because they're locations that you put throughout the city.

914
00:35:28,910 --> 00:35:33,053
The, we build environment maps like anyone does.

915
00:35:33,093 --> 00:35:34,414
We go to every one of those probe locations,

916
00:35:34,474 --> 00:35:37,016
load up the level, take a picture in all six directions,

917
00:35:37,256 --> 00:35:38,197
bake it into a cube map.

918
00:35:38,557 --> 00:35:39,678
Then when you need to do reflection,

919
00:35:39,698 --> 00:35:40,718
you just look at the cube map

920
00:35:40,738 --> 00:35:41,839
instead of actually reflecting.

921
00:35:42,299 --> 00:35:43,480
Let's step back a moment and ask,

922
00:35:43,640 --> 00:35:44,741
why do we do it this way?

923
00:35:45,202 --> 00:35:46,142
If you wanted a reflection,

924
00:35:46,563 --> 00:35:47,603
we could just re-render the scene

925
00:35:47,623 --> 00:35:49,245
from the point of view of the reflective surface

926
00:35:49,265 --> 00:35:50,926
and then clone that onto the surface.

927
00:35:51,546 --> 00:35:52,907
The reason that we do environment maps

928
00:35:53,187 --> 00:35:53,968
in the industry in general,

929
00:35:54,729 --> 00:35:55,630
is to speed things up.

930
00:35:55,770 --> 00:35:58,534
We do that offline for all the world,

931
00:35:58,614 --> 00:36:00,416
and then just load that when we need to reflect something.

932
00:36:01,718 --> 00:36:04,081
But could we maybe create a little bit of runtime

933
00:36:04,261 --> 00:36:05,483
to get back a lot of disk space?

934
00:36:06,884 --> 00:36:07,966
The answer is yes.

935
00:36:08,106 --> 00:36:10,229
We decided to calculate our environment maps.

936
00:36:11,097 --> 00:36:12,119
kind of at runtime.

937
00:36:12,680 --> 00:36:14,442
We have 64 of them in memory.

938
00:36:14,722 --> 00:36:15,624
It's like a cache.

939
00:36:16,665 --> 00:36:18,427
If, as you're swinging through the city,

940
00:36:18,487 --> 00:36:19,869
we ditch the ones that you've left behind,

941
00:36:20,090 --> 00:36:22,052
if there's a nearby one that doesn't have an environment

942
00:36:22,072 --> 00:36:24,796
map on it yet, every frame where we have spare time,

943
00:36:25,116 --> 00:36:28,581
we will pick one face from one probe and render that face.

944
00:36:29,821 --> 00:36:31,962
Because we only need to use the background geometry

945
00:36:32,042 --> 00:36:34,062
for our environment maps, animating things

946
00:36:34,122 --> 00:36:35,603
are not captured in our environment maps,

947
00:36:36,063 --> 00:36:38,103
it takes about a millisecond to render one of the faces.

948
00:36:38,203 --> 00:36:40,024
So six of them and then two mips,

949
00:36:40,064 --> 00:36:43,565
it's 12 successive frames to populate an environment map.

950
00:36:44,465 --> 00:36:45,045
You'll never notice.

951
00:36:45,825 --> 00:36:48,106
And after all that, they take zero bytes of disk space.

952
00:36:49,526 --> 00:36:50,307
Let's talk about animation.

953
00:36:56,485 --> 00:37:00,410
Writing your memoirs? Don't forget the hyphen between spider and man.

954
00:37:01,872 --> 00:37:04,116
Get the chopper ready. I won't be long.

955
00:37:08,722 --> 00:37:10,783
So as you can see, the visual fidelity target

956
00:37:10,823 --> 00:37:12,865
for our facial animation is very different

957
00:37:12,885 --> 00:37:13,845
from our previous games.

958
00:37:14,826 --> 00:37:17,407
On Ratchet, we could get away with using skeletal animation

959
00:37:17,427 --> 00:37:19,028
for the faces because that was a deliberate part

960
00:37:19,048 --> 00:37:19,909
of the aesthetic, right?

961
00:37:19,949 --> 00:37:21,730
We wanted that kind of friendly cartoon look.

962
00:37:22,510 --> 00:37:26,092
But on Marvel's Spider-Man, we used facial capture

963
00:37:26,152 --> 00:37:27,913
for almost all of our cutscene performances.

964
00:37:28,844 --> 00:37:29,904
the thing where you've got the camera,

965
00:37:29,924 --> 00:37:31,045
and the dots on the actor's face,

966
00:37:31,085 --> 00:37:32,166
and you record them acting.

967
00:37:33,107 --> 00:37:36,950
The bodies and some of the head are skeletal animation,

968
00:37:37,450 --> 00:37:40,333
like the jaw and the eyelids and stuff like that.

969
00:37:40,653 --> 00:37:42,234
But the really fine detail,

970
00:37:42,274 --> 00:37:44,176
like the movement of the muscles and the creases

971
00:37:44,196 --> 00:37:45,197
and the wrinkles in the skin,

972
00:37:45,617 --> 00:37:48,139
it's very hard to do that just with skeletal animation.

973
00:37:49,100 --> 00:37:51,903
So for that we decided to use morphs,

974
00:37:52,183 --> 00:37:54,926
and to get it right we needed between 600 and 800 morphs

975
00:37:55,206 --> 00:37:57,488
per character, which is a lot of morphs to composite

976
00:37:57,588 --> 00:38:01,432
at runtime, so we decided to do all the morphs offline

977
00:38:01,512 --> 00:38:03,794
and then just stream verts at runtime.

978
00:38:03,814 --> 00:38:05,376
We'll do the joins, but then we'll like

979
00:38:05,556 --> 00:38:07,178
the vert offsets from that.

980
00:38:07,198 --> 00:38:09,720
Ended up actually being less than two megabytes a second,

981
00:38:09,780 --> 00:38:11,222
so we thought it was crazy talk at first,

982
00:38:11,342 --> 00:38:12,263
but it ended up being okay.

983
00:38:13,084 --> 00:38:14,745
To get there, we worked with a couple of partners,

984
00:38:15,765 --> 00:38:17,566
3Lateral scanned our actors for us,

985
00:38:17,767 --> 00:38:20,268
very high quality textures, really nice models,

986
00:38:21,409 --> 00:38:23,650
rigged the faces for us with 240 joints.

987
00:38:23,770 --> 00:38:27,053
And in the case of Peter Parker, 620 blend shapes.

988
00:38:27,173 --> 00:38:28,974
So there's the joints going, there's

989
00:38:28,994 --> 00:38:30,615
the blend shapes for the really fine stuff.

990
00:38:31,275 --> 00:38:32,316
And then you put them together, you

991
00:38:32,336 --> 00:38:33,957
can get basically any expression you need out of them.

992
00:38:35,757 --> 00:38:38,002
Cubic motion then took the recorded performances

993
00:38:38,142 --> 00:38:40,466
and worked out what combination of joints and morphs

994
00:38:40,507 --> 00:38:43,272
and so on would get the animated face to the same position

995
00:38:43,312 --> 00:38:44,094
as the actor's face.

996
00:38:45,028 --> 00:38:48,070
So from that, we can figure out how much bandwidth we'll

997
00:38:48,090 --> 00:38:49,231
consume to stream these faces.

998
00:38:50,152 --> 00:38:52,294
Every one of our faces is about 18,000 verts.

999
00:38:52,314 --> 00:38:54,636
I'm not counting the bodies and the hair and the whatnot,

1000
00:38:54,676 --> 00:38:56,337
just the face that we're doing the vert streaming on.

1001
00:38:56,437 --> 00:38:58,719
So from that, we can work out our bandwidth per face metric.

1002
00:39:00,260 --> 00:39:03,783
Peter Parker's face, 18,375 verts exactly.

1003
00:39:04,184 --> 00:39:06,085
So of course, we're going to store three vectors per vert,

1004
00:39:06,345 --> 00:39:07,586
positioned in the normal for the lighting.

1005
00:39:08,547 --> 00:39:11,309
Three floats per vector at 30 frames a second

1006
00:39:11,670 --> 00:39:12,851
is 20 megabytes a second.

1007
00:39:12,911 --> 00:39:13,551
How about no?

1008
00:39:15,282 --> 00:39:18,143
Turns out, skin does not move more than about a centimeter

1009
00:39:18,463 --> 00:39:20,044
from your face while you're still alive.

1010
00:39:20,784 --> 00:39:25,166
So we can get away with using fixed point notation for them.

1011
00:39:25,827 --> 00:39:28,008
10 bits for every component, 30 bits per vector.

1012
00:39:28,868 --> 00:39:31,469
Also, the normal and the tangent, right?

1013
00:39:31,589 --> 00:39:33,130
Like, what if I told you there was something

1014
00:39:33,210 --> 00:39:34,711
called a cross product that you could

1015
00:39:34,851 --> 00:39:36,892
use to work at the normals just from the positions?

1016
00:39:38,032 --> 00:39:42,094
Why do we store normals and tangents in meshes and textures at all?

1017
00:39:42,874 --> 00:39:45,795
It's to save on run times, because calculating all that stuff would be redundant.

1018
00:39:46,576 --> 00:39:50,637
Except in this case, the bandwidth was really the scarce thing, and we actually had a lot of CPU time left over,

1019
00:39:50,717 --> 00:39:53,158
because there's not a lot of sim going on during a cutscene.

1020
00:39:53,178 --> 00:39:54,879
You're not swinging to the city, nobody's...

1021
00:39:55,659 --> 00:39:59,022
AIing at you so we ended up just as a

1022
00:39:59,483 --> 00:40:04,888
Really as a compression tactics strong streaming just the positions and doing the normals and tangents at runtime

1023
00:40:05,288 --> 00:40:10,352
That gets us down to two megabytes a second with careful arrangement LZ gets us down to half a meg per second per face

1024
00:40:10,893 --> 00:40:12,775
Here's the format every frame

1025
00:40:13,675 --> 00:40:16,678
And a screened animation first has all the joint positions for all the characters,

1026
00:40:17,079 --> 00:40:19,961
followed by all the vert positions for all the characters that vert screen.

1027
00:40:20,402 --> 00:40:23,625
We do the structure of arrays thing, so that's like all the x components for everyone,

1028
00:40:23,645 --> 00:40:26,207
and all the y components for every vector, and then all the z components,

1029
00:40:26,427 --> 00:40:27,728
because it compresses better that way.

1030
00:40:28,549 --> 00:40:30,371
Also, we delta compress these things, so...

1031
00:40:31,671 --> 00:40:33,292
For frame two, every vert position,

1032
00:40:33,412 --> 00:40:34,673
it's not the absolute position,

1033
00:40:35,114 --> 00:40:37,255
it is the difference from its position in frame one,

1034
00:40:37,895 --> 00:40:40,277
because most verts actually don't move from frame to frame,

1035
00:40:40,297 --> 00:40:42,098
which means we have these long runs of zeros,

1036
00:40:42,218 --> 00:40:43,739
which LZ4 eats up.

1037
00:40:45,541 --> 00:40:48,162
Obviously this makes scrubbing really annoying,

1038
00:40:48,703 --> 00:40:49,603
but the player doesn't scrub.

1039
00:40:50,804 --> 00:40:53,966
Oh, also, like, the problem with this is

1040
00:40:53,986 --> 00:40:55,687
that there's a zillion places for things to go wrong.

1041
00:40:55,767 --> 00:40:58,129
All you need is a single off by one error,

1042
00:40:58,249 --> 00:41:00,371
and it's just this total horror show of like,

1043
00:41:01,525 --> 00:41:03,387
Joints are verts and verts are joints.

1044
00:41:03,487 --> 00:41:06,469
Also, if you have a black spot on a character's face,

1045
00:41:06,989 --> 00:41:07,869
what's going on there?

1046
00:41:07,889 --> 00:41:08,870
Is it missing?

1047
00:41:08,890 --> 00:41:10,191
Is it missing from the mesh?

1048
00:41:10,231 --> 00:41:11,171
Is it the wrong position?

1049
00:41:14,434 --> 00:41:15,254
Is the lighting wrong?

1050
00:41:15,274 --> 00:41:18,276
I'm not going to talk over this.

1051
00:41:22,058 --> 00:41:23,839
Yeah, so somewhat belatedly, we realized

1052
00:41:23,919 --> 00:41:26,601
we needed a tool where we could render just one streamed

1053
00:41:27,121 --> 00:41:29,163
face in an app of its own and then point.

1054
00:41:32,486 --> 00:41:33,086
Why did I do this?

1055
00:41:39,532 --> 00:41:41,534
Point at a single polygon and say, you poly,

1056
00:41:42,094 --> 00:41:43,235
what's all the math that made you?

1057
00:41:44,876 --> 00:41:47,539
Once again, we revisited our speed and space trade-offs.

1058
00:41:47,679 --> 00:41:49,700
A lot of the things that we've done in cinematics previously

1059
00:41:50,081 --> 00:41:52,803
were based on the assumption that CPU was scarce

1060
00:41:52,943 --> 00:41:54,024
and disk space was plentiful.

1061
00:41:54,524 --> 00:41:56,526
That became not the case on this project,

1062
00:41:56,626 --> 00:41:57,887
and especially not for bandwidth.

1063
00:41:58,388 --> 00:42:00,790
So we realized we could actually spend more CPU

1064
00:42:00,810 --> 00:42:01,510
to make up the space.

1065
00:42:02,213 --> 00:42:03,354
Let's talk about populating the city.

1066
00:42:03,374 --> 00:42:12,097
All right.

1067
00:42:12,177 --> 00:42:16,679
Our original plan for pedestrians

1068
00:42:16,819 --> 00:42:19,340
is that they were just window dressing, not interactive.

1069
00:42:19,360 --> 00:42:21,220
You would just see them from up above.

1070
00:42:21,280 --> 00:42:22,841
So we could get away with some simplifications.

1071
00:42:23,561 --> 00:42:24,381
Of course, here's the problem.

1072
00:42:30,576 --> 00:42:33,097
Yeah, so in 2015, we realized that was not going to fly.

1073
00:42:35,318 --> 00:42:36,578
The number of pedestrians we began with

1074
00:42:36,598 --> 00:42:38,059
was not enough to fill out the streets.

1075
00:42:38,539 --> 00:42:39,840
It made them look really weird when they weren't

1076
00:42:39,880 --> 00:42:40,840
responsive to the world.

1077
00:42:41,561 --> 00:42:42,861
They needed to look diverse, because that's

1078
00:42:42,881 --> 00:42:43,741
kind of New York's thing.

1079
00:42:44,302 --> 00:42:46,022
And they needed to interact with Spider-Man

1080
00:42:46,042 --> 00:42:46,683
when you were down there.

1081
00:42:47,609 --> 00:42:49,310
So our original, original prototype

1082
00:42:49,430 --> 00:42:51,991
just had actual AIs, bots that we drove around

1083
00:42:52,011 --> 00:42:52,991
the world for pedestrians.

1084
00:42:53,372 --> 00:42:54,672
And they can run 30 of those at once.

1085
00:42:55,413 --> 00:42:57,253
And we needed a whole lot more than 30.

1086
00:42:57,814 --> 00:42:58,914
After a whole bunch of chicanery,

1087
00:42:58,934 --> 00:43:01,975
we got it up to about usually more than 1,000 pedestrians

1088
00:43:02,216 --> 00:43:03,276
on screen at a time.

1089
00:43:03,296 --> 00:43:06,077
I'm going to spare you the details on that one

1090
00:43:06,117 --> 00:43:10,399
because it's been discussed at GDC before many times.

1091
00:43:10,779 --> 00:43:12,460
2015, apparently the year of the crowd at GDC.

1092
00:43:12,580 --> 00:43:13,721
So there's a bunch of great talks.

1093
00:43:14,861 --> 00:43:14,961
What?

1094
00:43:17,782 --> 00:43:18,486
Did someone say something?

1095
00:43:18,506 --> 00:43:20,458
So you can go dig those up.

1096
00:43:21,302 --> 00:43:24,143
The one thing I do want to show you is how aggressively we LOD.

1097
00:43:25,103 --> 00:43:27,503
So in this video, I've left the LOD pivot back there,

1098
00:43:27,583 --> 00:43:29,724
and I'm pulling the debug camera without updating anything.

1099
00:43:30,424 --> 00:43:32,184
We stop animating the pedestrians

1100
00:43:32,264 --> 00:43:34,325
the moment they're off camera to save on skinning.

1101
00:43:34,905 --> 00:43:36,325
Also, when you get beyond a certain distance,

1102
00:43:36,505 --> 00:43:37,465
they are not peds at all.

1103
00:43:37,645 --> 00:43:40,146
They're just like these totally unanimated, unskinned,

1104
00:43:40,686 --> 00:43:41,866
creepy sack people things.

1105
00:43:43,606 --> 00:43:45,167
Because they're like four pixels tall,

1106
00:43:45,207 --> 00:43:46,747
you'll never see the difference.

1107
00:43:47,127 --> 00:43:48,507
We can save all the time on skinning.

1108
00:43:48,867 --> 00:43:50,268
It's just enough movement so that they

1109
00:43:50,288 --> 00:43:51,028
don't look like they're static.

1110
00:43:51,108 --> 00:43:52,269
you could have probably used billboards.

1111
00:43:53,751 --> 00:43:55,793
Also, we realized kind of late in 2017

1112
00:43:56,073 --> 00:43:57,655
that window dressing isn't enough.

1113
00:43:58,356 --> 00:43:59,557
If the peds aren't interactive,

1114
00:43:59,577 --> 00:44:02,280
they don't invite you to spend time on street level

1115
00:44:02,320 --> 00:44:03,701
and see all the cool stuff we put down there,

1116
00:44:03,721 --> 00:44:05,183
and it seems really robotic and weird

1117
00:44:05,203 --> 00:44:06,144
if they don't acknowledge you.

1118
00:44:06,685 --> 00:44:09,427
And also people just enjoy messing with the peds

1119
00:44:09,467 --> 00:44:10,388
and seeing them interact.

1120
00:44:11,329 --> 00:44:11,430
So.

1121
00:44:11,975 --> 00:44:13,797
Late in the game, we came up with a couple of interactions

1122
00:44:13,857 --> 00:44:14,337
for them to do.

1123
00:44:14,958 --> 00:44:16,160
The low-intensity ones were simple.

1124
00:44:16,540 --> 00:44:18,202
You just go down there, and they would do a canned behavior,

1125
00:44:18,242 --> 00:44:20,565
take pictures of you, call mom, wave, whatever.

1126
00:44:21,386 --> 00:44:22,867
Also, we noticed it was kind of weird

1127
00:44:22,887 --> 00:44:25,310
if you hit the punch button while facing a pedestrian

1128
00:44:25,330 --> 00:44:27,192
and took a roundhouse at their face, and they didn't react.

1129
00:44:27,813 --> 00:44:28,734
So we just replaced the animation.

1130
00:44:29,764 --> 00:44:30,385
Kind of became a thing.

1131
00:44:31,225 --> 00:44:33,607
We also came up with some more high-intensity interactions.

1132
00:44:33,767 --> 00:44:36,249
Every so often, we body-snatch a pedestrian

1133
00:44:36,289 --> 00:44:37,610
and turn them into a full AI.

1134
00:44:38,271 --> 00:44:40,233
Then they perform one of the few canned interactions

1135
00:44:40,273 --> 00:44:41,934
when you walk up to them and hit the triangle button.

1136
00:44:42,534 --> 00:44:44,356
In some cases, it's a synchronized animation.

1137
00:44:44,456 --> 00:44:46,157
In some cases, they'll point out, like,

1138
00:44:46,598 --> 00:44:48,199
crimes or collectibles for you.

1139
00:44:48,619 --> 00:44:49,961
In some cases, they're in cahoots

1140
00:44:50,181 --> 00:44:51,602
with one of the villains, and you get close,

1141
00:44:51,622 --> 00:44:53,123
and they're like, ha-ha, I work for Fisk.

1142
00:44:53,724 --> 00:44:54,744
You're going down, Spider-Man.

1143
00:44:55,045 --> 00:44:56,186
Just to give you a little bit of surprise

1144
00:44:56,206 --> 00:44:57,186
and variety on the streets.

1145
00:44:58,215 --> 00:45:00,596
So looking back, it's the classic GDC story.

1146
00:45:00,936 --> 00:45:02,057
We should have started on this soon.

1147
00:45:02,157 --> 00:45:02,817
No, no, we did.

1148
00:45:02,857 --> 00:45:04,358
We had this from the beginning.

1149
00:45:04,398 --> 00:45:05,358
We knew that we needed this.

1150
00:45:06,098 --> 00:45:07,939
We just had the wrong prototype.

1151
00:45:08,179 --> 00:45:10,560
And once we realized we needed more,

1152
00:45:10,600 --> 00:45:12,360
we just kept iterating on that one prototype

1153
00:45:12,380 --> 00:45:14,101
rather than going back and rebuilding it

1154
00:45:14,121 --> 00:45:14,661
from the beginning.

1155
00:45:14,701 --> 00:45:16,182
So we had like this full AI thing,

1156
00:45:16,202 --> 00:45:18,262
and then we just kind of like added those non-skin things

1157
00:45:18,282 --> 00:45:18,723
on top of it.

1158
00:45:19,343 --> 00:45:21,624
We never went back and built a system from the ground up

1159
00:45:21,644 --> 00:45:24,265
that had better concurrency, a real crowd sim.

1160
00:45:24,305 --> 00:45:25,765
We would have liked more unique interactions.

1161
00:45:26,766 --> 00:45:29,596
Really the lesson I want to communicate here is if you put a human being in the game,

1162
00:45:29,637 --> 00:45:32,808
the player's going to try to interact with them, and you just can't fool yourself that they won't.

1163
00:45:34,422 --> 00:45:36,083
One last thing that I want to talk about

1164
00:45:36,184 --> 00:45:39,246
before we get into Q&A is to talk about Photo Mode.

1165
00:45:39,726 --> 00:45:41,427
And the most important thing I can say about Photo Mode

1166
00:45:41,467 --> 00:45:42,748
is that programmers undervalue it.

1167
00:45:44,149 --> 00:45:46,510
But the success of Photo Mode is not a tech story.

1168
00:45:47,011 --> 00:45:48,011
It is a social story.

1169
00:45:48,852 --> 00:45:52,174
It was a story of basically like Stone Soup at Folktale,

1170
00:45:52,214 --> 00:45:53,495
where everybody comes and contributes.

1171
00:45:53,935 --> 00:45:55,036
And it made a much bigger difference

1172
00:45:55,056 --> 00:45:56,176
than we suspected at the beginning.

1173
00:45:56,997 --> 00:45:59,879
So we began working on Photo Mode about five months

1174
00:46:00,019 --> 00:46:01,180
before ship date.

1175
00:46:01,280 --> 00:46:02,601
But we did a lot of work in those five months.

1176
00:46:03,592 --> 00:46:05,473
And our original plan was something very simple, just

1177
00:46:05,654 --> 00:46:08,035
basically so we could claim that we had done photo mode.

1178
00:46:08,736 --> 00:46:11,497
Basic 3D camera, some controls, rotate the camera around,

1179
00:46:11,898 --> 00:46:12,538
and some stickers.

1180
00:46:13,118 --> 00:46:14,679
All right, well, where are we getting the stickers from?

1181
00:46:14,779 --> 00:46:17,301
So we had the little social media display in the pause menu.

1182
00:46:18,062 --> 00:46:19,723
So we just grabbed the textures from that

1183
00:46:19,743 --> 00:46:20,603
and used those as stickers.

1184
00:46:20,683 --> 00:46:23,265
And this was a stroke of luck, because those things

1185
00:46:23,365 --> 00:46:26,027
have a specific aesthetic that immediately encouraged

1186
00:46:26,227 --> 00:46:28,328
other texture artists to come along and start

1187
00:46:28,348 --> 00:46:30,329
contributing their own stuff, other characters in the books.

1188
00:46:31,050 --> 00:46:32,370
And it's a comic book, right?

1189
00:46:32,390 --> 00:46:34,151
We can start throwing in the onomatopoeia

1190
00:46:34,732 --> 00:46:36,352
and some speech bubbles.

1191
00:46:36,573 --> 00:46:39,474
And OK, what if you take a sticker,

1192
00:46:39,534 --> 00:46:41,295
but instead of it being opaque in the middle

1193
00:46:41,335 --> 00:46:42,876
and transparent everywhere else, what

1194
00:46:42,896 --> 00:46:43,876
if it's transparent in the middle

1195
00:46:43,896 --> 00:46:44,777
and opaque everywhere else?

1196
00:46:44,797 --> 00:46:45,977
And that's where frames came from.

1197
00:46:46,677 --> 00:46:48,418
And then someone looked at that one movie poster

1198
00:46:48,438 --> 00:46:50,940
from that one movie with a superhero taking a selfie

1199
00:46:51,280 --> 00:46:52,380
and said, how about we have selfies?

1200
00:46:52,620 --> 00:46:53,621
Yeah, selfie mode is a thing.

1201
00:46:53,641 --> 00:46:56,342
And that's when people really started to see themselves

1202
00:46:56,502 --> 00:46:57,063
in the product.

1203
00:46:58,172 --> 00:46:59,933
Because people, when we were even developing,

1204
00:46:59,953 --> 00:47:01,834
just loved taking selfies of themselves

1205
00:47:01,894 --> 00:47:03,154
with the content that they had made

1206
00:47:03,214 --> 00:47:04,775
and bugs that they encountered.

1207
00:47:05,235 --> 00:47:06,816
And when people were doing that on the team,

1208
00:47:06,836 --> 00:47:08,116
they started to see opportunities

1209
00:47:08,156 --> 00:47:09,277
for themselves to contribute.

1210
00:47:09,717 --> 00:47:11,237
Like an animator said,

1211
00:47:11,277 --> 00:47:13,358
I can make Spider-Man make funny faces.

1212
00:47:13,778 --> 00:47:16,079
And a lighter said, it's not that hard

1213
00:47:16,119 --> 00:47:18,720
to put a light on the locator and get a selfie light.

1214
00:47:18,760 --> 00:47:20,521
And a shader artist said, yeah, you know,

1215
00:47:20,621 --> 00:47:22,422
with just some simple color lookup tables,

1216
00:47:22,562 --> 00:47:24,242
I can totally make a whole bunch of photo filters.

1217
00:47:25,243 --> 00:47:26,845
Behind the scenes, it's really simple.

1218
00:47:27,425 --> 00:47:29,428
We just duck out the gameplay character,

1219
00:47:29,468 --> 00:47:31,029
replace it with the cinematic character,

1220
00:47:32,591 --> 00:47:34,513
drive an aim matrix with the thumbsticks,

1221
00:47:34,813 --> 00:47:36,515
have different poses on the cinematic character,

1222
00:47:36,535 --> 00:47:38,638
depending on whether you were standing or perching

1223
00:47:38,738 --> 00:47:39,138
or running.

1224
00:47:39,899 --> 00:47:41,060
The camera's attached to the locator.

1225
00:47:41,080 --> 00:47:41,681
There's no fancy.

1226
00:47:41,761 --> 00:47:43,303
OK, I mostly just wanted to show you this video.

1227
00:47:46,803 --> 00:47:50,548
But it turned out to be a huge promotional win for us

1228
00:47:50,588 --> 00:47:51,830
to have this in from day one.

1229
00:47:53,192 --> 00:47:55,315
Photo mode is an intrinsically creative thing.

1230
00:47:55,575 --> 00:47:57,778
People want to express themselves in our game

1231
00:47:57,798 --> 00:47:59,440
and then immediately to share it with their friends.

1232
00:47:59,821 --> 00:48:00,702
And the sharing with their friends

1233
00:48:00,822 --> 00:48:02,044
was a really nice thing.

1234
00:48:02,084 --> 00:48:03,466
And if we had done photo mode as a DLC,

1235
00:48:04,767 --> 00:48:05,947
weeks later, it would have been cool.

1236
00:48:05,967 --> 00:48:07,308
People would have gone on Twitter and said,

1237
00:48:07,348 --> 00:48:09,188
look at this photo mode thing from the game from last month.

1238
00:48:09,288 --> 00:48:11,409
But for us, because we had it in day one,

1239
00:48:11,789 --> 00:48:13,749
it hit right at the peak of the hype trend.

1240
00:48:13,769 --> 00:48:15,990
Like right as our advertising spend went in,

1241
00:48:16,330 --> 00:48:17,590
this stuff was all over Twitter.

1242
00:48:18,010 --> 00:48:21,551
So it made a huge difference for our launch momentum.

1243
00:48:21,991 --> 00:48:24,351
We were kind of nervous about photo mode at first,

1244
00:48:24,411 --> 00:48:25,952
because we thought people would take pictures

1245
00:48:25,972 --> 00:48:27,212
that made the game look bad.

1246
00:48:28,252 --> 00:48:29,513
But it's not a problem.

1247
00:48:29,773 --> 00:48:31,013
One, people like the silly photos.

1248
00:48:31,093 --> 00:48:32,534
And two, no one cares.

1249
00:48:34,074 --> 00:48:35,815
So here's the morals.

1250
00:48:37,255 --> 00:48:40,036
Simple is really good still to this day.

1251
00:48:40,817 --> 00:48:42,277
Fit the tech to the context.

1252
00:48:42,677 --> 00:48:44,518
I was talking about the context of our specific engine,

1253
00:48:44,558 --> 00:48:45,678
but really anything you're doing.

1254
00:48:46,338 --> 00:48:48,139
Re-evaluate the specific game that you're making

1255
00:48:48,179 --> 00:48:49,179
and build the tech around that.

1256
00:48:50,060 --> 00:48:51,360
That's why we have programmers on teams.

1257
00:48:51,400 --> 00:48:53,241
Nothing has to be completely generic.

1258
00:48:54,101 --> 00:48:56,162
Continually revisit the speed and space trade-offs.

1259
00:48:56,482 --> 00:48:56,842
We had to.

1260
00:48:57,762 --> 00:48:59,203
think over all the choices that we

1261
00:48:59,223 --> 00:49:01,543
had made on previous projects for the specific context

1262
00:49:01,583 --> 00:49:03,364
of a city that has everything that Manhattan does.

1263
00:49:03,844 --> 00:49:06,085
And if there is no fun, then what is even the point?

1264
00:49:06,285 --> 00:49:07,986
We are toy makers for a living.

1265
00:49:08,006 --> 00:49:09,806
If you're not having at least a little bit of fun

1266
00:49:09,846 --> 00:49:10,706
making the game, you're not going

1267
00:49:10,726 --> 00:49:12,327
to find creative ways to contribute it,

1268
00:49:12,387 --> 00:49:14,748
and you're going to have a hard time putting fun into the game.

1269
00:49:15,902 --> 00:49:19,644
So I am the one up here talking, but this talk was a team

1270
00:49:19,764 --> 00:49:21,585
effort, so here's everyone who contributed.

1271
00:49:21,645 --> 00:49:23,305
Mostly I just punched it into PowerPoint.

1272
00:49:23,886 --> 00:49:25,747
I really want to thank Sony and Marvel

1273
00:49:25,787 --> 00:49:27,828
for letting us play with their toys and make this game.

1274
00:49:28,268 --> 00:49:30,769
And I super duper want to thank my talk advisor, Andreas,

1275
00:49:30,809 --> 00:49:34,111
who carried me across the finish line and the start line.

1276
00:49:34,131 --> 00:49:34,911
And he just carried me.

1277
00:49:35,572 --> 00:49:37,933
And thanks to everybody at Insomniac

1278
00:49:38,053 --> 00:49:39,894
who actually made the game that I'm talking about.

1279
00:49:40,875 --> 00:49:41,435
Oh yeah, we're hiring.

1280
00:49:43,076 --> 00:49:43,476
Please applaud.

1281
00:49:45,732 --> 00:49:46,072
All right.

1282
00:49:48,712 --> 00:49:49,293
Appendix.

1283
00:49:49,853 --> 00:49:50,373
Appendix.

1284
00:49:50,733 --> 00:49:53,754
For those of you watching on video, get your pause button ready.

1285
00:49:53,834 --> 00:49:54,534
Here's the numbers.

1286
00:49:56,315 --> 00:49:56,675
Bam.

1287
00:50:04,397 --> 00:50:04,797
All right, Q&A.

1288
00:50:19,057 --> 00:50:19,577
He'll be fine.

1289
00:50:19,597 --> 00:50:37,823
People can line up while this is going on.

1290
00:50:37,863 --> 00:50:40,384
Like, I put these in while people were milling around.

1291
00:51:09,081 --> 00:51:10,262
All right, I actually have something.

1292
00:51:10,282 --> 00:51:10,962
All right, thank you.

1293
00:51:11,182 --> 00:51:16,003
What's the funniest glitch, like the things that are displayed here, that you personally

1294
00:51:16,043 --> 00:51:17,403
have encountered in this game?

1295
00:51:17,483 --> 00:51:18,143
I put them up there.

1296
00:51:19,944 --> 00:51:20,964
Which of them do you like the most?

1297
00:51:21,616 --> 00:51:24,998
Oh, the one where the guy gets punted over the girders

1298
00:51:25,038 --> 00:51:25,679
into the distance.

1299
00:51:26,439 --> 00:51:27,640
It gets me every time.

1300
00:51:27,780 --> 00:51:29,041
It's like a football goal.

1301
00:51:29,081 --> 00:51:29,461
It's good.

1302
00:51:29,481 --> 00:51:29,981
It's good.

1303
00:51:30,341 --> 00:51:41,968
Yeah, also, we got a Brooklyn bridge, but no Brooklyn.

1304
00:51:41,988 --> 00:51:43,669
Yeah, we were off by one on the model index.

1305
00:51:45,865 --> 00:51:46,605
Seriously, come on.

1306
00:51:46,965 --> 00:51:47,845
I have another question.

1307
00:51:47,885 --> 00:51:48,405
Ask a question.

1308
00:51:48,846 --> 00:51:53,187
So as the second clip demonstrated, through the game there are a lot of characters that

1309
00:51:53,227 --> 00:51:54,227
get knocked off buildings.

1310
00:51:54,367 --> 00:51:55,367
I wondered if you wanted to...

1311
00:51:56,268 --> 00:52:01,129
I expect that being able to show Spider-Man wasn't just knocking people hundreds of feet

1312
00:52:01,149 --> 00:52:02,429
to their death was part of the design.

1313
00:52:02,449 --> 00:52:07,771
Do you want to talk about some of the challenges that came about trying to save those people?

1314
00:52:08,711 --> 00:52:12,432
So the question is, Spider-Man knocks a bunch of people off the buildings, how do we keep

1315
00:52:12,452 --> 00:52:13,012
them from dying?

1316
00:52:13,692 --> 00:52:18,954
The challenge, basically the reason that they don't die is Spider-Man doesn't kill people

1317
00:52:20,434 --> 00:52:21,055
gratuitously.

1318
00:52:22,215 --> 00:52:25,636
And to make them not die, we simply just do a rake, like when they're going over, we do

1319
00:52:25,696 --> 00:52:29,097
rake casts in all directions, find the nearest vertical surface and just stick them to that.

1320
00:52:30,017 --> 00:52:30,718
It's really simple.

1321
00:52:30,738 --> 00:52:31,778
Thanks.

1322
00:52:33,538 --> 00:52:33,858
Oh, sorry.

1323
00:52:34,279 --> 00:52:34,419
Hi.

1324
00:52:35,600 --> 00:52:36,660
First, thanks for the great talk.

1325
00:52:38,000 --> 00:52:40,941
On the slide that you mentioned the vertices, all the

1326
00:52:40,981 --> 00:52:44,703
compression, and you needed specific tools, would you be

1327
00:52:44,743 --> 00:52:46,843
able to talk a bit more about those tools and what was

1328
00:52:46,883 --> 00:52:48,784
needed, what was really interesting in that sense?

1329
00:52:49,364 --> 00:52:50,305
Oh, the debug tool?

1330
00:52:50,545 --> 00:52:50,745
Yes.

1331
00:52:51,125 --> 00:52:53,927
OK, so we have a notion of a viewer app which

1332
00:52:53,987 --> 00:52:56,709
loads basically just the engine but none of the gameplay.

1333
00:52:57,249 --> 00:52:59,091
It's just enough to view models in game.

1334
00:52:59,531 --> 00:53:01,592
And we can turn a bunch of stuff on and off in that

1335
00:53:01,612 --> 00:53:03,333
to test specific engine features.

1336
00:53:03,894 --> 00:53:05,455
So essentially what we did there is we just

1337
00:53:06,315 --> 00:53:08,297
can pick a single animation, stream the animation,

1338
00:53:08,857 --> 00:53:10,418
and get a whole bunch of diagnostics

1339
00:53:10,538 --> 00:53:12,800
on all the math that's going into making the face.

1340
00:53:13,900 --> 00:53:16,363
From that, it's really just, we have a mouse selector,

1341
00:53:16,383 --> 00:53:19,445
you can click a polygon, and then it just freezes the stream,

1342
00:53:19,465 --> 00:53:21,667
and then just shows all the calculations that

1343
00:53:21,687 --> 00:53:24,329
happen from the decompression through the lighting,

1344
00:53:24,489 --> 00:53:25,850
through the normals, through the tangents,

1345
00:53:26,331 --> 00:53:27,212
to make that poly happen.

1346
00:53:28,252 --> 00:53:28,513
Thank you.

1347
00:53:30,242 --> 00:53:30,762
Hi.

1348
00:53:31,163 --> 00:53:34,326
So you mentioned about the fitting tech to context.

1349
00:53:34,666 --> 00:53:39,090
And right now, game engines like Unity, Unreal

1350
00:53:39,210 --> 00:53:40,271
are used for several things.

1351
00:53:40,311 --> 00:53:43,094
But I was wondering if you have any thoughts on when

1352
00:53:43,114 --> 00:53:46,717
it's a good trade-off to start investing in your own technology

1353
00:53:46,757 --> 00:53:51,301
for your own game engine, and when it's a good time

1354
00:53:51,341 --> 00:53:52,382
to start investing in that.

1355
00:53:52,872 --> 00:53:54,753
The question is, when is it a good time

1356
00:53:54,793 --> 00:53:56,214
to start investing in your own engine?

1357
00:53:58,955 --> 00:54:01,536
That is a philosophical question that I'm

1358
00:54:01,576 --> 00:54:02,716
not sure I can answer for you.

1359
00:54:02,736 --> 00:54:06,738
I mean, the short of it is when you

1360
00:54:06,798 --> 00:54:09,018
have enough of space on your payroll

1361
00:54:09,058 --> 00:54:11,299
to write your own engine, and when you know what

1362
00:54:11,339 --> 00:54:12,340
you need from your engine.

1363
00:54:12,520 --> 00:54:14,160
A very small engine is a lot easier

1364
00:54:14,200 --> 00:54:15,241
to build than a big one if you're

1365
00:54:15,261 --> 00:54:16,441
making a very specific game.

1366
00:54:16,561 --> 00:54:18,342
I guess this fits the text of the context again.

1367
00:54:18,362 --> 00:54:21,743
I don't know if I have an answer for you on that one.

1368
00:54:21,763 --> 00:54:22,163
I'm sorry.

1369
00:54:22,448 --> 00:54:23,049
Yeah, no worries.

1370
00:54:23,069 --> 00:54:23,249
Thanks.

1371
00:54:23,269 --> 00:54:24,891
All right, you.

1372
00:54:26,933 --> 00:54:29,977
Because it's a platform exclusive and very much 100%

1373
00:54:30,578 --> 00:54:34,643
likely to remain so, how beneficial was it to know that

1374
00:54:34,683 --> 00:54:37,386
you were just using that platform's profiling tools for

1375
00:54:37,426 --> 00:54:38,087
optimization?

1376
00:54:38,107 --> 00:54:40,069
And is that different from other projects?

1377
00:54:41,391 --> 00:54:44,893
It is super useful when you're optimizing to know that you have a fixed platform.

1378
00:54:45,553 --> 00:54:48,735
That is like the advantage of consoles over developing on PC.

1379
00:54:49,495 --> 00:54:52,777
Also both of the console makers have really good profiling tools.

1380
00:54:53,157 --> 00:54:55,939
They're different, but they're both awesome in their own ways.

1381
00:54:57,119 --> 00:55:00,921
So I mean I guess that's the answer is relying on the tools that the platform maker gave

1382
00:55:00,962 --> 00:55:03,103
us was absolutely fine because they were very good.

1383
00:55:03,163 --> 00:55:04,203
Did I answer your question sufficiently?

1384
00:55:04,463 --> 00:55:05,304
I think so, thank you.

1385
00:55:06,444 --> 00:55:08,846
So you are a studio making multiple games at the same time,

1386
00:55:09,326 --> 00:55:11,467
but you fit your engine completely to the game,

1387
00:55:11,487 --> 00:55:12,447
so how does that work out,

1388
00:55:12,507 --> 00:55:14,168
because then you need to strip out everything

1389
00:55:14,248 --> 00:55:15,169
for the next game,

1390
00:55:15,229 --> 00:55:17,470
or just the game where you're prototyping on

1391
00:55:17,530 --> 00:55:18,870
has to just live with what you do?

1392
00:55:19,451 --> 00:55:22,192
So, we, that is an excellent question.

1393
00:55:23,152 --> 00:55:25,193
We have this notion, we have sort of tiers, right?

1394
00:55:25,213 --> 00:55:28,355
We have a core engine, we have the gameplay code,

1395
00:55:28,375 --> 00:55:30,336
and then we have this notion of like a shared library,

1396
00:55:30,376 --> 00:55:31,636
which is the thing that sits in the middle.

1397
00:55:32,949 --> 00:55:35,091
We work on engine features, and they just grow by accretion.

1398
00:55:35,131 --> 00:55:37,272
So when an engine feature becomes available to one game,

1399
00:55:37,673 --> 00:55:39,154
it becomes available to all of them.

1400
00:55:39,554 --> 00:55:41,555
So the core stuff, like the Hibernate renders,

1401
00:55:41,936 --> 00:55:43,817
are actually going to end up in some of the other games

1402
00:55:43,857 --> 00:55:45,058
just because it's conveniently there.

1403
00:55:45,738 --> 00:55:48,741
We do need to be very cautious about when we release

1404
00:55:48,781 --> 00:55:51,803
the engine to which projects so that we don't inadvertently

1405
00:55:51,823 --> 00:55:52,403
break the projects.

1406
00:55:52,563 --> 00:55:54,625
But we do make sure that the same engine and the same tools

1407
00:55:55,005 --> 00:55:57,066
go out to all the projects eventually

1408
00:55:57,086 --> 00:55:58,067
so that they're on the same game.

1409
00:55:58,087 --> 00:56:00,029
Because the streaming system is probably very specific,

1410
00:56:00,149 --> 00:56:01,289
probably used by the other things.

1411
00:56:01,707 --> 00:56:06,710
Yes, I mean, so if we mark the zones

1412
00:56:06,730 --> 00:56:08,512
that they're loading within a geographic space,

1413
00:56:09,573 --> 00:56:11,554
then it's like streaming like I've shown you here.

1414
00:56:11,994 --> 00:56:13,636
If you mark them so that they're loaded by script,

1415
00:56:13,816 --> 00:56:14,596
it's the exact same thing.

1416
00:56:14,616 --> 00:56:16,218
We're using the exact same streaming logic.

1417
00:56:16,698 --> 00:56:18,179
It's just it's not happening all the time.

1418
00:56:18,900 --> 00:56:21,422
And you may notice that our games stream more and more

1419
00:56:21,482 --> 00:56:22,983
as this technology becomes conveniently available

1420
00:56:23,003 --> 00:56:23,643
to every project.

1421
00:56:24,296 --> 00:56:29,542
Another small question is that you have everything set up that just fits with the tiles and things like that.

1422
00:56:30,323 --> 00:56:35,148
Did the game designers all of a sudden want to like put a cutscene on the other side of the world and they just have to

1423
00:56:35,188 --> 00:56:38,412
stream and doesn't fit in memory or you were just like very strict and it's not possible?

1424
00:56:38,666 --> 00:56:41,087
So I addressed this in the sunset overdrive talk.

1425
00:56:41,787 --> 00:56:43,488
The gist of it is we have to be careful not

1426
00:56:43,508 --> 00:56:45,849
to set cut scenes in faraway locations

1427
00:56:46,449 --> 00:56:49,451
unless we can load in a very small cyclorama behind them,

1428
00:56:49,471 --> 00:56:51,892
basically load in a set quickly enough for that cut scene

1429
00:56:51,932 --> 00:56:52,232
to work.

1430
00:56:52,812 --> 00:56:53,872
However, once we're in that little thing

1431
00:56:53,892 --> 00:56:56,594
with the narrow camera, we can hide all kinds of ills

1432
00:56:56,794 --> 00:56:57,814
while we're streaming the world around it.

1433
00:56:58,904 --> 00:56:59,585
Sorry, one last.

1434
00:57:01,628 --> 00:57:03,511
So you duplicate MIPS on everything,

1435
00:57:03,771 --> 00:57:04,813
and you put that into things.

1436
00:57:04,853 --> 00:57:07,076
When you, for example, make a texture change,

1437
00:57:07,497 --> 00:57:08,638
what is the iteration time then?

1438
00:57:08,658 --> 00:57:09,920
Because you need to rebake everything?

1439
00:57:11,002 --> 00:57:12,504
To bake an individual texture is seconds.

1440
00:57:12,970 --> 00:57:15,871
Yeah, but you need to rebake then all the basically tiles

1441
00:57:15,931 --> 00:57:17,012
loading that data.

1442
00:57:17,092 --> 00:57:18,452
Oh, I see what you're saying.

1443
00:57:18,853 --> 00:57:22,534
So we have two ways of loading assets, basically,

1444
00:57:22,554 --> 00:57:23,455
that we use during development.

1445
00:57:23,895 --> 00:57:26,096
The stuff that I showed you is like the final package version

1446
00:57:26,136 --> 00:57:27,157
when we're trying to optimize it.

1447
00:57:27,577 --> 00:57:28,938
We can also loose load files.

1448
00:57:29,298 --> 00:57:31,599
In fact, we have a thing where for the most part,

1449
00:57:31,619 --> 00:57:33,260
when you're editing assets on your PC,

1450
00:57:33,560 --> 00:57:35,020
the PC is actually running a little service,

1451
00:57:35,040 --> 00:57:37,222
a little web server, that when the game goes to load assets,

1452
00:57:37,262 --> 00:57:38,802
it actually hits that web server on your PC.

1453
00:57:39,223 --> 00:57:41,163
The reason we do that is so that if you change an asset,

1454
00:57:41,243 --> 00:57:42,344
it updates in the game immediately.

1455
00:57:42,922 --> 00:57:43,422
Okay, thank you.

1456
00:57:43,522 --> 00:57:44,063
All right, thank you.

1457
00:57:46,585 --> 00:57:51,269
Excellent talk, excellent game, but I have to ask, why did you derez the puddle?

1458
00:57:55,713 --> 00:57:57,874
All right, so if you don't know what he's talking about...

1459
00:58:07,091 --> 00:58:09,433
There was a scene that we showed in our E3 trailer that

1460
00:58:09,453 --> 00:58:10,594
had this big old puddle in it.

1461
00:58:10,674 --> 00:58:13,076
And then when we showed that same scene in the final

1462
00:58:13,116 --> 00:58:15,138
trailer, that puddle was not there.

1463
00:58:15,338 --> 00:58:17,159
And the internet lost its mind because they

1464
00:58:17,179 --> 00:58:18,600
thought we had taken out reflective puddles

1465
00:58:18,621 --> 00:58:19,561
for performance reasons.

1466
00:58:21,183 --> 00:58:22,564
So we gave this really confused answer then

1467
00:58:22,584 --> 00:58:23,865
because nobody actually knew why this was.

1468
00:58:23,885 --> 00:58:25,886
I had to do an investigation to figure it out.

1469
00:58:25,907 --> 00:58:27,228
I talked to like 14 people and got

1470
00:58:27,248 --> 00:58:27,968
a whole bunch of different answers.

1471
00:58:28,268 --> 00:58:29,750
But I finally got to the bottom of it.

1472
00:58:30,730 --> 00:58:31,131
Are you ready?

1473
00:58:33,483 --> 00:58:34,604
We switched from hand painting them

1474
00:58:34,644 --> 00:58:35,584
to procedurally putting them in.

1475
00:58:35,964 --> 00:58:37,764
It's just too much of a pain to paint all the puddles in.

1476
00:58:37,884 --> 00:58:38,104
That's it.

1477
00:58:38,124 --> 00:58:40,345
It's a different procedural seed.

1478
00:58:40,365 --> 00:58:40,465
Woo!

1479
00:58:40,525 --> 00:58:40,685
Woo!

1480
00:58:43,425 --> 00:58:43,605
Woo!

1481
00:58:43,966 --> 00:58:44,046
Woo!

1482
00:58:44,066 --> 00:58:44,206
Woo!

1483
00:58:44,366 --> 00:58:44,486
Woo!

1484
00:58:44,566 --> 00:58:44,706
Woo!

1485
00:58:45,286 --> 00:58:46,766
Woo!

1486
00:58:47,326 --> 00:58:47,926
Woo!

1487
00:58:47,986 --> 00:58:48,126
Woo!

1488
00:58:48,146 --> 00:58:48,286
Woo!

1489
00:58:48,326 --> 00:58:48,626
Woo!

1490
00:58:48,646 --> 00:58:48,766
Woo!

1491
00:58:48,807 --> 00:58:48,927
Woo!

1492
00:58:48,967 --> 00:58:49,087
Woo!

1493
00:58:49,107 --> 00:58:49,367
Woo!

1494
00:58:49,627 --> 00:58:49,787
Woo!

1495
00:58:49,967 --> 00:58:51,247
Woo!

1496
00:58:51,867 --> 00:58:52,007
Woo!

1497
00:58:52,027 --> 00:58:52,087
Woo!

1498
00:58:52,127 --> 00:58:52,227
Woo!

1499
00:58:52,247 --> 00:58:52,307
Woo!

1500
00:59:06,913 --> 00:59:09,276
Oh yeah, so traffic.

1501
00:59:10,057 --> 00:59:11,579
We had a really simple traffic system.

1502
00:59:12,540 --> 00:59:13,722
Basically pedestrians and wheels.

1503
00:59:14,283 --> 00:59:17,407
So in our system, we don't have any global navigation.

1504
00:59:17,447 --> 00:59:19,870
So every car just looks immediately ahead of itself

1505
00:59:20,050 --> 00:59:21,472
and then stops if something is in the way.

1506
00:59:21,512 --> 00:59:23,014
And pedestrians don't look before crossing the street.

1507
00:59:23,054 --> 00:59:24,476
So the realism is amazing.

1508
00:59:27,486 --> 00:59:31,048
We have, at any given time, about 180 cars driving,

1509
00:59:31,208 --> 00:59:32,689
of which 25 are actually moving

1510
00:59:32,729 --> 00:59:33,890
and the rest are stuck in traffic.

1511
00:59:33,970 --> 00:59:35,550
So again, realism.

1512
00:59:36,231 --> 00:59:38,732
And parking is really hard in Manhattan.

1513
00:59:39,933 --> 00:59:40,193
That's it.

1514
00:59:43,214 --> 00:59:43,714
Oh, sorry.

1515
00:59:44,015 --> 00:59:45,575
Can you watch the blooper reel again?

1516
00:59:47,216 --> 00:59:48,097
Only if there's no other questions.

1517
00:59:48,117 --> 00:59:49,457
You know what, we'll do it while people are coming up

1518
00:59:49,477 --> 00:59:50,278
if they have any other questions.

1519
00:59:51,178 --> 00:59:51,698
Oh, come on.

1520
00:59:59,644 --> 01:00:05,967
This is a super naive question, but I'm really curious like you said that you guys did this awesome streaming tech for this

1521
01:00:06,048 --> 01:00:10,410
You know early on in production where he gets into the interior and everything is seamless. Everything is brilliant

1522
01:00:10,650 --> 01:00:13,112
It took a whole month calendar month. I assume of

1523
01:00:13,552 --> 01:00:17,775
Development time it seems like with all that technology you built. Why was why did it take so long?

1524
01:00:18,973 --> 01:00:21,434
So it's essentially to do all the nitty gritty.

1525
01:00:21,754 --> 01:00:24,436
The question is, why did it take so long

1526
01:00:24,476 --> 01:00:26,998
to set up the interior transition in the Fisk base?

1527
01:00:27,538 --> 01:00:29,439
The answer, it's not like a tech thing.

1528
01:00:29,539 --> 01:00:32,581
It's just the content of framing the cinematic carefully

1529
01:00:32,962 --> 01:00:34,342
and being really careful about the budgets

1530
01:00:34,363 --> 01:00:36,624
because we're still limited by how much we can get

1531
01:00:36,644 --> 01:00:37,885
off the disk when we're loading stuff in.

1532
01:00:38,305 --> 01:00:40,546
And balancing the things and making the art the right size

1533
01:00:40,587 --> 01:00:41,367
so we can load it in.

1534
01:00:42,588 --> 01:00:44,469
Long story short, it's just a continual balancing act

1535
01:00:44,509 --> 01:00:46,390
and spinning that plate was a bit of a pain.

1536
01:00:53,256 --> 01:00:54,857
Where we're going, we don't need roads.

1537
01:01:00,620 --> 01:01:00,880
See ya.

1538
01:01:00,900 --> 01:01:06,423
Oh, there's one more.

1539
01:01:07,544 --> 01:01:07,684
Yep.

1540
01:01:08,445 --> 01:01:14,088
So when you were dealing with moving out and like derusing the people so they didn't have

1541
01:01:14,108 --> 01:01:16,749
really nice textures on them, what did you have to do for cars?

1542
01:01:16,789 --> 01:01:19,511
Did you also do that since the cars do look really nice in game?

1543
01:01:19,938 --> 01:01:24,540
The, yes, so the cars LOD less than the pedestrians do,

1544
01:01:25,380 --> 01:01:27,321
simply because we didn't have the programming resources

1545
01:01:27,341 --> 01:01:27,981
to do it quite as much.

1546
01:01:28,401 --> 01:01:30,522
It's okay though because the cars aren't skinned

1547
01:01:30,582 --> 01:01:32,722
to the same level and they're just less poly.

1548
01:01:33,442 --> 01:01:35,103
They do disappear, the one thing that they do

1549
01:01:35,143 --> 01:01:36,103
is like the moment they're out of view

1550
01:01:36,123 --> 01:01:36,803
and they go around a corner,

1551
01:01:36,843 --> 01:01:38,844
we just like move them back in from someplace else.

1552
01:01:39,164 --> 01:01:40,304
Oh, one other thing with the cars is,

1553
01:01:41,065 --> 01:01:42,825
so a car, an actual car chase would obviously

1554
01:01:42,865 --> 01:01:44,005
not be possible in Manhattan.

1555
01:01:44,045 --> 01:01:44,946
You'd get like three blocks.

1556
01:01:46,135 --> 01:01:48,497
So whenever there's a car chase in progress,

1557
01:01:48,557 --> 01:01:50,598
we actually look ahead on the spline where the car chase goes

1558
01:01:50,638 --> 01:01:51,880
and just despawn all the cars there.

1559
01:01:52,400 --> 01:01:53,281
The chase can actually happen.

1560
01:01:53,941 --> 01:01:56,503
OK, so when the car goes around a corner,

1561
01:01:56,523 --> 01:01:59,005
you just remove it so you don't have to worry about it

1562
01:01:59,045 --> 01:02:00,346
moving around and all that?

1563
01:02:00,547 --> 01:02:01,147
OK, thanks.

1564
01:02:02,828 --> 01:02:03,789
Just a quick question.

1565
01:02:05,391 --> 01:02:07,412
When you're looking at Manhattan from far away,

1566
01:02:07,993 --> 01:02:11,536
are you simulating any kind of traffic or pedestrian?

1567
01:02:11,616 --> 01:02:13,898
Like if I'm looking right down the road all the way

1568
01:02:13,978 --> 01:02:15,679
across multiple streaming levels?

1569
01:02:15,997 --> 01:02:17,678
Okay, so the question is, how much of the traffic

1570
01:02:17,718 --> 01:02:19,018
in the PEDs do we stream from far away?

1571
01:02:19,838 --> 01:02:20,998
The pedestrians, like I showed you,

1572
01:02:21,018 --> 01:02:23,039
it's the little sack people within a few blocks away.

1573
01:02:23,719 --> 01:02:26,780
The traffic is simulating out as far as you can see,

1574
01:02:26,800 --> 01:02:28,040
and that's one of the reasons why we didn't

1575
01:02:28,200 --> 01:02:29,380
LOD the cars down so much.

1576
01:02:30,220 --> 01:02:31,861
So you're simulating like the whole city, basically?

1577
01:02:31,881 --> 01:02:33,581
Well, no, we're simulating like the whole street

1578
01:02:33,601 --> 01:02:34,821
that you can see ahead of you, right?

1579
01:02:34,882 --> 01:02:36,482
If something is obscured into the sides,

1580
01:02:36,522 --> 01:02:37,822
like we're not simulating the traffic

1581
01:02:37,862 --> 01:02:39,142
left to the left and right when we're doing that.

1582
01:02:39,563 --> 01:02:42,083
As soon as you turn, those cars come into existence.

1583
01:02:42,923 --> 01:02:43,323
Thank you very much.

