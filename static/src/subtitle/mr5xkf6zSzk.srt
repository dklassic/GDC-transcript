1
00:00:07,217 --> 00:00:09,979
I'm going to have a lot of stuff to cover, so I'm going to go quickly.

2
00:00:10,580 --> 00:00:15,043
My intention here is mostly to plant a bunch of seeds, and hopefully some of them will

3
00:00:15,084 --> 00:00:17,846
take root, and you'll have some takeaways from this.

4
00:00:18,726 --> 00:00:26,112
So my, the title of the talk is Fast and Funky 1D Nonlinear Transformations, but really this

5
00:00:26,192 --> 00:00:29,495
is easing functions on steroids, what we're going to talk about.

6
00:00:29,955 --> 00:00:34,659
Or what the people in the AI summit would call normalized utility functions, right.

7
00:00:34,679 --> 00:00:35,420
These are all the same thing.

8
00:00:36,927 --> 00:00:40,591
So first I want to start by establishing the motivations of why we care about this.

9
00:00:40,831 --> 00:00:43,474
So I want to see a show of hands.

10
00:00:43,514 --> 00:00:48,940
Has anyone seen the talk on YouTube Juice It or Lose It by Martin Johansson?

11
00:00:49,321 --> 00:00:49,581
Awesome.

12
00:00:50,522 --> 00:00:53,084
Anyone who has not, I strongly recommend the talk.

13
00:00:53,124 --> 00:00:55,886
It's a really simple talk by some indie game developers

14
00:00:56,826 --> 00:00:59,148
who really make the case, brilliantly,

15
00:00:59,288 --> 00:01:02,169
for how important it is to really think about

16
00:01:02,249 --> 00:01:03,990
is this thing linear or non-linear?

17
00:01:04,611 --> 00:01:06,792
Does this thing feel mechanical or organic?

18
00:01:07,493 --> 00:01:10,234
And how to introduce those elements

19
00:01:10,314 --> 00:01:11,955
of what they call juice into your game.

20
00:01:13,396 --> 00:01:14,697
And then this talk on the right,

21
00:01:15,118 --> 00:01:16,318
has anyone seen this one,

22
00:01:16,358 --> 00:01:17,439
The Art of Screen Shake,

23
00:01:17,519 --> 00:01:19,501
by one of the guys from Lambeer?

24
00:01:19,701 --> 00:01:20,942
OK, not many people.

25
00:01:21,422 --> 00:01:22,503
Both excellent talks.

26
00:01:23,103 --> 00:01:25,946
Every YouTube list of videos

27
00:01:25,966 --> 00:01:27,607
that every game designer should see

28
00:01:27,667 --> 00:01:29,108
has at least these two talks on them,

29
00:01:29,188 --> 00:01:30,609
so I recommend them.

30
00:01:31,330 --> 00:01:32,350
So I'm gonna talk about

31
00:01:33,711 --> 00:01:34,732
these easing functions.

32
00:01:34,792 --> 00:01:36,493
So first of all, raise your hand

33
00:01:36,533 --> 00:01:38,275
if you know what an easing function is

34
00:01:38,335 --> 00:01:39,075
and you've used one.

35
00:01:40,656 --> 00:01:40,757
OK?

36
00:01:42,816 --> 00:01:44,958
Raise your hand if you know what smoothstep is.

37
00:01:44,978 --> 00:01:46,940
OK.

38
00:01:47,040 --> 00:01:47,581
About half.

39
00:01:49,142 --> 00:01:50,784
Raise your hand if you know how to derive

40
00:01:50,844 --> 00:01:53,007
that, if you were to invent smoothstep yourself.

41
00:01:54,048 --> 00:01:54,408
Perfect.

42
00:01:54,508 --> 00:01:54,728
OK.

43
00:01:54,748 --> 00:01:54,929
Good.

44
00:01:56,430 --> 00:01:57,571
Raise your hand if you use POW.

45
00:01:59,674 --> 00:01:59,794
OK.

46
00:02:01,797 --> 00:02:06,621
So we're talking about what I'm, again, calling fast and funky 1D nonlinear transformations.

47
00:02:06,681 --> 00:02:11,165
So first let me talk about the 1D part, which is the parametric nature of this.

48
00:02:11,345 --> 00:02:15,428
So very quickly, there's a difference between types of equations.

49
00:02:15,748 --> 00:02:20,252
I'm going to call the main difference being implicit equations versus parametric equations.

50
00:02:20,872 --> 00:02:22,634
So this is the implicit equation for a circle.

51
00:02:23,623 --> 00:02:24,823
x squared plus y squared equals 25.

52
00:02:25,604 --> 00:02:26,144
It's a rule.

53
00:02:26,784 --> 00:02:27,885
You either pass the rule

54
00:02:28,505 --> 00:02:29,826
or you fail the rule, right?

55
00:02:29,886 --> 00:02:32,267
So, points are either true or they're not true.

56
00:02:32,507 --> 00:02:35,549
If my x squared plus my y squared equals 25,

57
00:02:35,989 --> 00:02:37,290
I am on the circle.

58
00:02:37,430 --> 00:02:38,110
If not, I'm not.

59
00:02:38,270 --> 00:02:39,311
It's just a pass-fail test.

60
00:02:40,671 --> 00:02:42,492
Comparatively, a parametric function

61
00:02:42,693 --> 00:02:44,794
is one where we would have some number,

62
00:02:44,834 --> 00:02:45,774
typically one number,

63
00:02:46,034 --> 00:02:47,795
as the ones I'm going to be talking about today.

64
00:02:48,998 --> 00:02:52,161
that I'll shove into an equation and I'll get something out.

65
00:02:53,023 --> 00:02:55,626
In this case, it's small on the bottom here,

66
00:02:55,666 --> 00:02:59,691
but if we took the function cosine comma sine,

67
00:03:00,452 --> 00:03:03,175
that's the coordinates of a point moving around a circle, right?

68
00:03:03,696 --> 00:03:05,498
And so as I crank up time...

69
00:03:06,502 --> 00:03:09,224
or whatever this argument is, this parameter I'm passing in,

70
00:03:09,344 --> 00:03:11,405
eventually I'm going to travel around the whole circle.

71
00:03:12,006 --> 00:03:17,469
So any given value I put in for time, or t, as a generic thing,

72
00:03:18,149 --> 00:03:19,570
is going to be somewhere in the circle,

73
00:03:19,650 --> 00:03:22,212
and all of the points on the circle can be reachable by some t.

74
00:03:23,152 --> 00:03:26,813
We can make all kinds of other things parametric. This is from a talk I did a couple years ago here

75
00:03:28,214 --> 00:03:28,974
about curves,

76
00:03:30,095 --> 00:03:32,456
or parametric. This is a parametric equation for

77
00:03:33,436 --> 00:03:38,098
a spiral that's getting bigger and going out along the x-axis.

78
00:03:38,138 --> 00:03:41,960
You can see on the x it's just moving steadily forward with time,

79
00:03:43,061 --> 00:03:45,161
but on y and z it's going in a circle.

80
00:03:46,106 --> 00:03:51,528
cosine comma sine. And the circle's getting bigger as it goes, right? As t increases,

81
00:03:51,568 --> 00:03:55,589
it's like the radius of the circle's increasing. So you get this spiraling cone. But we don't

82
00:03:55,609 --> 00:04:00,971
have to have such fancy parametric things. Really, anything that we drive a float into

83
00:04:01,631 --> 00:04:07,073
conceptually and get some answer back out is of interest to us for this talk. So it

84
00:04:07,093 --> 00:04:11,415
could be something as simple as just a point moving from A to B, right? Where at A,

85
00:04:12,491 --> 00:04:17,613
t, the parametric variable, is 0, and then t reaches 1 at the other end.

86
00:04:19,113 --> 00:04:22,734
So really, anything you can express in terms of a single float as input.

87
00:04:23,234 --> 00:04:27,716
We can actually have multivariable parametric equations, but I'm just talking about simple

88
00:04:27,776 --> 00:04:28,296
parametrics.

89
00:04:29,562 --> 00:04:32,905
And of course, my presumption is that we use T

90
00:04:32,965 --> 00:04:35,186
because it originates from time, primarily.

91
00:04:35,206 --> 00:04:38,789
I don't know if that's true, but that is one of the most common ways

92
00:04:38,829 --> 00:04:42,611
we decide to turn the knob that drives the thing to move or whatever.

93
00:04:43,051 --> 00:04:46,554
So let's say we have a parametric function, any function,

94
00:04:46,574 --> 00:04:48,755
it could be any one of those that we saw, called P.

95
00:04:51,037 --> 00:04:54,960
So one of the first big points here is what we're manipulating

96
00:04:55,000 --> 00:04:56,080
and how we're going to manipulate it.

97
00:04:58,900 --> 00:05:05,566
Specifically, if I'm interpolating, say, colors, or anything else,

98
00:05:05,866 --> 00:05:07,868
like AI state or something like that,

99
00:05:09,089 --> 00:05:13,612
the point of this talk is to avoid having to deal with any of that code, right?

100
00:05:13,672 --> 00:05:15,454
You do not care what P is.

101
00:05:15,934 --> 00:05:17,556
It could be anything. It could be that spiral.

102
00:05:17,996 --> 00:05:19,357
Doesn't matter. It's not your problem.

103
00:05:19,557 --> 00:05:22,239
Your problem is just the thing you're passing into P.

104
00:05:23,240 --> 00:05:26,443
So we're just going to talk about messing with T, the parameter.

105
00:05:27,267 --> 00:05:28,890
into any parametric equation.

106
00:05:29,431 --> 00:05:31,635
And so we're gonna make these functions,

107
00:05:31,675 --> 00:05:34,200
these parametric functions like P or whatever they are,

108
00:05:34,500 --> 00:05:36,925
more interesting, but we're gonna do it on the outside.

109
00:05:36,945 --> 00:05:39,670
We're gonna be doing it by virtue of messing with T itself.

110
00:05:41,155 --> 00:05:43,076
So when we look for opportunities to do this,

111
00:05:43,896 --> 00:05:46,497
pretty much any time you have a single float anywhere,

112
00:05:46,577 --> 00:05:47,838
you can apply this stuff.

113
00:05:48,978 --> 00:05:51,059
Anything you can express in terms of a single float,

114
00:05:51,899 --> 00:05:54,660
and pretty much any time there's time involved at any level,

115
00:05:55,060 --> 00:05:55,820
this is an opportunity.

116
00:05:56,300 --> 00:05:57,941
So again, the big idea here is

117
00:05:58,341 --> 00:06:01,062
you can make any parametric equation much more cool and interesting

118
00:06:01,082 --> 00:06:02,522
without modifying the equation

119
00:06:03,263 --> 00:06:04,343
or knowing anything about it.

120
00:06:04,563 --> 00:06:05,423
You're just messing with T.

121
00:06:06,917 --> 00:06:09,900
Okay, so we're going to be manipulating T, that's the transformations part of this.

122
00:06:11,241 --> 00:06:16,726
And so it's fairly self-evident in computer science and in mathematics in general, there's

123
00:06:16,826 --> 00:06:21,189
two number ranges that I would say are the most significant, most important of all time,

124
00:06:21,209 --> 00:06:22,871
and that's the number range from 0 to 1.

125
00:06:24,332 --> 00:06:26,274
and the range from negative one to one.

126
00:06:26,775 --> 00:06:28,757
So these are useful for all kinds of stuff,

127
00:06:28,797 --> 00:06:30,578
like how much am I in shadow?

128
00:06:31,139 --> 00:06:33,181
How much brightness do I have?

129
00:06:33,381 --> 00:06:35,644
Is there falloff at the edge of a spotlight?

130
00:06:36,324 --> 00:06:39,187
Is something, you know, 65% complete?

131
00:06:39,708 --> 00:06:41,930
How much damage am I doing in a damage curve

132
00:06:41,970 --> 00:06:42,871
or damage potential?

133
00:06:42,951 --> 00:06:44,172
How much experience do I have?

134
00:06:44,213 --> 00:06:45,334
How much does something cost?

135
00:06:45,374 --> 00:06:46,755
Is there penalty? Is there fog?

136
00:06:47,116 --> 00:06:49,619
how aggressive is my AI on a scale from 0 to 1,

137
00:06:49,659 --> 00:06:51,582
what's my chance to hit, my chance to drop loot,

138
00:06:51,622 --> 00:06:52,443
my time complete,

139
00:06:53,044 --> 00:06:55,107
AI response curves, right, fuzzy logic.

140
00:06:55,387 --> 00:06:59,253
There's all kinds of things, potential things we can mess with

141
00:06:59,933 --> 00:07:01,716
to get juice into the system through this.

142
00:07:02,695 --> 00:07:04,816
Negative one to one is also cool.

143
00:07:05,456 --> 00:07:07,997
It's useful for noise in general and perturbation.

144
00:07:09,338 --> 00:07:10,618
For terrain and map generation.

145
00:07:11,158 --> 00:07:13,719
In general, when you have negative one to one,

146
00:07:14,259 --> 00:07:16,700
those tend to be used where you have some baseline

147
00:07:17,180 --> 00:07:19,621
and then you're going to be varying up and down from there.

148
00:07:19,701 --> 00:07:22,262
So let's say we're doing 2D Perlin noise

149
00:07:22,282 --> 00:07:24,583
to generate heights for a Minecraft game.

150
00:07:25,623 --> 00:07:29,064
We could say by default the ground is at 64,

151
00:07:29,564 --> 00:07:30,524
plus or minus some.

152
00:07:31,515 --> 00:07:34,036
We can use this for distribution or like,

153
00:07:34,937 --> 00:07:36,858
say in a population we have a thousand orcs

154
00:07:36,938 --> 00:07:38,899
and we want them to all be about six foot three,

155
00:07:39,019 --> 00:07:40,640
plus or minus a few inches, right?

156
00:07:40,680 --> 00:07:42,941
So we could use functions in the negative one to one range.

157
00:07:43,281 --> 00:07:44,682
And of course anything sinusoidal,

158
00:07:45,503 --> 00:07:47,584
whether it's going to be pulsing or fluctuating

159
00:07:47,644 --> 00:07:50,025
or just kind of hovering like that.

160
00:07:50,445 --> 00:07:53,487
And also AI response curves tend to use this as well,

161
00:07:53,547 --> 00:07:56,129
where we have both a positive or negative reaction to something,

162
00:07:56,229 --> 00:07:57,810
like a disposition towards another actor.

163
00:07:59,411 --> 00:08:00,891
But today we're going to focus on zero to one.

164
00:08:02,058 --> 00:08:05,000
So I should have called this Fast and Funky 1D

165
00:08:05,280 --> 00:08:07,421
normalized nonlinear transformations,

166
00:08:08,081 --> 00:08:09,762
functions that are in the 0 to 1 range.

167
00:08:10,983 --> 00:08:13,604
So when I say normalized, I mean a couple things.

168
00:08:15,385 --> 00:08:19,366
Something where if you put in a 0 as your input value,

169
00:08:19,406 --> 00:08:20,407
you get out a 0.

170
00:08:21,487 --> 00:08:22,728
So 0 is 0.

171
00:08:23,328 --> 00:08:24,589
And if you put in a 1, you get out a 1.

172
00:08:25,758 --> 00:08:27,419
But if you put out something in between,

173
00:08:28,099 --> 00:08:29,820
that's where the interesting stuff happens.

174
00:08:30,681 --> 00:08:33,862
So specifically I want, I'm interested in talking about functions where

175
00:08:35,683 --> 00:08:37,924
the function of 0 is 0, the function of 1 is 1,

176
00:08:38,564 --> 00:08:41,485
but specifically it's more interesting than linear.

177
00:08:42,366 --> 00:08:45,747
If I plug in a .3, it tends to not be a .3 on the way.

178
00:08:49,511 --> 00:08:51,672
So that's the non-linearity part of this.

179
00:08:52,572 --> 00:08:54,072
And so some simple example of this

180
00:08:54,112 --> 00:08:56,073
would be like moving a position over time.

181
00:08:56,113 --> 00:08:57,754
A UI widget could come in, right,

182
00:08:57,894 --> 00:08:59,734
or a missile could come in or something like that.

183
00:09:00,434 --> 00:09:03,575
Scaling something up, alphaing in, especially in 2D games.

184
00:09:03,916 --> 00:09:06,596
We could be interpolating color or strength or aggression

185
00:09:06,856 --> 00:09:10,278
into these things, typically over time or something.

186
00:09:11,138 --> 00:09:14,179
So I've got a demo that's hopefully running here.

187
00:09:18,148 --> 00:09:19,528
Okay, so here I've got,

188
00:09:19,548 --> 00:09:21,829
because we're going to be going back to this a couple times,

189
00:09:22,409 --> 00:09:23,569
on the bottom I have a runway,

190
00:09:23,729 --> 00:09:25,489
just shows a ball going from left to right,

191
00:09:26,189 --> 00:09:28,910
and it's moving at a linear speed.

192
00:09:30,250 --> 00:09:31,951
And you can see on the top is the graph,

193
00:09:32,051 --> 00:09:33,191
where as I move to the right,

194
00:09:33,591 --> 00:09:35,251
I'm also moving up by the same amount.

195
00:09:35,331 --> 00:09:37,112
The right is input, up is output.

196
00:09:37,792 --> 00:09:39,652
And then next to it I have a double ring

197
00:09:39,712 --> 00:09:42,052
that's scaling up using that,

198
00:09:42,313 --> 00:09:43,253
the result of the function.

199
00:09:43,793 --> 00:09:46,173
And then next to it is something that's fading in.

200
00:09:47,014 --> 00:09:48,695
You'll notice something interesting, the fading in.

201
00:09:48,735 --> 00:09:51,196
It looks like it fades in most of it right away.

202
00:09:51,817 --> 00:09:53,558
It's actually a linear fade-in, right?

203
00:09:53,598 --> 00:09:55,960
This talks back to Jim's point about

204
00:09:56,360 --> 00:09:58,402
the perception of alpha being non-linear,

205
00:09:59,282 --> 00:09:59,943
which is very interesting.

206
00:09:59,963 --> 00:10:01,944
And then lastly, you have this thing on the right that's moving.

207
00:10:03,738 --> 00:10:06,039
And then of course, if I square it,

208
00:10:06,140 --> 00:10:08,881
now I have things that are just a little more interesting.

209
00:10:09,482 --> 00:10:11,703
Like the thing on the right starts off slow,

210
00:10:11,764 --> 00:10:12,684
and then it goes faster.

211
00:10:13,205 --> 00:10:14,646
That's not super cool yet.

212
00:10:15,206 --> 00:10:18,668
But certainly, x squared is better than just x.

213
00:10:19,349 --> 00:10:22,131
We're at least starting to get some sort of interest.

214
00:10:23,763 --> 00:10:26,645
One interesting thing of note, two things of note, I'll say,

215
00:10:27,566 --> 00:10:30,107
is when you square something, normally we think of that making it bigger,

216
00:10:30,148 --> 00:10:33,430
but of course, we all know when you square something that's fractional,

217
00:10:33,450 --> 00:10:34,431
it gets smaller, right?

218
00:10:34,851 --> 00:10:37,713
So if you take one-half times one-half, it actually goes down to a quarter.

219
00:10:38,994 --> 00:10:41,976
And so that's kind of unique, is that through this entire range

220
00:10:41,996 --> 00:10:44,938
that we care about from zero to one, squaring reduces values.

221
00:10:45,718 --> 00:10:48,219
Another thing that's unique is when I have a x squared,

222
00:10:48,259 --> 00:10:49,819
it looks like a parabola, right?

223
00:10:49,919 --> 00:10:51,960
And I have x cubed, it looks sort of like this.

224
00:10:52,680 --> 00:10:54,180
And then x to the fourth looks like this.

225
00:10:54,280 --> 00:10:55,880
And then x to the fifth looks like this.

226
00:10:55,920 --> 00:10:57,261
We have odd and even functions.

227
00:10:58,021 --> 00:11:00,921
That doesn't exist, that distinction in the 0 to 1 range.

228
00:11:02,102 --> 00:11:04,262
So there are a lot of special exceptions here

229
00:11:04,282 --> 00:11:05,002
that we're going to be making.

230
00:11:05,022 --> 00:11:07,503
And we're going to be able to do some sort of funky things

231
00:11:07,583 --> 00:11:09,403
like this, right, as we play with this.

232
00:11:12,183 --> 00:11:12,363
Okay.

233
00:11:14,116 --> 00:11:17,099
So, we said these are also called easing functions.

234
00:11:19,681 --> 00:11:21,303
That's if you're an artist or an animator.

235
00:11:21,563 --> 00:11:22,905
They're called filter functions.

236
00:11:23,325 --> 00:11:25,187
Lerping functions, which I find funny because

237
00:11:25,807 --> 00:11:28,450
specifically lerping means linear interpolation and they're not linear.

238
00:11:29,491 --> 00:11:33,955
And tweening functions, which is like more of an animation term for in-betweening.

239
00:11:36,236 --> 00:11:39,818
So, and a lot of those terms are referring to the same kinds of things,

240
00:11:39,878 --> 00:11:42,880
but they have a bias for where they're coming from, right?

241
00:11:43,060 --> 00:11:45,822
So we said tweening is creating animation frames

242
00:11:45,842 --> 00:11:48,504
that don't exist between keyframes, the in-betweening.

243
00:11:49,805 --> 00:11:51,866
But really, the math is super universal in this,

244
00:11:51,886 --> 00:11:53,187
and like we said, you could use it anywhere.

245
00:11:54,108 --> 00:11:57,390
I'm, for going forward, going to use the word easing a lot,

246
00:11:57,410 --> 00:11:58,050
because it's short,

247
00:11:58,711 --> 00:12:01,112
and tweening sounds like something your 13-year-old would do.

248
00:12:02,233 --> 00:12:02,373
So...

249
00:12:05,141 --> 00:12:10,365
One of, first of many examples is if you're doing something as simple as a range mapping,

250
00:12:10,425 --> 00:12:16,270
right? If you have an input and output ranges. Let's say I have a strength from 3 to 18,

251
00:12:17,411 --> 00:12:24,117
and I have a damage modifier that at 3 strength I do half damage and at 18 strength I do double

252
00:12:24,137 --> 00:12:30,563
damage. A range map would be, I have a 7 strength, what should my damage be, right? Or Celsius

253
00:12:30,583 --> 00:12:32,084
to Fahrenheit conversion, anything like that.

254
00:12:32,773 --> 00:12:37,054
Whenever you do these kinds of conversions and typically throughout all kinds of game code math,

255
00:12:37,895 --> 00:12:43,076
almost always there's some moment where the math is in a, temporarily in a 0 to 1 range,

256
00:12:43,096 --> 00:12:48,957
and that's your opportunity to do some sort of non-linear easing function on it, right?

257
00:12:49,157 --> 00:12:52,138
And usually that comes at no cost or no additional cost.

258
00:12:53,758 --> 00:12:57,459
Okay, so let's build up a library of a couple functions we can use here.

259
00:12:57,599 --> 00:12:58,959
Let's start with smooth start.

260
00:13:00,725 --> 00:13:02,186
And that's just X squared, right?

261
00:13:02,206 --> 00:13:03,126
That was the first one we tried.

262
00:13:03,767 --> 00:13:05,967
And of course, we can make this be X squared,

263
00:13:06,087 --> 00:13:07,368
X cubed, X to the fourth,

264
00:13:08,308 --> 00:13:12,070
to make that curve be as dramatic as we want it to be.

265
00:13:13,170 --> 00:13:15,411
And obviously, we would actually write this

266
00:13:15,511 --> 00:13:18,432
with T times T, not pow.

267
00:13:19,452 --> 00:13:21,773
Maybe the compiler would do the right thing,

268
00:13:21,813 --> 00:13:22,533
but probably not.

269
00:13:24,214 --> 00:13:25,775
And if we look at that...

270
00:13:26,953 --> 00:13:31,856
Here are smooth start, second order, third order, and fourth order smooth starts together.

271
00:13:32,397 --> 00:13:34,358
You can see them on the bottom in the racetrack.

272
00:13:34,839 --> 00:13:36,180
They all start at the same time.

273
00:13:36,840 --> 00:13:37,961
They all end at the same time.

274
00:13:38,856 --> 00:13:41,277
But the curve is more exaggerated for the blue one.

275
00:13:41,617 --> 00:13:43,818
So the blue one has a much slower start.

276
00:13:44,599 --> 00:13:47,020
And which means that he has to go much faster at the end

277
00:13:47,080 --> 00:13:49,621
to catch up, to be on time with everyone else.

278
00:13:49,982 --> 00:13:53,723
And there's no like fancy solutions to make this happen.

279
00:13:53,763 --> 00:13:58,146
You just go from 0 to 1 and they just will be on time always, right?

280
00:13:58,446 --> 00:13:58,906
Automatically.

281
00:14:03,068 --> 00:14:05,889
So again, they're all based on the same parameter in this case,

282
00:14:06,169 --> 00:14:07,990
and they're all going from 0 to 1,

283
00:14:08,490 --> 00:14:09,930
and the higher the power, the more exaggerated.

284
00:14:10,811 --> 00:14:13,491
This particular one, this one I'm calling smooth start,

285
00:14:13,912 --> 00:14:15,432
is sometimes called ease-in.

286
00:14:16,492 --> 00:14:18,113
I find that to be a confusing term.

287
00:14:18,233 --> 00:14:20,013
So let me take a quick pop quiz.

288
00:14:21,114 --> 00:14:22,974
When I say the prefix quad,

289
00:14:23,934 --> 00:14:25,195
what number comes in everyone's head?

290
00:14:26,675 --> 00:14:28,216
Right? Quadrilateral, quadruped.

291
00:14:28,736 --> 00:14:31,417
No, except quadratic equation is second order, right?

292
00:14:34,506 --> 00:14:37,327
OK, so wait. If quadratic is second order and cubic is third order,

293
00:14:37,407 --> 00:14:39,547
what are the terms for fourth and fifth order?

294
00:14:40,388 --> 00:14:40,848
Who knows them?

295
00:14:43,649 --> 00:14:44,669
Six people know them. Yeah.

296
00:14:45,089 --> 00:14:47,690
Quadratic, cubic, quartic, quintic. Right?

297
00:14:48,943 --> 00:14:49,283
Whatever.

298
00:14:50,504 --> 00:14:52,626
So when you see, especially, I mean,

299
00:14:52,646 --> 00:14:54,227
this is a room full of game programmers,

300
00:14:54,308 --> 00:14:56,910
and we only sort of know some of them.

301
00:14:57,250 --> 00:14:59,152
You have your artist looking at ease-in quad,

302
00:14:59,272 --> 00:14:59,932
ease-in cubic.

303
00:14:59,972 --> 00:15:02,374
Of course, it's very easy to assume that quad

304
00:15:02,414 --> 00:15:03,415
is bigger than cubic, right?

305
00:15:03,435 --> 00:15:03,916
But it isn't.

306
00:15:04,536 --> 00:15:05,557
So these are terrible names.

307
00:15:06,177 --> 00:15:08,079
They're actually worse names than that.

308
00:15:08,740 --> 00:15:11,021
If you imagine a train easing into the station, right?

309
00:15:11,041 --> 00:15:12,323
The train is coming to a stop,

310
00:15:12,963 --> 00:15:13,684
and it eases in.

311
00:15:14,164 --> 00:15:15,525
And then when it's time to go out,

312
00:15:15,705 --> 00:15:17,827
it eases it back out of the station, right?

313
00:15:18,808 --> 00:15:21,709
that's what it means. Actually, that's exactly the opposite of

314
00:15:21,749 --> 00:15:24,710
what it means. Easing in means the beginning of

315
00:15:24,750 --> 00:15:27,290
the curve. Easing out is at the end. I

316
00:15:27,330 --> 00:15:29,231
think they're terrible terms for a bunch of reasons.

317
00:15:30,011 --> 00:15:31,792
So I strongly discourage the use of them.

318
00:15:33,872 --> 00:15:36,593
So I'm gonna use smooth start. Let's say we

319
00:15:36,613 --> 00:15:39,114
wanted to add another function now, smooth stop, right.

320
00:15:39,134 --> 00:15:40,934
This is the same idea, except we want it

321
00:15:40,974 --> 00:15:44,395
to start quickly and then stop at a nice

322
00:15:44,655 --> 00:15:47,036
smooth stop. So how would we do this?

323
00:15:48,268 --> 00:15:53,391
Well, our math intuition might be to say, well, let's do the opposite of smooth start, right?

324
00:15:53,651 --> 00:15:57,733
Smooth start was x squared, let's do square root, right? That's the inverse.

325
00:15:59,453 --> 00:16:00,534
But that's not the right curve.

326
00:16:02,735 --> 00:16:06,897
Smooth, square root actually doesn't even have a smooth stop, right?

327
00:16:06,937 --> 00:16:08,798
And it's expensive. Why would we do that?

328
00:16:09,678 --> 00:16:10,598
So that's not the right thing.

329
00:16:12,449 --> 00:16:15,511
And one of the things we want these to be is fast, right?

330
00:16:15,611 --> 00:16:19,474
Part of why, part of this is because we want to be able to say,

331
00:16:19,675 --> 00:16:22,977
sure, let's do that on a million particles, no problem, right?

332
00:16:23,017 --> 00:16:27,801
We want to just be able to willy-nilly have this as a ready-to-grab tool in our arsenal.

333
00:16:28,581 --> 00:16:32,764
So how do we go about building and discovering these new functions?

334
00:16:32,804 --> 00:16:35,346
Smoothstop is not going to be that complicated, but let's go through it

335
00:16:36,127 --> 00:16:37,508
and see if we can learn anything from it.

336
00:16:38,953 --> 00:16:41,915
So we have something in a zero to one range.

337
00:16:42,075 --> 00:16:43,876
There's a lot of stuff we can do to it.

338
00:16:44,777 --> 00:16:47,118
Right? We already said squaring is one of those things.

339
00:16:47,638 --> 00:16:49,719
And squaring is cool, because zero squared is zero,

340
00:16:49,759 --> 00:16:51,720
and one squared is one. So it keeps it in the range.

341
00:16:51,940 --> 00:16:52,100
Right?

342
00:16:53,321 --> 00:16:53,961
What else could we do?

343
00:16:56,503 --> 00:16:57,003
We could flip it.

344
00:16:58,624 --> 00:16:59,224
One minus x.

345
00:17:00,905 --> 00:17:02,706
What if we flip it, and then square that,

346
00:17:04,247 --> 00:17:05,027
and then flip it back?

347
00:17:06,208 --> 00:17:07,008
That's smooth stuff.

348
00:17:09,221 --> 00:17:11,722
So let's do that math-wise. So it's flip, square, flip.

349
00:17:12,462 --> 00:17:13,382
So if we start with x,

350
00:17:14,243 --> 00:17:16,644
we do 1 minus x to flip it, and then we square that,

351
00:17:17,804 --> 00:17:18,844
and then we do 1 minus that.

352
00:17:19,745 --> 00:17:21,766
So that's the equation for smooth-step, right?

353
00:17:21,966 --> 00:17:22,586
Crazy fast.

354
00:17:23,446 --> 00:17:24,567
Way faster than square root.

355
00:17:25,987 --> 00:17:27,748
And it was easier for us to invent it ourselves.

356
00:17:27,908 --> 00:17:30,889
And of course, in this form, now it makes perfect sense.

357
00:17:31,629 --> 00:17:33,290
I can easily express smooth-stop 2, 3, 4,

358
00:17:33,910 --> 00:17:36,351
for 5, 6 different powers,

359
00:17:36,511 --> 00:17:38,352
just by increasing the exponent, right?

360
00:17:41,043 --> 00:17:44,487
So, again, if we look at that comparatively,

361
00:17:44,647 --> 00:17:46,609
here you've got a bunch of different smooth stoppers,

362
00:17:47,129 --> 00:17:49,872
and the one on the left comes to a smooth stop

363
00:17:49,912 --> 00:17:53,276
and that his velocity is zero by the time he reaches there.

364
00:17:53,876 --> 00:17:55,798
But that's actually kind of like somebody slamming

365
00:17:55,858 --> 00:17:57,320
on the brakes really, really hard

366
00:17:57,380 --> 00:17:59,242
until they come to a stop at the stoplight.

367
00:17:59,342 --> 00:18:01,464
You're like, yep, you arrived at the right place

368
00:18:01,725 --> 00:18:02,545
at zero miles an hour.

369
00:18:03,163 --> 00:18:03,983
and it was not pleasant.

370
00:18:04,504 --> 00:18:07,685
Smooth stop three would be you arrive there

371
00:18:08,085 --> 00:18:11,167
and your acceleration, or in this case deceleration,

372
00:18:11,647 --> 00:18:13,809
comes to zero right when your velocity comes to zero.

373
00:18:14,089 --> 00:18:16,370
That's the good driver who feathers off the brake

374
00:18:17,070 --> 00:18:18,391
right until the last second,

375
00:18:18,431 --> 00:18:19,692
and you just kind of roll to a stop.

376
00:18:20,652 --> 00:18:24,034
But you still have this sensation of jerk, right,

377
00:18:24,094 --> 00:18:25,415
if it's happening very quickly.

378
00:18:25,935 --> 00:18:26,615
In fact, that is the...

379
00:18:28,560 --> 00:18:33,342
next order after acceleration. And smoothstop4 has no jerk either at the end.

380
00:18:35,464 --> 00:18:41,907
OK. So, mathematicians probably, since they love polynomials, would be tempted to multiply

381
00:18:41,947 --> 00:18:45,709
these things out, right? We had these beautiful terms here, and they would probably go and

382
00:18:45,749 --> 00:18:53,253
ruin them. Which is really dumb, first of all, because the one minus, one minus x is

383
00:18:53,333 --> 00:18:56,935
cleaner, and it actually is going to be less code to compute.

384
00:18:57,996 --> 00:18:59,777
And in fact, this is true with a lot of things like

385
00:19:00,237 --> 00:19:01,337
Bezier curves and stuff.

386
00:19:01,498 --> 00:19:04,499
That you can get some really fast forms

387
00:19:04,539 --> 00:19:07,621
if you think of 1 minus t as a separate expression.

388
00:19:08,601 --> 00:19:10,102
So it's faster, it's clearer,

389
00:19:10,302 --> 00:19:11,823
it shows its evolutionary form.

390
00:19:11,863 --> 00:19:13,204
So we sort of know how we got it there.

391
00:19:14,064 --> 00:19:16,486
So, so far we've got smooth start, 2, 3, 4, 5.

392
00:19:18,087 --> 00:19:18,847
Smooth stop, 2, 3, 4, 5.

393
00:19:21,108 --> 00:19:22,869
So let's build a library of some more of these things.

394
00:19:22,889 --> 00:19:24,430
And we're going to invent them ourselves, right?

395
00:19:25,617 --> 00:19:27,718
So we're also going to be building a library

396
00:19:27,898 --> 00:19:30,119
or a collection of techniques that we can use

397
00:19:30,239 --> 00:19:34,561
to explore and discover these cool easing functions.

398
00:19:35,281 --> 00:19:37,542
So, so far we've tried squaring things and flipping them.

399
00:19:37,862 --> 00:19:39,343
Already that's been pretty successful, right?

400
00:19:39,363 --> 00:19:40,163
Let's get some more of those.

401
00:19:41,724 --> 00:19:43,104
Obviously when I say squaring, I mean

402
00:19:44,025 --> 00:19:45,165
raising it to a power, right?

403
00:19:46,646 --> 00:19:47,666
So what else could we do?

404
00:19:50,307 --> 00:19:53,388
Let's say we took two different functions and...

405
00:19:54,163 --> 00:20:00,447
did a mix of them. Like a 50-50 blend or a 70-30 blend. We could do that, right?

406
00:20:03,129 --> 00:20:09,153
For example, let's say we had smooth start and we're crossfading it or blending it with

407
00:20:09,253 --> 00:20:15,737
smooth stop. What would that be like? I think I have... yeah.

408
00:20:16,837 --> 00:20:20,379
Okay, so, hopefully this will read. Yeah.

409
00:20:21,609 --> 00:20:24,111
So if you look at just the top left curve for a moment,

410
00:20:24,151 --> 00:20:26,232
the red curve, that's smooth start, right?

411
00:20:26,292 --> 00:20:27,173
I'm starting smooth.

412
00:20:27,753 --> 00:20:30,536
But as I move the mouse now, I can easily change it,

413
00:20:30,656 --> 00:20:33,278
the mix between smooth start and smooth stop.

414
00:20:33,938 --> 00:20:35,259
That's pretty trivial to do, right?

415
00:20:35,980 --> 00:20:36,821
It's just a crossfade.

416
00:20:37,982 --> 00:20:39,403
And so one of the cool things we can do...

417
00:20:39,423 --> 00:20:44,307
Oh, and by the way, halfway through that crossfade

418
00:20:45,327 --> 00:20:46,208
happens to be linear.

419
00:20:49,471 --> 00:20:50,511
So we'll come back to that in a second.

420
00:20:53,520 --> 00:20:55,222
There's some other interesting things we can do here.

421
00:20:55,922 --> 00:20:58,604
For example, let's say we wanted to use pow,

422
00:20:58,644 --> 00:21:00,445
like in Jim's Scamma example, right?

423
00:21:00,465 --> 00:21:03,608
Where we want to raise something to an odd power,

424
00:21:04,428 --> 00:21:06,610
like 2.2 or 2.6 or something like that.

425
00:21:07,290 --> 00:21:08,972
Or maybe even like to a large power,

426
00:21:08,992 --> 00:21:12,814
like for a glossy glare in Specular or something like that.

427
00:21:14,716 --> 00:21:16,877
Well, obviously pow is slow, right?

428
00:21:16,917 --> 00:21:17,598
How slow is it?

429
00:21:17,618 --> 00:21:19,839
Well, it's guaranteed to be at least as slow

430
00:21:19,980 --> 00:21:22,321
as square root, because it can do square root, right?

431
00:21:23,291 --> 00:21:24,792
and you can raise something to the one-half power.

432
00:21:24,852 --> 00:21:27,495
So by definition, it must be at least as slow.

433
00:21:27,535 --> 00:21:29,376
In practice, on my machine, it's ten times slower.

434
00:21:30,037 --> 00:21:32,198
Like 200, 220 cycle latency.

435
00:21:34,300 --> 00:21:37,603
OK, so can we hack that?

436
00:21:38,884 --> 00:21:40,966
Well, we know smooth start two is x squared.

437
00:21:40,986 --> 00:21:43,028
We know smooth start three is x cubed.

438
00:21:43,848 --> 00:21:47,792
So in general, we're saying smooth start n is x to the n.

439
00:21:48,332 --> 00:21:49,233
What would smooth start 2.2 be?

440
00:21:51,962 --> 00:21:54,924
Well, obviously we're just going to raise it to the 2.2 power, right?

441
00:21:55,545 --> 00:21:56,826
But that's using pow.

442
00:21:58,188 --> 00:21:59,028
So I'm trying to avoid that.

443
00:21:59,068 --> 00:22:00,290
Is there a way we can avoid that?

444
00:22:00,590 --> 00:22:01,511
Turns out that there is.

445
00:22:02,172 --> 00:22:05,074
With smoothstart, say 2.2, I can do a mix, an 80-20 blend of

446
00:22:09,768 --> 00:22:13,209
20% smooth start and 80% smooth start 3.

447
00:22:14,209 --> 00:22:18,231
And get something, or a 40-60 blend of smooth start 2 and 3.

448
00:22:19,011 --> 00:22:21,612
And actually get something that's 99% better, actually

449
00:22:21,712 --> 00:22:24,173
much more accurate than that, in the 0 to 1 range,

450
00:22:24,233 --> 00:22:25,534
and way, way faster.

451
00:22:26,594 --> 00:22:27,294
10x is conservative.

452
00:22:28,475 --> 00:22:32,156
Or I could just write fake pow as a blend of x squared and x

453
00:22:32,196 --> 00:22:32,457
cubed.

454
00:22:34,884 --> 00:22:38,405
OK. We could also do a crossfade, where we're going to do like a mix,

455
00:22:38,925 --> 00:22:41,326
but we're going to use, as the blend weight itself,

456
00:22:42,987 --> 00:22:43,687
the parameter.

457
00:22:44,387 --> 00:22:49,569
So now t is the mix weight between the start and the stop functions.

458
00:22:49,709 --> 00:22:50,849
So now if you look at the red,

459
00:22:51,609 --> 00:22:53,990
at the start it's totally smooth start,

460
00:22:54,050 --> 00:22:56,031
and at the end it's totally smooth stop.

461
00:22:56,111 --> 00:22:58,311
So it gets the benefits at both ends of those, right?

462
00:22:58,711 --> 00:23:00,212
And it's changing on the fly,

463
00:23:00,512 --> 00:23:02,973
as it does a crossfade, a live crossfade between those.

464
00:23:03,639 --> 00:23:05,360
And actually that is smoothstep.

465
00:23:05,440 --> 00:23:06,240
We just derived it.

466
00:23:07,081 --> 00:23:07,261
Right?

467
00:23:07,381 --> 00:23:09,662
If you look at the red and the green balls

468
00:23:09,822 --> 00:23:11,723
on the runway together, they're totally in sync

469
00:23:11,803 --> 00:23:12,263
with each other.

470
00:23:13,004 --> 00:23:14,905
So that is one way you can derive smoothstep.

471
00:23:15,865 --> 00:23:17,606
And smoothstep itself has that same problem

472
00:23:17,626 --> 00:23:19,227
where your velocity comes to zero,

473
00:23:20,027 --> 00:23:21,988
but your acceleration is still abrupt.

474
00:23:22,088 --> 00:23:24,730
So you could have a smoother step, et cetera,

475
00:23:24,950 --> 00:23:26,431
like is shown in the third picture.

476
00:23:32,327 --> 00:23:35,009
So what else can we do that's interesting?

477
00:23:35,069 --> 00:23:37,831
We can scale things, like just multiply them by t

478
00:23:38,292 --> 00:23:39,373
on top of whatever else.

479
00:23:39,553 --> 00:23:42,035
If, as long as we have them in the 0 to 1 range, right,

480
00:23:42,095 --> 00:23:42,996
that should be harmless.

481
00:23:43,036 --> 00:23:45,418
We have 0 to 1 times another 0 to 1.

482
00:23:46,138 --> 00:23:48,781
We could multiply it by 1 minus t,

483
00:23:49,081 --> 00:23:50,282
which I'll call reverse scale.

484
00:23:51,983 --> 00:23:55,767
In fact, if we do t times 1 minus t,

485
00:23:56,427 --> 00:24:00,871
we can get this sort of arch feel, like that.

486
00:24:01,818 --> 00:24:03,238
That's just T times one minus T.

487
00:24:04,559 --> 00:24:04,979
Normalized.

488
00:24:06,299 --> 00:24:08,140
And see the red ball goes out and back, right?

489
00:24:08,960 --> 00:24:10,161
And I can go further with that.

490
00:24:10,221 --> 00:24:11,821
I can say, well, I'm gonna take that,

491
00:24:12,381 --> 00:24:13,302
scale it with T,

492
00:24:13,502 --> 00:24:16,343
so there's an extra sort of smooth startness to it.

493
00:24:17,063 --> 00:24:18,203
And that's this green one,

494
00:24:18,263 --> 00:24:20,604
where it's kind of like smoothing in from the left

495
00:24:21,024 --> 00:24:22,585
and sort of a lopsided thing.

496
00:24:23,405 --> 00:24:25,386
Or I could have it where I'm doing it,

497
00:24:25,486 --> 00:24:27,046
reverse scaling the arch again,

498
00:24:27,266 --> 00:24:28,247
and so now it's coming in

499
00:24:28,927 --> 00:24:30,227
and it's biased from the other side.

500
00:24:33,569 --> 00:24:36,370
I could reverse scale the scale of the arch.

501
00:24:36,450 --> 00:24:38,611
I can smooth stop times smooth start.

502
00:24:38,971 --> 00:24:41,432
I can start multiplying any of these functions

503
00:24:41,472 --> 00:24:42,672
times any of these other functions

504
00:24:42,732 --> 00:24:44,353
and start getting really interesting things.

505
00:24:44,413 --> 00:24:48,094
For example, this bell curve six is a sixth order function,

506
00:24:48,134 --> 00:24:51,696
which is just smooth stop three times smooth start three.

507
00:24:53,296 --> 00:24:55,357
And that looks like the green one in the middle there.

508
00:24:55,377 --> 00:24:58,498
So that's a bell curve that has really, really nice velocity

509
00:24:58,518 --> 00:24:59,698
and acceleration at the end points.

510
00:25:02,544 --> 00:25:04,905
And I can start nesting these things too, right?

511
00:25:05,065 --> 00:25:08,187
Calling a function, nested within a function within a function.

512
00:25:08,607 --> 00:25:10,629
And so there's all kinds of cool stuff I can discover that way.

513
00:25:12,530 --> 00:25:14,851
One thing I can do is have bouncing.

514
00:25:14,931 --> 00:25:17,533
Like, this is a really simple function, bounceClampBottom.

515
00:25:17,633 --> 00:25:19,814
This is a zero to one function that returns zero to one.

516
00:25:20,335 --> 00:25:21,796
All this does is absolute value.

517
00:25:21,836 --> 00:25:25,298
So if I go negative, it feels like I bounced off the bottom, right?

518
00:25:25,638 --> 00:25:27,899
And I could write one that's like, bounce off the top too.

519
00:25:29,100 --> 00:25:30,201
In random order, apparently.

520
00:25:32,254 --> 00:25:34,135
Right? And I could bounce off the top and the bottom.

521
00:25:34,355 --> 00:25:36,076
And so I could easily have something like

522
00:25:36,657 --> 00:25:37,457
this blue one here,

523
00:25:38,178 --> 00:25:40,039
where the function just goes out of range

524
00:25:40,099 --> 00:25:41,060
and comes back in range.

525
00:25:41,120 --> 00:25:41,560
But since I'm

526
00:25:43,081 --> 00:25:45,342
doing one minus the value

527
00:25:45,402 --> 00:25:46,923
and then absolute valuing that,

528
00:25:46,983 --> 00:25:48,264
and then one minus it back,

529
00:25:49,345 --> 00:25:51,186
I get a bouncing off the top feel.

530
00:25:54,903 --> 00:25:58,725
Last but not least, we can always go back to my favorite friend,

531
00:25:59,305 --> 00:26:02,867
Bezier curves, and we can use cubic, quartic, quintic, however we want.

532
00:26:03,387 --> 00:26:05,268
And we can actually optimize them in,

533
00:26:05,708 --> 00:26:09,429
we don't need the general case, we can say we assume that they go from 0 to 1.

534
00:26:10,009 --> 00:26:13,091
So if you have a Bezier that goes through points A, B, C, D, control points,

535
00:26:13,191 --> 00:26:17,212
you could just say A is 0, so those terms are just erased from the code,

536
00:26:17,933 --> 00:26:20,013
and D is 1, and the code simplifies, right?

537
00:26:20,073 --> 00:26:21,754
You can even have a seventh order Bezier like that.

538
00:26:23,500 --> 00:26:26,223
So that's it. I think I'm out of time already. Is that true?

539
00:26:28,165 --> 00:26:32,690
So I'll take any questions if we have time for a little bit.

540
00:26:34,432 --> 00:26:34,572
Yeah.

541
00:26:43,102 --> 00:26:47,645
Yeah, you can get 99% accurate sigmoid, Gaussian,

542
00:26:47,905 --> 00:26:50,567
everything you care about, unless it's like hyper-precise.

543
00:26:51,148 --> 00:26:54,410
Don't use the raise to an awkward power underneath the thing, right?

544
00:26:54,430 --> 00:26:55,731
This is like 20 times faster.

545
00:26:56,512 --> 00:26:56,672
Yeah.

546
00:26:58,213 --> 00:26:59,414
Oh, I'm sorry, the question was,

547
00:26:59,714 --> 00:27:01,536
he likes to use Gaussian distributions,

548
00:27:01,556 --> 00:27:03,977
which is the official perfect bell curve.

549
00:27:04,578 --> 00:27:07,440
But in practice, unless it has to be official and perfect,

550
00:27:07,960 --> 00:27:09,462
then you don't have to use the real thing.

551
00:27:11,863 --> 00:27:12,003
Yeah.

552
00:27:16,480 --> 00:27:23,126
is what? Oh, he's correcting me that gamma is raised

553
00:27:23,166 --> 00:27:25,728
to the point four five. It's like a square

554
00:27:25,768 --> 00:27:25,928
root.

555
00:27:29,091 --> 00:27:31,933
The correction, yes. But to get the curve itself.

556
00:27:32,514 --> 00:27:42,582
Yes. OK. Any other questions or comments? OK. Thank

557
00:27:42,602 --> 00:27:42,662
you.

