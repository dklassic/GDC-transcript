1
00:00:02,380 --> 00:00:06,784
Hello everyone, my name is Wes Brandmont. I'm the lead technical art director at 343 Industries.

2
00:00:08,405 --> 00:00:12,969
Welcome to my talk, Halo 4 content performance tips and techniques.

3
00:00:14,190 --> 00:00:18,514
This afternoon I'm going to be talking about the work I did during the last year of production on Halo 4

4
00:00:19,294 --> 00:00:25,580
to help get the game running at frame rate while maintaining the integrity of the visuals that the team had worked so hard on.

5
00:00:28,405 --> 00:00:33,508
So a little bit about me. I double majored in computer graphics and illustration at Syracuse

6
00:00:33,548 --> 00:00:40,213
University. And I've been in the games industry for about 16 years. The first three as a lead

7
00:00:40,253 --> 00:00:47,317
artist and the last 13 in various tech art roles. I spent nine years at Electronic Arts, three

8
00:00:47,337 --> 00:00:53,301
years co-running a studio with three other guys and then the last four and a half years at

9
00:00:53,341 --> 00:00:55,503
Microsoft and the last two with 343.

10
00:00:57,163 --> 00:01:06,929
So Halo 4 is my 20th ship title. Okay. So this talk is really geared towards folks who have

11
00:01:06,969 --> 00:01:11,812
little to no experience with content performance optimization techniques. So I'm going to kind

12
00:01:11,832 --> 00:01:17,575
of make that assumption as I go through the talk. We're going to start with discussion around

13
00:01:17,635 --> 00:01:21,057
performance planning and the tools that make this kind of work go easier.

14
00:01:22,708 --> 00:01:24,889
Then we're going to get into the meat of the talk, which is

15
00:01:24,969 --> 00:01:29,030
common performance issues and ways to address those issues.

16
00:01:29,711 --> 00:01:34,472
And then we'll wrap things up with performance reports and

17
00:01:34,552 --> 00:01:35,532
performance scheduling.

18
00:01:40,914 --> 00:01:43,195
So before we get too far in, so what is performance?

19
00:01:44,475 --> 00:01:47,416
Well, in the context of this talk, at a very high level,

20
00:01:48,041 --> 00:01:50,183
It's basically is our game running at frame rate.

21
00:01:50,203 --> 00:01:53,706
And for Halo 4, our target frame rate was 30 frames per second.

22
00:01:54,426 --> 00:01:57,629
And so basically, if we weren't running at 30 frames per second,

23
00:01:57,809 --> 00:01:58,890
we had bad performance.

24
00:01:59,110 --> 00:02:00,892
And we had to kind of then, at that point,

25
00:02:00,932 --> 00:02:01,752
look a little bit deeper.

26
00:02:03,762 --> 00:02:09,145
When I say deeper, what I'm talking about is how long is it taking the hardware to render a frame?

27
00:02:09,225 --> 00:02:15,348
We had 33 milliseconds on Halo 4 in which to accomplish rendering of a frame in order to maintain our frame rate.

28
00:02:16,028 --> 00:02:22,171
And so there's various stages at which this can slow down, and we'll talk about that in the next slide.

29
00:02:23,852 --> 00:02:29,755
The reason this is important, which is probably obvious, is that if your performance stinks, then your interactivity goes down and your game's no fun.

30
00:02:30,647 --> 00:02:33,868
And the reason performance analysis is really important is because what we want to do is

31
00:02:34,489 --> 00:02:38,731
maintain that frame rate while at the same time making sure that we kind of maintain

32
00:02:38,751 --> 00:02:42,352
the really awesome rich environment that our art teams have spent so much time on.

33
00:02:43,773 --> 00:02:44,753
So why tech art?

34
00:02:45,534 --> 00:02:49,115
I think tech art is uniquely positioned to kind of lead in this area.

35
00:02:49,596 --> 00:02:54,498
We kind of have a background in both art and engineering, so we have what I think is a

36
00:02:54,838 --> 00:02:57,019
little bit more of a holistic view on things.

37
00:02:58,103 --> 00:03:00,905
where, you know, artists might be more focused on just the

38
00:03:00,945 --> 00:03:03,547
visuals and the dev team might be more focused on just making

39
00:03:03,567 --> 00:03:11,594
sure the thing runs well. So when I'm looking at performance

40
00:03:11,634 --> 00:03:14,957
analysis, I find having this kind of high level picture in

41
00:03:14,997 --> 00:03:19,881
mind is really helpful. There's a lot more to this, but this is

42
00:03:19,901 --> 00:03:23,484
kind of the key stuff. So you've got two places where things can

43
00:03:23,504 --> 00:03:26,026
slow down. You've got your CPU and your GPU. And on Halo 4,

44
00:03:26,950 --> 00:03:29,432
We had two threads where you could potentially slow down the

45
00:03:29,452 --> 00:03:33,335
CPU or I would say the most common places we could slow down

46
00:03:33,375 --> 00:03:36,557
the CPU. And they were our SIM thread and our render thread.

47
00:03:36,617 --> 00:03:41,241
And so our SIM thread is basically where we do AI

48
00:03:41,301 --> 00:03:45,003
updating, ray casts for collision, that sort of thing.

49
00:03:45,564 --> 00:03:47,745
And our render thread is where we go through and sort of

50
00:03:47,785 --> 00:03:50,487
evaluate sort of what's visible, kind of collecting,

51
00:03:51,701 --> 00:03:56,804
data up to bundle up and hand off to the GPU, which we call feeding the GPU. And the GPU

52
00:03:56,984 --> 00:04:03,368
would be responsible for unpackaging the mesh and mesh data, shader resources, texture resources

53
00:04:03,448 --> 00:04:07,091
and handle rendering the various elements that we're passing to it. So at any point

54
00:04:07,771 --> 00:04:12,814
in this pipeline, things could slow down and your frame rate goes down as a result.

55
00:04:15,276 --> 00:04:18,578
So before I get too far into kind of the nitty gritty...

56
00:04:19,674 --> 00:04:22,900
I thought I'd share a little story with you that has some relevance towards this.

57
00:04:22,940 --> 00:04:28,572
So I joined 343 in the fall of 2011 and up until that point the team had been in development

58
00:04:28,592 --> 00:04:30,516
for quite a while and they'd spent a lot of time

59
00:04:31,501 --> 00:04:34,103
and energy making some really awesome visuals, some really

60
00:04:34,123 --> 00:04:37,626
cool encounters, working on the narrative, but not a lot of

61
00:04:37,666 --> 00:04:43,050
time on performance. So the two projects that I've worked on

62
00:04:43,111 --> 00:04:46,854
prior to coming to 343, I spent quite a bit of time on

63
00:04:46,954 --> 00:04:50,877
performance optimization. So the engineering lead, David Berger,

64
00:04:51,837 --> 00:04:55,100
came to me and he said, hey, Wes, I'd love for you to kind of

65
00:04:55,721 --> 00:04:59,604
help lead the effort to get our game running at 30 frames per

66
00:04:59,644 --> 00:04:59,884
second.

67
00:05:00,898 --> 00:05:04,761
and he said he was giving me the performance hammer. And I said,

68
00:05:04,841 --> 00:05:08,604
okay. Great. This is kind of work I've done in the past, so

69
00:05:08,624 --> 00:05:14,929
I was like, I definitely can help with that. And so a couple

70
00:05:14,949 --> 00:05:18,171
days later, I showed up at work and there was this big brown box

71
00:05:18,231 --> 00:05:21,554
on my desk. And I opened it up and there was literally this

72
00:05:21,614 --> 00:05:24,276
performance hammer in the box. And so...

73
00:05:25,330 --> 00:05:29,773
His comment was basically, and I like that this was a very squishy hammer, because I

74
00:05:29,793 --> 00:05:36,039
think it's very relevant to kind of the performance balancing process.

75
00:05:36,059 --> 00:05:40,542
But basically his comment to me was, I need you to work with the art team to kind of get

76
00:05:40,562 --> 00:05:46,287
things running well and if you can't accomplish this with the performance hammer, we'll come

77
00:05:46,307 --> 00:05:47,108
in with a sledgehammer.

78
00:05:49,894 --> 00:05:52,156
With that information, I went and approached the art leads,

79
00:05:52,196 --> 00:05:54,499
let them know that we'd be partnering with them

80
00:05:54,539 --> 00:05:56,522
to try and maintain their awesome visuals

81
00:05:56,802 --> 00:05:59,105
and hit our frame rate goals.

82
00:05:59,666 --> 00:06:00,907
And they were naturally skeptical.

83
00:06:01,368 --> 00:06:02,670
And I could definitely relate to that,

84
00:06:02,710 --> 00:06:04,071
having been on other projects where.

85
00:06:05,995 --> 00:06:09,497
Optimization often meant just kind of destroying the quality

86
00:06:09,517 --> 00:06:13,018
of stuff. Not because it was desired, but because that was

87
00:06:13,098 --> 00:06:17,160
what ended up being needed to get to performance goals. So,

88
00:06:17,600 --> 00:06:19,720
you know, I let them know, hey, my background is in art. I

89
00:06:19,761 --> 00:06:22,261
really care about the integrity of the work you guys have been

90
00:06:22,281 --> 00:06:22,502
doing.

91
00:06:23,150 --> 00:06:30,251
And the reason I'm telling this story is I think it's really helpful to kind of build that trust going into the performance kind of optimization process.

92
00:06:30,291 --> 00:06:42,354
I think having your team know that you've got their interests at heart and that you're going to be working with them to try and maintain all the love and effort that they've put into their work is a really important first step on this journey.

93
00:06:47,256 --> 00:06:47,956
Okay, so...

94
00:06:49,962 --> 00:06:57,169
When we started this process, one of the things that was really helpful was coming up with a per-frame budget.

95
00:06:57,549 --> 00:07:03,935
And so, as I mentioned a few slides back, we had 33 milliseconds in which to render a frame.

96
00:07:04,855 --> 00:07:08,759
And right off the top, we've got certain costs that we know we're always going to pay.

97
00:07:08,859 --> 00:07:11,501
And I call those critical costs. We didn't really call them that during the project.

98
00:07:12,477 --> 00:07:15,202
need to call them something for this slide. So critical costs.

99
00:07:16,023 --> 00:07:19,029
And those are things like your HUD if you happen to be in a

100
00:07:19,069 --> 00:07:19,910
situation where you have a HUD.

101
00:07:20,753 --> 00:07:22,553
You're going to pay for those all the time.

102
00:07:23,634 --> 00:07:25,574
Post-process effects, if you've got certain things

103
00:07:25,634 --> 00:07:27,215
that you just know you're always going to do.

104
00:07:27,635 --> 00:07:29,135
So we'd kind of take that off the top.

105
00:07:29,395 --> 00:07:33,536
We'd also take a little overhead right off the bat,

106
00:07:33,556 --> 00:07:35,957
like a couple milliseconds, to make sure no matter what,

107
00:07:36,057 --> 00:07:38,958
we always had a little bit of buffer in case things kind of

108
00:07:39,058 --> 00:07:41,379
went haywire and we just needed some extra wiggle room

109
00:07:41,399 --> 00:07:42,459
so our frame rate wouldn't drop.

110
00:07:43,263 --> 00:07:48,087
And then with what was left over, we sat down with all the art leads and we kind of mapped

111
00:07:48,187 --> 00:07:53,552
out, and this is a spreadsheet from one of our campaign missions, we basically mapped

112
00:07:53,632 --> 00:07:56,995
out for each area kind of what the classification was for that area.

113
00:07:57,055 --> 00:08:01,419
So is it combat heavy, is it kind of a beautiful vista where we're not going to be doing a

114
00:08:01,459 --> 00:08:07,004
lot, so we can really put a lot more of our frame budget into rendering the environment.

115
00:08:07,506 --> 00:08:12,911
is in an area where the lighting team really wants to go bananas and put a lot of really

116
00:08:12,951 --> 00:08:16,033
interesting lighting there, so we need more budget for doing that.

117
00:08:16,173 --> 00:08:20,397
So we kind of go back and forth and negotiate these things and we come up with this per

118
00:08:20,417 --> 00:08:20,977
frame budget.

119
00:08:22,639 --> 00:08:24,741
And so we had that for each mission in each area.

120
00:08:28,684 --> 00:08:31,847
And so I'm going to mention this is more of like a best practice, as I mentioned.

121
00:08:32,903 --> 00:08:34,864
Came out of the project about a year out from ship,

122
00:08:34,904 --> 00:08:38,226
so I didn't get a lot of opportunity on Halo 4

123
00:08:38,626 --> 00:08:39,647
to do a lot of level review.

124
00:08:39,667 --> 00:08:41,187
A lot of the levels were already kind of laid out.

125
00:08:41,728 --> 00:08:43,389
But I think it's really important to mention this,

126
00:08:43,709 --> 00:08:45,370
because if you are early on in a project,

127
00:08:46,470 --> 00:08:48,191
getting involved, getting the graphics team involved,

128
00:08:48,211 --> 00:08:49,612
tech art involved early on,

129
00:08:50,332 --> 00:08:52,414
can kind of help head some things off

130
00:08:52,454 --> 00:08:54,255
that might be problematic,

131
00:08:54,315 --> 00:08:57,156
or at least you'll know where your kind of problem spots

132
00:08:57,176 --> 00:08:58,477
are gonna be, so you can kind of come up

133
00:08:58,497 --> 00:08:59,858
with mitigation plans ahead of time.

134
00:09:07,455 --> 00:09:14,657
All right. So this is the most obvious performance tool and hopefully everybody has access to

135
00:09:14,697 --> 00:09:21,499
this but your FPS counter. Basically if you're running under your target frame rate, this

136
00:09:21,559 --> 00:09:25,400
is your early warning sign that you've got a problem. And just to kind of give you sort

137
00:09:25,420 --> 00:09:29,921
of a high level view of what this process looked like for us and probably looks like

138
00:09:29,941 --> 00:09:33,642
for most people is you find an area, you're not running at 30.

139
00:09:34,612 --> 00:09:37,613
you go into that area in the game, you do some timing

140
00:09:37,633 --> 00:09:40,695
captures, which I'll talk about in a little bit, and you kind of

141
00:09:40,735 --> 00:09:44,457
diagnose what's going on and use various debug modes in the game

142
00:09:44,477 --> 00:09:49,860
to kind of help sleuth out what potentially could be the problem

143
00:09:49,960 --> 00:09:57,444
and ways to kind of address it. So one of the things that was

144
00:09:57,464 --> 00:10:00,206
really helpful, I mentioned this frame budget that we had.

145
00:10:01,008 --> 00:10:06,030
We had a bunch of in-game counters that would kind of give us the same sort of information

146
00:10:06,050 --> 00:10:08,651
that we'd get from our timing captures.

147
00:10:09,091 --> 00:10:13,133
But they just weren't as accurate because the fact that you were actually measuring

148
00:10:13,173 --> 00:10:15,053
this stuff introduced a certain amount of overhead.

149
00:10:15,113 --> 00:10:20,475
But it was good for ballpark-y things and it allowed our art leads to have a way to

150
00:10:20,535 --> 00:10:21,996
basically look at their...

151
00:10:22,836 --> 00:10:27,240
timings for their area and see if they were aligning well with the per frame

152
00:10:27,260 --> 00:10:32,444
budgets. And again, it was very ballparky, but this was really helpful in kind of a

153
00:10:32,504 --> 00:10:37,688
triaging situation where we're like, hey, we're not running at 30. Sometimes the

154
00:10:38,589 --> 00:10:42,192
the artist could kind of self-diagnose the problem and correct it, but if they

155
00:10:42,212 --> 00:10:43,553
couldn't, they'd escalate it to tech art.

156
00:10:44,312 --> 00:10:47,013
we do an analysis. If we couldn't kind of come up with

157
00:10:47,033 --> 00:10:50,174
some ways that they could fix it in content and it was kind of

158
00:10:50,254 --> 00:10:53,856
deemed a engine side issue, then we would escalate it to our

159
00:10:53,876 --> 00:11:02,139
engineering team. I mentioned the debug views briefly, but

160
00:11:02,259 --> 00:11:04,660
basically there was a couple views that were really, really

161
00:11:04,700 --> 00:11:07,982
helpful in sort of diagnosing problems during performance

162
00:11:08,022 --> 00:11:12,104
analysis. Probably the biggest one that I found helpful was

163
00:11:12,324 --> 00:11:13,004
render freeze, which...

164
00:11:13,702 --> 00:11:19,003
Basically, you freeze the camera, it kind of captures everything that is within the

165
00:11:19,043 --> 00:11:23,344
view frustum that the GPU is currently dealing with, and then it lets you pop the camera

166
00:11:23,384 --> 00:11:25,404
out and you can kind of look at it from another perspective.

167
00:11:25,484 --> 00:11:30,285
So this is really helpful because in this case here, this is a shot from the first mission

168
00:11:31,306 --> 00:11:36,047
in Halo 4 where you're kind of going down the corridors of the Fort Unto Dawn after

169
00:11:36,087 --> 00:11:38,447
just coming out of kind of a deep freeze.

170
00:11:39,457 --> 00:11:41,857
And those yellow lines are the view frustum.

171
00:11:42,217 --> 00:11:45,178
And so you can see that there was a lot of stuff being

172
00:11:45,258 --> 00:11:47,599
rendered here that wasn't actually visible from the point

173
00:11:47,619 --> 00:11:48,559
of view of Master Chief.

174
00:11:49,179 --> 00:11:53,520
And so this is a case where we were able to quickly identify

175
00:11:53,560 --> 00:11:55,100
that we had some culling to do.

176
00:11:57,341 --> 00:12:00,362
The other kind of debug states were very helpful.

177
00:12:00,742 --> 00:12:01,402
We had ways to

178
00:12:04,077 --> 00:12:06,339
choose to draw or not draw certain types of objects.

179
00:12:06,379 --> 00:12:09,380
So static meshes versus dynamic meshes versus effects,

180
00:12:09,701 --> 00:12:11,642
just changing the wireframe mode, that sort of thing.

181
00:12:14,063 --> 00:12:17,885
We also had this tool that would,

182
00:12:17,965 --> 00:12:20,947
well it was more of a kind of a option

183
00:12:21,127 --> 00:12:23,629
in when we ran our builds to log,

184
00:12:25,137 --> 00:12:29,197
information to our database. And so as we were progressing

185
00:12:29,237 --> 00:12:30,958
through the, or actually as everybody was kind of

186
00:12:30,978 --> 00:12:34,339
progressing through the game, we'd be periodically sampling

187
00:12:34,839 --> 00:12:37,999
FPS and then camera position and orientation and logging this to a

188
00:12:38,019 --> 00:12:40,220
database. And over time what this built out was this really

189
00:12:40,260 --> 00:12:43,941
nice heat map that we could then use a web, we had a web tool

190
00:12:43,981 --> 00:12:48,322
called Cortana web that could access this database and provide

191
00:12:48,342 --> 00:12:53,023
these heat maps which provided much more targeted kind of

192
00:12:53,561 --> 00:12:57,307
ways to identify where we need to go in and do real deep performance work.

193
00:12:58,129 --> 00:13:02,417
Without this, we would have been wandering around levels and really kind of spending

194
00:13:02,457 --> 00:13:04,441
time in places we didn't need to be spending time.

195
00:13:08,799 --> 00:13:17,686
So Halo 4 is a first party exclusive. So we were developing on Xbox 360 and the XDK comes

196
00:13:17,726 --> 00:13:22,649
with this great tool called Pix, which is the performance investigator for Xbox 360.

197
00:13:22,970 --> 00:13:29,295
And this allows you to do CPU and GPU timing captures. And so I kind of mentioned our process

198
00:13:29,335 --> 00:13:34,839
is we find a place where we're running slow. It was very quick to get started.

199
00:13:35,472 --> 00:13:37,612
create timing captures because you can just kind of attach

200
00:13:37,652 --> 00:13:39,753
picks and it would just kind of run while the game was running

201
00:13:40,313 --> 00:13:42,014
and you could pause it, it would pause the game,

202
00:13:42,034 --> 00:13:43,334
you could just kind of select a region

203
00:13:43,794 --> 00:13:45,495
and generate one of these timing captures

204
00:13:45,535 --> 00:13:48,416
which basically would give you a breakdown

205
00:13:49,056 --> 00:13:50,456
for the range of frames you've selected

206
00:13:50,756 --> 00:13:52,757
of kind of what the CPU was working on

207
00:13:53,137 --> 00:13:54,037
during that time period.

208
00:13:54,738 --> 00:13:59,739
And the very top row in this image is what the GPU's doing.

209
00:14:00,219 --> 00:14:02,980
And so a real quick indicator that you've got a problem was

210
00:14:03,684 --> 00:14:05,145
In this case, not a problem.

211
00:14:06,205 --> 00:14:08,245
Is that if you have big white gaps,

212
00:14:08,585 --> 00:14:12,506
and if that top GPU line didn't look like a solid black bar,

213
00:14:12,526 --> 00:14:15,127
then your GPU is probably waiting around

214
00:14:15,427 --> 00:14:18,288
for something to finish up on the sim thread or render thread.

215
00:14:18,768 --> 00:14:20,929
So it was a really quick way to kind of say,

216
00:14:20,969 --> 00:14:23,429
hey, I need to dig down deeper into the events

217
00:14:23,449 --> 00:14:24,810
that are happening on these threads

218
00:14:24,950 --> 00:14:26,690
and see what the timings are.

219
00:14:27,795 --> 00:14:29,316
We'll talk a little bit more about that in a second.

220
00:14:29,336 --> 00:14:31,297
But this was a first stop, because you very quickly rule

221
00:14:31,357 --> 00:14:32,318
out that it was the CPU.

222
00:14:32,818 --> 00:14:34,699
And then the GPU timing captures,

223
00:14:34,940 --> 00:14:36,340
which we'll talk about on the next slide,

224
00:14:37,001 --> 00:14:38,982
take a little bit more time, because we have to kind of

225
00:14:39,002 --> 00:14:41,324
gather up all the information that is used

226
00:14:41,364 --> 00:14:42,445
to render a single frame.

227
00:14:44,026 --> 00:14:49,449
And it definitely, it's more intensive for the dev kit.

228
00:14:50,190 --> 00:14:53,192
So we'd kind of do this only once we'd kind of identified

229
00:14:53,212 --> 00:14:55,673
that we have a kind of a GPU-related problem in an area.

230
00:14:56,450 --> 00:14:59,392
And what this does, though, is it grabs everything and kind of

231
00:14:59,432 --> 00:15:02,654
deconstructs the frame into this nice spreadsheet where you can

232
00:15:02,674 --> 00:15:04,716
kind of click through the spreadsheet and you've got

233
00:15:04,756 --> 00:15:09,138
timing for each element that's being drawn. And so it's very

234
00:15:09,218 --> 00:15:11,820
easy to kind of identify what's taking a long time. And then

235
00:15:12,300 --> 00:15:16,543
you can either ‑‑ there's some additional tools in the GPU

236
00:15:16,583 --> 00:15:19,725
timing where you can kind of analyze to see if you're kind of

237
00:15:19,765 --> 00:15:22,807
pixel shader or vertex shader bound or if you're stalled on

238
00:15:22,847 --> 00:15:24,068
texture fetches, that sort of thing.

239
00:15:24,815 --> 00:15:29,579
And you can also then go into the actual content then and sort

240
00:15:29,599 --> 00:15:32,802
of kind of analyze it as well to kind of see what might be

241
00:15:32,902 --> 00:15:37,045
causing that to take a while. Okay. So now we get to the meat

242
00:15:37,065 --> 00:15:41,009
and potatoes of the talk. So these were some performance

243
00:15:41,049 --> 00:15:43,971
issues that came up over and over again during the

244
00:15:44,031 --> 00:15:47,674
development of Halo 4. And so I've kind of collated them all

245
00:15:47,734 --> 00:15:50,377
because they just kept happening over and over again. I can only

246
00:15:50,397 --> 00:15:52,078
assume they will happen for other people as well.

247
00:15:54,089 --> 00:15:57,391
So large draw distances. In Halo 4 we had some really big

248
00:15:58,291 --> 00:16:02,533
missions, really expansive spaces. And we would often have

249
00:16:02,633 --> 00:16:05,955
performance issues in these areas. So generally this is due

250
00:16:06,055 --> 00:16:10,437
to one of a couple of things, poor LODing, related small

251
00:16:10,477 --> 00:16:14,900
triangles and also too many draw calls. So how do we deal with

252
00:16:14,920 --> 00:16:19,802
this stuff? There's kind of a bag of tricks. Some of them are

253
00:16:20,322 --> 00:16:23,704
kind of like that. All right here we go.

254
00:16:24,745 --> 00:16:26,706
Some of them are a little bit more straightforward than

255
00:16:26,746 --> 00:16:31,049
others. So small triangles, obvious tune LOD distance. If

256
00:16:31,069 --> 00:16:33,810
we've got small triangles and we have LODs, we can swap to the

257
00:16:33,850 --> 00:16:38,172
next lowest LOD. In some cases we didn't have LODs on some

258
00:16:38,272 --> 00:16:39,493
assets and that's what I'm showing here.

259
00:16:40,706 --> 00:16:44,408
We had this very complex model for the UNSC Infinity,

260
00:16:44,868 --> 00:16:47,290
and it had been modeled kind of for cinematic sequences,

261
00:16:47,330 --> 00:16:48,790
and we didn't actually know it was gonna end up

262
00:16:49,631 --> 00:16:51,732
making an appearance in the game

263
00:16:51,772 --> 00:16:53,893
pretty close to a combat area.

264
00:16:54,454 --> 00:16:56,335
And so it was dropped in at the end of one of the missions,

265
00:16:57,195 --> 00:16:57,335
and...

266
00:16:57,755 --> 00:17:02,017
And we ended up, this was a case of small triangles where we just had, we were processing

267
00:17:03,177 --> 00:17:05,158
not only just small triangles but too many triangles.

268
00:17:05,258 --> 00:17:09,359
And so kind of removing a lot of the smaller details that you couldn't really appreciate

269
00:17:09,439 --> 00:17:14,060
at the distance it was at, we basically generally created a one-off LOD for this case.

270
00:17:14,841 --> 00:17:19,922
Similarly at the end of the second to last mission, there's this kind of atrium area

271
00:17:20,683 --> 00:17:20,903
where

272
00:17:22,504 --> 00:17:26,389
this thing on an asteroid and it was modeled to kind of really

273
00:17:26,409 --> 00:17:29,253
look good when you're wandering around on foot. But later on in

274
00:17:29,273 --> 00:17:32,216
the mission you kind of traverse upward in an elevator.

275
00:17:32,780 --> 00:17:35,302
And the art team had kind of just duplicated the mesh over

276
00:17:35,522 --> 00:17:36,923
to build this other asset.

277
00:17:37,644 --> 00:17:40,706
And hadn't really taken time to kind of evaluate

278
00:17:40,766 --> 00:17:41,807
the size of the triangles.

279
00:17:41,987 --> 00:17:44,429
And so we had a lot of tiny little triangles,

280
00:17:44,469 --> 00:17:46,650
which you can see I've circled all over the place saying,

281
00:17:46,710 --> 00:17:47,831
hey, you should probably delete these.

282
00:17:48,351 --> 00:17:48,792
And they did.

283
00:17:49,312 --> 00:17:51,133
And our performance got back to where

284
00:17:51,173 --> 00:17:52,014
it needed to be in that area.

285
00:17:54,478 --> 00:17:58,399
Okay. Another technique. Draw calls. So when you're dealing

286
00:17:58,439 --> 00:18:01,680
with big distances and you have a lot of draw calls, this one

287
00:18:01,720 --> 00:18:06,961
may be, again, pretty obvious, is you want to call stuff. But

288
00:18:07,921 --> 00:18:10,221
I was surprised at how many times we were drawing things

289
00:18:10,241 --> 00:18:11,802
that we didn't need to be drawing and nobody really

290
00:18:11,842 --> 00:18:18,183
noticed. So this was from the last mission. We had this trench

291
00:18:18,243 --> 00:18:22,244
run. We were flying a broad sword down this trench and it

292
00:18:22,284 --> 00:18:23,984
was running really choppy. And

293
00:18:25,133 --> 00:18:29,614
the team was very concerned about having to, you know, impact the visuals to kind of get it into

294
00:18:29,654 --> 00:18:34,636
performance. Well, it turned out we were just rendering chunks of stuff just way, way out

295
00:18:35,196 --> 00:18:39,238
into the distance and it was stuff that you couldn't even see. Stuff that wouldn't even

296
00:18:39,298 --> 00:18:45,140
render in the frame. So this was a real simple case of just pulling in the distance callings

297
00:18:45,160 --> 00:18:49,381
that we were dropping things out sooner to reduce draw calls. It didn't impact the visuals at all

298
00:18:50,261 --> 00:18:52,342
and it got us back to where we needed to be for that area.

299
00:18:55,445 --> 00:18:58,386
So sometimes when you've got these big, expansive spaces,

300
00:18:58,446 --> 00:19:00,227
though, you can't really call things.

301
00:19:00,247 --> 00:19:00,947
You have to draw them.

302
00:19:01,547 --> 00:19:05,149
And that's where ProxyGeo really kind of is a big help.

303
00:19:05,249 --> 00:19:08,690
So in the first mission of Halo 4,

304
00:19:09,290 --> 00:19:11,731
you're on this severed half of forward onto Dawn.

305
00:19:12,351 --> 00:19:14,772
And probably about a third of the way into the mission,

306
00:19:14,792 --> 00:19:16,593
you realize for the first time that there's these Covenant

307
00:19:16,613 --> 00:19:18,134
forces on the ship.

308
00:19:18,474 --> 00:19:20,595
And you're looking out kind of over this observatory

309
00:19:20,635 --> 00:19:24,516
decking onto this missile bay, kind of open area.

310
00:19:25,780 --> 00:19:30,544
beyond and it's actually a combat space later on in the mission. But at the point where

311
00:19:30,564 --> 00:19:34,186
you're viewing it, we had some really bad performance issues because not only are you

312
00:19:34,447 --> 00:19:39,090
rendering this big space, but we're doing it through a glass kind of surface. And so

313
00:19:39,110 --> 00:19:45,015
there's a lot of problems kind of compounding each other. And so in this case, we were able

314
00:19:45,035 --> 00:19:47,757
to get most of the way back into Perth by...

315
00:19:49,590 --> 00:19:54,672
just creating a lower res version of this big outer area

316
00:19:55,112 --> 00:19:57,513
and then taking an in-game screenshot

317
00:19:57,613 --> 00:19:59,774
of the high res geometry and projection mapping it

318
00:20:00,194 --> 00:20:01,655
back onto the lower res geometry.

319
00:20:01,675 --> 00:20:03,115
It looked the same,

320
00:20:04,255 --> 00:20:06,636
so it didn't drastically affect the visuals,

321
00:20:06,736 --> 00:20:09,137
but it helped us get back into performance for that area.

322
00:20:12,810 --> 00:20:18,353
Okay. So sometimes you want to call things and you just, they're right in front of your face

323
00:20:18,573 --> 00:20:22,855
and there's nothing you can do. And we had, but that's not true, there is something you can do,

324
00:20:23,055 --> 00:20:28,458
which is occlusion cards. So this is a technique I first started using on Connected Ventures.

325
00:20:29,398 --> 00:20:35,601
Basically, if you've modeled the heck out of an area and you've got, you know, a ton of geo, but

326
00:20:35,801 --> 00:20:37,502
you kind of need to, um...

327
00:20:38,865 --> 00:20:40,948
You kind of need to get things back into scope.

328
00:20:42,009 --> 00:20:45,294
This is kind of a way to approach that, one of many.

329
00:20:47,136 --> 00:20:49,319
So occlusion cards, the basic idea is this.

330
00:20:51,061 --> 00:20:51,842
Hopefully this runs.

331
00:20:53,884 --> 00:20:54,725
So you've got the shader.

332
00:20:56,233 --> 00:20:58,554
that just fades out as the camera approaches it.

333
00:20:58,634 --> 00:21:01,335
So when it's opaque, you can call everything behind it.

334
00:21:02,455 --> 00:21:05,256
And then you just kind of start drawing it just

335
00:21:05,296 --> 00:21:06,417
before it starts to fade out.

336
00:21:07,157 --> 00:21:10,278
And I should also note that these don't have to be a plane.

337
00:21:10,458 --> 00:21:13,299
It could be kind of a dome, or it

338
00:21:13,339 --> 00:21:14,840
could be any kind of arbitrary shape.

339
00:21:15,240 --> 00:21:16,440
And it doesn't have to be kind of a.

340
00:21:17,400 --> 00:21:23,502
a fog kind of plane here like this. You can put textures on it. You can put animated kind

341
00:21:23,522 --> 00:21:27,784
of shaders. I'm going to show you some examples of that. So it doesn't have to be a very obvious

342
00:21:27,844 --> 00:21:34,006
kind of just straight up fogging technique that is being used here. So some flavors of

343
00:21:34,046 --> 00:21:40,768
this that were used on Halo 4. This is a bloom occlusion card. Basically what we're doing

344
00:21:40,808 --> 00:21:41,048
here is...

345
00:21:42,512 --> 00:21:46,675
We are using it to kind of fake a fake HDR exposure.

346
00:21:46,715 --> 00:21:48,176
So we've turned up the color really bright

347
00:21:48,216 --> 00:21:50,238
and we let our post-process bloom, kind of blow it out.

348
00:21:51,739 --> 00:21:52,980
But while we're coming up this tunnel,

349
00:21:53,020 --> 00:21:55,302
we're basically rendering nothing behind that thing.

350
00:21:55,442 --> 00:21:58,185
And as we come up, just before it starts to fade

351
00:21:58,205 --> 00:22:00,927
is when we kind of bring in that huge, complicated vista

352
00:22:01,627 --> 00:22:04,350
that we reveal as you kind of crest over this rise.

353
00:22:07,192 --> 00:22:08,793
Another example here, this is at the end

354
00:22:08,813 --> 00:22:10,034
of the second mission in Halo 4.

355
00:22:11,067 --> 00:22:17,669
We had this very complicated forerunner building and a pretty heavy encounter going on in this

356
00:22:17,749 --> 00:22:22,210
area. So when you first enter this space we're having performance problems because not only

357
00:22:22,250 --> 00:22:27,772
were we rendering this really complicated exterior, there was a hallway at the base

358
00:22:28,052 --> 00:22:33,613
of this structure in, let me see if I can get this to work here, right in this area.

359
00:22:34,473 --> 00:22:38,355
And so what we did was we created what I call an imposter.

360
00:22:39,143 --> 00:22:43,366
occlusion card in this space where we took a screen shot

361
00:22:43,707 --> 00:22:45,988
similar to what we did with the proxy geo of the interior of

362
00:22:46,028 --> 00:22:49,331
that space before we called it. And then we just used that as a

363
00:22:49,371 --> 00:22:53,294
texture map on one of these occlusion cards and we do kind

364
00:22:53,314 --> 00:22:58,258
of a cross fade. And in the context of the game play you're

365
00:22:58,278 --> 00:23:00,420
kind of down in this lower level so you don't really tend to

366
00:23:00,460 --> 00:23:05,304
notice this. Where I'm standing in the level is probably where

367
00:23:05,324 --> 00:23:07,125
it is most prominent. You really need to be kind of...

368
00:23:07,919 --> 00:23:12,803
keeping your eye on it to really notice it. But it got us back into Perf for this area.

369
00:23:16,347 --> 00:23:22,192
And then another kind of variation on this is fog occlusion card. And this is actually

370
00:23:23,153 --> 00:23:28,057
it's not just a fog occlusion card, it's kind of like an animated fog kind of spilling over

371
00:23:28,177 --> 00:23:28,457
effect.

372
00:23:30,470 --> 00:23:32,031
It's just a card like I've been saying,

373
00:23:32,051 --> 00:23:33,132
where it kind of fades out.

374
00:23:33,192 --> 00:23:35,953
But what we did here was this big space off to the left,

375
00:23:36,313 --> 00:23:37,914
which has a ton of geometry in it,

376
00:23:37,934 --> 00:23:39,835
we were having some performance issues

377
00:23:39,855 --> 00:23:40,956
when we came down the hall here.

378
00:23:41,096 --> 00:23:44,778
So we just culled all that and put this kind of fog,

379
00:23:45,038 --> 00:23:46,879
kind of animated spilling over,

380
00:23:47,199 --> 00:23:49,500
and it kind of masks the fact that we basically,

381
00:23:50,341 --> 00:23:51,562
if we took that fog away,

382
00:23:51,602 --> 00:23:53,022
we're just looking outside the world.

383
00:23:53,563 --> 00:23:54,603
There's nothing rendering there.

384
00:23:54,683 --> 00:23:58,305
So it kind of just masks the culling happening in that area.

385
00:24:06,087 --> 00:24:07,629
Okay, let's go...

386
00:24:11,412 --> 00:24:14,015
Okay, there we go.

387
00:24:14,035 --> 00:24:15,556
So, the next performance issue,

388
00:24:15,576 --> 00:24:19,840
kind of related to these draw call stuff is poor culling.

389
00:24:20,401 --> 00:24:24,344
So, this is, can sometimes be stuff that's actually in view

390
00:24:24,365 --> 00:24:26,386
in the camera view frustum, but a lot of times,

391
00:24:26,927 --> 00:24:28,909
poor culling can be due to things that are not even

392
00:24:28,929 --> 00:24:30,590
in the camera view frustum or...

393
00:24:31,733 --> 00:24:34,455
seem like they're not in the view for us, but we're still paying for them.

394
00:24:35,676 --> 00:24:39,359
Sometimes, well usually this is due to really big meshes. It can also be due to

395
00:24:39,980 --> 00:24:43,463
if we aren't rendering the right stuff into the Z-prepass so that we can kind of

396
00:24:43,543 --> 00:24:47,506
early out. Both of these can be contributing factors.

397
00:24:48,987 --> 00:24:51,529
This next video is going to kind of show you the problem with big meshes.

398
00:24:52,090 --> 00:24:55,552
So if you've got a really complicated mesh, it tends to be like a terrain mesh or like maybe

399
00:24:55,572 --> 00:24:56,693
like a big building or something.

400
00:24:57,508 --> 00:25:02,631
Even with little polygons in view, we have to kind of have the whole thing being processed.

401
00:25:02,691 --> 00:25:06,713
Where if we chop it up, we can immediately start culling things out as they move out

402
00:25:06,733 --> 00:25:07,594
of the camera frustum.

403
00:25:08,154 --> 00:25:11,916
So this doesn't really affect visuals at all.

404
00:25:11,996 --> 00:25:13,657
It's really more of a content fix, again.

405
00:25:13,677 --> 00:25:18,460
That's what the focus of this talk is basically, how can we modify content to kind of get it

406
00:25:18,520 --> 00:25:19,541
back to where it needs to be.

407
00:25:20,081 --> 00:25:22,462
And this is really kind of a low-hanging fruit.

408
00:25:23,943 --> 00:25:24,804
An example of this is...

409
00:25:28,268 --> 00:25:33,772
There was a mission on Halo 4, we're kind of in this desert environment, we're riding

410
00:25:33,813 --> 00:25:39,777
on this really big vehicle called the Mammoth, and we come to the end of it, the end of the

411
00:25:39,817 --> 00:25:42,739
Mammoth ride, and we jump off and we're in kind of this grotto.

412
00:25:43,146 --> 00:25:45,367
that we called Sniper Alley, which you can see here,

413
00:25:45,708 --> 00:25:47,489
is this little area right here.

414
00:25:48,129 --> 00:25:49,530
And we were having some performance issues,

415
00:25:49,570 --> 00:25:51,811
and it turned out it was exactly this big mesh problem.

416
00:25:51,851 --> 00:25:53,152
So when we went into the render freeze,

417
00:25:53,172 --> 00:25:55,794
you could see that we had this entire giant terrain mesh.

418
00:25:56,254 --> 00:25:57,795
This was actually a problem

419
00:25:57,815 --> 00:25:59,596
at a couple of different spots on this mission.

420
00:26:00,117 --> 00:26:01,478
And like I've just said,

421
00:26:01,698 --> 00:26:03,699
chopping it up solved the problem.

422
00:26:03,899 --> 00:26:06,181
Also had the added byproduct of giving us

423
00:26:06,221 --> 00:26:08,262
a little bit better management over our light maps.

424
00:26:09,222 --> 00:26:14,406
Another thing that we could do in these areas, too, that helped with culling is we used a

425
00:26:14,946 --> 00:26:18,668
portaling system to do culling on the CPU.

426
00:26:18,709 --> 00:26:23,572
And so tightening up those portals and making sure that they were really crafted as well

427
00:26:23,612 --> 00:26:25,873
as they could be helped a lot, too.

428
00:26:25,913 --> 00:26:29,936
Because when we first built these spaces out, we'd keep this stuff kind of loose because

429
00:26:29,956 --> 00:26:31,957
the designers would still be adding and removing things.

430
00:26:32,017 --> 00:26:37,941
But as we got closer to ship, getting those things really aligned with the content was

431
00:26:38,001 --> 00:26:38,341
important.

432
00:26:39,868 --> 00:26:43,149
So another big area of performance issue, expensive shaders.

433
00:26:43,309 --> 00:26:45,930
And probably all of you have experienced this.

434
00:26:47,611 --> 00:26:50,171
So lots of samplers, lots of math instructions

435
00:26:50,191 --> 00:26:52,252
all contribute to shaders being expensive.

436
00:26:52,292 --> 00:26:55,393
So the solution is shader optimization.

437
00:26:55,913 --> 00:26:58,354
This image is a picture of some Forerunner metal.

438
00:26:59,154 --> 00:27:01,315
We had a fairly complicated metal shader

439
00:27:01,335 --> 00:27:03,176
that we used for Forerunner surfaces.

440
00:27:03,956 --> 00:27:06,917
And the last mission of Halo 4 had...

441
00:27:08,188 --> 00:27:12,712
basically metal everywhere. And so we had to create a more optimized version for that mission.

442
00:27:12,912 --> 00:27:18,395
And this one was made about 20% cheaper just by switching out the speculator model, which reduced

443
00:27:18,455 --> 00:27:25,100
the math instructions significantly. Kind of going along the shader optimization theme, we had this

444
00:27:25,160 --> 00:27:30,063
idea of production shaders versus ship shaders. So production shader is kind of like a generic

445
00:27:30,103 --> 00:27:34,486
shader that the artist can kind of experiment with, try different things out.

446
00:27:35,074 --> 00:27:39,977
But when it came time to ship and we knew how a shader was going to be used in a specific

447
00:27:40,037 --> 00:27:47,661
context, we would dupe that shader off and just hack the hell out of it to get it like

448
00:27:47,701 --> 00:27:48,701
just mashed down.

449
00:27:49,181 --> 00:27:52,523
And so, but maintain the look as much as possible.

450
00:27:52,603 --> 00:27:59,707
So we would do that, we would kind of pack channels differently, we would reduce or remove

451
00:28:00,047 --> 00:28:02,768
shading terms if they were subtle or not used at all.

452
00:28:04,638 --> 00:28:09,580
This image here is an example of the third mission of Halo.

453
00:28:09,600 --> 00:28:13,022
The art team had spent quite a bit of time

454
00:28:13,042 --> 00:28:15,783
kind of crafting a look of these sort of volcanic rocks

455
00:28:16,223 --> 00:28:16,963
on that mission.

456
00:28:17,203 --> 00:28:19,304
And they were very concerned about maintaining the look.

457
00:28:19,964 --> 00:28:22,745
But we'd reached a point in the optimization process

458
00:28:22,785 --> 00:28:25,146
where these rocks were definitely,

459
00:28:25,166 --> 00:28:27,027
they were occupying a lot of screen space

460
00:28:27,167 --> 00:28:28,508
and they were quite expensive to render.

461
00:28:29,768 --> 00:28:31,049
But we were just a little bit over.

462
00:28:31,149 --> 00:28:32,629
So I asked the art lead,

463
00:28:32,669 --> 00:28:33,489
hey, would you mind...

464
00:28:34,494 --> 00:28:40,037
If I took a crack at optimizing this rock shader and his response was sure, but it needs

465
00:28:40,057 --> 00:28:41,158
to look exactly the same.

466
00:28:41,818 --> 00:28:44,360
And so I said, okay, fair enough.

467
00:28:45,540 --> 00:28:47,342
I was able to get it about 15% faster.

468
00:28:48,182 --> 00:28:53,405
And what I did was rather than do like an A-B comparison when I showed him the results,

469
00:28:54,346 --> 00:28:55,807
I was inspired by Sesame Street.

470
00:28:55,947 --> 00:28:58,188
Have you guys ever heard like one of these things is not like the other?

471
00:28:59,054 --> 00:29:04,136
Yeah, okay. So I built a scene with about five of these rocks and only one of them was

472
00:29:04,176 --> 00:29:07,978
the optimized one and I sat him down in front of it and I said if you can tell me which

473
00:29:08,078 --> 00:29:12,500
one is the optimized one I'll go back to the drawing board and he sat there for about a

474
00:29:12,560 --> 00:29:16,842
minute and pointed out the wrong rock. So the optimization stuck. And the reason I tell

475
00:29:16,862 --> 00:29:17,782
that story is because

476
00:29:18,827 --> 00:29:21,290
I think it's definitely a technique I will use in the future.

477
00:29:21,911 --> 00:29:28,239
I think when you've got some maybe some built-in bias, I think making things a little more

478
00:29:28,840 --> 00:29:33,085
obfuscated when it comes to kind of these sort of subjective judgment calls, it makes

479
00:29:33,105 --> 00:29:35,828
sure that people are really being honest about what's important visually.

480
00:29:36,789 --> 00:29:38,191
Another thing I wanted to mention is...

481
00:29:39,780 --> 00:29:42,801
Our art team did a lot of kit bashing to kind of build assets.

482
00:29:43,101 --> 00:29:46,182
So a lot of times we'd end up with just gobs of materials

483
00:29:46,502 --> 00:29:48,682
on what were otherwise very simple assets.

484
00:29:49,243 --> 00:29:52,383
And those materials would often be sampling a ton of textures.

485
00:29:52,443 --> 00:29:55,044
So doing some material optimization

486
00:29:55,084 --> 00:29:58,125
was also an important part of this shader optimization

487
00:29:58,145 --> 00:29:58,545
process.

488
00:30:03,250 --> 00:30:06,811
So overdraw. Our effects team was actually very sensitive to

489
00:30:07,612 --> 00:30:09,512
this problem. This is where we're drawing too many

490
00:30:09,552 --> 00:30:12,694
transparent things on top of each other and it starts to bog

491
00:30:12,734 --> 00:30:18,476
things down. So despite some of our efforts in this area, you

492
00:30:18,516 --> 00:30:19,496
still have cases where...

493
00:30:20,829 --> 00:30:24,652
effect might end up being placed in a certain context and it might be just the straw that

494
00:30:24,692 --> 00:30:30,535
breaks the camel's back. So we would, a solution in these areas would be to either kind of

495
00:30:30,595 --> 00:30:35,898
tune the emission rates to minimize the amount of overdraw that was occurring. Sometimes

496
00:30:35,918 --> 00:30:41,581
we'd go back, ask the effects team to go back to sort of do some additional work on the

497
00:30:41,641 --> 00:30:45,283
materials that are applied to these sprites to add complexity in those materials rather

498
00:30:45,323 --> 00:30:48,985
than achieve that complexity by overlapping a lot of sprites.

499
00:30:52,345 --> 00:31:00,375
Another area kind of related, we had a lot of lens flares in Halo 4. A lot. And so we

500
00:31:00,576 --> 00:31:05,682
had one area in one of our missions where it was just really running terrible.

501
00:31:06,745 --> 00:31:09,669
And it turned out there was just all these overlapping quads

502
00:31:09,709 --> 00:31:11,872
from all these lens flare elements.

503
00:31:12,072 --> 00:31:14,816
And so the solution here was creating a more optimized lens

504
00:31:14,856 --> 00:31:17,379
flare for that specific use case.

505
00:31:17,419 --> 00:31:19,182
And that's really a common theme in a lot

506
00:31:19,202 --> 00:31:22,126
of this kind of performance work is when you're trying to kind

507
00:31:22,146 --> 00:31:22,186
of.

508
00:31:22,771 --> 00:31:28,153
find the sweet spot with the visuals is rather than trying to create a solution that is going

509
00:31:28,173 --> 00:31:33,075
to fix it for your entire game is just really just tune things in the places where they

510
00:31:33,095 --> 00:31:36,957
need to be tuned so that way your visuals don't get affected in areas where there is

511
00:31:36,997 --> 00:31:42,259
no problem. The other thing we did, our graphics team would occasionally render to a kind of

512
00:31:42,279 --> 00:31:46,741
a quarter res buffer so it wouldn't take as long to render our transparence. That helped

513
00:31:46,801 --> 00:31:47,121
as well.

514
00:31:50,575 --> 00:31:56,078
So sky boxes were another area where we had lots of transparent pixels. When we first

515
00:31:56,098 --> 00:32:00,960
started doing the sky boxes were gorgeous. When they first started doing them, they were

516
00:32:00,980 --> 00:32:03,822
just putting them on these big concentric quad strips.

517
00:32:05,732 --> 00:32:08,233
So we were paying, you know, they were just textures with

518
00:32:08,333 --> 00:32:11,155
alpha in the sky. So all those pixels in the sky, we were

519
00:32:11,215 --> 00:32:15,358
paying overdraw cost for nothing visually. So the solution there

520
00:32:15,418 --> 00:32:18,661
was to go in and kind of cut the geometry so that we aren't

521
00:32:19,301 --> 00:32:22,804
paying for basically fully transparent pixels. And then

522
00:32:22,824 --> 00:32:25,846
taking it a step further to go in and actually build a quad

523
00:32:25,866 --> 00:32:30,829
strip along the, right along the edge of the kind of mountain

524
00:32:30,849 --> 00:32:33,631
ranges and stuff. So we only pay transparent costs right along

525
00:32:33,651 --> 00:32:34,212
that edge line.

526
00:32:34,578 --> 00:32:37,120
and then put an opaque shader on the lower portions

527
00:32:37,160 --> 00:32:38,481
where we don't need the transparency.

528
00:32:39,822 --> 00:32:42,103
This same technique can be extended to water.

529
00:32:42,123 --> 00:32:45,445
If you're doing kind of depth blending along a shoreline

530
00:32:45,886 --> 00:32:48,167
and you're kind of fading out to kind of deeper water,

531
00:32:48,948 --> 00:32:50,689
as soon as you get into that deeper opaque water,

532
00:32:50,749 --> 00:32:52,410
you can just cut the geometry there

533
00:32:52,530 --> 00:32:54,972
and put a fully opaque shader in that area.

534
00:32:54,992 --> 00:32:57,333
So you're basically, you've got opaque pixels

535
00:32:57,453 --> 00:32:59,154
in the center of your water masses.

536
00:32:59,174 --> 00:33:01,676
You're only paying for transparency along the shorelines.

537
00:33:03,377 --> 00:33:09,302
use that on connected ventures. Not on halo. Okay. Another

538
00:33:09,342 --> 00:33:14,546
performance issue. Lighting costs. So halo 4 used a deferred

539
00:33:14,606 --> 00:33:18,950
renderer. So we had two types of lights. Screen space lights and

540
00:33:18,970 --> 00:33:24,174
we had dynamic lights. And there was good use cases for using

541
00:33:24,214 --> 00:33:26,556
either one. But screen space lights were definitely

542
00:33:27,237 --> 00:33:28,378
the more efficient of the two.

543
00:33:28,979 --> 00:33:32,424
And so, but we also got immediate feedback

544
00:33:32,444 --> 00:33:33,306
with the dynamic lights.

545
00:33:33,346 --> 00:33:36,210
So the lighters would often work with fully dynamic lights

546
00:33:36,270 --> 00:33:37,712
and only switch things to screen space

547
00:33:38,173 --> 00:33:41,457
when they were ready to kind of call it final.

548
00:33:42,498 --> 00:33:44,780
So occasionally we would have lights that just slipped through

549
00:33:44,860 --> 00:33:47,482
the gap where they forgot to flip that switch and turn them

550
00:33:47,502 --> 00:33:50,144
to screen space. That was a common thing we just have to

551
00:33:50,184 --> 00:33:53,446
check for. Some other cases, though, even with screen space,

552
00:33:53,467 --> 00:33:56,229
we could have some performance hits. And this is a ‑‑ this

553
00:33:56,269 --> 00:33:58,870
image here is a good example of that. We had these little

554
00:33:59,751 --> 00:34:04,995
covenant light sticks that had these just huge falloff radiuses

555
00:34:05,055 --> 00:34:08,197
to the lights. And this is actually a frame from PIX. And,

556
00:34:08,358 --> 00:34:10,639
again, PIX is really helpful. It's got some ‑‑ it's got

557
00:34:11,645 --> 00:34:15,549
some cool visualization modes. And this one allows you to see

558
00:34:15,569 --> 00:34:19,992
the wire frame for the fall off of the light. And so when we

559
00:34:20,032 --> 00:34:22,234
saw these lights were expensive and usually screen space lights

560
00:34:22,274 --> 00:34:27,698
were quite cheap, it was a good way to kind of say, hey, we've

561
00:34:27,718 --> 00:34:32,082
got to reduce the radius on these guys. And that was a real

562
00:34:32,722 --> 00:34:33,142
quick fix.

563
00:34:36,372 --> 00:34:39,914
kind of speaking to the kind of lights being left behind, we

564
00:34:39,934 --> 00:34:43,396
had, we had like, we were over this area and nobody could

565
00:34:43,416 --> 00:34:46,638
figure it out. Turned out it was, there was these tiny little

566
00:34:47,359 --> 00:34:50,261
spot, dynamic spotlights in the middle of nowhere that were

567
00:34:50,281 --> 00:34:52,803
costing three milliseconds, which is a huge part of your

568
00:34:53,523 --> 00:34:58,286
30 mil, 33 millisecond budget and just deleting these solved

569
00:34:58,306 --> 00:35:01,929
the problem. So just kind of being aware of what your

570
00:35:01,969 --> 00:35:03,990
content is doing is a huge part of this.

571
00:35:07,796 --> 00:35:11,177
So cinematics, we did a lot of work on cinematics to get them

572
00:35:11,217 --> 00:35:15,179
into performance. We had some very complicated characters.

573
00:35:15,899 --> 00:35:19,120
Cortana was by far one of our most expensive things to render

574
00:35:19,140 --> 00:35:24,102
in the game. She clocked in around 5 to 6 milliseconds due

575
00:35:24,122 --> 00:35:29,304
to the various render targets we had to create to achieve that

576
00:35:29,344 --> 00:35:35,227
effect. So we had this sequence at the end of the game.

577
00:35:35,893 --> 00:35:45,099
the game where Cortana is kind of, she comes up and we've got

578
00:35:45,139 --> 00:35:49,922
this pretty complicated effect behind her and she's doing some

579
00:35:49,962 --> 00:35:54,444
stuff and we're very concerned about this particular shot. And

580
00:35:54,544 --> 00:35:59,047
so because she's expensive, she's drawing over other

581
00:35:59,087 --> 00:36:01,028
transparent things in a really huge environment.

582
00:36:01,679 --> 00:36:06,981
kind of all the problems I've just kind of called out all in one shot. And so

583
00:36:08,102 --> 00:36:12,043
some of the ways we dealt with this, one we kind of pulled the plinth back a

584
00:36:12,063 --> 00:36:15,685
little bit so that we can and tilted the camera down so that we could get more

585
00:36:15,785 --> 00:36:20,327
opaque pixels covering the screen. So you'll notice this this kind of platform

586
00:36:20,347 --> 00:36:24,930
you're standing on occupies about half the frame. That helped improve the

587
00:36:24,950 --> 00:36:29,732
render time. You also notice we put this barricade behind her in between her and

588
00:36:29,772 --> 00:36:29,932
that

589
00:36:31,065 --> 00:36:35,047
that kind of orange orb effect. And what that allowed us to do

590
00:36:35,107 --> 00:36:37,528
is, again, this is to address overdraw issues. We basically

591
00:36:37,708 --> 00:36:40,550
put some opaque pixels back there. And so where she's

592
00:36:40,650 --> 00:36:43,632
rendering, we're not paying all that overdraw cost in addition

593
00:36:43,652 --> 00:36:46,473
to the cost of just rendering her. So those are some

594
00:36:46,513 --> 00:36:50,395
techniques that helped ensure that we could get that shot,

595
00:36:50,535 --> 00:36:57,159
achieve that shot for narrative. Finally, I just want to

596
00:36:57,179 --> 00:36:58,560
mention, when she's creating in the title screen, that's

597
00:36:59,736 --> 00:37:02,137
I kind of touched on this at the beginning of the talk.

598
00:37:02,157 --> 00:37:04,058
You definitely want to make sure you optimize your post effects.

599
00:37:05,038 --> 00:37:07,159
On Halo 4 we had two types of fog.

600
00:37:07,399 --> 00:37:10,541
We had a patchy fog and a screen space fog.

601
00:37:11,421 --> 00:37:13,482
And a lot of times we had both of those turned on at the same time.

602
00:37:13,502 --> 00:37:14,302
We didn't really need it.

603
00:37:15,703 --> 00:37:20,785
So kind of being aware of what you're actually using and whether or not it's really contributing

604
00:37:21,366 --> 00:37:23,787
significantly to the final look of the frame.

605
00:37:24,287 --> 00:37:24,527
And then...

606
00:37:26,185 --> 00:37:28,626
having your, making sure your, all the things you're paying

607
00:37:28,646 --> 00:37:31,287
critical costs for, things that you're rendering all the time

608
00:37:31,307 --> 00:37:35,049
like the HUD are as efficient as they can be. And early on in

609
00:37:35,089 --> 00:37:38,411
this process our HUD actually wasn't very efficient and our UI

610
00:37:38,691 --> 00:37:41,613
team did a great job kind of getting that down as far as they

611
00:37:41,653 --> 00:37:45,695
could so that it wasn't eating too much of our budget up.

612
00:37:50,379 --> 00:37:53,480
So I mentioned at the beginning of the talk, GPU starvation.

613
00:37:54,661 --> 00:37:57,502
There are a lot of cases where your GPU is not

614
00:37:57,542 --> 00:37:59,003
your bottleneck, it's your CPU.

615
00:37:59,963 --> 00:38:03,064
And so this can be due to a variety of issues.

616
00:38:04,165 --> 00:38:09,027
Slow collision, poor calling, just too many AI simulating

617
00:38:09,307 --> 00:38:12,248
all kind of contribute to GPU starvation.

618
00:38:14,217 --> 00:38:19,061
So ways to fix that. We've already talked about some of the culling techniques. Going

619
00:38:19,101 --> 00:38:25,746
in and optimizing collision meshes helps get your ray cast costs down and we did quite

620
00:38:25,766 --> 00:38:30,430
a bit of that on Halo 4. We had two types of collision. We had a play collision and

621
00:38:30,470 --> 00:38:35,914
a bullet collision and we would go in and optimize those as necessary to get those ray

622
00:38:35,934 --> 00:38:41,238
cast times down. We also had times like the one shown here.

623
00:38:42,279 --> 00:38:45,059
where we were spawning in way too many dynamic objects

624
00:38:45,239 --> 00:38:48,180
and or AI and we would,

625
00:38:49,040 --> 00:38:51,020
the solution here was to go talk with the design team

626
00:38:51,360 --> 00:38:54,281
and they would have to kind of stagger

627
00:38:54,481 --> 00:38:56,141
the spawning of objects,

628
00:38:56,841 --> 00:38:57,922
which usually wasn't a problem

629
00:38:57,982 --> 00:38:59,042
because it was usually stuff

630
00:38:59,062 --> 00:39:00,502
that wasn't really in view anyway.

631
00:39:00,902 --> 00:39:03,023
It was just, and they hadn't intentionally meant it

632
00:39:03,083 --> 00:39:04,383
to spawn in as early as it did.

633
00:39:04,423 --> 00:39:06,163
It was just kind of something that happened.

634
00:39:13,060 --> 00:39:21,531
And so at the end of this whole process, the end goal here is we want to create a bunch of actionable items for the team to go address.

635
00:39:21,611 --> 00:39:24,054
So creating these performance reports at the end are...

636
00:39:25,316 --> 00:39:27,357
probably the most important part of the entire process.

637
00:39:27,397 --> 00:39:30,339
So we would create kind of call-outs per team,

638
00:39:31,199 --> 00:39:33,161
environment, lighting, effects, all the ones listed here,

639
00:39:33,701 --> 00:39:35,522
and we would give them multiple suggestions

640
00:39:36,223 --> 00:39:38,224
for ways to fix each of their areas

641
00:39:38,244 --> 00:39:39,085
where they're over budget.

642
00:39:39,125 --> 00:39:40,305
Again, these are all referenced back

643
00:39:40,325 --> 00:39:42,687
to that per frame budget I talked about

644
00:39:42,707 --> 00:39:44,588
at the beginning of the whole talk.

645
00:39:44,628 --> 00:39:47,090
So they would get kind of a call-out for each area,

646
00:39:47,130 --> 00:39:49,211
like, hey, you're maybe a millisecond over,

647
00:39:49,291 --> 00:39:51,613
here's some ways you could kind of...

648
00:39:52,158 --> 00:39:56,960
get that millisecond back and we'd give them, you know, maybe half a dozen different options.

649
00:39:57,180 --> 00:40:02,021
And to me that was very important because it let them own the final decision on what got

650
00:40:02,301 --> 00:40:06,122
optimized. And we definitely could have gone in and just said, hey, this is what we're doing,

651
00:40:06,242 --> 00:40:12,323
live with it. But you get a lot more buy-in from the team by involving them in the process and

652
00:40:12,483 --> 00:40:16,784
allowing them to help be the decision-makers for how their content gets optimized.

653
00:40:20,881 --> 00:40:26,585
So performance analysis takes quite a bit of time. I often felt basically like master chief

654
00:40:26,605 --> 00:40:31,187
here in this image where we had our ship date coming in and there was lots of performance to

655
00:40:31,227 --> 00:40:39,232
do and not a lot of time. It usually took about a day or more per pass on a mission to do a run

656
00:40:39,272 --> 00:40:45,696
through and that was with our automated kind of heat map creation process so we could do kind of

657
00:40:45,756 --> 00:40:47,878
more targeted analysis. So...

658
00:40:49,450 --> 00:41:14,581
Definitely for us it was important to make sure that we had time scheduled, not only for the initial analysis, but then those reports that I just mentioned would get turned into bugs in our bug tracking software, and then when they were resolved, it would be on us to go back and follow up with folks and make sure, or follow up on those areas that we called out and see if they'd actually addressed the issue, and then if not, we had to generate a follow-up report and more bugs.

659
00:41:15,942 --> 00:41:20,125
The other thing we did towards the end was making sure we had scheduled play-throughs

660
00:41:21,265 --> 00:41:22,786
on release kind of builds.

661
00:41:23,967 --> 00:41:30,451
When we're kind of in the midst of production, we run, our builds that we were running with

662
00:41:30,551 --> 00:41:35,574
had a lot of extra counters in them to give us more information on timing.

663
00:41:37,757 --> 00:41:42,482
Those, similar to the case where you've got the in-game debug menu that kind of introduces

664
00:41:42,542 --> 00:41:49,148
some overhead, even with the timing captures, just having those counters in there also introduces

665
00:41:49,208 --> 00:41:50,009
a little bit of overhead.

666
00:41:50,049 --> 00:41:53,191
So really we got our true numbers when we actually did our full release build.

667
00:41:53,592 --> 00:41:55,073
And then we would have very minimal...

668
00:41:56,927 --> 00:42:01,791
kind of instrumentation in there to kind of get a sense of where our frame rate was and

669
00:42:01,811 --> 00:42:05,893
we would make sure we were doing play throughs in both full screen and split screen because

670
00:42:05,913 --> 00:42:09,856
that was one of our modes and we wanted to make sure that that was a good experience

671
00:42:09,956 --> 00:42:10,957
on both those modes.

672
00:42:11,797 --> 00:42:11,898
So

673
00:42:16,300 --> 00:42:19,222
before I wrap up here, I want to call out this is a talk that's

674
00:42:19,242 --> 00:42:21,984
happening tomorrow. If you have a lot of interest in this

675
00:42:22,044 --> 00:42:25,667
performance stuff, there's going to be a talk focused specifically

676
00:42:25,827 --> 00:42:31,152
on Xbox one on the performance tools and definitely suggest

677
00:42:31,232 --> 00:42:35,295
checking that out. And I just want to say thank you to the

678
00:42:35,335 --> 00:42:39,539
entire 343 team, to Bonnie Ross, Josh Holmes and Neil Harrison

679
00:42:39,579 --> 00:42:42,541
for allowing me to share these stories with you and to David

680
00:42:42,561 --> 00:42:44,723
Berger for entrusting me with the perf hammer.

681
00:42:46,540 --> 00:42:58,210
That's it. Thanks, everybody. So I can take questions. Do we have time for questions? Yeah.

682
00:42:58,410 --> 00:43:02,854
So if anybody has got questions. Yeah?

683
00:43:03,055 --> 00:43:07,539
So with the occlusion cards, did you just let it render to your duck buffer when it was

684
00:43:07,579 --> 00:43:10,701
fully opaque or did you do some other way to call the others that were behind it?

685
00:43:13,540 --> 00:43:16,684
actually I'm glad you mentioned that. So there's a couple ways

686
00:43:16,704 --> 00:43:21,731
you can do this. So the depth occlusion cards are part of the

687
00:43:21,751 --> 00:43:24,856
transparent pass. They don't render to the depth buffer as

688
00:43:24,876 --> 00:43:27,740
you pointed out. But one thing you can do is if you want to,

689
00:43:27,780 --> 00:43:28,821
you can put like a really big

690
00:43:29,786 --> 00:43:34,830
You can dupe the occlusion geometry and maybe move it back a little bit and put an opaque

691
00:43:34,870 --> 00:43:40,195
shader on there and that can write to your Z prepass and that can be another way to do

692
00:43:40,235 --> 00:43:40,836
your culling.

693
00:43:41,317 --> 00:43:43,699
You just turn that off before you start fading.

694
00:43:44,199 --> 00:43:48,964
So would that do dynamic occlusion queries then for the actual objects to stop the draw

695
00:43:49,004 --> 00:43:54,128
calls or did you actually have somebody hook up like hey, these objects will turn on?

696
00:43:54,721 --> 00:43:57,843
So in our engine we had basically a distance flag you

697
00:43:57,863 --> 00:44:00,965
could set that just says pass this distance, just stop

698
00:44:01,025 --> 00:44:04,127
evaluating this object. And so we just set that and we had some

699
00:44:04,167 --> 00:44:08,870
tools that would just very easily let us set that on a

700
00:44:08,930 --> 00:44:11,952
bunch of them all at once. Yeah.

701
00:44:12,553 --> 00:44:16,776
Hi. So in this you were talking all about your career missions.

702
00:44:16,876 --> 00:44:20,018
So I was wondering how much, if any of this applied to the

703
00:44:20,058 --> 00:44:20,718
multiplayer maps?

704
00:44:21,219 --> 00:44:25,783
That's a great question. It very much applies to it. We couldn't use as many of the tricks

705
00:44:25,983 --> 00:44:32,089
because multiplayer is kind of like you've got just everybody everywhere all the time. So we

706
00:44:32,209 --> 00:44:38,034
were a lot more strict about our kind of requirements for those maps, about kind of how

707
00:44:38,094 --> 00:44:43,359
complicated they could be. Because there was just too many situations where you just, you

708
00:44:43,399 --> 00:44:46,482
never knew if there was going to be a bazillion grenades going off or what the...

709
00:44:47,915 --> 00:44:51,997
situation was. So we could be a little bit more crafted in the

710
00:44:52,017 --> 00:44:54,558
campaign and multiplayer we had to be a lot more strict.

711
00:44:55,479 --> 00:45:01,202
So especially with the forge maps where you have a huge

712
00:45:01,242 --> 00:45:04,423
amount of content that players can put into the maps, was there

713
00:45:04,463 --> 00:45:06,484
any kind of optimization that you could do for those?

714
00:45:07,685 --> 00:45:11,266
Not a lot. Other than put caps on the number of things you can

715
00:45:11,286 --> 00:45:13,648
place in the forge environment, that's really...

716
00:45:14,834 --> 00:45:22,563
where the optimization is, is just creating a built-in budget for players to be able to

717
00:45:22,603 --> 00:45:25,386
adhere to so we don't create a scene that will be unplayable.

