1
00:00:05,212 --> 00:00:12,429
Hello? Can you hear me? All right. Too loud, too quiet. Everyone who was out last

2
00:00:12,469 --> 00:00:14,273
night is like, too loud, too loud.

3
00:00:16,124 --> 00:00:17,425
So a couple things before we get started.

4
00:00:18,286 --> 00:00:19,207
Please turn off your cell phones.

5
00:00:19,727 --> 00:00:22,209
If it does ring, I will mock you incessantly

6
00:00:22,289 --> 00:00:23,270
throughout this presentation.

7
00:00:24,991 --> 00:00:27,473
And at the end, you're going to get that electronic survey.

8
00:00:27,573 --> 00:00:28,194
We've all gotten them.

9
00:00:28,634 --> 00:00:29,155
Please fill it out.

10
00:00:30,035 --> 00:00:31,757
Let me know what I can do better,

11
00:00:32,577 --> 00:00:34,239
if we need more content, less content,

12
00:00:34,399 --> 00:00:36,440
some sort of synchronized dance-off, whatever.

13
00:00:36,460 --> 00:00:38,802
And it helps me come back next year.

14
00:00:41,513 --> 00:00:43,614
Also, I can talk a little fast when I get nervous.

15
00:00:44,034 --> 00:00:45,615
So if we get to the end of this thing and you guys are like,

16
00:00:45,675 --> 00:00:46,995
what the hell did he just say?

17
00:00:47,015 --> 00:00:48,756
We'll have time for questions,

18
00:00:48,796 --> 00:00:49,856
so don't worry too much about it.

19
00:00:51,336 --> 00:00:53,357
All right, my name is Scott Shepard.

20
00:00:53,817 --> 00:00:56,278
I'm the technical art lead for the 3D department at Bungie.

21
00:00:58,178 --> 00:00:59,499
I've been in the games industry since about 1999,

22
00:00:59,539 --> 00:01:02,559
and I've worked on everything from fantasy MMOs

23
00:01:02,840 --> 00:01:05,560
to survival horror, the sci-fi first person shooters

24
00:01:05,600 --> 00:01:05,980
of Halo.

25
00:01:07,121 --> 00:01:08,401
But for about the past four years,

26
00:01:08,881 --> 00:01:09,661
I've been focused on

27
00:01:11,649 --> 00:01:13,551
building customizable characters for Destiny.

28
00:01:19,656 --> 00:01:21,677
To talk about Bungie's future, we first

29
00:01:21,698 --> 00:01:22,798
have to talk about our past.

30
00:01:23,739 --> 00:01:26,241
The Master Chief is one of the most recognizable characters

31
00:01:26,421 --> 00:01:27,662
of the modern video game era.

32
00:01:28,924 --> 00:01:31,085
His image was developed across 10 years of projects

33
00:01:31,446 --> 00:01:32,847
and thousands of man hours of work.

34
00:01:34,008 --> 00:01:37,451
He has appeared in games, books, animated and live action films,

35
00:01:37,811 --> 00:01:39,813
as action figures, even on soda cans.

36
00:01:41,318 --> 00:01:44,000
His green armor and orange visor ingrained in the minds of

37
00:01:44,040 --> 00:01:45,081
gamers both young and old.

38
00:01:46,722 --> 00:01:48,943
His faceless design allowed the player to really imagine

39
00:01:48,963 --> 00:01:50,964
themselves as the hero of the Halo saga.

40
00:01:52,325 --> 00:01:54,186
I call that out because that point stuck with us in

41
00:01:54,226 --> 00:01:54,646
particular.

42
00:01:56,567 --> 00:01:57,548
So where do we go from here?

43
00:01:58,949 --> 00:02:01,050
How do we, on one hand, build off the successes we learned

44
00:02:01,070 --> 00:02:03,671
from developing the Master Chief, but at the same time

45
00:02:03,731 --> 00:02:05,753
create something entirely unique to Destiny?

46
00:02:06,633 --> 00:02:07,914
Who is Destiny's main hero?

47
00:02:10,978 --> 00:02:12,399
Well, the answer is there isn't one.

48
00:02:14,020 --> 00:02:16,220
Destiny isn't about a singular hero or story.

49
00:02:18,381 --> 00:02:20,382
Our mantra throughout the development of this project

50
00:02:20,842 --> 00:02:22,643
has been to create a world that people want to be in,

51
00:02:23,263 --> 00:02:23,943
to go back to.

52
00:02:24,584 --> 00:02:26,704
This is a place for players to tell their own stories.

53
00:02:29,265 --> 00:02:30,846
In short, our hero is you.

54
00:02:31,366 --> 00:02:32,347
This story is yours.

55
00:02:33,687 --> 00:02:35,308
The idea of telling these player stories

56
00:02:35,728 --> 00:02:38,089
were the driving points for all of our decisions regarding

57
00:02:38,129 --> 00:02:38,889
our player characters.

58
00:02:40,209 --> 00:02:44,533
It was important for us to let the player feel like they were

59
00:02:44,593 --> 00:02:48,577
part of this world, invested in it. That we weren't handing them

60
00:02:48,597 --> 00:02:52,721
a role to play, they were creating their own role. To

61
00:02:52,761 --> 00:02:54,823
accomplish that we needed a system that enabled the player

62
00:02:54,843 --> 00:02:57,445
to discover and shape their avatar in the world of destiny.

63
00:02:58,767 --> 00:03:01,649
That meant allowing each player to stand out from others and

64
00:03:01,689 --> 00:03:03,791
encouraging them to grow and change their character over

65
00:03:03,831 --> 00:03:04,031
time.

66
00:03:06,332 --> 00:03:08,794
To succeed at this, we needed a deep and satisfying

67
00:03:08,834 --> 00:03:11,636
customization experience that went well beyond anything

68
00:03:11,676 --> 00:03:14,639
we've ever attempted before, and something we hadn't really

69
00:03:14,679 --> 00:03:15,620
seen in a shooter to date.

70
00:03:19,744 --> 00:03:21,725
Early on, we talked a lot about power fantasies.

71
00:03:23,127 --> 00:03:25,289
These are the heroes and adventurers that inspire us.

72
00:03:26,330 --> 00:03:28,251
At an early age, this may be as simple as a game of

73
00:03:28,291 --> 00:03:29,052
Cowboys and Indians.

74
00:03:30,196 --> 00:03:32,757
As we were exposed to different types of heroes, it grows to

75
00:03:32,797 --> 00:03:35,819
include the likes of space marines, pirates, wizards,

76
00:03:35,919 --> 00:03:41,262
knights, ninjas, what have you. We took these power fantasies

77
00:03:41,702 --> 00:03:44,023
and tried to wrap them into archetypes that fit well within

78
00:03:44,063 --> 00:03:48,065
our world. What we emerged with were three classes we felt best

79
00:03:48,125 --> 00:03:50,807
represented the types of stories our players would want to tell

80
00:03:50,887 --> 00:03:55,449
on Destiny. These are the hunters, the warlocks, and the

81
00:03:55,489 --> 00:03:55,850
titans.

82
00:03:59,319 --> 00:04:01,921
To begin our explorations, we broke our character bodies

83
00:04:01,961 --> 00:04:04,922
into four slots, the head, chest, arms, and legs.

84
00:04:05,983 --> 00:04:07,604
As players progressed through the world of Destiny,

85
00:04:07,744 --> 00:04:09,565
they would be rewarded with different pieces

86
00:04:09,605 --> 00:04:10,626
of gear for each slot.

87
00:04:12,147 --> 00:04:14,228
This gear would alter their appearance and abilities,

88
00:04:14,688 --> 00:04:16,890
allowing them to make choices that

89
00:04:16,910 --> 00:04:19,551
affected both their visual as well as gameplay experiences.

90
00:04:20,652 --> 00:04:21,993
These four slots offered a balance

91
00:04:22,033 --> 00:04:24,675
between gameplay progression, visual customization,

92
00:04:24,995 --> 00:04:25,735
and aesthetic harmony.

93
00:04:28,499 --> 00:04:31,000
We chose basic silhouette shapes for each of the classes to

94
00:04:31,060 --> 00:04:34,441
help make them more readable. These shapes formed many of the

95
00:04:34,501 --> 00:04:37,421
ideas behind the initial concepts and served as guides

96
00:04:37,501 --> 00:04:41,202
for ensuring each class maintained a unique identity. To

97
00:04:41,242 --> 00:04:44,623
further separate the classes we added a fifth class specific

98
00:04:44,663 --> 00:04:52,465
gear slot. The hunter's cloak, the titan's badge and the

99
00:04:52,485 --> 00:04:54,165
warlock's bond or arm band.

100
00:04:59,242 --> 00:05:02,704
The hunters are our frontier scouts, scavenging and exploring

101
00:05:02,724 --> 00:05:05,805
in the world outside the city to bring back valuable technology

102
00:05:05,865 --> 00:05:10,387
the citizens rely upon. They are hacker cowboys, bounty hunters

103
00:05:10,487 --> 00:05:14,629
and recon snipers. They carry themselves with style and

104
00:05:14,689 --> 00:05:19,212
swagger. Hunters scavenge much of their gear, so we decided on

105
00:05:19,232 --> 00:05:21,273
an almost mix and match haphazard look to their

106
00:05:21,293 --> 00:05:21,673
designs.

107
00:05:25,267 --> 00:05:27,508
Like the wandering adventures of old, they wear heavy cloaks

108
00:05:28,209 --> 00:05:30,591
and combine utilitarian accessories such as packs and

109
00:05:30,611 --> 00:05:34,333
straps with trophies of their adventures, both functional and

110
00:05:34,413 --> 00:05:38,576
fashionable. We drew inspiration from survival gear like gas

111
00:05:38,636 --> 00:05:41,719
masks and hazmat suits. So we chose to design their helmets

112
00:05:41,739 --> 00:05:46,983
with a focus on goggles and breathers. Their armor is

113
00:05:47,063 --> 00:05:50,425
lightweight and fitted to allow for mobility and speed. It is

114
00:05:50,545 --> 00:05:53,888
often comprised of a hard chest plate over a flexible Kevlar

115
00:05:53,908 --> 00:05:54,628
like midsection.

116
00:05:56,010 --> 00:05:58,630
They wear loose fitting pants with pockets and sturdy walking

117
00:05:58,670 --> 00:06:07,153
boots. The warlocks are warrior scholars. Searching for answers

118
00:06:07,193 --> 00:06:10,854
to the mysteries of the traveler and a mastery of its power. They

119
00:06:10,894 --> 00:06:15,475
are mystics, seers and wandering monks. They are mysterious and

120
00:06:15,535 --> 00:06:17,935
secretive with the ability to harness the power of the

121
00:06:17,955 --> 00:06:19,416
traveler to devastating effect.

122
00:06:22,250 --> 00:06:23,931
They wear long overcoats and robes.

123
00:06:24,792 --> 00:06:26,653
And while they generally rely on their abilities

124
00:06:27,153 --> 00:06:28,894
more than heavy armor of other classes,

125
00:06:29,474 --> 00:06:31,636
they still pack a fair amount of hardware on their persons.

126
00:06:32,596 --> 00:06:34,477
They're scholarly, but also practical,

127
00:06:34,918 --> 00:06:37,039
and they are no strangers to the heavy firepower

128
00:06:37,079 --> 00:06:38,380
required to survive in the wild.

129
00:06:41,662 --> 00:06:43,783
The warlocks had many influences and inspirations,

130
00:06:44,503 --> 00:06:45,664
from wizards and shamans

131
00:06:45,964 --> 00:06:47,485
to the trench soldiers of World War I.

132
00:06:48,480 --> 00:06:50,681
We tried to combine all of these elements while always

133
00:06:50,721 --> 00:06:52,262
maintaining an air of mystery about them.

134
00:06:56,123 --> 00:06:59,145
And finally, the Titans, are equivalent to the Knights of

135
00:06:59,245 --> 00:07:02,166
old, heavily armored and bearing the emblems and

136
00:07:02,206 --> 00:07:03,546
heraldry of the city they protect.

137
00:07:04,307 --> 00:07:06,667
They are noble and brave, with a culture steeped in

138
00:07:06,687 --> 00:07:07,108
tradition.

139
00:07:08,228 --> 00:07:10,449
The Titans considered a great honor to protect their city.

140
00:07:12,909 --> 00:07:14,810
They are the most heavily armored of our three classes.

141
00:07:15,671 --> 00:07:17,132
Their designs are most often comprised

142
00:07:17,172 --> 00:07:18,373
of a tight-fitting rubber suit

143
00:07:18,873 --> 00:07:19,994
layered with heavy metal plates,

144
00:07:20,534 --> 00:07:22,295
with large pauldron-like shoulder pads

145
00:07:22,615 --> 00:07:24,136
and sweeping visors inspired

146
00:07:24,176 --> 00:07:25,477
by medieval and renaissance armor.

147
00:07:27,158 --> 00:07:28,519
Large armored thigh pads and boots

148
00:07:28,579 --> 00:07:30,100
are also a common trait of the Titans.

149
00:07:32,662 --> 00:07:33,903
The badge they wear at their side,

150
00:07:34,103 --> 00:07:36,745
the symbol of their achievements, lineage, or allegiance,

151
00:07:37,365 --> 00:07:39,526
much like the tabards worn by knights throughout history.

152
00:07:43,648 --> 00:07:46,370
OK, so we had a distinct look for each of our classes

153
00:07:46,410 --> 00:07:47,051
we were happy with.

154
00:07:47,611 --> 00:07:49,172
But we still had a lot of questions to answer.

155
00:07:51,734 --> 00:07:53,936
What did different versions of these classes look like?

156
00:07:55,097 --> 00:07:56,097
What parts would change?

157
00:07:56,218 --> 00:07:58,359
And what components were key to the class identity?

158
00:07:59,720 --> 00:08:01,822
How do we break up these awesome designs to fit into an

159
00:08:01,862 --> 00:08:03,603
investment and customization system?

160
00:08:06,746 --> 00:08:08,747
We generated countless drawings to help us answer

161
00:08:08,807 --> 00:08:09,748
these questions and more.

162
00:08:10,763 --> 00:08:12,424
And we use these drawings to set targets

163
00:08:12,464 --> 00:08:13,704
for our customization system.

164
00:08:14,925 --> 00:08:16,386
But an old colleague of mine used to say,

165
00:08:17,026 --> 00:08:19,607
designing games is as much about deciding what you can't do

166
00:08:19,907 --> 00:08:20,608
as what you can.

167
00:08:21,428 --> 00:08:24,410
Setting limitations was just as important as setting targets.

168
00:08:26,811 --> 00:08:29,092
For example, many of these designs

169
00:08:29,152 --> 00:08:31,613
called for a great deal of overlapping pieces, which

170
00:08:31,633 --> 00:08:32,894
was technically very challenging.

171
00:08:33,674 --> 00:08:36,276
We did some tests in this area, but in the end,

172
00:08:36,316 --> 00:08:38,277
we felt it was significantly limiting the artists.

173
00:08:38,837 --> 00:08:40,298
So we just simplified it and moved on.

174
00:08:46,012 --> 00:08:49,353
We've done customization before with some success. With every

175
00:08:49,393 --> 00:08:51,833
iteration we've gotten a little more complex and a little more

176
00:08:51,853 --> 00:08:55,515
expansive. Naturally this is where we started. Can we build

177
00:08:55,555 --> 00:09:00,456
off what we had created for the Halo franchise? In Reach we

178
00:09:00,476 --> 00:09:02,897
broke our characters into helmets, chest armor, arm

179
00:09:02,917 --> 00:09:06,478
accessories and thigh packs. This was not unlike our plans

180
00:09:06,518 --> 00:09:09,359
for Destiny. Different pieces of gear for different parts of the

181
00:09:09,399 --> 00:09:12,080
body. The problem however was the scope.

182
00:09:14,176 --> 00:09:17,077
the sheer amount of content we had to produce for Destiny meant

183
00:09:17,117 --> 00:09:19,637
we needed to be thinking outside the box to approach this

184
00:09:19,677 --> 00:09:26,059
problem from a different angle. During the course of building

185
00:09:26,099 --> 00:09:29,759
Helmets for Reach, we created special add-ons intended to add

186
00:09:29,819 --> 00:09:33,740
extra variation to each helmet. This worked pretty much as we

187
00:09:33,800 --> 00:09:37,841
expected. But a funny thing happened. We accidentally put

188
00:09:37,861 --> 00:09:41,582
the add-ons from one helmet onto another and surprisingly it

189
00:09:41,622 --> 00:09:41,862
worked.

190
00:09:42,965 --> 00:09:45,107
We found that a lot of these add-ons could just be Z-buffered

191
00:09:45,127 --> 00:09:47,590
into the base helmets to quickly create new variants.

192
00:09:50,974 --> 00:09:52,916
This got me wondering if we could create an entire

193
00:09:52,996 --> 00:09:54,117
character using that approach.

194
00:09:55,278 --> 00:09:56,960
So I started mocking up a system in Maya,

195
00:09:57,421 --> 00:09:59,423
building pieces and layering them on top of each other,

196
00:09:59,963 --> 00:10:02,546
until I ended up with what you see here.

197
00:10:02,786 --> 00:10:04,909
25 or so pieces used to build 12 different helmets.

198
00:10:08,489 --> 00:10:11,070
Using these pieces in different colors, I was able to create a

199
00:10:11,170 --> 00:10:14,771
variety of helmets very quickly. Adding in textures and decals

200
00:10:14,811 --> 00:10:18,472
in Photoshop, I created this proof of concept image. This is

201
00:10:18,512 --> 00:10:21,072
what we presented to our tools and graphics engineers to kick

202
00:10:21,132 --> 00:10:26,854
off our early discussions. Going into these discussions, we had

203
00:10:26,934 --> 00:10:28,514
several goals in mind for our new system.

204
00:10:31,224 --> 00:10:33,885
We wanted to save as much time as possible in both creation

205
00:10:33,965 --> 00:10:36,907
and maintenance of our content, to have a base of common

206
00:10:36,987 --> 00:10:39,128
assets that we weren't rebuilding every time we had

207
00:10:39,168 --> 00:10:40,128
to make a new piece of gear.

208
00:10:41,309 --> 00:10:43,350
How many artists find themselves modeling basically

209
00:10:43,390 --> 00:10:45,631
the same pair of boots 10 times throughout the course

210
00:10:45,671 --> 00:10:46,231
of a project?

211
00:10:47,372 --> 00:10:49,933
If they're smart about it, they reuse their high poly and

212
00:10:49,993 --> 00:10:51,834
kitbash some of their previous assets together.

213
00:10:52,574 --> 00:10:54,295
But even then, they're generally still ripping new

214
00:10:54,335 --> 00:10:56,516
maps, laying out new UVs, and retexturing

215
00:10:56,556 --> 00:10:57,576
things countless times.

216
00:10:58,777 --> 00:11:00,158
We needed to be more efficient than that.

217
00:11:01,920 --> 00:11:05,060
That meant the ability to build a shoulder pad one time and use

218
00:11:05,100 --> 00:11:07,881
it freely as many times as it was needed in the game without

219
00:11:07,941 --> 00:11:11,982
additional work. We also wanted to remain as flexible as

220
00:11:12,042 --> 00:11:15,363
possible. If near the end of development we realized the same

221
00:11:15,403 --> 00:11:18,864
shoulder pad was over budget or didn't deform properly or people

222
00:11:18,884 --> 00:11:21,824
just didn't like it, we needed to be able to fix that piece

223
00:11:22,105 --> 00:11:24,965
once and not open every piece of gear that shoulder pad was used

224
00:11:25,005 --> 00:11:25,045
in.

225
00:11:28,903 --> 00:11:32,265
We knew that this was a franchise we intended to grow and develop over the next decade.

226
00:11:32,285 --> 00:11:36,687
The system needed to be expandable, something we could build on as we added content in the

227
00:11:36,728 --> 00:11:38,809
forms of DLC, expansions, and sequels.

228
00:11:40,370 --> 00:11:43,211
We knew we couldn't afford to rebuild everything for every release.

229
00:11:44,052 --> 00:11:47,874
We were spanning console generations, which meant we needed the system to be flexible

230
00:11:47,894 --> 00:11:51,496
enough to take advantage of the higher poly and texture budgets that would be afforded

231
00:11:51,536 --> 00:11:52,777
by the new generation of hardware.

232
00:11:54,185 --> 00:11:56,447
And we knew that even within the same generation of consoles,

233
00:11:56,947 --> 00:11:59,469
tech improves, tools improve, artists improve.

234
00:12:00,670 --> 00:12:03,312
It was important to be able to address old content quickly

235
00:12:03,392 --> 00:12:04,313
and easily down the road.

236
00:12:08,236 --> 00:12:10,838
From our design team, the desire was for player characters

237
00:12:10,858 --> 00:12:12,880
to pick up different pieces of gear, what

238
00:12:12,920 --> 00:12:15,322
we call arrangements, for each slot

239
00:12:15,362 --> 00:12:16,803
and swap them throughout the course of the game.

240
00:12:18,064 --> 00:12:19,285
When this happened, we wanted the player

241
00:12:19,305 --> 00:12:21,326
to notice a significant change to their appearance.

242
00:12:22,433 --> 00:12:25,136
Because of this, artists needed to be able to change assets

243
00:12:25,176 --> 00:12:27,838
significantly without having to worry about breaking skinning

244
00:12:27,958 --> 00:12:28,939
or affecting animation.

245
00:12:29,739 --> 00:12:32,221
In short, we needed the ability to create something

246
00:12:32,241 --> 00:12:34,883
that looked completely different with little to no wake

247
00:12:34,983 --> 00:12:35,724
on other teams.

248
00:12:41,489 --> 00:12:43,090
So after some lengthy discussions

249
00:12:43,130 --> 00:12:45,692
with some very smart people, we had a plan.

250
00:12:47,453 --> 00:12:49,455
We needed to stop thinking of our characters like this.

251
00:12:51,290 --> 00:12:52,651
and start thinking of them like this.

252
00:12:54,753 --> 00:12:57,195
The idea was to break our character designs down

253
00:12:57,236 --> 00:12:58,577
into their most base elements.

254
00:12:59,338 --> 00:13:02,120
Things like belt buckles, shoulder pads, visors,

255
00:13:02,160 --> 00:13:04,703
and straps would all be modeled and textured

256
00:13:04,763 --> 00:13:06,705
as self-contained individual assets.

257
00:13:10,248 --> 00:13:14,612
So building this became much more about building this.

258
00:13:16,464 --> 00:13:18,646
These individual pieces, what we call bits,

259
00:13:19,367 --> 00:13:20,808
would be stored as separate files

260
00:13:21,009 --> 00:13:23,351
and assembled by an artist to create a new arrangement

261
00:13:23,411 --> 00:13:25,313
of arms, legs, helmets, et cetera.

262
00:13:26,714 --> 00:13:28,516
If the design for a particular arrangement

263
00:13:28,596 --> 00:13:31,299
called for a buckle, rather than building a new buckle,

264
00:13:31,459 --> 00:13:33,681
the artist would simply load an existing buckle bit

265
00:13:33,901 --> 00:13:35,123
and place it where he or she needed,

266
00:13:36,624 --> 00:13:38,726
with the system handling many of the technical aspects

267
00:13:38,806 --> 00:13:39,447
behind the scenes.

268
00:13:43,788 --> 00:13:45,829
To control the material properties of each bit, we

269
00:13:45,849 --> 00:13:46,590
created dies.

270
00:13:47,411 --> 00:13:49,973
The die assigned to a bit controls its color, specular

271
00:13:49,993 --> 00:13:52,014
qualities, detail maps, et cetera.

272
00:13:53,295 --> 00:13:55,377
We decided each arrangement would have a die for armor,

273
00:13:56,217 --> 00:13:59,040
for cloth, and what we call suit, which is generally

274
00:13:59,100 --> 00:13:59,860
leather or rubber.

275
00:14:01,622 --> 00:14:03,623
Each bit within an arrangement will be flagged as one of

276
00:14:03,663 --> 00:14:06,065
these types and the material properties set accordingly.

277
00:14:07,546 --> 00:14:08,207
So we had a plan.

278
00:14:09,207 --> 00:14:11,149
We knew how we were going to break our characters down.

279
00:14:12,053 --> 00:14:13,714
Now we just needed a way to put them back together.

280
00:14:16,215 --> 00:14:16,875
Enter a mashup.

281
00:14:18,475 --> 00:14:20,356
Mashup is our custom character assembler.

282
00:14:21,276 --> 00:14:23,457
It allows for any bit created by any artist

283
00:14:23,497 --> 00:14:25,518
to be brought in, placed, rotated,

284
00:14:25,898 --> 00:14:27,398
scaled to fit the arrangement as needed,

285
00:14:27,878 --> 00:14:29,939
all without affecting the original bit geometry.

286
00:14:30,999 --> 00:14:33,200
It really is the heart of our player character building

287
00:14:33,240 --> 00:14:33,600
process.

288
00:14:39,847 --> 00:14:42,669
So this is an example of an artist working in mashup.

289
00:14:47,533 --> 00:14:49,695
We start each arrangement by bringing in a core

290
00:14:49,755 --> 00:14:50,415
to build off of.

291
00:14:51,796 --> 00:14:53,918
There's nothing particularly special about the core,

292
00:14:54,839 --> 00:14:56,640
but it is the foundation of the arrangement.

293
00:14:57,941 --> 00:14:59,382
Much like the foundation of a house

294
00:14:59,523 --> 00:15:02,285
dictates the basic layout of the structure built on top of it.

295
00:15:04,507 --> 00:15:06,088
The artist then begins loading in bits

296
00:15:06,308 --> 00:15:07,329
and placing them where needed.

297
00:15:09,094 --> 00:15:11,096
Each arrangement has a set of predetermined points

298
00:15:11,216 --> 00:15:12,017
to aid in placement.

299
00:15:12,638 --> 00:15:15,721
Things like front, back, left upper arm, right upper arm,

300
00:15:15,842 --> 00:15:16,222
et cetera.

301
00:15:17,283 --> 00:15:19,125
Bits can be set to default to a certain point

302
00:15:19,325 --> 00:15:21,027
just to make things a little easier and faster

303
00:15:21,047 --> 00:15:21,608
for the artists.

304
00:15:25,592 --> 00:15:28,335
As you can see, the artist can scale, rotate, or mirror

305
00:15:28,355 --> 00:15:30,237
the bit in a variety of ways to accommodate

306
00:15:30,277 --> 00:15:31,238
the needs of the arrangement.

307
00:15:33,202 --> 00:15:35,484
There's no hard limit to the number of bits an arrangement

308
00:15:35,504 --> 00:15:38,145
can be made of, as the bits are combined at export time

309
00:15:38,245 --> 00:15:39,086
to save performance.

310
00:15:41,948 --> 00:15:43,669
As long as the overall arrangement still

311
00:15:43,729 --> 00:15:46,010
fits in its allotted memory and performance budgets,

312
00:15:46,511 --> 00:15:46,931
we're all good.

313
00:15:51,934 --> 00:15:54,176
After we've established the basic geometry of the helmet,

314
00:15:54,416 --> 00:15:55,636
there are a number of properties that

315
00:15:55,656 --> 00:15:58,558
can be set on each bit to alter its function or appearance.

316
00:16:05,231 --> 00:16:08,011
We can set what type of material the bit takes from our die system.

317
00:16:09,072 --> 00:16:11,252
We can set whether the bit draws in first person or not.

318
00:16:12,132 --> 00:16:13,052
We can set whether the bit...

319
00:16:13,072 --> 00:16:14,693
excuse me...

320
00:16:15,053 --> 00:16:16,553
what platforms the bit is drawn on.

321
00:16:17,193 --> 00:16:19,033
We can also override the bit's default shader,

322
00:16:19,073 --> 00:16:21,994
allowing for texture and shader variation unique to that arrangement.

323
00:16:22,594 --> 00:16:25,394
And we can even add vertex animation to give the bit sway or movement.

324
00:16:27,155 --> 00:16:29,375
After properties are set, we need to skin the bits.

325
00:16:30,535 --> 00:16:33,996
They can be quickly rigid-bound or skinned using our custom one-button skinning tool.

326
00:16:35,669 --> 00:16:38,131
optionally the bit can be custom skinned by one of our riggers

327
00:16:38,692 --> 00:16:41,114
and the skin weight is stored within the bit and applied the

328
00:16:41,154 --> 00:16:46,299
next time an artist brings it in. Now, this video is sped up

329
00:16:46,339 --> 00:16:49,982
to about five times normal speed. And I'm not going to lie

330
00:16:50,002 --> 00:16:53,626
to you, I've built this helmet before. But it comes in in

331
00:16:53,666 --> 00:16:56,168
about three minutes and 30 seconds. So what you're looking

332
00:16:56,268 --> 00:16:58,690
at is a new piece of helmet content in about 20 minutes.

333
00:17:06,541 --> 00:17:08,662
So the other tool you saw in that video is gear manager.

334
00:17:09,542 --> 00:17:11,643
Gear manager allows us to browse through arrangements,

335
00:17:11,723 --> 00:17:12,603
bits, and bobs.

336
00:17:13,723 --> 00:17:17,264
A bob, or a bunch of bits, is essentially a group of bits

337
00:17:17,304 --> 00:17:18,125
stored as a preset.

338
00:17:19,045 --> 00:17:20,965
It allows artists to put together pieces that are more

339
00:17:21,046 --> 00:17:23,726
complex than a single bit, but simpler than a full

340
00:17:23,766 --> 00:17:24,207
arrangement.

341
00:17:25,207 --> 00:17:27,408
A pair of boots, including straps and armor, might be a

342
00:17:27,448 --> 00:17:28,168
good example of this.

343
00:17:30,773 --> 00:17:33,276
Most importantly, gear manager gives us a variety of methods

344
00:17:33,336 --> 00:17:36,759
to find useful bits. The most obvious method being to simply

345
00:17:36,839 --> 00:17:38,721
scroll through pages of thumbnails looking for

346
00:17:38,781 --> 00:17:41,284
something interesting. But there's much more to it than

347
00:17:41,324 --> 00:17:45,708
that. I can filter and search bits by name, by folder, by

348
00:17:45,748 --> 00:17:53,556
class, or by artist assigned keyword. I can also mark bits

349
00:17:53,616 --> 00:17:55,378
as favorites to easily find them later.

350
00:17:56,991 --> 00:17:59,192
For example, I can search for metal bolts,

351
00:17:59,933 --> 00:18:02,534
limit that to a certain class, quickly scrub through

352
00:18:02,574 --> 00:18:05,256
thumbnails, and even rotate and zoom a preview of the model,

353
00:18:06,056 --> 00:18:06,956
all in Gear Manager.

354
00:18:07,917 --> 00:18:09,178
Once I find one I'm interested in,

355
00:18:09,198 --> 00:18:11,639
I simply double click to send it to Mashup.

356
00:18:14,421 --> 00:18:17,282
Going back to our Lego analogy, how many hours

357
00:18:17,302 --> 00:18:19,083
did you spend pawing through that giant container

358
00:18:19,123 --> 00:18:20,724
of Legos looking for that perfect piece?

359
00:18:22,205 --> 00:18:23,726
Gear Manager allows artists to focus

360
00:18:23,766 --> 00:18:25,707
on building their arrangements rather than searching

361
00:18:25,727 --> 00:18:26,187
for the perfect pieces.

362
00:18:31,706 --> 00:18:33,987
Cloth setup is generally the last step of our process.

363
00:18:34,788 --> 00:18:37,549
We use Havok Cloth and a custom wizard-like interface

364
00:18:37,569 --> 00:18:39,550
that allows artists to define cloth regions

365
00:18:39,990 --> 00:18:41,931
without delving too deeply into technical setup.

366
00:18:43,352 --> 00:18:45,313
Artists pick the type of cloth gear they're making,

367
00:18:45,934 --> 00:18:48,255
the type of fabric, and the wizard guides them

368
00:18:48,275 --> 00:18:50,316
through selecting the appropriate verts for skinned,

369
00:18:50,676 --> 00:18:51,997
simulated, and anchored regions.

370
00:18:56,759 --> 00:18:58,440
In the end, once it's been imported into the game,

371
00:18:58,660 --> 00:18:59,581
it looks something like this.

372
00:19:06,404 --> 00:19:07,544
So now that we've built our helmet,

373
00:19:07,804 --> 00:19:10,225
we need to make sure it conforms to the geometry and texture

374
00:19:10,245 --> 00:19:11,345
budgets we've allowed for it.

375
00:19:12,365 --> 00:19:14,226
Because there's the potential for every player

376
00:19:14,306 --> 00:19:16,686
in a given space to be wearing completely unique gear,

377
00:19:17,286 --> 00:19:20,087
we decided to assign each player their own texture and polygon

378
00:19:20,127 --> 00:19:20,447
budgets.

379
00:19:21,447 --> 00:19:23,327
Memory within a mission could then be set aside

380
00:19:23,467 --> 00:19:24,908
based on the number of players it required.

381
00:19:27,668 --> 00:19:29,049
More than that, since each player

382
00:19:29,069 --> 00:19:30,709
can swap out different parts of their character,

383
00:19:31,149 --> 00:19:32,689
we had to further break those budgets down

384
00:19:32,789 --> 00:19:33,990
into an amount per slot.

385
00:19:34,937 --> 00:19:36,978
These were then tailored to best fit each class.

386
00:19:39,379 --> 00:19:42,861
For example, a Titan's arm slot allows for a 1024 by 512

387
00:19:43,141 --> 00:19:48,123
texture on the PlayStation 3 and Xbox 360, and roughly 170K

388
00:19:48,164 --> 00:19:49,084
memory for geometry.

389
00:19:52,706 --> 00:19:55,067
A Warlock's arm slot, which covers less real estate,

390
00:19:55,727 --> 00:19:57,829
allows for a 512 by 512 texture and 110K memory for geometry.

391
00:20:01,467 --> 00:20:04,190
However, the budget for all the combined gear of the Titan and

392
00:20:04,210 --> 00:20:11,175
the Warlock is the same. Okay. Understanding that, let's take

393
00:20:11,195 --> 00:20:13,317
a look at this Hunter's chest arrangement shown in our

394
00:20:13,357 --> 00:20:18,101
texture plate preview. On the left is the empty plate. The

395
00:20:18,141 --> 00:20:20,703
green area is the texture space I have to work with for this

396
00:20:20,763 --> 00:20:25,427
chest arrangement. On the right is the built plate. The engine

397
00:20:25,467 --> 00:20:28,250
takes each bit's textures and UVs and programmatically

398
00:20:28,310 --> 00:20:29,331
arranges them on the plate.

399
00:20:30,245 --> 00:20:32,707
Anything that doesn't fit is displayed in the red area on

400
00:20:32,727 --> 00:20:33,768
the right side of the preview.

401
00:20:34,708 --> 00:20:36,710
So here you can see I have three bits not

402
00:20:36,750 --> 00:20:37,450
fitting on the plate.

403
00:20:39,251 --> 00:20:40,652
At this point, I have a couple of options.

404
00:20:41,693 --> 00:20:43,795
I can remove some bits to make more room on the texture.

405
00:20:44,675 --> 00:20:46,937
I can swap out some of the larger resolution ones for

406
00:20:46,997 --> 00:20:49,999
smaller, or I can change the bits texture size.

407
00:20:52,761 --> 00:20:54,462
Generally, the first two options are my best bet.

408
00:20:55,440 --> 00:20:56,880
If I change the bit's texture size,

409
00:20:56,960 --> 00:20:58,581
it's going to affect every arrangement

410
00:20:58,621 --> 00:20:59,462
that bit is used in.

411
00:20:59,982 --> 00:21:02,063
So increasing or decreasing resolution of a bit

412
00:21:02,123 --> 00:21:03,364
is handled with extreme care.

413
00:21:05,124 --> 00:21:08,206
In this case, though, the orange highlighted bit on the left

414
00:21:08,866 --> 00:21:11,087
was using an inappropriate amount of texture resolution

415
00:21:11,187 --> 00:21:12,668
relative to its physical size.

416
00:21:13,689 --> 00:21:14,629
So I reduced it down.

417
00:21:15,349 --> 00:21:17,430
And that change gets propagated to any arrangement

418
00:21:17,450 --> 00:21:18,311
that bit is used in.

419
00:21:19,771 --> 00:21:21,332
And it allows my three remaining bits

420
00:21:21,392 --> 00:21:22,453
to fit nicely on the plate.

421
00:21:25,100 --> 00:21:26,761
So that gives us a handle on our texture budgets.

422
00:21:27,281 --> 00:21:28,442
Now let's take a look at our geometry.

423
00:21:32,265 --> 00:21:34,807
Here you see the geometry memory profile for our hunter chest.

424
00:21:35,968 --> 00:21:38,050
Unlike the texture memory, each instance of a bit

425
00:21:38,110 --> 00:21:38,951
has to be counted.

426
00:21:39,331 --> 00:21:41,913
So each instance is shown along with a breakdown of cost.

427
00:21:43,414 --> 00:21:45,716
Since many things like UV borders, hard edges,

428
00:21:45,816 --> 00:21:47,277
and shader assignments can affect

429
00:21:47,337 --> 00:21:49,339
the amount of memory associated with the geometry,

430
00:21:49,960 --> 00:21:52,301
we try to give the artist as much information as possible.

431
00:21:54,952 --> 00:21:57,053
If I'm over budget, my options are similar to that

432
00:21:57,093 --> 00:21:58,153
of my texture budget pass.

433
00:21:59,094 --> 00:22:01,815
I can remove some bits, swap them out for cheaper ones,

434
00:22:02,376 --> 00:22:04,097
or I can open one up and make some changes

435
00:22:04,117 --> 00:22:05,037
to the actual geometry.

436
00:22:06,518 --> 00:22:08,199
Many times we'll find that something simple,

437
00:22:08,339 --> 00:22:10,981
like a bit containing a large number of unwelded UVs

438
00:22:11,341 --> 00:22:13,842
or unnecessary edge loops, in which case

439
00:22:13,882 --> 00:22:15,543
it's a simple matter of right clicking the bit,

440
00:22:15,863 --> 00:22:18,405
selecting edit, making my changes, and saving.

441
00:22:19,345 --> 00:22:20,886
With that, I've just made an optimization

442
00:22:20,926 --> 00:22:22,707
to every arrangement that bit is used in.

443
00:22:26,018 --> 00:22:28,039
Now that I've got my helmet built and budget, I'm in done,

444
00:22:28,099 --> 00:22:34,761
right? Wrong. Part of player customization means allowing for

445
00:22:34,801 --> 00:22:37,642
both genders. So now we have to look at building the female

446
00:22:37,662 --> 00:22:42,323
version of our helmet. We initially experimented with

447
00:22:42,363 --> 00:22:45,104
taking a fully built piece of male gear and using a

448
00:22:45,164 --> 00:22:47,585
combination of wrap deformers and blend shapes to create a

449
00:22:47,685 --> 00:22:49,885
semi-automated process for building female gear.

450
00:22:52,509 --> 00:22:53,970
There were several problems with this approach.

451
00:22:54,771 --> 00:22:56,792
First, since it combined all of the bits

452
00:22:56,893 --> 00:22:59,735
into a single piece of geometry to then be

453
00:22:59,775 --> 00:23:01,056
conformed to the female physique,

454
00:23:01,476 --> 00:23:03,978
it lost a lot of the flexibility and benefits of the system.

455
00:23:05,639 --> 00:23:07,481
Second, to meet our high quality bar,

456
00:23:08,241 --> 00:23:10,223
artists were spending longer and longer massaging

457
00:23:10,263 --> 00:23:13,225
the geometry by hand rather than relying on the automated mesh.

458
00:23:14,727 --> 00:23:16,248
So after some careful consideration,

459
00:23:16,648 --> 00:23:17,669
we made a direction change.

460
00:23:20,538 --> 00:23:22,239
We decided that with a few modifications

461
00:23:22,299 --> 00:23:24,421
and additional tools, our current process

462
00:23:24,461 --> 00:23:26,022
was quick enough and strong enough

463
00:23:26,382 --> 00:23:28,343
to use for both male and female arrangements.

464
00:23:29,503 --> 00:23:31,885
We added the ability for a bit to have a female version.

465
00:23:33,186 --> 00:23:35,407
This is particularly useful for things like chest plates

466
00:23:35,467 --> 00:23:36,868
and pants, where we want geometry

467
00:23:36,908 --> 00:23:39,069
that more closely conforms to the feminine proportions.

468
00:23:40,052 --> 00:23:42,893
However, the majority of things, ammo packs and the like,

469
00:23:43,474 --> 00:23:44,994
just needed to be slightly scaled down

470
00:23:45,195 --> 00:23:46,095
and moved into position.

471
00:23:46,935 --> 00:23:48,916
This allowed us to use the vast majority

472
00:23:48,956 --> 00:23:51,217
of the content we built for both males and females.

473
00:23:55,019 --> 00:23:56,780
Now, if you noticed on the texture preview slide,

474
00:23:57,200 --> 00:23:58,741
all of our bits are textured, for the most part,

475
00:23:58,781 --> 00:23:59,881
as gray scale images.

476
00:24:02,982 --> 00:24:05,183
This is to allow for the additional customization layer

477
00:24:05,223 --> 00:24:06,364
brought in by our dye system.

478
00:24:07,684 --> 00:24:10,225
Before I get into that, I want to talk a little bit about the

479
00:24:10,285 --> 00:24:14,886
textures associated with a bit. Like most modern 3D assets, our

480
00:24:14,926 --> 00:24:18,867
primary maps are diffuse and normal maps. But for bits, we

481
00:24:18,887 --> 00:24:24,068
also have what we call a gear stack texture. Here's a sample

482
00:24:24,088 --> 00:24:26,829
gear stack texture from one of our hunter capes. Pretty, isn't

483
00:24:26,849 --> 00:24:31,150
it? What the gear stack is, is three different black and white

484
00:24:31,190 --> 00:24:34,171
masks stacked into a single RGB texture to conserve memory.

485
00:24:35,362 --> 00:24:37,083
We've evolved these masks to be used

486
00:24:37,103 --> 00:24:39,584
in a number of different ways, but the general usage

487
00:24:39,624 --> 00:24:40,224
goes like this.

488
00:24:42,185 --> 00:24:44,906
The blue channel holds a fringe map, or alpha test map.

489
00:24:45,806 --> 00:24:47,467
This is primarily used on cloth bits

490
00:24:47,507 --> 00:24:49,888
to create tatters and holes, hence the name fringe.

491
00:24:52,009 --> 00:24:54,250
The green channel stores our specular roughness map,

492
00:24:55,030 --> 00:24:57,371
which works in conjunction with the assigned spec material

493
00:24:57,531 --> 00:25:00,032
to control specular roughness and intensity of the surface.

494
00:25:02,473 --> 00:25:04,734
And finally, in the red channel, we have our scratch mask.

495
00:25:05,886 --> 00:25:08,506
The scratch mask is used to control what areas are affected

496
00:25:08,566 --> 00:25:10,087
by the dye assigned to the bit.

497
00:25:11,207 --> 00:25:13,407
We call it a dye, but it controls significantly more

498
00:25:13,447 --> 00:25:14,148
than just color.

499
00:25:16,208 --> 00:25:18,608
Areas that are white in the scratch mask get affected by

500
00:25:18,648 --> 00:25:21,809
not only the dye's color using an assigned blend method, but

501
00:25:21,849 --> 00:25:24,790
also the dye's diffuse and normal detail maps, as well as

502
00:25:24,810 --> 00:25:26,150
the specular material response.

503
00:25:29,450 --> 00:25:31,291
Speaking of which, let's talk a bit about how

504
00:25:31,331 --> 00:25:31,971
we handle specular.

505
00:25:34,040 --> 00:25:35,960
Our spec response is comprised of three elements.

506
00:25:36,521 --> 00:25:39,241
The gear's specular roughness mask,

507
00:25:39,461 --> 00:25:42,502
as we saw on the previous slide, and the die's specular lobe

508
00:25:42,542 --> 00:25:42,943
intent.

509
00:25:46,104 --> 00:25:48,724
The specular lobe controls three aspects of the material's spec

510
00:25:48,764 --> 00:25:49,145
response.

511
00:25:49,945 --> 00:25:52,526
The shape of the highlight, the brightness of the highlight,

512
00:25:53,026 --> 00:25:54,406
and the fall off of the diffuse light.

513
00:25:55,987 --> 00:25:57,647
Instead of using a standard Phong model,

514
00:25:57,807 --> 00:26:00,748
we map a content-driven gradient ramp to the surface

515
00:26:00,868 --> 00:26:02,969
to define the appearance and shape of the specular highlight.

516
00:26:04,766 --> 00:26:06,508
The ramp textures shown at the bottom of the image

517
00:26:06,609 --> 00:26:07,830
are applied to the sphere above,

518
00:26:08,311 --> 00:26:09,533
beginning at the point of reflection

519
00:26:09,833 --> 00:26:11,876
and extending 180 degrees around the mesh.

520
00:26:13,037 --> 00:26:14,720
The outlined orange area demonstrates

521
00:26:14,760 --> 00:26:16,302
how the ramp textures correspond

522
00:26:16,322 --> 00:26:17,283
to the highlight they produce.

523
00:26:21,101 --> 00:26:23,983
The specular tint is also a content driven gradient ramp.

524
00:26:24,563 --> 00:26:26,745
And it controls four aspects of how specular will

525
00:26:26,785 --> 00:26:27,705
render on the surface.

526
00:26:28,526 --> 00:26:29,827
The color of the specular highlight,

527
00:26:30,587 --> 00:26:32,608
how the diffuse texture influences the specular

528
00:26:32,648 --> 00:26:35,670
response, the brightness of the highlight based on angle,

529
00:26:36,431 --> 00:26:37,692
and diffuse brightness scaling.

530
00:26:39,313 --> 00:26:40,834
Unlike the lobe ramp, which maps based

531
00:26:40,874 --> 00:26:42,115
on the position of a light source,

532
00:26:42,795 --> 00:26:45,176
the tint ramp maps to the surface based on viewing angle.

533
00:26:46,444 --> 00:26:48,405
The ramp extends from the surface perpendicular

534
00:26:48,425 --> 00:26:50,726
to the view 90 degrees to the glancing edge.

535
00:26:51,726 --> 00:26:53,807
This is what allows us to change specular color based

536
00:26:53,847 --> 00:26:54,427
on angle of view.

537
00:26:55,867 --> 00:26:57,528
Again, the orange outline demonstrate

538
00:26:57,568 --> 00:26:59,409
how these ramps get applied to the spheres above.

539
00:27:03,750 --> 00:27:06,411
The tent also sets how the specular highlight is modified

540
00:27:06,451 --> 00:27:07,592
by the underlying diffuse.

541
00:27:09,032 --> 00:27:11,633
These spheres above are rendered in a debug spec light only

542
00:27:11,673 --> 00:27:11,873
mode.

543
00:27:12,975 --> 00:27:15,636
The one on the left allows the diffuse texture of the sphere

544
00:27:15,736 --> 00:27:17,977
to modify the specular color and brightness.

545
00:27:18,777 --> 00:27:21,398
The middle image modifies the specular response

546
00:27:21,638 --> 00:27:24,219
based on the diffuse luminance, so only adjusting

547
00:27:24,239 --> 00:27:24,739
the brightness.

548
00:27:25,679 --> 00:27:27,360
And the third white overcoat image

549
00:27:27,760 --> 00:27:30,701
ignores the diffuse entirely in regards to specular response.

550
00:27:33,742 --> 00:27:35,163
Put this all together and it looks like this.

551
00:27:36,303 --> 00:27:38,444
Lobe multiplied by tint plus diffuse.

552
00:27:39,671 --> 00:27:42,833
However, this image above assumes a pure white specular

553
00:27:43,053 --> 00:27:43,753
roughness mask.

554
00:27:46,615 --> 00:27:48,776
The spec roughness mask modifies the spec result.

555
00:27:49,917 --> 00:27:51,738
Generally, white pixels in the mask

556
00:27:51,778 --> 00:27:53,079
produce a bright, sharp highlight,

557
00:27:53,359 --> 00:27:55,360
and dark pixels produce a dim, broad highlight.

558
00:27:58,622 --> 00:28:00,584
This combination of elements gives artists

559
00:28:00,624 --> 00:28:03,405
a huge variety of interesting spec responses to work with.

560
00:28:04,346 --> 00:28:06,707
When you combine this with the additional elements in the die,

561
00:28:08,569 --> 00:28:09,149
it looks like this.

562
00:28:11,318 --> 00:28:13,959
As you can see, this allows us to apply a range of materials

563
00:28:14,399 --> 00:28:17,260
from polished chrome to worn leather to Kevlar

564
00:28:17,660 --> 00:28:21,162
to tattered cloth, all on the same base texture and geometry.

565
00:28:24,923 --> 00:28:27,464
All of these are materials we can quickly and easily apply

566
00:28:27,504 --> 00:28:28,625
to any of our player gear.

567
00:28:33,447 --> 00:28:34,907
In addition to the diet areas of gear,

568
00:28:35,267 --> 00:28:37,628
we also have controls for the other side of the scratch mask.

569
00:28:38,936 --> 00:28:41,397
The areas that are painted black can be assigned their own

570
00:28:41,437 --> 00:28:44,458
specular properties as well as detail, diffuse, and normal

571
00:28:44,498 --> 00:28:44,738
maps.

572
00:28:46,178 --> 00:28:48,539
This helps us achieve things like matte paint being stripped

573
00:28:48,579 --> 00:28:51,440
away from shiny metal or a shiny metal buckle on a leather

574
00:28:51,480 --> 00:28:51,760
collar.

575
00:28:56,062 --> 00:28:58,963
Each arrangement gets assigned three different dyes, a dye for

576
00:28:59,023 --> 00:29:00,883
suit, for armor, and for cloth.

577
00:29:01,804 --> 00:29:04,004
Each dye has both a primary and secondary color

578
00:29:04,044 --> 00:29:04,785
associated with it.

579
00:29:05,685 --> 00:29:07,686
These parameters are set on a per bit basis

580
00:29:07,706 --> 00:29:08,626
throughout the arrangement.

581
00:29:12,655 --> 00:29:14,516
The dies assigned to an arrangement helped to control

582
00:29:14,536 --> 00:29:17,416
the color palette, homogenize all of the bits into a cohesive

583
00:29:17,456 --> 00:29:20,417
piece, and allow us to form larger graphic shapes within

584
00:29:20,437 --> 00:29:28,959
the character. The initial design of the customization

585
00:29:28,999 --> 00:29:31,799
system called for each player to have three dies assigned

586
00:29:31,839 --> 00:29:38,320
across their entire character. This was based on the artist's

587
00:29:38,360 --> 00:29:40,721
desire to avoid every color of the rainbows showing up.

588
00:29:42,420 --> 00:29:44,762
The idea was that players would pick up different die items

589
00:29:44,822 --> 00:29:47,624
that would fit into the three slots, armor, cloth, and suit.

590
00:29:49,205 --> 00:29:50,846
These dies were then applied to the arrangement

591
00:29:51,587 --> 00:29:52,828
across the entire character.

592
00:29:53,969 --> 00:29:56,531
Unfortunately, this was a case where the design needs required

593
00:29:56,571 --> 00:29:58,272
us to adapt our artistic plans.

594
00:30:01,539 --> 00:30:04,061
What we discovered was that when a player picked up a new piece

595
00:30:04,101 --> 00:30:07,022
of gear, even though we were changing the silhouette fairly

596
00:30:07,062 --> 00:30:10,524
significantly, the visual impact wasn't enough to produce

597
00:30:10,544 --> 00:30:12,465
the emotional impact we wanted from the player.

598
00:30:13,706 --> 00:30:16,227
In other words, the player just didn't feel as excited about a

599
00:30:16,267 --> 00:30:19,089
new piece of gear as we wanted them to because we were only

600
00:30:19,149 --> 00:30:21,550
changing one of the visual axes of the character.

601
00:30:24,692 --> 00:30:27,394
The human eye reads changes in color better than it reads

602
00:30:27,434 --> 00:30:28,074
changes in shape.

603
00:30:30,112 --> 00:30:31,812
And changes in both color and shape

604
00:30:31,892 --> 00:30:33,472
are necessary for maximum impact.

605
00:30:34,793 --> 00:30:37,393
With this, it was decided that each tier of player gear

606
00:30:37,533 --> 00:30:38,794
would be assigned a different color,

607
00:30:39,334 --> 00:30:40,554
so that it was obvious to the player

608
00:30:40,574 --> 00:30:41,674
when they picked up a piece of gear

609
00:30:41,714 --> 00:30:42,575
that it was of higher level.

610
00:30:44,235 --> 00:30:46,475
The challenge here was to create color palettes that

611
00:30:46,495 --> 00:30:47,836
were distinct enough individually,

612
00:30:48,096 --> 00:30:50,116
but worked well together from one tier to the next.

613
00:30:53,837 --> 00:30:55,958
Here we have our initial passes at creating these color

614
00:30:55,978 --> 00:30:56,298
palettes.

615
00:30:57,699 --> 00:31:00,121
We use simple block representations of our classes

616
00:31:00,202 --> 00:31:02,544
to assess color compatibility and distribution.

617
00:31:03,885 --> 00:31:06,528
These palettes have been continuously adjusted in Engine

618
00:31:06,628 --> 00:31:07,969
to better communicate to the player.

619
00:31:12,574 --> 00:31:14,315
Using this color and shape approach

620
00:31:14,515 --> 00:31:17,178
proved to be pretty successful in creating bold enough changes

621
00:31:17,238 --> 00:31:19,981
to meet design needs while still feeling good to the artists.

622
00:31:26,927 --> 00:31:28,968
So after building all these fantastic assets,

623
00:31:29,208 --> 00:31:31,229
we needed the ability to quickly view and manage

624
00:31:31,249 --> 00:31:33,210
these arrangements and die assignments in game.

625
00:31:33,831 --> 00:31:34,911
So we created Mantini.

626
00:31:36,933 --> 00:31:39,514
With Mantini, we can quickly select the designer-created

627
00:31:39,554 --> 00:31:41,675
investment item the player would pick up in game

628
00:31:42,436 --> 00:31:45,257
and set the arrangement and the default dies assigned to it,

629
00:31:46,618 --> 00:31:48,239
all within the same UI.

630
00:31:49,860 --> 00:31:52,622
I can quickly change and browse arrangements and dies

631
00:31:52,662 --> 00:31:55,604
on the fly, as well as check both male and female versions

632
00:31:55,664 --> 00:31:56,264
of the arrangement.

633
00:31:57,318 --> 00:31:59,700
This proved invaluable for checking various arrangements

634
00:31:59,720 --> 00:32:02,561
for color compatibility, as well as finding issues such as

635
00:32:02,641 --> 00:32:03,802
clipping or missing pieces.

636
00:32:07,224 --> 00:32:09,045
Using Mantini, we put together this video

637
00:32:09,125 --> 00:32:11,326
to show off some of our very early work in progress

638
00:32:11,366 --> 00:32:11,687
content.

639
00:32:13,980 --> 00:32:14,941
Thank you for watching!

640
00:33:00,677 --> 00:33:03,498
So that's a pretty solid overview of the system. But I'd

641
00:33:03,518 --> 00:33:06,320
be lying if I told you it all went perfectly. Let's be honest,

642
00:33:06,380 --> 00:33:06,861
it never does.

643
00:33:08,531 --> 00:33:10,612
We faced a number of challenges throughout this process.

644
00:33:13,052 --> 00:33:15,373
The system is fairly abstract and complex.

645
00:33:16,253 --> 00:33:18,014
Destiny has been heavily concept driven,

646
00:33:18,234 --> 00:33:20,194
and both the art director and the concept team

647
00:33:20,314 --> 00:33:23,035
are far more comfortable with designs of full characters

648
00:33:23,195 --> 00:33:24,315
rather than a modular system.

649
00:33:25,436 --> 00:33:26,536
Though we tried as best we could

650
00:33:26,796 --> 00:33:28,737
to create modular pieces that worked well together,

651
00:33:29,397 --> 00:33:30,937
many of the designs led themselves

652
00:33:30,957 --> 00:33:32,378
to unique, specialized bits.

653
00:33:33,658 --> 00:33:35,519
As a result, I feel like we've still only scratched

654
00:33:35,539 --> 00:33:37,259
the surface of what we can do with the system.

655
00:33:40,600 --> 00:33:43,081
Content creation got too far ahead of tools and engineering

656
00:33:43,121 --> 00:33:43,301
work.

657
00:33:44,281 --> 00:33:45,482
For much of the production cycle,

658
00:33:45,522 --> 00:33:47,323
the tools were very much a work in progress.

659
00:33:48,003 --> 00:33:49,604
Missing features and stability issues

660
00:33:49,664 --> 00:33:51,585
made working with the system early on somewhat

661
00:33:51,605 --> 00:33:52,165
of a nightmare.

662
00:33:53,185 --> 00:33:55,046
This caused a lot of frustration and slowdowns

663
00:33:55,086 --> 00:33:56,087
for the content creators.

664
00:33:58,968 --> 00:34:01,789
And finally, we lost some of the joy of building characters.

665
00:34:02,630 --> 00:34:05,611
To be honest, this is a problem with any customization system

666
00:34:05,651 --> 00:34:06,211
I've worked with.

667
00:34:07,178 --> 00:34:09,639
It's difficult to maintain a sense of creative ownership

668
00:34:09,739 --> 00:34:11,620
and excitement for artists when they're

669
00:34:11,640 --> 00:34:13,201
building small parts of a character

670
00:34:13,341 --> 00:34:14,321
rather than the full thing.

671
00:34:15,842 --> 00:34:18,083
Since geometry and textures needed to stay modular,

672
00:34:18,443 --> 00:34:19,744
it kept the artists from really being

673
00:34:19,764 --> 00:34:22,165
able to handcraft assets to the level they desired.

674
00:34:24,846 --> 00:34:25,747
OK, so what went right?

675
00:34:28,248 --> 00:34:30,209
Overall, the system itself works quite well.

676
00:34:30,849 --> 00:34:33,250
At this stage, a new and unique looking arrangement

677
00:34:33,290 --> 00:34:35,351
can be created in a very short period of time.

678
00:34:36,264 --> 00:34:39,625
For something like a helmet, that may take as little as an hour from start to end game.

679
00:34:40,946 --> 00:34:44,127
We've also seen the system get better and better the more content we add to it.

680
00:34:44,967 --> 00:34:48,488
This bodes extremely well for a franchise we plan to carry on for a number of years.

681
00:34:51,769 --> 00:34:57,891
The flexibility the system provided us has proved invaluable in fixing bugs and reacting to designer and art director feedback.

682
00:34:58,792 --> 00:35:00,772
Don't like the color of something? Change the dye.

683
00:35:01,193 --> 00:35:05,074
That sleeve not deforming properly? Fix it in one place and it's fixed everywhere.

684
00:35:05,886 --> 00:35:08,387
This fits in extremely well with Bungie's approach

685
00:35:08,427 --> 00:35:09,327
of rapid iteration.

686
00:35:13,629 --> 00:35:15,990
Lastly, the system helped to unify content.

687
00:35:16,811 --> 00:35:19,192
With so many different artists working on player characters,

688
00:35:19,292 --> 00:35:21,012
the system proved a fantastic tool

689
00:35:21,233 --> 00:35:22,933
for helping to set the ground rules to bridge

690
00:35:22,953 --> 00:35:23,914
different artists' styles.

691
00:35:25,194 --> 00:35:27,095
Since artists were constantly seeing and working

692
00:35:27,115 --> 00:35:29,076
with each other's content, they quickly

693
00:35:29,116 --> 00:35:30,897
picked up on the design language and style

694
00:35:30,937 --> 00:35:31,657
we were striving for.

695
00:35:32,765 --> 00:35:35,307
The additional layer of the DICE system assured color and

696
00:35:35,327 --> 00:35:37,068
spec responses were also unified.

697
00:35:39,670 --> 00:35:43,133
So an entirely new type of game, an entirely new engine

698
00:35:43,434 --> 00:35:46,656
and tool set, and a largely new team set the challenge for us.

699
00:35:47,637 --> 00:35:48,518
And we learned a ton.

700
00:35:49,499 --> 00:35:51,540
How to best work with the system, what tools and

701
00:35:51,580 --> 00:35:52,301
features were missing.

702
00:35:53,242 --> 00:35:55,404
We also learned a lot about our strengths and weaknesses as a

703
00:35:55,444 --> 00:35:58,366
team, and where we can do things smarter and more

704
00:35:58,406 --> 00:35:58,826
efficiently.

705
00:36:00,572 --> 00:36:02,493
It's been a tough road, but we've set ourselves up

706
00:36:02,553 --> 00:36:04,975
incredibly well for the future, and I'm very pleased with that.

707
00:36:08,097 --> 00:36:10,158
So now that you have an idea of the system and its challenges

708
00:36:10,198 --> 00:36:12,420
and successes, let's take a look at what happens

709
00:36:12,580 --> 00:36:13,441
when you put it all together.

710
00:36:14,221 --> 00:36:15,822
These are just a few of the player characters

711
00:36:15,862 --> 00:36:17,083
you could see when you're playing

712
00:36:17,103 --> 00:36:18,064
through Destiny this fall.

713
00:37:28,748 --> 00:37:32,230
Okay, so where do we go from here? There were key things we

714
00:37:32,250 --> 00:37:35,453
missed out on. Opportunities to make the system stronger that we

715
00:37:35,493 --> 00:37:38,055
didn't have time or resources to take advantage of for this

716
00:37:38,095 --> 00:37:38,435
project.

717
00:37:41,082 --> 00:37:44,485
First and foremost on our list is a more advanced decal system.

718
00:37:45,506 --> 00:37:47,228
Decals are a great way to allow players

719
00:37:47,268 --> 00:37:48,228
to customize their look.

720
00:37:49,129 --> 00:37:51,391
Games like Forza have built entire economies

721
00:37:51,451 --> 00:37:52,652
on player-generated decals.

722
00:37:52,672 --> 00:37:56,155
Our current system requires placement and geometry

723
00:37:56,195 --> 00:37:58,818
to be created by an artist specific to each arrangement.

724
00:37:59,658 --> 00:38:02,541
A system allowing for projected decals based on both artist

725
00:38:02,781 --> 00:38:04,242
as well as user-generated content

726
00:38:04,563 --> 00:38:07,265
would be a huge tool in allowing players to express themselves.

727
00:38:10,816 --> 00:38:14,499
Developing for four platforms simultaneously

728
00:38:15,180 --> 00:38:16,941
is a difficult task for any developer.

729
00:38:17,902 --> 00:38:19,283
To make content more efficiently,

730
00:38:19,403 --> 00:38:21,025
we need better tools to allow artists

731
00:38:21,045 --> 00:38:23,667
to focus on what they do best, making amazing art,

732
00:38:24,367 --> 00:38:25,749
and not having to spend time dealing

733
00:38:25,789 --> 00:38:27,530
with separate budget and performance goals

734
00:38:27,570 --> 00:38:28,751
for the individual platforms.

735
00:38:31,974 --> 00:38:34,156
We would also benefit from an expanded die system.

736
00:38:35,173 --> 00:38:37,456
Additional features in the die to control things like

737
00:38:37,576 --> 00:38:40,761
environment maps, adjust wear levels, and blend in multiple

738
00:38:40,801 --> 00:38:42,944
sets of detail maps would greatly improve the system.

739
00:38:44,165 --> 00:38:46,248
Something we've strongly desired is the ability to add

740
00:38:46,268 --> 00:38:49,352
an accent color that appears in small controlled amounts to

741
00:38:49,392 --> 00:38:50,994
give an arrangement that extra little pop.

742
00:38:55,262 --> 00:38:58,244
In conclusion, Destiny is a hugely ambitious game,

743
00:38:58,765 --> 00:39:00,967
and our player customization system is no different.

744
00:39:01,888 --> 00:39:03,329
Like all ambitious efforts, there

745
00:39:03,349 --> 00:39:04,490
were challenges along the way.

746
00:39:05,511 --> 00:39:07,633
Overall, I believe we've achieved something completely

747
00:39:07,713 --> 00:39:10,195
unique to the shooter genre and developed a system that

748
00:39:10,215 --> 00:39:12,237
will only grow in power and flexibility

749
00:39:12,557 --> 00:39:15,079
as we continue to create content and expand the franchise.

750
00:39:16,747 --> 00:39:20,130
So obviously a system like this takes a bunch of people

751
00:39:20,210 --> 00:39:21,471
pouring their heart and souls into it.

752
00:39:22,031 --> 00:39:23,593
And most of them couldn't be here today.

753
00:39:23,673 --> 00:39:26,655
But I have to say thank you very much to the team back at

754
00:39:26,696 --> 00:39:28,998
Bungie for allowing me to come here and share this with you.

755
00:39:29,498 --> 00:39:29,758
That's it.

756
00:39:40,768 --> 00:39:43,430
So if anybody has any questions, I think they want

757
00:39:43,611 --> 00:39:44,491
you to use the microphones.

758
00:39:48,550 --> 00:39:49,530
but they're not going to turn them on.

759
00:39:51,031 --> 00:39:52,351
And it's on, hopefully you can hear me.

760
00:39:53,012 --> 00:39:53,632
Oh, there we go.

761
00:39:54,012 --> 00:39:56,693
Does this system extend beyond the character to things

762
00:39:56,793 --> 00:39:59,955
like weapons or world doodads, and why or why not?

763
00:40:00,675 --> 00:40:02,036
It does.

764
00:40:02,756 --> 00:40:04,637
We're trying to use the system as much as possible.

765
00:40:05,597 --> 00:40:07,098
We do use it on our hard surface assets

766
00:40:07,138 --> 00:40:09,759
as well, like weapons and player ships and that sort of stuff.

767
00:40:12,660 --> 00:40:14,801
When you end up changing a bit.

768
00:40:16,722 --> 00:40:19,343
How long does it take to propagate that across all the

769
00:40:20,203 --> 00:40:21,664
helmets that might use that bit?

770
00:40:21,824 --> 00:40:23,745
Like, you have to rebuild all those assets, I imagine.

771
00:40:25,145 --> 00:40:32,768
The bits are loaded when you bring the arrangement into Maya.

772
00:40:33,928 --> 00:40:35,529
So from a content creator standpoint,

773
00:40:35,549 --> 00:40:36,629
it happens instantaneously.

774
00:40:36,829 --> 00:40:38,309
As soon as it's checked in and you get latest,

775
00:40:38,610 --> 00:40:41,170
you load up that arrangement, the new bit is in there.

776
00:40:42,571 --> 00:40:44,432
But then when you make the, like,

777
00:40:45,188 --> 00:40:48,229
when you go to use it in the game. So for the individual

778
00:40:48,289 --> 00:40:51,850
artists they will reexport the geometry and it will come in

779
00:40:51,870 --> 00:40:55,551
game. Other than that we do nightly builds. So for people on

780
00:40:55,591 --> 00:40:57,731
the other side of the team we'll see it whenever they get the

781
00:40:57,771 --> 00:41:04,253
next content build. Okay. So my question is will we ever see

782
00:41:04,473 --> 00:41:09,494
tiger man DLC and if not how does your team go about deciding

783
00:41:10,154 --> 00:41:13,395
something doesn't fit the world you're building? Sorry what was

784
00:41:13,415 --> 00:41:13,835
that last part?

785
00:41:14,852 --> 00:41:18,475
How does your team decide something that you've been

786
00:41:19,295 --> 00:41:23,078
prototyping doesn't fit the art style you're taking the game

787
00:41:23,138 --> 00:41:23,218
in?

788
00:41:23,919 --> 00:41:25,820
So I guess I'm supposed to repeat the questions, which I

789
00:41:25,860 --> 00:41:28,042
totally forgot the first one.

790
00:41:28,142 --> 00:41:30,804
The first part was, will we see Tiger Man in DLC?

791
00:41:31,645 --> 00:41:32,846
The answer to that is, you never know.

792
00:41:34,864 --> 00:41:39,067
If we do, you can guarantee I'll be using Tiger Man first before

793
00:41:39,107 --> 00:41:44,951
you guys. Second part, how do we decide if something doesn't fit

794
00:41:44,971 --> 00:41:49,334
the art style? Bungie, as I said, is very much about

795
00:41:49,374 --> 00:41:52,876
iteration. We put things in game and we try to do it in the

796
00:41:52,916 --> 00:41:56,319
smartest way possible, but if an asset doesn't fit within the art

797
00:41:56,339 --> 00:41:58,320
style or within the game play, we cut it.

798
00:42:01,831 --> 00:42:08,254
So you have a lot of, you know, mix-and-match hard armor pieces like an upper chest plate and a lower chest plate.

799
00:42:09,154 --> 00:42:16,056
How do you make sure that, you know, all the different possible combinations don't end up self-intersecting and doing bad things and so on?

800
00:42:17,562 --> 00:42:21,503
Mostly just quick and easy tools for checking animations.

801
00:42:21,923 --> 00:42:24,443
We have in Maya animation previews.

802
00:42:24,503 --> 00:42:26,284
So I can be working on an arrangement

803
00:42:26,464 --> 00:42:29,144
and hit a single button to see that arrangement start

804
00:42:29,224 --> 00:42:32,065
moving through some base poses to test for clipping.

805
00:42:32,805 --> 00:42:35,505
Other than that, we have another program

806
00:42:35,525 --> 00:42:37,866
which I haven't shown called Lightbox, which

807
00:42:37,906 --> 00:42:40,146
goes through all of our content, creates screenshots

808
00:42:40,466 --> 00:42:43,627
through various poses that we can then check for any issues.

809
00:42:45,055 --> 00:42:49,478
I was more concerned about the combinations of them, you know, could people mix and match things that...

810
00:42:49,758 --> 00:42:53,820
Right, so, sorry again, the question is how do we handle

811
00:42:54,220 --> 00:42:56,422
clipping of the various combinations of arrangements.

812
00:42:58,003 --> 00:43:02,366
This was something we decided early on we were going to have to deal with a little more clipping than

813
00:43:02,386 --> 00:43:03,867
we were used to in previous games.

814
00:43:04,207 --> 00:43:07,709
I think any customizable game is going to have to accept a little bit of that.

815
00:43:08,970 --> 00:43:12,094
We don't have a good way of prohibiting certain things from

816
00:43:12,174 --> 00:43:13,075
clipping into other things.

817
00:43:13,316 --> 00:43:17,021
We just use our eyes and try and best guess, is that OK?

818
00:43:17,061 --> 00:43:17,682
Is that shippable?

819
00:43:17,742 --> 00:43:18,202
Is that not?

820
00:43:21,969 --> 00:43:25,631
So in the start of the game you actually choose a character race.

821
00:43:26,371 --> 00:43:29,653
Did that end up actually affecting the way that you're building gear?

822
00:43:29,693 --> 00:43:33,815
Like did you have to actually build gear differently over different races or?

823
00:43:35,296 --> 00:43:40,198
No, the race is sort of a separate part of our character building process.

824
00:43:40,578 --> 00:43:42,699
Although it actually uses the exact same system.

825
00:43:44,880 --> 00:43:50,803
The exos in particular are a perfect example of how we can use the system for that.

826
00:43:51,921 --> 00:43:52,441
Awesome, thank you.

827
00:43:54,561 --> 00:43:57,882
So this is a really powerful tool for your side

828
00:43:57,902 --> 00:43:58,442
of the fence.

829
00:43:59,903 --> 00:44:03,563
How does this level of customization and content

830
00:44:03,743 --> 00:44:07,804
generation trickle down to the player's ability

831
00:44:08,324 --> 00:44:11,165
to customize and leverage the amount of flexibility

832
00:44:11,205 --> 00:44:11,705
that you have?

833
00:44:12,905 --> 00:44:17,026
The question was, this is a really powerful system for us

834
00:44:17,086 --> 00:44:17,946
as content creators.

835
00:44:18,066 --> 00:44:19,427
How does that affect the players,

836
00:44:19,467 --> 00:44:20,507
and how do they make use of it?

837
00:44:23,179 --> 00:44:27,521
right now for the most part it affects them in the fact that we can build a lot more content

838
00:44:27,541 --> 00:44:32,424
than we could otherwise. We can build a lot more armor sets, a lot more pieces of gear

839
00:44:32,464 --> 00:44:37,067
for them to choose from. Pushing forward, exploring the ideas of players being able

840
00:44:37,107 --> 00:44:40,528
to create their own arrangements and stuff is something we've definitely thought about

841
00:44:40,649 --> 00:44:43,570
and I would personally love to explore but it's a long ways out.

842
00:44:46,532 --> 00:44:48,994
How does the bit system affect the concept pipeline?

843
00:44:50,455 --> 00:44:57,280
Does the concept artist then create more of a kind of keynote versions of everything and then the

844
00:44:57,320 --> 00:45:02,064
variations on the individual bits or more on the 3D artist and then create on the fly?

845
00:45:02,764 --> 00:45:05,646
So the question was, how does the bit system affect the

846
00:45:05,766 --> 00:45:09,109
concept development and how the concept artists work?

847
00:45:09,970 --> 00:45:10,550
It's a great question.

848
00:45:10,870 --> 00:45:12,191
And you're exactly right.

849
00:45:13,132 --> 00:45:15,253
The concept artists create what we call a theme.

850
00:45:15,754 --> 00:45:20,197
So they have a set that is like, here is the spirit of

851
00:45:20,297 --> 00:45:21,258
this set.

852
00:45:21,658 --> 00:45:24,400
And then the variations are all built by the individual

853
00:45:24,420 --> 00:45:25,801
3D artists for the most part.

854
00:45:27,043 --> 00:45:29,966
We try, we very much at Bungie don't like to limit our concept

855
00:45:30,026 --> 00:45:34,190
artists, but we also want to educate them on the system. So

856
00:45:35,071 --> 00:45:38,856
they start to know what we can do and what things are easier

857
00:45:38,896 --> 00:45:42,920
and faster for us, but still they have kind of free range to

858
00:45:42,960 --> 00:45:43,741
explore their ideas.

859
00:45:47,664 --> 00:45:51,528
Yeah, I was wondering about upgrades and if there was a way

860
00:45:51,568 --> 00:45:55,312
that you guys had like rules or some way of defining like what

861
00:45:55,332 --> 00:45:58,235
an upgrade would look like, since like color doesn't

862
00:45:58,275 --> 00:46:00,077
necessarily denote hierarchy.

863
00:46:00,097 --> 00:46:01,999
Were there other things that you used?

864
00:46:03,120 --> 00:46:04,542
So the question is about upgrades.

865
00:46:06,204 --> 00:46:10,468
And honestly, I'm not a designer. So the investment

866
00:46:10,488 --> 00:46:14,591
designers choose sort of the upgrade paths and what pieces

867
00:46:14,671 --> 00:46:19,396
they want to use for those. That stuff, since they're constantly,

868
00:46:19,456 --> 00:46:22,158
constantly iterating, a lot of times, um,

869
00:46:24,014 --> 00:46:28,236
we, you know, we try and put in the best pieces we think possible for things,

870
00:46:28,956 --> 00:46:32,377
but they're much more focused on the stats and the abilities and that sort of stuff, so

871
00:46:32,397 --> 00:46:34,217
I don't know if that answers your question, but...

872
00:46:34,518 --> 00:46:35,878
So you didn't have any, like,

873
00:46:36,858 --> 00:46:40,219
ways of defining, like, what those upgrades would look like necessarily?

874
00:46:42,261 --> 00:46:45,104
The way the system sort of played out, we're very flexible

875
00:46:45,144 --> 00:46:45,785
and reactive.

876
00:46:46,205 --> 00:46:48,127
So if they say, hey, we have this thing, and we're going to

877
00:46:48,147 --> 00:46:50,650
do an upgrade to it, then we can quickly go in and say,

878
00:46:50,670 --> 00:46:52,552
all right, let's add a few more pieces, make this thing

879
00:46:52,572 --> 00:46:55,415
a little more burly and a little cooler looking.

880
00:46:56,436 --> 00:46:58,799
So it's more like they establish first, and then we

881
00:46:58,839 --> 00:47:00,561
kind of follow what they're looking for.

882
00:47:00,581 --> 00:47:01,562
OK, cool.

883
00:47:01,702 --> 00:47:01,922
Thanks.

884
00:47:03,202 --> 00:47:13,969
So with the bits, you said that it would go back and change other bits that were already put into other sets.

885
00:47:14,369 --> 00:47:21,454
So was there any instances where a bit being changed in a newer set changed an old set for the worse?

886
00:47:22,446 --> 00:47:25,107
So the question was, since we can change a bit and it affects

887
00:47:25,227 --> 00:47:28,529
other arrangements, were there any instances where this was

888
00:47:28,609 --> 00:47:30,389
bad, where a bit was changed and it broke something?

889
00:47:30,669 --> 00:47:31,790
The answer is definitely yes.

890
00:47:33,591 --> 00:47:36,452
We had some interesting cases where someone would, the most

891
00:47:36,492 --> 00:47:39,413
dangerous aspect is the texture resolution.

892
00:47:39,473 --> 00:47:41,994
Someone would decide, hey, this bit's too low res.

893
00:47:42,494 --> 00:47:43,895
And so they'd double it.

894
00:47:44,595 --> 00:47:47,338
And then suddenly we have 20 pieces of gear

895
00:47:47,358 --> 00:47:50,360
that aren't importing because their texture budget's blown.

896
00:47:51,841 --> 00:47:55,384
So that was something that we, through a certain part

897
00:47:55,424 --> 00:47:58,046
of the production we dealt with, and then artists just

898
00:47:58,086 --> 00:48:01,109
kind of got smarter and better about knowing

899
00:48:01,529 --> 00:48:04,311
what they can and can't do, and also better tools

900
00:48:04,371 --> 00:48:06,093
at checking the content afterwards.

901
00:48:06,933 --> 00:48:07,193
Thank you.

902
00:48:08,531 --> 00:48:15,817
So I think you said that the bits get combined at export time and then so I'm assuming the arrangements get

903
00:48:16,458 --> 00:48:24,084
Stored and loaded by the engines that every arrangement is a separate piece that's rendered by the engine. Is that correct or that's correct

904
00:48:24,244 --> 00:48:28,387
Sorry, go ahead. Oh, yeah, I just wanted to check like isn't that

905
00:48:29,228 --> 00:48:35,113
More expensive than rendering a traditional character perhaps or so there are more draw calls

906
00:48:35,173 --> 00:48:37,495
associated with rendering each arrangement

907
00:48:38,632 --> 00:48:41,715
uh... so the question is is uh... you know does the engine render each

908
00:48:41,775 --> 00:48:45,238
arrangement individually and is that more expensive uh... than sort of a

909
00:48:45,278 --> 00:48:45,818
traditional

910
00:48:46,719 --> 00:48:49,301
uh... full character arrangement or full character setup

911
00:48:50,001 --> 00:48:50,101
uh...

912
00:48:50,522 --> 00:48:54,025
the answer is yes it is more expensive uh... we've done a lot of things to

913
00:48:54,185 --> 00:48:55,165
optimize the

914
00:48:55,185 --> 00:48:58,908
uh... the gear shader process and uh...

915
00:48:59,509 --> 00:49:02,091
you know the skinning and all of that to try and get that as cheap as possible

916
00:49:02,451 --> 00:49:06,054
but definitely the characters the player characters are more expensive than a lot

917
00:49:06,114 --> 00:49:06,514
than say

918
00:49:06,895 --> 00:49:08,855
civilians or combatants or anything like that.

919
00:49:09,516 --> 00:49:11,196
Can I ask another quick question?

920
00:49:11,376 --> 00:49:15,117
Just, I think you said you had a lot of problems with wraps

921
00:49:15,377 --> 00:49:16,438
and blend shapes.

922
00:49:16,518 --> 00:49:19,079
Can you go, but you didn't sort of elaborate what the sort of

923
00:49:19,119 --> 00:49:21,319
problems were with, you know, because I would have thought

924
00:49:21,339 --> 00:49:24,100
that would give you close fitting cloth if you could

925
00:49:24,140 --> 00:49:28,221
deform layers of cloth over a deformable shape.

926
00:49:29,042 --> 00:49:36,065
So the question was about, I think using the wraps and blend shapes, wrap deformers and blend shapes to create female gear.

927
00:49:36,325 --> 00:49:38,847
And whether or not, why that wasn't successful.

928
00:49:40,227 --> 00:49:43,929
And you're right, for things like cloth and soft organics it worked very well.

929
00:49:44,289 --> 00:49:46,891
But as you can see we have a lot of hard surface shapes.

930
00:49:47,531 --> 00:49:52,574
And things like cylinders that would get stretched and shapes would get deformed.

931
00:49:52,774 --> 00:49:54,334
And the main thing for us was...

932
00:49:54,975 --> 00:49:56,596
that in order to really use that system,

933
00:49:56,616 --> 00:49:58,336
we had to combine everything together,

934
00:49:58,456 --> 00:49:59,737
and that just wasn't efficient.

935
00:50:00,538 --> 00:50:01,058
Okay, thank you.

936
00:50:02,438 --> 00:50:04,059
I had a question about the color customization.

937
00:50:04,259 --> 00:50:05,260
If I understand correctly,

938
00:50:05,280 --> 00:50:07,261
that originally a player could choose three colors

939
00:50:07,481 --> 00:50:09,442
for their character, and then you guys changed the system

940
00:50:09,942 --> 00:50:11,223
to colorize the gear,

941
00:50:11,343 --> 00:50:14,144
so it would represent the different scale of upgrades.

942
00:50:14,945 --> 00:50:16,806
So does that mean that in the current design,

943
00:50:16,826 --> 00:50:19,587
there is no color customization for their character?

944
00:50:20,413 --> 00:50:25,096
So the question is, we initially had it so that players could choose three colors and

945
00:50:25,356 --> 00:50:30,720
then we moved to a system where we established the colors to communicate the tier.

946
00:50:31,321 --> 00:50:33,462
Does that mean players can't customize their color?

947
00:50:35,744 --> 00:50:37,445
So, no.

948
00:50:38,085 --> 00:50:42,369
We definitely established what we call default dyes for things, and

949
00:50:43,349 --> 00:50:48,713
the idea is that players will be able to customize their color choices later on.

950
00:50:49,553 --> 00:50:53,058
can take their upgraded gear and then tweak it from its current

951
00:50:53,318 --> 00:50:56,823
value basically? So I can't go into too much detail about this

952
00:50:56,883 --> 00:51:00,187
because it's actually something that's still being worked on.

953
00:51:01,189 --> 00:51:04,373
But as I said, the idea is that players will have some control

954
00:51:04,453 --> 00:51:04,714
for sure.

955
00:51:06,689 --> 00:51:09,712
Hi, I was just wondering about the merging process you talked about.

956
00:51:10,052 --> 00:51:17,178
So when the bits are merged together, is there, at that time, is there a lot of inner penetrating surfaces?

957
00:51:17,418 --> 00:51:20,180
Do you do any kind of ray casting to make a new mesh?

958
00:51:20,461 --> 00:51:28,948
Or if one arrangement overlaps another arrangement, do you make a bake that has a nice AO under the overlapping?

959
00:51:28,988 --> 00:51:32,150
Or do you just try not to make them overlap? I guess that's two questions.

960
00:51:35,780 --> 00:51:37,508
Sorry, the first part of the question again.

961
00:51:39,232 --> 00:51:40,993
like the helmet you showed with all the bits together,

962
00:51:41,913 --> 00:51:44,695
if it generates inner penetrating surfaces,

963
00:51:45,115 --> 00:51:46,936
is there a bake process that makes a new mesh,

964
00:51:47,116 --> 00:51:49,418
or it's just OK to have the inner penetration?

965
00:51:49,598 --> 00:51:52,680
So the question was, do the bits have

966
00:51:52,720 --> 00:51:54,381
inner penetrating surfaces?

967
00:51:54,441 --> 00:51:55,021
Is that OK?

968
00:51:55,041 --> 00:51:55,942
Do we bake things down?

969
00:51:56,602 --> 00:51:59,484
They do inner penetrate, and we rely primarily

970
00:51:59,544 --> 00:52:02,586
on Screen Space AO to kind of seal everything together

971
00:52:02,626 --> 00:52:06,008
and make it feel like it's a nice, cohesive piece.

972
00:52:08,490 --> 00:52:11,071
And then the second part, sorry.

973
00:52:11,892 --> 00:52:12,632
Well, that kind of answers it.

974
00:52:12,652 --> 00:52:13,753
All right, well, there we go.

975
00:52:13,933 --> 00:52:14,393
Like a gun.

976
00:52:15,694 --> 00:52:16,354
All right, thanks.

977
00:52:18,275 --> 00:52:18,896
Justin Quimby.

978
00:52:19,918 --> 00:52:24,260
Hi Scott, great talk. We work together at Turbine. So I'm curious about the production side of

979
00:52:24,300 --> 00:52:30,382
things in terms of dashboarding tools or how does the production side of the house track, you

980
00:52:30,422 --> 00:52:36,625
mentioned, oh, suddenly someone changes texture density and blows the budgets for stuff. What

981
00:52:36,665 --> 00:52:42,107
kind of tools do you have on the production side of the house to keep track of all the craziness

982
00:52:42,127 --> 00:52:44,708
that you can do given this flexible tool set?

983
00:52:46,017 --> 00:52:50,362
So the question is what kind of tools do we have from the production side of things to keep

984
00:52:50,402 --> 00:52:53,025
track of all these changes and all the things that can be done.

985
00:52:54,567 --> 00:53:00,634
Honestly, nothing terribly fancy. We have fantastic producers, really, that are just

986
00:53:00,674 --> 00:53:01,655
very on top of their game.

987
00:53:03,678 --> 00:53:08,962
We don't, as a 3D team, we don't micro track stuff too much, as

988
00:53:09,002 --> 00:53:13,044
our tasks tend to be, this armor set will take four weeks or

989
00:53:13,064 --> 00:53:13,984
three weeks or whatever.

990
00:53:15,125 --> 00:53:18,387
And then we just try and remain as reactive as possible.

991
00:53:18,607 --> 00:53:21,229
The good thing is that because the system is so fast and

992
00:53:21,269 --> 00:53:24,230
flexible, when we do run into those issues, it doesn't take

993
00:53:24,270 --> 00:53:24,971
much time to fix it.

994
00:53:28,107 --> 00:53:32,568
Hi, first I want to say great talk. I was wondering if the

995
00:53:32,648 --> 00:53:37,209
current system for creating like different pieces through bits

996
00:53:37,249 --> 00:53:39,730
and stuff allows for the addition of like normal map

997
00:53:39,750 --> 00:53:43,210
details such as adding like screws or you know different

998
00:53:43,230 --> 00:53:45,791
like vents or valves on like a helmet or something or if that's

999
00:53:45,971 --> 00:53:48,131
part of the decal system you guys are looking towards in the

1000
00:53:48,172 --> 00:53:52,032
future. So the question was is if the current system allows for

1001
00:53:52,212 --> 00:53:55,673
adding sort of normal map details like screws and things

1002
00:53:55,713 --> 00:53:56,013
like that.

1003
00:53:58,789 --> 00:54:01,972
actually the, it does in a different sort of way.

1004
00:54:02,312 --> 00:54:06,315
So we have, we have a layer of what we call

1005
00:54:06,375 --> 00:54:11,259
detailed geometry, which is set within, set as a bit.

1006
00:54:11,719 --> 00:54:13,540
So certain bits can be flagged as detailed geometry.

1007
00:54:13,560 --> 00:54:16,342
So they're high detail, high frequency type of bits

1008
00:54:16,402 --> 00:54:17,924
that then fade out quickly at distance

1009
00:54:18,024 --> 00:54:20,626
or don't get exported to sort of the older platforms

1010
00:54:20,646 --> 00:54:20,966
kind of thing.

1011
00:54:20,986 --> 00:54:22,207
So we do a lot of that with those.

1012
00:54:23,348 --> 00:54:23,548
Thank you.

1013
00:54:26,785 --> 00:54:38,780
One quick question I had, because this system, it actually reminded me a lot of Borderlands 2's gun system, where they built completely modular guns, and so each player who started up their game was able to have their own unique sniper rifle.

1014
00:54:39,400 --> 00:54:45,147
Would this system allow for players to have completely unique, randomized helmets, or is everything built beforehand?

1015
00:54:46,022 --> 00:54:48,923
So the question was, does the system allow for players

1016
00:54:48,943 --> 00:54:50,923
to have completely unique randomized helmets

1017
00:54:52,084 --> 00:54:52,864
or pieces of gear?

1018
00:54:53,904 --> 00:54:55,325
The answer is no, actually.

1019
00:54:55,625 --> 00:54:57,565
And that was a very conscious decision on our part.

1020
00:54:58,045 --> 00:55:00,446
We wanted artists to still maintain control

1021
00:55:00,486 --> 00:55:01,446
of the overall design.

1022
00:55:02,406 --> 00:55:04,207
We wanted to try and make it as fast as possible

1023
00:55:04,227 --> 00:55:05,507
for them to create something cool,

1024
00:55:05,987 --> 00:55:08,588
but we didn't want it, we always wanted it to feel

1025
00:55:08,628 --> 00:55:10,028
like it was a conscious decision

1026
00:55:10,128 --> 00:55:11,569
that we put this piece with this piece.

1027
00:55:12,469 --> 00:55:12,689
Thank you.

1028
00:55:16,907 --> 00:55:18,708
Alright, any more questions?

1029
00:55:21,051 --> 00:55:21,871
You guys are free to go.

1030
00:55:21,891 --> 00:55:22,973
Thank you very much.

