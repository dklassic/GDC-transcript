1
00:00:06,585 --> 00:00:11,929
Hello, my name is Fabien Graveau, and today I will present Final Fantasy VII Remake,

2
00:00:12,509 --> 00:00:18,093
Automating Quality Adherence and the Tools for the Future. But before, a small warning.

3
00:00:18,893 --> 00:00:24,317
Most of the developments that I will present here have been done at the end of Final Fantasy VII

4
00:00:24,357 --> 00:00:30,281
Remake project, and only part of it have been used before the Master. But the development

5
00:00:30,301 --> 00:00:35,424
teams allow us to use their game to continue to develop our tools and maybe use it for another

6
00:00:35,464 --> 00:00:35,745
project.

7
00:00:37,669 --> 00:00:44,253
First, I'd like to talk a little bit about the problematic of QA4Game and focus on the main

8
00:00:44,373 --> 00:00:49,777
part of this talk, that is the replay system, with an overview of the system, what kind of data we

9
00:00:49,897 --> 00:00:55,281
use, how we synchronize them, what kind of workflow we are using, and some results that we got.

10
00:00:56,761 --> 00:01:03,946
I will also talk about a small extension, that is explorations, to allow the bot to explore

11
00:01:04,266 --> 00:01:07,428
the game, and conclude on some future works.

12
00:01:09,627 --> 00:01:16,453
But first, game development is evolving. More content, more interactions, greater freedoms,

13
00:01:16,973 --> 00:01:25,300
lots of playstyles, and also the game is not finished when you release it. You have now post-release

14
00:01:25,360 --> 00:01:37,030
content, DLC, a patch, and so on. So this will lead to growing QA cost. And you have to test it again and again.

15
00:01:38,939 --> 00:01:42,281
What we can do to improve that? We can improve reporting tools.

16
00:01:42,541 --> 00:01:44,882
So you have some great GDC talk about that.

17
00:01:45,702 --> 00:01:48,704
We can fill a part of the bug report automatically.

18
00:01:49,624 --> 00:01:55,387
We can completely automatically report crash and assert, for example.

19
00:01:56,208 --> 00:02:01,310
We can add telemetry to the game so we can gather data and evaluate the quality of it.

20
00:02:03,242 --> 00:02:14,091
We can also try to make, in some way, replay or play the game automatically.

21
00:02:14,591 --> 00:02:23,899
So with scripting, or with replaying already played data, or with explorations.

22
00:02:26,481 --> 00:02:29,083
But first, let's focus on replay.

23
00:02:30,164 --> 00:02:34,227
Even in replay we can divide it into two big categories.

24
00:02:35,308 --> 00:02:37,809
Things that are done without game change.

25
00:02:38,530 --> 00:02:42,593
So what you can do to control your input is basically the screen.

26
00:02:43,814 --> 00:02:49,678
And you can control time. You can control the game through the

27
00:02:49,698 --> 00:02:55,121
gamepad driver. And the good thing, you can test

28
00:02:55,181 --> 00:02:59,124
the final release of your game. The one that your user will be using.

29
00:03:00,724 --> 00:03:05,405
So the bad thing is that it will be really hard to support non-deterministic actions,

30
00:03:05,905 --> 00:03:10,407
and level change will probably need to rewrite part of the script.

31
00:03:11,767 --> 00:03:15,308
So this technique is generally used at the end of the development.

32
00:03:18,209 --> 00:03:25,032
You can also try to add Auto QA and replay feature on the game engine side.

33
00:03:26,003 --> 00:03:30,706
that allow you to access the whole code, but probably you want to restrict you to something

34
00:03:30,746 --> 00:03:35,948
that is more near what the user can do. And especially in our case, we want to register

35
00:03:35,988 --> 00:03:42,872
in fact the game state. We can also control everything, but you want probably to restrict

36
00:03:42,892 --> 00:03:50,415
you on a gamepad emulator, even if time to time you may want to add debug command maybe.

37
00:03:50,775 --> 00:03:54,337
You are restricted to the test build, but

38
00:03:55,319 --> 00:03:59,962
The good thing is that you can now try to spot non-deterministic actions,

39
00:04:00,862 --> 00:04:03,584
and you can be robust to some level change.

40
00:04:04,865 --> 00:04:12,370
See that allow you to start to use these kind of techniques as soon as you have a first vertical

41
00:04:12,410 --> 00:04:19,615
slice. This is where we will focus our talk. But first, a small example.

42
00:04:21,263 --> 00:04:27,728
So I will first record a small gameplay by using my gamepad.

43
00:04:29,269 --> 00:04:32,131
And we record not only the gamepad input

44
00:04:32,171 --> 00:04:33,813
that we are using during the menu,

45
00:04:33,833 --> 00:04:37,756
but also the game state that we will use after to help the play.

46
00:04:38,216 --> 00:04:43,320
Here we will have a tutorial and a game battle.

47
00:04:44,261 --> 00:04:46,822
Battle are typically something that is not data-mystic.

48
00:04:46,883 --> 00:04:48,264
And just to personalize my replay,

49
00:04:48,284 --> 00:04:49,605
I go forward and go back.

50
00:04:51,050 --> 00:04:54,994
Ok, let's stop it for now, and replay it.

51
00:05:00,320 --> 00:05:04,043
So, as I said, we record not only game input, but also game stat.

52
00:05:04,063 --> 00:05:08,208
So once the game screen opens, we can push a button.

53
00:05:08,248 --> 00:05:10,890
There is no additional wait time, basically.

54
00:05:13,247 --> 00:05:15,108
And here we have the tutorial, skip it.

55
00:05:15,328 --> 00:05:18,388
And now we use a battle bot to control the game.

56
00:05:18,408 --> 00:05:19,868
So we will have different battles.

57
00:05:20,028 --> 00:05:23,809
And the battle bot can even test all the commands randomly

58
00:05:24,389 --> 00:05:27,410
to be sure that we didn't break anything in the battle system.

59
00:05:29,130 --> 00:05:31,650
And we go back to where we played.

60
00:05:32,170 --> 00:05:34,431
And now we can go forward and back,

61
00:05:34,711 --> 00:05:36,771
as I have done in my recording data.

62
00:05:41,512 --> 00:05:42,492
And I finish by.

63
00:05:43,342 --> 00:05:47,923
a replay success that the game has detected.

64
00:05:50,243 --> 00:05:54,324
So what is a stem? We will have this kind of UI, the launcher,

65
00:05:54,584 --> 00:06:02,706
but we can also have command line for Jenkins that will start two processes.

66
00:06:03,306 --> 00:06:09,687
One is an auto-QA server that will be used to supervise and control the game.

67
00:06:11,338 --> 00:06:19,584
The second one is a watchdog that will be platform dependent and can start to monitor the game.

68
00:06:23,286 --> 00:06:31,251
The AutoQA server will ask the watchdog to start the game. The watchdog will really start the process.

69
00:06:32,512 --> 00:06:37,996
The watchdog can also be responsible for recording videos and so on, screenshot and detecting corruption.

70
00:06:39,779 --> 00:06:45,362
On the game start, it will try to ping the watchdog to be sure that we hang or not.

71
00:06:48,464 --> 00:06:59,550
And the game will also send a generic game state that the AutoQA server will use to control the game by giving some requests.

72
00:07:01,651 --> 00:07:07,814
We will have also some UI commands like stop and so on that we can send to the QA server.

73
00:07:10,576 --> 00:07:19,998
Inside the game, in fact, we can split it into two parts, one that will be in fact game engine specific,

74
00:07:20,859 --> 00:07:27,900
that will be in charge of communication, some default behavior, and another part that will be

75
00:07:27,960 --> 00:07:34,642
specific to this game. We will have this kind of bot and we will say what are the game states.

76
00:07:35,082 --> 00:07:39,603
So just take a look at this game specific part.

77
00:07:41,440 --> 00:07:45,103
So in Final Fantasy VII Remake, we had a few bots.

78
00:07:45,223 --> 00:07:48,064
So just give me some example of them.

79
00:07:48,745 --> 00:07:52,167
In the left side, you have some bots where, in fact,

80
00:07:52,287 --> 00:07:55,309
you are merging bot usage with replay

81
00:07:55,509 --> 00:07:57,991
because the control of your character

82
00:07:58,031 --> 00:08:01,133
is completely different from what we are seeking first.

83
00:08:01,913 --> 00:08:07,456
Either you control a robot arm or you are on the ceiling.

84
00:08:08,037 --> 00:08:09,738
But basically, you are using replay

85
00:08:09,758 --> 00:08:10,538
to control where.

86
00:08:12,463 --> 00:08:19,245
The middle part is a battle bot, one of the most complex ones, that means in fact both replay and a battle.

87
00:08:19,745 --> 00:08:29,148
Just to be able to be sure that some battle techniques, or if you want to climb during a battle, or do things during battles, can be still replayed if needed.

88
00:08:30,989 --> 00:08:38,151
The last part are very small mini-games that generally we implement a bot in one day.

89
00:08:39,214 --> 00:08:41,455
just to be able to pass successfully

90
00:08:41,875 --> 00:08:45,036
because synchronizations will be a little bit too

91
00:08:45,236 --> 00:08:47,356
precise on this part

92
00:08:47,716 --> 00:08:51,077
which just replay data, forges replay data.

93
00:08:54,358 --> 00:08:56,899
Ok, so we have talked about the game specific code, now

94
00:08:56,919 --> 00:08:59,420
let's talk about the generic game state

95
00:08:59,840 --> 00:09:01,260
what kind of data we are using.

96
00:09:02,600 --> 00:09:04,581
So, generic game state will be

97
00:09:05,900 --> 00:09:14,082
will contain where we are, so the positions, the level ID, the orientations, and also the velocity of the characters.

98
00:09:16,142 --> 00:09:25,084
When we are, we will have in fact several times because depending on what kind of game state you are, you care about different times.

99
00:09:25,664 --> 00:09:29,505
You may have, like we have seen in the battle, some slowdowns that...

100
00:09:31,202 --> 00:09:36,745
are used to activate the debug menu and so on, the control menu.

101
00:09:37,725 --> 00:09:41,207
And time will flow in different speed during the game.

102
00:09:41,487 --> 00:09:42,768
So we adapt.

103
00:09:43,228 --> 00:09:46,490
UTC time will be mostly used for video synchronization.

104
00:09:46,610 --> 00:09:51,313
Frame count is generally the default behavior that works basically everywhere.

105
00:09:55,375 --> 00:09:57,616
After you have some...

106
00:09:59,302 --> 00:10:01,684
action and event that you want to know what you are doing

107
00:10:03,706 --> 00:10:05,768
and also you want to know why you are doing it

108
00:10:06,208 --> 00:10:11,753
and this is done by knowing the game state and we say not game state but game

109
00:10:12,013 --> 00:10:17,958
state stack. Why? Because we can have replay data and for example we can start a follow mode

110
00:10:18,238 --> 00:10:23,042
so if you go too far from the NPC that you are following

111
00:10:23,503 --> 00:10:27,266
you may have a warning and make you go back. This is one of the game modes.

112
00:10:28,761 --> 00:10:32,044
And you may have a battle that started while you are still in follow mode.

113
00:10:32,864 --> 00:10:36,007
And during the battle you can have a tutorial that interrupts the battle.

114
00:10:36,927 --> 00:10:41,271
So you will have always one step but you have the other ones that are

115
00:10:41,731 --> 00:10:45,974
continuing inside the background. So this way we have a game stack.

116
00:10:48,856 --> 00:10:55,441
And what we will do to identify each text is an ID that will be based on the type and the

117
00:10:57,167 --> 00:11:01,268
the game specific code that will specify those values.

118
00:11:02,609 --> 00:11:09,390
So game ID is generally a fixed ID for battle or cinematics.

119
00:11:09,650 --> 00:11:13,071
Maybe each of one has a different name or something like that.

120
00:11:14,532 --> 00:11:18,893
We can store user data that will go back when we are doing replay.

121
00:11:21,773 --> 00:11:24,274
And we can store synchronization flags.

122
00:11:24,828 --> 00:11:28,189
and timeout override that we'll just talk from now on,

123
00:11:28,689 --> 00:11:30,950
that is used to synchronize, in fact, the replay.

124
00:11:32,430 --> 00:11:34,911
So we will not explain all the synchronization flags

125
00:11:34,971 --> 00:11:35,951
during this presentation,

126
00:11:36,011 --> 00:11:38,252
but let's take a look at a few of them.

127
00:11:39,672 --> 00:11:41,753
So let's suppose that you have a game set

128
00:11:41,873 --> 00:11:43,313
and you want to go to it.

129
00:11:44,153 --> 00:11:45,654
You are replaying your data,

130
00:11:46,574 --> 00:11:48,955
and now you are supposed to get to the game set,

131
00:11:49,195 --> 00:11:51,415
but maybe it's not popping up.

132
00:11:52,726 --> 00:12:00,010
So if you have a non relocatable flag, it means that you need in fact to be at these positions

133
00:12:00,410 --> 00:12:08,194
to be able to start this game state. So what you will do is first start a timeout to say

134
00:12:08,334 --> 00:12:22,321
okay I will have given time to succeed and you will start to continue to do some play or motions

135
00:12:23,007 --> 00:12:30,234
to be able to be sure at these positions or maybe it can be either motion or also maybe weight.

136
00:12:33,616 --> 00:12:43,025
And if you reach it, you can synchronize again. And after, because you succeed during

137
00:12:43,205 --> 00:12:47,849
your start timeout, you have a success and you start an end timeout.

138
00:12:55,248 --> 00:12:56,789
before the end of the time.

139
00:12:59,110 --> 00:13:00,291
Let's see another flag.

140
00:13:01,632 --> 00:13:02,533
In that case,

141
00:13:03,253 --> 00:13:04,234
it's very similar.

142
00:13:04,594 --> 00:13:06,795
We go to this state, but it didn't start.

143
00:13:07,236 --> 00:13:07,576
Ok?

144
00:13:08,076 --> 00:13:10,738
But now it's a relocatable flag.

145
00:13:10,778 --> 00:13:12,319
So, we want in fact

146
00:13:12,339 --> 00:13:14,340
to continue on replay, because

147
00:13:14,920 --> 00:13:16,461
maybe it's not exactly

148
00:13:16,521 --> 00:13:18,683
at this position that the game state can start.

149
00:13:19,643 --> 00:13:20,704
So, let's continue.

150
00:13:20,784 --> 00:13:22,325
And we push a little bit the data.

151
00:13:23,834 --> 00:13:31,357
But if we push that much, at one point we cannot push more, so we have also to decay, to push everything together.

152
00:13:32,938 --> 00:13:33,738
Not only the start.

153
00:13:36,299 --> 00:13:51,346
And if we start the synchronization, we can now again compute and timeout, which is based on the original recorded time, not on the current one.

154
00:13:52,319 --> 00:13:53,961
and we will try to replay the data.

155
00:13:56,182 --> 00:14:04,029
So, let's go on again and maybe we can go on the next part of the replay.

156
00:14:06,611 --> 00:14:08,532
Other example, skippable.

157
00:14:09,213 --> 00:14:13,457
Skippable means that when you are replaying your data,

158
00:14:13,477 --> 00:14:16,419
you have a new game state that you were not expecting.

159
00:14:17,400 --> 00:14:20,582
It can be a new cinematic that has been added to the game, a new battle,

160
00:14:20,602 --> 00:14:20,983
I don't know.

161
00:14:22,393 --> 00:14:28,255
And what the replay system will say, if this one is skipable,

162
00:14:29,276 --> 00:14:31,917
let's try to skip it and ask a skip request.

163
00:14:32,197 --> 00:14:34,878
If not, we may fail this replay.

164
00:14:39,159 --> 00:14:41,800
Most of our replay data, in fact, are skippable.

165
00:14:43,781 --> 00:14:45,281
We can also have startable.

166
00:14:45,881 --> 00:14:48,502
It means that now we have a

167
00:14:50,026 --> 00:14:58,189
session that the game state that is inside the recorded data, that if it's not there inside the replay, we will not continue to go to move.

168
00:14:58,209 --> 00:15:00,990
We will ask a request to start it to the game.

169
00:15:01,910 --> 00:15:05,031
This is typically used for interactions.

170
00:15:06,412 --> 00:15:06,832
And so on.

171
00:15:09,433 --> 00:15:13,194
Because those ones are really essential for.

172
00:15:14,433 --> 00:15:22,198
the game flow. So we wanted to be sure that we start all of them at the right time.

173
00:15:26,181 --> 00:15:34,226
We can also have an optional flag that is very simple. We try to replay if we get

174
00:15:35,047 --> 00:15:41,271
a game state that is find the future after some optional we just skip them.

175
00:15:42,698 --> 00:15:49,421
Typically, optional flights can be tutorials that can happen only the first time, for example,

176
00:15:51,142 --> 00:16:04,528
other games. Now let's talk about the move to part. So we say that we move, but in fact we

177
00:16:04,568 --> 00:16:10,710
don't use directly navigation mesh. In fact, we mostly not use navigation mesh.

178
00:16:11,883 --> 00:16:17,687
We create, in fact, a 3D grid map during the replay.

179
00:16:18,248 --> 00:16:22,852
You will use both the recorded data, so previous replay data.

180
00:16:23,592 --> 00:16:26,715
So we can create a path and say that we

181
00:16:26,895 --> 00:16:28,036
are able to connect them.

182
00:16:28,856 --> 00:16:32,179
But also, we will have the current replay.

183
00:16:35,622 --> 00:16:39,065
We will try to detect wall when we are not moving.

184
00:16:40,088 --> 00:16:46,453
in the desired direction. So, for example, we wanted to go in this direction and we go on the

185
00:16:46,473 --> 00:16:57,522
other side. Probably have a wall. This is still probabilistic only. And if we are lost, we can

186
00:16:57,562 --> 00:17:08,030
try to do pathfinding. We will also assume at first that going back is possible, even if it's not a

187
00:17:08,371 --> 00:17:08,911
necessity.

188
00:17:10,344 --> 00:17:14,426
We will also use simple heuristics to extend the map if we are blocked.

189
00:17:15,966 --> 00:17:23,469
We can even, in some cases, or first simple heuristics didn't succeed, try to request

190
00:17:24,630 --> 00:17:32,413
to the game a pathfinding rule. That may help us to go out on some situations.

191
00:17:37,270 --> 00:17:46,812
But the important part is that, in fact, the player may go to some place where you don't have a navigation mesh.

192
00:17:46,832 --> 00:17:50,093
So we don't assume that navigation mesh is ready for us.

193
00:17:52,154 --> 00:17:56,154
Okay, so we have talked about game generistics.

194
00:17:57,135 --> 00:18:03,296
And, in fact, we can find out that a lot of things can be shared between the users.

195
00:18:05,125 --> 00:18:08,887
not the game-specific codes, but as long as you have the same game engines,

196
00:18:09,407 --> 00:18:13,189
even the auto-QA tools can be shared between projects.

197
00:18:15,871 --> 00:18:17,792
Now let's go to the workflow.

198
00:18:19,453 --> 00:18:23,435
You will have someone that will try to record a replay, like you have seen,

199
00:18:23,975 --> 00:18:26,837
that will give a database of replay data.

200
00:18:27,477 --> 00:18:33,000
We will have the game build system that will trigger all Jenkins.

201
00:18:33,849 --> 00:18:40,354
that will ask a set of build machines to build the corresponding executable,

202
00:18:41,355 --> 00:18:46,359
and ask a set of test machines or consoles to test the game.

203
00:18:47,360 --> 00:18:53,484
We will update everything to a test with a database to do some test monitoring,

204
00:18:54,385 --> 00:18:59,049
but we will also send it to a system to do some bug classifications.

205
00:19:00,910 --> 00:19:02,592
Some of them will be sent directly.

206
00:19:03,532 --> 00:19:12,355
to the QA team or to the game team because they are assert and crash and we are sure that they are

207
00:19:12,975 --> 00:19:21,318
relative to the game. And some of them will go to some auto QA specialist so you may have some

208
00:19:21,338 --> 00:19:28,440
replay failures that can be in fact change in the data that is too strong for us to be able to

209
00:19:28,780 --> 00:19:32,422
to cope with. So we need to record the data.

210
00:19:34,117 --> 00:19:37,700
it can be also some problem in own workflow.

211
00:19:38,440 --> 00:19:40,582
So we will try to analyze it and debug it.

212
00:19:41,643 --> 00:19:46,108
And we will report what we need to do on the other teams.

213
00:19:50,420 --> 00:19:55,023
What kind of advantages we got with this system? We were able to find real warbugs,

214
00:19:55,623 --> 00:20:02,707
warbugs, logics, multi-threads, something that happens even less than 0.3% of the times,

215
00:20:03,087 --> 00:20:12,512
so several thousands of replays to get it. We were able to test levels about

216
00:20:12,552 --> 00:20:14,494
3,000 chapters per day basically.

217
00:20:18,652 --> 00:20:25,297
We were able to test a large code change, so we get some requests to test some changes

218
00:20:25,457 --> 00:20:29,941
and test it maybe for one week to be sure to have a stable result.

219
00:20:32,042 --> 00:20:39,888
We can test the game with also bad frame rate, so if you want to have a memory analyzer on,

220
00:20:40,749 --> 00:20:45,593
the game may be really slow and really painful to play for human player, but

221
00:20:45,613 --> 00:20:47,494
the system is able to cope with that.

222
00:20:49,150 --> 00:20:52,250
We were able to perform tests 24 hours a day,

223
00:20:52,270 --> 00:20:58,792
and even aging tests that were generally about 18 hours

224
00:20:58,932 --> 00:21:01,472
for one test by playing the game

225
00:21:01,512 --> 00:21:02,972
in several tiny loops.

226
00:21:07,273 --> 00:21:13,775
The main disadvantage is probably because we test only

227
00:21:14,755 --> 00:21:15,735
what we have recorded.

228
00:21:15,895 --> 00:21:17,175
We don't go outside your path.

229
00:21:18,402 --> 00:21:22,105
So if you want to do a complete test, you need to create a lot of levels.

230
00:21:24,687 --> 00:21:28,891
So now let's go to look at another example, exploration example. So this one has been

231
00:21:28,911 --> 00:21:37,998
developed on UE4, basic UE4, and we have in fact two agents that are playing together the game to

232
00:21:38,078 --> 00:21:43,863
try to create a map. Like I said, we are able to create this 3D maps, this 3D grid map.

233
00:21:45,189 --> 00:21:52,573
And the goal now is to find where we were not, where we didn't go.

234
00:21:53,414 --> 00:21:59,237
So once we have explored part of the room we can see that we try to find another way out

235
00:22:00,198 --> 00:22:05,420
and together we can start to explore in fact the whole map.

236
00:22:10,063 --> 00:22:10,223
So

237
00:22:11,240 --> 00:22:17,925
The advantage of exploration is that we can find bugs outside of the normally tested pubs that we had.

238
00:22:19,246 --> 00:22:26,491
We can capture performance, so FPS, memory usage, everywhere on the map. We can check for collisions.

239
00:22:29,953 --> 00:22:37,119
The problem is that by trying randomly a lot of things, we will not go very far.

240
00:22:37,479 --> 00:22:39,260
Quests and games are too complex for that.

241
00:22:39,943 --> 00:22:43,264
will not be able to clear any game, any level.

242
00:22:45,805 --> 00:22:48,286
So what we have done is map mix both.

243
00:22:49,546 --> 00:22:51,607
So here we have in Final Fantasy,

244
00:22:52,267 --> 00:22:57,308
some replay and explorations meshed together.

245
00:22:57,328 --> 00:22:59,709
So currently we are exploring the map.

246
00:23:00,389 --> 00:23:03,250
So as you can see, we try to go everywhere

247
00:23:03,270 --> 00:23:06,751
and we kind of try to detect where are walls.

248
00:23:08,508 --> 00:23:15,630
the first time of the exploration is random, so we go there and there. But as more as we are

249
00:23:15,690 --> 00:23:24,312
exploring, we will start to fill up the map and we will need now to find where are other edges that

250
00:23:24,352 --> 00:23:29,654
we didn't explore. And in blue, you can see some path findings that we are doing to try to test

251
00:23:29,774 --> 00:23:34,515
other edge cases. By doing that, we will

252
00:23:36,157 --> 00:23:42,963
finish by filling up all the maps. So here we are finishing the last holes that are left.

253
00:23:44,044 --> 00:23:47,407
And when we have filled all the holes, we can start to explore new areas

254
00:23:48,688 --> 00:23:54,653
that we have not yet explored. But sometimes you can have game events that pop up.

255
00:23:55,373 --> 00:23:56,795
For example, here we have a battle.

256
00:23:57,707 --> 00:24:00,809
What we will do is when we have new game sequence that pop up,

257
00:24:00,969 --> 00:24:02,831
we'll synchronize with the replay data.

258
00:24:02,991 --> 00:24:06,854
So we'll try to use the replay data of these battles

259
00:24:07,234 --> 00:24:08,175
if they are won.

260
00:24:10,097 --> 00:24:13,840
And we continue the exploration until we time out of it.

261
00:24:14,080 --> 00:24:15,581
And we go back to the replay.

262
00:24:15,621 --> 00:24:17,783
So we are doing, again, pass findings

263
00:24:17,843 --> 00:24:20,565
to go back to the end of the replay data.

264
00:24:21,126 --> 00:24:23,087
That is after the battle that we have

265
00:24:23,107 --> 00:24:24,689
done during our exploration step,

266
00:24:24,969 --> 00:24:27,271
because we are able to do it.

267
00:24:27,798 --> 00:24:30,239
and they are reordainable.

268
00:24:31,640 --> 00:24:34,802
So now let's try to go back to the replay.

269
00:24:34,902 --> 00:24:38,123
We have some cinematics and so on.

270
00:24:38,204 --> 00:24:41,185
And we had another expression there.

271
00:24:41,345 --> 00:24:44,507
So how we do it?

272
00:24:44,927 --> 00:24:49,950
We generally record a replay.

273
00:24:50,110 --> 00:24:51,891
And if we want to add expressions,

274
00:24:52,471 --> 00:24:53,512
we look at the movie.

275
00:24:53,552 --> 00:24:54,452
We synchronize.

276
00:24:55,793 --> 00:24:56,894
We add some replay.

277
00:24:58,085 --> 00:25:07,971
exploration event inside the replay based on when we are compared to the movies. And after we can

278
00:25:07,991 --> 00:25:14,934
explore, decide where to explore in fact the different part of the map. Okay, so we go back

279
00:25:15,174 --> 00:25:24,459
again to the replay data now, so still with pathfinding above the navigation data. And now

280
00:25:24,820 --> 00:25:26,180
we can find out which

281
00:25:28,281 --> 00:25:38,185
to continue the game. One other thing that we can have is, we can have telemetry. So here is an

282
00:25:38,265 --> 00:25:46,048
example of replay data, 14 replay data at the same path. So each time that we are replaying the data

283
00:25:46,088 --> 00:25:54,551
without expressions, we are basically at one only path that we follow. If we use expressions,

284
00:25:54,811 --> 00:25:57,012
that will take more time, but now we can see that.

285
00:25:57,623 --> 00:26:00,505
we have a more wider range of use.

286
00:26:02,206 --> 00:26:05,667
Sure, exploration is not necessarily used everywhere in the game,

287
00:26:06,428 --> 00:26:12,090
but for example if you have a bomb that will explode you probably don't want to

288
00:26:12,170 --> 00:26:16,372
explore now, you want to go out, but so this way we

289
00:26:16,412 --> 00:26:20,614
have also this kind of events. But it can be used really to

290
00:26:21,014 --> 00:26:25,576
increase the range of the part of the game that we can test.

291
00:26:26,589 --> 00:26:31,292
and get data from, for example, this telemetry tool.

292
00:26:33,593 --> 00:26:44,478
So, the advantage is that we were presenting, in fact, an automation system that avoids a lot of

293
00:26:44,718 --> 00:26:53,463
repetitive testing. We were able to show how to share development costs through several projects

294
00:26:54,083 --> 00:26:55,103
by making this.

295
00:26:55,792 --> 00:27:02,073
this part as more common as possible. I'm trying to have a generic game state

296
00:27:03,754 --> 00:27:12,196
in which we can store a lot of data, even some user data, like what kind of objects we want to

297
00:27:12,316 --> 00:27:20,299
interact with. So in the replay we can use this kind of ID to look for these objects and not go

298
00:27:20,619 --> 00:27:20,899
to the...

299
00:27:21,712 --> 00:27:29,459
recorded data, but to the new position of this object. This allows us to have some margin with

300
00:27:30,219 --> 00:27:36,645
level change. We were also showing that we have a navigation system that is outside the game,

301
00:27:36,866 --> 00:27:41,810
that can allow you also to have something that is less game-specific.

302
00:27:42,649 --> 00:27:51,276
And with mixing explorations, you can start to have also support for some variety inside the

303
00:27:51,416 --> 00:27:59,523
game level. Even if you have new obstacles during your own path, you may be able to explore rooms

304
00:28:00,404 --> 00:28:09,431
and go around these obstacles. The problem is that we are not able to do any qualitative QA,

305
00:28:09,451 --> 00:28:10,872
so graphic issues and so on.

306
00:28:11,533 --> 00:28:18,457
The replay system was perfectly fine to say that the game was working when there was a black screen

307
00:28:18,557 --> 00:28:27,803
all over the place, just because it was able to complete the level. But we have still some

308
00:28:28,243 --> 00:28:37,849
graphical movies and songs that we can export to help QA, in fact to make some decisions about that.

309
00:28:39,390 --> 00:28:39,550
So

310
00:28:42,020 --> 00:29:05,595
What we want to do is, in fact, add more of this extract video and screenshot to, in fact, for example, gather all cinematics that are inside the game and have a QA that just checks the cinematics, doesn't have to run the game.

311
00:29:06,962 --> 00:29:12,884
several times to gather all the possible cutscenes depending on its different actions.

312
00:29:16,406 --> 00:29:23,909
And we want to maybe use expressions on other things and positions, for example on menu or

313
00:29:23,989 --> 00:29:24,949
maybe on minigames.

314
00:29:29,577 --> 00:29:37,081
And things that I have said that the explorers may be able to detect collisions, but this is

315
00:29:37,542 --> 00:29:42,465
something that we have to work on. We want also tools to find large change in level collisions.

316
00:29:45,667 --> 00:29:51,570
Okay, so if you have any more questions, you can always contact me and thank you for listening.

