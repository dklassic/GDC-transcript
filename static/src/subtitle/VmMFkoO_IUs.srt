1
00:00:06,169 --> 00:00:12,573
Welcome to the part 2 of this presentation about bringing feature film effects to real-time VR experience.

2
00:00:13,253 --> 00:00:17,696
This talk will mostly focus on the technical side, well, a lot of math.

3
00:00:18,056 --> 00:00:25,041
So I will try to make it not boring and show how we actually implement these effects in the engine.

4
00:00:27,522 --> 00:00:32,485
First a little bit about myself. My name is 4Hu, this awesome guy.

5
00:00:33,795 --> 00:00:39,100
And I used to be a pipeline TA working on AAA games like Dead Space and Battlefront.

6
00:00:39,841 --> 00:00:43,864
These days I'm a look dev VFX DD working at ILMxLAB.

7
00:00:44,805 --> 00:00:50,590
During the past three years I did a lot of amazing experience including the Oscar-winning

8
00:00:50,670 --> 00:00:55,675
Conan Arena and multiple critically acclaimed AR VR experience.

9
00:00:59,432 --> 00:01:05,134
First, I want to talk about the shader effects we used in the Ralph Breaks VR experience

10
00:01:05,674 --> 00:01:07,895
since it's the most recently released project.

11
00:01:08,855 --> 00:01:13,597
It needs to have a high visual bar as a Disney animated feature film

12
00:01:14,297 --> 00:01:17,678
and needs to run at 90 fps double-eyed in VR.

13
00:01:19,019 --> 00:01:21,180
Also, we have a lot of complex gameplay,

14
00:01:21,620 --> 00:01:25,962
so we've got to finish all of this in a very limited time frame.

15
00:01:30,059 --> 00:01:37,002
And here are some examples showing all the moments that were created inspired by the movie.

16
00:01:37,803 --> 00:01:40,224
For example, you see the hub turning on,

17
00:01:41,004 --> 00:01:43,605
and we go through the hyperspeed internet cables,

18
00:01:44,486 --> 00:01:46,487
and we went into the Dunderdome realm,

19
00:01:48,808 --> 00:01:50,169
and it's sparkling.

20
00:01:53,130 --> 00:01:54,471
And it's continuous sparkling,

21
00:01:55,031 --> 00:01:57,573
and you can see the awesome spaceship.

22
00:01:59,735 --> 00:02:02,756
And also the binary transition between all different worlds.

23
00:02:07,418 --> 00:02:11,960
All these effects serve the purpose of storytelling and give life to the environment.

24
00:02:12,540 --> 00:02:15,381
And I think we did manage to get a feel like

25
00:02:16,341 --> 00:02:19,162
inside a Disney animated film.

26
00:02:22,510 --> 00:02:27,112
Well, the internet is huge and each place is so different from each other,

27
00:02:27,732 --> 00:02:31,033
which means each place has got its own unique challenges,

28
00:02:31,694 --> 00:02:33,354
both visually and technically.

29
00:02:34,195 --> 00:02:38,336
And Disney Animation Studio did a fantastic job in the film

30
00:02:38,816 --> 00:02:40,617
to give you this amazing experience.

31
00:02:41,477 --> 00:02:46,079
And we are aiming to achieve the same and maybe more with hyper-reality technology.

32
00:02:47,182 --> 00:02:52,285
So here I'm going to break down some of the details of how we created these moments.

33
00:02:57,548 --> 00:02:59,329
So the first one is the hyperspace.

34
00:02:59,970 --> 00:03:05,353
We need to make you feel like traveling through the high-speed internet cable like Ralph did

35
00:03:05,413 --> 00:03:05,873
in the film.

36
00:03:06,834 --> 00:03:09,876
And it needs to perform at 90fps since it's VR.

37
00:03:11,319 --> 00:03:15,660
So apparently, we cannot do 1,000 meter polygons

38
00:03:15,700 --> 00:03:16,880
inside an engine.

39
00:03:18,021 --> 00:03:22,262
And I implemented all of this by separating all these

40
00:03:22,362 --> 00:03:23,722
elements into different layers.

41
00:03:24,662 --> 00:03:28,363
And you can see the different color lines represent the

42
00:03:29,203 --> 00:03:34,125
netizens traveling with you at light speed, and gradient

43
00:03:34,365 --> 00:03:38,166
patterns across the cable that makes you feel traveling

44
00:03:38,206 --> 00:03:39,426
through a super long distance.

45
00:03:40,887 --> 00:03:44,329
And with different layers, they got different motion settings

46
00:03:44,509 --> 00:03:45,110
in the shaders.

47
00:03:45,850 --> 00:03:48,432
All this combined makes you feel you are really

48
00:03:48,632 --> 00:03:52,874
accelerating at light speed, while in reality, you're

49
00:03:52,894 --> 00:03:55,936
just standing there admiring all this awesome art.

50
00:03:58,798 --> 00:04:00,639
So on the left is the shader parameters

51
00:04:00,719 --> 00:04:02,260
that I exposed to designers.

52
00:04:03,000 --> 00:04:04,921
And on the right is the snap code

53
00:04:05,001 --> 00:04:07,363
I did the motion blur in one direction

54
00:04:07,843 --> 00:04:09,164
that created this illusion.

55
00:04:11,155 --> 00:04:14,458
Since it's dynamic, we can iterate the look very rapidly

56
00:04:14,658 --> 00:04:15,659
to get what we want.

57
00:04:16,679 --> 00:04:19,061
In the end, by just using a simple cone

58
00:04:20,282 --> 00:04:21,343
and a few textures,

59
00:04:22,204 --> 00:04:24,946
you almost got the exact same effects in the film.

60
00:04:29,750 --> 00:04:31,572
Next, we come to the Dunderdome,

61
00:04:32,152 --> 00:04:36,116
which is heavily inspired by the 80s popular arcade games

62
00:04:36,256 --> 00:04:37,497
with a lot of fun gameplay.

63
00:04:38,610 --> 00:04:43,072
I bet someone here still remember when you play this kind of games.

64
00:04:44,273 --> 00:04:48,955
To match that special visual style, we have to figure out a way to get the glitches and

65
00:04:49,095 --> 00:04:56,078
jittering and all the crazy stuff happening in the old CRT screen, but it's got to all

66
00:04:56,258 --> 00:05:02,081
working in full 3D environments, while in back in the old days, it's just 2D pixel animation

67
00:05:02,461 --> 00:05:03,161
on screen, right?

68
00:05:04,102 --> 00:05:07,823
And maybe only a few hundred lines of code to implement the whole game.

69
00:05:11,250 --> 00:05:16,234
So how we convert the pixel art style in a full 3D immersive

70
00:05:16,294 --> 00:05:16,815
experience.

71
00:05:17,575 --> 00:05:20,358
And this is what we come up with just using

72
00:05:20,418 --> 00:05:21,619
a simple polygon lines.

73
00:05:22,860 --> 00:05:26,003
But you can see in the right corner,

74
00:05:26,923 --> 00:05:29,626
it's got all the connecting points and variations

75
00:05:29,706 --> 00:05:32,488
of the lines and skyline across them

76
00:05:32,788 --> 00:05:35,891
and all the detail features of the CRT screen

77
00:05:35,931 --> 00:05:39,194
look after applying the shaders, which is the middle.

78
00:05:40,505 --> 00:05:41,925
where all this magic happened.

79
00:05:46,147 --> 00:05:48,168
And here's the detail of the shader parameters.

80
00:05:48,889 --> 00:05:50,490
And by changing just one of them,

81
00:05:51,110 --> 00:05:54,352
you already got a very interesting destroying effects on the right.

82
00:05:55,352 --> 00:05:59,614
And you can see the X-Wing goes into lines and blobs into lots of bits.

83
00:06:00,274 --> 00:06:01,875
I think the mission is accomplished, right?

84
00:06:06,161 --> 00:06:13,067
So, from space mountains to spaceships, every element in the scene is built by the instance

85
00:06:13,147 --> 00:06:18,131
of these materials, and the various effects can be created dynamically through gameplay,

86
00:06:19,612 --> 00:06:22,595
as you can see the glitch and jitter effects here.

87
00:06:24,196 --> 00:06:30,121
The benefit to do this, you can create different behavior that meets the need of storytelling,

88
00:06:30,962 --> 00:06:34,585
and have all the effects tied to the visual look at the same time.

89
00:06:35,855 --> 00:06:39,977
And you can also adapt any changes at any time and don't

90
00:06:40,017 --> 00:06:41,977
have to worry about performance later.

91
00:06:46,219 --> 00:06:48,661
The other very interesting thing is the binary

92
00:06:48,701 --> 00:06:49,301
transitions.

93
00:06:49,761 --> 00:06:53,743
As I said before, each element, each moment's got its

94
00:06:53,883 --> 00:06:54,683
unique look, right?

95
00:06:55,504 --> 00:06:59,485
So since we cannot do a camera cut like we did in the film,

96
00:07:00,166 --> 00:07:03,347
how we link all these different places together to

97
00:07:03,387 --> 00:07:04,408
tell a full story?

98
00:07:05,855 --> 00:07:11,679
The answer we came up with is everyone knows the internet is

99
00:07:12,880 --> 00:07:15,621
made up of a bunch of data of 0 and 1's.

100
00:07:16,402 --> 00:07:19,284
So it only makes sense that we use the matrix system to

101
00:07:19,364 --> 00:07:21,085
translate you between different worlds.

102
00:07:25,267 --> 00:07:28,670
And this shader needs to have a way to seamlessly turn any

103
00:07:28,790 --> 00:07:30,691
object in the world into binary form.

104
00:07:31,551 --> 00:07:32,672
And this is how it looks like.

105
00:07:34,043 --> 00:07:37,164
I used the cell noise and world position to make sure it

106
00:07:37,424 --> 00:07:40,025
works on any kind of surface, no matter how

107
00:07:40,105 --> 00:07:41,185
it looks or shape.

108
00:07:46,466 --> 00:07:48,327
And here is another snapshot of the shader.

109
00:07:48,347 --> 00:07:54,049
As you can see, I enclosed all the math and logic and only

110
00:07:54,149 --> 00:07:56,849
exposed as few parameters as possible to

111
00:07:56,889 --> 00:07:58,090
satisfy the designers.

112
00:07:58,990 --> 00:08:01,311
We all know sometimes designers can be really,

113
00:08:01,331 --> 00:08:01,411
yeah.

114
00:08:03,344 --> 00:08:06,206
And all this combination can already give multiple

115
00:08:06,667 --> 00:08:07,568
different behaviors.

116
00:08:10,370 --> 00:08:13,713
So here is some detail math about how to make it randomly

117
00:08:13,773 --> 00:08:16,275
switching from 0 to 1 across the surface

118
00:08:17,175 --> 00:08:18,096
during this transition.

119
00:08:19,077 --> 00:08:22,500
And the key here is to treat the cell noise

120
00:08:22,660 --> 00:08:24,081
value as a threshold.

121
00:08:24,942 --> 00:08:29,205
So any input value that's beyond that shows 1, and

122
00:08:29,265 --> 00:08:30,186
below is 0.

123
00:08:35,279 --> 00:08:41,303
And on the left, you can see a line crawling effects and a spherical spreading effects in the same shader.

124
00:08:42,004 --> 00:08:43,345
And the logic are on the right.

125
00:08:44,186 --> 00:08:47,568
The secret is to use the cell noise to drive another cell noise.

126
00:08:48,108 --> 00:08:52,231
And that's how you get the line crawling that match the look in the film.

127
00:08:53,710 --> 00:08:56,572
And this is a way to show you can actually use the noise

128
00:08:56,612 --> 00:08:59,775
function that's building the engine to get a very complex

129
00:08:59,815 --> 00:09:04,058
look, and combined with hyper-reality technology, it

130
00:09:04,098 --> 00:09:07,941
serves the purpose of magical transformation and storytelling.

131
00:09:11,564 --> 00:09:13,065
OK, here comes the fun part.

132
00:09:14,006 --> 00:09:16,708
The other big challenge is that we want to have a

133
00:09:16,768 --> 00:09:20,572
pancake milkshake launcher in players' hands, which shows on

134
00:09:20,612 --> 00:09:21,192
the right side.

135
00:09:23,143 --> 00:09:28,666
And we need to have a jar to store the liquids that make both pancake and milkshake.

136
00:09:29,666 --> 00:09:34,389
And it is very close to the player, so we can't simply use the mask trick to fake the

137
00:09:34,429 --> 00:09:38,091
volume compression like we usually did in traditional games.

138
00:09:44,257 --> 00:09:49,239
Since, okay, and since it's closely tied to the gameplay

139
00:09:50,180 --> 00:09:53,202
and all kinds of function as real time,

140
00:09:53,462 --> 00:09:55,663
it's almost function as a real time simulation.

141
00:09:56,304 --> 00:09:59,065
And we can simply use the vertex animation technique

142
00:09:59,345 --> 00:10:01,647
that Martin mentioned just in the first talk.

143
00:10:02,687 --> 00:10:04,248
And I need to figure out a better way

144
00:10:04,308 --> 00:10:08,711
to do a real fake volume in VR and with complex behavior.

145
00:10:09,831 --> 00:10:12,293
And the trick to achieve that is use vertex shading.

146
00:10:15,125 --> 00:10:18,548
Here shows how you can change the color and volume in the fluid.

147
00:10:19,569 --> 00:10:24,652
It needs to look like two liquids mixed into each other, but not dissolving each other.

148
00:10:25,573 --> 00:10:29,236
We definitely don't want to mix the flavor between milkshake and pancake,

149
00:10:29,456 --> 00:10:30,717
because it really tastes bad.

150
00:10:32,355 --> 00:10:34,576
The other one, the volume decreases,

151
00:10:34,836 --> 00:10:37,058
but it cannot leak outside the glass drawer.

152
00:10:37,658 --> 00:10:39,300
Otherwise it will break the illusion.

153
00:10:40,120 --> 00:10:42,802
And the interesting thing here is like we don't have,

154
00:10:43,302 --> 00:10:45,384
we don't use any collision detection

155
00:10:45,964 --> 00:10:47,125
for the performance reasons.

156
00:10:50,127 --> 00:10:51,488
Okay, what is the trick here?

157
00:10:52,829 --> 00:10:56,031
The key to achieve this is to separate the top layer

158
00:10:56,692 --> 00:10:58,693
from the bottom as two separate part

159
00:10:58,893 --> 00:11:00,434
and by using a threshold.

160
00:11:01,271 --> 00:11:05,455
So the top part will be implemented as a procedural surface with liquid noise,

161
00:11:06,136 --> 00:11:09,639
and here I faked the shading to simulate the translucency.

162
00:11:10,901 --> 00:11:15,585
And the bottom just uses the world Z value to drive the logic to mix the fluids.

163
00:11:16,686 --> 00:11:22,072
It's very simple and effective, and the result is that we meet all the gameplay requirements,

164
00:11:22,632 --> 00:11:25,435
while keeping it look really good and efficient.

165
00:11:29,854 --> 00:11:32,935
All these moments are only parts of the effects that we

166
00:11:32,975 --> 00:11:34,255
did for the project.

167
00:11:35,056 --> 00:11:38,237
And there's a bunch more down for the environment to get a

168
00:11:38,257 --> 00:11:40,397
feature film look into our VR experience.

169
00:11:41,298 --> 00:11:45,059
For example, you can see the capsule bits go through the

170
00:11:45,139 --> 00:11:50,961
cards, electronic sparks in this hub, random animated

171
00:11:51,241 --> 00:11:54,582
billboards in the internet, bubbles going through the cool

172
00:11:54,622 --> 00:11:58,483
internal, and high-reflected fake glass cards that are used

173
00:11:58,503 --> 00:11:59,223
by the netizens.

174
00:12:00,924 --> 00:12:06,348
In summary, because it's real-time and dynamic in nature, we can quickly iterate and create

175
00:12:06,388 --> 00:12:07,749
complex visuals through shading.

176
00:12:11,572 --> 00:12:17,676
Now here are some bonus parts and some more detailed breakdowns about how we did the lava

177
00:12:17,716 --> 00:12:20,478
flea moment in the Secret of the Empire experience.

178
00:12:24,752 --> 00:12:30,334
As you can see, the lava flea needs to distort and push the lava field around him while it's

179
00:12:30,474 --> 00:12:33,516
moving to better integrate it with the environment.

180
00:12:34,756 --> 00:12:40,079
And as you see, the lava plane is just a simple polyplane, and all the visual detail here

181
00:12:40,339 --> 00:12:44,921
is driven by our shader procedurally, because I really, really hate using textures.

182
00:12:49,565 --> 00:12:52,969
Haha, this is what's actually happening under the hood.

183
00:12:53,730 --> 00:12:56,713
First, we assign a special vertex shader

184
00:12:57,033 --> 00:13:00,116
that expands the lava flea to gather surrounding volumes.

185
00:13:01,538 --> 00:13:04,401
Then we use a render target to capture the area

186
00:13:04,481 --> 00:13:06,643
that the flea intersects with the lava plane.

187
00:13:07,504 --> 00:13:11,048
It almost functions as a CTR scan we used in the hospital.

188
00:13:12,114 --> 00:13:15,321
And then we use it to accumulate the value of distortion

189
00:13:15,722 --> 00:13:18,609
to drive the vertex offset of the lava material

190
00:13:19,010 --> 00:13:21,336
to get a trail behind the lava fleet.

191
00:13:26,035 --> 00:13:31,620
And after that, we combined a vertex simulation of the lava splash that Martin talked about

192
00:13:32,381 --> 00:13:39,407
in part one, and the glowing belly material of the lava flea, and with all the other animations

193
00:13:39,507 --> 00:13:43,630
and audios, we got a full giant lava flea attack moment.

194
00:13:46,233 --> 00:13:49,616
This technique was inspired by Rembok's talk a few years back.

195
00:13:50,507 --> 00:13:53,531
The good thing about this is this works on any kind of

196
00:13:53,612 --> 00:13:57,517
surface with any kind of object intact with it,

197
00:13:57,757 --> 00:13:59,700
without any additional baked data.

198
00:14:00,641 --> 00:14:02,924
And it can be used on other projects as well.

199
00:14:07,381 --> 00:14:08,162
And that's a wrap.

200
00:14:08,722 --> 00:14:11,885
The takeaway is you can really do a lot of cool stuff

201
00:14:11,925 --> 00:14:14,527
in shading, and it's a great way to implement

202
00:14:14,547 --> 00:14:17,690
the visual fidelity that serve the storytelling and gameplay

203
00:14:18,291 --> 00:14:19,872
while give lives to the environment.

204
00:14:20,813 --> 00:14:24,236
Well, my philosophy is eventually everything comes

205
00:14:24,276 --> 00:14:27,439
down to just pixels that rendered on the screen

206
00:14:27,479 --> 00:14:28,600
that rendered real time.

207
00:14:29,401 --> 00:14:31,663
So in summary, shading rules.

208
00:14:39,293 --> 00:14:42,454
And I also want to thank for the whole team at ILMxLab.

209
00:14:43,034 --> 00:14:45,075
Again, all this work is teamwork.

210
00:14:45,595 --> 00:14:47,475
It takes every discipline's contribution

211
00:14:47,535 --> 00:14:48,656
to get the final product.

212
00:14:49,536 --> 00:14:51,997
I'm glad that we keep pushing the boundaries of what

213
00:14:52,077 --> 00:14:56,158
is possible in hyperreality and produce amazing experience

214
00:14:56,198 --> 00:14:58,479
that never seen before and creating

215
00:14:58,499 --> 00:14:59,979
a more exciting future.

216
00:15:03,120 --> 00:15:04,960
Thanks for listening, and have a great night.

217
00:15:05,161 --> 00:15:06,741
Please follow us on social media.

218
00:15:07,461 --> 00:15:08,382
And any questions?

219
00:15:15,449 --> 00:15:16,670
Oh, another thing.

220
00:15:16,810 --> 00:15:18,651
Please take on the online survey.

221
00:15:19,352 --> 00:15:19,572
Yeah.

222
00:15:20,553 --> 00:15:22,534
The other guy told me I should say so.

223
00:15:24,676 --> 00:15:24,956
Hello.

224
00:15:24,996 --> 00:15:25,317
Thank you.

225
00:15:25,717 --> 00:15:25,937
Hi.

226
00:15:27,058 --> 00:15:30,841
So in VR, did you find the render target solution

227
00:15:30,901 --> 00:15:32,283
was a little bit expensive?

228
00:15:32,623 --> 00:15:32,803
Yes.

229
00:15:32,823 --> 00:15:33,924
You're rendering another camera?

230
00:15:34,983 --> 00:15:35,424
Exactly.

231
00:15:35,884 --> 00:15:40,365
So we basically have to use that technology.

232
00:15:40,645 --> 00:15:43,666
It is extremely expensive, especially when you're using

233
00:15:43,726 --> 00:15:47,387
a render target by default on real components.

234
00:15:48,028 --> 00:15:51,669
So basically, I work with the graphic engineers just

235
00:15:51,729 --> 00:15:52,989
basically rewrite the whole thing.

236
00:15:54,450 --> 00:15:57,571
And we literally only need to capture the one channel.

237
00:15:57,691 --> 00:16:01,232
So it works pretty well in this case.

238
00:16:01,832 --> 00:16:03,393
You just have to rewrite it sometimes.

239
00:16:05,076 --> 00:16:05,276
Yeah.

240
00:16:06,577 --> 00:16:07,298
Hey.

241
00:16:07,679 --> 00:16:07,779
Hi.

242
00:16:08,099 --> 00:16:14,806
So sometimes when making shaders in Unreal, I seem to find something that either it can't

243
00:16:14,866 --> 00:16:16,447
do by default or I don't know how.

244
00:16:16,467 --> 00:16:16,587
So I'm.

245
00:16:16,607 --> 00:16:16,667
I'm.

246
00:16:16,687 --> 00:16:16,748
I'm.

247
00:16:16,768 --> 00:16:16,828
I'm.

248
00:16:16,848 --> 00:16:16,908
I'm.

249
00:16:16,928 --> 00:16:16,988
I'm.

250
00:16:17,008 --> 00:16:17,068
I'm.

251
00:16:17,088 --> 00:16:17,148
I'm.

252
00:16:17,168 --> 00:16:17,228
I'm.

253
00:16:17,248 --> 00:16:17,308
I'm.

254
00:16:17,328 --> 00:16:17,388
I'm.

255
00:16:17,408 --> 00:16:17,468
I'm.

256
00:16:17,488 --> 00:16:17,608
I'm.

257
00:16:17,628 --> 00:16:17,688
I'm.

258
00:16:17,709 --> 00:16:17,769
I'm.

259
00:16:17,789 --> 00:16:17,849
I'm.

260
00:16:17,869 --> 00:16:17,929
I'm.

261
00:16:18,029 --> 00:16:18,209
I'm.

262
00:16:18,605 --> 00:16:20,446
Trying to use the custom node a lot.

263
00:16:21,507 --> 00:16:21,867
Same here.

264
00:16:22,287 --> 00:16:22,527
Yeah.

265
00:16:22,867 --> 00:16:23,047
Yeah.

266
00:16:23,387 --> 00:16:24,808
Do you have any tricks for learning

267
00:16:24,888 --> 00:16:28,129
how HLSL meshes with Unreal?

268
00:16:28,149 --> 00:16:29,470
Because a lot of that isn't like-

269
00:16:29,490 --> 00:16:30,530
GPU germs.

270
00:16:30,631 --> 00:16:31,331
Read all of them.

271
00:16:31,971 --> 00:16:35,172
And get all of- basically it's just computer science,

272
00:16:35,393 --> 00:16:38,014
graphic, knowledge, math, things like that.

273
00:16:38,454 --> 00:16:39,294
You just do it all.

274
00:16:41,515 --> 00:16:42,756
There's really no trick, man.

275
00:16:43,156 --> 00:16:45,117
You know the maths.

276
00:16:45,377 --> 00:16:45,937
You get it done.

277
00:16:47,235 --> 00:16:48,555
All right, thank you. I'll try that.

278
00:16:49,055 --> 00:16:51,276
Okay, yeah. It definitely works.

279
00:16:54,136 --> 00:17:04,479
Hello. Just out of curiosity, did you run into any motion sickness shenanigans with the, like, screen space zooming example that you showed?

280
00:17:04,939 --> 00:17:07,420
Yes. That thing, right?

281
00:17:09,000 --> 00:17:15,181
For going through the hyperspace, so the trick to not get people sick is you shorten the time.

282
00:17:16,797 --> 00:17:19,977
So we just basically do this design.

283
00:17:20,057 --> 00:17:23,058
So basically, you're basically, well, first is a cable.

284
00:17:23,658 --> 00:17:27,939
And you're constrained in a very finite space.

285
00:17:28,980 --> 00:17:32,120
At that point, all the interest is looking forward.

286
00:17:32,601 --> 00:17:36,141
So one thing I forgot to mention is that we add some

287
00:17:36,181 --> 00:17:38,122
vignette around the corner.

288
00:17:38,182 --> 00:17:41,563
So once you turn this way, you don't really see that much

289
00:17:41,663 --> 00:17:42,583
interesting details.

290
00:17:42,843 --> 00:17:44,143
It's almost just like a blur.

291
00:17:45,225 --> 00:17:49,991
So that gives a way to always direct in the focal point

292
00:17:50,011 --> 00:17:50,712
and look forward.

293
00:17:50,872 --> 00:17:53,776
And that really doesn't give any motion sickness.

294
00:17:54,817 --> 00:17:55,158
Thank you.

295
00:17:55,438 --> 00:17:56,219
Yeah, it's just tricks.

296
00:17:56,719 --> 00:17:56,880
Yes.

297
00:18:02,478 --> 00:18:06,722
Hello, hi, I'm currently a CMUETC student.

298
00:18:07,242 --> 00:18:08,003
Oh, hi.

299
00:18:08,083 --> 00:18:08,883
Hi, hello.

300
00:18:09,344 --> 00:18:10,845
I know I graduated from our program.

301
00:18:10,865 --> 00:18:11,305
I know.

302
00:18:11,585 --> 00:18:13,647
Hi.

303
00:18:13,867 --> 00:18:22,214
So yeah, our team is actually currently working on a discovery exploring project about like

304
00:18:22,434 --> 00:18:23,194
transition like.

305
00:18:25,630 --> 00:18:29,351
adapting traditional film transition technologies into VR.

306
00:18:29,451 --> 00:18:34,412
So I'm really happy to see all the things you did.

307
00:18:35,652 --> 00:18:38,993
Since the title of this talk is called

308
00:18:39,073 --> 00:18:42,113
Bringing Feature Film Effects to Real-Time VR,

309
00:18:43,214 --> 00:18:46,635
do you mind talking a little bit more

310
00:18:46,695 --> 00:18:53,196
about your personal thoughts on future potential

311
00:18:53,976 --> 00:18:55,397
just like in this area?

312
00:18:55,937 --> 00:19:03,260
Like combining feature film effects and feature film in future VR applications.

313
00:19:03,421 --> 00:19:11,084
Well, my dream is, I'll talk about dream, and I'm really hyped about 5G technology.

314
00:19:11,465 --> 00:19:21,410
And I think by implementing using the 5G stuff, the VR and AR technology will actually really going to take off at that moment.

315
00:19:22,307 --> 00:19:24,848
Since at that point, we can actually

316
00:19:24,948 --> 00:19:26,829
offload all the computation power,

317
00:19:26,969 --> 00:19:30,630
and we can use high-end machines and high-end graphics,

318
00:19:30,750 --> 00:19:32,571
like just cloud rendering it.

319
00:19:32,911 --> 00:19:36,033
And we can stream all kinds of crazy simulation data.

320
00:19:37,033 --> 00:19:40,355
And now we have crazy graphics, right?

321
00:19:40,675 --> 00:19:42,336
And we can do real-time ray tracing.

322
00:19:42,736 --> 00:19:44,877
Back then, it was unimaginable.

323
00:19:45,826 --> 00:19:50,190
So if we can shift all of this using a much higher computation power

324
00:19:51,070 --> 00:19:53,452
than with 5G, like real-time streaming,

325
00:19:53,472 --> 00:19:57,255
then, yeah, it will work.

326
00:19:58,436 --> 00:19:59,837
And everything will be real-time,

327
00:19:59,977 --> 00:20:04,100
because it saves much, much production

328
00:20:04,341 --> 00:20:08,004
and just cuts all the crap about, you know,

329
00:20:08,124 --> 00:20:11,406
iterations, time, renderings, waiting.

330
00:20:12,705 --> 00:20:14,067
Knights and not knights.

331
00:20:14,648 --> 00:20:15,469
Yeah.

332
00:20:16,631 --> 00:20:16,791
Yeah.

333
00:20:20,878 --> 00:20:21,198
No more?

334
00:20:22,320 --> 00:20:22,621
Okay.

335
00:20:23,161 --> 00:20:23,422
Thank you.

