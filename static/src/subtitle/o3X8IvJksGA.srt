1
00:00:06,150 --> 00:00:11,015
Hi there, I'm Shirvin. Welcome to Growing Your Code Library with each new project.

2
00:00:11,015 --> 00:00:14,938
I have my Twitter handle there if you want to follow me after the talk or ask any follow-up

3
00:00:14,938 --> 00:00:21,945
questions, that's totally fine. A little bit about me, I make games primarily as a freelancer.

4
00:00:21,945 --> 00:00:26,710
I'm also working on a game called MidAutumn right now, which I'll talk about at a later point.

5
00:00:27,977 --> 00:00:32,538
So when I say I work as a freelancer, what that means is I don't work for any particular studio.

6
00:00:32,538 --> 00:00:38,700
Most of the time I mostly have in my career in games,

7
00:00:38,700 --> 00:00:42,341
worked for a variety of studios on a contract basis.

8
00:00:42,341 --> 00:00:48,982
Sometimes that's like a week, sometimes that's a month, sometimes it's six months.

9
00:00:48,982 --> 00:00:49,662
And as I've...

10
00:00:50,161 --> 00:00:52,603
kind of made my career in games.

11
00:00:52,603 --> 00:00:54,224
I'm sure in Games Career Seminar,

12
00:00:54,224 --> 00:00:58,527
you're gonna see a lot of different ways

13
00:00:58,527 --> 00:00:59,928
that people have careers in games.

14
00:00:59,928 --> 00:01:01,149
But for me,

15
00:01:02,167 --> 00:01:08,612
I've noticed that what's really helped me is to, in the same way that a lot of big studios

16
00:01:08,612 --> 00:01:14,516
have their proprietary technology that they develop over time, to do something similar as

17
00:01:14,516 --> 00:01:21,441
an individual is to kind of take the stuff that I worked on and use that to help me

18
00:01:21,441 --> 00:01:24,283
make games faster and more easily.

19
00:01:24,644 --> 00:01:29,568
And that's kind of what I'm planning to talk about when I say code libraries.

20
00:01:29,568 --> 00:01:34,473
So a couple caveats up at the top, pardon the pun.

21
00:01:34,473 --> 00:01:38,256
You know, I'm just one person. My opinion at the end of the day

22
00:01:38,256 --> 00:01:40,318
might not be right for everyone.

23
00:01:40,318 --> 00:01:46,304
So if you're watching this talk and what I'm saying really doesn't make sense for you, feel free to ignore that advice.

24
00:01:47,873 --> 00:01:57,250
What I'm trying to offer here is tools that help me address kind of the complexity of making games.

25
00:01:57,250 --> 00:02:01,477
Often, you know, remotely with just you in the room, which is.

26
00:02:02,486 --> 00:02:05,867
very difficult when you don't have people to bounce ideas off of or anything like that.

27
00:02:05,867 --> 00:02:10,968
So if that's something you're struggling with and you don't know how to approach that,

28
00:02:10,968 --> 00:02:12,848
here are some potential ways to address that.

29
00:02:12,848 --> 00:02:16,789
So big sweeping statement right at the top of the talk is

30
00:02:16,789 --> 00:02:18,730
making games is super hard already.

31
00:02:18,730 --> 00:02:21,610
We don't have to make it harder on ourselves.

32
00:02:21,610 --> 00:02:26,371
I think sorry, I bumped the mic, but

33
00:02:26,371 --> 00:02:30,092
I remember when Pokemon Sword and Shield came out,

34
00:02:30,092 --> 00:02:32,033
Game Freak got a ton of flack for

35
00:02:33,073 --> 00:02:37,537
daring to reuse their their Pokemon models across all their games.

36
00:02:37,537 --> 00:02:40,680
And I'm here to say, like, absolutely do that.

37
00:02:40,680 --> 00:02:43,823
That's exactly the way we should be making games.

38
00:02:43,823 --> 00:02:46,666
People know what Pikachu look like.

39
00:02:46,666 --> 00:02:48,768
Like, like people know what Pikachu looks like.

40
00:02:48,768 --> 00:02:53,372
You don't have to, like, make a hundred different variations

41
00:02:53,372 --> 00:02:56,455
of things and reinvent the wheel every single time.

42
00:02:56,455 --> 00:02:56,715
You know.

43
00:02:57,287 --> 00:03:01,468
If you have a chair in your game, and no one's going to notice, reuse it.

44
00:03:01,468 --> 00:03:04,309
If you have a dialogue system, it's going to work the exact same way, reuse it.

45
00:03:04,309 --> 00:03:12,091
And that's the main philosophical kind of underpinning that I'm trying to get across at the top of this talk is,

46
00:03:12,091 --> 00:03:16,712
you know, things are hard, make them easier on yourself, reuse things.

47
00:03:16,712 --> 00:03:21,313
So, you know, I remember finishing my first project in games, and it was...

48
00:03:22,272 --> 00:03:23,894
you know, daunting to say the least.

49
00:03:23,894 --> 00:03:31,801
But at the end of the day, I think I got through it just because there was so much I didn't know.

50
00:03:31,801 --> 00:03:35,824
And and I didn't really know enough to psych myself out.

51
00:03:36,799 --> 00:03:42,306
Once that happens and you realize, oh, I have to make another game, if you want a career in games,

52
00:03:42,306 --> 00:03:48,453
you're going to be making a lot of games. So it's a lot harder the second time around,

53
00:03:48,453 --> 00:03:53,719
because you know exactly what goes into games, you know, it went into the first one.

54
00:03:53,719 --> 00:03:56,863
And if you're stuck at this point, I'm here to say, you know,

55
00:03:57,203 --> 00:04:01,607
there's a flip side is now that you've made at least one game,

56
00:04:01,607 --> 00:04:05,609
you are more infinitely more able to prepare.

57
00:04:05,609 --> 00:04:10,153
And I haven't just used this gif of Batman here to be cute.

58
00:04:10,153 --> 00:04:14,736
I think this is a great analogy for for how you can approach things

59
00:04:14,736 --> 00:04:16,157
to make things easier on yourself. Right.

60
00:04:16,157 --> 00:04:20,200
And it's clip Batman's on the ocean and a freaking shark appears out of nowhere.

61
00:04:20,200 --> 00:04:24,043
And he just has shark repellent in his utility belt like that.

62
00:04:24,043 --> 00:04:24,363
He's he.

63
00:04:24,833 --> 00:04:32,840
had prepared from long ago. And I'm saying that we can totally be like Batman. Now imagine that a

64
00:04:32,840 --> 00:04:39,445
game is just, you know, some combination of sharks. These are problems you have to solve

65
00:04:39,445 --> 00:04:43,329
or features you have to implement or whatever. They're all sharks now.

66
00:04:44,645 --> 00:04:47,967
You just have to do the exact same process, right?

67
00:04:47,967 --> 00:04:51,569
You make sure that you have your BAT shark propellant prepared.

68
00:04:51,569 --> 00:04:53,910
And in this case, we're going to be talking about POE templates.

69
00:04:53,910 --> 00:04:56,011
They go in a place you can find them easily, right?

70
00:04:56,011 --> 00:04:57,591
Then that's your utility belt.

71
00:04:57,591 --> 00:05:00,173
And when that shark shows up, you just, you know,

72
00:05:00,173 --> 00:05:02,834
pop that out of your utility belt and you're good to go.

73
00:05:02,834 --> 00:05:06,696
You know, obviously that's an oversimplification.

74
00:05:06,696 --> 00:05:07,296
But...

75
00:05:08,074 --> 00:05:14,676
you know, when I'm talking about a code library, what I mean is essentially a collection of helpful resources, right?

76
00:05:14,676 --> 00:05:20,278
And they should be reusable. I'm probably going to be saying reusable a lot in this talk.

77
00:05:20,278 --> 00:05:25,480
So I've bolded it. It should be, you know, backed up somewhere you can access.

78
00:05:25,480 --> 00:05:29,141
And I'm primarily going to be talking about code templates or pre-written code.

79
00:05:29,701 --> 00:05:32,222
But it really can just be things that help you out.

80
00:05:32,222 --> 00:05:39,406
So if you like using a particular software and you want to be able to access that easily,

81
00:05:39,406 --> 00:05:45,549
if you have particular settings you like for that software, you know, then you want to write that down somewhere.

82
00:05:45,549 --> 00:05:50,112
Some kind of documentation or links to articles or videos. That's all

83
00:05:50,112 --> 00:05:54,714
like that should all go in your code library in my opinion.

84
00:05:54,714 --> 00:05:54,754
So

85
00:05:56,235 --> 00:05:59,739
Essentially, going back to the shark repellent metaphor,

86
00:05:59,739 --> 00:06:04,984
you want to make sure that everything in your code library

87
00:06:04,984 --> 00:06:09,328
is, again, reusable, but it should solve a specific problem.

88
00:06:09,328 --> 00:06:12,411
The shark repellent is so like, because.

89
00:06:13,172 --> 00:06:16,414
It only fixes sharks and it doesn't solve anything else.

90
00:06:16,414 --> 00:06:20,876
It's lightweight, it doesn't need a ton of setup,

91
00:06:20,876 --> 00:06:23,057
you know, it's self-contained,

92
00:06:23,057 --> 00:06:25,979
and it can be combined with other things easily.

93
00:06:25,979 --> 00:06:30,702
That's like the ideal thing to go in your code library.

94
00:06:30,702 --> 00:06:33,103
So let's talk a bit about how you might maintain

95
00:06:33,103 --> 00:06:34,824
a code library, right?

96
00:06:34,824 --> 00:06:36,846
So what definitely doesn't go in?

97
00:06:37,869 --> 00:06:51,021
You know, you don't want to put in full project files or like really specific kind of fiddly systems that are designed to solve something that won't appear in other projects.

98
00:06:51,021 --> 00:07:05,713
But as a, you know, as a counterpoint, you should absolutely still keep access to these things because you might realize, oh, you need this exact thing from this other project that that you wouldn't ever have guessed you need.

99
00:07:06,245 --> 00:07:11,389
And in that case, don't go to your code library, go to your actual project, get that specific

100
00:07:11,389 --> 00:07:13,471
thing and then chuck it in your new project.

101
00:07:13,471 --> 00:07:19,896
But definitely keep out things you don't own or are not licensed to use or something that

102
00:07:19,896 --> 00:07:23,759
you currently are licensed to use but might become a headache in the future.

103
00:07:23,759 --> 00:07:25,660
Keep your code library safe.

104
00:07:26,452 --> 00:07:31,036
you know, helpful, basically. Don't make it so you have to worry whether you're able to use

105
00:07:31,036 --> 00:07:37,382
something or stress out. Have it be things that you can just use at a moment's notice.

106
00:07:37,382 --> 00:07:44,629
So the basic process, right, of making a code library is just like, it's mainly housekeeping,

107
00:07:44,629 --> 00:07:50,194
right? So the best time to do it is right after you finished a project and right before you're

108
00:07:50,194 --> 00:07:51,335
starting a project.

109
00:07:51,682 --> 00:07:58,807
however, you know, long that stretch is between those two points. You're going to look for some

110
00:07:58,807 --> 00:08:03,110
code or some assets in an older project that you'll think you'll want to reuse. You're going to

111
00:08:03,110 --> 00:08:08,094
get rid of any elements that tie that to that specific project. You're going to make it really

112
00:08:08,094 --> 00:08:12,937
generalized so you can use it in a variety of different projects. You're going to just name

113
00:08:12,937 --> 00:08:18,281
it something that you can find really easily. I mention this step because I think often when

114
00:08:18,281 --> 00:08:19,922
we're working on a project, the

115
00:08:21,124 --> 00:08:24,927
code or assets or whatever really specifically named.

116
00:08:24,927 --> 00:08:30,011
So you want to generalize that as well and then just store it somewhere you can

117
00:08:30,011 --> 00:08:32,333
easily access in somewhere you can intuitively find it.

118
00:08:32,333 --> 00:08:34,735
Right? So like make sure that you have a file

119
00:08:34,735 --> 00:08:37,157
organization system and I'll get into that a bit

120
00:08:37,157 --> 00:08:42,642
later. And like the main note here is don't worry about getting it

121
00:08:42,642 --> 00:08:44,103
perfect. This is just like

122
00:08:44,483 --> 00:08:51,009
you know, a habit that is good to cultivate. You know, when you do it, you spend a few hours,

123
00:08:51,009 --> 00:08:56,233
spend a day on it, and it's okay if you don't generalize it that well, or if you overlook

124
00:08:56,233 --> 00:09:01,438
something, right? You want to think of this in terms of like a career-wide span of time. So

125
00:09:01,438 --> 00:09:07,683
each time you finish a project, you're going to have an opportunity to revisit that and realize,

126
00:09:07,683 --> 00:09:09,164
oh, okay, this actually

127
00:09:10,133 --> 00:09:16,238
was way too cumbersome to use, and I'm going to either get rid of it, I'm going to change it,

128
00:09:16,238 --> 00:09:22,762
and you're going to have plenty of opportunities to do that. So I'm going to talk about how I kind

129
00:09:22,762 --> 00:09:29,487
of think about identifying things to go in a code library. So here is a non-shark-based model

130
00:09:29,487 --> 00:09:35,191
of a game. This is kind of based on how a lot of mobile studios kind of think about games,

131
00:09:35,191 --> 00:09:38,333
but this is, you know, 50% I made this up for this talk.

132
00:09:38,752 --> 00:09:42,233
So it goes pieces, core loop, metal loop,

133
00:09:42,233 --> 00:09:45,475
accompanying systems, and I'm gonna get into this.

134
00:09:45,475 --> 00:09:49,956
So here is an image from Queen's Gambit to help me out.

135
00:09:49,956 --> 00:09:52,857
So imagine the game of chess,

136
00:09:52,857 --> 00:09:55,438
and you have your chessboard and your pieces,

137
00:09:55,438 --> 00:09:59,359
and those are what I'm coining as game pieces.

138
00:09:59,359 --> 00:10:01,920
So these are just things that kind of go into your game,

139
00:10:01,920 --> 00:10:03,281
things like character controllers

140
00:10:03,281 --> 00:10:05,561
or health systems or physics.

141
00:10:06,857 --> 00:10:10,819
you know, the kind of building blocks, right, of your game.

142
00:10:10,819 --> 00:10:14,562
And then you go out a bit wider and you get what is your core loop, right?

143
00:10:14,562 --> 00:10:16,023
That's like the game of chess.

144
00:10:16,023 --> 00:10:19,565
Those are things like your rules and your procedures.

145
00:10:19,565 --> 00:10:23,127
So if you, you know, if you're familiar with game managers

146
00:10:23,127 --> 00:10:25,289
or resource systems or loop drops,

147
00:10:25,289 --> 00:10:29,512
they're the things that take your game pieces and turn them into a game.

148
00:10:29,512 --> 00:10:30,993
And then you have your meta loop.

149
00:10:31,754 --> 00:10:35,181
And I like to think of that as a chess tournament, right?

150
00:10:35,181 --> 00:10:42,436
Chess has its own rules, but this is the meta game around chess that you're trying to also

151
00:10:43,262 --> 00:10:48,148
progress through. So that's things like, you know, managers for your overworld or your hub,

152
00:10:48,148 --> 00:10:54,855
progression systems, quests, different ways to kind of progress on a meta level. And then you

153
00:10:54,855 --> 00:11:01,181
have accompanying systems, which I think of as a tournament venue, right? Like, this is like,

154
00:11:01,181 --> 00:11:04,725
not necessarily even have to be used for chess, this building.

155
00:11:04,765 --> 00:11:09,271
whatever. So these are things like your menus, you know,

156
00:11:09,271 --> 00:11:11,934
localizing for different languages, things to help with

157
00:11:11,934 --> 00:11:15,858
that button prompts, saving systems, these really could go

158
00:11:15,858 --> 00:11:19,242
in any game, but are pretty much, you know, needed for

159
00:11:19,242 --> 00:11:22,946
whatever game you're making. And when you're

160
00:11:23,802 --> 00:11:25,644
thinking about games this way, right?

161
00:11:25,644 --> 00:11:27,366
It's really easy to swap things out, right?

162
00:11:27,366 --> 00:11:29,407
You can have a completely different metal loop

163
00:11:29,407 --> 00:11:30,629
on top of a core loop,

164
00:11:30,629 --> 00:11:34,172
which means that that's how you're gonna reuse

165
00:11:34,172 --> 00:11:37,355
a lot of these systems when you've identified these scripts

166
00:11:37,355 --> 00:11:39,156
and put them into place.

167
00:11:39,156 --> 00:11:42,579
So where, now that you have, right?

168
00:11:42,579 --> 00:11:44,381
You've found some, you've identified some code,

169
00:11:44,381 --> 00:11:46,643
where are you gonna store it?

170
00:11:46,643 --> 00:11:46,943
You could.

171
00:11:47,114 --> 00:11:53,403
use version control, you know, there's Git, Perforce, Mercurial, and you could use cloud storage,

172
00:11:53,403 --> 00:11:59,191
Google Drive, so I'm going to be sharing some examples of like a code library later in this talk,

173
00:11:59,191 --> 00:12:03,336
and I've just put it up on Google Drive because that was easy for me.

174
00:12:03,336 --> 00:12:04,838
It really is just like

175
00:12:05,712 --> 00:12:09,895
use what is, makes sense to you, for you, what's accessible,

176
00:12:09,895 --> 00:12:12,077
which is like what I'm gonna say a lot in this talk,

177
00:12:12,077 --> 00:12:13,578
basically, do what works for you.

178
00:12:13,578 --> 00:12:17,861
So once you, yeah, once you know where to put it,

179
00:12:17,861 --> 00:12:19,643
you're gonna organize it, you know,

180
00:12:19,643 --> 00:12:22,705
you can organize it around a lot of different ways.

181
00:12:22,705 --> 00:12:24,627
I primarily organize it around systems.

182
00:12:24,627 --> 00:12:27,128
So like, I'll have a folder that says dialogue

183
00:12:27,128 --> 00:12:30,231
or a folder that says menus or save or load,

184
00:12:30,231 --> 00:12:32,613
and those will have, you know, a bunch of scripts

185
00:12:32,613 --> 00:12:33,974
that might be,

186
00:12:35,217 --> 00:12:40,698
you know, dependent on each other, which means I can just take all those things, drag it into my project,

187
00:12:40,698 --> 00:12:46,280
and hopefully they'll all work. But here's some potential other options, right? You could organize

188
00:12:46,280 --> 00:12:51,221
it around tasks, right? Some people like to think of things in terms of what they're doing at the

189
00:12:51,221 --> 00:12:56,562
moment, so you could have a bunch of scripts that are helpful for when you're prototyping,

190
00:12:56,562 --> 00:13:03,623
or when you're building levels, or animating, and this might have a bit more repetition of

191
00:13:03,623 --> 00:13:04,763
the types of things.

192
00:13:07,175 --> 00:13:14,301
way to do it. You could organize it around the game structure that I mentioned earlier, right? So the

193
00:13:14,301 --> 00:13:20,426
game pieces, core loop, meta loop, etc. If that helps you. That definitely helps me, like, identify

194
00:13:20,426 --> 00:13:26,350
a lot of these things, but it's not necessarily my favorite way to organize things because it's

195
00:13:26,350 --> 00:13:31,454
kind of hard for me to search. And then you could organize this around type. I don't necessarily

196
00:13:31,454 --> 00:13:35,858
recommend this because, like, you know, it's like, oh,

197
00:13:36,640 --> 00:13:40,102
what is a manager, what is a controller,

198
00:13:40,102 --> 00:13:42,323
is kind of, can be arbitrary.

199
00:13:42,323 --> 00:13:47,405
So I don't think it's a very intuitive way to do things.

200
00:13:47,405 --> 00:13:49,166
But if this makes sense for you,

201
00:13:49,166 --> 00:13:52,207
that's a potential option.

202
00:13:52,207 --> 00:13:55,529
So, time for some examples.

203
00:13:55,529 --> 00:14:00,371
Okay, good, I'm doing great on time.

204
00:14:00,371 --> 00:14:00,411
So,

205
00:14:02,324 --> 00:14:06,527
I'm here, I'm going to start talking about MidAutumn, which is a game I'm working on right now.

206
00:14:06,527 --> 00:14:14,572
I'm going to use that as some specific examples of how I make use of my code library.

207
00:14:14,572 --> 00:14:20,276
So, MidAutumn, it's a roguelite about blasting evil spirits,

208
00:14:20,276 --> 00:14:24,018
and it has a persistent narrative about Asian diaspora culture.

209
00:14:25,679 --> 00:14:28,400
If you're interested in the game, you can follow me on Twitter.

210
00:14:28,400 --> 00:14:33,443
We're also having a Kickstarter related to this year, and you can use that link to get

211
00:14:33,443 --> 00:14:35,584
to it.

212
00:14:35,584 --> 00:14:37,545
MidAutumn underscore KS.

213
00:14:37,545 --> 00:14:42,527
I realize it's underlined, so I guess the underscore isn't obvious.

214
00:14:42,527 --> 00:14:44,928
So example number one, right?

215
00:14:44,928 --> 00:14:51,871
Let's see how I used a sound effects controller, and I made it reusable between projects.

216
00:14:52,587 --> 00:14:57,329
So I'm going to talk about a project that I was working on before mid-autumn called

217
00:14:57,329 --> 00:15:03,812
Black Current, which is just this little puzzle RPG game that I had.

218
00:15:04,480 --> 00:15:12,623
and I had a sound effects controller in it that plays, you know, sound effects when I need to.

219
00:15:12,623 --> 00:15:19,025
And this script is basically just a list of audio clips. It has a couple basic methods so,

220
00:15:19,025 --> 00:15:23,887
you know, it can play an audio clip, I can set the volume or the pitch.

221
00:15:23,887 --> 00:15:30,569
It also had a couple very specific methods that's like play a random footstep or play a random blip

222
00:15:30,569 --> 00:15:31,110
dialogue.

223
00:15:31,950 --> 00:15:34,371
or play a random attack sound.

224
00:15:34,371 --> 00:15:35,252
It was also a singleton.

225
00:15:35,252 --> 00:15:39,914
And I want to make a quick aside to talk about singletons.

226
00:15:39,914 --> 00:15:43,717
It's basically, I can't go into it in this talk,

227
00:15:43,717 --> 00:15:49,160
but it's a class that you make that's globally accessible

228
00:15:49,160 --> 00:15:51,381
and there's only one instance of it.

229
00:15:51,381 --> 00:15:54,203
And what's really great about singletons

230
00:15:54,203 --> 00:15:58,925
is that you can toss it into a project.

231
00:15:59,346 --> 00:16:04,034
and all of your other scripts can just reference it right away.

232
00:16:04,034 --> 00:16:10,124
So yeah, if you need something that's easily accessible for a lot of different scripts,

233
00:16:10,124 --> 00:16:12,888
it only needs to exist once. It doesn't need a lot of setup.

234
00:16:14,152 --> 00:16:19,797
really, really useful. And then a warning up top, you probably don't want anything or most things

235
00:16:19,797 --> 00:16:24,401
in your code library to reference different scripts, singletons included, because then you

236
00:16:24,401 --> 00:16:29,765
can't just toss it into your project. But I definitely recommend reading up on these if

237
00:16:29,765 --> 00:16:37,672
you're interested in making things kind of easier for yourself. So anyway, yeah, so we have the

238
00:16:37,672 --> 00:16:39,994
singleton, we have the sound effects controller, so...

239
00:16:43,527 --> 00:16:47,651
Let's see, what did I do here?

240
00:16:47,651 --> 00:16:52,335
This is, yeah, so this is just an overview of the same scripts

241
00:16:52,335 --> 00:16:53,196
here.

242
00:16:53,196 --> 00:16:56,639
So again, list of audio clips.

243
00:16:56,639 --> 00:17:01,924
Here's some examples of how the methods might work.

244
00:17:01,924 --> 00:17:04,127
So I would just write play, and I'd

245
00:17:04,127 --> 00:17:06,509
have the type of the sound effect,

246
00:17:06,509 --> 00:17:07,770
or I'd play a random footstep.

247
00:17:08,397 --> 00:17:12,959
And this is what I did to generalize it, right?

248
00:17:12,959 --> 00:17:15,119
So it's still very similar, you know,

249
00:17:15,119 --> 00:17:17,400
I still have a list of audio clips,

250
00:17:17,400 --> 00:17:20,681
still have that basic play method.

251
00:17:20,681 --> 00:17:24,842
I added a couple things that I might want

252
00:17:24,842 --> 00:17:26,323
in other projects.

253
00:17:27,862 --> 00:17:30,623
just based on what I thought might be useful.

254
00:17:30,623 --> 00:17:32,423
So like you can change the pitch,

255
00:17:32,423 --> 00:17:34,644
but you can also change the pitch across semitones.

256
00:17:34,644 --> 00:17:38,025
You can also, it also takes a custom audio clip.

257
00:17:38,025 --> 00:17:40,466
So in the old one, you know, I had to add this.

258
00:17:40,466 --> 00:17:46,769
I basically, every time I wanted to add a sound effect,

259
00:17:46,769 --> 00:17:48,950
I had to add to this list of audio clips.

260
00:17:48,950 --> 00:17:50,070
And that.

261
00:17:51,073 --> 00:17:57,497
um be kind of cumbersome if you're tossing it into a project so now I can do that or you know

262
00:17:57,497 --> 00:18:01,780
if I have another script that has a specific audio clip I can just like

263
00:18:02,663 --> 00:18:09,188
use that as a reference and play that. And then I got rid of all of these specific play random

264
00:18:09,188 --> 00:18:13,973
footsteps, play random dialogue blips, because I didn't know if my game was going to have footsteps

265
00:18:13,973 --> 00:18:21,199
or dialogue or attack. I don't know. So it's turned into this kind of more general play random method.

266
00:18:21,919 --> 00:18:26,322
that just gets fed a list of audio clips.

267
00:18:26,322 --> 00:18:28,683
So now if I have my character controller,

268
00:18:28,683 --> 00:18:30,584
it can have a list of footsteps in it

269
00:18:30,584 --> 00:18:32,705
and just send it to the sound effects controller

270
00:18:32,705 --> 00:18:35,307
with that list and play a random one.

271
00:18:35,307 --> 00:18:38,649
And that's kind of the main idea here

272
00:18:38,649 --> 00:18:41,490
when you're generalizing these scripts,

273
00:18:41,490 --> 00:18:46,533
look for these methods or things that are,

274
00:18:46,533 --> 00:18:48,534
that have assumptions about the type of project

275
00:18:48,534 --> 00:18:49,395
you're making.

276
00:18:49,395 --> 00:18:50,395
And...

277
00:18:51,014 --> 00:18:59,103
take that out, right, if that's helpful. So let's see. Here is, you know, another example of how

278
00:18:59,103 --> 00:19:08,234
these methods work. So you can still do like play, you know, and say the type of sound effect that

279
00:19:08,234 --> 00:19:10,336
you want to play, or you can...

280
00:19:11,034 --> 00:19:17,457
you know, play random, give them, right, the list of footsteps from your player class.

281
00:19:17,457 --> 00:19:23,680
You can also play the player's attack sound, like, and then raise it up three

282
00:19:23,680 --> 00:19:27,482
semitones and do whatever you want with that if you want to have your game be more musical.

283
00:19:28,327 --> 00:19:36,152
So example number two, right, is going to be extending the same dialogue system for two different genres.

284
00:19:36,152 --> 00:19:41,355
So in the past example, we talked about that process of generalizing the script.

285
00:19:41,355 --> 00:19:43,036
So now we're going to start from.

286
00:19:44,112 --> 00:19:50,258
same generalizable script, right, and implement them into two projects with different needs.

287
00:19:50,258 --> 00:19:55,642
So you're going to start with a dialogue system and I'm going to use Blackcurrant in mid-autumn

288
00:19:55,642 --> 00:20:01,267
as specific examples. So in Blackcurrant I just had little speech bubbles that popped up

289
00:20:01,267 --> 00:20:06,011
above the character's head and in mid-autumn we have dialogue boxes at the bottom of the screen,

290
00:20:06,011 --> 00:20:10,956
there's a character on the side of it, and their name is also presented.

291
00:20:12,305 --> 00:20:19,428
So under the hood, these both use the exact same dialogue system, or rather the same starter point.

292
00:20:19,428 --> 00:20:27,771
So this is the generalized script, right? It's got a dialogue line, which are your lines of dialogue.

293
00:20:28,727 --> 00:20:34,390
It's technically a localized string that I use, which is set up for localization.

294
00:20:34,390 --> 00:20:37,652
But let's, for ease of purposes, let's just say it's just text.

295
00:20:37,652 --> 00:20:41,655
And then it has a reference to the speaker, your actor.

296
00:20:41,655 --> 00:20:45,798
The actor has a name, it's got a unique ID.

297
00:20:45,798 --> 00:20:53,322
I recommend having unique IDs in a lot of things, because

298
00:20:53,322 --> 00:20:55,043
every single time I make a game...

299
00:20:55,552 --> 00:20:58,454
and then I don't put unique IDs and things,

300
00:20:58,454 --> 00:21:02,478
and then I start trying to save things and reload things.

301
00:21:02,478 --> 00:21:04,019
I just go back and add IDs to things

302
00:21:04,019 --> 00:21:06,221
because I realized I needed them.

303
00:21:06,221 --> 00:21:08,003
So that's super useful.

304
00:21:08,003 --> 00:21:09,344
I'm calling that out.

305
00:21:09,344 --> 00:21:11,506
So yeah, that's your actor.

306
00:21:11,506 --> 00:21:12,527
It's basically just.

307
00:21:12,687 --> 00:21:19,112
the name is the main thing with the actor and as a reference to it. And then we have what is a story

308
00:21:19,112 --> 00:21:24,316
beat, right? So like this is, you know, hard to name, but it's called a story beat because it's

309
00:21:24,316 --> 00:21:32,342
just that like kind of segment of story. And it's just a list of dialogue lines, right? So your

310
00:21:32,342 --> 00:21:37,405
lines are your individual things in the conversation and your story beat is just that list of it.

311
00:21:37,405 --> 00:21:40,948
And it also has a unique ID because again, that's super helpful.

312
00:21:42,420 --> 00:21:46,423
So for Black Current, these were the constraints, right?

313
00:21:46,423 --> 00:21:51,087
The dialogue is occurring kind of parallel to gameplay at times.

314
00:21:51,087 --> 00:21:56,651
So sometimes you'll be walking around and a speech bubble will appear.

315
00:21:56,651 --> 00:21:59,193
All of the dialogue events are fully authored.

316
00:21:59,193 --> 00:22:02,436
So that means I've gone in and I've written every single.

317
00:22:02,755 --> 00:22:08,498
thing and they appear linearly in order as I expect them. The game has 3D characters, they

318
00:22:08,498 --> 00:22:15,921
move, they have animations, and the speech bubbles specifically appear over the character who is

319
00:22:15,921 --> 00:22:24,284
speaking. And I think they're also tinted based on which character is speaking. So this is what I

320
00:22:24,524 --> 00:22:30,669
did to those three generalized scripts to make it work for BlackKarin.

321
00:22:30,669 --> 00:22:38,455
So you can see that I, if we go and compare this, this actor script is now completely gone.

322
00:22:38,455 --> 00:22:43,760
And it's been replaced by a character data script, which was just a more robust

323
00:22:43,760 --> 00:22:47,022
thing that I already had for the characters.

324
00:22:47,022 --> 00:22:52,967
The dialogue line now has a reference to the character data instead of the actor.

325
00:22:53,484 --> 00:22:57,348
It also added a thing for animation or display time, right?

326
00:22:57,348 --> 00:23:03,173
So now these dialogue lines can play an animation at the same time or they have a reference to it and

327
00:23:03,173 --> 00:23:06,697
I can control how long that line appears when that speech bubble appears

328
00:23:06,697 --> 00:23:14,465
And that character data was just this really robust script that you know, it moves the characters it

329
00:23:14,465 --> 00:23:17,168
tells the characters what they're like

330
00:23:17,699 --> 00:23:24,501
you know, abilities are, but it also already had references to where their, you know, character was

331
00:23:24,501 --> 00:23:30,763
in space, what their color was, so it just made a lot of sense to fold that in into the system.

332
00:23:30,763 --> 00:23:36,684
And then the story beat class, you know, just got a couple, like, tags, essentially, like, should

333
00:23:36,684 --> 00:23:42,806
the speech bubble advance automatically? Should it freeze the player in place? Should it make,

334
00:23:42,806 --> 00:23:46,467
like, little letter boxes come in for cutscenes?

335
00:23:47,376 --> 00:23:56,128
And it's, yeah, besides the big character data change, it's not too overwhelmingly different.

336
00:23:56,128 --> 00:24:01,555
And so for mid-autumn, right, in comparison, the dialogue

337
00:24:01,927 --> 00:24:05,448
it drives gameplay progression. So what that means is

338
00:24:05,448 --> 00:24:09,529
things will happen based on whether or not you've heard certain dialogue.

339
00:24:09,529 --> 00:24:13,851
So like you'll get different enemy spawns if you've heard a certain

340
00:24:13,851 --> 00:24:17,712
conversation or something like that.

341
00:24:18,025 --> 00:24:21,887
kind of spawn in everything from a procedural dialogue pool.

342
00:24:21,887 --> 00:24:29,169
So it's not linear. There's a random kind of chance of which conversations you're going to get.

343
00:24:29,169 --> 00:24:36,232
And unlike Blackcurrant, the dialogue box is always going to be in the same position on the screen.

344
00:24:36,232 --> 00:24:40,713
They're 2D characters. They don't really animate. And each character has a higher resolution

345
00:24:40,713 --> 00:24:46,815
portrait. So if you look at how this has changed, right, you'll see that

346
00:24:47,299 --> 00:24:53,985
In comparison to Blackcurrant, which had most of the changes in that after character data script

347
00:24:53,985 --> 00:24:59,429
to account for the three key characters, you don't need to do that for MidAutumn,

348
00:24:59,429 --> 00:25:01,631
but I needed to add a ton of stuff to the Story B class.

349
00:25:02,622 --> 00:25:04,524
and I will go through that.

350
00:25:04,524 --> 00:25:07,147
So like the dialogue line hasn't changed much.

351
00:25:07,147 --> 00:25:10,351
There's like a portrait index that's there in case you want to use

352
00:25:10,351 --> 00:25:12,013
different character portraits.

353
00:25:12,013 --> 00:25:18,300
The actors have nicknames that appear kind of underneath their their name.

354
00:25:18,300 --> 00:25:20,102
They also have an associated color.

355
00:25:20,102 --> 00:25:21,845
They also have a default location.

356
00:25:22,550 --> 00:25:29,292
So in Black Currant, I didn't have to worry about that because all of the location and where the

357
00:25:29,292 --> 00:25:34,794
character is going to be was handled by the character itself. But in MidAutumn, I need to

358
00:25:34,794 --> 00:25:38,395
place specific characters based on...

359
00:25:38,435 --> 00:25:42,736
where they're going to be for the conversation to make sense.

360
00:25:42,736 --> 00:25:44,056
So needed that.

361
00:25:44,056 --> 00:25:48,197
I also needed references to what the different portraits they

362
00:25:48,197 --> 00:25:48,697
can have.

363
00:25:48,697 --> 00:25:52,598
And then, yeah, the main meat of the change

364
00:25:52,598 --> 00:25:54,739
is in the story beat class because

365
00:25:54,739 --> 00:25:59,340
of accounting for this procedural narrative elements.

366
00:25:59,340 --> 00:26:03,501
So each story beat now has a reference to the actor,

367
00:26:03,501 --> 00:26:06,122
not the dialogue line itself because.

368
00:26:08,090 --> 00:26:15,801
Sorry, the dialogue line still has a reference to the actor, but the story beat also has it because I need to know which, um...

369
00:26:16,875 --> 00:26:22,677
basically every time a different character appears with dialogue, I have to go through

370
00:26:22,677 --> 00:26:26,619
each of the story beats that are associated with that character and then put a random one in there.

371
00:26:26,619 --> 00:26:32,501
So the story beats now also need to know which character it's associated with. They have things

372
00:26:32,501 --> 00:26:38,724
like priority, so like higher priority story beats will appear sooner than lower priority ones.

373
00:26:38,724 --> 00:26:41,645
They're associated to a location and they'll move the character to

374
00:26:41,745 --> 00:26:45,368
to that location if that's the story beat you've picked.

375
00:26:45,368 --> 00:26:48,570
They also have these last four things,

376
00:26:48,570 --> 00:26:51,973
which are like beats to unlock, beats to disable,

377
00:26:51,973 --> 00:26:54,635
prerequisite beats, concurrent beats,

378
00:26:54,635 --> 00:26:58,738
because so much of the gameplay is driven by dialogue events,

379
00:26:58,738 --> 00:27:00,159
then you need to know like,

380
00:27:00,159 --> 00:27:03,982
okay, the player's heard this conversation,

381
00:27:03,982 --> 00:27:06,644
what other conversations are now possible?

382
00:27:06,644 --> 00:27:10,066
Or what other conversations should not be possible

383
00:27:10,066 --> 00:27:11,007
because they contradict.

384
00:27:11,585 --> 00:27:17,952
the one that you just had, you know, what conversations need to already have occurred

385
00:27:17,952 --> 00:27:23,259
for you to hear this one and don't like populate it if they haven't occurred yet? And also,

386
00:27:23,259 --> 00:27:26,983
are there any conversations that should

387
00:27:27,524 --> 00:27:29,685
appear at the same time.

388
00:27:29,685 --> 00:27:33,928
So, like, an example of that is a character telling you,

389
00:27:33,928 --> 00:27:36,109
hey, you should go talk to this person,

390
00:27:36,109 --> 00:27:39,491
and then, you know, later on in the hub area,

391
00:27:39,491 --> 00:27:41,953
you'll run across that particular person

392
00:27:41,953 --> 00:27:43,834
and have a conversation with them.

393
00:27:43,834 --> 00:27:48,957
And you want both of those to be present at the same time,

394
00:27:48,957 --> 00:27:50,458
even though it's random.

395
00:27:51,275 --> 00:28:02,901
So that main kind of conclusion here is you can start from this like really simple generic starting point,

396
00:28:02,901 --> 00:28:11,184
which is purposefully right doesn't have a ton of functionality. Because I don't know what I'm going to

397
00:28:11,184 --> 00:28:17,607
actually want to do with each project yet. And then they can really, really change over the course of

398
00:28:17,607 --> 00:28:19,048
development and like

399
00:28:19,507 --> 00:28:25,772
you know, already the, this is like, you know, open to changing more, right?

400
00:28:25,772 --> 00:28:32,157
Like, I think I've added, um, things for like, like voiceover

401
00:28:32,157 --> 00:28:36,941
functionalities here. So that's also going into, um, like the actor script

402
00:28:36,941 --> 00:28:44,447
or things like that. And, and keeping your generalized scripts really simple

403
00:28:44,447 --> 00:28:47,809
makes it a lot easier to do stuff like this instead of trying to cram

404
00:28:47,809 --> 00:28:48,810
functionality into it.

405
00:28:50,049 --> 00:28:56,133
Okay, yeah, so example number three is going to be extending a generic enemy

406
00:28:56,133 --> 00:29:03,778
controller to add variety really fast, right? So in mid-autumn, sorry, voice,

407
00:29:03,778 --> 00:29:04,878
geez, in mid-autumn...

408
00:29:05,626 --> 00:29:08,887
We started with this generic enemy controller.

409
00:29:08,887 --> 00:29:12,247
It's full of virtual methods, right?

410
00:29:12,247 --> 00:29:14,408
And the reason I'm using virtual methods here

411
00:29:14,408 --> 00:29:19,029
is that they're kind of not super cumbersome to use.

412
00:29:19,029 --> 00:29:21,870
When I, let's say I wanted to make a child class, right?

413
00:29:21,870 --> 00:29:24,490
So let's say I have the enemy controller class

414
00:29:24,490 --> 00:29:26,911
and I want to make something like a fast enemy,

415
00:29:26,911 --> 00:29:29,051
and I had a virtual method called move.

416
00:29:30,382 --> 00:29:36,626
The really useful thing about virtual methods is I can change that move method to, you know,

417
00:29:36,626 --> 00:29:42,951
make sense for that new enemy type. But if I didn't want to touch it, it can have a default

418
00:29:42,951 --> 00:29:47,655
behavior that just works like all the other enemies, and I don't have to override it. So,

419
00:29:47,655 --> 00:29:52,838
like, the comparison there would be using something like an abstract class, which kind of has to

420
00:29:52,838 --> 00:29:58,443
override and make changes. So it's really useful to have

421
00:29:59,425 --> 00:30:07,270
a way of structuring these enemies where I can make them, it can modify them for their like unique

422
00:30:07,270 --> 00:30:13,133
elements and then not worry about everything else. So I'm like, okay, this enemy is going to know how

423
00:30:13,133 --> 00:30:19,296
to walk. I don't have to re-teach it how to walk every single time I make a new enemy. So starting

424
00:30:19,296 --> 00:30:25,000
with that kind of very basic generic controller, it had these kinds of methods.

425
00:30:25,161 --> 00:30:32,648
an awake method that kind of just sets up initial starting data or relationships, references,

426
00:30:32,648 --> 00:30:39,074
a setup method that kind of gives the enemy everything it needs to do to function.

427
00:30:39,074 --> 00:30:44,039
There's an on spawn method, you know, if I want to do something when it spawns for the first time,

428
00:30:44,039 --> 00:30:48,963
like, you know, like maybe some enemy like spawns and there's like an immediate explosion.

429
00:30:49,812 --> 00:30:55,316
Then there's a number of things that have to do with how the enemy behaves.

430
00:30:55,316 --> 00:31:00,000
So choose next state is like, oh, how does it, the enemy decide, am I going to

431
00:31:00,000 --> 00:31:05,484
chase after the player? Am I going to run away from the player? Am I going to go to a particular

432
00:31:05,484 --> 00:31:12,569
part of the area or something like that? Enemy behavior update is great for like,

433
00:31:12,569 --> 00:31:15,091
you know, things that need to be called essentially an update function.

434
00:31:16,207 --> 00:31:24,690
So it's like, oh, does this enemy constantly need to be tracking the player's health for whatever

435
00:31:24,690 --> 00:31:31,792
reason? Maybe that goes in the behavior update or if something needs to be calculated based

436
00:31:31,792 --> 00:31:35,093
on the player's health or something like that, right? Has an attack function.

437
00:31:35,867 --> 00:31:41,610
In mid-autumn a lot of the enemies have ranged attacks. So that's kind of like what that that

438
00:31:41,610 --> 00:31:47,133
default is as a take damage function and you know where it gets hit and there's recoil or

439
00:31:47,133 --> 00:31:51,455
has some vulnerability and there is an on die function

440
00:31:51,455 --> 00:31:55,957
So if I wanted like an enemy to explode when it died or if I wanted

441
00:31:55,957 --> 00:31:59,398
a certain dialogue event to trigger when it dies, that's what I could do

442
00:31:59,478 --> 00:32:06,604
use that for. And this is all just in the generic EnemyController that I had from my code library.

443
00:32:06,604 --> 00:32:13,589
So the first step was to add some specific functionality based on the constraints or the

444
00:32:13,589 --> 00:32:16,591
design goals that MidAutumn needed.

445
00:32:17,687 --> 00:32:23,332
If you are looking at this little gif here, you can see that when enemies attack, they

446
00:32:23,332 --> 00:32:27,876
actually have this little VFX stuff that plays right at the start of their attack.

447
00:32:27,876 --> 00:32:35,343
So enemies needed to be able to play certain VFX or particles or things like that at specific

448
00:32:35,343 --> 00:32:35,743
points.

449
00:32:35,743 --> 00:32:38,506
So I added a method that does that.

450
00:32:39,770 --> 00:32:45,574
I also didn't initially have this melee attack method here in the base enemy controller,

451
00:32:45,574 --> 00:32:50,078
but this is the really useful thing about starting with these generalized classes is

452
00:32:50,078 --> 00:32:55,803
you can have this class, you can make kind of a couple subclasses, and I was able to

453
00:32:55,803 --> 00:32:57,404
realize like, oh.

454
00:32:58,041 --> 00:33:00,702
I'm implementing this melee attack like three times.

455
00:33:00,702 --> 00:33:04,403
I'm just going to move it into the base class really quickly.

456
00:33:04,403 --> 00:33:08,044
And because the scripts are so lightweight to start with,

457
00:33:08,044 --> 00:33:11,205
that was really easy to do, especially early on.

458
00:33:11,205 --> 00:33:16,667
So all the enemies are capable of melee attacking,

459
00:33:16,667 --> 00:33:20,148
even though half of them aren't going to ever use that.

460
00:33:20,148 --> 00:33:23,389
I also added this tag system for the enemies.

461
00:33:23,389 --> 00:33:25,469
So for example, in this...

462
00:33:26,594 --> 00:33:33,040
clip right here you're seeing um these turtles with like the yellow kind of outline around them

463
00:33:33,040 --> 00:33:37,985
and so they have a shield up which means if you attack them um you're not going to damage

464
00:33:37,985 --> 00:33:45,593
you'll damage their shield but they're essentially invulnerable while that is up and I can know um

465
00:33:47,005 --> 00:33:51,087
from the player's point of view, right, that that enemy has a shield because it has a tag

466
00:33:51,087 --> 00:33:56,109
that says shielded. I can add that to any enemy I want. So I could do something where it's like,

467
00:33:56,109 --> 00:34:02,313
oh, if the player has this specific attack, maybe it has a special effect, right? If you attack a

468
00:34:02,313 --> 00:34:07,935
shielded enemy, maybe it makes the shield explode. So I can know that, you know, from just the

469
00:34:07,935 --> 00:34:10,137
enemy's properties. So that's the thing I added.

470
00:34:10,237 --> 00:34:12,718
that was necessary for this game.

471
00:34:12,718 --> 00:34:16,181
But again, if I was implementing for a different game,

472
00:34:16,181 --> 00:34:19,723
I might not need that.

473
00:34:19,723 --> 00:34:21,925
So, it's important to keep it light

474
00:34:21,925 --> 00:34:23,246
and add them later up.

475
00:34:23,246 --> 00:34:24,727
The enemies also have...

476
00:34:25,036 --> 00:34:27,878
you know, little pop-ups of text that appear when they take damage,

477
00:34:27,878 --> 00:34:30,780
that say like five, six or whatever the amount of damage they take.

478
00:34:30,780 --> 00:34:33,581
They have little health bars that update,

479
00:34:33,581 --> 00:34:37,064
and they also can sometimes trigger dialogue.

480
00:34:37,064 --> 00:34:41,166
So if I wanted them to do anything in particular when the dialogue ended,

481
00:34:41,166 --> 00:34:43,167
like use a specific attack or something,

482
00:34:43,167 --> 00:34:45,269
I added a method for that,

483
00:34:45,269 --> 00:34:48,771
which kind of ties into how everything in MidAutumn is super dialogue-driven,

484
00:34:48,771 --> 00:34:53,614
that even the enemies have like dialogue-specific methods.

485
00:34:54,377 --> 00:34:55,057
So.

486
00:34:55,448 --> 00:35:00,389
The first kind of enemy I made with this, after setting all that up, was just a simple melee

487
00:35:00,389 --> 00:35:05,690
enemy. These are our face cuddlers. They're just these little floating heads that kind of move

488
00:35:05,690 --> 00:35:12,832
slowly towards you, and then when you get too close, they'll lunge at you. So I changed the

489
00:35:12,832 --> 00:35:19,513
attack method to essentially remembering that I have this generic melee attack function.

490
00:35:19,513 --> 00:35:23,914
So when it attacks, it just uses the melee attack function instead of anything else.

491
00:35:25,094 --> 00:35:28,415
It used to be more complicated than that, but I actually simplified it more.

492
00:35:28,415 --> 00:35:33,796
And then once I made this enemy, I added two types of tags, right?

493
00:35:33,796 --> 00:35:36,777
Melee enemies and ranged enemies, because now I can differentiate between them.

494
00:35:36,777 --> 00:35:40,318
And then really quick, the second enemy I made was just a

495
00:35:40,318 --> 00:35:46,019
radial attack enemy controller.

496
00:35:46,019 --> 00:35:48,440
In reality, I made the ranged enemy.

497
00:35:49,142 --> 00:35:56,124
next probably, but this is just a thing that I did almost immediately after that,

498
00:35:56,124 --> 00:36:01,526
which was we had ranged enemies and I made one that could do kind of a circular attack

499
00:36:01,526 --> 00:36:07,769
instead of a regular ranged attack. And all I had to do was again modify that virtual attack method

500
00:36:07,769 --> 00:36:13,771
and now this enemy works. And both of these enemies, the melee and the ranged, are essentially

501
00:36:13,771 --> 00:36:17,953
the same enemy. Maybe their settings are different, maybe their health settings or their speed or

502
00:36:17,953 --> 00:36:18,313
things.

503
00:36:18,875 --> 00:36:26,997
are different, but the actual script, besides from the attack method, are functionally identical.

504
00:36:26,997 --> 00:36:31,198
Immediately after that, I was able to add shielded enemies, which I mentioned earlier.

505
00:36:31,198 --> 00:36:39,361
So these, obviously, from the length of the text here, took a little bit more

506
00:36:40,983 --> 00:36:47,326
modifications to the original script to add shields, right? So, the setup method changes because I need

507
00:36:47,326 --> 00:36:51,868
to set up the shield. The update method because I need to check, oh, is the shield up or down,

508
00:36:51,868 --> 00:36:56,970
or what's the shield health, or is something happening based on that? And the take damage

509
00:36:56,970 --> 00:37:02,392
method obviously is the main one that's changed, where when you take damage, instead of just

510
00:37:02,392 --> 00:37:07,695
taking damage, it just checks, oh, is your shield active? And if so, you don't take damage.

511
00:37:09,830 --> 00:37:15,835
added that enemy tag for shielded so that the player can check or other things like the game

512
00:37:15,835 --> 00:37:20,478
manager can also check for shielded enemies or things like that if I ever wanted to. And I added

513
00:37:20,478 --> 00:37:27,144
two new virtual methods. And I think this is where that level of variety starts to snowball,

514
00:37:27,144 --> 00:37:28,065
is when you start adding

515
00:37:29,003 --> 00:37:33,647
more virtual methods in your child class, right? So now I added a method that says take shield

516
00:37:33,647 --> 00:37:39,111
damage. So when your shield takes damage, this is what can happen. It might not even take damage

517
00:37:39,111 --> 00:37:45,177
if I don't want it to, right? And on shield death, if the player ever, you know, does enough damage

518
00:37:45,177 --> 00:37:49,500
to your shield and it drops, does anything specific happen, right? You could have the

519
00:37:49,500 --> 00:37:54,084
shield explode when it takes damage or something like that. So...

520
00:37:55,214 --> 00:38:00,736
The really cool thing about this is now I have this basic shield enemy and that's how they all work,

521
00:38:00,736 --> 00:38:05,197
but I could easily make a harder version of a shielded enemy for later on in the game,

522
00:38:05,197 --> 00:38:11,079
or like a variant that kind of builds off of these and is essentially a shield enemy,

523
00:38:11,079 --> 00:38:15,900
but with a couple twists. Really easy to do that, I would just override the shield damage or the

524
00:38:15,900 --> 00:38:21,082
shield death method or something else. And once I had these first three,

525
00:38:21,643 --> 00:38:28,712
then I moved on to making a quick boss enemy. It was really simple to do this.

526
00:38:28,712 --> 00:38:36,762
The really cool thing about this is you can make bosses really unique really quickly when you have

527
00:38:36,762 --> 00:38:39,285
all of these virtual methods to modify as you want.

528
00:38:39,965 --> 00:38:45,949
I modified its choose next behavior method because this is a boss enemy. It has a more

529
00:38:45,949 --> 00:38:54,555
complicated logic behind why it does things. It has some unique attacks. It has some special

530
00:38:54,555 --> 00:38:59,078
logic with its take damage. For example, once it takes half of its damage,

531
00:38:59,078 --> 00:39:03,441
it enters a rage state or it triggers its second phase of attacks.

532
00:39:03,661 --> 00:39:10,223
And then on die, I basically just triggered like a dialogue event so that, you know,

533
00:39:10,223 --> 00:39:15,325
there's some cool narrative stuff happens when the boss dies. And then I added an enemy tag for bosses,

534
00:39:15,325 --> 00:39:22,287
which is basically being used so that, oh, if you go into a room and there's a boss, an enemy with a boss tag,

535
00:39:22,287 --> 00:39:26,148
a special health bar is going to appear over it or something like that.

536
00:39:26,148 --> 00:39:26,208
So.

537
00:39:27,419 --> 00:39:32,202
real quick, right? Four different types of enemies. And then I made a second boss,

538
00:39:32,202 --> 00:39:41,727
because why not? This is very similar. If you look at this one, the comparison here

539
00:39:41,727 --> 00:39:50,111
is that I didn't need to... Actually, I probably did actually change its attack method. I probably

540
00:39:50,111 --> 00:39:55,954
just didn't include it. But this boss has a lot more narrative kind of

541
00:39:56,642 --> 00:40:02,744
motivation. So it has like some unique setup elements, again, some unique AI and why it

542
00:40:02,744 --> 00:40:11,688
attacks you at certain times. This boss, I think what I ended up doing was when it takes damage,

543
00:40:11,688 --> 00:40:13,328
it builds up like a resource.

544
00:40:14,122 --> 00:40:17,285
And if it has enough of that resource, it will use its more powerful attacks.

545
00:40:17,285 --> 00:40:21,771
So really quickly, it was able to just implement kind of a rubber banding

546
00:40:21,771 --> 00:40:25,655
mechanic, where if you're doing really well against this boss, he's doing

547
00:40:25,655 --> 00:40:26,696
more damaging attacks.

548
00:40:26,696 --> 00:40:29,019
And if you're not, maybe he's going to avoid those.

549
00:40:29,019 --> 00:40:33,825
And then again, triggering some special dialogue when this boss is defeated.

550
00:40:35,542 --> 00:40:38,824
And then, yeah, here's like a completely new type of enemy, right?

551
00:40:38,824 --> 00:40:42,807
After making those two bosses and three enemies, I was like,

552
00:40:42,807 --> 00:40:50,512
kind of thinking about what is a new kind of twist that we could do for like a second area.

553
00:40:50,512 --> 00:40:54,755
And so this is an evolving enemy that starts from this tiny little mushroom guy,

554
00:40:54,755 --> 00:40:58,217
and they kind of hulk up into this bigger mushroom guy.

555
00:40:59,063 --> 00:41:05,471
And, yes, it still, like, surprisingly didn't take a ton of work to make, right?

556
00:41:05,471 --> 00:41:12,420
Like, I changed how the behavior update works because it just has a check for if the enemy

557
00:41:12,420 --> 00:41:14,643
is evolved or not, and it does a...

558
00:41:15,233 --> 00:41:21,115
the typical behavior if it's evolved. And if it's not evolved, it's going to be kind of trying to

559
00:41:21,115 --> 00:41:27,017
evolve, which means it's going to go look for little resources to eat and get enough of those

560
00:41:27,017 --> 00:41:35,059
to evolve. And then its attack, again, is different because it just checks, you know, if it's evolved,

561
00:41:35,059 --> 00:41:38,600
do this better attack. If it's not evolved, do this weaker, not as good attack.

562
00:41:39,179 --> 00:41:45,560
um added a new enemy tag for evolving so I can check if there's any of those and new virtual

563
00:41:45,560 --> 00:41:51,081
methods here for what happens when you evolve and what happens when you devolve which I haven't used

564
00:41:51,081 --> 00:41:55,722
yet actually in the game but it's there in case I want to have something where like oh the player

565
00:41:55,722 --> 00:42:03,904
does a ton of damage and the the enemy devolves um and then let's see yeah this next enemy I think

566
00:42:03,904 --> 00:42:04,964
this is the last enemy

567
00:42:05,605 --> 00:42:08,267
that I've included in this talk,

568
00:42:08,267 --> 00:42:10,968
it was just a toxic enemy controller.

569
00:42:10,968 --> 00:42:14,609
And this enemy just kind of passively

570
00:42:14,609 --> 00:42:18,111
puts out kind of damaging particles if you get near them.

571
00:42:18,111 --> 00:42:21,453
So just, yeah, I needed to set that up in the awake method,

572
00:42:21,453 --> 00:42:24,354
update that and modify its attack,

573
00:42:24,354 --> 00:42:25,795
added a new enemy tag.

574
00:42:25,795 --> 00:42:28,316
And really quickly, this, you know,

575
00:42:28,316 --> 00:42:30,277
each time I worked on this, you know,

576
00:42:30,277 --> 00:42:31,637
it took me maybe like,

577
00:42:32,442 --> 00:42:36,623
an hour to make each different enemy type. And a lot of that was fiddling, being like,

578
00:42:36,623 --> 00:42:44,326
what do I want? So the really useful thing with all of these, using these kind of pre-written

579
00:42:44,326 --> 00:42:48,547
code templates, and then being able to make this is when I wanted a new enemy, it was really quick

580
00:42:48,547 --> 00:42:55,529
to just pop in that enemy controller script, set it up, and then just start focusing on variety

581
00:42:55,529 --> 00:42:58,310
and what I actually wanted the design to be.

582
00:42:59,118 --> 00:43:05,383
And when you set this up in a way that helps you, it's like you just have all these levers you can

583
00:43:05,383 --> 00:43:13,430
kind of pull to make things work more quickly and effectively. And so I was able to focus a

584
00:43:13,430 --> 00:43:20,515
lot more on that. So yeah, let's just kind of to summarize everything, how did reusing all this

585
00:43:20,515 --> 00:43:26,180
code, taking a code template and kind of throwing it into MidAuto actually help while I was working

586
00:43:26,180 --> 00:43:28,442
on the prototype, for example. So.

587
00:43:29,916 --> 00:43:36,818
It was really a lot faster than it would have been.

588
00:43:36,818 --> 00:43:39,418
I was able to work on this on my own project, right,

589
00:43:39,418 --> 00:43:45,280
essentially, while still maintaining my main

590
00:43:45,280 --> 00:43:47,280
kind of living and games, which is working

591
00:43:47,280 --> 00:43:49,501
as a contract freelancer.

592
00:43:49,501 --> 00:43:52,341
And when I'm working on MidAutumn,

593
00:43:52,341 --> 00:43:55,522
I don't make any money off that, so I still need to.

594
00:43:56,283 --> 00:44:01,566
do other work. So I don't have a ton of time to work on this when I'm working on it. It's usually

595
00:44:01,566 --> 00:44:08,110
like a couple hours to four hours, maybe like a week. Another thing that happened is, right,

596
00:44:08,110 --> 00:44:13,933
I mentioned Blackcurrant, which is just another prototype I made back, you know, last year or

597
00:44:13,933 --> 00:44:14,913
two years ago or something.

598
00:44:15,477 --> 00:44:22,823
And when it takes you less time to prototype, you don't have to sink as much investment into each

599
00:44:22,823 --> 00:44:30,089
project that you work on. So it was real easy for me to just be like, I'm gonna stop working on that

600
00:44:30,089 --> 00:44:35,594
one, I'm gonna work on this one, or I'm gonna move on to another one. I think when you take

601
00:44:35,594 --> 00:44:40,718
more time to prototype things or to test things out, there's a lot more

602
00:44:41,523 --> 00:44:45,506
opportunity for sunk cost fallacy to kind of sink in and then for you to feel like,

603
00:44:45,506 --> 00:44:51,552
oh, I've spent so much time on this. I've got to keep like doing something with it.

604
00:44:51,552 --> 00:44:59,619
So that's like my main takeaway from this is making things easier, making it take less time

605
00:44:59,619 --> 00:45:08,447
to do things, makes it easier for me to throw things away, for me to follow different directions.

606
00:45:08,447 --> 00:45:08,507
And

607
00:45:08,827 --> 00:45:11,329
Ultimately, putting the code library in

608
00:45:11,329 --> 00:45:14,831
made the Unity engine, which is what I was working in,

609
00:45:14,831 --> 00:45:16,212
more comfortable to work in.

610
00:45:16,212 --> 00:45:20,735
And I think that's the main thing we should be trying to do.

611
00:45:20,735 --> 00:45:25,477
Especially if you're a solo developer, you don't have a ton of support.

612
00:45:25,477 --> 00:45:34,723
When you're just working in your room, you're not in a space with other people sometimes.

613
00:45:35,523 --> 00:45:41,469
for me as a freelancer, I'm going to have to start a project, ramp up and finish it

614
00:45:41,469 --> 00:45:45,193
within a week, which is incredibly challenging sometimes.

615
00:45:45,193 --> 00:45:53,582
So I spend as much time making sure that my work environment is as comfortable and supporting

616
00:45:53,582 --> 00:45:56,525
my kind of productivity as possible.

617
00:45:58,017 --> 00:46:02,798
Yeah, just not having to think about, OK, how am I going to implement this

618
00:46:02,798 --> 00:46:07,299
and spending more time on, OK, this is what I want to do

619
00:46:07,299 --> 00:46:07,979
was super helpful.

620
00:46:07,979 --> 00:46:12,060
Another way it helped was in shareability.

621
00:46:12,060 --> 00:46:14,581
So I was working on the mid-autumn prototype.

622
00:46:14,581 --> 00:46:17,361
I probably started it on last end of last year.

623
00:46:17,361 --> 00:46:21,862
And after about a week or two, the builds were essentially self-playable,

624
00:46:21,862 --> 00:46:25,103
like they weren't necessarily fun or good or anything like that.

625
00:46:25,630 --> 00:46:33,832
But, you know, I tossed in menus, I tossed in saving, you know, which is not usually what

626
00:46:33,832 --> 00:46:40,873
you have when you're making a prototype. But what that meant was that, you know,

627
00:46:40,873 --> 00:46:46,595
I had all that kind of core loop in and it was a much more functioning prototype than

628
00:46:47,358 --> 00:46:51,580
I otherwise would have been because I was reusing a lot of this code that I already had.

629
00:46:51,580 --> 00:46:58,282
I had more time to work on debug features. So like if when I shared the build of the people

630
00:46:58,282 --> 00:47:04,624
for the first time, it had like a menu in the top right corner so you could just like skip

631
00:47:04,624 --> 00:47:10,326
a particular room of enemies or you could play whatever dialogue event you wanted to kind of

632
00:47:10,326 --> 00:47:13,508
break the game and get into a particular state.

633
00:47:15,363 --> 00:47:20,811
And yeah, and you could kind of switch between the hub and the dungeon, you know, at any point.

634
00:47:20,811 --> 00:47:21,152
And.

635
00:47:22,192 --> 00:47:27,133
Normally, if you're working on a prototype, you don't always have time to make those debug features.

636
00:47:27,133 --> 00:47:30,753
And it's really difficult to justify spending time on that.

637
00:47:30,753 --> 00:47:33,514
But, you know, having that, having the menus, having saving,

638
00:47:33,514 --> 00:47:35,534
meant I could just send a build to someone.

639
00:47:35,534 --> 00:47:39,015
So when I started, you know, collaborating with other people,

640
00:47:39,015 --> 00:47:42,336
or when I started emailing people about the game or things like that,

641
00:47:42,336 --> 00:47:42,976
I could just send a build.

642
00:47:42,976 --> 00:47:46,097
I didn't need a ton of instruction.

643
00:47:46,688 --> 00:47:51,071
I could pretty reasonably expect that they'd be able to play it.

644
00:47:51,071 --> 00:47:55,273
So that's like super, super helpful when you're,

645
00:47:55,273 --> 00:47:59,396
when you, when you're, especially this past year, when you're working completely remote,

646
00:47:59,396 --> 00:48:06,601
when you don't have a ton of, um, any means really to sit next to someone and walk them

647
00:48:06,601 --> 00:48:14,466
through what you're working on, um, being able to add that extra functionality quickly, super helpful.

648
00:48:14,466 --> 00:48:15,266
Um, another thing that.

649
00:48:16,261 --> 00:48:22,739
code libraries have really allowed me to do when my own projects are like on contract is to target accessibility.

650
00:48:22,739 --> 00:48:24,383
You know, a lot of the time.

651
00:48:25,508 --> 00:48:31,190
accessibility features don't get implemented because people aren't thinking about them

652
00:48:31,190 --> 00:48:38,672
from the start of a project. But when you are kind of putting together a code library, you can

653
00:48:38,672 --> 00:48:46,194
make sure that you have at least like starting points for a lot of these features. So like

654
00:48:46,534 --> 00:48:50,357
controller remapping, right? That was something I worked on on a past project and when I was

655
00:48:50,357 --> 00:48:55,500
working on Minitom, I just tossed that in into the settings menu and, you know, it has the same

656
00:48:55,500 --> 00:49:00,724
bugs that it had from the previous project, perhaps, but it's there and I can continue

657
00:49:00,724 --> 00:49:06,708
working on it. You know, have a setup to help colorblind testing, making sure that that's

658
00:49:06,708 --> 00:49:12,972
working, you know, high contrast mode, and just more types of settings because

659
00:49:13,933 --> 00:49:20,297
You know, once I've implemented that setting once for most games, that's that's pretty much how it works.

660
00:49:20,297 --> 00:49:29,282
Right. Volume isn't going to change that much across games or your resolution or things like that, unless you're making a very specific game.

661
00:49:29,282 --> 00:49:30,583
And then that's.

662
00:49:31,104 --> 00:49:35,389
the really helpful thing is everything that's specific,

663
00:49:35,389 --> 00:49:37,851
you get more time to work on and everything that's not,

664
00:49:37,851 --> 00:49:41,375
you can reuse the stuff that you want to use.

665
00:49:41,375 --> 00:49:44,899
And the other thing that was really helpful, right?

666
00:49:44,899 --> 00:49:47,202
Like is exactly that, right?

667
00:49:47,202 --> 00:49:50,625
Increasing your scope as in spending more time

668
00:49:50,625 --> 00:49:51,887
on those unique things.

669
00:49:53,701 --> 00:49:58,764
I'm sure I mentioned a bunch of times that I got to spend more time on design, art, narrative,

670
00:49:58,764 --> 00:50:03,787
less worrying about how I'm going to do things. I was able to experiment a lot on like high

671
00:50:03,787 --> 00:50:09,791
priority features. So, for example, we spent a lot of time on our combat system, how that works.

672
00:50:09,791 --> 00:50:14,854
Should it be more straightforward? Should it have kind of this more

673
00:50:14,854 --> 00:50:20,338
unique idiosyncratic way of working? And if I wasn't...

674
00:50:21,194 --> 00:50:28,862
solid about all the other stuff that had to happen, like menus and moving the character

675
00:50:28,862 --> 00:50:32,867
and things like that, I absolutely wouldn't have experimented on that.

676
00:50:32,867 --> 00:50:38,633
I would have picked a more straightforward, easy-to-do option.

677
00:50:39,145 --> 00:50:45,887
that would have been that. Also, you know, using pre-existing tools, right, like dev tools take an

678
00:50:45,887 --> 00:50:52,708
incredibly long time to actually be useful. And if you've made a couple in previous projects and you

679
00:50:52,708 --> 00:50:58,070
and you have them ready to go, they can really speed up how long you're able to implement

680
00:50:58,070 --> 00:51:00,370
things. In mid-autumn, we had like in the prototype.

681
00:51:00,911 --> 00:51:04,314
like 200 different narrative events to really test the

682
00:51:04,314 --> 00:51:10,401
whether the procedural narrative is working. So which meant I had to implement 200 narrative events and

683
00:51:10,401 --> 00:51:12,703
thankfully I had

684
00:51:13,664 --> 00:51:24,330
a tool that helped import a ton of like text into the format for my dialogue system. So

685
00:51:24,330 --> 00:51:29,994
that really sped it up, you know, by taking something that would have taken two weeks

686
00:51:29,994 --> 00:51:35,317
and scrunching that down into a day or two is a huge win when you're, you know, when you have like,

687
00:51:35,317 --> 00:51:40,440
you know, really a month to work on a prototype sometimes, if at all. So.

688
00:51:41,245 --> 00:51:48,208
The other last thing is that having things like these code libraries makes it a lot easier for

689
00:51:48,208 --> 00:51:54,390
you to help out with, you know, your friends or colleagues. The games industry is a very small

690
00:51:54,390 --> 00:52:01,153
industry and it's really, really great to be able to share things with each other

691
00:52:01,153 --> 00:52:04,014
if you have something that works.

692
00:52:04,182 --> 00:52:09,383
you know, I put together a sample library for people to check out here as well.

693
00:52:09,383 --> 00:52:14,864
You can access it at bit.ly slash gdc code library.

694
00:52:14,864 --> 00:52:21,726
And yeah, like if you didn't, if I didn't have a code library set up already,

695
00:52:21,726 --> 00:52:24,846
then when people ask me like, hey, how did you do this?

696
00:52:24,846 --> 00:52:28,927
Or how did you do this sample or this particular feature?

697
00:52:28,927 --> 00:52:30,168
Could you help me out?

698
00:52:30,168 --> 00:52:33,548
I would have to go look at my code and kind of make it.

699
00:52:33,829 --> 00:52:39,634
like actually shareable before sending it out, but instead I can really quickly be

700
00:52:39,634 --> 00:52:44,940
like, here is this kind of generic version of what I started with. If you

701
00:52:44,940 --> 00:52:52,607
want more specifics, then we can like talk more, and that's super helpful. And

702
00:52:52,607 --> 00:52:54,389
also, like...

703
00:52:55,259 --> 00:53:01,622
When I'm on other projects, right, when I'm doing the primary, the main part of my career,

704
00:53:01,622 --> 00:53:08,186
which is kind of working on contracts, I have my own kind of library of resources to work to

705
00:53:08,186 --> 00:53:12,568
reference when I'm working on the project. So, you know, let's say I have to build a dialogue

706
00:53:12,568 --> 00:53:17,250
system for a different studio and they have a number of constraints.

707
00:53:17,970 --> 00:53:23,713
or they've partially implemented it, I can kind of reference my own work to be like,

708
00:53:23,713 --> 00:53:28,995
oh, maybe if, you know, I did it this way or modified it here, that would help with some

709
00:53:28,995 --> 00:53:36,718
of the issues that that particular studio or team is having. And it makes you more able to

710
00:53:36,718 --> 00:53:43,661
be competent, more able to be timely on the things you're working on. And yeah, it just makes you a

711
00:53:43,661 --> 00:53:45,882
better collaborative member of teams, I think.

712
00:53:46,638 --> 00:53:57,043
So I want to say right at the end that, you know, I think as game developers, we should be avoiding

713
00:53:57,043 --> 00:54:02,806
like reinventing the wheel and making things from scratch as, like I said, at the top of the talk.

714
00:54:02,806 --> 00:54:09,629
And instead, you know, if you want to make your game just 100% wheel like some crazy biblical

715
00:54:09,629 --> 00:54:14,291
angel, do that. You know, like if you can get away with that, I think that that's the way that

716
00:54:14,291 --> 00:54:15,351
people should be making games.

717
00:54:15,916 --> 00:54:22,060
My favorite moments in games is when people are like,

718
00:54:22,060 --> 00:54:26,223
oh, I never realized that was the same exact thing

719
00:54:26,223 --> 00:54:27,104
in that previous game,

720
00:54:27,104 --> 00:54:30,967
but it's just been reused and recontextualized.

721
00:54:30,967 --> 00:54:33,809
And I think that, you know,

722
00:54:33,809 --> 00:54:37,211
code libraries are the way that I get around that

723
00:54:37,211 --> 00:54:40,353
and do that.

724
00:54:40,353 --> 00:54:42,595
So that, well, I totally forgot I made this slide, but.

725
00:54:44,902 --> 00:54:51,264
As to tie everything up, imagine that a game is now some assemblage of wheels and also sharks

726
00:54:51,264 --> 00:54:57,105
and everything like that. And to conclude, games are super messy. They're already really hard to

727
00:54:57,105 --> 00:55:04,647
make. You know, do the things that help you get through the end of each workday and make yourself

728
00:55:04,647 --> 00:55:09,128
comfortable to work on them. I hope that this

729
00:55:10,113 --> 00:55:15,495
kind of concept of using code libraries and using pre-prepared stuff to apply to your

730
00:55:15,495 --> 00:55:26,499
future projects helps you out in terms of making your future projects seem less intimidating.

731
00:55:26,499 --> 00:55:32,701
And just remember, like, that if you've made something before.

732
00:55:33,749 --> 00:55:41,034
then you can totally do it again. And what's more, your past self is going to be able to help you

733
00:55:41,034 --> 00:55:48,080
in more ways than you can imagine. So, you know, keep hold of your work, refer back to it,

734
00:55:48,080 --> 00:55:55,825
and organize it in a way that helps you. All right, that is my talk. Thanks so much for listening.

735
00:55:55,825 --> 00:56:00,709
Once again, I'm Shraveen. If you have any follow-up questions for me or

736
00:56:02,854 --> 00:56:08,300
you want to follow me on Twitter or you want to learn more about MidAutumn,

737
00:56:08,300 --> 00:56:13,066
please do so. My Twitter handle is right there on the slide and thank you so much.

