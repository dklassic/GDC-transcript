1
00:00:04,355 --> 00:00:06,697
Hello and welcome.

2
00:00:08,278 --> 00:00:09,299
My name is Mikkel.

3
00:00:09,600 --> 00:00:10,841
I'm a graphics programmer.

4
00:00:11,121 --> 00:00:14,444
This is Mikkel who will do the second half of the presentation.

5
00:00:15,985 --> 00:00:19,589
Mikkel is a very technical artist, as you'll see.

6
00:00:20,509 --> 00:00:24,953
We both work at a company called Playdead that once upon a time did a game called Limbo.

7
00:00:25,774 --> 00:00:29,798
And neither of us worked on Limbo, but we have worked on the follow-up title, Inside,

8
00:00:30,319 --> 00:00:37,246
that just shipped in June on Xbox, in July on PC, and will ship next week on PlayStation 4.

9
00:00:38,467 --> 00:00:40,089
And that's what we're going to be talking about.

10
00:00:40,389 --> 00:00:42,932
More specifically, we'll be talking about the rendering of Inside.

11
00:00:43,653 --> 00:00:47,476
And we sort of picked some topics that we thought would be relevant to other games,

12
00:00:47,537 --> 00:00:48,397
and then we thought that...

13
00:00:49,677 --> 00:00:56,067
that you guys could steal and implement in your own games the same as we've stolen tons of stuff from other presentations.

14
00:00:56,748 --> 00:01:03,238
So, I'll show briefly a trailer so we sort of know what the game that we'll be talking about looks like.

15
00:02:24,041 --> 00:02:26,163
Right, so now that the game's actually out,

16
00:02:26,263 --> 00:02:27,845
just out of my personal curiosity,

17
00:02:27,885 --> 00:02:29,087
how many did actually play the game?

18
00:02:30,449 --> 00:02:32,211
Excellent, it's like half of my fan base.

19
00:02:33,032 --> 00:02:33,773
All right.

20
00:02:35,084 --> 00:02:38,666
So as you can see, and as many of you have already experienced,

21
00:02:39,387 --> 00:02:40,588
it's a 2 and 1 half D game.

22
00:02:41,328 --> 00:02:44,070
It's a puzzle platformer, and it's

23
00:02:44,110 --> 00:02:45,631
made with a fixed perspective.

24
00:02:45,651 --> 00:02:46,851
So the camera is always fixed.

25
00:02:47,372 --> 00:02:50,253
This means that our artists, when they create the art,

26
00:02:50,293 --> 00:02:51,814
they can make sure that they know

27
00:02:51,894 --> 00:02:55,076
that when the game is shown on a gamer's screen,

28
00:02:55,136 --> 00:02:57,057
it will look exactly like it looks on their screen.

29
00:02:57,698 --> 00:03:01,859
that sort of means that they can go and tweak every pixel for perfection

30
00:03:02,059 --> 00:03:06,600
and they can sort of rely on really subtle details being the same

31
00:03:07,860 --> 00:03:10,720
on the monitor when the game is played.

32
00:03:11,421 --> 00:03:14,161
This sort of in turn means that we can't have too many distracting artifacts

33
00:03:14,201 --> 00:03:18,922
because we have these very subtle details that need to remain on screen.

34
00:03:19,362 --> 00:03:25,443
So that means we can't have sort of banding and flickering and aliasing

35
00:03:25,563 --> 00:03:26,143
and that sort of thing.

36
00:03:26,503 --> 00:03:29,805
So that's something this talk will return to a couple times.

37
00:03:30,865 --> 00:03:32,806
From a technical point of view, just to get that out of the

38
00:03:32,846 --> 00:03:39,488
way, we shipped at 60 FPS at 1080p on all targets.

39
00:03:40,588 --> 00:03:42,749
And we are using the Unity engine.

40
00:03:43,649 --> 00:03:45,710
We have a source license for that, so we made some

41
00:03:45,770 --> 00:03:46,570
modifications for that.

42
00:03:46,890 --> 00:03:50,272
uh... from a rendering point of view I'll be using a light pre-pass

43
00:03:50,752 --> 00:03:52,632
rendering which looks something like this so we have

44
00:03:53,152 --> 00:03:56,154
our first pass over the entire scene which is a base pass

45
00:03:56,574 --> 00:03:57,974
that outputs depth and normals

46
00:03:58,554 --> 00:04:02,276
we then have a light pass that goes through all lights and

47
00:04:02,336 --> 00:04:04,576
samples those depth and normals and then outputs

48
00:04:05,117 --> 00:04:06,677
the lighting. We then have a final pass

49
00:04:07,277 --> 00:04:07,477
that

50
00:04:09,696 --> 00:04:13,740
that applies the materials, samples the lighting,

51
00:04:13,800 --> 00:04:16,223
then a translucency pass, and sort of a post-effects pass

52
00:04:16,243 --> 00:04:17,043
to wrap the whole thing up.

53
00:04:17,904 --> 00:04:21,568
So one thing that turned out to be important rather early on

54
00:04:21,608 --> 00:04:25,872
was fog to sort of create the atmosphere

55
00:04:25,892 --> 00:04:27,194
and the mood of the game.

56
00:04:27,634 --> 00:04:29,596
So initially, actually, quite a lot of scenes

57
00:04:29,676 --> 00:04:32,259
were literally just geometry and this depth fog.

58
00:04:33,079 --> 00:04:39,423
which, sort of in line with Limbo, relied a lot on silhouettes to create the mood.

59
00:04:39,924 --> 00:04:43,726
So to kind of show you how much mileage we get out of that, this is a scene without any

60
00:04:43,766 --> 00:04:48,870
fog and then literally just adding a linear depth fog we get something like this, which

61
00:04:48,930 --> 00:04:50,451
is already rather moody.

62
00:04:50,991 --> 00:04:59,861
The only interesting bit we're doing here rendering wise is that we're capping the intensity of the fog to a maximum level so that really bright light sources will shine through.

63
00:04:59,981 --> 00:05:07,048
Whereas if you're using exponential fog, of course you converge towards one and bright light sources will always shine through.

64
00:05:07,749 --> 00:05:14,554
So, on top of that we have this sort of fake fog scattering, atmospheric scattering pass.

65
00:05:14,594 --> 00:05:18,197
The reason why I'm being very unspecific about that is because it's really just a really

66
00:05:18,257 --> 00:05:22,300
white glow, so we're blurring the entire screen and adding that back on top.

67
00:05:22,740 --> 00:05:28,304
So this was something our artists did rather early on, and I think they used it for great

68
00:05:28,324 --> 00:05:32,167
effect, but really rather easy to do.

69
00:05:33,088 --> 00:05:39,437
So now that we're using glow to do this fake atmospheric scattering, what do we do about glow then?

70
00:05:39,517 --> 00:05:43,923
Well, we have a second path that does these really narrow high-intensity glows.

71
00:05:44,423 --> 00:05:50,131
So the way we do that is like many other games, that we write out a mask from emissive materials.

72
00:05:50,692 --> 00:05:53,753
and then we sort of remap that mask to a HDR value

73
00:05:53,793 --> 00:05:57,375
between one and seven, and we calculate glow from that.

74
00:05:57,875 --> 00:06:00,236
So one thing that's obvious in hindsight,

75
00:06:00,276 --> 00:06:01,857
but wasn't really while we did it,

76
00:06:01,957 --> 00:06:03,038
was that of course when,

77
00:06:04,999 --> 00:06:09,061
because the bloom sort of is an indication

78
00:06:09,141 --> 00:06:10,641
that you have a high intensity pixel,

79
00:06:10,701 --> 00:06:12,882
if you then don't render that pixel

80
00:06:13,163 --> 00:06:15,564
with the high intensity, that looks odd and looks like.

81
00:06:16,979 --> 00:06:20,448
you have nothing glowing that's giving off this massive glow.

82
00:06:20,468 --> 00:06:26,042
So it was really important to actually write back the HDR values for it to look more natural.

83
00:06:27,316 --> 00:06:29,377
So that means that we have a post effect pass that looks

84
00:06:29,597 --> 00:06:30,157
something like this.

85
00:06:30,177 --> 00:06:33,479
So we have a temple anti-aliasing pass first,

86
00:06:34,099 --> 00:06:36,400
and then we have the two glow passes.

87
00:06:36,420 --> 00:06:39,101
They're really separate, but interleaved

88
00:06:39,201 --> 00:06:40,482
for performance reasons.

89
00:06:41,062 --> 00:06:42,762
It's important that we have the temple anti-aliasing

90
00:06:42,782 --> 00:06:46,884
before the HDR bloom, because if we have too much aliasing

91
00:06:47,184 --> 00:06:50,766
with the high intensities that we use in the HDR glow,

92
00:06:51,826 --> 00:06:53,067
leaving a little bit of aliasing

93
00:06:53,227 --> 00:06:54,768
will make it flicker quite a lot.

94
00:06:55,608 --> 00:07:02,352
We then have a combined post-effects pass that applies the glow and does this HDR result

95
00:07:02,432 --> 00:07:06,595
we talked about before, some lens distortion, some color offset and color grading.

96
00:07:06,775 --> 00:07:08,056
I'll talk a little bit more about that.

97
00:07:08,677 --> 00:07:13,680
So the chromatic aberration like this lens, red, green, blue offsets.

98
00:07:16,122 --> 00:07:20,107
Most of the time we do it like most other games where we just sample red, green and

99
00:07:20,127 --> 00:07:22,630
blue separately with a little bit of radial offset.

100
00:07:23,110 --> 00:07:28,837
But in situations like this underwater we use rather large offsets, which means that

101
00:07:28,857 --> 00:07:33,642
we then get this sort of triple image effect that looks weird, whereas really what we wanted

102
00:07:33,662 --> 00:07:34,684
was a rainbow-like effect.

103
00:07:35,424 --> 00:07:43,228
So a trick to fix that is something we found in the demo scene, which is to use a red-green-blue

104
00:07:43,268 --> 00:07:50,831
texture and then we do a radial blur and then in our samples of the radial blur we then

105
00:07:51,091 --> 00:07:55,073
also sample through the red-green-blue texture to get the weights of each sample.

106
00:07:55,413 --> 00:07:57,154
So that's the way we get coloring.

107
00:07:57,514 --> 00:08:02,416
Of course the reason why that works is because we're using, or when sampling a texture we

108
00:08:02,456 --> 00:08:03,617
get bilinear filtering.

109
00:08:04,157 --> 00:08:06,878
uh... for free using that so that was uh...

110
00:08:07,318 --> 00:08:09,719
a nice trick that we didn't come up with ourselves but uh...

111
00:08:10,139 --> 00:08:11,780
completely so

112
00:08:11,800 --> 00:08:14,401
so uh...

113
00:08:14,561 --> 00:08:17,422
one another thing we do in the final post effects path is that we

114
00:08:17,442 --> 00:08:22,824
uh... we want to make sure that we want to be able to adjust the brightness

115
00:08:23,244 --> 00:08:25,745
and the way we do that is just as simple as possible we have

116
00:08:26,406 --> 00:08:29,707
uh... sort of a photoshopped levels filter where we are able to adjust the

117
00:08:30,087 --> 00:08:31,328
black level and white level

118
00:08:31,988 --> 00:08:32,048
uh...

119
00:08:32,748 --> 00:08:38,810
And the issue with that is that it's very easy to cut off the whites and get these burned out white areas.

120
00:08:38,830 --> 00:08:45,712
So what we did was that we used what's called smooth minimum functions, smooth minimum, smooth maximum functions.

121
00:08:48,816 --> 00:08:55,201
we use, we take the smooth minimum between the brightness adjustment curve and then one.

122
00:08:55,902 --> 00:08:58,785
And that means that we get this sort of smooth falloff.

123
00:08:58,845 --> 00:09:00,766
And that's code in the slides.

124
00:09:01,747 --> 00:09:03,669
That's a ShaderTor implementation of that.

125
00:09:04,830 --> 00:09:09,794
So this worked out really well for us and it was also really easy for the artists to tweak

126
00:09:09,814 --> 00:09:15,519
because they just had one parameter which was how smooth should the kink between the two be.

127
00:09:17,416 --> 00:09:20,097
All right, so I'll leave the post effects and get back

128
00:09:20,177 --> 00:09:22,198
to the atmosphere that we were talking about before.

129
00:09:22,778 --> 00:09:26,760
So the fog, we figured out rather early

130
00:09:26,780 --> 00:09:29,541
that we needed more than just this global fog

131
00:09:30,281 --> 00:09:33,002
to get the effects that we wanted.

132
00:09:33,642 --> 00:09:36,503
So we did this local implementation

133
00:09:36,543 --> 00:09:40,385
of this local fog, whereas this scene is an example.

134
00:09:40,845 --> 00:09:43,006
The flashlight is rendered using this effect.

135
00:09:43,686 --> 00:09:45,767
And how we did that is that for every pixel,

136
00:09:46,748 --> 00:09:48,809
We sample all the way to the depth buffer,

137
00:09:48,869 --> 00:09:51,831
and for each step, we sample the lighting function,

138
00:09:51,931 --> 00:09:54,692
so the projected texture and the shadow map

139
00:09:54,752 --> 00:09:56,273
and falloff of the texture.

140
00:09:56,873 --> 00:09:58,494
And if you do this in sort of a naive way,

141
00:09:58,574 --> 00:10:01,896
then you end up with something that's very slow.

142
00:10:02,356 --> 00:10:06,038
In this example, 128 samples to make it look just okay,

143
00:10:06,078 --> 00:10:09,220
and that takes more than roughly a frame and a half.

144
00:10:10,981 --> 00:10:14,743
So if you try to make that faster just by reducing the number of samples, you get something

145
00:10:14,763 --> 00:10:19,866
like this with quite a lot of artifacts and quite jarring artifacts as well, like these

146
00:10:19,906 --> 00:10:21,147
really sharp lines.

147
00:10:21,547 --> 00:10:25,650
So what you can do of course is that you can go and add a little bit of random into your

148
00:10:25,730 --> 00:10:26,330
ray offsets.

149
00:10:26,811 --> 00:10:31,353
So if you do that, then you get something that looks a lot better.

150
00:10:31,834 --> 00:10:35,556
It's a lot slower though now because when you're actually sampling your...

151
00:10:36,697 --> 00:10:40,081
uh... your textures than the texture cache is working a lot worse because now

152
00:10:40,101 --> 00:10:41,102
you have random jittering

153
00:10:41,703 --> 00:10:43,004
uh... in your samples but

154
00:10:43,645 --> 00:10:47,390
but looks a lot better and and uh... the reason for this is the eye is actually quite

155
00:10:47,410 --> 00:10:48,471
forgiving towards noise

156
00:10:48,911 --> 00:10:51,795
so that's something we uh... we chose to look uh... into a bit further

157
00:10:52,752 --> 00:10:55,815
So this is the same example but with three samples rather than 24.

158
00:10:56,075 --> 00:10:59,057
And that's a lot of noise.

159
00:10:59,578 --> 00:11:05,582
You can only almost make out the actual light and shadows in this.

160
00:11:06,643 --> 00:11:11,187
So what we can do then is we can use a different pattern to do the jittering.

161
00:11:11,247 --> 00:11:14,289
So rather than using white noise as we are here, we can use a biomatrix.

162
00:11:15,270 --> 00:11:17,874
And already that looks a lot better.

163
00:11:18,856 --> 00:11:20,399
The reason why that looks better is because

164
00:11:20,479 --> 00:11:23,624
within a sort of small region, a biometrics

165
00:11:23,784 --> 00:11:26,088
is guaranteed to have all values.

166
00:11:28,416 --> 00:11:34,421
within that small region. And that's really good and the reason why it looks better. But

167
00:11:34,521 --> 00:11:38,444
whereas the eye is very forgiving towards noise, it really isn't very forgiving towards

168
00:11:38,484 --> 00:11:44,108
patterns. So we're looking for something that has this locality property at the same time as

169
00:11:44,168 --> 00:11:51,093
not being a pattern. So what we ended up finding was what's called blue noise. So that's

170
00:11:51,413 --> 00:11:56,277
essentially white noise that's high pass filtered. So...

171
00:11:57,958 --> 00:12:02,025
Blue noise can be still uniformly distributed.

172
00:12:02,145 --> 00:12:04,950
So that means that within a small region,

173
00:12:05,471 --> 00:12:07,975
because it changes rather rapidly.

174
00:12:09,035 --> 00:12:12,398
which changes rapidly and is still uniformly distributed.

175
00:12:12,418 --> 00:12:16,702
That means we have this same property as the biometrics,

176
00:12:16,762 --> 00:12:18,624
except, of course, we're not guaranteed

177
00:12:18,824 --> 00:12:20,165
that every value is represented.

178
00:12:20,205 --> 00:12:23,949
But it's very likely that most values are represented.

179
00:12:23,969 --> 00:12:25,410
So we still get really good sampling

180
00:12:25,791 --> 00:12:26,832
without it being a pattern.

181
00:12:27,092 --> 00:12:28,353
So that worked really well.

182
00:12:28,533 --> 00:12:31,476
And it meant that I think we reduced the number of samples

183
00:12:31,516 --> 00:12:34,419
to half around somewhere around that.

184
00:12:36,018 --> 00:12:40,742
Alright, so I'll leave the sampling for a bit and talk about how we actually go and distribute the samples.

185
00:12:40,962 --> 00:12:49,229
So the way we set up these local fog volumes in the game is that we insert boxes and within those boxes we have fog.

186
00:12:49,829 --> 00:12:52,652
So of course we don't need to sample outside.

187
00:12:54,313 --> 00:12:55,995
those boxes because there's no fog.

188
00:12:56,295 --> 00:12:58,417
We also don't need to sample outside the lights.

189
00:12:59,017 --> 00:13:04,281
So what we do is that we do a geometric intersection between those boxes and the light frustum.

190
00:13:05,022 --> 00:13:10,806
And that sort of boils down to just clipping the light frustum with each plane and then

191
00:13:10,886 --> 00:13:11,606
patching up the holes.

192
00:13:13,342 --> 00:13:15,183
So that means that we have this two-pass algorithm

193
00:13:15,223 --> 00:13:16,923
where first we write out the front faces

194
00:13:17,223 --> 00:13:19,523
of the clipped geometry,

195
00:13:19,603 --> 00:13:22,704
and then afterwards we render the back faces

196
00:13:22,764 --> 00:13:24,384
and then we sample the front face depth,

197
00:13:24,584 --> 00:13:28,925
and then we have the front and back points

198
00:13:28,945 --> 00:13:30,325
that we sample in between those two.

199
00:13:32,506 --> 00:13:34,206
And that gives us sort of an optimal

200
00:13:38,567 --> 00:13:40,487
range that we need to sample.

201
00:13:41,692 --> 00:13:45,416
So this thing about using boxes is something we actually use for effects.

202
00:13:45,516 --> 00:13:51,381
So in this scene above water, we're using two boxes, one above, one below.

203
00:13:51,401 --> 00:13:58,587
And the one above is just sampling the light as is, whereas below we're using this animated

204
00:13:58,867 --> 00:14:03,251
texture to fake caustics, which is working really well.

205
00:14:04,207 --> 00:14:07,270
So something that you may have noticed,

206
00:14:07,290 --> 00:14:09,592
that many others have noticed before us,

207
00:14:09,652 --> 00:14:11,294
is that this is actually quite a smooth effect.

208
00:14:11,734 --> 00:14:14,577
So sampling this per pixel is rather overkill.

209
00:14:15,238 --> 00:14:17,580
So of course, we don't do that.

210
00:14:17,660 --> 00:14:19,642
We sample it at half resolution instead.

211
00:14:20,283 --> 00:14:21,724
We could probably get away with sampling it

212
00:14:21,744 --> 00:14:24,727
at even lower resolutions, but this was sufficient.

213
00:14:25,488 --> 00:14:29,413
So that means we then have this three-pass algorithm, so the two first passes are the

214
00:14:29,433 --> 00:14:33,257
same as before, only at half resolution, so we write out the front face depth, we then

215
00:14:33,297 --> 00:14:37,863
do the ray marching, and then we have this third pass that does upsampling from half

216
00:14:37,903 --> 00:14:39,044
resolution to full resolution.

217
00:14:40,466 --> 00:14:44,971
And while we do the upsampling pass, we also add a little bit of sort of a noisy blur into

218
00:14:44,991 --> 00:14:45,051
the...

219
00:14:47,104 --> 00:14:47,865
into the upsampling.

220
00:14:48,325 --> 00:14:52,927
And the reason why we do this is to get rid of this half-resolution structure that we still have.

221
00:14:54,347 --> 00:15:00,630
An additional reason why that's a good idea is because we, as you may remember, have a temporal anti-aliasing path.

222
00:15:01,230 --> 00:15:04,193
And at least in our implementation of the temporal anti-gazing,

223
00:15:04,213 --> 00:15:06,876
we're using what's called neighborhood clipping.

224
00:15:07,416 --> 00:15:11,280
And the way that works is that for each pixel, it looks at the immediate neighborhood,

225
00:15:11,360 --> 00:15:14,523
and any value that's within the immediate neighborhood is accepted.

226
00:15:14,983 --> 00:15:17,466
So that means that it's very good at picking up per-pixel noise,

227
00:15:17,526 --> 00:15:21,409
but it's not very good at picking up half-resolution noise.

228
00:15:22,030 --> 00:15:27,379
So converting this half-resolution pattern into a full-resolution noise

229
00:15:28,401 --> 00:15:32,047
was something that meant that it sort of played into the hand of timbral anti-aliasing a bit more,

230
00:15:33,009 --> 00:15:35,513
which is a trick from DICE, I think.

231
00:15:37,286 --> 00:15:39,608
All right, so this is the final result.

232
00:15:39,768 --> 00:15:42,510
This is shown with six samples at half resolution.

233
00:15:42,711 --> 00:15:44,632
This takes just less than a millisecond

234
00:15:45,173 --> 00:15:47,535
if we were to sample every pixel on screen,

235
00:15:48,015 --> 00:15:48,816
which of course we don't.

236
00:15:48,876 --> 00:15:51,058
We only sample within the actual light cone.

237
00:15:51,798 --> 00:15:53,880
Also, most of the time, we're actually using

238
00:15:53,920 --> 00:15:55,822
three samples per pixel at half resolution.

239
00:15:55,842 --> 00:15:57,023
We're not using six.

240
00:15:57,523 --> 00:16:00,325
So that means that we are doing just less than one sample

241
00:16:00,586 --> 00:16:03,508
per full resolution pixel to get this effect.

242
00:16:04,616 --> 00:16:06,576
So the reason why we've been obsessing so much about

243
00:16:06,596 --> 00:16:08,337
the number of samples, of course,

244
00:16:08,397 --> 00:16:09,737
is that the effect is bandwidth bound.

245
00:16:09,857 --> 00:16:12,238
Like it's bound by the number of samples we do.

246
00:16:12,678 --> 00:16:16,039
So we also do all the other things that we can

247
00:16:16,119 --> 00:16:17,459
to reduce the number of samples.

248
00:16:17,759 --> 00:16:19,219
Oh, sorry, reduce the bandwidth.

249
00:16:19,539 --> 00:16:21,800
So we lower the resolution of the projected texture,

250
00:16:21,820 --> 00:16:23,300
we lower the resolution of the shadow maps.

251
00:16:24,300 --> 00:16:25,401
Of course, we can get away with this

252
00:16:25,481 --> 00:16:28,441
because it's, again, it's a rather low,

253
00:16:28,922 --> 00:16:29,962
it's a rather smooth effect,

254
00:16:30,082 --> 00:16:32,522
and we also, there's quite a bit of blurring involved.

255
00:16:33,042 --> 00:16:34,323
So we can get away with that.

256
00:16:34,963 --> 00:16:37,966
So the way that fits into the pipeline is like this.

257
00:16:37,986 --> 00:16:43,611
So during the lighting pass we save off the shadow maps that we know we're going to need.

258
00:16:43,711 --> 00:16:48,776
Then we do the two first passes of our algorithm rhythm.

259
00:16:49,536 --> 00:16:54,961
Then we save off this ray-matched texture and then in the translucency pass we re-render

260
00:16:55,001 --> 00:16:58,545
the clip geometry and sort that with other translucencies.

261
00:17:00,132 --> 00:17:06,339
Okay, so I'll leave off for now and talk about a different thing that was very important

262
00:17:06,799 --> 00:17:11,004
to get the look that we have in InSight, namely banding.

263
00:17:11,885 --> 00:17:18,232
So this is a, well the effect is still, the artifact is banding, the effect is still there.

264
00:17:18,252 --> 00:17:18,593
So this is a...

265
00:17:20,509 --> 00:17:25,897
a scene from the game and I've sort of upped the brightness a bit so we can see what's going on

266
00:17:26,678 --> 00:17:31,684
and if we look at this then you can see some of the things I've talked about in the beginning

267
00:17:31,724 --> 00:17:37,412
we have these very smooth transitions and there are a lot of sort of details that you can almost notice

268
00:17:38,013 --> 00:17:40,915
So this image actually has quite a lot of noise in it,

269
00:17:41,916 --> 00:17:44,497
which hopefully you can't tell too much,

270
00:17:44,577 --> 00:17:47,359
but if I remove that noise, then it looks like this.

271
00:17:48,320 --> 00:17:49,841
Has quite a lot of artifacts,

272
00:17:49,861 --> 00:17:51,863
it has these sort of sharp lines

273
00:17:52,303 --> 00:17:53,264
all the way through the image.

274
00:17:54,384 --> 00:18:00,287
It has these sort of rainbow-like effects, and also it animates, so it's really rather

275
00:18:00,327 --> 00:18:08,431
distracting compared to, in relation to this art style where we want subtlety as well.

276
00:18:09,792 --> 00:18:13,974
So of course what's going on is that we're rendering out into 8-bit color buffers.

277
00:18:14,785 --> 00:18:18,828
And 8 bits per channel really isn't sufficient.

278
00:18:18,848 --> 00:18:20,729
The human eye is able to perceive something

279
00:18:20,789 --> 00:18:21,950
along the lines of 14 bits.

280
00:18:22,490 --> 00:18:23,991
So what we could do, of course, was

281
00:18:24,011 --> 00:18:26,472
to render to higher precision buffers.

282
00:18:26,893 --> 00:18:31,235
But on some platforms, that would be slower, even too slow

283
00:18:31,315 --> 00:18:32,676
to work.

284
00:18:33,476 --> 00:18:35,718
And so something else we could do

285
00:18:35,798 --> 00:18:40,621
is use the sRGB targets, render targets.

286
00:18:41,865 --> 00:18:46,309
But again, on some platforms that has interesting

287
00:18:46,329 --> 00:18:47,890
implementations to say the least.

288
00:18:48,350 --> 00:18:51,433
So we chose to sort of explore dithering instead

289
00:18:51,553 --> 00:18:52,854
to solve this issue.

290
00:18:53,595 --> 00:18:56,377
So the way that works, this is an example

291
00:18:56,537 --> 00:18:59,840
where the orange line is the signal

292
00:18:59,880 --> 00:19:00,761
we are trying to represent.

293
00:19:01,241 --> 00:19:03,964
And if we look at the value of 0.75 bits,

294
00:19:05,125 --> 00:19:09,048
we then add one bit worth of entirely uniform noise.

295
00:19:10,017 --> 00:19:18,545
That means that when quantizing, 75% of the time we end up quantizing to the value above the signal

296
00:19:19,626 --> 00:19:23,169
and 25% of the time we end up quantizing to the value below.

297
00:19:23,189 --> 00:19:25,631
And that's because the noise is entirely uniform.

298
00:19:26,532 --> 00:19:31,797
So that means that on average we're actually getting exactly the signal that we started out with.

299
00:19:32,982 --> 00:19:37,547
So just so you can tell this is not completely black magic,

300
00:19:38,267 --> 00:19:40,990
this is how you would actually go about implementing it.

301
00:19:41,030 --> 00:19:43,112
So this is a pixel shader and on output,

302
00:19:43,512 --> 00:19:45,214
you just add a random number.

303
00:19:45,394 --> 00:19:47,656
You can get this, like you can calculate this

304
00:19:47,736 --> 00:19:50,819
or you can get this from a texture,

305
00:19:50,839 --> 00:19:51,600
it doesn't really matter.

306
00:19:53,262 --> 00:19:59,486
So I just wanted you to keep in mind that this is actually spectacularly easy to add and rather cheap as well.

307
00:19:59,526 --> 00:20:04,929
So there's really no reason why any game should ship with Bandit, including indie games.

308
00:20:06,313 --> 00:20:08,474
So, just to explore this a bit further,

309
00:20:09,294 --> 00:20:12,395
so above, on top, we have, again,

310
00:20:12,435 --> 00:20:13,695
the signal we're trying to represent,

311
00:20:13,715 --> 00:20:17,036
then we have the rounded, quantized output

312
00:20:17,076 --> 00:20:18,856
in the second row, and then we have the error

313
00:20:19,136 --> 00:20:19,737
in the third row.

314
00:20:20,337 --> 00:20:22,577
And if we then go and add noise to this,

315
00:20:22,917 --> 00:20:23,497
it looks like this.

316
00:20:24,118 --> 00:20:25,518
Now, already, that's really good.

317
00:20:25,538 --> 00:20:27,378
It's a lot better than before.

318
00:20:27,618 --> 00:20:29,219
But if we then go and animate this,

319
00:20:29,959 --> 00:20:31,179
move it about, you can see that we have

320
00:20:31,379 --> 00:20:35,900
sort of these bands of no noise in the second row.

321
00:20:36,721 --> 00:20:41,846
So, what's going on there is what's called noise modulation, and it turns out to be a

322
00:20:41,866 --> 00:20:46,370
property of the type of noise we're using, because we're using entirely uniform noise.

323
00:20:46,911 --> 00:20:52,116
Noise modulation means that the error in the output image compared to the signal is dependent

324
00:20:52,176 --> 00:20:52,696
on the signal.

325
00:20:53,177 --> 00:20:57,321
And that's a property, of course, we don't want because, yeah, it looks weird.

326
00:20:58,142 --> 00:20:58,302
So...

327
00:20:59,827 --> 00:21:02,729
So fortunately we can just change the distribution of the noise.

328
00:21:03,129 --> 00:21:06,751
So if we use a triangularly distributed noise instead, we get this.

329
00:21:07,611 --> 00:21:12,754
And now we don't have noise modulation, so we don't have, like, the final error is completely

330
00:21:12,774 --> 00:21:13,855
independent of the signal.

331
00:21:14,515 --> 00:21:20,038
So if we go back and try to apply that, we see that we get the same smooth gradient that

332
00:21:20,058 --> 00:21:20,558
we did before.

333
00:21:20,618 --> 00:21:26,041
And if we animate it, we can see that we no longer have these bands that we noticed before.

334
00:21:26,898 --> 00:21:28,298
But now we have quite a lot of noise.

335
00:21:29,018 --> 00:21:34,319
That's because we've now added two bits worth of noise rather than one to compensate for

336
00:21:34,339 --> 00:21:36,480
the triangular shape of the distribution.

337
00:21:37,440 --> 00:21:38,400
So what can we do about that?

338
00:21:38,460 --> 00:21:44,141
Well, we can go back and use the blue noise that we also looked at for sampling.

339
00:21:45,101 --> 00:21:50,582
And if we do that, then of course we need a triangular distribution for that, but if

340
00:21:51,582 --> 00:21:53,403
we go and use that instead.

341
00:21:54,275 --> 00:21:57,957
we get something that's visibly less noisy,

342
00:21:58,438 --> 00:22:02,300
but also doesn't have these bands of noise again.

343
00:22:03,320 --> 00:22:06,962
So the way we implemented that was to just pre-calculate

344
00:22:07,002 --> 00:22:08,863
blue noise into texture, and then we sampled that

345
00:22:09,804 --> 00:22:10,584
everywhere on screen.

346
00:22:10,624 --> 00:22:14,387
That gives complete texture cache coherency

347
00:22:14,427 --> 00:22:15,807
between edges and pixels.

348
00:22:15,847 --> 00:22:17,128
So that's actually really fast.

349
00:22:19,439 --> 00:22:22,541
So in the few cases where we are actually bandwidth bound,

350
00:22:22,681 --> 00:22:28,185
we then use an ALU version where we calculate two white noises

351
00:22:28,225 --> 00:22:31,247
and add them together and add that to the output.

352
00:22:31,387 --> 00:22:35,589
All right, so now that we know how to dither an output,

353
00:22:35,689 --> 00:22:38,411
we should think about what to dither.

354
00:22:38,511 --> 00:22:41,373
So this is an example of a single spotlight that

355
00:22:41,393 --> 00:22:43,755
shines a very bandy light onto the scene.

356
00:22:44,275 --> 00:22:47,817
So of course, the first thing we do is that we dither the lighting

357
00:22:47,857 --> 00:22:48,097
pulse.

358
00:22:49,164 --> 00:22:51,385
So if we do that, then it looks like this.

359
00:22:51,745 --> 00:22:55,688
And that's already a lot better.

360
00:22:56,268 --> 00:23:00,030
But we sort of have these waves through the light.

361
00:23:00,591 --> 00:23:04,553
That is not due to the type of noise, as you might think.

362
00:23:04,873 --> 00:23:07,155
But of course, because the final pass

363
00:23:07,275 --> 00:23:09,876
is reading the lighting buffer, and then applying materials,

364
00:23:09,996 --> 00:23:11,798
and writing that into an 8-bit buffer.

365
00:23:12,258 --> 00:23:15,040
So of course, we need two to do the final pass as well.

366
00:23:16,137 --> 00:23:20,639
So in doing that we then have an entirely banding free output in this scene.

367
00:23:21,479 --> 00:23:26,840
So afterwards we have the translucency pass and the translucency pass might be the most

368
00:23:26,900 --> 00:23:33,642
important pass to dither because during blending you tend to read and write the same values

369
00:23:33,742 --> 00:23:38,444
over and over again into the render target.

370
00:23:39,184 --> 00:23:43,707
and so you end up re-quantizing to 8-bits multiple times.

371
00:23:44,068 --> 00:23:48,230
So of course we need to dither that pass as well.

372
00:23:49,571 --> 00:23:55,856
The post-effects pass is also surprisingly really important to dither.

373
00:23:56,156 --> 00:24:00,659
You tend to read and write from 8-bit render targets quite a lot in the post-effects pass

374
00:24:01,620 --> 00:24:02,020
because...

375
00:24:03,438 --> 00:24:06,920
bandwidth tends to be a limiting factor during that as well.

376
00:24:06,960 --> 00:24:10,902
So here, as an example, our wide glow path,

377
00:24:11,042 --> 00:24:14,784
we actually ended up using a 10-bit render target

378
00:24:15,184 --> 00:24:17,005
and sort of power of two compressing it

379
00:24:17,205 --> 00:24:19,687
and dithering to get something

380
00:24:19,727 --> 00:24:22,228
that was entirely banding free

381
00:24:22,328 --> 00:24:24,489
and at the same time didn't have too much noise.

382
00:24:26,070 --> 00:24:27,531
So, so far we've been talking about

383
00:24:29,157 --> 00:24:33,622
uh... bending as an artifact of colors and really doesn't have anything to do

384
00:24:33,642 --> 00:24:36,384
with colors it's all about the quantization to 8 bits

385
00:24:37,025 --> 00:24:39,528
so in our base pass when writing out

386
00:24:41,529 --> 00:24:44,973
normals we are writing those out to uh... to 8-bit render targets as well

387
00:24:44,993 --> 00:24:46,414
24-bit render targets

388
00:24:47,794 --> 00:24:53,718
So of course we can deal with the normals as well and exchange the banding for noise.

389
00:24:53,758 --> 00:25:01,303
We do this only in the few cases where it's actually needed, which is the very few cases in the game where we have these really intense

390
00:25:01,763 --> 00:25:05,666
spectacular highlights with normals sort of varying across really large surfaces.

391
00:25:06,942 --> 00:25:10,446
Okay, so now we know to do the everything and how to do so.

392
00:25:10,466 --> 00:25:12,308
Is there anything else we should keep in mind?

393
00:25:12,368 --> 00:25:14,531
Well, it's a really good idea to animate the noise.

394
00:25:15,492 --> 00:25:17,194
If you don't, then when the camera moves,

395
00:25:17,234 --> 00:25:18,856
you sort of have this dusty lens effect

396
00:25:19,337 --> 00:25:21,800
where the noise moves with the camera.

397
00:25:22,921 --> 00:25:38,031
Also, because we're using the temporal anti-aliasing, that means that if you animate it, the temporal anti-aliasing will sort of integrate the noise over time and will kind of soak up the noise, so it sort of disappears, which is nice.

398
00:25:39,272 --> 00:25:40,313
Also, of course...

399
00:25:43,034 --> 00:25:48,399
Yeah, you should do the UI, because that tends to be a lot of transparencies and a lot of

400
00:25:49,099 --> 00:25:54,064
different, like, fades and animation and that sort of thing, which is really important.

401
00:25:55,025 --> 00:26:00,710
And finally, when you are outputting to a monitor or television, then...

402
00:26:01,790 --> 00:26:12,116
if that television for example has, is set to use limited range RGB, there may be a small chip that will do a conversion for you, to make sure that you match that TV.

403
00:26:12,576 --> 00:26:27,884
So if you can, then make sure to output the correct format so you can properly dither your signal and output, rather than having the hardware do it for you, because that's quite unlikely to do proper dithering of that.

404
00:26:29,455 --> 00:26:33,679
And with that I'll leave you to the very capable hands of the other maker.

405
00:26:41,927 --> 00:26:42,268
Hello.

406
00:26:43,789 --> 00:26:50,776
So from a lot of post effects, a lot of debugging we're going to drive into some lighting now.

407
00:26:54,343 --> 00:26:59,888
As Guido said, we're using pre-pass lighting for our rendering pipeline.

408
00:27:00,189 --> 00:27:06,474
So that means that during the second pass with our normals and our depth buffer, we're

409
00:27:06,754 --> 00:27:11,899
writing several objects into our lighting buffer, like spots or point lights or directional

410
00:27:11,939 --> 00:27:12,179
lights.

411
00:27:12,500 --> 00:27:17,564
But if we want, we can actually just render whatever we'd like in there.

412
00:27:18,265 --> 00:27:22,366
So we've got a few types of custom lights and whatnot.

413
00:27:22,606 --> 00:27:25,647
So let's take a look at the first one I'm going to talk about,

414
00:27:25,667 --> 00:27:26,547
which is the bounce light.

415
00:27:27,707 --> 00:27:30,828
The bounce light is probably the simplest of all of these.

416
00:27:31,088 --> 00:27:34,729
It's very basically a thing that we

417
00:27:34,869 --> 00:27:37,990
use to simulate pseudo-global illumination

418
00:27:38,590 --> 00:27:40,031
in a very handheld way.

419
00:27:40,900 --> 00:27:41,601
and uh...

420
00:27:42,341 --> 00:27:45,503
if uh... we take a look at this screenshot here it's got a little point light down there

421
00:27:45,583 --> 00:27:46,063
by the box

422
00:27:46,443 --> 00:27:49,785
but uh... that's it's not a sharp point light that we want so uh...

423
00:27:50,585 --> 00:27:53,667
this is the uh... the lighting product that we get around the sphere and

424
00:27:54,087 --> 00:27:56,948
what makes a bounce light different is that we just you know

425
00:27:57,508 --> 00:27:58,809
wrap the lighting on the other side

426
00:27:59,589 --> 00:28:00,590
and this is something that

427
00:28:02,175 --> 00:28:05,577
that Valve has been doing for character lighting for a while.

428
00:28:05,677 --> 00:28:09,559
It's called Lambert Wrap or Double Lambert, stuff like that.

429
00:28:10,179 --> 00:28:12,861
And we've just got a parameter for that called Hardness

430
00:28:13,481 --> 00:28:16,223
that we can use to just fade off that, you know,

431
00:28:16,583 --> 00:28:20,545
front to back side product around our objects.

432
00:28:20,605 --> 00:28:22,466
And it just makes it less obvious

433
00:28:22,486 --> 00:28:23,807
where the light is coming from.

434
00:28:23,827 --> 00:28:25,728
It kind of makes it look like it's coming from an area

435
00:28:25,788 --> 00:28:27,629
rather than a singular point.

436
00:28:28,189 --> 00:28:39,711
So in this case we're wrapping it from front to back but we can actually fade it off completely if we want so that we just get a straight up ambient, nothing but fall off light.

437
00:28:40,411 --> 00:28:49,993
So we use this mostly for doors opening or just spreading light around the room when we have a very sharp fixed light hitting something.

438
00:28:51,213 --> 00:28:57,275
But we can also just attach it to spotlights and hit the ground as the spotlight moves around.

439
00:28:58,076 --> 00:29:00,950
But yeah, mostly for windows opening and the likes of that.

440
00:29:01,710 --> 00:29:05,491
Now, a small property that's kind of a no-brainer,

441
00:29:05,551 --> 00:29:08,071
but also just gives a lot of freedom

442
00:29:08,191 --> 00:29:10,372
is we don't restrain it to just being

443
00:29:10,392 --> 00:29:12,592
like a point on the radius, because that

444
00:29:12,612 --> 00:29:15,053
would mean that to fill up this room with lights,

445
00:29:15,093 --> 00:29:17,073
we would need to just place and place

446
00:29:17,133 --> 00:29:19,814
four lights with all sorts of overlap and overdraw.

447
00:29:20,434 --> 00:29:25,455
So we let artists scale the lights in any which way

448
00:29:25,475 --> 00:29:27,436
they want, just non-uniformly.

449
00:29:28,276 --> 00:29:31,256
Replace these points with a pill instead.

450
00:29:32,097 --> 00:29:36,538
And it's just a little more effective and actually makes it look a little more smooth

451
00:29:36,578 --> 00:29:39,859
because you don't have overlapping things.

452
00:29:40,880 --> 00:29:42,941
So yeah, that's our GI figury.

453
00:29:43,921 --> 00:29:51,644
And next up, because we have a pass just for lighting,

454
00:29:52,764 --> 00:29:58,346
we can not just add lights to, but also subtract or multiply things onto this buffer.

455
00:29:58,366 --> 00:29:59,286
So we don't just need to...

456
00:30:00,047 --> 00:30:01,367
to do an additive blending.

457
00:30:01,407 --> 00:30:03,388
We can do whatever blend mode we want here.

458
00:30:04,028 --> 00:30:07,989
So we've got a few ways of doing ambient occlusion, or shadows,

459
00:30:09,189 --> 00:30:11,830
in a very custom-handheld way, as opposed

460
00:30:11,890 --> 00:30:14,291
to using screen space, ambient occlusion,

461
00:30:14,331 --> 00:30:17,011
or any effect like that that's baked, or screen space.

462
00:30:17,972 --> 00:30:21,633
So we've got three types of ambient occlusion casters.

463
00:30:21,933 --> 00:30:24,894
And let's look at the first one, and actually the most used one,

464
00:30:24,994 --> 00:30:25,614
which is the point.

465
00:30:27,019 --> 00:30:30,702
So the point is mostly used for characters.

466
00:30:31,722 --> 00:30:37,067
The point is just to try to ground them to the ground and to themselves and to each other

467
00:30:37,207 --> 00:30:44,452
and make this large boy band kind of look like they're huddling together a little closer.

468
00:30:45,533 --> 00:30:50,377
So in there we've got about one per limb and we've got about sixteen dudes.

469
00:30:51,960 --> 00:30:53,261
got over a hundred of those little

470
00:30:54,182 --> 00:30:54,843
bastards there

471
00:30:55,844 --> 00:30:56,524
uh... so

472
00:30:57,165 --> 00:31:00,607
how that thing works is very simple if you have a bounce light, you know a light that wraps

473
00:31:01,068 --> 00:31:02,369
from front to back of the geometry

474
00:31:02,809 --> 00:31:07,093
and that's got an additive blend mode, well the AO decal is very simply just flipping

475
00:31:07,113 --> 00:31:08,974
that around to a multiplication

476
00:31:09,535 --> 00:31:09,995
blend mode

477
00:31:10,195 --> 00:31:13,898
and that's basically it, it's non-uniformly scalable

478
00:31:13,938 --> 00:31:15,299
and all that says

479
00:31:16,520 --> 00:31:18,141
One thing though, because we place a lot of them,

480
00:31:18,161 --> 00:31:21,322
we don't want that many settings on it.

481
00:31:21,582 --> 00:31:23,963
So we just have an intensity setting,

482
00:31:24,063 --> 00:31:25,643
and we can place and scale it however.

483
00:31:26,163 --> 00:31:28,344
So we don't have a wrap parameter for this one.

484
00:31:28,404 --> 00:31:29,765
It just wraps from front to back.

485
00:31:30,865 --> 00:31:31,345
Very simple.

486
00:31:32,368 --> 00:31:34,349
and that's the AO-Decal number one.

487
00:31:34,569 --> 00:31:36,950
So, second one we have is,

488
00:31:37,010 --> 00:31:38,630
this one we use a little more sparsely,

489
00:31:38,870 --> 00:31:44,011
just because, well, it's more for bigger occluders,

490
00:31:44,091 --> 00:31:44,971
like this Submarino.

491
00:31:46,552 --> 00:31:49,313
So the difference between the point and the sphere occlusion

492
00:31:50,113 --> 00:31:52,613
is that for the point, you can just see it,

493
00:31:52,653 --> 00:31:54,274
like, intensifying as it gets closer,

494
00:31:54,314 --> 00:31:56,254
but this, the sphere, the point is

495
00:31:56,434 --> 00:31:57,675
that you want it to get sharper

496
00:31:57,855 --> 00:32:00,655
as it gets closer to the occludi.

497
00:32:01,335 --> 00:32:01,776
or the ground.

498
00:32:02,696 --> 00:32:06,539
And so comparing the two, the point of the sphere,

499
00:32:06,559 --> 00:32:09,000
a sphere is just the angle to the ground.

500
00:32:09,681 --> 00:32:11,181
No, the point is just the angle to the ground.

501
00:32:11,722 --> 00:32:17,705
But we really want to know what the sum of occluded angles

502
00:32:17,825 --> 00:32:20,187
are for this ground.

503
00:32:20,487 --> 00:32:23,689
So the way to implement the difference

504
00:32:23,709 --> 00:32:26,531
between these implementations is if you have this normalizer,

505
00:32:26,591 --> 00:32:29,272
which is just normalizing the direction of the.

506
00:32:30,897 --> 00:32:32,297
of the occluder.

507
00:32:33,138 --> 00:32:35,018
We just need to change that product

508
00:32:35,058 --> 00:32:40,180
from this inverse square root to this thing here.

509
00:32:40,281 --> 00:32:44,762
And then actually that gives us the perfect product we needed.

510
00:32:45,543 --> 00:32:49,344
And we get a nice, sharp occlusion for basically cheaps.

511
00:32:51,328 --> 00:32:58,274
Third up on the AO scale is the box occlusion, because we've got a rather small times a crate.

512
00:32:58,375 --> 00:33:01,317
In our game, I think a third screen or so, there's a crate.

513
00:33:01,958 --> 00:33:06,883
So for all these draggable crates and boxes, we need something specific to them.

514
00:33:07,043 --> 00:33:14,930
And what we really want is like, have sharp corners around the sides and, you know, just make it look crate-sy, if you will.

515
00:33:15,812 --> 00:33:21,856
and the way we do that is we start with what you could call an unsigned distance function to the

516
00:33:21,896 --> 00:33:28,301
box so we have the position minus the size and we got like the distance to the first edge of the box

517
00:33:29,332 --> 00:33:33,035
and then what we do is we take the angle around that

518
00:33:33,536 --> 00:33:37,159
so we know on which point around that

519
00:33:37,179 --> 00:33:38,820
around the faces we are

520
00:33:39,240 --> 00:33:41,963
and that will give us that very sharp result up there on the top

521
00:33:42,003 --> 00:33:45,265
which is not nice, you know, we got these sharp V shapes

522
00:33:45,846 --> 00:33:47,867
so instead of taking just the unsigned distance

523
00:33:47,887 --> 00:33:49,749
we take the, let's call it square distance

524
00:33:49,789 --> 00:33:52,511
which also happens to be unsigned because...

525
00:33:53,212 --> 00:33:53,933
Yeah, it's squared.

526
00:33:54,474 --> 00:33:56,477
And that just smooths out the first gradient,

527
00:33:56,797 --> 00:33:58,059
as squaring things does.

528
00:33:58,961 --> 00:34:03,708
And that's a totally empirical, non-physically-based way

529
00:34:03,829 --> 00:34:04,229
to do this.

530
00:34:04,249 --> 00:34:06,473
It just happened to look kind of neat.

531
00:34:08,252 --> 00:34:13,075
you know, one side of this angle around is going to look like that side up there

532
00:34:13,135 --> 00:34:19,040
and if you compose all four together, you get those sharp edges around the sides of the box

533
00:34:19,720 --> 00:34:22,702
and yeah, it's just going to kind of look like the occlusion of a box

534
00:34:23,823 --> 00:34:24,304
and that's nice

535
00:34:25,044 --> 00:34:25,144
so

536
00:34:26,311 --> 00:34:29,254
Those are for ambient occlusion, cast in every direction.

537
00:34:29,374 --> 00:34:33,317
We've also got one for specifically directional shadows.

538
00:34:33,678 --> 00:34:37,882
And we use these for places where we have a lot of ambient lighting,

539
00:34:38,002 --> 00:34:40,504
very non-directional kind of wide lighting.

540
00:34:42,249 --> 00:34:47,952
and we just need to cast some very soft, very placed down shadows that might not even be

541
00:34:47,972 --> 00:34:48,852
from the right direction.

542
00:34:49,432 --> 00:34:53,694
So this is the scene without these, and if we add them, it kind of looks like this instead,

543
00:34:54,134 --> 00:34:54,595
these scenes.

544
00:34:55,475 --> 00:34:58,937
And so there are a lot of these placed around.

545
00:34:59,557 --> 00:35:06,420
In fact, this is like the places they've been put, and all they are are a, what's it called,

546
00:35:06,440 --> 00:35:06,460
a...

547
00:35:07,908 --> 00:35:13,131
a projected decal with a texture and just multiply onto the lighting buffer.

548
00:35:13,211 --> 00:35:14,392
That's all there is to it.

549
00:35:15,292 --> 00:35:19,915
And we use these both for these static scenes where we need soft shadows, but also for like,

550
00:35:20,035 --> 00:35:23,637
of course, dragging objects around and that shield there.

551
00:35:23,857 --> 00:35:25,058
And we do these.

552
00:35:27,371 --> 00:35:30,253
kind of Ocarina of Time period

553
00:35:31,614 --> 00:35:33,655
shadows around the boy's feet when he's got a torch

554
00:35:33,915 --> 00:35:35,516
and it's a nice way of

555
00:35:36,216 --> 00:35:38,658
faking some really really smooth shadows

556
00:35:39,598 --> 00:35:45,082
So, like I said, we do a lot of these, so we also need the projection maths to go fast

557
00:35:45,142 --> 00:35:48,784
because projections could be expensive if they are not fast

558
00:35:49,625 --> 00:35:52,726
and the way that you would neatly implement

559
00:35:53,487 --> 00:35:56,969
a projected piece of geometry is in your vertex shader you would get a view rate

560
00:35:57,815 --> 00:36:01,596
and in your fragment shader you would multiply that by the depth to get a view position and then

561
00:36:02,537 --> 00:36:06,298
just transform it with a full matrix into your object space or your decal space.

562
00:36:08,098 --> 00:36:11,979
Now that's not that nice because we got a full matrix multiplication in there.

563
00:36:12,540 --> 00:36:15,300
It's got a large row of mad instructions in there.

564
00:36:15,901 --> 00:36:17,121
So we would like to minimize that.

565
00:36:17,701 --> 00:36:23,243
Luckily there's a way to do that if you know how to do well spaced reconstruction from depth buffer.

566
00:36:24,351 --> 00:36:30,401
In which case you would get a view ray in your vertex shader and you would rotate the ray to world space rotation

567
00:36:31,122 --> 00:36:36,191
And then in your fragment shader you just need to multiply this world ray instead of view ray

568
00:36:36,829 --> 00:36:39,071
by the depth and add a world space offset

569
00:36:39,391 --> 00:36:39,751
and you're done

570
00:36:40,312 --> 00:36:42,634
so you can probably guess where that's going

571
00:36:42,994 --> 00:36:46,357
we still need to use a transformation matrix

572
00:36:46,898 --> 00:36:48,659
in order to get this world position to decal space

573
00:36:48,699 --> 00:36:50,001
so that's obviously not what we want

574
00:36:50,501 --> 00:36:54,084
but, you know, same technique works on object space arrays

575
00:36:54,565 --> 00:36:55,486
so you take a view array

576
00:36:56,186 --> 00:37:00,831
multiply it by the object space matrix

577
00:37:00,871 --> 00:37:01,932
and you get an object array

578
00:37:02,552 --> 00:37:03,053
and uh...

579
00:37:03,937 --> 00:37:06,080
that also both includes rotation and scale

580
00:37:06,881 --> 00:37:08,944
in your fragment shader, multiply by depth,

581
00:37:09,185 --> 00:37:10,046
and add an offset.

582
00:37:10,386 --> 00:37:12,550
So now you've gone from a matrix multiplication 4 by 4

583
00:37:13,491 --> 00:37:17,857
down to a math operation on a vector 3, which is neat.

584
00:37:18,859 --> 00:37:18,979
So.

585
00:37:20,977 --> 00:37:23,879
Another place that we use these decals are for reflections.

586
00:37:24,200 --> 00:37:26,262
So we've got screen space reflections in the game,

587
00:37:26,942 --> 00:37:30,265
and rather than it being a full post effect on screen,

588
00:37:30,305 --> 00:37:32,187
the whole thing we just needed in certain places

589
00:37:32,227 --> 00:37:34,950
where we kind of needed the puddle shader,

590
00:37:35,530 --> 00:37:38,353
the puddle entity that we needed to puddle down in places.

591
00:37:39,293 --> 00:37:42,777
And we like these screen space reflections

592
00:37:42,817 --> 00:37:45,199
because they have a very simple, very flexible setup

593
00:37:45,239 --> 00:37:47,081
rather than going through.

594
00:37:48,154 --> 00:37:52,117
uh... doing a planar reflection where you need to tag objects that need to be rendered or

595
00:37:52,137 --> 00:37:56,899
make a cube map or anything heavy like that. This just reflects

596
00:37:57,600 --> 00:37:59,321
what's on screen without any sort of

597
00:38:00,501 --> 00:38:01,081
heavy duty work.

598
00:38:02,289 --> 00:38:04,170
And setup wise, it's very simple.

599
00:38:04,190 --> 00:38:06,992
You just get the color that you want the reflection to be,

600
00:38:07,132 --> 00:38:09,433
at least for us, and the background color, which is,

601
00:38:09,794 --> 00:38:11,215
well, if the ray doesn't hit anything,

602
00:38:11,255 --> 00:38:12,355
we need to displace something.

603
00:38:13,076 --> 00:38:15,477
Texture for projection, Fresnel power,

604
00:38:15,558 --> 00:38:17,499
and how long do you need the trace distance to be.

605
00:38:17,899 --> 00:38:21,602
So very minimal setup on the material.

606
00:38:22,182 --> 00:38:26,345
But as the advantages is pretty good,

607
00:38:26,385 --> 00:38:27,606
what you see is what we reflect.

608
00:38:27,666 --> 00:38:29,407
That's a very nice thing, but that also means

609
00:38:29,467 --> 00:38:31,468
what you don't see is not reflected.

610
00:38:32,069 --> 00:38:36,150
So in this case, you know, at the edges of the screen, what you usually do with screen-space-perfection

611
00:38:36,170 --> 00:38:39,291
is you would either fade out to the edge or kind of stretch it, but, you know, in this

612
00:38:39,311 --> 00:38:39,891
case, fade out.

613
00:38:40,332 --> 00:38:45,654
And you get these very light, bright edges where we, you know, reflect the sky color

614
00:38:45,954 --> 00:38:49,795
or whatever, very close to the edges of the screen, and it just doesn't look nice.

615
00:38:50,896 --> 00:38:55,218
And this is of course happening because we can't anticipate which way we're reflecting

616
00:38:55,278 --> 00:39:00,060
so we're assuming the normal scope point in which way and we could be reflecting out of

617
00:39:00,100 --> 00:39:04,502
the screen and we need to fade out before that happens to not have like clamp-in textures

618
00:39:04,562 --> 00:39:04,942
or whatever.

619
00:39:04,962 --> 00:39:12,806
And luckily we have, this is not a universal solution, but for us most of the time we place

620
00:39:12,826 --> 00:39:16,988
down a puddle on the ground pointing upward and we're a 2D game mostly looking in toward

621
00:39:17,008 --> 00:39:17,308
the world.

622
00:39:18,100 --> 00:39:22,583
So we can be left with just forcing all normals to point straight up and in

623
00:39:23,223 --> 00:39:25,524
and never have any deviation on the x-axis

624
00:39:25,965 --> 00:39:29,106
which takes care of this problem and now we don't need to fade at all

625
00:39:29,126 --> 00:39:31,768
because there's no way we're going to go off screen anymore

626
00:39:31,848 --> 00:39:32,788
it's just not going to happen.

627
00:39:33,629 --> 00:39:38,391
Now, that's the first way that we can not see what we want to reflect

628
00:39:38,811 --> 00:39:39,892
and have a fix for that.

629
00:39:39,932 --> 00:39:44,575
But the other thing is a little bit more bitchy to handle which is...

630
00:39:46,567 --> 00:39:48,108
if you have something behind something.

631
00:39:48,168 --> 00:39:51,350
So, like, say our boy is jumping in front of a haystack

632
00:39:51,390 --> 00:39:54,492
and we've got a camera and we need to reflect that somehow.

633
00:39:54,632 --> 00:39:56,334
So we have a camera and we have a reflection ray.

634
00:39:56,934 --> 00:39:59,556
Anything that's behind the boy is technically invisible.

635
00:39:59,616 --> 00:40:01,137
It looks like this. We don't know what it is.

636
00:40:02,058 --> 00:40:07,201
But of course we're not going to reflect him as if he's infinitely deep.

637
00:40:08,282 --> 00:40:10,083
In fact, we're going to pretend he's quite shallow.

638
00:40:11,073 --> 00:40:14,074
uh... we need to have a little bit of a

639
00:40:14,574 --> 00:40:16,875
cut it off right here, we're going to say that there's an edge

640
00:40:17,535 --> 00:40:21,356
and in this case we're just missing everything, we're just going to reflect off the sky

641
00:40:21,396 --> 00:40:22,496
and it's going to look awful

642
00:40:23,657 --> 00:40:24,037
uh...

643
00:40:25,157 --> 00:40:27,618
with checking that depth parameter

644
00:40:28,873 --> 00:40:32,335
But of course we're not just reflecting a full resolution thing.

645
00:40:32,355 --> 00:40:35,597
We're taking very quantized steps.

646
00:40:35,657 --> 00:40:40,179
We're only stepping about 16, 24 times through this reflection algorithm.

647
00:40:40,740 --> 00:40:44,082
So actually what we're reflecting through looks something like this.

648
00:40:44,902 --> 00:40:45,903
Instead for each step...

649
00:40:46,800 --> 00:40:52,526
And what we want to find in order to fix this problem is we want to find these two edges

650
00:40:52,546 --> 00:40:57,811
because they're going to be useful. What we want to do is take a mix of what's just above

651
00:40:57,871 --> 00:41:01,915
and below these things and assume that we can kind of like stitch it together behind them like that.

652
00:41:02,416 --> 00:41:05,138
So we need to find these. How do we do that? Well let's try to step through.

653
00:41:06,471 --> 00:41:09,653
For it, we're gonna need a few parameters

654
00:41:09,714 --> 00:41:10,914
to keep in our pocket.

655
00:41:11,435 --> 00:41:13,656
When we are tracing, we need the depth

656
00:41:13,716 --> 00:41:16,238
from the last time, from the last step,

657
00:41:16,738 --> 00:41:18,279
we need the difference between the depth

658
00:41:18,339 --> 00:41:19,360
and the ray from the last step,

659
00:41:19,840 --> 00:41:21,762
and we just need the old position from the last step.

660
00:41:22,442 --> 00:41:25,644
So, if we are not behind something,

661
00:41:25,844 --> 00:41:27,325
we save these things, like last time

662
00:41:27,385 --> 00:41:30,147
we were successfully aware of our surroundings,

663
00:41:30,167 --> 00:41:33,590
we save these guys, and then we always save the last depth.

664
00:41:34,470 --> 00:41:35,872
So we step through and...

665
00:41:35,892 --> 00:41:37,734
Oh! That was a hard wall there.

666
00:41:37,974 --> 00:41:39,897
So we're no longer going to be saving the old...

667
00:41:40,558 --> 00:41:41,639
Old diff and old position.

668
00:41:41,719 --> 00:41:44,443
So we save those for later because we want to sample the old position.

669
00:41:45,224 --> 00:41:46,846
And we keep stepping and...

670
00:41:46,866 --> 00:41:48,588
Oh! Shit! That was the other one.

671
00:41:49,249 --> 00:41:50,090
So we checked...

672
00:41:51,153 --> 00:41:54,135
the last depth and the current depth you see,

673
00:41:54,175 --> 00:41:55,455
well if they're very far apart,

674
00:41:55,475 --> 00:41:58,197
there was probably like a split there somewhere.

675
00:41:58,817 --> 00:42:00,238
And then using that information,

676
00:42:00,278 --> 00:42:02,019
we just take the old position from last time

677
00:42:02,560 --> 00:42:03,720
that we were down at the red line,

678
00:42:04,160 --> 00:42:05,041
and the position now,

679
00:42:05,161 --> 00:42:08,423
and just kind of like sample somewhere on that line

680
00:42:08,443 --> 00:42:10,444
with like two samples and just there between them.

681
00:42:11,085 --> 00:42:14,927
And that actually covers 90% of our scenes

682
00:42:14,947 --> 00:42:16,568
that we would have otherwise with the boy

683
00:42:17,028 --> 00:42:18,809
or any occluder in the game.

684
00:42:20,382 --> 00:42:26,247
And finally, for projection maps on this guy,

685
00:42:28,008 --> 00:42:31,511
we have a view ray, and we wanna put it into frustum.

686
00:42:31,651 --> 00:42:32,812
We wanna make a frustum ray.

687
00:42:33,352 --> 00:42:36,435
So unlike, what's it called, the projected decals,

688
00:42:36,475 --> 00:42:40,298
we don't need to take some view space to object space.

689
00:42:40,338 --> 00:42:42,740
We need to take it to a projected space,

690
00:42:43,580 --> 00:42:46,002
a skewed space here.

691
00:42:46,927 --> 00:42:50,368
and uh... the naive way to do that would be to uh... you know

692
00:42:51,129 --> 00:42:54,130
take your uh... your reflective position

693
00:42:54,851 --> 00:42:57,392
and uh... put it through a full matrix and then subtract your

694
00:42:57,932 --> 00:42:59,613
your screen space position

695
00:42:59,873 --> 00:43:00,494
but uh...

696
00:43:00,954 --> 00:43:04,476
I don't like that so much. Also it doesn't handle the near clip plane. If anything goes

697
00:43:04,536 --> 00:43:05,256
behind that you

698
00:43:05,837 --> 00:43:07,157
just start going back into

699
00:43:07,558 --> 00:43:09,178
infinite negativity

700
00:43:09,979 --> 00:43:10,079
so

701
00:43:11,298 --> 00:43:14,139
Our solution to this is to cheat a little bit

702
00:43:14,959 --> 00:43:16,880
and create a little variable on the CPU

703
00:43:17,040 --> 00:43:20,981
where we need the size of the viewport in projected space.

704
00:43:21,061 --> 00:43:25,242
Like on X and Y, we get the resolution of the screen

705
00:43:25,282 --> 00:43:29,083
and the aspect ratio and field of view.

706
00:43:29,243 --> 00:43:32,504
And for the set value, we just need the depth range,

707
00:43:32,644 --> 00:43:33,665
which looks like that.

708
00:43:34,185 --> 00:43:37,806
And then in order to transform a view ray

709
00:43:37,846 --> 00:43:40,246
into a projected ray, it just looks like this instead.

710
00:43:40,987 --> 00:43:44,429
and it handles anything behind camera just fine now.

711
00:43:46,070 --> 00:43:48,151
So, that's raised now.

712
00:43:48,572 --> 00:43:50,953
Like I said, we only do a few steps,

713
00:43:51,013 --> 00:43:54,275
and just like the volume lighting,

714
00:43:54,556 --> 00:43:58,278
we need to do something about these step artifacts.

715
00:43:58,318 --> 00:44:00,980
So obviously, you add some noise to your first step,

716
00:44:01,740 --> 00:44:04,302
and you've got some jittering going on.

717
00:44:04,482 --> 00:44:05,102
And this is just to...

718
00:44:06,956 --> 00:44:12,478
reiterate that white noise is nice and easy but very noisy.

719
00:44:13,559 --> 00:44:17,860
Bayonet UCs are still nice and structural but structural in the bad way too.

720
00:44:18,601 --> 00:44:23,062
And blue noise is our general saviour and you too should use it.

721
00:44:24,043 --> 00:44:26,744
And with simple anti-aliasing it's really, really nice.

722
00:44:27,884 --> 00:44:31,085
So finally, about that thickness, the wall thickness.

723
00:44:32,842 --> 00:44:36,763
With screen-spreader perfection, like I said, we can't assume that the depth buffer is the

724
00:44:36,803 --> 00:44:39,364
perfect information of what's on screen.

725
00:44:39,424 --> 00:44:41,525
You know, it's just the outer shell, the first thing we can see.

726
00:44:42,125 --> 00:44:44,786
So we need to step through it assuming some sort of wall thickness.

727
00:44:45,387 --> 00:44:50,789
And we want to get away with the minimum thickness we can basically come up with, to not have

728
00:44:50,829 --> 00:44:55,951
any stretched objects, or as artists called it, the boy with MC hammer pants.

729
00:44:58,289 --> 00:45:02,572
and the simple way that we started simulating this thickness is to say well

730
00:45:02,993 --> 00:45:07,596
let's use the uh... you know how much is our screen rate moving in set

731
00:45:07,656 --> 00:45:09,697
and just say that's our thickness because that means

732
00:45:10,298 --> 00:45:14,320
if between now and the last step we have passed through some depth

733
00:45:14,520 --> 00:45:15,141
we're good

734
00:45:15,681 --> 00:45:18,503
but that has one problem at that wall there and the wall is pointing

735
00:45:19,704 --> 00:45:23,246
45 degrees to the viewer, which means the view ray is going straight across the screen,

736
00:45:23,286 --> 00:45:26,289
which means it's not moving instead at all, and it won't reflect a thing.

737
00:45:26,949 --> 00:45:28,210
That... that sucks.

738
00:45:29,111 --> 00:45:34,975
And, um, well, if I take what that view ray set was made of, this is what it was made of,

739
00:45:35,635 --> 00:45:39,018
and all you really have to do is take out the reflection direction itself,

740
00:45:39,718 --> 00:45:44,161
and just use that, so that's like the total potential movement that it will have.

741
00:45:44,902 --> 00:45:45,863
And you've got a...

742
00:45:47,625 --> 00:45:49,608
You've got my favorite wall thickness there at least.

743
00:45:50,729 --> 00:45:53,894
It will basically catch anything on its way.

744
00:45:57,048 --> 00:46:00,750
Another way that we use reflections, but different reflections, are of course for water.

745
00:46:00,790 --> 00:46:03,372
So we've got some water rendering system.

746
00:46:03,532 --> 00:46:06,814
For those of you who played the game, we have quite a long water section.

747
00:46:07,555 --> 00:46:09,376
So, yeah, we need a bunch of water.

748
00:46:10,036 --> 00:46:12,398
And we need a few layers for this water.

749
00:46:13,258 --> 00:46:17,781
We need some fogginess or murkiness, like see the depth of it.

750
00:46:18,382 --> 00:46:23,866
We need to render a bunch of transparencies into it, like you mentioned, the volume lighting

751
00:46:23,886 --> 00:46:29,251
underneath the water to sort of sell the thickness of it, stuff like that.

752
00:46:29,951 --> 00:46:31,272
And we need to refract it.

753
00:46:32,684 --> 00:46:35,606
and make it watery.

754
00:46:35,967 --> 00:46:37,108
And finally, reflections.

755
00:46:37,768 --> 00:46:39,430
And these are not screen-space reflections.

756
00:46:39,490 --> 00:46:42,333
These are planar reflections, because on a big water surface

757
00:46:42,353 --> 00:46:44,535
that just spans most of the screen, a lot of the time,

758
00:46:44,575 --> 00:46:46,537
we just can't handle the artifacts.

759
00:46:46,557 --> 00:46:51,021
So for this one, we do use planar camera reflections.

760
00:46:53,875 --> 00:46:59,179
And so we render out these layers as individual objects

761
00:46:59,239 --> 00:47:01,061
because it's actually the abstraction layer

762
00:47:01,081 --> 00:47:02,882
that we think about water is actually useful

763
00:47:02,922 --> 00:47:03,763
for rendering as well.

764
00:47:04,503 --> 00:47:06,705
So this is what happened when we were above.

765
00:47:06,905 --> 00:47:09,627
When we were below, we actually flipped the rendering order.

766
00:47:09,847 --> 00:47:11,849
So we render reflection first

767
00:47:11,929 --> 00:47:14,291
because that's the furthest away thing.

768
00:47:14,311 --> 00:47:15,992
You know, we render back to front

769
00:47:16,032 --> 00:47:17,273
like any transparency you do.

770
00:47:17,853 --> 00:47:19,975
Then we render the murkiness on top of that

771
00:47:19,995 --> 00:47:22,196
because we wanna murkify the reflection too.

772
00:47:22,945 --> 00:47:28,968
then the refraction, and finally the transparency is down here so they don't get affected by that fog or anything when we're down under.

773
00:47:30,009 --> 00:47:41,356
And now for each of these layers, in order to get a consistent surface, we actually render each layer three times.

774
00:47:42,036 --> 00:47:47,079
We render first up a displacement edge close to the camera, which...

775
00:47:48,800 --> 00:47:52,404
looks something like this with wireframe turned on and that's like from the camera perspective

776
00:47:52,604 --> 00:47:58,028
just a bunch of things that only exist in the frustum making waves and just making sure that

777
00:47:58,048 --> 00:48:03,933
when you pass through there isn't like this oh the water was a pancake i guess flat polygon effect

778
00:48:04,173 --> 00:48:09,438
and just makes it look deeper it only goes about six to eight meters into the screen but that's

779
00:48:09,598 --> 00:48:14,222
all you need for parallax in order to sell the the deepness of the water

780
00:48:15,089 --> 00:48:19,312
then we render the outside of a box which takes care of the rest of the

781
00:48:19,372 --> 00:48:20,213
outside surface

782
00:48:20,853 --> 00:48:23,215
so kinda like the outer faces of a box in case

783
00:48:23,655 --> 00:48:25,497
this like this water volume here is a box

784
00:48:26,397 --> 00:48:27,959
and uh... when we're done with that

785
00:48:28,339 --> 00:48:30,361
then we render the inside face of the box

786
00:48:30,821 --> 00:48:34,064
but you'll notice it doesn't render on top of what we've already rendered and that's

787
00:48:34,104 --> 00:48:34,464
because

788
00:48:35,244 --> 00:48:35,685
for each

789
00:48:35,705 --> 00:48:38,047
yeah this is how it looks like by the way for each

790
00:48:38,847 --> 00:48:39,808
of these uh...

791
00:48:40,617 --> 00:48:43,100
for each of these layers that we render out,

792
00:48:43,160 --> 00:48:44,841
we actually write into a stencil bit.

793
00:48:45,422 --> 00:48:47,564
Let's call it the I have rendered water stencil bit.

794
00:48:48,325 --> 00:48:51,208
And if any geometry reads from that bit

795
00:48:51,228 --> 00:48:52,289
that it's already been rendered,

796
00:48:52,309 --> 00:48:53,790
it'll just discard the fragments.

797
00:48:54,491 --> 00:48:58,194
So we render the transparencies front to back

798
00:48:58,234 --> 00:49:00,376
rather than back to front with rejection instead.

799
00:49:00,396 --> 00:49:02,418
So we only have one layer.

800
00:49:03,039 --> 00:49:05,021
So it's kind of like a pseudo set buffer in a way.

801
00:49:06,539 --> 00:49:13,008
And, yeah, that's it for now. Let's change gears and go into a little bit more of the VFX area with some smoky smoke.

802
00:49:17,733 --> 00:49:23,000
So, that very simple smoke stack there had a bunch of effects on it. Let's try it again and just stop it.

803
00:49:25,507 --> 00:49:27,188
and uh... the strategy of all the events

804
00:49:27,928 --> 00:49:31,370
so that's it now it looks very plain and in fact it looks like it's

805
00:49:31,930 --> 00:49:33,751
blending into the background you can barely see it

806
00:49:34,211 --> 00:49:36,992
that's because it's base color is just the ambient color of the room

807
00:49:37,533 --> 00:49:40,094
and nothing else so that it will blend in most cases

808
00:49:40,654 --> 00:49:43,536
now the first effect we put on is the presence of

809
00:49:43,556 --> 00:49:48,318
a uh... we have a fake point light that we attached to the uh...

810
00:49:48,818 --> 00:49:51,760
to the smoke to make it look like it's been hit by the light from the window

811
00:49:51,800 --> 00:49:52,520
kind of grounded in

812
00:49:53,521 --> 00:49:54,441
and uh... up next

813
00:49:55,323 --> 00:50:00,165
The texture itself, we need to wobble it a little bit around in order to sell some extra...

814
00:50:01,245 --> 00:50:06,947
Sorry, we need to light this thing a little bit more just to sell some gradient.

815
00:50:07,047 --> 00:50:11,489
We need to have it lit from top and darken from below to kind of ground it.

816
00:50:11,589 --> 00:50:16,191
And it's very hard to see, but if you pay close attention, there it is, and there it's not, and there it is.

817
00:50:16,951 --> 00:50:17,471
And finally...

818
00:50:18,385 --> 00:50:22,791
we rub all the texture around a little bit, which just gives a little bit of sub-particle motion where

819
00:50:23,412 --> 00:50:26,656
it'll be hard to tell where one particle starts and the other...

820
00:50:27,477 --> 00:50:30,241
one particle ends and the other starts, just because they sort of...

821
00:50:30,962 --> 00:50:33,085
yeah, the texture itself is not fully...

822
00:50:35,722 --> 00:50:40,523
comprehensible. And we wobble it around using this, I like to call it swirl noise, which is basically

823
00:50:41,383 --> 00:50:42,384
a UV

824
00:50:43,444 --> 00:50:46,765
Map in Photoshop with the swirl effect a bunch of times on it

825
00:50:47,665 --> 00:50:50,546
and just apply it over and over a few times

826
00:50:51,587 --> 00:50:55,988
and we scroll it downwards in this case to kind of like give the effect that the

827
00:50:57,028 --> 00:51:03,690
Steam in this case is going downwards, but it could also go upwards in whichever which way it's just it's scrolled one way in world space, basically

828
00:51:10,967 --> 00:51:13,290
So next up, some more vapor of the hotter kind.

829
00:51:13,310 --> 00:51:20,979
So I'm throwing around this box just to sort of illustrate how

830
00:51:22,061 --> 00:51:28,288
it handles movement somewhat well and remains fiery throughout said movement.

831
00:51:34,146 --> 00:51:38,748
So, we've got the smoke effect going up in the background as well here.

832
00:51:39,349 --> 00:51:41,210
That's just the same smoke as before with the light.

833
00:51:41,770 --> 00:51:45,872
But the fire, what makes it special, it's using all the same effects,

834
00:51:45,972 --> 00:51:49,414
the distortion and all that, and even a bit of gradient lighting,

835
00:51:49,434 --> 00:51:53,016
but the most important part about the fire is consistent coloring.

836
00:51:54,330 --> 00:52:02,979
When we first tried fire, we just had like, you know, fire going from red to orange to yellow and white in the middle, and then blue at the edges.

837
00:52:03,099 --> 00:52:09,346
But then, if a lot of layers of blue are layered on top of each other, you could end up with a very bright blue that would look really crappy.

838
00:52:09,426 --> 00:52:10,487
So what we do, we have...

839
00:52:11,348 --> 00:52:16,789
essentially a fire buffer. That's a lie, but we have a fire buffer, which is just the alpha

840
00:52:16,829 --> 00:52:23,291
buffer of what we're rendering into. The alpha buffer is the HDR bloom value that we already

841
00:52:23,371 --> 00:52:28,852
use, so that makes perfect sense because, well, the fire is going to bloom, so why not use this?

842
00:52:29,552 --> 00:52:34,334
So we render out a bunch of black and white sprites of essentially fireiness or hotness

843
00:52:34,414 --> 00:52:38,715
buffer into one consistent thing with additive blend mode.

844
00:52:39,295 --> 00:52:42,097
And then we apply one gradient to this

845
00:52:42,317 --> 00:52:43,978
before we read it back into RGB.

846
00:52:45,119 --> 00:52:48,361
And that makes every individual sprite look like this

847
00:52:48,561 --> 00:52:50,162
or composite it like so.

848
00:52:51,183 --> 00:52:53,264
And it just makes it more consistent

849
00:52:53,304 --> 00:52:54,625
to look at color-wise.

850
00:52:55,786 --> 00:52:59,008
Now, with fire, motion was not enough

851
00:52:59,088 --> 00:53:01,170
to just have with distortions.

852
00:53:01,330 --> 00:53:06,454
We've also got this here map of, what's it called?

853
00:53:06,514 --> 00:53:07,114
It's called Thipbook.

854
00:53:08,091 --> 00:53:11,996
So we've got a flipbook to go through and we had a couple of issues with this

855
00:53:12,057 --> 00:53:19,627
We're trying to like animate these just very few cartoony frames of fire and we tried first, you know going sequentially

856
00:53:19,687 --> 00:53:23,331
but then that would mean that these nine frames would loop every one second and would look very

857
00:53:24,213 --> 00:53:26,215
loopy and then we tried doing random but

858
00:53:26,903 --> 00:53:30,446
there's an 11 point something chance, percent chance,

859
00:53:30,666 --> 00:53:32,307
that you will hit the same frame twice,

860
00:53:32,387 --> 00:53:34,809
which will, so the eyes just look like lag,

861
00:53:34,849 --> 00:53:35,589
so that was horrible.

862
00:53:36,190 --> 00:53:37,891
So we used an in-between thing,

863
00:53:37,971 --> 00:53:40,973
which is, you know, we choose columns sequentially,

864
00:53:41,494 --> 00:53:43,916
and we choose rows randomly,

865
00:53:44,296 --> 00:53:47,178
which means that we don't get looping that often,

866
00:53:47,358 --> 00:53:49,900
and we definitely don't get two frames at the same time,

867
00:53:50,060 --> 00:53:51,341
and that worked out really well for us.

868
00:53:53,122 --> 00:53:59,966
Now, to animate between these different layers, this is if I just make each flip of piece

869
00:54:00,206 --> 00:54:04,508
a solid color, a random solid color, it would look like this, but of course we don't flip

870
00:54:04,548 --> 00:54:09,230
between them hard, we fade between them, but we also don't do that, we fade between them

871
00:54:09,390 --> 00:54:14,313
using a vertical gradient upward, with noise, because why not?

872
00:54:15,793 --> 00:54:16,834
And that's fire.

873
00:54:17,834 --> 00:54:19,415
Next up, the Bay Flares.

874
00:54:21,340 --> 00:54:24,762
So we've got these events fairs and unlike the bloom they are very

875
00:54:25,182 --> 00:54:27,163
like specifically put in like you put in

876
00:54:28,043 --> 00:54:31,945
a events fair entity onto a flashlight or onto something bright and

877
00:54:32,165 --> 00:54:33,106
it'll flare up

878
00:54:34,006 --> 00:54:34,646
and uh...

879
00:54:35,527 --> 00:54:38,588
we do this just because we like to have our you know our

880
00:54:38,928 --> 00:54:41,929
hdr bloom settings different from the flashlight settings

881
00:54:42,530 --> 00:54:45,371
and the flashlight might be smaller than one pixel so it wouldn't get picked up

882
00:54:45,391 --> 00:54:45,431
uh...

883
00:54:45,451 --> 00:54:45,611
so

884
00:54:48,830 --> 00:54:53,052
The way we do it is with a quadrant, like a 2x2 sprite there.

885
00:54:54,553 --> 00:55:00,336
And in order to have occlusion from things, we could do what the standard thing is,

886
00:55:00,437 --> 00:55:04,739
is to just ray trace toward the screen and get collision a bunch of times,

887
00:55:04,819 --> 00:55:06,900
but A, that would be expensive.

888
00:55:06,940 --> 00:55:11,063
B, we don't want to set up collision on trees that the boy or anyone is never going to collide with.

889
00:55:11,083 --> 00:55:11,703
That would suck.

890
00:55:12,203 --> 00:55:12,764
So what we do is...

891
00:55:13,779 --> 00:55:22,807
For each point in the vertices here, we sample the depth buffer per vertex a bunch of times, stochastically,

892
00:55:23,768 --> 00:55:26,010
because that's only four times rather than per pixel.

893
00:55:26,570 --> 00:55:29,292
But of course we don't sample at the corners, we sample at the middle.

894
00:55:30,332 --> 00:55:34,715
and you know we pass this on to uh... to the fragment shader and multiply it by the texture of the fair

895
00:55:35,156 --> 00:55:35,616
but of course

896
00:55:36,177 --> 00:55:38,178
we could sample it not at the middle

897
00:55:38,719 --> 00:55:42,122
but slightly between the corners and the middle just to get like this

898
00:55:42,682 --> 00:55:45,485
gradient going across making it look like it's got some volume

899
00:55:46,045 --> 00:55:49,808
because it's free we're sampling all four vertices anyway we might as well give them a little variation

900
00:55:49,828 --> 00:55:51,630
and that's basically that

901
00:55:52,270 --> 00:55:52,931
so next up

902
00:55:53,311 --> 00:55:53,772
some water

903
00:55:54,692 --> 00:55:55,053
more water

904
00:56:04,809 --> 00:56:05,951
and we're not just talking about water

905
00:56:06,493 --> 00:56:09,239
rendering here we're talking specifically about effects on top of the water

906
00:56:10,061 --> 00:56:12,146
and uh... here we've got this uh... stack of uh...

907
00:56:13,272 --> 00:56:17,074
of foam, that Olympic dye foam going on.

908
00:56:17,154 --> 00:56:19,835
And it's got a bunch of effects, almost the same effects,

909
00:56:20,375 --> 00:56:23,636
no, sorry, exactly the same effects as the smokestack.

910
00:56:24,176 --> 00:56:26,177
So if I take them all off, they look like...

911
00:56:26,757 --> 00:56:29,038
If I take the motion off, it looks like this, all still.

912
00:56:29,779 --> 00:56:32,000
If I take the lighting off, it looks like this, all flat.

913
00:56:32,680 --> 00:56:35,401
And putting back in the gradient lighting and the motion,

914
00:56:35,421 --> 00:56:36,741
it looks like this.

915
00:56:36,981 --> 00:56:40,603
So it just kind of like, blends a bunch of sprites together really well,

916
00:56:40,623 --> 00:56:42,043
makes it look really thick.

917
00:56:43,475 --> 00:56:45,637
Over here we've got this flashlight.

918
00:56:45,797 --> 00:56:48,399
And for those who haven't played it,

919
00:56:48,419 --> 00:56:52,001
if you go into that flashlight, you suffer.

920
00:56:52,381 --> 00:56:55,643
So we need to emphasize this flashlight

921
00:56:55,883 --> 00:56:56,684
with a bunch of effects.

922
00:56:57,104 --> 00:57:01,427
And the effects that we use are, first of all, the rain.

923
00:57:01,667 --> 00:57:04,889
So we have a bunch of rain.

924
00:57:05,955 --> 00:57:10,520
and uh... we tried both doing like post effect scrolling things but that didn't

925
00:57:10,540 --> 00:57:12,181
really have any good parallax in it

926
00:57:13,042 --> 00:57:14,243
then we tried some sprites

927
00:57:15,044 --> 00:57:18,368
scrolling down with textures of rain but that was a lot of overdraw so what we ended up

928
00:57:18,388 --> 00:57:18,868
with was

929
00:57:18,888 --> 00:57:20,670
a mesh

930
00:57:21,671 --> 00:57:22,432
with individual

931
00:57:22,892 --> 00:57:23,613
raindrops in it

932
00:57:24,454 --> 00:57:26,916
and uh... that has much less overdraw but uh...

933
00:57:28,877 --> 00:57:30,278
but animation could be more costly.

934
00:57:30,298 --> 00:57:32,499
So what we do is we just have a vertex shader

935
00:57:32,559 --> 00:57:33,900
that for the raindrops going down,

936
00:57:34,321 --> 00:57:37,343
as soon as the vertex hits the bottom of a volume,

937
00:57:37,403 --> 00:57:39,144
it just goes back on top and goes down again.

938
00:57:39,865 --> 00:57:40,125
That's it.

939
00:57:40,905 --> 00:57:42,547
And the splashes on the ground,

940
00:57:43,187 --> 00:57:45,909
all they do is expand with a random rotation,

941
00:57:45,929 --> 00:57:47,910
and as soon as they're done with that and fade out,

942
00:57:48,071 --> 00:57:50,212
they go to a new position and do that again.

943
00:57:50,793 --> 00:57:52,574
And we just do that using, like,

944
00:57:52,714 --> 00:57:55,056
the animation unfolding is, you know,

945
00:57:55,096 --> 00:57:56,216
the fractional part of time.

946
00:57:56,297 --> 00:57:57,637
So for every half second,

947
00:57:59,042 --> 00:58:00,863
it goes up and for every

948
00:58:02,505 --> 00:58:06,628
integer part of time it moves to a new position with a new seed

949
00:58:07,229 --> 00:58:10,792
and that's basically it for them. Next up we've got

950
00:58:10,812 --> 00:58:13,234
the volume lighting above the water to just

951
00:58:14,055 --> 00:58:19,160
show where it is and finally we've got this

952
00:58:19,200 --> 00:58:20,941
plane on the water just showing

953
00:58:21,462 --> 00:58:24,264
where it's hitting the water itself with basic

954
00:58:26,344 --> 00:58:29,687
It's called Fong, specular lighting and a bit of diffuse lighting.

955
00:58:31,388 --> 00:58:36,392
Going underneath, we have a bunch of the same effects and a little new one.

956
00:58:39,254 --> 00:58:43,858
So the different effect down here is we have these dust moats underneath the water that are lit up by the...

957
00:58:44,851 --> 00:58:47,793
by the spotlight and they're lit up the same way that the

958
00:58:48,373 --> 00:58:51,276
they're moving the same way that the spotlight, that the raindrops are

959
00:58:51,796 --> 00:58:55,158
they just move across and when they come to the other edge they

960
00:58:55,318 --> 00:58:58,341
loop back in and just keep going. They just scroll

961
00:58:59,762 --> 00:59:02,203
across in a volume and

962
00:59:03,244 --> 00:59:04,425
come back to the start using

963
00:59:04,465 --> 00:59:09,348
what is called modulus, that operator, fmod

964
00:59:10,668 --> 00:59:13,609
and uh... we've got the volume light underneath but unlike the one above

965
00:59:13,989 --> 00:59:16,230
of course these are different volumes just like you said

966
00:59:16,930 --> 00:59:18,331
uh... this one underneath has

967
00:59:19,291 --> 00:59:20,391
uh... a texture on it

968
00:59:21,171 --> 00:59:21,872
that's animating

969
00:59:22,472 --> 00:59:24,692
of like caustics to make it look more underwater

970
00:59:25,353 --> 00:59:28,414
and finally the phone reflection which is now a phone refraction

971
00:59:29,894 --> 00:59:31,494
just to show exactly where the light is

972
00:59:33,495 --> 00:59:34,355
and that's it for under

973
00:59:35,488 --> 00:59:39,830
So for above water we've got these waves coming out from the buoy there.

974
00:59:40,430 --> 00:59:43,170
I could have chosen a better place to show these because they're very subtle here.

975
00:59:44,331 --> 00:59:48,092
So the way these waves are done is they just resample the reflection and refraction

976
00:59:48,512 --> 00:59:50,492
with some wavy distortion around him.

977
00:59:50,913 --> 00:59:56,894
They're done with particle-based rings, like just these little ring meshes that go outward.

978
00:59:57,134 --> 00:59:59,615
And the way we get those distortion normals is very simple.

979
01:00:02,175 --> 01:00:06,958
the direction around the ring, and we have the phase from center to outward,

980
01:00:07,499 --> 01:00:11,621
and we just take that direction on the ring as the normal,

981
01:00:11,681 --> 01:00:15,003
and multiply it by a sine that's sampled over the phase of it.

982
01:00:15,403 --> 01:00:19,246
So it's, you know, zero at the start, zero in the middle, and zero on the other edge,

983
01:00:19,626 --> 01:00:23,668
and then negative a lot in the first third,

984
01:00:24,189 --> 01:00:28,371
and positive a lot on the second third, and that gives a wave normal, essentially.

985
01:00:29,952 --> 01:00:31,773
And now for a different type of water.

986
01:00:36,128 --> 01:00:37,189
so this is the uh...

987
01:00:37,930 --> 01:00:38,871
this is the whirlpool

988
01:00:40,112 --> 01:00:43,235
and uh... this one has much different motion on it

989
01:00:44,076 --> 01:00:47,660
uh... so it's got some motion going outward rather than just scrolling across

990
01:00:48,540 --> 01:00:53,065
and uh... the way we do that is with this uh... this mesh here, this high poly mesh

991
01:00:53,125 --> 01:00:55,007
and the reason is it's high poly is rather than

992
01:00:55,507 --> 01:00:57,469
calculating these texture coordinates in uh...

993
01:00:58,570 --> 01:01:00,972
In Fragment, we just made it higher polycount

994
01:01:00,992 --> 01:01:03,693
so we could calculate it in vertex instead.

995
01:01:04,173 --> 01:01:08,555
Now, we could have picked scrolling, expanding textures

996
01:01:08,675 --> 01:01:10,536
outward, but that would be somewhat difficult.

997
01:01:10,636 --> 01:01:13,298
What we chose instead was this scrolling outward,

998
01:01:13,618 --> 01:01:15,479
but that makes texturing somewhat more difficult.

999
01:01:16,119 --> 01:01:17,780
So the texture that we have scrolling outward

1000
01:01:17,820 --> 01:01:18,340
looks like this.

1001
01:01:19,247 --> 01:01:24,070
And the criteria before was it had to look wavy and it had to tile really well, but in

1002
01:01:24,110 --> 01:01:25,011
a non-obvious way.

1003
01:01:25,732 --> 01:01:31,616
So luckily there is a good way to tile these things that you might have seen outside.

1004
01:01:31,957 --> 01:01:37,421
Like these cobblestone bricks, they tile perfectly, with a wave shape, like water.

1005
01:01:38,061 --> 01:01:41,904
So if I took a picture of this, started tracing lines of the wave shapes.

1006
01:01:42,683 --> 01:01:48,505
then took some stock images of waves and layered them underneath and then removed the lines.

1007
01:01:48,585 --> 01:01:52,527
Suddenly you've got a texture that looks like, well that doesn't tile, but it totally tiles.

1008
01:01:53,467 --> 01:01:57,608
And yeah, that makes up for a pretty good tiling foam texture.

1009
01:01:58,509 --> 01:01:58,929
You guys.

1010
01:02:00,390 --> 01:02:02,010
Finally, we've got this flood.

1011
01:02:05,571 --> 01:02:07,152
Which is a lot more dramatic with sound.

1012
01:02:12,794 --> 01:02:14,896
it's got a bunch of elements stuff we've already

1013
01:02:15,337 --> 01:02:15,817
talked about

1014
01:02:15,837 --> 01:02:17,739
couple of new ones

1015
01:02:17,759 --> 01:02:19,201
just stuff we've talked about

1016
01:02:20,242 --> 01:02:22,083
first up we've got this water volume

1017
01:02:22,424 --> 01:02:23,124
coming outward

1018
01:02:23,365 --> 01:02:25,647
and it's using our full water rendering

1019
01:02:26,308 --> 01:02:26,968
uh... thing

1020
01:02:27,927 --> 01:02:30,747
and uh... that thing however is of course animated

1021
01:02:31,528 --> 01:02:36,469
so how it looks like it's using three morph targets one for before breaking

1022
01:02:36,569 --> 01:02:37,649
one for after and one

1023
01:02:38,490 --> 01:02:39,590
uh... for in between

1024
01:02:39,610 --> 01:02:42,351
it looks like this if you just look at the

1025
01:02:42,391 --> 01:02:42,871
mesh itself

1026
01:02:43,691 --> 01:02:47,552
so we're using morph targets exported from 3ds max with these three

1027
01:02:47,592 --> 01:02:48,813
water shapes and animate them

1028
01:02:49,533 --> 01:02:51,033
and that's how we do the animation of that

1029
01:02:52,094 --> 01:02:56,055
and uh... we scroll textures on it the same way that we did on the whirlpool

1030
01:02:57,188 --> 01:02:57,888
and uh... then

1031
01:02:59,350 --> 01:03:01,631
uh... we've got this uh... thing on the ground this uh...

1032
01:03:02,452 --> 01:03:06,995
this big decal of uh... screen space perfections and the same wave texture

1033
01:03:07,055 --> 01:03:09,377
that we had before scrolling in the same way that we did before

1034
01:03:09,397 --> 01:03:13,680
uh... and the texture coordinates what was important to the texture coordinates

1035
01:03:13,720 --> 01:03:14,441
was that they

1036
01:03:15,142 --> 01:03:16,422
uh... are faster in the beginning

1037
01:03:17,003 --> 01:03:20,385
and then kind of like ease out as it goes out toward the end of the decal

1038
01:03:20,866 --> 01:03:24,569
and we do that by just having like applying power to the y component of the

1039
01:03:25,934 --> 01:03:27,675
of the texture coordinate

1040
01:03:28,035 --> 01:03:29,897
so that it goes very fast in the beginning

1041
01:03:29,917 --> 01:03:32,118
and then over time it will slow down

1042
01:03:33,499 --> 01:03:37,082
and finally we've got this carpet of particles

1043
01:03:37,162 --> 01:03:38,403
which are lit from behind

1044
01:03:38,423 --> 01:03:42,566
to just so that these club cars are...

1045
01:03:43,335 --> 01:03:50,121
alighting it and we've got the same thing for an impact down below and

1046
01:03:50,601 --> 01:03:56,326
finally we've just got like some some swooshes that make it more swooshy in the beginning and

1047
01:03:57,067 --> 01:04:00,390
feel more powerful in the start of it and

1048
01:04:00,890 --> 01:04:02,411
That's basically all the components of that

1049
01:04:15,250 --> 01:04:18,352
So in conclusion, if it isn't apparent already for sampling,

1050
01:04:18,412 --> 01:04:20,674
we really like blue noise, and you should like it too.

1051
01:04:21,454 --> 01:04:22,995
We really like temporal anti-aliasing

1052
01:04:23,015 --> 01:04:25,457
because it really lets us do all these stochastic effects

1053
01:04:25,477 --> 01:04:28,139
that we otherwise would not be allowed to do before bedtime.

1054
01:04:29,140 --> 01:04:30,341
You should dither all your things

1055
01:04:30,501 --> 01:04:33,063
with a triangular distribution function.

1056
01:04:34,040 --> 01:04:37,142
And you should expose customizable shaders

1057
01:04:37,762 --> 01:04:40,683
to artists if you're using any sort of deferred pipeline

1058
01:04:40,844 --> 01:04:43,765
or any pipeline whatsoever, because you get cool decals.

1059
01:04:44,666 --> 01:04:47,767
Screen space reflections are cool and useful.

1060
01:04:48,448 --> 01:04:51,289
And non-screen space ambient occlusion

1061
01:04:51,930 --> 01:04:53,951
is cool and useful as well.

1062
01:04:55,257 --> 01:04:58,718
Thanks to all these people, our colleagues at Playdead,

1063
01:04:59,719 --> 01:05:02,219
people at Microsoft, graphics team at Unity,

1064
01:05:02,299 --> 01:05:05,601
Double11 for making our code fast,

1065
01:05:06,481 --> 01:05:08,942
and the Twitterverse for helping with this talk.

1066
01:05:09,682 --> 01:05:16,444
And that's it.

1067
01:05:16,464 --> 01:05:18,285
Thank you.

