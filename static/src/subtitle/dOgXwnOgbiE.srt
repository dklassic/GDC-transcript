1
00:00:05,801 --> 00:00:10,809
How's everybody doing? You guys just got to survive like one more round of GDC hangovers and you're home free.

2
00:00:12,832 --> 00:00:14,174
I definitely am looking forward to that.

3
00:00:15,308 --> 00:00:18,390
Housekeeping. You guys are going to get the emails. You know how that works.

4
00:00:18,851 --> 00:00:22,353
So just pay attention for that. Please, if you've got cell phones, silence them.

5
00:00:22,533 --> 00:00:27,236
If you're not using your laptop to take notes, please close it up and let's get to it.

6
00:00:28,297 --> 00:00:30,779
First of all, I'd just like to say it's a huge honor to be presenting here at GDC 2017.

7
00:00:31,939 --> 00:00:34,081
It's a huge honor that all of you came to see my presentation.

8
00:00:34,101 --> 00:00:35,282
I know there's a lot of good stuff going on.

9
00:00:35,302 --> 00:00:38,624
I know there's a lot of important meetings, so I take it as a personal honor.

10
00:00:39,224 --> 00:00:41,726
I'd specifically like to thank Dave Ranyard from the GDC board

11
00:00:41,746 --> 00:00:44,208
for his feedback on this presentation and while I was working on it.

12
00:00:45,562 --> 00:00:49,945
This presentation is about improving efficiency, eliminating waste.

13
00:00:50,545 --> 00:00:54,808
To get to the meat of the presentation, I gotta give you guys a bit of a crash course

14
00:00:54,948 --> 00:00:56,549
in what is known as operation science.

15
00:00:57,850 --> 00:01:00,772
And that means there's gonna be some math.

16
00:01:02,894 --> 00:01:04,875
So if you're math-phobic like I am, don't worry about it.

17
00:01:04,995 --> 00:01:05,356
Don't freak out.

18
00:01:05,376 --> 00:01:07,297
There's gonna be some formulas, some math, some equations.

19
00:01:08,429 --> 00:01:09,990
And we're gonna be moving a little fast to start.

20
00:01:10,350 --> 00:01:11,211
So just hang in there.

21
00:01:11,611 --> 00:01:12,432
At the end of the presentation,

22
00:01:12,452 --> 00:01:14,633
I'm gonna give you a link to download the annotated slides.

23
00:01:14,933 --> 00:01:16,555
So don't worry about keeping up with every note

24
00:01:17,235 --> 00:01:19,236
or getting every equation exactly right.

25
00:01:19,276 --> 00:01:20,837
If you can follow the basic concepts, you're good.

26
00:01:21,338 --> 00:01:22,639
And then you can download the slides today

27
00:01:22,679 --> 00:01:23,619
and review them at your leisure.

28
00:01:24,140 --> 00:01:24,500
Fair enough?

29
00:01:25,541 --> 00:01:26,441
All right, let's get to it.

30
00:01:27,282 --> 00:01:28,382
So I wanna start off with a story

31
00:01:28,402 --> 00:01:29,443
because they say to always start

32
00:01:29,643 --> 00:01:30,844
these presentations with stories.

33
00:01:31,765 --> 00:01:33,326
And this story takes place 350,000 years ago.

34
00:01:35,294 --> 00:01:38,357
When our genetic ancestors, the hominins, made a discovery.

35
00:01:39,738 --> 00:01:40,039
Fire.

36
00:01:41,560 --> 00:01:43,201
And over the hundreds and thousands of years,

37
00:01:43,482 --> 00:01:46,124
that discovery, through iteration and repetition,

38
00:01:46,184 --> 00:01:46,985
became something else.

39
00:01:47,505 --> 00:01:48,426
It became a process.

40
00:01:49,692 --> 00:01:53,675
And really all human activities fall on this sort of spectrum of, on one extreme you have

41
00:01:53,695 --> 00:01:56,697
things that are processed, you have things like boiling water, there's no mystery there.

42
00:01:56,858 --> 00:01:59,159
You apply energy to water and eventually it will boil.

43
00:01:59,880 --> 00:02:02,883
At the other end of the spectrum you have discovery, you have the Large Hadron Collider,

44
00:02:02,983 --> 00:02:05,485
the cutting edge of physics, the unknown, the unknowable.

45
00:02:06,946 --> 00:02:09,588
But there's a few things to recognize about this spectrum.

46
00:02:09,608 --> 00:02:11,550
First of all there are very few extremes.

47
00:02:12,435 --> 00:02:14,856
Most activities are a mix of process and discovery.

48
00:02:15,356 --> 00:02:17,337
There are very few things that are pure process

49
00:02:17,517 --> 00:02:20,098
and even fewer things that are pure 100% discovery.

50
00:02:20,518 --> 00:02:21,298
For example, cooking.

51
00:02:22,398 --> 00:02:24,199
Lots of process around cooking, boiling water,

52
00:02:24,259 --> 00:02:25,700
basic combinations of ingredients,

53
00:02:25,860 --> 00:02:26,760
but there's also a lot of room

54
00:02:26,780 --> 00:02:28,461
for experimentation and discovery.

55
00:02:29,721 --> 00:02:31,342
Second thing to recognize about this spectrum

56
00:02:32,042 --> 00:02:34,863
is that all activities start towards the discovery end

57
00:02:35,663 --> 00:02:37,104
and move towards process over time.

58
00:02:37,204 --> 00:02:38,984
So the first time you made your own pasta sauce,

59
00:02:39,807 --> 00:02:41,188
Probably a lot of discovery, a lot of learning.

60
00:02:41,489 --> 00:02:43,650
By the thousandth time, a little more rote,

61
00:02:43,670 --> 00:02:44,451
a little more routine.

62
00:02:45,492 --> 00:02:47,073
And the final thing to recognize about the spectrum

63
00:02:47,113 --> 00:02:49,215
is that our business is discovery.

64
00:02:49,595 --> 00:02:51,637
We spend a lot of time on that end of the spectrum.

65
00:02:53,058 --> 00:02:54,619
And to underscore that, I would like to point out

66
00:02:54,659 --> 00:02:57,061
that the famous phrase, find the fun,

67
00:02:57,842 --> 00:03:00,144
has the word find fucking in it.

68
00:03:02,966 --> 00:03:05,228
And as the bard would say, there's the rub.

69
00:03:06,250 --> 00:03:10,032
Because discovery by its very nature brings with it the unknown, and the unknown brings

70
00:03:10,072 --> 00:03:11,172
with it risk.

71
00:03:12,352 --> 00:03:15,173
Or as operation scientists like to call it, variance.

72
00:03:16,474 --> 00:03:19,975
And that variance is the source of so much of our pain as we try to manage projects over

73
00:03:20,015 --> 00:03:21,415
long term over months and years.

74
00:03:22,235 --> 00:03:23,856
It makes predictions hard, it makes management hard.

75
00:03:24,376 --> 00:03:24,896
So what do we do?

76
00:03:25,576 --> 00:03:28,437
Do we just abandon discovery and just make the same game over and over again to make

77
00:03:28,477 --> 00:03:29,058
it more routine?

78
00:03:29,078 --> 00:03:30,778
Of course not.

79
00:03:31,018 --> 00:03:31,618
That's not fun.

80
00:03:32,825 --> 00:03:37,288
But we also don't have to be at the mercy of variance if we can acknowledge two facts.

81
00:03:38,629 --> 00:03:41,731
Number one, variance compounds over sequential activities.

82
00:03:42,211 --> 00:03:45,473
So if every one of these activities takes between one and five days, the total time

83
00:03:45,493 --> 00:03:48,035
to get through all five is between five and twenty-five days.

84
00:03:49,336 --> 00:03:52,458
The second thing to recognize is that nothing we do is pure discovery.

85
00:03:53,679 --> 00:03:59,663
Even the most avant-garde, experimental, in-the-weeds gameplay design is still underscored by some

86
00:03:59,723 --> 00:04:00,503
elements of process.

87
00:04:01,280 --> 00:04:03,741
The process by which we design features,

88
00:04:03,821 --> 00:04:04,662
by which we code them,

89
00:04:04,702 --> 00:04:06,183
by which we compile them into builds,

90
00:04:06,223 --> 00:04:07,143
by which we upload them,

91
00:04:07,183 --> 00:04:08,064
by which we QA them.

92
00:04:09,645 --> 00:04:11,406
And to underscore that point,

93
00:04:11,466 --> 00:04:13,487
I would point out that the famous phrase creative process

94
00:04:14,668 --> 00:04:15,729
has the word process in it.

95
00:04:16,829 --> 00:04:17,610
And if that weren't true,

96
00:04:18,030 --> 00:04:19,091
we wouldn't need all this bullshit.

97
00:04:21,632 --> 00:04:23,514
So in as much as the activities we do,

98
00:04:24,728 --> 00:04:27,249
Our process, our known, our understandable,

99
00:04:27,789 --> 00:04:30,570
our, you know, understood by us,

100
00:04:30,950 --> 00:04:32,750
we should seek to make those processes

101
00:04:33,470 --> 00:04:37,171
efficient, predictable, or consistent,

102
00:04:38,311 --> 00:04:39,951
and whenever possible, automated.

103
00:04:41,412 --> 00:04:44,032
Both so we can minimize our overall level of variance,

104
00:04:45,292 --> 00:04:48,213
and so we can maximize our ability to absorb variance.

105
00:04:48,813 --> 00:04:50,133
And that's what I'm gonna be talking about today.

106
00:04:51,010 --> 00:04:52,251
So a little roadmap for the talk.

107
00:04:52,471 --> 00:04:55,233
This talk is gonna start micro and go macro.

108
00:04:56,974 --> 00:04:58,154
You're the first people to finally laugh

109
00:04:58,194 --> 00:04:58,855
at that fucking joke.

110
00:04:59,235 --> 00:05:00,696
All right, so let's start with the bio of me.

111
00:05:00,836 --> 00:05:01,776
This is about as micro as it gets.

112
00:05:01,796 --> 00:05:03,297
Then we're gonna move to some fundamentals

113
00:05:03,317 --> 00:05:04,798
of operations science and process flows.

114
00:05:04,818 --> 00:05:07,059
Then we're gonna move to a little more practical example,

115
00:05:07,119 --> 00:05:08,400
something called the capacity chart.

116
00:05:09,280 --> 00:05:10,501
And the second half of the presentation

117
00:05:10,541 --> 00:05:11,221
is the real meat of it,

118
00:05:11,241 --> 00:05:12,842
when we get into what's called lean production

119
00:05:12,862 --> 00:05:13,863
and how you can apply it to games.

120
00:05:14,403 --> 00:05:15,544
Then we'll have some closing thoughts,

121
00:05:16,304 --> 00:05:17,745
and if there's time, some question and answers.

122
00:05:18,665 --> 00:05:19,066
So who am I?

123
00:05:20,177 --> 00:05:23,320
I started in the industry about 10 years ago as a humble production intern at Wadlow Games

124
00:05:23,360 --> 00:05:24,301
in Chicago, Illinois.

125
00:05:25,102 --> 00:05:28,707
I worked my way up to a senior producer studio lead position on games like Guilty Party,

126
00:05:28,767 --> 00:05:31,850
Avengers Initiative, and helping our sister studio out, Avalanche, with Disney Infinity.

127
00:05:32,982 --> 00:05:36,545
And over that time I really developed a firm belief that the human cost of making games

128
00:05:36,605 --> 00:05:41,749
in terms of layoffs and crunch and studio closures and uncertainty and stress-related

129
00:05:41,789 --> 00:05:43,331
health issues is a little more than I could bear.

130
00:05:43,351 --> 00:05:47,615
And I decided the best way for me to be able to positively impact that would be to learn

131
00:05:47,655 --> 00:05:49,416
as much about business and management as I could.

132
00:05:49,817 --> 00:05:52,939
So in addition to working full-time and raising kids, I went to night school to get my MBA

133
00:05:52,959 --> 00:05:54,080
from Northwestern University.

134
00:05:54,912 --> 00:05:58,032
I'm currently working as a consultant, notably with my friends at Ragtag Studio,

135
00:05:58,052 --> 00:05:59,353
while they work to finish Raise the Dead.

136
00:05:59,373 --> 00:06:03,054
I'm also trying to get my own game development company, Agency Principal, off the ground.

137
00:06:03,474 --> 00:06:05,314
And I write regularly in my blog, Breaking the Wheel.

138
00:06:05,475 --> 00:06:06,655
So, if you enjoy this presentation,

139
00:06:07,015 --> 00:06:09,956
there's a nine-part series called Game Planning with Science you should really check out.

140
00:06:10,416 --> 00:06:10,916
Shameless plug.

141
00:06:10,936 --> 00:06:14,457
Another thing about me, my favorite movie of all time is Aliens.

142
00:06:14,917 --> 00:06:16,378
Yes, this is cliché, I know.

143
00:06:17,538 --> 00:06:18,798
I know it's cliché, but it's the truth.

144
00:06:18,818 --> 00:06:21,659
You send me to Desert Island, I'm taking that one movie, if that's the only movie I get.

145
00:06:22,918 --> 00:06:26,301
I'm guessing games industry, I'm guessing all of you have probably seen Aliens, so you

146
00:06:26,321 --> 00:06:30,244
may recall towards the end, Ripley has to go into the hive to rescue Newt, the atmosphere

147
00:06:30,264 --> 00:06:34,387
processor is exploding, she has to take a detour, and she and Newt wind up face to face

148
00:06:34,407 --> 00:06:35,027
with the alien queen.

149
00:06:36,328 --> 00:06:41,432
And the queen has this gross, slimy, bulbous sack attached to her that she uses to lay

150
00:06:41,472 --> 00:06:42,453
facehugger eggs on the floor.

151
00:06:42,473 --> 00:06:45,956
Now if you're as much of a fucking nerd as I am, you may have wondered at some point,

152
00:06:46,196 --> 00:06:47,817
how many eggs does she have in that thing?

153
00:06:49,299 --> 00:06:49,839
So let's find out.

154
00:06:51,285 --> 00:06:55,426
Let's imagine that on average the queen lays 7 facehugger eggs a day on the high floor.

155
00:06:56,607 --> 00:07:00,348
Let's also imagine that it takes an average of 5 days for any single egg to gestate.

156
00:07:01,548 --> 00:07:05,630
The only way the queen can sustain a 7 egg per day throughput

157
00:07:05,970 --> 00:07:07,571
with a 5 day per egg turnaround time

158
00:07:08,371 --> 00:07:10,272
is if there are 7 eggs in each day of gestation.

159
00:07:11,752 --> 00:07:13,853
Therefore, the queen has 5 times 7 equals 35 eggs in the sack.

160
00:07:17,420 --> 00:07:20,561
Or, to put it another way, her average egg inventory, i,

161
00:07:20,721 --> 00:07:22,382
is equal to her average egg throughput, r,

162
00:07:22,922 --> 00:07:26,024
multiplied by the time to produce a single facehugger egg, t.

163
00:07:27,104 --> 00:07:29,065
Or more simply, i equals rt.

164
00:07:30,166 --> 00:07:32,907
In operations science, this is known as Little's Law.

165
00:07:32,927 --> 00:07:35,128
It is the most fundamental equation of operations science.

166
00:07:36,049 --> 00:07:38,290
And it works for all three permutations, i equals rt,

167
00:07:39,050 --> 00:07:40,731
r equals i over t, t equals i over r,

168
00:07:40,931 --> 00:07:42,452
which is a verbose way of saying if you know

169
00:07:42,492 --> 00:07:44,273
two of those values, you can calculate the third.

170
00:07:46,392 --> 00:07:51,197
So I'm going to belabor this point for just a second, because if you can hang with Little's Law, the rest of this presentation is going to be a lot easier to follow.

171
00:07:51,998 --> 00:07:57,924
So for any ongoing process, if it's assembling cars, or manufacturing cans of soup, or perhaps creating video game assets,

172
00:07:58,985 --> 00:08:04,711
the amount of things currently being processed, the inventory, is equal to the rate at which things come out of the process,

173
00:08:04,731 --> 00:08:09,395
the throughput, multiplied by the time to create a single thing, the flow time.

174
00:08:10,757 --> 00:08:12,438
Now how do you go about calculating those values?

175
00:08:12,818 --> 00:08:15,239
So inventory equals throughput times flow time.

176
00:08:15,359 --> 00:08:17,000
You're gonna see this equation contextually

177
00:08:17,020 --> 00:08:17,901
throughout the presentation,

178
00:08:17,941 --> 00:08:19,822
so it's gonna be our companion today.

179
00:08:21,243 --> 00:08:22,284
So how do you determine those values?

180
00:08:23,004 --> 00:08:25,005
Let's imagine that inside the queen's egg sac

181
00:08:25,245 --> 00:08:26,326
is a network of activities.

182
00:08:26,946 --> 00:08:28,207
All these activities are necessary

183
00:08:28,247 --> 00:08:29,608
to produce a single facehugger egg.

184
00:08:29,628 --> 00:08:30,469
They're all required.

185
00:08:30,489 --> 00:08:32,009
Now how do you make sense of this thing?

186
00:08:32,029 --> 00:08:33,290
It branches, it's not all clean,

187
00:08:33,350 --> 00:08:34,391
it's not everything lines up.

188
00:08:34,411 --> 00:08:36,072
Well, it's actually not that hard.

189
00:08:36,885 --> 00:08:38,886
First of all, let's recognize that one single path

190
00:08:39,507 --> 00:08:41,408
through the pipeline is longer than any other.

191
00:08:42,308 --> 00:08:43,569
This is known as the critical path.

192
00:08:44,109 --> 00:08:45,730
I'm sure you've heard that term in different contexts.

193
00:08:45,750 --> 00:08:47,211
This is the operation science definition.

194
00:08:47,671 --> 00:08:49,852
It is the longest single path from input to output.

195
00:08:50,593 --> 00:08:52,274
The activities are known as critical activities,

196
00:08:53,314 --> 00:08:55,836
and the cumulative flow time of those critical activities

197
00:08:55,896 --> 00:08:57,336
dictates your flow time for one batch.

198
00:08:57,356 --> 00:08:59,678
You cannot get a batch done in less time

199
00:08:59,698 --> 00:09:01,459
than it takes to run through every critical activity.

200
00:09:02,299 --> 00:09:03,400
And that flow time is denoted as T.

201
00:09:04,790 --> 00:09:07,691
Let's also recognize that one single activity is longer than any other.

202
00:09:08,111 --> 00:09:09,031
This is the bottleneck.

203
00:09:09,351 --> 00:09:11,212
Again, I'm sure you've heard that term in various contexts.

204
00:09:11,252 --> 00:09:12,772
This is the operations science definition.

205
00:09:13,132 --> 00:09:16,413
It is the single longest activity irrespective of critical path.

206
00:09:16,493 --> 00:09:18,053
It can be on the critical path. It doesn't have to be.

207
00:09:18,973 --> 00:09:21,674
The throughput of that bottleneck dictates the throughput of your process.

208
00:09:21,894 --> 00:09:25,674
In other words, you cannot get things out of the process at a rate faster than the bottleneck will allow.

209
00:09:26,234 --> 00:09:27,435
And that throughput is denoted as R.

210
00:09:28,635 --> 00:09:31,775
So to summarize, your critical path determines your flow time.

211
00:09:32,556 --> 00:09:33,936
Your bottleneck determines your throughput.

212
00:09:35,144 --> 00:09:37,266
Now let's move to perhaps a more relevant example.

213
00:09:37,946 --> 00:09:39,708
Here's a hypothetical flow chart for getting a character

214
00:09:39,728 --> 00:09:41,449
in the game that covers anything you might want to do.

215
00:09:41,609 --> 00:09:43,971
Concept art, casting, VO, mocap, everything.

216
00:09:45,292 --> 00:09:47,494
Now, this looks like SpaghettiOs, right?

217
00:09:47,594 --> 00:09:50,196
It looks really complicated, but operation science

218
00:09:50,236 --> 00:09:51,557
makes it a lot easier to figure it out.

219
00:09:52,458 --> 00:09:54,479
First of all, despite all the mess,

220
00:09:54,900 --> 00:09:56,000
we have a very clean critical path.

221
00:09:57,442 --> 00:09:58,442
It's 29 days long.

222
00:09:58,823 --> 00:10:00,724
So that means our average expected time

223
00:10:00,744 --> 00:10:02,726
to complete a character from scratch is 29 days.

224
00:10:03,887 --> 00:10:04,567
So there's our flow time.

225
00:10:06,007 --> 00:10:07,549
And here is our bottleneck.

226
00:10:08,670 --> 00:10:09,410
It takes nine days.

227
00:10:10,832 --> 00:10:12,854
So we should expect to get a character done

228
00:10:13,474 --> 00:10:15,516
out of this pipeline once every nine days

229
00:10:15,616 --> 00:10:17,358
or one-ninth of a character per day on average.

230
00:10:18,318 --> 00:10:18,959
There's our throughput.

231
00:10:20,080 --> 00:10:22,342
So with very little effort, we have just estimated

232
00:10:22,883 --> 00:10:24,984
the average time to complete a character from scratch,

233
00:10:25,545 --> 00:10:27,647
the expected time before the first character is in game,

234
00:10:28,568 --> 00:10:30,209
and the average rate at which subsequent characters

235
00:10:30,229 --> 00:10:30,710
will be in the game.

236
00:10:31,630 --> 00:10:32,711
Or a visual form something like this.

237
00:10:36,836 --> 00:10:39,137
Now, there is a caveat, there always is.

238
00:10:40,078 --> 00:10:42,079
If you add up all your critical activities like this,

239
00:10:42,179 --> 00:10:43,380
just in sequence to get your flow time,

240
00:10:43,400 --> 00:10:44,420
what you actually have is what's known

241
00:10:44,440 --> 00:10:45,661
as your theoretical flow time.

242
00:10:46,181 --> 00:10:47,942
It's your flow time if there is zero downtime.

243
00:10:47,982 --> 00:10:49,863
So the unit, if it's a character model,

244
00:10:50,203 --> 00:10:51,304
never has to wait for anything.

245
00:10:51,384 --> 00:10:53,085
It just moves through in one continuous flow.

246
00:10:54,546 --> 00:10:55,806
In reality, that's not gonna be the case.

247
00:10:56,307 --> 00:10:57,807
If you wanna get your actual flow time,

248
00:10:57,827 --> 00:10:59,048
you need to account for that wait time.

249
00:10:59,388 --> 00:11:00,809
Theoretical flow time plus wait time

250
00:11:00,969 --> 00:11:02,010
equals your actual flow time.

251
00:11:03,391 --> 00:11:05,633
So examples, queues, handoffs, bathroom breaks,

252
00:11:05,693 --> 00:11:07,374
anything that would stop an asset

253
00:11:07,414 --> 00:11:08,295
moving through the pipeline.

254
00:11:09,055 --> 00:11:10,016
Now if you can calculate,

255
00:11:10,076 --> 00:11:11,257
estimate your theoretical flow time

256
00:11:11,357 --> 00:11:12,638
and estimate your actual flow time,

257
00:11:13,038 --> 00:11:14,960
you can calculate something called a flow time efficiency.

258
00:11:15,200 --> 00:11:16,521
This is the ratio between the two.

259
00:11:17,101 --> 00:11:18,803
And what it is, is an estimate of how much time

260
00:11:18,823 --> 00:11:19,903
your asset's been waiting around,

261
00:11:19,943 --> 00:11:21,545
not being processed, not generating value.

262
00:11:21,865 --> 00:11:24,047
So if you have a flow time efficiency of 78%,

263
00:11:24,527 --> 00:11:26,248
your asset's spent about 22% of their time

264
00:11:26,308 --> 00:11:27,709
waiting around for somebody to work on them.

265
00:11:28,990 --> 00:11:31,232
Your flow time efficiency's always gonna be less than one.

266
00:11:32,200 --> 00:11:35,143
If it's ever greater than one, your theoretical flow time is wrong.

267
00:11:35,163 --> 00:11:36,365
It means you highballed it.

268
00:11:36,385 --> 00:11:38,127
You think your activities take way longer than they take.

269
00:11:38,668 --> 00:11:40,450
So you need to go back and recalculate those.

270
00:11:40,971 --> 00:11:43,654
That being said, the closer you get to one, the more efficient your process is.

271
00:11:46,377 --> 00:11:49,421
So what if you don't know the average time to complete any activity or the entire sequence?

272
00:11:50,303 --> 00:11:52,806
Well, Little's Law comes to the rescue.

273
00:11:53,246 --> 00:11:55,068
If you know about the average rate things come out of that

274
00:11:55,108 --> 00:11:56,830
sequence, and you know how many things are currently

275
00:11:56,890 --> 00:11:58,351
somewhere in the sequence being processed,

276
00:11:58,371 --> 00:12:00,053
you can back into your actual flow time.

277
00:12:00,593 --> 00:12:02,155
Your flow time's just gonna be the inventory

278
00:12:02,195 --> 00:12:03,156
divided by the throughput.

279
00:12:03,736 --> 00:12:05,278
And that would be your actual flow time,

280
00:12:05,318 --> 00:12:05,938
not your theoretical.

281
00:12:07,327 --> 00:12:09,908
The same thing applies to individual activities or chains of activities.

282
00:12:09,968 --> 00:12:11,949
Little's Law applies to any level of granularity.

283
00:12:12,470 --> 00:12:15,231
So if you're trying to figure out how long an activity really takes,

284
00:12:16,011 --> 00:12:18,232
figure out how many units come out of it at what rate,

285
00:12:18,252 --> 00:12:19,893
figure out how many things are currently being processed,

286
00:12:19,933 --> 00:12:21,574
and you can back into your actual flow time again.

287
00:12:24,095 --> 00:12:26,056
So now we've established that fundamental bit,

288
00:12:26,276 --> 00:12:27,997
we can move on to something a little more practical.

289
00:12:29,058 --> 00:12:31,099
So you know your throughput and your flow time,

290
00:12:31,119 --> 00:12:33,580
you can use something called a capacity chart to plan resource assignments.

291
00:12:35,824 --> 00:12:37,424
Here's a simplified version of that same pipeline.

292
00:12:37,464 --> 00:12:39,065
I just cut off some of the extraneous stuff

293
00:12:39,125 --> 00:12:39,906
for just clarity.

294
00:12:40,566 --> 00:12:41,566
Now what you do is you go into Excel

295
00:12:41,586 --> 00:12:43,247
and you create a very simple seven column chart.

296
00:12:43,687 --> 00:12:44,748
At the end of the slides, I'll give you a link

297
00:12:44,788 --> 00:12:46,029
where you can download one I've made for you.

298
00:12:46,569 --> 00:12:47,529
But it's very easy to make.

299
00:12:47,809 --> 00:12:49,170
So this is a seven column chart in Excel.

300
00:12:49,790 --> 00:12:52,032
In the first column, you list every activity

301
00:12:52,052 --> 00:12:53,392
that's necessary to complete a single unit.

302
00:12:53,752 --> 00:12:55,533
So for this character model, we had concept art,

303
00:12:55,553 --> 00:12:57,074
high poly, low poly pass, rigging,

304
00:12:57,694 --> 00:12:59,375
a few different sets of animation, and a QA pass.

305
00:13:00,642 --> 00:13:03,504
The second column you list the average time to process one single unit.

306
00:13:03,964 --> 00:13:05,506
So, concept art past takes three days,

307
00:13:05,566 --> 00:13:06,787
high poly model takes five days,

308
00:13:07,167 --> 00:13:08,608
QA takes five days, etc.

309
00:13:09,829 --> 00:13:13,092
In the third column you want to figure out the throughput for one individual unit.

310
00:13:13,832 --> 00:13:16,174
So, according to Little's Law, if we're talking about one unit,

311
00:13:16,194 --> 00:13:19,837
so inventory equals one, that means throughput and flow time are just inverse of each other.

312
00:13:19,857 --> 00:13:21,539
And if you didn't quite follow that, don't worry,

313
00:13:21,879 --> 00:13:24,381
just trust me that this column is just the inverse of the second one.

314
00:13:25,434 --> 00:13:28,637
So for instance, our average throughput from concept art is about a third of a character per day.

315
00:13:29,238 --> 00:13:33,262
Average throughput of facial animations is about half a character per day, etc.

316
00:13:34,903 --> 00:13:37,226
Fourth column you list how many people are actually working on the activity.

317
00:13:37,366 --> 00:13:41,089
So we got one concept artist, three high poly modelers, four combat animators, etc.

318
00:13:42,930 --> 00:13:44,991
Fifth column, you multiply throughput times number of people.

319
00:13:45,011 --> 00:13:47,232
That gives you your combined throughput across each team.

320
00:13:47,492 --> 00:13:50,133
So, across all our high poly modelers,

321
00:13:50,153 --> 00:13:52,694
they can do about two-thirds of a character per day.

322
00:13:53,274 --> 00:13:55,234
All our facial animators can do half a character per day,

323
00:13:55,575 --> 00:13:56,055
that sort of thing.

324
00:13:57,295 --> 00:13:58,856
In the fifth, sorry, the sixth column,

325
00:13:58,896 --> 00:14:00,236
you calculate the process throughput.

326
00:14:00,816 --> 00:14:03,157
You find the lowest throughput of any of the activities.

327
00:14:03,657 --> 00:14:04,858
That's your overall process throughput.

328
00:14:04,898 --> 00:14:06,418
If we think back to the Alien Queen example,

329
00:14:06,718 --> 00:14:08,739
it's the bottleneck, it dictates how fast we move.

330
00:14:09,863 --> 00:14:12,988
And the final column you put in, you calculate what's called your utilization.

331
00:14:13,128 --> 00:14:16,974
You take the process throughput and divide it by each respective individual throughput.

332
00:14:17,495 --> 00:14:21,521
What this tells you is how much of that group's bandwidth this activity is going to take.

333
00:14:22,363 --> 00:14:25,825
So this character modeling path is going to consume about two-thirds of our concept artist time.

334
00:14:26,145 --> 00:14:28,727
It's going to consume about a fifth of our riggers time.

335
00:14:28,987 --> 00:14:32,390
And it's going to consume 100% of the cinematic animators time.

336
00:14:32,810 --> 00:14:35,792
They are the bottleneck. They determine what speed this flowchart moves.

337
00:14:36,152 --> 00:14:39,715
So if they're moving full-time, they're going to be 100% used up by this one pipeline.

338
00:14:39,735 --> 00:14:41,075
It's going to take all their time to keep them moving.

339
00:14:42,416 --> 00:14:43,417
So some takeaways here.

340
00:14:44,178 --> 00:14:48,540
The number of resources you have working on an activity impacts your throughput.

341
00:14:48,601 --> 00:14:49,961
100% utilization means you're a bottleneck.

342
00:14:51,142 --> 00:14:54,565
And the way you staff a pipeline can shift where the bottleneck is between activities.

343
00:14:55,205 --> 00:14:57,767
And shifting that bottleneck will change the throughput but not the float time.

344
00:14:58,287 --> 00:14:59,788
So don't fall for the one month baby trap.

345
00:14:59,828 --> 00:15:04,472
You can't throw five modelers at the same high poly model and get it done in one fifth the time.

346
00:15:04,552 --> 00:15:05,132
Don't fall for that.

347
00:15:06,613 --> 00:15:08,414
So now what happens if we start adding some resources?

348
00:15:09,515 --> 00:15:10,115
So here's our chart.

349
00:15:10,976 --> 00:15:14,238
Cinematic animators are the bottleneck, and I'm going to add one cinematic animator.

350
00:15:15,339 --> 00:15:16,180
Now two things have happened.

351
00:15:17,290 --> 00:15:20,451
One, our throughput has gone up to a third of a character per day, so we're going a little faster.

352
00:15:21,051 --> 00:15:25,533
But now we have two bottlenecks. We have two resources that are 100% utilized by this process flow.

353
00:15:25,973 --> 00:15:29,554
That doesn't mean we're worse off because we have two bottlenecks when we had one, we're going faster,

354
00:15:29,914 --> 00:15:32,315
but it means we can't improve throughput anymore with a single head.

355
00:15:32,795 --> 00:15:34,696
So if we just add one more cinematic animator...

356
00:15:35,669 --> 00:15:37,671
Throughput still capped at a third of character per day.

357
00:15:38,371 --> 00:15:40,373
The concept artist is still 100% utilized,

358
00:15:40,393 --> 00:15:41,233
he's still the bottleneck.

359
00:15:41,694 --> 00:15:43,075
And now what we did is basically we gave

360
00:15:43,115 --> 00:15:45,016
the cinematic animators a little spare capacity.

361
00:15:45,377 --> 00:15:46,557
That gave them a little wiggle room.

362
00:15:46,658 --> 00:15:47,618
That's all we accomplished with that.

363
00:15:48,459 --> 00:15:50,060
If we add another cinematic animator,

364
00:15:51,101 --> 00:15:52,942
throughput still capped at a third of character per day,

365
00:15:53,763 --> 00:15:55,084
concept art's still the bottleneck,

366
00:15:55,344 --> 00:15:58,427
and all that extra head on the payroll did

367
00:15:58,467 --> 00:15:59,688
was create more spare capacity,

368
00:15:59,708 --> 00:16:01,049
which is probably not the most efficient use

369
00:16:01,069 --> 00:16:01,709
of your resources.

370
00:16:02,810 --> 00:16:04,771
On the other hand, if we add another concept artist,

371
00:16:05,929 --> 00:16:08,970
Now our throughput goes up to about two-fifths of a character per day.

372
00:16:09,770 --> 00:16:11,891
Cinematic animators and concept art are no longer the bottleneck,

373
00:16:11,951 --> 00:16:13,131
and QA is now the bottleneck.

374
00:16:13,831 --> 00:16:14,992
So you can see how you get this little,

375
00:16:15,132 --> 00:16:16,592
you get a little bit of a shell game going on.

376
00:16:16,612 --> 00:16:18,153
When you add people, the bottleneck jumps around,

377
00:16:18,173 --> 00:16:18,733
you gotta chase it.

378
00:16:19,473 --> 00:16:20,713
So the big takeaway here is that

379
00:16:21,414 --> 00:16:23,734
process flows exhibit a weakest link phenomenon.

380
00:16:23,814 --> 00:16:26,595
You only move as fast as the group with the lowest throughput.

381
00:16:27,988 --> 00:16:30,310
Adding resources will shift the bottleneck between activities.

382
00:16:30,970 --> 00:16:34,272
So when you're using the capacity chart, it's very important you add resources one at a time,

383
00:16:34,553 --> 00:16:36,574
so you can catch exactly when and where the bottleneck moves.

384
00:16:37,274 --> 00:16:39,476
If we added all three cinematic animators at once,

385
00:16:40,056 --> 00:16:42,678
we would have seen that the bottleneck had shifted to the concept artist,

386
00:16:43,259 --> 00:16:46,701
but we wouldn't have known exactly when, so we wouldn't have known which person we hired

387
00:16:46,741 --> 00:16:48,142
is actually just creating spare capacity.

388
00:16:49,503 --> 00:16:52,866
And adding resources to non-bottleneck activities won't help your overall throughput.

389
00:16:52,926 --> 00:16:55,848
It just creates spare capacity, so probably not the most effective use of money.

390
00:16:57,840 --> 00:16:59,101
There's always going to be a bottleneck.

391
00:16:59,121 --> 00:17:00,362
This is important to recognize.

392
00:17:00,542 --> 00:17:03,124
Some activity or activities will always have the lowest throughput.

393
00:17:03,724 --> 00:17:05,265
So your goal is not to eliminate bottlenecks.

394
00:17:05,305 --> 00:17:05,886
That's impossible.

395
00:17:05,906 --> 00:17:06,706
There's always going to be one.

396
00:17:07,267 --> 00:17:09,989
Your goal instead is to secure a throughput that lets you meet your schedule.

397
00:17:12,535 --> 00:17:15,197
So this chart made some simplifying assumptions.

398
00:17:15,577 --> 00:17:17,479
It takes a very clean view of the universe.

399
00:17:18,059 --> 00:17:19,741
Your view of the universe might not be as clean.

400
00:17:19,761 --> 00:17:21,182
Some of these things might not be true.

401
00:17:21,962 --> 00:17:23,383
If that's so, that's okay.

402
00:17:23,423 --> 00:17:24,885
You just need to use some slightly different math.

403
00:17:25,025 --> 00:17:26,206
I covered it in the appendix of the slide

404
00:17:26,226 --> 00:17:26,786
so you can review it.

405
00:17:27,587 --> 00:17:28,968
It's basic division, it's not very hard,

406
00:17:29,008 --> 00:17:29,949
but it's solvable.

407
00:17:30,069 --> 00:17:31,710
You just need to adjust your calculations a little bit.

408
00:17:34,092 --> 00:17:36,034
So on the subject of spare capacity,

409
00:17:36,354 --> 00:17:37,575
it's important to provide some guidance

410
00:17:37,595 --> 00:17:38,916
from an operations science perspective.

411
00:17:40,193 --> 00:17:41,674
So it's a high pressure industry.

412
00:17:41,694 --> 00:17:44,437
It's very tempting to ramp everybody up to 100% utilization.

413
00:17:45,318 --> 00:17:47,059
From an operations science perspective,

414
00:17:47,079 --> 00:17:48,140
this is actually counterproductive.

415
00:17:48,881 --> 00:17:50,402
Because remember, 100% utilization

416
00:17:50,442 --> 00:17:51,463
means somebody has a bottleneck.

417
00:17:54,626 --> 00:17:56,688
Your bottleneck is the deciding factor of your throughput.

418
00:17:56,708 --> 00:17:58,150
The bottleneck determines how fast you move.

419
00:17:58,190 --> 00:18:00,171
So your goal as an operations manager

420
00:18:00,492 --> 00:18:02,233
is to make sure the bottleneck is always moving

421
00:18:02,453 --> 00:18:03,575
and never waiting on anybody else.

422
00:18:04,915 --> 00:18:08,156
Wrapping everybody up to 100% utilization might make you feel good as a manager because

423
00:18:08,216 --> 00:18:10,778
you can be a little busy, but the reality is you're just creating more bottlenecks.

424
00:18:12,018 --> 00:18:14,800
And those artificial bottlenecks might not be able to support the actual bottleneck.

425
00:18:15,340 --> 00:18:19,182
So in our example, if you're tying up the rigger with a bunch of busy work just to make

426
00:18:19,202 --> 00:18:23,244
sure he's always working and earning his pay, the cinematic animators run out of work, they

427
00:18:23,264 --> 00:18:24,825
turn to the rigger and say, hey, we need another model.

428
00:18:24,985 --> 00:18:27,306
He says, I can't because John has me doing this other shit.

429
00:18:28,115 --> 00:18:32,057
Which means you have created a scenario where the actual bottleneck is being held up by

430
00:18:32,097 --> 00:18:34,279
the artificial bottleneck you created by being a taskmaster.

431
00:18:34,699 --> 00:18:36,921
Which means you're failing your primary goal of keeping the bottleneck moving.

432
00:18:38,082 --> 00:18:41,324
By all means, take targets of opportunity, but don't keep people busy just for the sake

433
00:18:41,344 --> 00:18:42,004
of keeping them busy.

434
00:18:43,325 --> 00:18:46,788
From an operations science perspective, the best use of spare capacity is to alleviate

435
00:18:46,808 --> 00:18:47,288
the bottleneck.

436
00:18:47,788 --> 00:18:51,111
So if you've got people with spare capacity who can do bottleneck activities, that's the

437
00:18:51,131 --> 00:18:52,211
best place to apply their talents.

438
00:18:54,467 --> 00:18:56,769
All right, we just covered in about 18 minutes

439
00:18:56,789 --> 00:18:58,511
what took me about three to four weeks of grad school.

440
00:18:59,392 --> 00:19:00,493
So if your brain's in a little singy,

441
00:19:00,773 --> 00:19:01,394
totally understandable.

442
00:19:01,734 --> 00:19:02,675
We're gonna take a little palate cleanser,

443
00:19:02,695 --> 00:19:04,016
we're gonna take a little break, some story time.

444
00:19:04,837 --> 00:19:05,998
This is a story I've loved ever since I was 10

445
00:19:06,178 --> 00:19:06,658
when I learned it.

446
00:19:07,259 --> 00:19:08,981
It's the parable of Scylla and Charybdis.

447
00:19:09,561 --> 00:19:10,682
So book 12 of the Odyssey,

448
00:19:11,863 --> 00:19:13,385
Odysseus and his men spent 10 years

449
00:19:13,425 --> 00:19:14,265
fighting the war of Troy.

450
00:19:14,325 --> 00:19:15,867
They're tired, they're trying to make it back to Ithaca.

451
00:19:15,887 --> 00:19:16,988
They spent years trying to get back.

452
00:19:17,909 --> 00:19:18,850
Most of the crew has died.

453
00:19:18,870 --> 00:19:20,751
They got one ship left, one crew, everybody else is dead.

454
00:19:21,562 --> 00:19:23,382
And they have to go through the Strait of Messina,

455
00:19:23,623 --> 00:19:24,763
between modern-day Sicily and Italy.

456
00:19:24,783 --> 00:19:26,424
Now, I don't know if you knew this,

457
00:19:26,784 --> 00:19:27,724
but at that period in history,

458
00:19:27,764 --> 00:19:30,125
the Strait of Messina had two awful sea serpents living there.

459
00:19:30,286 --> 00:19:30,906
It's a true story.

460
00:19:31,466 --> 00:19:33,587
On one side, you had Scylla, who was a six-headed serpent,

461
00:19:34,047 --> 00:19:35,548
and each head would pull a man out of a boat,

462
00:19:35,648 --> 00:19:36,428
any boat that went past.

463
00:19:37,389 --> 00:19:38,629
On the other side, you had Charybdis,

464
00:19:38,989 --> 00:19:40,630
who create whirlpools and maelstroms,

465
00:19:40,690 --> 00:19:41,971
and she might not get you, but if she did,

466
00:19:42,011 --> 00:19:43,651
the entire boat went down and everybody died.

467
00:19:44,692 --> 00:19:46,212
And the Strait is narrow enough you can't go between them.

468
00:19:46,232 --> 00:19:46,653
You have to pick.

469
00:19:47,616 --> 00:19:50,098
So Odysseus has to choose, definitely lose six men,

470
00:19:50,679 --> 00:19:51,920
or possibly lose all of them.

471
00:19:53,141 --> 00:19:54,362
Now, from a managerial perspective,

472
00:19:54,382 --> 00:19:56,384
this is a classic crisis, it's the test of values.

473
00:19:57,085 --> 00:19:59,847
Odysseus has to pick, the needs of the many

474
00:19:59,907 --> 00:20:01,329
over the needs of the few, go with Scylla,

475
00:20:02,029 --> 00:20:03,811
or shared privations, all for one, one for all,

476
00:20:03,831 --> 00:20:04,412
go with Charybdis.

477
00:20:05,533 --> 00:20:08,075
From an investment standpoint, his options are,

478
00:20:08,155 --> 00:20:09,476
stick with certainty to minimize costs.

479
00:20:09,897 --> 00:20:11,018
There's no risk with Scylla,

480
00:20:11,138 --> 00:20:12,199
you know exactly what's gonna happen.

481
00:20:13,558 --> 00:20:15,219
Or you accept some risk to maximize upside.

482
00:20:15,239 --> 00:20:16,440
You take some risk on Charybdis,

483
00:20:17,080 --> 00:20:18,020
and you try to get everybody through.

484
00:20:18,641 --> 00:20:20,402
So it's a basic advancement decision.

485
00:20:21,022 --> 00:20:23,724
Now in the actual story, Odysseus decided to go with Scylla.

486
00:20:24,964 --> 00:20:26,625
But in perhaps a questionable management decision,

487
00:20:26,665 --> 00:20:28,286
he didn't tell anybody what was gonna happen.

488
00:20:28,847 --> 00:20:30,448
So boats going past and you know,

489
00:20:30,968 --> 00:20:33,089
six heads come out and then six poor bastards look at him

490
00:20:33,109 --> 00:20:34,290
and go, hey, what's that?

491
00:20:34,610 --> 00:20:35,991
So you know, I'll let you decide

492
00:20:36,011 --> 00:20:37,271
if that was the right thing to do.

493
00:20:37,291 --> 00:20:38,792
All right, break's over.

494
00:20:39,233 --> 00:20:40,533
So, moving beyond art.

495
00:20:42,902 --> 00:20:45,402
Little's Law applies to any sequential process flow.

496
00:20:46,402 --> 00:20:47,463
And that includes features,

497
00:20:48,583 --> 00:20:49,663
with a very obvious caveat.

498
00:20:50,483 --> 00:20:51,564
And there's that discovery again.

499
00:20:51,904 --> 00:20:54,924
Feature design is more variant than art asset generation,

500
00:20:55,585 --> 00:20:57,165
because of scope differences, bugs,

501
00:20:57,405 --> 00:20:58,265
uncertainty, and human error.

502
00:21:00,126 --> 00:21:03,286
Now, variance is an analysis of risk.

503
00:21:04,727 --> 00:21:06,187
It can be understood mathematically.

504
00:21:07,235 --> 00:21:08,516
And it adds complexity to your forecast.

505
00:21:08,536 --> 00:21:10,316
You can't just deal with an average expected outcome,

506
00:21:10,356 --> 00:21:11,037
speed times time.

507
00:21:11,377 --> 00:21:13,317
You have to account for a range of potential outcomes.

508
00:21:14,778 --> 00:21:15,758
And it increases your costs.

509
00:21:16,278 --> 00:21:18,319
Both your expected, what you need to be able to pay

510
00:21:18,339 --> 00:21:19,079
and keep in reserve,

511
00:21:19,739 --> 00:21:21,100
and what you actually do end up paying.

512
00:21:22,500 --> 00:21:24,081
Operation science is largely concerned

513
00:21:24,101 --> 00:21:26,321
with minimizing the presence and impact of variants.

514
00:21:26,982 --> 00:21:29,643
And one of the main ways to do that is by eliminating waste.

515
00:21:30,923 --> 00:21:32,203
So then the major question becomes,

516
00:21:32,283 --> 00:21:33,404
who has eliminated waste better

517
00:21:33,424 --> 00:21:34,564
than anybody else on the planet?

518
00:21:35,584 --> 00:21:36,105
For my money,

519
00:21:36,909 --> 00:21:38,130
You need to go back to the heady days of 1948.

520
00:21:39,770 --> 00:21:42,211
Japan is still recovering from the Second World War,

521
00:21:43,412 --> 00:21:46,213
and a little company called Toyota finds itself competing

522
00:21:46,773 --> 00:21:49,194
with companies from the world's newest economic superpower,

523
00:21:49,914 --> 00:21:50,434
Merck.

524
00:21:51,715 --> 00:21:52,895
How can it possibly succeed?

525
00:21:54,736 --> 00:21:56,396
Necessity is the mother of invention.

526
00:21:56,537 --> 00:21:58,557
Toyota invented the Toyota production system,

527
00:21:58,917 --> 00:22:01,118
and they focused maniacally on eliminating waste.

528
00:22:01,806 --> 00:22:04,248
Waste of inventory, defects, meetings, even movement.

529
00:22:04,328 --> 00:22:05,649
If you're somebody who puts doors on cars,

530
00:22:05,669 --> 00:22:07,290
they don't want you to have to move too far physically

531
00:22:07,310 --> 00:22:08,571
to grab the door and mount it.

532
00:22:10,052 --> 00:22:11,554
The net effect is that Toyota is now

533
00:22:11,614 --> 00:22:12,875
the world's largest car company

534
00:22:13,495 --> 00:22:15,237
and established a reputation for high quality.

535
00:22:15,997 --> 00:22:17,478
And TPS, Toyota Production System,

536
00:22:17,839 --> 00:22:19,540
came to be known more generically as lean production.

537
00:22:20,721 --> 00:22:22,062
Now the moral of the story here is that

538
00:22:22,162 --> 00:22:23,523
what I'm about to talk about is not

539
00:22:23,563 --> 00:22:25,044
some squishy academic concept.

540
00:22:25,104 --> 00:22:25,845
Oh, that's nice, Justin.

541
00:22:25,865 --> 00:22:26,906
What else did you learn in grad school?

542
00:22:27,566 --> 00:22:28,647
No, it's just that Toyota made a lot of money.

543
00:22:30,020 --> 00:22:31,601
and establish a reputation for high quality,

544
00:22:31,981 --> 00:22:34,923
while communing with companies that have far greater access to capital and resources.

545
00:22:36,604 --> 00:22:39,586
Now, lean is a Scylla approach to management.

546
00:22:40,127 --> 00:22:44,970
You are spending some time now in order to possibly avoid losing a lot of time to waste later.

547
00:22:45,871 --> 00:22:49,613
It's like you're going with the six steps to avoid possibly losing everybody.

548
00:22:50,703 --> 00:22:53,224
You're trying to minimize your outcome variance and maximize control.

549
00:22:53,945 --> 00:22:56,966
Like I said, there's no risk with Squila. You know exactly what's going to happen.

550
00:22:57,366 --> 00:23:00,067
Six people, no more, no less. You know exactly what's going on there.

551
00:23:01,487 --> 00:23:03,648
So when you're thinking about lean, don't just focus on what it costs.

552
00:23:03,908 --> 00:23:06,749
Don't just think about the six men. Think about what it saves.

553
00:23:06,969 --> 00:23:07,989
The other people who get to go home.

554
00:23:09,670 --> 00:23:11,890
So let's talk about how an ounce of prevention is worth a pound of cure.

555
00:23:12,691 --> 00:23:15,612
There are a lot of elements to lean, but there are five I want to cover in particular today.

556
00:23:17,052 --> 00:23:18,913
Boca y que? Kanban.

557
00:23:20,132 --> 00:23:23,714
Jiroka, Muda, and Haijunka.

558
00:23:24,914 --> 00:23:26,135
So first up, Poka Yoke.

559
00:23:27,595 --> 00:23:29,476
It literally translates as mistake proofing.

560
00:23:29,536 --> 00:23:31,377
Originally it was Baka Yoke, or idiot proofing,

561
00:23:31,417 --> 00:23:33,618
and Toyota, I guess, decided to tone that shit down a little bit.

562
00:23:34,738 --> 00:23:36,939
It means designing products so they can only be used the correct way.

563
00:23:37,339 --> 00:23:40,300
So your HDMI cable will only go into your PS4 in the proper orientation.

564
00:23:40,700 --> 00:23:43,541
Your ski boots will only clamp into skis with the toes facing forwards.

565
00:23:45,770 --> 00:23:47,571
In a production context, it means designing parts

566
00:23:47,591 --> 00:23:49,232
so they can only be assembled in the correct way,

567
00:23:49,292 --> 00:23:51,253
so eliminate sources of human error during assembly.

568
00:23:52,694 --> 00:23:54,595
Now, what we do is clearly more complicated

569
00:23:54,615 --> 00:23:56,016
than assembling cars to spec,

570
00:23:56,976 --> 00:23:58,117
but that doesn't mean you can't embrace

571
00:23:58,157 --> 00:23:59,318
the philosophy of polka yoke.

572
00:23:59,838 --> 00:24:02,039
And the best way I've seen in my professional experience

573
00:24:02,600 --> 00:24:04,381
is with the humble user story from Scrum.

574
00:24:04,661 --> 00:24:06,562
User stories are a form of polka yoke.

575
00:24:07,502 --> 00:24:09,223
They are an attempt to establish intent.

576
00:24:09,984 --> 00:24:10,684
Who wants something?

577
00:24:11,385 --> 00:24:11,905
What do they want?

578
00:24:12,766 --> 00:24:13,366
And why do they want it?

579
00:24:14,407 --> 00:24:17,429
Now again, in my professional experience, a good user story has three key elements.

580
00:24:18,330 --> 00:24:19,471
First of all, the story itself.

581
00:24:19,832 --> 00:24:24,056
As some sort of user, I perform some sort of activity to engage some sort of desired

582
00:24:24,096 --> 00:24:24,356
outcome.

583
00:24:25,197 --> 00:24:27,719
As a player, I jump so that I can traverse an environment.

584
00:24:28,500 --> 00:24:32,203
As an animator, I have animation blending tools so I can provide a smooth combat experience.

585
00:24:32,804 --> 00:24:36,067
As an engineer, I have continuous integration so I can have an efficient build process.

586
00:24:37,252 --> 00:24:38,894
The second element are acceptance criteria.

587
00:24:39,094 --> 00:24:40,795
You want to get, if you're the person requesting a feature,

588
00:24:41,216 --> 00:24:42,617
you want to give people clear goals

589
00:24:42,657 --> 00:24:44,298
as to what they're actually expected to deliver.

590
00:24:44,458 --> 00:24:45,299
Give them a clear target.

591
00:24:46,360 --> 00:24:47,561
And finally, technical requirements.

592
00:24:48,602 --> 00:24:50,764
This feature needs to interact with these classes,

593
00:24:50,964 --> 00:24:51,905
deal with these objects,

594
00:24:51,925 --> 00:24:54,126
it needs to occupy no more than this memory footprint,

595
00:24:54,166 --> 00:24:56,448
it needs to accept this input and provide this output.

596
00:24:56,909 --> 00:24:59,491
Try to think ahead to what a feature's gonna need

597
00:24:59,511 --> 00:25:00,672
to be technically sound.

598
00:25:02,333 --> 00:25:03,574
Yes, this takes time.

599
00:25:04,576 --> 00:25:05,997
But again, don't just ask what it costs.

600
00:25:06,618 --> 00:25:07,598
Think about what it might save.

601
00:25:08,379 --> 00:25:10,020
If you're routinely experiencing

602
00:25:10,160 --> 00:25:12,482
mis-executed features, mis-acceptance criteria,

603
00:25:12,983 --> 00:25:14,824
a little poke at your game might be exactly what you need.

604
00:25:16,085 --> 00:25:16,746
Additionally,

605
00:25:17,006 --> 00:25:18,647
if you have a creative lead who has sort of

606
00:25:18,787 --> 00:25:20,829
impulse, synaptically driven design decisions

607
00:25:20,869 --> 00:25:22,510
who creates a lot of churn and feature creep,

608
00:25:24,104 --> 00:25:27,047
Adding a little bit of administrative cost can curtail that. It's the same thing when

609
00:25:27,267 --> 00:25:32,233
they say if you go to a website and one click will drop your visitor throughput by about

610
00:25:32,393 --> 00:25:35,857
50%. The same kind of thing. Just adding a little bit of administrative cost can kind

611
00:25:35,877 --> 00:25:39,502
of curtail that feature churn. Because somebody has to ask, is it worth me writing this thing

612
00:25:39,522 --> 00:25:41,925
to actually request this feature that I just thought of while I was taking a whiz.

613
00:25:43,687 --> 00:25:44,468
Next up is Kanban.

614
00:25:45,380 --> 00:25:47,941
You would experience Agile and Scrub, you might have encountered Kanban.

615
00:25:48,602 --> 00:25:51,504
Literally translates as card or sign, I've also heard billboard.

616
00:25:51,724 --> 00:25:53,965
It's what's known as a pull-based production system.

617
00:25:54,426 --> 00:25:55,146
What that means is,

618
00:25:55,166 --> 00:25:59,629
if I'm the downstream guy, if I'm the guy who puts doors on the car,

619
00:25:59,929 --> 00:26:03,272
when I'm out of doors, I put a card in the cart, I send it to the person who assembles the doors,

620
00:26:03,692 --> 00:26:06,113
he assembles a bunch of doors, puts them back in the cart, sends them back my way.

621
00:26:07,594 --> 00:26:09,356
And that card corresponds to a certain number of parts.

622
00:26:09,416 --> 00:26:11,237
I can't just say, give me seven doors, give me three doors.

623
00:26:11,697 --> 00:26:14,519
We can only communicate numbers of requests via cards.

624
00:26:16,649 --> 00:26:19,071
The team members, it means I pull work and I'm ready for it.

625
00:26:19,711 --> 00:26:20,551
It's a pull-based system.

626
00:26:20,591 --> 00:26:22,433
Instead of a push-based system, like a can of soup

627
00:26:22,473 --> 00:26:23,553
that's constantly going down the line,

628
00:26:24,234 --> 00:26:25,915
you're not constantly pushing work down towards me.

629
00:26:25,955 --> 00:26:27,876
I'm not getting car doors piled all around me

630
00:26:27,896 --> 00:26:28,877
that I have to rush and keep up.

631
00:26:30,217 --> 00:26:31,678
And the amount of inventory in the system

632
00:26:31,738 --> 00:26:33,679
is entirely controlled by how many cards is in circulation.

633
00:26:33,759 --> 00:26:35,561
We don't request things other than with cards.

634
00:26:36,801 --> 00:26:39,243
Over time, managers remove cards from the system

635
00:26:39,343 --> 00:26:41,344
in order to maintain the absolute level of inventory

636
00:26:41,364 --> 00:26:42,385
that's currently being processed.

637
00:26:43,646 --> 00:26:44,566
Why is that helpful?

638
00:26:45,407 --> 00:26:45,867
Two reasons.

639
00:26:46,616 --> 00:26:47,677
Let's think back to Little's Law.

640
00:26:48,397 --> 00:26:52,139
Holding throughput constant, assuming they can get cars out of the line at the same rate,

641
00:26:52,599 --> 00:26:56,161
if they have less inventory in the system, that means their overall flow time is faster,

642
00:26:56,521 --> 00:27:01,724
because the parts don't spend as much time queuing up waiting for the next process to start.

643
00:27:02,044 --> 00:27:05,086
Which means your actual flow time is getting closer to your theoretical flow time,

644
00:27:05,106 --> 00:27:06,607
which means your efficiency is much higher.

645
00:27:07,948 --> 00:27:11,389
The second reason is that excess inventory masks production issues.

646
00:27:12,214 --> 00:27:13,535
It's like a protective layer of fat.

647
00:27:13,895 --> 00:27:15,135
There's always stuff going around.

648
00:27:15,355 --> 00:27:16,316
There's always something to work on,

649
00:27:16,336 --> 00:27:18,917
so it's hard to see where issues are cropping up

650
00:27:19,057 --> 00:27:20,137
and inefficiencies exist.

651
00:27:21,117 --> 00:27:22,578
But if you pull excess inventory out,

652
00:27:22,998 --> 00:27:24,939
those efficiencies become far easier to spot

653
00:27:24,979 --> 00:27:25,899
because you look around for the person

654
00:27:25,919 --> 00:27:26,859
who doesn't have anything to do

655
00:27:26,980 --> 00:27:28,000
because they're waiting on somebody else.

656
00:27:28,380 --> 00:27:29,380
That's the first place you want to look

657
00:27:29,400 --> 00:27:30,921
to figure out where the production imbalance is.

658
00:27:32,622 --> 00:27:34,762
Now, we don't have cars to yank, typically,

659
00:27:34,782 --> 00:27:36,063
in game development,

660
00:27:37,203 --> 00:27:38,784
but we do have work in process limits.

661
00:27:39,582 --> 00:27:41,706
Handsoft, Jira, a lot of those tools will allow you

662
00:27:41,726 --> 00:27:43,569
to set limits on Kanban flows

663
00:27:43,589 --> 00:27:44,951
to how much work anybody can have assigned.

664
00:27:45,592 --> 00:27:47,135
So if you wanna take the Kanban approach,

665
00:27:48,217 --> 00:27:50,400
start loose and then dial in the restraints over time.

666
00:27:52,504 --> 00:27:53,586
Next up is Jiroka.

667
00:27:54,760 --> 00:27:58,083
This translates to autonomation or more literally automation with a human touch.

668
00:27:58,824 --> 00:28:03,768
So at Toyota they have sensors that are on the line that automatically detect production issues and defects

669
00:28:04,649 --> 00:28:06,331
and will alert the workers of them.

670
00:28:06,751 --> 00:28:09,714
And if necessary it will stop the entire production process to get them resolved.

671
00:28:10,835 --> 00:28:14,418
The closest analog I've seen are automated testing scripts.

672
00:28:15,751 --> 00:28:17,753
You have testing scripts that are written up.

673
00:28:18,013 --> 00:28:20,094
You just run them and the script itself checks

674
00:28:20,114 --> 00:28:22,536
for any known issues, issues of experience,

675
00:28:22,596 --> 00:28:24,357
other predictable issues, and tries to iron them out

676
00:28:24,377 --> 00:28:25,738
so you don't have to consume a lot of developer

677
00:28:25,778 --> 00:28:26,779
and QA time finding them.

678
00:28:27,980 --> 00:28:28,960
Other good examples I've seen,

679
00:28:29,701 --> 00:28:30,962
bots that play the game automatically.

680
00:28:31,062 --> 00:28:32,803
So when WideLoad was making Avengers Initiative,

681
00:28:32,823 --> 00:28:34,444
we had a robot we called AutoHulk,

682
00:28:34,644 --> 00:28:35,985
who just played the game for us all day.

683
00:28:36,886 --> 00:28:39,588
Beat up robots 24-7, and he found so many issues for us

684
00:28:39,628 --> 00:28:41,249
that we didn't have to find through manual regression.

685
00:28:41,987 --> 00:28:43,688
Another good example is automated crash reports,

686
00:28:44,068 --> 00:28:45,848
game crashes, and somebody gets an email

687
00:28:45,868 --> 00:28:48,109
that includes any valuable data,

688
00:28:48,149 --> 00:28:49,810
how much, what was on the top of the stack,

689
00:28:50,130 --> 00:28:52,091
screenshot of what was going on at the time, anything that can help you

690
00:28:52,111 --> 00:28:53,971
diagnose an issue that'll save you a lot of time

691
00:28:53,991 --> 00:28:56,212
in investigations. And continuous integration

692
00:28:56,232 --> 00:28:58,453
is another great idea of

693
00:28:58,693 --> 00:29:00,193
streamlining processes through automation.

694
00:29:01,274 --> 00:29:01,394
Now,

695
00:29:02,074 --> 00:29:04,234
yes, these things take time to develop and establish,

696
00:29:05,255 --> 00:29:06,075
but they save far

697
00:29:06,155 --> 00:29:07,616
more time over the length of the project.

698
00:29:08,016 --> 00:29:10,477
And the earlier you get them in place, the more time they're going to be able to save you.

699
00:29:12,605 --> 00:29:13,346
Next up, muda.

700
00:29:14,146 --> 00:29:15,828
This literally translates as waste.

701
00:29:16,609 --> 00:29:19,192
And Toyota classifies waste into seven categories.

702
00:29:19,232 --> 00:29:20,894
Defects, overproduction, inventories,

703
00:29:20,974 --> 00:29:23,437
extra processing, motion, transportation, and waiting.

704
00:29:25,299 --> 00:29:27,701
Now, defects tend to be where we experience most of our pain.

705
00:29:27,861 --> 00:29:29,864
As far as waste, I'd put meetings up there pretty high,

706
00:29:29,904 --> 00:29:30,765
but we'll stick with defects.

707
00:29:31,930 --> 00:29:34,250
They come down to generally misacceptance criteria or bugs.

708
00:29:34,910 --> 00:29:37,831
Now experiencing zero defects is not a practicable goal.

709
00:29:37,891 --> 00:29:39,291
We are gonna make mistakes, we are human.

710
00:29:40,152 --> 00:29:42,812
So instead our goal should be to find and fix defects

711
00:29:42,892 --> 00:29:45,693
when it is least expensive, which is as soon as possible.

712
00:29:47,093 --> 00:29:48,413
Ideally, oops, sorry.

713
00:29:49,073 --> 00:29:49,574
Let out myself.

714
00:29:49,934 --> 00:29:52,294
Ideally before those bugs even make it into your repository,

715
00:29:52,314 --> 00:29:54,975
before they make it into GitHub or Perforce or Subversion,

716
00:29:55,735 --> 00:29:58,155
barring that before that contaminated code gets merged

717
00:29:58,235 --> 00:29:59,476
or at the very least before other code

718
00:29:59,496 --> 00:30:00,356
gets built on top of it.

719
00:30:01,154 --> 00:30:03,515
I saw a great presentation by a Bioware QA manager

720
00:30:03,555 --> 00:30:05,355
named Barbara Klenic on Wednesday,

721
00:30:05,715 --> 00:30:07,156
and she said something very similar to this.

722
00:30:07,196 --> 00:30:09,316
So, if it's good enough for Bioware's QA,

723
00:30:09,737 --> 00:30:11,017
should be good enough for anybody's.

724
00:30:11,797 --> 00:30:14,158
So a lean approach to QA would have a few steps.

725
00:30:15,338 --> 00:30:17,379
The first step would be buddy testing.

726
00:30:18,519 --> 00:30:19,479
You bring somebody else over

727
00:30:19,639 --> 00:30:21,880
and have them check your codes locally on your machine

728
00:30:22,400 --> 00:30:24,361
before you request it gets merged in the code base

729
00:30:24,881 --> 00:30:26,501
so you can catch missed acceptance criteria

730
00:30:26,521 --> 00:30:27,502
or other sources of error.

731
00:30:29,163 --> 00:30:30,765
The second step will be automated tests.

732
00:30:31,025 --> 00:30:33,347
You run those Jitaka-style tests of changes

733
00:30:33,887 --> 00:30:35,188
so you can find technical defects

734
00:30:35,749 --> 00:30:37,510
before you actually request that the code gets merged

735
00:30:37,570 --> 00:30:38,211
into the code base.

736
00:30:39,272 --> 00:30:40,352
So you can find those technical defects

737
00:30:40,372 --> 00:30:41,513
without consuming a lot of dev hours.

738
00:30:43,235 --> 00:30:44,376
Third step will be peer review.

739
00:30:45,777 --> 00:30:48,039
Have other people review your changes in the repository

740
00:30:48,339 --> 00:30:50,320
before the merge actually gets approved.

741
00:30:51,501 --> 00:30:53,043
So you can catch missed tech requirements,

742
00:30:53,083 --> 00:30:55,545
other sources of error before they can contaminate a build.

743
00:30:57,205 --> 00:30:59,447
And the final step would be actual manual QA and regression.

744
00:30:59,747 --> 00:31:02,309
You have dedicated QA members test the changes

745
00:31:03,990 --> 00:31:06,631
once they're in the build, but before they go off to leads for review.

746
00:31:06,651 --> 00:31:09,954
So you can catch defects before other code gets built on top of it.

747
00:31:10,374 --> 00:31:11,835
And you avoid that house of cards effect.

748
00:31:11,855 --> 00:31:14,336
We've all seen it where you have a defect in the code base

749
00:31:14,396 --> 00:31:16,958
and you build other things around it that depend on that defect being broken

750
00:31:16,978 --> 00:31:17,799
in just the way it's broken.

751
00:31:17,819 --> 00:31:19,280
And as soon as you fix it, you've got to fix everything else.

752
00:31:19,560 --> 00:31:20,220
You want to avoid that.

753
00:31:21,392 --> 00:31:24,032
You also want to avoid wasting lead and director time.

754
00:31:24,052 --> 00:31:26,693
Your leads, their time tends to be the most valuable

755
00:31:26,753 --> 00:31:27,813
because it's the most in demand.

756
00:31:27,993 --> 00:31:31,733
So a lean process, it behooves you to not send them

757
00:31:31,793 --> 00:31:33,834
anything unless you can have the highest possible

758
00:31:33,854 --> 00:31:35,614
level of confidence that you're not giving them defects.

759
00:31:37,114 --> 00:31:39,235
Now, is this onerous?

760
00:31:40,535 --> 00:31:41,235
Yeah, maybe.

761
00:31:42,515 --> 00:31:43,636
But I've seen it in action.

762
00:31:44,376 --> 00:31:46,436
And I've seen people use a very disciplined approach

763
00:31:46,456 --> 00:31:49,117
to QA and they have remarkably clean code bases.

764
00:31:50,194 --> 00:31:51,515
They have remarkably stable code bases.

765
00:31:51,535 --> 00:31:53,116
I've seen them go from six month projects,

766
00:31:53,597 --> 00:31:55,118
two weeks of final QA, and then it's live

767
00:31:55,818 --> 00:31:58,360
with a lot of stability and no crazy crashes when it launched.

768
00:31:58,800 --> 00:32:01,102
So there is an upside to having discipline in your QA process.

769
00:32:02,543 --> 00:32:04,865
Now some of you might think a four-step process

770
00:32:04,885 --> 00:32:06,166
when in the context of something called Lean

771
00:32:06,186 --> 00:32:07,047
and say a Lean approach.

772
00:32:07,787 --> 00:32:08,708
This doesn't sound Lean to me.

773
00:32:08,748 --> 00:32:09,308
That's four steps.

774
00:32:09,328 --> 00:32:10,669
Because when you hear the word Lean,

775
00:32:11,090 --> 00:32:11,970
you think of something like that.

776
00:32:12,050 --> 00:32:13,912
It's slender, not a lot of skin on them.

777
00:32:14,432 --> 00:32:16,934
But when I hear the word Lean, I think of this guy.

778
00:32:17,851 --> 00:32:20,793
Muscular, technically disciplined, and oh so handsome.

779
00:32:21,994 --> 00:32:25,337
So when you think lean, think Jean-Claude Van Damme.

780
00:32:27,279 --> 00:32:28,900
All right, hijunka.

781
00:32:29,901 --> 00:32:31,442
This means leveling, literally.

782
00:32:32,343 --> 00:32:34,625
Now a major misconception about operations

783
00:32:34,705 --> 00:32:36,927
is that batching is a best practice

784
00:32:36,947 --> 00:32:38,188
because it avoids switching costs.

785
00:32:39,209 --> 00:32:41,771
The problem with batching is that it leaves

786
00:32:41,791 --> 00:32:43,332
a lot of in progress inventory,

787
00:32:43,592 --> 00:32:44,974
and thus increases your flow time,

788
00:32:45,194 --> 00:32:46,535
and thus decreases your efficiency.

789
00:32:47,534 --> 00:32:49,716
So for example, you got two products, red and blue.

790
00:32:50,417 --> 00:32:51,538
You're trying to minimize switching costs.

791
00:32:51,558 --> 00:32:52,558
So you build up a bunch of reds

792
00:32:52,759 --> 00:32:53,960
and then you process them all at once.

793
00:32:54,020 --> 00:32:55,201
Meanwhile, you build up a bunch of blues

794
00:32:55,221 --> 00:32:56,302
and you process them all at once.

795
00:32:56,662 --> 00:32:58,103
You're trying to minimize how many switching costs you get.

796
00:32:58,603 --> 00:33:00,285
The problem is then you have this perpetual level

797
00:33:00,305 --> 00:33:01,846
of inventory that's always in your system.

798
00:33:04,508 --> 00:33:07,071
Inventory in the system is a liability.

799
00:33:07,491 --> 00:33:10,513
It represents money that's tied up in a production process

800
00:33:10,533 --> 00:33:12,875
that can't develop any sort of return on investment

801
00:33:13,476 --> 00:33:14,397
until it's been completed.

802
00:33:15,290 --> 00:33:19,053
And the longer it lingers in the system, the longer that flow time, the worse that opportunity cost is.

803
00:33:20,153 --> 00:33:21,054
So to give you an example,

804
00:33:23,555 --> 00:33:25,877
let's say your company's cost of capital is 10%.

805
00:33:26,777 --> 00:33:32,601
So for the non-finance nerds, that means that your company can on average expect to make about a 10% return on every dollar it invests yearly.

806
00:33:33,842 --> 00:33:38,965
Because of inefficiencies, you have $10 million worth of bloat in your system that don't need to be there but are because you're just inefficient.

807
00:33:39,864 --> 00:33:43,246
That means there's an annual opportunity cost of a million dollars that your company is absorbing.

808
00:33:43,766 --> 00:33:46,948
If you could liberate that ten million, you could make a million dollars a year on it.

809
00:33:47,128 --> 00:33:48,489
But you can't, because you're inefficient.

810
00:33:50,650 --> 00:33:54,513
Now, the other good thing about small batches is they make it easier to find and fix recurring defects.

811
00:33:54,613 --> 00:33:58,455
It's way better to fix something if it impacts five units than if it impacts a hundred.

812
00:34:00,577 --> 00:34:02,038
Now, we typically don't deal in physical...

813
00:34:02,138 --> 00:34:06,801
I'm sorry, the goal of operation science is not to avoid switching costs, it's to minimize them.

814
00:34:07,923 --> 00:34:11,305
Ideally you want to switch in costs so low that you can cost effectively have batch sizes of one,

815
00:34:11,705 --> 00:34:14,246
which is what Toyota got to. They have car batch sizes of one car.

816
00:34:15,487 --> 00:34:18,328
So an ideal inventory buildup diagram would look like this.

817
00:34:19,049 --> 00:34:21,410
Absolute minimum level of inventory goes in and it gets out right away.

818
00:34:24,051 --> 00:34:25,952
Now we don't typically deal in physical inventory,

819
00:34:27,053 --> 00:34:28,653
but there is an analog.

820
00:34:29,534 --> 00:34:31,615
If you change your definition of a feature being complete from

821
00:34:31,755 --> 00:34:34,076
in the code base and functional to Q8 and ready to ship.

822
00:34:36,500 --> 00:34:39,462
Because every incomplete feature represents a liability of its own,

823
00:34:39,722 --> 00:34:40,683
much like incomplete products.

824
00:34:40,883 --> 00:34:42,704
It's dev hours you've sunk into your game

825
00:34:43,004 --> 00:34:45,366
that you can't actually sell yet unless it's defect-free.

826
00:34:45,406 --> 00:34:46,987
So you can't capitalize on that work

827
00:34:47,027 --> 00:34:48,468
until you've run it through a QA process.

828
00:34:50,249 --> 00:34:51,990
So our typical kind of prototypical,

829
00:34:52,010 --> 00:34:53,371
especially with boxed copy AAA games,

830
00:34:53,751 --> 00:34:55,432
build-up diagram is you go through production,

831
00:34:55,452 --> 00:34:57,373
you build up a bunch of features over time,

832
00:34:57,573 --> 00:34:59,335
and you accrue defects at some multiple of that.

833
00:35:00,392 --> 00:35:01,833
Then you get to your alpha beta cert phase,

834
00:35:01,853 --> 00:35:02,853
you start closing defects,

835
00:35:02,893 --> 00:35:04,073
which lets you close down stories

836
00:35:04,133 --> 00:35:05,334
and everybody lives in the office and nobody sleeps

837
00:35:05,354 --> 00:35:06,534
because they're dealing with that house of cards

838
00:35:06,554 --> 00:35:07,635
and the build's constantly exploding

839
00:35:07,655 --> 00:35:08,535
and finally you hit a wall and you go,

840
00:35:08,595 --> 00:35:09,015
oh, ship it.

841
00:35:10,456 --> 00:35:11,336
Yeah, we'll do a day one patch.

842
00:35:13,016 --> 00:35:14,197
We've been there, we've all been there.

843
00:35:17,258 --> 00:35:18,818
You want to ensure that features are defect free

844
00:35:18,838 --> 00:35:19,879
when they're added to the code base.

845
00:35:21,139 --> 00:35:22,420
Move from the kind of prototypical

846
00:35:22,460 --> 00:35:23,660
build, build, build, build, build, build, build, build,

847
00:35:23,680 --> 00:35:26,021
build, fix, production alpha beta cert,

848
00:35:26,821 --> 00:35:28,422
to a build, fix, build, fix, build, fix,

849
00:35:28,462 --> 00:35:29,962
build, fix, build, fix, build, fix, cadence.

850
00:35:31,005 --> 00:35:33,906
Right now, that sort of classical, all QA at the end model,

851
00:35:34,246 --> 00:35:36,807
where you're essentially batching an entire game's worth of features,

852
00:35:37,087 --> 00:35:39,167
which from an operations science perspective is insanity.

853
00:35:41,348 --> 00:35:45,129
You want to make QA patches as small as possible, not the whole game, smaller.

854
00:35:45,469 --> 00:35:46,990
Ideally, QA paths for every submission,

855
00:35:47,250 --> 00:35:50,550
and then you want to focus on making the cost per QA batch as low as possible,

856
00:35:50,610 --> 00:35:51,731
both in terms of money and time.

857
00:35:54,852 --> 00:35:57,732
Now, some of you might balk at the notion of slowing down development

858
00:35:57,792 --> 00:35:59,413
to allow for a parallel QA cycle.

859
00:36:00,855 --> 00:36:01,235
Fair enough.

860
00:36:03,136 --> 00:36:04,917
Except I'm not actually advocating that you slow down.

861
00:36:06,238 --> 00:36:07,799
I'm advocating that you consolidate the work.

862
00:36:09,359 --> 00:36:11,680
Instead of doing 80% of work on a feature, the development,

863
00:36:11,961 --> 00:36:14,222
now, and the 20% of the QA in the future

864
00:36:14,242 --> 00:36:15,842
when you get to Alphabet Assert, I'm

865
00:36:15,862 --> 00:36:17,863
saying doing that 100% of the work in one sequence.

866
00:36:18,464 --> 00:36:20,144
Defrag your production process the same way

867
00:36:20,164 --> 00:36:21,285
you would defrag a hard drive.

868
00:36:22,125 --> 00:36:23,386
Now here's the way I like to think about this.

869
00:36:24,814 --> 00:36:26,715
In business, you have what's called the time value of money.

870
00:36:26,735 --> 00:36:28,396
It's one of the most fundamental concepts of business.

871
00:36:28,876 --> 00:36:31,618
A dollar today is more valuable than that same dollar in the future.

872
00:36:32,299 --> 00:36:32,839
For two reasons.

873
00:36:33,700 --> 00:36:34,860
Risk and opportunity cost.

874
00:36:35,821 --> 00:36:38,303
Risk because you don't know if you're going to get that dollar in the future.

875
00:36:39,183 --> 00:36:41,865
And opportunity cost because you could have done something with it in the meantime.

876
00:36:42,966 --> 00:36:43,967
This is why you pay interest.

877
00:36:44,307 --> 00:36:46,108
You're compensating your bank or your credit card company

878
00:36:46,569 --> 00:36:49,631
for the risk and opportunity cost they're absorbing by providing you with money.

879
00:36:50,835 --> 00:36:55,297
I think we have a direct analog in software development that I like to call the time value

880
00:36:55,317 --> 00:36:55,717
of fixes.

881
00:36:56,638 --> 00:37:00,019
I think a fix today is more valuable than that same fix in the future for the same two

882
00:37:00,059 --> 00:37:00,340
reasons.

883
00:37:00,840 --> 00:37:03,061
Risk, because it might not be the same fix in the future.

884
00:37:03,701 --> 00:37:06,923
It might be a much larger fix in the future because it deals with other systems.

885
00:37:07,803 --> 00:37:11,345
And opportunity cost, because if it is a larger fix in the future and requires more time to

886
00:37:11,385 --> 00:37:14,427
resolve, that's time you could have spent somewhere else making your game better.

887
00:37:15,402 --> 00:37:18,184
And I'm not alone in thinking in terms of financial analogs

888
00:37:18,244 --> 00:37:20,185
for software development because we have the existing term

889
00:37:20,205 --> 00:37:21,026
of technical debt.

890
00:37:21,806 --> 00:37:23,668
If you make this shitty, hacky, quick code

891
00:37:23,688 --> 00:37:25,049
to get something in the build fast,

892
00:37:25,469 --> 00:37:27,250
and then you leave it in your code base,

893
00:37:27,811 --> 00:37:28,912
you're essentially running up a debt

894
00:37:29,012 --> 00:37:29,992
on your production credit card.

895
00:37:30,853 --> 00:37:33,135
And the longer that debt lies on your credit card,

896
00:37:33,595 --> 00:37:35,396
the bigger the payout's gonna be to finally clear it up

897
00:37:35,416 --> 00:37:37,198
because you're gonna have a larger and larger refactor

898
00:37:37,218 --> 00:37:38,219
the longer you let it linger.

899
00:37:40,640 --> 00:37:42,922
So a diagram of lean production in its entirety.

900
00:37:43,914 --> 00:37:45,795
When you're doing feature specs, you want to use PokéOK.

901
00:37:45,815 --> 00:37:49,318
You want to carefully define specs to eliminate sources of human error before they can happen.

902
00:37:50,318 --> 00:37:52,260
In development, you want to utilize Kanban.

903
00:37:52,520 --> 00:37:56,382
Limit work in progress to increase efficiency and make it easier to spot production issues.

904
00:37:58,604 --> 00:38:00,485
When you're actually doing testing, you want to do a Jidoka.

905
00:38:00,505 --> 00:38:02,506
You want to do it with automated tests and Mura.

906
00:38:02,526 --> 00:38:05,668
You want to focus on eliminating waste through disciplined QA processes.

907
00:38:07,383 --> 00:38:10,605
And finally, when you're compiling, you want to observe hijinuka.

908
00:38:10,625 --> 00:38:13,806
You want to minimize the level of unfinished features and avoid batching.

909
00:38:13,986 --> 00:38:15,807
You want to keep continuous integration going

910
00:38:16,227 --> 00:38:18,509
and keep applying QA to make sure that things are ready to ship.

911
00:38:20,370 --> 00:38:22,391
Now, to get started with Lean, start small.

912
00:38:22,791 --> 00:38:23,411
Build up over time.

913
00:38:23,471 --> 00:38:26,773
Don't be the person who shows up at the gym on New Year's Day and says,

914
00:38:26,813 --> 00:38:29,134
hey, I'm going to stop smoking, I'm going to cut down,

915
00:38:29,154 --> 00:38:30,815
I'm going to stop drinking sodas entirely,

916
00:38:30,835 --> 00:38:33,196
I'm going to eat nothing but raw vegan food.

917
00:38:34,037 --> 00:38:36,458
Find one pain point, your biggest pain point.

918
00:38:37,080 --> 00:38:39,801
Try absolving that and then move to the next one.

919
00:38:40,741 --> 00:38:41,722
Gather objective data.

920
00:38:42,242 --> 00:38:43,422
Don't just say like, oh, things are better.

921
00:38:43,582 --> 00:38:45,403
Try to find real metrics.

922
00:38:46,824 --> 00:38:48,124
I'm sure you track metrics.

923
00:38:48,524 --> 00:38:49,685
Find them, track them objectively.

924
00:38:50,405 --> 00:38:51,546
Apply the scientific method.

925
00:38:52,526 --> 00:38:54,087
Observation, hypothesis, test,

926
00:38:54,707 --> 00:38:56,128
result, conclusion, repeat.

927
00:38:56,288 --> 00:38:56,808
Rinse and repeat.

928
00:38:58,288 --> 00:38:59,529
And then anticipate loss aversion.

929
00:39:00,309 --> 00:39:01,750
So natural human psychology is that

930
00:39:01,770 --> 00:39:04,331
when there's a change, we focus on what it costs us

931
00:39:04,371 --> 00:39:05,531
before we think about what it gains.

932
00:39:06,678 --> 00:39:08,779
Losses always loom larger than gains for us.

933
00:39:08,819 --> 00:39:11,820
So in my experience as a manager, driving any change,

934
00:39:11,920 --> 00:39:13,341
I always run head first into loss aversion.

935
00:39:14,481 --> 00:39:16,182
Now, loss aversion is kind of like an oil fire.

936
00:39:17,082 --> 00:39:18,343
An oil fire, to get it to go out,

937
00:39:18,383 --> 00:39:20,304
you set off a bigger explosion next to it to choke it out.

938
00:39:20,524 --> 00:39:21,604
Loss aversion is kind of the same way.

939
00:39:22,064 --> 00:39:23,405
If somebody's experiencing loss aversion,

940
00:39:23,425 --> 00:39:25,746
the way to get them over that is to put a bigger source

941
00:39:25,766 --> 00:39:26,786
of loss aversion next to them.

942
00:39:26,866 --> 00:39:28,487
You want to express the cost of inaction.

943
00:39:29,167 --> 00:39:30,407
So yes, this change will cost you,

944
00:39:30,427 --> 00:39:31,408
but if we don't put this change,

945
00:39:31,668 --> 00:39:32,728
it's gonna cost you a lot more.

946
00:39:33,128 --> 00:39:34,509
Little management psychology trick.

947
00:39:36,676 --> 00:39:37,677
All right, some closing thoughts.

948
00:39:40,179 --> 00:39:41,020
We don't work in factories.

949
00:39:41,500 --> 00:39:42,341
Games are not widgets.

950
00:39:43,202 --> 00:39:44,182
Studios are not factories.

951
00:39:45,243 --> 00:39:47,866
Discovery, uncertainty, variance, experimentation,

952
00:39:48,526 --> 00:39:49,947
they come with the territory, and that's fine.

953
00:39:50,448 --> 00:39:50,928
That's natural.

954
00:39:52,389 --> 00:39:54,011
But we also don't work in performance art.

955
00:39:55,212 --> 00:39:57,834
We have obligations to be responsible with the money that's provided to us

956
00:39:57,874 --> 00:40:00,356
in the form of backers, investors, publishers.

957
00:40:01,738 --> 00:40:05,300
And we also need to take account for the fact that we have our team's livelihoods in our

958
00:40:05,320 --> 00:40:05,460
hands.

959
00:40:05,480 --> 00:40:06,441
We have their careers in our hands.

960
00:40:06,481 --> 00:40:07,981
We have their families' well-being in our hands.

961
00:40:08,562 --> 00:40:10,463
And we need to be responsible about that and acknowledge that.

962
00:40:11,343 --> 00:40:14,084
So I'm not proposing that we eliminate or reduce discovery.

963
00:40:14,465 --> 00:40:15,665
It's clearly vital to what we do.

964
00:40:17,306 --> 00:40:19,487
But I think we need to take every opportunity to eliminate waste.

965
00:40:20,768 --> 00:40:27,811
Not to curtail experimentation, but to facilitate more of it and to make it more productive.

966
00:40:29,912 --> 00:40:30,212
Finally.

967
00:40:32,565 --> 00:40:35,067
Nothing I've talked about today is really all that complicated.

968
00:40:35,087 --> 00:40:37,209
It was a lot of material, so I know it's a lot to go through,

969
00:40:37,609 --> 00:40:39,851
but any one instance of it is actually not that complicated.

970
00:40:40,512 --> 00:40:40,932
It's really not.

971
00:40:41,753 --> 00:40:43,915
So getting started on any of this stuff is not that hard.

972
00:40:45,377 --> 00:40:47,418
The hard part is maintaining discipline in their use

973
00:40:47,899 --> 00:40:49,480
and not cutting corners when it's expedient.

974
00:40:50,521 --> 00:40:52,383
And discipline is absolutely key to seeking results.

975
00:40:53,824 --> 00:40:56,266
So if you take away nothing else from this presentation,

976
00:40:56,286 --> 00:40:57,588
I want you to take this one last thought.

977
00:40:58,848 --> 00:41:00,389
which is that discipline equals freedom.

978
00:41:01,090 --> 00:41:02,892
This is a saying of a man named Jocko Willink.

979
00:41:03,752 --> 00:41:05,114
If any of you are fans of the Tim Ferriss Show

980
00:41:05,174 --> 00:41:06,315
or the Joe Rogan Podcast,

981
00:41:06,335 --> 00:41:07,376
you may have encountered this character.

982
00:41:08,276 --> 00:41:09,297
He's a consultant and an author.

983
00:41:10,258 --> 00:41:12,520
More interestingly, he's the next Navy SEAL

984
00:41:13,221 --> 00:41:14,162
and a black belt in jujitsu.

985
00:41:15,083 --> 00:41:16,444
So I want you to imagine in your head

986
00:41:16,484 --> 00:41:18,045
what a guy who'd say some shit like this

987
00:41:18,166 --> 00:41:18,906
and have this kind of resume,

988
00:41:18,926 --> 00:41:20,828
like what he looks like, imagine him,

989
00:41:21,569 --> 00:41:22,229
probably looks like that.

990
00:41:24,477 --> 00:41:29,540
I got that's his LinkedIn photo. That's where I got it. That's how severe this motherfucker is. He can't even smile. He can just frown less.

991
00:41:30,821 --> 00:41:31,081
Right

992
00:41:33,043 --> 00:41:34,584
Discipline equals freedom is his motto

993
00:41:35,845 --> 00:41:39,808
If you have the discipline to eat well and get regular exercise like this gentleman right here

994
00:41:40,368 --> 00:41:43,250
You will have the freedom afforded to you by good health to enjoy your life

995
00:41:44,131 --> 00:41:47,753
If you are disciplined about studying throughout the length of the quarter like I did in grad school

996
00:41:48,234 --> 00:41:51,456
You have the freedom to sleep the night before the final because you won't have to cram

997
00:41:52,553 --> 00:41:54,635
And if you have the discipline to follow processes

998
00:41:54,655 --> 00:41:56,256
that reduce and eliminate waste,

999
00:41:57,476 --> 00:41:59,117
you will have the freedom to spend your time

1000
00:41:59,337 --> 00:42:01,478
generating more value for gamers instead of fighting fires.

1001
00:42:03,580 --> 00:42:05,260
And with that, I will turn it over for questions.

1002
00:42:05,341 --> 00:42:08,082
But first, here's my contact info.

1003
00:42:08,802 --> 00:42:09,643
If you enjoyed the presentation,

1004
00:42:09,663 --> 00:42:10,563
a lot more material on the blog.

1005
00:42:10,583 --> 00:42:11,544
If you scan that QR code,

1006
00:42:11,564 --> 00:42:13,705
that'll give you my personal contact info.

1007
00:42:14,466 --> 00:42:16,207
There's also, I stacked a bunch of business cards

1008
00:42:16,227 --> 00:42:17,107
right by the camera back there,

1009
00:42:17,127 --> 00:42:18,948
and also Post-it Notes for my blog.

1010
00:42:18,968 --> 00:42:20,269
Just, you know, little tchotchkes.

1011
00:42:20,309 --> 00:42:21,590
So please avail yourself of that.

1012
00:42:22,458 --> 00:42:24,939
And I'll take questions. Please.

1013
00:42:25,239 --> 00:42:33,323
Hey, I actually really appreciated this talk. I do have a question. So in essence, this applies for process very well.

1014
00:42:34,104 --> 00:42:40,347
So if it's a well understood problem, you can produce and manufacture the game.

1015
00:42:42,169 --> 00:42:45,894
What about all that time leading up to the point where you actually not...

1016
00:42:46,335 --> 00:42:52,002
The requirements aren't clear. So in essence, you want to minimize the amount of waste and shit you have to throw out.

1017
00:42:52,022 --> 00:42:52,403
Right.

1018
00:42:53,163 --> 00:42:56,388
And you're going to end up making the wrong things throughout.

1019
00:42:56,488 --> 00:42:58,010
How do you have a good...

1020
00:42:58,710 --> 00:43:03,031
It's a research and experimental development process beforehand.

1021
00:43:03,191 --> 00:43:06,312
Sure. So there are two broad categories of activities.

1022
00:43:07,112 --> 00:43:11,073
Value-adding, things that make the product, whatever it is in our case, games, better for the end user.

1023
00:43:11,313 --> 00:43:14,074
And non-value-adding, things that don't, like meetings, rebooting PCs.

1024
00:43:14,754 --> 00:43:22,195
So even within your prototyping phase, you're going to have some recurring events that you're going to deal with all the time.

1025
00:43:22,895 --> 00:43:26,460
For anything that's recurring that you deal with multiple times in a routine fashion,

1026
00:43:26,961 --> 00:43:30,386
can it be automated, eliminated, outsourced, or streamlined?

1027
00:43:30,906 --> 00:43:31,047
Yes.

1028
00:43:31,127 --> 00:43:36,695
And you can't contain the chaos of the prototype, but you can find those other things to streamline

1029
00:43:36,755 --> 00:43:37,636
and you can start building in...

1030
00:43:39,479 --> 00:43:41,859
Start establishing things like unit tests are a lot easier to do

1031
00:43:42,160 --> 00:43:44,100
if you establish them from the beginning and build them up over time.

1032
00:43:44,120 --> 00:43:46,621
So, try to make those investments you can reliably make now

1033
00:43:47,242 --> 00:43:48,922
to facilitate that experimentation.

1034
00:43:49,542 --> 00:43:51,843
And then also, when you're doing prototype code,

1035
00:43:52,003 --> 00:43:54,424
it's fine if you want to make the hacky code to get to testing features faster.

1036
00:43:54,464 --> 00:43:56,165
Just make sure you don't put it in the real database,

1037
00:43:56,205 --> 00:43:58,046
put it in like the shitty hacky prototype database.

1038
00:43:58,506 --> 00:43:59,346
I totally understand.

1039
00:43:59,606 --> 00:44:00,407
Does that answer your question?

1040
00:44:01,547 --> 00:44:02,087
Personally.

1041
00:44:02,307 --> 00:44:04,668
Because one of the other things like,

1042
00:44:05,028 --> 00:44:08,110
so are you familiar with the Bethesda level design process?

1043
00:44:08,943 --> 00:44:09,524
I am actually not.

1044
00:44:33,511 --> 00:44:43,858
And one of the main reasons why I think this seems to work is in essence that you are starting off with content that is cheap to make and cheap to throw away.

1045
00:44:43,978 --> 00:44:50,862
And as you get further and further and further down the line you understand what the hell you're making and what actually the final game is going to be far better.

1046
00:44:51,523 --> 00:44:55,505
And so in essence you should continue working on the things that you're actually going to have in your game.

1047
00:44:59,046 --> 00:45:04,227
doesn't quite align with this flow process. Where in essence you're talking about getting as many

1048
00:45:04,287 --> 00:45:13,270
characters out as efficiently as possible in a final way. And so I mean I understand the whole

1049
00:45:13,330 --> 00:45:19,512
you want to QA stuff and make sure it works, but it's also useful to be able to figure out what

1050
00:45:19,592 --> 00:45:22,673
actually you're going to have to QA. Yeah, that's totally fair.

1051
00:45:24,689 --> 00:45:27,410
I don't want to make too many comments on that because all my understanding is what

1052
00:45:27,430 --> 00:45:28,390
you just told me.

1053
00:45:29,831 --> 00:45:33,732
So one of my favorite quotes, I think it was Emerson, said, a foolish consistency is a

1054
00:45:33,772 --> 00:45:34,652
hobgoblin of little minds.

1055
00:45:34,712 --> 00:45:38,793
So no one process, this takes kind of a clearer view of the universe.

1056
00:45:39,293 --> 00:45:42,834
And Bethesda's view of the universe, the reality, might be deemed for that.

1057
00:45:42,874 --> 00:45:43,455
That's totally fine.

1058
00:45:43,595 --> 00:45:46,355
And if that is the process that's most effective, do it.

1059
00:45:46,555 --> 00:45:46,936
I understand.

1060
00:45:49,158 --> 00:45:52,701
Does this cover all situations? No. Does it cover all cultures, all value systems? No.

1061
00:45:54,603 --> 00:45:59,808
My main thread is to say, here are the tools that exist, and here's a way you can think of the universe in terms of eliminating waste.

1062
00:46:01,213 --> 00:46:01,833
adapt it to your culture.

1063
00:46:01,853 --> 00:46:03,174
For me, it's the same thing with scrum.

1064
00:46:03,995 --> 00:46:05,356
Pure scrum is like pure socialism.

1065
00:46:05,416 --> 00:46:06,857
It sounds like a great idea until you actually try it.

1066
00:46:07,118 --> 00:46:08,519
You've got to adapt scrum to your culture.

1067
00:46:08,539 --> 00:46:09,880
So to me, it's the same thing.

1068
00:46:10,280 --> 00:46:14,243
Really what is most important is finding ways to eliminate waste so you can facilitate that

1069
00:46:14,283 --> 00:46:14,764
discovery.

1070
00:46:14,804 --> 00:46:15,744
That discovery is totally valid.

1071
00:46:15,885 --> 00:46:17,005
Yeah.

1072
00:46:17,266 --> 00:46:21,049
But even a company as great as Bethesda, I'm sure has pain points that they can resolve.

1073
00:46:21,089 --> 00:46:24,331
So where can you make investments to resolve that, to facilitate even more of that?

1074
00:46:24,411 --> 00:46:25,072
Is that fair?

1075
00:46:25,812 --> 00:46:26,533
No, it's totally fair.

1076
00:46:26,573 --> 00:46:28,074
I was just trying to understand how do you...

1077
00:46:29,476 --> 00:46:33,687
How do you switch over as you go from discovery into production?

1078
00:46:34,349 --> 00:46:34,589
Sure.

1079
00:46:34,689 --> 00:46:35,391
I mean that one...

1080
00:46:36,013 --> 00:46:36,595
How do you switch over?

1081
00:46:37,977 --> 00:46:41,279
I mean, if you know what you're trying to make, it's a lot easier to say, okay, now we

1082
00:46:41,299 --> 00:46:43,741
know what the characters are, we know what it takes to make them, now we can run through

1083
00:46:43,761 --> 00:46:44,121
a process.

1084
00:46:44,181 --> 00:46:50,244
I mean, that's where having clearly delineated pre-production, prototyping, into production

1085
00:46:50,284 --> 00:46:51,625
and post-production kind of plays in.

1086
00:46:52,946 --> 00:46:55,888
To me, it's like good production is each phase should have its intention.

1087
00:46:56,348 --> 00:46:59,510
And for me, production is the intention is, okay, we've proven the vertical slice, we've

1088
00:46:59,530 --> 00:47:02,371
proven what the thrust is, we've proven how to build these things and what they should

1089
00:47:02,391 --> 00:47:05,833
look like, so now how can we make them in a predictable, as predictable a way as possible.

1090
00:47:05,873 --> 00:47:05,973
So.

1091
00:47:06,714 --> 00:47:12,276
Be predictable assumes that you have that information which is what the process you're talking about would require.

1092
00:47:12,656 --> 00:47:18,359
And like the way I think is, one thing that I think is very valuable is to also have minimized cost of change.

1093
00:47:18,619 --> 00:47:19,279
Mm-hmm, totally.

1094
00:47:19,299 --> 00:47:21,900
And so in essence, yeah, anyways.

1095
00:47:22,460 --> 00:47:24,241
That's switching, minimized switching costs, totally agree.

1096
00:47:24,261 --> 00:47:24,861
Yeah, yeah, absolutely.

1097
00:47:25,482 --> 00:47:25,742
Thank you.

1098
00:47:27,142 --> 00:47:28,223
Any other questions? Oh, hello.

1099
00:47:28,303 --> 00:47:29,924
Hi, Justin. Thanks so much. Great talk.

1100
00:47:30,864 --> 00:47:34,827
I'm curious if you've seen the work...

1101
00:47:35,687 --> 00:47:39,869
You've seen Lean and Kanban work for the artist workflow

1102
00:47:40,550 --> 00:47:44,392
in a team that's doing more batched, like Scrum?

1103
00:47:46,060 --> 00:47:51,043
So any hybrid, any advice for hybrid modeling?

1104
00:47:51,263 --> 00:47:53,444
I've never found Scrum works well for artists,

1105
00:47:54,344 --> 00:47:56,065
because the flowchart, the critical path,

1106
00:47:56,125 --> 00:47:57,946
never lines up cleanly with Scrum break.

1107
00:47:57,986 --> 00:48:01,187
So when I was doing Scrum, I was doing Scrum

1108
00:48:01,227 --> 00:48:03,528
for the feature design, the developers, and the engineers,

1109
00:48:03,628 --> 00:48:05,789
and then Kanban for the artists in parallel, because it just.

1110
00:48:07,846 --> 00:48:10,767
My problem with Scrum is I've gotten more and more experience

1111
00:48:10,807 --> 00:48:12,547
is that Scrum kind of artificially makes these

1112
00:48:12,567 --> 00:48:12,887
batches.

1113
00:48:13,688 --> 00:48:16,348
And so I've kind of moved away from Scrum into pure Kanban

1114
00:48:16,368 --> 00:48:18,829
because I want as small batches as possible.

1115
00:48:18,929 --> 00:48:21,390
So I find that works better for artists, but also in my

1116
00:48:21,410 --> 00:48:22,890
experience, I think it works better for engineers too.

1117
00:48:22,910 --> 00:48:23,850
OK.

1118
00:48:24,070 --> 00:48:24,471
Thank you.

1119
00:48:24,511 --> 00:48:24,751
Thank you.

1120
00:48:25,611 --> 00:48:25,771
Please.

1121
00:48:27,553 --> 00:48:33,897
Hey, so for example, when you're talking about like a sequence of work that has to happen,

1122
00:48:34,318 --> 00:48:38,841
where they're dependent upon one another, use the art pipeline because then you could

1123
00:48:38,941 --> 00:48:44,245
really know, you know, okay, the, you know, modeling takes this amount of time and say

1124
00:48:44,305 --> 00:48:46,026
texturing takes this amount of time.

1125
00:48:46,587 --> 00:48:51,149
How do you break it up for like programming tasks which can have high variance?

1126
00:48:51,309 --> 00:48:54,111
You know, we tend to just group all engineering tasks all together.

1127
00:48:54,131 --> 00:48:55,692
Some can take a short time, long.

1128
00:48:55,992 --> 00:48:57,593
How do you go about, you know, breaking those up?

1129
00:48:57,953 --> 00:49:03,997
Or do you just say all generic engineering tasks takes, you know, on X based on, you know, your model?

1130
00:49:05,297 --> 00:49:09,220
So what I, I don't like to try to anticipate the time it takes to code something.

1131
00:49:09,540 --> 00:49:10,921
Because that just, it's too unpredictable.

1132
00:49:11,721 --> 00:49:15,504
What I like to do is focus on the time it takes to do all the supporting things that go to the coding.

1133
00:49:15,584 --> 00:49:19,288
Like, you know, writing the feature request properly so you make your life as easy as possible.

1134
00:49:19,648 --> 00:49:21,610
Make the QA process as understandable as possible.

1135
00:49:21,670 --> 00:49:24,392
Make sure that, like, continuous build integration as fast as possible.

1136
00:49:24,412 --> 00:49:26,354
You have a reliable source database.

1137
00:49:26,754 --> 00:49:29,917
Try to lay all those cards out to make sure your life is as easy as it can be.

1138
00:49:31,052 --> 00:49:37,901
What helps for actually dealing with code, the code development itself is A, I think it's better to have smaller, as small a feature as you can.

1139
00:49:38,282 --> 00:49:42,427
Like just get them on the smallest possible increments so you're not like bogged down with one thing for a while.

1140
00:49:42,607 --> 00:49:44,510
That's my experience.

1141
00:49:44,630 --> 00:49:45,471
And then the other one is.

1142
00:49:46,835 --> 00:49:51,120
I'm less concerned with how long a feature takes, which is hard to track and not so useful.

1143
00:49:51,460 --> 00:49:54,925
That's a measurement of precision. I'm not so concerned with precision, I'm concerned with accuracy.

1144
00:49:55,385 --> 00:50:00,852
So I'm much more interested in how much, not less in how long something takes, but more how much we can get done in a certain time.

1145
00:50:00,872 --> 00:50:01,653
So like story points.

1146
00:50:02,393 --> 00:50:06,896
I don't really care if a feature takes you 8 hours or 12 hours.

1147
00:50:06,976 --> 00:50:07,576
It's too hard to predict.

1148
00:50:07,896 --> 00:50:10,438
What I am interested in is how many points do you clear up per week.

1149
00:50:10,458 --> 00:50:13,599
So instead of time per issue, I'm worried about issue per time.

1150
00:50:13,679 --> 00:50:14,239
Does that make sense?

1151
00:50:14,460 --> 00:50:15,400
Yep, totally makes sense.

1152
00:50:15,620 --> 00:50:16,481
That's where the variance comes in.

1153
00:50:16,501 --> 00:50:18,582
Like, there's only so much we can control the variance of what you experience.

1154
00:50:18,602 --> 00:50:20,623
So I want to eliminate the variance around that

1155
00:50:21,003 --> 00:50:22,403
so that you have the easiest time possible.

1156
00:50:22,423 --> 00:50:25,425
That's generally my approach to working with engineers, especially.

1157
00:50:25,445 --> 00:50:26,506
Great, thank you.

1158
00:50:26,606 --> 00:50:28,306
Cool.

1159
00:50:28,326 --> 00:50:28,747
Anybody else?

1160
00:50:29,247 --> 00:50:29,667
Any questions?

1161
00:50:31,572 --> 00:50:32,353
Go once, go twice.

1162
00:50:32,373 --> 00:50:33,676
All right, like I said, cards in the back.

1163
00:50:34,238 --> 00:50:35,400
You have help yourself to post notes.

1164
00:50:36,423 --> 00:50:37,024
Please reach out to me.

1165
00:50:37,044 --> 00:50:38,147
I love talking shop anytime.

1166
00:50:38,448 --> 00:50:39,370
And thank you very much.

1167
00:50:39,410 --> 00:50:39,991
You guys have been great.

