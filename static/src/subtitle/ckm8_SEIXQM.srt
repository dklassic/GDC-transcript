1
00:00:04,361 --> 00:00:07,043
I'm Mark Flurry, and today I'll be talking about

2
00:00:07,043 --> 00:00:08,504
the game I made, Thumper.

3
00:00:08,504 --> 00:00:11,485
Is there anything else?

4
00:00:11,485 --> 00:00:15,608
Yes, please put your cell phones on silent or vibrate,

5
00:00:15,608 --> 00:00:18,089
and I'll remind you again about the evaluation forms

6
00:00:18,089 --> 00:00:20,571
at the end of the talk.

7
00:00:20,571 --> 00:00:26,234
So thanks for coming, and I am part of a two-person team

8
00:00:26,234 --> 00:00:29,616
called Drool, it's myself and Brian Gibson.

9
00:00:30,710 --> 00:00:34,291
You might know Brian, he's the bassist for the band Lightning Bolt.

10
00:00:34,291 --> 00:00:35,992
He lives in Providence, Rhode Island.

11
00:00:35,992 --> 00:00:36,932
Woo!

12
00:00:36,932 --> 00:00:39,172
All right, and he's an artist and musician.

13
00:00:39,172 --> 00:00:44,154
And he did all of the art and music for Thumper.

14
00:00:44,154 --> 00:00:45,354
I'm a programmer.

15
00:00:45,354 --> 00:00:51,555
I've been living in Korea for the past five years, but I grew up in the United States.

16
00:00:51,555 --> 00:00:53,936
And I did all the programming for Thumper.

17
00:00:53,936 --> 00:00:58,337
And the game design of Thumper was a collaboration between the two of us.

18
00:01:01,024 --> 00:01:02,866
So if you've never heard of the Thumper,

19
00:01:02,866 --> 00:01:05,369
it's a simple action game.

20
00:01:05,369 --> 00:01:07,711
You are a space beetle cruising

21
00:01:07,711 --> 00:01:11,595
through a dark, psychedelic world at high speed.

22
00:01:11,595 --> 00:01:13,477
It's a rhythm game, but our goal was always

23
00:01:13,477 --> 00:01:16,460
to make it feel like a unique and intense experience

24
00:01:16,460 --> 00:01:19,363
and different than other rhythm action games.

25
00:01:19,363 --> 00:01:21,706
We like to call Thumper a rhythm violence game.

26
00:01:23,575 --> 00:01:26,558
So if you've never seen it, for the benefit of those

27
00:01:26,558 --> 00:01:29,980
who are not familiar with Thumper at all,

28
00:01:29,980 --> 00:01:34,304
I'll just play the trailer that we released

29
00:01:34,304 --> 00:01:36,486
when the game came out.

30
00:01:36,486 --> 00:01:39,868
It's about a minute long, I just have to figure out

31
00:01:39,868 --> 00:01:40,629
how to get it on that screen.

32
00:01:40,629 --> 00:01:43,331
Let's kind of do a drag.

33
00:01:43,331 --> 00:01:44,692
That's good enough.

34
00:02:54,496 --> 00:03:00,163
Thank you, thank you.

35
00:03:06,118 --> 00:03:09,120
So hopefully that gives you an idea of what the game is like.

36
00:03:09,120 --> 00:03:11,441
So you're controlling that little space beetle character.

37
00:03:11,441 --> 00:03:13,922
You play the whole game with one analog stick

38
00:03:13,922 --> 00:03:16,083
and one button.

39
00:03:16,083 --> 00:03:17,724
So a lot of it involves just beat matching

40
00:03:17,724 --> 00:03:18,785
with that one button.

41
00:03:18,785 --> 00:03:21,026
As you can see the little rhythmic cues coming at you.

42
00:03:21,026 --> 00:03:25,008
There's also times where you have to turn, jump, and fly,

43
00:03:25,008 --> 00:03:28,089
avoid obstacles, and defeat some bosses.

44
00:03:29,802 --> 00:03:32,524
Thumper was released last October on PS4

45
00:03:32,524 --> 00:03:37,167
and PlayStation VR and Steam at the same time.

46
00:03:37,167 --> 00:03:38,728
And then a couple months later,

47
00:03:38,728 --> 00:03:41,490
I added support, we added support for Steam VR and Oculus.

48
00:03:41,490 --> 00:03:43,612
So you can play the whole game

49
00:03:43,612 --> 00:03:46,514
either with a VR headset or without.

50
00:03:46,514 --> 00:03:49,896
To give you an idea of our background,

51
00:03:49,896 --> 00:03:53,299
this is before we started working on Thumper.

52
00:03:53,299 --> 00:03:54,120
We started back in 2009.

53
00:03:54,520 --> 00:03:58,023
And at that time, Brian already had years of experience

54
00:03:58,023 --> 00:04:01,186
working at a game company as an effects artist.

55
00:04:01,186 --> 00:04:03,608
But he had never done all the art for a game before.

56
00:04:03,608 --> 00:04:05,329
He'd never art directed a game before.

57
00:04:05,329 --> 00:04:08,692
And he ended up doing everything for Thumper.

58
00:04:08,692 --> 00:04:11,434
Brian's a very talented musician,

59
00:04:11,434 --> 00:04:14,177
but he had never composed electronic music before,

60
00:04:14,177 --> 00:04:15,258
never done game audio,

61
00:04:15,258 --> 00:04:17,239
never made sound effects for games before.

62
00:04:17,239 --> 00:04:19,001
And he did all the audio for Thumper.

63
00:04:20,605 --> 00:04:23,666
So for myself, I had about six years

64
00:04:23,666 --> 00:04:26,748
of professional C++ game programming experience.

65
00:04:26,748 --> 00:04:28,529
So I kind of knew what I was doing,

66
00:04:28,529 --> 00:04:30,310
but most of my experience was limited

67
00:04:30,310 --> 00:04:32,931
to things like menus and user interfaces.

68
00:04:32,931 --> 00:04:34,672
Actually, very little gameplay programming,

69
00:04:34,672 --> 00:04:37,153
very little serious graphics programming.

70
00:04:37,153 --> 00:04:40,715
Like a lot of people, I was kind of pigeonholed at my job,

71
00:04:40,715 --> 00:04:42,376
and I did a lot of the same thing.

72
00:04:44,178 --> 00:04:48,002
I also had pretty limited understanding of 3D math or graphics.

73
00:04:48,002 --> 00:04:50,964
I'd never written a line of shader code before starting Thumper.

74
00:04:50,964 --> 00:04:52,666
I didn't really even know what a shader was.

75
00:04:52,666 --> 00:04:55,528
So in that sense, I was kind of starting from scratch.

76
00:04:55,528 --> 00:04:58,291
And also importantly, like, neither Brian

77
00:04:58,291 --> 00:05:01,774
and I had never really designed a game before Thumper.

78
00:05:01,774 --> 00:05:04,696
We'd worked on games and kind of contributed to design discussions,

79
00:05:04,696 --> 00:05:07,679
but we were never actually, like, responsible for designing the whole thing.

80
00:05:09,104 --> 00:05:12,847
So back in 2009, we set a set of initial goals for ourself.

81
00:05:12,847 --> 00:05:15,089
Number one was make an engine.

82
00:05:15,089 --> 00:05:19,333
And I think this was largely just a personal goal of mine.

83
00:05:19,333 --> 00:05:20,894
I'd come to GDC, I'd been to the

84
00:05:20,894 --> 00:05:22,476
Experimental Gameplay Workshop,

85
00:05:22,476 --> 00:05:26,219
I'd seen what designer programmer hybrid types could do,

86
00:05:26,219 --> 00:05:28,181
and I was really impressed by that.

87
00:05:28,181 --> 00:05:29,722
And part of me just felt like I'd never be

88
00:05:29,722 --> 00:05:31,904
a real game developer unless I made my own engine.

89
00:05:33,897 --> 00:05:38,000
I don't think that's true, but this is just how I was thinking about it personally.

90
00:05:38,000 --> 00:05:41,563
The other goal was, you know, let's make our own game.

91
00:05:41,563 --> 00:05:45,567
I think this is what motivates probably just about everybody who's here at the Independent

92
00:05:45,567 --> 00:05:46,407
Games Summit.

93
00:05:46,407 --> 00:05:50,631
I know we felt that, like, working at a sort of a corporate game development company, we

94
00:05:50,631 --> 00:05:54,894
would never really be able to do what we wanted and realize our artistic goals.

95
00:05:56,421 --> 00:05:58,383
And then our goal was, you know, we kept saying like,

96
00:05:58,383 --> 00:06:00,805
oh yeah, we'll release it within a year or two.

97
00:06:00,805 --> 00:06:02,646
You know, we said that for the first few years

98
00:06:02,646 --> 00:06:07,470
of the project, and this was the last generation of consoles

99
00:06:07,470 --> 00:06:10,633
so we actually imagined Thumper as an Xbox 360 game.

100
00:06:10,633 --> 00:06:12,915
And of course, back in 2009, high quality,

101
00:06:12,915 --> 00:06:15,837
like VR was just a fantasy, and we never even dreamed

102
00:06:15,837 --> 00:06:17,158
that Thumper would be a VR game.

103
00:06:18,457 --> 00:06:21,758
So I entitled this talk Seven Years in Alpha

104
00:06:21,758 --> 00:06:24,599
because we started seven years ago

105
00:06:24,599 --> 00:06:27,400
and we set our goals so far beyond our abilities

106
00:06:27,400 --> 00:06:31,822
at the time that we just got kind of lost

107
00:06:31,822 --> 00:06:35,824
along the way many times and it felt like a real adventure.

108
00:06:35,824 --> 00:06:38,605
If we really wanted to hit these goals,

109
00:06:38,605 --> 00:06:40,165
we should have made a 2D game,

110
00:06:40,165 --> 00:06:42,827
something much, much simpler and easier to make than Thumper.

111
00:06:43,523 --> 00:06:46,546
So it was like climbing a personal Mount Everest for us.

112
00:06:46,546 --> 00:06:48,548
You know, it was definitely an adventure.

113
00:06:48,548 --> 00:06:52,132
And before I get into the meat of the talk,

114
00:06:52,132 --> 00:06:54,594
I'll just show you what it actually took to make Thumper,

115
00:06:54,594 --> 00:06:57,677
which was over seven years of development.

116
00:06:57,677 --> 00:06:59,158
We built the custom engine.

117
00:06:59,158 --> 00:07:02,522
This is over a hundred thousand lines of code.

118
00:07:03,375 --> 00:07:06,155
We added support for VR.

119
00:07:06,155 --> 00:07:08,316
We released simultaneously on Steam and PS4.

120
00:07:08,316 --> 00:07:11,177
And we did all that with no external QA.

121
00:07:11,177 --> 00:07:12,857
It was just kind of Brian and us,

122
00:07:12,857 --> 00:07:14,678
and then with some help from friends at the end.

123
00:07:14,678 --> 00:07:20,340
So this talk will mostly be a chronological review

124
00:07:20,340 --> 00:07:22,780
of Thumper, the development.

125
00:07:22,780 --> 00:07:25,081
I'll talk about key moments where I made some breakthroughs

126
00:07:25,081 --> 00:07:27,902
and art design and technology behind the game.

127
00:07:27,902 --> 00:07:30,682
I'll talk about how our understanding of Thumper evolved

128
00:07:30,682 --> 00:07:31,583
as we made the game.

129
00:07:32,251 --> 00:07:34,853
And I'll also talk about how we changed

130
00:07:34,853 --> 00:07:36,814
and how we look at games changed,

131
00:07:36,814 --> 00:07:39,316
because if you work so long on one project,

132
00:07:39,316 --> 00:07:42,819
you're gonna be a different person at the end of it.

133
00:07:42,819 --> 00:07:45,081
Finally, I'll say that this is my story of Thumper.

134
00:07:45,081 --> 00:07:47,302
Brian might tell it a little bit differently.

135
00:07:47,302 --> 00:07:51,025
So the beginning involves concept art,

136
00:07:51,025 --> 00:07:57,710
and Brian actually started thinking about making a game

137
00:07:57,710 --> 00:07:58,931
and coming up with concept art

138
00:07:58,931 --> 00:08:01,553
before we even started working together.

139
00:08:02,195 --> 00:08:05,857
And with his friend Matt Brinkman,

140
00:08:05,857 --> 00:08:07,779
they came up with a lot of concepts

141
00:08:07,779 --> 00:08:09,560
about how the game should look.

142
00:08:09,560 --> 00:08:11,481
And strong art direction was always

143
00:08:11,481 --> 00:08:13,203
a real strength of the project.

144
00:08:13,203 --> 00:08:16,205
And you can see from these early sketches,

145
00:08:16,205 --> 00:08:19,367
the kind of dark mood and vibe was already set.

146
00:08:20,362 --> 00:08:24,264
And these are all pencil sketches that Matt Brinkman made.

147
00:08:24,264 --> 00:08:26,226
And you can see that he was creating this world

148
00:08:26,226 --> 00:08:27,386
out of like these little cubes.

149
00:08:27,386 --> 00:08:30,108
Because the idea was that it would always be a rhythm game,

150
00:08:30,108 --> 00:08:32,210
so it seemed natural to sort of divide the world

151
00:08:32,210 --> 00:08:34,852
into these spatialized chunks where each cube represents

152
00:08:34,852 --> 00:08:38,574
like one beat or one measure or something like that.

153
00:08:39,366 --> 00:08:42,347
And another thing that we determined quite early on

154
00:08:42,347 --> 00:08:45,348
was that the main character should be a beetle.

155
00:08:45,348 --> 00:08:47,288
And this was an idea Matt had.

156
00:08:47,288 --> 00:08:49,349
In a rhythm game, you want something,

157
00:08:49,349 --> 00:08:50,889
we wanted the character to be kind of circular

158
00:08:50,889 --> 00:08:52,910
so it's easy to tell where the center point is.

159
00:08:52,910 --> 00:08:55,671
It needs to be low to the ground so you can see over it.

160
00:08:55,671 --> 00:08:57,631
And we didn't want some generic thing

161
00:08:57,631 --> 00:09:00,372
like a spaceship or a car.

162
00:09:00,372 --> 00:09:02,453
And I think with those constraints,

163
00:09:02,453 --> 00:09:05,294
Matt just immediately said, oh, it should be a beetle.

164
00:09:05,294 --> 00:09:07,074
And that was one of the first decisions

165
00:09:07,074 --> 00:09:08,154
we made in the project.

166
00:09:10,117 --> 00:09:13,317
And in all of these sketches, there's so many ideas.

167
00:09:13,317 --> 00:09:17,599
And he came up with these really psychedelic monster ideas,

168
00:09:17,599 --> 00:09:21,560
these things that we never used, but are really cool.

169
00:09:21,560 --> 00:09:23,500
And what I like looking about these now

170
00:09:23,500 --> 00:09:25,541
is I think you could make a completely different game

171
00:09:25,541 --> 00:09:28,082
with these concepts.

172
00:09:28,082 --> 00:09:29,962
And Thumper turned out quite a bit different,

173
00:09:29,962 --> 00:09:31,923
but it was still really important

174
00:09:31,923 --> 00:09:35,824
in establishing the mood and the overall art direction

175
00:09:35,824 --> 00:09:36,264
of the game.

176
00:09:37,177 --> 00:09:39,498
Another big contribution Matt made was the design

177
00:09:39,498 --> 00:09:41,080
of the main antagonist of the game.

178
00:09:41,080 --> 00:09:44,002
So at the end of every level, there's this giant evil head

179
00:09:44,002 --> 00:09:46,384
and the track that you're moving on

180
00:09:46,384 --> 00:09:47,564
comes out of his mouth.

181
00:09:47,564 --> 00:09:49,546
And that was an idea we had a long time ago.

182
00:09:49,546 --> 00:09:51,527
We call him Crackhead.

183
00:09:51,527 --> 00:09:55,310
And every level he becomes kind of more demented

184
00:09:55,310 --> 00:09:56,591
and more disfigured looking.

185
00:09:56,591 --> 00:09:59,634
And this is just early sketches Matt made.

186
00:09:59,634 --> 00:10:01,875
And the central one actually looks a lot like

187
00:10:01,875 --> 00:10:03,396
how he looks in the actual game.

188
00:10:05,402 --> 00:10:10,965
So I'll move on to some early prototypes that we made.

189
00:10:10,965 --> 00:10:12,827
I joined the project in 2009 and.

190
00:10:15,428 --> 00:10:18,790
Brian hadn't established that much of a game design direction.

191
00:10:18,790 --> 00:10:23,154
He had little images like this, which were, you know,

192
00:10:23,154 --> 00:10:25,355
he kind of imagined Thumper as something where it was

193
00:10:25,355 --> 00:10:28,278
like a single track, instead of a bunch

194
00:10:28,278 --> 00:10:30,199
of different notes coming at you, there would just be one stream

195
00:10:30,199 --> 00:10:32,181
of notes, but you would be on a grid, and you could turn,

196
00:10:32,181 --> 00:10:35,403
and that would be kind of the interesting innovation of the game.

197
00:10:35,403 --> 00:10:38,005
So you can see here, like, there's kind of a layout

198
00:10:38,005 --> 00:10:39,426
where like you're following a path,

199
00:10:39,426 --> 00:10:41,148
and you have to make these right angle turns.

200
00:10:42,187 --> 00:10:44,188
He also made this rendering.

201
00:10:44,188 --> 00:10:45,349
Let's see if I can play it.

202
00:10:45,349 --> 00:10:51,673
It's really short, but I'll play it one more time.

203
00:10:51,673 --> 00:10:57,096
So that already kind of established some of the mechanics

204
00:10:57,096 --> 00:10:58,797
and kind of some of the look of the game.

205
00:10:58,797 --> 00:11:00,539
And that's what I kind of used as my target

206
00:11:00,539 --> 00:11:04,081
when I wanted to start making, actually programming.

207
00:11:05,206 --> 00:11:08,391
So, like I say, I didn't really know how to do 3D graphics,

208
00:11:08,391 --> 00:11:11,316
and the first thing I figured out how to do was draw lines.

209
00:11:11,316 --> 00:11:13,780
So all the early Coder art prototypes

210
00:11:13,780 --> 00:11:15,202
had this kind of vector style.

211
00:11:15,202 --> 00:11:18,468
And even though this is Coder art, I think.

212
00:11:19,294 --> 00:11:21,495
I looked back and I dug up these old prototypes

213
00:11:21,495 --> 00:11:22,976
and I also looked back at the emails

214
00:11:22,976 --> 00:11:24,417
we were sending each other at this time

215
00:11:24,417 --> 00:11:26,158
just to see what we thought about these.

216
00:11:26,158 --> 00:11:28,600
Because I look at them now and they look quite bad.

217
00:11:28,600 --> 00:11:31,302
But what was cool is that we were really enthusiastic.

218
00:11:31,302 --> 00:11:34,784
And so I sent this first prototype to Brian

219
00:11:34,784 --> 00:11:36,666
and his reaction was, perfect, great job.

220
00:11:36,666 --> 00:11:41,829
And a month later I figured out how to actually draw quads.

221
00:11:41,829 --> 00:11:47,273
And to Brian that was like 10 Christmases in a row.

222
00:11:48,882 --> 00:11:50,583
And then I figured out how to do texturing,

223
00:11:50,583 --> 00:11:53,565
and these don't even have filtering or mipmaps,

224
00:11:53,565 --> 00:11:56,827
but Brian was just excited about the fact

225
00:11:56,827 --> 00:11:58,368
that there's textures.

226
00:11:58,368 --> 00:12:01,570
And then I figured out how to do a skybox and load a model,

227
00:12:01,570 --> 00:12:02,811
and Brian stayed enthusiastic.

228
00:12:02,811 --> 00:12:07,174
So, and I think what's really important about that

229
00:12:07,174 --> 00:12:09,236
is if you actually want to make your own engine,

230
00:12:09,236 --> 00:12:11,237
you're gonna, most of the steps

231
00:12:11,237 --> 00:12:12,318
will not even be that fun, right?

232
00:12:12,318 --> 00:12:15,080
You'll do a lot of stuff where there's no visual outward.

233
00:12:15,852 --> 00:12:18,973
outwardly visible result of the work you're doing.

234
00:12:18,973 --> 00:12:21,953
So you better find some way to stay motivated

235
00:12:21,953 --> 00:12:24,214
and stay enthusiastic during the whole process.

236
00:12:24,214 --> 00:12:30,035
So we didn't have much tech experience,

237
00:12:30,035 --> 00:12:31,976
programming experience, and we also didn't have

238
00:12:31,976 --> 00:12:36,136
much experience as game designers.

239
00:12:36,136 --> 00:12:38,137
So we started to ask ourselves some questions,

240
00:12:38,137 --> 00:12:40,357
especially as we got years into this project,

241
00:12:40,357 --> 00:12:42,898
which was, is what we're doing actually interesting?

242
00:12:43,713 --> 00:12:45,754
And will it be interesting for hours, right?

243
00:12:45,754 --> 00:12:48,275
And this is kind of the questions I think everyone asks themselves

244
00:12:48,275 --> 00:12:49,955
when they're embarking on a big project.

245
00:12:49,955 --> 00:12:54,877
And we didn't really know, but we just started experimenting.

246
00:12:54,877 --> 00:13:02,640
So I have a few clips of some early prototypes.

247
00:13:02,640 --> 00:13:08,702
Just bear with me.

248
00:13:08,702 --> 00:13:08,942
Okay.

249
00:13:29,679 --> 00:13:33,682
So you can see that it was the beat matching mechanic,

250
00:13:33,682 --> 00:13:37,205
moving on a grid, and you can see like I was doing

251
00:13:37,205 --> 00:13:39,687
these weird like double like 90 degree turns

252
00:13:39,687 --> 00:13:41,909
just to like kind of show that you could move on a grid,

253
00:13:41,909 --> 00:13:43,971
but we didn't really understand like what was cool

254
00:13:43,971 --> 00:13:45,952
about moving on a grid or why it was important,

255
00:13:45,952 --> 00:13:48,054
but we still thought that that was gonna be

256
00:13:48,054 --> 00:13:51,056
what kind of differentiated Thumper from other rhythm games.

257
00:13:51,056 --> 00:13:56,000
So we actually took it in some really weird directions.

258
00:13:56,000 --> 00:13:56,861
Here's another movie.

259
00:13:59,782 --> 00:14:04,446
So here you have a health.

260
00:14:04,446 --> 00:14:10,010
And you have to hit these beats to keep your health

261
00:14:10,010 --> 00:14:13,653
from falling to zero.

262
00:14:13,653 --> 00:14:25,323
You have to do these really awkward and difficult loops

263
00:14:25,323 --> 00:14:26,484
really fast.

264
00:14:26,484 --> 00:14:28,445
Yeah, as you can see, it was really easy to mess up.

265
00:14:28,445 --> 00:14:29,146
And it wasn't really clear how.

266
00:14:29,745 --> 00:14:37,772
It wasn't really clear what was going to be interesting about a grid-based rhythm game,

267
00:14:37,772 --> 00:14:43,517
but we stuck with it for a long time and then finally we decided, well, it feels the most

268
00:14:43,517 --> 00:14:45,719
fun just to go really fast.

269
00:14:45,719 --> 00:14:49,583
And then we just started to abandon this whole idea of a grid.

270
00:14:49,583 --> 00:14:52,005
And here's a later prototype.

271
00:15:24,521 --> 00:15:29,822
So that one had kind of the fun rhythm game thing

272
00:15:29,822 --> 00:15:31,523
where it's really dense and you're getting really

273
00:15:31,523 --> 00:15:34,424
in the zone, you can lock in.

274
00:15:34,424 --> 00:15:36,344
But it didn't really have the feeling we wanted.

275
00:15:36,344 --> 00:15:38,845
It started to just feel like every other rhythm game

276
00:15:38,845 --> 00:15:41,126
where it just kind of looks like a UI coming at you,

277
00:15:41,126 --> 00:15:42,626
not like you're going through a world, right?

278
00:15:42,626 --> 00:15:44,566
It was so dense, the notes are so dense.

279
00:15:44,566 --> 00:15:46,907
The turns didn't have any weight or impact to them.

280
00:15:46,907 --> 00:15:53,509
And then we made another prototype here.

281
00:15:55,582 --> 00:16:00,246
It's kind of the same thing, but now we're actually like bending the track and deforming it as you're moving on it.

282
00:16:00,246 --> 00:16:03,649
So you'll see some of the turns kind of like appear and then go away.

283
00:16:26,500 --> 00:16:31,821
So in that one, we tried to make it more interesting

284
00:16:31,821 --> 00:16:36,062
by bending the track and making you react to that

285
00:16:36,062 --> 00:16:39,903
as you're playing just simple beat matching gameplay.

286
00:16:39,903 --> 00:16:42,883
That also turned out to be a dead end and we abandoned it.

287
00:16:42,883 --> 00:16:46,524
And we didn't really figure out where we were going

288
00:16:46,524 --> 00:16:50,625
until a lot of basic polish work happened.

289
00:16:50,625 --> 00:16:54,666
And at this point in the project,

290
00:16:54,666 --> 00:16:56,367
we knew that the game wasn't that great.

291
00:16:57,027 --> 00:16:59,109
And we were showing it to a lot of different designers

292
00:16:59,109 --> 00:17:01,151
and friends we had that we really respected

293
00:17:01,151 --> 00:17:03,353
who had made great games.

294
00:17:03,353 --> 00:17:05,776
And a lot of their advice really didn't match up

295
00:17:05,776 --> 00:17:07,037
with what we were trying to do.

296
00:17:07,037 --> 00:17:09,420
Like we had already gone down this path for years

297
00:17:09,420 --> 00:17:12,323
and when Brian and I would talk about the game we were making

298
00:17:12,323 --> 00:17:13,644
we both kind of convinced ourselves

299
00:17:13,644 --> 00:17:14,806
that we knew what we were doing.

300
00:17:15,006 --> 00:17:20,489
The game itself didn't communicate these ideas to anyone else.

301
00:17:20,489 --> 00:17:24,231
And we had a better understanding of where we wanted to go, but no clear path to get there.

302
00:17:24,231 --> 00:17:27,053
And this is kind of this experience of being in the wilderness.

303
00:17:27,053 --> 00:17:32,956
That's why I feel like we were in this state for a really long time during the project.

304
00:17:32,956 --> 00:17:35,638
It's a state that can breed a lot of anxiety.

305
00:17:36,511 --> 00:17:39,657
And you can feel overwhelmed, but it can also be very exhilarating.

306
00:17:39,657 --> 00:17:45,327
As long as you can kind of keep moving forward without needing external validation and trust

307
00:17:45,327 --> 00:17:48,031
yourself then it can be a really cool place to be.

308
00:17:49,430 --> 00:17:56,653
So around this point in the project in 2011, I moved to Korea, and I think that was, you know,

309
00:17:56,653 --> 00:18:00,614
kind of a challenging time because we'd already spent a couple years on this thing. It wasn't very

310
00:18:00,614 --> 00:18:06,456
fun yet. And we, you know, now that there would be a 14-hour time difference between us, there was,

311
00:18:06,456 --> 00:18:08,577
you know, a real risk of kind of losing momentum.

312
00:18:09,798 --> 00:18:11,240
So to switch gears for a second

313
00:18:11,240 --> 00:18:12,803
and talk about something a little more technical,

314
00:18:12,803 --> 00:18:15,227
like the way we tried to address this

315
00:18:15,227 --> 00:18:19,474
was by adding a little feature to our editor in our engine.

316
00:18:19,474 --> 00:18:21,538
So this is a screenshot of the Thumper editor.

317
00:18:22,199 --> 00:18:26,601
There's a bunch of like little editor windows for different types of objects

318
00:18:26,601 --> 00:18:30,202
and the one in the upper left is like a browser of all the objects.

319
00:18:30,202 --> 00:18:33,403
And this is like the first level in the game and there's like hundreds

320
00:18:33,403 --> 00:18:35,364
or thousands of objects in this file.

321
00:18:35,364 --> 00:18:37,785
So if I'm working on something and Brian's asleep and I'm like, oh,

322
00:18:37,785 --> 00:18:41,186
you didn't set the settings on this material correctly.

323
00:18:41,774 --> 00:18:45,136
It would be kind of annoying to have to tell him the name of the material

324
00:18:45,136 --> 00:18:47,016
and then he'd have to open this file and find it

325
00:18:47,016 --> 00:18:48,637
and see what I was talking about.

326
00:18:48,637 --> 00:18:52,839
So we added a system where any object in the editor,

327
00:18:52,839 --> 00:18:56,681
you can kind of highlight it or click it, select it, and copy a URL,

328
00:18:56,681 --> 00:19:00,322
which represents a unique address of that object.

329
00:19:01,163 --> 00:19:03,844
And here, you can see what the URL looks like.

330
00:19:03,844 --> 00:19:06,685
The first part, the DRL, is like a custom protocol

331
00:19:06,685 --> 00:19:08,486
that you can register with Windows.

332
00:19:08,486 --> 00:19:10,987
The second part is the path to that file,

333
00:19:10,987 --> 00:19:13,608
and then the last part is the actual name of the object.

334
00:19:13,608 --> 00:19:17,789
And how to implement this is detailed on my development blog

335
00:19:17,789 --> 00:19:19,010
with the link down there,

336
00:19:19,010 --> 00:19:21,330
or you can just ask me for it after the talk.

337
00:19:21,330 --> 00:19:23,491
But this ended up being super useful,

338
00:19:23,491 --> 00:19:24,371
and it was like one of the.

339
00:19:25,301 --> 00:19:28,323
times when having a custom engine that we could really

340
00:19:28,323 --> 00:19:30,204
optimize to our own workflow paid off.

341
00:19:30,204 --> 00:19:33,947
And we extended it a lot too, where late in the game,

342
00:19:33,947 --> 00:19:36,749
we made it so that you could actually copy URLs

343
00:19:36,749 --> 00:19:38,550
at a specific point in a level.

344
00:19:38,550 --> 00:19:41,172
And that made it very easy to say, oh, there's a bug

345
00:19:41,172 --> 00:19:44,835
in level 2-5 on beat 16, and I could just email Brian a link

346
00:19:44,835 --> 00:19:46,195
and open up the game.

347
00:19:46,195 --> 00:19:48,757
He just clicks it in the email, it opens up the editor,

348
00:19:48,757 --> 00:19:50,258
and then he's right there looking at it.

349
00:19:52,425 --> 00:19:54,826
So to get back to the design problems

350
00:19:54,826 --> 00:19:55,887
that we were working on,

351
00:19:55,887 --> 00:19:58,728
we didn't really figure out what the game was

352
00:19:58,728 --> 00:20:01,329
until we kind of figured out how the turns work.

353
00:20:01,329 --> 00:20:04,790
So this is a screenshot of one of the last

354
00:20:04,790 --> 00:20:08,392
kind of grid-based prototypes we made,

355
00:20:08,392 --> 00:20:11,773
where we found that when you're going super fast,

356
00:20:11,773 --> 00:20:14,174
it just seems physically awkward and weird

357
00:20:14,174 --> 00:20:16,295
to hit a 90 degree turn.

358
00:20:16,295 --> 00:20:19,356
So we kind of made the turns less than 90 degrees.

359
00:20:20,067 --> 00:20:23,528
And then here we made it a little more polished,

360
00:20:23,528 --> 00:20:24,788
but it just looks weird, right?

361
00:20:24,788 --> 00:20:26,149
There's this weird discontinuity

362
00:20:26,149 --> 00:20:27,829
between the rectangular sections.

363
00:20:27,829 --> 00:20:29,350
So we were still thinking of everything

364
00:20:29,350 --> 00:20:34,411
as these discrete kind of blocks of rhythmic time.

365
00:20:34,411 --> 00:20:37,052
And for a long time, Brian kept complaining

366
00:20:37,052 --> 00:20:38,133
about how this looked,

367
00:20:38,133 --> 00:20:41,534
and he didn't like the way these looked.

368
00:20:41,534 --> 00:20:43,054
And as the programmer, I was kind of like,

369
00:20:43,054 --> 00:20:44,175
oh, you're just being an artist,

370
00:20:44,175 --> 00:20:45,475
you're just worried about polish.

371
00:20:45,475 --> 00:20:47,956
Like, let's figure out the real meat of the game.

372
00:20:47,956 --> 00:20:49,297
Let's figure out the design problem.

373
00:20:50,084 --> 00:20:52,146
And I don't really think that way

374
00:20:52,146 --> 00:20:53,647
about game development anymore.

375
00:20:53,647 --> 00:20:57,050
And this is what it looks like in the finished game,

376
00:20:57,050 --> 00:21:01,413
where the turn is this smooth surface.

377
00:21:01,413 --> 00:21:03,375
And I'll explain how we got there, it's really important.

378
00:21:03,375 --> 00:21:05,616
And also I'll go step by step.

379
00:21:05,616 --> 00:21:07,718
And I remember this very well,

380
00:21:07,718 --> 00:21:09,459
because I did most of this work

381
00:21:09,459 --> 00:21:10,961
when I was on a workcation in Hanoi.

382
00:21:10,961 --> 00:21:13,703
If you're a programmer and you ever travel,

383
00:21:13,703 --> 00:21:16,505
I recommend you bring an external keyboard and mouse

384
00:21:16,505 --> 00:21:18,987
and elevate your laptop to an ergonomic position.

385
00:21:19,471 --> 00:21:22,072
It's very important.

386
00:21:22,072 --> 00:21:24,454
So here if you look at this track,

387
00:21:24,454 --> 00:21:26,315
so if you think of this as the path

388
00:21:26,315 --> 00:21:27,655
that the beetle moves down,

389
00:21:27,655 --> 00:21:31,297
every little square is one beat.

390
00:21:31,297 --> 00:21:33,198
And then basically I figured out

391
00:21:33,198 --> 00:21:35,400
how we could deform the meshes

392
00:21:35,400 --> 00:21:37,321
so that they seamlessly matched up.

393
00:21:37,321 --> 00:21:39,702
It seems pretty simple when I do this,

394
00:21:39,702 --> 00:21:41,643
but for me it was a couple weeks of work

395
00:21:41,643 --> 00:21:42,583
figuring out how to do that.

396
00:21:43,602 --> 00:21:46,064
In a vertex shader, I calculate a rotation matrix

397
00:21:46,064 --> 00:21:49,105
for every single vertex and rotate it around one axis.

398
00:21:49,105 --> 00:21:52,207
And then I make sure that it's seamless

399
00:21:52,207 --> 00:21:55,449
and it matches the next mesh perfectly.

400
00:21:55,449 --> 00:21:59,031
We also added this ability to make it

401
00:21:59,031 --> 00:22:01,412
so we could dynamically scale the meshes

402
00:22:01,412 --> 00:22:02,293
before deforming them.

403
00:22:02,293 --> 00:22:03,433
So here you can see I've...

404
00:22:05,159 --> 00:22:08,802
made the path thinner, and then I can also extend the path.

405
00:22:08,802 --> 00:22:11,864
So if each block is still the same amount of musical time,

406
00:22:11,864 --> 00:22:14,146
we can scale the paths and make the beetle go faster

407
00:22:14,146 --> 00:22:15,127
and slower really easily.

408
00:22:15,127 --> 00:22:17,909
And everything's still seamless.

409
00:22:17,909 --> 00:22:20,711
We also made it so that you could pitch the path up,

410
00:22:20,711 --> 00:22:21,992
and you could also add a twist.

411
00:22:21,992 --> 00:22:24,794
So it's all three axes of rotation that you can apply.

412
00:22:25,807 --> 00:22:27,967
Another really important thing is figuring out how to

413
00:22:27,967 --> 00:22:30,689
properly deform the normal vectors on these meshes

414
00:22:30,689 --> 00:22:32,409
so that the lighting looks good.

415
00:22:32,409 --> 00:22:34,550
So you can see that the lighting's all smooth.

416
00:22:34,550 --> 00:22:37,011
There's no weird discontinuities.

417
00:22:37,011 --> 00:22:39,792
This is extra important because a big part

418
00:22:39,792 --> 00:22:41,913
of Thumper's visual look are reflection maps.

419
00:22:41,913 --> 00:22:43,374
And these are just simple cube maps

420
00:22:43,374 --> 00:22:46,555
calculated from the eye position and a normal vector.

421
00:22:46,555 --> 00:22:50,357
But with the normal vector properly deformed,

422
00:22:50,357 --> 00:22:51,717
then the reflections look really nice.

423
00:22:52,833 --> 00:22:54,094
And in order for this to work,

424
00:22:54,094 --> 00:22:57,795
we had to really highly tessellate the meshes

425
00:22:57,795 --> 00:22:58,956
so that they look pretty smoothly.

426
00:22:58,956 --> 00:23:01,017
So like Thumper spends a lot of time every frame

427
00:23:01,017 --> 00:23:03,699
just deforming vertices in a pixel shader

428
00:23:03,699 --> 00:23:06,280
in a way that's probably not, I mean in a vertex shader,

429
00:23:06,280 --> 00:23:08,561
in a way that's probably not very efficient,

430
00:23:08,561 --> 00:23:11,663
but a lot of, I think games end up spending a lot of time

431
00:23:11,663 --> 00:23:14,124
doing other things like they have real lighting

432
00:23:14,124 --> 00:23:15,505
or more complicated rendering

433
00:23:15,505 --> 00:23:17,146
or they just draw a lot of stuff.

434
00:23:17,146 --> 00:23:18,386
Thumper doesn't draw a lot of stuff

435
00:23:18,386 --> 00:23:20,948
and we just spend the time on this.

436
00:23:23,778 --> 00:23:26,961
So, you know, once this kind of came together,

437
00:23:26,961 --> 00:23:29,704
and here's the final image again, you can see that it's

438
00:23:29,704 --> 00:23:32,447
like a seamless, smooth curve.

439
00:23:32,447 --> 00:23:34,410
There's a reflection map on it that has kind

440
00:23:34,410 --> 00:23:35,271
of a really nice iconic look.

441
00:23:35,271 --> 00:23:39,996
And it seems like something that you could like hit really fast

442
00:23:39,996 --> 00:23:41,497
and then kind of continue going.

443
00:23:41,497 --> 00:23:44,140
And, you know, beat matching was kind of.

444
00:23:44,441 --> 00:23:46,882
the first kind of core mechanic we settled on,

445
00:23:46,882 --> 00:23:49,784
but I think turns and the feeling of the turns in Thumper

446
00:23:49,784 --> 00:23:51,305
what really make it feel good

447
00:23:51,305 --> 00:23:53,647
and what make the game actually fun to play.

448
00:23:53,647 --> 00:23:55,348
And I think like most action games,

449
00:23:55,348 --> 00:23:59,090
there's always kind of one fundamental interaction

450
00:23:59,090 --> 00:24:01,091
that you play the game hours and hours for.

451
00:24:01,091 --> 00:24:03,393
Like in a hockey game, it might be like checking the dude

452
00:24:03,393 --> 00:24:06,455
or I don't know, shooting someone in the head,

453
00:24:06,455 --> 00:24:06,995
stuff like that.

454
00:24:06,995 --> 00:24:11,758
And you can also see that the track is sloped up.

455
00:24:12,977 --> 00:24:16,299
And this was another advantage of this kind of dynamic system where

456
00:24:16,299 --> 00:24:21,542
Basically the whole time you're playing thumper you're moving up until where you're actually doing like a giant circle through space

457
00:24:21,542 --> 00:24:27,426
But that helps you see all the obstacles a lot clearer, and it's not something that most people notice, but it's actually really important

458
00:24:29,988 --> 00:24:33,350
So we use the same technology in so many ways.

459
00:24:33,350 --> 00:24:36,272
And it's a real credit to Brian's kind of artistic vision

460
00:24:36,272 --> 00:24:38,393
that something that was designed just to fix

461
00:24:38,393 --> 00:24:40,535
this one little visual discontinuity

462
00:24:40,535 --> 00:24:43,056
became like the fundamental visual tool

463
00:24:43,056 --> 00:24:45,438
that he used to make the whole game.

464
00:24:45,438 --> 00:24:48,619
So this is what the checkpoint looks like.

465
00:24:48,619 --> 00:24:52,862
And I just want to show an animated version of this.

466
00:24:52,862 --> 00:24:53,442
Right, so you can see.

467
00:25:00,297 --> 00:25:02,458
These are the checkpoints you go through in the game,

468
00:25:02,458 --> 00:25:04,378
and it's using the same vertex shader,

469
00:25:04,378 --> 00:25:07,319
except we're applying a scale over the length of it,

470
00:25:07,319 --> 00:25:09,999
so it gets down to a little fine point at the bottom.

471
00:25:09,999 --> 00:25:13,980
And then Brian also realized that,

472
00:25:13,980 --> 00:25:17,441
rather than just deforming these simple little squares,

473
00:25:17,441 --> 00:25:19,041
we could make more interesting meshes.

474
00:25:19,041 --> 00:25:22,762
So this is a segment of something we called the zillipede.

475
00:25:22,762 --> 00:25:26,723
And this thing was something we spent

476
00:25:26,723 --> 00:25:27,943
like way too much time on.

477
00:25:29,507 --> 00:25:30,807
for its actual impact on the game,

478
00:25:30,807 --> 00:25:33,828
but basically here we're now like, you know,

479
00:25:33,828 --> 00:25:36,370
modulating colors and scale and width

480
00:25:36,370 --> 00:25:40,231
of a whole sequence of instance meshes.

481
00:25:40,231 --> 00:25:44,953
And it creates this kind of like evil looking worm,

482
00:25:44,953 --> 00:25:49,335
and it's all, and the path that the worm is following

483
00:25:49,335 --> 00:25:50,496
is actually another sequence,

484
00:25:50,496 --> 00:25:54,437
and he's just kind of being phased along it to animate him.

485
00:25:54,437 --> 00:25:57,038
And you can see here in this video that.

486
00:25:58,832 --> 00:26:02,935
It's actually just like an animation in the editor. You can like scrub the whole thing back and forth and

487
00:26:02,935 --> 00:26:09,521
Like yeah, we probably spent like a couple weeks. Just making that possible

488
00:26:09,521 --> 00:26:13,524
and then

489
00:26:13,524 --> 00:26:15,205
Ultimately it showed up

490
00:26:15,205 --> 00:26:19,969
In the game it just kind of as a background element in one of the boss battles

491
00:26:19,969 --> 00:26:20,409
but

492
00:26:22,482 --> 00:26:24,783
You know, we also did a bunch of other experiments

493
00:26:24,783 --> 00:26:25,863
with this vertex shader.

494
00:26:25,863 --> 00:26:27,484
We created a lot of different creatures

495
00:26:27,484 --> 00:26:29,425
and I really wish we would have found a way

496
00:26:29,425 --> 00:26:30,525
to put this guy in the game, but he got cut.

497
00:26:30,525 --> 00:26:34,827
And so here, like, these are just some screenshots

498
00:26:34,827 --> 00:26:37,148
from the game where the decorative tentacles

499
00:26:37,148 --> 00:26:40,230
you see on the side are that same vertex shader

500
00:26:40,230 --> 00:26:41,410
being animated.

501
00:26:41,410 --> 00:26:44,992
This boss and the obstacles you have to jump over,

502
00:26:44,992 --> 00:26:45,692
the same stuff.

503
00:26:46,906 --> 00:26:49,247
It was also really important for making the tunnels

504
00:26:49,247 --> 00:26:51,228
that you go through, because the tunnels are all seamless

505
00:26:51,228 --> 00:26:52,749
and they're reflective, and it's the same thing,

506
00:26:52,749 --> 00:26:54,430
where now the mesh that we're deforming

507
00:26:54,430 --> 00:26:57,131
is just like a cylinder that you're going in the middle of,

508
00:26:57,131 --> 00:26:58,872
and we just sequence it.

509
00:26:58,872 --> 00:27:02,014
And then Brian just did all kinds of stuff with it,

510
00:27:02,014 --> 00:27:04,075
like this, here's a boss character,

511
00:27:04,075 --> 00:27:05,476
this kind of spiral graph starfish,

512
00:27:05,476 --> 00:27:08,997
where it's the same thing, but now he's kind of using it

513
00:27:08,997 --> 00:27:13,300
as a weird particle system with this radial symmetry.

514
00:27:15,347 --> 00:27:17,871
So Thumper is a music game.

515
00:27:17,871 --> 00:27:19,653
I should say something about the audio,

516
00:27:19,653 --> 00:27:22,638
although I think it's unique in that it was a music game

517
00:27:22,638 --> 00:27:25,583
that found itself through visual experimentation.

518
00:27:26,262 --> 00:27:31,444
And Brian did all of the audio himself,

519
00:27:31,444 --> 00:27:33,405
and he changed what the game sounded like

520
00:27:33,405 --> 00:27:34,245
so many different times.

521
00:27:34,245 --> 00:27:36,766
There were a lot of different musical influences,

522
00:27:36,766 --> 00:27:38,607
and the way we approached it was always

523
00:27:38,607 --> 00:27:40,868
by making the gameplay first and the visuals

524
00:27:40,868 --> 00:27:42,989
and kind of just adapting the audio to fit that,

525
00:27:42,989 --> 00:27:44,690
kind of the reverse of how I think

526
00:27:44,690 --> 00:27:46,110
a lot of other music games are made.

527
00:27:48,058 --> 00:27:50,160
I also want to mention that I used FMOD

528
00:27:50,160 --> 00:27:52,063
as the only middleware in the whole engine

529
00:27:52,063 --> 00:27:53,164
and it was great.

530
00:27:53,164 --> 00:27:55,086
It's very indie-friendly pricing

531
00:27:55,086 --> 00:27:56,328
and they have awesome support,

532
00:27:56,328 --> 00:27:59,371
so I just want to say that I recommend FMOD.

533
00:27:59,371 --> 00:28:01,294
And this is,

534
00:28:01,294 --> 00:28:06,200
this is, let's see if I can get this pointer up here.

535
00:28:08,213 --> 00:28:11,574
So this is how we actually author gameplay.

536
00:28:11,574 --> 00:28:13,715
And it looks a lot like a step sequencer,

537
00:28:13,715 --> 00:28:16,455
where up top here, he's placing things

538
00:28:16,455 --> 00:28:21,737
like the beats you have to hit, the turns in the track.

539
00:28:21,737 --> 00:28:24,518
He's making an upward slope along the whole thing.

540
00:28:24,518 --> 00:28:26,378
And then down here, he's triggering little samples

541
00:28:26,378 --> 00:28:28,419
that go along with the audio.

542
00:28:28,419 --> 00:28:30,460
And I think that this tool is really fundamental.

543
00:28:30,460 --> 00:28:31,860
We call it the sequence editor.

544
00:28:31,860 --> 00:28:35,741
And it was really fundamental in how we made the game.

545
00:28:36,840 --> 00:28:39,162
You know, when I first started working on

546
00:28:39,162 --> 00:28:41,963
building the engine and tools, I kind of was,

547
00:28:41,963 --> 00:28:44,225
you know, the only thing I knew was the engine

548
00:28:44,225 --> 00:28:45,746
I used at my old job, or Unity,

549
00:28:45,746 --> 00:28:48,508
and I was kind of trying to recreate those tools

550
00:28:48,508 --> 00:28:50,769
and make really general purpose stuff.

551
00:28:50,769 --> 00:28:53,631
And I found that it was always got the best results

552
00:28:53,631 --> 00:28:55,812
when I made something really specific for our game,

553
00:28:55,812 --> 00:28:57,853
something that really, like a tool that could do

554
00:28:57,853 --> 00:28:58,994
one thing really, really well.

555
00:28:58,994 --> 00:29:01,996
And that was a lesson I learned along the way.

556
00:29:04,015 --> 00:29:10,539
So in 2004, I've been working on the game for a long time.

557
00:29:10,539 --> 00:29:12,821
And I think because we had the turns working

558
00:29:12,821 --> 00:29:14,482
and the game felt really well,

559
00:29:14,482 --> 00:29:16,923
we felt confident enough now to submit it

560
00:29:16,923 --> 00:29:19,144
to things like the IGF.

561
00:29:19,144 --> 00:29:23,467
And it got a nomination for excellence in audio.

562
00:29:23,467 --> 00:29:25,168
And I went back and listened to that build

563
00:29:25,168 --> 00:29:27,129
that we submitted and it sounds terrible,

564
00:29:27,129 --> 00:29:29,991
like really bad, like the mastering is off,

565
00:29:29,991 --> 00:29:31,071
there's a lot of distortion.

566
00:29:31,572 --> 00:29:34,534
And I really think that it was the visual elements

567
00:29:34,534 --> 00:29:37,195
and the funness of the game that convinced people

568
00:29:37,195 --> 00:29:38,236
to nominate it for audio.

569
00:29:38,236 --> 00:29:39,757
Just the fact that it's a music game

570
00:29:39,757 --> 00:29:41,598
kind of makes you eligible for that category.

571
00:29:41,598 --> 00:29:43,839
So I think that's why we got that.

572
00:29:43,839 --> 00:29:46,541
And that was really cool.

573
00:29:46,541 --> 00:29:49,523
This was us two years ago in the IGF.

574
00:29:49,523 --> 00:29:52,144
And I think the best thing we got out of that

575
00:29:52,144 --> 00:29:53,765
was just meeting other game developers

576
00:29:53,765 --> 00:29:54,826
who were interested in our game.

577
00:29:54,826 --> 00:29:56,447
And that was super motivating

578
00:29:56,447 --> 00:29:58,688
to continue and finish the game.

579
00:30:00,284 --> 00:30:05,229
So I'm going to go and talk about one more really important visual element of the game,

580
00:30:05,229 --> 00:30:09,373
which are the post-processing effects we use.

581
00:30:09,373 --> 00:30:11,735
And again, this was something that I just considered polished,

582
00:30:11,735 --> 00:30:15,479
and Brian kept bothering me about wanting to use post-processing effects,

583
00:30:15,479 --> 00:30:16,780
and our engine didn't support it,

584
00:30:16,780 --> 00:30:20,083
and I thought it was something we didn't have to worry about right away.

585
00:30:21,360 --> 00:30:24,480
But to say something really obvious,

586
00:30:24,480 --> 00:30:26,681
like everything in your game needs to be interesting,

587
00:30:26,681 --> 00:30:28,001
or your game needs to be interesting,

588
00:30:28,001 --> 00:30:30,862
and how you achieve that doesn't really matter.

589
00:30:30,862 --> 00:30:33,142
I think certain games like Tetris would be interesting

590
00:30:33,142 --> 00:30:35,583
if you, you know, with no visual polish,

591
00:30:35,583 --> 00:30:38,884
but Thumber's a game that is all about visual polish.

592
00:30:38,884 --> 00:30:45,005
And yeah, all that matters is the final result.

593
00:30:45,005 --> 00:30:45,385
And so.

594
00:30:46,787 --> 00:30:48,588
Another thing Brian said was that, you know,

595
00:30:48,588 --> 00:30:50,269
like when you think about visual effects,

596
00:30:50,269 --> 00:30:52,170
post-processing effects are something that affect

597
00:30:52,170 --> 00:30:53,631
every single pixel on the screen.

598
00:30:53,631 --> 00:30:54,552
So in that sense, they might be

599
00:30:54,552 --> 00:30:56,093
the most important effect you have.

600
00:30:56,093 --> 00:30:59,815
So here's an image of Thumper fully post-processed.

601
00:30:59,815 --> 00:31:01,696
This is from the final game.

602
00:31:01,696 --> 00:31:04,778
And this is it without any of the post-processing effects.

603
00:31:04,778 --> 00:31:06,098
I mean, maybe it looks kind of cool,

604
00:31:06,098 --> 00:31:07,479
but for me it lacks like, you know,

605
00:31:07,479 --> 00:31:10,401
all the dynamic elements, all the mood,

606
00:31:10,401 --> 00:31:12,282
all the tone that this image has.

607
00:31:12,282 --> 00:31:14,243
So I just wanna go step by step and show what we did.

608
00:31:14,243 --> 00:31:15,884
And all of these are really.

609
00:31:16,251 --> 00:31:20,179
easy to implement, they just took a long time to kind of tune.

610
00:31:20,179 --> 00:31:23,246
So first we apply a bloom, a very standard effect,

611
00:31:23,246 --> 00:31:24,809
and then we desaturate the scene,

612
00:31:24,809 --> 00:31:27,335
leaving the bloom fully saturated.

613
00:31:27,815 --> 00:31:30,436
Then we apply a cubic distortion filter over the whole scene,

614
00:31:30,436 --> 00:31:32,757
which really distorts quite a bit.

615
00:31:32,757 --> 00:31:34,719
And it's really important for selling the sense of speed

616
00:31:34,719 --> 00:31:35,239
in the game.

617
00:31:35,239 --> 00:31:37,080
And you can see that it really distorts the player

618
00:31:37,080 --> 00:31:38,020
character a lot.

619
00:31:38,020 --> 00:31:39,741
He gets way longer.

620
00:31:39,741 --> 00:31:41,623
And nobody really knows that he's

621
00:31:41,623 --> 00:31:43,183
being distorted because he never really moves

622
00:31:43,183 --> 00:31:44,264
from that position on the screen.

623
00:31:44,264 --> 00:31:46,545
And we kind of like the way he looks longer like that,

624
00:31:46,545 --> 00:31:47,666
so it didn't bother us.

625
00:31:47,666 --> 00:31:51,488
And then we apply a levels over the whole scene.

626
00:31:51,488 --> 00:31:53,169
And this is just basically modeled

627
00:31:53,169 --> 00:31:57,071
on the Photoshop RGB output, black-white output value

628
00:31:57,071 --> 00:31:57,432
filter.

629
00:31:59,065 --> 00:32:00,727
This was something that Brian just wanted,

630
00:32:00,727 --> 00:32:03,169
and this is the one that changes the most

631
00:32:03,169 --> 00:32:05,532
when you play the game, and it really helps

632
00:32:05,532 --> 00:32:06,773
make different parts of the game

633
00:32:06,773 --> 00:32:07,654
have a different mood or feel.

634
00:32:07,654 --> 00:32:10,597
And we apply a radial blur over the whole screen.

635
00:32:10,597 --> 00:32:13,000
This also helps with the sense of speed.

636
00:32:13,867 --> 00:32:17,409
And then we apply a vignette, which is a generic effect,

637
00:32:17,409 --> 00:32:20,230
but this kind of makes the,

638
00:32:20,230 --> 00:32:21,991
keeps the stuff in the periphery,

639
00:32:21,991 --> 00:32:23,412
it makes it less distracting,

640
00:32:23,412 --> 00:32:25,694
and it also brightens the center of it.

641
00:32:25,694 --> 00:32:27,675
We use the overlay blend mode to bright the center

642
00:32:27,675 --> 00:32:29,196
of the, center point of the screen.

643
00:32:29,196 --> 00:32:31,117
Like, there's no real lighting in Thumper,

644
00:32:31,117 --> 00:32:34,339
so this kind of is like a fake HDR or something.

645
00:32:36,039 --> 00:32:39,240
And then last but not least, we apply another vignette,

646
00:32:39,240 --> 00:32:40,880
which we call the noise vignette.

647
00:32:40,880 --> 00:32:44,721
And this, you can see it here, it only affects the skybox.

648
00:32:44,721 --> 00:32:46,341
And it brightens the skybox,

649
00:32:46,341 --> 00:32:47,761
darkens the edges of the skybox.

650
00:32:47,761 --> 00:32:50,862
And then it applies this high frequency noise.

651
00:32:50,862 --> 00:32:52,842
And you have to kind of see it animated

652
00:32:52,842 --> 00:32:53,742
and look really closely,

653
00:32:53,742 --> 00:32:56,203
but there's a noise texture being played on the background.

654
00:32:56,203 --> 00:32:58,123
This helps the foreground elements pop more.

655
00:32:58,123 --> 00:33:02,064
Also, like, I don't understand color space theory yet.

656
00:33:02,064 --> 00:33:04,024
That's something I'm gonna work on for the next game.

657
00:33:04,024 --> 00:33:04,344
So there's,

658
00:33:04,424 --> 00:33:06,966
some pretty bad banding artifacts in Thumper

659
00:33:06,966 --> 00:33:09,288
because we're doing everything in linear color space

660
00:33:09,288 --> 00:33:12,390
and this noise kind of helps mask some of that.

661
00:33:12,390 --> 00:33:14,812
So it's important.

662
00:33:14,812 --> 00:33:18,134
So to summarize the essential visual effects of Thumper,

663
00:33:18,134 --> 00:33:19,636
we use this vertex bend shader

664
00:33:19,636 --> 00:33:21,457
to create the smooth surfaces.

665
00:33:21,457 --> 00:33:24,880
We use tons of reflection maps on everything

666
00:33:24,880 --> 00:33:28,222
and we use really highly tuned post-processing effects.

667
00:33:29,078 --> 00:33:32,061
What we don't have are any complex lighting.

668
00:33:32,061 --> 00:33:34,323
Like we support diffuse and specular,

669
00:33:34,323 --> 00:33:37,546
but really don't use it almost anywhere.

670
00:33:37,546 --> 00:33:40,248
No normal maps, no real particle systems.

671
00:33:40,248 --> 00:33:41,489
Anything that looks like a particle

672
00:33:41,489 --> 00:33:43,031
was just some big hack that Brian did.

673
00:33:43,031 --> 00:33:46,214
And the nice thing about that is, you know,

674
00:33:46,214 --> 00:33:47,735
I didn't have to program all of this stuff.

675
00:33:47,735 --> 00:33:49,496
And this was like a real benefit

676
00:33:49,496 --> 00:33:52,459
of having this kind of minimal aesthetic

677
00:33:52,459 --> 00:33:54,601
and working with a really talented artist like Brian.

678
00:33:56,507 --> 00:33:58,327
So I think at this point, once we really had

679
00:33:58,327 --> 00:34:00,088
the visual look at the game,

680
00:34:00,088 --> 00:34:01,788
that really built our confidence.

681
00:34:01,788 --> 00:34:02,828
And now when we show the game,

682
00:34:02,828 --> 00:34:04,349
like people would play 10 minutes of it

683
00:34:04,349 --> 00:34:05,429
and they would get excited.

684
00:34:05,429 --> 00:34:06,810
Well, most people would.

685
00:34:06,810 --> 00:34:08,810
And I think, you know, for me,

686
00:34:08,810 --> 00:34:10,130
confidence as a game designer means

687
00:34:10,130 --> 00:34:11,951
just like being able to stick to your guns, right?

688
00:34:11,951 --> 00:34:13,731
Like you have a bunch of stuff

689
00:34:13,731 --> 00:34:14,692
that you don't understand yet

690
00:34:14,692 --> 00:34:16,632
or you don't know what you're gonna do

691
00:34:16,632 --> 00:34:19,553
and just feel like eventually you'll figure it out.

692
00:34:19,553 --> 00:34:22,114
And I think that's what having the post-boxing effects

693
00:34:22,114 --> 00:34:24,795
and all the visual elements gave us with Thumper.

694
00:34:26,517 --> 00:34:31,026
So I'm going to make a little segue and then like I also gained some confidence as a programmer

695
00:34:31,026 --> 00:34:33,631
and what's really interesting is that I'm a much different programmer

696
00:34:33,631 --> 00:34:35,455
and the way I approach programming is different.

697
00:34:36,703 --> 00:34:42,287
Specifically, one big thing is I don't use object-orientated programming anymore.

698
00:34:42,287 --> 00:34:46,931
And when I was starting Thumper, it was really the default way I thought about stuff.

699
00:34:46,931 --> 00:34:51,514
My brain, the gears wouldn't start turning unless I started typing out a class definition.

700
00:34:51,514 --> 00:34:55,017
Or started thinking about object interaction diagrams.

701
00:34:55,017 --> 00:34:58,980
And it was how everyone programmed at my old job, and that's what I thought real programmers did.

702
00:35:01,006 --> 00:35:03,148
And I don't want to get into an argument about this

703
00:35:03,148 --> 00:35:05,250
or something, but it's just interesting to me

704
00:35:05,250 --> 00:35:06,412
that I change that much.

705
00:35:06,412 --> 00:35:08,234
And when you work on something for a long time,

706
00:35:08,234 --> 00:35:09,375
you do change.

707
00:35:09,375 --> 00:35:10,456
And if you're interested in this,

708
00:35:10,456 --> 00:35:12,938
this is a talk by Brian Will on YouTube

709
00:35:12,938 --> 00:35:14,500
that I recommend you check out.

710
00:35:16,669 --> 00:35:19,331
And now what I think good code is, is much different.

711
00:35:19,331 --> 00:35:21,912
So I have a file called avatar.cpp,

712
00:35:21,912 --> 00:35:22,973
it's about 5,000 lines of code,

713
00:35:22,973 --> 00:35:25,755
and almost 90% of the gameplay and input handling,

714
00:35:25,755 --> 00:35:29,397
a lot of the complicated stuff that makes Stumper fun to play

715
00:35:29,397 --> 00:35:30,978
is in this one file.

716
00:35:30,978 --> 00:35:33,439
It's all done in a procedural programming style.

717
00:35:34,553 --> 00:35:38,376
And this is also the fact that when you're on an indie game,

718
00:35:38,376 --> 00:35:39,397
when you're making an indie game,

719
00:35:39,397 --> 00:35:40,738
or when you're working by yourself,

720
00:35:40,738 --> 00:35:42,780
you should probably not program the same way

721
00:35:42,780 --> 00:35:46,543
as you do on a big team, if you wanna be more efficient.

722
00:35:46,543 --> 00:35:48,665
Another example is all the rendering code

723
00:35:48,665 --> 00:35:50,366
is in one giant file.

724
00:35:50,366 --> 00:35:52,307
Supports all these different rendering backends

725
00:35:52,307 --> 00:35:54,809
and probably some new ones soon.

726
00:35:54,809 --> 00:35:57,011
And that's 90% of the graphics code is in this one file.

727
00:35:57,011 --> 00:35:59,433
So now I'm gonna talk a little bit

728
00:35:59,433 --> 00:36:02,115
about how we brought Thumper to VR.

729
00:36:03,385 --> 00:36:06,748
So like I said, we never imagined that Thumper would be a VR game.

730
00:36:06,748 --> 00:36:10,210
And my first experiences with VR were very negative.

731
00:36:10,210 --> 00:36:14,373
I think I used an Oculus DK1 and I did like a roller coaster and skydiving

732
00:36:14,373 --> 00:36:16,194
demo and just made me sick.

733
00:36:16,194 --> 00:36:19,696
And you know, most people who saw Thumper just thought it would make them very

734
00:36:19,696 --> 00:36:21,197
sick if they tried to play it in VR.

735
00:36:22,765 --> 00:36:26,887
But we were very aware of all the hype and the marketing opportunities around VR.

736
00:36:26,887 --> 00:36:31,189
I ended up going to GDC China and I attended this talk.

737
00:36:31,189 --> 00:36:34,710
I think he also gave it at GDC Europe if you want to check it out.

738
00:36:34,710 --> 00:36:36,891
I thought it was very interesting.

739
00:36:36,891 --> 00:36:41,173
He talked about a lot of the physiological causes of motion sickness and in particular

740
00:36:41,173 --> 00:36:42,093
with...

741
00:36:42,954 --> 00:36:46,959
VR experiences, what makes a lot of people sick are changes in acceleration, right?

742
00:36:46,959 --> 00:36:52,025
Like when you're moving or speeding up or slowing down, and

743
00:36:52,025 --> 00:36:55,569
your body doesn't have that same feedback, and it creates vexation and

744
00:36:55,569 --> 00:36:57,051
leads to motion sickness.

745
00:36:57,051 --> 00:36:57,111
So I

746
00:37:00,002 --> 00:37:01,923
realize that in Thumper, you're going super fast

747
00:37:01,923 --> 00:37:04,225
all the time, but you're going at a constant speed

748
00:37:04,225 --> 00:37:06,266
most of the time, especially because it's a rhythm game.

749
00:37:06,266 --> 00:37:08,708
And when you're going through the turns,

750
00:37:08,708 --> 00:37:09,949
they're so fast that they just kind of feel

751
00:37:09,949 --> 00:37:11,610
like teleportations, you don't really feel

752
00:37:11,610 --> 00:37:13,691
like you're actually turning

753
00:37:13,691 --> 00:37:15,192
for any extended period of time.

754
00:37:15,192 --> 00:37:18,414
So we got Sony to send us a PSVR kit,

755
00:37:18,414 --> 00:37:21,676
and we just decided to try to bring Thumper to VR.

756
00:37:22,578 --> 00:37:26,580
And this is my home office in Seoul,

757
00:37:26,580 --> 00:37:28,422
and this is one of the few times in the past five years

758
00:37:28,422 --> 00:37:29,842
where Brian and I actually got to work

759
00:37:29,842 --> 00:37:31,103
in the same physical space.

760
00:37:31,103 --> 00:37:32,904
He came to Korea for three days,

761
00:37:32,904 --> 00:37:35,706
and we basically didn't leave this room

762
00:37:35,706 --> 00:37:36,827
for those three days,

763
00:37:36,827 --> 00:37:40,149
and we figured out almost all of the fundamental issues

764
00:37:40,149 --> 00:37:43,271
bringing Thumper to VR during that time.

765
00:37:43,271 --> 00:37:46,593
So one of the first challenges was how does Thumper work

766
00:37:48,308 --> 00:37:49,629
with a different field of view.

767
00:37:49,629 --> 00:37:51,571
Because when you have a 2D game, of course,

768
00:37:51,571 --> 00:37:54,093
you can set the camera field of view to whatever you want.

769
00:37:54,093 --> 00:37:56,575
And in 2D, we have a super wide field of view,

770
00:37:56,575 --> 00:37:58,936
and that really helps things feel deeper,

771
00:37:58,936 --> 00:38:03,200
and it's essential to the sense of speed in the game.

772
00:38:03,200 --> 00:38:07,944
In VR, the field of view is constrained

773
00:38:07,944 --> 00:38:09,245
by the lens in the VR headset.

774
00:38:09,245 --> 00:38:10,246
If you don't know how it works,

775
00:38:10,246 --> 00:38:14,449
basically you have to use the same FOV as the lens,

776
00:38:14,449 --> 00:38:16,691
otherwise things are gonna look wrong or broken.

777
00:38:17,272 --> 00:38:21,995
So here in VR, it's about 100 degrees in PSVR

778
00:38:21,995 --> 00:38:23,697
and everything looks way closer to you.

779
00:38:23,697 --> 00:38:25,558
And when we played the game like this,

780
00:38:25,558 --> 00:38:27,640
it just felt kind of slow and not exciting.

781
00:38:28,475 --> 00:38:31,557
And so this seemed like a really hard problem to solve,

782
00:38:31,557 --> 00:38:33,059
but Brian instantly knew what to do,

783
00:38:33,059 --> 00:38:36,462
and that was just to basically scale the path by two times,

784
00:38:36,462 --> 00:38:39,704
and just scale everything further away from you.

785
00:38:39,704 --> 00:38:41,766
So in VR, you're actually going twice as fast

786
00:38:41,766 --> 00:38:43,347
as you are in non-VR,

787
00:38:43,347 --> 00:38:45,109
and it seems like that would be insane,

788
00:38:45,109 --> 00:38:47,991
but it feels like you're going basically the same speed.

789
00:38:47,991 --> 00:38:49,433
So to compensate for the FOV,

790
00:38:49,433 --> 00:38:51,214
we just push everything further out.

791
00:38:51,214 --> 00:38:52,735
And this is something that works for Thumper,

792
00:38:52,735 --> 00:38:54,297
but might not work for a lot of games.

793
00:38:56,547 --> 00:38:59,710
Another big question was, you know, how big are you

794
00:38:59,710 --> 00:39:02,472
in the world of Thumper when you put on the headset?

795
00:39:02,472 --> 00:39:04,654
Like, if you look at this image, like there's a space beetle

796
00:39:04,654 --> 00:39:05,735
and all this abstract stuff,

797
00:39:05,735 --> 00:39:09,918
there's no real world analog to these things.

798
00:39:09,918 --> 00:39:13,901
So, originally we had it where the beetle was this big thing

799
00:39:13,901 --> 00:39:14,822
and you were this little tiny guy,

800
00:39:14,822 --> 00:39:18,165
like he's like this big spaceship or something.

801
00:39:18,165 --> 00:39:23,049
And in this sense, you felt really detached and distant.

802
00:39:23,469 --> 00:39:27,910
So of course we did the opposite where we made it so the beetle's about the size of your head.

803
00:39:27,910 --> 00:39:31,932
And this felt like you were just like flying headfirst down this like hell ride.

804
00:39:31,932 --> 00:39:36,353
And it was really intense, like too intense. It felt like you're getting smacked in the face.

805
00:39:36,353 --> 00:39:41,135
And it was almost a little nauseating. And we found that the sweet spot was to be about where

806
00:39:41,135 --> 00:39:47,317
the beetle's shoulder width about 40 centimeters. And this felt like you were sliding down the track,

807
00:39:47,317 --> 00:39:50,878
kind of like a slip and slide or like a playground. And this was really the sweet

808
00:39:50,878 --> 00:39:52,558
spot of intensity and comfort.

809
00:39:53,139 --> 00:39:58,383
And so I saw that, you know, the famous game designer Jeff Minter, who I've never met,

810
00:39:58,383 --> 00:40:02,786
but I saw that he was developing a PSVR game, so I sent him a build of Thumper.

811
00:40:02,786 --> 00:40:04,147
And then the next day he tweeted this.

812
00:40:04,147 --> 00:40:11,153
And so I think this means that we got the scale correct, because he really feels like

813
00:40:11,153 --> 00:40:14,556
he was, you know, immersed in there.

814
00:40:14,556 --> 00:40:17,918
I guess he never mentions Thumper in this tweet, so maybe this is just the way he lives

815
00:40:17,918 --> 00:40:18,639
his life.

816
00:40:18,639 --> 00:40:20,160
Like I say, I don't know him.

817
00:40:20,160 --> 00:40:21,121
But...

818
00:40:23,305 --> 00:40:25,485
Anyway, and then another cool thing we could do in VR

819
00:40:25,485 --> 00:40:28,866
was adjust the scale of the bosses.

820
00:40:28,866 --> 00:40:31,527
So this is Crackhead in level one.

821
00:40:31,527 --> 00:40:33,688
And you see that's about as big as he can be

822
00:40:33,688 --> 00:40:36,649
before he starts going off the screen.

823
00:40:36,649 --> 00:40:38,890
But in VR, we just make him four times bigger.

824
00:40:38,890 --> 00:40:41,831
And that means that you have to kind of look up to see him

825
00:40:41,831 --> 00:40:43,471
and he's looming and more ominous.

826
00:40:43,471 --> 00:40:46,992
So that was a nice thing about the VR experience we could do.

827
00:40:48,871 --> 00:40:55,317
So the stuff with all the VR, like the fact that it worked out was kind of this like incredibly fortunate

828
00:40:55,317 --> 00:41:00,281
And lucky thing like we kind of chased the technology, right? We're like, oh, we've got a game. It's almost done

829
00:41:00,281 --> 00:41:04,404
Here's this big marketing opportunity. Let's bring it to VR and it worked out

830
00:41:04,404 --> 00:41:08,388
but I don't know that that would work out most of the time and

831
00:41:09,766 --> 00:41:13,447
You know, like I say, most of what we did was really specific to Thumper.

832
00:41:13,447 --> 00:41:16,029
And I don't know that it's applicable to other VR games.

833
00:41:16,029 --> 00:41:18,990
I think that the big kind of takeaway here might be that, you know,

834
00:41:18,990 --> 00:41:22,431
when there's a new technology, no one really knows what will make it interesting

835
00:41:22,431 --> 00:41:26,673
or successful, like the engineers or the business people behind it have some ideas

836
00:41:26,673 --> 00:41:30,895
for sure, but it's always kind of up to artists to like use it in new and unexpected ways.

837
00:41:34,121 --> 00:41:36,502
So in the last part of the talk, I want to kind of just talk

838
00:41:36,502 --> 00:41:38,783
about what it took to get Thumper over the finish line.

839
00:41:38,783 --> 00:41:40,924
So the last six months of the project, you know,

840
00:41:40,924 --> 00:41:43,305
we decided we're going to be a PSVR launch title.

841
00:41:43,305 --> 00:41:44,545
And that was the first time

842
00:41:44,545 --> 00:41:46,766
in the whole project we had a hard deadline.

843
00:41:46,766 --> 00:41:49,327
And it was a really brutal experience.

844
00:41:49,327 --> 00:41:51,807
But the first thing we had to get

845
00:41:51,807 --> 00:41:53,988
through was optimization, right?

846
00:41:53,988 --> 00:41:56,189
So the game was running on PS4.

847
00:41:56,189 --> 00:41:58,270
It was our main target platform at.

848
00:42:00,803 --> 00:42:02,044
about 60 frames per second,

849
00:42:02,044 --> 00:42:03,786
kind of bouncing off 60 frames per second, right?

850
00:42:03,786 --> 00:42:08,712
And then with PSVR, like now we're rendering the scene twice,

851
00:42:08,712 --> 00:42:10,954
we're doing super sampling to make it look better,

852
00:42:10,954 --> 00:42:12,696
and we're rendering at 90 frames per second.

853
00:42:12,696 --> 00:42:15,980
So that's almost three times as many pixels per second.

854
00:42:16,640 --> 00:42:21,627
And if you tried to do this, I think like raise the bar like this at the triple-a scale like you just couldn't do it

855
00:42:21,627 --> 00:42:25,592
Right because I mean you probably have experienced engineers who made a bunch of decisions

856
00:42:25,592 --> 00:42:32,120
About how art assets should be built and you had tons of content all built to those specifications

857
00:42:32,641 --> 00:42:34,922
And if you did this with a commercial engine like Unity,

858
00:42:34,922 --> 00:42:37,122
I think it's really easy to paint yourself into a corner

859
00:42:37,122 --> 00:42:38,803
where you've made it the whole game

860
00:42:38,803 --> 00:42:40,243
with one level of performance

861
00:42:40,243 --> 00:42:42,604
and you don't have any ability to get really deep

862
00:42:42,604 --> 00:42:45,204
and tinker or you don't have full control

863
00:42:45,204 --> 00:42:47,745
over the way your data is used

864
00:42:47,745 --> 00:42:52,046
and ultimately displayed on the screen.

865
00:42:52,046 --> 00:42:54,847
So I think our advantage was that we had a custom engine

866
00:42:54,847 --> 00:42:57,047
and that I'm not an experienced graphics programmer.

867
00:42:57,047 --> 00:42:58,328
So I was kind of banking that I'd done

868
00:42:58,328 --> 00:43:00,308
a bunch of stupid stuff that we could find

869
00:43:00,308 --> 00:43:01,148
and improve upon.

870
00:43:01,795 --> 00:43:03,618
And we had a lot of help too.

871
00:43:03,618 --> 00:43:05,180
I mean, Sony was very useful.

872
00:43:05,180 --> 00:43:06,322
Like, I met with Sony engineers

873
00:43:06,322 --> 00:43:08,204
and they helped me better understand the PS4.

874
00:43:08,204 --> 00:43:10,007
So actually getting the,

875
00:43:10,007 --> 00:43:14,994
getting GPU performance to spec was not that hard.

876
00:43:14,994 --> 00:43:17,198
We did the thing where you draw.

877
00:43:18,292 --> 00:43:20,133
both eyes at the same time, like if there's a cube

878
00:43:20,133 --> 00:43:23,014
in both eyes, you draw that cube for the left eye

879
00:43:23,014 --> 00:43:25,174
and then immediately for the right eye.

880
00:43:25,174 --> 00:43:26,715
It's kind of called multi-slice rendering.

881
00:43:26,715 --> 00:43:29,796
All the major VR headsets recommend

882
00:43:29,796 --> 00:43:31,756
you kind of render this way.

883
00:43:31,756 --> 00:43:34,757
Also, because of this vertex shader,

884
00:43:34,757 --> 00:43:37,118
I was already using tons of hardware instancing

885
00:43:37,118 --> 00:43:40,259
where like, you know, we're drawing one mesh

886
00:43:40,259 --> 00:43:41,999
many, many times, so you only send that mesh

887
00:43:41,999 --> 00:43:43,120
to the GPU once and then you apply

888
00:43:43,120 --> 00:43:45,020
different parameters to it.

889
00:43:46,178 --> 00:43:49,140
using a shader, and that was a big win for Thumper.

890
00:43:49,140 --> 00:43:52,263
And then we did a few specific things for the PS4,

891
00:43:52,263 --> 00:43:52,943
but not that much.

892
00:43:52,943 --> 00:43:56,827
Kind of the biggest thing I had to tackle

893
00:43:56,827 --> 00:43:58,348
was CPU optimization.

894
00:43:58,348 --> 00:44:02,691
I mean, Thumper all runs on one thread on the PS4,

895
00:44:02,691 --> 00:44:05,994
so I didn't have time to build a multi-threaded engine,

896
00:44:05,994 --> 00:44:08,116
so it was really just about getting that one thread

897
00:44:08,116 --> 00:44:08,936
to be fast enough.

898
00:44:09,468 --> 00:44:11,029
where basically everything happens.

899
00:44:11,029 --> 00:44:14,152
And most of that, as is often the case,

900
00:44:14,152 --> 00:44:16,033
had to do with memory access and allocation.

901
00:44:16,033 --> 00:44:19,997
So I just want to explain what I did there with Thumper,

902
00:44:19,997 --> 00:44:21,558
and it's a pretty simple thing that worked.

903
00:44:21,558 --> 00:44:25,221
And it was heavily inspired by this blog post

904
00:44:25,221 --> 00:44:27,163
by Nicholas Gray.

905
00:44:27,163 --> 00:44:29,044
And this whole blog that he has,

906
00:44:29,044 --> 00:44:30,986
it used to be called the BitSquid Engine,

907
00:44:30,986 --> 00:44:32,287
but now it's called the Autodesk Engine.

908
00:44:32,287 --> 00:44:33,928
And if you're interested in building your own engine,

909
00:44:33,928 --> 00:44:36,150
I think this is a great resource to start.

910
00:44:37,729 --> 00:44:41,532
So the main thing I do is I use custom allocators everywhere.

911
00:44:41,532 --> 00:44:44,715
And so that means I override operator new like this.

912
00:44:44,715 --> 00:44:46,837
So you can't use operator new.

913
00:44:46,837 --> 00:44:50,560
It forces a higher level of discipline over all the code,

914
00:44:50,560 --> 00:44:52,662
where all the code uses a custom allocator.

915
00:44:52,662 --> 00:44:54,343
And then that forces you to think about,

916
00:44:54,343 --> 00:44:56,645
how is the memory being used?

917
00:44:56,645 --> 00:44:57,927
And is it being used efficiently?

918
00:44:58,985 --> 00:45:02,168
I also require that all memory I allocate is deallocated,

919
00:45:02,168 --> 00:45:05,010
so in the destructor of the allocators,

920
00:45:05,010 --> 00:45:08,253
including when the program shuts down, they will assert.

921
00:45:08,253 --> 00:45:10,055
And this is a really good way

922
00:45:10,055 --> 00:45:12,797
to just find memory leaks right away.

923
00:45:12,797 --> 00:45:15,239
And I didn't have to build any sophisticated

924
00:45:15,239 --> 00:45:17,001
memory tracking tools or debugging tools.

925
00:45:17,001 --> 00:45:17,961
This was sufficient.

926
00:45:17,961 --> 00:45:19,703
And the reason is is because

927
00:45:19,703 --> 00:45:22,605
Slumper's allocation pattern's quite simple.

928
00:45:22,605 --> 00:45:24,627
When the game starts up, I just malloc.

929
00:45:25,354 --> 00:45:28,518
Massive chunk of memory I take advantage of the fact that like, you know

930
00:45:28,518 --> 00:45:34,024
The ps4 has about like eight gigabytes of memory and that's not close to how much thumper needs to run

931
00:45:34,024 --> 00:45:35,485
Or probably most indie games need to run

932
00:45:36,374 --> 00:45:39,055
And then so to start divvying up this big chunk of memory,

933
00:45:39,055 --> 00:45:40,476
I use a stack allocator.

934
00:45:40,476 --> 00:45:42,637
So when you see like the Druill logo,

935
00:45:42,637 --> 00:45:45,059
like I'm basically loading over half the game

936
00:45:45,059 --> 00:45:46,219
during those like 10 seconds.

937
00:45:46,219 --> 00:45:49,181
And it's a stack allocator,

938
00:45:49,181 --> 00:45:51,582
which is super easy to implement.

939
00:45:51,582 --> 00:45:55,504
And then I allocate a bunch of little utility allocators

940
00:45:55,504 --> 00:45:57,165
for certain things that are necessary

941
00:45:57,165 --> 00:45:59,186
while the game's running like effects and animations.

942
00:45:59,186 --> 00:46:01,407
Those are almost all pool allocators

943
00:46:01,407 --> 00:46:03,148
and there's a couple other ones.

944
00:46:04,403 --> 00:46:06,024
And then when I load a level,

945
00:46:06,024 --> 00:46:07,505
I allocate from the other side of the stack.

946
00:46:07,505 --> 00:46:09,346
So it's a double-ended stack allocator,

947
00:46:09,346 --> 00:46:11,226
still really easy to implement.

948
00:46:11,226 --> 00:46:12,727
And then when the level's unloaded,

949
00:46:12,727 --> 00:46:14,508
it goes away and I can load a new level.

950
00:46:14,508 --> 00:46:17,929
So I can do everything with this one big chunk of memory

951
00:46:17,929 --> 00:46:22,451
and it avoids fragmentation problems.

952
00:46:22,451 --> 00:46:23,271
And I just have this,

953
00:46:23,271 --> 00:46:25,452
these are, I only use four types of allocators,

954
00:46:25,452 --> 00:46:27,933
the big stack one, the pool, scratch, and frame.

955
00:46:27,933 --> 00:46:30,254
And these are all really easy to implement.

956
00:46:30,254 --> 00:46:30,995
I won't go into them.

957
00:46:30,995 --> 00:46:33,316
And I think the thing I just wanna.

958
00:46:34,251 --> 00:46:36,812
mentioned is that I think there's a kind of a,

959
00:46:36,812 --> 00:46:38,092
when I was learning programming,

960
00:46:38,092 --> 00:46:39,793
there was this kind of attitude that, you know,

961
00:46:39,793 --> 00:46:41,593
memory management is super hard,

962
00:46:41,593 --> 00:46:42,994
and it's really dangerous.

963
00:46:42,994 --> 00:46:44,314
Like, you're gonna be spending all your time

964
00:46:44,314 --> 00:46:45,735
chasing down memory leaks and stuff,

965
00:46:45,735 --> 00:46:47,555
and that's not the case, I don't think.

966
00:46:47,555 --> 00:46:51,977
And it's sad that it's not taught in a way like this.

967
00:46:51,977 --> 00:46:55,978
Like, once I read this, that blog post by Nicholas,

968
00:46:55,978 --> 00:46:57,619
I just like, a light went on, and I was like,

969
00:46:57,619 --> 00:46:59,499
oh yeah, that's how you should use C++,

970
00:46:59,499 --> 00:47:01,600
and that's how you should manage your memory.

971
00:47:01,600 --> 00:47:01,780
And,

972
00:47:03,128 --> 00:47:07,234
And, you know, if you think that using like a garbage collected language or using something

973
00:47:07,234 --> 00:47:10,658
like Unity is saving you a lot of time, like, it might not actually be true.

974
00:47:12,672 --> 00:47:15,653
And another big advantage of optimization,

975
00:47:15,653 --> 00:47:17,593
or of art direction with regards to optimization

976
00:47:17,593 --> 00:47:20,214
is that Brian was like totally into this minimal aesthetic.

977
00:47:20,214 --> 00:47:21,714
And if you look at the game,

978
00:47:21,714 --> 00:47:24,495
almost all the scenes in the game are,

979
00:47:24,495 --> 00:47:26,436
there's one or two key visual elements.

980
00:47:26,436 --> 00:47:29,536
Like there's like the boss or the tentacles or tunnel.

981
00:47:29,536 --> 00:47:31,737
We never do all of them at once.

982
00:47:31,737 --> 00:47:32,957
And that kind of, you know,

983
00:47:32,957 --> 00:47:36,598
lowered the bar for what I had to deliver as the programmer.

984
00:47:38,393 --> 00:47:40,275
And Brian was really good about defending

985
00:47:40,275 --> 00:47:42,478
what was really critical about the look,

986
00:47:42,478 --> 00:47:44,701
but also he was really good about cutting the fat too.

987
00:47:44,701 --> 00:47:47,705
So we didn't really have to sacrifice much visual quality

988
00:47:47,705 --> 00:47:49,127
to get the game running in VR.

989
00:47:50,104 --> 00:47:53,126
And a nice side effect was that with PS4 Pro,

990
00:47:53,126 --> 00:47:54,027
we can render in native 4K,

991
00:47:54,027 --> 00:47:56,689
because we had done so much optimization.

992
00:47:56,689 --> 00:48:00,291
So if you look at, it's easier to see on this chart,

993
00:48:00,291 --> 00:48:03,913
like that's, you know, native 4K at 60 frames per second

994
00:48:03,913 --> 00:48:05,294
is about 500 million pixels per second,

995
00:48:05,294 --> 00:48:08,116
which is more, but the PS4 Pro has a GPU

996
00:48:08,116 --> 00:48:10,018
that's about twice as powerful,

997
00:48:10,018 --> 00:48:11,939
so it was well within what we could do.

998
00:48:11,939 --> 00:48:18,343
And then we also were able to enhance the quality on PSVR

999
00:48:18,343 --> 00:48:19,684
if you're running on PS4 Pro.

1000
00:48:21,852 --> 00:48:25,836
So during this whole optimization and bug fixing period,

1001
00:48:25,836 --> 00:48:27,638
we were still play testing the game.

1002
00:48:27,638 --> 00:48:28,819
And we were still really just,

1003
00:48:28,819 --> 00:48:31,181
everything was coming in super hot.

1004
00:48:31,181 --> 00:48:33,884
And I know that we had this 10 minute demo

1005
00:48:33,884 --> 00:48:37,708
that we showed many times that people really liked,

1006
00:48:37,708 --> 00:48:39,590
but there was the whole rest of the game.

1007
00:48:39,590 --> 00:48:42,272
It's a 10 hour game and how,

1008
00:48:42,272 --> 00:48:44,314
whether or not that whole thing's gonna hold up and be fun.

1009
00:48:45,121 --> 00:48:47,202
and be understandable for everyone is something,

1010
00:48:47,202 --> 00:48:49,983
a question that we didn't answer until really late.

1011
00:48:49,983 --> 00:48:53,104
And I think it was because of these people,

1012
00:48:53,104 --> 00:48:54,624
especially, that we were able to do it.

1013
00:48:54,624 --> 00:48:57,205
These are all people that I sent builds

1014
00:48:57,205 --> 00:48:58,365
and donated their time,

1015
00:48:58,365 --> 00:49:00,786
just because they were excited about the game.

1016
00:49:00,786 --> 00:49:04,067
And it was everything from just people telling me

1017
00:49:04,067 --> 00:49:06,908
that the game didn't run on their machine,

1018
00:49:06,908 --> 00:49:09,549
to people who played the game for hours and hours

1019
00:49:09,549 --> 00:49:13,490
and became experts and helped us add new expert mechanics.

1020
00:49:14,533 --> 00:49:15,794
So we're really grateful for that.

1021
00:49:15,794 --> 00:49:18,495
And like I mentioned earlier how,

1022
00:49:18,495 --> 00:49:21,657
you know, there's this feeling that like no one could

1023
00:49:21,657 --> 00:49:23,718
help us, right, like when we're in the wilderness.

1024
00:49:23,718 --> 00:49:26,119
But at the end of the project, these people saved us.

1025
00:49:26,119 --> 00:49:29,401
And like having like a community of other indie developers,

1026
00:49:29,401 --> 00:49:35,965
I think is one of the most valuable things you can have.

1027
00:49:35,965 --> 00:49:37,906
So like I said, we had no external QA.

1028
00:49:37,906 --> 00:49:40,947
And I think the way that we got away with that was that,

1029
00:49:40,947 --> 00:49:42,108
well, it's a pretty simple game,

1030
00:49:42,108 --> 00:49:44,229
but we also did tons and tons of game shows.

1031
00:49:45,424 --> 00:49:50,066
It stopped being fun after a while, but we did so many of these that,

1032
00:49:50,066 --> 00:49:52,267
like, the build was constantly being tested.

1033
00:49:52,267 --> 00:49:55,288
We were constantly finding usability and technical issues.

1034
00:49:55,288 --> 00:49:58,129
It was running on all this different hardware.

1035
00:49:58,129 --> 00:50:00,830
We also took advantage of the Sony kiosk demo program

1036
00:50:00,830 --> 00:50:03,771
where I made three different kiosk demos over the last year

1037
00:50:03,771 --> 00:50:07,333
of the project, and those all require a certification pass.

1038
00:50:07,333 --> 00:50:09,894
So I got some experience doing that.

1039
00:50:09,894 --> 00:50:13,415
We were also on the PSVR demo disk, which was another certification pass.

1040
00:50:14,078 --> 00:50:18,039
And it was a lot of extra work, but it ended up being worth it.

1041
00:50:18,039 --> 00:50:20,540
And then Sony also offered VR consultations,

1042
00:50:20,540 --> 00:50:23,621
where we would send them builds, and they would just point out

1043
00:50:23,621 --> 00:50:26,442
issues with the way we were doing VR.

1044
00:50:26,442 --> 00:50:27,522
So that was really useful.

1045
00:50:27,522 --> 00:50:30,823
I also want to just mention a couple partners that

1046
00:50:30,823 --> 00:50:32,163
helped us get over the finish line.

1047
00:50:32,163 --> 00:50:34,584
We did everything from the business side

1048
00:50:34,584 --> 00:50:36,904
and the marketing side ourselves.

1049
00:50:36,904 --> 00:50:40,125
And it was really hard for us to trust anyone.

1050
00:50:40,125 --> 00:50:42,005
I mean, I'm the kind of person that made my own engine,

1051
00:50:42,005 --> 00:50:43,546
so maybe that explains it.

1052
00:50:43,546 --> 00:50:43,746
But.

1053
00:50:45,342 --> 00:50:51,604
You know, like to release on PS4 in Japan, which we did at the same time as everything else,

1054
00:50:51,604 --> 00:50:55,266
Zach from Kakahashi Games was really helpful.

1055
00:50:55,266 --> 00:51:00,708
And he, his business model I think is what a lot of indie developers are looking for.

1056
00:51:00,708 --> 00:51:04,149
And I would recommend working for him if you want to bring a console game to Japan.

1057
00:51:05,598 --> 00:51:10,602
And also Chris Dwyer is a indie marketing specialist.

1058
00:51:10,602 --> 00:51:12,463
He's kind of like a one-man company,

1059
00:51:12,463 --> 00:51:14,064
and he actually reached out to us

1060
00:51:14,064 --> 00:51:17,787
and helped us with marketing and press outreach

1061
00:51:17,787 --> 00:51:19,128
during the last month of the project

1062
00:51:19,128 --> 00:51:21,270
when I was the most stressed out.

1063
00:51:21,270 --> 00:51:23,031
And he was really a lifesaver.

1064
00:51:23,031 --> 00:51:24,993
I think the nicest thing I can say about Chris

1065
00:51:24,993 --> 00:51:27,114
is that during that month he really felt like

1066
00:51:27,114 --> 00:51:29,476
part of the team, and I really trusted him.

1067
00:51:29,476 --> 00:51:32,018
So I think he doesn't have that much free time

1068
00:51:32,018 --> 00:51:33,159
because he's just a one-man company,

1069
00:51:33,159 --> 00:51:34,800
but I also highly recommend Chris.

1070
00:51:36,479 --> 00:51:42,301
So the game came out and, you know, it was a very weird experience, like this, you know,

1071
00:51:42,301 --> 00:51:45,723
thing that you've worked on for so long and suddenly it's out, it's done.

1072
00:51:45,723 --> 00:51:50,765
I'm still kind of processing how I feel about it, but more than any review score

1073
00:51:50,765 --> 00:51:54,767
or anything this user from NeoGAF posted this image

1074
00:51:54,767 --> 00:51:57,468
and I think this alone made it all worthwhile.

1075
00:52:02,905 --> 00:52:06,247
So I mean, I think this kind of summarized a lot of our goals with Thumper.

1076
00:52:06,247 --> 00:52:08,028
And it's cool to see stuff like this.

1077
00:52:08,028 --> 00:52:12,130
But of course, we weren't actually finished.

1078
00:52:12,130 --> 00:52:17,492
There's an immense pressure to sustain and maximize after so much work.

1079
00:52:17,492 --> 00:52:21,294
We immediately started working on Vi and Oculus support.

1080
00:52:22,582 --> 00:52:25,683
We added a new gameplay mode called Play Plus Mode.

1081
00:52:25,683 --> 00:52:27,264
We did support, bugs, customer service,

1082
00:52:27,264 --> 00:52:29,685
stuff everyone has to do, and I'm still working on stuff.

1083
00:52:29,685 --> 00:52:32,287
So it's really been, even though it came back out in October,

1084
00:52:32,287 --> 00:52:36,709
it's really been a full-time job since then.

1085
00:52:36,709 --> 00:52:38,110
And so yeah, if you wanna go on your own

1086
00:52:38,110 --> 00:52:41,052
and make your own engine, that's kind of

1087
00:52:41,052 --> 00:52:42,392
what you're getting yourself into.

1088
00:52:48,080 --> 00:52:51,482
So yeah, I have just maybe one more unrehearsed comment

1089
00:52:51,482 --> 00:52:52,862
about the whole project.

1090
00:52:52,862 --> 00:52:57,725
And I think what I will remember most fondly

1091
00:52:57,725 --> 00:53:00,987
about the whole project is not the kind of external validation

1092
00:53:00,987 --> 00:53:03,368
or the review scores or sales or anything like that.

1093
00:53:03,368 --> 00:53:08,471
It was that feeling of being in the wilderness with Brian

1094
00:53:08,471 --> 00:53:09,851
and having

1095
00:53:10,456 --> 00:53:16,559
that freedom and that privilege to be able to like, you know, just get totally lost and like not be conscious of,

1096
00:53:16,559 --> 00:53:22,882
you know, what other people are going to think about the, about the game or feel about my position in the industry or anything like that.

1097
00:53:22,882 --> 00:53:23,503
And, um,

1098
00:53:24,523 --> 00:53:26,805
That's a privilege that not enough people get,

1099
00:53:26,805 --> 00:53:30,088
and I think it's something that has to come from

1100
00:53:30,088 --> 00:53:34,372
an industry or society that makes that an important thing.

1101
00:53:34,372 --> 00:53:36,574
It's kind of like going to university or education,

1102
00:53:36,574 --> 00:53:38,375
or getting an education.

1103
00:53:38,375 --> 00:53:39,536
You can't do that on your own.

1104
00:53:39,536 --> 00:53:41,038
It takes a community of people.

1105
00:53:42,303 --> 00:53:45,024
So, yeah, I'd like to thank everyone who helped us along the way.

1106
00:53:45,024 --> 00:53:47,146
Thank my wife, who I couldn't have done it without.

1107
00:53:47,146 --> 00:53:49,467
So that's the end of the talk.

1108
00:53:49,467 --> 00:53:52,709
And we have some time for Q&A.

1109
00:53:52,709 --> 00:53:56,912
And this is my email address if you want to message me.

1110
00:54:11,155 --> 00:54:13,816
If there's any questions, there's some aisle microphones.

1111
00:54:13,816 --> 00:54:15,017
I recommend you use those.

1112
00:54:15,017 --> 00:54:18,478
So I have two related questions.

1113
00:54:18,478 --> 00:54:21,759
It's basically how were you full-time all seven years

1114
00:54:21,759 --> 00:54:23,740
and how did you fund the project?

1115
00:54:23,740 --> 00:54:26,661
Contract work or funding or?

1116
00:54:26,661 --> 00:54:28,981
Okay, yeah, I was full-time the last,

1117
00:54:28,981 --> 00:54:30,842
out of the seven years, the first two years

1118
00:54:30,842 --> 00:54:32,603
I had a day job working at a game developer

1119
00:54:32,603 --> 00:54:34,003
and I made it work on Thumper only,

1120
00:54:34,003 --> 00:54:35,163
like nights and weekends.

1121
00:54:35,564 --> 00:54:37,366
The next five years I was full-time.

1122
00:54:37,366 --> 00:54:40,990
So that included programming, marketing, biz dev, all that stuff.

1123
00:54:40,990 --> 00:54:46,717
And funding was mostly savings from my job that I worked for six years

1124
00:54:46,717 --> 00:54:50,682
and the support of my wife, whose job in Korea came with a housing stipend

1125
00:54:50,682 --> 00:54:52,564
and helped me have a low cost of living.

1126
00:54:52,564 --> 00:54:53,445
So that's how I did it.

1127
00:54:55,901 --> 00:55:06,944
So both the look and also some of your implementation notes about Thumper kind of remind me of the early 90s demo scene of massively optimizing graphics and tiny little packages.

1128
00:55:06,944 --> 00:55:09,865
Was that an influence on y'all at all?

1129
00:55:09,865 --> 00:55:12,406
I don't think it was a direct influence.

1130
00:55:12,406 --> 00:55:16,427
Although we like that stuff, I mean I think a lot of it's interesting.

1131
00:55:16,427 --> 00:55:17,368
I think like...

1132
00:55:19,320 --> 00:55:20,980
Some of the things we talked about were like,

1133
00:55:20,980 --> 00:55:22,601
we wanted it to be really psychedelic,

1134
00:55:22,601 --> 00:55:24,801
but we didn't want it to be like light feeling

1135
00:55:24,801 --> 00:55:26,202
or kind of wishy-washy.

1136
00:55:26,202 --> 00:55:29,543
We wanted like hard psych, you know, like we wanted,

1137
00:55:29,543 --> 00:55:31,984
and kind of like 2001, right, like the monolith,

1138
00:55:31,984 --> 00:55:34,504
like that image is like so simple and stripped down,

1139
00:55:34,504 --> 00:55:37,165
but it's like terrifying.

1140
00:55:37,165 --> 00:55:39,786
So I think, yeah, there were so many influences,

1141
00:55:39,786 --> 00:55:42,147
more than I can mention, but that was a big one.

1142
00:55:43,992 --> 00:55:47,636
All right, did you satisfy your curiosity

1143
00:55:47,636 --> 00:55:49,197
at building your own engine?

1144
00:55:49,197 --> 00:55:51,199
And second question would be,

1145
00:55:51,199 --> 00:55:53,501
would you use a commercial engine knowing all the job

1146
00:55:53,501 --> 00:55:57,204
that you need to do to actually have an engine?

1147
00:55:57,204 --> 00:55:59,847
Yeah, I mean, it satisfied a lot of my curiosity.

1148
00:55:59,847 --> 00:56:02,229
And I did have to always remind myself

1149
00:56:02,229 --> 00:56:04,912
that I don't wanna make engines for my life.

1150
00:56:04,912 --> 00:56:06,413
I don't want that to be my goal.

1151
00:56:06,413 --> 00:56:08,755
My goal is to make games.

1152
00:56:10,397 --> 00:56:16,400
So sometimes I felt like I went down this weird rabbit hole that wasn't necessary, but ultimately, yeah, it was worth it.

1153
00:56:16,400 --> 00:56:26,645
And I don't think I could ever stand using a commercial engine now, because even if it does 99% of what I want to do, the last 1% is really important to me.

1154
00:56:41,525 --> 00:56:42,806
Does this one work?

1155
00:56:42,806 --> 00:56:43,006
Yep.

1156
00:56:43,006 --> 00:56:47,188
I was wondering, I saw how you created the tracks

1157
00:56:47,188 --> 00:56:49,129
with pieces being put together,

1158
00:56:49,129 --> 00:56:51,009
but in the game, does your character,

1159
00:56:51,009 --> 00:56:53,050
does the beetle move in world space,

1160
00:56:53,050 --> 00:56:57,052
or does the track move around your center point

1161
00:56:57,052 --> 00:56:58,393
when you're moving?

1162
00:56:58,393 --> 00:57:03,015
The camera and the beetle are actually moving through space.

1163
00:57:03,015 --> 00:57:04,775
So there's actually a track out there that's being built

1164
00:57:04,775 --> 00:57:05,796
and it's moving along.

1165
00:57:05,796 --> 00:57:09,697
Yeah, yeah, it's being built out like 50 beats ahead of you,

1166
00:57:09,697 --> 00:57:09,998
and...

1167
00:57:11,523 --> 00:57:13,583
I mean, at one point we had it so that we could animate

1168
00:57:13,583 --> 00:57:16,964
everything, every frame, but we kind of dialed some of that

1169
00:57:16,964 --> 00:57:18,485
back just for performance reasons.

1170
00:57:18,485 --> 00:57:19,425
But yeah.

1171
00:57:19,425 --> 00:57:19,845
Cool.

1172
00:57:19,845 --> 00:57:20,445
Looks great.

1173
00:57:20,445 --> 00:57:23,866
Also, I made an observation that back when you had the 90

1174
00:57:23,866 --> 00:57:26,426
degree turns, and it's kind of like on a grid, and you're

1175
00:57:26,426 --> 00:57:28,767
picking up balls, it reminded me of the bonus stages in

1176
00:57:28,767 --> 00:57:30,187
Sonic the Hedgehog 3.

1177
00:57:30,187 --> 00:57:30,628
Oh, yeah?

1178
00:57:30,628 --> 00:57:30,788
OK, cool.

1179
00:57:30,788 --> 00:57:33,008
If you want to see a shipped version of that, check that

1180
00:57:33,008 --> 00:57:33,408
out.

1181
00:57:33,408 --> 00:57:34,048
OK, cool.

1182
00:57:34,048 --> 00:57:34,328
Thanks.

1183
00:57:36,118 --> 00:57:41,125
So I fully intend to watch the YouTube video you referred to, but can you summarize in

1184
00:57:41,125 --> 00:57:44,329
a nutshell what's wrong with object-oriented programming?

1185
00:57:44,329 --> 00:57:45,731
Yeah, um...

1186
00:57:45,731 --> 00:57:47,673
I'm not disagreeing, I'm curious.

1187
00:57:47,673 --> 00:57:48,354
No, sure.

1188
00:57:48,354 --> 00:57:53,340
I mean, well, this is just me, and I don't want to go too long on this, but yeah, I think

1189
00:57:53,340 --> 00:57:53,741
that...

1190
00:57:54,554 --> 00:58:03,280
Like that video says, like object-oriented programming has this goal of encapsulating things as a way to make

1191
00:58:03,280 --> 00:58:09,285
problems easier to solve. And I think that it forces you to do encapsulation like all the time, including really early on.

1192
00:58:09,285 --> 00:58:16,230
And the reality of how at least I program is that, you know, first I just kind of want to get see something working and

1193
00:58:16,230 --> 00:58:17,931
I want to

1194
00:58:17,931 --> 00:58:22,054
then like, you know, maybe then make it more beautiful or make it more performant or something.

1195
00:58:22,579 --> 00:58:25,643
And I just found that object-orientated programming just creates this meta-problem

1196
00:58:25,643 --> 00:58:30,369
that I'm spending all my time solving and not actually solving the actual problem I want to solve.

1197
00:58:30,369 --> 00:58:35,255
I also find it much easier to think of things often as data and...

1198
00:58:37,190 --> 00:58:39,612
functions and data as separate things,

1199
00:58:39,612 --> 00:58:43,035
especially when your goal as a game programmer

1200
00:58:43,035 --> 00:58:45,397
is to transform tons of data at once,

1201
00:58:45,397 --> 00:58:47,619
and trying to fit something into an object-oriented

1202
00:58:47,619 --> 00:58:52,023
programming model is not, for me, a very useful tool.

1203
00:58:52,023 --> 00:58:53,965
That's basically it, yeah.

1204
00:58:57,278 --> 00:59:00,300
Hey, so when you were making music for Fumper,

1205
00:59:00,300 --> 00:59:02,581
was the music more informing level design

1206
00:59:02,581 --> 00:59:03,762
or was it the other way around?

1207
00:59:03,762 --> 00:59:05,342
Like, did you start first with the track

1208
00:59:05,342 --> 00:59:07,804
that you wanted to make and then build the level around it?

1209
00:59:07,804 --> 00:59:11,505
Or was it more like you started with what you want to do

1210
00:59:11,505 --> 00:59:15,047
with the level and then sort of added the music to that?

1211
00:59:15,047 --> 00:59:16,748
Well, yeah, Brian made all the music,

1212
00:59:16,748 --> 00:59:19,609
but basically, I mean, it was so iterative

1213
00:59:19,609 --> 00:59:21,910
that like, you know, we're constantly changing the levels,

1214
00:59:21,910 --> 00:59:23,051
constantly trying new music.

1215
00:59:23,051 --> 00:59:25,372
So there's so much experimentation and back and forth, but.

1216
00:59:25,918 --> 00:59:33,325
broadly the overall goal was to like kind of make a fun action game and then add music that accompanied that so

1217
00:59:33,325 --> 00:59:37,669
We never like I mean, there's a soundtrack for thumper and some people enjoy it and that's cool

1218
00:59:37,669 --> 00:59:41,612
But like the goal is never to make like songs that would be catchy or memorable

1219
00:59:41,612 --> 00:59:45,375
It was more about to make like a game experience that that use sound

1220
00:59:45,375 --> 00:59:52,001
Thanks for the talk did you ever come close to quitting?

1221
00:59:54,287 --> 00:59:55,407
No, I don't think so.

1222
00:59:55,407 --> 00:59:58,528
I mean, and like I said, that's like a very privileged thing to say.

1223
00:59:58,528 --> 01:00:01,849
You know, it's kind of like, you know, I do what I want whenever I want.

1224
01:00:01,849 --> 01:00:07,151
You know, like, I didn't really give up because it was always something that was interesting.

1225
01:00:07,151 --> 01:00:09,932
And certainly, like, during the seven years.

1226
01:00:10,644 --> 01:00:14,608
that we were working on it, you get burned out,

1227
01:00:14,608 --> 01:00:19,153
and you do have to start thinking about

1228
01:00:19,153 --> 01:00:20,835
your own psychological well-being.

1229
01:00:20,835 --> 01:00:23,679
And like I say, there were parts where the uncertainty,

1230
01:00:23,679 --> 01:00:25,260
anxiety were kind of paralyzing.

1231
01:00:25,260 --> 01:00:27,984
And certainly towards the end of the project,

1232
01:00:27,984 --> 01:00:30,246
when I think about how hard it was,

1233
01:00:30,667 --> 01:00:35,569
and how dehumanizing and brutal the act of commercializing the game was.

1234
01:00:35,569 --> 01:00:38,130
There's certainly things that I hope I never do again.

1235
01:00:38,130 --> 01:00:42,153
Or I got making a game all by myself out of my system,

1236
01:00:42,153 --> 01:00:44,494
and I don't know that I want to do it the same way again.

1237
01:00:44,494 --> 01:00:46,995
I just wanted to ask, how did you do difficulty tuning?

1238
01:00:46,995 --> 01:00:51,798
Because I'm terrible at the game. I love it.

1239
01:00:51,798 --> 01:00:53,278
How did we do difficulty tuning?

1240
01:00:53,278 --> 01:00:55,940
I guess it was mostly just observing people.

1241
01:00:58,120 --> 01:01:00,801
You know, over, like, we kept making the game easier, basically,

1242
01:01:00,801 --> 01:01:05,083
because obviously we were, like, total experts and we had no concept

1243
01:01:05,083 --> 01:01:08,044
of how hard the game was by the end of it.

1244
01:01:08,044 --> 01:01:12,545
And so, you know, we did all these game shows where we would watch people

1245
01:01:12,545 --> 01:01:14,666
and then we just, you know, tried to make sure that, like,

1246
01:01:14,666 --> 01:01:16,186
95% of people at least could.

1247
01:01:16,848 --> 01:01:19,828
beat the first level or get through most of the first level.

1248
01:01:19,828 --> 01:01:21,429
And I think there's also, like,

1249
01:01:21,429 --> 01:01:24,549
Thumper's not that hard a game.

1250
01:01:24,549 --> 01:01:27,170
Well, maybe I'm biased, but it's not that punishing, right?

1251
01:01:27,170 --> 01:01:28,530
Like, you'll die and then you just go back

1252
01:01:28,530 --> 01:01:30,050
to the previous checkpoint and you get to practice

1253
01:01:30,050 --> 01:01:30,931
the same thing you just did.

1254
01:01:30,931 --> 01:01:33,211
And I think there's just something about rhythm games

1255
01:01:33,211 --> 01:01:34,971
that are particularly frustrating.

1256
01:01:34,971 --> 01:01:36,352
You know, you know what you have to do,

1257
01:01:36,352 --> 01:01:37,692
but you just can't do it.

1258
01:01:37,692 --> 01:01:38,972
And so that's why I think a lot of people,

1259
01:01:38,972 --> 01:01:40,192
they think it's a hard game.

1260
01:01:40,192 --> 01:01:40,532
Hey, thanks.

1261
01:01:40,532 --> 01:01:45,753
I was wondering how you dealt with cross-platform problems.

1262
01:01:46,466 --> 01:01:49,268
since you just used FMOD as your only middleware?

1263
01:01:49,268 --> 01:01:51,609
Oh yeah, so right, FMOD's awesome

1264
01:01:51,609 --> 01:01:52,750
because it worked out of the box

1265
01:01:52,750 --> 01:01:55,551
and that was something that just worked across everything.

1266
01:01:55,551 --> 01:01:59,674
But for cross-platform stuff,

1267
01:01:59,674 --> 01:02:03,676
right, so at first I wrote this really bad renderer in DX9

1268
01:02:03,676 --> 01:02:05,537
and that's what I was using for a long time.

1269
01:02:05,537 --> 01:02:08,059
And then once I had to port to PS4,

1270
01:02:08,059 --> 01:02:10,320
that port took a long time mostly

1271
01:02:10,320 --> 01:02:11,321
because I had to kind of...

1272
01:02:11,797 --> 01:02:13,843
make the engine cross-platform.

1273
01:02:13,843 --> 01:02:16,410
I had to build that level of indirection

1274
01:02:16,410 --> 01:02:17,975
or abstraction into the engine.

1275
01:02:18,624 --> 01:02:21,907
And I think that was another instance where like,

1276
01:02:21,907 --> 01:02:25,450
like naively I was like kind of anticipating this

1277
01:02:25,450 --> 01:02:27,172
from an object-orientated perspective

1278
01:02:27,172 --> 01:02:28,693
where I was like, oh, I'll make like a mesh

1279
01:02:28,693 --> 01:02:31,035
and then I'll have like a DX subclass of that mesh

1280
01:02:31,035 --> 01:02:32,096
or do the same thing materials.

1281
01:02:32,096 --> 01:02:34,618
And that's just through all that garbage out

1282
01:02:34,618 --> 01:02:39,002
and started just basically doing procedural programming

1283
01:02:39,002 --> 01:02:41,284
and slowly refactoring things out.

1284
01:02:42,853 --> 01:02:44,874
I don't know, nothing's that special.

1285
01:02:44,874 --> 01:02:48,496
I think every time I've added a new rendering back end,

1286
01:02:48,496 --> 01:02:49,657
the code's gotten better

1287
01:02:49,657 --> 01:02:52,399
because I just kind of understand things better.

1288
01:02:52,399 --> 01:02:52,779
Can I follow up?

1289
01:02:52,779 --> 01:02:53,739
Did you have a lot of support problems

1290
01:02:53,739 --> 01:02:58,482
with different graphics cards on PC and stuff?

1291
01:02:58,482 --> 01:03:02,405
Yeah, I mean, still dealing with them.

1292
01:03:02,405 --> 01:03:04,546
And it's always hard to know.

1293
01:03:05,378 --> 01:03:07,698
I don't know, do Unity games have all these problems?

1294
01:03:07,698 --> 01:03:09,098
I don't know, maybe it's just my game

1295
01:03:09,098 --> 01:03:10,119
because it's a custom engine.

1296
01:03:10,119 --> 01:03:12,859
But yeah, we kind of worked through them.

1297
01:03:12,859 --> 01:03:14,819
And like I say, customer service is actually

1298
01:03:14,819 --> 01:03:16,900
a really important skill if you're gonna make

1299
01:03:16,900 --> 01:03:18,800
a custom engine, because you've got to convince people

1300
01:03:18,800 --> 01:03:20,760
to trust that you're actually gonna fix it

1301
01:03:20,760 --> 01:03:23,061
and send you a system report.

1302
01:03:23,061 --> 01:03:25,401
And especially with the VR stuff,

1303
01:03:25,401 --> 01:03:27,782
it's still kind of like the Wild West

1304
01:03:27,782 --> 01:03:29,802
and there's so many different configurations.

1305
01:03:29,802 --> 01:03:32,382
And I think for 99% of people it works,

1306
01:03:32,382 --> 01:03:34,863
so that's pretty acceptable.

1307
01:03:35,759 --> 01:03:36,260
Thank you.

1308
01:03:36,260 --> 01:03:36,501
Thanks.

1309
01:03:36,501 --> 01:03:40,929
If there are no more questions,

1310
01:03:40,929 --> 01:03:43,955
then that might be the end of the talk.

1311
01:03:43,955 --> 01:03:44,576
Okay, thanks.

