1
00:00:06,300 --> 00:00:09,843
Hello, my name is Bartosz Kulon, also known as GÅ‚owa.

2
00:00:09,843 --> 00:00:13,265
I was a lead programmer responsible for player mechanics

3
00:00:13,265 --> 00:00:15,207
in Dead Island and Dying Light.

4
00:00:17,352 --> 00:00:20,433
First of all, please forgive me for I have sinned.

5
00:00:20,433 --> 00:00:21,253
I lied to you.

6
00:00:21,253 --> 00:00:24,774
I was supposed to talk about 20 steps of improving movement

7
00:00:24,774 --> 00:00:27,976
in FPP games, but when I actually

8
00:00:27,976 --> 00:00:30,056
wrote the content of this speech,

9
00:00:30,056 --> 00:00:32,097
it was so long that we would end up

10
00:00:32,097 --> 00:00:33,998
talking to the end of the conference.

11
00:00:33,998 --> 00:00:37,779
And we must have time for other amazing lectures.

12
00:00:37,779 --> 00:00:41,321
So instead, I would like to focus on three major topics.

13
00:00:41,321 --> 00:00:43,902
Crucial player mechanics implemented

14
00:00:43,902 --> 00:00:45,202
into Dying Light Parkour.

15
00:00:46,316 --> 00:00:50,343
problems and solutions that we've encountered during the productions

16
00:00:50,343 --> 00:00:53,929
and additional details that help us improve the experience.

17
00:00:53,929 --> 00:00:58,758
I hope this lecture will help you build and extend freedom of movement in your game.

18
00:01:01,443 --> 00:01:08,609
So first of all, if we want our players to be able to climb, he needs to know what he can climb onto.

19
00:01:08,609 --> 00:01:14,054
So how we describe a climbable ledge? With its start, end and forward vector.

20
00:01:14,054 --> 00:01:17,296
This info is enough for him to start climbing.

21
00:01:17,697 --> 00:01:22,618
At first we had a meeting and spoke about placement detection of those ledges

22
00:01:22,618 --> 00:01:28,220
and our first approach was to try put manually this information into our geometry.

23
00:01:28,220 --> 00:01:33,662
Our level designers wanted to have control over the places that player could go to.

24
00:01:33,662 --> 00:01:36,183
But it turned out that we ended up with...

25
00:01:36,988 --> 00:01:43,389
50,000 ledges placed on a single map and we still needed more.

26
00:01:43,389 --> 00:01:49,251
Working with so many objects is horrible and impossible to manage.

27
00:01:49,251 --> 00:01:53,972
We also, our memory started to shrink because we initially started developing

28
00:01:53,972 --> 00:01:59,313
Dying Light on an old generation console and memory space in them was fucking low.

29
00:02:01,197 --> 00:02:03,519
So we decided to take another approach,

30
00:02:03,519 --> 00:02:06,081
detect ledges in runtime.

31
00:02:06,081 --> 00:02:07,942
Now, how we did it?

32
00:02:07,942 --> 00:02:12,386
We do a number of forward traces to detect obstacles

33
00:02:12,386 --> 00:02:13,887
in front of the players.

34
00:02:13,887 --> 00:02:19,171
For those who hit, we validate space above and below them

35
00:02:19,171 --> 00:02:22,813
to see if the player body will fit by simply measuring

36
00:02:22,813 --> 00:02:23,734
the distance of the traces.

37
00:02:24,720 --> 00:02:28,303
For those who are valid, we then do a vertical trace

38
00:02:28,303 --> 00:02:32,106
to detect the exact spot of climbing ledge.

39
00:02:32,106 --> 00:02:36,189
Those three steps has been repeated

40
00:02:36,189 --> 00:02:41,233
to the other side of the player, because our game is 3D,

41
00:02:41,233 --> 00:02:43,855
and also our ledge definition has a start and an end.

42
00:02:45,062 --> 00:02:50,228
Then we can pair those points with some angle restrictions,

43
00:02:50,228 --> 00:02:55,656
horizontal and vertical, and create plausible ledges.

44
00:02:55,656 --> 00:03:00,462
And then we can sort them by distance and look angles

45
00:03:00,462 --> 00:03:01,123
to the player.

46
00:03:02,484 --> 00:03:07,230
and add another space validation with traces.

47
00:03:07,230 --> 00:03:10,634
Why with traces instead of collision queries?

48
00:03:10,634 --> 00:03:13,377
Because our physics engine did not support

49
00:03:13,377 --> 00:03:17,181
getting results from physics queries in current frame,

50
00:03:17,181 --> 00:03:19,985
and getting results from next one would be too late.

51
00:03:21,390 --> 00:03:25,272
And all that turned out to be the right way to go.

52
00:03:25,272 --> 00:03:32,336
Climbing changed from frustration into pure joy of overcoming all obstacles in player's way.

53
00:03:32,336 --> 00:03:36,658
But this new freedom created two major problems.

54
00:03:36,658 --> 00:03:37,298
So beware!

55
00:03:38,504 --> 00:03:45,808
Level designers and level artists now have to take care of all places that player could go to.

56
00:03:45,808 --> 00:03:48,050
And I mean all places.

57
00:03:48,050 --> 00:03:49,811
Rooftop, backyards, etc.

58
00:03:49,811 --> 00:03:53,593
Everything had to play and look good.

59
00:03:53,593 --> 00:03:56,075
This was pretty scary at the beginning,

60
00:03:56,075 --> 00:04:00,377
but eventually they got so excited about the new gameplay possibilities

61
00:04:00,377 --> 00:04:02,959
that they ended up loved working on.

62
00:04:03,565 --> 00:04:10,249
They also told me that it actually opened their eyes on true meaning of open world environment.

63
00:04:10,249 --> 00:04:14,891
But this is a story for another lecture and I don't feel competent of explaining it.

64
00:04:14,891 --> 00:04:18,373
The second problem was the performance.

65
00:04:18,373 --> 00:04:23,976
Thankfully we have super intelligent and resourceful programmers that managed to come up with some

66
00:04:23,976 --> 00:04:29,819
magical optimizations that included batching geometry around the players and something

67
00:04:29,819 --> 00:04:31,599
we call carpet of traces.

68
00:04:32,100 --> 00:04:35,122
Technically, we knew that we have a special case of traces

69
00:04:35,122 --> 00:04:38,704
with the same direction and length.

70
00:04:38,704 --> 00:04:41,086
So we optimized our tracing algorithm

71
00:04:41,086 --> 00:04:44,509
to take that into account and perform less operation

72
00:04:44,509 --> 00:04:47,110
on batch geometry around the players.

73
00:04:47,110 --> 00:04:51,514
I don't know the exact details.

74
00:04:51,514 --> 00:04:54,195
I'm not so good at math, but it did the trick.

75
00:04:54,195 --> 00:04:56,257
Now that we know how to detect a ledge

76
00:04:56,257 --> 00:04:57,598
in front of the player,

77
00:04:57,598 --> 00:04:59,940
we can move to another important thing.

78
00:05:00,925 --> 00:05:07,051
If you look at this ledge from above, you will notice that there is no space for the player body,

79
00:05:07,051 --> 00:05:12,275
so player won't grab that ledge. But this is invisible from player point of view,

80
00:05:12,275 --> 00:05:18,321
so we had to include new climbing state. Hang. When we were designing and implementing our

81
00:05:18,321 --> 00:05:23,585
first approach, we didn't forget about it, but we wanted our movement to be fast

82
00:05:23,585 --> 00:05:26,948
and have smallest amount of stop as possible.

83
00:05:27,409 --> 00:05:33,113
Later, life verified our vision and we had to include that into our ledge detection algorithm.

84
00:05:33,113 --> 00:05:35,395
So how we did it?

85
00:05:35,395 --> 00:05:39,998
We took the results from forward traces from previous stage.

86
00:05:39,998 --> 00:05:42,820
We added different restrictions above and below.

87
00:05:42,820 --> 00:05:48,685
Above like 10 centimeters for player hand, but below it was more restricted one because

88
00:05:48,685 --> 00:05:50,146
of the player hanging body.

89
00:05:51,203 --> 00:05:53,525
And the pairing and space validation

90
00:05:53,525 --> 00:05:56,066
was done in similar fashion to the previous one.

91
00:05:56,066 --> 00:05:58,548
But if the player is hanging and he

92
00:05:58,548 --> 00:06:01,670
has some space on his left or right side,

93
00:06:01,670 --> 00:06:04,371
we now have to add additional movesets

94
00:06:04,371 --> 00:06:07,493
to make him feel comfortable with climbing.

95
00:06:07,493 --> 00:06:10,875
Hence, we've added site and app shimmy.

96
00:06:10,875 --> 00:06:14,257
But now, we have to detect places for shimmy.

97
00:06:14,257 --> 00:06:17,359
And that requires additional modifications to the algorithm.

98
00:06:18,041 --> 00:06:22,024
But I don't want to bore you with a lot of algorithm descriptions, so I'll leave this

99
00:06:22,024 --> 00:06:24,526
topic on a lecture on another occasion.

100
00:06:24,526 --> 00:06:26,108
Maybe next year, if you like this one.

101
00:06:26,108 --> 00:06:32,813
Now I want to talk about something very simple.

102
00:06:32,813 --> 00:06:33,074
Jumping.

103
00:06:33,074 --> 00:06:37,818
This is so old mechanic that all players should know how to do it, right?

104
00:06:39,081 --> 00:06:42,343
Well, as it turns out, jumping in FPP

105
00:06:42,343 --> 00:06:45,964
isn't as intuitive as jumping in platformers.

106
00:06:45,964 --> 00:06:49,326
The first player perspective works against precision.

107
00:06:49,326 --> 00:06:53,528
And precision is a crucial part of our game.

108
00:06:53,528 --> 00:06:54,908
Is that a major problem?

109
00:06:54,908 --> 00:06:58,430
Well, we had test cases when a large part of the players

110
00:06:58,430 --> 00:07:02,312
would jump too soon or too late all of the time.

111
00:07:02,312 --> 00:07:06,154
So our obstacles end up being too easy or too hard

112
00:07:06,154 --> 00:07:07,754
for a large part of the players.

113
00:07:08,482 --> 00:07:11,544
To fix that problem, we have to give the players

114
00:07:11,544 --> 00:07:12,444
additional help.

115
00:07:12,444 --> 00:07:15,807
This help included three simple steps

116
00:07:15,807 --> 00:07:19,969
that we call jump assist.

117
00:07:19,969 --> 00:07:26,694
First step was to delay jump and wait for a better moment to jump.

118
00:07:27,770 --> 00:07:31,052
We defined better as there is something in front of us,

119
00:07:31,052 --> 00:07:35,115
like a wall or a ledge, or players just started to fall,

120
00:07:35,115 --> 00:07:37,137
is not touching the ground.

121
00:07:37,137 --> 00:07:39,799
That helps the players that jump too soon.

122
00:07:39,799 --> 00:07:42,761
At full speed, that gave us additional one meter

123
00:07:42,761 --> 00:07:43,402
of jump range.

124
00:07:43,402 --> 00:07:47,245
The second step was allowing the player

125
00:07:47,245 --> 00:07:50,868
to perform a jump after he fall for a brief moment.

126
00:07:50,868 --> 00:07:53,270
With this one, we had to be careful

127
00:07:53,270 --> 00:07:55,712
because soon it looked really bad in co-op.

128
00:07:56,679 --> 00:07:59,185
And that helped the players that jumped too late.

129
00:08:00,389 --> 00:08:04,210
And third step, if the player is jumping over an obstacle

130
00:08:04,210 --> 00:08:06,390
but doesn't really touch it, we would still

131
00:08:06,390 --> 00:08:08,491
allow him to perform that jump.

132
00:08:08,491 --> 00:08:11,152
Technically, it's a jump in air, but players

133
00:08:11,152 --> 00:08:13,732
feel more natural, like they are extending their leg

134
00:08:13,732 --> 00:08:15,493
and bouncing off that object.

135
00:08:15,493 --> 00:08:17,253
Again, you have to be very careful

136
00:08:17,253 --> 00:08:19,453
because it works on a short range,

137
00:08:19,453 --> 00:08:21,674
like 20 centimeters from the object.

138
00:08:21,674 --> 00:08:26,055
Those three steps result most of our problems,

139
00:08:26,055 --> 00:08:28,976
and even a beginner had no problem with jumping.

140
00:08:28,976 --> 00:08:30,356
So frustration was gone.

141
00:08:32,316 --> 00:08:36,918
Okay, the end of part one.

142
00:08:36,918 --> 00:08:43,759
Now we can move to problems and solutions that we've encountered during the production.

143
00:08:43,759 --> 00:08:49,701
Animation and freedom of movement.

144
00:08:49,701 --> 00:08:54,782
When we have detected the ledge in front of the player, we will choose his starting position

145
00:08:54,782 --> 00:08:58,023
from four positions on straight climbable ledge.

146
00:08:59,214 --> 00:09:02,416
One position on not climbable ledge.

147
00:09:02,416 --> 00:09:06,619
There is a box that you cannot climb above.

148
00:09:06,619 --> 00:09:11,623
And four positions, two per side, on steep climbable ledges.

149
00:09:13,116 --> 00:09:15,598
This one is tricky, so bear with me.

150
00:09:15,598 --> 00:09:17,899
After choosing correct position,

151
00:09:17,899 --> 00:09:19,741
after choosing correct animation,

152
00:09:19,741 --> 00:09:22,903
player position is linearly set

153
00:09:22,903 --> 00:09:25,464
with the starting position of the animation,

154
00:09:25,464 --> 00:09:28,507
with special state we call begin.

155
00:09:28,507 --> 00:09:32,770
In this state, player is reaching his hands and legs

156
00:09:32,770 --> 00:09:33,710
to grab the ledge.

157
00:09:34,957 --> 00:09:41,820
This tail duration is scaled up or down according to player speed before the climb.

158
00:09:41,820 --> 00:09:46,722
This is due to the fact that we want to avoid changing speed as much as possible,

159
00:09:46,722 --> 00:09:52,905
so the movement is more fluid. In this state we are also forcing player look direction

160
00:09:52,905 --> 00:09:58,248
to blend with forward direction of the climbing ledge. When this state is finished we have set

161
00:09:58,248 --> 00:10:02,750
the player in the exact same position and orientation as in the animation.

162
00:10:03,271 --> 00:10:07,897
So all we have to do right now is synchronize the rest of the movement with the info from

163
00:10:07,897 --> 00:10:10,140
the animation.

164
00:10:10,140 --> 00:10:10,320
Bam.

165
00:10:10,320 --> 00:10:11,802
Simple, right?

166
00:10:11,802 --> 00:10:15,067
Here is a sample video of the first implementation.

167
00:10:15,067 --> 00:10:19,693
Some of you may notice that player character doesn't quite fit into Dying Light universe.

168
00:11:10,712 --> 00:11:14,993
And it looked okay, but played horrible.

169
00:11:14,993 --> 00:11:15,814
Why?

170
00:11:15,814 --> 00:11:18,355
Because when we initiated the climb,

171
00:11:18,355 --> 00:11:21,196
we would actually play a cinematic

172
00:11:21,196 --> 00:11:24,257
that takes away control of player hands.

173
00:11:24,257 --> 00:11:27,819
And no control feels really bad.

174
00:11:27,819 --> 00:11:31,740
So what we do, we started to do a shorter climbing sequence

175
00:11:31,740 --> 00:11:34,261
and it pushed us in the right direction,

176
00:11:34,261 --> 00:11:36,102
but the problem was still there.

177
00:11:36,842 --> 00:11:42,529
Then, we added a special state to the animation and, when player was still in the middle of

178
00:11:42,529 --> 00:11:47,575
climb, the camera was still moving up, but we allowed the player to walk.

179
00:11:47,575 --> 00:11:52,901
It felt a lot better, but still the beginning of the climbing had this issue and we couldn't

180
00:11:52,901 --> 00:11:54,663
resolve that in similar manner.

181
00:11:55,581 --> 00:12:04,209
But what we could do is to free player head from restrictions and allow to look around while climbing.

182
00:12:04,209 --> 00:12:06,511
That did the trick.

183
00:12:06,511 --> 00:12:12,936
Even when player body was locked in climbing, there was always some degree of control in player hands.

184
00:12:12,936 --> 00:12:15,478
With that we could rest.

185
00:12:15,478 --> 00:12:19,222
For a while. Until new problem showed up.

186
00:12:19,222 --> 00:12:22,705
Something I call straight line out of hell.

187
00:12:24,290 --> 00:12:30,272
When you see player history positioned from above, you will notice that his line,

188
00:12:30,272 --> 00:12:33,873
wanted line of movement, the red line, I hope it's visible,

189
00:12:33,873 --> 00:12:36,775
is offset a little bit to the left after the clap.

190
00:12:37,817 --> 00:12:41,458
This change depends on an angle that he approaches the ledge.

191
00:12:41,458 --> 00:12:46,540
The bigger the difference from forward of the climbing ledge, the bigger the change is.

192
00:12:46,540 --> 00:12:50,141
In theory, this shouldn't be a big deal.

193
00:12:50,141 --> 00:12:55,143
But as it turns out, my beloved colleagues from work are very creative.

194
00:12:55,143 --> 00:13:01,626
They have created some weird-ass obstacles that require extra precision from player control.

195
00:13:02,356 --> 00:13:06,201
And that precision was not possible in current implementation.

196
00:13:06,201 --> 00:13:09,165
Thankfully, solution was simple.

197
00:13:09,165 --> 00:13:14,773
Allow the player to climb on his current forward vector instead of the one from the ledge.

198
00:13:14,773 --> 00:13:18,278
That fixed one problem, but created two new ones.

199
00:13:19,698 --> 00:13:24,901
The red ellipse represents the movement from the animation.

200
00:13:24,901 --> 00:13:29,423
As you may notice, it ends before the climbing ledge.

201
00:13:29,423 --> 00:13:32,705
This is due to the fact that the animation has been prepared

202
00:13:32,705 --> 00:13:35,507
facing directly the forward of climbing ledge.

203
00:13:35,507 --> 00:13:38,449
So players started to fall before the climbing ledge.

204
00:13:38,969 --> 00:13:43,453
We fixed that by slightly restricting the angles of climb,

205
00:13:43,453 --> 00:13:47,356
so end position would differ more than player capsule radius

206
00:13:47,356 --> 00:13:52,760
and allow physics to climb on higher stair height midair.

207
00:13:52,760 --> 00:13:55,362
The second problem was the hands.

208
00:13:55,362 --> 00:13:58,765
They were grabbing the wrong places.

209
00:13:58,765 --> 00:14:01,046
One was going into geometry,

210
00:14:01,046 --> 00:14:02,828
the other one was grabbing the air.

211
00:14:02,828 --> 00:14:05,150
The first one looked easy.

212
00:14:05,150 --> 00:14:07,712
Render player hands at the end of the fray.

213
00:14:08,320 --> 00:14:12,263
It looks easy, but as we use deferred rendering in our engine,

214
00:14:12,263 --> 00:14:14,624
it would be very performance heavy.

215
00:14:14,624 --> 00:14:16,826
So what we did? We've cheated.

216
00:14:16,826 --> 00:14:22,530
We scaled down the hands of the player with camera projection metrics,

217
00:14:22,530 --> 00:14:24,051
and it did the trick.

218
00:14:24,051 --> 00:14:26,874
Have a look how it looks from FPP,

219
00:14:26,874 --> 00:14:28,515
and from the outside.

220
00:14:28,515 --> 00:14:37,081
We found a missing link, a proof that people evolved from T-Rex.

221
00:14:39,027 --> 00:14:42,228
The second hand used some trick.

222
00:14:42,228 --> 00:14:45,208
Compute edge position in screen space

223
00:14:45,208 --> 00:14:49,769
and use hand IK to set the hand in 3D space.

224
00:14:49,769 --> 00:14:52,410
It can be too far from the original position

225
00:14:52,410 --> 00:14:54,370
as the hand would stretch unnaturally,

226
00:14:54,370 --> 00:14:57,111
but we loosened then the animations a bit

227
00:14:57,111 --> 00:14:59,991
and we got like 40 centimeters of freedom

228
00:14:59,991 --> 00:15:01,251
that did the trick.

229
00:15:01,251 --> 00:15:06,612
Last but not least, I would like to talk about

230
00:15:06,612 --> 00:15:08,733
problems that we had with jumping.

231
00:15:11,555 --> 00:15:15,259
It's important for me because we had many discussions about it

232
00:15:15,259 --> 00:15:21,466
and we've resolved our problem in some maybe controversial way.

233
00:15:21,466 --> 00:15:28,593
First question is why we changed the regularly used jump button from X to R1.

234
00:15:29,715 --> 00:15:35,482
our game has very complex geometry, so we figured out that we would allow the

235
00:15:35,482 --> 00:15:40,549
players to have full control of the player even in air, so air control factor

236
00:15:40,549 --> 00:15:43,553
in air was set to 100% because we wanted

237
00:15:44,214 --> 00:15:48,855
the players to move as fluent as possible through our geometry.

238
00:15:48,855 --> 00:15:51,516
But if the player wants to press the X button,

239
00:15:51,516 --> 00:15:57,118
he will move his thumb from right stick to press it.

240
00:15:57,118 --> 00:16:01,619
That means he's losing control of player for a brief moment.

241
00:16:01,619 --> 00:16:05,040
The pacing in Dying Light is sometimes unforgiving,

242
00:16:05,040 --> 00:16:07,961
so even a short lack of control is bad.

243
00:16:08,462 --> 00:16:14,584
So in the end we move the jump button to R1 as it grants more control over the players and fix the problem.

244
00:16:15,130 --> 00:16:20,315
The second complaint about jump button was to hold or not to hold it.

245
00:16:20,315 --> 00:16:22,437
Imagine this situation.

246
00:16:22,437 --> 00:16:27,121
You have two ledges in front of the player, one in the window and one above him.

247
00:16:27,121 --> 00:16:31,104
As I have described, when searching the ledge, we define which one is better

248
00:16:31,104 --> 00:16:33,847
by comparing the distances and look angle.

249
00:16:33,847 --> 00:16:38,331
But the distance in this case is equal because we measure it in 2D.

250
00:16:39,011 --> 00:16:44,255
So how we choose between them? By slightly looking above one of them.

251
00:16:44,255 --> 00:16:50,639
The problem was no matter how I tweaked this algorithm to implement that slightly,

252
00:16:50,639 --> 00:16:55,503
it never worked perfectly. For some people it did, and for some people it didn't.

253
00:16:55,503 --> 00:17:00,566
What really helped is adding the restriction to hold the button to grab the ledge.

254
00:17:00,566 --> 00:17:02,047
You click, you jump.

255
00:17:02,666 --> 00:17:05,328
You grab the button, you grab the ledge.

256
00:17:05,328 --> 00:17:08,570
It took some time to teach the player how it works,

257
00:17:08,570 --> 00:17:11,672
but eventually remove all of the mentioned problems.

258
00:17:11,672 --> 00:17:15,675
At some point, we were also experimenting

259
00:17:15,675 --> 00:17:18,317
with something similar to Assassin's Creed play style

260
00:17:18,317 --> 00:17:21,960
when holding the trigger would switch player character

261
00:17:21,960 --> 00:17:23,581
into free running state.

262
00:17:23,581 --> 00:17:26,083
In this state, player would jump

263
00:17:26,083 --> 00:17:28,264
and grab ledges automatically,

264
00:17:28,264 --> 00:17:31,286
and as a prototype, it worked amazingly good.

265
00:17:31,767 --> 00:17:38,068
But it took away all players' skill and satisfaction of performing a perfect time jump.

266
00:17:38,068 --> 00:17:43,189
Don't get me wrong, I love Assassin's Creed franchise, but Assassin's Creed for me is

267
00:17:43,189 --> 00:17:48,470
all about the journey, the world and the setting.

268
00:17:48,470 --> 00:17:55,752
And we wanted our game to be more about second to second gameplay, so action in every aspect

269
00:17:55,752 --> 00:17:56,692
of game was crucial.

270
00:17:56,692 --> 00:18:01,233
The ability to make mistakes, to master the movement was important.

271
00:18:01,949 --> 00:18:04,611
This is something I noticed when I played

272
00:18:04,611 --> 00:18:08,074
Old Prince of Persia Sands of Time versus Prince of Persia 2008.

273
00:18:08,074 --> 00:18:13,699
The first one had all moves, jumping, wall running,

274
00:18:13,699 --> 00:18:18,583
monkey bars, et cetera, preset to different buttons.

275
00:18:18,583 --> 00:18:21,705
So it felt very acrobatic to overcome obstacles.

276
00:18:21,705 --> 00:18:24,968
Harder, but again, more satisfying.

277
00:18:25,793 --> 00:18:27,895
in Prince of Persia 2008,

278
00:18:27,895 --> 00:18:33,200
all of those mentioned moves was moved to one button.

279
00:18:33,200 --> 00:18:34,541
So the difficulty went down.

280
00:18:34,541 --> 00:18:36,763
And I feel the free running state

281
00:18:36,763 --> 00:18:39,345
took that simplification even further.

282
00:18:39,345 --> 00:18:41,847
But this is due to the fact that Assassin's Creed

283
00:18:41,847 --> 00:18:43,789
and Prince of Persia are different games

284
00:18:43,789 --> 00:18:46,091
and we figure out we shouldn't go that way either.

285
00:18:46,091 --> 00:18:46,611
The end of part two.

286
00:18:46,611 --> 00:18:46,851
Small break.

287
00:18:56,347 --> 00:19:01,808
Okay, now I want to talk about something slightly different.

288
00:19:01,808 --> 00:19:06,069
Vomiting. This only happens to me when I party too hard.

289
00:19:06,069 --> 00:19:10,850
It never happens to me after gaming. So imagine my confusion

290
00:19:10,850 --> 00:19:15,671
when one day my colleague came to me and told me this story.

291
00:19:15,671 --> 00:19:20,652
Dude, I was showing our game on game event to one of the reporters from

292
00:19:20,652 --> 00:19:24,593
Polygon. Suddenly she turns pale, runs out of the

293
00:19:24,593 --> 00:19:25,713
booth and vomits.

294
00:19:26,702 --> 00:19:33,568
He was in shock. Later that day he even wrote him an email and told him that she felt bad for the rest of the day.

295
00:19:33,568 --> 00:19:39,613
That was a disaster. We couldn't let that happen. You don't want a reporter run out of your booth.

296
00:19:39,613 --> 00:19:43,557
You don't want the players to feel sick when they are playing your game.

297
00:19:43,557 --> 00:19:47,440
Unfortunately, we didn't have anyone with that symptoms in our company.

298
00:19:48,443 --> 00:19:55,028
This was like 2014, so no VR stuff and motion sickness wasn't that common.

299
00:19:55,028 --> 00:20:01,514
Thankfully, we've read some articles about motion sickness and prepared a build

300
00:20:01,514 --> 00:20:06,838
with abilities of turning and tweaking things that could have influence on motion sickness.

301
00:20:06,838 --> 00:20:12,022
Big help came from specialists in that manner, because we have requested a report

302
00:20:12,022 --> 00:20:17,246
in which a lot of tests was conducted, I hope not on students only.

303
00:20:18,427 --> 00:20:23,652
And they figure out what caused motion sickness in our title.

304
00:20:23,652 --> 00:20:29,416
It turned out that frequent and often camera target movement caused motion sickness.

305
00:20:29,416 --> 00:20:35,722
The left one shows before the corrections, the right one was after the corrections in the animations.

306
00:20:37,099 --> 00:20:40,880
camera moving backward when player body was moving forward.

307
00:20:40,880 --> 00:20:45,161
That created an awkward feeling in player's head.

308
00:20:45,161 --> 00:20:49,621
So we had to remember to never go with camera back

309
00:20:49,621 --> 00:20:54,362
when performing fast forward moves.

310
00:20:54,362 --> 00:20:58,803
The highlighted area shows that on the left side,

311
00:20:58,803 --> 00:21:01,044
there is a slight bump backward.

312
00:21:01,044 --> 00:21:03,804
And we eliminated that in the animation, and that helped us.

313
00:21:05,110 --> 00:21:12,052
Third thing is player not being able to focus on constant element on the screen.

314
00:21:12,052 --> 00:21:18,734
Adding a simple dot there, fix that. It's even invisible for you, but your eyes

315
00:21:18,734 --> 00:21:24,076
automatically rely on that constant element and amortizes all of the movement, so it really helps.

316
00:21:25,899 --> 00:21:32,904
Last but not least is the distance between the TV and the player.

317
00:21:32,904 --> 00:21:39,528
When player is sitting too close to the camera, his brain can stand even the slightest movement of the camera.

318
00:21:39,528 --> 00:21:45,513
While we couldn't fix that at player homes, we could definitely fix that on next game event.

319
00:21:45,993 --> 00:21:53,256
Techland boot became larger and we made sure that the distance between the player and the TV is large.

320
00:21:53,256 --> 00:21:58,199
The result? No one felt motion sickness after playing DL on events,

321
00:21:58,199 --> 00:22:03,001
even the journalists that pointed out this problem. So it was a massive relief.

322
00:22:03,001 --> 00:22:09,184
This task was very frustrating for me as I was fixing problems that I didn't quite understand

323
00:22:09,184 --> 00:22:12,385
and I couldn't see really see the results of my work.

324
00:22:12,965 --> 00:22:18,530
But eventually we got very little negative comments about it,

325
00:22:18,530 --> 00:22:21,132
so I guess we did a good job.

326
00:22:21,132 --> 00:22:24,455
We're running out of time, so I will now

327
00:22:24,455 --> 00:22:29,239
give a list of things that we've implemented also.

328
00:22:29,239 --> 00:22:32,381
It will explain why we did it,

329
00:22:32,381 --> 00:22:34,543
but I won't tell how.

330
00:22:34,543 --> 00:22:35,824
You have to do it for yourself.

331
00:22:38,363 --> 00:22:45,227
When you see parkour videos, you will notice that freedom and fluidity of movements come to the runners very naturally.

332
00:22:45,227 --> 00:22:51,030
This is due to the fact that they have very good and well-trained knowledge of their bodies.

333
00:22:51,030 --> 00:22:53,791
That helps when they are running on narrow walkways,

334
00:22:53,791 --> 00:22:59,694
when they are jumping on knee-height obstacles or move their shoulders to fit into narrow ways.

335
00:22:59,694 --> 00:23:03,716
That kind of special awareness is impossible to simulate in FTP games.

336
00:23:04,157 --> 00:23:10,799
Player often lose obstacles from their side due to limited FOV or input slightly wrong direction

337
00:23:10,799 --> 00:23:14,100
and falls from heights or bumps into walls.

338
00:23:14,100 --> 00:23:18,862
To compensate that problems we created a couple of systems that help the player.

339
00:23:18,862 --> 00:23:25,104
Balance. If the player is walking on narrow object or near the ledge of the building

340
00:23:25,104 --> 00:23:28,285
we would slightly correct his input so he wouldn't fall.

341
00:23:29,202 --> 00:23:39,632
Avoid. When player is running, we would add side speed to his movement to avoid make him fall into walls and thus make him run much smoother.

342
00:23:39,632 --> 00:23:46,419
If you look, you see a little bump to the right, left. This is artificial. Player inputs only forward direction.

343
00:23:46,419 --> 00:23:51,925
And there is no collision. Like, we prevent collision from happening so there won't be any slowdown.

344
00:23:53,158 --> 00:24:01,067
and autostep. If the player has a small obstacle in front of him, like 40 centimeters, we would

345
00:24:01,067 --> 00:24:07,295
automatically climb on it, because those obstacles, when he's close to them, are invisible for

346
00:24:07,295 --> 00:24:10,098
the player, so it feels very natural to walk on them.

347
00:24:11,808 --> 00:24:17,290
So far, I was talking about movesets,

348
00:24:17,290 --> 00:24:20,552
about things that help the player move up or forward.

349
00:24:20,552 --> 00:24:23,873
But professional runners can do a lot of different stuff

350
00:24:23,873 --> 00:24:24,973
to go down.

351
00:24:24,973 --> 00:24:28,255
To help the player move down, we've

352
00:24:28,255 --> 00:24:31,076
added several systems that allowed

353
00:24:31,076 --> 00:24:33,597
us to build the true image of free runner.

354
00:24:33,597 --> 00:24:37,179
We've added jumping into dumpsters and breaking falls,

355
00:24:37,179 --> 00:24:38,279
landing on cars.

356
00:24:45,130 --> 00:24:47,432
jumping into water and swim, slide down ladders and pipes,

357
00:24:47,432 --> 00:24:48,213
using a zip line and enjoy the view, or even

358
00:24:48,213 --> 00:24:48,653
break falls by rolling.

359
00:24:48,653 --> 00:24:51,835
Those mechanisms had to be used by level designers to create

360
00:24:51,835 --> 00:24:52,816
fun and varied environment.

361
00:25:12,929 --> 00:25:16,470
And as a wrap up, where to go from here?

362
00:25:16,470 --> 00:25:17,951
Well, sky is the limit.

363
00:25:17,951 --> 00:25:19,771
One could add turning on shimmy

364
00:25:19,771 --> 00:25:23,073
so parkour puzzles would be even more interesting.

365
00:25:23,073 --> 00:25:25,914
Outside wall run with some clever level design

366
00:25:25,914 --> 00:25:27,154
to support them.

367
00:25:27,154 --> 00:25:30,655
Add environmental awareness so player would,

368
00:25:30,655 --> 00:25:32,896
when running through near obstacles,

369
00:25:32,896 --> 00:25:36,037
would touch walls and other things.

370
00:25:36,037 --> 00:25:38,458
Sky is the limit.

371
00:25:38,458 --> 00:25:40,759
Don't give up and you will succeed.

372
00:25:41,393 --> 00:25:45,944
At the end, I would like to thank all of the people that work on creating Dying Light.

373
00:25:45,944 --> 00:25:48,851
All of them deserve a round of applause, so give it up for them.

