1
00:00:12,248 --> 00:00:17,453
Two years ago, the Fortnite Quest team was in crisis.

2
00:00:19,615 --> 00:00:24,820
We knew Quests in Battle Royale had a very direct impact on player engagement.

3
00:00:26,217 --> 00:00:30,080
When you've finished your quests, there's a feeling that you're done with the season.

4
00:00:30,760 --> 00:00:33,782
Checked the boxes, wrapped it up, what game's next?

5
00:00:36,004 --> 00:00:41,047
Even if players were still enjoying the game, finishing their quests was a natural jumping off point.

6
00:00:42,668 --> 00:00:46,111
But despite being, oh, let me show you my slides too.

7
00:00:48,206 --> 00:00:57,171
But despite being one of the larger design teams on Fortnite, we couldn't create enough quests to keep all our players busy for the whole season.

8
00:00:58,012 --> 00:01:02,374
We were relying too much on cheap-to-produce quests like get five shotgun kills.

9
00:01:03,295 --> 00:01:12,940
We didn't have time to reframe the system or to make better quests within the system, and we certainly didn't have time to make more quests than we were currently making.

10
00:01:14,461 --> 00:01:17,763
My boss asked me to solve this crisis.

11
00:01:19,619 --> 00:01:23,563
My name is Eric Carter, and I'm a Principal Technical Designer at Epic.

12
00:01:25,505 --> 00:01:37,436
Though I have a background in computer science, I spend all of my time structuring content and using Unreal's designer-facing tools to help Fortnite's design team work faster and better.

13
00:01:38,317 --> 00:01:43,201
Prior to working at Epic, I was a tools and source control product owner at Bungie.

14
00:01:44,008 --> 00:01:49,251
So I have experience designing and leading tools teams, but I'm not a tools engineer.

15
00:01:50,191 --> 00:01:56,634
I'm a game designer, and I use that context and expertise to help game design teams succeed.

16
00:01:58,575 --> 00:02:04,498
As a game designer, the first thing I did when I joined the quest team was to start building quests.

17
00:02:05,481 --> 00:02:10,365
If you remember the Naruto quests from chapter two, season seven, that was me.

18
00:02:11,045 --> 00:02:18,390
I made those and I'm infinitely proud of being able to contribute to the legend of one of the coolest ninjas ever.

19
00:02:19,731 --> 00:02:22,773
I watched a lot of Naruto to capture the right themes and tone.

20
00:02:23,234 --> 00:02:27,136
I read brand documents and poured over partner guidance and IP rules.

21
00:02:27,957 --> 00:02:33,261
Viz Media is very particular about how Naruto characters are depicted.

22
00:02:34,440 --> 00:02:41,107
I also absorbed a lot of wisdom and nomenclature from other designers about how quests work in Fortnite.

23
00:02:41,807 --> 00:02:48,714
And I worked within the design processes that Epic uses to keep our designs consistent with the rest of the game.

24
00:02:49,916 --> 00:02:52,358
But I didn't write a single line of C++.

25
00:02:54,557 --> 00:02:58,658
I tell you all of that just to make it clear that I'm not a programmer in disguise.

26
00:02:59,378 --> 00:03:01,159
I live and work as a designer.

27
00:03:01,779 --> 00:03:04,480
A rather technical one, but a designer nonetheless.

28
00:03:06,180 --> 00:03:12,722
And my design content creation experience is the crux of how we solved our crisis.

29
00:03:15,483 --> 00:03:23,545
As someone who was working in the middle of it, the crisis had a few very obvious causes, but one large cause stood out.

30
00:03:24,639 --> 00:03:28,222
Making quests was fucking hard.

31
00:03:30,144 --> 00:03:33,067
Very few people had the knowledge to do it at all.

32
00:03:33,788 --> 00:03:37,932
There were hundreds of ways to break a quest and only one way to do it right.

33
00:03:38,713 --> 00:03:47,081
The iteration loop from a completed idea to a quest asset to testing was literally days long.

34
00:03:48,410 --> 00:03:55,334
And our workflow led to overlapping work, loss changes, and tons of unnecessary production and testing overhead.

35
00:03:57,174 --> 00:04:12,922
I'm a little ashamed to admit it, but despite being the company that makes the most sophisticated game engine in the world, we were making our quests in a very impressive set of visual basic scripts running in Microsoft Excel.

36
00:04:14,963 --> 00:04:15,784
This is it, actually.

37
00:04:17,762 --> 00:04:22,203
This is actually the version of the spreadsheet that outputted the Nerudo quests.

38
00:04:22,763 --> 00:04:25,564
This GIF won't loop while I'm talking.

39
00:04:25,684 --> 00:04:28,864
This is just me tabbing through all of the required subsheets.

40
00:04:29,865 --> 00:04:31,745
There wasn't any error checking here.

41
00:04:32,185 --> 00:04:36,486
You just had to know what to put into each field and not make any typos.

42
00:04:39,667 --> 00:04:42,547
Our quest team grew out of our systems design team.

43
00:04:43,367 --> 00:04:45,908
And system designers really like Excel.

44
00:04:47,219 --> 00:04:52,142
And so at some point, the spreadsheets they were using just evolved into this whole quest editor thing.

45
00:04:52,763 --> 00:04:55,565
And the result still hurts me to think about a little bit.

46
00:04:57,126 --> 00:05:02,309
The sheet is pretty complicated because quests are, by their nature, pretty complicated.

47
00:05:03,570 --> 00:05:16,459
After five years of dailies, weeklies, seasonal narrative quests, event quests, web quests, MTX quest bundles, and Twitch quests, there's just a whole lot of configurations that are available.

48
00:05:17,233 --> 00:05:23,840
This spreadsheet exported all of these configuration options to an asset that Unreal Engine could use.

49
00:05:24,280 --> 00:05:30,286
And the length and complexity of that asset can give you a sense of why this is irreducible complexity.

50
00:05:33,189 --> 00:05:36,993
This is the configuration for just one quest in Chapter 2, Season 7.

51
00:05:38,334 --> 00:05:45,018
Only one person on the team, the marvelously knowledgeable embedded tester, Hunter Kent, knew what all of these did.

52
00:05:45,918 --> 00:05:50,380
I'm deeply in his debt for his help explaining all of this nonsense.

53
00:05:53,842 --> 00:05:57,945
It's important to point out four dangers in all of these quest features.

54
00:05:58,725 --> 00:06:04,148
First, in some configurations, there are many features that are irrelevant.

55
00:06:05,216 --> 00:06:08,738
For example, daily quests are granted by the lobby.

56
00:06:09,358 --> 00:06:15,422
So the field that specifies what NPC grants the quest has no effect regardless of its value.

57
00:06:16,782 --> 00:06:26,688
Second, some values like the server backend name are auto-generated and had to match a specific schema and should never be tweaked by designers.

58
00:06:27,388 --> 00:06:32,311
But they still needed to be stored in the same asset file the designers were working in.

59
00:06:34,383 --> 00:06:37,365
Third, some of these options were incompatible.

60
00:06:38,345 --> 00:06:41,527
A daily quest can't be in a quest bundle.

61
00:06:42,708 --> 00:06:47,311
A quest can't have both a reward array and a post-match reward box.

62
00:06:48,530 --> 00:06:55,316
And finally, in some configurations, there may only be one correct answer among several choices.

63
00:06:55,997 --> 00:07:00,061
Weekly quests must have a gameplay tag specifying their week number.

64
00:07:00,641 --> 00:07:05,346
A transient quest that gets handed out must also be marked as repeatable.

65
00:07:07,659 --> 00:07:17,862
Now, I've just given you a pretty conventional argument for a situation where a design or art team needs a bespoke tool for editing a specific type of content.

66
00:07:18,562 --> 00:07:33,327
I'm sure many of you are familiar with this kind of proposal being placed on a tools team's roadmap and the very long wait for that tools team's availability.

67
00:07:35,788 --> 00:07:36,528
Believe it or not,

68
00:07:37,588 --> 00:07:41,990
Tools team availability at Epic is just as rare as at your studio.

69
00:07:43,030 --> 00:07:47,372
This is an aspect of the crisis that I needed to solve.

70
00:07:49,273 --> 00:07:53,355
With the help of only two already overbooked Quest engineers.

71
00:07:54,696 --> 00:07:59,498
So how's a single tech designer going to solve a tooling problem like this?

72
00:08:04,560 --> 00:08:05,781
Remember how I told you earlier,

73
00:08:07,639 --> 00:08:13,421
that my design content creation experience was the crux of the solution to this crisis?

74
00:08:16,942 --> 00:08:29,567
The first important takeaway I want you to get from my talk is that doing hands-on game design work actually gives a game designer a few advantages over a conventional tools team when it comes to optimizing workflows.

75
00:08:31,641 --> 00:08:39,206
In my case, I knew the ins and outs of our quest tooling problem firsthand because I lived it for four months.

76
00:08:40,167 --> 00:08:41,848
I didn't need to do any user studies.

77
00:08:42,428 --> 00:08:46,351
I didn't need to collect feature wishlists or shadow content creators.

78
00:08:47,632 --> 00:08:51,955
These problems were just my daily life and the daily lives of my neighbors.

79
00:08:52,996 --> 00:08:59,060
The usual techniques that tools teams would use to collect requirements for a new quest editor were unnecessary.

80
00:09:00,854 --> 00:09:14,417
If you're a member of a tools team at a game studio, I'm sure you've had the experience of listening to a designer rattle through a long list of pain points in a familiar tool, or been emailed pages of modification requests.

81
00:09:15,217 --> 00:09:17,878
Communication over these points is very difficult.

82
00:09:18,418 --> 00:09:29,760
It takes a lot of thought to prioritize and flesh out each desire from a designer's brain into a programmer's brain and figure out how and when to make that a reality.

83
00:09:31,442 --> 00:09:38,205
Being able to skip this usually important step in tool development is the first advantage I had over a tools team.

84
00:09:41,686 --> 00:09:53,631
Even after that requirements communication was finished, design teams are constantly evolving their vision of the game and iterating on the intent behind the content they're creating.

85
00:09:54,639 --> 00:10:00,161
there will always be a lag communicating this evolving intent to a tools team.

86
00:10:00,962 --> 00:10:07,764
And deciding how to match tools maintenance work to this evolution is one of the hardest problems in software development.

87
00:10:09,505 --> 00:10:18,469
As a game designer, being completely tapped into the evolving context of where our game is headed is my second advantage over a tools team.

88
00:10:24,383 --> 00:10:30,845
There is also an inescapable difference in how content creators are tasked and how a tools team is tasked.

89
00:10:32,085 --> 00:10:41,788
Tools teams, by their nature, move slowly because they require approval, scheduling, and strong justification for their direction.

90
00:10:43,429 --> 00:10:47,810
In every studio, there are many competing desires for tools work.

91
00:10:48,717 --> 00:10:50,197
coming from every discipline.

92
00:10:50,658 --> 00:10:54,459
I've even seen tools requests coming from other tools engineers.

93
00:10:57,099 --> 00:11:01,320
The production process for this represents a very significant overhead.

94
00:11:01,781 --> 00:11:06,802
And no matter how many Agile trainings I do, I've not found a way to make that overhead go away.

95
00:11:08,462 --> 00:11:13,444
But the expectation for content creators is that by the time the game ships,

96
00:11:14,332 --> 00:11:16,513
they will produce a certain amount of content.

97
00:11:17,133 --> 00:11:32,280
Whether it's a hundred quests a season, five new skins each milestone, two levels a month, there's no oversight, approval, or objection when a content creator spends one hour working on something that will save them two hours creating content.

98
00:11:33,567 --> 00:11:46,575
VFX libraries, shared textures, reusable blueprint libraries, and kitbash sets are all examples of workflow optimizations that did not require approval or scheduling.

99
00:11:48,396 --> 00:11:54,240
Being able to avoid the overhead of team scheduling is the third advantage I had over a tools team.

100
00:11:57,042 --> 00:12:03,365
The unfortunate reality is that content creators are always in a state of being held back by tools development.

101
00:12:04,486 --> 00:12:17,753
The more advantages we can use to decouple content creator workflows from needing tools engineering support, the more fun, engaging, beautiful, lovable game they'll be able to create.

102
00:12:19,554 --> 00:12:20,575
It's for that reason

103
00:12:21,516 --> 00:12:29,100
that we as tools leaders need to find ways to utilize the advantages that game designers have in creating their own tools.

104
00:12:30,400 --> 00:12:36,823
That's why a desire to capitalize on those advantages is the first important belief I want you to take from my talk.

105
00:12:38,984 --> 00:12:46,028
If we find ways to capitalize on those advantages, our jobs will be much easier and our games will be much better.

106
00:12:47,605 --> 00:12:56,331
You might be thinking, okay, that's great, Eric, but we've seen that spreadsheet quest editor that some systems designers built, and that's just part of the problem.

107
00:12:59,333 --> 00:13:08,339
But I think we should understand insufficient tools, like the quest editor spreadsheet, as a product of designers that are not empowered to create their own tools.

108
00:13:09,140 --> 00:13:15,024
A few clever designers scratched together the best thing they could, given the limited resources they had.

109
00:13:16,340 --> 00:13:19,523
They had Excel, and so they made an editor in Excel.

110
00:13:25,270 --> 00:13:32,738
Today, let's contrast that with some of the results that highly empowered designers can make in Unreal.

111
00:13:34,994 --> 00:13:48,813
During my time on the Fortnite quest design team, after I made quests for four months, I switched gears to focusing primarily on creating a quest editor that addressed the most important aspects of the quest design workflow.

112
00:13:50,820 --> 00:13:57,987
We knew the tools team wouldn't be able to create a quest editor from scratch fast enough to resolve our crisis in that moment.

113
00:13:58,827 --> 00:14:12,201
But a friend of a friend in the tech design department, Bryce Lumpkin, told us we should take a look at Editor Utility Widgets, which turned out to be the most effective designer tools empowerment I have ever encountered.

114
00:14:14,557 --> 00:14:19,578
Unreal has a pretty robust UI tool called UMG, or Unreal Motion Graphics.

115
00:14:20,099 --> 00:14:24,880
Pretty much every game in Unreal uses UMG to create their in-game UI.

116
00:14:25,500 --> 00:14:29,241
So it's a very robust system that many people know how to use.

117
00:14:29,961 --> 00:14:34,783
It's a WYSIWYG editor, so UI designers are often building the UI themselves.

118
00:14:35,143 --> 00:14:41,525
And fairly non-technical people can make really valuable contributions without support from engineers.

119
00:14:42,509 --> 00:14:54,258
Behind every UMG widget, there's a fully functional blueprint graph, which allows designers to write UI behavior using the same blueprints they use to make the rest of the game.

120
00:14:55,879 --> 00:15:07,287
Editor utility widgets are actually built on top of UMG, with the key difference that they aren't UI that runs in the game, they're actually UI that runs in the editor.

121
00:15:08,108 --> 00:15:08,968
When I heard this,

122
00:15:10,320 --> 00:15:13,101
I was blown away.

123
00:15:14,542 --> 00:15:21,245
I've made UI in UMG, so adoption of editor utility widgets was almost instant for me.

124
00:15:21,965 --> 00:15:30,208
I needed to learn a few lessons about asset manipulation and some of the editor paradigms around CDOs and asset metadata.

125
00:15:30,908 --> 00:15:34,610
But that was basically API memorization I did along the way.

126
00:15:36,974 --> 00:15:56,933
With UMG, Epic has leveraged a well-developed, excellently documented, robust tool, which many people are already trained on, to create rapid, easy-to-use frameworks that designers and other non-technical people can immediately begin to use creative tools.

127
00:15:58,812 --> 00:16:05,418
Anyone who can create UI in Unreal has the skills to create powerful asset editing and management tools.

128
00:16:06,018 --> 00:16:15,987
That means UI designers, technical designers, indie devs, and honestly, anybody who can use Game Dev YouTube can begin making tools.

129
00:16:17,829 --> 00:16:24,475
Without hiring a single tools engineer, these people can solve tools inefficiencies in their own workflows.

130
00:16:26,351 --> 00:16:34,714
In three months of less than full-time work, two people went from this to this.

131
00:16:36,595 --> 00:16:44,397
Our new quest editor took a quest from six pages of tightly packed properties to about two pages.

132
00:16:46,058 --> 00:16:51,300
Not only was it shorter, but it's also organized in a much more user-friendly way.

133
00:16:52,256 --> 00:17:00,783
Moreover, most of this space is used by convenience features that allow designers to make quests with less effort than before.

134
00:17:01,804 --> 00:17:06,588
Things that the previous layout didn't do at all.

135
00:17:08,670 --> 00:17:15,156
Let's dig in to how we made the quick jump into a tool that exceeded quest designers' imaginations.

136
00:17:18,502 --> 00:17:23,703
Earlier we talked about four dangers that I could clearly see from my work as a content creator.

137
00:17:24,563 --> 00:17:29,804
We addressed each one of those four with a solve that was fairly simple in Editor Utility Widgets.

138
00:17:31,645 --> 00:17:36,986
In our new workflow, a quest designer first selects what kind of quest they're making.

139
00:17:37,626 --> 00:17:42,007
A daily, weekly, store, narrative, or bespoke quest.

140
00:17:43,322 --> 00:17:49,446
With that information, we instantiated a different UI with a different set of properties filtered out.

141
00:17:50,527 --> 00:17:52,669
Store quests never expire.

142
00:17:54,850 --> 00:17:58,553
So all the calendar and removal properties are always blank.

143
00:17:59,774 --> 00:18:03,176
The store quest editor just doesn't show those properties at all.

144
00:18:03,917 --> 00:18:11,242
Just getting rid of irrelevant properties like this, honestly, might have hidden half of all prep properties for every quest.

145
00:18:13,075 --> 00:18:26,426
Similarly, it was easy to use a few blueprint string operations to generate the values of properties that must follow a specific schema to be correct.

146
00:18:27,567 --> 00:18:34,273
Like the server backend name, which was just a combination of the release number, the quest name, and objective index.

147
00:18:35,454 --> 00:18:41,739
And on the rare occasion that that schema changes, like when design creates a whole new category of quests,

148
00:18:42,622 --> 00:18:49,608
designed to be completely capable of updating the blueprints that generate new values across all quests.

149
00:18:50,810 --> 00:18:54,633
So we can hide those properties from day-to-day work in the editor as well.

150
00:18:56,014 --> 00:19:01,399
This didn't save as much work as the other areas, but boy did it prevent a lot of bugs.

151
00:19:01,960 --> 00:19:06,304
It might have been a bigger gift to our server engineers than it was to our designers.

152
00:19:09,721 --> 00:19:13,742
To solve the last two dangers, we needed something slightly more complex.

153
00:19:14,502 --> 00:19:15,963
Let's look at a specific example.

154
00:19:17,303 --> 00:19:23,545
We knew that daily quests will only ever reward a seasonal daily quest token and XP.

155
00:19:24,665 --> 00:19:29,206
So we didn't want to expose any of the reward properties in the daily quest editor.

156
00:19:29,866 --> 00:19:33,187
That's like five properties right there that we don't need to show.

157
00:19:34,790 --> 00:19:38,693
But XP values that are rewarded are constantly being tuned.

158
00:19:39,353 --> 00:19:42,135
And seasonal tokens cycle out every three months.

159
00:19:42,896 --> 00:19:46,799
So we couldn't just build that straight into the auto generation that the tool does.

160
00:19:47,559 --> 00:19:52,583
We needed a template system that designers could very easily modify for each release.

161
00:19:53,524 --> 00:20:00,369
In our workflow, after picking the type of quest in the quest editor, you picked a quest template.

162
00:20:02,247 --> 00:20:11,509
Quest designers could edit that template themselves, and the values in that template were copied over to each quest when the editor was open.

163
00:20:12,350 --> 00:20:18,491
Instead of maintaining some kind of template asset, we actually used a quest itself for the templates.

164
00:20:19,251 --> 00:20:25,153
A quest designer can edit the quest template directly using the exact same methods they use to edit any quest.

165
00:20:28,254 --> 00:20:31,016
This also allowed for very fine-grained control.

166
00:20:31,676 --> 00:20:39,780
My Naruto quests were weekly quests, but they also rewarded a special ninja event token that tracked event participation.

167
00:20:40,541 --> 00:20:47,165
I just created a Naruto template by copying the weekly template and added a ninja event token to the rewards.

168
00:20:47,965 --> 00:20:53,088
Then that bit of extra work was done automatically for me in every quest I created.

169
00:20:55,029 --> 00:20:58,610
Quest templates also solve the incompatible configurations problem.

170
00:20:59,290 --> 00:21:05,912
As long as the templates had the right set of options picked, all our resulting quests had them selected as well.

171
00:21:06,532 --> 00:21:10,033
And quest designers didn't need to worry about which needed to be set.

172
00:21:12,194 --> 00:21:20,516
When the quest editors had more or less settled into their final form, another quest designer, Greg Metzler, took a visual design pass on them.

173
00:21:22,881 --> 00:21:27,386
The fruit of his work is obvious in readability and general ease of use.

174
00:21:28,127 --> 00:21:40,542
Greg has a lot of experience as a UI designer in Unreal, so he was able to make all of his changes directly in the tool and check them in the same day because of his familiarity with UMG.

175
00:21:42,321 --> 00:21:45,222
It didn't require mockups or translation to XAML.

176
00:21:45,823 --> 00:21:49,284
He just put his existing skills to use between branch locks.

177
00:21:49,685 --> 00:21:54,447
And this amazing improvement came about with no impact on our dev schedule.

178
00:22:05,626 --> 00:22:23,437
The second important belief I want you to take away from my talk is that tooling frameworks that rapidly create tools using familiar content systems, which are already maintained by the gameplay and engine teams, can solve big problems for small costs.

179
00:22:25,879 --> 00:22:27,660
This was not the end of our work either.

180
00:22:28,561 --> 00:22:38,726
The Quest editors were our flagship tools, but we created a bunch of messy, hacky, smaller tools really quickly to solve lower value problems.

181
00:22:39,227 --> 00:22:49,712
Bulk importers, seasonal update tools, specialized string replacement, and migration tools came from start to finish in a single day and saved a few days of work.

182
00:22:51,189 --> 00:22:54,932
These small, ugly tools bred more designer-created tools.

183
00:22:55,653 --> 00:23:07,863
One of our quest designers, Raf Koonin, made an entirely new daily quest bulk updater on his own by copy-pasting an existing bulk updater tool that I had authored.

184
00:23:08,743 --> 00:23:15,229
And today, other people are using his quick fix and thinking of making their own tools for other problems.

185
00:23:16,158 --> 00:23:24,965
These tools are cheap, require almost no maintenance because of their reliance on game systems, and pay for themselves almost every time they're used.

186
00:23:26,556 --> 00:23:37,383
At this point in my talk, I was going to say, there are probably low-cost editor utility widgets solving small problems at Epic that no tools engine even knows about.

187
00:23:38,244 --> 00:23:46,309
But after my talk was written, somebody heard about a problem I was working on, and they forwarded me an editor utility widget.

188
00:23:46,630 --> 00:23:51,013
And they said I could quickly copy and modify this into a tool that addressed my problem.

189
00:23:51,840 --> 00:23:58,565
When I saw it, it turned out to be a modification of a tool that I had built months prior.

190
00:23:59,866 --> 00:24:02,729
It was like tools karma coming back around to help me.

191
00:24:04,530 --> 00:24:08,533
All right, I've been talking for about 20 minutes, so it's time to go on a quest.

192
00:24:09,654 --> 00:24:20,163
I want you to think about a problem at your studios that wastes content creator time, but is probably small enough that it will never get on a tools engineer's plate to solve.

193
00:24:21,078 --> 00:24:26,799
If you're an engineer, find someone who has one of these tiny problems and have them describe it to you.

194
00:24:27,119 --> 00:24:28,399
You have about five minutes to do this.

195
00:24:30,520 --> 00:24:31,880
You can talk to each other.

196
00:24:35,861 --> 00:24:37,821
Yeah, okay, all right, quest complete.

197
00:24:39,941 --> 00:24:48,083
The point of my talk is not about quest designers or any kind of designer going off and building tools on their own.

198
00:24:49,394 --> 00:24:57,940
The point of my talk is about engineers empowering designers to build great tools with lightweight support.

199
00:24:59,461 --> 00:25:08,748
Throughout the Quest editor process, I had a lot of empowerment from folks in other disciplines in order to make these improvements happen.

200
00:25:10,209 --> 00:25:16,574
They are great examples of how a studio can empower content creators to build their own tools.

201
00:25:18,547 --> 00:25:25,454
Chief among them was the support that I got from Jay Nakai, a generalist programmer on the Quest team.

202
00:25:26,895 --> 00:25:40,869
As I came to understand the complexity of Quest setup, Jay cleaned it up at the source and made sure that the editor utility widgets had access to the native types that Quest used in their definitions.

203
00:25:41,778 --> 00:25:50,401
I also had endless questions defining the space of what was possible, what was valid, and what half of these things even did.

204
00:25:51,621 --> 00:26:06,366
Beyond Quest systems, Jay empowered me with improved editor utility widget filtering and drove many of the improvements to the underlying editor utility tech that's been available to the public since UE 5.1.

205
00:26:09,056 --> 00:26:19,739
Because these tools are at their core UMG widgets, they naturally have access to the robust asset ecosystem that underlies all Unreal games.

206
00:26:20,560 --> 00:26:29,542
We easily used Quest assets as templates for other Quest assets, and those templates never got out of date or required their own upkeep.

207
00:26:30,663 --> 00:26:38,085
But we also leveraged other data types that designers were familiar with to help them maintain their own tools' features.

208
00:26:39,537 --> 00:26:45,363
You might have noticed these buttons that allow quest designers to easily fill in complex tag sets.

209
00:26:46,163 --> 00:26:55,853
These tag sets evolve as fast as Fortnite does, and it's the designers themselves who are making the decisions about how they should change and when.

210
00:26:57,635 --> 00:27:01,899
These buttons are actually populated by a standard Unreal data table.

211
00:27:03,735 --> 00:27:10,262
Designers are already familiar with working with these data tables, and each row of the table becomes its own button.

212
00:27:10,902 --> 00:27:17,109
Quest designers can add their own buttons or update existing buttons just by editing that table.

213
00:27:18,752 --> 00:27:28,515
Documentation exists directly within the tool on how to do this, and designers can never leave the editor they're working in to make these instantaneous tool updates.

214
00:27:29,315 --> 00:27:37,118
Their changes can be checked in via their normal Perforce workflow, and they become the new canonical functionality instantly.

215
00:27:39,141 --> 00:27:50,244
Quest designers like Errol Hanham and Kyle Phillips make valuable contributions without ever changing an editor utility widget by updating and maintaining these data assets.

216
00:27:51,385 --> 00:27:56,586
Earlier, I mentioned Greg's awesome contribution to visual design as well.

217
00:27:57,407 --> 00:28:07,630
Artists and visual designers will surprise you with the ways they can support these efforts when they're excited about them and realize how easily they can contribute.

218
00:28:11,121 --> 00:28:17,146
Two of our UI engineers also made very significant improvements once the editors were stood up.

219
00:28:18,347 --> 00:28:26,753
Marshall Beachy used his deep familiarity with UMG design patterns to optimize the sustainability and performance of our editor.

220
00:28:27,834 --> 00:28:40,144
This was a larger engineering investment that was easy to justify once the Quest editor had become a core part of designer workflows and proved that it was going to be an enduring part of our process.

221
00:28:42,162 --> 00:28:49,545
Vlad Golovan made many of his own improvements and extended the underlying Quest technologies with the editor in mind.

222
00:28:50,925 --> 00:28:55,547
One example of that is the Quest map marker custom widget that he created.

223
00:28:56,448 --> 00:29:04,031
Adding map markers, tests, and specific objectives on those Quests has a lot of irreducible complexity in the data.

224
00:29:04,911 --> 00:29:09,573
Vlad used Slate and C++ to create a custom widget

225
00:29:10,748 --> 00:29:15,650
that essentially functions as a wizard to guide designers through the available choices.

226
00:29:16,550 --> 00:29:24,834
The custom widget can't be edited by designers, but it makes up for that by being highly specialized and efficient at this particular task.

227
00:29:25,814 --> 00:29:36,259
Our native map marker code has evolved over time, and the native widget has been able to hide those changes from designers, keeping their process the same.

228
00:29:39,824 --> 00:29:49,270
Vlad also added better support for native data type usability, so those data types function better everywhere they exist, including in editor utility widgets.

229
00:29:50,271 --> 00:30:01,518
One great example of that is how we expanded copy-paste for tag containers, so you can copy just a single tag out of a container instead of copying the entire contents of that container.

230
00:30:03,561 --> 00:30:16,187
He also did a much more complex copy and paste improvement, which allows designers to copy an entire quest event from out of our native quest debugger and paste directly into the quest editor.

231
00:30:16,687 --> 00:30:25,311
What this meant is designers are essentially copy pasting an event out of Fortnite into our authoring tools to create complex quests.

232
00:30:28,512 --> 00:30:31,254
All of these contributions empowered a small,

233
00:30:32,136 --> 00:30:39,402
efficient and focused team to nail a fantastic tool and immediately pay dividends to content creators.

234
00:30:40,443 --> 00:30:46,469
Our quest quality went up and the number of quests we could produce with the same team increased.

235
00:30:47,429 --> 00:30:51,433
We also subjectively improved the quality of life for our designers.

236
00:30:53,621 --> 00:31:04,208
Improving these tools and offloading some of the maintenance to quest designers also freed our quest engineers to focus more on technology and gameplay features.

237
00:31:05,309 --> 00:31:13,395
Now we're using a similar approach for tooling in areas adjacent to quest design, like battle pass creation and blueprint reviews.

238
00:31:25,046 --> 00:31:29,149
I think I copy pasted my notes some weird way, so I'm trying to get caught up.

239
00:31:32,531 --> 00:31:33,752
It's the slides that are wrong.

240
00:31:34,753 --> 00:31:38,135
And the results loudly announce the value of these methods.

241
00:31:38,696 --> 00:31:51,925
We dramatically increased our quest output numerically, drove quests to be one of the most praised aspects of Fortnite, and were able to refocus our design energy on creating new, deluxe native content.

242
00:31:53,510 --> 00:32:01,515
deluxe narrative content, because we had time to invent stronger and more unique approaches to motivating and rewarding players.

243
00:32:02,496 --> 00:32:15,644
Our ability to produce quests has gone up so much that we've actually been able to create so many quests that we experimented with expiring quests on a weekly instead of seasonal basis.

244
00:32:17,505 --> 00:32:18,346
Strategically,

245
00:32:19,380 --> 00:32:30,525
This space to evolve and experiment has helped us recognize the value of quests and the right way to deploy them in service to Epic's goal of building the metaverse.

246
00:32:31,445 --> 00:32:35,347
Today, I'm more excited than ever about the future of Fortnite.

247
00:32:38,717 --> 00:32:53,967
The third important belief I want you to take away from my talk is that by empowering designers with effective tool building frameworks, we can free our game teams to focus on new gameplay, better outcomes, and core technologies.

248
00:32:54,627 --> 00:32:59,891
That includes more complex tool initiatives that can't be built in those frameworks.

249
00:33:04,005 --> 00:33:12,447
The bright future of quests in Fortnite that I just described is a strong contrast to the crisis we were in two years ago.

250
00:33:13,767 --> 00:33:21,828
From my perspective, that contrast is in large part because of the principles and takeaways that I've been talking to you about today.

251
00:33:23,029 --> 00:33:23,849
So let's recap.

252
00:33:24,569 --> 00:33:29,530
Because hopefully some of these principles can cause a similar degree of change on your teams.

253
00:33:32,816 --> 00:33:44,324
The first important takeaway is that doing hands-on game design work actually gives content creators a few advantages over a conventional tools team when it comes to optimizing workflows.

254
00:33:46,446 --> 00:33:52,991
Hands-on content creators, and game designers in particular, intuitively understand their own requirements.

255
00:33:53,611 --> 00:33:59,916
They have much deeper insight into the future and intent behind their designs, and they have open scheduling.

256
00:34:01,052 --> 00:34:08,557
Tools teams should empower game designers to use those advantages to create, maintain, and adapt their own tools.

257
00:34:09,458 --> 00:34:16,342
To empower them, we should invest in robust, designer-focused frameworks like editor utility widgets.

258
00:34:17,383 --> 00:34:24,228
And think about those aspects of the game editor as first-class citizens in our game's tooling ecosystem.

259
00:34:25,475 --> 00:34:41,461
The second important belief I want you to take away from my talk is that tooling frameworks that are powered by game content types and use familiar game systems have small costs but are still capable of solving big or small problems.

260
00:34:43,732 --> 00:35:00,477
Hopefully, by going into some of the expedient choices the Fortnite team made to leverage existing assets in the creation of asset editing tools, helps you to see some of the ways that these close-to-the-content tooling frameworks can help your team make the same efficiency gains.

261
00:35:02,605 --> 00:35:15,596
The third important takeaway is that by empowering designers with effective tool building frameworks, we can free our engineering teams from overhead and maintenance to end up with superior tech solutions instead.

262
00:35:21,280 --> 00:35:23,202
So here are a few practical action items.

263
00:35:24,403 --> 00:35:33,487
If you use Unreal, invest in training your tech designers, tech artists, and tools teams on how to build and support editor utility widgets.

264
00:35:34,647 --> 00:35:47,152
Create tools that rely on familiar game asset types to dynamically and maintenance-free populate tools features, so content creators can expand the tool with their growing needs.

265
00:35:48,753 --> 00:35:51,233
And finally, whether or not you're using Unreal,

266
00:35:52,998 --> 00:36:02,672
prioritize developing and supporting frameworks that encourage content creators to make their own tools and help them adopt maintenance problems on their own.

267
00:36:03,994 --> 00:36:06,077
Thank you so much for attending my talk.

268
00:36:15,779 --> 00:36:22,663
This is my first time speaking at GDC, so please leave a review in the survey that they send out to you.

269
00:36:22,963 --> 00:36:25,004
That's how they decide whether to invite me back.

270
00:36:26,004 --> 00:36:30,767
And next we have some time for Q&A, so feel free to come up to either one of the microphones when you're ready.

271
00:36:33,702 --> 00:36:36,783
Someone asked me a question earlier, how are these checked?

272
00:36:37,503 --> 00:36:38,464
Do they have source control?

273
00:36:38,504 --> 00:36:39,204
Where do these things go?

274
00:36:39,364 --> 00:36:43,645
Editor utility widgets are actually an asset in Unreal.

275
00:36:43,705 --> 00:36:52,868
Just like a UMG widget that is open in the Editor, you can edit them and run them in real-time and check them into Perforce.

276
00:36:53,809 --> 00:36:54,769
Let's go here on the left.

277
00:36:56,089 --> 00:36:56,449
Hi, Eric.

278
00:36:56,829 --> 00:36:57,890
Thank you for your talk.

279
00:36:57,970 --> 00:37:08,836
It's really great to hear how, you know, the teams at Fortnite and at Epic are really, they seem very interdisciplinary, and there's a lot of, you talked a lot about mentioning your coworkers and how you've worked together with them.

280
00:37:09,676 --> 00:37:11,477
So, that's just really good to hear, just a comment.

281
00:37:12,097 --> 00:37:24,344
I would kind of like to pass your quest to us back on you and kind of hear a little bit about what's perhaps a process or another tool or something on your team that seems out of reach that, you know, you would love to change if it were possible.

282
00:37:25,404 --> 00:37:29,185
One thing that the question was, what is out of reach for our team?

283
00:37:29,605 --> 00:37:32,266
A lot of it for me is just sort of scheduling stuff.

284
00:37:32,426 --> 00:37:37,627
Like, I mean, I talked about how tools teams are limited in their scheduling, but that's reality for everybody.

285
00:37:37,767 --> 00:37:44,649
So there's a NPC creation problem right now where it just takes a lot of work to make NPCs.

286
00:37:44,749 --> 00:37:52,891
And I would love to build a tool that just spits out all the right data assets and like you check a few boxes, but it's just something I haven't gotten around to yet.

287
00:37:54,282 --> 00:38:08,613
Hey, so I really love the workflow and the process that you've described in this talk and I wondered if there's been any interest from any other game teams within Epic and have you thought much about can you transfer this between projects?

288
00:38:09,522 --> 00:38:13,423
Yeah, so almost all of Epic is working in the Fortnite project.

289
00:38:13,463 --> 00:38:17,004
If you're not working on, like, an engine or MetaHumans, you're in Fortnite.

290
00:38:17,404 --> 00:38:22,265
So, the tools we create just seem to kind of seep around to different people.

291
00:38:23,365 --> 00:38:25,666
I mentioned that tool that came back around to me.

292
00:38:26,026 --> 00:38:27,706
That was on the AI team.

293
00:38:27,766 --> 00:38:30,587
So, like, I didn't even know that they were working on that.

294
00:38:30,887 --> 00:38:36,408
It's just one of my customers had taken that tool and said, can you make something like this?

295
00:38:37,088 --> 00:38:40,189
And then they just started like pulling widgets out and building their own thing.

296
00:38:40,449 --> 00:38:43,830
So it definitely kind of flows naturally to other disciplines.

297
00:38:44,230 --> 00:38:52,772
But one of the strange things about Editor Utility Widgets is they've been around since I think 2018, but almost nobody knows what they exist or why.

298
00:38:53,312 --> 00:38:56,953
And so they haven't been adopted even at Epic very widely.

299
00:38:57,093 --> 00:39:02,395
And that was one of the reasons I wanted to do this talk was just to say like, hey, there's an amazing thing that you can do.

300
00:39:02,935 --> 00:39:04,595
All you have to do is just start using it.

301
00:39:05,396 --> 00:39:06,036
Let's go on the left.

302
00:39:06,076 --> 00:39:06,336
Thank you.

303
00:39:08,318 --> 00:39:10,280
Yeah, I got a real important question.

304
00:39:12,982 --> 00:39:14,263
Is Jay Nakai here?

305
00:39:14,503 --> 00:39:15,023
Where's Jay?

306
00:39:15,324 --> 00:39:17,445
Jay is in North Carolina.

307
00:39:19,427 --> 00:39:19,647
Sorry.

308
00:39:19,687 --> 00:39:23,910
He was going to be really embarrassed when I called him out to answer questions, so he just didn't come to the conference.

309
00:39:23,930 --> 00:39:24,631
All right, real question.

310
00:39:25,612 --> 00:39:33,077
How often did you guys run into problems where the editor functionality that you had wasn't enough to do what you wanted?

311
00:39:34,138 --> 00:39:34,458
Often.

312
00:39:35,379 --> 00:39:37,641
Jay was actually a big... What's that?

313
00:39:38,962 --> 00:39:44,449
Oh yeah, the question was, how many times did we end up with something Editor Utility Widgets couldn't do?

314
00:39:44,829 --> 00:39:45,830
And my answer is often.

315
00:39:46,832 --> 00:39:57,244
There were a lot of things where, like, so native data assets were a big thing for us, where, like, Blueprints just didn't have access to, like, a struct that I needed to be able to set.

316
00:39:57,885 --> 00:40:07,412
And the cool thing was I would ask Jay, like, hey, I just need this struct, and he, like, adds some metadata to it and make it read-only, and it was done.

317
00:40:07,572 --> 00:40:19,321
So there was a lot of times when Jay and I were on a Zoom call for, like, four hours in a row, and I'm building stuff in the editor utility widget and just, like, sending requests to him.

318
00:40:19,941 --> 00:40:29,945
immediately and then he's checking in and I'm syncing and we're ready to go and One of the great things is like you can edit the editor utility widget like instantly.

319
00:40:30,065 --> 00:40:43,851
It's like playing a blueprint It's like play an editor And so I would just move to something else and keep working and he checks in these native changes which for him you know, he's got to get through our like check-in gauntlet and make sure it compiles and

320
00:40:44,671 --> 00:40:51,453
I don't have to wait for any of that every time I edit, but those native changes do go through that slower process.

321
00:40:52,014 --> 00:40:55,355
So that's why it's really important to have people supporting this effort.

322
00:40:55,815 --> 00:41:03,658
Right now, and I think this is true of any tech stack at any point in time, it's not possible to just go do this on your own for a lot of stuff.

323
00:41:04,118 --> 00:41:09,820
You do need these quick five-minute changes, add a meta tag, make it read-only, something like that.

324
00:41:11,557 --> 00:41:12,117
Yeah, question.

325
00:41:12,957 --> 00:41:20,059
For some of your bigger tools, like Quest Designer, are you all putting those in their own plugins, or does that all just sort of live in a folder structure in your project?

326
00:41:20,779 --> 00:41:23,000
Man, I wish I had better advice about plugins.

327
00:41:23,880 --> 00:41:26,561
The question was, do they live in plugins?

328
00:41:26,641 --> 00:41:27,661
Where do these things go?

329
00:41:28,882 --> 00:41:35,983
Editor utility widgets as assets can kind of go anywhere, and we are figuring that out on Fortnite as part of a larger project.

330
00:41:36,063 --> 00:41:38,084
What is our strategy for plugins in Unreal?

331
00:41:39,425 --> 00:41:46,068
I think the answer is just use the architectural experience and wisdom you have to decide where these things go.

332
00:41:46,709 --> 00:41:55,754
I am starting to think a lot about how can I organize these in a way that they do not cook or ship, and we can make smart choices around that.

333
00:41:55,934 --> 00:41:58,435
But it is still very much a thing that I am figuring out.

334
00:41:58,515 --> 00:42:01,757
Plugins in Unreal are evolving every day.

335
00:42:03,553 --> 00:42:18,653
Hi, since you're using data assets to drive your quest system, did you ever consider taking any sort of approach where you would, at runtime, like reload your data assets instead of having to come out of Pi and going back in, sort of to speed your workflow up?

336
00:42:19,164 --> 00:42:24,987
Yeah, so the question was, have we considered using these data assets at runtime to kind of update our quests?

337
00:42:25,367 --> 00:42:31,770
And that's actually one of the things that I'm most excited about to be working on now is essentially authoring quests.

338
00:42:31,830 --> 00:42:40,974
We have a quest debugger, which essentially just says every single gameplay message that could be a quest objective just spews there constantly.

339
00:42:41,055 --> 00:42:42,115
And then you can filter that.

340
00:42:42,775 --> 00:42:45,977
And the model of quest authoring that I want to move towards

341
00:42:47,321 --> 00:42:57,489
is actually quest designers playing Fortnite and doing the thing they want players to do and then just grabbing that event and pasting in the editor and being done.

342
00:42:58,169 --> 00:43:01,472
And so we're actually like authoring those quests essentially at runtime.

343
00:43:01,992 --> 00:43:14,342
And I think the next step after that is putting those kind of runtime capabilities in players' hands in creative mode so they can author quests like running Fortnite without any of the editor tools.

344
00:43:15,754 --> 00:43:15,974
Hi there.

345
00:43:16,854 --> 00:43:19,975
I'm a programmer who loves the idea of designers making their own tools.

346
00:43:20,856 --> 00:43:25,857
But how do you prevent them from, you know, making the architectural mistakes, you know, programmers make early on?

347
00:43:26,757 --> 00:43:33,379
A lot of engineers ask me, like, well, I want better architectural skills in the tools from the beginning.

348
00:43:34,400 --> 00:43:35,380
And I think that

349
00:43:37,883 --> 00:43:44,189
A really smart person talked to me about how designers making essentially leaf tools, is what he called it, is fine.

350
00:43:44,369 --> 00:43:45,390
They can make messes.

351
00:43:46,831 --> 00:43:47,732
It doesn't really matter.

352
00:43:48,493 --> 00:44:01,585
But trunk tools, things that are really core to how tools in our game are built, are much better in the hands of people who are great programmers, people who are great at architecture.

353
00:44:02,285 --> 00:44:22,182
and some of the contributions, so we actually went through that transition where I had made a lot of Editor Utility Widgets and I'm kind of a special case because I studied software architecture in college but you can build a messy, ugly tool in Editor Utility Widgets and when it becomes an important tool like the Quest Editor did

354
00:44:23,086 --> 00:44:27,370
You go to somebody like Marshall Beachy and you say, we have a mess that works really well.

355
00:44:27,910 --> 00:44:29,371
Can you just make this not a mess?

356
00:44:30,032 --> 00:44:38,339
Some of our tools, actually, the Blueprint review tool was in Editor Utility Widgets.

357
00:44:38,819 --> 00:44:44,024
And then pretty much the day I released it, the engine team was like, that's really cool.

358
00:44:44,084 --> 00:44:44,644
We like that.

359
00:44:44,744 --> 00:44:46,326
We're going to start building it in Slate.

360
00:44:47,146 --> 00:44:49,927
I was like, I feel bad because I sort of wasted all my work.

361
00:44:49,967 --> 00:44:55,069
But at the other end of the spectrum, that was like the fastest accepted prototype that I have ever done.

362
00:44:56,010 --> 00:45:02,232
That actually ships in Unreal Engine 5.2, which is in preview right now, so you can see that tool.

363
00:45:03,173 --> 00:45:15,858
It allows you to look at a Swarm changelist, like a Swarm review or a Perforce changelist, paste that into the Asset tool, and then you get a list of all of the changes in that CL, and you can diff them right there.

364
00:45:16,198 --> 00:45:26,067
which was a huge speed up for us, and I don't know, maybe made a mess of the editor utility widget, but then a brilliant tools engineer made it into a slate widget.

365
00:45:26,827 --> 00:45:37,537
So I think the short answer is like, some editor utility widgets are better authored by engineers, people who are great at architecture and programming, but

366
00:45:38,598 --> 00:45:47,622
you shouldn't let that stop you because one of the strengths of doing it in this little walled garden of Editor Utility Widgets is you're never going to spill that mess out somewhere else.

367
00:45:49,642 --> 00:45:53,444
Hi, I work with Bryce Lumpkin, so I'm glad you mentioned him.

368
00:45:54,604 --> 00:45:58,206
And I'm also talking tomorrow about Editor Utility Widgets just across the hall.

369
00:45:59,006 --> 00:46:06,569
So I'd like to ask, what do you think are the biggest stumbling blocks for people coming new to Editor Utility Widgets?

370
00:46:08,186 --> 00:46:13,348
Oh, what are the biggest stumbling blocks to people coming new to editor utility widgets?

371
00:46:15,469 --> 00:46:32,435
I think, so one of the things that took me a really long time to learn was like, how to go from a class to the asset metadata and then to, so there's a concept in Unreal, which is a CDO, a class default object.

372
00:46:33,076 --> 00:46:36,117
And so you have like an asset living on disk and that,

373
00:46:36,897 --> 00:46:37,017
talk

374
00:46:59,634 --> 00:47:08,677
understanding how the asset system operates on assets because you've never done any of that in blueprints that you're familiar with or UI that you're familiar with.

375
00:47:09,157 --> 00:47:15,899
And so for me, like one of the tricks is the Python documentation is like auto-generated.

376
00:47:16,399 --> 00:47:24,882
And so you can go to Unreal's Python documentation and see every single function that the asset system has with really good descriptions.

377
00:47:25,462 --> 00:47:25,782
And then you,

378
00:47:26,522 --> 00:47:29,783
take that knowledge to the blueprint search thing and you just blah, blah, blah, blah.

379
00:47:29,903 --> 00:47:32,785
And you don't really know, like it's ugly and hard to lay out there.

380
00:47:32,865 --> 00:47:41,728
But if you start in Python, move to there, then you can have a much easier time understanding how asset manipulation works in Unreal.

381
00:47:42,429 --> 00:47:46,090
Which, like I said, if you're a designer, you've never even looked at before.

382
00:47:48,211 --> 00:47:49,151
I wanted to go back to the

383
00:47:51,260 --> 00:48:01,559
tools karma and the widget from the AI team that seems like a potential problem space of like with individual teams making their own tools that duplication and reinventing the wheel.

384
00:48:01,900 --> 00:48:03,523
Are you doing anything to solve around that?

385
00:48:05,721 --> 00:48:10,002
Is it a problem that tools are duplicated across other teams?

386
00:48:10,302 --> 00:48:12,103
I think mostly no.

387
00:48:12,543 --> 00:48:18,866
So Epic has a huge, there's a huge team on Fortnite, I don't know, more than a thousand people.

388
00:48:19,727 --> 00:48:25,129
And so we do have people like me and Bryce who are constantly building

389
00:48:26,533 --> 00:48:28,294
like underlying widget tools.

390
00:48:28,354 --> 00:48:30,695
So Bryce built a really great file selector.

391
00:48:30,795 --> 00:48:38,399
So when you need a path, you can say like, I want a content relative path or an absolute path or a relative path.

392
00:48:38,839 --> 00:48:50,085
And it's very important to maintain those as like, when I said it's important to see these tools as first-class citizens of your asset ecosystem, that's sort of what it means.

393
00:48:50,465 --> 00:48:55,268
Like you need a good file selector that meets those needs in your project.

394
00:48:56,688 --> 00:49:07,471
And if you're not doing that kind of stuff, yeah, you do end up with 500 different file selectors and they all suck but Replicating an individual tool across multiple teams.

395
00:49:07,971 --> 00:49:09,312
I think is fine.

396
00:49:09,432 --> 00:49:21,475
Like it's sort of messy but develop Like I don't know you made Month later, so Matter that much

397
00:49:29,273 --> 00:49:45,605
Solves that problem having good staff like tech designers and tech artists Resolves that quickly because they recognize the areas that are being used a lot We have a editor utility widget scripting channel in slack and that's sort of a nexus of where a lot of those decisions are being made

398
00:49:47,423 --> 00:49:53,347
Hi, I'm wondering how much the workload is for the designer to maintain the tool after it's created.

399
00:49:53,807 --> 00:50:05,075
So, for example, when you add new types of requests, maybe you need to update, and whether that would take too much of the designer's time, as opposed to putting them among the content creation, which they're probably more accustomed to.

400
00:50:05,555 --> 00:50:06,936
Yeah, that's a great question.

401
00:50:07,777 --> 00:50:12,180
They're asking, like, what is the maintenance of one of these tools?

402
00:50:13,257 --> 00:50:29,322
And I think that it's hard to describe that in a talk, but it is unbelievably low because so much of what powers these tools are gameplay systems that are already being maintained by like the gameplay engineers.

403
00:50:29,542 --> 00:50:37,965
And so the additional burden of like, how did I keep this tool working is like, oh, we needed a new button or we needed to move this stuff around.

404
00:50:38,325 --> 00:50:39,826
And it's much more about just like,

405
00:50:40,626 --> 00:50:43,030
It's sort of the initial cost of authoring it.

406
00:50:43,131 --> 00:50:46,336
Well, we have a new need for that tool, so we authored that again.

407
00:50:46,597 --> 00:50:53,108
There's very little upkeep on these tools because they are so close to systems that are already working in the engine.

408
00:50:55,133 --> 00:51:02,958
Quite a few of the things you mentioned, the downsides there, is something you could also solve with asset validation.

409
00:51:04,199 --> 00:51:12,305
And I think you can do that in Blueprints, and it stops you from saving the assets if there's a conflict, like mutually exclusive properties and stuff.

410
00:51:12,825 --> 00:51:19,669
Did you think about using asset validation instead, or start with that and then move on to editor utility widgets afterwards?

411
00:51:19,890 --> 00:51:21,831
Or what's your thoughts about using that?

412
00:51:22,324 --> 00:51:37,470
Yeah, so about asset validation in like pre-save asset validation, we have a really robust content validation system on Fortnite that does a whole lot of error checking beyond just like, is this asset in a valid state?

413
00:51:38,330 --> 00:51:41,052
We make sure that we can export it to our online servers.

414
00:51:41,092 --> 00:51:44,554
We make sure that it's not going to break the build later.

415
00:51:45,635 --> 00:51:56,122
And we did a lot of that hand in hand as we were figuring out what are the complexities of the Quest system and what are the invalid states.

416
00:51:56,442 --> 00:51:59,344
we were also adding those to our content check scripts.

417
00:52:00,185 --> 00:52:01,346
We have two steps of that.

418
00:52:01,486 --> 00:52:05,409
One is like at save time where it's like, hey, this is really broken, you shouldn't even save it.

419
00:52:05,809 --> 00:52:15,456
And then also at check-in time where it's like, hey, you know, maybe this was valid alone, but when we start looking at all the rest of the content, it doesn't work, like you're missing references or something.

420
00:52:16,417 --> 00:52:20,100
And so I think that was a really important step.

421
00:52:20,500 --> 00:52:22,702
The problem with that comes in with like,

422
00:52:23,547 --> 00:52:43,216
you know technically it is valid for content to be transient but not repeatable like we could imagine a time where that could happen so we don't want to like prevent you from saving it but like you you dig in put your fingers in the mud and set it that way if that's what you actually want so we don't offer that in the editor

423
00:52:44,155 --> 00:52:50,237
One important part of this whole process was like, you can still go in and edit that huge list of quest assets.

424
00:52:50,677 --> 00:52:56,878
And sometimes in our like prototyping phase, people will just go do that and it's fine and we'll update the editors later.

425
00:52:57,939 --> 00:53:07,121
But we didn't want to like rule out those valid but very uncommon cases with the content validation.

426
00:53:07,201 --> 00:53:10,102
But that was a big important part of our strategy in general.

427
00:53:12,203 --> 00:53:13,505
All right, so that's the last questions.

428
00:53:13,725 --> 00:53:15,167
I'm going to go over there.

429
00:53:15,267 --> 00:53:19,372
If you want to talk and have more of a personal conversation, you just turn right, go to the end of the hall.

430
00:53:19,472 --> 00:53:20,233
I'm going to hang out there.

431
00:53:20,693 --> 00:53:22,996
Again, thank you very much for coming to my talk.

432
00:53:23,276 --> 00:53:24,237
Please fill out the surveys.

