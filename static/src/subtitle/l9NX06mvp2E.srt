1
00:00:06,012 --> 00:00:14,023
All right, everyone. Can you guys hear me? All right. I apologize my voice is kind of out.

2
00:00:15,545 --> 00:00:18,489
Thank you very much for coming to creating the art of Abzu.

3
00:00:20,811 --> 00:00:24,892
I'm Matt Nava. You might have seen my work on these games. I was the art director on Flower

4
00:00:24,992 --> 00:00:31,213
and Journey. After Journey shipped, I started a new studio to create small games like that

5
00:00:31,353 --> 00:00:36,174
called Giant Squid. And our first project is called Abzu. And Abzu is this underwater

6
00:00:37,055 --> 00:00:43,116
adventure game where you kind of explore the ocean and there's a very vibrant world full of

7
00:00:43,196 --> 00:00:48,217
fish based on real life fish. And for those of you who haven't seen much of it, I have a

8
00:00:48,237 --> 00:00:50,538
little clip of it that should show you what it's like.

9
00:01:41,290 --> 00:01:45,054
So the game is actually very much inspired by my own experience with scuba diving.

10
00:01:45,094 --> 00:01:50,359
This is me on the right there and our lead engineer on the project, Brian Ballamut, after

11
00:01:50,660 --> 00:01:53,623
going on a scuba diving research trip.

12
00:01:54,364 --> 00:01:56,346
And the game uses Unreal Engine 4.

13
00:01:56,966 --> 00:01:57,967
It took three years to make.

14
00:01:58,768 --> 00:02:01,649
and we had 10 people working on it at the peak team size.

15
00:02:02,250 --> 00:02:03,731
We had no dedicated animator.

16
00:02:04,151 --> 00:02:07,352
And this was crazy because we have tons of characters

17
00:02:07,372 --> 00:02:08,393
in this game, tons of fish.

18
00:02:09,594 --> 00:02:12,315
So the underwater setting presented this technical

19
00:02:12,435 --> 00:02:14,876
art challenge that not a lot of games have to tackle.

20
00:02:15,737 --> 00:02:18,478
We had to do huge amounts of interactive fish.

21
00:02:19,159 --> 00:02:24,243
huge amounts of interactive kelp and we needed to have terrain that was really capable of

22
00:02:24,303 --> 00:02:29,567
supporting rapid iteration and we also needed to have art directable volumetric lighting and

23
00:02:29,627 --> 00:02:34,030
atmosphere. So I'm going to tell you a little bit about how we solved some of those problems.

24
00:02:34,451 --> 00:02:39,695
So the first one we had to do was fish and the game features over 200 species based on real

25
00:02:39,735 --> 00:02:44,499
species from around the world. At any one time there might be 10,000 fish swimming on screen.

26
00:02:46,781 --> 00:02:52,325
attempts that we did to create these fish was using skeletal rigs. This is kind of the

27
00:02:52,785 --> 00:02:58,910
typical way you do character animation. So this is a skeletal rig. You can kind of see

28
00:02:58,950 --> 00:03:02,833
that what's really nice about skeletal rigs is you have joints everywhere that allow you

29
00:03:02,853 --> 00:03:06,836
to control the character completely. You can open their mouth, you can do silly stuff like

30
00:03:06,856 --> 00:03:11,359
that. You can really make it do whatever you want. But the problem comes when you have

31
00:03:11,580 --> 00:03:15,623
lots and lots of characters because updating all those joints for all those fish.

32
00:03:17,208 --> 00:03:21,190
is really expensive. The other really cool thing you can do with joints is you can

33
00:03:21,270 --> 00:03:28,153
procedurally animate their spine to curl them along the path that they swim on. So you can

34
00:03:28,173 --> 00:03:34,396
see here the shark is using a skeletal rig and can curve as it swims. And that's a really,

35
00:03:34,576 --> 00:03:39,638
really important effect for swimming. So when you have lots of fish, each one of these

36
00:03:39,678 --> 00:03:43,420
characters needs to have an entire skeleton of joints, which is like 60 to 100 joints.

37
00:03:44,421 --> 00:03:47,645
and every frame you have to update all of those joints per fish. So instead of just having

38
00:03:48,746 --> 00:03:53,132
10,000 fish to update, you have 10,000 times 100 joints, which is crazy. So we had to

39
00:03:53,172 --> 00:03:58,238
figure out a different way to get the density that we wanted. And our answer to that was

40
00:03:58,859 --> 00:03:59,420
static mesh.

41
00:04:00,081 --> 00:04:05,167
instancing, which is a technique that's usually used for doing grass or other kinds of

42
00:04:05,227 --> 00:04:09,752
foliage on the ground. And we actually wrote our own variant of this kind of system for

43
00:04:09,853 --> 00:04:14,639
Abzu that allows us to pipe in a small amount of data per instance that allowed us to

44
00:04:14,739 --> 00:04:17,382
animate the fish, each one individually.

45
00:04:18,661 --> 00:04:23,422
but we didn't know how to make a static mesh animate because it doesn't have joints. It

46
00:04:23,462 --> 00:04:27,943
can't bend or anything like that. So we had to figure out how to do a swim cycle for the

47
00:04:27,984 --> 00:04:33,225
fish, a bite animation because the game features a full ecosystem where fish are eating each

48
00:04:33,265 --> 00:04:38,126
other. And we needed to be able to do that thing where it curls along its path. So I'm going

49
00:04:38,146 --> 00:04:42,407
to tell you how we figured out how to do that with static meshes. So the swim cycle, we

50
00:04:44,394 --> 00:04:47,357
used the vertex animation in the material of the fish.

51
00:04:48,358 --> 00:04:50,440
And what I found when I was animating this fish

52
00:04:50,640 --> 00:04:52,262
was that you, to create a swim cycle,

53
00:04:52,302 --> 00:04:53,964
you really need just a few basic components.

54
00:04:54,024 --> 00:04:56,806
A side-to-side translation, a yaw rotation,

55
00:04:57,487 --> 00:04:59,269
and some panning rotations along the spine.

56
00:05:00,710 --> 00:05:02,091
So I'll show you a little bit about how that works.

57
00:05:02,111 --> 00:05:05,031
So this is in Unreal, our swim shader.

58
00:05:05,951 --> 00:05:07,432
So this is a giant trevally fish.

59
00:05:08,152 --> 00:05:11,292
And in the material, we just animate the vertices.

60
00:05:11,332 --> 00:05:13,833
And here you can see we're just doing a side-to-side motion

61
00:05:13,853 --> 00:05:15,953
with a sine wave that's pulling all the vertices

62
00:05:17,434 --> 00:05:17,934
back and forth.

63
00:05:18,934 --> 00:05:23,035
And the next motion we do is a yaw rotation

64
00:05:23,135 --> 00:05:24,155
around the object's pivot.

65
00:05:25,115 --> 00:05:26,556
And you basically can see that

66
00:05:27,056 --> 00:05:28,176
it's just a very simple rotation.

67
00:05:29,688 --> 00:05:34,649
and then we have these kind of crazier rotations where we pan the rotation along the spine.

68
00:05:35,169 --> 00:05:43,051
So we get this kind of rolling thing and he looks really insane. So you have this roll and

69
00:05:43,071 --> 00:05:48,972
then we also have a panning yaw. And this one is really crazy, too, because you can

70
00:05:48,992 --> 00:05:54,053
actually see further down from the pivot point it distorts. So if you have a really long

71
00:05:54,073 --> 00:05:57,974
thing, this doesn't work. But for most of the fish in the game, it's fine. So when you add

72
00:05:57,994 --> 00:05:58,754
all of those together.

73
00:06:01,082 --> 00:06:05,604
with an offset between those curves, you get kind of a swimming motion. So here we bring in

74
00:06:05,644 --> 00:06:12,609
the side to side translation, add the rotation and then bring in the panning rotations for the

75
00:06:12,649 --> 00:06:18,512
roll. And also the yaw.

76
00:06:19,512 --> 00:06:22,734
So what you get is this kind of gooey swimming fish.

77
00:06:23,874 --> 00:06:26,975
So we did one trick which was to mask those panning rotations

78
00:06:27,015 --> 00:06:28,276
just to the back half of the fish.

79
00:06:28,296 --> 00:06:31,818
So here you can see, I'm just kind of dialing in this mask

80
00:06:32,578 --> 00:06:33,978
that just puts those on the tail end.

81
00:06:35,419 --> 00:06:40,540
look at it, all of a sudden you have a swim cycle that has no joints and is on a static

82
00:06:40,580 --> 00:06:44,901
mesh, which is really cool. And it looks just as good as a swim cycle you do with joints.

83
00:06:44,941 --> 00:06:48,482
And what's really neat is that you can control this all with one parameter. So you just have

84
00:06:48,642 --> 00:06:54,443
one speed variable that you have to pipe in. And we drive that with the acceleration of the

85
00:06:54,483 --> 00:07:00,045
fish in a simulation, not the velocity, which was a kind of important point. Because if you

86
00:07:00,085 --> 00:07:03,045
would drive it with acceleration, then you'll have these kind of

87
00:07:05,032 --> 00:07:08,072
flickers of the tail when he's accelerating and then he'll coast, which is very much more

88
00:07:08,112 --> 00:07:15,675
lifelike. So here's an action. This is a scene from the game with about, you can see in the

89
00:07:15,695 --> 00:07:21,296
corner there, I think it's about 11,000 fish or something. These are giant trevallies and

90
00:07:21,316 --> 00:07:24,677
they all are swimming with a unique timing of their swim cycle.

91
00:07:26,655 --> 00:07:31,357
at the same time. It's really because we figured out how to do this static mesh

92
00:07:31,377 --> 00:07:35,520
instancing system that we were able to do this many fish. When we tried to do this scene

93
00:07:35,860 --> 00:07:40,602
with skeleton fish, we only could get like 30 fish on the screen. So it's a huge difference.

94
00:07:44,232 --> 00:07:46,514
So the next thing we had to do was the bite animation.

95
00:07:46,534 --> 00:07:49,397
And this one's a little harder to do just with sine waves

96
00:07:49,457 --> 00:07:49,917
in a shader.

97
00:07:50,618 --> 00:07:54,481
So we ended up figuring out this method using blend shapes.

98
00:07:54,661 --> 00:07:56,063
And we use a sequence of blend shapes

99
00:07:56,563 --> 00:07:57,804
in order to make the fish bite.

100
00:07:58,545 --> 00:07:59,125
So here you can see.

101
00:08:00,827 --> 00:08:04,510
We just had two blend shapes, one that opens the mouth and one that extends the mouth forward.

102
00:08:04,891 --> 00:08:08,735
And when you play these in sequence, you open the mouth, and then you push it forward,

103
00:08:09,095 --> 00:08:14,621
then you close the mouth, and then you pull it back. You get this kind of squash and stretch bite animation.

104
00:08:14,661 --> 00:08:17,404
Here you can see it happening, being driven by some curves.

105
00:08:18,673 --> 00:08:23,334
and we add this kind of squash and stretch so when you zoom out you can really see that motion

106
00:08:23,354 --> 00:08:26,695
from far away because a lot of times in the game there's a lot of fish on screen and they're

107
00:08:27,195 --> 00:08:31,556
small on screen so you need to see it's very exaggerated biting. And we actually figured out a

108
00:08:31,596 --> 00:08:43,219
way to, oh here he is, in the game. Boom. He's a bad kuda man. So we figured out a way to

109
00:08:45,164 --> 00:08:47,164
use this blend shape sequence idea

110
00:08:47,384 --> 00:08:49,025
to do more complex animations.

111
00:08:49,065 --> 00:08:50,746
So this is a skeletal mesh of a crab,

112
00:08:51,786 --> 00:08:54,908
and we just have four poses for his legs,

113
00:08:54,948 --> 00:08:57,569
and we were able to do this really complex motion

114
00:08:59,390 --> 00:09:00,770
purely with blend shapes.

115
00:09:01,471 --> 00:09:04,592
And even this little pinching thing

116
00:09:04,632 --> 00:09:06,453
when the diver comes close to the crabs,

117
00:09:06,473 --> 00:09:07,133
they try and pinch you.

118
00:09:08,134 --> 00:09:08,594
Pretty silly.

119
00:09:09,514 --> 00:09:12,116
And we use this to do other things too, like,

120
00:09:13,561 --> 00:09:22,168
bird flight cycles. This one uses eight different poses. And it allowed us to do a lot of

121
00:09:22,249 --> 00:09:28,334
really detailed animation for things that really were small on screen. It's pretty cool.

122
00:09:28,894 --> 00:09:34,259
It's a really neat technique. And one thing that's kind of interesting is that to

123
00:09:34,319 --> 00:09:38,002
actually create those poses for the blend shapes, we created full skeletal rigs.

124
00:09:39,700 --> 00:09:45,244
just to create those poses. So we saved a ton of joints on these crabs that are tiny. They

125
00:09:45,464 --> 00:09:50,387
would have been 41 joints per crab. It's crazy. So big win. And the last thing we had to do to

126
00:09:50,447 --> 00:09:55,710
make these fish really seem real was to do a turning curl animation. So here we can see one

127
00:09:55,790 --> 00:09:59,532
of the sharks with the curls turned off. And you can see when they do tight turns, they spin

128
00:09:59,572 --> 00:10:03,374
around like a board. This is really exaggerated on the longer the fish is.

129
00:10:04,686 --> 00:10:07,767
and when they chase fish, they really do these twisty motions.

130
00:10:07,787 --> 00:10:09,467
So we had to figure out something to make them curl.

131
00:10:10,407 --> 00:10:14,068
And what we ended up doing was using blend space,

132
00:10:14,608 --> 00:10:16,508
a blend space of blend shapes, essentially.

133
00:10:17,668 --> 00:10:19,649
And you can see here, we pose the character

134
00:10:19,929 --> 00:10:21,949
in these four kind of curled poses

135
00:10:22,549 --> 00:10:25,010
with an in-between pose for each one that

136
00:10:25,030 --> 00:10:29,011
allowed us to have a kind of rotating interpolation

137
00:10:29,451 --> 00:10:30,471
as the blend shape.

138
00:10:31,852 --> 00:10:36,377
brought on to the character. And we had to write this ourselves into the engine as well. Here

139
00:10:36,397 --> 00:10:42,804
you can see in action. But there's a problem because it all works fine if you're perfectly

140
00:10:42,844 --> 00:10:46,529
aligned in these directions. The tail will bend. But if you try to do a 45 by combining two,

141
00:10:48,311 --> 00:10:49,872
So you go to the side and up,

142
00:10:49,993 --> 00:10:51,875
then the tail gets twice as long

143
00:10:51,915 --> 00:10:53,016
because blend shapes are additive.

144
00:10:53,497 --> 00:10:56,120
So we had to actually create a third blend shape

145
00:10:56,160 --> 00:10:57,642
that was a negative blend space,

146
00:10:58,062 --> 00:10:59,404
a blend shape that would pull it back.

147
00:10:59,724 --> 00:11:01,066
So when we did three at a time,

148
00:11:01,446 --> 00:11:02,548
that let us do 45 degree angles.

149
00:11:04,815 --> 00:11:06,817
And if you look just at that fixed blend shape,

150
00:11:06,857 --> 00:11:08,259
it's insane because it pulls the tail

151
00:11:08,319 --> 00:11:09,601
like the opposite direction.

152
00:11:10,862 --> 00:11:12,925
And it makes this really crazy looking shark.

153
00:11:12,945 --> 00:11:14,867
We had to actually create a script in Maya

154
00:11:14,887 --> 00:11:16,549
that would automatically generate that pose

155
00:11:16,569 --> 00:11:18,311
because we had no idea how to model that.

156
00:11:18,872 --> 00:11:23,197
And you can see, these were the corrective blend shapes

157
00:11:23,297 --> 00:11:23,938
for the 45 degree poses.

158
00:11:27,005 --> 00:11:32,628
So when you add that to the fish, you can see that he does this nice turn when he does a sharp

159
00:11:33,409 --> 00:11:42,834
turn there. He curls his body. This was really important for making them feel more fluid. So

160
00:11:42,874 --> 00:11:47,797
that's basically how we got a whole lot of fish to animate with some pretty high fidelity

161
00:11:47,837 --> 00:11:50,738
animation, much cheaper than with bones.

162
00:11:52,477 --> 00:11:58,742
The next thing we had to solve was doing kelp. Kelp is crazy because we thought we had a lot of

163
00:11:58,782 --> 00:12:05,187
fish, but there's way more kelp leaves. It's insane. We actually started with joints again

164
00:12:05,247 --> 00:12:12,972
because we didn't learn our lesson. But that quickly didn't work out. So we did a different

165
00:12:13,032 --> 00:12:18,456
one with static meshes. This is a video of an early build of Abzu with a very static kelp

166
00:12:18,496 --> 00:12:18,817
forest.

167
00:12:20,500 --> 00:12:23,182
We did this very simple kind of leaf push

168
00:12:23,683 --> 00:12:24,804
when he gets close to the diver,

169
00:12:26,666 --> 00:12:27,767
which isn't really ideal.

170
00:12:27,827 --> 00:12:29,309
It really doesn't capture what we saw

171
00:12:29,349 --> 00:12:30,310
when we actually went diving.

172
00:12:30,350 --> 00:12:33,993
This is very dynamic, kind of fluid motion on leaves

173
00:12:34,073 --> 00:12:35,735
being driven by tides and all this.

174
00:12:38,157 --> 00:12:42,198
So what we ended up doing was reusing the static mesh

175
00:12:42,338 --> 00:12:44,479
instancing system that we made for the fish to do these

176
00:12:44,519 --> 00:12:47,179
leaves, but instead of driving them with shaders, we drove

177
00:12:47,199 --> 00:12:50,240
them with very simple rope simulations and stuck them on

178
00:12:50,340 --> 00:12:51,741
long rope simulations for the stalks.

179
00:12:52,201 --> 00:12:54,682
So you can see here, by doing it that way, we were actually

180
00:12:54,742 --> 00:12:57,423
able to get them to collide, every single leaf to collide

181
00:12:57,443 --> 00:13:00,284
with the diver and a small subset of larger creatures,

182
00:13:00,304 --> 00:13:00,984
like this manta ray.

183
00:13:01,084 --> 00:13:03,084
You can see it pushing the kelp there.

184
00:13:05,109 --> 00:13:11,291
And you can see we actually have about 350,000 leaves in the scene,

185
00:13:11,411 --> 00:13:12,812
and this scene also has a ton of fish.

186
00:13:12,872 --> 00:13:16,353
So static mesh interesting is really cool.

187
00:13:18,794 --> 00:13:20,114
Next thing up was terrain.

188
00:13:20,514 --> 00:13:23,315
And the game, we really didn't know what the design of the game was

189
00:13:24,395 --> 00:13:25,116
as we were making it,

190
00:13:25,456 --> 00:13:28,017
and we had to figure out how big these levels were.

191
00:13:29,737 --> 00:13:31,518
And what I quickly learned was that

192
00:13:32,080 --> 00:13:36,761
the sculpting and painting paradigm for authoring landscapes is not really ideal for

193
00:13:36,801 --> 00:13:44,183
iteration. If you paint a landscape to make it be higher or lower, say you make a mountain

194
00:13:44,903 --> 00:13:48,244
and then you realize the mountain is too big or too small or needs to rotate or needs to

195
00:13:48,344 --> 00:13:52,085
translate in the world, it's really hard because you have to erase it and repaint it

196
00:13:52,125 --> 00:13:53,946
somewhere else. That's really slow.

197
00:13:54,864 --> 00:14:02,390
So what we wanted to do was keep using the move scale rotate paradigm that we use for moving

198
00:14:02,430 --> 00:14:06,232
and rotating things like rocks and other objects. And what we came up with was this idea

199
00:14:06,252 --> 00:14:12,857
of terrain height patches. So we created a library of static meshes that look like bits of a

200
00:14:12,897 --> 00:14:19,482
terrain. And then we just kind of bashed them together. And here's a little demonstration. So

201
00:14:19,502 --> 00:14:23,685
this is one of the static mesh height patches. And you can just duplicate it around and create

202
00:14:23,805 --> 00:14:23,825
a

203
00:14:25,230 --> 00:14:29,235
little terrain there and you can see their individual meshes but we have a tool that

204
00:14:29,255 --> 00:14:33,881
projects a height map onto them. And when you look at that wire frame, now it's a height

205
00:14:33,901 --> 00:14:39,509
map with LOD and everything like that. So what's really nice is that you can create a

206
00:14:41,102 --> 00:14:43,084
features of the landscape, duplicate them, rotate them,

207
00:14:43,404 --> 00:14:47,028
scale them, and really quickly build out your landscape

208
00:14:48,209 --> 00:14:50,211
using the same tools that you use to move

209
00:14:50,291 --> 00:14:51,372
every other object in the scene.

210
00:14:52,333 --> 00:14:54,776
So this really helped us create the landscapes quickly

211
00:14:55,256 --> 00:14:56,537
and change the design as we needed.

212
00:14:57,983 --> 00:15:02,084
And another benefit of this was because you're using the same tool to move your landscape

213
00:15:02,404 --> 00:15:07,225
and your objects, you can move them at the same time. So if I, for instance, have a rock

214
00:15:07,265 --> 00:15:13,886
here and I need to align the terrain with it, I can create high patches that align with that

215
00:15:13,947 --> 00:15:19,568
rock and then I can select all of those patches and the rock together and move them or

216
00:15:19,588 --> 00:15:20,788
duplicate them to.

217
00:15:24,258 --> 00:15:29,526
basically keep features and terrain tied together. And you don't ever have to switch to

218
00:15:29,566 --> 00:15:34,874
painting, which is actually, whenever you switch paradigms kind of in authoring, that's a

219
00:15:34,914 --> 00:15:39,802
very slow thing. It really slows down your process. So this was really a good optimization

220
00:15:39,842 --> 00:15:40,403
for our pipeline.

221
00:15:42,654 --> 00:15:44,895
Here you can see one of the levels in Abzu zoomed out.

222
00:15:45,296 --> 00:15:49,718
If I take away all of the rocks, you can see all the height patches that we used to make

223
00:15:49,918 --> 00:15:51,519
the floors for these areas.

224
00:15:52,019 --> 00:15:54,441
We used lots of them to create lots of little different height terrains.

225
00:15:55,983 --> 00:15:58,965
And we extended this idea of using the move scale rotate

226
00:15:59,445 --> 00:16:02,226
tools to painting the color on the terrain too.

227
00:16:03,066 --> 00:16:05,327
So we had this idea of stamps that would put down color

228
00:16:06,768 --> 00:16:08,369
and you could move them, rotate them as well.

229
00:16:08,629 --> 00:16:10,590
And we even had splines that would drop stamps,

230
00:16:10,630 --> 00:16:11,710
kind of like a Photoshop brush.

231
00:16:12,911 --> 00:16:14,671
And so what's really nice about that is you're not thinking

232
00:16:14,731 --> 00:16:17,413
about paint strokes anymore, you're thinking about features.

233
00:16:17,893 --> 00:16:21,274
And that really is a good distinction to make

234
00:16:21,294 --> 00:16:22,095
when you're creating levels.

235
00:16:23,594 --> 00:16:25,896
So the last thing here is the way we did our atmospherics.

236
00:16:26,356 --> 00:16:29,538
And we did a lot of tests with ray marching

237
00:16:29,578 --> 00:16:31,099
and volumetrics and all this sort of thing.

238
00:16:31,860 --> 00:16:34,341
What we found was that we ended up

239
00:16:34,561 --> 00:16:35,922
shipping simple linear fog.

240
00:16:36,483 --> 00:16:37,824
And the reason was this.

241
00:16:38,464 --> 00:16:43,748
was much easier to control. We just had a tuneable falloff curve for this fog. It looked

242
00:16:43,768 --> 00:16:49,792
something like this. We stored this curve volumetrically in the space. So in one room you

243
00:16:49,832 --> 00:16:56,196
might have a different falloff than another. What we did was we stored this kind of as the

244
00:16:56,696 --> 00:17:00,739
fog goes away from the camera, we stored this far distance number which is where the fog

245
00:17:01,139 --> 00:17:05,242
becomes completely opaque. And we stored a transition distance where we could set the

246
00:17:05,302 --> 00:17:06,963
fog transparency.

247
00:17:07,982 --> 00:17:12,808
And between those two distances, we created what we call the silhouette range, where we

248
00:17:12,848 --> 00:17:16,933
actually dim the lights in the level. We just had very simple directional and ambient

249
00:17:16,953 --> 00:17:21,218
lighting. And when you dim the lights there, it kind of creates this murky feeling. I'll

250
00:17:21,238 --> 00:17:25,424
show you here. So this is without dimming the lights, just a very simple linear fog.

251
00:17:26,865 --> 00:17:30,007
And you can see out in the distance it gets very kind of indistinguished.

252
00:17:30,347 --> 00:17:34,469
But when we dim the lights in that transition area, then you can start to see these murky

253
00:17:34,529 --> 00:17:38,011
silhouettes and it really sold the idea of being underwater.

254
00:17:38,952 --> 00:17:42,754
So you can see this is where the transition distance kind of starts and the silhouette

255
00:17:42,774 --> 00:17:44,175
range here is really.

256
00:17:45,357 --> 00:17:49,183
was really important because we could tune how wide that was and how far that was. And you

257
00:17:49,203 --> 00:17:54,072
could see basically further than the fog by seeing the silhouettes and still maintain this

258
00:17:54,272 --> 00:17:56,456
atmospheric kind of quality that makes it feel underwater.

259
00:17:57,878 --> 00:18:02,501
And the one thing that saved us, and really saved us designing this game, was creating

260
00:18:02,521 --> 00:18:03,761
these things we called portal cards.

261
00:18:05,122 --> 00:18:08,184
And we used these to highlight specific silhouettes in the game.

262
00:18:08,804 --> 00:18:09,865
And it's really a simple concept.

263
00:18:09,925 --> 00:18:12,707
It's just a card that you use.

264
00:18:12,927 --> 00:18:17,850
So this is an environment in the game that has a portal.

265
00:18:19,360 --> 00:18:23,242
tunnel that's kind of hard to see. So we drop in this portal card, which is essentially a plane

266
00:18:23,622 --> 00:18:26,624
that has a material on it that fades out when you get close to it,

267
00:18:27,164 --> 00:18:28,165
when the camera gets close to it.

268
00:18:28,985 --> 00:18:31,107
And we have some fall-off on it that we can control.

269
00:18:32,047 --> 00:18:33,308
And what we do is we

270
00:18:34,469 --> 00:18:37,190
scale these things to intersect with some of the level geometry.

271
00:18:37,270 --> 00:18:40,092
So, you can see we just cover this door with it.

272
00:18:42,047 --> 00:18:46,027
and the magic starts to happen when you start to tune this depth fade parameter which

273
00:18:46,207 --> 00:18:51,509
essentially fades out as it gets closer to objects in the scene depth. And what that does is it

274
00:18:51,549 --> 00:18:58,370
makes this fake fog effect that brightens an area and highlights a portal. So without it you

275
00:18:58,410 --> 00:19:02,271
can't even see the way to go forward. And when you turn it on you can actually see where

276
00:19:02,291 --> 00:19:04,451
you're going. So we actually use these to direct the player.

277
00:19:06,072 --> 00:19:11,753
And it was really important because that base volumetric fog get us so far, but we had to highlight specific areas

278
00:19:14,012 --> 00:19:20,197
So to take you really quickly through a scene as it was built up, we had this work mode

279
00:19:20,237 --> 00:19:25,281
lighting which let us just see the whole scene in an evenly lit lighting so we could actually

280
00:19:25,301 --> 00:19:25,901
see what we were doing.

281
00:19:26,221 --> 00:19:27,242
We could toggle that on and off.

282
00:19:28,003 --> 00:19:31,446
And the first thing we did was add volumetric ambient and directional light.

283
00:19:31,526 --> 00:19:35,529
So we have just a very simple directional light, an ambient light.

284
00:19:36,309 --> 00:19:41,193
without much going on. But we store their color and brightness individually in areas of the

285
00:19:41,233 --> 00:19:46,177
scene. So you can see that there's local contrast around the door in the distance. And then we

286
00:19:46,197 --> 00:19:52,121
also do the same thing with the fog, with the silhouette range to help us see deeper where we

287
00:19:52,161 --> 00:19:57,646
need to see, like that door in the distance as well as you can see further there. And then we

288
00:19:57,686 --> 00:20:00,708
add portal cards to highlight ridges and things like this. So you can actually see here.

289
00:20:03,320 --> 00:20:08,721
this is where we place these cards. And finally we add light rays. And our light ray tech

290
00:20:09,242 --> 00:20:14,263
was essentially the same as our portal card tech. It was just automatically placed just very

291
00:20:14,303 --> 00:20:18,924
long, thin portal cards that would kind of animate scaling up and down. And that's how we

292
00:20:18,944 --> 00:20:27,466
did our lighting. So that's pretty much how we created the environments and fish in

293
00:20:27,546 --> 00:20:32,187
Abzu and how we solved some of the technical challenges that an underwater environment

294
00:20:33,293 --> 00:20:35,395
presents. Thank you very much.

295
00:20:47,787 --> 00:20:50,890
So I think there might be time for some questions if anyone has any,

296
00:20:51,431 --> 00:20:53,593
walk up to the mic and ask away.

297
00:20:54,714 --> 00:20:54,894
Hi.

298
00:20:57,462 --> 00:21:02,745
beautiful game. The one thing I didn't quite get is how the fog

299
00:21:02,985 --> 00:21:06,627
is volumetric in the sense that you can see that doorway in the

300
00:21:06,667 --> 00:21:09,748
distance. How do you poke a hole through the fog? So what's

301
00:21:09,768 --> 00:21:13,270
crazy is that every 8 by 8 meters we kind of have a

302
00:21:13,431 --> 00:21:19,214
volumetric voxel of fog. So it's pretty coarse data. But in that

303
00:21:19,434 --> 00:21:22,235
8 by 8 meters we store the color of the lighting and also the

304
00:21:22,356 --> 00:21:25,037
curve of the fall off. So, I'm not going to go into the details

305
00:21:26,237 --> 00:21:32,401
It doesn't accumulate over distance. It's not like a participating media simulation where we

306
00:21:32,462 --> 00:21:36,585
actually are accumulating. It's just a simple linear fall off. So even if something is way

307
00:21:36,645 --> 00:21:44,631
out far, if that has a curve that's pushed, it will show through. So it's like a lot more

308
00:21:44,671 --> 00:21:48,114
simple than it actually seems, actually. If that makes sense.

309
00:21:48,794 --> 00:21:50,416
Can I ask one more little question? Yeah, absolutely.

310
00:21:50,796 --> 00:21:52,577
If you could talk a little bit about the...

311
00:21:54,371 --> 00:21:59,276
the pathing and the flocking quality of the fish. Obviously I see how they animate it, but

312
00:21:59,476 --> 00:22:02,318
how do they animate as a group? How do they interact with the player?

313
00:22:02,378 --> 00:22:06,582
Yeah, that was a big challenge we had to figure out how to get the behavior to act right.

314
00:22:06,702 --> 00:22:11,446
And it was a big challenge that our lead engineer, Brian, the guy in the scuba suit,

315
00:22:12,047 --> 00:22:19,313
solved. And it was basically this amazing simulation of each fish had awareness of all the

316
00:22:19,333 --> 00:22:20,795
other fish and they're all kind of ‑‑

317
00:22:21,835 --> 00:22:26,877
not only segmented in space so that things that were fish that were near each other knew about

318
00:22:27,998 --> 00:22:33,400
close by fish but ignored further away fish but we also made sure that they were near each other

319
00:22:33,440 --> 00:22:37,702
in memory so that they could look up each other's position quickly. So we were constantly shifting

320
00:22:37,722 --> 00:22:42,364
the fish's position in memory depending on how close they were to other fish. And that let us

321
00:22:43,544 --> 00:22:46,886
have each fish be aware of a lot of fish around it and then

322
00:22:47,667 --> 00:22:52,932
them or chase them. And when you create a bunch of those kind of simple rules like just align

323
00:22:52,992 --> 00:22:58,077
or avoid and you add a whole bunch of these automaton fish into the scene, then those

324
00:22:58,437 --> 00:23:02,361
behaviors of spiraling fish just emerge. It's a really cool phenomenon and this is kind of

325
00:23:02,401 --> 00:23:07,987
how fish actually swim. So we studied a lot of actual fish behavior. That's phenomenal. Thank

326
00:23:08,007 --> 00:23:09,068
you. That's really cool. Thank you.

327
00:23:13,761 --> 00:23:17,966
I was just wondering if you attempted underwater caustics at all?

328
00:23:21,881 --> 00:23:24,142
there were caustics in the game, but it was totally fake.

329
00:23:24,563 --> 00:23:26,905
We were like, can we do really cool ray traced stuff?

330
00:23:26,945 --> 00:23:28,666
And they're like, no, that's crazy.

331
00:23:29,226 --> 00:23:30,768
What we used was a very simple,

332
00:23:31,388 --> 00:23:32,829
it's called the light function in Unreal,

333
00:23:32,889 --> 00:23:34,751
or kind of like a gobo effect, it's also known as.

334
00:23:35,611 --> 00:23:38,273
And it's just an animating texture

335
00:23:38,373 --> 00:23:42,136
with a couple of scrolling masks and that's it.

336
00:23:42,817 --> 00:23:43,537
Yeah, nothing crazy.

337
00:23:43,557 --> 00:23:45,119
That's what I wanted to hear, thanks.

338
00:23:45,319 --> 00:23:45,579
Thank you.

339
00:23:46,462 --> 00:23:50,484
I'm a big fan of your work and talking about in Journey,

340
00:23:50,504 --> 00:23:52,765
you had like a submarine scenario,

341
00:23:52,805 --> 00:23:54,405
even though there wasn't any water.

342
00:23:54,726 --> 00:23:56,747
So what was a different approach

343
00:23:56,787 --> 00:24:01,129
within that submarine scene in Journey and Apsu?

344
00:24:02,049 --> 00:24:03,910
Well, in Journey, the part you're talking about,

345
00:24:03,930 --> 00:24:07,632
we tried to get this idea of kind of an underwater environment,

346
00:24:07,752 --> 00:24:09,993
like this idea that there was life in the depths,

347
00:24:10,773 --> 00:24:13,235
but we weren't trying to figure out how to actually solve,

348
00:24:13,615 --> 00:24:14,395
you know, effects that were ...

349
00:24:15,172 --> 00:24:17,413
actually like what you see in the ocean.

350
00:24:18,134 --> 00:24:21,615
So Abzu was definitely kind of attempting to become,

351
00:24:22,296 --> 00:24:23,616
simulate more realistically,

352
00:24:23,856 --> 00:24:25,497
the effects that you see underwater.

353
00:24:25,677 --> 00:24:26,698
So it's a bit more of a,

354
00:24:27,378 --> 00:24:29,119
inspired by the truth of the ocean, I guess.

355
00:24:29,639 --> 00:24:30,099
All right, thanks.

356
00:24:30,119 --> 00:24:30,619
Thank you.

357
00:24:31,802 --> 00:24:32,082
Hi there.

358
00:24:32,382 --> 00:24:32,442
Hi.

359
00:24:32,462 --> 00:24:34,503
I was curious about some of your materials

360
00:24:34,683 --> 00:24:35,883
and if you guys tried to approach it

361
00:24:35,903 --> 00:24:38,904
without using textures or instead actually use

362
00:24:38,944 --> 00:24:41,605
textures on the fish, if that was a more efficient approach

363
00:24:41,625 --> 00:24:42,566
or what your thoughts were on that.

364
00:24:43,186 --> 00:24:46,027
Yeah, so the game had a ton of materials.

365
00:24:46,347 --> 00:24:50,429
And the idea was to create materials

366
00:24:50,469 --> 00:24:52,189
that didn't emphasize texture.

367
00:24:52,529 --> 00:24:55,250
So they used texture everywhere, but they're

368
00:24:55,270 --> 00:24:56,491
very subtle or low contrast.

369
00:24:56,631 --> 00:24:58,132
And we did a lot of work to make sure

370
00:24:58,172 --> 00:24:59,052
that the angular.

371
00:25:00,270 --> 00:25:02,551
kind of shapes of the geometry would really show through

372
00:25:03,271 --> 00:25:04,691
to give the unique style of the game.

373
00:25:06,112 --> 00:25:07,752
And we wanted to use that to kind of create

374
00:25:07,973 --> 00:25:08,813
more iconic fish.

375
00:25:10,353 --> 00:25:11,894
We were inspired by real fish,

376
00:25:12,494 --> 00:25:16,196
but we wanted to make sure that they really represented

377
00:25:16,476 --> 00:25:18,656
kind of everyone's idealized version of them

378
00:25:19,517 --> 00:25:20,457
so that they were more memorable.

379
00:25:21,177 --> 00:25:21,398
Thank you.

380
00:25:23,054 --> 00:25:23,594
Go ahead.

381
00:25:24,014 --> 00:25:24,154
Hi.

382
00:25:24,495 --> 00:25:26,015
You mentioned terrain stamps, using

383
00:25:26,035 --> 00:25:27,936
that to transition between different colors

384
00:25:27,996 --> 00:25:28,596
on your terrain.

385
00:25:29,216 --> 00:25:30,557
I did notice playing the game, there

386
00:25:30,577 --> 00:25:34,138
were some areas that had spots with very soft fall-offs.

387
00:25:34,458 --> 00:25:35,499
Was that using the same tech?

388
00:25:35,679 --> 00:25:38,500
Or was that using some sort of point light system?

389
00:25:38,900 --> 00:25:41,901
Yeah, so there were soft areas where we just

390
00:25:41,941 --> 00:25:44,922
had color that was affecting one material type.

391
00:25:45,403 --> 00:25:47,285
So that was kind of texturing that type,

392
00:25:47,305 --> 00:25:50,008
but then we had hard transitions between material types.

393
00:25:50,028 --> 00:25:52,751
So there was never a soft transition

394
00:25:52,771 --> 00:25:54,112
between say grass and sand,

395
00:25:54,533 --> 00:25:57,136
but within sand there might be a soft transition of color.

396
00:25:57,156 --> 00:25:59,218
So there might be blue sand that smoothly transitions

397
00:25:59,258 --> 00:26:00,740
to white sand or something like that.

398
00:26:01,721 --> 00:26:03,963
So I think we have time for one more question, I guess.

399
00:26:05,565 --> 00:26:06,266
Did you have a question?

400
00:26:06,286 --> 00:26:07,208
Thanks so much.

401
00:26:08,029 --> 00:26:10,693
I'm so surprised that there is no dedicated animator

402
00:26:10,793 --> 00:26:13,937
in your team, but I'm curious of the number of graphical

403
00:26:14,799 --> 00:26:17,022
artists, programmer, and game designers.

404
00:26:17,222 --> 00:26:17,443
Sure.

405
00:26:17,903 --> 00:26:20,066
So at our peak team size, we had 10 people.

406
00:26:22,089 --> 00:26:27,011
We had one environment artist who was helping build meshes and fish. I was also doing that. I

407
00:26:27,051 --> 00:26:33,034
did most of the animation. We had one animator contractor come on later in the development to

408
00:26:33,074 --> 00:26:39,096
help us finish it out. We have hired an animator now because we learned our lesson. So

409
00:26:39,136 --> 00:26:44,039
hopefully we won't be working so hard on that in the future. We have one amazing graphics

410
00:26:44,059 --> 00:26:50,401
engineer who did all of that lighting and stuff like that. Thank you. Cool. All right, guys,

411
00:26:50,421 --> 00:26:50,821
thank you so much.

