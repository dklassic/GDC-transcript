1
00:00:06,295 --> 00:00:10,440
My name is Max Kreminski. I am a PhD student at the Expressive Intelligence Studio at UC Santa Cruz.

2
00:00:11,021 --> 00:00:14,505
And today what I'm going to be talking about is procedural narrative design with parameterized storylets.

3
00:00:15,646 --> 00:00:19,771
So if you have done anything in game narrative before, you have probably seen a diagram that looks something like this.

4
00:00:20,812 --> 00:00:23,155
This is basically a branching narrative structure.

5
00:00:25,017 --> 00:00:25,957
if you know what this says already.

6
00:00:26,538 --> 00:00:27,799
This is from a specific blog post

7
00:00:27,899 --> 00:00:29,179
that sort of categorizes a whole bunch

8
00:00:29,199 --> 00:00:31,221
of different possible ways to do branching narrative in games.

9
00:00:31,781 --> 00:00:33,402
And what you can see here is that there's

10
00:00:33,422 --> 00:00:34,603
sort of all these different possible paths

11
00:00:34,643 --> 00:00:35,724
the player can take through the story.

12
00:00:36,004 --> 00:00:37,225
There's a whole bunch of like sort of different

13
00:00:37,245 --> 00:00:38,145
sort of routes you can take.

14
00:00:38,185 --> 00:00:39,466
There's branching points where you diverge

15
00:00:39,486 --> 00:00:40,547
and then sort of join back together

16
00:00:40,567 --> 00:00:42,048
at sort of later decision points.

17
00:00:43,108 --> 00:00:44,330
And there's a lot of good reasons that we see

18
00:00:44,370 --> 00:00:46,151
sort of these static overall sort of like

19
00:00:46,531 --> 00:00:48,093
predefined narrative structures in games.

20
00:00:48,934 --> 00:00:50,295
We see a lot of sort of familiarity

21
00:00:50,335 --> 00:00:51,316
as one of the big advantages here.

22
00:00:51,416 --> 00:00:52,917
So everyone sort of knows what this is,

23
00:00:52,957 --> 00:00:54,779
basically looking at it and sort of how to design

24
00:00:54,819 --> 00:00:56,500
something for it, even if it's only simple.

25
00:00:57,301 --> 00:00:58,582
There's also sort of cost reasons

26
00:00:58,662 --> 00:01:00,564
and sort of simplicity of implementation reasons

27
00:01:00,944 --> 00:01:03,026
where like it's really easy to sort of go in and say,

28
00:01:03,186 --> 00:01:04,347
okay, I know how to structure the code

29
00:01:04,387 --> 00:01:05,027
for something like this.

30
00:01:05,688 --> 00:01:07,890
And there's all sort of these preexisting tools like Twine,

31
00:01:08,270 --> 00:01:09,291
where you can sort of see that like,

32
00:01:09,451 --> 00:01:10,412
it's really easy to go in and write,

33
00:01:10,692 --> 00:01:12,574
sort of twine stories that are basically like

34
00:01:13,894 --> 00:01:15,716
taking this branching structure and reifying it

35
00:01:15,856 --> 00:01:16,896
and you can see how all the arrows

36
00:01:16,936 --> 00:01:17,697
are connecting all the nodes

37
00:01:17,737 --> 00:01:20,078
and it's sort of this overall graph of stories

38
00:01:20,098 --> 00:01:22,440
that's very easy to sort of look and see how it's structured.

39
00:01:23,741 --> 00:01:25,662
But what I'm interested in is sort of taking this graph

40
00:01:25,702 --> 00:01:26,803
and sort of blowing it to pieces

41
00:01:27,583 --> 00:01:29,565
and sort of fragmenting this huge sort of

42
00:01:29,625 --> 00:01:32,066
branching story graph and taking it into a sort of stage

43
00:01:32,086 --> 00:01:33,927
where players are more able to sort of

44
00:01:33,967 --> 00:01:35,608
shape the narrative structure on a fundamental level

45
00:01:35,688 --> 00:01:37,450
as opposed to sort of charting paths

46
00:01:37,470 --> 00:01:38,831
through this predefined narrative structure

47
00:01:38,851 --> 00:01:40,011
that the authors have set out for them.

48
00:01:40,872 --> 00:01:44,933
Especially I'm interested in this in the context of procedural narrative games, which are kind of all about this like

49
00:01:45,293 --> 00:01:50,514
ability to have the story vary significantly between playthroughs and in ways that are more fundamental than if you're just sort of stuck with this

50
00:01:50,534 --> 00:01:51,395
branching narrative structure.

51
00:01:52,195 --> 00:01:54,976
And for this to happen, what I found is that you sort of need two things.

52
00:01:55,016 --> 00:01:56,756
You need reorderable units of narrative content,

53
00:01:57,096 --> 00:02:01,437
and then you also need some mechanism for determining when it makes sense to use them. And when you put these two things together you

54
00:02:01,457 --> 00:02:02,498
get what I call storylets.

55
00:02:03,582 --> 00:02:08,084
So storylets are sort of, the term was coined in Fallen London, which is the game you can see on the right here.

56
00:02:08,745 --> 00:02:13,747
They sort of, as the designers of this game, decided to write their story content in sort of these tiny little modules,

57
00:02:14,167 --> 00:02:17,869
each of which has some preconditions on it that sort of dictate when you are or are not allowed to play through them.

58
00:02:18,529 --> 00:02:22,371
And in this case, most of the preconditions are sort of involving stats that are attached to your character.

59
00:02:22,671 --> 00:02:28,373
So if you have nightmares greater than four, you can play certain storylets, or if you're like over five or fifteen persuasive or something like that.

60
00:02:29,434 --> 00:02:31,895
And then similarly you have Reigns, which is a more recent game.

61
00:02:32,636 --> 00:02:39,401
And this is I think also a more well-known probably example where they sort of took the storylet metaphor for crafting stories and

62
00:02:39,701 --> 00:02:42,503
literally sort of took this deck of cards metaphor and smashed them into one another.

63
00:02:42,883 --> 00:02:48,067
So stories are cards or storylets are cards and you're sort of swiping left or right on requests that people bring you in order to

64
00:02:48,107 --> 00:02:50,709
sort of accept or reject those requests because you're the king and that's what kings do.

65
00:02:52,650 --> 00:02:55,731
So when you sort of look at the common elements of these two structures or these two games,

66
00:02:55,751 --> 00:02:58,393
you get sort of this common definition of storylets, which is basically that they're

67
00:02:58,713 --> 00:03:01,955
these self-contained, reorderable units of narrative content with sort of preconditions

68
00:03:01,975 --> 00:03:04,676
that dictate when you can show them to the player, and sort of maybe these effects

69
00:03:04,716 --> 00:03:09,179
that update the game state. So this approach works really great if your game state is pretty simple, right?

70
00:03:09,299 --> 00:03:12,600
So in Reigns you've got just these four sort of integer qualities or resources

71
00:03:12,921 --> 00:03:14,862
that represent your favor with the different factions in the kingdom,

72
00:03:14,882 --> 00:03:16,663
like the military, the church, the people, and so on.

73
00:03:17,643 --> 00:03:20,204
Or in StoryNexus, which is the engine that powers Fallen London,

74
00:03:20,464 --> 00:03:22,764
you've got this sort of bag of arbitrarily many integer qualities,

75
00:03:22,804 --> 00:03:25,025
which are the stats or the variables attached to your character.

76
00:03:25,785 --> 00:03:28,406
But if you want to sort of use this approach with more complicated game states,

77
00:03:28,846 --> 00:03:30,947
you need some way to get beyond these sort of flat preconditions,

78
00:03:30,987 --> 00:03:34,167
these sort of like, we're just checking whether an integer variable is within a certain threshold or not,

79
00:03:35,228 --> 00:03:39,449
and you need to sort of basically get to a way of expressing preconditions

80
00:03:39,469 --> 00:03:41,849
that allows you to sort of query arbitrarily complex game states.

81
00:03:42,810 --> 00:03:44,990
And so this gets to where Starfreighter comes in.

82
00:03:45,090 --> 00:03:46,371
Starfreighter is a game that I was working on

83
00:03:46,391 --> 00:03:47,411
towards the start of undergrad,

84
00:03:47,471 --> 00:03:48,651
or actually towards the end of undergrad,

85
00:03:48,671 --> 00:03:50,172
and it's sort of into the start of grad school.

86
00:03:50,812 --> 00:03:52,392
I've temporarily suspended development on it,

87
00:03:52,432 --> 00:03:53,113
but it looks like this,

88
00:03:53,213 --> 00:03:54,473
or the original prototype looked like this.

89
00:03:55,313 --> 00:03:56,473
And the goal here, as you can see,

90
00:03:56,513 --> 00:03:59,674
was probably to make a Reigns-like sort of game

91
00:03:59,874 --> 00:04:01,795
where the framing is that you're sort of a space captain

92
00:04:01,875 --> 00:04:03,836
of a tiny little freighter traveling from system to system

93
00:04:04,296 --> 00:04:05,756
and sort of taking on odd jobs

94
00:04:05,776 --> 00:04:07,236
in order to eke out an existence in space.

95
00:04:07,817 --> 00:04:10,358
What this gradually shifted towards being was a game about the relationships between

96
00:04:10,398 --> 00:04:12,599
a cast of quirky procedurally generated characters.

97
00:04:13,099 --> 00:04:16,901
So if you've seen Cowboy Bebop or Firefly or the implied off-screen life of Han Solo

98
00:04:16,921 --> 00:04:21,403
and Chewbacca in Star Wars, all these things are what I was trying to get at in the narrative

99
00:04:21,423 --> 00:04:22,143
design of this game.

100
00:04:23,244 --> 00:04:26,566
And for this to happen, for the procedural generation especially to come in, what I really

101
00:04:26,586 --> 00:04:29,727
needed was a way to write narrative content that wasn't tied to any one character in particular.

102
00:04:30,067 --> 00:04:33,189
but they could be applied whenever an appropriate situation happened to come up in the game state.

103
00:04:33,549 --> 00:04:35,650
So you can see that this is a much more complicated interface now.

104
00:04:35,890 --> 00:04:38,371
You've got these individual characters who have their sort of Proc Gen names.

105
00:04:38,971 --> 00:04:40,291
You've got this cargo in your cargo hold.

106
00:04:40,311 --> 00:04:42,932
You've got all these procedurally generated sort of star systems you can travel between.

107
00:04:43,433 --> 00:04:46,974
And what you really need now is to sort of like write content for generic situations like

108
00:04:47,294 --> 00:04:49,895
one crew member is irritating another, or sort of is mentoring another,

109
00:04:49,975 --> 00:04:50,956
or has fallen in love with another.

110
00:04:51,036 --> 00:04:54,157
All these sorts of like situations that you can imagine being narratively interesting

111
00:04:54,217 --> 00:04:57,178
without the characters themselves being like sort of defined ahead of time.

112
00:04:57,939 --> 00:04:58,999
And I already had the sort of simple

113
00:04:59,059 --> 00:05:00,840
reigns-like storylet system from the original game,

114
00:05:01,160 --> 00:05:02,221
but I had to sort of somehow hack it

115
00:05:02,241 --> 00:05:03,882
to support this kind of complicated game state,

116
00:05:03,922 --> 00:05:05,643
especially the sort of web of crew relationships

117
00:05:06,123 --> 00:05:07,483
and the parametrized narrative content

118
00:05:07,503 --> 00:05:08,424
that I wanted and had to write.

119
00:05:09,685 --> 00:05:10,565
And so I ended up with something

120
00:05:10,585 --> 00:05:11,646
that looks kind of like this.

121
00:05:11,946 --> 00:05:13,206
This is a parametrized storylet.

122
00:05:13,246 --> 00:05:14,227
It's a pretty simple one,

123
00:05:14,727 --> 00:05:16,208
which is maybe speaking to how much Boilerplate

124
00:05:16,228 --> 00:05:17,289
I end up writing all the time,

125
00:05:17,589 --> 00:05:18,509
that I consider this simple.

126
00:05:18,869 --> 00:05:20,951
But this is basically when two members of the crew

127
00:05:20,971 --> 00:05:21,551
are sort of like,

128
00:05:21,951 --> 00:05:23,452
when the crew overall is having a good time

129
00:05:23,472 --> 00:05:24,853
and two of them decide that basically

130
00:05:24,873 --> 00:05:26,313
they're getting along better now than they used to.

131
00:05:27,034 --> 00:05:31,075
So you can see that there's, in addition to this sort of static precondition, which is

132
00:05:31,115 --> 00:05:34,196
basically like checking to be sure that the crew have not been unfriendly to one another

133
00:05:34,237 --> 00:05:38,558
recently, we're also having this query part here where we're sort of binding these two

134
00:05:38,598 --> 00:05:39,359
logic variables.

135
00:05:39,399 --> 00:05:42,060
And what this means is basically we're looking for two characters in this case.

136
00:05:42,440 --> 00:05:43,600
who are not the same as one another,

137
00:05:43,640 --> 00:05:44,641
which is critically important.

138
00:05:45,942 --> 00:05:48,223
And we're sort of binding them to these two variables,

139
00:05:48,263 --> 00:05:49,103
crew one and crew two.

140
00:05:49,163 --> 00:05:50,504
And then we can sort of use these crew

141
00:05:50,524 --> 00:05:51,845
that we've bound to these variables,

142
00:05:51,945 --> 00:05:53,506
like later on in the body of the storylet.

143
00:05:53,986 --> 00:05:55,207
What we're doing is we're sort of querying

144
00:05:55,227 --> 00:05:55,947
against the game state,

145
00:05:56,007 --> 00:05:57,388
finding entities that match the preconditions

146
00:05:57,408 --> 00:05:57,968
we're looking for.

147
00:05:58,348 --> 00:05:59,369
And then we're sort of saying,

148
00:05:59,589 --> 00:06:01,430
for every storylet whose query is currently met,

149
00:06:01,730 --> 00:06:03,191
then we can show the storylet to the player.

150
00:06:03,371 --> 00:06:04,752
And we're sort of picking weighted randomly

151
00:06:04,772 --> 00:06:06,633
from among the possible pool of storylets that we've got.

152
00:06:08,395 --> 00:06:10,237
So this leads very naturally to an authoring pattern

153
00:06:10,257 --> 00:06:12,400
where some storylets have these super specific preconditions,

154
00:06:12,780 --> 00:06:13,762
like you maybe have storylets

155
00:06:13,782 --> 00:06:15,324
that have 10 or 12 preconditions among them,

156
00:06:15,824 --> 00:06:17,626
and these are very rarely met

157
00:06:17,666 --> 00:06:18,848
because of how complicated they are.

158
00:06:19,228 --> 00:06:20,109
But when they are met,

159
00:06:20,530 --> 00:06:22,152
it feels like it's sort of naturally written

160
00:06:22,232 --> 00:06:23,414
exactly for the current situation

161
00:06:23,434 --> 00:06:24,635
the player happens to find themselves in.

162
00:06:24,975 --> 00:06:26,856
And this leads to these sort of magical moments where it's like,

163
00:06:27,316 --> 00:06:29,137
oh, this is so specific to my condition,

164
00:06:29,177 --> 00:06:31,318
it's like there's no way that the author could possibly have foreseen

165
00:06:31,398 --> 00:06:34,379
this particular condition that I've gotten into, but we totally did.

166
00:06:35,719 --> 00:06:38,380
And so you get these specific bits of narrative for those situations.

167
00:06:38,540 --> 00:06:40,461
And then more often what you're writing is a whole bunch of sort of these

168
00:06:40,481 --> 00:06:43,622
generic fallback storylets with really lightweight sort of small,

169
00:06:43,682 --> 00:06:46,383
simple preconditions that are easy to fall back on,

170
00:06:46,423 --> 00:06:49,404
that sort of match a wide range of situations and that maybe have some more

171
00:06:49,444 --> 00:06:52,025
procedural textual variation to sort of disguise the fact that you're repeating

172
00:06:52,045 --> 00:06:53,246
the same things over and over again.

173
00:06:54,406 --> 00:06:57,827
And then you can see here that there's like this text template part where we're sort of like substituting in the names of the

174
00:06:57,847 --> 00:07:00,208
Crew into the sort of overall text that we show the player in the end

175
00:07:01,408 --> 00:07:06,670
Okay, so we get this definition of parametrized storylets that basically augments the initial definition of storylets with instead of preconditions

176
00:07:06,690 --> 00:07:10,931
We've got these roles where you can slot in a sort of appropriate entities like characters or cargo units or whatever

177
00:07:11,994 --> 00:07:14,096
Okay, I'm going to skim super briefly over disadvantages.

178
00:07:14,436 --> 00:07:16,078
You lose precise control over the narrative structure.

179
00:07:16,098 --> 00:07:18,760
This is kind of a thing that you know to be the point anyway.

180
00:07:19,441 --> 00:07:20,803
You have to handle the implementation right now.

181
00:07:20,843 --> 00:07:23,686
You can't just drop in a thing to Unity and say, give me parameterized storylets and it

182
00:07:23,726 --> 00:07:24,847
goes okay.

183
00:07:25,027 --> 00:07:25,848
Same for authoring tools.

184
00:07:25,868 --> 00:07:26,889
There's no Twine equivalent yet.

185
00:07:26,949 --> 00:07:27,569
I'm working on that.

186
00:07:28,230 --> 00:07:30,872
Debugging gets tricky, you have to write JSON a lot by hand,

187
00:07:31,353 --> 00:07:32,313
and so on and so forth.

188
00:07:32,854 --> 00:07:34,955
But I think it's super powerful as an approach anyway.

189
00:07:34,975 --> 00:07:36,517
It gives you the simple concrete alternative

190
00:07:36,537 --> 00:07:37,497
to static narrative structures.

191
00:07:37,818 --> 00:07:38,999
It's really powerful, really flexible.

192
00:07:39,039 --> 00:07:40,680
You can express lots of different ideas

193
00:07:40,720 --> 00:07:42,001
in terms of these queries that I've shown you.

194
00:07:42,461 --> 00:07:44,123
And there's sort of design patterns in games

195
00:07:44,143 --> 00:07:45,764
that are using these techniques starting to emerge.

196
00:07:46,084 --> 00:07:47,725
Like Cultist Simulator is a really great example

197
00:07:47,886 --> 00:07:50,428
that was recent, and I think you can start to see

198
00:07:50,448 --> 00:07:52,049
that there's more and more of this going forward.

199
00:07:53,330 --> 00:07:57,233
That's it. Thank you. This is my contact information if you want to contact me after this.

200
00:07:57,393 --> 00:08:01,857
I've also written a paper about this and Starfrighter, the current prototype, can be played on Itch.

201
00:08:02,558 --> 00:08:02,818
Thank you.

202
00:08:10,524 --> 00:08:10,944
APPLAUSE

203
00:08:10,964 --> 00:08:13,967
Hi, I'm Nicole He. I'm an artist and a programmer.

204
00:08:13,987 --> 00:08:15,829
APPLAUSE

205
00:08:15,849 --> 00:08:16,189
Thank you.

206
00:08:16,209 --> 00:08:19,171
I'm an artist and programmer from New York.

207
00:08:19,996 --> 00:08:22,719
I freelance as a creative technologist at Google Creative Lab.

208
00:08:23,299 --> 00:08:26,082
I teach at NYU's interactive telecommunications program.

209
00:08:26,703 --> 00:08:30,888
And I'm also currently working on an entirely voice-controlled sci-fi game with the National

210
00:08:30,928 --> 00:08:31,669
Film Board of Canada.

211
00:08:32,409 --> 00:08:37,475
So today I want to talk about some tools that I use for voice technology in art and games.

212
00:08:38,256 --> 00:08:38,716
But actually...

213
00:08:38,736 --> 00:08:38,817
Ahem.

214
00:08:40,547 --> 00:08:45,276
I mostly want to talk about appropriating technology that's meant to be used for serious

215
00:08:45,596 --> 00:08:47,720
business purposes to make creative things.

216
00:08:48,181 --> 00:08:52,288
Basically like you don't have to only use game making tools to make games.

217
00:08:53,260 --> 00:08:55,542
So as I said, I do a lot of stuff with voice technology,

218
00:08:56,202 --> 00:08:57,963
which is mostly about just like allowing,

219
00:08:58,263 --> 00:09:00,325
making things that allow people to yell at computers

220
00:09:00,345 --> 00:09:02,766
and then like making the computers yell back at them.

221
00:09:03,287 --> 00:09:06,268
So one example is a game I made called Enhance.computer,

222
00:09:07,069 --> 00:09:08,730
which is also the URL of the game.

223
00:09:09,691 --> 00:09:12,092
It's a cyberpunk voice controlled game

224
00:09:12,132 --> 00:09:14,213
that's an homage to that science fiction trope

225
00:09:14,233 --> 00:09:16,315
where people are like yelling enhance and zoom in

226
00:09:16,815 --> 00:09:19,697
and then like magical technology things happen.

227
00:09:20,337 --> 00:09:21,638
So this is the game that lets you do that.

228
00:09:24,363 --> 00:09:27,446
But the thing is, when you're developing things with voice technology,

229
00:09:28,387 --> 00:09:32,031
the thing is, like, a lot of, you know, these voice assistant devices

230
00:09:32,071 --> 00:09:35,355
are basically the way that most people talk to computers.

231
00:09:35,715 --> 00:09:41,562
And so most of the developer tools available are basically made entirely

232
00:09:41,622 --> 00:09:45,606
for these very rigidly controlled platforms owned by big companies.

233
00:09:46,627 --> 00:09:51,991
And another thing is that a lot of this technology is actually advancing very quickly, so like

234
00:09:52,031 --> 00:09:56,515
speech recognition, intent detection, speech synthesis, sentiment analysis, all these things

235
00:09:56,555 --> 00:09:58,396
that basically make up voice technology.

236
00:09:59,917 --> 00:10:05,041
There's a lot of advancement happening as voice assistants become more and more popular,

237
00:10:05,442 --> 00:10:10,325
but again, sort of the tools available to use those things, you know, naturally are

238
00:10:10,426 --> 00:10:13,788
used for things that make big companies a lot of money, and that usually comes out in

239
00:10:13,808 --> 00:10:15,530
the form of customer service chatbots.

240
00:10:15,830 --> 00:10:17,831
So like all this innovation and research

241
00:10:17,871 --> 00:10:21,574
is basically currently being funneled into customer service

242
00:10:21,594 --> 00:10:22,014
chatbots.

243
00:10:22,374 --> 00:10:24,095
And you can see this in the documentation

244
00:10:24,335 --> 00:10:25,156
of a lot of these tools.

245
00:10:25,536 --> 00:10:28,018
So this is actually one of my favorite tools to use.

246
00:10:28,038 --> 00:10:28,978
It's called Dialogflow.

247
00:10:29,779 --> 00:10:32,200
It's an NLP tool for conversational AI

248
00:10:32,241 --> 00:10:35,703
that helps you figure out the intent of what a person is

249
00:10:35,863 --> 00:10:37,744
saying without having to, like, say,

250
00:10:37,804 --> 00:10:39,565
manually hard code every possible way

251
00:10:39,605 --> 00:10:40,326
a person could say it.

252
00:10:40,746 --> 00:10:43,148
So this is used for enterprise and commercial purposes.

253
00:10:43,548 --> 00:10:44,969
And you can see that just from the way

254
00:10:44,989 --> 00:10:46,591
that they talk about it on this website.

255
00:10:47,331 --> 00:10:49,853
And the testimonies are from Domino's or KLM

256
00:10:50,073 --> 00:10:52,055
or companies like that.

257
00:10:53,096 --> 00:10:55,138
But it's also a really powerful tool for games.

258
00:10:55,258 --> 00:10:57,840
So I want to show you a couple examples of things

259
00:10:57,860 --> 00:10:59,922
that are basically not customer service chatbots

260
00:11:00,042 --> 00:11:03,805
that I made using this tool that was meant for that purpose.

261
00:11:04,285 --> 00:11:06,407
So one example is a really simple voice game

262
00:11:06,507 --> 00:11:10,090
called Mystery Animal for Kids, which is on the Google Assistant,

263
00:11:10,110 --> 00:11:11,531
but it's also available on the web.

264
00:11:11,912 --> 00:11:18,095
So it's like a reverse 20 questions style game where you have to ask the machine yes or no questions to like figure out what animal it is.

265
00:11:19,956 --> 00:11:30,662
And this is possible because Dialogflow makes it so that people can say things in a sort of like open ended way and then we can still figure out what they're saying and respond appropriately.

266
00:11:32,123 --> 00:11:36,846
So here, if you say, can I eat you for lunch? We figure out that they're asking if the animal's edible.

267
00:11:39,536 --> 00:11:43,379
So a project that I worked on with the 3D artist Iran Helleli

268
00:11:43,459 --> 00:11:48,803
is where we used Dialogflow in an extremely hacky way

269
00:11:48,843 --> 00:11:50,584
that they definitely did not intend for.

270
00:11:50,924 --> 00:11:51,865
It's called Garden Friends.

271
00:11:52,245 --> 00:11:55,248
It's built with AR and Unity.

272
00:11:55,708 --> 00:11:56,929
I'm going to show you a video.

273
00:12:01,252 --> 00:12:01,752
Oh, hello.

274
00:12:01,953 --> 00:12:02,973
I'm so glad you're here.

275
00:12:02,993 --> 00:12:05,615
I've been waiting so long for someone to show up.

276
00:12:05,635 --> 00:12:08,017
To be honest, it's pretty lonely around here.

277
00:12:08,447 --> 00:12:09,748
Tell me, what is your name?

278
00:12:10,868 --> 00:12:11,828
My name is Michael.

279
00:12:14,469 --> 00:12:16,830
Nice to meet you, Michael. I really need your help.

280
00:12:17,590 --> 00:12:22,152
I need to plant a beautiful garden so that other people will come visit me and I can make more friends.

281
00:12:22,912 --> 00:12:23,892
But I don't have arms.

282
00:12:24,392 --> 00:12:26,533
So please take this seed and plant it somewhere.

283
00:12:30,054 --> 00:12:31,315
Well, it's a start, Michael.

284
00:12:31,635 --> 00:12:32,795
But this tree could look better.

285
00:12:32,815 --> 00:12:35,056
I heard plants like it when you talk to them.

286
00:12:35,456 --> 00:12:37,357
Why don't you say something nice to this tree?

287
00:12:38,788 --> 00:12:41,389
I think you're a very boring looking tree.

288
00:12:44,190 --> 00:12:47,771
Michael, I said say something nice. That wasn't nice. Look

289
00:12:47,811 --> 00:12:50,372
what you did, Michael. Try saying something nicer.

290
00:12:51,812 --> 00:12:55,273
Just kidding. You're a beautiful and extraordinary tree.

291
00:12:56,334 --> 00:12:59,475
Well said, Michael. The tree seemed to like that. But we've

292
00:12:59,495 --> 00:13:00,355
got more to do.

293
00:13:00,455 --> 00:13:02,055
Brown and teal.

294
00:13:10,257 --> 00:13:12,479
Hey Lynn Brown, interesting combination.

295
00:13:12,780 --> 00:13:14,401
Splendid. Well done, Michael.

296
00:13:14,501 --> 00:13:20,026
I think we've planted a lovely garden with my creative direction in your arms.

297
00:13:20,086 --> 00:13:24,790
People will definitely want to visit my garden now and become my friend.

298
00:13:41,901 --> 00:13:48,406
Okay, so that's Garden Friends, and we did a bunch of experimental stuff there, like, you know, you can say your name, and then the character would say it back to you.

299
00:13:48,426 --> 00:13:55,751
We use sentiment analysis, you know, when we ask you to say something nice to the tree, and if you say something that's not nice, the tree turns black.

300
00:13:56,352 --> 00:13:57,893
We change the colors in the scene,

301
00:13:57,913 --> 00:13:58,854
depending on what you said.

302
00:13:59,254 --> 00:14:03,537
And all of this stuff is made possible with Dialogflow,

303
00:14:03,577 --> 00:14:04,998
with the sort of intent detection

304
00:14:05,038 --> 00:14:08,200
and like keyword extraction and entity extraction features.

305
00:14:09,801 --> 00:14:12,443
The problem is like the API is like built,

306
00:14:12,583 --> 00:14:14,524
is not built to be used that way.

307
00:14:16,005 --> 00:14:18,327
So Dialogflow used to have this really nice,

308
00:14:19,127 --> 00:14:21,789
simple REST API, where you could just send an API key

309
00:14:21,969 --> 00:14:23,770
and send a query and get a response back.

310
00:14:24,151 --> 00:14:27,897
but they've changed it so there's a lot more like authentication stuff that you have to do

311
00:14:28,077 --> 00:14:32,965
and it makes it difficult to use it in things like the, in, you know, the browser in Unity or somewhere else.

312
00:14:33,666 --> 00:14:38,133
Um, so the solution is like, we, you have to do some hacky shit to get it to work.

313
00:14:38,561 --> 00:14:40,643
Because Dialogflow, being a Google technology,

314
00:14:40,683 --> 00:14:43,566
is basically built to be used with the Google Assistant.

315
00:14:43,586 --> 00:14:46,189
So if you want to use it again in a place outside of that,

316
00:14:46,629 --> 00:14:48,251
you have to do a bit of extra work.

317
00:14:48,411 --> 00:14:51,154
So it's not necessarily that bad.

318
00:14:51,174 --> 00:14:53,356
Like, if you want to use it in the browser,

319
00:14:53,416 --> 00:14:54,857
there's simple things you can do.

320
00:14:56,811 --> 00:14:58,512
run a server with WebSockets,

321
00:14:58,772 --> 00:15:01,153
and Dialogflow actually does have a Node SDK,

322
00:15:01,193 --> 00:15:03,074
so you can do this thing instead of,

323
00:15:03,294 --> 00:15:05,235
like before, you might have been able to

324
00:15:05,656 --> 00:15:07,477
send a request from the client side

325
00:15:07,617 --> 00:15:09,258
and use it there on a website.

326
00:15:09,518 --> 00:15:12,039
Now it's a little more complicated, but still possible.

327
00:15:12,820 --> 00:15:15,641
And with Unity, actually, luckily,

328
00:15:15,661 --> 00:15:18,222
a few of my students, Alana Bonder,

329
00:15:18,303 --> 00:15:20,284
Alice Sun, and Lin Zhang at NYU,

330
00:15:20,524 --> 00:15:22,845
are building a plugin so that people can

331
00:15:23,765 --> 00:15:26,506
Again, use Dialogflow in a Unity project,

332
00:15:26,566 --> 00:15:28,267
and the URL is there.

333
00:15:28,407 --> 00:15:30,287
And it's currently in progress, but I'm sure they would

334
00:15:30,307 --> 00:15:32,148
appreciate any pull requests.

335
00:15:33,728 --> 00:15:36,909
So basically, to wrap up, sometimes the tools you want to

336
00:15:37,129 --> 00:15:40,110
use are not meant for fun things, but I think it's still

337
00:15:40,170 --> 00:15:43,270
worth doing those hacky things to make the cool stuff.

338
00:15:43,890 --> 00:15:47,451
And again, you don't have to only use game making

339
00:15:47,531 --> 00:15:48,632
tools to make games.

340
00:15:50,132 --> 00:15:52,053
So here's a guy having a great time playing

341
00:15:52,113 --> 00:15:53,133
Enhance.computer.

342
00:15:54,907 --> 00:15:55,467
All right, thank you.

343
00:15:55,487 --> 00:16:03,349
ERIC REIDMANN Hello, everybody.

344
00:16:08,110 --> 00:16:13,372
My name is Eric Reidmann, and I'm going to talk to you about the level editor we made

345
00:16:13,492 --> 00:16:18,373
for our game Clone Drone in the Danger Zone and some cool things we learned along the

346
00:16:18,413 --> 00:16:18,593
way.

347
00:16:19,793 --> 00:16:22,515
So, what is Clone Drone in the Danger Zone?

348
00:16:23,056 --> 00:16:25,758
It is a third-person sword fighting game

349
00:16:25,798 --> 00:16:28,780
where any part of your body can be sliced off.

350
00:16:29,421 --> 00:16:33,845
With your human mind downloaded into a robot gladiator,

351
00:16:34,425 --> 00:16:38,288
you must try to survive the sinister trials of the arena.

352
00:16:40,835 --> 00:16:46,320
And in 2017, we made a level editor for this game.

353
00:16:47,060 --> 00:16:48,422
It ships with the game,

354
00:16:48,842 --> 00:16:52,845
and you can use it to publish stuff to Steam Workshop.

355
00:16:54,647 --> 00:16:57,409
And it turns out that people like doing that.

356
00:16:57,469 --> 00:17:01,373
We currently have 15,000 levels in Steam Workshop,

357
00:17:02,254 --> 00:17:03,054
which is really cool.

358
00:17:04,722 --> 00:17:05,742
They look a lot like this.

359
00:17:06,383 --> 00:17:09,145
At least this is what people's first level

360
00:17:09,185 --> 00:17:09,866
tend to look like.

361
00:17:10,767 --> 00:17:13,148
For a lot of our players, it's a cool way

362
00:17:13,169 --> 00:17:15,751
to kind of just experiment with putting

363
00:17:15,871 --> 00:17:18,793
a lot of really dangerous enemies into a level

364
00:17:19,193 --> 00:17:20,855
so you can kind of experience something

365
00:17:20,875 --> 00:17:23,517
that no sensible game designer would ever put in the game.

366
00:17:23,537 --> 00:17:26,720
You can kind of tackle that with no upgrades kind of thing.

367
00:17:28,044 --> 00:17:31,147
And of course, if you look at some of the top levels,

368
00:17:31,207 --> 00:17:33,630
you start to see more of a variety

369
00:17:34,170 --> 00:17:36,372
between like interesting gameplay challenges,

370
00:17:37,313 --> 00:17:40,196
more sort of thematically strong levels

371
00:17:40,216 --> 00:17:41,558
where you're trying to like create

372
00:17:41,618 --> 00:17:44,381
like a sculpted scene kind of thing.

373
00:17:44,821 --> 00:17:47,284
So there's a lot of really, really cool stuff there.

374
00:17:49,164 --> 00:17:51,946
And of course, we eat our own dog food.

375
00:17:52,707 --> 00:17:55,569
We're using the level editor to make the official levels

376
00:17:55,769 --> 00:17:56,670
of the game as well.

377
00:17:57,271 --> 00:18:00,794
So we're kind of really married to this tool as well.

378
00:18:01,334 --> 00:18:02,555
And so far it's been really good.

379
00:18:02,575 --> 00:18:06,398
So yeah, I'm gonna see if I can go over some cool features

380
00:18:06,458 --> 00:18:10,182
that maybe some of you will find some nuggets

381
00:18:10,342 --> 00:18:11,523
of useful information in.

382
00:18:12,725 --> 00:18:17,029
All right, the first thing, we are able to expose values.

383
00:18:17,149 --> 00:18:20,172
So here you can see a very similar looking thing

384
00:18:20,252 --> 00:18:23,235
to Unity or any other sort of game engine.

385
00:18:23,295 --> 00:18:25,597
You highlight an object, you can see values

386
00:18:25,617 --> 00:18:27,078
associated with that object,

387
00:18:27,098 --> 00:18:29,540
you can modify them and they update.

388
00:18:30,061 --> 00:18:30,922
How do we do that?

389
00:18:32,019 --> 00:18:34,961
Well, we use attributes and reflection.

390
00:18:35,602 --> 00:18:37,363
Some of you, I'm sure, have heard of this.

391
00:18:37,403 --> 00:18:39,244
But if you haven't heard of this and you

392
00:18:39,264 --> 00:18:41,005
want to do something like this, you

393
00:18:41,025 --> 00:18:42,807
should Google that because it's amazing.

394
00:18:44,147 --> 00:18:47,150
We basically just add a little include and level editor

395
00:18:47,190 --> 00:18:48,410
tag on any value.

396
00:18:48,831 --> 00:18:51,753
And by magic, you can now tweak it in the game.

397
00:18:53,090 --> 00:18:55,571
And of course, this also works for method calls.

398
00:18:56,032 --> 00:18:58,273
This is an easy way to add a button

399
00:18:58,553 --> 00:19:00,534
to the inspector over there.

400
00:19:01,435 --> 00:19:05,677
Here's an example of testing the height of a jump pad.

401
00:19:06,058 --> 00:19:07,759
This saves so much time,

402
00:19:08,699 --> 00:19:10,240
not having to play test the entire level.

403
00:19:10,600 --> 00:19:12,282
And of course, it works in exactly the same way.

404
00:19:12,302 --> 00:19:15,183
You just slap an attribute on a method and boom,

405
00:19:15,383 --> 00:19:17,144
super easy to use.

406
00:19:18,723 --> 00:19:20,864
All right, next features, triggers.

407
00:19:21,545 --> 00:19:22,585
What are triggers?

408
00:19:23,646 --> 00:19:25,407
Triggers are basically a way to detect

409
00:19:25,547 --> 00:19:27,228
that something is happening

410
00:19:28,048 --> 00:19:32,671
and in the level editor kind of trigger a response.

411
00:19:33,192 --> 00:19:35,733
So in this simple example, we have a door

412
00:19:36,033 --> 00:19:39,435
and we have a zone where that kind of triggers

413
00:19:39,455 --> 00:19:40,776
when the player enters it.

414
00:19:42,197 --> 00:19:43,578
Looks like this, as you would expect.

415
00:19:43,618 --> 00:19:44,939
You run up to it, the door opens.

416
00:19:45,039 --> 00:19:45,699
Oh, there's an enemy.

417
00:19:46,944 --> 00:19:48,806
the enemy is also activated by the trigger.

418
00:19:50,108 --> 00:19:52,991
And what's cool about this is that we

419
00:19:53,011 --> 00:19:56,455
can add all kinds of sort of things that trigger things.

420
00:19:56,995 --> 00:19:58,757
So for example, you can also trigger stuff

421
00:19:58,837 --> 00:20:02,522
when everyone dies in an area, everyone leaves an area,

422
00:20:02,902 --> 00:20:05,805
animations can trigger stuff, and all kinds

423
00:20:05,845 --> 00:20:06,866
of wonderful things like that.

424
00:20:07,758 --> 00:20:10,621
And then it kind of provides a standard interface

425
00:20:10,741 --> 00:20:14,244
for anything we add to the level editor can be triggered

426
00:20:14,465 --> 00:20:16,587
from a variety of triggers like that.

427
00:20:17,167 --> 00:20:20,070
So it kind of forms a really cool system

428
00:20:20,230 --> 00:20:21,892
where you can string together stuff

429
00:20:21,952 --> 00:20:24,234
and chain them to create quite complex things.

430
00:20:25,035 --> 00:20:29,599
So an example of that is that one of our players

431
00:20:29,719 --> 00:20:31,120
made a calculator somehow.

432
00:20:31,861 --> 00:20:38,846
I'm actually not sure how he did it, but it basically uses triggers and then in response

433
00:20:38,986 --> 00:20:45,531
to shooting these triggers it moves some enemies around that again cause another trigger to

434
00:20:45,631 --> 00:20:52,016
update some sort of predefined value and he managed to make it so you can add these numbers

435
00:20:52,076 --> 00:20:53,537
together and get a result.

436
00:20:54,138 --> 00:20:58,321
So it's a pretty powerful system when you have simple tools like that that you can kind

437
00:20:58,341 --> 00:20:59,182
of just weave together.

438
00:20:59,202 --> 00:21:00,302
All right, next feature.

439
00:21:00,322 --> 00:21:01,263
All right, next feature.

440
00:21:02,842 --> 00:21:04,122
Hello, JDC humans.

441
00:21:04,562 --> 00:21:05,042
Greetings.

442
00:21:05,482 --> 00:21:08,263
We use text to speech for all the dialogue in this game.

443
00:21:08,724 --> 00:21:10,504
It is superior to your human voices.

444
00:21:10,944 --> 00:21:11,465
By far.

445
00:21:12,665 --> 00:21:16,106
Yeah, this is one of the more successful features

446
00:21:16,166 --> 00:21:16,686
in the game.

447
00:21:18,127 --> 00:21:23,008
We have about 33,000 spoken words in this little indie game

448
00:21:23,189 --> 00:21:24,569
which is a lot of words.

449
00:21:24,609 --> 00:21:27,790
These guys talk a lot and people like it.

450
00:21:28,750 --> 00:21:32,792
How do we do that? Well, it's actually very simple. We have a Google spreadsheet

451
00:21:33,772 --> 00:21:35,773
Here's you here. You can see the text. I just said

452
00:21:37,214 --> 00:21:37,434
and

453
00:21:37,734 --> 00:21:43,976
There's a simple one button import you click a button downloads the spreadsheet generates audio

454
00:21:44,617 --> 00:21:46,197
And kind of bundles it with the game

455
00:21:47,118 --> 00:21:50,079
And then it updates a manifest of all spoken dialogue

456
00:21:50,119 --> 00:21:55,041
So the game can kind of know what dialogue is in the game and you can just trigger it very easily from the game

457
00:21:56,662 --> 00:21:56,762
Yep

458
00:21:58,080 --> 00:22:01,421
All right, here is a maybe more controversial feature.

459
00:22:01,501 --> 00:22:03,902
We added our own animation system to the game,

460
00:22:04,802 --> 00:22:06,082
or to the level editor, rather.

461
00:22:07,183 --> 00:22:09,884
So this was a really hard decision.

462
00:22:09,944 --> 00:22:12,244
It was kind of hard to justify doing this.

463
00:22:12,264 --> 00:22:14,665
I spent about a month making this system.

464
00:22:15,565 --> 00:22:18,546
Here's like a little cut scene from chapter four

465
00:22:18,566 --> 00:22:20,247
of story mode that we're working on right now.

466
00:22:21,341 --> 00:22:25,866
And this was tricky because Unity already has an animation system.

467
00:22:25,927 --> 00:22:26,868
Why would we do this?

468
00:22:27,709 --> 00:22:32,194
And it kind of comes down to the fact that when you make a level editor, like a complex

469
00:22:32,215 --> 00:22:34,497
system that sits on top of the normal game engine.

470
00:22:35,424 --> 00:22:38,064
it makes it hard to use the game engine's features

471
00:22:38,544 --> 00:22:40,525
as you would normally do them because you're kind of,

472
00:22:40,545 --> 00:22:43,545
you know, serializing stuff in a completely different way.

473
00:22:44,186 --> 00:22:46,426
So, yeah, we agonized over this,

474
00:22:46,506 --> 00:22:50,047
but what it comes down to is that I love drama

475
00:22:50,567 --> 00:22:51,787
when making levels, you know?

476
00:22:52,007 --> 00:22:54,968
I love it when suddenly a robot walks out

477
00:22:55,008 --> 00:22:56,849
from behind a pillar or something and it's like,

478
00:22:56,889 --> 00:22:58,209
what's up, human, let's fight!

479
00:22:58,689 --> 00:23:00,690
You know, dramatic stuff like that.

480
00:23:00,750 --> 00:23:02,750
Small dramatic things and big dramatic things.

481
00:23:04,345 --> 00:23:06,965
And I think if you take nothing else away from this,

482
00:23:07,045 --> 00:23:08,006
it's kind of an obvious point,

483
00:23:08,046 --> 00:23:09,866
but when it's easy to add content,

484
00:23:10,466 --> 00:23:13,187
you get a lot of content added to the game

485
00:23:13,327 --> 00:23:15,048
and it's a joy to add that content.

486
00:23:16,528 --> 00:23:18,129
So we have all kinds of animations now

487
00:23:18,169 --> 00:23:20,409
that we previously just couldn't do

488
00:23:20,469 --> 00:23:21,350
because it was too hard.

489
00:23:22,230 --> 00:23:26,832
And I think that should be the goal of whenever you try to make a tool like this,

490
00:23:27,372 --> 00:23:31,513
it's kind of to make the user forget that they are using a tool,

491
00:23:31,914 --> 00:23:36,695
to be able to kind of stay in a creative mind space to think about what do you want to exist,

492
00:23:37,236 --> 00:23:40,757
not how are you going to make it work with these complex things.

493
00:23:42,358 --> 00:23:45,879
And yes, that is, I guess, my overall point.

494
00:23:46,579 --> 00:23:47,240
Thank you so much!

495
00:23:51,018 --> 00:23:51,979
Hey everyone, how's it going?

496
00:23:51,999 --> 00:23:52,499
I'm Em.

497
00:23:53,660 --> 00:23:56,742
Woo!

498
00:23:56,762 --> 00:23:57,723
And I'm here to talk to you today

499
00:23:57,763 --> 00:23:59,844
about using MIDI controllers to tune game feel.

500
00:24:01,025 --> 00:24:02,446
So I spent a lot of the last year

501
00:24:02,506 --> 00:24:04,167
working on a new hardware platform

502
00:24:04,187 --> 00:24:06,449
where we were prototyping new low-level interactions.

503
00:24:07,370 --> 00:24:09,411
We were basically trying to turn out a new prototype

504
00:24:09,471 --> 00:24:10,652
every couple days or every week

505
00:24:11,052 --> 00:24:12,553
to figure out what actually works,

506
00:24:12,594 --> 00:24:13,434
what are we trying to do here?

507
00:24:13,454 --> 00:24:16,356
And we ran into a really classic prototyping problem.

508
00:24:16,877 --> 00:24:18,498
where when a prototype is successful,

509
00:24:18,838 --> 00:24:21,079
that is really obvious, it's really easy to tell

510
00:24:21,099 --> 00:24:21,880
you should do more with this,

511
00:24:22,300 --> 00:24:23,881
but if a prototype is not fun,

512
00:24:24,501 --> 00:24:26,883
it's really tricky to call the line on,

513
00:24:27,323 --> 00:24:29,204
is this not working because it's a bad idea

514
00:24:29,304 --> 00:24:31,206
or did we just not spend enough time polishing it?

515
00:24:32,366 --> 00:24:33,847
So one of the ways we tried to solve that

516
00:24:33,887 --> 00:24:35,868
was to minimize the amount of time it took us

517
00:24:36,269 --> 00:24:39,130
to sort of get a prototype really, really polished.

518
00:24:39,151 --> 00:24:40,671
And one of the ways we tried to solve that

519
00:24:40,711 --> 00:24:42,092
was reaching for MIDI controllers.

520
00:24:43,373 --> 00:24:44,974
So if this is a totally new concept for you,

521
00:24:45,354 --> 00:24:46,655
you were using some hardware like that,

522
00:24:46,735 --> 00:24:47,996
which I am also holding in my hand,

523
00:24:48,016 --> 00:24:50,998
where you can take all of these knobs and sliders

524
00:24:51,058 --> 00:24:53,740
and wire them up to all of your physics constants

525
00:24:53,780 --> 00:24:55,341
and all the other magic numbers in your game.

526
00:24:55,981 --> 00:24:56,922
So while the game is running,

527
00:24:56,942 --> 00:24:58,723
you can tune them in real time and see how they feel.

528
00:25:00,124 --> 00:25:01,205
So what did this actually do for us?

529
00:25:02,786 --> 00:25:04,167
Tight feedback loops are amazing.

530
00:25:05,048 --> 00:25:06,890
If you have ever done the sort of thing where

531
00:25:07,270 --> 00:25:08,831
you have to stop your game while it's running,

532
00:25:08,911 --> 00:25:10,973
change a number in code, and then restart the game,

533
00:25:11,614 --> 00:25:14,296
you know that absolutely kills your ability to be creative

534
00:25:14,396 --> 00:25:15,897
and come up with new ideas and try things.

535
00:25:16,938 --> 00:25:18,659
Things are naturally a little better in Unity

536
00:25:18,699 --> 00:25:19,900
if you're using the inspector window

537
00:25:19,940 --> 00:25:21,261
at run time or at compile time.

538
00:25:21,762 --> 00:25:22,542
But it's still not great.

539
00:25:23,422 --> 00:25:24,483
I've seen a lot of people will,

540
00:25:24,543 --> 00:25:25,783
if they're using controller games,

541
00:25:25,823 --> 00:25:27,824
they may wire up the keyboard to do a similar thing.

542
00:25:28,644 --> 00:25:30,224
But a media controller can be really great for this.

543
00:25:30,725 --> 00:25:32,305
And where it really starts to get interesting

544
00:25:32,345 --> 00:25:34,346
is when you're tuning complex sets of variables

545
00:25:34,366 --> 00:25:35,266
that are related to each other.

546
00:25:36,307 --> 00:25:37,787
So I worked a lot on a...

547
00:25:38,527 --> 00:25:42,029
like cartoony kart racer, where we cared about things like

548
00:25:42,169 --> 00:25:44,650
max velocity and acceleration and turn speed,

549
00:25:45,931 --> 00:25:48,132
but we cared less about those individual values

550
00:25:48,192 --> 00:25:49,933
as much as what is the relationship between them,

551
00:25:50,633 --> 00:25:52,114
which is really, really hard to tune

552
00:25:52,194 --> 00:25:54,095
when you can only change one value at a time.

553
00:25:54,775 --> 00:25:56,336
And I played around with things like...

554
00:25:57,056 --> 00:26:00,639
Let's encode the proportion between all these variables

555
00:26:00,799 --> 00:26:02,101
as a number and tune that number.

556
00:26:02,561 --> 00:26:04,483
But that gets very complicated very quickly

557
00:26:04,563 --> 00:26:07,225
and is way more complex than you want to deal with

558
00:26:07,245 --> 00:26:08,326
when you're trying to make a fun game.

559
00:26:08,886 --> 00:26:10,288
Whereas if you have a MIDI controller

560
00:26:10,328 --> 00:26:12,169
and you can take those three or four variables

561
00:26:12,229 --> 00:26:13,270
and wire them up to sliders

562
00:26:13,310 --> 00:26:14,692
that you can each control with one finger,

563
00:26:15,172 --> 00:26:16,974
that is really easy to play around with what works.

564
00:26:18,534 --> 00:26:22,735
Also, perhaps most importantly, you get to feel like this DJ code wizard.

565
00:26:23,956 --> 00:26:28,837
This is, I really appreciate my design collaborator had this sort of sense of creating a mise

566
00:26:28,877 --> 00:26:33,418
en place before setting up to tune a given prototype, which seems silly, but I think

567
00:26:33,458 --> 00:26:38,459
is actually really vitally important, because once, like, game design is a creative activity,

568
00:26:39,039 --> 00:26:43,160
and if you can get into this playful sense of exploration and getting you to a place

569
00:26:43,200 --> 00:26:46,881
where you can explore the entire possibility space of your design, you're going to do much

570
00:26:46,921 --> 00:26:47,241
better work.

571
00:26:48,881 --> 00:26:50,522
Also on a very concrete level,

572
00:26:51,302 --> 00:26:55,063
humans have a lot of very, very strong cognitive biases

573
00:26:55,103 --> 00:26:55,883
against weird numbers.

574
00:26:56,423 --> 00:26:57,924
And if you're manually typing numbers

575
00:26:58,004 --> 00:26:59,424
into code or the inspector window,

576
00:26:59,804 --> 00:27:01,605
you're gonna go for numbers that look nice and clean.

577
00:27:02,305 --> 00:27:04,806
Whereas if you have this nice expressive analog input,

578
00:27:05,126 --> 00:27:07,487
you might actually find the number that feels more right.

579
00:27:09,740 --> 00:27:11,041
And I think it goes without saying,

580
00:27:11,661 --> 00:27:13,763
this is a very nice hack that I enjoy,

581
00:27:13,803 --> 00:27:15,104
but it still feels like a bit of a hack.

582
00:27:15,765 --> 00:27:17,306
You might be familiar with Brett Vector's work.

583
00:27:17,366 --> 00:27:19,047
This is from his talk, Inventing on Principle,

584
00:27:19,668 --> 00:27:21,769
where he talks about how do you tune

585
00:27:21,809 --> 00:27:23,711
a sort of Mario-style 2D platformer.

586
00:27:24,771 --> 00:27:29,614
Like, in an ideal world, we wouldn't be dealing with running back and forth, changing physics

587
00:27:29,674 --> 00:27:31,996
and jump speed, and trying it over time to see what works.

588
00:27:32,436 --> 00:27:36,298
We would have some higher-level conceptual abstraction that cuts cleanly through the

589
00:27:36,338 --> 00:27:38,980
design possibility space and shows us what our actual problem is.

590
00:27:39,600 --> 00:27:42,422
But until then, like, $50 worth of hardware is a pretty good solution.

591
00:27:44,427 --> 00:27:45,807
So concretely, what did I actually do?

592
00:27:47,268 --> 00:27:48,188
So as I talked to people,

593
00:27:48,648 --> 00:27:49,969
it turns out there are a lot of people

594
00:27:50,009 --> 00:27:51,509
who are already using MIDI controllers.

595
00:27:51,529 --> 00:27:53,350
They just don't really talk about it that often.

596
00:27:54,510 --> 00:27:55,731
But pretty much everyone I talked to

597
00:27:55,791 --> 00:27:57,772
pointed to this William Shearer blog post from 2015

598
00:27:59,152 --> 00:28:01,933
about how he uses a MIDI controller for Manifold Garden.

599
00:28:02,774 --> 00:28:04,835
And he talked about the specific controller he uses,

600
00:28:04,855 --> 00:28:06,135
and the way he wires things up in Unity,

601
00:28:06,175 --> 00:28:07,336
and the sorts of things he use it for.

602
00:28:08,897 --> 00:28:10,738
So in broad strokes, I took all of his work,

603
00:28:11,958 --> 00:28:13,139
took the work that I had been doing,

604
00:28:13,159 --> 00:28:15,160
and sort of wrapped it up in this nice Unity project,

605
00:28:15,900 --> 00:28:18,942
where the hope is there are already not that many barriers

606
00:28:18,962 --> 00:28:20,042
to entry to getting started here,

607
00:28:20,102 --> 00:28:21,143
other than not knowing what to do.

608
00:28:21,523 --> 00:28:24,104
So maybe I can provide you a nice Unity library

609
00:28:24,144 --> 00:28:24,805
that if you have bought.

610
00:28:25,165 --> 00:28:28,029
this Korg Nano Control 2 hardware that a lot of people use

611
00:28:28,069 --> 00:28:30,031
that is $40 to $60 online.

612
00:28:30,852 --> 00:28:32,555
You can drop this into your Unity project.

613
00:28:32,915 --> 00:28:35,559
And if you haven't changed the default MIDI values,

614
00:28:35,599 --> 00:28:37,261
it should just work.

615
00:28:37,802 --> 00:28:39,244
That said, it is pretty buggy.

616
00:28:39,484 --> 00:28:41,747
So we will see right now if it just works.

617
00:28:44,051 --> 00:28:46,394
Unfortunately, most of the work I was actually using this for

618
00:28:46,434 --> 00:28:49,077
is both NDAed and fairly complex to set up.

619
00:28:49,557 --> 00:28:52,661
So this is everyone's favorite Unity default Flappy Bird clone.

620
00:28:54,283 --> 00:28:54,803
Let's see.

621
00:28:55,164 --> 00:28:56,826
Oh, this is really awkward looking at the other screen.

622
00:28:57,987 --> 00:28:59,749
So there is a custom specter window

623
00:29:00,690 --> 00:29:01,871
that is on the other screen.

624
00:29:05,649 --> 00:29:09,252
Hey, so because we know that every good game has character

625
00:29:09,292 --> 00:29:11,674
customization options and Korg makes the Nano Control 2

626
00:29:11,895 --> 00:29:14,137
in white and black, you can customize the editor.

627
00:29:16,599 --> 00:29:18,841
But from there, let's say you want to wire up this knob up

628
00:29:18,881 --> 00:29:20,943
here to how high the bird jumps.

629
00:29:21,023 --> 00:29:22,344
So we're just going to drag in our bird.

630
00:29:24,779 --> 00:29:25,239
There we go.

631
00:29:26,500 --> 00:29:28,422
And I was reaching in for this object.

632
00:29:28,462 --> 00:29:29,883
I'm grabbing every amount of behavior off it.

633
00:29:30,043 --> 00:29:30,903
So say we want the bird.

634
00:29:31,384 --> 00:29:32,925
And then it's going to go through and use the C Sharp

635
00:29:32,945 --> 00:29:36,127
reflection APIs to find every property or stored field

636
00:29:36,167 --> 00:29:37,808
that looks like it could be a number we can tweak.

637
00:29:39,309 --> 00:29:41,171
And then the sort of values, what the current value is,

638
00:29:41,231 --> 00:29:44,593
the range is basically these knobs have a bottom and a top.

639
00:29:44,673 --> 00:29:45,834
So the bottom is going to be zero.

640
00:29:46,234 --> 00:29:47,275
The top is going to be this number.

641
00:29:47,735 --> 00:29:48,616
Let's make it pretty high.

642
00:29:50,157 --> 00:29:51,798
Let's leave it with that for now and see if it works.

643
00:29:52,479 --> 00:29:53,419
So we can close that out.

644
00:29:54,647 --> 00:29:56,748
And if we run the game, you're not actually

645
00:29:56,768 --> 00:29:58,609
going to be able to see me move my hand, unfortunately.

646
00:29:59,149 --> 00:30:01,930
But as I turn it all the way up, whoa.

647
00:30:01,950 --> 00:30:09,334
I think we still have a little bit of tuning to go,

648
00:30:09,374 --> 00:30:10,235
but we'll leave it at that for now.

649
00:30:12,990 --> 00:30:13,651
Yes, that's about it.

650
00:30:13,751 --> 00:30:18,755
The other thing to call out is if you actually pull this open, there's another UI inside

651
00:30:18,835 --> 00:30:21,077
the inspector itself where you can add more bindings here.

652
00:30:22,879 --> 00:30:25,941
There are a million different design decisions I could talk about that I don't have time

653
00:30:25,982 --> 00:30:29,685
for, but I do want to talk about one really important one, which is...

654
00:30:31,046 --> 00:30:32,627
these dropdowns that I talked a little bit about.

655
00:30:34,209 --> 00:30:36,211
So on a logistical level, it totally

656
00:30:36,251 --> 00:30:37,231
made sense for me to do this.

657
00:30:37,292 --> 00:30:38,953
The amount of time that I spent implementing that

658
00:30:39,473 --> 00:30:41,515
paid back for itself immediately in terms

659
00:30:41,555 --> 00:30:43,317
of not worrying about entering a typo

660
00:30:43,337 --> 00:30:44,198
and typing something wrong.

661
00:30:44,938 --> 00:30:47,060
But I think it's actually way more conceptually important

662
00:30:47,080 --> 00:30:49,722
than that, that if this is an empty text field,

663
00:30:50,163 --> 00:30:52,105
this is now a tool that you have to come to this saying,

664
00:30:52,185 --> 00:30:53,926
I know exactly what variable I want to tweak.

665
00:30:54,266 --> 00:30:56,148
This is a tool that will let me accomplish that task.

666
00:30:56,909 --> 00:31:00,772
Whereas now that it's a drop-down, this is now another space for exploration, where if you know

667
00:31:01,452 --> 00:31:03,674
this game doesn't feel right and I don't know how to solve it,

668
00:31:04,375 --> 00:31:08,378
maybe by browsing through the choices the tool is giving me, this will help give me some insight into

669
00:31:08,958 --> 00:31:11,540
what I can actually do. This is a tool not just to

670
00:31:12,421 --> 00:31:16,504
solve a specific problem, but to help give you a framework for which you can explore your problem space.

671
00:31:18,634 --> 00:31:20,615
So augmenting human productivity is great.

672
00:31:20,856 --> 00:31:21,876
We have lots of tools to do that,

673
00:31:22,237 --> 00:31:23,718
but I would push you as tool builders,

674
00:31:23,738 --> 00:31:24,799
because I assume a lot of you are here

675
00:31:24,859 --> 00:31:26,441
because you care about making your own tools,

676
00:31:27,361 --> 00:31:29,583
you should think about augmenting human creativity.

677
00:31:30,164 --> 00:31:32,466
Or to put it another way, hammers are great.

678
00:31:32,606 --> 00:31:34,088
There are lots of hammers that are very useful,

679
00:31:34,608 --> 00:31:35,889
but pianos are also super useful.

680
00:31:35,909 --> 00:31:36,830
You should make more pianos.

681
00:31:37,371 --> 00:31:37,571
Thanks.

682
00:31:44,429 --> 00:31:46,512
I'm David Mershon with Universal Happy Maker,

683
00:31:46,632 --> 00:31:48,814
and today I'm going to talk about animating using Perlin

684
00:31:48,834 --> 00:31:49,035
Noise.

685
00:31:49,896 --> 00:31:52,639
Just a little disclaimer, this is a talk about programming.

686
00:31:52,699 --> 00:31:53,820
If you can't program at all, this

687
00:31:53,860 --> 00:31:55,522
would be a really good time to get a cup of coffee

688
00:31:55,562 --> 00:31:56,524
or mess around on your phone.

689
00:31:58,725 --> 00:32:01,866
On the other hand, what I'm going to tell you are some things that we learned that made

690
00:32:01,906 --> 00:32:04,727
our lives easier and other programmers know them.

691
00:32:04,847 --> 00:32:07,988
So if you're someone sitting in the audience that knows everything I'm going to say, I

692
00:32:08,028 --> 00:32:09,488
don't mean to insult your intelligence.

693
00:32:09,588 --> 00:32:13,529
It's just maybe not everyone knows this stuff and maybe it'll make your lives easier like

694
00:32:13,569 --> 00:32:14,269
it did for us.

695
00:32:15,430 --> 00:32:17,914
So first I'm just gonna show you what it is

696
00:32:18,014 --> 00:32:19,616
that I'm gonna demo today.

697
00:32:19,676 --> 00:32:22,219
This is some Perlin animated characters from our game.

698
00:32:22,580 --> 00:32:25,604
This guy is animated with more or less just one script

699
00:32:25,624 --> 00:32:26,865
with about 100 lines of code.

700
00:32:27,686 --> 00:32:30,230
So if that sounds good to you, I'm gonna explain it.

701
00:32:30,330 --> 00:32:31,091
If not, you're crazy.

702
00:32:32,572 --> 00:32:36,313
So, why is it that we got into Perlin Noise for Animation?

703
00:32:36,333 --> 00:32:37,553
There's lots of ways to animate things.

704
00:32:37,614 --> 00:32:39,414
Basically, we're a small team.

705
00:32:39,814 --> 00:32:41,735
We don't have anyone that can dedicate time

706
00:32:41,755 --> 00:32:43,075
to doing key frame animation,

707
00:32:43,375 --> 00:32:44,796
and we still wanted our game to look great

708
00:32:44,876 --> 00:32:46,416
because you have to impress people

709
00:32:46,716 --> 00:32:48,697
and make them wanna play your game

710
00:32:48,917 --> 00:32:52,138
and have it be a good experience in terms of visuals.

711
00:32:53,079 --> 00:32:56,020
So, when we ran into this problem,

712
00:32:56,661 --> 00:32:58,182
I thought about my friend Nick Crockett,

713
00:32:58,202 --> 00:33:00,103
who told me years ago that if you want your game

714
00:33:00,123 --> 00:33:01,904
to look good, you put some Perlin on it,

715
00:33:02,104 --> 00:33:03,285
and I didn't really know what that meant,

716
00:33:04,365 --> 00:33:05,686
but I remembered that he said that,

717
00:33:05,786 --> 00:33:06,927
and so I looked into it.

718
00:33:07,827 --> 00:33:10,409
And so what Perlin noise is is an algorithm

719
00:33:10,449 --> 00:33:12,970
that this guy Ken Perlin thought up in the 1980s

720
00:33:13,050 --> 00:33:15,192
to make procedural textures for the movie Tron,

721
00:33:15,332 --> 00:33:16,493
which won an Academy Award.

722
00:33:17,813 --> 00:33:19,815
And this is what they look like on the left here.

723
00:33:20,235 --> 00:33:22,816
That's a basic Perlin noise generated bitmap.

724
00:33:23,597 --> 00:33:26,439
On the right is a sort of fractal extrapolation of that,

725
00:33:26,699 --> 00:33:29,681
that you might have seen if you use Photoshop

726
00:33:29,741 --> 00:33:31,502
or Studio Max or something like that,

727
00:33:31,542 --> 00:33:32,582
a very common texture.

728
00:33:32,682 --> 00:33:33,203
And in the center.

729
00:33:33,964 --> 00:33:37,949
is a 3D rendered landscape that's composed of content

730
00:33:37,989 --> 00:33:40,713
that's based on Perlin noise type algorithms.

731
00:33:40,934 --> 00:33:44,799
So, but what our team used it for is animation

732
00:33:45,060 --> 00:33:46,722
and the easiest way to think about that

733
00:33:46,782 --> 00:33:48,324
is you go back to that picture on the left.

734
00:33:48,965 --> 00:33:51,066
And you imagine just one line in that bitmap,

735
00:33:51,186 --> 00:33:53,707
and we're gonna traverse it from left to right,

736
00:33:54,287 --> 00:33:57,108
and basically convert each of those values,

737
00:33:57,328 --> 00:33:59,169
the luminance values from black to white,

738
00:33:59,549 --> 00:34:01,810
to a floating point value normal as zero to one,

739
00:34:02,350 --> 00:34:04,831
and use that to drive whatever motion we want

740
00:34:04,951 --> 00:34:06,772
as amplitude values over time.

741
00:34:07,879 --> 00:34:12,801
So to show you why you'd use Perlin noise rather than something else, I'm going to compare several

742
00:34:12,841 --> 00:34:16,562
different functions for generating amplitude over time. We've got a seated random one first,

743
00:34:17,022 --> 00:34:20,964
then a sine wave, which you'd know what that is if you paid attention during math class,

744
00:34:21,644 --> 00:34:24,905
and then the Perlin noise, which is the subject of today's talk.

745
00:34:25,265 --> 00:34:25,365
So

746
00:34:25,725 --> 00:34:27,247
I'm going to go to an example here in Unity.

747
00:34:27,847 --> 00:34:29,088
This is just a graph I made that's

748
00:34:29,128 --> 00:34:30,609
going to blow those functions up.

749
00:34:30,769 --> 00:34:32,711
You can see the random noise is indeed random.

750
00:34:33,151 --> 00:34:35,453
But unfortunately, it's not very good for smooth movement,

751
00:34:35,533 --> 00:34:37,134
because the amplitude of the points

752
00:34:37,174 --> 00:34:38,995
from one moment in time to another

753
00:34:39,035 --> 00:34:40,216
has no continuity at all.

754
00:34:40,617 --> 00:34:42,138
You still might find that useful for making

755
00:34:42,218 --> 00:34:43,379
raindrops or something like that,

756
00:34:43,419 --> 00:34:44,740
but not for moving objects around.

757
00:34:45,701 --> 00:34:47,782
Next, we've got a sine wave, which is very smooth,

758
00:34:48,142 --> 00:34:48,963
which is very nice.

759
00:34:49,083 --> 00:34:51,065
And you might use that for a cork bobbing on water,

760
00:34:51,185 --> 00:34:52,946
but it doesn't look very alive.

761
00:34:52,986 --> 00:34:53,847
It's very mechanical.

762
00:34:54,772 --> 00:34:58,094
Perlin noise combines some of the order of the sine wave

763
00:34:58,134 --> 00:34:59,575
and the chaos of the randomness.

764
00:34:59,775 --> 00:35:02,597
It's smooth, so you can use it for moving things around,

765
00:35:03,118 --> 00:35:04,378
but it's also unpredictable.

766
00:35:04,439 --> 00:35:06,240
You don't know when things are going to get really jaggy

767
00:35:06,340 --> 00:35:07,401
and when they're going to level off

768
00:35:07,461 --> 00:35:10,803
and kind of end up in a valley for a while or a plateau.

769
00:35:11,684 --> 00:35:13,265
So, what does this look like

770
00:35:13,285 --> 00:35:14,986
when you actually move objects around in it?

771
00:35:15,606 --> 00:35:18,148
That is what we're going to look at next.

772
00:35:18,822 --> 00:35:27,272
So, this cube here is being moved around with a script that just uses Perlin noise.

773
00:35:27,312 --> 00:35:28,234
I'll show it to you right here.

774
00:35:28,654 --> 00:35:33,440
This is only about 20 lines of code, and all this is doing is taking those values of amplitude

775
00:35:33,460 --> 00:35:36,764
over time and using it to drive the x position on the transform of this object.

776
00:35:37,365 --> 00:35:42,746
So you can see that it moves smoothly, but its movements unpredictable. You don't know when it's going to stop and start

777
00:35:43,587 --> 00:35:51,069
Now of course you can use this same code basically almost the exact same script with one line of difference to drive rotation

778
00:35:52,089 --> 00:35:56,951
Right now they're moving and rotating in sync because it's almost the same script and they're using the same time values

779
00:35:57,531 --> 00:35:57,651
but

780
00:35:58,434 --> 00:36:00,396
If you change the time scale on one of them,

781
00:36:00,557 --> 00:36:02,359
they now become disconnected and seem to have

782
00:36:02,399 --> 00:36:05,423
their own agency, or you can change the seed value,

783
00:36:05,463 --> 00:36:08,307
which is just what's being put into the other argument

784
00:36:08,347 --> 00:36:09,208
on the Perlin function.

785
00:36:09,248 --> 00:36:10,750
It's built to take x and y coordinates.

786
00:36:11,271 --> 00:36:13,193
So now they're moving at the same speed,

787
00:36:13,254 --> 00:36:15,477
but off basically a different line of that bitmap.

788
00:36:16,849 --> 00:36:21,734
So this starts to become really powerful once you start organizing these into hierarchies

789
00:36:22,355 --> 00:36:23,096
like this one here.

790
00:36:23,757 --> 00:36:28,122
And you can imagine that this is the arm of the teacher that is scolding you for not remembering

791
00:36:28,162 --> 00:36:29,464
your sine waves in math class.

792
00:36:32,747 --> 00:36:34,349
This next example here.

793
00:36:35,727 --> 00:36:38,408
is one of the actual scripts that we use in the game.

794
00:36:38,468 --> 00:36:40,969
The previous ones were all demo scripts.

795
00:36:41,369 --> 00:36:42,310
This one isn't much longer.

796
00:36:42,370 --> 00:36:43,650
It's only about 100 lines of code.

797
00:36:44,270 --> 00:36:47,331
And the main difference here is it modulates all three axes

798
00:36:47,531 --> 00:36:50,192
on position, rotation, and scale.

799
00:36:50,933 --> 00:36:52,393
And this one is doing all of that

800
00:36:52,573 --> 00:36:55,254
and making something that maybe moves kind of like a balloon

801
00:36:55,294 --> 00:36:57,835
in the summer sky or that shiny black probe

802
00:36:57,875 --> 00:37:00,156
droid that was going to stick Princess Leia with needles

803
00:37:00,216 --> 00:37:01,957
if she didn't reveal the location of Alderaan

804
00:37:02,037 --> 00:37:02,717
if you've seen the film.

805
00:37:05,498 --> 00:37:08,741
Now, you put those into a hierarchy,

806
00:37:09,422 --> 00:37:11,624
and you add some excellent character art

807
00:37:11,664 --> 00:37:14,587
from someone like our excellent character artist, Julia Y,

808
00:37:15,428 --> 00:37:18,110
and you get some characters that look like

809
00:37:18,851 --> 00:37:20,373
they move around, and they talk.

810
00:37:21,554 --> 00:37:24,475
And this talking you're seeing is just a very simple thing.

811
00:37:24,555 --> 00:37:27,637
We're just speeding up all of their animators at once.

812
00:37:28,577 --> 00:37:29,938
And it's a really dumb trick.

813
00:37:29,998 --> 00:37:32,099
It's like a kid shaking a sock puppet

814
00:37:32,159 --> 00:37:33,380
to make it look like it's talking.

815
00:37:33,760 --> 00:37:36,181
But sometimes really dumb tricks are what you need.

816
00:37:36,201 --> 00:37:36,241
So.

817
00:37:39,843 --> 00:37:43,026
Here's some more of the characters in-game using this technology.

818
00:37:43,266 --> 00:37:45,148
And we use it for just about everything else too.

819
00:37:45,168 --> 00:37:49,231
We use it for environments, characters, UI animations.

820
00:37:49,271 --> 00:37:51,653
We just make everything wobble around with Perlin noise.

821
00:37:52,344 --> 00:37:53,505
and it looks nice and warm,

822
00:37:53,805 --> 00:37:55,747
and we didn't have to lay a single keyframe.

823
00:37:56,548 --> 00:38:00,151
So, you can also change states with Perlin,

824
00:38:00,211 --> 00:38:02,974
use this time, amplitude over time values

825
00:38:03,054 --> 00:38:05,356
to swap safe frames in a sprite that's also useful,

826
00:38:05,416 --> 00:38:06,757
and this character's lips are flapping

827
00:38:07,478 --> 00:38:08,238
based on that as well.

828
00:38:09,920 --> 00:38:10,721
So, thank you very much.

829
00:38:10,741 --> 00:38:12,863
I hope what I said made your life easier.

830
00:38:16,888 --> 00:38:21,454
Hi, I'm John Manning. I'm 50% of Secret Lab. I'm a programmer on Night in the Woods.

831
00:38:21,715 --> 00:38:23,337
I've written a bunch of books. Go and buy them, please.

832
00:38:23,497 --> 00:38:26,902
Also, I'm right now helping on Marvel Create Your Own from TapTap Comics.

833
00:38:27,042 --> 00:38:29,906
And also, here's a cool tool you can use. It's called Yarnspinner.

834
00:38:30,707 --> 00:38:36,491
and it was a simple solution to a fairly complicated problem that was faced during the development of Night in the Woods.

835
00:38:37,052 --> 00:38:42,576
So the problem was Scott Benson was lead artist and also the dialogue writer for most of the game.

836
00:38:43,576 --> 00:38:46,498
Alec Loker was lead programmer and Beth Hockenberry was research and story writer.

837
00:38:46,899 --> 00:38:52,102
The problem was that Scott could not do all the writing and do all the art and also code at the same time.

838
00:38:52,162 --> 00:38:55,365
There are some limits to how many different tasks an indie team can do.

839
00:38:56,205 --> 00:38:59,329
Night in the Woods is a text-heavy adventure game.

840
00:38:59,369 --> 00:39:01,772
The solution we came up with was a thing called Yarn.

841
00:39:01,892 --> 00:39:04,435
Yarn is a language for writing dialogue.

842
00:39:05,397 --> 00:39:10,923
The solution was to make this a very simple tool for ease of use for writers and ease

843
00:39:10,943 --> 00:39:13,807
of use for people integrating that tool into the software.

844
00:39:14,407 --> 00:39:18,728
So this is inspired by Twine, and we've seen Twine being discussed a bunch today, and also,

845
00:39:19,508 --> 00:39:24,850
Twine kind of has sunk into the developer consciousness a bit as well, which is nice.

846
00:39:24,910 --> 00:39:27,210
So the idea was, what if Twine, but in our game?

847
00:39:28,010 --> 00:39:30,991
So the Yarn dialogue system is really two things.

848
00:39:31,131 --> 00:39:35,672
It is the Yarn Editor, a piece of software that you use to write your dialogue, and also

849
00:39:35,832 --> 00:39:40,593
it is Yarn Spinner, which is the library that interprets that dialogue and runs it inside

850
00:39:40,613 --> 00:39:40,913
your game.

851
00:39:41,778 --> 00:39:49,122
So Yarn is a simple app, a twine-like node representation of your dialogue.

852
00:39:49,182 --> 00:39:53,725
Each node contains a number of lines of dialogue, it contains some logic, it contains basically

853
00:39:53,745 --> 00:39:54,465
a tiny script.

854
00:39:56,226 --> 00:39:59,908
The Yarn code, as I mentioned, is a twine-like syntax.

855
00:40:00,409 --> 00:40:03,071
So again, designed to be easy to write, easy to parse.

856
00:40:03,151 --> 00:40:07,315
It's simple for writers who don't necessarily need to work with the underlying behavior of the scene.

857
00:40:07,415 --> 00:40:11,138
And it's also simple for programmers who want to set up a scene's behavior

858
00:40:11,199 --> 00:40:15,182
without having to mess with the actual content of the lines as spoken by characters.

859
00:40:15,923 --> 00:40:17,344
So, what does the language look like?

860
00:40:17,604 --> 00:40:18,624
Well, it looks like this.

861
00:40:18,724 --> 00:40:20,605
This is actually some of the source code from Night in the Woods

862
00:40:21,026 --> 00:40:22,206
in which we have some logic.

863
00:40:22,286 --> 00:40:24,868
This is not a full node, so there's no end if there.

864
00:40:25,888 --> 00:40:27,869
So, we have characters speaking,

865
00:40:27,950 --> 00:40:32,032
we have tags at the end of lines to indicate localization line codes.

866
00:40:32,632 --> 00:40:34,473
We have logic happening, we have, you know,

867
00:40:34,893 --> 00:40:35,934
the game state being modified.

868
00:40:37,643 --> 00:40:42,748
It was designed to make it easy for writers and easy to block out a scene and also have

869
00:40:42,889 --> 00:40:46,172
full control over what is happening inside the scene story-wise.

870
00:40:46,553 --> 00:40:51,598
So all of the gameplay of Night in the Woods is almost entirely driven by Yarn's script.

871
00:40:51,938 --> 00:40:55,782
So let's take a bit of a closer look at what Yarn language looks like.

872
00:40:56,937 --> 00:41:02,502
These three lines of code here on the left are valid yarn syntax lines.

873
00:41:02,762 --> 00:41:06,446
So each line of dialogue is represented as a line of text.

874
00:41:07,206 --> 00:41:11,591
And what yarn spinner will do is it will read each line one at a time and deliver it to

875
00:41:11,631 --> 00:41:12,031
your game.

876
00:41:12,732 --> 00:41:16,515
Your game then blocks on each line and handles it however it needs to.

877
00:41:16,595 --> 00:41:20,499
So in the case of Night in the Woods, we pop a dialogue bubble, we display each character

878
00:41:20,559 --> 00:41:22,101
one at a time, we wait for player input.

879
00:41:22,541 --> 00:41:28,363
but for example in a game in which you display multiple runs of lines it can also handle that just as easily.

880
00:41:29,583 --> 00:41:30,883
Logic works in a very similar way.

881
00:41:31,563 --> 00:41:34,424
So again, I've said Twine-like syntax probably more often than I should.

882
00:41:35,424 --> 00:41:40,226
Any time that a variable gets accessed, Yarnspinner will actually just defer to your program.

883
00:41:40,366 --> 00:41:42,406
It doesn't have its own built-in variable system.

884
00:41:43,107 --> 00:41:44,127
You implement that yourself.

885
00:41:44,387 --> 00:41:47,788
So it's very easy to integrate into your existing game state system.

886
00:41:49,671 --> 00:41:55,857
The choice system is every time it encounters this pair of double square brackets it will

887
00:41:56,178 --> 00:42:00,602
add that to a list of options and when it reaches the end of a script it will display

888
00:42:00,662 --> 00:42:05,287
all the options it has seen so far and based on what the player has chosen it will go to

889
00:42:05,307 --> 00:42:05,868
a different node.

890
00:42:06,749 --> 00:42:09,712
So it is designed to make it simple to add more options.

891
00:42:10,683 --> 00:42:15,906
Additionally, there's non-visible, non-text based things that a Jansky would need to do.

892
00:42:16,066 --> 00:42:17,787
So that's things like commands.

893
00:42:17,987 --> 00:42:22,470
So all of the stage directions in the game are done with these kinds of commands.

894
00:42:22,530 --> 00:42:27,292
In this case we have an instruction to dismiss the speech bubble and then make the player

895
00:42:27,332 --> 00:42:31,114
character perform a sitting down animation and then we delay for two seconds to create

896
00:42:31,174 --> 00:42:31,514
a bit of a beat.

897
00:42:33,396 --> 00:42:37,139
So all of the non-dialogue stuff is handled in this way.

898
00:42:37,820 --> 00:42:41,884
We also realized that because it's a very, very expressive text representation,

899
00:42:42,304 --> 00:42:46,688
there's a lot of opportunity for creating very short, lightweight choices.

900
00:42:46,829 --> 00:42:51,273
So this is not necessarily things that affect the game story, like its main plot,

901
00:42:51,693 --> 00:42:55,036
but players do like being given options, even if that doesn't...

902
00:42:55,958 --> 00:43:00,504
change anything apart from the fact that whether you say yes or no, like no variables are being

903
00:43:00,524 --> 00:43:05,532
modified here and yet the player is engaged. So this little arrow syntax makes it very

904
00:43:05,552 --> 00:43:07,434
straightforward to create lightweight options.

905
00:43:08,814 --> 00:43:13,577
To integrate this into Unity, I'm not going to assume that everyone here uses Unity because

906
00:43:14,017 --> 00:43:17,260
not everyone does but basically the API looks like this.

907
00:43:17,440 --> 00:43:20,762
You create a monobehaviour that implements some coroutines.

908
00:43:20,842 --> 00:43:23,924
One for lines, one for options, one for commands, that kind of stuff.

909
00:43:24,264 --> 00:43:29,228
You yield on those coroutines as a run and that's the entire thing.

910
00:43:30,029 --> 00:43:36,417
So, you, for example, implement this abstract class called DialogUIBehaviour, and so you

911
00:43:36,457 --> 00:43:39,401
get called, hey, a dialogue began, or hey, a line has arrived.

912
00:43:39,642 --> 00:43:40,343
Here are some options.

913
00:43:40,483 --> 00:43:41,845
Let me know which one the player chose.

914
00:43:42,446 --> 00:43:45,309
Here's a command, also, node complete or dialogue complete.

915
00:43:46,070 --> 00:43:51,274
So to just show this in action, this is another chunk of code from Night in the Woods.

916
00:43:51,695 --> 00:43:55,638
So we have two characters, Bea and Mae, talking to each other, then there's a choice.

917
00:43:55,818 --> 00:44:00,321
And then if the player chooses the option, let's hang out, then we set some game state

918
00:44:00,341 --> 00:44:01,602
and then navigate to a different scene.

919
00:44:02,103 --> 00:44:03,044
So here it is in game.

920
00:44:03,144 --> 00:44:07,667
So what is happening here is Yarnspinner is delivering the individual lines to the game

921
00:44:07,827 --> 00:44:10,349
and that's causing the speech balloons to appear.

922
00:44:11,590 --> 00:44:14,814
It's actually, basically once every eighth of a second,

923
00:44:15,035 --> 00:44:16,777
it's displaying another character

924
00:44:17,057 --> 00:44:19,180
to create that thing filling out.

925
00:44:19,901 --> 00:44:21,443
And then, yeah, when the player chose that option,

926
00:44:21,563 --> 00:44:23,705
then we iris out and then go to the end of the scene.

927
00:44:24,654 --> 00:44:28,836
Yarnspinner is free, it is available right now, it is open source, it is under the MIT

928
00:44:28,856 --> 00:44:31,438
license which means you can use it in your commercial projects.

929
00:44:32,198 --> 00:44:36,101
By the way, this slide and the next slide contain things that you may want to take photos

930
00:44:36,201 --> 00:44:38,402
of, so I will just leave them on screen for a second.

931
00:44:39,002 --> 00:44:41,804
It is all on GitHub so we welcome your contributions.

932
00:44:42,164 --> 00:44:46,446
We also have a fairly active little Slack where people can come and chat about how to

933
00:44:46,506 --> 00:44:47,027
use Yarnspinner.

934
00:44:47,047 --> 00:44:50,108
I am about to move to the next slide so I will give you a second.

935
00:44:53,663 --> 00:44:55,884
That's me, that's my studio, that's Night in the Woods.

936
00:44:56,084 --> 00:44:59,045
Night in the Woods was made by Infinite Fall and Finji.

937
00:44:59,145 --> 00:44:59,705
We helped as well.

938
00:45:00,005 --> 00:45:04,326
I'm also speaking tomorrow morning on some more advanced stuff on being able to mathematically

939
00:45:04,406 --> 00:45:06,007
prove that a line of dialogue is reachable.

940
00:45:06,167 --> 00:45:07,448
So if you're interested in that, come see that.

941
00:45:07,868 --> 00:45:08,208
Thanks very much.

942
00:45:19,914 --> 00:45:22,419
That's it, that was the Tech Toolbox 2019.

943
00:45:22,600 --> 00:45:24,464
Thanks so much for coming, let's hear it one more time

944
00:45:24,504 --> 00:45:25,587
for our six amazing speakers.

