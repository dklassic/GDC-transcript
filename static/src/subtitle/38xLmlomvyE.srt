1
00:00:06,171 --> 00:00:11,496
everybody. Thanks for coming out today. My name is Zach Aikman. I'm the lead engineer at 17

2
00:00:11,496 --> 00:00:15,900
bit. 17 bit is a small 7 man studio based in Seattle and in Kyoto. Most recently we

3
00:00:15,900 --> 00:00:19,883
developed the turn based strategy game skulls of the shogun and right now we're working on

4
00:00:19,883 --> 00:00:24,307
galaxy. Today I'm here to share with you about the process of building procedural

5
00:00:24,307 --> 00:00:25,208
dungeons in our game.

6
00:00:26,283 --> 00:00:31,144
If you're not familiar with the game, Galaxy is a top down 2D space shooter. It's an homage to

7
00:00:31,144 --> 00:00:36,185
16 bit shooters updated with modern tech and modern design. If you try to compare the game to

8
00:00:36,185 --> 00:00:41,146
asteroids, halo, far cry, spelunky or even the early 80s anime series Star Blazers, you

9
00:00:41,146 --> 00:00:47,167
wouldn't be far off. All of these have served as inspirations when designing and building Galaxy.

10
00:00:47,167 --> 00:00:51,528
Galaxy is being developed in unity with a custom AI solution provided by sentient

11
00:00:51,528 --> 00:00:54,689
and will be released this year on the PlayStation 4 and later on Steam.

12
00:00:55,696 --> 00:00:58,898
those of you who haven't seen or heard of the game before, I'm going to play a quick gameplay

13
00:00:58,898 --> 00:01:03,182
video just to give you some contextual reference for those things we're going to be

14
00:01:03,182 --> 00:01:20,435
discussing. Is there audio? Should be playing. Okay. Product not yet rated. So I'm going to

15
00:01:57,719 --> 00:02:17,324
I'm cognizant of your feelings, I'm cognizant of your feelings

16
00:02:28,183 --> 00:02:31,424
2014, please pretend.

17
00:03:04,310 --> 00:03:09,274
At PAX Prime in 2013, we demoed our tutorial level, which we had internally named the fourth

18
00:03:09,274 --> 00:03:13,998
cave. It was the fourth iteration of a lot of hard work. And every rock had been hand placed and

19
00:03:13,998 --> 00:03:18,522
sized. Every region was uniquely lit. Every enemy patrol was strategically placed. Put a lot of

20
00:03:18,522 --> 00:03:22,946
work into hand crafting this sort of experience. We were really happy with the end results, but

21
00:03:22,946 --> 00:03:26,228
it also showed us exactly how much work was left to finish making the game.

22
00:03:27,149 --> 00:03:32,072
The PAX demo also highlighted for us the true strengths of the game, which I've listed here.

23
00:03:32,072 --> 00:03:36,435
And if you notice, the delicate placement of rocks and flora and fauna is not on that list.

24
00:03:36,435 --> 00:03:41,059
Our level design approach started to shift very rapidly once we realized this.

25
00:03:41,059 --> 00:03:45,161
We had a hunch that we could randomly generate our levels, but we didn't quite know exactly how we'd go about that.

26
00:03:45,161 --> 00:03:50,525
And I had some prior experience doing procedural generation on a student game called Synesthete,

27
00:03:50,525 --> 00:03:51,966
and so I volunteered to take on the task.

28
00:03:52,799 --> 00:03:57,464
and by this point I had a fair amount of reading about procedural content generation

29
00:03:57,464 --> 00:04:01,048
techniques and the one that immediately stood out to me the most was something called

30
00:04:01,048 --> 00:04:05,132
cellular automata. Cellular automata refers to a simulation performed on a grid of

31
00:04:05,132 --> 00:04:09,096
cells that are always on or off and are governed by certain rules.

32
00:04:09,488 --> 00:04:14,073
These rules are applied to every cell during each step of the simulation. Each rule examines the

33
00:04:14,073 --> 00:04:18,918
cell's current state, if it's alive or dead, and also the number of living neighbors. If there are

34
00:04:18,918 --> 00:04:23,323
enough living cells surrounding a dead one, it will become alive as well. And similarly, if

35
00:04:23,323 --> 00:04:26,466
there are not enough living cells around a live cell, it will die off.

36
00:04:27,500 --> 00:04:29,902
John Conway's seminal game of life which was devised in 1970

37
00:04:29,902 --> 00:04:33,444
is a collection of these rules that produces an unstable,

38
00:04:33,444 --> 00:04:36,446
constantly shifting field of cells that closely resembles

39
00:04:36,446 --> 00:04:39,948
the rise, fall, and alterations of a society

40
00:04:39,948 --> 00:04:41,890
of living organisms.

41
00:04:41,890 --> 00:04:44,832
The cellular automata game is initialized

42
00:04:44,832 --> 00:04:46,993
with a starting configuration of cells

43
00:04:46,993 --> 00:04:48,354
and then the user sort of steps away

44
00:04:48,354 --> 00:04:51,516
and doesn't interact with it except to observe it.

45
00:04:51,516 --> 00:04:52,717
And here we can see two examples

46
00:04:52,717 --> 00:04:54,678
of cellular automata patterns.

47
00:04:54,678 --> 00:04:57,120
One very simple and one very complex.

48
00:04:57,794 --> 00:05:01,457
Both of these patterns are what are called gliders. A very popular type of pattern in the

49
00:05:01,457 --> 00:05:05,760
game of life. The glider pattern will move across the grid infinitely until it hits the

50
00:05:05,760 --> 00:05:09,963
edge of the grid, which makes it capable of transmitting information. Even if that's only

51
00:05:09,963 --> 00:05:13,987
one bit at a time, it can still transmit information, which means you can build things

52
00:05:13,987 --> 00:05:18,170
like logical gates and or exclusive or etc. Which ultimately means that the game of life is

53
00:05:18,170 --> 00:05:23,094
Turing complete if you build enough little tiny gliders. So the complexity exhibited by

54
00:05:23,094 --> 00:05:26,116
such a relatively simple algorithm is nothing short of phenomenal.

55
00:05:26,607 --> 00:05:29,189
But remember, the rules used in the game of life

56
00:05:29,189 --> 00:05:31,871
were specifically chosen to generate

57
00:05:31,871 --> 00:05:33,292
these types of interactions.

58
00:05:33,292 --> 00:05:35,053
If you play around with the rule set

59
00:05:35,053 --> 00:05:36,735
and pick a different set of rules

60
00:05:36,735 --> 00:05:40,057
that will ultimately bring the grid to a state of equilibrium,

61
00:05:40,057 --> 00:05:41,698
some very interesting shapes start to emerge.

62
00:05:41,698 --> 00:05:43,559
Let's see what happens with a more stable rule set

63
00:05:43,559 --> 00:05:45,381
and a random configuration of starting cells.

64
00:05:47,768 --> 00:05:51,930
perfect. Let's just take a moment to appreciate the beauty of this cave. It's got pretty much

65
00:05:51,930 --> 00:05:57,192
everything you would want in a galaxy level. Islands, narrow passageways, pockets for hiding

66
00:05:57,192 --> 00:06:01,413
or for placing lava pools, there's so many things you can do with the space. And all of this

67
00:06:01,413 --> 00:06:06,215
from that same underlying system that generated those gliders in the previous slide. The only

68
00:06:06,215 --> 00:06:11,817
variation is a rule set that tends towards equilibrium and a much denser starting grid. The

69
00:06:11,817 --> 00:06:16,099
algorithm stabilizes relatively quickly. It only takes about 10 or so iterations to achieve

70
00:06:16,099 --> 00:06:16,239
this.

71
00:06:17,654 --> 00:06:19,395
And here we see a step-by-step generation

72
00:06:19,395 --> 00:06:22,416
of a small cellular automata cave using a custom tool

73
00:06:22,416 --> 00:06:24,457
that we built for Galaxy.

74
00:06:24,457 --> 00:06:27,098
This first animation shows how the cave evolves

75
00:06:27,098 --> 00:06:28,459
from its initial chaotic seed.

76
00:06:28,459 --> 00:06:31,300
You can see it starts with pure noise,

77
00:06:31,300 --> 00:06:33,661
but over time it converges into this really cool shape.

78
00:06:33,661 --> 00:06:35,942
So we fill the starting grid with about 50% living cells

79
00:06:35,942 --> 00:06:38,843
and 50% dead cells, and then run the rule set repeatedly.

80
00:06:40,023 --> 00:06:42,745
and here we can see the final results of that same cave if we

81
00:06:42,745 --> 00:06:45,828
change the proportion of dead to living cells. By seeding the

82
00:06:45,828 --> 00:06:48,470
grid with more dead cells we produce less open space and vice

83
00:06:48,470 --> 00:06:49,951
versa. When we seed it with more living cells we're able to

84
00:06:49,951 --> 00:06:52,033
produce more open space. So we just make our grid bigger, run

85
00:06:52,033 --> 00:06:53,574
the cellular automata algorithm and voila, we're done. Right?

86
00:07:03,527 --> 00:07:07,729
Actually, no, not by a long shot. Because as beautiful as this is, it's impossible to

87
00:07:07,729 --> 00:07:12,312
control. It's visually fantastic and it's exactly what we want, but you still have the

88
00:07:12,312 --> 00:07:16,314
daunting task of writing some sort of algorithm that populates this cave with interesting

89
00:07:16,314 --> 00:07:20,357
objects. You would need to place treasure, enemy patrol paths, hazardous obstacles, all

90
00:07:20,357 --> 00:07:23,859
the things that make the game fun and interesting, you still have to place and that's

91
00:07:23,859 --> 00:07:28,482
actually really, really difficult to do with a shape like this. So cellular automata are

92
00:07:28,482 --> 00:07:31,363
really cool, but they're not a good choice for generating levels at this scale.

93
00:07:32,461 --> 00:07:35,984
They are, however, an ideal solution for generating smaller

94
00:07:35,984 --> 00:07:37,165
chunks within a level.

95
00:07:37,165 --> 00:07:39,526
And so once we decided that the smaller cave chunks were the way

96
00:07:39,526 --> 00:07:43,389
to go, we started experimenting with many different spatial

97
00:07:43,389 --> 00:07:47,753
subdivision techniques to link them together and to form

98
00:07:47,753 --> 00:07:48,934
something larger and cohesive.

99
00:07:48,934 --> 00:07:51,255
Binary space partitioning is a tried and true process for

100
00:07:51,255 --> 00:07:56,159
splitting space into smaller discrete chunks, and so that was

101
00:07:56,159 --> 00:07:57,480
the first method that I turned to.

102
00:07:58,583 --> 00:08:02,765
Given a rect that defined a dungeon size, I would split the space into smaller and smaller

103
00:08:02,765 --> 00:08:07,668
pieces, stopping when each piece was small enough that I could consider it to be room size.

104
00:08:07,668 --> 00:08:12,750
And at the end, some percentage of those rooms would just be thrown out, leaving us with a

105
00:08:12,750 --> 00:08:17,432
scattered collection of rooms to be filled with cellular automata. And from this collection of

106
00:08:17,432 --> 00:08:22,015
rooms, I was able to construct a minimum spanning tree, which gives you the most direct path from

107
00:08:22,015 --> 00:08:23,335
any one node to all of its neighbors.

108
00:08:24,183 --> 00:08:28,505
using the connecting edges of the tree, which in this image are represented by those thick

109
00:08:28,505 --> 00:08:33,769
black lines, I tried to drill tunnels that connected individual rooms together. The result,

110
00:08:33,769 --> 00:08:38,491
which I neglected to take a screenshot of, was kind of a mess. Just imagine that every node on

111
00:08:38,491 --> 00:08:42,033
that graph pictured was replaced with a small cellular automata cave.

112
00:08:42,907 --> 00:08:47,469
connecting corridors were sometimes too long or too angled or the rooms were too far apart or

113
00:08:47,469 --> 00:08:51,470
they intersected the rooms in awkward ways or there were just too many things wrong with

114
00:08:51,470 --> 00:08:55,452
this approach. And I really like solving problems but all I saw in front of me after this

115
00:08:55,452 --> 00:08:59,854
were more and more problems. So this is around the time that I decided to take a few steps

116
00:08:59,854 --> 00:09:06,717
back and reconsider our whole approach. During this time, maybe by chance, my co-worker Paul

117
00:09:06,717 --> 00:09:11,660
pointed me to a Wikipedia page on Z-order curves and suggested that they might be useful.

118
00:09:13,180 --> 00:09:16,444
A Z-order curve is a function that maps multidimensional data

119
00:09:16,444 --> 00:09:18,145
to one dimension while preserving locality.

120
00:09:18,145 --> 00:09:21,549
Sounds like a mouthful, but like everything else

121
00:09:21,549 --> 00:09:23,210
we are going to be exploring, it's

122
00:09:23,210 --> 00:09:24,572
best illustrated with a picture or two.

123
00:09:24,572 --> 00:09:27,295
So here we see a few different instances

124
00:09:27,295 --> 00:09:29,337
of the two-dimensional Z-order curve

125
00:09:29,337 --> 00:09:31,179
at increasingly higher resolutions.

126
00:09:31,179 --> 00:09:34,942
The first one maps a 2 by 2 space, and then a 4 by 4,

127
00:09:34,942 --> 00:09:36,224
8 by 8, and finally 16 by 16.

128
00:09:37,893 --> 00:09:40,575
The Z order function works by interleaving the bits of the X

129
00:09:40,575 --> 00:09:44,118
and Y coordinates to generate a single value called the Z value.

130
00:09:44,118 --> 00:09:47,260
And I'm going to skip over the details of the implementation,

131
00:09:47,260 --> 00:09:49,201
but if it's something you're curious about,

132
00:09:49,201 --> 00:09:51,623
it's fairly straightforward if you're

133
00:09:51,623 --> 00:09:53,124
comfortable with doing bitwise operations in code.

134
00:09:53,124 --> 00:09:55,346
So how does all this relate to Galaxy and cellular automata?

135
00:09:55,346 --> 00:09:58,128
Well, obviously this isn't quite how I'd

136
00:09:58,128 --> 00:09:59,709
imagine our dungeons turning out.

137
00:09:59,709 --> 00:10:01,250
There's a lot of zigging and zagging,

138
00:10:01,250 --> 00:10:03,492
but there are two characteristics

139
00:10:03,492 --> 00:10:05,073
of this algorithm that are of interest to us.

140
00:10:06,293 --> 00:10:10,377
The first is that it gives us a way of representing two dimensional grid with linear values.

141
00:10:10,377 --> 00:10:14,420
If I have a square grid I can generate a linear path that takes us from one end of the dungeon

142
00:10:14,420 --> 00:10:15,862
to the other.

143
00:10:15,862 --> 00:10:17,963
It lets us map physical space to logical space.

144
00:10:17,963 --> 00:10:22,187
And secondly, but just as importantly, this function is invertible.

145
00:10:22,187 --> 00:10:26,391
If I have a Z value I can retrieve the X and Y coordinates very easily and very quickly.

146
00:10:26,391 --> 00:10:31,275
Incrementing the Z value from say zero to three will take you through all the cells

147
00:10:31,275 --> 00:10:32,356
on a two by two grid.

148
00:10:37,569 --> 00:10:38,830
sorry that was really loud.

149
00:10:38,830 --> 00:10:41,851
As it turns out, zeroed curves are part of a whole family

150
00:10:41,851 --> 00:10:44,533
of space-filling curves, which are functions

151
00:10:44,533 --> 00:10:46,814
whose range contain the entire two-dimensional unit square.

152
00:10:46,814 --> 00:10:49,075
So if you have a two by two or a four by four,

153
00:10:49,075 --> 00:10:50,215
eight by eight, whatever, square,

154
00:10:50,215 --> 00:10:52,877
you can ensure that every point in that space

155
00:10:52,877 --> 00:10:55,038
will be touched by one of these curves.

156
00:10:55,038 --> 00:10:56,459
This is a big selling point for me

157
00:10:56,459 --> 00:10:59,300
because one of my pet peeves is handling backtracking

158
00:10:59,300 --> 00:11:01,361
and intersections, which is a common issue

159
00:11:01,361 --> 00:11:03,662
when you're doing pathfinding and space-filling algorithms.

160
00:11:04,943 --> 00:11:09,106
So Hilbert curves are another set of functions that belong to this family. And the moment I saw

161
00:11:09,106 --> 00:11:14,289
this diagram, everything started clicking into place and you may already be able to see why.

162
00:11:14,289 --> 00:11:18,131
They preserve locality even better than Z order curves and the coordinates between points on

163
00:11:18,131 --> 00:11:22,994
the curve never change in both dimensions at once. That means they're orthogonal, i.e.

164
00:11:22,994 --> 00:11:27,257
there are no diagonals, which was something that prevented Z order curves from being really

165
00:11:27,257 --> 00:11:31,699
useful for us. Only having to deal with the four cardinal directions actually simplifies a lot

166
00:11:31,699 --> 00:11:32,020
of stuff.

167
00:11:34,094 --> 00:11:36,436
To work with the Hilbert curve, like with the Z order curve,

168
00:11:36,436 --> 00:11:37,757
all you need are two functions, one

169
00:11:37,757 --> 00:11:40,860
that maps one-dimensional space to two-dimensional space

170
00:11:40,860 --> 00:11:41,460
and vice versa.

171
00:11:41,460 --> 00:11:44,042
And instead of calling the one-dimensional value z,

172
00:11:44,042 --> 00:11:45,784
we're going to call it d for distance.

173
00:11:45,784 --> 00:11:48,666
As you can see, this entire implementation

174
00:11:48,666 --> 00:11:50,788
is only about 20 lines of code, and it's

175
00:11:50,788 --> 00:11:53,390
mostly composed of simple arithmetic and bitwise

176
00:11:53,390 --> 00:11:53,750
operations.

177
00:11:53,750 --> 00:11:56,673
So if we are banding all that spanning tree

178
00:11:56,673 --> 00:11:59,355
in binary space partitioning nonsense

179
00:11:59,355 --> 00:12:01,196
and instead just lay the rooms out on a grid,

180
00:12:01,196 --> 00:12:03,838
it becomes a perfect match for the Hilbert curve.

181
00:12:04,435 --> 00:12:07,579
There is however one glaring fault with using Hilbert curves

182
00:12:07,579 --> 00:12:11,204
to map out the interior of our dungeon and that's that the

183
00:12:11,204 --> 00:12:13,547
path is always the same. In the following example we're trying

184
00:12:13,547 --> 00:12:16,250
to build a dungeon that's four rooms wide and four rooms tall

185
00:12:16,250 --> 00:12:18,593
and so naturally we would want to pair it with a Hilbert curve

186
00:12:18,593 --> 00:12:19,394
whose dimensions match.

187
00:12:21,142 --> 00:12:24,024
And as you can see, if you follow the path of the Hilbert

188
00:12:24,024 --> 00:12:26,406
curve, every cell gets visited, but the shape of the path

189
00:12:26,406 --> 00:12:27,467
is far too recognizable.

190
00:12:27,467 --> 00:12:29,108
It doesn't really look random at all.

191
00:12:29,108 --> 00:12:31,270
Even if you rotate the underlying curve,

192
00:12:31,270 --> 00:12:32,671
it's still very recognizable.

193
00:12:32,671 --> 00:12:35,774
And even in the game, without a level map or something,

194
00:12:35,774 --> 00:12:37,976
the player is going to be able to pick up

195
00:12:37,976 --> 00:12:40,418
on this sort of repetition very, very quickly.

196
00:12:40,418 --> 00:12:41,379
So our solution?

197
00:12:41,379 --> 00:12:44,642
First, we start by expanding the dimension of the Hilbert curve

198
00:12:44,642 --> 00:12:47,004
to the next power of 2, which makes it four times

199
00:12:47,004 --> 00:12:48,065
the size of the dungeon grid.

200
00:12:49,255 --> 00:12:51,396
and then we pick a random offset for the dungeon grid.

201
00:12:51,396 --> 00:12:54,857
So rather than mapping the grid and the curve one to one,

202
00:12:54,857 --> 00:12:57,558
we use the smaller dungeon grid as a sampling kernel

203
00:12:57,558 --> 00:12:59,438
and only take the parts of the Hilbert curve

204
00:12:59,438 --> 00:13:00,618
that are contained within the grid.

205
00:13:00,618 --> 00:13:02,339
We do this by walking along the Hilbert curve

206
00:13:02,339 --> 00:13:05,400
from one end to the other and checking to see

207
00:13:05,400 --> 00:13:08,000
if the XY coordinates at each point on the curve

208
00:13:08,000 --> 00:13:09,601
are contained within that dungeon grid.

209
00:13:09,601 --> 00:13:11,301
If they are, then we add that cell

210
00:13:11,301 --> 00:13:12,402
to the dungeon's main path.

211
00:13:14,746 --> 00:13:19,047
If we ever walk off the grid, we simply keep walking the curve until it returns to a

212
00:13:19,047 --> 00:13:23,708
neighboring cell. If it doesn't ever touch a neighboring cell, then the path ends. And

213
00:13:23,708 --> 00:13:28,030
here are a few more examples of random paths that can be constructed with this approach. In

214
00:13:28,030 --> 00:13:32,111
this animation, all the red cells are dead cells. They've been excluded because they were

215
00:13:32,111 --> 00:13:35,972
unable to connect to the main path as we were walking along the Hilbert curve. So already we

216
00:13:35,972 --> 00:13:41,633
have a lot more variation, but the paths are still a little on the plain side.

217
00:13:42,530 --> 00:13:45,091
And so in most cases, we're left with a handful of dead cells

218
00:13:45,091 --> 00:13:46,172
that we normally just discard.

219
00:13:46,172 --> 00:13:47,733
But it turns out we can reuse those instead

220
00:13:47,733 --> 00:13:49,334
of discarding them entirely.

221
00:13:49,334 --> 00:13:52,156
For every dead cell that is touching the final path,

222
00:13:52,156 --> 00:13:54,298
we consider a candidate for a dead end.

223
00:13:54,298 --> 00:13:56,679
And dead ends are offshoots from the main dungeon path.

224
00:13:56,679 --> 00:13:59,161
And they're represented by the purple cells in this animation.

225
00:13:59,161 --> 00:14:02,843
Dead ends actually play a very important part in Galaxy,

226
00:14:02,843 --> 00:14:05,285
because that's where treasure troves and mission objectives

227
00:14:05,285 --> 00:14:06,226
are usually placed.

228
00:14:06,761 --> 00:14:11,144
If we can't generate enough dead ends to meet the requirements for a particular dungeon,

229
00:14:11,144 --> 00:14:17,609
then we simply discard the results and start again from scratch. And because the whole

230
00:14:17,609 --> 00:14:21,152
process is very, very quick, it's easy to brute force a layout that works. So now we have a way

231
00:14:21,152 --> 00:14:25,475
of generating random layouts within a confined space. It's time we go back to the thing that

232
00:14:25,475 --> 00:14:30,419
started this whole mess, which was generating cave-like rooms. By working from the top down

233
00:14:30,419 --> 00:14:33,982
now instead of from the bottom up, we have a little more information about how to generate

234
00:14:33,982 --> 00:14:35,943
these rooms using cellular automata.

235
00:14:36,935 --> 00:14:42,577
Our approach to generating the dungeons layout added some restrictions to the rooms, which ends up being a really good thing.

236
00:14:42,577 --> 00:14:47,418
When you impose constraints on a problem, it typically makes it easier to solve, and that was definitely the case here.

237
00:14:47,418 --> 00:14:52,280
With a clear understanding of our high-level layout, let's take a look at some of these considerations.

238
00:14:52,280 --> 00:14:58,562
The first one is that we decided that the cellular automata would be used to generate individual rooms of a fixed size.

239
00:14:58,562 --> 00:15:00,703
We always know how big any one chunk is going to be.

240
00:15:01,542 --> 00:15:06,366
We chose a seemingly arbitrary grid size, not at all related, 17 bit, actually, totally

241
00:15:06,366 --> 00:15:11,689
coincidental. Size that provides enough fidelity for the cellular automata features to show

242
00:15:11,689 --> 00:15:16,492
through without being so big that they're unwieldy. Additionally, because these rooms

243
00:15:16,492 --> 00:15:21,636
need to be placed along an exit, or along a path with discrete cardinal exits, the edges of

244
00:15:21,636 --> 00:15:27,540
the rooms need to be open enough to connect to their neighbors. The cellular automata

245
00:15:27,540 --> 00:15:30,102
algorithm does a good job at providing the initial shape of the room.

246
00:15:30,536 --> 00:15:35,278
but sometimes it's not quite right. There's an odd pixel here or there or that passageway is

247
00:15:35,278 --> 00:15:39,339
just not quite wide enough. So it's important for the content creators to be able to go in and

248
00:15:39,339 --> 00:15:44,221
touch up these shapes when they need to. And also empty rooms are boring. We need a way to

249
00:15:44,221 --> 00:15:49,582
specify the placement of loot, of enemies, mission objectives, all that good stuff. And

250
00:15:49,582 --> 00:15:52,803
finally we knew we'd also need some extra data about a room for filtering criteria. Say you

251
00:15:52,803 --> 00:15:57,445
want to make a room that's only going to be used at the end of a dungeon or a room that's used

252
00:15:57,445 --> 00:16:00,226
for a particular mission, we need a way to be able to specify that as well.

253
00:16:01,069 --> 00:16:02,730
So all these requirements helped us build a tool that

254
00:16:02,730 --> 00:16:05,151
was uniquely suited to addressing

255
00:16:05,151 --> 00:16:06,231
the aforementioned challenges.

256
00:16:06,231 --> 00:16:07,652
And there are two main parts to our room template editor.

257
00:16:07,652 --> 00:16:10,152
At the top is a layer-based pixel painting tool

258
00:16:10,152 --> 00:16:14,074
that allows our content creators to create a low-res template

259
00:16:14,074 --> 00:16:15,514
of a cellular automata room.

260
00:16:15,514 --> 00:16:18,576
There's a little button they can click, and just keep clicking it

261
00:16:18,576 --> 00:16:21,297
and it'll keep generating new shapes

262
00:16:21,297 --> 00:16:22,837
that they can start with as a base.

263
00:16:24,158 --> 00:16:25,879
And these templates are simply patterns

264
00:16:25,879 --> 00:16:27,259
for building the actual room at runtime.

265
00:16:27,259 --> 00:16:30,000
All we're doing is seeding the data.

266
00:16:30,000 --> 00:16:31,720
At first glance, I know this looks like a jumbled mess

267
00:16:31,720 --> 00:16:34,901
of colors, but each color represents an individual layer

268
00:16:34,901 --> 00:16:38,222
that controls the placement of a different collection of objects.

269
00:16:38,222 --> 00:16:40,623
And below all that is a panel for editing things

270
00:16:40,623 --> 00:16:42,723
like the template's name, its available exits,

271
00:16:42,723 --> 00:16:45,684
its room spaciousness, metadata, all that stuff,

272
00:16:45,684 --> 00:16:48,945
as well as some controls for previewing the room in-game.

273
00:16:48,945 --> 00:16:50,745
Let's take a little bit of a closer look

274
00:16:50,745 --> 00:16:51,945
at that painting panel up top.

275
00:16:54,230 --> 00:16:58,431
room creation becomes decidedly less complex when you go layer by layer. In the first layer

276
00:16:58,431 --> 00:17:02,572
here the user can paint over anomalies or add their own geometry to the room. In the second

277
00:17:02,572 --> 00:17:07,913
layer they can add way points for enemy patrol paths and then there are layers for bug spawn

278
00:17:07,913 --> 00:17:11,955
points, decoration objects, interactable objects, background objects, fixed obstacles,

279
00:17:11,955 --> 00:17:16,556
floating obstacles, destructible barricades, lava pools, foreground elements to enhance the

280
00:17:16,556 --> 00:17:21,477
sense of depth. All these things come together in this one tool. And they all utilize the same

281
00:17:21,477 --> 00:17:23,738
interface for creating, placing and editing.

282
00:17:26,497 --> 00:17:27,897
So with this tool, at any point in time,

283
00:17:27,897 --> 00:17:29,158
the user can click the Build button

284
00:17:29,158 --> 00:17:31,199
to see what the room will look like in the game.

285
00:17:31,199 --> 00:17:32,960
And as you can probably guess, this particular feature

286
00:17:32,960 --> 00:17:35,242
proved to be invaluable.

287
00:17:35,242 --> 00:17:36,903
But as it turns out, it's not just invaluable.

288
00:17:36,903 --> 00:17:39,044
It's actually kind of a necessity.

289
00:17:39,044 --> 00:17:39,965
Because these are room templates,

290
00:17:39,965 --> 00:17:43,987
the content creator doesn't know exactly the configuration

291
00:17:43,987 --> 00:17:46,148
of the room when it's in the game.

292
00:17:46,148 --> 00:17:47,889
There's a bunch of different templates

293
00:17:47,889 --> 00:17:49,190
or a bunch of different data that

294
00:17:49,190 --> 00:17:50,071
could be applied to this template.

295
00:17:50,071 --> 00:17:51,832
And so it's important for them to be

296
00:17:51,832 --> 00:17:53,833
able to see the room in different configurations.

297
00:17:53,833 --> 00:17:55,834
These configurations are called dungeon zones.

298
00:17:56,865 --> 00:18:01,830
So dungeon zones are how we give a room with the same template their own unique aesthetic.

299
00:18:01,830 --> 00:18:06,094
Typically a dungeon is made up of anywhere from one to four zones with zones often spanning

300
00:18:06,094 --> 00:18:10,138
multiple rooms. They group different parts of a dungeon together and they give the player

301
00:18:10,138 --> 00:18:14,182
some sort of frame of reference when they're traversing it. It allows the player to say

302
00:18:14,182 --> 00:18:18,026
things like, oh I must have circled back around because I'm back in the bug area where I started.

303
00:18:18,026 --> 00:18:21,670
It also allows us to extract a lot of variety from a single room template.

304
00:18:22,897 --> 00:18:27,039
and specifically dungeon zones control how the room is lit, what you see in the background

305
00:18:27,039 --> 00:18:31,922
layer, what you see in the foreground layer, what types of enemies can spawn there, what types

306
00:18:31,922 --> 00:18:36,604
of loot can spawn there, and how many rooms you'll encounter in a row in this particular zone.

307
00:18:36,604 --> 00:18:40,446
Astute viewers may have noticed that the final appearance of these caves is much more

308
00:18:40,446 --> 00:18:46,209
organic than the blocky templates that we've been looking at. And we accomplished this with

309
00:18:46,209 --> 00:18:52,472
two steps. The first is to flood fill the cellular automata grid to detect isolated shapes.

310
00:18:53,542 --> 00:18:57,944
and these points are then triangulated into meshes and then assigned collision data and a

311
00:18:57,944 --> 00:19:02,086
tiling texture and this forms the interior of the cave walls. And then to form the

312
00:19:02,086 --> 00:19:07,909
exteriors, we simply place pre-made rock objects along the edges of those meshes. And this is

313
00:19:07,909 --> 00:19:12,631
what gives the cave walls their jagged roughness. And so finally after all that, hopefully

314
00:19:12,631 --> 00:19:16,613
you now have a pretty good idea of what's going on in this animation. There's the

315
00:19:16,613 --> 00:19:19,594
exaggerated Hilbert curve layout, the placement of rocks.

316
00:19:20,488 --> 00:19:24,312
different colored zones, etc. We finally have one big happy space cave. Space hulks are

317
00:19:24,312 --> 00:19:31,118
another type of dungeon in galaxy that utilize the same procedural system as the caves with a

318
00:19:31,118 --> 00:19:36,263
few key differences. Caves are organic and expansive while space hulks are man made,

319
00:19:36,263 --> 00:19:44,170
they're quantized, they're much more linear as well. I took advantage of the fact that our

320
00:19:44,170 --> 00:19:45,932
space hulks are longer than they are tall.

321
00:19:46,642 --> 00:19:50,104
being never more than two rooms high, the Y coordinate can be represented with a single bit.

322
00:19:50,104 --> 00:19:54,867
So rather than using Hilbert curves to generate these layouts, I generate a random number and I

323
00:19:54,867 --> 00:19:59,069
look at its binary encoding and then alternate between the top and bottom rows of the dungeon

324
00:19:59,069 --> 00:20:04,193
grid. So the bits are read from left to right, placing new cells either in the same row or in

325
00:20:04,193 --> 00:20:08,355
the opposite row depending on whether or not that bit is set. This gives you a very sort of

326
00:20:08,355 --> 00:20:11,317
jagged, zigzaggy effect, which the Hilbert curves do not.

327
00:20:12,908 --> 00:20:14,630
Like with Hilbert curves, generating a new layout

328
00:20:14,630 --> 00:20:15,651
is very, very quick.

329
00:20:15,651 --> 00:20:17,833
And so it's acceptable, again, to brute force our way

330
00:20:17,833 --> 00:20:20,476
to a result that meets the criteria

331
00:20:20,476 --> 00:20:21,497
for a particular level.

332
00:20:21,497 --> 00:20:24,120
And here we can see the grid-based room templates

333
00:20:24,120 --> 00:20:26,122
continuing to pay dividends.

334
00:20:26,122 --> 00:20:27,503
Rather than jumping through hoops

335
00:20:27,503 --> 00:20:31,047
to make the cells appear organic and cave-like,

336
00:20:31,047 --> 00:20:33,169
for space hulks, we embrace their sharp edges

337
00:20:33,169 --> 00:20:35,931
and uniformity by placing metal panels in place of rocks.

338
00:20:39,962 --> 00:20:43,705
I'd like to show one more final example of how we squeezed as much value out of the low

339
00:20:43,705 --> 00:20:46,827
res room template system as we could. By combining elements from both the space

340
00:20:46,827 --> 00:20:52,810
hulks and the cave dungeons, we were able to create a third type of dungeon. In our

341
00:20:52,810 --> 00:20:57,493
games fiction, pirate bases are created by enemy units who have set up shop in cavernous

342
00:20:57,493 --> 00:21:01,956
asteroids. The interiors are man made but they often contain organic elements left over

343
00:21:01,956 --> 00:21:03,057
from the original cave.

344
00:21:03,490 --> 00:21:07,852
and this one literally fell into our lap with almost no extra coding. Just some creative

345
00:21:07,852 --> 00:21:13,134
combinations in the JSON dungeon data. We take elements from both and create a new type

346
00:21:13,134 --> 00:21:19,897
entirely. So with that, I'd like to leave you with a few best practice recommendations. These

347
00:21:19,897 --> 00:21:22,158
are things I wish I'd kept in mind or known about from the start.

348
00:21:23,572 --> 00:21:26,613
The first is to pick a coordinate system and stick to it.

349
00:21:26,613 --> 00:21:29,355
In the Unity editor, the y-axis goes from top to bottom,

350
00:21:29,355 --> 00:21:31,776
and in the game itself, it goes from bottom to top.

351
00:21:31,776 --> 00:21:33,837
And because I was doing so much work in the editor GUI,

352
00:21:33,837 --> 00:21:36,899
I made the mistake of using an inverted coordinate system

353
00:21:36,899 --> 00:21:37,940
when generating dungeon layouts,

354
00:21:37,940 --> 00:21:39,821
which resulted in a lot of unnecessary flipping

355
00:21:39,821 --> 00:21:43,303
along the y-axis at various points in the pipeline.

356
00:21:43,303 --> 00:21:45,224
Before I standardized our coordinate systems,

357
00:21:45,224 --> 00:21:46,985
this led to a lot of frustration when debugging.

358
00:21:48,547 --> 00:21:52,969
Also draw pictures, very very important, and keep them nearby. Having a visual reference is

359
00:21:52,969 --> 00:21:56,851
incredibly invaluable for this sort of thing, especially if this is going to be a multi-week

360
00:21:56,851 --> 00:22:00,954
or multi-month project. You really want to be able to refer back to your original idea or

361
00:22:00,954 --> 00:22:06,557
things you've done in the past that haven't worked out. One of the strengths of our system is

362
00:22:06,557 --> 00:22:11,219
the ability to swap out pieces to generate entirely different results. Keeping systems

363
00:22:11,219 --> 00:22:15,182
modular is notoriously hard in gameplay code, but in a system like this, it's much more

364
00:22:15,182 --> 00:22:18,123
straightforward and there really is no good reason not to do so.

365
00:22:20,727 --> 00:22:24,550
The more you have in some external file format like JSON or XML, the easier it is to make

366
00:22:24,550 --> 00:22:29,173
changes or to write tools that make the changes for you. We chose JSON over using Unity's

367
00:22:29,173 --> 00:22:33,776
scriptable objects because of its flexibility and the ability to modify it quickly in a text

368
00:22:33,776 --> 00:22:40,400
editor. I didn't end up writing any sort of tool for modifying some of the dungeon zone data

369
00:22:40,400 --> 00:22:44,063
and stuff like that because it was easier just to write it by hand and tweak it when you

370
00:22:44,063 --> 00:22:47,705
needed. And when possible, give yourself a target to work towards.

371
00:22:48,166 --> 00:22:51,849
But we had the benefit of having already created a level that we were happy with and met our

372
00:22:51,849 --> 00:22:57,235
expectations and so that was a good benchmark for us when we were redesigning things with a

373
00:22:57,235 --> 00:23:03,821
procedural mindset. Also keep in mind your own working memory capacity. Working memory refers

374
00:23:03,821 --> 00:23:08,105
to the number of concepts that the human brain can hold onto at once. This is particularly

375
00:23:08,105 --> 00:23:11,629
relevant to the discipline of computer programming and helps to explain why the concept of

376
00:23:11,629 --> 00:23:12,549
flow is so important.

377
00:23:13,522 --> 00:23:16,104
I'm sure most of you have experienced this in the past.

378
00:23:16,104 --> 00:23:17,466
You're knee deep in a difficult task

379
00:23:17,466 --> 00:23:19,028
when someone shouts your name across the room

380
00:23:19,028 --> 00:23:21,230
because they desperately need your attention.

381
00:23:21,230 --> 00:23:22,992
The mental model that you've spent the past hour

382
00:23:22,992 --> 00:23:25,294
building in your head all of a sudden falls to the floor,

383
00:23:25,294 --> 00:23:27,677
comes crashing down, and it takes another half an hour

384
00:23:27,677 --> 00:23:29,239
just to ramp up and get back in the groove

385
00:23:29,239 --> 00:23:30,220
where you left off.

386
00:23:31,180 --> 00:23:35,142
When designing and interacting with complex systems like this, it's important to be able to

387
00:23:35,142 --> 00:23:38,903
fully grasp the big picture at any one point in time. And that really can only be

388
00:23:38,903 --> 00:23:43,025
accomplished by providing enough layers of abstraction. So figure out your own working

389
00:23:43,025 --> 00:23:47,566
memory capacity. For me it's about five or six high level concepts. And then refactor your

390
00:23:47,566 --> 00:23:51,168
code when the number of systems in any one layer exceeds that amount.

391
00:23:52,905 --> 00:23:57,048
If I can leave you with one last thing, it's this. There's not a textbook approach to

392
00:23:57,048 --> 00:24:03,073
generating procedural content. The process is absolutely as unique to your game. Just as

393
00:24:03,073 --> 00:24:07,697
unique as your game is. It doesn't need to include difficult or abstract math. Like many

394
00:24:07,697 --> 00:24:12,421
other game development techniques, it's largely a question of creative problem solving and

395
00:24:12,421 --> 00:24:15,824
being willing to attempt new and untested methods. We failed many, many times along the

396
00:24:15,824 --> 00:24:19,487
way, but each failure taught us something new about the game we were trying to make.

397
00:24:21,474 --> 00:24:24,816
Unfortunately I only have about a minute left. I think we're out of time. If you have any

398
00:24:24,816 --> 00:24:29,018
questions I would love to talk with you after, either down here or in the wrap up room in

399
00:24:29,018 --> 00:24:34,080
2002. If you're interested in hearing more about the music side of Galaxy, there's going to be a

400
00:24:34,080 --> 00:24:37,962
really, really sweet talk by Andy coming up right after this one. Thanks for your time.

