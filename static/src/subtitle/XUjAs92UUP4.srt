1
00:00:07,535 --> 00:00:08,555
All right, before we get started,

2
00:00:08,575 --> 00:00:09,796
we have to do something really important.

3
00:00:10,036 --> 00:00:12,497
On the count of three, I want everybody to do jazz hands,

4
00:00:12,557 --> 00:00:12,837
okay?

5
00:00:14,118 --> 00:00:15,879
One, two, three.

6
00:00:19,220 --> 00:00:19,721
Thank you for that.

7
00:00:21,302 --> 00:00:23,583
There will be more jazz hands at the end of the talk.

8
00:00:25,604 --> 00:00:26,284
Let's get started.

9
00:00:28,006 --> 00:00:31,468
Suppose I want engineers at my studio

10
00:00:32,089 --> 00:00:33,590
to be able to build tools.

11
00:00:33,870 --> 00:00:36,412
Now maybe these are new engineers, new hires,

12
00:00:36,472 --> 00:00:37,873
or maybe they're veteran engineers

13
00:00:37,913 --> 00:00:40,415
who have been working in a different discipline altogether

14
00:00:41,255 --> 00:00:43,257
and haven't done a lot of tools work in the past.

15
00:00:44,177 --> 00:00:46,339
Let's say I want them to be empowered

16
00:00:46,719 --> 00:00:48,881
to bring great tools to whatever teams

17
00:00:48,941 --> 00:00:50,021
that they are working on.

18
00:00:50,262 --> 00:00:53,424
And I want them to create tools that fit

19
00:00:54,124 --> 00:00:57,006
into whatever tools ecosystem we already have at the studio.

20
00:00:58,065 --> 00:01:02,967
So what advice would I give to such an engineer who's interested in doing tools development?

21
00:01:03,027 --> 00:01:05,289
What do I wish that somebody had told me?

22
00:01:05,949 --> 00:01:07,270
What can I impart to them?

23
00:01:07,490 --> 00:01:13,813
Well, I might think back over all my experiences and all my trials and errors and trials by

24
00:01:13,873 --> 00:01:18,116
fire and I might say something like, don't build tools for engines.

25
00:01:19,972 --> 00:01:22,793
Too many of us build tools that have the engine

26
00:01:23,173 --> 00:01:24,533
as their primary customer.

27
00:01:25,053 --> 00:01:26,614
But the engine isn't our customer.

28
00:01:27,134 --> 00:01:27,834
It doesn't suffer.

29
00:01:28,855 --> 00:01:29,915
It doesn't call for help.

30
00:01:30,735 --> 00:01:32,836
It doesn't have great ideas to make the tools better.

31
00:01:34,417 --> 00:01:36,877
So as nice and pithy as that is, I think we can do better.

32
00:01:37,278 --> 00:01:39,298
It's easy to say don't do this or don't do that,

33
00:01:39,378 --> 00:01:40,299
but what do you do instead?

34
00:01:41,419 --> 00:01:42,539
We build tools for humans.

35
00:01:42,980 --> 00:01:44,640
Yes, our customers are human.

36
00:01:45,741 --> 00:01:48,662
And humans think about things differently than engines do.

37
00:01:49,189 --> 00:01:50,349
Humans also make mistakes.

38
00:01:52,311 --> 00:01:55,192
But that's not good enough, because an engineer might just

39
00:01:55,232 --> 00:01:58,274
build tools for themselves, right?

40
00:01:58,334 --> 00:02:01,576
Something that reflects how they think about the game content

41
00:02:01,596 --> 00:02:02,457
that's being built.

42
00:02:05,099 --> 00:02:07,200
Build tools for humans who aren't you?

43
00:02:08,251 --> 00:02:12,895
This is good because while you as an engineer are probably a brilliant technical mind,

44
00:02:12,955 --> 00:02:16,578
you might be building tools for brilliant non-technical people.

45
00:02:17,438 --> 00:02:21,201
But I like this though. This is starting to sound more like what all the UX books out there

46
00:02:21,241 --> 00:02:23,844
tell me to do, design with your users in mind, right?

47
00:02:25,305 --> 00:02:27,286
It's getting better, but I'm not quite satisfied with this,

48
00:02:27,386 --> 00:02:29,448
because game development has this weird problem.

49
00:02:29,768 --> 00:02:31,910
We have a lot of engineers.

50
00:02:32,852 --> 00:02:37,337
And they could turn out human-centered tools, it's true,

51
00:02:37,557 --> 00:02:41,080
but then maybe you just end up with a pile of tools.

52
00:02:41,741 --> 00:02:43,122
Does anybody here know what I mean

53
00:02:43,162 --> 00:02:44,583
when I say a pile of tools?

54
00:02:46,045 --> 00:02:46,885
I see nodding heads.

55
00:02:47,026 --> 00:02:47,966
Are they fun to work with?

56
00:02:48,887 --> 00:02:49,708
I see shaking heads.

57
00:02:50,829 --> 00:02:53,872
So it makes me wonder, are we building the right thing?

58
00:02:55,700 --> 00:02:56,641
I don't want you to build tools.

59
00:02:56,801 --> 00:02:58,001
I want you to build workflows.

60
00:02:58,722 --> 00:03:01,043
Things that comprise all of those steps

61
00:03:01,603 --> 00:03:03,104
that content creators take, right?

62
00:03:03,144 --> 00:03:04,545
And all the tools they involve

63
00:03:04,905 --> 00:03:07,306
and how the users flow through their work.

64
00:03:07,426 --> 00:03:10,767
I want users to have a cohesive, coherent experience.

65
00:03:11,928 --> 00:03:12,848
It's getting there, right?

66
00:03:14,449 --> 00:03:17,170
This idea that you should build workflows

67
00:03:17,230 --> 00:03:18,971
for humans who aren't you is something

68
00:03:19,151 --> 00:03:22,993
that I think most engineers would agree with philosophically.

69
00:03:24,075 --> 00:03:25,536
But even this is oversimplistic.

70
00:03:26,736 --> 00:03:29,597
Making it practical is especially hard.

71
00:03:29,737 --> 00:03:32,258
And making it practical is exactly what we wanted to do

72
00:03:32,838 --> 00:03:35,799
at VV because we're interested in enabling disciplines

73
00:03:35,859 --> 00:03:37,699
to work together and collaborate.

74
00:03:38,299 --> 00:03:40,200
And we want new engineers in this space

75
00:03:40,220 --> 00:03:41,520
to be successful quickly.

76
00:03:42,538 --> 00:03:46,060
So what I'm sharing today grew out of sort of this line of thinking.

77
00:03:46,740 --> 00:03:53,083
We wanted to distill learnings from our past and our successes into knowledge that could

78
00:03:53,183 --> 00:03:56,644
guide future engineers, even non-tools engineers.

79
00:03:58,105 --> 00:03:59,526
Because we did have past success.

80
00:04:00,306 --> 00:04:05,108
Shortly after I started at VV, I worked with other tools engineers to create Alchemy Laboratory.

81
00:04:05,730 --> 00:04:08,353
Alchemy is VV's proprietary engine tech

82
00:04:08,393 --> 00:04:09,954
and Laboratory is its tool set.

83
00:04:10,795 --> 00:04:13,537
All of its tools are oriented around workflows

84
00:04:13,577 --> 00:04:15,319
which roughly map to disciplines

85
00:04:15,579 --> 00:04:17,241
and our users could mix and match

86
00:04:17,281 --> 00:04:19,102
different parts of the tool to craft

87
00:04:19,142 --> 00:04:20,624
whatever worked best for their workflow.

88
00:04:21,144 --> 00:04:24,787
This, for instance, is the default world builder workflow

89
00:04:25,308 --> 00:04:27,810
where we built levels for Skylanders and Crash.

90
00:04:28,691 --> 00:04:30,132
This is Visual Script Builder

91
00:04:30,452 --> 00:04:32,094
wherein we built visual scripts.

92
00:04:33,285 --> 00:04:35,687
And there are other workflows in the tool set, too, for UI

93
00:04:35,707 --> 00:04:38,328
and VFX and cinematics and localization and all that.

94
00:04:39,249 --> 00:04:42,971
Laboratory was a big investment in workflow development at VV.

95
00:04:42,991 --> 00:04:44,912
And we came out of it with really good results.

96
00:04:45,052 --> 00:04:47,694
I got to work with some crazy smart engineers who

97
00:04:47,754 --> 00:04:51,176
had a passion for building tools with users

98
00:04:51,876 --> 00:04:52,916
and produced great results.

99
00:04:54,337 --> 00:04:55,918
In the year that we brought Lab online,

100
00:04:56,659 --> 00:04:59,920
workflows and efficiencies were seen as our studio's biggest

101
00:05:00,041 --> 00:05:00,441
strengths.

102
00:05:02,001 --> 00:05:04,321
and our users rated them very highly

103
00:05:04,381 --> 00:05:06,902
compared to others that they had used in the industry.

104
00:05:08,382 --> 00:05:10,823
We don't attribute our success in Laboratory

105
00:05:10,863 --> 00:05:13,323
to any one guiding principle, nothing that simple.

106
00:05:13,603 --> 00:05:16,924
Laboratory was the culmination of years

107
00:05:17,284 --> 00:05:18,865
of tools engineering expertise,

108
00:05:18,885 --> 00:05:20,445
and a lot of it came from trial and error,

109
00:05:20,525 --> 00:05:23,326
and a lot of it came from investment in new things,

110
00:05:23,406 --> 00:05:25,586
and conversations with users and partners,

111
00:05:26,526 --> 00:05:28,907
and some of it was learned through disruption

112
00:05:29,427 --> 00:05:30,367
and false starts.

113
00:05:31,267 --> 00:05:32,407
and inefficient deliveries.

114
00:05:33,708 --> 00:05:36,410
So we wanted to codify some of what we felt

115
00:05:36,490 --> 00:05:38,771
had made VV successful at workflow development

116
00:05:38,811 --> 00:05:39,372
over the years.

117
00:05:40,272 --> 00:05:44,655
We also wanted to provide direction for future efforts.

118
00:05:44,735 --> 00:05:47,677
We wanted to sort of declare where we wanted

119
00:05:47,717 --> 00:05:50,979
our investments to go in a blue sky sort of way.

120
00:05:51,419 --> 00:05:53,160
We wanted to make something that we could share

121
00:05:53,640 --> 00:05:56,022
with engineers that were new, veteran engineers,

122
00:05:56,102 --> 00:05:57,162
and now good people like you.

123
00:05:58,328 --> 00:06:01,169
We created a set of wiki pages, and we called them our

124
00:06:01,189 --> 00:06:02,589
workflow development guidelines.

125
00:06:02,950 --> 00:06:05,311
The original target audience was those engineers I've been

126
00:06:05,331 --> 00:06:07,631
talking about who wanted to participate in workflow

127
00:06:07,651 --> 00:06:08,152
development.

128
00:06:08,272 --> 00:06:12,453
But I think that this advice is consumable by really anyone

129
00:06:12,753 --> 00:06:16,095
working in this space, tools designers, UX thinkers, and

130
00:06:16,135 --> 00:06:16,475
the like.

131
00:06:17,455 --> 00:06:19,936
The guidelines themselves are technology and project

132
00:06:20,136 --> 00:06:22,417
agnostic, and they're organized into three

133
00:06:22,457 --> 00:06:26,379
categories, UI and UX design, engineering and

134
00:06:26,419 --> 00:06:27,099
implementation.

135
00:06:28,011 --> 00:06:30,052
and something I call creative mindsets.

136
00:06:31,213 --> 00:06:33,494
We want engineers to look at these guidelines

137
00:06:33,554 --> 00:06:37,297
and think, okay, this is something I can actually do.

138
00:06:37,417 --> 00:06:38,377
This is concrete.

139
00:06:38,438 --> 00:06:39,918
This is a trade-off I can make.

140
00:06:39,979 --> 00:06:41,880
This is a decision I can think about

141
00:06:41,920 --> 00:06:43,100
or talk about with my team.

142
00:06:45,042 --> 00:06:46,823
Now, standard GDC disclaimer,

143
00:06:47,463 --> 00:06:48,924
I'm sharing these because I feel

144
00:06:49,004 --> 00:06:51,346
that they will be valuable to your discussions back home.

145
00:06:51,526 --> 00:06:54,127
I hope you agree, but they are not the only way.

146
00:06:54,207 --> 00:06:55,608
This is not the one true path.

147
00:06:56,985 --> 00:07:00,889
These are what we want, not necessarily what we have.

148
00:07:01,029 --> 00:07:03,351
Remember, some of these are partly aspirational.

149
00:07:03,991 --> 00:07:05,533
I think, though, that you'll get a lot of insight

150
00:07:05,573 --> 00:07:07,094
into what we have come to value

151
00:07:07,614 --> 00:07:09,136
based on our past experiences

152
00:07:09,176 --> 00:07:11,538
and where we think ground is still fertile.

153
00:07:12,759 --> 00:07:13,780
They are not scientific.

154
00:07:14,760 --> 00:07:17,743
What you're about to see is more of an applied retrospective.

155
00:07:17,823 --> 00:07:21,947
It's a distillation of many past wins and not-wins,

156
00:07:22,907 --> 00:07:24,729
observations, conversations, lessons learned,

157
00:07:24,749 --> 00:07:25,530
and all that business.

158
00:07:26,534 --> 00:07:29,817
It's not backed by any quantitative user research,

159
00:07:30,137 --> 00:07:31,899
though we would not discourage that,

160
00:07:31,919 --> 00:07:32,940
or we wouldn't turn it away.

161
00:07:33,821 --> 00:07:35,983
But they are sound recommendations,

162
00:07:36,084 --> 00:07:37,545
despite the lack of hard data,

163
00:07:37,585 --> 00:07:39,507
and they have sparked some really good conversations.

164
00:07:41,049 --> 00:07:43,371
And back home, not so much here,

165
00:07:43,411 --> 00:07:44,713
this is a living document.

166
00:07:45,313 --> 00:07:47,395
I was making changes to these guidelines

167
00:07:47,435 --> 00:07:48,496
as recently as last night.

168
00:07:49,652 --> 00:07:55,317
So, we expect these to change over time as our business changes, as our engineers change,

169
00:07:55,357 --> 00:07:56,578
and as our learnings change.

170
00:07:58,139 --> 00:08:01,642
So, we'll start with user interface and user experience design.

171
00:08:02,815 --> 00:08:08,758
A lot of you probably know that UI and UX design are really big fields outside of game

172
00:08:08,798 --> 00:08:09,239
development.

173
00:08:09,879 --> 00:08:16,263
There's been an upward trend in UI and UX jobs over more than the last decade, and it's

174
00:08:16,343 --> 00:08:21,026
my opinion that the literature is sort of still catching up to some of the practical

175
00:08:21,126 --> 00:08:23,207
aspects, especially game development.

176
00:08:24,008 --> 00:08:28,210
A lot of it, I find, is geared toward helping people buy stuff online, which is not really

177
00:08:28,250 --> 00:08:30,011
what we're trying to teach our engineers.

178
00:08:31,052 --> 00:08:32,473
We wanted something that was more approachable.

179
00:08:33,392 --> 00:08:35,874
These guidelines are more of a highlight reel.

180
00:08:35,934 --> 00:08:41,057
These are lensed through experiences we've actually had

181
00:08:41,217 --> 00:08:43,199
that the literature probably wouldn't even know

182
00:08:43,279 --> 00:08:44,199
how to emphasize.

183
00:08:46,281 --> 00:08:47,682
All right, the first section is

184
00:08:47,762 --> 00:08:49,703
boost workflows with keyboard support.

185
00:08:50,704 --> 00:08:53,866
Because skilled users have very high expectations

186
00:08:54,186 --> 00:08:56,387
for making keyboards a part of their work

187
00:08:56,427 --> 00:08:57,708
to help them work faster.

188
00:08:58,249 --> 00:09:00,790
Here are some things you, as an engineer, can do.

189
00:09:02,633 --> 00:09:06,795
You can support precise input because users may know exacts.

190
00:09:06,895 --> 00:09:09,676
They may know exactly how many missiles a turret should fire.

191
00:09:09,736 --> 00:09:12,557
They may know exactly how long a cinematic shot length is.

192
00:09:13,157 --> 00:09:16,198
Don't force users to type in an exact quantity.

193
00:09:16,298 --> 00:09:18,839
Don't force users to express an exact quantity

194
00:09:19,399 --> 00:09:21,940
using anything slower than typing it on their keyboard.

195
00:09:22,000 --> 00:09:23,840
They will appreciate the acceleration.

196
00:09:25,019 --> 00:09:30,642
It is, however, good and clever to blend gross precision with precise in-

197
00:09:30,822 --> 00:09:33,363
I'm sorry, gross input with precision input,

198
00:09:33,423 --> 00:09:35,604
such as using controls like a drag slider there,

199
00:09:35,624 --> 00:09:36,805
where you can type on the num-

200
00:09:36,825 --> 00:09:38,906
or you click on the number to type something new in,

201
00:09:38,926 --> 00:09:40,707
or you can drag it like an up-down spinner.

202
00:09:42,648 --> 00:09:45,389
You can accelerate data entry by anticipating input.

203
00:09:46,072 --> 00:09:50,175
Users should avoid typing what the tool already knows or can infer.

204
00:09:50,936 --> 00:09:56,080
Users may know exact names or identifiers, or they may only know fragments of them.

205
00:09:56,460 --> 00:10:00,263
You can support both with predictive input.

206
00:10:00,283 --> 00:10:02,685
Or you can anticipate those little micro-workflows.

207
00:10:02,765 --> 00:10:06,128
So if you think of file open as a micro-workflow,

208
00:10:06,508 --> 00:10:09,430
that's something you can accelerate to with like a recent files list.

209
00:10:11,210 --> 00:10:13,211
You can accelerate tasks with shortcut keys.

210
00:10:13,932 --> 00:10:17,614
Shortcut keys save users time by reducing mouse movement

211
00:10:17,674 --> 00:10:20,495
or streamlining the flow from one activity to the next.

212
00:10:21,476 --> 00:10:24,317
So for example, if a user intends to select two objects,

213
00:10:24,898 --> 00:10:26,659
group them, and then move the group,

214
00:10:27,279 --> 00:10:29,961
you have an opportunity to accelerate that

215
00:10:30,041 --> 00:10:32,302
by adding a shortcut key to the group operation, right?

216
00:10:33,102 --> 00:10:37,946
Generally, you should favor assigning shortcut keys to actions that would otherwise require

217
00:10:37,966 --> 00:10:41,949
the user to shift their focus away from what they're currently looking at.

218
00:10:44,191 --> 00:10:48,895
And you should also beware shortcut key pitfalls, because users are prone to typos, so don't

219
00:10:48,955 --> 00:10:50,476
put create next to delete.

220
00:10:51,377 --> 00:10:52,578
Be careful of proximity.

221
00:10:53,558 --> 00:10:59,783
Shortcut keys are a scarce resource, and unless your workflow has a very good custom binding

222
00:11:01,268 --> 00:11:04,552
Be judicious about assigning new ones because shortcut keys are forever.

223
00:11:04,872 --> 00:11:08,216
Users internalize and habituate these very quickly.

224
00:11:08,696 --> 00:11:12,220
And after they've had that opportunity, you risk changing them at your peril.

225
00:11:14,102 --> 00:11:15,804
You can make keyboard support discoverable.

226
00:11:16,533 --> 00:11:17,614
Tool tips are great for this.

227
00:11:18,034 --> 00:11:19,635
Info tips, too, like the kinds that you

228
00:11:19,675 --> 00:11:22,095
see in just about any Microsoft product right now, right?

229
00:11:22,676 --> 00:11:24,536
You can promote discoverability also

230
00:11:24,596 --> 00:11:26,617
by deferring to idiomatic shortcuts.

231
00:11:27,137 --> 00:11:29,738
Control-S always means save.

232
00:11:30,458 --> 00:11:33,619
F2 always means enter some kind of editing mode

233
00:11:33,659 --> 00:11:34,600
if you're in a text field.

234
00:11:37,241 --> 00:11:39,481
Next section, build cohesive workflows,

235
00:11:39,821 --> 00:11:41,682
or features that play together, stay together.

236
00:11:42,642 --> 00:11:46,847
Cohesive workflows feel organized and task-oriented

237
00:11:47,327 --> 00:11:49,369
and integrated with the user's other work,

238
00:11:49,770 --> 00:11:53,594
while incohesive workflows feel disjointed, scattered.

239
00:11:53,974 --> 00:11:55,716
They may even seem incomplete.

240
00:11:56,777 --> 00:11:57,818
Here are some things that you can do.

241
00:11:59,213 --> 00:12:01,815
You can promote discoverability and findability.

242
00:12:01,915 --> 00:12:04,337
Discoverability is the degree to which users

243
00:12:04,377 --> 00:12:06,718
can discover what features are available to them.

244
00:12:07,419 --> 00:12:09,901
Findability is the degree to which they can find

245
00:12:09,941 --> 00:12:11,482
what they already expect to be there.

246
00:12:12,422 --> 00:12:13,363
And to promote these things,

247
00:12:13,403 --> 00:12:16,665
you can keep things close together, clustered by task,

248
00:12:17,626 --> 00:12:18,646
like this doesn't do.

249
00:12:18,926 --> 00:12:22,429
This is a screenshot from Laboratory Context Menu

250
00:12:22,449 --> 00:12:23,189
in the World Builder.

251
00:12:23,770 --> 00:12:25,211
One of these things is not like the other.

252
00:12:25,671 --> 00:12:26,992
Remember, I said this is what we want,

253
00:12:27,032 --> 00:12:28,373
not necessarily what we have.

254
00:12:29,791 --> 00:12:34,576
Keeping things close together can mean minimizing certain distances, concrete and abstract.

255
00:12:35,156 --> 00:12:37,619
Distance can be mouse movement, eye movement.

256
00:12:38,179 --> 00:12:42,704
It can also be number of clicks, number of levels deep in a menu that a person has to

257
00:12:42,764 --> 00:12:44,285
go in order to find what they want.

258
00:12:45,545 --> 00:12:48,487
Over time, users are going to build a strong mental map

259
00:12:48,907 --> 00:12:49,748
of your workflow.

260
00:12:50,589 --> 00:12:52,370
And over time, they're going to learn

261
00:12:52,430 --> 00:12:54,371
where to find what they expect,

262
00:12:54,752 --> 00:12:57,253
or they're gonna know how to make a reasonable best guess.

263
00:12:58,034 --> 00:13:00,476
They're also going to remember what they haven't tried yet,

264
00:13:00,816 --> 00:13:01,997
so that they can go back to it later.

265
00:13:03,818 --> 00:13:05,359
You can avoid dumping grounds.

266
00:13:06,120 --> 00:13:08,562
You see this most with any settings dialog.

267
00:13:09,760 --> 00:13:12,583
and in some rushed UI designs where widgets

268
00:13:12,643 --> 00:13:14,425
are sort of thrown into a big pile

269
00:13:14,485 --> 00:13:16,466
because nobody knew where else to put them.

270
00:13:17,647 --> 00:13:21,231
Dumping grounds indicate poor cohesion in your workflow.

271
00:13:21,271 --> 00:13:24,053
Maybe you're not clustering things quite appropriately.

272
00:13:24,914 --> 00:13:27,916
You are at risk of users having to do lots of parsing

273
00:13:28,017 --> 00:13:30,479
and scanning to find the things that change

274
00:13:30,519 --> 00:13:31,800
the behavior they're interested in,

275
00:13:32,120 --> 00:13:34,122
if they find it at all and don't give up.

276
00:13:35,148 --> 00:13:38,229
And the bigger these get, the harder they are to internalize,

277
00:13:38,289 --> 00:13:40,229
and the more likely users are to ignore them.

278
00:13:41,169 --> 00:13:43,830
So pay attention to how you group things

279
00:13:44,030 --> 00:13:45,010
in your user interface.

280
00:13:45,070 --> 00:13:48,631
Pay attention to offering searchability and filterability

281
00:13:48,691 --> 00:13:51,452
and things where long lists are the rule of the day.

282
00:13:52,312 --> 00:13:55,093
We see this good trend in a lot of settings dialogues

283
00:13:55,113 --> 00:13:57,214
you're probably familiar with, like ReSharper lets you

284
00:13:57,314 --> 00:13:59,554
search for settings, iOS, Chrome.

285
00:13:59,574 --> 00:14:00,695
We're seeing it more and more and more.

286
00:14:03,012 --> 00:14:05,254
You can understand the before and after.

287
00:14:06,575 --> 00:14:10,299
Users may already have previous steps and next steps

288
00:14:10,499 --> 00:14:12,781
in the front of their mind as they're working.

289
00:14:13,482 --> 00:14:16,024
They might have context switched into your workflow,

290
00:14:16,044 --> 00:14:18,787
and they're very likely to context switch out of it.

291
00:14:19,808 --> 00:14:22,731
So consider, where is that attention coming from?

292
00:14:23,352 --> 00:14:24,413
Where is it going next?

293
00:14:25,452 --> 00:14:27,593
Are those contexts easy to switch between?

294
00:14:28,153 --> 00:14:31,815
Is the user having to do any mental gymnastics or heavy load

295
00:14:31,895 --> 00:14:35,817
conversion in order to sort of ship their mental map

296
00:14:35,897 --> 00:14:37,878
from one context to another?

297
00:14:38,738 --> 00:14:40,559
If so, is there anything that you can do to help?

298
00:14:40,679 --> 00:14:43,921
Can your workflow or some software integration

299
00:14:44,041 --> 00:14:47,262
help ship meaningful data between contexts?

300
00:14:47,402 --> 00:14:50,884
Can your proprietary tools send data to the DCC tool

301
00:14:51,404 --> 00:14:54,766
so that the user can avoid a big export-import workflow?

302
00:14:55,740 --> 00:14:56,440
Probably worth it.

303
00:14:57,621 --> 00:15:00,383
You can ask yourself what bigger task,

304
00:15:00,403 --> 00:15:02,064
what bigger creative goal maybe

305
00:15:02,225 --> 00:15:03,726
is the user trying to accomplish?

306
00:15:04,486 --> 00:15:07,468
Because that may affect the inputs and the outputs

307
00:15:07,528 --> 00:15:09,610
that they either have or that they want

308
00:15:10,250 --> 00:15:12,352
that your workflow may have to produce.

309
00:15:13,473 --> 00:15:15,074
Talking to them is really good for this.

310
00:15:17,756 --> 00:15:20,638
In the engineering section, which is general guidance

311
00:15:20,758 --> 00:15:23,560
about sort of some of the implementation details

312
00:15:23,600 --> 00:15:24,781
that we find are really helpful,

313
00:15:25,800 --> 00:15:28,022
You can practice defensive engineering.

314
00:15:29,243 --> 00:15:30,784
Consider the potential for abuse,

315
00:15:31,885 --> 00:15:33,886
because users are always looking

316
00:15:34,167 --> 00:15:36,228
for the paths of least resistance.

317
00:15:37,009 --> 00:15:39,451
One tools developer at VV was always fond of saying,

318
00:15:39,511 --> 00:15:43,133
it is amazing what content creators will put up with.

319
00:15:43,634 --> 00:15:44,655
And I'm sure a lot of you know

320
00:15:44,695 --> 00:15:46,296
what suffering in silence means.

321
00:15:47,877 --> 00:15:50,259
Scott Meyer is a famous programmer.

322
00:15:50,519 --> 00:15:51,760
He had some really good advice

323
00:15:51,800 --> 00:15:54,322
for people who were building interfaces in code.

324
00:15:55,258 --> 00:16:00,041
He said, make interfaces easy to use correctly and hard to use incorrectly.

325
00:16:00,741 --> 00:16:01,782
And I really like that.

326
00:16:02,382 --> 00:16:04,643
I think it applies really well to workflow design as well.

327
00:16:05,064 --> 00:16:10,027
Because if it's easier to do something, if it's easier to do something the wrong way

328
00:16:10,047 --> 00:16:15,910
and still get the same result, you should expect that your users will find and converge

329
00:16:16,050 --> 00:16:16,851
on that way.

330
00:16:17,211 --> 00:16:18,251
They will tell their friends.

331
00:16:19,787 --> 00:16:22,367
they may find shortcuts to circumvent

332
00:16:22,427 --> 00:16:24,648
certain validation processes in your tool.

333
00:16:25,288 --> 00:16:26,889
We had a problem for a long time

334
00:16:26,949 --> 00:16:30,169
where users would modify game data in Notepad

335
00:16:30,490 --> 00:16:33,290
after a bad merge because the workflow

336
00:16:33,330 --> 00:16:36,011
for doing it in the tool was harder.

337
00:16:36,031 --> 00:16:38,712
That's a problem we had to solve.

338
00:16:40,252 --> 00:16:42,613
Whenever flows get bad like that,

339
00:16:42,633 --> 00:16:46,054
it increases the likelihood that users

340
00:16:46,074 --> 00:16:48,555
are going to look for shortcuts, and it's always happening.

341
00:16:50,560 --> 00:16:52,561
You can avoid exposing everything.

342
00:16:52,941 --> 00:16:54,881
This is similar to dumping grounds,

343
00:16:54,921 --> 00:16:56,442
but this is more about focus

344
00:16:57,282 --> 00:16:59,803
and reducing demands on users' attention.

345
00:17:00,623 --> 00:17:03,584
There are more knobs and dials in a modern game engine

346
00:17:03,624 --> 00:17:06,745
than any individual user is going to know what to do with.

347
00:17:07,045 --> 00:17:09,965
And what we've observed is that when users are confused,

348
00:17:10,005 --> 00:17:12,226
they'll just start probing the UI.

349
00:17:12,446 --> 00:17:13,426
They don't know what anything means.

350
00:17:13,446 --> 00:17:14,687
They'll just start clicking buttons

351
00:17:14,727 --> 00:17:17,287
to see if they can elicit a response

352
00:17:17,367 --> 00:17:18,588
from the game or from the tool.

353
00:17:19,760 --> 00:17:23,645
Eventually, they're likely to get confused and into some confusing state,

354
00:17:23,765 --> 00:17:25,748
and they probably need help getting out.

355
00:17:26,809 --> 00:17:34,478
So, it helps if you reduce your UI to only that subset of controls and knobs and dials

356
00:17:34,518 --> 00:17:37,321
that users need to do most of the job.

357
00:17:38,745 --> 00:17:40,845
80% of your users probably only need a subset.

358
00:17:41,405 --> 00:17:44,246
That one user who really does need access

359
00:17:44,346 --> 00:17:46,427
to the texel blending function

360
00:17:46,727 --> 00:17:48,567
on the fourth technique in the pipeline,

361
00:17:49,107 --> 00:17:51,128
they can go to a different part of the UI,

362
00:17:51,188 --> 00:17:53,608
maybe an advanced dialog or something like it.

363
00:17:56,749 --> 00:17:58,830
Avoid relying on tribal knowledge

364
00:17:59,490 --> 00:18:02,090
because it is a fallacy that most users

365
00:18:02,170 --> 00:18:04,391
will know the right way to do something.

366
00:18:05,877 --> 00:18:07,417
When faced with this situation,

367
00:18:07,557 --> 00:18:09,258
it really hurts their confidence.

368
00:18:09,518 --> 00:18:11,119
They'll literally start asking questions like,

369
00:18:11,179 --> 00:18:12,400
what do I do next?

370
00:18:13,480 --> 00:18:14,220
Is this going to work?

371
00:18:14,581 --> 00:18:16,621
I don't recognize any of these terms.

372
00:18:16,662 --> 00:18:18,262
I don't see any meaning here.

373
00:18:18,682 --> 00:18:20,683
How do I make this do what I want?

374
00:18:22,124 --> 00:18:24,145
Especially for engineers who are working

375
00:18:24,165 --> 00:18:25,165
with other engineers,

376
00:18:25,726 --> 00:18:28,787
tribal knowledge sometimes includes what you shouldn't do.

377
00:18:29,707 --> 00:18:32,849
Consider any engineering trap in your code base.

378
00:18:33,720 --> 00:18:36,603
that everybody at your studio knows how to avoid,

379
00:18:36,903 --> 00:18:38,925
knows that it's there, knows to step around it.

380
00:18:39,446 --> 00:18:41,307
Now you partner with a different studio

381
00:18:42,368 --> 00:18:43,449
and there's no documentation

382
00:18:44,110 --> 00:18:45,331
and the other studio doesn't know

383
00:18:45,371 --> 00:18:46,552
that that pitfall is there.

384
00:18:47,493 --> 00:18:50,516
VV has been on the giving and receiving end

385
00:18:50,596 --> 00:18:51,937
of that particular relationship.

386
00:18:51,977 --> 00:18:52,357
It is no fun.

387
00:18:54,190 --> 00:18:57,351
I had a really hard time finding a visual aid for this slide,

388
00:18:57,471 --> 00:18:58,571
but I did think this was fun.

389
00:18:59,051 --> 00:19:01,972
This word cloud is all of the names

390
00:19:02,212 --> 00:19:05,514
we ever gave to tools in the Alchemy tool

391
00:19:05,534 --> 00:19:07,454
set prior to laboratory.

392
00:19:08,655 --> 00:19:13,376
Can anybody tell me, current VV employees don't count,

393
00:19:13,416 --> 00:19:15,037
but I'm curious to know if anybody else here,

394
00:19:15,097 --> 00:19:16,637
can anybody tell me which one of these

395
00:19:16,698 --> 00:19:20,759
is the visual effects workflow or the world building

396
00:19:20,779 --> 00:19:21,179
workflow?

397
00:19:22,640 --> 00:19:22,980
You can.

398
00:19:24,733 --> 00:19:24,934
What?

399
00:19:26,195 --> 00:19:26,375
Nope.

400
00:19:31,438 --> 00:19:32,679
You can tolerate surprises.

401
00:19:33,700 --> 00:19:36,081
Do what you can to tolerate the kinds of surprises

402
00:19:36,202 --> 00:19:37,883
that can cause people to lose work.

403
00:19:38,703 --> 00:19:40,485
Laboratory has really good fault tolerance.

404
00:19:40,945 --> 00:19:42,366
It has autosave and recovery.

405
00:19:42,942 --> 00:19:45,002
It has process isolation to make recovering

406
00:19:45,042 --> 00:19:46,903
from crashes faster.

407
00:19:47,583 --> 00:19:50,965
Fun fact, autosave and recovery was motivated

408
00:19:51,025 --> 00:19:53,746
in no small part by our studio's propensity

409
00:19:53,786 --> 00:19:54,686
for power outages.

410
00:20:01,388 --> 00:20:02,349
They know what I'm talking about.

411
00:20:03,329 --> 00:20:04,570
Consider content models.

412
00:20:05,783 --> 00:20:08,725
This is a kind of put yourself in the user's shoes

413
00:20:09,085 --> 00:20:09,705
kind of guidance.

414
00:20:10,205 --> 00:20:13,747
Understand what content concepts your users

415
00:20:13,947 --> 00:20:15,308
are expecting to work with.

416
00:20:16,569 --> 00:20:20,011
Jacob Nielsen is a researcher with the Nielsen Norman Group

417
00:20:20,171 --> 00:20:22,632
and for years he's been doing usability research

418
00:20:22,652 --> 00:20:24,914
to try and make the internet easier to use.

419
00:20:25,174 --> 00:20:26,975
And in one of his articles, there's a really good quote.

420
00:20:27,815 --> 00:20:30,117
It says, the system should speak the user's language

421
00:20:30,637 --> 00:20:32,798
with words, phrases, and concepts

422
00:20:32,998 --> 00:20:34,299
that are familiar to the user.

423
00:20:35,044 --> 00:20:37,206
rather than system-oriented terms.

424
00:20:38,206 --> 00:20:40,468
And I think this applies to workflows really, really well.

425
00:20:41,209 --> 00:20:44,031
They ought to speak the language of the content creator,

426
00:20:44,291 --> 00:20:47,133
right, not the language of the system,

427
00:20:47,313 --> 00:20:49,595
the engine for which their data is being produced.

428
00:20:51,296 --> 00:20:53,397
I think we can introduce a concept here

429
00:20:53,458 --> 00:20:57,220
called content model that means the concepts

430
00:20:57,440 --> 00:20:59,542
and the relationships with which users

431
00:20:59,642 --> 00:21:02,204
express content ideas in your workflow.

432
00:21:02,960 --> 00:21:05,322
Basically, it's a metaphor in which they work.

433
00:21:06,142 --> 00:21:09,305
So for example, Level Builder's workflow

434
00:21:09,385 --> 00:21:15,310
exhibited a level, layer, group, object content model.

435
00:21:16,011 --> 00:21:16,911
It's pretty straightforward.

436
00:21:17,172 --> 00:21:18,613
And all the users could tell you what it was.

437
00:21:19,173 --> 00:21:21,415
And it mapped very well to the way

438
00:21:21,455 --> 00:21:22,636
that they thought about the content they

439
00:21:22,656 --> 00:21:23,637
were building in the level.

440
00:21:25,660 --> 00:21:27,361
Another example is our cinematic builder.

441
00:21:27,921 --> 00:21:29,682
I believe that good tools and workflows

442
00:21:29,742 --> 00:21:32,444
should abstract away engineering complexity

443
00:21:32,624 --> 00:21:34,025
at every opportunity.

444
00:21:34,906 --> 00:21:37,167
And they should fill gaps so that users

445
00:21:37,207 --> 00:21:38,868
have less mental mapping to do.

446
00:21:40,489 --> 00:21:42,831
This UI expressed a visual effects queue

447
00:21:43,091 --> 00:21:45,292
as a resizable rectangle on a timeline.

448
00:21:45,913 --> 00:21:48,034
You could drag the left side, you could drag the right side,

449
00:21:48,074 --> 00:21:49,315
and you could shift it in time.

450
00:21:50,446 --> 00:21:54,607
But underneath, a visual effects queue is modeled actually

451
00:21:54,747 --> 00:21:58,469
as an array of spawn and kill keyframe objects

452
00:21:58,689 --> 00:22:01,550
that are inside an array, which is inside another array.

453
00:22:02,270 --> 00:22:04,891
The two instances are in no way related to each other.

454
00:22:04,931 --> 00:22:06,691
It's purely up to the tool to make sure

455
00:22:06,731 --> 00:22:07,471
that they make sense.

456
00:22:09,076 --> 00:22:09,856
This was confusing.

457
00:22:10,316 --> 00:22:13,417
A preceding workflow took a much more literal approach

458
00:22:13,457 --> 00:22:17,558
to presenting that engine data, those engine structures,

459
00:22:18,458 --> 00:22:20,678
and make the user think about them hard,

460
00:22:20,738 --> 00:22:23,099
which meant that users could put the start keyframe

461
00:22:23,259 --> 00:22:24,319
after the end keyframe.

462
00:22:25,099 --> 00:22:26,660
It meant that the start and end keyframes

463
00:22:26,700 --> 00:22:28,620
were shown on separate tracks in the timeline.

464
00:22:29,320 --> 00:22:31,581
And most of this was because our engine was reflecting

465
00:22:31,781 --> 00:22:34,541
over the data structures just automatically.

466
00:22:34,601 --> 00:22:37,902
We simply didn't build a custom UI until then.

467
00:22:41,469 --> 00:22:44,851
Good workflows that keep users close to their content

468
00:22:44,911 --> 00:22:48,874
will allow users to concentrate less on the runtime's demands

469
00:22:49,054 --> 00:22:51,055
and more on the content that they're building.

470
00:22:52,076 --> 00:22:55,579
There are at least two really important representations

471
00:22:55,959 --> 00:22:56,559
in a workflow.

472
00:22:56,599 --> 00:22:58,301
There's the runtime representation,

473
00:22:59,001 --> 00:23:00,722
and there's the user's content model.

474
00:23:00,742 --> 00:23:03,624
So if you think of those as two opposing extremes.

475
00:23:04,565 --> 00:23:07,647
If you, as an engineer, can minimize the distance

476
00:23:07,727 --> 00:23:09,268
between those two representations.

477
00:23:09,880 --> 00:23:12,022
you will have saved yourselves a lot of complexity.

478
00:23:14,344 --> 00:23:17,267
I call this category creative mindsets.

479
00:23:18,608 --> 00:23:20,830
And my goal with this category is

480
00:23:20,990 --> 00:23:25,454
to capture benefits that are hard to quantify,

481
00:23:25,574 --> 00:23:29,658
but still have an observable impact on user satisfaction.

482
00:23:30,259 --> 00:23:32,100
You can call it touchy-feely ROI.

483
00:23:33,407 --> 00:23:38,969
I also want to reinforce some common sense that I think is easily forgotten or overlooked

484
00:23:38,989 --> 00:23:41,170
when you're in the trenches trying to build software.

485
00:23:42,831 --> 00:23:44,472
But I also want to inspire, right?

486
00:23:44,512 --> 00:23:49,894
I want the people who read these guidelines to come away thinking, I never thought about

487
00:23:49,914 --> 00:23:50,515
it that way.

488
00:23:50,935 --> 00:23:52,495
There might be some good ideas here.

489
00:23:53,516 --> 00:23:58,618
Invite your engineers to apply their unique expertise to the creative process.

490
00:24:00,718 --> 00:24:02,638
We'll start with promoting user confidence.

491
00:24:02,678 --> 00:24:04,199
When a user is confident,

492
00:24:04,839 --> 00:24:07,700
they will try cool new things without fear.

493
00:24:08,560 --> 00:24:09,741
And when they're not confident,

494
00:24:10,261 --> 00:24:12,121
they may avoid workflows altogether.

495
00:24:12,962 --> 00:24:14,182
And they may tell their coworkers

496
00:24:14,242 --> 00:24:15,522
to avoid workflows altogether.

497
00:24:16,363 --> 00:24:18,023
And they won't tell you that you've done this.

498
00:24:20,924 --> 00:24:22,805
We've observed and we have been told

499
00:24:22,825 --> 00:24:25,025
that users work confidently

500
00:24:25,265 --> 00:24:27,266
when the tools are doing what they ask.

501
00:24:29,051 --> 00:24:30,772
They can change their minds quickly,

502
00:24:32,452 --> 00:24:34,813
and they aren't afraid of breaking other people.

503
00:24:34,853 --> 00:24:38,034
They aren't afraid of introducing bad data downstream

504
00:24:38,674 --> 00:24:41,616
that somebody comes and yells about them about later.

505
00:24:42,356 --> 00:24:44,737
Because when that somebody comes and yells at them

506
00:24:45,077 --> 00:24:46,717
about bad content they introduced,

507
00:24:47,238 --> 00:24:48,758
there's a better than zero chance

508
00:24:48,778 --> 00:24:51,299
that they will have no idea that they did anything wrong,

509
00:24:52,119 --> 00:24:54,620
unless your workflow is good at pointing out those cases.

510
00:24:54,960 --> 00:24:57,961
So here are some things you can do to promote user confidence.

511
00:24:59,573 --> 00:25:02,874
make sure that undo and redo work.

512
00:25:03,654 --> 00:25:06,975
This may be one of the single most important things

513
00:25:07,215 --> 00:25:08,635
for promoting user confidence.

514
00:25:09,715 --> 00:25:10,776
Because when you think about it,

515
00:25:11,476 --> 00:25:13,836
undoing redo is more than just about correcting mistakes.

516
00:25:14,736 --> 00:25:15,977
It's about what if thinking.

517
00:25:16,777 --> 00:25:18,017
It lets people try things

518
00:25:18,417 --> 00:25:20,838
and then immediately discard that idea, right?

519
00:25:21,518 --> 00:25:23,838
Or multiple ideas, Control Z, Control Z, Control Z.

520
00:25:24,959 --> 00:25:27,539
It improves iteration time by reducing rework.

521
00:25:28,477 --> 00:25:30,419
It reduces the cost of making mistakes.

522
00:25:31,780 --> 00:25:34,243
And its importance even impacted

523
00:25:34,363 --> 00:25:36,244
our architecture for Laboratory.

524
00:25:36,384 --> 00:25:38,827
It offered Undo and Redo as a service

525
00:25:39,147 --> 00:25:41,549
at one of the lowest possible levels you could go

526
00:25:41,629 --> 00:25:43,771
so that all plugins got the benefit of it.

527
00:25:44,612 --> 00:25:47,855
It was actually hard to build a plugin for Laboratory

528
00:25:47,895 --> 00:25:49,737
that didn't feature Undo and Redo.

529
00:25:52,159 --> 00:25:53,540
You can support source control.

530
00:25:54,945 --> 00:25:59,246
This may not sound like a promote user confidence tip,

531
00:25:59,486 --> 00:26:00,267
but hear me out.

532
00:26:00,847 --> 00:26:03,048
You can save users a lot of confusion

533
00:26:03,508 --> 00:26:05,029
mucking around in Perforce.

534
00:26:05,749 --> 00:26:08,630
Because if you put yourself in their shoes for a second,

535
00:26:09,150 --> 00:26:12,351
imagine how much of their content state

536
00:26:13,112 --> 00:26:15,833
they are having to reconcile with the depot state

537
00:26:16,273 --> 00:26:17,333
if they are unassisted.

538
00:26:18,294 --> 00:26:20,435
That's actually a really large mental load.

539
00:26:21,543 --> 00:26:24,946
And especially if your data contains complex dependencies,

540
00:26:25,586 --> 00:26:27,868
and users need to remember that if they add this

541
00:26:28,169 --> 00:26:30,230
visual effect file, they must also remember

542
00:26:30,270 --> 00:26:32,412
to add this texture, and the texture binder,

543
00:26:32,512 --> 00:26:33,493
and all these other things.

544
00:26:34,134 --> 00:26:35,915
Otherwise, the build will break downstream

545
00:26:35,955 --> 00:26:37,016
and people will come yell at them.

546
00:26:38,517 --> 00:26:40,059
If they don't have any assistance,

547
00:26:40,319 --> 00:26:41,760
that's more likely to happen.

548
00:26:42,801 --> 00:26:44,122
That erodes confidence.

549
00:26:44,322 --> 00:26:45,383
It introduces doubt.

550
00:26:46,980 --> 00:26:49,361
This was another case where our architecture

551
00:26:49,441 --> 00:26:52,162
was really impacted by this point.

552
00:26:52,542 --> 00:26:55,823
Like undo, laboratory offers per-force integration

553
00:26:55,983 --> 00:26:58,224
at one of the lowest possible levels you can go.

554
00:26:58,684 --> 00:27:00,765
It's pretty much automatic and plugin authors

555
00:27:00,785 --> 00:27:01,865
don't even have to think about it.

556
00:27:04,366 --> 00:27:06,307
You can do rigorous data validation.

557
00:27:07,067 --> 00:27:09,808
Don't allow users to introduce bad data downstream.

558
00:27:10,689 --> 00:27:13,471
So for instance, you can probably guard against them

559
00:27:13,571 --> 00:27:16,694
exporting assets that have four billion polygons.

560
00:27:16,734 --> 00:27:21,317
You can probably help them avoid adding a bad reference,

561
00:27:21,657 --> 00:27:23,359
a reference to something that doesn't exist.

562
00:27:24,600 --> 00:27:28,543
Users might not know, though, what correct or safe is.

563
00:27:29,263 --> 00:27:32,165
So you should expect odd input in your workflow.

564
00:27:32,946 --> 00:27:34,667
If something's wrong, find it,

565
00:27:35,528 --> 00:27:37,269
and tell the user what is wrong,

566
00:27:38,090 --> 00:27:39,631
and tell them how to fix it.

567
00:27:39,891 --> 00:27:40,452
That's important.

568
00:27:42,762 --> 00:27:43,923
You can preview changes.

569
00:27:44,804 --> 00:27:46,826
If an operation makes big changes,

570
00:27:47,226 --> 00:27:49,528
help the user see what's going to happen

571
00:27:49,788 --> 00:27:52,450
before they commit to it for no additional cost.

572
00:27:52,730 --> 00:27:54,612
Give them an opportunity to change their mind.

573
00:27:55,293 --> 00:27:57,795
You can do this before or after a change has begun.

574
00:27:57,815 --> 00:27:59,516
And this is one example of what I'm talking about.

575
00:27:59,556 --> 00:28:02,118
A lot of you have probably used docking systems, right?

576
00:28:02,699 --> 00:28:04,780
And this one is previewing the change

577
00:28:04,800 --> 00:28:05,601
that you're about to make

578
00:28:05,681 --> 00:28:07,563
before you go to the trouble of committing to it.

579
00:28:09,330 --> 00:28:11,830
Another example is in our Visual Script Builder.

580
00:28:13,251 --> 00:28:16,051
When you splice a node into an existing connection,

581
00:28:16,131 --> 00:28:18,332
the tool shows you what's going to happen

582
00:28:18,412 --> 00:28:21,372
to the connections, unless you change your mind,

583
00:28:21,412 --> 00:28:22,372
or unless you bail out.

584
00:28:24,953 --> 00:28:27,173
Laboratories Curve Editor had a similar feature.

585
00:28:27,213 --> 00:28:30,114
By hovering over a button, it will show you

586
00:28:30,194 --> 00:28:31,934
what clicking on that button would do,

587
00:28:32,134 --> 00:28:33,275
if you in fact clicked on it.

588
00:28:36,593 --> 00:28:39,495
You can show the path to safety when errors occur,

589
00:28:39,895 --> 00:28:41,396
because is there anything worse

590
00:28:41,456 --> 00:28:43,797
than not knowing how to fix an error?

591
00:28:45,017 --> 00:28:46,158
Make errors helpful.

592
00:28:46,778 --> 00:28:49,719
When they occur, do your best to recover gracefully,

593
00:28:49,759 --> 00:28:52,861
that is, guide the user back to a familiar state

594
00:28:52,981 --> 00:28:55,122
from which they are confident they can continue.

595
00:28:56,042 --> 00:28:58,503
And if corrective action of some kind is required,

596
00:28:58,764 --> 00:29:00,604
be clear about those next steps.

597
00:29:00,644 --> 00:29:01,985
Do they need to reload?

598
00:29:02,925 --> 00:29:03,886
Do they need to restart?

599
00:29:04,265 --> 00:29:05,586
Do they just need to try again?

600
00:29:05,606 --> 00:29:07,508
Do they need to enter a different value

601
00:29:07,588 --> 00:29:08,809
or reformat their value?

602
00:29:09,890 --> 00:29:13,252
Consider engaging users to give you feedback

603
00:29:13,452 --> 00:29:14,393
on your error messages.

604
00:29:14,433 --> 00:29:16,835
And I don't mean type in what was going wrong

605
00:29:16,895 --> 00:29:18,256
when the crash happened.

606
00:29:18,436 --> 00:29:21,078
I mean, show them an error message as a sentence

607
00:29:21,138 --> 00:29:23,600
and say, if a tool showed you this error message,

608
00:29:24,260 --> 00:29:25,781
would you understand what it meant?

609
00:29:26,722 --> 00:29:27,743
And then iterate on that.

610
00:29:30,970 --> 00:29:33,570
Mine feature requests for hidden value.

611
00:29:33,990 --> 00:29:36,811
This is the guideline that I think resonates most

612
00:29:36,931 --> 00:29:38,592
with the people I talk to,

613
00:29:38,652 --> 00:29:40,712
both engineers and creatives alike.

614
00:29:41,752 --> 00:29:43,093
You should beware of treating

615
00:29:43,233 --> 00:29:45,533
user requests as specifications.

616
00:29:46,614 --> 00:29:49,394
By doing this, you risk incohesive solutions

617
00:29:50,155 --> 00:29:52,075
when several different engineers

618
00:29:52,115 --> 00:29:54,156
who have all been told the same problem

619
00:29:54,816 --> 00:29:57,756
offer different solutions and create a Franken-app.

620
00:29:59,338 --> 00:30:05,201
It can result in band-aid solutions that leave root causes unaddressed and then lead to subsequent

621
00:30:05,241 --> 00:30:09,824
band-aids because the root cause is unaddressed, which leads to subsequent band-aids, etc.

622
00:30:11,085 --> 00:30:16,328
And it can inherit bad practices from other workflows.

623
00:30:18,209 --> 00:30:23,313
Learn to recognize opportunities when you can help a user in ways that

624
00:30:24,027 --> 00:30:28,550
might not explicitly match the stated request, right?

625
00:30:28,891 --> 00:30:32,153
Or maybe it's in a way that they don't know how to ask for

626
00:30:32,354 --> 00:30:33,935
because they lack the vocabulary.

627
00:30:34,715 --> 00:30:37,238
Mind you, you could be having new creatives,

628
00:30:37,258 --> 00:30:38,519
you could have veteran creatives

629
00:30:38,539 --> 00:30:40,120
who have completely different vocabularies

630
00:30:40,200 --> 00:30:41,561
asking you for different problems.

631
00:30:41,641 --> 00:30:43,723
One of them might be coming from a different tool set

632
00:30:43,763 --> 00:30:47,226
where everything was completely strange and alien.

633
00:30:47,606 --> 00:30:48,967
So if you ever hear somebody come to you

634
00:30:49,007 --> 00:30:49,788
and say something like,

635
00:30:50,128 --> 00:30:52,090
I want it to work just like After Effects.

636
00:30:53,146 --> 00:30:55,087
or I want it to work just like Excel,

637
00:30:57,128 --> 00:30:58,828
you've probably got a communication gap.

638
00:30:59,229 --> 00:31:01,310
You should probably dig a little deeper

639
00:31:01,350 --> 00:31:03,150
because it's almost certain

640
00:31:03,190 --> 00:31:05,731
that you're not getting the whole picture.

641
00:31:05,912 --> 00:31:08,293
That's a very loaded kind of statement.

642
00:31:10,333 --> 00:31:11,954
We assess our tools candidates

643
00:31:12,054 --> 00:31:14,135
partly on their intuition for this.

644
00:31:14,215 --> 00:31:16,396
One of my favorite interview questions is to say,

645
00:31:16,416 --> 00:31:18,697
a user comes up to you and asks

646
00:31:18,877 --> 00:31:21,458
that you change the transform gizmo to be yellow.

647
00:31:23,214 --> 00:31:25,275
And I have some candidates who will, without missing a beat,

648
00:31:25,556 --> 00:31:26,977
they will tell me where in the view model.

649
00:31:27,017 --> 00:31:28,638
They'll go find the color of the gizmo,

650
00:31:29,078 --> 00:31:30,819
and they're pretty good about guessing where that is.

651
00:31:31,139 --> 00:31:33,121
And they change it to yellow, and they submit a code review,

652
00:31:33,141 --> 00:31:34,522
and they're done.

653
00:31:35,202 --> 00:31:38,284
And then I say, OK, now imagine that a different user comes

654
00:31:38,324 --> 00:31:40,385
to you and says they want it thicker.

655
00:31:41,566 --> 00:31:43,367
Well, some of them will say, OK, well, we just

656
00:31:43,427 --> 00:31:44,448
changed the thickness.

657
00:31:45,149 --> 00:31:46,890
I say, now imagine a user comes to you and says

658
00:31:46,910 --> 00:31:47,630
they want it bigger.

659
00:31:48,157 --> 00:31:52,661
And eventually the candidates have a sort of aha moment and they realize that continuing on this track

660
00:31:53,181 --> 00:31:57,024
is going to give you nothing but a big, yellow, thick transform gizmo.

661
00:31:57,705 --> 00:32:02,248
Because it's not the actual problem. The problem is that the thing is hard to see.

662
00:32:03,149 --> 00:32:06,452
It might be hard to see because of what content is currently loaded in the world.

663
00:32:06,512 --> 00:32:11,175
It could be hard to see because they have a super high-res monitor and it's drawing one-pixel-thin lines.

664
00:32:12,096 --> 00:32:13,257
What we want, not what we have.

665
00:32:15,158 --> 00:32:17,440
Getting to the core of that real problem is useful

666
00:32:17,500 --> 00:32:21,322
because it's going to cause you to rethink the situation,

667
00:32:21,362 --> 00:32:23,884
rethink the problem in more meaningful terms.

668
00:32:26,226 --> 00:32:28,467
So talk to user, talk to your users

669
00:32:28,507 --> 00:32:30,228
and discover that additional value.

670
00:32:30,248 --> 00:32:32,630
So you can try questions like this if you're ever stuck

671
00:32:32,670 --> 00:32:33,931
and you feel like you're not quite getting

672
00:32:33,971 --> 00:32:34,651
to the bottom of it.

673
00:32:35,071 --> 00:32:36,372
You know, back up a step and ask,

674
00:32:36,452 --> 00:32:38,734
why is the user concerned with this at all?

675
00:32:39,434 --> 00:32:41,375
I wouldn't have thought that this would be a problem.

676
00:32:41,656 --> 00:32:44,017
Maybe there's a gap in my understanding.

677
00:32:45,108 --> 00:32:47,370
You can ask, could we look at this differently?

678
00:32:47,470 --> 00:32:50,332
Could we maybe make a more general solution

679
00:32:50,352 --> 00:32:53,134
that helps more people with similar problems?

680
00:32:53,214 --> 00:32:56,036
Is this an opportunity to bring more value?

681
00:32:56,996 --> 00:32:59,358
Straddle that line of premature abstraction.

682
00:32:59,438 --> 00:33:00,178
You know you want to.

683
00:33:01,399 --> 00:33:03,981
What player experience are they targeting?

684
00:33:04,841 --> 00:33:06,302
Right, there could be a knowledge gap.

685
00:33:06,342 --> 00:33:08,824
It could be that you already have a tool in your pipeline

686
00:33:08,864 --> 00:33:10,365
that does exactly what they want to do,

687
00:33:10,385 --> 00:33:11,566
and they just don't know that it's there.

688
00:33:13,057 --> 00:33:15,538
And you should ask yourself, are there any potential

689
00:33:15,578 --> 00:33:18,119
bad habits, unintended consequences?

690
00:33:19,199 --> 00:33:20,520
So if a user comes to you and says,

691
00:33:20,640 --> 00:33:23,121
I want you to change the default value of this field

692
00:33:23,201 --> 00:33:26,002
from one to a thousand, and you do it,

693
00:33:26,982 --> 00:33:29,703
have you blown a lot of budgets all of a sudden

694
00:33:29,863 --> 00:33:30,744
without realizing it?

695
00:33:31,644 --> 00:33:33,025
Be careful, because that happens.

696
00:33:35,786 --> 00:33:38,707
And this section is called Keep Users Close to Their Content.

697
00:33:39,803 --> 00:33:43,524
We want creative people to see, hear, and feel

698
00:33:43,864 --> 00:33:47,065
what the player will see, hear, and feel.

699
00:33:47,965 --> 00:33:51,746
Success here means making exploring a creative space

700
00:33:52,446 --> 00:33:54,806
easy and fast and rewarding.

701
00:33:55,666 --> 00:33:57,407
We want to increase the time spent

702
00:33:57,767 --> 00:33:59,027
seeing, hearing, and feeling,

703
00:33:59,067 --> 00:34:00,927
and we want to decrease the time spent

704
00:34:01,428 --> 00:34:04,008
learning how to operate an interface, right?

705
00:34:04,048 --> 00:34:06,008
Learning how to navigate a pipeline.

706
00:34:07,735 --> 00:34:10,295
This can be done by helping creative people

707
00:34:10,375 --> 00:34:14,216
notice little details, showing them things in context

708
00:34:14,276 --> 00:34:15,456
so that they can appreciate it

709
00:34:15,496 --> 00:34:16,916
from a more player perspective,

710
00:34:16,956 --> 00:34:20,817
or by enabling them to broadly explore a lot of ideas

711
00:34:21,837 --> 00:34:24,478
or deeply explore just a few of their best ideas.

712
00:34:25,258 --> 00:34:27,919
I think tools can really innovate here.

713
00:34:29,139 --> 00:34:32,939
A good case, I think, is user-generated content tools.

714
00:34:34,020 --> 00:34:35,620
LittleBigPlanet, Dreams,

715
00:34:35,720 --> 00:34:37,100
which they were showing earlier today,

716
00:34:37,160 --> 00:34:37,480
and then this.

717
00:34:38,093 --> 00:34:39,114
Fantastic, I loved it.

718
00:34:40,435 --> 00:34:42,677
User-generated content experiences are really cool,

719
00:34:42,717 --> 00:34:44,979
because when you think about it, they have one job.

720
00:34:45,699 --> 00:34:49,042
And that is to make people feel like they are producing

721
00:34:49,142 --> 00:34:52,925
good, creative, coherent work reasonably fast.

722
00:34:53,806 --> 00:34:56,228
I think there's a lot of wisdom we can draw from that.

723
00:34:56,328 --> 00:34:58,931
I think that maybe these workflows might actually be

724
00:34:58,991 --> 00:35:01,433
participating in the creative process itself.

725
00:35:02,233 --> 00:35:04,575
This is getting into some of that more aspirational

726
00:35:04,615 --> 00:35:05,236
territory.

727
00:35:05,836 --> 00:35:06,617
We're going to keep going.

728
00:35:08,282 --> 00:35:09,963
You can support direct manipulation.

729
00:35:10,544 --> 00:35:14,106
Direct manipulation means making natural feeling changes

730
00:35:14,207 --> 00:35:17,149
directly to content instead of some intermediate

731
00:35:17,189 --> 00:35:17,949
representation.

732
00:35:18,970 --> 00:35:22,413
So for instance, dragging a manipulator in a viewport

733
00:35:22,493 --> 00:35:26,736
rather than picking Geo in the scene from a list or

734
00:35:26,776 --> 00:35:27,356
something like that.

735
00:35:28,316 --> 00:35:33,960
We embraced this with Crash and brought some direct manipulation to a workflow that didn't have it before.

736
00:35:34,020 --> 00:35:37,882
To choose and adjust bolt points that visual effects could fire from,

737
00:35:37,902 --> 00:35:42,065
it used to be that you had to select the bolt point in a list first

738
00:35:42,826 --> 00:35:45,708
and then type in the adjustment you wanted to make to the bolt

739
00:35:45,748 --> 00:35:47,649
and then send that information to the game.

740
00:35:47,669 --> 00:35:49,690
The many-step process.

741
00:35:49,750 --> 00:35:53,013
Instead, we put manipulators right into the viewport

742
00:35:53,833 --> 00:35:56,915
and saved our users a lot of time and made everything a lot more intuitive.

743
00:36:00,320 --> 00:36:04,465
You can pick things from a list, but to be more direct,

744
00:36:04,725 --> 00:36:05,986
you could pick something in a viewport.

745
00:36:06,907 --> 00:36:09,189
You could apply a material to a selected object,

746
00:36:10,290 --> 00:36:12,552
or you could drag the material onto an object.

747
00:36:13,493 --> 00:36:16,817
You could type the start and end of a range

748
00:36:17,257 --> 00:36:19,599
in two separate text inputs, or you

749
00:36:19,619 --> 00:36:23,063
could use a new slider that lets you adjust them visually

750
00:36:23,083 --> 00:36:24,925
in both fine and gross adjustments.

751
00:36:26,191 --> 00:36:29,833
I think transform widgets that have the constraints,

752
00:36:30,313 --> 00:36:33,534
like xy plane constraints, axis constraints,

753
00:36:33,574 --> 00:36:34,875
that's a great example of this, right?

754
00:36:34,895 --> 00:36:37,556
Because you get to choose the constraint just by nothing

755
00:36:37,596 --> 00:36:40,477
more than choosing how you begin to interact with the thing.

756
00:36:42,859 --> 00:36:45,500
You should augment content, not obscure it.

757
00:36:46,040 --> 00:36:48,441
Because if you want to keep users close to your content,

758
00:36:48,801 --> 00:36:50,882
close to their content, don't come

759
00:36:50,902 --> 00:36:53,443
between them and the content that they're trying to create.

760
00:36:54,308 --> 00:36:59,331
A simple example, a trend I like seeing more and more, is instead of shading a selected

761
00:36:59,431 --> 00:37:04,994
object with some solid color, outline it so that you don't disrupt the texture, so that

762
00:37:05,034 --> 00:37:08,736
you aren't obscuring what the content creator expects to see.

763
00:37:11,418 --> 00:37:12,358
Debug spew.

764
00:37:13,679 --> 00:37:18,682
Try not to display tables of real-time data on your game if you can help it.

765
00:37:18,802 --> 00:37:21,824
It tends to be really hard to read anyway.

766
00:37:22,816 --> 00:37:25,177
We did this for a very, very long time.

767
00:37:26,158 --> 00:37:28,899
And we got to a point where we wanted to think

768
00:37:28,939 --> 00:37:31,481
about this differently because it was becoming unmanageable.

769
00:37:31,761 --> 00:37:34,763
So we implemented IamGUI in Alchemy

770
00:37:34,963 --> 00:37:37,164
and allowed ourselves more real estate.

771
00:37:37,184 --> 00:37:39,905
We shrank the game down to a part of the window

772
00:37:40,426 --> 00:37:41,526
and used the remaining space

773
00:37:41,566 --> 00:37:43,688
to display meaningful instrumentation.

774
00:37:45,408 --> 00:37:47,350
But then we thought, you know, we could do one better.

775
00:37:48,797 --> 00:37:51,898
Our tool set, written in WPF, is a lot richer,

776
00:37:52,318 --> 00:37:53,799
and it's a lot easier to interact with,

777
00:37:53,839 --> 00:37:56,000
and it affords us more capabilities out of the box.

778
00:37:56,020 --> 00:37:58,280
So why don't we bring the game into the tool set?

779
00:37:58,380 --> 00:38:00,281
So we made the game itself dockable.

780
00:38:01,101 --> 00:38:03,142
Users could dock the game alongside the rest

781
00:38:03,182 --> 00:38:05,563
of their workflow and get all of that rich interaction

782
00:38:05,623 --> 00:38:07,023
that WPF has to offer.

783
00:38:09,824 --> 00:38:12,865
Augmenting might also mean visualizing information

784
00:38:12,905 --> 00:38:14,026
that's already there.

785
00:38:14,920 --> 00:38:18,001
So for instance, one of our engineers built this really cool visualization.

786
00:38:18,041 --> 00:38:22,762
Every time you jump, a graph appears, and your jump is plotted on the graph.

787
00:38:23,383 --> 00:38:30,285
Alongside more numeric and explicit information and graphs that show the acceleration and the velocity,

788
00:38:31,305 --> 00:38:37,748
this allowed our users to iterate on the all-important crash jump much more quickly than if they had not had it.

789
00:38:38,088 --> 00:38:43,010
And it allowed them to keep their focus on the game a lot more than they used to.

790
00:38:45,632 --> 00:38:47,633
You can promote mixing board thinking,

791
00:38:48,554 --> 00:38:51,215
where I use the word mixing board to mean

792
00:38:51,756 --> 00:38:55,578
controls that blend and constrain many inputs

793
00:38:55,798 --> 00:38:57,979
into one or just a few results.

794
00:38:59,340 --> 00:39:01,241
Approaches like this relieve users

795
00:39:01,541 --> 00:39:04,123
of having to maintain complex mental models

796
00:39:04,203 --> 00:39:06,604
of data structures and the dependencies between them

797
00:39:06,704 --> 00:39:08,145
and the rules that apply to them.

798
00:39:09,058 --> 00:39:11,980
It invites them to play more with the result

799
00:39:12,020 --> 00:39:15,382
and try combinations safely with parameters

800
00:39:15,462 --> 00:39:18,484
that you get to enforce rules on behind the scenes.

801
00:39:18,504 --> 00:39:21,005
All right, so you see this with character creators

802
00:39:21,046 --> 00:39:21,966
all the time, right?

803
00:39:22,446 --> 00:39:25,648
Skyrim offers lots of sliders and numbers

804
00:39:25,729 --> 00:39:29,471
and Black Desert takes a more direct interaction approach

805
00:39:29,491 --> 00:39:32,333
where you can tug on the cheeks and tug on the eyebrows

806
00:39:32,373 --> 00:39:33,914
to adjust the way that your character looks.

807
00:39:33,954 --> 00:39:35,415
But these are all mixing boards, right?

808
00:39:35,964 --> 00:39:38,746
They're taking inputs and they're weighting them

809
00:39:39,306 --> 00:39:41,307
and they're blending them with influences

810
00:39:41,367 --> 00:39:43,929
in order to produce some result that is safe.

811
00:39:44,649 --> 00:39:46,691
And unless you go to Monster Factory on YouTube,

812
00:39:46,751 --> 00:39:49,252
you won't get yourself into trouble, right?

813
00:39:49,272 --> 00:39:51,093
You're going to produce something that works

814
00:39:51,153 --> 00:39:52,414
within the context of the game.

815
00:39:56,457 --> 00:39:59,939
Some workflows support modifier stacks like Max, right?

816
00:40:00,648 --> 00:40:02,828
I think of these as sort of modular mixing boards.

817
00:40:03,148 --> 00:40:06,809
The result of one mixing board feeds into the next mixing board.

818
00:40:07,670 --> 00:40:13,251
And you may have seen animation workflows that have a palette of expressions for a character's

819
00:40:13,351 --> 00:40:20,193
face and you're able to dial in amounts of expression by clicking things in the palette.

820
00:40:20,233 --> 00:40:24,234
You can dial in a lot or you can dial in a little, but you're mixing the result of a

821
00:40:24,294 --> 00:40:25,194
mixing board, a rig.

822
00:40:28,165 --> 00:40:31,505
You can promote copy-transform-combine thinking.

823
00:40:31,525 --> 00:40:36,147
Now this is probably the most abstract guideline in the set,

824
00:40:37,067 --> 00:40:39,387
but it is a very concise expression, I think,

825
00:40:39,427 --> 00:40:42,728
of a very powerful idea behind some of the best tools

826
00:40:43,068 --> 00:40:45,289
that I know of, and I found it very inspirational.

827
00:40:46,269 --> 00:40:48,769
Still trying to articulate it in guideline form,

828
00:40:48,829 --> 00:40:49,470
so here we go.

829
00:40:50,463 --> 00:40:55,325
I was exposed to this first in a video called Everything is a Remix by Kirby Ferguson, and

830
00:40:55,445 --> 00:41:02,187
in it he asserts that these three steps, copy, transform, combine, are foundational to any

831
00:41:02,287 --> 00:41:03,127
creative endeavor.

832
00:41:04,168 --> 00:41:09,810
But it's obvious to me that they have a certain special importance to content creation workflows.

833
00:41:10,510 --> 00:41:16,512
You can help users explore creative spaces and stumble on new ideas by building workflows

834
00:41:16,552 --> 00:41:18,513
that excel at these operations.

835
00:41:20,848 --> 00:41:24,470
Copying is foundational to content creation, right?

836
00:41:24,510 --> 00:41:26,892
It lets you skip boilerplate work.

837
00:41:27,412 --> 00:41:29,133
It's a branch and a thought process.

838
00:41:29,273 --> 00:41:33,515
And it lets users rapidly create sets and repetitions

839
00:41:33,555 --> 00:41:35,916
that can vary independently or together.

840
00:41:36,957 --> 00:41:39,438
It lets programmers create ad hoc checkpoints

841
00:41:39,498 --> 00:41:41,659
in their work, like shelving a copy of your files

842
00:41:41,719 --> 00:41:43,920
in Perforce so that you can return to later.

843
00:41:45,202 --> 00:41:50,804
So things you can do as an engineer are support copy and paste operations for values, for

844
00:41:50,844 --> 00:41:54,946
selected objects, for most of the stuff that users can actually interact with.

845
00:41:55,806 --> 00:42:02,668
You can support prefabs, instancing, or get the needle closer to a place where you can

846
00:42:02,708 --> 00:42:04,009
support those because they're not trivial.

847
00:42:05,213 --> 00:42:08,394
You can support robust cloning of your data models.

848
00:42:09,034 --> 00:42:12,655
We spent a lot of time defining very strictly

849
00:42:12,855 --> 00:42:16,916
what copy meant when you took a chunk of data in Alchemy,

850
00:42:16,956 --> 00:42:19,077
which could have a complex dependency web,

851
00:42:19,737 --> 00:42:20,757
and chose to clone it.

852
00:42:21,577 --> 00:42:24,218
Questions like, how far in the graph do you travel?

853
00:42:24,998 --> 00:42:27,059
Which instances do you break?

854
00:42:27,719 --> 00:42:29,499
Which instances do you make unique?

855
00:42:29,539 --> 00:42:30,700
Which ones do you keep?

856
00:42:30,780 --> 00:42:33,160
Which references do you have to correct and fix up?

857
00:42:34,865 --> 00:42:38,768
It pays off though, because it makes copying faster,

858
00:42:39,428 --> 00:42:41,650
and it allows you to do more with the content that you have.

859
00:42:42,991 --> 00:42:46,333
It's also useful to infer bookkeeping and other metadata.

860
00:42:46,373 --> 00:42:48,314
So if you're shift cloning an object,

861
00:42:48,374 --> 00:42:50,856
don't prompt people for a new name

862
00:42:51,016 --> 00:42:52,637
every time you release the mouse button.

863
00:42:53,358 --> 00:42:55,539
Chances are the tool can probably guess at one,

864
00:42:56,160 --> 00:42:57,741
the user can keep doing what they want to do,

865
00:42:58,301 --> 00:42:59,862
and they can go back and rename things later.

866
00:43:01,924 --> 00:43:04,465
Transformation is the next step in creating variation.

867
00:43:05,366 --> 00:43:08,387
That's the vehicle with which we explore creative ideas, right?

868
00:43:09,167 --> 00:43:11,048
And it typically follows a copy.

869
00:43:12,069 --> 00:43:14,830
Sometimes users have a clear end result in mind

870
00:43:14,850 --> 00:43:16,150
when they make a transformation.

871
00:43:16,711 --> 00:43:18,051
They know exactly what they want to do.

872
00:43:18,431 --> 00:43:19,352
But other times they don't.

873
00:43:19,832 --> 00:43:21,232
Other times they're just playing around.

874
00:43:21,853 --> 00:43:23,093
They might be experimenting.

875
00:43:23,713 --> 00:43:25,214
They may not have a clear intent.

876
00:43:25,874 --> 00:43:27,455
It's a let's try this idea.

877
00:43:27,955 --> 00:43:31,476
Tools can help infer things to make that possible.

878
00:43:32,547 --> 00:43:35,029
So things that you can do are support randomization,

879
00:43:35,990 --> 00:43:37,731
support mutations of sets.

880
00:43:38,392 --> 00:43:40,793
If you can do something to one selected object,

881
00:43:40,954 --> 00:43:43,095
it is almost always true that you should be able

882
00:43:43,135 --> 00:43:45,197
to do that to a selection of multiple objects.

883
00:43:46,498 --> 00:43:48,699
You can get users to success faster

884
00:43:48,919 --> 00:43:51,141
by guiding their transformations.

885
00:43:51,181 --> 00:43:52,982
You might infer snapping.

886
00:43:53,063 --> 00:43:54,944
Google SketchUp is really, really good at this.

887
00:43:56,247 --> 00:43:58,448
you can help users change content

888
00:43:58,568 --> 00:44:00,428
between compatible representations.

889
00:44:01,108 --> 00:44:03,489
One of my favorite apps is a wireframing tool

890
00:44:03,509 --> 00:44:04,169
called Balsamiq.

891
00:44:05,089 --> 00:44:06,490
And Balsamiq has this neat feature

892
00:44:06,550 --> 00:44:08,590
where you put a widget on your canvas

893
00:44:08,630 --> 00:44:11,131
and you type in some text to make it show things

894
00:44:11,191 --> 00:44:12,571
like choice one or choice two.

895
00:44:13,511 --> 00:44:14,851
And then you can choose to transform it

896
00:44:14,871 --> 00:44:16,692
into a different kind of widget, like a label.

897
00:44:16,852 --> 00:44:19,733
And if I choose label, it will change it to a label

898
00:44:19,793 --> 00:44:21,313
and it will keep as much of the text

899
00:44:21,353 --> 00:44:22,993
that makes sense for a label.

900
00:44:24,053 --> 00:44:28,415
saving me of having to drag out a new label, copy in the same thing, or do something else.

901
00:44:28,775 --> 00:44:30,896
It's just one of those little things, right?

902
00:44:32,817 --> 00:44:36,719
Combining concepts contributes to uniqueness and innovation.

903
00:44:37,878 --> 00:44:42,239
Things you can do here are show things that can be combined

904
00:44:42,819 --> 00:44:45,119
and show the user when things can't be combined.

905
00:44:45,639 --> 00:44:48,660
You can accelerate combination with implicit edits

906
00:44:48,740 --> 00:44:50,800
like VisualScript's node splicing feature.

907
00:44:50,900 --> 00:44:51,981
We didn't always have that.

908
00:44:52,021 --> 00:44:54,621
It used to be that if users wanted to splice a node

909
00:44:54,661 --> 00:44:56,681
into a connection, they had to delete the connection,

910
00:44:56,801 --> 00:44:58,822
move the node, and reestablish the connections

911
00:44:59,422 --> 00:45:00,442
the way that they wanted.

912
00:45:00,902 --> 00:45:04,043
This was a way to save time on that combination.

913
00:45:07,483 --> 00:45:09,725
Transformation can occur explicitly.

914
00:45:10,325 --> 00:45:12,507
You can move a vertex on a piece of geometry,

915
00:45:13,808 --> 00:45:17,712
but combination lets transformation happen implicitly,

916
00:45:18,132 --> 00:45:19,734
right, like procedural deformation.

917
00:45:19,794 --> 00:45:21,815
I can move a vertex on the spline

918
00:45:22,296 --> 00:45:25,859
and the deformation driven by that spline affects the box.

919
00:45:27,620 --> 00:45:30,123
Tools can interpret combinations

920
00:45:30,303 --> 00:45:32,344
in clever and meaningful ways.

921
00:45:33,413 --> 00:45:36,655
They can choose to use as much or as little of the metadata

922
00:45:36,736 --> 00:45:38,877
underneath these constructs as they want to,

923
00:45:38,977 --> 00:45:39,978
or as it makes sense.

924
00:45:40,058 --> 00:45:42,079
You can even give the user certain choices

925
00:45:42,259 --> 00:45:44,760
about how a combination is formed.

926
00:45:46,401 --> 00:45:47,682
I think modifier stacks, again,

927
00:45:47,742 --> 00:45:50,844
are a great manifestation of these principles

928
00:45:50,864 --> 00:45:53,366
because they yield this really powerful idea, right,

929
00:45:53,386 --> 00:45:56,688
that you can combine the results of transformations

930
00:45:56,768 --> 00:45:58,449
in a sort of workflow.

931
00:45:59,978 --> 00:46:04,822
I remember when I saw the MaxModifier stack for the first time and how profound it was

932
00:46:04,922 --> 00:46:05,202
to me.

933
00:46:06,143 --> 00:46:10,987
Because I started to think that when intermediate transformations become parametric like this,

934
00:46:11,027 --> 00:46:13,769
that's awesome because it means content becomes programmable.

935
00:46:15,070 --> 00:46:17,533
It means that variation becomes injectable.

936
00:46:18,551 --> 00:46:24,015
And it's ideas like that that led us to take a modifier stack-based approach to our new visual effects system.

937
00:46:24,695 --> 00:46:29,298
Our users got to choose what they wanted to contribute to the final visual effect.

938
00:46:29,539 --> 00:46:31,220
They could insert variation.

939
00:46:31,860 --> 00:46:34,402
They could take out transformations that they didn't want,

940
00:46:34,462 --> 00:46:39,105
and they knew the way we had visualized it that it was just a top-down flow.

941
00:46:39,185 --> 00:46:43,688
You start up here, and things are applied in layers almost, and you go down to the results.

942
00:46:46,289 --> 00:46:50,973
Nothing I'm saying are really new insights about copy, transform, combine, but I think

943
00:46:51,053 --> 00:46:59,720
that for people who are in the trenches, it might sort of be hard to grok this, to internalize

944
00:46:59,780 --> 00:46:59,820
it.

945
00:47:00,381 --> 00:47:04,684
And so I think that guidelines like these can reinforce these really important ideas.

946
00:47:06,317 --> 00:47:09,117
For techno-creative people, I think the real magic here,

947
00:47:09,177 --> 00:47:10,878
the thing I wanna shout from the rooftops,

948
00:47:11,058 --> 00:47:14,659
is that tools can combine things in meaningful ways.

949
00:47:15,539 --> 00:47:18,440
I wanna go from two plus two equals four

950
00:47:19,260 --> 00:47:23,902
to three plus two equals more tree, right?

951
00:47:24,682 --> 00:47:27,883
I think engineers can contribute a lot here.

952
00:47:28,923 --> 00:47:31,824
Because engineers already understand a lot of these concepts

953
00:47:31,864 --> 00:47:33,544
and they're using a different vocabulary.

954
00:47:34,184 --> 00:47:35,485
You understand polymorphism,

955
00:47:36,185 --> 00:47:37,786
you understand operator overloading

956
00:47:37,846 --> 00:47:40,206
and implicit type conversion and all that groovy stuff.

957
00:47:40,246 --> 00:47:43,647
We're really good at making the incompatible compatible.

958
00:47:44,628 --> 00:47:48,949
And we're really good at sort of content algebras, right?

959
00:47:49,029 --> 00:47:52,090
Defining rules that govern how things can be put together.

960
00:47:52,110 --> 00:47:55,191
And to keep users close to their content,

961
00:47:55,271 --> 00:47:56,432
I think we should give them

962
00:47:57,370 --> 00:47:59,632
fewer reasons to be distracted by it.

963
00:48:00,453 --> 00:48:02,795
By making creation like this more seamless,

964
00:48:03,776 --> 00:48:06,378
I think making combination effortless,

965
00:48:07,199 --> 00:48:09,381
we can help users stay in their flow

966
00:48:10,182 --> 00:48:12,023
and stumble upon some really cool stuff.

967
00:48:15,266 --> 00:48:17,668
That part was really abstract, I get it.

968
00:48:18,629 --> 00:48:19,510
I do wanna recap though.

969
00:48:20,982 --> 00:48:24,163
By promoting user confidence, by mining requests

970
00:48:24,423 --> 00:48:26,864
for hidden value, and by keeping users

971
00:48:26,924 --> 00:48:29,165
close to their content, we're trying

972
00:48:29,225 --> 00:48:32,866
to help engineers put themselves in that creative mindset.

973
00:48:33,667 --> 00:48:35,968
We're trying to help themselves put themselves

974
00:48:36,288 --> 00:48:37,688
in the user's shoes.

975
00:48:38,448 --> 00:48:40,309
We want them to understand some things that

976
00:48:40,349 --> 00:48:44,190
are probably come a lot more naturally to their customers

977
00:48:44,231 --> 00:48:45,131
than it does to them.

978
00:48:46,051 --> 00:48:48,032
But through reinforcement, I feel

979
00:48:48,052 --> 00:48:50,453
like this is a skill we can cultivate in engineers.

980
00:48:53,767 --> 00:48:54,428
This is VV.

981
00:48:55,588 --> 00:48:57,809
I'm the guy doing the jazz hands near the back.

982
00:49:00,771 --> 00:49:01,731
And that's all I've got, guys.

983
00:49:02,492 --> 00:49:02,972
Any questions?

984
00:49:13,577 --> 00:49:14,578
Oh, and this is for you, Heather.

985
00:49:19,180 --> 00:49:20,061
We have time for questions.

986
00:49:20,101 --> 00:49:21,421
I think about 12 minutes.

987
00:49:23,645 --> 00:49:25,226
So, hi, great talk.

988
00:49:25,406 --> 00:49:27,647
I'm definitely an advocate for what you're selling here.

989
00:49:29,627 --> 00:49:32,548
When you're dealing with a tool set that's been supporting

990
00:49:32,568 --> 00:49:35,329
your content for a long time, obviously maybe five or 10

991
00:49:35,369 --> 00:49:37,230
years ago you made some decisions with the interface

992
00:49:37,270 --> 00:49:40,451
and then you've rethought it and you want to make changes

993
00:49:40,631 --> 00:49:42,351
that will be improvements based on these guidelines,

994
00:49:42,971 --> 00:49:47,593
how do you, what experiences have you had selling that to

995
00:49:47,733 --> 00:49:50,454
users who may have become designers and creatives who

996
00:49:50,474 --> 00:49:52,975
have become addicted to the bad old way?

997
00:49:54,691 --> 00:49:56,754
It is a process for sure.

998
00:49:56,974 --> 00:50:00,518
It may be one of those cases where you have to rip off the

999
00:50:00,558 --> 00:50:02,941
Band-Aid and be careful about how you do that.

1000
00:50:03,162 --> 00:50:04,844
I actually attended a talk on Monday.

1001
00:50:04,864 --> 00:50:08,128
I confess I forgot who gave this talk, but they were

1002
00:50:08,148 --> 00:50:09,229
talking about just this issue.

1003
00:50:09,937 --> 00:50:15,801
There are ways to safely, or at least with due diligence, rip off the band-aid for the

1004
00:50:15,821 --> 00:50:16,081
better.

1005
00:50:17,122 --> 00:50:20,964
Other times, though, whatever the case, you should be talking with your users.

1006
00:50:21,385 --> 00:50:25,127
You should let them know that this change is in the works or that it's being thought

1007
00:50:25,167 --> 00:50:27,529
about and they'll probably give you very good input on it.

1008
00:50:28,650 --> 00:50:34,474
Ultimately, though, I think that the change is something you sort of have to force of

1009
00:50:34,534 --> 00:50:34,874
will it.

1010
00:50:36,684 --> 00:50:39,966
With enough demonstrations and enough talking with your users,

1011
00:50:40,427 --> 00:50:42,969
I think you can probably help them see the light.

1012
00:50:43,949 --> 00:50:46,451
Worst case, you can add a chicken switch.

1013
00:50:47,032 --> 00:50:50,655
You can add an option that lets them keep the past behavior.

1014
00:50:50,715 --> 00:50:54,158
But I always caution people against doing that,

1015
00:50:54,338 --> 00:50:56,400
because it means there's more to support.

1016
00:50:57,100 --> 00:51:00,103
There's more for support staff to be confused by.

1017
00:51:01,103 --> 00:51:04,206
And I think that it doesn't solve that underlying problem.

1018
00:51:04,572 --> 00:51:10,036
Because chances are, if you are considering making a fundamental change to somebody's workflow or their interaction model,

1019
00:51:10,677 --> 00:51:12,278
I hope there's a good reason for it.

1020
00:51:12,318 --> 00:51:14,140
And I hope that that reason is something like,

1021
00:51:14,640 --> 00:51:19,224
what it's doing now is actually at risk of producing bad content,

1022
00:51:19,264 --> 00:51:22,127
or what it's doing now is actually costing people time,

1023
00:51:22,267 --> 00:51:25,530
if they're not that one person who understands it and likes it.

1024
00:51:29,257 --> 00:51:31,918
Hi, thanks for your talk, it was really practical.

1025
00:51:31,938 --> 00:51:32,639
Thank you.

1026
00:51:33,399 --> 00:51:35,501
I have a question regarding that one slide

1027
00:51:35,521 --> 00:51:39,123
in which you showed iteration of the crash Bandicoot jump

1028
00:51:40,044 --> 00:51:41,485
with a graph in scene.

1029
00:51:42,385 --> 00:51:44,627
It really reminded me of a talk, a very famous talk

1030
00:51:44,667 --> 00:51:46,027
by Brett Victor, I don't know if you've seen it,

1031
00:51:46,047 --> 00:51:47,488
it was called Inventing on Principle,

1032
00:51:48,269 --> 00:51:48,789
in which there was...

1033
00:51:49,550 --> 00:51:51,730
precisely the idea of visualizing and playing

1034
00:51:51,750 --> 00:51:56,032
with data, not in a side editor, but directly in the scene

1035
00:51:56,072 --> 00:51:57,112
or 3D view.

1036
00:51:57,432 --> 00:51:59,053
And I was wondering if you somehow

1037
00:51:59,113 --> 00:52:01,474
managed to generalize that idea or apply it

1038
00:52:01,674 --> 00:52:03,694
to more than just one specific instance, where

1039
00:52:03,734 --> 00:52:06,715
you had to code for this one jump, this one graph,

1040
00:52:06,815 --> 00:52:09,876
or if you found approaches to maybe integrate

1041
00:52:09,916 --> 00:52:11,797
the data and visualization more often

1042
00:52:12,037 --> 00:52:13,238
into the workflow directly.

1043
00:52:13,698 --> 00:52:15,458
It's something I would love to explore more.

1044
00:52:15,498 --> 00:52:17,879
I'm a huge fan of Brett Victor's work, by the way.

1045
00:52:19,945 --> 00:52:21,606
What we did with Crash there was actually,

1046
00:52:21,686 --> 00:52:22,767
I mean, you know when Crash came out,

1047
00:52:22,807 --> 00:52:24,368
it was actually relatively recent.

1048
00:52:24,448 --> 00:52:27,690
This exploration into more sophisticated visualizations

1049
00:52:28,251 --> 00:52:30,272
is something we've only just begun

1050
00:52:30,352 --> 00:52:32,274
to start exploring with any rigor.

1051
00:52:34,544 --> 00:52:36,865
I think that visualization is incredibly powerful,

1052
00:52:36,945 --> 00:52:39,207
and I think it's sort of an untapped resource

1053
00:52:39,247 --> 00:52:40,368
in a lot of tool development,

1054
00:52:40,388 --> 00:52:42,709
because if you can get your engine

1055
00:52:42,769 --> 00:52:45,831
to expose the data you need to visualize,

1056
00:52:45,911 --> 00:52:48,233
then actually visualizing it

1057
00:52:48,293 --> 00:52:50,054
is not really that hard of a problem.

1058
00:52:51,235 --> 00:52:53,497
I think that, well, first of all,

1059
00:52:53,557 --> 00:52:55,378
have I answered your question at all?

1060
00:52:55,398 --> 00:52:56,699
Yeah.

1061
00:52:56,719 --> 00:52:57,159
Okay, great.

1062
00:52:57,659 --> 00:52:59,621
I'll stop there and let another question go.

1063
00:52:59,641 --> 00:53:01,542
Thanks at all.

1064
00:53:01,562 --> 00:53:02,703
Some great advice there.

1065
00:53:02,723 --> 00:53:02,963
Thank you.

1066
00:53:03,605 --> 00:53:07,666
I wanted to pick up on something you said fairly early on about how some of your, you

1067
00:53:07,686 --> 00:53:11,968
had some examples where people had to sort of break out into notepad to patch up some

1068
00:53:11,988 --> 00:53:12,549
game data.

1069
00:53:13,169 --> 00:53:17,111
And although it's undesirable, it's always the case that there are some features that

1070
00:53:17,131 --> 00:53:20,872
your tool doesn't have and things that people want to do that your tools aren't capable

1071
00:53:20,892 --> 00:53:21,292
of doing.

1072
00:53:21,893 --> 00:53:26,395
And so I was wondering if you had any advice as to how you sort of allow for users to escape

1073
00:53:26,435 --> 00:53:31,877
the constraints of the tool in a controlled way so that they're not hampered by what they

1074
00:53:31,917 --> 00:53:32,457
can't do yet.

1075
00:53:33,287 --> 00:53:39,213
I don't think we have a silver bullet, but I do think we have a solution that's helped

1076
00:53:39,253 --> 00:53:40,815
in most cases, if not all.

1077
00:53:41,695 --> 00:53:46,240
Our tool, it was very important to our tool designers at the beginning of Laboratory that

1078
00:53:46,260 --> 00:53:50,104
we offer a robust way to edit raw data.

1079
00:53:51,666 --> 00:53:55,990
Basically that meant reading a file and showing it as a property grid, a big property grid.

1080
00:53:56,609 --> 00:54:02,972
But a property grid that took all the hints from the runtime type metadata,

1081
00:54:03,273 --> 00:54:06,814
like how to display this as a color picker, as a slider, whatever,

1082
00:54:07,395 --> 00:54:11,177
and also took any validation rules that were in place and enforced them.

1083
00:54:11,890 --> 00:54:17,753
So imagine, I think the closest equivalent I can come to is like view source in a web browser.

1084
00:54:17,993 --> 00:54:19,133
It was sort of like that.

1085
00:54:19,173 --> 00:54:27,137
It provided a minimum viable interface around the job of editing data at just peaking and poking values.

1086
00:54:29,398 --> 00:54:35,300
I think that there is more we could do there, but it's not, I think that that was a good enough solution.

1087
00:54:36,089 --> 00:54:41,852
except in some cases where data got munged in an upstream process.

1088
00:54:42,432 --> 00:54:45,153
Self-healing is something I think we could do better there.

1089
00:54:45,173 --> 00:54:47,654
Okay, great. Thanks.

1090
00:54:47,774 --> 00:54:48,035
Yeah.

1091
00:54:52,096 --> 00:54:56,198
How do you find the balance between the need for creating new features

1092
00:54:56,739 --> 00:54:59,080
and the need for improving what you have already

1093
00:54:59,120 --> 00:55:01,821
and make it more usable for users?

1094
00:55:02,873 --> 00:55:07,520
It tends to be based on a project by project basis.

1095
00:55:08,562 --> 00:55:10,565
It's often the case that we will look to the project that

1096
00:55:10,605 --> 00:55:13,129
we're working on, and of course, things that are going

1097
00:55:13,169 --> 00:55:15,593
to bring value to that project get ranked

1098
00:55:15,673 --> 00:55:16,755
higher in that list.

1099
00:55:17,801 --> 00:55:24,707
At the same time, I feel very fortunate that VV is a studio that has that horizon on its

1100
00:55:24,767 --> 00:55:31,153
mind all the time, and with enough rigor, with enough due diligence, it is possible

1101
00:55:31,193 --> 00:55:36,978
for an engineer to make a pitch for a longer-term feature, one that might extend beyond the

1102
00:55:37,018 --> 00:55:37,978
value of this project.

1103
00:55:39,630 --> 00:55:41,751
It always involves impact.

1104
00:55:42,091 --> 00:55:45,212
We want to know what impact will a change have.

1105
00:55:45,892 --> 00:55:47,432
How many users is it going to affect?

1106
00:55:48,012 --> 00:55:49,632
How much time is it going to save?

1107
00:55:49,652 --> 00:55:51,593
How much time is it going to take to build?

1108
00:55:53,493 --> 00:55:55,934
And then we try to prioritize based on that.

1109
00:55:55,954 --> 00:55:57,874
I try to blend.

1110
00:55:58,574 --> 00:56:01,215
I try to avoid the tyranny of prioritization,

1111
00:56:01,475 --> 00:56:04,856
where you only work on what is item one in the giant tools

1112
00:56:04,896 --> 00:56:06,156
backlog that lasts forever.

1113
00:56:07,214 --> 00:56:10,476
I try to do a blend of big things and little things.

1114
00:56:10,576 --> 00:56:13,298
I try to make sure that some of those priority threes

1115
00:56:13,698 --> 00:56:14,619
always get attention.

1116
00:56:15,319 --> 00:56:17,060
I really believe that it's the little things

1117
00:56:17,100 --> 00:56:18,461
that can make a big difference.

1118
00:56:18,541 --> 00:56:23,104
But I just got an email from my tools engineers

1119
00:56:23,144 --> 00:56:25,325
who said, we cleared out all the priority one bugs

1120
00:56:25,365 --> 00:56:26,386
in the sprints backlog.

1121
00:56:26,486 --> 00:56:28,367
I'm like, great job guys, that's awesome.

1122
00:56:29,068 --> 00:56:30,609
Now they can work on some of the others things.

1123
00:56:31,789 --> 00:56:33,210
We kind of play it sprint to sprint.

1124
00:56:41,427 --> 00:56:43,849
Hi, so kind of building off of the same question

1125
00:56:44,009 --> 00:56:45,610
or the previous question,

1126
00:56:46,351 --> 00:56:48,632
at what point when you're looking at workflows,

1127
00:56:48,652 --> 00:56:49,613
you've already shipped it,

1128
00:56:50,033 --> 00:56:52,275
but you realize that the workflow that you've designed

1129
00:56:52,335 --> 00:56:55,637
is actually not exactly how it's actually being used

1130
00:56:56,017 --> 00:56:56,778
by your users.

1131
00:56:57,819 --> 00:56:59,300
As you're getting feedback,

1132
00:56:59,640 --> 00:57:01,701
how do you determine where that line is

1133
00:57:02,102 --> 00:57:05,224
between whether or not you should actually make changes?

1134
00:57:05,884 --> 00:57:08,346
which would actually cause users to have to change their habits,

1135
00:57:08,726 --> 00:57:10,507
and we potentially learned a workflow,

1136
00:57:12,368 --> 00:57:14,169
and determine whether it should actually

1137
00:57:14,729 --> 00:57:16,670
be an actionable improvement.

1138
00:57:19,272 --> 00:57:21,233
I think that if you can boil it down

1139
00:57:21,353 --> 00:57:24,034
to a measurable positive impact, you've

1140
00:57:24,074 --> 00:57:27,496
gone a long way in sort of making that case.

1141
00:57:29,831 --> 00:57:30,992
Depends on who you talk to.

1142
00:57:31,292 --> 00:57:33,654
Some people are more conservative about making changes

1143
00:57:33,734 --> 00:57:35,996
to workflows that are already in circulation,

1144
00:57:36,036 --> 00:57:36,896
already in the field.

1145
00:57:37,497 --> 00:57:39,558
Others are a little bit more aggressive

1146
00:57:39,658 --> 00:57:41,600
and are a little more comfortable

1147
00:57:41,620 --> 00:57:42,821
with ripping off the Band-Aid

1148
00:57:42,881 --> 00:57:44,142
and just telling users,

1149
00:57:44,182 --> 00:57:47,204
look, we understand this may be disruptive, but.

1150
00:57:48,123 --> 00:57:50,705
We use our professional expertise to tell you

1151
00:57:50,805 --> 00:57:52,625
that this is going to be for the best,

1152
00:57:53,406 --> 00:57:55,086
based on what we've learned,

1153
00:57:55,146 --> 00:57:56,607
what we've talked to you guys about,

1154
00:57:56,667 --> 00:57:58,268
and what we understand about the problem.

1155
00:57:58,688 --> 00:58:01,089
If you don't think that our understanding is complete,

1156
00:58:01,269 --> 00:58:02,209
please come talk to us.

1157
00:58:03,090 --> 00:58:05,931
But other than that, we're going to change it next sprint,

1158
00:58:05,991 --> 00:58:07,231
unless anybody tells us not to.

1159
00:58:09,292 --> 00:58:12,393
I don't think that the line is really very clear.

1160
00:58:12,794 --> 00:58:14,854
I think it's very much a case-by-case basis.

1161
00:58:16,117 --> 00:58:18,919
And it depends on where your focus is,

1162
00:58:18,979 --> 00:58:20,880
where you want your team's focus to be.

1163
00:58:21,320 --> 00:58:24,041
If, like me, you are leading a group of tools engineers,

1164
00:58:24,241 --> 00:58:27,843
I have found that they tend to prefer to focus on one area

1165
00:58:28,444 --> 00:58:30,264
rather than make bunches of changes

1166
00:58:30,304 --> 00:58:31,365
in lots of different places.

1167
00:58:32,225 --> 00:58:33,986
And so if our focus is in that area

1168
00:58:34,026 --> 00:58:35,907
and we feel we can make a dent,

1169
00:58:37,468 --> 00:58:38,529
that's something we'll explore.

1170
00:58:38,849 --> 00:58:40,590
If their focus isn't in that area,

1171
00:58:40,630 --> 00:58:41,890
we may wait till another time,

1172
00:58:42,130 --> 00:58:43,291
just so that they don't have to do

1173
00:58:43,371 --> 00:58:44,431
as much context switching.

1174
00:58:45,776 --> 00:58:46,596
Does that answer your question?

1175
00:58:47,396 --> 00:58:47,676
Yeah.

1176
00:58:47,957 --> 00:58:49,137
Okay.

1177
00:58:50,217 --> 00:58:50,937
One minute, two minutes.

1178
00:58:50,957 --> 00:58:52,098
Can I just follow up in that case?

1179
00:58:52,118 --> 00:58:52,298
Yeah.

1180
00:58:52,618 --> 00:58:59,840
So let's say you do have to make a change, do you do anything special to actually heard

1181
00:59:00,100 --> 00:59:05,062
or I guess navigate your users through the changes they have to make in their workflows?

1182
00:59:05,842 --> 00:59:07,202
And if you do, do you have any tips for that?

1183
00:59:08,725 --> 00:59:11,506
The best tip I've ever given anyone was bring them over to your desk.

1184
00:59:12,206 --> 00:59:16,308
He hasn't gone to lunch yet, let's go get him and bring him over and show him what it

1185
00:59:16,368 --> 00:59:16,948
is we want to do.

1186
00:59:16,988 --> 00:59:18,909
I'm a big believer in proof of concepts.

1187
00:59:19,649 --> 00:59:21,750
Show me the change you want to make.

1188
00:59:22,231 --> 00:59:23,051
Mockups are great.

1189
00:59:23,871 --> 00:59:25,072
Working software is better.

1190
00:59:25,672 --> 00:59:27,513
Verbal descriptions are almost never good enough.

1191
00:59:28,753 --> 00:59:29,814
We have to be able to feel it.

1192
00:59:30,114 --> 00:59:34,916
We have to be able to use the mouse, use the keyboard, and make sure that this makes sense

1193
00:59:35,076 --> 00:59:37,417
up here and not just on paper.

1194
00:59:39,130 --> 00:59:42,011
The users will give you that feedback

1195
00:59:42,351 --> 00:59:46,353
and it's going to turn into a discussion, but that's okay.

1196
00:59:47,233 --> 00:59:48,654
They may need more convincing,

1197
00:59:48,934 --> 00:59:51,215
they may need to understand more about the problem,

1198
00:59:52,135 --> 00:59:53,296
and your engineers might too.

1199
00:59:55,877 --> 00:59:56,757
Fair enough, thank you.

1200
00:59:56,797 --> 00:59:57,098
Thanks.

1201
01:00:03,180 --> 01:00:03,460
Bye guys.

