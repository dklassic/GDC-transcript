1
00:00:03,306 --> 00:00:13,916
Hi everyone, welcome to GDC.

2
00:00:14,556 --> 00:00:21,002
And today our topic is the art of not reinventing the wheel in Wild Rift Asset Pipeline.

3
00:00:21,923 --> 00:00:26,266
Hi, my name is Sean Lo, Technical Art Director at Riot Games.

4
00:00:27,147 --> 00:00:30,410
So happy to be back again to GDC this year.

5
00:00:31,293 --> 00:00:36,235
Last year, I gave a talk about UX of art tools development in general.

6
00:00:37,055 --> 00:00:40,616
So this year, I thought maybe we can talk more about pipeline

7
00:00:41,316 --> 00:00:44,317
and specifically on what happened in WoW Rift.

8
00:00:46,858 --> 00:00:49,819
And before that, quick intro about myself.

9
00:00:51,499 --> 00:00:55,140
I started working on games when I first joined Disney Interactive.

10
00:00:55,509 --> 00:01:01,132
and work on Disney Infinity 2 and 3 as a technical artist in the tools department.

11
00:01:02,312 --> 00:01:08,435
Infinity is a massive project, where we got to work with studios like Disney, Marvel,

12
00:01:08,916 --> 00:01:12,217
and Lucasfilm in everything related to IP.

13
00:01:13,398 --> 00:01:15,299
And I learned a lot from these projects.

14
00:01:16,179 --> 00:01:21,582
As you can see, there are still a lot of toys that I collected during Infinity times.

15
00:01:22,617 --> 00:01:28,240
Those are sweet memories, and it's so great to have them working alongside with me throughout these years.

16
00:01:29,821 --> 00:01:35,104
Alright, and there were also many amazing prototypes and ideas that I worked on,

17
00:01:36,145 --> 00:01:38,546
but those belong to the unpublished titles here.

18
00:01:40,147 --> 00:01:49,012
I then joined Unity Technologies, serving several internal demo teams before I got pulled into the Atom project.

19
00:01:49,999 --> 00:01:57,485
It was a very ambitious project because we want to prove that we can use game engines to produce high-graphic fidelity films.

20
00:01:58,626 --> 00:02:04,011
And after the success of ADAM, our team got to work with Disney TV this time.

21
00:02:05,513 --> 00:02:12,099
We want to prove that we can use game engines for long-form animated content, like Baymax Dreams.

22
00:02:13,249 --> 00:02:17,511
My last project at Unity was to overhaul the entire Unity

23
00:02:17,711 --> 00:02:22,353
editor's interface, which is official starting 2019.3.

24
00:02:23,433 --> 00:02:26,274
Another super ambitious task where

25
00:02:26,334 --> 00:02:29,676
I got to work closely with many engineering and designer

26
00:02:29,716 --> 00:02:29,956
teams.

27
00:02:31,096 --> 00:02:33,817
It's a long process, but I'm glad that we

28
00:02:34,018 --> 00:02:35,218
put it off successfully.

29
00:02:36,298 --> 00:02:38,940
It is now official and default in the Unity

30
00:02:38,980 --> 00:02:39,780
you download today.

31
00:02:40,800 --> 00:02:42,321
So hope you all enjoyed it.

32
00:02:43,992 --> 00:02:51,935
Now I'm with Riot Games, working on Wild Rift, which I wasn't fully aware when I first joined.

33
00:02:52,815 --> 00:02:58,177
So if this is also your first time hearing about Wild Rift, please allow me to briefly

34
00:02:58,477 --> 00:02:59,238
explain it here.

35
00:03:01,278 --> 00:03:04,320
Wild Rift is League of Legends, but on mobile.

36
00:03:06,180 --> 00:03:11,482
It is a 5v5 mobile or multiplayer online battle arena genre.

37
00:03:12,497 --> 00:03:18,242
Here you log in the game and form a team of five, so does your opponent team.

38
00:03:19,202 --> 00:03:24,727
Everybody got to pick a champion to play. Then the 10 will get sent to a battlefield,

39
00:03:25,087 --> 00:03:31,032
or we call it summoner rift, to battle. You work as a team and fight for the objective,

40
00:03:31,672 --> 00:03:36,316
that's to take down enemies base, or just as fun fighting each other.

41
00:03:37,253 --> 00:03:42,919
Very straightforward, but because each champion that you choose is so unique with their abilities,

42
00:03:43,579 --> 00:03:49,666
there's a lot of time you can sort off your 200 IQ gameplay and skillful control mechanism.

43
00:03:50,907 --> 00:03:55,131
And when you outplay your opponent successfully, it becomes the highlight.

44
00:03:55,832 --> 00:04:00,076
But when you don't, it goes to the funny moment compilation then.

45
00:04:01,570 --> 00:04:06,851
And all these memorable moments is the reason why players are engaged with these games,

46
00:04:07,552 --> 00:04:14,174
enjoy playing it as well as enjoy watching pro players playing it in the esports events.

47
00:04:15,234 --> 00:04:20,496
I myself love this trailer very much because I think it captures the light tone, the fun,

48
00:04:20,936 --> 00:04:24,577
wild times we hope players can enjoy it here in Wild Rift.

49
00:04:28,522 --> 00:04:37,230
Alright, so to reiterate, Warwick is on mobile and we rebuilt it entirely, the art, the code, all new.

50
00:04:38,231 --> 00:04:42,155
This means we got the opportunity to revisit many parts of the game,

51
00:04:42,675 --> 00:04:46,859
like the design and gameplay, to make it refreshing and fun.

52
00:04:47,980 --> 00:04:53,085
But this also means we got tons of works to do, because not only we have to do the new works.

53
00:04:53,798 --> 00:04:58,961
We also need to ramp up our content to match with what we have in League of Legends PC,

54
00:04:59,842 --> 00:05:00,663
whenever makes sense.

55
00:05:03,805 --> 00:05:11,110
And for myself, joining this team while it is scaling or exploded from an R&D prototype

56
00:05:11,210 --> 00:05:16,573
to global live games presented one huge problem that I need to solve.

57
00:05:17,285 --> 00:05:21,727
which is how do we keep thousands of art assets each

58
00:05:22,348 --> 00:05:25,750
with huge dependency in a trackable state.

59
00:05:26,951 --> 00:05:30,193
So for today, I'd like to share my experience

60
00:05:30,333 --> 00:05:31,974
in solving these problems.

61
00:05:32,654 --> 00:05:35,276
We'll go through the context, scopes,

62
00:05:36,356 --> 00:05:39,938
actual implementations, and finally, the learnings.

63
00:05:42,840 --> 00:05:43,020
All right.

64
00:05:43,863 --> 00:05:47,105
First, I'd like to explain about Wild Rift Champion Asset

65
00:05:48,086 --> 00:05:52,349
because it's a pretty unique structure to serve this mobile genre.

66
00:05:54,491 --> 00:06:00,836
For a Champion Asset, it mainly consists of the Icon, Splash Art,

67
00:06:01,617 --> 00:06:03,818
In-Game Model and Turntable Model.

68
00:06:04,739 --> 00:06:12,425
The Icon, Splash, Turntable are the ones players will see before an actual game or battle.

69
00:06:13,698 --> 00:06:18,062
But when a battle starts, it's all about the in-game asset here.

70
00:06:18,923 --> 00:06:21,706
That's why it is the most complicated asset we have,

71
00:06:22,426 --> 00:06:26,931
and also the one that we will spend most time talking about for today's topic.

72
00:06:28,592 --> 00:06:30,514
And when inside the game,

73
00:06:31,335 --> 00:06:34,979
each champion has four abilities to learn and level up.

74
00:06:35,737 --> 00:06:39,099
You can think of this ability as the champion's power.

75
00:06:39,760 --> 00:06:45,304
For example, Fire Cannon, causing AoE damage, or Heal.

76
00:06:46,805 --> 00:06:51,029
And for each ability, we will have a dedicated set of animations,

77
00:06:51,489 --> 00:06:53,731
effects, and sound to pair with it.

78
00:06:56,373 --> 00:06:58,795
Take Leona, our support tank for example.

79
00:06:59,275 --> 00:07:01,938
Her first ability is Shield of Daybreak.

80
00:07:02,680 --> 00:07:08,485
So you'll see her animations and the effects assets that we need to play when it got triggered.

81
00:07:11,008 --> 00:07:12,650
Second ability, Eclipse.

82
00:07:15,793 --> 00:07:18,756
And the third ability will be Janne's Blade.

83
00:07:21,899 --> 00:07:24,361
And the fourth, or her ultimate, Solar Flare.

84
00:07:25,197 --> 00:07:32,440
You'll see over here when triggered, her animation of her pointing the sword up to the sky,

85
00:07:32,740 --> 00:07:36,601
followed by the decals that we need to project onto the ground.

86
00:07:38,682 --> 00:07:40,683
And that's for a champion, as a base.

87
00:07:41,703 --> 00:07:44,224
We will further expand the fantasy of a champion.

88
00:07:44,604 --> 00:07:50,066
We will have skins that visualize the champion with different thematics or styles.

89
00:07:50,979 --> 00:07:54,020
For example, here we have Leona, the Radiant Dawn,

90
00:07:54,561 --> 00:07:55,781
as a base champion.

91
00:07:56,561 --> 00:07:59,162
While we have Barbecue Leona as a skin,

92
00:07:59,983 --> 00:08:02,904
which we reimagined her as a chef.

93
00:08:03,824 --> 00:08:06,985
Now her sword becomes a huge fork,

94
00:08:07,506 --> 00:08:09,506
and her shield becomes a grill.

95
00:08:11,447 --> 00:08:13,568
And to do the skin technically, we

96
00:08:13,608 --> 00:08:15,949
will have to rebind the new Barbecue Leona

97
00:08:16,009 --> 00:08:18,570
mesh onto the base Leona skeleton

98
00:08:19,090 --> 00:08:20,671
so the animation files can be shared.

99
00:08:21,935 --> 00:08:26,998
there would be also time that we need to add bones for unique animations or effects

100
00:08:27,338 --> 00:08:31,001
designed specifically only for a particular skin.

101
00:08:34,103 --> 00:08:38,886
So basically when we look at a champion asset hierarchy, it will be something like this.

102
00:08:39,886 --> 00:08:46,230
We have animations and effects assets for each ability for a base champion.

103
00:08:47,632 --> 00:08:51,334
And for skin, we might reuse everything on the base,

104
00:08:51,855 --> 00:08:55,337
but do a special ability for the ultimate,

105
00:08:55,737 --> 00:08:57,719
like what we see here for skin one.

106
00:08:58,940 --> 00:09:04,344
And for skin two, we might reuse more than one base asset,

107
00:09:05,484 --> 00:09:09,307
or we might even create a whole new set for everything,

108
00:09:09,367 --> 00:09:11,809
like what happened here for skin three.

109
00:09:13,550 --> 00:09:14,551
Also, bear in mind,

110
00:09:14,691 --> 00:09:16,912
this is only a simplified version we showed here.

111
00:09:17,692 --> 00:09:24,338
in the actual full asset hierarchy, we will have more skins as well as more animations

112
00:09:24,578 --> 00:09:31,484
and effects set for different actions that we need in the game. Therefore, if we want to track

113
00:09:31,664 --> 00:09:41,852
an asset of a skin in our game, it could be really confusing and tricky. Yes, just for a champion.

114
00:09:42,722 --> 00:09:47,745
Currently, as we speak, we have over hundreds of skins in our game.

115
00:09:48,605 --> 00:09:51,006
When we zoom out, it will be more like this.

116
00:09:51,827 --> 00:09:55,989
Well, again, this is also a very simplified version

117
00:09:56,129 --> 00:09:58,690
of the reality in the productions.

118
00:10:01,872 --> 00:10:03,032
All right, moving on.

119
00:10:04,093 --> 00:10:05,053
Expanded scope.

120
00:10:06,314 --> 00:10:09,155
Wild Rift started as a small R&D project.

121
00:10:09,951 --> 00:10:13,635
In the beginning, our main goal is just to figure out what,

122
00:10:14,896 --> 00:10:18,601
figure out how should we, what are the things that we need to do

123
00:10:19,401 --> 00:10:21,804
if we want to put League of Legends on mobile?

124
00:10:23,206 --> 00:10:25,628
How do we make it right?

125
00:10:26,830 --> 00:10:29,873
From there, one features after another,

126
00:10:30,433 --> 00:10:31,875
one milestone after another.

127
00:10:32,611 --> 00:10:36,673
Suddenly, we were greenlit and moved to closed alpha

128
00:10:37,394 --> 00:10:41,016
and open beta at several regions in the world

129
00:10:41,737 --> 00:10:44,358
and start to serve millions of players now.

130
00:10:46,800 --> 00:10:49,501
So in order to live up to our player expectations,

131
00:10:50,002 --> 00:10:52,763
we have to pump up more content, meaning

132
00:10:53,204 --> 00:10:55,085
more champions and more skin.

133
00:10:56,586 --> 00:11:00,788
For example, during alpha, we only have 40 champions.

134
00:11:01,555 --> 00:11:12,279
with no skins. Now we have 68 champions and 189 skins in our recent release and the number

135
00:11:12,339 --> 00:11:18,382
is still counting. So as we need to produce more content, we also need a whole lot more

136
00:11:18,442 --> 00:11:24,845
people to help us in doing this. And now our teams also got scaled up rapidly.

137
00:11:26,453 --> 00:11:28,654
But in a relative small R&D skills,

138
00:11:29,174 --> 00:11:33,356
team members were able to manually track and update

139
00:11:33,376 --> 00:11:35,797
the current state of a particular asset

140
00:11:36,297 --> 00:11:38,378
and keep communications consistent

141
00:11:38,718 --> 00:11:40,039
through regular sync up.

142
00:11:41,500 --> 00:11:44,381
However, with current state of well-resized,

143
00:11:45,381 --> 00:11:47,142
to coordinate the production works

144
00:11:47,482 --> 00:11:50,604
with multiple internal and external teams,

145
00:11:51,324 --> 00:11:54,385
the previous method immediately becomes unsustainable.

146
00:11:56,862 --> 00:11:59,223
To illustrate the situation clearer,

147
00:11:59,943 --> 00:12:03,406
this is a very true conversation I have with team members.

148
00:12:04,026 --> 00:12:08,248
Happened so many times, especially with those

149
00:12:08,989 --> 00:12:10,530
outside of the core dev team.

150
00:12:11,450 --> 00:12:13,532
So say, someone will come and ask me,

151
00:12:14,192 --> 00:12:16,794
hey, can I get the ARRI model?

152
00:12:17,714 --> 00:12:18,635
I'll say, yeah, of course.

153
00:12:18,835 --> 00:12:19,235
Which one?

154
00:12:19,916 --> 00:12:20,416
The latest.

155
00:12:21,456 --> 00:12:23,097
Then normally I will ask, I mean,

156
00:12:23,137 --> 00:12:25,759
do you want an in-game or turntable model?

157
00:12:26,786 --> 00:12:34,788
Ah, the turntable. Got it. Just a base skin, right? Oh, actually I need the KDA skin.

158
00:12:36,288 --> 00:12:44,711
Guess what? Okay, but which one? KDA the OG or KDA all out, the new one? Yeah,

159
00:12:45,231 --> 00:12:51,772
we have two versions of KDA skin line. The original one in 2018 for PC and the new one

160
00:12:51,792 --> 00:12:55,553
that we released in 2020 both for PC and Wild Rift.

161
00:12:56,483 --> 00:12:57,544
So confusing.

162
00:12:58,685 --> 00:13:01,187
Hopefully, now you can understand the pain

163
00:13:01,587 --> 00:13:04,810
and why we absolutely need to solve these problems.

164
00:13:07,592 --> 00:13:09,154
And how things could be worse.

165
00:13:09,794 --> 00:13:10,915
Well, pandemic.

166
00:13:11,796 --> 00:13:14,759
Bye-bye office, and hello, working from home.

167
00:13:17,341 --> 00:13:21,004
Imagine having to deal with this crazy amount of information

168
00:13:21,204 --> 00:13:24,127
while the working environment has changed from.

169
00:13:24,914 --> 00:13:27,376
everyone working in a closed office environment,

170
00:13:27,396 --> 00:13:31,399
like a part of 10 people, to everybody working from home.

171
00:13:32,720 --> 00:13:35,342
No longer you can lean over to your teammate beside you,

172
00:13:35,982 --> 00:13:39,365
less than six feet apart, for a quick answer.

173
00:13:40,426 --> 00:13:44,389
Now everything needs to go through Slack messages,

174
00:13:44,929 --> 00:13:48,151
video calls, like Google Meet or Zoom meetings.

175
00:13:49,660 --> 00:13:53,461
This makes the process of getting a simple yet rewritable

176
00:13:53,561 --> 00:13:57,762
answer suddenly become so much harder and time consuming.

177
00:14:00,043 --> 00:14:02,263
So to summarize our problem space,

178
00:14:02,963 --> 00:14:06,464
Wild Rift has a complicated asset hierarchy to deal with.

179
00:14:07,524 --> 00:14:12,546
Our teams got scaled up rapidly, more human, more questions

180
00:14:12,586 --> 00:14:13,846
needing more answers.

181
00:14:14,846 --> 00:14:18,467
And working from home just make communications harder

182
00:14:18,507 --> 00:14:19,527
than how we used to.

183
00:14:20,612 --> 00:14:23,733
In the end, simple yet crucial tasks

184
00:14:23,893 --> 00:14:28,214
like tracking a state of our asset is a huge pain.

185
00:14:31,175 --> 00:14:32,055
And now to the goal.

186
00:14:33,715 --> 00:14:36,476
What we need is a tool that can quickly

187
00:14:36,576 --> 00:14:41,157
help us to get all our asset information both broad

188
00:14:41,577 --> 00:14:41,977
and deep.

189
00:14:43,257 --> 00:14:47,958
Broad as in things like how many champions we have now,

190
00:14:49,057 --> 00:14:53,659
or say, how many support tanks we have for the current build.

191
00:14:54,940 --> 00:15:00,303
Deep as in, what are the list of animations that we use,

192
00:15:00,823 --> 00:15:04,445
say, for barbecue Leona ultimate skills, for example.

193
00:15:06,386 --> 00:15:11,109
Then for the restrictions, the big caveat of this task

194
00:15:11,209 --> 00:15:15,591
is that we can't afford to revamp the current workflow.

195
00:15:16,452 --> 00:15:18,613
Because production is full steam ahead,

196
00:15:19,453 --> 00:15:20,954
we have deliveries to meet.

197
00:15:21,774 --> 00:15:24,295
We can't afford to ask artists or PM

198
00:15:24,536 --> 00:15:28,397
to help us fill out those data through their daily routine,

199
00:15:29,378 --> 00:15:32,339
or even train them to use some new tools

200
00:15:33,000 --> 00:15:34,480
to help us gather information.

201
00:15:35,861 --> 00:15:38,062
That means reinventing the wheel

202
00:15:38,783 --> 00:15:43,065
or introducing new process at this point is a big no-no.

203
00:15:45,848 --> 00:15:48,930
So to start, what do we need to know now?

204
00:15:49,671 --> 00:15:51,572
And where can we find those answers?

205
00:15:53,113 --> 00:15:55,215
This is our discovery phase.

206
00:15:56,636 --> 00:15:59,438
My first approach is to survey existing tech

207
00:15:59,678 --> 00:16:01,219
that we have in the project.

208
00:16:02,040 --> 00:16:04,702
This is a very important step.

209
00:16:05,363 --> 00:16:07,484
I need to know what we already have

210
00:16:08,125 --> 00:16:11,787
or even what we might have in the near future.

211
00:16:12,628 --> 00:16:14,449
I dare not to make any assumption here.

212
00:16:15,250 --> 00:16:22,095
So through reading a lot of documents and checking in with team leaders from art,

213
00:16:22,596 --> 00:16:29,080
engineering, and even design, I was able to capture a broad knowledge of where

214
00:16:29,580 --> 00:16:33,103
and how our art assets are being used in the project.

215
00:16:35,505 --> 00:16:40,748
So one important thing that I learned is that we have an internal game logic system

216
00:16:41,249 --> 00:16:44,591
that is used to set up every champion in our game.

217
00:16:45,798 --> 00:16:53,044
For example, which character animation clips and effects are supposed to play during a champion ability?

218
00:16:54,364 --> 00:16:59,348
Or which model is supposed to load when players select a champion skin?

219
00:17:01,429 --> 00:17:07,113
The systems were separated into few different places for different usage like we mentioned just now.

220
00:17:07,934 --> 00:17:11,677
But that's ok, I just need to know where to look for them.

221
00:17:12,837 --> 00:17:14,639
And guess what? The best part is...

222
00:17:15,528 --> 00:17:18,769
These data are serialized in separate JSON files,

223
00:17:19,470 --> 00:17:21,931
which means I can pass them directly

224
00:17:22,031 --> 00:17:24,372
without any additional tools.

225
00:17:25,453 --> 00:17:30,855
Therefore, in this case, a very specific and custom-made tool

226
00:17:31,015 --> 00:17:33,937
in our project helps me in verifying

227
00:17:33,997 --> 00:17:36,938
the first and major parts of my hypothesis.

228
00:17:40,974 --> 00:17:44,377
And I'd like to emphasize that this kind of very niche,

229
00:17:44,997 --> 00:17:48,359
deeply integrated systems is typically very hard

230
00:17:48,399 --> 00:17:49,901
to understand at first.

231
00:17:50,981 --> 00:17:53,123
Documentations might not be available,

232
00:17:53,763 --> 00:17:57,326
and even if they exist, they might be outdated

233
00:17:57,366 --> 00:17:59,507
because how fast things have changed

234
00:17:59,667 --> 00:18:01,008
to meet the production's needs.

235
00:18:02,350 --> 00:18:05,051
So whenever a document is not available,

236
00:18:05,672 --> 00:18:10,094
I have to check in with relevant teams or even individuals

237
00:18:10,514 --> 00:18:11,655
to find the answer.

238
00:18:13,156 --> 00:18:16,838
And when both document and person is not available,

239
00:18:17,738 --> 00:18:18,419
what should I do?

240
00:18:19,519 --> 00:18:20,860
Yes, we have the code.

241
00:18:21,680 --> 00:18:23,762
The answer is right inside the code.

242
00:18:24,522 --> 00:18:27,484
What I will do is deep dive into the code,

243
00:18:28,024 --> 00:18:31,026
set a break point for each step.

244
00:18:32,277 --> 00:18:35,399
to prove my guesses and get the answer by myself.

245
00:18:36,760 --> 00:18:40,082
It is hard, but it's definitely rewarding too.

246
00:18:41,123 --> 00:18:43,464
If you can make it through the steep learning curve

247
00:18:44,105 --> 00:18:45,626
of this kind of in-house tools,

248
00:18:46,246 --> 00:18:49,588
the benefit will definitely outweigh the cost,

249
00:18:50,268 --> 00:18:50,769
at least for me.

250
00:18:53,551 --> 00:18:56,653
All right, next is what I got for free,

251
00:18:57,333 --> 00:18:59,795
the established asset system within Unity.

252
00:19:01,407 --> 00:19:07,050
For example, in this case, what helped me are the prefix systems and the meta files.

253
00:19:08,031 --> 00:19:13,514
And since this is universal, I mean, same rules apply for all Unity projects out there.

254
00:19:14,314 --> 00:19:20,258
Therefore, I can safely rely on these generic systems and use it to build my tools around it.

255
00:19:21,539 --> 00:19:25,861
In a Unity prefix file, it actually stores a GameObject.

256
00:19:26,539 --> 00:19:29,900
complete with all its components, property values,

257
00:19:30,080 --> 00:19:32,220
and even the child game objects in it.

258
00:19:33,660 --> 00:19:36,181
It is like a template, and we use

259
00:19:36,241 --> 00:19:38,802
it to configure many assets in WildRift,

260
00:19:39,262 --> 00:19:40,582
including our champion.

261
00:19:41,902 --> 00:19:45,403
And as for the meta file, it is created alongside

262
00:19:45,463 --> 00:19:48,283
with each asset file, which is used

263
00:19:48,303 --> 00:19:53,484
to store the unique ID or GUI ID that Unity assigned

264
00:19:53,504 --> 00:19:54,645
to it from the beginning.

265
00:19:56,486 --> 00:20:01,549
These two Unity files helped me in developing the solutions,

266
00:20:02,450 --> 00:20:04,591
which we will explain in more detail later on.

267
00:20:06,512 --> 00:20:09,834
And good things about this kind of established system

268
00:20:09,994 --> 00:20:15,437
is that their relevant knowledge is publicly available,

269
00:20:16,078 --> 00:20:19,400
either from the official documentations or community

270
00:20:19,440 --> 00:20:19,740
forum.

271
00:20:20,581 --> 00:20:22,442
Therefore, the learning curve of this

272
00:20:22,582 --> 00:20:26,244
is much lower than the in-house tools that we discussed before.

273
00:20:30,565 --> 00:20:34,987
And the last part of discovery is the naming conventions.

274
00:20:35,848 --> 00:20:38,990
You've probably heard this a million times already,

275
00:20:39,530 --> 00:20:42,432
but it is still a very true thing.

276
00:20:43,372 --> 00:20:46,214
And since what I'm trying to solve here

277
00:20:46,234 --> 00:20:47,875
is related to asset,

278
00:20:48,415 --> 00:20:51,277
the naming conventions is even more important here.

279
00:20:52,598 --> 00:20:54,959
And the way I've built it is from two categories.

280
00:20:55,853 --> 00:21:00,076
One is system facing like a folder and file names.

281
00:21:00,916 --> 00:21:03,098
The other one is more for art asset,

282
00:21:03,438 --> 00:21:06,840
like how the rig, animations, and effects objects

283
00:21:06,900 --> 00:21:09,002
is being named inside a file.

284
00:21:10,323 --> 00:21:16,847
For example, for a rig, we might have prefix like L, R, or C

285
00:21:17,167 --> 00:21:21,550
to indicate which side of a rig control or skeletons belongs

286
00:21:21,590 --> 00:21:21,670
to.

287
00:21:22,926 --> 00:21:30,872
Animations might have in, out, trends, while effects might have things like heat or buff

288
00:21:31,472 --> 00:21:32,933
to explain their usage.

289
00:21:34,575 --> 00:21:40,019
With strong and clear naming conventions, a lot of questions can be answered right away.

290
00:21:41,140 --> 00:21:45,303
However, we must also admit that this is extremely weak.

291
00:21:46,514 --> 00:21:50,719
Because if anyone in the team is not committed to these conventions,

292
00:21:51,039 --> 00:21:56,845
you know, like wrong folder, inconsistent names, or even like typos,

293
00:21:57,966 --> 00:22:02,091
it will immediately break and make things worse and confusing.

294
00:22:03,345 --> 00:22:06,025
I'm just super grateful that our team did a very good job

295
00:22:06,125 --> 00:22:06,446
in this.

296
00:22:07,106 --> 00:22:11,807
So whenever I have to, relying on these naming conventions

297
00:22:12,047 --> 00:22:15,168
did help me to solve the other parts of the problems

298
00:22:15,648 --> 00:22:18,349
when the previous two methods were not able to.

299
00:22:20,990 --> 00:22:21,290
All right.

300
00:22:21,910 --> 00:22:24,891
So now that we already did our homework,

301
00:22:25,471 --> 00:22:27,731
survey, and gather enough information,

302
00:22:28,432 --> 00:22:30,632
let's get to work for a solution.

303
00:22:33,008 --> 00:22:36,049
And the solution is an asset analysis tool,

304
00:22:36,510 --> 00:22:39,371
which is able to scrap the entire game project

305
00:22:39,571 --> 00:22:41,953
for relevant champion asset data.

306
00:22:42,933 --> 00:22:47,095
And in this process, we will first ingest all JSON files

307
00:22:47,135 --> 00:22:49,517
that we use to set up our champions

308
00:22:50,017 --> 00:22:52,778
through the logic system that we discussed before.

309
00:22:54,979 --> 00:22:58,741
And this stage 1 files contain general champion info,

310
00:22:59,201 --> 00:23:03,443
like their name, their attack range, or lane.

311
00:23:04,783 --> 00:23:08,024
We can also know their skin and skill names,

312
00:23:08,545 --> 00:23:12,086
along with their 2D and 3D assets,

313
00:23:13,247 --> 00:23:16,068
and more importantly, their path in our project.

314
00:23:16,775 --> 00:23:20,256
Because with this asset path, so in the JSON file here,

315
00:23:20,777 --> 00:23:24,158
we can now use it to load the asset for more

316
00:23:24,198 --> 00:23:26,278
detailed information, maybe something

317
00:23:26,318 --> 00:23:30,820
like the mesh and animation data in a FBX file.

318
00:23:33,741 --> 00:23:36,542
Then based on this raw data, the tool

319
00:23:36,602 --> 00:23:40,543
will then create containers for each asset type

320
00:23:40,863 --> 00:23:44,444
with proper structures that reflect our asset hierarchy

321
00:23:44,824 --> 00:23:45,965
as we discussed before.

322
00:23:47,435 --> 00:23:51,477
So we have the top levels, which is the entire project, right?

323
00:23:52,097 --> 00:23:54,818
Then we break it down into the champion levels.

324
00:23:55,398 --> 00:23:59,920
Then we have the skin level with their respective assets.

325
00:24:00,800 --> 00:24:06,982
For example, again, you know, like their animations and effects list for each action that we have.

326
00:24:07,782 --> 00:24:10,923
Again, idle, run, recall, things like that.

327
00:24:12,662 --> 00:24:16,905
Pretty standard OOP here, but with these structures,

328
00:24:17,085 --> 00:24:20,408
we can treat each container like an actual asset object,

329
00:24:20,928 --> 00:24:25,352
which make the next step so much easier and user-friendly.

330
00:24:27,233 --> 00:24:30,335
Yes, the next step is an easy API

331
00:24:30,395 --> 00:24:32,237
for the user to interface with.

332
00:24:33,097 --> 00:24:35,439
We really want this tool to serve

333
00:24:35,999 --> 00:24:39,402
as an easy data point for user to access.

334
00:24:40,394 --> 00:24:43,995
So just import the module, call it AAT.

335
00:24:44,876 --> 00:24:46,776
It's our asset analysis tool.

336
00:24:47,937 --> 00:24:49,857
And point it to the project report.

337
00:24:50,578 --> 00:24:52,038
And basically, you are good to go.

338
00:24:53,159 --> 00:24:55,559
So for example, once we set up, we

339
00:24:55,579 --> 00:24:59,321
can ask for a very specific champion like Ari here.

340
00:25:00,601 --> 00:25:05,403
After that, we can continue to gather details, data

341
00:25:05,423 --> 00:25:09,044
like her specific skin, say, get me the first one.

342
00:25:09,884 --> 00:25:12,806
or even all her skills in a list form.

343
00:25:13,907 --> 00:25:15,628
The nice thing about this method is

344
00:25:15,668 --> 00:25:20,251
that now data could be obtained in an organized format.

345
00:25:20,972 --> 00:25:24,114
And at the same time, it is easy to customize

346
00:25:24,194 --> 00:25:25,835
for many different purposes.

347
00:25:27,056 --> 00:25:29,198
The possibility is quite endless here.

348
00:25:29,978 --> 00:25:33,080
And we will look at some examples later on too.

349
00:25:36,332 --> 00:25:39,313
And the reason we can achieve this kind of result

350
00:25:39,393 --> 00:25:41,413
is through many integrations.

351
00:25:42,294 --> 00:25:45,055
You might already notice that we write this tool using Python.

352
00:25:46,155 --> 00:25:50,217
So first, what we did was integrate packages

353
00:25:50,297 --> 00:25:53,858
like Unity, Puzzle, and YAML to help parsing the Unity

354
00:25:53,918 --> 00:25:55,159
side of system files.

355
00:25:56,339 --> 00:26:00,701
So in this case, Unity Puzzle is for us to parse the prefab.

356
00:26:01,485 --> 00:26:05,246
So now I can know which components

357
00:26:05,486 --> 00:26:07,767
are contained in that prefab.

358
00:26:08,347 --> 00:26:10,508
For example, like a mesh or material.

359
00:26:11,868 --> 00:26:15,749
With that, we can continue to trace the actual asset that

360
00:26:15,829 --> 00:26:20,111
is being used in that prefab.

361
00:26:20,131 --> 00:26:22,392
This is where we will use the YAML package

362
00:26:22,452 --> 00:26:26,873
to help us in verifying the GUI ID of the asset

363
00:26:26,973 --> 00:26:27,813
that we are looking for.

364
00:26:30,032 --> 00:26:36,177
So once the asset is verified, we can now safely ingest or load the asset.

365
00:26:36,798 --> 00:26:41,903
For example, we have a lot of FBX files that we use for models and animations.

366
00:26:42,844 --> 00:26:48,509
So what we did was having these tools to integrate with the FBX SDK.

367
00:26:49,815 --> 00:26:53,738
This enables us to get detailed data inside FBX,

368
00:26:54,379 --> 00:26:57,262
like the mesh data, animation curve,

369
00:26:57,702 --> 00:27:01,326
and even other custom properties that we store in there.

370
00:27:02,206 --> 00:27:07,231
This is so great, because now we can query the state of an asset

371
00:27:07,511 --> 00:27:08,032
entirely.

372
00:27:08,897 --> 00:27:13,939
This even gives us the ability to QA the R asset

373
00:27:14,119 --> 00:27:14,719
if we want to.

374
00:27:15,279 --> 00:27:19,221
For example, we can ask the tool to scan for any model

375
00:27:19,701 --> 00:27:24,102
with a word count that exceeds certain limits.

376
00:27:26,723 --> 00:27:29,244
So you might ask, why Python then?

377
00:27:30,184 --> 00:27:31,985
Your project is in Unity.

378
00:27:32,945 --> 00:27:35,186
Why don't you stick with Unity's C Sharp?

379
00:27:36,032 --> 00:27:38,353
Yes, that would be the straightforward choice.

380
00:27:39,073 --> 00:27:43,495
But launching a Unity project at this scale,

381
00:27:44,256 --> 00:27:47,037
it normally takes about 5 to 10 minutes

382
00:27:47,437 --> 00:27:50,998
before we can even start navigating inside the project

383
00:27:51,338 --> 00:27:52,319
for an answer.

384
00:27:53,559 --> 00:27:56,160
So what I really wish for is something

385
00:27:56,200 --> 00:27:58,001
that is light and fast.

386
00:27:59,061 --> 00:28:02,323
Basically, I just hate waiting when I need an answer.

387
00:28:04,345 --> 00:28:07,486
Also, I like to keep this tool as standalone.

388
00:28:08,126 --> 00:28:11,767
So what that means is it doesn't need any tech dependency

389
00:28:11,868 --> 00:28:13,308
from our actual projects.

390
00:28:14,488 --> 00:28:17,309
We don't even need to install Unity in order

391
00:28:17,349 --> 00:28:18,750
to run these tools, for example.

392
00:28:19,810 --> 00:28:22,251
What I just need is a Python IDE,

393
00:28:23,211 --> 00:28:25,451
and outside of the project.

394
00:28:26,279 --> 00:28:27,179
and start coding.

395
00:28:28,000 --> 00:28:31,003
Not to mention, iteration times is faster as well,

396
00:28:31,303 --> 00:28:33,885
since we don't have to wait for Unity to compile

397
00:28:33,905 --> 00:28:35,467
the script every single time.

398
00:28:36,487 --> 00:28:38,870
Having these extra layers of flexibilities

399
00:28:39,330 --> 00:28:42,513
makes our tool development a lot more efficient.

400
00:28:45,936 --> 00:28:47,617
And this is our final result.

401
00:28:48,490 --> 00:28:50,571
Now, tech artists have the ability

402
00:28:51,132 --> 00:28:53,393
to track asset dependency easily,

403
00:28:53,973 --> 00:28:57,435
provide quick and accurate answers to anyone

404
00:28:57,915 --> 00:28:58,896
who need it directly.

405
00:29:00,297 --> 00:29:04,419
And it can be customized to fit any specific need

406
00:29:05,479 --> 00:29:07,600
and to find any specific answer.

407
00:29:08,761 --> 00:29:13,403
For example, it can allow us to do a project-wide asset

408
00:29:13,523 --> 00:29:15,324
analysis like what's shown here.

409
00:29:16,132 --> 00:29:19,235
We can get all champions available in the current project,

410
00:29:20,016 --> 00:29:24,500
look through the list and ask for maybe just a base model.

411
00:29:25,041 --> 00:29:27,544
In this case, we just have to throw in the ID of zero.

412
00:29:28,485 --> 00:29:31,588
And that will give us access to every base model

413
00:29:31,848 --> 00:29:33,570
FBX files immediately.

414
00:29:34,590 --> 00:29:37,611
From here, we can do many analysis like,

415
00:29:37,851 --> 00:29:41,773
hey, just calculate the max or min word count in the mesh,

416
00:29:42,413 --> 00:29:46,394
or get me the key frames data in an emissions clip.

417
00:29:48,595 --> 00:29:50,816
So one real scenario I may share here

418
00:29:51,876 --> 00:29:55,078
is in a Zoom meeting that we had, someone asked the group,

419
00:29:55,798 --> 00:29:59,039
hey, which champions has the highest poly count

420
00:29:59,119 --> 00:29:59,920
in our project now?

421
00:30:01,393 --> 00:30:04,895
So what I did was quickly launch Visual Code

422
00:30:05,455 --> 00:30:08,737
and write a few lines similar to what we saw just now.

423
00:30:09,638 --> 00:30:11,359
Get all champions, right?

424
00:30:11,719 --> 00:30:12,879
Go through all skins,

425
00:30:13,440 --> 00:30:15,081
and for each skin,

426
00:30:15,541 --> 00:30:17,362
grab the in-game model word count,

427
00:30:17,922 --> 00:30:19,303
append it in a dictionary,

428
00:30:19,783 --> 00:30:21,224
sort it, and tell me the max.

429
00:30:22,185 --> 00:30:25,566
And all that was done while the group is still talking.

430
00:30:26,412 --> 00:30:30,633
And before the topic changed, I was able to inform the group and say,

431
00:30:31,194 --> 00:30:33,274
Seraphine has the highest poly count.

432
00:30:34,175 --> 00:30:36,816
I guess thanks to her long hair and floating stage.

433
00:30:38,477 --> 00:30:42,498
Imagine if I were to do this directly in our Unity project.

434
00:30:43,499 --> 00:30:45,219
First, I'll have to launch Unity.

435
00:30:45,920 --> 00:30:51,902
Five minutes in, say, even if I have some tools ready to scan all champion FVX,

436
00:30:53,017 --> 00:30:56,180
But I'll still have to modify the C Sharp script

437
00:30:56,680 --> 00:30:58,942
to get me the max word count model

438
00:31:00,123 --> 00:31:01,445
and wait for it to compile.

439
00:31:02,465 --> 00:31:06,469
Now, compiling even a simple editor script

440
00:31:06,489 --> 00:31:09,131
like this in a project of this scale

441
00:31:09,612 --> 00:31:11,874
is going to take maybe a few minutes.

442
00:31:12,955 --> 00:31:15,657
Therefore, having this standalone tool

443
00:31:15,897 --> 00:31:20,081
is definitely easy to modify and faster to get an answer.

444
00:31:21,266 --> 00:31:24,428
So with the data that we gather from this tool,

445
00:31:24,688 --> 00:31:27,670
we can now output it in whichever format we want,

446
00:31:27,910 --> 00:31:33,113
like a spreadsheet, a CSV, or Excel for other teams to use.

447
00:31:33,933 --> 00:31:35,835
Since not everyone in our team is

448
00:31:35,935 --> 00:31:38,956
able to write a Python script, but that's OK.

449
00:31:39,537 --> 00:31:41,378
They can still benefit from this tool

450
00:31:41,658 --> 00:31:43,819
with the data provided in a format

451
00:31:44,039 --> 00:31:46,601
that they are familiar with to continue their work.

452
00:31:48,209 --> 00:31:51,630
Not only that, we can even directly connect this data

453
00:31:52,211 --> 00:31:55,172
or this tool to any framework or applications

454
00:31:55,212 --> 00:32:00,174
that we need, like Perforce, Maya, or other standalone tools

455
00:32:00,234 --> 00:32:00,754
that we have.

456
00:32:01,855 --> 00:32:04,856
For example, we actually used this tool

457
00:32:04,916 --> 00:32:07,037
to populate our Shotgun asset database

458
00:32:07,417 --> 00:32:09,598
when we started using it early this year.

459
00:32:10,478 --> 00:32:15,480
It was a breeze to see how easy and accurate the asset data can

460
00:32:15,520 --> 00:32:17,461
be migrated over the new menu.

461
00:32:18,857 --> 00:32:24,939
All in all, these tools help us in getting the single source of truth for internal use,

462
00:32:25,179 --> 00:32:28,420
as well as help us in cross-team collaborations.

463
00:32:30,240 --> 00:32:37,242
Because now we can share info and tech easily with other teams like console and PC,

464
00:32:37,882 --> 00:32:43,784
or basically any team in Riot, or even with our partners.

465
00:32:47,485 --> 00:32:47,925
Looking back,

466
00:32:48,568 --> 00:32:49,889
What are the lessons that I've learned?

467
00:32:52,290 --> 00:32:54,591
So in order not to reinvent the wheel,

468
00:32:55,052 --> 00:32:58,274
the first thing I learned is to understand your playground.

469
00:32:59,114 --> 00:33:00,775
And here's a picture of a playground

470
00:33:00,855 --> 00:33:04,017
that I took during pandemic, just in case some of us

471
00:33:04,077 --> 00:33:06,338
already forget what a playground looks like.

472
00:33:07,359 --> 00:33:10,141
OK, now, the playground I'm referring here

473
00:33:10,361 --> 00:33:12,702
is the existing data and tools.

474
00:33:13,843 --> 00:33:16,144
There will be tons of data laying around

475
00:33:16,244 --> 00:33:17,525
in a massive project like this.

476
00:33:18,412 --> 00:33:20,674
some data is ready to be used.

477
00:33:21,315 --> 00:33:24,598
Like in my case, the JSON files are already there

478
00:33:25,219 --> 00:33:26,040
to be ingested.

479
00:33:27,221 --> 00:33:30,584
There are also data that are not existed.

480
00:33:31,185 --> 00:33:34,768
So we'll need to find a way to formulate that and fill

481
00:33:34,888 --> 00:33:36,130
in the blank.

482
00:33:37,030 --> 00:33:40,194
So in my case, naming conventions and those tribal

483
00:33:40,234 --> 00:33:43,096
knowledge helped me to bridge the missing gap.

484
00:33:44,498 --> 00:33:48,341
Also, understanding what tools are at your expense

485
00:33:48,661 --> 00:33:49,982
is equally important.

486
00:33:51,003 --> 00:33:55,006
Some tools are custom-made, like the game logics

487
00:33:55,046 --> 00:33:56,167
that we discussed before.

488
00:33:56,867 --> 00:34:00,450
And some tools are generic, just like the Unity system file.

489
00:34:01,831 --> 00:34:04,793
Once we have gathered this kind of information,

490
00:34:05,574 --> 00:34:08,816
it will not only provide a broader view of your playground.

491
00:34:09,732 --> 00:34:14,615
More importantly, it will reduce the urge of building something from scratch.

492
00:34:16,336 --> 00:34:22,560
Yes, we prefer to build something on existing foundations rather than start from zero.

493
00:34:23,561 --> 00:34:30,405
Not as an invention, but as an integration. The pro of doing this is definitely faster

494
00:34:30,445 --> 00:34:36,389
development since the amount of work and code that we need to do is normally broad but thin.

495
00:34:37,482 --> 00:34:40,665
We are linking many working parts together and drive from there.

496
00:34:42,246 --> 00:34:44,708
The con of this approach is that you

497
00:34:44,788 --> 00:34:47,530
might have to upfront a lot of communication costs

498
00:34:47,951 --> 00:34:51,173
to fully understand the overall picture like what

499
00:34:51,193 --> 00:34:52,034
we discussed before.

500
00:34:53,275 --> 00:34:55,336
This really depends on how easy you

501
00:34:55,376 --> 00:34:57,798
can obtain the information from existing

502
00:34:57,898 --> 00:34:59,900
documentations or code base.

503
00:35:01,127 --> 00:35:03,548
But even in the worst case scenario,

504
00:35:04,288 --> 00:35:07,269
I'll still believe that the cost is absolutely worth it

505
00:35:07,609 --> 00:35:10,310
when we look at the benefit we gain in long term.

506
00:35:12,630 --> 00:35:15,511
Second thing that I learned is choosing the right tool

507
00:35:15,751 --> 00:35:18,492
and construct a plan that is future-proofing.

508
00:35:19,472 --> 00:35:21,112
We want to make sure the tech that we choose

509
00:35:21,412 --> 00:35:23,853
can be easily supported in long term,

510
00:35:24,393 --> 00:35:27,254
rather than something that might not be even relevant

511
00:35:27,314 --> 00:35:28,194
in the next five years.

512
00:35:29,505 --> 00:35:31,686
We also want to make sure something that is flexible

513
00:35:32,346 --> 00:35:34,748
to make necessary adjustment if we need to.

514
00:35:35,848 --> 00:35:38,830
It will be nice if it is easy for us

515
00:35:38,890 --> 00:35:42,332
to pivot to accommodate any future production scope.

516
00:35:44,093 --> 00:35:46,775
And along these lines, we are looking

517
00:35:46,835 --> 00:35:49,516
for something that has very little dependency

518
00:35:49,977 --> 00:35:53,879
so we can move things around without too much restrictions.

519
00:35:55,340 --> 00:35:56,821
Travel light is what came in mind

520
00:35:57,201 --> 00:35:58,281
when I am thinking about this.

521
00:35:59,116 --> 00:36:02,058
Again, I think I really need to get out from this house

522
00:36:02,678 --> 00:36:04,779
because I got stuck in here during pandemic

523
00:36:04,819 --> 00:36:05,739
for more than a year now.

524
00:36:08,461 --> 00:36:11,803
OK, so for our case here, this is so true

525
00:36:12,763 --> 00:36:16,605
when we choose to use Python to write this analysis.

526
00:36:18,326 --> 00:36:21,288
First reason is because there are already

527
00:36:21,348 --> 00:36:23,909
many Python users within Riot, which

528
00:36:23,949 --> 00:36:27,511
means it is a relatively low barrier in terms

529
00:36:27,551 --> 00:36:28,431
of the learning curve.

530
00:36:29,597 --> 00:36:33,540
But this also means that it is easier for us to get help

531
00:36:34,721 --> 00:36:37,483
in working on these tools whenever we need to.

532
00:36:37,863 --> 00:36:39,724
Just have to call someone from other teams

533
00:36:40,005 --> 00:36:41,166
and we can learn them.

534
00:36:42,246 --> 00:36:44,508
So we have sufficient support

535
00:36:44,668 --> 00:36:47,030
in terms of both tech and people.

536
00:36:48,431 --> 00:36:49,532
And talking about support,

537
00:36:50,172 --> 00:36:53,855
Python also has a lot of publicly available resources

538
00:36:54,276 --> 00:36:55,817
and an active community.

539
00:36:56,845 --> 00:37:01,870
This makes the development a lot more easier when we have this level of confidence.

540
00:37:03,151 --> 00:37:06,955
And at last, even before working on the actual code base,

541
00:37:07,576 --> 00:37:13,321
I know that it is best for us to make this tool with less dependency in terms of tech,

542
00:37:13,921 --> 00:37:18,426
meaning we want it to be more of a plug and play kind of easy mechanism.

543
00:37:19,452 --> 00:37:22,112
Also, with this loosely attached interface,

544
00:37:22,613 --> 00:37:26,194
we are able to change or expand so this tool can

545
00:37:26,234 --> 00:37:28,855
connect to other applications or engines

546
00:37:29,555 --> 00:37:31,215
so we need to pivot in the future.

547
00:37:34,096 --> 00:37:38,077
Last, but also the most important lesson, at least

548
00:37:38,097 --> 00:37:42,119
for me, is to start small so we could start fast

549
00:37:43,039 --> 00:37:44,880
and possibly also feel fast.

550
00:37:46,007 --> 00:37:48,247
Keeping your goal too ambitious sometimes

551
00:37:48,307 --> 00:37:51,088
makes things really sluggish to even kickstart.

552
00:37:51,989 --> 00:37:55,390
By scoping things accordingly, you

553
00:37:55,430 --> 00:37:58,051
can at least focus on a well-defined area

554
00:37:58,231 --> 00:37:58,831
to start with.

555
00:37:59,972 --> 00:38:03,213
Prototype something really fast, so your result

556
00:38:03,253 --> 00:38:06,414
to team members and stakeholders make sure everything

557
00:38:06,514 --> 00:38:07,915
is aligned and informed.

558
00:38:09,255 --> 00:38:13,237
Then go back, reiterate, and keep building the next block.

559
00:38:14,528 --> 00:38:17,591
With this approach, I was able to keep expanding the features

560
00:38:17,691 --> 00:38:21,074
while fixing the bugs, or even remove some features

561
00:38:21,134 --> 00:38:23,896
that we thought was a must in the beginning.

562
00:38:26,558 --> 00:38:28,740
Another thing that I benefit from this approach

563
00:38:29,261 --> 00:38:32,443
is it keeps reminding me to make sure the code base that we

564
00:38:32,603 --> 00:38:34,625
write is always modularized.

565
00:38:35,406 --> 00:38:37,988
Smaller Lego blocks that are put together

566
00:38:38,008 --> 00:38:42,331
to form bigger blocks then fit into other moving parts.

567
00:38:43,030 --> 00:38:46,112
We can reuse, and even it is easier for us

568
00:38:46,132 --> 00:38:49,395
to take out the blocks if we need to in the future.

569
00:38:50,655 --> 00:38:54,298
And talking about pivoting, we are currently

570
00:38:54,378 --> 00:38:56,900
in the phase of evolving this analysis

571
00:38:56,940 --> 00:39:00,162
tool into something bigger and even more integrated.

572
00:39:01,142 --> 00:39:03,524
Remember, we talked about using this tool

573
00:39:03,564 --> 00:39:06,266
to build the foundations of our Shotgun database.

574
00:39:07,127 --> 00:39:10,909
So now we want to use it to extend our Shotgun workflow.

575
00:39:11,853 --> 00:39:14,734
And this will let us build a more streamlined workflow

576
00:39:15,734 --> 00:39:20,115
by layering this analysis tool on top of the Shotgun database,

577
00:39:21,056 --> 00:39:26,457
give it a thorough knowledge of our asset conventions and rules,

578
00:39:26,937 --> 00:39:29,678
integrate many processes and automations

579
00:39:30,118 --> 00:39:31,799
via the Shotgun API.

580
00:39:32,999 --> 00:39:35,500
I'm confident that Wild Rift Art Production

581
00:39:35,620 --> 00:39:38,501
is going to have even more potential after this.

582
00:39:41,722 --> 00:39:45,404
So to summarize, the art of not reinventing the wheel,

583
00:39:46,385 --> 00:39:49,146
for me, it is all about integrations.

584
00:39:50,187 --> 00:39:52,969
You might heard me saying this repeatedly already

585
00:39:53,189 --> 00:39:54,610
throughout today's presentations.

586
00:39:55,510 --> 00:39:59,373
Yes, the way I view this integration is like a partnership,

587
00:40:00,073 --> 00:40:02,935
and partnership is more important than ownership.

588
00:40:03,996 --> 00:40:06,277
I like to think of our code base

589
00:40:06,337 --> 00:40:09,479
like having many people working and collaborating together.

590
00:40:10,382 --> 00:40:12,842
Each person has a dedicated task to complete,

591
00:40:13,482 --> 00:40:16,463
but it also needs to work well with other people.

592
00:40:17,623 --> 00:40:19,964
And this is so true for our WoW team.

593
00:40:20,704 --> 00:40:22,945
We work with many partners around the world.

594
00:40:23,565 --> 00:40:26,606
And only with this kind of strong relationships,

595
00:40:27,126 --> 00:40:29,907
we are able to achieve such a WoW project

596
00:40:30,167 --> 00:40:33,748
and bring the best mobile experience to our players.

597
00:40:35,448 --> 00:40:36,988
And as for tech people.

598
00:40:38,242 --> 00:40:41,145
This partnership genetic lives deeply in our blood.

599
00:40:41,746 --> 00:40:44,748
We are the bridge, and our job is to bring the tech

600
00:40:45,009 --> 00:40:47,551
and the art together in order to make things better.

601
00:40:48,492 --> 00:40:51,615
And also, because working together is more valuable

602
00:40:52,035 --> 00:40:54,438
and more fun than working in our own silo,

603
00:40:55,579 --> 00:40:58,641
especially when we are all working from home

604
00:40:59,082 --> 00:40:59,923
for more than a year now.

605
00:41:01,048 --> 00:41:04,230
I just hope to take this opportunity to encourage everybody

606
00:41:04,250 --> 00:41:06,631
to actively reach out to each other,

607
00:41:07,251 --> 00:41:08,492
even in a virtual format.

608
00:41:09,112 --> 00:41:12,594
Just like this one, we are all here in GDC virtually.

609
00:41:13,995 --> 00:41:16,316
These temporarily physical separations

610
00:41:16,436 --> 00:41:19,078
won't be the reason we stop working together

611
00:41:19,318 --> 00:41:20,639
to solve difficult problems.

612
00:41:21,479 --> 00:41:22,299
I want to believe this.

613
00:41:23,500 --> 00:41:27,102
And we are not far out when the pandemic is over.

614
00:41:27,638 --> 00:41:31,400
we will be able to hang out together again and come to GDC

615
00:41:31,620 --> 00:41:33,501
together in person this time.

616
00:41:35,841 --> 00:41:40,043
Lastly, and truly, 1 plus 1 is more than 2.

617
00:41:40,703 --> 00:41:42,524
We are better when together.

618
00:41:43,524 --> 00:41:46,345
So hope this presentation helps you all,

619
00:41:46,825 --> 00:41:51,527
either in your work, pipeline, game, or even working

620
00:41:51,567 --> 00:41:54,448
relationship with your team members and partners,

621
00:41:55,008 --> 00:41:55,628
people around you.

622
00:41:56,775 --> 00:42:00,903
Let's make more awesome, more fun, and more world games.

623
00:42:01,984 --> 00:42:04,689
Thank you all, stay safe, and see you around.

