1
00:00:06,206 --> 00:00:08,447
And welcome to our presentation about the character pipeline

2
00:00:08,888 --> 00:00:10,849
and customization system of Far Cry Primal.

3
00:00:11,470 --> 00:00:12,330
I'm Kieran O'Sullivan.

4
00:00:12,350 --> 00:00:14,812
I'm the character technical director for Far Cry Primal.

5
00:00:15,213 --> 00:00:16,173
And I'm Julien Lavey.

6
00:00:16,193 --> 00:00:18,896
I was the character tech programmer on Far Cry Primal.

7
00:00:19,736 --> 00:00:21,378
Can everyone hear us all good up the back?

8
00:00:21,858 --> 00:00:22,498
Yeah, great.

9
00:00:22,919 --> 00:00:23,199
OK.

10
00:00:24,000 --> 00:00:27,082
So Far Cry Primal, hopefully most of you have played it.

11
00:00:27,122 --> 00:00:31,846
But if you haven't, it's a Far Cry game set in 10,000 BC,

12
00:00:32,006 --> 00:00:34,168
so prehistoric cave people times.

13
00:00:35,446 --> 00:00:36,767
You don't need to know much more than that.

14
00:00:36,807 --> 00:00:38,247
You can probably fill in the blanks in your head.

15
00:00:39,047 --> 00:00:41,748
Some things you might need to know for this presentation,

16
00:00:42,088 --> 00:00:43,229
a few buzzwords.

17
00:00:44,029 --> 00:00:46,750
So DCC, we use it all the time.

18
00:00:46,790 --> 00:00:49,010
You've probably heard it tons at the convention already.

19
00:00:49,431 --> 00:00:50,331
You probably know what it means.

20
00:00:51,031 --> 00:00:53,032
It stands for Digital Content Creation Software.

21
00:00:53,932 --> 00:00:58,173
And that's things like 3D Studio Max, Maya, Blender, Houdini,

22
00:00:58,233 --> 00:00:59,794
Motion Builder, whatever, anything

23
00:00:59,814 --> 00:01:01,494
that the artist or animator works

24
00:01:01,554 --> 00:01:02,555
in outside of the game engine.

25
00:01:04,002 --> 00:01:04,862
We also have Dunia.

26
00:01:05,042 --> 00:01:07,644
Dunia is the name of the game engine that we use on Far Cry.

27
00:01:10,305 --> 00:01:10,786
Wolfskin.

28
00:01:10,846 --> 00:01:12,827
So we're going to be talking about Wolfskin a lot today.

29
00:01:13,007 --> 00:01:15,889
It's the name of our new system to assemble and customize

30
00:01:15,909 --> 00:01:16,329
characters.

31
00:01:16,929 --> 00:01:19,291
And DNA, which is a piece of data

32
00:01:19,331 --> 00:01:21,092
inside that that represents a whole character.

33
00:01:23,373 --> 00:01:25,954
So when we started on Far Cry Primal,

34
00:01:27,815 --> 00:01:28,976
we were starting with the pipeline

35
00:01:28,996 --> 00:01:30,597
that we used for Far Cry 3 and Far Cry 4.

36
00:01:30,637 --> 00:01:30,717
So.

37
00:01:33,932 --> 00:01:36,014
That was a MaxScript-based pipeline.

38
00:01:36,094 --> 00:01:41,698
This is, unfortunately, a typical Max viewport

39
00:01:42,158 --> 00:01:42,959
from Far Cry 3.

40
00:01:43,539 --> 00:01:48,503
So you can see our character has maybe a couple

41
00:01:48,523 --> 00:01:49,824
of meshes for his upper body.

42
00:01:50,264 --> 00:01:51,025
He has some pants.

43
00:01:52,165 --> 00:01:53,286
He has some arms and things.

44
00:01:54,207 --> 00:01:56,328
He doesn't have legs, and he doesn't have shoes.

45
00:01:56,408 --> 00:01:58,490
So they're probably coming from a totally different Max file.

46
00:01:59,871 --> 00:02:01,092
As well, he doesn't have shaders.

47
00:02:01,172 --> 00:02:03,493
You can see there's no textures on this guy.

48
00:02:04,022 --> 00:02:07,564
And that was unfortunately very common for our artists in Max

49
00:02:08,024 --> 00:02:10,726
on the previous Far Cry games.

50
00:02:10,746 --> 00:02:13,948
So what did it look like in a more abstract sense?

51
00:02:14,128 --> 00:02:16,129
We'd have these big Max files, like really,

52
00:02:16,469 --> 00:02:18,891
like it would be full of like a lot of meshes.

53
00:02:18,911 --> 00:02:21,912
This is a conservative example where we're just exporting

54
00:02:22,033 --> 00:02:23,453
four meshes out of a Max file.

55
00:02:25,416 --> 00:02:26,996
After that, we'd go into a game engine,

56
00:02:27,237 --> 00:02:28,497
and we would assemble a character

57
00:02:28,557 --> 00:02:29,477
from different mesh parts.

58
00:02:29,757 --> 00:02:32,978
So here we're pulling two of the meshes out of this Max file,

59
00:02:32,998 --> 00:02:34,619
and we're using them for the hair and the body

60
00:02:34,659 --> 00:02:35,239
of this character.

61
00:02:37,080 --> 00:02:38,160
Some other parts of him are probably

62
00:02:38,200 --> 00:02:39,420
coming from a totally different place.

63
00:02:39,480 --> 00:02:41,581
If you remember, that character didn't have legs or shoes.

64
00:02:41,821 --> 00:02:44,362
So he may be pulling other parts of himself

65
00:02:44,902 --> 00:02:45,802
from a different Max scene.

66
00:02:47,243 --> 00:02:48,743
That's not really great, because now you

67
00:02:48,763 --> 00:02:50,764
can see if I actually wanted to work on this character,

68
00:02:51,044 --> 00:02:53,985
I don't have all the meshes that I need to actually edit him.

69
00:02:55,917 --> 00:02:57,257
Because I'm going to check out that Max file,

70
00:02:58,018 --> 00:02:59,219
and I'm going to work on stuff in there,

71
00:02:59,719 --> 00:03:03,601
I'm basically blocking it from anyone else working on any mesh

72
00:03:03,641 --> 00:03:04,502
that comes out of that file.

73
00:03:04,562 --> 00:03:07,904
So you can see in red, there's a few meshes I don't even need,

74
00:03:08,144 --> 00:03:09,705
but they're locked and no one can work on them.

75
00:03:10,065 --> 00:03:12,066
I don't really care, though, because who cares?

76
00:03:12,746 --> 00:03:15,328
Well, if someone else checks out a Max file,

77
00:03:15,668 --> 00:03:17,909
I care, because now I can't work on any meshes that

78
00:03:17,929 --> 00:03:18,730
came out of that scene.

79
00:03:20,231 --> 00:03:23,613
It gets a bit worse again, because we also had skeletons.

80
00:03:24,261 --> 00:03:27,662
And we had a big master skeleton on the previous Far Cry games.

81
00:03:28,422 --> 00:03:29,963
And we would use that for all the characters.

82
00:03:30,243 --> 00:03:32,783
And we would need that skeleton to be up to date in all

83
00:03:32,803 --> 00:03:35,264
of the files that had meshes in them.

84
00:03:35,864 --> 00:03:38,825
So that meant it was really difficult for us

85
00:03:38,845 --> 00:03:40,726
to actually update the skeleton on the project

86
00:03:40,826 --> 00:03:42,286
because we'd have to go to that source file

87
00:03:42,306 --> 00:03:43,307
and we'd change the skeleton.

88
00:03:43,627 --> 00:03:47,008
But we'd also have to change that skeleton in every max file.

89
00:03:47,068 --> 00:03:50,129
So it became very complicated and time consuming.

90
00:03:50,309 --> 00:03:52,309
And it basically means you can't do it.

91
00:03:52,489 --> 00:03:53,850
It's just never going to happen.

92
00:03:55,934 --> 00:03:58,536
So before we figure out what pipeline we'd like to have,

93
00:03:59,036 --> 00:04:00,397
we want to look at who's the team, because that's

94
00:04:00,417 --> 00:04:01,238
the most important thing.

95
00:04:02,239 --> 00:04:04,881
So the primary users of the pipeline,

96
00:04:05,001 --> 00:04:07,864
the guys that work the most with exporting things to the engine,

97
00:04:08,184 --> 00:04:10,926
are actually our lead character artists, the TDs,

98
00:04:11,447 --> 00:04:11,947
and the riggers.

99
00:04:12,848 --> 00:04:16,251
Our modelers also use it a fair bit, but in this case,

100
00:04:16,291 --> 00:04:17,472
these are the guys that are iterating

101
00:04:17,512 --> 00:04:19,914
a lot back and forwards, whereas the modelers are more

102
00:04:20,034 --> 00:04:21,615
creating the asset, and then it's

103
00:04:21,635 --> 00:04:23,357
going through a longer pipeline.

104
00:04:25,350 --> 00:04:26,310
So what do they want to use?

105
00:04:26,690 --> 00:04:29,011
Well, our lead character artist likes to use Maya.

106
00:04:29,071 --> 00:04:31,011
He's always been using Maya, and in the past,

107
00:04:31,051 --> 00:04:33,932
he would have to then send that to Max with an FBX file.

108
00:04:34,552 --> 00:04:36,333
I like to use Maya as well on the character TD,

109
00:04:36,513 --> 00:04:37,773
but I do use Max.

110
00:04:38,774 --> 00:04:41,835
We had a rigger who liked Maya, and we had three riggers that

111
00:04:41,875 --> 00:04:42,355
liked Max.

112
00:04:42,635 --> 00:04:44,555
So we knew, based on our team, we

113
00:04:44,595 --> 00:04:46,056
had to support both software packages.

114
00:04:46,996 --> 00:04:48,897
If we let them use the software they want to use,

115
00:04:48,917 --> 00:04:50,317
they're going to be faster, they're

116
00:04:50,337 --> 00:04:51,397
going to be more efficient, they're

117
00:04:51,417 --> 00:04:52,578
going to have more time for polish.

118
00:04:53,058 --> 00:04:54,518
And we can use the best tool for the job.

119
00:04:56,625 --> 00:04:59,387
So what would that look like if we had this idle pipeline?

120
00:04:59,668 --> 00:05:02,690
Well, every mesh would be its own separate piece.

121
00:05:02,890 --> 00:05:04,771
We don't want these big max files anymore.

122
00:05:04,831 --> 00:05:06,272
We just want to have all these separate meshes.

123
00:05:07,033 --> 00:05:08,594
And we want to assemble characters from them.

124
00:05:09,355 --> 00:05:11,556
As well, if I want to edit them, I just

125
00:05:11,576 --> 00:05:13,157
want to pull whichever mesh I need

126
00:05:13,378 --> 00:05:15,919
and open it into the 3DS Max or into Maya.

127
00:05:16,580 --> 00:05:18,641
And I want to be able to pull any of the meshes I needed.

128
00:05:19,202 --> 00:05:21,223
As well, you can see down the bottom, there's the skeleton.

129
00:05:21,283 --> 00:05:23,145
So that skeleton that was hard to update,

130
00:05:23,770 --> 00:05:28,270
Now we've made it its own asset and it can just be pulled in first and then all the other

131
00:05:28,291 --> 00:05:29,571
meshes can come in and skin to it.

132
00:05:31,151 --> 00:05:32,111
So that's really cool.

133
00:05:32,931 --> 00:05:36,812
When I export, I'm only going to check out the file that I changed.

134
00:05:37,372 --> 00:05:41,933
So that way, even if I have all the pants on the project checked out and I'm only changing

135
00:05:42,053 --> 00:05:44,533
one of them, it's the only file that's locked.

136
00:05:44,733 --> 00:05:45,754
Everyone else can keep working.

137
00:05:46,074 --> 00:05:51,234
So ideally, this means that our artist could work in parallel, maybe even on the same character

138
00:05:51,274 --> 00:05:52,455
while the modeler's working on the hair.

139
00:05:53,130 --> 00:05:54,391
A rigger might be working on the pants.

140
00:05:56,893 --> 00:05:58,494
So how do we get there?

141
00:05:59,455 --> 00:06:02,537
So to understand how we went from what we had

142
00:06:02,637 --> 00:06:05,720
and what we got in the end, first, let's

143
00:06:05,760 --> 00:06:09,502
look at the technical aspects of where we were on FC3 and FC4.

144
00:06:09,563 --> 00:06:12,745
So we had a very 3ds Max-centric pipeline.

145
00:06:13,385 --> 00:06:16,628
It was all in 3ds Max 2012, a lot of MaxScript,

146
00:06:17,548 --> 00:06:21,732
some 3ds Max plugins in C++, some 3ds Max-specific shaders.

147
00:06:22,149 --> 00:06:24,851
with a lot of Mac script, once again, to bind the shaders.

148
00:06:26,132 --> 00:06:27,993
We also had the dependency on the other plugins

149
00:06:28,134 --> 00:06:28,974
and all these things.

150
00:06:29,274 --> 00:06:32,017
And as you saw, we have one Mac scene goes into the pipeline,

151
00:06:32,057 --> 00:06:33,578
and then a bunch of meshes come out.

152
00:06:34,659 --> 00:06:39,142
Now, if we go back a few years ago, here at GDC,

153
00:06:39,302 --> 00:06:41,904
our colleagues, Thomas Felix and Pierre Blaiseau,

154
00:06:41,944 --> 00:06:44,746
presented a session entitled, Passenger,

155
00:06:44,826 --> 00:06:46,107
Story of a Convergent Pipeline.

156
00:06:47,548 --> 00:06:50,751
How this is related is that the point of that framework

157
00:06:50,831 --> 00:06:51,851
was to create.

158
00:06:52,621 --> 00:06:54,582
a communication framework between the game engines

159
00:06:54,642 --> 00:06:59,264
and the DCCs to sort of extract assets from the game engine

160
00:06:59,544 --> 00:07:02,625
into any DCC that we wanted for marketing purpose.

161
00:07:02,685 --> 00:07:05,507
So you would be able to go into Assassin's Creed

162
00:07:05,707 --> 00:07:07,348
and then select the characters and the world

163
00:07:07,408 --> 00:07:09,008
and import all of that in 3ds Max.

164
00:07:09,549 --> 00:07:13,250
And then there you would be able to make pre-rendered trailers.

165
00:07:14,751 --> 00:07:16,832
Because of that, they supported a lot of DCCs,

166
00:07:16,892 --> 00:07:19,053
such as 3ds Max, Maya, and Mobiu.

167
00:07:20,059 --> 00:07:23,541
And to make it happen, they created a standard file format

168
00:07:23,561 --> 00:07:27,383
for the assets, which they called GameX, which would then

169
00:07:27,523 --> 00:07:30,605
provide functionality to load this thing into many DCCs.

170
00:07:31,366 --> 00:07:34,508
So at this point, we had, from the passenger framework,

171
00:07:34,568 --> 00:07:37,910
the possibility to load standard assets in all the DCCs.

172
00:07:38,610 --> 00:07:42,313
And the question was, what if the game engine was also

173
00:07:42,393 --> 00:07:43,994
reading this format?

174
00:07:44,574 --> 00:07:46,295
So we would be in a situation where

175
00:07:46,355 --> 00:07:49,277
we would be able to make back and forth.

176
00:07:49,844 --> 00:07:51,725
between NDDCC and the source format,

177
00:07:52,246 --> 00:07:54,827
and we could get rid completely of the Maxines

178
00:07:55,027 --> 00:07:55,888
and the source files.

179
00:07:57,069 --> 00:08:00,091
So this is what we implemented.

180
00:08:02,172 --> 00:08:03,973
This is what the pipeline looks like now.

181
00:08:04,634 --> 00:08:06,835
So there's only the GammaX mesh for each asset,

182
00:08:06,915 --> 00:08:08,456
so each asset is gonna be its own file.

183
00:08:08,596 --> 00:08:12,939
There is no Maxine grouping anything anymore.

184
00:08:14,327 --> 00:08:19,791
Passenger from technology group at Ubisoft provided us with plugins to load our standard asset formats

185
00:08:20,571 --> 00:08:23,413
They support many DCC's and many versions of them

186
00:08:23,453 --> 00:08:26,896
So we were already able to load the files in for instance max and Maya

187
00:08:27,556 --> 00:08:32,700
But then on top of that you want to create a pipeline that's going to be able to like be customized for your game engines

188
00:08:32,740 --> 00:08:38,724
needs so very often you want to add some metadata you want to link the materials in a way that your

189
00:08:39,705 --> 00:08:41,046
game engine is going to understand and

190
00:08:43,578 --> 00:08:48,700
So we did not think it was feasible for us to create one

191
00:08:48,740 --> 00:08:50,361
pipeline in Maya, one pipeline in Max.

192
00:08:50,401 --> 00:08:51,662
So we wanted to share the pipeline.

193
00:08:52,362 --> 00:08:54,263
So we're going to show now all the things

194
00:08:54,283 --> 00:08:56,764
that we did to share the pipeline between Max and Maya.

195
00:08:58,205 --> 00:09:00,266
The first thing was we needed to share code.

196
00:09:00,866 --> 00:09:04,068
So we looked at the options in the Autodesk packages.

197
00:09:04,328 --> 00:09:08,410
And Python is well-supported now between Max and Maya.

198
00:09:09,325 --> 00:09:11,707
So this is what the pipeline looks like.

199
00:09:11,947 --> 00:09:13,689
You can see there's a few things there.

200
00:09:14,649 --> 00:09:18,452
First is there's some stuff like an import-export module

201
00:09:18,492 --> 00:09:20,594
there with the exporter and an importer.

202
00:09:21,635 --> 00:09:24,337
These things are kind of DCC agnostic.

203
00:09:24,557 --> 00:09:25,978
But you can see there's also some stuff,

204
00:09:26,038 --> 00:09:27,799
like there's a DCC helpers module.

205
00:09:28,360 --> 00:09:30,581
And in there you can see there's a DCC helpers file,

206
00:09:30,641 --> 00:09:33,344
but there's also DCC helpers max and DCC helpers maya.

207
00:09:34,304 --> 00:09:36,366
So let's look at how that works.

208
00:09:38,737 --> 00:09:41,519
Most of the code is in the DCC agnostic high level code.

209
00:09:41,559 --> 00:09:45,042
So the exporter doesn't know in which DCC it's running.

210
00:09:45,463 --> 00:09:47,544
For instance, there you see the export geometry function.

211
00:09:49,126 --> 00:09:50,247
How do we export a geometry?

212
00:09:50,267 --> 00:09:52,609
So first thing we do is we get the selection from the user.

213
00:09:52,709 --> 00:09:54,030
What did they select in the editor?

214
00:09:54,150 --> 00:09:56,172
And then we are going to apply some manipulation

215
00:09:56,232 --> 00:09:58,954
to these assets and export the assets to the disk.

216
00:10:00,315 --> 00:10:03,258
You can see the first line there is like DCC helpers

217
00:10:03,298 --> 00:10:04,459
dot get selected nodes.

218
00:10:05,489 --> 00:10:08,411
Obviously, the APIs in 3ds Max and Maya to do this thing

219
00:10:08,451 --> 00:10:09,431
are going to be different.

220
00:10:09,912 --> 00:10:11,933
So this is where we branch the code.

221
00:10:12,133 --> 00:10:14,855
So we're going to the lower level of the pipeline.

222
00:10:14,895 --> 00:10:18,077
We become very much unit atomic operations.

223
00:10:19,458 --> 00:10:22,760
The DCCL first part is going to try to figure out first, OK,

224
00:10:22,780 --> 00:10:23,701
which DCC is this.

225
00:10:24,642 --> 00:10:26,723
If it's Maya, we're going to import the Maya

226
00:10:26,743 --> 00:10:27,604
version of the code.

227
00:10:27,724 --> 00:10:28,824
And then if it's Max, we're going

228
00:10:28,864 --> 00:10:30,406
to import the Max version of the code.

229
00:10:31,286 --> 00:10:31,626
So there.

230
00:10:32,269 --> 00:10:35,030
You go, and finally, we're in the low-level code,

231
00:10:35,110 --> 00:10:36,350
and we get the selection.

232
00:10:36,870 --> 00:10:40,011
In 3ds Max, we call the MaxPlus API in Python.

233
00:10:40,571 --> 00:10:42,351
And in Maya, we call the Maya commands.

234
00:10:44,292 --> 00:10:44,892
We return.

235
00:10:45,112 --> 00:10:48,332
We wrap the nodes into a DC seragnostic wrapper,

236
00:10:48,392 --> 00:10:50,473
and then we pass that to the DC seragnostic pipeline

237
00:10:50,493 --> 00:10:53,914
so that the big pipeline doesn't know where we are.

238
00:10:55,294 --> 00:10:56,154
So the good thing with that.

239
00:10:56,674 --> 00:10:58,695
is that as you go through production,

240
00:10:58,755 --> 00:11:00,896
you're going to build this little library that hides

241
00:11:00,956 --> 00:11:03,377
the API of 3ds Max and Maya.

242
00:11:04,118 --> 00:11:06,319
And you're going to have little operations in there,

243
00:11:06,379 --> 00:11:09,500
such as getting the selection, renaming nodes, deleting nodes,

244
00:11:09,541 --> 00:11:10,081
creating nodes.

245
00:11:10,981 --> 00:11:14,183
And each time you know you create new features,

246
00:11:14,223 --> 00:11:15,424
at the beginning you're going to have

247
00:11:15,444 --> 00:11:16,404
a bunch of those operations.

248
00:11:16,444 --> 00:11:18,425
But as you go, there's going to be less and less

249
00:11:18,445 --> 00:11:19,826
that you need to add to this library.

250
00:11:20,326 --> 00:11:22,688
And you're going to be able to focus on building

251
00:11:22,728 --> 00:11:26,370
the logic of the pipeline instead of building the library.

252
00:11:29,975 --> 00:11:32,717
So that is how we shared code.

253
00:11:33,758 --> 00:11:35,319
Now the next thing that we needed to do

254
00:11:35,339 --> 00:11:37,300
was sharing a UI between the DCCs.

255
00:11:38,881 --> 00:11:40,962
So for this, we looked once again,

256
00:11:41,302 --> 00:11:43,063
what's supported in Max and Maya this time,

257
00:11:43,804 --> 00:11:45,565
and we found that PySide,

258
00:11:45,605 --> 00:11:47,726
which is the Python bindings for Qt 4,

259
00:11:48,187 --> 00:11:49,868
is available in a bunch of those DCCs.

260
00:11:51,108 --> 00:11:52,309
When we were starting production,

261
00:11:52,389 --> 00:11:55,491
we were at the 2015 version of Max and Maya,

262
00:11:56,212 --> 00:11:58,173
so PySide seemed like a good fit.

263
00:12:02,125 --> 00:12:05,348
So this is just an example of some of the tools we have.

264
00:12:06,490 --> 00:12:08,912
In the middle, you can see our node editor.

265
00:12:08,972 --> 00:12:11,454
So this is where the artists will go in and set things

266
00:12:11,514 --> 00:12:12,956
like maybe LOD distances.

267
00:12:13,696 --> 00:12:15,478
They can set up their simplygon settings

268
00:12:15,538 --> 00:12:18,181
for LODs for automatic generation,

269
00:12:18,241 --> 00:12:19,362
and it's stored with the mesh.

270
00:12:20,923 --> 00:12:24,286
There's a few properties and other things

271
00:12:24,306 --> 00:12:25,027
that they can do in there.

272
00:12:25,457 --> 00:12:28,619
But what's really important there is because it's a QT UI

273
00:12:28,719 --> 00:12:31,841
and because this UI is exactly the same in both Max and Maya,

274
00:12:32,102 --> 00:12:34,063
it's very easy for our artists to switch back and forth.

275
00:12:34,123 --> 00:12:36,304
It also is really easy for us to build documentation.

276
00:12:36,324 --> 00:12:38,626
Because we're not documenting a Max pipeline and a Maya

277
00:12:38,646 --> 00:12:40,927
pipeline, we're just documenting the pipeline.

278
00:12:42,528 --> 00:12:43,749
At the top is a toolbar.

279
00:12:44,570 --> 00:12:46,671
So same toolbar in Max and Maya.

280
00:12:47,091 --> 00:12:47,892
In Maya, it's a shelf.

281
00:12:48,292 --> 00:12:50,313
In Max, it's a toolbar that you can move around.

282
00:12:51,767 --> 00:12:53,849
And the icons are the same in both packages,

283
00:12:53,989 --> 00:12:55,450
and they have the exact same behavior.

284
00:12:55,571 --> 00:12:57,873
So again, if an artist is switching back and forwards,

285
00:12:58,013 --> 00:12:59,774
or if they want to migrate from one to the other,

286
00:12:59,934 --> 00:13:02,817
it's really easy for them to learn the software

287
00:13:02,837 --> 00:13:04,718
that they're going to be using, because the pipeline will

288
00:13:04,738 --> 00:13:05,179
be the same.

289
00:13:05,499 --> 00:13:07,601
And lastly, there's just a dropdown menu,

290
00:13:07,661 --> 00:13:09,322
which is a standard kind of thing

291
00:13:09,342 --> 00:13:11,144
you see from the top of the application.

292
00:13:11,824 --> 00:13:15,127
And for us, we actually made it the exact same order

293
00:13:15,507 --> 00:13:16,788
as the icons in the toolbar.

294
00:13:16,829 --> 00:13:18,050
So it's really simple and straightforward.

295
00:13:19,812 --> 00:13:21,912
So shaders, if you remember back at the start,

296
00:13:21,952 --> 00:13:23,373
I showed you the screenshot of Max

297
00:13:23,453 --> 00:13:25,134
and there's just no textures, no shaders.

298
00:13:25,514 --> 00:13:26,974
So we knew that had to change.

299
00:13:27,534 --> 00:13:29,975
But we had to support two DCCs.

300
00:13:30,656 --> 00:13:32,896
So when we had a look, the best option for us

301
00:13:32,937 --> 00:13:33,657
was ShaderFX.

302
00:13:33,697 --> 00:13:38,659
It was integrated in both the 2015 version of Max and Maya.

303
00:13:39,219 --> 00:13:41,360
So that seemed like a pretty good choice for us.

304
00:13:41,840 --> 00:13:43,100
If you don't know what ShaderFX is,

305
00:13:43,641 --> 00:13:46,362
it's a node-based shader creation system.

306
00:13:47,199 --> 00:13:50,741
It comes built in so you can just open it up from Max or Maya

307
00:13:50,801 --> 00:13:52,662
and start creating shaders using nodes.

308
00:13:52,682 --> 00:13:55,724
It was really great for us because it meant that the TDs

309
00:13:55,984 --> 00:13:59,105
or the artist even could go in there and understand this thing

310
00:13:59,406 --> 00:14:01,367
and start building the shader.

311
00:14:01,947 --> 00:14:05,068
And for us, it's all about matching basically

312
00:14:05,088 --> 00:14:08,350
what the engine shaders are doing and making it easy

313
00:14:08,390 --> 00:14:10,491
for the artist to work on their UVs, their vertex color,

314
00:14:10,511 --> 00:14:11,051
that type of thing.

315
00:14:12,974 --> 00:14:15,196
Also meant that the 3D programmers could focus

316
00:14:15,256 --> 00:14:17,558
on just getting the features into the engine shaders,

317
00:14:17,618 --> 00:14:19,759
and they didn't need to worry about the DCC.

318
00:14:20,040 --> 00:14:23,883
The TDs could just jump in there and quickly update the shaders

319
00:14:23,943 --> 00:14:25,484
whenever an engine shader changed.

320
00:14:27,445 --> 00:14:30,768
As well, it also has automatic mapping.

321
00:14:30,868 --> 00:14:35,392
So we just made it so if you name the texture

322
00:14:36,052 --> 00:14:36,953
node in the graph.

323
00:14:37,403 --> 00:14:40,105
diffuse map or detail diffuse one, detail diffuse two,

324
00:14:40,225 --> 00:14:42,627
it automatically maps to the properties from your engine

325
00:14:42,987 --> 00:14:43,388
materials.

326
00:14:43,888 --> 00:14:46,290
So it's really easy, and there's no extra code around this thing.

327
00:14:48,271 --> 00:14:50,593
So what does it look like when an artist is using this pipeline?

328
00:14:52,375 --> 00:14:52,815
There we go.

329
00:14:52,915 --> 00:14:53,195
OK.

330
00:14:53,335 --> 00:14:53,516
Whew.

331
00:14:55,637 --> 00:14:56,838
So OK.

332
00:14:56,918 --> 00:14:58,379
So here we're in our game engine, Dunia.

333
00:14:59,360 --> 00:15:00,401
And we have our character.

334
00:15:01,001 --> 00:15:02,603
We just selected the character in the game engine,

335
00:15:02,643 --> 00:15:04,224
and we're going into 3D Studio Max.

336
00:15:04,832 --> 00:15:05,953
And we click our Import button.

337
00:15:06,033 --> 00:15:08,614
So what that does is, using the Passenger framework,

338
00:15:08,694 --> 00:15:10,835
it's communicating to the game engine and asking what's

339
00:15:10,855 --> 00:15:13,456
selected, and then importing all the meshes for that character.

340
00:15:14,837 --> 00:15:16,698
So I can just click on one of the meshes.

341
00:15:17,858 --> 00:15:20,340
And I can just make a change so you can see something happen.

342
00:15:26,643 --> 00:15:28,704
OK, so now we've made some changes to our mesh.

343
00:15:28,744 --> 00:15:30,164
We just want to click our Export button,

344
00:15:30,244 --> 00:15:31,985
and it'll export the mesh back to the engine.

345
00:15:35,177 --> 00:15:36,117
So we get this little pop-up.

346
00:15:36,177 --> 00:15:37,397
It doesn't get in your face.

347
00:15:37,417 --> 00:15:38,398
You don't have to click it away.

348
00:15:38,418 --> 00:15:39,778
It's just a little notification.

349
00:15:39,838 --> 00:15:41,258
And when we switch back to the engine,

350
00:15:41,319 --> 00:15:42,959
you can see it's already actually hot reloaded.

351
00:15:43,039 --> 00:15:46,500
So usually before we even go back there, it's hot reloaded.

352
00:15:47,160 --> 00:15:49,901
Now just to show that this pipeline's the same in Maya,

353
00:15:49,941 --> 00:15:51,982
we're just opening the character into Maya.

354
00:15:52,022 --> 00:15:54,403
And you can see we've got that new change that we've made.

355
00:15:55,163 --> 00:15:56,243
And we can just remove it again.

356
00:15:56,263 --> 00:15:58,824
And then we're going to click Export.

357
00:15:59,889 --> 00:16:01,590
And again, you'll see these little pop-ups down

358
00:16:01,610 --> 00:16:03,652
the bottom, these little notifications just telling us

359
00:16:04,292 --> 00:16:05,133
export successful.

360
00:16:16,741 --> 00:16:18,623
So now if we switch back to the game engine,

361
00:16:19,644 --> 00:16:21,865
you can see she's already hot reloaded,

362
00:16:22,185 --> 00:16:23,206
and it's live updated.

363
00:16:23,707 --> 00:16:25,448
So really fast and easy turnaround,

364
00:16:25,528 --> 00:16:27,670
and you can see the artist can use whatever they want to use.

365
00:16:31,208 --> 00:16:33,088
So that means there's no more big scenes.

366
00:16:33,769 --> 00:16:35,129
There's no more giant max files.

367
00:16:35,969 --> 00:16:37,350
If an artist wants to use one package,

368
00:16:37,370 --> 00:16:38,970
they're not forcing everyone else to use that.

369
00:16:39,771 --> 00:16:41,671
And the artist can just open the meshes,

370
00:16:41,771 --> 00:16:43,852
whichever meshes they want, into any package.

371
00:16:46,053 --> 00:16:48,134
Once it's in the game engine, we actually

372
00:16:48,174 --> 00:16:50,954
need to assemble that character from different meshes.

373
00:16:51,495 --> 00:16:53,095
This is the old system we used.

374
00:16:54,216 --> 00:16:55,276
I don't want to get too deep.

375
00:16:55,692 --> 00:16:58,833
into it, but you can see it's kind of pretty big,

376
00:16:58,913 --> 00:16:59,833
confusing UI.

377
00:17:00,974 --> 00:17:02,994
I would wager you can't guess how to use this just

378
00:17:03,014 --> 00:17:03,554
by looking at it.

379
00:17:05,735 --> 00:17:08,576
The other problem with it was it was a single user tool.

380
00:17:08,776 --> 00:17:10,736
It was one giant database for the whole project.

381
00:17:10,956 --> 00:17:14,517
So that meant that if someone wanted to work in there,

382
00:17:14,637 --> 00:17:15,257
it would check it out.

383
00:17:15,277 --> 00:17:16,138
No one else could work.

384
00:17:16,438 --> 00:17:18,478
It became a little bit annoying on FarQuay 3 and 4.

385
00:17:19,710 --> 00:17:22,431
because we were doing Codev with our Shanghai studio, who

386
00:17:22,491 --> 00:17:23,452
were doing animals for us.

387
00:17:23,972 --> 00:17:26,514
So they might check out this database and lock it.

388
00:17:26,734 --> 00:17:29,215
And then if they go home at night and don't check it in,

389
00:17:29,275 --> 00:17:31,656
that means the next day in Montreal, none of us

390
00:17:31,676 --> 00:17:32,237
can work in there.

391
00:17:33,277 --> 00:17:36,739
It's an even bigger problem for us, because on Primal,

392
00:17:37,259 --> 00:17:39,421
we were actually doing Codev with our Toronto team.

393
00:17:39,441 --> 00:17:41,802
And Toronto and Montreal are in the same time zone.

394
00:17:41,842 --> 00:17:44,323
So now you've got a database where only one person

395
00:17:44,803 --> 00:17:46,884
in two studios can ever work in there at the same time.

396
00:17:47,064 --> 00:17:48,405
So it creates a giant bottleneck.

397
00:17:48,525 --> 00:17:50,487
And it ends up being mostly the riggers

398
00:17:50,527 --> 00:17:52,488
had to be the ones that work in there,

399
00:17:52,568 --> 00:17:53,669
and they really hated it.

400
00:17:55,670 --> 00:17:57,852
So instead, oh no, sorry.

401
00:17:58,072 --> 00:18:01,154
This is just an abstract view of what this meant.

402
00:18:01,214 --> 00:18:02,515
So you've got all these different meshes,

403
00:18:03,155 --> 00:18:04,976
and you load them into this little part database.

404
00:18:04,996 --> 00:18:06,597
And then from the parts, you make a character.

405
00:18:06,617 --> 00:18:09,139
It was very simple, nothing too complicated,

406
00:18:09,199 --> 00:18:12,581
but also kind of frustrating to use.

407
00:18:13,622 --> 00:18:15,924
So that's where we turn to our new system, which

408
00:18:15,964 --> 00:18:16,684
we called WolfSkin.

409
00:18:18,085 --> 00:18:21,587
So now we're going to describe how we built the character

410
00:18:21,827 --> 00:18:24,989
system and how we were based on our customization system.

411
00:18:25,029 --> 00:18:27,451
So WolfSkin, in the first part, we

412
00:18:27,491 --> 00:18:30,073
showed that we repurposed our marketing framework

413
00:18:30,153 --> 00:18:31,774
to become a modeling pipeline.

414
00:18:32,534 --> 00:18:35,076
WolfSkin also started before Factory Primal,

415
00:18:35,136 --> 00:18:37,818
and it was mostly a character customization system.

416
00:18:38,578 --> 00:18:40,699
And the thing is, when we entered the production

417
00:18:40,759 --> 00:18:42,981
for Factory Primal, we thought maybe.

418
00:18:43,508 --> 00:18:45,848
we could actually turn this character customization system

419
00:18:45,888 --> 00:18:48,769
into a character system for building characters.

420
00:18:49,789 --> 00:18:51,770
So that's what we did.

421
00:18:52,430 --> 00:18:54,650
Now I'm going to describe in detail how the system works

422
00:18:54,830 --> 00:18:58,491
and how you can build a customization system like this.

423
00:18:59,692 --> 00:19:01,372
The one thing to understand about WolfSkin

424
00:19:01,412 --> 00:19:02,932
is that it's completely data-oriented,

425
00:19:02,972 --> 00:19:05,293
so it doesn't know what it's customizing.

426
00:19:05,393 --> 00:19:06,733
So you can apply it to many things.

427
00:19:08,749 --> 00:19:12,250
So a good way to describe a data-oriented pipeline

428
00:19:12,290 --> 00:19:15,372
is to look at the data and then find out what's in there.

429
00:19:16,373 --> 00:19:18,033
So there's going to be two types of data

430
00:19:18,053 --> 00:19:19,374
that I'm going to talk about in WolfSkin.

431
00:19:19,394 --> 00:19:21,175
There's the config files on one side,

432
00:19:21,355 --> 00:19:23,256
and there's the item files on the other side.

433
00:19:23,917 --> 00:19:25,357
The config files, they're going to be

434
00:19:25,417 --> 00:19:27,098
shared by all the entity of the same group.

435
00:19:27,238 --> 00:19:28,559
So for instance, all the humans are

436
00:19:28,599 --> 00:19:30,400
going to point to the human configuration file.

437
00:19:30,980 --> 00:19:32,641
And then on the side, you're going

438
00:19:32,661 --> 00:19:36,423
to have a bunch of items that describe human parts and stuff

439
00:19:36,443 --> 00:19:36,703
like this.

440
00:19:37,367 --> 00:19:39,207
So the config file has three parts,

441
00:19:39,307 --> 00:19:42,308
which I'm going to go into in details right after.

442
00:19:42,948 --> 00:19:44,789
But first, we have the slot hierarchy there.

443
00:19:45,069 --> 00:19:47,050
So the slot hierarchy is just basically

444
00:19:47,090 --> 00:19:49,950
going to define how you build a character.

445
00:19:50,010 --> 00:19:51,871
So there we have a human slot at the top.

446
00:19:51,971 --> 00:19:54,752
Then we have a morphology folder in which we have head and body.

447
00:19:55,232 --> 00:19:57,473
And then you could have a bunch of clothes, body parts,

448
00:19:57,933 --> 00:19:58,373
stuff like this.

449
00:19:59,854 --> 00:20:00,974
Then we have solver rules.

450
00:20:01,054 --> 00:20:03,835
WorldSkin runs solvers on the data

451
00:20:03,895 --> 00:20:05,395
to find out what it should spawn.

452
00:20:06,478 --> 00:20:07,378
when building the character.

453
00:20:07,978 --> 00:20:10,599
For instance, there we have a rule that handles the conflict

454
00:20:10,699 --> 00:20:13,160
between head mesh, like the hair mesh,

455
00:20:13,380 --> 00:20:14,861
and the hat mesh that could occur.

456
00:20:17,782 --> 00:20:19,062
Finally, we have automation hints.

457
00:20:19,162 --> 00:20:20,303
When we were building WolfSkin, we

458
00:20:20,343 --> 00:20:23,564
found it's very important that it's super fast to add data.

459
00:20:23,684 --> 00:20:27,265
And so for that, we created some automation hints

460
00:20:27,305 --> 00:20:29,906
that the artist can make to speed up the process.

461
00:20:31,146 --> 00:20:33,187
So let's look at the slot hierarchy for a while.

462
00:20:33,207 --> 00:20:35,648
There you have the human slot on the top.

463
00:20:36,594 --> 00:20:38,074
It has a special meaning, the top slot,

464
00:20:38,335 --> 00:20:40,155
but I'll show it with the item.

465
00:20:41,395 --> 00:20:43,596
Then you have stuff like the red slots there,

466
00:20:43,636 --> 00:20:45,016
like body, torso, and pants.

467
00:20:45,076 --> 00:20:46,436
These are typically slots in which

468
00:20:46,456 --> 00:20:47,437
you're going to find meshes.

469
00:20:48,757 --> 00:20:51,537
You could also have stuff in the nodes in the hierarchy,

470
00:20:51,577 --> 00:20:54,158
such as a suit, which is basically there, just grouping

471
00:20:54,178 --> 00:20:55,638
a torso and a pants item.

472
00:20:56,939 --> 00:20:59,399
You can have other things in the slot hierarchy,

473
00:20:59,459 --> 00:21:02,360
such as enumerated values of our Boolean flags.

474
00:21:02,440 --> 00:21:04,220
There we have a gender enumerated value.

475
00:21:05,107 --> 00:21:08,488
which we described can just take male and female values.

476
00:21:10,229 --> 00:21:13,170
Finally, we can have some stuff like material parameters.

477
00:21:13,270 --> 00:21:15,892
So there we have a body paint slot,

478
00:21:16,272 --> 00:21:18,313
and we have some team logo slot.

479
00:21:19,393 --> 00:21:22,094
These are going to feed material parameters to the meshes

480
00:21:22,235 --> 00:21:23,375
and interact with each other,

481
00:21:23,395 --> 00:21:25,176
and we'll see that in detail.

482
00:21:26,618 --> 00:21:28,560
So that's the slot hierarchy in the config file.

483
00:21:28,580 --> 00:21:29,521
Now what are the items?

484
00:21:29,581 --> 00:21:32,983
So the items, it's just going to be any piece of data

485
00:21:33,003 --> 00:21:34,904
that targets a particular slot in the hierarchy.

486
00:21:35,525 --> 00:21:38,447
So if you target the top slot of the hierarchy,

487
00:21:38,507 --> 00:21:40,288
you're basically describing a full human

488
00:21:40,669 --> 00:21:42,970
and you're going to reuse items that target the other slots.

489
00:21:43,811 --> 00:21:46,293
So hopefully we can look at workflow video.

490
00:21:46,433 --> 00:21:48,254
So Wolfskin is integrated in Maya,

491
00:21:48,534 --> 00:21:49,955
where the artists work and Max.

492
00:21:51,437 --> 00:21:52,517
There we are just saying,

493
00:21:52,597 --> 00:21:53,958
okay, I'm going to create a new item.

494
00:21:55,085 --> 00:21:56,986
I said this is for the human config file,

495
00:21:57,266 --> 00:21:59,467
and then we're targeting the top slot, so human.

496
00:22:00,407 --> 00:22:03,409
Now we're just gonna give a name to our character,

497
00:22:03,489 --> 00:22:04,989
and this is going to create a file on disk.

498
00:22:05,850 --> 00:22:07,491
Now you can see on the left side,

499
00:22:07,511 --> 00:22:08,691
I have all the Wolskim data,

500
00:22:08,751 --> 00:22:10,452
and on the right side I have an addition pane.

501
00:22:11,012 --> 00:22:13,033
Because I've targeted the top slot there,

502
00:22:13,073 --> 00:22:16,375
I have like picker values for all the other slots.

503
00:22:16,595 --> 00:22:18,035
So I'm just selecting a gender there,

504
00:22:18,996 --> 00:22:21,297
and then I'm gonna select items that target the other slots,

505
00:22:21,337 --> 00:22:23,258
such as maybe a body.

506
00:22:25,515 --> 00:22:27,277
maybe a shirt and some pants.

507
00:22:30,459 --> 00:22:32,381
And because we are running in the DCC right now,

508
00:22:32,401 --> 00:22:34,262
we have control over the modeling pipeline.

509
00:22:34,342 --> 00:22:36,964
So we're going to be able to save a file

510
00:22:37,284 --> 00:22:40,186
and then click an eye icon to see the character.

511
00:22:41,047 --> 00:22:43,029
And this is going to trigger loading of the skeleton,

512
00:22:43,329 --> 00:22:45,811
loading of the gamex meshes, and then put that all together

513
00:22:45,871 --> 00:22:48,913
in the Maya part.

514
00:22:50,094 --> 00:22:54,077
And a little disclaimer here, the loading times

515
00:22:54,217 --> 00:22:54,337
are.

516
00:22:55,127 --> 00:23:00,409
shortened, but this is still pretty fast.

517
00:23:00,650 --> 00:23:02,671
So there you see I can just change

518
00:23:02,711 --> 00:23:03,911
the gender of my character, and it's

519
00:23:03,931 --> 00:23:08,594
the same character which is loading in the DCC.

520
00:23:10,175 --> 00:23:13,856
So the characters look the same, but with adapted morphology.

521
00:23:16,158 --> 00:23:22,121
We can continue editing the character, add some clothes.

522
00:23:24,632 --> 00:23:26,673
So again, changing the gender is an atomic operation.

523
00:23:26,733 --> 00:23:29,094
So you can just quickly gender swap the character

524
00:23:30,215 --> 00:23:32,616
and click the eye icon and save.

525
00:23:37,718 --> 00:23:39,159
So a little loading.

526
00:23:39,399 --> 00:23:39,780
There we go.

527
00:23:42,201 --> 00:23:44,282
So maybe just swap again.

528
00:23:44,302 --> 00:23:46,643
And then once we're happy, we're going

529
00:23:46,663 --> 00:23:49,244
to be able to just save our file and integrate into the game

530
00:23:49,285 --> 00:23:49,505
engine.

531
00:23:55,273 --> 00:23:56,354
Let's go into Dunia.

532
00:24:00,955 --> 00:24:02,536
So we go into the game engine, which

533
00:24:02,616 --> 00:24:05,377
is a component-based game engine.

534
00:24:05,877 --> 00:24:07,317
So I'm just going to drop a character.

535
00:24:07,397 --> 00:24:09,538
And on this character, I have a Wolfskin component,

536
00:24:10,338 --> 00:24:11,959
in which I'm just going to point to the file

537
00:24:11,979 --> 00:24:12,819
that we just created.

538
00:24:16,340 --> 00:24:18,141
As you can see, we are loading the character.

539
00:24:18,401 --> 00:24:20,901
Now, because, as you saw before, we

540
00:24:21,041 --> 00:24:23,342
have a pre-loading of all the resources in the game engine,

541
00:24:24,032 --> 00:24:25,072
So it's the same for both skin.

542
00:24:25,092 --> 00:24:28,795
I can go back into Maya, open my application, do a change,

543
00:24:29,616 --> 00:24:30,856
save the file, and then it's going

544
00:24:30,957 --> 00:24:32,698
to hot reload the character in the engine.

545
00:24:36,661 --> 00:24:39,803
Then we can continue customizing the character.

546
00:24:39,823 --> 00:24:42,625
So before, it would take us a really long time

547
00:24:42,645 --> 00:24:43,646
to integrate the character.

548
00:24:43,846 --> 00:24:46,828
And as you see right now, it takes a minute or two

549
00:24:46,868 --> 00:24:48,789
to create a character and integrate them in the game

550
00:24:48,829 --> 00:24:51,851
engine, so that was really good for us.

551
00:24:53,248 --> 00:24:57,469
So that was how you create a DNA character, so a full character.

552
00:24:58,030 --> 00:24:59,810
Now let's look a little bit at the other items

553
00:24:59,850 --> 00:25:02,251
and how you create them and make them usable for the system.

554
00:25:03,591 --> 00:25:05,451
So you're going to have very simple item.

555
00:25:05,491 --> 00:25:08,252
For instance, the shoes in Far Cry Primal, they're unisex.

556
00:25:08,752 --> 00:25:09,712
So it's just one mesh.

557
00:25:10,293 --> 00:25:11,793
So maybe a shoes item is just going

558
00:25:11,813 --> 00:25:13,153
to be pointing to one mesh.

559
00:25:14,754 --> 00:25:15,874
Then you have more complex items,

560
00:25:15,914 --> 00:25:17,114
such as the torso items.

561
00:25:17,134 --> 00:25:18,735
There you see an easy armor.

562
00:25:18,855 --> 00:25:21,275
And there's a male and a female version of the same mesh.

563
00:25:22,125 --> 00:25:24,946
And these are going to be tagged appropriately so

564
00:25:24,966 --> 00:25:26,287
that the solver can load them.

565
00:25:27,208 --> 00:25:29,129
So I think we can see an example of that.

566
00:25:31,210 --> 00:25:32,931
You want to talk about it?

567
00:25:34,072 --> 00:25:36,073
So let's see how the artists work with this.

568
00:25:37,174 --> 00:25:39,675
So in this tab, this is the Mesh tab,

569
00:25:40,215 --> 00:25:42,837
they have a quick view of every mesh that's

570
00:25:42,917 --> 00:25:44,338
on data for the project.

571
00:25:44,358 --> 00:25:45,399
So it's really fast and easy.

572
00:25:45,419 --> 00:25:47,460
They can just filter and type some keywords in there

573
00:25:47,480 --> 00:25:48,280
and find meshes.

574
00:25:49,212 --> 00:25:51,253
So we just clicked, we're just loading some meshes

575
00:25:51,573 --> 00:25:54,295
so you can see specifically the meshes

576
00:25:54,315 --> 00:25:55,115
we're gonna be working with.

577
00:25:56,016 --> 00:25:57,476
So it's the same meshes you just saw before.

578
00:25:59,358 --> 00:26:02,679
So if the artist has just finished creating these meshes

579
00:26:02,719 --> 00:26:04,440
and now they wanna put them inside Wolfskin

580
00:26:04,500 --> 00:26:06,001
so that they could be used by a character,

581
00:26:06,021 --> 00:26:08,082
they're gonna go into the Mesh tab,

582
00:26:08,282 --> 00:26:09,783
select the two meshes that they have,

583
00:26:10,824 --> 00:26:14,386
and they'll just click the New Item button.

584
00:26:14,779 --> 00:26:17,081
That's going to guess automatically

585
00:26:17,181 --> 00:26:19,982
that this is a human piece, and it's going

586
00:26:20,002 --> 00:26:21,203
to be targeting the torso part.

587
00:26:22,564 --> 00:26:25,106
Now, it's also going to suggest a file name for this asset,

588
00:26:25,266 --> 00:26:27,007
and it's going to suggest a folder to save that file.

589
00:26:27,047 --> 00:26:29,569
And every piece of Wolskin data is its own separate file,

590
00:26:29,609 --> 00:26:31,490
so we're not blocking anyone else from working

591
00:26:31,870 --> 00:26:32,731
if we're working on parts.

592
00:26:33,931 --> 00:26:37,574
Lastly, this is the, again, you can see like Wolskin here.

593
00:26:37,894 --> 00:26:39,075
And this is what it looks like when

594
00:26:39,095 --> 00:26:40,416
you're editing a specific item.

595
00:26:40,556 --> 00:26:42,537
So there's the two meshes, and there's some tags.

596
00:26:42,737 --> 00:26:43,718
And they've already been set up.

597
00:26:44,341 --> 00:26:45,661
So let's see it a little bit faster.

598
00:26:47,082 --> 00:26:49,343
So I select my two meshes, click OK.

599
00:26:50,283 --> 00:26:51,864
It's giving me a file name folder.

600
00:26:51,964 --> 00:26:54,385
And I just have to validate that the tags have been correctly

601
00:26:54,405 --> 00:26:56,566
tagged for male, female for the two versions of meshes,

602
00:26:56,586 --> 00:26:57,106
and that's about it.

603
00:26:58,026 --> 00:26:58,946
So it's really, really fast.

604
00:27:00,547 --> 00:27:04,128
And we're just going to do one more

605
00:27:04,468 --> 00:27:07,570
so you can get a real idea of how easy it was to integrate.

606
00:27:08,590 --> 00:27:08,770
OK.

607
00:27:10,271 --> 00:27:10,951
So how does that work?

608
00:27:11,870 --> 00:27:14,933
So just when I was describing configuration file,

609
00:27:14,953 --> 00:27:16,694
I said there's a section about automation hints.

610
00:27:17,234 --> 00:27:17,995
These are really simple.

611
00:27:18,035 --> 00:27:19,736
There's just two types of automation hints.

612
00:27:19,836 --> 00:27:21,437
The first is going to be a folder structure

613
00:27:21,457 --> 00:27:22,178
to start mapping.

614
00:27:22,258 --> 00:27:24,419
So basically, we'll skin if we're

615
00:27:24,439 --> 00:27:28,902
creating an item with meshes in the human slash body folder,

616
00:27:29,003 --> 00:27:32,705
we're just going to guess that this is a human item

617
00:27:32,725 --> 00:27:33,566
for the body slot.

618
00:27:36,017 --> 00:27:38,540
Likewise, we have naming convention to tags.

619
00:27:38,580 --> 00:27:41,462
So the meshes themselves, when you create the easy layout

620
00:27:41,502 --> 00:27:43,024
more for the female character, you're

621
00:27:43,044 --> 00:27:44,765
going to name it maybe underscore F.

622
00:27:44,926 --> 00:27:46,107
And in the configuration file, you're

623
00:27:46,127 --> 00:27:47,548
going to say, if you find underscore F,

624
00:27:47,588 --> 00:27:49,370
just tag it female automatically.

625
00:27:50,070 --> 00:27:53,353
So this enforces good practice in the data structure.

626
00:27:53,413 --> 00:27:56,216
You make sure that your data is nice and organized.

627
00:27:56,816 --> 00:28:00,200
And it also makes creating the items really fast.

628
00:28:02,276 --> 00:28:04,656
So before we move on to a few other things

629
00:28:04,716 --> 00:28:07,617
in the slot hierarchy, let's look at how the solver works.

630
00:28:07,657 --> 00:28:09,497
So you saw that I was able to change the gender

631
00:28:09,577 --> 00:28:10,738
and then just read out the character.

632
00:28:11,358 --> 00:28:13,518
We're going to run into detail the example

633
00:28:13,558 --> 00:28:15,919
of how the solver is running on the data.

634
00:28:18,099 --> 00:28:20,180
So I mentioned there's the rules section

635
00:28:20,240 --> 00:28:23,280
in a configuration file, and these are basically

636
00:28:23,820 --> 00:28:25,141
pieces of data that I'm gonna say,

637
00:28:25,181 --> 00:28:27,161
this is how you select the best version of the meshes

638
00:28:27,341 --> 00:28:30,362
for each items that you are finding DNA.

639
00:28:31,166 --> 00:28:32,727
So let's run through an example.

640
00:28:33,608 --> 00:28:35,509
We have a very simple configuration file

641
00:28:35,569 --> 00:28:38,131
with just one rule in there,

642
00:28:38,191 --> 00:28:40,413
and it says require tag from a new slot gender.

643
00:28:41,954 --> 00:28:43,935
So let's just build a DNA.

644
00:28:44,556 --> 00:28:46,397
I'm just gonna add some items in there.

645
00:28:46,998 --> 00:28:49,600
You can see I have a body, a leather top, and some pants.

646
00:28:50,180 --> 00:28:51,961
And the body and the leather top

647
00:28:52,242 --> 00:28:53,923
each have two mesh versions,

648
00:28:54,143 --> 00:28:55,404
one tag male, one tag female.

649
00:28:56,155 --> 00:28:58,236
And then the pants have only one version,

650
00:28:58,276 --> 00:28:59,417
which is tagged male and female,

651
00:28:59,437 --> 00:29:03,119
so it would be a unisex mesh that fits both characters.

652
00:29:04,340 --> 00:29:05,621
I also need to select the gender,

653
00:29:05,641 --> 00:29:08,563
so I'm just gonna go in my DNA and select a female gender.

654
00:29:09,443 --> 00:29:11,165
Now the solver is gonna run on the character

655
00:29:11,265 --> 00:29:12,425
and select the right versions.

656
00:29:13,646 --> 00:29:15,087
So the first thing that the solver does

657
00:29:15,187 --> 00:29:17,108
is to initialize a score of zero

658
00:29:17,169 --> 00:29:18,649
on all the mesh's versions,

659
00:29:19,410 --> 00:29:20,471
and then run through the rules.

660
00:29:20,731 --> 00:29:21,972
So we run through the first rule,

661
00:29:22,272 --> 00:29:23,573
require a tag for a name sub-gender.

662
00:29:24,133 --> 00:29:26,615
we can eliminate anything that doesn't have a female tag.

663
00:29:27,115 --> 00:29:29,496
And as you can see, basically, we just

664
00:29:29,536 --> 00:29:30,877
removed the male-only versions.

665
00:29:31,797 --> 00:29:33,378
Because this is a really simple example,

666
00:29:33,478 --> 00:29:35,339
the solving is done now.

667
00:29:35,419 --> 00:29:40,362
So we have female meshes and unisex meshes selected.

668
00:29:42,163 --> 00:29:44,124
Now, let's look at a more complex example

669
00:29:44,144 --> 00:29:46,885
on this character, hopefully.

670
00:29:51,097 --> 00:29:53,757
Yeah, notice how she has a hair in the back of her head

671
00:29:53,797 --> 00:29:55,898
that would clip, and we're gonna add a hood

672
00:29:55,938 --> 00:29:56,538
on the character.

673
00:30:00,759 --> 00:30:02,899
So you can see that the part that would be clipping

674
00:30:02,939 --> 00:30:05,060
has disappeared, but you can still see the fringe

675
00:30:05,100 --> 00:30:08,380
that she had on the front, so the visual quality

676
00:30:08,420 --> 00:30:09,621
of the thing is still there.

677
00:30:10,461 --> 00:30:14,022
There, just for fun, we added a Boolean flag in the DNA

678
00:30:14,062 --> 00:30:16,162
that makes you able to select whether or not

679
00:30:16,182 --> 00:30:18,003
you want the hood, so we also remove the hood,

680
00:30:18,123 --> 00:30:18,943
you see the hair come back.

681
00:30:20,024 --> 00:30:23,447
Now let's put on a big hat, like let's put the hood back,

682
00:30:23,507 --> 00:30:26,109
and then I try to put a big hat on the character.

683
00:30:26,910 --> 00:30:29,132
And you can see, likewise, the hat would not

684
00:30:29,152 --> 00:30:31,254
fit under the hood, so it removed the hood and the hair

685
00:30:31,274 --> 00:30:31,454
back.

686
00:30:31,474 --> 00:30:37,500
And then we can add some cool effects to look really cool.

687
00:30:39,562 --> 00:30:41,664
So let's look at how an example like this works.

688
00:30:41,784 --> 00:30:44,827
So we start again from our same configuration file,

689
00:30:44,867 --> 00:30:45,868
but we have two rules now.

690
00:30:46,571 --> 00:30:48,552
So the first one that we add is bonus

691
00:30:48,812 --> 00:30:50,892
to covers the head in top plus one.

692
00:30:51,453 --> 00:30:53,893
So this is basically going to be a default selecting rule.

693
00:30:54,114 --> 00:30:56,054
There we are just saying if you have the choice

694
00:30:56,094 --> 00:30:58,235
between a version that covers the head

695
00:30:58,255 --> 00:31:02,036
or that doesn't in top, just give a bonus to this one.

696
00:31:03,117 --> 00:31:04,837
Finally, we have a conditional rule in there.

697
00:31:05,117 --> 00:31:06,678
If the hat as a tag is thick,

698
00:31:06,958 --> 00:31:09,159
then you're going to ask to reject covers the head in top.

699
00:31:09,579 --> 00:31:11,239
So this is basically the translation of

700
00:31:11,539 --> 00:31:13,020
if the hat does not fit under the hood,

701
00:31:13,200 --> 00:31:13,900
then remove the hood.

702
00:31:14,865 --> 00:31:16,825
You could have a hat which is not tagged as thick,

703
00:31:16,865 --> 00:31:18,506
and it would fit nicely in the hood.

704
00:31:19,606 --> 00:31:20,766
So you can support those.

705
00:31:22,326 --> 00:31:24,327
Let's fill our DNA.

706
00:31:24,787 --> 00:31:26,787
So now you can see that the hoodie has four meshes,

707
00:31:28,068 --> 00:31:29,488
male and female version again.

708
00:31:29,588 --> 00:31:31,308
But this time, there's the covers the head

709
00:31:31,368 --> 00:31:33,629
and the doesn't cover the head versions.

710
00:31:34,609 --> 00:31:37,130
The hat has only two versions, and they're

711
00:31:37,150 --> 00:31:39,110
both thick because the hat does not fit in their hood.

712
00:31:39,810 --> 00:31:42,671
So once again, we initialize the score of zero

713
00:31:42,691 --> 00:31:43,551
to all the mesh versions.

714
00:31:44,142 --> 00:31:45,063
And then we run through the rules.

715
00:31:46,604 --> 00:31:49,367
The gender rule is going to eliminate half of the choices

716
00:31:49,427 --> 00:31:49,687
again.

717
00:31:51,148 --> 00:31:52,970
Then the default selecting rule bonus

718
00:31:53,010 --> 00:31:55,191
is going to try and select the version with the hood on.

719
00:31:55,352 --> 00:31:59,075
So we give a bonus score to the female hood.

720
00:32:02,117 --> 00:32:03,618
But then we run the last one, and we

721
00:32:03,659 --> 00:32:05,900
look at all the available version in the hat,

722
00:32:06,040 --> 00:32:07,682
and we see that there is the tag is thick.

723
00:32:08,382 --> 00:32:12,246
And this rule is rejecting the covers the head tag in the hood

724
00:32:14,355 --> 00:32:17,317
So now Solver has finished selecting

725
00:32:17,337 --> 00:32:19,139
the right mesh versions, and you can see that

726
00:32:19,539 --> 00:32:20,881
the character would have the hat on the head,

727
00:32:21,601 --> 00:32:24,844
and she would not have the hood on her head at the same time.

728
00:32:26,386 --> 00:32:27,667
So that's how the Solver works.

729
00:32:29,288 --> 00:32:31,610
The good thing with having a Solver in data and the rule

730
00:32:31,650 --> 00:32:35,293
is that you can come in any time in the production

731
00:32:35,354 --> 00:32:38,416
and try to fix some conflicts that you have,

732
00:32:38,456 --> 00:32:39,497
for instance, on Primal.

733
00:32:41,051 --> 00:32:43,713
Late in the production, we noticed that the quivers were

734
00:32:43,753 --> 00:32:46,114
made to fit on top of a coat.

735
00:32:46,174 --> 00:32:48,796
So the problem was that when we had the topless characters,

736
00:32:48,936 --> 00:32:51,137
the quiver would not match their body very well.

737
00:32:51,918 --> 00:32:53,819
So we created a new version of the quiver

738
00:32:53,899 --> 00:32:55,420
to better match the morphology.

739
00:32:56,020 --> 00:32:58,422
And in just like one hour or two sitting with the artist,

740
00:32:58,442 --> 00:33:01,023
we created a rule, and then created data,

741
00:33:01,083 --> 00:33:04,926
created some mesh variations, and then put that in the game.

742
00:33:07,987 --> 00:33:08,368
So that's it.

743
00:33:08,861 --> 00:33:12,063
It for the solver, now a little more about the slots

744
00:33:12,123 --> 00:33:13,184
that we didn't mention there.

745
00:33:13,244 --> 00:33:15,585
So I mentioned that there's some material slots in there,

746
00:33:16,166 --> 00:33:18,747
and because they're separate from all the meshes,

747
00:33:19,127 --> 00:33:20,588
we can wonder how that works.

748
00:33:21,729 --> 00:33:23,870
So when you define those material parameter slots,

749
00:33:25,732 --> 00:33:27,092
you're going to be free of the logic

750
00:33:27,112 --> 00:33:29,754
of how to apply those material parameters to the items.

751
00:33:29,794 --> 00:33:30,975
So the only thing that you're gonna do,

752
00:33:31,235 --> 00:33:32,856
you're gonna say I have a palette slot there,

753
00:33:33,396 --> 00:33:36,098
and it just takes two colors, and those colors are named.

754
00:33:37,292 --> 00:33:40,093
We just say, OK, a palette is a main color

755
00:33:40,113 --> 00:33:40,993
and a secondary color.

756
00:33:41,533 --> 00:33:43,254
And the team skin is maybe just a team logo.

757
00:33:44,434 --> 00:33:46,895
Now, when you create items for those slots in WolfSkin,

758
00:33:46,935 --> 00:33:49,095
you're just basically going to fill values for them.

759
00:33:49,215 --> 00:33:52,596
So for instance, I can create a palette, select two colors.

760
00:33:52,836 --> 00:33:55,977
I can create a team logo and then just point to a texture.

761
00:33:56,537 --> 00:33:57,637
And I can create a lot of those.

762
00:33:58,117 --> 00:34:00,318
But we still are away from logic.

763
00:34:01,738 --> 00:34:04,259
On the other hand, when you create an item which

764
00:34:04,279 --> 00:34:04,939
chooses meshes.

765
00:34:05,399 --> 00:34:07,260
there you're going to have an interface that lets you

766
00:34:07,460 --> 00:34:09,141
override the parameters of this item.

767
00:34:09,841 --> 00:34:12,543
So you're going to gather all the materials in those meshes

768
00:34:12,803 --> 00:34:15,765
and then be able to point, OK, for this item,

769
00:34:15,805 --> 00:34:19,167
I want you to override the diffuse color of this material

770
00:34:19,667 --> 00:34:20,628
and then put those values.

771
00:34:21,548 --> 00:34:23,250
So you could put the values by hand,

772
00:34:23,290 --> 00:34:27,272
but you could also point to variables in the DNA.

773
00:34:27,912 --> 00:34:29,053
So there, we're just going to say,

774
00:34:29,073 --> 00:34:30,994
my diffuse color is the main color,

775
00:34:31,134 --> 00:34:33,016
my diffuse color 2 is the secondary color,

776
00:34:33,036 --> 00:34:33,636
and all these things.

777
00:34:34,327 --> 00:34:37,168
This lets you have those atomic operations

778
00:34:37,208 --> 00:34:38,949
that deal with the meshes.

779
00:34:39,690 --> 00:34:41,271
And all the meshes are free to do whatever

780
00:34:41,291 --> 00:34:42,732
they want with the palette.

781
00:34:44,353 --> 00:34:46,414
The good point, the good thing with that

782
00:34:46,454 --> 00:34:49,116
is that because we have heterogeneous shaders

783
00:34:49,196 --> 00:34:51,837
in the meshes, it's easier for us

784
00:34:51,897 --> 00:34:53,638
to have the logic in the meshes.

785
00:34:53,719 --> 00:34:57,101
That way we can support many setups and variations

786
00:34:57,201 --> 00:35:00,503
instead of having a very strict, like all the items,

787
00:35:00,563 --> 00:35:02,544
all the shirts needs to have the material set up like this.

788
00:35:10,543 --> 00:35:12,564
Another example, like an example in Primal,

789
00:35:12,724 --> 00:35:15,986
I think we have some class-based body paints.

790
00:35:16,206 --> 00:35:18,348
So the enemies, they will share the same body,

791
00:35:18,408 --> 00:35:20,069
but based on their class, they're going to change

792
00:35:20,109 --> 00:35:21,670
the body paint of their body.

793
00:35:22,130 --> 00:35:25,292
We also have some pre-order bonus for Takkar

794
00:35:25,372 --> 00:35:27,513
when he has custom tattoos.

795
00:35:29,614 --> 00:35:30,835
That was what we used it for.

796
00:35:32,336 --> 00:35:34,797
Now, one last detail that I want to go over

797
00:35:34,877 --> 00:35:36,978
is the orange slots in this hierarchy.

798
00:35:37,574 --> 00:35:40,056
So there I just mentioned that we have a suit slot sometimes

799
00:35:40,717 --> 00:35:43,219
and it groups items, but there's a little more to it.

800
00:35:43,399 --> 00:35:44,660
So let's look at an example.

801
00:35:45,700 --> 00:35:47,822
Now we have to go back a little bit to the research

802
00:35:47,882 --> 00:35:50,584
phase of the system, because this is not really,

803
00:35:51,365 --> 00:35:52,666
it's not greatly used in Primal.

804
00:35:53,206 --> 00:35:55,488
But if you remember in Far Cry 3 and 4,

805
00:35:55,848 --> 00:35:58,490
we had some PVP with team-based gameplay.

806
00:35:59,571 --> 00:36:01,933
So there we just created a simple hierarchy.

807
00:36:01,973 --> 00:36:04,995
We have a top and pants slot, and we have a palette slot.

808
00:36:05,576 --> 00:36:07,057
And then on top of that, we have a full suit.

809
00:36:07,486 --> 00:36:08,967
slot and a gameplay slot.

810
00:36:09,947 --> 00:36:11,708
So I'm creating my character, and I can just

811
00:36:11,728 --> 00:36:14,430
select a top and pants and a palette,

812
00:36:14,470 --> 00:36:16,331
and have my character look the way I want.

813
00:36:17,812 --> 00:36:20,193
Now, sometimes you want to give a suit to the player,

814
00:36:20,233 --> 00:36:22,474
but you don't want them to mix and match items.

815
00:36:22,494 --> 00:36:24,735
So there, we created a hunter suit,

816
00:36:25,296 --> 00:36:26,896
and it's a very specific top that

817
00:36:26,916 --> 00:36:29,278
goes well with some very specific top, pants,

818
00:36:30,298 --> 00:36:30,799
and a palette.

819
00:36:32,119 --> 00:36:35,681
Now, this character could try and go into PVP mode now.

820
00:36:37,000 --> 00:36:40,542
and you want to display the team color of their character.

821
00:36:41,802 --> 00:36:44,203
The thing is, so then you can give control

822
00:36:44,223 --> 00:36:45,784
to the gameplay team and be like, OK,

823
00:36:45,804 --> 00:36:47,464
so I created a slot for you in hierarchy.

824
00:36:47,925 --> 00:36:49,525
And the rule with the hierarchy is

825
00:36:49,565 --> 00:36:53,167
that the higher the slot is, the more priority

826
00:36:53,187 --> 00:36:54,107
it has over the other slots.

827
00:36:54,847 --> 00:36:57,388
So when you put the suit, it overrides the top and pants.

828
00:36:57,688 --> 00:37:00,189
And when I give the gameplay team,

829
00:37:00,229 --> 00:37:02,050
like they override the palette, they

830
00:37:02,070 --> 00:37:03,551
put their item higher in the hierarchy,

831
00:37:03,971 --> 00:37:05,792
and they're going to be able to override the palette.

832
00:37:07,032 --> 00:37:09,993
Now, the good thing about that is that in the DNA now,

833
00:37:10,033 --> 00:37:11,494
I have like three tops, but they all

834
00:37:11,534 --> 00:37:13,115
come from different levels in hierarchy.

835
00:37:13,755 --> 00:37:18,017
And the priority, so conflict solving, is handling that.

836
00:37:18,657 --> 00:37:20,979
But it also means that it's a non-destructive operation.

837
00:37:21,079 --> 00:37:22,719
So as soon as they exit the arena,

838
00:37:23,240 --> 00:37:25,521
I'm going to be able to remove the gameplay item,

839
00:37:25,721 --> 00:37:27,922
and it's going to remove my team color without destroying

840
00:37:27,962 --> 00:37:28,742
my customization.

841
00:37:29,323 --> 00:37:31,084
Likewise, if I remove my suit, I'm

842
00:37:31,104 --> 00:37:32,364
going to still find my character there.

843
00:37:34,405 --> 00:37:35,666
So that's it for Wolfskin.

844
00:37:36,657 --> 00:37:38,358
No, we have a little more details.

845
00:37:39,920 --> 00:37:43,503
So the next thing we wanted to look at was variety.

846
00:37:44,564 --> 00:37:47,286
So what is variety in a game like Far Cry?

847
00:37:48,247 --> 00:37:50,349
It's taking all these separate meshes that we built,

848
00:37:50,449 --> 00:37:53,932
all these separate parts, and assembling them

849
00:37:54,712 --> 00:37:57,575
in different ways to build an even greater

850
00:37:57,635 --> 00:37:58,856
number of characters.

851
00:38:00,277 --> 00:38:00,718
In the past.

852
00:38:01,555 --> 00:38:06,399
We do this through random combinations

853
00:38:06,599 --> 00:38:07,720
whenever a character spawns.

854
00:38:08,601 --> 00:38:10,223
And we decided to solve that a little differently

855
00:38:10,263 --> 00:38:13,405
for this project because what we wanted to do

856
00:38:13,445 --> 00:38:16,488
was actually do full DNAs for our NPCs

857
00:38:16,648 --> 00:38:18,850
and then randomly spawn full characters.

858
00:38:20,532 --> 00:38:22,594
So why would we want to do that?

859
00:38:24,736 --> 00:38:27,598
The way we used to work was we would have to tag meshes

860
00:38:27,638 --> 00:38:28,499
that worked well together.

861
00:38:28,905 --> 00:38:32,086
So these pants work well with these shirts.

862
00:38:33,686 --> 00:38:35,467
The skirt works well with these shirts.

863
00:38:36,847 --> 00:38:40,568
But the hood and tunic don't work well

864
00:38:40,689 --> 00:38:42,189
with the one on the top left.

865
00:38:43,609 --> 00:38:46,710
So you can imagine, the more and more and more things we add,

866
00:38:46,770 --> 00:38:48,331
this thing can just fly out of control.

867
00:38:48,651 --> 00:38:52,552
And it's a giant maze of tags of include, exclude,

868
00:38:53,353 --> 00:38:53,913
and that type of thing.

869
00:38:55,723 --> 00:38:58,685
Experience showed us this is really difficult, also

870
00:38:58,745 --> 00:39:01,746
dangerous, because when artists are dropping characters

871
00:39:01,786 --> 00:39:04,367
in the map, they're going to see random spawned characters,

872
00:39:04,527 --> 00:39:06,648
but they're not going to see every possible combination.

873
00:39:06,688 --> 00:39:08,708
There could be millions of possible combinations.

874
00:39:09,809 --> 00:39:11,670
So that becomes really hard to debug and make sure

875
00:39:11,690 --> 00:39:12,930
that we actually don't have any problems,

876
00:39:14,571 --> 00:39:16,632
especially because once it gets in the hands of our players,

877
00:39:17,872 --> 00:39:19,533
if this gets in the hands of millions of players

878
00:39:19,593 --> 00:39:22,354
and each of them sees thousands of characters

879
00:39:22,374 --> 00:39:23,174
through the course of the game.

880
00:39:23,572 --> 00:39:25,793
They're going to see combinations that we just never,

881
00:39:25,893 --> 00:39:26,754
ever saw as artists.

882
00:39:28,135 --> 00:39:31,897
The other issue is, even if our QC team did find issues

883
00:39:31,957 --> 00:39:33,758
and flag them and say, hey, here's

884
00:39:33,798 --> 00:39:36,760
a screenshot of a character that has meshes that don't work

885
00:39:36,800 --> 00:39:40,963
together, or their skin color is the wrong color on the hands

886
00:39:41,003 --> 00:39:43,985
and their face, that's another big problem.

887
00:39:44,025 --> 00:39:47,087
Because now it's really hard with this mess of tagging data

888
00:39:47,347 --> 00:39:49,789
to figure out what combination of tags

889
00:39:49,829 --> 00:39:50,649
actually let that happen.

890
00:39:52,070 --> 00:39:53,431
Instead, we decided to.

891
00:39:54,458 --> 00:39:55,919
just simplify it and break it down

892
00:39:55,959 --> 00:39:57,200
into small, solvable problems.

893
00:39:57,840 --> 00:40:00,642
So what we did was we could take a bunch of meshes

894
00:40:00,682 --> 00:40:02,103
that we knew worked well together

895
00:40:02,203 --> 00:40:04,024
and throw them into something we called a generator.

896
00:40:04,164 --> 00:40:05,946
And that would generate random DNAs.

897
00:40:06,906 --> 00:40:09,028
It would tell us how many possible DNAs we could build,

898
00:40:09,168 --> 00:40:11,509
and we would tell it how many we would like it to build.

899
00:40:11,589 --> 00:40:13,131
So in this example, maybe we built

900
00:40:13,151 --> 00:40:16,253
a possible 600 combinations of these meshes.

901
00:40:18,782 --> 00:40:20,984
When we're done, we might go to a different generator,

902
00:40:21,124 --> 00:40:22,886
build another selection of meshes,

903
00:40:23,106 --> 00:40:24,767
and build a few more characters.

904
00:40:24,787 --> 00:40:27,470
And then we just keep going, and we keep going.

905
00:40:27,510 --> 00:40:29,892
And we just add meshes that we know will work well together

906
00:40:30,012 --> 00:40:31,333
or that fit this character class,

907
00:40:31,653 --> 00:40:33,154
throw them into generators, and build

908
00:40:33,335 --> 00:40:34,436
randomly generated characters.

909
00:40:35,096 --> 00:40:36,337
But we can also build them by hand.

910
00:40:37,038 --> 00:40:40,341
If an artist builds a new asset and they want to actually

911
00:40:40,401 --> 00:40:41,842
custom build a character, or if they

912
00:40:41,882 --> 00:40:44,444
want to tweak one that's being built by the generator.

913
00:40:44,770 --> 00:40:47,331
And sometimes we even want to pull them out of a list.

914
00:40:47,471 --> 00:40:49,853
So whenever they go out of the generator,

915
00:40:49,873 --> 00:40:51,974
they just get thrown into a list of NPCs to spawn.

916
00:40:52,394 --> 00:40:53,555
But sometimes we want to pull them out

917
00:40:53,575 --> 00:40:54,456
and make them a quest giver.

918
00:40:54,556 --> 00:40:56,937
So we can go in and play with it however we want.

919
00:40:58,698 --> 00:41:01,020
And when we're done, we have a giant list

920
00:41:01,140 --> 00:41:02,801
of DNAs for characters.

921
00:41:03,341 --> 00:41:05,322
And then they're deterministic.

922
00:41:05,362 --> 00:41:06,403
So we can control them.

923
00:41:06,783 --> 00:41:07,704
We can bug fix them.

924
00:41:07,864 --> 00:41:09,145
If there's ever an issue, we can just

925
00:41:09,185 --> 00:41:11,286
go into the DNA of any specific character.

926
00:41:11,910 --> 00:41:14,791
and change the items that it's wearing or fix the bug,

927
00:41:15,811 --> 00:41:20,033
or even debug what specific tags are causing conflict.

928
00:41:21,614 --> 00:41:22,454
So that's really cool.

929
00:41:22,534 --> 00:41:24,155
And of course, if we ever find that we

930
00:41:24,195 --> 00:41:25,715
don't have enough possible combinations,

931
00:41:25,775 --> 00:41:27,536
we can just go back to that original generator

932
00:41:27,596 --> 00:41:30,517
and generate some more of that 600 possible combinations.

933
00:41:33,158 --> 00:41:34,158
So we're coming towards the end.

934
00:41:34,759 --> 00:41:35,899
And we're just going to talk a little bit

935
00:41:35,919 --> 00:41:36,839
about what went right.

936
00:41:36,939 --> 00:41:38,580
And then we'll also talk about what went wrong.

937
00:41:39,881 --> 00:41:40,481
So what went right?

938
00:41:41,628 --> 00:41:45,170
We built a complete character customization and modeling

939
00:41:45,190 --> 00:41:45,651
pipeline.

940
00:41:47,011 --> 00:41:49,473
We supported skin characters, skeletons,

941
00:41:49,693 --> 00:41:50,814
and static and breakable props.

942
00:41:50,854 --> 00:41:54,056
We didn't talk about them, but if you play through Primal,

943
00:41:54,076 --> 00:41:55,637
you'll see a lot of armor or helmets

944
00:41:55,677 --> 00:41:57,919
that can be shattered when you strike them.

945
00:41:58,459 --> 00:42:00,821
So we supported those as well in our pipeline.

946
00:42:01,681 --> 00:42:03,442
We had to maximize support so artists

947
00:42:03,462 --> 00:42:05,023
could use whatever they wanted, and riggers

948
00:42:05,043 --> 00:42:05,944
could use whatever they wanted.

949
00:42:07,502 --> 00:42:18,567
We have this fast Wolfskin and GameX iteration loop where the two, the customization system and the modeling pipeline are really connected to each other and it's really fast and easy to work and then integrate new items.

950
00:42:19,387 --> 00:42:23,549
And lastly, because of all of this, we actually got to do a lot of stuff that we normally wouldn't bother doing.

951
00:42:24,509 --> 00:42:30,312
So for example, we added DLC. Julian mentioned we have this paint that you can unlock as a pre-order bonus.

952
00:42:31,052 --> 00:42:32,012
And crafting costumes.

953
00:42:32,612 --> 00:42:34,932
During the course of the game, even though it's first person,

954
00:42:34,972 --> 00:42:36,653
you are crafting your winter gear.

955
00:42:37,113 --> 00:42:39,993
So when you go into the northern part of the map,

956
00:42:40,133 --> 00:42:41,473
it's a frozen north, and you need

957
00:42:41,493 --> 00:42:42,714
to upgrade your gear to go there.

958
00:42:42,874 --> 00:42:45,434
So we actually were able to really easily,

959
00:42:45,534 --> 00:42:47,494
on the artist team, just integrate

960
00:42:47,895 --> 00:42:49,375
this upgrading clothing.

961
00:42:49,415 --> 00:42:52,095
And we used some of those things we saw with the folder slots

962
00:42:52,175 --> 00:42:52,555
and things.

963
00:42:53,716 --> 00:42:55,436
And we also use them on the NPCs as well.

964
00:42:55,496 --> 00:42:57,436
So the NPCs also equip winter gear

965
00:42:57,456 --> 00:42:58,256
when they go in the north.

966
00:43:00,069 --> 00:43:02,370
So we were able to do a few things like that

967
00:43:02,430 --> 00:43:05,390
that we normally would have required programmers or support.

968
00:43:05,690 --> 00:43:08,011
And instead, we could just build it out in data.

969
00:43:09,611 --> 00:43:14,633
So lastly, we'll just have a, for what went right,

970
00:43:14,693 --> 00:43:16,213
we'll just go through a little video

971
00:43:16,233 --> 00:43:17,913
so you can see some more things about what

972
00:43:17,933 --> 00:43:19,314
we built with the pipeline and see some

973
00:43:19,354 --> 00:43:20,214
of the characters in action.

974
00:45:59,174 --> 00:46:00,615
So that was for what went right.

975
00:46:02,115 --> 00:46:03,936
Now let's talk a little bit about what went wrong.

976
00:46:03,956 --> 00:46:06,457
There's also obviously a lot of that as well.

977
00:46:07,957 --> 00:46:13,879
First thing we want to talk about is that very commonly now in AAA, we're not equipped

978
00:46:13,979 --> 00:46:15,880
to deal with transversal tasks very well.

979
00:46:16,498 --> 00:46:19,761
So there was a longer research period where we tried to say,

980
00:46:19,801 --> 00:46:21,682
OK, we think this is the direction we want to go

981
00:46:21,702 --> 00:46:22,702
with the character system.

982
00:46:23,523 --> 00:46:25,624
And the thing is, when you start pulling something in a

983
00:46:25,744 --> 00:46:27,706
AAA engine, everything comes together.

984
00:46:28,466 --> 00:46:29,907
So it's true about characters.

985
00:46:30,427 --> 00:46:33,429
You start pulling that, and then get play, engine, tools,

986
00:46:33,489 --> 00:46:37,112
animation, online graphics, they all come at the same time.

987
00:46:38,375 --> 00:46:40,175
So when you try and sit down with everybody,

988
00:46:40,516 --> 00:46:41,716
all the stakeholders in a room,

989
00:46:41,776 --> 00:46:42,516
and then you try to say,

990
00:46:42,576 --> 00:46:44,717
okay, this is the direction that we want to go,

991
00:46:45,478 --> 00:46:49,619
it's very hard to have 10 people agree on a direction,

992
00:46:49,679 --> 00:46:51,860
especially when it's not a thing

993
00:46:51,880 --> 00:46:53,281
that you can see at the time.

994
00:46:54,401 --> 00:46:58,983
So, actually, there was two thing on Primal

995
00:46:59,003 --> 00:47:00,083
that helped us solve that.

996
00:47:00,163 --> 00:47:03,465
The first was clearing up the decision process.

997
00:47:05,507 --> 00:47:07,669
We really had a very tight schedule in Primal,

998
00:47:07,749 --> 00:47:11,371
so we agreed that we only had maybe a very short amount

999
00:47:11,391 --> 00:47:12,471
of time to make the decision.

1000
00:47:12,991 --> 00:47:14,632
So we've reduced the number of stakeholders.

1001
00:47:14,672 --> 00:47:19,455
We made a clear decision process, and that helped us.

1002
00:47:20,115 --> 00:47:25,618
The second thing is instead of having teams waiting

1003
00:47:25,638 --> 00:47:28,320
for each other, like the engine team does their part,

1004
00:47:28,360 --> 00:47:30,661
and then we wait for the tools team to do their part,

1005
00:47:30,701 --> 00:47:32,742
and all this thing, you can have scheduling conflicts

1006
00:47:32,762 --> 00:47:33,162
and everything.

1007
00:47:33,803 --> 00:47:34,443
Instead, we sort of.

1008
00:47:36,066 --> 00:47:39,369
made it more a topic in itself, so I took over,

1009
00:47:39,809 --> 00:47:41,511
even though I wasn't a tools programmer or something,

1010
00:47:41,551 --> 00:47:43,933
I took over all the parts from the pipeline

1011
00:47:43,993 --> 00:47:45,114
to the tools to the engine,

1012
00:47:45,274 --> 00:47:47,616
and then tried to make all the characters work together.

1013
00:47:47,776 --> 00:47:50,618
That way we would not be trying to wait for each other.

1014
00:47:53,621 --> 00:47:56,824
The other thing was, Junia is a very old engine.

1015
00:47:56,844 --> 00:48:00,326
It's actually based on CryEngine that we bought

1016
00:48:00,387 --> 00:48:03,229
from Crytek when Ubisoft bought Far Cry.

1017
00:48:03,938 --> 00:48:08,020
So it's been like 15 years probably in use at Ubisoft.

1018
00:48:08,700 --> 00:48:11,221
And over like very large production,

1019
00:48:11,981 --> 00:48:13,382
a lot of people have come and gone.

1020
00:48:13,522 --> 00:48:16,683
So there's a lot of the engine that we don't know now.

1021
00:48:16,803 --> 00:48:17,763
So we have lost knowledge.

1022
00:48:17,804 --> 00:48:21,245
For instance, the 3ds Max pipeline was a big mystery box.

1023
00:48:22,385 --> 00:48:26,827
So it creates a lot of fear in your discussion

1024
00:48:26,867 --> 00:48:28,467
when you're like, okay, we think we want to change

1025
00:48:28,507 --> 00:48:30,008
the pipeline, but we don't know it works.

1026
00:48:30,108 --> 00:48:32,949
So we don't know, we cannot evaluate it.

1027
00:48:34,556 --> 00:48:39,099
So in the end, yeah, we had to jump in the dark.

1028
00:48:41,320 --> 00:48:43,441
Let's talk a little bit about the future of Wolfskin.

1029
00:48:43,561 --> 00:48:45,822
So we're not there to make any announcements, obviously,

1030
00:48:45,862 --> 00:48:47,563
but if you look at our past games,

1031
00:48:48,944 --> 00:48:51,025
in Far Cry, there's been a lot of focus

1032
00:48:51,085 --> 00:48:53,246
on weapons, vehicles, animals.

1033
00:48:53,386 --> 00:48:55,728
We think because Wolfskin is data-oriented,

1034
00:48:55,928 --> 00:48:59,470
it would be a good fit to extend the customization

1035
00:48:59,730 --> 00:49:01,591
take to all these things,

1036
00:49:01,651 --> 00:49:02,932
and then extend the pipeline as well.

1037
00:49:04,115 --> 00:49:08,676
The other thing is we mentioned that you can load the assets into MotionBuilder,

1038
00:49:08,736 --> 00:49:12,418
but right now, WolfSkin is not there, so we would find it really cool if we could

1039
00:49:12,438 --> 00:49:19,440
have WolfSkin in MotionBuilder so that the animators can just load the last version of the character

1040
00:49:19,500 --> 00:49:23,961
and then have the cool assets instead of right now where we have to export an FBX

1041
00:49:24,041 --> 00:49:26,142
and then for the animators to work in MotionBuilder.

1042
00:49:27,996 --> 00:49:29,156
So that's it for us.

1043
00:49:29,396 --> 00:49:31,117
Thanks for listening to us.

1044
00:49:31,817 --> 00:49:34,218
And special thanks to everyone that worked on the pipeline

1045
00:49:34,258 --> 00:49:35,978
and provided support needed to make it possible.

1046
00:49:35,998 --> 00:49:39,179
There's a few of you in the audience, I think.

1047
00:49:39,739 --> 00:49:41,819
So thank you to everyone here as well.

1048
00:49:47,761 --> 00:49:51,242
And looks like we have a few minutes for questions,

1049
00:49:51,282 --> 00:49:52,222
if anyone has questions.

1050
00:49:53,682 --> 00:49:54,123
Just jump up.

1051
00:49:54,143 --> 00:49:55,063
There's a couple of mics there.

1052
00:49:55,604 --> 00:49:59,607
And don't forget to do the review when the survey comes

1053
00:49:59,687 --> 00:49:59,787
out.

1054
00:50:00,708 --> 00:50:00,908
Hi.

1055
00:50:01,188 --> 00:50:03,170
I was wondering, did you guys have issues

1056
00:50:03,210 --> 00:50:07,033
with piercing on tight-fitting meshes, particularly

1057
00:50:07,073 --> 00:50:07,994
like the body slot?

1058
00:50:08,014 --> 00:50:11,176
Did you have to call out certain parts of the body

1059
00:50:11,256 --> 00:50:13,258
to fix piercing issues?

1060
00:50:13,818 --> 00:50:16,340
Yeah, that's actually something that we identified

1061
00:50:16,381 --> 00:50:17,782
at the beginning in the research phase.

1062
00:50:17,982 --> 00:50:19,643
And with the previous Far Cry games,

1063
00:50:20,164 --> 00:50:22,906
we might actually have different versions of the naked body

1064
00:50:23,366 --> 00:50:25,208
with different parts hidden or unhidden.

1065
00:50:26,138 --> 00:50:30,461
Specifically for Primal, we actually have a lot of naked characters and a lot of their

1066
00:50:30,501 --> 00:50:31,962
clothes are like really loose fitting.

1067
00:50:32,523 --> 00:50:37,326
So we got really lucky on that side where because of this we actually kind of wanted

1068
00:50:37,366 --> 00:50:39,228
to keep that naked body there the whole time.

1069
00:50:39,928 --> 00:50:44,511
But definitely like on the previous Far Cry games, we needed to deal with like hiding

1070
00:50:44,551 --> 00:50:48,674
parts of the naked mesh in order to make sure that there was no clipping with the outer

1071
00:50:48,694 --> 00:50:52,437
layers of clothes and even potentially with layering of clothes as well.

1072
00:50:52,457 --> 00:50:53,518
Thanks.

1073
00:50:53,538 --> 00:50:53,638
Yeah.

1074
00:50:55,614 --> 00:50:55,759
Hey.

1075
00:50:56,840 --> 00:51:05,307
Two small questions. The first one, we can see that you can navigate through a different piece of the body,

1076
00:51:05,647 --> 00:51:12,533
and you can see the last version. Can you navigate through the different versions that have been pushed previously?

1077
00:51:12,933 --> 00:51:20,019
Sometimes it's really cool to see the evolution of one asset, and yet sometimes you're losing something instead of...

1078
00:51:21,700 --> 00:51:22,681
Yeah.

1079
00:51:22,901 --> 00:51:25,663
It's not better than before, and you want to see what's changed.

1080
00:51:25,800 --> 00:51:27,141
That's actually a really interesting thing

1081
00:51:27,181 --> 00:51:29,603
that we actually benefit from with this pipeline.

1082
00:51:30,023 --> 00:51:32,745
In the past, all of our data, like our big max files

1083
00:51:32,785 --> 00:51:36,488
and things, would be in their own separate data structure.

1084
00:51:36,828 --> 00:51:40,091
We didn't actually keep a lot of the history on those things

1085
00:51:40,211 --> 00:51:42,593
because they're such big files, especially the ZBrush files.

1086
00:51:44,094 --> 00:51:47,316
Because now our data format that you load the mesh

1087
00:51:47,356 --> 00:51:49,458
and you save the mesh is actually inside our project

1088
00:51:49,498 --> 00:51:51,419
data, we always keep a history of that.

1089
00:51:51,935 --> 00:51:54,156
And so with Perforce, just like with standard Perforce

1090
00:51:54,196 --> 00:51:56,637
revisioning, we could just roll back between things.

1091
00:51:57,117 --> 00:51:59,798
It would be nice to actually link a little bit more logic

1092
00:51:59,838 --> 00:52:01,939
there between the mesh and its texture as well.

1093
00:52:01,999 --> 00:52:04,439
You can feel that if you have this button to navigate

1094
00:52:04,459 --> 00:52:06,720
through the previous version in the same thing,

1095
00:52:06,780 --> 00:52:09,401
it could be great because you have already a lot of things.

1096
00:52:09,681 --> 00:52:12,702
Yeah, we did do that a few times where just manually

1097
00:52:12,742 --> 00:52:14,103
in Perforce, rolling back.

1098
00:52:14,203 --> 00:52:16,263
But because you're actually importing it from the engines,

1099
00:52:16,924 --> 00:52:18,386
or the same data format the engine uses,

1100
00:52:18,406 --> 00:52:19,788
you can kind of roll back that one,

1101
00:52:20,149 --> 00:52:21,070
see the change in the engine.

1102
00:52:21,090 --> 00:52:23,273
And if you wanted to grab it back into Maya,

1103
00:52:23,474 --> 00:52:24,555
you could open it still.

1104
00:52:25,437 --> 00:52:28,201
And just the second question was about the morphology

1105
00:52:28,221 --> 00:52:28,942
of the characters.

1106
00:52:29,322 --> 00:52:31,145
Because you have a woman, man, and they are.

1107
00:52:31,565 --> 00:52:34,907
pretty a lot of muscle or not or something like this.

1108
00:52:35,467 --> 00:52:40,650
Did you manage specific topologies? It seemed to be when we see all the

1109
00:52:40,670 --> 00:52:43,892
characters you generate have pretty all the same size and everything

1110
00:52:44,132 --> 00:52:47,534
because it's modular you need to have some consistency on this.

1111
00:52:47,954 --> 00:52:51,116
How do you manage to upgrade this or maybe you

1112
00:52:51,236 --> 00:52:52,297
already do this? I don't know.

1113
00:52:52,895 --> 00:52:55,457
Yeah, so they actually share the skeleton.

1114
00:52:56,157 --> 00:52:59,440
That's for, we have a lot of male and female enemies,

1115
00:52:59,580 --> 00:53:02,061
so all of the enemy animation ends up being used

1116
00:53:02,181 --> 00:53:02,882
for both genders.

1117
00:53:04,823 --> 00:53:07,445
We did share the base topology for the naked mesh,

1118
00:53:07,605 --> 00:53:10,967
and then I think pretty much most of the clothing as well,

1119
00:53:11,047 --> 00:53:14,009
because they're often adapted at the low poly.

1120
00:53:14,069 --> 00:53:15,790
So we might do a high poly on one gender,

1121
00:53:15,890 --> 00:53:17,531
and then just adapt the low poly sometimes.

1122
00:53:19,072 --> 00:53:19,833
So they were kept.

1123
00:53:20,750 --> 00:53:22,310
kind of consistent between the genders.

1124
00:53:23,331 --> 00:53:24,251
And I think that's part of it.

1125
00:53:24,311 --> 00:53:26,112
But definitely the shapes were very different

1126
00:53:26,132 --> 00:53:26,852
between the genders.

1127
00:53:27,252 --> 00:53:30,073
So it did mean for things like shoes, it's the same.

1128
00:53:30,133 --> 00:53:31,694
For hands, I think they were the same.

1129
00:53:32,094 --> 00:53:33,735
But once we got into the arms and the torso,

1130
00:53:33,775 --> 00:53:36,276
we would have to adapt the meshes as well

1131
00:53:36,356 --> 00:53:37,536
to fit that morphology.

1132
00:53:38,116 --> 00:53:38,236
OK.

1133
00:53:38,897 --> 00:53:39,417
Thanks a lot.

1134
00:53:39,857 --> 00:53:40,137
Thank you.

1135
00:53:41,378 --> 00:53:42,018
Hi.

1136
00:53:42,038 --> 00:53:43,618
I wanted to know if this system was

1137
00:53:43,738 --> 00:53:46,800
used for the main character as well as the NPCs.

1138
00:53:47,466 --> 00:53:51,647
Yeah, I think when we started we weren't using it on the main character and at a certain

1139
00:53:51,688 --> 00:53:53,788
point we switched because it just made perfect sense for us.

1140
00:53:55,169 --> 00:54:02,571
So we do use it on the main character and that's how we got the unlockable or DLC paint

1141
00:54:02,632 --> 00:54:08,414
on the player's arm is an actual texture swap that's a separate item in the system.

1142
00:54:09,834 --> 00:54:11,255
And the same with the crafting of the clothing.

1143
00:54:11,975 --> 00:54:18,317
And if you go third person, like you can actually in Primal, you can switch to the eagle and fly around and you can see yourself third person.

1144
00:54:18,377 --> 00:54:24,119
So it was really valuable for us to actually be able to show that progression on the character through the game.

1145
00:54:24,419 --> 00:54:26,980
Because you actually do see him even though it's a first person game.

1146
00:54:28,141 --> 00:54:34,243
Quick follow up, is there any system that prevents NPCs to get items from main characters?

1147
00:54:34,683 --> 00:54:37,684
Like some crowns, who are very specific?

1148
00:54:38,244 --> 00:54:40,025
No, it was really up to the artist.

1149
00:54:41,165 --> 00:54:45,089
to just choose if they wanted to share the meshes between the player or not.

1150
00:54:45,430 --> 00:54:47,912
They're on the same skeleton and the player...

1151
00:54:47,932 --> 00:54:50,575
I think the player was actually the same config...

1152
00:54:50,775 --> 00:54:51,796
It was the same config, right?

1153
00:54:51,836 --> 00:54:54,779
Yeah, so it was the same config as the NPCs.

1154
00:54:54,999 --> 00:54:57,342
So, yeah, they shared things.

1155
00:54:57,622 --> 00:54:59,764
In fact, a lot of the things that the player wears

1156
00:54:59,944 --> 00:55:02,126
are the same for NPC clothing.

1157
00:55:03,272 --> 00:55:05,832
Especially one of the main narrative characters at the start of the game,

1158
00:55:06,313 --> 00:55:08,953
you meet, he wears pretty much the same outfit as you,

1159
00:55:09,053 --> 00:55:11,434
you're a similar kind of warrior type character.

1160
00:55:11,454 --> 00:55:12,855
Thank you.

1161
00:55:13,235 --> 00:55:13,435
Thanks.

1162
00:55:14,815 --> 00:55:14,935
Hi.

1163
00:55:15,495 --> 00:55:16,255
Great talk, thank you.

1164
00:55:16,636 --> 00:55:17,356
Thanks.

1165
00:55:17,476 --> 00:55:19,917
When I saw Maya and Max interface,

1166
00:55:20,157 --> 00:55:25,878
I couldn't ignore that big simply gone icon.

1167
00:55:26,378 --> 00:55:28,479
Was it part of Wolfskin pipeline?

1168
00:55:29,040 --> 00:55:31,881
to make it all D or it's totally separate

1169
00:55:31,981 --> 00:55:33,862
and didn't really work with the skin.

1170
00:55:34,042 --> 00:55:36,022
Yeah, so yeah, we were using simply gone.

1171
00:55:36,403 --> 00:55:39,584
We didn't talk about it here, but actually at the booth later

1172
00:55:39,644 --> 00:55:41,284
we'll be demoing a video of that.

1173
00:55:42,605 --> 00:55:43,625
But it's there we go.

1174
00:55:43,645 --> 00:55:46,266
There's the time that will be at the Ubisoft booth.

1175
00:55:46,306 --> 00:55:47,347
So 2 p.m. this afternoon.

1176
00:55:47,367 --> 00:55:51,168
We'll show a few more videos and one of them is simply gone.

1177
00:55:51,228 --> 00:55:54,330
So the we chose to use simply gone in the pipeline

1178
00:55:54,370 --> 00:55:57,811
because before we used to have a LOD tool in Mac.

1179
00:55:58,335 --> 00:55:59,475
But of course, it's only in Max.

1180
00:55:59,956 --> 00:56:01,717
And then on Primal, I built one in Maya.

1181
00:56:02,637 --> 00:56:05,699
But that wasn't really good, because you

1182
00:56:05,739 --> 00:56:08,140
get different quality LODs with those two separate tools.

1183
00:56:08,781 --> 00:56:10,402
And Simplygon is just way better at doing it

1184
00:56:10,442 --> 00:56:11,603
than my tool was ever.

1185
00:56:12,303 --> 00:56:16,826
So we actually used the passenger and GameX data

1186
00:56:16,886 --> 00:56:20,468
to send the data from either Max or Maya off to Simplygon.

1187
00:56:21,293 --> 00:56:22,573
And we worked with our tools group

1188
00:56:22,633 --> 00:56:25,954
to have a little Python API for dealing with Simplygon.

1189
00:56:26,355 --> 00:56:28,815
And so we send the meshes out of either Max or Maya,

1190
00:56:28,855 --> 00:56:30,636
send it to Simplygon, and then it comes back again.

1191
00:56:30,676 --> 00:56:32,157
And we just get these little notifications

1192
00:56:32,217 --> 00:56:33,697
as they start coming into your Maya file.

1193
00:56:34,397 --> 00:56:35,018
So it was really good.

1194
00:56:35,138 --> 00:56:36,998
And as well, we actually embedded

1195
00:56:37,038 --> 00:56:39,379
a lot of the Simplygon settings into that node editor

1196
00:56:39,539 --> 00:56:41,240
that I showed at the start, the big thing.

1197
00:56:42,320 --> 00:56:44,161
So a lot of the stuff for Simplygon was set there,

1198
00:56:44,221 --> 00:56:45,601
and you could save it with the mesh.

1199
00:56:45,921 --> 00:56:48,842
So if a rigger came and did a skinning pass

1200
00:56:48,882 --> 00:56:49,763
on your character or something,

1201
00:56:49,923 --> 00:56:52,024
you could click regenerate for Simplygon,

1202
00:56:52,704 --> 00:56:56,665
and you would actually get the same LOD Simplygon settings

1203
00:56:57,666 --> 00:56:59,026
whenever anyone clicked that button.

1204
00:56:59,206 --> 00:56:59,787
So yeah.

1205
00:57:00,287 --> 00:57:00,647
Thank you.

1206
00:57:01,167 --> 00:57:01,567
No problem.

1207
00:57:02,848 --> 00:57:06,149
Hey there, I got two questions.

1208
00:57:06,669 --> 00:57:10,491
First off is how do you manage the rigging process?

1209
00:57:11,363 --> 00:57:15,046
you know, let's say character has a big wolf head here and

1210
00:57:15,947 --> 00:57:22,353
Goes to down low here. How do you auto rig it? Because you know, I saw that you got a previous

1211
00:57:23,073 --> 00:57:26,556
Within, you know all three packages. Yep, and you can just boom see it

1212
00:57:26,716 --> 00:57:31,481
Do you auto rig it at some point or so the characters are sharing skeletons?

1213
00:57:32,582 --> 00:57:36,165
But all the extra stuff that goes on top could be customized for the characters

1214
00:57:36,745 --> 00:57:43,429
In Primal, we would put these shared rig extra constraints

1215
00:57:43,469 --> 00:57:45,670
and bones and things into the core skeleton

1216
00:57:45,710 --> 00:57:47,691
so they could be reused across different characters.

1217
00:57:48,411 --> 00:57:50,852
So in the video, you might have noticed

1218
00:57:50,872 --> 00:57:52,973
there was some muscle system on the character.

1219
00:57:53,854 --> 00:57:57,215
So that was set up in Max, but we have a plug-in for that.

1220
00:57:57,255 --> 00:58:00,397
So the constraints are like a muscle constraint

1221
00:58:00,437 --> 00:58:03,238
or look at position orientation type constraints.

1222
00:58:04,212 --> 00:58:06,754
or pose correctives like a driven key type system.

1223
00:58:07,955 --> 00:58:10,818
So the riggers could actually rig this in Max.

1224
00:58:11,158 --> 00:58:14,160
And then there's plugins from Maya for MotionBuilder as well.

1225
00:58:14,180 --> 00:58:16,762
So the animators see the muscle deformation,

1226
00:58:16,782 --> 00:58:18,864
and they see the constraints in MotionBuilder.

1227
00:58:19,624 --> 00:58:21,786
And the exact same code runs in a game engine.

1228
00:58:22,126 --> 00:58:25,229
So all those extra bones, like there's the core 60,

1229
00:58:25,269 --> 00:58:28,271
and then there's probably another 100 or so

1230
00:58:28,771 --> 00:58:32,274
extra muscle bones and dynamic bones and things.

1231
00:58:33,315 --> 00:58:38,979
So all of those kind of get saved into this little XML description of what the constraint is and what bones it's affecting.

1232
00:58:39,199 --> 00:58:46,725
And then it gets sent to MotionBuilder for the animators, to the game engine for the runtime version of those constraints.

1233
00:58:46,785 --> 00:58:50,667
We'll show that a bit more at the launch at 2pm, so we'll have a bit video.

1234
00:58:50,848 --> 00:58:51,388
Oh yeah, yeah.

1235
00:58:52,229 --> 00:58:54,610
I think we have to free the room, so I think...

1236
00:58:54,790 --> 00:58:55,911
Oh yeah, yeah, I think we...

1237
00:58:56,211 --> 00:58:57,793
Thank you for coming.

1238
00:58:57,873 --> 00:58:58,353
Come up and...

