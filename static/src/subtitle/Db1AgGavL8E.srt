1
00:00:06,067 --> 00:00:12,428
Welcome everyone to our talk on vehicle physics in Skylanders Superchargers.

2
00:00:12,428 --> 00:00:17,209
My name is Jan Erik Steele. I was the lead vehicle engineer on the project.

3
00:00:17,209 --> 00:00:25,312
Primarily my responsibilities were to lead the team doing the implementation and design of our land, sea and air vehicles in the game.

4
00:00:25,574 --> 00:00:36,440
I'm Patrick Donnelly. I am also an engineer on the team. I was responsible more for interfacing with physics and math and solving a lot of problems that we had along the way of implementing our vehicles.

5
00:00:37,632 --> 00:00:47,399
So Skylanders is an action RPG where every single playable character has a physical toy associated with it.

6
00:00:47,399 --> 00:00:54,503
And the uniqueness and variety of these characters are really the driving force behind the franchise.

7
00:00:54,503 --> 00:01:06,571
What we had been asked to do was to introduce vehicles into the mix and make sure that these vehicles were just as quirky and playful as the characters that were going to be riding around in them.

8
00:01:08,119 --> 00:01:14,655
We also knew early on that there was going to be a huge variety of different gameplay here.

9
00:01:14,655 --> 00:01:16,059
We wanted to have...

10
00:01:16,690 --> 00:01:23,875
arena, vehicle combat, we wanted exploration, puzzle solving, and racing, and we were going

11
00:01:23,875 --> 00:01:28,258
to be doing all of that on land and in air and sea.

12
00:01:28,258 --> 00:01:34,302
So it was really important to our team that we have a really strong technical foundation

13
00:01:34,302 --> 00:01:40,446
so that it would enable our content creators to create this wide swath of gameplay experiences.

14
00:01:42,489 --> 00:01:48,716
Before we delve into it, I want to just give you guys sort of a sense of how this talk is structured.

15
00:01:48,716 --> 00:01:54,622
I'm going to run through some of the early prototypes and some of the missteps that we made early on.

16
00:01:54,622 --> 00:01:58,025
Those led us to define some guiding principles for the team,

17
00:01:58,025 --> 00:02:03,011
some pillars that really helped us make better decisions later on in the project.

18
00:02:03,451 --> 00:02:08,915
And then in the second half of the talk, Patrick's going to take you guys through more of a technical

19
00:02:08,915 --> 00:02:14,559
deep dive and really get into some of the details on the vehicle systems that we created.

20
00:02:14,559 --> 00:02:20,944
It's probably worth mentioning at this point that we use Havoc as our physics middleware.

21
00:02:20,944 --> 00:02:25,447
There's nothing in this presentation, nothing in our approach in general, that requires

22
00:02:25,447 --> 00:02:28,229
Havoc, but just so you guys know where we're coming from.

23
00:02:29,537 --> 00:02:32,877
So let's delve into the first prototype.

24
00:02:32,877 --> 00:02:35,098
We wanted to make a land vehicle.

25
00:02:35,098 --> 00:02:38,159
So at this point, we didn't actually

26
00:02:38,159 --> 00:02:40,719
have any vehicle physics tech in our engine.

27
00:02:40,719 --> 00:02:42,460
So we did a lot of research.

28
00:02:42,460 --> 00:02:44,520
We looked at Havok's vehicle physics.

29
00:02:44,520 --> 00:02:46,340
We looked at Bullet's vehicle physics

30
00:02:46,340 --> 00:02:48,781
and really tried to learn as much as we could.

31
00:02:48,781 --> 00:02:51,141
And these are great resources for you guys to check out

32
00:02:51,141 --> 00:02:54,742
and try to understand which aspects of this

33
00:02:54,742 --> 00:02:56,763
that you may or may not need in your game.

34
00:02:57,403 --> 00:03:03,709
What we decided to do was to implement at first in this prototype a Raycast-based spring suspension.

35
00:03:03,709 --> 00:03:11,336
This basically means we're going to take a spring, we're going to simulate it, attach one end to the chassis, the other to the wheel,

36
00:03:11,336 --> 00:03:15,219
and this spring is going to have a length and a stiffness,

37
00:03:15,219 --> 00:03:20,324
and then we use a velocity dampening parameter to make sure that the spring stabilizes nicely.

38
00:03:20,804 --> 00:03:24,748
Then we take a ray cast and basically cast along that spring.

39
00:03:24,748 --> 00:03:29,654
And when it contacts the ground, we compress the spring and this sort of creates a counterforce

40
00:03:29,654 --> 00:03:31,336
back up on the chassis.

41
00:03:31,336 --> 00:03:36,021
And this is what gives you that kind of nice physics-y feel where the vehicle's wheel

42
00:03:36,021 --> 00:03:38,544
is moving independently from the chassis.

43
00:03:40,497 --> 00:03:46,679
The way we apply our engine forces in this first prototype is we apply our braking and

44
00:03:46,679 --> 00:03:50,900
acceleration forces at the point where the wheel is contacting the ground.

45
00:03:50,900 --> 00:03:58,402
This is the same spot where we apply our side force that basically is simulating the side

46
00:03:58,402 --> 00:03:59,183
friction of the tire.

47
00:04:00,423 --> 00:04:05,865
We chose to have all three of these forces go to zero if any given wheel was off the ground.

48
00:04:05,865 --> 00:04:14,308
But we also used the grip coefficient such that if the suspension force was low,

49
00:04:14,308 --> 00:04:16,308
we would reduce these three forces.

50
00:04:18,629 --> 00:04:23,310
gave us the sense that if the vehicle was landing and not all the wheels were fully contacting the ground,

51
00:04:23,310 --> 00:04:27,731
that the vehicle might skid, or if you did a hard turn, the vehicle would skid out.

52
00:04:27,731 --> 00:04:31,292
And this drifting was something we really liked in the early prototype,

53
00:04:31,292 --> 00:04:34,633
and we really leaned into later on in development.

54
00:04:34,633 --> 00:04:39,274
When we wanted this vehicle to turn, all we do is we rotate the two front tires,

55
00:04:39,274 --> 00:04:44,755
and then the side friction pretty much takes care of redirecting the vehicle.

56
00:04:47,098 --> 00:04:49,140
So, we'll take a quick look.

57
00:04:49,140 --> 00:04:51,462
This is the first prototype that we made.

58
00:04:51,462 --> 00:04:52,823
And there were some things about this

59
00:04:52,823 --> 00:04:55,445
that we really liked right off the bat.

60
00:04:55,445 --> 00:04:57,667
We knew that our content creators were excited

61
00:04:57,667 --> 00:05:02,050
about sort of organic terrain and rolling hills.

62
00:05:02,050 --> 00:05:05,052
So, it was exciting to get this first prototype out.

63
00:05:05,052 --> 00:05:07,795
And it was just fun to bomb around and catch air.

64
00:05:07,795 --> 00:05:09,816
We loved sort of spinning around and doing tricks.

65
00:05:11,037 --> 00:05:17,342
One thing we hadn't really thought through and expected was that we noticed because we're applying all our forces at the wheels,

66
00:05:17,342 --> 00:05:22,767
the chassis will lurch when you brake or accelerate or it'll lean in the turns,

67
00:05:22,767 --> 00:05:27,551
and we got sort of this procedural animation for free. So that was exciting.

68
00:05:27,551 --> 00:05:33,836
However, there were plenty of problems in the early prototype.

69
00:05:35,175 --> 00:05:38,218
in particular when you crashed into anything.

70
00:05:38,218 --> 00:05:43,764
So you really, as these vehicles drive around really fast,

71
00:05:43,764 --> 00:05:46,246
even if you just skim the side of a wall,

72
00:05:46,246 --> 00:05:49,049
it really develops a lot of rotational forces.

73
00:05:50,490 --> 00:05:55,013
we spent quite a bit of time working with the suspension,

74
00:05:55,013 --> 00:05:57,235
doing things like reducing the center of mass,

75
00:05:57,235 --> 00:05:59,696
or not reducing it, but placing it lower

76
00:05:59,696 --> 00:06:02,638
to reduce the chance of the vehicle flipping on its side,

77
00:06:02,638 --> 00:06:03,779
or flipping on its head,

78
00:06:03,779 --> 00:06:07,482
or worse yet, just sort of getting flung out of the level altogether.

79
00:06:07,482 --> 00:06:11,985
So we knew that this was something that we were going to have to deal with.

80
00:06:14,703 --> 00:06:18,286
These things, I think to the engineers, seemed like manageable problems.

81
00:06:18,286 --> 00:06:23,531
You know, we can fix some of these bugs, we can make interacting with the suspension a

82
00:06:23,531 --> 00:06:26,694
little bit simpler because it was quite technically complex.

83
00:06:26,694 --> 00:06:33,360
But I think our designers had a totally different perspective from us, which was that they saw

84
00:06:33,360 --> 00:06:35,382
this first prototype and

85
00:06:36,263 --> 00:06:38,865
like I said, setting it up the suspension was complex.

86
00:06:38,865 --> 00:06:43,868
Actually, the first one that we did, Patrick set up most of the

87
00:06:43,868 --> 00:06:47,671
tunable values for the suspension to make sure it worked well.

88
00:06:47,671 --> 00:06:53,215
And, but I think to someone who didn't understand the physics equations

89
00:06:53,215 --> 00:06:55,076
that were under the hood,

90
00:06:55,076 --> 00:06:59,139
really a lot of the tuning values just seemed like a bunch of magic numbers.

91
00:06:59,719 --> 00:07:04,566
And worse yet, it was really easy to change anything in this setup

92
00:07:04,566 --> 00:07:08,752
and make that suspension unstable or implode.

93
00:07:08,752 --> 00:07:13,418
And I think it created an environment where the designers were nervous

94
00:07:13,418 --> 00:07:16,382
to change anything, because it was really easy to break.

95
00:07:17,764 --> 00:07:23,426
However, I think the most important concern they had, which is completely valid, is that

96
00:07:23,426 --> 00:07:28,107
they saw how much work it was for us to make one vehicle and get that working well, and

97
00:07:28,107 --> 00:07:32,489
they had to make nine more land vehicles.

98
00:07:32,489 --> 00:07:39,231
It was really important to us that all these vehicles feel unique and have their own personality,

99
00:07:39,231 --> 00:07:42,552
and at this point, the thought of making nine more...

100
00:07:43,612 --> 00:07:47,574
It was difficult just to make them functional, far less kind of pull out the personality.

101
00:07:47,574 --> 00:07:54,977
So that, we knew at this point that this exact approach maybe wasn't the right way to go.

102
00:07:54,977 --> 00:07:59,279
So we decided to kind of swing the pendulum the other way and try a totally different

103
00:07:59,279 --> 00:08:03,120
approach which we called character vehicles.

104
00:08:04,032 --> 00:08:07,894
we have in our pipeline we've created just hundreds of characters

105
00:08:07,894 --> 00:08:13,436
and Skylanders. Our tools pipeline and run time for characters is really powerful

106
00:08:13,436 --> 00:08:16,938
and our designers are incredibly capable

107
00:08:16,938 --> 00:08:20,620
and comfortable with that pipeline so we thought why don't we just augment that

108
00:08:20,620 --> 00:08:21,040
pipeline

109
00:08:21,040 --> 00:08:21,140
and

110
00:08:22,861 --> 00:08:25,984
try to make our vehicles inside that construct.

111
00:08:25,984 --> 00:08:31,088
So what that meant for us was that we were actually going to be moving away from physically

112
00:08:31,088 --> 00:08:36,473
accurate simulation and moving into sort of an animation state machine where we could

113
00:08:36,473 --> 00:08:39,156
layer on partial animations onto the vehicle.

114
00:08:39,696 --> 00:08:48,283
And really in our specific setup, this meant that we could no longer apply forces to our rigid bodies.

115
00:08:48,283 --> 00:08:53,026
We had to set a velocity every single frame on the vehicle.

116
00:08:53,026 --> 00:08:56,048
This totally makes sense to us for our on-foot characters,

117
00:08:56,048 --> 00:09:01,272
but I think for vehicles, if you want concepts like momentum and inertia...

118
00:09:01,833 --> 00:09:06,534
we really had to make sure that we were passing that velocity through frame by frame

119
00:09:06,534 --> 00:09:08,954
and state by state.

120
00:09:08,954 --> 00:09:14,355
I think the upside of using velocities is I really believe that people just have a better

121
00:09:14,355 --> 00:09:19,096
intuitive grasp of velocity than they do of forces and accelerations.

122
00:09:19,096 --> 00:09:25,898
And so it really let us sort of focus in on our interface and really try to simplify things

123
00:09:25,898 --> 00:09:28,678
to improve our design interface.

124
00:09:29,529 --> 00:09:33,717
However, I think when we actually fully built it,

125
00:09:33,717 --> 00:09:36,842
this approach also had a lot of problems.

126
00:09:38,580 --> 00:09:43,323
Some of the issues that you're seeing in the video here is that

127
00:09:43,323 --> 00:09:49,126
we can no longer apply forces to the suspension, so we're basically just doing a ray cast and matching it to the ground.

128
00:09:49,126 --> 00:09:56,349
This causes a lot of glitchiness if you have any kind of uneven surface, so our content creators had to smooth stuff out,

129
00:09:56,349 --> 00:10:00,471
and I had to beg them to take out any little crack and divot in the road, it was terrible.

130
00:10:00,471 --> 00:10:06,254
But we really see that...

131
00:10:06,935 --> 00:10:10,978
We always wanted to make that loop-de-loop.

132
00:10:10,978 --> 00:10:18,724
I think the thing that really caused me to believe that this approach was not going to

133
00:10:18,724 --> 00:10:25,169
be viable is that if you're setting the velocity on these vehicles every frame, the interaction

134
00:10:25,169 --> 00:10:27,951
with external forces when you're crashing into walls.

135
00:10:28,351 --> 00:10:31,892
vehicles are crashing into you or something else is smashing into you.

136
00:10:31,892 --> 00:10:37,814
What seemed simple at first actually kind of spiraled out of control on the engineering

137
00:10:37,814 --> 00:10:43,396
side trying to take in all these external influences and it started feeling like we

138
00:10:43,396 --> 00:10:47,778
were building our own kind of crappy physics engine on top of this.

139
00:10:47,778 --> 00:10:48,298
So we thought...

140
00:10:48,678 --> 00:10:58,689
Let's not do this. Let's return to the physically accurate simulation and let's leverage this amazing sort of physics middleware that we have and let's use that.

141
00:10:59,729 --> 00:11:05,054
However, there were definitely some lessons that we learned in the experiments with character vehicles

142
00:11:05,054 --> 00:11:08,297
that we wanted to bring in.

143
00:11:08,297 --> 00:11:14,463
And we felt like these might alleviate the concerns that we were having early on.

144
00:11:14,463 --> 00:11:17,265
And we thought if we could combine these approaches,

145
00:11:17,265 --> 00:11:20,168
maybe we can sort of get the best of both worlds

146
00:11:20,168 --> 00:11:23,211
and end up with a good system and a good approach.

147
00:11:26,310 --> 00:11:34,035
So at this point we tried to establish these pillars for the vehicle team so that we could

148
00:11:34,035 --> 00:11:38,717
make better decisions and make sure we were all on the same page and getting towards the

149
00:11:38,717 --> 00:11:39,598
same goal.

150
00:11:39,598 --> 00:11:44,981
So the first thing we decided was like let's simplify the physics simulation whenever possible.

151
00:11:44,981 --> 00:11:49,844
Make sure we're not taking along unnecessary complexity in physics all along through the

152
00:11:49,844 --> 00:11:50,084
project.

153
00:11:50,764 --> 00:11:59,191
And if we want complexity, ideally, let's make it arise from the interaction of simple systems.

154
00:11:59,191 --> 00:12:06,237
If we learn anything from our character vehicles, it is that we had to start thinking about our physics parameters,

155
00:12:06,237 --> 00:12:11,281
not just as the equations, but as to how our designers thought about these concepts,

156
00:12:11,281 --> 00:12:16,845
and make sure that we mirror back to them the things that they're saying about the vehicle motion.

157
00:12:17,827 --> 00:12:22,729
And finally, and this definitely was not obvious to us at first, was that we had to start keeping

158
00:12:22,729 --> 00:12:25,190
our physics parameters independent.

159
00:12:25,190 --> 00:12:31,332
This basically means that you're trying to minimize the amount of side effects as you

160
00:12:31,332 --> 00:12:35,414
change one value in the physics simulation, that it affects another area.

161
00:12:35,414 --> 00:12:39,515
And this really becomes a nightmare if you don't do this, to try to tune the vehicle

162
00:12:39,515 --> 00:12:40,736
and get it shipped out.

163
00:12:41,056 --> 00:12:44,459
So I'm going to go through a bunch of examples that hopefully will

164
00:12:44,459 --> 00:12:48,922
sort of exemplify how we use these pillars in practice

165
00:12:48,922 --> 00:12:51,865
and how we actually use it to make decisions.

166
00:12:51,865 --> 00:12:55,808
So, let's take a look at a simple example.

167
00:12:55,808 --> 00:12:59,891
We're just going to accelerate a vehicle up to top speed.

168
00:13:00,794 --> 00:13:04,136
Whenever we talk to our designers about this,

169
00:13:04,136 --> 00:13:08,520
they almost always ended up drawing up a curve like this on the whiteboard,

170
00:13:08,520 --> 00:13:10,922
and this was just sort of how they thought about it.

171
00:13:10,922 --> 00:13:13,685
They have an amount of time that it takes to reach the top speed,

172
00:13:13,685 --> 00:13:17,528
they have a top speed, and then they have this curve

173
00:13:17,528 --> 00:13:20,371
that tells us how the vehicle is going to reach the top speed.

174
00:13:20,371 --> 00:13:23,734
So let's look at an example of two different vehicles here.

175
00:13:23,734 --> 00:13:26,636
The top one is kind of a fast, zippy vehicle.

176
00:13:27,367 --> 00:13:31,851
and the bottom one is a lumbering vehicle.

177
00:13:31,851 --> 00:13:37,036
What might not be obvious here is that these vehicles have the same top speed,

178
00:13:37,036 --> 00:13:40,058
and they have the same amount of time to reach that top speed.

179
00:13:40,058 --> 00:13:45,303
The only thing that's different here is the shape of that curve.

180
00:13:47,339 --> 00:13:52,443
What we've come to realize in this case and in a lot of cases when it comes to the physics vehicles

181
00:13:52,443 --> 00:13:58,668
is that we had to expose these kind of curves directly out in our tools.

182
00:13:58,668 --> 00:14:01,470
So we've done this before in VFX and things like that,

183
00:14:01,470 --> 00:14:03,191
but now we're going to actually use it in gameplay.

184
00:14:03,191 --> 00:14:06,554
And this made a huge, huge difference for us.

185
00:14:07,735 --> 00:14:12,037
If you take an equation, just something simple like F equals MA,

186
00:14:12,037 --> 00:14:15,880
and give that as values or parameters out to your designer,

187
00:14:15,880 --> 00:14:19,022
they tend to only be able to set the force.

188
00:14:19,022 --> 00:14:21,144
That's the only thing they can change,

189
00:14:21,144 --> 00:14:25,546
and that's just a magic number, and they're like playing with it until it gives them something.

190
00:14:25,546 --> 00:14:30,069
But what you've actually done there is you've inherently said it's using constant acceleration,

191
00:14:30,069 --> 00:14:32,651
and you've denied them.

192
00:14:33,172 --> 00:14:38,794
the ability to change this and really that curve which you haven't given them then

193
00:14:38,794 --> 00:14:45,957
is the defining feature of that vehicle and it's really really important I think to use

194
00:14:45,957 --> 00:14:50,759
these kind of curves to help both simplify it but actually give access to a lot more of the

195
00:14:50,759 --> 00:14:51,819
personality of the vehicle.

196
00:14:55,031 --> 00:14:57,072
We also tried to simplify some things down.

197
00:14:57,072 --> 00:15:00,555
This kind of shows how we applied forces in the first prototype.

198
00:15:00,555 --> 00:15:01,916
We decided to simplify this a lot.

199
00:15:01,916 --> 00:15:06,899
We're just going to do engine forces straight through the center of the mass of the vehicle.

200
00:15:06,899 --> 00:15:11,102
This meant that we lost the procedural animation that I mentioned earlier,

201
00:15:11,102 --> 00:15:15,405
but what we gained was really a consistency in handling.

202
00:15:15,405 --> 00:15:18,187
And we didn't have to explain to players why,

203
00:15:18,187 --> 00:15:21,330
if one wheel was slightly off the ground, the turning felt different.

204
00:15:21,670 --> 00:15:27,881
or something like that. And really, now what we're going to do for turning is we're just going to apply a torque force

205
00:15:27,881 --> 00:15:30,225
and give ourselves a rotational acceleration and...

206
00:15:31,403 --> 00:15:33,425
and turn the vehicle that way.

207
00:15:33,425 --> 00:15:38,729
We also got rid of the side forces and we just used drag across all the vehicles.

208
00:15:38,729 --> 00:15:40,130
We used this model

209
00:15:40,130 --> 00:15:45,594
for the land vehicles. We use it for the air vehicles as well. The only difference

210
00:15:45,594 --> 00:15:50,678
was that we also do a rotation in the pitch in addition to the yaw.

211
00:15:50,678 --> 00:15:55,642
And honestly, from a physics perspective, that was really the major difference there.

212
00:15:57,173 --> 00:16:06,060
We also used this approach for the water vehicles, which simplified things when we tried to model buoyancy.

213
00:16:06,060 --> 00:16:16,088
So let's take a look at an early prototype that I made with Patrick and one of our rendering engineers, Patrick Hennessey, helped us out with this.

214
00:16:16,088 --> 00:16:20,792
And we wanted to get a feel for water vehicles. We knew we had these.

215
00:16:21,212 --> 00:16:26,018
sort of huge waves that we could do and we wanted to make sure the water vehicles could kind of

216
00:16:26,018 --> 00:16:32,785
ride up the waves, they could skid down them, they could dive through the waves.

217
00:16:32,785 --> 00:16:38,130
And so we had a ton of fun trying to set up this first prototype and honestly the approach that

218
00:16:38,130 --> 00:16:43,016
we took in this first week is very similar to what ended up shipping in the game.

219
00:16:43,975 --> 00:16:46,817
So let's take a quick look at the buoyancy modeling.

220
00:16:46,817 --> 00:16:51,622
It's a physically complicated concept.

221
00:16:51,622 --> 00:16:54,364
You can really model this in as complex a manner

222
00:16:54,364 --> 00:16:56,666
as you would like.

223
00:16:56,666 --> 00:17:00,690
What you're dealing with here is, in our case, a vehicle

224
00:17:00,690 --> 00:17:03,072
where partly the volume of that vehicle

225
00:17:03,072 --> 00:17:04,253
is submerged in the water.

226
00:17:04,253 --> 00:17:08,256
And the displaced water is going to apply a force

227
00:17:08,256 --> 00:17:10,418
across the surface of the volume.

228
00:17:12,346 --> 00:17:16,388
With our newfound pillars of simplification, we said, well, let's just make it a box.

229
00:17:16,388 --> 00:17:23,771
This is going to really help us calculate a volume and figure out how much of that volume

230
00:17:23,771 --> 00:17:28,052
is submerged in a much, much simpler manner.

231
00:17:28,052 --> 00:17:33,395
Also, we decided to apply a single buoyant force through the center of mass.

232
00:17:33,395 --> 00:17:38,577
This meant that a buoyant force actually isn't going to...

233
00:17:39,857 --> 00:17:43,040
apply any rotation to the water vehicle.

234
00:17:43,040 --> 00:17:48,464
It's really just going to sort of bob up and down in the water.

235
00:17:48,464 --> 00:17:53,068
We did apply the buoyant force along the water surface normal,

236
00:17:53,068 --> 00:17:57,692
and that helped us be able to deal with the waves that we were seeing.

237
00:17:58,252 --> 00:18:05,599
Also we had an angular spring on the vehicle which would turn and sort of rotate the vehicle

238
00:18:05,599 --> 00:18:10,344
towards the water normal so it would try to match up to that kind of gradually.

239
00:18:10,344 --> 00:18:19,473
This simple approach worked better than we expected. I really thought eventually we're

240
00:18:19,473 --> 00:18:21,555
going to add more points of buoyancy and it's going to like...

241
00:18:22,054 --> 00:18:25,941
be more complicated, but it worked well for the vehicle.

242
00:18:25,941 --> 00:18:32,274
You have to be able to handle the vehicle and it has to be controllable, so this made

243
00:18:32,274 --> 00:18:33,577
it a lot simpler, I think, for us.

244
00:18:34,679 --> 00:18:39,685
Also, because we chose such a simple model, it was really cheap.

245
00:18:39,685 --> 00:18:45,072
And we discovered, hey, let's just put this buoyancy thing on other objects in the world,

246
00:18:45,072 --> 00:18:50,579
and all of a sudden we have all this flotsam and jetsam that the vehicle can interact with.

247
00:18:50,579 --> 00:18:53,763
And we ended up really liking this approach.

248
00:18:56,923 --> 00:19:02,545
Another important concept in buoyancy is the resting height of the vehicle.

249
00:19:02,545 --> 00:19:06,546
I think for our designers, this was really something they identified for us that was

250
00:19:06,546 --> 00:19:07,727
a defining feature of the vehicle.

251
00:19:07,727 --> 00:19:13,809
What it means is how deep this vehicle is going to sink in the water when it's at rest.

252
00:19:13,809 --> 00:19:15,789
So a speedboat might only sink a little bit.

253
00:19:15,789 --> 00:19:20,191
If you have a sort of submarine type, it's going to sink lower.

254
00:19:21,031 --> 00:19:24,917
If you look at the equations of what governs the resting height of a vehicle,

255
00:19:24,917 --> 00:19:27,981
there's a lot that goes into it and there's a lot of things that can make that

256
00:19:27,981 --> 00:19:29,483
resting height change.

257
00:19:29,483 --> 00:19:33,868
However, what we wanted was to be able to set the resting height and guarantee

258
00:19:33,868 --> 00:19:37,173
that that's how the vehicle was going to behave.

259
00:19:38,773 --> 00:19:44,737
We ended up doing this by basically solving for the resting height and just putting in

260
00:19:44,737 --> 00:19:52,782
a value from 0 to 1, and then at runtime, we would dynamically calculate the other values

261
00:19:52,782 --> 00:19:56,424
to ensure that we actually got the correct resting height.

262
00:19:56,424 --> 00:19:59,646
In our case, we ended up calculating the volume.

263
00:20:00,683 --> 00:20:01,304
of the vehicle.

264
00:20:01,304 --> 00:20:09,576
And what this did for us was that if someone defines the resting height of the vehicle,

265
00:20:09,576 --> 00:20:14,562
if someone comes along two months later and decides that because of collisions they want

266
00:20:14,562 --> 00:20:16,125
to give this vehicle more mass,

267
00:20:16,705 --> 00:20:19,607
all of a sudden the vehicle sinks lower than the water.

268
00:20:19,607 --> 00:20:23,369
That seems cool, like a physics concept,

269
00:20:23,369 --> 00:20:26,211
but it sucks for the people who have tuned it

270
00:20:26,211 --> 00:20:28,312
and want everything to be right.

271
00:20:28,312 --> 00:20:31,474
So it was really important to us to look at all these equations

272
00:20:31,474 --> 00:20:34,415
as we implemented them and really evaluate

273
00:20:34,415 --> 00:20:37,337
every single parameter and understand

274
00:20:37,337 --> 00:20:39,698
if they were independent or if they were dependent,

275
00:20:39,698 --> 00:20:41,479
if we wanted them to be dependent.

276
00:20:41,960 --> 00:20:47,723
And more often than not, we really try to separate these values out and calculate them as needed.

277
00:20:48,995 --> 00:20:55,180
The last concept that I want to run through is some of the stuff we did with our animation

278
00:20:55,180 --> 00:20:56,682
system on top of the vehicle.

279
00:20:56,682 --> 00:21:03,788
The first thing was really just to take the physical movement of the vehicle and maybe

280
00:21:03,788 --> 00:21:08,813
the controller input and try to place the vehicle in a state, like is it just accelerating

281
00:21:08,813 --> 00:21:14,078
from rest, is it turning, and allowing our animators to just animate on top.

282
00:21:14,498 --> 00:21:17,099
of the physics simulation.

283
00:21:17,099 --> 00:21:19,740
And this, I think, more than anything,

284
00:21:19,740 --> 00:21:23,861
allowed them to bring out a ton of personality

285
00:21:23,861 --> 00:21:26,922
in each vehicle without actually changing

286
00:21:26,922 --> 00:21:28,983
a lot of the things about how we did

287
00:21:28,983 --> 00:21:30,404
physics suspension under the hood.

288
00:21:30,404 --> 00:21:34,925
And that both gives you a consistency in handling,

289
00:21:34,925 --> 00:21:38,106
but now you can really draw out the vehicle

290
00:21:38,106 --> 00:21:40,127
and figure out what this vehicle is about.

291
00:21:41,654 --> 00:21:46,698
Another thing we did here was that we had the animators actually animate the full

292
00:21:46,698 --> 00:21:48,960
extents of the suspension.

293
00:21:48,960 --> 00:21:51,843
So how high up can the wheels go and how low does it go to the gown.

294
00:21:53,440 --> 00:21:58,525
This meant that ideally the suspension will never look bad.

295
00:21:58,525 --> 00:22:00,848
It'll never clip into the vehicle.

296
00:22:00,848 --> 00:22:05,952
But also, it allowed us to actually not just have the wheel

297
00:22:05,952 --> 00:22:07,794
maybe move simply up and down.

298
00:22:07,794 --> 00:22:09,716
They could do a sort of a rotational suspension.

299
00:22:09,716 --> 00:22:12,259
They can do whatever looks good.

300
00:22:12,259 --> 00:22:14,481
While under the hood, the suspension

301
00:22:14,481 --> 00:22:16,783
is basically just interpolating.

302
00:22:17,564 --> 00:22:18,924
between these values.

303
00:22:18,924 --> 00:22:23,286
And I think this really let our engineers and designers

304
00:22:23,286 --> 00:22:25,567
on one hand focus on what felt fun

305
00:22:25,567 --> 00:22:27,548
and what was good with the vehicle

306
00:22:27,548 --> 00:22:32,070
and then allowing a lot of the other artists and animators

307
00:22:32,070 --> 00:22:34,571
to do their job and bring out the personality in the vehicle

308
00:22:34,571 --> 00:22:38,093
without the two teams stepping on each other's toes too much.

309
00:22:39,738 --> 00:22:47,221
So hopefully these examples kind of help clarify some of the pillars and how we went through them.

310
00:22:47,221 --> 00:22:53,503
At this point I'm going to hand it off to Patrick and he's going to take you guys through some of the details of the physics systems.

311
00:22:54,106 --> 00:23:00,191
All right, so before we get into this, I want to explain that when we say that we are simplifying

312
00:23:00,191 --> 00:23:04,834
these systems, that process in and of itself is not necessarily simple.

313
00:23:04,834 --> 00:23:09,078
We actually found more often than not it was a complex process for us to figure out ways

314
00:23:09,078 --> 00:23:12,601
to simplify, where to simplify, and to implement these systems.

315
00:23:12,601 --> 00:23:16,384
But we were okay with that because that meant that we as the engineers were taking on the

316
00:23:16,384 --> 00:23:18,525
burden of solving complexity.

317
00:23:19,110 --> 00:23:25,253
and allowing our content creators to have simple and intuitive systems that allow them to work on the fun.

318
00:23:25,253 --> 00:23:31,196
So we felt that this was a great compromise and a great organization of complexity.

319
00:23:31,196 --> 00:23:34,878
So without any further ado, let's dive right in.

320
00:23:34,878 --> 00:23:38,079
So first I want to talk about the velocity curves that Jan had mentioned before.

321
00:23:38,935 --> 00:23:42,618
On the x-axis we have the time from rest until max speed

322
00:23:42,618 --> 00:23:44,139
that is defined by the designer.

323
00:23:44,139 --> 00:23:46,421
And on the y-axis we have our speed

324
00:23:46,421 --> 00:23:47,622
from rest until max speed.

325
00:23:47,622 --> 00:23:50,304
Now, normally when you'd evaluate a curve like this

326
00:23:50,304 --> 00:23:52,765
you'd have a value on the x-axis

327
00:23:52,765 --> 00:23:54,967
and you would just pump it into a function

328
00:23:54,967 --> 00:23:56,048
and you'd get out a y value.

329
00:23:56,539 --> 00:24:00,622
However, for our vehicles, all we really knew was our speed.

330
00:24:00,622 --> 00:24:02,944
So we needed to get a time value out of it.

331
00:24:02,944 --> 00:24:05,486
So we did a process we called reverse evaluation.

332
00:24:05,486 --> 00:24:07,968
So, given a speed value,

333
00:24:07,968 --> 00:24:12,571
what we would do is essentially reverse evaluate to figure out our current time value.

334
00:24:12,571 --> 00:24:16,594
The process that we used for this was a simple binary search of the curve.

335
00:24:16,594 --> 00:24:19,436
We'd solve in the forward direction in various points

336
00:24:19,436 --> 00:24:23,199
and hone in on the time value that gives us the speed value that we were looking for.

337
00:24:23,780 --> 00:24:28,021
There's other ways of doing this. You can do a lookup table or if you have an implicit function

338
00:24:28,021 --> 00:24:33,662
You might be able to transpose it. We didn't have any performance problems. So we were just went with a simple binary search

339
00:24:33,662 --> 00:24:35,683
So once we have a time value

340
00:24:35,683 --> 00:24:41,964
What we can do now is step our time along the curve with our frame Delta time

341
00:24:41,964 --> 00:24:43,985
And then get out a new speed value

342
00:24:44,839 --> 00:24:48,162
then all we're doing is we take the difference between the two of these

343
00:24:48,162 --> 00:24:48,983
which is a delta velocity

344
00:24:48,983 --> 00:24:50,424
uh... which is an acceleration

345
00:24:50,424 --> 00:24:54,168
and we can multiply that by mass and apply it as a force and that's how we will

346
00:24:54,168 --> 00:24:55,389
move along this curve

347
00:24:56,813 --> 00:24:58,715
Now there's two very important points here.

348
00:24:58,715 --> 00:25:00,556
First of all, we are always applying forces.

349
00:25:00,556 --> 00:25:03,719
We never want to set velocity on the body.

350
00:25:03,719 --> 00:25:06,741
When we set the velocity, we can stomp on other systems

351
00:25:06,741 --> 00:25:08,602
and we have to maintain a lot of state,

352
00:25:08,602 --> 00:25:10,904
but if we're just adding forces,

353
00:25:10,904 --> 00:25:13,686
that lets us layer multiple systems together

354
00:25:13,686 --> 00:25:16,008
and get much more complex behavior from them,

355
00:25:16,008 --> 00:25:17,089
which is one of our pillars.

356
00:25:17,089 --> 00:25:18,410
Secondly...

357
00:25:19,389 --> 00:25:21,971
We never want to assume what our time is.

358
00:25:21,971 --> 00:25:23,492
We want to recalculate it every frame.

359
00:25:23,492 --> 00:25:25,734
This lets outside influences impact us.

360
00:25:25,734 --> 00:25:28,176
If we just assumed that we hit our target

361
00:25:28,176 --> 00:25:28,977
and ran into a wall,

362
00:25:28,977 --> 00:25:32,620
and then used that previous frame's value of time,

363
00:25:32,620 --> 00:25:33,580
the next frame,

364
00:25:33,580 --> 00:25:35,762
we would be going way faster than we should be.

365
00:25:35,762 --> 00:25:38,504
So, we recalculated every frame,

366
00:25:38,504 --> 00:25:42,748
and this lets the outside influences slow us down,

367
00:25:42,748 --> 00:25:45,070
or stop us, and lets things like hills,

368
00:25:45,070 --> 00:25:46,170
if we're going up a hill,

369
00:25:46,170 --> 00:25:47,511
we may not hit our target every frame.

370
00:25:48,515 --> 00:25:51,278
But we're going to generally follow the general fingerprint

371
00:25:51,278 --> 00:25:52,119
that design made.

372
00:25:52,119 --> 00:25:53,541
Even though it's going to take us a little longer

373
00:25:53,541 --> 00:25:56,023
to get to our top speed, we still get there in a good way.

374
00:25:56,023 --> 00:25:58,986
And we found that behavior was really good

375
00:25:58,986 --> 00:26:02,730
and really allowed the outside world to impact our vehicles.

376
00:26:02,730 --> 00:26:04,893
Moving on, I want to talk about our suspension

377
00:26:04,893 --> 00:26:07,255
because it's important.

378
00:26:07,255 --> 00:26:07,295
So,

379
00:26:08,333 --> 00:26:09,993
Oh, nope, one more thing.

380
00:26:09,993 --> 00:26:13,214
So our vehicles don't necessarily always travel

381
00:26:13,214 --> 00:26:14,454
from rest until max speed.

382
00:26:14,454 --> 00:26:16,635
They can actually be going backwards

383
00:26:16,635 --> 00:26:18,375
in relation to the direction they're trying to accelerate.

384
00:26:18,375 --> 00:26:20,056
So our curves actually look more like this,

385
00:26:20,056 --> 00:26:23,196
where the y-axis went from negative max speed

386
00:26:23,196 --> 00:26:24,717
to positive max speed.

387
00:26:24,717 --> 00:26:28,197
Zero was in the middle, and now our time on the x-axis

388
00:26:28,197 --> 00:26:30,418
no longer corresponds to what design has said

389
00:26:30,418 --> 00:26:32,338
is rest to max speed.

390
00:26:32,338 --> 00:26:34,299
But this is really easy to solve for.

391
00:26:34,299 --> 00:26:37,980
All we do is one time at the beginning of the load up,

392
00:26:37,980 --> 00:26:38,180
we can.

393
00:26:38,700 --> 00:26:41,262
look at and figure out where our rest is

394
00:26:41,262 --> 00:26:42,803
and where our max speed is

395
00:26:42,803 --> 00:26:44,525
by doing a one time reverse evaluation

396
00:26:44,525 --> 00:26:47,147
and then get this range back out.

397
00:26:47,147 --> 00:26:49,188
And this range corresponds to what design is input

398
00:26:49,188 --> 00:26:50,470
from rest to max speed.

399
00:26:50,470 --> 00:26:53,012
And we just scale our DTs by this amount,

400
00:26:53,012 --> 00:26:54,373
fit it to this range,

401
00:26:54,373 --> 00:26:57,215
and then we have a consistent acceleration across the curve,

402
00:26:57,215 --> 00:26:57,755
just the same.

403
00:26:57,755 --> 00:27:00,558
And they can put that zero point anywhere on this curve

404
00:27:00,558 --> 00:27:01,498
and it will still work.

405
00:27:01,498 --> 00:27:03,740
All right, now going on to our suspension.

406
00:27:05,182 --> 00:27:06,123
I hope.

407
00:27:06,123 --> 00:27:08,086
Alrighty, so we have a bunch of,

408
00:27:08,086 --> 00:27:10,129
variety of visuals up here,

409
00:27:10,129 --> 00:27:13,433
and we knew that we're gonna have these fantastical vehicles.

410
00:27:13,433 --> 00:27:15,156
As you can see in the bottom left here,

411
00:27:15,156 --> 00:27:18,461
we have Shark Tank, which has these tire treads,

412
00:27:18,461 --> 00:27:20,684
and actually can like dive under the earth.

413
00:27:21,767 --> 00:27:26,129
We have at the top the Shield Striker vehicle with these cog wheels, and actually it's six of them.

414
00:27:26,129 --> 00:27:33,093
And then in the bottom right we have Burn Cycle with a giant molten wheel and then our giant rocket booster in the back.

415
00:27:33,093 --> 00:27:37,695
In all of these situations, despite the variety of visuals, we always did four-wheel suspension.

416
00:27:38,535 --> 00:27:43,477
We found that four wheels provided the most stability and consistency in handling, and that was important to us.

417
00:27:43,477 --> 00:27:51,580
Now, we allowed some personality to come through by design could shift where the suspension was, how tall it was, how stiff it was,

418
00:27:51,580 --> 00:27:57,102
but we're maintaining this four-wheel suspension as it just fit our level mechanic and metrics best.

419
00:27:57,382 --> 00:28:01,905
Now, you might also notice that I'm drawing cylinders here.

420
00:28:01,905 --> 00:28:06,047
For our player vehicles, we did a shape cast instead of a ray cast.

421
00:28:06,047 --> 00:28:10,009
We found that this provided more information about the ground and allowed us to avoid the

422
00:28:10,009 --> 00:28:15,092
vehicles overreacting to a small divot in the ground or a hole in the collision.

423
00:28:15,092 --> 00:28:19,735
For our NPC or AI vehicles, we would just use a ray cast as before.

424
00:28:19,735 --> 00:28:24,258
The visual fidelity was not nearly as important and performance was, but for our player vehicles,

425
00:28:24,258 --> 00:28:25,218
it was shape casts.

426
00:28:25,818 --> 00:28:27,819
uh... but there's another problem with it

427
00:28:27,819 --> 00:28:31,440
if we got collision to hit us in the middle of our vehicle

428
00:28:31,440 --> 00:28:35,702
uh... the forces of the suspension would push outward until it eventually exploded

429
00:28:35,702 --> 00:28:36,843
and it would be very unstable

430
00:28:36,843 --> 00:28:40,624
it could also confuse our suspension pretty easily and get into the bouncing

431
00:28:40,624 --> 00:28:41,945
state like this

432
00:28:41,945 --> 00:28:45,106
or clip into the middle of our vehicle like that if you had a tall enough piece

433
00:28:45,106 --> 00:28:45,907
of collision in the middle

434
00:28:46,260 --> 00:28:48,802
your wheels would never touch the ground and you could actually get stuck.

435
00:28:48,802 --> 00:28:50,423
So this was a problem that we needed to solve.

436
00:28:50,423 --> 00:28:54,447
And the way we did that is we essentially made our vehicles a lot more like a Flintstone vehicle.

437
00:28:54,447 --> 00:28:56,689
We connected these cylinders in the middle

438
00:28:56,689 --> 00:28:59,812
so that if you had at least half of the vehicle on the surface,

439
00:28:59,812 --> 00:29:01,673
the other wheel would pick it up and you'd be stable.

440
00:29:01,673 --> 00:29:04,676
This fixed our edge cases that we were seeing before.

441
00:29:04,676 --> 00:29:07,198
Though this doesn't look physically accurate,

442
00:29:07,198 --> 00:29:08,219
it's much better that it's stable.

443
00:29:09,020 --> 00:29:11,783
And it still looked good in situations where you had small bumps on either side.

444
00:29:11,783 --> 00:29:13,865
The wheels were properly reacting.

445
00:29:13,865 --> 00:29:19,891
So this was a compromise that we felt the most important thing is stability and control.

446
00:29:19,891 --> 00:29:21,112
And we can live with that.

447
00:29:21,112 --> 00:29:24,656
And it also meant that if you were hitting a ramp,

448
00:29:24,656 --> 00:29:25,777
you just had to get close enough.

449
00:29:25,777 --> 00:29:27,058
You didn't have to hit it perfectly.

450
00:29:27,058 --> 00:29:32,584
So, moving on, I want to talk now about how we handle springs.

451
00:29:33,731 --> 00:29:39,114
So, when we were doing our initial prototypes,

452
00:29:39,114 --> 00:29:43,116
we did a spring damper system, as Jan mentioned,

453
00:29:43,116 --> 00:29:46,297
and we did what any good, lazy engineer would do

454
00:29:46,297 --> 00:29:48,258
and just did a single Euler integration.

455
00:29:48,258 --> 00:29:50,780
And Euler integrations are great

456
00:29:50,780 --> 00:29:52,580
unless you have a variable frame rate.

457
00:29:52,580 --> 00:29:53,561
And early on in development,

458
00:29:53,561 --> 00:29:54,701
we did not have optimized builds.

459
00:29:54,701 --> 00:29:57,183
And we were often working in our debug builds

460
00:29:57,183 --> 00:29:59,304
in order to implement new features.

461
00:29:59,304 --> 00:30:00,764
It looks something like this.

462
00:30:01,806 --> 00:30:04,367
So that's our vehicle running at 18 frames per second

463
00:30:04,367 --> 00:30:06,387
with a plus or minus variance

464
00:30:06,387 --> 00:30:07,888
of about 10 milliseconds per frame.

465
00:30:07,888 --> 00:30:10,949
It is undriveable, absolutely.

466
00:30:10,949 --> 00:30:12,089
And this was a big problem

467
00:30:12,089 --> 00:30:15,910
because we needed to debug our thing, our vehicles,

468
00:30:15,910 --> 00:30:17,631
and we couldn't, because we couldn't even drive them.

469
00:30:17,631 --> 00:30:18,891
We wanted this, where,

470
00:30:18,891 --> 00:30:23,793
because this is the frame rate, it's nice and smooth.

471
00:30:23,793 --> 00:30:26,193
So we needed a way of fixing this fast

472
00:30:26,193 --> 00:30:28,434
so that we can develop and show executives,

473
00:30:28,434 --> 00:30:30,175
hey, look at how awesome our vehicles are.

474
00:30:30,897 --> 00:30:34,539
So we took a short-term bandage approach.

475
00:30:34,539 --> 00:30:38,480
So if we before were just doing four steps for four frames of oil integration,

476
00:30:38,480 --> 00:30:43,983
instead what we would do is a bunch of little steps in a fixed time step,

477
00:30:43,983 --> 00:30:48,444
which we picked to be about 200 hertz or 5 milliseconds for our player vehicles.

478
00:30:48,444 --> 00:30:51,766
And we'd do oiler integrations across that.

479
00:30:52,386 --> 00:30:57,188
This fixed a lot of the problems we were having with our Euler integrations and the variable time step.

480
00:30:57,188 --> 00:31:01,470
And any leftovers from the first frame would kind of carry on to the next frame, and the next frame, and the next frame.

481
00:31:01,470 --> 00:31:07,452
And it would always be stepped at this consistent rate, so we didn't have that explosion of force when you're using Euler integration.

482
00:31:07,452 --> 00:31:11,274
There's other approaches you can take, of better integrators for sure,

483
00:31:11,274 --> 00:31:14,155
but there's a reason that we like this and I'm going to get into it in a little bit.

484
00:31:14,155 --> 00:31:14,575
Before I do...

485
00:31:15,053 --> 00:31:17,858
I want to show you the end result, which is this.

486
00:31:17,858 --> 00:31:21,665
So you can kinda see the wheels are jittering just a bit,

487
00:31:21,665 --> 00:31:24,430
but this is still the exact same frame rate

488
00:31:24,430 --> 00:31:26,814
we had on the left, the 18th frame per second.

489
00:31:27,675 --> 00:31:31,378
But we were never gonna see this in a shipping title,

490
00:31:31,378 --> 00:31:34,720
and if we did, we were in deep, deep, deep trouble.

491
00:31:34,720 --> 00:31:37,681
So this was more than enough for us to develop with,

492
00:31:37,681 --> 00:31:39,903
and we actually shipped with it,

493
00:31:39,903 --> 00:31:42,404
because we weren't ever gonna see the situation we have here,

494
00:31:42,404 --> 00:31:43,965
and it handled our spikes

495
00:31:43,965 --> 00:31:45,786
that we might have occasionally just fine.

496
00:31:46,927 --> 00:31:48,548
So we were very happy with that.

497
00:31:48,548 --> 00:31:52,051
I want to put up a little bit of pseudocode quickly

498
00:31:52,051 --> 00:31:54,633
to show how we did our stepping.

499
00:31:54,633 --> 00:31:56,655
If you can take a picture of it

500
00:31:56,655 --> 00:31:59,697
or you can come back in the vault and look at it later.

501
00:31:59,697 --> 00:32:02,059
I don't expect you to understand this all right now.

502
00:32:02,059 --> 00:32:04,320
But I do want to call out a few lines of code

503
00:32:04,320 --> 00:32:05,401
and explain what it's doing

504
00:32:05,401 --> 00:32:06,662
so you can kind of get an idea

505
00:32:06,662 --> 00:32:10,245
and maybe avoid some pitfalls that we had early

506
00:32:10,245 --> 00:32:11,586
on in implementing this.

507
00:32:11,586 --> 00:32:12,927
First of all, what we're doing on this line

508
00:32:13,798 --> 00:32:17,981
is where you are calculating the velocity of the suspension at the point that it connects

509
00:32:17,981 --> 00:32:24,005
with the chassis and also incorporating gravity that might accumulate over time so that we're

510
00:32:24,005 --> 00:32:27,867
basically simulating in the later sub-steps that it's accelerating.

511
00:32:28,732 --> 00:32:36,434
We will then project that in the direction of the suspension in order to see how fast the chassis is moving at that point in the direction of the suspension.

512
00:32:36,434 --> 00:32:39,795
And we're going to use that projected velocity in two places.

513
00:32:39,795 --> 00:32:44,576
First of all, we're going to use an inner spring damper, since it's a velocity-based spring damper, that's our velocity.

514
00:32:44,576 --> 00:32:48,677
And then we're going to keep track of how far we've traveled based on the...

515
00:32:49,760 --> 00:32:54,904
this each sub-step so that we are compressing or expanding our suspension based on how it's

516
00:32:54,904 --> 00:32:59,267
moving in the later sub-steps. So if our front wheels are compressing and our back wheels

517
00:32:59,267 --> 00:33:03,710
aren't, we're going to get some torque that's going to make our back wheels start to accelerate

518
00:33:03,710 --> 00:33:06,872
and then they're going to compress more and it's going to balance itself out that much

519
00:33:06,872 --> 00:33:10,775
faster potentially within a frame. So this is a really awesome thing and it has one other

520
00:33:10,775 --> 00:33:13,557
advantage that we really liked about our sub-stepping.

521
00:33:14,178 --> 00:33:16,923
and that's in landing. So if you imagine...

522
00:33:16,923 --> 00:33:20,389
Well, first of all, our vehicles are traveling in the hundreds of miles per hour range.

523
00:33:20,930 --> 00:33:23,632
in Skylands and when they're falling, they're falling even faster.

524
00:33:23,632 --> 00:33:26,294
If you imagine that we set up our suspension as such

525
00:33:26,294 --> 00:33:29,717
with the orange arrow representing the distance of the cast

526
00:33:29,717 --> 00:33:31,839
it's very possible that within a frame

527
00:33:31,839 --> 00:33:35,322
we don't see the ground but we're going to travel far enough that we're going to go

528
00:33:35,322 --> 00:33:37,904
through it and then our chassis will slam into it

529
00:33:37,904 --> 00:33:42,167
and we're going to be stopped and instead of having a smooth transition between

530
00:33:42,167 --> 00:33:43,208
falling and landing

531
00:33:43,208 --> 00:33:43,849
we're just going to slam in.

532
00:33:43,849 --> 00:33:44,910
This is a problem.

533
00:33:44,910 --> 00:33:47,832
But using the high frequency sub-stepping we can fix it.

534
00:33:48,220 --> 00:33:54,302
If we take the amount that we are going to move within the frame and extend our raycast by that much,

535
00:33:54,302 --> 00:34:01,124
we can then step it in each sub-step until we eventually get our suspension to start to intersect with the ground.

536
00:34:01,124 --> 00:34:03,044
And we will start to apply forces.

537
00:34:03,044 --> 00:34:06,565
It'll slow us down and maybe compress a little bit more,

538
00:34:06,565 --> 00:34:09,887
but the forces get stronger, and then we can actually counterbalance it.

539
00:34:13,452 --> 00:34:18,295
So, now instead of slamming into the ground, we have successfully landed, and our suspension

540
00:34:18,295 --> 00:34:23,137
has successfully kept us away from it, and we're free to drive off and cause all sorts

541
00:34:23,137 --> 00:34:27,039
of other types of mayhem, like crashing into things, which is the next thing I'm going

542
00:34:27,039 --> 00:34:28,660
to talk about.

543
00:34:28,660 --> 00:34:30,221
How we handle collisions.

544
00:34:30,221 --> 00:34:31,922
So we are making a game for kids.

545
00:34:31,922 --> 00:34:34,003
Collisions are going to happen a lot.

546
00:34:34,003 --> 00:34:37,525
We needed to make sure that these collisions are fun.

547
00:34:37,525 --> 00:34:42,107
But we didn't necessarily know what fun was in this context.

548
00:34:42,991 --> 00:34:48,781
we knew from our early prototypes that driving into a wall and then spinning out of control

549
00:34:48,781 --> 00:34:50,904
that's not fun, that's frustrating

550
00:34:51,580 --> 00:34:53,081
We needed something better.

551
00:34:53,081 --> 00:34:56,984
But we also knew that the thing that makes you feel like,

552
00:34:56,984 --> 00:35:00,005
hey, I'm driving a vehicle, is that the way

553
00:35:00,005 --> 00:35:02,287
that the vehicle responds when it collides with things,

554
00:35:02,287 --> 00:35:03,968
and the way those things that you collide with

555
00:35:03,968 --> 00:35:04,868
respond to you.

556
00:35:04,868 --> 00:35:07,250
That gives you that kind of visceral, physical feeling

557
00:35:07,250 --> 00:35:09,291
of I'm driving this massive object through the world

558
00:35:09,291 --> 00:35:11,372
and doing all sorts of damage and mayhem.

559
00:35:11,372 --> 00:35:15,615
So, we needed to figure out what parts of that response

560
00:35:15,615 --> 00:35:18,136
were interesting and when we wanted to apply them.

561
00:35:19,518 --> 00:35:22,199
and we needed a prototype and iterate on it so

562
00:35:22,199 --> 00:35:27,722
the idea was to essentially invest a significant technical effort into making

563
00:35:27,722 --> 00:35:31,604
a system that put these tools into the hands of the team as a whole

564
00:35:31,604 --> 00:35:33,725
both content creators and engineers

565
00:35:33,725 --> 00:35:37,307
so that they could figure out where the fun was for the relative systems and

566
00:35:37,307 --> 00:35:38,047
then implement that fun

567
00:35:38,047 --> 00:35:43,290
and then we would have a great collision response for our vehicles

568
00:35:43,290 --> 00:35:46,111
so to do that we made our system be defined in data

569
00:35:48,276 --> 00:35:52,157
what the concept of data, that's a gratuitous picture because this is all text

570
00:35:52,157 --> 00:35:55,778
what our data object was was called a rule

571
00:35:55,778 --> 00:36:00,759
now a rule consisted of a set of criteria

572
00:36:00,759 --> 00:36:01,959
about the collision

573
00:36:01,959 --> 00:36:05,620
that were used to filter out if

574
00:36:05,620 --> 00:36:08,321
this rule would match or not

575
00:36:08,321 --> 00:36:13,382
the criteria consisted of things about the body's relationship to the collision

576
00:36:13,382 --> 00:36:16,683
such as its speed towards a collision as a ratio of its max speed

577
00:36:17,392 --> 00:36:21,193
or the angle between its forward and the collision normal.

578
00:36:21,193 --> 00:36:24,354
It also consisted of some metadata about the body,

579
00:36:24,354 --> 00:36:26,855
such as the team relationship between the two bodies.

580
00:36:26,855 --> 00:36:29,316
Are they friendly, are they enemy, are they neutral?

581
00:36:29,316 --> 00:36:32,877
Or is it a player, is the body a vehicle, is it an AI?

582
00:36:32,877 --> 00:36:35,098
Any kind of information that would help a user

583
00:36:35,098 --> 00:36:38,239
to figure out if they cared about this collision

584
00:36:38,239 --> 00:36:40,540
was added to the set of criteria in the rule

585
00:36:40,540 --> 00:36:43,881
so that filtering was flexible enough

586
00:36:43,881 --> 00:36:46,002
to catch exactly what was necessary to catch.

587
00:36:47,271 --> 00:36:48,872
Next there was a priority.

588
00:36:48,872 --> 00:36:51,014
So in order to, if multiple rules matched,

589
00:36:51,014 --> 00:36:52,755
we needed to figure out who would be applied.

590
00:36:52,755 --> 00:36:54,676
The highest priority would win,

591
00:36:54,676 --> 00:36:57,078
and this allowed us to layer rules together

592
00:36:57,078 --> 00:36:58,959
of increasing complexity,

593
00:36:58,959 --> 00:37:01,000
honing in on key parts of the collision

594
00:37:01,000 --> 00:37:04,163
and increasing the priority to get more complex behaviors

595
00:37:04,163 --> 00:37:06,224
when, say, you're going faster,

596
00:37:06,224 --> 00:37:07,865
and this is a powerful thing.

597
00:37:09,222 --> 00:37:14,885
Now we made sure that our rules only involved vehicles. At least one of the bodies involved had to be a vehicle.

598
00:37:14,885 --> 00:37:23,289
This was mostly done for simplicity. We were only caring about our vehicles in this response system and also for performance.

599
00:37:23,289 --> 00:37:30,972
As our vehicles are traveling very fast, we just needed to focus in on these collisions instead of applying rules to every single collision that we ever saw.

600
00:37:30,972 --> 00:37:37,415
But this is not a requirement. You can use a system like this for all of your collisions if you want. We just didn't feel the need to.

601
00:37:39,519 --> 00:37:40,639
Next, they are scoped.

602
00:37:40,639 --> 00:37:43,520
What this means is where the rule is defined in data

603
00:37:43,520 --> 00:37:45,141
determines when it will run.

604
00:37:45,141 --> 00:37:47,501
At the highest level scope, we had global rules

605
00:37:47,501 --> 00:37:49,522
that would apply to all collisions involving

606
00:37:49,522 --> 00:37:50,802
at least one vehicle.

607
00:37:50,802 --> 00:37:53,043
The next level down was per game mode.

608
00:37:53,043 --> 00:37:55,663
We knew that we needed a different set of rules

609
00:37:55,663 --> 00:37:57,084
for, say, our racing mode.

610
00:37:57,084 --> 00:37:58,544
If you crash into a wall in the racing mode,

611
00:37:58,544 --> 00:38:01,705
we might want to guide the player back onto the track

612
00:38:01,705 --> 00:38:04,966
versus our arena mode where there is no track to worry about.

613
00:38:04,966 --> 00:38:08,326
The next level would be vehicle type.

614
00:38:08,815 --> 00:38:14,548
Air handling had different set of requirements as they were able to rotate in both yaw and

615
00:38:14,548 --> 00:38:18,016
pitch versus land vehicles that only really rotated in the yaw space.

616
00:38:19,071 --> 00:38:22,673
Lastly, at the lowest level was the per-entity scope.

617
00:38:22,673 --> 00:38:24,414
We could add a component onto our entity

618
00:38:24,414 --> 00:38:26,796
that defined a list of rules.

619
00:38:26,796 --> 00:38:28,457
And those rules would only ever run

620
00:38:28,457 --> 00:38:32,139
if that entity was involved in a collision with a vehicle.

621
00:38:32,139 --> 00:38:34,300
The entity did not have to be a vehicle itself,

622
00:38:34,300 --> 00:38:35,401
which is really awesome,

623
00:38:35,401 --> 00:38:38,243
and meant that we could essentially add custom rules

624
00:38:38,243 --> 00:38:39,564
in a single place in the...

625
00:38:40,524 --> 00:38:45,627
game and get the behavior to only happen there, which really drove some level mechanics.

626
00:38:45,627 --> 00:38:48,969
At one point we had bells that you had to ring in order to open a door and we could

627
00:38:48,969 --> 00:38:54,593
just throw a rule that said when this bell is hit, do this thing and then send this message

628
00:38:54,593 --> 00:38:55,233
off and keep track of it.

629
00:38:55,233 --> 00:39:00,516
So it was a really easy way to hook into making our levels more interesting.

630
00:39:02,453 --> 00:39:05,275
now the next thing is a little bit confusing and i'm gonna show an example

631
00:39:05,275 --> 00:39:06,456
about it later

632
00:39:06,456 --> 00:39:09,857
and hopefully explain it better but our rules were defined in a bidirectional way

633
00:39:09,857 --> 00:39:13,760
so what this meant is we don't necessarily know what order

634
00:39:13,760 --> 00:39:16,501
uh... our physics simulation is going to give us the bodies

635
00:39:16,501 --> 00:39:20,583
it could say that a vehicle is colliding with a box but it could also just as well say

636
00:39:20,583 --> 00:39:22,744
the box is colliding with the vehicle

637
00:39:22,744 --> 00:39:25,266
so it was up to the rule to uh... disambiguify

638
00:39:25,266 --> 00:39:25,566
that's the word

639
00:39:25,566 --> 00:39:31,089
uh... what order of the bodies were in and make sure that the response was

640
00:39:31,089 --> 00:39:32,010
applied in the

641
00:39:32,430 --> 00:39:34,272
to the proper body.

642
00:39:34,272 --> 00:39:36,534
We essentially tested each rule from both perspectives

643
00:39:36,534 --> 00:39:39,477
and then the rule needed to filter out

644
00:39:39,477 --> 00:39:43,181
and only match one, otherwise it'd be ambiguous

645
00:39:43,181 --> 00:39:45,463
which response would be applied to which.

646
00:39:45,463 --> 00:39:46,624
Lastly, there's a response.

647
00:39:46,624 --> 00:39:50,208
This defines how either body will respond to the collision

648
00:39:50,208 --> 00:39:52,631
and what's gonna happen after the fact.

649
00:39:52,631 --> 00:39:54,332
So, I wanna go into a little bit more detail

650
00:39:54,332 --> 00:39:55,113
about responses.

651
00:39:58,773 --> 00:40:00,974
Our responses ran in two phases.

652
00:40:00,974 --> 00:40:02,275
Morgenthau's art.

653
00:40:02,275 --> 00:40:05,537
The first phase ran in the middle of our simulation.

654
00:40:05,537 --> 00:40:11,780
This phase was used to do things, to change the collisions essentially before they ever happened.

655
00:40:11,780 --> 00:40:16,483
We needed this in order to do things like entirely ignoring the collision,

656
00:40:16,483 --> 00:40:21,085
or if we wanted to change the mass of the bodies in relation to each other,

657
00:40:21,085 --> 00:40:26,889
before we solve for it, we have to do it in the middle of the sim.

658
00:40:26,889 --> 00:40:27,289
This...

659
00:40:28,985 --> 00:40:33,949
We could do other things like reduce the amount of rotation the body's got or change the normal of the collision.

660
00:40:33,949 --> 00:40:38,772
Since we're running in the middle of the simulation though, that limits how much stuff we can actually do.

661
00:40:38,772 --> 00:40:43,396
If we allow ourselves to set the position of the bodies or change their velocities,

662
00:40:43,396 --> 00:40:47,278
we've already solved for our contact, so that's going to just invalidate that.

663
00:40:47,278 --> 00:40:51,541
And if we allow things like adding or removing bodies, that may cause us to crash,

664
00:40:51,541 --> 00:40:53,423
as we've just totally trashed our sim.

665
00:40:54,814 --> 00:40:58,020
so we basically don't allow any user code it's a very fixed set of operations

666
00:40:58,020 --> 00:41:00,866
that happen in here and they all happen right in the middle of the sim

667
00:41:01,945 --> 00:41:05,066
For anyone who is also using Havoc New Physics like us,

668
00:41:05,066 --> 00:41:08,787
this is running in the post-collide stage against the predictive manifold,

669
00:41:08,787 --> 00:41:11,788
so it's actually happening before the collisions happen.

670
00:41:11,788 --> 00:41:14,528
If you're not using Havoc New Physics, you can still do this,

671
00:41:14,528 --> 00:41:16,529
you just need to make sure it is happening in your sim

672
00:41:16,529 --> 00:41:19,790
and operating before you do any kind of solving.

673
00:41:19,790 --> 00:41:21,050
You may think that,

674
00:41:21,050 --> 00:41:23,391
oh, if I want to ignore a contact,

675
00:41:23,391 --> 00:41:26,092
I can just set the body's velocity back to what it was before.

676
00:41:26,535 --> 00:41:27,436
and it's like it never hit it.

677
00:41:27,436 --> 00:41:31,439
But the problem is you may hit that body into another body

678
00:41:31,439 --> 00:41:34,021
that causes a chain reaction that you're never going to be able to correct for.

679
00:41:34,021 --> 00:41:36,102
So this has to happen in the middle of the sim.

680
00:41:36,102 --> 00:41:40,165
The other phase is after the sim, outside of the sim.

681
00:41:40,165 --> 00:41:44,228
So this is where we react and start doing more flexible operations.

682
00:41:44,228 --> 00:41:49,131
We can do things like spawning effects, we can play sounds, we can do damage,

683
00:41:49,131 --> 00:41:50,893
we can add and remove bodies, we can...

684
00:41:51,547 --> 00:41:55,229
change the velocity if we want and simulate bounces or knock away really the

685
00:41:55,229 --> 00:41:59,471
sky's the limit so we had a like base virtual class in our response

686
00:41:59,471 --> 00:42:03,313
that other engineers could hook into for their own systems and our gameplay

687
00:42:03,313 --> 00:42:04,174
engineers use this to

688
00:42:04,174 --> 00:42:08,356
make it so that when you rammed into other vehicles it would both apply damage and send it

689
00:42:08,356 --> 00:42:12,799
flying in a comical arc and that way you can get this feeling of just ramming

690
00:42:12,799 --> 00:42:14,740
your enemies away

691
00:42:14,740 --> 00:42:15,901
uh... this

692
00:42:15,901 --> 00:42:19,883
phase ran in the against the actual impulses that were applied

693
00:42:20,183 --> 00:42:23,046
or clipped as they were

694
00:42:23,046 --> 00:42:24,147
in Havoc New Physics

695
00:42:24,147 --> 00:42:25,968
and if you're not using Havoc New Physics again

696
00:42:25,968 --> 00:42:28,050
as long as it's outside of the sim

697
00:42:28,050 --> 00:42:30,372
you're safe to go, you can kind of store off

698
00:42:30,372 --> 00:42:32,014
whatever happened and then

699
00:42:32,014 --> 00:42:34,096
apply it later

700
00:42:34,096 --> 00:42:36,378
apply these kind of flexible responses later

701
00:42:36,378 --> 00:42:38,280
there's one other part about

702
00:42:38,788 --> 00:42:45,416
how we handle the priority and layering of rules in the two phases.

703
00:42:45,416 --> 00:42:50,382
So, in the first phase, since we're only operating local to any kind of contact point,

704
00:42:50,382 --> 00:42:51,884
we don't want any outside influences.

705
00:42:52,618 --> 00:42:54,859
we took the best match, the highest priority match

706
00:42:54,859 --> 00:42:55,820
per contact, and this is different

707
00:42:55,820 --> 00:42:57,241
than what we did in the second phase.

708
00:42:57,241 --> 00:42:59,182
Since the second phase can do things

709
00:42:59,182 --> 00:43:01,203
like apply damage and play effects,

710
00:43:01,203 --> 00:43:03,745
if we have 10 contact points between two bodies,

711
00:43:03,745 --> 00:43:05,466
we don't want to apply 10 times the damage,

712
00:43:05,466 --> 00:43:06,706
we only want to apply one.

713
00:43:06,706 --> 00:43:09,548
So we found the best match between two bodies

714
00:43:09,548 --> 00:43:13,610
and then applied just one response per the two bodies.

715
00:43:13,610 --> 00:43:16,572
We would find all the ones that match the best rule,

716
00:43:16,572 --> 00:43:18,453
average them together to get them like a location

717
00:43:18,453 --> 00:43:20,455
and an orientation and apply the rule there.

718
00:43:20,715 --> 00:43:25,358
This little technical detail that was kind of confusing, but I think it's an important

719
00:43:25,358 --> 00:43:27,179
thing to call out.

720
00:43:27,179 --> 00:43:31,762
So now that we have this system in place, the first thing we wanted to do as engineers

721
00:43:31,762 --> 00:43:35,965
was make a set of rules and a global scope that would

722
00:43:36,226 --> 00:43:42,090
make sure that we could solve the problems that we were having in our early prototypes of losing control when you hit walls.

723
00:43:42,090 --> 00:43:48,294
And then by setting these rules up at the global scope at a low priority,

724
00:43:48,294 --> 00:43:54,799
then other people could essentially layer behaviors on top of these rules and then get more interesting behavior.

725
00:43:54,799 --> 00:44:00,023
So what you're seeing here is the difference between our collision with and without the rules applied.

726
00:44:00,023 --> 00:44:05,507
On the left with the rules you'll see basically we're not allowing it to rotate, we're not allowing it to get up the wall.

727
00:44:05,967 --> 00:44:11,797
And we may play a little animation effect of it jiggling when it hits, but that's just a little bit of extra flavor

728
00:44:11,797 --> 00:44:14,201
based on the speed and how we hit the wall.

729
00:44:15,290 --> 00:44:18,251
this was, is a much better response than,

730
00:44:18,251 --> 00:44:22,233
even though that's really awesome, the way we get air.

731
00:44:22,233 --> 00:44:24,114
We care a lot more about control than

732
00:44:24,114 --> 00:44:25,735
awesome, awesome tricks.

733
00:44:25,735 --> 00:44:28,816
So now that that's in place, we can start building

734
00:44:28,816 --> 00:44:30,757
more interesting behavior.

735
00:44:30,757 --> 00:44:32,778
One example of that is how we handle our destructibles

736
00:44:32,778 --> 00:44:34,479
and the vehicles colliding with our destructibles.

737
00:44:34,479 --> 00:44:36,360
So what we essentially wanted is,

738
00:44:36,360 --> 00:44:39,361
if our vehicle hits a destructible at a low speed,

739
00:44:39,361 --> 00:44:40,262
nothing happens.

740
00:44:40,262 --> 00:44:42,503
We just kind of either won't rotate against it,

741
00:44:42,503 --> 00:44:43,283
we won't push it.

742
00:44:43,744 --> 00:44:46,529
if it's fixed, but if we come back at it at a higher speed,

743
00:44:46,529 --> 00:44:48,251
we're gonna apply damage to it and send it,

744
00:44:48,251 --> 00:44:50,295
break it apart and send the pieces of debris flying

745
00:44:50,295 --> 00:44:52,138
and push it around, it's gonna look awesome.

746
00:44:52,138 --> 00:44:53,179
But we only want that to happen

747
00:44:53,179 --> 00:44:54,882
if we're traveling fast enough.

748
00:44:54,882 --> 00:44:56,745
So let's walk through how we set up this rule.

749
00:44:57,557 --> 00:45:03,179
So, first of all, we need to make sure that this is only ever applying when we are hitting destructibles.

750
00:45:03,179 --> 00:45:04,920
And that's easy to do with the scope.

751
00:45:04,920 --> 00:45:09,961
We can essentially add this rule to our base archetype of destructibles,

752
00:45:09,961 --> 00:45:14,323
and then, since all of our destructibles inherit from that, they will also inherit the rule.

753
00:45:14,863 --> 00:45:18,005
and this rule will only ever run on our destructibles.

754
00:45:18,005 --> 00:45:19,466
Next, we need to deal with that whole

755
00:45:19,466 --> 00:45:21,148
confusing bidirectionality thing.

756
00:45:21,148 --> 00:45:22,849
We need to figure out which body is which

757
00:45:22,849 --> 00:45:26,512
that we apply the response in the proper order.

758
00:45:26,512 --> 00:45:27,973
Usually when we're doing things like

759
00:45:27,973 --> 00:45:29,354
applying an action to another body,

760
00:45:29,354 --> 00:45:31,315
as a matter of standard, we said that the source

761
00:45:31,315 --> 00:45:33,257
was the person doing the action,

762
00:45:33,257 --> 00:45:35,018
the target was the one receiving the action.

763
00:45:35,018 --> 00:45:37,820
So in this case, the source should be the vehicle

764
00:45:37,820 --> 00:45:39,301
and the target should be the destructible.

765
00:45:39,301 --> 00:45:41,122
So all we really have to say is,

766
00:45:41,122 --> 00:45:42,343
hey, the source is the vehicle, yes.

767
00:45:43,704 --> 00:45:47,928
Now, if we didn't do that and we had a destructible flying at us, it's very possible that it may

768
00:45:47,928 --> 00:45:49,909
apply damage to us, and that would be very bad.

769
00:45:49,909 --> 00:45:53,613
So that's kind of what I mean by the bidirectionality.

770
00:45:53,613 --> 00:45:56,835
The only other thing we have to worry about is our speed.

771
00:45:56,835 --> 00:46:01,559
So we can just say, hey, is the source traveling at least 20% of its max speed?

772
00:46:01,559 --> 00:46:05,603
Once that is true, this rule will match, and if its priority is higher than the global

773
00:46:05,603 --> 00:46:07,424
rules, it's going to be applied.

774
00:46:07,424 --> 00:46:09,306
All the other criteria.

775
00:46:09,924 --> 00:46:13,786
for the collision are set up in such a way that you don't need to touch them if you don't care about them.

776
00:46:13,786 --> 00:46:15,007
They're going to match by default.

777
00:46:15,007 --> 00:46:17,949
So you're only really honing in on the parts of the collision you care about

778
00:46:17,949 --> 00:46:21,372
because there's a lot of criteria and that just makes it a lot easier and faster to set it up.

779
00:46:21,372 --> 00:46:24,775
Then all we have to do is apply our reaction.

780
00:46:24,775 --> 00:46:26,876
For our source, we want to ignore the collision entirely.

781
00:46:26,876 --> 00:46:29,998
This happens in the phase one that I mentioned before

782
00:46:29,998 --> 00:46:32,460
and we are going to pass straight through as if it was never there.

783
00:46:32,658 --> 00:46:36,981
our target is going to apply damage which will break it apart and send debris flying.

784
00:46:36,981 --> 00:46:43,964
An important note is the when these rule when the phases are applied is hidden from the user

785
00:46:43,964 --> 00:46:48,106
that's just like a technical detail they never had to deal with it they just had a single response

786
00:46:48,106 --> 00:46:51,108
and then we'd make sure that we applied the right responses at the right times.

787
00:46:51,108 --> 00:46:58,592
So this system as a whole it was a lot more complex than ultimately we kind of wanted.

788
00:46:59,556 --> 00:47:04,361
we were hoping that we would have like layering of rules would make simple rules that would

789
00:47:04,361 --> 00:47:08,625
you know stack together and then we'd have this nice complex behavior but

790
00:47:08,625 --> 00:47:12,048
since our rules were defined at different scopes in different places all over the place

791
00:47:12,048 --> 00:47:15,752
it really was more of a nightmare of trying to like organize them and keep them

792
00:47:16,532 --> 00:47:19,714
consistently prioritized against each other and we had to set up like

793
00:47:19,714 --> 00:47:22,476
just kind of keep an eye on that, make sure that one designer wasn't setting

794
00:47:22,476 --> 00:47:23,516
some number

795
00:47:23,516 --> 00:47:26,398
that would stomp on somebody else's rule

796
00:47:26,398 --> 00:47:29,580
and debugging it and dealing with a lot of context in the system

797
00:47:29,580 --> 00:47:31,341
it was more complex than I wanted

798
00:47:33,250 --> 00:47:35,471
if maybe if we started it in the middle of the development,

799
00:47:35,471 --> 00:47:37,472
if you want to do something like this,

800
00:47:37,472 --> 00:47:39,072
it's great to start it as early as possible

801
00:47:39,072 --> 00:47:41,273
so you have as much time to kind of iterate on it.

802
00:47:41,273 --> 00:47:43,934
But I don't want the complexity to necessarily scare you away.

803
00:47:43,934 --> 00:47:46,355
The flexibility that we got out of it was amazing.

804
00:47:46,355 --> 00:47:49,136
When we were closing out a project,

805
00:47:49,136 --> 00:47:52,757
if QA reported a bug in some particular part of a map,

806
00:47:52,757 --> 00:47:53,797
we can go to the entity

807
00:47:53,797 --> 00:47:55,618
that was causing the collision problem,

808
00:47:55,618 --> 00:47:57,659
add a rule to it, fix the bug,

809
00:47:57,659 --> 00:47:59,559
and know that we weren't going to break something

810
00:47:59,559 --> 00:48:01,200
somewhere else in some other map

811
00:48:01,200 --> 00:48:02,300
or somewhere else in that map.

812
00:48:02,731 --> 00:48:05,112
And if you've ever been in crunch trying to ship something

813
00:48:05,112 --> 00:48:08,112
and need to put in a hack, it is amazing to know that your hack

814
00:48:08,112 --> 00:48:10,353
isn't going to affect anything else.

815
00:48:10,353 --> 00:48:13,574
And it really drove a lot of fun iteration

816
00:48:13,574 --> 00:48:15,994
from our content creators, both design and artists

817
00:48:15,994 --> 00:48:18,835
and engineers, really were able to explore

818
00:48:18,835 --> 00:48:21,535
the fun of collisions with our vehicles

819
00:48:21,535 --> 00:48:24,216
and make it more than just something that happens,

820
00:48:24,216 --> 00:48:26,937
and instead turn it into an exciting experience that makes

821
00:48:26,937 --> 00:48:28,497
you want to crash into things.

822
00:48:30,283 --> 00:48:34,146
So, as fun as collision response is,

823
00:48:34,146 --> 00:48:36,787
I want to move on to something a little bit more fun

824
00:48:36,787 --> 00:48:40,309
and wrap up with our predictive landing system.

825
00:48:40,309 --> 00:48:43,852
So, as you've seen in a lot of videos,

826
00:48:43,852 --> 00:48:46,133
we like our vehicles getting air.

827
00:48:46,133 --> 00:48:47,514
Like the first time we had a prototype,

828
00:48:47,514 --> 00:48:49,715
the first thing I did was put down a ramp and hit it.

829
00:48:49,715 --> 00:48:52,817
It's fun to just go soaring through the air.

830
00:48:52,817 --> 00:48:55,118
But we knew that we needed our vehicles

831
00:48:55,118 --> 00:48:56,259
to properly land on the wheels.

832
00:48:56,659 --> 00:49:00,100
if it didn't you wouldn't have control and it just wouldn't be fun

833
00:49:00,100 --> 00:49:04,182
so we decided we're gonna make a system that's gonna make us always land on our wheels

834
00:49:04,182 --> 00:49:05,262
simple enough

835
00:49:05,262 --> 00:49:07,603
and then we can start doing flips and tricks and stuff in the air

836
00:49:07,603 --> 00:49:10,605
and get this awesome feeling and still know that

837
00:49:10,605 --> 00:49:12,445
everything will be fine when we land

838
00:49:12,445 --> 00:49:13,025
so how do we do this

839
00:49:13,025 --> 00:49:13,626
well let's walk through it

840
00:49:22,870 --> 00:49:25,394
This is what will happen when we don't have a predictive landing system.

841
00:49:25,394 --> 00:49:30,781
Our vehicle is going to hit a ramp, get some air, and then kind of do a partial spin and

842
00:49:30,781 --> 00:49:33,124
crash into its nose and that's bad and we don't want that.

843
00:49:33,124 --> 00:49:34,987
So we need to fix that.

844
00:49:34,987 --> 00:49:38,471
What we do is the moment we detect that our vehicle is going to get air...

845
00:49:39,069 --> 00:49:40,990
we take a pre-computed convex hull

846
00:49:40,990 --> 00:49:43,512
that includes the chassis and the wheels

847
00:49:43,512 --> 00:49:46,753
and orient it along the velocity that we're traveling

848
00:49:46,753 --> 00:49:48,754
and the up axis, world up,

849
00:49:48,754 --> 00:49:51,396
and then we cast it along a ballistic trajectory

850
00:49:51,396 --> 00:49:53,077
to figure out when and where we're gonna land.

851
00:49:53,077 --> 00:49:54,758
Now that we have that information,

852
00:49:54,758 --> 00:49:58,460
we can simulate what our vehicle would do

853
00:49:58,460 --> 00:50:01,682
based on its initial orientation and its angular velocity

854
00:50:01,682 --> 00:50:03,743
and multiply it by the time it's gonna take us to land

855
00:50:03,743 --> 00:50:06,444
to figure out what our uncorrected velocity would be.

856
00:50:06,444 --> 00:50:06,524
Then.

857
00:50:08,652 --> 00:50:12,235
We can just take the difference between that orientation and our ideal landing orientation

858
00:50:12,235 --> 00:50:17,839
that we can calculate just from the collision normal and our velocity, and figure out what

859
00:50:17,839 --> 00:50:20,621
correction we need to apply.

860
00:50:20,621 --> 00:50:25,644
If we apply that correction over time in the air, in theory, we're going to get a result

861
00:50:25,644 --> 00:50:26,425
much more like this.

862
00:50:26,425 --> 00:50:29,467
And everything is great.

863
00:50:29,467 --> 00:50:32,269
It's not that simple.

864
00:50:33,518 --> 00:50:34,219
uh...

865
00:50:34,219 --> 00:50:38,060
so and that's not even that simple anyways

866
00:50:38,060 --> 00:50:38,200
uh...

867
00:50:38,200 --> 00:50:42,082
so the when you're dealing with rigid body physics the

868
00:50:42,082 --> 00:50:46,464
angular velocity is stored as a single axis that you rotate around and

869
00:50:46,464 --> 00:50:48,505
multiplied by the speed that you rotate around it

870
00:50:49,317 --> 00:50:53,700
In order to do this kind of correction over time and incorporate flips and twists and stuff,

871
00:50:53,700 --> 00:50:58,723
you actually have to rotate the axis around which you're rotating over time,

872
00:50:58,723 --> 00:51:00,865
which is a process called precession,

873
00:51:00,865 --> 00:51:04,567
and is really, really, really hard to solve.

874
00:51:04,567 --> 00:51:08,650
It's like a higher order equation, and I tried, and I failed, and I had to move on.

875
00:51:08,650 --> 00:51:14,595
So we had to find a way of simplifying this slash cheating horribly in order to make this work.

876
00:51:15,396 --> 00:51:16,056
Here's how we cheated.

877
00:51:16,056 --> 00:51:19,757
The moment our vehicle gets air, what we're going to do

878
00:51:19,757 --> 00:51:22,878
is take its orientation right there, and then do the cast,

879
00:51:22,878 --> 00:51:24,899
like I mentioned before, and figure out

880
00:51:24,899 --> 00:51:28,160
where the orientation we want to be at when we land.

881
00:51:28,160 --> 00:51:31,141
We can pick an axis around which we can

882
00:51:31,141 --> 00:51:33,122
rotate from this orientation.

883
00:51:33,122 --> 00:51:33,942
Is that showing up?

884
00:51:33,942 --> 00:51:34,682
That's not really showing up.

885
00:51:34,682 --> 00:51:35,682
There's a little arrow there.

886
00:51:35,682 --> 00:51:38,983
We take the difference between this orientation

887
00:51:38,983 --> 00:51:40,704
and our landing orientation, get an axis

888
00:51:40,704 --> 00:51:42,124
we can spin around that will make

889
00:51:42,124 --> 00:51:43,505
us get to that orientation.

890
00:51:45,426 --> 00:51:48,368
and then we take our angular speed here,

891
00:51:48,368 --> 00:51:51,110
multiply it by the amount of time it's gonna take us

892
00:51:51,110 --> 00:51:55,594
to land, and then round that to the nearest full revolution.

893
00:51:55,594 --> 00:51:57,875
If you spin a full revolution around an axis,

894
00:51:57,875 --> 00:52:00,077
you wind up right where you are again.

895
00:52:00,077 --> 00:52:02,559
So then all we have to do is apply the difference

896
00:52:02,559 --> 00:52:04,560
between this orientation and our landing orientation

897
00:52:04,560 --> 00:52:07,403
as an angle, add that to the full amount of revolutions,

898
00:52:07,403 --> 00:52:09,864
and we get a result that looks something like this,

899
00:52:09,864 --> 00:52:12,066
where we're spinning around a single axis over time,

900
00:52:12,066 --> 00:52:13,887
getting a lot of cool motion,

901
00:52:15,022 --> 00:52:17,262
But you don't really know that it's just that single axis.

902
00:52:17,262 --> 00:52:20,503
And the part that's important to note

903
00:52:20,503 --> 00:52:23,223
is we could totally change the axis around which we

904
00:52:23,223 --> 00:52:24,704
spin by doing this process.

905
00:52:24,704 --> 00:52:26,704
Like our angular velocity could change drastically

906
00:52:26,704 --> 00:52:27,584
at that one point.

907
00:52:27,584 --> 00:52:31,625
But the process of getting air is chaotic enough

908
00:52:31,625 --> 00:52:34,286
that your eye doesn't necessarily catch that.

909
00:52:34,286 --> 00:52:37,887
And we hide the fact that we're doing this by that process.

910
00:52:37,887 --> 00:52:39,847
Now, if we weren't on a ballistic trajectory,

911
00:52:39,847 --> 00:52:41,488
or we allowed any kind of input to change

912
00:52:41,488 --> 00:52:42,428
when we were going to land.

913
00:52:42,822 --> 00:52:45,423
and we change angular velocity in the middle of the air,

914
00:52:45,423 --> 00:52:47,724
it's very obvious and it looks really bad.

915
00:52:47,724 --> 00:52:49,705
But at that one moment of getting air,

916
00:52:49,705 --> 00:52:52,646
our brains can't really see it, the change,

917
00:52:52,646 --> 00:52:56,287
and we hide that, and then this much simpler approach

918
00:52:56,287 --> 00:52:58,027
works perfectly fine and we ship with it

919
00:52:58,027 --> 00:52:59,088
and I absolutely love it.

920
00:53:00,112 --> 00:53:04,053
And so with that, that wraps up our technical deep dive.

921
00:53:04,053 --> 00:53:07,515
Hopefully this has shown you some of the insight

922
00:53:07,515 --> 00:53:09,336
on the complexities that we were dealing with

923
00:53:09,336 --> 00:53:11,937
with these systems and might help you avoid the pitfalls

924
00:53:11,937 --> 00:53:13,938
that we hit while implementing them

925
00:53:13,938 --> 00:53:20,080
and also helps you expose physics to your team as a whole

926
00:53:20,080 --> 00:53:22,841
so that everyone can really find the fun in physics.

927
00:53:23,729 --> 00:53:30,491
Absolutely. Also, I want to mention again how much these kind of pillars helped us.

928
00:53:30,491 --> 00:53:34,472
And it was really a changing point for our team when we started sort of honing in on

929
00:53:34,472 --> 00:53:40,073
these rules. And I think it helped us make much better decisions. Hopefully these are

930
00:53:40,073 --> 00:53:46,555
helpful to you, but I really think that for your own project and your own goals, you need

931
00:53:46,555 --> 00:53:51,576
to sort of find your own and really define for your team what is important and what isn't.

932
00:53:52,917 --> 00:54:00,024
Also, I think we wanted to kind of just mention here at the end that if you are like us at

933
00:54:00,024 --> 00:54:04,028
a point where you're sort of on the fence between whether or not you should introduce

934
00:54:04,028 --> 00:54:09,834
some of the complexities of physically accurate simulation, I think after spending a few years

935
00:54:09,834 --> 00:54:13,738
doing this and working with a lot, I think we can wholeheartedly say you should.

936
00:54:15,840 --> 00:54:21,745
It's difficult at times, but it's a process with physics that it can be controlled.

937
00:54:21,745 --> 00:54:24,967
It's not like you just have to give up control or give up design.

938
00:54:24,967 --> 00:54:30,031
It's really something that if you take the time and the effort that you can manage and

939
00:54:30,031 --> 00:54:34,935
that you can expose out to your designers and you can work together with them to really,

940
00:54:34,935 --> 00:54:37,757
I think, bring a ton to your game.

941
00:54:37,757 --> 00:54:40,820
And I'm really, really happy that we ended up doing this.

942
00:54:40,820 --> 00:54:43,422
So I think that wraps it up for us.

943
00:54:43,422 --> 00:54:44,162
Thank you.

944
00:54:44,162 --> 00:54:44,563
Bye, guys.

945
00:54:49,411 --> 00:54:53,232
I think there is a microphone set up if anyone has any questions.

946
00:54:53,232 --> 00:54:56,393
We have about five minutes, so we're right on track.

947
00:54:56,393 --> 00:55:04,075
Hello. Thanks guys for the awesome talk. It was really interesting.

948
00:55:04,075 --> 00:55:07,115
So my question is can you share a little bit about the numbers,

949
00:55:07,115 --> 00:55:09,976
how many of physics programmers were there on the project,

950
00:55:09,976 --> 00:55:11,476
and how many content designers,

951
00:55:11,476 --> 00:55:14,617
and maybe how many vehicles were there in the end? Thank you.

952
00:55:16,192 --> 00:55:23,434
So the question was how many physics programmers we had and how many people on the team.

953
00:55:23,434 --> 00:55:27,075
It varied throughout the project.

954
00:55:27,075 --> 00:55:33,497
I was very happy when I got to the point where I could have one engineer focus on sea

955
00:55:33,497 --> 00:55:39,039
and one focus on air and one, I focused on land myself so that we could all sort

956
00:55:39,039 --> 00:55:41,679
of take ownership of what was fun and really.

957
00:55:43,020 --> 00:55:46,465
uh... work with the designers on that as the engineers um...

958
00:55:46,465 --> 00:55:51,251
patrick helped us out uh... with a lot of the physics implementation uh... but

959
00:55:51,251 --> 00:55:52,813
even he was not on

960
00:55:52,813 --> 00:55:53,954
our team full-time

961
00:55:53,954 --> 00:55:57,719
uh... this is kind of an advisory role at times telling

962
00:55:57,719 --> 00:56:01,483
yan what to do and then making yan do it which is the greatest thing in the

963
00:56:01,483 --> 00:56:01,623
world

964
00:56:03,253 --> 00:56:06,874
And then I made sure that I at least had my desk next to his.

965
00:56:06,874 --> 00:56:08,894
So if he wasn't officially on my team,

966
00:56:08,894 --> 00:56:11,895
I could at least pull him over and say, I'm really dumb

967
00:56:11,895 --> 00:56:13,335
and you need to help me with this.

968
00:56:13,335 --> 00:56:14,816
What was the second part of your question?

969
00:56:14,816 --> 00:56:16,696
Sorry.

970
00:56:16,696 --> 00:56:19,817
So how many vehicles you had in the end?

971
00:56:19,817 --> 00:56:22,637
We had 20 vehicles.

972
00:56:22,637 --> 00:56:29,699
We had 10 land vehicles and maybe five or six each.

973
00:56:29,699 --> 00:56:30,059
Yeah, 20 total.

974
00:56:32,557 --> 00:56:41,544
A couple questions. One clarification, you said the forces are applied through the center of mass of the vehicle.

975
00:56:41,544 --> 00:56:47,428
That's just for like the linear portion of like the accelerations, I assume not like the suspension spring?

976
00:56:47,428 --> 00:56:52,232
The suspension was applied at the point that it connected to the chassis to apply torque, but the, yes.

977
00:56:52,232 --> 00:57:02,320
Okay, cool. And then so, I mean, so then how did you actually expose like the turning rates and things like that if the wheels weren't actually applying torque?

978
00:57:02,520 --> 00:57:06,362
So it was, remember how we had those velocity curves?

979
00:57:06,362 --> 00:57:10,585
We used them again, essentially, to accelerate our angular

980
00:57:10,585 --> 00:57:11,626
velocity over time.

981
00:57:11,626 --> 00:57:14,628
And then they could define a turning radius, I believe,

982
00:57:14,628 --> 00:57:15,149
is what it was.

983
00:57:15,149 --> 00:57:17,730
And it would accelerate to the maximum turning radius

984
00:57:17,730 --> 00:57:18,091
to get there.

985
00:57:18,808 --> 00:57:23,550
I guess one third question, do you have anything that's like a tank or something that turns

986
00:57:23,550 --> 00:57:25,251
in place or is it all just forward sort of?

987
00:57:25,251 --> 00:57:33,173
Actually the water vehicles tend to sort of turn around the center and some of the other

988
00:57:33,173 --> 00:57:39,876
vehicles, like especially when we had drifting, we had to change the point around which we

989
00:57:39,876 --> 00:57:40,416
turned.

990
00:57:40,416 --> 00:57:44,597
So we had the flexibility within our turning to...

991
00:57:45,858 --> 00:57:48,239
either choose to turn around the center,

992
00:57:48,239 --> 00:57:51,980
or we could offset that and pivot around something else,

993
00:57:51,980 --> 00:57:55,461
which that kind of drifting and getting that to feel right

994
00:57:55,461 --> 00:58:00,122
and sort of sliding that pivot around is non-trivial.

995
00:58:00,122 --> 00:58:01,823
Our initial implementation allowed

996
00:58:01,823 --> 00:58:04,544
you to actually define the rotation on all of the wheels,

997
00:58:04,544 --> 00:58:07,265
so we could actually make the back wheels counter-turn

998
00:58:07,265 --> 00:58:09,005
and do that kind of turn in place.

999
00:58:09,005 --> 00:58:11,266
But that was complexity that we felt, in the end,

1000
00:58:11,266 --> 00:58:12,747
was not as necessary.

1001
00:58:12,947 --> 00:58:19,516
Yeah, I think the doing just the turning angle at first with the wheels I think is just unintuitive

1002
00:58:19,516 --> 00:58:23,982
and then switching to a turning radius I think really made a lot more sense to people.

1003
00:58:27,392 --> 00:58:32,135
Good stuff. I think I enjoy playing this stuff as much as my kids do, so we appreciate it.

1004
00:58:32,135 --> 00:58:39,339
Really quick question, kind of regarding the complexity or management of complexity, even after you kind of introduced scope and layers.

1005
00:58:39,339 --> 00:58:48,945
I was curious if, when it gets down to like the collision map in general, toward the end of the project, with all the sort of accumulation of stuff that goes into it,

1006
00:58:48,945 --> 00:58:55,689
does it still become kind of a data-driven design debugging problem, or does it land back on the engineers at that point?

1007
00:58:55,829 --> 00:59:00,936
Almost all of the debugging, when rules were not being applied right, fell on my lap.

1008
00:59:00,936 --> 00:59:06,503
The vehicles travel very, very fast and generated lots of manifolds.

1009
00:59:07,031 --> 00:59:11,456
and we thankfully had the Havok Visual Debugger to kind of show us all these points and record it

1010
00:59:11,456 --> 00:59:17,562
and then everyone would just send me a recording and I'd have to unwind exactly what was going wrong from that.

1011
00:59:17,562 --> 00:59:21,327
There was a lot of information presented there and it was hard to present all of this stuff

1012
00:59:21,327 --> 00:59:24,370
and enough information to actually reverse engineer what was happening.

1013
00:59:24,370 --> 00:59:28,795
Um, the actual, so figuring out which rules were applied in that regard.

1014
00:59:29,125 --> 00:59:31,006
or when they weren't applied properly was up to me.

1015
00:59:31,006 --> 00:59:34,088
I don't think there was too much,

1016
00:59:34,088 --> 00:59:37,190
there was a few problems about rules not being

1017
00:59:37,190 --> 00:59:39,071
understood from design.

1018
00:59:39,071 --> 00:59:41,512
Yeah, I mean, I think that there's definitely

1019
00:59:41,512 --> 00:59:44,114
a management that we had to see that was not technical.

1020
00:59:44,114 --> 00:59:46,796
It's just sort of procedural, almost.

1021
00:59:46,796 --> 00:59:50,218
Like, you have to just make sure that the team understands

1022
00:59:50,218 --> 00:59:53,219
what they're changing, and we're reviewing changes to all of it

1023
00:59:53,219 --> 00:59:54,580
as we go through it.

1024
00:59:54,580 --> 00:59:55,381
I actually think.

1025
00:59:57,872 --> 01:00:13,417
It felt to us like we were very successful towards the end of the project in that we had made these decisions early on to try to stop stepping on each other's toes and having some person's fix break something else.

1026
01:00:13,417 --> 01:00:22,240
And we had put in a ton of effort early on for that, and I think we really got the benefits out of that when we went to close out the project and.

1027
01:00:22,480 --> 01:00:27,983
There was definitely part of me that was terrified that things were going to come apart at the

1028
01:00:27,983 --> 01:00:31,565
seams right at the end and it was going to be really hard to fix things, but honestly

1029
01:00:31,565 --> 01:00:38,089
we were sort of shocked at how smoothly it went for our team right at the end and like

1030
01:00:38,089 --> 01:00:40,070
the independent parameters thing.

1031
01:00:41,261 --> 01:00:42,142
it's a life saver.

1032
01:00:42,142 --> 01:00:44,705
Being able to put the rule right in the entity

1033
01:00:44,705 --> 01:00:47,689
meant that they didn't have to deal so much with layering,

1034
01:00:47,689 --> 01:00:50,172
they just crank up the priority and put it right there.

1035
01:00:50,172 --> 01:00:53,076
And if it wasn't firing, it was fairly obvious.

1036
01:00:53,076 --> 01:00:53,897
So those kind of debugging things

1037
01:00:53,897 --> 01:00:55,238
were pretty straightforward.

1038
01:00:55,238 --> 01:00:56,260
And I think that's time.

1039
01:00:56,260 --> 01:00:58,522
All right, cool, thank you so much, guys.

1040
01:00:58,522 --> 01:01:00,345
We'll be in the wrap-up room if anyone wants.

