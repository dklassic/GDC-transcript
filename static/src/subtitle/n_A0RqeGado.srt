1
00:00:05,131 --> 00:00:09,317
So, hello everyone, my name is Matthew Harris from Criterion Games and welcome to Vehicle

2
00:00:09,317 --> 00:00:13,023
Feel Masterclass, Balancing Arcade Accessibility with Simulation Depth.

3
00:00:13,023 --> 00:00:16,248
And if you think that's a lot of words to fill on one slide, then you're going to love

4
00:00:16,248 --> 00:00:17,229
the rest of this presentation.

5
00:00:19,400 --> 00:00:22,902
During this talk I'm going to discuss Criterion's vehicle design philosophy and how we build

6
00:00:22,902 --> 00:00:26,424
vehicle handling that is both intuitive but deep and masterable.

7
00:00:26,424 --> 00:00:30,286
This talk isn't a set of hard and fast rules to follow to make the perfect vehicle game,

8
00:00:30,286 --> 00:00:33,308
as all games are different, but it's more a sharing of our processes and guidelines

9
00:00:33,308 --> 00:00:36,350
that we follow throughout development, with a view to both inform and inspire.

10
00:00:36,350 --> 00:00:39,511
Hopefully you'll find some useful learnings whether you're new to vehicle design or if

11
00:00:39,511 --> 00:00:41,272
you've just shipped your seventh Forza title.

12
00:00:44,672 --> 00:00:48,934
So before I get stuck into the presentation, I wanted to briefly talk about Criterion Games' history.

13
00:00:48,934 --> 00:00:53,095
Originally set up in 1993 as Criterion Software, Criterion developed the Renderware engine,

14
00:00:53,095 --> 00:00:54,955
and started making games in order to show it off.

15
00:00:54,955 --> 00:00:59,117
Early games such as Trickstyle, led on to the incredibly popular Burnout franchise,

16
00:00:59,117 --> 00:01:03,018
and then on to Need for Speed Hot Pursuit and Most Wanted.

17
00:01:03,018 --> 00:01:07,379
After over a decade of working on racing games, we started to lend our vehicle expertise to DICE,

18
00:01:07,379 --> 00:01:11,781
where we worked on vehicles in Battlefield 1, X-Wing VR Mission, and most recently, Star Wars Battlefront II.

19
00:01:12,981 --> 00:01:18,103
As for myself, I joined Criterion five years ago on Need for Speed Most Wanted and worked

20
00:01:18,103 --> 00:01:19,623
on this selection of titles.

21
00:01:19,623 --> 00:01:25,085
At Criterion, we encourage cross-discipline skills as much as possible, and so over my

22
00:01:25,085 --> 00:01:30,107
career at Criterion as a programmer, I took special interest in game feel, particularly

23
00:01:30,107 --> 00:01:31,567
in the design of vehicle handling.

24
00:01:31,567 --> 00:01:35,769
This proved incredibly useful, as understanding how to tune and design great vehicle handling

25
00:01:35,769 --> 00:01:39,490
as a programmer meant that I could work closely with our designers to deliver great game feel.

26
00:01:39,490 --> 00:01:42,191
And that's why I'm a programmer standing here giving a design talk.

27
00:01:44,474 --> 00:01:45,935
Okay, so what am I actually going to talk about today?

28
00:01:45,935 --> 00:01:49,118
As you might guess from my background, this is going to be a technical design talk, and

29
00:01:49,118 --> 00:01:53,481
it's aimed at taking you through the key parts of Criterion's vehicle design philosophy.

30
00:01:53,481 --> 00:01:57,585
Along the way I'm going to talk about the key differences between arcade and simulation

31
00:01:57,585 --> 00:02:01,488
games and how each type balances accessibility with mastery and depth.

32
00:02:01,488 --> 00:02:05,952
Then I'll move on to the simulation itself and discuss our physicality-first approach

33
00:02:05,952 --> 00:02:09,475
to designing vehicles and how to identify where the play in our vehicles comes from.

34
00:02:10,810 --> 00:02:14,415
After setting up a physical simulation, we add accessibility through the input layer

35
00:02:14,415 --> 00:02:18,760
on our assists, which are critical to providing accessibility without reducing depth.

36
00:02:18,760 --> 00:02:23,787
Once the vehicle is controllable and satisfying, we need to feedback the vehicle's handling

37
00:02:23,787 --> 00:02:26,271
via the camera, and I'll talk through some key concepts we use here.

38
00:02:27,955 --> 00:02:31,255
Throughout the majority of the talk, I'll be using motorsport racing as the context,

39
00:02:31,255 --> 00:02:33,356
as it provides a great variety of examples.

40
00:02:33,356 --> 00:02:36,577
However, in the final section, I'm going to show how our design philosophy can apply

41
00:02:36,577 --> 00:02:39,597
to a very different type of vehicle, the Starfighters in Star Wars Battlefront II.

42
00:02:39,597 --> 00:02:43,578
One important thing to note here is that the whole talk is focused around the handling

43
00:02:43,578 --> 00:02:44,478
side of game feel.

44
00:02:44,478 --> 00:02:49,200
Things like audio, VFX, sense of speed and force feedback are very important to game

45
00:02:49,200 --> 00:02:53,040
feel, but you could probably do entire presentations on those, so I won't be talking about those

46
00:02:53,040 --> 00:02:53,240
today.

47
00:02:53,240 --> 00:02:57,722
Let's start with a discussion on arcade vs simulation.

48
00:02:59,137 --> 00:03:02,838
When thinking about the term arcade, I don't mean a game genre like top-down shooters such

49
00:03:02,838 --> 00:03:03,579
as Geometry Wars.

50
00:03:03,579 --> 00:03:07,101
I'm talking about a particular set of game design decisions that lead to a particular

51
00:03:07,101 --> 00:03:08,041
arcade feel.

52
00:03:08,041 --> 00:03:12,483
Games that have an arcadey feel tend to focus on intuitive controls that are readily apparent

53
00:03:12,483 --> 00:03:17,526
to the player, make compromises on realism for the sake of fun, and often have a multitude

54
00:03:17,526 --> 00:03:19,787
of game mechanics that the player is trying to balance against each other.

55
00:03:20,769 --> 00:03:24,370
Simulation games, on the other hand, are trying to replicate a real-world experience and so

56
00:03:24,370 --> 00:03:27,891
tend to have a control system that's about immersiveness first and aims for a high degree

57
00:03:27,891 --> 00:03:30,672
of realism and believability from its gameplay and handling.

58
00:03:30,672 --> 00:03:35,234
Simulation games tend to have fewer game mechanics than arcade games as they tend to focus their

59
00:03:35,234 --> 00:03:39,255
gameplay around controlling a realistic vehicle rather than one with weapons and boost.

60
00:03:39,255 --> 00:03:44,357
Different design decisions can lead to a more arcade or simulation feel for your game, so

61
00:03:44,357 --> 00:03:47,478
in the next slide I'm going to try putting a selection of motorsport games on a sliding

62
00:03:47,478 --> 00:03:49,018
scale between arcade and simulation.

63
00:03:50,196 --> 00:03:54,257
Let's start at the simulation end of the spectrum with games such as Forza Horizon, regular

64
00:03:54,257 --> 00:03:55,498
Forza and iRacing.

65
00:03:55,498 --> 00:04:00,119
These games are focused towards delivering a realistic simulation of motorsport with

66
00:04:00,119 --> 00:04:03,100
their gameplay entirely around racing lines, cornering and drafting.

67
00:04:03,100 --> 00:04:07,662
They tend to have most of their assists off by default but will often give the user the

68
00:04:07,662 --> 00:04:12,363
option to turn on accessibility options such as help with braking or steering.

69
00:04:12,363 --> 00:04:15,584
Simulation games tend to end up with quite a high learning curve but are very rewarding

70
00:04:15,584 --> 00:04:17,225
for players who put in the time to master them.

71
00:04:19,505 --> 00:04:23,628
As we move towards arcade-style games, we have a subcategory in the middle of Simcade,

72
00:04:23,628 --> 00:04:27,470
which are where hybrid games such as Forza Horizon and Need for Speed live.

73
00:04:27,470 --> 00:04:31,973
These examples aim for a Hollywood realism tone, where things are a bit more over the

74
00:04:31,973 --> 00:04:34,655
top but still within the realms of real life.

75
00:04:34,655 --> 00:04:38,858
Players are doing exaggerated drifts and massive jumps, but in cars from real manufacturers.

76
00:04:38,858 --> 00:04:44,102
There are often additional challenges added on top of racing in Simcade games, such as

77
00:04:44,102 --> 00:04:47,985
extreme weather in Forza Horizon or weapons and cop chases in Need for Speed.

78
00:04:50,895 --> 00:04:54,400
Finally, we get to the arcade-style races, which tend to go for a heavily stylised or

79
00:04:54,400 --> 00:04:55,261
even cartoonish tone.

80
00:04:55,261 --> 00:05:00,627
Arcade-style races tend to have a large variety of game mechanics, such as drifting, boosting,

81
00:05:00,627 --> 00:05:04,431
stunts and weapons, in which the players have to learn in addition to racing.

82
00:05:04,431 --> 00:05:08,356
For this reason, the racing gameplay tends to be quite accessible for new players, but

83
00:05:08,356 --> 00:05:10,999
still provides plenty of depth for players who really want to get the most out of the

84
00:05:10,999 --> 00:05:11,219
game.

85
00:05:14,281 --> 00:05:18,142
So when comparing arcade and simulation, the arcade-style races have a variety of gameplay

86
00:05:18,142 --> 00:05:22,343
mechanics on top of cornering and speed management, such as weapons, stunts and boosting.

87
00:05:22,343 --> 00:05:26,525
Simulation races have fewer mechanics for the player to focus on, but have a simulation

88
00:05:26,525 --> 00:05:31,146
focus towards realism, and their aim is to make cornering and racing as satisfying as

89
00:05:31,146 --> 00:05:31,486
possible.

90
00:05:31,486 --> 00:05:36,307
Arcade is generally more accessible and fun, whereas simulation is harder to get into,

91
00:05:36,307 --> 00:05:39,508
but offers a more serious take on racing competition.

92
00:05:41,672 --> 00:05:45,174
One key thing that is consistent across all these games is that the player has to input

93
00:05:45,174 --> 00:05:47,014
controls at a satisfying cadence.

94
00:05:47,014 --> 00:05:50,656
The actions per minute for simulation games and arcade games are actually pretty comparable.

95
00:05:50,656 --> 00:05:54,497
For a simulation game, the player focuses all their attention on their racing line,

96
00:05:54,497 --> 00:05:57,818
trying to tap, brake, and turn at just the right intervals to nail that corner.

97
00:05:57,818 --> 00:06:01,980
Whereas in an arcade game, the player divides their attention between drifting around corners

98
00:06:01,980 --> 00:06:03,921
but also boosting and firing weapons.

99
00:06:04,711 --> 00:06:08,573
Although some people might see arcade-style races as casual and simple, in fact they have

100
00:06:08,573 --> 00:06:12,255
a wider variety of game challenges for the player to focus on than in simulation games.

101
00:06:12,255 --> 00:06:18,539
So when deciding where on this scale you're aiming for your game to be, you should consider

102
00:06:18,539 --> 00:06:19,059
a number of factors.

103
00:06:19,059 --> 00:06:22,861
What sort of players are you targeting your game at?

104
00:06:22,861 --> 00:06:26,983
Are they serious sports fans that demand realism, or are your players more interested in fantasy

105
00:06:26,983 --> 00:06:27,364
fulfillment?

106
00:06:27,364 --> 00:06:30,185
How serious and realistic is your game tone?

107
00:06:32,217 --> 00:06:35,460
If you're planning on having lots of mechanics such as boost and weapons, then you'll likely

108
00:06:35,460 --> 00:06:37,481
fall more on the arcade side of the spectrum.

109
00:06:37,481 --> 00:06:42,945
Balance the number of mechanics and complexity of the simulation against your assists in

110
00:06:42,945 --> 00:06:45,547
order to achieve a sensible rate of actions per minute.

111
00:06:45,547 --> 00:06:49,930
How much effort do you want to spend on your physical simulation?

112
00:06:49,930 --> 00:06:53,693
If you can't put much time into physical simulation but you're trying to build a realistic motorsport

113
00:06:53,693 --> 00:06:56,375
simulator, then you might end up with boring and shallow gameplay.

114
00:06:58,262 --> 00:07:01,184
Do you want your game to be accessible by lots of players, or are you focused on an

115
00:07:01,184 --> 00:07:02,786
experienced target market?

116
00:07:02,786 --> 00:07:06,148
If you're building an arcade or simcade racer, you'll likely need some assists to help keep

117
00:07:06,148 --> 00:07:08,170
the input frequency at satisfying levels.

118
00:07:08,170 --> 00:07:12,834
Once again, these aren't hard and fast rules, but you should have a strong idea of where

119
00:07:12,834 --> 00:07:13,835
you want to sit on this spectrum.

120
00:07:13,835 --> 00:07:17,538
Don't try to have it all, otherwise you risk building an overly demanding and complex game.

121
00:07:20,354 --> 00:07:23,615
At Criterion, our approach has been to combine what we see as the best of both worlds between

122
00:07:23,615 --> 00:07:24,555
arcade and simulation.

123
00:07:24,555 --> 00:07:28,936
We start with physicality and build a realistic, physically based simulation.

124
00:07:28,936 --> 00:07:33,237
Then we build assists on top of that, which makes the simulation more accessible and allows

125
00:07:33,237 --> 00:07:35,958
the player to focus on more things at once.

126
00:07:35,958 --> 00:07:39,679
Our designers then very carefully balance physicality and accessibility in order to

127
00:07:39,679 --> 00:07:43,740
get a balanced experience that hits our aim of easy to learn but hard to master.

128
00:07:43,740 --> 00:07:47,641
Criterion has used this type of approach since Need for Speed Hot Pursuit and has worked

129
00:07:47,641 --> 00:07:48,481
well for us ever since.

130
00:07:52,234 --> 00:07:56,755
Okay, so the next part of the vehicle design philosophy that I'm going to talk about is the physical simulation of the vehicle.

131
00:08:05,720 --> 00:08:09,542
So, we see the physical simulation as the foundation that allows us to build a game

132
00:08:09,542 --> 00:08:11,282
with deep mastery and rewarding challenge.

133
00:08:11,282 --> 00:08:15,083
In this section I'm going to start by talking about how the context of our game affects

134
00:08:15,083 --> 00:08:18,925
the elements we might want to simulate, and then go on to compare different physical simulations

135
00:08:18,925 --> 00:08:23,146
of car dynamics by using approaches that mimic real-world physical effects.

136
00:08:23,146 --> 00:08:26,787
We ideally want to pick parts of the simulation that will add play to the handling, giving

137
00:08:26,787 --> 00:08:29,548
the player multiple things to balance and learn in order to achieve their goal.

138
00:08:32,002 --> 00:08:36,046
Before starting work on your physical simulation, it's important to consider your game context.

139
00:08:36,046 --> 00:08:39,949
This is because we see the context as a set of requirements on your physical simulation.

140
00:08:39,949 --> 00:08:45,253
Think about if your environment is wide open or enclosed, how might this affect the desired

141
00:08:45,253 --> 00:08:46,895
behaviour of a vehicle?

142
00:08:46,895 --> 00:08:49,757
Also consider what the player's goal is when driving the vehicle.

143
00:08:49,757 --> 00:08:54,321
Are they racing, performing stunts, or are they just trying to get from A to B?

144
00:08:54,321 --> 00:08:58,244
If getting from A to B needs to be a challenge, then maybe your game is about complex traversal.

145
00:09:02,192 --> 00:09:04,793
Here's an example of a racing sim, Forza Motorsport.

146
00:09:04,793 --> 00:09:06,514
The vehicle is on a wide road

147
00:09:06,514 --> 00:09:08,195
and will encounter long curved turns

148
00:09:08,195 --> 00:09:10,376
and the player wants to win the race

149
00:09:10,376 --> 00:09:12,977
through precision driving through corners

150
00:09:12,977 --> 00:09:14,238
and drafting behind other racers.

151
00:09:14,238 --> 00:09:17,339
On the other side of the racing spectrum,

152
00:09:17,339 --> 00:09:18,520
we've got something like Burnout,

153
00:09:18,520 --> 00:09:20,461
which is set mainly on urban roads

154
00:09:20,461 --> 00:09:22,102
with some tight turns and some jumps to navigate.

155
00:09:22,102 --> 00:09:24,383
The player could be racing against other vehicles

156
00:09:24,383 --> 00:09:26,644
or could be doing stunts to win a score attack mode.

157
00:09:26,644 --> 00:09:28,665
There's still a focus on cornering here,

158
00:09:28,665 --> 00:09:29,886
but also on boosting and stunts.

159
00:09:32,617 --> 00:09:35,459
Destiny's Sparrow is a great example of a transport vehicle.

160
00:09:35,459 --> 00:09:38,742
It's primarily designed to go across open terrain, but the player will often pilot it

161
00:09:38,742 --> 00:09:41,363
down narrow corridors, so it needs to deal with both.

162
00:09:41,363 --> 00:09:44,766
The main player intention here is to get to their target without colliding and slowing

163
00:09:44,766 --> 00:09:48,288
down too much, but it's a lower pressure than the previous examples.

164
00:09:48,288 --> 00:09:53,612
In Uncharted, the jeep provides some light puzzle mechanics when trying to navigate up

165
00:09:53,612 --> 00:09:56,955
rocky mudslides, and the challenge to the player is in picking an effective route up

166
00:09:56,955 --> 00:09:59,576
the mudslide while trying to keep the tyres in a state of grip.

167
00:10:02,084 --> 00:10:04,547
Each context has its own requirements from the vehicle.

168
00:10:04,547 --> 00:10:08,311
If we change the context, we should re-evaluate the vehicle and see if it still suits it.

169
00:10:08,311 --> 00:10:12,655
One example of this would be the Sparrow in Destiny, which I really enjoyed driving as

170
00:10:12,655 --> 00:10:16,379
a transport vehicle, but when they introduced Sparrow Racing, I didn't feel like the vehicle

171
00:10:16,379 --> 00:10:17,620
lent itself to racing very well.

172
00:10:17,620 --> 00:10:21,324
As a timed special event, this was fine, but if they wanted to build more of the game around

173
00:10:21,324 --> 00:10:24,067
racing, I'd hope that they would retune the vehicle to fit that context.

174
00:10:26,378 --> 00:10:30,259
During production, it's also easy to forget about updating a vehicle if the context shifts

175
00:10:30,259 --> 00:10:33,361
during development, particularly if that vehicle has shipped before.

176
00:10:33,361 --> 00:10:37,782
We built the speeder bike for Star Wars Battlefront 1, and because it shipped in that game, we

177
00:10:37,782 --> 00:10:40,403
made the assumption that it wouldn't take too much more work for Star Wars Battlefront 2.

178
00:10:40,403 --> 00:10:44,865
However, the new game's map topography, coupled with some tech debt, ended up meaning we had

179
00:10:44,865 --> 00:10:46,746
to rework it entirely for the sequel.

180
00:10:46,746 --> 00:10:50,607
Vehicle and environment are complementary to each other, and changing one may require

181
00:10:50,607 --> 00:10:51,328
changing the other.

182
00:10:54,012 --> 00:10:57,952
So for this next part of the talk, I'm going to use motorsport racing as a context.

183
00:10:57,952 --> 00:11:01,353
Although my examples could apply to all racing games, let's think of this as somewhere on

184
00:11:01,353 --> 00:11:06,114
the Simcade part of the spectrum, such as Forza Horizon or Need for Speed.

185
00:11:06,114 --> 00:11:09,814
There's an expectation from this context for realism, so we need our simulation to be based

186
00:11:09,814 --> 00:11:13,695
off of real physical effects and allow the player to play with grip and acceleration.

187
00:11:13,695 --> 00:11:18,656
There needs to be enough depth to the simulation for each vehicle to accelerate and turn differently,

188
00:11:18,656 --> 00:11:21,256
so our simulation needs to be detailed enough to support this accurately.

189
00:11:22,637 --> 00:11:25,718
There's an added benefit that if we use a realistic physical simulation,

190
00:11:25,718 --> 00:11:29,580
we should be able to use real-world tuning data, such as engine or tyre metrics,

191
00:11:29,580 --> 00:11:31,661
as a starting point for tuning our vehicles.

192
00:11:31,661 --> 00:11:33,622
Let's start with a trivially simple model in order to illustrate

193
00:11:33,622 --> 00:11:36,163
why detailed physics models are needed.

194
00:11:36,163 --> 00:11:40,165
This is so basic that very few gains would be served well by this physical model.

195
00:11:40,165 --> 00:11:44,007
It uses a simple frictionless rigid body with a single force

196
00:11:44,007 --> 00:11:47,669
and torque applied at the centre of mass to move it.

197
00:11:48,792 --> 00:11:52,414
The result is vehicle motion that is flat, unrealistic, and not enjoyable or interesting

198
00:11:52,414 --> 00:11:52,614
to drive.

199
00:11:52,614 --> 00:11:56,976
It's very abstract in the way the forces are simulated, so we should take some inspiration

200
00:11:56,976 --> 00:11:58,797
from real world vehicles in order to improve it.

201
00:11:58,797 --> 00:12:02,099
In the following slides, I'm going to go through how a more complex physical simulation

202
00:12:02,099 --> 00:12:04,340
could improve the physicality of our vehicle.

203
00:12:04,340 --> 00:12:09,843
I'll start by looking at a list of real world systems from motorsport vehicles, and

204
00:12:09,843 --> 00:12:13,425
then I'll pick a couple of those to go into in more depth.

205
00:12:13,425 --> 00:12:15,666
We'll look at the powertrain, and also tyre friction.

206
00:12:17,195 --> 00:12:21,756
Finally, I'll conclude this section with some footage from Need for Speed Most Wanted in

207
00:12:21,756 --> 00:12:23,857
order to show off physicality in a shipped game.

208
00:12:23,857 --> 00:12:29,818
So here are a handful of real world systems that we might want to simulate to add more

209
00:12:29,818 --> 00:12:31,679
physicality in play to our vehicle.

210
00:12:31,679 --> 00:12:35,320
This is an exhaustive list, but it should give you an idea of the sort of physical effects

211
00:12:35,320 --> 00:12:37,000
you might want to consider.

212
00:12:37,000 --> 00:12:39,941
In the following slides I'm going to go through engine, transmission and tyre friction.

213
00:12:39,941 --> 00:12:44,362
The engine and transmission are key parts of the powertrain, so I'm going to refer

214
00:12:44,362 --> 00:12:46,023
to them collectively as a powertrain system.

215
00:12:48,384 --> 00:12:51,973
Let's look at an element that we would like for our complex physical model, the powertrain.

216
00:12:51,973 --> 00:12:56,464
The purpose of the powertrain is to transmit energy from the engine into the wheels.

217
00:12:57,050 --> 00:13:01,012
In this case, the engine provides energy to the clutch, which passes it through to the

218
00:13:01,012 --> 00:13:03,993
transmission and then to the differential and wheels.

219
00:13:03,993 --> 00:13:07,155
At first glance, you might think that we could just tell the wheels to start turning at a

220
00:13:07,155 --> 00:13:09,516
set speed and we get the same result.

221
00:13:09,516 --> 00:13:11,817
However, the powertrain has an important quality.

222
00:13:11,817 --> 00:13:13,057
It is a feedback loop.

223
00:13:13,057 --> 00:13:17,319
The engine provides torque to the wheels, however the wheels will resist movement.

224
00:13:17,319 --> 00:13:20,481
Not just because the wheel itself has inertia, but because the wheel is in contact with the

225
00:13:20,481 --> 00:13:23,882
ground and needs to overcome the inertia of the whole vehicle before it starts to rotate

226
00:13:23,882 --> 00:13:24,903
at an optimal speed.

227
00:13:25,603 --> 00:13:28,504
so we get resistance feedback through the whole powertrain.

228
00:13:28,504 --> 00:13:33,225
This means that some of the energy is used to overcome this inertia, affecting the amount

229
00:13:33,225 --> 00:13:36,367
of energy that is actually used to drive the vehicle forward.

230
00:13:36,367 --> 00:13:41,888
So if we decide to model these parts of a car, we should look into each piece and see

231
00:13:41,888 --> 00:13:43,589
what we might want to put into our simulation.

232
00:13:43,589 --> 00:13:47,790
For example, your engine simulation could need authorable torque at different operating

233
00:13:47,790 --> 00:13:51,652
RPM, as well as the inertia of the engine itself, and supporting that feedback mechanism

234
00:13:51,652 --> 00:13:52,712
that we just talked about.

235
00:13:53,609 --> 00:13:56,571
Your clutch might want different operating efficiencies at different RPM.

236
00:13:56,571 --> 00:14:00,734
Your transmission could simulate numerous different gear setups and how long it takes

237
00:14:00,734 --> 00:14:02,495
to change between them.

238
00:14:02,495 --> 00:14:06,098
Finally, your tires should apply force in a realistic manner via tire friction, which

239
00:14:06,098 --> 00:14:06,999
I'll go into later.

240
00:14:06,999 --> 00:14:11,562
So we've gone away and implemented an improved powertrain.

241
00:14:11,562 --> 00:14:14,424
So let's look at what that actually gets us.

242
00:14:14,424 --> 00:14:18,387
Let's compare the simple model with the new complex powertrain version using speed-over-time

243
00:14:18,387 --> 00:14:18,807
graphs.

244
00:14:19,925 --> 00:14:23,327
On the left, we have the simple model which has a very uniform acceleration profile.

245
00:14:23,327 --> 00:14:27,510
Comparing that to the more complex powertrain, we overall see a more curved acceleration

246
00:14:27,510 --> 00:14:32,914
profile indicating that we get more acceleration at the beginning of takeoff than we do when

247
00:14:32,914 --> 00:14:33,734
we're nearing top speed.

248
00:14:33,734 --> 00:14:38,097
You'll also note that there are small bumps in the graph which represent the gear changes.

249
00:14:38,097 --> 00:14:42,420
Due to the simulation of the transmission, we have multiple gears that are more effective

250
00:14:42,420 --> 00:14:45,742
at providing acceleration at the lower of their working speed range and then starts

251
00:14:45,742 --> 00:14:48,825
to tail off as the vehicle's speed approaches the next gear's working range.

252
00:14:50,127 --> 00:14:54,049
Even just looking at a vehicle driving in a straight line, this simulation has added

253
00:14:54,049 --> 00:14:58,452
much more complexity and interesting physicality than the simple model.

254
00:14:58,452 --> 00:15:01,453
Next up, let's have a look at another system, tyre friction.

255
00:15:01,453 --> 00:15:05,416
So looking at this diagram, we have the wheel hub with hubcap for illustration in the centre

256
00:15:05,416 --> 00:15:07,317
and the rubber tyre around the outside.

257
00:15:07,317 --> 00:15:11,799
The section at the bottom of the tyre is slightly flattened under the load of the vehicle and

258
00:15:11,799 --> 00:15:13,340
is called the contact patch.

259
00:15:13,340 --> 00:15:17,002
The blue lines represent the tread and wall of the tyre and will show how it deforms as

260
00:15:17,002 --> 00:15:18,543
the wheel moves forward.

261
00:15:19,047 --> 00:15:22,954
The green dot is a specific point on the wheel hub, and the red point is the corresponding

262
00:15:22,954 --> 00:15:27,142
point where the tyre touches the ground via the contact patch.

263
00:15:27,142 --> 00:15:30,828
Now as the wheel hub rotates clockwise, if we look at the green point on the hub, it's

264
00:15:30,828 --> 00:15:31,850
moved a small amount.

265
00:15:32,555 --> 00:15:36,396
This means that the wall and tread of the tyre stretches between the green and red points.

266
00:15:36,396 --> 00:15:40,537
The elastic force of the rubber tyre now tries to spring back into its rest position, moving

267
00:15:40,537 --> 00:15:44,158
the red point on the tyre surface towards the left, even though it remains in contact

268
00:15:44,158 --> 00:15:45,018
with the ground.

269
00:15:45,018 --> 00:15:48,919
This applies an equal force back onto the wheel hub, which pushes the whole vehicle

270
00:15:48,919 --> 00:15:49,359
forward slightly.

271
00:15:49,359 --> 00:15:53,201
This happens continually until the vehicle is travelling in a speed which matches the

272
00:15:53,201 --> 00:15:54,441
rotational velocity of the tyre.

273
00:15:56,341 --> 00:16:00,003
Now that we understand the physical behaviour we're trying to simulate, we need a simulation model.

274
00:16:00,003 --> 00:16:03,305
The dynamics of how much force is applied under what conditions is incredibly complex,

275
00:16:03,305 --> 00:16:06,747
and there are many models that can be used to simulate it.

276
00:16:06,747 --> 00:16:08,368
In this case I'm going to use the Pacheco model.

277
00:16:08,368 --> 00:16:13,832
In the Pacheco model, the formula takes the rotation speed of the wheel and relative velocity of the road.

278
00:16:13,832 --> 00:16:18,615
The slip angle is the angle between the direction of the ground velocity and the direction of the wheel hub.

279
00:16:18,615 --> 00:16:21,396
The Pacheco formula produces two forces.

280
00:16:21,396 --> 00:16:25,499
The longitudinal force, which drives the vehicle forward, and the lateral force, which turns the vehicle.

281
00:16:26,885 --> 00:16:33,671
During acceleration, the road speed is lower than the wheel speed, so we get longitudinal slip, which maps to a particular force in this graph.

282
00:16:33,671 --> 00:16:38,855
The right-hand side is when the vehicle is accelerating, and the left-hand side is when it's braking.

283
00:16:38,855 --> 00:16:45,702
This red graph is the lateral force applied under a particular slip angle, so represents the turning force applied during cornering.

284
00:16:45,702 --> 00:16:52,428
What's interesting about these graphs is that each of them has a peak, which is where the most effective acceleration or cornering behaviour is found.

285
00:16:53,133 --> 00:16:56,715
This is what gives us the effect of playing with the limits of grip.

286
00:16:56,715 --> 00:17:00,938
This means that the player has to try and hit these peaks in order to be as effective as possible during a race.

287
00:17:00,938 --> 00:17:04,020
This adds a lot of depth and mastery, but let's look at what this actually results in.

288
00:17:06,274 --> 00:17:09,036
So let's have a look at how the physical simulation ends up looking in the final game.

289
00:17:09,036 --> 00:17:12,537
Pay close attention to the way the chassis of the vehicle rocks back and forth during

290
00:17:12,537 --> 00:17:14,539
gear changes due to the simulation of the drivetrain.

291
00:17:14,539 --> 00:17:18,781
Watch how the body rolls to the side during corners due to the simulation of tyre friction

292
00:17:18,781 --> 00:17:19,601
and suspension.

293
00:17:19,601 --> 00:17:23,984
The depth of the simulation shows through and gives the player precise control and physical

294
00:17:23,984 --> 00:17:24,724
play to master.

295
00:17:50,048 --> 00:17:53,932
So, now that we have our physical simulation sorted, and we've got an accurate, deep simulation

296
00:17:53,932 --> 00:17:57,775
of the desired vehicle, we should look at input and assists in order to give the game

297
00:17:57,775 --> 00:18:01,679
the feel we want and get the balance between arcade and simulation that we're aiming for.

298
00:18:01,679 --> 00:18:05,102
In this section, I'm going to talk through drifting, which in case you didn't know, is

299
00:18:05,102 --> 00:18:08,886
where we force the rear wheels of a tyre to brake traction so the vehicle drifts sideways

300
00:18:08,886 --> 00:18:11,008
in order to maintain momentum whilst in a turn.

301
00:18:11,449 --> 00:18:19,199
Drifting is something that is possible but tricky to achieve in real life, so in Criterion games we apply several assists to help players achieve a long, satisfying drift.

302
00:18:19,199 --> 00:18:21,261
So I'll use that as an example in the following slides.

303
00:18:23,359 --> 00:18:24,939
Let's start by thinking about the input layer.

304
00:18:24,939 --> 00:18:30,040
This is effectively the control mapping and any modifications you might do to those control inputs.

305
00:18:30,040 --> 00:18:35,681
These control inputs are then sent across to the simulation where it turns the wheels or drives the engine in the simulation.

306
00:18:35,681 --> 00:18:40,262
However, the important point to take away here is that you have assists that might work on either side.

307
00:18:40,262 --> 00:18:46,223
For example, the input layer level assist might be to detect a particular button combo to trigger drift mode,

308
00:18:46,223 --> 00:18:50,544
and a simulation level assist might be to apply increased physical damping whilst in this drift mode.

309
00:18:53,430 --> 00:18:56,632
So we know where we might put our assists, but what do we want to achieve by adding some?

310
00:18:56,632 --> 00:19:00,814
Once you've got your input layer communicating with the simulation, you'll have something

311
00:19:00,814 --> 00:19:03,135
playable and you can then review it and see what needs to change.

312
00:19:03,135 --> 00:19:07,136
You might find that the input complexity is too high and you might want to reduce it.

313
00:19:07,136 --> 00:19:11,779
It could also be to reduce the simulation feel and move towards more of the arcade side

314
00:19:11,779 --> 00:19:12,879
of the spectrum.

315
00:19:12,879 --> 00:19:16,881
You might want to take existing forces or effects in the simulation and emphasize them,

316
00:19:16,881 --> 00:19:18,482
such as making drifts last longer.

317
00:19:19,853 --> 00:19:24,155
A detailed simulation can also bring unwanted side effects, such as extreme slowdown on

318
00:19:24,155 --> 00:19:26,516
uneven terrain, or even collision hitching.

319
00:19:26,516 --> 00:19:28,697
This might be something you want to target with assists.

320
00:19:28,697 --> 00:19:33,739
It could also be something which conveys the game state back to the player in a more intuitive

321
00:19:33,739 --> 00:19:35,960
or obvious manner so that the learning curve is easier.

322
00:19:35,960 --> 00:19:41,203
Even though most of these examples are for your intended default experience, you could

323
00:19:41,203 --> 00:19:45,504
also use assists as accessibility options to make your game playable by a wider range

324
00:19:45,504 --> 00:19:45,945
of players.

325
00:19:48,912 --> 00:19:51,793
Now that we've decided what we want to achieve through our assists, let's look at some of

326
00:19:51,793 --> 00:19:52,374
the different types.

327
00:19:52,374 --> 00:19:55,595
I've divided assists up into five categories.

328
00:19:55,595 --> 00:19:59,537
Player Intention, Driver, Physical, Real World, and Feedback Assists.

329
00:19:59,537 --> 00:20:03,158
I'm going to talk through each of these in the next few slides.

330
00:20:03,158 --> 00:20:07,360
These aren't hard templates, but more a thought exercise that might help you think what parts

331
00:20:07,360 --> 00:20:08,341
of the game to target.

332
00:20:08,341 --> 00:20:11,162
When we were building the drift mechanics in Need for Speed, we took our simulation,

333
00:20:11,162 --> 00:20:15,584
which had realistic drifting behaviour, and used assists to make it more stable, easier

334
00:20:15,584 --> 00:20:18,085
to sustain, and maintain more of your speed than in real life.

335
00:20:18,925 --> 00:20:23,066
To get this to feel great, we use multiple types of assists to achieve this, and I'll

336
00:20:23,066 --> 00:20:26,527
use drifting as an example when talking through these categories.

337
00:20:26,527 --> 00:20:30,128
The first type of assist is the player intention assist.

338
00:20:30,128 --> 00:20:34,309
This is an assist at the input level which looks at the player's input and tries to work

339
00:20:34,309 --> 00:20:37,090
out whether the player's intention is different from the normal mapping.

340
00:20:37,090 --> 00:20:40,611
It can look at the current simulation to provide context for what the player's intention might

341
00:20:40,611 --> 00:20:40,671
be.

342
00:20:41,852 --> 00:20:43,856
An example is using a brake tap to enter drift.

343
00:20:43,856 --> 00:20:46,961
If you're driving straight ahead and tap the brake,

344
00:20:46,961 --> 00:20:48,945
then you probably want to slow down.

345
00:20:48,945 --> 00:20:51,209
If you're turning heavily when you tap the brake,

346
00:20:51,209 --> 00:20:52,611
you probably want to enter drift

347
00:20:52,611 --> 00:20:54,014
in order to turn more aggressively.

348
00:20:56,581 --> 00:21:00,762
Next up is the notion of driver assist, which can simulate the experience and muscle memory

349
00:21:00,762 --> 00:21:01,883
of a professional driver.

350
00:21:01,883 --> 00:21:05,704
An example of how this is used in drifts is in balancing your torque.

351
00:21:05,704 --> 00:21:09,625
When you're drifting in a real car, the tires are trying to twist themselves to match the

352
00:21:09,625 --> 00:21:12,946
direction the vehicle is drifting, and the driver is able to feel this through the steering

353
00:21:12,946 --> 00:21:15,507
wheel and adjust accordingly to extend the drift.

354
00:21:16,087 --> 00:21:27,718
On a console pad, the analog stick doesn't really lend itself to this, so we emulate this behavior by re-centering the steering input so that zero input equates to keep drifting at this angle rather than meaning straighten up the wheels.

355
00:21:27,718 --> 00:21:32,443
This is absolutely key for a controllable drift and gives the player the level of control an Ace driver could achieve.

356
00:21:35,208 --> 00:21:39,695
We also apply physical assists, which are forces that we apply directly to the vehicle's

357
00:21:39,695 --> 00:21:41,077
physics simulation.

358
00:21:41,077 --> 00:21:44,842
We take existing qualities of the simulation that we want to feel hyper-real and emphasize

359
00:21:44,842 --> 00:21:46,044
what's there.

360
00:21:46,044 --> 00:21:49,950
We want to look at the forces applied by the simulation that are hindering the effect we

361
00:21:49,950 --> 00:21:50,651
want and counteract them.

362
00:21:50,931 --> 00:21:56,493
For example, if you're in a deep drift, a component of the tyre friction is opposing motion and slowing the vehicle down.

363
00:21:56,493 --> 00:22:01,014
We want our drifts to maintain speed around corners, so we calculate the magnitude of the frictional force slowing us down

364
00:22:01,014 --> 00:22:05,856
and reapply that force in the direction of the vehicle's velocity in order to minimize the speed loss,

365
00:22:05,856 --> 00:22:07,956
or allow our designers to tune how much speed loss they desire.

366
00:22:11,000 --> 00:22:15,063
Real-world assists are where we might simulate part of a vehicle which is available in real life,

367
00:22:15,063 --> 00:22:17,485
and we can manipulate it to achieve the desired effect.

368
00:22:17,485 --> 00:22:22,008
For example, we might want an anti-lock braking system to allow players to brake effectively

369
00:22:22,008 --> 00:22:24,049
without having to carefully tap the triggers.

370
00:22:24,049 --> 00:22:30,054
When we start drifting, we can turn off ABS to allow the back wheels to spin and lose traction,

371
00:22:30,054 --> 00:22:30,614
entering the drift quickly.

372
00:22:30,614 --> 00:22:34,537
When we detect that the player is trying to exit the drift, we can then turn ABS back on

373
00:22:34,537 --> 00:22:37,019
in order to allow fast acceleration out of the drift.

374
00:22:40,385 --> 00:22:43,988
Finally, we've got feedback assists, which don't actually affect the handling, but are

375
00:22:43,988 --> 00:22:47,651
assists which help the player understand the simulation better and show UI to help guide

376
00:22:47,651 --> 00:22:48,052
the player.

377
00:22:48,052 --> 00:22:52,696
Wherever possible, we feedback the simulation from real-world sources like the strain of

378
00:22:52,696 --> 00:22:56,559
the engine or the squeal of the tyres, but feedback assists are specifically things you

379
00:22:56,559 --> 00:22:57,700
wouldn't see in real life.

380
00:22:57,700 --> 00:23:02,104
An example of this is the Forza braking line, which looks at the upcoming turn and highlights

381
00:23:02,104 --> 00:23:04,826
the line red if your tyres are going to lose traction and you want to slow down.

382
00:23:08,280 --> 00:23:15,742
Seeing as assists can influence both the controls and the physical simulation, getting the feel of them right is just as important as tuning your physical simulation itself.

383
00:23:15,742 --> 00:23:23,485
Depending on how you engineer and tune them, you could end up disguising all that great simulation work, so here are a few tips to bring out the physicality when writing assists.

384
00:23:23,485 --> 00:23:27,567
Firstly, try to tune them to be as subtle as possible while still achieving the desired effect.

385
00:23:27,567 --> 00:23:33,389
It's often easy to have very strong stabilisation forces which help the player effectively, but wipe over all your great simulation work.

386
00:23:34,798 --> 00:23:38,261
Rather than switching your behaviour on or off based on a binary condition, try to fade

387
00:23:38,261 --> 00:23:40,983
them in or out over some parameter, even if that parameter is time.

388
00:23:40,983 --> 00:23:45,447
This means that it is less obvious to the player that they're being assisted and adds

389
00:23:45,447 --> 00:23:45,967
some nuance to it.

390
00:23:45,967 --> 00:23:51,592
Think about where the optimal assist strength is and allow the player to gradually learn

391
00:23:51,592 --> 00:23:54,034
how to find the perfect balance, giving it depth and mastery.

392
00:23:54,034 --> 00:23:58,197
The game should feed this back to the player in order to allow them to tell if they're

393
00:23:58,197 --> 00:23:58,918
doing better or not.

394
00:23:59,962 --> 00:24:03,568
Also, as a programmer, try to make sure you add in plenty of helpful debug visualizations

395
00:24:03,568 --> 00:24:09,298
in order to help your designers understand the systems by being able to see what physical

396
00:24:09,298 --> 00:24:12,905
effect their parameter changes have and tune them as well as they possibly can.

397
00:24:14,474 --> 00:24:19,921
If possible, set up auto tests for your vehicles and their expected top speeds, accelerations,

398
00:24:19,921 --> 00:24:24,146
etc. as this can help catch unexpected changes or your physical effects affecting vehicle

399
00:24:24,146 --> 00:24:25,507
performance.

400
00:24:25,507 --> 00:24:30,833
We had an issue on Most Wanted where a vehicle artist adjusted the size of a wheel and this

401
00:24:30,833 --> 00:24:33,957
affected the top speed of the vehicle, but thankfully this was caught by an auto test

402
00:24:33,957 --> 00:24:34,818
and fixed quickly.

403
00:24:38,659 --> 00:24:43,022
So, we've got our physics and our assists working nicely together.

404
00:24:43,022 --> 00:24:48,287
Now we need to feed this back to the player effectively through camera behavior.

405
00:24:50,718 --> 00:24:53,782
I wanted to start this section off with a phrase that we use a criterion a lot, camera

406
00:24:53,782 --> 00:24:54,523
is handling.

407
00:24:54,523 --> 00:24:58,247
It doesn't matter how great your simulation and assists are if your camera doesn't feed

408
00:24:58,247 --> 00:24:59,809
it back to the player well.

409
00:24:59,809 --> 00:25:03,713
A stiff or loose camera can massively change the feel of a vehicle, so should be considered

410
00:25:03,713 --> 00:25:04,674
part of the handling.

411
00:25:04,674 --> 00:25:09,360
We have the same designers that tune the handling parameters on a vehicle also tune the camera

412
00:25:09,360 --> 00:25:11,342
parameters because they are so intrinsically linked.

413
00:25:14,270 --> 00:25:18,493
There are two fundamentally different approaches you can take when starting to think about vehicle cameras.

414
00:25:18,493 --> 00:25:21,696
One is a camera-led system where the player input turns the camera,

415
00:25:21,696 --> 00:25:25,880
and then there's a layer that interprets the camera direction and passes that through to the vehicle controls.

416
00:25:25,880 --> 00:25:30,664
Alternatively, a vehicle-led system is where the player input controls the vehicle directly,

417
00:25:30,664 --> 00:25:35,528
and then the camera follows the vehicle as a separate system.

418
00:25:35,528 --> 00:25:42,254
Camera-led systems usually match the shooter input paradigm with aim and pitch on the right stick.

419
00:25:42,892 --> 00:25:47,172
Generally it allows the player to point the camera accurately at something, but at the loss of handling feel and precision.

420
00:25:47,172 --> 00:25:53,834
This can be good for games where the primary vehicle gameplay is aiming and shooting a weapon, and the driving component is secondary.

421
00:25:53,834 --> 00:25:56,894
An example of this type of camera is the Mk5 tank in Battlefield 1.

422
00:25:56,894 --> 00:26:04,256
This video shows me rotating the camera separately to the vehicle using the right stick, then holding the left stick forward in order to move towards where the camera is pointing.

423
00:26:04,256 --> 00:26:10,397
There's an intelligent layer that decides how to move the tracks of the tank in order to make it point towards the camera, rather than direct control.

424
00:26:11,873 --> 00:26:15,776
One problem with a layer like this is that it can add some ambiguity, which means you

425
00:26:15,776 --> 00:26:19,439
can get some unexpected motion, particularly when trying to reverse a vehicle with camera-led

426
00:26:19,439 --> 00:26:19,940
handling.

427
00:26:19,940 --> 00:26:27,285
Vehicle-led camera are usually the default option for racing games and usually match

428
00:26:27,285 --> 00:26:31,188
a driving input paradigm, where steering is on the left stick and the camera follows the

429
00:26:31,188 --> 00:26:32,149
vehicle's motion.

430
00:26:32,485 --> 00:26:36,047
This gives a more direct control feel and can allow greater driving precision and camera

431
00:26:36,047 --> 00:26:39,749
feedback but makes it harder for the player to quickly move the camera to look behind

432
00:26:39,749 --> 00:26:40,629
them.

433
00:26:40,629 --> 00:26:44,691
These types of cameras are often accompanied by a look behind camera button in order to

434
00:26:44,691 --> 00:26:46,392
compensate for this.

435
00:26:46,392 --> 00:26:49,873
Here's an example of one of the transport vehicles that Criterion worked on for Battlefield

436
00:26:49,873 --> 00:26:54,035
1, the Armoured Car, which we decided should use a vehicle-led camera for best game feel.

437
00:26:55,073 --> 00:26:59,155
At Criterion we almost always use vehicle-led cameras due to the precise handling feel we

438
00:26:59,155 --> 00:27:00,155
require from our games.

439
00:27:00,155 --> 00:27:03,977
I'm going to continue this section by looking at vehicle-led cameras in more detail.

440
00:27:03,977 --> 00:27:12,020
So a good camera should feedback important game state to the player, such as camera angle

441
00:27:12,020 --> 00:27:12,700
while drifting.

442
00:27:12,700 --> 00:27:17,421
It will respond to player needs, ensuring that the camera is focused on what the player

443
00:27:17,421 --> 00:27:19,202
needs to see and doesn't obstruct line of sight.

444
00:27:19,202 --> 00:27:23,764
The camera should sell physicality by using the physical simulation to complement the

445
00:27:23,764 --> 00:27:24,464
motion of the vehicle.

446
00:27:27,733 --> 00:27:32,338
So let's look at a rigid camera, which is locked behind the vehicle and points directly down the front of the vehicle.

447
00:27:32,338 --> 00:27:35,921
This is a camera with no behaviour and this is the simplest possible starting point.

448
00:27:35,921 --> 00:27:39,845
The vehicle's position is effectively locked on screen,

449
00:27:39,845 --> 00:27:46,372
which means that any of the physicality from the simulation is shown through the background of the scene rolling and pitching as the vehicle drives,

450
00:27:46,372 --> 00:27:49,996
which can be quite disorientating and makes it difficult to focus on game objectives.

451
00:27:58,929 --> 00:28:02,313
To improve this, we should start by conveying the motion of the vehicle by moving it in

452
00:28:02,313 --> 00:28:03,856
relation to the frame of the screen.

453
00:28:03,856 --> 00:28:07,961
If the vehicle is in a deep right turn, we'd expect that the camera would lag behind slightly

454
00:28:07,961 --> 00:28:10,004
and the vehicle would shift to the left of the screen.

455
00:28:10,865 --> 00:28:23,735
In order to achieve this, we use a sprung camera system, whereby we set a target point for the camera to tend towards, but allow some motion in all directions, with a force pulling the camera to the target position, proportionally to how far away it is from the target.

456
00:28:23,735 --> 00:28:27,818
We can tune this per axis to allow for certain behaviours to convey differently on screen.

457
00:28:27,818 --> 00:28:32,961
For example, we might want lots of sideways motion when turning, but less forward and backward motion when accelerating and decelerating.

458
00:28:34,875 --> 00:28:39,116
In conjunction with pulling the camera towards a target, we also point the camera at the look-ahead target,

459
00:28:39,116 --> 00:28:42,617
which is fixed in front of the vehicle and shows the player where the vehicle is heading.

460
00:28:42,617 --> 00:28:47,958
It's also sometimes worth considering using velocity extrapolation on your look-ahead target

461
00:28:47,958 --> 00:28:53,400
in order to make your camera look into turns and keep the player's focus near the centre of the screen when turning.

462
00:28:53,400 --> 00:28:55,620
Let's take a look at what that looks like.

463
00:28:55,620 --> 00:29:03,062
So note throughout all these videos, the physical simulation and handling are identical.

464
00:29:03,062 --> 00:29:04,582
All we're changing is the camera.

465
00:29:10,175 --> 00:29:12,977
So, as you can see, the vehicle is much more dynamic on screen.

466
00:29:12,977 --> 00:29:22,480
You can actually see the sides of it, as well as the motion of the vehicle when travelling over bumpy terrain.

467
00:29:22,480 --> 00:29:29,103
There are three key parameters we use when tuning this type of camera.

468
00:29:29,103 --> 00:29:35,786
The most important one is convergence, which is how far we move the camera towards the target each sim frame.

469
00:29:35,786 --> 00:29:39,107
The higher the value, the tighter the camera is to the back of the vehicle.

470
00:29:39,953 --> 00:29:44,377
Then we have momentum, which accelerates the camera in the direction it's already traveling,

471
00:29:44,377 --> 00:29:48,381
and damping, which is used to stop the camera overshooting the target and resulting in oscillations.

472
00:29:48,381 --> 00:29:53,746
In order to demonstrate the different types of feel that different convergence parameters

473
00:29:53,746 --> 00:29:56,508
can get you, here's an example of strong convergence.

474
00:29:56,508 --> 00:30:00,292
Notice that it's very similar to the rigid camera example.

475
00:30:00,292 --> 00:30:04,576
The vehicle isn't moving too much on screen, it doesn't feel very physical.

476
00:30:11,944 --> 00:30:14,725
Switching to a weak convergence, we see a lot more motion in the frame.

477
00:30:14,725 --> 00:30:17,527
The vehicle feels dynamic and alive.

478
00:30:17,527 --> 00:30:19,308
However, because the convergence is so weak,

479
00:30:19,308 --> 00:30:22,330
the vehicle appears to be pointing off screen during large turns.

480
00:30:22,330 --> 00:30:25,392
This can make it tricky to control as you can't see where you're going.

481
00:30:25,392 --> 00:30:27,574
In this situation, we could either tighten up the camera

482
00:30:27,574 --> 00:30:30,095
or add velocity extrapolation to our look ahead target

483
00:30:30,095 --> 00:30:32,777
so that the camera looks towards the vehicle's direction more effectively.

484
00:30:35,688 --> 00:30:40,632
The camera also needs to sell the physicality of the vehicle and feedback what the simulation is doing.

485
00:30:40,632 --> 00:30:46,778
A good example of this is the landing camera, when the vehicle comes off a large jump and then hits the ground so hard that the suspension bottoms out.

486
00:30:46,778 --> 00:30:54,405
We wanted to convey this with a large camera movement that doesn't obscure the road ahead for long, but still sells that impact.

487
00:30:54,405 --> 00:30:55,866
We use some camera shake when we land.

488
00:30:55,866 --> 00:31:02,092
Plus, this is a good example of how momentum and damping forces affect the camera to give it an exaggerated behavior when landing.

489
00:31:05,420 --> 00:31:08,942
So if we don't do anything special to the camera, the Sprung camera still gives you some feedback.

490
00:31:08,942 --> 00:31:13,965
This isn't too bad and you could probably ship this, but let's go the extra mile and try and improve it.

491
00:31:13,965 --> 00:31:25,952
Let's add some camera shake on landing, when we detect that all four wheels are on the ground after travelling downwards quickly.

492
00:31:25,952 --> 00:31:30,655
This camera shake that I'm about to show you is 30Hz in oscillation in pitch and roll for 0.5 seconds.

493
00:31:30,655 --> 00:31:32,716
This helps a little bit, but we can do better.

494
00:31:40,092 --> 00:31:44,018
Let's reduce the damping on our sprung camera so that the momentum term carries it further

495
00:31:44,018 --> 00:31:47,243
downwards than the target, giving us a much better sense of the impact.

496
00:31:47,243 --> 00:31:50,368
This should make our impact much more impressive, exciting and physical.

497
00:32:04,553 --> 00:32:08,936
So, how does our Battlefield 1 work stack up to the camera requirements we set ourselves earlier?

498
00:32:08,936 --> 00:32:14,839
Well, we feed the simulation back to the player by using the camera convergence to affect the vehicle's position on screen,

499
00:32:14,839 --> 00:32:17,600
allowing the player to tell the turning radius of the vehicle.

500
00:32:17,600 --> 00:32:22,943
The camera responds to player needs by looking into turns, letting the player see where they're going.

501
00:32:22,943 --> 00:32:28,225
We sell physicality by giving special attention to the landing camera, making the vehicle feel extra heavy and solid.

502
00:32:31,271 --> 00:32:32,632
Here's another look at the armored car,

503
00:32:32,632 --> 00:32:34,695
illustrating all those previous points,

504
00:32:34,695 --> 00:32:37,958
but also gives you a chance to hear the audio treatment

505
00:32:37,958 --> 00:32:39,860
and see the VFX, which adds even more

506
00:32:39,860 --> 00:32:40,881
on top of our handling work.

507
00:33:20,305 --> 00:33:27,832
So, in this final section, I'm going to show how we applied these principles when making Starfighters in Star Wars Battlefront II.

508
00:33:27,832 --> 00:33:36,219
When we started looking at what we could bring to Star Wars Battlefront II, we decided on the overall direction of wanting players to feel like an ace pilot, and give them that fantasy when controlling the Starfighters.

509
00:33:36,219 --> 00:33:45,407
After playing some Battlefront I, we felt like we could help improve the handling significantly, and we wanted this to go alongside a game mode that was much larger scale than in that game.

510
00:33:48,423 --> 00:33:54,045
This is the original fighter squadron mode from Battlefront 1, where players fought in X-Wings and TIE fighters above the surface of planets.

511
00:33:54,045 --> 00:34:00,548
The main shooting mechanic here was to hold left trigger to lock onto anything within a wide cone in the middle of the screen and right trigger to fire.

512
00:34:00,548 --> 00:34:03,208
Shots would then be auto-aimed as long as you had a lock-on.

513
00:34:03,208 --> 00:34:15,713
You may also be able to tell from this video that Battlefront 1 used a camera-led handling model, where the camera moves first and then the vehicle catches up.

514
00:34:25,356 --> 00:34:29,178
So when we started to look at how we could improve over Battlefront 1, we looked at player

515
00:34:29,178 --> 00:34:33,561
feedback. Players really enjoyed getting to play out their Star Wars fantasies, plus the

516
00:34:33,561 --> 00:34:37,764
gameplay was very accessible to a wide audience. However, there was a general feeling of lack

517
00:34:37,764 --> 00:34:41,726
of depth around the auto-aim shooting, that it was difficult to control and the starfighters

518
00:34:41,726 --> 00:34:45,769
felt too much like toys on a string, or when players really wanted manual roll control.

519
00:34:49,450 --> 00:34:52,190
So we took each of those points and made sure we focused on fixing them,

520
00:34:52,190 --> 00:34:55,191
with aiming closer to that of a shooter, handling that felt precise,

521
00:34:55,191 --> 00:34:58,191
and a camera that showed off the physicality of the vehicles.

522
00:34:58,191 --> 00:34:59,732
And of course, roll control.

523
00:34:59,732 --> 00:35:03,812
This was a great chance for us to apply the vehicle design philosophy when designing our Starfighters.

524
00:35:03,812 --> 00:35:09,054
Here's some gameplay of what we ended up with on Battlefront II's Starfighter Assault Mode.

525
00:35:09,054 --> 00:35:14,615
The cruisers are down. Scanning for additional defences.

526
00:35:43,065 --> 00:35:46,728
So as for reviews, we got a lot of good responses around the Starfighter work we did,

527
00:35:46,728 --> 00:35:51,051
with critics highlighting the handling and shooting being a huge improvement over the first game.

528
00:35:51,051 --> 00:35:59,017
So now we know how it turned out, let's see how we used each section of the vehicle design philosophy during development.

529
00:36:01,719 --> 00:36:04,961
When looking at our balance between arcade and simulation, we looked at our target market

530
00:36:04,961 --> 00:36:08,842
which consisted of both fans who were casual gamers and wanted an accessible experience,

531
00:36:08,842 --> 00:36:12,504
but also hardcore players who expected something more like a flight sim to live out their pilot

532
00:36:12,504 --> 00:36:13,325
fantasies.

533
00:36:13,325 --> 00:36:17,687
We ended up deciding to balance this by having intuitive pitch-in-your-controls like you

534
00:36:17,687 --> 00:36:21,789
might find in an arcade-style game that give players full role control and allow players

535
00:36:21,789 --> 00:36:26,011
to execute their own invasive manoeuvres rather than having them triggered as cutscenes on

536
00:36:26,011 --> 00:36:27,771
the D-pad like in Battlefront 1.

537
00:36:29,607 --> 00:36:33,352
We also decided to go with a shooter input paradigm with flight and aiming on the right stick

538
00:36:33,352 --> 00:36:37,698
as it would be more intuitive to players coming from a shooter background and also match the rest of the game.

539
00:36:37,698 --> 00:36:42,844
However, we know that anyone expecting a flight sim style control setup would find this quite jarring

540
00:36:42,844 --> 00:36:45,327
so we made sure there was an option to remap the analog sticks fully.

541
00:36:47,714 --> 00:36:50,995
When thinking about how we were going to simulate our starfighters, we looked at the real-world

542
00:36:50,995 --> 00:36:54,657
analogue of fighter planes, which were the original inspiration for Star Wars' dogfighting

543
00:36:54,657 --> 00:36:58,879
scenes, which is why in Star Wars, X-Wings bank into turns like planes, and crashing

544
00:36:58,879 --> 00:37:00,539
Star Destroyers fall downwards.

545
00:37:00,539 --> 00:37:06,022
Thinking of fighter planes, we looked at airfoils, which is a thing that keeps planes in the

546
00:37:06,022 --> 00:37:09,843
air, but also gives secondary effects such as altitude loss when turning.

547
00:37:09,843 --> 00:37:12,844
We decided this didn't really match with what we expected from a starfighter, so we

548
00:37:12,844 --> 00:37:14,805
went with a simple anti-grav simulation instead.

549
00:37:16,259 --> 00:37:19,562
We did however one that banked turns from a fighter plane,

550
00:37:19,562 --> 00:37:22,565
so we simulated this with a horizon steering setup

551
00:37:22,565 --> 00:37:24,947
where the controls remain locked to the horizon,

552
00:37:24,947 --> 00:37:27,149
but the starfighter banks on screen.

553
00:37:27,149 --> 00:37:28,691
We used a simple engine thrust force

554
00:37:28,691 --> 00:37:30,913
instead of a more complex prop or jet engine,

555
00:37:30,913 --> 00:37:32,134
as we didn't feel like we really needed

556
00:37:32,134 --> 00:37:34,676
the play of airflow in space where there isn't any air.

557
00:37:36,978 --> 00:37:41,502
When in a heavy turn, the aerodynamic drag of a plane can affect how aggressively it can turn.

558
00:37:41,502 --> 00:37:45,945
We ended up doing something similar with an air brake that allowed experienced players

559
00:37:45,945 --> 00:37:50,349
to pull the air brake when turning to get a temporarily reduced turn radius.

560
00:37:50,349 --> 00:37:53,231
Even though there's no physical justification for it, it ended up feeling right,

561
00:37:53,231 --> 00:37:55,753
and it was something that we investigated in a prototype

562
00:37:55,753 --> 00:37:58,035
and playtested it until we were convinced we wanted it in production.

563
00:38:01,582 --> 00:38:06,028
In order to get the feeling of bank turns, we used horizon steering, which is quite a simple concept,

564
00:38:06,028 --> 00:38:09,333
where we have two separate frames which represent an orientation.

565
00:38:09,333 --> 00:38:11,876
In practice, this could be a matrix or a quaternion.

566
00:38:13,152 --> 00:38:17,154
The control frame stays flat when the player yaws, which means that it points in the direction

567
00:38:17,154 --> 00:38:21,396
of flight, following the pitch of the starfighter, but allows the yaw of the ship to be expressed

568
00:38:21,396 --> 00:38:23,657
in the direction it appears to the player on screen.

569
00:38:23,657 --> 00:38:27,459
When the player turns left and right on the stick, the control frame stays flat against

570
00:38:27,459 --> 00:38:31,441
the horizon, but the vehicle's body frame is rolled into the turn, giving the feeling

571
00:38:31,441 --> 00:38:32,621
of banked turns we wanted.

572
00:38:33,222 --> 00:38:37,504
Looking at the video on the right, you can see the Starfighter banking, but the camera is staying flat,

573
00:38:37,504 --> 00:38:41,447
allowing the player to intuitively control the fighter's direction.

574
00:38:41,447 --> 00:38:46,931
If the Starfighter was pitched up, then the Starfighter would rotate on this newly oriented horizon,

575
00:38:46,931 --> 00:38:50,993
so if we were pointing directly upwards and started turning left or right,

576
00:38:50,993 --> 00:38:55,496
we would end up pointing downwards in the local pitch horizon, rather than fading to the world's horizon.

577
00:38:55,496 --> 00:38:57,117
So let's move on to the camera.

578
00:38:57,117 --> 00:39:02,141
Initially, we wanted to work out whether we should use a camera-led or vehicle-led system.

579
00:39:02,915 --> 00:39:06,578
We initially thought that a camera-led system would allow for the precise aiming that we wanted.

580
00:39:06,578 --> 00:39:11,782
However, this was the system that Battlefront 1 used, and that didn't have the sort of precision that we'd hoped for.

581
00:39:11,782 --> 00:39:18,867
Using a vehicle-led camera instead would allow us greater flight precision, which was one of our initial goals, and improved physicality.

582
00:39:18,867 --> 00:39:25,132
For that reason, we opted for a vehicle-led camera, which is a sprung camera, in a similar style to what we did on Battlefield 1.

583
00:39:29,174 --> 00:39:33,081
So thinking about the approaches we learn about in the camera section, we've got a vehicle-led

584
00:39:33,081 --> 00:39:37,288
camera that looks into the direction of travel and allows the Starfighter to move significantly

585
00:39:37,288 --> 00:39:38,350
but predictably on screen.

586
00:39:51,343 --> 00:39:54,785
One problem we encountered while authoring Camera Shake on Battlefront 2 was that it

587
00:39:54,785 --> 00:39:57,146
was really hard to aim while the camera was shaking.

588
00:39:57,146 --> 00:40:00,708
This seems pretty obvious because you're aiming down the camera, so of course shaking

589
00:40:00,708 --> 00:40:01,529
it makes things harder.

590
00:40:01,529 --> 00:40:05,510
However, we wanted to try and find a way to convey the same camera shake feeling whilst

591
00:40:05,510 --> 00:40:06,751
maintaining aim precision.

592
00:40:06,751 --> 00:40:10,953
Conventional camera shake works by rotating the camera around its centre point, pitch

593
00:40:10,953 --> 00:40:14,695
you're rolling by X degrees, which means that if your focus point is in the distance,

594
00:40:14,695 --> 00:40:15,936
it moves a lot on screen.

595
00:40:16,696 --> 00:40:22,359
To combat this, we rode an orbit camera shake system, which would shake the camera by moving it laterally as well as rotating it,

596
00:40:22,359 --> 00:40:25,861
keeping the camera pointed at a particular point far away towards the horizon.

597
00:40:25,861 --> 00:40:29,923
This meant that things in the foreground, such as the vehicle, would move around on screen,

598
00:40:29,923 --> 00:40:33,925
but distant targets we were aiming at would remain stable.

599
00:40:33,925 --> 00:40:38,567
In this video, keep an eye on the pillar in the distance.

600
00:40:38,567 --> 00:40:41,909
Notice that the pillar, crosshair, and vehicle are all shaking around significantly.

601
00:40:45,128 --> 00:40:48,512
When we move over to the orbit camera shake, only the vehicle is shaking,

602
00:40:48,512 --> 00:40:52,437
meaning that the player feels like they're being buffeted around but can still aim effectively.

603
00:40:52,437 --> 00:40:59,205
It's easy to imagine blending these two effects together to allow our designers to tune just how much shake they want for near and far objects,

604
00:40:59,205 --> 00:41:02,889
but in our case we opted for distant aim stability due to our game's focus on shooting.

605
00:41:06,350 --> 00:41:09,611
Seeing as we have a strong sense of up in our levels, we found that players would end

606
00:41:09,611 --> 00:41:13,692
up upside down quite frequently, even if they weren't using the roll control.

607
00:41:13,692 --> 00:41:17,193
In order to help alleviate this, we added some auto-rolling, which would kick in when

608
00:41:17,193 --> 00:41:18,494
the sticks are centred.

609
00:41:18,494 --> 00:41:22,375
The idea being that return to centre is a player intention to fly straight, so if that's

610
00:41:22,375 --> 00:41:26,316
always accompanied by rolling to the horizon, players won't find it too obtrusive.

611
00:41:26,316 --> 00:41:30,757
It's also a smaller, more subtle force when you're almost level, again trying to be as

612
00:41:30,757 --> 00:41:31,938
unobtrusive as possible.

613
00:41:33,397 --> 00:41:38,482
We also have a small 20 degree window when the starfighter is inverted where the auto-roll never kicks in.

614
00:41:38,482 --> 00:41:42,265
This is to allow players to fly upside down when they intend to.

615
00:41:42,265 --> 00:41:43,867
All other angles tend back to the horizon.

616
00:41:43,867 --> 00:41:50,593
It's also worth mentioning that we anticipated more hardcore players of our audience would prefer to have total control over orientation,

617
00:41:50,593 --> 00:41:53,656
so we added a toggle to turn auto-roll off in the settings.

618
00:41:57,414 --> 00:42:00,520
After getting the starfighters to handle quite nicely, we looked at shooting.

619
00:42:00,520 --> 00:42:04,668
We found that it was incredibly hard to hit a moving target by pointing your ship towards

620
00:42:04,668 --> 00:42:04,968
another.

621
00:42:04,968 --> 00:42:08,836
As an illustration, let's think about aiming towards this TIE Interceptor.

622
00:42:10,464 --> 00:42:14,729
Firstly, our maximum targeting range was around 800m, which meant that ships could end up

623
00:42:14,729 --> 00:42:15,910
quite small on screen.

624
00:42:15,910 --> 00:42:20,595
They were also travelling at up to 120m per second, and also the lasers in Star Wars have

625
00:42:20,595 --> 00:42:22,958
a travel time, so you need to lead your target.

626
00:42:22,958 --> 00:42:27,143
These factors combined to make unassisted aiming incredibly difficult for our players,

627
00:42:27,143 --> 00:42:28,744
so we needed to add some assists.

628
00:42:31,670 --> 00:42:35,592
One of the main assists we added was the auto-aim cone, which is a cone in front of the player

629
00:42:35,592 --> 00:42:40,835
which retargeted the gun barrels to fire the laser shots more towards the correct target position.

630
00:42:40,835 --> 00:42:45,237
In theory, it's quite similar to the Battlefront 1 approach, except that we gradually fade the effect in and out

631
00:42:45,237 --> 00:42:47,739
rather than switching it on and off like in Battlefront 1.

632
00:42:48,586 --> 00:42:51,509
In the case of this diagram, we've got the player aiming ahead of the target,

633
00:42:51,509 --> 00:42:54,152
and we have a predicted position of the target, which is the yellow dot,

634
00:42:54,152 --> 00:42:57,235
which is where the ship will be by the time a player's shot gets to it.

635
00:42:57,235 --> 00:43:01,059
We show a reticle on screen of this position so the player knows where to aim.

636
00:43:01,059 --> 00:43:05,804
This is a type of feedback assist because it's providing extra simulation data to the player via UI.

637
00:43:08,407 --> 00:43:12,208
If this predicted position is inside the aim cone, then we shift the gun barrels towards

638
00:43:12,208 --> 00:43:14,009
this perfect predicted position.

639
00:43:14,009 --> 00:43:18,130
However, we fade it gradually based on how far into the cone the predicted position is.

640
00:43:18,130 --> 00:43:21,592
This means that if the player's aim is quite far from the target, they only get a little

641
00:43:21,592 --> 00:43:22,052
bit of help.

642
00:43:22,052 --> 00:43:26,293
But as the crosshair gets closer and closer to the target reticle, they get more and more

643
00:43:26,293 --> 00:43:30,035
of an assist, until they're inside the reticle which guarantees a hit because it's fully

644
00:43:30,035 --> 00:43:30,515
assisted.

645
00:43:31,255 --> 00:43:35,362
This makes the effect subtle enough that players don't notice the shots diverging from their crosshair,

646
00:43:35,362 --> 00:43:37,405
but they hit a lot more hits than they would otherwise.

647
00:43:37,405 --> 00:43:41,552
It also gives a nice feedback loop of getting gradually more and more hits as your aim improves,

648
00:43:41,552 --> 00:43:43,716
rather than the old approach that was either hit or miss.

649
00:43:46,679 --> 00:43:50,260
The aim cone helped a lot, but the feel of putting your crosshair onto the predictor

650
00:43:50,260 --> 00:43:52,461
reticle still felt quite fiddly.

651
00:43:52,461 --> 00:43:55,221
Players were constantly overshooting, making a lot of correctional inputs.

652
00:43:55,221 --> 00:43:59,603
The main reason for this is that the targets are constantly moving, so instead of the player

653
00:43:59,603 --> 00:44:03,884
trying to aim at a particular static point, they're actually targeting an ideal angular

654
00:44:03,884 --> 00:44:07,605
velocity as well as an orientation in order to keep up with the moving target.

655
00:44:07,605 --> 00:44:11,746
We decided to reduce this complexity by introducing sticky targeting.

656
00:44:12,686 --> 00:44:16,191
This was inspired by one of the aim assists seen in Destiny, where they pull the cursor

657
00:44:16,191 --> 00:44:20,076
along with the enemy when the enemy strafes left or right.

658
00:44:20,076 --> 00:44:24,101
Effectively, we want to drag the cursor along with the target, and to do so, we take the

659
00:44:24,101 --> 00:44:27,886
linear velocity of the target in world space, and then transform it into the player's

660
00:44:27,886 --> 00:44:29,428
local space angular velocity.

661
00:44:30,358 --> 00:44:33,681
This target angular velocity can then be mapped into the input layer.

662
00:44:33,681 --> 00:44:37,024
We can effectively work out how close the player was to achieving this ideal input

663
00:44:37,024 --> 00:44:41,788
and then fade the value towards this ideal in a similar way to how we did it with the aim cone logic.

664
00:44:41,788 --> 00:44:45,051
We use the aim cone to fade the effect in and out

665
00:44:45,051 --> 00:44:49,516
and we only apply the sticky targeting when the player has non-zero right stick input

666
00:44:49,516 --> 00:44:52,038
which means that we only help them aim when they're trying to aim.

667
00:44:52,038 --> 00:44:55,741
This ended up working really well as we'll show in the next demonstration video.

668
00:44:59,553 --> 00:45:01,454
In this first part, sticky targeting is off.

669
00:45:01,454 --> 00:45:06,458
You can see that the player is making a lot of jerky correctional movements to try and aim at the enemy.

670
00:45:06,458 --> 00:45:15,645
This is resulted in most kills only happening when the enemy is travelling in a straight line and makes for an easier target.

671
00:45:15,645 --> 00:45:18,808
This next video shows the contrast when we turn sticky targeting up to maximum.

672
00:45:18,808 --> 00:45:22,110
The aim point is super stable when locked onto a target,

673
00:45:22,110 --> 00:45:26,053
but the player will be able to feel the cursor is being dragged along with the target,

674
00:45:26,053 --> 00:45:29,116
as in this case where the cursor follows the target flight path exactly.

675
00:45:31,143 --> 00:45:35,165
Then this last part shows the tuning we ended up shipping with, where the player has much

676
00:45:35,165 --> 00:45:39,307
reduced correctional input, but it's still subtle enough that the player doesn't notice

677
00:45:39,307 --> 00:45:45,590
that they're being assisted.

678
00:45:45,590 --> 00:45:50,172
So, overall, we ended up with a hybrid vehicle-shooter experience that we're really proud of.

679
00:45:50,172 --> 00:45:54,815
We used a simplified physical model, but with the control options for highly skilled players.

680
00:45:54,815 --> 00:45:59,037
We used a vehicle-led camera to allow precise handling, and then layered on assists to help

681
00:45:59,037 --> 00:46:00,918
our shooting feel precise and satisfying.

682
00:46:03,322 --> 00:46:07,625
So we're pretty much at the end of the presentation now, so I'll just summarize some of the key

683
00:46:07,625 --> 00:46:09,326
points we discussed today.

684
00:46:09,326 --> 00:46:13,789
Games should balance simulation depth with arcade accessibility in order to achieve intuitive

685
00:46:13,789 --> 00:46:15,530
controls with challenge and mastery.

686
00:46:15,530 --> 00:46:20,373
Build your vehicle for the context it's intended for, and retune if the context changes.

687
00:46:20,373 --> 00:46:25,876
Think about how deep your simulation should go, look at real world vehicles for inspiration,

688
00:46:25,876 --> 00:46:29,178
and decide on what parts would add to the depth to the player experience.

689
00:46:31,508 --> 00:46:33,729
Build assists to make the game more accessible.

690
00:46:33,729 --> 00:46:35,530
Balance the amount and strength of the assists

691
00:46:35,530 --> 00:46:36,910
depending on how many game mechanics

692
00:46:36,910 --> 00:46:37,691
the player has to interact with,

693
00:46:37,691 --> 00:46:40,592
ensuring the input frequency isn't too high.

694
00:46:40,592 --> 00:46:43,934
Consider camera-led and vehicle-led cameras.

695
00:46:43,934 --> 00:46:45,275
Allow the physicality of the vehicle

696
00:46:45,275 --> 00:46:47,156
to be conveyed through the camera

697
00:46:47,156 --> 00:46:49,237
and give the player the feedback they need.

698
00:46:49,237 --> 00:46:51,538
And that's it, thank you very much.

699
00:47:03,003 --> 00:47:04,805
Any questions?

700
00:47:04,805 --> 00:47:10,110
Hello, great talk, thank you very much.

701
00:47:10,110 --> 00:47:10,430
Thanks.

702
00:47:10,430 --> 00:47:16,536
I've been working on console vehicle systems for a very long time, but recently been asked

703
00:47:16,536 --> 00:47:17,557
to help out with PC.

704
00:47:17,557 --> 00:47:22,802
I was wondering if you had any input or thoughts about digital inputs that are more prevalent

705
00:47:22,802 --> 00:47:26,185
on PC controls versus analog sticks and joysticks.

706
00:47:27,046 --> 00:47:30,809
Yeah, so the question was thank you the question was about

707
00:47:30,809 --> 00:47:33,370
digital inputs versus analog inputs and console versus PC

708
00:47:33,370 --> 00:47:39,615
So there are a couple of a couple of big things there. So firstly if you're using

709
00:47:39,615 --> 00:47:43,217
Keyboard to input then you kind of you've only got on and off inputs

710
00:47:43,217 --> 00:47:49,261
So one of the things that we do for both console and PC is we have steer rates. So it's kind of

711
00:47:49,261 --> 00:47:54,044
Fading in and out our input in terms of you don't just turn to maximum input you kind of will fade in and out

712
00:47:55,045 --> 00:47:59,248
We use that for our console pad inputs, but we also use it for our PC input in terms of

713
00:47:59,248 --> 00:48:04,252
if you hold down A, then it will gradually fade towards that, which helps a little bit.

714
00:48:04,252 --> 00:48:11,798
One of the things that we did for Star Wars Battlefront II is that we had A and D would control the roll.

715
00:48:11,798 --> 00:48:16,621
And one of the things you can do on a pad is because you have an analog input,

716
00:48:16,621 --> 00:48:21,065
you can effectively balance the rolling against the auto-roll system.

717
00:48:21,065 --> 00:48:23,046
So if the auto-roll system is trying to level you, then...

718
00:48:24,107 --> 00:48:28,309
you can kind of balance it like quarter percent left input to kind of keep you

719
00:48:28,309 --> 00:48:32,390
locked to the particular angle which is totally impossible to do with just A and D.

720
00:48:32,390 --> 00:48:38,813
So we had a separate kind of input mechanism on PC which is if you were

721
00:48:38,813 --> 00:48:43,215
holding down A and D at the same time then we use that new concept to say just

722
00:48:43,215 --> 00:48:47,337
lock wherever I am so you could kind of say A to here and then both of them to

723
00:48:47,337 --> 00:48:51,278
just lock in place. So we tried to come up with new mechanisms that would suit

724
00:48:51,278 --> 00:48:53,179
PC better than on pad.

725
00:48:55,610 --> 00:48:59,352
Hi, with Simcade Racing Games that you were talking about,

726
00:48:59,352 --> 00:49:01,793
how do you approach handling and assist

727
00:49:01,793 --> 00:49:04,275
when you're tuning vehicles to be understeery

728
00:49:04,275 --> 00:49:06,716
versus oversteery?

729
00:49:06,716 --> 00:49:07,597
Okay, so thank you.

730
00:49:07,597 --> 00:49:11,579
The question was about understeer versus oversteer.

731
00:49:12,302 --> 00:49:19,224
I think it depends on what you're trying to get out of your key experience.

732
00:49:19,224 --> 00:49:24,666
So in terms of if you want your vehicle to feel quite heavy, it's often nice to have

733
00:49:24,666 --> 00:49:27,647
a slightly understeery vehicle where you'll kind of...

734
00:49:29,917 --> 00:49:32,638
even if you're steering at maximum, you might not be able to make that corner,

735
00:49:32,638 --> 00:49:37,462
and then you encourage your players to brake, turn into the corner, drift around.

736
00:49:37,462 --> 00:49:41,324
So I think a lot of most wanted handling was a little bit understeery,

737
00:49:41,324 --> 00:49:44,707
but then it encourages you to really kick the back out and get into a nice big drift.

738
00:49:44,707 --> 00:49:46,708
Whereas if you want...

739
00:49:47,388 --> 00:49:50,250
If you don't really want your game to be about drifting and you want it to be very much like

740
00:49:50,250 --> 00:49:54,612
a little bit more along the lines of like F-Zero or something, where it's pretty much

741
00:49:54,612 --> 00:49:58,053
I want complete control over the left stick and I don't need to be drifting at all, it's

742
00:49:58,053 --> 00:50:03,375
just maximum responsiveness, then you'd probably have something that's way more oversteering

743
00:50:03,375 --> 00:50:07,797
and is going to kick into turns really aggressively so you have full control over there.

744
00:50:07,797 --> 00:50:09,318
That's kind of how I do it.

745
00:50:11,767 --> 00:50:17,068
In the demo, when you had the landing camera, it would bottom out and hit the ground on the landing.

746
00:50:17,068 --> 00:50:22,809
Was it colliding elastically with the ground, or was it just zeroing out its velocity and then the spring force was putting it back?

747
00:50:22,809 --> 00:50:28,531
So the question was about suspension bottoming out.

748
00:50:28,531 --> 00:50:39,033
So we have, on Battlefield 1, we had four regular sort of Raycast suspension wheels, and then we had a rigid body as well.

749
00:50:39,033 --> 00:50:39,213
So...

750
00:50:40,194 --> 00:50:45,859
When you completely bottom out, we detect when it goes above a certain threshold in

751
00:50:45,859 --> 00:50:52,345
the suspension, like it's more than 80% compressed, and we'd count that as being bottoming out.

752
00:50:52,345 --> 00:50:54,106
Oftentimes we'd find that the...

753
00:50:55,399 --> 00:50:59,621
the actual rigid body would collide and we'd need to try and smooth it as much as possible.

754
00:50:59,621 --> 00:51:02,362
Sometimes you get a little bit of collision hitching but in general we want to try and

755
00:51:02,362 --> 00:51:09,765
keep that maximum 20% of the suspension very, very rigid in terms of the suspension force

756
00:51:09,765 --> 00:51:11,646
that it applies back.

757
00:51:12,006 --> 00:51:16,587
you still get the effect of you've pretty much bottomed out the suspension,

758
00:51:16,587 --> 00:51:20,868
but you still remain in that 20% to try and keep it floating off the ground effectively,

759
00:51:20,868 --> 00:51:22,949
stopping the rigid body from actually colliding.

760
00:51:22,949 --> 00:51:25,209
So yes, we did get some collision hitching and hitting the ground,

761
00:51:25,209 --> 00:51:27,870
but we tried to minimize it through a very small amount of very,

762
00:51:27,870 --> 00:51:31,011
very strong suspension at the top of the suspension ray cast.

763
00:51:31,548 --> 00:51:34,651
Does the camera itself hit the ground?

764
00:51:34,651 --> 00:51:36,652
So it's not.

765
00:51:36,652 --> 00:51:39,354
So technically, with the stuff that I

766
00:51:39,354 --> 00:51:42,256
showed in the presentation, it's possible for you

767
00:51:42,256 --> 00:51:44,577
to tune the camera so that it would like lurch below.

768
00:51:44,577 --> 00:51:47,579
So the momentum would keep it going.

769
00:51:47,579 --> 00:51:48,560
So it would keep going down.

770
00:51:48,560 --> 00:51:49,961
So if you had a massive momentum term,

771
00:51:49,961 --> 00:51:52,703
it could potentially go all the way down below the ground.

772
00:51:53,143 --> 00:51:58,129
However, even if you did tune it like that, we have another separate system, which is

773
00:51:58,129 --> 00:52:01,834
a capsule collision system that basically says, hey, if you're going to collide with

774
00:52:01,834 --> 00:52:07,320
the ground, kind of push yourself out and resolve it in a way that won't actually go

775
00:52:07,320 --> 00:52:08,442
through the terrain.

776
00:52:08,442 --> 00:52:11,305
So we have another system on top of that to protect against those sorts of issues.

777
00:52:15,571 --> 00:52:19,954
For the auto-aim systems you talked about on the Starfighters, did you do anything different

778
00:52:19,954 --> 00:52:23,956
for projectile convergence on something like the X-Wing versus the TIE Fighter where the

779
00:52:23,956 --> 00:52:27,118
projectiles are spawning from different points and colliding, basically coming from different

780
00:52:27,118 --> 00:52:27,298
angles?

781
00:52:27,298 --> 00:52:31,401
The TIE Fighters are very straightforward, the X-Wings are coming from the outer wings.

782
00:52:31,401 --> 00:52:33,442
Yeah, really good question.

783
00:52:33,442 --> 00:52:37,905
So this is about, you're not actually shooting from where you think you're shooting from,

784
00:52:37,905 --> 00:52:39,306
you're shooting from, you know,

785
00:52:40,573 --> 00:52:43,814
like gun barrels at the edges of the wings,

786
00:52:43,814 --> 00:52:47,615
it's more complex than just being far away

787
00:52:47,615 --> 00:52:49,095
from the center of the vehicle.

788
00:52:49,095 --> 00:52:51,236
It's also far away from the center of the camera.

789
00:52:51,236 --> 00:52:54,136
So one of the most difficult vehicles for this

790
00:52:54,136 --> 00:52:56,177
was Slave 1, which is like a massive vehicle

791
00:52:56,177 --> 00:52:58,257
and the gun barrels are right at the bottom

792
00:52:58,257 --> 00:52:59,978
and we needed the camera to be up here.

793
00:52:59,978 --> 00:53:01,478
So if you've got the camera way up here

794
00:53:01,478 --> 00:53:02,318
and the gun barrels down here,

795
00:53:03,259 --> 00:53:05,420
you'd be trying to aim along where the camera's looking,

796
00:53:05,420 --> 00:53:09,741
and the camera, the gun barrels would effectively be pointing up.

797
00:53:09,741 --> 00:53:14,283
So what we found was there was this really weird behaviour where

798
00:53:14,283 --> 00:53:17,065
if you were trying to aim at something that was quite close,

799
00:53:17,065 --> 00:53:20,606
your gun barrels would be pointing, like, up 40 degrees or something.

800
00:53:20,606 --> 00:53:23,307
So you'd be like, I want to fire here,

801
00:53:23,307 --> 00:53:26,149
but then all your missed shots are actually going up in the screen

802
00:53:26,149 --> 00:53:27,489
and it looks really weird.

803
00:53:27,489 --> 00:53:31,051
And that's actually a very difficult problem to solve because...

804
00:53:31,551 --> 00:53:37,035
You either say, I want to shoot down the camera center, or I want to shoot accurately from

805
00:53:37,035 --> 00:53:38,877
where the gun barrels actually are.

806
00:53:38,877 --> 00:53:44,741
So what we did was we did some, we kind of fudged it a little bit by looking at what

807
00:53:44,741 --> 00:53:50,005
your target is in terms of, I'm shooting towards this guy over here, so I'm going to try and

808
00:53:50,005 --> 00:53:52,026
fade it so that my shots will...

809
00:53:53,099 --> 00:53:59,345
will always hit him and try and make it so that if he's really, really close to me in

810
00:53:59,345 --> 00:54:03,849
terms of like if he's right up in the camera and the vertical deviation from where the

811
00:54:03,849 --> 00:54:09,174
gun barrel is actually pointing would be very aggressive and would give me that effect of

812
00:54:09,174 --> 00:54:14,238
shots going off into the sky, then limit it to a particular set angle.

813
00:54:15,415 --> 00:54:19,279
Alright, and did you also have to account, were you using that in combination with the

814
00:54:19,279 --> 00:54:23,344
prediction points so that if the player was trying to aim in front of a moving, a target

815
00:54:23,344 --> 00:54:26,707
that's moving laterally, that it would have to predict in front of them where the shots

816
00:54:26,707 --> 00:54:28,149
could converge to?

817
00:54:28,149 --> 00:54:32,013
Yeah, so we did all of our calculations based on the predicted position.

818
00:54:32,013 --> 00:54:36,958
So we know where you're trying to aim, and we would aim towards that point, so we'd use

819
00:54:36,958 --> 00:54:37,799
that to fade in and out.

820
00:54:43,060 --> 00:54:47,003
Just one more, actually sort of a comment and suggestion for people if you're working

821
00:54:47,003 --> 00:54:51,568
on racing games or vehicle dynamic systems, I'm not sure about the UK, but in the United

822
00:54:51,568 --> 00:54:58,194
States we have a sport called autocross that people do in parking lots and you set up cone

823
00:54:58,194 --> 00:54:59,515
tracks and stuff.

824
00:54:59,695 --> 00:55:03,939
I would encourage you to take a look and see if there's that sort of an activity in whatever

825
00:55:03,939 --> 00:55:09,764
city you live in, because driving a real vehicle at the edge, you develop a different intuition

826
00:55:09,764 --> 00:55:11,526
for the way a lot of these systems work.

827
00:55:11,526 --> 00:55:16,830
And the vehicle dynamics programmer that I worked with, he and I would go out on weekends

828
00:55:16,830 --> 00:55:22,215
and participate in championships and stuff, and it was great fun, but it also really gave

829
00:55:22,215 --> 00:55:23,196
us a better, you know...

830
00:55:23,496 --> 00:55:27,538
fundamental just intuition and understanding of the way the vehicles work when they're really at

831
00:55:27,538 --> 00:55:32,179
the edge of the performance envelope which most people never experience. I mean even if you're

832
00:55:32,179 --> 00:55:35,861
go-karting or you're doing other stuff there's different you know ways of weight transfer and

833
00:55:35,861 --> 00:55:40,202
when you actually lose control what happens when you spin out and those sorts of things. So just

834
00:55:40,202 --> 00:55:45,664
suggesting if people are working on those systems see if there's like a SCCA or Porsche Club or

835
00:55:45,664 --> 00:55:49,786
BMW Club or anything in your area and you know participate in those sorts of things.

836
00:55:50,086 --> 00:55:50,686
Yeah, definitely.

837
00:55:50,686 --> 00:55:54,309
Like, actually getting real experience with vehicles is super valuable.

838
00:55:54,309 --> 00:55:56,190
I think whenever we were trying to do a new type of vehicle,

839
00:55:56,190 --> 00:55:59,853
we would try and actually go and drive something similar.

840
00:55:59,853 --> 00:56:02,174
Unfortunately, we can't get World War I vehicles,

841
00:56:02,174 --> 00:56:04,616
so we couldn't actually drive any of those.

842
00:56:04,616 --> 00:56:08,739
But it's super valuable, and also it works the other way around as well.

843
00:56:08,739 --> 00:56:11,160
I found that playing a load of racing games throughout my life

844
00:56:11,160 --> 00:56:12,701
made me really good at go-karting.

845
00:56:12,701 --> 00:56:15,583
I mean, not that good, but, you know, quite good.

846
00:56:16,980 --> 00:56:21,983
For the thing you were talking about a moment ago with the shooting the guns from not from the camera.

847
00:56:21,983 --> 00:56:22,423
Yes.

848
00:56:22,423 --> 00:56:28,126
Did you do anything to handle where there is an object between the gun and the target,

849
00:56:28,126 --> 00:56:32,448
but that same object is not between the camera and the target?

850
00:56:32,448 --> 00:56:39,912
So we didn't do too much, sorry, this was about if there's an object between the gun and where the target actually is, so it's kind of obstructing.

851
00:56:39,912 --> 00:56:45,995
We didn't do too much of that, mainly because our situation, like...

852
00:56:46,355 --> 00:56:49,836
The situation of the game is mainly aiming at a starfighter which is over here,

853
00:56:49,836 --> 00:56:55,057
and I'm kind of going through a tunnel maybe is the most geometry we tend to get in between things.

854
00:56:55,057 --> 00:56:59,838
We didn't find that players had that a lot in Battlefront 2.

855
00:56:59,838 --> 00:57:08,241
I'd say if you were doing a first person shooter then obviously you can just position the gun right up against the wall and you get that situation a lot.

856
00:57:08,241 --> 00:57:09,341
In which case...

857
00:57:09,561 --> 00:57:13,582
I think you'd probably use something along the lines of doing raycasts from the gun and

858
00:57:13,582 --> 00:57:17,904
being like, well, if that's obstructed, then fire the bullet here instead of where I think

859
00:57:17,904 --> 00:57:21,545
it should go from the camera's point of view and decide which is most applicable.

860
00:57:21,545 --> 00:57:21,785
Thanks.

861
00:57:21,785 --> 00:57:22,866
Cool.

862
00:57:22,866 --> 00:57:29,548
If there's any more questions or anyone wants to catch up afterwards, grab a business card

863
00:57:29,548 --> 00:57:32,949
or something fun, then come and grab me afterwards.

864
00:57:32,949 --> 00:57:33,870
Thank you very much.

