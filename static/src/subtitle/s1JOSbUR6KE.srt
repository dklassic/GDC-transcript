1
00:00:06,025 --> 00:00:07,326
My name is Jonas Gilberg.

2
00:00:07,746 --> 00:00:11,327
I am part of EAQE, and I spend all of my time building bots

3
00:00:11,787 --> 00:00:13,708
that play games so that humans don't have to.

4
00:00:14,588 --> 00:00:16,109
Today, I'll be talking about those bots

5
00:00:16,189 --> 00:00:17,449
in the context of Battlefield.

6
00:00:18,290 --> 00:00:19,570
So let's have a look at Battlefield V.

7
00:00:51,921 --> 00:00:55,042
So that was a short clip of what Battlefield 5 can look like.

8
00:00:55,443 --> 00:00:58,604
Now, why do I spend all of my time building bots that play

9
00:00:58,624 --> 00:01:00,125
games so that humans don't have to?

10
00:01:00,885 --> 00:01:03,486
Well, it provides me with fun and interesting challenges.

11
00:01:04,347 --> 00:01:06,087
But the reason EA wants me to do this

12
00:01:06,207 --> 00:01:07,528
is that we've reached capacity.

13
00:01:08,168 --> 00:01:10,649
The session sizes of today's multiplayer games

14
00:01:10,809 --> 00:01:12,330
already stretch the limits of what

15
00:01:12,370 --> 00:01:14,551
is possible for us to continuously stability

16
00:01:14,591 --> 00:01:17,993
test using humans, especially outside of initial launch.

17
00:01:18,908 --> 00:01:21,229
Games are growing in both size and lifetime,

18
00:01:21,529 --> 00:01:23,309
so to be able to test things in the future,

19
00:01:23,650 --> 00:01:24,530
even the near future,

20
00:01:25,010 --> 00:01:26,990
something that scales better than humans was needed.

21
00:01:28,311 --> 00:01:29,251
Take Battlefield V.

22
00:01:29,951 --> 00:01:32,192
If you want to test all combinations of maps and modes

23
00:01:32,252 --> 00:01:34,192
for one hour, that requires 2,304 man hours.

24
00:01:34,212 --> 00:01:36,653
If you want to test that every day, that requires 288 people.

25
00:01:41,001 --> 00:01:44,223
Multiply that by the number of target platforms, classes,

26
00:01:44,323 --> 00:01:46,204
customization, and other permutations,

27
00:01:46,725 --> 00:01:48,386
and it transforms into an enormous number,

28
00:01:48,786 --> 00:01:50,447
no matter how cleverly you optimize it.

29
00:01:51,128 --> 00:01:51,928
And this was at launch.

30
00:01:52,489 --> 00:01:54,430
The number of maps and modes will keep growing.

31
00:01:55,010 --> 00:01:57,672
Other new content will be added, new features, et cetera.

32
00:01:58,172 --> 00:02:00,934
These old things need to be retested along with the new.

33
00:02:01,695 --> 00:02:03,136
That is why we need the machines.

34
00:02:04,557 --> 00:02:06,858
Now this is a picture of the DICE automation farm,

35
00:02:06,918 --> 00:02:07,859
which has over 200 machines.

36
00:02:09,297 --> 00:02:12,380
We want to put them and other hardware at our disposal

37
00:02:12,480 --> 00:02:13,120
to good use.

38
00:02:14,642 --> 00:02:17,084
Which brings us to automated stability playtests.

39
00:02:17,884 --> 00:02:20,126
This was the goal for the initial proof of concept

40
00:02:20,286 --> 00:02:22,428
and is still a core pillar today.

41
00:02:23,209 --> 00:02:24,950
For this, there are a few requirements.

42
00:02:25,711 --> 00:02:27,512
They need to run on all client platforms.

43
00:02:28,373 --> 00:02:30,535
They should exercise code as similarly

44
00:02:30,715 --> 00:02:31,736
as possible to a player.

45
00:02:32,336 --> 00:02:33,738
So we wanted it to be input driven

46
00:02:33,778 --> 00:02:35,159
with minimal client impact.

47
00:02:35,799 --> 00:02:38,301
We want to make sure that we're still testing the same thing.

48
00:02:39,551 --> 00:02:41,853
The implementation should also be as far removed

49
00:02:41,893 --> 00:02:43,634
from the actual game code as possible.

50
00:02:44,274 --> 00:02:47,016
If you tie the AI down to game implementation details,

51
00:02:47,076 --> 00:02:48,918
which will shift a lot during development,

52
00:02:49,498 --> 00:02:51,119
we spend too much time on maintenance

53
00:02:51,259 --> 00:02:52,960
as well as being in a worse position

54
00:02:53,001 --> 00:02:54,742
to apply the solution to other projects.

55
00:02:56,443 --> 00:02:58,604
And anyone should be able to create test cases

56
00:02:58,645 --> 00:02:59,745
and direct the AI players.

57
00:03:00,286 --> 00:03:02,127
It should not require an engineer.

58
00:03:03,182 --> 00:03:06,364
More specifically, this was a collaboration with Dice QA,

59
00:03:06,784 --> 00:03:09,605
and the desire was for their QA automation specialists

60
00:03:09,645 --> 00:03:12,106
to be able to implement the support for all the game modes.

61
00:03:14,307 --> 00:03:16,288
Now, before I came to EA, I spent my time

62
00:03:16,348 --> 00:03:18,709
doing loads of different things, AI and otherwise,

63
00:03:18,989 --> 00:03:20,449
as technical lead AI programmer

64
00:03:20,549 --> 00:03:21,710
on Tom Clancy's The Division.

65
00:03:22,470 --> 00:03:25,191
I gave a talk on the behavior of 3D tech a few years ago.

66
00:03:25,752 --> 00:03:26,732
Some of you might remember this.

67
00:03:29,514 --> 00:03:33,756
Another thing I worked on then that is particularly relevant now were the bots for server load

68
00:03:33,796 --> 00:03:34,156
testing.

69
00:03:36,077 --> 00:03:40,840
As I was hired to do this proof of concept, it meant that when this all started, I knew

70
00:03:40,920 --> 00:03:43,381
nothing of Frostbite and very little of Battlefield.

71
00:03:44,102 --> 00:03:47,624
So the first thing I did was to investigate the tech and if there was anything I could

72
00:03:47,684 --> 00:03:48,744
reuse or repurpose.

73
00:03:49,713 --> 00:03:52,034
Unsurprisingly, the existing AI solution

74
00:03:52,094 --> 00:03:54,335
had been built with a different set of constraints

75
00:03:54,955 --> 00:03:57,616
and non-trivial to fork and rebuild for my needs.

76
00:03:58,476 --> 00:03:59,897
If it had been a reasonable fit,

77
00:04:00,117 --> 00:04:02,457
I would definitely have tried to reuse existing tech.

78
00:04:03,538 --> 00:04:05,579
The NavMesh tech itself could be used,

79
00:04:06,079 --> 00:04:08,480
but as the multiplayer levels do not feature AI,

80
00:04:08,680 --> 00:04:10,360
they and their assets are not built

81
00:04:10,500 --> 00:04:12,021
with AI or navigation in mind.

82
00:04:13,227 --> 00:04:16,651
There were, however, a lot of interesting bits and pieces

83
00:04:16,711 --> 00:04:19,453
for both input injection and player scripting,

84
00:04:20,074 --> 00:04:22,416
as well as the capability to create fake players

85
00:04:22,476 --> 00:04:24,258
on the server without client connections.

86
00:04:24,959 --> 00:04:27,261
I would just have to figure out how to glue them together

87
00:04:27,321 --> 00:04:28,021
with AI on top.

88
00:04:29,309 --> 00:04:31,952
Having a parallel implementation for the test AI

89
00:04:32,633 --> 00:04:34,475
is not without benefits, as it makes

90
00:04:34,555 --> 00:04:36,678
it possible to update it without worrying

91
00:04:36,738 --> 00:04:38,059
about breaking the actual game.

92
00:04:38,580 --> 00:04:40,242
And it neatly ticks some of the boxes

93
00:04:40,322 --> 00:04:42,004
of the desired requirements.

94
00:04:42,525 --> 00:04:44,968
But it came with the cost of building the AI parts

95
00:04:44,988 --> 00:04:45,488
from scratch.

96
00:04:47,622 --> 00:04:48,683
So, what about machine learning?

97
00:04:49,083 --> 00:04:51,206
Now, some of you might remember this from last year's GDC.

98
00:04:51,747 --> 00:04:53,449
While I was doing the proof of concept,

99
00:04:53,509 --> 00:04:54,690
that was a research project,

100
00:04:54,750 --> 00:04:57,153
made PhDs, impressive hardware, et cetera.

101
00:04:57,994 --> 00:04:59,656
And I personally wanted to produce something

102
00:04:59,676 --> 00:05:02,059
that had the potential to run on all platforms.

103
00:05:03,183 --> 00:05:04,944
With that significant runtime impact,

104
00:05:05,484 --> 00:05:08,485
where non-engineer end users could be in control

105
00:05:09,065 --> 00:05:09,605
within months.

106
00:05:10,446 --> 00:05:12,026
And it would use throughout production,

107
00:05:12,386 --> 00:05:14,547
where content and the game changes constantly.

108
00:05:15,167 --> 00:05:16,007
So don't get me wrong,

109
00:05:16,047 --> 00:05:17,488
I think machine learning is a great tool.

110
00:05:17,828 --> 00:05:20,008
I just made the judgment call that it was not the tool

111
00:05:20,048 --> 00:05:21,329
for this job at that time.

112
00:05:24,270 --> 00:05:26,370
So, normally when developing game AI,

113
00:05:26,550 --> 00:05:30,372
you spend time on functionality, fun, fidelity.

114
00:05:31,651 --> 00:05:33,853
You might be tempted to approach this in the same way.

115
00:05:34,754 --> 00:05:36,595
But the end goal here is not fun.

116
00:05:37,456 --> 00:05:40,779
For the most part, no one will even watch these bots play.

117
00:05:41,560 --> 00:05:44,142
So we don't have to deal with fun or fidelity.

118
00:05:44,882 --> 00:05:46,083
And to be completely honest,

119
00:05:46,144 --> 00:05:48,205
we don't have to be all that functional either.

120
00:05:48,706 --> 00:05:51,248
The bots will not deliberately exploit each other.

121
00:05:51,268 --> 00:05:53,009
And if they accidentally do,

122
00:05:53,510 --> 00:05:55,792
it would only be a problem if it hurts the simulation.

123
00:05:56,232 --> 00:05:57,333
We don't care if they're having fun.

124
00:05:58,485 --> 00:06:01,506
They are definitely allowed to cheat, if that makes things easier.

125
00:06:02,366 --> 00:06:05,707
The main goal here is to get test coverage, not a Turing test.

126
00:06:07,307 --> 00:06:11,949
So starting out, I focused on taking control of the player on a single-player test range,

127
00:06:12,449 --> 00:06:14,409
providing it with inputs produced by the AI.

128
00:06:15,910 --> 00:06:19,911
So what does it mean to say that the autoplayer should be controlled using inputs?

129
00:06:20,643 --> 00:06:22,525
Normally, when you press the button on your controller,

130
00:06:22,585 --> 00:06:24,987
that is translated to an abstract input

131
00:06:25,467 --> 00:06:27,009
based on the current game context.

132
00:06:27,649 --> 00:06:30,872
This abstract input is then what is processed by player code

133
00:06:30,932 --> 00:06:32,914
to produce movement, actions, et cetera.

134
00:06:33,775 --> 00:06:35,757
For other players, we don't want to interact directly

135
00:06:35,777 --> 00:06:37,739
with the game code, nor do we want to press

136
00:06:37,779 --> 00:06:39,060
the equivalent of hardware buttons,

137
00:06:39,580 --> 00:06:41,322
as that would require us to correctly track

138
00:06:41,342 --> 00:06:42,223
the current context.

139
00:06:42,823 --> 00:06:45,706
The input state provides us with a reasonable middle ground.

140
00:06:46,658 --> 00:06:49,019
This means that almost all of the AI brain,

141
00:06:49,119 --> 00:06:51,360
the output of the AI brain is produced as inputs,

142
00:06:51,780 --> 00:06:54,141
such as yaw, pitch, fire, et cetera.

143
00:06:55,122 --> 00:06:56,462
Something that's worth noting here

144
00:06:56,522 --> 00:06:59,244
is that we chose not to automate things through the UI,

145
00:06:59,744 --> 00:07:00,724
which means we're missing out

146
00:07:00,784 --> 00:07:02,945
on a whole class of potential issues.

147
00:07:05,347 --> 00:07:07,047
Now, the agent's combat behavior

148
00:07:07,468 --> 00:07:09,228
is based on the current weapon equipped.

149
00:07:10,056 --> 00:07:13,960
A simplified weapon representation is generated from game-specific data.

150
00:07:14,540 --> 00:07:18,984
The effective range of the weapon, what inputs are needed to fire, should aim be used, plant

151
00:07:19,004 --> 00:07:20,345
and detonate, etc.

152
00:07:21,166 --> 00:07:25,610
To find hostile targets, we do a line-of-sight test of the closest target in our view cone.

153
00:07:26,151 --> 00:07:29,093
It's a single asynchronous raycast, and we don't do it very often.

154
00:07:29,905 --> 00:07:32,246
While this might seem overly simplistic,

155
00:07:32,586 --> 00:07:34,227
it's good enough for our use case

156
00:07:34,667 --> 00:07:36,748
and extremely light in terms of performance.

157
00:07:38,108 --> 00:07:40,869
As the AI potentially runs on a maxed out system,

158
00:07:40,989 --> 00:07:42,990
we want to keep everything as light as possible.

159
00:07:44,110 --> 00:07:45,270
Sometimes it doesn't work.

160
00:07:45,890 --> 00:07:49,092
We temporarily blacklist targets if we have line of sight

161
00:07:49,172 --> 00:07:51,032
and shoot at a target for some time with no effect.

162
00:07:53,277 --> 00:07:56,200
So by default, the pathfinding runs on the server.

163
00:07:56,640 --> 00:07:58,942
And in our case, we wanted the AI to run on the client.

164
00:07:59,743 --> 00:08:01,864
So I implemented some custom networking for paths.

165
00:08:02,505 --> 00:08:05,748
This meant we could keep the pathfinding on the server

166
00:08:05,908 --> 00:08:07,249
and not impact the client.

167
00:08:08,610 --> 00:08:10,952
As the autoplayers are used throughout production,

168
00:08:11,392 --> 00:08:13,774
and often on content that is not built for AI,

169
00:08:14,215 --> 00:08:16,897
the navmesh is often out of date or suboptimal.

170
00:08:17,778 --> 00:08:20,680
As a result, paths will often go straight through obstacles

171
00:08:20,860 --> 00:08:21,721
and the bots cannot.

172
00:08:22,683 --> 00:08:25,083
To tackle this, we monitor the progress on the path

173
00:08:25,183 --> 00:08:26,904
as a 3D distance to the next waypoint.

174
00:08:27,544 --> 00:08:29,244
If we haven't made sufficient progress

175
00:08:29,285 --> 00:08:31,465
within the allotted time, we try to clear the obstacle

176
00:08:31,505 --> 00:08:33,826
by spamming buttons that often get us out of a jam.

177
00:08:33,926 --> 00:08:35,606
Jump, interact, open door.

178
00:08:36,946 --> 00:08:38,747
And if that doesn't work, we teleport.

179
00:08:39,687 --> 00:08:42,208
That was good enough, and what we used for quite a long time.

180
00:08:44,401 --> 00:08:46,342
Now, we actually need to control these players.

181
00:08:47,123 --> 00:08:49,325
To do this, we wanted to use Frostbite schematics,

182
00:08:50,005 --> 00:08:52,207
not only because it's a powerful visual scripting tool,

183
00:08:52,727 --> 00:08:55,269
but because it would allow us for easier adoption

184
00:08:55,689 --> 00:08:57,711
and potentially a piece-wide upgrade process

185
00:08:58,131 --> 00:08:59,132
of existing scripting.

186
00:08:59,932 --> 00:09:01,934
QA came up with a list of requirements

187
00:09:02,494 --> 00:09:04,615
of what they would need to write the high-level logic

188
00:09:04,635 --> 00:09:07,237
for all game modes, based on their previous tests

189
00:09:07,277 --> 00:09:08,298
and scripting experience.

190
00:09:08,979 --> 00:09:11,320
So schematics are used to set the objectives

191
00:09:11,480 --> 00:09:13,021
for individual auto-players to follow.

192
00:09:14,908 --> 00:09:17,209
Objectives control where the auto-players go,

193
00:09:17,349 --> 00:09:20,191
but objective parameters also control how they get there,

194
00:09:20,771 --> 00:09:23,413
if they should engage their enemies, remain passive,

195
00:09:23,493 --> 00:09:25,014
have god mode on, et cetera.

196
00:09:25,714 --> 00:09:26,995
Examples of objectives are,

197
00:09:27,315 --> 00:09:29,196
in addition to move and defend seen here,

198
00:09:29,777 --> 00:09:32,418
interact, action, attack, follow,

199
00:09:33,078 --> 00:09:35,040
and more high-level ones like seek and destroy.

200
00:09:35,800 --> 00:09:38,442
You can also create game or game-mode specific objectives

201
00:09:38,522 --> 00:09:39,342
if that's necessary.

202
00:09:41,287 --> 00:09:44,487
Now that the auto players had basic combat, navigation,

203
00:09:44,527 --> 00:09:46,388
and scripting capabilities, we needed

204
00:09:46,408 --> 00:09:49,409
to actually transition from single machine development

205
00:09:49,669 --> 00:09:51,529
to many in order to actually develop

206
00:09:51,569 --> 00:09:54,490
these tests for the large scale game modes.

207
00:09:55,530 --> 00:09:55,890
Or did we?

208
00:09:56,811 --> 00:09:58,571
As I mentioned earlier, it was possible

209
00:09:58,591 --> 00:10:00,452
to create connectionless players on the server.

210
00:10:01,412 --> 00:10:04,433
All I had to do was to make that work for auto players as well

211
00:10:05,153 --> 00:10:06,653
and re-architect the AI so it could

212
00:10:06,673 --> 00:10:08,814
be run either client side or server side,

213
00:10:08,854 --> 00:10:09,714
depending on the use case.

214
00:10:10,950 --> 00:10:13,432
Once that was in place, it allowed for much faster

215
00:10:13,472 --> 00:10:15,414
iterations, both for QA and myself.

216
00:10:16,354 --> 00:10:18,977
It takes seconds to add 64 players to a game,

217
00:10:20,438 --> 00:10:22,840
and it can be done on demand from a console command

218
00:10:22,880 --> 00:10:23,941
or a command line parameter.

219
00:10:25,462 --> 00:10:27,243
When the autoplay test has been properly

220
00:10:27,304 --> 00:10:29,906
tested using this local multiplayer setup,

221
00:10:30,326 --> 00:10:32,148
then it can be tested in the real environment.

222
00:10:33,148 --> 00:10:35,550
The important thing here is that to the client,

223
00:10:35,811 --> 00:10:38,193
the server players look like any other clients.

224
00:10:40,521 --> 00:10:43,643
This is a simplified view of what the setup looks like

225
00:10:43,663 --> 00:10:44,684
for the Conquest game mode.

226
00:10:45,385 --> 00:10:46,826
Conquest is Battlefield's signature

227
00:10:46,846 --> 00:10:49,208
64-player domination mode, where each team tries

228
00:10:49,228 --> 00:10:51,309
to control predefined areas, control points.

229
00:10:52,250 --> 00:10:54,632
The game mode schematics expose data

230
00:10:54,992 --> 00:10:57,794
that the independent test schematic can read and act on.

231
00:10:58,632 --> 00:11:00,815
When the auto player needs to pick a new objective,

232
00:11:01,395 --> 00:11:02,977
they pick a control point at random

233
00:11:03,057 --> 00:11:05,780
and then pursue that either aggressively or defensively.

234
00:11:06,361 --> 00:11:07,943
The defensive ones are guaranteed

235
00:11:08,003 --> 00:11:09,505
to actually get to the control point,

236
00:11:10,145 --> 00:11:10,906
unless they get killed.

237
00:11:11,927 --> 00:11:14,731
Now, we are about seven weeks into the project

238
00:11:15,071 --> 00:11:16,573
and this is what it actually looked like.

239
00:11:36,652 --> 00:11:38,752
Now, it wouldn't be Battlefield without vehicles.

240
00:11:39,532 --> 00:11:41,193
They really push things to the limit.

241
00:11:41,533 --> 00:11:43,153
So the auto players needed to support that.

242
00:11:43,914 --> 00:11:44,894
Support for keyboard turning,

243
00:11:45,174 --> 00:11:47,755
once we had what we saw previously, was easy.

244
00:11:48,435 --> 00:11:51,256
And now digging out the weapon information for the tanks

245
00:11:51,296 --> 00:11:53,837
and actually aiming turned out to be a bit more involved.

246
00:11:54,397 --> 00:11:57,238
So for the first iteration, auto players driving a tank

247
00:11:57,298 --> 00:11:59,258
simply assumed that the weapon pointed forward

248
00:11:59,838 --> 00:12:00,699
and turned the whole tank

249
00:12:00,979 --> 00:12:02,059
when they wanted to shoot the targets.

250
00:12:03,101 --> 00:12:05,182
I mean, it's not optimal from a gameplay perspective,

251
00:12:05,242 --> 00:12:07,142
but it exercises the important paths

252
00:12:07,342 --> 00:12:08,983
at a fraction of the implementation time.

253
00:12:10,243 --> 00:12:11,824
Airplanes, similar scenario.

254
00:12:12,304 --> 00:12:14,005
Following the same bang for buck principle,

255
00:12:14,045 --> 00:12:15,625
the airplane support simply meant

256
00:12:15,645 --> 00:12:17,686
that the other players would spawn in an airplane,

257
00:12:18,186 --> 00:12:20,187
get the same objective position as otherwise

258
00:12:20,407 --> 00:12:22,107
on the ground, and crash there.

259
00:12:22,848 --> 00:12:23,708
I mean, that is what happens

260
00:12:23,728 --> 00:12:25,148
to a large number of our players anyway.

261
00:12:28,746 --> 00:12:31,048
One way to expand the auto-player capabilities

262
00:12:31,408 --> 00:12:33,330
beyond weapons and the primary objectives

263
00:12:33,450 --> 00:12:34,831
provided by the game mode is something

264
00:12:34,931 --> 00:12:36,232
called secondary objectives.

265
00:12:37,052 --> 00:12:39,754
Secondary objective generators are typically provided

266
00:12:39,794 --> 00:12:41,616
by game or game mode specific code

267
00:12:42,136 --> 00:12:44,618
and produce an objective based on a specific context.

268
00:12:45,438 --> 00:12:47,160
It's probably best explained with examples.

269
00:12:48,941 --> 00:12:50,682
The first example that I'll use is the way

270
00:12:50,702 --> 00:12:52,584
that the auto-players build fortifications,

271
00:12:53,044 --> 00:12:55,186
defensive structures in predefined locations.

272
00:12:56,035 --> 00:12:58,477
The area around the player is scanned for locations

273
00:12:58,517 --> 00:13:00,298
where fortifications can be built and repaired.

274
00:13:00,899 --> 00:13:02,160
If a suitable one is found,

275
00:13:02,300 --> 00:13:03,801
an action objective is generated.

276
00:13:04,382 --> 00:13:06,723
The action objective instructs the auto player

277
00:13:06,743 --> 00:13:08,565
to equip a specific item, tool,

278
00:13:09,145 --> 00:13:11,127
and use a specific input action, fire,

279
00:13:11,708 --> 00:13:14,190
while being close enough to and aiming

280
00:13:14,230 --> 00:13:15,250
at a specific position.

281
00:13:16,151 --> 00:13:17,752
It's also common to set the passive

282
00:13:17,913 --> 00:13:20,034
and god mode parameters of the objective

283
00:13:20,074 --> 00:13:21,536
to make sure that it really happens.

284
00:13:22,424 --> 00:13:24,605
The other player doesn't really know what it's doing or why,

285
00:13:25,065 --> 00:13:27,346
but it doesn't really have to as long as it succeeds often

286
00:13:27,386 --> 00:13:27,626
enough.

287
00:13:28,666 --> 00:13:31,207
You could potentially run this as a separate test case

288
00:13:31,247 --> 00:13:33,228
with all auto players running around constructing

289
00:13:33,328 --> 00:13:35,069
all possible fortifications on the map.

290
00:13:37,329 --> 00:13:40,030
You could also periodically generate secondary objectives

291
00:13:40,070 --> 00:13:40,731
to blow things up.

292
00:13:41,331 --> 00:13:43,252
Or again, all auto players could be

293
00:13:43,272 --> 00:13:45,512
configured to have bazookas with infinite ammo

294
00:13:45,592 --> 00:13:47,673
and shoot at all possible destructible objects

295
00:13:47,733 --> 00:13:48,093
on the map.

296
00:14:23,329 --> 00:14:28,513
So here, I simply wanted to show you a short, more recent clip of what it looks like when

297
00:14:28,533 --> 00:14:32,696
the auto-players are playing Conquest, viewed from above with some debug drawing turned

298
00:14:32,856 --> 00:14:32,896
on.

299
00:14:59,887 --> 00:15:02,649
Visual inspection of the AI from the ground or above

300
00:15:03,369 --> 00:15:06,091
is not a very efficient method to detect patterns over time.

301
00:15:06,612 --> 00:15:08,333
And most of the time, no one will be looking

302
00:15:08,373 --> 00:15:09,374
at the automated tests.

303
00:15:10,415 --> 00:15:11,335
This is worth repeating.

304
00:15:11,456 --> 00:15:13,537
The tests need to produce data that you

305
00:15:13,557 --> 00:15:15,158
can use to validate them, since you

306
00:15:15,198 --> 00:15:17,260
can't be sure that human end users will do it for you.

307
00:15:18,286 --> 00:15:22,591
For the validation of autoplayers, we depend heavily on the telemetry system used for real players.

308
00:15:23,772 --> 00:15:26,876
A good way to analyze that data is in the 3D telemetry viewer.

309
00:15:27,377 --> 00:15:31,562
In this video, you can see the playback of a conquest session on Narvik.

310
00:15:32,403 --> 00:15:34,065
This is an old version of autoplayers.

311
00:15:36,256 --> 00:15:38,637
I've also used the telemetry workflows quite a bit

312
00:15:39,137 --> 00:15:39,998
on my local machine.

313
00:15:40,618 --> 00:15:42,439
If you look closer at the video you just saw,

314
00:15:43,019 --> 00:15:45,501
there were a bunch of pink boxes being generated.

315
00:15:45,821 --> 00:15:48,162
The pink boxes represent a player being killed

316
00:15:48,222 --> 00:15:50,083
because they were outside of the allowed game area.

317
00:15:50,863 --> 00:15:53,285
Scrubbing through this again with team colors turned on,

318
00:15:53,925 --> 00:15:55,646
it's clear that they're chasing enemies

319
00:15:55,686 --> 00:15:56,766
into their home areas,

320
00:15:57,527 --> 00:15:58,768
which is something they shouldn't be doing.

321
00:15:59,513 --> 00:16:02,214
This is a really early example where I immediately realized

322
00:16:02,274 --> 00:16:04,195
that I'd forgotten to do position validation

323
00:16:04,275 --> 00:16:05,115
when chasing an enemy.

324
00:16:05,135 --> 00:16:07,415
I mean, correcting that was quick and easy.

325
00:16:07,936 --> 00:16:11,296
Then I simply reran the same 64-player playtest locally

326
00:16:11,737 --> 00:16:14,677
with local telemetry and could verify the issue was fixed

327
00:16:14,777 --> 00:16:16,238
using the same tool that found it.

328
00:16:17,458 --> 00:16:20,859
So, telemetry visualization is useful to get a feel

329
00:16:21,159 --> 00:16:23,580
for what they're doing and find anomalies in their behavior.

330
00:16:25,963 --> 00:16:28,565
The initial validation of autoplayers

331
00:16:28,625 --> 00:16:31,507
was done by taking data, such as telemetry, crashes,

332
00:16:31,527 --> 00:16:34,149
and asserts produced by playtests with human players,

333
00:16:34,609 --> 00:16:36,771
and comparing that to data from an equivalent playtest

334
00:16:36,791 --> 00:16:37,491
with autoplayers.

335
00:16:38,072 --> 00:16:39,213
We call these mirror tests.

336
00:16:39,913 --> 00:16:41,614
The vast majority of these tests have

337
00:16:41,634 --> 00:16:44,436
been done on PC, which affects the numbers you will see later.

338
00:16:45,117 --> 00:16:47,298
For the mirror test, we track overlaps and crashes

339
00:16:47,318 --> 00:16:49,800
and asserts, but we can also look at the actual session

340
00:16:49,840 --> 00:16:50,261
heat maps.

341
00:16:51,036 --> 00:16:53,717
For the first test, we needed to use spare machines

342
00:16:53,777 --> 00:16:56,218
during the weekend and turning those on manually.

343
00:16:56,959 --> 00:16:58,019
And that's a lot of machines.

344
00:16:58,439 --> 00:17:00,580
So thank you, Paralingvel and Marian Kobus

345
00:17:00,600 --> 00:17:01,360
for making that happen.

346
00:17:02,701 --> 00:17:04,902
That process has now been largely automated.

347
00:17:05,182 --> 00:17:07,763
And for each human playtest, a corresponding auto playtest

348
00:17:07,783 --> 00:17:08,704
should be run on the farm.

349
00:17:11,085 --> 00:17:13,026
And here you can see the heat maps for two sessions,

350
00:17:13,806 --> 00:17:15,807
one with the playtest and one with the auto players.

351
00:17:16,247 --> 00:17:17,848
As you can see, there are some differences.

352
00:17:19,214 --> 00:17:25,000
Some of the hot zones shift slightly, the auto players have a tendency to both follow the exact same paths over and over,

353
00:17:25,521 --> 00:17:27,843
and they also tend to camp the flags closer.

354
00:17:29,025 --> 00:17:34,330
In general though, this does not show anything alarming, such as all auto players being stuck under the terrain,

355
00:17:34,871 --> 00:17:39,416
clustering only in one part of the map, or some other really bad thing that could potentially happen.

356
00:17:41,012 --> 00:17:44,533
As the primary purpose of the auto players is to provide test coverage,

357
00:17:44,973 --> 00:17:47,713
they also try to cover as many player configurations as possible.

358
00:17:48,414 --> 00:17:50,914
When they spawn, the kit that they use is picked at random.

359
00:17:51,394 --> 00:17:53,615
Normally for playtest, people will pick the default ones.

360
00:17:54,515 --> 00:17:57,856
Then the character will get either random or default unlocks.

361
00:17:58,336 --> 00:18:00,657
We want to make sure we test the default unlocks more,

362
00:18:01,317 --> 00:18:02,777
but not only the default unlocks.

363
00:18:03,657 --> 00:18:05,858
On respawn, there's a chance to redo this whole procedure.

364
00:18:07,205 --> 00:18:10,348
These little pie charts show the kills by weapon.

365
00:18:11,008 --> 00:18:12,649
As you can see, the auto players still

366
00:18:12,830 --> 00:18:14,591
use the default weapons to a high degree,

367
00:18:14,991 --> 00:18:17,173
but has a bigger spread in terms of weapons used.

368
00:18:19,314 --> 00:18:21,736
In addition to data produced continuously,

369
00:18:22,276 --> 00:18:24,098
analysts have done a manual deep dive

370
00:18:24,158 --> 00:18:27,340
on the crashes encountered on playtests and autoplaytests

371
00:18:27,420 --> 00:18:29,061
during two months to find details

372
00:18:29,121 --> 00:18:31,743
on what the autoplaytests might be missing compared

373
00:18:31,763 --> 00:18:32,664
to manual playtests.

374
00:18:33,498 --> 00:18:35,458
The left part of this graph, the green 49%,

375
00:18:35,839 --> 00:18:39,620
are crashes from the playtest the auto players have found.

376
00:18:40,360 --> 00:18:43,441
The yellow 15% are crashes that they haven't found,

377
00:18:43,981 --> 00:18:46,202
but that are similar enough to crashes

378
00:18:46,242 --> 00:18:47,682
that the auto players have found

379
00:18:48,063 --> 00:18:50,663
that they are judged likely to be found given enough time.

380
00:18:53,100 --> 00:18:55,501
The 36% that currently cannot be found

381
00:18:55,561 --> 00:18:57,802
have in this graph been further been split by cause.

382
00:18:58,623 --> 00:19:00,403
Since the auto players don't use the UI,

383
00:19:00,624 --> 00:19:03,565
the 13% UI crashes are not unexpected.

384
00:19:04,285 --> 00:19:06,386
The hardware and OS related crashes,

385
00:19:06,546 --> 00:19:10,628
which come down to the farm simply not representing

386
00:19:10,648 --> 00:19:11,869
the crashing configuration,

387
00:19:12,369 --> 00:19:13,630
was slightly higher than I expected, 16%.

388
00:19:15,111 --> 00:19:16,591
Again, this data is mostly from PC.

389
00:19:17,578 --> 00:19:20,499
The remaining very rare crashes we might never find,

390
00:19:21,060 --> 00:19:23,260
even if we in some way manage to cover the other areas.

391
00:19:24,981 --> 00:19:28,042
Now, if we remove the UI and hardware related crashes,

392
00:19:28,342 --> 00:19:30,883
which we know the auto players can't find no matter what they

393
00:19:30,923 --> 00:19:32,583
do, this is what we're left with.

394
00:19:34,464 --> 00:19:37,305
For stability testing, we're currently trying out a 50-50

395
00:19:37,365 --> 00:19:40,726
split of clients controlled by humans and clients controlled

396
00:19:40,766 --> 00:19:43,647
by auto players, and we will monitor those results closely.

397
00:19:45,634 --> 00:19:47,534
So, to tackle the problem today,

398
00:19:48,075 --> 00:19:49,995
rather than to wait for the machine learning future,

399
00:19:50,475 --> 00:19:52,896
we developed a bot system using classical game AI,

400
00:19:53,196 --> 00:19:53,656
auto players.

401
00:19:54,216 --> 00:19:55,636
Auto players allow anyone to set up

402
00:19:55,696 --> 00:19:57,356
full-scale multiplayer test scenarios

403
00:19:57,396 --> 00:19:58,717
where AI controls the players.

404
00:19:59,297 --> 00:20:01,277
They can be run in a full client server setup

405
00:20:01,637 --> 00:20:03,678
or all of it can be run on a single machine.

406
00:20:04,318 --> 00:20:06,938
Having this system allows us to leverage the hardware

407
00:20:07,338 --> 00:20:09,859
at our disposal and not be limited by humans.

408
00:20:11,285 --> 00:20:14,207
For Battlefield V, there are 601 game mode

409
00:20:14,247 --> 00:20:15,227
and feature test cases.

410
00:20:16,008 --> 00:20:19,049
It takes 330 client hours to run all these tests

411
00:20:19,109 --> 00:20:19,790
on all platforms.

412
00:20:20,470 --> 00:20:22,571
We have spent more than half a million hours

413
00:20:22,691 --> 00:20:24,592
running automated tests for Battlefield V,

414
00:20:25,332 --> 00:20:29,374
or put in another way, about 300 work years.

415
00:20:29,574 --> 00:20:31,555
178 of these tests contain auto players,

416
00:20:31,715 --> 00:20:34,017
and those tests take up over 50% of that time.

417
00:20:37,179 --> 00:20:40,640
AFK takeover deserves an honorable mention

418
00:20:40,840 --> 00:20:43,421
as it's so very useful and very simple to implement.

419
00:20:44,181 --> 00:20:47,583
What this means is that the AI automatically kicks in

420
00:20:47,703 --> 00:20:48,983
if the player has been inactive

421
00:20:49,063 --> 00:20:49,984
for a certain amount of time.

422
00:20:50,004 --> 00:20:52,045
You can watch the center bottom of the screen there.

423
00:20:53,025 --> 00:20:55,306
It's very useful while working on the AI,

424
00:20:55,606 --> 00:20:57,687
but it can also be used if you want the AI

425
00:20:57,727 --> 00:21:00,368
to take over for players that go AFK in a play test.

426
00:21:01,168 --> 00:21:03,129
Even if the bots haven't been polished for gameplay,

427
00:21:03,589 --> 00:21:04,650
it might be better than nothing.

428
00:21:07,306 --> 00:21:10,247
Multiplayer client stability testing was the primary goal,

429
00:21:10,427 --> 00:21:12,647
but now that we had a system, it turns out

430
00:21:12,687 --> 00:21:13,828
people could do a whole lot more.

431
00:21:14,568 --> 00:21:16,728
The following are just a few of many examples.

432
00:21:18,489 --> 00:21:21,169
Very early in the process, well before we

433
00:21:21,209 --> 00:21:23,890
done any thorough validation of the crash and assert data,

434
00:21:24,430 --> 00:21:25,911
autoplay tests started being used

435
00:21:25,951 --> 00:21:27,691
in addition to the automated fly-throughs

436
00:21:27,711 --> 00:21:28,691
for performance testing.

437
00:21:29,392 --> 00:21:32,232
All that had to be done was to run the autoplay test case

438
00:21:32,272 --> 00:21:33,613
instead of the fly-through test case,

439
00:21:34,233 --> 00:21:36,413
and 64 other players would show up and play the game.

440
00:21:37,552 --> 00:21:40,273
As it was no longer necessary to run a playtest with human

441
00:21:40,513 --> 00:21:43,254
for each configuration, numerous configurations

442
00:21:43,534 --> 00:21:45,335
could be explored, and the best could then

443
00:21:45,355 --> 00:21:48,036
be used on actual playtests to get more useful data out

444
00:21:48,076 --> 00:21:48,396
of those.

445
00:21:49,637 --> 00:21:52,258
This is also used for something akin to profile guided

446
00:21:52,298 --> 00:21:53,018
optimization.

447
00:21:53,658 --> 00:21:56,419
The game is run and restarted over and over again

448
00:21:56,539 --> 00:21:58,900
in many, many configurations for about 10 hours.

449
00:21:59,660 --> 00:22:02,921
And data is collected, such as DirectX 12 shader

450
00:22:02,941 --> 00:22:05,422
permutations, which can be extracted and fed

451
00:22:05,462 --> 00:22:06,163
into the next build.

452
00:22:08,867 --> 00:22:10,388
As we can create server auto-players,

453
00:22:10,488 --> 00:22:13,169
and the game server itself can run inside the client process,

454
00:22:13,249 --> 00:22:15,931
it's very, very easy to test these on your local machine.

455
00:22:16,591 --> 00:22:20,213
A lot of other tests depend on this ability, some QA workflows

456
00:22:20,273 --> 00:22:20,754
especially.

457
00:22:21,614 --> 00:22:23,335
So while the primary purpose of auto-players

458
00:22:23,395 --> 00:22:25,176
is to produce data not to look good,

459
00:22:25,677 --> 00:22:27,998
people can see them and do play against them.

460
00:22:28,538 --> 00:22:30,940
And as such, we've added a few small behaviors and tweaks

461
00:22:30,960 --> 00:22:32,881
to make the experience slightly less jarring.

462
00:22:34,884 --> 00:22:38,787
We can also use those server auto-players to fill up dedicated server game sessions

463
00:22:38,927 --> 00:22:41,149
if there aren't enough human players for a full round.

464
00:22:41,850 --> 00:22:45,633
This is not primarily used for gameplay testing, but the mirror test, for example,

465
00:22:46,074 --> 00:22:50,137
depend on this to fill the server's up to capacity as it doesn't run the full 64 clients.

466
00:22:52,785 --> 00:22:55,187
Auto players are also used to play through the single player campaign.

467
00:22:55,627 --> 00:22:58,429
DICE has a long tradition of keeping a scripted playthrough alive.

468
00:22:59,110 --> 00:23:02,152
The difference now is that it can be implemented in a way

469
00:23:02,212 --> 00:23:03,733
that is more resilient to changes

470
00:23:03,873 --> 00:23:06,415
and exercises the content in a more realistic way.

471
00:23:09,277 --> 00:23:11,879
Another way to run these tests is to use them to test the servers.

472
00:23:12,650 --> 00:23:14,391
But for these configurations, you instead

473
00:23:14,411 --> 00:23:17,473
want to minimize the impact of the test system on the server.

474
00:23:17,994 --> 00:23:20,715
This means that all the AI logic, such as navigation

475
00:23:20,775 --> 00:23:22,837
and objectives, et cetera, instead

476
00:23:22,917 --> 00:23:24,838
runs on the game clients, clients

477
00:23:24,878 --> 00:23:25,738
which run in the cloud.

478
00:23:28,140 --> 00:23:30,281
This is an example that we never imagined.

479
00:23:30,942 --> 00:23:33,303
Auto players are used to brute force the multiplayer maps,

480
00:23:33,603 --> 00:23:36,165
finding tons of spots where real human players would get stuck

481
00:23:36,225 --> 00:23:39,487
in collision geometry, forcing them to suicide and redeploy.

482
00:23:40,359 --> 00:23:42,441
This was made possible after some improvements

483
00:23:42,501 --> 00:23:44,083
to the unstuck behavior had been made,

484
00:23:44,603 --> 00:23:46,605
where raycasts are used by agents

485
00:23:46,625 --> 00:23:48,247
to find their way out of tricky situations

486
00:23:48,267 --> 00:23:49,027
when they get stuck.

487
00:23:49,588 --> 00:23:51,590
Now, this can be done locally and at high speeds,

488
00:23:52,070 --> 00:23:53,672
as it can be run with the server auto-players.

489
00:23:54,613 --> 00:23:55,533
Now, these are two examples.

490
00:23:55,573 --> 00:23:57,175
You might not even be able to see the characters

491
00:23:57,235 --> 00:23:58,436
as they blend in quite well.

492
00:23:59,237 --> 00:24:00,818
At the top, the character looks stuck

493
00:24:00,858 --> 00:24:02,360
between two trees and a rock,

494
00:24:02,580 --> 00:24:04,041
and at the bottom, in some debris.

495
00:24:06,488 --> 00:24:09,129
Working with independent hardware vendors and tech partners,

496
00:24:09,249 --> 00:24:11,710
the historical challenge has been that they cannot locally

497
00:24:11,770 --> 00:24:13,111
reproduce our stability issues,

498
00:24:13,591 --> 00:24:15,592
as they require 64-player playtests.

499
00:24:16,432 --> 00:24:19,314
On Battlefield 1, working with Frostbite on DX12,

500
00:24:19,354 --> 00:24:21,515
they wanted 100% local repros for these bugs,

501
00:24:22,195 --> 00:24:24,556
and it was impossible as it required lots of players

502
00:24:24,616 --> 00:24:26,297
doing crazy things simultaneously.

503
00:24:27,262 --> 00:24:30,023
For Battlefield V, auto players were used extensively

504
00:24:30,063 --> 00:24:31,063
to test DXR.

505
00:24:31,743 --> 00:24:33,664
You could simply run them on a single machine

506
00:24:33,724 --> 00:24:35,164
with an RTX card at the office,

507
00:24:35,845 --> 00:24:37,965
or send the auto play test configuration to NVIDIA

508
00:24:38,025 --> 00:24:39,306
and they could test things themselves.

509
00:24:40,606 --> 00:24:42,466
Another success story from Battlefield V

510
00:24:42,506 --> 00:24:44,647
includes tracking down an incredibly hard to find

511
00:24:44,827 --> 00:24:47,608
DX12 crash, which took weeks of auto player soaking,

512
00:24:48,068 --> 00:24:50,389
and involvement of multiple partners to track down.

513
00:24:51,029 --> 00:24:52,289
Our partners were able to do this

514
00:24:52,369 --> 00:24:54,070
with only guidance required from DICE.

515
00:24:56,054 --> 00:24:58,516
There are a lot more things that I would like to show you today

516
00:24:58,856 --> 00:25:01,238
and many more details to share, but that's all we had time for.

517
00:25:01,558 --> 00:25:04,700
So to wrap this up, with other players,

518
00:25:04,720 --> 00:25:08,083
we addressed the scaling problem to enable large-scale testing.

519
00:25:08,503 --> 00:25:10,604
We're ready for the future and ready for testing

520
00:25:10,705 --> 00:25:12,626
massive number of players in our game sessions.

521
00:25:13,386 --> 00:25:15,788
We empowered end users by using Frostbite schematics

522
00:25:15,888 --> 00:25:17,890
to unleash a lot of hidden testing potential.

523
00:25:18,650 --> 00:25:20,752
By trying to focus on what was required,

524
00:25:20,972 --> 00:25:23,073
we could manage with what, to me at least,

525
00:25:23,153 --> 00:25:24,775
was surprisingly simple behaviors.

526
00:25:26,572 --> 00:25:28,013
And this is just the beginning.

527
00:25:28,573 --> 00:25:30,294
We're still exploring the possibilities

528
00:25:30,314 --> 00:25:31,135
that this affords us.

529
00:25:31,495 --> 00:25:33,236
Now that we have these autonomous clients

530
00:25:33,256 --> 00:25:34,136
that can take orders,

531
00:25:34,736 --> 00:25:36,317
how can we use that to improve workflows?

532
00:25:37,017 --> 00:25:38,958
Are there more ways in which we could generate

533
00:25:39,038 --> 00:25:40,219
useful data automatically?

534
00:25:40,739 --> 00:25:42,980
Or will an interactive collaboration with the machines

535
00:25:43,020 --> 00:25:44,001
yield the best results?

536
00:25:45,161 --> 00:25:47,403
During the development of Battlefield V,

537
00:25:47,563 --> 00:25:48,923
auto players have gained momentum

538
00:25:49,023 --> 00:25:51,124
and have been expanded to multiple projects

539
00:25:51,164 --> 00:25:52,305
and studios across EA.

540
00:25:53,314 --> 00:25:55,634
We have access to vast quantities of data,

541
00:25:55,714 --> 00:25:57,275
and we need to leverage that.

542
00:25:57,435 --> 00:26:00,255
Better models, better feedback loops, better everything.

543
00:26:00,795 --> 00:26:02,496
This work has already been started,

544
00:26:02,616 --> 00:26:04,856
and there is some interesting progress,

545
00:26:05,456 --> 00:26:08,117
but there is a lot more that can be done,

546
00:26:08,137 --> 00:26:10,537
and I can hopefully speak on that topic at a future date.

547
00:26:11,477 --> 00:26:13,698
Now, I know we're short on time,

548
00:26:13,738 --> 00:26:15,178
but as some of you might have realized

549
00:26:15,198 --> 00:26:16,138
the first time I showed it,

550
00:26:16,278 --> 00:26:18,778
the intro video was created using footage

551
00:26:18,838 --> 00:26:20,979
of auto-players playing the game, not humans.

552
00:26:21,579 --> 00:26:22,639
So let's have a look at that again.

553
00:26:58,137 --> 00:26:58,445
Thank you.

