1
00:00:09,502 --> 00:00:10,462
So now it's working.

2
00:00:10,602 --> 00:00:11,843
So hi.

3
00:00:12,123 --> 00:00:12,683
Welcome, everyone.

4
00:00:13,584 --> 00:00:15,325
First of all, I'm supposed to tell you

5
00:00:15,385 --> 00:00:17,566
that you should turn off the sound on your mobile phones.

6
00:00:18,666 --> 00:00:19,867
My name is Mikkel.

7
00:00:20,067 --> 00:00:21,388
I'm a graphics programmer.

8
00:00:21,428 --> 00:00:22,608
This is Mikkel.

9
00:00:22,748 --> 00:00:24,549
He's a very technical artist.

10
00:00:25,450 --> 00:00:33,114
We work at Playdead, which is a Danish company that did a game.

11
00:00:34,469 --> 00:00:35,649
ages ago, it was called Limbo.

12
00:00:35,969 --> 00:00:37,470
And neither of us worked on that,

13
00:00:37,570 --> 00:00:41,971
but we worked on the follow-up title called Inside

14
00:00:41,991 --> 00:00:44,351
that's been in production for some six years or so.

15
00:00:45,132 --> 00:00:47,712
And that's what we'll be talking about today.

16
00:00:48,172 --> 00:00:50,173
More specifically, we'll be talking about the rendering.

17
00:00:50,713 --> 00:00:53,453
And we sort of selected some topics

18
00:00:53,493 --> 00:00:55,634
that we think would be relevant to other games

19
00:00:55,994 --> 00:00:59,495
that you can steal and implement in your own games,

20
00:00:59,855 --> 00:01:01,595
the same as we stole all your stuff.

21
00:01:03,295 --> 00:01:05,979
So yeah, before sort of diving into that,

22
00:01:06,280 --> 00:01:08,022
I'll show the trailer from E3 a couple years ago,

23
00:01:08,663 --> 00:01:10,406
so you sort of have an idea about the game

24
00:01:10,426 --> 00:01:10,987
that will be rented.

25
00:01:52,388 --> 00:01:58,311
REMEMBER NOT TO SEE

26
00:02:29,958 --> 00:02:30,239
Right.

27
00:02:31,239 --> 00:02:34,440
So as you can see, it's a 2 and 1 half D side-scrolling game.

28
00:02:35,081 --> 00:02:38,542
That means that we have full control over everything

29
00:02:38,562 --> 00:02:41,163
the player ever sees, because we're only ever moving

30
00:02:42,003 --> 00:02:42,424
rightwards.

31
00:02:43,224 --> 00:02:46,685
That means that our artists can go in and tweak every pixel.

32
00:02:47,085 --> 00:02:50,387
And in turn, that means that our art style heavily

33
00:02:50,407 --> 00:02:54,068
relies on these very subtle details of the art.

34
00:02:55,217 --> 00:02:57,540
That also means that from sort of a rendering point of view,

35
00:02:57,560 --> 00:02:59,422
we can't have too many artifacts that distract

36
00:02:59,923 --> 00:03:02,266
from these subtle details in the art.

37
00:03:03,507 --> 00:03:05,129
That's kind of a point that this whole

38
00:03:05,149 --> 00:03:06,171
will be revolving around.

39
00:03:07,275 --> 00:03:16,420
So from sort of a technical point of view, just to get that out of the way, we are releasing at 60Hz at 1080p on current consoles.

40
00:03:17,021 --> 00:03:24,265
And the engine we're using is a custom Uni-Z 5.0. We have source access for that, so we made some modifications.

41
00:03:25,085 --> 00:03:28,727
The rendering that we're doing is like a light pre-pass.

42
00:03:29,848 --> 00:03:33,949
renderer so that means that we have a base pass that outputs depth and normals

43
00:03:34,089 --> 00:03:38,671
we then have a light pass that that calculates light from those steps and

44
00:03:38,711 --> 00:03:42,352
normals and then we have a final pass that re-renders the entire frame and

45
00:03:42,372 --> 00:03:47,434
then applies the light and materials we then have a translucency pass and then

46
00:03:47,454 --> 00:03:50,355
we sort of wrap the whole thing up with a post effects pass.

47
00:03:51,931 --> 00:04:04,171
Alright, so one of the things, one of the effects I suppose, that's really sort of central to our art style and showed to be central to our art style quite early on is the fog.

48
00:04:06,375 --> 00:04:08,356
So actually, initially, we had a lot of scenes

49
00:04:08,396 --> 00:04:10,818
that were just geometry and fog.

50
00:04:10,838 --> 00:04:14,361
So we had like, everything was comprised of silhouettes

51
00:04:14,381 --> 00:04:15,662
and then this like depth fog.

52
00:04:16,302 --> 00:04:18,824
So to sort of show you how much mileage we get out of that,

53
00:04:19,225 --> 00:04:20,986
here's the scene without any fog.

54
00:04:21,526 --> 00:04:22,947
As you can see, that's quite bare.

55
00:04:23,047 --> 00:04:26,530
And then adding just a like a linear depth fog,

56
00:04:27,331 --> 00:04:27,591
we get

57
00:04:29,392 --> 00:04:32,294
actually quite a sort of moody scene from that.

58
00:04:32,354 --> 00:04:33,915
The only interesting bit we're really doing with this

59
00:04:33,976 --> 00:04:37,778
is that we're capping the fog at like a maximum level.

60
00:04:37,898 --> 00:04:41,741
So if we have really intense lights in the background,

61
00:04:42,301 --> 00:04:44,383
then those will still shine through.

62
00:04:44,423 --> 00:04:47,865
But otherwise, it's just like an open gel 1.0 linear fog

63
00:04:47,905 --> 00:04:48,586
that we use in the depth.

64
00:04:50,648 --> 00:04:55,851
Then we have this sort of light scattering post-effects emulation pass, and I kind of

65
00:04:55,891 --> 00:05:00,094
say that with a smile because really what we're doing is just blurring the entire scene

66
00:05:00,154 --> 00:05:01,595
and then blending that back on.

67
00:05:01,655 --> 00:05:06,898
So really it's just like a glow pass that our artists then used to sort of simulate

68
00:05:06,918 --> 00:05:08,279
this misty atmosphere.

69
00:05:08,819 --> 00:05:13,922
And that works surprisingly well, and is what we're using throughout the game.

70
00:05:14,823 --> 00:05:18,184
So now that we're using glow for this scattering effect,

71
00:05:18,204 --> 00:05:19,124
then how do we do glow?

72
00:05:19,184 --> 00:05:21,365
Well, we have a second pass where

73
00:05:21,405 --> 00:05:24,686
we do these really narrow, high intensity glows.

74
00:05:25,866 --> 00:05:28,407
So what we do is, like many have done before us,

75
00:05:28,467 --> 00:05:32,569
is that we write out a mask for emissive objects in the scene.

76
00:05:32,589 --> 00:05:35,189
And we then remap the intensity of that mask

77
00:05:35,269 --> 00:05:37,470
to a 0 to 7 HDR value and calculate bloom from that.

78
00:05:40,506 --> 00:05:43,549
So this is obvious in hindsight,

79
00:05:43,589 --> 00:05:46,993
but it wasn't really when we implemented it.

80
00:05:47,919 --> 00:05:51,242
it's, so when you calculate bloom from a pixel

81
00:05:51,822 --> 00:05:53,684
with a certain intensity, like if the bloom

82
00:05:55,045 --> 00:05:58,208
shows a certain intensity, then of course

83
00:05:58,228 --> 00:06:00,529
we need to render the source pixel with that intensity

84
00:06:00,550 --> 00:06:02,031
as well, otherwise there's like a difference

85
00:06:02,071 --> 00:06:02,591
between the two.

86
00:06:03,052 --> 00:06:05,213
So it's really like you just need to,

87
00:06:05,393 --> 00:06:08,296
if you use HDR, you of course need to calculate bloom

88
00:06:08,316 --> 00:06:12,519
from an HDR pixel, you of course need to actually

89
00:06:13,000 --> 00:06:16,002
show that pixel in with the HDR value as well.

90
00:06:16,880 --> 00:06:21,204
So the way we do the actual bloom filtering is the same as

91
00:06:21,525 --> 00:06:24,848
Jimenez in the Call of Duty presentation and Martin

92
00:06:24,868 --> 00:06:28,933
Mittring, I think from the Samaritan demo before him, in

93
00:06:28,973 --> 00:06:32,937
that we just downsample the image a number of times and

94
00:06:32,977 --> 00:06:36,421
blur while downsampling, and then we upsample and blur as

95
00:06:36,461 --> 00:06:37,001
well afterwards.

96
00:06:38,285 --> 00:06:41,388
So the way Jimenez did this was that during downsampling,

97
00:06:41,408 --> 00:06:45,313
he had this 13-tab filter that used to,

98
00:06:45,734 --> 00:06:48,597
like where every tab would sample four,

99
00:06:50,762 --> 00:06:53,723
for texels, but as you can see, even though he's doing that,

100
00:06:53,963 --> 00:06:56,364
he's still sampling some of the texels multiple times.

101
00:06:56,744 --> 00:06:59,625
So what we did then was to fit a nine tab,

102
00:07:00,305 --> 00:07:04,086
or nine tabs to these 13 tabs.

103
00:07:04,927 --> 00:07:07,407
And that actually works pretty well.

104
00:07:07,427 --> 00:07:10,328
So we get an error of like 8% at most

105
00:07:10,388 --> 00:07:13,850
on the bilinear weights, but in the end,

106
00:07:13,870 --> 00:07:14,890
we can't really tell the difference.

107
00:07:15,510 --> 00:07:16,871
Of course, one important thing about this

108
00:07:16,931 --> 00:07:18,791
is that this only works if you

109
00:07:19,992 --> 00:07:25,217
if you downsample to a size that's exactly half your original size.

110
00:07:25,637 --> 00:07:32,124
But that's not really an issue because you get the most benefit during the first couple of downsamples,

111
00:07:32,204 --> 00:07:33,945
like from full resolution to half resolution.

112
00:07:34,386 --> 00:07:37,269
So what we did was just to detect whether or not that was the case

113
00:07:37,329 --> 00:07:40,712
and then use the full 13 samples if it wasn't.

114
00:07:42,173 --> 00:07:45,055
Alright, so that means that we have a post-effects setup that looks like this.

115
00:07:45,115 --> 00:07:47,976
So we have all our light pre-pass rendering and translucency.

116
00:07:48,056 --> 00:07:51,238
We then run temporal anti-aliasing on top of all of that.

117
00:07:51,898 --> 00:07:59,102
We then run our two glow passes, which are separate but interleaved for performance reasons.

118
00:07:59,722 --> 00:08:05,825
And then in the end we do the HDR resolve, color resolve, and apply the glow and some other effects.

119
00:08:07,385 --> 00:08:10,086
All right, so back to the fog that we were talking about before.

120
00:08:10,586 --> 00:08:15,207
So it became apparent quite early on that we needed more control than just this global

121
00:08:15,707 --> 00:08:16,888
linear fog that we were using.

122
00:08:17,508 --> 00:08:23,530
So we implemented this local fog, like local light scattering.

123
00:08:24,170 --> 00:08:26,651
I'll talk a bit about how that worked.

124
00:08:28,330 --> 00:08:30,731
So in this scene, we have this guy with a flashlight,

125
00:08:30,771 --> 00:08:34,912
and that flashlight is calculated using this effect.

126
00:08:35,412 --> 00:08:37,733
So what we do is that for every pixel on screen,

127
00:08:37,773 --> 00:08:39,374
we ray march through the world,

128
00:08:39,834 --> 00:08:42,735
and for every step, we assemble the light function,

129
00:08:42,755 --> 00:08:45,436
so we assemble the shadow map and the projected texture

130
00:08:45,496 --> 00:08:47,097
and the falloff and that sort of thing.

131
00:08:47,157 --> 00:08:49,557
And if you do an uneven implementation of this,

132
00:08:49,577 --> 00:08:52,518
you end up with something that's really slow.

133
00:08:54,543 --> 00:08:56,404
So this, if you don't want artifacts,

134
00:08:56,564 --> 00:08:59,366
you need something along the lines of 128 samples.

135
00:09:00,006 --> 00:09:02,468
And if you sort of try to make that faster

136
00:09:02,488 --> 00:09:03,728
by reducing the number of samples,

137
00:09:03,748 --> 00:09:08,711
you get these horrific stair-stepping artifacts.

138
00:09:09,432 --> 00:09:11,273
And still it's quite slow.

139
00:09:11,393 --> 00:09:12,574
So what you can do then, of course,

140
00:09:12,614 --> 00:09:16,036
is you can add a little bit of noise into your ray offsets.

141
00:09:18,697 --> 00:09:19,778
But you,

142
00:09:21,050 --> 00:09:23,473
Yeah, so now it's actually even slower than it was before.

143
00:09:23,493 --> 00:09:24,454
And the reason for that, of course,

144
00:09:24,494 --> 00:09:26,756
is that we're now completely destroying texture cache

145
00:09:26,796 --> 00:09:29,058
because our neighboring pixels are sampling

146
00:09:29,358 --> 00:09:31,560
different points of the light textures.

147
00:09:32,701 --> 00:09:34,883
But there's something interesting about this

148
00:09:34,923 --> 00:09:37,646
because the eye is actually quite forgiving to the noise.

149
00:09:37,666 --> 00:09:40,688
So we can actually tell what it was supposed to look like.

150
00:09:40,728 --> 00:09:42,530
So that's an interesting property.

151
00:09:42,910 --> 00:09:44,091
So we should explore that further.

152
00:09:45,347 --> 00:09:49,289
So this is the same scene, except rather than using

153
00:09:50,490 --> 00:09:53,331
24 steps, we're using just three.

154
00:09:53,451 --> 00:09:55,933
And as you can see, that's a lot of noise

155
00:09:56,033 --> 00:09:57,233
that we get in the image.

156
00:09:57,633 --> 00:10:00,255
We can still kind of make out what it's supposed to be in,

157
00:10:00,655 --> 00:10:01,175
but not really.

158
00:10:02,116 --> 00:10:05,157
So what we can do instead is that we can use a biometrics.

159
00:10:07,278 --> 00:10:10,180
And that has, of course, it has less noise

160
00:10:10,200 --> 00:10:12,221
because there's no random in this.

161
00:10:12,301 --> 00:10:13,962
It's an entirely homogeneous pattern.

162
00:10:16,083 --> 00:10:20,705
And we also get better sampling because we now have,

163
00:10:21,385 --> 00:10:24,287
like within a small region, we have all possible values.

164
00:10:25,427 --> 00:10:26,608
So that means that sort of spatially,

165
00:10:27,008 --> 00:10:30,490
before, maybe we were sampling everywhere

166
00:10:30,750 --> 00:10:33,191
from each sample, but maybe we're not.

167
00:10:33,231 --> 00:10:34,572
Now we're certain that we're always,

168
00:10:34,772 --> 00:10:35,653
like within a small region,

169
00:10:35,673 --> 00:10:37,834
we're always sampling at all distances.

170
00:10:39,454 --> 00:10:42,595
But we get quite a lot of structure in this,

171
00:10:42,795 --> 00:10:45,135
and whereas the eye is quite forgiving towards noise,

172
00:10:45,155 --> 00:10:47,176
it definitely isn't towards patterns.

173
00:10:48,256 --> 00:10:51,177
So really what we want is something that has this property

174
00:10:52,057 --> 00:10:54,497
of changing at quite a high frequency

175
00:10:55,077 --> 00:10:56,578
while not being a pattern.

176
00:10:56,778 --> 00:10:59,458
So what we did then was that we used what's called

177
00:10:59,478 --> 00:11:02,699
blue noise, which is high-pass filtered noise,

178
00:11:03,219 --> 00:11:06,140
so obviously, which is high frequency.

179
00:11:06,980 --> 00:11:08,921
And that sort of has both these properties.

180
00:11:08,981 --> 00:11:13,623
So we get something that doesn't have the pattern

181
00:11:13,903 --> 00:11:18,145
and at the same time it changes quite rapidly, spatially.

182
00:11:19,897 --> 00:11:23,097
So, sort of stepping a little bit away from the noise

183
00:11:23,177 --> 00:11:26,818
and looking at how to best use these samples.

184
00:11:27,998 --> 00:11:32,279
The way we place, define fog volumes in the game

185
00:11:32,379 --> 00:11:34,699
is that we place boxes in the world.

186
00:11:35,039 --> 00:11:36,460
So of course, there's no reason for us

187
00:11:36,500 --> 00:11:37,860
to sample outside those boxes,

188
00:11:38,420 --> 00:11:41,421
and also there's no reason to sample outside of the light.

189
00:11:41,781 --> 00:11:45,241
So what we do then is that we do a geometric intersection

190
00:11:45,281 --> 00:11:46,842
between the geometry of the box

191
00:11:46,882 --> 00:11:48,882
and the geometry of the light frustum.

192
00:11:49,842 --> 00:11:51,883
And that essentially boils down to just

193
00:11:54,043 --> 00:11:56,404
intersecting the light frustum with all the planes

194
00:11:56,744 --> 00:11:59,044
of the box and then patching up the holes.

195
00:12:00,765 --> 00:12:02,905
All right, so that means we have like a two-pass algorithm

196
00:12:02,965 --> 00:12:05,366
where the first pass renders out the front faces

197
00:12:05,426 --> 00:12:08,666
and then the second pass does the actual ray marching

198
00:12:08,926 --> 00:12:11,327
and the first pass renders front faces,

199
00:12:11,447 --> 00:12:12,727
second pass renders the back faces

200
00:12:12,767 --> 00:12:14,108
and samples the front face texture.

201
00:12:14,548 --> 00:12:17,428
So we now have like the start and end for our ray.

202
00:12:18,768 --> 00:12:23,373
So this thing about using a box to define the fog volume

203
00:12:23,393 --> 00:12:24,754
is something we actually use for effects.

204
00:12:24,954 --> 00:12:28,617
So this is a scene where above water,

205
00:12:28,877 --> 00:12:33,101
we have one volume that just uses the.

206
00:12:35,211 --> 00:12:41,358
the textures from the light and sort of properties that makes it look like air.

207
00:12:41,538 --> 00:12:48,426
And below water we use an animated projected texture to simulate caustics.

208
00:12:48,546 --> 00:12:53,412
And then of course we change the fog properties to look like water instead.

209
00:12:54,840 --> 00:12:56,460
So one thing you may have noticed

210
00:12:56,520 --> 00:12:59,421
and that many others have noticed before us

211
00:12:59,481 --> 00:13:01,342
is that of course this is quite a smooth effect.

212
00:13:01,362 --> 00:13:04,322
We don't really need to calculate this per pixel.

213
00:13:04,422 --> 00:13:06,263
We can at least get away with sampling it

214
00:13:06,283 --> 00:13:07,003
at half resolution.

215
00:13:07,563 --> 00:13:09,264
So we do that, of course.

216
00:13:09,404 --> 00:13:11,504
So now we have a three-pass algorithm.

217
00:13:11,564 --> 00:13:12,705
Two passes are the same as before,

218
00:13:12,765 --> 00:13:14,285
but at half resolution.

219
00:13:14,345 --> 00:13:16,066
So we write out the front face depth,

220
00:13:16,106 --> 00:13:16,926
we do the ray matching,

221
00:13:17,326 --> 00:13:18,446
and then we have like a third pass

222
00:13:18,466 --> 00:13:21,107
that does a resolve to full resolution

223
00:13:22,267 --> 00:13:23,147
at a later stage.

224
00:13:24,557 --> 00:13:26,317
So while doing this opsampling,

225
00:13:27,138 --> 00:13:29,079
we add a little bit of blurring,

226
00:13:29,739 --> 00:13:32,220
and we do like an undersampled,

227
00:13:32,840 --> 00:13:35,982
an undersampled sort of noisy blur

228
00:13:37,082 --> 00:13:39,704
to break up the patterns that we would otherwise get

229
00:13:39,804 --> 00:13:43,245
from the half-resolution sampling.

230
00:13:44,415 --> 00:13:46,396
So one of the reasons why we do this is that

231
00:13:47,477 --> 00:13:49,578
we have temporal anti-aliasing running afterwards.

232
00:13:50,158 --> 00:13:52,819
So temporal anti-aliasing, at least in our implementation,

233
00:13:52,859 --> 00:13:55,421
is using neighborhood clipping.

234
00:13:56,121 --> 00:13:59,462
And that means that if we have a lot of different values

235
00:13:59,583 --> 00:14:04,785
within a neighborhood, it will accept more values.

236
00:14:05,245 --> 00:14:09,367
And so it's easier for it to smooth out per pixel noise,

237
00:14:09,427 --> 00:14:11,988
like at full resolution, rather than half resolution noise.

238
00:14:13,350 --> 00:14:15,752
So this is sort of a final image.

239
00:14:16,312 --> 00:14:19,435
This is six samples at half resolution.

240
00:14:19,876 --> 00:14:22,118
It's running at just below one millisecond

241
00:14:22,218 --> 00:14:25,140
if we sample every pixel on screen,

242
00:14:25,281 --> 00:14:27,042
which of course we don't.

243
00:14:27,282 --> 00:14:28,664
Actually, most of the time we're using

244
00:14:28,704 --> 00:14:29,905
just three samples per pixel.

245
00:14:30,946 --> 00:14:33,548
So that means that we are using just below

246
00:14:33,828 --> 00:14:35,890
one sample per full resolution pixel.

247
00:14:37,612 --> 00:14:41,034
So one of the reasons why we've been obsessing about the number of samples here is because

248
00:14:42,675 --> 00:14:44,376
this effect is bandwidth bound.

249
00:14:44,416 --> 00:14:48,599
Sampling the shadow maps and the projected textures is really what bottlenecking is.

250
00:14:49,600 --> 00:14:52,802
So we of course also do all the other things to reduce bandwidth.

251
00:14:52,922 --> 00:14:56,024
Like we use a lower resolution shadow map,

252
00:14:56,425 --> 00:14:58,646
we use lower resolution projected textures.

253
00:15:01,213 --> 00:15:04,095
to, yeah, and of course the shadow map

254
00:15:04,396 --> 00:15:09,819
can be lower resolution than for the opaque lighting passes

255
00:15:10,319 --> 00:15:12,541
because it's such a smooth effect.

256
00:15:13,301 --> 00:15:16,223
So the way that fits into our render pipeline is like this.

257
00:15:16,303 --> 00:15:19,165
So the lighting pass, during the lighting pass

258
00:15:19,185 --> 00:15:21,887
we save off the shadow maps that we'll need later on.

259
00:15:22,167 --> 00:15:24,669
We then do our two initial passes

260
00:15:24,729 --> 00:15:27,791
and end up with a volume light texture.

261
00:15:27,991 --> 00:15:29,615
and then during the translucency pass,

262
00:15:30,016 --> 00:15:33,585
we re-render the clipped geometry

263
00:15:34,006 --> 00:15:35,850
and solve that with other translucencies.

264
00:15:37,441 --> 00:15:40,042
So this thing about sort of playing into the hand

265
00:15:40,062 --> 00:15:41,402
of temporal anti-aliasing is something

266
00:15:41,422 --> 00:15:43,122
that we actually do in quite a lot of places.

267
00:15:43,622 --> 00:15:46,923
So this example is the depth of field we're doing.

268
00:15:47,003 --> 00:15:50,084
We have sort of planes that we can put into the world

269
00:15:50,124 --> 00:15:51,604
that will calculate depth of field.

270
00:15:52,344 --> 00:15:54,565
And we do like an undersampled blur again

271
00:15:54,665 --> 00:15:56,805
and the temporal anti-aliasing will come

272
00:15:57,005 --> 00:15:58,866
and pick up all the noise and smooth it out.

273
00:15:59,526 --> 00:16:01,286
We also do that for shadows.

274
00:16:04,110 --> 00:16:11,656
And an interesting thing here is that even though this sort of jittered sampling entirely destroys the texture cache,

275
00:16:11,676 --> 00:16:15,540
it's still actually faster than doing just a single sample,

276
00:16:16,000 --> 00:16:20,324
because we can render the shadow maps at a lower resolution,

277
00:16:21,005 --> 00:16:23,967
because the soft penumbra is larger than the...

278
00:16:24,768 --> 00:16:26,949
than otherwise, which is why we can get away with it.

279
00:16:27,470 --> 00:16:28,410
So I just wanted to show how,

280
00:16:28,771 --> 00:16:30,532
like this is sort of our go-to pattern

281
00:16:30,632 --> 00:16:33,194
for doing this undersampled blurring.

282
00:16:34,034 --> 00:16:35,755
And essentially it just boils down to

283
00:16:37,436 --> 00:16:41,779
to having each sample cover the same area as,

284
00:16:43,060 --> 00:16:45,282
well, all samples cover equal areas.

285
00:16:47,482 --> 00:16:54,448
Right, so I'll talk about another effect that was really important to get the look of the

286
00:16:54,468 --> 00:16:56,029
game, which is dithering.

287
00:16:57,266 --> 00:16:58,727
So this is a frame from the game,

288
00:16:59,027 --> 00:17:00,728
and I've sort of adjusted the luminance

289
00:17:00,748 --> 00:17:02,528
so we can see what's going on a little bit better.

290
00:17:04,189 --> 00:17:05,350
This is actually a really good example

291
00:17:05,450 --> 00:17:07,951
of this sort of subtle detail I was talking about,

292
00:17:07,991 --> 00:17:12,553
where we have a lot of really fine sort of gradients

293
00:17:12,673 --> 00:17:13,413
out in the background.

294
00:17:14,434 --> 00:17:17,535
This image actually contains quite a lot of noise.

295
00:17:17,955 --> 00:17:19,096
You probably can't see that,

296
00:17:19,136 --> 00:17:21,677
but if we turn it off, it looks like this.

297
00:17:22,257 --> 00:17:24,458
See if that, yeah, I think that looks horrible.

298
00:17:24,778 --> 00:17:25,098
That's good.

299
00:17:26,739 --> 00:17:31,200
So what we get here is quite a lot of banding really.

300
00:17:31,220 --> 00:17:34,781
So we have these really high frequency changes,

301
00:17:34,841 --> 00:17:36,802
all these sharp lines during the image,

302
00:17:37,742 --> 00:17:38,322
throughout the image.

303
00:17:39,162 --> 00:17:43,103
And we also have these sort of rainbow-like effects

304
00:17:43,844 --> 00:17:46,364
where the color is completely destroyed.

305
00:17:46,384 --> 00:17:48,225
And of course that happens because our red, green,

306
00:17:48,245 --> 00:17:50,025
and blue quantizes at different points.

307
00:17:50,794 --> 00:17:52,915
And also it animates, so it's really quite distracting,

308
00:17:52,975 --> 00:17:56,819
not really something we can live with

309
00:17:57,439 --> 00:18:00,442
and or use with the art style that we intend.

310
00:18:01,763 --> 00:18:03,424
So the reason why this happens is of course

311
00:18:03,665 --> 00:18:07,268
that we are writing into 8-bit per channel render targets.

312
00:18:07,408 --> 00:18:09,049
So as you can see on the line,

313
00:18:09,089 --> 00:18:10,110
that means that we get this sort of

314
00:18:10,130 --> 00:18:14,274
stair-stepping artifact, which looks like banding.

315
00:18:15,118 --> 00:18:17,760
The reason for that, of course, is that 8 bits are not enough,

316
00:18:18,221 --> 00:18:20,743
like nearly the human eye is able to perceive something

317
00:18:20,864 --> 00:18:22,105
along the lines of 16 bits.

318
00:18:22,585 --> 00:18:25,028
So we could have, of course, just used higher precision

319
00:18:25,128 --> 00:18:27,650
render targets, but then for performance reasons

320
00:18:27,750 --> 00:18:31,094
on some platforms, that will be an issue.

321
00:18:32,355 --> 00:18:34,097
There are other ways of sort of getting about this.

322
00:18:34,157 --> 00:18:37,560
We could use sRGB color compression instead, but...

323
00:18:38,421 --> 00:18:41,969
Again, on some platforms that has interesting

324
00:18:42,611 --> 00:18:46,119
implementations and so we chose to explore

325
00:18:46,139 --> 00:18:46,901
dithering a bit further.

326
00:18:48,030 --> 00:18:53,274
So an example of how this works is that you just add like one bit of noise.

327
00:18:53,795 --> 00:19:01,600
So if we look at this, we look at the value of 0.75 bits and add one bit of noise, that

328
00:19:01,620 --> 00:19:07,945
means that 75% of the time, because it's an entirely uniform noise, we end up at quantizing

329
00:19:07,985 --> 00:19:08,265
to the...

330
00:19:09,366 --> 00:19:13,869
the value above and 25% of the time we end up quantizing to the value below.

331
00:19:13,889 --> 00:19:19,093
So on average we actually get exactly the signal that we put into it.

332
00:19:20,754 --> 00:19:26,818
So just to sort of show how to do this, this is a fragment program or pixel shader

333
00:19:27,498 --> 00:19:35,284
and how to do the dithering is you just add a random number that is 1 bit.

334
00:19:36,931 --> 00:19:42,761
big on output. So just keep this in mind that this is actually spectacularly easy to add

335
00:19:42,841 --> 00:19:47,649
and there's no real reason why games should ship with banding these days.

336
00:19:48,923 --> 00:19:50,464
All right, so let's look a little bit more

337
00:19:50,504 --> 00:19:52,205
about at what's going on.

338
00:19:52,245 --> 00:19:55,027
So here in the top, we have the signal,

339
00:19:55,047 --> 00:19:57,589
then we have the quantized band D output,

340
00:19:58,090 --> 00:20:00,351
and then the third row shows the error

341
00:20:00,371 --> 00:20:02,593
between the signal and the output.

342
00:20:03,013 --> 00:20:06,396
So if we add noise to it, we then see that already

343
00:20:06,436 --> 00:20:08,257
we have something that's a lot smoother.

344
00:20:08,978 --> 00:20:11,800
We see the error is not very uniform,

345
00:20:11,840 --> 00:20:13,281
and if we look at the variance at the bottom,

346
00:20:13,321 --> 00:20:16,624
we can see that definitely we have these sort of weird humps.

347
00:20:17,204 --> 00:20:19,288
If we animate the signal, we can see that we have these,

348
00:20:19,728 --> 00:20:22,333
it becomes quite apparent that we have these areas

349
00:20:22,493 --> 00:20:25,778
of no noise, which is interesting.

350
00:20:25,858 --> 00:20:28,262
So what's going on there is something called

351
00:20:28,463 --> 00:20:29,164
noise modulation.

352
00:20:32,932 --> 00:20:38,934
that means that the resulting noise is actually dependent on the signal.

353
00:20:39,955 --> 00:20:42,296
It turns out that's a property of the type of noise we're using.

354
00:20:42,696 --> 00:20:45,417
So rather than using this uniform white noise,

355
00:20:45,517 --> 00:20:48,318
we can switch to a triangulately distributed noise

356
00:20:49,759 --> 00:20:53,040
that has a little bit like two bits worth of that,

357
00:20:53,560 --> 00:20:54,661
and we get an output that...

358
00:20:56,782 --> 00:21:01,064
where the noise is independent of the original signal.

359
00:21:01,504 --> 00:21:03,645
So if we go back and apply that instead,

360
00:21:03,685 --> 00:21:06,027
we can see that we now have an error

361
00:21:06,087 --> 00:21:07,747
that is much more uniform.

362
00:21:08,428 --> 00:21:10,389
And if we animate it, we can see that these sort of bands

363
00:21:10,629 --> 00:21:13,070
of less noise have disappeared.

364
00:21:14,685 --> 00:21:16,586
All right, but we've then added quite a lot of noise

365
00:21:16,626 --> 00:21:17,967
to the signal, so what can we do about that?

366
00:21:18,027 --> 00:21:19,989
Well, we can go back and then look,

367
00:21:20,349 --> 00:21:21,590
try different types of noise,

368
00:21:21,830 --> 00:21:23,651
like the blue noise that we were using for the sampling.

369
00:21:24,452 --> 00:21:27,594
And that actually works out really well.

370
00:21:27,854 --> 00:21:30,356
So again, if we animate it, we can see that we now

371
00:21:31,397 --> 00:21:36,361
still don't have these bands of no noise,

372
00:21:36,401 --> 00:21:37,842
and also we have much less noise

373
00:21:37,882 --> 00:21:42,365
than just using the triangularly distributed regular noise.

374
00:21:44,273 --> 00:21:48,154
All right, so what we've done is that we've baked

375
00:21:48,174 --> 00:21:50,654
a blue noise, a high-pass filter noise, into a texture,

376
00:21:50,674 --> 00:21:53,075
and we just sampled that and add that,

377
00:21:53,095 --> 00:21:54,595
the same as the example before.

378
00:21:56,196 --> 00:21:59,696
In the cases where we are bandwidth limited,

379
00:22:00,697 --> 00:22:03,157
we use an ALU-based version instead,

380
00:22:03,377 --> 00:22:04,498
which is essentially just adding

381
00:22:04,518 --> 00:22:05,538
two random numbers together.

382
00:22:07,115 --> 00:22:11,921
Alright, so now that we know how to dither, we should look at what to dither.

383
00:22:12,182 --> 00:22:19,230
So this is an example of a single spotlight shining very bandy light into the scene.

384
00:22:19,450 --> 00:22:22,794
And so of course the first thing we do is that we dither the light path.

385
00:22:24,222 --> 00:22:27,966
So that looks like this, and that's already really good,

386
00:22:28,206 --> 00:22:30,388
but we can see that we have these sort of,

387
00:22:30,728 --> 00:22:32,450
like the noise is not entirely uniform,

388
00:22:32,490 --> 00:22:34,191
we have these sort of waves in the noise.

389
00:22:34,772 --> 00:22:38,235
And the reason for this is not, as you could expect,

390
00:22:38,335 --> 00:22:39,716
because of the type of noise we're using,

391
00:22:39,917 --> 00:22:43,340
it's just because we are sampling the light buffer

392
00:22:43,660 --> 00:22:45,842
in the final pass and then writing that out

393
00:22:46,002 --> 00:22:48,724
into an 8-bit buffer, again, or 20-bit buffer,

394
00:22:48,765 --> 00:22:49,825
but 8 bits per channel.

395
00:22:50,446 --> 00:22:53,308
So if we did that as well, we get this result,

396
00:22:53,388 --> 00:22:58,192
which has entirely uniform noise, which is much better.

397
00:22:59,353 --> 00:23:01,975
So of course, we need to do the translucency pass as well,

398
00:23:02,576 --> 00:23:05,218
maybe even more important than all the other passes,

399
00:23:05,679 --> 00:23:08,921
because during blending, we tend to write to each pixel

400
00:23:08,941 --> 00:23:12,744
quite a lot, and then of course, re-quantize.

401
00:23:12,784 --> 00:23:15,206
So it's quite important that we add noise

402
00:23:15,266 --> 00:23:17,728
to all those passes, because each pixel

403
00:23:17,768 --> 00:23:19,910
will get re-quantized quite a lot.

404
00:23:21,115 --> 00:23:24,557
The post effects passes tend to read and write from buffers

405
00:23:24,677 --> 00:23:26,718
quite a lot as well, so of course we need to dither those

406
00:23:26,798 --> 00:23:30,919
as well to sort of make sure that this really wide,

407
00:23:31,159 --> 00:23:33,880
light fog scattering, light scattering glow

408
00:23:34,881 --> 00:23:37,082
was entirely banding free.

409
00:23:37,142 --> 00:23:38,762
We actually ended up using 10 bits

410
00:23:39,403 --> 00:23:43,644
and sort of power of two compressing the colors

411
00:23:44,124 --> 00:23:46,105
and also dithering, and then that means

412
00:23:46,125 --> 00:23:49,306
that we are entirely banding free for those as well.

413
00:23:50,395 --> 00:23:54,277
So far we've been talking about banding in colors,

414
00:23:54,337 --> 00:23:57,979
but really this is an artifact of the quantization.

415
00:23:58,359 --> 00:23:59,839
Doesn't really have anything to do with colors.

416
00:24:00,460 --> 00:24:03,601
So of course this affects our normals as well,

417
00:24:03,621 --> 00:24:06,042
so when writing out the normals in the first pass,

418
00:24:06,562 --> 00:24:10,204
we write those out to low-precision buffers as well,

419
00:24:10,264 --> 00:24:12,665
and we of course need to do that as well.

420
00:24:12,705 --> 00:24:13,765
We don't actually do that everywhere,

421
00:24:13,805 --> 00:24:16,526
we just do it in sort of the specific spots where we

422
00:24:18,569 --> 00:24:24,584
where we have really high intensity speculars where that's actually an issue.

423
00:24:25,780 --> 00:24:29,963
Alright, so now we know everything that writes into 8-bit per channel buffers.

424
00:24:29,983 --> 00:24:30,924
Is there anything else?

425
00:24:31,004 --> 00:24:36,168
Well, animating the noise is a really good idea because if you don't, then you sort of

426
00:24:36,208 --> 00:24:41,652
get this sort of dusty lens effect that's static when you move around, which looks weird.

427
00:24:41,752 --> 00:24:45,155
Another reason to animate the noise is that we are running this temporal anti-aliasing

428
00:24:45,195 --> 00:24:50,679
pass afterwards, so animating it means that the temporal anti-aliasing will actually go

429
00:24:50,719 --> 00:24:54,882
and soak up a lot of this noise because it's integrating it over time.

430
00:24:56,816 --> 00:25:03,322
Something else to think about is that your device when outputting to TV or other device

431
00:25:05,845 --> 00:25:13,252
may convert the signal if you're not using the right output. So you should make sure

432
00:25:13,272 --> 00:25:13,773
to, you know,

433
00:25:18,294 --> 00:25:21,295
match the expected output as closely as possible.

434
00:25:22,055 --> 00:25:23,736
For example, limited range RGB.

435
00:25:23,836 --> 00:25:26,377
If you know that that's what your device will be outputting

436
00:25:26,397 --> 00:25:28,138
then make sure that you do that

437
00:25:28,178 --> 00:25:30,939
so you can properly dither the signal yourself.

438
00:25:31,920 --> 00:25:36,142
And also, of course, UI tends to be transparent

439
00:25:36,242 --> 00:25:38,883
and have lots of layers and fade in and out,

440
00:25:38,963 --> 00:25:41,224
so it's quite important to dither that as well.

441
00:25:41,244 --> 00:25:45,205
All right, I'll end here and hand it over

442
00:25:45,245 --> 00:25:46,206
to the other maker.

443
00:25:47,422 --> 00:25:47,662
Thanks.

444
00:25:51,963 --> 00:25:52,183
Hi.

445
00:25:54,023 --> 00:25:56,884
So the first thing I wanna show a little bit

446
00:25:56,924 --> 00:25:58,905
and talk about a bit is custom lighting

447
00:25:59,285 --> 00:26:01,606
or lights with custom light functions.

448
00:26:02,466 --> 00:26:05,447
And we do these and we can do these

449
00:26:05,507 --> 00:26:10,168
because we're using light pre-pass as our rendering loop.

450
00:26:12,069 --> 00:26:14,550
From that, we can then not just render our points,

451
00:26:14,650 --> 00:26:15,751
our spots, and our directs.

452
00:26:16,952 --> 00:26:19,193
We can actually just render about any piece of geometry

453
00:26:19,233 --> 00:26:20,874
with any shader that we'd like,

454
00:26:20,934 --> 00:26:24,076
as long as it contributes to lighting in some way.

455
00:26:24,997 --> 00:26:25,877
So we have a few of these.

456
00:26:25,997 --> 00:26:30,680
I'm just gonna go into depth of three of our types.

457
00:26:30,940 --> 00:26:32,181
The first one is the bounce light.

458
00:26:33,402 --> 00:26:34,823
So the bounce light is pretty much

459
00:26:34,843 --> 00:26:38,305
just something that we use for subtle lighting

460
00:26:38,565 --> 00:26:40,466
or global illumination in some cases.

461
00:26:41,387 --> 00:26:46,670
as the name suggests, and it's pretty much just a normal

462
00:26:46,750 --> 00:26:49,291
Lambertini in point light, but with a small twist.

463
00:26:50,232 --> 00:26:54,414
And that small twist is we have a slider that can

464
00:26:55,134 --> 00:26:58,136
take that end of the product and wrap it all the way

465
00:26:58,156 --> 00:27:01,118
to the back, making it a half Lambert at the half point,

466
00:27:02,018 --> 00:27:05,160
or slide it all the way behind and just make it a fully

467
00:27:05,720 --> 00:27:07,681
sort of ambient turn with just a fall off.

468
00:27:08,802 --> 00:27:11,122
which gives much smoother, softer results

469
00:27:11,162 --> 00:27:12,563
when you really don't want it to be obvious

470
00:27:12,603 --> 00:27:15,364
where the light is actually coming from in these cases.

471
00:27:18,065 --> 00:27:21,906
They get used in somewhat creative ways

472
00:27:21,966 --> 00:27:23,046
because they're not static,

473
00:27:23,546 --> 00:27:27,087
so typically for windows that open and let light in,

474
00:27:27,247 --> 00:27:28,568
we put one there and fade it in,

475
00:27:29,708 --> 00:27:31,569
or spotlights that hit the ground

476
00:27:31,689 --> 00:27:33,389
and want to cast something off from there

477
00:27:36,030 --> 00:27:37,130
when appropriate.

478
00:27:38,107 --> 00:27:42,470
And one thing about putting these around is

479
00:27:42,930 --> 00:27:46,132
we could just distribute them along a line

480
00:27:46,172 --> 00:27:48,874
if we had a corridor or a range of windows,

481
00:27:49,414 --> 00:27:51,896
but creating this sort of sausage of point lights

482
00:27:51,996 --> 00:27:54,058
would be a little bit redundant,

483
00:27:54,098 --> 00:27:56,619
both setup-wise and also overdraw-wise.

484
00:27:56,699 --> 00:28:00,502
So simple trick, we actually just let you scale it

485
00:28:00,542 --> 00:28:04,105
non-uniformly by using the scaling matrix

486
00:28:04,145 --> 00:28:06,466
that we have already been granted so far.

487
00:28:07,287 --> 00:28:10,588
And yeah, it just fits rooms much better.

488
00:28:12,168 --> 00:28:14,529
Second of all, and a little more interesting,

489
00:28:14,569 --> 00:28:15,849
is our AO decals.

490
00:28:17,249 --> 00:28:20,650
So we cannot just render any shader we want here.

491
00:28:20,670 --> 00:28:23,351
We can actually render whatever blend mode we want as well.

492
00:28:23,931 --> 00:28:26,832
So rather than using additive lights,

493
00:28:26,852 --> 00:28:29,733
we actually have multiplicative lights, if you will,

494
00:28:30,993 --> 00:28:32,954
to draw other types of things.

495
00:28:33,874 --> 00:28:37,055
And the reason we're doing ambient occlusion with decals

496
00:28:37,155 --> 00:28:39,275
instead of screen spaces is because we would like

497
00:28:39,675 --> 00:28:42,376
local control, we want to know which objects

498
00:28:42,436 --> 00:28:44,296
are casting these things, and we want to control

499
00:28:44,316 --> 00:28:46,397
our intensity, and we don't want any screen space

500
00:28:46,957 --> 00:28:50,418
artifacts, like things being off, out of bounds,

501
00:28:50,538 --> 00:28:52,918
or occluded by something, so it doesn't cast well.

502
00:28:53,758 --> 00:28:54,618
So we end up with these.

503
00:28:55,058 --> 00:28:58,039
And we have three types, and let's dive in a little bit.

504
00:28:59,199 --> 00:29:00,060
The first one is the point.

505
00:29:01,092 --> 00:29:03,173
So points is something we use mostly,

506
00:29:03,253 --> 00:29:04,733
or typically for characters,

507
00:29:05,874 --> 00:29:07,475
to ground them to the ground,

508
00:29:07,515 --> 00:29:08,735
and themselves, and each other.

509
00:29:09,596 --> 00:29:11,877
And in this particular screenshot,

510
00:29:11,897 --> 00:29:14,318
I think there are about 100 of them or so,

511
00:29:15,098 --> 00:29:18,860
because we actually put one on each limb,

512
00:29:18,900 --> 00:29:20,741
or each bone of the character,

513
00:29:20,761 --> 00:29:23,382
and just stretch them to fit as well as possible,

514
00:29:23,783 --> 00:29:25,123
and it gives these results.

515
00:29:26,529 --> 00:29:30,511
and the implementation is really, really simple.

516
00:29:31,071 --> 00:29:32,893
If you have a bounce light, you know,

517
00:29:32,913 --> 00:29:34,093
a half-lambert point light,

518
00:29:34,894 --> 00:29:37,316
and you just make a move, it's applicative,

519
00:29:38,036 --> 00:29:38,977
you're actually there.

520
00:29:41,138 --> 00:29:44,681
So, in this case, we don't expose a wrap-around parameter.

521
00:29:44,701 --> 00:29:46,402
We just, you know, made a half Lambert,

522
00:29:47,203 --> 00:29:48,263
and we have a fixed falloff.

523
00:29:48,283 --> 00:29:49,564
We really want the control to be simple.

524
00:29:49,584 --> 00:29:50,705
We're placing hundreds of these,

525
00:29:50,725 --> 00:29:51,666
so we don't really want to have

526
00:29:52,867 --> 00:29:54,208
too many sliders to worry about.

527
00:29:54,889 --> 00:29:56,470
It's a really effective way of

528
00:29:57,871 --> 00:30:00,073
getting ambient occlusion on our characters for cheap Cs.

529
00:30:02,223 --> 00:30:03,763
Second of all, we have a sphere.

530
00:30:04,063 --> 00:30:05,243
So very similar to the point,

531
00:30:05,283 --> 00:30:08,084
except with a little bit more added to it.

532
00:30:08,104 --> 00:30:09,964
So we use this for larger occluders

533
00:30:10,024 --> 00:30:11,325
like this here Submarino.

534
00:30:12,305 --> 00:30:16,026
And the difference is we want harder contact shadows

535
00:30:16,226 --> 00:30:20,286
as the light, or as the submarine gets close to the ground.

536
00:30:20,306 --> 00:30:22,947
So you can really see that contact happening there.

537
00:30:24,007 --> 00:30:25,888
If you have a regular Lambert point,

538
00:30:26,328 --> 00:30:27,948
the code will look something like this.

539
00:30:27,968 --> 00:30:29,868
It's gonna end with a little dot product.

540
00:30:31,049 --> 00:30:35,536
And with this you just get the angle between the point and the surface and that's not really what we're interested in.

541
00:30:38,006 --> 00:30:40,628
What we're interested in is getting the solid angle

542
00:30:40,688 --> 00:30:42,469
between these things, the coverage,

543
00:30:43,790 --> 00:30:45,911
that the sphere has on our hemisphere

544
00:30:46,932 --> 00:30:49,494
in sort of a cone-based coverage fashion.

545
00:30:49,514 --> 00:30:50,915
And the way we do that is,

546
00:30:50,955 --> 00:30:52,556
if we have this normalization term

547
00:30:52,616 --> 00:30:55,378
that we would apply to our local position

548
00:30:55,438 --> 00:30:56,699
to make it a direction,

549
00:30:56,719 --> 00:30:59,341
we just take that version

550
00:30:59,681 --> 00:31:02,043
and turn it into this version, actually.

551
00:31:02,223 --> 00:31:02,523
And that.

552
00:31:03,804 --> 00:31:08,168
actually gives us what we need to achieve this result.

553
00:31:09,269 --> 00:31:12,172
Assuming that we don't have any intersecting geometry,

554
00:31:12,212 --> 00:31:15,215
assuming that that sub-brain doesn't clip

555
00:31:15,255 --> 00:31:16,917
through the world, and we do assume

556
00:31:16,937 --> 00:31:17,978
that that's not happening.

557
00:31:19,505 --> 00:31:21,026
And finally, boxes.

558
00:31:21,847 --> 00:31:24,489
So we have a few boxes around the game

559
00:31:24,509 --> 00:31:27,792
that we drag around for puzzles and such.

560
00:31:28,873 --> 00:31:32,557
And we needed a specific implementation for these guys.

561
00:31:33,758 --> 00:31:37,001
So implementation for boxes, quite empirical,

562
00:31:37,041 --> 00:31:37,861
and it looks like this.

563
00:31:38,882 --> 00:31:43,283
It starts off with an unsigned distance function,

564
00:31:44,023 --> 00:31:46,604
and we then get the angle around that distance

565
00:31:48,404 --> 00:31:49,345
to get the sides.

566
00:31:52,025 --> 00:31:53,726
But the unsigned distance actually gives us

567
00:31:53,806 --> 00:31:54,946
too hard of an angle,

568
00:31:54,986 --> 00:31:57,087
like there's a real hard cut there at the midpoint.

569
00:31:57,667 --> 00:32:00,767
So what we instead do is get the square distance instead,

570
00:32:01,087 --> 00:32:02,088
which is still unsigned,

571
00:32:02,168 --> 00:32:04,748
but it has the first gradient just smoothed right out.

572
00:32:05,405 --> 00:32:06,365
giving a much better result.

573
00:32:06,725 --> 00:32:09,846
And if you want to see what one of those sides looks like,

574
00:32:09,986 --> 00:32:11,346
it's up there on the top.

575
00:32:11,866 --> 00:32:14,887
Kind of looks like an area light caster.

576
00:32:16,247 --> 00:32:19,108
And composing all six sides together

577
00:32:19,168 --> 00:32:20,248
gives us the result below.

578
00:32:23,089 --> 00:32:27,110
And this is not physically correct in any way.

579
00:32:27,210 --> 00:32:29,791
It's empirically based by all means.

580
00:32:30,191 --> 00:32:33,331
It just kind of looks like a box occlusion, you know?

581
00:32:34,725 --> 00:32:40,190
Finally, shadow decals. This is actually the simplest of all these light types.

582
00:32:41,991 --> 00:32:48,758
They don't have any light function really, they're just a projected texture that we project into the world.

583
00:32:49,078 --> 00:32:52,861
Here, they're obviously not there, but if we wanted to ground that, it would look like this.

584
00:32:54,930 --> 00:32:59,333
So the good thing about these is we can actually get some grounding on scenes that have no

585
00:32:59,393 --> 00:33:06,797
shadow casting lights and just have ambient lighting and still get our objects look not

586
00:33:06,877 --> 00:33:07,237
floaty.

587
00:33:08,798 --> 00:33:14,741
They can be any shape or form and they can be super soft without any sampling artifacts

588
00:33:15,341 --> 00:33:18,163
and we like to place a lot of them around.

589
00:33:19,555 --> 00:33:22,696
And sometimes, because of their non-staticness,

590
00:33:22,776 --> 00:33:25,077
they get used in somewhat creative ways.

591
00:33:25,898 --> 00:33:29,819
Again, so for putting on boxes together with a boxeo,

592
00:33:29,959 --> 00:33:31,680
or for anchoring to the feet of the buoy

593
00:33:32,320 --> 00:33:34,481
to cast shadows off of a torch

594
00:33:34,701 --> 00:33:36,201
so we don't have to do point light shadows.

595
00:33:37,101 --> 00:33:40,623
Or to go off of a big platform,

596
00:33:42,463 --> 00:33:45,184
of a big shield that fades in and out nicely

597
00:33:45,224 --> 00:33:46,165
when it moves up and down.

598
00:33:47,583 --> 00:33:49,243
Now, like I said, we do a lot of these,

599
00:33:49,304 --> 00:33:51,885
so we also want to get away with them pretty cheaply.

600
00:33:53,825 --> 00:33:57,127
The standard implementation for doing these

601
00:33:57,187 --> 00:33:59,127
would be something like you get a view array

602
00:33:59,207 --> 00:34:00,288
in your vertex program,

603
00:34:01,168 --> 00:34:02,429
and then in the fragment program,

604
00:34:02,449 --> 00:34:03,609
multiply that by your depth,

605
00:34:03,869 --> 00:34:05,330
and then transform it using a matrix.

606
00:34:06,130 --> 00:34:09,412
But that's got a matrix in it, and I don't like it.

607
00:34:10,052 --> 00:34:12,653
So luckily there's a solution to this one,

608
00:34:12,693 --> 00:34:15,054
and it's real easy if you've done,

609
00:34:15,434 --> 00:34:16,754
well, it's based on corner interpolation.

610
00:34:19,011 --> 00:34:21,413
What you do to do that is in your vertex program,

611
00:34:21,553 --> 00:34:25,015
you get your view array, rotate it into world space,

612
00:34:25,816 --> 00:34:27,837
and the fragment program, multiply by depth

613
00:34:27,897 --> 00:34:28,798
and add an offset.

614
00:34:29,499 --> 00:34:32,161
So now we're down to an FMA or a MAD instruction

615
00:34:32,221 --> 00:34:33,281
for our world space position.

616
00:34:33,421 --> 00:34:34,022
That's real nice.

617
00:34:34,722 --> 00:34:36,944
But we want a decal space position,

618
00:34:37,204 --> 00:34:38,445
so that would still require a matrix.

619
00:34:39,046 --> 00:34:40,046
That doesn't solve our problem.

620
00:34:41,167 --> 00:34:42,468
But you can probably guess where this is going.

621
00:34:43,069 --> 00:34:43,929
So we have a view array,

622
00:34:43,949 --> 00:34:46,531
and then we rotate it into object space.

623
00:34:47,590 --> 00:34:52,754
which also includes scale, and then we multiply that by the depth and add an offset.

624
00:34:53,454 --> 00:34:56,736
And now we're down to an FMA or MAD instruction, which is pretty nice.

625
00:34:59,278 --> 00:35:03,501
Another thing we do with decals is screen space reflections.

626
00:35:03,841 --> 00:35:07,083
So we have screen space reflections in the game, and they're not a post effect.

627
00:35:08,083 --> 00:35:11,245
We place them down locally just because we only need them in certain places,

628
00:35:11,266 --> 00:35:13,507
no reason to make the whole world chromy.

629
00:35:16,962 --> 00:35:19,005
And we like them because they have quite a simple setup.

630
00:35:19,105 --> 00:35:22,330
We don't need to tag objects that we need to reflect.

631
00:35:22,410 --> 00:35:25,854
We don't need to render a separate off-screen camera.

632
00:35:25,874 --> 00:35:27,196
We don't need to bake any cube maps.

633
00:35:27,937 --> 00:35:29,439
So for that reason, we like them.

634
00:35:29,679 --> 00:35:31,302
What you see is what's reflected.

635
00:35:31,342 --> 00:35:32,143
That's a nice advantage.

636
00:35:33,884 --> 00:35:36,745
And set up wise, that's black.

637
00:35:37,526 --> 00:35:41,308
Well, we just have a color and a backup color

638
00:35:41,448 --> 00:35:43,089
in case our array misses something,

639
00:35:43,129 --> 00:35:45,010
we have a color that gets displayed in that case,

640
00:35:45,131 --> 00:35:47,152
which sort of represents some fog in some cases.

641
00:35:48,233 --> 00:35:50,154
And a texture, Fresnel power,

642
00:35:50,174 --> 00:35:52,495
that's pretty much it, four parameters.

643
00:35:53,707 --> 00:35:56,590
But, like I said, what you see is what's reflected,

644
00:35:56,690 --> 00:35:59,033
which means that the disadvantage is obviously

645
00:35:59,093 --> 00:36:01,076
what you don't see is not reflected.

646
00:36:01,817 --> 00:36:05,722
And in this case, at the screen edges,

647
00:36:06,242 --> 00:36:07,884
we fade out because we're not sure

648
00:36:07,964 --> 00:36:09,506
whether or not we're gonna get that information.

649
00:36:10,267 --> 00:36:12,309
on our screen, so just to be sure we fade out.

650
00:36:12,349 --> 00:36:16,071
And it looks horrible when the puddle gets

651
00:36:16,091 --> 00:36:16,872
to the edge of the screen.

652
00:36:17,492 --> 00:36:19,354
This is, of course, happening because we're not sure

653
00:36:19,474 --> 00:36:21,715
whether or not the ray might go in that direction.

654
00:36:21,875 --> 00:36:23,697
And if it does, we do need to fade

655
00:36:23,757 --> 00:36:27,479
to avoid repeating or clamping or whatever

656
00:36:27,620 --> 00:36:29,541
our screen texture might be set to.

657
00:36:31,542 --> 00:36:37,704
Luckily, this is a side-scrolling game and the camera is pretty much pointing in towards the world at most times

658
00:36:37,864 --> 00:36:41,826
So we can just force our rays to always point up and inward

659
00:36:42,686 --> 00:36:46,127
and have no divergence on the x-axis which eliminates the need for

660
00:36:46,687 --> 00:36:49,128
fading on the x-axis altogether and

661
00:36:49,148 --> 00:36:51,849
It's a hack. It works

662
00:36:53,684 --> 00:36:58,190
The other big problem of what you cannot see is not reflected is occluders.

663
00:36:58,811 --> 00:37:00,554
And the worst occluder of all is this guy.

664
00:37:01,235 --> 00:37:04,861
As soon as you figure out that you can make little ghosts in haystacks by jumping around

665
00:37:04,881 --> 00:37:07,364
in the puddle, you're probably going to do that.

666
00:37:08,506 --> 00:37:10,186
for no other reason than to piss me off.

667
00:37:11,247 --> 00:37:14,967
And the way we want to solve this,

668
00:37:15,687 --> 00:37:17,628
just for him, we don't want to solve every occluder,

669
00:37:17,668 --> 00:37:19,828
but we can figure out a solution for this guy,

670
00:37:19,948 --> 00:37:20,849
because you can control him.

671
00:37:21,589 --> 00:37:22,589
So if we just stop him there,

672
00:37:23,789 --> 00:37:26,290
well, the way we stop this is

673
00:37:27,230 --> 00:37:31,791
we first find a bounding box in screen space where he is,

674
00:37:32,931 --> 00:37:39,754
And we determine that a ray is behind the buoy if it's within that bounding box and behind the depth buffer.

675
00:37:39,794 --> 00:37:43,355
This is a pretty safe case for ray is behind buoy.

676
00:37:44,355 --> 00:37:55,539
And if a ray gets into this case, all we do is tell the rays to please go to the nearest exit of this bounding box and keep on tracing.

677
00:37:56,320 --> 00:37:59,701
And since it's a very low detail game, we actually get away with that.

678
00:38:02,463 --> 00:38:08,708
All right, so because of my hatred for matrices

679
00:38:08,768 --> 00:38:11,510
in the pixel shader, let's just talk about this again.

680
00:38:12,370 --> 00:38:14,492
This time not with decal projection,

681
00:38:14,652 --> 00:38:16,013
but with ray projection.

682
00:38:16,734 --> 00:38:19,015
So in this case we want to take a view space ray

683
00:38:19,516 --> 00:38:21,677
and make it a screen space ray,

684
00:38:22,018 --> 00:38:23,239
or put it into frustum space.

685
00:38:24,099 --> 00:38:26,221
The simple way to do this would be to take your

686
00:38:27,242 --> 00:38:30,384
your view space direction, your view space position,

687
00:38:30,464 --> 00:38:32,226
and put it through a matrix,

688
00:38:32,726 --> 00:38:35,028
and subtract another position, and you're there.

689
00:38:35,188 --> 00:38:36,910
But it's got that matrix in it.

690
00:38:37,370 --> 00:38:38,872
So we cheat a little bit,

691
00:38:39,292 --> 00:38:41,274
and on the CPU we generate a,

692
00:38:41,994 --> 00:38:44,697
sort of the size of the bounding box of your screen.

693
00:38:45,838 --> 00:38:49,401
And then in the pixel shader, we can get away with something like this instead.

694
00:38:50,142 --> 00:38:55,108
And it actually handles an edge case that the other one doesn't, which is rays going behind the near plane.

695
00:38:55,328 --> 00:38:57,530
We don't have issues with that in this case.

696
00:39:01,353 --> 00:39:06,315
We don't like banding in our undersampled stochastic effects

697
00:39:06,596 --> 00:39:09,817
so obviously we add random numbers to this one as well.

698
00:39:10,357 --> 00:39:13,158
The first step just gets multiplied by a random number

699
00:39:13,898 --> 00:39:17,720
and that takes care of our stair-stepping artifacts

700
00:39:17,740 --> 00:39:18,540
that you see on the left.

701
00:39:21,361 --> 00:39:24,503
Of course, we don't use white noise or Bayer matrices.

702
00:39:25,363 --> 00:39:29,645
We use blue noise and temporality is really cool.

703
00:39:31,454 --> 00:39:32,885
and finally

704
00:39:34,128 --> 00:39:36,129
there is the problem of wall thickness.

705
00:39:36,789 --> 00:39:39,790
So we can't really tell whether or not

706
00:39:39,810 --> 00:39:40,650
we're inside something.

707
00:39:40,710 --> 00:39:43,712
We all just have a shell that's our depth buffer

708
00:39:44,472 --> 00:39:46,193
for colliding against with our rays.

709
00:39:46,493 --> 00:39:48,534
So we need to have some sort of analog

710
00:39:48,594 --> 00:39:50,534
for determining whether or not

711
00:39:50,574 --> 00:39:51,555
we're colliding with something.

712
00:39:51,975 --> 00:39:53,275
We started with just a number

713
00:39:53,315 --> 00:39:55,956
that you would set up per decal,

714
00:39:56,857 --> 00:39:57,797
but that's too much setup

715
00:39:58,197 --> 00:40:00,858
and it's not accurate enough anyway.

716
00:40:03,201 --> 00:40:05,363
The second iteration was we took the delta

717
00:40:05,383 --> 00:40:10,088
that a ray travels in z and used that as our

718
00:40:10,108 --> 00:40:10,728
wall thickness.

719
00:40:10,768 --> 00:40:13,451
Like if between the last step and the current

720
00:40:13,892 --> 00:40:16,254
we have moved behind a piece of wall

721
00:40:16,294 --> 00:40:17,555
that's as thick as that size.

722
00:40:18,624 --> 00:40:19,425
we're pretty happy with it.

723
00:40:19,685 --> 00:40:21,686
But it's got an edge case where if you hit a wall

724
00:40:21,826 --> 00:40:22,787
that's 45 degrees to your view,

725
00:40:22,807 --> 00:40:26,009
you're gonna be traveling in x and y space only,

726
00:40:26,209 --> 00:40:28,511
and you have no delta, and every wall is paper thin.

727
00:40:28,751 --> 00:40:29,332
That's no good.

728
00:40:30,252 --> 00:40:33,715
If I unwrap that little expression there,

729
00:40:34,155 --> 00:40:35,176
it looks something like this.

730
00:40:35,316 --> 00:40:39,258
And the center is actually just the reflection ray itself.

731
00:40:39,378 --> 00:40:41,400
So if we take that out of the equation,

732
00:40:42,260 --> 00:40:48,005
And just get our, by the way underscore project is the thing that we generated on the CPU earlier,

733
00:40:48,025 --> 00:40:54,370
a couple slides ago. Divide that by the depth. Now we have one that's independent from the rays direction

734
00:40:55,251 --> 00:41:00,055
and we are pretty sure at this point that we're going to hit something. At least if it was visible.

735
00:41:00,876 --> 00:41:01,416
That's real nice.

736
00:41:02,978 --> 00:41:05,760
Another thing that uses reflections are, of course, water.

737
00:41:05,920 --> 00:41:08,642
We have a bunch of water that you can swim in.

738
00:41:09,702 --> 00:41:12,384
And we render it out in three layers

739
00:41:12,584 --> 00:41:14,385
because that's how we think about water.

740
00:41:14,425 --> 00:41:19,209
We think about it as being a layer of dirt or murk or fog

741
00:41:19,309 --> 00:41:20,630
that's inside the water medium.

742
00:41:21,230 --> 00:41:21,670
It's dirty.

743
00:41:23,072 --> 00:41:25,234
and a refraction and a reflection, of course.

744
00:41:26,135 --> 00:41:28,438
And it's actually pretty nice to render them out

745
00:41:28,618 --> 00:41:31,301
as these layers of abstraction that we have,

746
00:41:32,062 --> 00:41:33,163
as the actual render layers.

747
00:41:33,824 --> 00:41:35,767
So we start with a fog, that's our first one.

748
00:41:36,917 --> 00:41:39,058
Then we render any transparencies that we've tagged

749
00:41:39,118 --> 00:41:40,198
as being under the water.

750
00:41:40,939 --> 00:41:43,940
And we render these now because we want to refract those

751
00:41:44,000 --> 00:41:46,401
when we take a snapshot of the screen to distort it.

752
00:41:47,382 --> 00:41:48,462
And now we refract it.

753
00:41:49,283 --> 00:41:51,604
And finally, we add the reflection on top of this.

754
00:41:52,004 --> 00:41:53,405
This is not a screen space reflection.

755
00:41:53,625 --> 00:41:57,587
This is a camera based, like an off screen camera

756
00:41:57,667 --> 00:41:59,188
using an oblique clipping plane reflection

757
00:41:59,528 --> 00:42:02,770
because there's just way too much that can go wrong in water.

758
00:42:04,405 --> 00:42:08,168
And the case for when the camera is underwater is similar,

759
00:42:08,288 --> 00:42:09,950
but shuffled around a little bit,

760
00:42:10,390 --> 00:42:12,211
because the order of which you see things

761
00:42:12,251 --> 00:42:13,352
has now been changed.

762
00:42:13,613 --> 00:42:16,515
So the first thing we render now is reflection,

763
00:42:17,336 --> 00:42:18,997
then fog, then refraction,

764
00:42:19,197 --> 00:42:21,079
and then the transparencies to keep them crisp.

765
00:42:23,688 --> 00:42:26,529
Now for each of these layers, we actually render out

766
00:42:26,669 --> 00:42:27,809
three pieces of geometry.

767
00:42:28,450 --> 00:42:31,771
And the first one is an edge that's from the near plane

768
00:42:31,791 --> 00:42:35,752
of the camera and six to 12 meters into the scene.

769
00:42:36,332 --> 00:42:39,473
This is to avoid pancake water

770
00:42:39,673 --> 00:42:40,774
when the camera passes through.

771
00:42:42,955 --> 00:42:49,181
It's just a tessellated mesh that's stuck right at your nose and follows you around

772
00:42:49,221 --> 00:42:55,386
wherever you go and creates just a little bit of depth to the water.

773
00:42:57,852 --> 00:43:00,314
Next up, we rendered the outside of a box,

774
00:43:00,414 --> 00:43:02,476
because this water is a box volume.

775
00:43:03,217 --> 00:43:04,578
And by the outside of a box,

776
00:43:04,618 --> 00:43:06,559
I mean the front faces of a box.

777
00:43:07,720 --> 00:43:08,481
So something like this.

778
00:43:09,361 --> 00:43:12,284
We're not rendering on top of the displacement edge

779
00:43:12,324 --> 00:43:13,124
we've already rendered,

780
00:43:13,164 --> 00:43:15,446
and the way we avoid that is just by using

781
00:43:15,486 --> 00:43:19,309
a single stencil bit for rejecting any layers

782
00:43:19,329 --> 00:43:21,171
that come after the ones we've already rendered.

783
00:43:23,780 --> 00:43:26,461
And then we render the inside faces of that same box.

784
00:43:26,961 --> 00:43:30,023
So the back faces, which look like this.

785
00:43:31,584 --> 00:43:34,606
And again, we're not rendering on top of anything

786
00:43:34,666 --> 00:43:37,787
because of that stencil bit that we've been using so far.

787
00:43:38,548 --> 00:43:42,030
And yeah, we just get something that looks like

788
00:43:42,070 --> 00:43:44,711
a full volume, but in reality was three passes.

789
00:43:46,352 --> 00:43:47,713
Now, for some visual effects.

790
00:43:48,994 --> 00:43:50,595
Gonna start out with smoke particles.

791
00:43:56,713 --> 00:43:58,714
All right, so that uses a few effects.

792
00:43:58,754 --> 00:43:59,774
Now let's try to break them down.

793
00:44:02,055 --> 00:44:03,616
Get some motion and some light in there.

794
00:44:05,816 --> 00:44:07,817
Even though I've frozen it, you might be able to see

795
00:44:07,917 --> 00:44:10,078
that the particles are still moving a little bit.

796
00:44:10,718 --> 00:44:12,238
We have some sub-particle motion,

797
00:44:12,378 --> 00:44:14,319
just to try and make it non-obvious

798
00:44:14,399 --> 00:44:16,040
where one particle starts and another,

799
00:44:17,140 --> 00:44:19,681
where one particle ends and another starts.

800
00:44:20,561 --> 00:44:22,542
And we got some lighting coming from the floor.

801
00:44:24,927 --> 00:44:27,209
and a gradient just to ground it a little bit.

802
00:44:27,389 --> 00:44:29,090
If I remove all the effects, it looks like this.

803
00:44:29,110 --> 00:44:32,093
If I add back in the light from the floor,

804
00:44:32,133 --> 00:44:33,694
which is the most obvious of the effects,

805
00:44:33,714 --> 00:44:34,454
it looks like this.

806
00:44:35,455 --> 00:44:38,397
Now, I wanna have each particle be lighter

807
00:44:38,417 --> 00:44:39,518
at the top than at the bottom.

808
00:44:39,838 --> 00:44:42,160
I don't have any diffuse detail in any of these sprites

809
00:44:42,360 --> 00:44:44,282
because I want them to blend well together.

810
00:44:44,802 --> 00:44:46,503
So if we add that gradient, it's very subtle,

811
00:44:46,523 --> 00:44:47,264
it looks like this.

812
00:44:48,585 --> 00:44:50,746
And finally, make them wobble.

813
00:44:53,175 --> 00:44:55,756
and we wobble them around with a texture that looks like this.

814
00:44:56,016 --> 00:45:00,078
It's basically just a UV gradient in Photoshop

815
00:45:00,158 --> 00:45:02,279
with a twirl effect applied to it,

816
00:45:02,779 --> 00:45:04,940
and then paste that around as a stamp a few times.

817
00:45:04,980 --> 00:45:08,081
It makes it kind of look like wind swirls, essentially.

818
00:45:08,641 --> 00:45:10,082
And then we take that texture,

819
00:45:10,662 --> 00:45:12,283
map it in world space to the particles,

820
00:45:12,363 --> 00:45:14,164
and scroll them downwards in this case.

821
00:45:15,084 --> 00:45:17,225
And we chose downwards for this example because, well,

822
00:45:18,479 --> 00:45:23,040
The smoke is kind of getting shot up from above and down below, so that works for this one.

823
00:45:30,663 --> 00:45:32,063
So next up, some fire.

824
00:45:41,266 --> 00:45:41,666
Turn up!

825
00:45:44,907 --> 00:45:45,147
Thanks!

826
00:45:46,923 --> 00:45:48,403
So yeah, I'm just throwing around the box,

827
00:45:48,443 --> 00:45:50,864
showing how it looks in a dynamic setting.

828
00:46:00,826 --> 00:46:04,367
Yeah, so it's using some of the techniques from the smoke.

829
00:46:04,728 --> 00:46:07,568
It's using UV distortion again,

830
00:46:08,348 --> 00:46:12,269
but the most important here is the colors, actually.

831
00:46:13,550 --> 00:46:17,055
Because we don't want to have any bright blues or any bright purples.

832
00:46:17,095 --> 00:46:19,358
We don't want to have any dark whites especially.

833
00:46:20,359 --> 00:46:24,083
By any means we want to have a consistent luminance to color ratio.

834
00:46:24,624 --> 00:46:30,011
So the way we do that is by rendering fire into a fire buffer of sorts.

835
00:46:30,932 --> 00:46:34,054
So this is just the alpha channel

836
00:46:34,074 --> 00:46:35,395
of what we're rendering to actually,

837
00:46:35,596 --> 00:46:39,619
which is now the deferred fire buffer for this scene.

838
00:46:40,540 --> 00:46:44,283
We just render each sprite in here to accumulate additively

839
00:46:44,383 --> 00:46:48,466
and then we apply a lookup table to it.

840
00:46:48,707 --> 00:46:52,169
And now we'll be sure that any value of luminance

841
00:46:52,250 --> 00:46:54,491
of the fire becomes a specific color

842
00:46:54,631 --> 00:46:58,074
and never gets the wrong color of fire at any given point.

843
00:47:00,348 --> 00:47:03,832
any given sprite it might look like this.

844
00:47:04,112 --> 00:47:08,077
Other than UV distortion, we're also using flipbooks here

845
00:47:08,297 --> 00:47:12,101
because we need more motion than we did with the smoke.

846
00:47:12,782 --> 00:47:14,624
So for most of these sprites,

847
00:47:14,724 --> 00:47:18,448
we have three by three different textures we can go with.

848
00:47:19,389 --> 00:47:21,732
We started with just selecting them sequentially,

849
00:47:21,812 --> 00:47:24,494
one through nine, but that takes about a second,

850
00:47:24,955 --> 00:47:26,896
which means the animation will repeat once a second,

851
00:47:26,936 --> 00:47:28,978
and that becomes real jarring to look at.

852
00:47:29,139 --> 00:47:31,521
The second thing we tried was just pick a random one,

853
00:47:32,161 --> 00:47:33,623
but there's a really high chance

854
00:47:33,643 --> 00:47:35,384
that you'll pick the same one twice in a row,

855
00:47:35,505 --> 00:47:38,167
actually higher than 10%, so that would happen.

856
00:47:39,294 --> 00:47:41,475
once in every 10 seconds, and it will look like lag,

857
00:47:41,595 --> 00:47:42,196
and it's awful.

858
00:47:43,177 --> 00:47:44,998
What we chose to do was both,

859
00:47:45,399 --> 00:47:48,061
so we go sequentially on the x-axis

860
00:47:48,481 --> 00:47:51,003
and randomly on the y-axis.

861
00:47:51,363 --> 00:47:55,187
So we just choose, just go through columns A, B, C,

862
00:47:55,287 --> 00:47:57,809
and then a random row, one through three,

863
00:47:59,590 --> 00:48:00,391
at any given frame.

864
00:48:00,671 --> 00:48:01,712
So we don't get any lag,

865
00:48:01,752 --> 00:48:04,174
and repetition becomes more unlikely.

866
00:48:06,574 --> 00:48:15,656
Now between these different things we of course don't just snap between layers, we fade between

867
00:48:15,696 --> 00:48:15,816
them.

868
00:48:17,217 --> 00:48:21,298
No, we fade on a vertical gradient in the direction of the fire.

869
00:48:22,338 --> 00:48:23,278
No, we don't do that either.

870
00:48:23,778 --> 00:48:29,499
We do it with noise and a gradient just because we might as well and it just ends up looking

871
00:48:30,080 --> 00:48:32,080
more fiery in the end.

872
00:48:34,461 --> 00:48:35,661
Now some lens flares.

873
00:48:37,115 --> 00:48:40,736
So lens flares are just points that you put up around

874
00:48:40,976 --> 00:48:44,578
in the scenes for us that are not the post effect,

875
00:48:44,618 --> 00:48:46,399
but just I want to have this flashlight

876
00:48:46,419 --> 00:48:47,299
be super duper bright.

877
00:48:47,859 --> 00:48:49,040
So you put a lens flare in there.

878
00:48:49,700 --> 00:48:51,541
And of course we need it to be occluded by things

879
00:48:51,621 --> 00:48:53,682
so it's not set over there.

880
00:48:54,002 --> 00:48:56,103
It doesn't depth test or anything like that.

881
00:48:57,543 --> 00:48:59,904
And for fading it out, we didn't want to collide

882
00:48:59,944 --> 00:49:02,425
against the scene's geometry colliders

883
00:49:03,786 --> 00:49:04,486
because we don't want to,

884
00:49:05,907 --> 00:49:07,647
the character's not gonna bump into any of these trees,

885
00:49:07,727 --> 00:49:09,448
so why would we set up colliders for them?

886
00:49:09,468 --> 00:49:13,189
A lot of setup and expensive.

887
00:49:13,749 --> 00:49:15,610
So instead, for each of the vertices,

888
00:49:15,710 --> 00:49:18,711
we sampled the depth buffer in the vertex shader

889
00:49:18,731 --> 00:49:20,531
a bunch of times on a Poisson disk.

890
00:49:21,051 --> 00:49:22,392
We only have four vertices,

891
00:49:22,532 --> 00:49:24,953
so doing 30 samples per vertex

892
00:49:25,053 --> 00:49:26,993
is very little to get away with.

893
00:49:27,754 --> 00:49:29,554
Of course, we don't sample from the corners,

894
00:49:29,914 --> 00:49:32,495
we sample from the center instead, from the pivots.

895
00:49:34,841 --> 00:49:37,343
but just to get a little bit of a gradient going on,

896
00:49:37,363 --> 00:49:40,565
because it's free, we sample somewhere in between

897
00:49:40,706 --> 00:49:43,608
to get a horizontal gradient going across them

898
00:49:43,668 --> 00:49:48,232
as they pass behind and get disincluded.

899
00:49:50,734 --> 00:49:52,455
And now, some water effects.

900
00:50:04,535 --> 00:50:09,117
All right, so this column here of foam

901
00:50:09,317 --> 00:50:11,998
is using the exact same techniques and shader

902
00:50:12,098 --> 00:50:14,399
as the smoke before, it's basically

903
00:50:14,419 --> 00:50:16,160
our particle uber shader.

904
00:50:17,280 --> 00:50:18,541
Just to demonstrate quickly here,

905
00:50:18,681 --> 00:50:21,022
if I remove the motion, it looks like this.

906
00:50:21,042 --> 00:50:25,184
And if I kick back the motion and remove the lighting,

907
00:50:25,364 --> 00:50:27,465
which is just making it lighter at the top

908
00:50:27,545 --> 00:50:30,446
and darker at the bottom, it looks like this, super flat.

909
00:50:38,162 --> 00:50:41,304
So over here, the most important thing to look at is this spotlight here.

910
00:50:41,384 --> 00:50:46,246
If the boy swims into it, he gonna die, so we want to emphasis that as much as possible.

911
00:50:46,866 --> 00:50:51,268
We have three main effects to remind you of this spotlight.

912
00:50:52,029 --> 00:50:54,270
And the first one is some rain.

913
00:50:55,430 --> 00:50:59,012
So the rain, we've gone through three different versions.

914
00:50:59,232 --> 00:51:02,413
One that was just generating lots and lots of particles,

915
00:51:02,473 --> 00:51:05,535
but once you get to about 10,000 raindrops,

916
00:51:05,615 --> 00:51:06,675
it's pretty heavy.

917
00:51:07,636 --> 00:51:09,376
And then we tried some scrolling billboards,

918
00:51:09,436 --> 00:51:12,918
but the overdraw was also terrific.

919
00:51:13,018 --> 00:51:16,840
So we ended up actually using a mesh

920
00:51:16,880 --> 00:51:19,241
that we put in there with a vertex C shader.

921
00:51:20,353 --> 00:51:22,513
So the wireframe of that rain looks like this,

922
00:51:23,614 --> 00:51:25,854
and the animation is literally just

923
00:51:25,874 --> 00:51:27,374
for every whole number of time,

924
00:51:28,535 --> 00:51:30,995
we reposition the particle at some place

925
00:51:31,075 --> 00:51:32,696
or reposition the sprite somewhere else,

926
00:51:33,616 --> 00:51:35,676
and for the fractional part of time,

927
00:51:36,256 --> 00:51:38,617
we either scale it up or fade it out

928
00:51:38,637 --> 00:51:42,998
or scroll it down depending on which particle it is.

929
00:51:44,903 --> 00:51:46,144
Next up, we got some volume lights.

930
00:51:46,744 --> 00:51:48,986
Above here, it's not using any textures,

931
00:51:49,086 --> 00:51:50,026
but look at below.

932
00:51:50,687 --> 00:51:53,549
And finally, we have some specular light

933
00:51:55,130 --> 00:51:55,971
on the water surface.

934
00:51:55,991 --> 00:51:58,772
Real simple, just to reflect that off.

935
00:52:01,214 --> 00:52:04,657
And down below, we use a similar but different effect

936
00:52:05,557 --> 00:52:08,019
than the rain for dust particles.

937
00:52:09,520 --> 00:52:11,163
So same thing here, we just have like,

938
00:52:11,183 --> 00:52:14,187
I don't know, a thousand of these little dots there

939
00:52:14,227 --> 00:52:16,430
that just float around and fade out

940
00:52:16,470 --> 00:52:19,014
and move somewhere else and fade in

941
00:52:19,094 --> 00:52:20,897
and then move somewhere else and fade out again.

942
00:52:22,439 --> 00:52:23,020
And down here, the...

943
00:52:25,312 --> 00:52:28,514
Down here the volume light uses an animated texture

944
00:52:28,534 --> 00:52:31,896
to simulate caustics or simulate being

945
00:52:32,696 --> 00:52:33,877
messed up by the water waves.

946
00:52:34,778 --> 00:52:37,379
And it's of course, each of these

947
00:52:38,319 --> 00:52:40,361
volume lights are sorted differently.

948
00:52:40,601 --> 00:52:42,862
The one that's above the water is being refracted

949
00:52:42,942 --> 00:52:44,383
and the one that's below is not,

950
00:52:44,503 --> 00:52:46,364
and the other way around when you're up there.

951
00:52:47,644 --> 00:52:50,385
And finally, the specular reflection has now turned

952
00:52:50,405 --> 00:52:53,587
into a specular refraction, which just makes it

953
00:52:53,847 --> 00:52:57,649
super bright from the point of, you know, casting.

954
00:53:00,560 --> 00:53:03,762
Now as we swim up, the buoy also generates

955
00:53:03,782 --> 00:53:08,045
some wave particles that we use to distort the surface.

956
00:53:08,746 --> 00:53:14,510
The shading of them is just resampling the refraction

957
00:53:14,690 --> 00:53:15,991
and the reflection again,

958
00:53:16,152 --> 00:53:17,833
but with a different normal this time.

959
00:53:18,734 --> 00:53:23,257
And the normals we generate come from

960
00:53:23,957 --> 00:53:25,399
the shape of these particles.

961
00:53:26,199 --> 00:53:28,060
So each particle is just a ring,

962
00:53:28,700 --> 00:53:32,901
and we use the local particle position of these rings

963
00:53:33,881 --> 00:53:35,502
as the normals, just normalizing them,

964
00:53:36,302 --> 00:53:40,483
and then we multiply that by a sine

965
00:53:40,663 --> 00:53:43,424
that goes from zero to two pi

966
00:53:43,524 --> 00:53:45,184
from the center to the outer rim of it,

967
00:53:45,504 --> 00:53:49,185
which would mean that the inside of the wave

968
00:53:49,305 --> 00:53:51,546
becomes negative and the outside becomes positive,

969
00:53:51,586 --> 00:53:53,507
and zero in between.

970
00:53:55,983 --> 00:53:57,764
now a different shape of water

971
00:54:06,748 --> 00:54:11,990
so this is not a square, this is not a crate shaped piece of water, this is a cylindrical water

972
00:54:14,962 --> 00:54:17,403
it's quite high poly because we want to have

973
00:54:17,443 --> 00:54:18,963
some very specific texture coordinates here.

974
00:54:19,003 --> 00:54:22,985
We're not just putting the texture down flat,

975
00:54:23,025 --> 00:54:28,347
we're actually mapping it radially around the water,

976
00:54:28,708 --> 00:54:29,008
like so.

977
00:54:30,401 --> 00:54:32,701
And then we're scrolling it on the y-axis.

978
00:54:32,741 --> 00:54:34,242
And the reason we're doing this is we

979
00:54:34,262 --> 00:54:38,683
don't want to fade out expanding foam textures,

980
00:54:38,883 --> 00:54:40,643
because that would be more obvious.

981
00:54:42,503 --> 00:54:43,903
Yeah, we're doing this scrolling instead

982
00:54:43,943 --> 00:54:45,264
to have a really consistent motion.

983
00:54:45,364 --> 00:54:47,124
And the texture looks something like this.

984
00:54:47,964 --> 00:54:50,945
We needed something that tiles, but in not such an obvious way.

985
00:54:51,725 --> 00:54:56,186
So the inspiration we got here was from European fan.

986
00:54:57,946 --> 00:55:02,668
cobblestone looks something like this. They tile perfectly well but in a more

987
00:55:02,728 --> 00:55:07,109
non-obvious way and they just happen to look like waves. So if you kind of draw

988
00:55:07,189 --> 00:55:11,590
some lines on top of that and then put some waves under those lines and remove

989
00:55:11,650 --> 00:55:21,253
the lines you kind of get some tiling waves. That's great. And finally

990
00:55:34,143 --> 00:55:37,247
So this is using pretty much the effects that we've talked about up until now.

991
00:55:37,888 --> 00:55:43,135
Water, particles, lighting and screen space reflections, and superfoam textures.

992
00:55:44,697 --> 00:55:47,621
The first one, and most important, is the water volume itself.

993
00:55:48,632 --> 00:55:50,652
which without any other effects looks like this.

994
00:55:50,692 --> 00:55:52,512
It's got the same scrolling,

995
00:55:53,413 --> 00:55:55,673
cobblestone foam texture on top of it.

996
00:55:56,493 --> 00:55:58,694
And of course it animates this time,

997
00:55:58,774 --> 00:56:03,135
but otherwise it's using our standard water shading code.

998
00:56:04,055 --> 00:56:06,516
The way we animate it is using just three blend shapes,

999
00:56:06,956 --> 00:56:08,476
one from before the crash,

1000
00:56:08,536 --> 00:56:10,377
and one when it's crashing,

1001
00:56:10,397 --> 00:56:13,397
and then one when it's finishing.

1002
00:56:15,058 --> 00:56:18,318
And below that of course is a puddle.

1003
00:56:19,419 --> 00:56:20,240
And the puddle looks like this.

1004
00:56:20,260 --> 00:56:22,782
You can see the foam stretching a lot in the beginning

1005
00:56:23,342 --> 00:56:25,184
and then becoming more and more easy as it goes out.

1006
00:56:25,604 --> 00:56:27,906
And also we're using screen-based reflections on that.

1007
00:56:28,827 --> 00:56:30,208
And the way we're getting that stretching done

1008
00:56:30,288 --> 00:56:31,048
is very simple.

1009
00:56:31,689 --> 00:56:33,470
We wanna make it look like it's really pushing

1010
00:56:33,971 --> 00:56:35,492
the foam out in the beginning

1011
00:56:35,972 --> 00:56:38,975
and then easing out as it gets to the end.

1012
00:56:39,795 --> 00:56:42,057
And the simple way to do this was just

1013
00:56:42,197 --> 00:56:43,398
add power to the Y

1014
00:56:46,440 --> 00:56:54,042
Y gradient of this of this UV map and then take it from the power of four or eight or something and then down to just linear

1015
00:56:54,902 --> 00:56:55,683
when the effect is done

1016
00:56:56,683 --> 00:57:01,584
and finally a most apparent are is this foam carpet of

1017
00:57:01,704 --> 00:57:06,685
Particles on top which is using the same particles smoke foam shader that we've been using so far

1018
00:57:08,425 --> 00:57:10,666
Gets this from the light from behind

1019
00:57:12,360 --> 00:57:18,145
And to blend in the decal on the ground and the wave itself,

1020
00:57:18,386 --> 00:57:19,627
we've got these impacts here.

1021
00:57:20,488 --> 00:57:22,349
And just to make the effect a little bit more powerful

1022
00:57:22,369 --> 00:57:25,773
in the beginning, we've got these foam sprays

1023
00:57:25,813 --> 00:57:28,715
coming out the sides in the beginning,

1024
00:57:28,755 --> 00:57:29,656
that quickly fade off.

1025
00:57:50,503 --> 00:57:53,445
So in conclusion, and the rules to live your life by,

1026
00:57:53,906 --> 00:57:56,348
we really like blue noise, and so should you.

1027
00:57:56,788 --> 00:57:58,029
We like temporal anti-aliasing,

1028
00:57:58,129 --> 00:57:59,530
it really gives a stable image

1029
00:57:59,570 --> 00:58:01,632
and makes all kinds of nice effects possible.

1030
00:58:02,092 --> 00:58:02,413
That's it.

1031
00:58:03,232 --> 00:58:08,156
and you should data all your things and you should do it with a triangular pdf if you can afford it

1032
00:58:08,857 --> 00:58:14,261
and your lights if you're if at all possible should have custom light functions and get

1033
00:58:14,381 --> 00:58:19,726
your tech artists to do some it's really cool and we like screen space reflections and we

1034
00:58:19,906 --> 00:58:22,548
don't like screen space and manipulation and

1035
00:58:24,783 --> 00:58:26,505
Thanks to all these wonderful people who helped

1036
00:58:27,145 --> 00:58:28,086
make this talk possible.

1037
00:58:28,887 --> 00:58:30,147
And thanks to the Unity team,

1038
00:58:30,248 --> 00:58:32,649
and thanks to Double11 for supporting our stuffs,

1039
00:58:32,789 --> 00:58:36,012
and thanks to the Twitterverse for improving our slides.

1040
00:58:36,692 --> 00:58:38,734
And thanks to you guys for listening.

1041
00:58:39,895 --> 00:58:40,395
And we're hiring.

1042
00:58:53,562 --> 00:58:55,442
Also, we're taking questions, you can go up to the mics.

1043
00:58:58,723 --> 00:58:59,263
If you have some.

1044
00:59:00,983 --> 00:59:03,644
We can also, sorry, if you'd rather like that.

1045
00:59:04,024 --> 00:59:05,324
Yeah, if you don't have questions,

1046
00:59:05,725 --> 00:59:09,305
yeah, you can just come ask us afterwards

1047
00:59:10,406 --> 00:59:11,566
the questions that you don't have.

1048
00:59:15,087 --> 00:59:15,287
All right.

1049
00:59:15,307 --> 00:59:16,307
Cool, thanks for coming.

