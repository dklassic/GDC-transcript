1
00:00:06,332 --> 00:00:07,232
I'm Kevin Tedisco.

2
00:00:07,692 --> 00:00:10,093
I'm a senior software engineer at Vicarious Visions.

3
00:00:11,573 --> 00:00:13,634
Before we get going, I was asked to remind everybody

4
00:00:13,774 --> 00:00:15,534
to put your cell phones on silent,

5
00:00:16,474 --> 00:00:18,595
and also please fill out the evaluation form

6
00:00:18,815 --> 00:00:20,415
that you'll receive at the end of this talk.

7
00:00:22,215 --> 00:00:25,456
And now, to start, I have a disclaimer.

8
00:00:27,956 --> 00:00:30,017
Any HDR images that I'm about to show you

9
00:00:30,197 --> 00:00:30,717
are a bit of a lie.

10
00:00:32,333 --> 00:00:34,174
I'm showing this on a non-HDR display,

11
00:00:34,214 --> 00:00:37,415
which means that it cannot faithfully reproduce an HDR image.

12
00:00:37,916 --> 00:00:40,597
Therefore, all of the imagery is tone mapped

13
00:00:40,637 --> 00:00:42,417
to be a perceptual representation

14
00:00:42,578 --> 00:00:44,198
of what HDR content looks like,

15
00:00:44,958 --> 00:00:48,340
as it might be compared to SDR or standard dynamic range.

16
00:00:49,900 --> 00:00:51,461
Also, some of the images were captured

17
00:00:51,481 --> 00:00:53,202
by taking a picture of a monitor screen,

18
00:00:53,462 --> 00:00:55,763
so quality may look a bit low at times.

19
00:00:57,160 --> 00:00:58,720
At this point in HDR's maturity,

20
00:00:59,460 --> 00:01:01,101
I'm sure that everybody kind of understands this,

21
00:01:01,161 --> 00:01:03,361
but I thought it might be worth a quick reminder.

22
00:01:06,042 --> 00:01:07,822
So I think we're all very familiar by now

23
00:01:07,862 --> 00:01:09,142
with what Destiny looks like.

24
00:01:09,983 --> 00:01:12,343
Here's a shot of the Hunter's golden gun activation

25
00:01:12,583 --> 00:01:13,703
in standard dynamic range.

26
00:01:14,003 --> 00:01:16,844
And after our work on HDR display support in the game,

27
00:01:17,484 --> 00:01:19,065
we bring this shot looking like this

28
00:01:20,825 --> 00:01:21,805
to looking something like this.

29
00:01:24,015 --> 00:01:26,336
And we take this beautiful landscape of Io

30
00:01:26,476 --> 00:01:28,317
with its greenish-yellow fields

31
00:01:28,377 --> 00:01:30,378
and tall blue billowing smokestacks

32
00:01:31,939 --> 00:01:33,139
and transform it into this.

33
00:01:34,280 --> 00:01:35,940
The colors are more vibrant, they pop,

34
00:01:36,220 --> 00:01:37,521
everything is brighter, richer.

35
00:01:40,562 --> 00:01:42,503
Today I'm going to cover how we brought this upgrade

36
00:01:42,543 --> 00:01:45,224
to Destiny, which had content only authored

37
00:01:45,284 --> 00:01:46,245
and mastered for SDR.

38
00:01:47,742 --> 00:01:50,344
I'm going to start by getting everybody in the right mindset

39
00:01:50,444 --> 00:01:52,285
with a quick recap of what HDR is,

40
00:01:53,046 --> 00:01:54,887
and then dive right into how we approached

41
00:01:55,087 --> 00:01:57,289
implementing HDR display support in Destiny.

42
00:01:58,349 --> 00:02:00,191
In particular, I'm going to talk about the goals

43
00:02:00,211 --> 00:02:00,991
that we set out with,

44
00:02:01,672 --> 00:02:03,513
as well as the constraints that we were bound to,

45
00:02:03,633 --> 00:02:05,735
which as I'll explain, proved very significant

46
00:02:05,755 --> 00:02:07,376
when it came to the decisions that we made

47
00:02:07,796 --> 00:02:08,817
and the approaches that we took.

48
00:02:10,238 --> 00:02:12,060
I'm going to focus on three main challenges

49
00:02:12,240 --> 00:02:13,361
that we faced in the work.

50
00:02:14,641 --> 00:02:16,023
How do we tone map the game for HDR?

51
00:02:17,097 --> 00:02:18,818
How do we color grade the game for HDR?

52
00:02:19,799 --> 00:02:22,041
And how do we add HDR support to our UI?

53
00:02:23,943 --> 00:02:25,865
I'm gonna talk about a comparison tool that we made

54
00:02:25,885 --> 00:02:28,067
that allowed artists to review HDR content

55
00:02:28,167 --> 00:02:30,870
alongside SDR content on the same screen.

56
00:02:33,260 --> 00:02:34,780
And then from there, I'm gonna shift gears a bit

57
00:02:34,821 --> 00:02:36,081
and move into a broader space.

58
00:02:36,902 --> 00:02:39,863
I'll talk about how wild the HDR world is right now,

59
00:02:39,943 --> 00:02:41,984
in particular, how wild it is on the PC.

60
00:02:42,845 --> 00:02:44,085
PC was the first platform

61
00:02:44,145 --> 00:02:46,126
on which Destiny received HDR support,

62
00:02:46,747 --> 00:02:48,387
so the bulk of the experience that I have

63
00:02:48,968 --> 00:02:51,809
was understanding how HDR works in the PC space.

64
00:02:52,550 --> 00:02:54,290
I'll talk about all the interesting things I learned

65
00:02:54,331 --> 00:02:55,671
about what's necessary for creating

66
00:02:55,691 --> 00:02:57,412
a successful HDR game for Windows.

67
00:02:58,293 --> 00:03:02,014
And finally, I'm going to pose the question,

68
00:03:03,362 --> 00:03:04,142
Did we do it right?

69
00:03:05,942 --> 00:03:09,764
Well, we turned out a really great looking HDR game,

70
00:03:10,224 --> 00:03:11,684
but I would hesitate to say that we did it

71
00:03:11,724 --> 00:03:13,105
the absolute right way.

72
00:03:14,545 --> 00:03:16,746
So one and a half years in, does it hold up now

73
00:03:16,786 --> 00:03:19,807
that HDR displays are becoming more and more mainstream?

74
00:03:20,047 --> 00:03:22,248
Well, sort of.

75
00:03:23,568 --> 00:03:25,549
Take Mercury, for example, in SDR.

76
00:03:26,569 --> 00:03:28,550
Today, I hope to shed some light on why,

77
00:03:28,590 --> 00:03:31,591
when we take this scene and view it on an HDR display,

78
00:03:33,298 --> 00:03:35,478
we get this kind of washed out look.

79
00:03:36,399 --> 00:03:37,999
We've gained detail in the bright sun,

80
00:03:38,539 --> 00:03:40,040
although arguably we probably shouldn't have,

81
00:03:41,160 --> 00:03:43,121
but we actually appear to have lost dynamic range.

82
00:03:43,661 --> 00:03:45,382
And this is an example of how our constraints

83
00:03:45,442 --> 00:03:47,022
ended up impacting our final result.

84
00:03:48,062 --> 00:03:49,383
I'll wrap up today with what I learned

85
00:03:49,403 --> 00:03:51,063
about doing this kind of work the right way.

86
00:03:52,144 --> 00:03:53,824
I'll admit that I didn't have a lot of experience

87
00:03:53,844 --> 00:03:55,105
in this space when the work started,

88
00:03:55,285 --> 00:03:56,445
and since then I've learned a ton.

89
00:03:57,025 --> 00:03:58,506
Hopefully I can pass some of these learnings

90
00:03:58,586 --> 00:03:59,386
onto you all today.

91
00:04:01,857 --> 00:04:04,298
So really, really quick recap of what HDR is.

92
00:04:05,999 --> 00:04:07,680
HDR gets us two major things.

93
00:04:08,821 --> 00:04:10,802
More dynamic range, black or blacks,

94
00:04:11,122 --> 00:04:13,343
bright or whites, and more color.

95
00:04:14,584 --> 00:04:16,425
You can see here that the range of HDR

96
00:04:16,545 --> 00:04:18,166
extends a few orders of magnitude

97
00:04:18,266 --> 00:04:19,947
above and below that of SDR.

98
00:04:21,288 --> 00:04:23,549
Incidentally, this range is about equivalent

99
00:04:23,569 --> 00:04:25,430
to that of the human eye without adaptation.

100
00:04:27,059 --> 00:04:31,722
Also on the right, you can see the difference in gamut size between the SDR standard Rec.709,

101
00:04:32,022 --> 00:04:37,226
which is the smaller triangle, and the new HDR standard Rec.2020, the larger triangle.

102
00:04:38,286 --> 00:04:40,948
Throughout the presentation, I'll mention these two color spaces a lot.

103
00:04:41,509 --> 00:04:46,712
Rec.709 is a color space used for HDTV, and Rec.2020 is for UHDTV.

104
00:04:49,093 --> 00:04:50,755
You'll also hear me mention NITs a lot.

105
00:04:52,181 --> 00:04:55,142
A nit is a unit of visible light intensity

106
00:04:55,202 --> 00:04:57,582
and is equal to one candela per square meter,

107
00:04:58,463 --> 00:05:01,663
where a candela is the SI unit of luminous intensity.

108
00:05:03,604 --> 00:05:06,765
Modern LCD displays output a range of 200 to 300 nits,

109
00:05:06,805 --> 00:05:09,645
and HDTVs can be anywhere on the range

110
00:05:09,685 --> 00:05:12,166
from 400 to possibly even 1,500 nits,

111
00:05:12,306 --> 00:05:15,087
depending on certain conditions and cases.

112
00:05:17,467 --> 00:05:19,508
And just to give some grounding for those less familiar

113
00:05:19,548 --> 00:05:21,008
with some more terms I'll be throwing around,

114
00:05:22,050 --> 00:05:25,712
Tone mapping is the process of remapping a set of colors in a particular range

115
00:05:26,372 --> 00:05:29,454
down to a new set of colors and brightnesses in a more limited range.

116
00:05:29,674 --> 00:05:34,797
For example, taking raw camera data of real-world lighting conditions and squashing that data down

117
00:05:35,477 --> 00:05:38,659
into a typical into a range that a typical display can represent.

118
00:05:41,041 --> 00:05:43,162
The term LUT is just shorthand for lookup table,

119
00:05:43,862 --> 00:05:47,004
and it's a data structure that's used in color grading as a means of altering colors.

120
00:05:49,380 --> 00:05:56,665
FE16 is a pixel format where each channel has 16 bits of precision, so double that of our standard 8-bit RGBA format.

121
00:05:58,487 --> 00:06:03,751
Gamma is the pretty well-known nonlinear transform of image data that originated in the CRT TV.

122
00:06:04,671 --> 00:06:08,034
It's nonlinear in order to give more precision to dark values,

123
00:06:08,714 --> 00:06:12,958
which is important because the human eye is more sensitive to brightness changes in low light than bright light.

124
00:06:14,967 --> 00:06:18,530
And finally, PQ is short for Perceptual Quantizer,

125
00:06:18,971 --> 00:06:21,253
and it's HDR's new gamma curve.

126
00:06:22,294 --> 00:06:24,356
I'm not going to cover the details of its formulation

127
00:06:24,757 --> 00:06:26,718
because that could probably eat up the entire hour

128
00:06:26,759 --> 00:06:29,061
that I have, but it's designed to ensure

129
00:06:29,081 --> 00:06:30,402
that enough precision is available

130
00:06:30,522 --> 00:06:32,644
over the entire range of the HDR standard

131
00:06:32,885 --> 00:06:35,447
so that a human can't visually perceive

132
00:06:35,928 --> 00:06:37,109
a discrete step in brightness.

133
00:06:39,331 --> 00:06:44,234
Now, all this out of the way, we can dive right into the details of bringing HDR display support to Destiny 2.

134
00:06:44,894 --> 00:06:46,135
I told you this recap would be quick.

135
00:06:48,596 --> 00:06:52,218
So we set out with a few explicit goals for our HDR implementation.

136
00:06:52,979 --> 00:06:56,461
The first of these were art-centric and championed by Nate Haubacher over at Bungie,

137
00:06:56,901 --> 00:06:59,002
who is the technical artist I worked with on HDR.

138
00:07:00,303 --> 00:07:03,885
We wanted visual consistency when compared to the SDR version of the game,

139
00:07:05,126 --> 00:07:08,808
as well as the same high level of visual quality that's expected from a Bungie title.

140
00:07:10,783 --> 00:07:12,224
We also needed to build the feature

141
00:07:12,424 --> 00:07:14,686
with little to no extra art support.

142
00:07:14,826 --> 00:07:16,587
Nate would be the only artist working on this.

143
00:07:17,728 --> 00:07:20,090
And this was maybe obviously our largest constraint.

144
00:07:21,131 --> 00:07:23,253
Now in addition to this, as an engineer,

145
00:07:23,413 --> 00:07:25,494
I saw a high degree of technical robustness

146
00:07:25,835 --> 00:07:26,615
in the implementation.

147
00:07:26,895 --> 00:07:28,036
It should always work when it can,

148
00:07:29,097 --> 00:07:30,418
or be clear why it's not working.

149
00:07:31,792 --> 00:07:33,513
Now at the time that we started the work in early 2017,

150
00:07:33,713 --> 00:07:37,096
HDR was in a very early adoption state.

151
00:07:37,616 --> 00:07:39,337
Working with it could be very finicky

152
00:07:39,617 --> 00:07:41,779
and in a few cases it still is.

153
00:07:42,899 --> 00:07:44,981
Very few users would initially have access to it,

154
00:07:45,061 --> 00:07:46,982
hence the limited resources to implement it.

155
00:07:48,563 --> 00:07:50,324
This essentially started out as a pet project.

156
00:07:51,405 --> 00:07:53,046
I was the only engineer working on it

157
00:07:53,066 --> 00:07:55,247
which brought us to a total of two people

158
00:07:55,627 --> 00:07:56,348
to support the feature.

159
00:07:58,033 --> 00:07:59,574
And one last really interesting constraint

160
00:07:59,594 --> 00:08:01,275
that I want to highlight here is that

161
00:08:02,015 --> 00:08:04,176
what we were trying to do was take a game

162
00:08:04,336 --> 00:08:06,297
that was authored and mastered for SDR

163
00:08:06,838 --> 00:08:09,519
and retroactively fit it with HDR display support.

164
00:08:10,560 --> 00:08:12,141
And as we'll see, this is what pulled us away

165
00:08:12,181 --> 00:08:13,701
from doing things the right way

166
00:08:14,702 --> 00:08:16,803
and drove us to come up with some very unique solutions.

167
00:08:19,825 --> 00:08:21,286
Now, if you review some documentation

168
00:08:21,326 --> 00:08:23,107
about adding support for HDR displays,

169
00:08:23,727 --> 00:08:25,928
you can come up with a checklist that looks a bit like this.

170
00:08:26,926 --> 00:08:30,328
First, we need to actually inform the display that we're supplying an HDR picture.

171
00:08:31,029 --> 00:08:33,370
This can be done with the API of the platform that you're working on.

172
00:08:34,771 --> 00:08:37,393
We need to change our backbuffer format to be HDR compliant.

173
00:08:39,315 --> 00:08:43,618
We need to ensure that we have at least 10 bits per channel of precision throughout the entire rendering pipeline.

174
00:08:43,858 --> 00:08:46,740
Otherwise, we're going to lose our larger range in precision.

175
00:08:49,122 --> 00:08:55,806
Now, before sending the image off to the display, we need to convert our picture to the new REC 2020 color space and PQ in code.

176
00:08:56,558 --> 00:08:58,800
Now on PC, these last two items are handled for us

177
00:08:58,840 --> 00:09:00,881
by the display driver, if we choose.

178
00:09:02,322 --> 00:09:04,424
And then, magic, right?

179
00:09:04,524 --> 00:09:05,245
Everything just works.

180
00:09:06,746 --> 00:09:07,186
And it's great.

181
00:09:07,906 --> 00:09:08,467
We send it out.

182
00:09:09,427 --> 00:09:10,788
No, it's not that simple.

183
00:09:12,109 --> 00:09:13,951
Destiny's rendering pipeline at a high level

184
00:09:14,011 --> 00:09:14,971
looks pretty standard.

185
00:09:16,092 --> 00:09:18,334
Lighting and shading uses 11.11.10 buffers.

186
00:09:18,974 --> 00:09:20,595
So we started with sufficient precision there.

187
00:09:21,935 --> 00:09:23,476
Post-process continues on with 11.11.10

188
00:09:24,056 --> 00:09:25,777
as well as 16-bit floating point,

189
00:09:25,917 --> 00:09:28,179
so no work needs to be done there either.

190
00:09:29,820 --> 00:09:33,201
Then we take the scene and we tone map it down to SDR,

191
00:09:33,321 --> 00:09:35,403
and that tone map value is used as an input

192
00:09:35,463 --> 00:09:36,303
into our grading LUTs.

193
00:09:37,304 --> 00:09:39,405
We shift from 16 bits per channel to eight,

194
00:09:39,505 --> 00:09:41,166
and we've moved from scene referred space

195
00:09:41,246 --> 00:09:42,827
to a non-linear tone map space.

196
00:09:43,107 --> 00:09:43,947
We've lost our range.

197
00:09:45,088 --> 00:09:47,789
After this, UI is rendered directly to the back buffer,

198
00:09:49,030 --> 00:09:50,811
and then the final image is sent out to the display.

199
00:09:52,907 --> 00:09:57,149
And these formats used in the latter stages of the pipeline meant that initial HDR support

200
00:09:57,209 --> 00:09:59,750
wasn't as simple as changing the backbuffer format alone.

201
00:10:00,671 --> 00:10:04,173
The result is something similar to this, which hopefully looks a bit dim.

202
00:10:06,154 --> 00:10:09,855
The low brightness is because having rendered to an 8-bit per channel target during the

203
00:10:09,875 --> 00:10:15,738
pipeline, pixel values are clamped to 1, which, on an HDR display, translates to only 80 nits

204
00:10:15,778 --> 00:10:16,198
of brightness.

205
00:10:17,629 --> 00:10:21,094
Under these conditions, we could achieve nothing brighter than that, and because of something

206
00:10:21,114 --> 00:10:23,657
called the Hunt effect, you get something that looks pretty dull.

207
00:10:26,148 --> 00:10:30,550
Now fortunately for Destiny, it was fairly simple to change all these formats when running with HDR enabled.

208
00:10:30,890 --> 00:10:35,532
And we did this by branching, maintaining the old SDR pipeline in its entirety,

209
00:10:36,013 --> 00:10:41,655
while introducing a new rendering path where these formats would be different if our target display was HDR.

210
00:10:42,376 --> 00:10:47,718
On PC, the back buffer format was 16-bit floating point, and on console it's 10 bits per channel, 2 bits alpha.

211
00:10:49,959 --> 00:10:52,240
And the result of doing this is we go from this very dim picture.

212
00:10:54,292 --> 00:10:55,893
to something that takes much better advantage

213
00:10:55,913 --> 00:10:57,535
of the range that HDR has to offer.

214
00:10:58,816 --> 00:11:00,717
But of course, it's still not really that simple.

215
00:11:01,558 --> 00:11:02,819
If it were, I wouldn't be up here talking.

216
00:11:05,020 --> 00:11:06,401
The next step after that was figuring out

217
00:11:06,442 --> 00:11:07,562
a tone map for HDR.

218
00:11:09,604 --> 00:11:11,345
I mentioned earlier that tone mapping takes place

219
00:11:11,425 --> 00:11:12,666
right at the end of post-processing

220
00:11:12,786 --> 00:11:13,747
alongside color grading.

221
00:11:14,488 --> 00:11:16,749
Destiny 2 has a rather unique tone mapping curve

222
00:11:16,809 --> 00:11:17,490
and it looks like this.

223
00:11:18,771 --> 00:11:20,032
It doesn't really have much of a toe.

224
00:11:20,652 --> 00:11:22,434
It gives more contrast to the low ranges

225
00:11:22,554 --> 00:11:23,194
rather than the mid.

226
00:11:24,359 --> 00:11:25,980
And initially, for simplicity's sake,

227
00:11:26,060 --> 00:11:28,802
we implemented the ACES HDR filming tone mapping curve

228
00:11:29,043 --> 00:11:30,344
just to get us off the ground and running.

229
00:11:30,364 --> 00:11:31,985
And that looks like this.

230
00:11:32,946 --> 00:11:35,487
It's kind of a different shape than Destiny's curve.

231
00:11:36,168 --> 00:11:36,848
You can see that here.

232
00:11:39,310 --> 00:11:41,792
So the result doesn't actually match the intent of SDR

233
00:11:41,812 --> 00:11:43,533
very well, as you can see here.

234
00:11:43,934 --> 00:11:45,855
SDR is in the left halves of these images

235
00:11:45,935 --> 00:11:47,296
and HDR is in the right.

236
00:11:48,317 --> 00:11:50,078
In particular, the darks were really crushed.

237
00:11:51,130 --> 00:11:54,892
We couldn't go the ASIS route because it was too far off from our goal of visual consistency,

238
00:11:54,933 --> 00:11:59,695
and also players would have kind of a terrible time trying to play in dark conditions like that.

239
00:12:02,237 --> 00:12:05,559
So we modeled an HDR curve that matched the shape of the SDR curve

240
00:12:06,519 --> 00:12:08,360
and got much more visually consistent results.

241
00:12:09,058 --> 00:12:11,380
Now, this is an area where we probably could have explored

242
00:12:11,400 --> 00:12:13,642
other options, but with the existing SDR curve

243
00:12:13,762 --> 00:12:15,903
so ingrained in the visual style of Destiny

244
00:12:16,424 --> 00:12:17,565
and in artists' expectations,

245
00:12:18,385 --> 00:12:20,347
changing the SDR pipeline was a non-starter

246
00:12:20,527 --> 00:12:22,268
given the impact and the resources that we had.

247
00:12:22,869 --> 00:12:23,249
Two people.

248
00:12:25,911 --> 00:12:27,032
Next up, color grading.

249
00:12:29,366 --> 00:12:31,146
Color grading is a step during post-process

250
00:12:31,206 --> 00:12:33,867
that essentially converts colors to other colors.

251
00:12:34,467 --> 00:12:36,048
It's a common practice in the film industry

252
00:12:36,148 --> 00:12:38,008
to alter the look of any given frame.

253
00:12:38,708 --> 00:12:40,909
We use it in games primarily to set ambiance

254
00:12:40,949 --> 00:12:42,309
or create color warping effects.

255
00:12:42,609 --> 00:12:45,290
For example, when you travel through a man cannon

256
00:12:45,330 --> 00:12:47,751
or a VEX teleporter in the game, as pictured here,

257
00:12:48,771 --> 00:12:50,271
a LUT transformation is being used

258
00:12:50,311 --> 00:12:52,312
to achieve part of the screen space effect you see.

259
00:12:53,412 --> 00:12:55,713
The hurdle that we faced was that the LUTs for Destiny 2

260
00:12:55,773 --> 00:12:58,453
were authored for colors in SDR space from zero to one.

261
00:12:59,278 --> 00:13:03,840
So the values we got back were not HDR, and the values it expected to go into it were also not HDR.

262
00:13:06,102 --> 00:13:11,565
There were two choices. Either we re-author the LUTs for HDR and choose which tables to use

263
00:13:11,585 --> 00:13:17,088
depending on what display we're outputting to, or we find a clever way to use the SDR LUTs.

264
00:13:17,348 --> 00:13:20,630
And as an engineer, of course I went the route of trying to be clever.

265
00:13:22,238 --> 00:13:23,499
I settled on some math trickery,

266
00:13:24,439 --> 00:13:27,560
considering that we're taking a linear input, y equals x,

267
00:13:28,380 --> 00:13:29,981
tone mapping it down to a new range,

268
00:13:31,021 --> 00:13:33,462
y equals str tone mapped, so s of x,

269
00:13:34,562 --> 00:13:35,763
and then transforming that color

270
00:13:35,883 --> 00:13:37,863
with a lookup table, l of s of x.

271
00:13:39,144 --> 00:13:41,465
The hdr value we want in the end before tone mapping

272
00:13:41,525 --> 00:13:43,265
is just our original linear input,

273
00:13:43,345 --> 00:13:45,526
so if we ignore the color transform,

274
00:13:46,643 --> 00:13:51,346
To get back to our original linear value, we just have to multiply by x over S of x, and voila!

275
00:13:52,027 --> 00:13:53,488
We have our HDR value back.

276
00:13:55,369 --> 00:13:55,869
And it worked!

277
00:13:56,429 --> 00:13:59,171
And this is what the code looks like, or pseudocode at least.

278
00:13:59,231 --> 00:14:02,374
We tone map our SDR color, we perform our LUT lookup,

279
00:14:02,934 --> 00:14:07,317
we calculate this transform by dividing the input color — careful not to divide by zero —

280
00:14:08,498 --> 00:14:10,439
and then we multiply our LUT color by that transform.

281
00:14:13,005 --> 00:14:14,945
Now when I say it worked, it wasn't quite perfect

282
00:14:15,666 --> 00:14:17,526
because whenever the input color is zero,

283
00:14:18,987 --> 00:14:20,607
we'll fail to perform a color replacement

284
00:14:20,647 --> 00:14:22,448
because we'll still get zero as a result.

285
00:14:22,468 --> 00:14:24,488
And this means that we can't replace the color black.

286
00:14:26,869 --> 00:14:28,190
We decided to ship with that issue

287
00:14:29,370 --> 00:14:30,711
as it really wasn't very common

288
00:14:30,751 --> 00:14:32,691
to try to perform that color replacement

289
00:14:32,971 --> 00:14:33,872
in that specific case.

290
00:14:35,412 --> 00:14:37,593
We did unwittingly ship with a different bug though

291
00:14:37,673 --> 00:14:39,493
and maybe some of you saw this at some point

292
00:14:39,974 --> 00:14:40,914
if you play with HDR.

293
00:14:41,945 --> 00:14:43,286
because this one was around for a while.

294
00:14:52,833 --> 00:14:55,255
Yeah, so anywhere in the game that had

295
00:14:55,575 --> 00:14:57,697
particularly dark colors like this cave

296
00:14:59,058 --> 00:15:00,879
ended up getting kind of blown out,

297
00:15:00,919 --> 00:15:04,582
looking overly bright and bloomy in a pretty broken way

298
00:15:04,782 --> 00:15:07,664
with elements of it still just as dark

299
00:15:07,704 --> 00:15:09,385
as they should be in splotches.

300
00:15:09,405 --> 00:15:10,606
Yeah, it doesn't look good.

301
00:15:13,127 --> 00:15:18,310
And the problem became very clear when the trick to transform our LUT lookups back to HDR space was graphed out.

302
00:15:18,430 --> 00:15:20,571
So this is a graph of that mathematical trick.

303
00:15:23,132 --> 00:15:27,674
As the linear input approaches zero, the transform actually starts to slope upward.

304
00:15:28,034 --> 00:15:31,456
So LUT lookups from the dark input colors, like the ones seen here on the right,

305
00:15:32,136 --> 00:15:34,657
are actually going to be greatly amplified, like so.

306
00:15:37,323 --> 00:15:39,044
Now the fix wasn't particularly elegant,

307
00:15:39,144 --> 00:15:39,925
but it worked pretty well.

308
00:15:40,645 --> 00:15:41,906
I introduced a piecewise function

309
00:15:41,926 --> 00:15:43,887
that would preserve the slope of the transform curve

310
00:15:44,007 --> 00:15:45,108
as the input approached zero.

311
00:15:45,828 --> 00:15:48,290
And this abrupt change in slope at the intersection point

312
00:15:48,330 --> 00:15:50,612
of the two functions didn't produce any visual artifacts.

313
00:15:51,772 --> 00:15:53,253
I verified the validity of the approach

314
00:15:53,353 --> 00:15:55,475
using the HDR-SDR comparison tool,

315
00:15:55,835 --> 00:15:57,176
which I'll talk about more shortly.

316
00:15:57,916 --> 00:15:59,317
You can see that on the right side there.

317
00:16:03,180 --> 00:16:03,820
Okay, UI.

318
00:16:05,517 --> 00:16:08,038
UI was definitely the most arduous journey

319
00:16:08,158 --> 00:16:09,539
in bringing HDR to Destiny 2.

320
00:16:10,960 --> 00:16:12,681
We tried a total of three different solutions.

321
00:16:14,263 --> 00:16:16,604
Each had unique issues, so we just picked the one

322
00:16:16,624 --> 00:16:18,585
with the least complicated problems to solve

323
00:16:18,605 --> 00:16:19,746
and plowed right through those.

324
00:16:21,007 --> 00:16:22,228
There were two key things that played

325
00:16:22,268 --> 00:16:23,229
into all this difficulty.

326
00:16:25,090 --> 00:16:26,951
The first one, unlike lighting calculations,

327
00:16:27,071 --> 00:16:29,173
UI content is inherently SDR content.

328
00:16:29,933 --> 00:16:32,655
You're taking images that were authored on an sRGB display

329
00:16:32,715 --> 00:16:33,616
and drawing them right back.

330
00:16:34,434 --> 00:16:35,235
what you see is what you get.

331
00:16:36,815 --> 00:16:38,676
And the second problem is that UI is expected

332
00:16:38,716 --> 00:16:40,257
to be blended in SDR space.

333
00:16:44,039 --> 00:16:46,621
Quick preview of UI rendering in Destiny.

334
00:16:47,781 --> 00:16:49,983
Each UI element in Destiny is rendered directly

335
00:16:50,023 --> 00:16:51,804
to the back buffer, like the cursor here.

336
00:16:52,964 --> 00:16:54,625
Some more complex elements are rendered

337
00:16:54,645 --> 00:16:56,226
to a smaller offscreen buffer first,

338
00:16:56,406 --> 00:16:57,627
and then the contents of that buffer

339
00:16:57,647 --> 00:16:58,688
are rendered to the back buffer.

340
00:16:59,629 --> 00:17:01,730
And lastly, there are these things called overdraw elements,

341
00:17:01,990 --> 00:17:03,671
which sample from the back buffer first,

342
00:17:04,371 --> 00:17:06,613
perform maybe some kind of blur on that sample,

343
00:17:06,793 --> 00:17:08,274
and then render over that sample

344
00:17:08,434 --> 00:17:09,955
and draw that back onto the back buffer.

345
00:17:11,256 --> 00:17:12,416
The first challenge that I mentioned,

346
00:17:12,777 --> 00:17:14,058
UI is authored for SDR,

347
00:17:14,098 --> 00:17:16,039
seems really easy to overcome at first.

348
00:17:16,699 --> 00:17:18,120
Just boost the brightness of the UI

349
00:17:18,400 --> 00:17:19,461
into a more suitable range.

350
00:17:20,682 --> 00:17:21,662
So attempt number one was,

351
00:17:22,363 --> 00:17:24,344
still render all the UI directly to the back buffer,

352
00:17:24,884 --> 00:17:26,365
but multiply by some magic constant.

353
00:17:28,748 --> 00:17:33,409
Now unfortunately, giving each individual color channel a boost in intensity didn't end up looking quite right.

354
00:17:33,429 --> 00:17:37,150
All the UI elements look washed out, overly white shifted.

355
00:17:37,890 --> 00:17:44,172
The reason for this is gamma encoding, or more generally display transfer functions, or in this case, lack thereof.

356
00:17:46,172 --> 00:17:51,333
In SDR, you're viewing the UI after it undergoes a gamma transformation when being decoded by the display.

357
00:17:52,627 --> 00:17:56,649
And the result of performing this operation on each channel individually

358
00:17:57,069 --> 00:17:58,690
actually means that a hue shift takes place.

359
00:17:59,971 --> 00:18:03,533
This meant that in order to faithfully reproduce UI as viewed on an SD or monitor,

360
00:18:04,113 --> 00:18:07,855
it would have to undergo the same transformation, but we would have to perform this manually.

361
00:18:09,556 --> 00:18:10,617
And the code looks something like this,

362
00:18:11,277 --> 00:18:14,019
raised to a gamma exponent and then multiplied by our magic constant.

363
00:18:14,319 --> 00:18:16,240
The result turns out to be pretty accurate.

364
00:18:17,447 --> 00:18:19,847
And with some experimentation, we settled on a gamma exponent of 2.8

365
00:18:20,907 --> 00:18:23,008
and a boost to a maximum of 700 nits,

366
00:18:23,128 --> 00:18:24,848
which when you think about it is actually quite bright.

367
00:18:27,649 --> 00:18:30,829
Unfortunately, there were still other issues after this first pass.

368
00:18:31,029 --> 00:18:33,790
More complex elements like overdraw elements were completely wrong.

369
00:18:34,370 --> 00:18:37,350
You can see that at the bottom here with the new user experience overlay.

370
00:18:38,831 --> 00:18:42,311
The buttons in the character creator screen were also super broken.

371
00:18:43,552 --> 00:18:45,952
And text looked severely aliased in some places.

372
00:18:47,147 --> 00:18:49,028
The overdraw is the most straightforward to address,

373
00:18:49,308 --> 00:18:51,209
just don't perform the HDR transform

374
00:18:51,269 --> 00:18:53,210
when drawing back the overdraw element

375
00:18:53,310 --> 00:18:55,472
because you've already sampled it from HDR space.

376
00:18:55,992 --> 00:18:57,253
We don't want double HDR.

377
00:18:58,573 --> 00:19:01,375
Text, unfortunately, complicated matters quite a bit more.

378
00:19:02,236 --> 00:19:04,457
It turns out that we can't blend SDR content

379
00:19:04,557 --> 00:19:07,739
over HDR content because this ends up darkening the pixels

380
00:19:07,859 --> 00:19:10,220
rather than brightening them as it would have in SDR.

381
00:19:12,547 --> 00:19:16,109
So our next plan was, why don't we render all our UI elements

382
00:19:16,170 --> 00:19:17,491
to some off-screen container

383
00:19:17,531 --> 00:19:19,032
that's the same size as the back buffer.

384
00:19:19,052 --> 00:19:21,774
We'll do all this blending in SDR space

385
00:19:21,794 --> 00:19:24,856
and then perform one big transform to HDR space at the end.

386
00:19:26,218 --> 00:19:27,539
This still had two problems.

387
00:19:28,619 --> 00:19:31,582
One was really specific to Destiny's UI architecture.

388
00:19:31,602 --> 00:19:34,684
And it was that overdraw had nothing to sample from.

389
00:19:34,925 --> 00:19:36,786
It would try to sample from this blank container

390
00:19:36,946 --> 00:19:38,307
on which we were rendering all our UI.

391
00:19:39,303 --> 00:19:41,483
The second issue was that text would still look aliased

392
00:19:41,543 --> 00:19:43,344
because even though we've removed the problem

393
00:19:43,384 --> 00:19:45,905
of blending over UI elements in SDR space,

394
00:19:46,945 --> 00:19:48,745
it was still ultimately trying to be blended

395
00:19:48,805 --> 00:19:50,386
over HDR colors in the back buffer.

396
00:19:52,406 --> 00:19:53,747
So our next idea after that was,

397
00:19:54,127 --> 00:19:55,807
let's implement a custom blending pass.

398
00:19:56,327 --> 00:19:58,788
But that still didn't give the overdraw mechanism

399
00:19:58,848 --> 00:20:02,089
any source to sample from, so we had to scrap that too.

400
00:20:03,709 --> 00:20:06,630
So I backtracked to rendering UI offscreen

401
00:20:07,250 --> 00:20:08,190
with one small change.

402
00:20:09,905 --> 00:20:12,566
Before rendering the UI, I'd copy the back buffer into it

403
00:20:12,826 --> 00:20:14,527
and use a simple reversible tone mapper

404
00:20:14,547 --> 00:20:16,267
to bring it into an SDR range.

405
00:20:17,668 --> 00:20:18,989
Render all of the UI in SDR,

406
00:20:19,889 --> 00:20:22,050
and then reverse tone map back into HDR space.

407
00:20:22,810 --> 00:20:25,951
The tone mapping function was specifically chosen

408
00:20:25,991 --> 00:20:28,012
to be the exact inverse of the transformations

409
00:20:28,532 --> 00:20:30,773
to bring UI content into HDR space,

410
00:20:30,913 --> 00:20:33,194
so the full operation would be a no-op for pixels

411
00:20:33,234 --> 00:20:35,195
that didn't have UI rendered over them.

412
00:20:37,920 --> 00:20:40,001
Just review that again using our render pass diagrams,

413
00:20:41,381 --> 00:20:43,142
lighting and shading and post-process from before.

414
00:20:44,863 --> 00:20:46,623
And in our HDR rendering branch,

415
00:20:46,663 --> 00:20:48,224
we tone map and color grade for HDR.

416
00:20:49,244 --> 00:20:51,465
We then tone map down to SDR range,

417
00:20:51,725 --> 00:20:54,766
but still keep our 16-bit floating point precision,

418
00:20:55,826 --> 00:20:58,167
render all of our UI in SDR range,

419
00:20:58,587 --> 00:21:01,628
and then inverse tone map back into our new back buffer

420
00:21:01,668 --> 00:21:02,728
with our UI rendered over it,

421
00:21:03,468 --> 00:21:05,449
and then we can output to the display.

422
00:21:09,453 --> 00:21:11,875
So now let's talk about our HDR-SDR comparison tool.

423
00:21:13,816 --> 00:21:15,216
While all of this work was going on,

424
00:21:15,376 --> 00:21:16,737
there came this request from TechArt

425
00:21:17,157 --> 00:21:19,218
to have a means of comparing the two contents

426
00:21:19,398 --> 00:21:20,199
on the same display.

427
00:21:21,199 --> 00:21:22,940
And this is a really interesting challenge

428
00:21:23,080 --> 00:21:25,501
because once a display is in HDR mode,

429
00:21:26,341 --> 00:21:28,643
SDR values are going to be interpreted literally.

430
00:21:30,143 --> 00:21:32,404
Modern SDR displays actually boost the brightness

431
00:21:32,484 --> 00:21:35,206
of your content above the standard 80 nits

432
00:21:35,346 --> 00:21:36,506
to something like three to 400 nits.

433
00:21:38,937 --> 00:21:41,359
And due to the hunt effect, like this image I showed earlier,

434
00:21:41,439 --> 00:21:44,781
if you were to just view this content at its intended 80 nits,

435
00:21:45,441 --> 00:21:48,063
it would look less saturated even though it's the same color value.

436
00:21:49,164 --> 00:21:52,005
Brighter values cause the perception of higher saturation.

437
00:21:52,986 --> 00:21:55,387
So what this means is that just tone mapping to SDR

438
00:21:55,427 --> 00:21:57,549
and throwing the result up on the screen wouldn't fly.

439
00:21:58,549 --> 00:22:00,951
We'll get an image that looks dim and desaturated like this one,

440
00:22:01,271 --> 00:22:03,152
since it's only maxing out at a very low brightness.

441
00:22:05,144 --> 00:22:07,665
Now before I actually go into how we made this comparison tool,

442
00:22:08,065 --> 00:22:10,606
I just want to stress the tremendous amount of value that it had.

443
00:22:11,426 --> 00:22:15,307
I mentioned before that we utilized it when comparing the SDR and HDR tone mapping curves.

444
00:22:16,108 --> 00:22:20,369
And then I also used it when chasing down the color grading bug where dark areas appeared extra bloomy.

445
00:22:21,830 --> 00:22:24,671
The following images were taken really early in HDR's development,

446
00:22:25,331 --> 00:22:28,292
and are just photos taken of the HDR screen with an iPhone.

447
00:22:28,752 --> 00:22:30,953
But more importantly, demonstrate two things.

448
00:22:31,693 --> 00:22:34,594
HDR on the right definitely had the wrong look.

449
00:22:35,691 --> 00:22:38,571
and SDR on the left was definitely reasonably reproduced.

450
00:22:41,472 --> 00:22:43,052
One major issue that we had early on

451
00:22:43,092 --> 00:22:44,092
was the shift of colors,

452
00:22:44,192 --> 00:22:46,253
particularly in the skybox pictured here,

453
00:22:46,333 --> 00:22:47,113
the planet Nessus.

454
00:22:48,433 --> 00:22:50,173
It can be seen in the background light shafts,

455
00:22:50,234 --> 00:22:51,494
which are blue in SDR,

456
00:22:52,154 --> 00:22:53,954
but came through green in HDR.

457
00:22:54,314 --> 00:22:56,375
And the reason for this was that the linear values

458
00:22:56,435 --> 00:22:58,115
produced by the skybox were actually

459
00:22:58,515 --> 00:22:59,975
somewhat dominated by the green channel,

460
00:23:00,955 --> 00:23:02,216
but the SDR tone mapping curve

461
00:23:02,256 --> 00:23:03,516
balanced out both blue and green.

462
00:23:04,378 --> 00:23:06,919
And the HDR tone mapping curve exposed this discrepancy

463
00:23:08,140 --> 00:23:09,340
because it didn't match the intent

464
00:23:09,360 --> 00:23:10,641
of the SDR curve at this point.

465
00:23:12,321 --> 00:23:14,722
The second issue, which was also present in the other shots,

466
00:23:14,802 --> 00:23:16,803
was this real over-darkening of areas.

467
00:23:17,243 --> 00:23:18,984
This was partially due to the tone mapping curve,

468
00:23:19,624 --> 00:23:21,465
but it was also due to my overzealous attempt

469
00:23:21,505 --> 00:23:23,146
to correct for the lack of ambient occlusion

470
00:23:23,186 --> 00:23:24,466
in my own local content build

471
00:23:25,406 --> 00:23:26,727
with the toe of the tone mapping curve.

472
00:23:27,047 --> 00:23:29,608
So when that was combined with the real baked AO solution,

473
00:23:30,128 --> 00:23:31,549
it would produce this really dark spaces.

474
00:23:32,289 --> 00:23:32,389
Oops.

475
00:23:34,815 --> 00:23:35,695
How do we actually do this?

476
00:23:37,516 --> 00:23:38,996
The problem that we were solving for UI

477
00:23:39,036 --> 00:23:41,177
was teaching us pretty important lessons

478
00:23:41,197 --> 00:23:43,118
that were required to understand this problem too.

479
00:23:44,038 --> 00:23:45,959
All we need to do is recreate the transforms

480
00:23:45,999 --> 00:23:47,900
that a pixel would go through on an SDR display

481
00:23:47,940 --> 00:23:49,541
and then scale that to a target brightness.

482
00:23:50,221 --> 00:23:51,621
But what exactly are those transforms?

483
00:23:52,282 --> 00:23:55,123
We wanted to be more exact here than we were with the UI,

484
00:23:55,763 --> 00:23:57,724
so we needed to understand them in greater detail

485
00:23:57,764 --> 00:24:00,005
in order to manually reproduce this SDR image.

486
00:24:00,025 --> 00:24:02,866
And there are two types of transfer functions at play here.

487
00:24:03,961 --> 00:24:07,342
The first are EOTFs, or electro-optical transfer functions,

488
00:24:07,522 --> 00:24:09,763
which define a transformation from a signal voltage

489
00:24:10,323 --> 00:24:12,064
to an optical intensity on a display.

490
00:24:13,584 --> 00:24:15,045
And the second are OETFs,

491
00:24:15,865 --> 00:24:17,786
or opto-electrical transfer functions,

492
00:24:18,666 --> 00:24:19,926
which define a transformation

493
00:24:20,286 --> 00:24:22,147
from an optical intensity to a voltage.

494
00:24:22,447 --> 00:24:24,648
Now, both of these functions are the answer to the question,

495
00:24:25,148 --> 00:24:26,589
how do you represent a light intensity

496
00:24:26,809 --> 00:24:27,609
with a single voltage?

497
00:24:28,588 --> 00:24:34,091
An EOTF is the reproduction of light from a voltage, and an OETF is the capture of light to a voltage.

498
00:24:36,352 --> 00:24:41,114
These transformations in conjunction are important because, as we saw with the gamma correction on UI,

499
00:24:41,695 --> 00:24:46,577
applying them to individual color channels alters the linear curve, and introduces a hue shift.

500
00:24:47,858 --> 00:24:51,379
These differing transfer functions are also the reason that brightness screens exist in video games.

501
00:24:52,159 --> 00:24:54,620
Depending on the transfer function used by your display and media,

502
00:24:55,140 --> 00:24:58,822
you may not see the content as it was authored or mastered.

503
00:24:59,462 --> 00:25:02,404
The brightness screen adjusts the gamma exponent in order to better tune

504
00:25:03,104 --> 00:25:04,505
for the intended visual output.

505
00:25:06,385 --> 00:25:10,087
Now for the reproduction of SDR content in HDR, we chose the sRGBF...

506
00:25:10,807 --> 00:25:11,248
sorry, bleh...

507
00:25:11,708 --> 00:25:15,630
the sRGBEOTF, so many acronyms, which generates this curve.

508
00:25:16,878 --> 00:25:20,999
and the BT709 OETF, which is from the standard for high definition television.

509
00:25:21,719 --> 00:25:25,740
After tone mapping for SDR in our tone mapping pass, we would run the pixel values through

510
00:25:25,780 --> 00:25:28,881
both of these curves and then scale that result to a target brightness.

511
00:25:30,842 --> 00:25:31,762
And here's the final result.

512
00:25:32,662 --> 00:25:36,143
Standard SDR is on the left and our recreation in HDR is on the right.

513
00:25:38,844 --> 00:25:42,565
And here's another look with these photos being taken on the monitor to try to demonstrate

514
00:25:42,625 --> 00:25:44,526
what you would see if you were just looking at the screen.

515
00:25:45,582 --> 00:25:47,323
Now TechR was really happy with the results.

516
00:25:47,503 --> 00:25:49,723
They felt that it faithfully reproduced the SDR look

517
00:25:50,183 --> 00:25:52,864
and used it in order to tune HDR tone mapping curve

518
00:25:53,184 --> 00:25:55,145
to match the intent of the SDR tone mapping curve.

519
00:25:56,265 --> 00:25:58,445
I must highlight though that these images here

520
00:25:58,465 --> 00:26:00,426
definitely don't look perfect

521
00:26:01,546 --> 00:26:03,507
and I'll get to why that is in just a little bit.

522
00:26:05,167 --> 00:26:05,547
But first.

523
00:26:06,899 --> 00:26:09,381
I want to talk about some of the more interesting problems

524
00:26:09,421 --> 00:26:10,442
that came up during this work.

525
00:26:11,543 --> 00:26:13,725
Consider this a mix between a rant and a brain dump

526
00:26:13,765 --> 00:26:15,366
of all the weird things that I encountered

527
00:26:15,827 --> 00:26:17,048
and learned while working on this.

528
00:26:19,550 --> 00:26:20,051
So first up.

529
00:26:21,478 --> 00:26:24,281
Some TVs may not support HDR right out of the box.

530
00:26:24,861 --> 00:26:29,264
You may be required to locate an enhanced HDMI setting

531
00:26:29,845 --> 00:26:30,625
for one of the inputs.

532
00:26:31,105 --> 00:26:31,966
Usually it's input one.

533
00:26:33,007 --> 00:26:35,208
Usually that's the only input that supports the switch.

534
00:26:35,529 --> 00:26:36,349
But until you do that,

535
00:26:36,389 --> 00:26:39,472
your hardware won't recognize the TV as HDR capable.

536
00:26:39,572 --> 00:26:41,353
And this must be really great for a consumer

537
00:26:41,373 --> 00:26:43,314
to unbox their brand new HDR TV,

538
00:26:43,815 --> 00:26:44,795
plug their console into it,

539
00:26:44,855 --> 00:26:47,077
and then have the console say, nope, not HDR.

540
00:26:50,709 --> 00:26:53,650
More technically, we had to be careful about using saturate in our shaders

541
00:26:54,611 --> 00:26:56,931
because this inherently clamps to a 0 to 1 range,

542
00:26:57,051 --> 00:27:00,873
so you're automatically going to lose this larger range that HDR has to offer.

543
00:27:02,013 --> 00:27:03,254
The solution here is pretty simple.

544
00:27:03,534 --> 00:27:06,155
Roll your own saturate function or just avoid its use in general.

545
00:27:08,355 --> 00:27:10,616
If you're using 16-bit floating-point buffers,

546
00:27:10,996 --> 00:27:12,837
that actually means you can get negative numbers.

547
00:27:14,001 --> 00:27:18,123
This picture here is a bug that we had when we tried to use 16-bit floating point lighting

548
00:27:18,143 --> 00:27:19,384
and shading buffers instead of 111110.

549
00:27:19,984 --> 00:27:25,568
The VFX for the ship's thrusters in this cutscene could generate negative numbers in

550
00:27:25,588 --> 00:27:28,950
the frame buffer that would lead to these colorful artifacts.

551
00:27:29,890 --> 00:27:33,912
In this case, we addressed it simply by not leveraging 16-bit floating point lighting

552
00:27:33,932 --> 00:27:34,573
and shading buffers.

553
00:27:35,613 --> 00:27:39,336
In the future, the more ideal fix would be to just obviously prevent these negative colors

554
00:27:39,376 --> 00:27:39,796
from happening.

555
00:27:42,681 --> 00:27:46,603
Our two anti-aliasing algorithms, FXAA and SMAA,

556
00:27:47,263 --> 00:27:50,145
need to operate in SDR space in order to be effective at all.

557
00:27:51,185 --> 00:27:53,606
In both cases, we use a cheap reversible tone mapper

558
00:27:54,747 --> 00:27:57,168
to bring the range down before performing AA

559
00:27:57,308 --> 00:27:58,969
and then inverse tone map back to HDR.

560
00:28:00,849 --> 00:28:03,490
And then finally, on screens with really, really deep blacks,

561
00:28:03,570 --> 00:28:05,771
like OLEDs, screen noise suddenly

562
00:28:05,811 --> 00:28:07,452
becomes much more pronounced and visible.

563
00:28:07,952 --> 00:28:09,193
It looks like static.

564
00:28:10,073 --> 00:28:11,634
So you have to attenuate it accordingly,

565
00:28:11,694 --> 00:28:14,355
depending on the minimum brightness of your display,

566
00:28:15,055 --> 00:28:15,615
or the low range.

567
00:28:17,796 --> 00:28:20,277
And then all these technical gotchas get kind of crazier

568
00:28:20,357 --> 00:28:22,698
when we start talking about support for HDR on PC.

569
00:28:23,479 --> 00:28:25,860
And admittedly, this space is much better than it once was,

570
00:28:26,000 --> 00:28:27,100
but at the same time,

571
00:28:27,781 --> 00:28:29,681
I think it has a bit of a long way to stabilize.

572
00:28:31,112 --> 00:28:34,294
So here's a short retrospective on developing an HDR game on Windows.

573
00:28:37,056 --> 00:28:41,499
For the longest time, we were plagued by this banding in the skybox and other atmospheric effects.

574
00:28:42,700 --> 00:28:44,801
Really anywhere that had a gradual gradient of color.

575
00:28:46,102 --> 00:28:47,143
I was quite confused.

576
00:28:47,463 --> 00:28:56,189
I painstakingly scrutinized every single stage of rendering for weeks to try to spot where this banding was being introduced, convinced that we were losing precision somewhere.

577
00:28:58,562 --> 00:29:00,763
But eventually I arrived at the NVIDIA display settings

578
00:29:00,783 --> 00:29:02,985
where you can choose the output color depth for your display.

579
00:29:04,266 --> 00:29:06,368
And I found that it had defaulted to eight bits per channel.

580
00:29:07,649 --> 00:29:09,810
The reason for this, I'm pretty sure was that the video mode

581
00:29:09,830 --> 00:29:12,152
I was trying to run 4K at 60 FPS

582
00:29:12,973 --> 00:29:14,394
required a data rate too high

583
00:29:14,434 --> 00:29:16,255
for the HDMI protocol at the time.

584
00:29:17,856 --> 00:29:19,438
Dropping this target frame rate to 30

585
00:29:19,538 --> 00:29:21,519
and then manually switching this bit depth

586
00:29:22,280 --> 00:29:24,902
to 10 bits per channel fixed the banding.

587
00:29:26,054 --> 00:29:28,855
What was odd is that I still had to change the output color depth manually.

588
00:29:29,656 --> 00:29:34,698
And this is another area where I could see players getting pretty confused about not getting the best quality out of the box.

589
00:29:37,639 --> 00:29:44,681
Quickly, if we look at the requirements for 4K HDR, 30fps would require something a little over 11 gigabit per second rates,

590
00:29:44,761 --> 00:29:47,162
while 60fps naturally requires twice that.

591
00:29:48,023 --> 00:29:49,503
This was with no chroma subsampling.

592
00:29:50,827 --> 00:29:55,190
Now fortunately HDMI 2.1 supports these rates and so does DisplayPort,

593
00:29:55,230 --> 00:29:57,852
so just make sure that you're using either of those if you're going to do this work.

594
00:30:01,315 --> 00:30:04,617
Now when we first shipped HDR on PC we got a really positive response.

595
00:30:05,138 --> 00:30:09,001
We'd hit our goals for visual consistency, quality, technical robustness.

596
00:30:10,215 --> 00:30:12,876
and we were one of only a handful of HDR games

597
00:30:13,096 --> 00:30:13,957
on the PC at the time.

598
00:30:14,937 --> 00:30:16,238
People were having very few issues

599
00:30:16,258 --> 00:30:18,319
getting the game to engage HDR, which was great.

600
00:30:18,860 --> 00:30:21,821
I think one player commented something to the effect of,

601
00:30:22,081 --> 00:30:25,123
finally, an HDR game on the PC that just works.

602
00:30:26,784 --> 00:30:29,566
However, HDR was still a feature that was restricted

603
00:30:29,626 --> 00:30:31,227
to full-screen exclusive window mode,

604
00:30:32,107 --> 00:30:33,928
and that's a mode that not everybody likes to use.

605
00:30:35,015 --> 00:30:37,936
So when new DXGI features started to come into the picture,

606
00:30:38,137 --> 00:30:40,158
I wondered if we could improve on this implementation

607
00:30:40,318 --> 00:30:42,099
and support HDR in a windowed mode.

608
00:30:45,341 --> 00:30:47,002
Now ideally, an HDR game on Windows

609
00:30:47,042 --> 00:30:48,763
supports both Windows 7 and Windows 10.

610
00:30:49,603 --> 00:30:51,744
Windows 7 requires full screen exclusive,

611
00:30:51,764 --> 00:30:52,685
there's no getting around that.

612
00:30:53,305 --> 00:30:56,247
It has to be engaged with the APIs from NVIDIA or AMD.

613
00:30:57,007 --> 00:30:59,229
While Windows 10 can now utilize DXGI

614
00:30:59,249 --> 00:31:02,150
to query HDR support and set the metadata appropriate.

615
00:31:03,217 --> 00:31:05,759
What we tried, and what I'd recommend doing,

616
00:31:06,619 --> 00:31:09,741
is first checking for compatibility with DXGI 1.5 or above.

617
00:31:10,621 --> 00:31:11,782
This will tell you whether you're working

618
00:31:11,802 --> 00:31:12,822
with Windows 10 or 7.

619
00:31:13,763 --> 00:31:15,564
Then you have to check if the monitor's color space

620
00:31:15,624 --> 00:31:15,904
is REC 2020.

621
00:31:16,284 --> 00:31:20,747
Now, if HDR and advanced color is turned on in the OS,

622
00:31:20,967 --> 00:31:21,307
it will be.

623
00:31:22,288 --> 00:31:23,328
If neither of those are true,

624
00:31:23,788 --> 00:31:25,689
you should fall back to using vendor APIs,

625
00:31:25,749 --> 00:31:27,891
because it means either it's not on by default,

626
00:31:27,911 --> 00:31:29,992
and you have to go into full screen exclusive to turn it on,

627
00:31:30,732 --> 00:31:31,933
or you're using Windows 7,

628
00:31:32,113 --> 00:31:32,973
and you have to do that anyway.

629
00:31:34,810 --> 00:31:37,292
We make the distinction between native and vendor support

630
00:31:38,012 --> 00:31:40,253
and cache which support we have in order to determine

631
00:31:40,633 --> 00:31:42,374
how to enable it if the user chooses to.

632
00:31:43,835 --> 00:31:46,216
It's also worth pointing out, both of these methods

633
00:31:46,256 --> 00:31:48,318
can use a 16-bit floating point back buffer

634
00:31:48,358 --> 00:31:51,119
with 709 primaries, so you are able to unify

635
00:31:51,139 --> 00:31:54,601
your two pipelines for both cases, which is great.

636
00:31:57,909 --> 00:32:01,271
Now that works great on the surface, but HDR and DXGI still has its quirks.

637
00:32:01,791 --> 00:32:04,973
The first that I found is that depending on which back buffer format you use,

638
00:32:05,053 --> 00:32:09,795
your choices being 10 bits per channel and 2 bits alpha or 16 bit floating point,

639
00:32:10,516 --> 00:32:16,079
your color space will either be PQ encoded with 2020 primaries or no gamma with 709 primaries.

640
00:32:16,739 --> 00:32:20,901
For some reason, it's not okay to have a 16 bit floating point buffer with 2020 primaries.

641
00:32:22,302 --> 00:32:22,842
I kind of want that.

642
00:32:24,575 --> 00:32:28,537
Furthermore, the swap chain has to be using the flip present model

643
00:32:28,998 --> 00:32:32,300
to support any color space other than 709 with 2.2 gamma.

644
00:32:33,300 --> 00:32:36,842
And this is because legacy GDI is still in use for the non-flip swap effects,

645
00:32:37,043 --> 00:32:40,285
and it has no support for surfaces with greater than 32-bit depth.

646
00:32:42,496 --> 00:32:45,159
Lastly, I'm not actually sure if this is documented anywhere,

647
00:32:45,459 --> 00:32:48,463
but the desktop window manager in HDR mode

648
00:32:48,623 --> 00:32:51,807
actually expects an FP16 back buffer from applications.

649
00:32:52,448 --> 00:32:54,770
If you provide it with 10 bits per channel

650
00:32:54,810 --> 00:32:56,773
and two bit alpha PQ encoded back buffer,

651
00:32:57,707 --> 00:33:00,588
it will DPQ, composite your frame

652
00:33:00,788 --> 00:33:02,929
in its own internal FP16 buffer,

653
00:33:03,449 --> 00:33:06,490
before re-PQing and then sending that off to the display.

654
00:33:07,171 --> 00:33:08,811
This obviously brings with it a perf hit

655
00:33:08,911 --> 00:33:09,772
for the composite step.

656
00:33:10,492 --> 00:33:12,373
We didn't measure exactly what that was.

657
00:33:13,513 --> 00:33:15,234
I think it's probably obvious that it would

658
00:33:15,474 --> 00:33:16,775
have some kind of perf implication.

659
00:33:16,955 --> 00:33:19,116
But because of this, we opted to stick

660
00:33:19,136 --> 00:33:20,737
with the FP16 back buffer instead.

661
00:33:23,478 --> 00:33:24,678
And I showed this a few slides ago.

662
00:33:24,738 --> 00:33:26,099
This all works totally great,

663
00:33:26,319 --> 00:33:26,459
but.

664
00:33:27,690 --> 00:33:29,512
We still have not shipped this improvement

665
00:33:29,672 --> 00:33:31,613
because of no shortage of edge case issues

666
00:33:31,693 --> 00:33:32,854
and other strange behavior,

667
00:33:33,915 --> 00:33:36,036
particularly as it pertains to another improvement

668
00:33:36,076 --> 00:33:37,697
that we made, which did ship last year,

669
00:33:38,197 --> 00:33:40,399
and that's the black and white point calibration screens.

670
00:33:42,660 --> 00:33:43,781
So these screens were implemented

671
00:33:43,881 --> 00:33:45,542
using a pretty standard scale and bias.

672
00:33:46,683 --> 00:33:48,304
And we kept the reference white paper value

673
00:33:48,344 --> 00:33:49,345
at a fixed 80 nets,

674
00:33:49,925 --> 00:33:52,327
and let the white point change the max knit value

675
00:33:52,647 --> 00:33:53,768
of the PQ algorithm.

676
00:33:54,468 --> 00:33:55,349
So by default, that's 10,000.

677
00:33:56,705 --> 00:34:01,347
Reducing it has the same effect as increasing the reference paper white value, that's the scale step.

678
00:34:02,568 --> 00:34:09,271
Now the white point screen is implemented with three tricorns of increasing intensity in front of a background of an intended 10,000 nits.

679
00:34:10,051 --> 00:34:13,813
The brightest value that we could hope to output on any HDR display is 10,000.

680
00:34:14,814 --> 00:34:18,635
Of course, no display can actually achieve this right now, so we're basically telling the display,

681
00:34:18,735 --> 00:34:20,756
give it all you got, show the brightest thing you can.

682
00:34:22,224 --> 00:34:26,965
The not visible track horn is a value just above the maximum output for our HDR tone mapping curve.

683
00:34:27,425 --> 00:34:32,066
In other words, it's the brightest value the game could ever display, and it can safely blend into our bright background.

684
00:34:33,407 --> 00:34:39,648
The barely visible track horn represents one step down from that brightest value, and then the clearly visible track horn another equal step down.

685
00:34:40,588 --> 00:34:45,329
Seeing both of these ensures that the detail will be preserved in bright areas of the game the way that it was meant to be.

686
00:34:46,249 --> 00:34:50,090
Unfortunately, the brightness screen behaves differently under several different conditions.

687
00:34:52,413 --> 00:34:55,035
First off, you can get different calibrations

688
00:34:55,116 --> 00:34:57,858
whether you have HDR enabled on the desktop or not.

689
00:34:58,938 --> 00:35:01,440
Turn Windows HDR off, enter the game in full screen,

690
00:35:01,921 --> 00:35:04,683
calibrate your white point, turn Windows HDR back on,

691
00:35:05,023 --> 00:35:07,065
re-enter the game, and the screen looks different.

692
00:35:08,806 --> 00:35:10,367
You can get different results if you toggle

693
00:35:10,407 --> 00:35:11,808
between windowed and full screen modes.

694
00:35:12,569 --> 00:35:14,010
Calibrate in one, change to another,

695
00:35:14,190 --> 00:35:14,991
you have to calibrate again.

696
00:35:16,352 --> 00:35:17,533
The screen can be different depending

697
00:35:17,553 --> 00:35:19,014
on what type of video card you're using.

698
00:35:20,615 --> 00:35:22,476
Your calibrations can change if you add or remove

699
00:35:22,516 --> 00:35:23,857
a second monitor to your rig.

700
00:35:24,898 --> 00:35:26,579
And lastly, my personal favorite,

701
00:35:27,520 --> 00:35:30,282
depending on how long you leave the white point screen open,

702
00:35:30,582 --> 00:35:32,183
the monitor will auto correct itself

703
00:35:32,243 --> 00:35:34,565
to balance out the intensities that you're trying to display

704
00:35:34,645 --> 00:35:36,767
creating a moving target as you're trying to calibrate

705
00:35:36,807 --> 00:35:38,748
and this is the worst that I want it to go away now.

706
00:35:44,513 --> 00:35:46,594
All of this is really to say that HDR in Windows

707
00:35:46,674 --> 00:35:48,636
is a really challenging space to work in right now

708
00:35:48,776 --> 00:35:50,217
if you want to make things perfect.

709
00:35:51,215 --> 00:35:53,177
you might have to accept that everything isn't going to work

710
00:35:53,297 --> 00:35:55,539
exactly as you expect it to all the time.

711
00:35:56,319 --> 00:35:58,060
And the real goal is to just abstract away

712
00:35:58,100 --> 00:35:59,061
these quirks from players.

713
00:35:59,581 --> 00:36:01,763
And I'm just gonna insert in here,

714
00:36:02,103 --> 00:36:05,446
I had another bug where the white background bar

715
00:36:05,646 --> 00:36:06,627
of this calibration screen

716
00:36:06,647 --> 00:36:08,528
would just completely disappear sometimes

717
00:36:09,008 --> 00:36:10,870
if you turned your calibration meter all the way up.

718
00:36:11,450 --> 00:36:12,531
It would just go away.

719
00:36:13,632 --> 00:36:14,512
Never figured that one out.

720
00:36:15,133 --> 00:36:16,794
Eventually fixed with a driver update.

721
00:36:20,049 --> 00:36:21,711
So that brings me back to this comparison tool.

722
00:36:22,692 --> 00:36:26,636
I mentioned that these pictures of it show that it's not 100% accurate if we compare

723
00:36:26,677 --> 00:36:29,780
directly to what we see with our own eyes on an SDR display.

724
00:36:31,803 --> 00:36:33,285
But can we really make this perfect?

725
00:36:33,865 --> 00:36:36,829
If I were to revisit the comparison tool, I might take a different approach.

726
00:36:38,344 --> 00:36:40,445
I'd switch to a ChromaLuma representation,

727
00:36:40,465 --> 00:36:43,685
I'd raise the Luma in order to avoid hue shifts at all,

728
00:36:44,105 --> 00:36:45,826
but then I'd be skipping this inherent hue shift

729
00:36:45,846 --> 00:36:48,426
that comes with sRGB displays and their transfer functions.

730
00:36:48,746 --> 00:36:50,767
So I'd be leaving out kind of an important part.

731
00:36:51,067 --> 00:36:52,147
I'd have to find a way to do both.

732
00:36:53,547 --> 00:36:54,648
It's actually really difficult

733
00:36:54,688 --> 00:36:56,648
to get this to be really accurate, but why?

734
00:36:58,268 --> 00:37:00,769
Well, at least part of the reason, a large part, I think,

735
00:37:01,289 --> 00:37:03,549
is that different monitors do all sorts of different things

736
00:37:03,589 --> 00:37:05,870
to an image to bring you what the manufacturer deems

737
00:37:05,990 --> 00:37:07,190
to be the best quality.

738
00:37:08,500 --> 00:37:14,305
In this example, each image's color distribution is slightly different and represents the differences you might see across different monitors,

739
00:37:14,705 --> 00:37:16,807
with different calibrations displaying the same scene.

740
00:37:20,410 --> 00:37:25,334
In this case, my monitor was really pushing the vibrancy of the image and also adding a blue shift.

741
00:37:26,254 --> 00:37:30,318
I'll admit, I didn't really take much care to calibrate its SDR mode prior to taking these pictures.

742
00:37:31,214 --> 00:37:35,298
The differences in display curves are what make this kind of comparison tool really hard to nail down.

743
00:37:35,398 --> 00:37:40,222
But what's important to remember is that for this tool, we just have to match artists' expectations.

744
00:37:40,683 --> 00:37:45,267
We don't actually have to match a real SDR display that could be calibrated to anything.

745
00:37:48,150 --> 00:37:52,514
Now, all this stuff about varying display curves can be true for HDR TVs as well,

746
00:37:52,654 --> 00:37:55,898
and that's what makes these calibration screens really hard to get right.

747
00:37:57,127 --> 00:37:59,929
While the HDR standard is much more clear about encoding and decoding,

748
00:38:00,390 --> 00:38:03,832
we're still subject to some very black box color correction or luminance correction,

749
00:38:04,393 --> 00:38:06,074
depending on the capabilities of the display.

750
00:38:06,875 --> 00:38:09,937
And this is something that the HDR Gaming Interest Group wants to address,

751
00:38:10,157 --> 00:38:14,441
by encouraging TV manufacturers to implement common behavior in the game mode of displays.

752
00:38:15,922 --> 00:38:20,946
One of the key points is that in game mode, instead of the TV rolling off near-peak luminance values like this,

753
00:38:21,126 --> 00:38:24,008
which can end up altering our content unexpectedly,

754
00:38:25,005 --> 00:38:28,607
The TV just clips as soon as it reaches its peak luminance value like this.

755
00:38:28,907 --> 00:38:32,830
And we, the developers, are given details about the display that allow us to

756
00:38:32,890 --> 00:38:34,311
customize our tone mapping function.

757
00:38:35,171 --> 00:38:37,813
Until this kind of standardization happens, we're going to have to drum up

758
00:38:37,833 --> 00:38:39,854
some really, really robust calibration tech.

759
00:38:39,874 --> 00:38:44,657
All right, that was a lot of stuff.

760
00:38:44,898 --> 00:38:47,439
I mentioned at the beginning that I don't believe we really went about this

761
00:38:47,499 --> 00:38:49,120
the absolute correct way.

762
00:38:50,121 --> 00:38:53,323
I should say that I still think we ended up with a really great looking HDR game,

763
00:38:53,543 --> 00:38:54,344
and I'm very proud of that.

764
00:38:55,282 --> 00:38:57,584
But I have to recognize the things I learned along the way

765
00:38:57,964 --> 00:38:59,385
and things I've learned in the time since

766
00:39:00,206 --> 00:39:01,327
would have been really valuable

767
00:39:01,387 --> 00:39:02,348
to have known from the start.

768
00:39:04,470 --> 00:39:06,131
So if I were to have a second go at this,

769
00:39:06,852 --> 00:39:09,294
I'd definitely start by choosing to use HDR LUTs.

770
00:39:10,235 --> 00:39:11,095
Being clever was great,

771
00:39:11,896 --> 00:39:13,878
but several of the unique issues that I covered today,

772
00:39:13,938 --> 00:39:15,059
while interesting to solve,

773
00:39:15,579 --> 00:39:16,981
could have just been avoided entirely

774
00:39:17,041 --> 00:39:18,282
if we used LUTs designed for HDR.

775
00:39:20,665 --> 00:39:23,666
Next, I definitely use a ChromaLumar representation

776
00:39:23,867 --> 00:39:25,588
to convert the UI to HDR space.

777
00:39:27,689 --> 00:39:29,390
And along those lines, I think more carefully

778
00:39:29,410 --> 00:39:32,031
about how other color spaces like ICTCP,

779
00:39:32,852 --> 00:39:34,713
which is a ChromaLumar representation

780
00:39:34,913 --> 00:39:38,035
specifically designed for HDR and wide color gamut,

781
00:39:39,336 --> 00:39:40,436
how these spaces could be used

782
00:39:40,476 --> 00:39:41,917
to generate better quality results.

783
00:39:43,227 --> 00:39:45,247
And finally, I defer tone mapping

784
00:39:45,287 --> 00:39:46,547
until much later in the pipeline

785
00:39:46,948 --> 00:39:49,628
and would prefer not to branch between SDR and HDR

786
00:39:50,309 --> 00:39:51,189
across the whole pipeline.

787
00:39:53,589 --> 00:39:54,770
I'd really be looking for a pipeline

788
00:39:54,790 --> 00:39:55,690
that looks more like this,

789
00:39:55,910 --> 00:39:57,991
what I call the ideal HDR pipeline.

790
00:39:59,511 --> 00:40:00,851
Lighting and shading, post-process,

791
00:40:00,891 --> 00:40:01,752
those can all be the same.

792
00:40:02,712 --> 00:40:04,392
But then we only have one singular path.

793
00:40:04,452 --> 00:40:06,493
We tone map and color grade in HDR

794
00:40:07,713 --> 00:40:09,914
using something maybe like the ASYS Filmic HDR

795
00:40:09,954 --> 00:40:10,614
tone mapping curve.

796
00:40:12,468 --> 00:40:14,929
We render UI out separately in SDR space.

797
00:40:15,189 --> 00:40:16,750
I don't have a great solution for this right now.

798
00:40:17,650 --> 00:40:20,671
We can do it in the offscreen container like I described.

799
00:40:21,431 --> 00:40:23,172
And then we have this composite step

800
00:40:24,012 --> 00:40:26,573
where we composite UI onto our HDR back buffer.

801
00:40:27,174 --> 00:40:29,115
And then something that I and a lot of others

802
00:40:29,155 --> 00:40:30,575
have called a display mapping step,

803
00:40:30,875 --> 00:40:33,796
which is where we, depending on the type of display

804
00:40:33,816 --> 00:40:34,537
that we're going to,

805
00:40:35,337 --> 00:40:38,218
we'll either tone map to the capabilities of an HDR display,

806
00:40:39,207 --> 00:40:42,988
or tone map all the way down to SDR and convert our color spaces if we have to.

807
00:40:46,449 --> 00:40:48,870
And this brings us to the real lessons that I'd like to leave you with today.

808
00:40:51,411 --> 00:40:54,372
So as you're adding support for HDR displays in your game,

809
00:40:55,192 --> 00:40:59,153
I strongly recommend taking these steps to ensure the best quality and long-standing results.

810
00:41:00,914 --> 00:41:02,775
First up, validate your content.

811
00:41:03,315 --> 00:41:04,895
The sun should be brighter than everything else.

812
00:41:06,043 --> 00:41:07,964
Highlights shouldn't be brighter than the lights are themselves.

813
00:41:08,944 --> 00:41:11,545
HDR tends to expose these kinds of lighting hacks all the time.

814
00:41:13,306 --> 00:41:15,527
And on the flip side, with deeper blacks,

815
00:41:15,567 --> 00:41:18,128
we also need to make sure that our darker content is still

816
00:41:18,188 --> 00:41:20,670
bright enough or has enough contrast for players

817
00:41:20,710 --> 00:41:22,691
to be able to see what's going on in front of them.

818
00:41:26,452 --> 00:41:30,174
Be prepared to change, maybe even overhaul, possibly

819
00:41:30,234 --> 00:41:33,516
get rid of, your original SDR rendering pipeline.

820
00:41:34,256 --> 00:41:35,136
I don't recommend branching.

821
00:41:36,401 --> 00:41:40,323
Unifying the two now will pay you great quality dividends further down the road.

822
00:41:42,885 --> 00:41:47,649
Like I mentioned before, you should strive to stay in HDR space for as long as possible in the frame,

823
00:41:48,149 --> 00:41:51,631
right up until the point where you need to send the image to the display and then tone map down.

824
00:41:54,353 --> 00:41:59,657
Next, don't rule out using other color spaces like ICTCP in certain stages of your pipeline.

825
00:42:01,008 --> 00:42:02,829
I don't have great recommendations on how,

826
00:42:03,269 --> 00:42:04,490
the best ways to use them,

827
00:42:04,590 --> 00:42:07,492
but I think there's a lot of potential research

828
00:42:07,532 --> 00:42:07,973
in that area.

829
00:42:09,694 --> 00:42:10,815
Use phonometric units.

830
00:42:11,855 --> 00:42:13,637
Being able to reason on physical light values

831
00:42:13,697 --> 00:42:15,358
is really useful in helping understand

832
00:42:15,458 --> 00:42:18,060
what dynamic range you have at any given stage of rendering

833
00:42:18,680 --> 00:42:20,602
and how to adapt that range for your target display

834
00:42:20,622 --> 00:42:21,842
and get the best quality result.

835
00:42:23,684 --> 00:42:25,425
And then finally, I would recommend making

836
00:42:25,465 --> 00:42:27,106
a comparison tool for HDR to SDR.

837
00:42:28,497 --> 00:42:31,139
Now, as I was putting together materials for this talk,

838
00:42:32,099 --> 00:42:35,061
and as we move towards a world where HDR is the new norm,

839
00:42:35,762 --> 00:42:37,783
I was actually wondering if this kind of comparison tool

840
00:42:37,843 --> 00:42:38,944
is still worth implementing.

841
00:42:39,584 --> 00:42:40,765
And I actually think that it is,

842
00:42:40,905 --> 00:42:42,346
but for the opposite purpose.

843
00:42:43,247 --> 00:42:45,068
We're still going to need to master for SDR.

844
00:42:45,088 --> 00:42:47,449
I mean, just think of how long we had to adhere

845
00:42:47,729 --> 00:42:49,611
to a safe screen zone for CRTs.

846
00:42:50,671 --> 00:42:52,692
SDR displays are gonna hang around for quite a long time.

847
00:42:53,641 --> 00:42:57,783
And this kind of tool can give an artist a great approximation of what the game will look like in SDR

848
00:42:57,863 --> 00:43:00,605
without them having to manage two different displays all the time.

849
00:43:04,126 --> 00:43:07,508
So I'd like to give a special thank you to Nate Haubecker for his really excellent work

850
00:43:07,748 --> 00:43:13,291
in helping deliver a great HDR game and bringing HDR display support to Destiny 2.

851
00:43:14,151 --> 00:43:16,193
As well as a thank you to Ace Staff at Vicarious Visions

852
00:43:16,233 --> 00:43:18,694
for consulting on many of the technical challenges that we faced.

853
00:43:19,685 --> 00:43:21,167
Shout out to Brandon and Brad at Bungie

854
00:43:21,247 --> 00:43:23,709
for their help in bringing the HDR implementation to consoles

855
00:43:24,810 --> 00:43:26,812
and a thanks to Tim Healy at Vicarious Visions

856
00:43:26,852 --> 00:43:29,014
for helping me assemble materials for this presentation.

857
00:43:30,836 --> 00:43:31,417
And that's my time.

858
00:43:31,437 --> 00:43:33,038
Questions?

859
00:43:33,058 --> 00:43:33,138
Yes.

860
00:43:33,259 --> 00:43:33,459
Questions?

861
00:43:33,559 --> 00:43:33,699
Yes.

862
00:43:33,719 --> 00:43:33,979
Questions?

863
00:43:33,999 --> 00:43:34,199
Yes.

864
00:43:34,219 --> 00:43:34,420
Questions?

865
00:43:34,440 --> 00:43:34,560
Yes.

866
00:43:34,580 --> 00:43:34,820
Questions?

867
00:43:34,840 --> 00:43:35,000
Yes.

868
00:43:35,020 --> 00:43:35,280
Questions?

869
00:43:35,300 --> 00:43:35,501
Yes.

870
00:43:35,621 --> 00:43:37,282
Questions?

871
00:43:37,302 --> 00:43:37,623
Yes.

872
00:43:39,424 --> 00:43:39,785
Questions?

873
00:43:39,805 --> 00:43:40,726
Yes.

874
00:43:40,746 --> 00:43:40,966
Questions?

875
00:43:42,247 --> 00:43:44,110
Hi, you mentioned content validation.

876
00:43:44,570 --> 00:43:46,753
Were you allowed to file a bug on art

877
00:43:46,793 --> 00:43:48,816
if the rocket thruster was brighter than the sun,

878
00:43:48,856 --> 00:43:50,538
or did you just have to work around it?

879
00:43:52,560 --> 00:43:54,343
Yeah, were we allowed to file bugs for art

880
00:43:54,423 --> 00:43:56,846
for content validation issues like that?

881
00:43:58,748 --> 00:43:59,890
It didn't really happen that often.

882
00:44:01,748 --> 00:44:03,710
For cases like, for bright cases like the sun,

883
00:44:03,750 --> 00:44:05,752
we didn't deliver anything like that.

884
00:44:06,292 --> 00:44:09,515
For cases where linear content values were too dark,

885
00:44:10,716 --> 00:44:13,459
we did start to look at those because, I mean,

886
00:44:14,980 --> 00:44:16,862
recently we started having more and more problems

887
00:44:16,902 --> 00:44:20,565
with people complaining about too many dark values

888
00:44:20,605 --> 00:44:22,687
in the game as they went into different caves.

889
00:44:24,048 --> 00:44:26,870
So Nate over at Bungie started to implement

890
00:44:26,930 --> 00:44:28,492
some content validation tools that would

891
00:44:29,275 --> 00:44:31,817
determine if linear values in the game were too dark

892
00:44:31,877 --> 00:44:33,358
and thus be too dark on displays.

893
00:44:33,799 --> 00:44:36,481
That's where we started actually applying pressure

894
00:44:37,061 --> 00:44:38,463
for art to fix up some of that content.

895
00:44:41,786 --> 00:44:46,790
Hey, can you go over your point about the sRGB

896
00:44:47,110 --> 00:44:50,893
and 709 EOTF OETF point and how that helped you?

897
00:44:54,176 --> 00:44:55,818
Sure, do you want me to recap it

898
00:44:55,838 --> 00:44:57,179
or how exactly it played into?

899
00:44:58,154 --> 00:44:59,635
generating those results.

900
00:45:00,355 --> 00:45:03,397
Yeah, how it played into fixing your final issues.

901
00:45:04,818 --> 00:45:07,839
So, hopefully I'll.

902
00:45:08,199 --> 00:45:11,301
Maybe recap, maybe I just missed your point.

903
00:45:11,321 --> 00:45:11,941
Sure, sure.

904
00:45:12,201 --> 00:45:16,744
So, the idea was that with the UI,

905
00:45:16,824 --> 00:45:19,345
we needed to put it through a manual gamma transform

906
00:45:19,425 --> 00:45:21,546
that it would have had had it been displayed

907
00:45:21,586 --> 00:45:22,987
on a normal SDR display.

908
00:45:24,256 --> 00:45:26,458
Doing that manually allowed us to recreate

909
00:45:26,498 --> 00:45:27,739
what it would have looked like otherwise.

910
00:45:28,640 --> 00:45:30,661
And then when we were doing the comparison tool,

911
00:45:30,761 --> 00:45:34,845
we needed to use the transfer functions going both ways

912
00:45:36,186 --> 00:45:37,247
because we were taking linear,

913
00:45:38,287 --> 00:45:40,749
normally we would kind of inverse gamma that

914
00:45:40,809 --> 00:45:42,791
in order to get the linear result back on the screen

915
00:45:42,891 --> 00:45:45,313
because it would be encoded and then decoded

916
00:45:45,573 --> 00:45:46,614
to get our linear result back.

917
00:45:46,654 --> 00:45:49,556
So we had to look at both the,

918
00:45:50,657 --> 00:45:51,338
what did I say we use?

919
00:45:53,687 --> 00:46:02,630
whatever the EUTF was, we would go OETF to encoded space

920
00:46:02,730 --> 00:46:04,051
and then we would decode it manually

921
00:46:04,091 --> 00:46:06,192
and then output the linear space through PQ

922
00:46:06,312 --> 00:46:09,413
to the HDR display, which that was a lot of words.

923
00:46:09,713 --> 00:46:10,174
I apologize.

924
00:46:10,254 --> 00:46:13,695
But using those transfer functions

925
00:46:13,735 --> 00:46:14,755
in conjunction with each other

926
00:46:14,875 --> 00:46:17,377
essentially was a recreation of the entire pipeline

927
00:46:18,457 --> 00:46:19,377
of an SDR display.

928
00:46:21,348 --> 00:46:23,250
Normally we'd have linear values in our game,

929
00:46:23,910 --> 00:46:25,552
we would apply an inverse gamma function

930
00:46:25,592 --> 00:46:26,933
before we send it out to the display,

931
00:46:26,953 --> 00:46:28,435
the display would decode that gamma.

932
00:46:28,735 --> 00:46:30,637
We needed to reproduce that entire pipeline.

933
00:46:31,397 --> 00:46:32,238
And it's worth pointing out

934
00:46:32,298 --> 00:46:34,741
that we applied the same transformations

935
00:46:34,801 --> 00:46:36,142
not only in our comparison tool,

936
00:46:36,482 --> 00:46:40,946
but also to the lookups that we got back from SDR

937
00:46:41,307 --> 00:46:42,608
in the normal HDR pipeline.

938
00:46:44,530 --> 00:46:45,110
Cool, thanks.

939
00:46:47,127 --> 00:46:50,291
Hi, can you comment on the performance hit

940
00:46:50,371 --> 00:46:53,074
that you experienced converting everything

941
00:46:53,134 --> 00:46:54,936
to floating point or 10 to 10?

942
00:46:55,437 --> 00:46:59,762
Yeah, I don't have great hard numbers for you.

943
00:47:02,205 --> 00:47:03,787
And the reason for that is pretty much that.

944
00:47:05,307 --> 00:47:09,989
When we were doing the work, we were thinking about the PC space, and we were also thinking

945
00:47:10,009 --> 00:47:15,271
about the fact that, well, okay, all our users that are going to have HDR capabilities are

946
00:47:15,291 --> 00:47:17,531
going to have these pretty powerful rigs.

947
00:47:17,551 --> 00:47:20,833
So performance kind of went out the window for a while while we were doing all this work.

948
00:47:23,235 --> 00:47:25,816
When we brought the HDR implementation to consoles,

949
00:47:25,876 --> 00:47:26,697
it was a different story.

950
00:47:26,737 --> 00:47:29,559
We had to consider both memory and the cost

951
00:47:29,599 --> 00:47:32,260
of doing all those tone map, inverse tone map steps

952
00:47:32,300 --> 00:47:32,781
and everything.

953
00:47:33,721 --> 00:47:36,283
Ultimately, it fit, barely.

954
00:47:38,064 --> 00:47:40,946
But it probably added a solid .1 millisecond,

955
00:47:41,346 --> 00:47:45,068
.2 millisecond to the whole frame, just for those steps.

956
00:47:45,108 --> 00:47:46,569
And then from a memory perspective,

957
00:47:47,690 --> 00:47:50,552
it definitely pushed us against the barrier of VRAM.

958
00:47:52,565 --> 00:47:54,146
Cool. And one other quick question.

959
00:47:55,106 --> 00:47:59,048
Are there standard color calibrations for the HDR space?

960
00:47:59,308 --> 00:48:01,309
Like, there's a lot of color calibration tools

961
00:48:01,349 --> 00:48:03,890
that exist right now for calibrating your SDR monitor

962
00:48:03,950 --> 00:48:09,312
and getting, you know, good photographic quality color

963
00:48:09,372 --> 00:48:12,813
out of it. Do such tools exist for the HDR space

964
00:48:12,914 --> 00:48:14,734
that we should be looking at

965
00:48:14,774 --> 00:48:17,255
if we're going to be authoring HDR content?

966
00:48:18,659 --> 00:48:19,540
That's a really good question.

967
00:48:20,201 --> 00:48:21,763
I am actually not sure,

968
00:48:22,083 --> 00:48:25,106
although I think if you talk to Chaz over there,

969
00:48:25,747 --> 00:48:26,568
he may have some...

970
00:48:26,588 --> 00:48:28,450
Some companies have told me that their tools

971
00:48:28,530 --> 00:48:29,691
now work in that space.

972
00:48:30,892 --> 00:48:32,694
I haven't tried it.

973
00:48:32,714 --> 00:48:33,455
Okay, thank you.

974
00:48:33,475 --> 00:48:34,155
Okay, so yeah.

975
00:48:35,337 --> 00:48:36,237
In case that didn't get mic'd,

976
00:48:37,259 --> 00:48:38,900
a bunch of color calibration companies

977
00:48:38,940 --> 00:48:41,383
have said that their tools now work in HDR space.

978
00:48:41,663 --> 00:48:41,963
Thanks, Chaz.

979
00:48:43,975 --> 00:48:47,058
Hi, what was the iteration time of creating

980
00:48:47,098 --> 00:48:50,041
like a new sort of grading each time you do it,

981
00:48:50,081 --> 00:48:54,645
you build and put it on a console for the next version?

982
00:48:57,147 --> 00:49:00,089
Yeah, the iteration time for creating a new grading curve

983
00:49:00,550 --> 00:49:02,071
or the tone mapping curve.

984
00:49:02,912 --> 00:49:05,694
I actually can't comment too well on what that was.

985
00:49:06,155 --> 00:49:07,476
The tone mapping work after...

986
00:49:08,528 --> 00:49:11,389
the comparison tool was created was done by Nate over at Bungie.

987
00:49:12,950 --> 00:49:14,410
I believe that he...

988
00:49:14,430 --> 00:49:20,452
I think he did something like extrapolate the SDR curve into a wider range

989
00:49:20,572 --> 00:49:24,454
and then perform a curve fit to generate a curve that had roughly the same shape.

990
00:49:25,914 --> 00:49:29,855
But the actual iteration time and the steps that he took to do it are

991
00:49:30,176 --> 00:49:31,696
a little bit of a mystery to me. I'm sorry.

992
00:49:41,314 --> 00:49:41,896
No more questions.

993
00:49:42,278 --> 00:49:43,904
All right, thank you all very much.

