1
00:00:09,279 --> 00:00:17,923
Game development sucks. It's hard and it's stressful. Our industry is notorious for chewing people up and spitting them out as burnt-out husks.

2
00:00:18,723 --> 00:00:23,606
So much so that those of us who've been around for a while are called veterans, as if we've been at war.

3
00:00:24,926 --> 00:00:28,848
Do you know what they call experienced people in other industries? Experts.

4
00:00:29,888 --> 00:00:33,810
Are we experts at what we do? What is it that we do?

5
00:00:34,491 --> 00:00:37,772
And if we call ourselves experts, what are we actually experts in?

6
00:00:38,844 --> 00:00:41,145
Are we experts in working 80 hours a week?

7
00:00:41,885 --> 00:00:44,566
Are we experts in dropping a huge day one patch

8
00:00:44,686 --> 00:00:47,846
to fix the thousands of bugs that we missed during testing?

9
00:00:49,267 --> 00:00:50,727
What about losing sleep for a week

10
00:00:50,987 --> 00:00:53,508
because you're panicking about server outages

11
00:00:53,708 --> 00:00:54,888
and game client crashes?

12
00:00:55,728 --> 00:00:56,989
Are we experts at that?

13
00:00:57,009 --> 00:00:59,209
I don't know about you guys,

14
00:00:59,269 --> 00:01:00,810
but I'm an expert at those things

15
00:01:01,210 --> 00:01:03,350
because I've done all those things a lot.

16
00:01:04,717 --> 00:01:13,102
But I don't want to be an expert at losing sleep or burning myself out or putting out a thousand hot fixes for a month after launching a game.

17
00:01:14,063 --> 00:01:20,687
I want to be good at making games. Losing sleep and pulling heroics and crunching? That's not making games.

18
00:01:21,608 --> 00:01:24,970
In fact, that's what I would call that. Not making games.

19
00:01:26,511 --> 00:01:30,834
But what if game development didn't suck? What if it was easy?

20
00:01:32,567 --> 00:01:40,188
Imagine if your team could deploy a major patch and take the day off to celebrate because you knew everything was going to be fine.

21
00:01:41,408 --> 00:01:46,289
What if you could deliver a major content update to your game every week without working overtime?

22
00:01:47,390 --> 00:01:51,010
Or if you could take your weekends to actually play games?

23
00:01:52,251 --> 00:01:53,151
Well, I have news for you.

24
00:01:53,931 --> 00:01:54,671
You can do that.

25
00:01:55,411 --> 00:01:57,672
I know you can do that because I did it.

26
00:01:58,232 --> 00:01:58,992
I'm doing it right now.

27
00:02:00,303 --> 00:02:04,065
And if you want to know how, good, because that's why I'm here.

28
00:02:04,865 --> 00:02:07,767
My name is Seth Koster, and I'm the CEO, game programmer,

29
00:02:08,067 --> 00:02:11,269
co-game designer, and co-founder of Butterscotch Shenanigans.

30
00:02:12,069 --> 00:02:15,211
And today we're going to go on a journey that starts many years ago

31
00:02:15,931 --> 00:02:18,132
when our studio was flailing around, crunching,

32
00:02:18,613 --> 00:02:20,794
putting out fires, and burning ourselves out.

33
00:02:21,394 --> 00:02:23,635
I'm going to walk you through some of those struggles

34
00:02:24,116 --> 00:02:27,297
and how we learned to use the three ways of DevOps

35
00:02:27,397 --> 00:02:29,258
to change everything about how we work.

36
00:02:30,047 --> 00:02:32,489
We'll talk about QA testing, production bottlenecks,

37
00:02:32,790 --> 00:02:34,972
reducing waste, small batch deployments,

38
00:02:35,772 --> 00:02:37,814
scaling up your team, and more.

39
00:02:38,094 --> 00:02:39,115
And by the end of this talk,

40
00:02:39,155 --> 00:02:41,557
you'll be able to use the power of DevOps

41
00:02:41,597 --> 00:02:44,720
to make your studio or even solo operation

42
00:02:44,920 --> 00:02:46,682
run like a clockwork machine.

43
00:02:48,363 --> 00:02:50,025
Our story starts in December, 2015,

44
00:02:50,886 --> 00:02:52,407
when our studio was three years old

45
00:02:52,467 --> 00:02:54,509
and was comprised of my two brothers and me.

46
00:02:55,450 --> 00:02:59,414
We had Sam as the artist, Adam as the web developer,

47
00:02:59,795 --> 00:03:01,216
and I was the game programmer.

48
00:03:02,277 --> 00:03:04,299
We had launched four games up to this point,

49
00:03:05,040 --> 00:03:06,381
and they had varied in success,

50
00:03:06,482 --> 00:03:09,925
ranging from extremely bad to decent.

51
00:03:10,846 --> 00:03:13,549
But this time, we thought we had a real winner on our hands.

52
00:03:13,869 --> 00:03:15,451
We were building a huge open-world,

53
00:03:15,731 --> 00:03:18,774
crafting-based action RPG called Crashlands.

54
00:03:19,615 --> 00:03:22,837
We had been working on it for two years and it had truly been a grind.

55
00:03:23,518 --> 00:03:27,020
But now at the end of 2015, we could finally see the light at the end of the tunnel.

56
00:03:28,121 --> 00:03:30,502
At this point, we were feeling pretty good about the state of the game.

57
00:03:30,943 --> 00:03:32,824
And as far as we were concerned, it was ready to ship.

58
00:03:33,724 --> 00:03:41,529
But just to really make sure it stuck the landing, we thought, let's do a little beta test, you know, just to shave off the rough edges.

59
00:03:42,470 --> 00:03:45,352
So we reached out to our community and we enrolled 150 players in a closed beta test.

60
00:03:48,798 --> 00:03:52,681
Immediately, we were hit by an avalanche of bug reports.

61
00:03:53,321 --> 00:03:56,903
I mean, broken quests, crashes, missing recipes,

62
00:03:57,163 --> 00:03:58,524
people's saves getting deleted.

63
00:03:59,424 --> 00:04:01,886
Anything that you could think of that could go wrong,

64
00:04:02,246 --> 00:04:02,666
went wrong.

65
00:04:03,566 --> 00:04:05,507
And suddenly, we found ourselves staring down

66
00:04:05,527 --> 00:04:09,209
the barrel of over 2,200 unique bug reports,

67
00:04:09,730 --> 00:04:11,311
and we had eight weeks to launch.

68
00:04:12,471 --> 00:04:15,273
So we did what everyone does, we crunched.

69
00:04:16,298 --> 00:04:19,799
We put in 60 hours during the first three days of the beta

70
00:04:20,340 --> 00:04:23,180
and fixed as many of the hugely problematic issues

71
00:04:23,200 --> 00:04:26,521
that we could, and we hardly slept for the next two months

72
00:04:26,601 --> 00:04:29,182
leading up to launch as we tried to wrangle

73
00:04:29,222 --> 00:04:31,303
the remaining 2,000 issues.

74
00:04:32,523 --> 00:04:33,884
So we weren't able to fix everything,

75
00:04:33,984 --> 00:04:36,404
but we did the best we could, and then we launched.

76
00:04:37,065 --> 00:04:38,225
And the game was well-received.

77
00:04:38,785 --> 00:04:41,606
So in the first week, we had about 100,000 players

78
00:04:41,846 --> 00:04:44,007
across our three platforms, Steam,

79
00:04:44,287 --> 00:04:45,787
the App Store, and Google Play.

80
00:04:46,839 --> 00:04:50,020
So this was great news, but it also had a dark side,

81
00:04:50,260 --> 00:04:53,681
because those 100,000 players crushed us

82
00:04:53,961 --> 00:04:56,642
with another enormous wave of bug reports.

83
00:04:57,842 --> 00:05:00,563
Some of these bugs were repeats of the issues

84
00:05:00,603 --> 00:05:03,484
that we weren't able to fix earlier during the beta,

85
00:05:03,884 --> 00:05:05,705
while others were completely new bugs,

86
00:05:06,245 --> 00:05:08,105
some of which we had introduced

87
00:05:08,485 --> 00:05:10,926
during our sleep-deprived crunch

88
00:05:11,206 --> 00:05:12,547
on the death march toward launch.

89
00:05:13,967 --> 00:05:16,608
So we did what everybody does, we crunched again.

90
00:05:17,641 --> 00:05:23,285
And instead of being able to enjoy the launch, or even get started on some new interesting content patch,

91
00:05:23,805 --> 00:05:30,190
we spent two months putting out fires, scrambling to get a patch out, just to repair our broken game.

92
00:05:31,411 --> 00:05:34,933
So eventually we did get that patch out, and the game became relatively stable,

93
00:05:35,473 --> 00:05:37,275
so it was time to move on to the next phase.

94
00:05:38,335 --> 00:05:39,036
Content updates.

95
00:05:40,897 --> 00:05:42,498
We worked on some new features for a couple months.

96
00:05:43,036 --> 00:05:45,357
and we were excited to get our first content patch out the door.

97
00:05:45,717 --> 00:05:48,557
But by this point, some things had changed.

98
00:05:49,598 --> 00:05:52,138
It had been just long enough, since we had deployed a patch,

99
00:05:52,718 --> 00:05:54,079
that none of our builds were working.

100
00:05:54,579 --> 00:05:56,679
So we had to get everything back up to date,

101
00:05:57,220 --> 00:05:59,040
download SDKs and test builds,

102
00:05:59,380 --> 00:06:02,681
and finally, weeks later, we released the patch.

103
00:06:03,581 --> 00:06:05,702
And this time, everything went perfectly.

104
00:06:06,582 --> 00:06:06,962
Just kidding.

105
00:06:07,402 --> 00:06:10,423
Just like before, we were hit by another wave of bug reports,

106
00:06:10,523 --> 00:06:12,043
which we crunched again to fix.

107
00:06:13,931 --> 00:06:20,615
We carried on like this throughout 2016, and we managed to create only two content patches the entire year.

108
00:06:21,635 --> 00:06:28,980
With each patch we released, it was like some kind of nightmarish Groundhog Day scenario, where we had to relive all the same stresses all over again.

109
00:06:29,540 --> 00:06:33,642
Crunch, heroics, putting out fires, just generally being in a panic.

110
00:06:34,923 --> 00:06:37,965
In the midst of all that chaos, we thought, this is too hard.

111
00:06:38,817 --> 00:06:49,720
So we did what everybody does. We assumed that our troubles were simply due to us being short-handed, and we hired more people, scaling up from three to seven.

112
00:06:51,281 --> 00:07:00,363
We immediately had a difficult time integrating these new people into our production processes, because it turned out we didn't really have any processes.

113
00:07:01,163 --> 00:07:03,704
Almost everything that happened in the studio was ad hoc.

114
00:07:04,309 --> 00:07:05,630
without any concrete systems.

115
00:07:05,990 --> 00:07:08,552
And the three of us founders were doing so many things

116
00:07:08,612 --> 00:07:10,873
that we weren't able to take the time

117
00:07:11,113 --> 00:07:13,395
to create any kind of coherent onboarding

118
00:07:13,575 --> 00:07:14,395
or training structure.

119
00:07:15,376 --> 00:07:18,138
So essentially, we brought new people into our studio

120
00:07:18,518 --> 00:07:20,559
and then just kind of set them adrift.

121
00:07:21,700 --> 00:07:23,201
This was extremely stressful for them

122
00:07:23,281 --> 00:07:26,383
because even though they wanted to contribute and help,

123
00:07:26,523 --> 00:07:28,004
they couldn't insert themselves

124
00:07:28,084 --> 00:07:31,546
into this weird shape-shifting amoeba of game studio

125
00:07:31,686 --> 00:07:32,647
that they found themselves in.

126
00:07:33,638 --> 00:07:36,981
And worse, when they did get involved, it backfired.

127
00:07:37,682 --> 00:07:43,948
One of our hires was an artist who we brought on to assist Sam in making content for Crashlands

128
00:07:44,109 --> 00:07:46,231
and whatever our next game project was going to be.

129
00:07:46,251 --> 00:07:51,797
And she was able to produce a pretty good amount of content, which became a problem.

130
00:07:52,825 --> 00:07:56,827
Everything the art team created, of course, had to be brought into the game.

131
00:07:57,288 --> 00:08:02,571
And as the sole game programmer, I was suddenly responsible for implementing twice as much

132
00:08:02,711 --> 00:08:02,891
art.

133
00:08:03,592 --> 00:08:08,275
This left a lot less time for developing game systems, and we ended up struggling to figure

134
00:08:08,355 --> 00:08:11,457
out how to make reasonable progress on the next game.

135
00:08:12,417 --> 00:08:16,700
So the art team was getting demoralized because they were creating all these assets, and those

136
00:08:16,820 --> 00:08:20,883
assets were just lying around, not getting used, because I couldn't keep up.

137
00:08:22,367 --> 00:08:25,288
So we thought, maybe we should take a look at the processes

138
00:08:25,548 --> 00:08:27,309
by which we add art to the game.

139
00:08:27,830 --> 00:08:30,751
And perhaps we can find some way to make that process faster.

140
00:08:31,551 --> 00:08:32,272
So that's what we did.

141
00:08:32,732 --> 00:08:35,193
At that time, our art process looked like this.

142
00:08:36,434 --> 00:08:39,236
The artists would create an asset using Inkscape,

143
00:08:39,716 --> 00:08:40,977
and they would manually export it.

144
00:08:41,737 --> 00:08:45,019
At some point later, I would find that asset in Dropbox

145
00:08:45,239 --> 00:08:46,540
and manually import it.

146
00:08:47,148 --> 00:08:48,689
which I would then review for errors.

147
00:08:49,289 --> 00:08:51,230
And if something was wrong with the art asset,

148
00:08:51,330 --> 00:08:52,491
you know, like a technical problem,

149
00:08:52,691 --> 00:08:55,232
then I would send a note back to the art team

150
00:08:55,272 --> 00:08:56,933
about what needed to be fixed.

151
00:08:57,613 --> 00:09:00,994
So that artist would then fix it and re-export it,

152
00:09:01,294 --> 00:09:02,795
and the loop begins again.

153
00:09:03,275 --> 00:09:05,996
And eventually, once the asset was finally usable,

154
00:09:06,236 --> 00:09:07,157
then I would implement it.

155
00:09:08,797 --> 00:09:10,158
So to speed up this loop,

156
00:09:10,538 --> 00:09:14,300
we decided to focus on this part here, the import step.

157
00:09:15,299 --> 00:09:24,532
If I didn't have to individually pull files into the game project by hand, then I would save a bunch of time, which I could then use that time to implement art.

158
00:09:25,653 --> 00:09:31,542
So Adam, our web developer, took over this project and soon he had built a program called the Inkbot.

159
00:09:32,924 --> 00:09:39,509
The InkBot allowed me to mass import all of the new and updated assets that the art team had created.

160
00:09:39,909 --> 00:09:45,453
So now I could import hundreds of assets in seconds instead of one asset every few minutes.

161
00:09:45,994 --> 00:09:47,415
Which is pretty sweet, right?

162
00:09:48,235 --> 00:09:50,377
Except for one important problem.

163
00:09:51,398 --> 00:09:54,880
For the InkBot to work, the assets had to be standardized

164
00:09:55,140 --> 00:09:59,543
so that the InkBot would know where to look and how to import them into the game.

165
00:10:00,487 --> 00:10:02,209
And to standardize those assets,

166
00:10:02,469 --> 00:10:06,292
Adam also automated the export side of the process.

167
00:10:06,772 --> 00:10:09,755
So whenever our artists would finish a creation,

168
00:10:09,975 --> 00:10:13,338
the InkBot would just pump those art assets right out.

169
00:10:14,919 --> 00:10:18,222
The end result was that while it was faster for me

170
00:10:18,502 --> 00:10:19,883
to bring assets into the game,

171
00:10:20,283 --> 00:10:23,786
it was even faster for the art team to create new assets.

172
00:10:24,547 --> 00:10:28,250
So we ended up with an even bigger pile of unused art.

173
00:10:29,031 --> 00:10:30,071
The art team became.

174
00:10:30,626 --> 00:10:33,968
even more demoralized, and I became even more stressed.

175
00:10:35,749 --> 00:10:38,570
All right, so we carried on like this for a year,

176
00:10:38,930 --> 00:10:42,172
tweaking our processes and making things both worse

177
00:10:42,332 --> 00:10:43,753
and better at the same time,

178
00:10:44,573 --> 00:10:46,714
and constantly shrinking our cash runway

179
00:10:46,774 --> 00:10:50,036
without much to show for it in terms of new projects.

180
00:10:51,137 --> 00:10:54,178
And by the time 2018 rolled around, everything buckled.

181
00:10:54,859 --> 00:10:56,219
We knew this wasn't working,

182
00:10:56,540 --> 00:10:59,261
and we had to change something so that we could move forward.

183
00:11:00,188 --> 00:11:03,610
So we scaled our team down from seven down to four,

184
00:11:04,311 --> 00:11:06,733
and we scrapped the game that we had been working on

185
00:11:06,913 --> 00:11:10,696
at that time because the game had also become unwieldy

186
00:11:10,836 --> 00:11:12,697
due to our out-of-control processes.

187
00:11:14,118 --> 00:11:16,040
So with our scaled-down team,

188
00:11:16,160 --> 00:11:19,222
we started to work on a new game called Levelhead.

189
00:11:20,263 --> 00:11:23,385
The vision of Levelhead was to capture the magic

190
00:11:23,425 --> 00:11:25,767
of something like the original Mario Maker,

191
00:11:25,987 --> 00:11:27,829
which is a game where people build levels

192
00:11:27,989 --> 00:11:29,150
and then share them with each other.

193
00:11:29,817 --> 00:11:31,998
but we were going to do it as a fresh new IP

194
00:11:32,198 --> 00:11:33,638
with new and interesting mechanics,

195
00:11:34,198 --> 00:11:35,259
a better social system,

196
00:11:35,519 --> 00:11:37,780
and make it available on way more platforms.

197
00:11:39,160 --> 00:11:40,540
The first year of Levelhead's development

198
00:11:40,700 --> 00:11:43,501
was pretty much just like our Crashlands development.

199
00:11:43,941 --> 00:11:46,222
Lots of hard work and brute force.

200
00:11:47,362 --> 00:11:49,283
And within a year, Levelhead was far enough along

201
00:11:49,563 --> 00:11:51,424
that we started to think about launch.

202
00:11:52,384 --> 00:11:53,764
What was the launch going to be like?

203
00:11:54,524 --> 00:11:56,225
And we thought back to the Crashlands days,

204
00:11:56,265 --> 00:11:59,546
and we realized that Levelhead was going down the same path.

205
00:12:00,651 --> 00:12:05,095
Launching and maintaining this game was going to be painful and expensive and difficult.

206
00:12:05,675 --> 00:12:09,178
The game wasn't being actively tested, so it was probably full of bugs,

207
00:12:09,999 --> 00:12:14,723
and we were going to have to crunch and panic and go through all the same motions all over again.

208
00:12:15,403 --> 00:12:19,427
So if we wanted to make this game right, something was going to have to change.

209
00:12:20,848 --> 00:12:24,091
As part of our research to find a better way to do our work,

210
00:12:24,311 --> 00:12:27,774
we started learning about something called DevOps, and we were inspired.

211
00:12:29,075 --> 00:12:29,735
Over the next year,

212
00:12:30,429 --> 00:12:32,630
We started applying DevOps principles to our work

213
00:12:33,091 --> 00:12:34,792
and we turned the whole ship around.

214
00:12:35,512 --> 00:12:39,034
We were able to put Levelhead into early access

215
00:12:39,434 --> 00:12:42,756
and maintain a 97% positive review score on Steam

216
00:12:43,396 --> 00:12:46,138
while deploying two to three content patches per month

217
00:12:46,178 --> 00:12:47,399
to our players on average.

218
00:12:48,279 --> 00:12:50,861
It's so easy for us now to make deployments

219
00:12:51,061 --> 00:12:53,242
that we deploy up to four patches

220
00:12:53,282 --> 00:12:55,503
to our new internal QA team per day.

221
00:12:56,504 --> 00:12:59,166
And Levelhead also now supports 11 languages,

222
00:12:59,426 --> 00:13:01,867
and adding a new language takes almost no development time.

223
00:13:02,788 --> 00:13:04,148
In the background of all this,

224
00:13:04,429 --> 00:13:06,750
we've developed stable builds of Levelhead

225
00:13:07,010 --> 00:13:11,052
on Xbox, Android, iOS, Switch, Steam, and UWP,

226
00:13:11,633 --> 00:13:13,133
and we're gonna launch on all six

227
00:13:13,173 --> 00:13:15,175
of those platforms simultaneously.

228
00:13:16,175 --> 00:13:19,197
And we even scaled our team back up to six people

229
00:13:19,537 --> 00:13:20,517
without any problems.

230
00:13:21,558 --> 00:13:24,420
And with all of that going on, we're not crunching.

231
00:13:25,161 --> 00:13:26,601
We're working regular work weeks,

232
00:13:26,961 --> 00:13:28,822
and we take weekends off like normal people.

233
00:13:29,502 --> 00:13:32,802
We get to have hobbies outside of work during our free time,

234
00:13:33,262 --> 00:13:34,863
and we even take vacations.

235
00:13:36,703 --> 00:13:37,903
I hope that piques your interest

236
00:13:38,143 --> 00:13:41,084
because the rest of this talk is about how we managed

237
00:13:41,344 --> 00:13:43,224
to pull all this off over the past year.

238
00:13:43,924 --> 00:13:45,925
As I mentioned earlier, we were able to do all this

239
00:13:46,225 --> 00:13:48,565
through applying DevOps principles to our work.

240
00:13:48,985 --> 00:13:51,425
So let's jump right into DevOps.

241
00:13:52,486 --> 00:13:53,946
First, some definitions.

242
00:13:55,462 --> 00:13:57,623
DevOps is a set of operating principles

243
00:13:57,903 --> 00:14:00,285
that focuses on faster deployment cycles,

244
00:14:00,925 --> 00:14:03,446
high stability and reliability of your product,

245
00:14:03,946 --> 00:14:05,667
and better communication between teams.

246
00:14:06,608 --> 00:14:10,190
It recognizes that there's a mutually beneficial relationship

247
00:14:10,610 --> 00:14:13,311
between development, the creation of your software,

248
00:14:13,911 --> 00:14:16,052
and operations, the deployment

249
00:14:16,213 --> 00:14:17,833
and management of the software.

250
00:14:19,006 --> 00:14:22,989
DevOps is broken up into three parts called the three ways.

251
00:14:23,469 --> 00:14:25,831
And each way is essentially a different lens

252
00:14:26,111 --> 00:14:28,954
for you to use to get a better perspective on your work.

253
00:14:29,974 --> 00:14:33,037
The three ways are managing the flow of work,

254
00:14:33,897 --> 00:14:37,100
amplifying feedback loops, and continuous learning.

255
00:14:38,501 --> 00:14:39,442
So we're gonna go through all these.

256
00:14:40,382 --> 00:14:42,564
First, let's jump right into the first way,

257
00:14:43,785 --> 00:14:44,746
managing the flow of work.

258
00:14:46,422 --> 00:14:56,186
The first way is all about understanding and then managing the flow of work through the company and ensuring that the work flows in one direction from development to operations to the customer.

259
00:14:57,247 --> 00:15:11,233
The core tools of the first way are to eliminate waste, make the work visible, deliver the work in small batches, prevent defects from moving downstream, and align everything toward the global goals.

260
00:15:12,480 --> 00:15:14,341
We're gonna start by talking about waste,

261
00:15:14,741 --> 00:15:16,923
because understanding waste is the pillar

262
00:15:16,963 --> 00:15:19,445
that holds up pretty much everything else in DevOps.

263
00:15:20,486 --> 00:15:22,708
So first, what do I mean when I say waste?

264
00:15:23,548 --> 00:15:25,990
Waste is anything that you're doing

265
00:15:26,150 --> 00:15:28,352
that isn't delivering value to players.

266
00:15:29,052 --> 00:15:31,855
In other words, waste is not making games.

267
00:15:33,040 --> 00:15:40,405
Waste comes in all shapes and sizes, and it's the silent killer of your production process because it's always a lot worse than you think.

268
00:15:40,745 --> 00:15:45,169
And it tends to be self-perpetuating, because waste creates more waste.

269
00:15:46,330 --> 00:15:50,573
We're going to go through all the types of waste that you will come across, and as I talk about these,

270
00:15:51,093 --> 00:15:56,837
I want you to think about ways in which your own processes might be creating these types of waste.

271
00:15:58,078 --> 00:16:00,720
So here's a little chart that I call the circle of waste.

272
00:16:01,845 --> 00:16:07,548
As I explain each type of waste, this chart is going to become increasingly tangled to

273
00:16:07,628 --> 00:16:12,791
show how all these different kinds of waste have spillover effects in ways that you might

274
00:16:12,851 --> 00:16:13,731
not anticipate.

275
00:16:14,752 --> 00:16:17,053
So let's start with motion there in the top left.

276
00:16:18,574 --> 00:16:24,136
Motion is waste produced by the movement of materials or information between people or

277
00:16:24,156 --> 00:16:24,616
departments.

278
00:16:25,710 --> 00:16:28,552
So think about this situation that might sound familiar.

279
00:16:28,852 --> 00:16:31,354
You need something from someone, so you send them an email.

280
00:16:31,975 --> 00:16:34,937
But soon, you end up emailing back and forth a dozen times,

281
00:16:35,157 --> 00:16:36,979
trying to communicate what you need.

282
00:16:37,699 --> 00:16:40,101
And eventually, a week later, you just have a meeting instead.

283
00:16:41,002 --> 00:16:41,582
That's motion.

284
00:16:41,923 --> 00:16:44,004
And motion is waste, because the whole time

285
00:16:44,024 --> 00:16:46,286
you were doing all that, you weren't delivering value

286
00:16:46,306 --> 00:16:46,827
to your players.

287
00:16:47,387 --> 00:16:50,009
And even worse, that process produces a lot

288
00:16:50,049 --> 00:16:52,391
of waiting and task switching.

289
00:16:53,752 --> 00:16:54,693
To cut down on motion.

290
00:16:55,454 --> 00:17:08,622
You need to create self-service systems like good documentation so that people can retrieve information or materials themselves when they need it, instead of requiring somebody else to bring that information to them.

291
00:17:10,744 --> 00:17:24,112
Task switching, the next type of waste, is when someone has to move between various contexts, like perhaps going from a meeting to production to back to a meeting, then to lunch, then back to work, then another meeting.

292
00:17:25,208 --> 00:17:30,992
Not only does task switching make things take longer, which causes waiting, all that mental

293
00:17:31,052 --> 00:17:36,877
exhaustion from context switching leads to excessive creation of defects.

294
00:17:38,238 --> 00:17:41,901
Task switching can be minimized by batching work as much as possible.

295
00:17:42,161 --> 00:17:47,185
So for example, save your meetings until the end of the day and check your email in one

296
00:17:47,225 --> 00:17:50,707
or two big bursts during the day instead of constantly throughout the day.

297
00:17:51,459 --> 00:17:53,040
So there's tons of ways to batch your work

298
00:17:53,480 --> 00:17:54,960
and even doing it a little bit,

299
00:17:55,100 --> 00:17:57,461
even just yourself will go a long way.

300
00:17:59,742 --> 00:18:00,702
Next up is defects.

301
00:18:01,502 --> 00:18:04,183
A defect is when something that you have produced

302
00:18:04,763 --> 00:18:05,784
has something wrong with it,

303
00:18:06,004 --> 00:18:09,205
making it unusable by your downstream customer.

304
00:18:09,565 --> 00:18:10,665
And by downstream customer,

305
00:18:10,685 --> 00:18:12,986
I mean just the next person to receive that thing.

306
00:18:14,066 --> 00:18:16,447
So maybe it's an art asset that's the wrong size

307
00:18:16,587 --> 00:18:18,588
or a sound file in the wrong format

308
00:18:18,808 --> 00:18:20,368
or a blog post full of typos.

309
00:18:21,685 --> 00:18:28,649
When someone runs into a defect, they have to stop what they're doing and send it back to get it fixed, which creates motion waste.

310
00:18:29,570 --> 00:18:36,514
This forces them to task switch because they planned on doing one thing, but now they're responding to an error instead.

311
00:18:37,234 --> 00:18:42,417
And this also leaves that person with an unfinished project while they wait for the defect to be resolved.

312
00:18:44,018 --> 00:18:49,882
It's even worse when a defect makes it all the way to a player, because if it's bad enough, like a game-breaking crash,

313
00:18:50,393 --> 00:18:55,875
Then you have to engage in heroics, like pulling all-nighters to deploy an emergency hotfix.

314
00:18:57,396 --> 00:19:02,078
To cut down on defects, you need to fix the processes that create them in the first place,

315
00:19:02,559 --> 00:19:04,200
which we'll cover in a little while.

316
00:19:05,600 --> 00:19:06,461
Next up is waiting.

317
00:19:07,361 --> 00:19:10,623
Waiting is when something is supposed to happen, but it doesn't.

318
00:19:11,523 --> 00:19:16,005
Waiting is obviously a waste because it's basically just standing around, but it also

319
00:19:16,125 --> 00:19:17,426
leads to other problems.

320
00:19:19,091 --> 00:19:20,371
When you're stuck waiting for something,

321
00:19:20,451 --> 00:19:25,573
you will have a tendency to not start work on a project

322
00:19:25,773 --> 00:19:27,014
because the thing you're waiting for

323
00:19:27,054 --> 00:19:28,154
could arrive at any moment.

324
00:19:28,574 --> 00:19:29,735
So either you're gonna keep waiting

325
00:19:30,235 --> 00:19:31,795
or you're gonna start working on a project

326
00:19:32,035 --> 00:19:34,916
only to have to task switch away from it

327
00:19:34,996 --> 00:19:36,537
to pick up the thing that you're waiting for,

328
00:19:37,297 --> 00:19:39,038
which then leaves that project unfinished.

329
00:19:39,798 --> 00:19:41,038
So to cut down on waiting,

330
00:19:41,638 --> 00:19:44,099
you should try to deliver work continuously

331
00:19:44,279 --> 00:19:47,060
in small batches, which we will cover in a bit.

332
00:19:48,905 --> 00:19:57,607
Alright, so unfinished projects is next. Speaking, let's talk about a scenario that's probably all too familiar to my fellow game developers.

333
00:19:58,547 --> 00:20:01,548
So you start by working on a feature in a game, and it's a really big feature.

334
00:20:01,988 --> 00:20:05,729
It's taking long enough that other demands on your time are starting to pile up.

335
00:20:06,449 --> 00:20:12,050
And eventually, you have to put that big feature on hold, and it sits off to the side, maybe on a git branch.

336
00:20:12,665 --> 00:20:19,434
waiting to be picked up again. Months go by and pretty soon you realize that if you were going to

337
00:20:19,454 --> 00:20:23,580
pick that feature up it's going to be full of bugs and it's going to cause a huge amount of problems

338
00:20:23,820 --> 00:20:30,389
so it's better to either abandon that idea or just start over. That's an unfinished project.

339
00:20:31,502 --> 00:20:36,848
When a project gets left unfinished, even for a short time, the context of the rest of the world changes.

340
00:20:37,489 --> 00:20:44,517
And when you pick it back up, there's a high likelihood of creating defects as you try to bring the project up to speed with everything else.

341
00:20:44,658 --> 00:20:49,063
And you might even need to pull heroics to get that project finished.

342
00:20:50,545 --> 00:20:51,226
To avoid this...

343
00:20:52,136 --> 00:20:59,264
break projects down into the smallest deliverable phases so that the project is always in some kind of

344
00:20:59,544 --> 00:21:04,049
finished and usable state, even if that state isn't fully ideal.

345
00:21:04,069 --> 00:21:07,953
All right, next up is manual processes.

346
00:21:08,934 --> 00:21:14,760
A manual process is something that is being done by hand, even though it's done the same way every time.

347
00:21:15,616 --> 00:21:22,879
The worst part about manual processes is that they tend to create defects because people get tired and distracted and they make mistakes.

348
00:21:23,979 --> 00:21:33,703
By definition, a manual process also demands task switching because someone has to stop doing something else in order to do the manual process.

349
00:21:34,543 --> 00:21:39,645
And this also may create motion because people may have to communicate about the manual process.

350
00:21:40,824 --> 00:21:42,945
This also makes it difficult to scale up your operation

351
00:21:43,285 --> 00:21:46,806
because to do more manual processes, you need more people.

352
00:21:47,526 --> 00:21:49,107
And this takes longer than necessary,

353
00:21:49,587 --> 00:21:50,968
which also creates waiting.

354
00:21:52,708 --> 00:21:55,089
If you do have manual processes in your organization,

355
00:21:55,269 --> 00:21:57,470
you need to think about ways you can automate those

356
00:21:57,750 --> 00:21:59,511
so that your people can be freed up

357
00:21:59,631 --> 00:22:02,091
to deliver value to your players in better ways.

358
00:22:04,292 --> 00:22:05,793
Extra processes, on the other hand,

359
00:22:06,153 --> 00:22:07,893
are just things that you're doing

360
00:22:08,074 --> 00:22:09,214
that you don't need to be doing.

361
00:22:09,859 --> 00:22:16,345
They lead to the exact same kinds of waste as manual processes for the same reasons, but the solution is different.

362
00:22:16,845 --> 00:22:21,950
With extra processes, the solution is to just stop doing them.

363
00:22:22,951 --> 00:22:29,056
In our studio, we use the focusing question, can we not, to cut through the waste of extra processes.

364
00:22:30,938 --> 00:22:35,442
An extra feature is something in your game that doesn't need to be there.

365
00:22:36,352 --> 00:22:41,516
Every feature adds complexity to your game, and complexity is where defects emerge.

366
00:22:42,497 --> 00:22:46,359
When deciding whether to add a feature to your game, whether it's a super sophisticated

367
00:22:46,519 --> 00:22:51,703
AI, a new game system, or just an expansion of an existing game system, you should always

368
00:22:51,743 --> 00:22:56,526
be vigilant about whether that feature really pushes the vision of the game in a way that

369
00:22:56,586 --> 00:22:57,727
players will care about.

370
00:22:58,408 --> 00:23:02,751
Because if not, you're just going to make things way harder for yourself without delivering

371
00:23:02,951 --> 00:23:03,851
value to your players.

372
00:23:05,084 --> 00:23:10,488
The best way to deal with extra features is of course to not have them, but if you do

373
00:23:10,548 --> 00:23:12,730
have them already, see if you can cut them.

374
00:23:14,691 --> 00:23:21,336
Alright, so this is a mess, but don't worry, it gets worse, because last I want to talk

375
00:23:21,416 --> 00:23:22,317
about heroics.

376
00:23:24,098 --> 00:23:30,242
Heroics are when you have to perform far above and beyond what's reasonable in order to deliver

377
00:23:30,282 --> 00:23:34,165
a required result, like crunching to get a game ready for launch.

378
00:23:36,242 --> 00:23:40,165
Once you reach the point of pulling heroics, you've fallen into a dangerous feedback loop.

379
00:23:40,826 --> 00:23:46,871
Because when you're in heroic panic mode, cutting corners and moving as fast as you can on very little sleep,

380
00:23:47,432 --> 00:23:51,716
you will create more and more of almost every other kind of waste.

381
00:23:52,917 --> 00:24:00,063
Heroics are the worst kind of waste because they are cancerous, they're self-perpetuating, and they consume everything else.

382
00:24:01,089 --> 00:24:04,331
You're going to pull heroics because your processes have broken down,

383
00:24:04,871 --> 00:24:08,273
but heroics also make all of your processes break down,

384
00:24:08,634 --> 00:24:10,074
leading to more heroics.

385
00:24:11,775 --> 00:24:16,938
So I want to hone in on this because heroics are the signature thing

386
00:24:17,299 --> 00:24:19,100
that the games industry is known for.

387
00:24:20,200 --> 00:24:23,682
Every single week, you can find an article about some studio,

388
00:24:24,163 --> 00:24:28,005
big or small, crunching their employees in 70 to 100-hour work weeks.

389
00:24:28,025 --> 00:24:28,085
And

390
00:24:30,872 --> 00:24:37,177
We indies are no better because we just crunch ourselves and then we pat ourselves on the back

391
00:24:37,357 --> 00:24:43,302
because we're crunching by choice, sticking it to the man. I think we should all take a moment

392
00:24:43,342 --> 00:24:49,967
though to appreciate what this means. Heroics are a signal that all of your systems have failed.

393
00:24:51,067 --> 00:24:57,833
This means that our industry is best known for being really bad at our jobs and we're stuck.

394
00:24:58,653 --> 00:25:00,555
We're trapped in this heroics loop.

395
00:25:01,612 --> 00:25:02,832
So how do you get out?

396
00:25:03,853 --> 00:25:05,573
The only way to break that loop

397
00:25:06,433 --> 00:25:08,434
is to completely stop production

398
00:25:09,054 --> 00:25:11,814
and take a step back to rebuild your processes.

399
00:25:12,534 --> 00:25:14,675
And you need to get every person on your team

400
00:25:14,755 --> 00:25:17,715
on board for this, because this is everyone's problem.

401
00:25:18,875 --> 00:25:20,636
So that's what we did.

402
00:25:21,016 --> 00:25:24,096
We totally stopped production for several weeks

403
00:25:24,457 --> 00:25:27,797
and set out to reimagine how our studio would function.

404
00:25:29,649 --> 00:25:32,393
So our first order of business, according to the first way,

405
00:25:32,613 --> 00:25:35,417
was making our work visible so that we

406
00:25:35,437 --> 00:25:38,220
could find all the places where we were creating waste.

407
00:25:39,302 --> 00:25:42,646
To do this, we decided to have twice-weekly production

408
00:25:42,686 --> 00:25:44,228
meetings where we would all agree

409
00:25:44,368 --> 00:25:47,352
on what was going to happen in the next roughly 16

410
00:25:47,852 --> 00:25:48,473
hours of work.

411
00:25:49,672 --> 00:25:52,334
Because the sprints were short, the meetings were also short,

412
00:25:52,855 --> 00:25:55,477
which allowed us to be very responsive and iterative.

413
00:25:55,877 --> 00:25:58,319
And we were able to have such short sprints

414
00:25:58,359 --> 00:25:59,540
because our team was so small.

415
00:26:00,941 --> 00:26:03,282
Larger teams may end up needing to do a bit more planning

416
00:26:03,302 --> 00:26:04,363
and have longer sprints.

417
00:26:05,084 --> 00:26:06,485
But this is what worked for us.

418
00:26:08,146 --> 00:26:10,608
So we all transitioned to using Trello.

419
00:26:11,088 --> 00:26:13,510
And we came up with a structure for managing our Trello boards

420
00:26:14,010 --> 00:26:18,153
that would allow the boards to guide the flow of work in a way

421
00:26:18,173 --> 00:26:19,134
that we could easily see.

422
00:26:19,923 --> 00:26:21,604
So we gave our boards five lists.

423
00:26:22,444 --> 00:26:26,167
Inbox, to do, doing, which is the current sprint,

424
00:26:26,947 --> 00:26:28,548
testing, and done.

425
00:26:29,429 --> 00:26:32,430
And we gave these lists a few important rules

426
00:26:32,731 --> 00:26:33,571
for production planning.

427
00:26:34,572 --> 00:26:37,033
The first rule is that new tasks

428
00:26:37,373 --> 00:26:39,535
should always go into the inbox first.

429
00:26:40,315 --> 00:26:42,497
They can't be put into any other list.

430
00:26:43,385 --> 00:26:48,187
At each production meeting, we evaluate the new tasks in the inbox and decide their priority.

431
00:26:48,587 --> 00:26:53,870
And this meant that you knew exactly what your next two days of work were going to look like.

432
00:26:54,710 --> 00:26:59,332
And you wouldn't get derailed by some random unplanned thing being dropped into your lap,

433
00:26:59,512 --> 00:27:03,613
because all the new stuff just went into the inbox instead of at the top of your current pile.

434
00:27:05,314 --> 00:27:07,675
The second rule is that time is a constraint.

435
00:27:08,855 --> 00:27:13,037
Only 16 hours of work could be handed to any one person during that sprint.

436
00:27:13,828 --> 00:27:16,629
And if we gave someone 20 or 30 hours,

437
00:27:17,209 --> 00:27:20,210
it meant that we were demanding that person to crunch,

438
00:27:20,890 --> 00:27:23,531
which going forward, we were no longer going to do.

439
00:27:24,331 --> 00:27:27,612
And refusing to crunch is the core way for us

440
00:27:27,692 --> 00:27:31,753
to bake quality into the production pipeline

441
00:27:31,873 --> 00:27:32,934
and the planning process.

442
00:27:34,414 --> 00:27:37,175
The third rule is that all work items

443
00:27:37,375 --> 00:27:38,935
have to go through the whole flow,

444
00:27:39,436 --> 00:27:40,496
including the testing step.

445
00:27:41,426 --> 00:27:44,107
The testing step creates an explicit requirement

446
00:27:44,348 --> 00:27:46,729
that you verify the thing that you just finished

447
00:27:46,889 --> 00:27:49,911
is free of defects before you send it to the next person.

448
00:27:50,571 --> 00:27:52,752
This keeps work from flowing backwards

449
00:27:52,972 --> 00:27:55,133
because errors get fixed at the source

450
00:27:55,414 --> 00:27:56,814
instead of being found out later.

451
00:27:57,875 --> 00:28:00,036
So as a practical example of how this flow works,

452
00:28:00,897 --> 00:28:02,898
we can see how this testing requirement

453
00:28:03,018 --> 00:28:05,919
allowed us to identify and fix a major problem

454
00:28:06,059 --> 00:28:07,580
in our art asset pipeline.

455
00:28:08,797 --> 00:28:11,859
So under the old process, Sam would create a bunch of assets,

456
00:28:12,119 --> 00:28:14,920
the InkBot would export them, and I'd bring them

457
00:28:14,960 --> 00:28:15,461
into the game.

458
00:28:16,121 --> 00:28:17,682
And then I would review them for errors.

459
00:28:18,302 --> 00:28:20,803
And when I found an error, I would have to send it back.

460
00:28:21,344 --> 00:28:22,144
And that's a defect.

461
00:28:23,245 --> 00:28:26,066
So we would have defects then coming to me

462
00:28:26,166 --> 00:28:28,187
and then flowing backwards and going back upstream.

463
00:28:29,808 --> 00:28:31,629
But let's take a look at what happens

464
00:28:31,909 --> 00:28:34,711
if we take the workflow from our Trello board

465
00:28:35,271 --> 00:28:37,512
and apply it to the ArtAsset pipeline.

466
00:28:38,713 --> 00:28:43,977
So as normal, Sam creates an asset and then the InkBot exports it.

467
00:28:44,718 --> 00:28:47,580
But now he has this testing step in here.

468
00:28:48,361 --> 00:28:51,503
So instead of just immediately sending the asset to me,

469
00:28:51,783 --> 00:28:54,865
now he is the one responsible for reviewing it for errors.

470
00:28:55,626 --> 00:28:58,108
And if he finds an error at this point, it's easy to fix

471
00:28:58,888 --> 00:29:00,910
because he just finished making it.

472
00:29:01,110 --> 00:29:03,052
So he's already got all the files open and everything.

473
00:29:04,083 --> 00:29:08,945
And since he is now getting hit by his own errors in real time,

474
00:29:09,705 --> 00:29:14,247
he's able to update his processes to cut down on his error rate.

475
00:29:15,027 --> 00:29:17,688
So when he first started tracking his errors using this process,

476
00:29:17,748 --> 00:29:19,989
he discovered that his error rate was actually 40%.

477
00:29:21,950 --> 00:29:23,970
But with all the fixes that he implemented,

478
00:29:24,450 --> 00:29:31,071
into his process, his error rate is now closer to 2%, which means by the time I get the assets,

479
00:29:31,871 --> 00:29:35,472
I can usually just go ahead and implement them without any extra work.

480
00:29:37,193 --> 00:29:43,014
So with this small update, Sam spends a lot less time fixing errors because now he makes them a lot

481
00:29:43,034 --> 00:29:47,375
less frequently, and if he does make an error, he's not making it anyone else's problem.

482
00:29:48,315 --> 00:29:51,776
Most importantly, he's not making these errors my problem.

483
00:29:52,642 --> 00:29:56,084
And something we learned very quickly, once we started making our work visible,

484
00:29:56,744 --> 00:29:59,727
is that if something is my problem, it's everyone's problem.

485
00:30:00,147 --> 00:30:03,709
Because I am the studio's production bottleneck.

486
00:30:05,411 --> 00:30:08,052
What's a bottleneck? I'm glad you asked.

487
00:30:09,313 --> 00:30:13,836
A bottleneck is a part of a process that's receiving more work than it can handle.

488
00:30:14,657 --> 00:30:17,699
And every production process has at least one bottleneck.

489
00:30:18,747 --> 00:30:24,414
It turns out that understanding where your production bottlenecks are is super important.

490
00:30:25,175 --> 00:30:31,062
So let's take a look at our art pipeline example. In our case, we had Sam over here,

491
00:30:32,043 --> 00:30:34,887
able to produce three art assets per hour.

492
00:30:35,892 --> 00:30:42,316
As the game programmer, I was only able to implement one asset per hour on average, because I'm programming.

493
00:30:42,536 --> 00:30:49,020
I have a bunch of other stuff that I'm working on too. I'm working on game systems, fixing bugs, developing new features, all that stuff.

494
00:30:50,401 --> 00:30:53,043
So in this case, I'm the bottleneck for art.

495
00:30:53,743 --> 00:30:58,226
And it doesn't really matter that Sam is producing three assets per hour,

496
00:30:58,306 --> 00:31:05,550
because our process makes it so that the game will still only get one asset implemented per hour.

497
00:31:06,443 --> 00:31:09,965
So the total output of our team is not determined by Sam,

498
00:31:10,505 --> 00:31:12,786
it's determined by me, the bottleneck.

499
00:31:14,787 --> 00:31:16,547
So when Sam started doing his own testing,

500
00:31:17,248 --> 00:31:20,429
it cut down on the rate that he was able to produce art

501
00:31:20,689 --> 00:31:24,851
because now he had to spend extra time testing his art.

502
00:31:25,911 --> 00:31:28,672
But he took that testing task from me,

503
00:31:29,433 --> 00:31:31,773
which actually saved me a bunch of time,

504
00:31:32,274 --> 00:31:34,354
which I could use to implement the art.

505
00:31:35,154 --> 00:31:41,920
So with that one change, we were able to get twice as much art into the game in the same amount of time.

506
00:31:42,941 --> 00:31:53,209
So just to reiterate this, by using the same people with no extra work hours, and simply moving a single task from one person to another,

507
00:31:53,970 --> 00:31:58,633
we doubled the amount and pace of art that we could get into the game.

508
00:32:00,195 --> 00:32:03,798
Which brings me to the golden rule of workflow improvements.

509
00:32:05,003 --> 00:32:07,644
The only way to increase your team's output

510
00:32:08,245 --> 00:32:10,906
is to increase the capacity of the bottleneck

511
00:32:11,606 --> 00:32:12,947
to move work through the system.

512
00:32:13,848 --> 00:32:15,869
If you're making changes anywhere else

513
00:32:16,449 --> 00:32:17,490
other than the bottleneck,

514
00:32:17,710 --> 00:32:20,351
you're either making things worse

515
00:32:20,371 --> 00:32:22,292
or you're just not making them better.

516
00:32:24,233 --> 00:32:26,735
So once we got our workflow under control,

517
00:32:26,835 --> 00:32:28,736
we were ready to tackle the next bottleneck

518
00:32:29,076 --> 00:32:31,417
in our production process, deployments.

519
00:32:32,253 --> 00:32:35,335
By deployments, I just mean making builds of the game

520
00:32:35,536 --> 00:32:37,717
and getting those builds delivered to players.

521
00:32:38,998 --> 00:32:41,300
Deployments had been a problem since day one,

522
00:32:41,520 --> 00:32:44,643
but because of how painful our deployment process was,

523
00:32:44,903 --> 00:32:46,144
we had been avoiding them.

524
00:32:46,805 --> 00:32:49,067
But one of the core lessons of DevOps is,

525
00:32:49,827 --> 00:32:53,610
if a process is painful, you should do it more, not less.

526
00:32:54,591 --> 00:32:56,413
If you don't confront the process,

527
00:32:56,953 --> 00:32:57,994
you can't learn about it,

528
00:32:58,514 --> 00:33:01,097
so you can't fix the thing that's making it so difficult.

529
00:33:02,287 --> 00:33:07,631
So for us then, the ultimate goal was to have continuous deployments of our games.

530
00:33:08,492 --> 00:33:14,817
In other words, it would be ideal if every time we made one single tiny change to our game,

531
00:33:15,457 --> 00:33:20,621
we could deliver that change to QA in a fully compiled build for testing.

532
00:33:21,782 --> 00:33:25,004
Having continuous deployments brings a huge number of benefits.

533
00:33:25,885 --> 00:33:31,069
It allows you to detect problems immediately after they're created instead of weeks later.

534
00:33:32,294 --> 00:33:34,936
And if you do release a patch with very few changes,

535
00:33:35,536 --> 00:33:37,537
the likelihood of that patch containing

536
00:33:37,637 --> 00:33:40,639
some kind of catastrophic problem is quite low.

537
00:33:41,639 --> 00:33:43,680
And if there was some huge problem,

538
00:33:44,001 --> 00:33:45,241
it's very easy to track it down

539
00:33:45,501 --> 00:33:47,763
because hardly anything has changed

540
00:33:47,843 --> 00:33:49,964
so you can easily pinpoint where to look.

541
00:33:50,844 --> 00:33:53,306
And last, the more deployments you do,

542
00:33:53,566 --> 00:33:56,788
the faster you find problems in your deployment process.

543
00:33:57,048 --> 00:33:59,229
So you can fix your deployment process as well.

544
00:34:00,540 --> 00:34:02,720
So this is the ideal, but for us,

545
00:34:03,061 --> 00:34:05,961
our deployments were anything but continuous.

546
00:34:07,022 --> 00:34:08,582
Just before we learned about DevOps,

547
00:34:08,882 --> 00:34:11,423
we had hired a few part-time QA testers

548
00:34:11,623 --> 00:34:14,744
and we were making builds for them once per week.

549
00:34:15,585 --> 00:34:17,625
The process at the time looked like this.

550
00:34:18,886 --> 00:34:20,646
At the end of the day, every Thursday,

551
00:34:21,426 --> 00:34:24,127
I would write up and compile all the week's changes

552
00:34:24,507 --> 00:34:26,208
into patch notes in a Google Doc,

553
00:34:26,428 --> 00:34:27,608
which would take about a half hour.

554
00:34:28,649 --> 00:34:29,529
Then I would...

555
00:34:29,965 --> 00:34:32,447
make a build, and verify that the build was working.

556
00:34:33,027 --> 00:34:36,509
So that process could take me 30 minutes to an hour.

557
00:34:36,810 --> 00:34:37,870
And if the build was good,

558
00:34:38,190 --> 00:34:40,332
I could then send it to the testers

559
00:34:40,412 --> 00:34:42,213
by putting it into Dropbox.

560
00:34:43,174 --> 00:34:44,795
And if the build wasn't good,

561
00:34:45,055 --> 00:34:47,116
then I would have to make another build

562
00:34:47,176 --> 00:34:48,797
and start the whole process over.

563
00:34:50,078 --> 00:34:53,840
The testers would then go ahead and make a checklist

564
00:34:54,260 --> 00:34:55,421
out of the patch notes,

565
00:34:56,042 --> 00:34:57,562
and they would begin testing

566
00:34:58,043 --> 00:34:59,003
and going through that checklist.

567
00:35:00,145 --> 00:35:04,628
If they found problems, they would report those problems to me, which I would then review.

568
00:35:05,309 --> 00:35:10,952
And if the issue was something that needed fixing, I would move that issue into Trello

569
00:35:11,413 --> 00:35:13,554
and then I would fix it for the next round.

570
00:35:14,415 --> 00:35:17,117
But this whole process was a one week loop.

571
00:35:18,437 --> 00:35:19,998
And this was only for Windows builds.

572
00:35:20,339 --> 00:35:25,262
If we wanted to make builds for other platforms, then each additional platform would take me

573
00:35:25,362 --> 00:35:28,264
another 30 to 60 minutes to deploy to.

574
00:35:29,140 --> 00:35:33,605
So at this point, the rest of our intended target platforms

575
00:35:33,725 --> 00:35:35,346
were completely untested.

576
00:35:36,788 --> 00:35:39,030
So we set out to update this process

577
00:35:39,311 --> 00:35:42,995
with a new automatic deployment pipeline for our games, which

578
00:35:43,015 --> 00:35:44,596
we would call the GamePipe.

579
00:35:45,858 --> 00:35:47,319
We had a lot of really big visions

580
00:35:47,580 --> 00:35:49,241
for what the GamePipe could do.

581
00:35:50,677 --> 00:35:55,060
But if we did them all, it would take months before we had the game pipe up and running.

582
00:35:55,280 --> 00:36:02,746
So instead, we asked ourselves, what would be the simplest version of the game pipe that we could start using immediately?

583
00:36:03,727 --> 00:36:07,710
So this is back to that small batch delivery of work.

584
00:36:09,271 --> 00:36:16,076
So Adam, our tools developer, took on this problem, and he created the first working version of the game pipe in about a week.

585
00:36:17,397 --> 00:36:18,818
In this first draft of the game pipe.

586
00:36:19,363 --> 00:36:22,605
Whenever I pushed a git commit to the game's master branch,

587
00:36:23,025 --> 00:36:25,827
the GamePipe, using a Bitbucket webhook,

588
00:36:26,647 --> 00:36:28,608
would create a Windows build of the game

589
00:36:29,189 --> 00:36:32,130
and then deploy that build into Dropbox

590
00:36:32,310 --> 00:36:33,891
where our testers could then access it.

591
00:36:34,792 --> 00:36:35,632
So this is very simple.

592
00:36:36,893 --> 00:36:38,934
But even though this version of the GamePipe

593
00:36:38,994 --> 00:36:41,036
was about as minimalist as it could get,

594
00:36:41,356 --> 00:36:44,738
we found that it solved a bunch of our problems right away.

595
00:36:45,982 --> 00:36:49,403
So first, my time was no longer being used to create builds.

596
00:36:49,703 --> 00:36:53,344
So I could just keep developing while the build machine

597
00:36:53,644 --> 00:36:55,624
was just churning away compiling builds.

598
00:36:56,984 --> 00:37:00,725
I also no longer had to manually track down the builds

599
00:37:00,965 --> 00:37:03,306
and put them into Dropbox and deliver them to the testers.

600
00:37:04,126 --> 00:37:05,966
The GamePipe was now doing this automatically.

601
00:37:06,126 --> 00:37:07,706
So this saved me a bunch of time.

602
00:37:07,726 --> 00:37:09,087
It saved me task switching,

603
00:37:09,567 --> 00:37:10,947
and it cut down on the chance

604
00:37:11,027 --> 00:37:15,108
that I would mess the process up and create defects.

605
00:37:16,296 --> 00:37:20,338
And last, environment configuration was no longer a problem.

606
00:37:20,618 --> 00:37:22,960
So all this means is that no matter what,

607
00:37:23,320 --> 00:37:26,862
we can ensure that all the builds always come out the same

608
00:37:27,162 --> 00:37:29,784
because they're always using the same versions

609
00:37:29,824 --> 00:37:30,964
of the same SDKs,

610
00:37:31,485 --> 00:37:33,206
because it's always being built on the same machine,

611
00:37:33,786 --> 00:37:36,628
no matter what machine we triggered the build from.

612
00:37:38,329 --> 00:37:38,989
And just like that,

613
00:37:39,269 --> 00:37:42,731
we were able to go from making builds once per week

614
00:37:43,152 --> 00:37:44,832
to making them once per day.

615
00:37:45,655 --> 00:37:48,356
So we rescheduled our QA team to spread them out

616
00:37:48,396 --> 00:37:51,257
throughout the week instead of coming in just on Fridays.

617
00:37:51,837 --> 00:37:54,277
And so whenever we made a change to the game,

618
00:37:54,737 --> 00:37:57,238
it would be tested within about 24 hours.

619
00:37:58,638 --> 00:38:01,399
But our goal was continuous deployments

620
00:38:02,159 --> 00:38:04,660
and once per day isn't continuous.

621
00:38:05,680 --> 00:38:07,520
We weren't yet able to make the leap

622
00:38:07,720 --> 00:38:08,841
to continuous deployments

623
00:38:08,881 --> 00:38:11,501
because there was still one manual step left

624
00:38:11,821 --> 00:38:14,862
in the deployment process, writing patch notes.

625
00:38:16,145 --> 00:38:18,528
Fortunately, there was a solution right under our noses,

626
00:38:19,229 --> 00:38:21,631
because every time I made a change to the game,

627
00:38:22,152 --> 00:38:25,295
I would write a git commit message explaining the change.

628
00:38:26,376 --> 00:38:29,360
But if I'm writing git commits for every change

629
00:38:29,840 --> 00:38:31,302
and a patch note for every change,

630
00:38:31,902 --> 00:38:33,724
then I'm just doing the same thing twice.

631
00:38:34,845 --> 00:38:38,790
So to cut down on this redundant manual work,

632
00:38:39,738 --> 00:38:42,820
Adam built a versioning system into the game pipe

633
00:38:42,860 --> 00:38:45,340
that would automatically convert my Git commits

634
00:38:45,481 --> 00:38:46,221
into patch notes,

635
00:38:46,501 --> 00:38:49,402
and then it would post those patch notes to our website.

636
00:38:50,222 --> 00:38:52,803
So for example, if I wrote this Git commit,

637
00:38:53,643 --> 00:38:55,704
campaign, three new levels added

638
00:38:55,744 --> 00:38:57,125
to the end of the campaign, blah, blah, blah,

639
00:38:58,425 --> 00:39:01,146
then it would get automatically converted

640
00:39:01,186 --> 00:39:02,967
into this on the patch notes.

641
00:39:04,607 --> 00:39:06,828
So with this patch note delivery system up and running,

642
00:39:07,208 --> 00:39:09,089
we found a few huge benefits.

643
00:39:10,216 --> 00:39:15,658
First, and most importantly, this fully eliminated the manual creation of patch notes, which

644
00:39:15,798 --> 00:39:18,780
finally did allow us to make continuous deployments.

645
00:39:18,980 --> 00:39:20,440
We could make deployments at any time.

646
00:39:22,321 --> 00:39:26,583
Second, since the patch notes were generated out of my git commits, it was no longer possible

647
00:39:26,663 --> 00:39:29,764
for me to accidentally leave something out of the patch notes.

648
00:39:30,124 --> 00:39:32,785
So that cut down on defects and made our testing more reliable.

649
00:39:33,942 --> 00:39:37,726
And the third benefit is that because my Git commits

650
00:39:38,146 --> 00:39:41,630
were now publicly readable by other people

651
00:39:42,010 --> 00:39:43,672
outside of the programming team,

652
00:39:44,472 --> 00:39:48,176
it forced me to be much more clear

653
00:39:48,616 --> 00:39:51,319
and deliberate about my Git commits.

654
00:39:51,920 --> 00:39:52,921
So in the long run,

655
00:39:53,341 --> 00:39:56,364
it became far easier to navigate our changelogs.

656
00:39:58,765 --> 00:40:00,988
So now if we look at our deployment pipeline,

657
00:40:01,028 --> 00:40:03,651
you can see that we've fully automated

658
00:40:04,052 --> 00:40:06,675
all of the manual parts of getting builds made

659
00:40:06,795 --> 00:40:07,996
and delivered to QA.

660
00:40:08,036 --> 00:40:11,600
So all the automated parts are the gold boxes there.

661
00:40:12,762 --> 00:40:15,445
And over time, our platform specialist, Shure,

662
00:40:16,204 --> 00:40:20,287
took over the GamePipe project, and he worked with Adam

663
00:40:20,327 --> 00:40:23,229
to continually improve the GamePipe piece by piece.

664
00:40:23,929 --> 00:40:25,911
So instead of deploying to Dropbox,

665
00:40:26,111 --> 00:40:29,654
we got it to upload directly to an internal staging

666
00:40:29,694 --> 00:40:30,474
branch on Steam.

667
00:40:30,875 --> 00:40:32,976
So that meant that our testers would always

668
00:40:33,016 --> 00:40:36,159
have the latest version of the game automatically downloaded.

669
00:40:37,099 --> 00:40:40,342
Later, we upgraded it to deploy builds directly

670
00:40:40,422 --> 00:40:42,463
to all of the rest of our platforms,

671
00:40:42,523 --> 00:40:44,225
like Google Play and the App Store.

672
00:40:46,079 --> 00:40:51,701
Shur and Adam also created an automatic localization pipeline and connected it to the GamePipe,

673
00:40:51,921 --> 00:40:56,882
making it trivially easy for us to add new text and translations with every new version.

674
00:40:58,083 --> 00:41:00,623
So by this point, things were looking pretty good.

675
00:41:01,143 --> 00:41:06,605
The GamePipe had turned a fully manual process that would take up to an hour each time into

676
00:41:06,625 --> 00:41:10,166
an automated process that would only take about five seconds to trigger.

677
00:41:11,409 --> 00:41:14,190
We went from weekly testing to continuous testing,

678
00:41:14,710 --> 00:41:16,951
which gave us the fast feedback that we needed

679
00:41:17,171 --> 00:41:18,752
to rapidly iterate on the game,

680
00:41:19,012 --> 00:41:21,653
and it allowed us to more easily track down bugs.

681
00:41:22,213 --> 00:41:25,915
So this caused the builds of the game to become more stable,

682
00:41:26,475 --> 00:41:28,836
and most importantly, patching the game

683
00:41:29,056 --> 00:41:31,557
became incredibly easy instead of something

684
00:41:31,597 --> 00:41:34,038
that we had to agonize over for weeks.

685
00:41:35,658 --> 00:41:41,000
The most important thing I hope that you all take away from this GamePipe story is that,

686
00:41:41,260 --> 00:41:48,261
for starters, you should have an automatic deployment pipeline, but also, it doesn't

687
00:41:48,301 --> 00:41:49,121
have to be perfect.

688
00:41:50,021 --> 00:41:54,582
Make something simple that you can use and start using it right away.

689
00:41:55,502 --> 00:41:59,963
Because once you're using it, you can then iterate on it to fit with your processes,

690
00:42:00,243 --> 00:42:03,304
and eventually you will get it doing the things that you need it to do.

691
00:42:05,342 --> 00:42:06,862
So with our new continuous deployments,

692
00:42:07,102 --> 00:42:08,543
we wanted to make sure that we had

693
00:42:08,863 --> 00:42:10,303
quick testing on every patch.

694
00:42:10,783 --> 00:42:14,704
This meant opening up jobs for new part-time QA testers

695
00:42:14,724 --> 00:42:18,225
throughout the week, which meant we had to hire new people.

696
00:42:18,346 --> 00:42:19,966
So we had to screen them, interview them,

697
00:42:20,266 --> 00:42:21,927
and if we brought them in, train them.

698
00:42:22,987 --> 00:42:25,388
So this started taking up quite a bit of time,

699
00:42:25,588 --> 00:42:28,028
which was putting a strain on our production.

700
00:42:29,189 --> 00:42:30,789
We needed an operations manager,

701
00:42:31,089 --> 00:42:33,590
someone to take charge of the business side of things.

702
00:42:34,304 --> 00:42:39,488
Fortunately, we knew someone who had been doing operations management work for quite some time

703
00:42:39,829 --> 00:42:46,374
and was looking for a new job, which happened to be my wife, Tampara. She was our first hire

704
00:42:46,674 --> 00:42:53,260
since the studio had collapsed the year before, so we were determined to ensure that her onboarding

705
00:42:53,500 --> 00:42:58,044
and training in the studio went as smoothly as possible and that she was able to contribute

706
00:42:58,084 --> 00:43:01,166
immediately. Now, we already had a process in place.

707
00:43:01,761 --> 00:43:04,683
that was making work run really smooth and easily,

708
00:43:05,183 --> 00:43:06,184
which was our production meetings.

709
00:43:06,864 --> 00:43:08,806
So we took that same exact framework

710
00:43:09,166 --> 00:43:11,548
and we created a training Trello board.

711
00:43:12,382 --> 00:43:15,943
We populated that board with a list of training tasks with time estimates.

712
00:43:16,624 --> 00:43:19,225
And some of these were solo, like reading certain books,

713
00:43:19,625 --> 00:43:23,768
while others were collaborative, like one-on-one interviews with studio members.

714
00:43:24,468 --> 00:43:28,350
And the goal of each of these tasks was to generate knowledge and insight

715
00:43:28,650 --> 00:43:32,292
about how the studio works and what her role was inside the studio.

716
00:43:33,373 --> 00:43:38,215
Twice per week, we had production meetings to review what she had done in her training

717
00:43:38,335 --> 00:43:40,476
and talk through the next training sprint.

718
00:43:41,170 --> 00:43:43,892
And every sprint, we had her tasks broken down by hours

719
00:43:44,132 --> 00:43:45,533
so that we never overloaded her.

720
00:43:46,153 --> 00:43:47,894
And she always knew exactly what she was going

721
00:43:47,914 --> 00:43:49,095
to be working on and why.

722
00:43:50,596 --> 00:43:53,257
Because of this approach, she was immediately

723
00:43:53,377 --> 00:43:56,299
able to add value by taking over several business

724
00:43:56,399 --> 00:43:57,400
aspects of the studio.

725
00:43:57,920 --> 00:43:59,621
And she quickly built up the context

726
00:43:59,821 --> 00:44:02,883
of how the studio fit into the games industry at large,

727
00:44:03,223 --> 00:44:05,304
despite not coming from a gaming background.

728
00:44:06,808 --> 00:44:09,990
We refined this process further based on Sampada's feedback,

729
00:44:10,171 --> 00:44:13,453
and we later hired a new full-time QA tester, Jordan.

730
00:44:14,194 --> 00:44:16,716
And just like with Sampada, his onboarding

731
00:44:16,896 --> 00:44:19,698
was simple and stress-free for all parties.

732
00:44:20,159 --> 00:44:21,840
And all of this is thanks to the process

733
00:44:21,900 --> 00:44:23,301
of making the work visible.

734
00:44:23,802 --> 00:44:26,604
So we can easily spot problems, give guidance,

735
00:44:26,904 --> 00:44:29,647
set clear expectations, and receive feedback

736
00:44:29,927 --> 00:44:30,888
from our new hires.

737
00:44:32,340 --> 00:44:33,800
With Sampada and Jordan on the team,

738
00:44:34,100 --> 00:44:36,861
we increased our capacity in places where it mattered.

739
00:44:37,441 --> 00:44:39,541
We hired for roles that were specifically

740
00:44:39,621 --> 00:44:42,222
meant to relieve pressure on our production bottlenecks,

741
00:44:42,602 --> 00:44:43,042
and it worked.

742
00:44:44,382 --> 00:44:46,402
So before we move on, let's recap

743
00:44:46,582 --> 00:44:48,603
on the first way of DevOps and how we

744
00:44:48,643 --> 00:44:49,923
applied it to our situation.

745
00:44:51,043 --> 00:44:54,024
Remember, the first way is all about understanding and then

746
00:44:54,084 --> 00:44:56,104
managing the flow of work through the company,

747
00:44:56,504 --> 00:44:58,365
ensuring that the work flows in one direction,

748
00:44:59,165 --> 00:45:01,065
from development to operations to the customer.

749
00:45:01,790 --> 00:45:04,710
The core tools of the first way are to eliminate waste

750
00:45:04,770 --> 00:45:05,851
and make the work visible.

751
00:45:06,331 --> 00:45:09,652
And we did this by building new processes to guide, test,

752
00:45:09,712 --> 00:45:12,533
and review what work was being done through our production

753
00:45:12,573 --> 00:45:14,173
meetings and Trello rules.

754
00:45:15,413 --> 00:45:17,114
To deliver work in small batches,

755
00:45:17,174 --> 00:45:18,314
we created the game pipe.

756
00:45:18,614 --> 00:45:22,215
And we were able to continuously deploy patches and changes

757
00:45:22,275 --> 00:45:22,975
to our QA team.

758
00:45:24,419 --> 00:45:26,600
To prevent defects from moving downstream,

759
00:45:26,640 --> 00:45:30,422
we updated our workflows to move testing closer to the source

760
00:45:30,682 --> 00:45:33,163
so we could fix our problems before handing them off,

761
00:45:33,403 --> 00:45:35,384
like what we did with our art pipeline.

762
00:45:36,245 --> 00:45:38,606
And last, to align everything toward the global goals.

763
00:45:39,226 --> 00:45:42,167
Our goal is to deliver high quality games to our players.

764
00:45:42,668 --> 00:45:45,309
And we do that by adding staff and developing tools

765
00:45:45,469 --> 00:45:47,250
to ensure that the game development team is

766
00:45:47,290 --> 00:45:49,771
to work unimpeded and that our bottlenecks are clear.

767
00:45:51,654 --> 00:45:58,236
Second way is about amplifying feedback loops. So the second way says that while the work is

768
00:45:58,256 --> 00:46:04,558
flowing in one direction, we want feedback to flow in the other direction. Feedback is what

769
00:46:04,598 --> 00:46:10,399
allows us to catch problems, improve our processes, and build quality into the production pipeline.

770
00:46:11,179 --> 00:46:17,621
And to get that feedback, we need to develop tools and systems to allow the people downstream from us

771
00:46:17,961 --> 00:46:18,982
to report problems.

772
00:46:20,393 --> 00:46:23,356
So by this point, we did have our QA process giving us

773
00:46:23,896 --> 00:46:25,737
continuous feedback on our deployments.

774
00:46:26,178 --> 00:46:28,559
So the question then was, how do we

775
00:46:28,839 --> 00:46:31,982
amplify that loop to get better and faster feedback

776
00:46:32,282 --> 00:46:33,242
on the things that we're doing?

777
00:46:34,403 --> 00:46:38,046
To answer this question, we took a look at our QA testing

778
00:46:38,086 --> 00:46:38,526
pipeline.

779
00:46:39,027 --> 00:46:41,368
And we discovered that if we ramped up

780
00:46:41,428 --> 00:46:45,111
the speed and volume of reports coming from our QA team,

781
00:46:45,391 --> 00:46:48,713
we would be unable to handle it because we still

782
00:46:48,753 --> 00:46:49,554
had this process.

783
00:46:50,899 --> 00:46:55,448
every report had to be manually turned into a Trello card before it could be dealt with.

784
00:46:56,776 --> 00:47:01,659
Although this only took a few minutes per card, it was a manual process, which meant

785
00:47:01,880 --> 00:47:05,822
that it created tons of task switching, motion, and defects.

786
00:47:06,503 --> 00:47:12,247
And because of all that waste, a few minutes per card can easily turn into 5 or even 10

787
00:47:12,587 --> 00:47:18,871
minutes per card as the volume of cards increases because fatigue sets in and I would become

788
00:47:18,891 --> 00:47:22,574
increasingly distractible trying to process 60 cards in one go.

789
00:47:24,241 --> 00:47:31,086
So we used the Trello API to make it so that anyone reviewing an issue can just click a button

790
00:47:31,426 --> 00:47:37,870
to auto convert the issue into a Trello card. And all of the file attachments, tags, comments,

791
00:47:38,070 --> 00:47:43,294
and relevant information would just be baked into the card and we could then review that issue at

792
00:47:43,314 --> 00:47:49,698
the next production meeting. So that was it. Just like with the GamePipe, a cumbersome process

793
00:47:49,938 --> 00:47:52,800
that would take many minutes or more per

794
00:47:53,381 --> 00:47:59,685
iteration became an automatic process that would only take seconds. So now that we were able to

795
00:47:59,945 --> 00:48:06,569
review and process feedback much faster and easier, we could start looking for a way to amplify how

796
00:48:06,689 --> 00:48:12,352
our QA testers delivered their feedback. Under the current system, our testers were manually

797
00:48:12,432 --> 00:48:17,655
making checklists of what to test by looking at the patch notes, and it took a lot of time out

798
00:48:17,695 --> 00:48:18,375
of testing for them.

799
00:48:18,803 --> 00:48:21,023
and it also caused them to sometimes miss things

800
00:48:21,303 --> 00:48:23,324
because this was a manual process

801
00:48:23,424 --> 00:48:24,744
and there was nothing keeping track

802
00:48:24,764 --> 00:48:26,224
of all these things automatically.

803
00:48:27,185 --> 00:48:31,585
So the checklist creation step was clearly the bottleneck

804
00:48:31,785 --> 00:48:34,126
for everything else in the QA workflow.

805
00:48:34,786 --> 00:48:36,686
If we could alleviate that bottleneck,

806
00:48:36,787 --> 00:48:39,587
then our testers would be able to spend more time testing

807
00:48:40,147 --> 00:48:42,768
and they would be able to give us more and better feedback.

808
00:48:44,068 --> 00:48:46,148
Since we already had automated patch notes,

809
00:48:46,936 --> 00:48:50,477
we upgraded that system to turn the patch notes themselves

810
00:48:50,757 --> 00:48:52,978
directly into a QA testing checklist.

811
00:48:53,959 --> 00:48:56,479
Under the new system, each tester would see

812
00:48:56,659 --> 00:48:59,641
little check marks next to every change in the patch notes.

813
00:49:00,241 --> 00:49:01,681
And when they had tested something,

814
00:49:01,961 --> 00:49:04,462
they could simply check that change off.

815
00:49:05,823 --> 00:49:08,144
So now the testers didn't have to spend any time

816
00:49:08,364 --> 00:49:11,005
compiling a checklist at the start of their testing session

817
00:49:11,045 --> 00:49:12,565
because they could just jump right in.

818
00:49:13,544 --> 00:49:15,644
And on the back end of this system,

819
00:49:16,365 --> 00:49:17,845
when I log in as a developer,

820
00:49:18,586 --> 00:49:19,906
instead of seeing check marks,

821
00:49:20,207 --> 00:49:23,048
I would see a number next to each change,

822
00:49:23,568 --> 00:49:25,869
which would tell me how many testers

823
00:49:26,049 --> 00:49:27,050
have tested each change.

824
00:49:27,710 --> 00:49:31,051
So this lets us know whether we're missing test coverage

825
00:49:31,252 --> 00:49:32,292
on a particular issue,

826
00:49:32,632 --> 00:49:34,713
which we could then deal with that more directly.

827
00:49:36,394 --> 00:49:37,995
So that brings us to the current version

828
00:49:38,195 --> 00:49:40,516
of our patch deployment and QA testing pipeline,

829
00:49:40,756 --> 00:49:42,116
which now looks like this.

830
00:49:43,480 --> 00:49:50,285
As you can see, there are more automatic processes than manual ones, and we only have people doing

831
00:49:50,485 --> 00:49:56,910
the things that only people can do. With all those changes, we were suddenly getting better

832
00:49:57,050 --> 00:50:02,454
and more feedback without being overwhelmed. We knew what was being tested, and our testers were

833
00:50:02,614 --> 00:50:08,118
able to each add a lot more value to the process. So that wraps up the second way,

834
00:50:08,359 --> 00:50:09,499
amplifying feedback loops.

835
00:50:10,420 --> 00:50:16,803
The goal of collecting feedback is to allow you to catch problems, improve processes, and build quality into the pipeline.

836
00:50:17,484 --> 00:50:26,149
Developing tools and improving the means by which you receive feedback will allow you to get better feedback faster, which lets you make better products.

837
00:50:26,949 --> 00:50:33,953
But before you amplify the feedback loops, make sure that you have systems in place for how to handle that feedback.

838
00:50:34,974 --> 00:50:36,315
So with all those changes we made to our...

839
00:50:36,748 --> 00:50:38,528
deployment pipeline and feedback systems,

840
00:50:39,128 --> 00:50:42,369
we could tell that everything was moving along much faster,

841
00:50:42,649 --> 00:50:45,050
things were easier and things were cleaner.

842
00:50:46,070 --> 00:50:48,850
But DevOps is all about continuous improvement,

843
00:50:49,151 --> 00:50:50,391
not just one big improvement.

844
00:50:50,711 --> 00:50:53,912
And that brings us to the third way, continuous learning.

845
00:50:55,552 --> 00:50:56,852
Your studio is always changing

846
00:50:57,132 --> 00:50:58,593
and the world is always changing around it.

847
00:50:59,393 --> 00:51:01,313
If you wanna truly reach your potential

848
00:51:01,553 --> 00:51:02,673
and get the most out of your work,

849
00:51:03,232 --> 00:51:05,633
you need to be able to adapt, improve, and grow.

850
00:51:06,093 --> 00:51:07,913
And you need to build that philosophy

851
00:51:08,173 --> 00:51:09,353
into everything that you do.

852
00:51:10,794 --> 00:51:13,454
To do that, you need to ensure that everyone on your team

853
00:51:13,594 --> 00:51:16,355
has the right to experiment and try to figure out better

854
00:51:16,895 --> 00:51:20,015
and faster ways to improve the company processes.

855
00:51:21,195 --> 00:51:24,116
People need to be able to offer up sometimes risky ideas

856
00:51:24,536 --> 00:51:26,816
and the management needs to be able to hear those out

857
00:51:27,137 --> 00:51:29,237
without just striking them down out of hand.

858
00:51:30,117 --> 00:51:30,497
Which means,

859
00:51:31,008 --> 00:51:34,629
You need to create a work culture that reinforces psychological safety,

860
00:51:34,989 --> 00:51:36,849
where people know that they're going to get a fair shake

861
00:51:37,210 --> 00:51:39,670
and where they will always speak up about problems.

862
00:51:41,090 --> 00:51:43,631
But culture doesn't emerge in a vacuum.

863
00:51:45,151 --> 00:51:47,411
Culture is the collection of practices and beliefs

864
00:51:47,671 --> 00:51:50,912
that people develop in response to their circumstances.

865
00:51:51,812 --> 00:51:54,813
And what DevOps has taught us is that your work culture

866
00:51:54,993 --> 00:51:57,393
is a direct result of the structures and processes

867
00:51:57,613 --> 00:51:58,813
that you use in the workplace.

868
00:52:00,296 --> 00:52:04,119
So we had to ask ourselves, what structures do we have in place?

869
00:52:04,399 --> 00:52:07,782
And how do those structures affect our culture

870
00:52:07,842 --> 00:52:08,603
of learning and growth?

871
00:52:10,344 --> 00:52:12,246
Although we were doing twice-weekly production

872
00:52:12,266 --> 00:52:15,108
meetings, we realized that those would only get us so far.

873
00:52:15,609 --> 00:52:17,911
They're too narrowly focused on specific projects,

874
00:52:18,011 --> 00:52:20,173
and they're all about just doing the work.

875
00:52:20,413 --> 00:52:23,696
So we needed a higher level way to evaluate and make changes

876
00:52:23,736 --> 00:52:25,517
to the studio's processes as a whole.

877
00:52:26,443 --> 00:52:30,687
For us, this meant creating a formalized quarterly review

878
00:52:30,767 --> 00:52:31,207
process.

879
00:52:32,068 --> 00:52:35,051
Every quarter, we have our team members fill out a questionnaire

880
00:52:35,912 --> 00:52:38,194
to identify how they're feeling about their work

881
00:52:38,394 --> 00:52:40,756
and ways in which they believe that their time

882
00:52:40,896 --> 00:52:42,978
or their talents might be getting wasted.

883
00:52:44,100 --> 00:52:48,102
We use those responses plus a studio waste analysis

884
00:52:48,342 --> 00:52:51,002
to make changes to the work processes of the studio

885
00:52:51,062 --> 00:52:51,463
as a whole.

886
00:52:52,083 --> 00:52:54,884
So every time we've done this, we have found huge gains

887
00:52:55,244 --> 00:52:57,885
and solved big problems with some aspect

888
00:52:58,125 --> 00:52:59,325
of how we handle our work.

889
00:53:00,565 --> 00:53:02,926
Whether this review process is quarterly, monthly,

890
00:53:03,266 --> 00:53:05,787
or somewhere in between, the most important part

891
00:53:05,967 --> 00:53:07,467
is that there are structured ways

892
00:53:07,547 --> 00:53:10,668
to make improvements to all the processes in the company.

893
00:53:11,522 --> 00:53:14,784
Without that structure, the evaluation doesn't happen,

894
00:53:15,385 --> 00:53:16,886
and then the improvements don't happen.

895
00:53:18,507 --> 00:53:20,508
So that brings us to the end of the three ways.

896
00:53:20,848 --> 00:53:23,230
So before I tell you what happened after we did all this,

897
00:53:23,850 --> 00:53:24,750
let's quickly recap.

898
00:53:25,891 --> 00:53:28,713
The first way is all about mastering the flow of work.

899
00:53:28,993 --> 00:53:30,334
Make sure the work flows forwards,

900
00:53:30,914 --> 00:53:31,855
watch out for bottlenecks,

901
00:53:32,135 --> 00:53:34,336
cut down on defects, and eliminate waste.

902
00:53:35,448 --> 00:53:37,810
The second way is all about amplifying feedback loops.

903
00:53:38,531 --> 00:53:40,332
Make sure you're getting the information you need

904
00:53:40,552 --> 00:53:42,094
from the people downstream from you

905
00:53:42,354 --> 00:53:44,956
so you can make their and your lives better.

906
00:53:46,518 --> 00:53:48,720
The third way is about creating a culture

907
00:53:49,220 --> 00:53:51,102
of continuous learning and experimentation

908
00:53:51,262 --> 00:53:53,524
so that you can constantly improve

909
00:53:53,844 --> 00:53:55,245
and deliver value to your players.

910
00:53:56,967 --> 00:53:59,569
Now, it's a good thing that we started down this path

911
00:53:59,609 --> 00:54:00,030
when we did.

912
00:54:00,412 --> 00:54:02,954
because our world was about to get flipped upside down,

913
00:54:03,454 --> 00:54:06,537
or at least it would have if we hadn't been prepared.

914
00:54:08,758 --> 00:54:09,659
By February of 2019,

915
00:54:09,719 --> 00:54:13,141
we had been making our DevOps transformation for six weeks.

916
00:54:14,062 --> 00:54:16,604
We were planning on launching Levelhead around June,

917
00:54:16,904 --> 00:54:18,165
so we had four months to go.

918
00:54:19,206 --> 00:54:21,928
Then on February 13, we got hit by a curve ball.

919
00:54:22,908 --> 00:54:24,369
Nintendo announced that Mario Maker 2

920
00:54:25,110 --> 00:54:27,732
was not only in development, but it was essentially done,

921
00:54:28,292 --> 00:54:30,013
and Mario Maker 2 would be launching in.

922
00:54:31,067 --> 00:54:38,049
June. This was really bad for us. We had started making Levelhead because we sought to fill the

923
00:54:38,189 --> 00:54:44,492
void left by the fact that there was no Mario Maker on the Switch. Pretty soon, that void

924
00:54:44,692 --> 00:54:50,794
wouldn't exist, and there was no way that we could compete with Nintendo in terms of marketing power.

925
00:54:52,114 --> 00:54:57,497
So, we didn't have any options other than maybe beating Mario Maker to launch.

926
00:54:58,459 --> 00:54:59,719
But how could we do that?

927
00:55:00,039 --> 00:55:02,240
We looked out across the media landscape

928
00:55:02,320 --> 00:55:05,381
and we discovered that if we wanted to beat Mario Maker

929
00:55:05,581 --> 00:55:09,082
to the market, then pretty much the only available

930
00:55:09,142 --> 00:55:11,022
launch date for us would be April 18, 2019.

931
00:55:12,083 --> 00:55:15,243
Two months earlier than planned.

932
00:55:16,164 --> 00:55:17,904
So we thought, let's go for it.

933
00:55:18,504 --> 00:55:21,945
And better yet, let's try to dodge Mario Maker entirely

934
00:55:22,305 --> 00:55:24,346
by launching on Steam instead.

935
00:55:25,449 --> 00:55:29,972
So on February 13, we completely changed course and settled on a new timeline.

936
00:55:31,714 --> 00:55:38,359
On March 1st, we would do a small closed pre-alpha test and we had two weeks to get this put together.

937
00:55:39,400 --> 00:55:44,484
On March 8th, a week later, that would be the start of the main alpha test where we would bring

938
00:55:44,524 --> 00:55:49,809
in a larger group of players so we could refine the game further. And six weeks after that,

939
00:55:50,129 --> 00:55:52,571
on April 18th, we would launch into early access.

940
00:55:53,652 --> 00:55:54,172
So suddenly...

941
00:55:55,274 --> 00:55:57,635
Instead of having the game in the hands of players in three months,

942
00:55:57,975 --> 00:56:00,917
we suddenly had to have it in their hands in two weeks.

943
00:56:02,077 --> 00:56:06,239
This is the exact kind of situation that would have been nearly impossible before

944
00:56:06,739 --> 00:56:13,682
and would have resulted in an incredible amount of crunch, panic, crashes, bug fixes, and everything else.

945
00:56:15,403 --> 00:56:17,884
But because of our updated DevOps workflow,

946
00:56:18,304 --> 00:56:21,846
we already had stable builds on Steam that had been thoroughly tested.

947
00:56:22,739 --> 00:56:27,803
so we didn't crunch. We just shifted some priorities around a bit to wrap up some final

948
00:56:27,844 --> 00:56:32,688
features that we wanted to get in before early access and we just carried on as normal, no problem.

949
00:56:33,789 --> 00:56:40,574
And within two weeks we had players playing the game in our pre-launch testing period and it was fine.

950
00:56:41,329 --> 00:56:43,850
Although our players did find some edge case bugs,

951
00:56:44,150 --> 00:56:46,832
it was easy for us to quickly patch them up.

952
00:56:47,552 --> 00:56:50,133
And throughout the five-week pre-launch testing session

953
00:56:50,273 --> 00:56:52,915
across thousands of player hours of testing,

954
00:56:53,555 --> 00:56:55,196
we only had one single crash,

955
00:56:55,556 --> 00:56:59,358
which was easily fixed, tested, and deployed that same day.

956
00:57:00,718 --> 00:57:03,480
On April 18th, we launched into early access.

957
00:57:04,600 --> 00:57:05,901
We got the steam pop-up that weekend

958
00:57:05,941 --> 00:57:07,942
and got a decent influx of players,

959
00:57:08,362 --> 00:57:08,502
and...

960
00:57:09,564 --> 00:57:14,606
everything was fine. We had no game breaking issues. We didn't have to put out an emergency

961
00:57:14,646 --> 00:57:20,908
patch. We just hit the launch button and then we just got to hang out with our players in Discord

962
00:57:21,168 --> 00:57:28,070
and chat with them about the game. It was actually pretty relaxing. So that was 11 months ago.

963
00:57:29,400 --> 00:57:32,782
To this day, we are still doing our continuous deployments

964
00:57:33,243 --> 00:57:35,685
and delivering routine content to our players.

965
00:57:36,305 --> 00:57:40,088
Levelhead is sitting at 97% positive on Steam Early Access,

966
00:57:40,229 --> 00:57:41,790
and the game is getting better all the time

967
00:57:41,930 --> 00:57:44,132
since we're deploying two to three content patches

968
00:57:44,152 --> 00:57:45,053
to our players every month.

969
00:57:46,113 --> 00:57:48,315
And every time we send out a patch, it's calm.

970
00:57:48,996 --> 00:57:49,576
It's no big deal.

971
00:57:50,277 --> 00:57:51,258
And we're not crunching at all,

972
00:57:51,538 --> 00:57:52,559
even though we're gearing up

973
00:57:52,599 --> 00:57:55,041
for a six-platform simultaneous launch

974
00:57:55,201 --> 00:57:58,143
supporting 11 languages with a team of six people.

975
00:57:59,977 --> 00:58:04,499
And all of this is thanks to our whole team's willingness to break the loop of heroics,

976
00:58:04,920 --> 00:58:09,162
take a step back and ask, does it really have to be like this?

977
00:58:10,883 --> 00:58:13,904
And that's the story of how we rebooted our studio.

978
00:58:15,045 --> 00:58:19,507
I hope what I've shown you all today is that the stresses that we all take for granted

979
00:58:19,827 --> 00:58:22,789
as a normal part of game development are not normal.

980
00:58:23,589 --> 00:58:26,811
They are the result of bad development practices.

981
00:58:27,631 --> 00:58:28,912
History is caught in a loop.

982
00:58:29,582 --> 00:58:30,663
but we don't have to be.

983
00:58:32,184 --> 00:58:34,406
You might look at all this stuff that I brought up today

984
00:58:34,706 --> 00:58:36,567
and think, this is a lot.

985
00:58:37,228 --> 00:58:40,030
You might think that your team can't afford to do this.

986
00:58:41,130 --> 00:58:43,692
No, you can't afford not to do this,

987
00:58:44,132 --> 00:58:48,015
because you're spending far more time and energy and money

988
00:58:48,315 --> 00:58:50,897
than you need to, and you're getting worse results.

989
00:58:52,218 --> 00:58:55,420
That's not to say that making this kind of change is easy.

990
00:58:56,326 --> 00:58:59,467
But the goal here isn't perfection, it's improvement.

991
00:59:00,167 --> 00:59:02,367
The most important thing is that you start down this road

992
00:59:02,847 --> 00:59:05,248
because as soon as you take even one single step

993
00:59:05,608 --> 00:59:08,229
toward applying DevOps principles to your work,

994
00:59:08,849 --> 00:59:10,149
you'll see immediate benefits.

995
00:59:11,169 --> 00:59:13,550
And when you do, we'll be there on the other side,

996
00:59:14,110 --> 00:59:17,251
ready to meet you, where we can all just kick back, relax,

997
00:59:17,811 --> 00:59:19,491
and make great games for our players

998
00:59:19,851 --> 00:59:21,252
without setting ourselves on fire.

999
00:59:23,032 --> 00:59:23,892
Thank you all for your time.

1000
00:59:24,732 --> 00:59:26,073
I hope this was useful for you.

1001
00:59:27,025 --> 00:59:31,367
To give you some resources to pursue as you go down the path of DevOps, I've put together

1002
00:59:31,387 --> 00:59:37,089
a little cheat sheet, which has all the core points, plus some books for you to check out.

1003
00:59:37,229 --> 00:59:40,771
I definitely recommend starting by reading the Phoenix Project.

1004
00:59:41,331 --> 00:59:45,132
And if you have any questions, you can feel free to just shoot me an email.

1005
00:59:45,733 --> 00:59:47,493
Enjoy, and good luck out there.

