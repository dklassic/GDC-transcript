1
00:00:05,665 --> 00:00:09,528
My name is Adrian Yu and I do have some credibility behind my name.

2
00:00:09,528 --> 00:00:14,353
I've worked in the automation industry for 12 years, 11 of it has been in the gaming

3
00:00:14,353 --> 00:00:14,773
industry.

4
00:00:14,773 --> 00:00:20,778
So from that standpoint, I guess I'll actually go back one slide.

5
00:00:23,457 --> 00:00:26,679
I assume everyone here knows the benefits

6
00:00:26,679 --> 00:00:29,041
of continuous integration and you guys are here for Jenkins

7
00:00:29,041 --> 00:00:31,923
because Jenkins is in the title.

8
00:00:31,923 --> 00:00:33,664
I start off as a software engineer in Tess,

9
00:00:33,664 --> 00:00:35,044
so I focus on automation scripts

10
00:00:35,044 --> 00:00:39,087
and then eventually my team took on the builds at EA.

11
00:00:39,087 --> 00:00:41,028
Now I'm currently an associate technical director

12
00:00:41,028 --> 00:00:43,210
for the development and release engineering team.

13
00:00:44,913 --> 00:00:47,294
So what is Diri?

14
00:00:47,294 --> 00:00:51,436
My team is a distributed community of embedded DevOps engineers

15
00:00:51,436 --> 00:00:56,198
focused on continuous integration and deployment automation.

16
00:00:56,198 --> 00:00:58,779
We're kind of a unique team within EA.

17
00:00:58,779 --> 00:01:01,781
We serve a lot of the game teams.

18
00:01:01,781 --> 00:01:04,662
And we're effectively the build engineers of EA.

19
00:01:04,662 --> 00:01:04,962
Now what do we do?

20
00:01:10,538 --> 00:01:12,580
Our name is kind of not that obvious,

21
00:01:12,580 --> 00:01:14,702
but what we do is we set up automation

22
00:01:14,702 --> 00:01:17,484
for your usual continuous builds,

23
00:01:17,484 --> 00:01:20,366
for those that are smaller startups and stuff like that.

24
00:01:21,110 --> 00:01:23,071
The setup I'd recommend for new automation

25
00:01:23,071 --> 00:01:26,013
would be from left to right, just because that's easier.

26
00:01:26,013 --> 00:01:27,574
So Kinetics Build, Static Analysis,

27
00:01:27,574 --> 00:01:29,515
then once you have those running,

28
00:01:29,515 --> 00:01:31,697
you set up your build verification tests.

29
00:01:31,697 --> 00:01:34,178
Then eventually you add metrics,

30
00:01:34,178 --> 00:01:35,999
performance metrics, build metrics.

31
00:01:35,999 --> 00:01:39,482
Then you start focusing on bug and crash reporting

32
00:01:39,482 --> 00:01:42,163
as your game gets more advanced and more mature.

33
00:01:42,163 --> 00:01:44,545
Then you write miscellaneous tools if you need to

34
00:01:44,545 --> 00:01:46,967
to help with automating things.

35
00:01:47,047 --> 00:01:51,970
throughout the process, and eventually you start doing custom reporting because your

36
00:01:51,970 --> 00:01:55,112
system's stable, the game is stable, your CI system is good.

37
00:01:55,112 --> 00:02:01,497
And then at the end of the day, our team owns the end-to-end CI, so we're able to improve

38
00:02:01,497 --> 00:02:06,740
the productivity of development teams by taking on that task that everyone here probably understands

39
00:02:06,740 --> 00:02:08,641
is kind of maybe a little tedious at times.

40
00:02:09,544 --> 00:02:16,027
But by having a dedicated engineer, which is not always the case, you're able to identify optimizations throughout the pipeline.

41
00:02:16,027 --> 00:02:21,390
And if you're lucky enough to do multiple iterations of a product or releases, you get better and better.

42
00:02:21,390 --> 00:02:26,393
And you start thinking of ideas by staying focused, not as a side job, but as a dedicated job.

43
00:02:28,973 --> 00:02:33,918
Now as far as I'd like to provide a little context on the team. Our team first started in Vancouver

44
00:02:33,918 --> 00:02:36,020
EA Sports, I've been in Vancouver for 11 years

45
00:02:36,020 --> 00:02:41,246
Eventually, we did all the builds for all the sports games and then over time the past 10 years

46
00:02:41,246 --> 00:02:49,574
Everyone kind of heard of us within the company and they started reaching out to our team and then we eventually started

47
00:02:50,945 --> 00:02:53,586
I guess, adopting and helping out other studios.

48
00:02:53,586 --> 00:02:55,347
So it's kind of a unique situation.

49
00:02:55,347 --> 00:02:58,508
We first started off as a team of 15 in Vancouver.

50
00:02:58,508 --> 00:03:01,770
We're now over 100 worldwide, just within the company,

51
00:03:01,770 --> 00:03:03,670
so it's kind of a unique situation.

52
00:03:03,670 --> 00:03:05,471
It's kind of a double-edged sword

53
00:03:05,471 --> 00:03:09,873
with this kind of expansion that we're lucky to have.

54
00:03:09,873 --> 00:03:12,554
By this, we were able to take over

55
00:03:12,554 --> 00:03:14,775
and inherit existing automation systems

56
00:03:14,775 --> 00:03:18,257
in different studios as EA acquired them,

57
00:03:18,257 --> 00:03:20,178
or at least they started reaching out to us.

58
00:03:20,979 --> 00:03:26,806
Through this, my team experienced rapid growth and some of the pain points, which was the

59
00:03:26,806 --> 00:03:28,668
technical debt that came with it.

60
00:03:28,668 --> 00:03:33,734
So a lot of these studios had custom CI solutions built around their game and their workflows.

61
00:03:33,734 --> 00:03:37,919
This was good for them, but also bad for sharing amongst all the different teams.

62
00:03:39,625 --> 00:03:46,369
So one of our strategies of our team was to actually adopt open source to help tackle

63
00:03:46,369 --> 00:03:48,310
this and help remove some of that technical debt.

64
00:03:48,310 --> 00:03:50,311
So that's why I'm up here.

65
00:03:50,311 --> 00:03:53,653
I'm trying to preach that adopting open source is okay for your CI system.

66
00:03:53,653 --> 00:03:58,436
It's probably the same thing to do, especially if you have to grow your team rapidly.

67
00:03:59,397 --> 00:04:02,157
I don't know about you, but games industry, we make games.

68
00:04:02,157 --> 00:04:04,238
We're not necessarily tech companies,

69
00:04:04,238 --> 00:04:05,378
so writing our own CI system,

70
00:04:05,378 --> 00:04:08,459
people on my team made that mistake in the past,

71
00:04:08,459 --> 00:04:12,341
and we were finally able to deprecate that,

72
00:04:12,341 --> 00:04:15,402
and now the majority of our company's running Jenkins.

73
00:04:15,402 --> 00:04:18,022
To give you a little scale,

74
00:04:18,022 --> 00:04:22,904
we have 200 plus Jenkins masters, over 2,000 build nodes,

75
00:04:22,904 --> 00:04:25,625
so that's a lot, a lot to handle.

76
00:04:25,625 --> 00:04:27,785
I'll go over ways how we can handle that,

77
00:04:28,198 --> 00:04:31,260
throughout this presentation.

78
00:04:31,260 --> 00:04:34,321
You know, if I were to ask any of you what the most important

79
00:04:34,321 --> 00:04:37,382
trait of automation is, most of you probably say speed,

80
00:04:37,382 --> 00:04:41,884
reliability, or flexibility. You're not wrong,

81
00:04:41,884 --> 00:04:43,445
but you know, I think it's everything combined.

82
00:04:43,445 --> 00:04:45,406
Good reporting.

83
00:04:46,440 --> 00:04:50,102
is a combination of reliability, speed and flexibility.

84
00:04:50,102 --> 00:04:51,302
If you don't have good reporting,

85
00:04:51,302 --> 00:04:53,763
nobody knows any of that because they don't get the results,

86
00:04:53,763 --> 00:04:55,543
they don't understand the results, they don't see it.

87
00:04:55,543 --> 00:04:58,664
So you definitely need to focus on that.

88
00:04:58,664 --> 00:05:00,145
Once you have good reporting,

89
00:05:00,145 --> 00:05:02,086
you can use that to help manage expectations.

90
00:05:02,086 --> 00:05:03,966
So for those of you that are

91
00:05:03,966 --> 00:05:05,927
administrating the build system,

92
00:05:05,927 --> 00:05:06,467
you'll probably...

93
00:05:07,187 --> 00:05:09,788
have to defend the system, the reliability,

94
00:05:09,788 --> 00:05:11,348
and as new people come on the team,

95
00:05:11,348 --> 00:05:12,388
they're always questioning,

96
00:05:12,388 --> 00:05:14,769
that's an automation error, right?

97
00:05:14,769 --> 00:05:16,669
And that gets really tedious to answer

98
00:05:16,669 --> 00:05:19,290
time and time again, so you wanna have good reporting

99
00:05:19,290 --> 00:05:20,770
to help manage those expectations.

100
00:05:20,770 --> 00:05:24,051
Once you have that, you can now focus

101
00:05:24,051 --> 00:05:25,931
on scaling your automation responsibly,

102
00:05:25,931 --> 00:05:28,151
because you can now see the stability of the system,

103
00:05:28,151 --> 00:05:29,852
people trust the results,

104
00:05:29,852 --> 00:05:32,372
and you spend less time talking about it and defending it,

105
00:05:32,372 --> 00:05:34,733
and everyone just sees the value of it.

106
00:05:36,765 --> 00:05:41,486
So since this is GDC, I decided to apply some reporting levels

107
00:05:41,486 --> 00:05:43,147
to what I'll be presenting a little later.

108
00:05:43,147 --> 00:05:46,168
So I kind of like applied the World of Warcraft leveling

109
00:05:46,168 --> 00:05:47,648
system to it.

110
00:05:47,648 --> 00:05:49,369
So when you have basic dashboards,

111
00:05:49,369 --> 00:05:50,789
I kind of call it level 60.

112
00:05:50,789 --> 00:05:53,110
That was when the game first came out for those that.

113
00:05:53,710 --> 00:05:55,271
weren't around then.

114
00:05:55,271 --> 00:05:59,412
And then as you add log parsing and a little bit of,

115
00:05:59,412 --> 00:06:01,372
I guess if you want to do machine learning and stuff like that,

116
00:06:01,372 --> 00:06:03,933
you start to get a little bit more intelligent reporting.

117
00:06:03,933 --> 00:06:05,953
And that's when you really get up to level 85.

118
00:06:05,953 --> 00:06:11,035
And then ultimately, when you start getting scalable reporting

119
00:06:11,035 --> 00:06:14,315
solutions, integrating BI tools or OI tools,

120
00:06:14,315 --> 00:06:18,837
I'll start going over that a little bit later.

121
00:06:20,670 --> 00:06:23,232
So first off, to start off with good reporting,

122
00:06:23,232 --> 00:06:25,553
I'm gonna cover four different areas.

123
00:06:25,553 --> 00:06:27,014
One is log levels.

124
00:06:27,014 --> 00:06:31,797
Another one is the default reporting features.

125
00:06:31,797 --> 00:06:36,380
And then ways to diversify the views that you have.

126
00:06:36,380 --> 00:06:40,983
And then also incorporating OI into your stack.

127
00:06:40,983 --> 00:06:45,386
So first off, to start with introducing log levels,

128
00:06:45,386 --> 00:06:48,688
you need to introduce log levels into your system

129
00:06:48,688 --> 00:06:49,629
because if you don't.

130
00:06:50,097 --> 00:06:52,179
your output's gonna be really, really bad,

131
00:06:52,179 --> 00:06:53,820
and it's gonna be really hard to read.

132
00:06:53,820 --> 00:06:57,323
It just compounds the noise problem of your system

133
00:06:57,323 --> 00:06:59,165
and any subsequent reporting,

134
00:06:59,165 --> 00:07:00,806
or things that you wanna do with it afterwards.

135
00:07:00,806 --> 00:07:03,948
So some of the things that you wanna do

136
00:07:03,948 --> 00:07:05,390
is introduce the log level.

137
00:07:05,390 --> 00:07:09,793
So for things like Log4Net or Gradle or Maven,

138
00:07:09,793 --> 00:07:13,116
all those things have ways to toggle the log levels,

139
00:07:13,116 --> 00:07:15,418
so I'd definitely look into that.

140
00:07:15,418 --> 00:07:16,238
For things like Unity,

141
00:07:16,238 --> 00:07:18,620
I'm a little less Unity-centric for me,

142
00:07:18,620 --> 00:07:18,700
so...

143
00:07:19,601 --> 00:07:22,444
Perhaps there's ways to do that, hopefully there are.

144
00:07:22,444 --> 00:07:24,547
If you do manage to reduce log noise,

145
00:07:24,547 --> 00:07:27,310
you can increase the performance of the system

146
00:07:27,310 --> 00:07:29,652
and you can ultimately have longer history retention,

147
00:07:29,652 --> 00:07:31,074
which everyone seems to love.

148
00:07:31,074 --> 00:07:33,477
Because when you have automation, you run a lot of it,

149
00:07:33,477 --> 00:07:35,219
everyone wants to go back in history

150
00:07:35,219 --> 00:07:37,261
to make sure things are running properly.

151
00:07:38,390 --> 00:07:39,691
Now that does have drawbacks.

152
00:07:39,691 --> 00:07:40,831
The drawbacks include, you know,

153
00:07:40,831 --> 00:07:42,673
you're increasing the complexity of your system

154
00:07:42,673 --> 00:07:43,953
by adding different logs.

155
00:07:43,953 --> 00:07:47,296
And usually, or sometimes in the rare cases actually,

156
00:07:47,296 --> 00:07:50,157
you don't have enough information.

157
00:07:50,157 --> 00:07:52,479
And then you're forced to actually incorporate toggles

158
00:07:52,479 --> 00:07:54,420
into your automation to then rerun it

159
00:07:54,420 --> 00:07:56,301
and output more information

160
00:07:56,301 --> 00:07:58,763
so that you can rerun it effectively.

161
00:07:58,763 --> 00:08:02,345
The second one of the things I recommend

162
00:08:02,345 --> 00:08:05,027
is leverage the default reporting features

163
00:08:05,027 --> 00:08:07,528
for this talk, Jenkins.

164
00:08:07,854 --> 00:08:09,015
You should leverage it.

165
00:08:09,015 --> 00:08:10,856
So I'm going to start at the lowest level.

166
00:08:10,856 --> 00:08:14,137
So when I talk about configs, I think I use the Unity naming

167
00:08:14,137 --> 00:08:14,938
conventions here.

168
00:08:14,938 --> 00:08:18,139
But you master release, debug, different code compile

169
00:08:18,139 --> 00:08:19,260
configurations.

170
00:08:19,260 --> 00:08:21,801
You want to have separate jobs for each one, actually.

171
00:08:21,801 --> 00:08:23,602
And I'll go over that a little bit more.

172
00:08:24,924 --> 00:08:27,446
Then you add, you start incorporating regions.

173
00:08:27,446 --> 00:08:29,827
For those of you that have multiple regions or SKUs,

174
00:08:29,827 --> 00:08:31,428
you want to add another layer on top of that

175
00:08:31,428 --> 00:08:34,830
and then have those kind of chain the jobs underneath.

176
00:08:34,830 --> 00:08:36,851
And then, you know, if you support multi-platform,

177
00:08:36,851 --> 00:08:38,092
well, this is just an example,

178
00:08:38,092 --> 00:08:42,054
but you then start adding projects or schedulers

179
00:08:42,054 --> 00:08:42,775
for that within Jenkins.

180
00:08:42,775 --> 00:08:44,056
So these jobs are nothing but shell jobs

181
00:08:44,056 --> 00:08:47,118
that trigger things and help summarize the results.

182
00:08:47,658 --> 00:08:49,478
And then at the end of the day,

183
00:08:49,478 --> 00:08:51,599
if you're doing multiple branches or streams,

184
00:08:51,599 --> 00:08:55,380
whatever source control system you use,

185
00:08:55,380 --> 00:08:56,461
you add one level for that,

186
00:08:56,461 --> 00:09:00,102
and then this kind of gives you the layer architecture

187
00:09:00,102 --> 00:09:02,623
for reporting that you'll be able to leverage later on.

188
00:09:02,623 --> 00:09:04,564
It also gives you vertical silos too,

189
00:09:04,564 --> 00:09:07,745
so if you want to look at the specific configurations,

190
00:09:07,745 --> 00:09:10,186
you still have the freedom to do so.

191
00:09:10,186 --> 00:09:15,127
This is important to keep your automation levels modular

192
00:09:15,127 --> 00:09:16,908
so that you can leverage it later on.

193
00:09:18,623 --> 00:09:23,749
Now, once you have that, I break down views into two different types.

194
00:09:23,749 --> 00:09:26,973
One will be the dashboards, and another one will be direct feedback.

195
00:09:28,975 --> 00:09:31,116
Once you've applied that layer concept,

196
00:09:31,116 --> 00:09:33,236
you can start diversifying your views into these sections.

197
00:09:33,236 --> 00:09:36,237
Because at the end of the day,

198
00:09:36,237 --> 00:09:37,637
what a QA manager wants to see,

199
00:09:37,637 --> 00:09:40,238
what an engineer wants to see, or a producer,

200
00:09:40,238 --> 00:09:41,298
they're all gonna be different.

201
00:09:41,298 --> 00:09:43,579
And in the past, my team tried to design

202
00:09:43,579 --> 00:09:45,819
an automation system that satisfied everyone

203
00:09:45,819 --> 00:09:47,400
at the same time, and that was horrible.

204
00:09:47,400 --> 00:09:50,100
Some people were happy, there's always unhappy people.

205
00:09:50,100 --> 00:09:52,961
So you want to actually break that out.

206
00:09:52,961 --> 00:09:55,241
And for us, we actually broke out our dashboards

207
00:09:55,241 --> 00:09:57,202
into primarily two points.

208
00:09:57,202 --> 00:09:58,162
One for job overview,

209
00:09:58,162 --> 00:09:58,862
so you look at.

210
00:09:59,403 --> 00:10:03,106
all that job reporting at a massive scale on a dashboard of some sort.

211
00:10:03,106 --> 00:10:06,750
And then second of all, you want to add health monitoring to your system.

212
00:10:06,750 --> 00:10:10,833
As your system grows, you want to make sure that it's in good shape

213
00:10:10,833 --> 00:10:15,358
and that it will continue to run. Now for direct feedback for the engineers, for the content

214
00:10:15,358 --> 00:10:16,659
creators, for all that stuff.

215
00:10:17,414 --> 00:10:20,756
We basically set apart three different ways.

216
00:10:20,756 --> 00:10:22,817
Primary ways, Slack is one of them.

217
00:10:22,817 --> 00:10:25,818
Setting up dedicated Slack channels is useful.

218
00:10:25,818 --> 00:10:27,179
I'll go more into later.

219
00:10:27,179 --> 00:10:30,341
Then email, of course, everyone's used to email.

220
00:10:30,341 --> 00:10:32,342
People hate to spam, but I'll go into ways

221
00:10:32,342 --> 00:10:34,343
where you can control some of that later.

222
00:10:34,343 --> 00:10:36,665
And then incorporating log parsers

223
00:10:36,665 --> 00:10:38,566
so that you don't have to manually debug

224
00:10:38,566 --> 00:10:39,906
automation failures as much.

225
00:10:42,348 --> 00:10:45,411
So first off, going into immediately an example,

226
00:10:45,411 --> 00:10:48,134
open source plugin called the Extra Columns plugin.

227
00:10:48,134 --> 00:10:50,196
I highly recommend it.

228
00:10:50,196 --> 00:10:52,419
We use it for, it's useful for build engineers.

229
00:10:52,419 --> 00:10:55,862
In this case, I've obfuscated some of the information,

230
00:10:55,862 --> 00:10:57,144
but the job information's there.

231
00:10:57,144 --> 00:11:01,108
So the interesting columns that you can add immediately are

232
00:11:01,508 --> 00:11:04,491
the console output plugin or the icon actually.

233
00:11:04,491 --> 00:11:06,552
So instead of doing a traditional click,

234
00:11:06,552 --> 00:11:08,173
you just click there and it jumps straight

235
00:11:08,173 --> 00:11:10,175
to the console output and saves you extra clicks.

236
00:11:10,175 --> 00:11:11,876
Then you have this neat little field

237
00:11:11,876 --> 00:11:15,519
that you can also expose and actually dynamically populate

238
00:11:15,519 --> 00:11:17,020
with your Groovy.

239
00:11:17,620 --> 00:11:23,064
In this case, we use it to highlight a link to a network share with published builds or published artifacts.

240
00:11:23,064 --> 00:11:27,006
And then one that's really useful for build administrators is the slave allocation.

241
00:11:27,006 --> 00:11:33,290
So for those of you that do incremental builds and you want to hard allocate or dedicate machines to specific jobs,

242
00:11:33,290 --> 00:11:40,134
this is really useful because you know immediately which job is run on which machine if there's a problem.

243
00:11:40,134 --> 00:11:42,135
So it's really useful for an administrator.

244
00:11:43,067 --> 00:11:46,210
Now the second one that is also open source

245
00:11:46,210 --> 00:11:47,691
is the Build Monitor plugin.

246
00:11:47,691 --> 00:11:52,014
So this is a lot of information, but it's good.

247
00:11:52,014 --> 00:11:56,157
So we use these actually on TVs all around the studio

248
00:11:56,157 --> 00:11:56,858
and people's desks.

249
00:11:56,858 --> 00:11:58,679
They can cycle through it.

250
00:11:58,679 --> 00:12:01,822
I use it with a combination of Chrome Revolver plugin

251
00:12:01,822 --> 00:12:04,984
or Chrome extension to revolve around different tabs.

252
00:12:05,805 --> 00:12:11,311
And for each tab, this is actually reporting off automation for one particular stream.

253
00:12:11,311 --> 00:12:13,533
So if you have a lot of streams, you set up one for each one.

254
00:12:13,533 --> 00:12:15,976
The text is highly configurable.

255
00:12:15,976 --> 00:12:19,639
In this case, you can see the job names are really bold.

256
00:12:19,639 --> 00:12:20,941
You can change the text size.

257
00:12:20,941 --> 00:12:24,444
The bright green is actually showing a build running.

258
00:12:24,444 --> 00:12:26,066
This is, of course, a screenshot.

259
00:12:26,433 --> 00:12:28,655
And at the bottom, you'll notice that there's actually

260
00:12:28,655 --> 00:12:30,657
failures and it shows up red.

261
00:12:30,657 --> 00:12:32,459
Now my team has modified this slightly,

262
00:12:32,459 --> 00:12:35,082
but we haven't committed the changes back to open source.

263
00:12:35,082 --> 00:12:39,306
So apologies so far, but we incorporated the ability

264
00:12:39,306 --> 00:12:41,488
to interpret the log parsing results.

265
00:12:41,488 --> 00:12:43,751
So change the color for automation failure to be yellow,

266
00:12:43,751 --> 00:12:45,553
which isn't shown here, unfortunately.

267
00:12:46,313 --> 00:12:47,454
But at the bottom of the red, if you can't see,

268
00:12:47,454 --> 00:12:50,156
it actually shows that there's end unit test failures,

269
00:12:50,156 --> 00:12:53,118
and that actually gives you a reason.

270
00:12:53,118 --> 00:12:55,380
It also shows you who committed to that build,

271
00:12:55,380 --> 00:12:58,942
so you can actually shame people if you want to.

272
00:12:58,942 --> 00:13:00,683
So you don't have to be a build cop,

273
00:13:00,683 --> 00:13:03,105
the system can do it for you.

274
00:13:03,105 --> 00:13:05,647
Next, moving on, Jenkins Master Health.

275
00:13:05,647 --> 00:13:07,768
So monitoring Jenkins Master Health,

276
00:13:07,768 --> 00:13:09,249
no matter how many masters you have,

277
00:13:09,249 --> 00:13:10,530
is very, very important,

278
00:13:10,530 --> 00:13:12,632
and especially when you're adopting different plugins.

279
00:13:13,832 --> 00:13:16,894
We actually use four different methods.

280
00:13:16,894 --> 00:13:17,975
So I'm just going over the stack.

281
00:13:17,975 --> 00:13:19,696
So for Jenkins, the application,

282
00:13:19,696 --> 00:13:22,839
we use the monitoring plugin, which is open source.

283
00:13:22,839 --> 00:13:24,240
We also use the Splunk plugin.

284
00:13:24,240 --> 00:13:25,321
I'll go into some of these,

285
00:13:25,321 --> 00:13:27,663
or actually all of these in more detail later on.

286
00:13:27,663 --> 00:13:28,883
Then at a different level,

287
00:13:28,883 --> 00:13:31,285
on the operating system level, we use Zabbix.

288
00:13:32,046 --> 00:13:34,128
You can use anything else you'd like there.

289
00:13:34,128 --> 00:13:37,311
And then for the hypervisor level, we use VMware.

290
00:13:37,311 --> 00:13:41,475
So as you can see, we have multiple layers of monitoring.

291
00:13:41,475 --> 00:13:43,017
So in case the Jenkins application

292
00:13:43,017 --> 00:13:46,020
becomes unresponsive, we can go down to the next lowest level.

293
00:13:46,020 --> 00:13:49,903
We have many different levels to go.

294
00:13:49,903 --> 00:13:51,945
Now, the first one, the monitoring plugin,

295
00:13:51,945 --> 00:13:53,767
this is actually my favorite screenshot.

296
00:13:53,767 --> 00:13:54,868
It's a section of it.

297
00:13:56,047 --> 00:14:02,092
Through this you can actually see the RAM usage and the system usage, the CPU usage.

298
00:14:02,092 --> 00:14:04,194
There's 22 or more charts that you can actually look at.

299
00:14:04,194 --> 00:14:08,178
I won't show you all the screenshots to save time, but it's really powerful.

300
00:14:08,178 --> 00:14:11,642
It takes all of like five seconds to install and configure.

301
00:14:11,642 --> 00:14:16,386
There's no extra work that you need to do, but it gives you a heap of information just

302
00:14:16,386 --> 00:14:16,827
for free, really.

303
00:14:16,827 --> 00:14:18,568
It uses the Java melody.

304
00:14:19,040 --> 00:14:20,441
on the background or underneath.

305
00:14:20,441 --> 00:14:22,943
You can actually trigger your heap dumps.

306
00:14:22,943 --> 00:14:24,765
So in case of all you guys

307
00:14:24,765 --> 00:14:27,527
installing different Jenkins plugins

308
00:14:27,527 --> 00:14:29,188
and you're having problems running on memory,

309
00:14:29,188 --> 00:14:30,750
you can do heap dumps and trigger it

310
00:14:30,750 --> 00:14:33,071
and then analyze it after the fact, if you'd like.

311
00:14:34,150 --> 00:14:40,253
We made a lot of mistakes in the past, so that was actually really useful as we started to adopt Jenkins three, four years ago.

312
00:14:40,253 --> 00:14:42,515
It helped us tremendously.

313
00:14:42,515 --> 00:14:47,897
Now, at the OS level monitoring, this is just some screenshots of the Zabbix alerts that come up.

314
00:14:47,897 --> 00:14:53,761
So, all these alerts are reactive, so they're just responding to actual events that happen.

315
00:14:53,761 --> 00:14:56,382
They're not ideal, but they're a good place to start.

316
00:14:57,483 --> 00:15:01,948
And then of course you can also get performance metrics in this case. It's a CPU utilization

317
00:15:01,948 --> 00:15:07,375
So if the Jenkins monitoring plugin which is rendered through Jenkins is unavailable

318
00:15:07,375 --> 00:15:13,803
You can fall back to something like Zabbix and the history and actually go through things that way to identify any

319
00:15:13,803 --> 00:15:14,624
performance impact

320
00:15:16,550 --> 00:15:22,053
Now at the hypervisor level, we're lucky enough to use VMware, so we're able to actually go

321
00:15:22,053 --> 00:15:26,515
and use the VMware monitoring or the performance monitoring in vCenter or vSphere.

322
00:15:26,515 --> 00:15:30,117
This is a screen grab of some of the information.

323
00:15:30,918 --> 00:15:34,921
This information is really granular, which is good if you want really quick feedback,

324
00:15:34,921 --> 00:15:37,062
but each of the systems I show has different...

325
00:15:37,062 --> 00:15:40,225
We configure different log or history retention,

326
00:15:40,225 --> 00:15:43,927
so the level of detail is a lot smaller in this one,

327
00:15:43,927 --> 00:15:47,010
so you can get real-time, really good feedback from this one.

328
00:15:47,010 --> 00:15:51,073
At the hypervisor level monitoring, you can actually look at individual CPU usage as well,

329
00:15:51,073 --> 00:15:53,294
for those that aren't aware,

330
00:15:53,294 --> 00:15:57,357
whereas Zabbix and the Jenkins Monitoring plugin will look at the OS level,

331
00:15:57,357 --> 00:16:00,219
so it's aggregated CPU usage, so if you want more information...

332
00:16:00,660 --> 00:16:05,001
you can get it through the hypervisor.

333
00:16:05,001 --> 00:16:07,962
Now, moving on to the direct, I guess,

334
00:16:07,962 --> 00:16:11,103
the direct notification, specifically Slack plugin.

335
00:16:11,103 --> 00:16:14,104
This is, of course, open source, a common theme.

336
00:16:15,767 --> 00:16:16,929
So this is a use case.

337
00:16:16,929 --> 00:16:19,492
I think some of the talks earlier went about this

338
00:16:19,492 --> 00:16:20,953
for the LiveOps and stuff like that.

339
00:16:20,953 --> 00:16:23,737
But if you hook up specific deploy jobs in Jenkins

340
00:16:23,737 --> 00:16:26,019
and stuff like that, you can post to a Slack channel

341
00:16:26,019 --> 00:16:27,781
and then people, the LiveOps team or QA or whatnot

342
00:16:27,781 --> 00:16:29,583
can actually monitor it.

343
00:16:29,583 --> 00:16:32,787
So instead of having email all the time, you can use that.

344
00:16:33,387 --> 00:16:35,208
and actually disable your emails for that.

345
00:16:35,208 --> 00:16:37,069
You can have both, it's all configurable, right?

346
00:16:37,069 --> 00:16:39,751
So I'd highly recommend it for those that use Slack

347
00:16:39,751 --> 00:16:41,192
to actually start doing this,

348
00:16:41,192 --> 00:16:42,833
and then that way you can start shrinking

349
00:16:42,833 --> 00:16:45,794
some of the email noise that comes into your inbox.

350
00:16:45,794 --> 00:16:49,416
Creating multiple channels is also recommended.

351
00:16:49,416 --> 00:16:50,737
Now for the job summary plugin,

352
00:16:50,737 --> 00:16:54,119
this is the one of the few plugins we've actually written.

353
00:16:54,119 --> 00:16:54,699
This is actually,

354
00:16:56,730 --> 00:16:59,434
This is actually derived from the email extension plugin,

355
00:16:59,434 --> 00:17:01,396
which I'll go over shortly.

356
00:17:01,396 --> 00:17:04,940
So in this one, it's a lot of information, but it's good

357
00:17:04,940 --> 00:17:05,701
information.

358
00:17:06,659 --> 00:17:09,682
A majority of our Jenkins don't actually use pipeline yet,

359
00:17:09,682 --> 00:17:11,343
so we were using Buildflow.

360
00:17:11,343 --> 00:17:13,805
And with Buildflow, we used a step,

361
00:17:13,805 --> 00:17:17,228
we were migrating from different CI systems in the past,

362
00:17:17,228 --> 00:17:20,051
and we liked the concept of steps or stages

363
00:17:20,051 --> 00:17:21,512
before pipeline existed.

364
00:17:21,512 --> 00:17:23,133
We already had it.

365
00:17:23,133 --> 00:17:24,735
The middle section, I think,

366
00:17:24,735 --> 00:17:27,477
well, actually, it has a link, so it's an optional view,

367
00:17:27,477 --> 00:17:28,418
so you install a plugin,

368
00:17:28,418 --> 00:17:30,780
it gives you an optional view in Jenkins.

369
00:17:30,780 --> 00:17:32,541
And then this middle section here.

370
00:17:33,999 --> 00:17:37,101
actually goes over, details all the steps underneath.

371
00:17:37,101 --> 00:17:39,162
So I showed you the layer architecture before.

372
00:17:39,162 --> 00:17:42,003
This is kind of grouping and distilling that in one place.

373
00:17:42,003 --> 00:17:45,164
And you can immediately see via the log parser,

374
00:17:45,164 --> 00:17:46,725
which I'll go over later,

375
00:17:46,725 --> 00:17:48,306
you can, it highlights the failure

376
00:17:48,306 --> 00:17:50,187
and shows you what the failure is in that view.

377
00:17:51,467 --> 00:17:55,090
And then it also shows you the detected output or the errors.

378
00:17:55,090 --> 00:17:57,291
And it also shows you an icon on the side as well.

379
00:17:57,291 --> 00:18:00,013
So we started playing not really a blame game,

380
00:18:00,013 --> 00:18:03,075
but made it more obvious that it was a game error.

381
00:18:03,075 --> 00:18:03,936
So we put a joystick.

382
00:18:03,936 --> 00:18:06,238
So if there's a game team compile error or something

383
00:18:06,238 --> 00:18:07,498
like that, it would appear right away.

384
00:18:07,498 --> 00:18:09,760
So people know if they're looking natively at Jenkins

385
00:18:09,760 --> 00:18:14,183
that it's a specific team's fault, really.

386
00:18:15,752 --> 00:18:17,913
Now, the log parser we use, we chose to use

387
00:18:17,913 --> 00:18:19,314
the build failure analyzer plugin.

388
00:18:19,314 --> 00:18:20,895
There's a lot of different plugins out there

389
00:18:20,895 --> 00:18:23,916
that you can leverage that's open source that you can use.

390
00:18:23,916 --> 00:18:25,577
Oh, sorry, let me go back.

391
00:18:25,577 --> 00:18:27,739
This one's actually a popular one with us

392
00:18:27,739 --> 00:18:29,140
because of our scale.

393
00:18:29,140 --> 00:18:33,382
It was one of the few plugins that allowed us

394
00:18:33,382 --> 00:18:35,283
to use a GUI to actually edit it,

395
00:18:35,283 --> 00:18:36,924
and actually you can actually connect it

396
00:18:36,924 --> 00:18:38,865
to a MongoDB on the backend,

397
00:18:38,865 --> 00:18:41,887
and then therefore when you're any Jenkins master,

398
00:18:41,887 --> 00:18:44,749
anybody can add a failure cause, it's regex-based.

399
00:18:45,549 --> 00:18:52,731
It would then post the essential MongoDB, which we have multiple instances of in terms of to track the information.

400
00:18:52,731 --> 00:18:56,432
We did some modifications to this plugin to make it a little bit more

401
00:18:56,432 --> 00:19:02,714
optimized for our scale because we ran into scaling issues. It was probably the only plugin that ever caused us problems on Jenkins.

402
00:19:02,714 --> 00:19:09,096
We were running like 64 gigs of RAM on some of our Jenkins and when you're log parsing and you have really ugly logs,

403
00:19:09,096 --> 00:19:09,696
or a lot of it,

404
00:19:10,346 --> 00:19:11,907
it will chew up through a lot of RAM.

405
00:19:11,907 --> 00:19:15,689
So that's just a lesson for everyone to be aware of.

406
00:19:15,689 --> 00:19:18,290
But this is really useful in sharing it,

407
00:19:18,290 --> 00:19:21,832
and it's probably the biggest game changer

408
00:19:21,832 --> 00:19:24,413
of our plugin for Jenkins, or any log parser really,

409
00:19:24,413 --> 00:19:28,215
because we went from debugging things manually

410
00:19:28,215 --> 00:19:30,476
to just using this, and then just adding failure causes,

411
00:19:30,476 --> 00:19:33,277
and then basically just manually tweaking it

412
00:19:33,277 --> 00:19:35,758
and training it with different regexes,

413
00:19:35,758 --> 00:19:38,580
and we're able to share this across the entire organization.

414
00:19:40,326 --> 00:19:43,327
Now the email extension plugin, which I mentioned briefly,

415
00:19:43,327 --> 00:19:45,288
if you guys ever were lucky enough,

416
00:19:45,288 --> 00:19:47,649
I say lucky with the most sarcastic terms,

417
00:19:47,649 --> 00:19:51,491
this is the default failure email that you get with Jenkins.

418
00:19:51,491 --> 00:19:54,092
It's all text-based, it has links,

419
00:19:54,092 --> 00:19:55,193
and I did a Hello World,

420
00:19:55,193 --> 00:19:57,654
and I assume if you have a lot of output,

421
00:19:57,654 --> 00:20:00,035
it emailed you the entire contents of the output.

422
00:20:00,396 --> 00:20:02,880
which would be horrible for very large games.

423
00:20:02,880 --> 00:20:08,308
And then subsequently, when the failed build succeeds,

424
00:20:08,308 --> 00:20:12,034
you get this really, really useful email with a link.

425
00:20:12,034 --> 00:20:14,979
So it's not really ideal, so what we actually did was...

426
00:20:15,397 --> 00:20:20,583
In the email extension plugin you can configure much better notifications for different culprits

427
00:20:20,583 --> 00:20:21,884
and stuff like that.

428
00:20:21,884 --> 00:20:26,270
We configure a lot of rules so I'd recommend that.

429
00:20:26,270 --> 00:20:31,736
And then I didn't mention before about the job summary plugin but we actually use...

430
00:20:33,243 --> 00:20:35,545
a Groovy script to generate the content.

431
00:20:35,545 --> 00:20:37,326
So the exact same Groovy script is used

432
00:20:37,326 --> 00:20:40,609
to generate the email content, so it looks exactly the same.

433
00:20:40,609 --> 00:20:43,872
Well, a few caveats, but at the same time,

434
00:20:43,872 --> 00:20:47,495
one would ask if you send emails to different culprits

435
00:20:47,495 --> 00:20:50,697
and stuff like that, do you have customized emails?

436
00:20:50,697 --> 00:20:52,419
Yes, we do, because it's Groovy-based,

437
00:20:52,419 --> 00:20:53,680
you can then just condition it to send out

438
00:20:53,680 --> 00:20:54,901
different chunks to different people

439
00:20:54,901 --> 00:20:56,162
and different audiences.

440
00:20:56,162 --> 00:20:57,703
This is just one example.

441
00:21:00,415 --> 00:21:03,097
Now, and then following that, the failure email

442
00:21:03,097 --> 00:21:05,739
is also just as useful, or I guess it's improved.

443
00:21:05,739 --> 00:21:08,001
It actually shows you the changelist

444
00:21:08,001 --> 00:21:10,423
that went into the build that made it pass again,

445
00:21:10,423 --> 00:21:13,045
so you can actually verify without having to click

446
00:21:13,045 --> 00:21:14,766
anywhere else, which saves everyone time.

447
00:21:14,766 --> 00:21:16,848
And of course, this is only sent to the people

448
00:21:16,848 --> 00:21:19,250
that contributed to the build, so it's not gonna add,

449
00:21:19,250 --> 00:21:20,571
it's not gonna be noisy for everyone.

450
00:21:20,571 --> 00:21:25,375
And then, yes, the changelist, I've hidden the names

451
00:21:25,375 --> 00:21:29,058
for, you know, to protect people.

452
00:21:30,203 --> 00:21:35,536
The part I get really excited about is the operational intelligence portion of this talk

453
00:21:35,536 --> 00:21:37,761
and the pros and cons of it.

454
00:21:38,607 --> 00:21:44,651
The scalability of it, so the way we were able to report over 200 plus Jenkins masters

455
00:21:44,651 --> 00:21:49,214
or at least a report across them, we had to incorporate something that was better.

456
00:21:49,214 --> 00:21:50,875
We didn't write anything ourselves.

457
00:21:50,875 --> 00:21:55,858
I'll show you a little bit later, but it enables you to debug the issues faster because now

458
00:21:55,858 --> 00:22:00,681
you can search across multiple masters, all your job logs, you're not stuck opening tabs

459
00:22:00,681 --> 00:22:02,142
and tabs and tabs and scrolling.

460
00:22:03,532 --> 00:22:04,332
you know, that's really bad.

461
00:22:04,332 --> 00:22:05,773
I did in the past, I learned from it.

462
00:22:05,773 --> 00:22:09,914
It gives you greater extensibility because you're now,

463
00:22:09,914 --> 00:22:12,055
it gives you options to decouple the reporting stack

464
00:22:12,055 --> 00:22:13,876
from your actual automation system

465
00:22:13,876 --> 00:22:15,817
so that you don't have to have people looking at Jenkins

466
00:22:15,817 --> 00:22:16,997
if they don't have to.

467
00:22:16,997 --> 00:22:20,219
It enables you to do metrics-driven decisions

468
00:22:20,219 --> 00:22:21,719
in your CI system.

469
00:22:21,719 --> 00:22:24,100
And also definitely helps manage expectations,

470
00:22:24,100 --> 00:22:27,542
which ultimately gives everyone administering Jenkins

471
00:22:27,542 --> 00:22:28,722
a lot more time back

472
00:22:28,722 --> 00:22:30,883
when you don't have to have those lengthy conversations

473
00:22:30,883 --> 00:22:32,444
with every person that doubts it.

474
00:22:32,944 --> 00:22:42,852
And then the cons of course are you, similar to the other ones, you have increased complexity and increased maintenance because now you have another stack to maintain.

475
00:22:42,852 --> 00:22:45,474
But I think the pros far outweigh the cons in this situation.

476
00:22:45,474 --> 00:22:54,582
And I guess for those that don't know what operational intelligence is, it's basically tools that help make sense of large sets of data.

477
00:22:54,582 --> 00:22:59,065
It aggregates log information and makes it searchable by indexing.

478
00:23:02,823 --> 00:23:05,067
And then I'll go into how the reporting stack

479
00:23:05,067 --> 00:23:07,872
kind of changes because of it as you incorporate it.

480
00:23:07,872 --> 00:23:10,236
So you can see the familiar Zabbix and VMware layers.

481
00:23:11,983 --> 00:23:14,603
I went over the Build Failure Analyzer plugin,

482
00:23:14,603 --> 00:23:17,044
and then it connects to a Mongo database.

483
00:23:17,044 --> 00:23:20,585
The Logstash plugin, which is also open source,

484
00:23:20,585 --> 00:23:23,346
we use that to actually inject information from Jenkins

485
00:23:23,346 --> 00:23:26,567
into Elasticsearch cluster, that's on-prem for us.

486
00:23:26,567 --> 00:23:30,408
And then I mentioned earlier the Splunk plugin as well.

487
00:23:30,408 --> 00:23:33,008
So the Splunk plugin, I'll go into more detail later on.

488
00:23:33,929 --> 00:23:36,671
Elastic is free, it's free to use and open source.

489
00:23:36,671 --> 00:23:40,214
They have enterprise options just like Jenkins does as well.

490
00:23:40,214 --> 00:23:42,376
So we use it primarily because it's free.

491
00:23:42,376 --> 00:23:45,678
The Splunk, we have a limited license,

492
00:23:45,678 --> 00:23:48,020
so we use that as much as we can.

493
00:23:48,020 --> 00:23:49,722
I'll go into reasons why later.

494
00:23:49,722 --> 00:23:52,604
But we don't set it on one, and I think that's a key thing

495
00:23:52,604 --> 00:23:54,286
is never to really set it on one if you don't have to.

496
00:23:54,286 --> 00:23:55,807
They have different benefits for each one.

497
00:23:55,807 --> 00:23:56,948
Now, while incorporating OI tools,

498
00:24:01,690 --> 00:24:08,416
makes things easier. People often underestimate the effort to generate the reports afterwards.

499
00:24:08,416 --> 00:24:14,581
So it's very similar to safe programming. If you don't sort your data, you're going

500
00:24:14,581 --> 00:24:18,264
to have to load problems writing things that handle the data afterwards.

501
00:24:19,814 --> 00:24:22,796
The layer architecture, all that stuff I went before,

502
00:24:22,796 --> 00:24:24,457
you need to add something to it.

503
00:24:24,457 --> 00:24:26,959
You need to actually define job naming conventions

504
00:24:26,959 --> 00:24:28,920
across all your Jenkins masters.

505
00:24:28,920 --> 00:24:30,821
You know, I kind of set on something like this,

506
00:24:30,821 --> 00:24:32,703
so depending on the complexity of your studio,

507
00:24:32,703 --> 00:24:35,385
we have different projects, we call them titles.

508
00:24:35,385 --> 00:24:37,506
You have different studios, you have branches,

509
00:24:37,506 --> 00:24:39,427
platforms, automation type in this case

510
00:24:39,427 --> 00:24:42,870
is gonna be like a test or a build or a deploy.

511
00:24:43,290 --> 00:24:47,732
and then you have regions and configs. When you do that, some of it can seem very tedious,

512
00:24:47,732 --> 00:24:51,033
but it'll all make sense when you actually generate the reports later on in your systems.

513
00:24:51,033 --> 00:24:56,736
You definitely need to define an infrastructure naming convention if you don't already have one,

514
00:24:56,736 --> 00:24:58,577
because you need to know where things are running.

515
00:24:58,577 --> 00:25:02,398
If you have multiple studios around the world and you don't name it separately,

516
00:25:02,398 --> 00:25:06,720
it just makes, even if you report on it, it would make no sense.

517
00:25:07,715 --> 00:25:09,556
Apply the layer concept I mentioned earlier.

518
00:25:09,556 --> 00:25:12,538
So I gave some examples in terms of some of the names we have.

519
00:25:12,538 --> 00:25:14,820
Mainline, so ML, all skew triggers.

520
00:25:14,820 --> 00:25:16,762
So it's just a trigger project.

521
00:25:16,762 --> 00:25:19,084
It has no real logic underneath other than chaining it

522
00:25:19,084 --> 00:25:21,505
to a bunch of other jobs.

523
00:25:21,505 --> 00:25:23,727
You can do this a lot easier in pipeline now.

524
00:25:23,727 --> 00:25:25,409
But we did in Buildflow.

525
00:25:25,409 --> 00:25:26,529
We don't have to use Buildflow.

526
00:25:26,529 --> 00:25:28,111
You can do it freestyle as well if you'd like.

527
00:25:28,111 --> 00:25:30,092
But that's definitely very important.

528
00:25:31,188 --> 00:25:35,432
When you do that, you can then report at any one of those levels, and that's really useful

529
00:25:35,432 --> 00:25:39,357
to create those different visualizations I mentioned earlier for all the different audiences.

530
00:25:41,239 --> 00:25:44,599
Now, the Logs-plugin, as I mentioned earlier,

531
00:25:44,599 --> 00:25:45,740
it goes into Elastic.

532
00:25:45,740 --> 00:25:47,880
The configuration's really easy.

533
00:25:47,880 --> 00:25:49,080
It's about five lines.

534
00:25:49,080 --> 00:25:53,701
As long as you have a cluster set up, that's basically it.

535
00:25:53,701 --> 00:25:56,262
And then, there's another step afterwards.

536
00:25:56,262 --> 00:25:58,763
You can configure, you have to add a post-build step

537
00:25:58,763 --> 00:25:59,303
to each thing.

538
00:25:59,303 --> 00:26:02,123
There are scripts available online to just mass add it

539
00:26:02,123 --> 00:26:04,624
to the Jenkins script console, so it's really easy.

540
00:26:04,624 --> 00:26:07,505
If you want to just mass log every single build log

541
00:26:07,505 --> 00:26:10,125
of all your Jenkins jobs in a master, you can do that.

542
00:26:11,406 --> 00:26:13,889
And then this is the post-build step.

543
00:26:13,889 --> 00:26:15,350
You can specify how many lines.

544
00:26:15,350 --> 00:26:17,032
So you don't have to do all of them.

545
00:26:17,032 --> 00:26:17,613
You can do a tail.

546
00:26:17,613 --> 00:26:18,874
So in this case, it's I think 4,000 lines,

547
00:26:18,874 --> 00:26:21,177
which is usually way more than enough.

548
00:26:21,177 --> 00:26:27,924
And then this example is for all those people in this room

549
00:26:27,924 --> 00:26:29,706
that's encountered random compile errors

550
00:26:29,706 --> 00:26:31,648
in an automation system.

551
00:26:33,447 --> 00:26:36,708
I don't know about you, but if you had to debug that and track that and tally that up

552
00:26:36,708 --> 00:26:41,110
manually that would be really hard and really no one would want to do it.

553
00:26:41,110 --> 00:26:46,011
In this case we used, we shoved everything in Elasticsearch and one of our engineers

554
00:26:46,011 --> 00:26:47,472
created a graph.

555
00:26:47,472 --> 00:26:51,533
So the top graphs denote the frequency of the errors that happen off a particular search

556
00:26:51,533 --> 00:26:51,873
string.

557
00:26:53,740 --> 00:26:57,704
And then the bottom charts kind of give you a visualization

558
00:26:57,704 --> 00:27:00,826
how widespread the problem is.

559
00:27:00,826 --> 00:27:02,427
So once you know how many occurrences

560
00:27:02,427 --> 00:27:03,929
are happening from the top charts,

561
00:27:03,929 --> 00:27:06,170
you can kind of focus it a little bit more.

562
00:27:06,170 --> 00:27:10,894
So the inner pie is graphing how many Jenkins masters

563
00:27:10,894 --> 00:27:13,016
this problem is having, or it appears on.

564
00:27:13,016 --> 00:27:16,839
So in this case, I think it was like five from this graph.

565
00:27:16,839 --> 00:27:19,221
And then the other one, this.

566
00:27:19,541 --> 00:27:24,102
Secondary layer of power chart denotes what kind of Jenkins jobs it's been seeing this failure

567
00:27:24,102 --> 00:27:29,084
So not only do you have the master you have the jobs that they're occurring on and the frequency

568
00:27:29,084 --> 00:27:32,325
And then the last one is the specific steps, I think

569
00:27:32,325 --> 00:27:34,345
So or no, sorry the nodes the build nodes

570
00:27:34,345 --> 00:27:41,487
So you can actually find out all that information just from this just by shoving your information in and then doing a search

571
00:27:41,487 --> 00:27:46,168
in this case the random compiler error was caused by

572
00:27:46,168 --> 00:27:47,729
antivirus locking

573
00:27:48,529 --> 00:27:49,990
files on the build machines.

574
00:27:49,990 --> 00:27:52,931
So I'm sure everyone's sort of encountered that,

575
00:27:52,931 --> 00:27:53,631
and it's painful.

576
00:27:53,631 --> 00:27:56,633
Well, in this case, you're able to use metrics and reports

577
00:27:56,633 --> 00:27:59,014
to actually prove that it's a problem to people

578
00:27:59,014 --> 00:28:00,734
that control it.

579
00:28:00,734 --> 00:28:03,216
It's able to help identify which build nodes

580
00:28:03,216 --> 00:28:06,577
have maybe corrupt installations of antivirus

581
00:28:06,577 --> 00:28:08,278
that you have to go take out,

582
00:28:08,278 --> 00:28:09,778
or you have to go mitigate.

583
00:28:10,332 --> 00:28:15,437
So it makes it all possible without the OI tool or Elasticsearch.

584
00:28:15,437 --> 00:28:19,401
I don't know if anyone would be able to get this manually or at least convince someone

585
00:28:19,401 --> 00:28:20,061
that it is a problem.

586
00:28:21,892 --> 00:28:23,473
Now, moving on to the Splunk plugin.

587
00:28:23,473 --> 00:28:25,314
I get really excited about this one

588
00:28:25,314 --> 00:28:27,276
because I use this one a lot.

589
00:28:27,276 --> 00:28:28,496
The Splunk team, I believe,

590
00:28:28,496 --> 00:28:30,538
actually uses Jenkins to build their product.

591
00:28:30,538 --> 00:28:33,760
So they actually, their team, if I remember correctly,

592
00:28:33,760 --> 00:28:36,942
actually authored the plugin for Jenkins itself

593
00:28:36,942 --> 00:28:40,925
and as well as the app that visualizes the data from it.

594
00:28:40,925 --> 00:28:44,788
So in this case, the configuration of it

595
00:28:44,788 --> 00:28:46,069
is very similar to Logstash,

596
00:28:46,069 --> 00:28:47,930
except this one happens at a global level.

597
00:28:47,930 --> 00:28:49,371
So once you configure it,

598
00:28:49,371 --> 00:28:50,872
all your jobs send information in.

599
00:28:51,313 --> 00:28:55,424
It actually has a tighter integration to Jenkins, so it's not just log information.

600
00:28:55,424 --> 00:28:57,790
I'll go over that a little bit shortly.

601
00:29:01,265 --> 00:29:05,568
In the case, so you install that Jenkins Splunk plugin

602
00:29:05,568 --> 00:29:07,969
and it shoves the information into Splunk

603
00:29:07,969 --> 00:29:12,313
and then you install the app to visualize that data

604
00:29:12,313 --> 00:29:14,634
in your Splunk instance and then you get this.

605
00:29:14,634 --> 00:29:18,037
So this is a build overview of multiple Jenkins masters.

606
00:29:18,037 --> 00:29:20,779
This screenshot's taken from the plugin page

607
00:29:20,779 --> 00:29:22,700
so if you wanna go see it, you can see it afterwards.

608
00:29:22,700 --> 00:29:25,202
I can't show you our stuff,

609
00:29:25,202 --> 00:29:26,563
but it's basically the same thing.

610
00:29:27,124 --> 00:29:31,917
But you're able to visualize jobs across multiple Jenkins masters. It would work for one.

611
00:29:33,550 --> 00:29:36,711
And here's another example of a pre-built chart that they provide.

612
00:29:36,711 --> 00:29:41,092
And this one is the Jenkins Health, so it's actually taking JVM information and then graphing

613
00:29:41,092 --> 00:29:42,133
it in Splunk as well.

614
00:29:42,133 --> 00:29:44,634
So this is your fourth method outside of the other ones I mentioned.

615
00:29:44,634 --> 00:29:48,555
So there's a lot of redundancy in the system, but it's cool that way.

616
00:29:48,555 --> 00:29:50,436
It actually has the master log as well.

617
00:29:50,436 --> 00:29:54,577
So this case is a really short example, but you can actually search your Jenkins master

618
00:29:54,577 --> 00:29:55,897
log without having to SSH into it.

619
00:29:55,897 --> 00:29:59,879
If you have multiple Jenkins masters, well, you can search across all of them.

620
00:30:00,739 --> 00:30:01,820
So it's really cool that way.

621
00:30:01,820 --> 00:30:04,061
It saves a lot of time.

622
00:30:04,061 --> 00:30:05,822
And then lastly, it's kind of cool,

623
00:30:05,822 --> 00:30:08,303
but they actually built a way to interpret

624
00:30:08,303 --> 00:30:09,944
unit test results as well.

625
00:30:09,944 --> 00:30:13,506
So if you have standard JUnit or stuff like that,

626
00:30:13,506 --> 00:30:15,908
the plugin, it'll actually be able to consume

627
00:30:15,908 --> 00:30:18,749
the test report and graph it for you as well.

628
00:30:18,749 --> 00:30:21,291
And all of this was just install the plugin,

629
00:30:21,291 --> 00:30:24,152
configure it, and install the Splunk app to visualize it,

630
00:30:24,152 --> 00:30:24,893
and it's all there.

631
00:30:24,893 --> 00:30:27,294
This is zero customization from my side.

632
00:30:29,360 --> 00:30:30,301
really powerful stuff.

633
00:30:30,301 --> 00:30:31,764
And if you haven't noticed, the bottom left,

634
00:30:31,764 --> 00:30:33,347
that was kind of like, as I go along,

635
00:30:33,347 --> 00:30:34,809
you're kind of leveling up your reporting.

636
00:30:34,809 --> 00:30:38,256
So that's a little thing I did there.

637
00:30:38,256 --> 00:30:42,844
Now, once you have that data hooked up to your OI systems,

638
00:30:44,422 --> 00:30:48,506
I, this is where managing expectations becomes really easy,

639
00:30:48,506 --> 00:30:51,188
because we're able to aggregate all the job run information

640
00:30:51,188 --> 00:30:52,309
from your Jenkins all across.

641
00:30:52,309 --> 00:30:55,012
So instead of just having your trends view,

642
00:30:55,012 --> 00:30:57,074
you actually can just do all your jobs at once.

643
00:30:57,074 --> 00:30:59,637
Now, yellow is bad in this case.

644
00:30:59,637 --> 00:31:02,299
It's an automation error classification.

645
00:31:02,840 --> 00:31:05,622
I give you the legend now, so it makes a lot more sense.

646
00:31:05,622 --> 00:31:07,643
Orange is bad data, so that just means

647
00:31:07,643 --> 00:31:11,165
the log parser wasn't able to determine a failure cause.

648
00:31:11,165 --> 00:31:13,207
And then there's no script errors that appeared.

649
00:31:13,207 --> 00:31:15,988
There's also very few aborted builds.

650
00:31:15,988 --> 00:31:18,750
The game failures are denoted as compile errors,

651
00:31:18,750 --> 00:31:20,091
linking errors, stuff like that.

652
00:31:20,091 --> 00:31:22,733
And then success is just the build passed.

653
00:31:22,733 --> 00:31:25,075
So immediately from here, you can see the system's

654
00:31:25,075 --> 00:31:27,496
either super reliable or super unreliable.

655
00:31:27,496 --> 00:31:29,077
So the big yellow part actually looks

656
00:31:29,077 --> 00:31:30,578
a lot worse than it actually is.

657
00:31:30,918 --> 00:31:34,100
Because if I hover over it in Slunk, it's actually just one.

658
00:31:34,100 --> 00:31:37,602
So this was a weekend for a really small project,

659
00:31:37,602 --> 00:31:38,523
so nothing ran.

660
00:31:38,523 --> 00:31:39,843
Only one thing ran and it failed.

661
00:31:39,843 --> 00:31:41,124
So it looks really bad.

662
00:31:41,124 --> 00:31:43,685
But you're able to just hover over and tell right away

663
00:31:43,685 --> 00:31:45,546
that there's no reason to panic.

664
00:31:46,613 --> 00:31:51,217
Now, on the exact same data, so this is reporting off the build failure analyzer data that is

665
00:31:51,217 --> 00:31:55,700
in MongoDB that we ingested into Splunk in this case.

666
00:31:55,700 --> 00:31:59,403
This is the exact same legend, same color scheme, same legend.

667
00:31:59,403 --> 00:32:00,964
This is really noisy.

668
00:32:00,964 --> 00:32:06,108
This is actually reliability on each project, Jenkins job.

669
00:32:06,707 --> 00:32:08,988
So each vertical column is a Jenkins job,

670
00:32:08,988 --> 00:32:10,809
but right now you're able to tell which jobs are stable,

671
00:32:10,809 --> 00:32:12,731
which ones aren't from the color coding,

672
00:32:12,731 --> 00:32:14,892
and it's really powerful for the build

673
00:32:14,892 --> 00:32:16,553
as an administrator of Jenkins

674
00:32:16,553 --> 00:32:19,594
and for my team to actually go and address problematic builds.

675
00:32:19,594 --> 00:32:22,796
Now, this example, there's full drill down capabilities.

676
00:32:22,796 --> 00:32:24,857
So if you hover over something,

677
00:32:24,857 --> 00:32:26,618
it'll give you a number of instances.

678
00:32:26,618 --> 00:32:29,880
If you click into it, you actually get to draw,

679
00:32:29,880 --> 00:32:32,541
not the build logs, but at least the metadata

680
00:32:32,541 --> 00:32:35,443
that is collected by the Build Failure Analyzer plugin.

681
00:32:35,443 --> 00:32:36,523
And you're able to.

682
00:32:37,002 --> 00:32:41,064
determine exactly when it happened and other information as well.

683
00:32:41,064 --> 00:32:44,585
So it's really powerful that way. You can of course deconstruct

684
00:32:44,585 --> 00:32:48,086
reconstruct the Jenkins job link, but because this system,

685
00:32:48,086 --> 00:32:52,247
this data is in Splunk and not in Jenkins, if your Jenkins log history retention is

686
00:32:52,247 --> 00:32:53,408
really low

687
00:32:53,408 --> 00:32:55,949
you can configure, you can have a lot more longer history

688
00:32:55,949 --> 00:33:00,330
in Splunk. And the fact that Splunk and Elastic both compress the

689
00:33:00,330 --> 00:33:02,531
information keep a lot more.

690
00:33:02,531 --> 00:33:03,211
So it's really good.

691
00:33:03,211 --> 00:33:06,912
Earlier you saw the graph about the

692
00:33:07,436 --> 00:33:10,858
overall project reliability of a bunch of automation jobs.

693
00:33:10,858 --> 00:33:13,059
Well, you can break it down by stream.

694
00:33:13,059 --> 00:33:15,561
So if you have a particular team, or QA, or producers,

695
00:33:15,561 --> 00:33:18,282
or lead engineers focus on a particular feature stream

696
00:33:18,282 --> 00:33:20,464
or something like that, you build a report for them.

697
00:33:20,464 --> 00:33:22,405
And then they're able to consume that information.

698
00:33:22,405 --> 00:33:23,245
So you can have multiple ones.

699
00:33:23,245 --> 00:33:25,667
This is just, these are all screenshots

700
00:33:25,667 --> 00:33:26,567
of specific reports.

701
00:33:26,567 --> 00:33:28,248
You can have dashboards with multiple ones,

702
00:33:28,248 --> 00:33:29,529
so it makes a lot more sense.

703
00:33:29,529 --> 00:33:31,670
But in this case, this is an example.

704
00:33:31,670 --> 00:33:33,031
This one actually has project names

705
00:33:33,031 --> 00:33:34,712
that you can actually see.

706
00:33:34,712 --> 00:33:35,813
So that's really good for them.

707
00:33:37,077 --> 00:33:42,842
Subsequently, the same set of data, I can generate pie charts to visualize which problems

708
00:33:42,842 --> 00:33:44,023
are the most frequent.

709
00:33:44,023 --> 00:33:48,006
In this case, the big green is actually a linking, I think a dependency error, so it's

710
00:33:48,006 --> 00:33:49,287
not actually our fault.

711
00:33:49,287 --> 00:33:52,610
You can filter it by different failure categories within our system.

712
00:33:52,610 --> 00:33:56,734
So if you're a Jenkins administrator, we can look at specific failures.

713
00:33:56,734 --> 00:33:58,495
If you're a game team, you can look at other ones.

714
00:33:58,495 --> 00:34:00,677
It's useful that way.

715
00:34:01,241 --> 00:34:06,403
Once you have successfully managed expectations of everyone and people trust the system and

716
00:34:06,403 --> 00:34:08,404
they really like it, they're never happy.

717
00:34:08,404 --> 00:34:11,345
They want things to be faster all the time, right?

718
00:34:11,345 --> 00:34:16,567
So off the same set of data and noticing a theme, we're able to generate or calculate

719
00:34:16,567 --> 00:34:18,628
the mean, max, and min job times.

720
00:34:19,122 --> 00:34:24,445
and plot it. Now this plot is kind of ugly to look at because it's got all the jobs or

721
00:34:24,445 --> 00:34:29,148
a lot of jobs. So I actually have filters at the top if you can't see that, that you

722
00:34:29,148 --> 00:34:32,951
can filter by job names and stuff like that. So you can filter it down across different

723
00:34:32,951 --> 00:34:37,733
Jenkins masters. This one I limited to just one because looking after everything would

724
00:34:37,733 --> 00:34:39,975
be a mistake. You wouldn't be able to see anything.

725
00:34:41,704 --> 00:34:43,465
Now, that helps, we also do the, I guess,

726
00:34:43,465 --> 00:34:46,907
we also calculate the standard deviation,

727
00:34:46,907 --> 00:34:48,928
which is really useful for people

728
00:34:48,928 --> 00:34:51,769
that like tables and numbers.

729
00:34:51,769 --> 00:34:53,490
Because job times, not just speed,

730
00:34:53,490 --> 00:34:55,211
but people want consistency.

731
00:34:55,211 --> 00:34:57,152
You know, when QA has to plan for when,

732
00:34:57,152 --> 00:34:58,173
when do you start a build?

733
00:34:58,533 --> 00:35:00,694
When do they have to have people in to test?

734
00:35:00,694 --> 00:35:03,556
Inevitably, as much automated tests you do,

735
00:35:03,556 --> 00:35:06,638
you're gonna still have a manual QA come verify things.

736
00:35:06,638 --> 00:35:09,680
We're able to track how consistent the build time is,

737
00:35:09,680 --> 00:35:12,502
so if it differs two to three minutes or something like that,

738
00:35:12,502 --> 00:35:14,403
that way you can get a better ballpark

739
00:35:14,403 --> 00:35:16,304
how long or when to schedule people to come in,

740
00:35:16,304 --> 00:35:17,485
so it's really useful that way.

741
00:35:19,558 --> 00:35:21,578
Subsequently, you can also just pull a line chart.

742
00:35:21,578 --> 00:35:24,099
Now the line charts in the middle are kind of ugly

743
00:35:24,099 --> 00:35:27,260
because it was a weekend, there was no data.

744
00:35:27,260 --> 00:35:29,621
But many types of visualizations that were built

745
00:35:29,621 --> 00:35:32,502
just at a fingertip from the same set of data.

746
00:35:32,502 --> 00:35:34,482
All these graphs would probably take me

747
00:35:34,482 --> 00:35:36,043
maybe five, 10 minutes to create,

748
00:35:36,043 --> 00:35:39,504
and then they're shareable across all the data.

749
00:35:39,504 --> 00:35:42,925
A lot less time than talking to individuals, I might add.

750
00:35:43,332 --> 00:35:45,893
And now once you have that, that was on the build data,

751
00:35:45,893 --> 00:35:47,854
you can also incorporate other information,

752
00:35:47,854 --> 00:35:49,575
not only Jenkins, but your performance metrics.

753
00:35:49,575 --> 00:35:51,776
So if you want to ingest anything text-based,

754
00:35:51,776 --> 00:35:53,296
you just shove it into either Elastic,

755
00:35:53,296 --> 00:35:55,677
or in this case, Splunk, and then you will plot,

756
00:35:55,677 --> 00:35:57,758
in this case, I believe it's the memory,

757
00:35:57,758 --> 00:35:59,499
the memory high watermark.

758
00:35:59,499 --> 00:36:01,400
So at a CL basis on the access,

759
00:36:01,400 --> 00:36:03,741
you're able to tell for a very stable game

760
00:36:03,741 --> 00:36:05,842
as CLs go in and out and through the automated tests.

761
00:36:05,982 --> 00:36:09,403
the metrics you're collecting, you're able to detect

762
00:36:09,403 --> 00:36:11,304
when a performance impact has happened,

763
00:36:11,304 --> 00:36:14,024
and people are able to address that a lot sooner

764
00:36:14,024 --> 00:36:15,085
than if they did it manually.

765
00:36:15,085 --> 00:36:17,705
So it keeps the performance high.

766
00:36:17,705 --> 00:36:19,886
I don't know if it's clear,

767
00:36:19,886 --> 00:36:22,246
but I mentioned Jenkins console log,

768
00:36:22,246 --> 00:36:24,647
so all the build output that the system...

769
00:36:25,603 --> 00:36:27,464
creates can be indexed.

770
00:36:27,464 --> 00:36:29,105
Now, you want to be careful of that.

771
00:36:29,105 --> 00:36:31,086
I mentioned introducing log filters.

772
00:36:31,086 --> 00:36:33,268
There's a lot of data.

773
00:36:33,268 --> 00:36:36,089
But if you can imagine being able to search across all

774
00:36:36,089 --> 00:36:39,451
the Jenkins job results in one interface

775
00:36:39,451 --> 00:36:41,172
without having to open different tabs,

776
00:36:41,172 --> 00:36:42,693
there's a lot of power behind that.

777
00:36:43,974 --> 00:36:46,935
and that's what really makes me giddy

778
00:36:46,935 --> 00:36:47,976
when I look at the system.

779
00:36:47,976 --> 00:36:50,117
I'm able to use it for multiple reasons.

780
00:36:50,117 --> 00:36:52,759
I mentioned it helps improve debug

781
00:36:52,759 --> 00:36:56,080
or helps reduce debug time for failures.

782
00:36:56,080 --> 00:36:57,982
In this case, I'm gonna go over the example

783
00:36:57,982 --> 00:36:58,962
of the perforce errors.

784
00:36:58,962 --> 00:37:01,864
So in this case, I can't really read,

785
00:37:01,864 --> 00:37:03,545
I'm trying to read my screenshot,

786
00:37:03,545 --> 00:37:07,327
but in one search of this simple search query,

787
00:37:08,335 --> 00:37:12,442
I specify the index where the data is and then I specify the type of data or the source

788
00:37:12,442 --> 00:37:15,867
type and then I just type Perforce password.

789
00:37:15,867 --> 00:37:22,076
I was able to identify 104 different Perforce connection issues over three different Jenkins

790
00:37:22,076 --> 00:37:23,439
masters, over 15 jobs.

791
00:37:24,595 --> 00:37:30,178
and a total of 43 unique job runs from that simple search.

792
00:37:30,178 --> 00:37:31,818
And that kind of highlights the thing,

793
00:37:31,818 --> 00:37:34,299
it summarizes the kind of power that you would have

794
00:37:34,299 --> 00:37:36,040
in debugging something at scale

795
00:37:36,040 --> 00:37:37,581
if you incorporate this type of tool.

796
00:37:37,581 --> 00:37:38,901
Now Splunk does cost money,

797
00:37:38,901 --> 00:37:40,442
but you can do this in Elastic as well.

798
00:37:40,442 --> 00:37:44,023
A lot of these things I talk about,

799
00:37:44,023 --> 00:37:46,164
there's a lot of stuff that's Jenkins specific,

800
00:37:46,164 --> 00:37:48,845
but the concepts can be applied to anything really,

801
00:37:48,845 --> 00:37:50,426
and not just games do.

802
00:37:52,548 --> 00:37:57,374
No, the second example that I'll go over is, you know, I actually use it to optimize Java

803
00:37:57,374 --> 00:38:02,000
server builds with doing, with knowing nothing about Java and the server itself.

804
00:38:02,000 --> 00:38:03,362
So I joined, I looked...

805
00:38:04,808 --> 00:38:09,050
I became involved with the team relatively recently and I had no idea how their system

806
00:38:09,050 --> 00:38:09,290
was.

807
00:38:09,290 --> 00:38:13,851
All I knew was the server was Java-based and I knew it was Maven so I was like, okay, great,

808
00:38:13,851 --> 00:38:15,572
I have a start.

809
00:38:15,572 --> 00:38:19,733
And I was like, I actually used Splunk to figure out things for me and help me on-board

810
00:38:19,733 --> 00:38:19,853
me.

811
00:38:19,853 --> 00:38:25,394
So in this case, I want to optimize the server build and I'm going, well, I know Maven, I

812
00:38:25,394 --> 00:38:29,276
heard rumblings from other engineers that Maven was downloading packages from the public

813
00:38:29,276 --> 00:38:30,656
Maven repo constantly.

814
00:38:30,896 --> 00:38:34,357
So like okay, so we had an artifactory cache

815
00:38:34,357 --> 00:38:36,418
or an artifactory server locally,

816
00:38:36,418 --> 00:38:38,919
so what if we just cache this stuff locally

817
00:38:38,919 --> 00:38:40,879
and have a local artifactory cache?

818
00:38:40,879 --> 00:38:43,560
And like okay, so which repos do we need?

819
00:38:43,560 --> 00:38:45,221
So since I had all the job logs,

820
00:38:45,221 --> 00:38:47,661
I was able to search across all of them.

821
00:38:47,661 --> 00:38:50,342
I did a little thing called extracted fields in Splunk,

822
00:38:50,342 --> 00:38:53,803
which is able to interpret job logs

823
00:38:53,803 --> 00:38:56,144
and actually isolate and create fields, unique fields.

824
00:38:56,604 --> 00:39:00,215
And I created one that would give me all the unique URLs

825
00:39:00,215 --> 00:39:01,298
that we were downloading.

826
00:39:04,613 --> 00:39:06,494
And then that kind of highlighted there,

827
00:39:06,494 --> 00:39:09,095
that was kind of like the extracted field that I created.

828
00:39:09,095 --> 00:39:11,375
It's actually called Maven repo, you know,

829
00:39:11,375 --> 00:39:12,756
really aptly named.

830
00:39:12,756 --> 00:39:15,056
And then I was able to construct a chart,

831
00:39:15,056 --> 00:39:16,337
or actually not a chart,

832
00:39:16,337 --> 00:39:19,437
I was, yeah, this is a chart and a line chart,

833
00:39:19,437 --> 00:39:21,618
but I created a job, or my engineers created a job

834
00:39:21,618 --> 00:39:25,079
that one, built with the default settings, nothing changed.

835
00:39:25,079 --> 00:39:28,160
Second one was pointing at our local auto factory cache,

836
00:39:28,160 --> 00:39:29,800
and we're able to track that on average

837
00:39:29,800 --> 00:39:31,360
by just looking at local Maven repo,

838
00:39:31,360 --> 00:39:32,921
we were able to save one minute.

839
00:39:33,554 --> 00:39:34,615
build time for our jobs.

840
00:39:34,615 --> 00:39:37,639
And that was without looking at the code, just using the job

841
00:39:37,639 --> 00:39:38,139
parsing.

842
00:39:38,139 --> 00:39:39,681
And I thought that was really cool.

843
00:39:39,681 --> 00:39:44,086
And then I think the Maven repo went down a couple times,

844
00:39:44,086 --> 00:39:45,307
I guess, earlier.

845
00:39:45,307 --> 00:39:46,929
So that was really useful that we

846
00:39:46,929 --> 00:39:50,293
were able to at least isolate the system from the public

847
00:39:50,293 --> 00:39:53,336
Maven repo, so that kept our build stability up even higher.

848
00:39:54,560 --> 00:39:57,803
Now, the other one is, once you have that data in,

849
00:39:57,803 --> 00:40:00,905
Splunk offers a machine learning kit,

850
00:40:00,905 --> 00:40:02,887
and so does Elastic as well.

851
00:40:02,887 --> 00:40:04,308
I think you have to pay for the Elastic one,

852
00:40:04,308 --> 00:40:06,710
and Splunk you have to pay for two.

853
00:40:06,710 --> 00:40:07,650
But it just shows that.

854
00:40:09,110 --> 00:40:14,496
It unlocks a lot of potential and it's kind of the next steps for my team will be to look at this stuff.

855
00:40:14,496 --> 00:40:15,658
I don't have any examples.

856
00:40:15,658 --> 00:40:21,345
I did, I did, uh, we were starting to experiment with, um, looking at the log or the drive space.

857
00:40:21,345 --> 00:40:27,913
So whenever you're syncing and the artifacts and try to predict, uh, do more predictive reporting, uh, rather than reactive reporting.

858
00:40:30,008 --> 00:40:34,809
Now once you have all that, you can now probably scale your automation a lot better.

859
00:40:34,809 --> 00:40:41,150
So my recommendations for that are going to be really loose and they're going to be a

860
00:40:41,150 --> 00:40:46,212
really high level, but this is really important and if I spoke to a number of you before,

861
00:40:46,212 --> 00:40:50,793
then I apologize for ranting again, but you've got to factor in the talent.

862
00:40:50,793 --> 00:40:54,453
So in our industry, CI is not the most glorious thing.

863
00:40:54,453 --> 00:40:58,414
The companies that we work for may not value us as much as we think they should.

864
00:41:00,315 --> 00:41:03,799
So you should factor in the talent that you have and that you can retain.

865
00:41:03,799 --> 00:41:05,480
I don't know how many of us are contractors,

866
00:41:05,480 --> 00:41:06,722
how many of you guys are full-time,

867
00:41:06,722 --> 00:41:07,442
but there's not a lot.

868
00:41:07,442 --> 00:41:11,246
Within the A, it's definitely improving.

869
00:41:11,246 --> 00:41:16,391
To do that, you need to definitely minimize the technical debt within your stack,

870
00:41:16,391 --> 00:41:21,837
and leveraging open source or existing enterprise tools is definitely the way to go.

871
00:41:21,837 --> 00:41:23,598
It's also transferable skills.

872
00:41:25,385 --> 00:41:28,486
And then you will definitely want to apply configuration as code principles,

873
00:41:28,486 --> 00:41:33,729
as well as infrastructure as code principles to help scale your automation responsibly.

874
00:41:33,729 --> 00:41:37,711
I won't go into too much detail for those ones because I could be up here forever.

875
00:41:37,711 --> 00:41:41,173
But our team, I'll go over the high-level stuff.

876
00:41:41,173 --> 00:41:45,175
I mentioned we used the Buildflow plugin before.

877
00:41:45,175 --> 00:41:50,197
We still use it in some of the legacy systems, but we're migrating to the Pipeline plugin.

878
00:41:50,197 --> 00:41:52,778
I know that I was there for the whole ride when they...

879
00:41:52,999 --> 00:41:54,620
They kind of deprecated build flow,

880
00:41:54,620 --> 00:41:57,001
and they hired all the people that made it

881
00:41:57,001 --> 00:41:57,882
into developing pipelines,

882
00:41:57,882 --> 00:42:00,924
so that was kind of cool and bad at the same time.

883
00:42:00,924 --> 00:42:02,605
It's extensible and powerful,

884
00:42:02,605 --> 00:42:05,807
the fact that you can use a groovy domain-specific language

885
00:42:05,807 --> 00:42:09,050
to do basically anything you want.

886
00:42:09,050 --> 00:42:10,831
It offers the stage view,

887
00:42:10,831 --> 00:42:13,873
which is very similar to our custom CI tool

888
00:42:13,873 --> 00:42:17,155
that we built six, seven years ago at EA.

889
00:42:17,155 --> 00:42:18,776
It actually looks very similar to it,

890
00:42:18,776 --> 00:42:19,817
which is kind of ironic.

891
00:42:21,755 --> 00:42:24,437
And then it offers optional Blue Ocean Pipeline Editor.

892
00:42:24,437 --> 00:42:26,259
Now this view is kind of cool.

893
00:42:26,259 --> 00:42:28,721
It is, I think there's other CI systems

894
00:42:28,721 --> 00:42:31,184
with views like this as well,

895
00:42:31,184 --> 00:42:34,827
but Jenkins realized that the way that you view results

896
00:42:34,827 --> 00:42:37,129
is not the best and they started trying to improve it,

897
00:42:37,129 --> 00:42:39,492
so that's good for them and good for us as well.

898
00:42:39,492 --> 00:42:42,074
And the next, moving on,

899
00:42:42,074 --> 00:42:44,676
that isn't the only thing you need though,

900
00:42:44,676 --> 00:42:48,040
because that only solves when you actually run a job.

901
00:42:49,385 --> 00:42:51,167
Well, what about job creation?

902
00:42:51,167 --> 00:42:52,388
Well, we use the job DSL plugin,

903
00:42:52,388 --> 00:42:57,353
so I'm not sure if any of you guys are familiar with that,

904
00:42:57,353 --> 00:42:59,815
but it enables dynamic job creation,

905
00:42:59,815 --> 00:43:00,696
and that's really good.

906
00:43:02,520 --> 00:43:05,824
And once again, it uses the Groovy DSL as well.

907
00:43:05,824 --> 00:43:08,467
So we're able to use the job DSL to populate

908
00:43:08,467 --> 00:43:11,230
our Jenkins master jobs, and then those Jenkins master jobs,

909
00:43:11,230 --> 00:43:13,032
when they're pipeline-free install,

910
00:43:13,032 --> 00:43:15,295
we use that afterwards.

911
00:43:15,295 --> 00:43:18,058
So it's kind of a chicken and the egg thing.

912
00:43:18,058 --> 00:43:20,561
I know that there's many areas where you can do scripted

913
00:43:20,561 --> 00:43:22,563
or non-scripted in pipeline.

914
00:43:23,084 --> 00:43:27,987
You can put your properties in both, which is kind of confusing, but it's up to you guys

915
00:43:27,987 --> 00:43:28,848
and how you guys want to use it.

916
00:43:28,848 --> 00:43:32,970
I don't think we've found the perfect mechanism within EA yet, because there's a lot of people

917
00:43:32,970 --> 00:43:38,034
with a lot of opinions, but it gives you a lot of options and that's all good for what

918
00:43:38,034 --> 00:43:38,454
we do.

919
00:43:38,454 --> 00:43:42,957
This example is taken from the Jenkins wiki.

920
00:43:42,957 --> 00:43:47,380
It's an example of the Job DSL plugin for those that aren't familiar with it.

921
00:43:47,380 --> 00:43:47,781
It will...

922
00:43:48,397 --> 00:43:51,518
you point it at a Git repo and it will generate a unique job

923
00:43:51,518 --> 00:43:52,759
for every branch you have in it.

924
00:43:52,759 --> 00:43:57,460
And this is an example of, this is cool.

925
00:43:57,460 --> 00:43:58,701
And if you guys are using Git,

926
00:43:58,701 --> 00:44:00,641
you can probably use this right off the bat.

927
00:44:00,641 --> 00:44:02,082
If you're using Perforce,

928
00:44:02,082 --> 00:44:03,282
I don't think they have something like this,

929
00:44:03,282 --> 00:44:05,283
or maybe they do, maybe my team does, I don't know.

930
00:44:05,283 --> 00:44:07,364
I'll have to check on that one.

931
00:44:07,364 --> 00:44:12,385
But this is just an example of how powerful it can be.

932
00:44:12,385 --> 00:44:14,786
And it will auto-scale your system.

933
00:44:14,786 --> 00:44:15,667
Now, once you have,

934
00:44:16,117 --> 00:44:18,778
the ability to generate a lot of jobs,

935
00:44:18,778 --> 00:44:23,120
make them as complex, and manage them using code,

936
00:44:23,120 --> 00:44:25,641
you're gonna need things to run it on, right?

937
00:44:25,641 --> 00:44:27,842
So for us, we're using in-house,

938
00:44:27,842 --> 00:44:29,703
we're using VMware for our VM stack,

939
00:44:29,703 --> 00:44:32,204
and then we use Chef to help configure

940
00:44:32,204 --> 00:44:35,146
the software installations on it,

941
00:44:35,146 --> 00:44:37,307
and I'd highly recommend doing that.

942
00:44:37,307 --> 00:44:40,828
The Chef is used to configure our Zabbix configurations,

943
00:44:40,828 --> 00:44:43,530
so it can do a lot for you, it'll save you a lot of time.

944
00:44:45,654 --> 00:44:47,355
We do use JFrog Artifactory.

945
00:44:47,355 --> 00:44:51,178
We're not completely adopted it yet, but we're starting to.

946
00:44:51,178 --> 00:44:55,061
And that will help us with tracking our builds better

947
00:44:55,061 --> 00:44:58,084
than just using network shares and Jenkins itself.

948
00:44:58,084 --> 00:45:00,306
I would highly recommend you not using Jenkins to store

949
00:45:00,306 --> 00:45:03,408
your repository, because it's just going to blow up.

950
00:45:03,408 --> 00:45:05,450
And you'll regret it later, because we do.

951
00:45:06,481 --> 00:45:10,344
And then next, we're exploring with Kubernetes.

952
00:45:10,344 --> 00:45:13,267
We're using Kubernetes environments to build our server,

953
00:45:13,267 --> 00:45:15,508
most of our server stuff right now,

954
00:45:15,508 --> 00:45:16,810
for what can go on it,

955
00:45:16,810 --> 00:45:19,732
and then of course Docker containers.

956
00:45:19,732 --> 00:45:21,574
But there's one thing I'd like to mention,

957
00:45:21,574 --> 00:45:24,716
is we are experimenting for AAA, like the ability to use.

958
00:45:25,357 --> 00:45:31,040
containers for that, but you know the jury's kind of out on that in terms of if it'll give us proper returns or not because

959
00:45:31,040 --> 00:45:33,762
It adds a lot of complexity to the system

960
00:45:33,762 --> 00:45:39,625
Not sure if the performance gains or the flexibility is worth it at the moment

961
00:45:39,625 --> 00:45:45,069
You know in summary your automations is only as good as your reporting

962
00:45:45,069 --> 00:45:49,792
You know the speed and flexibility and reliability isn't the only thing

963
00:45:49,792 --> 00:45:53,674
The earlier you invest in your reporting stack

964
00:45:53,674 --> 00:45:54,475
The more

965
00:45:55,115 --> 00:45:56,315
you'll thank yourself later on.

966
00:45:56,315 --> 00:45:58,337
You never know when you're gonna go big.

967
00:45:58,337 --> 00:46:00,458
You never know when your system's gonna go wide.

968
00:46:00,458 --> 00:46:03,280
So as long as you have that flexible reporting stack

969
00:46:03,280 --> 00:46:06,382
and scalable, it'll just help you out in the long run.

970
00:46:06,382 --> 00:46:11,145
And also, it will help reduce your technical debt

971
00:46:11,145 --> 00:46:15,307
by doing that and leverage your open source

972
00:46:15,307 --> 00:46:17,268
as much as possible or enterprise tools

973
00:46:17,268 --> 00:46:20,170
if your company has the money to do so.

974
00:46:20,170 --> 00:46:22,472
That's really, really important.

975
00:46:22,472 --> 00:46:23,352
And then,

976
00:46:24,849 --> 00:46:25,896
of course, once you have that.

977
00:46:26,476 --> 00:46:28,276
I'm sure everyone here has had to deal with engineers,

978
00:46:28,276 --> 00:46:29,536
you have to manage the build system.

979
00:46:29,536 --> 00:46:32,157
Use it to your advantage, manage the expectations.

980
00:46:32,157 --> 00:46:34,417
And then, last but not least, I think,

981
00:46:34,417 --> 00:46:36,558
I said everything else was important,

982
00:46:36,558 --> 00:46:39,578
but this one's the most important, factoring the talent.

983
00:46:39,578 --> 00:46:42,459
So, you know, if you have a big team, a small team,

984
00:46:42,459 --> 00:46:45,539
a permanent team, use those in deciding

985
00:46:45,539 --> 00:46:47,520
what kind of tech stack you want.

986
00:46:47,520 --> 00:46:50,300
You know, what I said is one option of doing it.

987
00:46:50,300 --> 00:46:51,840
It's our constraints and what we live with.

988
00:46:51,840 --> 00:46:54,521
I understand that it's not perfect for everyone.

989
00:46:55,141 --> 00:46:58,502
So definitely you want to factor in the talent that you have, that you'll retain.

990
00:46:58,502 --> 00:47:02,063
If you want to stay in the job industry and stuff like that when you're making your decisions,

991
00:47:02,063 --> 00:47:04,583
custom tools is good for certain cases,

992
00:47:04,583 --> 00:47:08,124
but it depends on the situation.

993
00:47:08,124 --> 00:47:13,926
So all the links I had for all the plugins are on the Pastebin link here,

994
00:47:13,926 --> 00:47:16,346
as well as some of the technologies I've listed.

995
00:47:16,346 --> 00:47:18,167
So if you didn't have time to jot that down,

996
00:47:18,167 --> 00:47:22,908
you can just go to that link and then there should be links for that.

997
00:47:24,073 --> 00:47:24,995
And that is it.

998
00:47:24,995 --> 00:47:25,756
So if you have any questions.

999
00:47:25,756 --> 00:47:37,297
I guess if you have questions, please go to the mic.

1000
00:47:43,095 --> 00:47:43,235
Hi.

1001
00:47:43,235 --> 00:47:45,817
You said you were monitoring memory,

1002
00:47:45,817 --> 00:47:49,580
and that's something we often have problems with,

1003
00:47:49,580 --> 00:47:52,502
just tuning the Java heap, running out of memory.

1004
00:47:52,502 --> 00:47:55,525
Are there any kind of tips you can give

1005
00:47:55,525 --> 00:47:58,708
on keeping memory usage down?

1006
00:47:58,708 --> 00:47:59,788
Don't use build flow.

1007
00:48:01,846 --> 00:48:04,188
If you use Buildflow or anything like that, it does class loading.

1008
00:48:04,188 --> 00:48:07,170
And the class loading will bump up all your memory.

1009
00:48:07,170 --> 00:48:09,972
It doesn't always clean it up.

1010
00:48:09,972 --> 00:48:12,694
I mentioned earlier we have 64 gigs of RAM on some of our masters.

1011
00:48:12,694 --> 00:48:13,655
Not all of them have that.

1012
00:48:13,655 --> 00:48:15,917
It depends on the scale, number of jobs run concurrently.

1013
00:48:16,937 --> 00:48:22,219
It really depends on the complexity of your jobs and how much you use it.

1014
00:48:22,219 --> 00:48:26,400
So there's no master solution for it, but the monitoring plugin I definitely recommend you using

1015
00:48:26,400 --> 00:48:29,801
and you can try to get some information from that.

1016
00:48:29,801 --> 00:48:32,282
If you use log parsing, it's not the perfect thing.

1017
00:48:32,282 --> 00:48:33,862
It's a double-edged sword.

1018
00:48:33,862 --> 00:48:37,763
It makes it really easy by using the build failure analyzer plugin or other log parsers,

1019
00:48:37,763 --> 00:48:40,584
but you're using the Jenkins master to do it.

1020
00:48:41,224 --> 00:48:45,006
I don't think I found a Jenkins plugin that will offload that to a node yet.

1021
00:48:45,006 --> 00:48:48,408
Now that we're shoving more information to Splunk and Elastic,

1022
00:48:48,408 --> 00:48:53,131
we are thinking of ways of just not using log parsing altogether inside Jenkins,

1023
00:48:53,131 --> 00:48:57,073
just using the OI tool itself to do it, because it's powerful enough.

1024
00:48:57,073 --> 00:48:58,254
But we're not quite there yet.

1025
00:48:58,254 --> 00:48:59,175
Okay, thank you.

1026
00:49:01,372 --> 00:49:02,853
Hey, thanks for the great talk.

1027
00:49:02,853 --> 00:49:05,094
That was very good, or good, I found.

1028
00:49:05,094 --> 00:49:05,715
Oh, thank you.

1029
00:49:05,715 --> 00:49:09,938
And the question is that you said the Jenkins in the CI

1030
00:49:09,938 --> 00:49:13,700
thing is not a glorious thing to do as an engineer.

1031
00:49:13,700 --> 00:49:17,363
So I'm just wondering what's the biggest motivation for you?

1032
00:49:17,854 --> 00:49:19,356
Oh, that's a great question.

1033
00:49:19,356 --> 00:49:22,720
So I say it's not the glorious thing,

1034
00:49:22,720 --> 00:49:25,263
but I think that was more for everyone else,

1035
00:49:25,263 --> 00:49:26,725
maybe not in this room.

1036
00:49:26,725 --> 00:49:29,088
For us, I find passion in helping others.

1037
00:49:29,088 --> 00:49:33,653
I've been doing this for 11 years

1038
00:49:33,653 --> 00:49:34,975
and I find value in doing it.

1039
00:49:36,211 --> 00:49:41,072
I take pride in it and I take pride in having a stable system and for the end of the day

1040
00:49:41,072 --> 00:49:46,213
helping the engineers, enabling the focus, the game engineers to focus on the game itself.

1041
00:49:46,213 --> 00:49:47,353
That brings a lot of value.

1042
00:49:47,353 --> 00:49:48,514
It doesn't mean I can't contribute.

1043
00:49:48,514 --> 00:49:49,814
I contribute ideas.

1044
00:49:49,814 --> 00:49:50,674
I don't have to do it.

1045
00:49:50,674 --> 00:49:52,735
It's kind of the best of both worlds.

1046
00:49:52,735 --> 00:49:55,215
We also don't pull as much on our team.

1047
00:49:55,215 --> 00:49:57,796
We actually don't pull very crazy hours at all.

1048
00:49:57,796 --> 00:50:02,397
I think within EA we have one of the highest retention, like internal retention, like we

1049
00:50:02,397 --> 00:50:03,937
don't have no turnover rate really.

1050
00:50:04,557 --> 00:50:05,518
It's really low.

1051
00:50:05,518 --> 00:50:07,820
I mean, outside of the stuff that we can't control,

1052
00:50:07,820 --> 00:50:09,921
like contractors and stuff like that, we try our best.

1053
00:50:09,921 --> 00:50:11,663
The company is warming up

1054
00:50:11,663 --> 00:50:13,684
and doing a really good job doing it.

1055
00:50:13,684 --> 00:50:14,745
They recognize the value.

1056
00:50:14,745 --> 00:50:18,708
But I mean, I think for everyone in this room,

1057
00:50:18,708 --> 00:50:20,429
it's really valuable that we do what we do

1058
00:50:20,429 --> 00:50:22,671
and to share with one another.

1059
00:50:22,671 --> 00:50:23,812
And I think going open source

1060
00:50:23,812 --> 00:50:25,193
definitely helps each other out

1061
00:50:25,193 --> 00:50:27,114
because we can then share things like this.

1062
00:50:27,114 --> 00:50:27,354
Yeah.

1063
00:50:27,354 --> 00:50:29,336
Thank you very much.

1064
00:50:31,788 --> 00:50:39,275
Hey there. Thanks for the talk. So quickly, just two questions. I guess first, for mid-sized

1065
00:50:39,275 --> 00:50:46,802
companies, we have enough trouble just convincing our clients just to at least use CICD in any

1066
00:50:46,802 --> 00:50:53,809
capacity. But you didn't, I may have missed it. You may have talked a little bit about

1067
00:50:53,809 --> 00:50:56,652
sort of your deployment best practices and...

1068
00:50:57,150 --> 00:51:02,253
when we're working with our clients, we're already trying to convince them to, you know,

1069
00:51:02,253 --> 00:51:08,638
use Jenkins. But what tips might you have for deploying sort of, you know, hundreds

1070
00:51:08,638 --> 00:51:16,443
or tens of gigs of data to, you know, servers or wherever, I guess, for companies or clients

1071
00:51:16,443 --> 00:51:21,787
that might not be comfortable deploying them to, say, Dropbox or, you know, Google Cloud

1072
00:51:21,787 --> 00:51:22,747
or something like that?

1073
00:51:23,286 --> 00:51:26,010
That is a very good question.

1074
00:51:26,010 --> 00:51:30,517
So I'm lucky enough to not have that problem myself personally.

1075
00:51:30,517 --> 00:51:35,605
With NEA we have our own team called RPM, Release and Preservation Management.

1076
00:51:35,605 --> 00:51:37,588
There was a talk earlier about preserving stuff.

1077
00:51:38,249 --> 00:51:39,469
We work directly with them.

1078
00:51:39,469 --> 00:51:41,390
They also manage the distribution network.

1079
00:51:41,390 --> 00:51:48,034
So I know that we use a dedicated hardware to do that,

1080
00:51:48,034 --> 00:51:51,717
to securely transfer data like that encrypted to,

1081
00:51:51,717 --> 00:51:54,398
we do it to, I think, Amazon.

1082
00:51:54,398 --> 00:51:57,020
So that's just an example of how you can push things

1083
00:51:57,020 --> 00:51:59,381
to the cloud using dedicated hardware.

1084
00:51:59,381 --> 00:52:01,502
Now, the piece of hardware is quite expensive,

1085
00:52:01,502 --> 00:52:03,263
but when you're looking at securing things

1086
00:52:03,263 --> 00:52:05,345
and not increasing your software side,

1087
00:52:05,345 --> 00:52:07,266
I mean, other than secure FTP,

1088
00:52:07,971 --> 00:52:11,314
I mean that'd be the free stuff to try to use to start with.

1089
00:52:11,314 --> 00:52:14,017
Yeah, to start with, we also within the company,

1090
00:52:14,017 --> 00:52:15,458
we use WAN accelerators,

1091
00:52:15,458 --> 00:52:17,600
Wide Area Network Accelerators hardware,

1092
00:52:17,600 --> 00:52:19,042
so that's also expensive.

1093
00:52:19,042 --> 00:52:22,765
But I mean, there's hardware options for optimizing that,

1094
00:52:22,765 --> 00:52:25,508
and those are specifically used for,

1095
00:52:25,508 --> 00:52:28,871
you know, your co-developed studios and stuff like that,

1096
00:52:28,871 --> 00:52:29,652
and your big games, right?

1097
00:52:29,652 --> 00:52:31,033
Now as far as...

1098
00:52:31,734 --> 00:52:36,155
Convincing people to use CI, it's hard, it really is.

1099
00:52:36,155 --> 00:52:37,795
There's nothing harder than convincing people

1100
00:52:37,795 --> 00:52:40,196
that don't want to change the quickest way.

1101
00:52:40,196 --> 00:52:42,997
And that's why, you know, if you have time

1102
00:52:42,997 --> 00:52:45,777
and you can invest in Elastic,

1103
00:52:45,777 --> 00:52:47,478
if you have money constraints,

1104
00:52:47,478 --> 00:52:49,698
definitely go down that route first.

1105
00:52:49,698 --> 00:52:51,519
Hook up the data, start using it,

1106
00:52:51,519 --> 00:52:53,859
generate the reports, get buy-in with those reports,

1107
00:52:53,859 --> 00:52:58,400
because execs, non-technical people love those.

1108
00:52:58,400 --> 00:52:59,520
Even technical people love that

1109
00:52:59,520 --> 00:53:00,881
because numbers shut people up.

1110
00:53:01,961 --> 00:53:04,762
So if you can do that, then that's the way to go.

1111
00:53:04,762 --> 00:53:06,682
And then I mentioned a slide deck

1112
00:53:06,682 --> 00:53:09,403
about setting the automation.

1113
00:53:09,403 --> 00:53:12,324
Set up the builds first, and then your static analysis.

1114
00:53:12,324 --> 00:53:12,964
Those are the easiest to do.

1115
00:53:12,964 --> 00:53:15,264
And that'll start getting you some returns.

1116
00:53:15,264 --> 00:53:17,845
The test will be the most difficult step, I think,

1117
00:53:17,845 --> 00:53:20,085
because you need to decide on a test framework.

1118
00:53:20,085 --> 00:53:21,126
Every game is different.

1119
00:53:21,126 --> 00:53:24,907
If you're using Unity or Unreal, I think you have a.

1120
00:53:25,393 --> 00:53:27,755
you know, leg up, that they have test frameworks

1121
00:53:27,755 --> 00:53:29,296
that you can leverage.

1122
00:53:29,296 --> 00:53:31,478
I know some parts of our team or our company do that.

1123
00:53:31,478 --> 00:53:34,560
So I think you just need to analyze it,

1124
00:53:34,560 --> 00:53:36,522
but there's a lot of free options I said there,

1125
00:53:36,522 --> 00:53:39,064
and that was kind of my inspiration of the talk

1126
00:53:39,064 --> 00:53:40,625
was we also use free stuff.

1127
00:53:40,625 --> 00:53:41,345
And we're, you know, my team,

1128
00:53:41,345 --> 00:53:43,987
we will be looking at contributing some of our stuff

1129
00:53:43,987 --> 00:53:45,048
back to open source,

1130
00:53:45,048 --> 00:53:47,450
but I still need to go through most of the red tape.

1131
00:53:48,475 --> 00:53:53,441
Okay, so yeah, so the, um, I guess leading into the second question, right?

1132
00:53:53,441 --> 00:53:56,205
So are, we've thankfully convinced our clients to use CI and CD.

1133
00:53:56,205 --> 00:54:00,410
It's just necessarily trying to convince them to put some more money into the

1134
00:54:00,410 --> 00:54:02,893
hardware and kind of upgrading.

1135
00:54:02,893 --> 00:54:03,694
Uh, but I guess, uh.

1136
00:54:04,114 --> 00:54:08,337
thinking sort of, stepping aside from that, do you have any tips, I guess, I don't know

1137
00:54:08,337 --> 00:54:12,701
if you're involved sort of in the hiring process at EA, but do you have any sort of tips to

1138
00:54:12,701 --> 00:54:19,306
try and attract talent that is in CICD because we're having issues trying to find more like-minded

1139
00:54:19,306 --> 00:54:20,426
individuals and I guess.

1140
00:54:21,632 --> 00:54:27,277
you know, is there a Discord channel or something out there that you might go for to find someone

1141
00:54:27,277 --> 00:54:28,278
who's interested?

1142
00:54:28,278 --> 00:54:29,779
That's a great question.

1143
00:54:29,779 --> 00:54:32,842
I know that the automated testing roundtable is happening at the same time.

1144
00:54:32,842 --> 00:54:35,744
I think there's individuals like in this room here.

1145
00:54:35,744 --> 00:54:39,568
Our community is quite small, especially in the gaming community.

1146
00:54:39,688 --> 00:54:42,168
the gaming community, so this is the first time I think

1147
00:54:42,168 --> 00:54:44,629
there's a dedicated CI talk or somewhat like that,

1148
00:54:44,629 --> 00:54:47,150
so I'm excited that all you guys showed up, actually.

1149
00:54:47,150 --> 00:54:49,630
I was like, this is a big room, I hope I have some people

1150
00:54:49,630 --> 00:54:53,231
come, especially at this time, especially this time slot.

1151
00:54:53,231 --> 00:54:56,052
I don't know, if you wanna set something up,

1152
00:54:56,052 --> 00:54:58,372
I'd be more than welcome to help join, but I was,

1153
00:54:58,372 --> 00:55:00,773
I didn't mention, I had my slide deck, I forgot a lot,

1154
00:55:00,773 --> 00:55:04,313
but I was involved with hiring like majority of the,

1155
00:55:04,313 --> 00:55:05,454
like 30, 40 engineers on the team.

1156
00:55:05,454 --> 00:55:08,134
The thing that I look at for the most on our team

1157
00:55:08,134 --> 00:55:09,415
is the passion.

1158
00:55:11,155 --> 00:55:17,158
You know, technical ability is never, for our stuff, it's nice, but the passion is the

1159
00:55:17,158 --> 00:55:22,300
most important one to do, because passionate people, they always learn.

1160
00:55:22,300 --> 00:55:26,602
And my team's evolved, I've evolved with my team, and our team's evolved constantly.

1161
00:55:26,602 --> 00:55:29,243
So I think that's the expectation to have, to have those individuals.

1162
00:55:29,243 --> 00:55:33,924
I started reaching out to local universities from Vancouver, where I work, and trying to

1163
00:55:33,924 --> 00:55:34,445
do that.

1164
00:55:34,445 --> 00:55:37,526
I haven't had that much time, but I think.

1165
00:55:38,480 --> 00:55:41,741
It's a hard one because nobody, no school really teaches it.

1166
00:55:41,741 --> 00:55:42,061
I did have-

1167
00:55:42,061 --> 00:55:44,102
That's kind of part of the issue.

1168
00:55:44,102 --> 00:55:45,663
Yeah, there's no class about it.

1169
00:55:45,663 --> 00:55:48,103
So hopefully by us, by me doing a talk

1170
00:55:48,103 --> 00:55:51,164
and by us talking more as a community,

1171
00:55:51,164 --> 00:55:52,765
we'll start garnering that attention

1172
00:55:52,765 --> 00:55:54,165
and actually bringing that, you know,

1173
00:55:54,165 --> 00:55:56,626
there's actually a career path in CI

1174
00:55:56,626 --> 00:56:00,127
within not just the gaming industry, but at large.

1175
00:56:00,127 --> 00:56:01,327
And it's very important, so.

1176
00:56:01,327 --> 00:56:04,048
Cool, thank you, Adrian.

1177
00:56:04,048 --> 00:56:04,348
That's it.

1178
00:56:04,348 --> 00:56:07,149
Thank you, everyone.

