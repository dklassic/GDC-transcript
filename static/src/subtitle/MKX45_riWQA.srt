1
00:00:05,607 --> 00:00:06,507
My name is Sean Feely.

2
00:00:07,348 --> 00:00:09,089
I'm a senior staff environment tech artist

3
00:00:09,349 --> 00:00:10,549
at Sony Santa Monica Studio.

4
00:00:11,450 --> 00:00:13,511
If you join our team and you want rosy cheeks

5
00:00:13,551 --> 00:00:15,632
in your studio portrait, just spend all weekend

6
00:00:15,672 --> 00:00:17,573
at the beach before your first day like I did.

7
00:00:19,034 --> 00:00:21,615
God of War is my first game, which is crazy to me,

8
00:00:22,396 --> 00:00:23,476
and for about eight years prior,

9
00:00:23,697 --> 00:00:25,498
I worked in film across the bay at Pixar.

10
00:00:26,378 --> 00:00:28,279
So if I over-explained some obvious game dev thing,

11
00:00:28,639 --> 00:00:30,240
it's probably something that I learned in my transition.

12
00:00:32,070 --> 00:00:34,371
Or if I under explain and you have questions, comments,

13
00:00:34,831 --> 00:00:36,592
or a warning that there's something in my teeth on camera,

14
00:00:36,812 --> 00:00:38,592
fire away at the real big feel on Twitter.

15
00:00:41,053 --> 00:00:43,194
So I hope you wanna learn about our interactive win system

16
00:00:43,214 --> 00:00:44,515
in God of War, because that's what we're gonna

17
00:00:44,555 --> 00:00:46,235
talk about today a lot.

18
00:00:47,196 --> 00:00:48,736
We're gonna go deep enough that you could go home

19
00:00:48,776 --> 00:00:49,797
and start implementing this,

20
00:00:50,337 --> 00:00:51,758
but in case you're just getting into tech art,

21
00:00:51,938 --> 00:00:53,458
I've tried to make this widely accessible.

22
00:00:54,259 --> 00:00:54,759
So let's dive in.

23
00:00:56,276 --> 00:00:57,516
This talk has several chapters.

24
00:00:58,096 --> 00:00:59,737
We will go over our goals for the system,

25
00:01:00,237 --> 00:01:03,018
wind simulation, wind motors, wind receivers,

26
00:01:03,438 --> 00:01:04,658
data and shader implementation,

27
00:01:05,058 --> 00:01:06,259
tricks we learned along the way,

28
00:01:06,859 --> 00:01:08,419
and some extra goodies like new approaches

29
00:01:08,439 --> 00:01:10,600
for vegetation levels of detail and interactions.

30
00:01:12,020 --> 00:01:14,061
Each of these chapters tries to answer a simple question.

31
00:01:15,141 --> 00:01:16,021
Why are we doing this?

32
00:01:17,021 --> 00:01:17,762
Where is the wind?

33
00:01:18,642 --> 00:01:19,222
What makes it?

34
00:01:20,082 --> 00:01:20,903
What reacts to it?

35
00:01:21,663 --> 00:01:22,343
How does that work?

36
00:01:23,343 --> 00:01:24,203
And how can we be better?

37
00:01:25,583 --> 00:01:26,764
And after doing all of this work,

38
00:01:27,744 --> 00:01:29,725
how can we reuse it to get further value?

39
00:01:30,805 --> 00:01:32,366
First, let's get our bearings and talk

40
00:01:32,406 --> 00:01:33,406
about the current state of the art.

41
00:01:35,667 --> 00:01:38,888
In a basic wind system, you have wind direction and speed.

42
00:01:39,568 --> 00:01:41,168
Maybe it changes if you maintain state

43
00:01:41,308 --> 00:01:42,489
and accumulate texture movement.

44
00:01:43,809 --> 00:01:45,770
You have a noise texture or a procedural function

45
00:01:45,910 --> 00:01:46,890
that scrolls with the wind.

46
00:01:48,231 --> 00:01:51,012
And then you move mesh vertices as the noise scrolls past.

47
00:01:52,012 --> 00:01:52,432
And you're done.

48
00:01:52,812 --> 00:01:53,872
You've got yourself a wind system.

49
00:01:54,293 --> 00:01:54,893
Go ahead and ship it.

50
00:01:56,911 --> 00:01:58,472
This is what most games seem to use today

51
00:01:58,772 --> 00:01:59,833
and when we were in development.

52
00:02:00,573 --> 00:02:01,694
And if it does everything that you want,

53
00:02:02,054 --> 00:02:02,934
it's really all that you need.

54
00:02:03,835 --> 00:02:05,216
But I personally have been excited to see

55
00:02:05,256 --> 00:02:06,696
some recent games pushing for more.

56
00:02:07,677 --> 00:02:09,858
In this talk, we are going to revisit this system

57
00:02:09,998 --> 00:02:12,039
a few times as a foundational point of reference

58
00:02:12,540 --> 00:02:13,720
and then extend its concepts.

59
00:02:16,041 --> 00:02:17,242
Here's that simple wind system

60
00:02:17,502 --> 00:02:18,983
in one of our wind test scenes.

61
00:02:20,164 --> 00:02:22,005
Now this looks fine, it's certainly shippable,

62
00:02:22,745 --> 00:02:25,206
but it's lacking a level of interactivity and dynamism.

63
00:02:30,890 --> 00:02:32,831
Okay, so what did we set out to do and why?

64
00:02:33,351 --> 00:02:34,772
What could a richer system get us?

65
00:02:35,512 --> 00:02:36,493
Our player is powerful.

66
00:02:36,773 --> 00:02:38,274
How can we extend that to our environment?

67
00:02:39,094 --> 00:02:40,695
We have three goals for the shape of the wind.

68
00:02:42,056 --> 00:02:43,397
The player should be able to observe

69
00:02:43,477 --> 00:02:44,597
if their action's affected wind.

70
00:02:45,098 --> 00:02:46,799
And it probably should, they're playing as a god.

71
00:02:48,340 --> 00:02:49,460
The player should be able to observe

72
00:02:49,500 --> 00:02:50,701
which way the wind is blowing.

73
00:02:51,881 --> 00:02:53,783
But at the same time, the player should be able

74
00:02:53,803 --> 00:02:56,364
to observe spatial variety of speed or direction.

75
00:02:57,316 --> 00:02:59,917
Now a reminder that able to observe and must observe

76
00:03:00,318 --> 00:03:01,218
are two different goals.

77
00:03:01,818 --> 00:03:03,339
We aimed for subtlety in an effort

78
00:03:03,379 --> 00:03:04,400
to avoid being distracting.

79
00:03:05,800 --> 00:03:08,542
If we cannot achieve these three goals in most conditions,

80
00:03:08,902 --> 00:03:10,823
I would say that the complexity increase of our system

81
00:03:10,863 --> 00:03:11,423
is not worth it.

82
00:03:13,764 --> 00:03:15,365
When developing our assets and workflows,

83
00:03:15,705 --> 00:03:18,066
we need to respect those goals plus a few more.

84
00:03:19,447 --> 00:03:21,348
At a bare minimum, I think we can do better

85
00:03:21,588 --> 00:03:23,229
than if wind, then wiggle.

86
00:03:23,931 --> 00:03:25,391
Let's not just improve functionality,

87
00:03:25,611 --> 00:03:27,472
but aim for better results, even in conditions

88
00:03:27,552 --> 00:03:29,212
that don't require a fully dynamic system.

89
00:03:30,692 --> 00:03:31,973
An isolated model should look good

90
00:03:32,013 --> 00:03:34,353
when wind is blowing across it, for all wind speeds,

91
00:03:35,653 --> 00:03:37,614
and a group of models should look good together,

92
00:03:37,934 --> 00:03:39,154
when wind is blowing across them.

93
00:03:39,894 --> 00:03:41,655
In other words, neighboring models should appear

94
00:03:41,715 --> 00:03:42,855
cohesive in their behavior.

95
00:03:44,235 --> 00:03:45,215
Now that's a lot of constraints,

96
00:03:45,615 --> 00:03:47,196
so given our fantasy setting and style,

97
00:03:48,076 --> 00:03:50,156
we didn't constrain ourselves to realistic behavior,

98
00:03:50,376 --> 00:03:51,377
but believable behavior.

99
00:03:52,720 --> 00:03:55,222
Now, I kind of made up that last one for this presentation,

100
00:03:55,302 --> 00:03:57,164
but it does reflect my mindset during development.

101
00:03:57,324 --> 00:03:58,785
This was never PBR for wind.

102
00:04:00,247 --> 00:04:02,269
I like to think that what we shipped achieves these goals.

103
00:04:02,769 --> 00:04:04,791
Let's jump back to our test level and see what it adds.

104
00:04:06,873 --> 00:04:08,354
We can generate environmental effects,

105
00:04:08,755 --> 00:04:09,716
like the wind from that fan.

106
00:04:11,797 --> 00:04:13,139
Attacks can affect their surroundings.

107
00:04:15,241 --> 00:04:17,002
And you can throw the axe at or near anything

108
00:04:17,242 --> 00:04:18,063
and watch as it reacts.

109
00:04:23,217 --> 00:04:24,278
So let's get into how we built it.

110
00:04:24,898 --> 00:04:26,739
First, we need a place for the wind description to live.

111
00:04:27,980 --> 00:04:29,741
We're gonna use what we already know as a launch pad

112
00:04:30,121 --> 00:04:31,922
and modify it to achieve our established goals.

113
00:04:34,164 --> 00:04:34,984
With that simple system,

114
00:04:35,444 --> 00:04:37,045
we have a single wind vector for the environment.

115
00:04:38,106 --> 00:04:39,447
And everything uses that value.

116
00:04:39,847 --> 00:04:41,108
So the wind is the same everywhere,

117
00:04:41,328 --> 00:04:42,449
no matter where we are interested.

118
00:04:43,889 --> 00:04:45,510
We need wind to vary in space and time.

119
00:04:46,211 --> 00:04:47,732
Alone, this could be procedurally modeled

120
00:04:47,752 --> 00:04:48,632
with just a bunch of noise.

121
00:04:49,052 --> 00:04:49,713
And if you can afford it,

122
00:04:50,173 --> 00:04:51,654
more layers of noise almost always looks better.

123
00:04:53,022 --> 00:04:55,163
But to highlight local effects and player actions,

124
00:04:55,463 --> 00:04:56,263
we need more control.

125
00:04:56,904 --> 00:04:59,385
We do this by storing and updating lots of wind values

126
00:04:59,525 --> 00:05:00,545
within a volume of space.

127
00:05:02,787 --> 00:05:05,208
Now, here's an in-game close-up of player attacks generating

128
00:05:05,268 --> 00:05:06,348
wind within this volume.

129
00:05:07,149 --> 00:05:09,210
Here, wind strength is in XYZ and is

130
00:05:09,270 --> 00:05:12,131
visualized as RGB, viewed as horizontal slices

131
00:05:12,452 --> 00:05:13,252
of the volume texture.

132
00:05:14,333 --> 00:05:16,554
Now, you could theoretically use any kind of fluid simulation

133
00:05:16,594 --> 00:05:17,754
to update each frame, 2D or 3D.

134
00:05:19,052 --> 00:05:21,634
For our game, it's a simple advection diffusion simulation

135
00:05:21,794 --> 00:05:22,475
in three dimensions.

136
00:05:22,955 --> 00:05:25,177
We render in the wind vectors, we blur them,

137
00:05:25,497 --> 00:05:27,979
and then we sample backwards to advance the wind forwards.

138
00:05:29,980 --> 00:05:31,801
Now, if you saw Rupert's talk earlier in the week

139
00:05:32,502 --> 00:05:33,803
on implementation and optimization,

140
00:05:34,323 --> 00:05:36,244
you know how much I'm lying when I say that it's simple.

141
00:05:37,085 --> 00:05:38,966
If you missed it and are interested in a purely technical

142
00:05:39,026 --> 00:05:41,368
deep dive of our fluid sim, check it out

143
00:05:41,388 --> 00:05:42,729
when it gets posted on the GDC Vault.

144
00:05:43,369 --> 00:05:44,890
Rupert was a great collaborator and made

145
00:05:44,910 --> 00:05:47,332
it easy to treat the sim volume as a black box that just works.

146
00:05:49,634 --> 00:05:51,655
Our wind simulation volume covers a pretty large area.

147
00:05:52,475 --> 00:05:55,676
Its footprint is 32 by 32 meters, and it's 16 meters tall.

148
00:05:56,037 --> 00:05:57,557
You can see Kratos there for scale reference.

149
00:05:59,098 --> 00:06:01,039
Our 3D texture is at a one meter resolution.

150
00:06:01,839 --> 00:06:03,219
We aren't limited to cube voxels,

151
00:06:03,500 --> 00:06:07,221
but tests with flattened or tall voxels

152
00:06:07,461 --> 00:06:09,602
didn't yield any strong winds for our use cases.

153
00:06:11,163 --> 00:06:12,663
To get more out of our interactive area,

154
00:06:12,943 --> 00:06:14,744
we center it on a point in front of the camera.

155
00:06:15,404 --> 00:06:17,265
Now we still need to simulate something behind the player,

156
00:06:17,325 --> 00:06:18,366
so we only push forward about 25%.

157
00:06:20,164 --> 00:06:22,566
To be clear, we also do this looking on the vertical axis as well,

158
00:06:22,787 --> 00:06:26,851
so the portion of interactive volume on screen is something like 24 by 24 by 12 meters.

159
00:06:27,851 --> 00:06:30,194
The goal in tuning these numbers is feature resolution

160
00:06:30,434 --> 00:06:32,516
and covering the distances that the player can throw the axe,

161
00:06:32,636 --> 00:06:34,498
whether it's as far or as high as possible.

162
00:06:37,361 --> 00:06:40,604
So now that we have a system that lets us control wind across space and time,

163
00:06:41,144 --> 00:06:42,445
how do we actually manipulate that?

164
00:06:43,006 --> 00:06:44,207
How do we make something like that fan?

165
00:06:46,296 --> 00:06:48,457
Our wind primitive is called a wind motor.

166
00:06:49,037 --> 00:06:50,218
And there are a couple different behaviors.

167
00:06:50,578 --> 00:06:51,718
We have three basic shapes.

168
00:06:52,639 --> 00:06:56,621
We have spheres, cylinders, and cones.

169
00:06:57,601 --> 00:06:59,962
A cone is just a cylinder with one of its radii set to zero.

170
00:07:00,982 --> 00:07:02,463
We can animate these shapes' strengths,

171
00:07:02,763 --> 00:07:04,724
positions, orientations, and scales,

172
00:07:05,264 --> 00:07:06,625
and their wind output is rendered

173
00:07:06,665 --> 00:07:07,725
into the simulation volume.

174
00:07:09,586 --> 00:07:10,407
So what is their output?

175
00:07:10,667 --> 00:07:12,147
Well, we have three simple distributions.

176
00:07:13,048 --> 00:07:15,889
Directional motors emit wind along their primary axis.

177
00:07:17,845 --> 00:07:20,247
Omni motors emit wind outwards from a central point.

178
00:07:22,468 --> 00:07:25,030
And vortex motors emit wind around the primary axis.

179
00:07:27,972 --> 00:07:30,774
We also have a special fourth type of motor, the wake motor.

180
00:07:32,255 --> 00:07:33,636
This outputs wind in the direction

181
00:07:33,656 --> 00:07:35,678
that it travels proportional to its speed.

182
00:07:35,698 --> 00:07:40,441
I'm going to pause here for a second.

183
00:07:41,302 --> 00:07:43,423
These arrows are showing the pure direction of travel.

184
00:07:44,064 --> 00:07:46,426
What we found works better is to have the directions fan out

185
00:07:46,446 --> 00:07:46,806
a little bit.

186
00:07:47,752 --> 00:07:49,753
So we combined a direction away from the motor center,

187
00:07:50,434 --> 00:07:52,775
and we do this with equal weight before scaling by speed.

188
00:07:54,236 --> 00:07:56,538
This gives us a sort of pine cone shape for the wake motor.

189
00:07:57,679 --> 00:07:58,739
And here's the output in motion.

190
00:07:59,840 --> 00:08:01,842
This will be clear in a moment with an in-game example using

191
00:08:01,862 --> 00:08:02,602
the full simulation.

192
00:08:04,718 --> 00:08:06,940
And one last thing, we use a two frame average

193
00:08:07,301 --> 00:08:08,061
for the motion input.

194
00:08:08,502 --> 00:08:10,403
Now this gives us a little more outward angle

195
00:08:10,543 --> 00:08:12,745
on tight curved paths, like an ax swing.

196
00:08:13,466 --> 00:08:14,406
Now you might not need this,

197
00:08:15,067 --> 00:08:16,968
and honestly, we might not need this either.

198
00:08:17,549 --> 00:08:18,390
It was not intentional.

199
00:08:19,430 --> 00:08:21,172
Late in the project, we found that we were doing this

200
00:08:21,232 --> 00:08:22,673
accidentally by computing the distance

201
00:08:22,753 --> 00:08:24,034
between the current frame position

202
00:08:24,314 --> 00:08:26,416
and the previous frame's previous position.

203
00:08:27,337 --> 00:08:29,298
I fixed the bug, and well, it looked better before

204
00:08:29,318 --> 00:08:30,759
when we'd authored most of our things,

205
00:08:30,840 --> 00:08:33,322
so I undid the fix, renamed the variable names

206
00:08:33,342 --> 00:08:33,922
to be more honest.

207
00:08:34,756 --> 00:08:35,196
Game of the year.

208
00:08:39,919 --> 00:08:41,599
So let's take a look at some in-game examples.

209
00:08:43,500 --> 00:08:45,181
We get a lot of mileage out of wake motors.

210
00:08:45,702 --> 00:08:47,502
It's easily our most used wind primitive.

211
00:08:48,063 --> 00:08:50,284
We put them in effects that spawn on weapons,

212
00:08:51,104 --> 00:08:52,625
so we get a free ride from animation.

213
00:08:56,267 --> 00:08:58,608
We create libraries of motors with animations to spawn,

214
00:08:58,828 --> 00:09:00,109
like this large burst instance.

215
00:09:09,569 --> 00:09:11,471
Here's a better look at that fan from our test level.

216
00:09:12,492 --> 00:09:13,813
Now we didn't use directional motors

217
00:09:13,893 --> 00:09:14,914
quite as much as I thought we would.

218
00:09:15,755 --> 00:09:17,717
I expected, for example, the dragon boss fight

219
00:09:17,757 --> 00:09:20,319
to use them a lot, but that battle was in a dead,

220
00:09:20,399 --> 00:09:21,940
rocky area, so there was nothing there

221
00:09:21,960 --> 00:09:22,841
to really blow around.

222
00:09:26,545 --> 00:09:27,626
And I love this special attack.

223
00:09:27,646 --> 00:09:29,267
This is textbook vortex motor.

224
00:09:34,432 --> 00:09:34,792
So cool.

225
00:09:37,112 --> 00:09:40,593
As the player levels up their gear, we increase the wind strength of their attacks.

226
00:09:41,274 --> 00:09:42,894
It's a subtle effect, but you can feel it.

227
00:09:58,339 --> 00:10:02,080
And here's my best windy attack combo with late game items in total isolation.

228
00:10:03,232 --> 00:10:05,033
You can see how lots of moving wake motors

229
00:10:05,373 --> 00:10:08,436
can begin to craft any of the other primitive shapes

230
00:10:08,696 --> 00:10:09,877
based on what the animation is doing.

231
00:10:13,380 --> 00:10:15,202
You can also make a huge directional motor

232
00:10:15,662 --> 00:10:16,823
larger than the volume itself

233
00:10:17,624 --> 00:10:18,965
and use that to shape wind for your level.

234
00:10:19,706 --> 00:10:20,787
At least, that's what we thought,

235
00:10:21,287 --> 00:10:23,049
and it was our initial approach.

236
00:10:23,129 --> 00:10:23,989
E3 2016 used it.

237
00:10:24,710 --> 00:10:25,631
But there's a problem with it.

238
00:10:26,311 --> 00:10:27,672
It tends to produce uneven results.

239
00:10:28,293 --> 00:10:29,774
When you look in the direction wind is going,

240
00:10:30,195 --> 00:10:30,875
it's very strong.

241
00:10:32,743 --> 00:10:34,284
But when you look back where it's coming from,

242
00:10:34,825 --> 00:10:35,445
it's pretty weak.

243
00:10:36,826 --> 00:10:38,708
Tuning this is a series of painful compromises.

244
00:10:39,068 --> 00:10:39,729
It just doesn't work.

245
00:10:41,770 --> 00:10:43,512
So in that example, you may have noticed

246
00:10:43,532 --> 00:10:45,514
that the simulation debug view shows

247
00:10:45,554 --> 00:10:47,355
a gradient that matches the behavior that we saw.

248
00:10:48,456 --> 00:10:49,477
Why do we see this gradient?

249
00:10:50,117 --> 00:10:52,039
Well, the fluid is accelerating as expected,

250
00:10:52,600 --> 00:10:55,502
but there's nothing outside the box to push in from the edges.

251
00:10:55,922 --> 00:10:58,204
So wind is slower on that side.

252
00:10:58,705 --> 00:10:59,786
This was something that we needed to fix.

253
00:11:01,915 --> 00:11:04,258
So far, we've been trying to use the simulation

254
00:11:04,418 --> 00:11:05,879
to replace the simple wind system

255
00:11:05,899 --> 00:11:06,960
that I described in the intro.

256
00:11:08,481 --> 00:11:10,523
But we can solve this gradient issue

257
00:11:10,904 --> 00:11:11,945
by using the simple system

258
00:11:12,025 --> 00:11:13,966
to define our ambient wind baseline.

259
00:11:14,707 --> 00:11:16,849
We use this instead of comically large motors,

260
00:11:17,209 --> 00:11:19,011
and this lets wind exist outside the box

261
00:11:19,311 --> 00:11:20,733
and keeps the dynamic systems tidy.

262
00:11:21,834 --> 00:11:24,056
Plus, we can use it to add an extra layer of noise

263
00:11:24,156 --> 00:11:24,856
at the system level,

264
00:11:25,057 --> 00:11:26,958
creating localized pockets of gust and calm.

265
00:11:30,101 --> 00:11:32,221
Here's the same scene with the level wind altered

266
00:11:32,281 --> 00:11:34,022
using the ambient wind component of our system.

267
00:11:34,982 --> 00:11:36,762
With ambient wind handling the large,

268
00:11:37,082 --> 00:11:38,102
far-reaching wind features,

269
00:11:38,622 --> 00:11:39,943
combined with dynamic wind handling

270
00:11:39,963 --> 00:11:41,463
the closer interactive wind features,

271
00:11:42,063 --> 00:11:43,263
we have a full and rich description

272
00:11:43,443 --> 00:11:45,224
of the movement of air within our game world.

273
00:11:47,944 --> 00:11:48,984
So we know where the wind is.

274
00:11:49,724 --> 00:11:50,424
What reacts to it?

275
00:11:52,105 --> 00:11:52,705
Wind receivers.

276
00:11:54,285 --> 00:11:56,365
There are four receiver types that respond to wind,

277
00:11:56,805 --> 00:11:58,686
and I've listed these in order of how excited I am

278
00:11:58,706 --> 00:11:59,426
to talk to you about them.

279
00:12:01,602 --> 00:12:03,003
Audio, this is going to be quick,

280
00:12:03,203 --> 00:12:04,403
because I don't know what I'm talking about.

281
00:12:06,224 --> 00:12:07,944
Sometimes audio wants to know the wind speed.

282
00:12:09,265 --> 00:12:11,025
So we use a custom Wwise attribute

283
00:12:11,385 --> 00:12:13,126
so that they can use this value to mix.

284
00:12:14,987 --> 00:12:15,607
Told you it'd be quick.

285
00:12:16,667 --> 00:12:18,888
Cloth, not really thrilled to talk about this one,

286
00:12:18,928 --> 00:12:20,929
because it didn't work for us.

287
00:12:21,449 --> 00:12:22,389
But I'll tell you what we tried.

288
00:12:23,870 --> 00:12:26,230
Each cloth object would sample the wind system once

289
00:12:26,350 --> 00:12:27,431
at its transform center.

290
00:12:28,631 --> 00:12:30,812
That force would be applied to each simulation point

291
00:12:30,852 --> 00:12:31,192
on the mesh.

292
00:12:32,237 --> 00:12:34,779
scaled down by the dot product of the force direction

293
00:12:34,819 --> 00:12:35,540
and cloth normal.

294
00:12:36,240 --> 00:12:38,042
This is intended to give us variety of motion

295
00:12:38,122 --> 00:12:39,423
as cloth rotates and sways.

296
00:12:41,164 --> 00:12:42,766
And as always, we scroll some noise.

297
00:12:44,988 --> 00:12:45,929
Now, why did this not ship?

298
00:12:46,549 --> 00:12:48,651
Well, we overhauled a lot of things for the new God of War,

299
00:12:49,051 --> 00:12:49,692
you might have noticed.

300
00:12:50,773 --> 00:12:51,894
And we have to make compromises.

301
00:12:52,674 --> 00:12:53,996
I think that we made a lot of the right ones,

302
00:12:54,356 --> 00:12:55,777
but the cloth system is one component

303
00:12:55,817 --> 00:12:56,778
that did not get an upgrade.

304
00:12:57,799 --> 00:12:59,280
Adding wind exposed a lot of problems with it.

305
00:12:59,835 --> 00:13:01,255
and we'd like to revisit wind on cloth

306
00:13:01,355 --> 00:13:03,016
and the cloth system as a whole going forwards.

307
00:13:04,036 --> 00:13:05,536
But that was a lower priority for this game

308
00:13:05,576 --> 00:13:08,577
because we're still able to have cloth moving in game.

309
00:13:09,578 --> 00:13:11,758
Some of those are non-interactive pre-simmed elements.

310
00:13:12,699 --> 00:13:13,759
These are mostly in cinematics.

311
00:13:18,780 --> 00:13:20,381
Or objects that serve a design function

312
00:13:21,421 --> 00:13:22,522
like the flag for this boat dock.

313
00:13:27,034 --> 00:13:28,975
We are also able to get interactivity

314
00:13:29,276 --> 00:13:30,917
by skipping the cloth system completely

315
00:13:31,257 --> 00:13:32,258
and using mesh receivers.

316
00:13:32,938 --> 00:13:33,899
I'll talk about those shortly.

317
00:13:34,839 --> 00:13:37,221
These objects don't collide, but they do respond to wind

318
00:13:37,521 --> 00:13:38,702
and therefore to player action.

319
00:13:41,584 --> 00:13:41,984
Particles.

320
00:13:43,645 --> 00:13:45,527
Each particle samples the wind speed

321
00:13:45,567 --> 00:13:46,847
and direction at its location.

322
00:13:47,568 --> 00:13:49,309
Artists can control how much a particle

323
00:13:49,349 --> 00:13:50,390
reacts to this information.

324
00:13:51,651 --> 00:13:53,852
Conceptually, particles respond in the same way

325
00:13:53,892 --> 00:13:56,554
that they do to drag, but in a moving fluid.

326
00:13:57,871 --> 00:14:00,632
So a slow or stationary particle will speed up

327
00:14:00,672 --> 00:14:01,592
to match the fluid around it,

328
00:14:02,273 --> 00:14:04,633
while a fast-moving particle will slow down.

329
00:14:06,074 --> 00:14:08,595
Each frame, we compute the impulse each particle

330
00:14:08,635 --> 00:14:09,655
would need to match the wind,

331
00:14:10,215 --> 00:14:12,136
and we apply that, scaled by the particle's

332
00:14:12,256 --> 00:14:13,257
wind influence value.

333
00:14:13,717 --> 00:14:14,997
You could also think of this as a mass.

334
00:14:17,038 --> 00:14:19,259
The wind speed that it targets is the full combination

335
00:14:19,299 --> 00:14:21,900
of both the ambient and the dynamic wind values.

336
00:14:23,680 --> 00:14:25,401
And this showed a lot of promise in tests early on.

337
00:14:28,115 --> 00:14:29,116
This was an exciting test.

338
00:14:29,496 --> 00:14:31,878
It's a pretty old one, before particles moved to the GPU

339
00:14:32,038 --> 00:14:33,058
and before the sun grew hair.

340
00:14:34,159 --> 00:14:36,160
There's a lot of interesting movement driven by interactions.

341
00:14:36,760 --> 00:14:37,681
But I have to be honest about it.

342
00:14:38,201 --> 00:14:39,342
Everything here is tuned precisely

343
00:14:39,382 --> 00:14:40,363
to look good in this scene.

344
00:14:40,603 --> 00:14:42,624
And there's no level wind present to disrupt things.

345
00:14:45,705 --> 00:14:46,926
We still ship this functionality,

346
00:14:47,506 --> 00:14:48,927
but the wind motors and the settings

347
00:14:48,967 --> 00:14:51,068
that we used on axe attacks and within levels,

348
00:14:51,509 --> 00:14:54,610
they struck a balance that, for particles, well it works,

349
00:14:55,070 --> 00:14:56,211
but it's missing some of the excitement

350
00:14:56,251 --> 00:14:57,792
of that early particle test scene.

351
00:14:58,873 --> 00:15:00,734
Now, this is not a knock on the effects team.

352
00:15:00,934 --> 00:15:02,655
They were very engaged and enthusiastic

353
00:15:02,695 --> 00:15:03,915
towards getting everything that they could

354
00:15:03,955 --> 00:15:04,536
out of the system.

355
00:15:05,516 --> 00:15:07,397
But if the effect looks better without responding to wind,

356
00:15:07,978 --> 00:15:09,779
well, you know, I've got to agree,

357
00:15:09,999 --> 00:15:11,600
ignoring the force is the right decision.

358
00:15:12,638 --> 00:15:14,720
On the tech art side, we had oversimplified

359
00:15:14,760 --> 00:15:15,901
and we'd lost some crucial control.

360
00:15:16,301 --> 00:15:17,082
And this was my mistake.

361
00:15:19,604 --> 00:15:21,325
So what do I wish that I had done differently?

362
00:15:21,906 --> 00:15:23,067
How can we improve going forward?

363
00:15:23,887 --> 00:15:25,088
Well, I want to explore two things.

364
00:15:26,610 --> 00:15:28,751
First, I think that if we had separate controls

365
00:15:28,851 --> 00:15:31,474
for the ambient wind and dynamic wind influences,

366
00:15:32,034 --> 00:15:34,136
we could have let particle systems ignore the level wind

367
00:15:34,656 --> 00:15:36,258
and only respond to the dynamic effects.

368
00:15:37,118 --> 00:15:38,740
Now, this seems like a hack and a bad idea.

369
00:15:38,760 --> 00:15:40,401
It's why we didn't do it in the first place.

370
00:15:41,221 --> 00:15:43,321
But in practice, effects artists tend

371
00:15:43,341 --> 00:15:46,142
to bake in some ambient scale shaping for their effects

372
00:15:46,202 --> 00:15:46,482
anyway.

373
00:15:47,402 --> 00:15:48,923
And level wind isn't always finalized

374
00:15:48,963 --> 00:15:50,043
before effects work is done.

375
00:15:51,163 --> 00:15:53,544
Also, strong ambient wind speeds tended

376
00:15:53,564 --> 00:15:55,324
to push particles off screen before they could even

377
00:15:55,364 --> 00:15:56,164
fade in sometimes.

378
00:15:58,485 --> 00:16:01,685
Second, our particle system already used noise fields

379
00:16:02,006 --> 00:16:02,966
before wind was added.

380
00:16:03,806 --> 00:16:06,527
The thinking was we could keep those components isolated.

381
00:16:07,560 --> 00:16:09,640
But I think going forward that blending between

382
00:16:09,700 --> 00:16:13,082
different turbulent settings for calm and windy scenarios

383
00:16:13,302 --> 00:16:15,382
could prevent some of that scrolling particles look

384
00:16:15,402 --> 00:16:17,063
that we shipped under strong wind conditions.

385
00:16:20,564 --> 00:16:20,904
Meshes.

386
00:16:25,566 --> 00:16:26,886
A lot of refinement went into this one.

387
00:16:28,147 --> 00:16:29,527
It's used widely across the game.

388
00:16:30,047 --> 00:16:32,148
Characters, props, fake cloth.

389
00:16:33,609 --> 00:16:34,989
There are five components to this system,

390
00:16:35,369 --> 00:16:36,830
two of which are new for dynamic wind.

391
00:16:38,642 --> 00:16:40,083
How do those five components relate to each other?

392
00:16:40,623 --> 00:16:43,164
Well, ART authors two of them for each asset,

393
00:16:44,084 --> 00:16:46,945
per vertex data, defining which parts of the model move

394
00:16:47,245 --> 00:16:48,065
and which parts don't.

395
00:16:48,785 --> 00:16:50,086
Tools can help with authoring this.

396
00:16:51,546 --> 00:16:53,607
And model parameters, which describe

397
00:16:53,647 --> 00:16:54,927
how the moving parts behave.

398
00:16:55,627 --> 00:16:57,528
It's good to build up a library of these settings.

399
00:16:59,168 --> 00:17:01,629
These are both used by the vertex shader on the text side.

400
00:17:02,209 --> 00:17:04,310
And this is all that you need for a static wind system.

401
00:17:06,386 --> 00:17:09,128
For dynamics, we add state for each model instance.

402
00:17:10,189 --> 00:17:11,450
The vertex shader uses this.

403
00:17:12,650 --> 00:17:14,392
And we have a compute shader that

404
00:17:14,452 --> 00:17:17,274
grabs all of the states each frame and updates them.

405
00:17:18,454 --> 00:17:21,156
This mostly involves scrolling noise and smoothing

406
00:17:21,196 --> 00:17:22,357
the raw wind signal.

407
00:17:23,858 --> 00:17:25,139
Some of the model parameters are used

408
00:17:25,159 --> 00:17:26,460
to adjust this update behavior.

409
00:17:28,441 --> 00:17:29,542
Now we'll go over each of these.

410
00:17:30,323 --> 00:17:31,684
First, let's start with the vertex data.

411
00:17:32,945 --> 00:17:35,606
We use four floats to store two data values.

412
00:17:36,962 --> 00:17:38,443
One float is for the wind mask.

413
00:17:38,923 --> 00:17:40,703
This attenuates the movement due to wind.

414
00:17:41,283 --> 00:17:43,144
It's usually a gradient from zero to one,

415
00:17:43,384 --> 00:17:44,804
representing the normalized distance

416
00:17:44,844 --> 00:17:47,225
from the root vertices, the verts that don't move.

417
00:17:48,845 --> 00:17:50,526
The other stores three floats,

418
00:17:51,266 --> 00:17:53,147
the other three floats store the relative location

419
00:17:53,367 --> 00:17:54,227
of that root vertex.

420
00:17:54,767 --> 00:17:57,088
This is shown here as XYZ as RGB.

421
00:17:58,178 --> 00:18:00,760
We store this as a delta rather than an absolute position.

422
00:18:01,560 --> 00:18:03,060
This allows for translation of the art

423
00:18:03,281 --> 00:18:05,982
without re-computing colors, and it means smaller numbers,

424
00:18:06,182 --> 00:18:07,142
which helps with precision.

425
00:18:09,163 --> 00:18:10,924
Next, we will look at the object level parameters.

426
00:18:12,264 --> 00:18:13,585
We have three categories of these.

427
00:18:14,145 --> 00:18:16,226
We have leaf parameters, which control

428
00:18:16,286 --> 00:18:20,848
model shaping and posing, settle parameters, which directly

429
00:18:20,868 --> 00:18:23,269
control some broader movement over multiple frames,

430
00:18:24,429 --> 00:18:25,290
and tree parameters.

431
00:18:26,211 --> 00:18:27,992
For models that activate these tree controls,

432
00:18:28,372 --> 00:18:30,333
we get a second hierarchy level to our shaping,

433
00:18:30,773 --> 00:18:31,793
centered at the object root,

434
00:18:32,513 --> 00:18:33,994
so we don't need additional vertex data

435
00:18:34,294 --> 00:18:35,815
or skinning support from character tech art.

436
00:18:36,915 --> 00:18:40,156
Now, this is a lot of control, and it can be overwhelming,

437
00:18:40,657 --> 00:18:42,917
so we took extra care to make sure the defaults were good.

438
00:18:43,878 --> 00:18:45,178
A new model should only need to change

439
00:18:45,238 --> 00:18:46,359
two or three of these settings,

440
00:18:47,199 --> 00:18:48,400
but honestly, learning which ones

441
00:18:48,480 --> 00:18:50,240
is still kind of a challenge for the artists.

442
00:18:51,071 --> 00:18:52,732
Building up a library so that artists

443
00:18:52,752 --> 00:18:54,994
can use a similar model settings as a starting point

444
00:18:55,254 --> 00:18:56,055
has been very helpful.

445
00:18:58,737 --> 00:19:00,038
Now let's go over how each of those

446
00:19:00,078 --> 00:19:01,540
behave within the vertex shader.

447
00:19:03,982 --> 00:19:06,003
Movement scale is the total distance

448
00:19:06,184 --> 00:19:08,646
that the freest verts can move from the rest position.

449
00:19:09,486 --> 00:19:10,867
Higher values mean more movement,

450
00:19:11,708 --> 00:19:13,430
and we scale this value by the wind mask

451
00:19:13,470 --> 00:19:14,250
within the vertex shader.

452
00:19:15,563 --> 00:19:18,225
Verts move by the average of the wind vector and the noise

453
00:19:18,265 --> 00:19:18,546
vector.

454
00:19:18,966 --> 00:19:20,307
The wind vector gives us the lean,

455
00:19:20,767 --> 00:19:22,189
and the noise vector gives us some wiggle.

456
00:19:24,651 --> 00:19:27,113
Density controls the scale of those noise features.

457
00:19:27,874 --> 00:19:30,436
We actually allow this parameter to have two values, one

458
00:19:30,476 --> 00:19:32,017
for low speeds and one for high speeds.

459
00:19:32,718 --> 00:19:33,999
And we blend between those settings

460
00:19:34,059 --> 00:19:36,961
as wind speeds increase up to about 20 to 30 meters

461
00:19:37,001 --> 00:19:37,382
per second.

462
00:19:38,703 --> 00:19:40,264
Most models use the same value for both,

463
00:19:40,925 --> 00:19:42,706
but some models really benefit from having

464
00:19:42,726 --> 00:19:43,427
the separate controls.

465
00:19:46,390 --> 00:19:49,292
Bend controls how straight the elements are when they lean.

466
00:19:50,092 --> 00:19:52,834
A higher value isolates movement to just the tip vertices.

467
00:19:54,035 --> 00:19:55,435
This is implemented as the exponent

468
00:19:55,476 --> 00:19:56,736
that we raise the wind mask to.

469
00:19:56,756 --> 00:19:59,498
It's basically a gamma ramp on that grayscale wind mask.

470
00:20:00,778 --> 00:20:03,880
For example, a value of 1 gives us a straight piece,

471
00:20:04,361 --> 00:20:06,402
while a value of 2 can give us a parabolic bend.

472
00:20:09,844 --> 00:20:11,384
Now, in the vertex shader, we get movement

473
00:20:11,585 --> 00:20:12,645
by translating verts.

474
00:20:13,640 --> 00:20:15,782
We do not rotate them like I've seen some games do.

475
00:20:16,423 --> 00:20:18,665
This avoids slow trigonometric functions in the shader,

476
00:20:19,485 --> 00:20:20,666
but it can introduce some stretching,

477
00:20:21,087 --> 00:20:22,288
so we need to preserve lengths.

478
00:20:23,729 --> 00:20:25,070
We do this by checking the distance

479
00:20:25,090 --> 00:20:26,251
to the root before movement,

480
00:20:27,312 --> 00:20:29,233
and scaling back towards or away from the root

481
00:20:29,514 --> 00:20:30,254
to match the length.

482
00:20:31,395 --> 00:20:33,217
This helps prevent ground penetration,

483
00:20:33,637 --> 00:20:35,919
and it gives us the appearance of a resisted rotation

484
00:20:36,019 --> 00:20:36,960
under extreme forces.

485
00:20:38,081 --> 00:20:39,702
Now, we don't have to scale all the way back.

486
00:20:40,357 --> 00:20:42,518
We can use linear interpolation to correct the stretching

487
00:20:42,558 --> 00:20:43,719
by just a fractional amount.

488
00:20:45,181 --> 00:20:46,902
And that's what our stretchiness parameter controls.

489
00:20:47,622 --> 00:20:48,984
Some stretch usually looks better

490
00:20:49,044 --> 00:20:50,365
than a rigid full correction.

491
00:20:51,105 --> 00:20:52,707
Our default is a 20% stretch.

492
00:20:53,407 --> 00:20:54,908
Now, I goofed on this slide, and I

493
00:20:54,968 --> 00:20:56,169
flipped the low and high videos.

494
00:20:56,389 --> 00:20:57,230
The labels are correct.

495
00:20:57,610 --> 00:20:58,091
Sorry about that.

496
00:21:00,473 --> 00:21:00,893
Stiffness.

497
00:21:01,814 --> 00:21:03,475
We can create the appearance of stiff elements

498
00:21:03,595 --> 00:21:05,317
by scaling the vertex texture coordinates

499
00:21:05,617 --> 00:21:06,658
towards the element root.

500
00:21:07,533 --> 00:21:09,313
This is a lot like adjusting noise density,

501
00:21:09,694 --> 00:21:11,774
but it keeps the effect centered on the root.

502
00:21:12,795 --> 00:21:14,415
Stiffer values can give low variation

503
00:21:14,615 --> 00:21:15,736
across an individual element

504
00:21:16,216 --> 00:21:17,816
and high variation between elements.

505
00:21:20,877 --> 00:21:22,798
Now with these parameters, I'm jumping ahead a little bit.

506
00:21:23,418 --> 00:21:24,759
We have two sway parameters

507
00:21:24,899 --> 00:21:26,659
that adjust spring properties of the object.

508
00:21:27,540 --> 00:21:28,240
These are stateful,

509
00:21:28,520 --> 00:21:30,681
so the computation is done once in the compute shader,

510
00:21:31,101 --> 00:21:32,882
and the result is passed to the vertex shader.

511
00:21:33,842 --> 00:21:36,163
When I said earlier that we lean verts by the wind vector,

512
00:21:37,478 --> 00:21:37,779
I lied.

513
00:21:38,619 --> 00:21:40,260
It started out that way, but we actually

514
00:21:40,320 --> 00:21:42,141
lean verts by a third sway vector,

515
00:21:42,321 --> 00:21:44,362
which is just pushed around by the wind vector

516
00:21:44,682 --> 00:21:46,643
and pulled back to center by a spring force.

517
00:21:47,123 --> 00:21:48,684
This lets us smooth out that wind signal.

518
00:21:49,624 --> 00:21:52,846
The strength of that spring is this sway spring parameter.

519
00:21:55,167 --> 00:21:57,148
The other sway parameter controls the dampening

520
00:21:57,368 --> 00:21:59,629
of that spring, which affects the settling time

521
00:21:59,669 --> 00:22:00,109
of the model.

522
00:22:04,792 --> 00:22:05,852
Okay, back to the vertex shader.

523
00:22:06,672 --> 00:22:09,535
If we activate tree mode, we get that extra layer of motion.

524
00:22:10,516 --> 00:22:11,957
Trees pivot around the object root,

525
00:22:12,557 --> 00:22:14,859
and we do an additional stretch fix for the tree movements,

526
00:22:15,040 --> 00:22:16,301
just like we do for leaf movements.

527
00:22:18,843 --> 00:22:20,544
Trees also have an additional bend parameter.

528
00:22:21,786 --> 00:22:23,687
It behaves in the same way that the leaf bend does.

529
00:22:24,128 --> 00:22:25,889
It's a power function on the normalized distance,

530
00:22:26,249 --> 00:22:26,750
a gamma curve.

531
00:22:27,851 --> 00:22:29,292
The straight trunk here makes it really easy

532
00:22:29,312 --> 00:22:30,853
to see the differences between a 1.0 linear bend

533
00:22:30,893 --> 00:22:31,494
and a 3.0 cubic bend.

534
00:22:37,750 --> 00:22:39,810
Tree movement scale is just like leaf movement scale.

535
00:22:40,091 --> 00:22:41,631
It's the distance that the tip verts

536
00:22:41,691 --> 00:22:44,672
can move due to tree lean at the highest wind speeds.

537
00:22:47,533 --> 00:22:49,854
And lastly, tree leaf lag is pretty interesting.

538
00:22:50,394 --> 00:22:52,675
Without it, on the left, you can see

539
00:22:52,715 --> 00:22:54,296
that when the tree settles, the leaves

540
00:22:54,356 --> 00:22:55,916
return straight to their rest pose as well.

541
00:22:56,577 --> 00:22:59,057
But we can add a delayed secondary motion for free

542
00:22:59,558 --> 00:23:01,738
by using the sway momentum as though it's

543
00:23:01,758 --> 00:23:03,379
the sway position for the leaves.

544
00:23:04,429 --> 00:23:06,470
Now we already have this momentum computed

545
00:23:06,530 --> 00:23:07,931
because of the dampened spring model.

546
00:23:08,772 --> 00:23:10,232
And using momentum in this way works

547
00:23:10,573 --> 00:23:12,494
because it's the derivative of the position.

548
00:23:13,174 --> 00:23:15,535
And since the derivative of a sinusoidal motion

549
00:23:16,076 --> 00:23:18,237
is the same curve delayed by a quarter phase,

550
00:23:18,657 --> 00:23:21,078
we can lerp towards it to dial in some delay.

551
00:23:22,399 --> 00:23:24,320
Now we only do this when the wind speed is decreasing

552
00:23:24,620 --> 00:23:26,021
because that's when the branches

553
00:23:26,061 --> 00:23:27,362
are the ones leading the motion.

554
00:23:27,382 --> 00:23:32,044
Okay, it's time to get noisy.

555
00:23:32,805 --> 00:23:33,585
What is our noise function?

556
00:23:34,827 --> 00:23:37,289
Our noise base is a three-dimensional texture

557
00:23:37,529 --> 00:23:40,511
computed at game startup filled with random XYZ vectors

558
00:23:40,651 --> 00:23:42,092
that are bound within the unit sphere.

559
00:23:43,213 --> 00:23:44,574
You can use any noise base you like,

560
00:23:44,874 --> 00:23:47,336
and the techniques we're about to discuss

561
00:23:47,516 --> 00:23:48,197
should still apply.

562
00:23:54,041 --> 00:23:56,503
So we extend that base function by using fractal noise.

563
00:23:59,105 --> 00:24:00,986
Fractal noise is usually a weighted sum

564
00:24:01,026 --> 00:24:03,187
of multiple noise samples at various scales.

565
00:24:03,947 --> 00:24:05,568
These scaled samples are called octaves.

566
00:24:06,528 --> 00:24:08,269
The most common method is to reduce the scale

567
00:24:08,309 --> 00:24:09,789
by a power of two for each octave.

568
00:24:10,790 --> 00:24:12,230
And since the features are scaled down,

569
00:24:12,571 --> 00:24:14,331
we scale down their contribution weights as well.

570
00:24:15,472 --> 00:24:17,392
Here's a crude visualization of the contribution curve.

571
00:24:17,833 --> 00:24:18,893
It's an exponential fall off.

572
00:24:21,254 --> 00:24:23,315
This combination of noise gives us a rich signal

573
00:24:23,495 --> 00:24:25,235
with features at a wide range of scales.

574
00:24:27,596 --> 00:24:29,837
Now, usually scaling a noise is pretty straightforward.

575
00:24:30,057 --> 00:24:31,278
You just scale the input coordinates.

576
00:24:32,862 --> 00:24:35,123
But there's a problem with that if the scale is animated,

577
00:24:35,483 --> 00:24:38,866
and ours is, because we blend scales based on wind speed,

578
00:24:39,046 --> 00:24:39,967
which is often changing.

579
00:24:42,288 --> 00:24:44,690
On the left, you can see naive scaling

580
00:24:44,870 --> 00:24:46,411
causes noise features to move.

581
00:24:47,192 --> 00:24:48,733
This effect is worse the farther you are

582
00:24:48,773 --> 00:24:49,593
from the scale center.

583
00:24:50,514 --> 00:24:52,335
We do not want this unintended motion.

584
00:24:53,276 --> 00:24:54,697
On the right is our solution.

585
00:24:55,618 --> 00:24:58,420
We lock noise samples to powers of two scales

586
00:24:58,740 --> 00:25:00,761
using a technique called logarithmic binning.

587
00:25:01,565 --> 00:25:03,226
and we blend and fade between them

588
00:25:03,526 --> 00:25:05,107
to produce our complete noise result.

589
00:25:06,188 --> 00:25:08,970
Put another way, instead of scaling the samples

590
00:25:09,331 --> 00:25:11,132
and keeping their contributions fixed,

591
00:25:11,913 --> 00:25:14,575
we keep the scales fixed and adjust their contributions.

592
00:25:16,936 --> 00:25:18,398
Let's look at that in a little more detail.

593
00:25:19,138 --> 00:25:22,661
Here, we are viewing the continuum of all noise octaves

594
00:25:22,781 --> 00:25:24,322
that have a power of two scale.

595
00:25:25,822 --> 00:25:27,823
Let's say the artist chooses a density scale

596
00:25:27,863 --> 00:25:28,324
of something like 1.3.

597
00:25:28,744 --> 00:25:31,486
The nearest power of two, in this case 1.0,

598
00:25:32,587 --> 00:25:33,608
will be the noise scale

599
00:25:33,868 --> 00:25:35,630
with the most significant contribution.

600
00:25:37,011 --> 00:25:38,332
Instead of an exponential falloff,

601
00:25:38,693 --> 00:25:41,095
we use a triangle falloff centered at the input scale.

602
00:25:42,416 --> 00:25:44,618
And we use four octaves for our fractal noise

603
00:25:44,998 --> 00:25:46,039
weighted by that triangle.

604
00:25:47,580 --> 00:25:50,102
Applying those weights and summing the samples

605
00:25:50,442 --> 00:25:51,423
will give us our final result.

606
00:25:54,704 --> 00:25:59,907
Animated scales will smoothly fade octaves in and out to generate fractal noise that does not move.

607
00:26:01,168 --> 00:26:09,932
A bonus to using these fixed logarithmic scales is that neighboring models with similar but not equal scales will still share some noise features that can scroll across them both.

608
00:26:13,112 --> 00:26:16,214
Now those are some of the ways we've tried to improve the look of individual objects.

609
00:26:16,874 --> 00:26:20,337
Next, we're going to look at how we can improve the visual cohesion of multiple objects.

610
00:26:21,017 --> 00:26:24,380
For that, we will focus on how the compute shader moves noise around.

611
00:26:25,100 --> 00:26:28,523
To make some of these subtleties more easily identifiable for this discussion,

612
00:26:29,063 --> 00:26:30,824
I'm going to demo with some outrageous settings.

613
00:26:34,887 --> 00:26:35,688
I am out of water.

614
00:26:37,189 --> 00:26:38,550
like some really outrageous settings.

615
00:26:39,050 --> 00:26:39,970
We're zoomed out a bit here.

616
00:26:40,270 --> 00:26:41,551
You can see Kratos in the center.

617
00:26:41,571 --> 00:26:42,251
He's very small.

618
00:26:42,711 --> 00:26:45,312
Wind is blowing in a steady direction at a steady speed.

619
00:26:48,213 --> 00:26:50,234
Each object has a world space coordinate.

620
00:26:50,614 --> 00:26:51,434
It's probably obvious.

621
00:26:51,514 --> 00:26:53,275
It's where its center is located in the world.

622
00:26:54,055 --> 00:26:55,716
But it also has a texture space coordinate

623
00:26:56,076 --> 00:26:58,937
where its center is located in the wind noise texture.

624
00:27:00,352 --> 00:27:02,734
To create the effect of noise moving across the object,

625
00:27:03,114 --> 00:27:04,415
we offset its texture coordinates.

626
00:27:04,855 --> 00:27:06,476
And we do this in the opposite direction

627
00:27:06,776 --> 00:27:07,456
that wind is going.

628
00:27:08,197 --> 00:27:09,658
If you track the circle with your eyes,

629
00:27:10,198 --> 00:27:11,779
you will see that the noise features inside it

630
00:27:11,839 --> 00:27:13,260
appear to move down and to the left

631
00:27:13,700 --> 00:27:15,641
relative to the circle's center.

632
00:27:16,621 --> 00:27:17,942
Each object that receives wind

633
00:27:18,022 --> 00:27:19,503
keeps track of its texture offset.

634
00:27:20,224 --> 00:27:22,385
The compute shader moves this coordinate each frame

635
00:27:22,625 --> 00:27:23,886
based on the wind speed and direction

636
00:27:24,086 --> 00:27:25,386
that the object is experiencing.

637
00:27:27,575 --> 00:27:29,176
Now, this works great for coherent wind,

638
00:27:29,496 --> 00:27:31,758
where wind is the same speed and direction everywhere.

639
00:27:32,598 --> 00:27:34,479
It also looks great for more complex weather patterns,

640
00:27:35,420 --> 00:27:36,421
but only for a short time.

641
00:27:37,441 --> 00:27:39,283
Slowly, things seem to get more and more random

642
00:27:39,303 --> 00:27:41,264
until the notion of directionality is lost.

643
00:27:42,505 --> 00:27:44,766
And when we switch back to a more uniform wind pattern,

644
00:27:45,387 --> 00:27:46,788
we don't recover from this damage.

645
00:27:47,848 --> 00:27:48,489
Why could this be?

646
00:27:51,151 --> 00:27:52,692
Let's look at two neighboring objects.

647
00:27:53,352 --> 00:27:54,473
They're neighbors in world space

648
00:27:54,893 --> 00:27:56,174
and they're neighbors in texture space.

649
00:27:57,092 --> 00:27:59,313
Where they overlap, they share some noise features.

650
00:27:59,973 --> 00:28:01,334
And they continue to share these features,

651
00:28:01,534 --> 00:28:03,215
even as they move through the texture together.

652
00:28:04,955 --> 00:28:06,816
But if their directions differ, they

653
00:28:06,836 --> 00:28:07,857
spread apart in the texture.

654
00:28:08,797 --> 00:28:10,017
Now, they're still neighbors in the world.

655
00:28:10,698 --> 00:28:11,958
This creates a disconnect, though.

656
00:28:12,258 --> 00:28:13,559
It's distorting the noise texture.

657
00:28:14,699 --> 00:28:16,360
They shared features at first, but become

658
00:28:16,480 --> 00:28:17,560
isolated as time passes.

659
00:28:19,141 --> 00:28:21,342
The same problem occurs for objects at different speeds.

660
00:28:22,502 --> 00:28:25,684
One solution to this could be to reset their texture position

661
00:28:26,064 --> 00:28:26,664
periodically.

662
00:28:28,338 --> 00:28:29,259
And this already exists.

663
00:28:29,539 --> 00:28:31,160
We've basically rediscovered flow maps.

664
00:28:32,040 --> 00:28:34,581
We use them all the time on surface materials and sky domes.

665
00:28:35,241 --> 00:28:38,382
This Vista flow was done by the amazing Timo Pilihamaki,

666
00:28:38,983 --> 00:28:40,523
one of our environment art leads on the project.

667
00:28:41,383 --> 00:28:42,624
You can see more of this kind of stuff

668
00:28:42,724 --> 00:28:43,904
on our team's art station drop.

669
00:28:46,645 --> 00:28:48,006
So the gist of how it works is this.

670
00:28:48,646 --> 00:28:51,727
At some rate, we rewind to fix our texture distortion.

671
00:28:52,668 --> 00:28:54,608
Unfortunately, that naive approach can cause pops,

672
00:28:55,089 --> 00:28:57,570
but you can fix that by doing it twice, half out of phase.

673
00:28:59,290 --> 00:29:01,212
Fade back and forth between those two samples,

674
00:29:01,312 --> 00:29:03,533
and you can hide the pop by resetting the sample that's

675
00:29:03,573 --> 00:29:04,313
fully faded out.

676
00:29:05,494 --> 00:29:06,935
Now, we're going to build on this concept.

677
00:29:07,115 --> 00:29:09,137
So from now on, I'll refer to this reset

678
00:29:09,517 --> 00:29:11,198
as the flow flip event.

679
00:29:13,459 --> 00:29:16,021
So let's try that in 3D by tracking two texture

680
00:29:16,041 --> 00:29:18,722
coordinates for each object, sampling the texture with both

681
00:29:18,742 --> 00:29:20,784
of them, and fading between those samples

682
00:29:20,824 --> 00:29:22,985
so we can reset one coordinate at our flow flip event.

683
00:29:24,006 --> 00:29:26,147
You can see we no longer have distortion accumulating.

684
00:29:29,119 --> 00:29:30,599
but now there's a pretty noticeable loop.

685
00:29:31,280 --> 00:29:33,620
Loop, loop, loop, loop, loop.

686
00:29:33,640 --> 00:29:36,101
If you didn't see it before, you definitely do now.

687
00:29:36,941 --> 00:29:37,781
We can improve on this.

688
00:29:39,621 --> 00:29:40,582
So our white noise texture

689
00:29:40,602 --> 00:29:42,602
has the same spectral properties everywhere,

690
00:29:43,162 --> 00:29:44,902
which means we don't need to reset the coordinates

691
00:29:44,962 --> 00:29:45,863
to their starting value.

692
00:29:46,223 --> 00:29:46,883
We can go anywhere.

693
00:29:47,863 --> 00:29:49,603
And we still need neighbors to stay neighbors,

694
00:29:50,024 --> 00:29:51,804
so this randomization is computed once

695
00:29:52,444 --> 00:29:54,965
on each flow flip frame and shared for all objects.

696
00:29:57,124 --> 00:29:58,044
Back to that looping fade.

697
00:29:58,364 --> 00:29:59,625
Loop, loop, loop.

698
00:30:00,425 --> 00:30:02,245
In a moment, we will randomize the global offset

699
00:30:02,285 --> 00:30:03,146
whenever we flip flow.

700
00:30:04,746 --> 00:30:05,206
And there it is.

701
00:30:06,386 --> 00:30:08,687
You can see that the loop has gone away, which helps

702
00:30:08,707 --> 00:30:09,867
the fade from being noticeable.

703
00:30:10,868 --> 00:30:12,888
In a way, this is almost creating a four-dimensional

704
00:30:12,928 --> 00:30:15,249
noise texture, but with only three dimensions of data.

705
00:30:17,789 --> 00:30:19,450
Thanks, man.

706
00:30:20,090 --> 00:30:21,670
So let's look at all of this under that hurricane wind

707
00:30:21,690 --> 00:30:21,850
shape.

708
00:30:22,403 --> 00:30:24,104
At this speed, it looks good for a flip rate

709
00:30:24,124 --> 00:30:25,085
to be about half of a second.

710
00:30:25,745 --> 00:30:29,488
But when we slow the wind down, that flip rate is too fast.

711
00:30:29,889 --> 00:30:32,491
All the motion we're seeing here is coming from the blend, not

712
00:30:32,511 --> 00:30:33,131
from the scroll.

713
00:30:34,032 --> 00:30:35,973
At this speed, it's slower for a single texture box

714
00:30:36,093 --> 00:30:37,754
to scroll by than it is for the textures

715
00:30:37,775 --> 00:30:38,675
to fade between each other.

716
00:30:39,796 --> 00:30:41,717
So we could just increase the time it takes to flip.

717
00:30:42,518 --> 00:30:44,920
Now we're at about five seconds, and it's working pretty well.

718
00:30:46,501 --> 00:30:47,822
Let's test again at a faster speed.

719
00:30:51,395 --> 00:30:52,677
We're really just back to where we started.

720
00:30:53,758 --> 00:30:54,959
We need a better solution for this.

721
00:30:55,259 --> 00:30:56,900
Adjusting timings doesn't seem to be working

722
00:30:56,940 --> 00:30:57,721
for variable speeds.

723
00:31:00,444 --> 00:31:01,284
So let's rethink this.

724
00:31:01,985 --> 00:31:03,987
What does the flow map technique try to achieve?

725
00:31:05,748 --> 00:31:08,111
Well, we author some rate and time for the effect to loop.

726
00:31:08,631 --> 00:31:10,192
But is time really our core concept here?

727
00:31:10,633 --> 00:31:12,334
How do we know that we need to adjust it, for example?

728
00:31:12,955 --> 00:31:14,957
Well, we tweak it when there's too little movement

729
00:31:15,357 --> 00:31:16,638
or when there's too much distortion.

730
00:31:18,188 --> 00:31:19,569
So that's what we should try to tune for.

731
00:31:19,989 --> 00:31:22,631
That's the parameter we should expose, maximum distortion.

732
00:31:23,851 --> 00:31:26,013
And we can define that as the distance traveled

733
00:31:26,113 --> 00:31:28,234
in texture space since our last flow flip.

734
00:31:29,294 --> 00:31:30,435
Now there's still a problem here.

735
00:31:31,035 --> 00:31:32,876
If neighbors are drifting apart because of speed,

736
00:31:33,637 --> 00:31:35,237
their flip timings will drift apart too.

737
00:31:35,778 --> 00:31:37,479
It's kind of like when your car's windshield wipers

738
00:31:37,519 --> 00:31:40,140
are in sync with the car in front of you, until it's not.

739
00:31:42,761 --> 00:31:45,223
So we need a way to bundle similar speeds together

740
00:31:45,523 --> 00:31:47,604
and schedule their flip to happen on the same frame.

741
00:31:48,719 --> 00:31:50,900
if only we knew of a way to group numbers together

742
00:31:51,060 --> 00:31:51,801
across all scales.

743
00:31:51,821 --> 00:31:55,264
Hey, do you guys remember Longworth-McBinning?

744
00:31:55,284 --> 00:31:57,265
I sure hope you do,

745
00:31:57,285 --> 00:31:58,506
because it was like five minutes ago.

746
00:32:00,348 --> 00:32:02,089
We will only consider the flow flip rate

747
00:32:02,169 --> 00:32:05,372
for wind speeds that are exactly a power of two,

748
00:32:06,073 --> 00:32:07,294
and for every other wind speed,

749
00:32:07,654 --> 00:32:09,175
we will make their behavior identical

750
00:32:09,235 --> 00:32:10,736
to the nearest power of two's behavior.

751
00:32:12,276 --> 00:32:13,776
Fast speeds reset more often.

752
00:32:14,457 --> 00:32:16,037
You can see that speeds in the same bin,

753
00:32:16,197 --> 00:32:18,017
like .8 and 1.3 in this example,

754
00:32:18,398 --> 00:32:20,538
they flow flip at the exact same time and rate.

755
00:32:22,058 --> 00:32:25,239
.8 and 1.3 flipped, now they flip again,

756
00:32:25,259 --> 00:32:27,600
and now they flip together.

757
00:32:29,080 --> 00:32:31,201
What's nice about power of two logarithmic binning

758
00:32:31,781 --> 00:32:33,381
is that neighboring bins will flow flip

759
00:32:33,401 --> 00:32:35,042
exactly twice or half as often.

760
00:32:36,102 --> 00:32:37,722
This means that for half of their flips,

761
00:32:37,862 --> 00:32:38,843
they're perfectly in sync.

762
00:32:39,698 --> 00:32:41,639
This is important for speeds that are close to each other,

763
00:32:42,080 --> 00:32:43,861
but not close to the powers of two themselves,

764
00:32:44,041 --> 00:32:45,643
like .7 and .8 here.

765
00:32:47,004 --> 00:32:50,146
Here they both flip, and now just .8 flips.

766
00:32:51,608 --> 00:32:54,650
Here they both flip, and now just .8.

767
00:32:56,271 --> 00:32:57,012
Smack my laptop.

768
00:32:59,374 --> 00:33:01,696
If the wind speeds are varied, but mostly unchanging,

769
00:33:02,156 --> 00:33:04,038
all objects will stay in their same speed group.

770
00:33:04,638 --> 00:33:05,199
But that's rare.

771
00:33:05,982 --> 00:33:07,403
If an object's wind speed changes,

772
00:33:07,423 --> 00:33:09,766
it may find itself closer to a different power of two,

773
00:33:10,146 --> 00:33:12,248
changing groups, and therefore out of sync

774
00:33:12,288 --> 00:33:12,969
with its new group.

775
00:33:14,070 --> 00:33:17,393
To correct for this, we adjust our fade rate for the object

776
00:33:17,414 --> 00:33:18,855
so that it will be in sync with its group

777
00:33:19,255 --> 00:33:20,697
by the time the flow flip occurs.

778
00:33:21,998 --> 00:33:24,541
So objects that are behind schedule briefly speed up,

779
00:33:25,502 --> 00:33:28,685
while those that are ahead of schedule briefly slow down.

780
00:33:30,587 --> 00:33:31,627
Now there is an exception to this.

781
00:33:32,268 --> 00:33:34,289
If an object enters a group that it's about to flip,

782
00:33:34,810 --> 00:33:36,611
but the object itself is very behind schedule,

783
00:33:37,732 --> 00:33:39,493
we identify this as the group having completed

784
00:33:39,553 --> 00:33:41,095
more than 75% of its fade,

785
00:33:41,755 --> 00:33:44,037
while the object has completed less than 25% of its own.

786
00:33:45,498 --> 00:33:47,840
For these, we just target the next flow flip time.

787
00:33:48,620 --> 00:33:50,322
Essentially, it's running late for the bus,

788
00:33:50,662 --> 00:33:51,863
so we tell it to catch the next one.

789
00:33:53,264 --> 00:33:54,725
This prevents sudden rapid fades,

790
00:33:55,345 --> 00:33:56,826
which are perceived as animation pops.

791
00:34:01,744 --> 00:34:04,526
So with all of that implemented, now our noise features

792
00:34:04,626 --> 00:34:06,588
will stay consistent for coherent flows,

793
00:34:07,649 --> 00:34:09,330
and they'll stay consistent for divergent flows.

794
00:34:10,871 --> 00:34:13,453
This works across all speeds, whether we go slow

795
00:34:15,594 --> 00:34:16,455
or whether we go fast.

796
00:34:18,236 --> 00:34:21,179
And any accumulated distortion will recover gracefully

797
00:34:21,659 --> 00:34:22,960
when we return to coherent flows,

798
00:34:23,700 --> 00:34:25,101
where that distortion would be most noticeable.

799
00:34:29,163 --> 00:34:31,604
Here's an old debug clip that may give you an idea

800
00:34:31,884 --> 00:34:33,365
of what the flow flip rate looks like

801
00:34:33,505 --> 00:34:34,786
for that hurricane shape of wind.

802
00:34:34,806 --> 00:34:37,907
Now these objects are hacked to bounce their flip rate.

803
00:34:38,668 --> 00:34:40,769
You can see the faster flip rate of objects on the perimeter

804
00:34:41,069 --> 00:34:42,550
and the slower rate of those in the center,

805
00:34:42,990 --> 00:34:44,051
where there are lower wind speeds.

806
00:34:45,251 --> 00:34:47,132
You can also see at the group boundaries

807
00:34:47,532 --> 00:34:49,173
that members of adjacent logarithmic bins

808
00:34:49,193 --> 00:34:50,794
will flip at exactly half or double

809
00:34:50,814 --> 00:34:51,575
the rate of their neighbors.

810
00:34:52,415 --> 00:34:53,916
And you may also notice that they are in phase

811
00:34:53,956 --> 00:34:56,277
with each other so that they can reset on the same frame.

812
00:35:03,982 --> 00:35:04,943
So that's our wind system.

813
00:35:06,063 --> 00:35:08,044
Up next is the grab bag section of the talk.

814
00:35:08,844 --> 00:35:10,825
What tricks have we learned over a full development cycle

815
00:35:10,865 --> 00:35:11,486
with this system?

816
00:35:13,407 --> 00:35:14,167
Artist education.

817
00:35:15,107 --> 00:35:17,088
As artists and managers and producers

818
00:35:17,448 --> 00:35:19,369
come to understand the system and its limitations,

819
00:35:19,649 --> 00:35:21,170
we can borrow from existing intuitions

820
00:35:21,210 --> 00:35:22,371
by using lighting analogies.

821
00:35:23,691 --> 00:35:26,012
The wind volume, for example, is like shadow cascades.

822
00:35:26,492 --> 00:35:27,793
If your motor is not in the box,

823
00:35:28,053 --> 00:35:29,134
it's not going to blow wind.

824
00:35:29,554 --> 00:35:31,295
Just like if a model is outside the shadow map,

825
00:35:31,535 --> 00:35:32,595
it won't cast any shadows.

826
00:35:34,402 --> 00:35:36,102
Wind motors are like point and spotlights.

827
00:35:36,362 --> 00:35:38,202
They inject light and wind into the scene

828
00:35:38,282 --> 00:35:39,063
in a targeted way.

829
00:35:40,783 --> 00:35:42,563
Ambient wind nodes are kind of like directional

830
00:35:42,623 --> 00:35:43,303
or ambient lights.

831
00:35:43,683 --> 00:35:44,784
Doesn't matter where you put them,

832
00:35:45,264 --> 00:35:46,384
they affect everything all the same.

833
00:35:47,284 --> 00:35:49,084
Also be careful about leaving stray ones

834
00:35:49,125 --> 00:35:50,265
laying around in scene files.

835
00:35:52,665 --> 00:35:54,466
And wind receivers are to the wind system

836
00:35:54,746 --> 00:35:56,466
what materials are to the lighting system.

837
00:35:57,286 --> 00:35:59,006
The system tells you how much of it's coming in

838
00:35:59,607 --> 00:36:00,887
and the model material properties

839
00:36:00,947 --> 00:36:02,447
describe how the models respond to that.

840
00:36:05,573 --> 00:36:07,954
We've landed on a workflow for authoring vertex data that

841
00:36:07,994 --> 00:36:09,595
works really well for 90% of our models.

842
00:36:10,775 --> 00:36:12,056
We choose the mesh that we want to run.

843
00:36:13,217 --> 00:36:14,777
We tag the vertices that we want to anchor.

844
00:36:15,878 --> 00:36:18,079
And our vertex color tool will compute the wind mask

845
00:36:18,419 --> 00:36:21,721
as the normalized distance from the closest connected route.

846
00:36:22,821 --> 00:36:24,622
We normalize separately for each connected piece

847
00:36:25,002 --> 00:36:25,883
across the entire model.

848
00:36:27,683 --> 00:36:29,564
Artists can merge unconnected pieces just

849
00:36:29,584 --> 00:36:31,525
for this computation in case they have some floating

850
00:36:31,565 --> 00:36:32,606
elements that they want to combine.

851
00:36:34,590 --> 00:36:37,112
Sometimes we don't even need to manually select these root verts.

852
00:36:37,592 --> 00:36:38,832
We can guess them for each piece.

853
00:36:40,213 --> 00:36:44,775
For example, these implicit verts can be the vertex with the largest or smallest coordinate

854
00:36:45,095 --> 00:36:50,177
along the X, Y, or Z axis, or even the U and V texture axes for any connected piece.

855
00:36:51,878 --> 00:36:55,280
Or they can be the closest vertex to a specified surface or point in space.

856
00:36:58,979 --> 00:37:00,900
We can also mix implicit and explicit roots.

857
00:37:01,520 --> 00:37:03,601
If the implicit guess is good for nine out of 10 pieces,

858
00:37:03,801 --> 00:37:05,521
the artist can just tag the roots on the pieces

859
00:37:05,561 --> 00:37:07,022
that need correction and run again.

860
00:37:08,122 --> 00:37:10,003
Travis Slagle is a senior tools tech artist

861
00:37:10,323 --> 00:37:12,264
that did an amazing job taking this workflow

862
00:37:12,284 --> 00:37:14,524
that I described and creating a tool that realized it.

863
00:37:17,545 --> 00:37:20,086
So for a long time, I got the same question over and over.

864
00:37:20,947 --> 00:37:23,447
Sean, what's a good win speed for authoring my model?

865
00:37:24,128 --> 00:37:25,928
And my unhelpful answer was all of them.

866
00:37:26,648 --> 00:37:28,109
We need to look good at all speeds, guys.

867
00:37:29,843 --> 00:37:31,604
So to get everyone on the same page,

868
00:37:31,664 --> 00:37:33,745
we are inspired by something that Rupert discovered,

869
00:37:34,065 --> 00:37:34,885
the Buford scale.

870
00:37:35,965 --> 00:37:38,366
This was developed for sailors, or by sailors,

871
00:37:38,386 --> 00:37:39,626
in the early 19th century,

872
00:37:40,067 --> 00:37:43,028
and it describes 12 distinct categories of wind speeds

873
00:37:43,188 --> 00:37:45,428
and the land and sea behaviors that identify them.

874
00:37:46,168 --> 00:37:46,929
It's a great reference,

875
00:37:46,969 --> 00:37:48,249
and you should check it out on Wikipedia.

876
00:37:49,750 --> 00:37:51,850
Now, 12 is more granularity than we need.

877
00:37:52,390 --> 00:37:55,871
So we reduced this to five agreeable named speeds.

878
00:37:56,742 --> 00:37:59,144
We would use these to direct wind intensity in our levels

879
00:37:59,664 --> 00:38:02,166
and keep models looking like they exist in the same space.

880
00:38:03,627 --> 00:38:05,368
Our speed categories are still,

881
00:38:05,388 --> 00:38:07,289
this is my favorite video,

882
00:38:09,110 --> 00:38:09,450
calm,

883
00:38:13,013 --> 00:38:13,433
breezy,

884
00:38:17,736 --> 00:38:18,156
strong,

885
00:38:21,558 --> 00:38:22,279
and violent.

886
00:38:23,299 --> 00:38:24,640
Because it wouldn't be a God of War game

887
00:38:24,720 --> 00:38:25,561
without a little violence.

888
00:38:30,276 --> 00:38:33,137
We add named buttons to our wind speed override tool

889
00:38:33,417 --> 00:38:34,718
so that everyone can test their models

890
00:38:34,758 --> 00:38:37,279
under the same conditions and sanity check level settings.

891
00:38:37,999 --> 00:38:39,200
You just click the named button

892
00:38:39,440 --> 00:38:41,220
and it pushes the slider to the respective value.

893
00:38:42,521 --> 00:38:43,721
After establishing this language,

894
00:38:44,062 --> 00:38:45,462
the wind speed questions disappeared.

895
00:38:47,463 --> 00:38:48,864
And these are our speeds for those,

896
00:38:49,504 --> 00:38:51,165
but a reminder that the numbers here don't matter

897
00:38:51,185 --> 00:38:53,445
because it's technically the texture scroll speed,

898
00:38:53,646 --> 00:38:55,486
not the speed of the wind that it's supposed to look like.

899
00:38:55,726 --> 00:38:57,407
Again, this is not PBR wind.

900
00:39:00,488 --> 00:39:00,769
OK.

901
00:39:01,809 --> 00:39:02,970
Here's my weird tip of the day.

902
00:39:03,610 --> 00:39:05,091
When you're tuning model parameters

903
00:39:05,391 --> 00:39:08,432
and testing under different speeds, blow on your screen.

904
00:39:10,413 --> 00:39:12,574
Try to match the energy of the wind speed name.

905
00:39:13,154 --> 00:39:13,494
Calm.

906
00:39:15,375 --> 00:39:15,815
Breezy.

907
00:39:17,596 --> 00:39:17,976
Violent.

908
00:39:19,777 --> 00:39:21,338
And then maybe wipe your screen afterwards.

909
00:39:23,118 --> 00:39:24,079
It's a pretty dumb idea.

910
00:39:24,099 --> 00:39:25,780
You're going to feel silly at first,

911
00:39:25,900 --> 00:39:27,240
but I promise you that it works.

912
00:39:28,683 --> 00:39:30,324
Once the model feels like it's responding to you,

913
00:39:30,344 --> 00:39:33,244
it just clicks, and you know you've got some good settings.

914
00:39:33,304 --> 00:39:34,044
It's time to check in.

915
00:39:37,565 --> 00:39:39,325
So some trees in our game are very large.

916
00:39:39,465 --> 00:39:40,666
They wouldn't really sway too much.

917
00:39:41,686 --> 00:39:43,506
We found that for these, we got a better look

918
00:39:43,626 --> 00:39:45,566
by putting wind on the branches individually

919
00:39:46,287 --> 00:39:48,147
and activating the tree behavior on those branches.

920
00:39:48,827 --> 00:39:50,847
This meant that each one could sample the wind separately,

921
00:39:51,488 --> 00:39:53,228
and this was important because an axe throw

922
00:39:53,248 --> 00:39:55,128
would otherwise make the whole tree shake

923
00:39:55,208 --> 00:39:56,408
if they had shared a single sample.

924
00:39:58,442 --> 00:39:59,763
Here's a look at one of those branches

925
00:40:00,023 --> 00:40:01,144
with three different settings.

926
00:40:01,744 --> 00:40:03,906
On the top, we've not activated the tree settings.

927
00:40:04,386 --> 00:40:06,648
Vertex paint is just a gradient from the branch root

928
00:40:06,948 --> 00:40:07,709
to the leaf tips.

929
00:40:09,150 --> 00:40:11,672
On the bottom, we tuned with tree settings activated.

930
00:40:12,272 --> 00:40:14,394
The left model is using the same gradient as the top,

931
00:40:14,854 --> 00:40:16,555
while the one on the right uses a gradient

932
00:40:16,595 --> 00:40:18,457
that radiates away from the branch core.

933
00:40:19,537 --> 00:40:21,179
The bottom right model is the one that we shipped

934
00:40:21,599 --> 00:40:23,500
after I fixed that one wiggly branch vert.

935
00:40:25,722 --> 00:40:27,704
When modeling branches to use this extra layer

936
00:40:27,724 --> 00:40:28,244
of tree movement.

937
00:40:29,032 --> 00:40:31,794
It's helpful to align your vertices with the branch's flow

938
00:40:31,934 --> 00:40:32,494
in the texture.

939
00:40:33,115 --> 00:40:34,536
After all, if there's no vertex there,

940
00:40:34,716 --> 00:40:40,180
you cannot pin it as a pivot.

941
00:40:40,560 --> 00:40:42,962
Using this technique creates this radiant gradient away

942
00:40:42,982 --> 00:40:45,363
from the branch core, whose behavior

943
00:40:45,383 --> 00:40:47,345
looks a little less rubbery than a linear gradient.

944
00:40:48,445 --> 00:40:50,347
But sometimes I like to blend the mask of both

945
00:40:50,727 --> 00:40:52,468
while keeping the pivots from the one on the left.

946
00:40:54,672 --> 00:40:56,553
Here are those kinds of gradients on the same model.

947
00:40:57,254 --> 00:40:59,175
We can see the different plausible looks we can get

948
00:40:59,215 --> 00:41:01,256
just from playing with how we generate vertex colors.

949
00:41:02,197 --> 00:41:03,798
The one on the left is that radiant gradient.

950
00:41:04,739 --> 00:41:05,279
It's fun to say.

951
00:41:05,599 --> 00:41:06,580
The one on the right is linear,

952
00:41:06,940 --> 00:41:07,921
and the middle one is a blend.

953
00:41:08,301 --> 00:41:10,042
For this model, I believe that we shipped the blend,

954
00:41:10,102 --> 00:41:11,443
but the settings on the left look good too.

955
00:41:15,566 --> 00:41:17,607
Leaning further into if it's stupid but works,

956
00:41:17,647 --> 00:41:18,487
it's not that stupid.

957
00:41:19,548 --> 00:41:21,690
Hanging banners and ropes are upside down trees.

958
00:41:24,001 --> 00:41:25,682
We stubbed in a setting for pendulum movement

959
00:41:25,722 --> 00:41:27,042
specifically for this purpose,

960
00:41:27,343 --> 00:41:28,663
but we didn't complete the functionality

961
00:41:28,703 --> 00:41:30,264
because springs looked good enough.

962
00:41:32,545 --> 00:41:34,086
For hair, especially flyaways,

963
00:41:35,046 --> 00:41:37,307
it works well to have the pivot of every hair vertex

964
00:41:37,547 --> 00:41:39,949
use the closest point on the scalp as its root.

965
00:41:41,409 --> 00:41:43,110
To be clear, this is different

966
00:41:43,130 --> 00:41:44,571
from the workflow we've been describing.

967
00:41:45,251 --> 00:41:47,352
The pivot is not a vertex on the hair mesh.

968
00:41:49,077 --> 00:41:51,079
We set the wind vertex mask value

969
00:41:51,559 --> 00:41:54,041
to the distance between the vertex and the scalp.

970
00:41:55,182 --> 00:41:57,504
Then we normalize the mask for the entire hair mesh.

971
00:41:59,125 --> 00:42:01,287
In this video, the left model uses this technique,

972
00:42:01,727 --> 00:42:04,149
while the right model uses the hair origin as a pivot.

973
00:42:05,130 --> 00:42:06,551
And the one in the middle is a blend of the two.

974
00:42:07,271 --> 00:42:08,652
For this character, we ship the one on the left.

975
00:42:11,395 --> 00:42:12,095
Fur can be tricky.

976
00:42:12,905 --> 00:42:15,406
It's usually made of single quad cards or triangles,

977
00:42:16,066 --> 00:42:18,788
and this means that the bend parameter doesn't do anything

978
00:42:18,968 --> 00:42:20,969
because both one and zero don't change

979
00:42:20,989 --> 00:42:22,470
no matter the exponent you raise them to.

980
00:42:24,271 --> 00:42:26,092
Fur is usually laying flat against the skin,

981
00:42:27,072 --> 00:42:29,213
which means that it's easy for even small movements

982
00:42:29,254 --> 00:42:30,774
to cause penetration with the skin,

983
00:42:31,275 --> 00:42:32,755
and we don't have bend to mitigate that.

984
00:42:34,536 --> 00:42:36,998
So for these, we compute pivots with the usual method,

985
00:42:38,038 --> 00:42:40,019
but we set the wind mask value for the tips

986
00:42:40,339 --> 00:42:41,700
to be the distance to the skin.

987
00:42:42,527 --> 00:42:44,909
just like we do for hair, and we renormalize

988
00:42:44,929 --> 00:42:47,611
for the whole fur mesh, not for each individual card.

989
00:42:49,233 --> 00:42:51,294
Before normalizing, we take the maximum value,

990
00:42:51,615 --> 00:42:54,657
and we use about 90% of that for our model's wind movement

991
00:42:54,758 --> 00:42:55,158
parameter.

992
00:42:56,779 --> 00:42:58,000
Just a reminder that if you do this,

993
00:42:58,401 --> 00:43:00,122
remember to set the bend to 1.0 for these.

994
00:43:00,443 --> 00:43:02,264
Otherwise, you'll mute the effect on short hairs

995
00:43:02,404 --> 00:43:03,966
since we're baking in their absolute lengths.

996
00:43:07,269 --> 00:43:08,130
Beards are a lot like fur.

997
00:43:09,602 --> 00:43:11,203
But we have a few more spans to work with,

998
00:43:11,404 --> 00:43:13,426
at least our models do, and I'm glad that they did,

999
00:43:14,387 --> 00:43:16,629
because it lets us use that bend parameter.

1000
00:43:16,950 --> 00:43:18,351
And we go pretty high with the exponent.

1001
00:43:18,932 --> 00:43:20,133
Kratos's beard uses 3.0,

1002
00:43:21,354 --> 00:43:23,296
and the fur on his pelt has multiple spans,

1003
00:43:23,397 --> 00:43:24,698
and we use 3.3 for that.

1004
00:43:25,759 --> 00:43:28,162
These high values keep the interior of the beard stiff,

1005
00:43:28,622 --> 00:43:30,124
but it lets the tips convey motion.

1006
00:43:32,386 --> 00:43:35,148
To let the beard shape the silhouette on the far cheek

1007
00:43:35,188 --> 00:43:37,750
side, it's OK to use large enough movement values

1008
00:43:37,790 --> 00:43:40,512
that just the tips penetrate on the side of the face getting

1009
00:43:40,552 --> 00:43:41,073
hit by wind.

1010
00:43:41,953 --> 00:43:42,914
Now, it's possible that this could

1011
00:43:42,934 --> 00:43:44,495
poke into the mouth interior, but we never

1012
00:43:44,535 --> 00:43:45,136
saw this happening.

1013
00:43:47,017 --> 00:43:48,899
And some of our bearded characters

1014
00:43:48,919 --> 00:43:50,660
have beard shells underneath the cards.

1015
00:43:51,061 --> 00:43:51,661
Some of them don't.

1016
00:43:52,642 --> 00:43:54,683
For wind, my preference is for shells

1017
00:43:54,723 --> 00:43:56,405
to be rigid and fairly tight to the skin,

1018
00:43:57,085 --> 00:43:58,426
or not exist at all if it looks better.

1019
00:43:59,327 --> 00:44:00,968
And this prevents them from being exposed

1020
00:44:01,008 --> 00:44:01,889
as cards move around.

1021
00:44:04,817 --> 00:44:05,817
Okay, so for the rest of the talk,

1022
00:44:05,857 --> 00:44:08,178
we're gonna talk about some adjacent vegetation work

1023
00:44:08,298 --> 00:44:08,738
that we did.

1024
00:44:09,738 --> 00:44:11,419
For some of our vegetation levels of detail

1025
00:44:11,579 --> 00:44:14,140
and shadow proxies, we use an imposter grade solution

1026
00:44:14,320 --> 00:44:15,220
that works well with wind.

1027
00:44:16,881 --> 00:44:18,742
This technique is known as billboard clouds.

1028
00:44:19,642 --> 00:44:20,822
Now what's the first thing that you think of

1029
00:44:20,862 --> 00:44:21,663
when you hear that name?

1030
00:44:22,983 --> 00:44:25,144
Is it fluffy textured quads that face the camera?

1031
00:44:25,804 --> 00:44:27,005
Yeah, me too.

1032
00:44:27,765 --> 00:44:28,385
Everybody does.

1033
00:44:29,645 --> 00:44:30,506
But that's not what this is.

1034
00:44:31,766 --> 00:44:32,066
These.

1035
00:44:32,807 --> 00:44:34,327
These are essentially billboard clouds.

1036
00:44:35,923 --> 00:44:37,344
We started calling them card clusters

1037
00:44:37,484 --> 00:44:38,525
and the confusion disappeared.

1038
00:44:39,106 --> 00:44:40,326
I suggest the industry do the same,

1039
00:44:40,406 --> 00:44:41,367
but it's really up to you guys.

1040
00:44:43,388 --> 00:44:44,769
So this technique is a bit more advanced

1041
00:44:44,789 --> 00:44:47,391
than just a couple world-axis aligned cards.

1042
00:44:47,751 --> 00:44:49,412
We referenced two papers in our implementation.

1043
00:44:49,932 --> 00:44:51,814
I'll post a slide again later so you can read up on it.

1044
00:44:53,695 --> 00:44:55,316
This approach builds on the state of the art

1045
00:44:55,396 --> 00:44:58,298
of the mid-1990s by asking two questions.

1046
00:44:59,238 --> 00:45:00,899
Hey, what if we use more cards?

1047
00:45:01,420 --> 00:45:02,961
And what if those were the best cards?

1048
00:45:05,067 --> 00:45:07,368
For volume filling geometry like leafy vegetation,

1049
00:45:07,528 --> 00:45:08,488
the results are pretty good.

1050
00:45:09,329 --> 00:45:11,410
One of these five models is the source mesh.

1051
00:45:12,030 --> 00:45:12,930
Can you guys guess which one?

1052
00:45:15,872 --> 00:45:16,312
How about now?

1053
00:45:20,474 --> 00:45:22,535
So there's definitely a quality versus performance

1054
00:45:22,555 --> 00:45:24,656
sweet spot, you don't want to get yourself carried away.

1055
00:45:27,177 --> 00:45:29,718
For an input model, we are going to make a cluster of cards

1056
00:45:30,298 --> 00:45:32,379
one at a time, starting with the best one.

1057
00:45:33,040 --> 00:45:33,720
How do we find that?

1058
00:45:34,340 --> 00:45:34,560
Easy.

1059
00:45:35,695 --> 00:45:37,736
We test all card planes in the known universe,

1060
00:45:38,096 --> 00:45:39,177
and we give a score to each one.

1061
00:45:39,697 --> 00:45:40,378
High score wins.

1062
00:45:41,978 --> 00:45:44,940
A potential card considers a thick slice of the model.

1063
00:45:45,601 --> 00:45:46,961
It will flatten model triangles that

1064
00:45:46,981 --> 00:45:49,663
are close to the card plane within some error metric.

1065
00:45:50,684 --> 00:45:52,725
The other triangles would be left for other cards.

1066
00:45:54,526 --> 00:45:56,407
Cards are scored by how much of the model

1067
00:45:56,527 --> 00:45:59,609
they are able to capture and how little those triangles distort.

1068
00:46:01,108 --> 00:46:04,090
Mathematically, this is defined as the sum of their areas

1069
00:46:04,370 --> 00:46:05,610
after projecting to the plane.

1070
00:46:06,470 --> 00:46:08,991
That's their world space area times the dot product

1071
00:46:09,832 --> 00:46:11,212
of the triangle and plane normals.

1072
00:46:12,433 --> 00:46:14,853
Or you can think of this as the total card texture coverage

1073
00:46:14,933 --> 00:46:16,094
by those flattened triangles.

1074
00:46:17,654 --> 00:46:19,415
So the best card claims its faces.

1075
00:46:20,155 --> 00:46:21,316
This is a greedy algorithm.

1076
00:46:21,976 --> 00:46:24,017
We then repeat the process on the remaining portion

1077
00:46:24,037 --> 00:46:25,557
of the model until there's nothing left.

1078
00:46:27,658 --> 00:46:28,798
So that's a lot of computation.

1079
00:46:29,479 --> 00:46:30,319
How can this be faster?

1080
00:46:31,210 --> 00:46:33,031
Well, the space of all possible cards

1081
00:46:33,091 --> 00:46:34,992
is the six-dimensional planoptic function,

1082
00:46:35,252 --> 00:46:36,913
but we can reduce that down to two dimensions,

1083
00:46:37,693 --> 00:46:39,014
the direction the card faces,

1084
00:46:40,395 --> 00:46:42,156
and how far it is from the center of the object.

1085
00:46:42,816 --> 00:46:44,197
All the other planes are redundant.

1086
00:46:45,978 --> 00:46:47,578
We can also space the candidate planes out,

1087
00:46:48,319 --> 00:46:50,140
and the spacing interval can be proportional

1088
00:46:50,160 --> 00:46:51,040
to that error metric.

1089
00:46:51,660 --> 00:46:53,221
So if you're okay with more distortion,

1090
00:46:53,641 --> 00:46:55,482
you can compute fewer card candidates.

1091
00:46:57,463 --> 00:47:00,505
For directions, we use the normals of a geodesic sphere.

1092
00:47:01,237 --> 00:47:02,478
We only need half of the sphere,

1093
00:47:02,578 --> 00:47:03,920
since negative directions are redundant,

1094
00:47:04,640 --> 00:47:06,842
and it's easy to subdivide if we want more candidates.

1095
00:47:07,763 --> 00:47:09,784
The geodesic distribution also works well

1096
00:47:09,904 --> 00:47:11,406
to prevent over-sampling at the poles.

1097
00:47:12,307 --> 00:47:14,008
A Fibonacci spiral would work well here too.

1098
00:47:16,370 --> 00:47:19,112
The projected area of a face doesn't change

1099
00:47:19,152 --> 00:47:20,734
if the plane orientation doesn't change,

1100
00:47:21,214 --> 00:47:23,296
so we pre-compute individual face areas

1101
00:47:23,476 --> 00:47:24,737
for each orientation batch,

1102
00:47:25,057 --> 00:47:26,438
and then it's just a simple summation.

1103
00:47:28,265 --> 00:47:31,067
And of course we ignore cards that are far away, miles away.

1104
00:47:31,447 --> 00:47:32,949
They have to intersect the model bounding box.

1105
00:47:36,011 --> 00:47:38,613
Once you have the cards, then as you would with impostors,

1106
00:47:38,894 --> 00:47:42,036
we render the material channels from orthographic cameras.

1107
00:47:43,257 --> 00:47:45,079
For each card, we match the camera position,

1108
00:47:45,379 --> 00:47:48,121
orientation, and bounds to the card and its contents.

1109
00:47:49,162 --> 00:47:50,563
Now this can include clipping planes.

1110
00:47:51,004 --> 00:47:52,325
The distance between near and far

1111
00:47:52,385 --> 00:47:54,366
can match the closest parameter, the error metric.

1112
00:47:56,078 --> 00:47:59,942
We use Python image library and Maya UV auto layout

1113
00:48:00,202 --> 00:48:01,364
to generate our final textures.

1114
00:48:02,985 --> 00:48:05,428
And lastly, sometimes a face is close to a card

1115
00:48:05,468 --> 00:48:08,371
that scored highly, but it's not a good pair for that face.

1116
00:48:09,092 --> 00:48:10,894
This face is a victim of the greedy algorithm.

1117
00:48:11,995 --> 00:48:13,777
After we know which cards we will use,

1118
00:48:14,077 --> 00:48:17,080
it's fast to retest if a face would score better

1119
00:48:17,381 --> 00:48:18,442
with a different close card.

1120
00:48:19,416 --> 00:48:21,317
If we find a better card, we just switch it over

1121
00:48:21,377 --> 00:48:22,478
before rendering the textures.

1122
00:48:23,299 --> 00:48:25,440
This helps prevent a large gap from appearing

1123
00:48:25,501 --> 00:48:27,662
around the first card we find, and it

1124
00:48:27,702 --> 00:48:29,363
preserves the visual density of the model

1125
00:48:29,524 --> 00:48:31,385
better than compensating by rendering faces

1126
00:48:31,485 --> 00:48:32,306
into multiple cards.

1127
00:48:35,628 --> 00:48:37,770
So here in our test level, we're looking at the card cluster

1128
00:48:37,790 --> 00:48:38,850
versions of these trees.

1129
00:48:39,611 --> 00:48:41,873
As we approach, we'll fade into the full models.

1130
00:48:49,028 --> 00:48:50,870
For shadow proxies, we are always using

1131
00:48:50,890 --> 00:48:52,951
the card cluster version, even at close range.

1132
00:48:53,911 --> 00:48:56,213
We're looking at card cluster shadows right now.

1133
00:48:58,334 --> 00:49:00,135
We use card clusters instead of impostors

1134
00:49:00,575 --> 00:49:02,576
so that we can get wind movement and parallax

1135
00:49:02,936 --> 00:49:04,417
because we have a few more verts to work with.

1136
00:49:05,438 --> 00:49:07,219
This is done with a vertex attribute transfer

1137
00:49:07,239 --> 00:49:09,060
from the base model to the card cluster model.

1138
00:49:09,440 --> 00:49:10,301
It's nothing too complex.

1139
00:49:11,021 --> 00:49:13,042
It's not an exact match, but it gives us some good movement,

1140
00:49:13,122 --> 00:49:13,983
especially in the shadows.

1141
00:49:16,467 --> 00:49:18,188
Now as the card cluster model got far away,

1142
00:49:18,929 --> 00:49:20,610
we noticed some matte edge inaccuracy.

1143
00:49:23,511 --> 00:49:24,752
So we need to flood our textures.

1144
00:49:25,752 --> 00:49:28,194
This is often done by dilating or blurring the image

1145
00:49:28,894 --> 00:49:30,055
and putting the original on top

1146
00:49:30,635 --> 00:49:32,036
and repeating until you've flooded enough.

1147
00:49:35,838 --> 00:49:38,259
Now this looks nice, but your users and players

1148
00:49:38,279 --> 00:49:38,960
are never gonna see it.

1149
00:49:39,980 --> 00:49:41,961
And it's pretty slow, especially for large images.

1150
00:49:43,154 --> 00:49:44,615
It's also biased towards the edge color.

1151
00:49:45,236 --> 00:49:47,498
Probably not noticeable except in contrived situations,

1152
00:49:47,598 --> 00:49:48,499
but it could be better.

1153
00:49:50,100 --> 00:49:51,681
I wanted something that would resolve faster,

1154
00:49:51,841 --> 00:49:54,323
so I developed something I call MIP flooding, which assumes

1155
00:49:54,363 --> 00:49:55,484
power of two sized images.

1156
00:49:56,846 --> 00:49:58,887
So for an image, we use unpre-multiplied color.

1157
00:50:00,328 --> 00:50:02,510
At each step, we scale it down to half of its size,

1158
00:50:02,811 --> 00:50:04,612
weighting the samples by their alpha coverage.

1159
00:50:05,893 --> 00:50:08,275
And we repeat until we get to one pixel wide or tall.

1160
00:50:10,277 --> 00:50:11,338
We remember these textures.

1161
00:50:12,417 --> 00:50:13,958
and then we walk back up the MIP chain

1162
00:50:14,158 --> 00:50:15,439
using nearest neighbor to upscale.

1163
00:50:16,700 --> 00:50:18,301
We composite the higher res MIP on top,

1164
00:50:19,061 --> 00:50:20,822
and we repeat all the way back up the stack.

1165
00:50:22,923 --> 00:50:25,204
Now, this is fast to generate, and it scales well

1166
00:50:25,605 --> 00:50:27,906
with image size because of the logarithmic component

1167
00:50:28,086 --> 00:50:29,367
to the algorithmic time complexity.

1168
00:50:30,487 --> 00:50:32,128
And on disk, this will compress better

1169
00:50:32,289 --> 00:50:34,170
because of those large areas of constant color.

1170
00:50:35,290 --> 00:50:37,892
You could also use this for a fast, smooth hole filling

1171
00:50:37,932 --> 00:50:40,034
if you use bilinear sampling in the upres chain,

1172
00:50:40,454 --> 00:50:42,876
but the image result is gonna be a little different

1173
00:50:42,896 --> 00:50:43,817
depending on your alignment.

1174
00:50:48,341 --> 00:50:49,542
Okay, guys, so I came here today

1175
00:50:52,164 --> 00:50:52,844
for two reasons.

1176
00:50:54,446 --> 00:50:55,226
To chew bubblegum

1177
00:50:56,928 --> 00:50:57,768
and kick grass.

1178
00:51:00,390 --> 00:51:02,392
And bubblegum is beyond the scope of this presentation.

1179
00:51:03,799 --> 00:51:05,981
So let's talk about ground vegetation interaction.

1180
00:51:06,461 --> 00:51:08,803
How does it move when physical objects collide with it?

1181
00:51:10,204 --> 00:51:13,287
Physical objects like characters just chilling in the grass,

1182
00:51:14,368 --> 00:51:16,490
we want their presence to affect nearby vegetation

1183
00:51:17,151 --> 00:51:18,152
by moving it out of the way.

1184
00:51:20,013 --> 00:51:22,696
This is commonly done with a top-down projected render

1185
00:51:22,736 --> 00:51:23,076
texture.

1186
00:51:23,837 --> 00:51:25,598
Each collider can render into the texture

1187
00:51:25,658 --> 00:51:27,000
a simple representation of itself,

1188
00:51:27,520 --> 00:51:29,682
like a sprite of some directional vectors.

1189
00:51:30,400 --> 00:51:33,862
rendered with an additive blend so multiple shapes can mix in any order.

1190
00:51:35,484 --> 00:51:37,585
A vegetation model that wants to respond to collision

1191
00:51:38,065 --> 00:51:41,668
would read this world space texture and move its vertices in the direction sampled.

1192
00:51:42,489 --> 00:51:44,150
Andrew Maximov did this for Uncharted 4.

1193
00:51:46,011 --> 00:51:48,633
Another method is to render collider shapes into a height field

1194
00:51:48,853 --> 00:51:50,495
instead of rendering explicit directions.

1195
00:51:51,335 --> 00:51:55,358
To blend these in any order, a minimum blend mode preserves the deepest disturbances.

1196
00:51:57,168 --> 00:51:59,910
This could push verts down proportional to the displacement

1197
00:52:00,290 --> 00:52:02,231
and use that stretching fix that we described earlier

1198
00:52:02,372 --> 00:52:03,492
to make it look like rotation.

1199
00:52:06,635 --> 00:52:08,676
Or we could compute the gradient of the field

1200
00:52:08,936 --> 00:52:10,497
and use that to push away from the collider.

1201
00:52:11,018 --> 00:52:12,379
Now this is not the Photoshop gradient,

1202
00:52:12,399 --> 00:52:13,520
this is the Calculus gradient.

1203
00:52:13,760 --> 00:52:15,121
It's the direction of greatest slope.

1204
00:52:17,763 --> 00:52:19,124
So after whipping up something simple,

1205
00:52:19,904 --> 00:52:22,606
you can see the grass here parting near the player's feet.

1206
00:52:23,427 --> 00:52:24,667
It looks pretty good with this camera,

1207
00:52:25,428 --> 00:52:26,829
but this is not our game's camera.

1208
00:52:28,367 --> 00:52:29,427
This is our game's camera.

1209
00:52:30,988 --> 00:52:33,949
You rarely see his feet, so you will rarely see this movement.

1210
00:52:34,710 --> 00:52:36,110
And that's disappointing, at least to me.

1211
00:52:37,811 --> 00:52:38,651
We need something more.

1212
00:52:39,132 --> 00:52:41,853
My goal was to figure out a way to extend this settling so

1213
00:52:41,873 --> 00:52:42,974
that the player could see a trail.

1214
00:52:45,435 --> 00:52:48,576
Our first pass at the trail was to use two channels for XZ

1215
00:52:48,596 --> 00:52:51,197
direction offsets and extend it with an extra channel for

1216
00:52:51,237 --> 00:52:51,778
effect age.

1217
00:52:53,365 --> 00:52:56,348
we use a ribbon particle system to create some trail geometry.

1218
00:52:56,988 --> 00:52:58,830
This extends the trailing edge of the sphere

1219
00:52:59,510 --> 00:53:01,732
and fades out all channels over its lifespan.

1220
00:53:02,934 --> 00:53:05,316
The extra age channel, shown here in the blue channel,

1221
00:53:05,816 --> 00:53:08,519
would let us seek into a procedural settling animation.

1222
00:53:10,801 --> 00:53:11,982
This technique showed some promise,

1223
00:53:12,102 --> 00:53:13,663
and we used it for E3 2017.

1224
00:53:14,524 --> 00:53:15,465
But it did have some problems.

1225
00:53:16,306 --> 00:53:17,587
It could only use sphere colliders.

1226
00:53:18,987 --> 00:53:21,308
Multiple colliders could z-fight in the render texture,

1227
00:53:21,648 --> 00:53:24,068
so the grass between a troll's two feet

1228
00:53:24,169 --> 00:53:25,909
would pop back and forth and vibrate.

1229
00:53:26,709 --> 00:53:28,610
And also, since it was a top-down projection,

1230
00:53:29,110 --> 00:53:30,430
it would move vegetation no matter

1231
00:53:30,450 --> 00:53:31,190
the height of the effect.

1232
00:53:31,790 --> 00:53:33,171
This meant that elevated colliders,

1233
00:53:33,211 --> 00:53:35,171
like leaping wolves, lifted objects,

1234
00:53:35,211 --> 00:53:36,552
and tall, high-stepping trolls,

1235
00:53:37,312 --> 00:53:38,432
would look like a ghost was moving

1236
00:53:38,452 --> 00:53:39,432
through the grass beneath them.

1237
00:53:41,973 --> 00:53:43,673
So maybe we could use our footstep system

1238
00:53:43,813 --> 00:53:45,994
to splat fading sprites into the render texture.

1239
00:53:46,694 --> 00:53:48,435
This would only happen when feet touch the ground.

1240
00:53:50,376 --> 00:53:53,098
Now this could work, but it would also greatly increase

1241
00:53:53,138 --> 00:53:54,760
the altering burden on our effects team,

1242
00:53:55,000 --> 00:53:56,521
who already had a lot of things scheduled.

1243
00:53:58,443 --> 00:54:00,725
This would require a lot of extra tagging

1244
00:54:00,825 --> 00:54:03,046
of materials and animations in our pipeline.

1245
00:54:04,207 --> 00:54:05,508
Because of this extra workload,

1246
00:54:05,609 --> 00:54:07,250
I suggested we not pursue this approach.

1247
00:54:07,910 --> 00:54:09,872
My gut told me there had to be a better solution out there.

1248
00:54:14,199 --> 00:54:16,181
So it only took about seven months of thinking

1249
00:54:16,201 --> 00:54:17,201
in the background about it,

1250
00:54:18,042 --> 00:54:19,103
before landing on a solution

1251
00:54:19,123 --> 00:54:20,223
that would meet the visual target

1252
00:54:20,484 --> 00:54:22,065
and fit into the performance and memory budgets.

1253
00:54:22,805 --> 00:54:23,926
I did work on other things.

1254
00:54:25,767 --> 00:54:27,829
We used approximate shapes like rag dolls

1255
00:54:27,989 --> 00:54:29,990
and we rendered the height of their bottom side

1256
00:54:30,351 --> 00:54:31,351
into two channels.

1257
00:54:33,453 --> 00:54:35,074
One channel is held every frame

1258
00:54:35,554 --> 00:54:36,835
and the other fades upwards.

1259
00:54:38,416 --> 00:54:39,737
How much that channel is faded

1260
00:54:40,138 --> 00:54:41,599
can tell us how much time has passed

1261
00:54:41,739 --> 00:54:42,880
since the collision was rendered.

1262
00:54:45,091 --> 00:54:46,532
And when verts lean out of the way,

1263
00:54:47,012 --> 00:54:49,413
we use the slope of the unfading height field

1264
00:54:49,674 --> 00:54:52,275
to determine the direction and magnitude of that lean.

1265
00:54:54,156 --> 00:54:56,638
Here's another video with a more detailed player collider.

1266
00:54:57,078 --> 00:54:57,998
You can see his feet there.

1267
00:54:59,819 --> 00:55:01,400
Now, this render texture is double buffered

1268
00:55:01,620 --> 00:55:03,561
so that we can construct accurate motion vectors

1269
00:55:03,621 --> 00:55:04,622
for our vertex movements.

1270
00:55:05,142 --> 00:55:06,963
And that's been true for all the techniques we described.

1271
00:55:08,871 --> 00:55:12,573
We use a read, modify, write to blend the minimum

1272
00:55:13,013 --> 00:55:14,053
into the fading channel,

1273
00:55:14,554 --> 00:55:16,014
and we replace the unfading channel

1274
00:55:16,615 --> 00:55:19,056
only if that blend pushed the height field down.

1275
00:55:20,776 --> 00:55:22,417
Except I couldn't use read, modify, write.

1276
00:55:22,777 --> 00:55:24,218
It's slower and was not in my budget.

1277
00:55:25,058 --> 00:55:26,959
But we can take advantage of the double buffering

1278
00:55:27,259 --> 00:55:28,660
to read from the previous frame,

1279
00:55:29,260 --> 00:55:30,341
letting us do the compositing

1280
00:55:30,361 --> 00:55:31,861
in the render texture pixel shader.

1281
00:55:34,518 --> 00:55:36,219
Now, this does mean that in some rare cases,

1282
00:55:36,479 --> 00:55:38,780
draw orders would lead to negative height differences

1283
00:55:38,980 --> 00:55:40,621
for one frame before correcting.

1284
00:55:41,382 --> 00:55:43,283
But we fixed this in the vegetation vertex shader

1285
00:55:43,323 --> 00:55:44,784
just by clamping the age to zero.

1286
00:55:47,945 --> 00:55:50,467
And lastly, this works best for stationary

1287
00:55:50,607 --> 00:55:51,928
or high movement colliders.

1288
00:55:52,648 --> 00:55:55,850
An idling player animation can cause vegetation

1289
00:55:55,890 --> 00:55:58,571
to pop frequently from its settling animation

1290
00:55:58,831 --> 00:56:00,012
back into its trampled pose.

1291
00:56:01,265 --> 00:56:03,926
We mitigate this by reducing the fade rate to zero

1292
00:56:04,207 --> 00:56:07,228
where the player is standing, which is always

1293
00:56:07,649 --> 00:56:10,670
the center of the texture, because that follows the player

1294
00:56:10,690 --> 00:56:10,971
around.

1295
00:56:12,131 --> 00:56:13,852
This slows the settling animation to zero

1296
00:56:13,972 --> 00:56:14,673
underneath their feet.

1297
00:56:17,234 --> 00:56:18,895
Here's some work in progress testbed video.

1298
00:56:19,716 --> 00:56:21,677
You can definitely see how, as I got further and further down

1299
00:56:21,697 --> 00:56:24,019
this rabbit hole, I started using more and more debug

1300
00:56:24,039 --> 00:56:24,619
visualization.

1301
00:56:36,119 --> 00:56:37,200
Forgive the z-fighting there.

1302
00:56:37,220 --> 00:56:41,103
Okay, so we're gonna go through it one more time

1303
00:56:41,163 --> 00:56:43,085
because, again, debug visuals, they help.

1304
00:56:44,486 --> 00:56:46,187
On the left, we're gonna look at

1305
00:56:46,207 --> 00:56:47,549
the dual height field texture.

1306
00:56:48,089 --> 00:56:49,110
And on the right, we're gonna see

1307
00:56:49,130 --> 00:56:50,711
the world view from its side.

1308
00:56:52,413 --> 00:56:53,794
First, we'll render in a sphere.

1309
00:56:55,235 --> 00:56:57,157
In the world view, I'm gonna add a slice

1310
00:56:57,177 --> 00:56:58,818
of the height field so that we can see it in space.

1311
00:57:01,508 --> 00:57:03,770
If we take away the sphere, you can see that one channel

1312
00:57:03,790 --> 00:57:06,051
of the height field fades up at a constant rate

1313
00:57:06,451 --> 00:57:07,612
while the other is held firm.

1314
00:57:09,113 --> 00:57:13,835
Adding the sphere back, let's move it and pause.

1315
00:57:15,556 --> 00:57:17,677
So the differences in the height field channels

1316
00:57:18,197 --> 00:57:21,399
divided by the fade rate tells us how much time has passed

1317
00:57:21,419 --> 00:57:23,040
since the collider moved away from that position.

1318
00:57:24,521 --> 00:57:26,462
We use a procedural animation for total lean.

1319
00:57:26,882 --> 00:57:28,163
It's a cosine times a fall off.

1320
00:57:28,967 --> 00:57:30,788
and it goes negative to give us overshooting

1321
00:57:30,988 --> 00:57:31,948
as vegetation settles.

1322
00:57:34,009 --> 00:57:36,210
We use that time passed to seek a pose

1323
00:57:36,310 --> 00:57:37,370
from that animation curve.

1324
00:57:39,591 --> 00:57:41,371
Now as we watch the sphere continue to move,

1325
00:57:41,451 --> 00:57:43,052
you can see how it overwrites the held channel

1326
00:57:43,392 --> 00:57:45,093
only when it's deeper than the faded channel.

1327
00:57:45,873 --> 00:57:48,294
This means that shallower collisions need to wait

1328
00:57:48,314 --> 00:57:49,674
for the vegetation to settle somewhat

1329
00:57:49,714 --> 00:57:50,515
before they can affect it,

1330
00:57:50,895 --> 00:57:52,735
but deeper collisions can affect it right away.

1331
00:57:54,536 --> 00:57:55,676
Let's watch that one more time,

1332
00:57:56,076 --> 00:57:58,177
but with some simple grass geometry reacting to it.

1333
00:58:08,168 --> 00:58:10,050
And one last look at the ship technique in action.

1334
00:58:10,650 --> 00:58:12,732
For small characters, like that poor guy there,

1335
00:58:13,493 --> 00:58:15,695
we use a simple mesh sphere as a collider shape.

1336
00:58:15,715 --> 00:58:18,177
Now I'm turning off the spheres on Draugr

1337
00:58:18,197 --> 00:58:19,378
so we can see the effect a bit better.

1338
00:58:20,639 --> 00:58:22,261
For our larger and hero characters,

1339
00:58:22,401 --> 00:58:24,543
we try to get more faithful collision representation

1340
00:58:24,643 --> 00:58:26,244
by attaching shapes to multiple joints.

1341
00:58:41,600 --> 00:58:43,001
And we're not limited to primitive shapes.

1342
00:58:43,542 --> 00:58:45,503
The troll totem has a custom collider shape,

1343
00:58:45,523 --> 00:58:46,343
and this works really well.

1344
00:58:48,024 --> 00:58:49,305
We can also see here the importance

1345
00:58:49,345 --> 00:58:51,387
of separate foot colliders for large characters.

1346
00:59:00,753 --> 00:59:02,454
And lastly, the boat is another case

1347
00:59:02,474 --> 00:59:03,855
where we use a custom mesh collider.

1348
00:59:22,057 --> 00:59:23,458
Okay guys, we made it through.

1349
00:59:23,759 --> 00:59:24,720
That was a lot to go over.

1350
00:59:25,440 --> 00:59:26,781
I hope everything was clear and you were able

1351
00:59:26,801 --> 00:59:27,842
to take something away from it,

1352
00:59:27,882 --> 00:59:29,524
even if you don't plan to implement a system

1353
00:59:29,704 --> 00:59:30,545
with all of these features.

1354
00:59:32,166 --> 00:59:33,527
We're not gonna really have time for questions,

1355
00:59:33,587 --> 00:59:34,508
but I'll be hanging around,

1356
00:59:34,568 --> 00:59:35,629
so if you wanna join me later,

1357
00:59:36,350 --> 00:59:37,030
we can talk about it,

1358
00:59:37,070 --> 00:59:38,372
or you can reach out to me on Twitter,

1359
00:59:38,492 --> 00:59:39,312
at TheRealBigFeel,

1360
00:59:39,573 --> 00:59:41,094
and I'll post a references slide there as well.

1361
00:59:42,775 --> 00:59:43,756
Now I've gotta do a shout out,

1362
00:59:44,257 --> 00:59:45,478
because I really could not have built this

1363
00:59:45,718 --> 00:59:47,460
without the teamwork of some amazing people.

1364
00:59:48,817 --> 00:59:50,098
By now you may know Rupert Renard.

1365
00:59:50,538 --> 00:59:51,999
Again, he's one of our graphics programmers

1366
00:59:52,039 --> 00:59:54,221
and was instrumental in co-developing the system with me.

1367
00:59:55,462 --> 00:59:57,183
Florian Strauss, our technical director,

1368
00:59:57,764 --> 00:59:59,485
developed the snow system that I was able to borrow

1369
00:59:59,525 --> 01:00:00,986
a lot of tooling from when building

1370
01:00:01,006 --> 01:00:02,327
the ground vegetation collisions.

1371
01:00:03,608 --> 01:00:05,950
Paolo Siricchio, one of our graphics programmers

1372
01:00:06,010 --> 01:00:07,311
responsible for effects and rendering,

1373
01:00:07,511 --> 01:00:09,873
did a great job integrating and evolving wind influence

1374
01:00:10,113 --> 01:00:11,895
in our particle workflow to my specifications.

1375
01:00:13,282 --> 01:00:15,024
Travis Slagle, a tools tech artist,

1376
01:00:15,444 --> 01:00:18,266
built the tools that we use to alter 90% of our vertex data

1377
01:00:18,446 --> 01:00:19,147
on our wind meshes.

1378
01:00:20,528 --> 01:00:22,850
And Max Ankar, our effects lead for this project,

1379
01:00:23,350 --> 01:00:25,152
he set up wind on the vast majority of tacks

1380
01:00:25,372 --> 01:00:27,894
and was by far the wind system's biggest fan from day one.

1381
01:00:30,296 --> 01:00:31,837
And really, I've got to thank the entire team

1382
01:00:31,857 --> 01:00:32,777
at Sony Santa Monica.

1383
01:00:33,018 --> 01:00:33,918
I see some of them in the audience,

1384
01:00:33,938 --> 01:00:36,140
so don't look at me, guys, because I'm going to gush.

1385
01:00:36,420 --> 01:00:38,122
I could not have done my best work without them.

1386
01:00:38,822 --> 01:00:41,184
Every single one of these people is so dialed into what they do.

1387
01:00:41,504 --> 01:00:42,785
It's an incredible place to be a part of.

1388
01:00:43,715 --> 01:00:45,457
I love this crew and I'm grateful for them.

1389
01:00:46,999 --> 01:00:51,203
My point is this, if you ever get a chance to work with any one of them, present or former,

1390
01:00:51,604 --> 01:00:53,266
you should absolutely jump on the opportunity.

1391
01:00:55,592 --> 01:00:57,534
And what do you know, the easiest way to do this

1392
01:00:57,594 --> 01:00:58,815
may well be to reach out to us.

1393
01:00:59,336 --> 01:01:00,657
We're hiring for a lot of positions,

1394
01:01:00,717 --> 01:01:02,539
including senior and lead tech art roles.

1395
01:01:03,199 --> 01:01:05,682
Art of all disciplines, programming of all disciplines,

1396
01:01:05,842 --> 01:01:07,504
design of all disciplines, animation,

1397
01:01:07,644 --> 01:01:08,484
you're seeing a pattern here.

1398
01:01:09,786 --> 01:01:11,347
If you don't see an open role for your talents,

1399
01:01:11,387 --> 01:01:12,929
but think you can make a strong contribution,

1400
01:01:13,229 --> 01:01:14,370
I suggest you go for it anyway.

1401
01:01:14,710 --> 01:01:16,132
We can be flexible and we might have a place

1402
01:01:16,152 --> 01:01:16,812
for you in the future.

1403
01:01:18,554 --> 01:01:19,475
Thanks for joining me today, guys.

