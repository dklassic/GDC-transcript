1
00:00:06,680 --> 00:00:10,141
In this presentation, I will not dwell too long on the past,

2
00:00:10,262 --> 00:00:13,823
but instead I will share with you the current shift in mindset

3
00:00:14,023 --> 00:00:17,525
that we are undergoing with our online development here at Massive.

4
00:00:18,525 --> 00:00:21,427
And by the end of this presentation, you'll understand how,

5
00:00:21,787 --> 00:00:25,469
by adopting a cloud-first mentality, you'll be better prepared than ever before

6
00:00:25,569 --> 00:00:27,290
for a smooth and stable launch of your game.

7
00:00:28,410 --> 00:00:31,071
But first, some background.

8
00:00:31,291 --> 00:00:31,732
And who am I?

9
00:00:33,252 --> 00:00:35,473
And what perspective do I bring to this presentation?

10
00:00:37,429 --> 00:00:40,853
I'm online focused. I've been at Massive for 15 years.

11
00:00:42,355 --> 00:00:44,898
The company itself is over 20 years old.

12
00:00:48,703 --> 00:00:52,307
Since we can trace our online roots back 15 years,

13
00:00:54,878 --> 00:01:09,988
We have this long legacy and I just want to state for the record that I think legacy is a good thing because it enables us to rest assured on the quality of some subsystems so that we can focus on improving others rather than having to reinvent the entire wheel for every game we do.

14
00:01:12,149 --> 00:01:15,251
So let's take a look at a typical massive game.

15
00:01:16,331 --> 00:01:18,893
So there's no spoilers here.

16
00:01:18,933 --> 00:01:22,815
There's just considered a normal classic massive game, whichever it is.

17
00:01:23,505 --> 00:01:25,807
running on your TV or console or PC.

18
00:01:27,248 --> 00:01:30,891
This game is connected to an online infrastructure

19
00:01:31,251 --> 00:01:35,295
that we run in data centers around the world.

20
00:01:36,056 --> 00:01:39,118
Contains a lot of microservices, over 20,

21
00:01:39,779 --> 00:01:41,640
that deal with things like your C gaming,

22
00:01:41,660 --> 00:01:42,882
your character and progression,

23
00:01:43,262 --> 00:01:45,444
and leaderboards and what have you.

24
00:01:47,686 --> 00:01:47,766
And...

25
00:01:49,101 --> 00:01:53,282
Furthermore, your game is also connected to a game server,

26
00:01:53,662 --> 00:02:00,584
and this game server is running the AI, it's running missions and controlling NPCs,

27
00:02:01,804 --> 00:02:03,884
and of course also multiplayer activities.

28
00:02:05,725 --> 00:02:11,186
And then of course, this game server is also connected to the online services infrastructure.

29
00:02:12,927 --> 00:02:15,227
And one thing that

30
00:02:16,596 --> 00:02:19,798
that this enables us to do is to,

31
00:02:21,300 --> 00:02:22,981
or that it forces us to do, rather,

32
00:02:23,762 --> 00:02:25,984
is that we take care of the save game.

33
00:02:26,804 --> 00:02:29,126
Since the game state sits on the game server

34
00:02:29,306 --> 00:02:30,908
and not on the game client,

35
00:02:32,509 --> 00:02:35,532
the save game is synced between the game server

36
00:02:36,012 --> 00:02:38,114
and the online backend.

37
00:02:39,735 --> 00:02:41,717
So, with that out of the way,

38
00:02:41,737 --> 00:02:44,439
let's talk a bit about what's cool about our online

39
00:02:44,520 --> 00:02:45,260
and the way we do this.

40
00:02:46,347 --> 00:02:49,768
And as you can understand, it enables us to run larger simulations

41
00:02:50,148 --> 00:02:52,829
because since AI is offloaded to the server,

42
00:02:53,690 --> 00:02:59,571
we're not limited by the compute power on the console or the client,

43
00:02:59,952 --> 00:03:02,512
but rather limited by the compute power

44
00:03:02,732 --> 00:03:04,033
that we have access to in the cloud.

45
00:03:05,213 --> 00:03:08,954
This enables us to have a bit of a different performance budget

46
00:03:09,134 --> 00:03:09,875
than all the titles.

47
00:03:11,025 --> 00:03:21,888
Mostly we focus on better graphics and better UIs, or higher budgets for this, since there

48
00:03:21,949 --> 00:03:24,809
is less AI that needs to be computed on the client.

49
00:03:26,030 --> 00:03:31,411
And also, we have multiple clients connected to the same game server, so since they're

50
00:03:31,451 --> 00:03:35,912
already there, it's easy for us to add seamless multiplayer.

51
00:03:38,595 --> 00:03:43,639
And it's up to us whether or not we flip the switch if we oversimplify it,

52
00:03:43,799 --> 00:03:45,961
so to replicate the players so you see them.

53
00:03:46,842 --> 00:03:52,166
This happens for example in the division when you can walk into a group of players

54
00:03:52,386 --> 00:03:54,948
and that's because they're already there.

55
00:03:56,949 --> 00:04:02,214
So now then let's talk some consequences on our online strategy because

56
00:04:03,434 --> 00:04:07,778
of course there are choices and there are pros and cons with the way we build it.

57
00:04:08,917 --> 00:04:14,098
And these consequences are, well, to start with,

58
00:04:15,379 --> 00:04:17,319
it's a complex mesh of online services.

59
00:04:18,139 --> 00:04:21,000
You saw a very simplified picture of it earlier.

60
00:04:22,661 --> 00:04:23,741
But it is quite complex,

61
00:04:23,881 --> 00:04:25,922
and there's a lot of interdependencies in there.

62
00:04:27,062 --> 00:04:29,763
Furthermore, since the AI is running on the server,

63
00:04:30,723 --> 00:04:32,384
we cannot have an offline mode for the client.

64
00:04:33,604 --> 00:04:35,345
The client has to be always online.

65
00:04:35,925 --> 00:04:37,525
Otherwise, the game simply doesn't work.

66
00:04:39,684 --> 00:04:44,887
This means that the online stability is absolutely critical, even for a single player.

67
00:04:45,627 --> 00:04:50,389
So we try to think of our online infrastructure as critical infrastructure.

68
00:04:51,690 --> 00:04:59,553
And furthermore, since all the teams, regardless of what you work on pretty much on the game,

69
00:05:00,285 --> 00:05:10,112
You're affected by online, so this means that you need to be careful so you don't break things for other people.

70
00:05:10,672 --> 00:05:15,155
If you break the game server, all the players on that game server are kicked out, for example,

71
00:05:15,715 --> 00:05:18,137
even from their single player session, which we don't want to happen.

72
00:05:19,137 --> 00:05:25,621
And we need to ensure that everyone is up to speed on the latest on anti-cheat technology, etc.

73
00:05:29,019 --> 00:05:34,881
So here at Massive then we of course have all eyes on online and to deal with this we have a

74
00:05:35,302 --> 00:05:44,465
very efficient live ops organization here at Massive who take online seriously and the quality

75
00:05:44,505 --> 00:05:50,607
of the service to our gamers and adding more stuff to the game as we go on.

76
00:05:52,052 --> 00:05:58,055
And we do lots of open betas etc for testing. For example the debate on the division was the

77
00:05:58,095 --> 00:06:04,937
biggest ever for a new game and that reached over 6.4 million players which at the time was a record.

78
00:06:08,238 --> 00:06:11,260
But let's go back and talk a bit about development.

79
00:06:17,302 --> 00:06:20,164
It's a story of unintended consequences

80
00:06:20,204 --> 00:06:22,486
because since we've been doing this for so long,

81
00:06:23,346 --> 00:06:28,050
and as time goes by, different teams may start to use

82
00:06:28,110 --> 00:06:29,931
different testing methodologies, for example,

83
00:06:29,971 --> 00:06:33,474
and different technologies that are best suited

84
00:06:33,854 --> 00:06:35,316
for their specific task at hand.

85
00:06:36,797 --> 00:06:40,419
And then also different tests may use different stubs and shims.

86
00:06:41,800 --> 00:06:44,723
And different teams may test on different hardware.

87
00:06:46,725 --> 00:06:50,006
So there's a lot of special cases.

88
00:06:51,547 --> 00:06:55,168
And what can happen then is that special cases become the norm

89
00:06:55,368 --> 00:06:56,448
rather than the exception,

90
00:06:57,148 --> 00:06:59,929
which increases an already complex system.

91
00:07:02,070 --> 00:07:04,270
It results in lots of isolated testing,

92
00:07:04,450 --> 00:07:07,331
which is not always relevant for the shipped game.

93
00:07:08,932 --> 00:07:10,812
And as we grow as an organization,

94
00:07:11,172 --> 00:07:14,493
fewer people understand the full online system.

95
00:07:16,567 --> 00:07:20,530
So let's talk about some examples of unintended consequences.

96
00:07:21,451 --> 00:07:25,755
Well, I mentioned the save game system earlier.

97
00:07:26,355 --> 00:07:27,396
It's very important that it works.

98
00:07:27,616 --> 00:07:34,202
So we have built it to be rock solid.

99
00:07:34,422 --> 00:07:35,883
It's essentially a SAN.

100
00:07:37,885 --> 00:07:41,468
However, this SAN came online very late in the project.

101
00:07:41,548 --> 00:07:44,431
So a local stub had to be used in most cases.

102
00:07:45,588 --> 00:07:47,689
during the years that the game was in development.

103
00:07:49,330 --> 00:07:55,512
And the team size is not large enough because at the end of the

104
00:07:56,892 --> 00:07:58,893
the latest project we did a server could handle 1000

105
00:07:59,953 --> 00:08:03,114
clients because of all the performance works

106
00:08:03,455 --> 00:08:05,455
that had gone into it. But we didn't have 1000

107
00:08:06,716 --> 00:08:10,837
members on the team so on a playtest we couldn't actually fill

108
00:08:10,857 --> 00:08:12,738
a server. We had to rely on bots.

109
00:08:13,922 --> 00:08:18,725
And bots don't necessarily load the servers like players do,

110
00:08:18,965 --> 00:08:21,446
so it complicates capacity planning for launch.

111
00:08:23,027 --> 00:08:28,030
And some stubs and shims were tested more than the system

112
00:08:28,510 --> 00:08:29,171
and that were shipped.

113
00:08:29,831 --> 00:08:32,813
So we were not always focusing on testing what we actually shipped.

114
00:08:33,954 --> 00:08:37,116
So that was actually very much something we wanted to improve.

115
00:08:38,556 --> 00:08:41,358
But furthermore, this is more than a technological issue

116
00:08:41,378 --> 00:08:41,638
for us.

117
00:08:43,189 --> 00:08:46,171
For many developers, live is a special case.

118
00:08:48,272 --> 00:08:50,913
Because it's not the case you see while you are working on the game.

119
00:08:51,953 --> 00:08:55,295
And we have different processes, therefore it has evolved,

120
00:08:55,475 --> 00:09:00,017
different processes for when we develop the game.

121
00:09:00,597 --> 00:09:04,979
We have built-in data managers handling ops with QC monitoring.

122
00:09:06,179 --> 00:09:07,780
But then when the game goes live,

123
00:09:07,980 --> 00:09:10,881
we have our live ops organization that I mentioned earlier.

124
00:09:11,810 --> 00:09:13,391
with a war room for monitoring.

125
00:09:14,471 --> 00:09:17,132
So it's, it's quite different.

126
00:09:18,633 --> 00:09:23,035
And, and of course, few developers actually see both sides of this fence.

127
00:09:23,195 --> 00:09:26,636
So it's hard to anticipate the needs of the other disciplines.

128
00:09:28,537 --> 00:09:28,657
So.

129
00:09:31,625 --> 00:09:33,665
We needed to be better at testing what we ship.

130
00:09:34,285 --> 00:09:38,126
And we have this mantra now that we test what we ship

131
00:09:38,186 --> 00:09:39,166
and we ship what we tested.

132
00:09:40,227 --> 00:09:45,248
And this sounds very easy, but really, it's not.

133
00:09:45,308 --> 00:09:46,988
Because how often do you test the client?

134
00:09:47,028 --> 00:09:48,848
Well, you do pretty much every day, I'm sure.

135
00:09:49,689 --> 00:09:52,549
The services, your account systems,

136
00:09:52,609 --> 00:09:54,490
and any other thing you depend on,

137
00:09:55,030 --> 00:09:56,070
I hope you test it a lot.

138
00:09:57,150 --> 00:10:00,451
The game server, I also hope you all test it a lot.

139
00:10:01,854 --> 00:10:05,295
Auto scaling, how often do you actually test that?

140
00:10:06,396 --> 00:10:08,036
And do you also test scaling down,

141
00:10:08,877 --> 00:10:10,597
which you most likely need to do at night?

142
00:10:12,638 --> 00:10:16,880
Do you test disaster recovery, or how often do you test that

143
00:10:16,900 --> 00:10:17,680
so you know it works?

144
00:10:18,680 --> 00:10:21,301
And furthermore, how often do you actually test the war room?

145
00:10:22,342 --> 00:10:29,765
So what happens here is that as a developer,

146
00:10:31,551 --> 00:10:36,414
As the impact on life increases, our ability to test decreases.

147
00:10:37,535 --> 00:10:40,417
So the less something is tested,

148
00:10:40,737 --> 00:10:44,360
the more it relies on a few experts with specialized knowledge.

149
00:10:45,660 --> 00:10:47,882
And these are people that can get sick.

150
00:10:49,203 --> 00:10:56,808
So it's a potential liability and a risk that we don't want.

151
00:11:00,238 --> 00:11:03,140
And then if you couple this with the way the industry is changing,

152
00:11:04,141 --> 00:11:09,003
the way it has been working for a long time is you spend a bunch of years in

153
00:11:09,023 --> 00:11:13,346
development, making your game and ship it live for a while.

154
00:11:14,506 --> 00:11:18,909
And of course, as you all know, this is changing shorter time in production,

155
00:11:19,189 --> 00:11:23,931
longer time in life, and ideally no end of life.

156
00:11:25,772 --> 00:11:29,114
So this new era where

157
00:11:29,730 --> 00:11:33,894
Where AAA games are live longer than they were in development is pretty interesting.

158
00:11:35,636 --> 00:11:37,298
It has a couple of consequences.

159
00:11:38,279 --> 00:11:43,284
For example, few developers stay on a project from the beginning to the end.

160
00:11:45,487 --> 00:11:47,869
Simply because people have different interests.

161
00:11:48,189 --> 00:11:50,912
Some people want to build the foundations of the game.

162
00:11:50,932 --> 00:11:52,214
Some people want to maintain it, etc.

163
00:11:53,700 --> 00:11:57,603
And what happens then is that processes, or what can happen,

164
00:11:57,863 --> 00:12:00,405
is that processes tend to be even more strict and formal

165
00:12:00,945 --> 00:12:04,007
to compensate the natural knowledge loss that you have.

166
00:12:05,588 --> 00:12:09,691
And we really want to break this chain of complexity.

167
00:12:09,711 --> 00:12:16,015
We want to focus our attention on one single unified workflow,

168
00:12:17,015 --> 00:12:21,518
where we define processes in the most strict and formal way we know how.

169
00:12:22,423 --> 00:12:24,685
And that is with code instead of with people.

170
00:12:26,026 --> 00:12:31,271
So if we take one workflow, what we really do is that we start

171
00:12:31,351 --> 00:12:34,954
looking at the ideal live workflow,

172
00:12:35,194 --> 00:12:36,515
and then we work backwards from there.

173
00:12:36,995 --> 00:12:39,017
And we try to apply that everywhere.

174
00:12:39,438 --> 00:12:42,240
And that means that we have a single code path for all features,

175
00:12:43,581 --> 00:12:48,365
a single way of debugging your game, a single way of monitoring your game.

176
00:12:49,568 --> 00:12:52,370
Deploying your game and testing your game.

177
00:12:53,690 --> 00:12:57,592
And this is all defined in code with automation by default.

178
00:12:59,452 --> 00:13:02,434
So let's talk a bit about this infrastructure as code.

179
00:13:03,094 --> 00:13:05,955
In practice, what we do is that we're using Terraform

180
00:13:06,975 --> 00:13:09,336
to script the complete infrastructure.

181
00:13:11,057 --> 00:13:14,538
And we're using Google Cloud Build to build virtual machines.

182
00:13:17,503 --> 00:13:21,865
When we do this, we needed to embrace infrastructure on demand,

183
00:13:22,006 --> 00:13:27,389
which was a big shift for us, since we relied completely on on-prem

184
00:13:28,229 --> 00:13:29,130
just a couple of years back.

185
00:13:31,291 --> 00:13:36,474
So, start and discard is what we call the set of tools

186
00:13:36,534 --> 00:13:39,936
and principles that steer this attention to one workflow,

187
00:13:41,377 --> 00:13:44,419
where you start complete live-like environments,

188
00:13:45,779 --> 00:13:47,400
You use them whatever person you need,

189
00:13:48,141 --> 00:13:49,802
and you can start how many you want.

190
00:13:50,022 --> 00:13:54,205
Every single team member can start their own complete LiveLike environment

191
00:13:54,285 --> 00:13:56,406
if they want to, and if they need that for testing.

192
00:13:57,226 --> 00:13:59,428
And then, of course, you discard it once you're done with it.

193
00:14:02,150 --> 00:14:05,412
So what do I mean then with a LiveLike environment?

194
00:14:05,932 --> 00:14:10,155
Well, it is a copy of the real infrastructure.

195
00:14:11,035 --> 00:14:13,037
It is defined in code, so it's easy to copy.

196
00:14:13,177 --> 00:14:14,277
It's easy to instantiate.

197
00:14:15,302 --> 00:14:19,486
And in the cloud, so you boot it up with the exact same auto

198
00:14:19,526 --> 00:14:22,448
scaling rules, exact same firewall rules, etc.

199
00:14:23,089 --> 00:14:26,292
And the exact same way to deploy, debug and monitor your system.

200
00:14:27,533 --> 00:14:33,639
As an example, if a gameplay programmer wants to add a dashboard

201
00:14:33,659 --> 00:14:36,421
to Grafana to monitor a gameplay feature,

202
00:14:37,462 --> 00:14:40,725
they would check in that feature and the dashboard.

203
00:14:42,077 --> 00:14:43,398
at the same time in the code base.

204
00:14:44,158 --> 00:14:47,900
And then at every start and discard environment thereafter,

205
00:14:49,541 --> 00:14:53,123
they're able to monitor in real time

206
00:14:53,504 --> 00:14:56,585
that specific metric that they wanted to track,

207
00:14:57,306 --> 00:15:00,828
regardless of if it's a playtest for a handful of people

208
00:15:01,528 --> 00:15:03,129
or going live.

209
00:15:05,190 --> 00:15:05,310
So,

210
00:15:07,747 --> 00:15:12,632
Since this infrastructure then sits in code, it can of course be branched and

211
00:15:12,692 --> 00:15:14,814
tracked together with the code that uses it.

212
00:15:15,475 --> 00:15:22,362
And it means that we can have 100% repeatable deployments, no special

213
00:15:22,442 --> 00:15:29,288
source on any of these servers, no special cases, and everyone can go in and see.

214
00:15:30,917 --> 00:15:37,839
how it works. If a developer wants to add a new service that uses a new firewall,

215
00:15:37,959 --> 00:15:45,421
or a new TCP port, for example, or UDP port for that matter, you'd go into the infrastructure,

216
00:15:46,162 --> 00:15:50,543
open up the firewall for that port as needed, and check it in together with the code and have

217
00:15:50,563 --> 00:15:57,405
it submitted for review. And it's all done by a single person. Can be.

218
00:15:59,365 --> 00:15:59,485
So,

219
00:16:02,017 --> 00:16:05,279
In order to do this, as you understand by now,

220
00:16:06,300 --> 00:16:08,962
we need to have a cloud native mentality.

221
00:16:10,163 --> 00:16:14,626
And we use 100% Google Cloud currently here at Massive.

222
00:16:15,747 --> 00:16:20,490
And I guess some of you will react with,

223
00:16:20,610 --> 00:16:25,553
oh, using 100% cloud of any type of cloud is very expensive.

224
00:16:25,633 --> 00:16:26,434
And yes, it can be.

225
00:16:29,473 --> 00:16:32,216
Typically it is if you move all of your on-prem

226
00:16:32,916 --> 00:16:34,878
and just boot it up into the cloud.

227
00:16:35,039 --> 00:16:38,622
That's not exactly how we do it, which I'll cover later.

228
00:16:42,566 --> 00:16:44,488
Because once we are inside Google Cloud,

229
00:16:44,668 --> 00:16:47,311
it makes sense to use some other on-demand services.

230
00:16:48,973 --> 00:16:50,675
And in one case, for example,

231
00:16:51,924 --> 00:16:54,907
We replaced the subsystem that we had built ourself

232
00:16:55,308 --> 00:16:57,570
with on-demand service on Google Cloud,

233
00:16:57,790 --> 00:17:02,775
and that saved 90% of the operating costs

234
00:17:03,056 --> 00:17:04,738
for that particular system.

235
00:17:08,882 --> 00:17:13,407
And furthermore, since this particular system then,

236
00:17:13,727 --> 00:17:14,968
and any others like it,

237
00:17:16,200 --> 00:17:19,362
or on demand, there is no overhead cost

238
00:17:20,043 --> 00:17:22,705
of actually letting the entire team boot up

239
00:17:22,725 --> 00:17:26,448
their own complete LiveLike environment,

240
00:17:27,229 --> 00:17:29,711
because you don't pay until you actually use it.

241
00:17:31,272 --> 00:17:33,234
So that's a pretty nice benefit.

242
00:17:36,256 --> 00:17:41,401
So we test what we ship, and we ship what we test.

243
00:17:41,421 --> 00:17:42,141
We ship what we test.

244
00:17:46,555 --> 00:17:52,038
And then what we did was that we moved Say Games to Google Cloud Storage.

245
00:17:52,738 --> 00:17:55,379
I mentioned earlier in the past we had the SAN.

246
00:17:56,079 --> 00:18:00,101
Just made more sense to put it in Google Cloud Storage and have it there.

247
00:18:02,122 --> 00:18:07,624
Furthermore, we have smaller game servers so that we can fill them with

248
00:18:07,884 --> 00:18:09,525
human players at every single playtest.

249
00:18:10,805 --> 00:18:11,766
And then of course with

250
00:18:13,213 --> 00:18:21,964
With design and technology inventions, we hide the fact from players that it's a smaller game

251
00:18:22,004 --> 00:18:27,991
service. It's not necessarily something that you would notice, but it means that we can have more

252
00:18:28,252 --> 00:18:32,257
relevant testing of everything every single time we do it.

253
00:18:33,923 --> 00:18:36,624
Furthermore, it has a lot of nicer benefits.

254
00:18:36,944 --> 00:18:38,745
It's easier and faster to scale down

255
00:18:39,506 --> 00:18:41,747
when you have fewer players to wait for,

256
00:18:41,767 --> 00:18:43,448
that leave the server, et cetera.

257
00:18:46,289 --> 00:18:48,891
Every single playtest utilizes the same tech

258
00:18:49,151 --> 00:18:51,692
from deployment through monitoring and debugging

259
00:18:52,052 --> 00:18:53,333
as the live game does.

260
00:18:54,414 --> 00:18:57,635
And the process, as I mentioned already,

261
00:18:57,936 --> 00:18:59,596
it devolves along with the code,

262
00:19:00,017 --> 00:19:03,378
and we can branch it, which I find pretty cool.

263
00:19:05,374 --> 00:19:08,395
And knowledge transfer is improved.

264
00:19:09,116 --> 00:19:13,058
With new hires, they can get the entire complete live experience

265
00:19:13,118 --> 00:19:14,059
in a safe environment.

266
00:19:15,079 --> 00:19:18,781
We can break stuff and have them troubleshoot it.

267
00:19:19,882 --> 00:19:22,343
Or they can break stuff just exploring how stuff works.

268
00:19:23,384 --> 00:19:27,466
And then discard it if they want to start up a new one.

269
00:19:27,907 --> 00:19:34,290
We start learn under proper live-like situations.

270
00:19:36,431 --> 00:19:44,077
So every playtest is then an address rehearsal for being live,

271
00:19:44,998 --> 00:19:48,761
and sets the full path from build system, deployment, live monitoring, debugging.

272
00:19:49,482 --> 00:19:55,347
But we can also do some pretty creative testing that we were not able to do in the past.

273
00:19:56,067 --> 00:19:57,709
For example, we can simulate Australia.

274
00:19:59,830 --> 00:20:03,854
Or rather, we can simulate how it feels for Australian players.

275
00:20:04,629 --> 00:20:09,153
Normally, what you would do is that you add latency to the client and you play test and you see how

276
00:20:10,334 --> 00:20:14,157
Try to get an idea how it feels to play the game in Australia

277
00:20:15,998 --> 00:20:23,004
It's not really feasible to send devs across the globe just to test the game so that's normally how you do it but

278
00:20:25,145 --> 00:20:28,548
But a complex mesh of services all have different latencies

279
00:20:29,672 --> 00:20:36,193
So it can actually be quite complex to simulate Australia in a proper way.

280
00:20:37,354 --> 00:20:43,915
And we can actually test better than that. So let's take a look at that.

281
00:20:45,696 --> 00:20:50,597
Here we have a classic setup, core servers in Europe.

282
00:20:54,132 --> 00:20:59,974
And there's some third-party services in the US and game servers in Australia.

283
00:21:01,814 --> 00:21:06,216
And then the players are normally here in Australia.

284
00:21:07,496 --> 00:21:11,498
We'll start on discard, which we have defined in code.

285
00:21:12,498 --> 00:21:17,320
We can easily flip the table, put all the core servers in Australia

286
00:21:17,400 --> 00:21:19,820
and the game servers nearby our office,

287
00:21:20,441 --> 00:21:23,142
because then we get a true feeling for the Australian experience.

288
00:21:24,575 --> 00:21:28,579
And since this is sitting completely inside Google Cloud,

289
00:21:28,839 --> 00:21:31,921
it's literally five minutes to change.

290
00:21:32,582 --> 00:21:35,584
So it's very easy to test this out.

291
00:21:37,646 --> 00:21:45,212
So, yeah, so maybe I actually went a bit ahead.

292
00:21:45,927 --> 00:21:47,928
Nevermind the animations, that was that.

293
00:21:48,549 --> 00:21:53,633
And then, of course, we have the same dashboards available as we had before,

294
00:21:54,033 --> 00:21:57,316
and now we can see the effect in these dashboards

295
00:21:57,956 --> 00:22:01,039
on top of playing the game and feeling the effect.

296
00:22:01,859 --> 00:22:08,745
So, hopefully, the experience for Australians and others are improved.

297
00:22:11,026 --> 00:22:11,167
But...

298
00:22:12,248 --> 00:22:15,209
There will still always be some special cases.

299
00:22:16,330 --> 00:22:20,171
You saw the third party services that I mentioned in this example.

300
00:22:22,212 --> 00:22:26,273
We always have third party dependencies for a multitude of reasons.

301
00:22:27,513 --> 00:22:31,295
It may be, for example, telemetry or tracking.

302
00:22:32,755 --> 00:22:35,556
So the way we deal with this is that

303
00:22:39,063 --> 00:22:42,385
Where they have a dedicated staging and a dedicated prod environment.

304
00:22:43,305 --> 00:22:50,509
We have a set of proxies that sit in between our start and discard

305
00:22:50,549 --> 00:22:56,332
environments and the internet, if you will, where we proxy their traffic through.

306
00:22:57,072 --> 00:23:03,715
And this means that all of our start and discard environments have the same view

307
00:23:04,075 --> 00:23:05,096
outside, even though.

308
00:23:06,342 --> 00:23:10,525
We cannot control the insights of the third party infrastructure.

309
00:23:12,106 --> 00:23:14,627
But it's still, it's a nice compromise.

310
00:23:15,728 --> 00:23:20,530
And it goes to show that we really try to minimize the special cases

311
00:23:20,651 --> 00:23:22,392
in our infrastructure as much as possible.

312
00:23:28,775 --> 00:23:29,896
Yeah. So.

313
00:23:31,807 --> 00:23:35,909
What would you do if you were to, if you want to embrace start and discard?

314
00:23:35,969 --> 00:23:38,970
Well, you need to stay clear of special cases.

315
00:23:39,491 --> 00:23:43,133
And you should use a single code pattern and so on.

316
00:23:44,974 --> 00:23:51,157
But at a fundamental level, it's a shift in mentality that's supported by technology.

317
00:23:52,338 --> 00:23:54,399
It's not purely a technical solution.

318
00:23:56,542 --> 00:24:01,066
Cloud native and on demand is critical for the success of it,

319
00:24:01,867 --> 00:24:09,012
and in order to be at a cost parity or cheaper than on-prem hosting.

320
00:24:09,813 --> 00:24:13,736
But remember that if a programmer needs a special case for feature x,

321
00:24:14,877 --> 00:24:17,199
then you're probably doing it wrong.

322
00:24:21,011 --> 00:24:23,353
Hopefully, you can find another way.

323
00:24:23,573 --> 00:24:28,357
You have a single code path, you do it the same way as when you're live, and then stick with that.

324
00:24:28,998 --> 00:24:33,301
It's worth doing, to not have to maintain multiple parallel code paths.

325
00:24:35,383 --> 00:24:41,268
And if you also plan to hand over to a live team when you're done, when you're shipping the game,

326
00:24:41,668 --> 00:24:43,690
then you're also probably doing it wrong.

327
00:24:44,470 --> 00:24:49,574
Because as you see here, live is truly part of development.

328
00:24:52,929 --> 00:24:56,511
We try to be live from day one of any new game.

329
00:24:58,473 --> 00:25:04,277
But then, what's maybe next in store?

330
00:25:04,598 --> 00:25:06,659
Or what's for you, my challenge to you guys?

331
00:25:07,640 --> 00:25:08,801
Why stop here?

332
00:25:09,982 --> 00:25:13,324
Because what you can do as a logical next step

333
00:25:13,885 --> 00:25:18,168
is that you can define all of the infrastructure in code.

334
00:25:19,018 --> 00:25:20,719
Do you need a port opened?

335
00:25:21,980 --> 00:25:24,322
You can do it yourself and submit the change for review.

336
00:25:24,642 --> 00:25:27,744
So in a way, you could open source Office IT.

337
00:25:30,186 --> 00:25:35,910
You could have lower upfront costs by using compute or lower costs

338
00:25:36,190 --> 00:25:40,994
by using compute where it happens to be cheapest at the moment.

339
00:25:41,714 --> 00:25:44,616
Anywhere around the globe, there's spot pricing,

340
00:25:44,656 --> 00:25:46,658
et cetera, that is way cheaper than normal.

341
00:25:49,517 --> 00:25:52,219
And you may use that for your entire build pipeline, for example.

342
00:25:54,061 --> 00:25:58,104
Furthermore, we all know that Stadia works great for games.

343
00:25:58,164 --> 00:26:01,966
So of course, you would be able to stream your level editor.

344
00:26:03,147 --> 00:26:04,869
So you could have your workstation in the cloud

345
00:26:04,889 --> 00:26:10,273
and be able to upgrade it with more memory, etc. as you need.

346
00:26:11,534 --> 00:26:16,517
And working from home would then or could then be the norm

347
00:26:16,717 --> 00:26:18,078
rather than the exception.

348
00:26:21,246 --> 00:26:23,268
where you pretty much just need to fork the code

349
00:26:23,309 --> 00:26:24,810
in order to create a new dev team.

350
00:26:26,051 --> 00:26:29,935
But that would be what I call Game Studio 2.0.

351
00:26:30,276 --> 00:26:33,339
And that is the subject for another talk than this one.

352
00:26:36,021 --> 00:26:38,524
That was my presentation about start and discard

353
00:26:38,784 --> 00:26:42,308
here at Ubisoft Massive. Thank you and stay safe.

