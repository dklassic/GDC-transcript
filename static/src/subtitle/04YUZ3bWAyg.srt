1
00:00:05,932 --> 00:00:06,992
All right, hello everyone.

2
00:00:09,293 --> 00:00:10,214
My name is Nikolai,

3
00:00:10,414 --> 00:00:12,655
and I'm the technical lead at Ubisoft Massive.

4
00:00:13,195 --> 00:00:15,877
And today I'm going to talk to you about

5
00:00:15,957 --> 00:00:18,238
global illumination in tone classes, the division.

6
00:00:19,519 --> 00:00:22,200
Before we begin, I've been asked to remind you

7
00:00:22,280 --> 00:00:23,941
to turn down your mobile phones,

8
00:00:24,601 --> 00:00:26,722
and to fill out your evaluations at the end.

9
00:00:27,783 --> 00:00:29,083
And if you've got questions at the end,

10
00:00:29,103 --> 00:00:31,465
please step up to the mics at the end.

11
00:00:35,907 --> 00:00:39,448
So, a couple of words very briefly about The Division.

12
00:00:39,688 --> 00:00:42,129
It's an open-world, online RPG,

13
00:00:43,250 --> 00:00:46,451
and it's based on Massif's in-house Snowdrop engine.

14
00:00:50,253 --> 00:00:52,654
So today I'm going to cover Snowdrop's solution

15
00:00:52,714 --> 00:00:55,596
for ambient lighting, which we call

16
00:00:55,736 --> 00:00:57,456
Precomputed Radiance Transfer Probes,

17
00:00:57,476 --> 00:00:58,837
so PRT Probes for short.

18
00:01:00,094 --> 00:01:06,400
With PRT probes, what we can get is an accurate approximation of global illumination in real-time,

19
00:01:07,000 --> 00:01:08,482
both on consoles and on PC.

20
00:01:10,083 --> 00:01:16,890
We support dynamic light sources such as the sun, the sky, point, spot, and area lights

21
00:01:16,950 --> 00:01:17,230
as well.

22
00:01:18,392 --> 00:01:22,816
And we are able to evaluate the light bounce from these light sources with a great degree

23
00:01:22,836 --> 00:01:23,396
of accuracy.

24
00:01:25,682 --> 00:01:28,004
Our method was developed with production in mind,

25
00:01:28,524 --> 00:01:31,927
and it's fast, it's GPU friendly,

26
00:01:31,967 --> 00:01:34,649
and also has very low memory requirements.

27
00:01:39,033 --> 00:01:40,975
So with PRT probes,

28
00:01:43,437 --> 00:01:45,559
lights can be added, removed, or modified

29
00:01:45,619 --> 00:01:46,800
without needing to rebake,

30
00:01:47,080 --> 00:01:50,062
and this provides instant feedback to our lighting artists.

31
00:01:51,045 --> 00:01:52,425
We use exactly the same techniques,

32
00:01:52,485 --> 00:01:54,026
both for indoors and outdoors.

33
00:01:54,746 --> 00:01:57,327
And we also take special care to prevent light bleeding,

34
00:01:59,388 --> 00:02:00,828
the light coming through building walls

35
00:02:00,928 --> 00:02:02,449
and also between interior rooms.

36
00:02:07,290 --> 00:02:09,211
So, here are some comparison images

37
00:02:09,311 --> 00:02:12,132
which show the contribution of the PRT probes.

38
00:02:13,333 --> 00:02:15,773
At the top, we have the normal output of our renderer.

39
00:02:17,359 --> 00:02:21,660
And at the bottom, I've turned off the ambient lighting and replaced it with a solid black color,

40
00:02:21,880 --> 00:02:23,441
so you can see the contribution better.

41
00:02:28,762 --> 00:02:32,943
So, here are some more examples from more indoor type areas this time.

42
00:02:33,303 --> 00:02:36,804
Again, top is the normal output and at the bottom you can see what happens

43
00:02:36,884 --> 00:02:39,405
when we switch off the ambient lighting completely.

44
00:02:42,908 --> 00:02:44,829
So here's the agenda of the talk today.

45
00:02:45,529 --> 00:02:47,890
First I'm gonna give you a very high level overview

46
00:02:48,130 --> 00:02:50,111
of the features of our approach.

47
00:02:51,631 --> 00:02:54,972
Next I'm going to talk about how we pre-compute

48
00:02:54,992 --> 00:02:57,553
the radiance transfer online, offline sorry.

49
00:03:00,315 --> 00:03:03,196
Then we get to the more interesting and exciting parts

50
00:03:03,236 --> 00:03:05,416
about what we do at runtime on the GPU.

51
00:03:06,490 --> 00:03:09,952
And finally, I'm going to talk about some of the problems

52
00:03:10,213 --> 00:03:12,074
that we encountered during production,

53
00:03:12,254 --> 00:03:14,436
and I'm going to show you some ugly screenshots.

54
00:03:18,679 --> 00:03:22,082
So, the division is set in an open world.

55
00:03:23,283 --> 00:03:25,925
Our version of Manhattan is quite large,

56
00:03:25,985 --> 00:03:27,506
more than six square kilometers.

57
00:03:28,740 --> 00:03:31,642
We have almost two million total entities placed

58
00:03:31,662 --> 00:03:32,603
throughout the environment.

59
00:03:33,364 --> 00:03:38,767
Our artists have hand placed about 22,000 vehicles

60
00:03:38,887 --> 00:03:40,669
and about 28,000 garbage piles.

61
00:03:42,890 --> 00:03:46,172
And the size of the world and the number of objects in it,

62
00:03:47,809 --> 00:03:50,592
makes traditional methods such as light mapping,

63
00:03:50,612 --> 00:03:53,235
static light mapping, unfeasible for production.

64
00:03:53,936 --> 00:03:55,678
In order to manage our costs,

65
00:03:55,878 --> 00:03:58,521
it was clear that we had to do with a pro-based approach.

66
00:03:59,563 --> 00:04:01,745
And as probably most of you know here.

67
00:04:02,913 --> 00:04:06,534
Light probes or irradiance volumes are kind of similar to a 3D light map.

68
00:04:07,275 --> 00:04:13,317
So rather than using a UV texture set to index them, use the position and the normals of

69
00:04:13,477 --> 00:04:14,758
whatever it is that you render.

70
00:04:15,518 --> 00:04:19,219
So from the production point of view, this is very good because the artists don't have

71
00:04:19,259 --> 00:04:21,900
to worry about unwrapping UVs.

72
00:04:22,601 --> 00:04:27,042
We also don't have to trigger a rebake whenever somebody just changes slightly a model.

73
00:04:27,823 --> 00:04:30,704
And this is especially important when you have a lot of...

74
00:04:32,980 --> 00:04:34,742
models that are placed throughout the world,

75
00:04:34,762 --> 00:04:36,083
that are instanced throughout the world.

76
00:04:36,123 --> 00:04:39,685
For example, a generic car or a generic brick wall.

77
00:04:43,568 --> 00:04:47,470
So, the division also features a day-night cycle,

78
00:04:48,131 --> 00:04:50,593
and because of this, the quality of the ambient lighting

79
00:04:50,853 --> 00:04:52,054
becomes really important.

80
00:04:53,094 --> 00:04:55,996
Our artists can't really cheat and set the sun direction

81
00:04:56,036 --> 00:04:59,579
to make their environment look as good as possible.

82
00:05:00,858 --> 00:05:03,420
And also due to the tall buildings that we have in New York,

83
00:05:04,801 --> 00:05:08,284
we have certain areas that are in shadow throughout the day.

84
00:05:09,685 --> 00:05:12,368
So they can only receive ambient lighting.

85
00:05:14,710 --> 00:05:18,193
The PRT probes allow our artists to tweak the lighting

86
00:05:18,253 --> 00:05:19,754
for any particular time of day,

87
00:05:20,334 --> 00:05:22,857
and immediately provide an accurate approximation

88
00:05:22,897 --> 00:05:24,538
of the global illumination at that point.

89
00:05:25,699 --> 00:05:27,801
And they can do that without waiting

90
00:05:27,841 --> 00:05:29,262
for a long rebake process.

91
00:05:33,140 --> 00:05:36,743
During the night, our main source of lighting

92
00:05:36,783 --> 00:05:39,166
comes from local lights, point spots,

93
00:05:39,386 --> 00:05:41,388
and aerial lights which are placed throughout the world.

94
00:05:42,008 --> 00:05:44,811
We don't do the typical Hollywood night thing

95
00:05:44,851 --> 00:05:48,815
where you get still a strong directional light,

96
00:05:48,935 --> 00:05:49,636
but just blue.

97
00:05:50,717 --> 00:05:52,819
So in the previous iteration of our technology,

98
00:05:52,859 --> 00:05:55,241
this, that we did for Far Cry,

99
00:05:56,490 --> 00:05:59,013
The secondary bounce from these lights

100
00:05:59,073 --> 00:06:01,595
would have to be actually baked inside of the probes,

101
00:06:02,276 --> 00:06:05,659
but for the division, what we were able to do

102
00:06:05,699 --> 00:06:08,201
is to make these light sources completely dynamic

103
00:06:09,202 --> 00:06:10,704
and also editable as well.

104
00:06:11,985 --> 00:06:14,728
The lights can be freely added, you can remove them,

105
00:06:14,768 --> 00:06:16,049
you can modify them as you wish,

106
00:06:16,389 --> 00:06:18,011
and you also get instant feedback

107
00:06:18,191 --> 00:06:21,294
as to how a specific environment will look during the night.

108
00:06:26,185 --> 00:06:28,786
The division also features many interior spaces.

109
00:06:29,286 --> 00:06:33,227
A lot of these are often very large and densely propped.

110
00:06:35,468 --> 00:06:38,308
Our artists try to light them in a realistic way.

111
00:06:39,008 --> 00:06:41,289
As a general rule, we don't use hacks

112
00:06:41,349 --> 00:06:42,589
such as negative lights.

113
00:06:43,210 --> 00:06:45,030
And we also try to avoid doing things

114
00:06:45,130 --> 00:06:48,291
like artificially raising the ambient light level.

115
00:06:49,271 --> 00:06:52,172
Instead, we just solely rely on the PRT probes

116
00:06:52,772 --> 00:06:53,772
to get good lighting.

117
00:06:56,125 --> 00:06:59,088
A lot of the interiors also have large windows

118
00:06:59,409 --> 00:07:01,932
and openings, and as such are affected

119
00:07:01,992 --> 00:07:03,314
by the day-night cycle as well.

120
00:07:04,775 --> 00:07:06,638
So this all fits together quite nicely

121
00:07:06,678 --> 00:07:08,320
with our pro-based approach.

122
00:07:08,920 --> 00:07:10,602
However, we have to take special care

123
00:07:10,623 --> 00:07:12,124
in order to prevent light bleeding

124
00:07:12,265 --> 00:07:13,266
between the different rooms.

125
00:07:18,088 --> 00:07:20,329
We also support different weather conditions

126
00:07:20,409 --> 00:07:21,029
in the division.

127
00:07:21,610 --> 00:07:25,091
So we have clear sky, we have overcast, we have snow storms,

128
00:07:25,131 --> 00:07:26,231
and even we have blizzards.

129
00:07:26,911 --> 00:07:28,832
And the weathering game is actually

130
00:07:28,872 --> 00:07:31,913
randomized by a script that runs on the server.

131
00:07:33,914 --> 00:07:36,615
Each weather preset defines its own lighting,

132
00:07:36,855 --> 00:07:40,456
and the artist can tweak things such as the sun, the sky color,

133
00:07:41,096 --> 00:07:43,297
the cloud type, the density of the clouds,

134
00:07:43,717 --> 00:07:44,677
and so on and so forth.

135
00:07:47,376 --> 00:07:49,217
One interesting thing is that the weather preset

136
00:07:49,317 --> 00:07:51,718
also determines how much snow is going to build up

137
00:07:51,958 --> 00:07:53,079
on the different surfaces.

138
00:07:54,880 --> 00:07:58,161
And this is effectively changing the BRDF

139
00:07:58,342 --> 00:08:00,303
or the shaders of the surfaces on the fly.

140
00:08:01,923 --> 00:08:03,724
It would be a problem if we were to go

141
00:08:03,764 --> 00:08:05,745
with a completely static GI solution,

142
00:08:06,146 --> 00:08:08,847
but because of the way we do PRT,

143
00:08:09,887 --> 00:08:12,029
this we can achieve quite easily

144
00:08:12,049 --> 00:08:13,689
with just a few shader instructions

145
00:08:13,789 --> 00:08:15,430
and at minimal rendering cost.

146
00:08:17,887 --> 00:08:25,609
So let me show you now a brief time-lapse of how everything fits together inside the game.

147
00:08:29,753 --> 00:08:36,035
So, the white spheres that you see here are the probes where we've computed the lighting.

148
00:08:37,015 --> 00:08:41,637
And you can see how the ambient lighting changes as the sun moves across the sky.

149
00:08:42,457 --> 00:08:46,838
So, they get the correct light bounce from the buildings and from the street.

150
00:08:47,638 --> 00:08:50,179
Here we have an example of the different weather conditions.

151
00:08:50,219 --> 00:08:51,620
Suddenly it becomes a lot foggier.

152
00:08:52,820 --> 00:08:56,721
And this is where our volumetric fog solution

153
00:08:56,801 --> 00:08:57,502
is gonna kick in.

154
00:08:58,142 --> 00:09:01,083
Finally, at night, we see that most of the illumination

155
00:09:01,143 --> 00:09:04,364
actually comes from the street lights.

156
00:09:04,924 --> 00:09:07,645
And here we have another example of the volumetric fog

157
00:09:07,665 --> 00:09:09,206
being affected by the process as well.

158
00:09:14,368 --> 00:09:16,268
So, after this brief introduction,

159
00:09:16,589 --> 00:09:19,350
let's now go into detail about how we implemented

160
00:09:19,790 --> 00:09:21,330
PRT inside Snowdrop.

161
00:09:24,628 --> 00:09:27,651
So, pre-computed transience transfer, or PRT,

162
00:09:28,012 --> 00:09:29,794
refers to a family of rendering techniques

163
00:09:29,994 --> 00:09:33,097
where we figure out what the light transport is

164
00:09:33,198 --> 00:09:35,820
between surfaces for a particular fixed scene.

165
00:09:36,822 --> 00:09:39,424
And this PRT, we can store it per vertex,

166
00:09:40,205 --> 00:09:41,807
in a texture, or in the props,

167
00:09:41,967 --> 00:09:43,329
just like we did for Far Cry.

168
00:09:45,603 --> 00:09:46,944
In the space of this presentation,

169
00:09:46,984 --> 00:09:50,685
I can only give you just a very short background on PRT,

170
00:09:50,925 --> 00:09:52,905
but if you want to get more information,

171
00:09:53,025 --> 00:09:55,006
I recommend looking at the course notes

172
00:09:55,086 --> 00:09:57,366
from SIGGRAPH 2005, they're really good.

173
00:09:59,667 --> 00:10:02,968
So in PRT, in general, we only can support

174
00:10:03,048 --> 00:10:07,289
distant light sources, such as a HDR environment probe,

175
00:10:08,429 --> 00:10:09,490
or directional lights.

176
00:10:10,798 --> 00:10:13,701
For Varkar3, I did develop a solution

177
00:10:14,081 --> 00:10:17,685
where we could also support dynamic localites,

178
00:10:18,545 --> 00:10:21,068
but unfortunately, it turned out to be too heavy

179
00:10:21,108 --> 00:10:23,430
and inaccurate, and it didn't make it to the final release.

180
00:10:25,280 --> 00:10:27,602
High frequency shadows are also possible,

181
00:10:28,923 --> 00:10:32,046
but so far have not been particularly suited to games,

182
00:10:32,126 --> 00:10:34,988
unfortunately, because of the complicated shaders

183
00:10:35,028 --> 00:10:35,849
that are required.

184
00:10:35,869 --> 00:10:39,392
So in the bottom image here, you can see an example

185
00:10:39,412 --> 00:10:42,214
of PRT done with a non-linear wavelet basis.

186
00:10:42,254 --> 00:10:46,218
So you can see the sharp shadows and the reflections,

187
00:10:46,278 --> 00:10:49,660
and generally that's just not possible on the GPUs

188
00:10:49,720 --> 00:10:51,722
with that particular wavelet-based approach.

189
00:10:56,988 --> 00:10:58,989
So to get around with these limitations,

190
00:10:59,289 --> 00:11:02,190
what we did was we just decided to use brute force.

191
00:11:03,030 --> 00:11:06,171
Rather than looking for something elegant and compact

192
00:11:06,371 --> 00:11:10,572
to represent PRT like all of these academic papers do,

193
00:11:11,613 --> 00:11:15,634
we just tore an explicit list of all of the surfaces

194
00:11:15,674 --> 00:11:17,515
that are visible from a particular probe.

195
00:11:19,732 --> 00:11:22,914
So, we have a list of surfals, or surfal elements.

196
00:11:24,034 --> 00:11:25,335
Each one of them has a position,

197
00:11:25,355 --> 00:11:28,276
or maybe on the normal, so color on the normal,

198
00:11:29,597 --> 00:11:31,038
and various other attributes,

199
00:11:31,598 --> 00:11:33,239
such as how much snow can build up,

200
00:11:33,499 --> 00:11:34,480
and so on and so forth.

201
00:11:35,680 --> 00:11:38,361
And it's quite similar to having

202
00:11:38,682 --> 00:11:41,783
a G-buffer cube map per probe, but not quite.

203
00:11:45,737 --> 00:11:49,059
Here is our Serphal debug view,

204
00:11:49,840 --> 00:11:52,522
which hopefully will make this a little bit more clear.

205
00:11:53,603 --> 00:11:57,146
So for each probe, what we do is we draw a green line

206
00:11:58,427 --> 00:12:01,350
from the probe towards the surface that that probe sees.

207
00:12:02,050 --> 00:12:04,673
So as I said, it's kind of similar to a Gbov cubemap,

208
00:12:04,693 --> 00:12:07,415
but you can also think of it as firing lots of rays

209
00:12:07,455 --> 00:12:10,898
from the probes and just storing the first hit,

210
00:12:11,218 --> 00:12:13,040
you just store the surface properties there.

211
00:12:17,124 --> 00:12:21,187
So for each direction where we don't have any geometry,

212
00:12:21,468 --> 00:12:23,429
we assume that the sky's visible.

213
00:12:24,790 --> 00:12:27,432
And what that gives us is a spherical shadow term

214
00:12:27,472 --> 00:12:28,053
per probe.

215
00:12:29,013 --> 00:12:31,215
It's somewhat similar to a large-scale

216
00:12:31,756 --> 00:12:33,097
directional ambient occlusion.

217
00:12:34,458 --> 00:12:36,920
And you can see in these two images to the right

218
00:12:36,980 --> 00:12:39,181
how this works compared to SSEO.

219
00:12:39,862 --> 00:12:43,565
SSEO is a lot more local and enhances basically

220
00:12:43,645 --> 00:12:45,026
the corners of the objects.

221
00:12:47,084 --> 00:12:49,306
The pre-computed sky visibility, on the other hand,

222
00:12:49,406 --> 00:12:51,948
works on a much larger scale and can pick up occlusion

223
00:12:51,988 --> 00:12:55,110
from the train tunnel, in this case,

224
00:12:55,210 --> 00:12:56,591
and from some of the buildings.

225
00:13:00,994 --> 00:13:03,256
And since we're using probes,

226
00:13:04,616 --> 00:13:07,659
we can't only pre-compute radiance transfer

227
00:13:07,679 --> 00:13:08,960
for just a particular normal.

228
00:13:08,980 --> 00:13:10,601
We have to do it for the entire sphere.

229
00:13:14,045 --> 00:13:17,688
And the way we do it is the way we did it

230
00:13:17,728 --> 00:13:21,930
for the Far Cry series, with a transfer basis.

231
00:13:22,951 --> 00:13:24,372
So in the top left image here,

232
00:13:26,553 --> 00:13:28,454
you can see the light probe,

233
00:13:29,095 --> 00:13:31,296
the HDR light probe of Grace Cathedral.

234
00:13:32,737 --> 00:13:35,079
Top right, you see the cosine convolution,

235
00:13:35,279 --> 00:13:37,680
which tells us how a purely diffused surface

236
00:13:37,740 --> 00:13:40,682
is going to be illuminated from that particular light probe.

237
00:13:41,918 --> 00:13:44,620
And what we're looking for is to get a compact representation

238
00:13:44,640 --> 00:13:47,401
of the light, of the cosine convolution of the light probe,

239
00:13:47,561 --> 00:13:48,982
or to compress it in some way.

240
00:13:49,823 --> 00:13:54,726
And one standard way to do this is to represent it

241
00:13:54,926 --> 00:13:57,327
as coefficients of a particular transfer basis.

242
00:13:58,668 --> 00:14:01,530
And here at the bottom, I've shown you

243
00:14:03,777 --> 00:14:09,163
a comparison of two of the most common challenges that you can have for transfer basis in PRT.

244
00:14:10,305 --> 00:14:13,548
Bottom left, we have second order spherical harmonics.

245
00:14:14,922 --> 00:14:16,542
They're somewhat equivalent to having

246
00:14:16,602 --> 00:14:18,123
like a principal light direction.

247
00:14:18,143 --> 00:14:21,364
So in this example, that will be my principal light direction

248
00:14:21,884 --> 00:14:23,525
and a single ambient value.

249
00:14:24,265 --> 00:14:26,026
And the usual problem with that is

250
00:14:26,346 --> 00:14:28,547
if you have two strong light sources

251
00:14:28,647 --> 00:14:30,148
coming from the opposite directions,

252
00:14:30,768 --> 00:14:33,229
then you only can raise the ambient value,

253
00:14:33,249 --> 00:14:35,169
but you lose any sense of directionality.

254
00:14:36,690 --> 00:14:40,111
On the plus side, this is actually very good for GPUs

255
00:14:40,151 --> 00:14:43,913
because you can just store it as four floating point values.

256
00:14:46,272 --> 00:14:51,256
And to the bottom right, we can see another representation,

257
00:14:51,757 --> 00:14:53,638
the Half-Life 2 ambient cube.

258
00:14:55,620 --> 00:14:59,624
This isn't a real basis, it's not a real orthogonal basis,

259
00:15:00,024 --> 00:15:03,527
it's really just six vectors that are axis aligned.

260
00:15:04,128 --> 00:15:05,769
And what we do is we just compute

261
00:15:07,191 --> 00:15:09,232
how much light each one of these vectors...

262
00:15:11,286 --> 00:15:13,067
So essentially what we do is we just compute

263
00:15:13,087 --> 00:15:16,188
the cosine convolution for six different normals.

264
00:15:18,008 --> 00:15:23,330
Again, the problem here is that if you want

265
00:15:23,370 --> 00:15:25,011
to have a rotating light source,

266
00:15:25,911 --> 00:15:27,552
instead of actually seeing it rotate,

267
00:15:27,612 --> 00:15:31,013
you will see it fade in or fade out

268
00:15:31,093 --> 00:15:33,354
from one of the directions and then fade into the other.

269
00:15:33,414 --> 00:15:35,694
So it's actually just gonna blend smoothly

270
00:15:35,754 --> 00:15:37,315
rather than actually seeing it rotate.

271
00:15:37,895 --> 00:15:40,056
And this is because the basis vectors are fixed.

272
00:15:42,440 --> 00:15:47,262
On the other hand, after evaluating different choices

273
00:15:47,322 --> 00:15:49,443
for the transfer basis, we finally settled

274
00:15:49,783 --> 00:15:51,784
on the Half-Life 2 ambient cube basis,

275
00:15:52,344 --> 00:15:53,845
which is also quite GPU friendly

276
00:15:53,885 --> 00:15:55,926
as it only requires six floats.

277
00:15:57,366 --> 00:16:00,648
So, very shortly what we do is we just compute,

278
00:16:00,928 --> 00:16:03,489
pre-computed radiance transfer for the six normals

279
00:16:03,749 --> 00:16:06,970
and we, at run time, what we'll do is just a single blend

280
00:16:07,070 --> 00:16:08,231
between those six vectors.

281
00:16:09,260 --> 00:16:12,760
And here you can see the isolated irradiance

282
00:16:12,800 --> 00:16:14,361
from each particular direction.

283
00:16:14,601 --> 00:16:20,562
So, top, sorry, left, right, top, bottom, front, and back.

284
00:16:21,142 --> 00:16:22,982
So essentially if we want to shade something,

285
00:16:23,022 --> 00:16:25,783
we just figure out how to blend properly

286
00:16:25,823 --> 00:16:27,983
between these six different values.

287
00:16:32,524 --> 00:16:34,044
So let me talk about how we actually

288
00:16:34,104 --> 00:16:35,665
generate irradiance transfer.

289
00:16:35,705 --> 00:16:38,025
We have to start with placing the probes in the world.

290
00:16:39,145 --> 00:16:41,527
And we do this automatically in two major ways.

291
00:16:42,847 --> 00:16:44,368
First, we have a grid of raycasts

292
00:16:44,768 --> 00:16:46,650
that are spread four meters apart.

293
00:16:47,970 --> 00:16:50,532
So we just fire a ray top-down

294
00:16:51,052 --> 00:16:53,093
and we spawn a probe at every hit.

295
00:16:53,553 --> 00:16:56,035
We also do a bunch of additional raycasts

296
00:16:56,075 --> 00:16:59,116
in order to move the probe slightly,

297
00:16:59,176 --> 00:17:01,518
to nudge it so that it doesn't intersect any objects.

298
00:17:04,302 --> 00:17:09,268
One other thing that we do is we also automatically spawn probes alongside the building walls.

299
00:17:09,968 --> 00:17:14,133
And this helps to make a smooth gradient and to prevent the buildings from looking flat.

300
00:17:15,074 --> 00:17:20,079
And most of this is down to the sky visibility that we also compute,

301
00:17:20,119 --> 00:17:24,184
because the probes at the bottom are going to be a lot darker than the probes that are at the top.

302
00:17:29,427 --> 00:17:31,227
So how do we store that data on disk?

303
00:17:31,808 --> 00:17:37,090
We divide the probes into a 2D grid of sectors.

304
00:17:37,410 --> 00:17:40,431
Each sector is 64 by 64 meters and can

305
00:17:40,471 --> 00:17:41,972
hold a maximum of 1,000 probes.

306
00:17:44,071 --> 00:17:47,355
Typically, we expect to have about 300 to 400 probes.

307
00:17:47,435 --> 00:17:49,657
I think the maximum that we've seen is about 960.

308
00:17:49,837 --> 00:17:54,102
And that sort of depends on how many buildings you've got

309
00:17:54,703 --> 00:17:57,346
inside of a particular area, how tall they are,

310
00:17:57,526 --> 00:18:00,490
how many floors you've got for a particular interior,

311
00:18:00,510 --> 00:18:00,910
and so on.

312
00:18:03,543 --> 00:18:07,505
So, we store the probes simply as just a very simple array,

313
00:18:07,685 --> 00:18:09,766
but you can probably also try to organize them

314
00:18:09,806 --> 00:18:11,967
in some sort of bounding volume hierarchy

315
00:18:12,007 --> 00:18:15,148
in order to be able to do spatial queries fast.

316
00:18:17,389 --> 00:18:20,450
And these sectors at runtime, they're streamed in

317
00:18:21,350 --> 00:18:22,911
as the player moves around.

318
00:18:23,071 --> 00:18:26,612
We keep a maximum of 25 sectors loaded at any one time.

319
00:18:31,769 --> 00:18:35,911
So, if we want to relight a large number of probes

320
00:18:35,971 --> 00:18:39,832
every frame, you can't just store the list of surfers

321
00:18:39,872 --> 00:18:41,893
per probe and try to relight that.

322
00:18:41,973 --> 00:18:43,033
It's just gonna be too slow.

323
00:18:44,394 --> 00:18:46,355
So what we have to do is some optimizations

324
00:18:46,395 --> 00:18:49,076
in order to have the GPU do less work per frame.

325
00:18:50,256 --> 00:18:52,257
And to do that, the first trick that we do

326
00:18:52,317 --> 00:18:54,458
is that in each sector, all of the probes

327
00:18:54,678 --> 00:18:56,619
are actually sharing the same surfers.

328
00:18:59,115 --> 00:19:05,684
This way we can relight all the surface in one go and then the probes will actually reference those and not do any duplicate work.

329
00:19:08,753 --> 00:19:10,994
And you can see that this would actually

330
00:19:11,054 --> 00:19:12,195
work quite nicely here.

331
00:19:13,316 --> 00:19:16,858
In the images to the right, you can see that the probes

332
00:19:17,618 --> 00:19:20,020
reference roughly the same surface all the time.

333
00:19:20,720 --> 00:19:23,321
So with that, we're actually able to reduce

334
00:19:24,422 --> 00:19:26,503
the number of surface that we relight

335
00:19:26,884 --> 00:19:28,404
on the GPU quite dramatically.

336
00:19:29,717 --> 00:19:33,160
And you could use a very sophisticated

337
00:19:33,220 --> 00:19:35,001
clustering algorithm here,

338
00:19:36,022 --> 00:19:38,044
but we just didn't have enough time to implement it,

339
00:19:38,084 --> 00:19:41,166
so we just went with a very simple two-level hash grid.

340
00:19:42,568 --> 00:19:45,150
I'm gonna show you some details of that right now.

341
00:19:48,072 --> 00:19:49,794
So we have two levels for our grid.

342
00:19:50,394 --> 00:19:53,137
And the first level, each cell in the grid

343
00:19:53,397 --> 00:19:56,039
overages the positions, the normals,

344
00:19:56,059 --> 00:19:57,981
the colors, and everything else for the surface.

345
00:20:00,167 --> 00:20:03,249
We use the surfer position and also the principle

346
00:20:03,309 --> 00:20:05,611
normal direction of the surfer in order to index

347
00:20:05,671 --> 00:20:08,112
into the grid, and we do that in order to avoid

348
00:20:08,132 --> 00:20:11,355
averaging surfers that have drastically different

349
00:20:11,895 --> 00:20:12,716
opposite directions.

350
00:20:14,277 --> 00:20:17,719
So the cell size here for this grid determines

351
00:20:18,180 --> 00:20:20,461
how much work you're gonna have to do at run time

352
00:20:20,481 --> 00:20:22,783
in order to compute the light tank.

353
00:20:23,630 --> 00:20:24,911
And you have to be careful here,

354
00:20:24,991 --> 00:20:27,052
because if you set this too coarse,

355
00:20:27,733 --> 00:20:29,754
you're gonna have problems, for example,

356
00:20:29,854 --> 00:20:31,315
with narrow spotlights,

357
00:20:31,555 --> 00:20:34,257
because you're just simply valuating

358
00:20:34,357 --> 00:20:38,339
the lighting at a very coarse grid.

359
00:20:40,420 --> 00:20:42,401
We found that for our game,

360
00:20:42,581 --> 00:20:45,663
one meter cube was actually a very good compromise

361
00:20:45,703 --> 00:20:47,244
between performance and quality.

362
00:20:50,543 --> 00:20:54,506
So the second grid level averages multiple surf fills

363
00:20:54,846 --> 00:20:56,928
into one irradiance brick.

364
00:20:58,910 --> 00:21:01,252
And this is an optimization that is required

365
00:21:01,292 --> 00:21:03,453
in order to reduce the amount of work

366
00:21:03,493 --> 00:21:04,654
we have to do per probe.

367
00:21:04,694 --> 00:21:06,736
So rather than the probe referencing

368
00:21:06,936 --> 00:21:08,517
each individual surf fills,

369
00:21:09,058 --> 00:21:11,460
it actually references a brick instead.

370
00:21:11,500 --> 00:21:14,142
So you have to do a lot less computation per probe here.

371
00:21:15,167 --> 00:21:18,689
And again, you kind of have to be careful here.

372
00:21:19,850 --> 00:21:21,971
If you set this size too large,

373
00:21:21,991 --> 00:21:23,792
then you're gonna have inaccuracies.

374
00:21:24,072 --> 00:21:25,173
If you set it too small,

375
00:21:25,273 --> 00:21:27,935
then your performance is not gonna be that great.

376
00:21:28,735 --> 00:21:32,818
And for us, four meter cube cell size works quite nicely.

377
00:21:37,501 --> 00:21:40,262
So now we're gonna go through a very high level overview

378
00:21:40,302 --> 00:21:42,764
of how we actually store all of the data on disk.

379
00:21:46,201 --> 00:21:49,723
So for each sector, we have our array of probes

380
00:21:49,943 --> 00:21:51,784
that you can see here on the left.

381
00:21:53,005 --> 00:21:54,926
Each probe has its own position

382
00:21:55,167 --> 00:21:59,229
and also the Half-Life 2 ambient cube coefficients

383
00:21:59,349 --> 00:22:00,650
for the sky visibility.

384
00:22:00,690 --> 00:22:02,912
So we only store the sky visibility per probe.

385
00:22:05,434 --> 00:22:08,396
It also has a range, two indices,

386
00:22:08,676 --> 00:22:10,517
into an array of brick factors.

387
00:22:13,804 --> 00:22:18,388
So brick factor basically defines how much influence,

388
00:22:19,369 --> 00:22:21,691
how much light a particular probe receives

389
00:22:21,771 --> 00:22:23,332
from a irradiance brick.

390
00:22:24,613 --> 00:22:28,437
And again, we just have half-life two ambient coefficients,

391
00:22:28,457 --> 00:22:29,598
so six float values.

392
00:22:31,599 --> 00:22:33,741
And also we have a particular,

393
00:22:33,941 --> 00:22:35,383
and we also have a brick index

394
00:22:36,463 --> 00:22:39,586
that is indexed into our irradiance array,

395
00:22:40,487 --> 00:22:41,428
irradiance brick array.

396
00:22:45,330 --> 00:22:49,611
So the brick is very simple, it just has two indices

397
00:22:49,651 --> 00:22:52,592
that define a range inside the surfoil array

398
00:22:52,912 --> 00:22:54,493
that you see here to the right.

399
00:22:56,493 --> 00:23:00,135
And finally we get to the last part, the surfoils,

400
00:23:00,315 --> 00:23:03,156
where we just store anything that we need to do

401
00:23:03,196 --> 00:23:04,676
in order to be able to relight them.

402
00:23:04,716 --> 00:23:07,497
So their position, their color, the normal,

403
00:23:08,117 --> 00:23:09,138
and any other attributes.

404
00:23:13,325 --> 00:23:15,206
So, in order to generate this,

405
00:23:17,047 --> 00:23:19,288
we have an offline baking process.

406
00:23:20,209 --> 00:23:22,470
We start by rendering gbuffer cubemaps

407
00:23:22,510 --> 00:23:24,511
for all the probes inside a certain sector.

408
00:23:25,211 --> 00:23:27,913
We read back the gbuffers to the CPU,

409
00:23:28,293 --> 00:23:30,854
we unproject the texels, the cubemap texels,

410
00:23:30,914 --> 00:23:32,795
and compress the normals, and so on and so forth.

411
00:23:33,773 --> 00:23:36,294
After we've done with rendering all of the cube maps,

412
00:23:36,995 --> 00:23:39,896
what we do is we put the surface into the hash grid

413
00:23:40,116 --> 00:23:43,317
in order to get the averaged surface

414
00:23:43,517 --> 00:23:44,817
and also the irradiance bricks.

415
00:23:46,238 --> 00:23:48,118
And as we do that on the CPU,

416
00:23:48,178 --> 00:23:51,880
we can start actually rendering the other sectors

417
00:23:52,000 --> 00:23:52,860
that are in the cube.

418
00:23:53,240 --> 00:23:54,421
So we do that interleaved.

419
00:23:55,489 --> 00:23:58,690
And all of this takes around 5 to 6 seconds per sector.

420
00:23:58,950 --> 00:24:04,393
Again, it really depends on how many probes and what geometry you're going to have in that particular part of the world.

421
00:24:06,794 --> 00:24:12,097
So, for the Manhattan map, that equates to about 1 gigabyte of data on disk.

422
00:24:13,393 --> 00:24:18,357
We have about 4,000 sectors, 1 million probe and 56 million surface.

423
00:24:19,278 --> 00:24:23,121
And we can generate the entire data set offline in about 8 hours.

424
00:24:23,542 --> 00:24:28,726
But here our lighting artists don't ever have to do that manually

425
00:24:29,507 --> 00:24:34,892
and they can only do it once and then work off of that particular nightly set of data.

426
00:24:39,230 --> 00:24:41,553
So I hope everybody is still awake after that.

427
00:24:42,514 --> 00:24:44,957
And we're going to go to the more exciting part,

428
00:24:45,458 --> 00:24:47,941
the rendering, what's happening at runtime on the GPU.

429
00:24:51,710 --> 00:24:54,613
So, super high level summary of what we're doing every frame,

430
00:24:55,974 --> 00:24:57,436
and I'm going to go into details

431
00:24:57,516 --> 00:24:59,658
about each one of these super shortly.

432
00:25:00,960 --> 00:25:03,823
We start by relighting all the surface and the bricks.

433
00:25:05,184 --> 00:25:09,168
So this is simply calculating the lighting at every surface

434
00:25:09,369 --> 00:25:11,451
and then summing it up for a particular brick.

435
00:25:12,212 --> 00:25:12,732
Very simple.

436
00:25:14,370 --> 00:25:16,592
The next thing that we do is we relight the probes.

437
00:25:17,912 --> 00:25:20,034
We compute the lighting that comes from the sky,

438
00:25:20,634 --> 00:25:22,075
and then we just add it to the lighting

439
00:25:22,115 --> 00:25:25,977
that is referenced by every single brick.

440
00:25:27,438 --> 00:25:28,959
And finally, at the bottom here,

441
00:25:29,179 --> 00:25:31,900
we put everything into an irradiance volume.

442
00:25:32,561 --> 00:25:33,701
So this is just...

443
00:25:35,818 --> 00:25:37,399
This is just a normal volume texture

444
00:25:37,439 --> 00:25:41,283
that has a single RGB color for each one

445
00:25:41,303 --> 00:25:44,586
of the six directions, and we use that for shading.

446
00:25:49,551 --> 00:25:55,176
So each frame, we start by taking our PRT data

447
00:25:55,196 --> 00:25:59,079
for the probes, we plug in the new lighting environment,

448
00:25:59,300 --> 00:26:00,941
and get the probe irradiance back.

449
00:26:01,892 --> 00:26:04,353
And this is not just a simple blend

450
00:26:04,473 --> 00:26:07,715
between different irradiance solutions

451
00:26:07,775 --> 00:26:08,956
for different types of bay.

452
00:26:09,636 --> 00:26:11,738
And allows us to have very accurate lighting

453
00:26:11,998 --> 00:26:14,599
at a specific time and to capture GI effects

454
00:26:14,639 --> 00:26:17,081
that are otherwise impossible to capture

455
00:26:17,121 --> 00:26:18,922
because they're very short duration.

456
00:26:19,802 --> 00:26:22,464
And here to the right you have an example of such an effect.

457
00:26:25,199 --> 00:26:28,741
So in the left image, we get a strong orange light bounce

458
00:26:28,861 --> 00:26:30,202
that's coming from the topoline

459
00:26:30,702 --> 00:26:32,743
because it's directly illuminated by the sun.

460
00:26:33,784 --> 00:26:37,385
And this happens only for a very few minutes during the day.

461
00:26:39,046 --> 00:26:40,387
So if you were to do,

462
00:26:41,868 --> 00:26:44,389
to basically pre-compute irradiance

463
00:26:44,469 --> 00:26:46,090
for certain times of day,

464
00:26:46,130 --> 00:26:47,550
you have to be either very lucky

465
00:26:47,611 --> 00:26:51,913
or sample it quite densely

466
00:26:51,933 --> 00:26:53,213
in order to be able to capture that.

467
00:26:54,469 --> 00:26:58,391
And at other times, the tarpaulin is in shadow,

468
00:26:58,411 --> 00:27:01,452
so the wall of the building is primarily illuminated

469
00:27:01,512 --> 00:27:04,293
by the sun and the bounce from the street.

470
00:27:08,935 --> 00:27:09,915
So how do we do that?

471
00:27:10,015 --> 00:27:12,896
It's actually super, very surprisingly simple.

472
00:27:13,497 --> 00:27:14,877
This is some pseudocode.

473
00:27:15,757 --> 00:27:18,358
For me as a programmer, it's quite easy to understand this.

474
00:27:18,498 --> 00:27:19,859
I hope it will be for you as well.

475
00:27:22,553 --> 00:27:24,715
First, we compute the radiance at every brick.

476
00:27:25,836 --> 00:27:28,019
For each brick, we just go through the list

477
00:27:28,059 --> 00:27:30,301
of every circle, we compute the lighting there,

478
00:27:30,341 --> 00:27:34,945
and finally we average that for that particular brick.

479
00:27:36,149 --> 00:27:39,511
And that compute lighting function is nothing more

480
00:27:39,591 --> 00:27:42,893
but like in your deferred shading function,

481
00:27:42,913 --> 00:27:47,156
you can just reuse that given the normal,

482
00:27:47,356 --> 00:27:50,158
the position, the albedo, you can just compute

483
00:27:50,198 --> 00:27:51,519
your lighting from that one as well.

484
00:27:54,881 --> 00:27:57,102
So as the sun lighting and the shadowing

485
00:27:57,202 --> 00:27:59,384
is evaluated per surfall, we can achieve

486
00:27:59,444 --> 00:28:02,385
much better accuracy than our previous PRT methods,

487
00:28:02,425 --> 00:28:04,407
such as the one that we used in Far Cry 3.

488
00:28:05,536 --> 00:28:08,438
where the shadowing term was just approximated per probe

489
00:28:08,619 --> 00:28:11,121
with some spherical homologous coefficients.

490
00:28:12,201 --> 00:28:15,064
And here we can see the difference that this makes.

491
00:28:16,925 --> 00:28:22,470
We have a scene here where the sun direction changes

492
00:28:22,570 --> 00:28:24,892
throughout the day and the irradiance of the sun

493
00:28:25,632 --> 00:28:28,134
isolated here to the right changes quite dramatically.

494
00:28:30,396 --> 00:28:31,017
We just have...

495
00:28:32,286 --> 00:28:35,509
a difference of, what is it, three hours?

496
00:28:36,489 --> 00:28:38,311
And you can see how much difference it makes

497
00:28:38,591 --> 00:28:39,472
just for the solution.

498
00:28:39,532 --> 00:28:40,953
And this is something that you cannot

499
00:28:41,153 --> 00:28:42,754
very easily capture with PRT.

500
00:28:43,395 --> 00:28:45,116
And you also have to sample quite densely

501
00:28:45,156 --> 00:28:48,239
if we were going for different probe sets

502
00:28:48,279 --> 00:28:50,160
and computing them for a specific time of day.

503
00:28:53,663 --> 00:28:55,564
So one thing that you have to be careful about

504
00:28:55,824 --> 00:28:57,065
if you're going to implement this

505
00:28:57,345 --> 00:29:00,026
is that the dynamic shadow map from the sun

506
00:29:00,346 --> 00:29:01,607
actually follows the player

507
00:29:01,827 --> 00:29:04,668
and is only guaranteed to cover the visible frustum

508
00:29:04,688 --> 00:29:06,149
and not all of the surface.

509
00:29:07,269 --> 00:29:09,630
So any surface that are outside of the frustum

510
00:29:11,071 --> 00:29:12,471
do not have a valid shadow map.

511
00:29:12,552 --> 00:29:14,512
So depending on your indexing mode,

512
00:29:14,572 --> 00:29:16,353
you will just get strange results.

513
00:29:17,998 --> 00:29:21,899
And to illustrate the disastrous effects of this,

514
00:29:22,159 --> 00:29:24,159
what I've done is I've just completely turned

515
00:29:24,339 --> 00:29:26,200
the shadow from the sun.

516
00:29:26,960 --> 00:29:28,720
And you can see that it sort of looks all right,

517
00:29:28,780 --> 00:29:32,321
but you get like a weird ambience

518
00:29:32,481 --> 00:29:34,301
where certain objects are illuminated

519
00:29:34,381 --> 00:29:36,042
even though they are completely in shadow.

520
00:29:36,122 --> 00:29:37,322
So this is just incorrect.

521
00:29:38,802 --> 00:29:42,183
We could solve this by rendering a dedicated shadow map

522
00:29:42,223 --> 00:29:44,784
that would cover all of the surface,

523
00:29:44,884 --> 00:29:46,144
but that would be too expensive.

524
00:29:46,944 --> 00:29:49,406
So, what we do instead is we just keep track,

525
00:29:49,967 --> 00:29:52,849
we just keep a history of whether a particular surfer

526
00:29:52,909 --> 00:29:54,310
has a valid shadow sample,

527
00:29:54,931 --> 00:29:56,492
and we just use the last known value.

528
00:29:57,493 --> 00:29:59,095
And it's kind of okay because the sun

529
00:29:59,135 --> 00:30:01,957
doesn't actually change direction that fast.

530
00:30:06,441 --> 00:30:08,703
So, another improvement over our previous

531
00:30:08,763 --> 00:30:12,086
PRT implementation is that we can easily incorporate

532
00:30:12,306 --> 00:30:15,108
local light sources, point spot area lights.

533
00:30:16,672 --> 00:30:20,474
What you have to do is simply to light each surfer with this

534
00:30:20,514 --> 00:30:22,414
and you automatically get the correct light mouse

535
00:30:25,276 --> 00:30:26,696
in that compute lighting function

536
00:30:26,716 --> 00:30:28,617
that we saw in the pseudocode.

537
00:30:29,598 --> 00:30:31,378
And in order to do this, we just have to do

538
00:30:31,398 --> 00:30:33,239
a little bit of extra work on the CPU

539
00:30:33,399 --> 00:30:35,260
in order to figure out which lights

540
00:30:35,600 --> 00:30:37,461
intersect the sector's bounding box.

541
00:30:38,141 --> 00:30:39,122
And then we just simply...

542
00:30:41,005 --> 00:30:44,507
store their properties into GPU constants

543
00:30:44,547 --> 00:30:46,288
and upload them to the GPU and then we're done.

544
00:30:48,369 --> 00:30:52,311
One nice optimization that we also do

545
00:30:52,531 --> 00:30:55,052
is that lights that are marked as static,

546
00:30:55,092 --> 00:30:57,313
so you can't actually shoot them or they won't change,

547
00:30:57,913 --> 00:30:59,654
they won't blink or they won't move,

548
00:31:01,015 --> 00:31:02,936
we just store them in a separate buffer.

549
00:31:02,976 --> 00:31:05,037
We compute them once and then store them

550
00:31:05,097 --> 00:31:06,077
and just re-add them.

551
00:31:06,377 --> 00:31:09,519
And this allowed us to support

552
00:31:10,627 --> 00:31:12,509
many more light sources than I thought

553
00:31:12,769 --> 00:31:14,050
originally would be possible.

554
00:31:16,271 --> 00:31:19,093
So, I'm gonna show you now a quick video

555
00:31:19,174 --> 00:31:23,096
of how dynamic light sources work with Snowdrop.

556
00:31:25,378 --> 00:31:29,641
So here what we have is a spotlight,

557
00:31:29,801 --> 00:31:33,544
very bright spotlight that is shining towards the wall.

558
00:31:34,909 --> 00:31:37,811
and the wall is multicolored, it's got like these different tiles.

559
00:31:38,131 --> 00:31:41,213
So as the light moves, it lights up the tiles

560
00:31:41,554 --> 00:31:44,576
and then the props capture the bounce from them.

561
00:31:45,156 --> 00:31:47,818
So you get this really nice multicolored effect.

562
00:31:54,202 --> 00:31:55,983
So as I mentioned in the beginning of the talk,

563
00:31:57,584 --> 00:32:00,166
each one of our weather presets also defines how much

564
00:32:00,666 --> 00:32:02,928
snow is going to build up on the different surfaces.

565
00:32:04,880 --> 00:32:08,543
And in order to support this, we just store a tiny bit

566
00:32:08,583 --> 00:32:11,765
of data that tells us how much snow is supposed

567
00:32:11,785 --> 00:32:13,826
to accumulate on that particular surface.

568
00:32:14,847 --> 00:32:16,828
So then simply when we relight the bricks,

569
00:32:17,088 --> 00:32:20,050
we read the value from the weather preset

570
00:32:20,330 --> 00:32:21,951
of how much snow we're supposed to go,

571
00:32:22,012 --> 00:32:25,053
and then we just lerp between the original,

572
00:32:26,414 --> 00:32:29,576
the original color of the surface and purely white.

573
00:32:30,869 --> 00:32:34,852
And you can see here a comparison of what it looks like to the right here.

574
00:32:37,474 --> 00:32:43,579
Here, to the left, I've turned the effect off, so what you get is like this still kind of correct,

575
00:32:43,619 --> 00:32:47,602
but not quite grayish ambience that's coming to the probe.

576
00:32:48,342 --> 00:32:53,246
And to the right, you have a much more pronounced white ambient light from the bottom.

577
00:32:54,126 --> 00:32:55,948
So it works really nicely and it's very cheap.

578
00:33:00,643 --> 00:33:03,144
So as some of you probably figure out by now,

579
00:33:03,404 --> 00:33:05,925
we only pre-compute a single bounce

580
00:33:06,745 --> 00:33:08,486
for the Sophos, for the PRT.

581
00:33:09,786 --> 00:33:11,947
And in order to simulate additional bounces,

582
00:33:12,627 --> 00:33:14,088
one of our programmers figured out

583
00:33:14,128 --> 00:33:15,608
a very nice way to do that.

584
00:33:17,282 --> 00:33:21,225
We just use the computed irradiance from the previous frame

585
00:33:21,565 --> 00:33:23,667
and we feed it back to the current surface

586
00:33:24,407 --> 00:33:25,288
when we do the lighting.

587
00:33:26,089 --> 00:33:29,391
So each surface just stores an index to the probe

588
00:33:29,411 --> 00:33:32,874
that is closest to it and just uses that

589
00:33:33,114 --> 00:33:34,776
as an ambient lighting term.

590
00:33:35,857 --> 00:33:38,439
And this feedback loop allows us to capture

591
00:33:38,539 --> 00:33:41,221
the light bouncing from...

592
00:33:42,401 --> 00:33:44,963
the light from the sky bouncing from the floor.

593
00:33:45,404 --> 00:33:48,246
And you can see the effect here in the bottom image here.

594
00:33:50,187 --> 00:33:51,649
Just a little bit of a close-up.

595
00:33:52,509 --> 00:33:54,391
If you just use a single bounce,

596
00:33:54,591 --> 00:33:57,113
then the ceilings are gonna be quite dark.

597
00:33:58,054 --> 00:33:59,855
Once you turn on the feedback loop,

598
00:34:00,096 --> 00:34:01,617
then suddenly everything gets

599
00:34:01,937 --> 00:34:03,438
a lot more correctly illuminated.

600
00:34:08,390 --> 00:34:09,950
Couple more comparison images.

601
00:34:11,971 --> 00:34:13,992
So here we have an outdoor environment

602
00:34:14,352 --> 00:34:18,573
and the feedback loop just makes everything brighter

603
00:34:18,913 --> 00:34:21,995
and brings up the bottom of the light probes.

604
00:34:22,635 --> 00:34:24,515
So it illuminates the bottom of the objects.

605
00:34:27,356 --> 00:34:29,137
So even though it works very nicely

606
00:34:29,237 --> 00:34:32,138
for outdoor environments, for indoor environments,

607
00:34:32,558 --> 00:34:36,079
it's not, the effect is not quite as pronounced.

608
00:34:36,982 --> 00:34:39,903
Here again to the left you see the effect of a single bounce,

609
00:34:40,363 --> 00:34:43,564
and to the right you see the effect when we turn on the feedback loop.

610
00:34:44,384 --> 00:34:50,465
So, you can see just a tiny, tiny bit of difference where the probes are a little bit brighter,

611
00:34:50,505 --> 00:34:52,546
but in reality it doesn't give you much.

612
00:34:57,027 --> 00:35:04,368
So, the next thing that we have to do after we've done the bricks and the radiance from the bricks,

613
00:35:05,846 --> 00:35:08,567
we have to go through each probe and relight the probes.

614
00:35:09,568 --> 00:35:13,210
So first what we do is we compute the radiance from the sky.

615
00:35:15,371 --> 00:35:18,312
For that, it's a very simple process.

616
00:35:18,492 --> 00:35:22,094
We render the entire sky to a very small texture,

617
00:35:22,914 --> 00:35:26,776
and then we compute the cosine convolution of that,

618
00:35:27,016 --> 00:35:30,397
and we store it as just basis coefficients

619
00:35:30,437 --> 00:35:32,158
of the Half-Life 2 ambient cube basis.

620
00:35:33,092 --> 00:35:34,752
And then all that we have to do here

621
00:35:34,832 --> 00:35:37,113
is just to multiply that with the sky visibility

622
00:35:37,153 --> 00:35:39,033
that is stored inside of the probe.

623
00:35:43,054 --> 00:35:47,576
So why do we have to render a small texture?

624
00:35:48,696 --> 00:35:52,297
Mainly because our skybox uses a large combination

625
00:35:52,317 --> 00:35:54,958
of techniques which are difficult to express analytically.

626
00:35:56,666 --> 00:35:58,486
We do have the Prism Sky model,

627
00:35:58,546 --> 00:36:00,287
but also on top of that we have

628
00:36:00,467 --> 00:36:03,227
these six point lighting cloud textures

629
00:36:03,287 --> 00:36:05,488
that allow us to dynamically relight them

630
00:36:05,568 --> 00:36:06,988
based on where the sun is.

631
00:36:08,569 --> 00:36:11,109
So here you see the same scene

632
00:36:11,149 --> 00:36:12,669
with different sky configurations.

633
00:36:13,830 --> 00:36:17,511
The base sky color is the same for both scenes,

634
00:36:18,311 --> 00:36:20,611
but at the top you don't really have any clouds

635
00:36:20,851 --> 00:36:23,052
and you have this blue type ambience

636
00:36:23,312 --> 00:36:24,712
which is captured by the probes.

637
00:36:25,654 --> 00:36:29,735
And on the bottom you have quite a lot more sky coverage.

638
00:36:30,196 --> 00:36:34,877
So the sky is actually more grayish rather than blue.

639
00:36:35,657 --> 00:36:37,258
And this is also correctly captured

640
00:36:38,038 --> 00:36:40,979
inside from our PRT solution in Snowdrop.

641
00:36:43,663 --> 00:36:49,786
This is another example where we have this time the same clouds, the same base color,

642
00:36:49,886 --> 00:36:54,708
but we've just moved the sun, so it's like at sunset or sunrise, I don't quite remember.

643
00:36:55,348 --> 00:37:04,892
So in one of the cases the clouds are very orangey, and to the bottom you see it during

644
00:37:04,932 --> 00:37:06,773
the day, so the clouds are now whitish.

645
00:37:07,333 --> 00:37:11,415
And you can see how this is also correctly reflected in the light probes.

646
00:37:15,469 --> 00:37:17,270
So finally, what we have to do,

647
00:37:18,070 --> 00:37:20,992
after we've computed the radians from the sky,

648
00:37:22,093 --> 00:37:25,755
we just simply have to add the lighting

649
00:37:25,775 --> 00:37:27,295
that comes from the sky with the lighting

650
00:37:27,315 --> 00:37:28,256
that comes from the bricks,

651
00:37:28,456 --> 00:37:29,857
and then we get the final result.

652
00:37:30,057 --> 00:37:33,199
So we just go through all of our brick factors

653
00:37:33,739 --> 00:37:35,460
and add them up, that's it.

654
00:37:36,460 --> 00:37:39,742
And then we're done, we've got the probes completely relit.

655
00:37:43,503 --> 00:37:45,344
So let's talk about the thing that you're probably

656
00:37:46,004 --> 00:37:47,685
very interested in, the performance.

657
00:37:48,646 --> 00:37:51,027
I have to preface this by saying that

658
00:37:51,187 --> 00:37:52,548
the performance kind of depends on

659
00:37:52,608 --> 00:37:55,109
where you are in the world, how many probes you've got,

660
00:37:55,429 --> 00:37:56,770
how many surfers and so on.

661
00:37:57,490 --> 00:38:00,892
But the numbers I'm gonna give you are quite representative.

662
00:38:01,992 --> 00:38:05,134
So every frame, what we do is we relight two full sectors.

663
00:38:05,474 --> 00:38:08,215
The one that the player is in, and also we choose

664
00:38:08,575 --> 00:38:10,896
one other from the sectors that are currently loaded.

665
00:38:14,805 --> 00:38:17,326
So this is done in a GPU compute task

666
00:38:18,147 --> 00:38:20,068
just right after the shadow rendering.

667
00:38:20,128 --> 00:38:21,569
We actually have two compute tasks,

668
00:38:21,729 --> 00:38:25,152
one to relight the surface and bricks

669
00:38:25,392 --> 00:38:27,413
and one to relight the probes themselves.

670
00:38:28,954 --> 00:38:32,697
So this is also done with an async compute shader

671
00:38:32,737 --> 00:38:35,559
on consoles which is running at the same time

672
00:38:35,579 --> 00:38:37,700
as we do the GBuffer rendering.

673
00:38:40,526 --> 00:38:41,706
Some example timings.

674
00:38:42,947 --> 00:38:45,809
For the Xbox One, it takes about one millisecond.

675
00:38:47,129 --> 00:38:52,192
We time this by putting the Compute Shader in non-async mode.

676
00:38:53,553 --> 00:38:58,936
Normally though, this runs async and it doesn't really matter if we turn it on and off.

677
00:38:59,136 --> 00:39:01,337
It's just absolutely the same performance.

678
00:39:01,377 --> 00:39:04,579
It's not that expensive at all.

679
00:39:06,931 --> 00:39:11,594
And the time here is roughly split 60%, 40%

680
00:39:12,375 --> 00:39:15,657
between lighting bricks and surface versus lighting probes.

681
00:39:16,778 --> 00:39:21,702
On the PC, on a GTX 760, it takes about half a millisecond

682
00:39:21,722 --> 00:39:24,324
to do the same amount of data.

683
00:39:25,285 --> 00:39:28,508
And the timing here is roughly split 50-50

684
00:39:28,548 --> 00:39:31,110
between lighting bricks and lighting probes.

685
00:39:36,595 --> 00:39:40,518
So once we've run the relighting compute shader,

686
00:39:41,859 --> 00:39:44,761
the next step is to put all of the radiance data

687
00:39:44,982 --> 00:39:46,423
into one volume map.

688
00:39:47,123 --> 00:39:49,885
And we do this in order to have tri-linear filtering

689
00:39:49,926 --> 00:39:52,648
and in order to support large objects or small objects.

690
00:39:55,650 --> 00:39:57,171
The volume map follows the camera

691
00:39:57,452 --> 00:39:58,933
and covers 100 by 50 by 100 meters

692
00:39:58,953 --> 00:39:59,633
with 32 by 16 by 32 voxels.

693
00:40:06,848 --> 00:40:09,430
And we use a single texture for all of the six

694
00:40:09,610 --> 00:40:13,992
basis directions and the shader computes just an offset

695
00:40:14,072 --> 00:40:15,873
into that texture in order to figure out

696
00:40:15,973 --> 00:40:16,854
where to read from.

697
00:40:17,894 --> 00:40:20,996
So this volume map is used both in the deferred

698
00:40:21,476 --> 00:40:23,197
lighting pass and the forward lighting pass.

699
00:40:23,217 --> 00:40:27,599
So we have consistent lighting between

700
00:40:28,880 --> 00:40:30,981
purely opaque objects and also

701
00:40:32,201 --> 00:40:33,702
transparent objects or particles.

702
00:40:38,212 --> 00:40:43,136
So, 100 by 50 by 100 meters

703
00:40:43,216 --> 00:40:49,260
with such a relatively low dimensional volume map

704
00:40:49,641 --> 00:40:51,722
will create probe bleeding.

705
00:40:52,363 --> 00:40:54,224
So this is just the effect where you have

706
00:40:54,264 --> 00:40:57,167
the trilinear filtering reading the wrong value.

707
00:40:57,227 --> 00:40:59,588
So basically you have the effect of a light bleeding

708
00:40:59,628 --> 00:41:03,732
through a thin surface such as the wall of a building.

709
00:41:04,584 --> 00:41:07,646
And here at the top right, you can see an example of this.

710
00:41:09,207 --> 00:41:12,869
What happens is that the probes on the outside

711
00:41:13,049 --> 00:41:14,930
get illuminated by the sky.

712
00:41:15,590 --> 00:41:19,652
And this incorrectly illuminates the interior,

713
00:41:19,872 --> 00:41:20,693
the entrance here.

714
00:41:20,793 --> 00:41:23,294
So you get like this sort of wrong, bluish ambience.

715
00:41:24,755 --> 00:41:27,517
And in order to fix this, we use a separate volume texture

716
00:41:27,637 --> 00:41:29,698
for both indoor and outdoor.

717
00:41:31,145 --> 00:41:35,951
We, for a particular model, we know which room it is

718
00:41:36,211 --> 00:41:38,354
and we write that value inside the stencil buffer.

719
00:41:39,295 --> 00:41:40,897
Then in the deferred lighting pass,

720
00:41:40,977 --> 00:41:43,440
what we can do is we can read from the stencil

721
00:41:43,480 --> 00:41:45,183
and figure out whether to read from the outdoor

722
00:41:45,303 --> 00:41:49,768
or from the indoor, from the indoor volume texture.

723
00:41:52,006 --> 00:41:55,588
We also try to prevent bleeding between different rooms,

724
00:41:56,249 --> 00:41:59,170
and we do that by determining what the extent of the room

725
00:41:59,410 --> 00:42:02,272
is in volume space, and then clamping our reads

726
00:42:03,293 --> 00:42:09,236
just to this particular AABB in the volume map.

727
00:42:09,957 --> 00:42:12,679
And of course, this only works if you have rooms

728
00:42:12,719 --> 00:42:13,839
which are axis aligned.

729
00:42:14,770 --> 00:42:18,133
And you can see the effects of these fixes in the bottom right here,

730
00:42:18,213 --> 00:42:23,076
so we have a lot more correct ambience, so the entrance to the staircase is a lot...

731
00:42:24,217 --> 00:42:25,397
looks a lot more natural.

732
00:42:30,221 --> 00:42:33,943
Outside of the volume map, we shade using a 2D,

733
00:42:34,804 --> 00:42:37,766
a large 2D texture, which we call the fallback texture.

734
00:42:38,506 --> 00:42:41,588
And this is a single 2D texture that covers the entire world.

735
00:42:42,901 --> 00:42:46,344
Each texel inside of it represents a single sector probe,

736
00:42:46,724 --> 00:42:48,666
and we compute the information for that

737
00:42:48,686 --> 00:42:52,469
by just placing a probe very high up in the environment.

738
00:42:54,731 --> 00:42:56,853
And for this one, we don't actually do

739
00:42:56,953 --> 00:42:57,994
any of the light bounces.

740
00:42:58,034 --> 00:43:00,055
We just compute the irradiance from the sky.

741
00:43:04,079 --> 00:43:06,221
So you can see the effect of the distance shading

742
00:43:06,281 --> 00:43:07,882
in these two comparison images.

743
00:43:08,863 --> 00:43:10,985
To the left, I've turned it off completely.

744
00:43:11,909 --> 00:43:13,711
So the buildings far down the street

745
00:43:13,971 --> 00:43:15,512
are now suddenly completely black.

746
00:43:16,954 --> 00:43:19,096
And to the right, I've turned it back on,

747
00:43:19,376 --> 00:43:22,018
and you can see that it's almost like an invisible blend

748
00:43:22,939 --> 00:43:25,521
between the volume map and the fallback texture.

749
00:43:26,082 --> 00:43:27,183
So it works rather nicely.

750
00:43:32,348 --> 00:43:35,270
As pretty much everybody else, we use ambient occlusion

751
00:43:35,450 --> 00:43:37,833
as a shadow term for the indirect lighting.

752
00:43:39,115 --> 00:43:42,195
Ambient occlusion can come from a couple of sources.

753
00:43:42,776 --> 00:43:47,297
So things like SSCO, it can be baked into the models,

754
00:43:47,677 --> 00:43:50,798
into the materials, into the textures as well.

755
00:43:51,418 --> 00:43:54,078
And it also comes from the sky visibility of the probes.

756
00:43:56,279 --> 00:43:58,560
So for SSCO and the baked in ambient occlusion,

757
00:43:58,580 --> 00:44:01,680
we store it in a separate channel of our G-buffer.

758
00:44:03,287 --> 00:44:06,130
Ideally what you want to do is to only

759
00:44:06,571 --> 00:44:10,775
to use this ambient occlusion for the sky term only.

760
00:44:11,555 --> 00:44:14,398
So you don't really want to apply that

761
00:44:14,679 --> 00:44:16,981
to the secondary bounce that's coming from the bricks.

762
00:44:18,222 --> 00:44:20,724
But we kind of cheat here and apply it to everything

763
00:44:20,785 --> 00:44:24,528
in order to not having to store two terms

764
00:44:24,608 --> 00:44:27,171
and not having to use more than one volume map.

765
00:44:29,170 --> 00:44:31,952
So one of the things that we found during the project

766
00:44:32,212 --> 00:44:35,974
is that it's difficult to make SSEO good

767
00:44:36,354 --> 00:44:37,335
underneath vehicles.

768
00:44:38,475 --> 00:44:41,497
One of our tech artists came up with this cool way

769
00:44:41,537 --> 00:44:44,178
to fake ambient occlusion with just a squeeze-based

770
00:44:44,278 --> 00:44:45,139
projected decal.

771
00:44:45,979 --> 00:44:47,800
And you can see the difference that this makes

772
00:44:48,120 --> 00:44:49,961
in the comparison images to the right.

773
00:44:50,101 --> 00:44:52,262
At the top, the decals are switched off.

774
00:44:53,023 --> 00:44:56,205
So the vehicle kind of looks disconnected from the street.

775
00:44:57,230 --> 00:44:59,371
Whereas at the bottom, you suddenly get this idea

776
00:44:59,411 --> 00:45:01,791
that it's actually something that's grounded

777
00:45:01,911 --> 00:45:03,632
and it actually casts a shadow.

778
00:45:07,173 --> 00:45:11,654
And this is just done with a very simple texture box

779
00:45:11,714 --> 00:45:12,574
in the vehicle prop.

780
00:45:12,674 --> 00:45:14,635
You can see here some screenshots

781
00:45:14,695 --> 00:45:16,155
from our Snowdrop editor.

782
00:45:16,895 --> 00:45:18,736
The vehicle isn't just a simple model,

783
00:45:18,796 --> 00:45:21,056
it's actually a node graph with a lot of parameters

784
00:45:21,096 --> 00:45:21,776
that you can tweak.

785
00:45:22,336 --> 00:45:24,577
And you can also place this additional

786
00:45:25,943 --> 00:45:26,963
primitives inside of it.

787
00:45:27,383 --> 00:45:29,504
In that case, it's just an invisible box

788
00:45:29,644 --> 00:45:33,406
that has a simple gradient texture,

789
00:45:33,846 --> 00:45:35,767
and that texture just writes out

790
00:45:36,447 --> 00:45:38,288
to the dedicated gbuffer channel.

791
00:45:39,969 --> 00:45:42,590
It's very simple, but it also works surprisingly well.

792
00:45:46,245 --> 00:45:49,088
So Snowdrop also uses the PRT probes

793
00:45:49,408 --> 00:45:51,069
in the volumetric fog rendering.

794
00:45:52,170 --> 00:45:54,913
We just used the standard ray marching

795
00:45:54,953 --> 00:45:57,716
and sampled the lighting environment

796
00:45:57,756 --> 00:45:59,137
in order to simulate scattering

797
00:45:59,217 --> 00:46:01,319
from participating media particles.

798
00:46:03,201 --> 00:46:05,403
In addition to the sun and the local lights,

799
00:46:05,944 --> 00:46:07,866
we also sampled the ambient lighting

800
00:46:07,886 --> 00:46:09,407
that comes from the probes themselves.

801
00:46:11,645 --> 00:46:15,167
As an optimization, we store the average irradiance

802
00:46:15,227 --> 00:46:18,589
for all of the six bases direction in separate volume maps,

803
00:46:18,609 --> 00:46:20,330
so just a single RGB volume map,

804
00:46:20,511 --> 00:46:23,733
and this is what we actually sample

805
00:46:23,853 --> 00:46:28,156
and do trilinear filtering on as we're ray marching.

806
00:46:29,616 --> 00:46:31,598
And it kind of works because the scattering

807
00:46:31,638 --> 00:46:33,699
is supposed to scatter in all directions,

808
00:46:33,759 --> 00:46:35,820
so taking the average ambient lighting

809
00:46:36,201 --> 00:46:37,301
is correct in this case.

810
00:46:41,767 --> 00:46:44,768
So, we've come to the final section of the presentation

811
00:46:45,169 --> 00:46:47,850
where I'm going to talk to you about some of the problems

812
00:46:48,050 --> 00:46:50,472
that we encountered with our approach during production,

813
00:46:50,712 --> 00:46:53,214
and as promised, I'm gonna show you some ugly screenshots.

814
00:46:57,236 --> 00:47:02,359
So, Snowdrop initially was using an Irradiance volume

815
00:47:02,539 --> 00:47:04,140
like pretty much a lot of other games.

816
00:47:06,077 --> 00:47:09,262
But with a twist, instead of having a baking step

817
00:47:09,302 --> 00:47:11,345
for the probes offline, what we would do

818
00:47:11,385 --> 00:47:13,529
is we would render cubemaps on the fly

819
00:47:13,549 --> 00:47:14,731
and then store them on disk.

820
00:47:14,771 --> 00:47:17,475
So as you were walking around, we would render the cubemaps

821
00:47:17,555 --> 00:47:18,476
and store them in a cache.

822
00:47:20,370 --> 00:47:24,632
And this works very nicely with one major drawback

823
00:47:24,892 --> 00:47:27,633
is that the update rate isn't really fast enough.

824
00:47:28,354 --> 00:47:30,515
So what you can see is visible light pop,

825
00:47:30,595 --> 00:47:33,636
like a particular area would be dark

826
00:47:33,696 --> 00:47:35,857
and suddenly, boom, it would become bright

827
00:47:35,877 --> 00:47:37,938
as we render the probes.

828
00:47:39,438 --> 00:47:40,819
And as a whole,

829
00:47:41,848 --> 00:47:43,689
we decided that this wasn't quite suitable

830
00:47:43,750 --> 00:47:46,192
for our requirements, like the day-night cycle

831
00:47:46,252 --> 00:47:47,212
or the dynamic lighting.

832
00:47:47,252 --> 00:47:49,675
You just couldn't get it to work fast enough

833
00:47:51,076 --> 00:47:54,138
in order to have the dynamic lighting that we wanted.

834
00:47:57,801 --> 00:47:59,563
So when we switched to PRT probes,

835
00:47:59,923 --> 00:48:02,886
we started with eight basis vectors

836
00:48:03,166 --> 00:48:04,407
that covered the entire sphere.

837
00:48:05,228 --> 00:48:07,149
And you can see those eight basis vectors

838
00:48:07,229 --> 00:48:09,051
as the white dots on the probes there.

839
00:48:11,795 --> 00:48:13,816
This worked fine, except that at some points,

840
00:48:14,317 --> 00:48:18,760
the artist noticed that the streets were a bit too dark.

841
00:48:18,840 --> 00:48:21,402
They just couldn't put their finger quite on Y,

842
00:48:21,482 --> 00:48:23,284
but everything seemed a little bit too dark.

843
00:48:24,325 --> 00:48:26,606
So we sat down and eventually realized

844
00:48:26,766 --> 00:48:29,008
that it was because none of the vectors

845
00:48:29,088 --> 00:48:31,050
actually pointed straight up or straight down.

846
00:48:31,951 --> 00:48:34,172
So this meant that the light from the sky

847
00:48:34,292 --> 00:48:35,553
or the bounce from the street,

848
00:48:35,633 --> 00:48:37,375
we couldn't actually represent it properly.

849
00:48:37,415 --> 00:48:39,316
We could just blend between two vectors

850
00:48:39,336 --> 00:48:40,357
that were pointing this way.

851
00:48:42,082 --> 00:48:46,146
So for that reason, we decided to go back

852
00:48:46,226 --> 00:48:48,028
to Half-Life 2 ambient cube basis.

853
00:48:48,448 --> 00:48:51,511
And it uses six basis vectors, which is fewer,

854
00:48:51,591 --> 00:48:53,893
so you would think it's less accurate,

855
00:48:53,913 --> 00:48:56,095
but it actually is better for our needs,

856
00:48:56,875 --> 00:48:58,757
because there's one vector that points straight up,

857
00:48:58,797 --> 00:49:03,381
so it can capture the lighting from the sky accurately,

858
00:49:03,481 --> 00:49:05,323
and then there's another one that points straight down,

859
00:49:05,363 --> 00:49:07,705
so it can capture the bounce from the terrain on the streets.

860
00:49:12,072 --> 00:49:14,775
During production, we also had occasional problems

861
00:49:14,915 --> 00:49:17,777
where the automatic probe placement algorithm

862
00:49:17,837 --> 00:49:21,200
would decide that it was going to stop working properly.

863
00:49:22,241 --> 00:49:24,262
And for various reasons,

864
00:49:25,483 --> 00:49:27,785
probes would not be spawned in certain areas.

865
00:49:28,526 --> 00:49:31,628
And this causes dark spots in the irradiance volume.

866
00:49:31,648 --> 00:49:33,550
So like places where we just don't have

867
00:49:33,610 --> 00:49:34,731
any lighting information.

868
00:49:35,672 --> 00:49:39,115
And to the right here, we have one such location.

869
00:49:39,215 --> 00:49:39,655
We have

870
00:49:41,218 --> 00:49:48,564
This particular building and on one of two of the floors you just don't have any probes and you can also kind of see it

871
00:49:48,845 --> 00:49:49,565
on the

872
00:49:50,806 --> 00:49:52,488
On the crane there to the right as well

873
00:49:54,009 --> 00:49:55,790
and this is just caused because the

874
00:49:56,751 --> 00:49:58,252
the probes just

875
00:49:58,733 --> 00:50:01,355
Miss the crane completely so you don't spawn anything there

876
00:50:02,495 --> 00:50:06,183
And we have also a special debug tool for these situations,

877
00:50:06,263 --> 00:50:09,651
which would color these areas with a highlight color

878
00:50:09,671 --> 00:50:11,074
so that we can easily spot them.

879
00:50:12,829 --> 00:50:17,050
And to solve problems like this is not fun

880
00:50:17,070 --> 00:50:19,471
and also requires quite a lot of coder effort.

881
00:50:20,332 --> 00:50:22,073
And we were thinking that the way to address this

882
00:50:22,393 --> 00:50:24,994
in the future is to give the artists more control

883
00:50:25,354 --> 00:50:26,715
over how the probes are placed.

884
00:50:27,015 --> 00:50:29,236
So to allow them to add new probes,

885
00:50:29,976 --> 00:50:32,097
to move the automatic probes around

886
00:50:32,117 --> 00:50:34,018
in order to adjust things and to fine tune

887
00:50:34,058 --> 00:50:34,898
all of the details.

888
00:50:36,494 --> 00:50:38,835
One other possibility that we were thinking about

889
00:50:38,935 --> 00:50:42,076
is to support UV mapping for the buildings,

890
00:50:42,396 --> 00:50:43,657
so for large structures.

891
00:50:44,277 --> 00:50:46,798
So effectively what we would do is we would compute

892
00:50:46,858 --> 00:50:49,679
the same sort of PRT, but instead of six direction,

893
00:50:49,719 --> 00:50:52,620
we would just compute it for three direction

894
00:50:52,680 --> 00:50:53,980
in the tangent space.

895
00:50:54,760 --> 00:50:58,542
And this will allow our artists to control

896
00:50:58,602 --> 00:51:01,483
the resolution of the PRT a lot more effectively.

897
00:51:06,997 --> 00:51:10,740
So, we also have the problem that sometimes probes

898
00:51:10,820 --> 00:51:12,881
are missing from indoor entrances.

899
00:51:13,881 --> 00:51:17,764
And because we have the outdoor and indoor volumes,

900
00:51:18,284 --> 00:51:21,046
this presents itself as a sharp line transition

901
00:51:21,106 --> 00:51:23,447
between the indoors and the outdoors.

902
00:51:24,528 --> 00:51:27,009
And you can see it here in the comparison images

903
00:51:27,070 --> 00:51:30,271
to the right where I've just isolated the ambient lighting.

904
00:51:31,859 --> 00:51:35,182
So one way to solve this is to automate the placement of the probes,

905
00:51:35,883 --> 00:51:38,845
so that we spawn them at particular entrances and windows.

906
00:51:39,606 --> 00:51:42,910
Unfortunately, we only thought of that quite late during the production,

907
00:51:42,930 --> 00:51:44,591
so this didn't make it in the final game.

908
00:51:45,913 --> 00:51:49,876
Luckily for us, these type of artifacts are not so visible

909
00:51:50,197 --> 00:51:54,841
when you have full shading on, because the change in material actually masks the transition as well.

910
00:51:58,477 --> 00:52:00,879
So one of the other areas where we thought

911
00:52:00,959 --> 00:52:03,802
we could improve is the resolution of our solution.

912
00:52:06,745 --> 00:52:10,850
It's fairly easy to change the grid sizes and so on.

913
00:52:11,871 --> 00:52:13,332
So it's just a bunch of parameters

914
00:52:13,372 --> 00:52:14,453
that you put into the baking,

915
00:52:14,634 --> 00:52:16,916
but you have to be careful about the performance cost.

916
00:52:19,067 --> 00:52:21,608
In order for us to increase the resolution of the probes,

917
00:52:21,888 --> 00:52:25,770
what we have to do is to look into optimizing

918
00:52:25,810 --> 00:52:28,651
the baking times first and also to optimize the compression

919
00:52:31,172 --> 00:52:34,213
just because we don't want to blow up our memory budget.

920
00:52:35,554 --> 00:52:36,654
And as I mentioned as well,

921
00:52:36,714 --> 00:52:38,455
we only pre-compute the single bounds

922
00:52:39,836 --> 00:52:46,178
and we approximate the rest with just coarsely at run time.

923
00:52:47,181 --> 00:52:49,642
And this was primarily because we just didn't have

924
00:52:49,702 --> 00:52:51,622
enough time to make a more complicated,

925
00:52:52,742 --> 00:52:55,023
complex solver offline.

926
00:52:55,723 --> 00:52:57,503
But I think as we move on to,

927
00:52:57,743 --> 00:52:59,384
for the next iteration of Snowdrop,

928
00:52:59,604 --> 00:53:01,884
what we have to do is actually to bite the bullet

929
00:53:01,924 --> 00:53:04,025
and implement the proper GPU path race

930
00:53:04,085 --> 00:53:07,106
that will allow us to capture the multiple bounces

931
00:53:07,386 --> 00:53:08,326
when we bake the probes.

932
00:53:11,435 --> 00:53:13,036
So finally, just a couple of words.

933
00:53:13,737 --> 00:53:16,259
Our tech, Snowdrop, was developed

934
00:53:16,440 --> 00:53:18,261
at the same time as The Division.

935
00:53:19,222 --> 00:53:20,524
And because of time constraints,

936
00:53:20,844 --> 00:53:22,966
sometimes we did not have enough time

937
00:53:23,006 --> 00:53:24,267
to do proper bug fixing.

938
00:53:25,408 --> 00:53:27,891
Instead, we just gave the artist some parameters

939
00:53:27,911 --> 00:53:30,253
and say, here, tweak this until it kind of looks right.

940
00:53:31,494 --> 00:53:33,716
So this effectively sort of hides the problem

941
00:53:33,736 --> 00:53:34,958
but doesn't really solve them.

942
00:53:36,227 --> 00:53:40,350
And at the end, what happened was that we have a huge mess of parameters.

943
00:53:41,171 --> 00:53:43,953
Each one of them had sort of obscure effects or

944
00:53:44,934 --> 00:53:49,517
once we fixed the bugs, we just disconnected it in order not to

945
00:53:50,818 --> 00:53:54,181
for it not to mess up the solution. So some things straight up

946
00:53:54,761 --> 00:53:57,643
don't work, some things don't work as expected.

947
00:53:58,304 --> 00:54:00,966
And it's very confusing for the lighting artists because they don't know

948
00:54:01,446 --> 00:54:03,748
which things actually have

949
00:54:04,628 --> 00:54:05,449
which things actually.

950
00:54:06,997 --> 00:54:08,618
will allow them to tweak the lighting.

951
00:54:09,840 --> 00:54:12,142
And this sort of showed us that proper bug fixing

952
00:54:12,283 --> 00:54:15,826
is very important rather than just giving some numbers

953
00:54:15,866 --> 00:54:18,249
to the artists and letting them tweak things by themselves.

954
00:54:19,510 --> 00:54:21,372
So we were thinking that for the next iteration

955
00:54:21,393 --> 00:54:23,755
of Snowdrop we have to simplify the interface

956
00:54:23,815 --> 00:54:26,919
and just provide just a couple of intuitive sliders

957
00:54:26,959 --> 00:54:27,840
that people can tweak.

958
00:54:30,953 --> 00:54:35,316
Okay, I have to thank all of my colleagues at Massive

959
00:54:35,796 --> 00:54:37,097
at the end of the presentation,

960
00:54:37,177 --> 00:54:40,660
especially Einar and Dennis who did a lot of the work.

961
00:54:41,981 --> 00:54:44,662
So if you've got any questions, this is my email.

962
00:54:45,423 --> 00:54:47,224
The website's for Massive and for Ubisoft.

963
00:54:49,266 --> 00:54:49,826
So we're done.

964
00:54:50,426 --> 00:54:52,588
I think we have about five minutes for questions.

965
00:54:52,748 --> 00:54:55,930
I would like to step up to the microphone, please.

966
00:54:55,950 --> 00:54:56,251
Yep.

967
00:54:57,191 --> 00:54:58,552
Thank you.

968
00:55:06,117 --> 00:55:07,998
Thank you for sharing good idea.

969
00:55:08,739 --> 00:55:09,699
And I have a question.

970
00:55:12,561 --> 00:55:17,505
How long does it take to bake and placement proof?

971
00:55:18,686 --> 00:55:19,626
Many, many right proofs.

972
00:55:19,666 --> 00:55:22,248
Yeah, we mentioned it in one of the slides.

973
00:55:22,308 --> 00:55:23,669
It takes about eight hours.

974
00:55:24,050 --> 00:55:26,531
Of course, it depends on the speed of your engine

975
00:55:26,751 --> 00:55:30,134
and the type of geometry that you have.

976
00:55:31,289 --> 00:55:37,012
And I think there are many, many right players.

977
00:55:37,172 --> 00:55:42,455
And when players enter some region and another region,

978
00:55:43,279 --> 00:55:46,982
some pop-up problem occurred, I think.

979
00:55:47,102 --> 00:55:47,802
What do you...

980
00:55:48,363 --> 00:55:50,965
I don't know how to say in English.

981
00:55:52,606 --> 00:55:56,329
If you feel more comfortable, we can talk later.

982
00:55:56,349 --> 00:55:58,290
So I'll be here to answer questions as well.

983
00:55:58,570 --> 00:56:00,792
So feel free to come and ask me.

984
00:56:01,032 --> 00:56:03,734
So I will try to, if it's a little bit easier.

985
00:56:04,135 --> 00:56:04,655
Okay, thank you.

986
00:56:09,256 --> 00:56:09,957
Right, yes.

987
00:56:10,538 --> 00:56:17,827
My question is, I don't know if you mentioned it, how do you update the 3D grid, like which

988
00:56:18,067 --> 00:56:22,332
grid cell corresponds to which probe in the world?

989
00:56:23,213 --> 00:56:24,214
That's one thing.

990
00:56:25,015 --> 00:56:27,558
So basically the probes aren't really...

991
00:56:29,810 --> 00:56:34,258
tied to any particular grid, because we can spawn them at multiple locations.

992
00:56:34,298 --> 00:56:37,404
We also nudge them a little bit, they can be spawned at...

993
00:56:38,286 --> 00:56:42,293
Right, right. So my question is, like, for each cell you find the closest probe?

994
00:56:44,085 --> 00:56:45,666
For each of the probes? Yeah, that's right.

995
00:56:45,766 --> 00:56:48,148
So we just find the closest probe offline.

996
00:56:48,429 --> 00:56:51,431
It's just a dumb thing that just goes through each of the probes

997
00:56:51,471 --> 00:56:53,593
and figures out which one is the closest. That's it.

998
00:56:54,154 --> 00:56:55,675
There isn't really anything more complicated.

999
00:56:55,695 --> 00:56:58,998
So, another question is, have you experimented with, like,

1000
00:56:59,018 --> 00:57:01,580
a cascaded approach, like having several grids,

1001
00:57:02,821 --> 00:57:04,542
like, more resolution?

1002
00:57:04,763 --> 00:57:07,585
It's a good idea. I think, in general,

1003
00:57:07,625 --> 00:57:09,547
we just didn't have enough time to implement it.

1004
00:57:09,927 --> 00:57:10,547
Okay, thank you.

1005
00:57:11,408 --> 00:57:11,608
Thank you.

1006
00:57:12,508 --> 00:57:17,873
Did you ever have problems with incorrect lighting at the edge of a sector because,

1007
00:57:18,233 --> 00:57:25,540
say there was a large building at the edge of a sector and then the sector beside it was only taking the circles?

1008
00:57:25,860 --> 00:57:26,481
All of the time.

1009
00:57:28,603 --> 00:57:31,386
It's, there's like all sorts of weird things

1010
00:57:31,446 --> 00:57:33,148
that you're gonna see, but most of the time

1011
00:57:33,168 --> 00:57:34,830
they're kind of masked because we do

1012
00:57:34,910 --> 00:57:36,332
trilinear filtering as well.

1013
00:57:36,552 --> 00:57:39,596
So you don't just do one sector and then another sector,

1014
00:57:39,616 --> 00:57:41,238
you actually do trilinear filtering

1015
00:57:41,278 --> 00:57:43,060
between the two different sectors.

1016
00:57:43,721 --> 00:57:46,604
So it's kind of masked, but the problem is there, yes.

1017
00:57:47,285 --> 00:57:47,805
Cool, thank you.

1018
00:57:49,153 --> 00:57:53,579
Yes, I wanted to know how you validated the accuracy of your solution.

1019
00:57:53,839 --> 00:57:56,763
Like, do you have a path tracer or anything like that?

1020
00:57:56,783 --> 00:57:59,066
It just went out as a kind of artistic...

1021
00:57:59,688 --> 00:58:04,489
We just tweaked it until it looked fine and our director said this is good.

1022
00:58:04,929 --> 00:58:08,270
Oh, that works. That's good enough.

1023
00:58:08,690 --> 00:58:08,950
Thank you.

1024
00:58:09,270 --> 00:58:12,691
Hey, so what's the disk size of the lightning data?

1025
00:58:13,371 --> 00:58:17,532
It's in one of the slides, it's about 1 gigs, so it's fairly low.

1026
00:58:19,273 --> 00:58:24,394
And you can basically make that as large as you want by increasing the properties.

1027
00:58:26,974 --> 00:58:28,215
Alright, thank you very much.

