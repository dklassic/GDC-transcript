1
00:00:04,467 --> 00:00:16,753
So I wanted to talk to you today about the journey of going from Clash of Clans to Everdale,

2
00:00:16,753 --> 00:00:20,755
from essentially solo game to an inherently social game.

3
00:00:22,310 --> 00:00:23,450
My name's Tristan Williams.

4
00:00:23,450 --> 00:00:25,231
I'm a senior programmer at Supercell.

5
00:00:25,231 --> 00:00:26,052
I've been there since 2014.

6
00:00:26,052 --> 00:00:31,334
Before that, I've been working at Remedy,

7
00:00:31,334 --> 00:00:34,336
Splash Damage, Ratbag on games such as

8
00:00:34,336 --> 00:00:37,217
Alan Wake, Quantum Break, and Quake Wars.

9
00:00:37,217 --> 00:00:42,560
Topics today, intro.

10
00:00:42,560 --> 00:00:43,340
We'll touch on the design.

11
00:00:43,340 --> 00:00:45,281
I wanna dig into that a little bit,

12
00:00:45,281 --> 00:00:47,623
but the main meat of this topic will be the tech

13
00:00:47,623 --> 00:00:49,203
and some takeaways.

14
00:00:51,412 --> 00:01:02,315
So in the beginning, well, you've probably all heard of Clash of Clans, but in case you haven't, we released it in 2012, and it's been effectively in the top 50 of the App Store ever since.

15
00:01:02,315 --> 00:01:06,076
So we're near on 10 years now, which is just amazing.

16
00:01:06,076 --> 00:01:09,818
And Everdale is one of our new software launch games released last year.

17
00:01:09,818 --> 00:01:18,601
So Clash of Clans, if you haven't played it, is a village builder where you gather resources with these elixir pumps and gold mines.

18
00:01:18,601 --> 00:01:20,581
You build your own defenses and armies.

19
00:01:21,358 --> 00:01:26,280
And then you take your armies and attack other players' villages,

20
00:01:26,280 --> 00:01:29,541
steal their resources in this inverse tower defense type gameplay,

21
00:01:29,541 --> 00:01:34,222
and use their stolen resources to upgrade your own village and build more armies,

22
00:01:34,222 --> 00:01:36,142
and gain trophies by scorch up.

23
00:01:36,142 --> 00:01:43,264
So this is a game that's always got one village on screen at a time,

24
00:01:43,264 --> 00:01:46,605
you never see multiple villages at a time.

25
00:01:46,605 --> 00:01:47,945
The core gameplay is entirely solo.

26
00:01:51,390 --> 00:01:53,291
In the game, there's clans, which is effectively

27
00:01:53,291 --> 00:01:54,813
an opt-in social layer.

28
00:01:54,813 --> 00:01:56,034
You don't need to join a clan.

29
00:01:56,034 --> 00:01:57,635
It will help you if you join a clan,

30
00:01:57,635 --> 00:02:01,659
because then you can earn more resources through clan wars,

31
00:02:01,659 --> 00:02:04,281
which is yet another thing that feeds back

32
00:02:04,281 --> 00:02:06,022
into the core loop of the game.

33
00:02:06,022 --> 00:02:07,243
But your progress at your village

34
00:02:07,243 --> 00:02:08,805
is still entirely your own.

35
00:02:08,805 --> 00:02:11,067
It's still essentially a solo experience

36
00:02:11,067 --> 00:02:14,530
with a social added-on layer there, which is nice.

37
00:02:18,097 --> 00:02:19,257
And moving to Everdale.

38
00:02:19,257 --> 00:02:23,540
So Everdale is inspired by classics like Settlers 2,

39
00:02:23,540 --> 00:02:25,721
one of my favorite games when I was a teenager.

40
00:02:25,721 --> 00:02:29,783
So that inspired a lot of the village building gameplay

41
00:02:29,783 --> 00:02:32,365
where you build stuff and you get people to go

42
00:02:32,365 --> 00:02:34,166
chop some trees and dig up some rocks

43
00:02:34,166 --> 00:02:37,988
and use that for building more things.

44
00:02:37,988 --> 00:02:39,689
Sims and Fallout Shelter,

45
00:02:39,689 --> 00:02:42,151
they were a big inspiration in terms of

46
00:02:42,151 --> 00:02:43,572
how we wanted the player to engage

47
00:02:43,572 --> 00:02:45,353
with the characters in their village.

48
00:02:45,353 --> 00:02:47,314
They wanted to nurture them.

49
00:02:48,083 --> 00:02:51,845
build them as part of their own village identity.

50
00:02:51,845 --> 00:02:53,827
Another great inspiration was civilization.

51
00:02:53,827 --> 00:02:57,168
Not so much for gameplay, but just for the sense of scale.

52
00:02:57,168 --> 00:02:58,729
We wanted the game to feel bigger

53
00:02:58,729 --> 00:02:59,950
than any of our games before.

54
00:02:59,950 --> 00:03:02,731
So here's some gameplay.

55
00:03:02,731 --> 00:03:06,053
So as you can see, we've got a village builder here.

56
00:03:06,053 --> 00:03:08,374
We've got Carolina here at the house.

57
00:03:08,374 --> 00:03:09,635
We're gonna build another house

58
00:03:09,635 --> 00:03:12,797
to attract some new villagers to stay in our village.

59
00:03:12,797 --> 00:03:14,898
And so we assign her a job to do,

60
00:03:14,898 --> 00:03:17,059
which is go work at that work site.

61
00:03:18,218 --> 00:03:20,860
She'll go, oh no, I need some wood.

62
00:03:20,860 --> 00:03:22,061
She'll run over to the wood storage,

63
00:03:22,061 --> 00:03:23,742
come back, drop off the wood,

64
00:03:23,742 --> 00:03:25,763
and start doing some building

65
00:03:25,763 --> 00:03:27,164
with some nice little critters

66
00:03:27,164 --> 00:03:28,985
around in the background.

67
00:03:28,985 --> 00:03:30,146
Then once that's done,

68
00:03:30,146 --> 00:03:31,547
this is all sped up for debug purposes,

69
00:03:31,547 --> 00:03:34,930
pick a new villager, Gabrielle here,

70
00:03:34,930 --> 00:03:39,072
and here she comes to join in the village.

71
00:03:39,072 --> 00:03:45,697
So there's all sorts of stuff to assign villagers to do.

72
00:03:46,933 --> 00:03:50,456
collect trees, collect stone, collect clay,

73
00:03:50,456 --> 00:03:54,719
research at the library to make food for everybody to eat.

74
00:03:54,719 --> 00:03:59,103
And we tried to make it all full of life.

75
00:03:59,103 --> 00:04:00,604
But everything's related to each other,

76
00:04:00,604 --> 00:04:02,546
so first you have to get the trees

77
00:04:02,546 --> 00:04:04,587
and then you can start building the buildings.

78
00:04:04,587 --> 00:04:10,592
That's not all.

79
00:04:10,592 --> 00:04:12,954
Well, there's research, there's tech tree.

80
00:04:12,954 --> 00:04:14,435
This'll be familiar to you if you've played games

81
00:04:14,435 --> 00:04:15,736
like Civilization or anything.

82
00:04:16,852 --> 00:04:20,874
So you unlock from there all of the new buildings,

83
00:04:20,874 --> 00:04:24,755
the upgrade levels, and you get people to go

84
00:04:24,755 --> 00:04:26,856
and work at the library, or the study,

85
00:04:26,856 --> 00:04:28,816
I should say, to upgrade these things.

86
00:04:28,816 --> 00:04:34,638
Cool. Then from very early in our game,

87
00:04:34,638 --> 00:04:36,159
the players are placed in a valley together.

88
00:04:36,159 --> 00:04:38,740
So you zoom out from your village, and here you go.

89
00:04:38,740 --> 00:04:41,040
Here's the valley, and you can see other players' villages

90
00:04:41,040 --> 00:04:43,501
right in this valley. There's no transitions.

91
00:04:43,501 --> 00:04:44,262
It's seamless.

92
00:04:45,796 --> 00:04:47,377
So they create one big world.

93
00:04:47,377 --> 00:04:48,917
In the valley you create products.

94
00:04:48,917 --> 00:04:51,818
For example, here I'm assigning a villager

95
00:04:51,818 --> 00:04:55,980
to go and work at the wool farm, gather some wool.

96
00:04:55,980 --> 00:04:58,060
And then once we've got some wool,

97
00:04:58,060 --> 00:05:00,141
we can go to the tailor and make some socks.

98
00:05:00,141 --> 00:05:02,442
This is a valley building.

99
00:05:02,442 --> 00:05:03,542
This doesn't belong to the player,

100
00:05:03,542 --> 00:05:04,763
it belongs to everybody in the valley.

101
00:05:04,763 --> 00:05:09,284
These are unlocked at the great library here

102
00:05:09,284 --> 00:05:13,446
where you together work to research new stuff

103
00:05:13,446 --> 00:05:15,387
for your whole valley to work on together.

104
00:05:16,522 --> 00:05:18,084
And you build those together as well.

105
00:05:18,084 --> 00:05:21,908
And there's this trading element.

106
00:05:21,908 --> 00:05:25,251
We have orders that come in from faraway lands.

107
00:05:25,251 --> 00:05:27,373
You fulfill the orders.

108
00:05:27,373 --> 00:05:29,235
And from the orders, you get resources.

109
00:05:29,235 --> 00:05:33,019
You get valley upgrade points.

110
00:05:33,019 --> 00:05:34,020
That's just kind of fun.

111
00:05:34,020 --> 00:05:39,105
Very relaxing, chill vibes.

112
00:05:41,000 --> 00:05:43,202
So in Evadell, the valley is deeply linked

113
00:05:43,202 --> 00:05:44,443
to your village gameplay.

114
00:05:44,443 --> 00:05:46,684
In the valley, you'll be upgrading your village's skills.

115
00:05:46,684 --> 00:05:48,645
You'll be sending them off to a guild to train.

116
00:05:48,645 --> 00:05:51,707
So that'll help you with your village gameplay,

117
00:05:51,707 --> 00:05:54,109
and you're also earning gold that you need

118
00:05:54,109 --> 00:05:56,651
for building new buildings in the valley.

119
00:05:56,651 --> 00:05:59,432
So the village supports the valley,

120
00:05:59,432 --> 00:06:01,834
and the valley supports the village.

121
00:06:01,834 --> 00:06:03,715
These two are deeply intertwined in the game design

122
00:06:03,715 --> 00:06:04,856
right from the very beginning.

123
00:06:04,856 --> 00:06:05,416
It's not a new layer.

124
00:06:05,416 --> 00:06:07,658
It's right at the core of the game.

125
00:06:08,753 --> 00:06:10,954
And here we have shared progress and deep collaboration

126
00:06:10,954 --> 00:06:11,634
between the players.

127
00:06:11,634 --> 00:06:16,196
A bit of background on our teams,

128
00:06:16,196 --> 00:06:17,477
the way we do things at Supercell

129
00:06:17,477 --> 00:06:19,537
before we go too much further,

130
00:06:19,537 --> 00:06:23,379
helps establish the context for the choices we've made.

131
00:06:23,379 --> 00:06:28,260
So at Supercell we like to have small independent teams,

132
00:06:28,260 --> 00:06:29,001
as small as possible.

133
00:06:29,001 --> 00:06:30,781
So this game, we actually started it back in 2016.

134
00:06:31,633 --> 00:06:34,814
So it's quite a long project, but you have to understand

135
00:06:34,814 --> 00:06:38,635
that it was with less than six people for most of that time,

136
00:06:38,635 --> 00:06:42,236
and only towards the end when it was clear

137
00:06:42,236 --> 00:06:44,337
that we were going to move towards soft launch

138
00:06:44,337 --> 00:06:45,677
with this game, we started to grow the game

139
00:06:45,677 --> 00:06:48,538
towards 10 to 20 people ready for launch.

140
00:06:48,538 --> 00:06:50,478
And at its peak, it's only had four client programmers

141
00:06:50,478 --> 00:06:52,299
and two server programmers working on it.

142
00:06:52,299 --> 00:06:59,161
So that's the background, a bit of background.

143
00:06:59,161 --> 00:07:01,442
Next, I want to talk about the dream.

144
00:07:04,272 --> 00:07:08,135
Now, every creative project,

145
00:07:08,135 --> 00:07:09,816
whether it be at a game or a painting, a book,

146
00:07:09,816 --> 00:07:12,178
it starts with some kind of dream.

147
00:07:12,178 --> 00:07:13,779
Even if you don't think of it that way,

148
00:07:13,779 --> 00:07:16,020
there's some sort of idea in your head

149
00:07:16,020 --> 00:07:17,901
that you want to bring out.

150
00:07:17,901 --> 00:07:21,084
And these dreams, they come in all different shapes

151
00:07:21,084 --> 00:07:21,344
and sizes.

152
00:07:21,344 --> 00:07:24,186
Could be small, they could be big,

153
00:07:24,186 --> 00:07:26,707
they could be medium, they could be triangle,

154
00:07:26,707 --> 00:07:27,808
could be square.

155
00:07:27,808 --> 00:07:30,910
But here I'm gonna talk about small and big dreams.

156
00:07:30,910 --> 00:07:33,512
So in my mind, how I categorize them,

157
00:07:34,363 --> 00:07:37,184
A small dream would be something like a cool mechanic.

158
00:07:37,184 --> 00:07:40,766
Like if you played Hay Day, to harvest your crops,

159
00:07:40,766 --> 00:07:43,907
you don't tap them and press a button to harvest them.

160
00:07:43,907 --> 00:07:46,748
You grab the scythe and you swipe your scythe

161
00:07:46,748 --> 00:07:48,789
through the crops, and it's a cool little mechanic.

162
00:07:48,789 --> 00:07:53,050
And it could be a unique gameplay idea,

163
00:07:53,050 --> 00:07:55,271
like a game like Portal, where you take

164
00:07:55,271 --> 00:07:58,232
a first person puzzle game and you add this sweet gun

165
00:07:58,232 --> 00:07:59,413
that you can put a hole in one wall,

166
00:07:59,413 --> 00:08:01,313
a hole in the other wall, and pop between them.

167
00:08:01,313 --> 00:08:03,414
Adds a whole bunch of really interesting gameplay.

168
00:08:04,803 --> 00:08:07,485
It might be something like an art style.

169
00:08:07,485 --> 00:08:11,029
A game that comes to mind for that would be Limbo.

170
00:08:11,029 --> 00:08:14,492
So you get this, what is a classic platformer at its heart,

171
00:08:14,492 --> 00:08:16,073
but it's got this beautiful art style

172
00:08:16,073 --> 00:08:17,815
that creates a unique experience for the player.

173
00:08:19,869 --> 00:08:22,571
Another one might be an interesting piece of tech,

174
00:08:22,571 --> 00:08:25,694
like a game I worked on many years ago, Alan Wake.

175
00:08:25,694 --> 00:08:29,358
It was, the core idea of this light and shadow gameplay

176
00:08:29,358 --> 00:08:32,020
actually came from one of the designers

177
00:08:32,020 --> 00:08:34,222
seeing what one of the rendering programmers was working on.

178
00:08:34,222 --> 00:08:36,023
He was working on some nice lighting tech.

179
00:08:36,023 --> 00:08:38,686
He was like, oh cool, maybe we should make a game

180
00:08:38,686 --> 00:08:40,487
about light and dark.

181
00:08:40,487 --> 00:08:44,831
So these kind of small dreams,

182
00:08:44,831 --> 00:08:46,353
I think of them a bit like this.

183
00:08:48,280 --> 00:08:51,221
You've got the seed of an idea and you grow it into a big tree.

184
00:08:51,221 --> 00:08:55,543
This is a really good way to build a game.

185
00:08:55,543 --> 00:08:57,143
Often you've got clear reference material

186
00:08:57,143 --> 00:08:57,884
that you can build from.

187
00:08:57,884 --> 00:09:00,385
You've kind of got a little twist

188
00:09:00,385 --> 00:09:05,086
that you're putting on an established genre, perhaps.

189
00:09:05,086 --> 00:09:07,007
The real challenge here is differentiation.

190
00:09:07,007 --> 00:09:09,868
How do you do something different?

191
00:09:09,868 --> 00:09:11,628
But anyway, it's cool stuff.

192
00:09:11,628 --> 00:09:13,229
Small dreams are great to have.

193
00:09:14,693 --> 00:09:16,514
Then we've got big dreams.

194
00:09:16,514 --> 00:09:18,174
And what I mean here by a big dream

195
00:09:18,174 --> 00:09:21,275
would be your lofty goals.

196
00:09:21,275 --> 00:09:25,477
Your big dreams are more user experience

197
00:09:25,477 --> 00:09:26,698
and emotion driven usually.

198
00:09:26,698 --> 00:09:30,079
You're thinking about how does the player feel

199
00:09:30,079 --> 00:09:33,640
when they play this game?

200
00:09:33,640 --> 00:09:35,421
Do they feel like they're a space marine

201
00:09:35,421 --> 00:09:37,782
battling aliens in a galaxy far, far away?

202
00:09:37,782 --> 00:09:40,743
Do they feel like they're a god playing Populous?

203
00:09:40,743 --> 00:09:43,965
Or do they feel like...

204
00:09:45,581 --> 00:09:46,901
a chief managing a village.

205
00:09:46,901 --> 00:09:52,024
Starting from the high fantasy, what we're selling the game.

206
00:09:52,024 --> 00:09:56,886
That's kind of, in some ways it's kind of the opposite.

207
00:09:56,886 --> 00:10:00,648
Instead of growing from the ground up, you start from the

208
00:10:00,648 --> 00:10:03,309
canopy, you're looking at the tops of the trees of the

209
00:10:03,309 --> 00:10:06,130
forest, and then you grow down.

210
00:10:06,130 --> 00:10:06,591
And you see.

211
00:10:07,576 --> 00:10:10,417
what branches do we need to build to support this?

212
00:10:10,417 --> 00:10:12,177
And eventually you might find the seed

213
00:10:12,177 --> 00:10:14,338
and it might start to grow back up again.

214
00:10:14,338 --> 00:10:16,118
It can loop in all sorts of crazy ways.

215
00:10:16,118 --> 00:10:23,961
And you can have both big and small dreams in a game.

216
00:10:23,961 --> 00:10:26,462
So dreaming big is quite daunting.

217
00:10:26,462 --> 00:10:28,482
You may not have any idea

218
00:10:28,482 --> 00:10:29,703
what the mechanics are gonna be yet.

219
00:10:29,703 --> 00:10:32,963
You may just have this idea of like,

220
00:10:32,963 --> 00:10:34,884
I wanna have a game where I feel like a god.

221
00:10:37,057 --> 00:10:38,517
How do you go about making that game?

222
00:10:38,517 --> 00:10:41,319
There may be a lack of reference.

223
00:10:41,319 --> 00:10:44,880
You may be inventing a new genre, basically.

224
00:10:44,880 --> 00:10:49,422
The tech may not even exist yet.

225
00:10:49,422 --> 00:10:51,443
So yeah, sounds easy, right?

226
00:10:51,443 --> 00:10:54,264
Why would we do that?

227
00:10:54,264 --> 00:10:59,927
Anyway, so getting back to Everdale, in the beginning,

228
00:11:01,005 --> 00:11:04,087
We felt like we wanted to reach a broader audience.

229
00:11:04,087 --> 00:11:08,130
We wanted to make a game that was not necessarily about combat.

230
00:11:08,130 --> 00:11:11,272
Now, if I could tell an anecdote about that.

231
00:11:11,272 --> 00:11:13,854
It actually came a lot from me watching my wife

232
00:11:13,854 --> 00:11:15,675
play games like Clash of Clans and Age of Empires.

233
00:11:15,675 --> 00:11:18,817
So if you play Clash of Clans, at the beginning,

234
00:11:18,817 --> 00:11:21,959
you've got this shield that lasts for several days.

235
00:11:21,959 --> 00:11:23,380
That means that you can't be attacked.

236
00:11:23,380 --> 00:11:26,302
Nobody can come and steal your stuff for the first few days

237
00:11:26,302 --> 00:11:27,242
that you're playing the game.

238
00:11:28,497 --> 00:11:30,399
My wife installed it and she was loving it.

239
00:11:30,399 --> 00:11:32,180
She was loving building her village,

240
00:11:32,180 --> 00:11:35,183
loving laying it out, upgrading things, having a great time.

241
00:11:35,183 --> 00:11:38,745
Then a few days later, the shield dropped

242
00:11:38,745 --> 00:11:39,646
and she was attacked.

243
00:11:39,646 --> 00:11:43,869
She logged into the game and she saw everything's crushed

244
00:11:43,869 --> 00:11:46,251
and she's lost a whole bunch of resources.

245
00:11:46,251 --> 00:11:48,933
And she was so upset, she just uninstalled the game.

246
00:11:48,933 --> 00:11:54,037
Then with Age of Empires, it's kind of similar.

247
00:11:54,448 --> 00:11:59,130
She was playing the game, she loved sending people out to hunt deer and build up her town.

248
00:11:59,130 --> 00:12:00,871
She was really loving that.

249
00:12:00,871 --> 00:12:03,432
And then the Warhorn blew.

250
00:12:03,432 --> 00:12:08,054
This is Age of Empires II that I'm referring to here, one of the old ones.

251
00:12:08,054 --> 00:12:09,115
The Warhorn blew.

252
00:12:09,115 --> 00:12:13,317
And once she experienced the stress of being attacked for the first time, she actually

253
00:12:13,317 --> 00:12:14,977
just started a new game.

254
00:12:14,977 --> 00:12:17,318
And started playing another one up until the Warhorn blew.

255
00:12:18,509 --> 00:12:19,829
And then she did the same thing.

256
00:12:19,829 --> 00:12:21,350
Started again and played to the Warhorn Blue

257
00:12:21,350 --> 00:12:23,231
and then she uninstalled the game.

258
00:12:23,231 --> 00:12:25,031
So that kind of raised my eyebrows

259
00:12:25,031 --> 00:12:27,672
and made me realize that actually,

260
00:12:27,672 --> 00:12:30,693
there aren't actually that many village building games

261
00:12:30,693 --> 00:12:33,754
that don't have combat or conflict in them in some form.

262
00:12:33,754 --> 00:12:36,255
And I felt like this was actually,

263
00:12:36,255 --> 00:12:39,315
this was a challenge and a really interesting challenge

264
00:12:39,315 --> 00:12:41,496
that we should tackle.

265
00:12:41,496 --> 00:12:43,737
You know, not all games have to be about fighting

266
00:12:43,737 --> 00:12:44,217
and sometimes,

267
00:12:44,938 --> 00:12:48,000
You might have, I play Everdale in between other games.

268
00:12:48,000 --> 00:12:50,521
So at the moment I'm currently going back and playing Doom.

269
00:12:50,521 --> 00:12:53,042
And in between some sessions of Doom,

270
00:12:53,042 --> 00:12:55,082
sometimes you just need to chill out,

271
00:12:55,082 --> 00:12:57,023
play something nice and relaxing,

272
00:12:57,023 --> 00:12:58,424
like a heyday or an Everdale.

273
00:12:58,424 --> 00:13:02,265
Another dream we had was we wanted it to be

274
00:13:02,265 --> 00:13:07,667
more collaborative than anything we've made before.

275
00:13:07,667 --> 00:13:08,548
And more immersive.

276
00:13:12,471 --> 00:13:15,072
So we can look at this now through the lens

277
00:13:15,072 --> 00:13:17,073
of the dream terms that I described before.

278
00:13:17,073 --> 00:13:19,093
So we've got some small dreams here.

279
00:13:19,093 --> 00:13:20,594
We've got a village builder.

280
00:13:20,594 --> 00:13:22,355
There's clear reference for this,

281
00:13:22,355 --> 00:13:24,435
but there's a bunch of really good

282
00:13:24,435 --> 00:13:27,216
village builders out there.

283
00:13:27,216 --> 00:13:29,757
We want something nice and peaceful and relaxing.

284
00:13:29,757 --> 00:13:38,000
Happy little villages, happy little deer.

285
00:13:38,000 --> 00:13:39,781
Here's our big dreams.

286
00:13:39,781 --> 00:13:41,502
This is the scary slide.

287
00:13:42,927 --> 00:13:45,868
Game with collaboration built in at the core.

288
00:13:45,868 --> 00:13:47,929
We wanted from the very beginning that you're working

289
00:13:47,929 --> 00:13:50,110
with other people to achieve bigger goals

290
00:13:50,110 --> 00:13:52,871
and what you can achieve on your own.

291
00:13:52,871 --> 00:13:55,132
Wanted it to be meaningful cooperation,

292
00:13:55,132 --> 00:13:56,252
not just a layer on top.

293
00:13:56,252 --> 00:13:58,253
We wanted it to actually mean something

294
00:13:58,253 --> 00:13:59,153
to the core of the game.

295
00:13:59,153 --> 00:14:03,015
And we wanted to create a seamless world

296
00:14:03,015 --> 00:14:06,216
with multiple villages.

297
00:14:06,216 --> 00:14:08,817
And as you saw from the videos before,

298
00:14:08,817 --> 00:14:10,978
we got there in some form.

299
00:14:13,626 --> 00:14:18,148
So the dream, every game starts with some sort of dream.

300
00:14:18,148 --> 00:14:20,550
It really helps if you can try to identify these early.

301
00:14:20,550 --> 00:14:23,211
You might not even be conscious of what you're trying to do,

302
00:14:23,211 --> 00:14:25,032
but you might have a feeling in mind,

303
00:14:25,032 --> 00:14:26,132
a vibe that you're going for.

304
00:14:26,132 --> 00:14:29,114
So try to identify these, because actually,

305
00:14:29,114 --> 00:14:31,555
these may form the core design pillars of your game.

306
00:14:31,555 --> 00:14:33,076
And if you can write them down,

307
00:14:33,076 --> 00:14:35,017
then you can always refer back to those,

308
00:14:35,017 --> 00:14:37,178
and they'll help inform all of the decisions

309
00:14:37,178 --> 00:14:38,619
that you make from then on.

310
00:14:38,619 --> 00:14:41,380
And especially in the case of this talk, the tech choices.

311
00:14:45,533 --> 00:14:47,495
So I want to talk a little bit about

312
00:14:47,495 --> 00:14:48,835
what is collaboration in a game,

313
00:14:48,835 --> 00:14:50,737
and I'm gonna use Clash as an example here.

314
00:14:50,737 --> 00:14:54,119
So here's a screenshot that I took of a

315
00:14:54,119 --> 00:14:57,120
offline build of Clash in the Alliance menu.

316
00:14:57,120 --> 00:14:59,762
So you group up with other players.

317
00:14:59,762 --> 00:15:02,243
This is what I think of as collaboration 101.

318
00:15:02,243 --> 00:15:05,886
Group up with other players and you have a menu

319
00:15:05,886 --> 00:15:08,187
where you can see the names of the other players.

320
00:15:08,187 --> 00:15:10,929
Maybe you can click on them and go visit their game states.

321
00:15:10,929 --> 00:15:13,250
Maybe you can chat with them.

322
00:15:13,250 --> 00:15:13,770
That's cool.

323
00:15:13,770 --> 00:15:14,951
Next level above that might be.

324
00:15:16,290 --> 00:15:19,371
where you've got something like clan wars,

325
00:15:19,371 --> 00:15:22,712
where you've got what are still essentially solo battles,

326
00:15:22,712 --> 00:15:24,812
but you've got some combined scoring

327
00:15:24,812 --> 00:15:26,913
that helps you get more points,

328
00:15:26,913 --> 00:15:27,893
more resources out of this.

329
00:15:27,893 --> 00:15:30,013
So in clan wars, you've got the arranged battles

330
00:15:30,013 --> 00:15:31,454
between one clan and another clan,

331
00:15:31,454 --> 00:15:33,354
where you'll earn stars,

332
00:15:33,354 --> 00:15:35,714
get resources based on your performance,

333
00:15:35,714 --> 00:15:39,135
and those resources are still just yours.

334
00:15:39,135 --> 00:15:40,796
They're still a solo element of the core loop.

335
00:15:40,796 --> 00:15:41,296
We wanted to go for

336
00:15:46,075 --> 00:15:49,016
collaboration plus plus, seamless world,

337
00:15:49,016 --> 00:15:51,996
watching the other people play in real time,

338
00:15:51,996 --> 00:15:53,897
and real gameplay interaction in the real world,

339
00:15:53,897 --> 00:15:56,698
not just in the menus. We wanted to actually have

340
00:15:56,698 --> 00:15:59,339
as many of the things that you could do in the game

341
00:15:59,339 --> 00:16:02,719
as possible centered around some real object in the world

342
00:16:02,719 --> 00:16:04,140
that you scroll over to and tap.

343
00:16:04,140 --> 00:16:06,381
We didn't want to have to open too many menus

344
00:16:06,381 --> 00:16:09,722
and do things in menus. Sometimes it's unavoidable,

345
00:16:09,722 --> 00:16:12,022
but we were trying to do as much as possible in the real world.

346
00:16:13,578 --> 00:16:15,659
We wanted the teamwork to really mean something

347
00:16:15,659 --> 00:16:17,401
with shared goals between the players.

348
00:16:17,401 --> 00:16:24,045
Exciting stuff. We were all pretty pumped about this idea,

349
00:16:24,045 --> 00:16:25,727
but also pretty scared about this idea, too,

350
00:16:25,727 --> 00:16:28,228
because it's a big world.

351
00:16:28,228 --> 00:16:31,211
It's going to be expensive to simulate and render.

352
00:16:31,211 --> 00:16:33,452
And remember, we're targeting phones here,

353
00:16:33,452 --> 00:16:36,234
phones and tablets, not PCs and next-gen consoles.

354
00:16:36,234 --> 00:16:41,518
A game like this we knew was going to be complex to design

355
00:16:41,518 --> 00:16:42,819
and even more complex to test.

356
00:16:44,930 --> 00:16:49,713
So we charged it in, of course.

357
00:16:49,713 --> 00:16:52,794
So tech, well, in the beginning,

358
00:16:52,794 --> 00:16:54,815
we've got some technology that's fairly close,

359
00:16:54,815 --> 00:16:56,035
it's village-build technology,

360
00:16:56,035 --> 00:17:00,337
so we forked Clash of Clans.

361
00:17:00,337 --> 00:17:02,578
Bit of background about Clash of Clans.

362
00:17:02,578 --> 00:17:03,439
It's built on an in-house engine.

363
00:17:03,439 --> 00:17:08,521
It's got a single village on screen at a time.

364
00:17:08,521 --> 00:17:10,702
Collaboration is effectively only in menus.

365
00:17:11,738 --> 00:17:15,540
and its rendering is completely 2D, sprite out of space.

366
00:17:15,540 --> 00:17:16,960
These days it's not just 2D anymore,

367
00:17:16,960 --> 00:17:19,161
but it was completely 2D.

368
00:17:19,161 --> 00:17:23,342
And what that means with the sprite atlas is,

369
00:17:23,342 --> 00:17:26,863
if you're not aware, is that we've got the original models

370
00:17:26,863 --> 00:17:28,464
in 3D, and then we render them out,

371
00:17:28,464 --> 00:17:30,184
the artist render them out in a whole bunch

372
00:17:30,184 --> 00:17:33,786
of different orientations and every different pose,

373
00:17:33,786 --> 00:17:35,706
and then we load those all up into the game

374
00:17:35,706 --> 00:17:36,827
as a pre-baked asset.

375
00:17:40,723 --> 00:17:43,104
A bit more tech background is that it's a client-server

376
00:17:43,104 --> 00:17:44,864
architecture, as you probably expect.

377
00:17:44,864 --> 00:17:49,106
The server's authoritative, and it always asserts

378
00:17:49,106 --> 00:17:50,726
that the client is in sync with it.

379
00:17:50,726 --> 00:17:53,347
And we do that by having this chunk of code

380
00:17:53,347 --> 00:17:57,168
that we call logic code that we run on both the client

381
00:17:57,168 --> 00:17:59,108
and the server at all times.

382
00:17:59,108 --> 00:18:01,068
And this code is designed to be

383
00:18:01,068 --> 00:18:03,309
as deterministic as possible.

384
00:18:03,309 --> 00:18:05,970
In fact, it's designed to be absolutely deterministic.

385
00:18:05,970 --> 00:18:08,490
We don't use any floating point values in our logic code.

386
00:18:12,130 --> 00:18:14,430
So, logic state is persisted by the server

387
00:18:14,430 --> 00:18:16,011
automatically into the database,

388
00:18:16,011 --> 00:18:18,271
so you don't have to write any custom queries

389
00:18:18,271 --> 00:18:21,152
or transactions to the databases.

390
00:18:21,152 --> 00:18:22,812
It's just all done for you.

391
00:18:22,812 --> 00:18:30,894
The client and logic code, though, in Clash of Clans

392
00:18:30,894 --> 00:18:32,914
relied very heavily on singletons.

393
00:18:32,914 --> 00:18:35,175
So, you know, you've got your game object manager,

394
00:18:35,175 --> 00:18:38,395
get instance, get me the game objects that are building.

395
00:18:39,366 --> 00:18:41,647
shop offer manager, get the offers

396
00:18:41,647 --> 00:18:45,070
in the currently available to the shop.

397
00:18:45,070 --> 00:18:47,131
Village, just get.

398
00:18:47,131 --> 00:18:50,113
And it would just be one of everything

399
00:18:50,113 --> 00:18:54,116
and it was hard-coded, which is nice,

400
00:18:54,116 --> 00:18:55,477
it's convenient and very easy to code

401
00:18:55,477 --> 00:18:59,300
and obviously it's worked well for us for a very long time.

402
00:18:59,300 --> 00:19:02,122
But you could only have one village running at a time.

403
00:19:02,122 --> 00:19:04,604
So the first step was to break that up.

404
00:19:06,330 --> 00:19:08,351
So the first step of making the multiple villages work

405
00:19:08,351 --> 00:19:10,212
was to break it up into the concept of contexts.

406
00:19:10,212 --> 00:19:12,834
So the context would bundle all of the subsystems

407
00:19:12,834 --> 00:19:16,835
that the village needed to run into one class.

408
00:19:16,835 --> 00:19:19,917
So you could get the context

409
00:19:19,917 --> 00:19:22,078
and that would effectively be a village.

410
00:19:22,078 --> 00:19:25,260
It would have its own GameObjectManager, ShopOffManager,

411
00:19:25,260 --> 00:19:27,641
the village pointer, what is the context.

412
00:19:28,871 --> 00:19:31,556
And it has some downsides.

413
00:19:31,556 --> 00:19:34,280
It means that every object has to have a way of knowing

414
00:19:34,280 --> 00:19:36,584
what context it is in, but that's not a big deal.

415
00:19:36,584 --> 00:19:41,012
So that was a fair chunk of refactoring,

416
00:19:41,012 --> 00:19:42,194
but it's just work.

417
00:19:44,755 --> 00:19:47,296
So there was some cool benefits that came out of this though.

418
00:19:47,296 --> 00:19:50,598
For example, we can now run the logic in the background

419
00:19:50,598 --> 00:19:52,819
as like a headless copy of the village.

420
00:19:52,819 --> 00:19:54,440
We can just spawn one whenever we want,

421
00:19:54,440 --> 00:19:57,382
spin off a copy of the village that you've got running

422
00:19:57,382 --> 00:20:00,283
and do whatever we want with it in the background.

423
00:20:00,283 --> 00:20:01,564
We could, for example, use it for some

424
00:20:01,564 --> 00:20:03,625
debug logic verification, I'll mention that.

425
00:20:04,360 --> 00:20:07,161
a bit more later, we could predict it into the future.

426
00:20:07,161 --> 00:20:09,622
If you've played the game, you know that it gives time estimates

427
00:20:09,622 --> 00:20:10,862
of how long something's going to take.

428
00:20:10,862 --> 00:20:14,504
So, we can just, when a user does something that changes the world,

429
00:20:14,504 --> 00:20:15,924
we can just take a copy of the village

430
00:20:15,924 --> 00:20:18,245
and then fast forward it into the future for a long time

431
00:20:18,245 --> 00:20:22,906
and find out when that activity finishes.

432
00:20:22,906 --> 00:20:27,068
So, the design goal actually gave us some nice technical benefits.

433
00:20:34,390 --> 00:20:36,671
So then, next thing we wanted to do

434
00:20:36,671 --> 00:20:39,152
was achieve this seamless world.

435
00:20:39,152 --> 00:20:43,293
We did that by giving each village its own rendering world,

436
00:20:43,293 --> 00:20:46,013
which has its own coordinate system,

437
00:20:46,013 --> 00:20:48,274
which means we could move it wherever we want,

438
00:20:48,274 --> 00:20:51,275
and it still got the same coordinate system.

439
00:20:51,275 --> 00:20:53,816
So every village, like my village, your village,

440
00:20:53,816 --> 00:20:55,036
they all start at 0, 0 and go to whatever

441
00:20:55,036 --> 00:20:58,397
their maximum size is. And we had one render world

442
00:20:58,397 --> 00:21:01,458
for the valley, same system, just it was ...

443
00:21:02,656 --> 00:21:04,737
one for the valley, the valley's buildings

444
00:21:04,737 --> 00:21:07,419
and all the ocean and the boats and things in it.

445
00:21:07,419 --> 00:21:10,661
And the actual view we then composed

446
00:21:10,661 --> 00:21:13,102
by stitching together the worlds.

447
00:21:13,102 --> 00:21:14,063
So each village would be rendered

448
00:21:14,063 --> 00:21:15,724
with an offset into the world.

449
00:21:15,724 --> 00:21:17,525
And then, this was nice because

450
00:21:19,103 --> 00:21:21,745
When you then move to a different valley,

451
00:21:21,745 --> 00:21:23,826
which is unfortunate, but it's a design thing

452
00:21:23,826 --> 00:21:25,767
that we need to be able to cope with,

453
00:21:25,767 --> 00:21:28,509
we can then put that village in a different place

454
00:21:28,509 --> 00:21:31,411
in the new valley and everything's okay.

455
00:21:31,411 --> 00:21:33,412
We don't have to do anything weird in the gameplay

456
00:21:33,412 --> 00:21:35,433
to update everything's position or anything like that.

457
00:21:35,433 --> 00:21:39,716
So great, now we can see everything.

458
00:21:39,716 --> 00:21:43,479
But back to this small dream.

459
00:21:43,479 --> 00:21:45,720
The dream was to be a village builder.

460
00:21:46,994 --> 00:21:49,335
We wanted to have a diverse cast of villagers

461
00:21:49,335 --> 00:21:50,636
from all sorts of different cultural,

462
00:21:50,636 --> 00:21:51,777
drawing inspiration from all sorts

463
00:21:51,777 --> 00:21:53,918
of different cultural backgrounds

464
00:21:53,918 --> 00:21:57,060
with different hair colors, different clothes.

465
00:21:57,060 --> 00:22:00,162
We want them to be performing lots of different tasks.

466
00:22:00,162 --> 00:22:01,323
So maybe they're carrying a hammer,

467
00:22:01,323 --> 00:22:03,664
maybe they're carrying a saw, an axe,

468
00:22:03,664 --> 00:22:06,806
or maybe they're wandering along with some logs or a pumpkin.

469
00:22:06,806 --> 00:22:10,688
We also wanted to customize them.

470
00:22:10,688 --> 00:22:12,770
We wanted players to be able to select

471
00:22:12,770 --> 00:22:15,011
what clothes each villager was wearing.

472
00:22:16,315 --> 00:22:19,456
And if you think about that in the context of the 2D

473
00:22:19,456 --> 00:22:24,977
sprite-based content, that's a lot of permutations.

474
00:22:24,977 --> 00:22:27,578
Every time we want to add a new set of clothing,

475
00:22:27,578 --> 00:22:31,259
we need to go on back and re-render a whole bunch of stuff.

476
00:22:31,259 --> 00:22:35,620
All the different animations, any new animation

477
00:22:35,620 --> 00:22:38,521
just adds to the permutations.

478
00:22:38,521 --> 00:22:39,701
So we made the choice to go to 3D.

479
00:22:39,701 --> 00:22:44,542
But we didn't have a 3D engine.

480
00:22:45,978 --> 00:22:47,920
We had some 3D rendering capabilities.

481
00:22:47,920 --> 00:22:49,201
If you played Brawl Stars,

482
00:22:49,201 --> 00:22:50,702
if you played that during the soft launch,

483
00:22:50,702 --> 00:22:52,704
you may remember that it was actually a 2D background

484
00:22:52,704 --> 00:22:55,125
with 3D characters.

485
00:22:55,125 --> 00:22:57,367
Boom Beach has some 3D background,

486
00:22:57,367 --> 00:23:00,970
and there's also some 3D menu elements

487
00:23:00,970 --> 00:23:02,551
in Clash Royale back in the day.

488
00:23:02,551 --> 00:23:06,694
So we had some 3D rendering technology.

489
00:23:06,694 --> 00:23:09,856
We had some pipeline, so we just built a 3D engine,

490
00:23:09,856 --> 00:23:13,119
a simple one, a really simple one, actually.

491
00:23:13,119 --> 00:23:14,040
So we designed it.

492
00:23:14,804 --> 00:23:17,626
to be as simple to use as possible,

493
00:23:17,626 --> 00:23:19,748
as close to our 2D engine as possible,

494
00:23:19,748 --> 00:23:23,071
because actually a lot of people at Supercell,

495
00:23:23,071 --> 00:23:24,973
a lot of programmers at Supercell

496
00:23:24,973 --> 00:23:25,893
don't have a 3D game background.

497
00:23:25,893 --> 00:23:28,936
I did, and a few other people at the company did,

498
00:23:28,936 --> 00:23:32,078
from working on our console and AAA games in the past.

499
00:23:32,078 --> 00:23:36,142
But yeah, it was important to make it

500
00:23:36,142 --> 00:23:37,943
so that people felt comfortable.

501
00:23:37,943 --> 00:23:40,966
They could just jump in and start building new stuff

502
00:23:40,966 --> 00:23:41,907
as quickly as possible.

503
00:23:43,674 --> 00:23:48,455
Another actually surprisingly tricky task

504
00:23:48,455 --> 00:23:50,596
was making the camera feel just as good

505
00:23:50,596 --> 00:23:51,616
as it did in Clash of Clans.

506
00:23:51,616 --> 00:23:54,916
So if you play our games, you may not have noticed,

507
00:23:54,916 --> 00:23:59,097
but you certainly felt it, that it's very, very direct.

508
00:23:59,097 --> 00:24:00,878
Everything matches your fingertips.

509
00:24:00,878 --> 00:24:02,298
If you put your fingers on there

510
00:24:02,298 --> 00:24:04,739
and then scroll in and out or pan around,

511
00:24:04,739 --> 00:24:06,739
your fingertips will still be touching

512
00:24:06,739 --> 00:24:08,499
the exact same objects.

513
00:24:08,499 --> 00:24:11,100
So we made it a goal to make sure

514
00:24:11,100 --> 00:24:12,720
that we matched that one-to-one.

515
00:24:14,437 --> 00:24:16,878
And one cool thing about this engine that we built

516
00:24:16,878 --> 00:24:19,238
was actually it made its way back into Brawl Stars.

517
00:24:19,238 --> 00:24:21,179
So Brawl Stars is now 3D.

518
00:24:21,179 --> 00:24:23,459
And our other games in Softwatch at the moment

519
00:24:23,459 --> 00:24:26,640
are also using that same engine, and they're all 3D too.

520
00:24:26,640 --> 00:24:28,820
And we now all improve the engine together.

521
00:24:28,820 --> 00:24:31,421
And it gets better and better and better all the time.

522
00:24:31,421 --> 00:24:35,002
So this little small dream actually ended up

523
00:24:35,002 --> 00:24:37,442
building a big piece of tech that benefited the company.

524
00:24:46,445 --> 00:24:50,967
So, probably the real meat here is the collaboration tech.

525
00:24:50,967 --> 00:24:54,568
We wanted to have these multiple players

526
00:24:54,568 --> 00:24:57,089
in one seamless world.

527
00:24:57,089 --> 00:24:59,170
So, in the beginning we had that.

528
00:24:59,170 --> 00:25:02,011
We had the multiple players in one seamless world.

529
00:25:02,011 --> 00:25:05,152
And we had it so that the actions a player would do

530
00:25:05,152 --> 00:25:06,293
were transmitted to the other clients.

531
00:25:06,293 --> 00:25:09,614
So you could see what other people were doing.

532
00:25:09,614 --> 00:25:12,275
But you couldn't interact,

533
00:25:12,275 --> 00:25:14,936
and you couldn't yet do something together.

534
00:25:16,230 --> 00:25:18,552
In your own village, this validation that you need to do

535
00:25:18,552 --> 00:25:20,514
is relatively simple.

536
00:25:20,514 --> 00:25:22,475
On your client, if you think you can do an action,

537
00:25:22,475 --> 00:25:24,817
okay, cool, send it to the server.

538
00:25:24,817 --> 00:25:26,558
Server can confirm, can validate when it's sent

539
00:25:26,558 --> 00:25:28,980
that this action is valid and apply it.

540
00:25:28,980 --> 00:25:32,103
If not, all we need to do is just say,

541
00:25:32,103 --> 00:25:35,626
send back to the client the correct version of the village

542
00:25:35,626 --> 00:25:37,727
and it can just fix itself.

543
00:25:37,727 --> 00:25:41,550
But when you influence shared state, it's a bit trickier.

544
00:25:44,306 --> 00:25:46,107
Our other games in the past have gone about it

545
00:25:46,107 --> 00:25:49,268
in the way that there's manually persisted shared state,

546
00:25:49,268 --> 00:25:51,489
that you have a database table with the clan,

547
00:25:51,489 --> 00:25:54,091
and let's say that each one row per clan,

548
00:25:54,091 --> 00:25:57,532
let's say you've got the column for the name of the clan.

549
00:25:57,532 --> 00:26:03,275
So that name is specifically written out to the database.

550
00:26:03,275 --> 00:26:07,197
This was done with manual message handling

551
00:26:07,197 --> 00:26:09,718
and manual error resolution for every feature.

552
00:26:09,718 --> 00:26:13,660
So everything you want to do in the shared world,

553
00:26:14,348 --> 00:26:16,488
required you to write the messages

554
00:26:16,488 --> 00:26:18,269
that you'd send from the client to the server

555
00:26:18,269 --> 00:26:19,489
to request to do it.

556
00:26:19,489 --> 00:26:21,369
It would require the server handling

557
00:26:21,369 --> 00:26:23,650
to redirect that to the right part of the server,

558
00:26:23,650 --> 00:26:25,250
the right instances.

559
00:26:25,250 --> 00:26:28,611
And it would need to validate it

560
00:26:28,611 --> 00:26:31,491
on the server side in server code

561
00:26:31,491 --> 00:26:33,552
and send a response back, an appropriate response

562
00:26:33,552 --> 00:26:35,772
that's like, yes, this change was made,

563
00:26:35,772 --> 00:26:37,692
no, this change wasn't made.

564
00:26:37,692 --> 00:26:40,013
And the client would need to resolve that error if necessary.

565
00:26:41,013 --> 00:26:44,277
So for a feature to be robust and good,

566
00:26:44,277 --> 00:26:46,839
you effectively needed both a client

567
00:26:46,839 --> 00:26:48,681
and a server programmer to handle it

568
00:26:48,681 --> 00:26:51,604
because well usually when us client programmers

569
00:26:51,604 --> 00:26:54,386
start writing database code, things go a bit wrong.

570
00:26:54,386 --> 00:26:57,389
But...

571
00:26:59,758 --> 00:27:02,161
But we wanted to have far more elaborate features

572
00:27:02,161 --> 00:27:04,364
than we've seen in our previous games.

573
00:27:04,364 --> 00:27:07,748
And the previous way of doing things is kind of tedious,

574
00:27:07,748 --> 00:27:10,391
and we felt that it would make the development time

575
00:27:10,391 --> 00:27:12,694
of the game prohibitive if we were to develop

576
00:27:12,694 --> 00:27:14,976
the shared gameplay that way.

577
00:27:14,976 --> 00:27:17,680
So we needed to improve.

578
00:27:17,680 --> 00:27:19,622
So what were we gonna do?

579
00:27:19,622 --> 00:27:20,283
Our first pass.

580
00:27:22,455 --> 00:27:24,637
First thing we did was we added this shared logic state

581
00:27:24,637 --> 00:27:25,397
for the valley.

582
00:27:25,397 --> 00:27:29,020
So this is the bundle of logic code

583
00:27:29,020 --> 00:27:30,781
and it had its own context as well.

584
00:27:30,781 --> 00:27:33,383
It meant that we could now run game objects

585
00:27:33,383 --> 00:27:37,166
in the valley code, in the shared code as well.

586
00:27:37,166 --> 00:27:42,990
And we implemented a well-defined action object,

587
00:27:42,990 --> 00:27:45,171
which is a class.

588
00:27:45,171 --> 00:27:46,072
It was encapsulating.

589
00:27:47,515 --> 00:27:49,436
play as action and its parameters,

590
00:27:49,436 --> 00:27:51,837
all of the validation checks necessary

591
00:27:51,837 --> 00:27:52,758
on every step of the way,

592
00:27:52,758 --> 00:27:58,041
all of the handling code for validation failure,

593
00:27:58,041 --> 00:28:00,783
and any rollbacks that would need to be applied.

594
00:28:00,783 --> 00:28:03,164
So if you're writing a new action,

595
00:28:03,164 --> 00:28:04,885
you just derive from this class

596
00:28:04,885 --> 00:28:09,308
and implement the function, implement the interface.

597
00:28:09,308 --> 00:28:11,589
As long as you implemented it correctly,

598
00:28:11,589 --> 00:28:14,571
it would work.

599
00:28:14,571 --> 00:28:14,631
So.

600
00:28:16,300 --> 00:28:18,542
How this worked in practice was it would validate

601
00:28:18,542 --> 00:28:19,622
the action on the client.

602
00:28:19,622 --> 00:28:22,284
If the client thinks it would be okay,

603
00:28:22,284 --> 00:28:27,367
we'll send it to the server, the village part of the server.

604
00:28:27,367 --> 00:28:30,749
So for scaling purposes, we were keeping each village

605
00:28:30,749 --> 00:28:32,230
separate and the values separate

606
00:28:32,230 --> 00:28:34,531
and communicating between them.

607
00:28:34,531 --> 00:28:37,313
So the action will be sent to the village server.

608
00:28:37,313 --> 00:28:40,054
If that failed, then you could respond to the client

609
00:28:40,054 --> 00:28:40,695
with the failure.

610
00:28:40,695 --> 00:28:43,517
The client could then run the appropriate rollback code.

611
00:28:45,365 --> 00:28:48,168
If it's okay, cool, send that on to the valley

612
00:28:48,168 --> 00:28:51,030
and let the valley server now validate.

613
00:28:51,030 --> 00:28:54,853
If that failed, then you'd have to send it back

614
00:28:54,853 --> 00:28:58,716
to the server for the village, run some rollback code,

615
00:28:58,716 --> 00:29:00,197
then send that back to the client,

616
00:29:00,197 --> 00:29:02,019
run some more rollback code.

617
00:29:02,019 --> 00:29:06,422
If it's okay, cool, just apply it

618
00:29:06,422 --> 00:29:08,944
and distribute that to the other clients.

619
00:29:08,944 --> 00:29:12,587
So you can probably already see that this is not great.

620
00:29:14,579 --> 00:29:17,640
But it had some advantages.

621
00:29:17,640 --> 00:29:19,500
It was much neater and easier to see

622
00:29:19,500 --> 00:29:21,501
all the handling in one place.

623
00:29:21,501 --> 00:29:26,462
Rather than having the whole flow of this action

624
00:29:26,462 --> 00:29:30,963
being spread between our client code and our server code

625
00:29:30,963 --> 00:29:33,863
and a whole bunch of different files along the way,

626
00:29:33,863 --> 00:29:35,163
instead it was all bundled together

627
00:29:35,163 --> 00:29:37,384
into one neat little package.

628
00:29:37,384 --> 00:29:41,985
The setup that we've done meant we could share

629
00:29:41,985 --> 00:29:43,925
actually a lot of code between the valley and the village.

630
00:29:46,078 --> 00:29:48,060
And one game programmer could now build

631
00:29:48,060 --> 00:29:49,922
a complete transaction without the help

632
00:29:49,922 --> 00:29:51,283
from a server programmer.

633
00:29:51,283 --> 00:29:53,806
Which is great because server programmers,

634
00:29:53,806 --> 00:29:56,328
their time is usually best spent on things

635
00:29:56,328 --> 00:29:59,671
that they're amazing at, like balancing loads

636
00:29:59,671 --> 00:30:04,996
and managing databases and all this cool stuff.

637
00:30:07,583 --> 00:30:09,065
Disadvantages.

638
00:30:09,065 --> 00:30:12,227
Disadvantages we found were the onus was entirely

639
00:30:12,227 --> 00:30:15,029
on the programmer to foresee any potential failure case

640
00:30:15,029 --> 00:30:18,872
and implement appropriate rollback for any of these cases.

641
00:30:18,872 --> 00:30:20,594
So at any of these points where that message

642
00:30:20,594 --> 00:30:22,655
was going through, something could happen

643
00:30:22,655 --> 00:30:24,637
that make it so that your action fails.

644
00:30:24,637 --> 00:30:26,799
Someone else's action might have been applied first

645
00:30:26,799 --> 00:30:28,700
that makes yours fail.

646
00:30:28,700 --> 00:30:31,723
It might just be that someone's running

647
00:30:31,723 --> 00:30:32,343
a hacked client perhaps.

648
00:30:32,343 --> 00:30:35,646
All sorts of things like this could happen.

649
00:30:36,555 --> 00:30:40,436
and you need to have appropriate rollback for all of them.

650
00:30:40,436 --> 00:30:44,858
So it was still tedious, laborious, error-prone code to write.

651
00:30:44,858 --> 00:30:48,440
It was actually pretty much the old way,

652
00:30:48,440 --> 00:30:50,000
just wrapped up in new packaging.

653
00:30:50,000 --> 00:30:54,622
And all of the client and UI code would need to be written

654
00:30:54,622 --> 00:30:57,663
so that all edge cases can be handled

655
00:30:57,663 --> 00:30:59,284
with all the various bailout scenarios.

656
00:31:01,032 --> 00:31:03,653
So let's say you were giving some wood

657
00:31:03,653 --> 00:31:05,134
to a construction project in the valley.

658
00:31:05,134 --> 00:31:11,437
You'd say, okay, I've subtracted 10 wood and sent it off.

659
00:31:11,437 --> 00:31:13,617
But it needs to come back and you need to get

660
00:31:13,617 --> 00:31:16,859
that 10 wood back again.

661
00:31:16,859 --> 00:31:19,300
Or a menu might pop up and you need to get rid of the menu

662
00:31:19,300 --> 00:31:20,940
or change the state of the menu completely.

663
00:31:22,475 --> 00:31:24,637
So often this sort of stuff is not trivial to write,

664
00:31:24,637 --> 00:31:26,798
and when you're dealing with a small team

665
00:31:26,798 --> 00:31:28,219
and you've got a lot of features you want to build

666
00:31:28,219 --> 00:31:31,942
and a lot of sub-features within those features,

667
00:31:31,942 --> 00:31:37,367
this consumes a lot of time, and it's wasted effort.

668
00:31:37,367 --> 00:31:40,670
So we decided to improve this.

669
00:31:40,670 --> 00:31:43,332
What we did was we adopted a resimulation-based approach.

670
00:31:43,332 --> 00:31:47,275
If you've ever written any multiplayer tech before,

671
00:31:47,275 --> 00:31:48,336
you'd probably be familiar with.

672
00:31:48,959 --> 00:31:52,900
this way of doing things where the clients run ahead of the server

673
00:31:52,900 --> 00:31:55,942
and kind of just assume immediately that their own actions work.

674
00:31:55,942 --> 00:32:00,323
And then if something changes in their assumptions,

675
00:32:00,323 --> 00:32:03,164
then they rewind back and then re-predict,

676
00:32:03,164 --> 00:32:05,965
re-simulate again to the current time

677
00:32:05,965 --> 00:32:09,086
and try and do it so quickly that the client, the player never notices.

678
00:32:09,086 --> 00:32:12,468
So here we changed it so that the server would be running

679
00:32:12,468 --> 00:32:16,669
all of the villages and the valley in each valley synchronously.

680
00:32:19,374 --> 00:32:22,715
The clients will be running slightly ahead of the server,

681
00:32:22,715 --> 00:32:24,696
and we made it so the clients could rewind

682
00:32:24,696 --> 00:32:26,216
to the last known good state and re-simulate.

683
00:32:26,216 --> 00:32:31,398
So the server here is validating and applying actions

684
00:32:31,398 --> 00:32:34,839
against the village and the whole valley at the same time.

685
00:32:34,839 --> 00:32:36,200
So everything's in lockstep,

686
00:32:36,200 --> 00:32:37,540
moving together one step at a time.

687
00:32:37,540 --> 00:32:42,602
So advantages of this, we no longer needed

688
00:32:42,602 --> 00:32:46,163
any error resolution or rollback required.

689
00:32:46,163 --> 00:32:48,164
It was inherent in the way the system works.

690
00:32:49,392 --> 00:32:50,892
we need validation and execution.

691
00:32:50,892 --> 00:32:55,275
So our action class that we had defined before,

692
00:32:55,275 --> 00:32:56,676
the number of functions to implement

693
00:32:56,676 --> 00:32:57,936
drops to basically validate,

694
00:32:57,936 --> 00:32:59,657
validate with the village,

695
00:32:59,657 --> 00:33:02,359
validate with the village and the valley and execute.

696
00:33:04,998 --> 00:33:08,220
This is a very robust way of doing things,

697
00:33:08,220 --> 00:33:10,182
because the server state is really well-defined

698
00:33:10,182 --> 00:33:11,062
at any point in time.

699
00:33:11,062 --> 00:33:15,305
The server's got, in one instance, in one thread,

700
00:33:15,305 --> 00:33:18,428
it's got all of the villages in their current state

701
00:33:18,428 --> 00:33:21,490
all at the same tick, the valley at the same tick,

702
00:33:21,490 --> 00:33:23,471
and all of the actions that it's going to have to execute

703
00:33:23,471 --> 00:33:26,314
in the future.

704
00:33:26,314 --> 00:33:29,036
In this case, as I said before, error resolution

705
00:33:29,036 --> 00:33:32,378
as predictions can be handled universally in most cases.

706
00:33:32,378 --> 00:33:34,500
Not all the time, but.

707
00:33:34,747 --> 00:33:36,908
most things can just drop out of this architecture.

708
00:33:36,908 --> 00:33:41,250
I wouldn't necessarily recommend this architecture for every kind of game.

709
00:33:41,250 --> 00:33:44,391
I wouldn't do it in an action game,

710
00:33:44,391 --> 00:33:48,412
but it's good for this sort of slow-paced game.

711
00:33:48,412 --> 00:33:55,875
The disadvantages of this meant that we were going to have to

712
00:33:55,875 --> 00:33:58,196
store a lot more stuff in one thread and run a lot more stuff

713
00:33:58,196 --> 00:34:00,357
in a timely manner on the server than ever before.

714
00:34:01,471 --> 00:34:04,812
and the client needs to store this history information

715
00:34:04,812 --> 00:34:08,154
and be able to rewind and fast forward again

716
00:34:08,154 --> 00:34:12,776
without the player ever noticing.

717
00:34:12,776 --> 00:34:17,858
Some UI scenarios still need very careful handling.

718
00:34:17,858 --> 00:34:19,459
You might have a dramatic change in state

719
00:34:19,459 --> 00:34:20,679
based on the misprediction.

720
00:34:20,679 --> 00:34:23,801
You might have your menu up with,

721
00:34:23,801 --> 00:34:26,062
you know, you've selected that task to do

722
00:34:26,062 --> 00:34:27,362
and you've started doing it,

723
00:34:27,362 --> 00:34:29,643
and then suddenly you don't have that task anymore

724
00:34:29,643 --> 00:34:31,324
and all of that needs to be able to clean itself up.

725
00:34:33,220 --> 00:34:39,243
Which actually, if you switch to more like polling style UI,

726
00:34:39,243 --> 00:34:41,384
a lot of these problems kind of go away.

727
00:34:41,384 --> 00:34:44,145
As long as your polling UI can handle

728
00:34:44,145 --> 00:34:48,327
any random change in state, more like a true thin client,

729
00:34:48,327 --> 00:34:50,548
then it works quite well.

730
00:34:53,243 --> 00:34:55,084
And we also found we need to avoid direct callbacks

731
00:34:55,084 --> 00:34:56,264
from logic code to client code.

732
00:34:56,264 --> 00:34:58,785
In the past we've often had it so that

733
00:34:58,785 --> 00:34:59,705
you wanna play a sound, okay cool,

734
00:34:59,705 --> 00:35:01,786
there's a callback from the logic to the client

735
00:35:01,786 --> 00:35:04,906
and then the client plays the sound.

736
00:35:04,906 --> 00:35:07,547
But now if we were to do that exact same way

737
00:35:07,547 --> 00:35:10,488
with resimulation, then while you're resimulating

738
00:35:10,488 --> 00:35:12,428
you might play that sound a whole bunch of times.

739
00:35:16,247 --> 00:35:19,489
So this actually proved out to be a great success.

740
00:35:19,489 --> 00:35:21,770
We were able to develop the systems

741
00:35:21,770 --> 00:35:24,092
that we were trying to develop much more rapidly

742
00:35:24,092 --> 00:35:27,754
than we could in the past.

743
00:35:27,754 --> 00:35:29,915
We're talking weeks instead of months

744
00:35:29,915 --> 00:35:33,176
compared to the way we would have done things

745
00:35:33,176 --> 00:35:35,798
if we were doing them in Clash of Clans.

746
00:35:35,798 --> 00:35:37,879
We only needed a single programmer per feature.

747
00:35:40,282 --> 00:35:48,247
Which was really cool because I can think of one time during the project where we had a brainstorming session coming up with some cool ideas.

748
00:35:48,247 --> 00:35:57,432
And we had this idea of this trade relations with different ships going out, like maintaining a relationship with different other countries.

749
00:35:59,627 --> 00:36:04,668
At the same time, this other feature of challenges or events that would pop up in your land and

750
00:36:04,668 --> 00:36:07,109
you'd work together to resolve them.

751
00:36:07,109 --> 00:36:11,711
So both of these are relatively complicated features when you dig into all of the different

752
00:36:11,711 --> 00:36:13,211
things there.

753
00:36:13,211 --> 00:36:17,472
And we were able to do them with one programmer on each of those features, get the first versions

754
00:36:17,472 --> 00:36:19,513
that were ready for a proper play test in a couple of weeks.

755
00:36:19,513 --> 00:36:22,914
Most of that time was actually just implementing UIs.

756
00:36:26,191 --> 00:36:28,612
And well, if you've been in the games industry

757
00:36:28,612 --> 00:36:30,352
for any length of time, you know by now

758
00:36:30,352 --> 00:36:32,372
that iteration time is key,

759
00:36:32,372 --> 00:36:35,573
especially if you've got a small team like ours,

760
00:36:35,573 --> 00:36:36,693
where at the time, I think we only had

761
00:36:36,693 --> 00:36:38,594
three client programmers on the game,

762
00:36:38,594 --> 00:36:42,755
and one of them was focusing on rendering technology.

763
00:36:42,755 --> 00:36:44,695
It's really important to keep up that momentum

764
00:36:44,695 --> 00:36:49,216
and test out the new features as fast as possible.

765
00:36:49,216 --> 00:36:49,796
Fail fast.

766
00:36:49,796 --> 00:36:53,577
All right.

767
00:36:57,812 --> 00:36:58,312
He's so cute.

768
00:36:58,312 --> 00:37:05,279
So performance, we've got a problem here.

769
00:37:05,279 --> 00:37:08,182
We've got 10 villages, and we're gonna have

770
00:37:08,182 --> 00:37:10,844
hundreds of thousands of objects per village.

771
00:37:10,844 --> 00:37:14,268
In fact, I was just debugging one village the other day

772
00:37:14,268 --> 00:37:16,510
which had 2,565 decorations in it.

773
00:37:20,610 --> 00:37:24,451
We've got this complex flow-based logic

774
00:37:24,451 --> 00:37:26,771
where you can't just fast-forward a timer,

775
00:37:26,771 --> 00:37:28,131
like many of our other games.

776
00:37:28,131 --> 00:37:30,892
Instead, you have to wait for one worker

777
00:37:30,892 --> 00:37:32,312
to bring something to the storage

778
00:37:32,312 --> 00:37:34,352
and the other worker to come and get it.

779
00:37:34,352 --> 00:37:35,773
That whole process needs to go through.

780
00:37:35,773 --> 00:37:40,954
So performance was definitely going to be an issue.

781
00:37:40,954 --> 00:37:44,034
So for rendering, we chose to actually render our villages

782
00:37:44,034 --> 00:37:47,415
to texture imposters, so we loaded the whole village.

783
00:37:48,245 --> 00:37:51,885
rather than trying to load the sub-objects in the village,

784
00:37:51,885 --> 00:37:53,946
instead just load the whole village.

785
00:37:53,946 --> 00:37:56,306
As you zoom out, swap to rendering it to a Texture,

786
00:37:56,306 --> 00:37:57,126
and then stagger the imposter updates.

787
00:37:57,126 --> 00:38:02,007
Because once you've zoomed out, especially on a phone screen,

788
00:38:02,007 --> 00:38:05,548
those villages are now so small on the screen

789
00:38:05,548 --> 00:38:08,828
that that one little villager walking around,

790
00:38:08,828 --> 00:38:11,369
we're talking sub-pixel changes here.

791
00:38:11,369 --> 00:38:12,689
So we can easily just make it

792
00:38:12,689 --> 00:38:15,009
so that we only render one village at a time,

793
00:38:15,009 --> 00:38:17,130
one village per frame to a Texture.

794
00:38:18,508 --> 00:38:24,811
and maintain the illusion that we're running all of the villages all of the time.

795
00:38:24,811 --> 00:38:29,154
And then we made a lot of effort to make it so a near seamless transition between them.

796
00:38:29,154 --> 00:38:34,136
Here's a video of that taking place. So here I'm zooming out from my village.

797
00:38:36,767 --> 00:38:39,868
and zooming into another village.

798
00:38:39,868 --> 00:38:42,110
If you know what to look for, you can spot it.

799
00:38:42,110 --> 00:38:44,891
You can see the grass change shade a little bit there.

800
00:38:44,891 --> 00:38:48,413
Still some more work to do to make that really, really good.

801
00:38:48,413 --> 00:38:51,975
But you also see these objects that are scaling up and down,

802
00:38:51,975 --> 00:38:54,317
and that's actually nothing to do with this transition.

803
00:38:54,317 --> 00:38:56,758
That's actually to do with,

804
00:38:56,758 --> 00:38:58,379
we felt that when we were drawing them as

805
00:38:58,887 --> 00:39:01,168
the normal scale of objects,

806
00:39:01,168 --> 00:39:03,069
but when we zoomed out, it looked too noisy.

807
00:39:03,069 --> 00:39:05,791
It just didn't look quite right,

808
00:39:05,791 --> 00:39:08,393
so we went for this more iconified version of the village

809
00:39:08,393 --> 00:39:13,336
as you zoom out.

810
00:39:13,336 --> 00:39:14,597
So what about logic optimization?

811
00:39:14,597 --> 00:39:17,099
Obviously, we're running a lot of villages

812
00:39:17,099 --> 00:39:18,640
at once on the server,

813
00:39:18,640 --> 00:39:21,042
and we need to be able to rerun the logic

814
00:39:21,042 --> 00:39:23,243
quite often on the client.

815
00:39:23,243 --> 00:39:24,764
So our gameplay is relatively slow.

816
00:39:25,677 --> 00:39:27,439
So we found that we could actually reduce

817
00:39:27,439 --> 00:39:30,863
our logic tick rate from 25 hertz to five hertz

818
00:39:30,863 --> 00:39:36,110
and the player wouldn't notice any difference at all.

819
00:39:36,110 --> 00:39:36,431
Of course.

820
00:39:37,435 --> 00:39:39,577
Response time is definitely an issue there,

821
00:39:39,577 --> 00:39:41,178
where if you initiate an action,

822
00:39:41,178 --> 00:39:42,579
you might get up to 200 milliseconds of latency

823
00:39:42,579 --> 00:39:44,401
before the action actually starts to happen.

824
00:39:44,401 --> 00:39:48,244
So to get rid of that, basically the client just,

825
00:39:48,244 --> 00:39:50,065
as soon as you've done an action,

826
00:39:50,065 --> 00:39:51,846
just jump ahead in time to the next tick,

827
00:39:51,846 --> 00:39:55,509
and then that extra that you've accumulated,

828
00:39:55,509 --> 00:39:57,090
just ease it out over a few frames,

829
00:39:57,090 --> 00:40:00,953
and long enough that you don't really notice

830
00:40:00,953 --> 00:40:02,435
the speeding up and slowing down of the gameplay,

831
00:40:02,435 --> 00:40:04,316
but it still maintains the illusion

832
00:40:04,316 --> 00:40:05,837
that your actions are happening immediately.

833
00:40:07,433 --> 00:40:13,114
made the client interpolate logical state as necessary.

834
00:40:13,114 --> 00:40:15,894
And that worked pretty well.

835
00:40:15,894 --> 00:40:16,815
It's 1 1 5th already.

836
00:40:16,815 --> 00:40:21,716
So then we moved to trying to ensure

837
00:40:21,716 --> 00:40:26,096
that our update functions could be deterministic

838
00:40:26,096 --> 00:40:30,017
with a variable update length.

839
00:40:30,017 --> 00:40:33,018
So we could update the world tick by tick for 30 ticks.

840
00:40:33,018 --> 00:40:34,818
We go tick, tick, tick, tick, tick, tick, tick,

841
00:40:34,818 --> 00:40:37,218
and that would be your state at the end.

842
00:40:37,952 --> 00:40:41,157
Or we could update 30 ticks in one update call,

843
00:40:41,157 --> 00:40:43,480
update 30 instead of update one.

844
00:40:43,480 --> 00:40:46,764
And here we want to make sure that our state at the end

845
00:40:46,764 --> 00:40:49,688
with update 30 is exactly the same as the state

846
00:40:49,688 --> 00:40:50,449
if you go tick by tick.

847
00:40:51,382 --> 00:40:54,522
Now we probably do this a little bit differently

848
00:40:54,522 --> 00:40:56,843
if we were to be doing this from the very beginning,

849
00:40:56,843 --> 00:40:59,163
but this was a retrofit system,

850
00:40:59,163 --> 00:41:01,844
so we already had a lot of code,

851
00:41:01,844 --> 00:41:03,544
so we had to make the choice of

852
00:41:03,544 --> 00:41:05,224
doing it a little bit differently.

853
00:41:05,224 --> 00:41:08,285
So what we did was we allowed any object or system

854
00:41:08,285 --> 00:41:11,145
to declare how many ticks that they can update for,

855
00:41:11,145 --> 00:41:12,866
deterministically.

856
00:41:12,866 --> 00:41:16,547
We call this the max fast forward ticks.

857
00:41:17,647 --> 00:41:20,148
we found that many objects can actually just skip

858
00:41:20,148 --> 00:41:21,388
their updates for multiple seconds at a time,

859
00:41:21,388 --> 00:41:23,629
so even up to hundreds of ticks,

860
00:41:23,629 --> 00:41:25,129
they could just fast-forward over that whole thing,

861
00:41:25,129 --> 00:41:26,870
one function call, update.

862
00:41:26,870 --> 00:41:30,752
We had to reorganize some of our things like pathfinding

863
00:41:30,752 --> 00:41:33,613
and villager movement so that that wasn't a tick-by-tick

864
00:41:33,613 --> 00:41:36,114
update, instead it was just jump forward in time.

865
00:41:36,114 --> 00:41:41,836
So we made it so the client would step tick-by-tick

866
00:41:41,836 --> 00:41:43,616
to maintain the smooth gameplay,

867
00:41:43,616 --> 00:41:47,158
and the server could fast-forward villages forward.

868
00:41:49,277 --> 00:41:51,818
And this was really awesome.

869
00:41:51,818 --> 00:41:54,320
I mean, this is a conservative number here,

870
00:41:54,320 --> 00:41:56,281
but it actually reduced server load

871
00:41:56,281 --> 00:41:58,183
by something like 80 to 90%.

872
00:41:58,183 --> 00:41:59,884
And here we're talking about,

873
00:41:59,884 --> 00:42:03,086
compared to like a Clash of Clans village.

874
00:42:03,086 --> 00:42:07,449
So even though we're running 10 villages at once,

875
00:42:07,449 --> 00:42:10,471
we're still like 1 10th the cost on server side

876
00:42:10,471 --> 00:42:12,332
of running a single Clash of Clans village.

877
00:42:12,332 --> 00:42:12,972
It also let us do things like,

878
00:42:16,928 --> 00:42:19,209
The off-screen villages on the client,

879
00:42:19,209 --> 00:42:23,051
we could just not update them or update them less often

880
00:42:23,051 --> 00:42:24,771
and just fast-forward them up,

881
00:42:24,771 --> 00:42:28,012
which was a really good speed improvement on the client.

882
00:42:28,012 --> 00:42:31,834
But of course, you might ask, how do we guarantee

883
00:42:31,834 --> 00:42:34,715
that everything is going to be deterministic?

884
00:42:34,715 --> 00:42:37,096
So we can then take advantage of this ability

885
00:42:37,096 --> 00:42:39,136
to run a background copy of the village.

886
00:42:39,136 --> 00:42:43,298
So we can run background verification.

887
00:42:44,323 --> 00:42:47,305
load up an older version of the village,

888
00:42:47,305 --> 00:42:48,967
fast forward it to now from that older state,

889
00:42:48,967 --> 00:42:50,868
and then compare to now, and assert that they're the same.

890
00:42:50,868 --> 00:42:54,351
If they're not, we can save an error trace,

891
00:42:54,351 --> 00:42:57,334
a JSON file with the last known good state,

892
00:42:57,334 --> 00:43:00,577
and then we can then load that up into a debug client,

893
00:43:00,577 --> 00:43:03,579
run it forward, and repeat over and over again

894
00:43:03,579 --> 00:43:05,261
the situation that's not deterministic,

895
00:43:05,261 --> 00:43:06,241
and find a way to fix it.

896
00:43:08,657 --> 00:43:12,240
And servers, debug servers can also save traces out

897
00:43:12,240 --> 00:43:13,782
when these situations are detected.

898
00:43:13,782 --> 00:43:16,025
So when we're testing, we can catch any really weird cases.

899
00:43:16,025 --> 00:43:20,129
So with guaranteed determinism

900
00:43:20,129 --> 00:43:21,831
and decoupled logic execution.

901
00:43:23,332 --> 00:43:24,752
We can do all sorts of cool stuff,

902
00:43:24,752 --> 00:43:27,074
like store replay traces for bug testing.

903
00:43:27,074 --> 00:43:29,575
We can do regression testing where we just download

904
00:43:29,575 --> 00:43:31,656
all of the villages from the database

905
00:43:31,656 --> 00:43:35,358
and simulate them before and after any big system changes

906
00:43:35,358 --> 00:43:37,039
and assert that we have the same results.

907
00:43:37,039 --> 00:43:38,460
Say, change pathfinding.

908
00:43:38,460 --> 00:43:40,701
We still want the results to be comparable.

909
00:43:40,701 --> 00:43:47,505
And all sorts of other systems can be validated

910
00:43:47,505 --> 00:43:50,206
in background threads while playing.

911
00:43:50,206 --> 00:43:52,688
We also built AI logic that can play the game.

912
00:43:53,783 --> 00:43:56,186
At first, that was just on the client side to simulate

913
00:43:56,186 --> 00:43:58,748
when you've got other players in the game with you.

914
00:43:58,748 --> 00:44:00,670
But actually, we then realized, oh, yeah,

915
00:44:00,670 --> 00:44:03,472
we could actually just port this over to our logic code base,

916
00:44:03,472 --> 00:44:06,895
and we could also port our client synchronization logic

917
00:44:06,895 --> 00:44:09,057
over to the logic code base, too,

918
00:44:09,057 --> 00:44:11,500
and then we could just make server code

919
00:44:11,500 --> 00:44:13,261
that can connect to a load test environment

920
00:44:13,261 --> 00:44:16,624
and play the game, spawn thousands of bots,

921
00:44:16,624 --> 00:44:18,966
and gather a bunch of balance and stability data for us.

922
00:44:23,879 --> 00:44:25,420
This was actually really useful for isolating

923
00:44:25,420 --> 00:44:27,742
some of these really rare bugs you get sometimes

924
00:44:27,742 --> 00:44:31,405
with these games.

925
00:44:31,405 --> 00:44:34,028
And a real help because it was a very complex game

926
00:44:34,028 --> 00:44:39,312
with many, many systems that all work together.

927
00:44:39,312 --> 00:44:44,417
So in the result, we achieved our dreams, mostly.

928
00:44:44,417 --> 00:44:45,377
The game is now in soft launch.

929
00:44:45,377 --> 00:44:46,558
We'll see what the future holds,

930
00:44:46,558 --> 00:44:49,261
but even if it doesn't make it to global,

931
00:44:49,261 --> 00:44:52,563
the tech will live on. So key takeaways here.

932
00:44:53,380 --> 00:44:55,040
Dream big, but go in with your eyes open.

933
00:44:55,040 --> 00:44:57,021
It's not necessarily going to be easy

934
00:44:57,021 --> 00:44:59,922
to achieve these big dreams,

935
00:44:59,922 --> 00:45:01,082
but you can achieve them,

936
00:45:01,082 --> 00:45:04,184
and you may get all sorts of side benefits along the way,

937
00:45:04,184 --> 00:45:04,844
technical improvements.

938
00:45:04,844 --> 00:45:06,544
We've got better tools for our future games.

939
00:45:06,544 --> 00:45:10,486
Investment in new tech usually does pay off.

940
00:45:10,486 --> 00:45:13,147
So, yeah.

941
00:45:13,147 --> 00:45:14,647
Hopefully, this talk has inspired you

942
00:45:14,647 --> 00:45:17,669
to maybe tackle your own lofty game design goals.

943
00:45:17,669 --> 00:45:18,749
Dream big.

944
00:45:18,749 --> 00:45:20,390
I want to see some cool games out there.

945
00:45:20,390 --> 00:45:22,090
Thanks for coming.

946
00:45:22,681 --> 00:45:24,581
Please remember to give the feedback, we're hiring.

947
00:45:24,581 --> 00:45:26,102
Any questions?

948
00:45:26,102 --> 00:45:36,745
Thank you.

949
00:45:36,745 --> 00:45:40,266
You were talking about this discussion you guys had

950
00:45:40,266 --> 00:45:42,947
about the trading systems in which you like, you know,

951
00:45:42,947 --> 00:45:43,747
the trading systems,

952
00:45:43,747 --> 00:45:46,548
where you're talking about like the developers

953
00:45:46,548 --> 00:45:49,648
went off and they worked on one feature each, et cetera, right?

954
00:45:50,717 --> 00:45:53,517
Were the developers directly involved in that conversation

955
00:45:53,517 --> 00:45:54,557
in terms of the design itself?

956
00:45:54,557 --> 00:45:55,558
Oh yeah, absolutely.

957
00:45:55,558 --> 00:45:56,578
Every step of the way.

958
00:45:56,578 --> 00:45:58,538
When you're working with a small team,

959
00:45:58,538 --> 00:46:01,239
like having that kind of level of buy-in

960
00:46:01,239 --> 00:46:03,720
and everybody being involved with as many of the things

961
00:46:03,720 --> 00:46:05,040
that they work on as possible,

962
00:46:05,040 --> 00:46:07,700
it's like, it just saves so much time.

963
00:46:07,700 --> 00:46:09,001
It's for motivation.

964
00:46:09,001 --> 00:46:10,321
Absolutely, yeah.

965
00:46:10,321 --> 00:46:10,961
Thank you.

966
00:46:10,961 --> 00:46:12,922
Yeah, thank you.

967
00:46:12,922 --> 00:46:14,102
Hey Tristan.

968
00:46:14,102 --> 00:46:14,422
Hey.

969
00:46:14,422 --> 00:46:16,082
A question on the zooming.

970
00:46:16,082 --> 00:46:17,943
You were talking about how you did a lot

971
00:46:17,943 --> 00:46:19,403
of different approaches to the zooming.

972
00:46:19,403 --> 00:46:20,143
How did you?

973
00:46:20,714 --> 00:46:24,558
think about what size was too small and too large and when to do the swapping

974
00:46:24,558 --> 00:46:29,043
because that's a problem and you know it looks really good on the big screen but how do you

975
00:46:29,043 --> 00:46:32,266
approach that with the variety of screen sizes that you're dealing with on your game.

976
00:46:32,266 --> 00:46:34,448
We tried a whole lot of different screen sizes.

977
00:46:35,561 --> 00:46:36,641
Lots of experimentation.

978
00:46:36,641 --> 00:46:38,742
We tried many different iterations,

979
00:46:38,742 --> 00:46:41,003
and I think there's probably still iterating,

980
00:46:41,003 --> 00:46:43,184
the artists are probably still iterating on those,

981
00:46:43,184 --> 00:46:45,626
you know, scaling up and scaling down things I was showing.

982
00:46:45,626 --> 00:46:47,787
It's a constant process, but, you know,

983
00:46:47,787 --> 00:46:50,028
it's, everything can always be improved.

984
00:46:50,028 --> 00:46:51,908
Lots of iteration, like you're talking,

985
00:46:51,908 --> 00:46:54,430
just a lot of play testing just to get that feel.

986
00:46:54,430 --> 00:46:56,510
Lots of play testing to get that feel right.

987
00:46:56,510 --> 00:46:57,691
Yeah, absolutely.

988
00:46:57,691 --> 00:46:59,252
And everyone on the team is playing the game,

989
00:46:59,252 --> 00:47:01,473
so, like, it's, it's,

990
00:47:01,713 --> 00:47:03,674
You get the build out and everyone's like,

991
00:47:03,674 --> 00:47:05,495
oh yeah, that looks pretty good.

992
00:47:05,495 --> 00:47:07,036
Gives feedback to the guy.

993
00:47:07,036 --> 00:47:08,837
Off you go, try again.

994
00:47:08,837 --> 00:47:09,297
Thank you.

995
00:47:09,297 --> 00:47:11,158
No problem.

996
00:47:11,158 --> 00:47:13,659
When working on something that was so experimental

997
00:47:13,659 --> 00:47:16,181
for so long, how did you balance between

998
00:47:16,181 --> 00:47:20,423
iterations for the experimental stuff

999
00:47:20,423 --> 00:47:22,804
and just play it with such a small team,

1000
00:47:22,804 --> 00:47:26,546
just plain old housekeeping, keeping APIs up to date,

1001
00:47:26,546 --> 00:47:29,288
all the stuff you need to make sure

1002
00:47:29,288 --> 00:47:31,469
you don't get kicked off the Play Store.

1003
00:47:31,930 --> 00:47:40,192
Yeah, fantastic question. Yeah, I'd like to say that we have a silver bullet for that,

1004
00:47:40,192 --> 00:47:47,215
but it's just using some common sense and usually if you've got a good bunch of developers that are

1005
00:47:47,215 --> 00:47:50,796
really close to the game and know what's going around them, they usually make good decisions

1006
00:47:50,796 --> 00:47:53,117
without actually needing sort of any...

1007
00:47:54,702 --> 00:47:57,283
any overarching philosophy to be applied.

1008
00:47:57,283 --> 00:48:03,087
It's kind of, we have a bit of a saying in the company

1009
00:48:03,087 --> 00:48:06,489
of like, supercell first.

1010
00:48:06,489 --> 00:48:07,370
Or we have had that.

1011
00:48:07,370 --> 00:48:09,491
So sort of like, make a decision

1012
00:48:09,491 --> 00:48:11,353
that's gonna be good for the company

1013
00:48:11,353 --> 00:48:12,774
and not necessarily good for my,

1014
00:48:12,774 --> 00:48:14,795
getting my jollies by doing another iteration

1015
00:48:14,795 --> 00:48:16,696
and something, cause I'd be really cool if I did that.

1016
00:48:16,696 --> 00:48:19,678
But like, actually, does that really add something?

1017
00:48:19,678 --> 00:48:20,839
Am I really adding value here?

1018
00:48:24,020 --> 00:48:26,020
Just a different question.

1019
00:48:26,020 --> 00:48:29,001
In terms of determinism, how did you guarantee

1020
00:48:29,001 --> 00:48:32,642
that across all devices and all different CPU architectures

1021
00:48:32,642 --> 00:48:35,903
that the same code would result in the exact same result?

1022
00:48:35,903 --> 00:48:38,444
Yeah, it's a great question.

1023
00:48:38,444 --> 00:48:42,185
And actually, it's even more complicated than that

1024
00:48:42,185 --> 00:48:46,206
because our servers are Java, and our clients are C++.

1025
00:48:46,206 --> 00:48:47,246
So we actually do it all in fixed point.

1026
00:48:47,246 --> 00:48:48,426
No floating points allowed in logic code.

1027
00:48:48,426 --> 00:48:48,966
No floating points allowed.

1028
00:48:48,966 --> 00:48:51,867
So once you're in fixed point, there's

1029
00:48:52,718 --> 00:48:54,919
There are some really interesting edge cases

1030
00:48:54,919 --> 00:48:56,040
in fixed point overflows,

1031
00:48:56,040 --> 00:48:58,661
especially we found a few new ones with the M1,

1032
00:48:58,661 --> 00:49:04,285
the new M1 CPUs that we had to manually figure out

1033
00:49:04,285 --> 00:49:06,926
in some of our core libraries, but yeah.

1034
00:49:06,926 --> 00:49:08,747
Because of the tablet, not because of the laptop.

1035
00:49:09,424 --> 00:49:10,764
The laptop, actually.

1036
00:49:10,764 --> 00:49:12,725
It plays on the laptop?

1037
00:49:12,725 --> 00:49:15,485
Yeah, the M1s you've used in the iOS,

1038
00:49:15,485 --> 00:49:18,506
they handle a certain kind of overflow slightly differently.

1039
00:49:18,506 --> 00:49:18,666
Okay.

1040
00:49:18,666 --> 00:49:20,667
Because it's like undefined in C++,

1041
00:49:20,667 --> 00:49:22,427
that particular behavior.

1042
00:49:22,427 --> 00:49:24,367
So fixed point mostly solves the issue?

1043
00:49:24,367 --> 00:49:24,768
Fixed point, yep.

1044
00:49:24,768 --> 00:49:25,208
Thank you.

1045
00:49:25,208 --> 00:49:28,128
And when you're testing it on your computers,

1046
00:49:28,128 --> 00:49:33,790
so you log the state to replay it if a player reported it

1047
00:49:33,790 --> 00:49:36,490
or, you know, it automatically logged it,

1048
00:49:36,490 --> 00:49:38,331
and on your computers it runs the exact same?

1049
00:49:38,331 --> 00:49:38,911
Yep, absolutely.

1050
00:49:38,911 --> 00:49:39,171
Thank you.

1051
00:49:39,171 --> 00:49:39,271
Yep.

1052
00:49:39,471 --> 00:49:39,791
No problem.

1053
00:49:39,791 --> 00:49:45,598
Ask a quick question.

1054
00:49:45,598 --> 00:49:48,622
So when you were talking about the server architecture,

1055
00:49:48,622 --> 00:49:50,224
you talked about how you re-architected it

1056
00:49:50,224 --> 00:49:51,365
a couple of times.

1057
00:49:51,365 --> 00:49:53,648
On the client side, it also sounds like you guys

1058
00:49:53,648 --> 00:49:55,810
did several refactors.

1059
00:49:56,083 --> 00:49:58,265
How do you guys think about that in your planning process?

1060
00:49:58,265 --> 00:50:01,186
Because at the same time you're talking about building out prototypes very

1061
00:50:01,186 --> 00:50:03,347
quickly in like a one week turnaround.

1062
00:50:03,347 --> 00:50:06,409
And how do you balance what needs to get built out quickly versus when

1063
00:50:06,409 --> 00:50:08,250
something needs to be refactored?

1064
00:50:08,250 --> 00:50:11,211
Because it feels like, at least from my experience, a lot of time refactoring

1065
00:50:11,211 --> 00:50:15,713
gets cut because it's not necessary to ship it does help the product, but.

1066
00:50:15,854 --> 00:50:17,735
Just want to hear your thought process on that.

1067
00:50:17,735 --> 00:50:19,917
Yeah, that's a really good question.

1068
00:50:19,917 --> 00:50:21,399
Again, I don't have a silver bullet for that one.

1069
00:50:21,399 --> 00:50:23,560
I have a personal philosophy on that one,

1070
00:50:23,560 --> 00:50:26,523
that once I'm copying and pasting a bit of code

1071
00:50:26,523 --> 00:50:28,545
more than three times, or three times or more,

1072
00:50:28,545 --> 00:50:32,649
I start to refactor to combine them.

1073
00:50:32,649 --> 00:50:34,590
And then it comes down to a lot of

1074
00:50:34,590 --> 00:50:37,493
just thinking about what's right.

1075
00:50:39,658 --> 00:50:42,600
Actually, some of the refactoring, like for example,

1076
00:50:42,600 --> 00:50:45,282
the second pass on the way the actions worked

1077
00:50:45,282 --> 00:50:45,962
for the shared logic,

1078
00:50:45,962 --> 00:50:49,544
was probably twiddled my thumbs about it a bit too long

1079
00:50:49,544 --> 00:50:51,986
before I started on that.

1080
00:50:51,986 --> 00:50:53,487
I wish I had done it sooner,

1081
00:50:53,487 --> 00:50:55,408
because I kind of like, it was bugging me

1082
00:50:55,408 --> 00:50:57,230
that this is still tedious, this is annoying

1083
00:50:57,230 --> 00:50:59,471
to do this stuff, and then eventually bit the bullet,

1084
00:50:59,471 --> 00:50:59,931
like, okay.

1085
00:51:00,896 --> 00:51:02,758
Scrap this, re-architect the server a bit,

1086
00:51:02,758 --> 00:51:05,061
so there's a re-simulation instead.

1087
00:51:05,061 --> 00:51:06,463
And it was a bit of effort.

1088
00:51:06,463 --> 00:51:08,305
It was quite a lot of effort, but it totally paid off.

1089
00:51:08,305 --> 00:51:09,987
So we should have just done it earlier that way.

1090
00:51:10,657 --> 00:51:13,880
So it's a, it's an experience thing.

1091
00:51:13,880 --> 00:51:17,904
So when you go to your producer there and you're like, oh man, I have not refactored this.

1092
00:51:17,904 --> 00:51:21,447
I need to do this. It's going to take it. You may sound like a big effort, right?

1093
00:51:21,447 --> 00:51:25,251
So it also, you come into your producer and saying, oh man, I need to refactor this.

1094
00:51:25,251 --> 00:51:26,612
It may take another month, two months.

1095
00:51:26,612 --> 00:51:29,554
How do you work with that on the rest of the schedule?

1096
00:51:29,554 --> 00:51:35,140
Do you just say the schedule keeps pushing based off of that or do you guys look for trade-offs there?

1097
00:51:36,191 --> 00:51:40,752
Well, our producers are so close to the game, they kind of see a lot of these difficulties

1098
00:51:40,752 --> 00:51:45,334
and they kind of see that this feature is going to take a long time.

1099
00:51:45,334 --> 00:51:48,075
So it's kind of a matter of making that case of like, okay, this might take a couple of

1100
00:51:48,075 --> 00:51:52,937
months, but it's going to mean that we can iterate so much faster on our features.

1101
00:51:52,937 --> 00:51:56,518
And it's not everybody in the team that's stopped by this.

1102
00:51:56,518 --> 00:51:58,598
It's kind of maybe my work.

1103
00:51:59,291 --> 00:52:02,753
on the other things, slowed down for that time,

1104
00:52:02,753 --> 00:52:04,935
and then the system was completed.

1105
00:52:04,935 --> 00:52:07,116
I did the migration for the other guys

1106
00:52:07,116 --> 00:52:09,457
on all the work that they were continuing to do

1107
00:52:09,457 --> 00:52:11,058
while I was working on this in a branch,

1108
00:52:11,058 --> 00:52:13,500
and started moving on with the new tech.

1109
00:52:13,500 --> 00:52:15,661
So it comes down to helping your producer

1110
00:52:15,661 --> 00:52:17,643
understand the trade-offs,

1111
00:52:17,643 --> 00:52:19,344
and trying to be realistic with yourself

1112
00:52:19,344 --> 00:52:21,685
about what the trade-offs are going to be,

1113
00:52:21,685 --> 00:52:24,767
and trying to make good estimates.

1114
00:52:24,767 --> 00:52:25,288
Thank you.

1115
00:52:25,288 --> 00:52:25,688
Yeah, thank you.

1116
00:52:28,201 --> 00:52:32,023
Hi. So I was thinking about what you said at the beginning,

1117
00:52:32,023 --> 00:52:37,727
dreaming big about a game that is not necessarily about combat and more inclusive and avoiding the

1118
00:52:37,727 --> 00:52:42,790
frustration moments of seeing your base smashed in Clash of Clans.

1119
00:52:42,790 --> 00:52:43,090
Yep.

1120
00:52:43,090 --> 00:52:46,693
And I'm an avid player of Clash of Clans and I'm playing in Legends League now.

1121
00:52:46,693 --> 00:52:47,233
Sweet.

1122
00:52:47,233 --> 00:52:53,357
The most competitive league and I never see any more of my base smashed and I never lose

1123
00:52:53,357 --> 00:52:57,720
any more resources. So it kind of looks like backwards, right? Like...

1124
00:52:58,582 --> 00:53:12,432
Did you guys consider having this kind of behavior at the beginning of the game to avoid the frustration of seeing your base smashed while pushing it more in the more competitive phase of the game and in the end in the Legends League?

1125
00:53:12,633 --> 00:53:14,315
Yeah, that's a really good question.

1126
00:53:14,315 --> 00:53:16,917
And we definitely talk about things like that.

1127
00:53:16,917 --> 00:53:19,300
And we have talked about things like that.

1128
00:53:19,300 --> 00:53:22,082
Like, oh, should we have a competitive end game for the

1129
00:53:22,082 --> 00:53:23,324
game or something like that?

1130
00:53:23,324 --> 00:53:25,025
And that's all still quite open.

1131
00:53:25,025 --> 00:53:26,967
It's still pretty early days for the game.

1132
00:53:26,967 --> 00:53:28,549
And maybe that'll happen someday.

1133
00:53:28,549 --> 00:53:31,252
Not sure yet.

1134
00:53:31,252 --> 00:53:32,673
But actually, very early on, I had this

1135
00:53:33,203 --> 00:53:37,428
extra dream, which is one of the ones that didn't quite get realized, which is that maybe

1136
00:53:37,428 --> 00:53:41,031
it's kind of, maybe both can coexist in the same world.

1137
00:53:41,031 --> 00:53:45,896
People that are into combat and people that aren't, and that they all help each other

1138
00:53:45,896 --> 00:53:46,116
still.

1139
00:53:46,116 --> 00:53:49,879
Maybe one day we'll have something like that, but yeah, cool question.

1140
00:53:49,879 --> 00:53:51,981
And congrats on Legends League, that's awesome.

1141
00:53:53,825 --> 00:54:00,252
My question was actually quite similar because most of the other games are competitive games

1142
00:54:00,252 --> 00:54:04,737
So it's just like have you learned something from the players playing it so far?

1143
00:54:04,737 --> 00:54:11,885
And do they fall off because there's not like a good game loop there or what have you learned from so far?

1144
00:54:12,479 --> 00:54:13,440
It seems to really resonate so far.

1145
00:54:13,440 --> 00:54:17,882
It seems like there's a lot of people that have been hanging out for a game like this,

1146
00:54:17,882 --> 00:54:23,005
where you're just taking care, nurturing, taking care of your village without having too many worries.

1147
00:54:23,005 --> 00:54:26,667
It's quite amazing the feedback we've been getting from it.

1148
00:54:26,667 --> 00:54:28,268
I mean, the people who...

1149
00:54:29,147 --> 00:54:31,649
One big surprise was that we actually kind of expected

1150
00:54:31,649 --> 00:54:33,190
to find quite a different audience,

1151
00:54:33,190 --> 00:54:35,332
like quite a different category of people.

1152
00:54:35,332 --> 00:54:37,113
But surprisingly, there's heaps of people

1153
00:54:37,113 --> 00:54:39,355
who love to play Clash that also love to play Everdale,

1154
00:54:39,355 --> 00:54:42,257
precisely because of it being just chill,

1155
00:54:42,257 --> 00:54:43,998
which is kind of cool.

1156
00:54:43,998 --> 00:54:45,680
And if you really dig into it,

1157
00:54:45,680 --> 00:54:47,601
there's actually, you can open up graphs

1158
00:54:47,601 --> 00:54:50,764
and see what your resources are doing.

1159
00:54:50,764 --> 00:54:51,844
So if you want to, you can actually play it

1160
00:54:51,844 --> 00:54:52,785
in a really hardcore way.

1161
00:54:52,785 --> 00:54:54,687
I wouldn't recommend it.

1162
00:54:54,687 --> 00:54:57,028
I did that for a little while and it drove me a bit crazy,

1163
00:54:57,028 --> 00:54:57,208
but.

1164
00:54:58,075 --> 00:55:03,618
Have you seen if there is like more girls playing it or even different types of players?

1165
00:55:03,618 --> 00:55:08,941
We expected it to be a bit more female dominated audience,

1166
00:55:08,941 --> 00:55:11,943
but it's actually pretty, it's pretty even.

1167
00:55:11,943 --> 00:55:15,745
It's it's been really nice to see the figures about that sort of stuff.

1168
00:55:15,745 --> 00:55:17,626
But as I said, it's still early days.

1169
00:55:17,626 --> 00:55:18,847
It'll be interesting to see what happens.

1170
00:55:18,847 --> 00:55:24,250
Hopefully we can bring it to the US market as well and see what happens here too.

1171
00:55:24,250 --> 00:55:24,650
Thanks.

1172
00:55:27,433 --> 00:55:31,775
Hi, you talked about you had this big dream about designing a new type of game.

1173
00:55:31,775 --> 00:55:35,736
And we know humans are kind of unpredictable, so since launching the game,

1174
00:55:35,736 --> 00:55:41,918
did you guys see any strange behavior that players tend to do that diverge from the way

1175
00:55:41,918 --> 00:55:46,839
the game was intended to be played? Diverge from the way the game was intended to be played?

1176
00:55:46,839 --> 00:55:53,661
Yes, we did actually. We didn't expect to see so many people

1177
00:55:55,227 --> 00:55:58,609
wanting to play the kind of social side, how to put it,

1178
00:55:58,609 --> 00:56:00,851
kind of the administration of the social side

1179
00:56:00,851 --> 00:56:03,092
so differently than we expected.

1180
00:56:03,092 --> 00:56:05,354
So you may not be aware, but we had the game

1181
00:56:05,354 --> 00:56:07,776
in a soft, soft launch under a different name.

1182
00:56:08,687 --> 00:56:12,488
before and the players from that kind of behaved quite differently.

1183
00:56:12,488 --> 00:56:15,549
And as soon as we put it to soft launch with our brand on it,

1184
00:56:15,549 --> 00:56:18,050
we were a little bit surprised by how they behaved.

1185
00:56:18,050 --> 00:56:20,371
And it was really cool, it was a wake-up call

1186
00:56:20,371 --> 00:56:23,272
that our assumptions were incorrect in a few places.

1187
00:56:23,272 --> 00:56:25,793
And actually, we'll have a new update out soon,

1188
00:56:25,793 --> 00:56:28,735
which will hopefully help for people that are frustrated

1189
00:56:28,735 --> 00:56:31,496
by the way that side of the gameplay works.

1190
00:56:31,496 --> 00:56:32,776
So yeah, that's a good question.

1191
00:56:32,776 --> 00:56:33,717
Thanks.

1192
00:56:36,328 --> 00:56:37,188
No one else has.

1193
00:56:37,188 --> 00:56:37,549
Go ahead.

1194
00:56:37,549 --> 00:56:42,092
In your takeaways, you mentioned that it may not

1195
00:56:42,092 --> 00:56:44,113
result in a global launch.

1196
00:56:44,113 --> 00:56:46,715
And I'm just trying to decipher the reasons for that.

1197
00:56:46,715 --> 00:56:48,597
One assumption I could maybe make

1198
00:56:48,597 --> 00:56:50,918
is because it's not as combat focused, more chill.

1199
00:56:50,918 --> 00:56:55,462
People don't go as intensely, don't spend as intensely.

1200
00:56:55,462 --> 00:56:57,603
Well, perhaps I just worded it wrong.

1201
00:56:58,272 --> 00:57:03,415
Soft launch for us is like this kind of partially proving ground, partially like a maturing ground.

1202
00:57:03,415 --> 00:57:10,261
And we just get the game out there and try it with real players and see how they really act.

1203
00:57:10,261 --> 00:57:17,586
And we learn lessons. Like we found that some of our assumptions about the way people play the game are completely wrong.

1204
00:57:17,586 --> 00:57:23,891
So, I wouldn't want to comment on the likelihood either way, but we're just gathering data.

1205
00:57:25,060 --> 00:57:26,160
You never know.

1206
00:57:26,160 --> 00:57:28,701
Sometimes we kill them, sometimes we...

1207
00:57:28,701 --> 00:57:31,523
And the killing decision always comes from within the team.

1208
00:57:31,523 --> 00:57:34,064
Like, do we still believe that we can make this

1209
00:57:34,064 --> 00:57:35,765
into a game worthy of supporting for 10 plus years,

1210
00:57:35,765 --> 00:57:37,646
like our other games?

1211
00:57:37,646 --> 00:57:37,846
So...

1212
00:57:39,839 --> 00:57:45,203
Yeah, I wasn't trying to imply that it's not going to go global, just that we'll see.

1213
00:57:45,203 --> 00:57:45,964
We'll see what happens.

1214
00:57:45,964 --> 00:57:46,704
Okay.

1215
00:57:46,704 --> 00:57:52,929
Sorry, just on that point, do you feel like making it more chill while maybe appealing

1216
00:57:52,929 --> 00:57:58,614
to a broader audience or maybe a different market made it tough to have like extremely

1217
00:57:58,614 --> 00:58:01,236
dedicated, extremely hardcore players?

1218
00:58:01,236 --> 00:58:04,858
No, the players are crazy.

1219
00:58:05,852 --> 00:58:09,994
It's amazing, I love the response we've had, it's insane.

1220
00:58:09,994 --> 00:58:10,615
It's really cool.

1221
00:58:10,615 --> 00:58:15,777
I think it's just different games for different kinds of people.

1222
00:58:15,777 --> 00:58:19,999
Some people like to chill, some people like it hardcore.

1223
00:58:19,999 --> 00:58:21,259
Okay, thank you very much.

1224
00:58:21,259 --> 00:58:23,500
Yeah, no worries.

1225
00:58:23,500 --> 00:58:26,622
So Clash of Clans, obviously, competitive game.

1226
00:58:26,622 --> 00:58:29,903
So you've got like a leaderboard where players are playing against each other.

1227
00:58:29,903 --> 00:58:32,905
So when you like monetize a game like that,

1228
00:58:33,348 --> 00:58:34,989
it's a little bit easier since you've got

1229
00:58:34,989 --> 00:58:36,950
like sort of a little bit more competitive aspect

1230
00:58:36,950 --> 00:58:37,550
to it going on.

1231
00:58:37,550 --> 00:58:41,452
So how would that factor into Fidel?

1232
00:58:41,452 --> 00:58:43,233
Yeah, I mean we're still learning.

1233
00:58:43,233 --> 00:58:43,573
Okay.

1234
00:58:43,573 --> 00:58:46,094
We're still learning what's the best way

1235
00:58:46,094 --> 00:58:49,936
to monetize games like this.

1236
00:58:49,936 --> 00:58:51,057
It's always a surprise.

1237
00:58:51,057 --> 00:58:54,638
You try things and they don't always go the way you think

1238
00:58:54,638 --> 00:58:58,880
and you adapt, learn from them, try something else.

1239
00:58:58,880 --> 00:58:59,641
Ongoing process.

1240
00:58:59,641 --> 00:58:59,801
Yeah.

1241
00:58:59,801 --> 00:59:02,942
I think we have time for maybe one more.

1242
00:59:04,022 --> 00:59:13,990
I've noticed that with a lot of these social features, people like to form groups and communicate with their groups on strategy on places like Discord or Facebook or Reddit.

1243
00:59:13,990 --> 00:59:20,115
Have you thought about maybe making a first party tool for that or integrating something more officially with Supercell?

1244
00:59:21,115 --> 00:59:24,518
Yeah, I mean, there's a lot of ideas floating around always.

1245
00:59:24,518 --> 00:59:27,101
All these sorts of things pop up from time to time.

1246
00:59:27,101 --> 00:59:27,942
We'll see what happens.

1247
00:59:27,942 --> 00:59:29,703
Yeah, it's very cool.

1248
00:59:29,703 --> 00:59:31,365
I can't believe some of the stuff you see.

1249
00:59:31,365 --> 00:59:34,027
If you ever watch how people play Clash of Clans

1250
00:59:34,027 --> 00:59:36,369
competitively at the top level,

1251
00:59:36,369 --> 00:59:39,312
they've got like their painting overlays and everything.

1252
00:59:39,312 --> 00:59:40,052
It's amazing.

1253
00:59:40,052 --> 00:59:43,075
Super cool stuff.

1254
00:59:43,075 --> 00:59:44,376
Anyway, thank you very much.

1255
00:59:44,376 --> 00:59:47,139
And just come and talk with me if you've got

1256
00:59:47,139 --> 00:59:48,080
some more questions.

