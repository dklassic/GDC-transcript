1
00:00:06,096 --> 00:00:07,597
Okay, I'm up next.

2
00:00:08,418 --> 00:00:12,620
I'm going to be talking about some camera math a little bit.

3
00:00:13,201 --> 00:00:16,463
So I'm titling this talk, Juicing Your Cameras with Math.

4
00:00:18,444 --> 00:00:22,207
And I've got some demos, and I have a bajillion hotkeys here,

5
00:00:22,247 --> 00:00:24,068
so I need my cheat sheet here.

6
00:00:26,310 --> 00:00:26,810
Okay, so...

7
00:00:27,838 --> 00:00:29,279
We're going to be talking about a couple things today.

8
00:00:29,399 --> 00:00:31,461
One of them is the ubiquitous camera shake.

9
00:00:31,761 --> 00:00:33,682
We're going to talk about good ways of doing it,

10
00:00:33,722 --> 00:00:36,303
bad ways of doing it, things to never do,

11
00:00:37,184 --> 00:00:39,125
differences in 2D and 3D, and that sort of thing.

12
00:00:40,646 --> 00:00:42,467
We're going to compare different kinds of shakes,

13
00:00:42,527 --> 00:00:44,368
translational versus rotational shake.

14
00:00:44,488 --> 00:00:46,469
We'll talk about whether you're using randomness

15
00:00:46,529 --> 00:00:48,470
or some sort of coherent noise.

16
00:00:49,091 --> 00:00:50,792
And we'll talk about what that means and the differences.

17
00:00:51,452 --> 00:00:53,273
Like I said, some 2D, 3D distinctions.

18
00:00:54,139 --> 00:00:56,580
We'll also talk a little bit about smooth camera motion.

19
00:00:56,780 --> 00:00:58,561
Right, so here in this example, the camera

20
00:00:59,062 --> 00:01:00,723
is kind of lazily following the player.

21
00:01:00,803 --> 00:01:03,704
We'll talk about some of the specific maths behind that

22
00:01:04,364 --> 00:01:06,566
and different ways to tweak it for circumstantial.

23
00:01:07,639 --> 00:01:12,363
benefit. I'll mention parametric motion, but I'm going to refer you to a different talk

24
00:01:12,623 --> 00:01:16,826
since we have so little time. In general, with this talk, I'm going to be trying to

25
00:01:16,846 --> 00:01:21,650
go very quickly and give you like a shotgun smattering of little seeds with just enough

26
00:01:21,730 --> 00:01:27,614
math and intuition for you to go off and do it yourself. And I forgot to mention before,

27
00:01:28,014 --> 00:01:28,915
but there are some...

28
00:01:30,356 --> 00:01:31,977
questions about with Kyle's slides.

29
00:01:31,997 --> 00:01:34,238
We're going to post all the slides for all the talks

30
00:01:34,278 --> 00:01:37,540
today at essentialmath.com.

31
00:01:38,041 --> 00:01:39,802
So I'll say that a couple times throughout the day.

32
00:01:40,802 --> 00:01:42,303
But that's where all the slides are

33
00:01:42,343 --> 00:01:45,685
for this and the previous 16 years of the math and physics

34
00:01:46,345 --> 00:01:47,286
tutorials at GDC.

35
00:01:48,847 --> 00:01:51,709
I'll talk about some different kinds of averaging

36
00:01:52,749 --> 00:01:56,011
in terms of this smooth motion, including

37
00:01:56,111 --> 00:01:59,193
asymmetric, asymptotic averaging.

38
00:01:59,959 --> 00:02:00,919
just because that sounds fun.

39
00:02:01,259 --> 00:02:03,320
We'll talk about framing things and points of interest

40
00:02:03,380 --> 00:02:05,501
and points of focus, and how do you manage

41
00:02:06,421 --> 00:02:10,802
different things like that, and how you sort of make

42
00:02:10,842 --> 00:02:12,763
everything feel soft and not too overt.

43
00:02:13,743 --> 00:02:16,804
And then lastly, my favorite topic here is,

44
00:02:16,824 --> 00:02:18,825
we're going to talk about this, what I call

45
00:02:18,845 --> 00:02:20,725
Voronoi split-screen technique.

46
00:02:21,185 --> 00:02:25,187
Has anyone seen or played Lego Star Wars multiplayer?

47
00:02:26,766 --> 00:02:28,666
So it does this really cool thing with splitting the screen.

48
00:02:28,686 --> 00:02:30,287
And we're going to look into how that works.

49
00:02:30,307 --> 00:02:31,407
We're going to look at how to do it.

50
00:02:31,867 --> 00:02:34,048
We're going to look at a couple different ways of doing it.

51
00:02:35,128 --> 00:02:37,488
And then how to merge and feather those things, too.

52
00:02:37,708 --> 00:02:40,529
And then we're going to sort of end with a tease and a challenge.

53
00:02:41,709 --> 00:02:43,910
OK, so Juice is the New Black.

54
00:02:45,150 --> 00:02:49,431
Has anyone ever seen the Art of Screen Shake or Juice It or Lose

55
00:02:49,491 --> 00:02:50,531
It talks on YouTube?

56
00:02:51,598 --> 00:02:53,639
So that's your homework is go watch those talks.

57
00:02:53,659 --> 00:02:54,440
They're super short.

58
00:02:54,480 --> 00:02:55,180
They're awesome.

59
00:02:55,740 --> 00:02:58,762
You can see just in this example alone on both of them,

60
00:02:58,782 --> 00:03:01,903
there's like all kinds of crazy ass screen shake going on.

61
00:03:02,363 --> 00:03:04,004
And that's one of the things that's been really

62
00:03:04,044 --> 00:03:06,545
happening a lot, both in indie and AAA,

63
00:03:06,645 --> 00:03:10,426
is finding ways to add juiciness and crunchiness to our games

64
00:03:10,927 --> 00:03:12,207
so that things feel solid.

65
00:03:12,627 --> 00:03:13,828
And there are a lot of different components

66
00:03:13,848 --> 00:03:16,969
that go into that, not the least of which is audio, et cetera.

67
00:03:17,049 --> 00:03:19,350
But camera shake is one of those big things.

68
00:03:20,418 --> 00:03:22,400
But as we start using these tools,

69
00:03:22,420 --> 00:03:27,043
it's very easy to misuse them and make bad things happen.

70
00:03:28,124 --> 00:03:31,227
So camera shake is a lot like salt. With none of it,

71
00:03:32,007 --> 00:03:32,828
it's not very interesting.

72
00:03:32,868 --> 00:03:34,209
If you land really hard on the ground,

73
00:03:34,229 --> 00:03:36,391
it doesn't feel hard if the camera doesn't do anything.

74
00:03:37,171 --> 00:03:39,673
But if you do too much of it, then it's just nauseating.

75
00:03:41,075 --> 00:03:42,716
So we want to have just the right amount.

76
00:03:45,770 --> 00:03:50,013
My suggestion for handling camera shake in general in your games, if you're going to do this,

77
00:03:50,614 --> 00:03:54,236
is to have a separate variable internally, which I'll call trauma, right?

78
00:03:54,276 --> 00:03:57,198
And any time something happens to you, you'll add some trauma.

79
00:03:57,298 --> 00:04:02,201
Like, ow, that was a really hard hit, I'll add 0.5 trauma, so I'm at 50% trauma.

80
00:04:02,841 --> 00:04:04,562
Or maybe some small stress would add 10 or 20%.

81
00:04:05,763 --> 00:04:09,205
And then it's constantly going down over time at some linear fixed rate.

82
00:04:10,106 --> 00:04:13,688
So every frame, trauma minus equals something that's time-based.

83
00:04:15,907 --> 00:04:18,028
But the important part here is that, first of all,

84
00:04:18,128 --> 00:04:21,030
camera shake is not going to be linearly proportional to trauma.

85
00:04:21,070 --> 00:04:23,291
It's going to be trauma squared or trauma cubed,

86
00:04:23,712 --> 00:04:25,533
which in the 0 to 1 range actually

87
00:04:25,573 --> 00:04:28,394
means it's going to be a curve that makes it go downward.

88
00:04:28,715 --> 00:04:30,115
It's like the beginning of a parabola.

89
00:04:31,436 --> 00:04:33,497
So I want to talk about why this feels right.

90
00:04:33,597 --> 00:04:37,319
And so let me start by showing one of the demos here.

91
00:04:38,980 --> 00:04:41,062
So these are a couple of quick little simple demos

92
00:04:41,162 --> 00:04:43,123
I hacked together just to demonstrate

93
00:04:43,303 --> 00:04:44,003
these sorts of things.

94
00:04:46,459 --> 00:04:51,242
Okay, so if you look on the left of the screen, there's sort of a bar of trauma, and if I

95
00:04:51,282 --> 00:04:56,385
give a lot of trauma, that's the orange bar, right, the amber bar, and it just is constantly

96
00:04:56,405 --> 00:04:57,305
going down over time.

97
00:04:57,345 --> 00:05:02,688
And if I give myself like a little trauma, three times, boom, boom, boom, it's additive.

98
00:05:03,389 --> 00:05:08,312
And you'll notice that next to it, and I'll hold it steady here for a second, is the amount

99
00:05:08,332 --> 00:05:10,293
of camera shake, which is the blue bar.

100
00:05:10,453 --> 00:05:12,334
And so that's not linear, right?

101
00:05:12,854 --> 00:05:14,095
And so as this goes up...

102
00:05:14,875 --> 00:05:17,388
we get an exponential amount of.

103
00:05:19,150 --> 00:05:20,351
screen shake for trauma.

104
00:05:20,611 --> 00:05:22,133
There are a couple reasons why this feels good.

105
00:05:22,373 --> 00:05:24,614
First of all, it's actually somewhat realistic.

106
00:05:25,355 --> 00:05:28,077
If we think of a camera that's jostled and has

107
00:05:28,097 --> 00:05:29,978
to sort of restabilize itself, it's

108
00:05:30,058 --> 00:05:32,040
much like a spring and damper system,

109
00:05:32,480 --> 00:05:34,001
where the shock's on your car.

110
00:05:34,601 --> 00:05:37,704
So it's going to bobble back and forth and then kind of converge

111
00:05:37,764 --> 00:05:38,444
back to nothing.

112
00:05:39,005 --> 00:05:40,105
So that feels correct.

113
00:05:40,706 --> 00:05:42,747
It's also nice because I can really

114
00:05:42,787 --> 00:05:45,149
feel the difference between, if you can see the screen shake,

115
00:05:45,169 --> 00:05:48,291
this is a minor trauma and a moderate trauma.

116
00:05:49,613 --> 00:05:50,453
and a major trauma.

117
00:05:51,773 --> 00:05:54,854
And it also means that if I have several minor traumas in a row,

118
00:05:55,214 --> 00:05:58,454
boom, boom, boom, they have a more than linear effect

119
00:05:58,514 --> 00:05:58,874
on each other.

120
00:05:58,935 --> 00:06:00,955
So it feels really significant of, well, wow,

121
00:06:00,975 --> 00:06:02,075
I'm really getting my ass kicked.

122
00:06:04,475 --> 00:06:07,256
So it feels right because it's similar to real physics.

123
00:06:07,836 --> 00:06:09,916
And it feels good because we can really

124
00:06:09,976 --> 00:06:13,017
perceive the difference between escalating perceptions.

125
00:06:13,997 --> 00:06:17,238
If we instead had linear trauma.

126
00:06:19,327 --> 00:06:21,948
like this, where I just have them match to each other,

127
00:06:22,528 --> 00:06:25,769
you can see that the heavy one shakes for a long time

128
00:06:25,849 --> 00:06:28,811
and then it seems to sort of stop very suddenly, right?

129
00:06:29,271 --> 00:06:31,912
And also the difference between a moderate trauma

130
00:06:32,192 --> 00:06:34,353
and a heavy trauma doesn't feel that much different.

131
00:06:36,354 --> 00:06:38,054
Whereas when it's non-linear,

132
00:06:38,094 --> 00:06:38,955
we can really feel a difference.

133
00:06:40,897 --> 00:06:43,460
All right, so there's also different kinds of camera shape, right?

134
00:06:43,500 --> 00:06:46,062
There's rotational and translational.

135
00:06:47,823 --> 00:06:54,089
By that I mean, if I shake the screen here, this is merely translational.

136
00:06:54,169 --> 00:06:57,272
See all I'm doing is jittering the camera around left and right, up and down.

137
00:06:58,753 --> 00:07:01,155
Whereas this is merely rotational trauma, right?

138
00:07:01,336 --> 00:07:02,076
Rotational shake.

139
00:07:02,717 --> 00:07:06,140
Which doesn't feel as good, I would say, but it's kind of interesting.

140
00:07:06,660 --> 00:07:07,661
Keeps the player in focus.

141
00:07:08,930 --> 00:07:12,391
And I would say in this case, the translational,

142
00:07:12,431 --> 00:07:14,212
the moving side to side, feels better.

143
00:07:14,532 --> 00:07:16,352
But the combination of them feels really good,

144
00:07:16,752 --> 00:07:17,913
especially if I've got a lot of them.

145
00:07:18,113 --> 00:07:19,894
It feels pretty intense.

146
00:07:22,134 --> 00:07:24,755
So the combination of both translational and rotational

147
00:07:25,195 --> 00:07:27,436
camera shake is generally desirable.

148
00:07:27,576 --> 00:07:29,697
But what if we're doing something in 3D?

149
00:07:30,317 --> 00:07:31,798
So let's look at a 3D comparison.

150
00:07:34,929 --> 00:07:41,939
So, if I have a simple 3D game, and I can look around, and this is first person, and

151
00:07:41,979 --> 00:07:46,225
if I do the same thing here, I'm going to set a constant level of trauma.

152
00:07:49,112 --> 00:07:53,794
This is translational only, meaning I'm just moving the camera back and forth.

153
00:07:54,234 --> 00:07:59,855
You can see, and now it makes sense because of perspective, the islands in the distance

154
00:07:59,895 --> 00:08:01,316
don't seem to move very much, right?

155
00:08:01,356 --> 00:08:05,177
And in fact, if I'm very close to the ground here, this is moving quite spastically.

156
00:08:06,057 --> 00:08:08,418
So that actually doesn't feel nearly as good.

157
00:08:08,718 --> 00:08:13,739
Whereas if I turn on only rotational, then it actually feels much better, even if it's

158
00:08:14,020 --> 00:08:14,280
subtle.

159
00:08:15,437 --> 00:08:18,720
So it turns out, ironically, that in 3D, rotational feels

160
00:08:18,860 --> 00:08:20,061
much better than translational.

161
00:08:20,602 --> 00:08:22,203
And in 2D, translational feels better.

162
00:08:23,424 --> 00:08:24,845
There's another big problem, though.

163
00:08:25,626 --> 00:08:27,368
And this is a reason why we actually

164
00:08:27,388 --> 00:08:31,551
want to avoid ever using translational camera shake

165
00:08:31,591 --> 00:08:34,654
in 3D, is because it can put the camera inside a wall.

166
00:08:35,054 --> 00:08:36,876
You can see here, I don't know if it's

167
00:08:36,896 --> 00:08:40,659
coming through on the monitor, but half of the frames here,

168
00:08:40,679 --> 00:08:41,420
I'll make it extreme.

169
00:08:43,950 --> 00:08:47,371
you know, half of the frames, the camera's actually getting displaced into the wall, right?

170
00:08:47,391 --> 00:08:49,031
And then we have all kinds of problems that happen.

171
00:08:49,651 --> 00:08:53,033
And if you've ever worked on a camera system in an engine, you know half of the time

172
00:08:53,513 --> 00:08:56,213
your work is spent trying to keep the damn thing out of the walls, right?

173
00:08:56,434 --> 00:08:58,114
So, that's one of the things we don't want to do.

174
00:08:58,194 --> 00:08:58,994
If we turn off

175
00:09:00,175 --> 00:09:01,975
the translational and we just do rotational,

176
00:09:01,995 --> 00:09:04,496
then our position is never changed, so we don't have to suffer from that.

177
00:09:05,096 --> 00:09:06,357
So not only does that feel better—

178
00:09:06,657 --> 00:09:08,057
sorry if I make anyone puke in this talk.

179
00:09:11,538 --> 00:09:11,678
Yeah.

180
00:09:12,667 --> 00:09:15,609
So actually in 3D, ironically, the rules are somewhat different.

181
00:09:15,689 --> 00:09:19,491
That we don't want to use translational because it feels weird

182
00:09:20,112 --> 00:09:21,613
and it could be very bad, right?

183
00:09:21,773 --> 00:09:23,614
Whereas rotational actually feels even nicer.

184
00:09:26,216 --> 00:09:27,217
Camera shake in VR.

185
00:09:30,339 --> 00:09:33,821
So the rules of VR are try to avoid forced motion.

186
00:09:34,062 --> 00:09:36,523
If you have to do forced motion, try to make it be slow.

187
00:09:36,683 --> 00:09:39,205
If it has to be fast, try to make it be predictable.

188
00:09:40,184 --> 00:09:41,505
Camera shake is none of those things.

189
00:09:42,827 --> 00:09:43,768
So, don't do this.

190
00:09:54,360 --> 00:09:55,581
Okay, so how does this look in code?

191
00:09:56,667 --> 00:09:57,508
Well, it's pretty trivial.

192
00:09:58,509 --> 00:10:00,790
We want to just get some random varying amount,

193
00:10:02,011 --> 00:10:03,032
say from negative 1 to 1.

194
00:10:03,692 --> 00:10:06,414
And then we'll say that in 2D, if we're just

195
00:10:06,434 --> 00:10:08,696
messing with an angle like this, let's

196
00:10:08,716 --> 00:10:10,997
say we want to be willing to go up to 10 degrees.

197
00:10:12,918 --> 00:10:15,419
And so we would say the amount of shake, which is from 0 to 1,

198
00:10:15,879 --> 00:10:16,860
times the 10 degrees.

199
00:10:16,940 --> 00:10:19,261
So maybe moderate shake would only be up to 5 degrees,

200
00:10:19,661 --> 00:10:21,062
plus or minus.

201
00:10:21,762 --> 00:10:23,203
So this random negative 1 to 1.

202
00:10:23,543 --> 00:10:25,724
And we'll do that for an x and y offset as well.

203
00:10:25,804 --> 00:10:28,365
So this is the translational part is the x and y,

204
00:10:28,445 --> 00:10:29,906
and then a rotational part on top of that.

205
00:10:30,526 --> 00:10:30,866
That's it.

206
00:10:31,367 --> 00:10:31,807
Pretty simple.

207
00:10:33,127 --> 00:10:35,889
And then we take our camera, and we add.

208
00:10:37,129 --> 00:10:40,791
both the shake angle and the shake offset to our camera.

209
00:10:41,291 --> 00:10:43,992
And note that what we don't want to do is ruin our camera.

210
00:10:44,012 --> 00:10:45,753
We don't actually want to move the camera.

211
00:10:45,973 --> 00:10:48,954
We just want to sort of displace it from where it is.

212
00:10:49,114 --> 00:10:53,036
So it tends to be better to have the base camera remain pure

213
00:10:53,376 --> 00:10:54,757
and have a shaky camera that we're

214
00:10:54,877 --> 00:10:57,498
like taking every frame clean from scratch,

215
00:10:57,658 --> 00:11:01,240
take the base camera plus noise on top of it, or plus shake.

216
00:11:02,365 --> 00:11:03,425
In 3D this looks the same.

217
00:11:03,845 --> 00:11:05,926
Obviously in 3D we have orientations

218
00:11:05,966 --> 00:11:09,487
that are more complex than these Euler angles or Tate-Brian

219
00:11:09,547 --> 00:11:11,267
angles of yaw, pitch, roll.

220
00:11:11,487 --> 00:11:14,108
But actually that turns out feeling really good,

221
00:11:15,628 --> 00:11:18,389
maybe unsurprisingly, to do your shake in 3D,

222
00:11:18,549 --> 00:11:20,310
your rotational shake, in Euler angles.

223
00:11:21,150 --> 00:11:23,631
Partly because we're used to in shooters

224
00:11:24,391 --> 00:11:26,852
having the mouse control directly relate to these.

225
00:11:26,912 --> 00:11:28,792
If I move my mouse left and right, it's a yaw.

226
00:11:29,212 --> 00:11:30,633
If I move it up and down, it's a pitch.

227
00:11:31,433 --> 00:11:34,916
And so I can tweak these, how much yaw shake I want,

228
00:11:34,956 --> 00:11:37,137
and how much pitch shake, and how much roll shake I want,

229
00:11:37,358 --> 00:11:37,818
individually.

230
00:11:37,838 --> 00:11:39,800
And that's actually the perfect way to tweak it.

231
00:11:41,261 --> 00:11:44,964
And then we'll also do our translational the same way.

232
00:11:46,505 --> 00:11:48,827
There is a better way to do this, and we'll show why.

233
00:11:50,661 --> 00:11:53,143
If you've ever heard me talk before, I'm a big fan of Perlin noise.

234
00:11:53,323 --> 00:11:58,926
So I'm going to suggest we use something like Perlin noise, or some smooth fractal noise

235
00:11:59,006 --> 00:12:01,168
instead of just this random.

236
00:12:02,528 --> 00:12:03,249
Why do I think that?

237
00:12:07,231 --> 00:12:16,016
So if I go back to this demo, let me give some examples of why Perlin noise is superior.

238
00:12:16,196 --> 00:12:18,258
So again, here's my screen shake, right?

239
00:12:19,750 --> 00:12:20,731
fairly severe trauma.

240
00:12:21,811 --> 00:12:23,832
There are a couple things that are problematic.

241
00:12:23,952 --> 00:12:27,033
First of all, let's say I'm, let me just get some things

242
00:12:27,073 --> 00:12:29,874
moving so you can see what's happening.

243
00:12:30,374 --> 00:12:32,554
So if I'm moving around and I jump through the air

244
00:12:32,574 --> 00:12:36,296
and I'm falling in slow motion and I turn on the trauma,

245
00:12:37,356 --> 00:12:39,517
that's what I would expect to see in slow motion, right?

246
00:12:40,977 --> 00:12:43,818
And then when I hit the ground, I re-traumatize.

247
00:12:44,098 --> 00:12:48,620
So if I'm using just random, this is what I get.

248
00:12:51,053 --> 00:12:51,874
I'm hopping around.

249
00:12:52,975 --> 00:12:53,895
I'm in slow motion.

250
00:12:54,836 --> 00:12:55,736
And I make noise.

251
00:12:56,196 --> 00:12:57,537
And because it's random every frame,

252
00:12:57,557 --> 00:13:00,159
it's effectively an infinite frequency regardless

253
00:13:00,679 --> 00:13:02,380
of how slow the time is.

254
00:13:02,940 --> 00:13:05,402
And so if I have something that's more of an equation,

255
00:13:06,042 --> 00:13:08,003
then I can execute that equation slower.

256
00:13:08,063 --> 00:13:09,904
And now it really feels like the camera is

257
00:13:10,265 --> 00:13:11,725
jerking around in real time.

258
00:13:13,887 --> 00:13:15,688
So that's one significant advantage

259
00:13:16,308 --> 00:13:17,069
that Perlin Noise has.

260
00:13:21,760 --> 00:13:22,301
Excuse me.

261
00:13:25,025 --> 00:13:27,309
So another thing is that it just feels better.

262
00:13:27,670 --> 00:13:30,234
And I don't know if you can be convinced of that

263
00:13:30,294 --> 00:13:31,997
with just a simple test.

264
00:13:36,791 --> 00:13:41,216
If I do Perlin noise, it feels like it's coherent, right?

265
00:13:41,256 --> 00:13:43,900
That the camera's actually moving from left to right.

266
00:13:43,940 --> 00:13:46,483
It's not just teleporting to a random place every frame.

267
00:13:47,083 --> 00:13:49,887
And so it feels much like a camera would actually feel.

268
00:13:50,908 --> 00:13:52,249
It's also frame rate independent.

269
00:13:52,330 --> 00:13:55,934
It does time scaling and generally feels great.

270
00:13:58,406 --> 00:14:03,908
It works automatically in slow motion if you're just passing down a current time or a delta time, it just works.

271
00:14:04,608 --> 00:14:07,009
It also has an adjustable frequency which is really interesting.

272
00:14:08,510 --> 00:14:12,371
If I, again, do my Perlin noise here.

273
00:14:12,891 --> 00:14:13,872
If I slow it down...

274
00:14:13,892 --> 00:14:21,215
There we go.

275
00:14:21,995 --> 00:14:23,015
So I can actually...

276
00:14:24,314 --> 00:14:26,255
have, and I'll just sustain the noise here.

277
00:14:26,335 --> 00:14:29,336
This is with the noise slowed down considerably.

278
00:14:29,977 --> 00:14:32,898
And if I do this slow enough, it can actually

279
00:14:32,978 --> 00:14:35,639
feel like, say, a handheld camera effect.

280
00:14:36,259 --> 00:14:37,540
So there's a lot of other uses for this,

281
00:14:37,640 --> 00:14:39,441
other than just spasming the screen.

282
00:14:42,445 --> 00:14:47,027
It's also more easily reproducible because it's just a function that you're plugging time into.

283
00:14:47,788 --> 00:14:49,909
It's not something that's random.

284
00:14:50,289 --> 00:14:55,751
And you'll notice if you're going to do this, you'll generally want to make sure you're not using the same Perlin noise for all of them.

285
00:14:55,771 --> 00:14:57,572
Otherwise we're always going to go down when we go left.

286
00:14:57,592 --> 00:14:59,873
And we're always going to pitch when we yaw.

287
00:15:00,434 --> 00:15:01,274
So those need to be different.

288
00:15:01,354 --> 00:15:05,596
I always just do this by staggering the seeds, the random seeds, into the noise function.

289
00:15:07,758 --> 00:15:09,639
All right, so a couple takeaways from that section.

290
00:15:10,299 --> 00:15:12,800
Camera shake is not proportional to trauma.

291
00:15:13,421 --> 00:15:14,581
I would like to keep them separate,

292
00:15:14,661 --> 00:15:17,163
and I like to have camera shake be exponential.

293
00:15:17,703 --> 00:15:20,084
In 2D, we like both translational and rotational.

294
00:15:20,104 --> 00:15:22,506
In 3D, we want to avoid translational.

295
00:15:23,726 --> 00:15:25,527
And tread very carefully in VR.

296
00:15:27,028 --> 00:15:30,450
Also prefer some sort of noise formula to just random.

297
00:15:31,030 --> 00:15:33,671
And by the way, you want Perlin noise in your engine

298
00:15:33,691 --> 00:15:35,532
and in your math toolkit, mentally anyway,

299
00:15:35,552 --> 00:15:36,333
because it's badass.

300
00:15:38,349 --> 00:15:39,770
All right, so next I'm going to talk quickly

301
00:15:39,790 --> 00:15:40,831
about smooth motion.

302
00:15:40,851 --> 00:15:42,773
And I'm going to start hurrying through some of this.

303
00:15:43,253 --> 00:15:45,615
So in this case here, I just have the camera

304
00:15:45,675 --> 00:15:46,916
locked to the player's position.

305
00:15:47,096 --> 00:15:50,099
So if I go down, the player just kind of

306
00:15:50,119 --> 00:15:52,220
goes wherever he wants, and the camera follows.

307
00:15:52,721 --> 00:15:55,043
And if I teleport back up to the top, it just teleports.

308
00:15:56,664 --> 00:16:01,708
But I might want motion that's following the player more

309
00:16:01,828 --> 00:16:02,329
lazily.

310
00:16:02,949 --> 00:16:05,792
And player motion can often be erratic or jerky,

311
00:16:06,192 --> 00:16:07,853
especially if we have something like stairs.

312
00:16:09,115 --> 00:16:11,738
where we're going to climb up and pop.

313
00:16:11,778 --> 00:16:13,439
So the camera feels really bad when we do that.

314
00:16:14,160 --> 00:16:15,641
So one of the things we can do is turn on

315
00:16:16,562 --> 00:16:18,083
asymptotic smoothing.

316
00:16:18,824 --> 00:16:20,305
And I'll explain what that means in a second.

317
00:16:20,325 --> 00:16:23,348
But basically, this is the slow version of that.

318
00:16:23,848 --> 00:16:27,131
And this is where the camera just kind of lazily meanders

319
00:16:27,171 --> 00:16:29,133
its way eventually towards wherever the player is.

320
00:16:29,633 --> 00:16:34,778
And so there's very little impact from any high frequency

321
00:16:35,018 --> 00:16:36,139
actions that the player takes.

322
00:16:37,033 --> 00:16:39,614
So as I'm falling down steps or climbing up steps,

323
00:16:39,634 --> 00:16:41,314
you can see the camera's not jerking.

324
00:16:41,374 --> 00:16:42,635
It's totally fine with that.

325
00:16:43,295 --> 00:16:45,476
I can, of course, do that on a tighter basis

326
00:16:45,556 --> 00:16:52,619
so it converges more quickly, like this, or even quicker

327
00:16:52,679 --> 00:16:52,899
still.

328
00:16:53,359 --> 00:16:54,579
And this is with it turned up.

329
00:16:54,859 --> 00:16:58,341
If you turn it up so fast that it converges almost instantly,

330
00:16:58,381 --> 00:17:00,681
then it starts feeling like it's just snapping.

331
00:17:04,370 --> 00:17:06,712
All right, so there's a really nice,

332
00:17:07,193 --> 00:17:09,134
some really nice ways of doing this using

333
00:17:10,435 --> 00:17:12,597
cubic splines and curves and that sort of thing.

334
00:17:13,398 --> 00:17:16,160
There's a talk from this tutorial from 2012

335
00:17:16,460 --> 00:17:18,942
about interpolations and splines

336
00:17:19,142 --> 00:17:20,944
that I highly recommend if you want to take that approach.

337
00:17:21,584 --> 00:17:22,865
But if you just want something working,

338
00:17:23,045 --> 00:17:24,667
and actually this works out quite well,

339
00:17:25,427 --> 00:17:27,008
you can use this asymptotic averaging.

340
00:17:27,229 --> 00:17:29,991
So from that talk, they threw this formula up on the screen,

341
00:17:30,011 --> 00:17:31,392
and I want to talk about that.

342
00:17:32,273 --> 00:17:32,373
So...

343
00:17:33,952 --> 00:17:37,195
the formula is x plus equals target minus x times 10%.

344
00:17:39,177 --> 00:17:40,678
Or, I rewrote it a different way,

345
00:17:41,579 --> 00:17:44,642
this 90 times x plus 10% times target.

346
00:17:44,662 --> 00:17:45,343
What does that mean?

347
00:17:46,804 --> 00:17:47,945
Same thing, just written twice.

348
00:17:48,025 --> 00:17:50,167
On the left, I would express it as each frame,

349
00:17:50,207 --> 00:17:53,190
we take a 90-10 blend of ourselves

350
00:17:53,450 --> 00:17:54,591
and of what we'd like to be.

351
00:17:55,952 --> 00:17:58,274
Or, on the right, it's maybe more intuitive to say,

352
00:17:58,635 --> 00:18:01,177
each frame we get 10% closer to our target.

353
00:18:03,193 --> 00:18:07,457
Okay, so let's say we have blue, and then I average in green.

354
00:18:07,677 --> 00:18:09,578
And this is a 50% asymptotic average.

355
00:18:10,099 --> 00:18:12,600
And then I take whatever that is, and I average in yellow.

356
00:18:13,241 --> 00:18:15,142
So now as I average in another color,

357
00:18:15,562 --> 00:18:18,244
all the previous colors get diminished in their effect, right?

358
00:18:18,665 --> 00:18:20,826
And so the latest thing has the most importance.

359
00:18:22,227 --> 00:18:25,229
So each color sort of pushes the rest of them down.

360
00:18:25,410 --> 00:18:26,550
And so it's asymptotic,

361
00:18:27,111 --> 00:18:29,653
in the sense that I'm never quite reaching my goal.

362
00:18:30,990 --> 00:18:37,176
If I had, say, a position or something else that's following this, then it's going to

363
00:18:37,256 --> 00:18:38,497
feel asymptotic, right?

364
00:18:38,617 --> 00:18:43,182
And if you think about it, if I move half the distance between here and the chair, and

365
00:18:43,202 --> 00:18:46,926
then I move half the distance between here and the chair, and half the distance, and

366
00:18:46,966 --> 00:18:50,750
half the distance, I'll never reach the chair, but I'll effectively reach it in kind of a

367
00:18:50,810 --> 00:18:51,691
nice smooth landing.

368
00:18:52,271 --> 00:18:53,192
Infinitely smooth, actually.

369
00:18:55,236 --> 00:18:59,862
So how fast it works on the weight? I recommend toying around with these types of weights.

370
00:19:00,142 --> 00:19:05,528
For 1% new and 99% old is that really slow one I had.

371
00:19:07,230 --> 00:19:12,997
10% is reasonably fast and 50% every frame where each frame I close half the distance is quite fast.

372
00:19:16,029 --> 00:19:18,311
So it's called asymptotic because it never quite arrives.

373
00:19:18,831 --> 00:19:22,594
But there's nothing that says, much like Kyle was saying,

374
00:19:22,654 --> 00:19:25,756
in terms of we want to start with something realistic

375
00:19:25,776 --> 00:19:27,637
but then tweak it for feel, that we

376
00:19:27,677 --> 00:19:30,159
have to treat horizontal and vertical motion the same.

377
00:19:31,399 --> 00:19:34,081
So for example, we could say that there's

378
00:19:34,121 --> 00:19:36,103
a rule that it's going to follow me left and right,

379
00:19:36,403 --> 00:19:39,045
but it's only going to follow me vertically once I actually

380
00:19:39,085 --> 00:19:39,765
land on something.

381
00:19:40,205 --> 00:19:42,227
So now the camera doesn't follow me when I jump.

382
00:19:43,307 --> 00:19:44,728
It only follows me when I'm landing.

383
00:19:46,131 --> 00:19:48,553
And so as I'm going across this, the camera

384
00:19:48,573 --> 00:19:51,977
doesn't perturb at all as I go across those jumps.

385
00:19:56,321 --> 00:19:59,744
I can also make it more lazy going up than it is going down.

386
00:19:59,764 --> 00:20:02,807
And I can make any sort of hybrid mix of those things

387
00:20:02,847 --> 00:20:03,487
as I want.

388
00:20:03,547 --> 00:20:05,289
So I could say the camera is going

389
00:20:05,309 --> 00:20:07,591
to quickly converge on me when it's coming up to me.

390
00:20:09,397 --> 00:20:13,718
Or, perhaps, the camera, it's most important for it to converge, follow me very quickly

391
00:20:13,778 --> 00:20:14,719
when I'm going down.

392
00:20:15,459 --> 00:20:16,599
And it will do that immediately.

393
00:20:16,679 --> 00:20:19,880
As soon as I'm falling downward, it has a tight asymptotic average.

394
00:20:20,420 --> 00:20:21,840
So it will really try to hold on to me.

395
00:20:25,061 --> 00:20:27,422
So we don't have to treat upward and downward movement the same.

396
00:20:27,442 --> 00:20:29,322
We don't have to treat horizontal and vertical movement the same.

397
00:20:29,342 --> 00:20:33,723
If we're using asymptotic averages or anything else, we can tweak each of those for those

398
00:20:33,764 --> 00:20:36,224
cases and that's where we start really getting the feel for this.

399
00:20:36,664 --> 00:20:38,365
Plus those weights can be non-constant.

400
00:20:40,918 --> 00:20:43,361
One last fix, this doesn't time scale well.

401
00:20:44,062 --> 00:20:45,164
It's also frame rate dependent.

402
00:20:45,905 --> 00:20:48,088
We can hack around it by multiplying by time scale.

403
00:20:48,508 --> 00:20:53,895
So effectively, if we're going to be moving 0.1 every frame,

404
00:20:54,876 --> 00:20:57,760
this would be more like moving 0.1 of the way every second.

405
00:20:58,447 --> 00:20:59,767
and we're just moving a fraction of that.

406
00:21:00,528 --> 00:21:03,069
This is actually a linear approximation,

407
00:21:03,149 --> 00:21:04,069
which is much like,

408
00:21:04,970 --> 00:21:06,530
it's going to have a little bit of error to it,

409
00:21:06,770 --> 00:21:08,591
much like a numerical integration

410
00:21:08,791 --> 00:21:10,952
will have error to it when you're in a jumping curve,

411
00:21:11,352 --> 00:21:12,593
when you're sort of accumulating

412
00:21:12,993 --> 00:21:14,354
your movement from frame to frame,

413
00:21:14,754 --> 00:21:15,634
but it's quite good enough.

414
00:21:17,755 --> 00:21:18,816
Okay, so we've got,

415
00:21:19,036 --> 00:21:20,596
now this other toolkit is just

416
00:21:21,057 --> 00:21:22,497
move yourself a little bit closer towards

417
00:21:22,517 --> 00:21:23,438
the thing you want every frame.

418
00:21:26,813 --> 00:21:29,034
Okay, so in terms of framing

419
00:21:29,054 --> 00:21:30,875
and attention,

420
00:21:31,735 --> 00:21:34,536
I'm going to talk about this briefly. I'm not going to go into it

421
00:21:35,356 --> 00:21:37,677
too much in the demo because I want to get to the Voronoi region stuff.

422
00:21:39,057 --> 00:21:42,098
So what's at the epicenter of our attention? Generally the player, right?

423
00:21:42,718 --> 00:21:45,439
That may not always be what we're looking at on the screen, but it's

424
00:21:45,639 --> 00:21:48,900
always going to be present. It's important for us to know where the player is.

425
00:21:49,520 --> 00:21:51,201
So it's at least worth saying that

426
00:21:51,701 --> 00:21:53,681
you never want to not be able to see the player,

427
00:21:54,122 --> 00:21:55,802
right? At least if you're controlling her.

428
00:22:00,456 --> 00:22:04,497
So, there might be different things we want the camera to look at and highlight.

429
00:22:05,877 --> 00:22:10,778
And I'll call points of focus those things that demand high attention.

430
00:22:10,878 --> 00:22:16,439
So a primary point of focus like the player should never ever go out of view.

431
00:22:17,219 --> 00:22:20,580
Unless perhaps during a cutscene or something like that, which is not what we're talking

432
00:22:20,620 --> 00:22:20,780
about.

433
00:22:21,600 --> 00:22:26,802
A secondary but still important point of focus, like say the enemy that I'm locked onto.

434
00:22:28,618 --> 00:22:30,821
shouldn't go out of the screen if possible.

435
00:22:31,041 --> 00:22:33,985
If I can frame both me and my target, let's do that.

436
00:22:34,926 --> 00:22:36,908
But given if push comes to shove,

437
00:22:37,148 --> 00:22:39,631
keep me on screen if you have to kick him off screen.

438
00:22:41,017 --> 00:22:42,619
We might also have points of interest.

439
00:22:42,639 --> 00:22:44,821
And this is where we start getting some really nice subtlety

440
00:22:44,841 --> 00:22:45,822
that we can put into the system.

441
00:22:47,003 --> 00:22:50,346
And those are things where we'd like them to be in the screen if possible,

442
00:22:50,446 --> 00:22:51,827
but we don't want to upset anyone.

443
00:22:53,169 --> 00:22:57,693
And so that can cause a little bias that we can put in

444
00:22:57,773 --> 00:23:00,656
to make the camera kind of focus slightly to the left

445
00:23:01,116 --> 00:23:02,617
so that we can bring something into view.

446
00:23:03,879 --> 00:23:05,080
If we have some...

447
00:23:06,032 --> 00:23:09,219
piece of treasure that's just off screen. If we could have the camera just kind of dip

448
00:23:09,259 --> 00:23:12,025
down a little bit to show you. Oh, by the way, there's some treasure here.

449
00:23:14,430 --> 00:23:19,533
And we can pull your attention towards something that's on screen just by directing the camera

450
00:23:19,553 --> 00:23:23,416
towards it subtly, or just allow you to see something that you might not have seen if

451
00:23:23,436 --> 00:23:24,317
you just ran past it.

452
00:23:24,957 --> 00:23:28,800
And that's really, really interesting from a game design standpoint, because without

453
00:23:28,820 --> 00:23:33,243
the player even knowing what you're doing, you can easily draw her attention to enemies

454
00:23:33,283 --> 00:23:34,904
on the screen or loot, right?

455
00:23:34,964 --> 00:23:39,247
If you come in the room, the camera can sort of go to the right and they'll pick the right

456
00:23:39,307 --> 00:23:40,208
fork, right?

457
00:23:40,288 --> 00:23:41,669
It's kind of like a magician's force.

458
00:23:44,153 --> 00:23:46,877
You can also highlight buttons, levers, secret doors.

459
00:23:46,997 --> 00:23:47,798
I mean, how cool is that?

460
00:23:47,839 --> 00:23:48,660
That you're walking down the hall

461
00:23:48,700 --> 00:23:50,082
and the camera just kind of does something.

462
00:23:50,102 --> 00:23:51,965
You're like, whoa, what was that?

463
00:23:52,005 --> 00:23:52,686
I felt something.

464
00:23:52,886 --> 00:23:53,527
There's something here.

465
00:23:54,531 --> 00:23:55,872
So it can be quite subtle if you want it to be.

466
00:23:56,112 --> 00:23:57,954
Traps, you can give just the subtlest hint of,

467
00:23:58,074 --> 00:23:59,315
oh wait, there's something here to look for.

468
00:23:59,956 --> 00:24:02,539
Or even explicit markers left by a level designer.

469
00:24:02,579 --> 00:24:04,340
They say there's a statue in the middle

470
00:24:04,360 --> 00:24:06,102
and I want the players to take notice of it.

471
00:24:07,423 --> 00:24:08,864
Or even a procedural generation system

472
00:24:08,904 --> 00:24:10,286
could identify something as,

473
00:24:10,806 --> 00:24:12,228
this is an important bottleneck

474
00:24:12,368 --> 00:24:15,571
or this is an important piece of metadata

475
00:24:15,651 --> 00:24:18,333
like the center of the orc base

476
00:24:18,373 --> 00:24:20,415
and I wanna make sure that the player sort of catches it.

477
00:24:21,997 --> 00:24:25,380
The important thing here is to feather these influences.

478
00:24:26,120 --> 00:24:29,042
And so by feathering, I mean if I'm walking along,

479
00:24:29,062 --> 00:24:31,324
and I don't have a demo to show this, but if I'm walking along

480
00:24:31,684 --> 00:24:33,325
and then suddenly the camera goes down

481
00:24:33,726 --> 00:24:36,288
and then it comes back up, it feels very heavy handed

482
00:24:36,388 --> 00:24:37,749
and it feels jerky, right?

483
00:24:38,489 --> 00:24:42,892
So, generally we want to say, well, for everything that we kind of would like to show, which

484
00:24:42,912 --> 00:24:45,954
are these points of interest, how close are they to us?

485
00:24:46,734 --> 00:24:48,695
We have some threshold, right?

486
00:24:49,256 --> 00:24:53,358
We say, hey, if it's more than ten tiles away, I'm not interested in it.

487
00:24:54,199 --> 00:24:55,559
That's like too far off screen.

488
00:24:56,139 --> 00:24:58,941
But we might have some inner threshold like 5 tiles away to say,

489
00:24:58,981 --> 00:25:01,422
well, hey, we're getting interested in there.

490
00:25:01,762 --> 00:25:03,683
And so between 5 and 10 tiles away,

491
00:25:03,703 --> 00:25:06,985
we're going to sort of smoothly ramp up our level of interest in that thing.

492
00:25:07,545 --> 00:25:10,426
So if something is, you know, say 9 tiles away,

493
00:25:10,486 --> 00:25:12,687
it might be only 20% interesting to us.

494
00:25:15,149 --> 00:25:19,312
And if we have each point of interest has its own sense of importance,

495
00:25:20,033 --> 00:25:25,217
then we can just simply multiply its closeness by its importance to get a sense of weight.

496
00:25:25,857 --> 00:25:28,840
And then we can add up all the points of interest and do a weighted average,

497
00:25:28,920 --> 00:25:30,421
divide by the total sum of the weights,

498
00:25:30,901 --> 00:25:35,425
to sort of see where we want to be polled in aggregate.

499
00:25:39,874 --> 00:25:43,421
The big problem here is when we have multiple primary focus points, right?

500
00:25:43,501 --> 00:25:45,064
And Gauntlet is a typical example of this,

501
00:25:46,206 --> 00:25:49,472
where we've got four players and we have to have them all on the screen.

502
00:25:49,913 --> 00:25:50,374
And it's a co-op.

503
00:25:51,731 --> 00:25:52,632
So how do we handle that?

504
00:25:53,372 --> 00:25:54,373
There's some really bad ways.

505
00:25:54,533 --> 00:25:56,214
One, we could say the screen can't advance.

506
00:25:56,915 --> 00:25:59,997
So the player, the warrior who's off and getting a drink,

507
00:26:00,117 --> 00:26:01,058
is keeping everyone back.

508
00:26:01,098 --> 00:26:01,859
The screen can't move.

509
00:26:02,299 --> 00:26:03,720
We could say the players can move off screen.

510
00:26:03,760 --> 00:26:04,781
That's a terrible idea, right?

511
00:26:04,801 --> 00:26:05,942
Because then you don't know where you are.

512
00:26:06,362 --> 00:26:09,004
We could say players could die if they're forced off screen.

513
00:26:09,144 --> 00:26:10,245
That can be kind of dickish.

514
00:26:10,705 --> 00:26:14,468
But in a competitive game, maybe that could be cool,

515
00:26:14,528 --> 00:26:15,209
a strategic thing.

516
00:26:15,349 --> 00:26:16,730
We could teleport you back up to the group,

517
00:26:16,770 --> 00:26:18,631
which is probably what we'd do if we killed you also.

518
00:26:19,720 --> 00:26:23,002
We could have you drag the screen so the player that's pushing on the edge of the screen

519
00:26:23,062 --> 00:26:25,104
would sort of drag the other player with him.

520
00:26:25,464 --> 00:26:27,485
We could try to zoom out to encompass everyone.

521
00:26:28,006 --> 00:26:31,708
But all of these things have flaws and they're all intrusive into our gameplay.

522
00:26:32,668 --> 00:26:34,349
Lastly, we could split the screen, right?

523
00:26:34,850 --> 00:26:38,192
Which is actually the only thing we can do, frankly, that isn't an intrusive method.

524
00:26:40,293 --> 00:26:42,274
But split screen sucks because we're sharing the...

525
00:26:44,745 --> 00:26:46,025
screen real estate, right?

526
00:26:46,525 --> 00:26:48,946
And what's really sucky about that is in a co-op game,

527
00:26:49,126 --> 00:26:51,466
95% of the time, all the players are together.

528
00:26:51,926 --> 00:26:55,967
And now we're paying for 75% screen real estate waste.

529
00:26:56,547 --> 00:26:57,508
So what can be done about that?

530
00:27:00,568 --> 00:27:04,749
So we have this, lastly, this Voronoi split-screen cameras.

531
00:27:05,790 --> 00:27:08,470
And I'm gonna go probably two minutes long, I apologize.

532
00:27:09,651 --> 00:27:11,231
And the idea is like this Star Wars thing,

533
00:27:11,251 --> 00:27:13,051
we can split the screen, but only when necessary.

534
00:27:14,239 --> 00:27:20,902
So the way that looks is, let's say I have a player here,

535
00:27:21,643 --> 00:27:23,144
and the player can move around this world.

536
00:27:25,185 --> 00:27:27,566
And then I add another player into it,

537
00:27:27,806 --> 00:27:29,227
and the player can move around the world, right?

538
00:27:29,327 --> 00:27:30,287
And that's no problem.

539
00:27:30,687 --> 00:27:32,128
But if I actually look at.

540
00:27:34,996 --> 00:27:36,698
The way this would look in dynamic split screen

541
00:27:36,878 --> 00:27:39,201
is that the players, when they're together,

542
00:27:39,261 --> 00:27:40,662
are going to share a screen like this.

543
00:27:41,443 --> 00:27:43,105
And as I move apart from the player,

544
00:27:43,305 --> 00:27:44,727
it's going to split the screen dynamically.

545
00:27:45,307 --> 00:27:47,750
And the orientation of the split is always

546
00:27:47,830 --> 00:27:49,712
oriented so that as I go towards the split,

547
00:27:50,132 --> 00:27:52,275
I know I'm going towards the other player.

548
00:27:53,196 --> 00:27:55,538
All right, so how does that work?

549
00:27:58,327 --> 00:28:04,132
So we effectively figure out a screen-sized rect of how big is the view area that we want

550
00:28:04,232 --> 00:28:07,115
at the zoom depth that our artists want, that they'll yell at us if we zoom out.

551
00:28:07,715 --> 00:28:09,217
And we figure out if we can fit in it, great.

552
00:28:09,817 --> 00:28:12,719
If we can't comfortably fit in it, no problem, we're going to split the screen.

553
00:28:13,180 --> 00:28:17,824
And so we can figure out a halfway point along the line between us and make it perpendicular

554
00:28:17,844 --> 00:28:18,584
to that point.

555
00:28:19,245 --> 00:28:23,829
So here's the line between us, and then we make it perpendicular to it.

556
00:28:24,349 --> 00:28:26,591
And that's going to be the splitting edge.

557
00:28:27,687 --> 00:28:30,610
And then we can effectively move the screens apart from each other.

558
00:28:31,251 --> 00:28:36,999
And so now we have player A gets his own screen that's kind of more centered around him and

559
00:28:37,019 --> 00:28:40,103
player B gets his own screen and they're just shoved away from each other.

560
00:28:40,143 --> 00:28:45,190
And then we composite those two screens using a stencil into one screen.

561
00:28:45,850 --> 00:28:47,491
so we can sort of see each other across the split.

562
00:28:47,732 --> 00:28:49,993
But you'll notice A and B are not centered in their regions,

563
00:28:50,113 --> 00:28:51,114
which is kind of annoying.

564
00:28:51,434 --> 00:28:53,596
So we could then do something where we re-center

565
00:28:53,636 --> 00:28:54,937
the players in their regions.

566
00:28:55,057 --> 00:28:57,078
And then your direction towards the edge

567
00:28:57,678 --> 00:28:59,680
is still the direction towards the other player.

568
00:29:03,142 --> 00:29:06,104
And it's really important that we have feathering

569
00:29:06,144 --> 00:29:08,526
when we make these transitions between the split screen

570
00:29:08,546 --> 00:29:09,446
and the regular screen.

571
00:29:09,706 --> 00:29:11,328
Because actually, this is what it looks like.

572
00:29:11,648 --> 00:29:13,909
Here is me with the split screens.

573
00:29:13,949 --> 00:29:15,250
And as soon as I come within range.

574
00:29:16,658 --> 00:29:18,919
it's gonna make this awful snap, right?

575
00:29:18,939 --> 00:29:21,641
Because it's going from a camera that's centered around the both of us

576
00:29:21,721 --> 00:29:23,602
to two cameras that are centered around each of us.

577
00:29:24,242 --> 00:29:26,063
So if I instead, again, use feathering

578
00:29:26,484 --> 00:29:31,286
to sort of start easing so each view starts merging towards the combined view

579
00:29:31,366 --> 00:29:34,868
so that once they get close enough, then they're gonna be the same, they can line up.

580
00:29:36,449 --> 00:29:37,790
This is actually quite easy to do.

581
00:29:39,132 --> 00:29:41,774
And I recommend that you grab the slides later.

582
00:29:41,814 --> 00:29:44,717
And I have some instructions in here on how to do them.

583
00:29:45,297 --> 00:29:47,299
But effectively, you're going to break the world

584
00:29:47,339 --> 00:29:48,520
into these Voronoi regions.

585
00:29:48,961 --> 00:29:51,743
And then you're going to constrain that

586
00:29:51,783 --> 00:29:53,425
to the local area around the player.

587
00:29:54,280 --> 00:29:56,402
the players, which is this neighborhood down here in the left.

588
00:29:56,903 --> 00:30:00,887
And then you're going to use that as sort of the relative division of the screen above.

589
00:30:01,728 --> 00:30:07,675
So if we're really far apart in the world, then in the map above, we're going to be using

590
00:30:07,715 --> 00:30:09,877
that same shape that was cutting below.

591
00:30:10,458 --> 00:30:11,599
And then lastly, you can...

592
00:30:12,580 --> 00:30:17,021
do this and I'm not sure if other games other than Lego Star Wars have done this

593
00:30:17,642 --> 00:30:20,422
but so far I haven't seen any games do this where you have

594
00:30:21,162 --> 00:30:24,503
three or more players so it actually works quite brilliantly

595
00:30:24,663 --> 00:30:28,284
you can just move towards the screen and then these two players are sharing a screen

596
00:30:29,004 --> 00:30:31,665
and these two players can move towards each other and they're sharing a screen

597
00:30:31,685 --> 00:30:35,926
and

598
00:30:37,446 --> 00:30:38,526
if we do something like this

599
00:30:43,527 --> 00:30:46,308
The screens will kind of divide and balance however they need to.

600
00:30:46,768 --> 00:30:53,250
And you'll notice as A runs across the world and he runs past B, he joins with B and separates

601
00:30:53,290 --> 00:30:58,292
from B. He joins with D and separates from D. He joins with C and separates from C.

602
00:31:00,385 --> 00:31:00,666
All right.

603
00:31:01,426 --> 00:31:02,787
So that's all the time I have.

604
00:31:03,328 --> 00:31:05,229
The slides do have the full information

605
00:31:05,269 --> 00:31:07,010
about how to create, construct these regions.

606
00:31:07,431 --> 00:31:08,932
And it's the same technique where you're just

607
00:31:08,972 --> 00:31:10,633
stitching together four different points of view

608
00:31:10,733 --> 00:31:13,415
based on your relationship to each other in the world.

609
00:31:14,036 --> 00:31:16,197
And that becomes your screen relative to each other.

610
00:31:18,779 --> 00:31:19,059
All right.

611
00:31:19,279 --> 00:31:19,840
Thank you very much.

