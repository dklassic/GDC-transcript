1
00:00:04,177 --> 00:00:09,559
I'd like to know how many of you are currently a producer on a video game or VR entertainment?

2
00:00:09,559 --> 00:00:15,342
Okay, lots of people. Awesome. How many of you aren't a producer yet but want to get into production?

3
00:00:15,342 --> 00:00:20,205
Okay, and how many of you are game developers but not producers and you don't want to get

4
00:00:20,205 --> 00:00:25,227
into production? All right. And then how many of you are students? Oh, awesome. All right. Thanks a lot.

5
00:00:30,997 --> 00:00:36,002
Okay, John Carmack says that focus is a matter of deciding what things you're not going to

6
00:00:36,002 --> 00:00:36,082
do.

7
00:00:36,082 --> 00:00:41,266
All development teams are different, but almost all of them try to do more than is possible.

8
00:00:41,266 --> 00:00:46,191
Either just because you have a lot of great feature ideas, or because your stakeholders,

9
00:00:46,191 --> 00:00:51,576
that is your publisher, or your lead designer, or your fans, or you yourself, ask for too

10
00:00:51,576 --> 00:00:51,856
much.

11
00:00:55,223 --> 00:00:58,486
I've been a designer and a producer for about 15 years

12
00:00:58,486 --> 00:00:59,667
on a lot of different teams.

13
00:00:59,667 --> 00:01:02,170
And I've repeatedly seen that even teams

14
00:01:02,170 --> 00:01:05,092
that are great at coming up with a coherent, focused design

15
00:01:05,092 --> 00:01:07,614
plan are rarely able to avoid doing

16
00:01:07,614 --> 00:01:08,995
work that isn't in that plan.

17
00:01:08,995 --> 00:01:11,478
But the studios that survive are the ones

18
00:01:11,478 --> 00:01:14,280
who learn how to say no to features or publisher

19
00:01:14,280 --> 00:01:16,782
requirements or additional asks that they know

20
00:01:16,782 --> 00:01:17,923
they won't be able to get done.

21
00:01:17,923 --> 00:01:21,286
How many of you have shipped at least one game?

22
00:01:23,624 --> 00:01:25,145
And of those of you who have shipped a game,

23
00:01:25,145 --> 00:01:26,566
how many of you have ever shipped a game

24
00:01:26,566 --> 00:01:27,886
that had all of your good ideas in it?

25
00:01:27,886 --> 00:01:28,507
Yeah, everybody cuts ideas.

26
00:01:28,507 --> 00:01:29,267
You have to if you're going to ship.

27
00:01:29,267 --> 00:01:30,107
So the question is, how do you make sure

28
00:01:30,107 --> 00:01:33,149
that you're cutting the right things at the right time?

29
00:01:33,149 --> 00:01:35,530
Here's what I hope you're gonna get out of this talk.

30
00:01:35,530 --> 00:01:37,271
First of all, some tools for recognizing

31
00:01:37,271 --> 00:01:38,952
and preventing feature creeps.

32
00:01:49,496 --> 00:01:52,278
working within constraints, and making the best game

33
00:01:52,278 --> 00:01:53,919
that you can with the resources that you have.

34
00:01:53,919 --> 00:01:54,880
Some ways to manage the challenges of your role

35
00:01:54,880 --> 00:01:55,861
as a producer, while helping your team finish

36
00:01:55,861 --> 00:01:57,222
what you start.

37
00:01:57,222 --> 00:02:01,405
And some examples of successful teams that did stay focused

38
00:02:01,405 --> 00:02:03,106
on their game's core features and what they did

39
00:02:03,106 --> 00:02:03,627
to make that possible.

40
00:02:03,627 --> 00:02:05,768
And last, just knowledge that you are not alone.

41
00:02:05,768 --> 00:02:08,991
Other game teams have faced the same problems

42
00:02:08,991 --> 00:02:10,772
that you're facing right now.

43
00:02:19,169 --> 00:02:21,711
They've solved them and they have shipped amazing games.

44
00:02:21,711 --> 00:02:22,331
OK, this is the Iron Triangle.

45
00:02:22,331 --> 00:02:23,572
How many of you are familiar with this or have seen it

46
00:02:23,572 --> 00:02:23,773
before?

47
00:02:23,773 --> 00:02:24,073
Oh, awesome.

48
00:02:24,073 --> 00:02:24,113
OK.

49
00:02:24,113 --> 00:02:27,856
So a lot of game developers are familiar with this

50
00:02:27,856 --> 00:02:31,038
as cheap, fast, or good pick two.

51
00:02:31,038 --> 00:02:34,400
But there's another way to look at it.

52
00:02:34,400 --> 00:02:39,784
Each corner of this triangle represents a constraint

53
00:02:39,784 --> 00:02:41,065
on one of your resources.

54
00:02:41,065 --> 00:02:44,248
So schedule is a constraint on how much time you have.

55
00:02:45,206 --> 00:02:46,947
Budget is a constraint on how much money you have.

56
00:02:46,947 --> 00:02:51,531
And scope is a constraint on how many features

57
00:02:51,531 --> 00:02:51,992
you can put in your game.

58
00:02:51,992 --> 00:02:54,614
Now, time and money are pretty obvious.

59
00:02:54,614 --> 00:02:56,715
They're limited resources, and sometimes they're

60
00:02:56,715 --> 00:02:57,316
extremely limited.

61
00:02:57,316 --> 00:02:59,898
There's not much you can do about that most of the time.

62
00:02:59,898 --> 00:03:02,760
But scope is something you definitely can control and do

63
00:03:02,760 --> 00:03:03,481
something about.

64
00:03:03,481 --> 00:03:04,562
You can think of the area of the iron triangle

65
00:03:04,562 --> 00:03:08,465
as sort of the overall potential quality for your game.

66
00:03:08,465 --> 00:03:12,689
The farther out any of those corners is from the center,

67
00:03:12,689 --> 00:03:14,790
the higher quality your game could be.

68
00:03:15,910 --> 00:03:18,051
But the problem is, when you're making a game,

69
00:03:18,051 --> 00:03:21,253
your schedule and budget probably look a lot more like this.

70
00:03:21,253 --> 00:03:24,894
So people tend to focus on that third corner, scope,

71
00:03:24,894 --> 00:03:26,895
that is your game's feature set

72
00:03:26,895 --> 00:03:28,415
or the design vision for your game.

73
00:03:28,415 --> 00:03:31,857
If this is really good, you can make a great game

74
00:03:31,857 --> 00:03:34,058
even with very limited time and very limited budget.

75
00:03:34,058 --> 00:03:35,618
A lot of indie developers do that all the time.

76
00:03:37,962 --> 00:03:40,383
Now, a lot of game developers, especially new ones,

77
00:03:40,383 --> 00:03:42,725
will try to just add as many features as possible

78
00:03:42,725 --> 00:03:44,066
in the belief that it'll make their game better.

79
00:03:44,066 --> 00:03:44,946
They just push that corner out

80
00:03:44,946 --> 00:03:46,347
as far as it could possibly go.

81
00:03:46,347 --> 00:03:47,868
They try to add everything that they think of.

82
00:03:47,868 --> 00:03:51,250
But the problem is that if your time and money are limited,

83
00:03:51,250 --> 00:03:53,131
which they are, you will not be able

84
00:03:53,131 --> 00:03:55,493
to finish all of those features.

85
00:03:55,493 --> 00:03:56,934
It's just a law of physics

86
00:03:56,934 --> 00:03:58,675
that you cannot get all that stuff done.

87
00:03:58,675 --> 00:03:59,656
And if you ship a game

88
00:03:59,656 --> 00:04:01,457
that has a bunch of unfinished features,

89
00:04:01,457 --> 00:04:03,618
your quality will be lower, not higher.

90
00:04:03,618 --> 00:04:05,679
Only finished features count

91
00:04:05,679 --> 00:04:06,880
for improving your game's quality.

92
00:04:08,019 --> 00:04:11,301
So that means that you need to make sure

93
00:04:11,301 --> 00:04:15,423
that the features you're choosing to spend

94
00:04:15,423 --> 00:04:18,485
your limited resources on are the right ones for your game.

95
00:04:18,485 --> 00:04:19,986
So really, to maximize that corner of the triangle,

96
00:04:19,986 --> 00:04:20,846
you need to focus, not just add stuff.

97
00:04:20,846 --> 00:04:23,768
Great game development teams have a clear,

98
00:04:23,768 --> 00:04:25,109
shared vision of the game design

99
00:04:25,109 --> 00:04:27,150
and an infectious enthusiasm for that design.

100
00:04:27,150 --> 00:04:28,070
And this is from the Game Outcomes Project,

101
00:04:28,070 --> 00:04:30,792
which was published about a year and a half ago,

102
00:04:30,792 --> 00:04:32,013
and you should all look it up.

103
00:04:32,013 --> 00:04:36,335
It's extremely informative about how to make good games.

104
00:04:37,355 --> 00:04:40,719
Paul Tozer and his team surveyed hundreds of game developers, they asked them about

105
00:04:40,719 --> 00:04:44,523
their development process, their teamwork, their culture, and then they compared those

106
00:04:44,523 --> 00:04:49,087
responses and did statistical analysis comparing what the team said to the success of their

107
00:04:49,087 --> 00:04:49,788
finished games.

108
00:04:50,892 --> 00:04:52,313
Now the results are really interesting,

109
00:04:52,313 --> 00:04:53,655
some of them are kind of surprising,

110
00:04:53,655 --> 00:04:56,177
but their strongest result is not surprising,

111
00:04:56,177 --> 00:04:58,779
and that is that teams that had a viable, compelling,

112
00:04:58,779 --> 00:05:01,301
clear, and well-communicated shared vision

113
00:05:01,301 --> 00:05:03,383
were the most likely to make a successful game.

114
00:05:03,383 --> 00:05:05,885
And that doesn't just mean financially successful

115
00:05:05,885 --> 00:05:07,866
or critically successful, it also means games

116
00:05:07,866 --> 00:05:10,068
that met or exceeded the team's own expectations

117
00:05:10,068 --> 00:05:11,269
for what they were trying to make.

118
00:05:11,269 --> 00:05:13,251
So if you only take one thing away from the talk,

119
00:05:13,251 --> 00:05:16,474
it's this, have a clear design vision for your game

120
00:05:16,474 --> 00:05:19,176
and make sure that your whole team believes in it.

121
00:05:21,112 --> 00:05:23,913
So let's talk about some ways that you can create

122
00:05:23,913 --> 00:05:26,874
that focused vision and how you can communicate it

123
00:05:26,874 --> 00:05:28,614
to your team in a way that creates

124
00:05:28,614 --> 00:05:31,155
that infectious enthusiasm.

125
00:05:31,155 --> 00:05:32,935
And by the way, Paul Tozer is talking on Thursday,

126
00:05:32,935 --> 00:05:33,596
so I recommend that as well.

127
00:05:33,596 --> 00:05:36,596
All right, so if you have a strong design direction

128
00:05:36,596 --> 00:05:39,577
for your game, you can distill your design down

129
00:05:39,577 --> 00:05:42,398
into one clear, compelling mission statement.

130
00:05:42,398 --> 00:05:44,259
The No One Lives Forever development team

131
00:05:44,259 --> 00:05:46,179
had a concise mission statement in place

132
00:05:46,179 --> 00:05:48,340
when their publishing contract was signed,

133
00:05:48,340 --> 00:05:49,560
and they used it to guide their work

134
00:05:49,560 --> 00:05:50,560
throughout the game's development.

135
00:05:52,055 --> 00:05:53,576
And this was their mission statement.

136
00:05:53,576 --> 00:05:57,719
Make the player feel like the hero of a 60s espionage movie.

137
00:05:57,719 --> 00:05:59,420
It has to have a strong narrative.

138
00:05:59,420 --> 00:06:01,702
It must feature a fiercely competent hero

139
00:06:01,702 --> 00:06:03,704
and an assortment of despicable villains.

140
00:06:03,704 --> 00:06:06,906
The hero must have access to an impressive arsenal of gadgets

141
00:06:06,906 --> 00:06:10,629
worthy of Get Smart, memorable death-defying situations,

142
00:06:10,629 --> 00:06:12,771
opportunities for stealth as well as action,

143
00:06:12,771 --> 00:06:14,792
a variety of exotic locales.

144
00:06:14,792 --> 00:06:16,514
And finally, every aspect of the presentation

145
00:06:16,514 --> 00:06:17,915
must convincingly evoke the era.

146
00:06:19,409 --> 00:06:20,810
And this statement covers a lot of ground,

147
00:06:20,810 --> 00:06:23,012
and you can see how this mission statement

148
00:06:23,012 --> 00:06:25,354
could help a development team define everything in the game.

149
00:06:25,354 --> 00:06:28,296
Character designs, gun sound effects,

150
00:06:28,296 --> 00:06:30,438
level design tools, lighting tech even.

151
00:06:30,438 --> 00:06:32,159
It gives the team really clear guidelines

152
00:06:32,159 --> 00:06:33,420
on how to prioritize their work.

153
00:06:33,420 --> 00:06:35,882
And it also gives them a way to determine

154
00:06:35,882 --> 00:06:37,483
when to say no to a new idea

155
00:06:37,483 --> 00:06:38,924
that does not fit this design vision.

156
00:06:42,730 --> 00:06:43,791
Craig Hubbard, the lead designer,

157
00:06:43,791 --> 00:06:46,312
said it was our intention that every feature, task,

158
00:06:46,312 --> 00:06:48,474
and ounce of effort would ultimately

159
00:06:48,474 --> 00:06:50,675
either support the vision or end up

160
00:06:50,675 --> 00:06:52,136
on the cutting room floor.

161
00:06:52,136 --> 00:06:54,097
Remember that limits on what you're able to do

162
00:06:54,097 --> 00:06:56,539
will always exist, but you can make sure

163
00:06:56,539 --> 00:06:58,320
that you're only spending time on things

164
00:06:58,320 --> 00:07:00,561
that directly support what makes your game great.

165
00:07:05,099 --> 00:07:09,241
A mission statement is great if you have a strong design team or director and a clear

166
00:07:09,241 --> 00:07:11,623
idea of the game you want to make.

167
00:07:11,623 --> 00:07:14,204
But what if your game idea is more vague?

168
00:07:14,204 --> 00:07:18,006
Pillars are a way to identify and communicate what your game vision is.

169
00:07:18,006 --> 00:07:19,787
Here's what pillars are and how you can use them.

170
00:07:19,787 --> 00:07:24,470
Pillars are major features or selling points or unique aspects of your game that can be

171
00:07:24,470 --> 00:07:26,551
a strong foundation to build on.

172
00:07:26,551 --> 00:07:30,653
Think of them as the core features that will make or break your game.

173
00:07:30,653 --> 00:07:34,075
If you execute on them really well, your game will be successful.

174
00:07:36,912 --> 00:07:40,613
So first, before you start development, early as possible, in pre-production at least, or

175
00:07:40,613 --> 00:07:45,914
at least very early in development, decide as a team on three pillars for your game.

176
00:07:45,914 --> 00:07:50,115
Three is a good number because it requires some discussion from your whole team and some

177
00:07:50,115 --> 00:07:51,655
buy-in to decide on three.

178
00:07:51,655 --> 00:07:55,136
It's also an easy amount to remember and any more than three can tend to split your focus.

179
00:07:55,136 --> 00:07:56,216
Good pillars are actionable, specific, and positive.

180
00:08:02,009 --> 00:08:05,291
They should cover large areas of your project and make it easy for your developers to know

181
00:08:05,291 --> 00:08:08,633
whether their work is aligning to your goals.

182
00:08:08,633 --> 00:08:13,797
And pillars are often very similar to a game's unique selling points or marketing points,

183
00:08:13,797 --> 00:08:17,519
which makes sense because in a way pillars are how your team markets your game to yourselves.

184
00:08:17,519 --> 00:08:22,062
Like the mission statement, pillars are a way for your team to have context for what

185
00:08:22,062 --> 00:08:23,903
they're working on and how it supports the game vision.

186
00:08:24,989 --> 00:08:26,029
Of all the games I've ever worked on,

187
00:08:26,029 --> 00:08:28,231
the ones that have strong pillars from the start

188
00:08:28,231 --> 00:08:31,153
were the ones where the development teams

189
00:08:31,153 --> 00:08:33,055
did their best work and fully understood

190
00:08:33,055 --> 00:08:34,056
how that work was supporting the game design.

191
00:08:34,056 --> 00:08:36,037
And the first game I ever worked on was Dungeon Siege.

192
00:08:36,037 --> 00:08:39,280
And though we didn't have a specific enough idea

193
00:08:39,280 --> 00:08:40,901
of the design of the game

194
00:08:40,901 --> 00:08:43,784
to have a really detailed mission statement,

195
00:08:43,784 --> 00:08:45,625
we did know the main selling points

196
00:08:45,625 --> 00:08:46,146
of the game we were making.

197
00:08:46,146 --> 00:08:49,448
And that was strategic party-based gameplay,

198
00:08:49,448 --> 00:08:51,250
painless loot management,

199
00:08:51,250 --> 00:08:53,351
and a giant continuous world with no loading screens.

200
00:08:54,334 --> 00:08:56,336
Now Dungeon Siege 1 shipped 14 years ago,

201
00:08:56,336 --> 00:08:58,618
and I still remember these pillars really clearly.

202
00:08:58,618 --> 00:09:01,320
And that's because they were great.

203
00:09:01,320 --> 00:09:02,401
They were what we told the press.

204
00:09:02,401 --> 00:09:03,642
They got players excited.

205
00:09:03,642 --> 00:09:05,843
The development team was excited about making this game.

206
00:09:05,843 --> 00:09:07,865
These clearly illustrate what the game

207
00:09:07,865 --> 00:09:09,486
is going to be like to play.

208
00:09:09,486 --> 00:09:10,847
And they gave the team good guidelines

209
00:09:10,847 --> 00:09:11,968
for prioritizing their work.

210
00:09:11,968 --> 00:09:15,411
These pillars are vaguer than a full mission statement

211
00:09:15,411 --> 00:09:17,112
or a 40-page design doc, but they

212
00:09:17,112 --> 00:09:18,293
did leave us a little bit of room

213
00:09:18,293 --> 00:09:19,875
to try some different things as we built the game.

214
00:09:21,385 --> 00:09:22,785
And as a level designer on that game,

215
00:09:22,785 --> 00:09:24,505
I found these pillars really useful for my work,

216
00:09:24,505 --> 00:09:25,426
especially number three,

217
00:09:25,426 --> 00:09:28,166
because knowing that we were trying to make

218
00:09:28,166 --> 00:09:30,687
a big, continuous fantasy world with no loading screens

219
00:09:30,687 --> 00:09:31,787
let me know that, for example,

220
00:09:31,787 --> 00:09:35,248
I should prioritize exits and entrances to the dungeons,

221
00:09:35,248 --> 00:09:37,448
making those smooth transitions that are seamless,

222
00:09:37,448 --> 00:09:40,889
over, say, making the story really great.

223
00:09:40,889 --> 00:09:41,729
Now, when the game came out,

224
00:09:41,729 --> 00:09:43,529
it was reviewed and people noticed

225
00:09:43,529 --> 00:09:44,669
that the story wasn't very great,

226
00:09:44,669 --> 00:09:46,370
but that was because it wasn't one of our priorities.

227
00:09:46,370 --> 00:09:47,530
The continuous world, on the other hand,

228
00:09:47,530 --> 00:09:48,970
felt really good to players and they enjoyed that.

229
00:09:51,932 --> 00:09:56,933
So pillars are a really great tool.

230
00:09:56,933 --> 00:09:59,214
You should spend time on them.

231
00:09:59,214 --> 00:10:00,434
You should work on sticking to them.

232
00:10:00,434 --> 00:10:01,475
Because here's an example of what happens

233
00:10:01,475 --> 00:10:01,895
when you don't do that.

234
00:10:01,895 --> 00:10:04,555
Now Diablo 3 during its development

235
00:10:04,555 --> 00:10:06,096
had seven design pillars.

236
00:10:06,096 --> 00:10:08,517
There are two problems with these.

237
00:10:08,517 --> 00:10:11,558
First of all, some of them are extremely vague.

238
00:10:11,558 --> 00:10:14,819
Especially strong setting and highly replayable.

239
00:10:14,819 --> 00:10:16,279
Neither of those are much more specific

240
00:10:16,279 --> 00:10:18,080
than just saying my game is going to be good.

241
00:10:19,516 --> 00:10:20,596
And the thing is, as a developer,

242
00:10:20,596 --> 00:10:22,517
that doesn't help me with my day-to-day decision making

243
00:10:22,517 --> 00:10:24,077
because I already want to make a good game.

244
00:10:24,077 --> 00:10:25,657
That's already one of my goals.

245
00:10:25,657 --> 00:10:28,218
And as a player, this doesn't really get me excited

246
00:10:28,218 --> 00:10:29,838
about the game because I don't really understand

247
00:10:29,838 --> 00:10:32,419
what highly replayable or strong setting means.

248
00:10:32,419 --> 00:10:35,560
And second, when Diablo III was released,

249
00:10:35,560 --> 00:10:37,420
the game actually didn't do a very good job

250
00:10:37,420 --> 00:10:38,681
of expressing the pillars here

251
00:10:38,681 --> 00:10:41,001
that are specific and actionable.

252
00:10:41,001 --> 00:10:44,042
Jay Wilson talks about this on his GDC 2013 talk

253
00:10:44,042 --> 00:10:45,522
on the game's design.

254
00:10:45,522 --> 00:10:48,083
So when Diablo III came out,

255
00:10:48,808 --> 00:10:51,570
The loop progression was actually fairly poorly paced.

256
00:10:51,570 --> 00:10:53,732
The character abilities weren't very well differentiated.

257
00:10:53,732 --> 00:10:56,374
And there's one more thing.

258
00:10:56,374 --> 00:10:57,875
I don't see anything on this list

259
00:10:57,875 --> 00:10:59,597
about a real money auction house.

260
00:10:59,597 --> 00:11:03,299
And in fact, it directly conflicts

261
00:11:03,299 --> 00:11:04,921
with at least two of these pillars.

262
00:11:04,921 --> 00:11:08,123
But that feature took up a lot of development time

263
00:11:08,123 --> 00:11:08,584
and effort.

264
00:11:08,584 --> 00:11:11,586
It wasn't ready when the game launched.

265
00:11:11,586 --> 00:11:12,967
Players didn't particularly like it

266
00:11:12,967 --> 00:11:14,308
and it was ultimately shut down.

267
00:11:16,638 --> 00:11:18,520
Now I'm not saying any of this to criticize Diablo 3.

268
00:11:18,520 --> 00:11:22,163
The game was successful by many metrics and it made a ton of money.

269
00:11:22,163 --> 00:11:27,127
But the team did not stay as well focused on their design vision as they wanted to.

270
00:11:27,127 --> 00:11:31,892
And I'm bringing this up because even Blizzard, which is arguably the most successful development

271
00:11:31,892 --> 00:11:33,733
studio ever, has trouble with this.

272
00:11:33,733 --> 00:11:35,355
This is really hard.

273
00:11:35,355 --> 00:11:40,119
Creating a solid vision and staying focused on it is very difficult even for experts.

274
00:11:40,119 --> 00:11:42,762
So make sure that you spend a lot of time working on it.

275
00:11:47,027 --> 00:11:49,729
Here's a tool that can make it much more doable,

276
00:11:49,729 --> 00:11:52,091
which is voluntarily setting constraints

277
00:11:52,091 --> 00:11:53,332
on what you're making.

278
00:11:53,332 --> 00:11:54,873
Limit your focus and your efforts

279
00:11:54,873 --> 00:11:57,195
to just what you know will make your game really great.

280
00:11:57,195 --> 00:11:59,717
When the Rocksteady development team

281
00:11:59,717 --> 00:12:01,459
started work on Batman Arkham City,

282
00:12:01,459 --> 00:12:03,620
they knew that they'd not only need to increase

283
00:12:03,620 --> 00:12:06,323
the scope of the game from Batman Arkham Asylum,

284
00:12:06,323 --> 00:12:09,405
but also that they'd need to keep the design constrained

285
00:12:09,405 --> 00:12:10,907
to something their team could build

286
00:12:10,907 --> 00:12:12,168
to the same level of quality.

287
00:12:12,168 --> 00:12:13,749
Here's how Sefton Hill, the game director

288
00:12:13,749 --> 00:12:15,310
for the Arkham series, described their decision.

289
00:12:17,699 --> 00:12:21,865
Players will accept whatever rules the developer decides upon as long as those rules are smart

290
00:12:21,865 --> 00:12:22,906
and fun and fair.

291
00:12:22,906 --> 00:12:26,711
When we approached the problem of creating an open world in Arkham City, we decided from

292
00:12:26,711 --> 00:12:29,996
the outset to create what we called the world's smallest open world game.

293
00:12:29,996 --> 00:12:34,242
We created a rule that made sure that we were going to have to concentrate all our efforts

294
00:12:34,242 --> 00:12:35,543
on the things that really mattered to us.

295
00:12:37,773 --> 00:12:39,754
Now, the world's smallest open-world game

296
00:12:39,754 --> 00:12:40,694
is a really good constraint.

297
00:12:40,694 --> 00:12:42,975
You can see how this would help the development team

298
00:12:42,975 --> 00:12:44,156
make smart decisions.

299
00:12:44,156 --> 00:12:47,338
It impacts things like enemy density and level size,

300
00:12:47,338 --> 00:12:49,279
how Batman moves through the world.

301
00:12:49,279 --> 00:12:50,859
Those can all be guided by this rule,

302
00:12:50,859 --> 00:12:52,320
and the team can keep coming back to it

303
00:12:52,320 --> 00:12:53,581
as what they're trying to make.

304
00:12:53,581 --> 00:12:55,722
It allowed the team to create a world

305
00:12:55,722 --> 00:12:57,723
that felt as dense and well-crafted

306
00:12:57,723 --> 00:12:58,843
as the levels of Arkham Asylum,

307
00:12:58,843 --> 00:13:00,824
but that also felt much broader in scope

308
00:13:00,824 --> 00:13:02,745
and that allowed the player to make a lot more decisions.

309
00:13:03,878 --> 00:13:08,301
And very importantly, it empowered the team to say no to ideas that did not fit this voluntary

310
00:13:08,301 --> 00:13:08,581
constraint.

311
00:13:08,581 --> 00:13:10,422
Making games is hard enough, so you should create rules which allow you to focus all

312
00:13:10,422 --> 00:13:12,844
of your energy on what counts.

313
00:13:12,844 --> 00:13:18,067
If you have strong design rules that your whole team believes in, you can make sure

314
00:13:18,067 --> 00:13:22,529
that features that don't support the vision don't get worked on.

315
00:13:22,529 --> 00:13:26,472
So you don't have to spend any of your precious constrained resources, your time and your

316
00:13:26,472 --> 00:13:28,433
money on things that don't fit your vision.

317
00:13:31,949 --> 00:13:33,430
This is another pretty well-known example.

318
00:13:33,430 --> 00:13:36,994
This is a list of Chuck Jones' rules for the Roadrunner cartoons.

319
00:13:36,994 --> 00:13:39,516
This gets passed around the internet pretty frequently.

320
00:13:39,516 --> 00:13:43,319
And it's easy to see how this list of rules would make it really easy to say no to ideas

321
00:13:43,319 --> 00:13:45,341
that really don't make sense in a Roadrunner cartoon.

322
00:13:45,341 --> 00:13:49,785
Chuck Jones was a strong creative director with a very clear vision and he used these

323
00:13:49,785 --> 00:13:52,668
rules to clearly communicate to his team what his design vision was.

324
00:13:52,668 --> 00:13:56,691
And in a way that made it really easy for them to evaluate whether their own work and

325
00:13:56,691 --> 00:13:57,772
ideas were a good fit or not.

326
00:14:01,591 --> 00:14:03,713
Okay, so what if you don't even know what your game should be yet?

327
00:14:03,713 --> 00:14:06,035
Maybe you just have a seed of a good idea,

328
00:14:06,035 --> 00:14:08,617
or a really vague idea of what direction you want to go,

329
00:14:08,617 --> 00:14:10,759
but you know that you'll need a lot of exploration

330
00:14:10,759 --> 00:14:13,061
before you're able to find that clear vision.

331
00:14:13,061 --> 00:14:14,022
There are good ways to do that too.

332
00:14:14,022 --> 00:14:17,105
Octodad is a good example of this process.

333
00:14:17,105 --> 00:14:20,488
The team of student developers started with a basic idea for their game,

334
00:14:20,488 --> 00:14:23,871
and then they did a lot of prototyping, early playtesting,

335
00:14:23,871 --> 00:14:25,793
and major iterations on the design.

336
00:14:25,793 --> 00:14:27,434
Because their game was so unique,

337
00:14:28,058 --> 00:14:30,479
They didn't have a lot of other games to compare it to.

338
00:14:30,479 --> 00:14:34,400
The possibility space of what they could build or what could be fun in this type of game

339
00:14:34,400 --> 00:14:35,421
was very large.

340
00:14:35,421 --> 00:14:40,102
So especially when you're building something very innovative or that no one's done before,

341
00:14:40,102 --> 00:14:43,663
an agile exploration approach to your game can save you a lot of wasted work and it can

342
00:14:43,663 --> 00:14:44,944
get you to a good game a lot faster.

343
00:14:51,345 --> 00:14:53,605
So this is how games are traditionally designed.

344
00:14:53,605 --> 00:14:57,647
You start with a design document, spend a bunch of time building that, you get to version

345
00:14:57,647 --> 00:15:02,409
1, and then you realize, unless you're working on a slam dunk sequel, that you need to make

346
00:15:02,409 --> 00:15:04,149
some big changes to actually make a good game.

347
00:15:04,149 --> 00:15:07,490
So then you do a lot more work, then you finish version 2, and then you ship it.

348
00:15:08,773 --> 00:15:10,114
But more developers are starting to use

349
00:15:10,114 --> 00:15:11,315
a more agile approach.

350
00:15:11,315 --> 00:15:13,255
They have less of a clear target,

351
00:15:13,255 --> 00:15:14,956
but just sort of a general idea.

352
00:15:14,956 --> 00:15:16,777
They work toward it, but then earlier

353
00:15:16,777 --> 00:15:19,278
they prototype and play test, they iterate,

354
00:15:19,278 --> 00:15:21,819
and they change their design a lot more frequently.

355
00:15:21,819 --> 00:15:25,001
This means that you do less work on the game overall,

356
00:15:25,001 --> 00:15:27,342
more of that work is spent on the right features,

357
00:15:27,342 --> 00:15:28,542
and it means you don't have a clear vision

358
00:15:28,542 --> 00:15:29,543
at the start of your project.

359
00:15:29,543 --> 00:15:32,364
And that's okay, as long as you make sure

360
00:15:32,364 --> 00:15:34,885
that you leave yourself the time to iterate

361
00:15:34,885 --> 00:15:36,506
and that time to find what your vision is

362
00:15:36,506 --> 00:15:37,206
and focus in on it.

363
00:15:39,541 --> 00:15:41,802
Now this can be risky, so you need to make sure

364
00:15:41,802 --> 00:15:44,503
that creating that core vision to find your game

365
00:15:44,503 --> 00:15:46,063
is your top priority at all times,

366
00:15:46,063 --> 00:15:48,724
and that you don't get too distracted by cool ideas

367
00:15:48,724 --> 00:15:50,485
that don't really get you closer to that finished game.

368
00:15:50,485 --> 00:15:52,426
Once you have your game vision,

369
00:15:52,426 --> 00:15:53,966
once you've identified what you're going to be,

370
00:15:53,966 --> 00:15:55,327
you're still gonna have plenty of work to do.

371
00:15:58,306 --> 00:16:02,409
Everything from the way Octodad walks to the kitchen challenges to Octodad's manly tentacle

372
00:16:02,409 --> 00:16:06,433
mustache was the product of an exhaustive list of possibilities and seldom did we go

373
00:16:06,433 --> 00:16:07,274
with our first idea.

374
00:16:07,274 --> 00:16:10,436
Our dedication to exploring every avenue served us well.

375
00:16:10,436 --> 00:16:15,721
There's a post-mortem by the Octodad team up on Game Career Guide and it's a good read.

376
00:16:16,261 --> 00:16:21,003
The Octadad team represents the best and worst of this agile design approach.

377
00:16:21,003 --> 00:16:25,265
They play tested early, iterated on their core idea and shipped something unusual and

378
00:16:25,265 --> 00:16:25,965
attention grabbing and fun.

379
00:16:25,965 --> 00:16:28,626
But they also got distracted coming up with a lot more features than they could build.

380
00:16:28,626 --> 00:16:30,827
They played a lot of Minecraft and they ended up cutting really big chunks out of their

381
00:16:30,827 --> 00:16:31,027
game.

382
00:16:31,027 --> 00:16:31,127
Okay.

383
00:16:31,127 --> 00:16:33,908
So you have a good design vision for your game or you at least have a plan of how to

384
00:16:33,908 --> 00:16:34,188
come up with one.

385
00:16:34,188 --> 00:16:35,349
Now you have to protect that vision by managing your scope.

386
00:16:46,122 --> 00:16:47,764
because sometimes your lead designer is this guy.

387
00:16:47,764 --> 00:16:48,765
I was just playing World of Warcraft

388
00:16:48,765 --> 00:16:51,387
when I was struck by a flash of inspiration.

389
00:16:51,387 --> 00:16:54,750
Our game should have epic battles.

390
00:16:54,750 --> 00:16:56,511
Working on the email to send to the rest of the team now.

391
00:16:56,511 --> 00:16:58,353
I think we've all worked with this guy.

392
00:16:58,353 --> 00:17:02,156
You know, his heart is in the right place,

393
00:17:02,156 --> 00:17:05,419
but this is why scope management is so important.

394
00:17:05,419 --> 00:17:07,681
Inspiration is everywhere.

395
00:17:07,681 --> 00:17:09,763
Your team is made up of a bunch of smart people

396
00:17:09,763 --> 00:17:12,085
who decided to be game developers on purpose.

397
00:17:12,085 --> 00:17:14,046
They're never, ever going to run out of ideas.

398
00:17:15,195 --> 00:17:18,356
Ideas are an infinite resource.

399
00:17:18,356 --> 00:17:22,978
But finishing those ideas, finishing a game that includes

400
00:17:22,978 --> 00:17:24,098
some of those ideas, requires resources

401
00:17:24,098 --> 00:17:24,598
that are not infinite.

402
00:17:24,598 --> 00:17:25,478
Okay, back to this again, the iron triangle.

403
00:17:25,478 --> 00:17:28,440
Constraints feel really frustrating,

404
00:17:28,440 --> 00:17:33,521
especially when you're trying to make something amazing.

405
00:17:33,521 --> 00:17:34,982
We often get into the habit of thinking

406
00:17:34,982 --> 00:17:37,223
that if our publisher would just give us more money,

407
00:17:37,223 --> 00:17:39,023
or if we just had a little more time,

408
00:17:39,023 --> 00:17:41,444
or if our team would just work longer hours,

409
00:17:41,444 --> 00:17:42,605
or if your team would just get on board

410
00:17:42,605 --> 00:17:44,285
with all of your awesome ideas that you wanna put in.

411
00:17:44,602 --> 00:17:47,824
that your game would just automatically be more awesome.

412
00:17:47,824 --> 00:17:48,965
But that's not actually true.

413
00:17:48,965 --> 00:17:52,087
Big budgets, lots of time, and freedom

414
00:17:52,087 --> 00:17:55,650
from creative constraints are seductive traps.

415
00:17:55,650 --> 00:17:57,111
Don't fall into them.

416
00:17:57,111 --> 00:18:00,154
Remember how having a shared, clear design vision

417
00:18:00,154 --> 00:18:02,796
was the number one correlating factor to game success?

418
00:18:02,796 --> 00:18:05,818
The number two factor was protecting that vision

419
00:18:05,818 --> 00:18:07,179
by managing design risk.

420
00:18:07,179 --> 00:18:09,701
That is, protecting against building the wrong things.

421
00:18:10,990 --> 00:18:15,273
Statistically, the biggest risk to your game is not lack of funding or lack of time or

422
00:18:15,273 --> 00:18:16,915
someone else stealing your ideas.

423
00:18:16,915 --> 00:18:21,258
The biggest risk is wasting your precious development resources building the wrong features.

424
00:18:21,258 --> 00:18:24,161
Embracing your constraints will help you guard against that.

425
00:18:24,161 --> 00:18:27,003
Say no to ideas that don't fit your time or your budget constraints or don't fit your

426
00:18:27,003 --> 00:18:27,243
game's vision.

427
00:18:27,243 --> 00:18:29,425
Make the iron triangle your ally and use it to protect your game.

428
00:18:29,425 --> 00:18:33,288
The features that you don't do are just as important as the ones you do.

429
00:18:40,605 --> 00:18:42,086
If it's going to take away from the game,

430
00:18:42,086 --> 00:18:44,207
then not doing that feature is an important decision.

431
00:18:44,207 --> 00:18:46,608
And this is really hard to believe

432
00:18:46,608 --> 00:18:47,768
when you're working on a game.

433
00:18:47,768 --> 00:18:50,729
Often, your vision of what the completed game will be like

434
00:18:50,729 --> 00:18:52,290
includes all of your cool ideas

435
00:18:52,290 --> 00:18:55,131
and anything else that tends to pop into your head.

436
00:18:55,131 --> 00:18:58,793
But when you have to cut really big features,

437
00:18:58,793 --> 00:19:01,254
it's hard to imagine a player seeing the finished project

438
00:19:01,254 --> 00:19:02,894
and not noticing those giant holes

439
00:19:02,894 --> 00:19:04,995
that were left by your cuts.

440
00:19:04,995 --> 00:19:06,076
But if the rest of the game

441
00:19:06,076 --> 00:19:07,796
embodies your clear, focused vision,

442
00:19:07,796 --> 00:19:09,637
your players will not see what you had to cut away.

443
00:19:11,112 --> 00:19:14,835
Incomplete or badly implemented features or features that don't really fit your game's

444
00:19:14,835 --> 00:19:19,258
design vision do stick out like a sore thumb, but missing features are almost always invisible

445
00:19:19,258 --> 00:19:20,639
if the rest of the game is executed well.

446
00:19:20,639 --> 00:19:22,360
As Bruce Lee said, hack away at the unessential.

447
00:19:22,360 --> 00:19:24,322
Now the last big game I worked on was Middle Earth Shadow of Mordor.

448
00:19:31,184 --> 00:19:36,188
This game started and ended with a very strong design vision, but during production a lot

449
00:19:36,188 --> 00:19:38,250
of features were added that were later cut.

450
00:19:38,250 --> 00:19:39,671
And I'm not talking minor features.

451
00:19:39,671 --> 00:19:44,555
I'm talking about major game systems, entire levels, really awesome features that some

452
00:19:44,555 --> 00:19:45,696
players would have really loved.

453
00:19:45,696 --> 00:19:50,780
And the final game was successful, though, without any of those things that were cut.

454
00:19:50,780 --> 00:19:52,001
Players really loved it.

455
00:19:52,001 --> 00:19:56,024
The nemesis system, where individual enemies that you fight, like, come back with more

456
00:19:56,024 --> 00:19:59,006
abilities and more personality, was a big hit with players, and the team was really

457
00:19:59,006 --> 00:20:00,227
proud of the game that they shipped.

458
00:20:01,515 --> 00:20:03,436
Now, cutting big features did leave holes,

459
00:20:03,436 --> 00:20:05,817
but players, as far as I can tell, didn't even notice them.

460
00:20:05,817 --> 00:20:07,398
I didn't see anyone online saying,

461
00:20:07,398 --> 00:20:09,019
oh yeah, I mean, that game was good,

462
00:20:09,019 --> 00:20:10,940
but it would have been way better

463
00:20:10,940 --> 00:20:13,101
if there were two totally different factions of orcs

464
00:20:13,101 --> 00:20:15,442
in a civil war and you had to politically manipulate them.

465
00:20:15,442 --> 00:20:17,803
Or, the combat is pretty cool,

466
00:20:17,803 --> 00:20:21,165
but without that house-sized giant beast to climb

467
00:20:21,165 --> 00:20:22,886
and parkour around on, it just felt kind of empty.

468
00:20:22,886 --> 00:20:25,087
Like, nobody noticed that those things had been cut,

469
00:20:25,087 --> 00:20:26,968
and a lot of work didn't go into finishing those features.

470
00:20:28,990 --> 00:20:33,573
When those features that didn't match the vision were cut,

471
00:20:33,573 --> 00:20:34,993
it made the game feel more finished, not less finished.

472
00:20:34,993 --> 00:20:36,995
So how do you decide which features

473
00:20:36,995 --> 00:20:39,036
are the right ones to cut?

474
00:20:39,036 --> 00:20:41,097
And which features are the right ones

475
00:20:41,097 --> 00:20:42,457
to really focus on and spend time on?

476
00:20:42,457 --> 00:20:44,779
It can help to have some kind of process

477
00:20:44,779 --> 00:20:46,720
for making decisions on new features or additions

478
00:20:46,720 --> 00:20:48,200
and to make sure that everyone on your team

479
00:20:48,200 --> 00:20:49,661
is on board with it.

480
00:20:49,661 --> 00:20:52,222
This is often called change management or scope management.

481
00:20:52,222 --> 00:20:54,424
So let's go over some tools that can help your team

482
00:20:54,424 --> 00:20:56,605
have good scope management so you can stay focused

483
00:20:56,605 --> 00:20:57,605
on building the right features.

484
00:21:03,693 --> 00:21:06,234
The first way is objective feature ranking.

485
00:21:06,234 --> 00:21:10,557
There are two big problems with new ideas that your team comes up with.

486
00:21:10,557 --> 00:21:14,260
First of all, someone on your team is going to be convinced that no matter how expensive

487
00:21:14,260 --> 00:21:18,262
or risky or hard to implement a feature is, it's going to be the best thing in your game.

488
00:21:18,262 --> 00:21:21,905
And the second problem is that person might be right.

489
00:21:21,905 --> 00:21:26,568
You never really know which feature is the one that's going to be the thing that a player

490
00:21:26,568 --> 00:21:28,649
falls in love with and tells all of their friends about.

491
00:21:28,649 --> 00:21:31,871
So if you find an objective way to rank your planned features, it can help a lot.

492
00:21:32,460 --> 00:21:35,402
Like the Arkham City team, the Witcher 3 development team

493
00:21:35,402 --> 00:21:38,024
knew that their new project was a lot more ambitious

494
00:21:38,024 --> 00:21:38,704
than Witcher 1 and 2.

495
00:21:38,704 --> 00:21:40,506
So they used a numerical grading system

496
00:21:40,506 --> 00:21:41,826
similar to the one in this table.

497
00:21:41,826 --> 00:21:44,948
Team members voted on the features they liked the best,

498
00:21:44,948 --> 00:21:46,229
and the features were evaluated

499
00:21:46,229 --> 00:21:47,610
for level of effort to implement.

500
00:21:47,610 --> 00:21:50,092
And then those two numbers were combined into a value score,

501
00:21:50,092 --> 00:21:51,693
and they used that to prioritize their backlog

502
00:21:51,693 --> 00:21:52,994
and decide what to work on.

503
00:21:52,994 --> 00:21:55,875
Now a lot of teams hear about techniques like this,

504
00:21:55,875 --> 00:21:57,016
and they don't even try them

505
00:21:57,016 --> 00:22:00,178
because they know that the numbers won't be perfect.

506
00:22:00,178 --> 00:22:01,239
And of course they won't.

507
00:22:01,928 --> 00:22:06,552
If you're trying to rank your features early in pre-production to guess how much a feature

508
00:22:06,552 --> 00:22:09,954
will benefit your final game, of course it's not going to be a totally accurate number.

509
00:22:09,954 --> 00:22:14,637
But what's important here is the act of looking as objectively as possible at your ideas and

510
00:22:14,637 --> 00:22:17,799
really considering whether they're worth spending time working on.

511
00:22:17,799 --> 00:22:22,622
Assigning an actual number to a feature's value can help you evaluate that more logically,

512
00:22:22,622 --> 00:22:25,865
instead of just based on who on your team expresses the strongest emotions.

513
00:22:29,452 --> 00:22:32,632
A second way to help manage scope is to have a feature backlog or icebox.

514
00:22:32,632 --> 00:22:37,253
So if a proposed feature isn't very high value, or if you're just not really sure if it fits

515
00:22:37,253 --> 00:22:41,374
your design vision well, you can put it in your backlog, let it sit for a while, don't

516
00:22:41,374 --> 00:22:45,915
work on it, and then it's possible that as you work on your other features that you know

517
00:22:45,915 --> 00:22:49,156
are high value or essential, you'll realize that you didn't need those features at all

518
00:22:49,156 --> 00:22:50,736
and that they don't really fit your game.

519
00:22:50,736 --> 00:22:53,377
It's also possible that you'll realize that they were worth spending time on, you can

520
00:22:53,377 --> 00:22:56,198
pull them back out of the backlog and finish them knowing that you have enough time to

521
00:22:56,198 --> 00:22:56,378
do so.

522
00:22:57,372 --> 00:22:59,313
Make sure you do this early in development, though.

523
00:22:59,313 --> 00:23:05,654
You're going to get closer to shipping much faster than you think you will.

524
00:23:05,654 --> 00:23:09,354
And it's a lot easier to put something on the back burner if you haven't already put

525
00:23:09,354 --> 00:23:09,874
a ton of time into it.

526
00:23:09,874 --> 00:23:11,475
And finally, external feedback is invaluable for scope management.

527
00:23:11,475 --> 00:23:18,496
It's very difficult as a game developer to be as objective about your game as you really

528
00:23:18,496 --> 00:23:18,976
need to be.

529
00:23:18,976 --> 00:23:24,597
So as early as you can, do regular play tests with people who aren't on your team.

530
00:23:25,452 --> 00:23:26,894
Do they find your game satisfying?

531
00:23:26,894 --> 00:23:29,055
Do they want to play more of it?

532
00:23:29,055 --> 00:23:30,657
Do they see your vision coming through

533
00:23:30,657 --> 00:23:31,758
in what you're building?

534
00:23:31,758 --> 00:23:33,439
Even before you have anything playable,

535
00:23:33,439 --> 00:23:35,581
when you explain your game vision or mission statement

536
00:23:35,581 --> 00:23:37,203
or pillars to people who aren't on your team,

537
00:23:37,203 --> 00:23:39,004
do they get it and are they excited?

538
00:23:39,004 --> 00:23:41,006
Knowing what feedback to take from play testers

539
00:23:41,006 --> 00:23:43,668
and what feedback to ignore is a learned skill.

540
00:23:43,668 --> 00:23:46,531
You should be as objective as you can

541
00:23:46,531 --> 00:23:48,773
and find some way to measure player feedback

542
00:23:48,773 --> 00:23:50,054
with numbers if at all possible.

543
00:23:51,211 --> 00:23:53,733
This is a screenshot from Antichamber.

544
00:23:53,733 --> 00:23:55,855
Alexander Bruce, the creator of Antichamber,

545
00:23:55,855 --> 00:23:57,136
tracked the play times of everyone

546
00:23:57,136 --> 00:23:59,278
who tried his game demo at conventions

547
00:23:59,278 --> 00:24:01,520
over years of iteration.

548
00:24:01,520 --> 00:24:02,721
And he used that numbers as metric.

549
00:24:02,721 --> 00:24:05,983
How long will a player play your game voluntarily

550
00:24:05,983 --> 00:24:07,224
before they walk away?

551
00:24:07,224 --> 00:24:10,267
He increased that number from an average of five minutes

552
00:24:10,267 --> 00:24:11,448
to over 40 minutes.

553
00:24:11,448 --> 00:24:12,949
And the result is pretty amazing.

554
00:24:12,949 --> 00:24:16,632
Antichamber is also a great example of agile development

555
00:24:16,632 --> 00:24:18,694
and iterating until you zero in on your game design.

556
00:24:19,250 --> 00:24:21,911
You should check out Alexander Bruce's GDC 2014 talk.

557
00:24:21,911 --> 00:24:26,893
It was rated best talk of the year and it goes into a lot of his development process.

558
00:24:26,893 --> 00:24:31,775
There was also a great talk yesterday by Ben Kane on designing Keep Talking and Nobody

559
00:24:31,775 --> 00:24:32,776
Explodes.

560
00:24:32,776 --> 00:24:35,097
He also talked about using this process.

561
00:24:35,097 --> 00:24:39,238
They eavesdropped on players playing their bomb defusal game at conventions and then

562
00:24:39,238 --> 00:24:42,780
they used the data they gathered to iterate on the game and focus in on their core design

563
00:24:42,780 --> 00:24:44,901
which was a game about communication between players.

564
00:24:45,707 --> 00:24:46,927
So you should check that talk out as well

565
00:24:46,927 --> 00:24:48,889
if you're interested in the more agile exploration

566
00:24:48,889 --> 00:24:49,889
approach to game design.

567
00:24:49,889 --> 00:24:55,113
And mostly remember that if you aren't measuring something,

568
00:24:55,113 --> 00:24:56,714
it's very hard to improve it,

569
00:24:56,714 --> 00:24:57,735
and even if you do improve it,

570
00:24:57,735 --> 00:24:58,535
it's hard to know that you did.

571
00:24:58,535 --> 00:25:01,377
So having objective numerical measurements

572
00:25:01,377 --> 00:25:03,179
for things in your game that you want to be great

573
00:25:03,179 --> 00:25:04,760
will let you know if you're actually succeeding.

574
00:25:09,477 --> 00:25:10,738
Here's another way to do metrics.

575
00:25:10,738 --> 00:25:13,239
So Warner Brothers hired Immersive,

576
00:25:13,239 --> 00:25:14,860
which is a firm that studies player behavior,

577
00:25:14,860 --> 00:25:17,021
to conduct play tests for Shadow of Mordor

578
00:25:17,021 --> 00:25:18,902
and the Arkham games to see if the games

579
00:25:18,902 --> 00:25:20,143
were satisfying for players.

580
00:25:20,143 --> 00:25:22,104
Immersive's research has shown that

581
00:25:22,104 --> 00:25:25,146
whether someone is having fun is a really poor indicator

582
00:25:25,146 --> 00:25:26,527
of whether they'll keep playing your game

583
00:25:26,527 --> 00:25:27,868
or if they'll tell their friends about it.

584
00:25:27,868 --> 00:25:30,909
But there are specific needs that players have

585
00:25:30,909 --> 00:25:32,710
that they come to your game to try to fulfill.

586
00:25:32,710 --> 00:25:36,953
And the needs that they use and measure are

587
00:25:36,953 --> 00:25:38,033
competence.

588
00:25:38,852 --> 00:25:41,873
or the feeling that the player is effective and skilled when playing the game.

589
00:25:41,873 --> 00:25:45,555
Autonomy, the feeling that they're in control of their own decisions.

590
00:25:45,555 --> 00:25:51,217
And relatedness, feeling a strong connection to other players or game characters or the

591
00:25:51,217 --> 00:25:51,578
game world.

592
00:25:51,578 --> 00:25:57,960
Troy Skinner and Scott Rigby from Immersive gave a really good talk on their process in 2015.

593
00:25:57,960 --> 00:25:59,341
It's in the GDC vault.

594
00:25:59,912 --> 00:26:02,373
And Jason Vandenberg is giving a talk Thursday afternoon

595
00:26:02,373 --> 00:26:05,194
about player motivation that also discusses these metrics.

596
00:26:05,194 --> 00:26:07,335
And I'm not saying that you have to use these exact ones,

597
00:26:07,335 --> 00:26:08,836
although they are a very good set,

598
00:26:08,836 --> 00:26:11,017
and I personally believe that they were a critical part

599
00:26:11,017 --> 00:26:12,857
of why Shadow of Mordor was able to refocus

600
00:26:12,857 --> 00:26:14,618
on their design vision.

601
00:26:14,618 --> 00:26:16,279
And they have a solid foundation in psychology

602
00:26:16,279 --> 00:26:17,259
outside of games.

603
00:26:17,259 --> 00:26:19,580
If you think about what you find satisfying in your job

604
00:26:19,580 --> 00:26:20,540
and your day-to-day work,

605
00:26:20,540 --> 00:26:22,601
it's probably a really similar list to this one.

606
00:26:22,601 --> 00:26:25,042
But again, the important thing is to identify

607
00:26:25,042 --> 00:26:28,103
something measurable that you want your players to do,

608
00:26:28,103 --> 00:26:29,644
and then measure whether you're doing that.

609
00:26:30,453 --> 00:26:33,536
Alexander Bruce wanted players to play antechamber longer.

610
00:26:33,536 --> 00:26:35,698
Warner Brothers wanted players to be drawn to their games

611
00:26:35,698 --> 00:26:37,279
in the ways that make people tell their friends

612
00:26:37,279 --> 00:26:38,581
how awesome a game is.

613
00:26:38,581 --> 00:26:40,743
If you want your players to really be drawn

614
00:26:40,743 --> 00:26:42,504
into your game's story, for example,

615
00:26:42,504 --> 00:26:44,866
ask your playtesters to rate on a scale from one to 10

616
00:26:44,866 --> 00:26:46,528
how immersive they think your story is,

617
00:26:46,528 --> 00:26:47,809
and then work on it some more,

618
00:26:47,809 --> 00:26:49,691
and then ask a new batch of playtesters the same question.

619
00:26:49,691 --> 00:26:50,872
And if that number goes up,

620
00:26:50,872 --> 00:26:52,173
you're probably doing something right.

621
00:26:54,078 --> 00:26:57,260
Remember though that having measurable goals

622
00:26:57,260 --> 00:27:01,163
requires you to know what you want your game to actually be.

623
00:27:01,163 --> 00:27:01,844
So it always comes back to having

624
00:27:01,844 --> 00:27:02,965
that clear, strong design vision for your game.

625
00:27:02,965 --> 00:27:04,986
All right, so many of us have worked

626
00:27:04,986 --> 00:27:07,588
or are currently working on free-to-play games

627
00:27:07,588 --> 00:27:09,710
that monetize through in-app purchases.

628
00:27:09,710 --> 00:27:11,652
And for those games, you already have sheafs of metrics

629
00:27:11,652 --> 00:27:12,913
that you're supposed to maximize.

630
00:27:12,913 --> 00:27:15,975
So you've got player acquisition, engagement, retention,

631
00:27:15,975 --> 00:27:18,437
install rate, monetization,

632
00:27:18,437 --> 00:27:20,238
how often your players are giving gifts to each other,

633
00:27:20,238 --> 00:27:22,020
you know, how often they tweet about your game,

634
00:27:22,020 --> 00:27:23,521
like basically anything you can measure about a player.

635
00:27:25,043 --> 00:27:30,705
And that's great, but what's interesting is that this set of metrics is really strongly correlated to this set

636
00:27:30,705 --> 00:27:35,666
Which is that if players feel that your game is satisfying their needs they are going to keep coming back to it

637
00:27:35,666 --> 00:27:37,647
They are going to tell your friends about it

638
00:27:37,647 --> 00:27:43,188
So if you find some way to measure whether you're giving players what they need and make decisions based on those numbers

639
00:27:43,188 --> 00:27:45,248
Then you can maximize a lot of metrics at once

640
00:27:51,410 --> 00:27:54,672
All right, so you have a solid vision for your game.

641
00:27:54,672 --> 00:27:56,234
Your team is excited about it.

642
00:27:56,234 --> 00:27:58,375
You have a process for deciding which features to work on

643
00:27:58,375 --> 00:27:59,476
and which features not to work on.

644
00:27:59,476 --> 00:28:01,978
You have objective numerical measurements

645
00:28:01,978 --> 00:28:03,399
that match your design goals.

646
00:28:03,399 --> 00:28:05,421
Your team understands the importance of scope discipline

647
00:28:05,421 --> 00:28:07,062
and what the biggest risks to your project are.

648
00:28:07,062 --> 00:28:09,684
But then someone on your team has a cool idea

649
00:28:09,684 --> 00:28:12,206
for an awesome design feature,

650
00:28:12,206 --> 00:28:14,648
but it doesn't fit your design vision.

651
00:28:14,648 --> 00:28:15,129
So what happens next?

652
00:28:15,129 --> 00:28:18,451
I once interviewed for a producer position

653
00:28:18,451 --> 00:28:20,493
at a major game studio, you've probably heard of.

654
00:28:21,211 --> 00:28:23,652
where I kept getting asked the same question.

655
00:28:23,652 --> 00:28:25,573
How do you deal with people hating you

656
00:28:25,573 --> 00:28:27,253
when you tell them they can't have something?

657
00:28:27,253 --> 00:28:29,774
And that question really worried me

658
00:28:29,774 --> 00:28:31,475
and it indicated to me that the team

659
00:28:31,475 --> 00:28:32,856
had some really major problems.

660
00:28:32,856 --> 00:28:37,437
People who are not willing to work within constraints

661
00:28:37,437 --> 00:28:40,999
are like a nuclear reactor with no control rods.

662
00:28:40,999 --> 00:28:42,079
They cause a lot of damage

663
00:28:42,079 --> 00:28:43,440
and they don't produce anything useful.

664
00:28:44,879 --> 00:28:48,320
Right now on your team, you probably have some people who act as your power source.

665
00:28:48,320 --> 00:28:51,942
They're the ones coming up with the awesome ideas, building prototypes, feeding energy

666
00:28:51,942 --> 00:28:54,983
into your team, and staying excited about that cool game that you're building.

667
00:28:54,983 --> 00:28:58,964
And you probably also have some people who act as control rods, the pragmatists who keep

668
00:28:58,964 --> 00:29:02,386
an eye on your priorities, your budget, your schedule, and who make sure that everyone

669
00:29:02,386 --> 00:29:05,167
is staying focused and working on the right things.

670
00:29:05,167 --> 00:29:06,967
And you need both of those types of people.

671
00:29:06,967 --> 00:29:08,568
They're both vital to your success.

672
00:29:08,568 --> 00:29:13,350
If you're a solo developer, you need to be both of those people, which is really hard.

673
00:29:14,840 --> 00:29:19,905
If you don't have that right balance between passion and pragmatism on your team, and especially

674
00:29:19,905 --> 00:29:23,269
if like that team I interviewed with, one or the other of those types of people is seen

675
00:29:23,269 --> 00:29:28,735
as a problem, then you have a major fundamental team issue that you need to fix.

676
00:29:28,735 --> 00:29:32,139
Both your optimists and your pragmatists are precious resources.

677
00:29:32,139 --> 00:29:34,122
You have to have both if you're going to ship a great game.

678
00:29:36,989 --> 00:29:41,112
Now a lot of game developers and a lot of producers are afraid of saying no to cool

679
00:29:41,112 --> 00:29:45,154
ideas because they don't want to dampen their team's enthusiasm or slow down their momentum.

680
00:29:45,154 --> 00:29:49,357
But enthusiasm is only effective when it's directed towards the right things.

681
00:29:49,357 --> 00:29:53,520
People do their best work when they know that they're working towards a specific and exciting

682
00:29:53,520 --> 00:29:54,120
goal.

683
00:29:54,120 --> 00:29:57,262
So give them that goal by having your clear design vision.

684
00:29:57,262 --> 00:30:00,585
Now there are potentially bad consequences for saying no to features.

685
00:30:00,915 --> 00:30:05,219
you might upset somebody, you might accidentally say no to the coolest idea for your game,

686
00:30:05,219 --> 00:30:06,481
or you might be overly cautious.

687
00:30:06,481 --> 00:30:10,525
So let's go over some tools you can use when saying no that will minimize those negative

688
00:30:10,525 --> 00:30:10,765
effects.

689
00:30:10,765 --> 00:30:11,186
The first is yes, but.

690
00:30:17,553 --> 00:30:20,854
Before you say yes, make sure that the stakeholder fully

691
00:30:20,854 --> 00:30:22,795
understands the consequences of what they're asking for.

692
00:30:22,795 --> 00:30:25,395
Remind them of the risk they're adding.

693
00:30:25,395 --> 00:30:28,356
Make sure that they know it's their responsibility.

694
00:30:28,356 --> 00:30:30,336
Remind them of the design vision that you agreed on.

695
00:30:30,336 --> 00:30:32,377
Make sure they understand that design vision,

696
00:30:32,377 --> 00:30:34,277
they fully believe in it.

697
00:30:34,277 --> 00:30:35,758
And protect that vision as well as you can.

698
00:30:35,758 --> 00:30:38,358
So for example, yes we can do another demo for E3,

699
00:30:38,358 --> 00:30:40,459
but it will delay the next milestone.

700
00:30:40,459 --> 00:30:40,699
Yes if.

701
00:30:46,017 --> 00:30:50,660
Sometimes, well, all the time, your team will get new information that will mean you need

702
00:30:50,660 --> 00:30:51,820
to do something different.

703
00:30:51,820 --> 00:30:55,242
Sometimes a major pivot in the project or a minor change or addition.

704
00:30:55,242 --> 00:30:57,043
That will happen for sure.

705
00:30:57,043 --> 00:30:58,603
It's okay when it does.

706
00:30:58,603 --> 00:31:01,605
Yes if is figuring out how to do that necessary new thing.

707
00:31:01,605 --> 00:31:07,528
So yes, we can do another demo for E3 if we cut half of level 14 or yes, we can add that

708
00:31:07,528 --> 00:31:09,329
feature if we cut something equally big.

709
00:31:09,329 --> 00:31:12,450
What do you think we should cut from our list of things we agreed on?

710
00:31:12,450 --> 00:31:15,292
This is where having that ranked feature list can come in really handy.

711
00:31:18,438 --> 00:31:20,599
Cooperation, not conflict.

712
00:31:20,599 --> 00:31:22,680
When a stakeholder wants something new added,

713
00:31:22,680 --> 00:31:24,521
and you know that it will add risk to the project

714
00:31:24,521 --> 00:31:26,381
or that it doesn't fit your design vision,

715
00:31:26,381 --> 00:31:28,182
don't let it become you versus them.

716
00:31:28,182 --> 00:31:29,642
That's not productive.

717
00:31:29,642 --> 00:31:31,463
It's not a position you want to be in.

718
00:31:31,463 --> 00:31:33,344
It makes it really easy for people to dismiss you

719
00:31:33,344 --> 00:31:35,424
as someone who just hates fun.

720
00:31:35,424 --> 00:31:37,425
But you and the person asking for this new thing

721
00:31:37,425 --> 00:31:39,246
both want to make a great game.

722
00:31:39,246 --> 00:31:40,266
You both have the same goal.

723
00:31:40,266 --> 00:31:43,327
So make it you and them versus reality.

724
00:31:44,659 --> 00:31:47,041
Like, the priorities we agreed to at the beginning

725
00:31:47,041 --> 00:31:49,163
of the last milestone put this demo last,

726
00:31:49,163 --> 00:31:51,104
and now you want to move it up, so what do you

727
00:31:51,104 --> 00:31:52,666
want to move it above?

728
00:31:52,666 --> 00:31:54,787
What can we change about our plan

729
00:31:54,787 --> 00:31:57,670
to be able to do this new thing that you want that's

730
00:31:57,670 --> 00:31:59,211
really important to the game?

731
00:31:59,211 --> 00:32:00,952
What can we do to create a new game

732
00:32:00,952 --> 00:32:02,393
within those constraints that exist that we can't change?

733
00:32:02,393 --> 00:32:05,416
And finally, follow your process.

734
00:32:05,416 --> 00:32:07,498
Even if you don't have really strict numerical rankings

735
00:32:07,498 --> 00:32:09,839
or metrics, you should have some objective way that

736
00:32:09,839 --> 00:32:11,861
will let you be confident that a proposed feature will

737
00:32:11,861 --> 00:32:13,202
or won't support your design vision.

738
00:32:14,531 --> 00:32:19,512
You won't have to worry about accidentally cutting the best thing in the game if you

739
00:32:19,512 --> 00:32:22,513
have some way to objectively measure what the best thing in your game is.

740
00:32:22,513 --> 00:32:22,833
All right.

741
00:32:22,833 --> 00:32:29,194
None of what I've said up until now will do you any good if the ambitious, optimistic

742
00:32:29,194 --> 00:32:33,775
people on your team just will not listen to your pragmatists or if your team's prioritization

743
00:32:33,775 --> 00:32:36,595
decisions get overridden by someone higher up the chain of command.

744
00:32:36,595 --> 00:32:40,796
So what happens if, like that team I interviewed with, you have people in authority who just

745
00:32:40,796 --> 00:32:42,157
will not take no for an answer?

746
00:32:45,254 --> 00:32:47,816
The best thing you can do is arm yourself with data.

747
00:32:47,816 --> 00:32:50,318
Remember all those metrics that you're gathering

748
00:32:50,318 --> 00:32:51,700
on whether players are doing what you want

749
00:32:51,700 --> 00:32:53,241
and encountering your game the way you want them to?

750
00:32:53,241 --> 00:32:55,263
Keep those ready at all times.

751
00:32:55,263 --> 00:32:57,405
I know more than one really good producer

752
00:32:57,405 --> 00:32:59,486
who just keeps a PowerPoint always updated

753
00:32:59,486 --> 00:33:01,088
with the latest metrics that they can pull out

754
00:33:01,088 --> 00:33:02,769
and convince whoever needs convincing

755
00:33:02,769 --> 00:33:04,371
that their team is making the right decisions.

756
00:33:04,371 --> 00:33:07,674
Make that person who disagrees with you

757
00:33:07,674 --> 00:33:09,615
show you in your data where you are wrong.

758
00:33:13,991 --> 00:33:15,793
Be really clear about tradeoffs.

759
00:33:15,793 --> 00:33:17,614
Present a menu of options if you have to.

760
00:33:17,614 --> 00:33:19,276
Make them choose.

761
00:33:19,276 --> 00:33:25,662
If the choice is realistically between feature A and feature B, show them the data that proves

762
00:33:25,662 --> 00:33:28,264
that that is a choice that needs to be made and then make them make that choice.

763
00:33:28,264 --> 00:33:28,724
Stand your ground.

764
00:33:28,724 --> 00:33:34,390
If you're working with someone who stubbornly refuses to rein in their ideas or requirements

765
00:33:34,390 --> 00:33:38,834
or refuses to cut features, if you are not just as stubborn as they are, your game will

766
00:33:38,834 --> 00:33:39,234
not ship.

767
00:33:43,102 --> 00:33:46,463
And find allies on your team who might know more about how to get a specific person to

768
00:33:46,463 --> 00:33:50,325
listen or who might have more authority than you and who want to know the real situation

769
00:33:50,325 --> 00:33:52,206
and what's really doable for your game.

770
00:33:52,206 --> 00:33:56,427
People who have been around for a while and who have shipped a lot of games often want

771
00:33:56,427 --> 00:33:58,708
to hear the truth about what your team is capable of.

772
00:33:58,708 --> 00:34:02,850
And if you've been gathering and keeping track of that data, they'll see you as a valuable

773
00:34:02,850 --> 00:34:04,991
resource and they'll want to hear what you have to say.

774
00:34:04,991 --> 00:34:10,273
Now last though, if none of those help, don't force yourself to stay in a situation where

775
00:34:10,273 --> 00:34:11,894
you can't be effective.

776
00:34:11,894 --> 00:34:12,214
Haha.

777
00:34:12,214 --> 00:34:12,294
Haha.

778
00:34:14,270 --> 00:34:14,930
This is reality.

779
00:34:14,930 --> 00:34:19,114
If you're going to be beating your head against a wall until you ship a bad game that was

780
00:34:19,114 --> 00:34:21,857
the best you could do under the circumstances, don't make yourself go through that.

781
00:34:21,857 --> 00:34:24,039
Game development is hard enough without working under people that make it even harder.

782
00:34:24,039 --> 00:34:25,240
And then remember that saying yes is never free.

783
00:34:25,240 --> 00:34:25,780
It always costs you something.

784
00:34:35,423 --> 00:34:37,505
For one thing, every feature that you add to your game

785
00:34:37,505 --> 00:34:39,866
adds some risk, maybe a little or maybe a lot,

786
00:34:39,866 --> 00:34:41,507
but always some.

787
00:34:41,507 --> 00:34:44,069
Anything you add to the design requires more assets

788
00:34:44,069 --> 00:34:47,371
that need to be created, more gameplay that needs

789
00:34:47,371 --> 00:34:50,653
to be tested, more bugs that will have to be fixed

790
00:34:50,653 --> 00:34:51,293
later on.

791
00:34:51,293 --> 00:34:52,934
Keep your eyes open to that cost and make sure

792
00:34:52,934 --> 00:34:55,056
that your team can handle it, and again,

793
00:34:55,056 --> 00:34:56,637
make sure that anyone requesting new additions

794
00:34:56,637 --> 00:34:57,417
fully understands that cost.

795
00:34:57,417 --> 00:35:00,459
If you say yes to something, you are agreeing

796
00:35:00,459 --> 00:35:02,360
to really believe in it, and you have to make sure

797
00:35:02,360 --> 00:35:03,621
that your team believes in it too.

798
00:35:04,608 --> 00:35:09,350
If your publisher mandates you add a My Little Pony champion to your MOBA, you have two options,

799
00:35:09,350 --> 00:35:10,331
and neither of them is saying no.

800
00:35:10,331 --> 00:35:14,533
You can say yes and you can half ass it and your players will hate it and you'll hate

801
00:35:14,533 --> 00:35:16,033
it and it will be a terrible part of your game.

802
00:35:16,033 --> 00:35:21,656
Or you can say yes and you can believe in it and you can make the best damn My Little

803
00:35:21,656 --> 00:35:22,617
Pony champion you can possibly make.

804
00:35:22,617 --> 00:35:25,438
A great example again from Shadow of Mordor.

805
00:35:25,438 --> 00:35:29,660
The game's publisher, like they do, required regular demos for conventions and for press.

806
00:35:30,655 --> 00:35:34,358
And instead of reluctantly saying yes and viewing those demos as yet another unreasonable

807
00:35:34,358 --> 00:35:39,863
publisher request or demand and half-assing those demos, the team used those demos as

808
00:35:39,863 --> 00:35:43,125
a tool to make the game more polished and to get a better understanding of how long

809
00:35:43,125 --> 00:35:44,446
it took them to finish a feature.

810
00:35:44,446 --> 00:35:47,789
They took something that should have been a burden, but they made it something that

811
00:35:47,789 --> 00:35:50,591
benefited them and that they actually believed in doing.

812
00:35:50,591 --> 00:35:54,434
Ideally, anything you say yes to should add value to your game.

813
00:35:54,434 --> 00:35:57,617
If it doesn't, see if you can figure out some way to get some value out of it if you have

814
00:35:57,617 --> 00:35:57,977
to do it anyway.

815
00:36:01,747 --> 00:36:05,249
And remember that whenever you say yes or no to an idea from someone, you're setting

816
00:36:05,249 --> 00:36:07,831
a precedent for how much of a voice or how much authority that person has.

817
00:36:07,831 --> 00:36:12,274
Anytime you say yes to someone, you're making it harder to say no the next time.

818
00:36:12,274 --> 00:36:14,875
And anytime you say no to someone, you're making it easier to say no in the future.

819
00:36:14,875 --> 00:36:18,718
The people involved in your game inherently have different amounts of authority.

820
00:36:18,718 --> 00:36:21,980
If your publisher controls the budget, they're going to have more authority when they ask

821
00:36:21,980 --> 00:36:23,461
for something than, say, your audio designer.

822
00:36:23,461 --> 00:36:27,304
But that doesn't mean their ideas are necessarily better or a better fit for your game.

823
00:36:28,274 --> 00:36:36,638
This is another reason why it's important to have both a clearly defined design vision,

824
00:36:36,638 --> 00:36:38,579
but also a way to objectively rank features.

825
00:36:38,579 --> 00:36:43,782
If you don't have those things, you're in danger of getting into the habit of just saying

826
00:36:43,782 --> 00:36:46,463
yes to ideas coming from people with more authority, regardless of how good for your

827
00:36:46,463 --> 00:36:48,124
game those ideas actually are.

828
00:36:48,124 --> 00:36:51,326
And last, remember that any time you say yes to something, you're saying no to something

829
00:36:51,326 --> 00:36:51,546
else.

830
00:36:51,546 --> 00:36:53,887
You just might not know what it is yet.

831
00:36:53,887 --> 00:36:55,808
Because your time and money are limited.

832
00:36:56,363 --> 00:36:58,385
if you spend them on something, that inherently means

833
00:36:58,385 --> 00:37:01,487
that you can't spend them on something else.

834
00:37:01,487 --> 00:37:03,729
And especially when you start playtesting your game

835
00:37:03,729 --> 00:37:06,150
and when you start coming in towards the finish line,

836
00:37:06,150 --> 00:37:07,952
you're going to find things that can make your game

837
00:37:07,952 --> 00:37:09,653
a lot better, that if you hadn't spent time

838
00:37:09,653 --> 00:37:10,493
on low-value features early on,

839
00:37:10,493 --> 00:37:11,594
you might have time to really make great.

840
00:37:11,594 --> 00:37:12,675
All right, in conclusion, making games is hard,

841
00:37:12,675 --> 00:37:13,656
making good games is nearly impossible.

842
00:37:24,046 --> 00:37:26,868
A strong, clear vision is vital for a good game.

843
00:37:26,868 --> 00:37:28,969
Your team needs to believe in and fully understand what that vision is.

844
00:37:28,969 --> 00:37:32,091
You need to protect your design vision by saying no.

845
00:37:32,091 --> 00:37:35,614
If you can't say no, you can't control your scope and you can't control your risk.

846
00:37:35,614 --> 00:37:37,955
And constraints are your ally, not your enemy.

847
00:37:37,955 --> 00:37:39,937
Make friends with the iron triangle and use it to work for you.

848
00:37:39,937 --> 00:37:40,377
Thanks.

849
00:37:40,377 --> 00:37:40,537
There's a

850
00:37:59,928 --> 00:38:03,310
There's my e‑mail address. If you want the slides, I will send them to you. Feedback

851
00:38:03,310 --> 00:38:08,532
is welcome. My Twitter. And then some resources. So the game outcomes project, if you were

852
00:38:08,532 --> 00:38:13,214
a producer or a designer, you should definitely read that. There's a lot of really great post

853
00:38:13,214 --> 00:38:16,355
mortems up on Gamma Sutra, which is where I got most of the case studies in this talk.

854
00:38:16,355 --> 00:38:21,117
The GDC vault has a lot of great talks as well, especially, again, the talk on anti‑chamber

855
00:38:21,117 --> 00:38:27,160
in 2014. Books, the mythical man month is a classic old lady book.

856
00:38:27,495 --> 00:38:32,338
30, 40‑year‑old book on project management, but it has a lot of good wisdom in it. And

857
00:38:32,338 --> 00:38:35,840
then I have been a project manager for nine years and I have learned some stubbornness.

858
00:38:35,840 --> 00:38:39,062
So questions? I think they are going to want you to line up at the mics.

859
00:38:46,588 --> 00:38:47,849
Hello?

860
00:38:47,849 --> 00:38:48,029
Hi.

861
00:38:48,029 --> 00:38:49,611
Hi, I'm Linda.

862
00:38:49,611 --> 00:38:50,052
Great talk.

863
00:38:50,052 --> 00:38:53,355
I'm wondering about sequels.

864
00:38:53,355 --> 00:38:56,398
You said no one would miss the features you cut.

865
00:38:56,398 --> 00:38:58,781
But what if they had been in a previous game?

866
00:38:58,781 --> 00:39:00,503
Would you have cut them anyway?

867
00:39:01,326 --> 00:39:05,548
Oh, you mean if you, so the question is sequels, if a feature had been in a previous game,

868
00:39:05,548 --> 00:39:07,328
can you cut it for a sequel, is that what you're asking?

869
00:39:07,328 --> 00:39:07,928
Yeah.

870
00:39:07,928 --> 00:39:09,089
That's a good question.

871
00:39:09,089 --> 00:39:14,571
I've worked on a few sequels and usually they're easier because it's easier to zero in on what

872
00:39:14,571 --> 00:39:17,812
you want to add to the game, but I've also worked on some that were sort of floundering

873
00:39:17,812 --> 00:39:18,172
messes.

874
00:39:18,172 --> 00:39:24,074
I don't know, I'm going to say it depends, but again, I think it's just as important

875
00:39:24,074 --> 00:39:26,475
for a sequel to have a really clear design vision of what it is.

876
00:39:27,043 --> 00:39:31,845
And whether you're sort of incrementally adding things to the previous game or whether you're doing something completely different

877
00:39:31,845 --> 00:39:36,106
And and there have been really good sequels that have done each of those things where the sequel is pretty different from the first

878
00:39:36,106 --> 00:39:40,588
Game and still really good or whether it was sort of the first game plus a few features

879
00:39:40,588 --> 00:39:44,349
But I think it really again just comes back to like having a really clear idea of what you want to make and then

880
00:39:44,349 --> 00:39:49,111
Validating it by having people test it or at least you know like like the destiny team

881
00:39:49,111 --> 00:39:52,272
Just showed people their concept art really early on and they said does this look cool to you?

882
00:39:52,272 --> 00:39:56,613
You know or like they would they would test players potential players on how they felt about the concept art

883
00:39:56,613 --> 00:39:56,673
so

884
00:39:57,368 --> 00:39:59,689
If you have the original game and players that are familiar

885
00:39:59,689 --> 00:40:01,831
with it and you have a few ideas for what you want to add to it

886
00:40:01,831 --> 00:40:04,392
or take away from it, I think it would be easier to validate

887
00:40:04,392 --> 00:40:06,834
even than just a brand new game idea.

888
00:40:06,834 --> 00:40:07,294
Thank you.

889
00:40:19,681 --> 00:40:21,242
Hi, my name is Franco.

890
00:40:21,242 --> 00:40:27,646
The way our team works is we're a resource for different business units and we're constantly

891
00:40:27,646 --> 00:40:32,268
butting our heads up against people who think they know more than they should.

892
00:40:32,268 --> 00:40:34,069
Like you're a shared services group?

893
00:40:34,069 --> 00:40:36,631
Yeah, we're just a services group within the company.

894
00:40:36,631 --> 00:40:44,356
So have you ever had to cave and did it ever actually turn out to be a good thing?

895
00:40:44,356 --> 00:40:45,236
Well, let's see.

896
00:40:45,236 --> 00:40:49,158
So the question is have you ever caved and had that turn out to be a good thing?

897
00:40:49,792 --> 00:40:55,333
Well, first of all, shared services, I keep saying game development is really hard, and

898
00:40:55,333 --> 00:40:56,313
I know you guys all know that.

899
00:40:56,313 --> 00:40:58,654
Shared services is five times as hard as that.

900
00:40:58,654 --> 00:41:03,695
I've actually never seen a shared services group that worked really well.

901
00:41:03,695 --> 00:41:09,156
And I think because when you're making a game, people assume that game developers can just

902
00:41:09,156 --> 00:41:12,537
do way more than they can actually do because they don't think about all those hidden costs.

903
00:41:12,537 --> 00:41:15,777
And with shared services, it's much worse because people are like, oh, I have five artists.

904
00:41:15,777 --> 00:41:16,957
I can totally use all five of them.

905
00:41:16,957 --> 00:41:18,978
They don't realize that every other team is thinking the same thing.

906
00:41:20,428 --> 00:41:24,910
So I think, like, my opinion is that with shared services you have to be even more anal

907
00:41:24,910 --> 00:41:29,172
about really ranking what you're going to do and having a queue and being able to say

908
00:41:29,172 --> 00:41:32,133
no and telling someone, you know what, you're not going to get that for two months because

909
00:41:32,133 --> 00:41:33,654
we have all these other things above it in the queue.

910
00:41:33,654 --> 00:41:37,696
But I'm definitely familiar with teams where the stakeholders just won't listen to that.

911
00:41:37,696 --> 00:41:40,718
And then I think it comes back to, like, what happens if they don't listen to you.

912
00:41:40,718 --> 00:41:45,000
If they don't listen to you when you say, like, there is no possible way within the

913
00:41:45,000 --> 00:41:46,841
laws of physics that I can do what you're asking.

914
00:41:47,701 --> 00:41:50,465
then at that point there's honestly not a lot you can do.

915
00:41:50,465 --> 00:41:51,046
Sorry.

916
00:41:51,046 --> 00:41:55,152
It's like, I think that's why shared services is so hard is because people are just really

917
00:41:55,152 --> 00:42:00,500
reluctant to agree that, you know, five people can't do 25 people's worth of work.

918
00:42:00,795 --> 00:42:05,817
For the most part, we try to, like your slide said, show the data.

919
00:42:05,817 --> 00:42:07,438
Just really stick to that.

920
00:42:07,438 --> 00:42:11,559
But almost half the time it doesn't work so much.

921
00:42:11,559 --> 00:42:12,520
Thank you.

922
00:42:12,520 --> 00:42:15,921
And I think there's this tendency in game development where people are like, oh, data.

923
00:42:15,921 --> 00:42:17,162
We make entertainment.

924
00:42:17,162 --> 00:42:18,042
We make games.

925
00:42:18,042 --> 00:42:20,223
Data is for people who make tax software.

926
00:42:20,223 --> 00:42:21,143
It's like, no, data is data.

927
00:42:21,143 --> 00:42:25,085
And I think the more data you can have and show, no, this is how long it takes us to

928
00:42:25,085 --> 00:42:26,166
make an asset.

929
00:42:26,166 --> 00:42:27,226
We've done it 50 times.

930
00:42:27,226 --> 00:42:28,607
This is time number 51.

931
00:42:28,607 --> 00:42:29,747
I know it takes us this long.

932
00:42:30,412 --> 00:42:33,254
Some people will be reluctant to listen to that.

933
00:42:33,254 --> 00:42:37,218
If you can make it obvious, there will be some people on your team that will appreciate

934
00:42:37,218 --> 00:42:37,559
that.

935
00:42:37,559 --> 00:42:37,759
Great.

936
00:42:37,759 --> 00:42:38,039
Thank you.

937
00:42:38,039 --> 00:42:38,259
Hi there.

938
00:42:38,259 --> 00:42:38,700
So I have a question.

939
00:42:38,700 --> 00:42:40,662
We have this really rock star programmer.

940
00:42:40,662 --> 00:42:43,384
He's unbelievably good.

941
00:42:43,384 --> 00:42:44,866
Keeps our stuff on time.

942
00:42:44,866 --> 00:42:48,770
One of the problems we have, though, is that ‑‑

943
00:42:50,415 --> 00:42:54,516
we work in an environment where our customers are just down the hallway from us and they

944
00:42:54,516 --> 00:42:59,157
will come down and say, hey, I thought about this thing, can you do that? Oh, yeah, sure,

945
00:42:59,157 --> 00:43:03,878
not a problem. And then we have all these added requirements that have been promised.

946
00:43:03,878 --> 00:43:10,040
And unfortunately it's a military environment so you can't just get rid of them.

947
00:43:10,040 --> 00:43:13,461
So I think that's something that happens. So the question is we have a really rock star

948
00:43:13,461 --> 00:43:16,142
program where people will swing by his desk and go, hey, can you do this thing? And he'll

949
00:43:16,142 --> 00:43:18,062
be sure I can do that thing and then he has way too much on his plate.

950
00:43:18,622 --> 00:43:23,306
The problem is the question they're asking and the answer he's giving are not aligned

951
00:43:23,306 --> 00:43:23,867
to each other.

952
00:43:23,867 --> 00:43:26,069
What they're asking is, hey, can you do this thing?

953
00:43:26,069 --> 00:43:27,870
Yeah, of course he can do that thing.

954
00:43:27,870 --> 00:43:28,551
He's a genius.

955
00:43:28,551 --> 00:43:29,732
He's really good at stuff.

956
00:43:29,732 --> 00:43:34,176
But what they should be asking and the question you should be answering is, can you do that

957
00:43:34,176 --> 00:43:36,057
thing and also all the other stuff you had to do?

958
00:43:36,057 --> 00:43:38,960
Can you do that thing for me right now and not disrupt any of the other stuff on your

959
00:43:38,960 --> 00:43:39,600
list?

960
00:43:39,600 --> 00:43:40,321
The answer to that is no.

961
00:43:40,321 --> 00:43:41,782
That's impossible.

962
00:43:42,723 --> 00:43:47,224
You can either sort of put someone in between him, which I've been sort of the buffer of

963
00:43:47,224 --> 00:43:50,885
come to me first, and then I'm a little better at answering the question of no, we can't

964
00:43:50,885 --> 00:43:53,986
do that and all the other stuff, which is really the question you should have been asking

965
00:43:53,986 --> 00:43:54,826
me.

966
00:43:54,826 --> 00:43:58,368
So a lot of times it's sort of like reframing the question back to them.

967
00:43:58,368 --> 00:44:01,769
If they say, like, can you do this thing, you answer, no, we can't do that thing and

968
00:44:01,769 --> 00:44:03,089
all the other stuff on his list.

969
00:44:03,089 --> 00:44:03,889
Look at his list.

970
00:44:03,889 --> 00:44:04,469
Here's the data.

971
00:44:06,262 --> 00:44:09,784
It's not always possible to do, but I think that's the way I've found that kind of works,

972
00:44:09,784 --> 00:44:14,327
is just to remind them, this is the question you should be asking me, is can we do all

973
00:44:14,327 --> 00:44:16,529
the other stuff we already need to do, and this thing?

974
00:44:16,529 --> 00:44:17,009
And the answer is no.

975
00:44:17,009 --> 00:44:17,969
Perfect, thank you.

976
00:44:17,969 --> 00:44:18,690
Yeah.

977
00:44:18,690 --> 00:44:21,772
Alright, so this is about pillars.

978
00:44:22,445 --> 00:44:22,945
About what, sorry?

979
00:44:22,945 --> 00:44:23,686
The pillars.

980
00:44:23,686 --> 00:44:24,506
Yeah, yeah.

981
00:44:24,506 --> 00:44:29,049
So basically, you spend a lot of time defining the pillars.

982
00:44:29,049 --> 00:44:32,652
You are in a safe house, you are very sure about them,

983
00:44:32,652 --> 00:44:36,234
and they're gonna guide you for, I don't know,

984
00:44:36,234 --> 00:44:38,576
nine, 12 months, two years, whatever.

985
00:44:38,576 --> 00:44:41,238
What as a producer, not as a designer,

986
00:44:41,238 --> 00:44:44,820
but as a producer will do, will you do,

987
00:44:44,820 --> 00:44:47,102
if you discover after six months

988
00:44:47,102 --> 00:44:51,304
that one of the pillars was wrong, or unattainable?

989
00:44:51,304 --> 00:44:51,505
Yeah.

990
00:44:51,985 --> 00:44:53,867
That is terrible when that happens.

991
00:44:53,867 --> 00:44:55,168
I worked on a game where that happened.

992
00:44:55,168 --> 00:44:58,570
We had three pillars and one of them was not fun and we couldn't make it fun and it was

993
00:44:58,570 --> 00:45:04,375
terrible and we basically shipped half of a game and that's really bad.

994
00:45:04,375 --> 00:45:08,338
So I think really the only thing we could have done in that situation was ‑‑ oh,

995
00:45:08,338 --> 00:45:08,498
sorry.

996
00:45:08,498 --> 00:45:11,040
The question is what happens if you have three pillars and it turns out one of them is bad

997
00:45:11,040 --> 00:45:11,981
and you have to get rid of it.

998
00:45:13,940 --> 00:45:17,381
I mean, ideally we would have had some kind of backup earlier, and also ideally we would

999
00:45:17,381 --> 00:45:21,222
have done more playtesting earlier to validate whether we could make this thing work.

1000
00:45:21,222 --> 00:45:25,084
And the thing is it was really innovative, so we didn't ‑‑ we kind of weren't able

1001
00:45:25,084 --> 00:45:29,465
to playtest it until it was mostly done, which is a situation that you should try to avoid.

1002
00:45:29,905 --> 00:45:34,246
Sometimes you get partway through development and one of your pillars doesn't work and you

1003
00:45:34,246 --> 00:45:36,027
have to cut a huge chunk out of your game.

1004
00:45:36,027 --> 00:45:39,228
At that point, I think it's either double down on the other stuff or pull something

1005
00:45:39,228 --> 00:45:40,388
out of your backlog that can help.

1006
00:45:40,388 --> 00:45:45,349
Sometimes cuts really hurt and sometimes they make your game way worse.

1007
00:45:45,349 --> 00:45:46,989
That's a terrible situation.

1008
00:45:46,989 --> 00:45:50,230
Sorry, I don't have a magic answer for that, but it happens and it's terrible.

1009
00:45:50,230 --> 00:45:51,610
Thanks.

1010
00:45:54,059 --> 00:45:59,719
Hello. I've got a question. Honestly, it's going to be very difficult to answer probably.

1011
00:46:00,228 --> 00:46:04,149
developers, artists, engineers, they like to tinker, they like to continue working on

1012
00:46:04,149 --> 00:46:09,471
things. At what point with a feature do you really get that definition of done that you

1013
00:46:09,471 --> 00:46:15,273
decide, you know, this is done, you know, even if it's this buggy or this incomplete,

1014
00:46:15,273 --> 00:46:20,255
it fits the vision that we're looking for and let's move on or, you know, I need it

1015
00:46:20,255 --> 00:46:25,536
to continue to get to that point. That's my definition of done. So I'm going to cut these

1016
00:46:25,536 --> 00:46:26,077
other features.

1017
00:46:26,353 --> 00:46:31,976
Yeah, how do you define done and how do you like pry something out of someone's hands when they really just want to make it perfect forever?

1018
00:46:31,976 --> 00:46:35,778
Like I always think of there's sort of two types of people on a development team

1019
00:46:35,778 --> 00:46:42,701
There's artists and there's crafts people and artists are the types of people that will iterate on like a character's hair for like two years

1020
00:46:42,701 --> 00:46:45,822
If you let them, you know, they would do that and and you need those people

1021
00:46:46,482 --> 00:46:48,583
But then the craftsmen are the people who are like,

1022
00:46:48,583 --> 00:46:49,623
this is good enough, let's ship it.

1023
00:46:49,623 --> 00:46:50,763
And I'm definitely that second one.

1024
00:46:50,763 --> 00:46:52,864
I'm like, this is great, it looks great to me,

1025
00:46:52,864 --> 00:46:53,744
let's ship it.

1026
00:46:53,744 --> 00:46:55,164
Which really frustrates the artist.

1027
00:46:55,164 --> 00:46:58,425
So in a way it's like, come to some agreement

1028
00:46:58,425 --> 00:47:00,485
on how you can mostly satisfy both of those people.

1029
00:47:00,485 --> 00:47:03,186
I mean, if someone's in game development,

1030
00:47:03,186 --> 00:47:04,846
nobody gets paid if your game doesn't ship.

1031
00:47:04,846 --> 00:47:08,387
So they all know that you have to finish at some point.

1032
00:47:08,387 --> 00:47:09,667
But I know it can be really hard.

1033
00:47:10,982 --> 00:47:14,383
I don't have a great answer beyond just sort of talk about it and make sure that everyone

1034
00:47:14,383 --> 00:47:15,944
understands that that's the situation.

1035
00:47:15,944 --> 00:47:19,546
I recognize that you were the kind of person who could fiddle with that thing for the rest

1036
00:47:19,546 --> 00:47:20,106
of eternity.

1037
00:47:20,106 --> 00:47:24,529
And that's cool that you're like that, because that's a really good resource for us.

1038
00:47:24,529 --> 00:47:25,749
But we only have this much time.

1039
00:47:25,749 --> 00:47:27,670
We really need to let go of it.

1040
00:47:27,670 --> 00:47:31,732
And just kind of like make it clear to them why that's happening and not just that you're

1041
00:47:31,732 --> 00:47:34,214
like there to ruin their life, if that makes sense.

1042
00:47:34,214 --> 00:47:34,354
Yeah.

1043
00:47:34,354 --> 00:47:34,434
Okay.

1044
00:47:34,434 --> 00:47:35,374
Thank you.

1045
00:47:35,374 --> 00:47:35,955
Yeah.

1046
00:47:37,854 --> 00:47:40,455
Similar to his question, he was talking about done.

1047
00:47:40,455 --> 00:47:42,036
And you mentioned exploration.

1048
00:47:42,036 --> 00:47:44,398
I think any experienced developer knows you need a

1049
00:47:44,398 --> 00:47:45,759
level of exploration.

1050
00:47:45,759 --> 00:47:48,500
But it's the hardest to budget and schedule exploration.

1051
00:47:48,500 --> 00:47:50,622
So when you have a design feature, it's pretty easy to

1052
00:47:50,622 --> 00:47:52,983
get with a team and say, how long does it take to make it?

1053
00:47:52,983 --> 00:47:55,805
So what's your experience and processes you've used to

1054
00:47:55,805 --> 00:47:57,766
schedule and budget for that exploration?

1055
00:47:57,766 --> 00:47:59,427
And say when it's over and it's time to

1056
00:47:59,427 --> 00:48:00,148
turn into production.

1057
00:48:00,148 --> 00:48:00,548
I think, let's see.

1058
00:48:00,548 --> 00:48:04,371
Most of the games I've worked on.

1059
00:48:05,077 --> 00:48:06,618
There's different types of games.

1060
00:48:06,618 --> 00:48:09,702
There's ones where it's like this game has to ship by Christmas to match the movie and

1061
00:48:09,702 --> 00:48:13,447
therefore when you walk back from that it's like pre-production has to stop in September

1062
00:48:13,447 --> 00:48:13,967
or whatever.

1063
00:48:13,967 --> 00:48:19,354
And then there's the kinds of games where especially indies or like right now I'm in

1064
00:48:19,354 --> 00:48:22,738
research and we don't really have deadlines to ship stuff.

1065
00:48:22,738 --> 00:48:24,800
And then it's just sort of like...

1066
00:48:26,490 --> 00:48:29,132
recognizing ‑‑ it's kind of like the previous question of when do you rip things

1067
00:48:29,132 --> 00:48:34,636
out of people's hands and say this is done now. It's just sort of self‑imposed deadlines

1068
00:48:34,636 --> 00:48:39,839
and constraints and goals that aren't necessarily like set in stone and imposed from the outside

1069
00:48:39,839 --> 00:48:42,881
and that's where it requires some discipline from your team to say, okay, we're going to

1070
00:48:42,881 --> 00:48:46,504
playtest for a while and then we're going to stop. I mean, unless you're Valve. Valve

1071
00:48:46,504 --> 00:48:49,546
has so much money they don't ever have to stop playtesting. They can iterate forever

1072
00:48:49,546 --> 00:48:52,328
and ever and never ship anything. And that's a great situation to be in.

1073
00:48:52,869 --> 00:48:56,631
But I think recognizing that if you're not in that situation and saying, no, we're going

1074
00:48:56,631 --> 00:48:59,432
to have to ship at some point.

1075
00:48:59,432 --> 00:49:04,315
I know that Spry Fox does a lot of calculations on how much money do they have and when do

1076
00:49:04,315 --> 00:49:09,077
they have to ship in order to make some money and move on to the next game.

1077
00:49:09,077 --> 00:49:13,400
So when you don't have those external pressure of deadlines, you have to create it for yourself.

1078
00:49:16,627 --> 00:49:17,948
Hi. Good talk.

1079
00:49:17,948 --> 00:49:18,408
Oh, thanks.

1080
00:49:18,408 --> 00:49:23,712
So I'm producing a master's thesis project,

1081
00:49:23,712 --> 00:49:27,034
and since it is one student's project

1082
00:49:27,034 --> 00:49:29,196
and there are other students working on it,

1083
00:49:29,196 --> 00:49:30,637
there's no budget involved,

1084
00:49:30,637 --> 00:49:32,559
and there's a clear hierarchy

1085
00:49:32,559 --> 00:49:36,161
of where the decisions should come from.

1086
00:49:36,161 --> 00:49:39,684
So I think that has created some problems in...

1087
00:49:40,605 --> 00:49:46,269
not only creating a cohesive vision between the group but also sort of deciding what level

1088
00:49:46,269 --> 00:49:51,193
of autonomy the artists and the sound designers and everybody has. So I was just wondering

1089
00:49:51,193 --> 00:49:55,376
if there was a non‑data‑based way to sort of reconcile that.

1090
00:49:55,376 --> 00:49:59,259
Okay. So, yeah. So for a student project where there isn't a clear vision and there isn't

1091
00:49:59,259 --> 00:50:05,283
a clear hierarchy but there is someone who has more authority than everyone else.

1092
00:50:06,822 --> 00:50:09,869
I think what might help in that situation is to have a lot of discussions about what

1093
00:50:09,869 --> 00:50:10,691
the game is.

1094
00:50:10,691 --> 00:50:15,782
I've been on teams where it was sort of fluid like that and there wasn't...

1095
00:50:16,700 --> 00:50:19,983
a lot of clarity and sometimes just sitting down and talking about, okay, what is this

1096
00:50:19,983 --> 00:50:24,026
game and asking them to explain it to you and then kind of zeroing in on, oh, okay,

1097
00:50:24,026 --> 00:50:25,808
it sounds like it's this and this and this.

1098
00:50:25,808 --> 00:50:27,949
You can kind of find pillars that way maybe.

1099
00:50:27,949 --> 00:50:31,392
And then once you have those pillars and again, sort of input from everyone working on it,

1100
00:50:31,392 --> 00:50:33,674
at least some input from everyone working on it.

1101
00:50:33,674 --> 00:50:36,096
And you'll always have an artist who's like, but I want to make Final Fantasy.

1102
00:50:36,937 --> 00:50:38,217
and you're like, well, that's not what we're making.

1103
00:50:38,217 --> 00:50:39,378
It's like, but that's what I want to make.

1104
00:50:39,378 --> 00:50:40,898
It's like, well, here's the pillar.

1105
00:50:40,898 --> 00:50:44,460
You know, like sometimes you kind of have to override people.

1106
00:50:44,460 --> 00:50:46,501
But having some kind of community, like, OK,

1107
00:50:46,501 --> 00:50:49,683
what is this game discussion kind of regularly can help.

1108
00:50:49,683 --> 00:50:50,763
Like you don't want to end up in a rabbit hole

1109
00:50:50,763 --> 00:50:52,764
where you're just constantly doing that forever.

1110
00:50:52,764 --> 00:50:56,986
But if you feel like you're making progress,

1111
00:50:56,986 --> 00:50:58,587
I think that can be kind of useful.

1112
00:50:58,587 --> 00:51:00,168
And just sort of like as a producer coming to it

1113
00:51:00,168 --> 00:51:02,769
as a questioner and being like, OK, tell me what this game is.

1114
00:51:02,769 --> 00:51:03,369
You know, what am I doing?

1115
00:51:03,369 --> 00:51:04,430
Like, what are we doing?

1116
00:51:04,950 --> 00:51:07,393
and being a sort of objective questioner,

1117
00:51:07,393 --> 00:51:10,057
trying to get them to define what it is.

1118
00:51:10,057 --> 00:51:13,341
What happens if you've asked

1119
00:51:13,341 --> 00:51:17,467
and they just sort of don't really come up with an answer

1120
00:51:17,467 --> 00:51:18,208
to collectively?

1121
00:51:19,054 --> 00:51:23,117
So sometimes if you've asked and they don't come up with an answer, sometimes you can

1122
00:51:23,117 --> 00:51:26,140
kind of play dumb and be like, here's what I think the pillars are.

1123
00:51:26,140 --> 00:51:27,581
Show me where they're wrong.

1124
00:51:27,581 --> 00:51:31,023
And I think when you show someone something that doesn't match what they're thinking,

1125
00:51:31,023 --> 00:51:33,785
it's sometimes a lot easier for them to point and go, oh, wait, that's wrong.

1126
00:51:33,785 --> 00:51:35,386
It should be this other thing.

1127
00:51:35,386 --> 00:51:40,670
And just kind of like write things down or say things out loud and have them correct

1128
00:51:40,670 --> 00:51:42,652
you until they find out what that is.

1129
00:51:42,652 --> 00:51:46,575
As a producer, not having a lot of ego and just being willing to say things that are

1130
00:51:46,575 --> 00:51:48,176
not true or that are wrong out loud.

1131
00:51:48,676 --> 00:51:49,757
and be like, oh, I think it's this.

1132
00:51:49,757 --> 00:51:50,718
And they're like, no, you're an idiot.

1133
00:51:50,718 --> 00:51:51,599
It's actually this other thing.

1134
00:51:51,599 --> 00:51:52,179
You know, oh, good.

1135
00:51:52,179 --> 00:51:54,221
You know, like actually, I got you to say what it was,

1136
00:51:54,221 --> 00:51:56,924
you know, and not exactly like that.

1137
00:51:56,924 --> 00:51:59,786
But just being willing to like say things out loud

1138
00:51:59,786 --> 00:52:01,788
and tell people, correct you to the right thing

1139
00:52:01,788 --> 00:52:03,149
can be useful.

1140
00:52:03,149 --> 00:52:04,090
Awesome, thank you.

1141
00:52:04,090 --> 00:52:04,730
Good luck.

1142
00:52:06,192 --> 00:52:08,854
Hi, I'm a localization producer.

1143
00:52:08,854 --> 00:52:09,675
Oh, okay.

1144
00:52:09,675 --> 00:52:18,122
So, I often run into situations where I'm kind of the naysayer, where I have to convince

1145
00:52:18,122 --> 00:52:24,547
the original content and the main office to cut features that are not culturally relevant

1146
00:52:24,547 --> 00:52:25,588
to Western markets.

1147
00:52:25,588 --> 00:52:29,651
I just was wondering how often do you have to come up against...

1148
00:52:30,232 --> 00:52:39,816
going against the vision of maybe the, I guess, the powers that be, but still retaining, like,

1149
00:52:39,816 --> 00:52:43,958
without getting them so angry at you, because you're always the naysayer. I have trouble

1150
00:52:43,958 --> 00:52:49,381
dealing with, what is it, being, I guess, the negative person the entire time.

1151
00:52:49,381 --> 00:52:50,322
The dream killer, I guess.

1152
00:52:50,322 --> 00:52:57,005
Yeah, yeah. So localization, I think localization, UI, and things like accessibility or publisher

1153
00:52:57,005 --> 00:52:59,246
cert requirements are all like that, where it's like, okay, like,

1154
00:52:59,832 --> 00:53:03,733
these are things that we really have to do. And they're not fun things. They're not fun

1155
00:53:03,733 --> 00:53:07,414
cool things. So no one's really interested in them. They put them off until the very

1156
00:53:07,414 --> 00:53:12,575
last possible moment. And then they're like, oh, crap, we have to do all this stuff.

1157
00:53:12,575 --> 00:53:16,456
So, again, I think just really sort of presenting your data really objectively and being like,

1158
00:53:16,456 --> 00:53:20,697
here's that list of things. I worked with a certification producer who was really good

1159
00:53:20,697 --> 00:53:24,858
at saying here's the list of cert requirements. We hate those. We don't want to do any of

1160
00:53:24,858 --> 00:53:28,359
those things. Well, here's the list. Here's where we're not meeting it and presenting

1161
00:53:28,359 --> 00:53:29,539
it like over and over and over.

1162
00:53:30,059 --> 00:53:31,721
And people did have a tendency to be like,

1163
00:53:31,721 --> 00:53:35,163
oh, she hates fun and she doesn't like our game.

1164
00:53:35,163 --> 00:53:36,324
But of course she did.

1165
00:53:36,324 --> 00:53:38,646
She wanted it to pass certs so we could ship it

1166
00:53:38,646 --> 00:53:40,528
and make money.

1167
00:53:40,528 --> 00:53:42,869
And I think just sort of maybe reminding people

1168
00:53:42,869 --> 00:53:44,311
of the overall context of like,

1169
00:53:44,311 --> 00:53:46,572
hey, you're the one who wanted us to localize into Dutch.

1170
00:53:46,572 --> 00:53:48,754
I didn't come up with that idea.

1171
00:53:48,754 --> 00:53:51,496
It's tough though.

1172
00:53:51,496 --> 00:53:54,198
I think especially those sort of end finishing

1173
00:53:54,198 --> 00:53:56,340
polishing things that no one's really interested in

1174
00:53:56,340 --> 00:53:58,722
are really, localization is super hard.

1175
00:53:59,110 --> 00:54:05,153
Yeah, I think the problem that I run into mostly is kind of like I don't have a lot

1176
00:54:05,153 --> 00:54:10,116
of data to back it up because a lot of it is cultural context and you can't really quantify

1177
00:54:10,116 --> 00:54:12,157
cultural context.

1178
00:54:12,157 --> 00:54:12,637
So yeah.

1179
00:54:12,637 --> 00:54:13,278
I was just, yeah.

1180
00:54:13,278 --> 00:54:16,279
And even like articles or best practices or guidelines.

1181
00:54:16,279 --> 00:54:18,741
And yeah, sometimes those don't really exist.

1182
00:54:18,741 --> 00:54:21,923
But any kind of backup you can find of like this was written down on the Internet that

1183
00:54:21,923 --> 00:54:24,364
like we really shouldn't do this in this country.

1184
00:54:24,364 --> 00:54:26,665
But yeah, that's a tough and thankless job.

1185
00:54:26,665 --> 00:54:27,166
Cool.

1186
00:54:27,166 --> 00:54:27,846
Thank you very much.

1187
00:54:27,966 --> 00:54:31,515
Okay. I think we're ‑‑ are we out of time? Yep. All right. I'll run out in the

1188
00:54:31,515 --> 00:54:35,444
hallway, though, for overflow if anyone else wants to talk. Thanks a lot again, everybody.

