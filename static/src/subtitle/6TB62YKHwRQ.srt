1
00:00:10,399 --> 00:00:10,920
All right.

2
00:00:11,520 --> 00:00:12,121
Hi, everybody.

3
00:00:14,703 --> 00:00:16,445
So a little bit of housekeeping before we get started.

4
00:00:16,685 --> 00:00:18,767
Cell phones to quiet.

5
00:00:20,249 --> 00:00:21,190
Whoa, that's really loud.

6
00:00:23,232 --> 00:00:26,155
And don't forget the speaker evaluations at the end.

7
00:00:26,175 --> 00:00:27,256
That feedback's super helpful.

8
00:00:29,643 --> 00:00:30,664
And thanks so much for coming.

9
00:00:31,324 --> 00:00:32,185
My name's Simon Unger.

10
00:00:32,505 --> 00:00:33,105
I'm an animator.

11
00:00:33,826 --> 00:00:36,327
I've been animating games since about 2001.

12
00:00:37,268 --> 00:00:42,171
I was lead animator at EA, Square Enix, Robotoki, and I'm

13
00:00:42,211 --> 00:00:43,372
now working at Phoenix Labs.

14
00:00:44,530 --> 00:00:49,893
I also teach animation. I've taught at schools such as Nomen, iAnimate, Vancouver Film School.

15
00:00:51,354 --> 00:00:55,336
Phoenix Labs, for those of you who haven't heard of us, we are an indie developer based

16
00:00:55,396 --> 00:01:00,018
out of Vancouver, B.C. We're a team of about 40 industry veterans working on our first

17
00:01:00,058 --> 00:01:01,779
original IP, Dauntless.

18
00:01:04,037 --> 00:01:09,662
So these are a few of the teams that our company has

19
00:01:09,682 --> 00:01:11,263
worked in the past, the employees, sorry.

20
00:01:12,024 --> 00:01:14,646
As you can see, we have a diverse and experienced crew

21
00:01:14,706 --> 00:01:17,788
who aren't strangers to big AAA titles and big teams.

22
00:01:18,569 --> 00:01:21,151
Games like the Mass Effect franchise, League of Legends,

23
00:01:21,191 --> 00:01:23,633
Dead Rising, and Gears of War are just a few of the

24
00:01:23,673 --> 00:01:24,654
projects we've worked on.

25
00:01:25,975 --> 00:01:28,197
Most of the team have spent the majority of their careers

26
00:01:28,257 --> 00:01:29,458
on big teams and projects.

27
00:01:30,058 --> 00:01:31,479
Our motivation for going indie.

28
00:01:32,760 --> 00:01:36,923
and remaining smaller came from the desire to eliminate many of the dynamics involved in

29
00:01:37,343 --> 00:01:40,205
larger teams that tend to slow down agile decision-making.

30
00:01:41,366 --> 00:01:45,329
It lets our senior team focus on what's really important, which is making games.

31
00:01:48,251 --> 00:01:52,654
So Phoenix Labs was started with the idea that if you assemble a small

32
00:01:52,814 --> 00:01:53,975
experienced group of people

33
00:01:54,475 --> 00:01:58,558
with great intentions, empower them to solve their own problems, they can make

34
00:01:58,598 --> 00:02:00,239
any project they throw themselves at great.

35
00:02:02,773 --> 00:02:09,679
So what is Dauntless? It's a co-op action RPG set in a science fantasy universe. Four players

36
00:02:09,719 --> 00:02:14,724
band together to slay behemoths that threaten the survival of their fractured world. To give

37
00:02:14,744 --> 00:02:17,927
you guys a better idea of what that's all about, here's our announced trailer.

38
00:02:55,681 --> 00:02:55,741
you

39
00:03:49,093 --> 00:03:49,173
R.I.P.

40
00:04:16,800 --> 00:04:25,226
So incidentally, that trailer was made in-house with just a handful of the team, while we were also working towards a pretty major pre-alpha milestone.

41
00:04:25,286 --> 00:04:33,552
So it's a good example of how we're able to produce a lot of content quickly, and at a quality bar usually reserved for much bigger teams with larger budgets.

42
00:04:34,392 --> 00:04:40,557
We've got some lofty goals for Dauntless and for the studio, and no small amount of challenges to overcome.

43
00:04:41,877 --> 00:04:44,279
in my talk today, so I'm gonna cover some of the ways

44
00:04:44,319 --> 00:04:47,041
we've found to make our work more efficient and more fun,

45
00:04:47,782 --> 00:04:49,023
and just our general mindset

46
00:04:49,043 --> 00:04:50,444
when we approach these challenges.

47
00:04:51,185 --> 00:04:52,125
So what are we up against?

48
00:04:54,067 --> 00:04:57,429
As I mentioned, we wanna keep the studio relatively small,

49
00:04:58,030 --> 00:04:59,611
no more than 30 to 40 people.

50
00:05:00,312 --> 00:05:01,673
We wanted to challenge the convention

51
00:05:01,693 --> 00:05:04,034
of overcomplicated systems and processes,

52
00:05:04,115 --> 00:05:05,656
and instead work with less overhead,

53
00:05:05,696 --> 00:05:07,437
more empowerment, and less management.

54
00:05:08,358 --> 00:05:10,319
Our animation team consists of three animators.

55
00:05:11,179 --> 00:05:15,382
When we break down the scope of the game, that leaves one animator for player, one animator

56
00:05:15,402 --> 00:05:20,887
for behemoths, and another one to oversee the dialogue, NPCs, and narrative. We needed to

57
00:05:20,947 --> 00:05:26,491
avoid wasteful practices as well as optimize each person's contributions to the team. One or

58
00:05:26,511 --> 00:05:31,635
two people being blocked on a 100-plus person team won't really derail a milestone, but could

59
00:05:31,655 --> 00:05:35,478
have pretty bad consequences on a team our size and at the pace we move.

60
00:05:38,888 --> 00:05:41,848
We all came from big AAA studios and projects, and

61
00:05:41,888 --> 00:05:43,649
didn't want to sacrifice the quality we're used to

62
00:05:43,689 --> 00:05:45,549
delivering, nor the scope of the project

63
00:05:45,589 --> 00:05:46,469
we wanted to take on.

64
00:05:47,190 --> 00:05:49,770
We needed to find a way to deliver the experience we're

65
00:05:49,830 --> 00:05:52,191
after with the team and the budget we wanted to work with.

66
00:05:53,011 --> 00:05:56,291
Specific to animation, the challenge was how do we

67
00:05:56,331 --> 00:05:59,032
produce a high volume of animation at a quality we're

68
00:05:59,072 --> 00:06:02,053
happy with, and ensure the animations we do produce are

69
00:06:02,073 --> 00:06:03,233
getting the most mileage in game.

70
00:06:06,057 --> 00:06:09,099
We also wanted to create an appealing, stylized universe.

71
00:06:09,299 --> 00:06:12,461
The easy choice would have been to choose realism and just

72
00:06:12,502 --> 00:06:14,383
charge head first into the uncanny valley.

73
00:06:15,284 --> 00:06:18,626
Photo-based textures, unedited motion capture, default

74
00:06:18,666 --> 00:06:22,329
lighting, 3D scan props and characters would have allowed

75
00:06:22,389 --> 00:06:24,731
us to create a lot of content quickly and with little

76
00:06:24,791 --> 00:06:26,432
direction to maintain continuity.

77
00:06:27,113 --> 00:06:28,994
For us, that didn't feel like an exciting process.

78
00:06:28,994 --> 00:06:32,818
proposition to work on and not really an appealing choice for the universe we wanted to create.

79
00:06:33,739 --> 00:06:39,705
But as many of you likely know, creating stylized, polished animation is pretty labor intensive

80
00:06:39,965 --> 00:06:44,650
and polished time is not a luxury many teams get, especially smaller teams, on their first

81
00:06:44,710 --> 00:06:44,911
try.

82
00:06:47,328 --> 00:06:48,930
And core to our game are behemoth battles.

83
00:06:49,370 --> 00:06:52,673
Boss encounters are hard enough to do to get right on their own.

84
00:06:52,693 --> 00:06:55,355
And on top of that, animating believable beasts

85
00:06:55,435 --> 00:06:57,697
is a challenging and time-consuming task

86
00:06:57,717 --> 00:06:58,357
for animation.

87
00:06:59,078 --> 00:07:00,599
There's a very good reason few games

88
00:07:00,659 --> 00:07:02,621
choose to make creatures a focal point.

89
00:07:03,541 --> 00:07:04,903
It's just really tricky to do well.

90
00:07:05,963 --> 00:07:07,485
So how do we approach all of this

91
00:07:07,725 --> 00:07:09,706
in a way that delivers something we're happy with

92
00:07:09,907 --> 00:07:12,709
without a giant team, massive budget, or unlimited time?

93
00:07:19,250 --> 00:07:22,591
For animation, turnaround time at an acceptable quality

94
00:07:22,631 --> 00:07:24,451
was one of our most important problems to solve.

95
00:07:25,072 --> 00:07:27,452
We didn't want to become a bottleneck for design, VFX,

96
00:07:27,532 --> 00:07:30,513
or audio, so creating and iterating animations quickly

97
00:07:30,634 --> 00:07:33,414
with as little effort as possible was paramount.

98
00:07:33,514 --> 00:07:36,455
Keyframing animations from scratch at the fidelity

99
00:07:36,475 --> 00:07:39,136
we're after is an expensive proposition,

100
00:07:39,957 --> 00:07:42,237
especially when you factor in the cost of the many revisions

101
00:07:42,277 --> 00:07:45,498
we typically take before finding the right mix of timing,

102
00:07:45,559 --> 00:07:47,399
coverage, and appeal for gameplay purposes.

103
00:07:48,439 --> 00:07:48,880
So what do we do?

104
00:07:51,522 --> 00:07:53,423
We decided we would make use of motion capture

105
00:07:53,443 --> 00:07:54,104
as much as we could.

106
00:07:54,764 --> 00:07:57,586
Luckily in Vancouver, we've got a few good options

107
00:07:57,866 --> 00:07:59,007
of mocap vendors nearby,

108
00:07:59,567 --> 00:08:01,188
but shooting externally can be expensive

109
00:08:01,448 --> 00:08:04,150
and not very conducive to iteration for a small studio.

110
00:08:04,870 --> 00:08:06,911
Early on we determined that having access

111
00:08:06,951 --> 00:08:08,452
to our own motion capture space

112
00:08:08,492 --> 00:08:09,793
was gonna be pretty vital.

113
00:08:10,754 --> 00:08:12,735
There were often times we would need only to prove out

114
00:08:12,775 --> 00:08:15,376
a small, very small aspect of gameplay

115
00:08:16,557 --> 00:08:18,158
and iterate on just a handful of moves.

116
00:08:19,004 --> 00:08:24,307
Booking a shoot at a local studio, casting an actor, craft services, and so on, would

117
00:08:24,327 --> 00:08:28,470
have been way too expensive in both time and money, and ultimately work against the point

118
00:08:28,510 --> 00:08:30,091
of wanting to use MoCap in the first place.

119
00:08:30,831 --> 00:08:35,534
One of the great aspects of being as agile as we are, making a decision like this and

120
00:08:35,614 --> 00:08:38,476
seeing the results becomes a really tight loop for us.

121
00:08:39,136 --> 00:08:46,221
From when we decided we should look into getting a MoCap system and building our own and starting

122
00:08:46,261 --> 00:08:47,661
shooting was really only about two months.

123
00:08:51,812 --> 00:08:53,833
So now we had to figure out which system to get.

124
00:08:54,693 --> 00:08:56,593
Some of us on the team have had a lot of experience with

125
00:08:56,613 --> 00:08:59,574
various capture systems, mainly Vicon, which for a long time

126
00:08:59,594 --> 00:09:00,354
has been the standard.

127
00:09:01,094 --> 00:09:03,274
But we wanted to give as many of the currently available

128
00:09:03,394 --> 00:09:05,235
options as we could find a chance.

129
00:09:06,015 --> 00:09:07,835
Some of the main factors that mattered to us when

130
00:09:07,915 --> 00:09:11,416
considering a system was ease of use.

131
00:09:12,276 --> 00:09:14,216
We couldn't have extra head count to run it.

132
00:09:14,416 --> 00:09:16,437
It had to be easy enough that one or two people on the team

133
00:09:16,477 --> 00:09:18,757
could shoot with as little setup time as possible.

134
00:09:21,283 --> 00:09:21,964
Scalability.

135
00:09:22,704 --> 00:09:24,145
Shooting more than one actor at a time,

136
00:09:24,205 --> 00:09:26,446
capturing rigid bodies or props,

137
00:09:26,486 --> 00:09:27,887
or maybe even doing facial capture.

138
00:09:27,947 --> 00:09:31,028
We wanted a system that could grow with our needs

139
00:09:31,068 --> 00:09:32,189
and upgrade easily in the future

140
00:09:32,209 --> 00:09:34,310
without having to retool the entire thing.

141
00:09:37,751 --> 00:09:38,732
Access to support.

142
00:09:40,032 --> 00:09:43,074
While we had a ton of experience working on mocap data

143
00:09:43,114 --> 00:09:44,775
and coordinating and directing mocap shoots,

144
00:09:45,315 --> 00:09:46,755
we didn't have very much experience

145
00:09:46,795 --> 00:09:47,896
solving and tracking data,

146
00:09:48,216 --> 00:09:49,457
setting up a mocap space.

147
00:09:51,953 --> 00:09:53,397
moquette volume, sorry, from scratch.

148
00:09:53,878 --> 00:09:56,365
Having instruction and using the system and the support

149
00:09:56,385 --> 00:09:58,490
line when things get a little confusing was pretty

150
00:09:58,530 --> 00:09:59,132
important to us.

151
00:10:01,510 --> 00:10:02,351
And of course, cost.

152
00:10:02,831 --> 00:10:04,793
We're working on a budget, and getting the most mileage

153
00:10:04,813 --> 00:10:06,794
for our money was a top concern.

154
00:10:08,255 --> 00:10:09,776
And lastly, data quality.

155
00:10:10,077 --> 00:10:12,639
Getting clean, easy to work with data was going to be crucial.

156
00:10:12,719 --> 00:10:15,160
If it was going to take a lot of time for us to clean that up

157
00:10:16,081 --> 00:10:19,063
or imprecise capture data, we'd just

158
00:10:19,123 --> 00:10:21,785
lose a large part of the draw of using this productivity tool.

159
00:10:23,006 --> 00:10:24,607
So we looked at those criteria and weighed

160
00:10:24,628 --> 00:10:26,609
some of the currently available solutions against them.

161
00:10:29,698 --> 00:10:31,659
So these are the vendors we chose to evaluate.

162
00:10:31,879 --> 00:10:33,500
There are others out there, for sure.

163
00:10:34,400 --> 00:10:35,401
But we wanted to start with ones

164
00:10:35,441 --> 00:10:36,962
we'd either had experience with ourself,

165
00:10:37,222 --> 00:10:39,363
or we could get feedback from people we know and trust,

166
00:10:39,663 --> 00:10:40,584
or at the very least,

167
00:10:40,624 --> 00:10:42,404
had been used in a production environment.

168
00:10:45,486 --> 00:10:46,647
We talked to most of them,

169
00:10:47,067 --> 00:10:49,088
researched ones that didn't respond to our emails,

170
00:10:49,808 --> 00:10:51,389
and because we're a little crazy about our data,

171
00:10:51,449 --> 00:10:54,230
we made a decision matrix to weigh them all

172
00:10:54,270 --> 00:10:56,091
against each other, as well as our criteria.

173
00:10:56,932 --> 00:10:57,612
So which did we choose?

174
00:10:59,480 --> 00:11:02,602
We ended up getting an OptiTrack system from Natural Point.

175
00:11:02,902 --> 00:11:05,844
We've got 16 of their Prime 13 cameras on tripods,

176
00:11:06,044 --> 00:11:07,385
and in our current space, we're able to get

177
00:11:07,425 --> 00:11:08,966
about a 30 by 30 foot volume,

178
00:11:09,926 --> 00:11:11,447
and we've been really happy with how it's worked out.

179
00:11:14,957 --> 00:11:17,818
We chose it because it gives us the best cross-section of data

180
00:11:17,858 --> 00:11:20,040
quality, ease of use, portability, price.

181
00:11:20,620 --> 00:11:23,682
Our costs for all the cameras, tripods, suits, crash mats,

182
00:11:23,802 --> 00:11:26,384
everything, ended up being only about the same as a couple of

183
00:11:26,424 --> 00:11:27,965
shoots at an external vendor.

184
00:11:28,825 --> 00:11:31,247
And so far on Dauntless, we've had about 70 shoots.

185
00:11:32,107 --> 00:11:34,148
So it's fair to say the system's paid for itself

186
00:11:34,409 --> 00:11:35,209
several times over.

187
00:11:38,963 --> 00:11:39,403
Excuse me.

188
00:11:40,004 --> 00:11:41,945
Setup was surprisingly easy.

189
00:11:42,165 --> 00:11:44,146
The time it took from the initial unboxing

190
00:11:44,206 --> 00:11:46,547
to our first capture was only about two and a half hours.

191
00:11:47,507 --> 00:11:49,168
Mobility is also good for a trailer.

192
00:11:49,729 --> 00:11:51,930
We rented out a larger office space in our building.

193
00:11:51,970 --> 00:11:53,170
This is us doing it right there.

194
00:11:53,711 --> 00:11:56,612
And we were able to get about a 25 by 50 foot capture volume

195
00:11:57,492 --> 00:11:58,773
to get a little more running room in.

196
00:11:59,373 --> 00:12:01,435
It only took a couple of hours for us to break it down,

197
00:12:01,495 --> 00:12:03,996
move it downstairs, and set it back up again and be shooting.

198
00:12:04,616 --> 00:12:06,617
And we only needed it for a day, so the mobility

199
00:12:06,657 --> 00:12:07,718
was really, really great for that.

200
00:12:12,973 --> 00:12:15,274
It also satisfies our easy to use criteria.

201
00:12:15,595 --> 00:12:18,556
One person can set it up, put on a suit, and capture

202
00:12:18,596 --> 00:12:21,939
themselves, and then solve and retarget the data onto the

203
00:12:21,979 --> 00:12:22,579
gameplay rig.

204
00:12:23,059 --> 00:12:25,581
I've been able to do a small shoot on my own, about a dozen

205
00:12:25,621 --> 00:12:28,222
moves or so, and be back at my desk in under 30 minutes.

206
00:12:29,656 --> 00:12:31,979
This allows us to talk about some new gameplay ideas in the

207
00:12:32,019 --> 00:12:34,702
morning and be playtesting them in the game before the

208
00:12:34,722 --> 00:12:35,183
end of the day.

209
00:12:36,044 --> 00:12:38,306
This type of iterations allowed us to try new ideas

210
00:12:38,366 --> 00:12:41,190
quickly and find the fun in the gameplay without being a

211
00:12:41,270 --> 00:12:43,853
slave to labor-intensive content creation and long

212
00:12:43,893 --> 00:12:47,577
iteration times, which, as many know, is often the enemy

213
00:12:47,617 --> 00:12:48,879
of quality in game development.

214
00:12:50,500 --> 00:12:52,821
You definitely don't need to jump into fully the same

215
00:12:52,861 --> 00:12:53,602
equipment we have.

216
00:12:54,162 --> 00:12:56,023
There are a lot of different setups out there to choose

217
00:12:56,043 --> 00:12:57,763
from, could fit a wide range of budgets.

218
00:12:58,443 --> 00:13:01,185
I should also say this isn't a paid endorsement of OptiTrack.

219
00:13:01,485 --> 00:13:03,665
Although if anybody is here from OptiTrack, I wouldn't

220
00:13:03,706 --> 00:13:04,566
mind some more cameras.

221
00:13:06,327 --> 00:13:08,367
We've just been really happy with the equipment and support

222
00:13:08,407 --> 00:13:08,948
they've shown us.

223
00:13:15,430 --> 00:13:17,131
So as I mentioned in the previous slide.

224
00:13:18,026 --> 00:13:23,367
A lot of what hinders good content creation becoming great is iteration. So often the

225
00:13:23,547 --> 00:13:28,008
first idea isn't the best one, but if you've invested a ton of time into it, or your ability

226
00:13:28,048 --> 00:13:31,349
to iterate on it is cumbersome, you're going to be a little reluctant to make changes,

227
00:13:31,449 --> 00:13:36,550
and even if they're in the best interest of the product. Creating biped animations using

228
00:13:36,590 --> 00:13:41,931
mocap is a fairly trivial way to prototype, but creatures are a trickier matter. As most

229
00:13:41,991 --> 00:13:45,732
animators know, nonhuman characters are a time-consuming thing to animate by hand.

230
00:13:47,936 --> 00:13:50,697
In an effort to minimize possible throwaway work,

231
00:13:51,237 --> 00:13:53,118
we started prototyping creature gameplay

232
00:13:53,158 --> 00:13:54,779
using stepped or linear interpolation

233
00:13:55,119 --> 00:13:56,240
and only a few key poses

234
00:13:56,260 --> 00:13:57,701
to communicate the intent of the move.

235
00:13:58,401 --> 00:13:59,442
Within only a few hours,

236
00:13:59,462 --> 00:14:01,803
we can have a handful of attacks and locomotion,

237
00:14:02,343 --> 00:14:03,664
moves in engine for the designers

238
00:14:03,684 --> 00:14:05,265
to create prototype encounters with

239
00:14:05,445 --> 00:14:07,626
and get a feel for pacing and staging.

240
00:14:08,546 --> 00:14:10,167
They're also free to scale, chop up,

241
00:14:10,287 --> 00:14:11,848
repurpose these placeholder atoms

242
00:14:12,268 --> 00:14:13,949
until they get something that feels close enough

243
00:14:14,149 --> 00:14:15,190
to what they had in mind.

244
00:14:16,490 --> 00:14:18,952
After that, we can re-export these as FBX.

245
00:14:19,672 --> 00:14:21,654
FBX is to give us a rough framework to do a

246
00:14:21,714 --> 00:14:22,554
second pass on.

247
00:14:23,295 --> 00:14:25,936
This way, the animators can be confident that all these moves

248
00:14:25,956 --> 00:14:28,298
have been vetted in-engine many, many times and play

249
00:14:28,338 --> 00:14:30,599
tested repeatedly, so we're not going in blind.

250
00:14:31,440 --> 00:14:33,821
Working this way has greatly reduced the impact of revision

251
00:14:33,841 --> 00:14:34,321
work for us.

252
00:14:38,397 --> 00:14:41,741
And we continue to update these animations, adding in-betweens

253
00:14:41,801 --> 00:14:44,644
and ultimately moving to final polish, always play testing at

254
00:14:44,724 --> 00:14:48,047
each iteration and getting team feedback along the way.

255
00:14:48,628 --> 00:14:51,150
At no point do we ever put a polished animation in-game

256
00:14:51,170 --> 00:14:53,553
that hasn't been play tested many, many, many times.

257
00:14:54,534 --> 00:14:56,675
Now this didn't come naturally for everyone on the team.

258
00:14:57,215 --> 00:15:00,176
It took quite some time for the non-animators on the team

259
00:15:00,196 --> 00:15:02,177
to be able to see past step-keyed animations

260
00:15:03,157 --> 00:15:04,618
and understand what the end goal was.

261
00:15:04,858 --> 00:15:06,659
I think this is really only possible

262
00:15:06,719 --> 00:15:07,879
after having worked through this

263
00:15:07,919 --> 00:15:09,160
a couple of times with the team.

264
00:15:10,921 --> 00:15:11,921
If you want to work this way,

265
00:15:12,001 --> 00:15:13,582
definitely expect some growing pains

266
00:15:13,702 --> 00:15:15,282
and complaints about animation quality

267
00:15:15,322 --> 00:15:16,323
or frame rate for a while,

268
00:15:17,503 --> 00:15:18,904
but it's definitely helped us speed up.

269
00:15:23,103 --> 00:15:26,345
So it was also important to get the most mileage out of these

270
00:15:26,425 --> 00:15:27,906
animations that we put into the game.

271
00:15:28,126 --> 00:15:30,928
We wanted to create a lot of diverse behemoth encounters.

272
00:15:30,988 --> 00:15:34,150
And spending all that time creating awesome animations

273
00:15:34,430 --> 00:15:36,231
would be a bit of a waste if they weren't being

274
00:15:36,311 --> 00:15:37,191
seen or used much.

275
00:15:39,149 --> 00:15:44,276
We made the decision to create some high-level categories in our game called a genus, we call it,

276
00:15:44,936 --> 00:15:48,621
to slot these different creature types into, mainly based on their physiology.

277
00:15:49,382 --> 00:15:55,770
Some examples of a genus would be here on the screen like a mixed flyer or an agile quadruped or a theropod.

278
00:15:59,270 --> 00:16:03,395
Each variant in the genus shares the same skeleton type and rig.

279
00:16:04,036 --> 00:16:05,738
We can reuse and retarget animations

280
00:16:05,858 --> 00:16:07,320
within the same skeletal structure

281
00:16:07,380 --> 00:16:11,344
and change or replace geometry, color, size, effects, audio,

282
00:16:11,384 --> 00:16:14,628
and create unique encounters with often no new animation

283
00:16:14,708 --> 00:16:15,049
assets.

284
00:16:15,569 --> 00:16:18,413
We can even make small anatomy changes within a genus.

285
00:16:19,034 --> 00:16:21,455
such as adding or removing tails or wings,

286
00:16:22,256 --> 00:16:25,037
and even changing leg types, like from a reverse knee

287
00:16:25,118 --> 00:16:26,058
to a planter leg.

288
00:16:26,999 --> 00:16:29,881
Some variations required a few new animations, some

289
00:16:29,921 --> 00:16:30,421
a little more.

290
00:16:31,642 --> 00:16:33,463
But this really only adds to the asset pool

291
00:16:33,803 --> 00:16:36,945
that Genus can use, and all the possible variations

292
00:16:36,985 --> 00:16:37,886
that we make in the future.

293
00:16:38,226 --> 00:16:40,568
Basically just adding more LEGO pieces to our collection.

294
00:16:43,456 --> 00:16:47,777
Here's an example of a behemoth Pangar with a variant Nasher.

295
00:16:48,217 --> 00:16:51,618
By changing only a couple of animations, adjusting behavior

296
00:16:51,678 --> 00:16:54,299
and stats, as well as changing some play rates on base

297
00:16:54,339 --> 00:16:57,080
animations, we can create a unique and engaging encounter

298
00:16:57,100 --> 00:16:58,740
with much less work than creating a new

299
00:16:58,760 --> 00:16:59,660
behemoth from scratch.

300
00:17:01,641 --> 00:17:04,042
It was also critical for us to solve complex animation

301
00:17:04,102 --> 00:17:06,202
problems with as few assets as possible.

302
00:17:09,625 --> 00:17:15,411
Much like our approach to animation, our environment team has a pipeline that allows them to create

303
00:17:15,471 --> 00:17:20,957
massive variety of playable terrain quickly. These can contain multiple biomes, sub-biomes,

304
00:17:21,177 --> 00:17:25,642
obstacles, complex nab meshes to locomote around. Encountering a behemoth could happen

305
00:17:25,662 --> 00:17:28,765
on a slope, in a valley, next to a cliff, or even in a forest.

306
00:17:29,806 --> 00:17:34,470
A traditional animation system would require us to create a massive number of locomotion

307
00:17:34,490 --> 00:17:39,053
and combat animations to handle turns and slopes and leans and collision volumes.

308
00:17:39,974 --> 00:17:44,457
Again, we didn't want any solutions that involved just throwing people or assets at.

309
00:17:45,118 --> 00:17:49,161
We wanted something that was a bit more elegant, more tunable, and allows us to use as few

310
00:17:49,241 --> 00:17:50,301
animations as possible.

311
00:17:52,866 --> 00:17:56,229
So as an example, here is a behemoth traversing a curved

312
00:17:56,269 --> 00:17:58,330
path on a fairly complex slope.

313
00:17:58,911 --> 00:18:01,973
It's a lot to ask for a single animation to solve, and a

314
00:18:02,254 --> 00:18:03,635
pretty common problem for games.

315
00:18:04,676 --> 00:18:07,938
To make this trickier, he's quite large, and he's a longer

316
00:18:07,978 --> 00:18:10,700
creature with a tail navigating around multiple

317
00:18:10,841 --> 00:18:12,562
obstacles while traversing this slope.

318
00:18:13,142 --> 00:18:15,644
We could choose to solve this with blend spaces and a bunch

319
00:18:15,684 --> 00:18:18,447
of animations for coverage, but we really felt like there

320
00:18:18,487 --> 00:18:20,168
was a better way to approach this.

321
00:18:22,012 --> 00:18:24,714
We ended up using a full body IK solution,

322
00:18:24,914 --> 00:18:28,356
and we chose to integrate an off-the-shelf package called

323
00:18:28,436 --> 00:18:28,856
Ikinema.

324
00:18:29,436 --> 00:18:30,857
And using these IK layers, we were

325
00:18:30,897 --> 00:18:33,579
able to do a lot with only just this single walk cycle.

326
00:18:36,660 --> 00:18:39,442
So here's an example of that same walk cycle, same path,

327
00:18:40,402 --> 00:18:42,864
nothing's changed, with Ikinema turned on.

328
00:18:43,781 --> 00:18:45,642
conforming to the path, foot planting,

329
00:18:46,222 --> 00:18:48,123
and a look at to lead the head into the turns

330
00:18:48,443 --> 00:18:49,823
are all working together to help turn

331
00:18:49,884 --> 00:18:52,104
just this same walk cycle into something

332
00:18:52,124 --> 00:18:53,265
that's a lot more versatile.

333
00:18:54,025 --> 00:18:56,126
We also use this for hit reactions,

334
00:18:57,647 --> 00:18:59,087
aiming attacks and appendages,

335
00:18:59,227 --> 00:19:01,168
especially when they're on uneven terrain or a slope,

336
00:19:01,208 --> 00:19:03,509
such as when he does a tail attack on a slope.

337
00:19:04,289 --> 00:19:06,090
It takes care of that and keeps the alignment.

338
00:19:11,820 --> 00:19:14,921
So even with these measures and many others,

339
00:19:15,421 --> 00:19:16,881
we still have a really tight timeline

340
00:19:16,921 --> 00:19:19,782
and a lot of content to create, especially when we go live.

341
00:19:20,802 --> 00:19:22,923
So we did have to outsource some animation work.

342
00:19:24,363 --> 00:19:26,164
We were looking to do development better

343
00:19:26,184 --> 00:19:27,104
than we had in the past.

344
00:19:27,344 --> 00:19:29,405
And how we approached outsourcing was no different.

345
00:19:30,005 --> 00:19:32,365
Having a lot of experience with traditional outsourcing

346
00:19:32,405 --> 00:19:34,286
business model, we knew we didn't want

347
00:19:34,306 --> 00:19:35,546
to work that way for animation.

348
00:19:36,603 --> 00:19:38,943
Outsourcing typically has a point of diminishing return.

349
00:19:39,884 --> 00:19:42,644
The usual high in-studio overhead with pre-planning,

350
00:19:42,704 --> 00:19:45,185
managing, directing, and maintaining dictates that

351
00:19:45,205 --> 00:19:47,345
there's got to be a big enough bulk of work to send out.

352
00:19:48,526 --> 00:19:51,206
We knew we weren't going to have hundreds of animations to

353
00:19:52,026 --> 00:19:54,827
send out at a time, and we couldn't sacrifice a lot of

354
00:19:54,887 --> 00:19:57,928
in-house cycles to overseeing animation outsourced work.

355
00:19:58,988 --> 00:20:00,948
So we wanted to find a partner rather than a vendor.

356
00:20:01,929 --> 00:20:04,210
a group who worked more as an extension of our team

357
00:20:04,731 --> 00:20:07,773
and collaborated with us rather than just completing

358
00:20:07,813 --> 00:20:08,794
heavily directed work.

359
00:20:09,394 --> 00:20:11,856
We were super fortunate that we didn't have to search long

360
00:20:11,896 --> 00:20:12,617
for such a partner.

361
00:20:14,838 --> 00:20:17,200
We teamed up with Steamroller Studios, whose creative

362
00:20:17,220 --> 00:20:19,202
director happens to be a friend, Jalil Sadul.

363
00:20:20,643 --> 00:20:23,445
They're a group of amazing people based out of Florida,

364
00:20:23,585 --> 00:20:26,127
and they brought a ton of film and creature experience to the

365
00:20:26,167 --> 00:20:28,649
table that ended up being a really great match for our

366
00:20:28,689 --> 00:20:29,530
gameplay experience.

367
00:20:33,202 --> 00:20:36,164
Instead of a faceless group of contractors in a far off land,

368
00:20:36,184 --> 00:20:37,885
we got new teammates who were invested

369
00:20:37,925 --> 00:20:39,887
in the quality of our product and could collaborate

370
00:20:39,927 --> 00:20:43,009
on ideas with us, help with simple blocking of test

371
00:20:43,049 --> 00:20:45,771
animations, polishing animation we'd already blocked out

372
00:20:46,571 --> 00:20:49,614
in-house, or just ideating on what a behemoth attack could

373
00:20:49,654 --> 00:20:53,256
be, were just a few of the ways that this partnership was

374
00:20:53,296 --> 00:20:54,217
a massive help to us.

375
00:20:54,917 --> 00:20:56,298
Being able to hand off animations

376
00:20:56,338 --> 00:20:57,900
with minimal direction and knowing

377
00:20:57,940 --> 00:20:59,281
that they were reviewing and checking

378
00:20:59,301 --> 00:21:01,382
the quality of their work before we ever even saw it.

379
00:21:02,960 --> 00:21:05,020
It was just like having a team of experienced animators

380
00:21:05,060 --> 00:21:05,941
in the studio with us.

381
00:21:06,661 --> 00:21:09,642
Having outsourced several times, this was definitely

382
00:21:09,662 --> 00:21:12,283
a breath of fresh air for me, and something I'd always

383
00:21:12,343 --> 00:21:14,244
wanted an outsourcing partnership to look like.

384
00:21:16,325 --> 00:21:18,405
So those are some of the high-level solutions.

385
00:21:18,466 --> 00:21:20,706
But I also wanted to share some of the practical workflows

386
00:21:20,746 --> 00:21:22,707
and techniques we've been using along the way as well.

387
00:21:25,602 --> 00:21:28,663
So one of the bigger time savers for me was the ability to use

388
00:21:28,703 --> 00:21:30,803
mocap for more than just human characters.

389
00:21:31,583 --> 00:21:33,144
I've been wanting to try this for some time.

390
00:21:33,944 --> 00:21:35,965
And I felt strongly that it had a lot of potential to be a

391
00:21:36,025 --> 00:21:37,525
potent productivity tool for us.

392
00:21:37,585 --> 00:21:41,286
But sadly, my first attempts at capturing my movements and

393
00:21:41,326 --> 00:21:43,467
retargeting them to a creature didn't go as

394
00:21:43,487 --> 00:21:44,227
well as I had hoped.

395
00:21:46,520 --> 00:21:49,522
I started by characterizing the creature's proxy model,

396
00:21:49,942 --> 00:21:52,683
essentially defining the skeleton for it in MotionBuilder

397
00:21:52,703 --> 00:21:54,644
and working with the solving parameters

398
00:21:54,744 --> 00:21:56,505
to get the data to fit the anatomy

399
00:21:57,146 --> 00:21:58,886
and default posture of the creature.

400
00:22:00,187 --> 00:22:01,568
Maybe with a little more careful setup

401
00:22:01,608 --> 00:22:02,728
and fiddling with parameters,

402
00:22:02,748 --> 00:22:04,769
I could get a little closer to something that was usable,

403
00:22:04,889 --> 00:22:06,590
but from this vantage point,

404
00:22:07,371 --> 00:22:09,191
it was a little more comical than practical.

405
00:22:12,694 --> 00:22:14,955
So the problem was I was trying to do this

406
00:22:14,995 --> 00:22:16,237
how we always solve mocap,

407
00:22:16,357 --> 00:22:19,059
by remapping on a joint level to the final character.

408
00:22:19,740 --> 00:22:21,301
While there's definitely more elegant ways

409
00:22:21,381 --> 00:22:24,363
to retarget data to wildly different anatomies,

410
00:22:24,884 --> 00:22:26,986
using more complex IK solving, for example,

411
00:22:27,386 --> 00:22:29,888
the end goal was I just wanted a faster way

412
00:22:29,908 --> 00:22:32,450
to define weight, posing, and timing on my character,

413
00:22:32,871 --> 00:22:35,713
not necessarily a precise performance transfer.

414
00:22:36,254 --> 00:22:37,154
It also needed to be done

415
00:22:37,174 --> 00:22:38,796
without having to write a new pipeline

416
00:22:38,836 --> 00:22:40,777
or involve a team of people to help me out with that.

417
00:22:41,398 --> 00:22:43,740
So instead of forcing the anatomy to match,

418
00:22:43,800 --> 00:22:45,642
I chose to think of captured performance

419
00:22:45,662 --> 00:22:48,165
as a series of movements on centers of masses.

420
00:22:51,030 --> 00:22:53,393
So in this way, I can sculpt the data to work

421
00:22:53,413 --> 00:22:55,114
with these relative masses, instead of trying

422
00:22:55,134 --> 00:22:58,097
to force joints to match on disparate anatomies,

423
00:22:58,618 --> 00:23:01,260
I just translated the performance into these collections

424
00:23:01,340 --> 00:23:02,522
of areas of movement.

425
00:23:03,262 --> 00:23:05,304
I could sculpt these to work with different starting

426
00:23:05,324 --> 00:23:07,827
positions and orientations, and if a part of the capture

427
00:23:07,847 --> 00:23:09,829
didn't work with me, I could just chuck it out

428
00:23:09,929 --> 00:23:11,350
and key it myself pretty quickly.

429
00:23:12,171 --> 00:23:14,453
My first attempt at this gave significantly

430
00:23:14,493 --> 00:23:15,715
better results than the first.

431
00:23:18,979 --> 00:23:21,981
So this is literally my first animation I tried this on.

432
00:23:22,221 --> 00:23:23,222
I found the scene.

433
00:23:24,203 --> 00:23:26,545
It's a simple test, I know, but this actually only took me

434
00:23:26,585 --> 00:23:28,967
about 30 minutes to get here, and that included solving the

435
00:23:29,007 --> 00:23:29,647
mocap data.

436
00:23:30,828 --> 00:23:33,270
It'd probably take an animator a considerably longer time to

437
00:23:33,330 --> 00:23:35,552
get to this same place, and I'm starting with higher

438
00:23:35,592 --> 00:23:37,634
fidelity base to work from when finishing

439
00:23:37,654 --> 00:23:38,735
this versus blocking.

440
00:23:42,975 --> 00:23:44,275
So with just a little bit more work,

441
00:23:44,315 --> 00:23:46,716
keying the hands and feet, polishing the performance,

442
00:23:46,836 --> 00:23:48,217
and adding a little bit of texture,

443
00:23:48,757 --> 00:23:51,538
I can get decent results with much less time

444
00:23:51,578 --> 00:23:53,699
than it would take to keyframe to this level of detail.

445
00:23:55,039 --> 00:23:55,820
So how did I do this?

446
00:23:56,580 --> 00:23:58,901
I'm sorry to say, it is not a very technically impressive

447
00:23:58,941 --> 00:23:59,341
workflow.

448
00:24:02,560 --> 00:24:05,564
I start by bringing in the exported motion capture into

449
00:24:05,624 --> 00:24:07,807
MotionBuilder and solving it to our player skeleton.

450
00:24:08,487 --> 00:24:10,750
I've usually fixed any jitters, pops, or weird

451
00:24:11,111 --> 00:24:14,335
rotations in Motive, and that's OptiTracks capturing and

452
00:24:14,375 --> 00:24:16,297
editing software by this point.

453
00:24:17,038 --> 00:24:18,800
But if there are any other issues, I'll address them here

454
00:24:18,840 --> 00:24:20,542
on the control rig before going any further.

455
00:24:21,163 --> 00:24:24,324
I'll also often do a quick retiming pass using the Time

456
00:24:24,344 --> 00:24:26,824
Warp tool, as I like it a little bit better than the one

457
00:24:26,864 --> 00:24:29,085
in Maya, even though this one can be a bit more finicky.

458
00:24:29,105 --> 00:24:33,226
I have a general idea of what my timing and spacing is going

459
00:24:33,266 --> 00:24:36,047
to be, and will get it as close as I can, but still

460
00:24:36,067 --> 00:24:38,167
thinking really broad strokes first at this point.

461
00:24:38,767 --> 00:24:40,848
It's not on the final creature model, so it's really tricky

462
00:24:40,868 --> 00:24:42,008
to be super accurate here.

463
00:24:42,808 --> 00:24:46,389
And then I export this as an FBX, bring that into Maya, and

464
00:24:46,429 --> 00:24:48,230
I import a set of locators I created.

465
00:24:49,030 --> 00:24:54,415
ahead of time that live in a simple hierarchy. I've found that this was important, that these

466
00:24:54,496 --> 00:24:59,461
live in a parent-child relationship similar to how the skeleton is set up. And that avoids a

467
00:24:59,541 --> 00:25:03,665
lot of problems in the transfer on a lot more complicated physical moves, especially when the

468
00:25:03,705 --> 00:25:04,986
behemoth is inverted.

469
00:25:06,448 --> 00:25:10,592
Each of these markers is used to define a center of mass that I want to transfer from the capture.

470
00:25:11,252 --> 00:25:14,375
My main ones I want are hips, torso, head, hands, feet.

471
00:25:15,096 --> 00:25:20,181
I'll usually grab movement from the elbows, knees, shoulders, but only use them if I really need it.

472
00:25:21,817 --> 00:25:25,118
I'll parent the appropriate joint to the exported skeleton

473
00:25:25,158 --> 00:25:27,419
in a position that best represents the point of movement

474
00:25:27,459 --> 00:25:30,540
I want to represent, and bake that translation and rotation

475
00:25:30,600 --> 00:25:31,380
onto the locators.

476
00:25:32,020 --> 00:25:33,680
At this point, I can blow away the skeleton,

477
00:25:33,880 --> 00:25:36,041
and I'm left with just the locators, which I'll save out,

478
00:25:36,541 --> 00:25:40,562
merge with my behemoth rig, and set my starting pose,

479
00:25:40,602 --> 00:25:42,142
and in this case, my idle.

480
00:25:44,182 --> 00:25:46,124
Then just align those locators to the anim layer,

481
00:25:46,785 --> 00:25:47,806
on an anim layer, sorry,

482
00:25:47,946 --> 00:25:49,948
to the control points I want on the behemoth rig.

483
00:25:50,669 --> 00:25:53,232
I just parent the rig to the locators,

484
00:25:53,632 --> 00:25:55,414
bake that translation and rotation,

485
00:25:55,454 --> 00:25:57,556
and then blow away the locators for my scene.

486
00:25:58,678 --> 00:26:01,341
Now I'm free to insert my impose, retime the animation,

487
00:26:02,102 --> 00:26:04,044
and just start layering on top of this base movement

488
00:26:04,064 --> 00:26:05,265
to get the performance I'm after.

489
00:26:10,938 --> 00:26:12,780
So what are the limits of this system?

490
00:26:13,841 --> 00:26:15,943
Obviously, putting movement on a bipedal creature

491
00:26:16,003 --> 00:26:17,605
is a little more forgiving than a quadruped.

492
00:26:18,506 --> 00:26:20,348
I can still use the timing and weight

493
00:26:20,588 --> 00:26:23,391
of the main center of masses, the hips and the torso.

494
00:26:23,851 --> 00:26:26,174
I also sometimes use props in MoCap

495
00:26:26,194 --> 00:26:28,356
to approximate the difference in limb length if needed.

496
00:26:29,717 --> 00:26:31,619
usually just giant styrofoam blocks.

497
00:26:32,739 --> 00:26:35,722
Even just having basic info on a character's fuselage

498
00:26:35,782 --> 00:26:37,143
helps speed up the first pass

499
00:26:37,203 --> 00:26:40,145
and keying quickly using IK on the arms and legs

500
00:26:40,265 --> 00:26:42,507
and just makes getting a detail block out

501
00:26:42,567 --> 00:26:43,287
really, really quick.

502
00:26:43,988 --> 00:26:46,190
It does get a little awkward when somebody walks in on me

503
00:26:46,210 --> 00:26:47,711
doing this in the mocap room though.

504
00:26:53,719 --> 00:26:56,101
So a big focus of our culture at Phoenix Labs

505
00:26:56,162 --> 00:26:57,603
is making sure we're spending our time

506
00:26:57,663 --> 00:26:59,605
solving the right problems.

507
00:27:00,386 --> 00:27:03,168
For animation, we try to remove as many pain points

508
00:27:03,208 --> 00:27:04,489
in our workflow as possible.

509
00:27:05,210 --> 00:27:07,713
A pain point is something that causes an animator

510
00:27:07,773 --> 00:27:10,115
to either lose momentum while working on something

511
00:27:10,175 --> 00:27:12,057
or an unnecessarily repetitive task.

512
00:27:12,817 --> 00:27:15,300
Basically anything that takes you out of your flow,

513
00:27:15,420 --> 00:27:16,501
as much as I hate that word.

514
00:27:18,236 --> 00:27:21,442
Whether it be the creation or the exporting end, a lot of our

515
00:27:21,482 --> 00:27:23,986
processes and tools are built around minimizing these

516
00:27:24,046 --> 00:27:25,810
repetitive or time-heavy tasks.

517
00:27:28,775 --> 00:27:29,376
For example.

518
00:27:30,909 --> 00:27:35,032
I found I was spending way more time than I would have liked animating the tail on Behemoth,

519
00:27:35,832 --> 00:27:40,215
especially during the initial couple of passes to prove gameplay. This was even more of a

520
00:27:40,255 --> 00:27:43,978
problem on complex moves that required the tail to be interacting with the ground plane.

521
00:27:44,619 --> 00:27:49,062
I wondered if there was a way to automate the majority of this using dynamic simulations

522
00:27:49,102 --> 00:27:54,146
in Maya. Not being familiar with dynamic sims at all in Maya, this took a little bit of

523
00:27:54,166 --> 00:27:58,769
trial and error to figure out the process that produced the results I was after. But

524
00:27:58,809 --> 00:28:00,130
here's how I set that up on our rig.

525
00:28:03,721 --> 00:28:07,586
So I first needed to start with my base pose for the tails.

526
00:28:07,646 --> 00:28:09,488
For this, again, I'm using the idle pose.

527
00:28:10,189 --> 00:28:13,674
To avoid any circular dependencies, I need to

528
00:28:13,734 --> 00:28:15,957
decouple the simulation from the main character rig.

529
00:28:16,437 --> 00:28:18,901
And because of that, I tend to leave animating the tail like

530
00:28:18,941 --> 00:28:19,782
this to the very end.

531
00:28:21,284 --> 00:28:23,205
First, I need the animation for the tail's parent.

532
00:28:23,405 --> 00:28:25,426
So in this case, it's the hips to live on something

533
00:28:25,486 --> 00:28:26,167
outside the rig.

534
00:28:27,187 --> 00:28:29,449
I like to use locators for just about everything, so I'll

535
00:28:29,489 --> 00:28:30,009
go with that.

536
00:28:31,130 --> 00:28:33,191
All I'm doing is basically just baking the translation

537
00:28:33,211 --> 00:28:35,392
and rotation out to a locator from the hip control.

538
00:28:35,873 --> 00:28:37,814
I do this kind of thing a lot, so I've got a little Python

539
00:28:37,854 --> 00:28:40,115
script I wrote to make this a single button

540
00:28:40,235 --> 00:28:41,096
press or a hotkey.

541
00:28:42,688 --> 00:28:44,690
Then I duplicate the joint chain of the tail

542
00:28:45,050 --> 00:28:46,911
and un-parent that from the main skeleton

543
00:28:47,812 --> 00:28:49,433
and create a curve that follows the tail

544
00:28:49,473 --> 00:28:50,654
with a CV at each joint

545
00:28:51,815 --> 00:28:53,456
and make that curve a hair simulation.

546
00:28:54,537 --> 00:28:57,339
Parent the resulting follicle to the locator

547
00:28:57,359 --> 00:28:58,800
that we baked with the hip movement on it.

548
00:28:59,460 --> 00:29:01,422
And then setting that curve as a spline IK

549
00:29:01,522 --> 00:29:02,703
for the duplicate joint chain.

550
00:29:03,853 --> 00:29:07,676
I can then use this joint chain to drive my FK controllers

551
00:29:07,856 --> 00:29:10,058
on the character's rig via orient constraint.

552
00:29:10,919 --> 00:29:12,540
And if the tail is going to be interacting

553
00:29:12,580 --> 00:29:16,023
with the ground plane, I'll just create a simple polyplane

554
00:29:16,103 --> 00:29:17,564
and use that as a collision object.

555
00:29:17,604 --> 00:29:19,566
Or you can actually set ground plane as collision

556
00:29:19,586 --> 00:29:21,407
within the follicle settings as well.

557
00:29:22,388 --> 00:29:27,049
But at that point I can tweak the dynamic properties of the follicle, things like stiffness,

558
00:29:27,109 --> 00:29:30,930
dampening, motion drag to make the tail feel like it has the correct weight and mass.

559
00:29:31,690 --> 00:29:36,312
And I also key things like how much attraction to the original curve and how much gravity

560
00:29:36,352 --> 00:29:39,232
and friction lives on the ground plane to help sculpt that tail's movement.

561
00:29:40,995 --> 00:29:44,896
It took me a while to figure out which settings in the dynamic properties I needed to adjust

562
00:29:45,216 --> 00:29:46,636
to get me close to what I was after.

563
00:29:47,336 --> 00:29:48,336
There are a lot of them in there.

564
00:29:49,577 --> 00:29:54,138
But now I can get away with only a handful of them and it'll get me most of the way there.

565
00:29:54,838 --> 00:29:57,678
When I'm happy with how that's working, I just bake it back down to the rig.

566
00:29:58,179 --> 00:30:02,359
And now I can key over that using layers or exaggerate the base animation just as if it

567
00:30:02,399 --> 00:30:03,200
was motion capture.

568
00:30:06,594 --> 00:30:08,556
So here's the kind of results I can get now

569
00:30:08,796 --> 00:30:11,118
with about five minutes of setup work.

570
00:30:12,058 --> 00:30:14,620
It's not perfect, but you can see even subtle interactions

571
00:30:14,640 --> 00:30:15,301
with the ground.

572
00:30:15,781 --> 00:30:17,343
That could take a while to animate by hand

573
00:30:18,023 --> 00:30:19,044
if I didn't use this method.

574
00:30:20,405 --> 00:30:26,187
With even a little more time adjusting and keying the settings on the rig, I can get a lot better results.

575
00:30:27,187 --> 00:30:31,789
When we combine this with our Echinema in Engine, we can be more adventurous with creature designs

576
00:30:32,249 --> 00:30:35,210
and adding and removing appendages on our behemoths.

577
00:30:35,230 --> 00:30:40,432
Rather than trying to make safe choices when we design these creatures, we can take a little bit more risk.

578
00:30:41,332 --> 00:30:45,497
So this works great when I need to have the tail just arbitrarily follow the creature,

579
00:30:45,577 --> 00:30:50,483
but what if I want to define parts of that movement, such as in an attack or a personality move?

580
00:30:52,845 --> 00:30:55,507
For that, I'm essentially doing the same thing only with a

581
00:30:55,547 --> 00:30:56,548
couple of extra steps.

582
00:30:57,388 --> 00:31:00,210
First, I'll rough in the main poses I need the tail to hit

583
00:31:00,670 --> 00:31:01,490
on the behemoth rig.

584
00:31:02,351 --> 00:31:05,093
Then I'll duplicate the tail joint chain just like last

585
00:31:05,133 --> 00:31:07,334
time, remove any constraints or dependencies, and then

586
00:31:07,374 --> 00:31:10,536
duplicate it again so I have two versions

587
00:31:10,576 --> 00:31:11,736
of that joint chain.

588
00:31:12,657 --> 00:31:15,359
The first one, I'll constrain to the original tail and bake

589
00:31:15,399 --> 00:31:16,920
the animation back to that.

590
00:31:18,549 --> 00:31:22,093
and then remove those constraints. So I'm left with block tail animation on one of the

591
00:31:22,113 --> 00:31:26,657
joint chains. I'll create the curve same as last time, but instead I'll skin that curve

592
00:31:26,797 --> 00:31:32,322
to the animated joint chain. From here, it's pretty much the same, turning the curve into

593
00:31:32,362 --> 00:31:36,947
a follicle, using the dynamic curve to drive the second chain, and then using that second

594
00:31:36,967 --> 00:31:38,188
chain to drive the FK rig.

595
00:31:39,852 --> 00:31:41,752
In this method, curve attraction and dampening

596
00:31:41,792 --> 00:31:43,533
become the main dynamic property to key,

597
00:31:44,393 --> 00:31:46,553
and just make sure I hit the poses I'm after.

598
00:31:47,313 --> 00:31:49,394
This method takes a little longer than the first,

599
00:31:49,454 --> 00:31:51,054
but still far less time than hand keying

600
00:31:51,094 --> 00:31:52,295
to achieve the same results.

601
00:31:53,155 --> 00:31:55,556
We've since started incorporating this

602
00:31:55,596 --> 00:31:58,176
into our rigs and tools, so that's not a manual setup

603
00:31:58,216 --> 00:31:58,876
for me each time.

604
00:31:59,937 --> 00:32:04,821
which makes it even faster. I've also used this for smaller things, things like the scales on his

605
00:32:04,881 --> 00:32:10,325
back. I don't really have the time to animate each of those by hand. You can see there's a lot

606
00:32:10,366 --> 00:32:15,290
of them. But being able to just sim that quickly and bake that back to the rig can save a ton of

607
00:32:15,310 --> 00:32:19,973
time. So I know this isn't a revolutionary way of working. I think Naughty Dog showed a

608
00:32:20,054 --> 00:32:25,618
similar thing in their tool set quite some time ago. But it could be used for almost anything.

609
00:32:26,893 --> 00:32:29,234
You just want to get some really quick overlapping movement on,

610
00:32:29,434 --> 00:32:32,575
even if you just end up using the sim chains for reference

611
00:32:32,635 --> 00:32:33,576
and rotoing over it.

612
00:32:34,736 --> 00:32:36,977
We've also used animation dynamics in Engine

613
00:32:37,217 --> 00:32:38,798
for obvious things like cloth, of course.

614
00:32:38,878 --> 00:32:42,340
But we also use things like muscle jiggle on behemoths,

615
00:32:42,440 --> 00:32:43,940
player armor, or anything else that just

616
00:32:44,401 --> 00:32:47,262
might be easier to sim in Engine over top of animation state

617
00:32:47,302 --> 00:32:47,622
changes.

618
00:32:51,142 --> 00:32:55,284
So I can't talk about animation pipelines without talking a bit

619
00:32:55,324 --> 00:32:56,304
about rigging and tools.

620
00:32:57,525 --> 00:33:00,166
Because we have limited animation tech art support

621
00:33:00,346 --> 00:33:02,567
and a myriad of different behemoths and player rigging

622
00:33:02,587 --> 00:33:05,088
needs, not to mention everything else the TA does,

623
00:33:05,848 --> 00:33:08,530
we needed to find a way to approach rigging in a way that

624
00:33:08,670 --> 00:33:10,150
was efficient and reusable.

625
00:33:13,046 --> 00:33:15,368
So we have a Python-focused tool set

626
00:33:15,548 --> 00:33:17,350
for creating and animating behemoth rigs.

627
00:33:17,970 --> 00:33:20,112
Because our behemoths have a variety of proportions

628
00:33:20,152 --> 00:33:22,594
and variation that also needed to be expanded upon

629
00:33:22,634 --> 00:33:25,196
in an agile way, the rigging toolkit

630
00:33:25,276 --> 00:33:27,798
uses a module definition system to break up

631
00:33:27,858 --> 00:33:30,160
the workload of rigging the different parts of a behemoth.

632
00:33:30,700 --> 00:33:34,141
This allows for a rule set to be applied to many behemoths

633
00:33:34,301 --> 00:33:35,562
based on the parts that they have.

634
00:33:36,122 --> 00:33:39,203
If a new part or functionality needs to be added later, a new

635
00:33:39,243 --> 00:33:41,383
module can be written and added to the system.

636
00:33:42,204 --> 00:33:44,884
The animation tool set hooks into these modules to search

637
00:33:44,924 --> 00:33:47,325
out what information it needs to affect those parts.

638
00:33:48,065 --> 00:33:51,306
An example of this would be the IKFK switching tool knows

639
00:33:51,346 --> 00:33:53,747
about what modules it's looking for, and therefore

640
00:33:53,807 --> 00:33:56,308
what attributes of that module it's looking for instead of

641
00:33:56,348 --> 00:33:58,328
being name-based or hard-coded into the rig.

642
00:34:01,508 --> 00:34:04,310
So these are examples of modules for different parts of the rig.

643
00:34:04,450 --> 00:34:07,193
Some attributes are used during the creation process,

644
00:34:07,253 --> 00:34:09,395
and some are used by the animation tools.

645
00:34:10,195 --> 00:34:12,057
Limbs get defined in an interactive way

646
00:34:12,097 --> 00:34:14,319
during a placement phase, and then committed

647
00:34:14,399 --> 00:34:15,780
during a creation phase.

648
00:34:17,114 --> 00:34:19,255
This was generally successful for us.

649
00:34:19,835 --> 00:34:21,856
It could be greatly expanded upon in the future

650
00:34:21,996 --> 00:34:24,677
for better create, to better create a definition

651
00:34:24,717 --> 00:34:25,697
of the rig as a whole.

652
00:34:26,357 --> 00:34:28,258
Also, when a skeleton is already predefined,

653
00:34:28,298 --> 00:34:29,598
the modules needed to pass it,

654
00:34:30,058 --> 00:34:31,679
hooking up the joints it cares about,

655
00:34:32,439 --> 00:34:33,960
and that could be better automated as well.

656
00:34:35,372 --> 00:34:37,375
We'd also like the tool set just to have a better friend and

657
00:34:37,455 --> 00:34:40,701
a wizard, so it's better for people other than just tech

658
00:34:40,741 --> 00:34:41,462
artists to use.

659
00:34:42,423 --> 00:34:44,988
And also, because the physiology between the behemoths

660
00:34:45,048 --> 00:34:48,213
is dramatically different, this led us to some different

661
00:34:48,253 --> 00:34:49,355
needs that you might not think about.

662
00:34:51,683 --> 00:34:53,404
The center of mass was a big one for us.

663
00:34:54,164 --> 00:34:56,444
Generally, we may allow for different pivot points

664
00:34:56,764 --> 00:34:59,045
for the whole body and the rig to make it easier to animate,

665
00:34:59,125 --> 00:35:01,865
but when procedurally moving characters in the engine

666
00:35:01,885 --> 00:35:05,126
through Echinema, we needed to define a hard center of mass

667
00:35:05,206 --> 00:35:06,366
over the root and the skeleton.

668
00:35:07,186 --> 00:35:09,807
For quads and bipeds, this is sometimes obvious,

669
00:35:09,927 --> 00:35:13,787
but for our biped quadruped hybrid on the right,

670
00:35:14,547 --> 00:35:16,348
it led us to think about where that behemoth

671
00:35:16,368 --> 00:35:19,028
would be pivoting from during its movement most of the time

672
00:35:19,068 --> 00:35:20,748
and create a chest-based center of mass.

673
00:35:21,590 --> 00:35:24,119
This was contradictory to the bind pose and the rigging tool

674
00:35:24,159 --> 00:35:25,946
kit needed to be able to take this into account.

675
00:35:30,139 --> 00:35:32,000
And finally, just quality of life improvements.

676
00:35:33,001 --> 00:35:36,343
As mentioned earlier, removing as many of the repetitive and

677
00:35:36,423 --> 00:35:39,585
time-consuming tasks as we can helps to speed up iteration

678
00:35:39,645 --> 00:35:41,307
times and make the work more enjoyable.

679
00:35:42,067 --> 00:35:43,708
And that leads to higher quality overall.

680
00:35:44,749 --> 00:35:47,691
Some examples of this are automating mocap pipelines,

681
00:35:48,132 --> 00:35:50,553
tools to help with multiple frame range exports from a

682
00:35:50,613 --> 00:35:54,596
single file, IKFK switching, pivot point changes for any

683
00:35:54,656 --> 00:35:57,859
control mid-animation, and mirroring, and just easy to

684
00:35:57,939 --> 00:35:59,120
use pose libraries as well.

685
00:36:02,710 --> 00:36:05,492
So lastly is something that seems to come up a lot in

686
00:36:05,532 --> 00:36:06,973
discussions about using mocap.

687
00:36:08,013 --> 00:36:10,514
Often the thinking is, we're not making a realistic game,

688
00:36:10,554 --> 00:36:11,655
so we can't use mocap.

689
00:36:12,615 --> 00:36:14,656
Well, it definitely takes a little bit of work to get the

690
00:36:14,717 --> 00:36:15,577
results you're after.

691
00:36:15,737 --> 00:36:18,719
When you're confident with the process, you can get to the

692
00:36:18,759 --> 00:36:21,300
end result in much less time than all hand-keyed movement.

693
00:36:21,960 --> 00:36:24,021
Another great thing about using Capture is that it gives

694
00:36:24,041 --> 00:36:26,603
you a fairly consistent baseline of quality across all

695
00:36:26,623 --> 00:36:28,023
your characters and your project.

696
00:36:31,155 --> 00:36:35,178
So a common method used when exaggerating mocap is to lift

697
00:36:35,818 --> 00:36:37,259
key poses from the performance.

698
00:36:37,919 --> 00:36:40,501
This is done by putting the motion capture on a base layer

699
00:36:40,661 --> 00:36:43,343
and creating an override layer with the weight turned down.

700
00:36:43,463 --> 00:36:45,504
And then you set keys where you want to keep the movement,

701
00:36:45,584 --> 00:36:49,026
essentially giving you your block out and your in-betweens

702
00:36:49,066 --> 00:36:51,708
for free, and just allowing you to retime in the graph

703
00:36:51,748 --> 00:36:53,429
editor, or even in the timeline.

704
00:36:54,589 --> 00:36:56,690
This works the same way in both Maya and MotionBuilder.

705
00:36:57,680 --> 00:37:02,241
While this is a great workflow and something I still use from time to time, what bothered

706
00:37:02,261 --> 00:37:06,583
me was losing all of those micro-rotations and detail that you get from mocap, and we

707
00:37:06,603 --> 00:37:09,724
spent so much time on the polish pass trying to add that back in.

708
00:37:10,225 --> 00:37:15,447
I wanted a workflow that allowed me to sculpt that performance without being too destructive

709
00:37:15,487 --> 00:37:16,367
to the original data.

710
00:37:17,247 --> 00:37:20,530
So what this mainly took was a bit of a mental shift

711
00:37:20,550 --> 00:37:21,892
from thinking of motion capture

712
00:37:22,072 --> 00:37:23,934
as a recording of a performance

713
00:37:24,074 --> 00:37:26,416
and rather to a collection of curves

714
00:37:26,456 --> 00:37:27,697
to sculpt and manipulate,

715
00:37:28,097 --> 00:37:29,219
much like the centers of mass

716
00:37:29,239 --> 00:37:30,820
that I showed for creature movement.

717
00:37:31,300 --> 00:37:33,543
So I'll explain this with a really simple example.

718
00:37:36,208 --> 00:37:38,069
So once I get my capture onto my rig,

719
00:37:39,150 --> 00:37:41,011
my first priorities are timing and spacing.

720
00:37:41,391 --> 00:37:43,752
It helps to have a clear idea of the goal in mind,

721
00:37:44,413 --> 00:37:45,733
especially before putting the suit,

722
00:37:46,013 --> 00:37:47,974
but sometimes this is a little bit of trial and error.

723
00:37:48,855 --> 00:37:50,396
When I'm working this way with MoCap,

724
00:37:50,576 --> 00:37:53,437
I'm still always thinking, as I said, broad strokes first.

725
00:37:53,637 --> 00:37:55,438
I don't want to get really, really caught up

726
00:37:55,518 --> 00:37:56,839
in small details right now.

727
00:37:57,779 --> 00:37:58,440
For retiming.

728
00:37:58,720 --> 00:38:01,302
I'll use either Time Warp in Motion Builder or the retime

729
00:38:01,342 --> 00:38:01,962
tool in Maya.

730
00:38:02,823 --> 00:38:05,105
What I'm doing at this stage is just trying to recreate the

731
00:38:05,165 --> 00:38:07,306
tempo and feeling I have in my head for the move.

732
00:38:08,007 --> 00:38:10,509
The actual movement isn't being exaggerated here, only

733
00:38:10,549 --> 00:38:11,570
the timing and spacing.

734
00:38:11,950 --> 00:38:13,931
So it takes just a little bit of imagination.

735
00:38:15,232 --> 00:38:17,094
It's probably not the only time I'll touch the timing.

736
00:38:17,794 --> 00:38:20,096
I'm just trying to get it as close as I feel is right at

737
00:38:20,136 --> 00:38:20,557
this point.

738
00:38:21,177 --> 00:38:23,399
When I'm more or less happy with that, I'll plot it back

739
00:38:23,439 --> 00:38:25,821
to the main rig so I don't have keys on my subframes.

740
00:38:27,481 --> 00:38:32,143
If the move calls for it, I'll insert my start and end pose here and work the movement to

741
00:38:32,183 --> 00:38:33,844
come in and out of those poses properly.

742
00:38:34,504 --> 00:38:37,845
For the most part, I use the lattice tool in the graph editor.

743
00:38:38,866 --> 00:38:42,527
So remember, I'm trying to preserve a lot of the micro-movements in the capture, so

744
00:38:42,547 --> 00:38:46,689
just deleting large chunks of data to blend into poses kind of works against this.

745
00:38:46,749 --> 00:38:51,471
So I use the lattice tool a lot, just trying to sculpt these curves and sculpt the performance.

746
00:38:52,992 --> 00:38:56,434
When I get my poses insert, it's time to start adding in

747
00:38:56,474 --> 00:38:57,575
the exaggerated movement.

748
00:38:57,635 --> 00:39:00,157
So I go to go with my timing.

749
00:39:01,098 --> 00:39:02,019
For this, I use layers.

750
00:39:03,420 --> 00:39:05,521
Again, starting with broad strokes, I'm trying to hit the

751
00:39:05,582 --> 00:39:07,943
main poses and movement changes to

752
00:39:07,963 --> 00:39:09,064
define the staging here.

753
00:39:10,405 --> 00:39:14,008
In this instance, I'm trying to exaggerate the distance and

754
00:39:14,048 --> 00:39:14,769
timing of this jump.

755
00:39:15,687 --> 00:39:18,827
I might pop back to retiming while doing this to get the first pass nailed down.

756
00:39:19,588 --> 00:39:24,549
When I'm happy with the main timing and posing and spacing pass, then I'll start to refine

757
00:39:24,609 --> 00:39:26,289
silhouettes, intermediate details.

758
00:39:27,329 --> 00:39:32,050
The final pass is for smaller things like overlaps, contacts, cleanup, and other details

759
00:39:32,070 --> 00:39:32,391
like that.

760
00:39:32,991 --> 00:39:36,832
Much of this I still keep on layers to avoid touching the base capture.

761
00:39:37,632 --> 00:39:40,753
And then I can just use an override layer to key the weight on and off if I need to

762
00:39:40,813 --> 00:39:41,873
really override a part of it.

763
00:39:44,738 --> 00:39:48,001
So here we can see the difference between what I

764
00:39:48,041 --> 00:39:49,582
started with and the end result.

765
00:39:50,623 --> 00:39:52,284
Once you get comfortable working this way, it can cut

766
00:39:52,324 --> 00:39:54,466
down the amount of time it takes to achieve the same

767
00:39:54,486 --> 00:39:56,527
result, doing it by hand considerably.

768
00:39:57,408 --> 00:40:00,391
This example here, it's still pretty rough and needs a bit

769
00:40:00,411 --> 00:40:03,333
more work, but including capturing the data, solving it,

770
00:40:03,853 --> 00:40:06,355
and reworking it in Maya, I've only spent a couple of hours

771
00:40:06,395 --> 00:40:07,316
just to get to this point.

772
00:40:07,917 --> 00:40:11,059
So even for a really fast animator, that could be pretty

773
00:40:11,099 --> 00:40:12,620
challenging to do with keyframing only.

774
00:40:13,561 --> 00:40:16,445
So don't be intimidated to try out motion capture, even if your

775
00:40:16,505 --> 00:40:18,287
project might not seem like it calls for it.

776
00:40:18,768 --> 00:40:19,448
Much of the hype.

777
00:40:20,516 --> 00:40:26,240
around it has been centered on preserving the actor's authentic performance. But I encourage

778
00:40:26,260 --> 00:40:32,104
you to think of it more of a productivity tool. So now, not every move in our game was

779
00:40:32,165 --> 00:40:36,227
created this way. There's definitely a lot of hand-keyed animation as well, and it ultimately

780
00:40:36,288 --> 00:40:40,951
comes down to each of the animators' individual expertise to choose what method is best for

781
00:40:40,971 --> 00:40:45,034
the thing that they're creating that day. But for complex movement, we found this to

782
00:40:45,074 --> 00:40:45,995
be really, really valuable.

783
00:40:48,874 --> 00:40:51,777
So as you can see, there wasn't one single magic solution

784
00:40:52,338 --> 00:40:53,679
to all our development challenges.

785
00:40:53,759 --> 00:40:56,142
It took these and many, many more tiny changes

786
00:40:56,863 --> 00:40:58,124
in how we approach development.

787
00:40:58,305 --> 00:41:00,187
Always asking ourselves the same question.

788
00:41:00,247 --> 00:41:03,210
Are we working on the most important problems right now

789
00:41:03,270 --> 00:41:04,712
and what's the best way to solve them?

790
00:41:05,453 --> 00:41:06,734
Curating that culture in the studio

791
00:41:06,775 --> 00:41:08,737
has been the main ingredient in our success so far.

792
00:41:11,633 --> 00:41:15,676
So if you want to find out more about Phoenix Labs or Dauntless, you can head to either

793
00:41:15,716 --> 00:41:18,959
of our websites, phxlabs.ca, playdauntless.com.

794
00:41:20,520 --> 00:41:22,581
And if you want, you can find me on Twitter.

795
00:41:22,902 --> 00:41:25,984
And if you're interested in more discussions about animation and games, head on over to

796
00:41:26,064 --> 00:41:27,185
animstate.com.

797
00:41:27,285 --> 00:41:31,368
And that actually went way faster than it did the last ten times I read it.

798
00:41:31,788 --> 00:41:34,210
So I have tons of time for questions if anybody has any.

799
00:41:34,250 --> 00:41:37,273
Otherwise I'll be available out in the hall afterwards as well.

800
00:41:37,793 --> 00:41:38,293
Thanks, everybody.

801
00:41:47,238 --> 00:41:52,763
I was wondering which game engine you guys are using and what the strengths and weaknesses you feel are of it

802
00:41:53,764 --> 00:41:55,085
Sorry, can you repeat the second part of that?

803
00:41:56,226 --> 00:42:02,211
so why did you choose the game engine that you're using or what what no choose internal tech if you're using that and

804
00:42:02,952 --> 00:42:05,854
What are the strengths and weaknesses that you feel made you make that choice?

805
00:42:06,350 --> 00:42:11,954
Right, so the question was what game engine are we using and what are the strengths and what caused us to choose that.

806
00:42:12,014 --> 00:42:23,482
We're currently using Unreal 4, UE4, and really it came down to what's the best commercially available package for us right now

807
00:42:23,602 --> 00:42:26,924
that got us the furthest towards our end goal.

808
00:42:29,540 --> 00:42:30,681
there wasn't much out there.

809
00:42:30,701 --> 00:42:34,003
I think, in our opinion, probably building an engine

810
00:42:34,023 --> 00:42:36,104
from scratch was not necessarily the best use of

811
00:42:36,144 --> 00:42:37,705
time for a startup to do.

812
00:42:38,606 --> 00:42:40,287
And it's been really great for us.

813
00:42:40,347 --> 00:42:44,729
We've found it's taken us most of the way without needing to

814
00:42:45,630 --> 00:42:48,451
write a lot of bespoke tools for our game.

815
00:42:49,012 --> 00:42:49,432
It's been great.

816
00:42:51,005 --> 00:42:52,226
Hey Simon, great talk, thank you.

817
00:42:52,426 --> 00:42:52,766
Thanks, Chet.

818
00:42:53,166 --> 00:42:55,807
I was wondering if you could go into a little bit

819
00:42:55,867 --> 00:42:58,468
about your interaction with your outsourcing team

820
00:42:58,648 --> 00:43:00,989
and how you work with them day to day

821
00:43:01,089 --> 00:43:03,110
and kind of pipeline for that briefly.

822
00:43:03,570 --> 00:43:03,770
Sure.

823
00:43:04,851 --> 00:43:06,511
So usually what we'll do is,

824
00:43:08,112 --> 00:43:10,032
we actually treat them almost like how you would

825
00:43:12,248 --> 00:43:19,330
a film team, so we launch them on moves. We will have, typically I'll sit with the designer,

826
00:43:20,410 --> 00:43:25,271
our little behemoth team, and we'll come up with our encounter design for a creature.

827
00:43:26,392 --> 00:43:29,352
When we figure out our base list of moves, we'll make sure that we're all on the same

828
00:43:29,392 --> 00:43:33,813
page and then we'll get on, we use Zoom right now for group calls at the studio.

829
00:43:35,770 --> 00:43:38,372
And we will launch them on the moves, go into the mocap studio

830
00:43:38,412 --> 00:43:40,194
so we can run around and look silly while we're

831
00:43:40,894 --> 00:43:41,595
demonstrating them.

832
00:43:42,636 --> 00:43:45,378
And then typically, I have a group chat with them almost

833
00:43:45,438 --> 00:43:46,959
every day, right after lunch.

834
00:43:47,759 --> 00:43:48,600
We'll do reviews.

835
00:43:48,720 --> 00:43:50,902
We can do, with Zoom, you can draw on the screen as well.

836
00:43:51,402 --> 00:43:52,323
So we can do reviews.

837
00:43:52,363 --> 00:43:53,243
I can do draw overs.

838
00:43:53,283 --> 00:43:54,765
We can talk about the moves.

839
00:43:55,945 --> 00:43:59,469
They also have access to a branch of our Perforce.

840
00:43:59,909 --> 00:44:01,951
So when they submit, they can submit through there,

841
00:44:01,971 --> 00:44:03,832
and it is mirrored to our own internal one.

842
00:44:04,833 --> 00:44:05,634
So it's quite seamless.

843
00:44:05,674 --> 00:44:08,036
I just export from that base folder

844
00:44:08,076 --> 00:44:09,517
and put their stuff in Engine.

845
00:44:11,039 --> 00:44:12,620
Typically, I'll work with.

846
00:44:14,704 --> 00:44:18,066
the leads on there, but often the actual animator will come

847
00:44:18,126 --> 00:44:20,747
on the Zoom call as well, and we'll do it one to one.

848
00:44:20,787 --> 00:44:25,149
But usually it's either with Jalil and the lead for us over

849
00:44:25,169 --> 00:44:26,630
there at Steamroller, whose name is Josiah.

850
00:44:29,081 --> 00:44:30,942
And it's just like turning around and having

851
00:44:30,962 --> 00:44:31,822
an animator on the team.

852
00:44:31,842 --> 00:44:33,623
We just hand them off some moves,

853
00:44:33,683 --> 00:44:34,984
describe them as best we can.

854
00:44:35,424 --> 00:44:36,344
We'll see the blockouts.

855
00:44:36,505 --> 00:44:39,006
We always work in a very, like, I want to see blocking.

856
00:44:39,046 --> 00:44:40,567
And then we do in-betweens.

857
00:44:40,587 --> 00:44:42,468
Then we do blocking plus, and finally polish.

858
00:44:43,368 --> 00:44:45,589
And we track all of this in a giant spreadsheet

859
00:44:46,209 --> 00:44:47,410
that everybody has access to.

860
00:44:47,450 --> 00:44:48,511
It's a Google shared sheet.

861
00:44:48,571 --> 00:44:49,511
So they can.

862
00:44:50,392 --> 00:44:53,294
flip flags, if they take a move, they can just turn it a

863
00:44:53,314 --> 00:44:55,416
certain color and it flags us that they've got it.

864
00:44:55,456 --> 00:44:57,778
And then when they've handed it in, it checks it another

865
00:44:57,818 --> 00:44:58,579
color, things like that.

866
00:44:59,679 --> 00:45:00,540
It's really, really quick.

867
00:45:01,241 --> 00:45:05,324
I don't spend more than a couple of hours a week

868
00:45:05,564 --> 00:45:07,366
reviewing animations, really, with them.

869
00:45:07,526 --> 00:45:08,046
They're very good.

870
00:45:10,543 --> 00:45:17,525
So I have a two-part question regarding the key frame blocking when you were first prototyping your animations

871
00:45:19,125 --> 00:45:22,906
First I think I would like to hear a little more about the actual

872
00:45:23,826 --> 00:45:29,748
process details regarding like how you went about creating the move set in the first place and

873
00:45:30,268 --> 00:45:34,289
blocking out identifying what your key moments would be and then the

874
00:45:36,528 --> 00:45:40,251
Second part was, how long did the initial blocking phase

875
00:45:40,311 --> 00:45:42,753
of the key frame motion when you were prototyping

876
00:45:42,793 --> 00:45:44,234
for gameplay, how long did that last?

877
00:45:44,834 --> 00:45:48,137
Yeah, so our process usually is we'll have,

878
00:45:49,378 --> 00:45:51,840
we make sure everybody's pretty clear on the Behemoth team

879
00:45:51,880 --> 00:45:54,282
before we start on what moves we want

880
00:45:54,842 --> 00:45:56,584
and a priority of how they're gonna be delivered.

881
00:45:57,384 --> 00:45:58,365
If the creature has

882
00:45:59,975 --> 00:46:03,599
like I showed, we've got variations within the genus. So usually if it's a variant of an

883
00:46:03,659 --> 00:46:07,725
existing one, we already have a base locomotion set we can draw from. And then it's adding

884
00:46:08,566 --> 00:46:13,051
new attacks and new personality animations or things like that. If it doesn't, then we block

885
00:46:13,111 --> 00:46:16,276
out some of those as well. And really it's about

886
00:46:18,284 --> 00:46:21,686
coverage, spacing, and timing when we do these first passes.

887
00:46:21,726 --> 00:46:23,867
So how much distance and coverage is an attack?

888
00:46:24,228 --> 00:46:25,568
And what range is that covering?

889
00:46:26,229 --> 00:46:28,050
For locomotion, what speed are we doing,

890
00:46:28,090 --> 00:46:29,191
the distance over time?

891
00:46:31,652 --> 00:46:34,414
And we work very quickly with that.

892
00:46:34,474 --> 00:46:39,277
So typically for a variant, and all the animations, so.

893
00:46:40,515 --> 00:46:46,018
If we have maybe 10 to 12 new moves for a creature to get

894
00:46:46,058 --> 00:46:48,599
done for attacks, things like that, we'll have that game

895
00:46:48,639 --> 00:46:52,601
playing counter up within a week easily, usually only a

896
00:46:52,661 --> 00:46:53,021
few days.

897
00:46:53,662 --> 00:46:56,043
We can have a first playable and be playtesting on the team

898
00:46:56,403 --> 00:46:57,343
and iterating on it.

899
00:46:58,184 --> 00:47:02,106
I think our last variant we did took us three

900
00:47:02,146 --> 00:47:04,067
days to have that in.

901
00:47:04,107 --> 00:47:04,627
It's very quick.

902
00:47:04,667 --> 00:47:07,729
We never spend more than an hour or two per animation to

903
00:47:07,749 --> 00:47:08,169
block it in.

904
00:47:10,560 --> 00:47:10,800
Thanks.

905
00:47:12,042 --> 00:47:12,343
That's it.

906
00:47:12,583 --> 00:47:13,765
All right, thanks so much, everybody.

