1
00:00:06,387 --> 00:00:06,928
Hello everyone.

2
00:00:08,709 --> 00:00:11,290
Welcome to Disintegrating Meshes with Particles for God of War.

3
00:00:12,391 --> 00:00:13,031
Welcome to my talk.

4
00:00:13,231 --> 00:00:14,272
My name is Rupert Renard.

5
00:00:14,572 --> 00:00:15,773
I'm an Australian game developer.

6
00:00:16,353 --> 00:00:18,294
I've been programming games for over 12 years now.

7
00:00:18,995 --> 00:00:20,976
I've worked on 12 ship titles and half a dozen

8
00:00:21,016 --> 00:00:21,617
canceled titles.

9
00:00:22,377 --> 00:00:24,058
Some of the games I've worked on you may have heard about,

10
00:00:24,558 --> 00:00:28,701
such as God of War, The Legend of Zelda, Deus Ex, Mass Effect

11
00:00:29,201 --> 00:00:30,602
3, Deblob 2, and Scooby-Doo.

12
00:00:31,749 --> 00:00:33,452
I've worked in a variety of programming positions.

13
00:00:33,972 --> 00:00:35,274
I'm currently at Sony Santa Monica

14
00:00:35,374 --> 00:00:36,696
as a graphics and engine programmer,

15
00:00:37,197 --> 00:00:38,599
where we shipped God of War in April 2018,

16
00:00:39,420 --> 00:00:40,061
and it did pretty well.

17
00:00:42,900 --> 00:00:46,382
In previous God of War games, Kratos would plow through lots of enemies, and the new

18
00:00:46,422 --> 00:00:48,823
game wasn't going to differ too much in that aspect.

19
00:00:49,523 --> 00:00:54,745
So back in around mid-2015, we held a meeting to come up with in-theme methods of removing

20
00:00:54,925 --> 00:00:56,405
defeated enemies from the screen.

21
00:00:57,266 --> 00:00:59,347
The method needed to fit into the God of War world.

22
00:01:00,047 --> 00:01:02,528
We couldn't just simply let the pile of corpses stack up.

23
00:01:03,948 --> 00:01:07,029
We needed to remove these bodies to ensure that the framerate wouldn't suffer.

24
00:01:07,825 --> 00:01:09,546
Most games don't really take this into account.

25
00:01:10,166 --> 00:01:14,008
They usually just do something simple like let the body sink through the floor, or fade

26
00:01:14,028 --> 00:01:15,229
the body with alpha blending.

27
00:01:16,089 --> 00:01:19,171
So I proposed a method to disintegrate the body pixel by pixel.

28
00:01:19,911 --> 00:01:24,494
I quickly prototyped this, and the results looked promising, and it got implemented into

29
00:01:24,534 --> 00:01:24,814
the game.

30
00:01:28,622 --> 00:01:32,788
I've prepared a short demonstration video from the final game to show you what to expect

31
00:01:32,808 --> 00:01:33,449
from the technique.

32
00:01:34,050 --> 00:01:38,437
Also note that some other standard particle emission techniques are used in combination

33
00:01:38,477 --> 00:01:38,898
at times.

34
00:01:39,679 --> 00:01:44,386
The disintegration technique can occur pretty quickly at times, so please refrain from blinking.

35
00:03:12,266 --> 00:03:14,227
This technique is applied in two major parts.

36
00:03:14,747 --> 00:03:16,628
The first part is to make the mesh disappear.

37
00:03:17,308 --> 00:03:20,789
To do this, we simply apply a simple alpha reference testing.

38
00:03:21,330 --> 00:03:22,190
Nothing really new there.

39
00:03:22,930 --> 00:03:25,091
The second part is to emit particles from the mesh.

40
00:03:25,832 --> 00:03:29,753
We do this by emitting particles the frame immediately before the pixel will be hidden

41
00:03:29,873 --> 00:03:31,054
from the alpha reference testing.

42
00:03:32,170 --> 00:03:36,913
This gives the illusion that the pixels that make up the mesh are disintegrating into small particles.

43
00:03:37,693 --> 00:03:43,116
The particles are then able to move and animate independently, as well as collide with the screen depth buffer.

44
00:03:44,076 --> 00:03:47,298
The technique also conveniently has built-in level of detail.

45
00:03:49,579 --> 00:03:52,000
We start with a simple alpha reference comparison test.

46
00:03:52,842 --> 00:03:56,764
For each fragment of the mesh being drawn, we sample a single channel texture.

47
00:03:57,424 --> 00:03:59,465
We compare the sample against a reference value.

48
00:04:00,185 --> 00:04:04,246
The reference value is shared globally for the mesh, and changes over time.

49
00:04:05,127 --> 00:04:08,808
The comparison results are used to determine whether or not a fragment is visible.

50
00:04:09,633 --> 00:04:11,674
If it's visible, we continue on in the shader.

51
00:04:12,355 --> 00:04:14,436
If it's not visible, we discard the fragment.

52
00:04:15,297 --> 00:04:17,618
Here is a sample texture from one of the enemies in the game.

53
00:04:18,178 --> 00:04:19,799
It's obviously a noise texture that's

54
00:04:19,879 --> 00:04:22,041
used all over the character in a wrapped sampling mode.

55
00:04:22,821 --> 00:04:24,322
The texture is used to demonstrate

56
00:04:24,382 --> 00:04:27,324
the character decaying away from random parts on the body.

57
00:04:28,025 --> 00:04:30,606
That is to say, its effect is to not decay

58
00:04:30,706 --> 00:04:32,828
in a specific manner, just let it be random,

59
00:04:33,048 --> 00:04:33,849
and it works quite well.

60
00:04:34,789 --> 00:04:36,510
Other cases may be more case specific,

61
00:04:37,051 --> 00:04:39,292
tailored textures for certain models or scenarios.

62
00:04:41,408 --> 00:04:43,409
Here is a demo of an animated alpha reference.

63
00:04:44,050 --> 00:04:47,151
I'm using the same texture for the alpha reference as I am for diffuse.

64
00:04:47,912 --> 00:04:51,473
I've done this so you can visually see where the alpha recedes from and to.

65
00:04:52,254 --> 00:04:56,656
You can see the mesh starts disappearing at the dark sections, and moves to the brighter

66
00:04:56,676 --> 00:04:59,177
sections as the alpha reference level rises.

67
00:05:09,775 --> 00:05:12,897
The particle mission is broken down into generally three phases.

68
00:05:13,818 --> 00:05:15,679
We need to leverage a depth pre-pass.

69
00:05:16,359 --> 00:05:21,943
The depth pre-pass is required to guarantee we only run one fragment shader per pixel

70
00:05:22,063 --> 00:05:22,883
in the opaque pass.

71
00:05:23,664 --> 00:05:28,167
This prevents multiple particles from being emitted from the same pixel if triangles were

72
00:05:28,207 --> 00:05:28,847
to overlap.

73
00:05:30,688 --> 00:05:33,510
Once we have populated the depth buffer, we run the opaque pass.

74
00:05:34,312 --> 00:05:38,333
The opaque pass will potentially add to an append buffer the screen coordinates of the

75
00:05:38,373 --> 00:05:40,913
pixels that are emitting particles from this frame.

76
00:05:43,754 --> 00:05:47,135
Once we have populated the append buffer, later in the frame we are going to read the

77
00:05:47,175 --> 00:05:47,575
contents.

78
00:05:48,195 --> 00:05:52,736
We initiate a dispatch indirect to read the append buffer and convert pixel coordinates

79
00:05:52,876 --> 00:05:54,296
into proper emitted particles.

80
00:05:55,257 --> 00:05:59,698
This is done by using screen coordinates to look up information in the G-buffer such as

81
00:05:59,778 --> 00:06:02,998
depth, normal, and lighting or other surface information.

82
00:06:04,262 --> 00:06:09,484
while also converting screen coordinates plus depth read from the depth buffer to world

83
00:06:09,504 --> 00:06:10,225
space coordinates.

84
00:06:11,285 --> 00:06:15,568
The next frame we're able to draw the newly emitted particles, and animate, move, and

85
00:06:15,588 --> 00:06:17,169
collide all the particles as usual.

86
00:06:20,110 --> 00:06:23,432
The append buffer will obviously need to be emptied at the start of the frame.

87
00:06:24,332 --> 00:06:28,995
While I say the depth prepass is required, there are obvious ways around it, you just

88
00:06:29,035 --> 00:06:31,817
need to be careful with your drawing and utilization of this technique.

89
00:06:33,074 --> 00:06:36,596
In the Opaque pass, shader variations were needed to emit the particles.

90
00:06:37,177 --> 00:06:41,240
We didn't want the particle emission shader code to be in shaders or materials that never

91
00:06:41,300 --> 00:06:43,682
emitted particles, for obvious performance reasons.

92
00:06:45,864 --> 00:06:51,509
We do all this at native 1080p resolution for the base PS4, or at the 4K checkerboard

93
00:06:51,549 --> 00:06:51,989
for PS4 Pro.

94
00:06:53,236 --> 00:06:57,658
The append buffer can pack all information needed, screen coordinates, et cetera, into

95
00:06:57,698 --> 00:06:59,078
a single 32-bit entry.

96
00:06:59,718 --> 00:07:05,541
The append buffer has enough storage to emit 128,000 particles per frame, but it's unlikely

97
00:07:05,561 --> 00:07:06,321
it will ever use that.

98
00:07:10,082 --> 00:07:13,884
Here we're going to demonstrate the emission of particles that are coupled with alpha reference

99
00:07:13,924 --> 00:07:14,224
test.

100
00:07:15,044 --> 00:07:16,985
Here you can see three segments of a mesh.

101
00:07:17,845 --> 00:07:22,587
Over three frames, these three segments will disappear in a cascade from top to bottom.

102
00:07:27,937 --> 00:07:31,378
At the start of frame N, we draw the three segments of the mesh.

103
00:07:32,119 --> 00:07:34,279
We start by drawing the segments in the depth pass.

104
00:07:34,860 --> 00:07:39,581
The top segment doesn't pass the reference test, so it executes a discard in the pixel

105
00:07:39,601 --> 00:07:40,761
shader of the depth pass.

106
00:07:41,522 --> 00:07:46,163
The other two segments pass the reference test, so they don't discard and populate the

107
00:07:46,183 --> 00:07:46,643
depth buffer.

108
00:07:48,363 --> 00:07:52,589
We have determined the middle segment will not pass the reference test in the next frame,

109
00:07:53,049 --> 00:07:57,214
so we need to emit particles this frame to represent the invisible segment in the next

110
00:07:57,274 --> 00:07:57,515
frame.

111
00:07:58,175 --> 00:08:02,881
We start by taking the pixel coordinates of each fragment in the middle section and add

112
00:08:02,921 --> 00:08:03,762
them to the append buffer.

113
00:08:08,161 --> 00:08:12,623
Later in the frame, we need to read the append buffer full of pixel coordinates, and create

114
00:08:12,663 --> 00:08:13,423
particles from them.

115
00:08:14,124 --> 00:08:18,606
We run a shader via dispatch indirect, in order to process one particle per thread.

116
00:08:19,506 --> 00:08:23,908
In each thread, we read the pixel coordinates linearly from the append buffer.

117
00:08:24,489 --> 00:08:26,630
Note, we don't need to use a consume buffer here.

118
00:08:27,690 --> 00:08:32,072
Now that we have pixel coordinates, we can index into the gbuffer, and also the depth

119
00:08:32,112 --> 00:08:32,392
buffer.

120
00:08:33,240 --> 00:08:37,563
We read the depth buffer and can now combine the pixel coordinates with the depth value

121
00:08:37,883 --> 00:08:38,904
into world space coordinates.

122
00:08:40,044 --> 00:08:42,806
We use the world space coordinates as the particle's spawning position.

123
00:08:43,587 --> 00:08:48,730
This is also a great opportunity to read other attributes that may be used by the particle,

124
00:08:49,050 --> 00:08:53,233
such as normal from the normal buffer, or material properties, or final lighting values

125
00:08:53,273 --> 00:08:53,793
of the pixel.

126
00:08:54,493 --> 00:08:59,196
But make note, the particles we're spawning in this frame are definitely to be not drawn

127
00:08:59,376 --> 00:08:59,817
this frame.

128
00:09:00,297 --> 00:09:02,438
The reason being, the mesh is still visible.

129
00:09:03,272 --> 00:09:06,914
There's no point drawing particles on top of the mesh since the mesh fragments are supposed

130
00:09:06,934 --> 00:09:08,175
to turn into the particles.

131
00:09:13,018 --> 00:09:14,759
We have now advanced forward a frame.

132
00:09:16,460 --> 00:09:19,722
Now is the time to start drawing the particles we spawned from the previous frame.

133
00:09:20,503 --> 00:09:24,625
The segment that was visible in the previous frame, but not in this frame, has visually

134
00:09:24,685 --> 00:09:28,928
been replaced with particles we emitted but didn't draw in the previous frame.

135
00:09:29,648 --> 00:09:32,330
We also draw all other particles that have spawned previously.

136
00:09:33,208 --> 00:09:36,375
we're able to draw all the particles together and treat them uniformly.

137
00:09:37,077 --> 00:09:40,865
We can also animate the particle, and move the particle, and collide the particle with

138
00:09:40,906 --> 00:09:42,409
other primitives or the depth buffer.

139
00:09:45,158 --> 00:09:50,060
I wanted to test that we could convincingly recreate a mesh entirely with particles.

140
00:09:50,780 --> 00:09:53,521
What you are seeing here in this video demonstrates exactly that.

141
00:09:54,321 --> 00:09:57,382
Each of the Kratos clones are fully created from little particles.

142
00:09:58,002 --> 00:10:00,583
Every frame, we emit particles from the mesh of Kratos.

143
00:10:01,203 --> 00:10:05,725
As Kratos flies around the test level, the particles remain where they were spawned.

144
00:10:06,345 --> 00:10:11,907
I had a fixed particle ring buffer so the trails of Kratos end where the particle ring

145
00:10:11,947 --> 00:10:12,847
buffer size is full.

146
00:10:13,718 --> 00:10:16,481
You can also see that segments of the clones are missing pieces.

147
00:10:17,081 --> 00:10:19,003
This is because they were obscured on a mission.

148
00:10:35,216 --> 00:10:37,878
Particles are easily able to collide with the depth buffer.

149
00:10:38,578 --> 00:10:41,961
Start by taking the particle's world space coordinates, and project them onto screen

150
00:10:41,981 --> 00:10:42,642
space coordinates.

151
00:10:43,425 --> 00:10:47,706
You can now sample a depth buffer with the screen space coordinates.

152
00:10:48,466 --> 00:10:51,347
Compare the particle's projected Z value with the depth buffer value.

153
00:10:52,047 --> 00:10:55,888
If the particle is behind the depth buffer, you can use the same screen space coordinates

154
00:10:56,048 --> 00:10:58,688
to read the normal buffer and use that as your collision normal.

155
00:10:59,549 --> 00:11:03,670
Then nudge the particle in front of the depth buffer and update the particle velocity.

156
00:11:08,524 --> 00:11:12,026
Now here we have the first video of putting this technique into the hands of our lead

157
00:11:12,046 --> 00:11:13,526
character artist, Raf Cressetti.

158
00:11:14,507 --> 00:11:17,388
Raf is playing with the decay animation on a loop.

159
00:11:18,268 --> 00:11:22,570
Raf is also moving the model around manually while the loop plays, to inspect the effect

160
00:11:22,590 --> 00:11:23,431
from multiple angles.

161
00:11:24,191 --> 00:11:28,133
The animation changes the alpha reference value over time, causing the particles to

162
00:11:28,173 --> 00:11:29,813
emit and the mesh to disappear.

163
00:11:33,189 --> 00:11:36,712
You can also see that Raph has added some material animations to help sell the effect.

164
00:11:37,352 --> 00:11:41,855
Raph has made the mesh burn to ash before emitting the particle, causing a pile of ashes

165
00:11:41,895 --> 00:11:42,696
to fall to the ground.

166
00:11:43,496 --> 00:11:47,699
You can also see that the mesh has burned into a pile of ash in the shape of the silhouette

167
00:11:47,719 --> 00:11:48,179
of the mesh.

168
00:11:48,380 --> 00:11:48,820
Very cool.

169
00:11:49,821 --> 00:11:52,462
Just as a note, the character has its feet and waist missing.

170
00:11:52,602 --> 00:11:54,804
This model was a work in progress at the time of testing.

171
00:12:02,524 --> 00:12:05,707
One of the key benefits of this technique is it has built-in level of detail.

172
00:12:06,328 --> 00:12:09,812
The smaller the mesh appears on screen, the fewer particles it is able to emit.

173
00:12:10,452 --> 00:12:17,059
However, this relationship is obviously not linear.

174
00:12:17,760 --> 00:12:21,944
If a mesh is unfortunate enough to be close to the viewing camera, it may occupy large

175
00:12:22,004 --> 00:12:22,845
portions of the screen.

176
00:12:24,081 --> 00:12:27,804
This can create the opportunity to emit a large quantity of particles per frame.

177
00:12:28,264 --> 00:12:32,808
However, you can counteract this with the authoring parameters, such as ensuring you

178
00:12:32,848 --> 00:12:35,210
do not animate your reference value too quickly.

179
00:12:35,950 --> 00:12:42,155
With a smaller reference value speed, you create smaller segments of particle emission.

180
00:12:43,076 --> 00:12:47,800
Our particle system programmer Paolo also introduced a method of emission randomization

181
00:12:48,280 --> 00:12:51,062
to help reduce particle emission count in certain scenarios.

182
00:13:00,230 --> 00:13:03,893
By decoupling the reference value between emission and alpha reference testing, you

183
00:13:03,913 --> 00:13:07,777
can actually start emitting particles early, before the mesh will disappear.

184
00:13:08,477 --> 00:13:12,921
That is to say, instead of emitting a single particle the frame immediately before the

185
00:13:12,961 --> 00:13:18,626
pixel of the mesh disappears, you emit one particle per frame over multiple frames right

186
00:13:18,666 --> 00:13:20,808
before the pixel mesh disappears.

187
00:13:21,628 --> 00:13:25,051
This gives you the ability to produce a more substantial decay effect.

188
00:13:25,839 --> 00:13:29,982
for example, denser objects, but at a cost of more particles.

189
00:13:31,043 --> 00:13:32,845
You can achieve this with a single LU

190
00:13:32,945 --> 00:13:34,546
add instruction in the emission shader.

191
00:13:35,146 --> 00:13:37,889
You add a uniform value to the result of the texture sample

192
00:13:38,369 --> 00:13:40,310
right before you do the alpha reference comparison.

193
00:13:40,991 --> 00:13:43,773
This detaches the emission of the particle

194
00:13:44,153 --> 00:13:47,476
from the disappearing mesh by a variable amount supplied.

195
00:13:50,178 --> 00:13:51,719
Here you can see a video of the particles

196
00:13:51,759 --> 00:13:54,121
emitting at pixels right as the mesh is disappearing.

197
00:13:55,080 --> 00:13:59,364
When the little explosion occurs, it will change over to emitting particles earlier

198
00:13:59,464 --> 00:14:00,886
than when the mesh pixel disappears.

199
00:14:03,388 --> 00:14:06,731
It gives a nice effect of giving the emitting area a visually larger size.

200
00:14:21,740 --> 00:14:25,562
Emission velocity is a useful feature to have available to designers.

201
00:14:26,322 --> 00:14:30,364
Particles may want to just fall from the mesh, or perhaps they may want to sample the normal

202
00:14:30,384 --> 00:14:34,107
buffer from the emission screen coordinates and explode off the mesh instead.

203
00:14:36,508 --> 00:14:39,189
Particles have a range of options to choose from when picking their color.

204
00:14:39,897 --> 00:14:44,382
The emitted color could be the final lit color of the pixel, or it could derive a color from

205
00:14:44,402 --> 00:14:48,927
the material rendered in the G-buffer, or the color could be a part of the particle

206
00:14:48,947 --> 00:14:49,667
system attributes.

207
00:14:50,248 --> 00:14:56,174
There's no reason it can't be a combination of these, such as starting off as the same

208
00:14:56,214 --> 00:15:00,919
color as the final lit pixel, then blend towards the external colors supplied with the particle

209
00:15:00,939 --> 00:15:01,840
system over time.

210
00:15:11,147 --> 00:15:13,108
This technique also has some drawbacks.

211
00:15:13,968 --> 00:15:16,210
If the mesh is not on screen, it can't emit particles.

212
00:15:18,612 --> 00:15:20,793
So Kratos' head and feet are off screen.

213
00:15:21,573 --> 00:15:23,095
The rest of the body is on screen.

214
00:15:24,075 --> 00:15:27,457
Pixel shaders are only ever run on pixels that get rasterized.

215
00:15:28,218 --> 00:15:30,319
It can't be rasterized if it's outside the viewport.

216
00:15:31,140 --> 00:15:34,962
So this means Kratos' head and feet will not be able to emit particles.

217
00:15:36,030 --> 00:15:40,416
If we were to have an alpha reference emit particles from Kratos' head to feet, you

218
00:15:40,436 --> 00:15:45,122
would expect Kratos' particles to fall from his head and into the viewport, but they won't.

219
00:15:45,943 --> 00:15:48,887
The head will gradually disappear downwards even though you won't be able to tell.

220
00:15:49,668 --> 00:15:54,234
Then the top of his shoulders and chest will start disappearing and emitting particles.

221
00:15:59,165 --> 00:16:02,650
Some of our designers unfortunately fell into this trap a couple of times.

222
00:16:03,431 --> 00:16:05,654
One in particular was very impressed with the technique.

223
00:16:06,375 --> 00:16:09,579
He wanted to use it for revealing a hidden passageway from a fake wall.

224
00:16:10,634 --> 00:16:13,455
He set the fake wall material up with the decay option

225
00:16:14,076 --> 00:16:15,496
and was pleased with the visual result.

226
00:16:16,077 --> 00:16:18,098
It was decaying like sand from top to bottom

227
00:16:18,298 --> 00:16:19,138
right in front of your eyes.

228
00:16:19,718 --> 00:16:22,220
However, he noticed that when triggering the effect

229
00:16:22,320 --> 00:16:23,840
from up close and looking around,

230
00:16:24,281 --> 00:16:26,662
the wall just kind of cut off near the top of the screen

231
00:16:27,202 --> 00:16:28,483
as the particles were falling down.

232
00:16:29,363 --> 00:16:31,944
This was caused by the mesh not being on screen

233
00:16:32,104 --> 00:16:33,185
in order to emit particles.

234
00:16:36,886 --> 00:16:37,947
There are methods available.

235
00:16:39,055 --> 00:16:43,977
to you to help counteract this, such as rendering the mesh off screen at the same resolution,

236
00:16:44,457 --> 00:16:48,499
or simply just resort to your simple triangle emission techniques, but these are outside

237
00:16:48,519 --> 00:16:49,479
the scope of this technique.

238
00:16:53,361 --> 00:16:57,623
The technique proved to be very valuable to the effects artists. They wanted to use it

239
00:16:57,683 --> 00:16:59,224
in several other scenarios as well.

240
00:17:00,506 --> 00:17:04,728
As described in the limitation section, it was used for revealing hidden fake walls.

241
00:17:05,728 --> 00:17:10,270
Various magic effects were also applicable to this technique and were used extensively

242
00:17:10,370 --> 00:17:11,810
in one particular cutscene in the game.

243
00:17:13,011 --> 00:17:15,532
The cutscene shows a character being sucked into a portal.

244
00:17:16,212 --> 00:17:20,334
The character is attempting to resist, and little pieces of the character end up falling

245
00:17:20,374 --> 00:17:21,414
away into the portal.

246
00:17:22,554 --> 00:17:26,376
One set-up of this technique was repeatedly asked for, the reverse.

247
00:17:27,598 --> 00:17:31,201
where particles were scattered around and are pulled together to form the mesh.

248
00:17:31,721 --> 00:17:34,483
This is very doable, but not with this technique present here.

249
00:17:40,408 --> 00:17:46,312
So as I said earlier, this was all initially developed in 2015, so this GDC presentation

250
00:17:46,372 --> 00:17:49,995
has been four years in the making, but we're occupied making the game itself.

251
00:17:50,982 --> 00:17:55,668
Everything I presented to you here was the core, initial version of the technique,

252
00:17:56,128 --> 00:17:58,851
and is everything you need to get this technique up and running for yourself.

253
00:17:59,712 --> 00:18:03,937
At the same time as this was being developed, our GPU particle system was being developed by

254
00:18:03,977 --> 00:18:08,242
Simone Kulcicki. Over the next few years, some changes were made to the technique,

255
00:18:08,442 --> 00:18:10,785
in order to fit in nicely with our new particle system.

256
00:18:11,735 --> 00:18:13,936
Our particle system programmer, Paolo Siricchio,

257
00:18:14,477 --> 00:18:16,878
also added some new mechanisms on how to animate

258
00:18:16,898 --> 00:18:17,918
the alpha reference value.

259
00:18:18,559 --> 00:18:20,620
Originally, you could just keyframe

260
00:18:20,640 --> 00:18:23,701
the alpha reference value through our animation sequences.

261
00:18:24,321 --> 00:18:27,103
He expanded on this workflow and added mechanisms

262
00:18:27,163 --> 00:18:28,443
to animate it through script

263
00:18:28,844 --> 00:18:31,045
and also hooked it up to our desk system.

264
00:18:33,126 --> 00:18:35,387
He also added a feature to ration out the particle

265
00:18:35,407 --> 00:18:38,368
spawning between different multiple disintegrating meshes

266
00:18:38,748 --> 00:18:40,129
dependent on their screen size.

267
00:18:44,203 --> 00:18:48,266
One particular feature I was hoping some of our artists would explore was mesh layering.

268
00:18:49,347 --> 00:18:53,090
The character would have multiple layers of mesh, like a Munchoschka doll, also known

269
00:18:53,170 --> 00:18:54,311
as the Russian nesting doll.

270
00:18:55,292 --> 00:19:01,076
Before the disintegration begins, the inside layers would never be rendered for the sake

271
00:19:01,116 --> 00:19:01,697
of performance.

272
00:19:02,558 --> 00:19:05,640
But once disintegration starts, the inner layers are rendered.

273
00:19:06,260 --> 00:19:11,284
As the outer mesh layer of the skin disintegrates, it would reveal a flesh mesh layer beneath

274
00:19:11,305 --> 00:19:11,345
it.

275
00:19:12,743 --> 00:19:14,644
When the flesh mesh layer would disintegrate,

276
00:19:15,024 --> 00:19:16,425
it would reveal the bone beneath it.

277
00:19:17,065 --> 00:19:18,485
Then the bone mesh would disintegrate.

278
00:19:21,767 --> 00:19:22,827
Thanks, everyone, for attending.

279
00:19:23,408 --> 00:19:25,089
I'd just like to take a few moments to thank others

280
00:19:25,109 --> 00:19:26,169
who helped out in various ways.

281
00:19:26,949 --> 00:19:28,990
Paolo Siricchio and the rest of the rendering team.

282
00:19:29,651 --> 00:19:32,532
Max Ankar, Kevin Huynh, and the rest of the effects team.

283
00:19:33,032 --> 00:19:34,453
Jack Mulholland and Christina Coffin.

284
00:19:37,354 --> 00:19:39,295
We are hiring in various positions.

285
00:19:39,575 --> 00:19:40,616
Please check out our website

286
00:19:41,016 --> 00:19:42,256
and come join us on our next project.

287
00:19:44,738 --> 00:19:49,081
We also have various other presentations that other members of the team are giving.

288
00:19:49,962 --> 00:19:50,783
I think we're around here.

289
00:19:52,124 --> 00:19:54,045
So we've got all of these talks to go.

290
00:19:54,306 --> 00:19:54,826
Please attend them.

291
00:19:55,727 --> 00:19:55,967
Thanks.

292
00:20:03,673 --> 00:20:04,174
Any questions?

293
00:20:05,054 --> 00:20:06,035
Please step up to the microphone.

294
00:20:11,525 --> 00:20:11,805
Go ahead.

295
00:20:12,926 --> 00:20:13,286
Thank you.

296
00:20:13,366 --> 00:20:14,787
It was an interesting presentation.

297
00:20:15,667 --> 00:20:16,588
I have a question.

298
00:20:16,628 --> 00:20:19,389
This kind of technique is kind of resolution dependent,

299
00:20:19,449 --> 00:20:22,811
so you should end up with different number of particles

300
00:20:22,891 --> 00:20:26,534
for base PS version and PS Pro versions.

301
00:20:27,274 --> 00:20:31,216
Is this a thing that you somehow mitigated with your artist,

302
00:20:31,256 --> 00:20:31,577
maybe?

303
00:20:31,857 --> 00:20:32,397
No, we did not.

304
00:20:32,437 --> 00:20:34,478
So the question was, since there are

305
00:20:34,498 --> 00:20:36,299
multiple resolutions for multiple consoles,

306
00:20:36,720 --> 00:20:37,520
how did we handle that?

307
00:20:37,660 --> 00:20:39,882
We just let the higher resolution

308
00:20:39,902 --> 00:20:40,502
have more particles.

309
00:20:41,450 --> 00:20:44,012
It had more hardware to handle it, so away it went.

310
00:20:44,652 --> 00:20:47,074
But I was curious if it provides,

311
00:20:47,134 --> 00:20:49,615
like if artists are happy enough

312
00:20:49,635 --> 00:20:51,516
with different visuals on different platforms,

313
00:20:51,597 --> 00:20:52,917
like slightly different, okay.

314
00:20:53,057 --> 00:20:53,638
No, they liked it.

315
00:20:53,978 --> 00:20:54,959
Okay. Yeah.

316
00:20:55,119 --> 00:20:55,379
Thank you.

317
00:20:58,761 --> 00:20:59,421
Go ahead.

318
00:20:59,861 --> 00:21:02,883
So you mentioned that the off-screen parts

319
00:21:02,903 --> 00:21:04,184
of the character couldn't get any particles.

320
00:21:04,204 --> 00:21:06,586
Did you guys attempt any solution to cover that up,

321
00:21:06,626 --> 00:21:10,228
or was it just not visible enough to be worth addressing?

322
00:21:10,540 --> 00:21:12,982
It was used, sorry, the question was how did we handle

323
00:21:14,042 --> 00:21:16,024
the meshes being off screen and not emitting particles?

324
00:21:16,564 --> 00:21:19,727
So we mostly handled this with kind of two mechanisms.

325
00:21:19,827 --> 00:21:22,248
One is restrict the camera, particularly in cut scenes

326
00:21:22,629 --> 00:21:24,190
to have the meshes on screen.

327
00:21:24,610 --> 00:21:26,652
The other method is just combine it

328
00:21:26,692 --> 00:21:27,933
with other particle emission techniques.

329
00:21:29,174 --> 00:21:29,974
Thanks. No problem.

330
00:21:31,155 --> 00:21:31,355
Go ahead.

331
00:21:32,007 --> 00:21:32,928
Great talk. Thank you.

332
00:21:33,028 --> 00:21:33,288
Thank you.

333
00:21:33,788 --> 00:21:35,429
I had a question about,

334
00:21:36,009 --> 00:21:39,250
I know you said that you divided the meshes into segments,

335
00:21:39,310 --> 00:21:42,592
and the segments would start fading away and emit particles.

336
00:21:43,552 --> 00:21:48,434
Was the segment definition artist defined,

337
00:21:48,574 --> 00:21:50,015
or was that mesh dependent?

338
00:21:50,255 --> 00:21:52,356
Okay. So the question is on segments. What are segments?

339
00:21:52,776 --> 00:21:55,137
Segments is something I just invented for this presentation.

340
00:21:55,837 --> 00:21:58,638
So as the alpha references animating,

341
00:21:59,825 --> 00:22:06,868
The segment is effectively pixels on the mesh that will appear this frame and not next frame.

342
00:22:07,568 --> 00:22:12,650
So there are no real segments, it's just a term I've used to describe pixels that are

343
00:22:12,690 --> 00:22:15,611
changing from being visible to not being visible in the next frame.

344
00:22:16,511 --> 00:22:16,771
Thank you.

345
00:22:16,911 --> 00:22:17,191
No problem.

346
00:22:18,252 --> 00:22:18,812
Any other questions?

347
00:22:20,272 --> 00:22:21,873
Yeah, one last quick question.

348
00:22:22,013 --> 00:22:24,714
This technique looks like it was purely pixel based.

349
00:22:24,734 --> 00:22:28,495
Did you investigate anything like pervert based for a similar technique?

350
00:22:29,117 --> 00:22:31,759
No, we wanted the high resolution of the pixel shape.

351
00:22:31,779 --> 00:22:34,000
Sorry, the question was, did we investigate

352
00:22:34,280 --> 00:22:35,601
vertex emission techniques?

353
00:22:36,302 --> 00:22:36,702
Is that correct?

354
00:22:36,982 --> 00:22:37,142
Yeah.

355
00:22:37,362 --> 00:22:38,883
Yes, no, we did not investigate that.

356
00:22:39,724 --> 00:22:41,505
That would probably be too low resolution for us.

357
00:22:42,566 --> 00:22:44,247
Some of our character measures were pretty high

358
00:22:44,707 --> 00:22:47,109
in the vertex count, but probably not enough

359
00:22:47,189 --> 00:22:48,410
to give the effect that we wanted.

360
00:22:49,411 --> 00:22:49,931
Yep, thanks.

361
00:22:50,071 --> 00:22:50,311
Thank you.

362
00:22:51,692 --> 00:22:52,333
Any final questions?

363
00:22:53,774 --> 00:22:54,434
All right, thank you, everyone.

