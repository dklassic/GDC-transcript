1
00:00:06,292 --> 00:00:07,453
Hi everyone, my name's John.

2
00:00:07,954 --> 00:00:08,674
My name's Ryan.

3
00:00:09,495 --> 00:00:11,357
And we're gonna teach you some amazing stuff

4
00:00:11,377 --> 00:00:12,318
over the next little while.

5
00:00:12,338 --> 00:00:14,500
We're gonna teach about what narrative greyboxing is.

6
00:00:14,580 --> 00:00:17,263
We're gonna show you how to save time and money

7
00:00:17,603 --> 00:00:18,744
and write better stories.

8
00:00:19,164 --> 00:00:21,006
And we're gonna show you how it's a good idea

9
00:00:21,387 --> 00:00:23,869
for writers to be programmers, even just a little bit.

10
00:00:25,047 --> 00:00:30,189
So I am John Manning, I work at a studio called Secret Lab,

11
00:00:30,209 --> 00:00:32,169
we're based down here in Tasmania, Australia,

12
00:00:32,649 --> 00:00:33,910
and we're best known for having worked

13
00:00:34,150 --> 00:00:37,271
on Night in the Woods, and I'm also the lead developer

14
00:00:37,311 --> 00:00:38,892
of a project called Yarnspinner,

15
00:00:38,932 --> 00:00:40,092
which you'll hear quite a bit about

16
00:00:40,432 --> 00:00:41,373
over the next little while.

17
00:00:42,113 --> 00:00:44,214
And I'm Ryan, I'm the author of a couple

18
00:00:44,234 --> 00:00:45,474
of choose your own path books,

19
00:00:45,514 --> 00:00:47,395
which are nonlinear versions of Shakespeare,

20
00:00:47,415 --> 00:00:49,636
like To Be or Not To Be, Romeo and or Juliet.

21
00:00:50,015 --> 00:00:54,081
I've also written a bunch of comics and in terms of games I've contributed to Destiny

22
00:00:54,381 --> 00:00:59,708
2 DLC, Stick It to the Man and Ava which is a fun game where you play an avocado and I've

23
00:00:59,728 --> 00:01:02,531
also got some development experience too, not just as a writer.

24
00:01:04,045 --> 00:01:07,526
So lots and lots of dialogue tools are node-based,

25
00:01:07,806 --> 00:01:10,347
and node-based means that each line of dialogue

26
00:01:10,507 --> 00:01:13,607
is a node on a graph, and those nodes are connected

27
00:01:13,988 --> 00:01:16,048
from one point to the next, and if a node has

28
00:01:16,368 --> 00:01:17,769
multiple connections coming out of it,

29
00:01:17,789 --> 00:01:18,789
that means there's options.

30
00:01:19,269 --> 00:01:21,650
This is the paradigm used for lots of great

31
00:01:21,690 --> 00:01:23,790
commercial tools out there like ChatMapper,

32
00:01:24,171 --> 00:01:27,592
ArticyDraft, lots of particularly great dialogue tools

33
00:01:27,652 --> 00:01:29,392
on engine-specific asset stores.

34
00:01:30,052 --> 00:01:34,073
Plus of course there are lots of studios who create their own tools to suit their own needs

35
00:01:34,093 --> 00:01:37,374
and there are a lot of great GDC talks out there about these internal processes.

36
00:01:38,175 --> 00:01:43,216
So for example Kari Patel and David Simchick gave a great talk at GDC 2019 about the Obsidian

37
00:01:43,496 --> 00:01:44,256
internal dialogue tool.

38
00:01:44,396 --> 00:01:49,798
Elon Ruskin did a great talk, Rule Databases for Textual Dialogue and Game Logic in 2012

39
00:01:50,578 --> 00:01:55,340
and also Jason Gregory did a talk which is also fantastic about the internal dialogue

40
00:01:55,360 --> 00:01:57,680
system used in The Last of Us at Naughty Dog.

41
00:01:59,054 --> 00:02:02,176
Now, all of these are effectively structured data entry.

42
00:02:02,656 --> 00:02:03,797
You're working with a data structure

43
00:02:04,037 --> 00:02:05,257
that your designers have put together

44
00:02:05,457 --> 00:02:06,638
and that you're filling in.

45
00:02:06,838 --> 00:02:08,959
And we can call these graph approaches

46
00:02:09,219 --> 00:02:10,320
to branching dialog.

47
00:02:10,360 --> 00:02:12,641
These are very, very easy to visualize.

48
00:02:13,021 --> 00:02:15,743
You can show someone the graph and see the structure.

49
00:02:16,403 --> 00:02:18,044
These are less easy to write

50
00:02:18,184 --> 00:02:21,086
because you're often going in and out of node views

51
00:02:21,146 --> 00:02:22,546
and you're drawing lines between them

52
00:02:22,666 --> 00:02:23,427
and it can get fiddly.

53
00:02:25,845 --> 00:02:28,166
One of the most popular tools for this is spreadsheets,

54
00:02:28,186 --> 00:02:30,908
where you simply have a grid of data with lines dropped in.

55
00:02:31,388 --> 00:02:34,029
It works really well for simple things,

56
00:02:34,109 --> 00:02:36,730
but for branching dialogue, it's less effective.

57
00:02:37,690 --> 00:02:39,911
I've used these tools as a writer before

58
00:02:40,212 --> 00:02:41,832
and they get the job done,

59
00:02:41,892 --> 00:02:44,373
but you kind of wonder, is there a better way?

60
00:02:45,531 --> 00:02:53,513
Spoilers. So something that we've been working on is a bit of an alternate approach. Rather than working with a graph or a table,

61
00:02:53,533 --> 00:03:00,135
we're going to talk about tools that combine a writer-friendly screenplay approach with a programmer-friendly language approach.

62
00:03:00,175 --> 00:03:03,916
And we'll focus on a particular tool as our example, but as we'll make clear,

63
00:03:03,936 --> 00:03:09,957
this is a pretty broadly applicable technique because we want to have flow control and ease of writing.

64
00:03:11,083 --> 00:03:15,870
So Yarnspinner is our tool that has been in use for a while now.

65
00:03:16,111 --> 00:03:19,856
It is a combination of a screenplay and also a gameplay flow language.

66
00:03:19,896 --> 00:03:23,722
It is designed so that you can write lines of dialogue and just stop there if that's all you want,

67
00:03:24,023 --> 00:03:25,164
but you can do more as well.

68
00:03:25,896 --> 00:03:29,097
It's funny you should mention screenplay format because I've used that before.

69
00:03:29,798 --> 00:03:33,639
Spreadsheets are often used when the game is constantly calling out this state of line,

70
00:03:33,679 --> 00:03:34,360
give me the next line.

71
00:03:34,800 --> 00:03:37,901
And with screenplay, it's more like the game is saying, scene, give me the next scene.

72
00:03:38,261 --> 00:03:43,784
And this works great when you have sort of linear chunks of back and forth for your

73
00:03:43,904 --> 00:03:46,005
story, if it's more like an interactive movie.

74
00:03:46,865 --> 00:03:48,586
But you kind of get the sense of...

75
00:03:49,420 --> 00:03:53,341
You know, this is the tool we already have, so this is the tool we're going to be using.

76
00:03:53,561 --> 00:03:58,003
It's not designed for gameplay, it's designed for screens, for screenplays.

77
00:03:58,463 --> 00:04:03,004
So to augment the screenplay format, Yarnspinner is also a full programming language.

78
00:04:03,665 --> 00:04:06,986
And here's where it gets interesting, because when you turn your writers into programmers,

79
00:04:07,386 --> 00:04:08,846
that's the title of the talk.

80
00:04:09,407 --> 00:04:12,568
Then you enable some really interesting workflows and possibilities.

81
00:04:13,108 --> 00:04:19,171
So Yarnspinner isn't the first system out there that tries to create a story programming language.

82
00:04:19,291 --> 00:04:24,754
Games going back to the Infinity Engine and earlier, so games like Baldur's Gate and Icewind Dale,

83
00:04:24,774 --> 00:04:28,356
those kinds of things, use a scripting language to control their dialogue.

84
00:04:28,596 --> 00:04:31,497
Double Fine also has got some great talks on the on the GDC Vault

85
00:04:31,878 --> 00:04:35,480
about how they did a similar thing for Brutal Legend and Broken Age.

86
00:04:36,231 --> 00:04:37,633
And sometimes you're not even that fancy.

87
00:04:37,733 --> 00:04:39,835
I've done writing for games in Word documents,

88
00:04:39,895 --> 00:04:41,257
I've done it in Google Docs,

89
00:04:41,557 --> 00:04:43,759
and when you're writing a branching narrative

90
00:04:43,779 --> 00:04:45,341
in a flat structure like a Google Doc,

91
00:04:45,802 --> 00:04:47,343
it can get a little messy.

92
00:04:47,464 --> 00:04:48,605
As you can see on this slide,

93
00:04:48,845 --> 00:04:51,668
here's a situation adapted from a natural game I wrote

94
00:04:51,748 --> 00:04:51,969
where

95
00:04:52,689 --> 00:04:56,091
we're keeping track of whether or not this professor has chalk simply by saying if the

96
00:04:56,111 --> 00:05:00,393
professor has chalk in the document. It made it decent for me to write because I could keep all

97
00:05:00,413 --> 00:05:04,575
that state in my head, but you're copying and pasting by hand into the game at this point,

98
00:05:04,595 --> 00:05:08,678
and it's not a super terrific workflow. All right, and also how do you encode

99
00:05:08,798 --> 00:05:14,861
player can't progress? So Yarnspinner is an open source project. It is released under the MIT open

100
00:05:14,881 --> 00:05:20,084
source license. It's available on GitHub, and it's heavily inspired by Twine and was used first in

101
00:05:20,104 --> 00:05:21,805
the dollar system for Night in the Woods.

102
00:05:22,944 --> 00:05:25,467
Entwined can be a bit of a mess.

103
00:05:26,247 --> 00:05:31,392
This is a screenshot of my book To Be or Not To Be, where you can see the nodes, but it's

104
00:05:31,452 --> 00:05:33,274
very hard to get a sense of what's going on.

105
00:05:33,394 --> 00:05:38,018
I try to keep things organized by using the horizontal axis as your position in the narrative

106
00:05:38,059 --> 00:05:38,559
of the story.

107
00:05:38,975 --> 00:05:41,678
and the vertical axis is basically being what character you are.

108
00:05:42,138 --> 00:05:45,982
But even with that, I'm reduced to stitching together screenshots and circling

109
00:05:46,502 --> 00:05:50,005
to say which point represents which place in the story.

110
00:05:50,386 --> 00:05:53,809
And it only gets more complicated when you add in things like variables

111
00:05:53,829 --> 00:05:57,552
to keep track of state, which are going to be invisible in this sort of view.

112
00:05:58,449 --> 00:06:05,994
One of the really good things about Twine though is it's got a really, really simple and approachable syntax that is great for people who are not full-time programmers.

113
00:06:06,615 --> 00:06:09,416
So we basically just took that and ran with it.

114
00:06:09,637 --> 00:06:17,782
So Yarnspinner uses Twine-like syntax combined with screenplay semantics to create, well, its entire language.

115
00:06:18,222 --> 00:06:22,269
So in Yarnspinner, lines of text are individual lines of dialogue.

116
00:06:22,790 --> 00:06:27,277
This means that a screenplay is valid Yarn code. We have a minimal syntax for options,

117
00:06:27,338 --> 00:06:31,805
we have flow control, we have commands, and it scales to compact systems quite well as you'll soon see.

118
00:06:32,972 --> 00:06:36,596
So what do we mean when we say a story programming language?

119
00:06:36,657 --> 00:06:38,539
Well, Yarnspinner works like this.

120
00:06:39,079 --> 00:06:42,083
You, the writer, write your dialogue out

121
00:06:42,183 --> 00:06:44,025
as yarn script in a text file.

122
00:06:44,566 --> 00:06:46,408
It looks very similar to a screenplay

123
00:06:46,508 --> 00:06:48,150
with occasional flow control syntax.

124
00:06:48,210 --> 00:06:49,431
It's quite easy to pick up and read.

125
00:06:50,332 --> 00:06:55,757
The editor tools or the engine at runtime reads that text that you've written and parses it

126
00:06:56,118 --> 00:07:01,863
into nodes. So the individual nodes on the graph that we were talking about earlier. During

127
00:07:01,923 --> 00:07:07,528
gameplay Yarnspinner moves from node to node, sending the game lines of dialogue, options to

128
00:07:07,548 --> 00:07:12,293
show to the player, commands to run, and also makes decisions on which node to move to next

129
00:07:12,353 --> 00:07:14,535
based on player choices and on the game state.

130
00:07:15,615 --> 00:07:17,116
So here's an example.

131
00:07:17,616 --> 00:07:18,717
Here's a chunk from Night in the Woods

132
00:07:18,777 --> 00:07:20,978
that shows all of these elements.

133
00:07:21,158 --> 00:07:23,040
So up top, you've got some flow control.

134
00:07:23,120 --> 00:07:25,721
So we're checking the value of a variable called Angus,

135
00:07:26,261 --> 00:07:29,603
and then we set some new value into that variable Angus.

136
00:07:29,683 --> 00:07:31,064
We do another test on another one called

137
00:07:31,104 --> 00:07:33,065
Did an Angus Investigation Quest.

138
00:07:33,765 --> 00:07:37,147
A command there, close all, which in Night in the Woods

139
00:07:37,207 --> 00:07:39,028
happens to be a special command that gets rid

140
00:07:39,048 --> 00:07:40,369
of all of the dialogue boxes on the screen.

141
00:07:41,890 --> 00:07:44,290
Then, after that, we've got some lines.

142
00:07:44,531 --> 00:07:47,791
So we have lines back and forth between Angus and a character B.

143
00:07:48,872 --> 00:07:50,732
Then at the very bottom, we've got options.

144
00:07:50,852 --> 00:07:55,793
So the player can choose to say lasagna or brownies, and based on those choices, different

145
00:07:55,833 --> 00:07:56,394
lines are run.

146
00:07:57,154 --> 00:08:02,215
So Yarnspinner is just running this script much like it would if it was a program, because

147
00:08:02,355 --> 00:08:02,875
it is a program.

148
00:08:04,755 --> 00:08:08,199
So arrows are a feature that we really quite like in this

149
00:08:08,359 --> 00:08:10,201
because you don't have to create nodes

150
00:08:10,242 --> 00:08:11,443
and connect them with lines.

151
00:08:11,523 --> 00:08:13,265
It makes creating branching dialogue

152
00:08:13,725 --> 00:08:14,987
super, super cheap to do,

153
00:08:15,107 --> 00:08:18,050
which means that writers are a lot freer

154
00:08:18,951 --> 00:08:19,972
and they don't have to go,

155
00:08:19,992 --> 00:08:21,454
oh, I could add a choice,

156
00:08:21,574 --> 00:08:23,436
but that would mean a whole 10 more clicks.

157
00:08:24,145 --> 00:08:27,267
Yeah, and it also lets you experiment with the story quickly when you're writing.

158
00:08:27,347 --> 00:08:30,109
You can throw in a choice and see where it takes you and then decide, you know what,

159
00:08:30,129 --> 00:08:33,131
this is great, I'm going to follow up on this, or you know what, this is horrible, I'm just

160
00:08:33,151 --> 00:08:35,172
going to cut it and keep going with the narrative.

161
00:08:35,293 --> 00:08:39,095
It's very much an experimental sort of play space for the writer.

162
00:08:39,717 --> 00:08:42,258
We also found it to be really useful for cutscenes.

163
00:08:42,499 --> 00:08:45,520
So every cutscene in Night in the Woods is a yarn script,

164
00:08:45,640 --> 00:08:48,241
and it was really, really useful for solving

165
00:08:48,301 --> 00:08:51,183
the problem of general linear content delivery.

166
00:08:51,283 --> 00:08:53,644
So in addition to having lines run,

167
00:08:53,704 --> 00:08:56,886
we also have stuff like, in this script here,

168
00:08:57,166 --> 00:08:59,547
we tell a fountain to stop playing an animation,

169
00:08:59,827 --> 00:09:02,148
we fade out the music over the course of three seconds,

170
00:09:02,228 --> 00:09:04,029
and we also wait for three seconds,

171
00:09:04,430 --> 00:09:06,991
and then we run some lines of dialogue.

172
00:09:07,722 --> 00:09:19,951
So when you're writing, it lets you imagine the kind of things you'd like to see and even drop in roughed in code for what that might look like, which lets you just build the story and then have these pieces left over for the developer to, you know, actually develop for you.

173
00:09:20,612 --> 00:09:26,254
So story languages like this are kind of the halfway point between screenplays and graphs.

174
00:09:26,454 --> 00:09:32,316
You're writing a top-to-bottom text document in a text editor in a very familiar way for most people to write,

175
00:09:32,817 --> 00:09:38,019
but you're also expressing more complex branching structures much like a programmer does,

176
00:09:38,479 --> 00:09:41,260
and you're doing both of these in the exact same place.

177
00:09:41,860 --> 00:09:44,282
So with that in mind, as we were building this, we went,

178
00:09:44,342 --> 00:09:46,604
hey, this is getting more interesting, more popular,

179
00:09:46,684 --> 00:09:48,165
more people are using it, that's great.

180
00:09:48,946 --> 00:09:50,647
And it turned into a full project.

181
00:09:50,988 --> 00:09:53,850
So why not make a cool demo game for it?

182
00:09:54,550 --> 00:09:55,531
So this is where I come in.

183
00:09:55,912 --> 00:09:57,913
John contacted me and said, hey, are you interested

184
00:09:57,933 --> 00:10:01,016
in writing, say, a short five-minute sort of demo game

185
00:10:01,036 --> 00:10:02,537
just to show what Yarnspinner can do?

186
00:10:03,217 --> 00:10:05,859
And I said, sure, and then came back with this pitch

187
00:10:06,020 --> 00:10:10,363
for a story called I Feel Fine about a robot pinned

188
00:10:10,383 --> 00:10:10,783
to the floor.

189
00:10:11,341 --> 00:10:14,462
of this space station that's going to be destroyed by an asteroid in three days.

190
00:10:14,522 --> 00:10:17,783
So it's very simple. One room nailed to the floor. You can't even move.

191
00:10:18,103 --> 00:10:21,783
We'll just have conversations with characters throughout this story as we go.

192
00:10:22,704 --> 00:10:26,625
And this is what I sent to John at the end of the pitch saying, hey, you know,

193
00:10:26,865 --> 00:10:29,805
what do you think? There's a lot of options here. It's very open.

194
00:10:30,386 --> 00:10:33,946
I presume we're going to iterate on this and there'll be a whole bunch of conversations

195
00:10:33,966 --> 00:10:36,927
we'll have to have. Where do you want to take it from here?

196
00:10:37,651 --> 00:10:43,672
And where we took it from there was John basically just sending me a little Unity app that I could

197
00:10:43,712 --> 00:10:50,954
drop scripts into and saying, have fun, let me know what you come up with. Which I was not expecting,

198
00:10:51,174 --> 00:10:56,075
but made for a really interesting development cycle because I could just start writing. I

199
00:10:56,115 --> 00:11:01,916
started writing a game. What John sent me is what you can see on the screen here, basically a little

200
00:11:02,901 --> 00:11:09,289
demo script that showed here's how characters talk, here's what choices look like, here's some

201
00:11:09,309 --> 00:11:15,278
basic controls, and go for it. Have fun. Let me know if you need anything.

202
00:11:16,229 --> 00:11:18,530
And based on the system that we had put together,

203
00:11:18,550 --> 00:11:20,612
it actually honestly didn't really occur to me

204
00:11:20,652 --> 00:11:22,613
to send Ryan anything different

205
00:11:22,673 --> 00:11:24,895
because we'd already built up the system

206
00:11:24,915 --> 00:11:26,776
that allowed a writer to just sit down and write.

207
00:11:27,336 --> 00:11:30,178
So yeah, I was surprised that he was surprised

208
00:11:30,198 --> 00:11:30,939
that I was surprised.

209
00:11:32,360 --> 00:11:34,061
So we built this thing.

210
00:11:34,121 --> 00:11:37,063
It took about a day to throw together this little demo thing

211
00:11:37,283 --> 00:11:38,324
and I sent it off to Ryan.

212
00:11:40,245 --> 00:11:42,947
And Ryan took that and turned it into something

213
00:11:43,007 --> 00:11:44,408
just staggeringly huge.

214
00:11:44,910 --> 00:11:52,011
Yeah, I sort of ended up with about an hour worth of gameplay, a three-day structure,

215
00:11:52,872 --> 00:11:58,353
multiple endings, character romance options. It turns out by giving me the tools to do that,

216
00:11:59,013 --> 00:12:04,914
I would start doing things like that. And here's an example of the game code as it is today. If you

217
00:12:04,934 --> 00:12:08,755
look, it's the exact same stuff that John sent me, the same control structures, the same ways to make

218
00:12:08,795 --> 00:12:14,196
characters speak, only now it's for an actual game having passed through the hands of an actual

219
00:12:14,256 --> 00:12:14,516
writer.

220
00:12:15,717 --> 00:12:18,019
This is what the tool that John sent me looks like.

221
00:12:18,360 --> 00:12:21,122
And to use it, I would just hit the reload script button in it,

222
00:12:21,222 --> 00:12:24,545
which reloaded the game and let me debug my story

223
00:12:24,585 --> 00:12:26,807
exactly the way a developer would debug their code.

224
00:12:27,147 --> 00:12:30,630
And once I got used to that, once I was used to this development cycle,

225
00:12:31,191 --> 00:12:34,474
I asked him to send me a new version that displayed the content of variables.

226
00:12:35,314 --> 00:12:39,377
in the game on the screen, which made it even easier for me, which unlocked this standard

227
00:12:39,397 --> 00:12:43,741
development cycle of test, correct, test, correct, this iterative process, until I could

228
00:12:44,161 --> 00:12:49,265
get the story to a point where it's done, it's ready to go. In the same way, a developer would

229
00:12:49,285 --> 00:12:52,507
debug their code to a point where they're confident with it to send it off to somebody else.

230
00:12:52,768 --> 00:12:55,069
And I'm the writer doing this instead of the developer doing it.

231
00:12:55,690 --> 00:13:00,192
So here's what worked well. It was fast authoring and easy editing even at a late stage.

232
00:13:00,753 --> 00:13:05,515
This was a game with a three-day story structure that I wrote in about three days. I just could

233
00:13:05,575 --> 00:13:11,899
go off in a corner of my computer, get in the zone, and just write. It functioned effectively

234
00:13:12,119 --> 00:13:18,282
as a story document, a text file that I could play, which was great. And of course, since it

235
00:13:18,442 --> 00:13:23,365
is just text, it's really easy for any sort of version tracking software to work well with this.

236
00:13:24,253 --> 00:13:25,113
But it wasn't perfect.

237
00:13:25,514 --> 00:13:26,774
The sandbox the Arran Spinner gave me

238
00:13:26,814 --> 00:13:28,535
wasn't quite as big as I would have liked.

239
00:13:28,975 --> 00:13:30,916
There was one point where I wanted to use an array

240
00:13:30,956 --> 00:13:31,977
and I emailed John saying,

241
00:13:32,277 --> 00:13:33,758
hey John, how we looking on arrays?

242
00:13:34,258 --> 00:13:35,579
And he wrote back and said, hey Ryan,

243
00:13:35,619 --> 00:13:37,000
how we looking on if statements?

244
00:13:37,120 --> 00:13:39,101
Which actually speaks to the power of the Arran Spinner

245
00:13:39,121 --> 00:13:41,602
because I could implement what I needed

246
00:13:41,782 --> 00:13:43,803
using that workaround of if statements.

247
00:13:43,823 --> 00:13:44,644
And I'll give you an example.

248
00:13:44,884 --> 00:13:47,685
Here's a shot of the tool at the beginning of the game.

249
00:13:48,206 --> 00:13:52,452
Well, there's a couple of characters who want to speak to you. There's Annex who's rich who says I'm waiting in line

250
00:13:52,472 --> 00:13:58,080
I want to talk to you. There is beef chief. I got to name my own characters who's also waiting in line

251
00:13:59,001 --> 00:14:02,106
There is Chomsky the dog who's saying I do have been waiting in line. It's my turn

252
00:14:03,482 --> 00:14:08,687
and NX offers to pay you to go first and you have to choose who goes first. And what I wanted to

253
00:14:08,747 --> 00:14:13,631
have was an array where you just kept track of who you've already spoken to, but I didn't actually

254
00:14:13,711 --> 00:14:18,796
need it. I could emulate that as you can see on this slide with just a series of if statements,

255
00:14:18,816 --> 00:14:23,500
a variable for each character keeping track of whether or not we spoke to them, and you built

256
00:14:23,540 --> 00:14:26,703
effectively the same structure out of a simple series of ifs and else.

257
00:14:27,902 --> 00:14:33,045
So lots of programming languages think in terms of domain-specific languages, so syntax

258
00:14:33,245 --> 00:14:38,529
and APIs that are good for describing a solution to a very limited problem domain.

259
00:14:39,029 --> 00:14:43,732
Yarnspinner is a domain-specific language for branching dialogue.

260
00:14:44,112 --> 00:14:49,335
This is really useful in many narrative games because the logic of a scene, so who says

261
00:14:49,375 --> 00:14:51,516
and does what, is the story of the game.

262
00:14:52,161 --> 00:14:56,304
And this leads us to a thing that we've been calling narrative greyboxing.

263
00:14:56,464 --> 00:15:01,688
So level designers are used to greyboxing their environments, blocking out their geometry

264
00:15:01,968 --> 00:15:05,090
with rough shapes to get an idea of the shape and flow of the environment,

265
00:15:05,350 --> 00:15:09,833
because you can figure out that environment before you commit to the production of expensive art.

266
00:15:10,914 --> 00:15:15,536
In lots of narrative games, the logic of a scene is the same thing as the scene's story,

267
00:15:15,596 --> 00:15:20,759
so control over the logic of a game is useful because it means that a writer can set up whatever

268
00:15:20,879 --> 00:15:26,541
small-scale mini-systems that they need without having to wait for a programmer to add support.

269
00:15:27,082 --> 00:15:28,322
And the inverse is also true.

270
00:15:28,342 --> 00:15:31,784
A programmer can anticipate a need for a system,

271
00:15:32,224 --> 00:15:34,726
build it, and then add in some temporary placeholder lines

272
00:15:34,766 --> 00:15:37,147
that a writer can come in and replace.

273
00:15:37,207 --> 00:15:39,068
So this screenshot is actually what the ending

274
00:15:39,088 --> 00:15:40,809
of Night in the Woods looked like initially.

275
00:15:41,129 --> 00:15:42,830
The ending was completely temped out

276
00:15:43,210 --> 00:15:44,851
and very, very easily replaced

277
00:15:45,511 --> 00:15:46,852
towards the very end of development.

278
00:15:47,652 --> 00:15:51,635
So this scene in Night in the Woods, the logical structure of it didn't actually change,

279
00:15:51,955 --> 00:15:57,660
but the content of the lines actually did, it got filled out. And so this kind of temping

280
00:15:57,740 --> 00:16:01,883
out can be done very very early on and you can fill in the rest of the lines quite late.

281
00:16:02,823 --> 00:16:06,046
John mentioned this idea of greyboxing narrative systems and that's actually something that

282
00:16:06,925 --> 00:16:09,386
fully organically happened during the development of I Feel Fine,

283
00:16:10,006 --> 00:16:12,867
I wanted to have these multiple endings that were chosen

284
00:16:12,927 --> 00:16:15,028
based on your reputation with different characters.

285
00:16:15,108 --> 00:16:17,708
So I just built a very simple reputation system

286
00:16:17,988 --> 00:16:21,269
using variables, keeping track of points for each character you've spoken to

287
00:16:21,629 --> 00:16:23,250
that would then unlock endings.

288
00:16:23,730 --> 00:16:27,771
And it was very simple, very easy, very natural for me

289
00:16:27,811 --> 00:16:30,212
to just build this as I decided I wanted it.

290
00:16:31,047 --> 00:16:34,952
That's the kind of system that normally you'd need to plan ahead for.

291
00:16:34,972 --> 00:16:40,980
This one, it's very rare for an entire system that affects the ending of the game to organically

292
00:16:41,040 --> 00:16:41,821
develop on its own.

293
00:16:41,981 --> 00:16:42,462
But we did it!

294
00:16:43,543 --> 00:16:43,863
We did it!

295
00:16:44,704 --> 00:16:51,633
And a few ways in which we designed this language to support this kind of workflow is

296
00:16:52,594 --> 00:16:56,439
not a huge amount of information is required to be carried through.

297
00:16:56,900 --> 00:17:00,905
Lines in the Jansmann are just strings and we send the entire string.

298
00:17:01,405 --> 00:17:05,588
Anything that does need to be user-facing, so for example a line code for localization,

299
00:17:05,968 --> 00:17:08,649
can just be encoded in a hashtag that's attached to the end of it.

300
00:17:09,090 --> 00:17:13,172
This is very easy to write, it's very easy to understand, and quite intuitive.

301
00:17:13,632 --> 00:17:17,694
It also allows us to do stuff like, again, in the woods, you can use emoticons

302
00:17:17,874 --> 00:17:22,517
to control facial expressions. So you can see that happening here in the scene right now.

303
00:17:23,368 --> 00:17:25,850
We also don't need to nail down ahead of time

304
00:17:25,950 --> 00:17:28,272
what commands can be sent to the game.

305
00:17:28,532 --> 00:17:29,852
They can be built as needed,

306
00:17:29,993 --> 00:17:31,994
case by case with a generic command syntax.

307
00:17:32,634 --> 00:17:34,695
The writer can script the game in their heads,

308
00:17:34,756 --> 00:17:35,976
working ahead of the developers,

309
00:17:36,497 --> 00:17:37,857
and anything that needs changing

310
00:17:37,917 --> 00:17:39,839
can be done and tested quite quickly.

311
00:17:40,579 --> 00:17:41,680
If the feature isn't available,

312
00:17:41,720 --> 00:17:42,520
you can just write around it.

313
00:17:43,221 --> 00:17:44,622
So the result is highly iterative

314
00:17:44,662 --> 00:17:45,762
narrative systems development,

315
00:17:45,782 --> 00:17:48,524
where the writer can go off and explore and iterate.

316
00:17:48,918 --> 00:17:52,639
and build systems until they've found the system that they want, that the story needs,

317
00:17:52,759 --> 00:17:55,939
and then they can lock it down and complete what they're trying to do.

318
00:17:57,200 --> 00:18:00,921
It also keeps developers from trying to solve interesting problems,

319
00:18:00,981 --> 00:18:04,761
which are a lot of fun and very cool and very fast to work on,

320
00:18:05,182 --> 00:18:07,562
but they're rarely immediately useful.

321
00:18:07,982 --> 00:18:10,843
Yeah, it insists that developers build the scaffolding for the game

322
00:18:11,263 --> 00:18:13,803
while letting the writers to sort of go off and explore it.

323
00:18:13,883 --> 00:18:16,604
It gives the writers powerful tools but still sandboxes them.

324
00:18:17,347 --> 00:18:20,308
And it also keeps the writers from becoming developers,

325
00:18:20,408 --> 00:18:22,428
which I imagine can be a danger.

326
00:18:23,108 --> 00:18:26,529
What it's less good at is data that really should be

327
00:18:26,629 --> 00:18:29,650
in a table, so just as it's kind of fiddly

328
00:18:29,690 --> 00:18:33,450
to store lots and lots of hard-coded data in C Sharp,

329
00:18:33,510 --> 00:18:37,291
it's fiddly to store non-linear data in Yarnspitter.

330
00:18:37,351 --> 00:18:39,971
This is the kind of thing that's better stored inside tables

331
00:18:40,091 --> 00:18:42,712
and when I feel fine and night in the woods,

332
00:18:42,772 --> 00:18:45,673
and I imagine most of the Yarnspitter game need to do this,

333
00:18:45,753 --> 00:18:47,053
it turns into a gigantic.

334
00:18:47,493 --> 00:18:50,094
huge if-else tree, which is a mess.

335
00:18:50,254 --> 00:18:52,235
That said, support for storylets

336
00:18:52,315 --> 00:18:53,916
and condition-based content selection

337
00:18:54,056 --> 00:18:56,377
is a feature that you could conceivably add to the language.

338
00:18:57,018 --> 00:18:58,798
So how do you get started doing this?

339
00:18:58,939 --> 00:19:01,080
Well, building a parser for a language

340
00:19:01,240 --> 00:19:03,461
is actually slightly easier than you may think,

341
00:19:03,661 --> 00:19:06,742
because really it's two separate independent problems.

342
00:19:07,082 --> 00:19:10,104
One is build a tool that reads a text document

343
00:19:10,264 --> 00:19:12,365
and converts it into a syntax tree.

344
00:19:13,105 --> 00:19:17,950
And then the second part is you walk that syntax tree, sending data to the game as you go,

345
00:19:18,090 --> 00:19:24,517
skipping over other parts of the tree based on game state. It's very, very easy to get too

346
00:19:24,557 --> 00:19:29,081
excited about this, like I just mentioned. So big thank you to my colleague Tim Nugent for

347
00:19:29,302 --> 00:19:33,125
hitting me with a rolled up newspaper every time I got too excited about language features.

348
00:19:33,886 --> 00:19:39,188
So we use a tool called Antler, which is a tool that lets us describe the grammar of the language,

349
00:19:39,749 --> 00:19:44,511
and then generates the source code to a parser for us. Then we feed that parser Yarnscript,

350
00:19:44,771 --> 00:19:50,194
we get an abstract syntax tree, and we work with that. Antler is very popular in the programming

351
00:19:50,234 --> 00:19:53,835
language development community. It's not essential, we just find it very useful. In fact,

352
00:19:53,855 --> 00:19:58,678
the very first version of Yarnspinner didn't use this at all. It used a handwritten parser

353
00:19:58,698 --> 00:20:00,939
that I wrote and gave me headaches and nightmares.

354
00:20:01,999 --> 00:20:03,801
But using a parser generator

355
00:20:05,042 --> 00:20:10,206
Means that it will take care of a lot of edge cases for you, which is quite quite handy

356
00:20:11,126 --> 00:20:14,549
As a tools developer you also don't need to solve every problem

357
00:20:14,829 --> 00:20:21,994
Certain questions are totally fine to just leave open and you can avoid building overly ornate systems by

358
00:20:22,115 --> 00:20:26,258
Punting on entire design questions. What data do we need per line?

359
00:20:26,538 --> 00:20:31,341
I don't care that you send the entire string you can attach whatever data you need to inside that line

360
00:20:31,655 --> 00:20:33,517
What data needs to be captured in an option?

361
00:20:33,857 --> 00:20:38,740
Don't care! You can attach any non-user facing data as a hashtag at the end of the line.

362
00:20:38,860 --> 00:20:39,401
It's a string.

363
00:20:39,621 --> 00:20:42,002
What signals do we need to be able to send to the game?

364
00:20:42,283 --> 00:20:44,644
I don't care! You can use commands,

365
00:20:44,724 --> 00:20:47,066
which are just basically strings that are never shown to the user,

366
00:20:47,386 --> 00:20:48,627
and it's up to the game to interpret them.

367
00:20:49,107 --> 00:20:53,909
So my advice for tools developers is don't try to build a full programming language.

368
00:20:54,029 --> 00:20:58,131
You are not trying to make a replacement for C sharp. You're adding logic to dialogue.

369
00:20:58,631 --> 00:21:02,832
Yarnspinner doesn't support half the features that are required for a systems programming language.

370
00:21:03,252 --> 00:21:06,414
It barely supports adding data. It doesn't support functions.

371
00:21:06,734 --> 00:21:08,954
It thinks only in terms of numbers, bools, and text.

372
00:21:09,635 --> 00:21:14,619
Don't try to solve the interesting language problems, solve the specific problems that

373
00:21:14,699 --> 00:21:19,864
your writers are facing. Your job as a tools developer is to build the scaffold and then stand

374
00:21:20,144 --> 00:21:25,068
aside. What it's great at is letting writers and developers focus on their core competencies,

375
00:21:25,128 --> 00:21:29,352
do what they're good at, without having one arm tied behind their back. It leads to easy

376
00:21:29,392 --> 00:21:33,756
and rapid prototyping, easy and rapid development, and easy and rapid testing.

377
00:21:34,485 --> 00:21:36,786
Because we're also working with the same kinds of tools

378
00:21:36,886 --> 00:21:39,807
that full programming languages and compilers work with,

379
00:21:40,127 --> 00:21:42,187
we also can explore some interesting new areas.

380
00:21:42,387 --> 00:21:45,428
So for example, we can do things like basic block analysis,

381
00:21:45,488 --> 00:21:47,649
control flow graph analysis, and all kinds of things

382
00:21:47,709 --> 00:21:50,209
to analyze the dialogue trees in a really complicated

383
00:21:50,329 --> 00:21:51,090
and interesting way.

384
00:21:51,590 --> 00:21:53,270
Yeah, it let us build a narrative in a few days,

385
00:21:53,330 --> 00:21:55,111
and most of that time was spent on writing,

386
00:21:55,151 --> 00:21:56,411
not on struggling with tools.

387
00:21:56,631 --> 00:21:58,371
And of course, once the narrative exists,

388
00:21:58,731 --> 00:22:01,392
then the engine can be enhanced, assets can be brought in,

389
00:22:01,452 --> 00:22:03,993
you can build everything around that scaffold that you built.

390
00:22:04,557 --> 00:22:08,119
And of course, once you've seen those assets, you can easily alter the narrative if you want to.

391
00:22:08,999 --> 00:22:10,761
So we're really, really excited by this approach.

392
00:22:10,881 --> 00:22:14,703
It's already being used in a lot of games, including the ones you can see on screen right now.

393
00:22:15,284 --> 00:22:20,207
And there's some huge potential for letting games be written almost as fast as stories are.

394
00:22:20,607 --> 00:22:26,111
And also, even more excitingly, we can onboard traditional writers into non-linear storytelling even faster.

395
00:22:26,131 --> 00:22:26,771
And that's great.

396
00:22:27,031 --> 00:22:29,413
Are we possibly overselling this?

397
00:22:29,733 --> 00:22:31,774
I don't think so. I think we've just solved all storytelling forever.

398
00:22:32,174 --> 00:22:35,355
Thank you all so much for watching. Hopefully you found this interesting,

399
00:22:35,395 --> 00:22:39,117
at the very least thought-provoking. We're looking forward to seeing where this technique

400
00:22:39,137 --> 00:22:43,659
goes in the future. I'm Displacer on Twitter and you can follow my studio at secretlab.games.

401
00:22:44,500 --> 00:22:48,481
And I'm RyanQNorth on Twitter and you can find me at ryannorth.ca.

402
00:22:49,462 --> 00:22:53,124
Don't forget to leave a rating. It really helps speakers like us come back to GDC

403
00:22:53,144 --> 00:22:55,865
and deliver great talks. And so with that, thanks again. Bye!

404
00:22:56,085 --> 00:22:56,305
Bye!

