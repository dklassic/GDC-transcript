1
00:00:03,265 --> 00:00:07,608
Hi everyone, welcome to Designing for AR, a post-mortem on the development of World.

2
00:00:08,688 --> 00:00:12,530
So before I get started, I want to introduce you to myself, what World is, and possibly

3
00:00:12,570 --> 00:00:15,072
what AR is for those who are unfamiliar.

4
00:00:16,753 --> 00:00:22,156
So my name is Vu, I'm a software engineer at Phenomena, I work on World and Wattam.

5
00:00:24,097 --> 00:00:27,779
Before that I was a software engineer at Maxis for three years, I worked on The Sim City

6
00:00:27,819 --> 00:00:32,061
that came out in 2013, and a bunch of other gameplay prototypes that you probably won't

7
00:00:32,081 --> 00:00:32,562
see the light of day.

8
00:00:34,706 --> 00:00:38,808
Before that I worked on an AR game called Nerd Herder where you try to get office workers

9
00:00:38,888 --> 00:00:44,250
back into their cubicles. You can kind of see it there. And even before that I worked on a

10
00:00:44,490 --> 00:00:50,513
Rock'em Sock'em AR game that was shown at the release of the V4ia SDK back in 2010.

11
00:00:53,193 --> 00:00:57,557
Let's clarify some things about this talk. It's not going to be a technical talk where I'm

12
00:00:57,577 --> 00:01:01,200
going to show code or anything like that. It's going to be more about the lessons that we

13
00:01:01,220 --> 00:01:09,988
learned and the techniques that worked for us in the development world. So what is

14
00:01:10,048 --> 00:01:13,351
augmented reality? I'm sure a lot of you guys know, otherwise you wouldn't be here, but I'm

15
00:01:13,371 --> 00:01:15,153
going to clarify just for those that might not.

16
00:01:18,364 --> 00:01:22,686
In general, I like to think that augmented reality is like the layering of virtual content

17
00:01:22,807 --> 00:01:27,349
onto the real world versus VR where it's more like immersing yourself into another world,

18
00:01:27,409 --> 00:01:33,413
taking you out of this reality. Some of the examples of AR that you might have used in

19
00:01:33,733 --> 00:01:39,577
your current day-to-day could be like Pokemon Go or Snapchat lenses or the line of

20
00:01:39,597 --> 00:01:45,861
scrimmage visualization in football. Just probably one of the most common versions. So

21
00:01:45,881 --> 00:01:46,181
what is world?

22
00:01:47,579 --> 00:01:52,062
World is a whimsical AR game designed by Kira Takahashi. He's well known for games like

23
00:01:52,082 --> 00:01:57,685
Katamari Damacy and Nobby Nobby Boy. It took about three to four months to develop and a

24
00:01:57,725 --> 00:02:03,428
small team of about five people, an animator, a designer, producer and audio designer and

25
00:02:03,848 --> 00:02:11,853
engineer myself. World is built on Unity using Tango as the augmented reality platform. Here's

26
00:02:11,893 --> 00:02:16,235
a video of World to get you guys to have a better understanding of what it is.

27
00:02:26,280 --> 00:02:27,680
Hello, I'm Takahashi.

28
00:02:28,100 --> 00:02:30,941
Today, I'll be showing you an AR game called World.

29
00:02:31,081 --> 00:02:34,442
At first glance, it looks like nothing much,

30
00:02:34,462 --> 00:02:36,783
but if you play through World and Mob2Pro,

31
00:02:36,863 --> 00:02:38,944
you'll see that this world is spread out.

32
00:02:38,964 --> 00:02:43,685
This is the protagonist of the game.

33
00:02:43,725 --> 00:02:46,146
And to teach this girl the shape of the air,

34
00:02:46,186 --> 00:02:47,286
I'll be mapping it.

35
00:02:47,306 --> 00:02:48,467
The wall with the ? mark is green.

36
00:02:57,364 --> 00:03:00,406
If the game becomes a rain pattern, mapping is success.

37
00:03:00,426 --> 00:03:03,449
After mapping, the game starts.

38
00:03:03,509 --> 00:03:05,290
Place the eyes on the table.

39
00:03:05,831 --> 00:03:10,555
And let the rain fall from the clouds hanging in the sky.

40
00:03:10,615 --> 00:03:12,196
Let the flowers bloom.

41
00:03:20,638 --> 00:03:26,053
When the flowers bloom, a new item is obtained, and the next development begins from that item.

42
00:03:43,036 --> 00:03:46,759
Once you reach a certain goal, the sandbox mode will be unlocked.

43
00:03:46,939 --> 00:03:49,801
It's possible to do anything with this game.

44
00:03:50,001 --> 00:03:50,541
It's crazy.

45
00:04:20,963 --> 00:04:24,046
I hope that gave you an idea of how weird and silly this game

46
00:04:24,066 --> 00:04:36,637
is. Okay. So let's move on to what is Tango. What is Tango?

47
00:04:47,247 --> 00:04:50,609
So Tangimo is Google's augmented reality platform that helps you

48
00:04:50,829 --> 00:04:54,552
do AR without the use of markers or GPS or anything like that.

49
00:04:54,572 --> 00:04:58,954
It uses an infrared technology similar to like Kinect or

50
00:04:59,034 --> 00:05:03,337
HoloLens to scan the environment and let you do what you see

51
00:05:03,377 --> 00:05:07,800
here, kind of imagining surfaces rather than discrete images.

52
00:05:11,736 --> 00:05:15,979
There's two devices that support Tango right now. The Tango dev kit is one of them and the

53
00:05:16,079 --> 00:05:20,843
Fab 2 Pro by Lenovo that just came out this week for consumer purchase. They're both

54
00:05:21,203 --> 00:05:27,608
Android-based devices. You hold them in your hands. They're basically normal phones. That

55
00:05:27,648 --> 00:05:32,452
means you have a touch screen. So that gives us interactions unlike HoloLens or Magic Leap

56
00:05:32,472 --> 00:05:35,374
where you have to do gestures or have some kind of controller.

57
00:05:38,136 --> 00:05:41,777
When you start designing for Tango in general and AR in general, there are some

58
00:05:41,797 --> 00:05:46,619
constraints you should think about, such as the player having full control of the

59
00:05:46,639 --> 00:05:51,460
camera. A lot of people when they get it, they'll just stand there and look at the

60
00:05:51,520 --> 00:05:54,581
floor, for example, because they don't know what to do. They've never experienced it

61
00:05:54,601 --> 00:05:54,861
before.

62
00:05:56,475 --> 00:06:00,678
So unlike normal games where they have, the developer has

63
00:06:00,718 --> 00:06:04,101
control of like the ability to show cut scenes or animations,

64
00:06:05,382 --> 00:06:08,544
you can't really. You have to introduce players to look at

65
00:06:08,584 --> 00:06:12,227
things and find ways to get them to pay attention to what you

66
00:06:12,267 --> 00:06:15,130
really want them to pay attention to. I'm going to guide

67
00:06:15,170 --> 00:06:18,392
you guys through some of the techniques that we used and that

68
00:06:18,432 --> 00:06:18,873
worked for us.

69
00:06:20,833 --> 00:06:25,815
The next thing that you should consider is the environment itself. So unlike traditional VR

70
00:06:25,855 --> 00:06:31,296
games, traditional games and VR games, the content isn't completely authored. To make a

71
00:06:31,316 --> 00:06:37,277
really good AR game, you want to use the environment around you directly. Tango is

72
00:06:37,317 --> 00:06:41,898
capable of mapping everything, including the ceilings, the walls, chairs, tables, whatever.

73
00:06:43,678 --> 00:06:46,959
So you don't have any control. Someone could play in a messy room like that.

74
00:06:48,958 --> 00:06:53,731
I'll be talking about some visualizations and ways to use the environment to give a

75
00:06:53,771 --> 00:06:55,495
more meaningful AR experience.

76
00:06:58,038 --> 00:07:00,499
In addition to camera controls and environments, you have to

77
00:07:00,539 --> 00:07:03,600
deal with the regular limitations of Android devices

78
00:07:03,720 --> 00:07:07,381
and mobile devices today. That means worrying about

79
00:07:08,441 --> 00:07:11,162
performance from physics, straw calls and things like that. But

80
00:07:11,362 --> 00:07:14,643
also thinking about how the tracking algorithms and

81
00:07:15,123 --> 00:07:17,684
scanning algorithms, meshing algorithms affect the total

82
00:07:17,724 --> 00:07:18,844
performance of your application.

83
00:07:19,980 --> 00:07:23,882
You have to think about heat and battery also since this is a handheld device. This is

84
00:07:23,902 --> 00:07:28,484
someone's daily phone potentially. So if you drain their battery in like five seconds,

85
00:07:28,644 --> 00:07:34,326
they're not going to play your app ever again. You also have to think about comfort. These

86
00:07:34,707 --> 00:07:40,349
current devices are pretty big. Imagine a phablet. That's bigger than an iPhone 7 plus

87
00:07:40,829 --> 00:07:48,133
today. And they're heavy. So let's first talk about player attention. So the first thing

88
00:07:49,235 --> 00:07:51,957
In world there's a story mode that we made that players have

89
00:07:51,977 --> 00:07:54,479
to do specific actions and look at specific things or go to

90
00:07:54,519 --> 00:07:57,982
specific places to advance through the story. So I'm going

91
00:07:58,002 --> 00:08:01,385
to give you guys some of the techniques that we use. I break

92
00:08:01,405 --> 00:08:04,968
them up into two categories. One is direct techniques or methods

93
00:08:05,208 --> 00:08:07,350
where they're independent of where the player is looking. The

94
00:08:07,430 --> 00:08:11,333
other is indirect techniques where it kind of helps guide the

95
00:08:11,373 --> 00:08:12,855
player's view to what you want them to see.

96
00:08:14,506 --> 00:08:17,927
The first technique is just displaying UI on the screen.

97
00:08:18,067 --> 00:08:20,007
Since we have a screen and people are already used to

98
00:08:20,027 --> 00:08:25,028
looking at it, you have that ability to just show flat UI.

99
00:08:27,689 --> 00:08:31,750
We try to make it more effective by showing animations

100
00:08:31,970 --> 00:08:33,890
as to grab players' attention.

101
00:08:34,750 --> 00:08:37,091
In this case, we have the menu person, which is actually like

102
00:08:37,131 --> 00:08:38,671
a character that talks to you.

103
00:08:38,691 --> 00:08:42,192
It kind of catches people off guard, and so people pay

104
00:08:42,232 --> 00:08:42,872
attention to it more.

105
00:08:44,411 --> 00:08:49,577
The second method we use is attaching objects to the camera. So here we have our character

106
00:08:49,617 --> 00:08:53,903
called person. He's attached to the camera and giving instructions to teach people how to

107
00:08:53,963 --> 00:08:58,388
scan a room for the first time. And we found this to be much more engaging than just like

108
00:08:58,429 --> 00:09:03,034
showing a text prompt. People like really respond to the character's requests.

109
00:09:04,709 --> 00:09:10,091
The next method is camera tracking. So we have objects that fly around and try to stay in

110
00:09:10,131 --> 00:09:14,593
front of the camera within view. In this case, we have a rocket character that once you

111
00:09:14,633 --> 00:09:21,016
unlock him, he flies to the camera and delivers you some meaningful dialogue about what to do

112
00:09:21,076 --> 00:09:25,998
next in the story. In general, these methods are used to convey really important

113
00:09:26,018 --> 00:09:31,460
information about how to even use Tango and devices and also advance the storyline.

114
00:09:33,393 --> 00:09:35,014
The next set of methods are indirect methods.

115
00:09:35,094 --> 00:09:38,095
The first one we use is teleportation into view,

116
00:09:38,795 --> 00:09:41,096
where as the player is doing an action,

117
00:09:41,236 --> 00:09:45,177
we teleport our main character next to that action

118
00:09:45,537 --> 00:09:48,278
within view so that they get the proper feedback they need.

119
00:09:50,719 --> 00:09:51,339
Okay.

120
00:09:52,677 --> 00:09:57,120
Next we also use the movement of characters to guide players. We found in our play test that

121
00:09:57,160 --> 00:10:02,724
people really like to look at this little guy and just follow him everywhere, like watch him

122
00:10:02,804 --> 00:10:07,767
climb walls and things like that. So we use this advantage to spawn, meaning like the next

123
00:10:07,807 --> 00:10:15,292
steps nearby. This allowed people to kind of organically discover their space instead of just

124
00:10:15,612 --> 00:10:20,715
being told exactly where to go. Okay. Finally we have...

125
00:10:21,854 --> 00:10:27,996
VFX trails. And this is kind of interesting because since the viewport is so small you have to

126
00:10:28,396 --> 00:10:32,417
guide the player to look at other things within that viewport. So they could be looking at this

127
00:10:32,437 --> 00:10:37,699
flower, for example, and do an action. In this case, we have the cloud that they've placed

128
00:10:37,719 --> 00:10:42,101
earlier produce these raindrops, which actually causes them to look up and remember that they

129
00:10:42,121 --> 00:10:48,382
put the cloud there in the first place. So here's an example of all the techniques in

130
00:10:48,443 --> 00:10:51,263
combination. So here's an example of all the techniques in combination. So here's an

131
00:10:52,809 --> 00:10:59,493
At first, I'll let this repeat. The player is guided to this rocket by the character walking

132
00:10:59,533 --> 00:11:04,036
to it. When he uses the rocket, it teleports the character so that the action is really

133
00:11:04,076 --> 00:11:07,639
meaningful and they know something is about to happen. And then we use a VFX trail to help

134
00:11:07,679 --> 00:11:13,102
people see the results of their actions and then move on to the next steps.

135
00:11:17,816 --> 00:11:22,740
In addition to this we use a visual metaphor to show points of interest. Like these

136
00:11:23,661 --> 00:11:27,765
question mark textures appear on anything that has interesting interactions that they haven't

137
00:11:27,925 --> 00:11:33,050
used before or forgot about to help remind them that these are interesting things that they

138
00:11:33,090 --> 00:11:34,031
could check out again.

139
00:11:38,137 --> 00:11:42,378
So now that people are looking at the things you want them to look at, we have to teach them

140
00:11:42,438 --> 00:11:48,481
how to interact with those objects in real, in 3D space. The first thing we have is tapping.

141
00:11:48,521 --> 00:11:51,782
Since we have a touch screen, tapping is a natural interaction that people already

142
00:11:51,802 --> 00:11:56,704
understand. So a lot of objects have unique behaviors such as breaking a rock to reveal a

143
00:11:56,744 --> 00:12:02,907
new item. Or maybe they'll play a sound or let you nudge them around the physics in the world.

144
00:12:06,000 --> 00:12:08,321
We also have touch and drag which lets you move objects

145
00:12:08,361 --> 00:12:12,363
around really intuitively. You can just touch it and drag it.

146
00:12:12,383 --> 00:12:16,465
It's this immediate response that's really effective to get

147
00:12:16,525 --> 00:12:19,006
people to see the virtual space that you've created for them.

148
00:12:23,288 --> 00:12:24,929
Okay. And then we also have, you know, we have a lot of

149
00:12:25,953 --> 00:12:31,156
These magic hands that we tried early on that kind of act as indirect placement mechanisms. So

150
00:12:31,196 --> 00:12:35,599
you grab something by tapping on the hand and then you tap the hand again to place it down

151
00:12:35,619 --> 00:12:40,522
in the world. We decided not to use this in the end because it was kind of confusing for people

152
00:12:40,562 --> 00:12:44,865
that are used to touch and drag. They're not used to controller based games and things like

153
00:12:44,885 --> 00:12:51,128
that. We also have these grow and shrink rays. We wanted to explore like, you know,

154
00:12:52,002 --> 00:12:57,007
different mechanisms for interacting with objects. These rays let you grow and shrink

155
00:12:57,027 --> 00:13:05,934
things arbitrarily. It's super fun to do, just seeing a giant pyramid in your room. And then we

156
00:13:05,974 --> 00:13:12,140
also have this context menu that lets people easily discover new abilities and items and

157
00:13:12,520 --> 00:13:17,404
helped us design items so that you can have super unique behaviors and multiple behaviors.

158
00:13:20,733 --> 00:13:25,581
Okay. So let's look at some environmental interactions. When you're doing an AR game, you

159
00:13:25,601 --> 00:13:30,788
don't want the environment to just be static. You don't want them to just float a Pokemon in

160
00:13:30,808 --> 00:13:33,151
space and have them not interact with the world in any way.

161
00:13:35,697 --> 00:13:41,638
So, and also you want them to show like you're using the space in a meaningful way. So one of

162
00:13:41,658 --> 00:13:46,259
the things we did is programmatically spawn objects into the world. One of the techniques we

163
00:13:46,359 --> 00:13:51,980
use is relative placement to the camera. A lot of, since we know where the camera is and what

164
00:13:52,000 --> 00:13:56,141
you're looking at and we also have a good idea that you're looking at the person or something

165
00:13:56,461 --> 00:14:02,242
nearby, we can spawn another object using a ray cast from the camera into the nearby location.

166
00:14:02,282 --> 00:14:04,982
This kind of ensures that the player is able to see this object.

167
00:14:08,893 --> 00:14:10,134
This image did not load.

168
00:14:12,075 --> 00:14:15,696
So OK, hold on.

169
00:14:17,297 --> 00:14:18,638
I'm going to restart the.

170
00:14:19,518 --> 00:14:22,359
OK, so this is using relative placement.

171
00:14:22,419 --> 00:14:24,360
So instead of using a ray cast from the camera, we're using

172
00:14:24,380 --> 00:14:27,141
a ray cast from an object that the player recently placed

173
00:14:27,181 --> 00:14:27,701
into the world.

174
00:14:28,342 --> 00:14:30,903
We know that this is a valid location, since

175
00:14:31,023 --> 00:14:31,883
they just did it.

176
00:14:32,083 --> 00:14:35,265
And the only way to actively play something is to put it on

177
00:14:35,305 --> 00:14:36,005
a valid surface.

178
00:14:39,368 --> 00:14:40,088
Where's my mouse?

179
00:14:42,368 --> 00:14:44,329
Okay, next we have placement smoothing.

180
00:14:44,849 --> 00:14:47,470
So normally if you just scan an environment,

181
00:14:47,490 --> 00:14:50,250
it's super bumpy, super noisy in many cases.

182
00:14:50,750 --> 00:14:52,291
If you just only use one recast,

183
00:14:52,311 --> 00:14:54,031
you get this kind of jittered movement

184
00:14:54,051 --> 00:14:56,352
where the object's orienting all over the place.

185
00:14:56,452 --> 00:15:00,232
So here on the bottom, we're using a multi-sampling technique

186
00:15:00,292 --> 00:15:01,873
where we're casting a ray from the center

187
00:15:02,013 --> 00:15:04,273
and also like four rays at the perimeter

188
00:15:04,713 --> 00:15:07,274
to average out a better position for the objects.

189
00:15:10,297 --> 00:15:15,280
Okay. We also wanted to let the player feel like they're embodied in the space. Here we've

190
00:15:15,340 --> 00:15:19,643
attached a collider to the camera allowing players to push away physical objects such as

191
00:15:19,663 --> 00:15:26,749
the cloud. This also illustrates presence by having the house open up as you get closer and

192
00:15:26,809 --> 00:15:29,130
all the flowers actually turn to look at you wherever you are.

193
00:15:33,017 --> 00:15:37,999
So we also wanted the player to feel like it's really easy to hold the game, hold the device

194
00:15:38,039 --> 00:15:43,081
and play the game. So one of the things we wanted to do was make sure that any orientation

195
00:15:43,121 --> 00:15:48,984
worked. So you could play it in portrait or landscape. And beyond that, we also wanted to

196
00:15:49,044 --> 00:15:54,767
teach players how to actually interact with AR in general and how to interact with our game.

197
00:15:55,943 --> 00:16:01,007
At first we had all the interactions available with simple text prompts to show what did

198
00:16:01,087 --> 00:16:01,267
what.

199
00:16:01,727 --> 00:16:04,509
This was super confusing for people and also paralyzing.

200
00:16:04,549 --> 00:16:07,231
They just didn't know what to do because there's so much.

201
00:16:09,253 --> 00:16:10,874
So instead we made a staggered tutorial.

202
00:16:10,894 --> 00:16:14,297
And I'm going to walk briefly through what we did.

203
00:16:14,317 --> 00:16:19,281
Why isn't it loading?

204
00:16:36,578 --> 00:16:38,800
I'm going to open up a different slide show.

205
00:16:56,482 --> 00:16:56,762
Okay.

206
00:17:11,275 --> 00:17:15,439
So here we introduce the player to room scanning. We use a

207
00:17:16,099 --> 00:17:18,421
texture that shows question marks to kind of show where

208
00:17:18,441 --> 00:17:21,744
they haven't been and a grid to show where they have been and

209
00:17:21,784 --> 00:17:24,566
scanned. This is super effective because people really like to

210
00:17:24,646 --> 00:17:27,549
try to get rid of all of the question marks. We also use

211
00:17:27,589 --> 00:17:30,531
this percentage to give an idea of like you've scanned enough

212
00:17:30,591 --> 00:17:31,452
so you're ready to play.

213
00:17:33,190 --> 00:17:36,751
In addition to this, we also did a first time user experience for people that have never

214
00:17:37,191 --> 00:17:40,453
tried AR and this is the first time they've opened the app where a person comes out and

215
00:17:40,473 --> 00:17:50,016
talks to you. I believe I showed an image earlier. Next we teach object placement. So we

216
00:17:50,056 --> 00:17:55,038
intentionally give the player only one object at the bottom of their menu and show a drag

217
00:17:55,078 --> 00:17:58,840
indicator to help them understand that they can touch and drag this and put it in their

218
00:17:58,880 --> 00:18:02,922
world. When they do it, we immediately instantiate it and it follows their finger around.

219
00:18:03,974 --> 00:18:13,636
You can see here. Next we also teach players that it's safe and okay to move around. So we

220
00:18:14,896 --> 00:18:18,597
first try to get the player to move by just showing a cute animation of the character

221
00:18:18,717 --> 00:18:22,558
popping out and enticing you to come closer. But a lot of people don't move. They're totally

222
00:18:22,578 --> 00:18:28,099
paralyzed. They don't know that they can move for some reason. So we show the move closer

223
00:18:28,599 --> 00:18:31,040
pop up and that tends to always get them to move.

224
00:18:32,789 --> 00:18:38,453
Next we show tapping as a common interaction. This unlocks their first object which is the

225
00:18:38,493 --> 00:18:42,635
cloud and then we teach them that it's okay to drag things to any surface. So part of the

226
00:18:42,675 --> 00:18:47,458
tutorial is we have them drag the cloud to the ceiling and this really opens up their world to

227
00:18:47,619 --> 00:18:48,759
more than just playing on the floor.

228
00:18:55,523 --> 00:18:59,566
And then at that point they have almost all they need to know except the context menu

229
00:18:59,606 --> 00:19:05,310
where we teach them to use it to grow the sprout. So they tap the sprout, press the rain icon,

230
00:19:05,410 --> 00:19:11,835
and then see for the first time particles raining on the sprout. And it's a really nice moment.

231
00:19:14,878 --> 00:19:22,163
Okay. So... I'm running out of time, but I'm almost there.

232
00:19:26,097 --> 00:19:31,859
Okay. So there's, we wanted a really flexible game play. Tango is kind of iffy sometimes when

233
00:19:31,879 --> 00:19:36,060
you're scanning. It can be really noisy. It might miss areas and make holes in the mesh.

234
00:19:36,941 --> 00:19:43,603
And then objects can be lost all the time. So we wanted super flexible and easy to approach

235
00:19:43,643 --> 00:19:47,064
game play. So first there's no loose condition. There's no wrong way to play. You can place

236
00:19:47,144 --> 00:19:50,925
anything anywhere. Next is...

237
00:19:52,260 --> 00:19:54,542
Auto saving, so if you accidentally close your app or

238
00:19:54,582 --> 00:19:56,824
something like that, we do an auto save so you can easily

239
00:19:56,884 --> 00:20:02,208
recover. Then object recovery, so we have a mechanism for say

240
00:20:02,228 --> 00:20:05,511
if you lost an object behind a wall somehow, you can easily

241
00:20:05,551 --> 00:20:07,833
bring it back in front of you and then place it again in the

242
00:20:07,853 --> 00:20:10,995
world. And then we have a sandbox mode that's completely

243
00:20:11,055 --> 00:20:14,558
free and lets people explore AR for whatever they want to do.

244
00:20:16,299 --> 00:20:19,802
Virtual spaces, so this is early rendering of our space. We

245
00:20:19,822 --> 00:20:21,724
wanted to see if we could do something.

246
00:20:22,305 --> 00:20:26,288
where we generated a virtual land. This really destroys the

247
00:20:26,328 --> 00:20:31,433
effect of AR. This is much more VR. So here's the same image

248
00:20:31,533 --> 00:20:36,577
with our current technique. We use a triplanar texture shader

249
00:20:37,158 --> 00:20:39,900
and so we shade different materials based on the surface

250
00:20:39,981 --> 00:20:42,983
of the mesh. Here we

251
00:20:43,634 --> 00:20:48,258
During game play we only render a small radius around your cursor and around the player so

252
00:20:48,278 --> 00:20:53,823
that it's not so noisy when you play. We're also dynamically continuously meshing so you can

253
00:20:53,863 --> 00:21:00,088
actually expand your play space as you play. We also experimented with some subtraction

254
00:21:00,128 --> 00:21:04,072
techniques. So here you can see this hole is actually looks like it's cutting into the

255
00:21:04,092 --> 00:21:08,355
world. And here's a more extreme example where we have this huge cavernous space in the

256
00:21:08,376 --> 00:21:08,656
ceiling.

257
00:21:12,407 --> 00:21:18,213
Next we also experimented with tinting the image itself to give this global lighting change

258
00:21:18,293 --> 00:21:24,198
effect which is really surprising to a lot of people. And further enhance the feel of the

259
00:21:24,258 --> 00:21:31,605
world. We make sure the 3D cursor orients properly and also when you tap it shows an effect

260
00:21:31,685 --> 00:21:35,728
where it needs to be. Do you want to take a picture?

261
00:21:40,585 --> 00:21:43,367
And also, using the visual aesthetic that Kata designed,

262
00:21:43,407 --> 00:21:44,607
it's very simple and stylized,

263
00:21:44,707 --> 00:21:47,449
so it's really easy to accept this unrealistic movement

264
00:21:47,489 --> 00:21:49,630
of this character climbing walls

265
00:21:49,690 --> 00:21:50,971
and just going up surfaces.

266
00:21:54,153 --> 00:21:55,994
We also tried to do a lot of physicality

267
00:21:56,134 --> 00:21:59,175
to really drive in the fact that this is in your real world.

268
00:21:59,215 --> 00:22:01,677
So here we have a cloud on a spring that reacts

269
00:22:01,957 --> 00:22:03,898
as if you expect it, the same way you expect it to.

270
00:22:05,179 --> 00:22:07,560
And we have some basic buoyancy simulation

271
00:22:07,580 --> 00:22:08,761
to further enhance this feel.

272
00:22:12,204 --> 00:22:15,345
One thing we discovered pretty late was thinking about object

273
00:22:15,385 --> 00:22:18,786
permanence. So in an AR game, you kind of want things to

274
00:22:18,826 --> 00:22:21,887
include virtual objects to make them feel more like they're

275
00:22:21,927 --> 00:22:24,848
actually in the space. But this is adverse to gameplay because

276
00:22:24,888 --> 00:22:27,568
players will lose the objects they place. They forget where

277
00:22:27,588 --> 00:22:30,829
they put it. So we did this silhouette rendering to help

278
00:22:30,869 --> 00:22:34,130
them find things. All right.

279
00:22:34,766 --> 00:22:37,688
So one of the technical limitations of Tango was saving

280
00:22:37,728 --> 00:22:40,571
and loading. They wanted us to use their area description file

281
00:22:40,591 --> 00:22:45,094
to save an area but instead it didn't really give much feedback

282
00:22:45,114 --> 00:22:48,096
that it was working and when it did work it just happened or

283
00:22:48,136 --> 00:22:50,518
not. There's no percentage or anything like that. So we came

284
00:22:50,558 --> 00:22:53,881
up with this technique where we take an image of the place that

285
00:22:53,901 --> 00:22:57,824
you're playing and then we do an edge detection algorithm to let

286
00:22:57,844 --> 00:23:01,287
the player self-align their world back in place. And this was

287
00:23:01,327 --> 00:23:03,969
actually really effective and people found it to be kind of

288
00:23:04,009 --> 00:23:04,149
fun.

289
00:23:07,997 --> 00:23:13,140
So quickly go over some optimization techniques for just mobile and Unity in general.

290
00:23:14,120 --> 00:23:16,441
So make sure you're doing pretty low poly.

291
00:23:16,461 --> 00:23:21,304
This has just the same limitations of any 3D game on mobile.

292
00:23:22,024 --> 00:23:24,645
Low poly share shaders and materials.

293
00:23:25,525 --> 00:23:28,467
Also try to batch objects to reduce rendering.

294
00:23:33,712 --> 00:23:39,115
And also, the newer devices have extremely high resolution, so we're actually rendering the

295
00:23:39,135 --> 00:23:46,598
game in a much smaller resolution and upscaling it to gain a lot of performance. So in Unity, we

296
00:23:46,658 --> 00:23:52,181
had issues with our load times. It used to take like 12, 10 seconds. And we discovered that if

297
00:23:52,241 --> 00:23:55,322
you set your audio to asynchronously load, it's much, much faster.

298
00:23:56,620 --> 00:23:59,723
You can also crunch textures to reduce your APK size.

299
00:24:01,124 --> 00:24:01,905
This really helped us.

300
00:24:02,766 --> 00:24:07,370
And then Atlas sprites to get tons of draw callback, like a lot of games might not do

301
00:24:07,410 --> 00:24:10,473
this for, because it's not completely obvious and automatic.

302
00:24:11,954 --> 00:24:13,095
And also use physics layers.

303
00:24:13,215 --> 00:24:17,920
These are, these will help you filter out the hits you want and also improve performance

304
00:24:17,960 --> 00:24:18,620
significantly.

305
00:24:20,320 --> 00:24:26,362
Okay. One thing in Unity, you can also modify it really well to kind of simulate real world

306
00:24:26,462 --> 00:24:32,504
scanning, different orientations and we even added like a debug console that lets you change

307
00:24:32,544 --> 00:24:38,026
languages and clear meshes and things like that. It might be useful for you in iteration time

308
00:24:38,046 --> 00:24:43,488
and things like that. So you basically can play the entire game in the editor.

309
00:24:45,396 --> 00:24:47,078
And also, don't forget about localization.

310
00:24:47,118 --> 00:24:49,420
This is something we kind of left to the end,

311
00:24:49,460 --> 00:24:52,122
but luckily we found a really good package on Asset Store

312
00:24:52,963 --> 00:24:53,804
to help us with this.

313
00:24:53,824 --> 00:24:57,747
All right.

314
00:24:58,228 --> 00:24:59,349
So some of the final takeaways.

315
00:24:59,509 --> 00:25:01,471
Just remember, be aware of the player's presence

316
00:25:01,931 --> 00:25:03,833
and what they're looking at, and the techniques

317
00:25:03,853 --> 00:25:07,376
that I just talked about to guide them to see what you

318
00:25:07,416 --> 00:25:07,936
want them to see.

319
00:25:11,087 --> 00:25:14,308
And then also be very adaptive to the environment. You're not going to know where your

320
00:25:14,328 --> 00:25:18,811
player is going to play. They could be in a bathroom, they could be in a plane. And whatever

321
00:25:18,851 --> 00:25:27,856
you're doing needs to work anywhere basically. And also remember to test. You don't know

322
00:25:27,896 --> 00:25:31,998
what's working until you give it to someone that's brand new to this technology and have

323
00:25:32,038 --> 00:25:36,020
never played your game before. You're always so close to it that you understand it

324
00:25:36,060 --> 00:25:37,761
intuitively but other people will not.

325
00:25:39,848 --> 00:25:41,529
And that's it. Do you guys have any questions?

326
00:25:42,970 --> 00:25:47,974
APPLAUSE

327
00:25:53,798 --> 00:25:58,642
The first slide? Okay. Oops, what?

328
00:26:11,073 --> 00:26:36,882
Oh no, I have to go all the way. The unity one or the mobile one? Okay. So I'm going to

329
00:26:43,405 --> 00:26:50,771
So Atlas Sprites is like combining all your 2D textures into one large texture to make it so it

330
00:26:50,811 --> 00:26:57,677
can do basically all your UI rendering in one draw call. Yes?

331
00:27:14,526 --> 00:27:19,929
So it's not super precise, but since the game is so adaptable

332
00:27:20,549 --> 00:27:24,792
and we do a rescan anyways, the objects usually landed close

333
00:27:24,832 --> 00:27:26,593
to where you originally put them.

334
00:27:27,273 --> 00:27:29,875
And so because of our game's design, it was OK.

335
00:27:29,895 --> 00:27:33,937
But it also allowed you to just place things arbitrarily.

336
00:27:33,997 --> 00:27:35,998
So you could go load in a different room if you wanted

337
00:27:36,038 --> 00:27:40,981
to. Yes?

338
00:27:41,301 --> 00:27:42,082
Yeah, I have a question.

339
00:27:42,122 --> 00:27:44,023
When you are developing in Unity.

340
00:27:45,064 --> 00:27:50,027
Do you need to have a webcam and scan every time or do you have a pre-generated?

341
00:27:50,587 --> 00:27:56,792
So what we did was create a dynamic mesh that was procedurally generated within the editor

342
00:27:57,112 --> 00:27:59,774
and so you could walk around and do things within the editor.

343
00:27:59,814 --> 00:28:03,537
So we simulated a real room instead of using a webcam or anything like that.

344
00:28:03,557 --> 00:28:05,978
This isn't like Vuforia where that would work.

345
00:28:06,839 --> 00:28:12,303
This uses different technology that emits infrared rays to scan the room.

346
00:28:13,306 --> 00:28:16,148
Yeah, well, I mean, so you need to have something pre-generated.

347
00:28:16,208 --> 00:28:18,129
And how do you do that in Unity?

348
00:28:18,169 --> 00:28:20,090
Is part of your game, or?

349
00:28:20,891 --> 00:28:21,751
We did it procedurally.

350
00:28:21,771 --> 00:28:23,332
But you could pull in a different model

351
00:28:23,372 --> 00:28:25,594
and have that be on, say, a different layer or something

352
00:28:25,614 --> 00:28:25,954
like that.

353
00:28:26,374 --> 00:28:29,076
We're not using exactly the tech when we're doing it in Unity.

354
00:28:29,156 --> 00:28:31,958
We're simulating an approximation.

355
00:28:33,739 --> 00:28:33,979
Yeah.

356
00:28:34,239 --> 00:28:37,681
My final question is, when you load the scene,

357
00:28:37,741 --> 00:28:39,102
do you have to be on the same room?

358
00:28:39,443 --> 00:28:42,805
Or what happens if you are in a very, very different room?

359
00:28:43,387 --> 00:28:46,508
So like I said, since we're using not the area description

360
00:28:46,548 --> 00:28:50,110
file, you can just arbitrary load anywhere. It won't align

361
00:28:50,170 --> 00:28:53,072
perfectly, but it will let you have those objects again. No

362
00:28:55,333 --> 00:29:07,280
problem. When you load into a new scene, do you follow the

363
00:29:07,340 --> 00:29:10,242
physics of the room so that things will fall onto the ground

364
00:29:10,262 --> 00:29:10,542
right.

365
00:29:10,962 --> 00:29:11,843
Yeah, so...

366
00:29:14,042 --> 00:29:17,544
I'm not sure if this picture really showed it, but if you did have clouds and things, these

367
00:29:17,584 --> 00:29:22,968
would rise again if they were in the balloon mode or if you had balls, then they would fall

368
00:29:23,128 --> 00:29:28,931
into the water and things like that. So everything, I save out the physics forces and

369
00:29:28,951 --> 00:29:35,335
everything too. So they just kind of restore. What middleware did you use other than

370
00:29:35,435 --> 00:29:37,517
Unity and the standard stuff that comes with it?

371
00:29:38,772 --> 00:29:47,881
I only really use lean tween and a lean tween for a lot of these UI animations and I2

372
00:29:48,202 --> 00:29:53,146
localization for our localization support. It has integration of Google docs and Google

373
00:29:53,166 --> 00:30:00,113
sheets. Everything else is custom. We even wrote our own audio system because WI wasn't

374
00:30:00,133 --> 00:30:01,214
working on the devices at the time.

375
00:30:02,539 --> 00:30:06,941
Even the UI orientation stuff is custom because we wanted certain elements to stay in place and

376
00:30:07,061 --> 00:30:25,592
didn't want the hardware to handle it. I think we're almost out of time. I don't know. I guess

377
00:30:25,612 --> 00:30:25,872
that's it.

