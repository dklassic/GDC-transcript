1
00:00:05,469 --> 00:00:08,171
That's our cue, the usual reminder.

2
00:00:08,352 --> 00:00:11,175
If you could adjust, also turn off your cell phone

3
00:00:12,216 --> 00:00:14,718
while the presentation, it'd be really appreciated.

4
00:00:16,349 --> 00:00:21,714
So, thank you for choosing us as your kickoff conference

5
00:00:21,754 --> 00:00:22,554
for this morning.

6
00:00:22,574 --> 00:00:25,477
Here's a small agenda so you guys understand a bit

7
00:00:25,877 --> 00:00:26,538
where we're going.

8
00:00:26,578 --> 00:00:29,520
I'll go with the introduction of who we are and ADAS

9
00:00:29,580 --> 00:00:31,582
and then Nicola will kick in with the work he's done

10
00:00:32,242 --> 00:00:35,765
for Hitman's game and a small conclusion afterwards.

11
00:00:37,125 --> 00:00:42,050
So, um, yeah, I know it's a bit early, so I'll try to keep you awake until the

12
00:00:42,090 --> 00:00:46,755
interesting stuff kicks in. Uh, it funnels me, I guess, to my intro. 37 year old,

13
00:00:46,856 --> 00:00:51,461
proud father of two, including an 18 month old little baby boy, so this might only

14
00:00:51,501 --> 00:00:55,805
resonate to the parents of young kid in the audience, but actually, that's a break

15
00:00:55,845 --> 00:00:56,646
I'm having right now.

16
00:00:57,312 --> 00:01:03,055
So excuse my Canadian call that I brought, which is changing a bit my voice, so I'll try to be a

17
00:01:03,075 --> 00:01:08,498
bit louder. So, born and raised in Montreal by an Italian father and a French Canadian

18
00:01:08,518 --> 00:01:13,801
mother, explaining the weird name that you're seeing up there. And I spent almost 10 years in

19
00:01:13,821 --> 00:01:19,445
the gaming industry, coming up from the aerospace, and I spent most of those years in two

20
00:01:19,485 --> 00:01:21,146
studios in Montreal.

21
00:01:22,770 --> 00:01:27,493
I apologize in advance as I extracted that information from a corporate deck, but let

22
00:01:27,513 --> 00:01:29,335
me just draw your attention to some of those facts.

23
00:01:29,715 --> 00:01:34,779
ADOS Montreal moved into its early teenage years, celebrating its 10th anniversary not

24
00:01:34,819 --> 00:01:36,761
too long ago, this month, last month.

25
00:01:38,022 --> 00:01:42,866
And over those 10 years in which I was an active participant for seven of those, the

26
00:01:42,886 --> 00:01:47,189
studio built itself a strong reputation, both in Montreal, but around the world.

27
00:01:48,052 --> 00:01:54,876
A strong installment of beloved franchise such as Dersac's Thief and Tomb Raider helped

28
00:01:54,916 --> 00:01:56,677
accomplish this positioning for the studio.

29
00:01:56,777 --> 00:02:01,659
So points here in the next slide that really drives most of my attention and I'd like to

30
00:02:01,939 --> 00:02:03,300
get your attention onto those as well.

31
00:02:03,320 --> 00:02:07,542
Of course innovation and creativity, it's something that my department is highly involved

32
00:02:07,602 --> 00:02:09,723
into but also honesty and respect.

33
00:02:11,724 --> 00:02:19,349
The studio is creating great titles from great IP, yeah, but it's always done through an enjoyable environment, which is something very important for us.

34
00:02:20,530 --> 00:02:25,293
Respectful approach towards our most valuable assets, which are the employees themselves.

35
00:02:26,874 --> 00:02:35,719
Great overtime crunch policy, for instance, and strong balance between work and family or other activities.

36
00:02:36,625 --> 00:02:40,548
uh... Amy Inning wrote an interesting paper in the game industry biz not so long ago

37
00:02:40,608 --> 00:02:42,910
really recommend it if you if you guys are looking uh...

38
00:02:43,730 --> 00:02:44,791
to learn a bit more about it

39
00:02:46,092 --> 00:02:50,315
let's say this straight the active community is growing older I know I'm

40
00:02:50,355 --> 00:02:54,338
growing older and we all have a changing expectation towards our our employers

41
00:02:54,658 --> 00:02:57,781
which is fine in the end and we've seen this trend in other studios so

42
00:02:57,841 --> 00:02:58,861
kindergarten and

43
00:02:59,402 --> 00:03:03,585
access to doctors etc so here at ADAS we're kind of a big family and I think

44
00:03:03,625 --> 00:03:05,006
our returning rates uh...

45
00:03:05,987 --> 00:03:07,428
is a great indication of this.

46
00:03:07,888 --> 00:03:09,890
So, moving on to OOI's labs.

47
00:03:11,091 --> 00:03:14,053
Well, it all started when our head of office

48
00:03:14,113 --> 00:03:16,435
regrouped a bunch of released resource

49
00:03:16,636 --> 00:03:19,458
to push technology barrier and act as a single unit.

50
00:03:20,664 --> 00:03:27,389
We were folks from different fields of expertise, but we strongly collaborated together in the past, which actually

51
00:03:29,111 --> 00:03:33,994
made a big key element to the success of this team. And we knew each other's strengths.

52
00:03:34,094 --> 00:03:36,476
We've had our fighting moments, stress moments together.

53
00:03:37,117 --> 00:03:41,217
Tears, everything we're experiencing in our own

54
00:03:41,297 --> 00:03:43,118
respective game teams, right?

55
00:03:43,858 --> 00:03:44,898
So then the rest are there.

56
00:03:45,458 --> 00:03:48,979
Three years anniversary, we've contributed to three games

57
00:03:49,019 --> 00:03:50,059
that I shipped already.

58
00:03:50,499 --> 00:03:52,640
Collaboration with four different studio over three

59
00:03:52,680 --> 00:03:55,000
different time zones with all the challenges

60
00:03:55,040 --> 00:03:58,641
that this goes with.

61
00:03:58,801 --> 00:04:01,982
14 expert contribution, went into lab structure.

62
00:04:02,102 --> 00:04:05,583
Some went back to production and others,

63
00:04:07,395 --> 00:04:08,456
and others elsewhere.

64
00:04:09,537 --> 00:04:12,860
We did over 18 delivered features and games,

65
00:04:13,121 --> 00:04:16,244
over 24-ish different investigation,

66
00:04:16,945 --> 00:04:18,626
and year-to-year public appearance,

67
00:04:18,666 --> 00:04:21,009
which is important for the studio itself.

68
00:04:22,230 --> 00:04:24,112
What are the expectations for labs?

69
00:04:25,012 --> 00:04:26,854
Pretty straightforward and easy to understand,

70
00:04:26,994 --> 00:04:30,658
but not so easy to put in context and application, if you were to ask me.

71
00:04:31,158 --> 00:04:36,423
Solve complex industry problems, or at least grow our understanding of it,

72
00:04:36,643 --> 00:04:38,385
its limitation, and work around.

73
00:04:39,045 --> 00:04:40,927
There are problems that we're all struggling with,

74
00:04:40,967 --> 00:04:43,169
independently from which studios we are.

75
00:04:45,031 --> 00:04:49,493
We're attempting to address the issue that is an actual problem we're suffering with,

76
00:04:49,513 --> 00:04:52,135
but we're also trying to keep aware of problems to come.

77
00:04:53,236 --> 00:04:57,398
My team tried to invest the right amount of time in avoiding that these issues ever become

78
00:04:57,438 --> 00:04:58,739
a production showstoppers.

79
00:05:00,340 --> 00:05:05,163
Then sharing, very important aspect of my team as well, sharing the knowledge gathered

80
00:05:05,403 --> 00:05:10,686
or proven solution to the sister studios to help position our different products.

81
00:05:11,868 --> 00:05:13,672
So how do we operate?

82
00:05:14,755 --> 00:05:17,863
Industry problems, some problems are well documented.

83
00:05:18,344 --> 00:05:20,209
Multiple solution were proposed by expert

84
00:05:20,309 --> 00:05:21,552
and big brains already.

85
00:05:22,499 --> 00:05:25,603
But other or totally new issue that we need to investigate,

86
00:05:25,843 --> 00:05:28,186
build knowledge about it, and a better understanding.

87
00:05:29,528 --> 00:05:31,450
Always researching for different solution.

88
00:05:32,231 --> 00:05:34,855
I'm aiming at resolving a problem with the first solution

89
00:05:35,676 --> 00:05:38,799
that eMERGE might actually show it weaknesses on the long run

90
00:05:38,940 --> 00:05:41,723
and might not be as solid as we'd expect.

91
00:05:43,326 --> 00:05:45,967
Search all possible solution best fitting a context.

92
00:05:46,408 --> 00:05:49,869
Constructive and collective and associative mentality

93
00:05:49,929 --> 00:05:50,990
is part of lab success.

94
00:05:51,030 --> 00:05:53,431
The collaboration in the team is super important.

95
00:05:54,232 --> 00:05:57,313
Regular exchanges, chair rolling philosophy as I call it.

96
00:05:57,793 --> 00:06:01,035
Just poke your friends and put as more brain as possible

97
00:06:01,095 --> 00:06:03,036
into a problem so the solution is just

98
00:06:04,297 --> 00:06:06,358
up to everyone's standards.

99
00:06:07,721 --> 00:06:10,122
We regroup conception, prototyping and implementation

100
00:06:10,162 --> 00:06:13,385
under one roof, so the idea is to prove its value quickly

101
00:06:13,605 --> 00:06:17,427
and fail fast enough to find a big strong winner.

102
00:06:19,128 --> 00:06:21,410
What makes sense and who we're innovating for

103
00:06:21,470 --> 00:06:24,111
is important to keep the focus on the client's need

104
00:06:24,131 --> 00:06:27,753
given we're working with different studio

105
00:06:27,773 --> 00:06:31,496
to not try to solve any personal fantasy

106
00:06:31,596 --> 00:06:34,458
that we might have in regards of the problems.

107
00:06:36,540 --> 00:06:39,101
So let me guide through some of the team's achievement

108
00:06:39,121 --> 00:06:41,541
that we've done over the last three years of existence

109
00:06:42,082 --> 00:06:44,062
and we'd go first with Rise of the Tomb Raider.

110
00:06:47,683 --> 00:06:49,484
So the contribution in Rise of the Tomb Raider

111
00:06:49,544 --> 00:06:52,385
includes the creation of six main graphic features

112
00:06:53,145 --> 00:06:54,645
that brought a lot of focus on the game.

113
00:06:55,406 --> 00:06:57,006
Those feature are among some of the best

114
00:06:57,046 --> 00:06:59,127
technical achievement in Rise of the Tomb Raider

115
00:06:59,587 --> 00:07:02,308
according to some press release and my biased self.

116
00:07:05,288 --> 00:07:09,269
We have led, of course, multiple direct and indirect

117
00:07:09,329 --> 00:07:11,710
promotion of the game's technical achievement

118
00:07:11,770 --> 00:07:13,170
through major industry events,

119
00:07:13,210 --> 00:07:14,870
such as the one you're seeing on screen.

120
00:07:16,811 --> 00:07:19,832
Also, two years of continuous collaboration

121
00:07:19,872 --> 00:07:22,873
with all of Lab's member, with the dev team.

122
00:07:23,393 --> 00:07:25,933
We worked on over 10 different graphic features,

123
00:07:26,533 --> 00:07:28,454
including some that never made it in the game

124
00:07:28,554 --> 00:07:29,674
for many different reasons.

125
00:07:29,774 --> 00:07:32,355
Some are tied to the fact that

126
00:07:33,871 --> 00:07:39,255
production change, it's scope during uh during the dev cycles and we're kind of a

127
00:07:39,375 --> 00:07:44,219
client centric approach so they have the last call. When we also tackle at the same

128
00:07:44,279 --> 00:07:49,523
time the integration of uh more mainstream feature that our innovation were requiring.

129
00:07:50,424 --> 00:07:54,307
Then moving on to Durzak's Mankind Divided of course um

130
00:07:55,798 --> 00:08:00,222
We had a close proximity with the Deus Ex team and it was a strong benefit.

131
00:08:00,562 --> 00:08:06,007
The different studio experts were accessible resources with collaborating with us along

132
00:08:06,468 --> 00:08:07,268
our collaboration.

133
00:08:07,909 --> 00:08:11,932
This led the group in tackling some of the biggest challenges, such as the one you're

134
00:08:11,972 --> 00:08:15,656
seeing there, the iconic feature which is called Titan Shield and its vignette.

135
00:08:18,343 --> 00:08:20,745
Also again, mutual confidence allowed the game team

136
00:08:20,765 --> 00:08:23,388
to benefit from many of our previous research.

137
00:08:23,909 --> 00:08:25,711
A role that is expected from my team,

138
00:08:26,151 --> 00:08:28,013
the sharing of technology whenever applicable,

139
00:08:28,814 --> 00:08:30,716
and in worst case, sharing the knowledge

140
00:08:30,756 --> 00:08:32,017
gained as broad as possible.

141
00:08:33,539 --> 00:08:34,380
With that in mind.

142
00:08:35,103 --> 00:08:40,949
Labs worked hard in providing DIRS-X with unique pure hair integration, motion blur,

143
00:08:41,389 --> 00:08:44,713
volumetrics, particle lighting, R&D, and so on and so on.

144
00:08:45,494 --> 00:08:49,858
Lots of knowledge shared with this group and our collaboration with the team is still active

145
00:08:49,898 --> 00:08:50,979
on a day-to-day basis.

146
00:08:52,407 --> 00:08:54,288
So yes, I touched on that aspect.

147
00:08:54,588 --> 00:08:56,608
It's an important pillar for EGDAS Montreal.

148
00:08:56,868 --> 00:08:59,149
Labs was always heavily involved in sharing back

149
00:08:59,189 --> 00:09:00,989
with the community some of our innovations.

150
00:09:01,549 --> 00:09:04,870
And additionally, Labs also co-promoted technology

151
00:09:04,890 --> 00:09:07,151
with industry-leading partners such as AMD,

152
00:09:07,511 --> 00:09:10,031
Hewlett Packard, and Autodesk, only to name a few.

153
00:09:11,272 --> 00:09:13,732
And now, we're moving on to It Men's Game,

154
00:09:13,752 --> 00:09:15,653
which is a bit the reason why we're all here today.

155
00:09:16,690 --> 00:09:18,833
We were really looking forward to collaboration

156
00:09:18,873 --> 00:09:20,755
with the very talented IEO's team.

157
00:09:21,696 --> 00:09:24,238
The different work have gotten us to collaborate

158
00:09:24,779 --> 00:09:26,581
for a little over a year altogether.

159
00:09:27,241 --> 00:09:29,284
And we've had the chance to work on three different

160
00:09:29,384 --> 00:09:30,745
unique graphic features for them,

161
00:09:30,805 --> 00:09:33,908
including the ocean technology that we're gonna discuss

162
00:09:34,969 --> 00:09:35,650
a bit later on.

163
00:09:37,112 --> 00:09:37,472
Yet again.

164
00:09:38,118 --> 00:09:41,221
we naturally promoted the ocean technology in different ways,

165
00:09:41,321 --> 00:09:43,503
which explain our presence here with you today.

166
00:09:43,904 --> 00:09:46,486
So while Nicolas come up on stage,

167
00:09:46,906 --> 00:09:50,069
we'll just go and have a look at a prototype that we've done.

168
00:09:50,089 --> 00:09:56,515
Without sound.

169
00:10:12,077 --> 00:10:12,318
the

170
00:10:12,338 --> 00:10:12,419
the

171
00:10:55,787 --> 00:10:57,207
So hello, good morning.

172
00:10:57,987 --> 00:10:59,128
My name is Nicolas Lanchon.

173
00:11:00,128 --> 00:11:02,749
I am a technical artist in the Labs R&D group

174
00:11:02,829 --> 00:11:03,690
at Eidos Montreal.

175
00:11:04,310 --> 00:11:07,011
I've been in 3D for a little over 16 years already,

176
00:11:08,091 --> 00:11:09,992
with about nine years of that spent at Eidos.

177
00:11:11,333 --> 00:11:13,314
My background is mainly in graphics and VFX,

178
00:11:13,814 --> 00:11:15,094
and on the technical side of things,

179
00:11:15,154 --> 00:11:18,756
I'm mostly self-taught, which I think is not very unusual

180
00:11:18,796 --> 00:11:19,676
for a technical artist.

181
00:11:20,716 --> 00:11:22,857
I'm also a proud dad, and I can bake

182
00:11:22,877 --> 00:11:24,038
a pretty decent loaf of bread.

183
00:11:27,094 --> 00:11:27,595
Okay.

184
00:11:27,735 --> 00:11:29,857
So to start, I'd like to note that this talk

185
00:11:29,937 --> 00:11:32,720
is not about a revolutionary ocean implementation,

186
00:11:33,982 --> 00:11:34,843
but a practical one.

187
00:11:36,244 --> 00:11:39,007
Water surfaces are a difficult topic in real-time 3D,

188
00:11:39,628 --> 00:11:42,131
and my hope today is that I can add

189
00:11:42,151 --> 00:11:43,532
to the community bag of tricks

190
00:11:44,193 --> 00:11:46,435
for creating real-time ocean surfaces.

191
00:11:50,239 --> 00:11:54,180
During Hitman production, roughly around mid to end 2014,

192
00:11:54,481 --> 00:11:57,081
IO Interactive approached us to help create a solution

193
00:11:57,582 --> 00:11:58,982
for their in-game water surfaces,

194
00:12:00,062 --> 00:12:01,383
specifically ocean rendering.

195
00:12:02,443 --> 00:12:04,764
They wanted an efficient, lightweight solution

196
00:12:04,784 --> 00:12:06,845
that was up to par with current methods

197
00:12:06,925 --> 00:12:09,746
and could easily be implemented in a variety of contexts

198
00:12:10,366 --> 00:12:12,207
and have support for physics interactions.

199
00:12:13,703 --> 00:12:15,484
From the supplied maps and reference,

200
00:12:15,704 --> 00:12:17,646
I could also see other non-trivial features

201
00:12:18,467 --> 00:12:20,788
like transparent water, an arbitrary shoreline,

202
00:12:21,429 --> 00:12:23,510
and the fact that you could both walk along the beach

203
00:12:23,811 --> 00:12:25,532
and view it from a high vantage point

204
00:12:26,373 --> 00:12:28,214
with an unobstructed view to the horizon

205
00:12:28,254 --> 00:12:31,156
in several directions, hence the name for this talk.

206
00:12:32,938 --> 00:12:35,380
This implied a seamless transition of surface detail

207
00:12:35,440 --> 00:12:36,881
from up close to kilometers away.

208
00:12:38,478 --> 00:12:40,759
Physics interactions included things like floating,

209
00:12:41,499 --> 00:12:44,721
things like buoys, small boats, and ballistic impacts,

210
00:12:45,361 --> 00:12:47,022
and this being a Hitman game of course,

211
00:12:48,302 --> 00:12:49,863
ragdolls, AKA dead bodies.

212
00:12:51,504 --> 00:12:53,505
Supporting physics became the initial focus,

213
00:12:54,045 --> 00:12:55,666
as this would drive how the rest of the effect

214
00:12:55,706 --> 00:12:57,066
would be designed and function,

215
00:12:57,787 --> 00:13:00,428
meaning the solution had to be CPU physics friendly.

216
00:13:03,509 --> 00:13:05,770
So we started looking at, excuse my voice.

217
00:13:07,135 --> 00:13:09,377
So we started looking at what was done at the time,

218
00:13:10,638 --> 00:13:12,580
and there were a lot of implementations to choose from.

219
00:13:13,662 --> 00:13:16,144
Assassin's Creed Black Flag had a nice solution,

220
00:13:16,985 --> 00:13:19,287
which sort of became my visual benchmark for the effect,

221
00:13:19,968 --> 00:13:22,951
even though high-sea sailing wasn't really necessary for us.

222
00:13:24,213 --> 00:13:26,195
Uncharted, Far Cry, and Killzone are some

223
00:13:26,215 --> 00:13:27,056
that stood out also.

224
00:13:28,320 --> 00:13:30,701
All very nice solutions using interesting techniques

225
00:13:31,441 --> 00:13:33,903
and all with the different context and requirements.

226
00:13:34,523 --> 00:13:36,824
Of course, there was the obligatory read

227
00:13:36,944 --> 00:13:39,286
of Jerry Tesendorf's paper on ocean rendering,

228
00:13:39,606 --> 00:13:41,947
which is the gold standard for ocean simulation

229
00:13:41,987 --> 00:13:44,808
in CinemaVFX, but also more recently applied

230
00:13:44,828 --> 00:13:45,829
in some AAA titles.

231
00:13:50,872 --> 00:13:55,815
There are a lot of open water solutions, but unfortunately there's very few for beach interactions,

232
00:13:56,716 --> 00:14:01,259
except for the offline and expensive SPH or flip particle simulations.

233
00:14:01,939 --> 00:14:05,622
And it's very difficult to find any solutions that offer a seamless integration

234
00:14:06,122 --> 00:14:08,704
of both open water and quality beach interactions.

235
00:14:09,924 --> 00:14:14,207
Solutions that tackle open water well usually have limited beach interactions, if any.

236
00:14:15,228 --> 00:14:17,109
And the effect sort of lives inside of a tank.

237
00:14:18,264 --> 00:14:22,630
A lot of the times the water displacement simply clips the beach or is attenuated by

238
00:14:22,710 --> 00:14:24,733
distance field or water depth texture.

239
00:14:26,355 --> 00:14:31,062
Just a spoiler alert, I don't think I've completely solved this issue myself, but hopefully I've

240
00:14:31,082 --> 00:14:32,664
taken some steps in the right direction.

241
00:14:34,622 --> 00:14:37,424
So to start, what do we need to make an ocean surface?

242
00:14:37,685 --> 00:14:39,566
Well, we need a surface, of course.

243
00:14:40,007 --> 00:14:40,868
That seems obvious.

244
00:14:41,488 --> 00:14:42,769
But what kind of surface?

245
00:14:43,390 --> 00:14:44,992
Is it a procedural or a static?

246
00:14:45,912 --> 00:14:46,873
How is it parameterized?

247
00:14:47,494 --> 00:14:49,656
How is the geometric screen density handled?

248
00:14:50,837 --> 00:14:52,759
Open water is simpler, but what about our beach?

249
00:14:53,179 --> 00:14:55,441
And how to transition from beach to open water?

250
00:14:57,596 --> 00:14:59,397
Common choices for surface generation

251
00:14:59,437 --> 00:15:02,779
are simple static geometry, which is a user-authored mesh,

252
00:15:03,539 --> 00:15:04,640
screen-projected grid,

253
00:15:05,100 --> 00:15:07,081
or a system of multi-resolution patches.

254
00:15:08,341 --> 00:15:10,102
The screen-projected grid, sorry,

255
00:15:10,422 --> 00:15:11,763
static geometry can be okay

256
00:15:11,803 --> 00:15:13,184
if you have a limited vantage point

257
00:15:13,784 --> 00:15:15,405
and are able to statically distribute

258
00:15:15,465 --> 00:15:17,486
from a known source, from a known point.

259
00:15:18,567 --> 00:15:19,647
This isn't our case at all,

260
00:15:20,107 --> 00:15:22,128
and we wanted to avoid handling a LOD system.

261
00:15:23,857 --> 00:15:26,257
The screen projection grid is a popular choice

262
00:15:26,297 --> 00:15:28,878
for good reason, since it's by nature

263
00:15:28,938 --> 00:15:32,119
restricted to the frustum, no frustum culling necessary,

264
00:15:32,859 --> 00:15:34,880
and screen geometric density is constant

265
00:15:34,980 --> 00:15:36,720
and distribution is more or less ideal.

266
00:15:38,001 --> 00:15:40,621
Parameterization can be, for shorelines,

267
00:15:40,661 --> 00:15:43,502
can be an issue, however, as no UVs

268
00:15:43,522 --> 00:15:45,783
or other vertex data can be localized on the mesh.

269
00:15:47,043 --> 00:15:48,844
Localized data has to be then stored

270
00:15:48,864 --> 00:15:51,985
in an implicitly mapped textures or by other means.

271
00:15:55,619 --> 00:15:57,820
Patch systems incur some system overhead

272
00:15:58,761 --> 00:16:01,523
and require seam stitching at the borders

273
00:16:01,684 --> 00:16:03,845
where patches of different resolutions meet.

274
00:16:04,766 --> 00:16:07,468
They also have the same perimetrization issues

275
00:16:08,049 --> 00:16:09,330
as the screen projected method.

276
00:16:12,232 --> 00:16:14,014
Hardware tessellation was something I had wanted

277
00:16:14,054 --> 00:16:15,435
to apply to water for a while.

278
00:16:16,356 --> 00:16:18,858
At labs we had implemented it for our Titan Shield effect

279
00:16:19,618 --> 00:16:22,180
and afterwards more extensively in the snow deformation

280
00:16:22,220 --> 00:16:23,562
effect in Rise of the Tomb Raider.

281
00:16:24,680 --> 00:16:26,121
During the development of that feature,

282
00:16:26,582 --> 00:16:28,042
we had tested hardware tessellation

283
00:16:28,102 --> 00:16:29,984
against a comparably dense static mesh

284
00:16:30,444 --> 00:16:31,905
and found hardware tessellation

285
00:16:31,925 --> 00:16:34,266
to have much better performance.

286
00:16:35,747 --> 00:16:37,348
Using tessellation would allow for

287
00:16:37,448 --> 00:16:43,031
perimeterization, I have problems with that word,

288
00:16:43,832 --> 00:16:48,515
and arbitrary topology along the base mesh where necessary,

289
00:16:49,535 --> 00:16:52,537
meaning I could UV map my shoreline if I required to do so.

290
00:16:54,343 --> 00:16:56,605
Also, transition in geometric resolution

291
00:16:56,765 --> 00:16:58,026
would be automatically handled,

292
00:16:58,106 --> 00:17:01,708
so no stitching algorithms or LOD systems are necessary.

293
00:17:02,428 --> 00:17:04,990
So, for the ocean, we're using an authored mesh

294
00:17:05,690 --> 00:17:06,931
as a base for tessellation,

295
00:17:07,111 --> 00:17:08,812
but as a very sparse hull mesh.

296
00:17:12,615 --> 00:17:15,196
For tessellation, we employ a simple distance-to-camera

297
00:17:15,216 --> 00:17:18,398
adaptive tessellation technique with a non-linear falloff.

298
00:17:19,234 --> 00:17:22,058
Tessellation density can be kept constant to a given distance.

299
00:17:22,719 --> 00:17:26,163
After that, possibly due to angle of incidence,

300
00:17:26,724 --> 00:17:30,028
I found that I could have geometric density fall off much quicker

301
00:17:30,068 --> 00:17:34,434
than linearly with little to no noticeable effect in quality.

302
00:17:35,595 --> 00:17:37,918
Tessellation is also kept within the camera frustum.

303
00:17:39,150 --> 00:17:40,931
In the shader, the camera distance function

304
00:17:40,971 --> 00:17:42,371
is computed in the vertex shader

305
00:17:42,931 --> 00:17:44,472
and passed on to the other stages

306
00:17:44,652 --> 00:17:46,533
for modulating the tessellation factor,

307
00:17:47,053 --> 00:17:49,614
displacement amplitude and other shader effect weights.

308
00:17:50,795 --> 00:17:52,336
As for the final tessellation factor,

309
00:17:52,716 --> 00:17:54,357
there are a lot of guidelines for tessellation.

310
00:17:57,038 --> 00:17:57,418
Sorry.

311
00:18:00,039 --> 00:18:02,881
Most simply state to keep it below a certain number,

312
00:18:03,321 --> 00:18:04,801
but this doesn't really take into account

313
00:18:04,861 --> 00:18:06,222
the initial geometric density.

314
00:18:07,422 --> 00:18:09,083
My base mesh has huge triangles,

315
00:18:10,144 --> 00:18:11,285
so this was not really helpful.

316
00:18:11,905 --> 00:18:15,748
The one guideline I found most useful and stuck to

317
00:18:16,248 --> 00:18:18,029
was keeping screen density in check.

318
00:18:19,010 --> 00:18:21,031
That is to avoid having triangles smaller

319
00:18:21,091 --> 00:18:23,713
than 16 pixels screen area

320
00:18:24,193 --> 00:18:26,254
in order to maintain rasterizer efficiency.

321
00:18:27,675 --> 00:18:30,537
I found this info in an AMD developer presentation,

322
00:18:31,098 --> 00:18:34,220
the AMD GNC architecture, a crash course by Leila Ma.

323
00:18:35,860 --> 00:18:38,082
When setting edge and face tessellation factors,

324
00:18:38,283 --> 00:18:39,604
only edge factors are handled.

325
00:18:40,444 --> 00:18:43,147
Face factors are simply an average of the former.

326
00:18:45,709 --> 00:18:47,871
With the exception of the beach variant base mesh,

327
00:18:48,031 --> 00:18:49,372
which I'll explain later,

328
00:18:50,213 --> 00:18:51,774
the base geometry is very sparse.

329
00:18:52,555 --> 00:18:55,418
It's a radial ocean mesh roughly 800 meters across,

330
00:18:56,278 --> 00:18:57,640
divided into hectare patches.

331
00:18:58,761 --> 00:18:59,561
So 100 meters by 100 meters.

332
00:19:01,557 --> 00:19:04,899
The total mesh diameter was found by placing circles

333
00:19:04,960 --> 00:19:06,741
representing the desired view distance

334
00:19:07,841 --> 00:19:09,582
at several extreme positions in the map

335
00:19:10,083 --> 00:19:13,785
and then encapsulating those within a larger circle

336
00:19:13,865 --> 00:19:17,207
representing the final extents of the ocean geometry.

337
00:19:18,688 --> 00:19:21,410
Base geometric density before tessellation

338
00:19:21,530 --> 00:19:23,391
is one vertex per every 10 meter.

339
00:19:24,992 --> 00:19:26,793
Keeping a uniform distribution of triangles

340
00:19:26,833 --> 00:19:29,475
will allow to better control tessellation density.

341
00:19:30,667 --> 00:19:32,728
Permanently occluded geometry can be removed,

342
00:19:33,549 --> 00:19:35,330
but caps are kept on the 10 meter grid

343
00:19:35,910 --> 00:19:37,811
in order to keep the uniform triangle size.

344
00:19:40,893 --> 00:19:42,254
The beach mesh is a special case.

345
00:19:42,974 --> 00:19:45,716
Here we want UVs and vertex colors for shore waves.

346
00:19:46,817 --> 00:19:50,839
We also want close topology match with the shoreline.

347
00:19:51,580 --> 00:19:53,541
So the 10 meter grid goes out the window here.

348
00:19:54,383 --> 00:19:58,606
For modeling, I found it best to model both the water

349
00:19:58,826 --> 00:20:03,569
and the floor of the shore using the same waterline curve.

350
00:20:04,150 --> 00:20:06,391
This allowed for matching topology and UVs

351
00:20:06,571 --> 00:20:09,974
on the shore floor, which could subsequently be synced

352
00:20:10,094 --> 00:20:13,016
to the shore wave water effect

353
00:20:13,496 --> 00:20:15,978
and used for a wet sand animated effect.

354
00:20:18,379 --> 00:20:23,621
We still want to have the borders of our beach patch mesh match the 10-meter grid

355
00:20:24,201 --> 00:20:27,143
as to avoid tearing during deformation.

356
00:20:28,663 --> 00:20:30,804
However, now we have a problem for tessellation.

357
00:20:32,044 --> 00:20:34,465
Tessellation will divide all triangles by the given amount,

358
00:20:34,586 --> 00:20:35,866
no matter what the triangle size.

359
00:20:36,306 --> 00:20:40,048
So, keeping to a 10-meter grid kept a homogenous triangle size

360
00:20:40,088 --> 00:20:41,628
and perfectly uniform subdivision.

361
00:20:42,682 --> 00:20:44,123
But now we have smaller triangles

362
00:20:45,044 --> 00:20:46,425
with the same tessellation factors,

363
00:20:46,945 --> 00:20:49,427
giving us some very dense and unnecessary geometry.

364
00:20:50,228 --> 00:20:51,889
And ultra dense geometry is bad

365
00:20:51,969 --> 00:20:53,930
for the rasterizer efficiency as we saw.

366
00:20:55,471 --> 00:20:59,534
So, we want to keep tessellation density relatively uniform.

367
00:20:59,854 --> 00:21:03,077
And to do that we need to encode a tessellation bias value

368
00:21:03,097 --> 00:21:05,118
into a vertex color data for the beach mesh.

369
00:21:06,639 --> 00:21:08,280
Here in the image I've applied a color ramp

370
00:21:08,320 --> 00:21:09,101
so that it looks cool.

371
00:21:09,821 --> 00:21:11,062
But really it's a scalar value.

372
00:21:12,913 --> 00:21:16,034
For water patches marked as beach type,

373
00:21:16,594 --> 00:21:19,035
this vertex data is used in the hull shader

374
00:21:19,095 --> 00:21:20,556
to bias the tessellation factors.

375
00:21:21,976 --> 00:21:25,398
To find the bias value, we process the geometry in our DCC

376
00:21:25,538 --> 00:21:27,358
and find each triangle's area.

377
00:21:28,019 --> 00:21:29,579
And going back to our 10 meter grid,

378
00:21:30,060 --> 00:21:33,241
we know that a normal triangle has an area

379
00:21:33,261 --> 00:21:34,461
of 50 square meters, 10 by 10.

380
00:21:37,483 --> 00:21:41,005
triangle area and therefore we can normalize to that value.

381
00:21:41,805 --> 00:21:43,826
This will give us a zero to one size ratio

382
00:21:44,526 --> 00:21:46,928
that can then be encoded into a vertex color channel.

383
00:21:48,348 --> 00:21:50,109
Ratios bigger than one are clamped.

384
00:21:51,370 --> 00:21:53,070
So when applied, the smaller triangles

385
00:21:53,111 --> 00:21:55,372
are proportionally tessellated to a lesser degree.

386
00:21:57,993 --> 00:22:00,834
So we have a surface and now we need a method

387
00:22:00,894 --> 00:22:01,735
to move the points around.

388
00:22:03,143 --> 00:22:04,904
Displacement is pretty common in games now,

389
00:22:05,504 --> 00:22:07,645
but for water it should be noted that a height function

390
00:22:07,725 --> 00:22:09,406
is really not sufficient.

391
00:22:10,426 --> 00:22:13,047
Water churns and moves and lateral movement

392
00:22:13,248 --> 00:22:15,469
is very necessary to properly sell the effect.

393
00:22:15,989 --> 00:22:18,130
So we're not really looking for a height displacement,

394
00:22:18,570 --> 00:22:19,891
but rather a vector displacement.

395
00:22:21,972 --> 00:22:23,172
Just a note on compute shaders.

396
00:22:24,220 --> 00:22:26,161
We did quickly look into a compute approach,

397
00:22:26,782 --> 00:22:28,423
but ultimately decided against it,

398
00:22:28,543 --> 00:22:31,025
fearing latency issues I would incur

399
00:22:31,085 --> 00:22:33,847
when getting the modified mesh back from GPU

400
00:22:33,887 --> 00:22:35,488
in order to perform CPU physics.

401
00:22:36,990 --> 00:22:38,511
Maybe we could have used GPU compute

402
00:22:38,531 --> 00:22:41,853
to generate vector displacement and normal maps at runtime,

403
00:22:42,974 --> 00:22:44,395
but this would have brought with it

404
00:22:44,735 --> 00:22:46,937
a fixed tiling pattern that would have to be managed.

405
00:22:48,358 --> 00:22:51,020
We also wanted to avoid doing CPU texture fetches

406
00:22:51,541 --> 00:22:52,821
for physics as much as possible.

407
00:22:55,327 --> 00:22:57,849
Black Flag had a good implementation using, I believe,

408
00:22:58,149 --> 00:23:01,312
offline generated vector displacement maps,

409
00:23:02,133 --> 00:23:04,174
but we ultimately did not explore this route

410
00:23:04,494 --> 00:23:05,976
since we wanted a stateless function.

411
00:23:07,877 --> 00:23:09,258
Other than vector displacement maps,

412
00:23:09,739 --> 00:23:10,980
what other methods have been applied?

413
00:23:12,341 --> 00:23:14,983
Uncharted made use of low frequency Gerstner waves

414
00:23:15,203 --> 00:23:18,145
along with higher frequency, what they called particle waves

415
00:23:18,886 --> 00:23:20,647
and an additional mega wave deformer.

416
00:23:21,646 --> 00:23:24,108
Our mandate did not call for such rough seas,

417
00:23:24,648 --> 00:23:27,391
but I really like the idea of artist's placeable waves.

418
00:23:29,773 --> 00:23:31,455
We did look into FFTs,

419
00:23:31,795 --> 00:23:34,537
or Fast Fournier Transform Ocean Deformation,

420
00:23:34,718 --> 00:23:37,800
as outlined in Mr. Jerry Tesendorf's 2001 paper,

421
00:23:38,361 --> 00:23:39,462
Simulating Ocean Water.

422
00:23:40,841 --> 00:23:42,822
FFT waves are maybe not a good name.

423
00:23:43,622 --> 00:23:46,283
The fast Fournier transform here is a component

424
00:23:46,343 --> 00:23:49,303
of a larger set of equations based on statistical models

425
00:23:49,944 --> 00:23:51,684
found in oceanographic literature.

426
00:23:53,065 --> 00:23:55,665
There's a reason why FFT waves are pretty much

427
00:23:55,705 --> 00:23:58,486
the gold standard for ocean simulation in cinema,

428
00:23:59,206 --> 00:24:00,707
and this is the method produces

429
00:24:00,747 --> 00:24:02,007
some very convincing results.

430
00:24:03,564 --> 00:24:06,685
And although advancements in available CPU, GPU power

431
00:24:06,845 --> 00:24:10,726
in games hardware have recently made FFT waves more viable

432
00:24:10,926 --> 00:24:12,866
as seen as the more recent Just Cause 3's

433
00:24:13,046 --> 00:24:14,527
Nvidia Waveworks implementation,

434
00:24:15,247 --> 00:24:17,308
they do remain computationally intensive.

435
00:24:18,268 --> 00:24:20,228
And for a poor technical artist like myself,

436
00:24:20,808 --> 00:24:22,469
a bit mathematically intimidating.

437
00:24:24,309 --> 00:24:25,970
Math complexity put aside though,

438
00:24:26,690 --> 00:24:28,450
FFT waves have some issues to consider.

439
00:24:29,688 --> 00:24:31,469
By nature of existing within a domain,

440
00:24:32,370 --> 00:24:34,452
they tile both spatially and periodically.

441
00:24:35,353 --> 00:24:36,934
The spatial tiling can't be fixed.

442
00:24:37,895 --> 00:24:39,036
This can only be managed.

443
00:24:40,857 --> 00:24:42,398
They can be difficult to get right,

444
00:24:42,839 --> 00:24:46,442
and the generation of normals or CPU-side surfaces

445
00:24:46,482 --> 00:24:49,104
for physics requires even more FFTs.

446
00:24:50,565 --> 00:24:53,708
For very water-centric games, the cost may be worth it.

447
00:24:57,680 --> 00:25:01,023
But for us, I went back and revisited Gerstner waves

448
00:25:01,723 --> 00:25:03,745
to drive our effect, starting from the well-known

449
00:25:03,785 --> 00:25:06,667
GPU Gems article, Effective Water Simulation

450
00:25:06,767 --> 00:25:10,650
from Physical Models by Mark Finch.

451
00:25:11,050 --> 00:25:12,871
Despite maybe being considered obsolete,

452
00:25:13,432 --> 00:25:16,034
for cinema at least, Gerstner waves have some nice

453
00:25:16,074 --> 00:25:18,556
properties that shouldn't be overlooked.

454
00:25:19,696 --> 00:25:21,418
Gerstner waves are computationally efficient.

455
00:25:22,644 --> 00:25:25,586
and the function is easy to derive in order to generate

456
00:25:25,606 --> 00:25:28,248
a surface normal and tangent basis.

457
00:25:29,870 --> 00:25:32,432
They might not be as realistic as FFT waves,

458
00:25:32,512 --> 00:25:34,633
but they can also offer convincing results

459
00:25:34,714 --> 00:25:36,315
given the proper setup and perimeters.

460
00:25:38,096 --> 00:25:41,679
Although there is also a periodic element to Gerstner waves,

461
00:25:42,800 --> 00:25:45,202
each wave is independent and not tied to a domain,

462
00:25:45,923 --> 00:25:47,464
so it's easier to manage repetition.

463
00:25:48,461 --> 00:25:51,965
One easy way to break repetition, which we implemented,

464
00:25:52,145 --> 00:25:55,548
is to employ a low frequency phase noise texture to the waves.

465
00:25:59,411 --> 00:26:02,274
The deformation effect was separated into three categories,

466
00:26:02,334 --> 00:26:04,396
or water behaviors, if you will.

467
00:26:05,497 --> 00:26:07,959
There's the generic open water waves,

468
00:26:08,980 --> 00:26:10,662
areas where there's no directionality

469
00:26:11,122 --> 00:26:12,624
or influence from land masses.

470
00:26:14,004 --> 00:26:16,846
Then you'll have the closer to the shore, the coastal waves.

471
00:26:18,507 --> 00:26:21,149
Would still be open water, but here you would start

472
00:26:21,189 --> 00:26:24,712
to feel some directionality and conformity to the coastline.

473
00:26:25,813 --> 00:26:28,955
And beach waves, of course, where water actually meets the,

474
00:26:29,255 --> 00:26:30,636
makes contact with the landmass,

475
00:26:31,457 --> 00:26:34,139
and the contact line needs to be handled somehow.

476
00:26:35,020 --> 00:26:37,141
Water towards the horizon has no displacement,

477
00:26:37,281 --> 00:26:38,322
and we'll talk about that later.

478
00:26:40,449 --> 00:26:43,111
Open water is the generic non-directional motion

479
00:26:43,151 --> 00:26:43,591
of the water.

480
00:26:44,311 --> 00:26:45,732
This is the base layer for the effect.

481
00:26:46,633 --> 00:26:48,153
It's a mix of eight Gerstner waves

482
00:26:48,894 --> 00:26:50,775
arranged in a way to cover all directions

483
00:26:50,935 --> 00:26:52,276
without canceling each other out

484
00:26:52,696 --> 00:26:54,837
and create a wave motion not biased

485
00:26:54,897 --> 00:26:56,338
to any particular direction.

486
00:26:57,759 --> 00:27:00,120
So while we're talking about mixing Gerstner waves,

487
00:27:00,581 --> 00:27:02,201
there's a few points I can share on the topic.

488
00:27:05,505 --> 00:27:08,087
If you're like me, your first instinct would probably

489
00:27:08,127 --> 00:27:11,890
have been to mix many wave fronts and just randomly

490
00:27:11,910 --> 00:27:14,913
pack them on as much as you can, thinking more waves

491
00:27:15,673 --> 00:27:16,794
means more detail, right?

492
00:27:18,416 --> 00:27:19,156
Not necessarily.

493
00:27:20,717 --> 00:27:24,340
What happens is like, if you think of it like adding noise,

494
00:27:25,741 --> 00:27:28,784
noise on top of noise, values will eventually converge

495
00:27:28,824 --> 00:27:29,665
to the median value.

496
00:27:30,765 --> 00:27:33,067
And in our case, since we're doing bidirectional

497
00:27:33,087 --> 00:27:33,588
displacement,

498
00:27:34,173 --> 00:27:35,293
the median value is zero.

499
00:27:36,014 --> 00:27:38,635
So the more wave fronts I would add to the system,

500
00:27:39,176 --> 00:27:40,817
the more my water surface got flat.

501
00:27:41,817 --> 00:27:43,398
Basically all of the delta positions

502
00:27:43,438 --> 00:27:44,659
were canceling each other out.

503
00:27:45,579 --> 00:27:50,842
So more is not better, not at similar frequencies at least.

504
00:27:51,823 --> 00:27:52,903
Which brings the second point.

505
00:27:54,945 --> 00:27:57,166
Separate your wave fronts into frequency groups.

506
00:27:58,347 --> 00:28:00,388
For example, we have a low frequency group

507
00:28:00,448 --> 00:28:01,288
of three wave fronts,

508
00:28:01,708 --> 00:28:03,550
and a high frequency group of five wave fronts.

509
00:28:04,696 --> 00:28:06,257
Generally, the lower the frequency,

510
00:28:06,297 --> 00:28:07,898
the less wave fronts you want to use.

511
00:28:09,599 --> 00:28:11,820
And doing this, separating into groups,

512
00:28:12,381 --> 00:28:15,002
I found is a good way to manage complexity of the effect.

513
00:28:17,284 --> 00:28:19,725
Separating into groups allows to unify controls

514
00:28:19,965 --> 00:28:21,006
for the waves in that group,

515
00:28:21,806 --> 00:28:24,088
and simply apply variance to the individual waves

516
00:28:24,468 --> 00:28:25,889
from the original controls.

517
00:28:26,529 --> 00:28:29,471
Meaning the overall effect is easier to control for artists.

518
00:28:30,562 --> 00:28:33,323
Additionally, you may want to skip a high frequency group

519
00:28:33,443 --> 00:28:35,725
when sampling positions on CPU for physics,

520
00:28:37,105 --> 00:28:38,806
or any other instance where you would need

521
00:28:38,826 --> 00:28:40,707
a low fidelity height sample.

522
00:28:42,048 --> 00:28:44,930
And finally, the obvious, you want to break symmetry

523
00:28:44,950 --> 00:28:47,691
as much as possible, so odd numbers are your friend,

524
00:28:48,912 --> 00:28:50,873
and add variance wherever you can,

525
00:28:50,933 --> 00:28:52,714
and avoid having anything on axis.

526
00:28:53,832 --> 00:28:57,636
Our three wave fronts are radially distributed

527
00:28:57,896 --> 00:28:59,858
and our five high frequency wave fronts

528
00:29:00,819 --> 00:29:02,220
start from the reverse direction.

529
00:29:02,721 --> 00:29:04,863
So no directions in the same group overlap

530
00:29:05,643 --> 00:29:09,026
and no directions intergroup will overlap either.

531
00:29:13,280 --> 00:29:17,442
Conceptually, ocean surfaces are composed

532
00:29:17,522 --> 00:29:19,363
of an infinite amount of random wave fronts.

533
00:29:20,524 --> 00:29:22,945
But realistically, waves interact.

534
00:29:23,285 --> 00:29:25,586
They collide, they exchange energy,

535
00:29:26,067 --> 00:29:27,868
they die, they separate, they merge.

536
00:29:28,588 --> 00:29:30,689
Of course, our water waves don't do that.

537
00:29:31,430 --> 00:29:32,150
They simply add.

538
00:29:33,471 --> 00:29:36,212
This is also the case for an FFT ocean surface, I believe.

539
00:29:37,431 --> 00:29:39,392
I'm inclined to say that these are not technically

540
00:29:39,452 --> 00:29:42,652
simulations like you would have with SPH

541
00:29:42,712 --> 00:29:46,754
or flip particle solutions where a finite data set

542
00:29:46,774 --> 00:29:48,074
is updated through a solver.

543
00:29:49,754 --> 00:29:51,235
We have no data set to update,

544
00:29:52,475 --> 00:29:54,416
but we can control how the waves are added

545
00:29:54,996 --> 00:29:56,977
and base positions from which they're computed.

546
00:29:58,737 --> 00:30:00,518
So I find there's basically three methods

547
00:30:00,578 --> 00:30:03,558
to some Gerstner waves in reference to

548
00:30:03,798 --> 00:30:05,199
when they get applied to the base.

549
00:30:06,368 --> 00:30:08,789
sequentially, some delta positions,

550
00:30:09,009 --> 00:30:10,309
or some deltas by group.

551
00:30:12,330 --> 00:30:16,992
The first method is to simply sequentially add the waves

552
00:30:17,312 --> 00:30:22,574
so that each wave is computed from base, sorry.

553
00:30:25,089 --> 00:30:29,531
so that each wave is computed from positions

554
00:30:29,571 --> 00:30:31,071
deformed by the previous wave.

555
00:30:31,972 --> 00:30:34,192
This isn't a great method and is difficult to control.

556
00:30:35,673 --> 00:30:37,974
The reason I dislike it is that the first wave

557
00:30:38,374 --> 00:30:40,175
is deformed by all subsequent waves,

558
00:30:41,115 --> 00:30:42,616
but the last wave isn't deformed at all.

559
00:30:43,736 --> 00:30:47,958
So the weight of each wave front is not equal in this case.

560
00:30:49,178 --> 00:30:51,639
The second method as seen in GPU-GEMS

561
00:30:51,719 --> 00:30:53,500
Gerstner wave surface equation.

562
00:30:54,697 --> 00:30:57,039
is computing all wave fronts from the base position

563
00:30:57,640 --> 00:31:00,222
and then adding the sum delta positions in one go.

564
00:31:01,583 --> 00:31:03,424
This way all waves have an equal effect.

565
00:31:04,705 --> 00:31:07,067
However, since they're all computed from the base position,

566
00:31:07,688 --> 00:31:10,170
the waves don't really deform each other,

567
00:31:10,750 --> 00:31:11,931
which is a nice effect to have.

568
00:31:13,953 --> 00:31:17,376
The third method takes advantage of the fact

569
00:31:17,416 --> 00:31:19,958
that we've separated our wave fronts into frequency groups.

570
00:31:21,387 --> 00:31:23,528
In this method, we sum the deltas,

571
00:31:24,448 --> 00:31:27,830
but we apply them to the base position between the groups.

572
00:31:29,031 --> 00:31:31,012
So the base position here is deformed

573
00:31:31,592 --> 00:31:33,033
by previously applied groups.

574
00:31:34,574 --> 00:31:36,675
And we go in descending order of frequency,

575
00:31:36,715 --> 00:31:37,476
which is important.

576
00:31:38,236 --> 00:31:41,438
This is so that small waves get deformed by larger waves,

577
00:31:42,418 --> 00:31:44,119
as would make sense in reality.

578
00:31:44,839 --> 00:31:46,320
The bigger the wave, the more inertia.

579
00:31:48,942 --> 00:31:51,183
I also found that this method,

580
00:31:51,623 --> 00:31:54,003
I also found this method to be much less sensitive

581
00:31:54,063 --> 00:31:56,724
to pinching at the crests, which is a common problem

582
00:31:56,824 --> 00:31:58,024
when using Gerstner waves,

583
00:31:59,045 --> 00:32:00,525
than simply summing the deltas.

584
00:32:03,886 --> 00:32:06,146
And still allowed the waves to be deformed by each other,

585
00:32:07,286 --> 00:32:08,567
like with the sequential method,

586
00:32:08,727 --> 00:32:10,247
but in a much more controllable manner.

587
00:32:12,641 --> 00:32:15,223
For coastal waves, you want to have a more

588
00:32:16,003 --> 00:32:18,645
directional wave front, fitted to the curvature

589
00:32:18,685 --> 00:32:19,285
of the shoreline.

590
00:32:20,246 --> 00:32:23,708
To do this, we first looked into parameterizing the mesh,

591
00:32:25,009 --> 00:32:26,950
but that would require a lot of unique assets,

592
00:32:27,651 --> 00:32:29,952
and the results were not really that great.

593
00:32:31,253 --> 00:32:34,876
It was also difficult and tedious to have localized control

594
00:32:34,896 --> 00:32:37,738
for things like intensity, speed, things like that.

595
00:32:38,544 --> 00:32:41,147
We also wanted a friendlier process

596
00:32:41,187 --> 00:32:44,790
than baking into textures and iterating inside that process.

597
00:32:47,793 --> 00:32:49,155
Inspired by forward lighting,

598
00:32:49,175 --> 00:32:51,777
I had the idea to create a simple system

599
00:32:51,837 --> 00:32:53,659
of artist-placeable wave objects.

600
00:32:54,820 --> 00:32:57,903
These objects work a bit like forward lights in the shader.

601
00:32:58,955 --> 00:33:01,836
Each wave object adds three wave samples per vertex

602
00:33:02,637 --> 00:33:06,198
and the shader allows for up to four wave objects per mesh

603
00:33:06,498 --> 00:33:10,560
or per hectare patch if you remember.

604
00:33:12,281 --> 00:33:15,682
The worst case scenario is therefore 20 wave samples

605
00:33:15,762 --> 00:33:16,762
per tessellated vertex.

606
00:33:18,283 --> 00:33:20,204
Each wave object holds a set of perimeters

607
00:33:20,504 --> 00:33:22,645
and passes these to the shaders via constants.

608
00:33:23,688 --> 00:33:26,430
This allows the user to control area of effect,

609
00:33:26,510 --> 00:33:29,432
direction, wave amplitude, and curvature of the wave front.

610
00:33:31,673 --> 00:33:33,654
In order to support curved coastlines,

611
00:33:34,375 --> 00:33:36,196
it's possible to warp the wave front

612
00:33:36,276 --> 00:33:37,817
along the wave direction.

613
00:33:38,938 --> 00:33:42,140
The wave curve perimeter allows bidirectional warping

614
00:33:42,680 --> 00:33:45,222
in order to obtain a convex or concave wave front.

615
00:33:46,143 --> 00:33:48,724
This also helps to reduce the number of wave objects

616
00:33:48,804 --> 00:33:50,305
necessary to follow the shoreline.

617
00:33:53,529 --> 00:33:56,931
So we solved the tessellation issue for arbitrary geometry

618
00:33:57,551 --> 00:33:59,372
and we don't require crashing waves

619
00:33:59,472 --> 00:34:00,833
which makes things much easier.

620
00:34:01,533 --> 00:34:03,874
But how do we get the water to slide onto the beach?

621
00:34:05,775 --> 00:34:08,136
The player can walk along the beach right up to the water.

622
00:34:09,217 --> 00:34:12,058
So just letting the water clip is not an option.

623
00:34:13,512 --> 00:34:15,933
Attenuating the deformation to a static position

624
00:34:15,993 --> 00:34:18,694
along the shore is common, like we saw either

625
00:34:18,734 --> 00:34:22,536
by depth texture or just freezing it to a static position.

626
00:34:23,276 --> 00:34:25,317
But I really wanted to go for that sliding effect.

627
00:34:28,358 --> 00:34:31,179
And to do this, the beach interaction relies

628
00:34:31,259 --> 00:34:33,440
on a baked depth slice of the scenery,

629
00:34:33,860 --> 00:34:37,242
which is sampled by the ocean shader in the beach variant

630
00:34:37,362 --> 00:34:39,383
and allows for the vertices to know the height

631
00:34:39,563 --> 00:34:42,504
of the beach at their location during displacement.

632
00:34:43,588 --> 00:34:45,308
This allowed to have the ocean mesh slide

633
00:34:45,348 --> 00:34:46,789
onto the beach when moving.

634
00:34:48,189 --> 00:34:50,430
This is as simple as selecting the maximum height

635
00:34:50,990 --> 00:34:53,170
between the displaced vertex position

636
00:34:53,230 --> 00:34:54,331
and the sampled beach height.

637
00:34:57,492 --> 00:35:00,112
Full scene height map sounds a bit intense,

638
00:35:01,093 --> 00:35:02,113
but we know the water height.

639
00:35:03,073 --> 00:35:05,014
So from there we can cut around that

640
00:35:05,134 --> 00:35:06,654
and maximize depth resolution

641
00:35:07,294 --> 00:35:09,015
in the small strip of height that we really need.

642
00:35:10,138 --> 00:35:12,559
The height map only stores a four meter wide

643
00:35:13,219 --> 00:35:16,240
layer of height, two meters spread from the water height,

644
00:35:16,440 --> 00:35:18,701
which allows for an acceptable height resolution

645
00:35:19,301 --> 00:35:21,322
of around one and a half centimeters

646
00:35:21,382 --> 00:35:23,202
when packed into an eight bit texture alpha.

647
00:35:24,523 --> 00:35:27,364
For area, roughly four texels per square meter

648
00:35:27,404 --> 00:35:28,644
seems sufficient in our case.

649
00:35:30,805 --> 00:35:32,605
Since we now have this texture covering the map,

650
00:35:33,305 --> 00:35:35,566
we also encode a distance field from the shoreline

651
00:35:35,586 --> 00:35:37,166
which we'll use for masking foam.

652
00:35:40,419 --> 00:35:42,020
Okay, on to rendering.

653
00:35:43,641 --> 00:35:46,463
Water is a volume, and because of that,

654
00:35:47,044 --> 00:35:49,025
a lot of the shading effects are not on,

655
00:35:49,145 --> 00:35:50,526
but rather under the surface.

656
00:35:52,128 --> 00:35:53,809
So if not volume rendering,

657
00:35:54,930 --> 00:35:57,032
which in games is most likely the case,

658
00:35:57,772 --> 00:36:00,955
you have to at least process what's behind the water surface.

659
00:36:02,876 --> 00:36:05,398
As per the requirements of the IO mandate,

660
00:36:05,838 --> 00:36:06,999
we went for a lightweight method.

661
00:36:07,920 --> 00:36:10,222
and thankfully we did not need to manage going into

662
00:36:10,323 --> 00:36:11,424
or under the water surface.

663
00:36:13,205 --> 00:36:15,647
Shading perimeters were mostly simplified

664
00:36:15,667 --> 00:36:16,808
to absorption and scattering,

665
00:36:17,529 --> 00:36:20,792
represented using a lip texture mapped to linear view depth.

666
00:36:22,093 --> 00:36:24,155
The shader also made use of a quarter resolution

667
00:36:24,275 --> 00:36:25,976
render target for underwater geometries,

668
00:36:26,537 --> 00:36:28,618
allowing blurring, refraction, caustics,

669
00:36:28,678 --> 00:36:29,900
and optionally dispersion.

670
00:36:32,755 --> 00:36:34,537
For the underwater plate, we render the scene

671
00:36:34,557 --> 00:36:36,698
into a quarter resolution offscreen buffer

672
00:36:36,899 --> 00:36:38,240
before the translucent passes.

673
00:36:39,220 --> 00:36:41,722
From here, we reconstruct world position from depth

674
00:36:42,143 --> 00:36:43,864
in order to generate world coordinates

675
00:36:43,984 --> 00:36:45,345
over all of the scene geometry.

676
00:36:46,306 --> 00:36:48,828
The caustic effect itself is very simple.

677
00:36:49,388 --> 00:36:51,750
It's a static caustic render, just a single image

678
00:36:52,591 --> 00:36:54,833
distorted by a panning low frequency normal map.

679
00:36:55,853 --> 00:36:58,115
It does the job pretty well, and besides,

680
00:36:58,155 --> 00:37:01,338
the effect will further be perturbed by surface refraction.

681
00:37:03,468 --> 00:37:06,772
We then use the generated world pause as UVs

682
00:37:06,812 --> 00:37:10,156
in order to project our caustics over everything underwater.

683
00:37:10,776 --> 00:37:12,698
We don't really care about masking our distance here.

684
00:37:13,379 --> 00:37:16,283
Elements above the water obviously won't be visible

685
00:37:17,624 --> 00:37:18,505
in the underwater image.

686
00:37:19,046 --> 00:37:21,048
And elements far off in the distance

687
00:37:21,088 --> 00:37:22,890
will be obstructed by absorption.

688
00:37:27,015 --> 00:37:28,236
After the caustics are applied,

689
00:37:29,537 --> 00:37:31,399
we make a copy of the texture and blur it.

690
00:37:32,460 --> 00:37:35,443
So we have a blurred and unblurred version of our underwater

691
00:37:36,424 --> 00:37:38,466
which can later be blended using depth.

692
00:37:39,907 --> 00:37:41,488
Further effects will need to be applied

693
00:37:42,089 --> 00:37:43,170
in the surface pixel shader

694
00:37:43,750 --> 00:37:46,073
since we need the surface pixel location.

695
00:37:47,034 --> 00:37:48,595
This is because we can't just use depth.

696
00:37:49,376 --> 00:37:50,657
We need depth from surface.

697
00:37:54,886 --> 00:37:57,488
When rendering the surface in the pixel shader,

698
00:37:58,229 --> 00:38:00,851
we get two UVs based on world position,

699
00:38:01,511 --> 00:38:02,752
pre and post deformation.

700
00:38:03,773 --> 00:38:06,635
Pre deformation coordinates will unintuitively

701
00:38:07,236 --> 00:38:08,477
be deformed by wave motion.

702
00:38:09,097 --> 00:38:11,819
So this is what we want to use to map surface textures

703
00:38:11,859 --> 00:38:12,760
like foam and normals.

704
00:38:14,822 --> 00:38:18,044
I do use an offline FFT ocean surface

705
00:38:18,064 --> 00:38:19,225
in order to bake normal maps.

706
00:38:20,446 --> 00:38:23,468
This is really the best way I find to get water normals.

707
00:38:25,146 --> 00:38:28,208
The periodic nature of FFTs works to our advantage

708
00:38:28,248 --> 00:38:31,170
when baking normal maps since they tile perfectly.

709
00:38:32,611 --> 00:38:34,412
We use these wave normal maps to represent

710
00:38:34,452 --> 00:38:37,013
the highest frequencies of waves

711
00:38:37,233 --> 00:38:39,355
on top of the deformation effect.

712
00:38:40,736 --> 00:38:43,657
Once we have normals, we can quote unquote

713
00:38:43,898 --> 00:38:46,819
refract our UVs for sampling our scene depth

714
00:38:46,859 --> 00:38:47,640
and underwater plates.

715
00:38:48,761 --> 00:38:51,282
And in the pixel shader we also have the pixel depth

716
00:38:51,823 --> 00:38:53,704
so we can compute eye depth from surface.

717
00:38:54,555 --> 00:38:59,276
Obviously, if you want to accumulate an effect like absorption, you don't want to start from

718
00:38:59,296 --> 00:39:03,936
the eye, but rather the point at which the eye ray intersects the water surface.

719
00:39:06,417 --> 00:39:10,638
With linear distance from surface, we then map both blurred and unblurred underwater

720
00:39:10,658 --> 00:39:14,978
plates and blend them along depth to a given input distance.

721
00:39:16,259 --> 00:39:17,719
So why blur the water?

722
00:39:18,499 --> 00:39:20,159
Is that really PBR?

723
00:39:21,420 --> 00:39:22,020
Probably not.

724
00:39:22,986 --> 00:39:24,988
But blurring I find helps a lot.

725
00:39:26,008 --> 00:39:27,950
Real ocean water has a lot of effects going on.

726
00:39:29,311 --> 00:39:32,133
Underwater haze, micro refractions

727
00:39:32,213 --> 00:39:34,395
from very small ripples at the surface

728
00:39:34,815 --> 00:39:37,017
and under the surface from microscopic bubbles.

729
00:39:37,918 --> 00:39:40,820
Dispersion and other difficult to create effects.

730
00:39:41,947 --> 00:39:43,908
I find that blurring works visually to convey

731
00:39:43,948 --> 00:39:46,649
the impression of a different, heavier medium

732
00:39:46,709 --> 00:39:47,429
below the surface.

733
00:39:48,149 --> 00:39:50,530
And I find without this effect,

734
00:39:51,550 --> 00:39:53,290
water rendering often just looks like

735
00:39:54,191 --> 00:39:56,872
it's just air behind a deforming glass pane.

736
00:39:59,072 --> 00:40:02,393
So, after this we apply our absorption and scatter lid.

737
00:40:04,034 --> 00:40:06,154
Absorption works along eye depth from surface

738
00:40:06,374 --> 00:40:07,255
and is multiplicative.

739
00:40:08,322 --> 00:40:09,603
The far point is black,

740
00:40:10,944 --> 00:40:15,347
as that would be where the light extinction occurs underwater.

741
00:40:16,448 --> 00:40:18,329
For ocean water, this depends on the wavelength,

742
00:40:19,210 --> 00:40:21,551
but generally 200 meters is the point at which

743
00:40:22,452 --> 00:40:24,934
most to all light is completely absorbed.

744
00:40:26,335 --> 00:40:29,837
This can be adjusted artistically, of course.

745
00:40:31,158 --> 00:40:33,400
Scattering is a more complex effect,

746
00:40:34,100 --> 00:40:36,202
and doesn't really work along eye depth.

747
00:40:37,915 --> 00:40:39,836
But for simplicity and efficiency,

748
00:40:39,896 --> 00:40:40,877
that's exactly what we did.

749
00:40:42,458 --> 00:40:44,760
The downside to lit textures is the iteration rate

750
00:40:44,800 --> 00:40:45,720
when tweaking values.

751
00:40:46,521 --> 00:40:48,603
In my case, I made a lit function in substance

752
00:40:49,944 --> 00:40:52,626
so that I could rapidly regenerate the texture

753
00:40:52,686 --> 00:40:53,286
when iterating.

754
00:40:56,448 --> 00:40:58,070
We then apply our cube map reflections

755
00:40:58,130 --> 00:41:01,152
and specular highlights, and an SSR pass is done in post.

756
00:41:02,010 --> 00:41:05,331
For foam, it's masked using both a shoreline distance field

757
00:41:05,391 --> 00:41:07,393
and a vertex height map computed from our waves.

758
00:41:08,773 --> 00:41:11,555
While accumulating height in the domain shader,

759
00:41:12,935 --> 00:41:14,296
total added height is tracked

760
00:41:14,336 --> 00:41:16,277
in order to normalize the final height value.

761
00:41:17,378 --> 00:41:19,959
For texturing, a trick is taken from Black Flag.

762
00:41:20,980 --> 00:41:23,781
Multiple densities of foam are packed into a single texture

763
00:41:24,502 --> 00:41:26,202
and mixed together in the shader,

764
00:41:26,342 --> 00:41:29,104
depending on the gray value of the surface foam mask.

765
00:41:32,135 --> 00:41:34,336
The effect supports dynamic surface ripples

766
00:41:34,496 --> 00:41:37,758
from interacting physics objects

767
00:41:38,399 --> 00:41:39,740
as well as ballistic impacts.

768
00:41:40,540 --> 00:41:41,721
These don't deform the surface

769
00:41:41,761 --> 00:41:43,862
but rather contribute to the pixel normal.

770
00:41:44,903 --> 00:41:46,244
What's cool though is that they contribute

771
00:41:46,264 --> 00:41:47,545
to underwater caustics as well.

772
00:41:49,146 --> 00:41:52,308
The SSR method mentioned is a fast,

773
00:41:53,028 --> 00:41:54,929
simplified, no ray trace SSR

774
00:41:55,270 --> 00:41:57,491
which uses the plane equation of the water surface

775
00:41:57,571 --> 00:41:59,332
rather than the real surface and normal.

776
00:42:02,375 --> 00:42:04,857
For the beach, for the beach waves,

777
00:42:05,458 --> 00:42:07,059
we already have our sliding water effect

778
00:42:07,139 --> 00:42:08,020
from the deformation.

779
00:42:09,241 --> 00:42:11,323
And the beach mesh also has UVs

780
00:42:11,663 --> 00:42:12,944
along that strip of polygons.

781
00:42:13,305 --> 00:42:14,466
So to complete the effect,

782
00:42:14,526 --> 00:42:17,188
we use a two-phase cross-fading UV animation.

783
00:42:19,210 --> 00:42:21,712
To desync the waves along the length of the shoreline,

784
00:42:21,752 --> 00:42:25,316
the cosine of UVX offsets the phase of the animation.

785
00:42:27,095 --> 00:42:29,117
And because we've matched the topology

786
00:42:29,317 --> 00:42:30,578
of the water edge and beach,

787
00:42:31,879 --> 00:42:33,980
we have matching UVs on the sand.

788
00:42:34,901 --> 00:42:37,202
So we can implement the same animation on the sand

789
00:42:37,242 --> 00:42:39,944
in order to achieve a wet sand effect.

790
00:42:45,168 --> 00:42:48,570
For the horizon, although the base geometry

791
00:42:48,610 --> 00:42:50,411
extended out several hundred meters,

792
00:42:51,312 --> 00:42:53,033
the edge of the mesh could be seen,

793
00:42:53,113 --> 00:42:55,615
especially from certain elevated vantage points.

794
00:42:57,720 --> 00:43:00,882
One traditional solution is to simply create a giant grid

795
00:43:01,502 --> 00:43:04,083
and scale it until you just can't see the edges anymore.

796
00:43:05,384 --> 00:43:08,285
This however requires a large far clip value

797
00:43:08,925 --> 00:43:10,466
which does affect depth distribution.

798
00:43:11,406 --> 00:43:13,467
So instead I recycle the trick I use

799
00:43:13,667 --> 00:43:15,268
for mapping procedural skies.

800
00:43:17,593 --> 00:43:19,693
For lack of a better name, I dubbed the effect

801
00:43:19,753 --> 00:43:22,414
horizon mapping, simply because it generates

802
00:43:22,494 --> 00:43:24,075
planar coordinates to the horizon line.

803
00:43:25,475 --> 00:43:28,496
I think this term might already be used in CG somewhere,

804
00:43:29,016 --> 00:43:31,477
so if anyone has a better name for it, let me know.

805
00:43:33,718 --> 00:43:35,398
Here we use the world camera vector

806
00:43:35,458 --> 00:43:36,739
and world camera position.

807
00:43:37,339 --> 00:43:43,501
And assuming a Y-up coordsys for this whole presentation,

808
00:43:43,521 --> 00:43:44,801
I've been using Y-up, by the way.

809
00:43:46,163 --> 00:43:48,264
We divide camera vector XZ by Y,

810
00:43:48,524 --> 00:43:51,766
which gives us infinite planar coords on the XZ plane.

811
00:43:53,266 --> 00:43:54,627
They're camera centric though,

812
00:43:54,747 --> 00:43:57,608
so we adjust using world camera position to compensate.

813
00:44:00,129 --> 00:44:02,631
The result is planar coordinates

814
00:44:02,951 --> 00:44:05,112
that match world coordinates perfectly.

815
00:44:05,792 --> 00:44:08,854
So if you're using world coordinates to map textures,

816
00:44:09,814 --> 00:44:11,195
such as is the case for our ocean,

817
00:44:12,562 --> 00:44:14,323
The textures mapped to the horizon mapping

818
00:44:14,383 --> 00:44:15,323
should line up perfectly.

819
00:44:16,043 --> 00:44:17,663
And there will be no visible seams,

820
00:44:18,143 --> 00:44:20,304
assuming the pixels are shaded the same way, of course.

821
00:44:22,064 --> 00:44:24,225
Normal maps here don't require transforming

822
00:44:24,325 --> 00:44:25,765
other than swapping Y for Z,

823
00:44:26,365 --> 00:44:27,846
or other coordinate adjustments,

824
00:44:28,606 --> 00:44:30,466
since we're already aligned to the world axis.

825
00:44:32,307 --> 00:44:34,707
The world camera vector on the support geometry

826
00:44:35,267 --> 00:44:37,388
should be exactly the same as on our virtual plane.

827
00:44:38,383 --> 00:44:42,124
So with the map normal, we can get a reflection vector

828
00:44:42,264 --> 00:44:44,044
on the virtual surface as well.

829
00:44:44,704 --> 00:44:46,965
This gives us enough to shade the surface

830
00:44:47,385 --> 00:44:49,085
and match our real ocean geometry.

831
00:44:50,865 --> 00:44:53,666
Because the effects support geometry

832
00:44:53,706 --> 00:44:57,407
can be relatively close, the camera's far plane

833
00:44:57,947 --> 00:44:59,607
doesn't have to be at a very high value,

834
00:45:00,547 --> 00:45:02,688
which is much better for your scene's depth distribution.

835
00:45:04,638 --> 00:45:07,401
Pixels above the horizon line are clipped

836
00:45:07,461 --> 00:45:09,243
simply using camera vector Y.

837
00:45:09,864 --> 00:45:11,165
And the virtual plane is shaded

838
00:45:11,245 --> 00:45:13,168
using a simplified version of the ocean shader.

839
00:45:16,131 --> 00:45:17,732
Reception of the effect was pretty good.

840
00:45:18,733 --> 00:45:20,976
The placeable wave modifiers were especially liked.

841
00:45:22,157 --> 00:45:24,540
Here we can see them used as waves from the waterfall.

842
00:45:28,856 --> 00:45:32,777
The effect proved versatile enough to be used in many contexts across the game.

843
00:45:34,158 --> 00:45:37,739
One nice example here is the bubbling water in the natural springs.

844
00:45:39,460 --> 00:45:42,741
I believe they cleverly used an inverted Gerstner function here.

845
00:45:43,741 --> 00:45:45,482
And it works pretty well.

846
00:45:58,565 --> 00:45:59,866
Many size contexts as well.

847
00:46:01,007 --> 00:46:05,310
Anything from small pools to large lakes or oceans.

848
00:46:28,753 --> 00:46:31,434
Of course, eventually you have to ship the feature.

849
00:46:32,534 --> 00:46:34,935
Still a lot of interesting ideas to explore.

850
00:46:34,955 --> 00:46:38,397
And lots of ideas come after a step back.

851
00:46:39,317 --> 00:46:40,598
And I'd like to share some of those.

852
00:46:42,578 --> 00:46:44,959
One thing I wish I had better was better shore waves.

853
00:46:46,240 --> 00:46:50,201
Our effect did not call for surf waves or crashing waves,

854
00:46:50,341 --> 00:46:53,423
but I still wish we had a bit more deformation in there.

855
00:46:54,962 --> 00:46:57,684
Maybe more Gerstners would probably be difficult

856
00:46:57,724 --> 00:46:58,805
to control for shore waves.

857
00:47:00,426 --> 00:47:03,949
Maybe animated displacement maps would probably

858
00:47:03,989 --> 00:47:07,012
be a better idea given we already have the UVs

859
00:47:07,392 --> 00:47:08,953
and we already have the UV animation.

860
00:47:11,175 --> 00:47:13,637
Some other things to explore would be Alembic.

861
00:47:15,499 --> 00:47:17,260
It wasn't really an option for us at the time.

862
00:47:17,420 --> 00:47:18,681
There was no engine support.

863
00:47:20,022 --> 00:47:22,364
But Alembic offers some interesting avenues to explore.

864
00:47:23,975 --> 00:47:26,638
Mesh caches could allow to pre-compute and play back

865
00:47:26,678 --> 00:47:29,540
complex simulations of surface deformations,

866
00:47:30,221 --> 00:47:32,343
deferring the computation cost to bandwidth.

867
00:47:34,264 --> 00:47:36,106
Pre-computed crashing wave simulations

868
00:47:36,226 --> 00:47:37,868
would probably be very nice.

869
00:47:39,669 --> 00:47:41,751
Lots of things to solve and explore on this end though.

870
00:47:42,512 --> 00:47:44,273
Bandwidth cost would be a question.

871
00:47:45,935 --> 00:47:47,916
How to apply the mesh to a mesh

872
00:47:47,996 --> 00:47:50,298
with a dynamic resolution would be another.

873
00:47:51,657 --> 00:47:54,799
How to blend alembic deformations together

874
00:47:54,859 --> 00:47:57,080
with other deformations would be a good question

875
00:47:57,120 --> 00:47:57,720
to solve also.

876
00:48:02,183 --> 00:48:05,125
Better subsurface lighting or scattering.

877
00:48:06,445 --> 00:48:07,626
Like I said earlier in the talk,

878
00:48:08,046 --> 00:48:10,408
absorption works well along linear eye depth

879
00:48:11,048 --> 00:48:13,089
from the surface, but not scattering.

880
00:48:14,130 --> 00:48:14,990
That's a complete hack.

881
00:48:16,771 --> 00:48:18,372
Volumic ray march from the surface

882
00:48:18,392 --> 00:48:19,293
would have been nice here.

883
00:48:20,364 --> 00:48:21,924
Maybe in the quarter resolution buffer,

884
00:48:23,145 --> 00:48:24,405
rather than using the wave height,

885
00:48:24,525 --> 00:48:27,985
just assume the water level as a flat plane

886
00:48:28,546 --> 00:48:29,126
and go from there.

887
00:48:30,666 --> 00:48:32,686
And finally, better foam.

888
00:48:33,946 --> 00:48:36,027
If you look at photos of ocean surf,

889
00:48:36,827 --> 00:48:40,108
you'll see that the underwater area

890
00:48:40,728 --> 00:48:42,968
right where the foam is is much brighter usually.

891
00:48:44,348 --> 00:48:47,529
And that's because foam is really not

892
00:48:47,629 --> 00:48:48,649
strictly a surface effect.

893
00:48:50,709 --> 00:48:53,231
There's a lot of air bubbles mixed in

894
00:48:53,291 --> 00:48:56,113
just under the surface, which causes a whole bunch

895
00:48:56,153 --> 00:48:58,334
of effects right under the surface in that area.

896
00:48:58,635 --> 00:49:01,517
So I don't think you can really get realistic foam

897
00:49:01,557 --> 00:49:04,639
until you also capture this subsurface effect of foam.

898
00:49:06,661 --> 00:49:08,903
Possibly ray march through a foam height map

899
00:49:08,943 --> 00:49:12,466
from the surface, or maybe a simple parallax effect

900
00:49:12,486 --> 00:49:14,547
with a blurred version of the foam would suffice.

901
00:49:16,108 --> 00:49:17,269
So that's all for me.

902
00:49:17,790 --> 00:49:19,211
I'll now pass the floor back to Jian.

903
00:49:25,290 --> 00:49:32,256
Yeah, well, I think while Nick and I are very happy to be here, we're representing a whole

904
00:49:32,296 --> 00:49:37,321
team's work, so I'd like just to add a few names over here, but also include ADAS Montreal

905
00:49:37,361 --> 00:49:41,025
and IO Interactive's complete team who assisted us along the way.

906
00:49:41,205 --> 00:49:41,665
It would have been...

907
00:49:42,346 --> 00:49:44,008
a bit of a cheat not to mention them.

908
00:49:44,428 --> 00:49:48,592
And of course, we are hiring and looking for very talented and creative people,

909
00:49:49,053 --> 00:49:55,680
especially in my team, but also at other department, team, project and studios.

910
00:49:55,800 --> 00:49:59,844
So make sure to come around and see my friend, Olivier Merville,

911
00:50:00,124 --> 00:50:01,826
who's in front over here and he'll handle.

912
00:50:03,413 --> 00:50:07,095
He'll handle any request or explain to you any possibilities

913
00:50:07,716 --> 00:50:08,456
that you may have.

914
00:50:08,856 --> 00:50:11,878
So I know we do have a bit of time for a question,

915
00:50:11,918 --> 00:50:14,119
but there's two or three reminders that I'd like

916
00:50:14,179 --> 00:50:16,780
to give you guys, the evaluation.

917
00:50:16,800 --> 00:50:19,182
It'd be really interesting if you can just fill

918
00:50:19,202 --> 00:50:22,303
those evaluation, because it helps us shape the content

919
00:50:22,383 --> 00:50:25,025
for our year-to-year appearances and make sure

920
00:50:25,045 --> 00:50:27,326
that it was relevant or what would be required

921
00:50:27,366 --> 00:50:29,527
to be changed in upcoming presentation.

922
00:50:30,108 --> 00:50:35,274
Along with, if ever you guys have tons of questions, there's a wrap up room that we can head to,

923
00:50:35,654 --> 00:50:45,566
which is in a West Hall Level 2. And we're gonna put those slides on GDC Vault, I swear. Any question?

924
00:51:02,458 --> 00:51:04,019
Hi, I have a small question.

925
00:51:04,039 --> 00:51:05,741
So first, thank you very much for the talk.

926
00:51:06,721 --> 00:51:09,063
To be honest, I'm really not a specialist into that,

927
00:51:09,083 --> 00:51:10,384
so it's not a technical question.

928
00:51:10,625 --> 00:51:12,386
It's more about how do you integrate

929
00:51:12,446 --> 00:51:13,907
with existing game engine?

930
00:51:14,188 --> 00:51:18,331
And does all the studios you've been working with

931
00:51:18,351 --> 00:51:20,593
have their own game engine, or they use something else?

932
00:51:20,633 --> 00:51:22,174
And how do you mix with this?

933
00:51:27,356 --> 00:51:30,458
I'll let Jian reply, sorry, the question was,

934
00:51:30,939 --> 00:51:32,860
how do you implement with different game engines?

935
00:51:33,460 --> 00:51:37,583
And further question was, does our studio support

936
00:51:37,623 --> 00:51:39,044
many engines and everything?

937
00:51:39,064 --> 00:51:42,667
I'll let Jian answer the multiple engine question.

938
00:51:43,667 --> 00:51:49,211
For implementing, one of the goals that drove

939
00:51:49,251 --> 00:51:51,953
a lot of the decisions that we took for this effect

940
00:51:52,053 --> 00:51:53,794
was really to have a drop-in effect.

941
00:51:55,028 --> 00:52:02,154
So it was very much as least invasive as possible.

942
00:52:02,534 --> 00:52:03,375
I don't know if you understand.

943
00:52:04,536 --> 00:52:07,179
We didn't want to branch into all these subsystems

944
00:52:07,259 --> 00:52:07,819
of the engine.

945
00:52:08,220 --> 00:52:11,303
We just wanted to use generic technology,

946
00:52:11,963 --> 00:52:13,825
something that we could just drop in and it works.

947
00:52:14,606 --> 00:52:17,869
And I think we were successful in that.

948
00:52:18,409 --> 00:52:20,271
I'll let Jian answer for the multiple engines.

949
00:52:20,692 --> 00:52:23,875
Yeah, we do have multiple engines in our different studios.

950
00:52:23,955 --> 00:52:26,598
It is amended that is given to my team to share the knowledge.

951
00:52:26,658 --> 00:52:29,841
We're sharing engine, we're sharing technology, we're sharing features.

952
00:52:30,382 --> 00:52:33,145
But there are different engine in different studios.

953
00:52:33,265 --> 00:52:37,209
So it asks the team to be very versatile in regards of.

954
00:52:38,676 --> 00:52:44,779
And I think it reached also the point that I was mentioning to make sure that always focus your work to your client's needs.

955
00:52:44,800 --> 00:52:47,221
So they have a different code base, they have specific needs.

956
00:52:47,441 --> 00:52:53,825
As Nicola mentioned, we weren't in for open ocean and so on because it wasn't really demanded.

957
00:52:54,385 --> 00:52:58,807
So, yes, multiple different technology. All the best.

958
00:52:58,988 --> 00:53:05,511
All right. My question is about how do you tune the...

959
00:53:06,794 --> 00:53:13,199
level of investment into realism as you're working on something like this.

960
00:53:13,319 --> 00:53:17,342
Because, for instance, I could see, you could go deeper or

961
00:53:17,362 --> 00:53:20,225
you could go less detail, less realism.

962
00:53:20,245 --> 00:53:25,729
And if you go deeper, there may come a point where other things are

963
00:53:26,610 --> 00:53:30,873
less realistic anyway, so beyond that point, you're probably wasting your time or

964
00:53:30,933 --> 00:53:34,576
something, so do you have any tips or guidelines that you use throughout

965
00:53:34,616 --> 00:53:35,237
this process?

966
00:53:35,997 --> 00:53:38,020
that led you in decisions?

967
00:53:38,220 --> 00:53:40,903
It's basically a cost-benefit analysis.

968
00:53:43,386 --> 00:53:45,588
We had a...

969
00:53:45,628 --> 00:53:48,872
We were implementing an effect into a game

970
00:53:48,892 --> 00:53:52,036
that was pretty much well along into production,

971
00:53:52,697 --> 00:53:55,480
so we couldn't just, you know, eat up the whole budget.

972
00:53:56,381 --> 00:53:59,826
And you're correct about making this super realistic effect

973
00:53:59,846 --> 00:54:01,588
and then it drops in, but the environment

974
00:54:01,648 --> 00:54:03,490
and everything is not as realistic.

975
00:54:05,733 --> 00:54:09,799
And as you may know also, the more you go up in quality,

976
00:54:09,879 --> 00:54:12,021
the more the cost is usually exponential.

977
00:54:13,981 --> 00:54:15,803
So we did have a budget in mind.

978
00:54:15,863 --> 00:54:17,804
We wanted to stay light and efficient.

979
00:54:19,685 --> 00:54:21,827
We made a lot of decisions, like for instance,

980
00:54:21,887 --> 00:54:24,448
the scattering was just mapped along view depth

981
00:54:24,508 --> 00:54:27,330
instead of doing a proper subsurface effect.

982
00:54:30,252 --> 00:54:32,594
You really have to take a step back

983
00:54:32,814 --> 00:54:35,236
and see that you're making a nice effect,

984
00:54:35,316 --> 00:54:36,477
but it's not the game.

985
00:54:37,037 --> 00:54:39,058
So you want to make something that supports the game.

986
00:54:41,590 --> 00:54:44,752
We're also exposing a lot of those parameters to the team itself.

987
00:54:45,332 --> 00:54:51,055
As they've used it in many clever ways, we're also allowing them to just tweak it according to their games.

988
00:54:52,116 --> 00:54:55,497
We have the luxury in our team to just push past the good enough,

989
00:54:55,898 --> 00:54:59,500
which is often where we're aiming for in developing features for games.

990
00:54:59,600 --> 00:55:02,481
So that allows my team to go a little bit deeper, but in the end,

991
00:55:03,001 --> 00:55:08,064
just keep focus on the client and its needs and gives him the right tools so he's able to achieve his vision.

992
00:55:08,484 --> 00:55:09,985
We only have three, four minutes.

993
00:55:11,348 --> 00:55:17,193
Yeah, I was curious if you had any kind of information about particles and automating

994
00:55:17,233 --> 00:55:22,396
that kind of aspect of water that's pretty common, or if that was not really part of

995
00:55:22,436 --> 00:55:22,957
your solution.

996
00:55:24,438 --> 00:55:28,801
He's asking about generating surface spray, I guess.

997
00:55:29,769 --> 00:55:31,350
Yeah, yeah, essentially, yeah.

998
00:55:31,890 --> 00:55:34,992
I think we kept to just textured foam.

999
00:55:35,732 --> 00:55:38,914
Like I said, this wasn't like a high-seas battle,

1000
00:55:38,995 --> 00:55:42,157
like a sea black flag, where that effect would probably

1001
00:55:42,177 --> 00:55:43,297
be more called for.

1002
00:55:44,518 --> 00:55:48,921
We had kind of soft seas, nothing strong enough

1003
00:55:49,001 --> 00:55:50,522
to generate that type of effect.

1004
00:55:51,703 --> 00:55:52,864
But if you were to look into that,

1005
00:55:52,904 --> 00:55:55,445
I guess I would start with height and the tangent basis.

1006
00:55:57,675 --> 00:55:59,976
So you guys are obviously running in frame.

1007
00:56:00,036 --> 00:56:02,296
Can you give me an idea of what the performance cost

1008
00:56:02,336 --> 00:56:05,017
and the memory cost was that you ended up shipping?

1009
00:56:05,797 --> 00:56:07,538
Obviously it's gonna vary on the scene and everything,

1010
00:56:07,598 --> 00:56:08,918
but just some rough metrics.

1011
00:56:11,418 --> 00:56:12,038
Rough metrics.

1012
00:56:15,059 --> 00:56:16,559
I'm sorry, I don't have any,

1013
00:56:17,960 --> 00:56:19,360
I didn't think of bringing numbers,

1014
00:56:20,200 --> 00:56:21,461
but we didn't break the build,

1015
00:56:21,981 --> 00:56:25,842
and we didn't bust performance, so I guess we're good.

1016
00:56:26,215 --> 00:56:29,076
And they've used it everywhere, so I guess it's performant enough.

1017
00:56:29,777 --> 00:56:31,697
I think the SSR was quite optimal.

1018
00:56:32,018 --> 00:56:34,419
Yeah, it was extremely optimal.

1019
00:56:35,059 --> 00:56:43,322
And they actually used the water surface effect much more extensively than I originally planned.

1020
00:56:43,922 --> 00:56:46,823
So that probably says something for performance.

1021
00:56:47,326 --> 00:56:50,448
So given that we're allowed to put our slides up

1022
00:56:50,468 --> 00:56:54,231
to March 7th, we'll also add the reference as a last slide

1023
00:56:54,291 --> 00:56:56,312
and it'd be interesting just to put a few numbers

1024
00:56:57,052 --> 00:56:59,494
in the PDF.

1025
00:57:00,114 --> 00:57:02,476
So thank you very much for coming to our talk, guys.

