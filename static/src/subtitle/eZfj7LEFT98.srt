1
00:00:05,729 --> 00:00:13,510
Hello everybody. Thank you for coming. My name is Dan Moskowitz. I'm the lead gameplay

2
00:00:13,550 --> 00:00:19,371
engineer on the new SimCity and I was also the lead engineer on the editors for Spore.

3
00:00:19,951 --> 00:00:25,092
I've been working at Maxis for over seven years. I was originally drawn there by Will

4
00:00:25,112 --> 00:00:30,193
Wright's 2005 GDC video where they showed the prototype of Spore and I just thought

5
00:00:30,893 --> 00:00:35,074
anyone that, any team that's willing to make something that crazy, that's the place I want

6
00:00:35,094 --> 00:00:35,254
to work.

7
00:00:36,241 --> 00:00:37,721
So Maxis is this wonderful place.

8
00:00:37,781 --> 00:00:39,322
It's filled with a lot of brilliant people.

9
00:00:40,203 --> 00:00:42,704
And I've learned a lot during my time there.

10
00:00:42,744 --> 00:00:45,165
And one of the things that I've learned most of all,

11
00:00:45,185 --> 00:00:47,266
and that's what I'm here to share with you today,

12
00:00:48,007 --> 00:00:50,568
is a particular philosophy about game development.

13
00:00:51,609 --> 00:00:54,430
It's a philosophy based on building simple systems

14
00:00:54,910 --> 00:00:56,571
and then discovering the fun that's inside.

15
00:00:57,712 --> 00:00:58,652
So let's get started here.

16
00:01:08,047 --> 00:01:11,888
Oh, hold on a sec.

17
00:01:12,028 --> 00:01:13,348
Let me just get online.

18
00:01:13,388 --> 00:01:14,509
This will just take a second.

19
00:01:16,829 --> 00:01:17,549
Oh, you know what?

20
00:01:22,951 --> 00:01:25,971
So let me just wait a couple minutes,

21
00:01:26,031 --> 00:01:27,172
and then I'll try again.

22
00:01:27,192 --> 00:01:27,232
OK.

23
00:01:28,052 --> 00:01:31,413
All right, so what can you do but laugh, right?

24
00:01:32,418 --> 00:01:34,639
As you all know, our game had a really rocky launch,

25
00:01:35,100 --> 00:01:36,901
filled with server and connection issues.

26
00:01:36,981 --> 00:01:39,903
And while most of my contribution to the game

27
00:01:39,983 --> 00:01:42,244
happens after the login screen and after the front end,

28
00:01:42,985 --> 00:01:44,466
as a member of the team, I apologize

29
00:01:44,486 --> 00:01:46,147
to anyone here that experienced frustration.

30
00:01:46,167 --> 00:01:47,708
I know it was really frustrating for a lot of people.

31
00:01:48,368 --> 00:01:50,349
And as fellow game developers, I hope

32
00:01:50,369 --> 00:01:52,911
you can understand that the first few weeks after launch

33
00:01:52,931 --> 00:01:54,692
were like an emotional roller coaster for the team.

34
00:01:55,984 --> 00:02:00,084
We created this game which people really loved and were attached to and then were frustrated

35
00:02:00,124 --> 00:02:02,485
by the inability to log in and play.

36
00:02:03,525 --> 00:02:06,405
And for those of you in the audience with rotten tomatoes or anyone that wants to talk

37
00:02:06,425 --> 00:02:11,746
about offline or online only requirements, I would happily direct you to our PR guy over

38
00:02:11,786 --> 00:02:11,926
there.

39
00:02:13,207 --> 00:02:14,247
So I'm not here to talk about that.

40
00:02:16,087 --> 00:02:19,288
But what I am here to talk about is sandbox games.

41
00:02:19,368 --> 00:02:23,048
So this is the kind of game that SimCity, the category of game that SimCity falls into.

42
00:02:23,764 --> 00:02:27,487
And I looked around for existing definitions of a sandbox game.

43
00:02:28,168 --> 00:02:31,490
And a lot of them referred to an open world specifically,

44
00:02:31,651 --> 00:02:33,692
or made reference to a game character.

45
00:02:33,772 --> 00:02:36,014
So here's a definition that I came up with.

46
00:02:36,575 --> 00:02:39,897
I would define it as a goal-free exploration game

47
00:02:39,937 --> 00:02:43,140
where the fun is derived from discovering how the game

48
00:02:43,180 --> 00:02:43,720
mechanics work.

49
00:02:44,802 --> 00:02:48,766
And I like this definition because you can literally apply it to sandboxes, you know,

50
00:02:48,786 --> 00:02:51,549
like plastic shuttles and buckets and sand and gravity.

51
00:02:52,089 --> 00:02:55,853
It's no wonder we have one of these in every single playground across the world.

52
00:02:56,614 --> 00:02:59,977
When you're a little kid and you're just learning the mechanics of the world, it's this perfect

53
00:03:00,017 --> 00:03:03,641
place to try scooping and digging and smashing and building.

54
00:03:03,661 --> 00:03:06,663
And when you're discovering these mechanics and you're building these pathways inside

55
00:03:06,683 --> 00:03:07,064
your brain.

56
00:03:07,705 --> 00:03:10,605
and you're building up a mental model of how the world works.

57
00:03:11,085 --> 00:03:11,706
And it's really fun.

58
00:03:12,986 --> 00:03:14,826
And I believe that sandbox computer games

59
00:03:15,186 --> 00:03:18,147
give you that same experience of wonder and discovery,

60
00:03:19,227 --> 00:03:21,227
but with completely new and novel mechanics

61
00:03:21,267 --> 00:03:23,308
that aren't possible in the real world.

62
00:03:25,388 --> 00:03:27,149
So here's four examples of sandbox games.

63
00:03:27,969 --> 00:03:30,949
SimCity 2000, Minecraft, Bad Piggies,

64
00:03:30,989 --> 00:03:33,410
which my three-year-old kid is crazy about the sandbox

65
00:03:33,430 --> 00:03:35,230
mode in there, and World of Goo.

66
00:03:36,371 --> 00:03:39,232
And each of these is built on top of some novel mechanic,

67
00:03:39,292 --> 00:03:41,972
like map-based simulation, or springs,

68
00:03:42,052 --> 00:03:43,332
or physics construction sets.

69
00:03:43,812 --> 00:03:45,473
And some of them do have goals built in,

70
00:03:45,533 --> 00:03:48,393
but all of them are built around the idea

71
00:03:48,453 --> 00:03:51,554
that the fun is about letting the player experiment.

72
00:03:52,114 --> 00:03:54,215
By trial and error, you slowly build up

73
00:03:54,275 --> 00:03:56,615
a mental model of the underlying systems

74
00:03:56,695 --> 00:03:57,615
that make up the game.

75
00:03:58,475 --> 00:04:01,296
And the fun for a lot of players is to get to a point where.

76
00:04:02,483 --> 00:04:04,465
their mental model of the game is strong enough

77
00:04:04,505 --> 00:04:06,127
so that they can run a little simulation

78
00:04:06,707 --> 00:04:07,628
of the game in their own head,

79
00:04:08,189 --> 00:04:09,950
and then predict the outcomes of their actions.

80
00:04:12,032 --> 00:04:14,374
The other important property of many sandbox games

81
00:04:14,474 --> 00:04:16,156
is that they're composed from simple parts.

82
00:04:16,997 --> 00:04:21,581
So these small pieces are the building blocks of the game,

83
00:04:21,601 --> 00:04:24,143
and each one's encoded with some relatively simple behavior

84
00:04:24,183 --> 00:04:25,865
or some relationship to the other pieces.

85
00:04:26,665 --> 00:04:28,747
But when the player can freely assemble them together,

86
00:04:29,160 --> 00:04:30,702
and play with them in a game world

87
00:04:30,722 --> 00:04:32,143
that contains this novel mechanic,

88
00:04:32,183 --> 00:04:33,303
that's where the magic happens

89
00:04:33,343 --> 00:04:34,825
and where you discover these incredibly rich

90
00:04:34,885 --> 00:04:36,266
and sometimes surprising behaviors.

91
00:04:37,907 --> 00:04:40,329
So to me, this is what's exciting about game development.

92
00:04:40,649 --> 00:04:43,031
And as a programmer, the process of creating

93
00:04:43,051 --> 00:04:44,212
the rules of a new universe

94
00:04:44,672 --> 00:04:46,453
and populating it with some simple pieces

95
00:04:47,054 --> 00:04:48,395
and then discovering what they all do

96
00:04:48,495 --> 00:04:49,836
when they're mixed together, that's fun

97
00:04:49,856 --> 00:04:52,618
and that's where I find enjoyment in my work.

98
00:04:54,459 --> 00:04:55,580
So if you're building a sandbox game,

99
00:04:55,600 --> 00:04:57,401
you need a novel mechanic to start playing around with.

100
00:04:57,441 --> 00:04:58,622
And as far as this talk goes,

101
00:04:58,992 --> 00:05:00,694
I can't really help you come up with that.

102
00:05:00,754 --> 00:05:02,215
That's up to you.

103
00:05:02,235 --> 00:05:04,597
That's the defining characteristic of your game,

104
00:05:04,617 --> 00:05:06,278
but the key is to start with something simple.

105
00:05:07,059 --> 00:05:09,201
For example, World of Goo started as a one-week

106
00:05:09,221 --> 00:05:12,123
student prototype with nothing but the word springs

107
00:05:12,183 --> 00:05:12,844
to inspire it.

108
00:05:13,264 --> 00:05:15,166
And there's plenty of examples of interesting mechanics

109
00:05:15,206 --> 00:05:17,728
that spawn from game jams, physics, shadows,

110
00:05:17,748 --> 00:05:18,509
the fourth dimension.

111
00:05:19,410 --> 00:05:21,331
The important thing is that there's just enough richness.

112
00:05:21,972 --> 00:05:25,512
to the mechanic that it creates a big enough possibility space where you can start exploring.

113
00:05:26,192 --> 00:05:29,313
And once you've got something that you can play around with, then you're in a position

114
00:05:29,353 --> 00:05:33,894
where you can experiment and start discovering the gameplay inside, or like squeezing the

115
00:05:33,934 --> 00:05:34,654
most juice out of it.

116
00:05:35,494 --> 00:05:39,095
And Maxis has a history of creating these kind of games, so today I'm going to talk

117
00:05:39,135 --> 00:05:42,636
about some of the things that I've learned about making sandbox games over the past few

118
00:05:42,656 --> 00:05:45,396
years, with plenty of examples from the new SimCity.

119
00:05:46,396 --> 00:05:47,037
And my hope is that...

120
00:05:47,531 --> 00:05:49,852
I present this information in a way that's useful to you,

121
00:05:49,932 --> 00:05:52,573
so that you can come away with some practical advice that

122
00:05:52,613 --> 00:05:54,714
relates to your current game development challenges.

123
00:05:56,475 --> 00:05:59,157
But first, I'd like to talk about our novel mechanic.

124
00:05:59,257 --> 00:06:01,238
And that's the one we used to create SimCity.

125
00:06:01,258 --> 00:06:02,218
And it's a bit more complicated.

126
00:06:02,238 --> 00:06:04,119
It's a simulation engine called Glassbox.

127
00:06:05,060 --> 00:06:08,661
Glassbox was developed by longtime Maxis veteran

128
00:06:08,781 --> 00:06:09,382
Andrew Wilmot.

129
00:06:09,582 --> 00:06:12,143
And it allows developers to quickly create

130
00:06:12,243 --> 00:06:14,504
completely data-driven simulations with thousands

131
00:06:14,524 --> 00:06:15,485
of objects interacting.

132
00:06:16,764 --> 00:06:20,905
It also has a nice architecture for gameplay engineers to plug in code, to control the

133
00:06:20,945 --> 00:06:26,228
movement of agents, or to drive graphics based on the simulation, or to add hooks for scripters

134
00:06:26,288 --> 00:06:28,509
to send events to the UI and to the code.

135
00:06:29,589 --> 00:06:35,952
It's also fast in that it's capable of handling thousands of objects, or units, and tens of

136
00:06:35,992 --> 00:06:36,853
thousands of agents.

137
00:06:37,481 --> 00:06:40,023
And now this talk isn't specifically about Glassbox,

138
00:06:40,103 --> 00:06:44,445
but it's about how we used Glassbox as our novel mechanic

139
00:06:44,486 --> 00:06:45,346
to create SimCity.

140
00:06:47,067 --> 00:06:49,108
But in order to give you some context for some of the things

141
00:06:49,149 --> 00:06:51,830
I want to talk about, I'm going to give you

142
00:06:51,870 --> 00:06:54,872
a quick crash course in Glassbox and some of the terminology

143
00:06:54,892 --> 00:06:55,192
around it.

144
00:06:55,352 --> 00:06:58,154
And if you're interested in more information,

145
00:06:59,395 --> 00:07:01,837
there's a much more in-depth deck

146
00:07:01,957 --> 00:07:04,158
about Glassbox that's on Andrew's website

147
00:07:04,198 --> 00:07:05,499
from our GDC talk last year.

148
00:07:07,600 --> 00:07:11,701
Okay, so Glassbox is a resource-based simulation engine.

149
00:07:12,181 --> 00:07:14,101
Resources are the basic currency of the game,

150
00:07:14,702 --> 00:07:15,982
so they're essentially variables.

151
00:07:16,302 --> 00:07:18,943
They're defined as integer values with a fixed capacity,

152
00:07:19,923 --> 00:07:22,404
and they can be stored inside various simulation objects,

153
00:07:22,944 --> 00:07:25,104
like units, or agents, or maps,

154
00:07:25,164 --> 00:07:26,185
which I'll talk about in a second.

155
00:07:26,925 --> 00:07:29,046
They can be tangible things like people,

156
00:07:29,126 --> 00:07:30,546
or coal, or parked cars,

157
00:07:31,046 --> 00:07:32,647
but they can also be intangible things

158
00:07:32,687 --> 00:07:35,007
like money, or pollution, or electricity.

159
00:07:37,839 --> 00:07:40,981
So, units are the basic building block of a simulation.

160
00:07:41,041 --> 00:07:47,286
So, in SimCity, they tended to be just buildings, but they could be anything, depending on what

161
00:07:47,306 --> 00:07:47,706
you're building.

162
00:07:49,047 --> 00:07:53,510
And for example, some of the disasters in SimCity, like the tornado was actually a unit

163
00:07:53,530 --> 00:07:55,172
that moved around and ran a simulation.

164
00:07:56,673 --> 00:08:00,836
They use rules to change their simulation state, so that's what our scripters are actually

165
00:08:00,896 --> 00:08:01,976
authoring, a bunch of rules.

166
00:08:03,057 --> 00:08:05,839
And their state is defined by the resources that they contain.

167
00:08:06,872 --> 00:08:10,276
So, for example, here's some examples of three units.

168
00:08:10,296 --> 00:08:12,779
We've got a house that has some people and some cars,

169
00:08:12,839 --> 00:08:15,862
and then a water tower that's got 75% water,

170
00:08:16,463 --> 00:08:19,146
and then an oil power plant that's filled with oil

171
00:08:19,186 --> 00:08:20,047
and has some workers in it.

172
00:08:22,467 --> 00:08:24,648
So maps represent resources in the environment.

173
00:08:24,768 --> 00:08:27,791
So things like forest or pollution,

174
00:08:29,272 --> 00:08:33,275
they're just essentially a grid of integer values.

175
00:08:33,375 --> 00:08:35,677
So for SimCity, that was our grid size,

176
00:08:35,717 --> 00:08:37,078
but it's totally variable.

177
00:08:37,839 --> 00:08:40,221
Here's just an example of what a map might look like.

178
00:08:40,281 --> 00:08:43,783
So the water table from in-game, we

179
00:08:43,823 --> 00:08:46,886
were using the map value there to tint the terrain

180
00:08:46,906 --> 00:08:49,188
so you could see where water is in the game world.

181
00:08:51,277 --> 00:08:59,760
This is just a quick video of using one of our debug tools to paint ground pollution

182
00:09:00,140 --> 00:09:00,720
into the ground.

183
00:09:00,800 --> 00:09:06,342
So you can see the ground pollution going up and then the texture underneath there is

184
00:09:06,402 --> 00:09:07,303
reflecting the state.

185
00:09:07,943 --> 00:09:09,623
Texture on the terrain is reflecting the state there.

186
00:09:13,504 --> 00:09:19,150
We can also use maps to distribute various effects like the location of forests or puffs of air pollution.

187
00:09:19,871 --> 00:09:23,395
Here's a picture of a forest of trees that's being distributed by the underlying forest map.

188
00:09:25,776 --> 00:09:27,797
So rules are the verbs of the simulation.

189
00:09:28,277 --> 00:09:30,157
They allow for scriptable simulation behavior.

190
00:09:30,177 --> 00:09:33,098
And if I had to compare the rules scripting language

191
00:09:33,138 --> 00:09:34,738
to something else, I'd say it's most like

192
00:09:34,858 --> 00:09:36,919
an assembly language where you're simply moving information

193
00:09:36,979 --> 00:09:38,139
from one register to the next.

194
00:09:39,559 --> 00:09:41,620
It's a declarative language, so there's no looping,

195
00:09:41,860 --> 00:09:43,961
but there's certain ways you can chain

196
00:09:44,021 --> 00:09:45,901
and branch rules together so that the scripters

197
00:09:45,941 --> 00:09:47,021
can create simple logic.

198
00:09:48,022 --> 00:09:50,142
And each rule is an atomic operation, meaning that

199
00:09:50,939 --> 00:09:55,421
When a rule is tested, all the statements in the rule must be able to succeed for the rule to be run.

200
00:09:56,022 --> 00:09:57,042
I'll show you an example of that.

201
00:09:59,023 --> 00:10:03,546
Today I'm just going to focus on unit rules, but all sorts of different entities in Glassbox can run rules.

202
00:10:05,447 --> 00:10:10,369
So here's a simple rule. This is an example rule from our smelting factory in-game.

203
00:10:10,389 --> 00:10:14,951
This is one of the things that the players can put down, and it converts ore and changes it into alloy.

204
00:10:15,932 --> 00:10:19,914
If we look at this example rule, it's tested at a rate of every two SIM ticks.

205
00:10:21,136 --> 00:10:24,997
And it applies one time and it takes 10 local or in,

206
00:10:25,037 --> 00:10:27,557
which means to subtract it from the local or resource,

207
00:10:28,538 --> 00:10:30,938
and then it produces 15 alloy.

208
00:10:31,038 --> 00:10:33,999
So if the unit has less than 10 or, the rule won't run,

209
00:10:34,039 --> 00:10:35,479
or if the unit doesn't have enough room

210
00:10:35,879 --> 00:10:38,219
in the alloy resource bin to produce 15 alloy,

211
00:10:39,080 --> 00:10:39,820
it also won't run.

212
00:10:39,840 --> 00:10:41,120
So this is the most basic kind of rule.

213
00:10:41,140 --> 00:10:43,180
It just does a simple resource conversion

214
00:10:43,220 --> 00:10:44,001
at a constant rate.

215
00:10:45,561 --> 00:10:47,041
If we wanted to get slightly fancier,

216
00:10:47,381 --> 00:10:48,722
we could add a line that writes out

217
00:10:49,556 --> 00:10:53,740
100 pollution to the air pollution map and also trigger a success event which can send

218
00:10:53,780 --> 00:10:56,762
a message to the game triggering a pollution effect and you can see it coming out of the

219
00:10:56,782 --> 00:10:57,463
smokestack there.

220
00:10:58,384 --> 00:11:02,807
From a different angle, here's like a debug representation of that map and it's writing

221
00:11:02,847 --> 00:11:05,850
out air pollution to the nearby cells on the air pollution map.

222
00:11:08,832 --> 00:11:13,236
Getting even more fancy, you can add a fail event which can send an alert to the game

223
00:11:13,276 --> 00:11:17,419
and the UI system which in turn can turn on some messaging about the state of the object

224
00:11:17,459 --> 00:11:17,880
in the UI.

225
00:11:20,463 --> 00:11:24,766
So that's a brief overview of the simulation units and the rules and I want to talk about

226
00:11:24,806 --> 00:11:26,387
the simulation agents as well.

227
00:11:27,187 --> 00:11:31,610
So agents or transactions are the main way that information is transferred around the

228
00:11:31,630 --> 00:11:32,051
simulator.

229
00:11:33,191 --> 00:11:36,814
They can be created by units and like units they carry resources.

230
00:11:37,654 --> 00:11:41,557
Because there can be tens of thousands of them, they don't run any simulation rules

231
00:11:41,757 --> 00:11:44,859
and when they're created, they're given a particular plan to follow.

232
00:11:44,919 --> 00:11:47,781
So they're always headed toward a certain sink or destination.

233
00:11:48,592 --> 00:11:53,034
For example, a rich person walking to find shopping might be headed toward a very specific

234
00:11:53,094 --> 00:11:56,356
sink like the Wealth 3 shopping sidewalk sink.

235
00:11:56,836 --> 00:11:57,657
Here's just an example.

236
00:11:58,077 --> 00:11:58,737
This is a person.

237
00:11:58,757 --> 00:11:59,377
He's an agent.

238
00:11:59,497 --> 00:12:01,138
He's carrying some resources.

239
00:12:01,158 --> 00:12:02,379
He's a Wealth 1 guy.

240
00:12:03,159 --> 00:12:03,779
He's not sick.

241
00:12:03,819 --> 00:12:06,160
He's got a little money and he's headed to work.

242
00:12:08,442 --> 00:12:11,163
And then here's an example where we've got three factories.

243
00:12:11,223 --> 00:12:14,664
They each have that work sink on them and then you can see the tiny little circles up

244
00:12:14,684 --> 00:12:17,766
in the corner are some people walking to those specific sinks.

245
00:12:20,784 --> 00:12:24,086
Another example is an agent carrying water.

246
00:12:25,007 --> 00:12:28,089
And since this is an unpolluted city, it's not carrying any germs.

247
00:12:28,149 --> 00:12:30,151
But if you pollute your city, it might be carrying some germs.

248
00:12:30,911 --> 00:12:32,593
And it's headed toward a water consumer sink.

249
00:12:34,274 --> 00:12:37,597
And most buildings in the game consume water, so they all pretty much have one of these

250
00:12:37,637 --> 00:12:38,217
sinks on them.

251
00:12:40,699 --> 00:12:46,563
And the behavior of a specific type of agent is controlled by a transport handler, which

252
00:12:46,583 --> 00:12:48,645
is custom gameplay plug-in code.

253
00:12:49,339 --> 00:12:53,142
The obvious handlers that we knew we'd have to create for SimCity were the vehicle and

254
00:12:53,162 --> 00:12:58,005
the pedestrian handlers, which turned out to be quite complicated and ended up having

255
00:12:58,045 --> 00:13:00,646
an engineer dedicated to each one for the entire length of the project.

256
00:13:01,767 --> 00:13:06,229
The vehicle handler controlled behaviors such as the global routing, changing lanes, passing,

257
00:13:06,310 --> 00:13:11,333
dealing with traffic lights, stopping for pedestrians, emergency vehicle behavior, and

258
00:13:11,373 --> 00:13:11,653
so on.

259
00:13:12,301 --> 00:13:14,723
and the pedestrian handler controlled behaviors like

260
00:13:15,184 --> 00:13:17,746
stopping at crosswalks or walking into buildings,

261
00:13:18,227 --> 00:13:19,948
avoidance of other pedestrians in a crowd,

262
00:13:19,968 --> 00:13:21,770
and also some emotional behaviors

263
00:13:21,810 --> 00:13:23,451
to give the players some storytelling,

264
00:13:23,491 --> 00:13:25,894
like grouping together or stopping to talk to each other,

265
00:13:25,954 --> 00:13:27,715
even though it didn't actually mean anything

266
00:13:27,735 --> 00:13:28,376
in the simulation.

267
00:13:30,358 --> 00:13:31,499
But throughout the course of the project,

268
00:13:31,519 --> 00:13:32,500
we ended up discovering...

269
00:13:33,217 --> 00:13:35,517
Some other uses for agents and implementing some different

270
00:13:35,658 --> 00:13:37,778
unexpected types of transport handlers.

271
00:13:38,659 --> 00:13:41,660
This pipe handler was a simplified version

272
00:13:41,940 --> 00:13:42,980
of the vehicle handler.

273
00:13:43,000 --> 00:13:44,241
It used the same routing system,

274
00:13:44,281 --> 00:13:45,821
but had some additional tweaks.

275
00:13:46,502 --> 00:13:48,662
And we ended up using that for power and water

276
00:13:49,163 --> 00:13:51,884
and for sewage, but as well as some more interesting

277
00:13:52,124 --> 00:13:54,325
hidden things, which I'll show you a little bit later.

278
00:13:55,325 --> 00:13:57,606
We had a radial handler, which was literally that,

279
00:13:57,666 --> 00:13:59,807
this agent spread out in a radius wave front

280
00:14:00,227 --> 00:14:02,428
and it transacted with any sinks that the wave passed.

281
00:14:03,390 --> 00:14:05,811
And then also we had a signal transport,

282
00:14:05,911 --> 00:14:09,072
which was essentially a timer that the scripters could use,

283
00:14:10,033 --> 00:14:11,133
where they would send out an agent

284
00:14:11,213 --> 00:14:13,595
and it would stay out there for a fixed amount of time

285
00:14:13,615 --> 00:14:15,736
and then come back and transact with that same unit

286
00:14:15,796 --> 00:14:18,557
so they could kind of delay a message using that.

287
00:14:20,938 --> 00:14:23,439
Here's an example of a unit rule creating an agent.

288
00:14:24,300 --> 00:14:26,040
In this case, this coal power plant

289
00:14:26,100 --> 00:14:28,081
is testing a rule every 16 SIM ticks.

290
00:14:28,722 --> 00:14:30,002
It's using 10 coal and putting...

291
00:14:32,405 --> 00:14:36,608
It's taking 10 coal out of itself and then putting 10 power into an agent

292
00:14:37,348 --> 00:14:42,110
and writing out some air pollution and then sending that power off to power consumer sync.

293
00:14:43,451 --> 00:14:44,431
Also playing a little sound.

294
00:14:45,072 --> 00:14:47,173
So that's the end of the Glassbox overview.

295
00:14:47,193 --> 00:14:50,014
And it should give you some context for the rest of the talk.

296
00:14:50,875 --> 00:14:51,915
So now what I'd like to do is share...

297
00:14:52,796 --> 00:14:55,377
some lessons learned from making sandbox games at Maxis,

298
00:14:55,417 --> 00:14:57,678
and I'll go through them one by one with some more examples.

299
00:14:58,298 --> 00:15:00,439
And while these examples are specific to SimCity,

300
00:15:01,480 --> 00:15:03,021
they're general enough lessons

301
00:15:03,081 --> 00:15:04,601
that I hope you could take them back with you

302
00:15:05,061 --> 00:15:06,562
and improve your development process

303
00:15:07,022 --> 00:15:08,303
or avoid some of the same pitfalls

304
00:15:08,343 --> 00:15:10,244
that we fell into while making SimCity.

305
00:15:10,304 --> 00:15:11,864
And of course, some of the best lessons

306
00:15:11,925 --> 00:15:12,765
are learned from failure,

307
00:15:13,325 --> 00:15:14,946
so hopefully by sharing these stories,

308
00:15:14,966 --> 00:15:16,487
we can all fail a little bit less together.

309
00:15:18,929 --> 00:15:23,332
So the first learning I'd like to talk about is to determine the granularity of your game.

310
00:15:24,212 --> 00:15:25,853
So what do I mean by granularity?

311
00:15:26,553 --> 00:15:31,136
Well, let's say you've figured out how your game mechanic is going to work, and you've

312
00:15:31,156 --> 00:15:35,859
got some kind of prototype going on, and now you're in a position where you can start playing

313
00:15:35,899 --> 00:15:36,679
around with the pieces.

314
00:15:38,200 --> 00:15:42,042
So for example, in World of You, you know, roughly how many interactions...

315
00:15:42,976 --> 00:15:46,479
does the player need to complete a compelling level?

316
00:15:46,759 --> 00:15:48,361
You know, is it 20 or 200 or 2,000?

317
00:15:48,861 --> 00:15:51,504
And in Minecraft, you know, how big are the blocks

318
00:15:51,564 --> 00:15:52,525
relative to the player?

319
00:15:52,645 --> 00:15:54,166
How many resources do you need to collect

320
00:15:54,226 --> 00:15:55,047
to craft something?

321
00:15:55,688 --> 00:15:57,169
Or how many blocks might it take

322
00:15:57,209 --> 00:15:58,830
to create some shelter in the game?

323
00:15:59,711 --> 00:16:01,333
Or how large does the grid need to be,

324
00:16:01,393 --> 00:16:02,193
or the world need to be,

325
00:16:02,293 --> 00:16:04,355
for the vehicle creation in Bad Piggies?

326
00:16:05,076 --> 00:16:06,037
So these are the kind of questions

327
00:16:06,057 --> 00:16:07,018
that we were asking ourselves

328
00:16:07,038 --> 00:16:09,140
in the very early stages of SimCity's development.

329
00:16:09,760 --> 00:16:11,461
And I think it's a critical first step

330
00:16:11,501 --> 00:16:13,462
to ask these kind of questions because so

331
00:16:13,482 --> 00:16:16,184
many different decisions hinge on their answers.

332
00:16:17,945 --> 00:16:19,947
So one of the first questions we had to address

333
00:16:19,987 --> 00:16:21,267
was the size of the play area.

334
00:16:22,348 --> 00:16:24,670
We ended up going with a two kilometer

335
00:16:24,710 --> 00:16:27,672
by two kilometer space, which is equivalent to the medium sized

336
00:16:27,712 --> 00:16:29,253
city in SimCity 4.

337
00:16:29,693 --> 00:16:31,274
And we chose this for a few different reasons.

338
00:16:31,314 --> 00:16:34,636
And one, we wanted to be able to have a richly detailed

339
00:16:34,676 --> 00:16:37,318
simulation where every person and vehicle could

340
00:16:37,358 --> 00:16:38,499
be represented as an agent.

341
00:16:38,917 --> 00:16:41,179
and every building could run its own simulation rules.

342
00:16:42,040 --> 00:16:44,822
And this isn't a typical open world kind of architecture

343
00:16:44,862 --> 00:16:46,844
where we can just unload the people in the vehicles

344
00:16:46,964 --> 00:16:48,586
once they're a few blocks away from the camera.

345
00:16:49,527 --> 00:16:52,009
Each one of them was holding some specific resources

346
00:16:52,049 --> 00:16:54,431
that were important to the state of the simulation.

347
00:16:54,912 --> 00:16:57,054
So, you know, while we didn't necessarily have to render them,

348
00:16:57,094 --> 00:16:57,955
we had to keep them active,

349
00:16:57,995 --> 00:16:59,836
and we had to keep them going toward their destination.

350
00:17:01,485 --> 00:17:05,586
So that said, bigger is always better, and a lot of people wanted bigger cities, obviously,

351
00:17:05,646 --> 00:17:10,968
but the other pressure is that Maxis games, especially SimCity, are fairly mass-market.

352
00:17:11,609 --> 00:17:16,470
So our min-spec machine is more in the range of your dad's computer rather than a top-of-the-line

353
00:17:16,490 --> 00:17:17,631
graphics card and CPU.

354
00:17:19,372 --> 00:17:21,332
So there were some trade-offs to be had because of this.

355
00:17:24,393 --> 00:17:25,994
The other thing we needed to figure out was...

356
00:17:26,498 --> 00:17:29,280
the level of detail that we need to simulate our buildings.

357
00:17:30,361 --> 00:17:32,883
In SimCity, buildings fall into two different categories.

358
00:17:32,903 --> 00:17:34,965
There's the ones that the player places themselves,

359
00:17:35,445 --> 00:17:37,387
and then there's the ones that the sims spawn.

360
00:17:38,208 --> 00:17:40,690
On the left, we've got RCI buildings,

361
00:17:40,710 --> 00:17:42,311
or residential, commercial, and industrial.

362
00:17:42,732 --> 00:17:45,214
And to create these, the player marks out zones,

363
00:17:45,694 --> 00:17:47,556
and then the simulation spawns them automatically.

364
00:17:48,681 --> 00:17:51,462
And on the right are the buildings that the player places down themselves.

365
00:17:52,003 --> 00:17:54,564
We call them toys internally on the team.

366
00:17:55,404 --> 00:17:59,767
And these are the buildings that provide city services like fire stations or universities

367
00:17:59,827 --> 00:18:00,527
or bus terminals.

368
00:18:01,448 --> 00:18:05,490
And we knew that we wanted to be able to compose the buildings up of smaller parts, but we

369
00:18:05,530 --> 00:18:06,850
weren't sure at what detail.

370
00:18:07,667 --> 00:18:12,489
And at one point we thought that skyscrapers were actually going to be, you know, stacks

371
00:18:12,569 --> 00:18:17,071
of units that each one was actually controlling, simulating 20 floors of the building, but

372
00:18:17,091 --> 00:18:19,932
we quickly backed away from that because it was just getting too complicated.

373
00:18:22,367 --> 00:18:25,932
So however, we did want the toys to be made up of different parts.

374
00:18:26,453 --> 00:18:30,799
Where the fantasy for the player was that they're getting this collection of toy pieces

375
00:18:30,859 --> 00:18:34,965
that they can kind of dump out on the table and then assemble, you know, their amazing

376
00:18:35,225 --> 00:18:36,888
fire station or their amazing power plant.

377
00:18:36,948 --> 00:18:38,710
So that was one of the motivations there.

378
00:18:39,901 --> 00:18:44,502
And for this specific thing, the design motivation was already there, because in previous SimCities,

379
00:18:44,542 --> 00:18:46,683
you had a budget slider for your city services.

380
00:18:46,723 --> 00:18:50,584
So slide it up and you could pay more money for the effectiveness of your medical system,

381
00:18:50,604 --> 00:18:51,104
for example.

382
00:18:51,925 --> 00:18:57,006
And we wanted to take that slider and break it down into a fun way so that you could construct

383
00:18:57,046 --> 00:19:00,227
buildings out of parts, where each part costs you a little extra money.

384
00:19:00,327 --> 00:19:04,188
So more of a granular way to deal with that issue.

385
00:19:04,585 --> 00:19:09,167
in your city. And we had no idea how many parts would be fun or how detailed they needed to be.

386
00:19:09,907 --> 00:19:15,189
So we started prototyping. And these are some early prototype pictures of a water pumping

387
00:19:15,229 --> 00:19:21,072
facility and a coal power plant. In the middle there's a palette for the parts of the coal

388
00:19:21,092 --> 00:19:26,434
power plant that we were building. We had three kinds of generators, two kinds of smokestacks,

389
00:19:26,874 --> 00:19:28,815
a power transmitter, a coal supply lot.

390
00:19:29,242 --> 00:19:31,743
a cold drop-off port, and two kinds of conveyor belts.

391
00:19:32,303 --> 00:19:34,064
And it let you build this awesome simulation

392
00:19:34,124 --> 00:19:35,784
of a power plant with all these moving parts,

393
00:19:35,924 --> 00:19:37,945
but the problem that we found pretty soon

394
00:19:37,985 --> 00:19:40,225
was that it would fail in all these complicated ways.

395
00:19:41,286 --> 00:19:42,786
Your power production could be stifled

396
00:19:42,846 --> 00:19:44,806
because you didn't have enough smokestacks,

397
00:19:45,447 --> 00:19:47,287
or the thing would overheat and catch on fire,

398
00:19:48,167 --> 00:19:49,608
and it just wasn't that much fun,

399
00:19:49,888 --> 00:19:52,349
or it would've needed way more UI

400
00:19:52,429 --> 00:19:54,049
than we had time for to make it fun.

401
00:19:55,013 --> 00:19:59,074
So we soon realized that we were going down this complexity rabbit hole and we eventually

402
00:19:59,114 --> 00:20:00,935
discovered some key learnings about these things.

403
00:20:01,675 --> 00:20:06,356
We found that in order to strike a good balance between functionality and customization, each

404
00:20:06,416 --> 00:20:11,997
building that you plop down had to function 100% on its own and the modules you add must

405
00:20:12,137 --> 00:20:13,718
only supplement this functionality.

406
00:20:13,758 --> 00:20:18,359
So we realized this, after we realized this, it became a lot easier to develop and design

407
00:20:18,699 --> 00:20:21,480
the different toy buildings, but we had to go through this process of discovery first.

408
00:20:22,744 --> 00:20:27,526
So here's a video of placing a large hospital down and adding some parts to it.

409
00:20:30,607 --> 00:20:32,127
This is with the recent game.

410
00:20:35,249 --> 00:20:36,929
Oh, that's loud.

411
00:20:41,371 --> 00:20:47,574
So this hospital, you know, by default can handle 100 patients and then you can put patient

412
00:20:47,814 --> 00:20:50,975
rooms down that just simply add to that capacity.

413
00:20:52,743 --> 00:20:53,806
and a bunch of other parts as well.

414
00:20:53,846 --> 00:20:55,850
You can put an ambulance bay down,

415
00:20:55,990 --> 00:20:57,714
and what that does is literally just gives you

416
00:20:57,874 --> 00:21:00,059
one additional ambulance that can respond to injuries.

417
00:21:04,472 --> 00:21:09,075
A few other things I want to point out, in this picture, this hospital that the player

418
00:21:09,095 --> 00:21:10,536
made is made up of eight parts.

419
00:21:11,677 --> 00:21:15,300
But there's a very simple hierarchy here, and you can see that with the yellow lines.

420
00:21:15,320 --> 00:21:20,464
In the base module, which is the first thing that you plop, is doing the bulk of the simulation.

421
00:21:20,904 --> 00:21:24,987
But in the simulator, it's connected to all the other modules, and that allows them to

422
00:21:25,027 --> 00:21:28,810
run rules which can share resources or operate on each other.

423
00:21:30,271 --> 00:21:31,072
Another picture of that.

424
00:21:31,634 --> 00:21:33,595
Here's a wind farm, so you can see this relationship

425
00:21:33,615 --> 00:21:35,097
between the base building and the windmills.

426
00:21:35,517 --> 00:21:37,198
The windmills actually produce the power,

427
00:21:37,679 --> 00:21:39,200
and then the base building has the rules

428
00:21:39,240 --> 00:21:40,341
that transmit the power.

429
00:21:43,464 --> 00:21:46,046
The other thing that we came up with pretty early on,

430
00:21:46,206 --> 00:21:48,168
which the art team really needed

431
00:21:48,288 --> 00:21:50,710
before they could go all out creating content,

432
00:21:51,110 --> 00:21:54,193
was determining this eight cubic meter granularity

433
00:21:54,273 --> 00:21:54,854
for the buildings.

434
00:21:56,612 --> 00:21:58,933
We also came up with a simple snap point system

435
00:21:58,993 --> 00:22:01,454
that allowed for the artists and the designers

436
00:22:01,474 --> 00:22:04,476
to set up male and female snap points

437
00:22:04,516 --> 00:22:06,777
so they could determine and give the player

438
00:22:06,837 --> 00:22:08,578
valid places for these things to attach.

439
00:22:09,999 --> 00:22:11,439
So here's some examples of the various ways

440
00:22:11,460 --> 00:22:14,221
we figured out the granularity for SimCity.

441
00:22:14,981 --> 00:22:16,622
The process of figuring this stuff out

442
00:22:16,662 --> 00:22:18,063
is gonna be different for each game,

443
00:22:19,064 --> 00:22:20,704
but in my experience, you wanna sort out

444
00:22:21,085 --> 00:22:24,246
these kinds of details and questions as early as you can

445
00:22:24,306 --> 00:22:24,546
because...

446
00:22:25,063 --> 00:22:29,345
Determining your granularity informs all sorts of other decisions about content.

447
00:22:30,225 --> 00:22:33,686
The scope of player interactions and the complexity of the simulation.

448
00:22:35,627 --> 00:22:40,649
So the next lesson is all about discovering fun patterns in your game and then exploiting

449
00:22:40,689 --> 00:22:41,949
them and reusing them over and over.

450
00:22:43,470 --> 00:22:47,472
As we were experimenting with Glassbox and playing around with the simulation, we started

451
00:22:47,512 --> 00:22:51,553
discovering certain patterns and things that were relatively straightforward to implement

452
00:22:51,973 --> 00:22:53,894
and went along with the grain of the simulator.

453
00:22:54,781 --> 00:22:56,923
And a lot of these had to do with the use of agents.

454
00:22:57,683 --> 00:23:01,327
So we knew we were going to use agents to represent people and vehicles, but we soon

455
00:23:01,367 --> 00:23:04,890
discovered some other uses for them, and I'll show off some examples.

456
00:23:06,211 --> 00:23:10,355
This was an early attempt at using radial agents for power transmission.

457
00:23:11,316 --> 00:23:14,719
And the windmills would create a radial agent carrying power, and then it would deliver

458
00:23:14,779 --> 00:23:16,360
that agent to any of the buildings.

459
00:23:17,671 --> 00:23:19,333
that had the power consumption sync.

460
00:23:19,353 --> 00:23:20,954
And it wasn't very realistic,

461
00:23:20,994 --> 00:23:23,597
and it's not what we ended up doing for power,

462
00:23:23,697 --> 00:23:27,100
but we ended up using this radial handler in other ways.

463
00:23:27,160 --> 00:23:30,543
For example, when you plop a park or a town hall,

464
00:23:32,846 --> 00:23:33,386
this video,

465
00:23:37,090 --> 00:23:39,952
we actually send out this radial wave of happiness.

466
00:23:39,992 --> 00:23:41,013
And it's not just an effect.

467
00:23:41,554 --> 00:23:44,415
that's actually an agent that's transacting with all those buildings,

468
00:23:44,835 --> 00:23:46,175
giving them a little bit more happiness.

469
00:23:46,795 --> 00:23:49,856
And happiness is what eventually causes buildings to go up in density.

470
00:23:52,777 --> 00:23:55,198
So here's another example of a transport handler.

471
00:23:55,238 --> 00:23:57,538
This is the pipe handler that I was talking about earlier.

472
00:23:59,519 --> 00:24:01,439
So it's a simplified vehicle handler,

473
00:24:01,579 --> 00:24:04,700
and it doesn't have any notion of lanes or the agents blocking each other.

474
00:24:04,740 --> 00:24:06,501
It's just using the raw routing.

475
00:24:07,881 --> 00:24:09,901
This is a video of a small city powering up.

476
00:24:18,308 --> 00:24:23,202
Did you know that all the dynamic lights on the building are driven directly by the power

477
00:24:23,242 --> 00:24:24,566
resource inside the building?

478
00:24:32,524 --> 00:24:35,684
Also in this example, there's only one source of agents,

479
00:24:35,844 --> 00:24:39,085
which is the power plant, but there's hundreds of sinks.

480
00:24:39,805 --> 00:24:42,145
But we discovered that we could flip that around

481
00:24:43,086 --> 00:24:44,966
and reverse that and create a sewage system.

482
00:24:45,666 --> 00:24:47,906
So every time a building consumes some water,

483
00:24:48,227 --> 00:24:49,087
it produces sewage.

484
00:24:49,487 --> 00:24:51,627
So here's a video of where we're plopping

485
00:24:51,647 --> 00:24:52,587
a sewage output pipe.

486
00:24:53,788 --> 00:24:55,908
And here there's hundreds of sources of agents

487
00:24:55,988 --> 00:24:56,848
and only one sink.

488
00:24:59,289 --> 00:24:59,889
Put that down.

489
00:25:00,329 --> 00:25:01,089
There goes the sewage.

490
00:25:02,970 --> 00:25:06,373
And that actually sent out a little radial wave of sadness about that.

491
00:25:07,093 --> 00:25:11,757
And what's happening here is when the sewage agents get to this output pipe,

492
00:25:12,858 --> 00:25:15,801
they're actually writing ground pollution into the ground right there.

493
00:25:15,841 --> 00:25:19,204
So it's a way of concentrating that ground pollution rather than, if you didn't have it,

494
00:25:19,384 --> 00:25:21,405
all the houses would write out the ground pollution themselves.

495
00:25:22,186 --> 00:25:24,588
And they were playing some effects when that transaction happened.

496
00:25:24,628 --> 00:25:27,531
You can actually see, you know, visualize the poo.

497
00:25:28,552 --> 00:25:28,712
So...

498
00:25:32,167 --> 00:25:36,109
So we also discovered, aside from just power, water,

499
00:25:36,149 --> 00:25:38,210
and sewage, there were some other ways that we were using

500
00:25:38,230 --> 00:25:39,131
these pipe agents.

501
00:25:40,051 --> 00:25:42,533
We found that we could use them as a call and response system.

502
00:25:42,613 --> 00:25:45,855
So I'm going to show some videos that have some debug

503
00:25:45,895 --> 00:25:47,836
stuff on, and this is usually invisible to the player.

504
00:25:49,797 --> 00:25:52,299
But in this video, a building's catching fire in

505
00:25:52,319 --> 00:25:52,859
the back there.

506
00:25:53,379 --> 00:25:56,041
And it's going to send out, there we go.

507
00:25:56,081 --> 00:25:58,382
So that is an invisible fire alarm agent.

508
00:25:59,374 --> 00:26:03,156
and that's transacting with the fire station and then that bouncy ball is a timer

509
00:26:03,877 --> 00:26:07,539
that's delaying the sending of the fire trucks. There we go.

510
00:26:08,079 --> 00:26:09,000
Fire truck's going to go out

511
00:26:09,600 --> 00:26:11,842
and we're going to see another house catch on fire near the bottom

512
00:26:14,543 --> 00:26:15,644
and send out another alarm.

513
00:26:16,064 --> 00:26:18,205
So you'll see that each

514
00:26:18,245 --> 00:26:22,068
fire station garage actually has its own sink for this alarm so that it can

515
00:26:22,108 --> 00:26:23,128
send out its fire truck.

516
00:26:25,225 --> 00:26:26,905
We ended up using this kind of pattern,

517
00:26:26,945 --> 00:26:28,086
this call and response pattern,

518
00:26:28,126 --> 00:26:30,126
for almost all the civic buildings.

519
00:26:30,766 --> 00:26:32,907
Ambulances responding to injuries,

520
00:26:33,027 --> 00:26:35,648
or police responding to crime, and so on.

521
00:26:37,869 --> 00:26:39,289
This is another example of how we used it

522
00:26:39,349 --> 00:26:40,670
for the RCI buildings.

523
00:26:42,330 --> 00:26:43,931
This is an RCI building that's opening

524
00:26:44,251 --> 00:26:45,491
for business in the morning,

525
00:26:45,531 --> 00:26:47,132
and it's sending out a call for workers.

526
00:26:47,892 --> 00:26:48,932
So the workers come in there,

527
00:26:49,272 --> 00:26:51,133
and then it sends out, now that it's open for business,

528
00:26:51,193 --> 00:26:52,413
it sends out a call for shoppers.

529
00:26:53,714 --> 00:26:54,514
And then the shoppers.

530
00:26:55,442 --> 00:26:55,802
There we go.

531
00:26:56,663 --> 00:26:57,944
Now some people are going to go shopping.

532
00:26:58,944 --> 00:27:00,225
And when they do go shopping, they

533
00:27:00,265 --> 00:27:02,347
get converted from their car or their person

534
00:27:02,387 --> 00:27:03,428
into the signal timer.

535
00:27:03,888 --> 00:27:05,069
So there, the shoppers are actually

536
00:27:05,109 --> 00:27:06,750
represented as these bouncing balls.

537
00:27:06,790 --> 00:27:07,711
And when they come back down, we're

538
00:27:07,871 --> 00:27:11,654
going to send them out with happiness.

539
00:27:13,876 --> 00:27:16,678
So here's that same pattern, but in a medium-sized city.

540
00:27:16,698 --> 00:27:20,241
And I kind of wish we had shipped with some

541
00:27:20,261 --> 00:27:21,682
of this debug stuff in, because I just

542
00:27:21,722 --> 00:27:22,943
love watching the complexity.

543
00:27:23,370 --> 00:27:25,450
that's going on here, when all these different buildings

544
00:27:25,850 --> 00:27:27,551
call for workers and call for shoppers,

545
00:27:28,031 --> 00:27:30,072
and you can actually see what's going on in the simulation.

546
00:27:33,173 --> 00:27:34,773
So anytime you see the blue bouncy balls,

547
00:27:34,793 --> 00:27:37,054
those are shoppers that are currently shopping

548
00:27:37,234 --> 00:27:37,834
at a building.

549
00:27:45,736 --> 00:27:47,977
And one final example that pulls this all together,

550
00:27:48,577 --> 00:27:50,558
this is a meteor strike disaster.

551
00:27:51,223 --> 00:27:54,285
So if you watch closely, you can see this initial radial agent

552
00:27:55,106 --> 00:27:56,687
that's triggering houses to panic.

553
00:27:57,167 --> 00:27:58,288
So they're turning out their lights,

554
00:27:58,368 --> 00:27:59,949
and they're sending people out onto the streets.

555
00:28:01,270 --> 00:28:02,752
And then the meteor strike will happen here.

556
00:28:05,614 --> 00:28:05,894
Boom.

557
00:28:06,394 --> 00:28:08,176
And that sends out a wave of heat

558
00:28:08,696 --> 00:28:10,858
that's then causing a bunch of houses to catch fire.

559
00:28:12,299 --> 00:28:14,340
And each of the houses is actually spreading heat

560
00:28:14,420 --> 00:28:16,642
as well with these little red radial agents.

561
00:28:16,722 --> 00:28:18,964
So that's how fire spreads in the game.

562
00:28:20,610 --> 00:28:21,931
a disaster, there was a fire truck and...

563
00:28:33,639 --> 00:28:34,719
Okay, so, um...

564
00:28:36,481 --> 00:28:37,181
So yeah, it's...

565
00:28:39,378 --> 00:28:41,679
Yeah, so as you're exploring your core mechanic,

566
00:28:42,099 --> 00:28:44,620
just always be on the lookout for patterns like these

567
00:28:44,680 --> 00:28:46,521
that just work or that just feel right,

568
00:28:47,061 --> 00:28:48,481
and then latch onto them and reuse them

569
00:28:48,521 --> 00:28:49,362
as much as possible.

570
00:28:49,882 --> 00:28:51,823
And you might find that you only need a handful of these

571
00:28:51,903 --> 00:28:53,723
to actually make a great game.

572
00:28:55,564 --> 00:28:57,325
So the next learning is that it's really important

573
00:28:58,045 --> 00:29:01,006
how you're gonna figure out how to scale your sandbox game.

574
00:29:03,127 --> 00:29:05,408
Building a sandbox game is especially tricky

575
00:29:05,568 --> 00:29:06,488
when it comes to performance,

576
00:29:06,508 --> 00:29:08,269
because you have to constantly be thinking about.

577
00:29:08,622 --> 00:29:09,723
the absolute worst case.

578
00:29:10,823 --> 00:29:13,724
It's easy to fall into that early game performance trap,

579
00:29:13,844 --> 00:29:15,905
thinking that you don't have performance problems

580
00:29:15,965 --> 00:29:18,245
when everyone's workflow involves starting

581
00:29:18,285 --> 00:29:19,206
a new game from scratch.

582
00:29:19,846 --> 00:29:22,047
And we had to take some careful measures that performance

583
00:29:22,087 --> 00:29:23,507
would hold up on large cities.

584
00:29:23,607 --> 00:29:25,608
So for example, it was almost never

585
00:29:25,708 --> 00:29:28,569
OK to just loop over all the agents or all the units.

586
00:29:29,370 --> 00:29:31,451
We had to bucket them into different sinks

587
00:29:31,512 --> 00:29:32,492
and operate on them that way.

588
00:29:33,113 --> 00:29:35,435
And for the routing, we had to round-robin

589
00:29:35,495 --> 00:29:36,816
through all the different sink types

590
00:29:36,856 --> 00:29:39,539
and then only propagating the navigation information

591
00:29:39,639 --> 00:29:41,180
for one of those per frame.

592
00:29:43,282 --> 00:29:45,444
And when it came to tracking performance,

593
00:29:45,564 --> 00:29:47,907
it was really important that we set up proper metrics

594
00:29:48,287 --> 00:29:49,268
on a variety of cities.

595
00:29:50,209 --> 00:29:51,190
Over the course of the project,

596
00:29:51,210 --> 00:29:53,572
we actually ended up with a pretty cool automated system

597
00:29:53,612 --> 00:29:55,333
for building cities and tracking frame rate.

598
00:29:55,895 --> 00:29:56,656
and memory metrics.

599
00:29:57,636 --> 00:30:00,317
The gameplay team added some hooks to all the player tools

600
00:30:00,377 --> 00:30:03,318
like zoning and road draw and plopping buildings

601
00:30:03,898 --> 00:30:04,778
so that when they're invoked,

602
00:30:04,798 --> 00:30:06,379
they spit out a command to the console

603
00:30:06,699 --> 00:30:07,899
and then you could build up a city

604
00:30:07,939 --> 00:30:10,140
and then copy and paste all those console commands

605
00:30:10,180 --> 00:30:11,001
into a test script,

606
00:30:11,561 --> 00:30:14,022
allowing us to procedurally recreate the city.

607
00:30:14,642 --> 00:30:16,823
And this was better than simply loading up a saved game

608
00:30:16,883 --> 00:30:18,563
because if the simulation changed,

609
00:30:18,883 --> 00:30:21,104
we wanted those changes to be reflected from the very start.

610
00:30:23,762 --> 00:30:28,225
And then we created a variety of cities, an empty one for baseline comparison, a small

611
00:30:28,285 --> 00:30:34,128
city and a target city, and then one for graphics performance that had background cities.

612
00:30:36,090 --> 00:30:41,573
And we used that one at different zoom levels and also with the simulation pause and unpause

613
00:30:41,613 --> 00:30:46,316
so that we could isolate different CPU or GPU differences in isolation there.

614
00:30:46,892 --> 00:30:48,814
So, and after that, our infrastructure team

615
00:30:48,854 --> 00:30:51,377
built up automated tests that would create these cities

616
00:30:51,818 --> 00:30:53,300
and measure frame rate and memory

617
00:30:54,121 --> 00:30:56,764
and collect this data as graphs and metrics on a webpage.

618
00:30:57,418 --> 00:31:00,881
And this was really invaluable because when you're working on a simulation,

619
00:31:01,021 --> 00:31:04,143
one tiny tuning change can ripple through the entire game,

620
00:31:04,944 --> 00:31:07,325
spiking up the number of vehicles or pedestrians,

621
00:31:07,405 --> 00:31:10,207
or at one point, doubling the number of sewage agents that,

622
00:31:10,427 --> 00:31:11,608
you know, from a simple tuning change.

623
00:31:12,009 --> 00:31:15,051
So it was really vital to be able to keep tabs on this stuff on a daily basis

624
00:31:15,071 --> 00:31:17,072
and be able to look at these graphs and go back and forth and see,

625
00:31:17,112 --> 00:31:18,973
oh, you know, something crazy changed on Thursday.

626
00:31:21,988 --> 00:31:24,510
So even when we solve for the target case,

627
00:31:24,550 --> 00:31:26,350
there's still this pretty big collection

628
00:31:26,371 --> 00:31:27,591
of worst case scenarios.

629
00:31:29,212 --> 00:31:30,532
You know, it's possible for the player

630
00:31:30,572 --> 00:31:33,614
to intentionally build worst case traffic jam,

631
00:31:33,974 --> 00:31:35,435
where they don't put any public transit,

632
00:31:35,635 --> 00:31:37,276
and it may not function well as a city,

633
00:31:37,336 --> 00:31:40,157
but it still needs to perform on your CPU.

634
00:31:40,877 --> 00:31:42,338
And on the other hand, you could build

635
00:31:43,158 --> 00:31:44,579
row after row of high density,

636
00:31:45,099 --> 00:31:46,760
residential and commercial skyscrapers,

637
00:31:46,820 --> 00:31:48,801
causing thousands of pedestrians to roam the streets

638
00:31:48,861 --> 00:31:50,542
because they choose to walk instead of drive.

639
00:31:52,208 --> 00:31:54,489
So I remember once loading up one of the cities

640
00:31:54,589 --> 00:31:56,410
from our internal population leaderboard

641
00:31:56,450 --> 00:31:59,270
and being shocked to discover that there were

642
00:31:59,610 --> 00:32:00,731
68,000 pedestrian agents live.

643
00:32:01,671 --> 00:32:03,331
So we had to do something about that,

644
00:32:03,411 --> 00:32:05,932
but changing the simulation wasn't really

645
00:32:05,972 --> 00:32:08,393
the right place to do that because we had to keep

646
00:32:08,473 --> 00:32:10,193
the integrity of the simulation going.

647
00:32:10,233 --> 00:32:11,774
But what we ended up doing was,

648
00:32:11,794 --> 00:32:13,754
you know, if there was a certain,

649
00:32:13,774 --> 00:32:16,135
over a certain threshold of vehicles

650
00:32:16,395 --> 00:32:17,995
or, you know, that were stuck in traffic

651
00:32:18,115 --> 00:32:19,696
or pedestrians that were walking around.

652
00:32:20,407 --> 00:32:23,148
We started picking and choosing ones to teleport to their destinations.

653
00:32:23,289 --> 00:32:31,212
So, you know, it was a good trade-off between performance and keeping the simulation without

654
00:32:31,252 --> 00:32:32,893
sacrificing the simulation integrity.

655
00:32:36,394 --> 00:32:41,136
Okay, so the next lesson learned is about exploring your game and your mechanics in

656
00:32:41,176 --> 00:32:42,077
a breadth-first way.

657
00:32:43,417 --> 00:32:45,257
So, what do I even mean by that?

658
00:32:45,317 --> 00:32:48,038
Well, I like to think about our gameplay effort

659
00:32:48,738 --> 00:32:50,759
as falling into four major categories.

660
00:32:51,239 --> 00:32:53,059
There's the code driving the core mechanic,

661
00:32:53,519 --> 00:32:54,980
so that was Glassbox in our case,

662
00:32:55,900 --> 00:32:58,721
coupled with the simulation rules, which are the data.

663
00:32:59,521 --> 00:33:01,001
And then we've got input and output

664
00:33:01,041 --> 00:33:03,622
in the form of player tools and feedback.

665
00:33:04,322 --> 00:33:06,863
And these arrows represent relative effort

666
00:33:07,183 --> 00:33:08,103
spent in the four areas,

667
00:33:08,143 --> 00:33:10,224
so I made the core mechanic ones longer

668
00:33:10,264 --> 00:33:11,344
since you generally start there.

669
00:33:12,655 --> 00:33:13,975
So in my experience, it works best

670
00:33:14,015 --> 00:33:15,275
to slowly build up in layers.

671
00:33:15,915 --> 00:33:18,436
You want to do a breadth-first search through the possibility

672
00:33:18,456 --> 00:33:19,296
space of your game.

673
00:33:20,436 --> 00:33:22,357
So for example, you might add some data

674
00:33:22,397 --> 00:33:25,638
to the game simulating criminals appearing inside of buildings.

675
00:33:26,378 --> 00:33:27,958
And then you find that you need more feedback.

676
00:33:28,158 --> 00:33:29,879
How does the player even know that a criminal's

677
00:33:29,939 --> 00:33:30,559
inside a building?

678
00:33:31,119 --> 00:33:33,059
And now you've got a problem that the player knows about,

679
00:33:33,119 --> 00:33:34,380
and they want to solve.

680
00:33:34,520 --> 00:33:36,540
So you give them some tools to do that.

681
00:33:37,140 --> 00:33:42,241
And you just kind of go through this little bits at a time.

682
00:33:43,242 --> 00:33:45,263
And, you know, don't go out too far on a limb.

683
00:33:45,843 --> 00:33:49,404
And maybe at some point along the way you realize you actually need to add a feature

684
00:33:49,484 --> 00:33:53,906
to the core mechanic, but by this point you'll have justified that need for that feature

685
00:33:53,986 --> 00:33:56,327
because of actual gameplay experience.

686
00:33:56,907 --> 00:34:01,169
And I think that's a key learning, is that you always want to justify your development

687
00:34:01,229 --> 00:34:05,291
effort based on real user feedback and based on gameplay experience.

688
00:34:05,931 --> 00:34:09,052
So what are some of the dangers of ignoring this lesson?

689
00:34:09,973 --> 00:34:11,833
Usually it involves wasting time and effort.

690
00:34:12,399 --> 00:34:13,419
on things that aren't important.

691
00:34:14,180 --> 00:34:16,342
So on SimCity, we did this a few different times.

692
00:34:17,843 --> 00:34:19,425
Once was with our player tools.

693
00:34:20,165 --> 00:34:22,227
Coming off of Spore and the building editors,

694
00:34:22,727 --> 00:34:25,830
we had this idea that we wanted the building construction

695
00:34:25,910 --> 00:34:29,273
to feel extremely creative and physical and tactile.

696
00:34:29,313 --> 00:34:31,355
So we ended up going pretty far down a hole

697
00:34:31,415 --> 00:34:33,536
with physics-based manipulations,

698
00:34:34,037 --> 00:34:35,638
with springs connecting the pieces,

699
00:34:36,619 --> 00:34:38,200
being able to stack them up and so on.

700
00:34:38,240 --> 00:34:40,442
So here's a video I saved from a couple years back.

701
00:34:41,761 --> 00:34:42,681
when I was working on this stuff.

702
00:34:43,001 --> 00:34:45,122
It was pretty cool and it was fun to work on,

703
00:34:45,202 --> 00:34:48,543
but it ended up being completely irrelevant

704
00:34:48,663 --> 00:34:49,603
for a number of reasons.

705
00:34:50,783 --> 00:34:52,624
For one thing, it didn't make sense,

706
00:34:52,964 --> 00:34:55,565
given our eventual snap point granularity,

707
00:34:56,405 --> 00:34:58,325
for a building to be at some non-right angle.

708
00:34:58,605 --> 00:35:00,806
And also, while we didn't know it at the time,

709
00:35:00,966 --> 00:35:02,887
players wouldn't actually be spending

710
00:35:02,927 --> 00:35:04,787
a very high percentage of their time

711
00:35:05,007 --> 00:35:05,807
editing their buildings.

712
00:35:06,407 --> 00:35:08,528
It turned out to be a relatively quick operation,

713
00:35:08,568 --> 00:35:09,708
like buying an upgrade.

714
00:35:10,746 --> 00:35:13,308
with less a degree of creativity than we originally thought.

715
00:35:17,632 --> 00:35:20,634
Another black hole we went down was related to the simulation rules.

716
00:35:20,654 --> 00:35:22,936
And we did this a few different times, but here's a good example.

717
00:35:23,837 --> 00:35:26,979
As we were getting the basic RCI simulation up and running,

718
00:35:30,702 --> 00:35:35,206
we thought it would be a great idea if we could tune the exact hours

719
00:35:36,427 --> 00:35:39,249
that each building was open regardless, or for each wealth class.

720
00:35:39,940 --> 00:35:44,384
If you had an office building where you could have the janitorial staff show up at 6am,

721
00:35:44,404 --> 00:35:48,569
and then the middle managers show up at 9am, and the executives could pop in for an afternoon

722
00:35:48,609 --> 00:35:48,929
meeting.

723
00:35:49,730 --> 00:35:54,875
And we tried this, and it created a lot of rules and tuning variables that turned out

724
00:35:54,915 --> 00:35:56,557
to be quite a nightmare to deal with.

725
00:35:57,518 --> 00:35:59,720
Pretty soon we realized that this was a terrible idea.

726
00:35:59,740 --> 00:36:03,264
It spiked the rule count and the complexity.

727
00:36:04,176 --> 00:36:09,377
The tuning folks balked at having to generate so much extra data per building, but most

728
00:36:09,437 --> 00:36:13,378
importantly as a player, you didn't even notice this happening at all.

729
00:36:14,158 --> 00:36:19,200
So, and by the way, what we ended up doing is having a 6 a.m. to 6 p.m. work shift for

730
00:36:19,360 --> 00:36:22,140
all the buildings, except for two exceptions.

731
00:36:22,160 --> 00:36:26,761
There were buildings that ran 24 hours a day, and also special ones that were open late

732
00:36:26,781 --> 00:36:28,242
at night, like nightclubs and things like that.

733
00:36:28,802 --> 00:36:32,103
So that's really all that we needed to create that feeling for the player.

734
00:36:33,904 --> 00:36:36,806
So the lesson here is to resist focusing too much effort

735
00:36:37,246 --> 00:36:38,948
on one part of the game in isolation.

736
00:36:40,369 --> 00:36:44,072
Resist the temptation to delve too deeply into one facet of exploration

737
00:36:44,692 --> 00:36:47,575
until you're sure you're on solid footing with everything else.

738
00:36:51,278 --> 00:36:54,420
So the next lesson learned is about balancing the effort

739
00:36:54,921 --> 00:36:56,602
that goes into code versus data.

740
00:36:59,495 --> 00:37:02,096
I found that in my experience working as a programmer,

741
00:37:02,616 --> 00:37:05,478
there's this delicate balance between the amount of effort

742
00:37:05,518 --> 00:37:07,078
that you put into engineering a system

743
00:37:07,318 --> 00:37:10,400
versus the amount of effort that the client of that system,

744
00:37:10,420 --> 00:37:13,081
whether they're an artist or a designer, puts in.

745
00:37:13,641 --> 00:37:16,142
So in a perfect world, there's this ideal amount

746
00:37:16,162 --> 00:37:18,243
of back and forth going on.

747
00:37:18,283 --> 00:37:20,264
The engineer implements an initial first pass,

748
00:37:20,804 --> 00:37:22,425
and then the content creator goes off

749
00:37:22,465 --> 00:37:24,006
and plays with it for a while, and they say,

750
00:37:24,286 --> 00:37:25,786
I got to this point, and now I need this feature.

751
00:37:26,501 --> 00:37:28,222
and you just have this nice iteration loop,

752
00:37:28,282 --> 00:37:29,343
nice tight iteration loop.

753
00:37:31,025 --> 00:37:32,886
And part of me feels like this ideal balance

754
00:37:32,966 --> 00:37:35,528
comes from simply having respect for each other's work.

755
00:37:36,869 --> 00:37:38,631
You know, when these collaborations work well,

756
00:37:38,711 --> 00:37:39,912
you're in the zone as a team.

757
00:37:41,072 --> 00:37:42,934
But if there's not enough communication

758
00:37:43,074 --> 00:37:46,237
or people's goals aren't aligned, it can go sour.

759
00:37:46,297 --> 00:37:49,539
So I've seen how it can go bad if the balance is off.

760
00:37:49,579 --> 00:37:52,521
And I've watched engineers completely over-implement

761
00:37:52,662 --> 00:37:53,322
in isolation.

762
00:37:54,194 --> 00:37:57,256
creating features up front that they think might be needed,

763
00:37:57,336 --> 00:37:59,657
but all it ends up doing is bloating the code

764
00:38:00,177 --> 00:38:03,539
and introducing complexities and complicating the process

765
00:38:03,599 --> 00:38:04,480
for the content creator.

766
00:38:05,743 --> 00:38:07,905
And on the other hand, I've seen content creators go off

767
00:38:07,945 --> 00:38:11,227
into a silo and attempt to just make do with what they've got.

768
00:38:12,368 --> 00:38:15,951
But this can have negative side effects as well that are just

769
00:38:15,991 --> 00:38:16,311
as bad.

770
00:38:16,331 --> 00:38:18,573
They'll end up stretching and bending the system in ways

771
00:38:18,613 --> 00:38:20,034
that it was never designed to handle,

772
00:38:20,494 --> 00:38:23,397
causing performance problems or data bloat that could have just

773
00:38:23,417 --> 00:38:25,518
been solved with the addition of some simple feature

774
00:38:25,578 --> 00:38:27,120
if they'd just been in better communication

775
00:38:27,540 --> 00:38:28,120
with the engineer.

776
00:38:30,262 --> 00:38:32,324
Here's an example from SimCity where I think we actually

777
00:38:32,344 --> 00:38:33,204
struck a good balance.

778
00:38:34,265 --> 00:38:35,046
For some context.

779
00:38:36,030 --> 00:38:39,552
In the game, pedestrians and vehicles are agents.

780
00:38:40,012 --> 00:38:40,973
They're carrying information.

781
00:38:41,533 --> 00:38:43,274
And one of the challenges that we had was that

782
00:38:43,694 --> 00:38:45,475
when an agent actually arrives at a building,

783
00:38:45,495 --> 00:38:47,096
it commits the transaction.

784
00:38:48,216 --> 00:38:50,137
So it's dumping the resources into the building

785
00:38:50,217 --> 00:38:50,917
and then it's gone.

786
00:38:51,738 --> 00:38:54,059
So there's this disconnect between the player's fantasy

787
00:38:54,399 --> 00:38:56,260
of what's happening versus what's really happening

788
00:38:56,280 --> 00:38:56,900
in the simulation.

789
00:38:57,340 --> 00:38:58,601
And one of the ways we got around this

790
00:38:58,661 --> 00:39:00,502
was to create a little animated vignette

791
00:39:01,322 --> 00:39:03,663
of people moving around the building, doing some behavior.

792
00:39:04,161 --> 00:39:07,383
giving the impression of activity when the building was in a certain simulator state.

793
00:39:08,583 --> 00:39:12,306
So here's a quick video showing off some sims constructing a building.

794
00:39:14,547 --> 00:39:18,189
And the only real simulation that's happening here is that there's a timer that's constructing

795
00:39:18,229 --> 00:39:22,291
the building, and every time you see the building lift up, that's actually just a simple resource

796
00:39:22,351 --> 00:39:23,672
changing, you know, increasing.

797
00:39:24,612 --> 00:39:27,354
All the movement of the people are just set up by an artist.

798
00:39:29,629 --> 00:39:34,133
So building this vignette system was one of the first projects given to one of our new

799
00:39:34,653 --> 00:39:39,656
gameplay engineers and since we weren't sure what the scope of this feature was going to

800
00:39:39,696 --> 00:39:45,240
be or how often we'd need to use it, I suggested that we just start small and take tackling

801
00:39:45,260 --> 00:39:48,283
the immediate problem at hand with the least amount of work.

802
00:39:48,843 --> 00:39:53,266
So the simulation was in a pretty basic state back then but we knew the buildings were going

803
00:39:53,286 --> 00:39:56,669
to need to construct and it was looking pretty dull at the time so I thought that would be

804
00:39:56,689 --> 00:39:58,030
a good starting point to work on this.

805
00:39:59,713 --> 00:40:02,956
And it turned out that the minimum amount of work is pretty much what you'd expect.

806
00:40:03,496 --> 00:40:07,199
It's a list of points for actors to walk around and some simple tools to set that up.

807
00:40:08,200 --> 00:40:11,822
But once that was done, we took a look at now, you know, what are all the vignettes

808
00:40:11,882 --> 00:40:14,644
that could now be created just using simply this code.

809
00:40:15,465 --> 00:40:19,308
The artist was off to the races, filling out content throughout the game where they could.

810
00:40:20,442 --> 00:40:25,665
And while that was going on, we could now look at what vignettes we still couldn't make

811
00:40:26,085 --> 00:40:26,926
with the current code.

812
00:40:27,826 --> 00:40:33,190
An example of something was the garbage pickup, where the agent's movement had to be relative

813
00:40:33,230 --> 00:40:36,492
to the garbage truck and relative to the trash can, so they could walk back and forth a couple

814
00:40:36,512 --> 00:40:36,712
times.

815
00:40:38,433 --> 00:40:45,037
And this would, you know, this required the ability to add, the ability to specify a point

816
00:40:45,097 --> 00:40:46,098
relative to some object.

817
00:40:47,034 --> 00:40:48,535
So, that's what he worked on next.

818
00:40:48,575 --> 00:40:49,536
And this cycle continued.

819
00:40:49,596 --> 00:40:51,297
And this example isn't that complicated,

820
00:40:51,317 --> 00:40:53,159
but my point is that you want to tackle

821
00:40:53,179 --> 00:40:56,041
these kind of problems in a way that you're consciously

822
00:40:56,162 --> 00:40:59,244
facilitating this back and forth between code and data,

823
00:40:59,424 --> 00:41:01,566
as I've found that it produces the best results.

824
00:41:07,711 --> 00:41:11,475
And here's just a nice video of a couple vignettes

825
00:41:11,615 --> 00:41:12,355
toward the end of the game.

826
00:41:12,415 --> 00:41:15,238
Here we have a baseball stadium and a soccer field.

827
00:41:16,646 --> 00:41:22,928
and they're running a bit more complicated data.

828
00:41:23,749 --> 00:41:26,190
They'll also scale up and down the number of people,

829
00:41:26,350 --> 00:41:27,850
depending on how many people are actually,

830
00:41:27,970 --> 00:41:29,411
how many sims are actually at these parks.

831
00:41:44,008 --> 00:41:47,712
So in order to discover interesting patterns inside your mechanic,

832
00:41:48,593 --> 00:41:49,995
you've got to be able to see what's going on.

833
00:41:50,095 --> 00:41:54,039
So this next lesson is about exposing as much data as you can,

834
00:41:54,059 --> 00:41:56,081
be it debug draw or whatever is available,

835
00:41:57,042 --> 00:42:00,446
and playing and developing your game with this information overload enabled,

836
00:42:00,846 --> 00:42:02,808
and then picking out the pieces that are important that way.

837
00:42:04,015 --> 00:42:09,501
So for SimCity, we relied heavily on various debug draw modes to expose what was going on.

838
00:42:09,521 --> 00:42:16,268
This is just an example of a water tower running a rule that's subtracting water from the surrounding water table.

839
00:42:21,808 --> 00:42:24,390
This is the debug mode for the vehicle transport handler,

840
00:42:24,430 --> 00:42:26,631
so it's showing off the destination of all the vehicles,

841
00:42:26,651 --> 00:42:28,472
there's little hovering disks above them,

842
00:42:29,073 --> 00:42:31,274
and then where those open sinks are on the buildings,

843
00:42:31,334 --> 00:42:32,495
and the colors of the sinks

844
00:42:32,555 --> 00:42:33,976
and the destinations all match up.

845
00:42:35,157 --> 00:42:36,958
It's also showing some of the simulation state

846
00:42:37,358 --> 00:42:39,019
at the intersection, so the traffic lights

847
00:42:39,540 --> 00:42:41,481
and the splines that vehicles are generating

848
00:42:41,901 --> 00:42:42,662
to make their turns.

849
00:42:44,623 --> 00:42:46,844
And this is a picture of the zoning system internals.

850
00:42:47,867 --> 00:42:49,247
You can see that the streets are broken up

851
00:42:49,307 --> 00:42:51,008
into these eight meter parcels to match

852
00:42:51,028 --> 00:42:53,009
with our snap point granularity.

853
00:42:53,550 --> 00:42:55,070
And the green outlines around the buildings

854
00:42:55,130 --> 00:42:56,531
represent the claimed space.

855
00:42:58,312 --> 00:43:00,893
So as our team of scripters began to ramp up,

856
00:43:01,454 --> 00:43:03,415
creating more simulation and new behaviors,

857
00:43:04,015 --> 00:43:05,796
it became harder and harder to understand

858
00:43:05,836 --> 00:43:08,137
what was actually going on inside the simulation,

859
00:43:08,738 --> 00:43:09,878
especially in larger cities.

860
00:43:10,579 --> 00:43:11,559
And this was pretty scary,

861
00:43:11,579 --> 00:43:13,480
because it made us question some of the earlier choices

862
00:43:13,540 --> 00:43:14,401
about granularity.

863
00:43:15,481 --> 00:43:17,402
Maybe we were making the simulation too complicated.

864
00:43:18,869 --> 00:43:24,031
So at one point, very early on, I wrote some code to simply print out the amount of garbage

865
00:43:24,271 --> 00:43:28,353
next to each building, data-driven way to do this, so that a scripter could fix a bug

866
00:43:28,373 --> 00:43:29,193
with the garbage system.

867
00:43:30,053 --> 00:43:34,775
We already had plenty of tools to inspect the simulation state, but the simplicity of

868
00:43:34,815 --> 00:43:39,897
being able to see a single system represented in isolation, that was a big win, and that

869
00:43:39,917 --> 00:43:41,458
was something we hadn't really done before.

870
00:43:42,201 --> 00:43:45,784
So we immediately saw the value of this and latched on to it.

871
00:43:46,244 --> 00:43:48,586
And it eventually turned into this data layer system

872
00:43:48,766 --> 00:43:49,647
that's in the game today.

873
00:43:50,567 --> 00:43:52,649
This is the way for players to expose

874
00:43:53,910 --> 00:43:57,793
specific about a particular slice of the simulation.

875
00:43:57,813 --> 00:44:00,115
This is actually what the garbage layer looks like today.

876
00:44:00,135 --> 00:44:04,779
It's a way for the player to just turn on a mode

877
00:44:04,819 --> 00:44:06,020
and just see what's happening.

878
00:44:06,753 --> 00:44:07,973
only with garbage in their city.

879
00:44:07,993 --> 00:44:09,314
They can see the amount of garbage,

880
00:44:09,354 --> 00:44:10,514
and they can see the garbage trucks,

881
00:44:10,574 --> 00:44:11,915
and they're called out where those are.

882
00:44:12,895 --> 00:44:14,315
There's a whole bunch of different data layers

883
00:44:14,335 --> 00:44:16,656
that you can add, you can turn on.

884
00:44:19,237 --> 00:44:21,018
So here's a really early video.

885
00:44:21,038 --> 00:44:22,218
This is the first time we tried

886
00:44:22,598 --> 00:44:25,119
representing data as bar graphs.

887
00:44:26,680 --> 00:44:27,960
So the height of each bar here

888
00:44:28,440 --> 00:44:30,101
represents the number of people in the building.

889
00:44:30,601 --> 00:44:32,202
And the yellow buildings are industrial,

890
00:44:32,242 --> 00:44:32,962
and the blue are commercial.

891
00:44:32,982 --> 00:44:34,962
And this is like at 6 p.m. when everyone's going home.

892
00:44:36,936 --> 00:44:40,097
And you can see some pedestrians walking home and filling up the green bars,

893
00:44:40,717 --> 00:44:41,677
which represent the houses.

894
00:44:41,697 --> 00:44:43,618
Of course, there's stuff on fire, too.

895
00:44:53,101 --> 00:44:56,742
I also just love looking at the early stuff, fond memories.

896
00:45:00,524 --> 00:45:03,805
And here's an example of that population layer today, running on a big city.

897
00:45:04,385 --> 00:45:05,885
So you can really get a sense for the movement.

898
00:45:06,954 --> 00:45:09,500
of information and agents that are flowing around your city.

899
00:45:17,089 --> 00:45:19,690
Another good example is with our vehicle and pedestrian

900
00:45:19,890 --> 00:45:20,751
transport handlers.

901
00:45:21,871 --> 00:45:24,673
We had a debug mode where you could see this color circle

902
00:45:24,713 --> 00:45:27,614
above the agent telling you which type of sync

903
00:45:27,654 --> 00:45:28,354
it was headed towards.

904
00:45:29,175 --> 00:45:32,397
And when this was enabled, it immediately exposed

905
00:45:32,497 --> 00:45:34,478
all kinds of meaning behind the agent behavior.

906
00:45:35,158 --> 00:45:37,359
And when you play with this on, you'd kind of discover

907
00:45:37,519 --> 00:45:40,081
interesting things that were going on, or even bugs.

908
00:45:42,142 --> 00:45:44,963
And we tried to find opportunities to expose this data

909
00:45:44,983 --> 00:45:45,403
to the player.

910
00:45:45,892 --> 00:45:46,833
in surprising ways.

911
00:45:46,853 --> 00:45:48,435
And one of the ways we did that was

912
00:45:48,915 --> 00:45:51,318
with this Mad Libs style sentence

913
00:45:51,358 --> 00:45:52,759
that we would come up with based on

914
00:45:53,019 --> 00:45:54,080
what we knew about an agent.

915
00:45:54,160 --> 00:45:56,783
So, you know, we knew he had a unique ID,

916
00:45:57,363 --> 00:45:59,765
we knew he was headed to a certain destination,

917
00:46:00,586 --> 00:46:02,848
and we knew what resources he was carrying.

918
00:46:02,928 --> 00:46:07,112
So, you know, this guy is going to toy work wealth one,

919
00:46:07,633 --> 00:46:09,835
which essentially means a city job as opposed to a RCI job.

920
00:46:11,598 --> 00:46:13,379
So we could come up with these mad libs,

921
00:46:13,399 --> 00:46:15,360
so walking to his poorly paying city job.

922
00:46:15,820 --> 00:46:18,201
So this is how we just, you know,

923
00:46:18,221 --> 00:46:19,502
a little fun joke for the player

924
00:46:19,542 --> 00:46:20,682
where you could click on anyone

925
00:46:21,202 --> 00:46:22,523
and get this little sentence about them

926
00:46:22,543 --> 00:46:23,884
and that would actually tell you something

927
00:46:23,924 --> 00:46:25,484
about what's happening inside the simulation.

928
00:46:27,045 --> 00:46:31,007
So as we built up the game and the feedback in layers,

929
00:46:31,587 --> 00:46:33,188
it took us a pretty long time to discover

930
00:46:33,268 --> 00:46:35,649
what information was actually important to the player.

931
00:46:36,609 --> 00:46:38,670
The core loop of the game had to come together enough

932
00:46:38,770 --> 00:46:39,971
until we were able to realize

933
00:46:40,492 --> 00:46:42,092
what to expose and how to expose it.

934
00:46:43,113 --> 00:46:44,353
So the takeaway from this lesson

935
00:46:45,014 --> 00:46:47,015
is that having lots of visualization tools

936
00:46:47,055 --> 00:46:48,816
at our disposal during development

937
00:46:49,256 --> 00:46:51,977
helped us to debug and helped us to digest the simulation

938
00:46:51,997 --> 00:46:52,778
and what was going on.

939
00:46:52,858 --> 00:46:55,139
So, you know, put as much of that stuff in as you can.

940
00:46:55,159 --> 00:46:58,060
And the next learning is,

941
00:46:58,080 --> 00:47:00,441
and this is I think one of the most important learnings

942
00:47:00,481 --> 00:47:03,943
for a sandbox game, is to don't seek out complexity.

943
00:47:03,963 --> 00:47:05,204
It will find you.

944
00:47:05,895 --> 00:47:07,596
And I realize it's a pretty general statement,

945
00:47:07,656 --> 00:47:09,997
and it could be applied to a lot of games,

946
00:47:10,057 --> 00:47:11,978
and even just to software engineering in general.

947
00:47:12,018 --> 00:47:16,061
But I can't overstate how completely evil complexity

948
00:47:16,181 --> 00:47:18,382
is in the particular case of a sandbox game.

949
00:47:19,703 --> 00:47:22,185
As you're working on the game, especially once your team is

950
00:47:22,225 --> 00:47:24,886
bigger, there's this tendency to want to just take what you've

951
00:47:24,906 --> 00:47:27,528
got and add just one more layer of complexity to it.

952
00:47:28,208 --> 00:47:30,089
And this happens when someone's working on a feature

953
00:47:30,109 --> 00:47:32,251
in isolation without the context of the rest of the game.

954
00:47:32,291 --> 00:47:33,772
But the thing you have to realize

955
00:47:33,812 --> 00:47:34,532
is that once you

956
00:47:35,338 --> 00:47:40,822
take your simple pieces and you let the player compose them freely, that in itself is a complexity

957
00:47:40,923 --> 00:47:41,423
explosion.

958
00:47:43,504 --> 00:47:47,107
So you know, complexity is going to rear its head during your game's development whether

959
00:47:47,127 --> 00:47:47,748
you like it or not.

960
00:47:47,808 --> 00:47:51,010
So don't give it a head start by over-designing the individual pieces.

961
00:47:51,911 --> 00:47:55,393
I find it's good practice to constantly ask yourself, you know, what could I remove from

962
00:47:55,433 --> 00:47:55,833
the game?

963
00:47:55,953 --> 00:48:00,437
Or if we didn't do feature X, you know, what else might we be able to improve?

964
00:48:00,997 --> 00:48:01,898
And I like this quote.

965
00:48:02,342 --> 00:48:04,303
that I saw fly by on Twitter a couple months ago,

966
00:48:05,164 --> 00:48:06,405
Ambition Limits Polish.

967
00:48:07,366 --> 00:48:09,848
For many games, and especially those at larger companies,

968
00:48:09,868 --> 00:48:11,970
there's this one resource that's completely fixed,

969
00:48:12,010 --> 00:48:13,451
and that's the amount of time that you have

970
00:48:13,591 --> 00:48:14,592
until you have to ship.

971
00:48:15,453 --> 00:48:18,275
So is the new feature that you wanna add so important

972
00:48:18,676 --> 00:48:20,077
that you'd be willing to sacrifice

973
00:48:20,497 --> 00:48:21,618
polishing what you've already got?

974
00:48:24,289 --> 00:48:28,731
The fire simulation is actually a good example in SimCity where we made this mistake.

975
00:48:29,612 --> 00:48:33,673
Early on in the project, we chose to fully implement this part of the game so that we

976
00:48:33,693 --> 00:48:38,455
could get an idea of the effort that it took, from scripting and from engineering and art

977
00:48:38,495 --> 00:48:41,657
and so on, so that then we could schedule out the rest of the game.

978
00:48:42,137 --> 00:48:45,078
And we really went down a rabbit hole with this.

979
00:48:45,118 --> 00:48:49,420
This was about a month of work for 12 people, like, you know, a couple years back.

980
00:48:49,980 --> 00:48:52,682
I managed to capture and save this little video.

981
00:48:54,344 --> 00:48:56,405
And here's all the crazy things that we were doing in this video.

982
00:48:59,186 --> 00:49:07,729
We had little agents instead of a vignette of people that would actually, when the fire

983
00:49:07,769 --> 00:49:12,951
truck arrives, it would actually create a unit there and little people would walk back

984
00:49:12,991 --> 00:49:13,351
and forth.

985
00:49:14,057 --> 00:49:15,798
that were actually transacting with the house,

986
00:49:16,698 --> 00:49:17,578
reducing the fire.

987
00:49:17,598 --> 00:49:21,819
The number of people that actually came in the truck

988
00:49:21,899 --> 00:49:23,519
were based on the number of people

989
00:49:23,579 --> 00:49:26,040
that were working at the fire station at the time.

990
00:49:27,280 --> 00:49:29,741
There was this dispatch tool and patrol markers

991
00:49:29,801 --> 00:49:31,381
for the fire trucks that you could plop down.

992
00:49:31,401 --> 00:49:34,121
And we just went way overboard on this.

993
00:49:34,582 --> 00:49:37,342
And in hindsight, it violated two of the other learnings

994
00:49:37,382 --> 00:49:40,103
I've already mentioned, which is breadth-first exploration

995
00:49:40,623 --> 00:49:41,663
and also the granularity.

996
00:49:41,703 --> 00:49:43,063
But hindsight's 20-20.

997
00:49:50,666 --> 00:49:55,252
And at the time, we just didn't realize the ridiculous scope of the game that we were

998
00:49:55,272 --> 00:49:55,712
trying to make.

999
00:49:56,253 --> 00:49:59,717
So there was a lot of pressure to demonstrate how cool this single system in isolation would

1000
00:49:59,737 --> 00:49:59,877
be.

1001
00:50:00,898 --> 00:50:04,121
But the problem is you can't really look at a single system in isolation.

1002
00:50:04,912 --> 00:50:07,115
You have to look at it within the context of the rest of the game.

1003
00:50:07,695 --> 00:50:12,100
So when we took a microscope to the fire system, it just made us feel like there wasn't enough

1004
00:50:12,181 --> 00:50:14,303
there and forced us to make it more complicated.

1005
00:50:14,323 --> 00:50:16,786
So just be careful of that trap.

1006
00:50:21,371 --> 00:50:24,395
So one thing I like to think about is like, you know those moments where

1007
00:50:24,898 --> 00:50:27,099
someone comes up to you and asks you for a feature request.

1008
00:50:27,299 --> 00:50:29,900
And sometimes it's trivial and easy to implement.

1009
00:50:30,581 --> 00:50:31,281
You go ahead and do it.

1010
00:50:31,321 --> 00:50:33,782
And otherwise, it's clearly outside of the scope of the current system,

1011
00:50:33,822 --> 00:50:34,882
so you can say no.

1012
00:50:35,583 --> 00:50:38,344
But for those times where it's somewhere in between,

1013
00:50:40,204 --> 00:50:42,665
if you're trying to decide whether it's worth the bang for the buck,

1014
00:50:42,845 --> 00:50:47,287
I would urge you to consider taking complexity and future effort into account.

1015
00:50:47,747 --> 00:50:48,888
You know, you might add the feature.

1016
00:50:49,465 --> 00:50:51,806
and be the hero, and then a month later you realize

1017
00:50:52,207 --> 00:50:53,827
you actually spent quite a bit of time,

1018
00:50:54,128 --> 00:50:56,008
more than you thought, that's gone into that feature

1019
00:50:56,068 --> 00:50:59,330
with bugs or iteration or just some tool change

1020
00:50:59,390 --> 00:51:02,391
that confused people, some human element to the problem.

1021
00:51:03,172 --> 00:51:05,853
And if you hadn't actually implemented that feature,

1022
00:51:06,453 --> 00:51:08,074
it's as if you magically get back

1023
00:51:08,394 --> 00:51:09,975
all that time and effort spent,

1024
00:51:10,275 --> 00:51:11,976
which would have gone to other things.

1025
00:51:12,056 --> 00:51:14,557
So, I'm not suggesting that you just go around

1026
00:51:14,577 --> 00:51:17,018
saying no all the time, but I think as an engineer,

1027
00:51:18,079 --> 00:51:19,981
it's important to keep in mind that saying no

1028
00:51:20,161 --> 00:51:21,842
is one of your tools and sometimes it's a really

1029
00:51:21,882 --> 00:51:24,685
powerful tool and if you think it's in the team's

1030
00:51:24,725 --> 00:51:27,647
best interest to not go down a particular path,

1031
00:51:28,227 --> 00:51:30,449
you should speak up and make a case for that.

1032
00:51:34,392 --> 00:51:35,573
So toward the end of the project,

1033
00:51:36,114 --> 00:51:38,075
it became apparent that our scope was so big

1034
00:51:38,115 --> 00:51:40,097
that we were standing on the edge of this giant chasm

1035
00:51:40,137 --> 00:51:42,298
of possibility space and for better or worse,

1036
00:51:43,139 --> 00:51:44,960
no one person on the team could even explore

1037
00:51:44,980 --> 00:51:47,122
the whole thing, or not in the time we had left.

1038
00:51:48,187 --> 00:51:51,449
And of course we had a whole team of QA testers exploring the game as well, but there was

1039
00:51:51,489 --> 00:51:54,990
just so much that you could do, and so many ways to combine all the pieces.

1040
00:51:55,050 --> 00:52:00,252
So that was a bit scary, and it felt like the team and QA were able to explore up to

1041
00:52:00,292 --> 00:52:03,973
a certain point before ship, but then in a matter of days after shipping, well after

1042
00:52:04,173 --> 00:52:08,895
servers were working, our combined players came along and just blew that exploration

1043
00:52:08,935 --> 00:52:13,096
out of the water, finding little oddities and problems at the edges of the simulation,

1044
00:52:13,997 --> 00:52:15,717
many of which we're addressing right now with patches.

1045
00:52:16,458 --> 00:52:16,598
So...

1046
00:52:17,668 --> 00:52:19,509
I hope the takeaway from this particular learning

1047
00:52:19,949 --> 00:52:21,730
is that you all go back to work next week

1048
00:52:21,770 --> 00:52:22,830
and rip a feature out of your games.

1049
00:52:26,292 --> 00:52:29,333
So here's the list of all the learnings.

1050
00:52:29,393 --> 00:52:31,734
SimCity is such a complex and layered game

1051
00:52:31,754 --> 00:52:34,196
that early on in development, it felt

1052
00:52:34,216 --> 00:52:36,036
like we were pushing this boulder up a hill.

1053
00:52:36,937 --> 00:52:39,138
For a while, the depth of the simulation wasn't there,

1054
00:52:39,178 --> 00:52:40,338
and the feedback wasn't good enough.

1055
00:52:40,937 --> 00:52:44,380
and we couldn't even demo the game without literally standing next to someone and telling

1056
00:52:44,400 --> 00:52:46,541
people what was happening inside their city.

1057
00:52:47,082 --> 00:52:52,786
And as time went on, the simulation got stronger and the UI improved and we reached this magic

1058
00:52:52,846 --> 00:52:56,549
moment where we felt like the boulder finally got to the top of the hill and then started

1059
00:52:56,609 --> 00:52:57,610
rolling down the other side.

1060
00:52:59,191 --> 00:53:03,094
And we'd have people play the game and instead of being utterly confused, they were telling

1061
00:53:03,194 --> 00:53:06,736
us obvious things that we needed to fix, like this tuning isn't right or I need more feedback

1062
00:53:06,776 --> 00:53:08,598
about which buildings are on fire and that kind of thing.

1063
00:53:09,620 --> 00:53:12,963
So we got to this point where instead of us pushing the game up, it started telling us

1064
00:53:13,023 --> 00:53:13,463
what to do.

1065
00:53:14,184 --> 00:53:20,288
And I think the good goal of any sandbox game developer is to try to reach that magic moment,

1066
00:53:21,169 --> 00:53:24,371
that point in your project, as soon as you possibly can, as early as you can.

1067
00:53:24,391 --> 00:53:28,214
And I hope that some of these learnings will help you get there sooner.

1068
00:53:29,115 --> 00:53:30,216
So thank you very much.

1069
00:53:38,018 --> 00:53:40,380
I also just wanted to thank the team at Maxis.

1070
00:53:40,800 --> 00:53:43,983
Everyone worked really hard to produce the game,

1071
00:53:44,003 --> 00:53:46,325
and they're still working hard on updates and fixes,

1072
00:53:46,805 --> 00:53:48,127
because we really care about the game.

1073
00:53:48,147 --> 00:53:49,248
We really care about our players.

1074
00:53:50,028 --> 00:53:52,030
One thing I just wanted to show you quickly,

1075
00:53:52,951 --> 00:53:57,374
before we do questions, is a video

1076
00:53:58,195 --> 00:53:59,796
that was put together by one of our engineers.

1077
00:53:59,837 --> 00:54:01,758
This was the engineer Richard Shimaka.

1078
00:54:02,379 --> 00:54:06,422
He was working on the data layer system.

1079
00:54:08,551 --> 00:54:11,554
And he made this video to show off the data layers system.

1080
00:54:12,574 --> 00:54:14,596
But I think it shows off a lot of cool things in the game.

1081
00:54:14,636 --> 00:54:17,518
So if I can actually get it running, quick time.

1082
00:54:24,364 --> 00:54:24,644
Awesome.

1083
00:54:24,684 --> 00:54:31,970
There we go.

1084
00:54:38,225 --> 00:54:39,634
Where are you?

1085
00:55:07,674 --> 00:55:12,675
This is people leaving school, giving education to all the different houses nearby.

1086
00:55:12,695 --> 00:55:21,858
This is the garbage layer with the garbage trucks picking up garbage.

1087
00:55:21,898 --> 00:55:34,322
And this is that population layer. People are going shopping and going to work.

1088
00:55:44,066 --> 00:55:47,529
These are buildings that are being constructed and going up in density with happiness.

1089
00:55:55,375 --> 00:56:08,646
Alright.

1090
00:56:08,666 --> 00:56:11,208
Okay, so we have time for a couple of questions.

1091
00:56:19,014 --> 00:56:19,474
Go ahead.

1092
00:56:19,675 --> 00:56:19,835
Yeah.

1093
00:56:19,855 --> 00:56:26,339
I just wanted to ask about how much the element of randomness comes in when you're doing the

1094
00:56:26,359 --> 00:56:28,921
sandbox games, especially with SimCity.

1095
00:56:28,941 --> 00:56:34,605
Because one of those things you showed there was the customers going to a shop to purchase

1096
00:56:34,645 --> 00:56:35,566
things and then going home again.

1097
00:56:35,586 --> 00:56:39,869
It kind of looked like as soon as they got that request to go to a store, they would

1098
00:56:39,889 --> 00:56:40,549
leave their house.

1099
00:56:41,150 --> 00:56:44,712
And so, because there was five houses next to each other and they all left at the same

1100
00:56:44,752 --> 00:56:45,053
time.

1101
00:56:45,073 --> 00:56:45,153
Yeah.

1102
00:56:45,573 --> 00:56:47,133
and all left the house at the same time.

1103
00:56:47,153 --> 00:56:49,594
So it didn't look like there was any randomness

1104
00:56:49,654 --> 00:56:51,274
in that particular transaction at all,

1105
00:56:51,694 --> 00:56:54,614
which seemed somewhat immersion breaking

1106
00:56:54,654 --> 00:56:56,475
in that probably people wouldn't spend

1107
00:56:56,595 --> 00:56:58,415
exactly the same amount of time in a store.

1108
00:56:58,835 --> 00:56:59,655
Is there a reason for that?

1109
00:56:59,695 --> 00:57:01,396
Like would that have taken too much,

1110
00:57:02,096 --> 00:57:03,636
like to update them at different times?

1111
00:57:03,736 --> 00:57:05,136
Is that kind of too much work?

1112
00:57:05,496 --> 00:57:08,877
I think it came down to like a complexity issue

1113
00:57:08,897 --> 00:57:11,777
or would people even notice that this was happening

1114
00:57:11,857 --> 00:57:13,218
if we varied that amount?

1115
00:57:14,225 --> 00:57:21,087
So the tuners actually had the ability to set the time that people were in a shop or in a cultural building.

1116
00:57:21,967 --> 00:57:25,188
So they could set that differently for each building.

1117
00:57:25,208 --> 00:57:30,969
But what we ended up realizing is that we had templates for all the, you know, there's like 27 types of RCI buildings.

1118
00:57:31,009 --> 00:57:38,151
And we ended up tuning most of the stuff inside those templates for the different wealth and density and then the three different types of buildings.

1119
00:57:43,921 --> 00:57:44,602
Hi.

1120
00:57:45,642 --> 00:57:51,126
Were there any patterns that emerged when you were developing the different systems

1121
00:57:51,166 --> 00:57:55,949
that surprised you, that either you thought needed to be changed because they were wrong

1122
00:57:55,969 --> 00:57:59,932
or sort of revealed something about the workings of a simulation of a city?

1123
00:58:01,413 --> 00:58:06,356
One thing that was kind of cool is that the way that our routing works, when people go

1124
00:58:06,416 --> 00:58:10,218
out and look for a job, they're actually going to take the first job that's available.

1125
00:58:11,701 --> 00:58:18,622
And one thing that was cool about that is you'd actually get businesses on the corners that

1126
00:58:19,782 --> 00:58:20,863
were the most successful.

1127
00:58:22,063 --> 00:58:28,044
Which just because you know the way that you had your your residential and your commercial and your industrial laid out,

1128
00:58:28,104 --> 00:58:32,485
the patterns that would emerge from that would actually cause certain buildings to work better in certain places.

1129
00:58:33,606 --> 00:58:34,946
So I think that

1130
00:58:36,226 --> 00:58:38,227
you know, that's one of the things you don't really realize at the first time.

1131
00:58:38,526 --> 00:58:42,928
few times that you play, but after a while you actually start developing strategies to

1132
00:58:42,968 --> 00:58:45,029
game that behavior, which was really cool.

1133
00:58:47,249 --> 00:58:54,012
I should also mention that there are some cards floating around that will actually give

1134
00:58:54,052 --> 00:58:58,754
you a free copy of the game that Charlie brought, thank you Charlie.

1135
00:58:59,634 --> 00:59:03,696
And people are distributing them back there, so when you leave, grab a card and you can

1136
00:59:03,816 --> 00:59:07,197
go on to Origin and just type in a code and get SimCity.

1137
00:59:10,639 --> 00:59:11,539
Oh, they look like this.

1138
00:59:13,120 --> 00:59:13,420
So.

1139
00:59:15,081 --> 00:59:15,761
A quick question.

1140
00:59:16,021 --> 00:59:16,241
Sure.

1141
00:59:16,722 --> 00:59:19,083
Do you know if Glassbox is deterministic

1142
00:59:19,983 --> 00:59:23,384
in the simulation sense?

1143
00:59:23,605 --> 00:59:25,745
So there's only a couple of places

1144
00:59:25,826 --> 00:59:29,207
where there's randomness in Glassbox,

1145
00:59:29,267 --> 00:59:30,948
in actual rules in the simulation.

1146
00:59:31,728 --> 00:59:33,709
A lot of the non-determinism comes

1147
00:59:33,769 --> 00:59:36,250
from the behavior of the agents, which are just

1148
00:59:36,290 --> 00:59:37,550
controlled by gameplay code.

1149
00:59:37,590 --> 00:59:39,311
So they could have, so each.

1150
00:59:40,672 --> 00:59:45,196
agent transport handler could be implemented with the deterministic behavior or not.

1151
00:59:46,117 --> 00:59:50,480
And most of the vehicle and pedestrian ones were not deterministic.

1152
00:59:50,601 --> 00:59:53,643
So you could get slightly different behaviors each time.

1153
00:59:54,144 --> 00:59:54,664
Okay, thanks.

1154
00:59:54,824 --> 00:59:57,546
Yeah?

1155
00:59:57,947 --> 01:00:03,251
So, during development, which of the systems was the trickiest to debug?

1156
01:00:03,671 --> 01:00:03,892
Sorry?

1157
01:00:05,453 --> 01:00:09,596
During development, which of all the gameplay systems was the trickiest to debug?

1158
01:00:10,458 --> 01:00:11,518
The trick is to debug.

1159
01:00:12,419 --> 01:00:17,022
I'd have to say the guy implementing our vehicle system,

1160
01:00:17,702 --> 01:00:20,084
this guy named Alex Harkness, is an amazing programmer

1161
01:00:20,104 --> 01:00:22,725
and just did a really great job with it.

1162
01:00:23,166 --> 01:00:25,767
But man, that was a very hard system to get right.

1163
01:00:27,768 --> 01:00:30,250
One of the bugs that we would find

1164
01:00:30,310 --> 01:00:31,390
is that you'd get gridlock.

1165
01:00:31,971 --> 01:00:34,592
And you could get gridlock for a million different reasons.

1166
01:00:34,853 --> 01:00:36,313
Something would go wrong or some flag

1167
01:00:36,333 --> 01:00:38,375
wouldn't be set on the traffic light or something.

1168
01:00:39,759 --> 01:00:41,820
So that bug just kept coming up,

1169
01:00:41,860 --> 01:00:43,101
and every time it happens, it's like,

1170
01:00:43,762 --> 01:00:44,742
it's death to your city.

1171
01:00:45,723 --> 01:00:47,824
So I'd say that was probably one of the most

1172
01:00:48,044 --> 01:00:49,385
complicated systems on the game.

1173
01:00:49,465 --> 01:00:52,087
The other one was the zoning system

1174
01:00:52,127 --> 01:00:53,448
that spawned the buildings,

1175
01:00:54,569 --> 01:00:58,711
because it had to do a lot of pre-caching of data

1176
01:00:59,171 --> 01:01:01,493
in order to efficiently decide where to put

1177
01:01:02,514 --> 01:01:04,115
these 27 different classes of buildings

1178
01:01:04,135 --> 01:01:05,616
that were trying to spawn all the time.

1179
01:01:06,176 --> 01:01:09,158
Okay, one more question?

1180
01:01:13,862 --> 01:01:17,062
You said about feature requests to programmers,

1181
01:01:17,422 --> 01:01:18,843
how you've got the option of saying no.

1182
01:01:19,263 --> 01:01:21,263
How do you counter that with the example

1183
01:01:21,303 --> 01:01:24,324
where you had that little bike with all those like,

1184
01:01:24,344 --> 01:01:27,624
you know, like we had a slide where, you know,

1185
01:01:27,664 --> 01:01:29,065
the designer's going to do it anyway

1186
01:01:29,085 --> 01:01:31,365
and it's going to overburden the system.

1187
01:01:31,405 --> 01:01:33,145
So how do you counter the, sorry,

1188
01:01:33,185 --> 01:01:35,546
I've got to say no with them just,

1189
01:01:35,566 --> 01:01:36,826
I'm going to do it anyway?

1190
01:01:37,946 --> 01:01:41,467
I mean, I feel like it's different team by team.

1191
01:01:41,827 --> 01:01:42,527
On our team we...

1192
01:01:43,159 --> 01:01:46,721
tended to just talk about it in a pretty civil way.

1193
01:01:46,781 --> 01:01:49,143
So there were certain things that people wanted to do

1194
01:01:49,223 --> 01:01:51,765
that if we had done, we just never would have shipped,

1195
01:01:51,785 --> 01:01:53,507
or we wouldn't be able to support big cities.

1196
01:01:53,547 --> 01:01:56,549
So that was part of, I think that the engineers

1197
01:01:56,589 --> 01:01:59,771
were pretty strict about performance

1198
01:01:59,852 --> 01:02:02,053
because it was a pretty obvious case that you could make,

1199
01:02:02,133 --> 01:02:03,234
like, okay, can you do that?

1200
01:02:03,835 --> 01:02:06,897
Can you have a whole city of tiny, tiny buildings

1201
01:02:06,997 --> 01:02:08,078
all doing that same thing?

1202
01:02:08,138 --> 01:02:11,561
So you can always come up with this worst case situation.

1203
01:02:12,932 --> 01:02:15,574
So rather than just designer putting their foot down,

1204
01:02:15,594 --> 01:02:16,955
it was more of a collaboration.

1205
01:02:17,956 --> 01:02:19,857
OK.

1206
01:02:20,638 --> 01:02:20,878
One more?

1207
01:02:21,598 --> 01:02:21,799
Sure.

1208
01:02:22,939 --> 01:02:24,300
At which phase in the development

1209
01:02:24,320 --> 01:02:28,223
did you guys really feel like the boulder had started

1210
01:02:28,263 --> 01:02:29,064
rolling down the hill?

1211
01:02:29,664 --> 01:02:32,166
And how did you keep the vision, how

1212
01:02:32,186 --> 01:02:34,448
did you keep the eye on that before you got there,

1213
01:02:35,048 --> 01:02:36,069
before your players told you that?

1214
01:02:36,569 --> 01:02:39,111
I mean, we were always trying to get there.

1215
01:02:39,717 --> 01:02:46,761
I think that when that ball crossed the threshold was probably in October of last year, so pretty

1216
01:02:46,821 --> 01:02:52,124
close to the end of the game, where we just had enough of everything in so that you could

1217
01:02:52,405 --> 01:02:56,167
have a coherent gameplay experience across all the different systems in the game.

1218
01:02:58,048 --> 01:03:03,031
So that's the thing about, and I'm hearing stories about previous SimCity's developments

1219
01:03:03,351 --> 01:03:07,833
went the same way, where you're just picking up all these pieces one thing at a time and

1220
01:03:07,853 --> 01:03:07,953
then...

1221
01:03:08,287 --> 01:03:10,507
you get to this point where you reach this threshold

1222
01:03:11,188 --> 01:03:13,368
and the game just feels like it came together.

1223
01:03:13,729 --> 01:03:14,709
So it takes a lot of work,

1224
01:03:15,749 --> 01:03:17,110
but I've also heard similar stories

1225
01:03:17,130 --> 01:03:18,570
for people doing sandbox games

1226
01:03:19,211 --> 01:03:21,992
where until all the little pieces start to lock down,

1227
01:03:22,012 --> 01:03:23,452
you can't tune the outer pieces

1228
01:03:23,512 --> 01:03:25,253
because one change early on

1229
01:03:25,293 --> 01:03:27,093
can really have these ripple effects through the game.

1230
01:03:27,974 --> 01:03:28,094
Yeah.

1231
01:03:29,614 --> 01:03:29,794
Okay.

1232
01:03:30,475 --> 01:03:31,215
So thanks everybody.

