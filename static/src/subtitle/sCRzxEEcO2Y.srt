1
00:00:04,148 --> 00:00:05,648
OK, so OK, my mic's working.

2
00:00:05,788 --> 00:00:06,008
Great.

3
00:00:07,209 --> 00:00:07,989
Good morning, everyone.

4
00:00:08,509 --> 00:00:10,430
Thanks so much for showing up so early.

5
00:00:10,770 --> 00:00:12,750
And welcome to day one of the main conference.

6
00:00:12,890 --> 00:00:14,871
If you've been to the summits over the past couple of days,

7
00:00:15,551 --> 00:00:16,671
I hope you enjoyed them.

8
00:00:17,072 --> 00:00:19,892
And welcome to those of you just joining us today.

9
00:00:20,353 --> 00:00:22,553
Before we start, I've got a couple of messages

10
00:00:22,593 --> 00:00:24,214
to pass on from the CAs.

11
00:00:24,754 --> 00:00:26,194
So the first thing is that if you

12
00:00:26,214 --> 00:00:28,495
can check all your phones or tablets or whatever

13
00:00:28,875 --> 00:00:31,216
are set to silent or turned off.

14
00:00:32,096 --> 00:00:35,079
The second thing is that about 15 minutes into this session,

15
00:00:35,239 --> 00:00:37,181
you'll be emailed a link to an assessment form.

16
00:00:37,782 --> 00:00:40,224
If you can really try and give any feedback on that,

17
00:00:40,624 --> 00:00:42,146
it is super useful.

18
00:00:42,206 --> 00:00:43,828
The speakers get to see it, and it's just

19
00:00:43,888 --> 00:00:45,870
incredibly appreciated if you could fill that out.

20
00:00:47,190 --> 00:00:49,351
OK, so let's get on with the talk.

21
00:00:50,992 --> 00:00:54,955
I'm Ines McKendrick, and I'm a programmer at a little UK indie

22
00:00:55,015 --> 00:00:56,936
game company called Hello Games.

23
00:00:57,837 --> 00:00:59,778
I've been there for about five years now.

24
00:01:00,559 --> 00:01:02,440
So I joined just before we released

25
00:01:02,600 --> 00:01:03,661
Joe Danger 2, the movie.

26
00:01:04,481 --> 00:01:07,945
and then have been working on a sci-fi exploration game,

27
00:01:08,005 --> 00:01:10,167
No Man's Sky, for about four years since then.

28
00:01:10,247 --> 00:01:12,589
So I started on that project really near the beginning

29
00:01:12,649 --> 00:01:14,711
when just four of us went and shut ourselves away

30
00:01:14,831 --> 00:01:17,594
in a little room in the office, right through to shipping,

31
00:01:17,774 --> 00:01:19,676
and now we're continuing to work on updates.

32
00:01:20,477 --> 00:01:24,759
Because we're quite a small company, and just because it suits me as well,

33
00:01:25,159 --> 00:01:27,641
I'm a bit of a generalist as a programmer.

34
00:01:28,241 --> 00:01:31,503
So I've worked on a number of areas across the project.

35
00:01:31,964 --> 00:01:34,885
So early on, I worked on a bunch of engine-related stuff.

36
00:01:35,686 --> 00:01:38,187
I've touched a whole load of the proc gen content,

37
00:01:38,728 --> 00:01:43,891
so things to do with foliage placement, some texturing, some model composition.

38
00:01:45,167 --> 00:01:49,288
I've also done some work on the visuals, for example, the atmospherics, the water rendering,

39
00:01:49,888 --> 00:01:54,090
and I've been involved with a whole bunch of gameplay-related programming as well.

40
00:01:54,570 --> 00:01:59,511
So, this talk is going to kind of reflect that. It's going to cover quite a lot of content across the board of the game.

41
00:02:00,672 --> 00:02:05,155
So, this talk is about continuous world generation in No Man's Sky.

42
00:02:05,655 --> 00:02:09,157
And what I mean by that is the technical architecture of the game.

43
00:02:09,858 --> 00:02:16,042
It's the code that lets us generate and simulate this world in real time as the game is running.

44
00:02:16,242 --> 00:02:25,488
But what it really means is, here's our story through a bunch of the really interesting and exciting problems that we got to solve while working on the game.

45
00:02:25,808 --> 00:02:30,091
And some of the aspects that make it a bit different to a lot of other games that are out there.

46
00:02:30,471 --> 00:02:32,852
in terms of the technical problems we got to work on.

47
00:02:34,252 --> 00:02:37,633
So, to give a brief summary of what I'm gonna talk through,

48
00:02:38,053 --> 00:02:40,394
first I'm gonna go over how we structure the world,

49
00:02:40,494 --> 00:02:44,315
how geometrically we build our planets on spheres

50
00:02:44,335 --> 00:02:47,275
and how we transform to that, how we work with voxels.

51
00:02:47,715 --> 00:02:50,056
Then I'm gonna talk through our generation pipeline.

52
00:02:50,136 --> 00:02:52,077
I'm gonna go through, step by step,

53
00:02:52,337 --> 00:02:55,578
the process of how we create worlds in real time,

54
00:02:55,778 --> 00:02:58,398
what's involved in taking an area of terrain

55
00:02:58,738 --> 00:02:58,858
and

56
00:02:59,319 --> 00:03:03,760
creating that through from being an empty space to something that we can render and play on.

57
00:03:05,001 --> 00:03:08,142
The threading, the parallelism and ordering issues to do with that.

58
00:03:08,923 --> 00:03:11,524
And finally I'm going to talk about our simulation itself,

59
00:03:11,944 --> 00:03:14,185
the special considerations that we have to take

60
00:03:14,685 --> 00:03:17,346
because we're working on a game that's generated in real time

61
00:03:17,866 --> 00:03:22,348
and occupies a space bigger than we can know a lot of information about.

62
00:03:24,411 --> 00:03:27,454
I think to understand the reason behind a lot

63
00:03:27,474 --> 00:03:29,756
of the technical decisions that we made on the project,

64
00:03:29,996 --> 00:03:32,459
you have to know a bit of background to it

65
00:03:32,699 --> 00:03:34,821
and to the team that I'm working as part of.

66
00:03:35,762 --> 00:03:38,464
So people probably know No Man's Sky

67
00:03:38,484 --> 00:03:40,546
is a sci-fi exploration game, but for those of you

68
00:03:40,626 --> 00:03:42,448
who aren't super familiar with it,

69
00:03:43,489 --> 00:03:46,091
it involves the players all starting on planets

70
00:03:46,131 --> 00:03:49,114
spread out across a vast galaxy.

71
00:03:51,298 --> 00:03:54,000
And you can take off from those planets and fly continuously

72
00:03:54,420 --> 00:03:56,062
and land on another piece of terrain.

73
00:03:56,102 --> 00:03:57,943
And the simulation continues throughout that.

74
00:03:59,044 --> 00:04:00,645
So so much of the tech is focused

75
00:04:00,806 --> 00:04:02,387
on that core design decision.

76
00:04:03,721 --> 00:04:05,722
Hello Games itself is a small team.

77
00:04:05,862 --> 00:04:07,763
As I said, we started off with just four of us

78
00:04:07,803 --> 00:04:08,804
working on the project.

79
00:04:08,844 --> 00:04:10,244
That's three programmers and an artist.

80
00:04:10,785 --> 00:04:13,606
And we've grown and changed size a little bit.

81
00:04:13,686 --> 00:04:16,788
And now we're settled at around 20 people for the time being.

82
00:04:17,208 --> 00:04:20,509
And that's about 10 programmers, so quite code heavy,

83
00:04:20,830 --> 00:04:21,710
and five artists.

84
00:04:22,571 --> 00:04:27,116
And on a team that size, I mean, everything is hard and everything has to count.

85
00:04:27,216 --> 00:04:32,843
You know, shipping a game, shipping a disc-based game with 20 people was a real challenge.

86
00:04:32,863 --> 00:04:35,125
I think it was a real achievement that I'm super proud of.

87
00:04:35,746 --> 00:04:40,131
But also it means when it comes to the work our artists are doing, the work our coders are doing,

88
00:04:40,432 --> 00:04:42,574
we have to be really careful about what we take on.

89
00:04:43,195 --> 00:04:48,059
Every asset that the artist produced has to count for so much more than the work they're doing.

90
00:04:48,480 --> 00:04:54,305
It has to have a real meaning in game and every technical decision that we take on as programmers has to be really pragmatic.

91
00:04:54,365 --> 00:04:59,931
We can't, we don't have an R&D team to go off and play with a lot of things for a long time.

92
00:05:00,111 --> 00:05:03,254
So we had to be really careful about our progress through the project.

93
00:05:04,399 --> 00:05:09,466
In terms of our philosophy as a company, we're fairly fast and iterative, and that's one

94
00:05:09,486 --> 00:05:14,154
of the benefits of being a small team, I guess, is that we can do that and it's a really enjoyable

95
00:05:14,214 --> 00:05:18,420
way to work, but it meant we could come across problems, find our way through them, and then

96
00:05:18,460 --> 00:05:19,041
see if there were...

97
00:05:19,842 --> 00:05:23,364
other design approaches and other technical approaches that could lead off from that.

98
00:05:23,444 --> 00:05:25,586
So we had fairly flexible design goals as well.

99
00:05:25,626 --> 00:05:30,068
We'd be really driven by people playing the game rather than by some

100
00:05:31,409 --> 00:05:34,851
solid design document laid out four years before the project shipped.

101
00:05:36,977 --> 00:05:39,059
As I noted, we have to make the most of our artists,

102
00:05:39,299 --> 00:05:41,801
but that doesn't just mean making the most

103
00:05:41,821 --> 00:05:42,862
of the content they produce,

104
00:05:42,982 --> 00:05:46,024
it also means generating content in a way

105
00:05:46,064 --> 00:05:47,865
that they have real control over.

106
00:05:48,246 --> 00:05:50,427
And that's something that is sometimes missing

107
00:05:50,467 --> 00:05:51,688
when people talk about PropGen,

108
00:05:51,728 --> 00:05:53,690
they talk about replacing artists.

109
00:05:54,370 --> 00:05:55,832
And hopefully through this talk,

110
00:05:55,892 --> 00:05:57,533
you see that that's not our philosophy at all.

111
00:05:57,573 --> 00:06:01,356
We want to be able to enable our artists to produce more

112
00:06:02,016 --> 00:06:04,178
rather than replacing them with an algorithm

113
00:06:04,198 --> 00:06:05,599
that doesn't quite do the same job.

114
00:06:07,593 --> 00:06:09,994
to give a bit more detail on our tech.

115
00:06:10,134 --> 00:06:13,095
So we work on our own engine, and that's written in C++,

116
00:06:13,496 --> 00:06:15,336
which is kind of inconsequential probably,

117
00:06:15,376 --> 00:06:16,897
but it's the first question everyone seems to ask,

118
00:06:16,957 --> 00:06:17,757
so I put it on there.

119
00:06:19,498 --> 00:06:21,559
If we had to make the decision of what engine to use now,

120
00:06:21,639 --> 00:06:23,800
I think that's a way less clear-cut thing.

121
00:06:23,920 --> 00:06:26,822
So you have to remember that we made the choice four years ago

122
00:06:26,882 --> 00:06:28,622
to work on our own engine at the time

123
00:06:28,682 --> 00:06:31,163
when there weren't really major voxel-based projects

124
00:06:31,284 --> 00:06:32,904
that had a lot of visibility

125
00:06:32,924 --> 00:06:34,705
that we could see in Unreal and Unity.

126
00:06:35,065 --> 00:06:36,226
So the thought of taking on...

127
00:06:37,086 --> 00:06:41,527
an existing engine and having to optimize in that and having to to work with boxes in that

128
00:06:42,087 --> 00:06:45,689
when we probably wouldn't have source code access and we wouldn't have a lot of support was

129
00:06:45,969 --> 00:06:52,310
a really daunting task for us, our own tech. We know what's going on there, you know, we know we have a lightweight renderer, we know what we can do to it.

130
00:06:52,651 --> 00:06:56,772
We know the sort of time that might be involved in expanding and improving that.

131
00:06:57,192 --> 00:07:02,253
So I'm not necessarily saying it's the right route for everyone to go down, but it was the right choice for us at the time for sure.

132
00:07:03,993 --> 00:07:08,916
We shipped simultaneously on PC and PS4, and we just worked simultaneously on both platforms

133
00:07:09,416 --> 00:07:13,098
throughout development, which again, as a small team, is a tricky thing to do.

134
00:07:13,658 --> 00:07:16,920
Just getting test coverage on those kind of things is an interesting problem.

135
00:07:18,615 --> 00:07:21,877
As the focus of the talk implies, we use runtime generation.

136
00:07:22,297 --> 00:07:25,118
But that has a number of really interesting consequences

137
00:07:25,179 --> 00:07:29,681
for the game and for tech problem solving within the game.

138
00:07:30,381 --> 00:07:32,403
So any generation that we do,

139
00:07:32,743 --> 00:07:35,484
because we're producing this vast amount of content,

140
00:07:35,805 --> 00:07:37,165
it's more than we can store offline,

141
00:07:37,305 --> 00:07:39,186
it's more than we can load into the game.

142
00:07:39,327 --> 00:07:40,707
So we're generating it at runtime

143
00:07:40,747 --> 00:07:42,488
and that gives us performance constraints

144
00:07:42,769 --> 00:07:44,830
on all of the generation work that we do

145
00:07:44,890 --> 00:07:45,550
that we might not.

146
00:07:46,010 --> 00:07:49,672
face if we were able to bake out a load of textures rather than generating them

147
00:07:50,252 --> 00:07:54,474
as you warp into a system or bake out a set of terrain rather than

148
00:07:54,934 --> 00:07:57,395
generating it in regions as you move around. That's really

149
00:07:58,076 --> 00:08:01,477
you know the significant bulk of the work that I'm going to talk about today.

150
00:08:02,258 --> 00:08:05,859
The other thing that comes from that is that we have to be able to simulate

151
00:08:05,899 --> 00:08:08,300
gameplay with only a small knowledge of the world.

152
00:08:08,761 --> 00:08:10,321
So if we're generating this whole planet...

153
00:08:11,262 --> 00:08:15,027
And that's a bigger space than we can really get much information about at all, you know.

154
00:08:16,469 --> 00:08:20,395
We can maybe know a few points of interest, but beyond that, any kind of data we have

155
00:08:20,435 --> 00:08:25,362
about it is too much data for us to keep in memory and for us to argue about all the time.

156
00:08:26,424 --> 00:08:31,851
So, any work that we do has to be able to work just in its own local space without knowledge

157
00:08:31,891 --> 00:08:35,856
of whether there's a lake over that mountain, whether you're at the highest mountain on

158
00:08:35,876 --> 00:08:37,438
the planet or just a mountain.

159
00:08:39,161 --> 00:08:43,026
And that's a really significant thing to keep in mind, I think, as I'm talking through this.

160
00:08:44,688 --> 00:08:48,771
A final note is that our engine is really agnostic to procedural content.

161
00:08:49,152 --> 00:08:52,455
I think people sometimes talk about No Man's Sky as the procedural game,

162
00:08:52,535 --> 00:08:54,516
and I'm not sure that's the right way to look at things.

163
00:08:54,917 --> 00:08:58,280
For us, our engine doesn't really care whether we generate the content online,

164
00:08:58,500 --> 00:09:01,282
or whether we've loaded it, or where it comes from at all, to be honest.

165
00:09:01,583 --> 00:09:02,924
You know, a texture is a texture.

166
00:09:03,544 --> 00:09:07,126
And that's a really significant and useful thing to say.

167
00:09:07,206 --> 00:09:09,187
And it's a useful thing to say about the game as well.

168
00:09:09,507 --> 00:09:10,768
The players shouldn't necessarily

169
00:09:10,808 --> 00:09:12,669
know whether your texture was generated

170
00:09:12,729 --> 00:09:14,550
or whether an artist created it.

171
00:09:15,370 --> 00:09:17,311
The sheer size of space that we're working with

172
00:09:17,511 --> 00:09:19,392
implies we have to generate content.

173
00:09:19,512 --> 00:09:24,195
But I guess one of the end goals for a lot of Proc Gen work

174
00:09:24,215 --> 00:09:26,216
at the moment would be that you can generate

175
00:09:26,256 --> 00:09:29,217
this massive space, that you can create a load of content that

176
00:09:29,237 --> 00:09:30,898
would be indistinguishable from something

177
00:09:30,958 --> 00:09:32,879
that an artist has authored directly.

178
00:09:34,803 --> 00:09:36,644
So like I said, to start with, I'm

179
00:09:36,664 --> 00:09:38,804
going to talk about structuring our worlds,

180
00:09:40,125 --> 00:09:41,605
working with our spherical planets.

181
00:09:42,545 --> 00:09:44,625
So to understand our simulation process,

182
00:09:44,665 --> 00:09:47,126
you kind of have to know how everything is laid out

183
00:09:47,146 --> 00:09:47,566
in this way.

184
00:09:47,826 --> 00:09:49,507
And also, it's just an interesting problem

185
00:09:49,527 --> 00:09:50,187
that we work through.

186
00:09:50,647 --> 00:09:52,047
It's one of those things where I say,

187
00:09:52,587 --> 00:09:54,047
we're dealing with planets in space,

188
00:09:54,067 --> 00:09:56,008
and we want you to be able to take off and land from them.

189
00:09:56,128 --> 00:09:57,748
And everyone has an opinion about how

190
00:09:57,768 --> 00:09:58,708
we should have done this.

191
00:09:59,309 --> 00:10:00,750
And we have a lot of opinions too.

192
00:10:01,670 --> 00:10:03,192
But we worked through a number of different things

193
00:10:03,212 --> 00:10:05,113
and I think it's probably interesting to talk through

194
00:10:05,493 --> 00:10:07,815
the different approaches that did and didn't work for us.

195
00:10:08,896 --> 00:10:12,858
So, our driving design goal is that ability to fly off the planet,

196
00:10:12,998 --> 00:10:14,540
fly to another planet, fly back.

197
00:10:14,860 --> 00:10:18,422
But it's also that we have distances that have meaning to the player

198
00:10:18,522 --> 00:10:19,403
that we're simulating.

199
00:10:19,883 --> 00:10:23,226
A large enough space for some of those to be significant to them.

200
00:10:23,766 --> 00:10:29,312
So we need to simulate a space where someone walking around the planet, if they want to walk to the other side,

201
00:10:29,352 --> 00:10:32,134
that should feel like a really weighty and significant thing for them to do.

202
00:10:32,234 --> 00:10:37,179
Or if they want to fly around the planet in a ship even, that should take a significant amount of time.

203
00:10:37,339 --> 00:10:39,601
And again, that changes the way that we work with things.

204
00:10:40,142 --> 00:10:42,865
We want our players to explore, to feel alone.

205
00:10:43,725 --> 00:10:47,289
And that needs those distances to be suitably large.

206
00:10:48,510 --> 00:10:54,311
So like I said, we went through a few iterations and here's the first one. So our first driving goals

207
00:10:54,872 --> 00:11:00,313
We essentially thought of this problem like you being a sphere which is an annoying problem

208
00:11:00,673 --> 00:11:06,035
you know if you've had to UV spheres then there are a bunch of issues there with poles and things like that, but

209
00:11:07,035 --> 00:11:10,378
Our first consideration was that we wanted to have

210
00:11:10,758 --> 00:11:13,079
a flat plane for the terrain to exist on.

211
00:11:13,500 --> 00:11:15,881
We wanted to simulate on an XZ plane

212
00:11:15,921 --> 00:11:18,123
in the way that you typically would in a game,

213
00:11:18,243 --> 00:11:21,305
have that flat, have the Y axis always be up,

214
00:11:21,505 --> 00:11:23,006
because that makes things a lot simpler,

215
00:11:23,146 --> 00:11:24,087
not just for simulation,

216
00:11:24,147 --> 00:11:25,708
but also for generating our terrain.

217
00:11:25,748 --> 00:11:28,170
There's no complications about distortion

218
00:11:28,330 --> 00:11:30,031
because you're just generating it

219
00:11:30,091 --> 00:11:33,354
in a really continuous XZ space.

220
00:11:34,374 --> 00:11:39,456
So what we did was we took this plane while you're on the planet and we let you explore it infinitely.

221
00:11:39,616 --> 00:11:44,217
So if you walk along in the x direction forever, we'll just keep making terrain over there.

222
00:11:45,478 --> 00:11:48,279
And same if you walk in the Z, but the moment that you leave that planet

223
00:11:48,339 --> 00:11:54,101
we'll take whatever space and terrain you have and we'll just wrap it around a sphere and we'll wrap it around with

224
00:11:55,041 --> 00:12:12,593
polls that are placed as far away from the player as possible so that the kind of pinching that you'd expect to see on the polls when you wrap a flat texture to it would at least be as far away as possible and we handled that in a shader so those fears in space for all actually entirely implicit.

225
00:12:14,791 --> 00:12:17,175
But of course, there are some problems with that.

226
00:12:17,435 --> 00:12:19,418
So you can kind of see the pinching at the bottom of the

227
00:12:19,438 --> 00:12:19,819
screenshot.

228
00:12:19,839 --> 00:12:22,743
This must be one of the oldest screenshots that we have of

229
00:12:22,843 --> 00:12:23,103
the game.

230
00:12:23,163 --> 00:12:23,965
It's pretty early on.

231
00:12:24,926 --> 00:12:27,570
You can kind of see the pinching at the bottom, some

232
00:12:27,610 --> 00:12:28,191
distortion there.

233
00:12:28,431 --> 00:12:29,152
And that's not that bad.

234
00:12:30,054 --> 00:12:32,716
the thing that makes that really bad is that you're moving around continuously,

235
00:12:32,756 --> 00:12:35,338
so you get some swimming coordinates on the sphere.

236
00:12:36,379 --> 00:12:42,504
And the really significant problem for us was that you end up with some impossible places on your flat terrain

237
00:12:42,824 --> 00:12:45,706
that you can't possibly map in a useful way to the sphere.

238
00:12:45,766 --> 00:12:49,309
So if you have these points of interest, maybe you want to share them with other players,

239
00:12:49,549 --> 00:12:51,851
you know, because we have some network aspects that use that,

240
00:12:52,452 --> 00:12:55,755
then they can't possibly have the same points, because the way your sphere looks

241
00:12:56,075 --> 00:12:59,157
depends where you take off from it or where you come into it.

242
00:13:00,332 --> 00:13:00,455
And...

243
00:13:01,880 --> 00:13:04,261
Also, our infinite generation has precision issues.

244
00:13:04,381 --> 00:13:08,123
And while you can fix that by wrapping all of your generation

245
00:13:08,163 --> 00:13:10,984
functions, we could have interpolation between noise

246
00:13:11,044 --> 00:13:13,265
or come up with a new noise function that

247
00:13:13,325 --> 00:13:15,726
tends to be more expensive than the generation we were already

248
00:13:15,767 --> 00:13:18,708
doing, and cost was a major factor.

249
00:13:19,048 --> 00:13:21,249
So I'd consider this a kind of naive approach.

250
00:13:21,729 --> 00:13:24,611
But at the same time, it would have been workable.

251
00:13:24,651 --> 00:13:26,432
I think you could take something like this

252
00:13:26,492 --> 00:13:28,393
and probably ship a game using it.

253
00:13:28,753 --> 00:13:30,534
But it wasn't the right one for us.

254
00:13:31,514 --> 00:13:33,775
So the next thing we thought about was like,

255
00:13:34,455 --> 00:13:37,297
well, a lot of people have been thinking about mapping

256
00:13:37,757 --> 00:13:40,478
terrain to spheres and to flat planes

257
00:13:40,518 --> 00:13:43,219
to a really long time, so we should look at cartographers

258
00:13:43,279 --> 00:13:44,360
and what they're doing.

259
00:13:44,760 --> 00:13:47,101
So I went through the Wikipedia list

260
00:13:47,241 --> 00:13:48,582
of all the good map projections

261
00:13:48,742 --> 00:13:50,743
and tried to find the ones with the least distortion

262
00:13:50,863 --> 00:13:53,524
because if you've ever experienced

263
00:13:53,804 --> 00:13:55,645
the cartography community, you've probably heard people

264
00:13:55,685 --> 00:13:57,786
complain about Mercator projection, which is fair,

265
00:13:57,886 --> 00:13:59,287
or if you came from Greenland,

266
00:13:59,347 --> 00:14:00,407
you probably know why that's bad.

267
00:14:02,449 --> 00:14:04,732
So, we tried to look for ones that would be more appropriate.

268
00:14:05,212 --> 00:14:08,757
But generally, there weren't solutions there that were useful to us.

269
00:14:09,237 --> 00:14:13,102
A lot of the transforms were either expensive or really expensive to invert.

270
00:14:13,122 --> 00:14:16,305
So, we need to transform from our flat plane to our sphere and back.

271
00:14:17,146 --> 00:14:23,975
Very often for like loads of vertices or loads of points. So that wasn't really an option and and some other

272
00:14:24,716 --> 00:14:31,285
Some other techniques that looked promising are really designed for the planet Earth. So that image on your left

273
00:14:31,465 --> 00:14:32,506
Yep had to check it was left

274
00:14:33,267 --> 00:14:36,230
I think is a Pierce-Conseal projection.

275
00:14:36,250 --> 00:14:37,171
I don't know how that's pronounced

276
00:14:37,211 --> 00:14:38,632
because I've only seen it written down,

277
00:14:39,153 --> 00:14:41,895
but that really only works if you have oceans

278
00:14:41,975 --> 00:14:44,037
in kind of the places that Earth has oceans

279
00:14:44,538 --> 00:14:46,980
and becomes pretty useless when you generalize that

280
00:14:47,100 --> 00:14:49,763
to arbitrary planets that we were generating.

281
00:14:50,303 --> 00:14:52,165
So we gave up on this one as well

282
00:14:52,465 --> 00:14:55,408
and moved on to the scary approach

283
00:14:55,728 --> 00:14:57,270
that we had been trying to avoid.

284
00:14:58,030 --> 00:15:00,312
And in some ways, this is the simplest approach,

285
00:15:00,692 --> 00:15:03,374
but it's the one with a wide-ranging number

286
00:15:03,394 --> 00:15:04,395
of consequences for us.

287
00:15:05,096 --> 00:15:08,438
So that approach is just to run our simulation on the sphere.

288
00:15:09,279 --> 00:15:11,521
So all our coordinates are nice and consistent

289
00:15:11,541 --> 00:15:12,421
within our solar system.

290
00:15:12,561 --> 00:15:13,742
You can be standing on a planet,

291
00:15:14,022 --> 00:15:15,163
you can be standing on space,

292
00:15:15,223 --> 00:15:18,986
and you just have this 3D continuous coordinate system.

293
00:15:19,006 --> 00:15:21,088
So that's nice in terms of gameplay.

294
00:15:21,688 --> 00:15:23,149
But on the other hand,

295
00:15:23,289 --> 00:15:25,671
this complicates all of our gameplay coding,

296
00:15:25,991 --> 00:15:27,633
because now, whenever you stand on a sphere...

297
00:15:28,293 --> 00:15:32,494
you don't know which way up is you have to do that calculation all the time and

298
00:15:32,594 --> 00:15:35,955
If anyone is like a physics programmer in the room, you're probably thinking ah

299
00:15:35,975 --> 00:15:40,196
So now my gravity is always going towards the center of the sphere or if you're a graphics

300
00:15:40,236 --> 00:15:46,477
Programmer in your shaders, you can never simplify anything to be 2d around your world

301
00:15:46,497 --> 00:15:50,298
You're always working on this curved plane. So it has knock-ons in just about

302
00:15:50,879 --> 00:15:56,322
Every area of code that you could think about it makes it more difficult to integrate other people's libraries because they're going to assume

303
00:15:56,342 --> 00:15:58,384
That you have an access that's consistently up

304
00:15:59,325 --> 00:16:03,888
I will be really excited to one day work on a project where I always know what up is and it's the same thing

305
00:16:05,769 --> 00:16:05,969
But it

306
00:16:07,630 --> 00:16:19,521
It is workable though, because you know, it's a simple calculation to do, you know, calculating your up vector from your position on a planet is just considering your position relative to the center, so it's cheap and simple.

307
00:16:20,561 --> 00:16:28,188
But there's a second problem that gets in the way just about all the time when you deal with things, and that is the hairy ball problem.

308
00:16:28,908 --> 00:16:36,111
So, this is a really intuitive theory and that's that if you take a sphere and you imagine it's really hairy and you try to comb it,

309
00:16:36,511 --> 00:16:42,193
you can't have continuous hair around that without having singularities, without having little licks, you know, picture that.

310
00:16:44,471 --> 00:16:46,513
So you can't have continuous tangents around your sphere.

311
00:16:46,833 --> 00:16:48,675
So that causes problems with lighting,

312
00:16:48,716 --> 00:16:50,137
with normal mapping all the time,

313
00:16:50,678 --> 00:16:52,840
and various other places where you don't really

314
00:16:52,961 --> 00:16:54,102
think about the fact that you need

315
00:16:54,122 --> 00:16:56,665
to use tangents that are in a continuous space.

316
00:16:56,785 --> 00:16:58,727
But suddenly, when you don't have them,

317
00:16:58,868 --> 00:16:59,668
then it's really obvious.

318
00:17:01,121 --> 00:17:03,963
But we can mostly counter that by using projection

319
00:17:04,063 --> 00:17:05,865
onto our sphere from three planes,

320
00:17:05,905 --> 00:17:07,866
like triplanar projection in some places,

321
00:17:08,107 --> 00:17:10,188
or along a single plane in other places.

322
00:17:10,889 --> 00:17:13,771
Or we can use local mapping, where maybe our tangents won't

323
00:17:13,871 --> 00:17:16,153
be deterministic, but they will be continuous.

324
00:17:16,213 --> 00:17:17,835
We can just calculate them from the first point

325
00:17:17,855 --> 00:17:20,517
we reach the planet, and then move them continuously

326
00:17:20,617 --> 00:17:21,057
from there.

327
00:17:22,839 --> 00:17:24,160
So it's definitely workable.

328
00:17:24,180 --> 00:17:27,843
And what we stuck with is just interesting for new people

329
00:17:27,863 --> 00:17:28,583
joining the project.

330
00:17:30,006 --> 00:17:34,231
The other thing about spheres is they're not a really great way for us to store data.

331
00:17:34,291 --> 00:17:39,598
Generally, if we have something like voxels or any other data structure,

332
00:17:39,658 --> 00:17:44,725
we want to store that in a contiguous cube-based system.

333
00:17:44,765 --> 00:17:46,287
So we do store data on a cube.

334
00:17:46,728 --> 00:17:49,931
we do a projection from our sphere to a cube,

335
00:17:49,971 --> 00:17:52,133
so we simulate everything on that sphere,

336
00:17:52,193 --> 00:17:54,756
but when it comes to store voxel data,

337
00:17:54,956 --> 00:17:56,538
we're mapping that onto a cube,

338
00:17:56,558 --> 00:17:58,981
and you can kind of see in the sphere in the diagram

339
00:17:59,261 --> 00:18:01,484
how it just about maps to the face of the cube.

340
00:18:01,524 --> 00:18:05,508
You can see where the vertices match up there, hopefully.

341
00:18:06,839 --> 00:18:08,460
You'd think that would cause a lot of distortion.

342
00:18:08,500 --> 00:18:12,444
So if you imagine that we're generating terrain on one of these,

343
00:18:12,524 --> 00:18:13,605
when we project to the other,

344
00:18:13,625 --> 00:18:19,290
then we're having some distortion in the size of the polygons we're generating,

345
00:18:19,510 --> 00:18:20,972
or the space that the voxels take up.

346
00:18:21,572 --> 00:18:22,934
But it's generally not a huge problem,

347
00:18:22,974 --> 00:18:24,595
because if we generate all our terrain

348
00:18:24,635 --> 00:18:26,437
and do most of our work in simulation space,

349
00:18:26,978 --> 00:18:29,200
and then only map it to a cube when restoring it,

350
00:18:29,520 --> 00:18:32,383
then it's just that the density of voxels

351
00:18:32,403 --> 00:18:35,606
or the space that that data is able to take up that's lost.

352
00:18:35,746 --> 00:18:38,148
So for example, it means in some areas,

353
00:18:38,648 --> 00:18:40,710
we'll have a mountain that's composed

354
00:18:41,291 --> 00:18:43,113
of a lower density of voxels than another one.

355
00:18:43,453 --> 00:18:44,814
It'll maybe be slightly lower poly,

356
00:18:44,854 --> 00:18:45,955
but that's probably not noticeable,

357
00:18:46,155 --> 00:18:47,176
but we won't have mountains

358
00:18:47,216 --> 00:18:49,098
that become half the size or something.

359
00:18:50,385 --> 00:18:56,551
A question I get sometimes is why we didn't just simulate on a cube, but having edge cases at corners,

360
00:18:56,571 --> 00:19:00,895
like literal edge cases in your world, seemed like a nightmare to deal with,

361
00:19:01,075 --> 00:19:05,719
you know, having testers come back with problems that only occur in very specific places on your terrain.

362
00:19:06,259 --> 00:19:09,863
So, simulating on a sphere seemed like the right way for us.

363
00:19:11,204 --> 00:19:14,545
And that sphere to cube transform, that's really super simple.

364
00:19:15,666 --> 00:19:20,828
So we can do it just by calculating our height offset above the planet,

365
00:19:21,928 --> 00:19:26,631
projecting that down onto the sphere just by normalizing that direction and multiplying it by radius,

366
00:19:26,971 --> 00:19:32,273
and we can calculate which cube face we're on just by taking the absolute value of the largest direction.

367
00:19:32,313 --> 00:19:33,474
So this is a really...

368
00:19:34,374 --> 00:19:39,216
simple bit of code to write and it's really cheap and we can do it all the time without having a load of concerns

369
00:19:39,396 --> 00:19:41,297
about the fact we're working in two spaces at once.

370
00:19:42,717 --> 00:19:45,518
And our result is not on the face of a cube.

371
00:19:45,578 --> 00:19:50,960
That's the other thing to note is we're, when I say we're working on the sphere, we're not working directly on the sphere surface.

372
00:19:50,980 --> 00:19:53,981
We're working on, you know, a height map or some terrain offset from the sphere.

373
00:19:54,041 --> 00:19:57,602
So we end up with some space offset from our cube at the other end.

374
00:19:59,652 --> 00:20:01,974
and going along those lines.

375
00:20:03,195 --> 00:20:05,737
That means we're only mapping a limited space offset

376
00:20:05,797 --> 00:20:06,338
from the sphere.

377
00:20:06,878 --> 00:20:09,140
Because the further out you get from the surface of the sphere,

378
00:20:09,661 --> 00:20:12,063
intuitively, the more distortion you're going to see.

379
00:20:12,203 --> 00:20:13,884
So if you imagine the point at the center of the sphere,

380
00:20:13,904 --> 00:20:14,985
you're going to see a lot of distortion.

381
00:20:15,465 --> 00:20:18,966
versus the point at the center of a cube that's going to be infinitely small in sphere,

382
00:20:19,006 --> 00:20:22,567
whereas you can make it up of a number of regular voxels in the cube.

383
00:20:23,708 --> 00:20:28,929
And if you progress along that you can see the distortion gets worse and worse as you go inwards or outwards from your sphere.

384
00:20:28,949 --> 00:20:35,331
So we can only simulate a limited space and we choose about 128 meters of height

385
00:20:36,131 --> 00:20:38,112
for the sort of voxel data that we store there.

386
00:20:39,827 --> 00:20:46,372
Which isn't enough, I mean 128 meters gives you some little hillocks maybe, it's not particularly interesting,

387
00:20:46,412 --> 00:20:49,934
it doesn't give us the kind of deep oceans that we want or the high mountains.

388
00:20:50,315 --> 00:20:53,096
So what we do instead is we add this elevation data.

389
00:20:54,017 --> 00:20:59,901
We add it into our transform, so rather than considering the radius of our sphere to be consistent,

390
00:21:00,342 --> 00:21:06,446
we choose it, we consider it to be varying based on noise over the surface of the sphere.

391
00:21:06,926 --> 00:21:10,329
So we have an offset of about 600 meters to a kilometer,

392
00:21:11,409 --> 00:21:14,451
which allows us to get really high mountains and deep oceans up to that,

393
00:21:14,552 --> 00:21:18,394
and then still have our 128 meters of voxel data offset from that.

394
00:21:19,155 --> 00:21:22,978
That's really cheap, and we can also cache the results for the local area we're in,

395
00:21:23,018 --> 00:21:27,901
so that when we're doing those transforms, then it doesn't cause a problem either.

396
00:21:28,822 --> 00:21:31,203
and that's kind of how it fits in with our transform.

397
00:21:31,303 --> 00:21:34,105
So really all we're doing is calculating a single point

398
00:21:34,145 --> 00:21:36,046
of noise every time we call this transform.

399
00:21:36,566 --> 00:21:38,768
And then at the other end, we're projecting that down

400
00:21:38,828 --> 00:21:41,149
still onto our non-elevated surface of our cube.

401
00:21:45,092 --> 00:21:47,633
So working with voxels, I've mentioned voxels a few times,

402
00:21:47,673 --> 00:21:50,355
let's go into some details on how we use them.

403
00:21:52,296 --> 00:21:55,838
So we consider our voxels in chunks, we have regions,

404
00:21:56,839 --> 00:21:56,959
and...

405
00:21:57,513 --> 00:21:59,475
For the time being, I'm just talking about the nearest lot,

406
00:21:59,495 --> 00:22:01,697
where all of our voxels are one meter cubes.

407
00:22:02,258 --> 00:22:04,340
So we take all these regions, and we process them

408
00:22:04,380 --> 00:22:06,021
individually, and each one comes out

409
00:22:06,041 --> 00:22:08,764
to be a single area of terrain.

410
00:22:09,725 --> 00:22:11,226
Our regions are 32 by 32 by 32 meters of in-game data.

411
00:22:14,469 --> 00:22:16,590
But we need some additional voxel data there.

412
00:22:16,630 --> 00:22:18,411
So we need one row of voxels around the edge

413
00:22:18,431 --> 00:22:19,771
so that we can polygonize safely

414
00:22:19,951 --> 00:22:21,612
because we're creating vertices

415
00:22:21,772 --> 00:22:23,733
in between eight of our voxels.

416
00:22:24,153 --> 00:22:27,554
So we need that extra space to get to fully cover the area.

417
00:22:27,974 --> 00:22:29,135
But in addition to that,

418
00:22:29,775 --> 00:22:32,876
we want to polygonize a little bit outside each region

419
00:22:32,916 --> 00:22:33,796
and have some overlap.

420
00:22:33,856 --> 00:22:36,317
And that just covers for seams between the terrain

421
00:22:36,357 --> 00:22:37,218
due to precision issues.

422
00:22:37,698 --> 00:22:39,679
So in the end, we end up polygonizing an area

423
00:22:39,719 --> 00:22:40,639
that's about 36 by 36 by 36 voxels.

424
00:22:43,120 --> 00:22:46,202
And our individual voxels are about six bytes.

425
00:22:46,582 --> 00:22:48,543
So we have two bytes of density data,

426
00:22:48,983 --> 00:22:51,605
a byte each for two different materials

427
00:22:51,625 --> 00:22:52,445
that are made up of them.

428
00:22:52,485 --> 00:22:54,747
So our voxels tell you that they're made of grass

429
00:22:54,827 --> 00:22:56,808
or rock or mountain or sand,

430
00:22:57,668 --> 00:23:00,530
which we need in texturing and placing things on them later.

431
00:23:01,111 --> 00:23:02,812
And we have two bytes that tells us

432
00:23:03,332 --> 00:23:05,733
the extent to which something is rock or grass

433
00:23:05,773 --> 00:23:07,754
versus the other material that it's made up of.

434
00:23:10,657 --> 00:23:16,184
So we retain these in memory right throughout running the game, so there's definitely a limited quantity that we can store.

435
00:23:16,905 --> 00:23:22,733
That's just to let us do really quick terrain edits, and we do height tests and other tests against the voxels fairly often.

436
00:23:23,194 --> 00:23:24,776
So it's useful to keep around, but...

437
00:23:25,577 --> 00:23:28,078
it would be possible to discard it and load it again.

438
00:23:28,419 --> 00:23:30,540
Similarly, it would probably be possible to compress it,

439
00:23:30,660 --> 00:23:33,102
and we just haven't done that because it's an expense,

440
00:23:34,143 --> 00:23:36,545
and also because compression is a lot less effective

441
00:23:36,585 --> 00:23:38,566
than if we have something like Minecraft,

442
00:23:38,586 --> 00:23:40,668
where your voxels are binary one or zero,

443
00:23:40,688 --> 00:23:42,229
because we have varying density data,

444
00:23:42,409 --> 00:23:45,111
and we want any compression that we do to be lossless.

445
00:23:45,551 --> 00:23:47,853
So it's probably something that we'll look at in future

446
00:23:47,953 --> 00:23:50,315
as we try and regain more memory from.

447
00:23:50,720 --> 00:23:53,802
the game to put in new features and fill it with other stuff,

448
00:23:54,143 --> 00:23:56,844
but for the time being, it's just uncompressed in memory.

449
00:23:58,806 --> 00:24:02,088
Of course, our 36 by 36 by 36 meter regions,

450
00:24:02,428 --> 00:24:04,029
we can only have a limited number of those.

451
00:24:04,049 --> 00:24:05,290
They're taking up a fair amount of memory.

452
00:24:05,330 --> 00:24:06,931
So it's pretty obvious that we're

453
00:24:06,951 --> 00:24:09,373
going to need to deal with LODs, especially since we're

454
00:24:09,393 --> 00:24:11,514
flying off to space and back.

455
00:24:12,555 --> 00:24:15,578
So we want to have a bunch of these that will be quicker to generate.

456
00:24:16,118 --> 00:24:18,760
And what we do is simply subdivide our regions down.

457
00:24:19,201 --> 00:24:24,565
So we deal with six lods, each one being twice the size of the last.

458
00:24:24,966 --> 00:24:29,149
And again, we still have that overlap at the edges, so our lower lod terrain...

459
00:24:29,630 --> 00:24:33,652
has half the density, so it's going to be lower poly, it's going to be less interesting.

460
00:24:34,692 --> 00:24:38,434
But we tend to match up at the edges just by polygonizing a little bit over

461
00:24:38,794 --> 00:24:43,697
and we tend not to get holes between the LODs and it's far enough from the player that you can't notice

462
00:24:43,797 --> 00:24:49,580
that you're going from a lower density to a higher one directly in most cases.

463
00:24:52,697 --> 00:24:55,659
The other thing is that we reduce density within those regions.

464
00:24:55,739 --> 00:24:57,361
So again, just as a memory saving thing,

465
00:24:57,721 --> 00:25:01,704
and based on a visual decision of what looks acceptable to us,

466
00:25:02,365 --> 00:25:04,186
we reduce the density within that.

467
00:25:04,226 --> 00:25:08,010
So our lower LODs aren't actually 36 by 36 by 36 voxels.

468
00:25:08,030 --> 00:25:09,551
We might half that or quarter that.

469
00:25:09,851 --> 00:25:13,334
And we tend to do it in the height a lot more than in the x

470
00:25:13,394 --> 00:25:13,794
and z.

471
00:25:14,955 --> 00:25:16,837
Just because that looks OK, we can get away

472
00:25:16,877 --> 00:25:18,038
with reducing the data there.

473
00:25:19,079 --> 00:25:21,320
The other thing is we're splitting these voxels down,

474
00:25:22,360 --> 00:25:23,801
these regions down by half,

475
00:25:24,261 --> 00:25:27,283
but we only have this 128 meter area to fill.

476
00:25:27,383 --> 00:25:30,224
So we have four regions to stack on top of each other,

477
00:25:30,504 --> 00:25:32,925
you know, at 32 meters in the nearest lod,

478
00:25:32,985 --> 00:25:35,427
but quickly we stop having to do that

479
00:25:35,727 --> 00:25:36,667
when we get to lower lods.

480
00:25:36,727 --> 00:25:38,928
So the point there is that really quickly

481
00:25:38,968 --> 00:25:41,009
we end up with lower lods that are incredibly cheap,

482
00:25:41,089 --> 00:25:43,110
which means we can have close to us,

483
00:25:43,330 --> 00:25:45,632
high density voxel data and far away from us,

484
00:25:45,692 --> 00:25:48,133
really low poly data that fills in up to the horizon.

485
00:25:50,717 --> 00:26:09,536
And we store those in an octree where, you know, binary subdividing things, it kind of makes sense, it maps well, it lets us keep up to date with where our regions are as we move around the cube, and it's really quick to find voxel regions when we're within one of them or want to look up one of them.

486
00:26:11,690 --> 00:26:15,652
The thing to note there is that our cube is actually around the surface of a cube

487
00:26:15,692 --> 00:26:20,014
So we have our octree, but the regions that exist are ones around

488
00:26:20,734 --> 00:26:24,716
Outside the surface so when we've projected from our sphere to our cube

489
00:26:25,296 --> 00:26:30,179
And we have the data existing outside the edge of the cube. That's also where it exists in

490
00:26:30,799 --> 00:26:31,299
the octree

491
00:26:34,621 --> 00:26:38,443
Those get, even low resolutions, those get pretty expensive.

492
00:26:39,103 --> 00:26:41,504
And we can't cover a whole one of our large planets

493
00:26:41,524 --> 00:26:43,305
with even our lowest LOD of voxel data,

494
00:26:43,345 --> 00:26:46,066
so we also have a much cheaper low voxel LOD

495
00:26:46,086 --> 00:26:46,967
that exists per planet.

496
00:26:47,427 --> 00:26:49,728
We have a high, that octree, that exists one

497
00:26:49,768 --> 00:26:50,568
for the whole solar system,

498
00:26:50,589 --> 00:26:52,049
and we just swap it between the planets,

499
00:26:52,449 --> 00:26:54,790
transfer, cancel creating regions as we need to

500
00:26:54,851 --> 00:26:55,471
as we move around.

501
00:26:55,771 --> 00:26:58,652
But we also create, just as you fly into the system,

502
00:26:58,792 --> 00:27:01,614
these low density voxel spheres.

503
00:27:02,855 --> 00:27:06,879
They're just two voxels high, so there's really very little data there at all, they're pretty cheap.

504
00:27:07,320 --> 00:27:11,525
And we just generate six separate polygonized cube faces that map onto our sphere.

505
00:27:12,986 --> 00:27:18,313
And that gives us those planets in a much cheaper way from any point in the system all of the time.

506
00:27:21,054 --> 00:27:24,578
Okay, so next I'm gonna talk through

507
00:27:25,139 --> 00:27:26,120
our generation pipelines,

508
00:27:26,140 --> 00:27:27,602
so how we fill in that voxel data,

509
00:27:27,662 --> 00:27:29,924
what we do with it once we've got a whole load of voxels

510
00:27:29,964 --> 00:27:33,549
and we need to render it and turn it into a game we play.

511
00:27:34,190 --> 00:27:35,972
So we do some generation at load time.

512
00:27:37,531 --> 00:27:40,392
there's kind of a hierarchy of where you want to do your generation.

513
00:27:40,432 --> 00:27:42,293
So ideally, if we could do everything offline,

514
00:27:42,433 --> 00:27:44,493
that would be super cheap in the game, but we can't.

515
00:27:44,593 --> 00:27:46,554
So we do as much as we can at load time,

516
00:27:46,734 --> 00:27:49,715
and then we do what we have to as the player is moving around.

517
00:27:49,735 --> 00:27:52,076
So the kind of thing that we can do at load time

518
00:27:52,116 --> 00:27:54,177
is sort of rendering some procedural textures,

519
00:27:54,517 --> 00:27:57,478
loading any vertex data that we need in order to create models.

520
00:27:57,938 --> 00:28:00,639
But creating the terrain itself, because there's so much of it,

521
00:28:00,759 --> 00:28:01,940
we can't generate a whole planet.

522
00:28:01,980 --> 00:28:04,260
We have to do that continuously as we're moving around

523
00:28:04,721 --> 00:28:05,741
as the player is playing the game.

524
00:28:07,519 --> 00:28:11,742
So we just do it in the background along with things like texture streaming.

525
00:28:15,425 --> 00:28:17,006
So here are our stages that we go through.

526
00:28:17,046 --> 00:28:19,187
So we have our voxel region, and we

527
00:28:19,227 --> 00:28:21,388
want to take that through to something that's playable.

528
00:28:21,809 --> 00:28:23,129
We go through the following stages.

529
00:28:23,149 --> 00:28:24,130
So first we generate it.

530
00:28:24,150 --> 00:28:27,132
That's filling in the voxel data from noise

531
00:28:27,292 --> 00:28:31,074
until we have our completed density data for that region.

532
00:28:31,514 --> 00:28:33,356
We polygonize it, so we have a vertex mesh.

533
00:28:33,796 --> 00:28:34,736
We then spherify it.

534
00:28:34,796 --> 00:28:37,818
So we've done those two stages just as a voxel cube.

535
00:28:38,839 --> 00:28:41,560
And we then spherify that vertex data

536
00:28:41,580 --> 00:28:42,961
so that it'll fit on our sphere planet.

537
00:28:43,562 --> 00:28:47,586
We then construct a physics mesh, we construct like a nav mesh for creatures,

538
00:28:48,047 --> 00:28:51,751
and then we finish off by covering that region in plants and creatures,

539
00:28:52,612 --> 00:28:55,435
buildings, gameplay props, anything that we need to make it playable.

540
00:28:58,591 --> 00:29:01,233
So of course if we're going to do all that stuff is removing around we have to

541
00:29:01,273 --> 00:29:06,877
do it. Using it. We have to do it off the main thread and we do it using a job

542
00:29:06,917 --> 00:29:10,680
system so threading in our game is relatively simple we have a main update

543
00:29:10,700 --> 00:29:13,922
thread and a main graphics threat we have a sink point each frame for those

544
00:29:14,803 --> 00:29:18,946
and we try to make the terrain interfere with that as little as possible as

545
00:29:18,966 --> 00:29:23,909
we're going around on PC all these jobs are handled on the CPU, but on PS for

546
00:29:23,949 --> 00:29:25,570
we do some of them in compute shaders now.

547
00:29:27,410 --> 00:29:29,853
So to see how our threading kind of works,

548
00:29:30,713 --> 00:29:35,317
in terms of all the numbered points we can do in jobs,

549
00:29:35,538 --> 00:29:37,259
and then all of the other points are points

550
00:29:37,279 --> 00:29:38,720
where we have to interfere with the world.

551
00:29:38,821 --> 00:29:41,883
So at some point we have to get hold of a vertex data

552
00:29:42,304 --> 00:29:43,104
buffer to fill in.

553
00:29:43,144 --> 00:29:44,566
At some point we have to add our physics

554
00:29:44,606 --> 00:29:45,587
to the main physics of the world.

555
00:29:45,927 --> 00:29:48,509
We have to add all our creatures and position models

556
00:29:48,549 --> 00:29:49,130
and things like that.

557
00:29:49,210 --> 00:29:51,011
But almost everything else we can split off

558
00:29:51,092 --> 00:29:52,633
and just run as a job.

559
00:29:53,313 --> 00:29:56,715
And of course, what that means is we have all these voxel regions around about us

560
00:29:56,855 --> 00:30:00,097
and we need a tactic for ordering those jobs.

561
00:30:00,797 --> 00:30:02,838
I can kind of show that filling in here.

562
00:30:04,940 --> 00:30:10,726
So this is, this GIF is pretty much real time run on my laptop before, and I think it's LOD,

563
00:30:11,507 --> 00:30:16,192
LOD 2, so maybe the second furthest away LOD from the player, so you can see we're dealing with a lot of regions,

564
00:30:16,252 --> 00:30:20,616
each one of those little squares is a region that we're creating, and you can see it filling in in real time.

565
00:30:20,756 --> 00:30:24,940
So when it goes again, you'll see each of those regions flipping really quickly through a number of colors,

566
00:30:25,040 --> 00:30:28,824
and that's them going through their generation, polygonization, all of those stages.

567
00:30:30,435 --> 00:30:33,317
The way that we order those is based really highly on visuals.

568
00:30:34,058 --> 00:30:37,560
There's no real driving factor aside from what the player

569
00:30:37,580 --> 00:30:38,681
experiences and what they see.

570
00:30:38,841 --> 00:30:41,643
So when those regions are going black, that's them being

571
00:30:41,703 --> 00:30:43,465
filled in by a nearer LOD.

572
00:30:43,525 --> 00:30:45,886
So we're able to fill in this low LOD real quick.

573
00:30:46,487 --> 00:30:49,230
and then we start to bring in more detailed terrain over the top

574
00:30:50,091 --> 00:30:51,713
because that's the most beneficial to our player.

575
00:30:52,174 --> 00:30:56,699
We generate using a point-based system, so the stuff in front of us,

576
00:30:57,460 --> 00:30:59,502
if we go now, generates first,

577
00:30:59,843 --> 00:31:03,347
and then the stuff around about us spreading out from the camera.

578
00:31:08,171 --> 00:31:11,373
So now we've seen how our regions progress

579
00:31:11,413 --> 00:31:12,374
through the steps.

580
00:31:12,494 --> 00:31:13,695
I'm gonna talk about those steps

581
00:31:13,735 --> 00:31:14,696
in a little bit more detail,

582
00:31:14,836 --> 00:31:16,277
starting with our terrain generation.

583
00:31:16,677 --> 00:31:18,178
I'm not gonna go into loads of detail

584
00:31:18,358 --> 00:31:19,699
on all our noise-based techniques,

585
00:31:19,779 --> 00:31:22,601
but Sean Murray is giving a talk tomorrow at half five,

586
00:31:23,322 --> 00:31:26,144
and that does just focus on terrain generation

587
00:31:26,644 --> 00:31:30,147
and the specific maths and noise techniques of that.

588
00:31:30,587 --> 00:31:32,048
So you should go to that one.

589
00:31:36,035 --> 00:31:38,737
So it helps here when we're going to talk about generation

590
00:31:39,117 --> 00:31:41,099
to have a bit of an understanding of how

591
00:31:41,139 --> 00:31:44,081
we look at generation in No Man's Sky in general.

592
00:31:44,602 --> 00:31:47,424
So we see generation as this top-down approach always.

593
00:31:47,824 --> 00:31:50,026
You're always feeding data through one generator,

594
00:31:50,106 --> 00:31:51,307
coming up with some more data.

595
00:31:51,647 --> 00:31:55,633
feeding that into the next generator and just doing that continuously until you end up with what you want.

596
00:31:56,094 --> 00:31:59,659
So in the case of terrain, we're starting by knowing which solar system we're in,

597
00:31:59,699 --> 00:32:03,385
and we know that by a positional seed. We feed that through and generate some info

598
00:32:03,445 --> 00:32:06,108
about the solar system, how close the planets are to the sun.

599
00:32:07,410 --> 00:32:10,073
what kind of sky it has, what the atmosphere is like.

600
00:32:10,453 --> 00:32:12,816
And then we can feed that data through to each planet

601
00:32:12,936 --> 00:32:15,078
along with the planet's position-based seed,

602
00:32:15,579 --> 00:32:17,621
generate some information about whether it should be

603
00:32:17,741 --> 00:32:20,344
rocky or cliffy, or cliffy, I don't think is a word,

604
00:32:20,404 --> 00:32:24,428
but it has cliffs, you know, or have mountains or oceans,

605
00:32:24,749 --> 00:32:25,890
and we can feed that through.

606
00:32:27,922 --> 00:32:32,146
into our terrain generator, which will then come out with the voxel data that we have.

607
00:32:33,127 --> 00:32:35,769
And this might seem like a really trivial thing, and it is.

608
00:32:35,849 --> 00:32:40,973
It is simple, but it's really important because the significant part here is that any point

609
00:32:41,013 --> 00:32:43,335
in between those generators, we have a piece of data.

610
00:32:43,475 --> 00:32:44,776
We actually have it mostly as...

611
00:32:45,277 --> 00:32:47,319
XML data that we can write out and store.

612
00:32:47,659 --> 00:32:49,861
So when it comes to debugging these processes,

613
00:32:50,261 --> 00:32:53,064
that's hugely useful because any time that we see a bug

614
00:32:53,104 --> 00:32:55,526
or something, we can step into this generator

615
00:32:55,786 --> 00:32:57,587
at as many different levels as possible

616
00:32:57,628 --> 00:32:58,728
to see what might have gone wrong.

617
00:32:59,069 --> 00:33:01,831
We can load up future data to check that we can,

618
00:33:03,112 --> 00:33:04,393
we can see the same things again,

619
00:33:05,374 --> 00:33:06,916
to replicate the same problems.

620
00:33:09,923 --> 00:33:12,830
And we can store past planets and load them again

621
00:33:12,990 --> 00:33:16,839
to check for performance degradation, things like that.

622
00:33:17,360 --> 00:33:17,601
Sorry.

623
00:33:18,523 --> 00:33:19,806
All right.

624
00:33:21,304 --> 00:33:26,689
So with that in mind, when it came to writing this particular generator,

625
00:33:26,809 --> 00:33:30,352
the generator that would output our terrain, which is, you know, one of a number of generators,

626
00:33:30,372 --> 00:33:32,554
along with our texture generator and model generator,

627
00:33:32,574 --> 00:33:35,737
they're all just independent things that are taking data as input

628
00:33:36,317 --> 00:33:38,859
and then outputting something that we can use in the game

629
00:33:38,919 --> 00:33:40,681
or something we can use in another generator.

630
00:33:41,662 --> 00:33:44,405
So we have a number of requirements that we'd set out for writing that.

631
00:33:45,006 --> 00:33:47,349
The first is that it has to be directable and consistent,

632
00:33:47,429 --> 00:33:50,073
and that comes back to what I was talking about at the very beginning,

633
00:33:50,153 --> 00:33:54,519
that our artists or a designer needs to have control over the output,

634
00:33:54,559 --> 00:33:58,344
and they need to be able to work that out from the parameters that are going into it.

635
00:33:58,804 --> 00:34:01,665
Actually, in the case of the terrain, it's largely Sean,

636
00:34:01,705 --> 00:34:04,066
so the person that wrote a lot of the generation techniques

637
00:34:04,126 --> 00:34:05,467
that's actually set up the parameters,

638
00:34:05,487 --> 00:34:07,427
but he still needs to be able to sit separate

639
00:34:07,447 --> 00:34:09,788
to being a programmer and fill in those values

640
00:34:10,269 --> 00:34:12,189
and get some meaning from what he's writing there.

641
00:34:12,769 --> 00:34:14,070
It needs to be real time, of course.

642
00:34:14,110 --> 00:34:16,911
We need to generate this as the game is running all the time.

643
00:34:17,531 --> 00:34:20,692
It needs to be varied, so the output space should be large.

644
00:34:20,732 --> 00:34:22,033
So we want a load of different terrains,

645
00:34:22,113 --> 00:34:23,133
and we want them to be...

646
00:34:23,394 --> 00:34:25,234
to work, you know, and not have holes in them,

647
00:34:25,335 --> 00:34:26,815
but to look different to the player.

648
00:34:27,836 --> 00:34:29,196
We want to create things that are both

649
00:34:29,337 --> 00:34:30,797
real world and abstract shapes.

650
00:34:31,638 --> 00:34:33,619
We want our whole system to be adaptable,

651
00:34:33,719 --> 00:34:35,440
modular, easy to add to.

652
00:34:38,610 --> 00:34:39,491
And then there's a final point.

653
00:34:40,091 --> 00:34:42,153
We want our generation to be data local.

654
00:34:42,674 --> 00:34:45,476
And that's the kind of interesting and tough point

655
00:34:45,616 --> 00:34:46,117
in all of this.

656
00:34:46,517 --> 00:34:48,099
So if we're generating a single voxel,

657
00:34:48,499 --> 00:34:50,721
it can't know anything about any of the other voxels

658
00:34:50,761 --> 00:34:51,222
round about it.

659
00:34:51,242 --> 00:34:55,186
It's stateless, so it can't know whether it's halfway up

660
00:34:55,226 --> 00:34:57,328
a mountain or at the top of a mountain aside from.

661
00:34:57,828 --> 00:35:01,410
that it is a mountain, it has maybe 50% of a mountain.

662
00:35:02,031 --> 00:35:06,714
And that becomes a real problem when you want to map out water flowing and things like that.

663
00:35:06,774 --> 00:35:11,277
So, that means we have to look at generation techniques that look as though they've evolved over time,

664
00:35:11,297 --> 00:35:13,739
that look as though they know information about what's next to them.

665
00:35:14,019 --> 00:35:17,961
We have to model erosion, but you don't model erosion as the process of eroding.

666
00:35:18,222 --> 00:35:20,283
You model it as the end state of all those things.

667
00:35:20,323 --> 00:35:22,925
You model something that looks like it has eroded over time.

668
00:35:25,298 --> 00:35:27,459
So to break that down to how we actually do it,

669
00:35:27,819 --> 00:35:29,940
let's start with 2D terrain generation.

670
00:35:30,960 --> 00:35:33,201
So our first stage as an optimization,

671
00:35:33,381 --> 00:35:34,021
more than anything else,

672
00:35:34,041 --> 00:35:37,142
but also because it simplifies things conceptually,

673
00:35:37,582 --> 00:35:39,303
is to block out some shapes in 2D.

674
00:35:39,703 --> 00:35:41,924
So we'll split areas into mountains,

675
00:35:41,964 --> 00:35:44,464
into maybe some smoother plains down there,

676
00:35:44,504 --> 00:35:45,445
there's a river on there.

677
00:35:47,267 --> 00:35:49,129
And this doesn't come out as voxel data.

678
00:35:49,449 --> 00:35:51,412
This is just a series of values that are saying

679
00:35:51,452 --> 00:35:54,956
the extent of which this voxel is a mountain

680
00:35:55,257 --> 00:35:56,418
or is smooth or is a river.

681
00:35:56,458 --> 00:35:59,182
So it's a much larger amount of data,

682
00:35:59,202 --> 00:36:01,504
but we're only retaining it for a short period of time

683
00:36:01,545 --> 00:36:03,086
until we go on to 3D generation.

684
00:36:03,847 --> 00:36:06,811
And we do this essentially for each voxel column.

685
00:36:06,931 --> 00:36:08,953
So if you imagine we were generating on a flat plane,

686
00:36:09,073 --> 00:36:10,314
it would be across the XZ.

687
00:36:10,635 --> 00:36:12,176
But because we're generating on a sphere,

688
00:36:12,417 --> 00:36:14,399
then it's across the surface of our sphere,

689
00:36:14,879 --> 00:36:16,041
but without any height.

690
00:36:16,161 --> 00:36:20,045
So what comes out of this is like generating a height map.

691
00:36:20,245 --> 00:36:21,947
You know, without any overhangs or caves,

692
00:36:22,007 --> 00:36:24,350
we have the height of hills, things like that.

693
00:36:26,930 --> 00:36:28,312
So, to step through how that looks.

694
00:36:28,653 --> 00:36:30,416
So, we have our terrain, there's no noise.

695
00:36:30,656 --> 00:36:32,620
It's probably a real boring game.

696
00:36:33,481 --> 00:36:36,085
And then we generate our elevation.

697
00:36:36,526 --> 00:36:38,670
So, that's generated as noise, like I said,

698
00:36:38,710 --> 00:36:39,731
in the same way as anything else.

699
00:36:41,024 --> 00:36:43,827
What you can really see here is that our elevation data is

700
00:36:43,887 --> 00:36:47,089
really low in interesting points.

701
00:36:47,150 --> 00:36:49,131
It's just some really smooth noise, which is why it's

702
00:36:49,151 --> 00:36:49,752
really cheap.

703
00:36:49,912 --> 00:36:52,574
And we store that at this point into a 2D array so that

704
00:36:52,594 --> 00:36:55,417
it'll be cheap to look up later as well.

705
00:36:55,817 --> 00:36:58,119
And then we can start to add some 2D features.

706
00:36:58,860 --> 00:37:01,022
So this is our height map that I was talking about

707
00:37:01,102 --> 00:37:02,343
without overhangs or caves,

708
00:37:02,423 --> 00:37:03,524
but with some points of interest.

709
00:37:03,544 --> 00:37:05,226
There's some rubble in there, there's some noise.

710
00:37:05,746 --> 00:37:08,489
This is generating without thinking too much

711
00:37:08,509 --> 00:37:09,530
about materials at this point.

712
00:37:09,570 --> 00:37:10,431
I'll talk about that later,

713
00:37:10,471 --> 00:37:12,393
which is why it's all flat and sandy and brown.

714
00:37:12,993 --> 00:37:15,295
But we've got pretty far just talking

715
00:37:15,575 --> 00:37:17,157
about our distorted height map.

716
00:37:18,118 --> 00:37:20,339
But we want more interesting terrain,

717
00:37:20,399 --> 00:37:21,560
we need those 3D shapes.

718
00:37:22,041 --> 00:37:23,221
That's what I come on to next.

719
00:37:23,742 --> 00:37:27,705
So our 3D terrain generation works in a really similar way

720
00:37:28,345 --> 00:37:32,288
to our 2D, in that we're layering Perlin or simplex noise

721
00:37:32,528 --> 00:37:35,691
or other techniques like some Voronoi noise

722
00:37:35,751 --> 00:37:38,913
or cellular noise, but in 3D.

723
00:37:38,993 --> 00:37:41,675
And we're having some turbulence on our input positions

724
00:37:41,715 --> 00:37:43,977
and that creates some nice like pinching shapes

725
00:37:44,017 --> 00:37:44,717
and things like that.

726
00:37:46,409 --> 00:37:54,280
But the significant thing is that if you generate a 3D noise field and polygonize it, what you'll tend to see is like blob data in 3D.

727
00:37:54,300 --> 00:38:00,730
You'll have big floating islands. There won't be any meaningful shapes like hills or mountains.

728
00:38:00,830 --> 00:38:01,411
So we have to...

729
00:38:02,272 --> 00:38:10,179
We have to fade through that and try and cut off the floating islands, which we do just by reducing the density by height as you move away from the surface of the planet.

730
00:38:10,260 --> 00:38:18,007
And that keeps us with nice mountains and hills that can't possibly have a high density when you go up high if we didn't have one lowered down.

731
00:38:19,687 --> 00:38:23,368
And like I said, we just write this out into our cube space

732
00:38:23,408 --> 00:38:25,309
for the moment, but we're generating

733
00:38:26,710 --> 00:38:27,610
as though we're on a sphere.

734
00:38:27,630 --> 00:38:28,830
So each of those voxel positions,

735
00:38:29,071 --> 00:38:32,832
I'm showing it as a cube, but then we're mapping it here.

736
00:38:33,072 --> 00:38:34,513
We're generating it as though we're on a sphere,

737
00:38:34,553 --> 00:38:35,933
and that avoids our distortion.

738
00:38:36,294 --> 00:38:38,755
So here's some 3D shapes that we've created.

739
00:38:38,795 --> 00:38:41,176
We've got some Perlin worms going on there,

740
00:38:41,236 --> 00:38:42,996
and those are just some Perlin noise,

741
00:38:43,036 --> 00:38:44,737
but with a threshold on it so we can take.

742
00:38:46,718 --> 00:38:49,938
a slice through that noise and get some cool looking 3D shapes.

743
00:38:50,839 --> 00:38:54,279
The blue thing that you can maybe see there is some grid noise.

744
00:38:54,359 --> 00:38:59,240
So a nice technique that we do is we consider a grid over the surface of our terrain

745
00:38:59,560 --> 00:39:02,521
and we just pick some of those points to put some shapes in.

746
00:39:02,541 --> 00:39:07,882
We can put in cubes or more distorted and more natural looking spaces just spaced out periodically.

747
00:39:08,202 --> 00:39:12,202
And that's really useful for something like terrain resources.

748
00:39:12,262 --> 00:39:15,003
So we let the player mine resources from it and we have real control over

749
00:39:15,423 --> 00:39:16,804
how often they show up.

750
00:39:16,984 --> 00:39:19,045
So that's real useful.

751
00:39:19,205 --> 00:39:20,826
But we don't just do additive techniques,

752
00:39:20,866 --> 00:39:22,107
we also do subtractive.

753
00:39:22,207 --> 00:39:24,548
So we can generate caves and things

754
00:39:24,648 --> 00:39:26,889
by again taking those perlin worms

755
00:39:26,929 --> 00:39:28,470
but subtracting them from the terrain

756
00:39:28,530 --> 00:39:31,832
and considering the mouths of caves to be big open spheres.

757
00:39:32,992 --> 00:39:35,634
Things like that, just to try and build up our toolbox

758
00:39:35,894 --> 00:39:36,955
of techniques that we can apply

759
00:39:37,275 --> 00:39:39,156
to try and make a diverse range of terrain.

760
00:39:41,070 --> 00:39:43,331
So all right, after going through those steps,

761
00:39:43,411 --> 00:39:46,934
that leaves us with our region that's made up of voxels,

762
00:39:47,274 --> 00:39:49,896
and it's just a load of essentially density data.

763
00:39:50,096 --> 00:39:52,218
It has some information on materials as well,

764
00:39:52,298 --> 00:39:54,760
but the density data is the significant thing

765
00:39:54,800 --> 00:39:56,801
from which we have to generate our polygon grid.

766
00:39:57,862 --> 00:40:00,364
We use that using dual contouring.

767
00:40:01,125 --> 00:40:02,586
We started out with marching cubes,

768
00:40:03,346 --> 00:40:07,429
and probably on the left, no, the right,

769
00:40:07,449 --> 00:40:10,111
your left, your right, the yellow diagrams.

770
00:40:11,112 --> 00:40:13,833
you see the typical marching cubes sort of diagram.

771
00:40:14,053 --> 00:40:15,314
So when we polygonize in this way,

772
00:40:15,374 --> 00:40:18,035
the significant point of this is that

773
00:40:18,135 --> 00:40:19,516
if you imagine you have your eight voxels

774
00:40:19,536 --> 00:40:21,017
and you're creating polygons between them,

775
00:40:21,377 --> 00:40:23,238
marching cubes will only create polygons

776
00:40:23,298 --> 00:40:24,759
that lie on the edges of those.

777
00:40:25,119 --> 00:40:27,160
So it's really bad for creating corners.

778
00:40:27,200 --> 00:40:29,561
It loses a lot of data to do with shapes

779
00:40:29,601 --> 00:40:30,962
when you have really sharp angles.

780
00:40:31,302 --> 00:40:33,663
So that's why we moved to using dual contouring.

781
00:40:33,703 --> 00:40:35,584
And there's some really good information on that,

782
00:40:35,704 --> 00:40:36,625
not just on the technique,

783
00:40:36,645 --> 00:40:39,246
but on other isosurface techniques as well,

784
00:40:39,286 --> 00:40:40,006
just in the bottom.

785
00:40:40,567 --> 00:40:45,690
link there, which is where that leftmost diagram is from, and that shows how we retain the corner data.

786
00:40:46,370 --> 00:40:51,654
We do have to do a little bit more work on that, to avoid corners that lie way outside of our cube.

787
00:40:51,674 --> 00:40:56,937
We have to consider mass points and things, but it's basically pretty simple to work through some of the code

788
00:40:57,017 --> 00:40:58,598
and gets us a way nicer result.

789
00:40:59,980 --> 00:41:02,942
And that's what gets us, for example, the hills in this image.

790
00:41:03,643 --> 00:41:07,225
But the thing we do with our voxel data is we don't just polygonize it once,

791
00:41:07,325 --> 00:41:10,488
we polygonize it through different polygonizers to get different sets of data.

792
00:41:10,948 --> 00:41:15,351
So looking at the cubes in this image, we also do a cube-based polygonizer to get

793
00:41:15,411 --> 00:41:20,555
these nice terrain resource indicators. And that's more similar to the way in

794
00:41:20,615 --> 00:41:22,276
which something like Minecraft polygonizes.

795
00:41:22,776 --> 00:41:25,178
So it tends to be vertex heavy, but it's quite cheap.

796
00:41:25,258 --> 00:41:27,319
So we're just considering any point,

797
00:41:27,899 --> 00:41:29,220
considering the faces around it.

798
00:41:29,701 --> 00:41:31,082
We consider if there's a sign difference.

799
00:41:31,302 --> 00:41:33,543
So if you have a dense region

800
00:41:33,943 --> 00:41:35,264
with a non-dense one next to it,

801
00:41:35,284 --> 00:41:36,925
so you have mountain with air next to it,

802
00:41:37,126 --> 00:41:38,967
then we just create a flat plane there

803
00:41:39,567 --> 00:41:41,929
and we can build up that cube data fairly easily.

804
00:41:42,449 --> 00:41:44,610
But like I said, it's quite vertex intensive.

805
00:41:44,630 --> 00:41:45,911
So we only do that in near LODs,

806
00:41:45,971 --> 00:41:47,652
whereas we'll generate the actual terrain

807
00:41:47,913 --> 00:41:48,793
as far as you can see.

808
00:41:50,028 --> 00:41:53,760
And finally, we have our third super cheap polygonizer,

809
00:41:53,780 --> 00:41:55,365
which is just a flat plane polygonizer

810
00:41:55,466 --> 00:41:56,469
for the water surface.

811
00:41:57,822 --> 00:41:59,923
The point to note on this is because we use elevation,

812
00:42:00,183 --> 00:42:02,064
then sometimes we're generating water planes

813
00:42:02,165 --> 00:42:04,886
that are way above where our voxel data exists.

814
00:42:05,307 --> 00:42:07,288
So we're not just generating within those regions,

815
00:42:07,368 --> 00:42:10,790
we have to polygonize across the entire surface of a planet

816
00:42:10,830 --> 00:42:12,492
to see whether we should be putting water there.

817
00:42:13,092 --> 00:42:14,733
I think in future we'll probably move away

818
00:42:14,793 --> 00:42:15,934
from polygonizing water,

819
00:42:16,114 --> 00:42:19,276
we'll probably do it entirely implicitly in a shader,

820
00:42:19,776 --> 00:42:21,638
but for the time being we've still got that running.

821
00:42:23,671 --> 00:42:26,533
All right, so moving on from that to how we actually

822
00:42:26,773 --> 00:42:28,814
get our terrain looking like an interesting terrain

823
00:42:28,854 --> 00:42:30,896
that's not all flat, brown, and sandy

824
00:42:30,956 --> 00:42:31,916
like the one you saw before.

825
00:42:32,517 --> 00:42:34,258
So when we polygonize,

826
00:42:34,658 --> 00:42:36,279
we don't just create our vertex positions,

827
00:42:36,299 --> 00:42:37,500
we also output normals,

828
00:42:37,820 --> 00:42:39,901
and we choose to retain two normals,

829
00:42:40,242 --> 00:42:41,622
a smooth normal and a face normal.

830
00:42:42,963 --> 00:42:44,565
The only reason to do that is visual.

831
00:42:44,645 --> 00:42:46,526
It's just a visual decision that we've made.

832
00:42:47,527 --> 00:42:49,829
The smooth normal we use for texturing,

833
00:42:49,909 --> 00:42:51,510
whereas the face normal we use for lighting,

834
00:42:51,530 --> 00:42:53,391
and that gives us a slightly low poly look,

835
00:42:53,432 --> 00:42:55,813
but lets us get continuous blends across the surface.

836
00:42:56,454 --> 00:42:58,756
And we just store that octahedron encoded

837
00:42:58,776 --> 00:43:00,457
so we can stick it in Vec4.

838
00:43:00,917 --> 00:43:02,478
And we also store our two materials.

839
00:43:03,079 --> 00:43:06,261
So before I was saying that in our voxel data

840
00:43:06,281 --> 00:43:07,182
we have two materials.

841
00:43:07,482 --> 00:43:08,323
And when we polygonize,

842
00:43:09,044 --> 00:43:12,025
we're not just considering a single voxel or a polygon.

843
00:43:12,645 --> 00:43:15,507
Our vertex comes from the eight voxels round about it.

844
00:43:15,567 --> 00:43:16,808
So we're losing some data there.

845
00:43:18,569 --> 00:43:22,371
It would be really nice if we could afford to store a whole array of different materials

846
00:43:22,391 --> 00:43:26,093
that our voxels could be made up of in the vertex data and use that to texture,

847
00:43:26,153 --> 00:43:28,154
but it just wouldn't be performant.

848
00:43:28,714 --> 00:43:35,303
So instead we have two materials and a blend value between them, so the voxel will be whatever it's made up of most of.

849
00:43:35,383 --> 00:43:42,713
So grass and rock for example might lose some data that also we would like to blend a mountain texture in there, but generally it will look okay.

850
00:43:43,990 --> 00:43:48,332
And then we can use that to triplanar texture our sphere.

851
00:43:49,893 --> 00:43:51,894
So basically if you haven't encountered

852
00:43:51,934 --> 00:43:54,195
triplanar texturing, that means taking our texture

853
00:43:54,795 --> 00:43:58,497
and projecting it along three axis with a blend zone

854
00:43:58,697 --> 00:44:01,998
as is incredibly badly circled on the diagram.

855
00:44:03,399 --> 00:44:07,702
So the thing to note about that is we are in fact projecting across the whole sphere.

856
00:44:08,343 --> 00:44:14,087
So we're not projecting on an axis that's local to our bit of terrain, it's across our

857
00:44:14,127 --> 00:44:17,470
entire planet, which you would think would have really bad artifacts in some areas.

858
00:44:17,490 --> 00:44:21,353
You'd think that blend zone would be across an entire region of the planet's surface and

859
00:44:21,373 --> 00:44:24,755
we'd have an area where we're blending between two textures in a really ugly way.

860
00:44:25,056 --> 00:44:26,717
But actually we found that wasn't the case.

861
00:44:26,817 --> 00:44:30,940
Just because of how our terrain is shaped, we tend to distribute those blend zones across

862
00:44:30,980 --> 00:44:31,521
the whole planet.

863
00:44:31,941 --> 00:44:39,106
fairly evenly. They tend to come up everywhere but not be overwhelmingly ugly to look at anywhere.

864
00:44:42,503 --> 00:44:46,366
And in terms of the texturing, what we're passing in is basically a height map there.

865
00:44:46,486 --> 00:44:49,529
So I said that our vertex data had those materials and a blend value.

866
00:44:49,909 --> 00:44:55,173
What that actually means is that we have an atlas of textures that relate to those different materials and

867
00:44:55,253 --> 00:44:58,275
we choose those and blend between them based on a height texture.

868
00:44:58,295 --> 00:45:03,899
And that's just an artist-created thing. We recolor it in the game, but it

869
00:45:05,321 --> 00:45:12,049
It's an area where our artists creating something really carefully, really outweighed trying to synthesize these textures.

870
00:45:13,352 --> 00:45:15,453
The other thing to note is that we apply these textures

871
00:45:15,513 --> 00:45:16,433
at two different scales.

872
00:45:16,553 --> 00:45:18,573
So we have a lower detail texture

873
00:45:18,653 --> 00:45:22,134
mapped over a much larger scaled, higher detail,

874
00:45:23,034 --> 00:45:24,135
a higher size texture.

875
00:45:24,615 --> 00:45:26,135
And we just continuously replace those

876
00:45:26,175 --> 00:45:28,676
as you fly away from or towards the terrain.

877
00:45:29,336 --> 00:45:31,776
So far from the planet, you'll see the same texture,

878
00:45:31,816 --> 00:45:32,997
but at a much larger scale.

879
00:45:33,197 --> 00:45:34,697
And when you zoom in close, then we'll

880
00:45:34,737 --> 00:45:37,198
continuously replace in half those sizes

881
00:45:37,238 --> 00:45:39,158
and replace them down until we have our two

882
00:45:39,198 --> 00:45:40,218
scales of texture still.

883
00:45:40,518 --> 00:45:42,199
And that helps us with our terrain blend

884
00:45:42,219 --> 00:45:43,239
as we fly into the planet.

885
00:45:44,980 --> 00:45:47,362
All right, so we have our terrain.

886
00:45:47,702 --> 00:45:49,744
We have it textured off in our shader.

887
00:45:49,804 --> 00:45:50,564
It's polygonized.

888
00:45:50,624 --> 00:45:53,206
We can render it, but it's not very interesting.

889
00:45:53,266 --> 00:45:55,568
We have to do stuff to it for it to be useful in the game.

890
00:45:56,348 --> 00:46:00,751
So a real important point is that when you're generating

891
00:46:00,771 --> 00:46:02,352
your terrain in game, your work isn't just

892
00:46:02,452 --> 00:46:03,493
generating that terrain.

893
00:46:04,652 --> 00:46:06,915
Things that you'd normally bake offline, for example,

894
00:46:07,715 --> 00:46:09,697
physics or navigation measures,

895
00:46:09,717 --> 00:46:13,081
you also have to calculate as jobs in real time.

896
00:46:13,461 --> 00:46:16,484
And that takes up a way more significant chunk of our time

897
00:46:16,504 --> 00:46:18,866
than actually generating or polygonizing the terrain.

898
00:46:21,797 --> 00:46:25,618
And the first step in that is placing a bunch of objects.

899
00:46:26,038 --> 00:46:29,759
And again, that can end up to be quite a significant cost.

900
00:46:29,779 --> 00:46:32,060
It's something that we do in Compute Shaders on PS4.

901
00:46:32,540 --> 00:46:34,641
And the basic approach is really similar to the noise

902
00:46:34,681 --> 00:46:36,321
that we're using for generating the terrain.

903
00:46:36,701 --> 00:46:38,522
So this is kind of a top-down view.

904
00:46:38,862 --> 00:46:40,742
So hopefully you can see the kind of green bits are grass,

905
00:46:40,902 --> 00:46:42,423
and there are some rocks and plants in there.

906
00:46:43,563 --> 00:46:45,004
and you can kind of picture quite quickly

907
00:46:45,024 --> 00:46:46,905
that that might have come from some simplex noise,

908
00:46:46,965 --> 00:46:50,367
something like that, and we're just placing objects

909
00:46:51,027 --> 00:46:53,469
with a cutoff at the highest points,

910
00:46:53,649 --> 00:46:56,110
and we're also applying an additional layer of noise

911
00:46:56,130 --> 00:46:57,411
that just cuts down on the density

912
00:46:57,451 --> 00:46:59,552
to kind of really quickly give us control

913
00:46:59,592 --> 00:47:00,773
over the spacing that we want.

914
00:47:01,373 --> 00:47:03,715
The driving factors here are artistic,

915
00:47:03,775 --> 00:47:05,676
and this is something that Kate Compton talked about

916
00:47:06,076 --> 00:47:09,298
before, is that if you ask an artist, then...

917
00:47:12,152 --> 00:47:13,874
If you have a tree, that's kind of nice.

918
00:47:13,894 --> 00:47:14,914
You can have a tree on a terrain.

919
00:47:15,635 --> 00:47:17,196
If you have a tree with a small rock next to it

920
00:47:17,216 --> 00:47:18,617
or a small bush, that's much nicer.

921
00:47:18,837 --> 00:47:19,978
And if you can work all the way down

922
00:47:20,018 --> 00:47:21,660
in scale recursively, continuously,

923
00:47:21,700 --> 00:47:23,321
the more stuff you add, the nicer it kind of gets.

924
00:47:23,381 --> 00:47:25,202
So let's have a tree with some bushes,

925
00:47:25,663 --> 00:47:27,704
with some small plants, with some pebbles at the bottom,

926
00:47:27,964 --> 00:47:29,786
and we start to build up our terrain in a nice way.

927
00:47:29,846 --> 00:47:32,388
So this noise-based technique is our way of doing that.

928
00:47:34,154 --> 00:47:35,475
We additionally use an offset grid,

929
00:47:35,555 --> 00:47:39,198
and that's just similar to the terrain-based technique

930
00:47:39,218 --> 00:47:40,359
that I was talking about before,

931
00:47:40,699 --> 00:47:42,581
so that we can place gameplay objects

932
00:47:42,601 --> 00:47:44,882
when we really need control over how far apart those are.

933
00:47:44,983 --> 00:47:46,864
So we just split our terrain into grid cells

934
00:47:47,364 --> 00:47:49,166
and choose how many of those should be active.

935
00:47:51,102 --> 00:47:53,425
And so stepping through, we also place our terrain,

936
00:47:53,785 --> 00:47:56,829
our objects separately on our terrain across the LODs.

937
00:47:56,889 --> 00:47:58,451
So we can place much larger objects

938
00:47:58,511 --> 00:47:59,573
on our lower LOD terrain.

939
00:48:00,414 --> 00:48:02,076
So here's LOD two.

940
00:48:03,037 --> 00:48:05,260
LOD one, we're starting to add in some bushes and things.

941
00:48:05,961 --> 00:48:09,084
And LOD 1, we have our full set of objects,

942
00:48:09,224 --> 00:48:11,266
and we have our grass that's only appearing up close

943
00:48:11,406 --> 00:48:13,088
where that LOD comes in.

944
00:48:13,909 --> 00:48:16,351
And that presents a problem because we're placing

945
00:48:16,371 --> 00:48:18,593
our trees, for example, on that lower LOD of terrain,

946
00:48:18,813 --> 00:48:20,575
but we're replacing that whole terrain

947
00:48:20,615 --> 00:48:23,438
with something higher detailed as you get closer,

948
00:48:23,458 --> 00:48:26,120
so we need to reposition them onto the surface,

949
00:48:26,941 --> 00:48:28,543
and we do it something like this.

950
00:48:30,382 --> 00:48:32,323
So there you can see them fading between impostors

951
00:48:32,383 --> 00:48:34,965
to real models and also readjusting to the surface.

952
00:48:35,725 --> 00:48:38,187
So it's kind of cheesy that they interpolate like that,

953
00:48:38,508 --> 00:48:41,209
but it's far better than popping into position.

954
00:48:41,850 --> 00:48:43,971
And generally it tends to be much further off

955
00:48:44,052 --> 00:48:44,652
from the camera.

956
00:48:44,672 --> 00:48:47,314
This is me flying really quickly in Flycam to an area.

957
00:48:48,575 --> 00:48:51,257
And it's just slightly more subtle than them just popping.

958
00:48:52,838 --> 00:48:54,959
Building placement, we use a really similar technique.

959
00:48:55,019 --> 00:48:57,060
So these buildings are kind of the one thing

960
00:48:57,100 --> 00:48:59,141
that we need to see from space.

961
00:48:59,942 --> 00:49:00,822
We need to know about their points

962
00:49:00,842 --> 00:49:02,003
before we get to the planet, which

963
00:49:02,043 --> 00:49:04,224
means we need a technique where easily we

964
00:49:04,264 --> 00:49:06,425
can take any point on our sphere and determine

965
00:49:06,445 --> 00:49:07,126
the nearest building.

966
00:49:07,186 --> 00:49:08,927
So we use an offset grid technique.

967
00:49:09,047 --> 00:49:12,129
So if we split our terrain down into regions,

968
00:49:12,369 --> 00:49:14,590
and we can consider each of these points

969
00:49:14,650 --> 00:49:15,871
as offset from the center of that,

970
00:49:15,931 --> 00:49:17,311
and we can quickly recalculate that.

971
00:49:17,692 --> 00:49:21,054
from any position you can generate a Voronoi diagram of this real easily.

972
00:49:21,114 --> 00:49:23,455
You can see your nearest building from any point.

973
00:49:25,917 --> 00:49:31,820
Okay, so now quickly I'll go through actually simulating on this world

974
00:49:31,860 --> 00:49:34,762
that we've just generated and covered in plants and physics and things.

975
00:49:36,574 --> 00:49:38,515
The first thing to talk about is our creature routines.

976
00:49:38,535 --> 00:49:43,958
They're one of the things that vary most based on how our terrain is generated.

977
00:49:44,999 --> 00:49:47,480
And not knowing where they can go is a significant thing.

978
00:49:47,641 --> 00:49:51,123
So, as you can see in this GIF, we generate these paths for them to follow.

979
00:49:52,244 --> 00:49:54,825
But we don't actually add the creatures until you get in really close to them.

980
00:49:54,885 --> 00:49:58,187
So we know ahead of time where there potentially will be a creature,

981
00:49:58,267 --> 00:49:59,308
where that creature is going to be,

982
00:49:59,688 --> 00:50:02,010
and whether the camera is going to reach that point.

983
00:50:03,110 --> 00:50:05,832
But we don't bring it in until there's actually an intersection.

984
00:50:07,841 --> 00:50:08,841
I'll just go through that again.

985
00:50:10,362 --> 00:50:11,522
So there's our gray path.

986
00:50:12,383 --> 00:50:13,523
Pink means they've become active,

987
00:50:13,543 --> 00:50:14,783
so we know there's a creature in that area,

988
00:50:14,924 --> 00:50:17,084
and then we get close enough for them to actually come in,

989
00:50:17,404 --> 00:50:19,205
which means we can go away and come back

990
00:50:19,245 --> 00:50:21,526
and have those creatures remain in their same positions.

991
00:50:23,730 --> 00:50:26,453
And we do a really similar thing with all of our objects.

992
00:50:26,493 --> 00:50:28,816
We fade them in as you fly away and come back.

993
00:50:28,856 --> 00:50:31,219
And we use this dither based technique just in a shader.

994
00:50:31,339 --> 00:50:33,802
We pass in a zero to one value for all of our terrain

995
00:50:33,822 --> 00:50:35,584
and our objects that we can just use

996
00:50:35,644 --> 00:50:37,086
to make sure it comes in appropriately

997
00:50:37,146 --> 00:50:37,907
as you're flying around.

998
00:50:37,927 --> 00:50:40,290
So again, we've got some gifts of that.

999
00:50:41,507 --> 00:50:43,689
So here you can see the terrain generating around you.

1000
00:50:43,889 --> 00:50:46,091
And again, this is me flying really quickly to a point

1001
00:50:46,131 --> 00:50:47,233
and bringing all of the terrain in.

1002
00:50:47,293 --> 00:50:49,895
So it's really noticeable that we're doing this,

1003
00:50:49,996 --> 00:50:52,498
that we're starting with really low res terrain

1004
00:50:53,739 --> 00:50:57,483
and bringing in some slightly nicer terrain over the top.

1005
00:50:59,207 --> 00:51:01,268
But this is a little bit more subtle as we're flying around.

1006
00:51:01,349 --> 00:51:03,510
So you can definitely still notice it,

1007
00:51:04,110 --> 00:51:05,551
but it's not quite as in your face

1008
00:51:05,831 --> 00:51:07,332
as when I showed you before.

1009
00:51:07,412 --> 00:51:09,493
So this, you can see that blue rock only existed

1010
00:51:09,533 --> 00:51:12,175
in the nearer odds, so it faded in there.

1011
00:51:15,276 --> 00:51:17,438
So this is all time-based.

1012
00:51:17,478 --> 00:51:20,079
We kick that fading off as that region is ready to come in.

1013
00:51:20,439 --> 00:51:22,480
We fade it in and then we're able to see it.

1014
00:51:22,801 --> 00:51:25,502
But we also do a distance-based fade for things like grass.

1015
00:51:27,255 --> 00:51:28,696
So this is just thinning out grass,

1016
00:51:28,736 --> 00:51:30,557
and that's just a cut down on the quantity of grass

1017
00:51:30,577 --> 00:51:31,258
that we're rendering.

1018
00:51:32,118 --> 00:51:33,480
You can see that the grass is slightly different

1019
00:51:33,500 --> 00:51:34,440
to the terrain underneath it.

1020
00:51:36,342 --> 00:51:37,663
And it thins out as we move away.

1021
00:51:40,559 --> 00:51:43,682
I would really like to move a lot more of our fading to be distance-based.

1022
00:51:43,742 --> 00:51:45,483
I think it's much more subtle.

1023
00:51:45,543 --> 00:51:47,305
You don't notice it so much as you're flying around.

1024
00:51:47,405 --> 00:51:49,887
So that's definitely something that we'll look at in the future.

1025
00:51:50,207 --> 00:51:55,111
But it needs you to have generated enough terrain far enough away from you that you

1026
00:51:55,131 --> 00:51:56,652
can afford to do it based on distance.

1027
00:51:56,692 --> 00:51:59,815
Whereas if your terrain comes in quite late, then you really need to fade it in as quickly

1028
00:51:59,855 --> 00:52:00,275
as possible.

1029
00:52:03,145 --> 00:52:10,510
All right, and finally I want to talk about evaluation and evaluating our content and our world and evaluation of procedural content in general.

1030
00:52:10,870 --> 00:52:18,495
So I've spoken about different things on No Man's Sky a bunch of times and I kind of like to finish on the importance of this because it's really meaningful to us.

1031
00:52:19,035 --> 00:52:22,358
It's meaningful to the artists when they're generating content that.

1032
00:52:22,918 --> 00:52:27,460
They don't just see their content in context, they don't just create a model and look at it in the game,

1033
00:52:27,900 --> 00:52:31,382
they see vast quantities, all the assets that come from that model.

1034
00:52:31,642 --> 00:52:36,545
And that's true for our planets as well, we need to not just create a planet and look at one of them,

1035
00:52:36,945 --> 00:52:40,146
we need to be able to really quickly go through loads of planets and say...

1036
00:52:40,847 --> 00:52:46,429
Why are all my planets red? It's valid that one planet would be red, but there's clearly a bug going on there that's caused all of them to look like this.

1037
00:52:46,609 --> 00:52:52,112
Or there's this whole space that we haven't explored in terms of generation and we could maybe look into that in future.

1038
00:52:52,132 --> 00:52:59,536
That's a really big one for the artists to go back to especially, but it's true for us looking at generation techniques for terrain things as well.

1039
00:53:00,684 --> 00:53:02,746
But it's also an important thing for performance,

1040
00:53:02,826 --> 00:53:04,888
that we're not just looking at one planet,

1041
00:53:05,308 --> 00:53:07,330
that we're looking at a vast quantity,

1042
00:53:07,430 --> 00:53:08,611
and that we're looking at it regularly.

1043
00:53:08,731 --> 00:53:10,493
So this is Simon's smoke test tool,

1044
00:53:10,673 --> 00:53:13,556
which is really fundamental to us

1045
00:53:13,676 --> 00:53:14,637
while we're working on the game.

1046
00:53:15,577 --> 00:53:18,718
So we can see performance degradation and things over time.

1047
00:53:18,758 --> 00:53:20,438
We just, every time we run a build,

1048
00:53:20,498 --> 00:53:23,139
then we see all these screenshots,

1049
00:53:23,159 --> 00:53:24,719
we get these captures, and we know how we're doing

1050
00:53:24,739 --> 00:53:25,659
in terms of performance.

1051
00:53:26,139 --> 00:53:28,480
And it's important that we're doing that on the same planets

1052
00:53:28,540 --> 00:53:30,960
because we're generating loads of different planets,

1053
00:53:31,060 --> 00:53:34,001
and some of them will be way more performant than others.

1054
00:53:34,061 --> 00:53:35,681
Some will be filled with foliage and life

1055
00:53:35,841 --> 00:53:37,401
and will be really pushing us,

1056
00:53:37,461 --> 00:53:38,642
and some will be really cheap,

1057
00:53:38,702 --> 00:53:40,022
and they're not a problem at all.

1058
00:53:40,642 --> 00:53:40,842
So.

1059
00:53:41,862 --> 00:53:44,083
we need a way of keeping track of that throughout the project.

1060
00:53:44,824 --> 00:53:46,985
And I think if you're doing any generation stuff at all,

1061
00:53:47,285 --> 00:53:50,307
focusing on these tools is a really significant thing to do.

1062
00:53:50,607 --> 00:53:53,989
So to summarize this talk, I've just

1063
00:53:54,049 --> 00:53:56,370
got a few important takeaways.

1064
00:53:56,890 --> 00:53:58,171
I don't know if what I've said today

1065
00:53:59,332 --> 00:54:01,373
in terms of the specific techniques is useful to you.

1066
00:54:01,514 --> 00:54:02,614
Maybe it's interesting to you,

1067
00:54:02,654 --> 00:54:05,597
and I'm happy to talk in some more technical detail

1068
00:54:05,617 --> 00:54:06,757
to those of you that are interested.

1069
00:54:07,338 --> 00:54:09,820
But I hope the way that we're making this game

1070
00:54:10,240 --> 00:54:10,961
is interesting.

1071
00:54:11,381 --> 00:54:13,863
I hope that people will consider it for games in future.

1072
00:54:13,883 --> 00:54:15,744
I hope they'll think about the fact that

1073
00:54:16,745 --> 00:54:18,787
we can make interesting spaces in games.

1074
00:54:18,847 --> 00:54:20,288
We don't have to work on a flat plane.

1075
00:54:20,348 --> 00:54:22,669
We can work on spheres or on a torus,

1076
00:54:22,710 --> 00:54:24,591
and we can achieve loads of interesting gameplay

1077
00:54:24,611 --> 00:54:26,052
that we haven't looked at through that.

1078
00:54:27,187 --> 00:54:29,068
We can make deformable voxel worlds.

1079
00:54:29,108 --> 00:54:30,690
We can do that in a large scale game.

1080
00:54:30,750 --> 00:54:32,091
We can do it on current hardware.

1081
00:54:32,371 --> 00:54:34,373
And again, people think about voxels

1082
00:54:34,413 --> 00:54:35,534
and look at like Minecraft,

1083
00:54:35,594 --> 00:54:36,995
but there's so much more that we can do

1084
00:54:37,075 --> 00:54:38,216
and we can keep doing with that.

1085
00:54:39,737 --> 00:54:41,459
We can have procedural based games

1086
00:54:41,519 --> 00:54:43,461
where artists remain in control

1087
00:54:43,481 --> 00:54:44,561
of the content that's coming out.

1088
00:54:44,582 --> 00:54:46,803
We don't have to look at procedural generation

1089
00:54:46,843 --> 00:54:48,125
as a way to replace our artists.

1090
00:54:48,165 --> 00:54:49,946
We can look at it as a way to augment them

1091
00:54:50,006 --> 00:54:51,187
and to create more content.

1092
00:54:53,308 --> 00:54:55,729
And finally, we can create generative worlds,

1093
00:54:55,869 --> 00:54:58,790
and we can create them in real time as the game is running.

1094
00:54:59,331 --> 00:55:01,712
And we can do that today, again, on current hardware.

1095
00:55:02,132 --> 00:55:04,573
If we can do that and ship a game as our tiny team,

1096
00:55:04,613 --> 00:55:06,134
there are so many more options for people

1097
00:55:06,174 --> 00:55:07,375
with more resources out there.

1098
00:55:07,395 --> 00:55:09,856
I think it's a really valid avenue for us

1099
00:55:09,876 --> 00:55:11,176
to be pursuing as game developers,

1100
00:55:11,196 --> 00:55:12,497
I think is hugely exciting.

1101
00:55:13,702 --> 00:55:17,025
All right, so thank you all again for coming today.

1102
00:55:17,486 --> 00:55:18,487
If you wanna ask me questions,

1103
00:55:18,507 --> 00:55:20,069
I'm gonna head over to one of the wrap up rooms,

1104
00:55:20,109 --> 00:55:21,811
but also feel free to shout me online

1105
00:55:22,712 --> 00:55:24,754
and standard plug for my company.

1106
00:55:24,914 --> 00:55:25,655
I love it very much.

1107
00:55:25,855 --> 00:55:26,796
You should come work with me.

1108
00:55:27,577 --> 00:55:28,638
It's great, and thanks again.

