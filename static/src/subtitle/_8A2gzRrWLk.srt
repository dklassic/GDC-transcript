1
00:00:04,497 --> 00:00:05,958
My name is Matt Del Bosque.

2
00:00:05,958 --> 00:00:08,340
I'm a team lead programmer at Ubisoft Toronto.

3
00:00:08,340 --> 00:00:10,922
And today I'm going to talk to you about some of the stuff we

4
00:00:10,922 --> 00:00:13,204
did for vehicle replication in Watch Dogs 2.

5
00:00:13,204 --> 00:00:19,088
The best place to start is for me to explain the chaos part

6
00:00:19,088 --> 00:00:19,668
of the talk.

7
00:00:19,668 --> 00:00:20,429
So let me show you chaos.

8
00:00:20,429 --> 00:00:20,849
Here we go.

9
00:00:20,849 --> 00:00:26,674
So Watch Dogs 2's bounty mode is a multiplayer game mode

10
00:00:26,674 --> 00:00:31,477
where three human players team up together to take down a

11
00:00:31,477 --> 00:00:32,278
fourth player.

12
00:00:32,970 --> 00:00:35,572
And they do that alongside a whole bunch of AI-controlled cops.

13
00:00:35,572 --> 00:00:38,934
And basically, everyone gets into their cars,

14
00:00:38,934 --> 00:00:41,835
you get these crazy high-speed chases,

15
00:00:41,835 --> 00:00:44,297
everyone's crashing into each other.

16
00:00:44,297 --> 00:00:45,798
It's an insane lot of fun to play,

17
00:00:45,798 --> 00:00:48,439
but getting all of that to replicate nicely

18
00:00:48,439 --> 00:00:49,360
was a bit of a challenge.

19
00:00:49,360 --> 00:00:50,620
So I'm going to talk to you about some of the solutions

20
00:00:50,620 --> 00:00:51,361
we came up with today.

21
00:00:51,361 --> 00:00:54,362
So first of all, a little bit about our network architecture.

22
00:00:54,362 --> 00:00:54,402
So...

23
00:01:02,227 --> 00:01:09,611
It's only four players, completely peer-to-peer, so there's no server in the middle that's kind of the master of everything.

24
00:01:09,611 --> 00:01:15,095
And although we're only supporting four players, there's actually a lot of entities to replicate.

25
00:01:15,095 --> 00:01:22,960
So all of those cops driving alongside you, pedestrians on foot, all these things do add up to a lot of entities.

26
00:01:22,960 --> 00:01:24,461
And those entities...

27
00:01:25,598 --> 00:01:27,720
their authority is completely distributed.

28
00:01:27,720 --> 00:01:30,081
So all those police, they're actually

29
00:01:30,081 --> 00:01:33,303
owned by different players, which

30
00:01:33,303 --> 00:01:34,864
adds some extra complication.

31
00:01:34,864 --> 00:01:37,826
So when I first started working on this,

32
00:01:37,826 --> 00:01:41,309
I'd done a lot of character replication in my background.

33
00:01:41,309 --> 00:01:44,391
And I figured all the techniques that I knew and loved,

34
00:01:44,391 --> 00:01:46,072
I'd just apply them to vehicles, and it

35
00:01:46,072 --> 00:01:47,813
was going to be super easy.

36
00:01:47,813 --> 00:01:50,154
Well, it didn't quite turn out to be the case.

37
00:01:50,154 --> 00:01:52,356
So what's harder about vehicles?

38
00:01:53,583 --> 00:01:55,525
First of all, vehicles drive fast.

39
00:01:55,525 --> 00:01:58,167
So even if you have a little bit of lag,

40
00:01:58,167 --> 00:01:59,288
say 100 milliseconds,

41
00:01:59,288 --> 00:02:03,051
that's two to three meters difference in their position,

42
00:02:03,051 --> 00:02:06,094
which is like half a car length to a full car length.

43
00:02:06,094 --> 00:02:07,635
And say you're working on a race,

44
00:02:07,635 --> 00:02:09,597
well, that's the difference between winning and losing.

45
00:02:09,597 --> 00:02:11,678
Now we don't have races in Watch Dogs 2,

46
00:02:11,678 --> 00:02:13,780
but the same principles apply,

47
00:02:13,780 --> 00:02:15,621
and I'm gonna talk about some of that later on.

48
00:02:17,083 --> 00:02:20,844
The other things that cars do that people don't is they collide with each other.

49
00:02:20,844 --> 00:02:24,466
So there's a lot of rigid body physics that come into play

50
00:02:24,466 --> 00:02:28,488
that cause them to interfere and react with each other.

51
00:02:28,488 --> 00:02:32,549
And on top of that, we're not just dealing with players versus players colliding,

52
00:02:32,549 --> 00:02:35,270
but there's a lot of traffic in the open world in Watch Dogs 2.

53
00:02:35,270 --> 00:02:39,512
So there's actually a lot of things that you're going to be crashing with.

54
00:02:41,143 --> 00:02:44,705
And the other interesting thing I discovered while working on this is that

55
00:02:44,705 --> 00:02:48,827
when you're looking at vehicles driving around, the human eye is really, really

56
00:02:48,827 --> 00:02:51,148
sensitive to irregular velocities.

57
00:02:51,148 --> 00:02:55,811
So if your dead reckoning algorithm has got a few little inconsistencies, and

58
00:02:55,811 --> 00:03:00,953
even a car going in the straight line, and it's not going perfectly at the same

59
00:03:00,953 --> 00:03:03,835
velocity, it's actually really noticeable for the player.

60
00:03:03,835 --> 00:03:06,296
And that adds more complications.

61
00:03:08,332 --> 00:03:10,953
So what I'm going to talk about today, first of all,

62
00:03:10,953 --> 00:03:12,434
how we go about debugging trajectories.

63
00:03:12,434 --> 00:03:15,536
I'll talk about the technique that we

64
00:03:15,536 --> 00:03:17,216
use for dead reckoning, which is called

65
00:03:17,216 --> 00:03:20,018
projective velocity blending with a little bit of a twist

66
00:03:20,018 --> 00:03:20,638
for vehicles.

67
00:03:20,638 --> 00:03:24,100
I'll talk about how we use snapshot buffers

68
00:03:24,100 --> 00:03:26,041
to interpolate and extrapolate our positions.

69
00:03:26,041 --> 00:03:29,162
I'll talk about how we deal with collisions.

70
00:03:29,162 --> 00:03:32,844
And finally, I'll cover some of our unsolved problems

71
00:03:32,844 --> 00:03:34,525
and future research directions.

72
00:03:36,730 --> 00:03:41,634
So the most important thing you can do when working on Dead Reckoning is debugging your trajectories.

73
00:03:41,634 --> 00:03:46,457
So this is the color scheme I'm going to be using for the rest of the talk.

74
00:03:46,457 --> 00:03:47,658
I'll explain it quickly.

75
00:03:47,658 --> 00:03:53,103
The red dots are the authoritative snapshots that you've received from the master.

76
00:03:53,103 --> 00:03:57,046
The kind of blue dotted lines, they're the extrapolations from those dots.

77
00:03:57,046 --> 00:04:00,508
So it's a prediction of where we think the master is going to go.

78
00:04:00,508 --> 00:04:03,711
And finally, the green path is the actual path.

79
00:04:04,443 --> 00:04:06,564
that you've calculated from your dead reckoning

80
00:04:06,564 --> 00:04:08,666
than that the car has taken.

81
00:04:08,666 --> 00:04:11,148
And really the goal is to get the green line matching up

82
00:04:11,148 --> 00:04:13,109
to the red dots as closely as possible

83
00:04:13,109 --> 00:04:14,270
because then you've replicated

84
00:04:14,270 --> 00:04:16,512
exactly what happened on the other end.

85
00:04:16,512 --> 00:04:19,834
The algorithm that we use for dead reckoning

86
00:04:19,834 --> 00:04:23,497
is called projective velocity blending.

87
00:04:23,497 --> 00:04:25,058
It's very well known.

88
00:04:25,058 --> 00:04:29,421
I've used it a lot for character dead reckoning in the past

89
00:04:29,421 --> 00:04:31,323
and it still works pretty well for vehicles.

90
00:04:31,974 --> 00:04:35,975
I won't explain the maths, but I will explain how it works.

91
00:04:35,975 --> 00:04:41,197
Basically, let's say we have a replica of this position p0

92
00:04:41,197 --> 00:04:42,358
going with a certain velocity.

93
00:04:42,358 --> 00:04:46,619
And we receive a snapshot from the master, the blue one,

94
00:04:46,619 --> 00:04:48,120
that says, hey, actually, you're meant

95
00:04:48,120 --> 00:04:50,861
to be over here traveling with this velocity.

96
00:04:50,861 --> 00:04:53,701
So what we have to do is correct for that.

97
00:04:53,701 --> 00:04:58,323
And what we do is we interpolate from the current local velocity

98
00:04:58,323 --> 00:05:01,004
to the predicted master velocity.

99
00:05:01,870 --> 00:05:06,396
over a short period of time, which gives us this blended orange trajectory.

100
00:05:06,396 --> 00:05:11,562
And then we interpolate between the two over that same period of time.

101
00:05:11,562 --> 00:05:14,926
So the final trajectory that you take is that light green path,

102
00:05:14,926 --> 00:05:19,071
which basically takes you from where you were to where you should have been,

103
00:05:19,071 --> 00:05:21,053
and it's pretty smooth and pretty nice.

104
00:05:22,355 --> 00:05:25,098
I'll show you a video of what this looks like.

105
00:05:25,098 --> 00:05:26,961
So this is a car driving around in circles.

106
00:05:26,961 --> 00:05:31,406
I've reduced the snapshot send rate here for effects

107
00:05:31,406 --> 00:05:33,569
so you can sort of see the artifacts a bit better.

108
00:05:33,569 --> 00:05:36,232
And you'll notice that circle that it's taking,

109
00:05:36,232 --> 00:05:37,654
it's not very smooth, right?

110
00:05:39,046 --> 00:05:42,667
And one of the reasons for that, if you look at the blue lines, the

111
00:05:42,667 --> 00:05:47,228
extrapolated predictions, well, it's always in a straight line, right? It doesn't know

112
00:05:47,228 --> 00:05:52,049
that this car is actually driving around a corner, so your dead reckoning

113
00:05:52,049 --> 00:05:56,670
is trying to match to this very irregular polygon, and you get this little

114
00:05:56,670 --> 00:05:56,970
jerky results.

115
00:05:56,970 --> 00:06:01,191
So what can we do to improve that? Well,

116
00:06:01,191 --> 00:06:05,812
ideally, we don't use a straight line for our prediction. We predict that our car is

117
00:06:05,812 --> 00:06:07,973
turning around a circle. That's going to be the...

118
00:06:08,932 --> 00:06:13,134
best way to get a better result.

119
00:06:13,134 --> 00:06:15,895
Now, interestingly, how do we work that out?

120
00:06:15,895 --> 00:06:19,517
So we already transmit the steering angle of the car's

121
00:06:19,517 --> 00:06:22,778
wheels, which in theory should be enough.

122
00:06:22,778 --> 00:06:23,759
But actually, it's not.

123
00:06:23,759 --> 00:06:28,781
And the reason is that a vehicle simulation is actually

124
00:06:28,781 --> 00:06:29,661
really complex.

125
00:06:30,575 --> 00:06:36,298
In real life and in our simulation, if you have the turning angle of the car's wheels

126
00:06:36,298 --> 00:06:40,501
to actually predict where it's going to go, it's a factor of a whole lot of things.

127
00:06:40,501 --> 00:06:46,864
So the vehicle's current velocity, the tyre temperature, the friction with the road surface.

128
00:06:46,864 --> 00:06:50,426
You actually have to take all of that into account to work it out properly.

129
00:06:50,426 --> 00:06:54,829
And so this was a bit too much and it would have been a challenge with our engine to do that.

130
00:06:56,348 --> 00:07:00,070
Having said that, the other information we have,

131
00:07:00,070 --> 00:07:03,292
we have the position, the velocity, the angular velocity

132
00:07:03,292 --> 00:07:06,274
that we already transmit anyway.

133
00:07:06,274 --> 00:07:09,095
And what we ended up using is just the yaw component

134
00:07:09,095 --> 00:07:12,397
of the angular velocity, which we can then

135
00:07:12,397 --> 00:07:16,359
use that to do a very simple kind of 2D integration

136
00:07:16,359 --> 00:07:17,780
to predict where the car's going to go.

137
00:07:18,754 --> 00:07:23,297
Now you might notice there's something wrong with that, because if your car's kind of turning

138
00:07:23,297 --> 00:07:25,518
in a nice circle, then that's really easy.

139
00:07:25,518 --> 00:07:31,081
But if you're sliding and turning, then your prediction would be wrong.

140
00:07:31,081 --> 00:07:35,964
But for our game, actually this wasn't an issue, because the cars in Watch Dogs 2, they're

141
00:07:35,964 --> 00:07:36,984
not tuned to drift.

142
00:07:36,984 --> 00:07:38,565
It's not a game about drifting.

143
00:07:38,565 --> 00:07:44,708
So for all of us, for our game, this simple solution was actually the best.

144
00:07:47,969 --> 00:07:50,211
And then the result looks something like this.

145
00:07:50,211 --> 00:07:52,612
So what you can see now are extrapolation, the blue lines,

146
00:07:52,612 --> 00:07:55,815
they're going nicely around the corner,

147
00:07:55,815 --> 00:07:56,575
and our dead reckon trajectory,

148
00:07:56,575 --> 00:07:58,617
well, it's nice, now it's a perfect circle.

149
00:07:58,617 --> 00:07:59,197
So that's super nice.

150
00:07:59,197 --> 00:08:00,378
And we can move on to the next technique.

151
00:08:00,378 --> 00:08:02,359
So the next technique we used is called snapshot buffers.

152
00:08:17,686 --> 00:08:23,890
Theory there is that instead of just extrapolating from the snapshots that we've received, we

153
00:08:23,890 --> 00:08:29,034
wait a little while, we buffer the snapshots that we've received, and we interpolate between

154
00:08:29,034 --> 00:08:30,354
the last two.

155
00:08:30,354 --> 00:08:37,019
So what's good about that is that by interpolating between two known snapshots, we're representing

156
00:08:37,019 --> 00:08:38,700
a much more accurate trajectory.

157
00:08:38,700 --> 00:08:44,144
So we're actually representing something that really genuinely happened because we have

158
00:08:44,144 --> 00:08:44,744
all the information.

159
00:08:45,621 --> 00:08:50,844
What's bad about that is that we're now rendering something further back in time.

160
00:08:50,844 --> 00:08:53,906
And I'm going to talk about why that's an issue.

161
00:08:53,906 --> 00:08:58,209
First an example. So we have a car driving in a straight line,

162
00:08:58,209 --> 00:08:59,990
sends a snapshot to another machine,

163
00:08:59,990 --> 00:09:04,373
takes a while to arrive, we keep driving, we keep driving.

164
00:09:06,032 --> 00:09:07,952
We finally send another snapshot,

165
00:09:07,952 --> 00:09:09,892
and now we have enough information

166
00:09:09,892 --> 00:09:12,073
to start our interpolation.

167
00:09:12,073 --> 00:09:14,373
So in this example, our replica is

168
00:09:14,373 --> 00:09:17,474
five frames behind the master.

169
00:09:17,474 --> 00:09:19,134
Now, why is that an issue?

170
00:09:19,134 --> 00:09:20,354
I'll give you an example.

171
00:09:20,354 --> 00:09:24,055
This is a picture I've taken on two machines.

172
00:09:24,055 --> 00:09:26,735
There's two cars driving at high speed

173
00:09:26,735 --> 00:09:30,076
through an intersection at 90 degrees to each other.

174
00:09:30,076 --> 00:09:32,797
And so the same picture at the exact same moment in time.

175
00:09:32,797 --> 00:09:35,517
And what you're going to notice is on the left-hand side.

176
00:09:36,340 --> 00:09:41,282
they've crashed into each other, and on the right-hand side, well, they're nowhere near each other.

177
00:09:41,282 --> 00:09:46,123
And if we superimpose the two, you kind of see this effect that I was talking about

178
00:09:46,123 --> 00:09:50,304
with the half to a full cutoff differences.

179
00:09:50,304 --> 00:09:53,885
In this case, it's actually a big difference, because

180
00:09:53,885 --> 00:09:59,066
one player thought he crashed into the other guy, and the other player didn't see anything at all.

181
00:09:59,066 --> 00:10:03,788
So that's the sort of problems that we get when we're interpolating too much.

182
00:10:07,798 --> 00:10:12,001
Having said that, just because we're buffering all these snapshots,

183
00:10:12,001 --> 00:10:14,322
well, we don't have to interpolate between them.

184
00:10:14,322 --> 00:10:19,665
There's nothing stopping us from actually extrapolating from the last received one.

185
00:10:19,665 --> 00:10:24,128
And what this gives us is we introduced this really simple concept,

186
00:10:24,128 --> 00:10:25,709
which is basically a time offset.

187
00:10:25,709 --> 00:10:29,211
And what that really means, it's really easy to understand,

188
00:10:29,211 --> 00:10:33,293
it's how far back in time do we want to render this car?

189
00:10:33,293 --> 00:10:35,415
And then we, so if we take the time offset...

190
00:10:35,945 --> 00:10:37,646
you know, subtract it from the current time.

191
00:10:37,646 --> 00:10:41,490
If that lands between two received snapshots,

192
00:10:41,490 --> 00:10:44,152
then we can use the interpolated trajectory.

193
00:10:44,152 --> 00:10:47,395
If that time offset is ahead of the last received snapshot,

194
00:10:47,395 --> 00:10:49,357
then we go back to extrapolation.

195
00:10:49,357 --> 00:10:49,577
I'll, uh...

196
00:10:49,577 --> 00:10:53,140
And for us, this is really easy

197
00:10:53,140 --> 00:10:56,123
because we're time stamping our snapshots anyway,

198
00:10:56,123 --> 00:10:58,745
so we can do those calculations pretty easily.

199
00:10:58,745 --> 00:11:00,787
I'll show you an example.

200
00:11:00,787 --> 00:11:01,267
So again...

201
00:11:02,050 --> 00:11:04,931
We have a car traveling at a bit of an angle now.

202
00:11:04,931 --> 00:11:07,611
It sent a snapshot to the other pier.

203
00:11:07,611 --> 00:11:11,992
And now we've decided to extrapolate.

204
00:11:11,992 --> 00:11:15,073
Now, because we don't have as much information,

205
00:11:15,073 --> 00:11:19,114
we're kind of extrapolating the wrong way in this example.

206
00:11:19,114 --> 00:11:21,434
Now we've received another snapshot that's basically

207
00:11:21,434 --> 00:11:23,555
ahead of us in time.

208
00:11:23,555 --> 00:11:25,915
And we can switch back to an interpolator trajectory.

209
00:11:27,792 --> 00:11:31,714
And so the end result in this case is that our replica is only

210
00:11:31,714 --> 00:11:35,596
three frames behind the master, which is a little bit closer

211
00:11:35,596 --> 00:11:38,537
and reduces those effects of missed collisions

212
00:11:38,537 --> 00:11:40,178
that I was talking about.

213
00:11:40,178 --> 00:11:42,239
Obviously, you can see the trajectory, right?

214
00:11:42,239 --> 00:11:43,699
It's not perfect.

215
00:11:43,699 --> 00:11:46,280
It's a mix of interpolation and extrapolation,

216
00:11:46,280 --> 00:11:48,581
but it's still a better result because we're

217
00:11:48,581 --> 00:11:51,883
kind of getting the best of both worlds to some extent.

218
00:11:53,838 --> 00:11:59,921
The challenge here really is tuning the time offset and there's no real magic formula here.

219
00:11:59,921 --> 00:12:06,604
We spend a lot of time playing the game under different scenarios, adjusting until we got

220
00:12:06,604 --> 00:12:07,784
something we were happy with.

221
00:12:07,784 --> 00:12:12,867
And it's really a balancing act between too much interpolation and you're going to miss

222
00:12:12,867 --> 00:12:18,669
collisions and too much extrapolations which is going to cause more discontinuous trajectories,

223
00:12:18,669 --> 00:12:20,730
potential desyncs and that sort of stuff.

224
00:12:21,445 --> 00:12:25,750
The formula we ended up coming up with in Watch Dogs 2 is basically this.

225
00:12:25,750 --> 00:12:32,036
It's kind of a factor of the measured lag to that peer plus a bit of a constant value.

226
00:12:32,036 --> 00:12:35,540
And we calculate that every frame, but it's highly damp.

227
00:12:35,540 --> 00:12:38,002
We clamp it to something sane.

228
00:12:38,002 --> 00:12:41,666
And although I said constant value, the constant value is actually variable

229
00:12:41,666 --> 00:12:43,828
because it's proportional to the speed of the vehicle.

230
00:12:44,617 --> 00:12:48,217
And basically, if you're traveling slowly, then missed

231
00:12:48,217 --> 00:12:51,258
collisions is less of an issue, so you can interpolate

232
00:12:51,258 --> 00:12:56,219
a bit more, which means we increase the time offset so

233
00:12:56,219 --> 00:12:58,819
you can go a bit further back in time, and it's still going

234
00:12:58,819 --> 00:12:59,640
to work pretty well.

235
00:12:59,640 --> 00:13:05,061
Now, with all of that in place, we were pretty happy

236
00:13:05,061 --> 00:13:06,841
with our dead reckoning cars driving around.

237
00:13:06,841 --> 00:13:07,981
We're looking very good.

238
00:13:07,981 --> 00:13:11,662
But then our testers started to try and break the game, and

239
00:13:11,662 --> 00:13:12,122
they were.

240
00:13:12,849 --> 00:13:15,351
crashing cars into each other and starting to report issues.

241
00:13:15,351 --> 00:13:18,013
They were saying, hey, dark collisions,

242
00:13:18,013 --> 00:13:20,455
they don't really play out the same in multiplayer

243
00:13:20,455 --> 00:13:22,436
as they do in single player.

244
00:13:22,436 --> 00:13:23,357
Let me show you a video.

245
00:13:23,357 --> 00:13:27,700
You have to pay attention because it's

246
00:13:27,700 --> 00:13:29,862
a bit subtle the first time.

247
00:13:29,862 --> 00:13:34,986
So this is two cars, two players crashing

248
00:13:34,986 --> 00:13:36,848
into each other, a master versus a replica.

249
00:13:36,848 --> 00:13:38,309
I'm going to show you this again.

250
00:13:42,754 --> 00:13:45,056
Okay, so something's not quite right about that.

251
00:13:45,056 --> 00:13:49,220
If you play the game in single player and you have two cars crashing into each other,

252
00:13:49,220 --> 00:13:52,323
with the collision they kind of stop, right?

253
00:13:52,323 --> 00:13:54,745
Or they might push each other out of the way a little bit,

254
00:13:54,745 --> 00:13:56,566
but what you're seeing here in multiplayer

255
00:13:56,566 --> 00:14:01,370
is that they crash and they go shooting out far away from each other at high speed.

256
00:14:01,370 --> 00:14:03,853
That's not right. This is not what we want.

257
00:14:07,689 --> 00:14:08,730
So what happened?

258
00:14:08,730 --> 00:14:09,891
How do we figure that out?

259
00:14:09,891 --> 00:14:13,874
So as we know, this shouldn't be happening.

260
00:14:13,874 --> 00:14:15,236
They should be kind of stopping.

261
00:14:15,236 --> 00:14:18,278
The way we ended up tracking this down

262
00:14:18,278 --> 00:14:21,361
is we have a tool on the engine that

263
00:14:21,361 --> 00:14:24,784
lets us record the states of every entity

264
00:14:24,784 --> 00:14:27,006
and kind of play it back and look at everything

265
00:14:27,006 --> 00:14:30,048
frame by frame and kind of really analyze it and figure

266
00:14:30,048 --> 00:14:30,949
out what's going on.

267
00:14:30,949 --> 00:14:33,271
So I'm now going to show you a frame by frame analysis.

268
00:14:35,152 --> 00:14:37,994
So what we have is two cars about to crash into each other.

269
00:14:37,994 --> 00:14:42,137
There's the replica on the left, the master on the right.

270
00:14:42,137 --> 00:14:43,758
So far, so good.

271
00:14:43,758 --> 00:14:44,939
Again, so far, so good.

272
00:14:44,939 --> 00:14:47,962
Now they've collided into each other.

273
00:14:47,962 --> 00:14:48,682
That's still fine.

274
00:14:50,211 --> 00:14:53,032
Now this is where it gets interesting.

275
00:14:53,032 --> 00:14:56,854
What you can see there, the replica, it's still continuing

276
00:14:56,854 --> 00:14:58,895
in a straight line.

277
00:14:58,895 --> 00:15:02,637
You can see the extrapolation there, which is basically,

278
00:15:02,637 --> 00:15:05,879
it's based on the snapshot that's before the collision.

279
00:15:05,879 --> 00:15:09,301
So the extrapolation is basically saying, well, keep

280
00:15:09,301 --> 00:15:11,042
driving, I don't know that you've crashed into anything.

281
00:15:11,042 --> 00:15:12,802
So the only thing I can predict is that you're going

282
00:15:12,802 --> 00:15:13,483
to keep driving straight.

283
00:15:13,483 --> 00:15:14,283
And again, we continue.

284
00:15:14,283 --> 00:15:14,843
We continue.

285
00:15:19,152 --> 00:15:22,513
And finally, we receive a snapshot from the master that says,

286
00:15:22,513 --> 00:15:25,655
hey, you crashed into something, you're meant to be further back

287
00:15:25,655 --> 00:15:27,816
from where you currently are.

288
00:15:27,816 --> 00:15:29,637
So then our dead reckoning corrects for that,

289
00:15:29,637 --> 00:15:33,099
then starts pulling the car backwards.

290
00:15:33,099 --> 00:15:35,340
But basically, while this is going on,

291
00:15:35,340 --> 00:15:36,521
what's really happened is,

292
00:15:36,521 --> 00:15:39,843
you kind of have these bunch of frames

293
00:15:39,843 --> 00:15:42,064
where the replica is pushing, pushing, pushing.

294
00:15:42,867 --> 00:15:45,909
And that rigid body is imparting a huge velocity to that car,

295
00:15:45,909 --> 00:15:49,552
and that's what's sending him shooting backwards.

296
00:15:49,552 --> 00:15:52,634
And basically, the other thing's happening on the other machine,

297
00:15:52,634 --> 00:15:54,975
where this car's getting pushed, and he goes flying backwards.

298
00:15:54,975 --> 00:16:00,099
And the end result, what everybody sees, is

299
00:16:00,099 --> 00:16:01,740
this kind of massive, high-speed ejection.

300
00:16:01,740 --> 00:16:03,741
So we don't want that.

301
00:16:03,741 --> 00:16:05,182
How do we go about solving this?

302
00:16:05,182 --> 00:16:05,422
Well...

303
00:16:07,070 --> 00:16:11,292
Like I said, we not receive the packet that tells us about the collision.

304
00:16:11,292 --> 00:16:14,853
So we don't have that information on the replica side.

305
00:16:14,853 --> 00:16:18,414
And really, this is an unsolvable problem in our case.

306
00:16:18,414 --> 00:16:22,916
Because we fully peer-to-peer, no one has authority about the collision.

307
00:16:22,916 --> 00:16:26,977
There's no one true picture of what that collision should actually look like.

308
00:16:26,977 --> 00:16:29,658
And this is when I really wish I had a server,

309
00:16:29,658 --> 00:16:33,419
because a server could be authoritative and make all those decisions for us.

310
00:16:33,419 --> 00:16:35,760
But we don't, so we have to live with that.

311
00:16:38,673 --> 00:16:41,875
So what can we do? We know that the collision is going to happen.

312
00:16:41,875 --> 00:16:45,237
Those rigid bodies, they're going to be crashing into each other,

313
00:16:45,237 --> 00:16:48,919
they're going to be applying forces to each other, whether we like it or not.

314
00:16:48,919 --> 00:16:51,600
So why don't we try and live with it instead?

315
00:16:51,600 --> 00:16:57,103
And basically, what we really want to do is give the local physics

316
00:16:57,103 --> 00:16:59,785
a chance to simulate the collision.

317
00:16:59,785 --> 00:17:02,947
And basically, after a short period of time,

318
00:17:02,947 --> 00:17:05,948
we then blend back into the correct dead reckon trajectory.

319
00:17:07,685 --> 00:17:09,847
And really, what we ended up putting together

320
00:17:09,847 --> 00:17:14,831
was a tunable blend factor that blends between two velocities.

321
00:17:14,831 --> 00:17:18,394
So one is the velocity that's imparted by the rigid body

322
00:17:18,394 --> 00:17:22,157
simulation, and the other is the velocity that takes you

323
00:17:22,157 --> 00:17:23,458
to the dead reckon position.

324
00:17:23,458 --> 00:17:28,101
And we basically have to blend between those two

325
00:17:28,101 --> 00:17:29,522
and decide what we want.

326
00:17:29,522 --> 00:17:33,666
And the goal is really to let something believable

327
00:17:33,666 --> 00:17:34,426
happen locally.

328
00:17:35,407 --> 00:17:42,869
and then give time for a snapshot to arrive that takes the collision into account and then we can blend back into it.

329
00:17:42,869 --> 00:17:48,011
What's hard there is tuning the blend factor.

330
00:17:48,011 --> 00:17:50,332
Again, there's no real magic formula.

331
00:17:50,332 --> 00:17:55,754
We played the game a lot, we spent a long time crashing cars into each other

332
00:17:55,754 --> 00:17:59,015
under different scenarios and came up with stuff that looked good.

333
00:17:59,015 --> 00:18:00,596
And really there's two...

334
00:18:01,550 --> 00:18:03,271
parts that you need to tune.

335
00:18:03,271 --> 00:18:05,432
One is, while there is a collision,

336
00:18:05,432 --> 00:18:06,493
what's your blend factor?

337
00:18:06,493 --> 00:18:08,314
How much of the local physics velocity

338
00:18:08,314 --> 00:18:12,036
do you take versus the dead reckon velocity?

339
00:18:12,036 --> 00:18:14,217
And when the collision finishes, how quickly do you

340
00:18:14,217 --> 00:18:15,758
go back to full dead reckoning?

341
00:18:15,758 --> 00:18:19,599
And what we ended up shipping with

342
00:18:19,599 --> 00:18:22,341
is a graph that looks a bit something like this.

343
00:18:22,341 --> 00:18:26,183
So before you have a collision, you're fully in dead reckoning.

344
00:18:26,957 --> 00:18:30,818
As soon as you collide with something, there's a short period of time where we switch to

345
00:18:30,818 --> 00:18:31,898
full local physics.

346
00:18:31,898 --> 00:18:37,100
So dead reckoning is ignored completely and we just simulate the rigid bodies locally.

347
00:18:37,100 --> 00:18:42,621
And then we kind of go to this halfway stage where we're taking a little bit of the dead

348
00:18:42,621 --> 00:18:46,582
reckoned trajectory, but still mostly local physics.

349
00:18:46,582 --> 00:18:50,283
And then when we come out of the collision, we ramp back up to full dead reckoning.

350
00:18:51,362 --> 00:18:56,485
The other interesting thing here is that we ramp back up a lot quicker for bikes versus cars.

351
00:18:56,485 --> 00:19:02,228
This is because bikes, they're smaller, they're lightweight, so they kind of go in and out of collisions a lot quicker,

352
00:19:02,228 --> 00:19:03,789
so we want to go back to dead reckoning a lot quicker.

353
00:19:03,789 --> 00:19:05,450
And this is a video of what you might get afterwards.

354
00:19:18,237 --> 00:19:22,179
So, I mean, it's still not perfect, and it's really hard to show this in a video,

355
00:19:22,179 --> 00:19:28,203
but what you notice there is the car didn't go shooting all the way down the street.

356
00:19:28,203 --> 00:19:31,465
It kind of got pushed out of the way a little bit, but that was it.

357
00:19:31,465 --> 00:19:33,507
So this was a much better result.

358
00:19:33,507 --> 00:19:36,489
Now, one interesting side effect that arises is

359
00:19:36,489 --> 00:19:40,451
because we now, we have now a short period where we

360
00:19:40,451 --> 00:19:43,233
fully in local physics, um...

361
00:19:44,014 --> 00:19:48,999
we have no guarantees that for that period of time the collision is going to play out the same on both peers.

362
00:19:48,999 --> 00:19:55,285
For example, if your two cars crash into each other, and on one machine

363
00:19:55,285 --> 00:19:58,789
it's kind of pushed this way, and on the other machine it's pushed that way,

364
00:19:58,789 --> 00:20:02,272
then when you blend back to Dead Reckoning you kind of have this weird,

365
00:20:02,272 --> 00:20:06,897
you're going to have this weird sliding kind of effect, which is very jarring, so we

366
00:20:06,897 --> 00:20:08,078
we want to avoid that.

367
00:20:10,101 --> 00:20:11,482
There's no magic way of doing that.

368
00:20:11,482 --> 00:20:13,824
There's no silver bullet.

369
00:20:13,824 --> 00:20:16,366
But what we can do to try and help this a little bit

370
00:20:16,366 --> 00:20:18,928
is before the collision's about to start,

371
00:20:18,928 --> 00:20:22,191
if our vehicles were theoretically closer

372
00:20:22,191 --> 00:20:25,954
to their master positions, then the collision

373
00:20:25,954 --> 00:20:28,776
is more likely to play out the same on both machines,

374
00:20:28,776 --> 00:20:32,519
which should reduce those kinds of issues.

375
00:20:32,519 --> 00:20:33,860
How can we do that?

376
00:20:37,394 --> 00:20:41,337
What we ended up doing is putting in an algorithm that

377
00:20:41,337 --> 00:20:43,859
predicted that there was a collision that was imminent

378
00:20:43,859 --> 00:20:47,082
and increased the extrapolation in those cases.

379
00:20:47,082 --> 00:20:49,844
The theory behind that is if you're

380
00:20:49,844 --> 00:20:51,585
about to crash into something, you're

381
00:20:51,585 --> 00:20:53,627
very unlikely to steer out of the way.

382
00:20:53,627 --> 00:20:55,749
So for AI-controlled vehicles, we

383
00:20:55,749 --> 00:20:58,771
can guarantee that because we have control over that.

384
00:20:58,771 --> 00:21:00,853
But even for player vehicles, there's only a short time

385
00:21:00,853 --> 00:21:01,933
window.

386
00:21:01,933 --> 00:21:03,535
So it's very unlikely that they're going to.

387
00:21:04,422 --> 00:21:08,024
avoid the collision completely and so by extrapolating a bit more

388
00:21:08,024 --> 00:21:13,527
we bring things a little bit closer together and it makes the problems

389
00:21:13,527 --> 00:21:16,990
just a little bit less likely and every little bit helps.

390
00:21:16,990 --> 00:21:20,852
And actually we already had an algorithm for predicting collisions from our AI

391
00:21:20,852 --> 00:21:23,374
system so we basically hooked that up to the

392
00:21:23,374 --> 00:21:25,035
to the dead reckoning logic.

393
00:21:25,669 --> 00:21:29,915
And it gave us a heuristic about how likely you are to collide with something,

394
00:21:29,915 --> 00:21:32,298
and we used that to modify the time offset.

395
00:21:32,298 --> 00:21:35,062
So basically, if you're likely to crash into something,

396
00:21:35,062 --> 00:21:36,944
we kind of reduced the time offset,

397
00:21:36,944 --> 00:21:40,890
which basically causes the vehicle to be extrapolated more.

398
00:21:44,276 --> 00:21:49,120
And what I've just described there, this is more or less what we ship with Watch Dogs 2.

399
00:21:49,120 --> 00:21:50,241
But this is the end of the story.

400
00:21:50,241 --> 00:21:53,883
There's a lot of many problems that are still outstanding.

401
00:21:53,883 --> 00:21:56,165
I'm going to cover some of them today, but there's many others.

402
00:21:56,165 --> 00:22:00,448
I'll talk about collisions with static geometry, differences in time offsets,

403
00:22:00,448 --> 00:22:02,030
and what I'm dubbing the uncanny valley.

404
00:22:02,030 --> 00:22:02,490
So, when you're...

405
00:22:07,232 --> 00:22:12,094
If you have a car that's kind of crashed into something and you're actually meant to be over here,

406
00:22:12,094 --> 00:22:17,155
it's not too bad because you can sort of push this car out of the way and get to where you're meant to be.

407
00:22:17,155 --> 00:22:22,797
But if you're colliding with static geometry like a brick wall, well, the brick wall's not going to give way,

408
00:22:22,797 --> 00:22:23,718
so you're kind of stuck.

409
00:22:23,718 --> 00:22:30,200
And worse than that is trees, because trees in our game are not destructible, and they're tall and skinny,

410
00:22:30,200 --> 00:22:33,641
so it's actually easier to end up on the wrong side of the tree.

411
00:22:33,641 --> 00:22:35,381
And then you get things that look like this.

412
00:22:40,973 --> 00:22:43,536
So this is exaggerated for effect.

413
00:22:43,536 --> 00:22:45,738
You're not actually going to see this in the game,

414
00:22:45,738 --> 00:22:47,420
unless you're really, really unlucky.

415
00:22:47,420 --> 00:22:49,021
But it kind of gives you an idea of what

416
00:22:49,021 --> 00:22:50,343
happens when things go wrong.

417
00:22:50,343 --> 00:22:54,747
And there are sort of ways to improve that.

418
00:22:54,747 --> 00:22:58,131
One of the possibilities is to just stay out of the position.

419
00:22:58,131 --> 00:23:00,213
Maybe if you're on the wrong side of the tree,

420
00:23:00,213 --> 00:23:01,455
maybe it's not so bad.

421
00:23:01,455 --> 00:23:03,196
You can get away with that in some cases.

422
00:23:04,225 --> 00:23:10,989
The other one that we could try is kind of soft body physics, so maybe just disable the collision on the tree and

423
00:23:10,989 --> 00:23:16,292
slide your way through the tree or allow for a little bit of penetration, something like that.

424
00:23:16,292 --> 00:23:20,254
And of course with a dead reckoning there's always the fallback scenario of just

425
00:23:20,254 --> 00:23:24,857
teleporting to where you're going to go. That's all something that you have to do at some point.

426
00:23:26,002 --> 00:23:32,268
But really the goal is to reduce the jittering effects because that's what the player is going to notice.

427
00:23:32,268 --> 00:23:37,392
Generally in Watch Dogs 2, what we ended up doing is more the first option, kind of

428
00:23:37,392 --> 00:23:41,335
leaving cars a little bit out of position. If we detect this,

429
00:23:41,335 --> 00:23:47,200
you're colliding with too many things and you're not getting to where you want to be, well we'll just let it sit there and kind of

430
00:23:47,200 --> 00:23:47,520
hope for the best.

431
00:23:47,520 --> 00:23:49,241
The other interesting problem is that...

432
00:23:53,928 --> 00:23:58,792
I've talked about what we do with time offsets for vehicles, but that doesn't apply for pedestrians.

433
00:23:58,792 --> 00:24:01,173
Pedestrians much prefer to be interpolated.

434
00:24:01,173 --> 00:24:06,778
And that's because they don't have to worry about missed collisions or any of that.

435
00:24:06,778 --> 00:24:07,198
They...

436
00:24:08,088 --> 00:24:10,370
and they travel a lot slower.

437
00:24:10,370 --> 00:24:14,673
So using interpolation gives you much better looking trajectories for pedestrians.

438
00:24:14,673 --> 00:24:18,555
And generally it's not much of an issue because if your player is on foot,

439
00:24:18,555 --> 00:24:21,998
you're interacting with other characters on foot

440
00:24:21,998 --> 00:24:24,139
and your time offsets, they're pretty similar.

441
00:24:24,139 --> 00:24:26,241
And if your player's in a car,

442
00:24:26,241 --> 00:24:28,643
you're interacting with other characters in cars,

443
00:24:28,643 --> 00:24:30,604
and again your time offsets are pretty similar.

444
00:24:30,604 --> 00:24:35,067
Where all of this falls apart is when the two intersect.

445
00:24:35,761 --> 00:24:39,523
And then you get things like this, where one pedestrian's

446
00:24:39,523 --> 00:24:41,884
just been missed, and on the other machine,

447
00:24:41,884 --> 00:24:44,265
he's been run over and he's flying through the air

448
00:24:44,265 --> 00:24:44,805
and ragdolling.

449
00:24:44,805 --> 00:24:49,247
Now, this is important because, keep in mind,

450
00:24:49,247 --> 00:24:52,608
the goal of bounty mode is to take down another player.

451
00:24:52,608 --> 00:24:54,969
And running someone over with your car

452
00:24:54,969 --> 00:24:57,270
is a really good way of taking someone down.

453
00:24:57,270 --> 00:25:00,572
And so then you get these cases where, you know,

454
00:25:00,572 --> 00:25:01,592
I think I killed you.

455
00:25:01,592 --> 00:25:02,252
No, you didn't.

456
00:25:02,252 --> 00:25:02,853
Yes, I did.

457
00:25:02,853 --> 00:25:03,433
Blah, blah, blah.

458
00:25:03,433 --> 00:25:04,793
Which is very frustrating.

459
00:25:05,555 --> 00:25:10,558
I think the way we can improve this is the same collision prediction algorithm that I

460
00:25:10,558 --> 00:25:15,782
talked about could be applied for cars versus pedestrians, where if you're about to run

461
00:25:15,782 --> 00:25:23,407
over someone, we extrapolate both a bit more and we get a bit closer on each end.

462
00:25:23,407 --> 00:25:27,851
The difference is that pedestrians are much more maneuverable, so they could jump out

463
00:25:27,851 --> 00:25:30,032
of the way at the last minute, so it doesn't fully help.

464
00:25:31,397 --> 00:25:33,437
And the other thing is, we do have a similar issue for

465
00:25:33,437 --> 00:25:35,698
breakables, but there's no real gameplay impact.

466
00:25:35,698 --> 00:25:40,200
If one player drives through a bus stop and destroys it, but

467
00:25:40,200 --> 00:25:43,022
it didn't happen on the other machine, it's not a big deal.

468
00:25:43,022 --> 00:25:46,543
It's just debris that doesn't really interfere with anything.

469
00:25:46,543 --> 00:25:51,785
The other interesting thing I want to talk about is something

470
00:25:51,785 --> 00:25:53,786
that I've dubbed the uncanny valley.

471
00:25:55,042 --> 00:26:00,765
With everything we've done so far, our dead reckon trajectories, they were looking very good, right?

472
00:26:00,765 --> 00:26:08,150
Our trajectories were matching up very closely to the master snapshots, the percentage of error was very low,

473
00:26:08,150 --> 00:26:12,853
but actually playing the game, it still didn't feel quite right.

474
00:26:12,853 --> 00:26:17,476
You could still sort of tell that you were looking at a replicated card rather than a master.

475
00:26:17,476 --> 00:26:20,278
And there's lots of little things that really add up.

476
00:26:20,278 --> 00:26:21,179
So, for example...

477
00:26:22,980 --> 00:26:25,422
minor weight shifts kind of get lost in replication.

478
00:26:25,422 --> 00:26:29,766
The other one is that cars actually don't rotate

479
00:26:29,766 --> 00:26:30,747
around their center of mass.

480
00:26:30,747 --> 00:26:33,790
So dead reckoning algorithms usually deal

481
00:26:33,790 --> 00:26:36,312
with just a point with angular velocity around it,

482
00:26:36,312 --> 00:26:38,434
and we map that to the car's center of mass.

483
00:26:38,434 --> 00:26:40,355
But actually it's a lot more complex than that.

484
00:26:40,355 --> 00:26:43,999
And then there's the other issue that I mentioned earlier

485
00:26:43,999 --> 00:26:46,981
with the sensitivity to even slightly inconsistent

486
00:26:46,981 --> 00:26:49,223
velocities, and that became noticeable as well.

487
00:26:50,876 --> 00:26:57,400
One of the things we did do here was apply a bunch of post-process smoothing to our dead reckon trajectories

488
00:26:57,400 --> 00:27:01,823
Just to at least even out smooth out those inconsistent velocities

489
00:27:01,823 --> 00:27:08,508
What's a bit awkward there is that post-process smoothing kind of has to coexist with projective velocity blending

490
00:27:08,508 --> 00:27:15,954
So dead reckoning is meant to give you a nice smooth trajectory, but in practice it didn't so we put this thing on top of it

491
00:27:15,954 --> 00:27:18,676
which kind of cancelled out the results a little bit so

492
00:27:19,639 --> 00:27:24,804
felt awkward and dirty but hey, the result looked good so whatever.

493
00:27:24,804 --> 00:27:31,430
Moving on, there's a few areas I'd like to research a lot more in the future.

494
00:27:31,430 --> 00:27:34,993
Number one, I'm very interested in machine learning kind of things

495
00:27:34,993 --> 00:27:38,576
because I think that reckoning is very applicable to machine learning.

496
00:27:38,576 --> 00:27:40,117
It's kind of this thing where...

497
00:27:41,581 --> 00:27:42,602
we're going to have an error.

498
00:27:42,602 --> 00:27:44,824
We can compare the result of algorithm

499
00:27:44,824 --> 00:27:48,028
to what it should have been and make it adapt itself

500
00:27:48,028 --> 00:27:50,731
to reduce that percentage of error.

501
00:27:50,731 --> 00:27:52,653
And basically, the holy grail for me

502
00:27:52,653 --> 00:27:54,735
is all the stuff I talked about when

503
00:27:54,735 --> 00:27:57,518
I had to do this manual tuning of variables

504
00:27:57,518 --> 00:28:00,361
and really play the game a lot, I don't want to do that.

505
00:28:00,361 --> 00:28:01,783
I want a robot to do that for me.

506
00:28:04,683 --> 00:28:07,644
And the other one that interests me is smoothing algorithms.

507
00:28:07,644 --> 00:28:09,865
What we did for the post-process smoothing

508
00:28:09,865 --> 00:28:11,026
was very simplistic.

509
00:28:11,026 --> 00:28:13,867
I'm specifically interested in Kalman filters

510
00:28:13,867 --> 00:28:17,189
because I think they bring many of those concepts together.

511
00:28:17,189 --> 00:28:19,330
They're a lot harder to deal with

512
00:28:19,330 --> 00:28:21,551
and put in place and tune,

513
00:28:21,551 --> 00:28:23,572
but I think there's something there I want to try.

514
00:28:23,572 --> 00:28:27,874
And so finally, if you remember anything from this talk,

515
00:28:27,874 --> 00:28:30,235
number one, if you're working on dead reckoning,

516
00:28:30,235 --> 00:28:31,455
debug your trajectories.

517
00:28:32,600 --> 00:28:37,924
get your testers to record everything, to turn on all of your debug rendering and all of your debug info.

518
00:28:37,924 --> 00:28:40,986
So when you get a bug about a desync,

519
00:28:40,986 --> 00:28:44,929
you get everything that's laid up to that desync, so you can try and figure it out.

520
00:28:44,929 --> 00:28:47,070
And finally for me, I found that

521
00:28:47,070 --> 00:28:51,774
even though we're dealing with very mathematical algorithms and all these equations,

522
00:28:51,774 --> 00:28:53,535
there's still a lot of art to this science.

523
00:28:53,535 --> 00:28:55,216
We still end up

524
00:28:55,216 --> 00:28:59,139
tuning variables to make something feel good, which is...

525
00:29:00,083 --> 00:29:04,085
completely opposite to all my scientific instincts.

526
00:29:04,085 --> 00:29:05,626
Anyway, that's it for me.

527
00:29:05,626 --> 00:29:09,348
I've got time for maybe one question,

528
00:29:09,348 --> 00:29:11,609
or you can catch me in the wrap-up lounge afterwards.

529
00:29:11,609 --> 00:29:14,010
And I'm talking at the Ubisoft lounge.

530
00:29:14,010 --> 00:29:15,950
I've got a whole bunch of extra problems

531
00:29:15,950 --> 00:29:17,771
to talk about if you're interested in that,

532
00:29:17,771 --> 00:29:20,092
that I didn't get a chance to cover today.

533
00:29:20,092 --> 00:29:20,793
Thanks, everyone.

534
00:29:20,793 --> 00:29:27,836
AUDIENCE APPLAUDING

535
00:29:27,836 --> 00:29:29,376
One question, go.

536
00:29:30,093 --> 00:29:36,055
Yes, so you guys were talking about how authority is distributed between different clients.

537
00:29:36,055 --> 00:29:39,716
I imagine that as one client goes away, you kind of have to transfer authority and usually

538
00:29:39,716 --> 00:29:42,597
that introduces kind of like a time hop for somebody observing.

539
00:29:42,597 --> 00:29:45,078
Were you guys able to do anything about that?

540
00:29:45,078 --> 00:29:46,458
We did a bit, yes.

541
00:29:46,458 --> 00:29:52,560
Especially with cars traveling in a straight line, when you switch over, it's exactly that.

542
00:29:52,560 --> 00:29:53,401
It's going backwards.

543
00:29:53,401 --> 00:29:56,081
And basically what we did there was kind of slow it down.

544
00:29:57,062 --> 00:30:00,623
We know we've transferred authority, we know it's driving in a straight line,

545
00:30:00,623 --> 00:30:04,585
so instead of going backwards, we just slow down a bit to kind of let it catch up again.

546
00:30:04,585 --> 00:30:09,788
And do you guys clamp the extrapolation along a plane so that if some cars are

547
00:30:09,788 --> 00:30:13,350
bouncing up and down, you don't over-extrapolate like up or?

548
00:30:13,350 --> 00:30:19,653
Yeah, we had to do... I mean, yes, that was an issue for sure. Some of that stuff...

549
00:30:21,192 --> 00:30:27,456
Part of the solution there is to let physics simulate the Z axis basically.

550
00:30:27,456 --> 00:30:30,558
So don't extrapolate upwards.

551
00:30:30,558 --> 00:30:34,520
If you're kind of close to the ground, you let physics kind of keep you close, right?

552
00:30:34,520 --> 00:30:38,222
But there's where this goes wrong if you're jumping over, you know,

553
00:30:38,222 --> 00:30:42,505
jumping over a hill or whatever, which we do because there's a lot of hills in our game.

554
00:30:42,505 --> 00:30:45,487
Then you do let dead reckoning kind of kick in

555
00:30:45,487 --> 00:30:50,090
and predict the vertical part of it, if that makes sense.

556
00:30:50,453 --> 00:30:53,794
Unless someone else has a different question, I have one more.

557
00:30:53,794 --> 00:30:57,655
So usually, like, vehicle replication in games like Halo and other places

558
00:30:57,655 --> 00:30:59,915
use the information about that, hey, this is a car,

559
00:30:59,915 --> 00:31:03,076
so we know we can limit interactions in a certain way.

560
00:31:03,076 --> 00:31:06,657
But it seems like you guys were generally replicating

561
00:31:06,657 --> 00:31:08,657
as if it was a generic physics object.

562
00:31:08,657 --> 00:31:11,458
So what do you think about using some of these methods

563
00:31:11,458 --> 00:31:13,918
on replicating generic physics objects

564
00:31:13,918 --> 00:31:17,579
and not specifically just cars and multiplayer scenarios?

565
00:31:17,579 --> 00:31:17,859
Yeah, I'm in you.

566
00:31:20,797 --> 00:31:24,661
You're right, a lot of it was treating it as a general physics object.

567
00:31:24,661 --> 00:31:28,244
We did have a lot of sort of car specific awareness.

568
00:31:28,244 --> 00:31:33,449
The example that I'm thinking of now is knowing that you're a bike versus a car for example

569
00:31:33,449 --> 00:31:37,373
where we put different clamps on certain things and adjust the numbers differently.

570
00:31:38,070 --> 00:31:40,252
Does that make sense? Does that answer your question?

571
00:31:40,252 --> 00:31:45,435
Yeah, yeah, yeah. I figured you guys, like the collision prediction also takes into account...

572
00:31:45,435 --> 00:31:46,836
Yeah, all that stuff does change, right?

573
00:31:46,836 --> 00:31:49,357
Although it is rigid bodies, there's still a bit more than that.

574
00:31:49,357 --> 00:31:53,140
But the general basics sounded like you could easily apply it to just general physics replication.

575
00:31:53,140 --> 00:31:54,200
For sure, yes, yes.

576
00:31:54,200 --> 00:31:54,601
Thank you.

577
00:31:54,601 --> 00:31:54,901
Thanks everyone.

