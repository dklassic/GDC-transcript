1
00:00:08,412 --> 00:00:13,596
Hello everybody and thank you for coming to Bioware Embedded QA, your support class.

2
00:00:13,596 --> 00:00:16,118
My name is Barbara Klimek.

3
00:00:16,118 --> 00:00:21,322
I'm a team lead at Bioware and I've been with Bioware for about six years.

4
00:00:21,322 --> 00:00:26,106
Fun fact, it's my birthday today and I can't imagine a better way to ring in 30 than talking

5
00:00:26,106 --> 00:00:29,468
to you guys about what we do.

6
00:00:33,845 --> 00:00:38,429
When I started in QA, I had no idea that what BioWare did.

7
00:00:38,429 --> 00:00:41,011
I didn't know what embedded QA was.

8
00:00:41,011 --> 00:00:42,051
I didn't really know much about QA.

9
00:00:42,051 --> 00:00:46,215
But what we do, it's special.

10
00:00:46,215 --> 00:00:48,357
What a lot of studios do by using embedded QA,

11
00:00:48,357 --> 00:00:49,838
it's the future.

12
00:00:49,838 --> 00:00:52,660
And that's what I'm here to talk to you guys about,

13
00:00:52,660 --> 00:00:53,841
about how we do things.

14
00:00:53,841 --> 00:00:55,082
And if you

15
00:00:55,509 --> 00:01:01,450
are interested in doing embedded QA or you already are doing embedded QA, some things

16
00:01:01,450 --> 00:01:05,631
that we've learned that maybe you guys can apply.

17
00:01:05,631 --> 00:01:13,713
This talk does run pretty long, but both Garrett Geer and I have a roundtable at 3.30 today

18
00:01:13,713 --> 00:01:15,233
in room 121 in North Hall.

19
00:01:15,233 --> 00:01:17,914
A couple of pieces of housekeeping.

20
00:01:18,413 --> 00:01:21,075
Please set your cell phones to silent.

21
00:01:21,075 --> 00:01:24,037
And the team does send out a survey

22
00:01:24,037 --> 00:01:26,079
at the end of this presentation.

23
00:01:26,079 --> 00:01:27,781
So please fill it out.

24
00:01:27,781 --> 00:01:31,223
Let them know what you thought of the presentation, what

25
00:01:31,223 --> 00:01:33,545
you thought of me, and what you thought about having QA talks

26
00:01:33,545 --> 00:01:33,845
at GDC in general.

27
00:01:33,845 --> 00:01:35,467
Thank you.

28
00:01:35,467 --> 00:01:37,168
So embedded QA.

29
00:01:37,168 --> 00:01:39,770
To understand embedded QA, I need

30
00:01:39,770 --> 00:01:43,033
you to understand what I mean when I use the phrase black box

31
00:01:43,033 --> 00:01:43,273
testing.

32
00:01:44,244 --> 00:01:47,266
So in black box testing, which was the more traditional way

33
00:01:47,266 --> 00:01:50,968
of doing QA, QA was given a copy of the game

34
00:01:50,968 --> 00:01:52,049
to test in isolation.

35
00:01:52,049 --> 00:01:55,410
In that model, the relationship was

36
00:01:55,410 --> 00:01:58,472
limited between quality assurance and development,

37
00:01:58,472 --> 00:02:01,554
and they were seen as an external team, not part

38
00:02:01,554 --> 00:02:02,314
of the team itself.

39
00:02:02,314 --> 00:02:06,557
Black box testers would be isolated from developers,

40
00:02:06,557 --> 00:02:08,858
working either in a large room or in a separate studio

41
00:02:08,858 --> 00:02:10,599
entirely.

42
00:02:10,599 --> 00:02:12,880
Black box testers didn't interact with developers

43
00:02:12,880 --> 00:02:13,281
directly.

44
00:02:14,180 --> 00:02:18,945
and all test requests from developers would come in to a test lead and then be parsed

45
00:02:18,945 --> 00:02:22,187
out into an anonymous testing pool, basically.

46
00:02:22,187 --> 00:02:27,192
The testers didn't have access to the developer tools or source code.

47
00:02:27,192 --> 00:02:33,578
You know, there is value in black box testing even today, but it is very limiting when it

48
00:02:33,578 --> 00:02:36,640
is the only QA model that is used on a project.

49
00:02:38,609 --> 00:02:42,211
So embedded QA is essentially a peer-to-peer relationship

50
00:02:42,211 --> 00:02:45,473
between quality assurance and developers.

51
00:02:45,473 --> 00:02:48,934
It stems from a culture of communication

52
00:02:48,934 --> 00:02:49,955
and shared knowledge.

53
00:02:49,955 --> 00:02:54,597
Embedded QA are individuals who have access to

54
00:02:54,597 --> 00:02:57,979
and knowledge of the design tools and game code.

55
00:02:57,979 --> 00:03:03,182
This allows us to build custom tools, scripts, and levels

56
00:03:03,182 --> 00:03:05,503
to assist both us and developers in testing.

57
00:03:06,912 --> 00:03:10,634
It allows us to understand systems thoroughly from the backend,

58
00:03:10,634 --> 00:03:13,316
and not just from the final product that we are delivered.

59
00:03:13,316 --> 00:03:18,800
It also grants us opportunities to extract data from the game code directly

60
00:03:18,800 --> 00:03:20,742
to drive verification testing.

61
00:03:20,742 --> 00:03:23,083
QA work directly with developers, ideally in the same office,

62
00:03:23,083 --> 00:03:23,964
if the space allows.

63
00:03:23,964 --> 00:03:27,927
They are part of the Scrum team.

64
00:03:27,927 --> 00:03:33,811
They attend meetings with them, have full access to their backlog,

65
00:03:33,811 --> 00:03:35,192
and communicate with the developers.

66
00:03:35,502 --> 00:03:38,364
they support on a regular, if not daily basis.

67
00:03:38,364 --> 00:03:41,586
This is a full working relationship

68
00:03:41,586 --> 00:03:45,169
where the expectations of what should be filed,

69
00:03:45,169 --> 00:03:48,611
how and when is agreed upon by both development and QA.

70
00:03:48,611 --> 00:03:52,593
This is basically what it looks like.

71
00:03:52,593 --> 00:03:54,435
This is a very simplistic view.

72
00:03:54,435 --> 00:03:57,016
In reality, we have multiple team leads

73
00:03:57,016 --> 00:03:58,197
and a larger team overall.

74
00:03:59,204 --> 00:04:05,365
An embedded QA team consists of a blend of permanent, highly specialized quality analysts,

75
00:04:05,365 --> 00:04:07,806
and regular, if temporary, testers.

76
00:04:07,806 --> 00:04:14,288
Often, the testers are specialized as well, and are encouraged to form working relationships

77
00:04:14,288 --> 00:04:16,028
with the developers they directly support.

78
00:04:16,028 --> 00:04:21,029
Both are encouraged to document and share their knowledge with the rest of the QA team.

79
00:04:23,234 --> 00:04:25,815
So the analysts will write test scripts for their ownership,

80
00:04:25,815 --> 00:04:27,976
and they are autonomous units.

81
00:04:27,976 --> 00:04:31,258
They task themselves and the testers that support them.

82
00:04:31,258 --> 00:04:34,279
Their work is driven by developer work,

83
00:04:34,279 --> 00:04:36,740
as well as their own scheduled regression testing.

84
00:04:36,740 --> 00:04:38,461
Tying everything together,

85
00:04:38,461 --> 00:04:40,141
we have people like me, team leads.

86
00:04:40,141 --> 00:04:43,883
Team leads provide high-level deliverables

87
00:04:43,883 --> 00:04:45,544
and performance manage the team.

88
00:04:45,544 --> 00:04:48,345
They also handle requests for coverage on things

89
00:04:48,345 --> 00:04:50,586
that span multiple disciplines, such as a demo.

90
00:04:51,760 --> 00:04:57,362
They drive convergence initiatives across multiple QA disciplines and projects,

91
00:04:57,362 --> 00:05:00,823
and work to remove any roadblocks that the team may encounter.

92
00:05:00,823 --> 00:05:07,006
So no model is ever going to be perfect, and the embedded model does offer many advantages.

93
00:05:07,006 --> 00:05:11,627
But with those do come some additional things you need to keep in mind.

94
00:05:11,627 --> 00:05:15,068
So, discipline specialists.

95
00:05:15,968 --> 00:05:18,529
Our games have a lot of content and systems

96
00:05:18,529 --> 00:05:21,249
that can interact with each other in many different ways.

97
00:05:21,249 --> 00:05:24,890
The best way we found to provide coverage for those

98
00:05:24,890 --> 00:05:28,431
was to split our QA analysts into various sub-disciplines.

99
00:05:28,431 --> 00:05:31,191
So you'd have your art analyst, your narrative analyst,

100
00:05:31,191 --> 00:05:32,792
gameplay, and level design.

101
00:05:32,792 --> 00:05:34,952
We do our best to mirror

102
00:05:34,952 --> 00:05:36,892
the way the development scrums are structured.

103
00:05:36,892 --> 00:05:41,093
Each area usually has at least one specialist

104
00:05:41,093 --> 00:05:42,733
and a couple testers dedicated to it.

105
00:05:44,504 --> 00:05:49,369
Our analysts become knowledge experts that build upon their knowledge of an area across

106
00:05:49,369 --> 00:05:50,630
multiple projects.

107
00:05:50,630 --> 00:05:53,272
They get more proficient in that area with everyone.

108
00:05:53,272 --> 00:05:59,118
This is an investment that pays off over time because they bring that expertise forward

109
00:05:59,118 --> 00:06:03,482
to the next project they're working on, which allows them to identify risks and potential

110
00:06:03,482 --> 00:06:07,065
concerns early, which can result in savings when developing features.

111
00:06:08,824 --> 00:06:12,649
So the catch is, if you want to build someone to take on this additional responsibility,

112
00:06:12,649 --> 00:06:14,852
you need their pay to reflect that.

113
00:06:14,852 --> 00:06:20,739
These are no longer entry-level positions, as QA is normally perceived to be.

114
00:06:20,739 --> 00:06:24,924
But specialization isn't limited to just our QA analysts.

115
00:06:25,983 --> 00:06:29,304
Becoming knowledge experts empowers individuals,

116
00:06:29,304 --> 00:06:32,306
and we find that testers that are given an ownership,

117
00:06:32,306 --> 00:06:34,247
well, they take more pride in their work.

118
00:06:34,247 --> 00:06:36,168
If you have something you own

119
00:06:36,168 --> 00:06:39,169
and are personally held accountable for,

120
00:06:39,169 --> 00:06:41,170
you're more invested, you're gonna get attached,

121
00:06:41,170 --> 00:06:42,491
and you're gonna perform better,

122
00:06:42,491 --> 00:06:44,552
even if you are a temporary tester.

123
00:06:45,687 --> 00:06:50,190
The return on this for us is that we have people who work harder, who pay more attention

124
00:06:50,190 --> 00:06:54,714
to the details of their ownership, and are more proactive when it comes to communicating

125
00:06:54,714 --> 00:06:56,856
about potential issues in their area.

126
00:06:56,856 --> 00:06:58,677
So the cost of this is time.

127
00:06:58,677 --> 00:07:05,303
It takes time for both analysts and testers to become knowledge experts.

128
00:07:06,095 --> 00:07:10,658
An analyst needs to set up the framework for onboarding new testers into their discipline.

129
00:07:10,658 --> 00:07:15,521
And realistically, it takes about a month for a tester to really become a knowledge

130
00:07:15,521 --> 00:07:16,762
expert in their area.

131
00:07:16,762 --> 00:07:23,926
Now, the upside of this is, of course, that our analysts and testers form closer relationships

132
00:07:23,926 --> 00:07:28,329
with the developers, which result in better bugs, as well as testing that is relative

133
00:07:28,329 --> 00:07:28,889
and reactive.

134
00:07:28,889 --> 00:07:34,433
The specialists feel comfortable asking questions of the developers, meaning there's very little

135
00:07:34,433 --> 00:07:35,854
downtime looking for answers.

136
00:07:37,040 --> 00:07:40,841
Specialists, because they know their disciplines so well,

137
00:07:40,841 --> 00:07:42,761
will also be the first to know if an issue is

138
00:07:42,761 --> 00:07:45,022
the result of a feature currently being worked on

139
00:07:45,022 --> 00:07:46,442
or an actual bug.

140
00:07:46,442 --> 00:07:49,963
They will also notice minor changes or subtle bugs

141
00:07:49,963 --> 00:07:53,483
because they're so intimately familiar

142
00:07:53,483 --> 00:07:55,323
with that specific piece of content that they own.

143
00:07:55,323 --> 00:07:58,884
Understanding a system, they will also

144
00:07:58,884 --> 00:08:00,984
be better at identifying if an issue is

145
00:08:00,984 --> 00:08:04,405
the result of a larger problem and thus systemic

146
00:08:04,405 --> 00:08:06,185
or if it is a one-off issue.

147
00:08:06,763 --> 00:08:10,847
This often prevents us from filing multiple bugs that are caused by a single issue,

148
00:08:10,847 --> 00:08:14,629
which would otherwise pollute an already busy bug database.

149
00:08:14,629 --> 00:08:19,873
Specialists also identify telemetry and testability requirements early,

150
00:08:19,873 --> 00:08:27,699
so that they are considered part of the development of a feature and not a costly afterthought.

151
00:08:27,699 --> 00:08:31,462
Another advantage of this model is that QA have full access to the game

152
00:08:31,462 --> 00:08:34,705
and the code, as well as the editor that is used to build it.

153
00:08:36,112 --> 00:08:38,213
So with great power comes great responsibility,

154
00:08:38,213 --> 00:08:41,655
and we do take that power very seriously.

155
00:08:41,655 --> 00:08:43,116
QA are not adding content,

156
00:08:43,116 --> 00:08:45,977
they are not changing content that's gonna ship the game.

157
00:08:45,977 --> 00:08:49,058
Instead, they are building scripts or test levels

158
00:08:49,058 --> 00:08:53,000
that allow us to test content or systems in isolation.

159
00:08:53,000 --> 00:08:56,482
Both of these save our development a lot of man hours

160
00:08:56,482 --> 00:08:57,702
over the course of a project,

161
00:08:57,702 --> 00:09:00,924
as we find some of our test levels are used by developers

162
00:09:00,924 --> 00:09:02,365
to test their content as it comes in.

163
00:09:03,788 --> 00:09:06,970
We can verify content against the backend data directly

164
00:09:06,970 --> 00:09:08,190
from the editor itself.

165
00:09:08,190 --> 00:09:12,952
Let's say you need to check the LOD levels of an art asset.

166
00:09:12,952 --> 00:09:15,573
Well, we have a script that will just extract

167
00:09:15,573 --> 00:09:17,694
that information, put that into something

168
00:09:17,694 --> 00:09:20,355
where we can parse, like Excel.

169
00:09:20,355 --> 00:09:22,296
So we can just do a check like that,

170
00:09:22,296 --> 00:09:24,897
which takes minutes instead of hours

171
00:09:24,897 --> 00:09:26,938
manually opening each asset

172
00:09:26,938 --> 00:09:28,858
or testing that asset in a test level.

173
00:09:30,413 --> 00:09:32,173
Using extraction methods like these,

174
00:09:32,173 --> 00:09:33,253
we can ensure that our test scripts

175
00:09:33,253 --> 00:09:36,134
are also more accurate than they ever would

176
00:09:36,134 --> 00:09:38,634
if we had to rely on manual updating.

177
00:09:38,634 --> 00:09:39,294
So what is the cost of this?

178
00:09:39,294 --> 00:09:44,995
Well, you need your analysts and your testers

179
00:09:44,995 --> 00:09:46,116
to be somewhat technical.

180
00:09:46,116 --> 00:09:49,616
They don't need to have a computer science degree,

181
00:09:49,616 --> 00:09:52,277
but they need to be comfortable working with a game editor.

182
00:09:52,277 --> 00:09:56,598
Even then, you need to take the time to teach them

183
00:09:56,598 --> 00:09:58,118
how to use your specific editor.

184
00:09:59,172 --> 00:10:05,054
Everyone within QA at BioWare is trained how to use the editor within their first few weeks,

185
00:10:05,054 --> 00:10:06,555
if not the first week.

186
00:10:06,555 --> 00:10:07,075
Subjective feedback.

187
00:10:07,075 --> 00:10:16,318
Subjective feedback is difficult because it is fundamentally opinion-based and thus carries

188
00:10:16,318 --> 00:10:17,839
with it some form of bias.

189
00:10:17,839 --> 00:10:24,481
Traditionally, QA found that their subjective feedback was dismissed, with more merit being

190
00:10:24,481 --> 00:10:28,423
put on the results of external focus tests rather than internal QA.

191
00:10:29,699 --> 00:10:33,480
The thing is, internal QA are an opportunity

192
00:10:33,480 --> 00:10:36,101
for continuous focus testing that the developer

193
00:10:36,101 --> 00:10:39,262
can trigger on demand and in-house.

194
00:10:39,262 --> 00:10:42,063
It can be used to complement regularly scheduled

195
00:10:42,063 --> 00:10:44,744
focus tests or used to dig deeper

196
00:10:44,744 --> 00:10:47,585
into existing focus test results.

197
00:10:47,585 --> 00:10:51,547
As a company, you are already paying for these QA,

198
00:10:51,547 --> 00:10:52,987
so why not use them to their fullest potential?

199
00:10:52,987 --> 00:10:53,327
For QA, though,

200
00:10:57,374 --> 00:11:01,197
The key here is being able to provide subjective feedback

201
00:11:01,197 --> 00:11:02,718
that is actionable.

202
00:11:02,718 --> 00:11:05,901
Saying this combat is too hard doesn't help anyone.

203
00:11:05,901 --> 00:11:08,883
Without knowing what the root cause is,

204
00:11:08,883 --> 00:11:11,405
a developer is likely to dismiss this as a one-off,

205
00:11:11,405 --> 00:11:14,128
and they are absolutely right to do so.

206
00:11:14,128 --> 00:11:16,349
Developers are working on a compressed schedule,

207
00:11:16,349 --> 00:11:18,931
and they don't have time to investigate one-offs.

208
00:11:18,931 --> 00:11:24,696
However, by having QA analysts analyze the cause,

209
00:11:24,696 --> 00:11:26,698
they can provide better actionable feedback.

210
00:11:27,479 --> 00:11:31,861
This combat is too hard because the enemies in this fight

211
00:11:31,861 --> 00:11:32,801
tend to do x, y, or z.

212
00:11:32,801 --> 00:11:35,902
Or this combat is too hard if you did this quest first,

213
00:11:35,902 --> 00:11:37,143
and thus you're underleveled.

214
00:11:37,143 --> 00:11:40,144
This gives the developers a direction

215
00:11:40,144 --> 00:11:43,966
to focus on when they're addressing the issue.

216
00:11:43,966 --> 00:11:47,307
Being embedded with a team also means

217
00:11:47,307 --> 00:11:50,308
that they have a better understanding of when

218
00:11:50,308 --> 00:11:52,249
and what kind of subjective feedback

219
00:11:52,249 --> 00:11:54,490
is appropriate at different phases of a project.

220
00:11:55,825 --> 00:12:00,108
saying that a combat is too hard is useless if a balance pass hasn't been done on the creatures yet.

221
00:12:00,108 --> 00:12:06,672
And the cost of this is, again, time. The analysts need to sit down with the developers

222
00:12:06,672 --> 00:12:12,336
to establish what the feedback loop is going to look like for both functional and subjective

223
00:12:12,336 --> 00:12:16,779
feedback. What makes actionable feedback for gameplay is not going to be the same for level

224
00:12:16,779 --> 00:12:19,961
design, nor are they going to stick to the same schedules.

225
00:12:22,679 --> 00:12:27,162
Finding and fixing a bug early is more cost effective.

226
00:12:27,162 --> 00:12:28,343
Full stop.

227
00:12:28,343 --> 00:12:31,845
If it is a systemic issue, finding and fixing it early

228
00:12:31,845 --> 00:12:34,887
prevents child bugs that pollute the database.

229
00:12:34,887 --> 00:12:36,488
If it is a content issue.

230
00:12:37,074 --> 00:12:41,637
Having knowledge experts within QA who understand the content and systems

231
00:12:41,637 --> 00:12:45,000
result in a much higher chance of those issues being found earlier.

232
00:12:45,000 --> 00:12:49,523
This is why we have QA onboard a project as early as pre-production,

233
00:12:49,523 --> 00:12:53,587
reviewing design documents, reviewing first passes of writing,

234
00:12:53,587 --> 00:12:55,828
QA providing feedback from the earliest steps.

235
00:12:56,993 --> 00:12:59,375
Providing subjective feedback about what isn't working early

236
00:12:59,375 --> 00:13:03,217
allows for course correction before the feature is completed.

237
00:13:03,217 --> 00:13:05,818
This results in savings of developer hours

238
00:13:05,818 --> 00:13:09,020
that are better spent developing new features

239
00:13:09,020 --> 00:13:11,221
or achieving stretch goals on existing ones.

240
00:13:11,221 --> 00:13:13,943
Our games tend to be narrative heavy

241
00:13:13,943 --> 00:13:16,624
and narrative is one of the hardest things

242
00:13:16,624 --> 00:13:19,326
to provide feedback on as it is highly subjective.

243
00:13:20,609 --> 00:13:25,772
Our senior narrative analyst has been working with the narrative team for years to establish

244
00:13:25,772 --> 00:13:32,455
a project agnostic framework between the writing team and QA in regards to how, when, and what

245
00:13:32,455 --> 00:13:35,237
we test when it comes to narrative content.

246
00:13:35,237 --> 00:13:40,580
This was a project that he got buy-in from the narrative team directly, and they reviewed

247
00:13:40,580 --> 00:13:45,122
and offered feedback on it, finally signing off on the latest iteration.

248
00:13:46,276 --> 00:13:49,977
This gave it the stamp of approval across the studio

249
00:13:49,977 --> 00:13:53,159
to be used as a standard approach for narrative testing.

250
00:13:53,159 --> 00:13:56,220
So what you see on screen is a small sample

251
00:13:56,220 --> 00:13:58,501
of this framework.

252
00:13:58,501 --> 00:14:00,981
It is a blueprint for how QA should be testing

253
00:14:00,981 --> 00:14:02,942
narrative content, right from the earliest

254
00:14:02,942 --> 00:14:06,103
planning documents to the final finished implementation.

255
00:14:06,103 --> 00:14:10,625
This is important because it allows the narrative team

256
00:14:10,625 --> 00:14:12,926
to feel confident in the coverage they will be getting.

257
00:14:14,204 --> 00:14:20,585
Writing can rely that the format they will receive feedback in is appropriate for that

258
00:14:20,585 --> 00:14:22,066
specific phase of a project.

259
00:14:22,066 --> 00:14:28,387
Beyond that, as part of our narrative QA framework, Erone created a guide for how to deconstruct

260
00:14:28,387 --> 00:14:30,727
feedback so that it is useful for the writers.

261
00:14:30,727 --> 00:14:34,868
And this is especially critical when providing subjective feedback.

262
00:14:34,868 --> 00:14:42,549
Having QA who are familiar with your content and toolset unlock opportunities for the discovery

263
00:14:42,549 --> 00:14:43,410
of efficiencies.

264
00:14:44,444 --> 00:14:47,546
For example, Dragon Age Inquisition shipped

265
00:14:47,546 --> 00:14:50,428
with almost 600 unique codex entries.

266
00:14:50,428 --> 00:14:53,370
These were entries that the players could unlock

267
00:14:53,370 --> 00:14:55,491
as they played through the game.

268
00:14:55,491 --> 00:14:58,333
Testing that these could be obtained legally

269
00:14:58,333 --> 00:15:00,534
was incredibly difficult.

270
00:15:00,534 --> 00:15:03,516
There was no reliable documentation that had been created

271
00:15:03,516 --> 00:15:06,478
and these were going through changes

272
00:15:06,478 --> 00:15:07,398
all the way up until we shipped.

273
00:15:08,341 --> 00:15:12,124
So on DAI, I manually looked through the editor,

274
00:15:12,124 --> 00:15:14,686
which is not something you could do as a black box tester,

275
00:15:14,686 --> 00:15:18,209
found the location of every entry and jotted down

276
00:15:18,209 --> 00:15:21,072
where was it located and what was required

277
00:15:21,072 --> 00:15:22,753
to actually unlock it.

278
00:15:22,753 --> 00:15:24,435
This took hours.

279
00:15:24,435 --> 00:15:29,139
And while for that moment, two months before we ship,

280
00:15:29,139 --> 00:15:31,461
it was accurate, over the following weeks

281
00:15:31,461 --> 00:15:33,102
as content changed and moved around,

282
00:15:33,102 --> 00:15:34,543
it was no longer accurate.

283
00:15:34,543 --> 00:15:36,645
And so maintaining it was incredibly expensive.

284
00:15:38,386 --> 00:15:43,450
So during DLC, I got to work with one of our technical QA

285
00:15:43,450 --> 00:15:45,111
analysts.

286
00:15:45,111 --> 00:15:48,213
Brian has a talent for identifying opportunities

287
00:15:48,213 --> 00:15:51,776
not just to automate testing, but to automate

288
00:15:51,776 --> 00:15:53,557
the acquisition of information.

289
00:15:53,557 --> 00:15:56,419
When I approached him about my codex woes,

290
00:15:56,419 --> 00:15:59,562
he came back to me with a script that parsed the data directly

291
00:15:59,562 --> 00:16:03,485
from the editor, giving me a list of every codex name,

292
00:16:03,485 --> 00:16:05,946
the exact location where the codex was placed,

293
00:16:05,946 --> 00:16:07,848
and what was required to unlock it.

294
00:16:08,684 --> 00:16:12,286
The first time he looked into how to create this script,

295
00:16:12,286 --> 00:16:15,147
it took him about four hours.

296
00:16:15,147 --> 00:16:18,409
After that, any script he had to write that was similar

297
00:16:18,409 --> 00:16:20,690
in terms of looking for a specific type of data

298
00:16:20,690 --> 00:16:21,831
and then dumping it into Excel,

299
00:16:21,831 --> 00:16:24,792
took him half an hour maybe.

300
00:16:24,792 --> 00:16:27,834
And then to rerun this specific script

301
00:16:27,834 --> 00:16:29,855
takes five minutes tops.

302
00:16:29,855 --> 00:16:32,617
So I could always have up-to-date information

303
00:16:32,617 --> 00:16:33,697
at the press of a button.

304
00:16:35,288 --> 00:16:37,629
Well, this was huge.

305
00:16:37,629 --> 00:16:42,751
I could pass this on to a tester and they could verify all of these were accessible

306
00:16:42,751 --> 00:16:44,872
in game because they knew exactly where to go and what to do.

307
00:16:44,872 --> 00:16:51,455
But this is only possible if you have people who not only are they technical, but they

308
00:16:51,455 --> 00:16:56,637
understand the project enough to know how to apply their knowledge to save you time.

309
00:16:57,985 --> 00:17:00,748
Even the analysts who do not know how to write scripts

310
00:17:00,748 --> 00:17:04,171
are positioned to identify opportunities for scripting

311
00:17:04,171 --> 00:17:06,973
because they have an in-depth level of expertise

312
00:17:06,973 --> 00:17:09,195
when it comes to their own specific discipline.

313
00:17:09,195 --> 00:17:13,219
All right, so let's say that you've decided

314
00:17:13,219 --> 00:17:16,462
to try adopting an embedded QA model.

315
00:17:16,462 --> 00:17:20,085
It's critical that given embedded QA relies

316
00:17:20,085 --> 00:17:22,087
on a partnership between development and QA,

317
00:17:22,087 --> 00:17:24,649
their buy-in is essential for making it work.

318
00:17:26,090 --> 00:17:29,652
There is no universal formula I can prescribe that's going to work for every studio, but

319
00:17:29,652 --> 00:17:35,676
I will instead provide some guidelines, and it is up to you to adapt them to your team

320
00:17:35,676 --> 00:17:36,156
and your project.

321
00:17:36,156 --> 00:17:40,780
First off, identify the need.

322
00:17:40,780 --> 00:17:43,461
If you are just starting off, start small.

323
00:17:43,461 --> 00:17:49,185
What are the one or two things that are key or large features within a game?

324
00:17:50,058 --> 00:17:54,580
Let's say your game has lots of characters that are constantly being iterated on, but

325
00:17:54,580 --> 00:17:58,382
those characters play in a handful of levels that are static.

326
00:17:58,382 --> 00:18:03,364
You'll probably want to focus on a gameplay analyst over a levels analyst first.

327
00:18:03,364 --> 00:18:06,766
Reach out to your production and team leads.

328
00:18:06,766 --> 00:18:12,608
Maybe there's a discipline that specifically feels they could benefit from dedicated QA.

329
00:18:12,608 --> 00:18:17,010
What services or feedback would these teams like to receive that they may not feel they're

330
00:18:17,010 --> 00:18:17,670
currently getting?

331
00:18:19,002 --> 00:18:23,285
Are some developers or teams just more QA friendly than others and view QA bugs more

332
00:18:23,285 --> 00:18:23,845
objectively?

333
00:18:23,845 --> 00:18:25,166
Great.

334
00:18:25,166 --> 00:18:25,766
Start with them.

335
00:18:25,766 --> 00:18:29,929
Find your champions in the development team and work with them.

336
00:18:29,929 --> 00:18:35,752
Second, well, now that you know what you're trying to address, it is time to stand up

337
00:18:35,752 --> 00:18:39,414
the framework for what exactly these embedded QA will be doing.

338
00:18:39,414 --> 00:18:43,176
Will they be building test levels and scripts?

339
00:18:43,176 --> 00:18:44,477
Will they attend sprint planning?

340
00:18:44,477 --> 00:18:47,919
How often will they sync up with their developers?

341
00:18:49,023 --> 00:18:51,745
What will their communication channels look like?

342
00:18:51,745 --> 00:18:54,767
What reports will they provide to their developers?

343
00:18:54,767 --> 00:18:58,469
What tools and training will the embedded QA need

344
00:18:58,469 --> 00:19:00,330
in order to do their job well,

345
00:19:00,330 --> 00:19:01,531
and who's going to provide it?

346
00:19:01,531 --> 00:19:07,415
Ultimately, what value will your specific developers gain

347
00:19:07,415 --> 00:19:09,316
by collaborating with QA directly?

348
00:19:09,316 --> 00:19:12,558
Run this framework past the discipline lead

349
00:19:12,558 --> 00:19:15,520
and production members, get their thoughts on it,

350
00:19:15,520 --> 00:19:17,982
iterate on that feedback, and then present it back to them.

351
00:19:21,160 --> 00:19:27,202
Third, as I mentioned before, this is not going to be an entry-level position, as QA often is.

352
00:19:27,202 --> 00:19:34,965
You want people with experience, either technical or show a solid ability to analyze games.

353
00:19:36,833 --> 00:19:41,635
Look, don't hire people who are just looking to get their foot in the door as a stepping

354
00:19:41,635 --> 00:19:43,456
stone to another department.

355
00:19:43,456 --> 00:19:48,319
If your HR is selling QA as a foot in the door, tell them to stop.

356
00:19:48,319 --> 00:19:51,180
This is not how we're doing things anymore.

357
00:19:51,180 --> 00:19:52,181
Be selfish.

358
00:19:52,181 --> 00:19:58,284
Look for people who actually want to work in QA and pursue a career in it.

359
00:19:58,284 --> 00:20:02,526
QA is not a parking lot for developers to be.

360
00:20:03,249 --> 00:20:07,392
Lots of our QA have moved on to other departments.

361
00:20:07,392 --> 00:20:09,854
But every single one of them were exceptional QA

362
00:20:09,854 --> 00:20:13,657
long before they moved on to work in other departments.

363
00:20:13,657 --> 00:20:16,539
They had a passion for QA just as much as they did

364
00:20:16,539 --> 00:20:19,942
for writing, for cinematic design, for art.

365
00:20:19,942 --> 00:20:23,244
Those people you definitely want on your team,

366
00:20:23,244 --> 00:20:25,686
but not the people who sit down in the interview

367
00:20:25,686 --> 00:20:28,068
and just say, you know what, I wanna be an audio engineer

368
00:20:28,068 --> 00:20:29,649
and this is my foot in the door.

369
00:20:29,649 --> 00:20:32,232
Sorry, go look for an audio apprenticeship.

370
00:20:35,248 --> 00:20:38,969
Avoid people who are going to tell anyone how to do their job.

371
00:20:38,969 --> 00:20:47,130
If these people can't provide feedback without telling that developer how to fix that issue,

372
00:20:47,130 --> 00:20:51,051
they're going to burn bridges, and they're going to burn them fast, and nothing is going

373
00:20:51,051 --> 00:20:52,411
to hurt your department more.

374
00:20:52,411 --> 00:20:56,452
Invest in the people that you hire.

375
00:20:56,452 --> 00:20:59,393
Give them training, continuous training.

376
00:20:59,393 --> 00:21:01,813
Training doesn't stop after your first week.

377
00:21:01,813 --> 00:21:02,753
And give them support.

378
00:21:03,638 --> 00:21:08,382
Set up a training plan for ramping testers and analysts alike that is standardized and

379
00:21:08,382 --> 00:21:09,363
thorough.

380
00:21:09,363 --> 00:21:12,806
This provides a baseline that you can rely on for your entire team.

381
00:21:12,806 --> 00:21:14,808
Iterate on that training.

382
00:21:14,808 --> 00:21:19,493
Keep developing it over time based on the feedback and changes that occur within the

383
00:21:19,493 --> 00:21:20,233
industry and your projects.

384
00:21:20,233 --> 00:21:24,758
You want people who are independent and self-motivated.

385
00:21:24,758 --> 00:21:27,880
People who ask questions and offer suggestions for improvements.

386
00:21:28,702 --> 00:21:32,544
These people will help your department grow and not just sit there and run the test scripts

387
00:21:32,544 --> 00:21:34,465
that they were assigned.

388
00:21:34,465 --> 00:21:37,947
You want people who will look at a test script and say, you know what?

389
00:21:37,947 --> 00:21:40,729
I think that humping every wall is just inefficient.

390
00:21:40,729 --> 00:21:41,510
We can script that.

391
00:21:41,510 --> 00:21:43,231
Those are the people you want.

392
00:21:43,231 --> 00:21:46,613
It's no secret.

393
00:21:46,613 --> 00:21:49,074
We work in a digital environment.

394
00:21:49,074 --> 00:21:51,996
And you want people who have some form of technical knowledge.

395
00:21:51,996 --> 00:21:54,138
Maybe they have a computer science degree.

396
00:21:54,875 --> 00:21:59,857
But maybe they just know how to reskin mods for Skyrim.

397
00:21:59,857 --> 00:22:00,797
That's fine.

398
00:22:00,797 --> 00:22:02,798
Those people are technical enough for us.

399
00:22:02,798 --> 00:22:04,459
We can teach you everything else.

400
00:22:04,459 --> 00:22:09,221
What you don't want is people who struggle to find out the specs of their computer.

401
00:22:09,221 --> 00:22:13,262
And what you really don't want is people who don't know how to Google how to do that.

402
00:22:15,249 --> 00:22:17,650
All of this criteria, and it is a lot,

403
00:22:17,650 --> 00:22:20,670
applies for what we look for when we hire our testers

404
00:22:20,670 --> 00:22:22,310
as well as our analysts.

405
00:22:22,310 --> 00:22:26,631
Testers are never just a bum in a seat for us.

406
00:22:26,631 --> 00:22:30,152
These are people we seek out, we interview a lot of people,

407
00:22:30,152 --> 00:22:34,793
and we choose them because they bring something special,

408
00:22:34,793 --> 00:22:36,013
even if they're only with us temporarily.

409
00:22:36,013 --> 00:22:39,654
Create long-term growth opportunities

410
00:22:39,654 --> 00:22:41,254
for your permanent staff.

411
00:22:41,254 --> 00:22:44,935
This is key for QA growing into a valid career choice.

412
00:22:45,940 --> 00:22:50,303
If people see that this can be a long-term solution for them,

413
00:22:50,303 --> 00:22:53,165
they are more likely to stay with you and remain invested.

414
00:22:53,165 --> 00:22:56,287
And last but not least, go slow.

415
00:22:56,287 --> 00:22:59,749
Learn from the challenges you face and iterate upon this.

416
00:22:59,749 --> 00:23:01,350
Not everything will go smoothly.

417
00:23:01,350 --> 00:23:02,151
That's fine.

418
00:23:02,151 --> 00:23:05,873
Reach out to other QA teams in your company.

419
00:23:05,873 --> 00:23:09,996
In other companies, attend roundtables and summits for QA.

420
00:23:09,996 --> 00:23:12,858
Share knowledge, challenges, and suggestions.

421
00:23:12,858 --> 00:23:14,799
We can be a community to help each other grow.

422
00:23:16,553 --> 00:23:19,934
But wait, what about the traditional model?

423
00:23:19,934 --> 00:23:22,236
Am I suggesting that we abandon it entirely?

424
00:23:22,236 --> 00:23:26,538
No, we still need black box testers and we still use them.

425
00:23:26,538 --> 00:23:30,560
We find they add the most value at the end of a project

426
00:23:30,560 --> 00:23:32,420
when everything is open for bugs.

427
00:23:32,420 --> 00:23:35,722
They provide valuable fresh eyes feedback.

428
00:23:35,722 --> 00:23:39,184
And they're not as susceptible to bug blindness,

429
00:23:39,184 --> 00:23:42,285
either due to repetition or due to knowing the intended design.

430
00:23:43,786 --> 00:23:46,166
They are ideal for regression passes on content

431
00:23:46,166 --> 00:23:49,207
that is no longer going through iterations or changing.

432
00:23:49,207 --> 00:23:52,428
Game testing becomes a numbers game

433
00:23:52,428 --> 00:23:53,268
near the end of development.

434
00:23:53,268 --> 00:23:57,009
During finaling, you want to test as much as possible

435
00:23:57,009 --> 00:23:58,349
before you ship.

436
00:23:58,349 --> 00:24:00,570
And this is where the number of black box testers

437
00:24:00,570 --> 00:24:03,070
that you can get really pays off.

438
00:24:03,070 --> 00:24:07,391
Black box testers are closer to an entry level position.

439
00:24:07,391 --> 00:24:10,072
And thus, when it becomes about covering as much content

440
00:24:10,072 --> 00:24:12,673
as possible, they are going to be a more cost

441
00:24:12,673 --> 00:24:13,633
effective solution.

442
00:24:14,795 --> 00:24:16,655
The analysts and specialized testers

443
00:24:16,655 --> 00:24:19,076
assist the black box testers,

444
00:24:19,076 --> 00:24:21,317
helping direct their testing and answer questions

445
00:24:21,317 --> 00:24:23,317
about the systems or the content.

446
00:24:23,317 --> 00:24:28,759
So in conclusion, QA needs to continue to grow

447
00:24:28,759 --> 00:24:30,839
and identify opportunities to be more than

448
00:24:30,839 --> 00:24:32,360
just the final link in the chain.

449
00:24:32,360 --> 00:24:36,941
This is how we become a respected long-term career choice.

450
00:24:36,941 --> 00:24:39,642
Developers need to start speaking up

451
00:24:39,642 --> 00:24:42,863
and asking when they want more than just basic support.

452
00:24:43,634 --> 00:24:46,535
We have much to gain by striving to work as a unified team.

453
00:24:46,535 --> 00:24:50,016
Developers, we are your support class,

454
00:24:50,016 --> 00:24:52,496
and we are here to provide buffs as needed.

455
00:24:52,496 --> 00:24:53,617
Thank you.

456
00:24:53,617 --> 00:25:04,159
Does anyone have any questions?

457
00:25:04,159 --> 00:25:05,880
We've got two mics over here.

458
00:25:07,560 --> 00:25:11,082
Hi, I'm a producer on a team that's trying to help out QA

459
00:25:11,082 --> 00:25:14,984
and we're in the process of potentially sort of transitioning

460
00:25:14,984 --> 00:25:17,186
to embedded QA, we're maybe 25% there.

461
00:25:17,186 --> 00:25:21,569
And one of the roadblocks that we've specifically hit

462
00:25:21,569 --> 00:25:24,971
is that our QA derives a lot of value

463
00:25:24,971 --> 00:25:26,031
from being able to sit together

464
00:25:26,031 --> 00:25:27,832
and use each other as a resource.

465
00:25:27,832 --> 00:25:29,734
And that's been one of the main roadblocks

466
00:25:29,734 --> 00:25:32,615
in being able to split them out into feature teams.

467
00:25:32,615 --> 00:25:35,337
Do you have any advice or insight on that?

468
00:25:35,618 --> 00:25:37,119
We have the exact same problem.

469
00:25:37,119 --> 00:25:38,480
Our teams are huge.

470
00:25:38,480 --> 00:25:44,362
So we found that using Slack or any sort of group chat

471
00:25:44,362 --> 00:25:45,702
helped a lot.

472
00:25:45,702 --> 00:25:47,703
A lot of it is also just culture building.

473
00:25:47,703 --> 00:25:51,364
So we do a lot of team building events with the QA to get them.

474
00:25:51,364 --> 00:25:56,106
They're still working together during those team building

475
00:25:56,106 --> 00:25:57,267
events, but during the rest of time,

476
00:25:57,267 --> 00:25:58,227
they're sitting with their developers.

477
00:25:58,227 --> 00:26:00,608
It's going to take time.

478
00:26:00,608 --> 00:26:01,868
Some people are really introverted,

479
00:26:01,868 --> 00:26:03,129
and you have to work with them more

480
00:26:03,129 --> 00:26:04,149
to get into that relationship.

481
00:26:04,637 --> 00:26:06,738
But yeah, the biggest thing that helped us,

482
00:26:06,738 --> 00:26:10,040
because we work with external embedded QA as well,

483
00:26:10,040 --> 00:26:13,141
have some kind of unified communication network.

484
00:26:13,141 --> 00:26:15,842
And for us, we've been using Slack and we love it,

485
00:26:15,842 --> 00:26:16,863
and it's helped us a lot.

486
00:26:16,863 --> 00:26:18,284
Does that answer your question?

487
00:26:18,284 --> 00:26:18,984
Yeah, thank you.

488
00:26:18,984 --> 00:26:19,384
Awesome.

489
00:26:22,073 --> 00:26:24,295
Hi, I'm Andrew Barron. I'm with Bohemia Interactive Simulations.

490
00:26:24,295 --> 00:26:27,638
Over the last year, we've done basically what you were describing,

491
00:26:27,638 --> 00:26:29,060
at least in our features group.

492
00:26:29,060 --> 00:26:31,462
We moved QA into the Scrum teams.

493
00:26:31,462 --> 00:26:34,945
So we do teams of six, Scrum teams.

494
00:26:34,945 --> 00:26:36,206
We have two QA in each team.

495
00:26:38,408 --> 00:26:40,849
I would say that for us it was a massive success,

496
00:26:40,849 --> 00:26:43,510
but there was definitely obstacles to doing that,

497
00:26:43,510 --> 00:26:46,611
a lot of internal resistance to moving them

498
00:26:46,611 --> 00:26:49,872
out of the sort of black box role and into that role.

499
00:26:49,872 --> 00:26:54,033
I was wondering what you found as the biggest obstacles

500
00:26:54,033 --> 00:26:56,614
in your rollout and how you overcame them.

501
00:26:56,614 --> 00:27:01,496
So full confession, we have done embedded QA

502
00:27:01,496 --> 00:27:04,937
for probably 15 years organically.

503
00:27:06,825 --> 00:27:10,066
So internally, it's just the way things are at BioWare.

504
00:27:10,066 --> 00:27:13,367
When we work with external teams to try and get them embedded,

505
00:27:13,367 --> 00:27:15,448
a lot of it is just the testers are

506
00:27:15,448 --> 00:27:16,868
hesitant to come up to developers

507
00:27:16,868 --> 00:27:17,829
and work with developers.

508
00:27:17,829 --> 00:27:19,809
That was our biggest roadblock, was that they

509
00:27:19,809 --> 00:27:23,011
felt inferior in a way.

510
00:27:23,011 --> 00:27:24,351
They would apologize that they had

511
00:27:24,351 --> 00:27:27,612
to go up to the developer, like apologize 10 or 11 times, which

512
00:27:27,612 --> 00:27:29,133
even for a Canadian is excessive.

513
00:27:31,513 --> 00:27:33,835
We had to work with those individuals and try and say,

514
00:27:33,835 --> 00:27:37,557
you know what, you are a peer, and build up that mentality.

515
00:27:37,557 --> 00:27:39,259
So that was our biggest challenge,

516
00:27:39,259 --> 00:27:42,321
is break that wall and create that feeling

517
00:27:42,321 --> 00:27:44,523
like, no, we are all equals,

518
00:27:44,523 --> 00:27:47,585
and there is no hierarchy, basically.

519
00:27:47,585 --> 00:27:50,007
I'd be really interested to know more specifics

520
00:27:50,007 --> 00:27:52,689
about what were some of the challenges that you faced,

521
00:27:52,689 --> 00:27:54,390
but we are running low on time,

522
00:27:54,390 --> 00:27:56,331
so I wanna catch up with you later,

523
00:27:56,331 --> 00:27:57,092
because I'm curious.

524
00:27:57,092 --> 00:27:58,153
Cool, thank you.

525
00:28:00,083 --> 00:28:01,124
Anyone else?

526
00:28:01,124 --> 00:28:01,604
Ha, wonderful.

527
00:28:01,604 --> 00:28:03,965
You've been mentioning at the beginning

528
00:28:03,965 --> 00:28:06,367
that you were providing all the source code

529
00:28:06,367 --> 00:28:08,728
and all the tools and the training for your QAs,

530
00:28:08,728 --> 00:28:10,689
but preventing them from doing any changes.

531
00:28:10,689 --> 00:28:14,130
I've been kind of doing the exact opposite.

532
00:28:14,130 --> 00:28:15,951
I mean, I provide them everything they want,

533
00:28:15,951 --> 00:28:17,832
but if they find a minor bug,

534
00:28:17,832 --> 00:28:19,793
they're in collaboration with the developers

535
00:28:19,793 --> 00:28:21,234
and say, hey, I can fix this.

536
00:28:21,234 --> 00:28:23,095
No need to raise a bug, just fix it.

537
00:28:23,764 --> 00:28:29,506
So I don't know, I don't know what, I have six people too, so it's probably easier to manage, but I'm wondering what your...

538
00:28:29,506 --> 00:28:34,108
We have had people do that in the past, and I mean, that's the general rule of thumb.

539
00:28:34,108 --> 00:28:40,710
The challenge with that is you're actually, okay, if I have my QA fix a bug,

540
00:28:40,710 --> 00:28:42,691
they're actually creating twice as much work.

541
00:28:42,691 --> 00:28:46,232
One, the time they're taking to fix that bug, they are not testing.

542
00:28:46,232 --> 00:28:49,093
Two, someone else now needs to verify their work.

543
00:28:51,390 --> 00:28:55,172
This is a discussion we've had going back and forth

544
00:28:55,172 --> 00:28:56,732
with the various teams.

545
00:28:56,732 --> 00:28:58,493
And I'll be honest with you, if it works for your team,

546
00:28:58,493 --> 00:28:59,413
awesome, go for it.

547
00:28:59,413 --> 00:29:00,914
We've done it in the past.

548
00:29:00,914 --> 00:29:03,795
But it's targeted and deliberate.

549
00:29:03,795 --> 00:29:07,236
I would not recommend if you're just starting it to do it.

550
00:29:07,236 --> 00:29:10,858
Because I mean, there's also that level of accountability.

551
00:29:10,858 --> 00:29:14,239
That's a lot of pressure to put on a QA department.

552
00:29:14,239 --> 00:29:14,979
And to be blunt.

553
00:29:17,239 --> 00:29:22,503
I've seen other companies use their QA as, in this case it was artists, they were basically

554
00:29:22,503 --> 00:29:27,527
using them as junior artists but paying them QA wages, which is unfair and honestly not

555
00:29:27,527 --> 00:29:28,387
the best use of resources.

556
00:29:28,387 --> 00:29:31,610
I don't think that's what you're doing, but I've seen another company do that and it was,

557
00:29:31,610 --> 00:29:34,112
you know, it ended up collapsing on them in the end.

558
00:29:34,112 --> 00:29:34,532
It's just not great.

559
00:29:34,532 --> 00:29:36,013
So again, do it, but do it deliberately.

560
00:29:36,013 --> 00:29:36,453
Anyone else?

561
00:29:36,453 --> 00:29:37,774
Well, you guys have been a wonderful audience.

562
00:29:37,774 --> 00:29:38,175
Thank you very much.

