1
00:00:05,194 --> 00:00:09,474
Welcome to the OpenXR panel. My name is Yuval, I'm CEO of Sensix.

2
00:00:09,775 --> 00:00:15,696
Sensix makes special purpose HMDs, you know, arcades, military, medical and so on.

3
00:00:16,296 --> 00:00:23,577
We also created the OSVR software platform, which was useful in OpenXR.

4
00:00:25,298 --> 00:00:28,798
And we have a great panel for you here today to discuss OpenXR, a...

5
00:00:30,962 --> 00:00:36,463
the path that we're taking on converging on a standard for AR and VR.

6
00:00:36,543 --> 00:00:40,424
So let me introduce our all-star panel for you.

7
00:00:41,384 --> 00:00:50,106
At center, from Colorado State University, at 6'5", we've got Joe, playing for Valve

8
00:00:50,126 --> 00:00:50,546
right now.

9
00:00:52,846 --> 00:00:55,307
Kay Mason plays for Google.

10
00:00:55,387 --> 00:00:57,327
Paul Padreana for Oculus.

11
00:00:58,176 --> 00:01:03,458
And Nick, I think it's okay that I put you as power forward for Epic Games.

12
00:01:05,359 --> 00:01:11,221
The reason we're excited about this panel is that first, all five of us are very active

13
00:01:11,361 --> 00:01:16,222
in the day-to-day formation of the standards, whether it's the weekly conference calls or

14
00:01:16,243 --> 00:01:17,663
the face-to-faces and so on.

15
00:01:18,683 --> 00:01:21,144
Nick and Kay also have formal roles.

16
00:01:21,684 --> 00:01:27,386
Nick is the chair of the OpenXR working group and Kay is the spec editor.

17
00:01:28,446 --> 00:01:32,908
which does all the grunt work in merging the standards as it goes together.

18
00:01:35,190 --> 00:01:40,112
I would like to start by just explaining what is the standard, what are we trying to achieve,

19
00:01:40,152 --> 00:01:47,517
what is the problem that we're trying to solve, and then open it up fairly quickly for questions from the audience.

20
00:01:47,557 --> 00:01:51,359
Don't worry if you don't have questions, I have plenty of questions for my colleagues here.

21
00:01:58,020 --> 00:02:04,904
I like to say that great works of art, I don't know if OpenXR will be a great work of art,

22
00:02:04,944 --> 00:02:07,886
but great works of art start from misery.

23
00:02:08,166 --> 00:02:14,650
If you think about Mozart or Van Gogh or Tolstoy, they had difficult lives

24
00:02:14,690 --> 00:02:17,912
and then they sort of poured their misery into their work.

25
00:02:18,372 --> 00:02:22,455
So OpenXR was born out of some misery.

26
00:02:23,416 --> 00:02:24,716
The misery is that...

27
00:02:25,985 --> 00:02:32,929
If you don't have a standard for VR and AR, then every time a game developer wants to

28
00:02:32,969 --> 00:02:38,291
support multiple platforms, they have to learn multiple APIs and then keep chasing these

29
00:02:38,351 --> 00:02:40,312
APIs as they evolve.

30
00:02:41,052 --> 00:02:45,575
If there is no standard, then a hardware vendor, if you make eye tracking or

31
00:02:46,260 --> 00:02:51,185
or an HMD that's not mainstream or some other peripheral,

32
00:02:51,205 --> 00:02:54,629
then you basically have to sort of beg the engine companies

33
00:02:54,709 --> 00:02:57,793
or the content providers to support your hardware.

34
00:02:58,293 --> 00:03:01,557
And the biggest misery of all is the end users,

35
00:03:02,518 --> 00:03:03,780
who are not really sure.

36
00:03:04,649 --> 00:03:08,790
If they should commit to a particular piece of hardware, a particular solution, because

37
00:03:08,810 --> 00:03:11,151
they don't know how long it's going to last.

38
00:03:11,271 --> 00:03:17,252
Now, standards seem to be sort of boring, but think what would have happened if there

39
00:03:17,372 --> 00:03:20,713
was no standard for gasoline on cars.

40
00:03:20,753 --> 00:03:26,014
You know, if there were Ford gas stations and Chevy gas stations and BMW gas stations

41
00:03:26,034 --> 00:03:30,255
and you'd have to drive miles and miles just to find the right gas station for you, that

42
00:03:30,555 --> 00:03:31,256
would be a problem.

43
00:03:33,185 --> 00:03:40,272
So the fundamental issue that we're trying to solve is to say, well, without a standard,

44
00:03:40,793 --> 00:03:47,880
we're wasting all this time that could be spent on creativity, on reaching new heights

45
00:03:47,980 --> 00:03:54,286
in VR, and just, you know, grunt work of making sure that my game works with his device, and

46
00:03:54,767 --> 00:03:55,488
so on and so on.

47
00:03:57,325 --> 00:04:02,812
And the situation today is you've got most games work through engines, then they work

48
00:04:02,852 --> 00:04:08,219
through various run times, whether it's Steam or Oculus or SVR or Daydream and so on, and

49
00:04:08,239 --> 00:04:12,605
then some of these run times support multiple devices, some of these run times support just

50
00:04:12,645 --> 00:04:14,807
a few devices, and there's just this mess.

51
00:04:15,832 --> 00:04:21,595
So what we're trying to do in the OpenXR working group, which is part of the Kronos organization,

52
00:04:21,635 --> 00:04:27,879
Kronos is the organization that brought you OpenGL and now Vulkan and others, is to standardize

53
00:04:27,959 --> 00:04:28,719
on two layers.

54
00:04:28,919 --> 00:04:35,423
One is an application interface, which says, okay, this is how applications talk with VR

55
00:04:35,663 --> 00:04:36,303
runtimes.

56
00:04:36,803 --> 00:04:41,886
And then a device interface, which basically says, this is how the runtimes talk with

57
00:04:41,906 --> 00:04:42,566
the devices.

58
00:04:43,652 --> 00:04:51,320
And if this works out the way we intend it to work, then when you write a game or another

59
00:04:51,380 --> 00:04:57,766
VR or AR experience, you'll be able to run it across multiple devices very easily.

60
00:04:57,827 --> 00:05:02,551
And then on the flip side, if you have a new piece of hardware, a peripheral, an HMD, or

61
00:05:02,612 --> 00:05:03,913
something like that, then you could...

62
00:05:04,574 --> 00:05:08,820
basically connected to existing run times and run existing applications.

63
00:05:08,920 --> 00:05:12,825
And we believe that this will also help drive user adoption because they're not going to

64
00:05:12,905 --> 00:05:17,251
fear of, well, if I buy this device, will the content really work on it?

65
00:05:18,553 --> 00:05:18,973
next year.

66
00:05:20,754 --> 00:05:21,695
So in terms of

67
00:05:23,776 --> 00:05:25,918
sort of an architecture,

68
00:05:26,258 --> 00:05:28,319
you know, marketing architecture,

69
00:05:29,320 --> 00:05:32,302
you basically have two open interfaces. One is the

70
00:05:33,102 --> 00:05:37,105
application interface and the other is the device interface. And in the middle

71
00:05:37,205 --> 00:05:37,625
there's a

72
00:05:38,145 --> 00:05:41,448
vendor-specific runtime. So, and we'll ask the panel a little bit later,

73
00:05:41,888 --> 00:05:46,491
you could envision an Oculus runtime that implements OpenXR or a Valve runtime or

74
00:05:47,138 --> 00:05:48,879
or Google Runtime and so on.

75
00:05:50,199 --> 00:05:55,340
And basically, the devices would connect to the runtime through a well-defined interface

76
00:05:55,400 --> 00:05:59,761
and they would pass, you know, row poses, controller and peripheral state, the runtime

77
00:05:59,781 --> 00:06:04,702
would do whatever they want with it and then pass it on in a normalized way to the application.

78
00:06:04,762 --> 00:06:08,883
The application would then figure out what to do with it, what's the action that the

79
00:06:08,963 --> 00:06:12,604
user is taking and what to draw, pass it back to the runtime.

80
00:06:13,670 --> 00:06:18,254
And then eventually it would get to either the display or the supported devices.

81
00:06:19,795 --> 00:06:21,376
So that's sort of the dream.

82
00:06:21,396 --> 00:06:28,741
The it turns out that the pain that we the suffering that we spoke about was felt by

83
00:06:28,761 --> 00:06:29,602
a lot of companies.

84
00:06:29,682 --> 00:06:34,465
And so here are some of the companies that have sort of publicly committed to the standard

85
00:06:34,505 --> 00:06:36,667
that have agreed to put their logo.

86
00:06:37,802 --> 00:06:39,022
in support of the standard.

87
00:06:39,082 --> 00:06:42,024
So you see, of course, all the panelists here,

88
00:06:42,104 --> 00:06:45,366
Oculus and Valve and Google and Epic and Sensex,

89
00:06:46,407 --> 00:06:50,709
and also, you know, Tobii and Sony and Intel and LG

90
00:06:50,849 --> 00:06:51,810
and so on and so on.

91
00:06:51,910 --> 00:06:57,353
So plenty of companies are working on the standard,

92
00:06:57,413 --> 00:06:58,634
are supporting the standard.

93
00:06:58,674 --> 00:07:02,676
And of course, we invite all of you individually

94
00:07:02,716 --> 00:07:04,897
and collectively to join us in making sure

95
00:07:04,937 --> 00:07:06,298
that the standard is a good one.

96
00:07:07,119 --> 00:07:08,200
and that we do it quickly.

97
00:07:10,261 --> 00:07:13,264
So, I think there's sort of...

98
00:07:13,524 --> 00:07:15,565
I'd like to start off with some initial questions.

99
00:07:17,047 --> 00:07:19,509
You know, what, when, you know, when will it be ready,

100
00:07:19,609 --> 00:07:20,910
what's in it, what's not in it.

101
00:07:21,778 --> 00:07:29,604
But one challenge that we have with the standard is because the inner workings of the standard

102
00:07:29,644 --> 00:07:33,587
are not public yet, there are some things that we can say and some things that we cannot

103
00:07:33,647 --> 00:07:33,867
say.

104
00:07:34,427 --> 00:07:37,810
So let me ask Nick, the workgroup chair, the first question.

105
00:07:38,650 --> 00:07:41,553
He promised to be my shield during this conversation.

106
00:07:42,053 --> 00:07:43,914
So what is it that I should not ask?

107
00:07:43,994 --> 00:07:45,976
What is it that we're not going to be able to talk about today?

108
00:07:46,638 --> 00:07:51,440
So basically we can talk about our individual companies or individual opinions on these

109
00:07:51,500 --> 00:07:55,362
matters but as far as declaring something is or is not in the standard above and beyond

110
00:07:55,422 --> 00:07:59,884
what was already shown on the slide, we can't legally talk about yet.

111
00:08:00,664 --> 00:08:05,386
We're excited to share it all but there are some IP licensing implications and whatnot

112
00:08:05,406 --> 00:08:06,707
that require us to be transparent.

113
00:08:07,167 --> 00:08:09,769
So, we're pretty cagey about the exact specifics of the standard.

114
00:08:09,849 --> 00:08:16,493
But, I think we have a diverse enough panel up here that we can safely say what each of our companies cares about.

115
00:08:16,513 --> 00:08:20,996
And, that I think will be a good indication of the kinds of problems that we're thinking about with the standard itself.

116
00:08:21,276 --> 00:08:22,997
So, you're saying the standard doesn't have head tracking?

117
00:08:23,337 --> 00:08:25,819
No head tracking at all. It's not an important thing.

118
00:08:26,099 --> 00:08:30,261
No head tracking, no display interface, just a generic middleware.

119
00:08:30,742 --> 00:08:32,743
Connect your ERP to something else.

120
00:08:33,137 --> 00:08:35,257
It's just an API to implement for fun, basically.

121
00:08:36,857 --> 00:08:37,118
Very good.

122
00:08:37,438 --> 00:08:41,879
Thank you all.

123
00:08:42,059 --> 00:08:44,339
OK, so for the record, Nick cannot confirm that head

124
00:08:44,379 --> 00:08:45,720
tracking is going to be in the standard.

125
00:08:45,860 --> 00:08:47,780
But very good.

126
00:08:48,220 --> 00:08:51,781
So the other thing that I wanted to ask, and maybe Joe,

127
00:08:51,801 --> 00:08:52,701
you can take this one.

128
00:08:53,741 --> 00:08:56,402
When you look at the logos of the companies, two companies

129
00:08:56,442 --> 00:08:59,403
that don't show up there, at least in the logo slide, are

130
00:08:59,503 --> 00:09:01,343
Microsoft and Apple, which is why I'm using a

131
00:09:01,363 --> 00:09:01,983
Chromebook today.

132
00:09:03,921 --> 00:09:06,182
Will they be or are they part of the standard?

133
00:09:06,202 --> 00:09:10,725
And what do we think about their products and the standard?

134
00:09:12,326 --> 00:09:17,029
So Microsoft and Apple are two examples of companies whose logos are on that slide.

135
00:09:17,109 --> 00:09:19,631
There are other companies whose logos are on that slide, too.

136
00:09:20,772 --> 00:09:24,834
And whether or not you're on the slide doesn't necessarily say anything one way or the other about whether or not you're involved

137
00:09:25,295 --> 00:09:30,558
because there are companies that are involved that haven't chosen to publicly announce their involvement.

138
00:09:32,357 --> 00:09:37,578
as we're building the spec is under NDA.

139
00:09:38,318 --> 00:09:40,438
They don't have to announce that they're involved

140
00:09:40,738 --> 00:09:41,698
and that's just fine.

141
00:09:41,718 --> 00:09:42,919
They can contribute to the standard,

142
00:09:43,539 --> 00:09:44,859
contribute to the IP pool,

143
00:09:44,939 --> 00:09:46,299
and be part of this process

144
00:09:46,339 --> 00:09:49,380
without having it be a marketing thing.

145
00:09:51,060 --> 00:09:53,641
What I will say is that everybody's welcome to join us.

146
00:09:53,741 --> 00:09:56,381
So if any of you in this room want to come participate

147
00:09:56,461 --> 00:09:57,921
in the standardization process,

148
00:09:58,602 --> 00:10:00,422
you can individually join Khronos,

149
00:10:00,442 --> 00:10:02,042
your company can join Khronos, and you can...

150
00:10:02,638 --> 00:10:08,045
I'm going to go ahead and do what we did all week, which is we had two full day meetings in Chicago on Monday and Tuesday.

151
00:10:08,466 --> 00:10:13,513
So you can come and join us at those, join us on the once a week calls and start working on the spec.

152
00:10:13,573 --> 00:10:17,378
So if you want to work on this, you're welcome to. And encouraged to.

153
00:10:17,902 --> 00:10:20,125
So join OpenXR and see the world, right?

154
00:10:20,165 --> 00:10:23,469
Because we were in Vancouver and in Seattle and in Chicago,

155
00:10:23,489 --> 00:10:26,573
and next time we're in Taipei and so on and so on.

156
00:10:26,613 --> 00:10:27,534
You skipped Amsterdam.

157
00:10:27,614 --> 00:10:29,096
Amsterdam was really nice.

158
00:10:29,136 --> 00:10:29,776
Yeah, you're right.

159
00:10:31,238 --> 00:10:34,862
So Kay, you're doing a phenomenal job in merging all

160
00:10:34,902 --> 00:10:37,185
the requests to the standard, but could you tell us when the

161
00:10:37,205 --> 00:10:38,226
standard will be ready?

162
00:10:39,505 --> 00:10:43,407
So again, this is a thing that we can't exactly say when it will be ready.

163
00:10:43,467 --> 00:10:46,468
We can say that we released our statement of work in January of last year,

164
00:10:47,009 --> 00:10:51,771
and we can say that previous standards have taken between 12 and 18 months from that point to be done.

165
00:10:52,491 --> 00:10:54,972
So 12 to 18 months from January.

166
00:10:55,012 --> 00:10:55,492
That's right.

167
00:10:56,033 --> 00:10:56,273
Okay.

168
00:10:56,853 --> 00:11:02,435
So let's assume a standard is ready, and it's ratified, and it's now made public.

169
00:11:02,515 --> 00:11:05,117
So let's sort of go around the table, and maybe I'll start with Paul.

170
00:11:06,995 --> 00:11:10,157
Will your company support OpenXR standard?

171
00:11:10,197 --> 00:11:16,721
Will Oculus support the OpenXR standard or are you just in it to sort of figure out?

172
00:11:16,741 --> 00:11:17,882
For the travel to Chicago.

173
00:11:17,902 --> 00:11:18,542
For the travel.

174
00:11:19,243 --> 00:11:21,384
I'm just in it for the Taipei trip next year.

175
00:11:23,245 --> 00:11:27,628
Oculus intends to fully support the standard to the extent possible.

176
00:11:29,326 --> 00:11:35,192
And any extensions that exist that are reasonable and rational will also support.

177
00:11:35,633 --> 00:11:40,138
Oculus, as you know, has both a mobile and a PC division.

178
00:11:41,199 --> 00:11:44,463
And we intend to support it to the extent possible on both sides of that.

179
00:11:45,785 --> 00:11:48,848
Okay. And Nick, will Epic support the standard?

180
00:11:49,480 --> 00:11:54,603
Yeah, absolutely. We were quite keen on it because one of the biggest things that people

181
00:11:54,663 --> 00:11:58,645
ask, as you kind of alluded to in the beginning, is people have either a new device or a new

182
00:11:58,666 --> 00:12:02,828
device that's looking for content. And the process of bootstrapping a plugin in the engine

183
00:12:02,908 --> 00:12:07,471
right now, between the engineering development and the QA time and kind of the maintenance

184
00:12:07,511 --> 00:12:12,194
of that, especially while APIs tend to be pretty flexible and malleable at this time

185
00:12:12,214 --> 00:12:16,537
and changing, it was kind of a giant pain in our ass. So that's why we really wanted

186
00:12:16,557 --> 00:12:16,857
to, uh,

187
00:12:17,397 --> 00:12:24,321
So, basically, I'm starting to write a OpenXR UE4 plugin as we speak and trying to keep

188
00:12:24,381 --> 00:12:25,502
up with the header.

189
00:12:26,222 --> 00:12:27,623
Are we allowed to say ask, by the way?

190
00:12:27,643 --> 00:12:27,723
What?

191
00:12:27,743 --> 00:12:27,883
Oh, yeah.

192
00:12:28,223 --> 00:12:28,644
That one's fine.

193
00:12:28,664 --> 00:12:28,984
That one's fine.

194
00:12:29,004 --> 00:12:29,124
Okay.

195
00:12:29,144 --> 00:12:30,665
So, K, will Google support OpenXR standard?

196
00:12:30,685 --> 00:12:30,945
I don't know.

197
00:12:30,965 --> 00:12:31,265
I don't know.

198
00:12:31,285 --> 00:12:31,585
I don't know.

199
00:12:31,605 --> 00:12:31,865
I don't know.

200
00:12:31,885 --> 00:12:32,146
I don't know.

201
00:12:32,166 --> 00:12:32,886
I don't know.

202
00:12:32,906 --> 00:12:33,326
I don't know.

203
00:12:33,346 --> 00:12:33,606
I don't know.

204
00:12:33,626 --> 00:12:33,886
I don't know.

205
00:12:33,907 --> 00:12:34,187
I don't know.

206
00:12:34,207 --> 00:12:34,447
I don't know.

207
00:12:34,467 --> 00:12:35,247
I don't know.

208
00:12:35,267 --> 00:12:35,688
I don't know.

209
00:12:35,708 --> 00:12:36,068
I don't know.

210
00:12:36,710 --> 00:12:39,672
So we haven't made a public statement about that, and I am a programmer.

211
00:12:40,352 --> 00:12:44,595
But what I can say, and point to, is the fact that Google is extremely committed to open standards.

212
00:12:44,655 --> 00:12:46,596
We have Chrome, we have Android, we have...

213
00:12:47,536 --> 00:12:50,658
We've already open sourced some of our audio stuff for VR, too.

214
00:12:50,758 --> 00:12:55,321
So we think a standard makes sense. It completely makes sense to have a VR standard.

215
00:12:55,661 --> 00:12:57,503
And we'll be making decisions going forward.

216
00:12:57,523 --> 00:13:02,626
And you're also the API lead for Daydream, so I think you're much more than a programmer.

217
00:13:03,023 --> 00:13:08,567
That's true, that's true. But I don't think there are people above my pay grade who get to make those decisions.

218
00:13:08,627 --> 00:13:14,931
So the other guy on the panel that his job title says programmer is Joe, so will Valve support OpenXR?

219
00:13:15,631 --> 00:13:21,395
Well, in my case there are no people above my pay grade. We don't really have those things.

220
00:13:24,144 --> 00:13:28,207
But I intend to write code that causes OpenXR to be supported in SteamVR.

221
00:13:28,247 --> 00:13:28,447
So...

222
00:13:29,748 --> 00:13:30,008
Okay.

223
00:13:30,509 --> 00:13:31,349
So that's good.

224
00:13:31,389 --> 00:13:34,872
And just for the record, Sensex will also support OpenXR.

225
00:13:34,932 --> 00:13:37,173
But let's sort of go back the other way.

226
00:13:37,253 --> 00:13:44,098
So let's assume that I'm a developer right now and I'm using OpenVR, you know, the Valve API for VR.

227
00:13:44,519 --> 00:13:45,880
And now there's OpenXR.

228
00:13:46,060 --> 00:13:48,261
So will I have to redo my applications?

229
00:13:48,742 --> 00:13:52,305
Will the OpenVR calls be deprecated? Will they coexist?

230
00:13:52,565 --> 00:13:55,207
How do you see that happening going forward?

231
00:13:56,549 --> 00:14:04,336
Well, I imagine Paul has an answer of his own, but in my mind, we kind of see OpenXR as sort of the next generation of OpenVR.

232
00:14:04,816 --> 00:14:11,622
We always kind of expected OpenVR to morph under an open standard in some way, and it turns out this is the way that that's happening.

233
00:14:12,181 --> 00:14:16,664
So I don't know exactly when that will happen or exactly what the transition will look like.

234
00:14:17,124 --> 00:14:19,346
Probably both will be supported for a period of time.

235
00:14:19,886 --> 00:14:23,088
But eventually we think everything will be OpenXR based on our site.

236
00:14:24,149 --> 00:14:25,589
Paul, do you want to answer that as well?

237
00:14:25,930 --> 00:14:28,331
The answer for Oculus is practically identical.

238
00:14:30,092 --> 00:14:36,236
Our long-term goal is to dump both our mobile and our PC APIs and use OpenXR exclusively.

239
00:14:36,256 --> 00:14:39,318
There will, of course, be a transition period.

240
00:14:40,579 --> 00:14:43,619
which will be some undetermined amount of time.

241
00:14:43,639 --> 00:14:47,180
It has to do with backwards compatibility with applications that are in development

242
00:14:47,200 --> 00:14:49,600
or applications that still need the old API.

243
00:14:50,240 --> 00:14:56,862
But while applications written to the older API will need to continue to run indefinitely,

244
00:14:57,242 --> 00:15:00,162
the publishing of an SDK for new applications to start development on

245
00:15:00,202 --> 00:15:04,963
will eventually switch to an OpenXR-only API.

246
00:15:06,044 --> 00:15:06,664
That's a good point.

247
00:15:08,921 --> 00:15:13,326
I'm not going to stop working.

248
00:15:14,267 --> 00:15:18,492
That backward compatibility is important and it will be maintained indefinitely.

249
00:15:18,962 --> 00:15:25,085
And Nick, will OpenXR be essentially just another target that you could publish to from Epic?

250
00:15:25,325 --> 00:15:30,688
Yeah, we kind of go through great pains to abstract the platform differences as much as possible between the vendors right now.

251
00:15:30,788 --> 00:15:37,211
So our hope is that we can start bootstrapping this OpenXR plugin and then people can just use that and then as Steam and Valve.

252
00:15:37,451 --> 00:15:39,572
Or Valve and Oculus, sorry.

253
00:15:40,313 --> 00:15:41,113
Steam and Valve.

254
00:15:41,153 --> 00:15:41,914
Steam and Valve.

255
00:15:44,535 --> 00:15:45,015
The Steam Valve.

256
00:15:46,943 --> 00:15:51,284
Get up and running that transition should be abstracted behind all the frameworks and stuff in the engine anyway

257
00:15:51,344 --> 00:15:52,705
So we hope on the application side

258
00:15:52,765 --> 00:15:58,987
It's basically people just wake up one day and have access to a lot more platforms and in unity is also on the working group

259
00:15:59,067 --> 00:16:01,488
Right. I know they're they're not on a panel today

260
00:16:03,148 --> 00:16:05,509
The other

261
00:16:05,629 --> 00:16:10,631
Do you know what their plans are I I cannot speak for competing engine companies

262
00:16:10,711 --> 00:16:14,412
But I should hope that since they have contributed to the media very good of similar mindset

263
00:16:15,151 --> 00:16:20,754
And yes, I mean, OSVR API will also evolve to support OpenXR.

264
00:16:23,215 --> 00:16:26,097
Kay, I wanted to ask you about mobile. It was brought up.

265
00:16:26,157 --> 00:16:29,319
And by the way, feel free to answer the previous question as well.

266
00:16:31,754 --> 00:16:37,179
Is it really possible to create a standard that works both on desktop and mobile?

267
00:16:37,239 --> 00:16:41,664
After all, there are all these pretty substantial differences between what the device can do

268
00:16:41,764 --> 00:16:43,065
and what's important for the device.

269
00:16:43,525 --> 00:16:45,167
How do you see that happening?

270
00:16:45,957 --> 00:16:50,620
So just on the previous question, let me say that we also, as well as Daydream, our team

271
00:16:50,660 --> 00:16:55,244
supports EarthVR and we also have Tilt Brush and several other products that run on Steam

272
00:16:55,284 --> 00:16:57,046
and on Oculus Rift.

273
00:16:57,426 --> 00:17:02,350
So if these guys are supporting OpenXR, I'm going to be writing support for OpenXR.

274
00:17:03,051 --> 00:17:04,392
It's just so we can keep that going.

275
00:17:04,932 --> 00:17:07,394
So in terms of that, I'm sure that's probably going to happen.

276
00:17:07,574 --> 00:17:09,616
So in terms of mobile, yeah, there are definitely

277
00:17:09,656 --> 00:17:10,517
challenges on mobile.

278
00:17:10,857 --> 00:17:12,838
Android has a very different permissions model

279
00:17:13,799 --> 00:17:15,200
than desktop does.

280
00:17:15,260 --> 00:17:17,882
For example, I cannot, on Android,

281
00:17:18,003 --> 00:17:19,484
load a third-party DLL.

282
00:17:19,564 --> 00:17:20,625
That's just not a thing.

283
00:17:20,725 --> 00:17:22,926
I cannot go into system and load a third-party DLL,

284
00:17:22,967 --> 00:17:24,468
because that would be completely insecure.

285
00:17:24,908 --> 00:17:26,510
And it would break Android's security model.

286
00:17:27,030 --> 00:17:31,014
Also, there's some differences between our process

287
00:17:31,154 --> 00:17:34,678
and our implementation and Gear VR's implementation.

288
00:17:34,698 --> 00:17:37,361
So we do all of our stuff cross-process on Daydream.

289
00:17:37,661 --> 00:17:39,963
So our compositor runs in a completely different process.

290
00:17:40,304 --> 00:17:42,045
And that means some things have to be different.

291
00:17:42,065 --> 00:17:44,448
So we have to pass images across process boundaries.

292
00:17:44,768 --> 00:17:46,989
And we have to pass all of this data.

293
00:17:47,089 --> 00:17:48,810
And that can be challenging.

294
00:17:48,850 --> 00:17:50,491
And it can be challenging on a mobile platform.

295
00:17:50,811 --> 00:17:54,533
I mean, instead of dealing with how many watts of GPU, we

296
00:17:54,573 --> 00:17:56,654
have ones of watts of GPU power.

297
00:17:57,054 --> 00:17:59,095
So that's challenging, too.

298
00:17:59,115 --> 00:18:01,516
And it's really cool what we've made happen.

299
00:18:01,636 --> 00:18:05,218
And the hardware companies that we work with are amazing.

300
00:18:05,258 --> 00:18:06,498
And they do amazing things.

301
00:18:06,538 --> 00:18:07,659
But there are different challenges.

302
00:18:08,499 --> 00:18:12,662
Sometimes I feel like half of my job is trying to, half of graphics programming is really

303
00:18:12,702 --> 00:18:14,763
moving data from one place to another place.

304
00:18:15,924 --> 00:18:18,706
So a lot of the challenges that we face are in terms of that.

305
00:18:18,806 --> 00:18:22,368
And they're just different on mobile, fundamentally different than they are on PC.

306
00:18:22,868 --> 00:18:27,551
And now I realize that because all of you are writing code, then the more panels we

307
00:18:27,591 --> 00:18:29,993
have the slower the standard is going to evolve.

308
00:18:30,413 --> 00:18:31,133
That's true.

309
00:18:31,874 --> 00:18:33,335
So maybe we cut it short, right?

310
00:18:33,355 --> 00:18:35,576
Thanks for coming.

311
00:18:37,956 --> 00:18:43,022
To the extent you can tell us, what happens in the workgroup in a situation like mobile,

312
00:18:43,062 --> 00:18:46,987
where there may be a set of different requirements or a subset of people who are particularly

313
00:18:47,027 --> 00:18:53,956
interested in a particular topic, whether it's mobile or eye tracking or ear tracking or something else?

314
00:18:54,423 --> 00:18:58,349
Yes, so there's kind of a couple different paths depending on how much interest there is.

315
00:18:58,389 --> 00:19:03,838
For mobile, I mean, that's a large portion of the market share right now, so we have representatives from Google,

316
00:19:03,858 --> 00:19:08,546
we have representatives from a couple of the other mobile guys, Samsung and Qualcomm, in there.

317
00:19:09,767 --> 00:19:14,630
And really what we try to do is make sure that the core standard doesn't preclude either

318
00:19:14,670 --> 00:19:16,130
desktop or mobile concerns.

319
00:19:16,250 --> 00:19:22,834
And there's been a lot of very vocal support for various issues on mobile to make sure

320
00:19:22,854 --> 00:19:26,155
that those are covered and we haven't precluded them from doing what they need to do to meet

321
00:19:26,175 --> 00:19:28,616
the memory model or performance characteristics.

322
00:19:29,097 --> 00:19:33,142
When there are kind of more esoteric concerns that maybe aren't as broadly applicable,

323
00:19:33,663 --> 00:19:37,668
Khronos has what are called extensions and there's various degrees of extensions.

324
00:19:37,748 --> 00:19:42,515
So if you're familiar with Vulkan, there's KHR extensions which we kind of consider to be ones

325
00:19:42,555 --> 00:19:45,659
that are potentially very broadly adopted but maybe not applicable to everybody.

326
00:19:46,920 --> 00:19:51,402
There's ext extensions which we expect a couple people to implement but we still want to kind

327
00:19:51,422 --> 00:19:55,985
of standardize because we believe that there's some value in standardizing those and those

328
00:19:56,025 --> 00:19:59,867
eventually can be promoted up to KHR extensions if they become more widespread.

329
00:20:00,468 --> 00:20:04,790
And then there's vendor specific extensions so if a particular GPU vendor or a particular

330
00:20:04,890 --> 00:20:08,773
phone vendor wants to do something that's very specific to their platform, they can

331
00:20:08,833 --> 00:20:10,834
do that and still work within the same ecosystem.

332
00:20:11,674 --> 00:20:16,838
Between forming technical subgroups for mobile concerns or using extensions where applicable,

333
00:20:17,279 --> 00:20:19,200
we tried to make sure that everybody supported.

334
00:20:19,861 --> 00:20:24,184
So with all the Google activity this week, I wasn't sure if Kay and Joe are going to

335
00:20:24,204 --> 00:20:26,166
be representing the same company pretty much.

336
00:20:27,987 --> 00:20:28,708
I guess not.

337
00:20:28,888 --> 00:20:33,631
But Paul, you guys have both a mobile product and a desktop product, and you have also a

338
00:20:33,671 --> 00:20:35,173
representative from the mobile side.

339
00:20:35,213 --> 00:20:40,157
How do you see the sort of differences between mobile and desktop as it relates to OpenXR?

340
00:20:43,663 --> 00:20:49,767
At Oculus, as I was saying before, we have a Gear VR group and we have our PC group.

341
00:20:50,328 --> 00:20:55,211
And for the last few years, we've worked together to talk about our shared interests.

342
00:20:55,251 --> 00:20:58,814
And so before even getting here, we had a lot of ideas about how...

343
00:20:59,422 --> 00:21:02,644
an API needed to work to support both mobile and PC.

344
00:21:03,284 --> 00:21:09,308
And a lot of that stuff has continued into the evolution

345
00:21:09,328 --> 00:21:11,289
of this, of the OpenXR API.

346
00:21:12,370 --> 00:21:20,274
And our mobile guy, Cass Everett, he was there in

347
00:21:20,294 --> 00:21:21,215
Chicago last week.

348
00:21:21,695 --> 00:21:23,116
Or actually, it was earlier this week,

349
00:21:24,656 --> 00:21:25,377
sitting right with us.

350
00:21:29,581 --> 00:21:33,087
We think that it's entirely possible to support both at the same time.

351
00:21:33,127 --> 00:21:34,409
We felt that a couple years ago.

352
00:21:34,429 --> 00:21:38,116
I think that the way that the API is evolving.

353
00:21:38,700 --> 00:21:40,420
is looking good to solve that.

354
00:21:41,121 --> 00:21:46,263
We need to make sure that the mobile side has as much influence as the PC side.

355
00:21:47,043 --> 00:21:49,864
Sometimes in our meetings, there's a little bit of a...

356
00:21:51,225 --> 00:21:54,546
You know, some of the talk sometimes focuses on PC-centric stuff

357
00:21:54,927 --> 00:22:00,729
when mobile and stand-alone devices are a major part of the future of VR,

358
00:22:00,749 --> 00:22:01,829
especially in coming years.

359
00:22:02,790 --> 00:22:03,850
I think we're getting there.

360
00:22:05,937 --> 00:22:10,682
But, you know, Kay can speak a little bit for the mobile side with respect to that.

361
00:22:11,083 --> 00:22:19,131
I can speak for our mobile side to some degree, but I would say this is looking like it's going to work out fairly well.

362
00:22:20,220 --> 00:22:25,383
Okay. I'm going to ask one more question and then open it up for the audience.

363
00:22:26,444 --> 00:22:28,966
I have two notes here from the conference organizers.

364
00:22:29,106 --> 00:22:33,609
One is that they would prefer that people who have questions come up to the microphone

365
00:22:33,669 --> 00:22:36,091
so that your questions can be heard on their recording.

366
00:22:36,591 --> 00:22:41,254
And the second request is that you make sure to give five stars to all the presenter and the moderator

367
00:22:41,815 --> 00:22:43,276
in the evaluation that you get.

368
00:22:44,357 --> 00:22:45,278
Towards the end of this.

369
00:22:46,559 --> 00:22:51,443
So if anyone has questions, feel free to start lining up next to a microphone.

370
00:22:51,884 --> 00:22:54,886
But let me ask one last question for now.

371
00:22:55,427 --> 00:22:57,689
So we spoke about Microsoft and Apple.

372
00:22:58,470 --> 00:23:00,592
And it may be that they'll support the standards.

373
00:23:00,612 --> 00:23:02,474
It may be that they're part of the effort.

374
00:23:02,494 --> 00:23:03,515
We sort of can't tell.

375
00:23:04,135 --> 00:23:05,116
But what if they're not?

376
00:23:06,517 --> 00:23:11,560
Will OpenXR be able to run on a Microsoft HMD?

377
00:23:13,141 --> 00:23:15,342
Who wants to take that?

378
00:23:15,362 --> 00:23:18,444
So I will.

379
00:23:18,464 --> 00:23:19,785
So let me take that, answer my own question.

380
00:23:25,823 --> 00:23:30,547
I think that if we do our job well enough and it's an open standard and a well-defined

381
00:23:30,587 --> 00:23:36,131
device interface, then there will be someone, whether it's Microsoft or a hacker someplace,

382
00:23:36,912 --> 00:23:44,057
that very, very quickly writes an OpenXR device plug-in for a Microsoft device.

383
00:23:46,099 --> 00:23:51,123
It may be sometimes that they may have to use some backdoor techniques or maybe they'll

384
00:23:51,143 --> 00:23:54,566
have to figure out some undocumented APIs, but I think these will pop up.

385
00:23:55,286 --> 00:24:03,514
Super quick, I mean we've seen it in our experience with OSVR that there's a set of peripherals,

386
00:24:03,554 --> 00:24:08,579
a set of devices that we supported inherently, but then people all over the world started

387
00:24:08,639 --> 00:24:13,925
writing plugins for their favorite game engine or favorite device from 20 years ago or from

388
00:24:13,965 --> 00:24:14,585
two days ago.

389
00:24:15,320 --> 00:24:18,262
And if you have an open enough standard in these devices,

390
00:24:18,282 --> 00:24:20,384
then that support just pops up.

391
00:24:22,486 --> 00:24:25,528
That's really a market force, right?

392
00:24:25,748 --> 00:24:27,670
You have a standard that's widely adopted enough

393
00:24:27,710 --> 00:24:29,751
in the market, and people who make devices

394
00:24:29,791 --> 00:24:32,173
are going to insist that people who are writing software

395
00:24:32,614 --> 00:24:33,414
support the standard.

396
00:24:33,434 --> 00:24:34,955
People who write software are going

397
00:24:34,975 --> 00:24:37,317
to insist that people who build runtime support the standard.

398
00:24:38,118 --> 00:24:40,740
And that pressure is difficult to resist

399
00:24:41,681 --> 00:24:43,322
once it reaches a certain level of.

400
00:24:44,869 --> 00:24:51,133
critical mass. So our goal here is to get to that critical mass so that the question isn't really whether

401
00:24:51,153 --> 00:24:56,436
uh some this company or that company or this this product or that product supports a standard it's

402
00:24:56,996 --> 00:25:03,399
more that it would just be unheard of for them to not support the standard. Like like who's going to

403
00:25:03,419 --> 00:25:08,542
make a thumb drive that doesn't support USB? It doesn't make any sense. So I think we need to get

404
00:25:08,682 --> 00:25:13,945
to that point with with uh this standard and probably other standards um so that we're we're

405
00:25:14,825 --> 00:25:18,809
making it easy for users and software developers to understand exactly what's going to work

406
00:25:18,849 --> 00:25:19,209
with what.

407
00:25:20,110 --> 00:25:24,694
And I think that's one of the reasons that the Khronos process tries to be so open, that

408
00:25:24,854 --> 00:25:31,920
everyone is welcome to create that critical mass so it will be almost impossible not to

409
00:25:31,960 --> 00:25:36,023
support it if you have a new device or a game engine and so on.

410
00:25:36,704 --> 00:25:40,046
So turning it over to the audience, who's got the first question?

411
00:25:48,393 --> 00:25:53,195
And if other people have questions, feel free to line up behind the first one.

412
00:25:53,775 --> 00:25:58,097
I've got two. Hopefully the first one is easy. Is this a C API or a C++ API?

413
00:25:59,758 --> 00:26:04,040
I don't know if we can say for sure, but it's a C API.

414
00:26:05,121 --> 00:26:05,681
Laughter

415
00:26:08,089 --> 00:26:16,134
I know there are various official C++ wrappers but other open Khronos standards.

416
00:26:16,454 --> 00:26:18,695
Is that something that you guys are likely to provide?

417
00:26:21,217 --> 00:26:22,578
It's not a focus right now.

418
00:26:24,018 --> 00:26:25,799
So the other one I guess is a little bit more general.

419
00:26:27,280 --> 00:26:30,844
With a lot of these cross-platform type APIs,

420
00:26:31,084 --> 00:26:32,946
you can either have something that

421
00:26:32,966 --> 00:26:34,507
goes for lowest common denominator

422
00:26:34,587 --> 00:26:35,908
and everything else is extensions,

423
00:26:36,209 --> 00:26:37,390
or you can try and have something

424
00:26:37,430 --> 00:26:41,213
that covers everybody by including features that

425
00:26:41,253 --> 00:26:42,114
aren't available everywhere.

426
00:26:42,154 --> 00:26:45,357
Like not all platforms have motion controllers,

427
00:26:45,417 --> 00:26:47,459
so are motion controllers a core thing,

428
00:26:47,539 --> 00:26:48,380
or are they an extension?

429
00:26:48,400 --> 00:26:51,803
I'm just wondering if you can talk to how that balance is

430
00:26:51,843 --> 00:26:52,523
being dealt with.

431
00:26:53,262 --> 00:26:55,883
Let me take that and then Nick maybe you can answer as well.

432
00:26:55,943 --> 00:26:59,705
I mean, I think that what I've seen as the philosophy inside the working group

433
00:27:00,485 --> 00:27:05,567
is if a particular feature is supported by a large enough group of vendors,

434
00:27:05,647 --> 00:27:08,829
then we feel that there's enough experience around the table to say,

435
00:27:08,869 --> 00:27:11,670
okay, could we define a standard for that.

436
00:27:12,190 --> 00:27:15,071
Other things that are less common, at least less common at the moment,

437
00:27:15,812 --> 00:27:20,454
tend to go more into either extensions or even vendor-specific extensions.

438
00:27:20,994 --> 00:27:21,194
So...

439
00:27:22,335 --> 00:27:26,539
If you have a unique piece of innovation that only your company provides,

440
00:27:26,619 --> 00:27:30,363
and you could still tie into the standard, then as it becomes more popular,

441
00:27:30,423 --> 00:27:34,688
it could work its way towards a Kronos extension or even a core feature.

442
00:27:35,506 --> 00:27:50,195
Yeah, I think part of the governing philosophy there is, you know, we're kind of targeting devices that are either on the market or soon to be on the market and not precluding anything there, but trying to build our core feature set around devices that will be largely supported.

443
00:27:50,215 --> 00:27:55,519
So motion controllers are pretty prolific right now, so I think it's safe to say that we will have support for them.

444
00:27:55,579 --> 00:28:00,142
But one of the important considerations, I think, is how we make this a standard that won't be outdated.

445
00:28:00,582 --> 00:28:05,387
And I think there's already kind of precedent for that.

446
00:28:05,407 --> 00:28:08,550
I mean, OSVR has semantic paths, which are a pretty big part of it,

447
00:28:08,590 --> 00:28:10,893
and that's kind of an interesting way to future-proof yourself

448
00:28:12,014 --> 00:28:15,638
against changes in the hardware, trying to bootstrap new devices,

449
00:28:15,678 --> 00:28:18,441
while maintaining an API that provides enough functionality

450
00:28:18,481 --> 00:28:19,982
that you can actually make good use of them.

451
00:28:20,503 --> 00:28:24,185
So I think there's ways to kind of satisfy both of those things.

452
00:28:24,225 --> 00:28:27,466
But as a general rule of thumb, if it's out or coming out,

453
00:28:28,226 --> 00:28:30,687
it's probably, and the majority of devices support it,

454
00:28:30,707 --> 00:28:32,028
it's probably part of the core standard.

455
00:28:33,409 --> 00:28:35,449
I think Nick just confirmed that retinal implants

456
00:28:35,509 --> 00:28:37,230
are not supported by the standard at this time.

457
00:28:37,450 --> 00:28:38,251
It'll be an extension.

458
00:28:40,252 --> 00:28:42,112
So I kind of think about it from the other direction,

459
00:28:42,152 --> 00:28:46,334
which is what does an application need to have available to it

460
00:28:46,394 --> 00:28:47,475
so that it can be delivered?

461
00:28:49,064 --> 00:28:53,668
to the standard and not require vendor specific extensions to actually work on other platforms.

462
00:28:54,669 --> 00:28:58,071
And that list is not as long as you might think.

463
00:28:58,752 --> 00:29:04,377
And so that's the set of things that we're really focusing on getting in the standard, especially at 1.0.

464
00:29:05,858 --> 00:29:10,161
Some things that you might expect to be in that set may end up as extensions right away,

465
00:29:10,221 --> 00:29:15,646
or maybe are not quite in the standard yet, depending on how commonly applications need them.

466
00:29:16,337 --> 00:29:20,782
But really it's all about getting to the point where an application can be delivered against,

467
00:29:21,623 --> 00:29:26,168
where a single binary will run against the Oculus runtime or the SteamVR runtime or whatever,

468
00:29:26,849 --> 00:29:32,495
without needing to target a specific vendor's SDK, and then build from there.

469
00:29:33,308 --> 00:29:37,111
And part of our discussion in the working group, at least this week, has been around MVP.

470
00:29:37,131 --> 00:29:42,154
How do we get something that's useful enough to be in core, but then doesn't take us forever?

471
00:29:42,234 --> 00:29:47,218
Because I think there seems to be a consensus that there's a need, a desire, to have this standard out.

472
00:29:49,139 --> 00:29:51,040
Thank you. Yes, please.

473
00:29:55,343 --> 00:29:58,345
Have you guys all engaged with the browser teams?

474
00:29:58,785 --> 00:30:02,048
Or is this purely a native API?

475
00:30:03,922 --> 00:30:06,224
So the question was with regards to the browser teams.

476
00:30:06,324 --> 00:30:08,547
And for instance, we didn't mention

477
00:30:08,587 --> 00:30:11,571
WebVR as sort of an engine.

478
00:30:12,612 --> 00:30:13,953
Kay, maybe you want to take that?

479
00:30:13,973 --> 00:30:15,695
We have a pretty substantial WebVR team.

480
00:30:15,796 --> 00:30:17,578
And we've announced what we're doing with WebVR.

481
00:30:17,718 --> 00:30:20,741
And definitely we have our WebVR group participating

482
00:30:20,781 --> 00:30:21,262
in OpenXR.

483
00:30:21,775 --> 00:30:23,457
We want to make sure that they have what they need.

484
00:30:23,757 --> 00:30:25,619
Their needs are a little different because they're

485
00:30:25,639 --> 00:30:28,001
running in Chrome, and they have some requirements.

486
00:30:28,062 --> 00:30:30,684
Like they want to be able to make queries without draining

487
00:30:30,724 --> 00:30:31,505
the batteries.

488
00:30:31,925 --> 00:30:35,369
So these are kind of important to them, and we want to make

489
00:30:35,389 --> 00:30:36,350
sure that they're included.

490
00:30:36,430 --> 00:30:39,433
And they've been involved since day one in the OpenXR

491
00:30:39,453 --> 00:30:39,893
standards.

492
00:30:40,494 --> 00:30:43,136
And Mozilla's logo was on that logo sheet,

493
00:30:43,897 --> 00:30:45,879
and they certainly are participating in the process.

494
00:30:46,139 --> 00:30:52,665
And existing runtimes, I mean, Valve, Oculus, OSVR,

495
00:30:52,745 --> 00:30:54,166
they run with WebVR today,

496
00:30:54,226 --> 00:30:57,029
so I think it's safe to assume that we would like

497
00:30:58,049 --> 00:31:00,352
an OpenXR runtime to run within the browser as well.

498
00:31:02,073 --> 00:31:03,134
Thank you. Yes, please.

499
00:31:05,482 --> 00:31:10,288
Hi, great discussion. Based on the vendor list and the panel, it seems like VR is kind

500
00:31:10,328 --> 00:31:15,113
of like a core and maybe the majority of what the standard would be about for now. Like

501
00:31:15,153 --> 00:31:19,158
when do you see mixed reality, augmented reality sort of joining more?

502
00:31:20,780 --> 00:31:25,625
I can take that too because we just shipped our AR core a couple of weeks ago, so we are

503
00:31:25,685 --> 00:31:26,526
moving, I mean...

504
00:31:26,933 --> 00:31:29,175
In that direction, it's extremely important to us.

505
00:31:30,416 --> 00:31:33,920
We're going to make sure that the expertise that we have the

506
00:31:33,960 --> 00:31:36,843
Tango team at Google, who's been doing AR for years, we're

507
00:31:36,863 --> 00:31:39,325
going to make sure their expertise gets leveraged and

508
00:31:39,526 --> 00:31:42,829
that we're doing things that will, moving forward, that

509
00:31:42,869 --> 00:31:43,970
we'll be able to work with that.

510
00:31:44,411 --> 00:31:47,073
And Nick, maybe you can also comment on the X in OpenXR.

511
00:31:47,402 --> 00:31:51,063
Yeah, I mean it was intentionally made X to not preclude AR.

512
00:31:51,103 --> 00:31:53,304
We would really like, there's a lot of overlap, right?

513
00:31:53,344 --> 00:31:57,905
Tracking and display, a lot of the API itself is very transferable.

514
00:31:58,005 --> 00:32:01,466
And we would love to, there is AR representation on the group right now.

515
00:32:01,506 --> 00:32:03,486
We would love to get more AR representation.

516
00:32:03,526 --> 00:32:06,007
I'm not going to call anybody out, but you guys know who you are.

517
00:32:08,743 --> 00:32:09,965
We would love to make sure that...

518
00:32:09,985 --> 00:32:11,827
I saw somebody with a t-shirt here yesterday.

519
00:32:11,847 --> 00:32:16,294
At least one company that should probably be involved knows who they are.

520
00:32:16,314 --> 00:32:17,556
There's several in this room, in fact.

521
00:32:19,258 --> 00:32:22,223
Companies out here, especially San Francisco, which is kind of a hotbed for that sort of thing.

522
00:32:24,246 --> 00:32:35,279
You know, we want to make sure that our tracking and our display and our layers and stuff like that are all able to handle both the case where you're kind of doing pass-through or you're doing AR or you're doing VR.

523
00:32:35,920 --> 00:32:42,629
And I think we're pretty good there, but it always helps to have proof points and expertise, right, because the devil's in the details with a lot of this stuff.

524
00:32:44,350 --> 00:32:44,570
Thanks.

525
00:32:45,751 --> 00:32:48,792
Anyone else want to add to the MR discussion?

526
00:32:48,952 --> 00:32:54,674
I mean, the one thing I would add is that VR devices are shipping today in quantity,

527
00:32:54,814 --> 00:32:59,716
and AR devices are still a little bit further out, at least for head-borne AR devices.

528
00:33:00,296 --> 00:33:05,418
So from our point of view, it's important for us to focus and get the...

529
00:33:06,026 --> 00:33:11,610
first version of the spec out, and that probably will be mostly about VR as a result, but beyond

530
00:33:11,650 --> 00:33:20,136
that, you know, what we're trying to do for AR versus VR and what devices are supported

531
00:33:20,477 --> 00:33:26,581
and what platforms are supported and whether or not you do things in the IPC style or the

532
00:33:26,841 --> 00:33:32,005
in-process style on mobile, what we're trying to do in all these cases is build the API

533
00:33:32,045 --> 00:33:34,607
in such a way that it's agnostic to that.

534
00:33:35,220 --> 00:33:39,780
that the API can support either one and doesn't require that you go one particular way or another.

535
00:33:40,301 --> 00:33:46,222
Because the whole point of having an open standard is that you have an interface where two different implementations

536
00:33:46,262 --> 00:33:49,762
from two different companies, probably at two different times, come together.

537
00:33:50,582 --> 00:33:55,283
And on either side of that boundary, you just go hog wild and you do whatever you think is best.

538
00:33:55,603 --> 00:33:58,384
And there's a lot of experimentation that happens on both sides of that boundary.

539
00:33:58,824 --> 00:34:01,444
So we're trying to define the boundary to be as flexible as possible

540
00:34:02,444 --> 00:34:04,665
while still making it so that those things can interoperate.

541
00:34:06,415 --> 00:34:07,457
Yes, please.

542
00:34:07,597 --> 00:34:10,160
When the standard gets released, what do app

543
00:34:10,180 --> 00:34:12,703
developers need to do to certify that their application

544
00:34:12,763 --> 00:34:13,945
actually adheres to the standard?

545
00:34:14,405 --> 00:34:16,869
And will you be giving them a stamp or a logo that they can

546
00:34:16,909 --> 00:34:19,051
attach to their app to say, hey, yes, I've actually met

547
00:34:19,091 --> 00:34:20,113
the standard?

548
00:34:21,212 --> 00:34:23,513
Do you want to answer that, Nick, on performance testing?

549
00:34:23,813 --> 00:34:25,574
It's kind of a, there's two different sides to that.

550
00:34:25,594 --> 00:34:30,497
There's the hardware and runtime manufacturers and what they have to do generally.

551
00:34:30,977 --> 00:34:35,260
We haven't announced what our specific plans for OpenXR are, but if you look at Vulkan,

552
00:34:35,280 --> 00:34:36,481
that's probably a pretty good precedent.

553
00:34:36,561 --> 00:34:39,303
So on the hardware side, if you're writing kind of driver layer stuff,

554
00:34:40,143 --> 00:34:43,405
though usually a process for conformance testing where we have a...

555
00:34:44,085 --> 00:34:48,228
A sample set of tests that it has to pass to prove that it faithfully reproduces the

556
00:34:48,248 --> 00:34:49,989
functionality in the API.

557
00:34:50,169 --> 00:34:53,691
Applications themselves don't really have that same sort of barrier.

558
00:34:55,172 --> 00:35:00,234
There's of course validation that you're using the API, right, but you're pretty much free

559
00:35:00,254 --> 00:35:01,695
to do with whatever you want with that.

560
00:35:02,576 --> 00:35:07,959
But from the hardware and runtime side, being certified to be OpenXR compatible is basically

561
00:35:08,919 --> 00:35:10,880
gated by that passing of the performance test.

562
00:35:12,392 --> 00:35:20,158
So, if every runtime supports OpenXR, how do you get differentiation between the vendors?

563
00:35:20,219 --> 00:35:23,501
Why would the Oculus runtime be better than the Valve runtime?

564
00:35:24,562 --> 00:35:26,383
Or will one be better than the other?

565
00:35:26,403 --> 00:35:28,405
Because Paul is a way better programmer than me.

566
00:35:30,713 --> 00:35:32,174
Obviously.

567
00:35:33,995 --> 00:35:38,058
Ideally, the API allows some differentiation in the way that the runtime works.

568
00:35:39,078 --> 00:35:42,821
While runtimes are essentially accomplishing the same thing,

569
00:35:43,201 --> 00:35:47,144
getting a VR display in front of the user,

570
00:35:47,484 --> 00:35:49,145
how they do it, I think,

571
00:35:49,765 --> 00:35:51,788
The API is a little bit different than the standard.

572
00:35:51,808 --> 00:35:56,213
Hopefully the API and standard will allow some flexibility there.

573
00:35:57,434 --> 00:36:01,839
If anything, just to allow somebody to go and do something, do some new great thing,

574
00:36:01,860 --> 00:36:04,523
and not be impeded by the API in doing it.

575
00:36:05,668 --> 00:36:09,290
We have some technology at Oculus, ASW, if you've heard of that,

576
00:36:09,810 --> 00:36:14,792
and our goal is to make it so that the API effectively supports ASW,

577
00:36:14,833 --> 00:36:20,075
but also allows anybody else to implement their own ASW as well on top of that API.

578
00:36:20,095 --> 00:36:24,217
Joe, do you want to talk to that as well?

579
00:36:24,457 --> 00:36:27,899
I mean, there will be a lot of diversity in the implementations of runtimes,

580
00:36:28,459 --> 00:36:32,181
and support for things like ASW is one of them, support for different devices.

581
00:36:33,100 --> 00:36:39,002
The user experience model, the way that, you know, room setup happens, like all sorts of

582
00:36:39,162 --> 00:36:40,943
different things can be points of competition.

583
00:36:41,103 --> 00:36:44,644
And that, I think that list is going to grow.

584
00:36:44,764 --> 00:36:50,046
And one of the benefits of having an extensible API as the foundation is that you can add

585
00:36:50,086 --> 00:36:55,208
those pieces on to the core API in a consistent way.

586
00:36:55,909 --> 00:36:58,170
And if it turns out that we add support for

587
00:36:59,996 --> 00:37:03,436
retinal implants, let's say, to pick one that's definitely not in 1.0.

588
00:37:04,277 --> 00:37:05,897
And we do it with a valve extension.

589
00:37:06,477 --> 00:37:09,818
And Oculus had support for retinal implants, and they do an Oculus extension.

590
00:37:10,418 --> 00:37:12,799
And they're not exactly the same, but they're kind of similar.

591
00:37:12,859 --> 00:37:17,360
Then we can come together, and we can work on making an EXT or a KHR extension

592
00:37:17,760 --> 00:37:18,980
that supports retinal implants.

593
00:37:19,900 --> 00:37:23,001
And then it's just part of the standard, and we both have an implementation of that,

594
00:37:23,041 --> 00:37:25,782
and it would work across the boundaries.

595
00:37:26,382 --> 00:37:28,002
But as the technology's coming up.

596
00:37:28,615 --> 00:37:33,756
We don't have to hash it out in a conference room in Chicago.

597
00:37:34,137 --> 00:37:35,457
We can work within our companies,

598
00:37:35,497 --> 00:37:38,398
figure out what the right answer is from our point of view.

599
00:37:38,558 --> 00:37:42,239
And then once we've got that out in the market in some way,

600
00:37:42,319 --> 00:37:44,840
then we can start to negotiate and figure out.

601
00:37:45,294 --> 00:37:48,136
What the common set of functionality is between those things.

602
00:37:48,596 --> 00:37:54,661
So surprisingly, when we do the word cloud of this panel, implants will be much bigger than I thought to begin with.

603
00:37:55,801 --> 00:38:03,447
But one thing I wanted to ask about the standard is whether it also includes a standard for content acquisition, meaning the connection to the app store.

604
00:38:04,108 --> 00:38:07,690
Or do you feel that that's going to remain sort of vendor specific?

605
00:38:08,211 --> 00:38:10,633
Kate, do you want to address that?

606
00:38:11,687 --> 00:38:12,449
I'm not sure.

607
00:38:12,569 --> 00:38:19,342
It's kind of, our current API does not really contain any sort of interface for connecting

608
00:38:19,362 --> 00:38:19,763
to stores.

609
00:38:19,803 --> 00:38:20,765
So I don't know.

610
00:38:21,820 --> 00:38:24,342
that we would move in that direction, but maybe we would in the future.

611
00:38:25,143 --> 00:38:30,167
I think currently it's kind of independent. I know Gear VR currently has a manifest flag,

612
00:38:30,207 --> 00:38:35,152
so when you create a Gear VR application, you have to add a manifest flag that connects to,

613
00:38:35,352 --> 00:38:39,155
I believe it connects to the Gear VR store or the Oculus store,

614
00:38:39,475 --> 00:38:41,697
but I don't think it's something that we do currently.

615
00:38:42,238 --> 00:38:46,161
And I don't know, I obviously can't comment on Gear's plans if they're going to continue doing that.

616
00:38:47,442 --> 00:38:51,404
I think it could happen. It's not in our current API, so we'll see.

617
00:38:53,625 --> 00:39:00,749
The microphone is still available for questions, but in the meantime, I wanted to ask the panel,

618
00:39:02,439 --> 00:39:08,606
What to you is the most sort of contentious point in the discussions about the OpenXR standard?

619
00:39:09,447 --> 00:39:16,797
And on the flip side, what was the most positive surprise that you had in these discussions?

620
00:39:17,978 --> 00:39:18,679
Who wants to go first?

621
00:39:20,434 --> 00:39:25,077
I can speak for the latter question pretty easily, and I would say the answer to that

622
00:39:25,277 --> 00:39:28,139
is that things are going fairly smoothly.

623
00:39:28,199 --> 00:39:30,501
There's quite a bit of agreement on things.

624
00:39:31,322 --> 00:39:37,506
A lot of these questions, like Joe brought up the eye implant situation and how in the

625
00:39:37,546 --> 00:39:40,969
future that's something that, you know, when that comes around we'll want to converge on

626
00:39:40,989 --> 00:39:41,149
that.

627
00:39:41,590 --> 00:39:45,532
But in a sense, all the API development that's happening right now is a lot of that same

628
00:39:45,573 --> 00:39:46,393
discussions already.

629
00:39:47,654 --> 00:39:49,716
The discussions around tracking, around...

630
00:39:51,497 --> 00:39:57,420
How displays are identified and how input is happening.

631
00:39:58,000 --> 00:40:03,222
A lot of it is us agreeing on things and realizing that there's a lot of commonality in our needs.

632
00:40:03,803 --> 00:40:10,286
And as a result, I think the API is coming together pretty cleanly and pretty smoothly and fairly rapidly

633
00:40:10,346 --> 00:40:13,607
without a whole lot of... there's not a lot of bickering.

634
00:40:14,368 --> 00:40:18,090
It doesn't happen like you hear about in other places sometimes.

635
00:40:19,919 --> 00:40:24,841
I definitely concur on that. It's been a great experience. Everyone is, I mean, we have a

636
00:40:24,881 --> 00:40:29,462
lot of respect at Google for the other, for Oculus, we have respect for like Valve and

637
00:40:29,482 --> 00:40:31,943
the work that they do for sure. And it just seemed that...

638
00:40:32,043 --> 00:40:33,364
But none for Epic?

639
00:40:33,384 --> 00:40:33,824
No, no, no.

640
00:40:34,264 --> 00:40:35,344
No respect for us.

641
00:40:35,364 --> 00:40:36,645
They have respect for Unity.

642
00:40:36,825 --> 00:40:37,505
Turn off for Epic.

643
00:40:37,565 --> 00:40:37,625
Oh!

644
00:40:37,685 --> 00:40:37,765
Oh!

645
00:40:37,845 --> 00:40:37,885
Oh!

646
00:40:37,905 --> 00:40:37,945
Oh!

647
00:40:37,985 --> 00:40:38,025
Oh!

648
00:40:38,065 --> 00:40:38,105
Oh!

649
00:40:38,125 --> 00:40:38,205
Oh!

650
00:40:38,225 --> 00:40:38,265
Oh!

651
00:40:38,285 --> 00:40:38,345
Oh!

652
00:40:38,365 --> 00:40:38,425
Oh!

653
00:40:38,445 --> 00:40:38,485
Oh!

654
00:40:38,505 --> 00:40:38,545
Oh!

655
00:40:38,565 --> 00:40:38,605
Oh!

656
00:40:39,817 --> 00:40:42,700
So it was really nice to see that coming back though.

657
00:40:42,760 --> 00:40:46,504
But I think if I was going to say the most contentious point, I would probably raise

658
00:40:46,524 --> 00:40:50,348
what the audience member over there asked, which is about what should be in core and

659
00:40:50,368 --> 00:40:55,073
what should be in an extension, because I think that that is definitely like things

660
00:40:55,113 --> 00:40:58,816
that we think should be core and maybe Oculus doesn't think it should be an extension.

661
00:40:59,137 --> 00:41:02,399
So I think there's always a lot of if something is important.

662
00:41:02,439 --> 00:41:06,422
I mean you can see on the list of people who are involved in OpenXR,

663
00:41:06,462 --> 00:41:10,364
many companies have something that they work on that they feel is extremely important

664
00:41:10,424 --> 00:41:12,285
and it is important often for the future of...

665
00:41:13,460 --> 00:41:20,705
And so, but making a decision as to whether we can functionally get that into core and

666
00:41:20,805 --> 00:41:26,008
make that out and like get 1.0 out in a reasonable time frame is always a hard decision and things

667
00:41:26,048 --> 00:41:29,611
have to get pushed into extensions that we don't want to push or that some people it's

668
00:41:29,671 --> 00:41:30,471
really important to them.

669
00:41:30,551 --> 00:41:31,452
So I think that's a hard.

670
00:41:33,781 --> 00:41:34,841
And I concur.

671
00:41:34,881 --> 00:41:37,543
I mean, going into the first meeting, we didn't know what

672
00:41:37,623 --> 00:41:39,663
the atmosphere is going to be like, whether it's going to be

673
00:41:39,703 --> 00:41:42,825
sort of my way or the highway, or is it going to be, hey, we

674
00:41:42,885 --> 00:41:46,086
all have sort of the same, we all want the VR and AR market

675
00:41:46,126 --> 00:41:46,586
to grow.

676
00:41:46,606 --> 00:41:49,527
To make that grow, we need the standards.

677
00:41:49,608 --> 00:41:54,229
So let's sort of put our best ideas together and see if we

678
00:41:54,269 --> 00:41:55,730
can make something good happen.

679
00:41:56,831 --> 00:42:01,392
On that subject, so if you have someone in the audience

680
00:42:01,412 --> 00:42:02,233
whose company is not.

681
00:42:02,693 --> 00:42:03,815
Part of the OpenXR.

682
00:42:04,276 --> 00:42:05,898
And they have an IP concern.

683
00:42:06,199 --> 00:42:09,544
Are they giving up their IP if they contribute to the standard?

684
00:42:09,584 --> 00:42:10,706
Maybe you can talk to that, Nick.

685
00:42:12,072 --> 00:42:14,373
You don't necessarily have to give up your IP.

686
00:42:15,153 --> 00:42:20,075
When you go into the group discussion, they have different rules on the IP.

687
00:42:20,095 --> 00:42:24,716
If you attend a workgroup meeting, basically there are IP rules in place to make sure that

688
00:42:24,976 --> 00:42:28,578
company X can't put something into the standard that they have a patent on.

689
00:42:28,618 --> 00:42:32,139
That would force everybody that adopted the standard to have to license that patent.

690
00:42:33,039 --> 00:42:43,261
So there are provisions around there that say if you do put something, a contribution forth into the standard, everybody in the group, everybody waives their right to claim patentability on that.

691
00:42:43,401 --> 00:42:49,242
So your contributions are, but it doesn't mean that you can't have secret sauce that you keep to yourself.

692
00:42:50,322 --> 00:42:55,843
You can still make a runtime that does something if you had a patent on a completely hypothetical asynchronous space warp.

693
00:42:55,863 --> 00:42:58,464
If for some reason that was a patent to technology, probably not.

694
00:42:59,084 --> 00:43:08,288
But if you had a patent on retinal implants, you could still implement that in the run time and not have to give anything towards the common IP zone.

695
00:43:08,308 --> 00:43:14,890
You just couldn't make something into the standard that you have a patent on, if that makes sense.

696
00:43:16,091 --> 00:43:18,432
And how about the low-level graphics API?

697
00:43:18,472 --> 00:43:22,433
I mean, so will this work with DirectX? Will this work with Metal?

698
00:43:22,493 --> 00:43:25,955
I mean, will this run on a Mac? Will this support Vulkan?

699
00:43:27,195 --> 00:43:27,335
So...

700
00:43:28,517 --> 00:43:33,058
I can't, we can't answer any of the specific questions, but here's what I can say.

701
00:43:33,858 --> 00:43:38,899
We support DX 10.11.12 Vulkan GL on PC.

702
00:43:39,760 --> 00:43:45,901
We support Metal on OSX. We support GL and Vulkan on Linux.

703
00:43:46,681 --> 00:43:50,062
And we expect all those things to be supported in our API going forward.

704
00:43:50,562 --> 00:43:53,903
So if this becomes our API, then I would expect all those things to be supported.

705
00:43:53,923 --> 00:43:56,423
I don't know if you have anything to say about...

706
00:43:58,630 --> 00:44:04,232
mobile. One more thing I want to say is, you've always continued to ask questions because

707
00:44:04,272 --> 00:44:08,873
none of you are standing at the mic. Please go ask questions. We're happy to answer whatever

708
00:44:09,634 --> 00:44:10,334
you're wondering about.

709
00:44:12,354 --> 00:44:14,455
Absolutely. Yeah. Go ahead.

710
00:44:18,016 --> 00:44:22,778
Is there a group dedicated to documentation and examples or is this much more of a reference

711
00:44:22,818 --> 00:44:24,919
for the hardware vendors to build drivers?

712
00:44:28,664 --> 00:44:29,545
Documentation.

713
00:44:29,645 --> 00:44:30,085
What's that?

714
00:44:31,726 --> 00:44:32,307
Examples.

715
00:44:32,367 --> 00:44:34,909
I mean, you've met programmers before, right?

716
00:44:37,771 --> 00:44:38,892
No.

717
00:44:39,112 --> 00:44:43,955
One of the goals is Kay is doing a marvelous job editing the spec, and the spec is trying

718
00:44:44,096 --> 00:44:46,938
to be as verbose and self-documenting as possible.

719
00:44:46,978 --> 00:44:50,120
So it has the header in there, but it also has little snippets of example.

720
00:44:50,681 --> 00:44:55,505
code, the intended usage, what is the expected income and outcome, and the kind of API contract

721
00:44:55,525 --> 00:44:55,825
for that.

722
00:44:56,325 --> 00:44:56,966
So there is that.

723
00:44:57,366 --> 00:45:02,391
There is talk about whether or not we want to release a full sample implementation of

724
00:45:02,471 --> 00:45:02,531
it.

725
00:45:02,671 --> 00:45:07,415
And of course, anybody that adopts it is free to make an open source implementation of the

726
00:45:07,435 --> 00:45:08,396
standard, if they'd like.

727
00:45:08,476 --> 00:45:11,679
So that's kind of one of the ways we're looking to try to leverage that sort of stuff.

728
00:45:11,719 --> 00:45:14,181
But we're not ready to announce anything specific.

729
00:45:14,721 --> 00:45:17,383
But we certainly don't preclude anybody from releasing source to it.

730
00:45:19,417 --> 00:45:21,698
So one of the things that's a little bit different between

731
00:45:21,798 --> 00:45:25,939
mobile and PCs is the thermal management, melting phones

732
00:45:25,999 --> 00:45:26,560
and so on.

733
00:45:26,920 --> 00:45:29,901
Does the standard address some of the thermal concerns?

734
00:45:32,942 --> 00:45:35,383
We can't exactly say what the standard addresses and not,

735
00:45:35,403 --> 00:45:36,804
but we currently have an API.

736
00:45:36,864 --> 00:45:39,265
Actually, Android has an API, too, called the Sustained

737
00:45:39,305 --> 00:45:42,687
Performance Mode API, where you can switch and manage your

738
00:45:42,727 --> 00:45:43,507
thermal performance.

739
00:45:43,887 --> 00:45:46,228
It's certainly important for the future of VR and the

740
00:45:46,268 --> 00:45:46,748
future of AR.

741
00:45:47,435 --> 00:45:48,076
that we do that.

742
00:45:48,096 --> 00:45:53,440
I mean, it's not just, I mean, if you heat up, so the consequence of heating up your

743
00:45:53,480 --> 00:45:57,984
phone, it's kind of an interesting, because the hotter your phone gets, the less, the

744
00:45:58,024 --> 00:46:00,986
less good it is at conducting, so the more power it needs.

745
00:46:01,306 --> 00:46:05,630
So you're kind of, once you get hot, you're getting hotter at an exponential rate, because

746
00:46:06,110 --> 00:46:10,053
the more, the hotter you get, the more power you need, and so the hotter you get again,

747
00:46:10,394 --> 00:46:12,255
and then you're hotter again, and you need more power.

748
00:46:12,775 --> 00:46:17,219
This is something that we need to manage and that all VR on mobile has to manage.

749
00:46:17,279 --> 00:46:18,800
So any, us and everyone.

750
00:46:18,860 --> 00:46:20,822
So I would expect something.

751
00:46:20,862 --> 00:46:23,484
I mean, we already have stuff in Android that's not going away.

752
00:46:23,584 --> 00:46:26,746
So, and I'd expect you there to be more in the future.

753
00:46:27,347 --> 00:46:28,828
And I would say, sorry, go ahead.

754
00:46:29,428 --> 00:46:34,572
I was switching the slide back just to make sure that Qualcomm is on the logo list.

755
00:46:34,632 --> 00:46:40,717
So they are active in the group and you'd think that as a mobile processor company,

756
00:46:40,737 --> 00:46:42,238
that's one of the things they might care about.

757
00:46:43,051 --> 00:46:47,434
I was going to say, as kind of a middleware engine provider, one of the biggest challenges

758
00:46:47,474 --> 00:46:50,116
that we see is people developing for mobile.

759
00:46:50,436 --> 00:46:54,318
On one hand, it's one of the most accessible platforms, because a lot of people have cell

760
00:46:54,338 --> 00:46:56,600
phones that are compatible and it's kind of low cost to get into.

761
00:46:56,640 --> 00:46:57,560
You don't have to have the whole PC.

762
00:46:58,021 --> 00:47:00,702
But it's also one of the most challenging because of the thermal constraints.

763
00:47:00,722 --> 00:47:05,045
And we see most people that fail at making mobile VR fail because they heat up the device

764
00:47:05,085 --> 00:47:08,707
or aren't able to optimize within the mobile perf and thermal.

765
00:47:09,668 --> 00:47:13,470
requirements so that's one thing I would love to see I mean in the industry as a

766
00:47:13,490 --> 00:47:17,052
whole not necessarily even within the standards group more attention towards

767
00:47:17,112 --> 00:47:20,654
educating people on how to manage thermals what are the best practices

768
00:47:21,174 --> 00:47:24,516
what happens it because when you tell people about you know thermal runway

769
00:47:24,736 --> 00:47:28,018
runaway most people don't know that when you get hotter you start using more

770
00:47:28,038 --> 00:47:31,680
power and then you in turn kind of have this exponential curve and simple

771
00:47:31,720 --> 00:47:35,262
lessons like that once you tell people it makes sense but to me that's also

772
00:47:35,322 --> 00:47:37,783
partly a matter of education and not standardization

773
00:47:38,204 --> 00:47:40,828
And by the way, we're about 10, 15 minutes from the end of this session.

774
00:47:41,169 --> 00:47:44,013
You should be receiving the email survey by now.

775
00:47:44,053 --> 00:47:45,255
We're shooting for six stars.

776
00:47:47,098 --> 00:47:47,558
But please.

777
00:47:49,278 --> 00:47:54,879
So we support both Vive and Touch at the moment, and we found that the biggest headache in

778
00:47:54,899 --> 00:47:59,340
supporting both of them is less about API differences and more about how do we map equivalent

779
00:47:59,440 --> 00:48:01,760
actions between the quite different controller designs.

780
00:48:01,780 --> 00:48:08,462
So I'm just wondering if the API tries to say, like, this is a grip button or this is

781
00:48:08,502 --> 00:48:12,922
a grab control versus this is button one, button two, and you just have to go through

782
00:48:12,942 --> 00:48:17,643
each platform and map those to, based on your own kind of design decisions.

783
00:48:18,480 --> 00:48:20,902
Let me take that and maybe Joe you can add to that later.

784
00:48:21,143 --> 00:48:24,266
I have no opinions on that subject at all.

785
00:48:24,466 --> 00:48:28,089
So one of the things that we have in OSVR, in open source VR,

786
00:48:28,630 --> 00:48:34,775
is the notion of an abstraction layer where we basically allow you to define controllers

787
00:48:34,815 --> 00:48:39,580
and then map them into, say, a fire button or a trigger button or a teleport button.

788
00:48:40,100 --> 00:48:42,823
And then abstract that from the game.

789
00:48:42,943 --> 00:48:46,206
So a game could say, I want to use the teleport button.

790
00:48:46,587 --> 00:48:49,830
And then at some lower level, the device manufacturer says,

791
00:48:49,850 --> 00:48:52,132
well, I think this particular yellow button is really going

792
00:48:52,152 --> 00:48:55,135
to work well for teleport or for a particular game.

793
00:48:55,476 --> 00:48:58,178
And so we think this is one of the good features of OSVR.

794
00:48:58,679 --> 00:49:00,560
And as far as SenseX is concerned, we're certainly

795
00:49:00,601 --> 00:49:03,463
pushing to have something like that in OpenXR.

796
00:49:05,105 --> 00:49:08,107
And Joe, since you have no opinion, then go for it.

797
00:49:08,147 --> 00:49:09,087
Here's my non-opinion.

798
00:49:09,808 --> 00:49:14,351
So we think that this is a pretty important issue

799
00:49:14,391 --> 00:49:14,831
to solve.

800
00:49:15,351 --> 00:49:18,733
And it's not even just limited to,

801
00:49:19,394 --> 00:49:20,455
I have a single application.

802
00:49:20,475 --> 00:49:22,156
I want my single application to support

803
00:49:22,856 --> 00:49:24,937
Oculus Touch and the Vive controllers

804
00:49:25,077 --> 00:49:29,700
and upcoming Knuckles and the Windows MR controllers.

805
00:49:30,241 --> 00:49:32,262
You want all those to work in the same application.

806
00:49:32,302 --> 00:49:33,483
And the differences between them.

807
00:49:34,297 --> 00:49:39,280
Are, you know, this button does this or the dead zone on the joystick needs to be this on this kind of controller.

808
00:49:39,320 --> 00:49:41,162
And it's different when you have a trackpad.

809
00:49:41,182 --> 00:49:53,051
And like those sorts of changes and the sorts of things you would have to do to adapt your game are important to address as a challenge, as an issue.

810
00:49:54,652 --> 00:50:01,056
We also think that it's important to, from the Harper vendor side, to be able to add support for new controllers.

811
00:50:01,517 --> 00:50:04,979
There are 2,000 VR-only games on Steam.

812
00:50:06,060 --> 00:50:07,761
Games, some of them are games, some of them are not.

813
00:50:08,521 --> 00:50:10,062
Applications, I mean.

814
00:50:11,203 --> 00:50:14,505
And most of those are never going to ship another update.

815
00:50:14,885 --> 00:50:17,827
And it would be a tragedy if they don't support Knuckles

816
00:50:17,867 --> 00:50:18,427
when it comes out.

817
00:50:19,067 --> 00:50:23,230
So we think that it's important to build things in such a way

818
00:50:23,310 --> 00:50:25,251
that they're not just a game.

819
00:50:26,075 --> 00:50:33,200
that future hardware can be supported, both because we think that it's not, we're not done

820
00:50:33,500 --> 00:50:36,823
innovating on hardware and figuring out what the right input mechanism is,

821
00:50:37,803 --> 00:50:42,226
but also because it makes a market for interesting new hardware devices that are application specific

822
00:50:42,767 --> 00:50:48,150
and because it enables accessibility for people who may not have the ability to use a standard controller.

823
00:50:48,941 --> 00:50:54,643
And all these are things that we're very interested in solving as part of the standard.

824
00:50:55,463 --> 00:50:58,545
And that's not to say anything at all about what the actual solution will be when it comes

825
00:50:58,605 --> 00:50:59,225
out in state two.

826
00:50:59,345 --> 00:51:01,566
And the other side of this is community contributions, right?

827
00:51:01,586 --> 00:51:06,648
Because you can say, well, the game developer thought that this is the right combination

828
00:51:06,768 --> 00:51:11,229
to do mapping between actions and buttons, but now the community figured out or some

829
00:51:11,310 --> 00:51:16,491
eSports champion figured out that if he does this other thing, and maybe he wants to publish

830
00:51:16,772 --> 00:51:17,612
his key mappings.

831
00:51:18,833 --> 00:51:19,273
to VR.

832
00:51:19,593 --> 00:51:21,875
So, we...

833
00:51:23,917 --> 00:51:26,199
I gave a talk about getting

834
00:51:27,360 --> 00:51:28,981
TF2 up and running on the DK1

835
00:51:29,622 --> 00:51:32,784
back in 2014 or something.

836
00:51:33,525 --> 00:51:36,568
And what I said at that time is something I still believe,

837
00:51:36,608 --> 00:51:39,190
which is that we don't know what mouse look is yet

838
00:51:39,550 --> 00:51:40,171
for VR.

839
00:51:40,651 --> 00:51:43,453
We don't know that it's WASD plus, you know,

840
00:51:43,674 --> 00:51:44,875
rotating the camera around.

841
00:51:46,035 --> 00:51:53,544
for VR, for teleporting, for reloading mechanics, for moving around, for picking things up and

842
00:51:53,624 --> 00:51:58,570
manipulating objects. All of those basic verbs are still experimental right now.

843
00:52:00,508 --> 00:52:03,009
As part of figuring that out, we have to try a lot of different things.

844
00:52:03,609 --> 00:52:05,290
And that might mean that there's some disagreement,

845
00:52:05,390 --> 00:52:09,492
because there was disagreement when Mouselook was coming up as the way to do things.

846
00:52:10,152 --> 00:52:13,393
So, having the community be able to communicate with each other

847
00:52:13,493 --> 00:52:16,254
and share configurations about, you know,

848
00:52:16,515 --> 00:52:19,556
this is how I think it should go, no, I think it should go this way.

849
00:52:20,476 --> 00:52:21,176
Like, that's important.

850
00:52:23,407 --> 00:52:34,193
It's a big area of interest for us with the Steam Controller system that we have to support a bunch of different games and a bunch of different controllers on Steam is sort of in that direction.

851
00:52:34,213 --> 00:52:39,596
Trying to figure out how to make that remapping be a thing that can come from the community and not just from the game developer.

852
00:52:40,488 --> 00:52:45,535
I just think on that note, it's not as simple as mapping button to button because for Vive

853
00:52:45,836 --> 00:52:48,660
we tend to find you don't want to hold down the grip buttons if you're using those to

854
00:52:48,700 --> 00:52:48,940
grab.

855
00:52:49,361 --> 00:52:52,786
It's better to press and release, whereas with the touch it's very much designed that

856
00:52:52,826 --> 00:52:54,929
you hold the grip button the whole time you're holding the object.

857
00:52:56,568 --> 00:52:59,448
You can't necessarily just do a button to button mapping

858
00:52:59,609 --> 00:53:00,289
for a lot of these things.

859
00:53:00,709 --> 00:53:01,909
And it's not necessarily buttons.

860
00:53:01,949 --> 00:53:04,270
I mean, even on a desktop interface, you can achieve,

861
00:53:04,310 --> 00:53:06,830
you can close a dialog box, or you can answer a yes, no

862
00:53:06,890 --> 00:53:10,231
question with a mouse click, or a keyboard shortcut, or a

863
00:53:10,311 --> 00:53:13,512
touch on the screen, or maybe tomorrow with a

864
00:53:13,552 --> 00:53:14,672
hand or a head gesture.

865
00:53:15,212 --> 00:53:18,833
So I think there may be a need for a mechanism to say

866
00:53:19,493 --> 00:53:21,954
whatever the input mechanism is, we want to map it into

867
00:53:21,994 --> 00:53:25,194
some kind of action beyond the simplistic one-to-one mapping

868
00:53:25,234 --> 00:53:26,335
between a button and an action.

869
00:53:28,436 --> 00:53:30,317
Thank you. Next question please.

870
00:53:30,337 --> 00:53:34,139
Hi. This is a continuation a little bit on the last one.

871
00:53:34,579 --> 00:53:38,681
How much into the user space application does this go? For example, with the

872
00:53:39,122 --> 00:53:42,724
SteamVR plugin for Unity determining between left and right controllers,

873
00:53:42,744 --> 00:53:46,066
you just kind of get the controllers and you do some sort of like positional determination.

874
00:53:46,586 --> 00:53:50,648
Or with Leap Motion you have gestures. Are you looking

875
00:53:50,708 --> 00:53:52,269
to also go into that area as well?

876
00:53:53,870 --> 00:53:55,411
Did I answer this Unity question?

877
00:53:57,751 --> 00:53:59,332
First of all, I would recommend an engine change.

878
00:53:59,352 --> 00:54:02,654
Laughter

879
00:54:02,954 --> 00:54:12,859
But in all honesty, what we want to do, that's kind of the perfect avenue for extensions, for things that come along that maybe aren't broadly adopted across all hardware, like gestures.

880
00:54:14,100 --> 00:54:16,120
We would probably surface those via an extension,

881
00:54:17,241 --> 00:54:19,061
where applications still have a standardized ways

882
00:54:19,081 --> 00:54:21,922
to get that data, whether it's coming from a Leap Motion

883
00:54:22,062 --> 00:54:25,604
or Google Soli or any other thing that takes gesture.

884
00:54:26,444 --> 00:54:28,044
Recognition is an input, and then surface that up.

885
00:54:28,164 --> 00:54:29,885
There are kind of common interfaces

886
00:54:29,925 --> 00:54:31,426
for routing things to the applications,

887
00:54:32,466 --> 00:54:33,666
especially surrounding the input.

888
00:54:34,447 --> 00:54:35,807
And we would probably make sure that there's

889
00:54:35,827 --> 00:54:38,448
a good mapping to there so that it fits into the ecosystem well.

890
00:54:38,468 --> 00:54:39,788
And you can just check for the existence

891
00:54:39,808 --> 00:54:40,809
of that in your application.

892
00:54:40,849 --> 00:54:42,009
And if it's provided, then you can

893
00:54:42,289 --> 00:54:43,730
do those in the same way.

894
00:54:44,793 --> 00:54:48,996
From the engine level, me developing an application towards Unreal, it shouldn't change at all?

895
00:54:50,517 --> 00:54:52,939
To you guys, the Unreal Engine guys implementing it?

896
00:54:53,280 --> 00:54:57,823
Yeah, we would basically do the piping up through our input layer that we have in the engine,

897
00:54:57,863 --> 00:54:59,325
and make sure there's a strong mapping between that.

898
00:54:59,345 --> 00:55:03,548
The hope is the end user, if you're using an engine middleware, be it Unreal or Unity,

899
00:55:04,349 --> 00:55:06,831
the abstractions that are already in place would just be wrapped.

900
00:55:07,111 --> 00:55:07,471
They would hold.

901
00:55:08,512 --> 00:55:12,896
One thing I can say about this is that the last couple of years we've already been working with Unity and Unreal,

902
00:55:13,596 --> 00:55:13,716
and...

903
00:55:14,096 --> 00:55:16,457
The first one is that it's a game development transcript.

904
00:55:16,477 --> 00:55:20,438
The second one is that it's a game development transcript.

905
00:55:20,838 --> 00:55:23,999
The third one is that it's a game development transcript.

906
00:55:24,120 --> 00:55:26,780
And of course, join the group and help us figure it out.

907
00:55:26,800 --> 00:55:27,541
Next question, please.

908
00:55:40,599 --> 00:55:41,740
I have a couple of things, actually.

909
00:55:42,980 --> 00:55:46,842
As we all know, the VR user comfort and testing

910
00:55:46,922 --> 00:55:51,524
are pretty important components of the VR development.

911
00:55:51,844 --> 00:55:55,605
So I'm just wondering what kind of considerations

912
00:55:56,325 --> 00:55:57,866
you have in those two areas.

913
00:55:58,426 --> 00:56:03,848
What are you doing to make it easier for these VR

914
00:56:03,908 --> 00:56:06,369
applications to be tested across different platforms,

915
00:56:06,389 --> 00:56:08,310
because all of them run on different hardware and so on?

916
00:56:08,862 --> 00:56:09,942
What kind of tools you're thinking?

917
00:56:10,503 --> 00:56:13,324
And in terms of comfort, again, what kind of,

918
00:56:14,465 --> 00:56:15,845
how are you designing the API to make sure

919
00:56:15,865 --> 00:56:17,786
that there are tools to kind of measure

920
00:56:18,507 --> 00:56:20,328
and ensure some kind of a basic comfort?

921
00:56:25,030 --> 00:56:29,213
So our philosophy about that with SteamVR

922
00:56:29,253 --> 00:56:31,274
and with working with HTC on the Vive

923
00:56:31,314 --> 00:56:32,615
was that we should build a platform.

924
00:56:33,358 --> 00:56:36,980
where the platform itself is capable of being comfortable,

925
00:56:37,020 --> 00:56:42,643
that you can build an experience that does not

926
00:56:42,683 --> 00:56:45,185
get people sick, that doesn't cause any motion sickness.

927
00:56:45,885 --> 00:56:48,066
And from there, it's up to the application developers.

928
00:56:48,106 --> 00:56:49,807
There are people who are trying things

929
00:56:49,887 --> 00:56:52,209
that will get some people sick and won't get other people

930
00:56:52,229 --> 00:56:52,429
sick.

931
00:56:52,469 --> 00:56:56,251
There's people trying things that they're actually

932
00:56:56,311 --> 00:56:59,493
deliberately setting out to induce motion sickness.

933
00:57:01,032 --> 00:57:04,594
And that's fine, there's experimentation that's happening on top of the platform,

934
00:57:04,634 --> 00:57:10,598
but the platform itself is trying to be built in such a way that it supports comfortable experiences.

935
00:57:11,298 --> 00:57:17,562
And I think that the, I guess I'm sort of applying that same philosophy

936
00:57:17,762 --> 00:57:20,504
when I'm participating in discussions about OpenXR.

937
00:57:21,557 --> 00:57:26,800
The API basically is irrelevant for comfort because you can build a comfortable system

938
00:57:27,381 --> 00:57:30,323
and if the tracking system is good enough and the optics are good enough and the application

939
00:57:30,383 --> 00:57:33,545
is friendly to user comfort, then the user will be comfortable.

940
00:57:34,926 --> 00:57:40,249
For testing I think it's a little easier with a single standard API because you can use

941
00:57:40,269 --> 00:57:42,531
the same binary against multiple run times.

942
00:57:43,691 --> 00:57:48,134
So we've got time for one more question and then after that a quick question to Nick about

943
00:57:48,995 --> 00:57:49,355
is there...

944
00:57:50,462 --> 00:57:57,909
A mechanism to preview at some point the standard before it gets published for people maybe to provide input if they're highly interested.

945
00:57:57,949 --> 00:58:00,352
But we want to take the audience question first, please.

946
00:58:01,473 --> 00:58:12,845
So related to that question, is the standard body defining any KPIs at each of the layers for both device as well as for the middleware and applications?

947
00:58:14,880 --> 00:58:16,520
In terms of testability?

948
00:58:20,082 --> 00:58:26,264
I think the goal is that you would be able to take a SteamVR or an Oculus Store application,

949
00:58:26,784 --> 00:58:31,286
replace the proprietary runtime with the OpenXR runtime, and then at the very least get the

950
00:58:31,346 --> 00:58:36,267
exact same experience on the native device, and then beyond that start getting very similar

951
00:58:36,327 --> 00:58:41,269
experience on devices that the game was not initially designed to use.

952
00:58:41,609 --> 00:58:44,330
But maybe others have a different view on this.

953
00:58:44,756 --> 00:58:47,718
Yeah, I mean it's kind of the same with other graphics APIs.

954
00:58:48,038 --> 00:58:52,820
If you were a graphics card manufacturer and you wanted to support Vulkan, you could make

955
00:58:52,860 --> 00:58:57,003
a really bad implementation of Vulkan and it could be really slow and non-performant.

956
00:58:57,043 --> 00:59:01,865
But the hope is because there's an open standard and ostensibly other companies will be implementing

957
00:59:01,885 --> 00:59:02,886
run times and drivers for this.

958
00:59:03,366 --> 00:59:09,489
that people would naturally gravitate towards the best API or implementation of the API.

959
00:59:10,070 --> 00:59:13,992
So we're really focused on making sure that we're not precluding anybody from making the

960
00:59:14,032 --> 00:59:17,834
most performant application in terms of latency and turnaround and, you know, where we block

961
00:59:17,874 --> 00:59:18,995
them and where we don't block them.

962
00:59:19,875 --> 00:59:23,657
And make sure that that's very standardized and well-defined so that applications can

963
00:59:23,677 --> 00:59:28,120
theoretically write to a specific behavior pattern from a runtime and the runtimes can

964
00:59:28,320 --> 00:59:29,560
in turn expect the same from them.

965
00:59:30,072 --> 00:59:35,464
And Nick, last question and maybe 20 seconds for the answer on auditing or being able to get a preview of the standard.

966
00:59:35,898 --> 00:59:42,282
Yeah, so before we release the standard, aside from joining the Khronos organization, which

967
00:59:42,782 --> 00:59:47,265
if you join Khronos you have access to any of the working groups, OpenXR is just one

968
00:59:47,305 --> 00:59:53,849
of them, you can additionally, we're looking at starting a technical advisory panel where

969
00:59:53,910 --> 00:59:57,572
we invite people to take a look that might be either implementing run times that aren't

970
00:59:57,592 --> 01:00:00,714
part of Khronos or people that are implementing applications on top of the layer.

971
01:00:01,694 --> 01:00:04,676
can preview portions of it in order to solicit feedback.

972
01:00:04,756 --> 01:00:10,159
So that has to be voted on and ratified by the working group for each member.

973
01:00:10,219 --> 01:00:15,882
So if you're interested in it, you can contact me through the Kronos OpenXR Working Group Chair email

974
01:00:16,122 --> 01:00:19,784
that's listed on the Kronos.org website under OpenXR,

975
01:00:19,924 --> 01:00:22,425
and let me know you're interested, and I can add you to the list.

976
01:00:22,466 --> 01:00:26,628
And then when we go through and are ready to open up that tech advisory board,

977
01:00:26,968 --> 01:00:28,909
we can invite on a case-by-case basis.

978
01:00:29,329 --> 01:00:33,616
So Nick, Paul, Kay, and Joe, thank you for joining me today and thank you all for...

