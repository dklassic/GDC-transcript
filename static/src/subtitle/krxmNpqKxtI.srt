1
00:00:07,888 --> 00:00:09,068
So welcome to our talk.

2
00:00:09,108 --> 00:00:09,668
Thanks for coming.

3
00:00:10,008 --> 00:00:15,310
It's 5.30, which is late in the day, so I appreciate it.

4
00:00:17,430 --> 00:00:19,831
So first off, my name's Michael Trautje.

5
00:00:19,851 --> 00:00:26,452
I, prior to this, spent a bunch of years, 15, at BioWare on

6
00:00:26,712 --> 00:00:28,093
Knights of the Old Republic, an artist.

7
00:00:28,573 --> 00:00:31,313
I was the level art lead through Massive X 1 through

8
00:00:32,834 --> 00:00:36,254
3, and in the early days of what is now Anthem, I was a

9
00:00:36,374 --> 00:00:37,155
technical art director.

10
00:00:38,648 --> 00:00:39,909
Hi, my name is Mikolaj Konik,

11
00:00:40,469 --> 00:00:42,150
and I'm an engineer at Phoenix Labs,

12
00:00:42,250 --> 00:00:44,231
and previously I worked with SideFX on Houdini

13
00:00:44,271 --> 00:00:45,652
and Houdini Engine Plugin for Unreal.

14
00:00:49,734 --> 00:00:52,276
So today we're going to talk a little bit about Dauntless,

15
00:00:52,296 --> 00:00:53,336
the game we're working on right now.

16
00:00:55,177 --> 00:00:57,899
We're going to talk about what we wanted to accomplish,

17
00:00:59,280 --> 00:01:01,061
where we're at, and

18
00:01:02,185 --> 00:01:04,447
To those that don't know, we're discussing a Houdini,

19
00:01:04,487 --> 00:01:05,548
Houdini engine pipeline.

20
00:01:06,008 --> 00:01:09,391
So we need to cover a few basics on just some Houdini terms

21
00:01:09,631 --> 00:01:11,893
so that some of this makes sense to those

22
00:01:11,933 --> 00:01:12,854
with less experience with that.

23
00:01:13,915 --> 00:01:17,818
And from there, we're going to describe our overall pipeline,

24
00:01:18,498 --> 00:01:19,239
what we've set up.

25
00:01:20,220 --> 00:01:21,321
It's still a work in progress, but we're

26
00:01:21,341 --> 00:01:22,101
going to describe where we're at.

27
00:01:23,022 --> 00:01:26,985
And we're going to dig into a few sort of useful pieces

28
00:01:27,065 --> 00:01:30,528
for anyone interested in sort of a Houdini engine

29
00:01:30,548 --> 00:01:31,248
pipeline of their own.

30
00:01:33,056 --> 00:01:34,156
So that's those building blocks.

31
00:01:36,737 --> 00:01:40,218
So Dauntless is a co-op action RPG.

32
00:01:40,798 --> 00:01:41,858
It's a free to play title.

33
00:01:41,958 --> 00:01:43,138
It's currently in early access.

34
00:01:44,819 --> 00:01:48,480
You'll fight powerful behemoths and craft weapons and play

35
00:01:48,500 --> 00:01:48,880
with your friends.

36
00:01:49,420 --> 00:01:52,561
So it all takes place on the Shattered Isles, which is

37
00:01:52,601 --> 00:01:54,861
pretty much the topic of our talk here.

38
00:01:55,781 --> 00:01:57,982
So if you want to learn more about Dauntless as a game and

39
00:01:58,002 --> 00:02:00,562
everything else, I invite you to go check it out at

40
00:02:00,602 --> 00:02:01,643
playdauntless.com.

41
00:02:01,663 --> 00:02:01,823
But.

42
00:02:02,784 --> 00:02:05,086
The rest of this should hopefully become self-explanatory.

43
00:02:07,749 --> 00:02:08,710
So yeah, the Shattered Isles.

44
00:02:09,971 --> 00:02:11,553
They play a pretty critical role.

45
00:02:11,573 --> 00:02:13,034
They're not just a passive backdrop.

46
00:02:16,598 --> 00:02:18,640
We joined the team because working on this

47
00:02:19,721 --> 00:02:21,163
pretty exciting environment was...

48
00:02:22,817 --> 00:02:27,201
a lot of fun personally, but also because we're doing this with a really, really small

49
00:02:27,241 --> 00:02:32,206
team, and that meant we couldn't go about this basically in the traditional way.

50
00:02:33,146 --> 00:02:36,389
When I say small team, most of the world art you're going to be seeing here was created

51
00:02:36,449 --> 00:02:42,495
by world artists with Jen Morgan, technical art with Corey Lake, and art direction by

52
00:02:42,515 --> 00:02:42,975
Glenn Varnes.

53
00:02:43,696 --> 00:02:47,679
So very few hands were involved in this.

54
00:02:49,159 --> 00:02:51,402
So when I say, instead of talking about an art department,

55
00:02:51,482 --> 00:02:53,184
I'll probably say Jen or Corey,

56
00:02:53,364 --> 00:02:54,886
and think of them as synonymous.

57
00:02:59,072 --> 00:03:03,194
We wanted to, we had an open-ended, you know,

58
00:03:03,775 --> 00:03:06,556
list of themes, biomes that we wanted to kind of take on.

59
00:03:07,457 --> 00:03:10,238
We only had some concepts and some idea of the types of environments

60
00:03:10,258 --> 00:03:12,880
we wanted to take on when we started this,

61
00:03:12,920 --> 00:03:14,241
but we knew that there'd be more to come,

62
00:03:14,681 --> 00:03:17,162
and it'd be an evolving kind of thing, an evolving visual target,

63
00:03:17,202 --> 00:03:21,065
but also just, you know, we'd kind of adapt to new themes as they showed up.

64
00:03:21,105 --> 00:03:24,167
So we didn't know the scope of everything that we'd be taking on

65
00:03:24,187 --> 00:03:27,308
when we started it, but visually we knew there'd be pretty wide range.

66
00:03:29,258 --> 00:03:33,060
Technically, we couldn't just make do with any space.

67
00:03:34,061 --> 00:03:36,883
We wanted fairly predictable topology

68
00:03:36,983 --> 00:03:39,905
for the player navigation gameplay.

69
00:03:40,846 --> 00:03:44,008
But these are procedural spaces,

70
00:03:44,048 --> 00:03:45,589
and we'll get into some of what that means,

71
00:03:45,669 --> 00:03:47,630
but they're also directed spaces.

72
00:03:49,071 --> 00:03:51,053
That means the...

73
00:03:52,460 --> 00:03:54,402
level creators, I'll say designers,

74
00:03:54,442 --> 00:03:55,823
but it was sometimes gen,

75
00:03:56,584 --> 00:03:58,446
but everyone sort of contributed to that.

76
00:03:58,506 --> 00:04:02,249
But the idea is that we wanted to kind of lay out

77
00:04:02,289 --> 00:04:04,811
what would happen, and that would be part of the input.

78
00:04:05,472 --> 00:04:09,315
So that would mean that we land on the island,

79
00:04:09,375 --> 00:04:12,878
we start in this swamp, and we make our way up

80
00:04:12,938 --> 00:04:14,640
into this forest area over here, whatever,

81
00:04:14,680 --> 00:04:16,822
that'd be the type of input that someone might want

82
00:04:16,862 --> 00:04:18,563
to sort of begin creating some of these things with.

83
00:04:20,112 --> 00:04:21,553
We haven't ruled out generating,

84
00:04:21,573 --> 00:04:24,776
just sort of new things and see how they go,

85
00:04:24,816 --> 00:04:26,437
but in general, these are a directed thing.

86
00:04:27,838 --> 00:04:30,300
We needed to be compatible with Unreal.

87
00:04:30,340 --> 00:04:36,525
We wanted Jen and Corey to continue working on

88
00:04:37,149 --> 00:04:39,310
an island as if it was created by hand.

89
00:04:39,670 --> 00:04:40,611
So the end result of this,

90
00:04:41,191 --> 00:04:43,533
specifically that means maybe not a lot of custom

91
00:04:43,673 --> 00:04:45,535
or custom mesh we had to be careful with

92
00:04:45,995 --> 00:04:49,878
because we wanted her to resume painting landscape

93
00:04:49,938 --> 00:04:53,641
or plants or manipulating meshes and that kind of thing.

94
00:04:54,401 --> 00:04:56,082
Her overall workflow couldn't be damaged

95
00:04:56,122 --> 00:04:57,603
as a result of us generating it.

96
00:04:59,276 --> 00:05:04,979
That also meant we'd just need powerful controls to sort of tailor or alter the generated results.

97
00:05:04,999 --> 00:05:11,082
So not so much just letting her manipulate after the fact as much as it was like sort of guide some of the generation stuff coming into it.

98
00:05:15,565 --> 00:05:16,285
So here's where we're at now.

99
00:05:22,360 --> 00:05:25,501
So note that these have received some art polish.

100
00:05:25,561 --> 00:05:27,182
That's just part of our standard process,

101
00:05:27,222 --> 00:05:30,023
which I think I can hopefully explain a little bit more of,

102
00:05:30,143 --> 00:05:33,805
but it's just game captures of some of the islands.

103
00:05:49,612 --> 00:05:52,053
Sorry, cartoonishly sped up to make the most of your time.

104
00:06:13,874 --> 00:06:16,455
Yeah, so we've got initial couple biomes here.

105
00:06:17,535 --> 00:06:18,576
We've got more in the works.

106
00:06:19,236 --> 00:06:21,497
These all have a bunch of sub-area kind of types,

107
00:06:23,378 --> 00:06:24,818
sub-biomes, whatever, within that.

108
00:06:25,038 --> 00:06:29,280
But we currently generate all the assets required

109
00:06:29,320 --> 00:06:31,601
to make a fully playable Dauntless level.

110
00:06:31,641 --> 00:06:33,862
So there's no additional work required on the result

111
00:06:34,282 --> 00:06:37,824
to kind of hop in and continue, do full play experience on it.

112
00:06:41,091 --> 00:06:43,653
Yeah, and this is where we'll describe a little bit of Houdini.

113
00:06:44,053 --> 00:06:47,155
So this is our introductory slide. So what is Houdini?

114
00:06:47,835 --> 00:06:50,857
Houdini to us is a visual programming tool, node-based.

115
00:06:52,258 --> 00:06:54,620
You have four main types of geometry in Houdini,

116
00:06:54,680 --> 00:06:58,923
which are points, vertices, indices, primitives, and detail.

117
00:06:59,403 --> 00:07:01,464
You can associate different attributes with those.

118
00:07:03,886 --> 00:07:06,187
Then you can package your node networks into Assets,

119
00:07:06,447 --> 00:07:08,008
and you can bring that into Unreal.

120
00:07:09,349 --> 00:07:10,730
This is very similar to Blueprint.

121
00:07:11,087 --> 00:07:12,707
where you have parameters on individual nodes,

122
00:07:13,287 --> 00:07:14,807
and you basically promote them to your asset,

123
00:07:14,887 --> 00:07:17,428
and those show up in Unreal in the details panel.

124
00:07:18,688 --> 00:07:21,029
Then you have two main scripting languages in Houdini,

125
00:07:21,049 --> 00:07:22,249
which is Python and VEX.

126
00:07:23,369 --> 00:07:25,990
There's an SDK, which is the Houdini development kit,

127
00:07:26,110 --> 00:07:28,950
which we make use of extensively, and there's an engine.

128
00:07:29,130 --> 00:07:31,871
And to us, Houdini engine is essentially a transport mechanism

129
00:07:32,071 --> 00:07:34,651
that brings the data from Houdini to Unreal

130
00:07:34,771 --> 00:07:35,612
and the other way as well.

131
00:07:38,963 --> 00:07:41,784
So our technology right now, we use Houdini 16.

132
00:07:41,884 --> 00:07:43,865
I believe we started on Houdini 14.

133
00:07:44,425 --> 00:07:47,026
Houdini 16 was a pretty major update for us

134
00:07:47,106 --> 00:07:49,026
because it brought hide fields,

135
00:07:49,226 --> 00:07:51,407
which we make use of for landscape construction.

136
00:07:52,627 --> 00:07:58,269
Our Houdini Engine Unreal plugin is a fork of Unreal Engine

137
00:07:58,289 --> 00:07:59,610
plugin provided by SideFX,

138
00:08:00,370 --> 00:08:01,791
which we split off about two years ago,

139
00:08:01,851 --> 00:08:02,931
and we maintain our own fork.

140
00:08:05,289 --> 00:08:08,332
We'll do our best to point out differences between our plugin

141
00:08:08,512 --> 00:08:09,993
and the current thing.

142
00:08:11,454 --> 00:08:12,435
Forgive us if we're wrong.

143
00:08:12,975 --> 00:08:16,378
Obviously, take the official engine docs

144
00:08:16,498 --> 00:08:19,260
as gospel over top of any of our examples.

145
00:08:20,621 --> 00:08:22,723
So right now, we're able to generate about 25

146
00:08:22,983 --> 00:08:24,805
different types of actors from Houdini data.

147
00:08:25,045 --> 00:08:26,907
The way we do this is we look for presence

148
00:08:26,947 --> 00:08:29,108
of particular attributes on points or primitives.

149
00:08:29,933 --> 00:08:32,573
and we also are able to input pretty much any Unreal Asset

150
00:08:32,713 --> 00:08:34,834
or Unreal Actor or the whole map back into Houdini

151
00:08:34,854 --> 00:08:36,074
for processing as well.

152
00:08:38,795 --> 00:08:41,835
So the standard approach of inputting data into Houdini

153
00:08:41,955 --> 00:08:43,695
is you basically just input geometry,

154
00:08:43,755 --> 00:08:45,756
but what happens if the data that you're trying to input

155
00:08:45,796 --> 00:08:46,476
is not geometry?

156
00:08:46,756 --> 00:08:48,136
This is basically where it gets complicated.

157
00:08:49,056 --> 00:08:52,177
You essentially have to resort to encoding that data

158
00:08:52,237 --> 00:08:54,417
as geometry by basically encoding attributes on that

159
00:08:54,818 --> 00:08:56,038
and decoding that on Houdini's side.

160
00:09:00,162 --> 00:09:05,968
So our way to solve this problem is to convert all the data.

161
00:09:06,849 --> 00:09:08,530
In Unreal, basically what we do is we input,

162
00:09:09,051 --> 00:09:11,153
we go through all the properties in the Asset.

163
00:09:11,693 --> 00:09:14,456
We convert all the properties to binary JSON.

164
00:09:14,616 --> 00:09:15,557
Same happens to the,

165
00:09:16,297 --> 00:09:17,919
if we want to input the Actor as well.

166
00:09:18,399 --> 00:09:20,141
We basically input all the properties of the Actor.

167
00:09:20,201 --> 00:09:21,602
We also traverse all the components

168
00:09:21,702 --> 00:09:23,424
and harvest all the data as well.

169
00:09:23,664 --> 00:09:24,685
And we do this recursively.

170
00:09:25,812 --> 00:09:28,534
And on the coding side, we have two operators

171
00:09:28,674 --> 00:09:30,094
that we created, custom operators.

172
00:09:30,655 --> 00:09:33,556
One decodes the binary JSON into text JSON

173
00:09:33,756 --> 00:09:36,718
so that we can use Python to basically parse that and extract

174
00:09:36,758 --> 00:09:37,238
information.

175
00:09:37,939 --> 00:09:40,460
And the second one is the actual geometry unpacking,

176
00:09:40,480 --> 00:09:43,521
where basically it knows how to interpret

177
00:09:43,722 --> 00:09:44,842
certain types of vectors.

178
00:09:45,142 --> 00:09:48,444
So any kind of mesh, BSP, landscapes, and so on.

179
00:09:52,697 --> 00:09:57,601
So our way of aggregating data is to use a system

180
00:09:57,621 --> 00:09:58,702
that we call a recipe system.

181
00:09:59,503 --> 00:10:01,965
A recipe is an aggregation of parameters

182
00:10:02,225 --> 00:10:06,188
as well as meshes and foliage types and landscape materials

183
00:10:06,349 --> 00:10:07,810
and landscape layer objects,

184
00:10:07,850 --> 00:10:09,831
basically anything that's necessary

185
00:10:09,851 --> 00:10:12,113
in order for us to construct an island.

186
00:10:14,816 --> 00:10:16,857
So this is an example of a mossy biome forest

187
00:10:16,957 --> 00:10:19,660
that was created using a mossy recipe.

188
00:10:24,339 --> 00:10:28,629
So we're going to quickly cover our overall pipeline at kind of a high level,

189
00:10:28,710 --> 00:10:30,554
just to give some context to some of the later pieces.

190
00:10:33,047 --> 00:10:37,110
Yeah, so what you're seeing on the left, left, sorry,

191
00:10:37,311 --> 00:10:39,393
is just sort of a high level graph

192
00:10:39,433 --> 00:10:40,534
that sometimes describes,

193
00:10:41,475 --> 00:10:43,116
generally describes the overall connectivity,

194
00:10:43,837 --> 00:10:48,141
the main spaces and any sort of navigation that's intended.

195
00:10:49,042 --> 00:10:52,745
So, node one is, or area one is connected to two

196
00:10:53,586 --> 00:10:56,509
and is implied that there's sort of a clean navigation route

197
00:10:56,549 --> 00:10:56,949
from A to B.

198
00:11:00,482 --> 00:11:03,244
so this is sort of a part of the input

199
00:11:03,285 --> 00:11:05,206
that would go into a complete level.

200
00:11:05,967 --> 00:11:11,271
We take that and we have an intermediate 2D stage

201
00:11:11,831 --> 00:11:16,695
where we essentially just use a Voronoi fracture cut

202
00:11:17,776 --> 00:11:21,079
in two dimensions that we use to resolve

203
00:11:21,119 --> 00:11:23,621
a lot of the sort of high-level constraints of the map.

204
00:11:23,921 --> 00:11:26,824
So that's things like there is a path from one to two

205
00:11:26,864 --> 00:11:28,085
or whatever that's specified.

206
00:11:29,975 --> 00:11:33,516
It's 2D, but we are taking some three-dimensional things

207
00:11:33,576 --> 00:11:35,857
into account, you know, like we don't want a slope

208
00:11:35,937 --> 00:11:38,397
of more than, that exceeds a certain, say, value.

209
00:11:38,898 --> 00:11:41,518
So the route from one area to the other

210
00:11:41,538 --> 00:11:44,239
may sort of chicane or cut back and forth

211
00:11:44,259 --> 00:11:44,739
and that kind of thing.

212
00:11:44,779 --> 00:11:47,300
So there's a lot of stuff that kind of goes into this.

213
00:11:47,320 --> 00:11:49,340
There's also a ton of attributes

214
00:11:49,380 --> 00:11:51,261
that we're sort of calculating at that point

215
00:11:51,281 --> 00:11:53,581
to figure out how far things are from the island edge.

216
00:11:54,906 --> 00:11:58,354
groups for this is part of a navigation network, this can't be obstructed,

217
00:11:58,374 --> 00:12:02,984
and some outcrops and some other stuff which I'll describe.

218
00:12:07,812 --> 00:12:11,135
From there, we work on a sort of initial,

219
00:12:11,175 --> 00:12:13,636
like a very clean 3D mesh that describes

220
00:12:13,716 --> 00:12:16,798
the general 3D volume, we call it land massing,

221
00:12:17,419 --> 00:12:21,501
but the overall 3D shape that has been sort of specified.

222
00:12:21,762 --> 00:12:23,423
We're not covering a lot of the design tools.

223
00:12:24,023 --> 00:12:25,644
We just didn't have time to kind of go over a lot of them,

224
00:12:25,704 --> 00:12:27,886
but we can describe those if anyone's interested,

225
00:12:27,966 --> 00:12:28,766
just come on up after.

226
00:12:31,327 --> 00:12:33,667
Yeah, so the mesh, like I said, is clean and watertight.

227
00:12:33,707 --> 00:12:37,368
We deal with a lot of bow ties and other more complex 3D

228
00:12:37,408 --> 00:12:37,848
situations.

229
00:12:37,868 --> 00:12:40,809
We just want to make sure the squeaky clean results

230
00:12:41,029 --> 00:12:43,109
at this point are very predictable for a lot

231
00:12:43,129 --> 00:12:43,989
of our next stuff.

232
00:12:44,689 --> 00:12:46,270
We also tag all the primitive groups here.

233
00:12:46,770 --> 00:12:48,230
So basically we know where the cliffs are,

234
00:12:48,470 --> 00:12:50,010
where the traversable areas are.

235
00:12:50,230 --> 00:12:52,391
Yeah, a lot of groups and attributes and stuff like that.

236
00:12:57,410 --> 00:13:01,115
define the overall 3D shape like the island bottom is sort of determined by

237
00:13:01,315 --> 00:13:07,023
sort of manipulating another 3D fracture, Voronoi fracture, but we're just sort of

238
00:13:07,063 --> 00:13:09,587
manipulating the cell points, the cutters basically.

239
00:13:10,782 --> 00:13:14,285
of that to sort of produce sort of a rocky shape

240
00:13:14,325 --> 00:13:15,526
that sort of fit our style.

241
00:13:16,026 --> 00:13:19,409
So the gif in the top right is just sort of a 2D section

242
00:13:19,489 --> 00:13:21,170
cutting through the island that hopefully describes

243
00:13:22,111 --> 00:13:22,951
sort of how that's created.

244
00:13:22,991 --> 00:13:24,633
So the points along the top are actually the same

245
00:13:25,593 --> 00:13:30,597
Voronoi cells from the previous,

246
00:13:31,098 --> 00:13:33,520
but the ones down the side basically are the new guys.

247
00:13:37,722 --> 00:13:40,223
So we, like I said, we've got outcrops,

248
00:13:40,303 --> 00:13:41,484
is just sort of our term for it.

249
00:13:41,504 --> 00:13:44,245
This is just some land that is sort of shoved up or down

250
00:13:44,285 --> 00:13:44,925
on the surface of it.

251
00:13:44,965 --> 00:13:48,067
These, their orientation and some other stuff

252
00:13:48,107 --> 00:13:51,508
is determined from some sort of fake stress vectors

253
00:13:52,668 --> 00:13:54,509
that just give some initial alignment

254
00:13:54,849 --> 00:13:57,090
that makes sense and follows kind of

255
00:13:57,110 --> 00:13:58,331
where we were headed artistically.

256
00:13:59,051 --> 00:14:00,892
But to be honest, most of these get sort of

257
00:14:01,892 --> 00:14:03,153
shoved around in particular,

258
00:14:03,673 --> 00:14:05,834
shoving around land and the outcrops themselves.

259
00:14:06,889 --> 00:14:10,113
is the majority of sort of the design input,

260
00:14:10,334 --> 00:14:14,039
that iteration, that a level creator

261
00:14:14,099 --> 00:14:14,860
would kind of go through.

262
00:14:16,002 --> 00:14:18,425
So usually noodling with this kind of thing

263
00:14:18,485 --> 00:14:20,949
is just part of just the exploration.

264
00:14:24,666 --> 00:14:28,948
From there, we determine, or we create a whole number

265
00:14:29,329 --> 00:14:31,930
of additional sort of assets that sort of branch

266
00:14:31,950 --> 00:14:34,991
from that point, and we instantiate everything

267
00:14:35,092 --> 00:14:38,813
from reflection probes to player starts, foliage,

268
00:14:39,394 --> 00:14:42,895
and fitted landscape that sort of matches

269
00:14:42,915 --> 00:14:45,257
the, well, what we just described earlier.

270
00:14:46,037 --> 00:14:48,398
The overall,

271
00:14:49,501 --> 00:14:52,443
number of these stages we can't actually describe at any sort of level of detail

272
00:14:52,463 --> 00:14:54,885
within half an hour or whatever that would be meaningful for you.

273
00:14:55,346 --> 00:14:59,229
So rather than covering all of them at like a breakneck pace,

274
00:14:59,309 --> 00:15:01,811
we decided to sort of dig into a select few interesting ones

275
00:15:02,832 --> 00:15:06,655
and also provide you with sort of a building block again,

276
00:15:06,675 --> 00:15:09,737
like a starting point so that anyone that's interested or whatever

277
00:15:09,797 --> 00:15:14,081
knows how to like maybe incorporate a piece of this back in their pipelines.

278
00:15:16,735 --> 00:15:19,096
So the first example we created was the point instancing example.

279
00:15:19,116 --> 00:15:20,116
That's probably the easiest one.

280
00:15:21,137 --> 00:15:22,437
You have a Houdini network on the right,

281
00:15:22,557 --> 00:15:23,937
which basically generates random points.

282
00:15:24,778 --> 00:15:26,478
It assigns random transformations to those points.

283
00:15:26,938 --> 00:15:28,979
We also have an attribute, a string attribute on a point

284
00:15:29,279 --> 00:15:32,000
that is a path to Unreal Asset that is going to be instantiated.

285
00:15:32,480 --> 00:15:34,540
And we also have our plugin-specific attribute,

286
00:15:34,581 --> 00:15:36,861
which defines whether to create instant static meshes

287
00:15:36,921 --> 00:15:37,621
or static meshes.

288
00:15:38,402 --> 00:15:41,769
And then on the left, you have basically Unreal Asset,

289
00:15:41,969 --> 00:15:44,174
sorry, Houdini Asset that is in Unreal.

290
00:15:44,574 --> 00:15:46,378
You can see all the parameters exposed in the detail panel,

291
00:15:46,458 --> 00:15:48,262
and you can choose the static mesh to your instance

292
00:15:48,362 --> 00:15:49,505
as well as how many points you want.

293
00:15:50,843 --> 00:15:55,327
you'll most likely want to provide additional transform information for a lot of

294
00:15:55,367 --> 00:15:57,248
things depending on what you're doing. Um,

295
00:15:57,329 --> 00:16:01,372
so we commonly would have say scale and orient. These are just the normal, uh,

296
00:16:01,532 --> 00:16:06,276
sorry, scale is a float three oriented, a quaternion float four. Um, you,

297
00:16:06,897 --> 00:16:07,017
yeah,

298
00:16:07,037 --> 00:16:10,460
I would most likely want to supply those as well to give them a complete

299
00:16:10,500 --> 00:16:11,961
transform information for an instance.

300
00:16:14,766 --> 00:16:16,166
These are just the standard Houdini ones,

301
00:16:16,186 --> 00:16:17,487
so they refer to the engine docs,

302
00:16:17,807 --> 00:16:18,807
Houdini engine docs, sorry,

303
00:16:19,348 --> 00:16:21,749
for the kind of better description

304
00:16:21,769 --> 00:16:22,529
of what each of those does.

305
00:16:28,172 --> 00:16:29,572
It's actually a great time to point out

306
00:16:29,712 --> 00:16:33,394
that random scattering is actually rarely the solution

307
00:16:33,434 --> 00:16:34,875
for a lot of the things that we wanted.

308
00:16:37,596 --> 00:16:40,118
It has its place, it's like Perlin noise, it's useful,

309
00:16:40,198 --> 00:16:42,119
but it's not the be-all and end-all solution

310
00:16:42,279 --> 00:16:45,020
for most of the things you'll probably end up wanting to do.

311
00:16:46,001 --> 00:16:50,403
So quite often we wanted a very, very specific arrangement,

312
00:16:51,204 --> 00:16:54,186
probably an artist-controlled arrangement of meshes

313
00:16:54,946 --> 00:16:55,766
for a specific thing.

314
00:16:55,987 --> 00:16:57,127
So we're talking about cliffs here,

315
00:16:58,068 --> 00:17:01,570
but our solution is actually generic for other situations.

316
00:17:01,630 --> 00:17:02,390
I'll try and cover those.

317
00:17:05,655 --> 00:17:07,076
this target needed to evolve,

318
00:17:07,136 --> 00:17:08,958
so we kind of wanted a non-destructive setup

319
00:17:09,298 --> 00:17:11,640
that would allow us to continue improving

320
00:17:12,200 --> 00:17:13,281
what that would end up looking like,

321
00:17:14,362 --> 00:17:17,125
and have that just sort of natively work.

322
00:17:18,125 --> 00:17:19,747
So our approach works off of the idea

323
00:17:19,847 --> 00:17:20,828
that if we had

324
00:17:22,747 --> 00:17:27,169
a few or a number of samples that described ideal.

325
00:17:27,329 --> 00:17:29,370
So if art were to arrange, in this case,

326
00:17:30,590 --> 00:17:34,051
cliff rocks in a way that matched what they wanted to see,

327
00:17:34,592 --> 00:17:35,852
Jen wanted to see,

328
00:17:37,893 --> 00:17:42,055
we could pick the smartest one that made sense

329
00:17:42,135 --> 00:17:44,856
for a new target scenario and adapt it.

330
00:17:48,397 --> 00:17:49,597
So yeah, what we came up with.

331
00:17:51,255 --> 00:17:52,676
Jen gives everything a really fun name,

332
00:17:52,716 --> 00:17:53,856
so she called this one quilting.

333
00:17:55,617 --> 00:17:58,298
What we came up with was we would define

334
00:17:58,338 --> 00:18:01,419
inside of a blueprint the ideal arrangements

335
00:18:02,800 --> 00:18:04,381
that covering sort of a range of scenarios

336
00:18:04,401 --> 00:18:05,341
and that kind of thing.

337
00:18:07,102 --> 00:18:09,543
And we could determine a mapping of sort of meshes

338
00:18:09,583 --> 00:18:13,684
and transforms from a source scenario to a target scenario.

339
00:18:14,985 --> 00:18:19,407
So we supply a number of parameters, inputs,

340
00:18:19,648 --> 00:18:23,649
that would help Jen prioritize certain things.

341
00:18:23,709 --> 00:18:27,571
So this would let us, say, minimize overall scale changes

342
00:18:27,731 --> 00:18:30,933
from source to target, non-uniform scale,

343
00:18:30,953 --> 00:18:33,374
you know, like stretch along any kind of one axis,

344
00:18:34,454 --> 00:18:36,055
and overall just distortion differences,

345
00:18:36,095 --> 00:18:39,076
because we're dealing with a very organic island.

346
00:18:39,356 --> 00:18:40,457
We're not, we didn't...

347
00:18:41,457 --> 00:18:44,400
format the stuff from land massing to, you know,

348
00:18:44,441 --> 00:18:46,302
snap to a very specific number of scenarios.

349
00:18:46,322 --> 00:18:49,005
You know, it's not a tile set in that regard.

350
00:18:49,766 --> 00:18:54,431
So we needed to supply ways of sort of configuring

351
00:18:54,471 --> 00:18:55,032
what was important.

352
00:18:58,093 --> 00:19:00,535
And here, yeah, you can see some example output

353
00:19:00,655 --> 00:19:01,735
of our Quilter asset.

354
00:19:02,496 --> 00:19:05,358
And this is untouched from the system,

355
00:19:05,418 --> 00:19:10,201
so this is just the raw output of the biome, its recipe,

356
00:19:10,981 --> 00:19:15,805
and the Quilter asset along primitives

357
00:19:15,825 --> 00:19:17,826
that we have grouped or marked as cliffs,

358
00:19:17,926 --> 00:19:19,727
whatever, from some of our earlier things.

359
00:19:24,515 --> 00:19:27,437
Another example of point instancing is foliage.

360
00:19:27,977 --> 00:19:31,820
In our case, we were pumping this into Unreal's

361
00:19:32,821 --> 00:19:35,622
instanced foliage actor and system.

362
00:19:36,903 --> 00:19:38,784
So, again, Jen could paint flowers

363
00:19:38,864 --> 00:19:41,586
and keep adjusting these the way she was before.

364
00:19:43,055 --> 00:19:46,377
but the result would work with standard instancing and stuff like that, so the

365
00:19:46,397 --> 00:19:48,119
difference in our plugin and

366
00:19:49,179 --> 00:19:52,302
I think where the current state of the Houdini engine plugin is wouldn't be

367
00:19:52,702 --> 00:19:54,423
all that different with that one change.

368
00:19:56,064 --> 00:20:00,328
We liked Unreal's instanced, sorry, foliage propagation volume.

369
00:20:01,328 --> 00:20:04,711
We did like the results, but we wanted to take a little bit more direct control over

370
00:20:04,751 --> 00:20:05,772
where instances sat.

371
00:20:08,919 --> 00:20:10,640
specifically where and how it kind of grew.

372
00:20:10,660 --> 00:20:12,761
So we just wanted to add a little bit basically to Unreal's

373
00:20:12,861 --> 00:20:14,622
and the best way to do that was to sort of,

374
00:20:15,683 --> 00:20:16,223
we rolled our own.

375
00:20:16,824 --> 00:20:21,547
So, we have a very, very simple growth simulation.

376
00:20:21,847 --> 00:20:23,268
I'll describe a little bit more of that in a second.

377
00:20:24,348 --> 00:20:24,769
We use,

378
00:20:26,972 --> 00:20:30,832
lightweight, like low res 2D vector field,

379
00:20:30,932 --> 00:20:31,613
it's just noise.

380
00:20:32,653 --> 00:20:34,613
We call it like a fake prevailing winds.

381
00:20:35,013 --> 00:20:36,474
And the reason we do that is just so that

382
00:20:36,514 --> 00:20:38,774
when we scatter plants and scans,

383
00:20:39,234 --> 00:20:41,615
sorry, plants reseed and propagate,

384
00:20:42,235 --> 00:20:43,975
that we just get slightly more natural looking,

385
00:20:44,235 --> 00:20:46,756
you know, cluster shapes and bunching.

386
00:20:48,096 --> 00:20:50,737
So yeah, you can see here, they're faint,

387
00:20:50,837 --> 00:20:52,237
but the plants themselves or whatever,

388
00:20:52,457 --> 00:20:54,818
and the vector field.

389
00:20:56,709 --> 00:21:01,252
So this is just a quick GIF of it showing we run a fixed

390
00:21:01,292 --> 00:21:02,253
number of generations.

391
00:21:02,613 --> 00:21:04,875
Each plant respects a shade radius of its

392
00:21:04,915 --> 00:21:05,675
neighboring plants.

393
00:21:06,276 --> 00:21:08,057
These are all configurable through Recipe, which we

394
00:21:08,097 --> 00:21:08,597
showed earlier.

395
00:21:08,617 --> 00:21:10,199
We didn't get into all the details of the Recipe.

396
00:21:10,239 --> 00:21:13,701
Just know that there's a handful of controls like its

397
00:21:13,741 --> 00:21:16,643
shade, like what it covers, where and how it grows.

398
00:21:17,384 --> 00:21:19,425
So that can include in water, near water.

399
00:21:20,286 --> 00:21:22,907
in shade or like in cliff shade or stuff like that.

400
00:21:22,967 --> 00:21:24,867
So we just, we gave a few sort of inputs.

401
00:21:25,948 --> 00:21:27,808
Gen actually controlled like the number of generations

402
00:21:27,868 --> 00:21:29,269
it would sort of repropagate to.

403
00:21:30,409 --> 00:21:34,690
For perf reasons, we let every plant try and repropagate

404
00:21:35,291 --> 00:21:37,691
and if it fails after sort of a couple times

405
00:21:37,731 --> 00:21:40,192
or a threshold, we cut it out

406
00:21:40,312 --> 00:21:42,193
or we don't allow it to try again kind of thing.

407
00:21:42,233 --> 00:21:45,294
So age is sort of, you know, tracked along

408
00:21:45,314 --> 00:21:46,274
with some of the other parameters

409
00:21:46,294 --> 00:21:48,195
and that would drive scale, which you can kind of see here.

410
00:21:49,467 --> 00:21:50,831
So the oldest plants are the biggest water.

411
00:21:54,802 --> 00:21:57,650
So we created another example, which is our landscape example.

412
00:21:58,874 --> 00:22:00,115
It's very similar to the point example,

413
00:22:00,175 --> 00:22:02,377
but HeightFields and Houdini are primitives.

414
00:22:02,557 --> 00:22:03,698
So it operates on primitives.

415
00:22:04,778 --> 00:22:06,299
We create four HeightFields here.

416
00:22:06,359 --> 00:22:08,341
We tag them with attributes, such as name,

417
00:22:08,441 --> 00:22:12,023
also with the path to the landscape info object.

418
00:22:13,084 --> 00:22:15,285
And we create four HeightFields here.

419
00:22:15,385 --> 00:22:17,167
One is visibility, one is the actual HeightField,

420
00:22:17,347 --> 00:22:19,488
and two are the landscape layers.

421
00:22:19,928 --> 00:22:21,229
We normalize them here as well.

422
00:22:21,690 --> 00:22:22,750
And on the left is the result.

423
00:22:25,310 --> 00:22:27,592
I meant to say this earlier, but the first few steps

424
00:22:27,732 --> 00:22:30,214
with a pipeline involving Houdini Engine

425
00:22:30,815 --> 00:22:31,896
can be a little intimidating.

426
00:22:31,956 --> 00:22:33,177
There's a lot to take in.

427
00:22:35,679 --> 00:22:37,400
It's a piece of cake for Mikola, but it's not for me.

428
00:22:37,461 --> 00:22:41,164
So everything you need to theoretically build

429
00:22:41,284 --> 00:22:42,665
one of these should be visible

430
00:22:42,825 --> 00:22:45,608
or should be covered in this slide.

431
00:22:46,949 --> 00:22:48,090
Ask us if we missed anything.

432
00:22:48,791 --> 00:22:49,531
But if there's any interest,

433
00:22:49,571 --> 00:22:51,313
we can definitely supply the assets themselves.

434
00:22:54,859 --> 00:22:56,599
It's probably worth pointing out as well here.

435
00:22:56,619 --> 00:22:57,539
I should have covered that earlier.

436
00:22:58,819 --> 00:23:00,860
We're talking about Unreal here, and sorry,

437
00:23:00,900 --> 00:23:03,420
this slide specifically would be very kind of Unreal,

438
00:23:03,440 --> 00:23:04,801
but a majority of what we're talking about

439
00:23:04,861 --> 00:23:06,981
is actually pretty applicable to Unity as well.

440
00:23:11,002 --> 00:23:13,383
So this is the result of our snowy biome recipe

441
00:23:13,563 --> 00:23:16,143
where we adjust the water plane level and entrance

442
00:23:16,163 --> 00:23:17,344
that affects the landscape layers

443
00:23:17,524 --> 00:23:19,504
and in turn affects the foliage instances.

444
00:23:21,818 --> 00:23:22,739
I forgot to mention that too.

445
00:23:23,179 --> 00:23:24,720
There's, yes, a fitted water plane

446
00:23:24,760 --> 00:23:28,203
that basically goes along with the biome results,

447
00:23:28,304 --> 00:23:29,164
whatever from some of these.

448
00:23:31,326 --> 00:23:33,948
We do keep, it's worth noting,

449
00:23:33,988 --> 00:23:37,151
we keep landscape layers normalized ourself.

450
00:23:37,912 --> 00:23:41,195
Unreal does have its own weighting

451
00:23:41,435 --> 00:23:44,338
within the layer info object, sorry, but...

452
00:23:47,416 --> 00:23:52,497
we decided to keep that, the normalized state of it,

453
00:23:53,277 --> 00:23:53,857
tracked ourselves.

454
00:23:54,117 --> 00:23:54,877
Just give us more control.

455
00:23:56,458 --> 00:23:59,278
Was able to, much easier to predict or explain

456
00:23:59,318 --> 00:24:01,979
exactly why a specific weight ended up

457
00:24:02,019 --> 00:24:03,059
being exactly what it was.

458
00:24:06,400 --> 00:24:08,240
The layers and their count, the number of layers,

459
00:24:08,960 --> 00:24:10,201
they're all recipe driven as well.

460
00:24:12,600 --> 00:24:15,022
So we just showed some sort of normal-ish materials,

461
00:24:15,082 --> 00:24:16,483
but we started with some of that.

462
00:24:16,663 --> 00:24:19,525
But a lot of the look that we were kind of going for

463
00:24:19,585 --> 00:24:21,447
really wanted to give sort of a thickness or a depth

464
00:24:22,568 --> 00:24:25,670
to a lot of the surfaces within the world.

465
00:24:26,431 --> 00:24:28,152
We wanted a natural-looking buildup

466
00:24:28,252 --> 00:24:30,855
that made all the world objects

467
00:24:30,955 --> 00:24:32,076
look like they kind of belong there.

468
00:24:32,516 --> 00:24:34,478
So you can see a few examples here with snow.

469
00:24:35,278 --> 00:24:36,179
We did this with sand.

470
00:24:36,219 --> 00:24:38,020
It's potentially moss and some other things as well.

471
00:24:39,662 --> 00:24:40,843
Dubbed that one accumulation.

472
00:24:42,278 --> 00:24:46,299
And so this was just another landscape layer,

473
00:24:46,660 --> 00:24:48,760
but this had sort of some special properties

474
00:24:48,800 --> 00:24:52,161
that we tied it to an Unreal render target.

475
00:24:52,881 --> 00:24:55,122
And that meant we could do, so we did vertex offset,

476
00:24:55,882 --> 00:24:57,582
sort of vertex displacement, essentially,

477
00:24:57,602 --> 00:25:01,343
or whatever for the vertices and a correction to the normals

478
00:25:01,403 --> 00:25:01,943
after the fact.

479
00:25:02,003 --> 00:25:04,504
Anyone that gets into vertex offset has to deal with that.

480
00:25:05,504 --> 00:25:08,545
Yeah, and this simulates just natural build-up

481
00:25:08,605 --> 00:25:09,885
against those world surfaces.

482
00:25:10,826 --> 00:25:14,472
I use quotes with simulate a lot because it's not a simulation and we're not doing any

483
00:25:15,334 --> 00:25:18,639
Houdini's capable of all sorts of really cool simulation, but this is not a simulation.

484
00:25:19,040 --> 00:25:21,484
Really the goal here was very configurable.

485
00:25:24,191 --> 00:25:30,633
art configurable profiles and we really wanted Gen to be able to kind of drive the result.

486
00:25:31,573 --> 00:25:35,694
And being able to control like its max depth and that kind of thing or whatever or where

487
00:25:35,714 --> 00:25:40,295
and how it built up or whatever is just anyone that works with simulation knows it's a little

488
00:25:40,315 --> 00:25:43,676
hard to kind of tame those sometimes and make sure that the results for those are predictable.

489
00:25:45,176 --> 00:25:49,677
Not that that route is impossible, it's just that we opted to drive that a little more

490
00:25:49,717 --> 00:25:50,017
carefully.

491
00:25:53,497 --> 00:25:55,297
Here you can see a capture from the engine as well.

492
00:25:55,357 --> 00:25:57,578
This just shows, like, in the case of trees,

493
00:25:58,038 --> 00:26:00,900
the windward and sort of leeward profiles

494
00:26:01,800 --> 00:26:04,881
that let Jen basically kind of build up a shape

495
00:26:04,921 --> 00:26:08,703
that she liked for a natural-looking snow buildup.

496
00:26:08,903 --> 00:26:09,003
Yeah.

497
00:26:10,700 --> 00:26:12,640
I'm glossing over a number of the details with this.

498
00:26:12,660 --> 00:26:13,760
We're not trying to protect anything

499
00:26:13,800 --> 00:26:17,081
or just not give those details that just didn't all fit,

500
00:26:17,281 --> 00:26:18,781
but we're not trying to hide anything.

501
00:26:18,801 --> 00:26:20,602
So if there's anything that's sort of useful

502
00:26:20,702 --> 00:26:22,702
or whatever, feel free to ask us.

503
00:26:22,722 --> 00:26:24,143
We definitely want to fill in the details.

504
00:26:26,483 --> 00:26:29,024
So we're coming basically to describing things

505
00:26:29,044 --> 00:26:30,264
that we learned by working on this.

506
00:26:30,944 --> 00:26:32,904
The first one is just don't do the uberasset.

507
00:26:33,144 --> 00:26:34,185
It's hard to maintain in debug.

508
00:26:35,345 --> 00:26:37,685
Then what really worked well for us was decomposing.

509
00:26:38,120 --> 00:26:40,041
all our pipeline into multiple stages.

510
00:26:40,101 --> 00:26:41,802
So we have about 15 assets, I believe, or so.

511
00:26:42,762 --> 00:26:44,423
And they got rearranged a few times,

512
00:26:44,463 --> 00:26:46,644
so the modular nature did pay off.

513
00:26:46,684 --> 00:26:48,945
So that allowed us to work in parallel on some of them,

514
00:26:49,445 --> 00:26:52,407
as well as allows us to switch certain parts of the pipeline

515
00:26:52,527 --> 00:26:55,148
out or disable in order to speed up the cook,

516
00:26:55,688 --> 00:26:58,009
and also allows us to achieve some form of polymorphism,

517
00:26:58,149 --> 00:26:59,910
as long as we respect the same inputs and outputs.

518
00:27:00,891 --> 00:27:03,354
Also, rapid prototyping, use Python for that.

519
00:27:03,594 --> 00:27:04,655
So that's basically what we do.

520
00:27:04,715 --> 00:27:08,519
And then we optimize that into either VEX nodes or HDK.

521
00:27:09,040 --> 00:27:11,122
And speaking of HDK, it was extremely useful for us

522
00:27:11,202 --> 00:27:15,327
to actually spin up the Visual Studio, which is basically

523
00:27:15,347 --> 00:27:16,989
attached to an HDK node and debug that,

524
00:27:17,209 --> 00:27:19,351
because that was just an easier way to debug geometry

525
00:27:19,371 --> 00:27:20,513
than do printf debugging.

526
00:27:21,533 --> 00:27:25,956
Yeah, you can put a Python snippet into any of these networks super simply and it's super

527
00:27:25,996 --> 00:27:26,297
powerful.

528
00:27:26,317 --> 00:27:27,237
There's a lot you can do with it.

529
00:27:27,538 --> 00:27:32,661
It's not quite as fast as VEX or HDK, but we've found situations where it can become

530
00:27:32,741 --> 00:27:35,443
unwieldy, especially when you start, if you're shoving like

531
00:27:35,827 --> 00:27:38,009
you know, three pages worth of stuff into a wrangle, you know,

532
00:27:38,029 --> 00:27:42,394
you're getting to a part where I found it just kind of hard to deal with. Um,

533
00:27:42,875 --> 00:27:47,000
this, the solutions to some of that, but for just the best debug ability, um,

534
00:27:47,580 --> 00:27:50,484
Mika and I are both, I think a little bit more comfortable in a kind of a C

535
00:27:50,524 --> 00:27:54,869
world. So that made us, uh, kind of opt for HTK in those cases as well.

536
00:27:59,782 --> 00:28:02,403
So another thing was ability to save the HIP file.

537
00:28:02,523 --> 00:28:04,264
So basically if something went wrong with our system,

538
00:28:04,464 --> 00:28:05,785
our artist would save the HIP file,

539
00:28:05,825 --> 00:28:07,266
and we would open that scene in Houdini

540
00:28:07,306 --> 00:28:08,627
and just inspect that and debug that.

541
00:28:14,004 --> 00:28:15,005
Like we mentioned before,

542
00:28:15,305 --> 00:28:17,567
getting a very Unreal compatible output

543
00:28:18,527 --> 00:28:21,169
ended up really being, I feel like, a good choice.

544
00:28:21,249 --> 00:28:24,932
We did opt for, or did discuss options like not using Landscape

545
00:28:24,972 --> 00:28:26,373
and things like that briefly,

546
00:28:26,893 --> 00:28:30,056
but being able to just resume editing one of these levels

547
00:28:30,096 --> 00:28:33,038
and exactly how, if it was created by hand or whatever,

548
00:28:33,799 --> 00:28:34,519
was super valuable.

549
00:28:35,615 --> 00:28:40,637
You might rephrase some of this as like getting us to kind of make sure we were thinking more Unreal-like in some situations

550
00:28:40,698 --> 00:28:43,959
versus getting Jen to say, to think more Houdini-like.

551
00:28:44,960 --> 00:28:50,363
Most of the Houdini stuff is essentially invisible, or not invisible, it's not a great word,

552
00:28:50,403 --> 00:28:55,206
but we did not ask Jen to sort of get more Houdini-proficient basically in this.

553
00:28:56,796 --> 00:28:59,418
And the last point is being able to input arbitrary types,

554
00:28:59,478 --> 00:29:01,039
not just the geometry back into Houdini

555
00:29:01,059 --> 00:29:02,360
was extremely valuable to us.

556
00:29:03,521 --> 00:29:04,922
It actually allowed us to build assets

557
00:29:04,982 --> 00:29:07,244
that do deterministic reasoning, essentially.

558
00:29:08,244 --> 00:29:11,327
Yeah, so like raw proper classes back and forth is,

559
00:29:11,787 --> 00:29:12,628
yeah, it's really nice.

560
00:29:13,088 --> 00:29:14,809
Whereas the attributes themselves,

561
00:29:14,949 --> 00:29:17,211
if you try and contain those any other way,

562
00:29:17,231 --> 00:29:18,312
it gets real messy, so.

563
00:29:21,474 --> 00:29:22,035
Yeah, thank you.

564
00:29:22,535 --> 00:29:22,715
Thanks.

