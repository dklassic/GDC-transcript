1
00:00:05,870 --> 00:00:06,831
Hello, my name's Alex Fry.

2
00:00:07,792 --> 00:00:09,434
I'm a rendering engineer at Frostbite.

3
00:00:10,374 --> 00:00:12,296
And today I'm here to take you on a bit of our journey

4
00:00:12,676 --> 00:00:16,600
on high dynamic range color grading and TV display support.

5
00:00:19,182 --> 00:00:20,263
This is what I'll be covering today.

6
00:00:21,124 --> 00:00:23,926
Got quite a lot to get through, so I'll go pretty quickly.

7
00:00:24,687 --> 00:00:25,868
This is really the last couple of years,

8
00:00:25,948 --> 00:00:26,609
and it's our journey.

9
00:00:27,169 --> 00:00:29,111
I'll go into a few details where I think it'll be helpful.

10
00:00:29,591 --> 00:00:31,233
And hopefully there'll be some good discussion afterwards.

11
00:00:33,953 --> 00:00:36,135
I'll start with some history terminology, though,

12
00:00:36,215 --> 00:00:37,235
because it'll be helpful.

13
00:00:38,736 --> 00:00:40,677
We'll start with film, as many things do.

14
00:00:41,998 --> 00:00:44,920
So particularly film stock and how it responds to light.

15
00:00:46,340 --> 00:00:48,342
So it has three main parts here.

16
00:00:49,022 --> 00:00:52,164
And the middle section, which is where most of your data

17
00:00:52,204 --> 00:00:55,025
will be, what you expose for, is just characteristically

18
00:00:55,065 --> 00:00:56,206
the straight line region.

19
00:00:56,226 --> 00:00:57,827
That's what it's called.

20
00:00:58,848 --> 00:00:59,928
And this responds quickly to light.

21
00:01:00,947 --> 00:01:03,949
But there are two other parts, the toe, which is low down.

22
00:01:04,229 --> 00:01:05,250
Think of the toe on your body.

23
00:01:06,050 --> 00:01:07,151
And the shoulder, which is high up.

24
00:01:07,251 --> 00:01:08,171
Think of your shoulder on your body.

25
00:01:08,972 --> 00:01:10,633
And these respond much more slowly to light.

26
00:01:11,713 --> 00:01:14,715
So you get a much larger range of values compressed into a

27
00:01:14,755 --> 00:01:16,356
much smaller amount of film stock.

28
00:01:17,116 --> 00:01:19,317
So really, this film stock will capture a very wide range

29
00:01:19,337 --> 00:01:21,078
of light values into a smaller range.

30
00:01:21,819 --> 00:01:23,460
And the toe and shoulder are the range reduction.

31
00:01:24,792 --> 00:01:28,395
You're exposed to the midpoint, and this S shape

32
00:01:28,455 --> 00:01:30,557
gives you a very nice, characteristic, pleasant, and

33
00:01:30,577 --> 00:01:31,858
very familiar look.

34
00:01:33,900 --> 00:01:37,664
Now in games, fully real-time CG, we don't have film to

35
00:01:37,684 --> 00:01:40,026
develop, we have got limited range TVs.

36
00:01:40,807 --> 00:01:42,288
And so we must do similar range reduction.

37
00:01:42,889 --> 00:01:43,610
And that's tone mapping.

38
00:01:44,370 --> 00:01:46,512
That's the process of mapping down this very wide range that

39
00:01:46,532 --> 00:01:48,995
we draw into something much smaller while preserving the

40
00:01:49,015 --> 00:01:49,715
important detail.

41
00:01:50,738 --> 00:01:53,359
And Filmic Tone Mapping does this by emulating the film

42
00:01:53,719 --> 00:01:54,599
characteristic curve.

43
00:01:55,660 --> 00:01:58,641
And just a small point, that when you see many HDR photos

44
00:01:58,981 --> 00:02:01,402
on phone cameras, these are more accurately tone mapped.

45
00:02:03,803 --> 00:02:05,124
And I'm going to use this image quite a lot.

46
00:02:05,924 --> 00:02:07,765
This is a demo level that we've got internally.

47
00:02:08,185 --> 00:02:09,426
And it's got some quite useful parts.

48
00:02:09,506 --> 00:02:10,586
It's got very good contrast.

49
00:02:11,106 --> 00:02:12,367
It's got a very wide dynamic range.

50
00:02:12,787 --> 00:02:14,068
It has a lot of saturated colors.

51
00:02:15,128 --> 00:02:16,609
And it's also suffering from problems,

52
00:02:16,989 --> 00:02:18,770
which I've circled here, particularly

53
00:02:18,810 --> 00:02:19,790
the light and the hologram.

54
00:02:20,371 --> 00:02:21,891
You can see some serious issues with this.

55
00:02:24,212 --> 00:02:26,974
Now, applying four different tone mappers quickly.

56
00:02:27,214 --> 00:02:29,935
I won't labor on this, but the top two are simple tone

57
00:02:29,975 --> 00:02:31,535
mappers, the bottom two are filmic tone mappers.

58
00:02:31,856 --> 00:02:33,116
You won't see a huge amount of difference here,

59
00:02:33,136 --> 00:02:34,297
apart from the bottom left, perhaps,

60
00:02:34,737 --> 00:02:35,657
which has got more contrast.

61
00:02:37,798 --> 00:02:38,358
And color grading.

62
00:02:39,382 --> 00:02:41,104
This is the act of applying a look to your game.

63
00:02:42,064 --> 00:02:43,666
Again, it's got its background in film stock.

64
00:02:44,306 --> 00:02:45,587
For example, film development, you

65
00:02:45,627 --> 00:02:48,810
might choose to skip a process, such as the bleaching stage,

66
00:02:49,150 --> 00:02:50,051
called bleach bypass.

67
00:02:50,752 --> 00:02:51,933
And this would produce a different look,

68
00:02:52,453 --> 00:02:54,154
a very silvered, high-contrast look.

69
00:02:55,035 --> 00:02:56,917
But digitally, of course, we can do a lot more than this.

70
00:02:57,597 --> 00:02:58,698
We can do white balancing.

71
00:02:58,758 --> 00:03:01,140
We can do color replacement, color enhancement,

72
00:03:01,200 --> 00:03:01,821
push them back.

73
00:03:02,561 --> 00:03:03,943
We can do orange and teal if we want.

74
00:03:06,407 --> 00:03:08,409
And yeah, we could do an awful lot more here.

75
00:03:08,429 --> 00:03:09,690
We can fix a lot more in post.

76
00:03:11,332 --> 00:03:11,792
And TVs.

77
00:03:12,813 --> 00:03:15,355
So I'm sure you remember these old, lovely fish bowls.

78
00:03:16,456 --> 00:03:18,157
And many people actually still keep them around.

79
00:03:19,779 --> 00:03:23,582
These have a particular narrow dynamic range, around 0.1

80
00:03:23,902 --> 00:03:27,345
to 100 nits, where a nit is another name for candela

81
00:03:27,385 --> 00:03:30,568
per meter square or unit of energy emitted per area.

82
00:03:31,555 --> 00:03:33,556
And these screens have a nonlinear response to light,

83
00:03:33,736 --> 00:03:34,617
at its input, sorry.

84
00:03:35,497 --> 00:03:37,978
This is called the EOTF, or the Electro-Optical Transfer

85
00:03:38,018 --> 00:03:40,439
Function, also known as the gamma curve.

86
00:03:41,719 --> 00:03:44,600
And a standard was introduced in the mid-'90s to bring

87
00:03:44,660 --> 00:03:49,142
standardization to all of these TVs, and assets that are

88
00:03:49,182 --> 00:03:49,922
made for these TVs.

89
00:03:50,242 --> 00:03:52,503
And that standard and the display capability were very

90
00:03:52,543 --> 00:03:53,224
closely aligned.

91
00:03:53,244 --> 00:03:55,344
And we still use this standard today, 20 years later.

92
00:03:57,145 --> 00:03:57,445
However.

93
00:03:58,285 --> 00:04:00,487
Modern TVs are far more capable than this.

94
00:04:01,128 --> 00:04:04,210
They'll go as dark as 0.01 nits and go above 300.

95
00:04:04,471 --> 00:04:06,612
HDR TVs will go way, way higher than this.

96
00:04:07,033 --> 00:04:09,134
And this means that the hardware is far more capable

97
00:04:09,154 --> 00:04:10,235
than the standard that we're using.

98
00:04:10,856 --> 00:04:12,858
And also, LCDs respond differently to CRTs.

99
00:04:13,378 --> 00:04:15,239
But we're still using 709 ISRGB.

100
00:04:15,980 --> 00:04:18,842
And so these TVs will take our narrow range signal, and they

101
00:04:18,863 --> 00:04:19,423
will modify it.

102
00:04:19,483 --> 00:04:21,705
And they will expand it to best show off that TV.

103
00:04:22,065 --> 00:04:23,827
And we have no control over this at all.

104
00:04:24,607 --> 00:04:27,068
We can ask people to calibrate, but not many will.

105
00:04:27,848 --> 00:04:30,169
And this tends to end up with too much contrast and also

106
00:04:30,189 --> 00:04:30,969
too much saturation.

107
00:04:30,989 --> 00:04:33,009
I'm sure you're familiar with the very orangey skin tones of

108
00:04:33,049 --> 00:04:33,809
store demo modes.

109
00:04:40,391 --> 00:04:42,932
Now with that, let's go over our legacy pipeline.

110
00:04:45,652 --> 00:04:47,313
This is a simplification of what we did.

111
00:04:48,398 --> 00:04:50,340
So we'd render our scene in full HDR

112
00:04:51,161 --> 00:04:52,463
and perform all of our post-processing,

113
00:04:52,783 --> 00:04:55,046
bloom, motion, blur, et cetera, in HDR as well.

114
00:04:55,947 --> 00:04:58,389
Then we would apply a time map, convert to sRGB,

115
00:04:58,730 --> 00:05:01,613
apply a color grade, draw the UI on top, and scan it out.

116
00:05:02,374 --> 00:05:03,936
This is pretty common,

117
00:05:04,557 --> 00:05:05,858
and I'd imagine you're familiar with this.

118
00:05:07,340 --> 00:05:08,101
Digging in a little bit.

119
00:05:09,390 --> 00:05:12,433
In these two parts, the tone map is chosen by the artist

120
00:05:12,473 --> 00:05:13,674
from a fixed set of drop downs.

121
00:05:14,054 --> 00:05:15,315
Usually it would be a filmic tone map.

122
00:05:16,176 --> 00:05:18,377
And these tone maps are 1D curves, which we apply

123
00:05:18,418 --> 00:05:19,558
independently to red, green, and blue.

124
00:05:20,299 --> 00:05:22,140
We then do the linear to sRGB, and we clip the

125
00:05:22,180 --> 00:05:23,121
results to not to 1.

126
00:05:23,642 --> 00:05:25,843
And that's because we then throw it into a lookup table

127
00:05:26,024 --> 00:05:26,764
to do color grading.

128
00:05:27,605 --> 00:05:29,426
And this is also a very standard process.

129
00:05:30,147 --> 00:05:32,328
Different ways of doing it, but we would typically

130
00:05:32,388 --> 00:05:35,110
load a screenshot, load an identity color cube

131
00:05:35,130 --> 00:05:38,072
into Photoshop as a layer, apply various look transformations

132
00:05:38,112 --> 00:05:39,973
or whatever else, crop off that layer,

133
00:05:40,314 --> 00:05:42,475
save it out as a color cube, and then index that

134
00:05:42,495 --> 00:05:43,616
by red, green, and blue at runtime.

135
00:05:44,397 --> 00:05:46,558
The new color would be what was ever in the LUT.

136
00:05:47,078 --> 00:05:47,919
And it's incredibly powerful.

137
00:05:47,939 --> 00:05:49,120
You can do an awful lot of different things,

138
00:05:49,160 --> 00:05:50,301
including color replacement.

139
00:05:51,161 --> 00:05:52,002
So yeah, we liked it.

140
00:05:54,664 --> 00:05:55,865
There were some troubles with all of this, though.

141
00:05:57,042 --> 00:05:59,144
Now the 1D curve, when applied separately

142
00:05:59,184 --> 00:06:01,446
to red, green, and blue, does actually cause some hue shifts.

143
00:06:01,926 --> 00:06:03,808
Because we don't have a completely linear midsection.

144
00:06:03,888 --> 00:06:05,249
And I've got some screenshots of this in a bit.

145
00:06:06,330 --> 00:06:08,611
And also, as you get near the top of the shoulder,

146
00:06:09,272 --> 00:06:12,434
the highlights really do hue shift an awful lot,

147
00:06:12,515 --> 00:06:13,755
especially as the channels clip.

148
00:06:14,316 --> 00:06:15,337
This is because you fundamentally

149
00:06:15,377 --> 00:06:16,398
change the ratios of light.

150
00:06:17,138 --> 00:06:20,101
Because when your red channel, say, slams into the clip point

151
00:06:20,561 --> 00:06:22,683
and you're overexposing, it can't go any further.

152
00:06:22,723 --> 00:06:23,283
But green can.

153
00:06:23,703 --> 00:06:24,564
So you change the ratios.

154
00:06:24,984 --> 00:06:25,785
And that changes the color.

155
00:06:26,860 --> 00:06:28,442
We also use a filmic tone map typically.

156
00:06:28,702 --> 00:06:31,224
And this applies a look, as you saw from the four-point

157
00:06:31,885 --> 00:06:32,606
screenshots earlier.

158
00:06:33,546 --> 00:06:36,709
And this look is characteristic, but it's also

159
00:06:36,749 --> 00:06:38,311
in a different place to our grading workflow.

160
00:06:38,331 --> 00:06:40,152
So there's two workflows going on to do the same thing here.

161
00:06:40,873 --> 00:06:43,876
It's also not easy, for us at least, in this particular code

162
00:06:44,296 --> 00:06:46,158
to author new tone maps, because it's not really data

163
00:06:46,178 --> 00:06:47,619
driven, only selectable.

164
00:06:49,514 --> 00:06:50,654
And when you're looking at the grading part,

165
00:06:51,414 --> 00:06:52,415
we use Photoshop to do this,

166
00:06:52,595 --> 00:06:54,355
but Photoshop's not really a grading package.

167
00:06:54,555 --> 00:06:57,056
So we have a non-optimal workflow for color grading.

168
00:06:57,076 --> 00:06:58,016
It's a very powerful package,

169
00:06:58,056 --> 00:06:59,416
but it's not really a grading package.

170
00:06:59,936 --> 00:07:01,677
And our LUTs are typically eight bits.

171
00:07:02,437 --> 00:07:04,277
And this would cause irrecoverable quantization,

172
00:07:04,377 --> 00:07:05,377
MAC banding, hue shifts,

173
00:07:05,397 --> 00:07:08,238
and here's a very, very early shot of Faith's arm

174
00:07:08,278 --> 00:07:10,038
from Mirror's Edge, and you can hopefully see

175
00:07:10,418 --> 00:07:11,699
some of the MAC bands going down there.

176
00:07:11,939 --> 00:07:13,339
And all this was was a bit of contrast.

177
00:07:14,488 --> 00:07:16,530
Also, we have no access in this color grade to values greater

178
00:07:16,550 --> 00:07:17,691
than one because we clicked them earlier.

179
00:07:18,091 --> 00:07:21,013
So performing any sort of exposure change or grading the

180
00:07:21,033 --> 00:07:21,734
highlights is really hard.

181
00:07:23,797 --> 00:07:26,939
And also, when you think about it, the tone map combined

182
00:07:26,959 --> 00:07:30,262
with the sRGB transformation are a LUT distribution

183
00:07:30,322 --> 00:07:31,903
function from linear light to grading space.

184
00:07:32,784 --> 00:07:34,825
And that's great for viewing, but it's not necessarily

185
00:07:34,905 --> 00:07:37,908
optimal for grading, because you would get a particular

186
00:07:37,928 --> 00:07:40,049
distribution within the lookup table, and that

187
00:07:40,069 --> 00:07:41,931
distribution would vary depending on choice of tone

188
00:07:41,951 --> 00:07:44,793
map, which also means that if a game has produced a really

189
00:07:44,833 --> 00:07:47,535
great look, they can't share it with another game that's

190
00:07:47,575 --> 00:07:48,876
using a different tone map because it's a different

191
00:07:48,916 --> 00:07:49,857
function, so it looks different.

192
00:07:51,970 --> 00:07:54,392
Also, the legacy pipeline was totally hard-coded to SDR.

193
00:07:54,892 --> 00:07:56,433
And we wanted to support HDR TVs.

194
00:07:56,453 --> 00:07:58,554
We wanted to get access to that high bit depth, that

195
00:07:58,574 --> 00:07:59,715
dynamic range, that extra color.

196
00:08:00,195 --> 00:08:02,637
We really wanted to give the content creators control over

197
00:08:02,657 --> 00:08:05,038
this TV, take the creative control back from the TV

198
00:08:05,058 --> 00:08:08,120
manufacturers, so we could actually use this power

199
00:08:08,380 --> 00:08:08,880
ourselves.

200
00:08:10,521 --> 00:08:11,742
So there's a few different ways to do this.

201
00:08:12,502 --> 00:08:15,264
And the simplest approach, and one that I would suspect that

202
00:08:15,544 --> 00:08:16,445
several people have already done.

203
00:08:17,927 --> 00:08:19,929
is to just try and look at this tone map curve

204
00:08:19,950 --> 00:08:21,651
and see that it's using range compression.

205
00:08:21,711 --> 00:08:23,874
So why can't we just reverse the range compression

206
00:08:23,894 --> 00:08:24,815
and get the values back?

207
00:08:24,895 --> 00:08:28,399
So yeah, get the shoulder, undo the shoulder,

208
00:08:28,419 --> 00:08:31,282
recover the original values, and profit.

209
00:08:31,842 --> 00:08:32,503
Sounds simple enough.

210
00:08:33,985 --> 00:08:36,627
And it is simple enough, but it has some trouble.

211
00:08:37,611 --> 00:08:39,152
So firstly, if you're using 8-bit,

212
00:08:39,692 --> 00:08:41,193
then there's not enough precision to reverse that,

213
00:08:41,373 --> 00:08:41,853
for a start.

214
00:08:42,533 --> 00:08:44,314
If you've got multiple different tone map curves,

215
00:08:44,354 --> 00:08:45,794
then they all need to be reversible,

216
00:08:45,855 --> 00:08:46,975
and that's harder for some than others.

217
00:08:47,655 --> 00:08:49,616
You can only recover a limited range,

218
00:08:50,096 --> 00:08:54,078
because those shoulders might not be infinite compression.

219
00:08:54,098 --> 00:08:55,719
They've probably got a white point somewhere.

220
00:08:56,059 --> 00:08:57,920
For example, the Frostbite filmic tone map clips

221
00:08:57,940 --> 00:08:58,900
at about 500 nits.

222
00:08:59,760 --> 00:09:02,422
But really, the order of operations aren't correct.

223
00:09:02,462 --> 00:09:03,482
And if you look at this diagram,

224
00:09:03,502 --> 00:09:04,823
the yellow boxes are the troublesome ones.

225
00:09:05,829 --> 00:09:08,131
So we would do the tone map, the sRGB conversion, then

226
00:09:08,171 --> 00:09:09,032
the grading, and the UI.

227
00:09:09,713 --> 00:09:13,937
Then when we reverse the tone map, we also reverse the UI,

228
00:09:14,518 --> 00:09:15,719
which wasn't tone mapped.

229
00:09:16,319 --> 00:09:18,962
And we reverse the grading, which wasn't tone mapped.

230
00:09:19,262 --> 00:09:21,644
So we've applied a transformation that's in the

231
00:09:21,684 --> 00:09:22,145
wrong place.

232
00:09:22,645 --> 00:09:23,746
And this will cause problems as well.

233
00:09:25,867 --> 00:09:26,788
But can it be made good enough?

234
00:09:26,948 --> 00:09:28,909
Absolutely, yes, it can be made good enough,

235
00:09:29,529 --> 00:09:30,730
especially if you've got a game out in the world

236
00:09:30,750 --> 00:09:31,411
and want to patch it.

237
00:09:32,111 --> 00:09:33,352
You could tweak the time map curves,

238
00:09:33,412 --> 00:09:34,532
change the distribution function,

239
00:09:34,592 --> 00:09:36,313
capture a bit more range, compute

240
00:09:36,333 --> 00:09:39,415
your analytical mappings, use 10-bit rather than 8-bit,

241
00:09:39,735 --> 00:09:41,036
re-author any grades that need to be done.

242
00:09:41,817 --> 00:09:44,018
You could back away from extreme color grading

243
00:09:44,979 --> 00:09:46,139
to avoid the reverse problem.

244
00:09:46,459 --> 00:09:47,880
And you could scale the UI a little bit

245
00:09:47,920 --> 00:09:49,081
to avoid the shoulder region.

246
00:09:49,962 --> 00:09:52,823
It can be made to work, but we decided not to do that.

247
00:09:54,808 --> 00:09:56,589
We went clean sheet, and I'm very lucky

248
00:09:56,609 --> 00:09:57,749
that we got to do this.

249
00:09:58,489 --> 00:10:01,651
So what we do is we transform our linear data after all

250
00:10:01,671 --> 00:10:04,512
post-processing into a dedicated space for grading.

251
00:10:05,052 --> 00:10:06,373
We'll do an HDR grading LUT.

252
00:10:07,335 --> 00:10:08,936
We then draw our UI to an offscreen buffer,

253
00:10:08,976 --> 00:10:10,537
and it's essential to use pre-multiplied alpha

254
00:10:10,577 --> 00:10:11,057
if you do this.

255
00:10:11,798 --> 00:10:14,840
Then we'll run a effectively kind of a scan-out shader,

256
00:10:15,220 --> 00:10:16,641
which is the last pass in the frame, where

257
00:10:16,681 --> 00:10:19,582
we take the HDR data, decode it, take the UI, decode that,

258
00:10:20,103 --> 00:10:22,564
composite them all together, and then tone map and encode

259
00:10:22,584 --> 00:10:23,404
for our target display.

260
00:10:24,045 --> 00:10:25,646
And that means that we can then target pretty much

261
00:10:25,686 --> 00:10:26,766
any standard that's out there.

262
00:10:26,786 --> 00:10:29,328
You could tone map for SDR, or you could tone map to HDR,

263
00:10:30,148 --> 00:10:31,389
or any new standard that comes along.

264
00:10:33,019 --> 00:10:34,100
And why did we do it with CleanSheet?

265
00:10:34,160 --> 00:10:36,402
Well, we really wanted to improve these troublesome

266
00:10:36,422 --> 00:10:37,042
workflow issues.

267
00:10:37,743 --> 00:10:39,464
And so by doing CleanSheet, we got to do that.

268
00:10:40,265 --> 00:10:42,787
It means that we could also do a single grade for any TV

269
00:10:42,807 --> 00:10:43,367
that we support.

270
00:10:43,927 --> 00:10:47,050
So we haven't got a horrible workflow of having to regrade

271
00:10:47,230 --> 00:10:48,451
every single different type of TV.

272
00:10:48,471 --> 00:10:51,874
We're mastering in a single place and then

273
00:10:52,634 --> 00:10:53,575
mapping out to the end.

274
00:10:54,355 --> 00:10:55,516
And if we're going to redo all the grades,

275
00:10:55,536 --> 00:10:56,717
we may as well redo them really well

276
00:10:57,177 --> 00:10:58,337
and not have any restrictions there

277
00:10:58,598 --> 00:10:59,938
and move the workflows into the same place.

278
00:11:00,739 --> 00:11:03,280
Also, by isolating the UI, that gets us

279
00:11:03,340 --> 00:11:04,461
around a couple of problems.

280
00:11:05,281 --> 00:11:07,862
Our UI tech has got a lot of legacy screens.

281
00:11:08,583 --> 00:11:09,963
Like some games, such as sports games,

282
00:11:10,003 --> 00:11:11,344
have a very large number of screens.

283
00:11:11,384 --> 00:11:13,545
And having to redo those to tweak them to look right

284
00:11:13,965 --> 00:11:15,266
was not something we wanted to entertain.

285
00:11:15,306 --> 00:11:16,907
So just putting in a different buffer made sense.

286
00:11:17,747 --> 00:11:20,529
We also wanted a really future-proof HDR implementation.

287
00:11:21,229 --> 00:11:23,690
Because the HDR spec is bigger than the range of TVs that

288
00:11:23,730 --> 00:11:27,052
exist, then by targeting the full spec, your game looks

289
00:11:27,072 --> 00:11:28,773
better and better as you buy a better and better TV.

290
00:11:30,834 --> 00:11:33,035
And we make these grades in DaVinci Resolve.

291
00:11:34,236 --> 00:11:36,057
And I've looked at the wrong slide.

292
00:11:36,997 --> 00:11:37,557
How do we do this?

293
00:11:39,240 --> 00:11:42,141
We wanted to find a nice distribution function for our color grades.

294
00:11:42,961 --> 00:11:44,482
And we did look at a few different ideas for this.

295
00:11:44,502 --> 00:11:46,723
We were really looking at log space because it made sense,

296
00:11:46,763 --> 00:11:49,584
especially the Sony S-log curves seemed to look really quite nice.

297
00:11:50,304 --> 00:11:56,087
But we ended up using ST2084, or PQ, or the perceptual quantizer.

298
00:11:57,440 --> 00:12:00,842
And this is a function designed by Dolby

299
00:12:00,862 --> 00:12:01,563
for high dynamic range.

300
00:12:02,263 --> 00:12:05,945
And it ensures that every single different value in that

301
00:12:06,005 --> 00:12:08,086
ramp is perceptually spaced from the last.

302
00:12:08,106 --> 00:12:11,228
And that means it's a perfect grading space, because every

303
00:12:11,248 --> 00:12:12,649
single entry in that LUT is perceptually

304
00:12:12,669 --> 00:12:13,309
spaced from the last.

305
00:12:13,609 --> 00:12:16,091
So the artist has control over that image from the darkest

306
00:12:16,111 --> 00:12:17,211
shadow to the brightest highlight.

307
00:12:19,132 --> 00:12:22,174
We've also gone one size larger on the LUT, 33 by 33

308
00:12:22,574 --> 00:12:25,756
by 33, and this is just to align us with industry

309
00:12:25,776 --> 00:12:27,016
standard grading tools, which do the same.

310
00:12:28,472 --> 00:12:31,253
Now this single distribution function, apart from being nice and accurate,

311
00:12:31,753 --> 00:12:35,074
also means that we've unified our space so that we can share LUTs across games.

312
00:12:35,614 --> 00:12:38,035
And that means anyone can build a look and share it with another team,

313
00:12:38,115 --> 00:12:40,176
and that means we can build a look library or a film stock library,

314
00:12:40,196 --> 00:12:40,796
and that's really great.

315
00:12:40,816 --> 00:12:43,657
And this is where I'm going to talk about the winch result.

316
00:12:44,757 --> 00:12:48,039
So we decided to use this industry standard grading tool.

317
00:12:49,239 --> 00:12:51,840
We built some LUTs in there, view LUTs,

318
00:12:52,580 --> 00:12:54,521
to make sure that it looked exactly as the game would look.

319
00:12:54,681 --> 00:12:55,821
And that means it's a WYSIWYG workflow.

320
00:12:56,983 --> 00:13:00,204
And we did think about trying to emulate tools like Resolve

321
00:13:00,585 --> 00:13:01,065
in the engine.

322
00:13:01,885 --> 00:13:02,986
But actually, it's a lot of work.

323
00:13:03,666 --> 00:13:05,307
And we didn't really have the need or the time

324
00:13:05,367 --> 00:13:06,447
to try and reinvent this.

325
00:13:06,567 --> 00:13:08,448
And we definitely didn't want to have to keep maintaining it,

326
00:13:08,488 --> 00:13:09,769
because these packages keep evolving.

327
00:13:09,809 --> 00:13:11,570
And I didn't really want to commit myself

328
00:13:11,610 --> 00:13:13,831
to have to reverse engineer this and then maintain it forever.

329
00:13:14,831 --> 00:13:16,652
Also, using a standard package reduces friction

330
00:13:16,672 --> 00:13:18,093
for hiring contractors, which is really

331
00:13:18,133 --> 00:13:19,833
helpful for getting, say, film graders in to do

332
00:13:19,853 --> 00:13:20,634
a really nice pass.

333
00:13:21,514 --> 00:13:23,515
And also, Resolve, in its basic version, is free.

334
00:13:24,820 --> 00:13:27,622
However, I will say that there is a really great workflow

335
00:13:27,662 --> 00:13:29,803
improvement here in Resolve, which is the Resolve Live mode.

336
00:13:30,604 --> 00:13:32,885
And in this mode, you buy a capture card, so it's not free,

337
00:13:33,365 --> 00:13:35,446
and you pipe your game through the package.

338
00:13:36,067 --> 00:13:37,968
So you play the game through the grading package,

339
00:13:38,048 --> 00:13:38,928
so you live grade.

340
00:13:39,749 --> 00:13:42,090
This is almost analogous to putting all your grading tools

341
00:13:42,130 --> 00:13:43,251
back into the engine at runtime.

342
00:13:43,471 --> 00:13:44,672
It's still runtime, it's still live,

343
00:13:45,012 --> 00:13:47,473
but it's kind of inverted, and it's really nice.

344
00:13:51,135 --> 00:13:54,277
So tone mapping, or display mapping in our case.

345
00:13:55,715 --> 00:13:58,016
We've somewhat decided to call it a different name.

346
00:13:58,597 --> 00:13:59,997
It is still Tone Mapping, but we've changed

347
00:14:00,017 --> 00:14:00,598
the name a little bit.

348
00:14:01,198 --> 00:14:03,199
So in our case, the HDR version is now the reference

349
00:14:03,239 --> 00:14:05,440
version, and we've moved the Tone Map right to the last

350
00:14:05,460 --> 00:14:06,160
stage of the pipeline.

351
00:14:07,041 --> 00:14:09,162
And we've called it Display Mapping because this Tone Map

352
00:14:09,242 --> 00:14:10,663
is different depending on the TV.

353
00:14:11,543 --> 00:14:13,144
So for a standard dynamic range, we do an

354
00:14:13,164 --> 00:14:13,864
aggressive Tone Map.

355
00:14:14,364 --> 00:14:16,625
In HDR, it's less aggressive, but it's still varying

356
00:14:16,665 --> 00:14:17,946
depending on the TV capability.

357
00:14:18,346 --> 00:14:20,687
So a low-end HDR TV would be more aggressive, and a

358
00:14:20,867 --> 00:14:22,468
high-end HDR TV would be less aggressive.

359
00:14:23,343 --> 00:14:24,444
And it's tuned for each case.

360
00:14:24,464 --> 00:14:26,748
It's also not just a tone map curve.

361
00:14:27,248 --> 00:14:28,190
It's also re-exposure.

362
00:14:29,111 --> 00:14:32,015
Hence, because it's per display, it's display mapping for us.

363
00:14:33,357 --> 00:14:35,901
And the main challenge of this was to make sure

364
00:14:35,921 --> 00:14:38,364
that it did scale across a large range of different TVs

365
00:14:39,005 --> 00:14:40,126
and achieved a similar look.

366
00:14:41,307 --> 00:14:45,430
Also, we really wanted to get away from the hard-coded film

367
00:14:45,470 --> 00:14:45,710
look.

368
00:14:46,411 --> 00:14:47,471
So we didn't want a toe.

369
00:14:48,072 --> 00:14:49,273
We didn't want any contrast changes.

370
00:14:49,313 --> 00:14:50,353
We didn't want any hue shifts.

371
00:14:50,373 --> 00:14:51,954
And we didn't want any sort of built-in look.

372
00:14:51,994 --> 00:14:54,376
So essentially, we wanted the most neutral map

373
00:14:54,396 --> 00:14:55,297
that we possibly could get.

374
00:14:58,899 --> 00:15:00,300
And if I go back to this example image,

375
00:15:01,200 --> 00:15:04,082
focus again on the two troublesome areas.

376
00:15:04,102 --> 00:15:06,404
And I'll go back and forth between off and on.

377
00:15:09,904 --> 00:15:11,626
And if I just highlight those two side by side

378
00:15:11,666 --> 00:15:12,586
and leave it there for a second,

379
00:15:13,607 --> 00:15:15,549
you can see that the horrible hue shifts

380
00:15:15,569 --> 00:15:17,430
that were there in the light on the base,

381
00:15:18,011 --> 00:15:18,531
well, that's gone.

382
00:15:18,571 --> 00:15:20,312
That was an orange light, and it's now an orange light.

383
00:15:21,073 --> 00:15:23,335
And in the hologram, that was a nice blue light,

384
00:15:23,375 --> 00:15:24,136
but it had gone cyan.

385
00:15:24,676 --> 00:15:25,817
But now it's actually a blue light.

386
00:15:26,898 --> 00:15:28,019
So this is just the shoulder.

387
00:15:28,799 --> 00:15:30,421
The rest of the image is completely unchanged.

388
00:15:30,821 --> 00:15:32,182
If the artist wanted to put a film look,

389
00:15:32,242 --> 00:15:34,144
a toe, some contrast, that's entirely up to them,

390
00:15:34,164 --> 00:15:35,325
but we don't want to force that on them.

391
00:15:38,052 --> 00:15:38,853
And how do we do this?

392
00:15:39,574 --> 00:15:43,459
So rather than working in 1D and apply that same curve

393
00:15:43,499 --> 00:15:45,402
to red, green, and blue, we split it

394
00:15:45,422 --> 00:15:46,343
to work in chroma luma.

395
00:15:47,185 --> 00:15:49,508
And we apply the shoulder only to the top end of the luma.

396
00:15:50,049 --> 00:15:51,671
We then progressively desaturate chroma

397
00:15:51,691 --> 00:15:52,392
depending on the shoulder.

398
00:15:52,432 --> 00:15:53,333
It's not at the same rate.

399
00:15:54,269 --> 00:15:56,310
And we're using a relatively new working space for this,

400
00:15:56,951 --> 00:15:57,832
ICTCP.

401
00:15:58,393 --> 00:16:00,655
And this was developed by Dolby for the high dynamic range

402
00:16:00,675 --> 00:16:01,055
TVs.

403
00:16:01,496 --> 00:16:03,698
And it's got one particularly nice property, which is that

404
00:16:03,778 --> 00:16:07,041
the chroma part follows lines of perceptually constant hue.

405
00:16:07,461 --> 00:16:09,363
And that essentially means that as you scale chroma in

406
00:16:09,383 --> 00:16:11,906
and out from the center, it does not change hue.

407
00:16:12,026 --> 00:16:13,367
It only changes saturation.

408
00:16:13,727 --> 00:16:15,809
And that's a really nice property for this particular

409
00:16:15,849 --> 00:16:16,190
algorithm.

410
00:16:17,030 --> 00:16:20,791
We then did the non-PBR thing of totally tuning it by eye

411
00:16:20,851 --> 00:16:22,171
in a completely ad hoc manner.

412
00:16:23,211 --> 00:16:24,852
Lots of different screenshots, lots of different games,

413
00:16:25,112 --> 00:16:26,092
lots of different situations.

414
00:16:26,672 --> 00:16:29,573
And yet it's not really PBR, but this is really very perceptual.

415
00:16:29,853 --> 00:16:32,193
So it's right at the end of the pipeline, and we figured that would be okay.

416
00:16:32,433 --> 00:16:33,473
It's perception, not math.

417
00:16:34,814 --> 00:16:36,234
And I've got some examples side by side.

418
00:16:36,954 --> 00:16:37,894
These are split screens.

419
00:16:38,674 --> 00:16:42,595
So on the left of each image is the old Frostbite filmic tone map,

420
00:16:42,955 --> 00:16:44,075
and on the right is the display map.

421
00:16:45,113 --> 00:16:46,893
And I've highlighted two parts of this image.

422
00:16:47,333 --> 00:16:49,814
Where you see that the sky, which was going cyan, like the

423
00:16:49,854 --> 00:16:52,234
hologram was, now in the display map, it's actually

424
00:16:52,254 --> 00:16:53,155
just preserving that hue.

425
00:16:53,435 --> 00:16:55,455
It's desaturating as it hits the top, but

426
00:16:55,475 --> 00:16:56,155
it's preserving the hue.

427
00:16:56,576 --> 00:16:57,496
And the same is true on the right.

428
00:16:57,536 --> 00:16:59,856
But on the floor, you can just see the wood color.

429
00:17:00,196 --> 00:17:02,117
That's subtly changing color on the left, but on the right,

430
00:17:02,177 --> 00:17:02,457
it's not.

431
00:17:03,297 --> 00:17:04,857
But I've got some more extreme examples here.

432
00:17:06,978 --> 00:17:09,639
I'd like to particularly highlight this beige sofa.

433
00:17:10,959 --> 00:17:13,599
And hopefully, you can see the subtle difference down that

434
00:17:13,659 --> 00:17:14,160
split screen.

435
00:17:15,735 --> 00:17:17,436
So I mentioned that we got these hue shifts.

436
00:17:18,196 --> 00:17:22,099
And we got hue shifts in the mid-tones, very, very subtle

437
00:17:22,179 --> 00:17:25,841
hue shifts in the mid-tones because we don't have a true

438
00:17:25,941 --> 00:17:27,362
linear midsection to our tone map.

439
00:17:27,883 --> 00:17:29,844
And of course, as your RGB values go up and down this

440
00:17:29,904 --> 00:17:32,305
curve, they move closer together and further apart.

441
00:17:32,325 --> 00:17:33,806
So we change the ratios between the channels.

442
00:17:35,027 --> 00:17:37,869
So this beige of the sofa that's meant to be brown is

443
00:17:37,949 --> 00:17:39,350
actually kind of a gray green.

444
00:17:40,584 --> 00:17:42,185
And it turns out that once we'd done this,

445
00:17:43,006 --> 00:17:46,128
our artists had been complaining, bitterly complaining,

446
00:17:46,168 --> 00:17:51,792
for years about this sort of unknown and bizarre hue shift.

447
00:17:51,832 --> 00:17:53,073
And they couldn't really explain it,

448
00:17:53,113 --> 00:17:54,134
didn't know why it was happening.

449
00:17:54,855 --> 00:17:56,116
But they were fixing it in post,

450
00:17:56,136 --> 00:17:57,337
they were color grading it out.

451
00:17:57,917 --> 00:17:59,358
And it all turns out it's because of this

452
00:17:59,438 --> 00:18:01,600
slightly non-linear midsection where we're fundamentally

453
00:18:01,640 --> 00:18:03,821
changing the color channel ratios, we're changing hue.

454
00:18:04,642 --> 00:18:05,523
So now with the display mapper,

455
00:18:05,543 --> 00:18:07,024
we've actually recovered the original color,

456
00:18:07,264 --> 00:18:08,945
and we're not getting this, and that's a wonderful thing.

457
00:18:09,960 --> 00:18:11,642
The most extreme example, though, is perhaps this one

458
00:18:11,682 --> 00:18:15,265
on the right-hand side, which is your classic game sunset

459
00:18:15,305 --> 00:18:15,526
look.

460
00:18:16,847 --> 00:18:19,509
That's meant to be a very bright orange light.

461
00:18:20,110 --> 00:18:21,231
But of course, in this situation,

462
00:18:21,271 --> 00:18:22,792
the red channel's crept up, hit the shoulder,

463
00:18:22,813 --> 00:18:23,793
and then clipped completely.

464
00:18:24,434 --> 00:18:26,276
And the green channel is being boosted and boosted.

465
00:18:26,336 --> 00:18:29,098
So of course, we go from an orange to a yellow.

466
00:18:30,004 --> 00:18:32,405
And rather unfortunately, once you see this,

467
00:18:32,885 --> 00:18:34,306
you can't really unsee it.

468
00:18:35,026 --> 00:18:37,707
So next time you get a sunset, look at it with your eye,

469
00:18:37,767 --> 00:18:38,728
not actually at the sun.

470
00:18:39,108 --> 00:18:41,149
Then take a camera picture with your phone or whatever,

471
00:18:41,549 --> 00:18:42,290
and you'll see this.

472
00:18:42,550 --> 00:18:44,931
It is everywhere, and we wanted to get away from it.

473
00:18:47,072 --> 00:18:50,214
So we were feeling pretty pleased at this point.

474
00:18:51,054 --> 00:18:52,295
And thinking, yep, it's all going well.

475
00:18:52,875 --> 00:18:53,475
Plane sailing.

476
00:18:53,795 --> 00:18:54,356
Yeah, of course.

477
00:18:54,596 --> 00:18:55,856
Of course it wasn't plane sailing.

478
00:18:57,649 --> 00:18:59,951
So if you recall the SDR spec, which is roughly 0.1 to 100

479
00:19:00,051 --> 00:19:02,553
nits, and the TVs are more capable, and they do

480
00:19:02,593 --> 00:19:03,414
over-brighten everything.

481
00:19:04,394 --> 00:19:06,396
Actually, that 100-nit peak is not going to be 100 nits.

482
00:19:07,216 --> 00:19:08,958
It's probably more like 200 to perhaps 400.

483
00:19:09,018 --> 00:19:12,020
That's two to four times brighter.

484
00:19:12,040 --> 00:19:20,527
HDR TVs, though, with this new standard, they largely do

485
00:19:20,547 --> 00:19:21,047
what they're told.

486
00:19:21,067 --> 00:19:23,289
So if you ask for 100 nits, you're going to get 100 nits.

487
00:19:24,780 --> 00:19:28,664
So in this situation, when you put an SDR TV next to an HDR TV with the same content,

488
00:19:29,024 --> 00:19:32,367
the HDR TV looks darker, and it looks worse.

489
00:19:33,328 --> 00:19:34,289
Well, that's not ideal.

490
00:19:35,570 --> 00:19:36,951
So how do we fix this?

491
00:19:37,992 --> 00:19:42,697
Well, we chose the effort onto making the HDR reference,

492
00:19:43,378 --> 00:19:45,319
and so we chose to expose for HDR.

493
00:19:46,060 --> 00:19:46,140
And...

494
00:19:47,339 --> 00:19:49,439
Working in HDR, there's a lot of latitude, a lot of range

495
00:19:49,520 --> 00:19:50,720
to fix things in post.

496
00:19:51,260 --> 00:19:54,462
And our SDR display mapper underexposes the SDR version.

497
00:19:55,162 --> 00:19:57,483
So we'll master for HDR, make it look good in HDR.

498
00:19:58,424 --> 00:19:59,364
And then we'll underexpose it.

499
00:20:00,125 --> 00:20:02,065
And we'll underexpose it so that when that SDR TV

500
00:20:02,145 --> 00:20:04,747
overbrightens it again, it recovers the original range.

501
00:20:04,767 --> 00:20:08,048
And that's kind of a pseudo-HDR on SDR look.

502
00:20:08,388 --> 00:20:10,830
It's not correct, because we can't predict exactly how the

503
00:20:10,850 --> 00:20:11,830
TV's going to overbrighten.

504
00:20:12,210 --> 00:20:13,291
But it does look pretty good.

505
00:20:13,811 --> 00:20:14,711
It does kind of work.

506
00:20:15,332 --> 00:20:16,172
So that's what we ended up with.

507
00:20:17,531 --> 00:20:20,733
And in Engine, the artist, by the way, can set this value.

508
00:20:21,473 --> 00:20:22,234
And that means if they're working

509
00:20:22,254 --> 00:20:24,595
on a calibrated monitor, they can dial in the correct number

510
00:20:24,655 --> 00:20:25,776
and it will look absolutely right.

511
00:20:27,537 --> 00:20:28,818
So is it now plain sailing?

512
00:20:30,018 --> 00:20:31,019
No, categorically not.

513
00:20:31,679 --> 00:20:34,221
This display mapper is a hue-preserving shoulder.

514
00:20:34,821 --> 00:20:37,362
And that really faithfully reproduces the original hue.

515
00:20:38,342 --> 00:20:41,145
But that means we were seeing that existing legacy assets

516
00:20:41,165 --> 00:20:41,926
were changing.

517
00:20:42,586 --> 00:20:44,027
And that's because some of those assets

518
00:20:44,068 --> 00:20:46,370
were authored to leverage those hue

519
00:20:46,390 --> 00:20:47,831
shifts present in that tone mapper.

520
00:20:48,331 --> 00:20:49,773
Of course, when you change the tone mapper,

521
00:20:49,793 --> 00:20:50,814
you change the look of the assets,

522
00:20:50,854 --> 00:20:51,634
and they don't look good.

523
00:20:52,916 --> 00:20:56,739
Now, I'd like to thank the Dice effects team for giving me

524
00:20:57,120 --> 00:20:58,221
a loan of an effect.

525
00:20:59,338 --> 00:21:00,479
I've heavily butchered this.

526
00:21:00,859 --> 00:21:02,541
This is not the dice effect as it is.

527
00:21:02,601 --> 00:21:05,523
I've made a very contrived example by taking a fireball

528
00:21:05,944 --> 00:21:08,506
and basically reproducing it in a single hue.

529
00:21:08,526 --> 00:21:10,007
It's kind of a burnt orange color.

530
00:21:10,468 --> 00:21:11,629
I've then overexposed it.

531
00:21:12,430 --> 00:21:14,511
So on the left, what you're seeing is a single color

532
00:21:14,571 --> 00:21:17,134
fireball that's been overexposed so that the red

533
00:21:17,154 --> 00:21:19,236
channel clicks, and then the green channel doesn't.

534
00:21:20,076 --> 00:21:21,598
And it's creating yellows in the hot spots.

535
00:21:22,398 --> 00:21:22,539
Now.

536
00:21:23,397 --> 00:21:26,680
Lots of assets have been authored to leverage this particular look,

537
00:21:26,861 --> 00:21:28,182
to create that hue shifting.

538
00:21:28,682 --> 00:21:30,744
When you apply the display mapper and it preserves the hue,

539
00:21:31,065 --> 00:21:34,308
you just get a very flat, original orange fiber,

540
00:21:34,328 --> 00:21:36,630
and it looks frankly terrible.

541
00:21:38,051 --> 00:21:41,154
So, there isn't really much you can do here,

542
00:21:41,614 --> 00:21:43,016
apart from re-author the effects

543
00:21:43,616 --> 00:21:45,858
to the tune of some very unhappy artists.

544
00:21:47,856 --> 00:21:49,518
Really, this was centralized on very bright effects,

545
00:21:49,538 --> 00:21:50,138
such as fire.

546
00:21:50,979 --> 00:21:52,401
And because they were authored to leverage that,

547
00:21:52,441 --> 00:21:53,722
we had no choice but to fix it.

548
00:21:55,984 --> 00:21:57,566
Now, remember back slightly to that slide

549
00:21:57,706 --> 00:22:00,168
when there was a cheap and dirty approach,

550
00:22:00,188 --> 00:22:01,250
which is to reverse the tone map.

551
00:22:02,211 --> 00:22:03,232
When you reverse a tone map,

552
00:22:03,332 --> 00:22:05,234
even if you can recover that original values,

553
00:22:05,254 --> 00:22:06,955
you aren't going to fix the clip point.

554
00:22:07,336 --> 00:22:09,238
There's still a white point, and that white point is quite low.

555
00:22:11,307 --> 00:22:13,027
If your effect is in that shoulder region,

556
00:22:13,407 --> 00:22:15,888
and you can recover that value, the effect

557
00:22:15,908 --> 00:22:18,228
will look different on every different HDR TV as well.

558
00:22:18,929 --> 00:22:20,749
Because those hue shifts will vary depending

559
00:22:20,769 --> 00:22:21,829
on the capability of the TV.

560
00:22:22,270 --> 00:22:24,570
So this isn't just limited to SDR, this is in HDR too.

561
00:22:25,330 --> 00:22:28,231
So re-authoring the effects basically had to be done.

562
00:22:29,672 --> 00:22:31,332
And we decided to use black body simulation.

563
00:22:32,373 --> 00:22:33,513
For those that don't know, you effectively

564
00:22:33,593 --> 00:22:34,973
author the effect as a temperature.

565
00:22:35,794 --> 00:22:37,294
And then you author a color ramp,

566
00:22:37,354 --> 00:22:39,095
which is derived from black body radiation,

567
00:22:39,595 --> 00:22:41,296
index the ramp from the texture, and then

568
00:22:41,336 --> 00:22:42,176
tweak the ramp to suit you.

569
00:22:43,176 --> 00:22:47,077
So this is the original display mapped horrible orange,

570
00:22:47,678 --> 00:22:48,178
one on the left.

571
00:22:48,678 --> 00:22:50,359
And on the right is the black body simulation.

572
00:22:50,439 --> 00:22:51,799
And these are both using the display mapper.

573
00:22:52,179 --> 00:22:54,140
So these colors are now present in the original effect.

574
00:22:54,180 --> 00:22:55,080
They're not an artifact.

575
00:22:55,100 --> 00:22:55,760
They're actually there.

576
00:22:56,361 --> 00:22:57,581
And it looks better to suit, of course,

577
00:22:57,601 --> 00:22:59,081
because it's not a horribly butchered example.

578
00:23:00,359 --> 00:23:03,740
And just to compare, on the right is the proper effect

579
00:23:03,760 --> 00:23:05,661
with the blackbody simulation using display mapping,

580
00:23:05,981 --> 00:23:08,101
and on the left is the butchered one, overexposed.

581
00:23:08,361 --> 00:23:10,462
You can see they've kind of got similar characteristics,

582
00:23:11,142 --> 00:23:12,322
but on the left is an artifact,

583
00:23:12,382 --> 00:23:14,243
and on the right is in the effect itself.

584
00:23:15,283 --> 00:23:16,384
So now is it plane sailing?

585
00:23:16,464 --> 00:23:16,844
Well, no.

586
00:23:18,744 --> 00:23:20,025
Again, this hue-preserving shoulder.

587
00:23:21,257 --> 00:23:22,699
It's great, we can work with it,

588
00:23:23,260 --> 00:23:24,663
but it's not always desirable,

589
00:23:24,883 --> 00:23:27,568
and it precludes the creation

590
00:23:27,608 --> 00:23:29,612
of very, very bright, saturated visuals,

591
00:23:29,672 --> 00:23:30,714
and again, that's effects.

592
00:23:31,722 --> 00:23:33,903
So if you look at the center of that fireball, that very, very

593
00:23:33,923 --> 00:23:35,264
bright hot spot, it looks hot.

594
00:23:35,664 --> 00:23:37,986
But it's also white, because we've knocked out

595
00:23:38,046 --> 00:23:38,926
all of the saturation.

596
00:23:39,486 --> 00:23:42,748
And that means that we can't match particular film stock.

597
00:23:43,108 --> 00:23:44,209
So if you've got a game that's, say,

598
00:23:44,269 --> 00:23:46,830
a game trying to match a particular film stock,

599
00:23:46,850 --> 00:23:49,152
you can't do that, because we've fundamentally

600
00:23:49,212 --> 00:23:50,152
changed the display mapper.

601
00:23:50,933 --> 00:23:53,454
So we've started to reintroduce some hue shifts.

602
00:23:55,855 --> 00:23:56,816
So we're going back on ourselves now.

603
00:23:58,041 --> 00:24:00,102
Now on the left and on the right,

604
00:24:00,122 --> 00:24:00,982
you've got two different versions.

605
00:24:01,143 --> 00:24:03,744
Subtle hue shift on the right, no hue shift on the left.

606
00:24:04,664 --> 00:24:05,905
In the underexposed parts,

607
00:24:05,945 --> 00:24:07,186
that's the bottom of the two rings,

608
00:24:07,586 --> 00:24:08,806
you can see there's not a lot of difference.

609
00:24:08,906 --> 00:24:10,847
But hopefully you can see that in the top two,

610
00:24:11,468 --> 00:24:12,808
on the left where it's desaturated,

611
00:24:12,828 --> 00:24:14,849
on the right there is now a yellow hue in there again.

612
00:24:14,869 --> 00:24:16,690
And this is what we want.

613
00:24:17,906 --> 00:24:20,428
And to show you the two comparison images once more,

614
00:24:21,188 --> 00:24:23,570
on the left is the original display mapper,

615
00:24:23,590 --> 00:24:25,431
and on the right is one with a subtle hue shift.

616
00:24:25,571 --> 00:24:27,473
It's not very much, but it's enough,

617
00:24:27,533 --> 00:24:29,114
and you can see the center of that light

618
00:24:29,174 --> 00:24:30,415
is now yellow rather than orange.

619
00:24:32,576 --> 00:24:34,117
And just to show you against the original image,

620
00:24:34,578 --> 00:24:35,599
which had no display mapping,

621
00:24:36,879 --> 00:24:38,401
yeah, it's a lot better still,

622
00:24:38,921 --> 00:24:39,782
but it's somewhere between the two.

623
00:24:42,051 --> 00:24:43,551
So yet, we have to reintroduce the hue shifts,

624
00:24:43,611 --> 00:24:44,551
and we're still not done.

625
00:24:44,792 --> 00:24:45,792
We are still iterating.

626
00:24:46,152 --> 00:24:47,772
But we are starting to get somewhere.

627
00:24:48,472 --> 00:24:50,353
And that does mean that different games that are going

628
00:24:50,373 --> 00:24:52,153
to ship later this year are going to have slightly

629
00:24:52,173 --> 00:24:53,033
different implementations.

630
00:24:53,073 --> 00:24:54,654
And they will have chosen the situation

631
00:24:54,674 --> 00:24:55,354
that suits them best.

632
00:24:55,414 --> 00:24:57,574
Some do prefer the hue preserving shoulder.

633
00:24:58,154 --> 00:24:59,095
Some prefer the hue shifts.

634
00:24:59,115 --> 00:25:00,695
And what we're likely to end up with is some sort of

635
00:25:00,755 --> 00:25:01,615
content-driven mixer.

636
00:25:02,015 --> 00:25:03,896
But this is really nice and easy to do, because we've

637
00:25:03,936 --> 00:25:06,276
moved the display map right to the end of the pipeline.

638
00:25:06,716 --> 00:25:07,896
And we've already graded it, so we're not

639
00:25:07,916 --> 00:25:08,697
affecting anything there.

640
00:25:09,057 --> 00:25:11,517
We're literally tweaking the output shader.

641
00:25:12,078 --> 00:25:13,379
and that's really, really easy to do

642
00:25:13,439 --> 00:25:14,479
and it's also really low cost.

643
00:25:17,722 --> 00:25:19,783
Now, a few of you are probably thinking, what about ACES?

644
00:25:20,364 --> 00:25:23,206
Because surely ACES does a lot of this, or all of this.

645
00:25:23,947 --> 00:25:25,288
And for those of you who don't know what ACES is,

646
00:25:25,328 --> 00:25:26,849
it's the Academy Color Encoding System.

647
00:25:27,329 --> 00:25:29,091
And this is really gaining pace.

648
00:25:29,971 --> 00:25:31,853
It's a standardized color management system for film

649
00:25:32,353 --> 00:25:33,994
and it also defines a processing pipeline

650
00:25:34,475 --> 00:25:36,977
and it also includes look and display mapping components.

651
00:25:37,397 --> 00:25:39,378
And this is broadly speaking what it looks like.

652
00:25:40,379 --> 00:25:42,100
The input device transform ensures everything's

653
00:25:42,120 --> 00:25:43,081
in the same working space.

654
00:25:43,501 --> 00:25:45,522
The look modification transform is where you apply your look.

655
00:25:46,322 --> 00:25:47,643
The reference rendering transform

656
00:25:48,143 --> 00:25:50,204
is a standardized of filmic S curve.

657
00:25:50,624 --> 00:25:52,105
And then your output device transform,

658
00:25:52,345 --> 00:25:55,167
of which there is one per output, TV or broadcast standard.

659
00:25:55,627 --> 00:25:58,108
And it varies per TV or broadcast standard.

660
00:25:58,468 --> 00:25:59,229
Seems very similar.

661
00:26:00,121 --> 00:26:01,042
So why didn't we use it?

662
00:26:01,843 --> 00:26:03,646
Well, we started work on this in 2014,

663
00:26:04,026 --> 00:26:05,688
and ACES was really only starting to get going.

664
00:26:06,189 --> 00:26:08,552
Some of the early versions of ACES also required FP16

665
00:26:08,952 --> 00:26:11,556
and weren't suited to some runtime texture formats.

666
00:26:12,517 --> 00:26:14,980
And also, we weren't convinced, as I mentioned

667
00:26:15,060 --> 00:26:18,264
near the start, of the default filmic look.

668
00:26:19,532 --> 00:26:21,855
However, we did really agree with a lot of the principles.

669
00:26:22,035 --> 00:26:23,496
So we absolutely used it in concept.

670
00:26:23,636 --> 00:26:25,998
Like the order of operations is the same, the concept of

671
00:26:26,038 --> 00:26:28,140
working in a wide master working space and mapping down

672
00:26:28,180 --> 00:26:29,221
right at the end of the pipeline.

673
00:26:29,642 --> 00:26:31,623
The concept of the LMT is a grading pass.

674
00:26:31,884 --> 00:26:33,765
The output device transform is the display mapping.

675
00:26:34,646 --> 00:26:37,229
So we absolutely agree with ACES apart from a few little

676
00:26:37,269 --> 00:26:37,509
things.

677
00:26:38,683 --> 00:26:39,444
So should you use it?

678
00:26:39,524 --> 00:26:40,124
Yeah, of course.

679
00:26:40,164 --> 00:26:41,124
Have a look at it, please.

680
00:26:41,704 --> 00:26:43,805
And if you're going to do so, investigate ACEScc, which is

681
00:26:43,825 --> 00:26:46,345
the color correction space, and ACEScg, which is the color

682
00:26:46,365 --> 00:26:46,865
grading space.

683
00:26:47,765 --> 00:26:49,666
We may still also end up using ACES.

684
00:26:50,106 --> 00:26:51,686
Of course, we're going to continue to investigate it,

685
00:26:51,806 --> 00:26:53,807
because we agree in principle on so many things.

686
00:26:54,387 --> 00:26:57,267
And because we have a defined working space, transitioning

687
00:26:57,307 --> 00:26:58,928
to another one should be relatively trivial.

688
00:26:59,628 --> 00:27:01,648
We're also likely to adopt ACES for color management.

689
00:27:03,929 --> 00:27:07,430
OK, so we have some more problems now.

690
00:27:08,863 --> 00:27:11,244
For performance reasons, this display map,

691
00:27:11,264 --> 00:27:13,625
which is quite expensive, we chose to bake down

692
00:27:13,685 --> 00:27:15,366
into a highly accurate color grading.

693
00:27:15,726 --> 00:27:17,326
Well, the order of operations was still the same,

694
00:27:17,367 --> 00:27:19,047
so this made sense, let's make it free.

695
00:27:20,248 --> 00:27:24,129
But, the analytical tone map is on the top,

696
00:27:24,169 --> 00:27:25,089
the display map's on the top.

697
00:27:25,589 --> 00:27:28,070
In the middle is our baked LUT version.

698
00:27:28,731 --> 00:27:30,851
Now, you may not be able to see the artifacts here.

699
00:27:31,832 --> 00:27:33,352
They're a bit more obvious in other situations.

700
00:27:33,792 --> 00:27:35,313
So, I've magnified the difference on the bottom,

701
00:27:36,113 --> 00:27:37,934
and you can clearly see more MAC banding.

702
00:27:38,921 --> 00:27:41,143
there's some bands in this gradient here.

703
00:27:42,484 --> 00:27:44,866
And this really isn't ideal,

704
00:27:44,906 --> 00:27:47,028
it's not noticeable in a lot of situations to be fair.

705
00:27:47,528 --> 00:27:50,010
But in some, like this particular one, it's very obvious.

706
00:27:51,051 --> 00:27:51,812
And why is this happening?

707
00:27:52,312 --> 00:27:54,714
Well firstly, we're using linear texture filtering

708
00:27:54,734 --> 00:27:55,375
because it's fast.

709
00:27:56,576 --> 00:27:58,838
And linear texture filtering turns any curve

710
00:27:58,878 --> 00:28:01,020
into a piecewise linear approximation of a curve.

711
00:28:02,561 --> 00:28:03,241
But more than that.

712
00:28:04,582 --> 00:28:05,962
We're using a 3D lookup table,

713
00:28:06,982 --> 00:28:08,122
and we're using linear filtering,

714
00:28:08,262 --> 00:28:11,923
and the luma axis, which you saw in that particular chart,

715
00:28:11,943 --> 00:28:12,903
there wasn't a lot of color there,

716
00:28:13,383 --> 00:28:15,563
the luma axis goes from one corner of the LUT

717
00:28:15,964 --> 00:28:17,224
to the other corner of the LUT.

718
00:28:17,864 --> 00:28:18,704
It's on the diagonal.

719
00:28:18,724 --> 00:28:20,404
And when you're on the diagonal,

720
00:28:21,504 --> 00:28:25,205
when you're halfway between two texel centers,

721
00:28:25,225 --> 00:28:26,805
you're pulling in equal contributions

722
00:28:26,845 --> 00:28:28,326
from eight separate texels.

723
00:28:28,346 --> 00:28:30,806
And that's not wrong, it just means

724
00:28:30,826 --> 00:28:32,306
that you're getting slightly more contribution

725
00:28:32,346 --> 00:28:33,267
where you might not want it.

726
00:28:34,822 --> 00:28:35,842
So how do you fix this?

727
00:28:35,882 --> 00:28:38,103
Well, of course, you could just use higher order filtering.

728
00:28:38,543 --> 00:28:40,024
You can go from linear to tricubic.

729
00:28:40,844 --> 00:28:41,665
And this would really help,

730
00:28:42,525 --> 00:28:44,166
but it's also ridiculously expensive.

731
00:28:44,886 --> 00:28:46,307
And rather than spending our time

732
00:28:46,487 --> 00:28:47,867
trying to work out how to make this fast,

733
00:28:48,548 --> 00:28:49,548
we took a different approach.

734
00:28:51,949 --> 00:28:52,789
Back to the original slide.

735
00:28:53,870 --> 00:28:56,191
In RGB, we index the LUT by red, green, blue,

736
00:28:56,211 --> 00:28:57,451
but you don't have to do this.

737
00:28:59,992 --> 00:29:02,514
Our display mapper is a ChromaLuma display mapper.

738
00:29:03,035 --> 00:29:05,337
So we thought, why not try indexing axes by

739
00:29:05,437 --> 00:29:06,398
ChromaLuma instead?

740
00:29:07,339 --> 00:29:11,042
And the fastest one is YCGCO.

741
00:29:12,263 --> 00:29:14,886
And there's a big improvement straight away by using this.

742
00:29:15,727 --> 00:29:18,689
We then tried YCBCR, and it's even better still.

743
00:29:20,531 --> 00:29:23,454
Then we figured, well, since we're using ICTCP for our

744
00:29:23,474 --> 00:29:24,595
display mapper, we'll just try that.

745
00:29:25,764 --> 00:29:28,366
And that's slightly worse than YCbCr,

746
00:29:28,446 --> 00:29:31,169
but comparable to YCgCo.

747
00:29:32,750 --> 00:29:34,271
And here are the differences side by side.

748
00:29:35,072 --> 00:29:40,256
All of the 3D correlated light spaces are better than RGB.

749
00:29:40,957 --> 00:29:43,219
Far less error, far less precision problems,

750
00:29:43,259 --> 00:29:44,860
so this is good.

751
00:29:45,801 --> 00:29:46,421
And why is this?

752
00:29:47,022 --> 00:29:47,722
Well, it's fairly simple.

753
00:29:49,409 --> 00:29:51,271
We've simply aligned our primary axes

754
00:29:51,331 --> 00:29:52,953
with primary axes in the lookup table.

755
00:29:53,614 --> 00:29:55,336
We're still using piecewise linear approximation,

756
00:29:55,396 --> 00:29:58,519
but these are now running in 1D or 2D rather than 3D.

757
00:29:58,800 --> 00:29:59,721
We're not going on a diagonal,

758
00:29:59,741 --> 00:30:00,822
we're going in a primary axis.

759
00:30:01,323 --> 00:30:03,125
And that just reduces the artifacts, and that's great.

760
00:30:03,145 --> 00:30:05,768
It's still just as fast, but it looks better.

761
00:30:06,959 --> 00:30:08,840
But of course we're baking this display map

762
00:30:08,880 --> 00:30:10,801
on top of existing grades.

763
00:30:11,522 --> 00:30:13,162
And some of these grades could be quite extreme.

764
00:30:13,643 --> 00:30:15,104
And we wondered whether this would cause

765
00:30:15,144 --> 00:30:15,984
any problems with that.

766
00:30:16,104 --> 00:30:19,146
So we then plotted the access patterns

767
00:30:19,326 --> 00:30:21,947
of various screenshots into the different spaces

768
00:30:21,987 --> 00:30:24,048
to see if it would cause any precision issues

769
00:30:24,128 --> 00:30:25,509
or quality reduction.

770
00:30:27,490 --> 00:30:29,191
Just a reminder, the numbers are gonna be

771
00:30:29,251 --> 00:30:30,732
from this particular screenshot.

772
00:30:34,410 --> 00:30:38,516
These are lookup table coverage in each space

773
00:30:38,916 --> 00:30:40,178
from that particular screenshot.

774
00:30:40,218 --> 00:30:42,401
So we've plotted every pixel in that screenshot

775
00:30:43,082 --> 00:30:45,966
into the lookup table and made sure

776
00:30:46,006 --> 00:30:47,408
that we cover all neighbors where

777
00:30:47,428 --> 00:30:48,389
we'd be touching the neighbors.

778
00:30:49,190 --> 00:30:51,572
Now, red, green, blue surprisingly only uses less than 8%

779
00:30:52,392 --> 00:30:54,073
of all the volume of this lookup table,

780
00:30:54,594 --> 00:30:55,574
not as much as we expected.

781
00:30:56,175 --> 00:30:59,257
But the two de-correlated spaces, YCGCO, NCBCR,

782
00:30:59,697 --> 00:31:00,698
these use a lot less again.

783
00:31:01,259 --> 00:31:03,200
This has more than halved the coverage

784
00:31:03,300 --> 00:31:04,281
or the volume that we've used,

785
00:31:04,681 --> 00:31:07,203
which roughly halves the number of texels that contribute,

786
00:31:07,223 --> 00:31:08,444
which roughly halves the precision

787
00:31:08,484 --> 00:31:10,045
of the, or the accuracy of the grade.

788
00:31:11,006 --> 00:31:11,426
Not ideal.

789
00:31:12,106 --> 00:31:15,529
ICTCP is better, but not much better.

790
00:31:16,740 --> 00:31:18,861
So today, we've actually stuck with RGB.

791
00:31:19,501 --> 00:31:21,842
And those artifacts that are there, which you can't really

792
00:31:21,882 --> 00:31:23,563
see that often, we've kind of lived with them.

793
00:31:23,583 --> 00:31:25,003
But we're continuing to investigate this.

794
00:31:27,424 --> 00:31:27,684
OK.

795
00:31:33,826 --> 00:31:34,807
A few notes on performance.

796
00:31:36,623 --> 00:31:38,625
performance is absolutely at a premium.

797
00:31:39,426 --> 00:31:41,568
There's an increased focus on 60 frames a second,

798
00:31:41,588 --> 00:31:42,228
which is really good.

799
00:31:43,069 --> 00:31:44,330
Increased focus on resolution,

800
00:31:44,390 --> 00:31:45,892
because no one really likes 720p.

801
00:31:46,832 --> 00:31:48,294
And we really couldn't afford to give up

802
00:31:48,674 --> 00:31:51,176
resolution or quality or performance to pay for HDR.

803
00:31:52,037 --> 00:31:54,859
And because this new path entirely replaces our legacy one,

804
00:31:55,500 --> 00:31:57,402
we were required to achieve performance parity.

805
00:31:57,662 --> 00:31:58,262
It's fair enough.

806
00:31:59,544 --> 00:32:01,866
So, what was the performance of our legacy path?

807
00:32:02,984 --> 00:32:04,986
I folded two parts here together because,

808
00:32:05,006 --> 00:32:07,468
well, for reasons that will become evident a bit later.

809
00:32:08,529 --> 00:32:09,910
At the end of the frame,

810
00:32:10,350 --> 00:32:11,632
where our scan out shader would be,

811
00:32:12,092 --> 00:32:14,074
scan out shader, the final pass of the frame,

812
00:32:14,894 --> 00:32:16,436
we already did a high order resample

813
00:32:16,456 --> 00:32:17,897
because we do run dynamic resolution,

814
00:32:17,937 --> 00:32:19,678
we do run slightly sub-resolution at times,

815
00:32:19,979 --> 00:32:21,460
or above resolution in some cases.

816
00:32:22,341 --> 00:32:27,185
And this is a fairly quick-ish dual pass resample,

817
00:32:27,225 --> 00:32:29,787
high order resample where we do a vertical resample

818
00:32:29,827 --> 00:32:30,868
then a horizontal resample.

819
00:32:31,888 --> 00:32:33,470
And on Xbox, you go via an intermediate

820
00:32:33,510 --> 00:32:34,491
in the faster ESRAM.

821
00:32:35,572 --> 00:32:37,014
But your final buffer ends up in main memory,

822
00:32:37,034 --> 00:32:38,135
then you draw your UI on top,

823
00:32:38,216 --> 00:32:40,138
and it's in main memory because you scan out from main memory.

824
00:32:41,179 --> 00:32:42,240
And so we're looking at about 0.43,

825
00:32:42,341 --> 00:32:44,643
plus a little bit of UI,

826
00:32:44,703 --> 00:32:46,926
so in the cheapest situation, about 0.5 milliseconds.

827
00:32:47,767 --> 00:32:49,729
And I'm going to use numbers from Xbox One

828
00:32:49,769 --> 00:32:51,391
because it's the slowest platform in this case.

829
00:32:53,434 --> 00:32:56,475
So version one of this, the one we got in the hands of the

830
00:32:56,515 --> 00:32:59,116
artists really quickly, was a super naive implementation.

831
00:32:59,716 --> 00:33:02,537
So we rendered the UI to an offscreen target, but to do

832
00:33:02,557 --> 00:33:03,578
that, you must clear it.

833
00:33:04,138 --> 00:33:06,078
So we cleared the UI target, and that added a quarter of

834
00:33:06,098 --> 00:33:06,619
a millisecond.

835
00:33:07,619 --> 00:33:09,400
We then modified the second path of our

836
00:33:09,560 --> 00:33:10,460
dual-path-free sample.

837
00:33:11,100 --> 00:33:13,881
You load the HDR, you convert PQ to linear, you then load

838
00:33:13,921 --> 00:33:16,542
your UI target and make sure that's in linear, composite

839
00:33:16,582 --> 00:33:20,784
the two, tone map or re-encode to sRGB, and there we go.

840
00:33:21,904 --> 00:33:22,104
Well.

841
00:33:22,800 --> 00:33:25,541
Not really optimal, not really very good.

842
00:33:26,242 --> 00:33:28,023
Yeah, this added a large cost, and this is not OK.

843
00:33:28,043 --> 00:33:29,704
But it was OK to get into the hands of the artists.

844
00:33:31,245 --> 00:33:32,586
So of course, you take some low-hanging fruit.

845
00:33:33,706 --> 00:33:36,628
You notice that the second pass is dominated by ALU.

846
00:33:37,329 --> 00:33:39,230
And the first thing is a really easy win.

847
00:33:39,490 --> 00:33:43,152
Our UI is rendered in a U-norm format for various reasons.

848
00:33:43,572 --> 00:33:44,833
But it contains sRGB data.

849
00:33:44,853 --> 00:33:46,794
So of course, you just alias that texture, it's sRGB,

850
00:33:47,094 --> 00:33:48,415
and you get the conversion for free.

851
00:33:49,870 --> 00:33:53,074
Also, PQ conversions to and from linear are expensive.

852
00:33:54,375 --> 00:33:57,599
And we decided, because we're doing a lot of work here,

853
00:33:57,639 --> 00:34:00,021
that in this particular shader, which is ALU-dominated,

854
00:34:00,041 --> 00:34:02,284
it would be a lot faster to use a simple 1D lookup table

855
00:34:02,364 --> 00:34:03,705
for the PQ to linear part.

856
00:34:04,406 --> 00:34:05,046
And so we put that in.

857
00:34:06,108 --> 00:34:07,489
And then we started to hit bandwidth limits

858
00:34:07,529 --> 00:34:08,230
on this second pass.

859
00:34:08,881 --> 00:34:10,763
And, um, so, of course,

860
00:34:10,823 --> 00:34:12,585
you just put the UI target in ESRAM,

861
00:34:12,965 --> 00:34:14,146
and that halves the clear costs,

862
00:34:14,327 --> 00:34:16,269
and the UI also renders two times faster than before,

863
00:34:16,309 --> 00:34:16,849
which is great.

864
00:34:17,530 --> 00:34:19,272
And we come down. Costs come down.

865
00:34:19,332 --> 00:34:20,573
We're about .8 milliseconds now.

866
00:34:20,593 --> 00:34:21,954
It's still not very good, but it's a start.

867
00:34:23,716 --> 00:34:25,878
And then I get into the resample part,

868
00:34:25,898 --> 00:34:27,440
and this really isn't anything to do with HDR.

869
00:34:28,876 --> 00:34:32,080
But we were starting to run into load balancing issues,

870
00:34:32,140 --> 00:34:35,965
where because we had the UI in one place, and then the first

871
00:34:36,005 --> 00:34:38,628
pass of the resample, and then the second part of the

872
00:34:38,648 --> 00:34:41,052
resample, we weren't getting really great utilization across

873
00:34:41,092 --> 00:34:42,033
both of these two passes.

874
00:34:42,373 --> 00:34:43,855
And this was becoming a bit of a blocker.

875
00:34:44,751 --> 00:34:47,213
So by switching from a two-pass resample

876
00:34:47,273 --> 00:34:48,634
to an optimized compute resample,

877
00:34:48,654 --> 00:34:49,955
where you can do a single pass,

878
00:34:49,995 --> 00:34:52,736
but do dual pass inside the shader with local memory,

879
00:34:53,737 --> 00:34:55,298
this is an enabling optimization

880
00:34:55,638 --> 00:34:56,639
that brings two passes into one

881
00:34:56,679 --> 00:34:58,120
and lets the GPU load balance a lot better.

882
00:34:58,140 --> 00:35:00,201
There's some specific optimizations in here

883
00:35:00,241 --> 00:35:02,703
related to the fact that we know our tile mode

884
00:35:02,723 --> 00:35:03,584
because we're scanning out,

885
00:35:03,944 --> 00:35:06,085
and we have got some GCN-specific optimizations in here.

886
00:35:06,966 --> 00:35:08,447
And this in itself wasn't a huge win,

887
00:35:08,827 --> 00:35:10,088
but it's an enabling optimization,

888
00:35:10,108 --> 00:35:11,569
so we saved about 0.1 milliseconds.

889
00:35:12,782 --> 00:35:14,705
But the last final big win was from the

890
00:35:14,745 --> 00:35:16,027
CMask work and composition.

891
00:35:16,828 --> 00:35:20,313
Now, AMD's GCN hardware maintains this CMask metadata.

892
00:35:21,161 --> 00:35:23,522
And essentially, this stores whether any block of 4x4 pixels

893
00:35:23,822 --> 00:35:24,622
was rendered to or not.

894
00:35:25,202 --> 00:35:27,543
So when you do a clear, you don't clear the memory.

895
00:35:27,723 --> 00:35:28,943
You just clear the CMAS data.

896
00:35:29,284 --> 00:35:30,464
And then when you draw some pixels,

897
00:35:30,504 --> 00:35:32,265
it marks the CMAS whether it's been drawn or not.

898
00:35:33,125 --> 00:35:34,985
And then before you read this texture back,

899
00:35:35,426 --> 00:35:36,846
there's a fast clear eliminate pass.

900
00:35:37,366 --> 00:35:38,727
And all that does is look at the CMAS

901
00:35:38,767 --> 00:35:40,767
and then figures out whether you've written it to memory

902
00:35:40,807 --> 00:35:41,047
or not.

903
00:35:41,508 --> 00:35:44,168
And where you haven't, it writes the clear color back to memory.

904
00:35:45,109 --> 00:35:45,689
Smart and simple.

905
00:35:46,699 --> 00:35:49,021
So since we can read this metadata,

906
00:35:49,581 --> 00:35:51,223
why don't we just remove the fast clear eliminate,

907
00:35:51,663 --> 00:35:53,404
read the CMask in the composite pass,

908
00:35:53,445 --> 00:35:55,326
and then where we know we've not drawn the UI,

909
00:35:55,826 --> 00:35:58,108
we just don't read the UI, and don't do anything.

910
00:35:59,369 --> 00:36:00,630
And in concept, that's what we did.

911
00:36:01,031 --> 00:36:04,534
It isn't quite that simple, because CMASK is a custom

912
00:36:04,774 --> 00:36:05,795
tiled and packed format.

913
00:36:05,875 --> 00:36:08,257
And that requires that you do detiling and

914
00:36:08,317 --> 00:36:09,138
unpacking in software.

915
00:36:09,158 --> 00:36:10,099
And that isn't cheap.

916
00:36:10,880 --> 00:36:14,763
So doing it in the resample wasn't necessarily the right

917
00:36:14,783 --> 00:36:15,204
thing to do.

918
00:36:15,764 --> 00:36:18,167
However, you can, of course, issue just a very tiny

919
00:36:18,287 --> 00:36:20,709
transcode shader, which takes your CMASK.

920
00:36:21,675 --> 00:36:24,597
and turns it into a format that can be read

921
00:36:24,677 --> 00:36:26,359
in an optimal manner for the composition.

922
00:36:26,439 --> 00:36:27,860
And you choose this format

923
00:36:27,880 --> 00:36:29,361
to match the composition thread layout.

924
00:36:30,082 --> 00:36:32,744
And this is a really, really cheap pass, 0.02 milliseconds.

925
00:36:32,784 --> 00:36:34,106
And of course, that is so much cheaper

926
00:36:34,126 --> 00:36:35,126
than the FastClear Eliminate.

927
00:36:35,867 --> 00:36:37,168
And in the composite pass, you take this,

928
00:36:37,809 --> 00:36:39,630
you load the bit mask, you unpack the bit

929
00:36:39,650 --> 00:36:41,112
corresponding to you, which is very, very cheap.

930
00:36:41,732 --> 00:36:44,134
And if the bit's zero, you skip the entire URI operation.

931
00:36:44,174 --> 00:36:45,415
You don't load it, you don't clear it.

932
00:36:46,517 --> 00:36:47,978
You don't composite it, you don't do anything with it.

933
00:36:48,418 --> 00:36:50,000
And that brought us back down to half a millisecond.

934
00:36:50,020 --> 00:36:52,583
But of course, our UI is now in ESRAM, so it renders faster.

935
00:36:52,623 --> 00:36:54,445
So in some cases, it's quicker than the old path,

936
00:36:54,805 --> 00:36:55,326
which is nice.

937
00:36:56,427 --> 00:36:58,329
Now, I've worked only in the SDR version here,

938
00:36:59,030 --> 00:37:01,512
because the SDR version is the one running on the base Xbox,

939
00:37:01,993 --> 00:37:03,314
and most people have got SDR TVs,

940
00:37:03,334 --> 00:37:04,455
so that was the most important path.

941
00:37:04,876 --> 00:37:06,157
But of course, we want to support HDR.

942
00:37:07,274 --> 00:37:09,355
So when you're in HDR, there's a bit of extra work

943
00:37:09,395 --> 00:37:09,856
you have to do.

944
00:37:10,756 --> 00:37:13,498
Firstly, you have to rotate all the primaries from sRGB to

945
00:37:13,938 --> 00:37:16,559
2020, you have to encode to PQ rather than sRGB, and that's

946
00:37:16,639 --> 00:37:17,280
more expensive.

947
00:37:18,220 --> 00:37:19,761
But not too much more expensive.

948
00:37:20,301 --> 00:37:22,683
So in this path, it's about 0.7 milliseconds rather than

949
00:37:22,743 --> 00:37:23,543
0.5 milliseconds.

950
00:37:23,563 --> 00:37:24,524
So there's a small overhead.

951
00:37:24,984 --> 00:37:28,806
However, this path only runs on the Xbox One S and indeed

952
00:37:28,826 --> 00:37:28,966
the PS4.

953
00:37:30,150 --> 00:37:32,131
And the Xbox One S has a faster GPU

954
00:37:32,612 --> 00:37:36,314
to the tune of about 7% or about 1.1 milliseconds at 60 hertz.

955
00:37:36,694 --> 00:37:38,094
So this 0.2 milliseconds overhead

956
00:37:38,134 --> 00:37:39,655
is not a drop in the ocean here.

957
00:37:40,075 --> 00:37:41,956
And that means that the bulk of the Xbox One S performance

958
00:37:41,996 --> 00:37:43,037
actually goes straight back to the game.

959
00:37:43,537 --> 00:37:44,658
For games with dynamic resolution,

960
00:37:44,678 --> 00:37:45,718
that means you get high resolution.

961
00:37:45,758 --> 00:37:47,219
And HDR doesn't really make an impact.

962
00:37:47,239 --> 00:37:47,699
And that's great.

963
00:37:48,797 --> 00:37:51,699
And I've not focused on PS4 here because both PS4 and Xbox

964
00:37:51,719 --> 00:37:52,880
run at the same resolutions, 1080p.

965
00:37:52,960 --> 00:37:55,962
This is a scan-out shader, which runs at 1080p.

966
00:37:56,622 --> 00:37:59,244
So for the same resolution, the PS4 has more AOUs,

967
00:37:59,264 --> 00:38:00,124
so we haven't worried about it.

968
00:38:03,747 --> 00:38:05,428
Now, a little note on the HDR standards

969
00:38:05,448 --> 00:38:07,329
themselves and the platforms that support them.

970
00:38:08,530 --> 00:38:11,612
There are two primary standards at the moment, Dolby Vision,

971
00:38:12,432 --> 00:38:12,692
HDR10.

972
00:38:13,995 --> 00:38:15,115
And Frostbite can support both.

973
00:38:15,735 --> 00:38:17,236
And because we have this final pass,

974
00:38:17,276 --> 00:38:18,516
supporting more is relatively easy.

975
00:38:18,556 --> 00:38:21,798
So if something like hybrid log gamma becomes ratified and

976
00:38:21,858 --> 00:38:23,398
used a lot, we could support that relatively easily.

977
00:38:24,138 --> 00:38:25,979
There's a small asterisk here that I have to say.

978
00:38:26,299 --> 00:38:28,220
Just because Frostbite can support both, and we do

979
00:38:28,260 --> 00:38:29,720
support both, that doesn't mean that every

980
00:38:29,740 --> 00:38:30,501
game will support both.

981
00:38:31,261 --> 00:38:32,902
Because licensing agreements and everything else

982
00:38:32,942 --> 00:38:34,222
are signed on a per-game basis.

983
00:38:34,522 --> 00:38:36,643
It's entirely down to the game team to choose what they do.

984
00:38:36,763 --> 00:38:39,445
So I, unfortunately, can't stand here and say, yeah,

985
00:38:39,465 --> 00:38:40,465
everyone's going to support everything.

986
00:38:40,785 --> 00:38:41,726
It'll be down to each game.

987
00:38:42,126 --> 00:38:43,927
But the tech can support both.

988
00:38:44,267 --> 00:38:45,988
And so we hope that everyone will.

989
00:38:46,308 --> 00:38:47,168
But I can't guarantee it.

990
00:38:49,969 --> 00:38:51,310
So Dolby Vision has some pros and cons.

991
00:38:52,571 --> 00:38:54,071
It's a 12-bit signal rather than 10-bit.

992
00:38:54,691 --> 00:38:57,353
It's also compatible with older versions of HDMI.

993
00:38:57,393 --> 00:38:58,013
So it goes down to 1.4b.

994
00:38:59,669 --> 00:39:02,170
In Dolby Vision, there's no need to write a display mapper

995
00:39:02,450 --> 00:39:02,750
at all.

996
00:39:03,831 --> 00:39:05,972
Dolby does that for you, and it's embedded into the TV

997
00:39:06,012 --> 00:39:06,392
firmware.

998
00:39:07,152 --> 00:39:09,513
And Dolby say that because they built this display mapper

999
00:39:09,533 --> 00:39:12,034
for each display, they can guarantee some sort of

1000
00:39:13,234 --> 00:39:15,595
uniformity across displays, some form of standardization.

1001
00:39:16,055 --> 00:39:17,076
And we don't have any control over this.

1002
00:39:17,096 --> 00:39:17,956
That's entirely down to them.

1003
00:39:18,937 --> 00:39:20,557
And they also promise that you get good

1004
00:39:20,577 --> 00:39:21,698
results from low-end panels.

1005
00:39:22,758 --> 00:39:22,898
Now.

1006
00:39:24,263 --> 00:39:25,464
There's a few downsides to this.

1007
00:39:25,604 --> 00:39:27,985
In order to feed the TV information

1008
00:39:28,245 --> 00:39:29,926
to let it run the display mapping,

1009
00:39:30,646 --> 00:39:32,247
you have to generate some metadata,

1010
00:39:32,667 --> 00:39:33,887
and you have to encode the frame buffer.

1011
00:39:34,608 --> 00:39:37,269
And the metadata generation does add a cost.

1012
00:39:37,709 --> 00:39:40,731
You tend to histogram the frame, and that's not entirely cheap.

1013
00:39:40,811 --> 00:39:42,732
It's not insurmountable, but it's a small cost here.

1014
00:39:43,232 --> 00:39:44,232
And when you encode the frame buffer,

1015
00:39:44,252 --> 00:39:45,033
that adds a cost as well.

1016
00:39:46,353 --> 00:39:48,614
But this frame buffer, once encoded, is now non-blendable.

1017
00:39:48,974 --> 00:39:50,455
So you can't blend overlays on top of it.

1018
00:39:51,617 --> 00:39:53,197
And that means that if you try and draw something

1019
00:39:53,217 --> 00:39:56,138
like a friend's notification, it can corrupt the framebuffer,

1020
00:39:56,158 --> 00:39:56,678
and that's not good.

1021
00:39:57,438 --> 00:40:00,119
Also, Double Vision isn't today supported by many TVs.

1022
00:40:01,900 --> 00:40:03,320
HDR10 has pros and cons as well.

1023
00:40:04,421 --> 00:40:05,881
HDR10 is far more widespread.

1024
00:40:06,961 --> 00:40:09,022
And because it doesn't have a custom framebuffer encoding,

1025
00:40:09,642 --> 00:40:11,623
any blended overlays do sort of work.

1026
00:40:12,583 --> 00:40:15,304
And as we showed earlier, software display mapping,

1027
00:40:15,404 --> 00:40:16,664
reasonable software display mapping,

1028
00:40:16,724 --> 00:40:17,665
can be done very cheaply.

1029
00:40:19,032 --> 00:40:21,693
On the downside, and this is probably the biggest downside,

1030
00:40:21,713 --> 00:40:24,615
there is no standardization at all on HDR10

1031
00:40:24,635 --> 00:40:25,535
across manufacturers.

1032
00:40:25,975 --> 00:40:28,956
Indeed, across modes on the TV, game mode, cinema mode,

1033
00:40:29,156 --> 00:40:29,497
whatever.

1034
00:40:30,017 --> 00:40:31,557
There's no standardization at all.

1035
00:40:31,577 --> 00:40:33,578
And this means that your game can look different

1036
00:40:33,658 --> 00:40:35,319
on every different TV and every different mode

1037
00:40:35,379 --> 00:40:36,259
on every different TV.

1038
00:40:37,140 --> 00:40:39,761
So to help try and bring this a bit more closely aligned,

1039
00:40:40,161 --> 00:40:42,162
the game really should do its own display mapping.

1040
00:40:42,822 --> 00:40:44,783
Also, HDR10 is 10-bit rather than 12-bit.

1041
00:40:46,664 --> 00:40:46,984
However...

1042
00:40:47,973 --> 00:40:49,714
They share a huge number of commonalities.

1043
00:40:50,474 --> 00:40:51,414
They share the ERTF.

1044
00:40:51,914 --> 00:40:54,916
They do share a minimum and maximum mastering Luma.

1045
00:40:55,456 --> 00:40:56,376
They share a color gamut.

1046
00:40:56,957 --> 00:40:59,538
And that means that if you're mastering in a wider space,

1047
00:41:00,318 --> 00:41:01,539
you pick the same space for both,

1048
00:41:01,579 --> 00:41:02,779
because it is the same space for both,

1049
00:41:02,859 --> 00:41:04,560
and the same master content will work on both.

1050
00:41:05,360 --> 00:41:07,021
And you just have a different display map target

1051
00:41:07,041 --> 00:41:09,542
for each one, and that means you can support both

1052
00:41:09,742 --> 00:41:11,503
with the same data, so it's not really any extra work,

1053
00:41:12,043 --> 00:41:13,043
apart from the implementation.

1054
00:41:14,585 --> 00:41:15,665
And which platform support which?

1055
00:41:16,106 --> 00:41:17,707
Well, both PS4 support HDR10.

1056
00:41:18,387 --> 00:41:20,168
Xbox One S supports HDR10.

1057
00:41:20,689 --> 00:41:22,330
And on PC, you can pretty much do whatever you want.

1058
00:41:22,430 --> 00:41:23,871
So HDR10, Dolby Vision, whatever.

1059
00:41:24,871 --> 00:41:27,373
But because you have to send metadata over HDMI

1060
00:41:27,393 --> 00:41:30,054
to make this work, you do need GPU vendor extensions

1061
00:41:30,355 --> 00:41:31,395
to handle that metadata.

1062
00:41:31,415 --> 00:41:32,936
So you've got to call a couple of functions.

1063
00:41:33,997 --> 00:41:36,539
And DX11, with exclusive full screen,

1064
00:41:36,559 --> 00:41:38,420
this just works because you just take

1065
00:41:38,440 --> 00:41:39,380
full control of everything.

1066
00:41:39,400 --> 00:41:42,082
Do Dolby Vision, encode your frame buffer.

1067
00:41:42,282 --> 00:41:42,883
Everything's fine.

1068
00:41:43,768 --> 00:41:46,472
DX12 is a little bit trickier, because it doesn't have

1069
00:41:46,512 --> 00:41:47,513
exclusive full screen.

1070
00:41:48,054 --> 00:41:50,937
And the desktop compositor can then come in and perhaps scale

1071
00:41:50,978 --> 00:41:51,739
or add overlays.

1072
00:41:51,779 --> 00:41:53,901
And as I mentioned earlier, if you try and scale or add

1073
00:41:53,941 --> 00:41:56,265
overlays to Dolby Vision, it breaks the encoding, it breaks

1074
00:41:56,285 --> 00:41:57,686
the metadata, and that can cause some trouble.

1075
00:41:58,528 --> 00:42:00,050
But we are working with various people to try and

1076
00:42:00,070 --> 00:42:00,470
improve this.

1077
00:42:02,850 --> 00:42:06,111
And of course, do not forget SDR TVs.

1078
00:42:06,851 --> 00:42:08,292
There is a majority of the market.

1079
00:42:08,872 --> 00:42:10,172
There's a huge number out there.

1080
00:42:10,452 --> 00:42:12,373
And the SDR version needs to look great.

1081
00:42:12,413 --> 00:42:14,713
It's so easy to get carried away with an HDR TV next to

1082
00:42:14,733 --> 00:42:16,013
your desk and get really excited.

1083
00:42:16,954 --> 00:42:19,754
But master your content in HDR, and treat the HDR as a

1084
00:42:19,794 --> 00:42:21,035
reference version by all means.

1085
00:42:21,695 --> 00:42:23,835
But because we own the display mapping, we need to really

1086
00:42:23,875 --> 00:42:25,756
tune that to make the SDR version look really, really

1087
00:42:25,796 --> 00:42:26,296
great as well.

1088
00:42:26,816 --> 00:42:28,816
And as I mentioned before, you can also play to the fact that

1089
00:42:28,836 --> 00:42:31,217
the SDR TV over brightens your image, so you

1090
00:42:31,257 --> 00:42:32,137
can scale it to fit.

1091
00:42:35,045 --> 00:42:36,666
OK, what are our next steps in FastByte?

1092
00:42:39,269 --> 00:42:41,411
Well, high dynamic range video is absolutely one.

1093
00:42:42,352 --> 00:42:44,274
So today, we don't support high dynamic range video.

1094
00:42:44,754 --> 00:42:47,657
We do support pseudo high dynamic range video, because

1095
00:42:47,677 --> 00:42:49,979
we can take the video and we can scale it up just like the

1096
00:42:50,079 --> 00:42:51,040
SDR TV would.

1097
00:42:51,481 --> 00:42:52,882
So we can make it look a bit brighter.

1098
00:42:52,922 --> 00:42:53,863
And it actually looks pretty good.

1099
00:42:54,727 --> 00:42:57,489
We can also do something cheap like reverse the tone map

1100
00:42:57,509 --> 00:42:59,711
curve in the SDR video and extract the HDR data.

1101
00:43:00,011 --> 00:43:02,032
Not a large range, but we can reverse that

1102
00:43:02,052 --> 00:43:02,773
and get something else.

1103
00:43:02,833 --> 00:43:04,274
So there's ways to make it work at the moment.

1104
00:43:05,075 --> 00:43:07,737
But HDR video natively requires higher bit depth.

1105
00:43:08,297 --> 00:43:10,438
It has a higher decode performance overhead.

1106
00:43:10,879 --> 00:43:12,120
It's got bigger file sizes.

1107
00:43:12,180 --> 00:43:13,401
It's got bigger streaming overheads.

1108
00:43:14,181 --> 00:43:16,763
And also, if you've got a marketing ecosystem where

1109
00:43:16,783 --> 00:43:18,724
you're taking a version of the game and capturing it

1110
00:43:19,025 --> 00:43:20,345
and then producing marketing videos,

1111
00:43:21,106 --> 00:43:22,988
like YouTube now supports HDR, for example,

1112
00:43:23,188 --> 00:43:25,390
you don't want to have to create a different marketing video

1113
00:43:25,410 --> 00:43:26,451
for every different version.

1114
00:43:26,551 --> 00:43:28,452
It'd be a huge workflow overhead.

1115
00:43:29,093 --> 00:43:33,336
So you want an ecosystem to be able to capture, playback,

1116
00:43:34,057 --> 00:43:36,619
edit, and then spit out multiple different versions

1117
00:43:36,659 --> 00:43:38,761
of your marketing video for every different HDR format.

1118
00:43:39,602 --> 00:43:43,205
And that needs an ecosystem in your workflows.

1119
00:43:43,765 --> 00:43:45,867
And really, this comes down to managing color gamut.

1120
00:43:47,353 --> 00:43:50,014
And we don't support wide gamut rendering currently.

1121
00:43:50,894 --> 00:43:54,335
So when looking at what HDR TVs give you, they give you

1122
00:43:54,435 --> 00:43:56,475
wider color gamut, and they also give you a wider dynamic

1123
00:43:56,515 --> 00:43:56,776
range.

1124
00:43:57,316 --> 00:43:59,916
And we figured that the wider dynamic range, which also

1125
00:43:59,956 --> 00:44:03,878
gives you better saturation, it was the bigger and easier

1126
00:44:03,898 --> 00:44:04,278
thing to do.

1127
00:44:04,338 --> 00:44:05,418
So we went for that straight away.

1128
00:44:05,738 --> 00:44:07,779
But we really do also want to support wide gamut rendering.

1129
00:44:07,819 --> 00:44:09,139
However, this is a loss of work.

1130
00:44:10,631 --> 00:44:13,032
So first you have to expand the runtime gamut to feed the TV.

1131
00:44:13,652 --> 00:44:16,473
You then have to have gamut metadata on every single color

1132
00:44:16,553 --> 00:44:19,734
asset you possibly author and maintain, because not every

1133
00:44:19,774 --> 00:44:21,415
single thing is going to be in the same gamut.

1134
00:44:21,855 --> 00:44:24,176
So today we can assume, because it's a 20-plus year

1135
00:44:24,236 --> 00:44:25,877
old standard, that everything's in sRGB.

1136
00:44:25,917 --> 00:44:27,777
And so you haven't got to worry about it.

1137
00:44:27,917 --> 00:44:28,918
Everything's the same space.

1138
00:44:28,998 --> 00:44:30,058
Everything kind of just works.

1139
00:44:30,078 --> 00:44:30,878
You can make assumptions.

1140
00:44:31,539 --> 00:44:32,480
But when you go wide gamut, you're

1141
00:44:32,500 --> 00:44:35,623
going to want to selectively author certain things that

1142
00:44:35,663 --> 00:44:36,644
benefit from wide gamut.

1143
00:44:37,245 --> 00:44:38,686
And that means they need separate metadata.

1144
00:44:39,087 --> 00:44:44,072
So skin tones, flora, fauna, fire effects, all these things

1145
00:44:44,112 --> 00:44:45,774
are outside of sRGB or 709.

1146
00:44:46,935 --> 00:44:48,396
And so you need to preserve this metadata.

1147
00:44:48,877 --> 00:44:49,938
And you have to move this metadata

1148
00:44:49,998 --> 00:44:51,980
in and out of the digital content creation packages

1149
00:44:52,000 --> 00:44:52,260
as well.

1150
00:44:53,081 --> 00:44:54,682
And some of them support one standard.

1151
00:44:54,702 --> 00:44:55,903
Some of them support no standard.

1152
00:44:56,323 --> 00:44:57,203
Some of it's manual.

1153
00:44:57,704 --> 00:45:01,246
So this is a relatively error-prone area.

1154
00:45:01,786 --> 00:45:03,347
And it's also a lot of work, because you

1155
00:45:03,367 --> 00:45:05,508
have to transform everything into the same working space

1156
00:45:05,528 --> 00:45:05,989
to render.

1157
00:45:06,989 --> 00:45:09,050
And this is where things like ACES, OpenColorIO,

1158
00:45:09,111 --> 00:45:10,711
OpenImageIO can really help, because it's

1159
00:45:10,751 --> 00:45:12,713
a standardized way of doing it.

1160
00:45:12,753 --> 00:45:14,053
But not all packages support this.

1161
00:45:14,554 --> 00:45:15,574
So this is why it's difficult.

1162
00:45:16,480 --> 00:45:18,541
However, we'll start by working from the TV back.

1163
00:45:19,001 --> 00:45:21,761
So the first thing we'll do is to convert the color grading,

1164
00:45:21,781 --> 00:45:23,702
which is one of the last stages, into high dynamic range,

1165
00:45:24,042 --> 00:45:26,002
implement some out-of-gamut or debug modes

1166
00:45:26,022 --> 00:45:28,162
to help the artists, and then work back from there.

1167
00:45:30,823 --> 00:45:34,183
However, our color grading is done in lookup tables.

1168
00:45:34,243 --> 00:45:35,684
And if you recall this slide from before,

1169
00:45:35,704 --> 00:45:39,724
this is a percentage of the volume of the lookup table

1170
00:45:39,744 --> 00:45:40,624
that we actually use.

1171
00:45:41,665 --> 00:45:44,565
And if we take this and move it into 2020, for example.

1172
00:45:47,021 --> 00:45:48,041
it gets a bit more horrible.

1173
00:45:49,202 --> 00:45:51,722
So yeah, our RGB value, which is about 8%,

1174
00:45:52,282 --> 00:45:53,723
drops to just under 5%.

1175
00:45:54,883 --> 00:45:58,444
YCGCO and YCBCR, they halve again,

1176
00:46:00,025 --> 00:46:01,105
back and forth a couple of times.

1177
00:46:01,725 --> 00:46:05,346
But ICTCP does not change, and that's because ICTCP

1178
00:46:05,446 --> 00:46:08,007
is a natively wide gamma HDR format.

1179
00:46:08,547 --> 00:46:10,948
So when moving to wide color gamma,

1180
00:46:11,608 --> 00:46:14,268
considering using ICTCP for a grading format,

1181
00:46:14,669 --> 00:46:16,369
starts to become really appealing.

1182
00:46:18,425 --> 00:46:20,750
And on that, just a quick note on gamut reduction.

1183
00:46:22,112 --> 00:46:23,254
Expansion is trivial.

1184
00:46:23,435 --> 00:46:24,677
What will hold more will hold less.

1185
00:46:25,338 --> 00:46:27,362
And it's basically a matrix transforming linear space.

1186
00:46:28,915 --> 00:46:31,157
However, gamut reduction is not so trivial.

1187
00:46:31,898 --> 00:46:34,160
If you take a value that's outside of your target gamut

1188
00:46:34,440 --> 00:46:36,161
and then naively rotate it,

1189
00:46:37,082 --> 00:46:38,463
then you get out of gamut colors

1190
00:46:38,503 --> 00:46:40,345
and this can manifest as negative numbers,

1191
00:46:40,705 --> 00:46:42,386
which when you clip to zero to output,

1192
00:46:42,706 --> 00:46:43,507
you get hue shifts.

1193
00:46:43,547 --> 00:46:47,230
And in a quick test, a vibrant red can become purple,

1194
00:46:47,250 --> 00:46:48,391
which is not like a subtle thing,

1195
00:46:48,411 --> 00:46:49,332
which is really obvious.

1196
00:46:50,072 --> 00:46:52,974
So you must absolutely map your colors to the target gamut

1197
00:46:53,014 --> 00:46:54,455
before you do the transformation.

1198
00:46:55,196 --> 00:46:57,357
And again, we're back to this format, ICTCP.

1199
00:46:57,817 --> 00:47:00,179
We really suggest using this as a working space,

1200
00:47:00,239 --> 00:47:03,141
because if you recall, the chroma part of this

1201
00:47:03,241 --> 00:47:04,362
is perceptually hue linear.

1202
00:47:04,842 --> 00:47:06,603
So you could do something as simple

1203
00:47:06,783 --> 00:47:09,285
as just scaling a saturation until it

1204
00:47:09,325 --> 00:47:10,265
fits the target gamut.

1205
00:47:10,305 --> 00:47:11,326
You won't change hue.

1206
00:47:11,406 --> 00:47:12,767
You'll just change saturation.

1207
00:47:13,427 --> 00:47:14,308
So this is our thinking.

1208
00:47:15,028 --> 00:47:17,710
Relatively simply, just scale the saturation down

1209
00:47:17,750 --> 00:47:18,851
until it fits in the target gamut,

1210
00:47:18,911 --> 00:47:19,651
and then go from there.

1211
00:47:22,044 --> 00:47:26,288
So just to wrap up, I tried to distill a few key thoughts,

1212
00:47:26,348 --> 00:47:28,210
messages, and learnings over this two-year journey.

1213
00:47:29,151 --> 00:47:32,093
First and foremost, ensure that your colors are actually

1214
00:47:32,314 --> 00:47:33,214
in those assets.

1215
00:47:33,855 --> 00:47:34,596
Make sure they're there.

1216
00:47:34,816 --> 00:47:38,879
Do not rely on a tone map or a clip point, which all vary in

1217
00:47:39,020 --> 00:47:40,401
HDR, to change the hue.

1218
00:47:40,861 --> 00:47:42,563
Make sure those colors are in those assets.

1219
00:47:43,424 --> 00:47:45,764
And please try to master your game in the widest possible

1220
00:47:45,784 --> 00:47:49,265
space, master it in HDR, and then produce every version of

1221
00:47:49,285 --> 00:47:50,166
that as an artifact.

1222
00:47:50,186 --> 00:47:52,646
So move your tone map as late as possible in the pipeline as

1223
00:47:52,666 --> 00:47:55,267
you can, and then start to play with your tone map for

1224
00:47:55,327 --> 00:47:56,047
each different display.

1225
00:47:57,228 --> 00:48:00,289
Also, it is worth considering using decolorated spaces,

1226
00:48:00,829 --> 00:48:04,310
ICTCP, YCPCR, whatever, because RGB isn't the only way

1227
00:48:04,350 --> 00:48:04,810
to do things.

1228
00:48:06,088 --> 00:48:08,812
And if you can, please try to aim to support all standards.

1229
00:48:09,253 --> 00:48:10,575
It's in all of our interest to try and drive

1230
00:48:10,595 --> 00:48:11,537
the adoption of HDR.

1231
00:48:11,597 --> 00:48:12,338
It is a lot better.

1232
00:48:12,819 --> 00:48:15,003
But please don't also forget about SDR, because that's where

1233
00:48:15,043 --> 00:48:16,104
most of your sales will come from.

1234
00:48:18,451 --> 00:48:19,212
And that's pretty much it.

1235
00:48:19,412 --> 00:48:20,873
I'd like to make sure there's a few thanks here,

1236
00:48:20,953 --> 00:48:22,014
especially to Tomasz here.

1237
00:48:22,614 --> 00:48:24,315
Tomasz is really the brains behind the display mapper.

1238
00:48:24,355 --> 00:48:26,197
He's put a lot of time, energy, and love into this.

1239
00:48:27,017 --> 00:48:28,939
And it's really important to make sure he's credited up here.

1240
00:48:29,299 --> 00:48:30,660
Also, I'd like to thank Dobby for the help.

1241
00:48:31,280 --> 00:48:32,962
Several unnamed game teams,

1242
00:48:33,542 --> 00:48:35,343
specifically the DiceFX community, though,

1243
00:48:35,423 --> 00:48:37,165
because they've provided a lot of test assets for us,

1244
00:48:38,025 --> 00:48:39,166
and Mark for helping me with this talk.

1245
00:48:40,667 --> 00:48:41,328
And that's me done.

1246
00:48:50,992 --> 00:48:51,532
Any questions?

1247
00:48:51,973 --> 00:48:52,113
Hi.

1248
00:48:52,613 --> 00:48:52,933
Hello.

1249
00:48:53,293 --> 00:48:53,493
Hi.

1250
00:48:56,154 --> 00:48:56,795
Congratulations.

1251
00:48:56,855 --> 00:48:58,435
I agree on everything here.

1252
00:48:58,495 --> 00:48:58,995
It's very cool.

1253
00:48:59,696 --> 00:49:01,356
I have a couple of questions.

1254
00:49:02,577 --> 00:49:03,917
So you have your display mapping.

1255
00:49:03,957 --> 00:49:04,918
It's nice.

1256
00:49:05,118 --> 00:49:10,260
Do you use it for allowing users to calibrate different

1257
00:49:10,380 --> 00:49:13,181
ambient levels, different displays, OLEDs, LEDs?

1258
00:49:14,101 --> 00:49:17,783
And if so, how do you present that choice to the user?

1259
00:49:18,327 --> 00:49:21,171
OK, so the question was about do we use the DisplayMapper?

1260
00:49:21,692 --> 00:49:23,694
Can the users use it to adjust the viewing environments?

1261
00:49:24,115 --> 00:49:25,257
It's a really, really good question.

1262
00:49:25,297 --> 00:49:27,480
And I haven't touched at all on viewing environments.

1263
00:49:28,622 --> 00:49:30,144
I kind of deliberately didn't do that because I didn't think

1264
00:49:30,184 --> 00:49:30,685
I'd have time.

1265
00:49:32,027 --> 00:49:33,509
I probably should have gone into it because I have a

1266
00:49:33,549 --> 00:49:34,049
couple of minutes.

1267
00:49:36,575 --> 00:49:39,615
Yeah, this is only about the end-to-end pipeline

1268
00:49:39,655 --> 00:49:40,536
to produce the final image.

1269
00:49:41,436 --> 00:49:44,277
Viewing environment makes a really, really big difference

1270
00:49:44,377 --> 00:49:45,497
to how an image will look.

1271
00:49:45,737 --> 00:49:47,617
You could have a very dark, light-controlled room,

1272
00:49:47,797 --> 00:49:48,618
and everything looks great.

1273
00:49:48,938 --> 00:49:50,538
You could then have a really bright living room,

1274
00:49:50,558 --> 00:49:51,858
and everything will not look good.

1275
00:49:51,918 --> 00:49:55,099
So yes, the display mapper should

1276
00:49:55,199 --> 00:49:59,300
be used with user controls for adjusting gamma, brightness,

1277
00:49:59,340 --> 00:50:00,320
contrast, and things like that.

1278
00:50:00,641 --> 00:50:01,501
We currently don't.

1279
00:50:02,579 --> 00:50:04,460
But yes, that would be the perfect place for it.

1280
00:50:05,281 --> 00:50:09,024
And actually, Timothy Lotz did a talk last year on VDR.

1281
00:50:09,144 --> 00:50:10,825
Yeah, that was extremely cool as well.

1282
00:50:10,885 --> 00:50:12,106
And I recommend checking that out.

1283
00:50:12,766 --> 00:50:14,848
And if I can, a second one very quickly.

1284
00:50:15,488 --> 00:50:17,810
How do you present all this to your artists?

1285
00:50:17,950 --> 00:50:21,713
I imagine that not everybody will have 16-inch TV

1286
00:50:21,753 --> 00:50:23,734
under their desk.

1287
00:50:24,475 --> 00:50:26,056
So does every artist have an HDR TV?

1288
00:50:26,256 --> 00:50:27,037
No, no, no, definitely not.

1289
00:50:30,587 --> 00:50:33,511
So the vast majority of the artists

1290
00:50:33,651 --> 00:50:37,816
run the display mapper in SDR on a vaguely calibrated desktop

1291
00:50:37,836 --> 00:50:38,236
monitor.

1292
00:50:38,657 --> 00:50:40,078
And these projectors aren't HDR.

1293
00:50:40,138 --> 00:50:42,862
So everything you've seen today is the SDR version.

1294
00:50:43,002 --> 00:50:45,885
It's the most aggressively display mapped SDR version.

1295
00:50:46,545 --> 00:50:48,506
So because it preserves hue, actually,

1296
00:50:48,526 --> 00:50:51,047
it's really helping effects artists to create their content

1297
00:50:51,107 --> 00:50:52,207
even without an HDR TV.

1298
00:50:52,907 --> 00:50:54,908
So it's presented as it would be

1299
00:50:54,968 --> 00:50:56,388
to anyone playing a game at home.

1300
00:50:56,468 --> 00:50:58,749
The display mapper is most aggressive on an SDR monitor,

1301
00:50:59,229 --> 00:51:01,110
less aggressive if they do plug in an HDR TV.

1302
00:51:01,690 --> 00:51:03,310
It seems to be going pretty well.

1303
00:51:03,631 --> 00:51:06,011
And in DaVinci Resolve, we've run,

1304
00:51:06,571 --> 00:51:10,713
generated a view LUT for the most aggressive SDR version.

1305
00:51:10,733 --> 00:51:12,133
So it's a WYSIWYG workflow in Resolve.

1306
00:51:12,153 --> 00:51:14,254
man 2 I guess you have very good materials

1307
00:51:14,274 --> 00:51:15,454
because we noticed this that...

1308
00:51:16,418 --> 00:51:19,922
your highlights or your levels when they're crushed by the SDR.

1309
00:51:20,343 --> 00:51:22,526
The artists don't see that sometimes.

1310
00:51:23,027 --> 00:51:25,850
So when you switch to HDR, you immediately notice things

1311
00:51:25,910 --> 00:51:27,572
that are not really VR enough.

1312
00:51:28,548 --> 00:51:30,968
Something else the artist can do, because they can type in

1313
00:51:31,088 --> 00:51:33,329
the theoretical peak luma of the SDR TV.

1314
00:51:33,789 --> 00:51:34,789
If they really want to, they could type in

1315
00:51:34,829 --> 00:51:35,629
like 2,000 or 10,000.

1316
00:51:36,370 --> 00:51:38,270
And it will stop the image down multiple times so they

1317
00:51:38,290 --> 00:51:39,350
can actually see the original highlights.

1318
00:51:39,670 --> 00:51:42,851
There's roughly 100 to 1 improvement in available range

1319
00:51:42,911 --> 00:51:45,872
in color grading by switching to HDR from SDR.

1320
00:51:46,252 --> 00:51:47,912
So there's a huge amount you can play with in there.

1321
00:51:48,012 --> 00:51:50,413
You can completely re-expose it in post-processing and not

1322
00:51:50,433 --> 00:51:51,473
really lose any information.

1323
00:51:51,513 --> 00:51:52,093
It's really nice.

1324
00:51:53,233 --> 00:51:53,473
Thank you.

1325
00:51:55,095 --> 00:51:55,596
Hi, Alex.

1326
00:51:55,716 --> 00:51:56,616
Great talk.

1327
00:51:56,816 --> 00:51:57,957
Just a really simple question.

1328
00:51:57,997 --> 00:51:59,918
You mentioned reintroducing the hue shift,

1329
00:52:00,038 --> 00:52:02,200
and I was wondering if you could elaborate on how you did that.

1330
00:52:02,240 --> 00:52:03,100
Was it quite simple?

1331
00:52:03,620 --> 00:52:04,081
Absolutely.

1332
00:52:04,781 --> 00:52:05,642
Yes, it was very simple.

1333
00:52:05,742 --> 00:52:08,603
We would literally run a 1D version

1334
00:52:08,643 --> 00:52:12,706
of the shoulder of R, G, and B, and then the Chromaluma one,

1335
00:52:12,726 --> 00:52:13,606
and just blend between them.

1336
00:52:13,807 --> 00:52:14,047
Right.

1337
00:52:14,127 --> 00:52:15,127
I thought it might be something like that.

1338
00:52:15,167 --> 00:52:15,407
Thanks.

1339
00:52:15,708 --> 00:52:21,311
Yeah.

1340
00:52:21,351 --> 00:52:22,031
Any more questions?

1341
00:52:22,760 --> 00:52:24,180
I have one.

1342
00:52:24,560 --> 00:52:25,701
Wonderful talk, thank you.

1343
00:52:26,881 --> 00:52:28,961
Yeah, I just wondered, because you mentioned that you're

1344
00:52:29,102 --> 00:52:33,983
mastering in HDR with your final kind of tweaks and

1345
00:52:34,143 --> 00:52:38,924
grades, what kind of display are you using to do that?

1346
00:52:42,685 --> 00:52:43,446
It depends.

1347
00:52:43,466 --> 00:52:45,826
So the question was about what display do you use to master.

1348
00:52:46,626 --> 00:52:48,327
So it really does depend.

1349
00:52:49,976 --> 00:52:53,178
For the majority of artists that are color critical

1350
00:52:53,398 --> 00:52:56,459
or doing color grading, they would probably

1351
00:52:56,519 --> 00:52:58,860
have either a calibrated monitor or something

1352
00:52:58,920 --> 00:53:00,981
like an ISO, a hardware calibrated monitor

1353
00:53:01,001 --> 00:53:03,062
with a shield around it to shield them from light.

1354
00:53:03,683 --> 00:53:04,763
And that's a color critical work.

1355
00:53:04,783 --> 00:53:05,804
It's a high bit depth monitor.

1356
00:53:05,844 --> 00:53:07,485
And they can grade in HDR, and they still

1357
00:53:07,525 --> 00:53:08,685
get all the results they need.

1358
00:53:09,726 --> 00:53:13,788
However, you can also buy, for roughly $30,000,

1359
00:53:14,508 --> 00:53:17,790
Sony grading monitors.

1360
00:53:17,810 --> 00:53:18,490
And others are coming.

1361
00:53:20,756 --> 00:53:24,918
The ideal situation would be is that every game studio,

1362
00:53:24,938 --> 00:53:26,558
rather than game team, but every location,

1363
00:53:27,219 --> 00:53:30,260
would figure out how to fund buying one of these.

1364
00:53:30,560 --> 00:53:32,881
And they would share it and share it between teams.

1365
00:53:33,381 --> 00:53:37,503
We've been very lucky that Dolby have a reference monitor.

1366
00:53:38,343 --> 00:53:41,504
and called Amaui, of which there are not very many in the world.

1367
00:53:41,584 --> 00:53:43,585
But they can loan them out to different people

1368
00:53:44,406 --> 00:53:46,086
to help accelerate the adoption of HDR.

1369
00:53:46,467 --> 00:53:47,927
And we were lucky enough to borrow a few of those.

1370
00:53:48,568 --> 00:53:50,588
So for some artists, they were very, very fortunate

1371
00:53:50,649 --> 00:53:53,710
to run on a roughly 2,000 net reference grading monitor.

1372
00:53:54,290 --> 00:53:58,052
But if you were to use one of those ISO monitors,

1373
00:53:58,312 --> 00:53:58,512
are they?

1374
00:53:59,413 --> 00:54:02,874
Are they high net?

1375
00:54:03,275 --> 00:54:04,695
ISOs are just standard dynamic range.

1376
00:54:04,735 --> 00:54:05,815
So you're really grading color.

1377
00:54:06,375 --> 00:54:08,116
But you can wipe the exposure up and down.

1378
00:54:08,156 --> 00:54:09,256
So you can really see what's going on.

1379
00:54:09,796 --> 00:54:13,197
And typically what you would do is run on a live version of

1380
00:54:13,217 --> 00:54:16,578
the game in parallel with that running on, say, an Xbox or a

1381
00:54:16,618 --> 00:54:19,099
PlayStation connected to a relatively cheap, off-the-shelf

1382
00:54:19,159 --> 00:54:20,719
HDR TV just to validate side by side.

1383
00:54:21,180 --> 00:54:23,520
And because it's a live workflow, you would get your

1384
00:54:23,900 --> 00:54:24,681
feedback on both.

1385
00:54:25,081 --> 00:54:26,961
And it is really important to test on a lot of different

1386
00:54:26,981 --> 00:54:27,781
TVs, by the way.

1387
00:54:27,821 --> 00:54:27,921
So.

1388
00:54:28,442 --> 00:54:31,302
You would probably end up within QA taking this version

1389
00:54:31,543 --> 00:54:33,343
where the artist has played on one HDR TV.

1390
00:54:34,103 --> 00:54:37,524
And then QA would very quickly run it through a suite of

1391
00:54:37,564 --> 00:54:40,625
different TVs from OLED to LCD and just test.

1392
00:54:40,685 --> 00:54:41,946
So it's quite scalable.

1393
00:54:42,106 --> 00:54:43,326
You might just work on SDR.

1394
00:54:43,546 --> 00:54:45,827
You might work on SDR and a console connected to HDR.

1395
00:54:46,047 --> 00:54:47,147
You might be lucky enough to have a

1396
00:54:47,167 --> 00:54:48,127
reference grading monitor.

1397
00:54:49,108 --> 00:54:50,248
It's fairly scalable.

1398
00:54:51,348 --> 00:54:51,689
Thanks.

1399
00:54:52,409 --> 00:54:52,629
Sure.

1400
00:54:55,050 --> 00:54:55,630
I believe we're done.

1401
00:54:55,930 --> 00:54:56,850
Thank you very much for coming.

1402
00:54:56,890 --> 00:54:57,530
Much appreciated.

