1
00:00:06,737 --> 00:00:09,879
I'd like to begin by extending my condolences

2
00:00:09,899 --> 00:00:10,879
to all of you who did not,

3
00:00:11,079 --> 00:00:12,580
or were not able to make it

4
00:00:12,620 --> 00:00:14,461
into the experimental gameplay session

5
00:00:15,362 --> 00:00:16,622
that's going on right now.

6
00:00:17,202 --> 00:00:17,963
Sorry about that.

7
00:00:18,563 --> 00:00:23,065
But you'll have to, I guess, accept me as the second place.

8
00:00:24,206 --> 00:00:25,306
My name is Fletcher Dunn,

9
00:00:25,507 --> 00:00:28,628
and I hope you're here to learn a little bit

10
00:00:28,728 --> 00:00:30,249
about denial of service mitigation

11
00:00:30,489 --> 00:00:32,490
and how we've been approaching that problem.

12
00:00:35,438 --> 00:00:37,759
I've been making video games for about 22 years now,

13
00:00:37,859 --> 00:00:39,740
last eight or so of those at Valve.

14
00:00:40,440 --> 00:00:42,461
And about the last two or three of those at Valve,

15
00:00:42,481 --> 00:00:45,062
I've been working on this specific problem.

16
00:00:46,262 --> 00:00:47,562
We got a lot of stuff to cover,

17
00:00:47,582 --> 00:00:48,843
so I'm gonna just jump right in.

18
00:00:50,023 --> 00:00:51,544
This is what we're gonna be talking about today.

19
00:00:51,564 --> 00:00:56,585
I'm gonna give a quick overview of what a DOS attack is

20
00:00:56,705 --> 00:00:59,927
and review some history of our experience with that problem.

21
00:01:01,214 --> 00:01:05,716
We're going to talk about how you can try to approach the problem at the network layer.

22
00:01:05,736 --> 00:01:08,218
We're going to see there's a bunch of shortcomings with that approach.

23
00:01:08,638 --> 00:01:11,460
We're going to take a brief detour and talk about websites.

24
00:01:11,620 --> 00:01:14,961
How is it different to protect a website from a game?

25
00:01:15,502 --> 00:01:19,284
And how are websites protected from DOS attack?

26
00:01:19,324 --> 00:01:25,667
And hopefully that's going to lead to the thinking that led to our solution that we've come up with.

27
00:01:27,242 --> 00:01:28,862
Then we will discuss our solution,

28
00:01:28,882 --> 00:01:29,923
we're gonna talk about how it works

29
00:01:30,203 --> 00:01:32,643
and the network infrastructure that makes it possible.

30
00:01:34,724 --> 00:01:36,945
And some really interesting unexpected benefits

31
00:01:37,005 --> 00:01:37,885
that it has given us.

32
00:01:38,846 --> 00:01:40,446
Finally, we'll do some practical takeaways.

33
00:01:40,686 --> 00:01:43,127
And specifically, we're gonna talk about

34
00:01:43,147 --> 00:01:44,828
how you can take advantage of the solution

35
00:01:44,868 --> 00:01:45,488
we've come up with.

36
00:01:47,289 --> 00:01:52,851
Okay, so when you think about network security,

37
00:01:52,871 --> 00:01:55,532
you probably think of a hacker, right?

38
00:01:56,293 --> 00:01:58,814
Somebody's cleverly breaking in, they're sneaking in,

39
00:01:58,854 --> 00:02:00,495
they're picking the lock and they're exfiltrating

40
00:02:00,515 --> 00:02:04,278
with the data without anybody knowing that they were there.

41
00:02:05,058 --> 00:02:06,559
That's not what we're talking about today, right?

42
00:02:06,899 --> 00:02:10,081
The problem we face is more like this, okay?

43
00:02:10,582 --> 00:02:12,223
So we're talking about DDoS attacks.

44
00:02:13,080 --> 00:02:17,043
So the first D in DDOS is distributed, right?

45
00:02:17,084 --> 00:02:19,365
There's a whole bunch of these internet hosts out there

46
00:02:19,405 --> 00:02:21,947
and they're flooding our system with packets

47
00:02:22,208 --> 00:02:23,949
and in an effort to overwhelm,

48
00:02:25,090 --> 00:02:28,693
relatively low level on the network stack with packets.

49
00:02:29,253 --> 00:02:31,114
And DOS, they're not trying to get in.

50
00:02:32,135 --> 00:02:33,636
They're trying to deny service.

51
00:02:33,797 --> 00:02:35,638
So they're just trying to block

52
00:02:35,738 --> 00:02:37,620
other legitimate traffic from getting in, right?

53
00:02:40,001 --> 00:02:41,342
So let's talk a little bit about history.

54
00:02:42,268 --> 00:02:45,730
cast your mind back, if you will, to 2014.

55
00:02:46,771 --> 00:02:47,031
Okay?

56
00:02:48,312 --> 00:02:49,472
Obama's in the White House,

57
00:02:49,853 --> 00:02:53,095
and famous people are dumping buckets of water on themselves.

58
00:02:54,255 --> 00:02:56,176
And sometime around in October,

59
00:02:56,216 --> 00:03:00,279
we start to see an uptick in the complaints about DOS attacks.

60
00:03:00,779 --> 00:03:02,760
And this is Dota and CSGO,

61
00:03:02,820 --> 00:03:04,522
and we know that other games as well.

62
00:03:04,762 --> 00:03:06,223
There's really been an uptick in this problem.

63
00:03:06,443 --> 00:03:07,443
This is what Reddit looks like.

64
00:03:07,744 --> 00:03:10,425
And then at Christmas 2014, you may recall...

65
00:03:11,991 --> 00:03:14,915
This dork ruins Christmas for everybody.

66
00:03:16,617 --> 00:03:18,259
In January 2015, that's when we started

67
00:03:18,299 --> 00:03:19,280
working on our solution.

68
00:03:21,303 --> 00:03:23,746
So in 2015, the problem starts to get worse

69
00:03:24,046 --> 00:03:25,628
and we see the...

70
00:03:27,235 --> 00:03:28,858
highest point during that year.

71
00:03:28,878 --> 00:03:31,020
Kind of the problem hits its highest point.

72
00:03:31,041 --> 00:03:33,484
I don't know if you remember, there were like lizards

73
00:03:33,544 --> 00:03:35,807
and poodles running around on Twitter talking about

74
00:03:35,827 --> 00:03:38,911
their booter services and bragging about it.

75
00:03:39,231 --> 00:03:42,295
And then in August, the International was disrupted

76
00:03:42,376 --> 00:03:43,878
for nearly an hour.

77
00:03:45,883 --> 00:03:48,345
So after that, towards the end of 2015,

78
00:03:48,445 --> 00:03:51,226
really DOS started dropping off for a problem for us.

79
00:03:52,607 --> 00:03:55,389
By that time, our relay, the solution

80
00:03:55,409 --> 00:03:57,470
that we had come up with, had been deployed.

81
00:03:57,890 --> 00:03:59,631
And we know that we were still getting attacked,

82
00:03:59,691 --> 00:04:01,372
but the attacks weren't as successful.

83
00:04:01,793 --> 00:04:03,413
So I'm thinking, well, you know.

84
00:04:04,274 --> 00:04:09,899
maybe we deserve some credit for this because I know that other games, it seems like they did have a little bit of a problem.

85
00:04:10,380 --> 00:04:12,282
Their problems lingered just a little bit longer.

86
00:04:12,542 --> 00:04:17,026
But honestly, we don't really know why our problems dropped off.

87
00:04:17,486 --> 00:04:19,748
Maybe the attackers just chose a different target.

88
00:04:20,209 --> 00:04:22,211
But the biggest factor may have just been law enforcement.

89
00:04:22,771 --> 00:04:25,693
So in 2016, the lizards and the poodles got rolled up,

90
00:04:26,353 --> 00:04:29,035
and the FBI hacked their tools,

91
00:04:29,335 --> 00:04:31,717
and it led to the arrest of some Israeli teenagers,

92
00:04:31,877 --> 00:04:33,418
this VDOS group,

93
00:04:33,618 --> 00:04:35,199
and they ended up being the real masterminds.

94
00:04:35,639 --> 00:04:38,141
And one of those guys, Applejack, was a big Dota player.

95
00:04:38,321 --> 00:04:42,224
So since then, denial of service has been in the news,

96
00:04:42,684 --> 00:04:45,886
but really not for games that much, at least not for us.

97
00:04:46,666 --> 00:04:50,649
So I'm reviewing this history, and I'm thinking,

98
00:04:52,442 --> 00:04:54,123
I'm going to give a talk about DOS."

99
00:04:54,223 --> 00:04:56,344
And this problem is not even relevant anymore.

100
00:04:56,444 --> 00:04:58,024
Nobody is going to show up.

101
00:04:58,064 --> 00:04:59,605
Are we all just sitting here wasting our time?

102
00:05:00,966 --> 00:05:02,846
And then, of course, just a few weeks ago,

103
00:05:03,627 --> 00:05:06,188
there was this giant attack.

104
00:05:06,228 --> 00:05:08,849
So I hope that we can all agree that

105
00:05:09,429 --> 00:05:10,469
vandals are still vandals,

106
00:05:11,010 --> 00:05:13,611
and there's more poorly-secured devices on the Internet

107
00:05:13,631 --> 00:05:14,211
than ever before.

108
00:05:15,168 --> 00:05:20,133
And all these devices are powered by consumer connections

109
00:05:20,393 --> 00:05:21,595
that are more powerful than evermore.

110
00:05:21,615 --> 00:05:23,557
So I hope we all agree this topic's still relevant.

111
00:05:23,817 --> 00:05:26,299
Let's look at the targets that DOS attacks.

112
00:05:27,275 --> 00:05:29,957
So I think I want us all to keep in mind

113
00:05:29,977 --> 00:05:32,299
there's three basic constituencies we need to protect.

114
00:05:32,559 --> 00:05:34,161
First of all, we need to protect our game servers.

115
00:05:34,781 --> 00:05:36,743
So the reason people attack game servers

116
00:05:36,763 --> 00:05:38,304
is of course to vandalize,

117
00:05:38,324 --> 00:05:41,307
and they also wanna cheat, right?

118
00:05:41,327 --> 00:05:43,228
So if I'm on a game server, I start to lose,

119
00:05:43,288 --> 00:05:46,051
I nuke the game server, then my loss is not recorded.

120
00:05:47,032 --> 00:05:49,434
So game servers are gonna be a focus of this talk,

121
00:05:49,494 --> 00:05:50,595
one of the focuses of this talk.

122
00:05:51,195 --> 00:05:53,817
Another constituency is your backend.

123
00:05:54,784 --> 00:05:57,966
And when I say back-end, I'm referring to any sort of centralized service, right?

124
00:05:58,006 --> 00:06:02,288
Account logon, econ, matchmaking, anything like that.

125
00:06:02,668 --> 00:06:04,789
So why do they want to attack that? Vandalize.

126
00:06:05,610 --> 00:06:09,572
I'll have just a little bit of advice about how to protect your back-end,

127
00:06:09,592 --> 00:06:11,753
but it's not going to be the primary focus of this talk.

128
00:06:12,593 --> 00:06:15,255
And there's one more constituency. This is kind of a new one.

129
00:06:15,855 --> 00:06:18,977
Don't forget about these guys, and that is your players, right?

130
00:06:18,997 --> 00:06:21,778
Your players are on consumer connections that are easily overwhelmed.

131
00:06:21,798 --> 00:06:22,899
They're especially vulnerable.

132
00:06:24,310 --> 00:06:25,952
And you may think, well, that's okay,

133
00:06:25,992 --> 00:06:27,514
because if their IP gets revealed,

134
00:06:27,534 --> 00:06:31,098
they'll just renew DHCP, they'll get a new IP, no big deal.

135
00:06:31,238 --> 00:06:33,200
Well, for a lot of people, that's not true.

136
00:06:34,402 --> 00:06:36,785
Their IP is gonna be a lot less dynamic than they would want

137
00:06:36,885 --> 00:06:38,266
and so once their IP is revealed

138
00:06:38,326 --> 00:06:39,267
and they start getting attacked,

139
00:06:39,548 --> 00:06:41,050
they may have problems for a long time.

140
00:06:41,967 --> 00:06:45,267
So the goals, why would I attack a person?

141
00:06:46,108 --> 00:06:47,568
Obviously to cheat, again,

142
00:06:47,628 --> 00:06:49,629
especially in a P2P network architecture.

143
00:06:49,649 --> 00:06:51,409
If I'm losing, I want to boot the winner off,

144
00:06:51,449 --> 00:06:53,630
or just, you know, I can maybe attack the host,

145
00:06:53,990 --> 00:06:57,410
same as a game server, and also to vandalize.

146
00:06:58,271 --> 00:07:00,151
And then you think, well, why do you want to attack

147
00:07:00,451 --> 00:07:02,632
some random person on the internet?

148
00:07:03,672 --> 00:07:06,093
And this is another kind of interesting thing that's new,

149
00:07:06,193 --> 00:07:06,433
is that

150
00:07:07,830 --> 00:07:11,112
We have people on the internet who are some random stranger

151
00:07:11,352 --> 00:07:14,774
who's playing your game, and if they get taken offline,

152
00:07:15,114 --> 00:07:17,035
your game loses a lot of value.

153
00:07:17,495 --> 00:07:20,637
We have very high-value, high-profile targets

154
00:07:20,657 --> 00:07:21,637
that are just out there on the internet

155
00:07:21,658 --> 00:07:22,678
that you don't have control over.

156
00:07:23,118 --> 00:07:24,639
Maybe they're playing in some tournament,

157
00:07:24,679 --> 00:07:26,360
maybe they're streaming their game

158
00:07:26,380 --> 00:07:28,141
from their house on Twitch, right?

159
00:07:28,601 --> 00:07:30,983
So we need to try to protect these people

160
00:07:31,023 --> 00:07:32,183
because when they get taken offline,

161
00:07:32,464 --> 00:07:34,225
we lose value, our game loses value.

162
00:07:36,439 --> 00:07:39,841
OK, so let's just quickly get a sense of scale.

163
00:07:40,322 --> 00:07:42,643
How big of an attack leads to what sort of damage?

164
00:07:43,344 --> 00:07:45,986
So here is a typical Valve data center

165
00:07:46,466 --> 00:07:48,748
with some racks of some game servers in it.

166
00:07:49,128 --> 00:07:52,430
Let's just talk about the scale of an attack moving

167
00:07:52,470 --> 00:07:54,912
from the smallest logical unit up to the largest.

168
00:07:55,432 --> 00:07:57,514
So first, these little red boxes there

169
00:07:58,094 --> 00:08:01,516
represent an individual process or an instance of, say,

170
00:08:01,556 --> 00:08:02,577
Dota or CSGO.

171
00:08:03,558 --> 00:08:03,678
And

172
00:08:04,835 --> 00:08:09,157
Usually the limit there is going to be in terms of packets per second, not bandwidth.

173
00:08:09,417 --> 00:08:14,399
So the thing that gets overwhelmed there is, you know, operating system buffers or something like that.

174
00:08:14,559 --> 00:08:18,901
And what happens is the operating system is going to stop, those buffers are going to be filled up,

175
00:08:19,581 --> 00:08:21,782
and the operating system will start dropping packets.

176
00:08:22,342 --> 00:08:26,623
And so if there's a bunch of junk traffic, the junk traffic crowds out the legitimate traffic,

177
00:08:26,883 --> 00:08:28,424
and you start dropping legitimate traffic.

178
00:08:29,305 --> 00:08:32,887
So if you've written some well-written code, reasonably well-written code,

179
00:08:33,627 --> 00:08:37,049
on the order of 250,000 packets a second is kind of where you're going to start having problems.

180
00:08:37,569 --> 00:08:40,191
If you do not have well-written code, if you have naive code,

181
00:08:40,211 --> 00:08:42,632
the limit is going to be much, much lower.

182
00:08:42,652 --> 00:08:45,033
Like, 100 packets a second, 1,000 packets a second.

183
00:08:46,594 --> 00:08:50,856
So we'll talk a little bit more about what you can do to deal with that.

184
00:08:51,036 --> 00:08:53,957
Okay, so moving up a little bit bigger attack may be able to take out a box.

185
00:08:54,017 --> 00:08:56,879
If it's in our data centers, most of our box have 10 gig NICs.

186
00:08:57,439 --> 00:09:00,060
And that's usually the thing that gets overwhelmed is the NIC.

187
00:09:02,502 --> 00:09:07,324
A little bit bigger attack may overwhelm enough to take out a whole rack.

188
00:09:08,673 --> 00:09:10,575
And usually the thing that gets overwhelmed there

189
00:09:10,615 --> 00:09:12,477
is not the switches, but it's the links

190
00:09:12,537 --> 00:09:15,501
between the top of rack switches and the box,

191
00:09:15,661 --> 00:09:19,885
or excuse me, between that top aggregate switch

192
00:09:20,346 --> 00:09:21,827
and the top of rack switches.

193
00:09:21,908 --> 00:09:23,269
Usually those links get overwhelmed

194
00:09:23,569 --> 00:09:27,273
somewhere between 2080 and gigabit in our data centers.

195
00:09:28,662 --> 00:09:31,605
Of course, a bigger attack may overwhelm maybe some links

196
00:09:31,665 --> 00:09:33,246
between specific ISPs.

197
00:09:33,266 --> 00:09:35,728
And if that happens, those customers, that ISP

198
00:09:35,748 --> 00:09:36,328
gets knocked out.

199
00:09:36,589 --> 00:09:38,770
Or maybe the whole data center goes offline.

200
00:09:38,790 --> 00:09:42,113
This is a truly tremendous attack.

201
00:09:42,373 --> 00:09:44,395
So depending on the data center, how many leaks are

202
00:09:44,435 --> 00:09:47,478
coming in, for us it's about 40 gigabit to 2 terabit.

203
00:09:48,959 --> 00:09:52,742
So it's important to realize that all these processes in

204
00:09:52,782 --> 00:09:54,603
this diagram are all the same color.

205
00:09:55,351 --> 00:09:57,553
but they're not necessarily running the same game, right?

206
00:09:57,613 --> 00:10:00,194
So if somebody is targeting a Dota game

207
00:10:01,235 --> 00:10:04,558
and their attack is effective, they

208
00:10:04,598 --> 00:10:05,758
may not just take out the process.

209
00:10:05,778 --> 00:10:06,919
They may not just take out their box.

210
00:10:07,099 --> 00:10:09,181
They may end up disrupting communication

211
00:10:09,221 --> 00:10:11,462
for the whole rack, and a bunch of CSGO servers go down.

212
00:10:11,723 --> 00:10:13,904
Or we're hosting some game servers to third parties.

213
00:10:13,944 --> 00:10:15,645
The third party's games might go down.

214
00:10:15,986 --> 00:10:17,727
And the situation applies to you.

215
00:10:18,307 --> 00:10:20,209
And everybody's not operating at this scale,

216
00:10:20,449 --> 00:10:22,070
and everybody doesn't have enough servers

217
00:10:22,090 --> 00:10:23,871
to fill up racks in a data center.

218
00:10:23,891 --> 00:10:25,072
But if you're in your cloud provider.

219
00:10:25,405 --> 00:10:27,766
just be aware that there's collateral damage going on.

220
00:10:27,806 --> 00:10:29,546
So just because if your game is targeted,

221
00:10:29,586 --> 00:10:30,667
it may affect somebody else.

222
00:10:30,927 --> 00:10:32,067
If somebody else's game is targeted,

223
00:10:32,107 --> 00:10:34,367
or just some product that has nothing to do with games,

224
00:10:34,747 --> 00:10:35,568
it can affect your game.

225
00:10:36,648 --> 00:10:40,529
So the largest attacks we faced were,

226
00:10:41,089 --> 00:10:44,090
historically there was a botnet reflection attack

227
00:10:44,230 --> 00:10:47,190
that was able to sustain multi-hundred gigabits.

228
00:10:47,930 --> 00:10:50,611
of bandwidth coming in to a particular IP.

229
00:10:51,391 --> 00:10:52,591
And then we also had another attack

230
00:10:52,651 --> 00:10:54,091
where we were getting 500 million

231
00:10:54,472 --> 00:10:55,932
empty UDP packets a second.

232
00:10:55,972 --> 00:10:57,472
So that was apparently the attack

233
00:10:57,512 --> 00:10:59,233
that they chose to do then.

234
00:10:59,853 --> 00:11:02,114
And the recent ones that was in the headline,

235
00:11:02,174 --> 00:11:04,074
the memcache reflection attacks,

236
00:11:04,494 --> 00:11:05,174
we were hit by that,

237
00:11:05,234 --> 00:11:06,575
but it didn't cause any disruption.

238
00:11:07,855 --> 00:11:07,975
Okay.

239
00:11:08,750 --> 00:11:10,070
So we've talked about the problem in general.

240
00:11:10,871 --> 00:11:13,172
Next, I want to talk about how you can try to solve it

241
00:11:13,232 --> 00:11:14,032
at the network layer.

242
00:11:14,392 --> 00:11:15,753
So when I talk about network layer,

243
00:11:15,813 --> 00:11:18,694
I mean we've got some UDP packet flows,

244
00:11:18,795 --> 00:11:22,176
and we're not going to change that traffic pattern.

245
00:11:22,796 --> 00:11:25,678
We're just going to have our switch or our hardware device

246
00:11:25,958 --> 00:11:29,860
that's sort of like analyzing that and trying to filter

247
00:11:29,880 --> 00:11:30,660
the good from the bad.

248
00:11:30,780 --> 00:11:33,401
And it's operating relatively low on the stack.

249
00:11:34,593 --> 00:11:36,914
So the main point here is basically that

250
00:11:36,994 --> 00:11:38,194
it's just really hard, okay?

251
00:11:38,214 --> 00:11:41,776
So for UDP, you've got packets coming in.

252
00:11:42,736 --> 00:11:45,237
We're probably not gonna have enough time.

253
00:11:45,257 --> 00:11:46,197
The packet rate's really high

254
00:11:46,257 --> 00:11:47,438
relative to the compute available.

255
00:11:47,618 --> 00:11:49,398
We're not gonna be cracking open the packet,

256
00:11:49,418 --> 00:11:51,639
looking inside, doing any sort of

257
00:11:52,340 --> 00:11:54,340
advanced stateful packet inspection or anything like that.

258
00:11:54,380 --> 00:11:55,901
So it's just gonna be really difficult

259
00:11:55,921 --> 00:11:57,101
for us to tell good from bad.

260
00:12:00,907 --> 00:12:03,368
But it gets worse because many of you probably know

261
00:12:03,408 --> 00:12:06,329
that IP source addresses are trivially spoofed.

262
00:12:06,569 --> 00:12:08,590
I'm on the internet, I send a packet,

263
00:12:08,850 --> 00:12:11,431
I can claim to be from any IP address I want,

264
00:12:11,471 --> 00:12:12,452
and it's trivial to do that.

265
00:12:13,712 --> 00:12:17,194
So basically, the way to think about addressing

266
00:12:17,234 --> 00:12:19,374
the problem with a network filter is kind of like this gate.

267
00:12:20,275 --> 00:12:25,177
So any UDP traffic that's bound to your server's port

268
00:12:25,777 --> 00:12:27,618
is probably just gonna go through the gate,

269
00:12:28,118 --> 00:12:29,638
or gonna go around the gate, I should say.

270
00:12:30,986 --> 00:12:33,268
But despite these limitations, network solutions

271
00:12:33,348 --> 00:12:34,569
are going to play an important role.

272
00:12:34,589 --> 00:12:36,010
So let's just talk about what that is.

273
00:12:36,250 --> 00:12:38,091
The first thing is that there's obviously

274
00:12:38,171 --> 00:12:41,013
junk packets that you can filter out as far out at the network

275
00:12:41,073 --> 00:12:41,854
edge as you can.

276
00:12:42,254 --> 00:12:44,095
For example, if you're not running any web servers

277
00:12:44,636 --> 00:12:45,957
in your rack, block port 80.

278
00:12:46,037 --> 00:12:48,238
If you're not running NTP, block port 123.

279
00:12:48,639 --> 00:12:51,641
So obviously, junk packets can be blocked

280
00:12:51,661 --> 00:12:52,722
by their destination address.

281
00:12:53,082 --> 00:12:56,484
You may also want to block based on the port.

282
00:12:57,105 --> 00:12:58,945
the sender's port, right, the source port.

283
00:12:59,145 --> 00:13:00,546
You think, well, why would I do that?

284
00:13:01,326 --> 00:13:03,606
Can't the sender just assign any port they want?

285
00:13:03,986 --> 00:13:06,627
There's one very important case where they cannot,

286
00:13:06,687 --> 00:13:08,147
and that is a reflection attack.

287
00:13:08,667 --> 00:13:10,788
So if you recall, this is what a reflection attack looks like.

288
00:13:10,848 --> 00:13:11,968
I've got some attacker.

289
00:13:13,228 --> 00:13:15,849
And he spoofs his source address,

290
00:13:15,929 --> 00:13:18,149
and he sends a relatively small request

291
00:13:18,209 --> 00:13:20,890
to some good faith actor out on the internet

292
00:13:21,250 --> 00:13:22,750
using a ubiquitous protocol.

293
00:13:23,187 --> 00:13:26,309
that such as NTP or memcache or something like that.

294
00:13:26,729 --> 00:13:29,651
And the key thing is that this good faith actor out there

295
00:13:29,691 --> 00:13:31,652
is going to reply to the source address,

296
00:13:31,692 --> 00:13:33,553
which is you, the target of the attack,

297
00:13:33,993 --> 00:13:37,475
and the reply is bigger than the initial attacker's request.

298
00:13:37,755 --> 00:13:39,296
So by doing this, he's able to gain leverage.

299
00:13:39,557 --> 00:13:41,658
He sends a certain amount of traffic

300
00:13:41,938 --> 00:13:43,739
to the good faith actor, and the good faith actor

301
00:13:43,839 --> 00:13:45,700
sends more than that amount of traffic to you.

302
00:13:46,842 --> 00:13:49,704
And the thing is that the good faith actor who's out there is going to use a specific,

303
00:13:50,224 --> 00:13:53,986
he's obeying the rules, he's going to use a specific source address that can be blocked.

304
00:13:54,666 --> 00:13:56,447
A source port that you can block.

305
00:14:00,509 --> 00:14:04,491
The other thing you can do at the network layer is block various protocol attacks

306
00:14:04,571 --> 00:14:06,712
like SYNFLOOD or HTTP SLOW, right?

307
00:14:06,732 --> 00:14:08,813
There's these ubiquitous protocols that are in use.

308
00:14:09,348 --> 00:14:12,095
And even though I realize that's not technically at the network

309
00:14:12,135 --> 00:14:15,342
layer, most of the devices can look a little bit higher

310
00:14:15,362 --> 00:14:19,311
up the stack, and they can block those types of attacks out.

311
00:14:20,170 --> 00:14:21,271
And that's really important to be able to do.

312
00:14:22,031 --> 00:14:24,593
The final case is when there's an emergency.

313
00:14:24,853 --> 00:14:27,434
So let's say you're under attack.

314
00:14:27,814 --> 00:14:28,635
Stuff is on fire.

315
00:14:28,775 --> 00:14:30,316
There's one IP that's getting attacked.

316
00:14:30,776 --> 00:14:33,017
And there's collateral damage.

317
00:14:33,517 --> 00:14:34,978
They were able to take out that box,

318
00:14:35,018 --> 00:14:37,920
but the damage is spilling over to other boxes in the rack

319
00:14:37,980 --> 00:14:40,601
or other things that are along the path there.

320
00:14:40,701 --> 00:14:44,283
So what you can do, just black hole that IP and just block it.

321
00:14:45,263 --> 00:14:48,746
put out the fire, and maybe sacrifice that IP.

322
00:14:48,766 --> 00:14:49,786
So there's lots of things like that,

323
00:14:49,826 --> 00:14:51,447
where just in the middle of an emergency,

324
00:14:51,487 --> 00:14:53,068
you can't craft a rule that always works,

325
00:14:53,088 --> 00:14:55,330
but you can craft a rule that will put out the fire.

326
00:14:55,630 --> 00:14:57,191
So that's a very important role for networking,

327
00:14:57,812 --> 00:14:59,212
filtering at the network to play.

328
00:15:01,434 --> 00:15:03,675
So network filtering, it does play an important role,

329
00:15:03,715 --> 00:15:06,617
but just like this left-hand path there,

330
00:15:07,037 --> 00:15:08,819
any UDP traffic to your source port

331
00:15:08,859 --> 00:15:09,619
is probably getting through.

332
00:15:09,699 --> 00:15:12,381
So doing it at the network layer is not sufficient.

333
00:15:16,688 --> 00:15:20,369
Okay, let's take a brief detour and talk about websites.

334
00:15:21,669 --> 00:15:24,370
I want to talk about what's hard about games,

335
00:15:24,790 --> 00:15:26,631
why are websites easier to defend than games,

336
00:15:27,331 --> 00:15:29,632
and what can we learn from thinking about

337
00:15:29,672 --> 00:15:30,792
how websites are protected.

338
00:15:31,252 --> 00:15:33,933
And hopefully, at the end of this little discussion,

339
00:15:33,973 --> 00:15:36,474
you'll think, oh, of course, that's the correct solution,

340
00:15:36,634 --> 00:15:37,514
the thing that we came up with,

341
00:15:37,634 --> 00:15:39,415
which obviously I think is the correct solution.

342
00:15:39,655 --> 00:15:40,955
I hope to convince you of that too.

343
00:15:42,036 --> 00:15:42,156
Okay.

344
00:15:44,682 --> 00:15:50,625
So it's 2015 and we're totally getting our butts kicked by DOS.

345
00:15:50,945 --> 00:15:57,148
And we're thinking, games are just hard.

346
00:15:57,308 --> 00:16:00,990
I just wish I worked for Amazon, because then it'd be so easy

347
00:16:01,490 --> 00:16:02,330
defending a website.

348
00:16:02,471 --> 00:16:06,252
I mean, on most websites, if I'm shopping on Amazon,

349
00:16:06,512 --> 00:16:07,833
I'm just dealing with my own data.

350
00:16:08,253 --> 00:16:10,734
I'm like siloed.

351
00:16:11,034 --> 00:16:12,755
Whereas if I'm playing a game, I've got.

352
00:16:13,235 --> 00:16:15,276
multiple people connecting to the same box.

353
00:16:15,936 --> 00:16:20,937
And if I'm a vandal, then I can see the people

354
00:16:20,977 --> 00:16:22,838
that are gonna be affected by my attack, right?

355
00:16:22,958 --> 00:16:24,858
And I can taste their tears, you know?

356
00:16:25,158 --> 00:16:26,719
I can see it, I can witness the impact.

357
00:16:26,959 --> 00:16:30,240
If I'm on Amazon, who cares if I take down some box

358
00:16:30,300 --> 00:16:31,640
and it's just a bunch of random strangers?

359
00:16:31,740 --> 00:16:32,780
I'll never be able to see that.

360
00:16:33,080 --> 00:16:35,701
So in games, the incentive and the payoff for vandalizing

361
00:16:35,741 --> 00:16:37,061
is just cranked up so much.

362
00:16:37,601 --> 00:16:39,322
And then games have all this state, right?

363
00:16:39,342 --> 00:16:40,902
You think about how much state is in a game.

364
00:16:41,903 --> 00:16:45,505
all of the positions of all the entities and their health and their animation states

365
00:16:45,665 --> 00:16:48,626
and everything is changing continuously, right?

366
00:16:48,967 --> 00:16:52,288
I mean, you're on some website, you know, you're in some chat group or whatever,

367
00:16:52,729 --> 00:16:55,590
there's no state that changes unless you press the enter key

368
00:16:55,931 --> 00:17:00,413
to put some input, whereas in game, that state is changing continuously

369
00:17:00,553 --> 00:17:01,974
even if nobody's doing any input.

370
00:17:02,955 --> 00:17:04,015
It's just so much harder.

371
00:17:05,656 --> 00:17:08,118
And then games have stringent latency requirements, right?

372
00:17:08,943 --> 00:17:11,244
I mean, yeah, you listen to these talks by Google and Mac,

373
00:17:11,264 --> 00:17:12,965
we want to make our website snappy.

374
00:17:13,585 --> 00:17:14,445
Please, right?

375
00:17:15,226 --> 00:17:16,546
So yeah, that's great.

376
00:17:16,566 --> 00:17:17,547
You want to make it responsive.

377
00:17:17,587 --> 00:17:23,969
But can you keep low latency consistent for one hour sustained, right?

378
00:17:24,269 --> 00:17:26,890
If there's a hitch, you can't buffer it and hide that.

379
00:17:28,430 --> 00:17:30,371
Games just have these really difficult problems,

380
00:17:30,611 --> 00:17:31,691
and websites are so easy.

381
00:17:35,155 --> 00:17:37,576
But the worst part is that when you're making a game,

382
00:17:37,736 --> 00:17:40,637
you have to take very low level control over retransmission.

383
00:17:41,357 --> 00:17:44,319
So I'm going to send the position of some entity,

384
00:17:44,519 --> 00:17:45,699
and it's changing continuously.

385
00:17:46,680 --> 00:17:49,941
And if that message drops, I don't want to retransmit that.

386
00:17:50,361 --> 00:17:52,342
I want to retransmit the current value.

387
00:17:52,362 --> 00:17:54,403
Who cares what it was that you missed?

388
00:17:54,944 --> 00:17:56,344
Let's just send you what it is now.

389
00:17:56,704 --> 00:17:58,105
You can't do that if you use TCP.

390
00:17:58,145 --> 00:17:59,646
So that's why we all have to use UDP,

391
00:17:59,726 --> 00:18:01,947
because we're taking very low level control over what

392
00:18:01,967 --> 00:18:02,807
gets retransmitted.

393
00:18:03,953 --> 00:18:05,433
And UDP is hard, right? We just saw.

394
00:18:05,874 --> 00:18:07,294
UDP is really hard at the network layer.

395
00:18:07,774 --> 00:18:09,435
TCP is so much easier.

396
00:18:10,675 --> 00:18:11,396
Games are just hard,

397
00:18:11,816 --> 00:18:12,856
and if only we made websites.

398
00:18:12,876 --> 00:18:14,957
It would just be so much easier.

399
00:18:16,598 --> 00:18:16,978
And...

400
00:18:17,538 --> 00:18:18,518
Get off my lawn, you know?

401
00:18:19,219 --> 00:18:19,419
So...

402
00:18:22,700 --> 00:18:24,041
This is a whiny exaggeration,

403
00:18:25,781 --> 00:18:26,582
but I hope that...

404
00:18:28,283 --> 00:18:30,805
Maybe you've had similar thoughts like that, right?

405
00:18:31,466 --> 00:18:34,168
And the problem with this method of thinking

406
00:18:34,388 --> 00:18:37,650
is that it's a common engineer pitfall to think,

407
00:18:38,250 --> 00:18:41,573
my problems are so hard and my field is so difficult.

408
00:18:41,953 --> 00:18:43,534
If only I could do it in the other field.

409
00:18:43,554 --> 00:18:44,975
And the source of this thinking is because

410
00:18:45,035 --> 00:18:46,856
you don't know anything about the other field

411
00:18:46,896 --> 00:18:48,438
is what's really going on, right?

412
00:18:48,478 --> 00:18:50,499
They're facing different challenges

413
00:18:50,799 --> 00:18:52,340
and they have different things that are hard.

414
00:18:53,041 --> 00:18:56,443
So, you have to ask, you step back and you think,

415
00:18:56,463 --> 00:18:56,823
wait a second.

416
00:18:56,974 --> 00:18:58,155
Now, about those websites.

417
00:19:01,077 --> 00:19:03,458
Does network layer filtering work for websites?

418
00:19:04,279 --> 00:19:09,622
I mean, I know that HTTP is a TCB-based protocol.

419
00:19:10,643 --> 00:19:12,844
And so it's a little bit easier than UDP.

420
00:19:12,884 --> 00:19:13,885
It's a little more context.

421
00:19:14,606 --> 00:19:15,846
But is that really a magic bullet?

422
00:19:15,886 --> 00:19:17,788
Is that what's making these websites so much easier

423
00:19:17,808 --> 00:19:18,748
to defend against DOS?

424
00:19:19,889 --> 00:19:22,271
What is it exactly that makes websites easier?

425
00:19:23,367 --> 00:19:24,768
Well, as it turns out at Valve, we

426
00:19:24,808 --> 00:19:27,070
got a bunch of people that run some big websites.

427
00:19:27,430 --> 00:19:30,852
So what I did is I went down and I talked to those guys.

428
00:19:31,833 --> 00:19:34,515
And I learned that games have some unique challenges.

429
00:19:34,776 --> 00:19:37,318
All those things that I listed, those are legitimate.

430
00:19:37,398 --> 00:19:40,280
And not a single one of them has to do with DOS, actually.

431
00:19:41,681 --> 00:19:42,862
So let's look at a modern website.

432
00:19:43,602 --> 00:19:44,443
And we'll see what we can learn.

433
00:19:45,104 --> 00:19:46,044
So this is a modern website.

434
00:19:46,345 --> 00:19:47,465
It's built for scale.

435
00:19:47,606 --> 00:19:49,287
And a lot of the things that make it scale

436
00:19:49,307 --> 00:19:52,009
are also the things that make it able to defend against DOS.

437
00:19:52,959 --> 00:19:54,260
OK, so we've got this client.

438
00:19:54,280 --> 00:19:55,440
He wants to connect to the service.

439
00:19:56,301 --> 00:19:59,923
The first thing we notice is that he

440
00:20:00,643 --> 00:20:04,445
accesses the service via a DNS name, not IP.

441
00:20:04,825 --> 00:20:07,146
So this adds a layer of indirection,

442
00:20:07,347 --> 00:20:08,987
a very valuable layer of indirection

443
00:20:09,007 --> 00:20:12,109
that we can use as a tool to spread the load.

444
00:20:13,490 --> 00:20:15,371
We can use various DNS tricks.

445
00:20:15,951 --> 00:20:19,092
And you compare this to once a session starts on a game server,

446
00:20:19,332 --> 00:20:20,732
you've got the IP, right?

447
00:20:20,752 --> 00:20:23,293
There's no multiplexing or routing or anything.

448
00:20:23,313 --> 00:20:25,673
It's like you've got the IP, and that's the only way to talk to it.

449
00:20:26,093 --> 00:20:29,114
And you might say, well, I need to talk to that game server.

450
00:20:29,154 --> 00:20:33,855
I can't just randomly choose one geolocation, random assignment route.

451
00:20:33,895 --> 00:20:35,215
I've got to talk to that game server.

452
00:20:35,235 --> 00:20:36,575
That's the only one who has my data.

453
00:20:38,476 --> 00:20:39,096
Just hold that thought.

454
00:20:41,076 --> 00:20:41,617
So the next thing...

455
00:20:42,820 --> 00:20:48,703
about a modern website is there's going to be this row of some sort of edge box.

456
00:20:49,764 --> 00:20:53,986
Some layers of load balancers, proxies or whatever.

457
00:20:54,026 --> 00:20:56,647
I'm going to want to focus on the HTTP proxies, right?

458
00:20:56,667 --> 00:21:00,069
They're running Varnish or some similar software.

459
00:21:01,270 --> 00:21:03,951
And these can be deployed at the edge of the network, right?

460
00:21:04,211 --> 00:21:06,673
So any sort of junk packet, any reflection attack,

461
00:21:07,313 --> 00:21:09,594
anything like that is going to bounce off these guys, right?

462
00:21:10,635 --> 00:21:14,899
The other thing about using proxies for a modern website

463
00:21:15,279 --> 00:21:16,821
is that this is a commodity service.

464
00:21:17,341 --> 00:21:18,903
So if you call up Amazon and you say,

465
00:21:19,203 --> 00:21:20,665
I need a whole bunch more proxies,

466
00:21:21,485 --> 00:21:23,027
that's in their wheelhouse.

467
00:21:23,047 --> 00:21:23,988
They know how to do that.

468
00:21:24,008 --> 00:21:26,991
The cloud providers can do that for you as total commodity.

469
00:21:28,235 --> 00:21:31,478
The other thing is that if a DOS attack takes out

470
00:21:31,538 --> 00:21:33,779
one of these proxies, big deal, right?

471
00:21:33,799 --> 00:21:35,160
The client could just choose another one, right?

472
00:21:35,180 --> 00:21:37,362
There's nothing really special about any one of these proxies.

473
00:21:37,382 --> 00:21:40,004
And so we can scale and we can add redundancy

474
00:21:40,364 --> 00:21:43,066
that increases the surface area of what needs to be taken out

475
00:21:43,426 --> 00:21:46,048
if we're going to prevent a client from accessing our service.

476
00:21:47,069 --> 00:21:48,210
Okay, then on the right-hand side,

477
00:21:48,230 --> 00:21:49,791
I want to skip the middle, pardon me.

478
00:21:50,451 --> 00:21:51,512
We have the data stores, right?

479
00:21:51,532 --> 00:21:54,514
So this is, I'm talking about like some sort of SQL database or whatever.

480
00:21:55,715 --> 00:21:57,256
The thing to note here.

481
00:21:58,822 --> 00:22:00,784
is that a SQL database is stateful.

482
00:22:01,024 --> 00:22:03,266
It's kind of hard to imagine anything more stateful

483
00:22:03,286 --> 00:22:04,307
than a SQL database.

484
00:22:04,507 --> 00:22:06,909
We talked about game servers having all this state,

485
00:22:07,189 --> 00:22:08,650
and we couldn't migrate it that easily.

486
00:22:08,670 --> 00:22:10,091
We've got to talk to that specific one.

487
00:22:11,572 --> 00:22:13,974
Ignoring some small multiplier for the purposes

488
00:22:14,034 --> 00:22:17,497
of redundancy, if I go to Amazon,

489
00:22:18,218 --> 00:22:20,059
I've got to talk to the specific server that

490
00:22:20,099 --> 00:22:21,340
has my account history.

491
00:22:21,480 --> 00:22:22,901
I can't just talk to any random one.

492
00:22:23,322 --> 00:22:25,704
So in that sense, it's not that different from a game.

493
00:22:26,184 --> 00:22:27,565
I've got to talk to a specific box.

494
00:22:32,259 --> 00:22:33,840
In the middle we've got these app servers, right?

495
00:22:33,860 --> 00:22:35,421
So this is where your business logic is.

496
00:22:35,921 --> 00:22:38,862
And the main thing here is that this is also very stateful.

497
00:22:39,022 --> 00:22:42,264
And it's also the case that you really have to talk to a specific box.

498
00:22:42,284 --> 00:22:43,945
You can't just talk to any random one.

499
00:22:44,525 --> 00:22:47,486
It's true that if one of the app servers goes down and gets rebooted,

500
00:22:47,506 --> 00:22:50,168
no data is lost because there's nothing persisted there.

501
00:22:50,208 --> 00:22:51,348
It's all in the data stores.

502
00:22:51,528 --> 00:22:55,750
But it is important that you get rerouted there because of caching and

503
00:22:55,810 --> 00:22:56,691
perf, right?

504
00:22:56,971 --> 00:22:57,051
So

505
00:22:57,422 --> 00:23:01,664
It's very important that I talk to the specific one that

506
00:23:01,684 --> 00:23:05,087
handles my account, or that's handling this particular chat

507
00:23:05,127 --> 00:23:06,107
room, or whatever.

508
00:23:06,968 --> 00:23:09,269
So it's not fundamentally different than a game.

509
00:23:09,670 --> 00:23:10,850
We've got requests from a client.

510
00:23:10,970 --> 00:23:12,551
They've got to go to a specific box.

511
00:23:14,673 --> 00:23:17,535
So let's just review really quickly the key aspects that

512
00:23:17,655 --> 00:23:22,478
make this scale, that makes this design of a modern

513
00:23:22,498 --> 00:23:25,280
website facilitate the defense against DOS attack.

514
00:23:26,597 --> 00:23:30,038
First of all, the only thing that is directly addressable

515
00:23:30,279 --> 00:23:30,899
are the proxies.

516
00:23:31,039 --> 00:23:32,700
And anything that's really highly stateful,

517
00:23:32,960 --> 00:23:34,641
anything that would be cause of disruption

518
00:23:34,681 --> 00:23:36,902
if it went offline, you cannot even talk to directly.

519
00:23:36,982 --> 00:23:39,143
It does not need a public address at all.

520
00:23:39,263 --> 00:23:40,344
Doesn't need to be on the internet.

521
00:23:41,164 --> 00:23:42,265
The other thing is that the proxies

522
00:23:42,305 --> 00:23:43,606
have just the right amount of state.

523
00:23:44,106 --> 00:23:47,068
So, it's not too little, because if it was too little,

524
00:23:47,088 --> 00:23:49,049
they'd basically be just like a network switch, right?

525
00:23:49,309 --> 00:23:51,030
They're trying to evaluate these packets

526
00:23:51,050 --> 00:23:52,030
and they don't have enough context

527
00:23:52,050 --> 00:23:53,031
to filter out good from bad.

528
00:23:53,551 --> 00:23:53,871
But,

529
00:23:55,142 --> 00:23:59,485
It's not too much because if one goes down,

530
00:23:59,685 --> 00:24:01,186
I can just get another one really quickly.

531
00:24:01,546 --> 00:24:05,028
Establishing connection does require some bit of work,

532
00:24:05,068 --> 00:24:06,189
but I can do it pretty quickly.

533
00:24:07,130 --> 00:24:08,931
The other thing is that I can add additional proxies

534
00:24:09,171 --> 00:24:10,912
to add additional redundancy, and this

535
00:24:10,972 --> 00:24:12,173
increases the surface area.

536
00:24:12,213 --> 00:24:15,095
So if somebody wants to take out our site,

537
00:24:15,275 --> 00:24:19,018
they have to take offline a significant proportion of that.

538
00:24:19,298 --> 00:24:21,079
And I can increase that by throwing money

539
00:24:21,119 --> 00:24:22,821
at the problem indefinitely.

540
00:24:25,777 --> 00:24:28,599
Okay, I hope that after looking at this,

541
00:24:28,639 --> 00:24:29,359
you can kind of say,

542
00:24:29,800 --> 00:24:32,902
oh, I see what you need to do to make a video game work.

543
00:24:37,645 --> 00:24:38,665
So let's talk about our solution.

544
00:24:39,086 --> 00:24:41,127
Our solution is basically proxies for game traffic.

545
00:24:41,787 --> 00:24:43,689
And it, again, I hope it seems like,

546
00:24:43,849 --> 00:24:44,689
oh, yeah, that makes sense.

547
00:24:45,009 --> 00:24:46,710
But at the time, we weren't thinking about it

548
00:24:46,730 --> 00:24:48,672
in terms of proxies,

549
00:24:48,752 --> 00:24:50,473
and we're thinking about it like comparing it to a website.

550
00:24:50,493 --> 00:24:51,534
What we were thinking about was,

551
00:24:52,454 --> 00:24:54,736
we, it was more like comparing it to a network switch.

552
00:24:54,816 --> 00:24:55,296
And we were thinking...

553
00:24:55,999 --> 00:24:59,781
we are going to route every single packet

554
00:25:00,061 --> 00:25:02,982
through a Linux box in software.

555
00:25:04,322 --> 00:25:05,763
I hope that sounds crazy to you

556
00:25:05,783 --> 00:25:07,183
because it did to us at the time.

557
00:25:08,924 --> 00:25:11,405
Okay, so this is what direct UDP connectivity looks like.

558
00:25:11,925 --> 00:25:13,246
This is the standard way of doing it.

559
00:25:13,386 --> 00:25:15,127
You've got a game server, it has a public IP.

560
00:25:15,767 --> 00:25:17,107
To send a message to this game server,

561
00:25:17,127 --> 00:25:18,828
the client just uses a public IP.

562
00:25:18,888 --> 00:25:19,628
We're on the internet.

563
00:25:20,449 --> 00:25:22,170
Of course, the problem is that so can the bad guys.

564
00:25:22,771 --> 00:25:24,632
And if I'm a network switch sitting in between,

565
00:25:24,692 --> 00:25:26,333
or a device, as we talked about, it's

566
00:25:26,453 --> 00:25:28,314
really difficult to tell the good traffic from the bad.

567
00:25:28,934 --> 00:25:31,956
So our solution is, we take these commodity servers,

568
00:25:32,117 --> 00:25:36,779
and just running Ubuntu, and we have some software called

569
00:25:36,840 --> 00:25:40,902
Steam Datagram Relay, or SDRs, and we deploy these

570
00:25:40,922 --> 00:25:41,723
at the edge of our network.

571
00:25:42,363 --> 00:25:44,344
So now, a client wants to connect.

572
00:25:44,765 --> 00:25:45,925
How does this situation change?

573
00:25:46,125 --> 00:25:46,746
So first.

574
00:25:47,290 --> 00:25:47,930
he gets a ticket.

575
00:25:48,490 --> 00:25:50,412
And the ticket, he signed into Steam,

576
00:25:51,232 --> 00:25:52,833
so he's been authenticated, we know who he is.

577
00:25:53,293 --> 00:25:54,634
And the ticket contains his identity.

578
00:25:55,875 --> 00:25:57,076
It's restricted, it says, hey,

579
00:25:57,656 --> 00:25:59,277
you can only talk to this specific server,

580
00:26:00,678 --> 00:26:01,919
and it's gonna have a time limit,

581
00:26:02,879 --> 00:26:04,060
so the tickets are shared or whatever,

582
00:26:04,100 --> 00:26:04,920
it mitigates damage.

583
00:26:05,481 --> 00:26:06,801
And it's gonna be signed, right?

584
00:26:07,022 --> 00:26:08,963
Signed by something that the relays trust.

585
00:26:10,083 --> 00:26:11,024
And as we'll see in a little bit,

586
00:26:11,044 --> 00:26:13,706
that can be your back end, okay?

587
00:26:13,806 --> 00:26:15,126
You guys can generate these tickets.

588
00:26:16,639 --> 00:26:18,540
Okay, then the client talks to the relay

589
00:26:18,640 --> 00:26:19,521
over a public address.

590
00:26:20,461 --> 00:26:21,962
And then the relay talks to the game server

591
00:26:22,042 --> 00:26:23,744
using the private address, right?

592
00:26:23,764 --> 00:26:26,566
So game servers cannot be directly addressed.

593
00:26:28,067 --> 00:26:30,148
Okay, so now what does it look like for an attacker?

594
00:26:31,029 --> 00:26:33,010
So an attacker, well, you know,

595
00:26:33,030 --> 00:26:34,151
it's open internet, right?

596
00:26:34,171 --> 00:26:34,851
It's free country.

597
00:26:35,512 --> 00:26:37,373
He can send packets through the relay just fine.

598
00:26:37,413 --> 00:26:40,716
It's got a public address, but he has no ticket, right?

599
00:26:40,756 --> 00:26:41,957
So the relay is not gonna let him in.

600
00:26:41,977 --> 00:26:43,578
Of course.

601
00:26:45,060 --> 00:26:48,083
You could DDoS it, right? Like it's on the internet, it's vulnerably taken off.

602
00:26:48,363 --> 00:26:51,406
So he gets his buddies together, he DDoSes it, and that disrupts.

603
00:26:51,526 --> 00:26:53,387
So the client no longer can talk through that relay,

604
00:26:53,607 --> 00:26:55,109
but no big deal, he just uses another one.

605
00:26:57,071 --> 00:26:59,413
So maybe there's a, there's some software

606
00:26:59,613 --> 00:27:02,435
that's running on the client that is making dynamic route choices.

607
00:27:02,475 --> 00:27:05,298
It's saying, which one of these relays do I want to use to talk to this server?

608
00:27:06,464 --> 00:27:09,566
and it notices, whoa, I'm stopped receiving communications

609
00:27:09,587 --> 00:27:11,568
from the relay, I better switch to a different one.

610
00:27:11,828 --> 00:27:14,690
So maybe there's a few second delay for the time when that,

611
00:27:15,871 --> 00:27:18,213
it takes to detect that that communication

612
00:27:18,233 --> 00:27:19,294
has been disrupted with the relay,

613
00:27:19,754 --> 00:27:22,496
but he switches and the game keeps going.

614
00:27:22,516 --> 00:27:24,098
There's no loss of connection or anything like that.

615
00:27:24,953 --> 00:27:26,953
And the other important thing to remember is that the relays

616
00:27:27,773 --> 00:27:30,374
are not just at the same data center with the game server.

617
00:27:30,394 --> 00:27:32,174
We've got relays deployed all over the world,

618
00:27:32,434 --> 00:27:34,435
so he can go not just at that data center,

619
00:27:34,675 --> 00:27:36,235
he can go to relay in a different data center,

620
00:27:36,455 --> 00:27:38,176
and then that goes on our backbone

621
00:27:38,436 --> 00:27:39,916
to the data center where the game server is.

622
00:27:39,936 --> 00:27:42,397
In fact, that's a really common thing that happens.

623
00:27:43,777 --> 00:27:46,277
Okay, and of course, same as with websites,

624
00:27:46,437 --> 00:27:48,558
if an attacker wants to disrupt gameplay,

625
00:27:48,818 --> 00:27:50,898
he's got a huge surface area that he has to overwhelm.

626
00:27:53,343 --> 00:27:56,966
Of course, you can only do this if you've got quite a bit of network muscle.

627
00:27:57,247 --> 00:27:58,408
So let's talk about Devalve's network.

628
00:28:00,070 --> 00:28:03,233
So at our edge, we've got 30 points of presence currently.

629
00:28:03,613 --> 00:28:08,838
So a point of presence meaning we have a physical connection within ISP

630
00:28:09,158 --> 00:28:13,243
where we can receive network traffic and it gives ingress.

631
00:28:14,103 --> 00:28:17,327
And we have a backbone connection, a dedicated link that only carries our traffic.

632
00:28:17,578 --> 00:28:18,519
to the rest of our network.

633
00:28:19,119 --> 00:28:20,899
And in many of these points of presence,

634
00:28:20,919 --> 00:28:24,801
we also have racks with game servers or some other service,

635
00:28:24,861 --> 00:28:27,421
like a content server or some Steam service like that.

636
00:28:27,701 --> 00:28:30,142
But in some of them, all we have is just a point of presence

637
00:28:30,182 --> 00:28:31,643
where we've deployed some relays.

638
00:28:32,463 --> 00:28:34,303
The total aggregate bandwidth at our edge

639
00:28:34,323 --> 00:28:35,544
is in the multi-terabit range.

640
00:28:35,944 --> 00:28:38,505
And right now, we have about 115 relay hosts deployed.

641
00:28:38,685 --> 00:28:40,385
We're in the process of ramping that up.

642
00:28:41,383 --> 00:28:43,784
We also have connected all of our points of presence

643
00:28:43,864 --> 00:28:44,504
in a backbone.

644
00:28:45,065 --> 00:28:46,786
We have about 120 links right now,

645
00:28:46,866 --> 00:28:49,467
most of those are 10 gigabit links,

646
00:28:49,487 --> 00:28:52,429
and aggregate bandwidth, total aggregate bandwidth

647
00:28:52,449 --> 00:28:54,690
of all those links is also in the multi-terabit range.

648
00:28:54,710 --> 00:28:58,772
So you think, why, this is not relevant to me, right?

649
00:28:59,192 --> 00:29:01,633
Well it is, because later we're gonna talk about

650
00:29:01,713 --> 00:29:03,974
how Steam partners can have access to this network.

651
00:29:06,756 --> 00:29:08,197
But I do wanna pause just for a moment.

652
00:29:10,778 --> 00:29:14,281
And now that you guys know what this hybrid solution is,

653
00:29:14,781 --> 00:29:17,103
I want to point out that it's not a coincidence

654
00:29:17,143 --> 00:29:19,645
that at Valve we came up with a hybrid solution.

655
00:29:20,226 --> 00:29:21,787
So if you're going to do this hybrid solution,

656
00:29:22,208 --> 00:29:25,210
you've got to change the app code, right?

657
00:29:25,230 --> 00:29:27,232
There's client software that's running on the client.

658
00:29:27,472 --> 00:29:30,675
And you also have to be able to deploy quite a bit of network

659
00:29:30,715 --> 00:29:31,135
hardware, right?

660
00:29:31,155 --> 00:29:32,276
You've got to be operating at scale.

661
00:29:32,296 --> 00:29:35,499
So how many companies have both of those things going on?

662
00:29:36,382 --> 00:29:39,404
So, you know, we make games and we make Steam.

663
00:29:40,444 --> 00:29:42,166
My personal background is more games.

664
00:29:42,346 --> 00:29:43,366
So I'm a software developer,

665
00:29:44,587 --> 00:29:46,629
and I don't really, I'm not a network engineer.

666
00:29:46,709 --> 00:29:48,010
I don't buy...

667
00:29:49,955 --> 00:29:53,477
bandwidth, I don't understand links and data centers, and I don't know how to, you know,

668
00:29:54,058 --> 00:29:59,060
deploy hardware and all that sort of stuff, which is a cop-out for the Q&A session if

669
00:29:59,120 --> 00:30:04,243
any of those sorts of questions come up. But we do have people that know that. So what

670
00:30:04,263 --> 00:30:08,525
did I do? I moved my desk down there and we started figuring out the solution. We said,

671
00:30:08,545 --> 00:30:11,387
man, this seems kind of crazy. We're going to be rounding every single packet through

672
00:30:11,427 --> 00:30:14,388
software. Is that crazy? No. We just did it and we shipped it.

673
00:30:17,210 --> 00:30:19,172
I just think it's remarkable at Valve, first of all,

674
00:30:19,192 --> 00:30:22,235
that we have that ability to collaborate like that,

675
00:30:22,276 --> 00:30:24,418
and the job titles, these strict job roles

676
00:30:24,458 --> 00:30:25,379
didn't get in the way at all.

677
00:30:25,679 --> 00:30:27,642
And the other thing is that the impact

678
00:30:27,662 --> 00:30:28,983
of one software engineer.

679
00:30:29,204 --> 00:30:32,287
So one software engineer can design this entire protocol,

680
00:30:32,627 --> 00:30:35,311
write the relay server, write the client code,

681
00:30:35,631 --> 00:30:37,793
integrate it in Dota and CSGO, and ship it.

682
00:30:38,454 --> 00:30:40,315
That's what one software engineer can do at Valve.

683
00:30:40,875 --> 00:30:43,376
We had one or two more guys help out with deploying hardware

684
00:30:43,436 --> 00:30:44,936
and doing that sort of stuff.

685
00:30:45,417 --> 00:30:49,638
But anyway, I'm really proud that we shipped this novel tech

686
00:30:49,678 --> 00:30:52,799
and we had a huge impact on a whole bunch of customers, which

687
00:30:52,879 --> 00:30:55,500
is a way of saying that we really need network engineers

688
00:30:55,540 --> 00:30:55,920
right now.

689
00:30:56,541 --> 00:30:58,701
So if that's you, or it sounds really cool,

690
00:30:58,801 --> 00:31:03,323
or you just happen to be a super smart person, come on.

691
00:31:05,084 --> 00:31:06,964
OK, with that little digression out of the way,

692
00:31:08,461 --> 00:31:10,382
A big part of this solution is that client software

693
00:31:10,602 --> 00:31:11,283
that we talked about.

694
00:31:11,403 --> 00:31:14,024
It's running on the client, and it's

695
00:31:14,104 --> 00:31:15,805
making these dynamic routing decisions.

696
00:31:16,286 --> 00:31:17,887
Because we have that client software,

697
00:31:18,327 --> 00:31:19,848
we got two unexpected benefits.

698
00:31:21,469 --> 00:31:25,251
The first benefit, and I hope you read this slide title

699
00:31:25,331 --> 00:31:26,512
and you think, what?

700
00:31:26,812 --> 00:31:27,813
That does not make any sense.

701
00:31:28,493 --> 00:31:30,354
We were able to improve ping times

702
00:31:30,574 --> 00:31:32,315
for a significant minority of players.

703
00:31:33,852 --> 00:31:36,834
Relaying packets through software improves ping times.

704
00:31:38,195 --> 00:31:40,277
So that doesn't make any sense.

705
00:31:40,718 --> 00:31:41,578
Let's see how this happens.

706
00:31:42,379 --> 00:31:46,743
So this is a real example of a player who is in Crowley, Texas.

707
00:31:47,163 --> 00:31:48,785
Happens to be near where I grew up.

708
00:31:49,005 --> 00:31:50,706
He's playing on a server in LA.

709
00:31:51,607 --> 00:31:57,833
So if he routes direct to LA, he would

710
00:31:57,873 --> 00:31:59,234
have gotten an 82 millisecond ping.

711
00:32:00,545 --> 00:32:03,405
So the first thing, so he's gonna route to the relay there

712
00:32:03,646 --> 00:32:05,846
in LA and then the relay is gonna go over the backhaul

713
00:32:05,886 --> 00:32:07,046
within our LAN.

714
00:32:07,847 --> 00:32:10,908
So the first thing to observe is that just inserting

715
00:32:10,948 --> 00:32:13,268
that relay did not increase the latency.

716
00:32:13,328 --> 00:32:15,689
So relaying software, at least I can convince you,

717
00:32:15,729 --> 00:32:20,050
doesn't make it any worse because you can pull a packet

718
00:32:20,130 --> 00:32:23,131
in and out of a Linux server with less than a millisecond

719
00:32:23,291 --> 00:32:24,991
and you can send it over the LAN backhaul

720
00:32:25,011 --> 00:32:26,892
within a data center super fast, right?

721
00:32:26,912 --> 00:32:28,172
So that is less than a millisecond,

722
00:32:28,192 --> 00:32:29,993
that is negligible additional latency.

723
00:32:31,682 --> 00:32:33,904
And here's how you can improve the ping time.

724
00:32:34,464 --> 00:32:36,285
Because this is not actually what he did.

725
00:32:36,765 --> 00:32:40,828
What actually happened is that his client measured the ping

726
00:32:40,848 --> 00:32:44,210
time to all of our available relays and is it, oh,

727
00:32:44,831 --> 00:32:46,351
if I route through Oklahoma City,

728
00:32:47,552 --> 00:32:49,774
I'm only 17 milliseconds away from Oklahoma City.

729
00:32:49,894 --> 00:32:53,216
And then it's another 39 milliseconds

730
00:32:53,376 --> 00:32:55,877
on our backbone between Oklahoma City and Los Angeles.

731
00:32:56,218 --> 00:32:58,759
And if you're keeping track, that's 56 milliseconds.

732
00:32:59,060 --> 00:32:59,180
So 80.

733
00:33:01,629 --> 00:33:03,472
2 milliseconds versus 56 milliseconds.

734
00:33:03,832 --> 00:33:05,354
That is a meaningful improvement, right?

735
00:33:05,454 --> 00:33:06,316
I hope everybody sees that.

736
00:33:06,336 --> 00:33:07,297
That is a meaningful improvement.

737
00:33:10,099 --> 00:33:13,781
It's not just an improvement because we got his latency down, it's an improvement because

738
00:33:14,081 --> 00:33:18,503
more of the traffic... so in this situation, it's all going over the internet. We have

739
00:33:18,663 --> 00:33:23,344
no control over any of that, any of those links that are involved. In this situation,

740
00:33:23,745 --> 00:33:28,366
only a short portion of the path is over a route that we don't control. In the backhaul,

741
00:33:28,687 --> 00:33:31,728
we control. We can make sure that the routing is optimal and we can make sure that there's

742
00:33:31,788 --> 00:33:36,350
no, you know, downloading of the latest season of Game of Thrones or whatever, spiking up

743
00:33:36,390 --> 00:33:37,950
and interfering with our traffic, right?

744
00:33:41,116 --> 00:33:43,800
So, the ping improvement is not because we're relaying traffic.

745
00:33:43,840 --> 00:33:47,466
The ping improvement comes because there is a choice of route.

746
00:33:49,109 --> 00:33:54,357
And you might ask, why is his direct ping to LA so poor?

747
00:33:55,488 --> 00:33:56,848
The question is, I don't know.

748
00:33:56,868 --> 00:33:58,949
I don't know why it's so poor, right?

749
00:34:00,330 --> 00:34:02,431
But we have to remember that there is no such thing

750
00:34:02,471 --> 00:34:04,271
as a direct route to LA, right?

751
00:34:04,391 --> 00:34:06,712
The internet is a packet-switched network.

752
00:34:07,212 --> 00:34:09,553
So when he's talking to LA, he's bouncing through all kinds

753
00:34:09,593 --> 00:34:10,834
of network devices already.

754
00:34:11,094 --> 00:34:12,935
So adding one of them, and it happens to be software,

755
00:34:13,155 --> 00:34:15,055
doesn't really change things in any fundamental way.

756
00:34:17,080 --> 00:34:18,042
There's no direct route.

757
00:34:18,543 --> 00:34:20,746
So you say, OK, I didn't mean direct route.

758
00:34:20,766 --> 00:34:22,449
I meant the default IP route.

759
00:34:22,749 --> 00:34:24,412
Why is the default IP route so poor?

760
00:34:24,532 --> 00:34:27,036
Well, it's because it's determined through BGP routing.

761
00:34:27,833 --> 00:34:30,074
That's the routing protocol that drives the internet.

762
00:34:30,674 --> 00:34:33,775
And the input to BGP routing are these metrics

763
00:34:34,155 --> 00:34:35,956
called weight and preference or whatever.

764
00:34:36,196 --> 00:34:37,997
Well, they're not identical to latency.

765
00:34:38,357 --> 00:34:42,019
They're kind of close, but it's not an exact matchup.

766
00:34:42,059 --> 00:34:43,619
So any time there's a discrepancy there

767
00:34:44,220 --> 00:34:46,601
between those metrics and actual latency,

768
00:34:47,101 --> 00:34:49,262
it creates an opportunity for us to find a better route.

769
00:34:52,783 --> 00:34:53,603
So maybe you're thinking.

770
00:34:54,140 --> 00:34:55,841
OK, you dug through all your stats,

771
00:34:55,881 --> 00:34:58,282
and you cherry-picked an example.

772
00:34:58,582 --> 00:34:59,863
How often does this really happen?

773
00:35:01,484 --> 00:35:06,026
So here is a chart that shows all of our data centers

774
00:35:06,686 --> 00:35:08,767
from the busiest to the least busy.

775
00:35:09,948 --> 00:35:12,789
And you can see here, our busiest data center

776
00:35:12,849 --> 00:35:13,570
is in Stockholm.

777
00:35:15,451 --> 00:35:18,452
And you can see it's a majority of players.

778
00:35:21,590 --> 00:35:23,731
So this gray represents people who essentially

779
00:35:23,771 --> 00:35:25,132
the default route was optimal.

780
00:35:26,113 --> 00:35:27,393
This is the majority of players.

781
00:35:27,954 --> 00:35:30,515
So most people got an improvement.

782
00:35:30,955 --> 00:35:33,297
And it's true, this purple bar is anywhere

783
00:35:33,317 --> 00:35:34,277
from zero to 10 milliseconds.

784
00:35:34,297 --> 00:35:35,558
So it's a modest improvement, right?

785
00:35:37,450 --> 00:35:39,190
But look down here, oh, and you can also see

786
00:35:39,250 --> 00:35:41,431
that the amount of improvement depends

787
00:35:41,691 --> 00:35:44,331
on the opportunities for route selection, right?

788
00:35:44,351 --> 00:35:46,132
So in Europe, we have a lot of different interconnects,

789
00:35:46,312 --> 00:35:47,412
we have a lot of different ways

790
00:35:47,452 --> 00:35:49,393
for there to be different routes

791
00:35:49,613 --> 00:35:50,573
and we can make improvement.

792
00:35:50,753 --> 00:35:53,674
For example, in, this is Australia down here,

793
00:35:53,974 --> 00:35:55,774
we really don't, we only have one data center,

794
00:35:55,834 --> 00:35:57,174
only one way for the traffic to get in.

795
00:35:57,514 --> 00:35:58,915
Most people don't see an improvement.

796
00:35:59,755 --> 00:36:02,516
But look down here, like, this is Dubai, right?

797
00:36:03,116 --> 00:36:03,856
This is, that eight.

798
00:36:04,692 --> 00:36:08,156
that red section is a 75 millisecond improvement.

799
00:36:08,637 --> 00:36:10,099
That's a huge improvement, right?

800
00:36:10,459 --> 00:36:14,604
So for a lot of, for a small percentage of customers,

801
00:36:14,624 --> 00:36:15,826
we're able to make a big difference.

802
00:36:16,286 --> 00:36:19,450
And for a, I would say it's a minority of customers,

803
00:36:19,610 --> 00:36:21,793
we're able to make a modest improvement.

804
00:36:23,915 --> 00:36:24,035
Okay.

805
00:36:26,613 --> 00:36:28,975
The other thing, unexpected benefit that we got from this,

806
00:36:30,176 --> 00:36:32,557
from having this client software that was making these routing

807
00:36:32,597 --> 00:36:35,159
decisions, is that in certain parts of the world,

808
00:36:35,820 --> 00:36:40,203
the competition between ISPs is less than you would desire.

809
00:36:40,223 --> 00:36:42,965
And this has happened in many different parts of the world

810
00:36:43,005 --> 00:36:44,306
at various points in time.

811
00:36:45,227 --> 00:36:49,130
And basically, the ISPs are peering with each other,

812
00:36:49,170 --> 00:36:50,591
and the routing is set up in such a way

813
00:36:50,631 --> 00:36:52,813
that if you were an engineer and you were trying to design

814
00:36:52,853 --> 00:36:54,394
things so that the internet worked as efficiently

815
00:36:55,982 --> 00:36:57,543
it's not how you would design it, right?

816
00:36:57,583 --> 00:36:59,425
So the peering arrangements and everything

817
00:36:59,465 --> 00:37:01,207
are set up in a way that has, makes,

818
00:37:01,687 --> 00:37:03,850
is based on some sort of business competition,

819
00:37:04,290 --> 00:37:07,113
not based on what's good for people trying to get a good

820
00:37:07,473 --> 00:37:08,895
connection to arbitrary internet hosts.

821
00:37:10,176 --> 00:37:13,179
So, let's say that you have a data center,

822
00:37:13,299 --> 00:37:15,682
and you do have physical connectivity to two different ISPs.

823
00:37:17,015 --> 00:37:20,739
So in this diagram, we've got two players and they are using two different ISPs, the

824
00:37:21,119 --> 00:37:22,480
red ISP and the blue ISP.

825
00:37:22,861 --> 00:37:27,325
And contrary to other diagrams, the blue guy is not a bad guy here, he's just two different

826
00:37:27,705 --> 00:37:29,066
ISPs and everybody's a good player.

827
00:37:31,547 --> 00:37:36,008
Even having the connectivity come in from two different ISPs is not sufficient

828
00:37:36,048 --> 00:37:40,009
because you have to pick an IP address for your game server.

829
00:37:40,630 --> 00:37:43,971
This is back when game servers have a public IP.

830
00:37:44,011 --> 00:37:48,072
So let's say you choose an IP address that's assigned from your red ISP.

831
00:37:48,572 --> 00:37:49,672
Well, then great.

832
00:37:49,752 --> 00:37:51,873
Your player on the red ISP, he's got a great route.

833
00:37:52,133 --> 00:37:55,334
And your blue guy gets bounced around some crazy scenic route,

834
00:37:55,594 --> 00:37:56,495
and he has a bad time.

835
00:37:57,392 --> 00:38:00,237
you could try to switch it, but then all you've done is you've traded off

836
00:38:01,379 --> 00:38:04,084
one person having a bad time for the other.

837
00:38:05,126 --> 00:38:05,807
So our solution...

838
00:38:07,369 --> 00:38:11,093
We just have some relays with red ISP addresses,

839
00:38:11,553 --> 00:38:14,557
some relays that are assigned blue addresses.

840
00:38:15,357 --> 00:38:16,659
And the clients measure their ping.

841
00:38:16,679 --> 00:38:18,581
They say, if they're blue, it turns out, oh,

842
00:38:19,001 --> 00:38:20,242
looks like the blue route is fastest.

843
00:38:20,623 --> 00:38:21,384
And they connect through there.

844
00:38:21,564 --> 00:38:23,706
The red guys say, oh, looks like the red route is fastest.

845
00:38:23,806 --> 00:38:24,487
And they connect through there.

846
00:38:25,288 --> 00:38:26,349
So of course, there are other ways

847
00:38:26,389 --> 00:38:27,790
you could solve this problem, right?

848
00:38:27,810 --> 00:38:30,193
There's traditional networking engineering approaches

849
00:38:30,213 --> 00:38:30,633
that you could do.

850
00:38:31,434 --> 00:38:35,621
In Dota, what we've had to do is we, in some cases, we had to segregate people by ISP.

851
00:38:35,682 --> 00:38:38,126
And that's really a substandard solution.

852
00:38:38,907 --> 00:38:40,811
On CSGO, we were able to implement this solution.

853
00:38:42,828 --> 00:38:45,950
You could also give the game server two IP addresses, right?

854
00:38:46,190 --> 00:38:49,052
You could multi-home, and then when you told clients to connect,

855
00:38:49,072 --> 00:38:51,493
you could say, OK, I'm going to figure out if you're a red client,

856
00:38:51,513 --> 00:38:53,374
and if so, I'm going to tell you to connect through the red IP,

857
00:38:53,735 --> 00:38:54,655
and if you're blue, I'm going to...

858
00:38:54,975 --> 00:38:56,056
That's just a lot of work,

859
00:38:56,296 --> 00:38:59,999
and you have to be able to figure out who's red and who's blue, right?

860
00:39:00,199 --> 00:39:00,379
It's a...

861
00:39:00,739 --> 00:39:02,580
You're signing yourself up for a lot of bookkeeping

862
00:39:02,820 --> 00:39:04,541
and a lot of ongoing maintenance, right?

863
00:39:05,082 --> 00:39:07,804
So the SDR solution, it just automatically works.

864
00:39:09,104 --> 00:39:10,545
You just let the ping measurement sort it out.

865
00:39:12,157 --> 00:39:14,338
OK, let's get to some practical advice.

866
00:39:14,398 --> 00:39:15,218
We've talked about the problem.

867
00:39:15,939 --> 00:39:20,442
Hopefully everybody understands how our approach works.

868
00:39:21,302 --> 00:39:23,263
And now I'm going to give some practical advice about what

869
00:39:23,283 --> 00:39:23,704
you can do.

870
00:39:24,944 --> 00:39:29,347
So there's one guaranteed way to make sure

871
00:39:29,367 --> 00:39:32,969
that your game is not impacted by denial of service.

872
00:39:33,850 --> 00:39:35,591
And that is you can make an unpopular game.

873
00:39:40,119 --> 00:39:42,841
So this slide actually does have a point.

874
00:39:44,142 --> 00:39:46,804
It's not just to use that emoji, although that's a pretty good benefit.

875
00:39:47,865 --> 00:39:50,266
The point is that there's no other guaranteed solution.

876
00:39:50,367 --> 00:39:52,088
So everything else we're about to talk about

877
00:39:52,488 --> 00:39:54,069
is just going to raise the bar

878
00:39:55,451 --> 00:39:56,752
that attackers have to jump over.

879
00:39:57,752 --> 00:40:00,134
And it's up to you to figure out how much dev cost,

880
00:40:00,735 --> 00:40:01,295
how much money.

881
00:40:01,315 --> 00:40:04,377
You're going to have to do those cost-benefit analysis.

882
00:40:04,397 --> 00:40:06,279
But there's really no guaranteed solution

883
00:40:06,659 --> 00:40:07,960
aside from making it an unpopular game.

884
00:40:09,356 --> 00:40:13,005
Okay, one bit of practical advice.

885
00:40:13,166 --> 00:40:14,810
I don't want to draw on this, but back end.

886
00:40:15,707 --> 00:40:18,707
Make your backend, your backend is just a website

887
00:40:18,727 --> 00:40:19,948
with a rich client, right?

888
00:40:20,148 --> 00:40:20,708
That's all it is.

889
00:40:20,748 --> 00:40:21,688
All those things that we talk about

890
00:40:21,848 --> 00:40:22,808
that's hard about video games,

891
00:40:23,068 --> 00:40:24,809
don't apply to your backend, right?

892
00:40:25,709 --> 00:40:27,590
So do not open a raw socket.

893
00:40:27,950 --> 00:40:30,690
Take it, make your backend traffic be HTTP.

894
00:40:30,991 --> 00:40:33,411
Take advantage of all the existing tools that are out there,

895
00:40:33,791 --> 00:40:36,572
commodity services, you'll get super high bang

896
00:40:36,592 --> 00:40:37,032
from your buck.

897
00:40:37,252 --> 00:40:38,653
There should be no reason whatsoever

898
00:40:38,853 --> 00:40:40,453
why you have a hard time protecting your backend.

899
00:40:40,773 --> 00:40:42,133
Just make it a website, essentially.

900
00:40:45,486 --> 00:40:49,369
The other thing you're going to do is to use the network layer to do what it can do.

901
00:40:50,250 --> 00:40:57,235
So we talked about the fact that, you know, there's going to be this hole any UDP traffic

902
00:40:57,275 --> 00:41:00,078
bound for your server is going to get through.

903
00:41:01,726 --> 00:41:03,647
the network layer can block reflection attacks.

904
00:41:03,987 --> 00:41:06,748
And that is the most important function of the network layer.

905
00:41:07,348 --> 00:41:09,409
So you may end up spending a little bit money,

906
00:41:09,649 --> 00:41:13,431
maybe from your cloud provider, to do some advanced protection

907
00:41:13,471 --> 00:41:13,831
or whatever.

908
00:41:14,111 --> 00:41:16,472
Or if you're in a colo situation,

909
00:41:16,512 --> 00:41:18,773
maybe you buy some of those military grade switches,

910
00:41:18,833 --> 00:41:21,074
dedicated DOS hardware, whatever.

911
00:41:21,435 --> 00:41:23,916
But you may throw some money at the problem,

912
00:41:23,936 --> 00:41:25,877
but the network layer is going to play a role.

913
00:41:28,884 --> 00:41:31,706
Every time you share an IP, it adds risk.

914
00:41:32,987 --> 00:41:36,749
So don't share IPs unless you have to.

915
00:41:37,069 --> 00:41:38,470
Only do it on a need-to-know basis.

916
00:41:39,211 --> 00:41:41,572
So for example, don't do it just because

917
00:41:41,773 --> 00:41:43,153
one side wants to connect.

918
00:41:44,254 --> 00:41:46,576
Need to make sure that both sides have expressed

919
00:41:46,676 --> 00:41:49,117
some sort of affirmative intent

920
00:41:49,358 --> 00:41:50,718
to participate in this connection.

921
00:41:51,403 --> 00:41:55,604
For example, you may remember that there was an exploit with Skype.

922
00:41:56,125 --> 00:41:59,906
You could just initiate, by the process of initiating a Skype call

923
00:42:00,746 --> 00:42:04,588
to somebody, I could get their IP. The other guy didn't even have to answer the call.

924
00:42:05,128 --> 00:42:08,369
So that bug has since been fixed, but that's an example of where

925
00:42:09,470 --> 00:42:11,771
make sure your protocol does not reveal any IPs

926
00:42:12,071 --> 00:42:13,851
until it's absolutely necessary.

927
00:42:14,710 --> 00:42:17,352
There's other sorts of ways where you might leak this sort of information.

928
00:42:20,333 --> 00:42:25,756
For us, we had some dev tools which are super useful for sorting out problems with customers.

929
00:42:25,796 --> 00:42:27,596
You can say, hey, check this, try this, or whatever.

930
00:42:28,557 --> 00:42:34,500
But unfortunately those dev tools leaked information about where the game server was or what other

931
00:42:34,560 --> 00:42:35,780
people's IPs on the game server.

932
00:42:36,040 --> 00:42:37,081
We had to lock all that down.

933
00:42:38,366 --> 00:42:42,108
Also rich presence, spectators kind of ended up being a gray area.

934
00:42:42,128 --> 00:42:46,171
So those are some examples of places where you might find yourself leaking this information.

935
00:42:46,851 --> 00:42:50,834
And it'll be used to DDOS your players.

936
00:42:55,987 --> 00:43:01,050
Basically, in today's internet, anytime, if you ever reveal an IP, it's just bad.

937
00:43:02,091 --> 00:43:03,452
That is a conclusion that we've come to.

938
00:43:05,053 --> 00:43:09,756
You may not know that if you're using the current Steam P2P APIs because they try to

939
00:43:09,816 --> 00:43:13,058
peer-snap and establish a direct connection, and that is bad.

940
00:43:13,518 --> 00:43:15,080
And we are not going to do that in the future.

941
00:43:15,680 --> 00:43:16,901
We are working on fixing that.

942
00:43:17,821 --> 00:43:19,422
But the ideal situation...

943
00:43:20,043 --> 00:43:22,784
is to relay the traffic and have your relay anonymize it.

944
00:43:22,844 --> 00:43:25,086
And so nobody knows anybody else's IP.

945
00:43:25,106 --> 00:43:28,227
And they're identified by your Steam ID or some other identity

946
00:43:28,267 --> 00:43:28,668
like that.

947
00:43:31,529 --> 00:43:34,711
Of course, you probably are not operating

948
00:43:34,771 --> 00:43:36,692
in a scale where you can deploy all this hardware.

949
00:43:36,712 --> 00:43:39,113
But I'm going to talk about, if you're a Steam partner,

950
00:43:39,293 --> 00:43:41,274
you can relay your traffic through our network.

951
00:43:41,334 --> 00:43:43,035
And you can make sure that your players don't get DDoSed.

952
00:43:45,982 --> 00:43:51,606
Of course we want to prevent a DDoS attack, but in the event that it happens, and it will

953
00:43:51,646 --> 00:43:57,270
happen, you need to be able to detect it and get those guys, ban those guys from your game

954
00:43:57,870 --> 00:44:03,534
and lock down the incentive for them to keep doing it and mitigate the damage of it happening.

955
00:44:04,515 --> 00:44:09,679
So that means obviously you're collecting data on like how often games are failing,

956
00:44:09,739 --> 00:44:09,899
right?

957
00:44:09,939 --> 00:44:13,702
Like you have to have sufficient analytics to identify the people who are doing this.

958
00:44:15,019 --> 00:44:19,862
And then if you have a free to play game, you've got a problem because the band may not sting, right?

959
00:44:19,942 --> 00:44:24,225
So if they can just, if their account gets banned or whatever, they can fire up a new account

960
00:44:24,526 --> 00:44:27,628
and get right back into the matchmaking pool, your bands are totally neutered.

961
00:44:27,688 --> 00:44:32,952
So you really need to have some barrier to getting them into whatever matchmaking pool

962
00:44:33,332 --> 00:44:34,273
that you're trying to protect.

963
00:44:35,714 --> 00:44:39,257
So for example, in Dota and CSGO, you have to have a certain number of games played.

964
00:44:39,277 --> 00:44:40,398
Some sort of time investment.

965
00:44:41,118 --> 00:44:45,500
Make them jump over a certain hurdle before they can get back in and start doing bad stuff again.

966
00:44:49,042 --> 00:44:51,503
Two more things you can do.

967
00:44:51,583 --> 00:44:55,805
You can harden your network code. So previous iteration of this talk, I went into detail

968
00:44:55,845 --> 00:45:00,647
about how you really need to be pumping, pulling the socket on a thread and you need to be making sure

969
00:45:00,667 --> 00:45:05,569
that you don't have, and I realized, man, just writing socket code is just really hard.

970
00:45:05,949 --> 00:45:08,371
And so I recommend that you just don't do it.

971
00:45:08,892 --> 00:45:14,196
And so we are releasing a open source library

972
00:45:14,937 --> 00:45:16,017
to do a lot of this stuff.

973
00:45:17,339 --> 00:45:18,620
It's a very permissive license.

974
00:45:19,200 --> 00:45:19,881
It's open source.

975
00:45:20,181 --> 00:45:21,562
You can use it on any platform you want.

976
00:45:21,642 --> 00:45:22,763
Doesn't matter if you're a Steam developer.

977
00:45:23,063 --> 00:45:24,004
Doesn't matter if you're on Steam.

978
00:45:24,064 --> 00:45:26,226
Doesn't matter if you make games at all.

979
00:45:26,866 --> 00:45:29,348
And it is a real-time oriented protocol,

980
00:45:29,408 --> 00:45:32,211
so it does a mix of reliable and unreliable messages.

981
00:45:33,799 --> 00:45:36,320
and it will do the fragmentation and reassembly.

982
00:45:36,400 --> 00:45:38,100
You know, your messages can be bigger than the MTU

983
00:45:39,001 --> 00:45:41,082
and then retransmit for reliable data

984
00:45:41,102 --> 00:45:42,522
when there's packet loss.

985
00:45:43,482 --> 00:45:46,584
It also has bandwidth estimation based on an RFC

986
00:45:46,604 --> 00:45:48,604
that describes TCP-friendly rate limiting.

987
00:45:49,305 --> 00:45:51,826
And so you can just put a giant message,

988
00:45:53,807 --> 00:45:55,067
you know, into the API,

989
00:45:55,107 --> 00:45:57,348
and then it'll meter out the packets at a rate

990
00:45:57,488 --> 00:46:00,009
depending on how big the pipe is between the two peers.

991
00:46:01,055 --> 00:46:01,955
It also does encryption.

992
00:46:02,816 --> 00:46:05,077
It does not do anything above transport, though.

993
00:46:05,318 --> 00:46:06,458
And I think that's really important,

994
00:46:06,799 --> 00:46:10,581
because we're not trying to take your entity data

995
00:46:10,661 --> 00:46:12,202
and then you figure out how to,

996
00:46:12,483 --> 00:46:13,864
we'll serialize it for you,

997
00:46:13,904 --> 00:46:17,186
and we'll figure out which of those state fields changed,

998
00:46:17,246 --> 00:46:21,389
and then make a delta encoded thing.

999
00:46:21,569 --> 00:46:22,469
We're not gonna do any of that.

1000
00:46:23,430 --> 00:46:26,612
Because that's what's really hard to get into a game.

1001
00:46:26,632 --> 00:46:28,454
That's what's so incredibly game-specific.

1002
00:46:28,994 --> 00:46:29,935
But transport layer.

1003
00:46:30,951 --> 00:46:34,384
we found it's just pretty much easy to drop in any code base.

1004
00:46:37,738 --> 00:46:39,039
There's no real reason not to use it.

1005
00:46:39,059 --> 00:46:42,661
And the other thing is that this code, all of those things

1006
00:46:42,721 --> 00:46:45,903
I talked about, about spoofing, UDP source spoofing,

1007
00:46:45,983 --> 00:46:49,365
and the risk that entails, and making sure

1008
00:46:49,385 --> 00:46:50,946
that your socket doesn't get overwhelmed

1009
00:46:50,986 --> 00:46:55,209
in legitimate traffic, being drowned out by spam packets,

1010
00:46:55,229 --> 00:46:56,009
and all that sort of stuff.

1011
00:46:56,189 --> 00:46:57,090
We've got that.

1012
00:46:57,130 --> 00:46:58,091
We've solved all that.

1013
00:46:58,191 --> 00:47:01,853
Opening a UDP socket on the internet is fraught with peril.

1014
00:47:02,954 --> 00:47:06,236
This code has been battle tested for several years now.

1015
00:47:07,772 --> 00:47:10,564
The other thing, I want you to please use our network.

1016
00:47:11,301 --> 00:47:13,643
OK, how are you going to do that?

1017
00:47:13,823 --> 00:47:14,524
There's an SDK.

1018
00:47:15,224 --> 00:47:15,885
So what do you get?

1019
00:47:17,206 --> 00:47:19,368
You get access to our relays and our backbone.

1020
00:47:19,788 --> 00:47:20,508
So what does that mean?

1021
00:47:20,789 --> 00:47:23,531
That means P2P traffic is anonymized.

1022
00:47:23,991 --> 00:47:25,332
No IPs are being revealed.

1023
00:47:26,053 --> 00:47:27,714
You're going to get any sort of ping improvement

1024
00:47:27,734 --> 00:47:29,436
that we're able to do because we're finding optimal routes.

1025
00:47:29,476 --> 00:47:30,436
You are going to get your data transferred.

1026
00:47:30,456 --> 00:47:31,557
More of the path is going to occur over our backbone,

1027
00:47:31,577 --> 00:47:32,438
where we're able to control it and make

1028
00:47:32,458 --> 00:47:33,379
sure that you're getting the right traffic.

1029
00:47:33,399 --> 00:47:34,059
So that's the end of the video.

1030
00:47:34,079 --> 00:47:34,780
I hope you enjoyed it.

1031
00:47:34,820 --> 00:47:35,761
And if you did, please subscribe to our channel.

1032
00:47:35,801 --> 00:47:36,802
And if you want to see more videos like this,

1033
00:47:36,822 --> 00:47:37,602
please subscribe to our channel.

1034
00:47:37,622 --> 00:47:38,263
And we'll see you next time.

1035
00:47:38,303 --> 00:47:38,403
Bye.

1036
00:47:38,423 --> 00:47:38,483
Bye.

1037
00:47:38,503 --> 00:47:38,923
Bye.

1038
00:47:38,943 --> 00:47:39,003
Bye.

1039
00:47:39,023 --> 00:47:39,083
Bye.

1040
00:47:39,103 --> 00:47:39,184
Bye.

1041
00:47:39,204 --> 00:47:39,284
Bye.

1042
00:47:39,344 --> 00:47:39,424
Bye.

1043
00:47:39,444 --> 00:47:39,504
Bye.

1044
00:47:39,524 --> 00:47:39,584
Bye.

1045
00:47:39,604 --> 00:47:39,704
Bye.

1046
00:47:39,784 --> 00:47:39,844
Bye.

1047
00:47:39,864 --> 00:47:39,924
Bye.

1048
00:47:39,944 --> 00:47:40,004
Bye.

1049
00:47:40,044 --> 00:47:40,104
Bye.

1050
00:47:40,124 --> 00:47:40,184
Bye.

1051
00:47:40,204 --> 00:47:40,264
Bye.

1052
00:47:40,284 --> 00:47:40,445
Bye.

1053
00:47:40,465 --> 00:47:40,545
Bye.

1054
00:47:40,565 --> 00:47:40,625
Bye.

1055
00:47:41,078 --> 00:47:41,879
uh... that the uh...

1056
00:47:42,480 --> 00:47:45,084
began with runs downloads or you know you know whatever not interfering

1057
00:47:46,625 --> 00:47:51,930
We can do, we have P2P APIs, so just two random hosts on the internet, right, they're just players.

1058
00:47:52,551 --> 00:47:58,436
And we also have, are hosting some dedicated servers for a few partners.

1059
00:47:59,598 --> 00:48:04,502
The Stunlock guys, the Battlerite guys are hosting some servers with us.

1060
00:48:05,123 --> 00:48:08,886
And we have some more partners that are, we're in the process of working on that.

1061
00:48:08,946 --> 00:48:10,968
And we can do, that's a slightly different API.

1062
00:48:12,109 --> 00:48:12,890
and we can do that too.

1063
00:48:13,410 --> 00:48:16,333
Also, because we have these relays deployed out there,

1064
00:48:18,675 --> 00:48:23,799
we can, we have some tools for estimating ping.

1065
00:48:24,079 --> 00:48:25,940
Okay, so let me just describe how this works.

1066
00:48:26,301 --> 00:48:30,804
So I measure all of my ping to all of the relays,

1067
00:48:30,884 --> 00:48:32,546
and I know all of my ping to those relays.

1068
00:48:33,346 --> 00:48:36,069
And if you measure all your ping to all of your relays,

1069
00:48:36,349 --> 00:48:37,570
and then we compare notes,

1070
00:48:38,941 --> 00:48:40,223
It's a small bit of information, right?

1071
00:48:40,243 --> 00:48:42,686
Just a small bit of data that lists those pings.

1072
00:48:43,027 --> 00:48:45,590
But once I have that, I can estimate my ping to you, right?

1073
00:48:45,850 --> 00:48:47,312
Or between any two internet hosts,

1074
00:48:47,413 --> 00:48:50,276
once I have that data,

1075
00:48:50,357 --> 00:48:51,638
I can estimate the ping between them

1076
00:48:51,899 --> 00:48:53,601
without sending any packets.

1077
00:48:54,362 --> 00:48:58,283
This is extremely useful for figuring out what peers ought to be put together,

1078
00:48:58,343 --> 00:49:02,464
or figuring out who's going to be the host if you've got some P2P situation,

1079
00:49:02,504 --> 00:49:07,446
or figuring out if you've got servers deployed, which region they should connect to.

1080
00:49:07,466 --> 00:49:12,668
I know that our existing P2P APIs, if you try to do that right now,

1081
00:49:12,868 --> 00:49:16,249
you're going to be actually pinging, and it's going to try to pierce NAT,

1082
00:49:16,269 --> 00:49:20,250
and there's this five-second handshaking time where it tries to do that,

1083
00:49:20,390 --> 00:49:21,671
and it has lots of problems.

1084
00:49:22,191 --> 00:49:24,594
I'm really, really looking forward to some partner

1085
00:49:24,714 --> 00:49:27,158
who has a good need for some of these ping estimation tools.

1086
00:49:27,198 --> 00:49:28,279
I think they're really going to be powerful.

1087
00:49:29,120 --> 00:49:31,804
Another thing you get with this library is certs.

1088
00:49:32,785 --> 00:49:36,270
So I mentioned that Game Networking Sockets has

1089
00:49:36,690 --> 00:49:37,091
encryption.

1090
00:49:38,734 --> 00:49:39,955
Encryption only works with certs.

1091
00:49:40,555 --> 00:49:42,938
I don't want to get into a big discussion,

1092
00:49:42,978 --> 00:49:44,660
but basically you can just man in the middle, right?

1093
00:49:44,720 --> 00:49:47,903
And unless you can prove that the guy you talk to

1094
00:49:47,943 --> 00:49:49,164
is the guy you really want,

1095
00:49:50,065 --> 00:49:51,326
encryption is a little bit neutered.

1096
00:49:51,346 --> 00:49:53,228
Of course, it doesn't prevent anybody else

1097
00:49:53,508 --> 00:49:56,812
from filling that role of certificate authority.

1098
00:49:56,992 --> 00:49:58,553
But Steam can be the certificate authority.

1099
00:49:59,454 --> 00:50:01,076
Here's the key point there, is that,

1100
00:50:01,356 --> 00:50:02,137
well, there are two points.

1101
00:50:02,257 --> 00:50:03,498
One is, if somebody connects,

1102
00:50:05,053 --> 00:50:07,295
You know from the very first moment

1103
00:50:07,735 --> 00:50:09,016
that they are who they say they are.

1104
00:50:09,657 --> 00:50:10,437
You don't have to say,

1105
00:50:10,557 --> 00:50:12,579
okay, I've got a connection from this particular Steam ID,

1106
00:50:12,599 --> 00:50:13,520
and then go ask Steam,

1107
00:50:13,560 --> 00:50:15,001
hey, is this who they say they are?

1108
00:50:15,081 --> 00:50:16,702
Meanwhile, they're in this kind of state of limbo?

1109
00:50:16,802 --> 00:50:18,543
Nope, from the very moment they connect,

1110
00:50:18,863 --> 00:50:20,925
you know that we've checked their identity

1111
00:50:20,965 --> 00:50:22,546
and they're presenting the certificate

1112
00:50:22,586 --> 00:50:25,308
that proves that they are who they say they are.

1113
00:50:25,688 --> 00:50:27,870
The other thing is, on the encryption bit,

1114
00:50:28,290 --> 00:50:29,951
we have moved the threat

1115
00:50:30,672 --> 00:50:32,473
so that it's not possible to man in the middle,

1116
00:50:32,533 --> 00:50:34,775
to observe or tamper with the traffic.

1117
00:50:35,155 --> 00:50:36,937
unless you are inside the process.

1118
00:50:36,957 --> 00:50:40,842
So you can't just observe it or tamper with it

1119
00:50:40,882 --> 00:50:42,063
by being outside of the process,

1120
00:50:42,083 --> 00:50:43,765
installing some box that's gonna like,

1121
00:50:43,985 --> 00:50:45,827
you know, relay the traffic or anything like that.

1122
00:50:45,867 --> 00:50:47,609
You have to be inside the process.

1123
00:50:48,310 --> 00:50:49,751
And that makes it in a position

1124
00:50:49,771 --> 00:50:51,053
where VAT can detect it, right?

1125
00:50:51,682 --> 00:50:55,667
So the certs maybe seem a little esoteric,

1126
00:50:55,687 --> 00:50:57,949
but they really empower some good security features.

1127
00:50:58,530 --> 00:51:00,672
Of course, you also get everything else

1128
00:51:00,692 --> 00:51:04,016
that comes with everything on the previous slide.

1129
00:51:04,496 --> 00:51:07,459
So our goal here is that we really want,

1130
00:51:08,100 --> 00:51:10,643
if you're on Steam, you use this SDK.

1131
00:51:12,405 --> 00:51:13,186
And if you're not on Steam,

1132
00:51:14,005 --> 00:51:17,185
You can use the same API, you just use the open source version.

1133
00:51:17,466 --> 00:51:21,647
So you don't have to have if-def-steam go this janky way,

1134
00:51:22,167 --> 00:51:23,927
otherwise I'll use my socket code or whatever,

1135
00:51:23,947 --> 00:51:25,627
and then you're resolving all those same problems

1136
00:51:25,647 --> 00:51:27,668
that we talked about, hardening your network code and all that.

1137
00:51:29,288 --> 00:51:30,309
Just talk straight to the API.

1138
00:51:33,509 --> 00:51:36,250
So if you are a Steam partner, please email me

1139
00:51:36,310 --> 00:51:39,751
and I can get you early access to this SDK.

1140
00:51:39,791 --> 00:51:40,271
It's currently.

1141
00:51:40,955 --> 00:51:42,336
kind of in early access as a separate lib.

1142
00:51:42,516 --> 00:51:44,237
It will be coming in the CMOS SDK soon.

1143
00:51:49,221 --> 00:51:49,561
That is it.

1144
00:51:50,902 --> 00:51:51,463
Thank you for your time.

1145
00:51:52,203 --> 00:51:52,924
Are there any questions?

1146
00:52:00,129 --> 00:52:01,670
How do you, first of all, great talk.

1147
00:52:01,990 --> 00:52:02,571
Love all this stuff.

1148
00:52:02,991 --> 00:52:05,132
How do you mitigate against replay attacks?

1149
00:52:06,974 --> 00:52:07,834
Replay attacks.

1150
00:52:09,183 --> 00:52:10,984
So can you describe what that means?

1151
00:52:11,004 --> 00:52:13,125
So in a replay attack, someone who's in the game

1152
00:52:13,165 --> 00:52:14,505
and wants to, like they're losing,

1153
00:52:14,545 --> 00:52:15,846
they want to take the server down

1154
00:52:15,906 --> 00:52:17,307
so that they don't have the MMR hit,

1155
00:52:17,687 --> 00:52:19,188
they'll record a little bit of their traffic

1156
00:52:19,208 --> 00:52:19,868
that they're sending,

1157
00:52:20,368 --> 00:52:21,789
and then they'll just give that to a bot farm

1158
00:52:21,809 --> 00:52:23,530
and say, hey bot farm, send this traffic.

1159
00:52:29,493 --> 00:52:34,035
Well, so the protocol is a connection-oriented protocol.

1160
00:52:34,555 --> 00:52:34,755
So...

1161
00:52:37,819 --> 00:52:41,782
You could, I'm probably gonna have to think,

1162
00:52:42,283 --> 00:52:44,384
all these security questions can get really complicated,

1163
00:52:44,444 --> 00:52:46,706
okay, so I have to think about exactly how

1164
00:52:47,167 --> 00:52:47,948
we're gonna defend to that.

1165
00:52:48,028 --> 00:52:49,269
I may have to answer that offline.

1166
00:52:49,549 --> 00:52:51,571
I don't mean to cop out, because I'm certain

1167
00:52:51,591 --> 00:52:53,292
that we have an answer for that.

1168
00:52:53,372 --> 00:52:55,414
I'm just gotta think through, I don't wanna

1169
00:52:57,336 --> 00:52:59,698
give any wrong answers, especially on security stuff,

1170
00:52:59,718 --> 00:53:01,239
where it depends so much on the details.

1171
00:53:03,061 --> 00:53:04,202
Does anybody else have any questions?

1172
00:53:06,717 --> 00:53:08,619
If you want to, we can talk about it after.

1173
00:53:08,639 --> 00:53:10,520
I just don't want to answer off the cuff here.

1174
00:53:11,781 --> 00:53:12,001
Yes, sir?

1175
00:53:12,021 --> 00:53:14,603
So it seems like there's fair amount of value

1176
00:53:15,504 --> 00:53:18,846
that I as a developer would get if I was using this.

1177
00:53:19,106 --> 00:53:21,068
So is there an associated cost?

1178
00:53:21,848 --> 00:53:21,968
No.

1179
00:53:22,629 --> 00:53:22,809
Okay.

1180
00:53:23,149 --> 00:53:24,430
No, no, we just, you know,

1181
00:53:24,750 --> 00:53:26,231
we consider it a Steam platform feature.

1182
00:53:26,532 --> 00:53:26,732
Okay.

1183
00:53:35,278 --> 00:53:35,838
No other questions?

1184
00:53:39,724 --> 00:53:42,609
Okay, well I'll be, I guess, hanging out out here

1185
00:53:42,890 --> 00:53:44,653
answering this guy's security question.

1186
00:53:44,794 --> 00:53:47,118
And if anybody else has any more questions,

1187
00:53:47,499 --> 00:53:48,401
thank you for your time again.

