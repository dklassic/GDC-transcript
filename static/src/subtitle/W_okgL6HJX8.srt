1
00:00:04,979 --> 00:00:09,901
Hello. Thanks so much for coming. This is the second tech

2
00:00:09,921 --> 00:00:13,842
tool box for those of you who weren't here last year. What we

3
00:00:13,862 --> 00:00:17,663
try to do here is you know when you make video games? I hope

4
00:00:17,723 --> 00:00:21,824
that's a thing that sounds familiar. And you end up having

5
00:00:21,844 --> 00:00:25,285
this recurring problem that is just really tedious and maybe

6
00:00:25,305 --> 00:00:27,486
you write some code or you make a little tool or you make a

7
00:00:27,506 --> 00:00:29,707
little app that overcomes that problem.

8
00:00:30,126 --> 00:00:32,590
post mortems and how did you do this. I always have to go.

9
00:00:38,614 --> 00:00:40,716
this tedious thing or I never thought about solving a problem

10
00:00:40,756 --> 00:00:44,539
that way. And often for most games there never will be a

11
00:00:44,579 --> 00:00:46,581
postmortem and for most of those tools they'll never see the

12
00:00:46,601 --> 00:00:50,444
light of day. That's why we put this session together and we did

13
00:00:50,464 --> 00:00:53,066
an open call for just like what's the thing that you made

14
00:00:53,347 --> 00:00:55,929
basically for yourself? What interesting problems did you

15
00:00:55,969 --> 00:00:57,990
solve or did you solve them in an interesting way? So it's

16
00:00:58,351 --> 00:01:02,454
basically interesting solutions or interesting problems. We have

17
00:01:02,514 --> 00:01:05,537
five speakers today. They get about ten minutes each.

18
00:01:06,647 --> 00:01:10,548
The first one is Evan Todd who is going to talk to us about his

19
00:01:10,688 --> 00:01:14,108
system for node based dialogue trees. Let's give him a

20
00:01:14,128 --> 00:01:14,408
applause.

21
00:01:16,929 --> 00:01:23,371
Applause. Thank you.

22
00:01:23,511 --> 00:01:31,893
Thank you.

23
00:01:32,113 --> 00:01:35,213
I'm nobody. But thank you for coming out.

24
00:01:36,549 --> 00:01:39,710
and I'm a poor man. And this is the poor man's dialogue tree.

25
00:01:40,711 --> 00:01:44,872
How to make a dialogue tree if you don't have any money. So

26
00:01:44,952 --> 00:01:47,393
essentially I'm here for talking about dialogue, but I'm really

27
00:01:47,433 --> 00:01:50,494
here to sell you on my development philosophy and to

28
00:01:50,534 --> 00:01:55,496
get you to convert to it. It's this very powerful paradigm that

29
00:01:55,996 --> 00:01:58,897
is so powerful that it actually extends beyond game development

30
00:01:58,937 --> 00:02:01,918
into other aspects of life. In fact, it actually saved my

31
00:02:01,958 --> 00:02:04,899
parents' marriage. It's that powerful.

32
00:02:06,550 --> 00:02:10,892
I'm just kidding, they're still divorced. Okay. So I'm going to

33
00:02:10,912 --> 00:02:14,594
talk about the right way to do things, which is, all right, I

34
00:02:14,614 --> 00:02:17,715
need a dialogue tree. I'll go to the unity asset store. I'll buy

35
00:02:17,755 --> 00:02:19,316
an asset and I'll

36
00:02:19,948 --> 00:02:24,251
kind of Frankenstein patch it into my project. And this is, I

37
00:02:24,751 --> 00:02:28,053
am not a big fan of this because it's expensive probably. It's

38
00:02:28,093 --> 00:02:31,274
third party so it's designed to do a lot of things for a lot of

39
00:02:31,294 --> 00:02:34,076
people. It's not exactly what you need. And crucially it's

40
00:02:34,176 --> 00:02:37,497
boring because, I don't know, you're letting other people do

41
00:02:37,537 --> 00:02:41,720
your job for you and it's fun to make stuff. So the poor man's way

42
00:02:41,840 --> 00:02:45,622
is to write your own to get 80% of the solution for 20% of the

43
00:02:45,642 --> 00:02:48,943
work and you get exactly what you need. So.

44
00:02:50,974 --> 00:02:53,897
This is the poor man's dialogue tree. What I needed was an

45
00:02:53,997 --> 00:02:57,761
editor that I could create a node based system to hook

46
00:02:58,001 --> 00:03:00,404
dialogue nodes together and everything. The right way to do

47
00:03:00,444 --> 00:03:03,307
this would be write it in the same language as your game. Make

48
00:03:03,347 --> 00:03:06,811
a really nice Windows form application with all this stuff.

49
00:03:07,612 --> 00:03:10,535
It would be performant. It would have the same code base as your

50
00:03:10,555 --> 00:03:11,176
game and everything.

51
00:03:11,805 --> 00:03:14,287
but that takes a lot of work so I did it the poor man's way

52
00:03:14,327 --> 00:03:19,169
which was HTML5. Cross platform, easy to do, performance I don't

53
00:03:19,209 --> 00:03:21,670
really care about because it's just a tool for creating things

54
00:03:21,730 --> 00:03:26,012
so it doesn't have to run super fast. JavaScript has so many

55
00:03:26,052 --> 00:03:30,174
libraries it's insane. And everyone speaks JSON so you have

56
00:03:30,194 --> 00:03:34,997
a really easy to read format coming out of HTML5. So this is

57
00:03:35,037 --> 00:03:35,677
what I came up with.

58
00:03:36,597 --> 00:03:40,781
I call it dialogger. And it's just a, there's a library called

59
00:03:40,861 --> 00:03:46,565
joint JS that I used for the fancy node sort of connecting

60
00:03:46,665 --> 00:03:50,848
things. It's really easy to set up. And you can see this is

61
00:03:50,888 --> 00:03:53,670
actually running in its own little application. It's not

62
00:03:53,930 --> 00:03:58,173
actually running in a browser. I use something called NW.JS for

63
00:03:58,193 --> 00:04:01,255
that, which is, it's really simple. You just take all your

64
00:04:01,275 --> 00:04:04,298
JavaScript stuff, zip it up and rename it to.

65
00:04:05,086 --> 00:04:08,528
like a dot NW file, I think, and then you dump it into the

66
00:04:08,608 --> 00:04:13,130
NWJS folder and it turns it into an application. It's the easiest

67
00:04:13,170 --> 00:04:17,232
thing in the world to make a completely fake desktop

68
00:04:17,272 --> 00:04:19,893
application that feels like a real thing, but it's totally not

69
00:04:19,913 --> 00:04:25,656
a real thing. Yeah, so joint JS is great for making diagrams and

70
00:04:25,696 --> 00:04:29,558
graphs and things like, shoot, what's that called?

71
00:04:30,260 --> 00:04:33,623
Anyway, for connecting things together, NWJS is great for

72
00:04:33,663 --> 00:04:37,267
stand alone apps. You have the full node APIs as well. So any

73
00:04:37,307 --> 00:04:41,311
kind of file access, networking, you get access to all that. The

74
00:04:41,351 --> 00:04:45,134
whole thing was 700 lines of JavaScript. So it was very

75
00:04:45,535 --> 00:04:48,998
small, easy to write. And it's very extensible, too. You can

76
00:04:49,118 --> 00:04:52,741
add widgets to nodes and things very easy with HTML.

77
00:04:53,322 --> 00:04:57,305
So the way it works is I have three different types of files.

78
00:04:57,385 --> 00:05:01,928
So there's a .dl file which is JSON and it's the full 2D layout

79
00:05:01,948 --> 00:05:05,952
of all the nodes and all the properties and things that you

80
00:05:05,972 --> 00:05:10,335
need. And then .dlz is the same JSON but it's just what I need

81
00:05:10,415 --> 00:05:14,978
for parsing a dialogue tree in the game. So it's kind of

82
00:05:15,099 --> 00:05:18,861
optimized. And then I use actually Excel files for the

83
00:05:19,022 --> 00:05:22,284
actual strings. So if you look, I'm going to show you a

84
00:05:24,484 --> 00:05:30,146
There we go. These are kind of like IDs. They're not actual

85
00:05:30,226 --> 00:05:35,168
dialogue. So what I do is I have an Excel file with all these IDs

86
00:05:35,208 --> 00:05:38,670
in one column and then the actual strings in another

87
00:05:38,710 --> 00:05:45,212
column. Why do I use Excel? It's because it's really when you're

88
00:05:45,232 --> 00:05:48,734
a poor man and you have no money and you don't want to pay anyone

89
00:05:48,754 --> 00:05:49,494
to translate your game.

90
00:05:51,009 --> 00:05:55,112
You often have to do with fan translations and if you ship

91
00:05:55,132 --> 00:05:58,894
your strings in Excel and people will come to you and be like,

92
00:05:58,934 --> 00:06:01,876
hey, I want to translate your game, how do I do that? And it's

93
00:06:01,996 --> 00:06:04,278
really nice to be able to say, oh, it's just an Excel file,

94
00:06:04,338 --> 00:06:06,419
open it up and just change it yourself and then send me the

95
00:06:06,479 --> 00:06:11,683
Excel file. Like I said, this is my, one of my Excel files and

96
00:06:12,103 --> 00:06:15,085
people were just like, hey, can I add Hungarian? I'm like,

97
00:06:15,365 --> 00:06:19,688
whatever, just add another column. It's super easy. So

98
00:06:20,772 --> 00:06:25,673
TLDR, do it yourself. It's more fun that way. I'm sorry this

99
00:06:25,713 --> 00:06:28,334
wasn't very technical. If you are interested in dialogue

100
00:06:28,354 --> 00:06:32,475
trees and how to do all this stuff, it is on GitHub. There's

101
00:06:32,515 --> 00:06:35,456
also an article I wrote about it on my website if you want to see

102
00:06:35,556 --> 00:06:38,557
the exact details of how everything works and everything.

103
00:06:38,637 --> 00:06:41,458
But we only have nine minutes. Thank you.

104
00:06:53,887 --> 00:06:59,215
So thanks, Evan. Next up we have Kir, who worked on darkest

105
00:06:59,235 --> 00:07:02,100
dungeon and he's going to talk to us about how they did the

106
00:07:02,180 --> 00:07:03,322
data implementation for that game.

107
00:07:19,517 --> 00:07:22,118
So hi, my name is Kier Meyer and I'm a programmer on darkest

108
00:07:22,138 --> 00:07:25,139
dungeon and today I'll be talking about automating data

109
00:07:25,279 --> 00:07:28,961
implementation with IDs. Over this talk I'm going to be

110
00:07:28,981 --> 00:07:32,883
talking about a short bit about syntax, a little bit about

111
00:07:32,923 --> 00:07:36,224
generating using IDs, referencing IDs, how we use the

112
00:07:36,244 --> 00:07:39,786
file system hierarchy to automate data implementation,

113
00:07:40,126 --> 00:07:44,168
linking code data to file data and automatically generating

114
00:07:44,188 --> 00:07:47,450
data. So a little bit about darkest dungeon, it's a term

115
00:07:47,470 --> 00:07:48,410
based RPG that's...

116
00:07:49,206 --> 00:07:51,568
about dealing with the challenges of stress. A lot of

117
00:07:51,588 --> 00:07:54,511
the content is procedural so we're dealing with a lot of data

118
00:07:54,531 --> 00:07:57,733
that can be hooked up in many different ways. It's on many

119
00:07:57,753 --> 00:08:01,336
platforms as well as mostly a two person programming team and

120
00:08:01,416 --> 00:08:05,560
was made in C++11 with custom engine and a fair amount of

121
00:08:05,580 --> 00:08:05,880
middleware.

122
00:08:06,935 --> 00:08:09,458
syntax about the talk. I'm going to refer to a lot of things as

123
00:08:09,538 --> 00:08:12,842
classes. That's just stuff that's not going to change while

124
00:08:12,862 --> 00:08:15,845
the game is running. So example of that is we have a jester

125
00:08:15,886 --> 00:08:19,570
that's a hero class and he has a max HP of 35. He has a skill

126
00:08:19,590 --> 00:08:22,994
called inspiring tune and his battle ballad is a ranged

127
00:08:23,054 --> 00:08:23,294
attack.

128
00:08:24,665 --> 00:08:26,385
Another thing about syntax, because I'm going to be talking

129
00:08:26,405 --> 00:08:29,686
about IDs, a lot of the talk is going to be about, we'd be using

130
00:08:29,726 --> 00:08:32,947
string formats of inserting strings into other strings,

131
00:08:33,087 --> 00:08:35,947
numbers into strings. So instead of using the traditional string

132
00:08:35,987 --> 00:08:40,048
format code, I'm going to use a bold and square bracket syntax,

133
00:08:40,428 --> 00:08:42,649
which will make a lot more sense when I show you an example of

134
00:08:42,709 --> 00:08:47,750
it. So one great way of using IDs is when stuff is missing or

135
00:08:47,790 --> 00:08:51,111
there's an error or something is invalid. We use IDs a lot for

136
00:08:51,231 --> 00:08:53,551
validation messages, because we'd be just hooking up data.

137
00:08:55,372 --> 00:08:58,556
programmers and having the content come in afterwards.

138
00:08:58,796 --> 00:09:04,362
Missing audio message IDs or missing IDs of objects that

139
00:09:04,402 --> 00:09:06,725
don't have the appropriate data like if a skill was missing in

140
00:09:06,765 --> 00:09:11,931
effect. String formats are really useful for generating

141
00:09:11,971 --> 00:09:12,411
file paths.

142
00:09:14,739 --> 00:09:17,281
when you have new IDs coming in, then new file paths are

143
00:09:17,301 --> 00:09:20,983
generated and your data will be hooked up. The one thing about

144
00:09:21,003 --> 00:09:23,345
this is you need to have those error messages like I showed

145
00:09:23,385 --> 00:09:28,269
before or be able to handle data being missing. So example of

146
00:09:28,309 --> 00:09:31,311
this is our resistances. We have eight resistances in the game

147
00:09:31,351 --> 00:09:34,793
that a hero or monster can have. And whenever we add a resistance

148
00:09:34,873 --> 00:09:38,496
ID, we generate a file path based on that ID. That made

149
00:09:39,593 --> 00:09:42,234
whenever we added a new one, that would automatically show up

150
00:09:42,254 --> 00:09:44,135
in the UI, that would automatically have an icon

151
00:09:44,155 --> 00:09:49,098
associated with it as well as value for the hero and like a

152
00:09:49,178 --> 00:09:51,660
localization name. So we can grab all those using those

153
00:09:51,700 --> 00:09:55,842
resistance IDs. Another useful thing we do with IDs is separate

154
00:09:55,882 --> 00:09:58,624
files into different folders. So we have items in the game and

155
00:09:58,664 --> 00:10:01,005
items are associated with types and

156
00:10:02,161 --> 00:10:05,682
IDs. So we're able to put all the trinkets in a trinkets

157
00:10:05,702 --> 00:10:08,182
folder and all the gems in a gem folder and automatically hook up

158
00:10:08,222 --> 00:10:10,683
all these icons because I didn't really want to spend the time of

159
00:10:11,243 --> 00:10:13,483
going through and saying, well, the lucky dice should use the

160
00:10:13,503 --> 00:10:18,424
lucky dice icon. Another thing that's useful is you can break

161
00:10:18,484 --> 00:10:22,225
up your files into a ‑‑ you can break up your data into

162
00:10:22,245 --> 00:10:26,666
multiple files using IDs. So we have an art file and an info file

163
00:10:26,686 --> 00:10:27,686
for every hero and they

164
00:10:29,056 --> 00:10:30,536
They were worked on by two different people with two

165
00:10:30,576 --> 00:10:33,937
completely different pipelines. Using the IDs we grabbed for a

166
00:10:34,297 --> 00:10:38,578
given hero class we could link the art file and the info file

167
00:10:38,598 --> 00:10:41,758
which I mostly designed it. Another useful thing about IDs

168
00:10:41,778 --> 00:10:44,399
is it makes sharing logic between multiple things very

169
00:10:44,479 --> 00:10:48,359
easy. So on the left we have a buff class which is referenced

170
00:10:48,379 --> 00:10:51,780
by ID by two different trinkets. So if that buff class did change

171
00:10:51,840 --> 00:10:56,461
and maybe instead of increase its attack rating that would

172
00:10:56,501 --> 00:10:57,521
reflect in both trinkets.

173
00:11:00,368 --> 00:11:05,670
When you're using IDs, you can also reference shared IDs. So

174
00:11:05,690 --> 00:11:09,011
what we have here is we have our colors in the game. Notable,

175
00:11:09,051 --> 00:11:13,512
harmful and neutral are all defined with RGBA values. And

176
00:11:13,532 --> 00:11:15,753
then the four underneath, which are all part of the game over

177
00:11:15,793 --> 00:11:20,395
screen, they all reference, they're all, when the neutral,

178
00:11:20,455 --> 00:11:23,416
notable and harmful change, then the game over colors would

179
00:11:23,436 --> 00:11:26,437
change as well. This also helps with hooking stuff up because we

180
00:11:26,457 --> 00:11:27,597
can hook up these colors and then.

181
00:11:29,096 --> 00:11:31,978
them to something and have art come in afterwards and fine

182
00:11:32,018 --> 00:11:36,801
tune all the different colors. Another useful thing when

183
00:11:36,821 --> 00:11:39,242
dealing with ID is you can generate the types of classes

184
00:11:39,662 --> 00:11:43,144
while parsing different types of classes. So for example, all

185
00:11:43,164 --> 00:11:46,266
the trinkets in dark extension are items. So whenever we parse

186
00:11:46,306 --> 00:11:48,588
the trinket class, which we have hundreds of, we automatically

187
00:11:48,628 --> 00:11:52,630
generate all the data that would be consistent for the item

188
00:11:52,670 --> 00:11:57,333
portion of the logic. We use the file system hierarchy to

189
00:11:57,353 --> 00:11:57,673
parse.

190
00:11:58,648 --> 00:12:02,651
parse a lot of the, to generate these IDs. So we can go through

191
00:12:02,671 --> 00:12:05,774
the folders and grab the associated names of the folders

192
00:12:05,834 --> 00:12:09,637
and use those as our IDs to then hook up data with. So for

193
00:12:09,677 --> 00:12:13,140
example, every folder in data heroes is one of our hero

194
00:12:13,160 --> 00:12:15,903
classes and every folder in data monsters is a monster class. So

195
00:12:15,923 --> 00:12:18,865
we just create a new folder and the base assets to be able to

196
00:12:19,426 --> 00:12:20,386
create a new monster in the game.

197
00:12:21,353 --> 00:12:25,775
we use regular expressions to grab the string we needed out

198
00:12:25,815 --> 00:12:28,896
of the folder path. So for instance the data monsters

199
00:12:28,916 --> 00:12:31,317
bloated corpse, data monsters swine attire and data monsters

200
00:12:31,397 --> 00:12:34,418
unclean giant would all become there. That's how we grab their

201
00:12:34,558 --> 00:12:40,420
IDs for those monsters. One other useful thing we did with

202
00:12:40,480 --> 00:12:43,581
IDs is we linked code data to file data. And this technique

203
00:12:43,681 --> 00:12:47,202
uses preprocessor macros and enums as well. And what it does

204
00:12:47,222 --> 00:12:50,823
is it links the declaration of enums to IDs and other constant

205
00:12:50,843 --> 00:12:51,083
data.

206
00:12:52,054 --> 00:12:57,758
enums are very useful in code as most of you know. The IDs are

207
00:12:57,778 --> 00:13:00,680
great for parsing data files. First I'm going to show the

208
00:13:00,760 --> 00:13:04,143
unlinked method. This is what we accomplish with the linked

209
00:13:04,163 --> 00:13:08,746
method I'll show afterwards. But with just an example enum and

210
00:13:08,926 --> 00:13:11,628
array of strings, the

211
00:13:13,166 --> 00:13:16,147
have to be kept the same size. They can have spelling

212
00:13:16,167 --> 00:13:18,688
inconsistencies. If you mess up spelling, you might not catch

213
00:13:18,728 --> 00:13:22,730
that at compile time if it's in the string data. So the way we

214
00:13:22,770 --> 00:13:28,052
linked it is by using macros. We'd have nested macros that

215
00:13:28,572 --> 00:13:31,153
when we declare an enum, we'd go through and create enums

216
00:13:31,193 --> 00:13:34,174
associated with those IDs defined at the top. So whenever

217
00:13:34,214 --> 00:13:38,175
we added something to number types declare, that would

218
00:13:41,219 --> 00:13:44,382
create a string ID. This is great because they would always

219
00:13:44,422 --> 00:13:48,204
be in sync and they would always have, the spelling would always

220
00:13:48,244 --> 00:13:51,086
be consistent between the two of them. We use that for our

221
00:13:51,186 --> 00:13:52,587
options in the game. So, we have a string ID, we have a string

222
00:13:54,050 --> 00:13:56,851
each option in the game could have multiple constants linked

223
00:13:56,871 --> 00:14:01,653
to it. They only mattered in code. So stuff like how exactly

224
00:14:01,693 --> 00:14:03,654
a graphics option would work and whether that would require a

225
00:14:03,694 --> 00:14:06,896
reset was a code decision so the data would be kept in code. And

226
00:14:06,916 --> 00:14:10,657
then we'd access those through functions that took enums in. So

227
00:14:10,697 --> 00:14:13,258
we'd always know that we'd have the data associated with it

228
00:14:13,298 --> 00:14:16,720
because that's how you declared the data and we'd access them

229
00:14:16,740 --> 00:14:20,922
through different functions to grab that.

230
00:14:21,564 --> 00:14:23,865
So that was very useful for automatically generating data.

231
00:14:23,985 --> 00:14:26,967
Our save load is JSON based and our analytics data is JSON

232
00:14:26,987 --> 00:14:30,850
based. And parsing consists of going through that enum, grabbing

233
00:14:30,870 --> 00:14:36,774
the linked IDs and creating JSON dictionaries. So to the left is

234
00:14:36,914 --> 00:14:40,116
the save file for our option file and to the right is the

235
00:14:40,156 --> 00:14:44,960
code for restore loading that save file, which basically

236
00:14:45,000 --> 00:14:47,742
consists of going through each option, grabbing the associated

237
00:14:47,842 --> 00:14:48,763
ID, parsing the

238
00:14:49,593 --> 00:14:54,656
JSON. So whenever we added an option in the, oh, whenever we

239
00:14:54,696 --> 00:14:56,177
added an option, it would automatically be saved and

240
00:14:56,217 --> 00:14:59,139
restored. We also used it for our analytics data. So we would

241
00:14:59,159 --> 00:15:05,423
be posting our options, analytics data to, of what

242
00:15:05,443 --> 00:15:07,864
profile options different heroes would have. So when we added a

243
00:15:07,904 --> 00:15:10,646
new option, that would also show up in the analytics data because

244
00:15:10,666 --> 00:15:13,368
we're just going through every option, grabbing the appropriate

245
00:15:13,428 --> 00:15:15,489
ones we want to post the analytics data and then posting

246
00:15:15,529 --> 00:15:17,831
it using the ID we linked with the, you know,

247
00:15:20,102 --> 00:15:23,004
and as an outro, thanks to Red X Studios for working with me on

248
00:15:23,044 --> 00:15:25,286
Darkest Dungeon. Thanks to Power Up Audio for doing a great job

249
00:15:25,326 --> 00:15:28,328
on sound and Pierre Tardif and Calvin McBell, the other

250
00:15:28,348 --> 00:15:32,051
programmers. And that's my Twitter and e-mail and I'll put

251
00:15:32,511 --> 00:15:36,474
examples of the source I showed on my website when I return

252
00:15:36,534 --> 00:15:38,095
home. Thank you.

253
00:15:38,115 --> 00:15:43,960
Thank you.

254
00:15:44,000 --> 00:15:44,360
Thanks Gary.

255
00:15:47,667 --> 00:15:49,589
I always find it really interesting when people do stuff

256
00:15:49,629 --> 00:15:52,712
that feels really counterintuitive like using file

257
00:15:52,732 --> 00:15:55,354
structures for actual logic. But it's really cool to see that

258
00:15:55,394 --> 00:15:59,858
you, you know, was the right solution for your project. So

259
00:15:59,878 --> 00:16:04,202
next up we have Kate Compton who wrote a tool called Tracery to

260
00:16:04,262 --> 00:16:08,146
generate text like orkish insults and things like that.

261
00:16:08,166 --> 00:16:10,728
So I hope, yeah. Give it up for Kate.

262
00:16:17,168 --> 00:16:20,090
Hi, everyone. I'm Kate Compton. I'm galaxy Kate at all the

263
00:16:20,130 --> 00:16:24,755
things that matter. And, yeah, this is my Twitter handle. You

264
00:16:24,795 --> 00:16:27,578
might know me because I made the planets on Spore or I was one of

265
00:16:27,618 --> 00:16:31,101
many people who made the planets on Spore. I did some fire stuff

266
00:16:31,141 --> 00:16:34,064
on Sim City. Then I got bored and I went back to grad school

267
00:16:34,104 --> 00:16:34,704
to get a Ph.D.

268
00:16:35,396 --> 00:16:37,757
So now I'm at the UCSC expressive intelligence studio

269
00:16:37,797 --> 00:16:40,719
which uses AI to make art and weirdness

270
00:16:40,799 --> 00:16:41,640
and occasionally games.

271
00:16:43,301 --> 00:16:45,882
And basically I'm getting a PhD in doing PCG.

272
00:16:46,283 --> 00:16:47,203
So that's where this comes from.

273
00:16:48,404 --> 00:16:52,927
Ghost logs, oh sorry, ghost logs, there we go.

274
00:16:52,967 --> 00:16:54,768
So Trace raised the story of how I thought

275
00:16:54,788 --> 00:16:56,549
I was making a little text generation toy

276
00:16:56,589 --> 00:16:58,050
and it accidentally turned into a language.

277
00:16:58,890 --> 00:16:59,911
And then Twitter bots happened.

278
00:17:01,152 --> 00:17:03,673
So this is, oh let's see.

279
00:17:04,846 --> 00:17:09,029
I don't have my timer up here. This is intended as a super easy

280
00:17:09,069 --> 00:17:11,510
tool. This is to keep myself from having to do a pencil and

281
00:17:11,530 --> 00:17:14,852
paper assignment that I had been given. I wrote a JavaScript

282
00:17:14,873 --> 00:17:18,595
program to do it instead. What it is, this is the minimal

283
00:17:18,635 --> 00:17:21,677
version of tracery on the left. Or of a tracery program on the

284
00:17:21,717 --> 00:17:26,600
left. And then I'm going to be super pissed if none of my

285
00:17:27,701 --> 00:17:29,682
gifts work. All right.

286
00:17:30,132 --> 00:17:33,254
that's sad. Anyway, there's generated text on the right of

287
00:17:33,395 --> 00:17:36,017
game, generating bad game pitches and printing them to the

288
00:17:36,057 --> 00:17:39,459
screen. So let's see. It's, so, it's a, it's a, it's a, it's a

289
00:17:40,004 --> 00:17:45,067
you have, you import tracery. Then you have your little JSON

290
00:17:45,167 --> 00:17:48,649
object that describes your grammar. So this is basically

291
00:17:48,689 --> 00:17:50,591
the recipe for how to generate whatever it is that I'm

292
00:17:50,631 --> 00:17:54,153
generating. In this case, bad game pitches. You can add

293
00:17:54,193 --> 00:17:57,475
modifiers if you want. And then you're pretty much ready to make

294
00:17:57,515 --> 00:18:00,177
content. Now you hit go and you make a bunch of content. So

295
00:18:00,397 --> 00:18:04,699
that's it. The language itself is very simple. It's just using

296
00:18:04,739 --> 00:18:08,582
a hashtag syntax to do grammar generation. So here's hello

297
00:18:08,622 --> 00:18:09,142
world. So

298
00:18:09,882 --> 00:18:15,145
origin is the string greetings world and then because greetings is hashed in hashtags it'll go and

299
00:18:16,166 --> 00:18:20,228
Paste in one of the greetings options and that does it recursively so you can go down as far as you want

300
00:18:21,749 --> 00:18:26,432
You recursively define symbols. You can use modifiers to change text like do pluralizations do

301
00:18:27,293 --> 00:18:28,233
proper a and

302
00:18:28,974 --> 00:18:33,016
variations if anybody's done text generation, you know that that stuff is like the absolute devil is like

303
00:18:33,646 --> 00:18:38,513
getting all of the proper English syntax. And you can also store and reuse generated

304
00:18:38,553 --> 00:18:41,717
text. So if you generate a main character name, you can reuse that over and over again.

305
00:18:42,492 --> 00:18:44,633
So basically what it does is it does text generation.

306
00:18:45,834 --> 00:18:47,434
And it does text generation in a way that's

307
00:18:47,474 --> 00:18:48,355
really easy to program.

308
00:18:48,415 --> 00:18:51,196
So this was a dress generator that I made in response to the

309
00:18:51,236 --> 00:18:52,036
dress controversy.

310
00:18:52,676 --> 00:18:54,577
I made this in 40 minutes, which meant that I was only 10

311
00:18:54,797 --> 00:18:56,598
minutes late to catch the dress coolness.

312
00:18:57,899 --> 00:18:59,939
But yeah, it generates, you hit the little button and it

313
00:18:59,979 --> 00:19:02,100
will generate dress descriptions forever.

314
00:19:02,641 --> 00:19:06,022
But TLDR, tracery is really easy to use, especially if

315
00:19:06,042 --> 00:19:07,322
you're in JavaScript.

316
00:19:07,362 --> 00:19:09,503
And people wrote all sorts of nice things about how easy it

317
00:19:09,543 --> 00:19:11,144
was to use and how it got them back into programming.

318
00:19:11,841 --> 00:19:15,183
So I put that up online and somebody took it, George

319
00:19:15,223 --> 00:19:17,164
Buckingham, and he made this tool called Cheap Bots Done

320
00:19:17,204 --> 00:19:21,867
Quick, which because tracery grammars are a JSON object, he

321
00:19:21,907 --> 00:19:24,689
was able to run a node server that you would paste your

322
00:19:24,709 --> 00:19:27,251
little JSON object in, log in with Twitter, and he would make

323
00:19:27,271 --> 00:19:27,891
you a Twitter bot.

324
00:19:29,203 --> 00:19:32,486
So anybody who could type in a five line grammar about making

325
00:19:32,546 --> 00:19:36,209
Pokemon insults could have a Twitter bot running every five

326
00:19:36,229 --> 00:19:39,072
minutes or so. And people did. We have about 600 of these

327
00:19:39,112 --> 00:19:41,754
running currently. Every so often he tells me how many of

328
00:19:41,814 --> 00:19:44,737
them are going. Here are a couple of my personal favorites.

329
00:19:45,117 --> 00:19:47,540
There's a hipster cocktail generator, a compliment

330
00:19:47,580 --> 00:19:52,044
generator, something that does Mexican literary theory.

331
00:19:53,518 --> 00:19:55,879
think piece generator, et cetera. And then somebody

332
00:19:55,919 --> 00:20:00,261
realized, hey, emojis are just another form of text. So we can

333
00:20:00,301 --> 00:20:03,862
do emoji generators. So they made emoji Twitter bots. And

334
00:20:03,882 --> 00:20:07,404
this was pretty cool. And then somebody posted on Twitter this

335
00:20:07,464 --> 00:20:10,245
strange thing. This is a tool that I had made an online visual

336
00:20:10,305 --> 00:20:11,685
editor for tracery that people were.

337
00:20:12,045 --> 00:20:14,947
were enjoying. He said, hey, look what I got it to do. Turns

338
00:20:15,008 --> 00:20:18,730
out SVG is just another form of text. If you have an HTML page,

339
00:20:18,790 --> 00:20:23,994
it will parse that as an SVG object. So suddenly it could

340
00:20:24,034 --> 00:20:27,656
make graphics. This weird little thing I made to make Roman

341
00:20:27,716 --> 00:20:29,557
comedies was making graphics.

342
00:20:30,779 --> 00:20:33,921
So George went back and we updated Tracer a little bit so

343
00:20:34,001 --> 00:20:37,383
now I can make graphics Twitter bots. So there's a tartan

344
00:20:37,403 --> 00:20:39,945
generator and circle party and a little one I made to do

345
00:20:40,005 --> 00:20:42,927
spaceships and a gorgeous one George made to do soft focus

346
00:20:42,947 --> 00:20:46,349
landscapes. So yeah, Twitter bots. But this is the indie game

347
00:20:46,369 --> 00:20:48,630
summit so I should talk a little bit about games. You can still

348
00:20:48,670 --> 00:20:51,171
use it in JavaScript games. People have ported it to Ruby,

349
00:20:51,212 --> 00:20:54,413
Python, twine. A couple people are working on Unity. I don't

350
00:20:54,453 --> 00:20:55,234
know how well that will go.

351
00:20:56,942 --> 00:21:01,023
My friend has used it in a number of their games and used

352
00:21:01,043 --> 00:21:05,945
it to generate text, boring conversation at dinner parties,

353
00:21:07,305 --> 00:21:09,586
surreal greeting rituals for greeting your beloved

354
00:21:09,626 --> 00:21:11,887
companions, so like gaze cordially into your partner's

355
00:21:11,907 --> 00:21:14,187
secrets and clearing your mind of judgment, say yo.

356
00:21:17,729 --> 00:21:18,249
Oh, there we go.

357
00:21:18,329 --> 00:21:18,549
Okay.

358
00:21:18,569 --> 00:21:20,850
I just have to press go and then it does the GIF.

359
00:21:22,360 --> 00:21:24,081
And then I'm doing some experiments with less

360
00:21:24,161 --> 00:21:25,161
experimental games as well.

361
00:21:25,181 --> 00:21:28,143
Like how could you actually use this in other forms of games?

362
00:21:29,524 --> 00:21:32,726
And so this one on the right is a very simple simulator for a

363
00:21:33,206 --> 00:21:34,146
hipster restaurant.

364
00:21:34,567 --> 00:21:36,388
And it generates weird hipster recipes.

365
00:21:36,468 --> 00:21:39,109
You can run your hipster restaurant, and every time kale

366
00:21:39,149 --> 00:21:42,291
becomes trendy, you can fill your restaurant with like kale

367
00:21:42,331 --> 00:21:43,832
pizza, and kale ice cream, and kale soda.

368
00:21:44,815 --> 00:21:46,896
And this is my experiment.

369
00:21:47,577 --> 00:21:49,718
Can I use generated text to make something

370
00:21:49,738 --> 00:21:52,060
that is incredibly drab become infinitely replayable?

371
00:21:52,100 --> 00:21:53,140
And so far it seems like yes.

372
00:21:54,161 --> 00:21:57,803
This is one that is making the world's dumbest

373
00:21:57,903 --> 00:21:59,404
finite state machine dating sim,

374
00:21:59,484 --> 00:22:00,925
dressing that up with procedural text,

375
00:22:01,025 --> 00:22:03,687
and it makes regrettable romances,

376
00:22:04,588 --> 00:22:06,329
such as cybernetic cuttlefishes.

377
00:22:08,215 --> 00:22:14,121
But yeah, I would love to see people in this room using it

378
00:22:14,341 --> 00:22:17,364
for other things that they might want to generate in the game.

379
00:22:17,684 --> 00:22:20,147
So everything in this GIF is being generated by tracery.

380
00:22:20,187 --> 00:22:21,688
The descriptions of the people in the spaceship,

381
00:22:21,728 --> 00:22:23,470
the name of the spaceship, and the spaceship itself.

382
00:22:24,031 --> 00:22:25,132
Don't know what else it could be used for.

383
00:22:26,843 --> 00:22:29,305
I've also done some other weird things because anything you can

384
00:22:29,345 --> 00:22:34,149
represent as text, you can kind of do with this. And so SVG and

385
00:22:34,169 --> 00:22:37,372
web pages as we've seen. Music, there's something called ABC

386
00:22:37,412 --> 00:22:40,294
notation which is a text based music format. So I've done a

387
00:22:40,334 --> 00:22:43,157
little bit of music generation which is hampered by the fact

388
00:22:43,177 --> 00:22:46,099
that I'm dreadful at music. But perhaps someone else could try.

389
00:22:46,780 --> 00:22:49,502
Level layouts, turns out it can make code. Did you know that

390
00:22:49,542 --> 00:22:51,884
JavaScript programs can be represented as a text string and

391
00:22:51,904 --> 00:22:53,946
then you can put them through eval for risky, risky fun.

392
00:22:55,742 --> 00:22:57,903
It's a good idea. Have your users run that on your server.

393
00:23:00,065 --> 00:23:02,847
But now I have something that can generate programs and can

394
00:23:02,887 --> 00:23:05,268
like evolve them on the fly. That could be weird for

395
00:23:05,308 --> 00:23:08,410
something. I don't really know what this is for yet. But long

396
00:23:08,431 --> 00:23:11,493
story short, this has been yet another example of I'm not quite

397
00:23:11,553 --> 00:23:16,596
sure what this accidental little language can do. But I wouldn't

398
00:23:16,616 --> 00:23:19,158
have known what it could do without all the users who showed

399
00:23:19,178 --> 00:23:22,340
me what it could do. So here are some of just many, many users

400
00:23:22,400 --> 00:23:25,062
who have showed me new things that this thing could be.

401
00:23:25,745 --> 00:23:28,748
I just wanted to have a slide that thanks them.

402
00:23:29,408 --> 00:23:32,671
So finally I brought a stack of zines that will teach you how to use tracery.

403
00:23:33,291 --> 00:23:35,633
You can check out tracery.io where I have a whole bunch of links.

404
00:23:35,933 --> 00:23:36,834
It's free and open source.

405
00:23:36,854 --> 00:23:37,675
There's a GitHub link.

406
00:23:38,796 --> 00:23:39,676
Feel free to contact me.

407
00:23:40,037 --> 00:23:40,557
Any questions?

408
00:23:42,359 --> 00:23:44,921
I didn't have a timer so I have no idea how long it took.

409
00:23:45,922 --> 00:23:47,063
Oh, all right.

410
00:23:47,623 --> 00:23:48,924
In that case, cool.

411
00:23:49,064 --> 00:23:49,304
Thank you.

412
00:23:57,599 --> 00:24:04,586
Yes, happy accidents. Next up we have Alan Hazelden who made a game called A Good

413
00:24:04,626 --> 00:24:09,811
Snowman is Hard to Build. And he will talk about using puzzle script for level design for

414
00:24:09,831 --> 00:24:13,014
that game. Give it up for Alan.

415
00:24:19,294 --> 00:24:26,756
Hi there. So I'm Alan Hazelden. I made a game called Sokobond, a game called A Good Snare

416
00:24:26,776 --> 00:24:32,117
Man is Hard to Build. They're both thinky puzzle games that are really hard. If you've

417
00:24:32,298 --> 00:24:37,199
played them, maybe you think they're okay. I don't know. But I'm not going to be talking

418
00:24:37,419 --> 00:24:37,759
about

419
00:24:38,685 --> 00:24:42,749
like puzzle design, I'm going to be talking about the tools we made the levels with.

420
00:24:43,309 --> 00:24:46,933
So most games need a level editor, not just puzzle games.

421
00:24:47,513 --> 00:24:50,957
And generally there's two ways you can go. You can have an external editor,

422
00:24:52,358 --> 00:24:53,599
maybe there's a default one.

423
00:24:54,232 --> 00:24:59,077
and it's kind of generic for making 3D models or whatever.

424
00:24:59,498 --> 00:25:03,862
And you'll make a level and then you'll embed it into the game and you'll go,

425
00:25:03,962 --> 00:25:08,607
okay, well, run this. Oh, this doesn't quite work. So you go back to the level editor and you go,

426
00:25:08,647 --> 00:25:10,268
okay, maybe I'll switch these things around.

427
00:25:11,248 --> 00:25:15,949
and then you go, okay, well I need to re-import it into the game and back and forth and back and forth.

428
00:25:16,269 --> 00:25:18,029
And that can be a bit slow and tedious.

429
00:25:19,470 --> 00:25:22,310
So sometimes you might have a built-in level editor to the game.

430
00:25:22,370 --> 00:25:28,011
You go, okay, here's my level, just hit a key to go into edit mode, like what happens if I try that?

431
00:25:28,411 --> 00:25:30,352
Okay, hit a key, go into test mode.

432
00:25:30,812 --> 00:25:33,652
Oh no, that's not possible because I put this thing here.

433
00:25:34,053 --> 00:25:36,573
Oh, but I need this thing to be here because of this thing.

434
00:25:36,633 --> 00:25:38,113
And it's kind of like, oh.

435
00:25:38,674 --> 00:25:43,136
good to be able to rapidly test like edit, test, edit, test.

436
00:25:44,236 --> 00:25:45,937
But the downside with a built-in editor

437
00:25:46,177 --> 00:25:47,778
is you have to make it yourself.

438
00:25:48,378 --> 00:25:50,759
And that can mean it's not as high quality

439
00:25:51,179 --> 00:25:53,540
as a tool that somebody else has written.

440
00:25:53,560 --> 00:25:56,402
Or it can mean like you've got editor code.

441
00:25:57,229 --> 00:26:02,430
like seeping into your game logic and weird bugs come up where oh yeah this will work

442
00:26:02,510 --> 00:26:06,451
except when you actually make a normal build and oh it's assuming there's an editor attached.

443
00:26:07,712 --> 00:26:12,513
So those are kind of the two ways that people normally do things. What we did for a good

444
00:26:12,553 --> 00:26:18,514
snowman is hard to build is kind of flip this idea on its head and we embedded the game

445
00:26:18,754 --> 00:26:19,795
in the level editor.

446
00:26:20,952 --> 00:26:24,418
which is not really the way you normally do things.

447
00:26:25,700 --> 00:26:27,282
But it kind of works for us,

448
00:26:27,964 --> 00:26:29,306
and the reason it worked for us

449
00:26:29,546 --> 00:26:32,310
is because of a tool called PuzzleScript,

450
00:26:33,713 --> 00:26:36,016
which is a thing that was made by Stephen Lovell.

451
00:26:36,357 --> 00:26:42,659
who's the creator of English Country Tune, the upcoming Stephen's Sausage Roll, and literally

452
00:26:42,919 --> 00:26:49,301
hundreds and hundreds and hundreds of small games that he's been releasing for free over

453
00:26:49,361 --> 00:26:54,883
the last 10 years. He's ridiculously prolific. He makes amazing games. And in the middle

454
00:26:54,903 --> 00:26:59,425
of it, he just decided to make a tool so that other people could easily make tools. Just

455
00:26:59,825 --> 00:27:01,705
like, no biggie. He just does it.

456
00:27:03,226 --> 00:27:07,907
So it's a tool for making 2D tile-based puzzle games primarily.

457
00:27:07,967 --> 00:27:12,729
You can kind of push it around to do things it's not really designed to do, but that's

458
00:27:12,769 --> 00:27:15,329
like the core focus and it does that incredibly well.

459
00:27:15,869 --> 00:27:22,031
And then if you want to play around and break things, then yeah, see what can be stretched

460
00:27:22,051 --> 00:27:22,311
to do.

461
00:27:23,932 --> 00:27:24,832
It's a web-based tool.

462
00:27:26,085 --> 00:27:29,689
It doesn't require any programming history.

463
00:27:30,870 --> 00:27:34,913
So it's super accessible, super easy to get running.

464
00:27:37,015 --> 00:27:39,177
So, yeah.

465
00:27:39,277 --> 00:27:42,620
So, to talk about how we use PuzzleScript,

466
00:27:43,100 --> 00:27:46,644
first I'm going to show you the game that we used it with.

467
00:27:47,084 --> 00:27:50,447
So, this is a game called A Good Snowman is Hard to Build.

468
00:27:52,753 --> 00:27:56,034
It's a puzzle game about being a monster and making snowmen.

469
00:27:56,615 --> 00:27:58,415
So you can see you've got this monster here.

470
00:27:58,435 --> 00:28:00,976
He's just walking around the world.

471
00:28:01,837 --> 00:28:04,078
Obviously he can push snowballs around.

472
00:28:05,338 --> 00:28:09,900
And a snowman that you're trying to make is the canonical snowman,

473
00:28:10,180 --> 00:28:13,561
which is three balls, a large, a medium, and a small.

474
00:28:14,442 --> 00:28:16,262
No other snowballs are valid.

475
00:28:18,009 --> 00:28:21,552
You push them around, and obviously the large one has to be on the bottom,

476
00:28:21,892 --> 00:28:24,334
the medium one has to be in the middle, and the top one has to go top.

477
00:28:25,455 --> 00:28:26,936
And so we just made Lucy here.

478
00:28:27,877 --> 00:28:30,939
So there we go, that was a snowman that we just built.

479
00:28:31,039 --> 00:28:36,144
And obviously you can hug the snowman, because...

480
00:28:36,264 --> 00:28:38,986
what's even the point of making a snowman if you can't go on to hug it?

481
00:28:40,943 --> 00:28:45,745
And so the other thing you've got if you've got snow is you've got snow in the snowballs,

482
00:28:46,045 --> 00:28:50,306
you've also got snow on the ground, then if you push a snowball onto a patch of snow,

483
00:28:50,406 --> 00:28:57,589
then the snowball gets bigger. That's just basic logic. So here we can make a snowman out of,

484
00:28:57,709 --> 00:29:02,511
we started with three small snowballs and now we've got a large, a medium and a small,

485
00:29:03,351 --> 00:29:09,253
and we can build a snowman. And hey, this is Andy. Give him a little hug.

486
00:29:11,348 --> 00:29:15,173
So this is the game that we made.

487
00:29:16,936 --> 00:29:22,523
I made it with the help of Benjamin Davis, who did the amazing art and a lot of the programming.

488
00:29:23,124 --> 00:29:27,570
And Ryan Roth did the music, which you can kind of hear if I stop talking.

489
00:29:29,730 --> 00:29:31,130
So yeah, that's the game.

490
00:29:32,051 --> 00:29:35,632
The tool we used to make the levels was PuzzleScript.

491
00:29:36,452 --> 00:29:39,013
So this is a web-based tool, like I said.

492
00:29:40,053 --> 00:29:42,874
Every PuzzleScript game is a single text file.

493
00:29:43,094 --> 00:29:44,875
You can see it over here on the left.

494
00:29:45,875 --> 00:29:48,076
This is the entire source of the game.

495
00:29:48,456 --> 00:29:49,457
That's 270 lines, but like...

496
00:29:53,631 --> 00:29:54,712
Half of that is levels.

497
00:29:56,293 --> 00:30:01,497
So in fact, the code of the game itself fits into one screen.

498
00:30:01,957 --> 00:30:04,880
This is all the gameplay in the entire game right here.

499
00:30:06,118 --> 00:30:08,419
Because it's a rule-based thing.

500
00:30:09,659 --> 00:30:13,161
You're not like saying, if this case, then do this,

501
00:30:13,361 --> 00:30:15,002
and then else this, do this.

502
00:30:15,162 --> 00:30:18,304
It's just like, okay, find this pattern in the world.

503
00:30:18,684 --> 00:30:20,405
Is the player moving into a snowball?

504
00:30:20,705 --> 00:30:22,526
If so, maybe the snowball wants to move

505
00:30:22,546 --> 00:30:23,867
in that direction too, I don't know.

506
00:30:25,527 --> 00:30:27,468
So it's really easy to prototype,

507
00:30:27,769 --> 00:30:31,270
especially for 2D games that are tile-based.

508
00:30:31,511 --> 00:30:32,811
So here's the game.

509
00:30:33,071 --> 00:30:34,632
This is exactly the same game.

510
00:30:35,400 --> 00:30:36,821
It doesn't look as pretty.

511
00:30:38,161 --> 00:30:43,003
In fact, every image in PuzzleScript is a 5x5 pixel image.

512
00:30:43,043 --> 00:30:48,125
There's no way to make bigger graphics unless you want to do some Frankenstein object which

513
00:30:48,185 --> 00:30:51,326
is made up of multiple smaller objects and that gets a bit weird.

514
00:30:52,546 --> 00:30:56,947
Like I said, everything in the game is one text file including graphics.

515
00:30:57,528 --> 00:31:00,509
So right at the top of the file, here we can see the player.

516
00:31:02,249 --> 00:31:03,490
We've got the color of the player.

517
00:31:04,043 --> 00:31:08,984
and then a zero when it's black, a dot when it's transparent, and that's the graphics

518
00:31:09,044 --> 00:31:09,545
of the player.

519
00:31:10,785 --> 00:31:12,866
Small snowball, medium snowball, large snowball.

520
00:31:13,146 --> 00:31:13,826
It's pretty easy.

521
00:31:15,887 --> 00:31:21,469
And so that translates into a game where you can move around, you can push snowballs around,

522
00:31:22,709 --> 00:31:24,510
and you can make snowmen.

523
00:31:25,550 --> 00:31:31,472
Unfortunately you can't hug snowmen in this version, so it is kind of worthless.

524
00:31:33,968 --> 00:31:39,293
But that's okay because we fix that later in the actual nice looking version.

525
00:31:40,614 --> 00:31:45,778
So the other nice thing about PuzzleScript is that it has an embedded level editor.

526
00:31:46,358 --> 00:31:49,901
So if I press this button, we've got a level editor.

527
00:31:50,262 --> 00:31:53,865
These are all the objects I can put in the world.

528
00:31:54,825 --> 00:31:56,307
And here's the level.

529
00:31:56,467 --> 00:31:59,509
So I can quickly go, okay, well, here's this second level.

530
00:32:00,110 --> 00:32:02,171
A solution I did with this.

531
00:32:04,227 --> 00:32:06,187
But maybe I want a different level.

532
00:32:06,207 --> 00:32:14,190
Maybe I want a level where there's something stuck on this wall and something stuck on

533
00:32:14,270 --> 00:32:14,810
this wall.

534
00:32:16,790 --> 00:32:18,951
So now, is this possible?

535
00:32:19,011 --> 00:32:19,491
I don't know.

536
00:32:19,531 --> 00:32:27,233
So I can try and, OK, I need a larger there, and this is kind of awkward.

537
00:32:27,473 --> 00:32:30,794
So this might not even be possible.

538
00:32:33,000 --> 00:32:38,483
Maybe I'll add a patch of snow here and try that again.

539
00:32:39,284 --> 00:32:42,625
So let's go like that.

540
00:32:43,986 --> 00:32:46,767
And so this is the entire code of the game.

541
00:32:46,887 --> 00:32:49,269
I'm easily able to test things.

542
00:32:50,289 --> 00:32:52,590
And it's still impossible.

543
00:32:53,010 --> 00:32:57,993
So I'll move this guy up here.

544
00:32:58,013 --> 00:33:00,654
I'll put a patch of snow here.

545
00:33:01,495 --> 00:33:02,435
I'll add a thing.

546
00:33:03,022 --> 00:33:12,168
here and then I'll get rid of a thing here and that's the right number of snowballs and

547
00:33:16,871 --> 00:33:25,417
and yeah that's that's a pretty damn good level so what I can do

548
00:33:27,380 --> 00:33:33,222
is I can click this. This is now just some text for the string of the level. I can copy

549
00:33:33,262 --> 00:33:39,064
that and go, oh yeah, that's a good final level. That would be a really challenging

550
00:33:39,224 --> 00:33:46,386
one to end the game with. But for our purposes, what we can do is just paste it into this

551
00:33:46,466 --> 00:33:52,948
text file. We can close the game.

552
00:33:56,255 --> 00:33:58,777
Open up the game and now...

553
00:34:00,037 --> 00:34:02,298
Right, reset the level. Oh, we've got the level!

554
00:34:02,918 --> 00:34:07,761
And because it's just a text file, I can copy it out of PuzzleScript into the game.

555
00:34:08,421 --> 00:34:10,562
The game can just load text files super easily.

556
00:34:11,202 --> 00:34:14,724
And all the levels in the game were just made using that tool.

557
00:34:15,284 --> 00:34:19,206
Test it in PuzzleScript to make sure it's doable, and then import it into the game.

558
00:34:20,066 --> 00:34:21,187
And presto!

559
00:34:22,544 --> 00:34:26,066
So I'll just... Oh god. Actually I don't know what's going to happen because this level

560
00:34:26,086 --> 00:34:32,872
thinks it should only have one snowman. So this could like crash when I try and solve

561
00:34:32,972 --> 00:34:38,936
it. So let's see what happens. Crashing your game in a talk is the best idea.

562
00:34:42,099 --> 00:34:45,121
So that was Andy over there. Will there be two Andy's?

563
00:34:46,122 --> 00:34:50,966
It's just a generic name of someone. I'm sorry, I still love you.

564
00:34:52,647 --> 00:35:08,517
I'm crying.

565
00:35:08,577 --> 00:35:08,717
Um... ... ... ... ... ...

566
00:35:14,160 --> 00:35:18,563
... ... ... ... I can't overstate the importance of hugging your snowman.

567
00:35:26,133 --> 00:35:29,455
Okay, so yeah, so that was PuzzleScript.

568
00:35:29,776 --> 00:35:35,539
It is super easy to make the levels, it was super easy to test the mechanics of the game.

569
00:35:36,880 --> 00:35:42,643
We actually started making the game and on the first day of development, I had a working

570
00:35:42,663 --> 00:35:48,026
prototype with all of the mechanics of the game and like half the levels in the first

571
00:35:48,066 --> 00:35:48,266
day.

572
00:35:48,286 --> 00:35:51,288
And I don't know what the rest of the time took.

573
00:35:52,628 --> 00:35:58,170
Apparently the animator needed to like draw stuff like animate some some movement

574
00:35:58,250 --> 00:36:03,712
I don't know like seem like a big like the moment really really drew on like I don't know

575
00:36:05,612 --> 00:36:11,374
But it was great because public scripts already existed I didn't need to make anything I could just go up

576
00:36:11,434 --> 00:36:17,136
This is the thing this is perfect for the type of game. I want to make I'll prototype it and yeah, let's go

577
00:36:18,305 --> 00:36:20,986
So yeah, I really, really like PuzzleScript.

578
00:36:21,226 --> 00:36:28,329
It's super accessible, it's easy to make new games, so I used it to prototype A Good Snowman's

579
00:36:28,349 --> 00:36:34,872
Hard to Build, but I've also made like a dozen complete games that are self-contained, released

580
00:36:34,892 --> 00:36:35,813
for free on the internet.

581
00:36:36,933 --> 00:36:42,595
Each one took between a weekend and a month to make, and so there's things like You're

582
00:36:42,615 --> 00:36:45,016
Pulling Your Leg, You're Pulling My Leg.

583
00:36:45,497 --> 00:36:51,761
where you're using pulleys to put mirrors on things and raise them and lower them to redirect

584
00:36:51,781 --> 00:36:58,326
the path of light around a cave. Cyber lasso where you're using an electronic lasso that can

585
00:36:58,406 --> 00:37:05,270
grab crates and then move them around corners and try not to electrocute yourself. Train

586
00:37:05,311 --> 00:37:09,013
braining where you're planning out the route of a train so it can pick up everyone and put

587
00:37:09,053 --> 00:37:09,413
them down.

588
00:37:10,296 --> 00:37:15,200
And skipping stones to lonely homes where you're skipping some stones and the ripple

589
00:37:15,240 --> 00:37:22,286
from those stones push lily pads around the world and that's all obviously a safe way

590
00:37:22,306 --> 00:37:25,709
to transport yourself on jumping onto lily pads that are floating around.

591
00:37:26,629 --> 00:37:29,672
I recommend trying that at home if you have a pond nearby.

592
00:37:30,856 --> 00:37:35,879
So yeah, PuzzleScript is available for free on the internet. Try it out at PuzzleScript.net.

593
00:37:36,599 --> 00:37:40,421
I'm Alan Hazelden. I'm at Jack Nick. That's my website. Thank you.

594
00:37:50,779 --> 00:37:56,482
Thanks, Ellen. Last but not least, we have Omar, who is going to show us a tool that he

595
00:37:56,522 --> 00:38:02,305
made to make more tools. So let's hear it for Omar.

596
00:38:02,325 --> 00:38:15,511
So let's hear it for Omar. So let's hear it for Omar.

597
00:38:15,531 --> 00:38:18,793
So let's hear it for Omar. So let's hear it for Omar.

598
00:38:18,833 --> 00:38:20,073
So let's hear it for Omar.

599
00:38:22,038 --> 00:38:28,362
All right. Hello. So I'm Omar Kornu and today I would like to

600
00:38:28,402 --> 00:38:31,465
discuss and inspire you to make more of your own tools and

601
00:38:31,505 --> 00:38:35,848
discuss some of those hidden benefits. So here are some of

602
00:38:35,868 --> 00:38:38,710
the games I worked on. They were all organically designed and

603
00:38:38,730 --> 00:38:41,292
built from scratch which meant that we had to create custom

604
00:38:41,372 --> 00:38:44,374
tools on the go. I ended up being quite involved with making

605
00:38:44,394 --> 00:38:47,956
those tools and this experience led me to create a library that

606
00:38:48,196 --> 00:38:49,037
I would like to share today.

607
00:38:50,870 --> 00:38:55,533
So I'm making this free software library called DearIMGUI. It's a simple and portable

608
00:38:55,573 --> 00:39:01,817
library to make quick tools in C++. It works on computers, phones, consoles, anything. Now I

609
00:39:01,857 --> 00:39:06,561
realize there's probably like five people in the room still using C++. So I don't want to talk

610
00:39:06,581 --> 00:39:11,824
too much about the library, but I would like to discuss some of the ideas that might

611
00:39:11,844 --> 00:39:16,808
encourage you to make your own tools. So why do we even need to make our own tools?

612
00:39:18,575 --> 00:39:21,257
Games are interactive systems and yet many ready-made tools

613
00:39:21,337 --> 00:39:23,798
are focused on what I call altering startup condition.

614
00:39:24,418 --> 00:39:26,279
You typically add object and edit the properties

615
00:39:26,339 --> 00:39:27,219
and then you play your game.

616
00:39:28,080 --> 00:39:29,340
So I think those tools tend to make

617
00:39:29,380 --> 00:39:32,502
us focus on content creation and level design a little too much.

618
00:39:34,563 --> 00:39:37,064
So I think we need better tools for creating systems, game

619
00:39:37,084 --> 00:39:37,484
designs.

620
00:39:37,644 --> 00:39:40,045
And there aren't many tools that are focused on game design.

621
00:39:41,186 --> 00:39:42,967
PuzzleScript, actually, that Alan talked about

622
00:39:43,327 --> 00:39:44,347
is doing that beautifully.

623
00:39:44,387 --> 00:39:47,649
And you can actually create a game from scratch, not just

624
00:39:47,689 --> 00:39:47,969
levels.

625
00:39:49,262 --> 00:39:51,243
We also need better tools to understand what our games are

626
00:39:51,263 --> 00:39:54,405
doing and how they are behaving so we can understand them,

627
00:39:54,425 --> 00:39:55,786
debug them, and optimize them.

628
00:39:59,249 --> 00:40:00,310
Games are complex and messy.

629
00:40:00,330 --> 00:40:02,291
I like to think of them as an interactive haystack.

630
00:40:02,992 --> 00:40:04,873
There's like five million things happening inside.

631
00:40:04,933 --> 00:40:06,034
Nobody understands all of it.

632
00:40:06,274 --> 00:40:08,536
You've got thousands of objects, files, algorithm

633
00:40:09,036 --> 00:40:11,778
created by different people with different skills, expectation.

634
00:40:13,139 --> 00:40:14,560
So we want to make it easier for everyone

635
00:40:14,600 --> 00:40:15,701
to understand what's going on there.

636
00:40:16,351 --> 00:40:20,334
and creating interactive tools to visualize the game logic and game states is a way to share

637
00:40:20,354 --> 00:40:26,960
that knowledge. So back to the library the basic idea of DRMGUI is to turn UI and tool making

638
00:40:27,020 --> 00:40:31,463
to something trivial. We want to make it a habit to build tool naturally so it's designed to be

639
00:40:31,503 --> 00:40:35,967
easy to use. It's low friction. You can start typing code and create new tools immediately.

640
00:40:36,888 --> 00:40:39,190
And finally it's designed to create tools that are always available.

641
00:40:41,571 --> 00:40:47,535
by always available. That's a picture from the game brigador. Some of the tools have been

642
00:40:47,575 --> 00:40:51,618
shipped to users. You can press F1 mid game and edit the game properties while the game is

643
00:40:51,658 --> 00:40:57,442
running. So the idea is always available is that you have tools that are created directly

644
00:40:57,462 --> 00:41:01,364
inside your game. They don't get out of reach when you start working on your console or tablet

645
00:41:01,404 --> 00:41:04,306
version or when you play testing the game outside.

646
00:41:05,873 --> 00:41:09,376
all have access to all your game running states. So no run time

647
00:41:09,396 --> 00:41:14,461
data is off limit to the tools. You can understand problems as

648
00:41:14,541 --> 00:41:17,423
it happens. You can fire the tools and inspect immediately

649
00:41:17,463 --> 00:41:20,626
when someone is playing. No need to load another build or editor.

650
00:41:21,247 --> 00:41:23,589
And you can ship those tools to everyone. You can ship them to

651
00:41:23,629 --> 00:41:26,832
designers, artists and QA and you can ship them to player if

652
00:41:26,852 --> 00:41:31,336
you feel it makes sense there. So how does it work?

653
00:41:32,756 --> 00:41:36,197
is card driven. You write simple code that generates the UI every

654
00:41:36,237 --> 00:41:39,039
frame. You can work directly with the data used by your

655
00:41:39,099 --> 00:41:42,661
engine in a running game. It's tightly connected there. And

656
00:41:42,901 --> 00:41:45,642
it's perfect for creating real time interactive tools. You can

657
00:41:45,722 --> 00:41:48,284
use it to tweak parameters, visualize game data, plot stats

658
00:41:48,564 --> 00:41:53,587
or create a custom editor. That's a very simple one line

659
00:41:53,687 --> 00:41:55,908
use case. You can call one function to edit one of your

660
00:41:55,928 --> 00:41:57,829
variable. A simple widget appears.

661
00:41:58,736 --> 00:42:00,298
If you stop calling it, the widget won't appear.

662
00:42:00,478 --> 00:42:02,460
So you don't need to set everything in advance.

663
00:42:02,580 --> 00:42:06,143
Your code flow always dictates how the UI will look.

664
00:42:06,344 --> 00:42:08,506
That comes with a few important and useful properties.

665
00:42:09,987 --> 00:42:11,409
All interactions are processed immediately,

666
00:42:11,449 --> 00:42:12,250
as you call the function.

667
00:42:12,330 --> 00:42:14,692
There's no later, no callbacks, or persistent requirement.

668
00:42:15,373 --> 00:42:17,295
So your code can stay compact in only one place.

669
00:42:18,842 --> 00:42:21,643
You can call this from anywhere in your code. It doesn't have to be in a specific spot like an

670
00:42:21,783 --> 00:42:25,765
update or draw function. Meaning that you don't have to refactor your code in a particular way.

671
00:42:26,445 --> 00:42:32,228
You can literally start creating tools in the middle of a function. The library comes with a

672
00:42:32,248 --> 00:42:37,970
bunch of widgets and functionality to get going very easily. So I won't get into details how to

673
00:42:38,010 --> 00:42:42,512
program with it. You can check the code and example on the website. The base idea is that you

674
00:42:42,532 --> 00:42:44,933
have that bit of support code that encourages you to create tools.

675
00:42:45,848 --> 00:42:48,009
If you don't use this library you can probably use another or

676
00:42:48,029 --> 00:42:50,070
maybe the source code for it can inspire you to create your own

677
00:42:50,090 --> 00:42:55,173
tool kit. Whatever makes your life easier. Some of the hidden

678
00:42:55,193 --> 00:42:58,115
benefits I think tools are communication and that's

679
00:42:59,836 --> 00:43:02,418
exposing live data to your team is a strong form of communication.

680
00:43:02,658 --> 00:43:04,759
You want to avoid a situation where the designer or the

681
00:43:04,819 --> 00:43:06,920
artist don't have a clue what's behind the black box of the

682
00:43:06,960 --> 00:43:09,922
game. Having to ask programmer to unblock them. This is

683
00:43:09,962 --> 00:43:11,083
wasting everyone's time.

684
00:43:12,132 --> 00:43:13,933
So if you give people the ability to look inside

685
00:43:13,953 --> 00:43:15,433
the black box and understanding themselves,

686
00:43:15,514 --> 00:43:17,234
they will be more productive and independent.

687
00:43:18,255 --> 00:43:19,776
And the more you visualize, the easier it is

688
00:43:19,816 --> 00:43:22,037
to tame the complexity of game development.

689
00:43:24,198 --> 00:43:26,079
That's an example of visual and spatial data.

690
00:43:26,420 --> 00:43:28,501
We're just plotting the position of object in a map

691
00:43:29,181 --> 00:43:31,202
along with some LOD information,

692
00:43:31,803 --> 00:43:33,404
and then suddenly you can see patterns emerging

693
00:43:33,424 --> 00:43:34,884
and you can understand things very easily

694
00:43:34,924 --> 00:43:36,325
that you wouldn't be able to understand

695
00:43:36,705 --> 00:43:38,246
from just looking at the code

696
00:43:38,286 --> 00:43:39,927
or looking at the game from the player point of view.

697
00:43:41,009 --> 00:43:42,610
So it gives you a good grasp of what's going on with the

698
00:43:42,670 --> 00:43:45,152
engine. And then you can expand that and add the option you

699
00:43:45,192 --> 00:43:47,314
want if you want to display a bounding box or any other

700
00:43:47,434 --> 00:43:51,697
useful data that you see fit. You may want to create all sorts

701
00:43:51,737 --> 00:43:53,959
of gauge or monitoring tools to communicate budgets and

702
00:43:53,979 --> 00:43:56,821
limitation. Again, it's very simple code. Usually there's

703
00:43:56,841 --> 00:43:59,463
like one line per stuff. You can graph things. It's very

704
00:43:59,503 --> 00:44:03,926
simple. Another of the hidden benefits is that I think tools

705
00:44:03,986 --> 00:44:04,626
are documentation.

706
00:44:05,541 --> 00:44:10,184
like instead of writing documentation that always out of date and that people can never find,

707
00:44:10,924 --> 00:44:15,027
if you write a tool, then it's likely to be up to date and people can play with it and

708
00:44:15,067 --> 00:44:18,989
interact with it and therefore understand what's happening. So if you're going to create

709
00:44:19,029 --> 00:44:23,372
some new fancy algorithm for like pass finding of physics, writing the tools along with the

710
00:44:23,412 --> 00:44:28,195
new code is the best way to debug your code and to document it. Create a tool to interact

711
00:44:28,215 --> 00:44:31,156
with the new code and you've got the documentation done here. It's useful for the

712
00:44:31,196 --> 00:44:33,338
current you, for the future you and for other team members.

713
00:44:35,400 --> 00:44:39,524
Finally I think exposing that stuff helps team members share a common vocabulary. Like

714
00:44:39,904 --> 00:44:42,606
don't you hate it when everyone in the team is using a different word to refer to the

715
00:44:42,626 --> 00:44:47,570
same thing and nobody understands what is doing what precisely. If everyone is looking

716
00:44:47,590 --> 00:44:51,093
at the guts of your game they will have a better understanding of what is doing what.

717
00:44:54,527 --> 00:44:57,608
advice, just keep it simple. It doesn't have to be amazing. It

718
00:44:57,648 --> 00:45:01,169
just needs to serve a purpose. It's kind of like, I encourage

719
00:45:01,189 --> 00:45:03,910
you to make the poor man tool basically. They don't have to be

720
00:45:03,950 --> 00:45:06,231
pretty. They just need to make your life better, happier and

721
00:45:06,551 --> 00:45:09,493
in turn make the game better. They don't have to life a

722
00:45:09,533 --> 00:45:12,134
lifetime. It's perfectly fine to make a tool that you throw the

723
00:45:12,174 --> 00:45:15,435
next day. If the tool is really easy to make, then you will feel

724
00:45:15,455 --> 00:45:18,736
inclined to write more throw away tools and things that fits

725
00:45:18,876 --> 00:45:20,977
what you need to do today or this week or this month.

726
00:45:24,614 --> 00:45:28,616
I often have common excuse against tool making. People say we don't have time to make tools.

727
00:45:29,796 --> 00:45:35,199
That weirdly implies that tools are luxury or lost. And I hope I have conveyed that to a few

728
00:45:35,219 --> 00:45:40,561
ideas about why they aren't. Some people say I'm terrible at it. I hate making UI, I hate

729
00:45:40,581 --> 00:45:46,664
making tools. I say you can try a different way of doing it. Maybe ask your other developers

730
00:45:46,784 --> 00:45:48,565
and learn tricks, find a better solution.

731
00:45:49,687 --> 00:45:53,028
My library is one possible solution but there is probably

732
00:45:53,048 --> 00:45:56,130
like a million others. Tool making is a muscle you can flex.

733
00:45:56,490 --> 00:45:59,271
The more you do it the better you get. So you really have no

734
00:45:59,291 --> 00:46:04,593
excuse. We are almost done. I have 20 few examples of custom

735
00:46:04,613 --> 00:46:06,113
tools created using the library.

736
00:46:08,038 --> 00:46:11,540
This is a mini searching tool. You can use it to enter key words or find objects in your scene.

737
00:46:11,840 --> 00:46:16,343
It's fairly simple, fairly trivial, but it's like 20 line of code. So if you need to search for

738
00:46:16,403 --> 00:46:21,566
something, it's probably faster to write the code once than to just look in your enormous scene

739
00:46:21,586 --> 00:46:26,650
all the time. That's an in game tool to browse texture and run the buffers. So you can look at

740
00:46:26,670 --> 00:46:31,993
the footprint of loaded texture. And I mean you can easily catch it when an artist created a

741
00:46:32,053 --> 00:46:33,474
giant eyeball texture or something.

742
00:46:35,297 --> 00:46:37,819
is a basic profiler. If you build that kind of thing to be

743
00:46:37,859 --> 00:46:40,221
always available then any time someone has a performance issue

744
00:46:40,261 --> 00:46:44,945
you can come and have a look at what may be causing it. These

745
00:46:45,005 --> 00:46:47,167
are some of the tools created for tear away. They were mostly

746
00:46:47,187 --> 00:46:50,570
debugging tools. You can click any object and inspect the

747
00:46:50,590 --> 00:46:53,212
state. You can trigger break points to debug the code of

748
00:46:53,232 --> 00:46:54,593
certain instances. That sort of things.

749
00:46:56,535 --> 00:46:58,777
It's things that I think are probably given when you use

750
00:46:58,837 --> 00:47:01,979
unity but then when you do it in themself you can specialize and

751
00:47:02,039 --> 00:47:05,402
add actually exactly the feature you want and present information

752
00:47:05,442 --> 00:47:08,484
the way you want. It's really handy when you have to debug

753
00:47:08,504 --> 00:47:14,108
situation with kind of thousands of active objects. That's a free

754
00:47:14,128 --> 00:47:17,470
game engine called Linux engine which is also using this

755
00:47:17,510 --> 00:47:20,212
library. I just want to say don't shy away from making your

756
00:47:20,272 --> 00:47:23,334
own engine sometimes. You will most likely fail but you will

757
00:47:23,354 --> 00:47:24,855
learn a lot and learning is winning.

758
00:47:27,410 --> 00:47:29,351
game innovation needs people straying away from the main

759
00:47:29,391 --> 00:47:32,113
path and creating their own tools. It's foolish but it's

760
00:47:32,213 --> 00:47:35,614
also very good that some people do it. Please do it sometimes.

761
00:47:37,715 --> 00:47:39,536
That's the end of this mini-talk. I hope it inspired

762
00:47:39,576 --> 00:47:43,118
you to consider making more of your own tools. They can be

763
00:47:43,138 --> 00:47:46,600
stored on in-game tools. If you use Unity, maybe look into

764
00:47:46,640 --> 00:47:49,381
extending the editor a little more. You need to flex that

765
00:47:49,441 --> 00:47:52,343
muscle. Your game design is king and you shouldn't be enslaved

766
00:47:52,383 --> 00:47:54,124
by whatever tools are readily available to you.

767
00:47:55,123 --> 00:47:56,085
help you innovate. Thank you.

