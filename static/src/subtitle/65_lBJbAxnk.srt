1
00:00:05,789 --> 00:00:07,870
Hi, it's great to be here.

2
00:00:07,910 --> 00:00:08,371
Good morning.

3
00:00:08,871 --> 00:00:10,192
I appreciate everybody coming in here.

4
00:00:10,312 --> 00:00:12,053
I know you have a lot of options here at GDC

5
00:00:12,373 --> 00:00:15,695
and we really appreciate you coming here for the bootcamp.

6
00:00:15,895 --> 00:00:16,635
So I'm Brian Moss.

7
00:00:16,895 --> 00:00:18,516
I'm the lead technical artist at Zern Affinity.

8
00:00:19,417 --> 00:00:20,918
Today I'm gonna be talking about running

9
00:00:20,958 --> 00:00:24,020
the Halo multiplayer experience at 60 frames a second,

10
00:00:24,680 --> 00:00:26,221
a technical art perspective.

11
00:00:27,061 --> 00:00:28,382
I'm gonna give a brief overview

12
00:00:28,402 --> 00:00:30,783
of how we kind of run performance at our studio

13
00:00:31,044 --> 00:00:33,525
and a couple of the tips and tricks we use to hit 60.

14
00:00:35,262 --> 00:00:37,704
Okay, so who we are.

15
00:00:39,185 --> 00:00:44,608
Certain Affinity was created in 2006 with the goal of creating innovative, top-quality action games.

16
00:00:45,749 --> 00:00:49,011
We were founded by Max Holbermann, who was the lead multiplayer designer of Halo 2.

17
00:00:50,772 --> 00:00:53,554
Once he finished his work on Halo 2, he decided he wanted his own studio.

18
00:00:54,235 --> 00:00:57,377
So he traveled on down to Austin and started out with four guys.

19
00:00:58,057 --> 00:01:00,199
Now we're up to 100-plus employees.

20
00:01:03,852 --> 00:01:09,494
Since 2006, we've actually had the opportunity to work on quite a few games.

21
00:01:09,694 --> 00:01:16,036
Everything from Left 4 Dead, multiple versions of Call of Duty, multiple versions of Halo.

22
00:01:16,556 --> 00:01:20,597
We've done a few IPs, Age of Booty series, Crimson Alliance.

23
00:01:21,418 --> 00:01:25,099
Now, we are primarily a focused multiplayer studio.

24
00:01:27,758 --> 00:01:30,581
What that means is we actually primarily do the multiplayer.

25
00:01:31,082 --> 00:01:34,646
We get contracted out by lots of studios to actually work on multiplayer.

26
00:01:35,607 --> 00:01:36,748
We're a co-development studio.

27
00:01:37,368 --> 00:01:39,671
And that means we're not an outsourcer.

28
00:01:40,091 --> 00:01:44,436
So we don't get contracted to, let's say, create a thousand widgets

29
00:01:44,476 --> 00:01:46,458
and then hand them off and somebody implements them.

30
00:01:47,058 --> 00:01:49,321
We actually work inside our partners' tool sets.

31
00:01:52,142 --> 00:01:54,643
excuse me, work inside our partner's tool sets.

32
00:01:55,664 --> 00:01:56,985
We actually work inside their servers.

33
00:01:57,205 --> 00:01:58,766
If their artists use Maya, we use Maya.

34
00:01:59,266 --> 00:02:00,727
If their artists use Max, we actually switch

35
00:02:00,767 --> 00:02:01,988
all our artists back over to Max.

36
00:02:02,528 --> 00:02:03,969
It's a very fun experience.

37
00:02:04,889 --> 00:02:07,811
The responsibilities of what we do depend on our engagement.

38
00:02:07,891 --> 00:02:10,213
Sometimes we'll actually have a project

39
00:02:10,233 --> 00:02:10,993
that's only a couple months,

40
00:02:11,013 --> 00:02:13,055
and we'll work on some multiplayer design.

41
00:02:13,815 --> 00:02:16,698
All the way up to working several years on an entire multiplayer engagement

42
00:02:17,379 --> 00:02:21,644
Everything from level design technical art shaders tools

43
00:02:22,265 --> 00:02:24,647
You name it will do it all it depends on what our partners really need

44
00:02:28,810 --> 00:02:32,132
We like I said we embed ourselves and into their tool chain pipeline.

45
00:02:33,133 --> 00:02:35,414
Their process is really kind of a foundation of what we do.

46
00:02:36,255 --> 00:02:39,717
Sometimes we're actually able to add our own layer of tool sets on top of it.

47
00:02:40,538 --> 00:02:45,321
Sometimes we can't. Sometimes we'll actually be able to rewrite all the shaders in the multiplayer.

48
00:02:46,041 --> 00:02:48,002
Sometimes we can add new exporters for Maya.

49
00:02:48,783 --> 00:02:49,423
Sometimes we can't.

50
00:02:49,944 --> 00:02:53,386
There are projects where we literally are stuck into exactly how they like to work.

51
00:02:54,367 --> 00:02:57,869
And that's just kind of one of the strengths of Certain Infinity, one of the things we do.

52
00:02:59,964 --> 00:03:04,629
A little bit about our staffing. We're really art focused. We've got 56 artists on staff.

53
00:03:05,570 --> 00:03:08,973
Past that goes from design, engineering.

54
00:03:10,094 --> 00:03:12,557
We're mostly senior artists. We have a lot of senior talent.

55
00:03:13,017 --> 00:03:16,020
I think our average time in the industry for artists is eight plus years.

56
00:03:17,081 --> 00:03:21,045
Some of what we consider our junior artists are actually like three to four years in the industry.

57
00:03:22,507 --> 00:03:22,647
So...

58
00:03:23,366 --> 00:03:24,887
wow, that's a lot of fun, most of the times,

59
00:03:24,907 --> 00:03:26,228
you don't actually have to teach artists,

60
00:03:26,248 --> 00:03:27,729
like, hey, this is what a texture map is.

61
00:03:27,749 --> 00:03:30,391
You know, this is how you normal map something.

62
00:03:31,171 --> 00:03:32,532
They're very talented people,

63
00:03:32,733 --> 00:03:34,174
but they like to have their pipelines set up

64
00:03:34,214 --> 00:03:36,295
in a very specific way, so supporting them

65
00:03:36,515 --> 00:03:37,796
actually takes a little bit more effort.

66
00:03:40,702 --> 00:03:43,163
Okay, so TechArt Responsibility is the CA.

67
00:03:43,543 --> 00:03:45,004
We have five full-time technical artists.

68
00:03:45,564 --> 00:03:46,685
We each have our own specialties.

69
00:03:46,765 --> 00:03:48,326
We have some guys that like to write shaders.

70
00:03:48,366 --> 00:03:50,627
We have some guys that just love to write tools.

71
00:03:50,728 --> 00:03:51,708
Some guys are performance.

72
00:03:52,809 --> 00:03:54,990
We'll do a lot of general tool creation scripting,

73
00:03:55,130 --> 00:03:55,991
depending on the project.

74
00:03:56,791 --> 00:03:58,772
A lot of what we do is actually tip of the spear work.

75
00:03:59,533 --> 00:04:01,094
So when we get a new project,

76
00:04:01,114 --> 00:04:02,815
we'll actually try to fly out the technical artists.

77
00:04:03,275 --> 00:04:06,195
and embed with our partners anywhere from a day, two days,

78
00:04:06,875 --> 00:04:08,996
really until they actually kick us out and make us leave

79
00:04:09,016 --> 00:04:12,396
because we're eating all their donuts and coffee all the time.

80
00:04:12,797 --> 00:04:15,137
So we need to get as much information as we can

81
00:04:15,157 --> 00:04:16,577
of how they like to run their pipelines,

82
00:04:17,157 --> 00:04:18,978
all the way to what is broken in their pipelines.

83
00:04:19,518 --> 00:04:21,078
We'll actually spend a lot of time on something

84
00:04:21,118 --> 00:04:23,118
just to realize, oh, wait a minute, that doesn't work.

85
00:04:23,779 --> 00:04:25,219
That UI didn't get updated.

86
00:04:25,499 --> 00:04:27,279
That feature was deprecated three versions ago.

87
00:04:27,939 --> 00:04:29,900
So talking with our artists and producers

88
00:04:29,920 --> 00:04:32,500
will actually help us save the time of finding those mistakes.

89
00:04:33,942 --> 00:04:35,103
We also do a lot of graphics work.

90
00:04:35,784 --> 00:04:38,927
We do a lot of visual development for our art directors and our artists.

91
00:04:39,007 --> 00:04:40,128
We do a lot of shader writing.

92
00:04:40,889 --> 00:04:43,152
Of course, performance news is not what we're here to talk about today.

93
00:04:43,172 --> 00:04:45,674
Okay. Halo.

94
00:04:45,694 --> 00:04:48,517
Back in 2013, we got the call and said,

95
00:04:51,307 --> 00:04:52,587
we want you guys to do more Halo work.

96
00:04:52,807 --> 00:04:54,528
And we love Halo down at Certain Infinity.

97
00:04:54,828 --> 00:04:57,550
So this Halo project was actually

98
00:04:57,570 --> 00:04:58,530
going to be pretty exciting, because we

99
00:04:58,550 --> 00:04:59,951
knew this was going to be for the Xbox One.

100
00:05:00,731 --> 00:05:04,093
After spending so many years on the 360 and the PS3,

101
00:05:04,813 --> 00:05:07,234
the thought of moving to next gen was really exciting

102
00:05:07,275 --> 00:05:10,776
for artists and people, really jazzed to work on this project.

103
00:05:11,797 --> 00:05:16,758
So, we found out that we were going to be doing a sort of Halo 2 anniversary for these

104
00:05:16,778 --> 00:05:16,998
levels.

105
00:05:17,018 --> 00:05:18,418
We're going to be doing six level remakes.

106
00:05:19,619 --> 00:05:22,420
Also for the first time we're actually going to be taking over a lot of the sandbox work.

107
00:05:23,280 --> 00:05:29,562
Now sandbox, that's what we do, anything that has to do with the characters, weapons, vehicles,

108
00:05:29,782 --> 00:05:34,203
modes, we got to create a few new modes, really kind of sink our teeth into it for the first

109
00:05:34,243 --> 00:05:34,483
time.

110
00:05:35,203 --> 00:05:38,244
We got to help getting dual wielding working for our part of the game.

111
00:05:39,745 --> 00:05:44,449
Now, as this project kind of snowballed into something bigger, into the Master Chief collection,

112
00:05:45,950 --> 00:05:48,332
lots of studios around the world actually ended up working on this.

113
00:05:48,552 --> 00:05:54,236
So I'm really going to kind of concentrate on what Starter Affinity developed and put

114
00:05:54,256 --> 00:05:54,817
out for this game.

115
00:05:55,838 --> 00:05:58,520
And of course, it's for Xbox One, and who doesn't want to work on that?

116
00:06:00,421 --> 00:06:05,605
As with any project, you actually are going to have a few surprises in the beginning.

117
00:06:07,066 --> 00:06:09,769
Well, the first one we were hit with was, you know, we were going to have to run at

118
00:06:10,089 --> 00:06:10,650
60 frames a second.

119
00:06:11,170 --> 00:06:12,131
That was non-negotiable.

120
00:06:12,771 --> 00:06:14,813
Now, me, I'm a performance guy, I love 60 frames a second.

121
00:06:15,334 --> 00:06:16,935
I think it just feels better.

122
00:06:17,015 --> 00:06:18,536
I mean, as a shooter, of course, you run it at 60.

123
00:06:18,677 --> 00:06:20,238
It's just such a smooth experience.

124
00:06:20,938 --> 00:06:22,340
And Halo's never run at 60 before.

125
00:06:22,360 --> 00:06:24,682
It's traditionally a 30 frames a second game.

126
00:06:25,242 --> 00:06:28,205
And I've always wanted to run it at 60, and I was really excited about it.

127
00:06:29,337 --> 00:06:30,498
Most of the artists were terrified

128
00:06:33,661 --> 00:06:36,844
We also found out that the next-gen engine and toolset was going to be developed off-site

129
00:06:39,296 --> 00:06:43,219
We were half excited and half kind of dismayed when we found this out.

130
00:06:44,239 --> 00:06:48,883
Some of us really kind of wanted to upgrade the engine and really be able to add our own spin to

131
00:06:48,943 --> 00:06:55,147
it. Other people were kind of ready to kind of let it go. We wanted to focus on the work that

132
00:06:55,167 --> 00:06:58,629
we had to do because we had a lot of work to do and we only had about seven to eight months to

133
00:06:58,669 --> 00:07:04,193
do the project. The engine was actually developed by Ruffian Games. They were just amazing guys. I

134
00:07:04,413 --> 00:07:08,256
just love working with them. They're really, really great.

135
00:07:09,556 --> 00:07:11,257
So what do we do now knowing these two things?

136
00:07:12,577 --> 00:07:14,678
So we started doing our initial planning for this part of the project.

137
00:07:15,298 --> 00:07:17,319
So we knew, okay, we need to hit 60 frames a second.

138
00:07:18,239 --> 00:07:19,940
It's got to hit, it's got to ship on Xbox One.

139
00:07:20,640 --> 00:07:22,820
And it's next-gen Halo, I mean, it's got to look fantastic.

140
00:07:22,860 --> 00:07:25,601
If it doesn't look fantastic, I mean, we don't want to let you guys down.

141
00:07:26,502 --> 00:07:28,783
So, shipping on the Xbox One.

142
00:07:29,544 --> 00:07:31,325
So, with the engine being developed off-site,

143
00:07:32,045 --> 00:07:33,807
and we didn't have any Xbox Ones yet,

144
00:07:34,527 --> 00:07:35,227
like, what do we do?

145
00:07:35,768 --> 00:07:37,749
Well, we had to start working on the Xbox 360.

146
00:07:39,530 --> 00:07:41,351
We developed a plan of how and when

147
00:07:41,372 --> 00:07:42,432
we were going to get the transition.

148
00:07:42,652 --> 00:07:43,453
According to our partners,

149
00:07:43,953 --> 00:07:45,274
we were going to get the engine

150
00:07:45,374 --> 00:07:46,895
somewhere halfway through development,

151
00:07:46,935 --> 00:07:48,616
so we were going to have to start developing on the 360,

152
00:07:49,477 --> 00:07:50,758
transition to the Xbox One,

153
00:07:51,018 --> 00:07:52,039
ship it on the Xbox One,

154
00:07:52,819 --> 00:07:55,341
and hopefully run at 60 at the end.

155
00:07:57,362 --> 00:07:59,722
Constant communication with the engine team, that was really pretty crucial.

156
00:08:00,243 --> 00:08:01,823
We had weekly phone calls with them.

157
00:08:02,083 --> 00:08:03,624
We were in communication by email.

158
00:08:04,184 --> 00:08:07,485
Anything that they needed or we needed, we were right on the phone, right on top of it.

159
00:08:07,525 --> 00:08:08,946
It was really pretty great.

160
00:08:09,986 --> 00:08:13,948
They helped us out knowing exactly what was working and when it was going to be working.

161
00:08:14,488 --> 00:08:15,368
And also what was broken.

162
00:08:15,789 --> 00:08:18,330
Some things they didn't think they were going to be able to fit in the timeline.

163
00:08:19,210 --> 00:08:23,754
that was really pretty crucial because if we were depending on a certain kind of process to actually get these levels

164
00:08:24,494 --> 00:08:28,697
working and looking as good as they did and it just wasn't going to ship that would have been disastrous.

165
00:08:28,797 --> 00:08:30,699
We would have been really struggling at the end.

166
00:08:33,060 --> 00:08:37,524
These look amazing. So we didn't have a lot of control over the base engine. It was developed off-site.

167
00:08:38,845 --> 00:08:41,166
What we did have control over, we actually,

168
00:08:42,127 --> 00:08:42,888
this was the shaders.

169
00:08:44,309 --> 00:08:46,210
So we decided to go to a full PBR system.

170
00:08:46,991 --> 00:08:52,495
And Luis Gruel is actually speaking right after this, and he actually rewrote all of the shaders to use the PBR system.

171
00:08:52,975 --> 00:08:54,256
So please stick around, check it out.

172
00:08:54,876 --> 00:08:59,920
I didn't want to put any screenshots in here, I didn't want to steal any of the thunder, but he did some really pretty amazing things.

173
00:09:00,040 --> 00:09:01,561
So, check it out.

174
00:09:02,162 --> 00:09:03,703
Okay, so we need to hit 60 frames per second.

175
00:09:04,564 --> 00:09:06,085
We immediately started development on the Xbox 360.

176
00:09:08,448 --> 00:09:10,490
The upside to that, it was a known pipeline.

177
00:09:10,530 --> 00:09:12,030
We've been done a lot of work on the Xbox.

178
00:09:12,531 --> 00:09:14,072
Our team was very familiar with the tools,

179
00:09:14,132 --> 00:09:15,392
very familiar with the processes.

180
00:09:16,233 --> 00:09:18,514
We had the levels up and running within a week, I think,

181
00:09:19,294 --> 00:09:21,996
and just really started putting a lot of the content

182
00:09:22,016 --> 00:09:22,776
in the game immediately.

183
00:09:23,877 --> 00:09:25,978
We started also planning to see what our 60 frames

184
00:09:25,998 --> 00:09:27,459
a second budgets would actually look like.

185
00:09:30,201 --> 00:09:34,928
So, I had a couple slides in here talking about milliseconds and I kind of ripped them all out.

186
00:09:35,608 --> 00:09:38,312
Basically, a millisecond is a thousandth of a second.

187
00:09:39,974 --> 00:09:44,881
And when you're talking about 60 frames a second, you have 16.6 milliseconds per frame to work with.

188
00:09:45,121 --> 00:09:45,442
And that's it.

189
00:09:46,322 --> 00:09:47,403
That is not a lot of time.

190
00:09:47,983 --> 00:09:49,463
Although when you start working with performance,

191
00:09:49,503 --> 00:09:51,164
a couple of milliseconds will actually start

192
00:09:51,184 --> 00:09:52,164
seeming like an eternity.

193
00:09:52,664 --> 00:09:53,884
An artist will check in an object,

194
00:09:53,944 --> 00:09:56,005
and in a way, that object takes three milliseconds to render.

195
00:09:56,085 --> 00:09:57,345
Are you crazy? That's forever.

196
00:09:58,666 --> 00:10:00,786
So when you have 60 frames,

197
00:10:00,826 --> 00:10:02,047
16.6 milliseconds per frame.

198
00:10:03,907 --> 00:10:05,127
It is important to note, really,

199
00:10:05,167 --> 00:10:06,648
that for the remainder of this talk,

200
00:10:07,468 --> 00:10:09,069
I'm gonna be talking about work on the GPU.

201
00:10:09,109 --> 00:10:10,829
So if I'm saying 16 milliseconds,

202
00:10:10,869 --> 00:10:12,449
this can be on actually on the GPU.

203
00:10:14,070 --> 00:10:15,310
So how does TechGuard help with all this?

204
00:10:17,119 --> 00:10:19,560
Well, we worked with design in the very beginning.

205
00:10:20,521 --> 00:10:24,183
Now these levels were all remake levels, so if there was a rock with a canyon in front of it

206
00:10:24,564 --> 00:10:27,826
with a turret on the left, that was what was going to be on these levels.

207
00:10:28,526 --> 00:10:32,209
The fans were very, very particular to make sure that we made these levels exactly how they

208
00:10:32,249 --> 00:10:37,913
remembered them. But a lot of the times we'll work with design to actually make sure that they

209
00:10:38,373 --> 00:10:40,835
don't go over the budgets or, hey, if they want to have an underwater city...

210
00:10:41,464 --> 00:10:43,246
They're like, okay, great, you can have an underwater city,

211
00:10:43,266 --> 00:10:44,687
but that's going to be 12 milliseconds.

212
00:10:44,807 --> 00:10:46,428
That means you get one millisecond

213
00:10:46,569 --> 00:10:47,990
to put everything else in the game.

214
00:10:49,291 --> 00:10:50,832
We work with art for look development and shaders.

215
00:10:51,353 --> 00:10:54,235
If the art director wants to have a certain type of lava

216
00:10:54,255 --> 00:10:55,296
or a certain type of ice,

217
00:10:55,957 --> 00:10:58,359
the technical artist will actually help develop that

218
00:10:58,999 --> 00:11:00,280
and actually optimize those shaders

219
00:11:00,300 --> 00:11:01,702
to make sure that they're gonna run at frame rate.

220
00:11:03,363 --> 00:11:04,644
Daily communication with map leads

221
00:11:04,684 --> 00:11:05,605
for anything that they need.

222
00:11:06,577 --> 00:11:10,058
When we're doing our multiplayer levels, we have the concept of a map lead.

223
00:11:10,118 --> 00:11:14,459
For every map that we do, there's an environment artist that is the key point person for that.

224
00:11:14,619 --> 00:11:15,479
We call them a map lead.

225
00:11:16,759 --> 00:11:21,000
They're the guys that we go to with any kind of communication that we need for their team,

226
00:11:21,680 --> 00:11:22,561
best practices.

227
00:11:22,581 --> 00:11:27,562
It really helps us having a point person for every single map.

228
00:11:30,303 --> 00:11:31,383
TechArt managing the frame rate.

229
00:11:31,843 --> 00:11:33,864
So we work with QA to find the problem areas.

230
00:11:34,944 --> 00:11:38,266
Our QA guys at Certain Affinity are just fantastic.

231
00:11:38,386 --> 00:11:41,007
I've never worked anywhere where our QA guys work so hard.

232
00:11:42,148 --> 00:11:43,248
They'll run through all the maps,

233
00:11:43,328 --> 00:11:45,289
find all the areas that aren't running at frame rate,

234
00:11:46,050 --> 00:11:48,391
record the positions, and we have a tool

235
00:11:48,431 --> 00:11:50,352
that will actually be able to snap through

236
00:11:50,372 --> 00:11:51,912
all the camera positions for each level

237
00:11:51,932 --> 00:11:52,833
that aren't running properly.

238
00:11:55,374 --> 00:11:56,975
Then, of course, we communicate our best practice

239
00:11:56,995 --> 00:11:57,835
to the map leads and team.

240
00:12:00,596 --> 00:12:06,318
We'll troubleshoot fixed problem areas. A lot of the times we find frame rate issues, two things can happen.

241
00:12:07,878 --> 00:12:12,880
Either Technical Art can fix it ourselves, we can get in there and we can actually fix the collision of the terrain or whatever's causing issue in there.

242
00:12:13,721 --> 00:12:18,043
Or we can go to the map lead and say, hey, if you want to do this, here's what you need to do.

243
00:12:18,823 --> 00:12:23,065
Sometimes our map leads are like, oh, Tech Art, go fix it. Awesome, I'm busy polishing this thing over here.

244
00:12:23,845 --> 00:12:26,829
Sometimes we have map leads that are like, don't touch my stuff ever.

245
00:12:27,209 --> 00:12:28,311
We don't want you to ever touch it.

246
00:12:28,331 --> 00:12:30,954
It's like, okay, whatever you need.

247
00:12:33,096 --> 00:12:36,100
Communication, I really cannot emphasize enough

248
00:12:36,700 --> 00:12:38,923
how important communication is when it comes to performance.

249
00:12:39,584 --> 00:12:40,645
Especially when you're trying to run at 60.

250
00:12:40,805 --> 00:12:41,606
60 frames a second is a...

251
00:12:44,913 --> 00:12:49,418
It's difficult. It takes a dedication from the entire team.

252
00:12:50,059 --> 00:12:52,361
The artists are going to have to give up a lot to run at 60.

253
00:12:52,461 --> 00:12:56,846
The programmers have to make sure that they have everything running perfectly in order to hit 60.

254
00:12:57,667 --> 00:12:59,729
You'll... you're just not going to... it's not going to work.

255
00:13:02,292 --> 00:13:06,176
So, Certain Affinity strives to always run the framerate every day.

256
00:13:07,134 --> 00:13:09,875
I'm going to show you guys a little bit of our data that we send out to the artists.

257
00:13:10,695 --> 00:13:12,676
Now, it's not always possible to run at frame rate every day.

258
00:13:13,376 --> 00:13:14,677
You know, development happens.

259
00:13:14,997 --> 00:13:18,018
Sometimes you're going to be running at 50, sometimes you're going to be running at 70.

260
00:13:18,758 --> 00:13:21,339
But it's important to always try to run at frame rate.

261
00:13:23,780 --> 00:13:25,080
It's really just a winning solution.

262
00:13:26,180 --> 00:13:27,621
Those of you that have been in game development

263
00:13:28,145 --> 00:13:34,108
before when you're at the end of a project, trying to hit frame rate is the most painful thing ever.

264
00:13:34,949 --> 00:13:37,890
A lot of times what ends up happening is you start stripping out all the artwork.

265
00:13:38,210 --> 00:13:41,732
And the art director is very upset that his vision doesn't look as good anymore.

266
00:13:42,153 --> 00:13:46,375
And the artists are upset because they spent six months putting that beautiful room together

267
00:13:46,395 --> 00:13:50,758
and now they have to strip all the objects out just so they can run at 30 frames a second or 60 frames a second.

268
00:13:51,318 --> 00:13:55,322
But if you always try to run at frame rate every day, and you build your process around

269
00:13:55,362 --> 00:13:57,224
your frame rate, then it's always going to win.

270
00:13:57,244 --> 00:14:00,807
It's always going to run, and your artist will spend more time polishing the art instead

271
00:14:00,827 --> 00:14:02,308
of ripping it all out to try to hit frame rate.

272
00:14:05,735 --> 00:14:09,158
So, it's important to have a budget, obviously.

273
00:14:09,538 --> 00:14:12,761
I'm not going to break down our budgets completely, because that would just take too long.

274
00:14:14,002 --> 00:14:18,306
But our environments had a budget of 13.5 milliseconds, out of our 16.6.

275
00:14:18,506 --> 00:14:21,890
Now, when I say environments, that includes all the effects and levels,

276
00:14:21,910 --> 00:14:25,173
that includes the post effects, that includes things like god rays,

277
00:14:26,193 --> 00:14:29,316
high quality shadows, or whatever kind of features that the artist wanted to put in there.

278
00:14:31,438 --> 00:14:33,461
If we weren't hitting frame rate we had to know why

279
00:14:34,442 --> 00:14:37,926
And we had to watch the numbers every day, so

280
00:14:41,170 --> 00:14:44,033
So you might be asking yourself, how do you actually get these numbers?

281
00:14:44,053 --> 00:14:47,057
You know how do you figure out if you're running at 14 milliseconds or 22 milliseconds?

282
00:14:49,499 --> 00:14:52,161
Well, when you're working on the consoles, each console has their own kind of performance

283
00:14:52,181 --> 00:14:52,862
capture software.

284
00:14:53,563 --> 00:14:59,307
We use Pix a lot, especially on the Xbox One, Razer for the PS4, or G Pad for the PS3.

285
00:14:59,868 --> 00:15:04,191
Really what it does, it allows you to capture a frame of your game, load it up in the tool,

286
00:15:04,211 --> 00:15:06,413
and you can step through individual draw calls of your scene.

287
00:15:06,433 --> 00:15:08,054
You can see what every post effect costs.

288
00:15:09,215 --> 00:15:11,737
It will actually show you what is wrong with your scenes.

289
00:15:12,498 --> 00:15:16,021
If you've ever walked into a room in a video game and all of a sudden the frame rate dumps

290
00:15:16,081 --> 00:15:17,122
down and you don't know why.

291
00:15:18,303 --> 00:15:21,765
Loading it into Pix will actually show you this. It'll show you what's behind that wall.

292
00:15:22,346 --> 00:15:26,029
It'll show you what every single pixel on that wall costs to render.

293
00:15:26,849 --> 00:15:32,394
It could even show you the pile of a hundred thousand polygons that have an invisible material on it in the center of a room.

294
00:15:32,714 --> 00:15:34,815
That's what's causing the frame rate to dump out.

295
00:15:34,896 --> 00:15:39,079
And you're like, oh, wait a minute, there's a pile of invisible leaves in there that the artist forgot to remove.

296
00:15:39,499 --> 00:15:40,540
And that's what's killing the frame rate.

297
00:15:42,822 --> 00:15:45,023
It's really the only way to truly understand what's going on.

298
00:15:46,785 --> 00:15:49,386
Okay, so running at 60, we're splitting up our budget.

299
00:15:49,566 --> 00:15:51,046
We have 13 and a half for environments.

300
00:15:51,886 --> 00:15:53,427
And with the characters, weapons, and vehicles,

301
00:15:53,447 --> 00:15:54,347
and all our sandbox work,

302
00:15:54,367 --> 00:15:55,927
we had about two and a half milliseconds.

303
00:15:57,587 --> 00:15:59,888
And that's about an average for the characters.

304
00:15:59,988 --> 00:16:02,848
Sometimes we had eight-player maps,

305
00:16:03,008 --> 00:16:05,289
and sometimes our big-team battles were 16 players.

306
00:16:05,829 --> 00:16:07,929
So we had to roughly be at about two and a half.

307
00:16:07,949 --> 00:16:10,030
So you have 16 players on screen with the vehicles,

308
00:16:10,950 --> 00:16:12,890
and maybe some grenades going off, and...

309
00:16:13,670 --> 00:16:15,352
maybe a Banshee flying by.

310
00:16:15,372 --> 00:16:19,075
Okay, 2.5 milliseconds is about an average.

311
00:16:20,376 --> 00:16:22,078
Now when you get into your multiplayer scenarios,

312
00:16:22,098 --> 00:16:24,200
you're going to have things like server lags

313
00:16:24,260 --> 00:16:25,921
if you don't have dedicated servers and things.

314
00:16:26,482 --> 00:16:28,964
So you want to try to even run a little bit lighter than that.

315
00:16:29,404 --> 00:16:33,668
That's why if you notice, we're a little bit under 16.6 milliseconds here.

316
00:16:33,828 --> 00:16:35,930
So trying to account for any kind of server lag that we can.

317
00:16:37,111 --> 00:16:41,312
Your host might be running at, you know, 17 milliseconds.

318
00:16:41,712 --> 00:16:43,433
So any kind of extra buffer you can give it

319
00:16:43,493 --> 00:16:45,154
is just gonna help you out.

320
00:16:46,934 --> 00:16:47,675
Okay, so...

321
00:16:47,695 --> 00:16:51,236
we'll start talking about our daily performance numbers here.

322
00:16:54,809 --> 00:16:57,711
It can be difficult and time consuming to gather all the data.

323
00:16:57,951 --> 00:17:02,514
Now I will admit on this project, what we ended up having to do, our QA department every

324
00:17:02,554 --> 00:17:05,236
morning would get the build and they would load up every level and they would go to every

325
00:17:05,276 --> 00:17:07,918
single camera and they would write down the numbers of where the framerate was at.

326
00:17:08,819 --> 00:17:10,560
We were being bad TAs at that point.

327
00:17:11,561 --> 00:17:15,144
I'm happy to say now we actually have multiple tools that will automate this entire process

328
00:17:15,164 --> 00:17:15,424
for them.

329
00:17:16,044 --> 00:17:19,307
So in the mornings they had open up the bill they hit a button and it runs through every camera

330
00:17:19,767 --> 00:17:24,291
Spits it all out to an Excel file loads it up and we send it out to the team and it saved them hours

331
00:17:24,511 --> 00:17:24,871
of work

332
00:17:25,652 --> 00:17:27,753
But unfortunately for what we had on

333
00:17:28,874 --> 00:17:33,597
On this last halo project. It was less than optimal ideal, but these guys did a great job

334
00:17:34,590 --> 00:17:36,232
Now, this data can be confusing at first.

335
00:17:37,733 --> 00:17:40,635
So, this is an example of what the team saw in the mornings.

336
00:17:42,056 --> 00:17:44,618
It's not quite as confusing as it looks.

337
00:17:44,738 --> 00:17:47,200
I'm going to break down one of these cameras here in a second.

338
00:17:48,301 --> 00:17:50,062
We will work with our map leads on any problems.

339
00:17:51,343 --> 00:17:55,644
The math leads will load up this and be able to look at it and anywhere they see green,

340
00:17:55,684 --> 00:17:58,585
they know that their shots were passed. Anywhere they see red, they know that they failed.

341
00:17:59,126 --> 00:18:02,927
So they zero in on the red parts and we're, the technical art, we're going to see this first.

342
00:18:03,067 --> 00:18:08,429
And we'll go directly over to them like, hey, you got shots 3 through 4 failed.

343
00:18:09,329 --> 00:18:12,810
And here's why. We've already run it through Pix to know exactly what's going on.

344
00:18:14,170 --> 00:18:15,091
So here's our camera shot.

345
00:18:16,241 --> 00:18:18,282
So the picture on the top is a shot of the camera location.

346
00:18:18,322 --> 00:18:19,922
This is the location when you're looking through.

347
00:18:20,422 --> 00:18:21,883
This is where the frame rate is bad.

348
00:18:23,123 --> 00:18:24,863
The column on the left, the GPU work,

349
00:18:24,923 --> 00:18:26,864
that is a custom counter we had in Pix

350
00:18:26,884 --> 00:18:27,904
that actually showed us, hey,

351
00:18:28,564 --> 00:18:29,965
just accounting for the GPU,

352
00:18:30,445 --> 00:18:35,246
this shot, the top number is 12.6,

353
00:18:36,227 --> 00:18:36,827
12.8 milliseconds.

354
00:18:38,367 --> 00:18:41,588
And that's how much it would cost to render on the GPU.

355
00:18:43,247 --> 00:18:47,471
Now the numbers from the top to bottom, the numbers on the top would be, those are the numbers from the daily build today.

356
00:18:47,531 --> 00:18:50,514
That would be today's build. So today the camera is passing. It's great.

357
00:18:51,114 --> 00:18:54,377
Now yesterday's build was running at 14.1. That means it was failing.

358
00:18:54,897 --> 00:18:58,560
So between yesterday and today, we actually got on there and fixed a few things.

359
00:18:59,301 --> 00:19:02,504
They checked it in, they ran the numbers this morning, and all of a sudden, hey, the camera's green.

360
00:19:02,784 --> 00:19:06,888
And all the artists care about is if the camera's red or green. If everything's green, it's all good.

361
00:19:07,848 --> 00:19:09,930
The column on the left is the GPU usage.

362
00:19:10,510 --> 00:19:12,272
That was another custom counter we used.

363
00:19:12,332 --> 00:19:15,134
It's basically a percentage of how busy the GPU was

364
00:19:15,194 --> 00:19:16,615
when it was producing the frame.

365
00:19:19,076 --> 00:19:20,738
But once the artists kind of break this down,

366
00:19:20,758 --> 00:19:23,139
they would only really look at their individual levels,

367
00:19:23,219 --> 00:19:24,260
and it was a really quick process.

368
00:19:25,869 --> 00:19:29,333
Here's a quick screenshot of our multiplayer performance numbers.

369
00:19:30,534 --> 00:19:34,238
I've never worked anywhere where we test multiplayer as much as we do at CertAffinity.

370
00:19:34,899 --> 00:19:38,343
Being a co-development house that focuses on multiplayer, I should have expected it.

371
00:19:39,377 --> 00:19:42,057
but we have three to four multiplayer tests a day.

372
00:19:42,277 --> 00:19:44,338
And each test, sometimes it'll focus on design,

373
00:19:44,378 --> 00:19:45,578
sometimes it'll focus on modes,

374
00:19:46,098 --> 00:19:47,718
sometimes it'll be an art review.

375
00:19:47,918 --> 00:19:49,699
But behind the scenes, we're recording these numbers

376
00:19:50,119 --> 00:19:51,539
for everything, for every mode,

377
00:19:51,599 --> 00:19:52,800
for all the amount of players.

378
00:19:54,060 --> 00:19:55,360
They get quite a lot of data.

379
00:19:56,380 --> 00:19:58,501
This is where a lot of times

380
00:19:58,521 --> 00:20:00,981
you'll see a lot of CPU issues running in here.

381
00:20:02,461 --> 00:20:11,929
And here's my handy-dandy attempt at explaining GPU's stalling and being CPU bound.

382
00:20:13,270 --> 00:20:20,537
So up here on the top, if you look at the top graphic, on purple, the GPU, let's say, is busy rendering the first frame.

383
00:20:21,138 --> 00:20:23,199
And it's going along and it's rendering at 13 milliseconds.

384
00:20:23,340 --> 00:20:27,003
And while that's happening, the CPU is actually busy getting ready, putting together the second frame.

385
00:20:27,704 --> 00:20:29,605
And once it's done, it releases off to the GPU.

386
00:20:30,065 --> 00:20:32,106
GPU renders the second frame, 13 milliseconds.

387
00:20:32,126 --> 00:20:32,707
No problem.

388
00:20:32,747 --> 00:20:33,427
Everything's fine.

389
00:20:33,707 --> 00:20:36,189
So now on the bottom, now here is

390
00:20:36,449 --> 00:20:38,590
what happens and what it looks like when your GPU actually

391
00:20:38,630 --> 00:20:39,151
stalls out.

392
00:20:40,251 --> 00:20:42,813
So while the GPU is running the first frame, 13 milliseconds,

393
00:20:42,833 --> 00:20:43,273
that's fine.

394
00:20:43,313 --> 00:20:45,294
The CPU is busy putting together the second frame.

395
00:20:46,075 --> 00:20:48,036
And then it runs into issues, and there's too much data.

396
00:20:48,216 --> 00:20:50,678
It's got too much whatever, whether it's collision

397
00:20:50,698 --> 00:20:51,758
or there's audio problems.

398
00:20:51,878 --> 00:20:53,499
And it's taking a long time for it

399
00:20:53,559 --> 00:20:54,880
to put together the second frame.

400
00:20:55,521 --> 00:21:00,723
Now what happens is it's causing the the GPU to actually stall out to render the second frame

401
00:21:01,344 --> 00:21:03,605
It can't render that second frame until it gets all the data it needs

402
00:21:04,265 --> 00:21:07,307
Then it ends up by the time it actually does get released to render the frame

403
00:21:07,527 --> 00:21:13,090
It's taking 24 milliseconds to render that frame and that's because the CPU is actually hogging all the time to put it all together

404
00:21:14,404 --> 00:21:17,546
Now what are some of the issues that would cause the CPU to kind of stall out?

405
00:21:17,726 --> 00:21:21,788
Well, for Halo we have collision issues. We have lots of different collision types.

406
00:21:22,808 --> 00:21:25,750
Our artists don't like making custom collision,

407
00:21:26,370 --> 00:21:29,311
even though we have great tools for it. What happens is the artist will actually

408
00:21:29,852 --> 00:21:32,833
take the render model, dupe it off, and go, oh, that's collision, and I'll

409
00:21:33,093 --> 00:21:34,294
go ahead and optimize that later.

410
00:21:34,774 --> 00:21:40,178
well, later comes around and end up with hundreds of thousands of polygons of collision you've seen.

411
00:21:41,179 --> 00:21:43,361
And that ends up just really choking out the CPU.

412
00:21:44,202 --> 00:21:46,163
Audio issues can kind of, would hit us.

413
00:21:48,205 --> 00:21:50,046
We had draw calls, poor occlusion calling.

414
00:21:50,206 --> 00:21:52,108
We would have way too many draw calls in our scenes.

415
00:21:52,888 --> 00:21:54,370
We ended up combining objects together,

416
00:21:54,890 --> 00:21:57,352
working with portals to make sure the objects are occluding properly.

417
00:21:58,092 --> 00:22:00,514
And to a lesser extent, maybe some animation or AI,

418
00:22:00,534 --> 00:22:02,196
but multiplayer, we don't really have a lot of AI.

419
00:22:04,823 --> 00:22:06,505
So, okay, let's talk about our levels.

420
00:22:07,185 --> 00:22:08,266
So we had six level remakes.

421
00:22:08,987 --> 00:22:10,628
Um, I want to talk about Bloodline.

422
00:22:10,728 --> 00:22:13,891
Bloodline was our Halo 2 coagulation map.

423
00:22:14,231 --> 00:22:15,933
Uh, it's really kind of a classic map.

424
00:22:16,593 --> 00:22:17,334
Uh, everybody loves it.

425
00:22:17,354 --> 00:22:18,415
It's one of my favorite maps,

426
00:22:18,955 --> 00:22:20,957
and it was a nightmare for performance.

427
00:22:21,417 --> 00:22:24,540
It was our worst-case scenario on all accounts.

428
00:22:26,782 --> 00:22:28,003
So this was our big-team battle map.

429
00:22:28,663 --> 00:22:29,304
It was 16 players.

430
00:22:29,464 --> 00:22:31,846
So we had 16 players out there hunting, killing,

431
00:22:32,286 --> 00:22:33,567
driving around, throwing grenades.

432
00:22:34,857 --> 00:22:36,538
and causing a lot of havoc.

433
00:22:37,419 --> 00:22:40,501
Multiple vehicle types. Our designers put basically every vehicle in the game.

434
00:22:40,621 --> 00:22:43,223
We had flying vehicles, we had driving vehicles, we had tanks,

435
00:22:43,683 --> 00:22:45,624
we had both of our new vehicles in there.

436
00:22:46,645 --> 00:22:48,967
We had extremely long drawing distances.

437
00:22:50,008 --> 00:22:51,309
And I'll show you right here.

438
00:22:52,009 --> 00:22:53,730
So here's a screenshot of the bloodline.

439
00:22:54,631 --> 00:22:56,332
And this is a little over halfway through the map.

440
00:22:57,273 --> 00:22:59,354
This is a sniper perch. You can get up there and

441
00:22:59,915 --> 00:23:02,977
you see the entire map. There's nothing to hide from.

442
00:23:03,457 --> 00:23:04,817
You can get sniped from this position.

443
00:23:04,977 --> 00:23:06,658
So, I mean, it has to render perfectly.

444
00:23:06,678 --> 00:23:08,118
And if it doesn't, people are going to let you know.

445
00:23:08,138 --> 00:23:11,639
You know, when you're working with multiplayer audiences,

446
00:23:11,879 --> 00:23:14,080
if your frame rate isn't up there and it's not perfect,

447
00:23:14,300 --> 00:23:15,840
they will get on those forums and they will let you know.

448
00:23:18,981 --> 00:23:20,281
So, here's another sniper perch.

449
00:23:20,561 --> 00:23:22,322
This shows off a little bit of our grass system here.

450
00:23:24,323 --> 00:23:29,984
One of our issues we had with this map is these mountains, we'd actually combined a lot of them together

451
00:23:30,004 --> 00:23:33,225
because we ran into draw calls, we were way over our draw call limit for this.

452
00:23:33,705 --> 00:23:35,005
So we combined all the mountains together.

453
00:23:35,486 --> 00:23:39,006
Well then we got hit with a GPU where the mountains weren't calling properly.

454
00:23:39,026 --> 00:23:42,127
So we had to come up with clever ways to cut all of these mountain ridges.

455
00:23:42,207 --> 00:23:43,988
The mountains would come in and kind of go back around.

456
00:23:44,508 --> 00:23:46,890
And we had to find clever ways to cut them up to where,

457
00:23:47,110 --> 00:23:49,211
okay, well, on this angle from this sniper perch,

458
00:23:49,231 --> 00:23:50,913
we can get the left-hand side of the mountain out,

459
00:23:50,973 --> 00:23:52,734
and that's a quarter of a millisecond, we can get that.

460
00:23:52,754 --> 00:23:55,136
Okay, you know, we have a half millisecond to go.

461
00:23:55,196 --> 00:23:57,277
Where else can we cut these mountains up to get some of that out?

462
00:23:58,558 --> 00:24:00,259
Our grass system was pretty robust.

463
00:24:00,299 --> 00:24:01,540
I'm going to talk about that in a sec.

464
00:24:03,001 --> 00:24:05,803
Here's kind of another sniper perch looking down inside one of these bases.

465
00:24:06,967 --> 00:24:11,431
These bases were pretty complex, and there was entrances and holes all inside the bases,

466
00:24:11,972 --> 00:24:14,715
so culling out the inside of the bases was quite a challenge.

467
00:24:15,496 --> 00:24:18,239
We ended up attaching a lot of objects together.

468
00:24:18,259 --> 00:24:22,263
These bases were kitbashed together in the beginning, and there was lots of geometry

469
00:24:22,283 --> 00:24:25,146
in there, so it took a lot of optimization passes for the artist to get that right.

470
00:24:25,995 --> 00:24:30,337
That little glowy ball on the top there, that's one of our new dynamic events we added into the level.

471
00:24:30,858 --> 00:24:39,942
And basically, a player can go up there, flip the switch, and this giant EMP would kind of burst forth and fill the screen with this massive, you know, electrical storm that disabled all the vehicles.

472
00:24:40,383 --> 00:24:44,525
And it was really a lot of fun. It was very cool. And it was awful for performance.

473
00:24:46,426 --> 00:24:48,967
But we ended up making a lot of the particles additive, which took a lot of...

474
00:24:50,720 --> 00:24:55,127
a lot of load off our GPU and it was only on screen for a short amount of time so

475
00:24:55,588 --> 00:24:57,011
it generally kind of worked out.

476
00:25:01,552 --> 00:25:02,613
Here's a picture of the inside of the base.

477
00:25:03,294 --> 00:25:04,235
Beautiful, I loved it.

478
00:25:04,375 --> 00:25:05,736
It was really, really pretty.

479
00:25:05,776 --> 00:25:07,597
The artist just did an amazing job with this.

480
00:25:07,617 --> 00:25:09,439
Shows off our new PBR system really, really well.

481
00:25:10,160 --> 00:25:12,041
But you can see that there's a hole in the center of the base

482
00:25:12,181 --> 00:25:14,844
and behind that other column over there,

483
00:25:14,864 --> 00:25:16,465
there's another hole and there's a hole behind you.

484
00:25:16,926 --> 00:25:19,007
So there was no good way to really cut out

485
00:25:19,067 --> 00:25:20,088
a lot of the environment.

486
00:25:20,128 --> 00:25:21,970
We had to do, again, a lot of creative cuts

487
00:25:22,010 --> 00:25:24,592
when inside the base to cut out some of the environment

488
00:25:24,732 --> 00:25:25,353
on the outside.

489
00:25:25,373 --> 00:25:26,694
It was very difficult.

490
00:25:30,817 --> 00:25:33,098
We also had a cave system to make things worse.

491
00:25:35,198 --> 00:25:38,519
These caves, when they first got in, they were kitbashed together with a...

492
00:25:38,699 --> 00:25:40,860
One of the artists created a rock.

493
00:25:40,900 --> 00:25:44,201
He's like, I'm going to take this rock, and he kitbashed the entire cave system together with these rocks.

494
00:25:45,061 --> 00:25:48,162
And I forget exactly how many polygons it was, but it was a lot.

495
00:25:48,726 --> 00:25:52,447
As soon as that got checked in, our frame rate went down about 15 frames a second in that area.

496
00:25:53,047 --> 00:25:55,207
We would go over there and take a look at it, and the artists were like,

497
00:25:55,287 --> 00:25:58,348
oh yeah, yeah, yeah, we know, we know, we've got to optimize it, we've got to attach it all together.

498
00:25:58,368 --> 00:26:01,949
I'm like, well, okay, well, that's a lot of polygons.

499
00:26:02,169 --> 00:26:05,630
And he kind of looks at me half-joking, he's like, oh, it's next-gen, I thought polygons were free now.

500
00:26:09,090 --> 00:26:11,771
If you've been in the industry long enough, you're going to hear that.

501
00:26:11,851 --> 00:26:14,211
You're going to hear, oh, polygons will be free on next-gen.

502
00:26:15,012 --> 00:26:20,413
Polygons will never be free. Never. It's some kind of urban myth that's been

503
00:26:20,453 --> 00:26:24,134
created 15 years ago and I heard that when we were switching to the PS2.

504
00:26:24,254 --> 00:26:28,315
Oh, polygons are gonna be free on the PS2. I'm not even sure exactly what that

505
00:26:28,375 --> 00:26:34,497
means, you know, but we ended up attaching all these rocks together, optimizing it

506
00:26:34,597 --> 00:26:38,738
out, and actually it ended up running really great, but I love that polygon is

507
00:26:38,798 --> 00:26:42,239
free thing. Okay, so our grass system.

508
00:26:43,210 --> 00:26:45,411
We had a very, very dense system of grass in here.

509
00:26:46,272 --> 00:26:48,913
Bloodline is basically the giant open canyon.

510
00:26:50,213 --> 00:26:51,453
We couldn't have a lot of objects in there

511
00:26:51,473 --> 00:26:53,014
because we were very bound by our draw calls.

512
00:26:53,474 --> 00:26:55,675
So we needed grass to really kind of break it up.

513
00:26:55,735 --> 00:26:57,976
And our artists were very, very passionate about this grass

514
00:26:57,996 --> 00:27:00,337
system to make it really kind of blend and really look really

515
00:27:00,357 --> 00:27:00,557
good.

516
00:27:01,357 --> 00:27:02,818
And we were like, OK, let's go for it.

517
00:27:04,318 --> 00:27:07,960
At one point, we had 70,000 clumps of grass in the system.

518
00:27:08,760 --> 00:27:10,581
If you're looking at 20 to 50 verts in each,

519
00:27:10,801 --> 00:27:12,141
that's over a million vertices.

520
00:27:13,182 --> 00:27:15,162
Now, the system actually handles grass very well.

521
00:27:15,242 --> 00:27:17,123
It's pretty slick in how it does it.

522
00:27:18,343 --> 00:27:22,365
The tool will actually go through and combine a bunch of these clumps together into big

523
00:27:22,405 --> 00:27:23,285
groups of grass.

524
00:27:23,725 --> 00:27:28,366
And then we'll have these groups of grass, we can LOD them differently, we can turn them

525
00:27:28,427 --> 00:27:31,047
off on the GPU at distance, and it works really well.

526
00:27:31,527 --> 00:27:33,808
We ended up with thousands of these clumps.

527
00:27:34,749 --> 00:27:38,252
Now, this system actually hits the CPU and the GPU at the same time.

528
00:27:38,732 --> 00:27:41,795
So GPU, because it's got to render, you know, all of these little vertices,

529
00:27:41,855 --> 00:27:45,278
and you'll have tons of overdraw, because at one point this grass was almost waist high,

530
00:27:45,298 --> 00:27:49,602
and now you have all this overdraw going through, so we had to make the grass a lot lower.

531
00:27:50,643 --> 00:27:54,248
But it also hits the CPU because it has to track every single one of these groups and tell it,

532
00:27:54,308 --> 00:27:57,934
okay, well, what LOD is it on? Is it on or off?

533
00:27:58,534 --> 00:27:59,676
Every single one of those groups hits it.

534
00:28:00,077 --> 00:28:01,619
So we still couldn't render enough grass.

535
00:28:01,739 --> 00:28:03,882
And at one point, we were going to have to take a lot of this grass out,

536
00:28:03,902 --> 00:28:05,084
and it made the artist very sad.

537
00:28:05,755 --> 00:28:08,957
and nobody likes sad artists. They start crying and it's very depressing.

538
00:28:09,638 --> 00:28:13,681
So what we ended up doing, one of our amazing technical artists

539
00:28:13,801 --> 00:28:18,283
actually came up with a few tools to get the grass out of our

540
00:28:18,404 --> 00:28:21,706
grass tools and brought them into Maya. We actually converted a lot of

541
00:28:21,726 --> 00:28:25,768
this grass actually into regular geometry. We were able to cull it on a normal basis

542
00:28:25,808 --> 00:28:29,731
just like anything else so it wouldn't hit our CPU as much. It turned out looking really great.

543
00:28:32,692 --> 00:28:38,515
Other things that helped the GPU, the LOD system in Halo is actually, it's pretty neat, it's got some cool things to it.

544
00:28:38,956 --> 00:28:43,058
At a distance it'll actually create a very low-res version of the geometry.

545
00:28:43,558 --> 00:28:46,720
It puts a cheap shader on it and actually bakes some vertex colors on there.

546
00:28:46,860 --> 00:28:48,902
Well, when it samples the lighting it blends pretty well.

547
00:28:49,762 --> 00:28:53,764
For Bloodline we had to bring that way, way in because the shaders are very expensive now.

548
00:28:54,485 --> 00:28:58,607
So you actually, most people couldn't even see them, so it did a pretty good job.

549
00:29:00,352 --> 00:29:03,875
very few detail objects in the middle of the map. When you're in the middle of the map, you're actually playing,

550
00:29:03,895 --> 00:29:09,300
they did a good job clearing everything out without it feeling too naked and open.

551
00:29:10,080 --> 00:29:13,383
The grass system helped with that. We had some strategically placed rocks, but we

552
00:29:13,423 --> 00:29:16,426
couldn't have a lot of objects in the middle. We just couldn't afford to render it.

553
00:29:17,287 --> 00:29:20,349
And the poly counts we had to keep as low as we possibly could. This map had the

554
00:29:20,409 --> 00:29:22,231
lowest poly count of any of our maps.

555
00:29:22,691 --> 00:29:24,633
It was just so big, we couldn't hide anything.

556
00:29:26,882 --> 00:29:31,564
Things that helped the CPU, the vehicle physics needed optimization. Again, we had

557
00:29:31,584 --> 00:29:35,827
almost every vehicle in this map and each vehicle has multiple damage states

558
00:29:35,867 --> 00:29:38,488
and destruction states and each one of those states had their own little bits

559
00:29:38,548 --> 00:29:42,210
of physics that kind of pop out. So we had to get in there and optimize that to

560
00:29:42,290 --> 00:29:46,933
really help the CPU. Again, with our draw calls we cut them down very dramatically.

561
00:29:47,673 --> 00:29:52,256
And the VFX distances, we cut those back as well. We turned off our VFX really

562
00:29:52,276 --> 00:29:52,756
aggressively.

563
00:29:54,535 --> 00:29:57,377
Unfortunately, there was just nothing we could do about that, so

564
00:29:58,177 --> 00:30:01,520
after a certain amount of distance, there just isn't any VFX, because we just couldn't afford it.

565
00:30:05,763 --> 00:30:05,943
So,

566
00:30:06,824 --> 00:30:08,145
Bloodline was very CPU-bound.

567
00:30:10,626 --> 00:30:11,407
Get rid of that slide.

568
00:30:12,848 --> 00:30:13,408
Wrapping it up.

569
00:30:13,949 --> 00:30:14,569
Alright, so

570
00:30:15,290 --> 00:30:16,631
trying to hit 60 frames a second.

571
00:30:18,973 --> 00:30:21,014
Really, we had to do a lot of careful planning with this.

572
00:30:22,434 --> 00:30:26,556
Basically, having to start out on the 360 and then convert over to Xbox One,

573
00:30:26,756 --> 00:30:30,258
we literally, we had plans of exactly where we needed to be on every week.

574
00:30:30,378 --> 00:30:31,218
Okay, where are we at this?

575
00:30:31,899 --> 00:30:35,360
Is that gonna help us get to our plans in March when we get the engine?

576
00:30:36,201 --> 00:30:39,604
Constant communication between us, all the other studios working on the project,

577
00:30:40,405 --> 00:30:44,469
all of the different teams within Certain Affinity that were working on this project.

578
00:30:45,049 --> 00:30:46,190
It was really tremendous.

579
00:30:47,291 --> 00:30:48,693
And you always have to keep an eye on your data.

580
00:30:48,873 --> 00:30:50,594
If you're trying to run at 60 frames a second,

581
00:30:50,995 --> 00:30:55,499
having a system where you have that kind of daily updates is really, really helpful.

582
00:30:56,200 --> 00:30:58,382
There's no way we wouldn't have been able to do that without it.

583
00:31:00,409 --> 00:31:03,551
This was definitely one of the most challenging products that Certain Affinity has ever done.

584
00:31:04,291 --> 00:31:07,633
It was the first time we ever had six maps running at the same time.

585
00:31:08,613 --> 00:31:11,475
It was the first time we've actually switched consoles in the middle of development.

586
00:31:12,876 --> 00:31:14,397
It took seven months to develop six levels,

587
00:31:14,417 --> 00:31:17,438
a full set of weapons and vehicles, and the VFX that went around with it,

588
00:31:18,199 --> 00:31:19,139
on top of everything else.

589
00:31:19,560 --> 00:31:21,481
We had a pretty large team for us.

590
00:31:21,521 --> 00:31:23,242
We had over 60 people working on this product.

591
00:31:26,604 --> 00:31:32,749
Thank you. I want to say thank you to Thomas Maurer, Louise Kruhl, Matt Ostley, Neil Davis, the entire Halo team.

592
00:31:33,190 --> 00:31:37,554
It was an absolute pleasure to work with every single one of these people. It was just really a lot of fun.

593
00:31:38,915 --> 00:31:44,921
Lastly, Certain Affinity is hiring. We're looking for talented developers. We're looking for technical artists.

594
00:31:45,121 --> 00:31:51,167
So if you're interested, come talk to me afterwards or go on our website and check it out. Thank you.

595
00:31:58,108 --> 00:32:02,990
If anybody has any questions, microphones, yell them, scream them at me.

596
00:32:07,491 --> 00:32:12,512
Hi, I just wonder, because you do daily tests, yeah?

597
00:32:13,772 --> 00:32:17,293
How many positions and view angles do you test each day?

598
00:32:18,453 --> 00:32:22,014
So the question was, how many positions and view angles do we test daily?

599
00:32:24,955 --> 00:32:28,578
as many as we can find. Our QA department is devilishly clever

600
00:32:29,059 --> 00:32:32,202
finding all of the angles that are actually within our play space that

601
00:32:32,222 --> 00:32:33,383
actually don't run at frame rate.

602
00:32:34,864 --> 00:32:36,085
I sit down and we work with them and

603
00:32:36,946 --> 00:32:39,007
usually they would be between eight and twelve

604
00:32:39,408 --> 00:32:42,791
depending on the map. Sometimes they'll run up to fourteen.

605
00:32:43,651 --> 00:32:47,555
What ends up happening as each individual camera hits frame rate,

606
00:32:47,955 --> 00:32:51,118
if they're consistently at frame rate for five builds, we'll actually drop that

607
00:32:51,158 --> 00:32:53,380
camera out and we no longer report that to the team.

608
00:32:54,145 --> 00:32:57,227
Okay, so it's all determined by the QA team.

609
00:32:59,288 --> 00:33:02,471
The positions are determined by the QA team?

610
00:33:02,491 --> 00:33:02,711
Yes.

611
00:33:03,091 --> 00:33:03,792
Okay.

612
00:33:04,112 --> 00:33:09,736
And do you think that tens of positions are enough?

613
00:33:11,777 --> 00:33:12,578
Do they test them enough?

614
00:33:13,719 --> 00:33:17,661
The positions are too few, according to my experience.

615
00:33:18,522 --> 00:33:19,362
Maybe there are some...

616
00:33:19,382 --> 00:33:20,143
Too few?

617
00:33:20,223 --> 00:33:20,543
Yeah.

618
00:33:20,723 --> 00:33:20,783
Um...

619
00:33:22,853 --> 00:33:26,815
With multiplayer levels, it depends on the level.

620
00:33:27,035 --> 00:33:27,535
It really does.

621
00:33:27,835 --> 00:33:29,136
Coagulation had quite a few.

622
00:33:30,116 --> 00:33:31,757
There's always levels, areas that

623
00:33:31,857 --> 00:33:34,218
don't fall within those cameras.

624
00:33:34,998 --> 00:33:37,339
But we'll catch a lot of those on our daily playtest as well.

625
00:33:38,039 --> 00:33:39,679
We didn't want to overwhelm the R team.

626
00:33:39,759 --> 00:33:42,000
So let's say if we had 50 or 60 cameras,

627
00:33:42,160 --> 00:33:44,221
and you're sending those out to the R team every single day,

628
00:33:44,241 --> 00:33:47,102
they're going to open that up, see an endless amount of data,

629
00:33:47,202 --> 00:33:48,022
and they're going to shut it down,

630
00:33:48,062 --> 00:33:48,943
and they will never look at it.

631
00:33:50,504 --> 00:33:55,266
So behind the scenes, the technical artist will actually take a look at the entire level

632
00:33:55,306 --> 00:33:55,627
as well.

633
00:33:56,027 --> 00:33:59,529
We ride around in the vehicles, we detach the camera, fly around, and we'll find other

634
00:33:59,569 --> 00:34:01,050
little areas and we'll try to fix those.

635
00:34:01,810 --> 00:34:04,692
And sometimes we'll work with the map leads and say, hey, we found a new area but we're

636
00:34:04,712 --> 00:34:07,794
not going to report it, so let's work on this area as well.

637
00:34:11,653 --> 00:34:15,056
Yes, yes, we have new tools now that actually automate a lot of the process.

638
00:34:15,416 --> 00:34:16,898
We still place the cameras by hand.

639
00:34:18,179 --> 00:34:20,901
I would love to have a system of heat maps and upgrade it even more.

640
00:34:21,522 --> 00:34:21,842
Thank you.

641
00:34:22,262 --> 00:34:22,503
Thank you.

642
00:34:23,890 --> 00:34:27,873
Hi, I had a question with regard to your shader replacements.

643
00:34:28,933 --> 00:34:31,615
In general, were there objects

644
00:34:31,635 --> 00:34:33,135
that were more aggressively replaced,

645
00:34:33,355 --> 00:34:35,156
and what were they replaced with?

646
00:34:36,297 --> 00:34:38,298
Like, did you have different levels of PBR?

647
00:34:38,318 --> 00:34:41,400
Did you fall back on a spec or a pure diffuse?

648
00:34:41,860 --> 00:34:43,601
We ended up replacing most of the shaders.

649
00:34:44,401 --> 00:34:46,523
Luis is gonna talk a lot more about our PBR system

650
00:34:46,583 --> 00:34:47,903
in the NEC talks, so stick around

651
00:34:47,943 --> 00:34:49,184
and talk to him about that.

652
00:34:50,104 --> 00:34:50,345
Thank you.

653
00:34:52,420 --> 00:34:58,801
Hey, I was very curious about how you deploy your partner's

654
00:34:58,861 --> 00:34:59,281
pipeline.

655
00:35:00,682 --> 00:35:02,202
So that's really interesting.

656
00:35:02,242 --> 00:35:05,663
I was at XDS last year, and basically

657
00:35:05,763 --> 00:35:08,424
working with external developers was a giant nightmare

658
00:35:08,504 --> 00:35:09,464
for almost everybody.

659
00:35:10,424 --> 00:35:13,025
And one thing pretty much no one talked about except for me

660
00:35:13,085 --> 00:35:16,186
was the concept of deploying a pipeline externally.

661
00:35:16,246 --> 00:35:19,447
So I'm curious how your partner's pipeline gets

662
00:35:19,627 --> 00:35:20,907
installed and configured.

663
00:35:21,986 --> 00:35:23,086
differently every time.

664
00:35:26,129 --> 00:35:28,150
Most of the times we have to be on a secure network,

665
00:35:28,190 --> 00:35:31,413
so I'll actually have like two or three different boxes at my desk,

666
00:35:31,453 --> 00:35:33,614
and every single one of those boxes is on a different network,

667
00:35:33,634 --> 00:35:36,156
where sometimes I'll have to have a box on a desk in a different room.

668
00:35:37,417 --> 00:35:39,338
But they'll come out and they'll help us install it.

669
00:35:39,398 --> 00:35:42,701
Sometimes they'll deliver boxes with the tools already installed on them.

670
00:35:43,965 --> 00:35:46,586
Sometimes they'll actually send guys out and install it for us.

671
00:35:47,987 --> 00:35:51,648
But once we get the networks up and running, generally we'll run a little slower than their guys,

672
00:35:51,948 --> 00:35:56,750
because we have to send data all the way up to their, let's say, up to 343 and then back.

673
00:35:57,951 --> 00:35:59,051
So it's different every time.

674
00:36:00,027 --> 00:36:03,309
So it's largely a manual process, it's not automated?

675
00:36:03,669 --> 00:36:05,090
Sometimes it can be, parts of it.

676
00:36:06,211 --> 00:36:08,392
Thank you.

677
00:36:08,412 --> 00:36:11,234
I noticed that you were sending out the reports via Excel files.

678
00:36:11,454 --> 00:36:17,297
Have you ever, have you guys thought about like maybe having a back end for aggregating a lot of the data or was that like out of scope?

679
00:36:21,263 --> 00:36:25,526
Yes and no. Again, sometimes we have to rewrite things for different projects.

680
00:36:26,327 --> 00:36:29,809
Sometimes our partners actually have tools for us that we actually have to end up using.

681
00:36:30,870 --> 00:36:36,513
We're currently investigating a lot of different solutions to try to come up with like a certain affinity set of tools.

682
00:36:36,773 --> 00:36:39,835
So, we're really looking at everything right now.

683
00:36:40,416 --> 00:36:42,757
Thanks. Thank you.

684
00:36:43,150 --> 00:36:46,634
Did the team as a whole embrace performance, especially from the TH perspective?

685
00:36:46,714 --> 00:36:51,339
Did you find yourself fighting with art over visual bar, look development, versus shaded performance?

686
00:36:52,180 --> 00:36:54,122
The whole team loves performance when I'm in the room.

687
00:36:58,606 --> 00:37:03,269
The beginning of this project, when we got the mandate to go 60, there were a lot of artists that were really bummed out

688
00:37:03,570 --> 00:37:07,392
because they wanted to have all of the milliseconds and hoard the milliseconds

689
00:37:07,452 --> 00:37:11,435
and we're going to do all of these amazing things and we're going to have all these vehicles

690
00:37:12,015 --> 00:37:14,557
and do everything we've always dreamed of.

691
00:37:15,618 --> 00:37:19,940
But they kind of came around once we started playing the playtest at 60 frames a second.

692
00:37:20,581 --> 00:37:23,083
They really came around and they had to give up a lot of things.

693
00:37:23,923 --> 00:37:28,971
But really, once our artists go through an entire cycle and they get to an end of a cycle

694
00:37:29,051 --> 00:37:34,299
and they don't have to take anything out of the games, we actually have one of the gate

695
00:37:34,339 --> 00:37:36,963
processes that is a tech gate.

696
00:37:38,267 --> 00:37:41,291
to where they actually have to add in

697
00:37:41,692 --> 00:37:44,876
any of the expensive graphics processes they want for this level. So if they want

698
00:37:44,936 --> 00:37:48,161
god rays plus the expensive fog and a higher resolution shadow map

699
00:37:48,641 --> 00:37:51,425
we have an early gate, they have to actually put that in, turn it on and

700
00:37:51,465 --> 00:37:53,848
actually account for that frame rate early on in the process.

701
00:37:54,781 --> 00:37:57,003
Let's say all three of those things took two and a half milliseconds

702
00:37:57,443 --> 00:38:03,307
Well now they'll actually build a level around those processes and so for the entire time they have that on it may not be tuned

703
00:38:03,347 --> 00:38:06,489
And look super pretty but it's there so that way at the end

704
00:38:06,989 --> 00:38:10,392
Instead of trying to turn those processes on at the end and now not hitting a frame rate

705
00:38:10,432 --> 00:38:14,374
They're always working frame rate so once they go through that process. They're actually pretty cool with it

706
00:38:14,735 --> 00:38:17,036
They really like a lot so they can polish their stuff at the end

707
00:38:17,817 --> 00:38:22,081
Awesome, and were those features sort of already developed? You said that there was already some existing pipeline.

708
00:38:22,461 --> 00:38:28,067
Sometimes, yeah. Sometimes we'll get features halfway through development and we'll have to do a lot of testing on them.

709
00:38:28,287 --> 00:38:31,771
So we have to be really flexible. We try our best.

710
00:38:32,251 --> 00:38:33,072
Yeah, cool. Thank you.

711
00:38:36,086 --> 00:38:41,250
Hi, I'm really curious about the polygon count.

712
00:38:41,610 --> 00:38:44,172
So basically, the Halo 2, that's the remake.

713
00:38:44,432 --> 00:38:49,296
So when you imported the original asset,

714
00:38:49,376 --> 00:38:51,818
so the polygon count already fixed.

715
00:38:52,438 --> 00:38:57,261
So when you add more polygons, where

716
00:38:58,662 --> 00:39:01,925
do you add those polygons to verify or remake

717
00:39:02,505 --> 00:39:03,106
the original?

718
00:39:03,826 --> 00:39:10,188
Okay, so the question was how did we get our polygon budgets from the old assets to the new assets?

719
00:39:12,149 --> 00:39:15,170
Actually, we used a lot of the old assets just as visual reference.

720
00:39:15,651 --> 00:39:18,552
We rebuilt, at least in the environments, almost everything.

721
00:39:19,232 --> 00:39:20,512
We rebuilt all that from scratch.

722
00:39:21,453 --> 00:39:25,534
Now when coming to the characters like the Spartans and the weapons and the vehicles,

723
00:39:25,934 --> 00:39:25,994
we...

724
00:39:31,210 --> 00:39:33,572
really just kind of like polished those up.

725
00:39:33,612 --> 00:39:36,193
There wasn't a lot of time to rebuild the Warthog from scratch,

726
00:39:36,233 --> 00:39:37,294
and there really was no need to.

727
00:39:37,994 --> 00:39:40,355
But we did redo all the shaders and the materials on things.

728
00:39:41,296 --> 00:39:43,377
But when we're coming to the Polygon budgets,

729
00:39:43,997 --> 00:39:47,359
we stayed pretty close to what our Polygon budgets were for the 360,

730
00:39:48,380 --> 00:39:51,001
just because we weren't getting the next-gen engine for four or five months,

731
00:39:51,081 --> 00:39:54,463
and we had to be very, very conservative with our numbers.

732
00:39:54,883 --> 00:39:56,524
I think we only went up by maybe 20%.

733
00:39:58,445 --> 00:40:01,246
Because if we completely blew our polygon budget,

734
00:40:01,286 --> 00:40:02,306
got to the Xbox One,

735
00:40:02,606 --> 00:40:05,367
and the next-gen engine didn't handle polygons very well,

736
00:40:05,387 --> 00:40:09,269
we would have spent a long time reducing our poly counts.

737
00:40:09,669 --> 00:40:11,530
So we were very, very conservative with our numbers.

738
00:40:11,550 --> 00:40:12,970
Okay, cool. Thank you.

739
00:40:15,071 --> 00:40:15,371
Yes, sir.

740
00:40:15,711 --> 00:40:16,511
Hi. Hi.

741
00:40:16,551 --> 00:40:18,852
You mentioned being CPU-bound.

742
00:40:19,697 --> 00:40:22,418
And in the past, I've always had a lot of trouble

743
00:40:22,978 --> 00:40:24,559
figuring out that we were CPU bound.

744
00:40:24,619 --> 00:40:26,060
I always... it was kind of like,

745
00:40:26,140 --> 00:40:27,540
prove that it's not the GPU.

746
00:40:27,860 --> 00:40:28,801
That means it's the CPU.

747
00:40:28,841 --> 00:40:32,062
So I was wondering if you had any more details

748
00:40:32,122 --> 00:40:33,023
about what tools you used

749
00:40:33,043 --> 00:40:34,443
or how you figured out that you were CPU bound.

750
00:40:34,463 --> 00:40:35,984
So have you ever used Pix?

751
00:40:36,704 --> 00:40:36,844
No.

752
00:40:37,064 --> 00:40:40,026
Okay, so Pix is a profiling software for the Xbox.

753
00:40:40,626 --> 00:40:41,766
It's really, really amazing.

754
00:40:42,347 --> 00:40:44,147
You can kind of let Pix run in the background

755
00:40:44,187 --> 00:40:45,168
while you're running around in the game.

756
00:40:45,805 --> 00:40:50,308
And you can have these counters that actually live update and show you what's going on.

757
00:40:50,508 --> 00:40:53,670
And there's a counter in there that will show you what the frame rate is right now.

758
00:40:53,690 --> 00:40:58,333
So if you're, let's say you're walking around in your game, and that counter will tell you,

759
00:40:58,413 --> 00:41:04,357
okay, you're at, let's say, 18 milliseconds, 19 milliseconds.

760
00:41:04,377 --> 00:41:07,378
You're like, oh, I'm trying to run 60, so it's 16.6, that's what I've got to hit.

761
00:41:08,172 --> 00:41:14,436
And what you can do is you can write that number down and then you can do a full graphics capture of that exact same frame.

762
00:41:14,876 --> 00:41:18,999
And when you're doing a full graphics capture and it kind of loads up and you can see all your draw calls and all your textures,

763
00:41:19,579 --> 00:41:23,162
you can actually calculate and see if the GPU wasn't busy,

764
00:41:24,262 --> 00:41:28,405
that is the number that it would take to render on the GPU.

765
00:41:28,465 --> 00:41:30,746
And now that number could be 13 milliseconds.

766
00:41:31,702 --> 00:41:38,103
So you can actually get the delta between those two numbers and okay, well if the GPU says it only takes 13 milliseconds, another counter says it was 18,

767
00:41:38,984 --> 00:41:41,444
you know, okay, well we've got 5 milliseconds that's unaccounted for.

768
00:41:42,044 --> 00:41:44,965
And that's straight up because your CPU is way too busy.

769
00:41:44,985 --> 00:41:48,245
Thanks.

770
00:41:48,805 --> 00:41:51,746
Hi. You mentioned that you had the engine developed off-site, right?

771
00:41:51,986 --> 00:41:52,266
Yes, sir.

772
00:41:52,746 --> 00:42:00,348
So do you have, two questions actually, do you have programmers on-site, like at certain affinity, who develop the engine as well?

773
00:42:01,432 --> 00:42:05,813
We had programmers on site that would help us with things like we implemented dual wielding on our end

774
00:42:06,514 --> 00:42:10,015
We had programmers that actually would merge the builds from from

775
00:42:10,875 --> 00:42:15,616
Our partners to us and do all the testing and all the helping the technical artists with the testing

776
00:42:16,376 --> 00:42:21,138
Sometimes our programmers would help with features if ruffian couldn't get to a feature our programmers be like no no

777
00:42:21,158 --> 00:42:25,779
We really need that so they would dive in there and fix that feature as well our programmers

778
00:42:26,279 --> 00:42:28,399
Depending on our engagement do all kinds of work

779
00:42:29,380 --> 00:42:35,481
So whenever you've run into problems that you couldn't solve with the standard means,

780
00:42:35,681 --> 00:42:37,802
like reducing draw calls, merging meshes, whatever,

781
00:42:38,602 --> 00:42:41,783
do you also have programmers that take care of some feature works

782
00:42:41,883 --> 00:42:43,944
that are performance-optimizing in general?

783
00:42:43,964 --> 00:42:46,244
Yes. We have programmers that help us

784
00:42:47,605 --> 00:42:50,825
either if they'll do some heavy lifting on the graphics engine, if we can,

785
00:42:50,926 --> 00:42:54,707
because a lot of times we can't actually change the graphics engine.

786
00:42:55,243 --> 00:42:56,603
If we're working on a Call of Duty,

787
00:42:57,604 --> 00:42:59,804
Call of Duty is not going to let us change the graphics engine

788
00:43:00,164 --> 00:43:02,345
to fix a feature in a couple of multiplayer levels.

789
00:43:03,365 --> 00:43:06,306
But we do have programmers that will actually do a deep dive into the code

790
00:43:06,326 --> 00:43:08,947
and tell us exactly how it's rendering that feature

791
00:43:09,367 --> 00:43:11,988
and what we can do to get the most amount of perf back.

792
00:43:13,448 --> 00:43:15,849
Now some projects will actually, our programmers will go in there

793
00:43:15,869 --> 00:43:18,670
and actually change the engine if it's a little bit more open.

794
00:43:19,230 --> 00:43:20,810
Our partners really trust us a little bit more.

795
00:43:21,451 --> 00:43:21,671
Thank you.

796
00:43:28,778 --> 00:43:28,978
Hi.

797
00:43:29,478 --> 00:43:29,598
Hi.

798
00:43:30,198 --> 00:43:33,419
So I was just kind of curious how you got around the problem

799
00:43:33,439 --> 00:43:34,460
with split screen play.

800
00:43:34,640 --> 00:43:36,721
Because I know I love this game, and I'll

801
00:43:36,741 --> 00:43:38,161
be playing with friends and whatnot.

802
00:43:38,301 --> 00:43:39,622
And single player is great.

803
00:43:40,062 --> 00:43:42,843
And then you're like, yeah, come on, let's go jump in a big team

804
00:43:42,863 --> 00:43:44,503
battle and split screen.

805
00:43:44,703 --> 00:43:45,964
And then you're losing frames.

806
00:43:46,264 --> 00:43:47,264
Oh, split screen.

807
00:43:48,085 --> 00:43:49,245
Oh, you're one of the guys.

808
00:43:49,325 --> 00:43:49,885
It's your fault.

809
00:43:52,325 --> 00:43:53,105
Why?

810
00:43:53,125 --> 00:43:58,587
Okay, so for those who don't know, Halo, you can do 2-player, 3-player, 4-player split-screen.

811
00:44:00,288 --> 00:44:01,708
It's always been a popular feature.

812
00:44:02,889 --> 00:44:07,490
We got really lucky with this product and we were told that it was okay for split-screen to run at 30.

813
00:44:09,011 --> 00:44:11,772
Now, we actually do track our split-screen numbers as well.

814
00:44:12,152 --> 00:44:15,573
If you go back to the multiplayer slide with our numbers up there,

815
00:44:15,893 --> 00:44:19,035
you'll actually see on the right-hand side it says 2-player, 4-player split.

816
00:44:19,575 --> 00:44:21,396
So we playtest those numbers as well.

817
00:44:22,036 --> 00:44:23,537
So when we're actually in a playtest lab,

818
00:44:23,558 --> 00:44:25,759
we'll have a bunch of guys actually on regular computers,

819
00:44:26,500 --> 00:44:27,921
I'm sorry, regular monitors, you know,

820
00:44:27,961 --> 00:44:28,881
playing on a single player.

821
00:44:28,901 --> 00:44:30,622
And then we'll have four guys on a couch

822
00:44:30,742 --> 00:44:32,804
squeezed in playing on a quad screen.

823
00:44:33,364 --> 00:44:35,085
And that's where you go if you didn't, you know,

824
00:44:35,506 --> 00:44:36,887
those were the four guys that got there last.

825
00:44:36,947 --> 00:44:38,088
Because you got to squeeze on the couch

826
00:44:38,148 --> 00:44:39,188
and you got to play on a quad screen.

827
00:44:39,488 --> 00:44:41,010
You know, you never win on a quad screen.

828
00:44:42,679 --> 00:44:43,859
But yeah, we tested that every day.

829
00:44:44,500 --> 00:44:46,982
We had special throttles that we could actually go through.

830
00:44:47,702 --> 00:44:50,284
I can turn things on and off when it goes to two screen,

831
00:44:50,304 --> 00:44:51,305
three screen, four screen.

832
00:44:51,345 --> 00:44:55,207
So on quad screen, I would do things like turn off the grass,

833
00:44:55,688 --> 00:44:57,549
or I would turn off the fogging, or I would turn off

834
00:44:57,589 --> 00:44:58,249
certain features.

835
00:44:58,690 --> 00:45:00,551
And then I can actually profile that individually.

836
00:45:06,535 --> 00:45:07,396
Thank you very much, everybody.

837
00:45:07,416 --> 00:45:07,956
I appreciate it.

838
00:45:07,976 --> 00:45:08,276
Thank you.

