1
00:00:05,114 --> 00:00:07,996
Hello? Hey. All right.

2
00:00:07,996 --> 00:00:10,137
Uh, so good afternoon, everyone,

3
00:00:10,137 --> 00:00:14,520
and, uh, welcome to this GDC 2014 programming track session

4
00:00:14,520 --> 00:00:18,083
titled, uh, Deformable Snow in Batman Arkham Origins.

5
00:00:18,909 --> 00:00:21,911
So before we begin, let me quickly introduce myself.

6
00:00:21,911 --> 00:00:24,493
So my name is Colin Barry-Brisbois,

7
00:00:24,493 --> 00:00:28,895
and I was the lead rendering programmer on Arkham Origins.

8
00:00:28,895 --> 00:00:30,676
And in case you haven't played it,

9
00:00:30,676 --> 00:00:33,638
Arkham Origins is the third installment

10
00:00:33,638 --> 00:00:36,460
in the critically acclaimed Batman Arkham series,

11
00:00:36,460 --> 00:00:39,001
the fourth one that's coming up soon.

12
00:00:39,001 --> 00:00:42,583
But so the two previous titles were,

13
00:00:42,583 --> 00:00:45,545
so Asylum and City were created and developed

14
00:00:45,545 --> 00:00:48,066
by our sister studio in the UK, Rocksteady Games.

15
00:00:49,293 --> 00:00:51,535
So, just like the title says,

16
00:00:51,535 --> 00:00:54,838
well, this talk is basically about a novel,

17
00:00:54,838 --> 00:00:58,301
extremely fast, and low-memory technique

18
00:00:58,301 --> 00:01:00,442
for the rendering of surfaces covered

19
00:01:00,442 --> 00:01:02,744
with fallen deformable snow,

20
00:01:02,744 --> 00:01:05,727
basically to represent visually convincing

21
00:01:05,727 --> 00:01:08,009
and organic deformable snow surfaces

22
00:01:08,009 --> 00:01:11,592
that we developed for this game.

23
00:01:11,592 --> 00:01:13,033
So, here's a quick agenda for the talk.

24
00:01:13,033 --> 00:01:16,056
So first, I'll give a quick overview

25
00:01:16,056 --> 00:01:17,797
of the motivations behind.

26
00:01:18,055 --> 00:01:19,878
the deformable snow technique.

27
00:01:19,878 --> 00:01:23,563
And then I'll explain how the technique is novel

28
00:01:23,563 --> 00:01:26,707
in its approach of acquiring arbitrary deformation,

29
00:01:26,707 --> 00:01:28,930
as well as present all the details you need

30
00:01:28,930 --> 00:01:31,493
in case this is something you want to implement

31
00:01:31,493 --> 00:01:32,735
for your next game.

32
00:01:33,664 --> 00:01:40,712
And one thing to know is that while we originally designed this technique for previous gen,

33
00:01:40,712 --> 00:01:44,937
I'll also give additional detail on how the DirectX 11 approach we took with our friends

34
00:01:44,937 --> 00:01:50,283
at NVIDIA allowed us to bring this technique to the next level on PC and making it next

35
00:01:50,283 --> 00:01:52,366
gen ready.

36
00:01:53,209 --> 00:01:55,410
In the case you haven't played Arkham Origins,

37
00:01:55,410 --> 00:01:58,611
the game is basically a prequel to Arkham Asylum,

38
00:01:58,611 --> 00:02:03,333
where the main events of the story happen on Christmas Eve.

39
00:02:03,333 --> 00:02:06,654
And obviously, nothing says Christmas Eve like a snowstorm.

40
00:02:06,654 --> 00:02:08,095
And coming from Montreal, Canada,

41
00:02:08,095 --> 00:02:10,796
we definitely know what this means.

42
00:02:10,796 --> 00:02:15,038
So we kind of had no choice but to put a significant effort

43
00:02:15,038 --> 00:02:17,299
in making sure the visuals of snow

44
00:02:17,299 --> 00:02:20,120
were definitely on par with what we're used to back home.

45
00:02:20,599 --> 00:02:23,482
So in the end, we wanted to support a wide range of snow

46
00:02:23,482 --> 00:02:26,224
environments, from the light snow

47
00:02:26,224 --> 00:02:28,566
that you can see on this picture,

48
00:02:28,566 --> 00:02:32,450
to temporary yet heavy wind gusts and deformable snow

49
00:02:32,450 --> 00:02:33,190
surfaces.

50
00:02:34,660 --> 00:02:37,281
Now, from the previous two images,

51
00:02:37,281 --> 00:02:41,222
I'm sure you'll agree that most of these snowstorm effects

52
00:02:41,222 --> 00:02:44,964
can be covered by the usual, whether it's VFX, a fog,

53
00:02:44,964 --> 00:02:46,824
a sphere, or cylinder that follows the player.

54
00:02:46,824 --> 00:02:48,345
You know, the usual.

55
00:02:48,345 --> 00:02:52,006
But in the case of deformable snow surfaces,

56
00:02:52,006 --> 00:02:54,987
there's usually a visual discrepancy.

57
00:02:54,987 --> 00:03:00,489
So to fake deformable snow, people have been using decals.

58
00:03:00,489 --> 00:03:03,630
And it can do the job, but often it's just not enough.

59
00:03:04,401 --> 00:03:09,036
Even if they're properly lit with parallax mapping, they can look pretty repetitive.

60
00:03:09,608 --> 00:03:11,609
even if you use some kind of shading trickery,

61
00:03:11,609 --> 00:03:15,071
such as normal or diffuse randomization.

62
00:03:15,071 --> 00:03:18,393
And to kind of cover all cases, you kind of

63
00:03:18,393 --> 00:03:21,835
have to customize decals for every way a character can

64
00:03:21,835 --> 00:03:22,775
interact with a surface.

65
00:03:22,775 --> 00:03:26,377
You know, you'd have one for the feet, one for the hands.

66
00:03:26,377 --> 00:03:27,958
And that's kind of getting insane

67
00:03:27,958 --> 00:03:30,219
if you think about all the possibilities that

68
00:03:30,219 --> 00:03:31,980
can be there, which is why people usually

69
00:03:31,980 --> 00:03:33,540
stick to footsteps.

70
00:03:33,540 --> 00:03:36,602
Now, we wanted to come up with something a bit different,

71
00:03:36,602 --> 00:03:37,923
something that would capture.

72
00:03:38,543 --> 00:03:43,851
the organic nature of character movements, and at the same time, the dynamics of gameplay.

73
00:03:43,851 --> 00:03:49,519
So basically, we have three requirements for the technique to be interesting and, I guess, viable.

74
00:03:49,519 --> 00:03:52,964
So first, it must depict iconic visuals of deformable snow.

75
00:03:53,565 --> 00:04:00,070
then it must have represent, it can, it has to represent organic deformation from walking,

76
00:04:00,070 --> 00:04:03,833
falling, sliding, fighting, and more, so not just limited to footsteps.

77
00:04:03,833 --> 00:04:08,256
And we have a low memory usage and low performance cost requirement because we're making an open

78
00:04:08,256 --> 00:04:15,682
world game. And so what do I mean by iconic visuals of deformable snow? I mean identifiable

79
00:04:15,682 --> 00:04:20,465
and realistic visual deformation, just like for the footsteps on the image to the left,

80
00:04:20,465 --> 00:04:22,487
where feet are not all showing the same.

81
00:04:23,619 --> 00:04:30,686
If you look at the image clearly, you'll see that some footsteps there left trails depending on how fast the person was walking,

82
00:04:30,686 --> 00:04:36,453
if the foot was half up, half down, if the player stopped, looked around, started walking again,

83
00:04:36,453 --> 00:04:41,238
to the extreme extent of organic deformation, just like the image to the right.

84
00:04:41,878 --> 00:04:46,280
where, you know, it could be from throwing a thug to the ground,

85
00:04:46,280 --> 00:04:48,822
in our case, Batman running, then sliding,

86
00:04:48,822 --> 00:04:52,384
then running again with the cape brushing against the ground,

87
00:04:52,384 --> 00:04:54,385
and making a snow angel.

88
00:04:54,385 --> 00:04:58,947
And obviously, you can't do this all super efficiently and with high fidelity with decals.

89
00:05:00,106 --> 00:05:02,307
So, you know, we asked ourselves and said,

90
00:05:02,307 --> 00:05:05,289
so has anyone tried making deformable surfaces before?

91
00:05:05,289 --> 00:05:05,769
And it seems so.

92
00:05:05,769 --> 00:05:07,590
And some of the results in previous games

93
00:05:07,590 --> 00:05:11,493
are actually quite nice for what they're trying to achieve.

94
00:05:11,493 --> 00:05:14,735
This is especially true from Jean-Francois' talk

95
00:05:14,735 --> 00:05:17,416
on Assassin's Creed III, where the thickness of the snow

96
00:05:18,057 --> 00:05:20,598
also affects character animation.

97
00:05:20,598 --> 00:05:23,860
And in Journey, it's the sand that does that as well.

98
00:05:23,860 --> 00:05:26,942
So, and most of these approaches,

99
00:05:26,942 --> 00:05:30,745
they tend to modify and propagate deformation

100
00:05:30,745 --> 00:05:31,305
to a terrain.

101
00:05:32,035 --> 00:05:36,757
And in our case, we don't have that kind of information on a unified grid, per se, like a terrain.

102
00:05:36,757 --> 00:05:40,458
We mostly have, in our case, rooftops and streets.

103
00:05:40,458 --> 00:05:47,400
And so, while you could definitely raycast your way and figure out where you are in the world relative to the surface,

104
00:05:47,400 --> 00:05:49,300
we didn't want to add raycasts.

105
00:05:49,680 --> 00:05:51,822
And also, in our case,

106
00:05:51,822 --> 00:05:55,625
if you think about the organic part of the requirements,

107
00:05:55,625 --> 00:05:57,266
it's like, do you only raycast from feet?

108
00:05:57,266 --> 00:05:59,948
Obviously, no. So how do you represent raycasts

109
00:05:59,948 --> 00:06:01,029
for something like a snow angel?

110
00:06:01,029 --> 00:06:04,612
I guess you could use, you know, you could use thick raycasts,

111
00:06:04,612 --> 00:06:06,693
or you could use actual physics collisions

112
00:06:06,693 --> 00:06:09,055
and paint variable thickness and that sort of stuff.

113
00:06:09,055 --> 00:06:11,237
But it's starting to get a bit complicated,

114
00:06:11,237 --> 00:06:13,118
and I'm not sure it scales really well to...

115
00:06:13,118 --> 00:06:17,101
At some point in the game, you can end up with 18 characters on screen.

116
00:06:17,101 --> 00:06:17,281
So...

117
00:06:18,493 --> 00:06:23,656
And also to properly have deformables, so like in the images I've just shown,

118
00:06:23,656 --> 00:06:28,359
you know, it's more than just trails, you need very high and or variable triangle density.

119
00:06:28,359 --> 00:06:32,461
And obviously you can say that this is feasible for Dijkstra X11.

120
00:06:33,061 --> 00:06:35,603
with tessellation, which is what we did,

121
00:06:35,603 --> 00:06:38,205
but also the game shipped on PS3, 360, and Wii U,

122
00:06:38,205 --> 00:06:40,327
so we didn't really have that option.

123
00:06:40,327 --> 00:06:42,368
So, like I said, we needed some option

124
00:06:42,368 --> 00:06:44,010
that works great on console,

125
00:06:44,010 --> 00:06:45,250
that is really fast to compute,

126
00:06:45,250 --> 00:06:48,653
and that we could extend on PC for future hardware

127
00:06:48,653 --> 00:06:50,635
or future hardware.

128
00:06:50,635 --> 00:06:53,917
So instead, our approach is to generate

129
00:06:53,917 --> 00:06:57,320
these displacement-height maps at runtime.

130
00:06:57,320 --> 00:06:59,341
We're kind of relying on a cheap approach,

131
00:06:59,341 --> 00:07:00,963
which I'll explain in just a bit.

132
00:07:01,960 --> 00:07:06,142
We definitely went for something that falls into the tricks category,

133
00:07:06,142 --> 00:07:10,223
which I find personally really satisfying as a graphics programmer,

134
00:07:10,223 --> 00:07:13,944
rather than focusing on a technique that is 100% accurate

135
00:07:13,944 --> 00:07:15,465
or closer to ground truth.

136
00:07:15,465 --> 00:07:21,207
And also, it turns out that these height maps can be of low resolution.

137
00:07:21,207 --> 00:07:24,708
And the results will look nice, which is a plus,

138
00:07:24,708 --> 00:07:27,849
which again allows us to stay in that low memory footprint

139
00:07:27,849 --> 00:07:29,330
and keep it manageable.

140
00:07:29,985 --> 00:07:31,586
And so with these height maps,

141
00:07:31,586 --> 00:07:33,187
we can then use simple things,

142
00:07:33,187 --> 00:07:36,509
like three or four taps of relief mapping at runtime

143
00:07:36,509 --> 00:07:37,510
on 360, PS3, and Wii U,

144
00:07:37,510 --> 00:07:43,213
with no or with none or barely any noticeable, uh, textile swimming,

145
00:07:43,213 --> 00:07:45,694
because the camera, the third-person camera,

146
00:07:45,694 --> 00:07:49,977
never gets that low with respect to the floor.

147
00:07:49,977 --> 00:07:54,099
So as I said, our city has many rooftops and streets.

148
00:07:54,596 --> 00:07:57,138
We can, therefore, allocate and deallocate.

149
00:07:57,138 --> 00:07:58,419
So just a bit like the image there.

150
00:07:58,419 --> 00:08:01,662
So we can, therefore, allocate and deallocate

151
00:08:01,662 --> 00:08:04,224
these height maps on a per-need basis, you know,

152
00:08:04,224 --> 00:08:07,987
and only keep the ones we need based on occupancy,

153
00:08:07,987 --> 00:08:08,968
visibility, and size.

154
00:08:08,968 --> 00:08:12,090
And for our game, we also have the luxury

155
00:08:12,090 --> 00:08:13,952
that it's always snowing.

156
00:08:13,952 --> 00:08:16,414
So the player shouldn't be too offended

157
00:08:16,414 --> 00:08:18,976
if he flies around and snow surfaces

158
00:08:18,976 --> 00:08:22,258
that he previously saw or previously interacted with.

159
00:08:22,664 --> 00:08:25,005
are now back to their original min state.

160
00:08:25,005 --> 00:08:28,928
So this is basically what the displacement height map

161
00:08:28,928 --> 00:08:30,569
can look in the game.

162
00:08:30,569 --> 00:08:33,531
So this is basically just a trail I did

163
00:08:33,531 --> 00:08:35,472
walking around with Batman.

164
00:08:35,472 --> 00:08:37,633
You can see the trail from the feet,

165
00:08:37,633 --> 00:08:40,795
but you can also notice the cape brushing against the ground

166
00:08:40,795 --> 00:08:41,475
as I turn around.

167
00:08:41,475 --> 00:08:46,038
One thing to notice is that there is a gradient.

168
00:08:46,038 --> 00:08:49,901
So it definitely means that this is not binary,

169
00:08:49,901 --> 00:08:51,582
so we actually get varying height.

170
00:08:52,039 --> 00:08:54,583
during, uh, relief mapping.

171
00:08:54,583 --> 00:08:56,486
So here's the matching shading part,

172
00:08:56,486 --> 00:08:57,447
uh, shaded part.

173
00:08:57,447 --> 00:09:01,794
So the question is, how do we generate those height maps?

174
00:09:02,337 --> 00:09:03,898
And so basically, here's the trick.

175
00:09:03,898 --> 00:09:08,421
So all you have to do is render the snow-affecting actors

176
00:09:08,421 --> 00:09:11,122
or objects, such as characters, but also anything

177
00:09:11,122 --> 00:09:14,264
that can move on those surfaces, like interactable physics

178
00:09:14,264 --> 00:09:18,207
objects, for example, looking from under the surface using

179
00:09:18,207 --> 00:09:20,468
an ankle-high orthogonal frustum.

180
00:09:20,468 --> 00:09:25,151
So if you clear to black and render these objects in white,

181
00:09:25,151 --> 00:09:27,432
then filter and accumulate ping-pong style.

182
00:09:28,233 --> 00:09:33,357
Basically, anything contained inside that red frustum there will be part of the deformation.

183
00:09:33,357 --> 00:09:41,304
And one thing to note is that we use an orthogonal frustum so that we don't want any perspective distortion.

184
00:09:41,304 --> 00:09:47,550
And the frustum is basically contained inside the bounds of the deformable surface.

185
00:09:49,172 --> 00:09:53,396
So here's another view of the ankle-high arthrofrestum.

186
00:09:53,396 --> 00:09:57,499
We also added a scale and a vertical offset to the frestum

187
00:09:57,499 --> 00:09:59,001
so it can be tweaked on a per need basis,

188
00:09:59,001 --> 00:10:02,664
depending on if we don't have perfectly flat surfaces

189
00:10:02,664 --> 00:10:05,407
or if you just want to increase the range at which the camera

190
00:10:05,407 --> 00:10:07,408
is capturing.

191
00:10:07,408 --> 00:10:10,651
So here are some more in-game screenshots on the consoles.

192
00:10:12,668 --> 00:10:14,750
And, like I mentioned previously,

193
00:10:14,750 --> 00:10:18,693
since the deformation is not black and white,

194
00:10:18,693 --> 00:10:20,154
and definitely a grayscale value,

195
00:10:20,154 --> 00:10:24,597
a significant amount of detail

196
00:10:24,597 --> 00:10:26,879
is there to show the differences in movement

197
00:10:26,879 --> 00:10:28,921
with feet, again, being half up, half down.

198
00:10:28,921 --> 00:10:31,883
You can kind of notice this on the image.

199
00:10:31,883 --> 00:10:33,064
And you can also notice, like,

200
00:10:33,064 --> 00:10:35,946
places where the player was standing, rotated,

201
00:10:35,946 --> 00:10:37,708
standing on spot, that sort of stuff.

202
00:10:37,708 --> 00:10:39,549
So we definitely get that kind of variation.

203
00:10:40,630 --> 00:10:43,232
So here's another shot after a big fight.

204
00:10:43,232 --> 00:10:47,136
You can definitely notice how the snow was patted down by

205
00:10:47,136 --> 00:10:50,179
all the feet during the fight, but also following the shape

206
00:10:50,179 --> 00:10:54,243
where the thug to the left is lying on the ground.

207
00:10:54,243 --> 00:10:56,845
I mean, images are great, but let's see what it looks like

208
00:10:56,845 --> 00:10:57,366
at runtime.

209
00:11:11,954 --> 00:11:29,241
I've got multiple calls available.

210
00:11:29,241 --> 00:11:30,421
Sending them out in priority order.

211
00:11:30,421 --> 00:11:32,342
And again, as I mentioned, the technique wouldn't be complete

212
00:11:32,342 --> 00:11:33,402
if you weren't able to make snow angels.

213
00:11:33,402 --> 00:11:36,063
So there you go, some thugs making snow angels.

214
00:11:38,683 --> 00:11:41,884
Now, let's go a bit more into implementation detail.

215
00:11:41,884 --> 00:11:44,686
So if we take a look at the CPU side update loop.

216
00:11:44,686 --> 00:11:47,727
So for every active snow surface, we figure out if the

217
00:11:47,727 --> 00:11:52,129
surface affecting object, again, the character or other

218
00:11:52,129 --> 00:11:54,750
physicalized object, is on the surface.

219
00:11:54,750 --> 00:11:58,192
To do this, we have a quadtree lookup, again, because we're a

220
00:11:58,192 --> 00:12:01,754
city, rather than keeping an actor list for each surface.

221
00:12:01,754 --> 00:12:02,334
Kind of works.

222
00:12:03,978 --> 00:12:09,780
fast that way. And by active, I mean a surface that is active is basically a surface that has

223
00:12:09,780 --> 00:12:16,361
either thugs on it or Batman that falls into a certain distance and that has been registered,

224
00:12:16,361 --> 00:12:22,123
you know, to our manager. And we make sure to not have too many surfaces up close, but again,

225
00:12:22,123 --> 00:12:27,044
we have a two meg budget and with the low resolution of the, that's not too big of a deal.

226
00:12:28,137 --> 00:12:30,898
So we override material on parts.

227
00:12:30,898 --> 00:12:33,399
Again, we replace with a simple white material.

228
00:12:33,399 --> 00:12:35,680
We then render actors and process accumulate

229
00:12:35,680 --> 00:12:40,101
with the post-process that I'm just going to discuss in a bit.

230
00:12:40,101 --> 00:12:42,202
So about height map accumulation,

231
00:12:42,202 --> 00:12:43,483
actual surface rendering.

232
00:12:43,483 --> 00:12:45,523
So this is basically done in three stages.

233
00:12:45,523 --> 00:12:48,124
First stage, we take the result of that render

234
00:12:48,124 --> 00:12:49,125
and we apply a small blur.

235
00:12:49,125 --> 00:12:52,506
A simple four-tap bilinear Poisson disk is fast.

236
00:12:53,014 --> 00:12:55,035
because of the low resolution is good enough

237
00:12:55,035 --> 00:12:56,556
to have some nice gradients.

238
00:12:56,556 --> 00:12:58,197
We then add the filtered results

239
00:12:58,197 --> 00:12:59,858
to the existing height map.

240
00:12:59,858 --> 00:13:00,798
Simple as that, you know.

241
00:13:00,798 --> 00:13:03,039
And but another trick is,

242
00:13:03,039 --> 00:13:04,900
so for that second stage,

243
00:13:04,900 --> 00:13:08,202
you can also subtract a small value to the height map.

244
00:13:08,202 --> 00:13:10,963
This is how we slowly bring back the height map

245
00:13:10,963 --> 00:13:12,364
to its original min state.

246
00:13:12,364 --> 00:13:15,846
And again, to fake the fact that it's snowing outside.

247
00:13:15,846 --> 00:13:17,086
So we kind of get that for free.

248
00:13:17,086 --> 00:13:19,848
And then the third stage, which is shading.

249
00:13:19,848 --> 00:13:21,208
So I'll spend a bit more time on that.

250
00:13:22,087 --> 00:13:25,887
So, um, for perfor—performance purposes,

251
00:13:25,887 --> 00:13:28,828
we always have two materials on a snow surface,

252
00:13:28,828 --> 00:13:30,148
the non-deformed one

253
00:13:30,148 --> 00:13:32,069
and the one that actually applies a deformation.

254
00:13:32,069 --> 00:13:34,249
So as you probably expect,

255
00:13:34,249 --> 00:13:37,310
the non-deformed one is, uh, the material that—

256
00:13:37,310 --> 00:13:40,751
it—it just looks the same with deformation not active.

257
00:13:40,751 --> 00:13:43,632
So basically, uh, you know, no deformation,

258
00:13:43,632 --> 00:13:46,392
less textures to fetch, less math, cheaper.

259
00:13:46,392 --> 00:13:48,933
Um, and also matching materials

260
00:13:48,933 --> 00:13:51,693
means we can easily load out the deformation.

261
00:13:52,554 --> 00:13:56,416
Now, in the case of the second case, in the case of the deformable snow material,

262
00:13:56,416 --> 00:14:03,819
this material effectively blends two materials in the same shader using the height map.

263
00:14:03,819 --> 00:14:07,641
Now here's a closer view of this shading where you can see the blending between the two layers.

264
00:14:08,298 --> 00:14:11,040
We also add glitter, but only on the top layer,

265
00:14:11,040 --> 00:14:13,801
on the top layer because, well, everyone loves glitter.

266
00:14:13,801 --> 00:14:18,184
And for the transition between the surface,

267
00:14:18,184 --> 00:14:22,407
we also apply some kind of subsurface scattering color,

268
00:14:22,407 --> 00:14:24,708
which is based on sky color, nothing complicated,

269
00:14:24,708 --> 00:14:26,730
to kind of show better transition.

270
00:14:28,341 --> 00:14:33,924
And so in the case of the deformable snow material, I mentioned we blend between two materials.

271
00:14:33,924 --> 00:14:38,607
So for the diffuse, really simple, just lerp with the grayscale value from the height map.

272
00:14:38,607 --> 00:14:44,790
All textures are fetched with the relief mapped UVs, so we only compute the offset once.

273
00:14:44,790 --> 00:14:48,092
And then we use this offset to fetch all textures required.

274
00:14:49,651 --> 00:14:55,032
independently of whether they have local space UVs or world space UVs.

275
00:14:55,032 --> 00:14:58,453
Now for normals, we don't lerp between them.

276
00:14:58,453 --> 00:15:03,075
So instead, we blend them using reoriented normal mapping.

277
00:15:03,075 --> 00:15:07,236
And the reason we do this is because normals are not colors.

278
00:15:07,236 --> 00:15:10,597
And you simply just can't lerp normals like that,

279
00:15:10,597 --> 00:15:14,177
or apply some non-vector math sensitive operations,

280
00:15:14,177 --> 00:15:17,598
such as overlay, that people have been using.

281
00:15:19,167 --> 00:15:21,109
So basically, reoriented normal mapping

282
00:15:21,109 --> 00:15:23,531
uses an optimized quaternion-based approach

283
00:15:23,531 --> 00:15:25,953
to achieve this operation.

284
00:15:25,953 --> 00:15:29,216
And you think quaternions, you think expensive,

285
00:15:29,216 --> 00:15:31,798
but after optimization, it's actually quite cheap.

286
00:15:31,798 --> 00:15:35,261
And we've used this all over the game for detail normals, which

287
00:15:35,261 --> 00:15:36,382
makes a big visual difference.

288
00:15:36,382 --> 00:15:39,845
So here's the code you need to do this operation.

289
00:15:39,845 --> 00:15:40,505
Pretty simple.

290
00:15:40,505 --> 00:15:42,707
I don't want to get into the details too much,

291
00:15:42,707 --> 00:15:45,289
so make sure to check the references and the blog post.

292
00:15:46,715 --> 00:15:48,336
So, just some quick results.

293
00:15:48,336 --> 00:15:50,697
So, in the case, this is what you'd get

294
00:15:50,697 --> 00:15:52,498
if you had a base normal to the left

295
00:15:52,498 --> 00:15:55,120
and added with simple linear interpolation

296
00:15:55,120 --> 00:15:56,440
a detail normal on top of it.

297
00:15:57,412 --> 00:16:01,795
This is what you'd get with the all-time artist's favorite overlay

298
00:16:01,795 --> 00:16:02,856
that people like to use in Photoshop a lot.

299
00:16:02,856 --> 00:16:07,139
And this is what the results you'd get with reoriented normal mapping.

300
00:16:07,139 --> 00:16:09,821
You can notice on this technique, with this technique,

301
00:16:09,821 --> 00:16:11,862
how the normal looks properly,

302
00:16:11,862 --> 00:16:15,565
the base and the detail normal look properly combined,

303
00:16:15,565 --> 00:16:19,528
and how the detail fits right on top of the base normal.

304
00:16:19,528 --> 00:16:20,068
And again, uh...

305
00:16:20,748 --> 00:16:25,151
you know, generalizing here, but you should definitely check the blog post for comparisons

306
00:16:25,151 --> 00:16:32,175
with other techniques that are either faster or more expensive or more or less mathematically robust.

307
00:16:33,705 --> 00:16:39,209
Now, here's some bits and pieces of additional, or general info, I guess, about the technique.

308
00:16:39,209 --> 00:16:42,151
So, make sure your surface UV is aligned with the ortho frustum.

309
00:16:42,151 --> 00:16:43,973
This simplifies any lookups.

310
00:16:43,973 --> 00:16:46,474
It's pretty simple, you know, 0, 1 range.

311
00:16:46,474 --> 00:16:48,776
Simplifies heightmap to displacement lookup.

312
00:16:48,776 --> 00:16:52,539
And make sure to scale world space heightmap resolution.

313
00:16:53,099 --> 00:16:57,741
based on actual world space, and try to keep texels square.

314
00:16:57,741 --> 00:17:02,844
Again, we don't need high resolution, and also deformable snow looks better in low resolution.

315
00:17:02,844 --> 00:17:05,505
We tried increasing it, but you don't need that.

316
00:17:05,505 --> 00:17:10,488
You don't need that level of detail. And you also need to scale your relief mapping parameters.

317
00:17:11,678 --> 00:17:15,679
Um, also it's nice to process surfaces that are close,

318
00:17:15,679 --> 00:17:17,340
but that you haven't seen yet.

319
00:17:17,340 --> 00:17:20,600
You can actually use this as an element of gameplay.

320
00:17:20,600 --> 00:17:23,381
Uh, in our case, you can see paths taken by thugs

321
00:17:23,381 --> 00:17:25,782
before you actually encountered them.

322
00:17:25,782 --> 00:17:28,222
Um, we didn't end up doing proper visibility tests.

323
00:17:28,222 --> 00:17:29,623
Distance is good enough,

324
00:17:29,623 --> 00:17:32,243
combined with update over multiple frames,

325
00:17:32,243 --> 00:17:33,603
which is what we do.

326
00:17:33,603 --> 00:17:37,044
So we only render two surfaces, uh, per frame.

327
00:17:37,044 --> 00:17:40,185
This is tweakable, but it's good enough, uh,

328
00:17:40,185 --> 00:17:41,545
good enough for what we need.

329
00:17:42,146 --> 00:17:47,529
And also when a surface gets far, we swap the material back to the non-deformed default one,

330
00:17:47,529 --> 00:17:52,592
release the memory used by the surface so that other potential surfaces might use it.

331
00:17:52,592 --> 00:17:57,815
We don't really fragment because we keep all of these allocations in a pre-allocated memory trunk.

332
00:17:58,607 --> 00:18:03,108
And as I mentioned earlier, we've enhanced the results with tessellation.

333
00:18:03,108 --> 00:18:07,769
This has been a great collaboration between Warner Brothers and NVIDIA.

334
00:18:07,769 --> 00:18:15,331
So basically, this feature was developed with our good friend Evgeny Makarov at NVIDIA.

335
00:18:15,331 --> 00:18:16,731
And...

336
00:18:17,632 --> 00:18:20,253
different to the height, the color height map,

337
00:18:20,253 --> 00:18:24,514
we actually use accurate displacement based on depth.

338
00:18:24,514 --> 00:18:26,935
So we capture the height map basically like a Z-buffer,

339
00:18:26,935 --> 00:18:30,537
and we, the latest version has two channels,

340
00:18:30,537 --> 00:18:32,217
so we have a minimum height field

341
00:18:32,217 --> 00:18:34,778
and the projected displacement.

342
00:18:34,778 --> 00:18:37,639
Having those allows for additive results,

343
00:18:37,639 --> 00:18:39,720
which I'll show an image of what it looks like,

344
00:18:39,720 --> 00:18:43,141
and allows for basically any kind of deformable surface,

345
00:18:43,141 --> 00:18:44,802
such as a snowbank.

346
00:18:44,802 --> 00:18:46,763
Um, yeah.

347
00:18:48,485 --> 00:18:51,309
So here's what it basically looks like from the side.

348
00:18:51,309 --> 00:18:53,071
So you have your orthogonal capture frustum,

349
00:18:53,071 --> 00:18:55,695
your minimum height field in green,

350
00:18:55,695 --> 00:18:57,798
your projected displacement in blue,

351
00:18:57,798 --> 00:19:01,303
and the final surface that is displaced in darker blue.

352
00:19:04,076 --> 00:19:10,298
So, I mentioned that the tessellated version adds detailed displacement that is actually calculated from the normal map,

353
00:19:10,298 --> 00:19:13,778
which is applied globally to the snow surface.

354
00:19:13,778 --> 00:19:19,200
So, this is something you don't get from the relief map, and it kind of allows us to have these...

355
00:19:19,200 --> 00:19:24,061
So, the floor surfaces are described with two normals, the macro-normal and the micro-normal.

356
00:19:24,061 --> 00:19:28,182
So, this is additional waves in the surface using the macro-normal.

357
00:19:28,479 --> 00:19:30,639
So this is what you would get without tessellation.

358
00:19:30,639 --> 00:19:33,541
So you don't get any macro deformation, pretty flat.

359
00:19:33,541 --> 00:19:38,823
And with tessellation, you can notice additional waves

360
00:19:38,823 --> 00:19:41,084
that kind of break the uniformity of the surface.

361
00:19:41,084 --> 00:19:43,505
So we like this a lot.

362
00:19:43,505 --> 00:19:47,806
We have a runtime approach to we do adaptive, sorry,

363
00:19:47,806 --> 00:19:50,087
dicing of snow meshes, which is similar to what

364
00:19:50,087 --> 00:19:52,628
was presented on Monday in the Dark Text course

365
00:19:52,628 --> 00:19:54,189
by Andrei Tatarinoff.

366
00:19:54,189 --> 00:19:55,630
So I would definitely check this out.

367
00:19:56,265 --> 00:19:59,588
But moving to real geometry has definitely some advantage.

368
00:19:59,588 --> 00:20:01,129
Works with dynamic shadows.

369
00:20:01,129 --> 00:20:03,951
You know, shadows actually follow the surface

370
00:20:03,951 --> 00:20:05,913
and shift with the deformation.

371
00:20:05,913 --> 00:20:07,494
We get self-shadowing, self-shading,

372
00:20:07,494 --> 00:20:08,135
that sort of stuff.

373
00:20:08,135 --> 00:20:11,777
And ambient occlusion also comes in and fills in the trails

374
00:20:11,777 --> 00:20:13,519
or where the snow is.

375
00:20:13,519 --> 00:20:17,182
So that's another benefit of moving to real tessellation.

376
00:20:17,182 --> 00:20:20,704
And we keep the same height map resolution as on consoles,

377
00:20:20,704 --> 00:20:23,687
again, because it's a really low frequency effect.

378
00:20:25,048 --> 00:20:27,749
So here's some of the results, which with HBO+,

379
00:20:27,749 --> 00:20:31,111
you can see definitely the macro waves

380
00:20:31,111 --> 00:20:33,212
on the upper part of the image,

381
00:20:33,212 --> 00:20:37,473
and how the HBAO adds a ton of volume in the final result.

382
00:20:38,677 --> 00:20:42,097
Now, with regards to performance, we, on consoles,

383
00:20:42,097 --> 00:20:47,399
we try to keep it under one millisecond of GPU updates.

384
00:20:47,399 --> 00:20:49,559
Since we update the deformable snow surfaces

385
00:20:49,559 --> 00:20:52,040
over multiple frames, we can kind of control that.

386
00:20:52,040 --> 00:20:55,821
Again, we have a small memory footprint of two megs.

387
00:20:55,821 --> 00:20:59,581
Again, because we're using low-resolution height maps,

388
00:20:59,581 --> 00:21:02,922
and because we allocate and deallocate on the fly.

389
00:21:02,922 --> 00:21:05,543
So that's why we can have that low memory footprint.

390
00:21:08,122 --> 00:21:11,006
Some issues with the technique, of course.

391
00:21:11,006 --> 00:21:14,810
So, obviously, deformation with the relief map approach

392
00:21:14,810 --> 00:21:18,735
will never look as great as actual tessellation.

393
00:21:18,735 --> 00:21:21,358
So I guess we could replace that with parallax occlusion mapping.

394
00:21:21,358 --> 00:21:22,499
That's an option.

395
00:21:22,499 --> 00:21:23,440
And also, we don't have.

396
00:21:24,365 --> 00:21:31,574
that AO in the height map, so I guess we could derive some parametric AO from the height map.

397
00:21:31,574 --> 00:21:36,040
I believe there's a talk from Killzone that talks about that in the previous years.

398
00:21:36,040 --> 00:21:38,984
And the tessellated approach, well...

399
00:21:39,419 --> 00:21:42,101
So when artists were working on the game,

400
00:21:42,101 --> 00:21:44,022
it kind of came in late,

401
00:21:44,022 --> 00:21:46,744
and displacement was not really taken into account.

402
00:21:46,744 --> 00:21:48,425
You know, so we had issues with, like,

403
00:21:48,425 --> 00:21:51,507
pre-pass actors, open edges, that sort of stuff.

404
00:21:51,507 --> 00:21:56,450
So some meshes couldn't use tessellation.

405
00:21:56,450 --> 00:22:01,854
But we added that second channel in the tessellation stage,

406
00:22:01,854 --> 00:22:04,055
which allowed us to fix most of these issues

407
00:22:04,055 --> 00:22:05,817
with minimal artist interaction.

408
00:22:05,817 --> 00:22:08,458
So future endeavors?

409
00:22:09,498 --> 00:22:12,339
Well, I guess you could save the height maps and reload them.

410
00:22:12,339 --> 00:22:13,400
That'd be cool.

411
00:22:13,400 --> 00:22:19,003
You could also use this for other things, such as sand, mud,

412
00:22:19,003 --> 00:22:20,124
that sort of stuff.

413
00:22:20,124 --> 00:22:23,025
We didn't need that, again, because it was always snowing.

414
00:22:23,025 --> 00:22:25,227
So we could replenish the height maps.

415
00:22:26,038 --> 00:22:29,720
So in summary, I presented a fast and low memory footprint

416
00:22:29,720 --> 00:22:33,121
technique to render deformable snow surfaces that

417
00:22:33,121 --> 00:22:35,022
adds a really nice level of interaction

418
00:22:35,022 --> 00:22:37,063
between players and the world, and depicts

419
00:22:37,063 --> 00:22:40,764
iconic and organic visuals of deformable snow.

420
00:22:40,764 --> 00:22:44,525
And it's also a good testation case for your DirectX 11 game

421
00:22:44,525 --> 00:22:47,307
with minimal editing and art tweaks.

422
00:22:49,016 --> 00:22:51,779
So obviously there is no I in team.

423
00:22:51,779 --> 00:22:54,262
And so I would like to thank all of the following people

424
00:22:54,262 --> 00:22:56,485
who've helped in some way, shape, or form

425
00:22:56,485 --> 00:22:58,528
in making this happen.

426
00:22:58,528 --> 00:23:01,151
And that's all I have, so I'll be taking your questions.

427
00:23:01,151 --> 00:23:01,791
Thank you.

428
00:23:13,330 --> 00:23:18,095
Hey, so this technique seems to work really well on flat terrain.

429
00:23:18,095 --> 00:23:21,779
Have you tried it on arbitrary geometry, like organic terrain?

430
00:23:21,779 --> 00:23:27,566
Yeah, so on consoles, obviously, because we use the colored height map,

431
00:23:27,566 --> 00:23:30,790
we have it on some snow banks. It doesn't look as nice.

432
00:23:30,790 --> 00:23:34,093
You kind of get some deformation, but again, because of the limited...

433
00:23:35,094 --> 00:23:37,736
you know, only three taps or four taps of relief map,

434
00:23:37,736 --> 00:23:39,578
you don't get that really nice cutoff

435
00:23:39,578 --> 00:23:41,239
that you would get with tessellation.

436
00:23:41,239 --> 00:23:46,483
So if I had to recommend some, so on PC high end,

437
00:23:46,483 --> 00:23:49,866
you actually get the full, like the snow banks

438
00:23:49,866 --> 00:23:52,067
kind of fall apart as you go through them.

439
00:23:52,067 --> 00:23:54,970
So I would recommend using the depth-based approach

440
00:23:54,970 --> 00:23:57,992
rather than the colored approach.

441
00:23:57,992 --> 00:23:58,272
Thank you.

442
00:24:03,887 --> 00:24:05,362
All right. Thank you.

