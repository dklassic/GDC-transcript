1
00:00:05,530 --> 00:00:10,776
Alright, uh, hello everyone. Welcome to the science of off-roading. My name is Ed Pereira. I'm a

2
00:00:10,816 --> 00:00:15,162
programmer at Naughty Dog. During this talk we'll be going, uh, bouncing between the high and

3
00:00:15,202 --> 00:00:20,589
low level topics as we face, uh, going, uh, as we go through the set of challenges we faced

4
00:00:20,809 --> 00:00:23,893
while developing the car that Drake drives around Madagascar in Uncharted 4.

5
00:00:28,081 --> 00:00:29,922
Let me start with some of the goals we had in mind

6
00:00:29,942 --> 00:00:31,684
when we set out to work on the 4x4.

7
00:00:32,204 --> 00:00:34,626
At its core, we felt it needed to be fun to drive

8
00:00:34,666 --> 00:00:35,827
for as many people as possible.

9
00:00:36,448 --> 00:00:37,769
Uncharted 4 is an adventure game

10
00:00:38,229 --> 00:00:40,111
that we felt that anyone should be able to pick up and enjoy,

11
00:00:40,171 --> 00:00:42,272
and since the 4x4 is a critical part of the story,

12
00:00:42,693 --> 00:00:44,414
we needed to make sure everyone enjoys driving it.

13
00:00:45,155 --> 00:00:46,996
Secondly, we wanted a sense of realism

14
00:00:47,076 --> 00:00:48,738
to keep the player grounded in Drake's adventure.

15
00:00:49,598 --> 00:00:51,560
Finally, we needed to make sure whatever we designed

16
00:00:51,600 --> 00:00:53,201
would work on the rockier, muddy terrain

17
00:00:53,702 --> 00:00:55,563
found when driving around the mountains of Madagascar.

18
00:00:57,035 --> 00:00:58,516
To accomplish these goals, we have to figure out

19
00:00:58,556 --> 00:00:59,676
what kind of simulation we wanted.

20
00:01:00,656 --> 00:01:01,836
When making a vehicle simulation,

21
00:01:01,896 --> 00:01:03,077
you kind of have to figure out

22
00:01:03,217 --> 00:01:04,417
where on the spectrum you want to fall.

23
00:01:05,417 --> 00:01:06,438
You can choose the real side

24
00:01:06,598 --> 00:01:07,758
with a game like Gran Turismo.

25
00:01:08,418 --> 00:01:10,879
The tagline is literally the real driving simulator.

26
00:01:11,639 --> 00:01:12,239
In games like this,

27
00:01:12,459 --> 00:01:14,639
you can have a very realistic tire grip simulation.

28
00:01:15,180 --> 00:01:17,260
Maybe the rubber wears down and the tire loses friction.

29
00:01:17,760 --> 00:01:19,461
Your motor can be complex with details

30
00:01:19,481 --> 00:01:21,221
like how much power is generated

31
00:01:21,301 --> 00:01:22,301
when each cylinder fires.

32
00:01:23,221 --> 00:01:25,122
The shape of the chassis can change airflow.

33
00:01:26,755 --> 00:01:28,536
giving you different handling and efficiency.

34
00:01:29,717 --> 00:01:31,698
On the other end, you have games like Super Mario Kart,

35
00:01:32,099 --> 00:01:33,740
where simple fun is much more important.

36
00:01:34,620 --> 00:01:36,041
There are aspects of racing introduced,

37
00:01:36,141 --> 00:01:37,582
but they are largely game mechanics

38
00:01:37,622 --> 00:01:38,523
rather than a simulation.

39
00:01:39,223 --> 00:01:40,384
The best example is drifting,

40
00:01:40,444 --> 00:01:41,604
where you end up hopping around

41
00:01:41,645 --> 00:01:42,645
so you don't take a penalty

42
00:01:42,685 --> 00:01:44,106
and play a canned spinning out animation.

43
00:01:45,087 --> 00:01:47,728
Another aspect is the fairly simple motor

44
00:01:48,409 --> 00:01:49,609
with the ad mechanics of boosts,

45
00:01:49,930 --> 00:01:50,870
like when you use a mushroom

46
00:01:50,990 --> 00:01:52,891
or rev the engine just right at the start of a race.

47
00:01:53,772 --> 00:01:54,552
So where did we end up with the 4x4?

48
00:01:56,317 --> 00:01:57,217
We ended up somewhere in the middle.

49
00:01:57,538 --> 00:01:59,158
In my opinion, when you're dealing with an environment

50
00:01:59,178 --> 00:02:01,399
that's going for realism, it's actually easier

51
00:02:01,439 --> 00:02:03,119
to run a simulation on the more real side.

52
00:02:03,620 --> 00:02:05,460
If you try to model it as simple as possible,

53
00:02:05,920 --> 00:02:07,721
the complexities of realistic environment

54
00:02:07,781 --> 00:02:09,221
require you to add several hacks

55
00:02:09,801 --> 00:02:10,962
to get the simulation to look right.

56
00:02:11,782 --> 00:02:12,942
With a more realistic simulation,

57
00:02:13,103 --> 00:02:14,583
you can throw really varied terrain at it

58
00:02:14,723 --> 00:02:15,603
and it should remain stable.

59
00:02:16,324 --> 00:02:18,464
You might still need to tweak some of the parameters

60
00:02:18,484 --> 00:02:20,465
to make it feel good, but you won't need

61
00:02:20,485 --> 00:02:22,385
to fundamentally change the underlying physical model.

62
00:02:23,786 --> 00:02:25,546
I'm gonna be going over the physical model in three parts.

63
00:02:26,500 --> 00:02:28,021
We're gonna be talking about collision detection,

64
00:02:28,601 --> 00:02:29,841
so that's the chassis and the wheels

65
00:02:29,881 --> 00:02:31,042
and how they respond to collision.

66
00:02:32,622 --> 00:02:34,243
We'll quickly go over motor simulation

67
00:02:34,263 --> 00:02:35,223
and how it generates torque.

68
00:02:36,283 --> 00:02:37,444
Then we'll talk about how that torque

69
00:02:37,464 --> 00:02:38,264
is applied to the wheels

70
00:02:38,464 --> 00:02:40,345
and how that generates forces applied to the vehicle.

71
00:02:41,725 --> 00:02:43,706
So let's go over how the Drakemobile stands on its feet.

72
00:02:44,126 --> 00:02:46,387
Stated simply, the vehicle is built out of rigid bodies

73
00:02:46,747 --> 00:02:47,967
held together using constraints.

74
00:02:49,027 --> 00:02:50,828
We start off with a single rigid body for the chassis,

75
00:02:51,868 --> 00:02:52,929
a rigid body for each wheel,

76
00:02:54,109 --> 00:02:55,529
and constraints that keep everything together.

77
00:02:56,362 --> 00:02:58,923
We use Havok as the solver for these constraints,

78
00:02:59,423 --> 00:03:01,243
but provide many of our own inputs.

79
00:03:01,964 --> 00:03:03,184
We turned off collision on the wheels

80
00:03:03,264 --> 00:03:05,005
in favor of Havok's point constraint system.

81
00:03:05,565 --> 00:03:06,945
The system allows us to pass a point

82
00:03:07,066 --> 00:03:08,426
that we want the tires to stick to,

83
00:03:09,146 --> 00:03:10,667
and it also generates a normal force

84
00:03:10,847 --> 00:03:14,408
based on the motion and mass of the chassis and the wheels.

85
00:03:15,028 --> 00:03:16,729
Later I'll go over how this normal force

86
00:03:17,129 --> 00:03:18,150
is used to compute friction.

87
00:03:19,635 --> 00:03:22,997
In order to find the point of contact, we use a ray cast for each wheel from what we call the

88
00:03:23,037 --> 00:03:28,319
hard point to the furthest point the suspension can extend. The hard point is the point where

89
00:03:28,339 --> 00:03:32,721
the suspension is attached to the chassis and provides a nice reference point for the math we'll

90
00:03:32,741 --> 00:03:36,663
be doing on the wheels. I turn off the tire display so you can get a better look at the ray

91
00:03:36,703 --> 00:03:43,166
cast. In this image, the yellow sphere at the bottom is the detected collision point. So let's

92
00:03:43,206 --> 00:03:45,467
take a look at how that all works driving on flat ground.

93
00:03:51,458 --> 00:03:56,421
So this is a great start. We can make some turns, start driving. I'm a huge fan of getting

94
00:03:56,461 --> 00:04:00,162
something up and running as fast as possible first and add features as they go. So this is

95
00:04:00,202 --> 00:04:07,885
flat ground. How does it handle on our test track of rough terrain? That's obviously not so

96
00:04:07,925 --> 00:04:12,267
good. We seem to have hit an invisible wall. I checked the level file, the designer

97
00:04:12,287 --> 00:04:16,609
definitely didn't put one there. So we need to break down the issues. First and foremost, the

98
00:04:16,649 --> 00:04:19,510
unpredictable collision response here is a big problem.

99
00:04:21,485 --> 00:04:23,647
Second, collision response doesn't happen fast enough.

100
00:04:24,948 --> 00:04:26,649
In this screenshot, you can clearly see

101
00:04:26,689 --> 00:04:29,311
that the wheels penetrating the bumps

102
00:04:29,511 --> 00:04:31,413
and the depth definitely does not meet our standards.

103
00:04:32,614 --> 00:04:33,554
So how do we fix these issues?

104
00:04:34,916 --> 00:04:37,578
First thing, it's obvious that a ray cast just won't cut it.

105
00:04:38,078 --> 00:04:40,059
We consider options like moving the ray cast forward

106
00:04:40,099 --> 00:04:40,800
if the car's moving,

107
00:04:41,240 --> 00:04:42,481
but it just didn't seem accurate enough.

108
00:04:42,982 --> 00:04:45,343
Instead, we replaced the ray cast with a shape cast,

109
00:04:46,184 --> 00:04:48,306
using the tire dimensions as a cylinder for our shape.

110
00:04:49,157 --> 00:04:51,879
Another tweak was to cast the ray from above the hard point,

111
00:04:52,059 --> 00:04:53,921
in this case, well above the hard point.

112
00:04:54,561 --> 00:04:55,962
There are cases where the nose of the vehicle

113
00:04:56,002 --> 00:04:58,304
would spin a frame already in collision and get stuck.

114
00:04:58,804 --> 00:05:01,086
Moving the start of the cast up made sure that never happens.

115
00:05:01,987 --> 00:05:03,528
This screenshot shows the first collision point

116
00:05:03,548 --> 00:05:04,709
detected by the shape cast.

117
00:05:05,109 --> 00:05:06,750
On this round bump, there are actually

118
00:05:06,850 --> 00:05:08,431
several points returned by the shape cast.

119
00:05:08,511 --> 00:05:10,933
As a first step, we take the closest return point,

120
00:05:11,313 --> 00:05:12,214
which looks fairly accurate.

121
00:05:15,381 --> 00:05:16,182
This is a vast improvement.

122
00:05:16,522 --> 00:05:18,303
We're getting much less visible penetration,

123
00:05:18,423 --> 00:05:19,504
but it's not quite there yet.

124
00:05:21,046 --> 00:05:22,807
As you can see, under certain circumstances,

125
00:05:22,987 --> 00:05:25,489
it can be very unstable response where

126
00:05:25,509 --> 00:05:26,330
you see a lot of jittering.

127
00:05:26,930 --> 00:05:28,352
This is caused by the fact that we're only

128
00:05:28,512 --> 00:05:29,633
taking the first collision point.

129
00:05:29,813 --> 00:05:31,914
So it's ping-ponging between which

130
00:05:31,975 --> 00:05:34,977
plank to put the tire on top of.

131
00:05:36,098 --> 00:05:37,759
We now need to take more collision points

132
00:05:37,839 --> 00:05:39,340
and pass them to the point constraint system.

133
00:05:39,981 --> 00:05:41,042
This allows us to have this.

134
00:05:42,698 --> 00:05:44,800
This allows us to have the tire sit on multiple planks,

135
00:05:45,280 --> 00:05:46,461
which stabilizes the response.

136
00:05:47,041 --> 00:05:49,143
We limited the number of points we used to three per wheel

137
00:05:49,223 --> 00:05:50,183
since we felt more than that

138
00:05:50,283 --> 00:05:51,264
would have diminishing returns.

139
00:05:54,325 --> 00:05:54,926
So this looks pretty good.

140
00:05:55,806 --> 00:05:56,966
One thing we discovered we don't like

141
00:05:57,146 --> 00:05:58,707
is how rough the collision response is

142
00:05:58,747 --> 00:06:02,068
to surfaces whose normal is not aligned

143
00:06:02,088 --> 00:06:03,229
with the suspension direction.

144
00:06:03,949 --> 00:06:05,029
You can see from the start of this

145
00:06:05,109 --> 00:06:06,250
that hitting that first bump,

146
00:06:06,570 --> 00:06:08,150
you completely lose all momentum.

147
00:06:08,851 --> 00:06:10,471
This is an implementation detail of Havoc

148
00:06:10,491 --> 00:06:11,412
that we wanted to work around,

149
00:06:11,572 --> 00:06:14,293
so we fake it and tell Havoc that all normals

150
00:06:14,393 --> 00:06:15,613
are in the direction of the suspension.

151
00:06:22,536 --> 00:06:23,096
Smooth as butter.

152
00:06:24,008 --> 00:06:25,849
We really liked how player-favoring the response is here.

153
00:06:26,369 --> 00:06:27,829
If you run into any situations like this,

154
00:06:28,029 --> 00:06:29,790
we know the 4x4 will keep momentum nicely

155
00:06:29,870 --> 00:06:30,910
and not frustrate the player.

156
00:06:31,490 --> 00:06:33,070
This is obviously quite unrealistic,

157
00:06:33,510 --> 00:06:34,670
but this is one of the many times

158
00:06:34,711 --> 00:06:35,711
we leaned away from realism

159
00:06:35,831 --> 00:06:37,791
to make for a more fun driving experience.

160
00:06:39,151 --> 00:06:40,432
There is an unfortunate side effect, though,

161
00:06:40,592 --> 00:06:41,652
in that the wheels do not respond

162
00:06:41,692 --> 00:06:42,792
perfectly to collision anymore.

163
00:06:43,452 --> 00:06:45,713
You can kind of see the wheels penetrating the bumps now.

164
00:06:46,313 --> 00:06:47,713
Our solution is to re-implement

165
00:06:47,853 --> 00:06:49,213
wheel collision response ourselves.

166
00:06:49,693 --> 00:06:50,894
Using the highest point from before,

167
00:06:51,314 --> 00:06:53,094
we place the wheels so that it tangents the point.

168
00:06:55,255 --> 00:06:57,697
The first thing we need to do here is figure out

169
00:06:57,837 --> 00:06:59,219
where P1 and P2 are.

170
00:06:59,739 --> 00:07:01,281
These represent two potential points

171
00:07:01,461 --> 00:07:02,882
furthest penetrating into geometry.

172
00:07:03,623 --> 00:07:05,765
Because the wheel could be at an angle,

173
00:07:06,266 --> 00:07:08,328
we have to consider either side as the deepest point.

174
00:07:09,689 --> 00:07:11,171
To compute the points, we take the wheel's

175
00:07:11,211 --> 00:07:12,632
orientation vectors up and right

176
00:07:12,832 --> 00:07:14,434
and offset from the center point.

177
00:07:15,995 --> 00:07:17,517
Now we need to see which point is deepest.

178
00:07:17,897 --> 00:07:19,038
We do this using dot products.

179
00:07:19,807 --> 00:07:22,388
There are two vectors, one from C to P1

180
00:07:22,648 --> 00:07:23,709
and one from C to P2.

181
00:07:24,349 --> 00:07:26,850
If we dot these with N, our surface's normal vector,

182
00:07:27,070 --> 00:07:29,572
we produce two scalars, S1 and S2.

183
00:07:31,193 --> 00:07:33,394
S1 and S2 represent scalar distances,

184
00:07:33,614 --> 00:07:36,195
meaning how far CP1 and CP2 travel

185
00:07:36,295 --> 00:07:37,096
in the direction of N.

186
00:07:37,956 --> 00:07:38,997
You can see these scalars

187
00:07:39,077 --> 00:07:40,377
in their geometric sense in this image.

188
00:07:41,078 --> 00:07:42,459
Whichever of these scalars is larger

189
00:07:42,599 --> 00:07:44,560
determines which of the associated points is deeper.

190
00:07:45,220 --> 00:07:46,661
In this example, P1 is deeper.

191
00:07:47,587 --> 00:07:49,948
Now we can't use S1 directly since that's the distance

192
00:07:49,968 --> 00:07:51,129
from the center to the corner.

193
00:07:52,189 --> 00:07:53,990
We have to compute another scalar, S3.

194
00:07:54,650 --> 00:07:56,871
That represents the distance from the contact point

195
00:07:57,091 --> 00:07:59,212
to the corner along the contact normal.

196
00:08:00,472 --> 00:08:03,013
We do this by taking the vector from the contact point

197
00:08:03,593 --> 00:08:05,614
to CP1 and dotting that with N.

198
00:08:06,274 --> 00:08:08,135
This resultant scalar is the final distance

199
00:08:08,175 --> 00:08:09,916
we have to move the wheel by in order to have

200
00:08:09,956 --> 00:08:11,576
the wheel's corner rest on the surface.

201
00:08:13,085 --> 00:08:15,066
Now obviously if we just separate along the contact

202
00:08:15,106 --> 00:08:16,906
normal, the wheel will be pulled out of alignment

203
00:08:16,986 --> 00:08:17,667
with the suspension.

204
00:08:18,447 --> 00:08:20,808
So the next step is projecting the separation vector

205
00:08:21,028 --> 00:08:23,408
onto the suspension direction and moving along that vector

206
00:08:23,428 --> 00:08:23,588
now.

207
00:08:24,189 --> 00:08:26,129
Let's take a look at how that math works out.

208
00:08:30,270 --> 00:08:31,951
So responding to low penetration distances,

209
00:08:32,051 --> 00:08:34,652
we have a stable and correct looking collision response,

210
00:08:35,272 --> 00:08:36,352
which is unfortunate for Drake.

211
00:08:38,280 --> 00:08:40,144
He's probably asking if we can go around at this point.

212
00:08:40,785 --> 00:08:42,910
Unfortunately, you quickly run into an issue

213
00:08:43,010 --> 00:08:45,275
when you have to move the wheel so far

214
00:08:45,335 --> 00:08:46,397
along the suspension direction

215
00:08:46,758 --> 00:08:48,001
that it goes past the hard point

216
00:08:48,081 --> 00:08:49,343
and into the four by four's chassis.

217
00:08:52,269 --> 00:08:53,550
To avoid clipping the wheel well,

218
00:08:53,990 --> 00:08:55,791
we limit the distance the wheel can travel upwards

219
00:08:55,811 --> 00:08:57,272
so that it never passes the hard point.

220
00:08:57,893 --> 00:08:59,394
To counteract the fact that you would now see

221
00:08:59,414 --> 00:09:00,614
the wheel penetrating the ground,

222
00:09:01,115 --> 00:09:03,276
we apply an upward force on the hard point

223
00:09:03,396 --> 00:09:04,457
and it nets us two benefits.

224
00:09:05,077 --> 00:09:06,758
First, it will get the 4x4 out of collision.

225
00:09:07,599 --> 00:09:09,260
Secondly, when you slam it to the ground hard

226
00:09:09,280 --> 00:09:11,461
it creates a nice jerk that the player can feel.

227
00:09:12,302 --> 00:09:14,704
Side note, this force is then delivered to Nate.

228
00:09:16,064 --> 00:09:16,365
Sorry, Nate.

229
00:09:20,973 --> 00:09:22,575
By the way, if you're interested in how our character

230
00:09:22,615 --> 00:09:24,036
animations are affected by physics,

231
00:09:24,216 --> 00:09:25,457
and you didn't catch it this morning,

232
00:09:25,517 --> 00:09:28,599
you can check out Mikhail's talk in the vault

233
00:09:28,659 --> 00:09:29,160
after the show.

234
00:09:30,801 --> 00:09:32,202
So with the wheels colliding properly,

235
00:09:32,422 --> 00:09:33,263
we ran into another issue.

236
00:09:38,086 --> 00:09:40,508
As you can see, we need to tweak what we consider

237
00:09:40,588 --> 00:09:41,629
valid points of contact.

238
00:09:42,149 --> 00:09:43,871
Because our cast will detect any collision,

239
00:09:44,071 --> 00:09:46,233
these walls count as points to place the tires on top of.

240
00:09:47,045 --> 00:09:49,627
The limit we made was based on the angle of the surface the

241
00:09:49,647 --> 00:09:52,509
wheel probe detected. Taking the angle between the vertical

242
00:09:52,549 --> 00:09:55,631
vector and the normal of the surface, we ignore surfaces

243
00:09:55,651 --> 00:09:58,773
whose angle exceeds a designer tuned maximum angle. So what

244
00:09:58,793 --> 00:10:06,157
does that look like? With the wall collision safely ignored,

245
00:10:06,317 --> 00:10:09,640
the 4x4 bumps the wall and continues on. And now another

246
00:10:09,660 --> 00:10:14,483
case. Okay, apparently sometimes you do want to drive on the

247
00:10:14,503 --> 00:10:14,703
wall.

248
00:10:16,897 --> 00:10:19,219
To solve this, we gave design the ability

249
00:10:19,239 --> 00:10:20,660
to turn off the angle check in script.

250
00:10:22,842 --> 00:10:24,904
Last issue regarding collision and chassis movement

251
00:10:24,984 --> 00:10:26,065
is when you drive off of a cliff

252
00:10:26,185 --> 00:10:28,046
into a place that is still a drivable space.

253
00:10:28,947 --> 00:10:31,429
We wanted to avoid flipping onto the 4x4 side or roof

254
00:10:31,589 --> 00:10:33,471
as this would disrupt the player's driving experience.

255
00:10:34,372 --> 00:10:36,513
The quickest solution is to counter the jeep's rotation

256
00:10:36,694 --> 00:10:38,635
using forces based on what direction

257
00:10:38,695 --> 00:10:39,896
the vehicle is currently rotating.

258
00:10:40,316 --> 00:10:41,017
Let's see what that looks like.

259
00:10:45,912 --> 00:10:47,352
So as you can see, it's a little unrealistic,

260
00:10:47,792 --> 00:10:49,833
but it's very important to keep the player happily driving

261
00:10:49,873 --> 00:10:50,133
around.

262
00:10:50,993 --> 00:10:53,174
In fact, for fun, we added some air control

263
00:10:53,194 --> 00:10:55,375
where we'd apply forces to the 4x4 if it's in the air,

264
00:10:55,595 --> 00:10:57,055
and you're pushing on a direction of the steering

265
00:10:57,095 --> 00:10:59,456
stick, constantly keeping the player feeling

266
00:10:59,496 --> 00:11:00,517
like they have some control.

267
00:11:02,337 --> 00:11:04,878
So now that we have collision detection settled,

268
00:11:05,178 --> 00:11:07,359
let's talk about powering the beast with our motor simulation.

269
00:11:09,004 --> 00:11:10,446
We decided to go with a manual transmission.

270
00:11:11,007 --> 00:11:12,849
It ends up being a simpler simulation

271
00:11:12,889 --> 00:11:14,411
when you don't have to deal with the torque converter.

272
00:11:14,951 --> 00:11:16,794
Who wants to deal with viscosity anyway, am I right?

273
00:11:18,456 --> 00:11:20,518
Simulating a motor requires a differential equation

274
00:11:20,678 --> 00:11:21,980
because the speed at which you're traveling

275
00:11:22,080 --> 00:11:23,542
feeds back into the motor's power curve.

276
00:11:24,103 --> 00:11:26,225
We implement this by breaking the problem into two parts,

277
00:11:26,606 --> 00:11:27,587
the motor and the wheels.

278
00:11:29,072 --> 00:11:31,733
So in this chart, we're looking at how much power and torque

279
00:11:31,773 --> 00:11:33,314
are generated by any given RPM.

280
00:11:33,954 --> 00:11:36,416
This curve is tuned by designers using the x and y coordinates

281
00:11:36,536 --> 00:11:38,917
based on the size of the space and how responsive they

282
00:11:38,937 --> 00:11:39,858
want the 4x4 to be.

283
00:11:40,438 --> 00:11:41,919
Basically, the way this curve works

284
00:11:42,640 --> 00:11:45,081
is your power grows as your motor spins faster and faster,

285
00:11:45,301 --> 00:11:47,042
up to a peak power, at which point

286
00:11:47,062 --> 00:11:49,043
you start losing efficiency and the power starts dropping.

287
00:11:50,823 --> 00:11:54,107
In the simulation, the motor starts at a minimum idle RPM

288
00:11:54,527 --> 00:11:55,888
and how much gas pedal is pressed

289
00:11:55,928 --> 00:11:58,371
applies a similar percentage of torque

290
00:11:58,491 --> 00:11:59,932
generated at the current motor RPM.

291
00:12:00,673 --> 00:12:02,915
It's a big simplification of how gas is applied

292
00:12:02,935 --> 00:12:04,717
to a real motor, but it's very effective.

293
00:12:06,758 --> 00:12:08,020
So the second part, as I mentioned,

294
00:12:08,060 --> 00:12:09,481
is how torque is generated from the motor

295
00:12:09,821 --> 00:12:10,722
and transfers to the wheels.

296
00:12:11,283 --> 00:12:12,204
To understand how that works,

297
00:12:12,444 --> 00:12:14,606
I need to mention another aspect of our transmission.

298
00:12:16,234 --> 00:12:16,995
This is a differential.

299
00:12:17,516 --> 00:12:19,298
This allows the attached wheels to rotate

300
00:12:19,338 --> 00:12:20,319
at different rates.

301
00:12:21,040 --> 00:12:23,442
So if you slam on the gas and one of the wheels

302
00:12:23,502 --> 00:12:24,423
is stuck and locked in place,

303
00:12:24,904 --> 00:12:26,105
the other wheel will spin freely

304
00:12:26,265 --> 00:12:27,687
and you won't flood or stall the engine.

305
00:12:28,428 --> 00:12:29,749
During development, we took a look

306
00:12:29,769 --> 00:12:31,151
at a lot of different elements of a real car

307
00:12:31,291 --> 00:12:32,653
and considered which ones to simulate.

308
00:12:33,333 --> 00:12:34,595
Looking at the benefit of differentials,

309
00:12:34,875 --> 00:12:36,437
this seemed like a good element to include.

310
00:12:37,503 --> 00:12:39,624
The primary reason we wanted this is to improve handling.

311
00:12:40,204 --> 00:12:42,005
When the wheels are free to turn at different rates,

312
00:12:42,185 --> 00:12:43,826
you get more grip on the outside tires.

313
00:12:44,406 --> 00:12:46,547
To understand this, imagine one side of the car

314
00:12:46,627 --> 00:12:48,788
carving one circle, the yellow circle here,

315
00:12:48,828 --> 00:12:50,789
and another side carving another circle, the blue circle.

316
00:12:51,449 --> 00:12:54,210
These two circles obviously have different circumferences.

317
00:12:54,911 --> 00:12:56,851
So if the wheels were fixed to turn at the same rate,

318
00:12:57,372 --> 00:12:59,092
there would necessarily be sliding

319
00:12:59,233 --> 00:13:00,993
because the wheels are traveling different distances.

320
00:13:02,660 --> 00:13:05,561
The secondary benefit is we get big amounts of wheel spin,

321
00:13:05,661 --> 00:13:08,242
so our FX and foreground team have plenty of opportunity

322
00:13:08,282 --> 00:13:09,522
to send mud and rocks flying.

323
00:13:10,322 --> 00:13:12,423
Now with a differential, torque applied to the wheel,

324
00:13:13,003 --> 00:13:14,823
torque, now with a differential,

325
00:13:15,183 --> 00:13:17,624
torque applied to it will be divided evenly

326
00:13:17,884 --> 00:13:18,844
between the wheels attached.

327
00:13:20,705 --> 00:13:22,385
So assuming a forward and rear differential

328
00:13:22,545 --> 00:13:23,846
and a differential between these two,

329
00:13:24,266 --> 00:13:26,146
we now have a system where torque is divided evenly

330
00:13:26,246 --> 00:13:27,187
among all four wheels.

331
00:13:29,035 --> 00:13:30,736
Since each wheel is allowed to sprint freely,

332
00:13:30,976 --> 00:13:32,697
we then calculate the next frame's RPM

333
00:13:32,917 --> 00:13:33,978
using the fastest spinning wheel

334
00:13:34,378 --> 00:13:36,279
because in a manual transmission with the clutch applied,

335
00:13:36,619 --> 00:13:38,040
the wheels and the motor are directly linked.

336
00:13:40,041 --> 00:13:41,122
With the motor generating torque,

337
00:13:41,322 --> 00:13:42,483
I'm gonna talk about how that torque

338
00:13:42,543 --> 00:13:43,883
ends up putting a force on the vehicle

339
00:13:43,943 --> 00:13:44,864
to get it moving forward.

340
00:13:46,495 --> 00:13:47,256
So let's talk about friction.

341
00:13:47,936 --> 00:13:49,457
We have power transferred from the motors to the wheel,

342
00:13:49,717 --> 00:13:51,218
now we need to transfer the power

343
00:13:51,258 --> 00:13:52,198
from the wheel to the ground,

344
00:13:52,498 --> 00:13:53,699
so the 4x4 moves forward.

345
00:13:54,459 --> 00:13:56,680
Friction dictates how much force can be applied

346
00:13:56,700 --> 00:13:58,781
to before there is slip, and how much slip there is.

347
00:13:59,402 --> 00:14:01,002
Since friction is between two surfaces,

348
00:14:01,443 --> 00:14:03,023
we have to define the friction for the tires

349
00:14:03,063 --> 00:14:04,684
and the friction for the geometric surfaces

350
00:14:04,764 --> 00:14:05,825
the tires will be driving on.

351
00:14:07,065 --> 00:14:08,346
In order to accomplish this second part,

352
00:14:08,686 --> 00:14:10,787
we break the environment up into several surface types,

353
00:14:11,388 --> 00:14:12,628
each with a tuned amount of friction.

354
00:14:13,717 --> 00:14:15,639
The designers and artists worked together

355
00:14:15,659 --> 00:14:17,080
to lay out all the friction types

356
00:14:17,200 --> 00:14:19,301
to make for a fun and interesting driving experience.

357
00:14:19,982 --> 00:14:21,603
Let's take a look at how that surface is blocked out.

358
00:14:22,964 --> 00:14:24,725
We have our grass here with very high friction

359
00:14:24,865 --> 00:14:26,146
indicated by the yellow in this picture.

360
00:14:27,407 --> 00:14:28,628
A muddy transition point here

361
00:14:28,928 --> 00:14:30,509
with what would be an in-between amount of friction.

362
00:14:31,550 --> 00:14:33,551
Then a very little friction in a muddy riverbed.

363
00:14:34,332 --> 00:14:36,153
As you can see, it's really broken up very roughly.

364
00:14:36,313 --> 00:14:38,114
We didn't go into fine details

365
00:14:38,155 --> 00:14:39,616
of little bits of higher friction here and there,

366
00:14:40,096 --> 00:14:41,697
and it still feels really good to drive across.

367
00:14:43,286 --> 00:14:46,430
We spent a lot of time tuning friction on some of these surface types to make these

368
00:14:46,530 --> 00:14:48,573
money climbs challenging while still being fun.

369
00:14:49,454 --> 00:14:53,400
You really have to keep throwing at a plate tester with fresh eyes to see how difficult

370
00:14:53,420 --> 00:14:53,780
they find it.

371
00:15:01,477 --> 00:15:02,497
So let's get into some of the details

372
00:15:02,537 --> 00:15:03,338
about friction and torque.

373
00:15:03,898 --> 00:15:05,698
The first thing we need is the normal force N

374
00:15:05,798 --> 00:15:06,538
applied to the tire.

375
00:15:07,198 --> 00:15:09,619
This we get back out of havoc for each wheel

376
00:15:09,859 --> 00:15:11,259
once we've applied the point of contact.

377
00:15:11,779 --> 00:15:13,279
We'll let the solver give us this information

378
00:15:13,700 --> 00:15:14,660
because the pressure on the wheel

379
00:15:14,720 --> 00:15:16,860
is dependent on the downward momentum of the chassis

380
00:15:16,960 --> 00:15:19,061
and the forces generated by the suspension.

381
00:15:19,841 --> 00:15:21,341
So doing this is needlessly gritty.

382
00:15:22,341 --> 00:15:23,321
For the coefficient of friction,

383
00:15:23,561 --> 00:15:24,882
we multiply the friction of the tire

384
00:15:24,902 --> 00:15:26,642
with the friction of the surface it's in contact with.

385
00:15:27,339 --> 00:15:29,300
This coefficient is then multiplied with the force

386
00:15:29,380 --> 00:15:31,982
returned from Havoc to generate a maximum friction force.

387
00:15:33,883 --> 00:15:36,324
Torque is then the rotational force applied to the wheel.

388
00:15:36,985 --> 00:15:38,726
With the friction resisting this rotation,

389
00:15:38,906 --> 00:15:41,147
the opposite force pushes the wheel forward.

390
00:15:42,628 --> 00:15:44,609
Our maximum friction force is split into two directions.

391
00:15:45,249 --> 00:15:46,910
We take the torque applied to the wheel,

392
00:15:47,070 --> 00:15:47,851
divide it by the radius,

393
00:15:47,931 --> 00:15:49,592
and that gives us a linear forward force.

394
00:15:50,572 --> 00:15:52,834
Our lateral force is a little bit more complicated.

395
00:15:53,675 --> 00:15:55,395
We create a lateral slip coefficient

396
00:15:55,695 --> 00:15:56,856
based on the lateral velocity

397
00:15:56,896 --> 00:15:58,076
divided by the forward velocity.

398
00:15:58,737 --> 00:16:00,097
Multiplying this by the normal force

399
00:16:00,297 --> 00:16:00,937
returned from Havok,

400
00:16:01,077 --> 00:16:03,118
we get a nice simulation where you regain control

401
00:16:03,198 --> 00:16:04,278
in a reasonable amount of time

402
00:16:04,659 --> 00:16:05,779
no matter how fast you're sliding.

403
00:16:07,320 --> 00:16:08,260
Combining the two directions,

404
00:16:08,360 --> 00:16:09,900
we get a total force vector shown here.

405
00:16:10,461 --> 00:16:12,001
The length of this vector must be below

406
00:16:12,021 --> 00:16:13,922
the maximum friction force we calculated earlier.

407
00:16:14,702 --> 00:16:16,363
Dividing the two gives us a scalar

408
00:16:16,383 --> 00:16:17,623
to apply to the input vectors

409
00:16:17,803 --> 00:16:19,824
so that our total force falls below the maximum.

410
00:16:21,363 --> 00:16:23,465
We apply the scalar to both directions

411
00:16:23,665 --> 00:16:26,127
so the resultant total force falls below the max force.

412
00:16:28,169 --> 00:16:30,170
So lateral friction force is applied

413
00:16:30,210 --> 00:16:32,051
to the lateral velocity to slow the vehicle down

414
00:16:32,071 --> 00:16:33,112
when sliding side to side.

415
00:16:33,813 --> 00:16:34,693
In the forward direction,

416
00:16:34,914 --> 00:16:37,015
we apply up to the maximum friction to the wheel.

417
00:16:37,796 --> 00:16:39,897
The leftover difference is then applied back to the wheel

418
00:16:39,957 --> 00:16:41,318
as extra rotational velocity

419
00:16:41,619 --> 00:16:42,980
because the tire is slipping in this case.

420
00:16:44,432 --> 00:16:45,532
In the other direction, however,

421
00:16:46,033 --> 00:16:47,234
if the torque applied is less

422
00:16:47,254 --> 00:16:48,374
than the maximum friction force,

423
00:16:48,815 --> 00:16:50,476
we apply an opposite braking force

424
00:16:51,016 --> 00:16:52,237
on the angle of velocity of the wheel,

425
00:16:52,377 --> 00:16:53,558
so it slows to meet the friction

426
00:16:53,959 --> 00:16:55,420
if the wheel is over-spinning and slipping.

427
00:16:57,384 --> 00:16:59,085
One final request from design was, of course,

428
00:16:59,125 --> 00:17:00,086
being able to power slide.

429
00:17:00,746 --> 00:17:02,447
Tossing around some ideas, most importantly,

430
00:17:02,527 --> 00:17:03,808
we wanted to make it easy to use.

431
00:17:04,408 --> 00:17:07,710
We decided to implement a big fake with a hint of realism.

432
00:17:08,311 --> 00:17:09,531
When you hit the handbrake button,

433
00:17:09,631 --> 00:17:11,432
we simply reduce the friction on the back tires.

434
00:17:11,973 --> 00:17:12,953
This lets the rear kick out,

435
00:17:13,073 --> 00:17:14,434
but in a way we can easily tune.

436
00:17:16,115 --> 00:17:17,816
So that concludes the driving and physical aspects

437
00:17:17,856 --> 00:17:18,517
of the 4x4.

438
00:17:18,897 --> 00:17:19,977
Design would give me a layout

439
00:17:20,158 --> 00:17:21,618
that they wanted the 4x4 to drive on,

440
00:17:21,899 --> 00:17:23,740
and we'd work together to get the vehicle

441
00:17:23,840 --> 00:17:25,301
to feel and look right for the space.

442
00:17:26,338 --> 00:17:29,580
Now with that working nicely, what do you do if a designer comes to you and says, hey,

443
00:17:29,600 --> 00:17:31,862
it would be great if the car drove itself.

444
00:17:33,783 --> 00:17:34,523
Okay then.

445
00:17:34,543 --> 00:17:35,924
That sounds like fun.

446
00:17:36,805 --> 00:17:41,087
So the reason for this tech is so that NPCs like Sullivan or Elena can hop into the driver's

447
00:17:41,107 --> 00:17:44,149
seat and drive to Drake if he got too far from the 4x4.

448
00:17:45,530 --> 00:17:47,751
Thankfully some of the AI work is already done for me.

449
00:17:48,412 --> 00:17:52,374
I have to tweak some things but the NavMesh search code used by NPCs can be converted

450
00:17:52,394 --> 00:17:55,656
over pretty easily so we have static paths generated almost immediately.

451
00:17:57,990 --> 00:18:01,935
The interesting bit comes when we talk about how to make a car on four wheels drive towards

452
00:18:01,955 --> 00:18:02,916
the next nav waypoint.

453
00:18:03,457 --> 00:18:04,198
Questions to answer.

454
00:18:04,699 --> 00:18:06,221
How do you actually turn to face the point?

455
00:18:07,122 --> 00:18:08,143
How fast should you be traveling?

456
00:18:08,604 --> 00:18:10,206
What if the next waypoint is behind you?

457
00:18:10,566 --> 00:18:11,528
How do you even know it's behind you?

458
00:18:12,168 --> 00:18:15,092
How do you know if there's a physical object in front of you that you need to drive around?

459
00:18:15,513 --> 00:18:16,194
How do you drive around it?

460
00:18:17,885 --> 00:18:18,646
Some basic principles.

461
00:18:19,346 --> 00:18:20,727
Cars have a defined turn radius,

462
00:18:20,967 --> 00:18:21,868
like we talked about earlier.

463
00:18:22,428 --> 00:18:24,450
This is the radius of the smallest circular turn

464
00:18:24,570 --> 00:18:25,811
the vehicle is capable of making.

465
00:18:26,551 --> 00:18:28,372
The size of the turning circle changes

466
00:18:28,433 --> 00:18:29,513
based on how fast you're traveling,

467
00:18:29,994 --> 00:18:32,355
because the wheels won't necessarily grip the ground

468
00:18:32,395 --> 00:18:33,656
hard enough to make the given turn.

469
00:18:34,377 --> 00:18:36,698
The circle also expands the further the steering wheel

470
00:18:36,818 --> 00:18:37,739
gets from the furthest edge.

471
00:18:38,419 --> 00:18:40,060
Understanding these aspects of your physical model

472
00:18:40,241 --> 00:18:41,642
lets you make decisions like how far

473
00:18:41,662 --> 00:18:43,403
do I have to turn the wheel to make the target.

474
00:18:45,135 --> 00:18:46,916
Let's go over how to calculate the turn radius

475
00:18:47,016 --> 00:18:48,356
based on the physical dimensions of the car.

476
00:18:49,076 --> 00:18:51,697
I based my math on the Ackermann steering geometry.

477
00:18:52,257 --> 00:18:54,157
In this image, theta is the maximum angle

478
00:18:54,417 --> 00:18:57,598
the wheels can rotate left to right.

479
00:18:59,718 --> 00:19:01,359
W is the width of the 4x4 and L is length.

480
00:19:02,139 --> 00:19:03,279
Putting it all together gives us

481
00:19:03,299 --> 00:19:04,359
the radius of the turning circle.

482
00:19:05,079 --> 00:19:07,020
I'm uncertain if this is the perfect calculation

483
00:19:07,060 --> 00:19:09,440
of a tightest turning circle the 4x4 could drive along,

484
00:19:09,860 --> 00:19:11,101
but it was close enough of an estimate

485
00:19:11,121 --> 00:19:12,641
that it worked well for our AI logic.

486
00:19:14,457 --> 00:19:18,320
Okay so now we're able to calculate if we can make a turn towards the waypoint. We

487
00:19:18,340 --> 00:19:21,002
obviously know the location of these circles since they are attached to the car.

488
00:19:21,422 --> 00:19:24,705
Assuming they're infinite cylinders, we use 2D algebra to figure out if the

489
00:19:24,725 --> 00:19:30,350
waypoint is inside of either circle. If the waypoint is inside of either circle, we

490
00:19:30,390 --> 00:19:30,670
turn uh...

491
00:19:32,783 --> 00:19:34,944
We need to put the 4x4 into reverse,

492
00:19:35,565 --> 00:19:36,745
turn the wheel in the opposite direction,

493
00:19:36,845 --> 00:19:39,387
so now our nose will turn towards the target.

494
00:19:40,007 --> 00:19:41,729
Once our nose is facing close enough to the target

495
00:19:41,809 --> 00:19:44,130
that the target is outside of the turning circle,

496
00:19:44,450 --> 00:19:46,291
we can switch back to drive and complete the turn.

497
00:19:48,032 --> 00:19:50,354
This logic also applies to whether the target is behind us.

498
00:19:50,814 --> 00:19:52,715
Reverse until we make the turn and continue on.

499
00:19:54,577 --> 00:19:56,618
Now let's take a closer look at what following a path

500
00:19:56,718 --> 00:19:57,378
ends up looking like.

501
00:20:03,462 --> 00:20:03,622
Nice.

502
00:20:05,263 --> 00:20:07,004
Next up, let's talk about obstacle avoidance.

503
00:20:07,644 --> 00:20:10,946
Our NavMesh search gives us a really good path to follow

504
00:20:10,986 --> 00:20:13,128
to avoid things like buildings or big boulders.

505
00:20:13,648 --> 00:20:15,429
But what do we do if another car is in the way

506
00:20:15,509 --> 00:20:17,210
and that car does not affect the NavMesh?

507
00:20:18,871 --> 00:20:21,133
To detect this, we need several ray casts,

508
00:20:21,473 --> 00:20:22,734
one per corner, forward and back,

509
00:20:23,074 --> 00:20:24,335
whose length is based on the speed

510
00:20:24,355 --> 00:20:25,375
the 4x4 is driving.

511
00:20:26,156 --> 00:20:28,277
When one of the casts detects something,

512
00:20:28,638 --> 00:20:30,679
we simply push the steering wheel in the opposite direction

513
00:20:30,779 --> 00:20:32,800
based on how close the ray cast detected collision.

514
00:20:34,067 --> 00:20:36,049
We never forget that we eventually want to steer

515
00:20:36,089 --> 00:20:38,331
towards the target again, but the probe tells us

516
00:20:38,511 --> 00:20:39,692
when we're clear to start that turn.

517
00:20:40,453 --> 00:20:42,595
The direction the probe casts is tunable.

518
00:20:43,756 --> 00:20:45,478
In these videos, the probes are directly

519
00:20:45,498 --> 00:20:47,720
in front and behind, but depending on the environment

520
00:20:47,740 --> 00:20:49,402
you're dealing with, you might want these probes

521
00:20:49,442 --> 00:20:51,484
to shoot out at an angle to give more consideration

522
00:20:51,524 --> 00:20:52,365
to what's around the vehicle.

523
00:20:54,401 --> 00:20:56,723
For simplicity, we assume that design has not caused

524
00:20:56,763 --> 00:20:59,125
some kind of traffic jam that we could never steer around.

525
00:20:59,625 --> 00:21:01,447
This obviously wouldn't work in a city full of cars,

526
00:21:01,927 --> 00:21:03,368
but driving around the hills of Madagascar,

527
00:21:03,509 --> 00:21:04,710
this is an effective simplification.

528
00:21:06,979 --> 00:21:09,160
A small feature requested by design was spline following.

529
00:21:09,340 --> 00:21:11,162
For this, we turn off NavMesh search

530
00:21:11,302 --> 00:21:12,823
and simply get a point on the spline curve

531
00:21:13,183 --> 00:21:16,785
some distance away from us based on how fast we're traveling.

532
00:21:17,585 --> 00:21:19,126
Obstacle avoidance is still on in this case,

533
00:21:19,747 --> 00:21:21,027
since other objects can get in the way.

534
00:21:21,648 --> 00:21:22,968
We want to steer around the obstacle

535
00:21:23,149 --> 00:21:24,910
and continue to use the nearest point on the spline

536
00:21:24,950 --> 00:21:25,450
as our target.

537
00:21:26,571 --> 00:21:28,532
So with navigation, steering, and obstacle avoidance

538
00:21:28,572 --> 00:21:30,313
put together, you've got a pretty good system

539
00:21:30,333 --> 00:21:31,353
for getting around most spaces.

540
00:21:32,825 --> 00:21:35,427
So to wrap up, first we went over collision detection.

541
00:21:35,987 --> 00:21:37,148
Using rigid bodies, constraints,

542
00:21:37,208 --> 00:21:38,989
and our own implementation of wheel response,

543
00:21:39,169 --> 00:21:40,870
we created a vehicle that moves around

544
00:21:41,090 --> 00:21:41,950
rough terrain smoothly.

545
00:21:43,191 --> 00:21:45,452
Our motor, with a mix of realism and some gloss over details

546
00:21:45,852 --> 00:21:47,873
we created a nice balance between a tunable,

547
00:21:48,094 --> 00:21:49,795
realistic motor and avoiding the grittiness

548
00:21:49,915 --> 00:21:50,735
of a deeper simulation.

549
00:21:52,256 --> 00:21:54,337
Our tire friction simulation allows us to actually

550
00:21:54,397 --> 00:21:56,858
drive the vehicle and make turns in an easy to use way

551
00:21:56,978 --> 00:21:58,039
that most players can grasp.

552
00:21:59,572 --> 00:22:00,873
We took new requirements from design,

553
00:22:00,993 --> 00:22:02,334
where we had to add AI to the car,

554
00:22:02,534 --> 00:22:04,535
and brought over navigation from existing systems.

555
00:22:05,796 --> 00:22:07,057
And we layered on steering behaviors,

556
00:22:07,117 --> 00:22:09,538
so the 4x4 can follow the generated navigation paths.

557
00:22:11,010 --> 00:22:14,273
I want to give a quick thanks to some of the folks in Naughty Dog who helped put the 4x4 together.

558
00:22:14,513 --> 00:22:17,236
It actually took quite a few people to put all the bells and whistles on it.

559
00:22:17,696 --> 00:22:18,757
So these are just a few of the names.

560
00:22:19,518 --> 00:22:21,960
Inkyo made the beautiful visual model that we all came to love.

561
00:22:22,540 --> 00:22:23,781
Kristof helped with some of the rigging.

562
00:22:24,182 --> 00:22:26,664
Rob is an audio designer and Jonathan is an audio programmer.

563
00:22:27,004 --> 00:22:29,767
And together they worked to get things like the motor purring just right.

564
00:22:30,707 --> 00:22:32,949
Jaros and Travis are programmers who helped with the simulation.

565
00:22:33,550 --> 00:22:36,112
Kurt and James are designers who helped on tuning and level layout.

566
00:22:37,460 --> 00:22:39,320
So that's the 4x4, the development is really

567
00:22:39,340 --> 00:22:40,101
about problem solving.

568
00:22:40,541 --> 00:22:42,742
We took a very design-oriented approach to development

569
00:22:42,802 --> 00:22:44,262
and always focus changes on the needs

570
00:22:44,543 --> 00:22:45,343
for making the game fun.

571
00:22:45,763 --> 00:22:46,283
Thanks for listening.

572
00:22:54,747 --> 00:22:56,067
So we have about five minutes for questions,

573
00:22:56,107 --> 00:22:56,827
if anybody has anything.

574
00:23:04,010 --> 00:23:05,551
You mentioned about a rigid body.

575
00:23:06,051 --> 00:23:07,112
If you want to come to the microphone, please.

576
00:23:12,013 --> 00:23:18,064
uh uh sorry sorry uh you mentioned about the rigid body I imagine you are not using unity

577
00:23:18,104 --> 00:23:23,173
right? No we we use Havoc but it's our own game engine. Okay thank you.

578
00:23:28,544 --> 00:23:34,029
Um, so I had a similar simulator for driving, and I found an issue with this.

579
00:23:34,570 --> 00:23:39,134
You glossed over this real quick when you're falling down and you need to take

580
00:23:39,174 --> 00:23:43,077
that wheel and push it up so it doesn't go through the ground using force.

581
00:23:43,617 --> 00:23:46,200
Now you don't want to do that instantly, or you just suddenly pop up.

582
00:23:46,980 --> 00:23:48,421
So you need to add force over time.

583
00:23:48,601 --> 00:23:50,921
But if you're falling really far, that's a lot of force

584
00:23:50,961 --> 00:23:53,682
and it would bounce my car up fairly high.

585
00:23:54,142 --> 00:23:55,602
I'm wondering how you guys handled that.

586
00:23:55,982 --> 00:23:57,783
So, because it's a lot of force

587
00:23:57,823 --> 00:23:59,023
in a very short amount of time

588
00:23:59,043 --> 00:24:02,164
because that collision when you just hit is very quick.

589
00:24:02,904 --> 00:24:03,684
So to like move that,

590
00:24:03,704 --> 00:24:05,144
I was wondering how you guys handle that.

591
00:24:05,464 --> 00:24:06,465
So the question is,

592
00:24:06,785 --> 00:24:10,286
well, how did we handle the force applying to the vehicle

593
00:24:10,486 --> 00:24:12,526
to get it out of collision if it actually is already in?

594
00:24:13,786 --> 00:24:13,966
We,

595
00:24:15,108 --> 00:24:19,692
I'm actually okay with it being in collision for a little bit. So we don't push so hard that it

596
00:24:19,912 --> 00:24:24,696
flies out of collision. And so I actually have a tuning where there's a maximum amount of

597
00:24:24,716 --> 00:24:28,119
force that's actually allowed to be applied on it so that it doesn't ever get pushed out that

598
00:24:28,159 --> 00:24:34,945
far. Okay. Thank you. Up over here. Hi. Uh did you have any trouble like if the vehicle

599
00:24:35,005 --> 00:24:40,750
bottoms out and then the collision of the chassis gets snagged on some small rock or

600
00:24:40,790 --> 00:24:43,692
something like that? Uh it

601
00:24:44,065 --> 00:24:49,687
the vehicle does bottom out a lot, but the Havok rigid body system is pretty good at

602
00:24:50,307 --> 00:24:56,209
making sure that it doesn't cause a problem. There are some cases, and you can still see

603
00:24:56,230 --> 00:25:03,312
them in the shipped game though, where the rocks and stuff will go flying because the

604
00:25:03,352 --> 00:25:08,594
chassis hits that rock in a bad way. It is something I looked into a little bit, but

605
00:25:08,614 --> 00:25:11,075
it's not something we cared enough about to have to fix.

606
00:25:13,233 --> 00:25:17,657
Is the 4x4 a one-off or is Naughty Dog going to look into more vehicle play in the future?

607
00:25:18,457 --> 00:25:18,958
We had the boat.

608
00:25:19,718 --> 00:25:22,901
Oh yeah.

609
00:25:22,941 --> 00:25:27,425
Yeah, I mean we are definitely always exploring what other things we can do.

610
00:25:27,465 --> 00:25:33,651
Like having the 4x4 in there was a starting off point for making the boat.

611
00:25:33,831 --> 00:25:36,133
And so they share a lot of the same code.

612
00:25:36,193 --> 00:25:40,136
So it's obviously a really good jumping off point for making any other vehicle simulation.

613
00:25:44,470 --> 00:25:50,897
I was developing like a VR truck simulator. One of the problem I got into is like when you

614
00:25:50,937 --> 00:25:56,704
got a trailer behind your car, while you're trying to like driving forward, of course the

615
00:25:56,744 --> 00:26:02,851
like motor belongs to like a rear wheels of the like the truck head. But...

616
00:26:03,732 --> 00:26:10,994
how do you manage to like balance those initial like uh uh you know the power when you're

617
00:26:11,014 --> 00:26:19,417
trying to do some color uh the power uh uh on inner tile and outer tile they are different. How

618
00:26:19,457 --> 00:26:29,400
do you like balance that out? I got a lot of problem with that. Uh...

619
00:26:30,395 --> 00:26:33,098
I'm not... what's the problem you're having? I'm not sure.

620
00:26:33,118 --> 00:26:36,681
Uh... when you driving your car too fast.

621
00:26:36,882 --> 00:26:37,082
Yeah.

622
00:26:37,222 --> 00:26:38,403
You know, uh...

623
00:26:40,952 --> 00:26:47,474
we're doing color. In fact, uh, uh, uh, the friction on, uh, on your, uh, inner tire and the

624
00:26:47,594 --> 00:26:53,496
outer tire, they are different. Uh, that, that's where my, like, uh, simulator went around a lot

625
00:26:53,516 --> 00:26:59,917
of times. I like, uh, the way I'm solving it is that we tuned a lot to make it feel better. I

626
00:26:59,957 --> 00:27:03,738
wonder how you like manage to solve that. And, uh, you know, uncharted 4.

627
00:27:04,698 --> 00:27:08,741
the car is also running on uneven paths.

628
00:27:09,141 --> 00:27:10,042
Sometimes it's like,

629
00:27:11,562 --> 00:27:13,864
they are on the brink of getting in contact

630
00:27:13,884 --> 00:27:14,944
with the ground a lot.

631
00:27:15,305 --> 00:27:20,768
How do you try to make them in that very boundary moment

632
00:27:20,788 --> 00:27:24,130
to make the car still getting the force moving forward

633
00:27:24,150 --> 00:27:24,430
correctly?

634
00:27:25,499 --> 00:27:32,464
Yeah, so the question summarizes, all four tires are running on different friction most of the

635
00:27:32,484 --> 00:27:37,128
time. As you're going from the riverbed to the grass, one side is still slipping, the other

636
00:27:37,148 --> 00:27:46,835
side catches. The differential actually helps in this case because we're splitting the torque to

637
00:27:46,875 --> 00:27:53,040
all four tires. That makes it so that it's actually a smoother transition.

638
00:27:54,966 --> 00:27:57,507
because you don't have a sudden, like, very hard grip

639
00:27:57,547 --> 00:27:59,607
on one of the tires and cause it to just, like, stop.

640
00:28:01,868 --> 00:28:03,789
And other than that, like, we didn't really have

641
00:28:03,889 --> 00:28:05,649
any issues in that area, I think,

642
00:28:06,470 --> 00:28:09,030
maybe, possibly because of how stable

643
00:28:09,131 --> 00:28:11,131
the point constraint system is in Havoc.

644
00:28:11,871 --> 00:28:15,112
We basically told it the lateral friction we wanted,

645
00:28:15,813 --> 00:28:16,973
how much force is being applied there,

646
00:28:16,993 --> 00:28:19,494
and it would do a decent job of stabilizing.

647
00:28:19,514 --> 00:28:21,715
Okay, thank you.

648
00:28:24,439 --> 00:28:30,140
my question was just also about the chase sequence and the other cars in the chase sequence and the

649
00:28:30,761 --> 00:28:37,582
motorcycle, did they use the same model? Um a lot of that is um faked with splines. Um

650
00:28:37,762 --> 00:28:47,464
there I think I think there's uh some of the same like the way the tires work and detect

651
00:28:47,484 --> 00:28:52,245
collision I think is the same but the actual driving and movement is on a spline.

652
00:28:53,452 --> 00:29:01,123
and they didn't run like obstacle avoidance or anything? No, no. Okay. Thank you very much.

