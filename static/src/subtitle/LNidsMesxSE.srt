1
00:00:02,897 --> 00:00:08,479
All right. Can you hear me? I'm David from Mulfire Games. I've

2
00:00:08,499 --> 00:00:13,041
been making games in my spare time for about 20 years. And

3
00:00:13,882 --> 00:00:16,523
recently we're probably best known for starting a

4
00:00:16,603 --> 00:00:19,724
distribution platform called Humble Bundle. But I'm not going

5
00:00:19,744 --> 00:00:25,186
to talk about that today. Right now I'm working on a game called

6
00:00:25,286 --> 00:00:29,108
Overgrowth. And we have a pretty small team. It's just myself and

7
00:00:29,148 --> 00:00:32,089
an artist. So it's twice as big as any team I've worked in

8
00:00:32,109 --> 00:00:32,429
before.

9
00:00:33,579 --> 00:00:36,880
but I'm still doing all the animation and the programming.

10
00:00:37,920 --> 00:00:41,001
So I really had to try to use my time very efficiently

11
00:00:41,021 --> 00:00:42,462
when making this game.

12
00:00:43,962 --> 00:00:46,963
So I tried to abstract whatever animation tasks I could

13
00:00:47,324 --> 00:00:49,524
from key framework into curves

14
00:00:49,564 --> 00:00:50,885
and other overlapping systems.

15
00:00:52,185 --> 00:00:54,346
So I'll talk about how I did that for movement.

16
00:00:55,586 --> 00:00:57,487
So movement, we've always had kind of a trade-off

17
00:00:57,527 --> 00:01:00,388
between responsive movement and detailed animation.

18
00:01:01,423 --> 00:01:03,826
Like on one extreme we have a game like Mario,

19
00:01:04,687 --> 00:01:06,269
where a controller input is mapped directly

20
00:01:06,329 --> 00:01:07,730
onto acceleration of the character.

21
00:01:08,852 --> 00:01:10,193
And the animation is very simple.

22
00:01:10,373 --> 00:01:11,955
Like he probably has like two frames for running,

23
00:01:12,255 --> 00:01:13,076
one frame for jumping.

24
00:01:15,880 --> 00:01:18,563
On the other extreme we have like rotoscoped animation,

25
00:01:18,963 --> 00:01:19,924
like in Prince of Persia.

26
00:01:21,355 --> 00:01:24,917
where all of the animations transition smoothly

27
00:01:24,977 --> 00:01:27,157
from one to another, and during these transitions,

28
00:01:27,358 --> 00:01:29,338
controller input is more or less ignored.

29
00:01:30,019 --> 00:01:32,359
So it looks really smooth, but it adds a bit of latency

30
00:01:32,559 --> 00:01:33,460
for controller input.

31
00:01:36,681 --> 00:01:38,302
So I was thinking of trying to get both

32
00:01:38,722 --> 00:01:40,302
responsive and detailed controls.

33
00:01:41,423 --> 00:01:43,504
One thing I looked at is vehicle movement,

34
00:01:44,044 --> 00:01:46,385
like the warthog in Halo, when it does that stop there.

35
00:01:47,562 --> 00:01:48,943
It's still responding very quickly

36
00:01:48,983 --> 00:01:50,103
to all the controller input,

37
00:01:50,544 --> 00:01:52,445
but it also has all this fancy animation,

38
00:01:53,105 --> 00:01:54,306
like the shocks on the wheels,

39
00:01:54,566 --> 00:01:56,927
secondary movement on the antenna, and so on.

40
00:01:59,708 --> 00:02:01,169
So I want to think about how to apply this

41
00:02:01,509 --> 00:02:02,570
to a human character.

42
00:02:02,590 --> 00:02:06,212
So it seems like a human would be a very complicated vehicle

43
00:02:06,552 --> 00:02:08,573
because we have like 40 animation bones

44
00:02:08,633 --> 00:02:09,693
moving around and twisting.

45
00:02:10,813 --> 00:02:11,974
But really if we think about it,

46
00:02:12,534 --> 00:02:13,795
if you look at his center of mass,

47
00:02:14,255 --> 00:02:15,756
it's moving in a very simple way.

48
00:02:16,177 --> 00:02:18,338
It's just making these simple curves around the ice

49
00:02:19,379 --> 00:02:21,000
and not moving up and down very much at all

50
00:02:21,040 --> 00:02:21,781
except when he jumps.

51
00:02:22,321 --> 00:02:24,002
He goes in a little gravity parabola.

52
00:02:26,184 --> 00:02:28,205
There are only a few rules he has to always follow.

53
00:02:28,445 --> 00:02:30,106
Like he always has to keep his center of mass

54
00:02:30,427 --> 00:02:32,728
over his skates so he doesn't fall over.

55
00:02:33,289 --> 00:02:34,770
And he has to tilt into acceleration

56
00:02:35,070 --> 00:02:37,011
so that that'll be true in the next second.

57
00:02:37,311 --> 00:02:38,993
So in the next second his center of mass

58
00:02:39,013 --> 00:02:40,053
will still be over his skates.

59
00:02:41,275 --> 00:02:43,057
And he has to conserve his angular momentum

60
00:02:43,337 --> 00:02:44,238
whenever he wants to spin.

61
00:02:45,119 --> 00:02:46,800
So he can start spinning, and then he'll

62
00:02:47,160 --> 00:02:49,002
compact into a line to spin really fast,

63
00:02:49,422 --> 00:02:51,164
or he'll spread out to spin more slowly.

64
00:02:51,184 --> 00:02:56,768
And the same is true with this gymnast doing floor exercises.

65
00:02:58,089 --> 00:02:59,390
Like, she seems very complicated,

66
00:02:59,971 --> 00:03:01,732
but she's really just like Animation 101,

67
00:03:02,233 --> 00:03:03,193
just a bouncing ball.

68
00:03:03,534 --> 00:03:05,315
She's bouncing once, once, and then a big one.

69
00:03:07,113 --> 00:03:09,936
compresses a little bit on the landing with squash and stretch

70
00:03:10,797 --> 00:03:13,720
and there's always a constant gravity. Like she's always

71
00:03:13,760 --> 00:03:18,264
accelerating downwards at 9.18 or 9.81 meters per second

72
00:03:18,304 --> 00:03:21,868
squared whenever she's not in contact with the ground. That's

73
00:03:21,908 --> 00:03:26,133
true if she's jumping, flipping, running or in the air in any

74
00:03:26,153 --> 00:03:26,273
way.

75
00:03:29,386 --> 00:03:32,847
So with Overgrowth, I wanted to start by focusing on the

76
00:03:32,887 --> 00:03:34,248
basic physics movement.

77
00:03:34,708 --> 00:03:37,049
Like start with a Mario-like controller input equals

78
00:03:37,089 --> 00:03:40,170
acceleration and wrap everything around there and

79
00:03:40,210 --> 00:03:41,050
never interfere with it.

80
00:03:42,590 --> 00:03:45,411
So I had this one green sphere as a bumper sphere.

81
00:03:45,611 --> 00:03:48,192
It lets him slide off of objects that he runs into.

82
00:03:49,113 --> 00:03:51,293
And a white lifter sphere, which moves up

83
00:03:51,553 --> 00:03:52,514
over small obstacles.

84
00:03:54,734 --> 00:03:57,115
By using this as a foundation for all the animation, we

85
00:03:57,135 --> 00:03:58,676
always had really consistent controls.

86
00:03:59,443 --> 00:04:01,805
Like whenever the player presses forwards or right,

87
00:04:02,065 --> 00:04:03,145
it does something predictable.

88
00:04:03,546 --> 00:04:04,646
So if they fall off a cliff, they

89
00:04:04,666 --> 00:04:06,927
know that it's their fault and not the game's fault.

90
00:04:08,368 --> 00:04:09,569
And whenever it's so predictable,

91
00:04:10,369 --> 00:04:13,531
they describe it using words like intuitive and responsive,

92
00:04:14,311 --> 00:04:16,392
which is a much better thing to see in reviews of your game

93
00:04:16,433 --> 00:04:19,454
than like awkward or sluggish or floaty.

94
00:04:21,695 --> 00:04:23,476
So I kind of feel like there should be a Hippocratic oath

95
00:04:23,736 --> 00:04:26,078
for game animation, which is at first you

96
00:04:26,098 --> 00:04:27,358
do no harm to the gameplay.

97
00:04:28,657 --> 00:04:31,978
So by making sure we have the movement in first,

98
00:04:32,538 --> 00:04:33,939
and we do the animation on top of that,

99
00:04:34,019 --> 00:04:35,539
we can make sure that that's the case.

100
00:04:39,201 --> 00:04:41,241
So the first step was just to drape an idle pose

101
00:04:41,601 --> 00:04:42,482
onto our physics sphere.

102
00:04:43,782 --> 00:04:45,122
So here he just floats around

103
00:04:46,283 --> 00:04:48,143
and he rotates towards his velocity.

104
00:04:49,324 --> 00:04:51,244
And his rotation is reactive to the velocity.

105
00:04:51,444 --> 00:04:53,825
It's not the direction the controller is pushing.

106
00:04:54,807 --> 00:04:56,208
it's the direction he's actually going.

107
00:04:56,689 --> 00:04:58,670
So if he moves along a wall, he kind of

108
00:04:58,710 --> 00:05:00,551
slides to face in the direction he's going,

109
00:05:00,812 --> 00:05:02,393
instead of kind of running into the wall.

110
00:05:06,095 --> 00:05:08,337
The next step was to add some acceleration tilt to it.

111
00:05:09,198 --> 00:05:12,340
So whenever he accelerates, it tilts in that direction.

112
00:05:12,360 --> 00:05:15,282
And that already makes it kind of fun to move around.

113
00:05:15,622 --> 00:05:17,764
Like, he starts to move around a bit like a Segway

114
00:05:18,044 --> 00:05:19,465
or some other simple vehicle.

115
00:05:23,205 --> 00:05:24,565
But I'm not making an ice skating game,

116
00:05:24,825 --> 00:05:26,486
so I wanted him to actually move on the ground.

117
00:05:28,387 --> 00:05:29,827
So I just added these two key frames.

118
00:05:30,968 --> 00:05:32,789
There's the pass pose and the reach pose,

119
00:05:33,109 --> 00:05:35,330
where his legs are passing and then the extreme position.

120
00:05:36,650 --> 00:05:39,472
And I just kind of used this surveyor wheel-like technique

121
00:05:39,552 --> 00:05:41,432
just to figure out how much distance he's moved on

122
00:05:41,472 --> 00:05:43,213
the ground, and that kind of takes off

123
00:05:43,253 --> 00:05:44,434
the key frames in the animation.

124
00:05:45,474 --> 00:05:47,515
So no matter how fast or how slow he's moving,

125
00:05:47,775 --> 00:05:50,376
he never floats, and his footsteps are just always

126
00:05:50,416 --> 00:05:51,216
in sync with the ground.

127
00:05:54,305 --> 00:05:56,466
Then I tried adding another speed for walking.

128
00:05:57,107 --> 00:05:58,528
The walk has much smaller strides,

129
00:05:58,548 --> 00:06:00,368
so it has to have a much smaller wheel just

130
00:06:00,388 --> 00:06:01,269
to take off each one.

131
00:06:02,750 --> 00:06:04,831
And it's a bit jarring to suddenly transition

132
00:06:04,851 --> 00:06:05,511
from one to the other.

133
00:06:05,531 --> 00:06:08,813
So I added a synchronized blend between them.

134
00:06:09,913 --> 00:06:11,834
So at any intermediate speed, it'll

135
00:06:11,854 --> 00:06:13,295
just blend between the two key frames

136
00:06:14,036 --> 00:06:16,317
and also blend between their stride size.

137
00:06:17,858 --> 00:06:20,619
So it can go at fast, slow, or any intermediate level.

138
00:06:24,275 --> 00:06:25,997
And since I was just key framing the shape,

139
00:06:26,377 --> 00:06:28,298
the shape of his limbs around the center of mass,

140
00:06:29,139 --> 00:06:30,300
I had to add in a bit of a bounce.

141
00:06:30,680 --> 00:06:32,741
So he could have a bouncy jog when he's moving slowly.

142
00:06:33,362 --> 00:06:35,083
And it gets flatter the faster he goes,

143
00:06:35,784 --> 00:06:37,545
just because gravity is always constant.

144
00:06:38,245 --> 00:06:41,308
If you have half as much time between each stride,

145
00:06:41,908 --> 00:06:44,190
you can only fall a quarter as much distance,

146
00:06:45,151 --> 00:06:46,511
just by doing out the integration.

147
00:06:50,148 --> 00:06:52,969
And two key frames is not nearly enough to just warp

148
00:06:52,989 --> 00:06:55,289
from one to the next, so I had to start interpolating

149
00:06:56,170 --> 00:06:59,411
from one angle to the next, just by doing a weighted average

150
00:06:59,751 --> 00:07:00,951
between the two nearest frames.

151
00:07:02,072 --> 00:07:04,552
And that helps preserve spatial continuity,

152
00:07:04,972 --> 00:07:06,853
so it goes from one frame to the next.

153
00:07:07,553 --> 00:07:09,954
But there's a sudden velocity jar at the end,

154
00:07:10,754 --> 00:07:12,315
so his arms reach forwards and suddenly

155
00:07:12,655 --> 00:07:13,555
start going backwards.

156
00:07:15,516 --> 00:07:17,676
So I upgraded that to bicubic interpolation.

157
00:07:18,532 --> 00:07:22,253
which makes sure there's spatial and velocity continuity.

158
00:07:23,714 --> 00:07:25,514
And that made the, I thought the run,

159
00:07:25,674 --> 00:07:27,315
even in slow motion, looked pretty acceptable,

160
00:07:27,655 --> 00:07:28,856
even with only two key frames.

161
00:07:32,677 --> 00:07:35,018
Then I needed some squash for the compression,

162
00:07:35,038 --> 00:07:36,079
like we saw with the gymnast.

163
00:07:36,939 --> 00:07:38,079
So I just added a crouch frame.

164
00:07:39,720 --> 00:07:41,821
We can interpolate linearly there,

165
00:07:42,041 --> 00:07:44,462
but organic creatures almost always look bad

166
00:07:45,202 --> 00:07:46,383
with linear interpolation.

167
00:07:47,508 --> 00:07:49,909
No animator would ever use linear interpolation just for

168
00:07:49,949 --> 00:07:51,530
their own internal animation.

169
00:07:52,310 --> 00:07:54,591
But it's also important to avoid it when transitioning

170
00:07:54,611 --> 00:07:55,371
from one to another.

171
00:07:58,493 --> 00:08:01,374
So I tried using a spring damper system to interpolate

172
00:08:01,414 --> 00:08:04,336
between these two key frames, which just has these two

173
00:08:04,436 --> 00:08:07,277
parameters, the stiffness of the spring and the damping

174
00:08:07,317 --> 00:08:07,677
factor.

175
00:08:08,197 --> 00:08:09,538
I just tweaked that until it looked right.

176
00:08:10,418 --> 00:08:12,519
And that adds a lot of the nice easing in and follow

177
00:08:12,539 --> 00:08:12,759
through.

178
00:08:13,747 --> 00:08:15,748
that I would have animated if I wanted to do

179
00:08:15,788 --> 00:08:17,430
like a transition animation by hand.

180
00:08:18,831 --> 00:08:21,573
But since the curve is separated from the transition itself,

181
00:08:22,334 --> 00:08:24,616
it can work with any standing pose and any crouching pose,

182
00:08:25,857 --> 00:08:27,959
or even with a standing animation and a crouching

183
00:08:27,999 --> 00:08:28,459
animation.

184
00:08:30,061 --> 00:08:32,002
So I just added another synchronized locomotion

185
00:08:32,282 --> 00:08:33,243
for crouch walking.

186
00:08:35,125 --> 00:08:37,247
So now we have our six locomotion key frames

187
00:08:37,307 --> 00:08:38,428
and our two standing key frames.

188
00:08:42,026 --> 00:08:43,707
And since we're using a spring damper system,

189
00:08:45,247 --> 00:08:48,869
I could use the existing crouch to handle absorbing landings.

190
00:08:49,349 --> 00:08:52,631
It just adds some downwards force to the crouching spring.

191
00:08:53,932 --> 00:08:55,772
So we don't really need a landing animation at all.

192
00:08:57,913 --> 00:09:00,054
And since this transition is separated also,

193
00:09:00,074 --> 00:09:03,176
it will work while he's running or while he's standing still.

194
00:09:07,638 --> 00:09:09,339
Next, I wanted to add some ways for players

195
00:09:09,359 --> 00:09:10,960
to express themselves while they're in the air.

196
00:09:11,680 --> 00:09:12,981
So they could flip in any direction

197
00:09:13,121 --> 00:09:14,582
by just pressing a control direction

198
00:09:14,642 --> 00:09:15,963
and pressing the flip button.

199
00:09:17,824 --> 00:09:21,266
With linear rotation, as always, it looks pretty bad.

200
00:09:21,927 --> 00:09:23,888
Especially at the end there, we suddenly,

201
00:09:24,208 --> 00:09:25,669
like where does this angular momentum go?

202
00:09:25,869 --> 00:09:26,950
Just kind of disappears.

203
00:09:27,950 --> 00:09:29,251
And where does it come from in the first place,

204
00:09:29,291 --> 00:09:29,771
for that matter?

205
00:09:32,713 --> 00:09:33,974
So I tried addressing that a little bit

206
00:09:33,994 --> 00:09:34,874
by changing the curve.

207
00:09:35,054 --> 00:09:36,235
So it's a little bit of acceleration.

208
00:09:37,436 --> 00:09:38,757
or anticipation at the beginning.

209
00:09:39,258 --> 00:09:41,660
So he's still kind of manufacturing momentum from nowhere,

210
00:09:42,221 --> 00:09:43,822
but it looks a lot more plausible.

211
00:09:44,743 --> 00:09:48,167
And then at the end, the ease out is synchronized

212
00:09:48,207 --> 00:09:50,249
with his transition back into his jump pose.

213
00:09:51,310 --> 00:09:53,312
So it works more like it works for the figure skater.

214
00:09:53,592 --> 00:09:55,754
Like he's rotating really fast while he's balled up,

215
00:09:56,014 --> 00:09:58,036
and then he slows down as he expands outwards.

216
00:10:01,187 --> 00:10:03,288
And he used the same system for a roll,

217
00:10:04,188 --> 00:10:05,849
where he just rotates around the center of mass

218
00:10:05,909 --> 00:10:07,250
with a rolling pose.

219
00:10:08,011 --> 00:10:10,112
But he has a different tuck pose for rolling forwards

220
00:10:10,172 --> 00:10:11,012
and rolling to the side,

221
00:10:11,673 --> 00:10:14,074
and interpolates between them for any intermediate angle.

222
00:10:14,894 --> 00:10:16,595
So he's always kind of rolling over his shoulders

223
00:10:16,856 --> 00:10:19,677
instead of rolling over his spine or his head.

224
00:10:23,059 --> 00:10:24,840
Those are all really simple systems,

225
00:10:24,940 --> 00:10:26,181
but when you put them all together,

226
00:10:26,201 --> 00:10:28,923
it gets pretty compelling results, I think.

227
00:10:29,833 --> 00:10:31,835
Even with only 13 keyframes, it pretty,

228
00:10:32,455 --> 00:10:34,917
it transitions between every possible thing

229
00:10:34,937 --> 00:10:35,838
you might do pretty well.

230
00:10:36,859 --> 00:10:39,401
Like we have a simple system for all standing

231
00:10:39,862 --> 00:10:42,484
and crouching transitions using that spring damper system.

232
00:10:43,365 --> 00:10:45,747
We have an acceleration tilt for all horizontal movement.

233
00:10:46,728 --> 00:10:48,590
And we have all these rolling and flipping systems

234
00:10:48,670 --> 00:10:49,590
with controlled curves.

235
00:10:51,592 --> 00:10:53,394
And the nice thing about using so few keyframes,

236
00:10:54,463 --> 00:10:57,084
is that it's not that hard to add a whole new variation.

237
00:10:57,304 --> 00:10:59,084
Like if I want to make a variation where

238
00:10:59,104 --> 00:11:01,425
he's carrying a spear, I don't have

239
00:11:01,445 --> 00:11:03,206
to layer a spear pose on top.

240
00:11:03,286 --> 00:11:05,366
I can just make 13 new poses that

241
00:11:05,406 --> 00:11:06,467
take the spear into account.

242
00:11:06,887 --> 00:11:09,428
So he'll roll nicely without penetrating the ground.

243
00:11:13,129 --> 00:11:15,050
Once we have animations we're happy with,

244
00:11:15,070 --> 00:11:16,910
there are a lot of procedural ways to refine them.

245
00:11:18,235 --> 00:11:20,016
Like we've already gone over inverse kinematics

246
00:11:20,196 --> 00:11:23,158
a little bit, where you just move the foot or the hand

247
00:11:23,379 --> 00:11:25,840
and automatically calculate the angles for the joints.

248
00:11:26,881 --> 00:11:28,182
We don't really need a library for that.

249
00:11:28,262 --> 00:11:30,664
Like it's kind of pretty simple trigonometry

250
00:11:30,904 --> 00:11:35,347
just to figure out that angle for a two bone IK.

251
00:11:38,970 --> 00:11:40,191
I can take that a little bit farther

252
00:11:41,212 --> 00:11:43,694
for really tricky situations like this ledge climb.

253
00:11:44,214 --> 00:11:46,436
I just had the one key frame for grabbing onto a ledge.

254
00:11:47,326 --> 00:11:48,947
and then constructed all his movement

255
00:11:49,367 --> 00:11:51,188
using Embers kinematics.

256
00:11:52,149 --> 00:11:55,531
So you can shimmy along using big shimmies or small ones

257
00:11:55,971 --> 00:11:57,913
or whatever angle, you can go up and down.

258
00:11:57,933 --> 00:12:02,395
So I just couldn't, it seemed easier

259
00:12:02,856 --> 00:12:06,718
than making a hundred different variations in Blender,

260
00:12:07,358 --> 00:12:09,240
which is what I'm using for animation in this case.

261
00:12:14,479 --> 00:12:17,381
You can also use some IK for just look targets.

262
00:12:19,042 --> 00:12:22,543
So I used the multiple joint IK for the hands and feet

263
00:12:22,603 --> 00:12:25,005
to make sure that all the contacts are preserved.

264
00:12:26,105 --> 00:12:28,146
But this helps with more like social contacts.

265
00:12:28,947 --> 00:12:30,308
So enemies or characters are always

266
00:12:30,328 --> 00:12:31,708
looking at their targets or looking

267
00:12:31,728 --> 00:12:34,030
in the direction of the camera or facing.

268
00:12:34,390 --> 00:12:36,391
They can face their torso one way and their head another way.

269
00:12:37,712 --> 00:12:38,832
It just helps make the characters

270
00:12:38,852 --> 00:12:41,153
look a lot more alive and aware of what's going on.

271
00:12:44,590 --> 00:12:47,431
It's pretty common now also to add secondary physics

272
00:12:47,471 --> 00:12:49,452
to the character somehow, like by adding a cape

273
00:12:49,612 --> 00:12:52,673
or by adding wobbly scabbard, or in this case, wobbly ears.

274
00:12:54,254 --> 00:12:56,395
But I wanted to try bringing that a little bit deeper

275
00:12:56,415 --> 00:12:57,075
into the character.

276
00:12:57,795 --> 00:13:01,537
So every animation has sort of a softness parameter

277
00:13:01,777 --> 00:13:02,317
for each bone.

278
00:13:03,237 --> 00:13:04,918
So in this case, his arms are a little bit soft,

279
00:13:05,278 --> 00:13:07,079
so he kind of wobbles when he runs around.

280
00:13:09,300 --> 00:13:11,220
And secondary physics are nice to bring as much of that

281
00:13:11,281 --> 00:13:13,381
in as possible, because it helps transition.

282
00:13:14,330 --> 00:13:15,912
not only between different animations,

283
00:13:15,972 --> 00:13:18,094
but different rotations and different velocities

284
00:13:18,514 --> 00:13:19,375
and any kind of change.

285
00:13:22,057 --> 00:13:23,978
And finally, for refinement, I tried to address it

286
00:13:24,079 --> 00:13:26,120
kind of like a profiling problem.

287
00:13:26,300 --> 00:13:27,421
Like I just try different things,

288
00:13:27,742 --> 00:13:29,523
find what looks the stupidest.

289
00:13:30,444 --> 00:13:31,805
So in this case, it kind of looks stupid

290
00:13:31,825 --> 00:13:34,347
to slide along the wall on this face like that.

291
00:13:35,288 --> 00:13:38,591
Because it kind of exposes this invisible collision sphere.

292
00:13:40,666 --> 00:13:43,448
So I tried just using my locomotion system

293
00:13:43,789 --> 00:13:46,030
to replace that with a simple wall run animation.

294
00:13:47,572 --> 00:13:49,373
And I found that took one of the stupidest looking

295
00:13:49,413 --> 00:13:51,415
situations and made it one of the cooler ones

296
00:13:52,096 --> 00:13:54,638
that everyone likes to post screenshots of on Steam.

297
00:14:03,906 --> 00:14:05,767
In almost every game now it uses ragdolls

298
00:14:06,067 --> 00:14:07,589
for destroyed characters.

299
00:14:08,523 --> 00:14:10,085
And I first saw them in Carmageddon 2,

300
00:14:10,285 --> 00:14:11,846
where they just used simple box physics

301
00:14:12,186 --> 00:14:14,368
to allow you to collide with pedestrians

302
00:14:14,428 --> 00:14:15,629
and pile drive them into walls,

303
00:14:16,430 --> 00:14:18,551
or like knock one pedestrian into another one

304
00:14:18,751 --> 00:14:19,752
and make them both fall over.

305
00:14:21,573 --> 00:14:21,774
But,

306
00:14:24,075 --> 00:14:26,297
I didn't see articulated rag dolls until Hitman,

307
00:14:26,457 --> 00:14:27,398
code name 47,

308
00:14:28,479 --> 00:14:29,820
which kind of blew my mind at the time,

309
00:14:29,920 --> 00:14:31,221
because you could drag on the bodies

310
00:14:31,541 --> 00:14:33,262
by any limb that you want to,

311
00:14:33,883 --> 00:14:35,904
or you could blast them up against walls

312
00:14:35,964 --> 00:14:37,726
and they'd kind of slide down in a dramatic way.

313
00:14:39,607 --> 00:14:41,848
And since he wrote a paper about it, the guy who did this,

314
00:14:42,768 --> 00:14:45,209
I immediately wanted to try it for a game jam project.

315
00:14:45,810 --> 00:14:47,510
So here's one where you're a psychic bodyguard,

316
00:14:48,531 --> 00:14:52,032
where you have to protect the VIP in the white outfit

317
00:14:53,172 --> 00:14:54,053
by shooting all these guys.

318
00:14:55,733 --> 00:14:57,574
So the instant ragdoll transition worked well

319
00:14:57,634 --> 00:15:00,215
for extreme situations, like you blow their limbs off

320
00:15:00,255 --> 00:15:01,155
with a grenade or something.

321
00:15:02,256 --> 00:15:04,176
But in movies, there are often different kinds

322
00:15:04,196 --> 00:15:07,878
of death animations that are more dramatic and drawn out.

323
00:15:09,108 --> 00:15:11,509
Like this guy is kind of falling slowly like a tree,

324
00:15:12,249 --> 00:15:14,310
or someone's clutching their shoulder when they get shot.

325
00:15:15,690 --> 00:15:17,751
Or even sometimes they just act it out

326
00:15:17,791 --> 00:15:20,051
by standing up for a while, so the hero can just

327
00:15:20,091 --> 00:15:23,012
shoot them dramatically and satisfyingly many times.

328
00:15:25,173 --> 00:15:27,234
Like this poor guy here.

329
00:15:30,555 --> 00:15:32,536
So I tried just delaying the ragdoll a little bit

330
00:15:32,936 --> 00:15:34,856
to allow the characters to have a bit more time

331
00:15:35,436 --> 00:15:36,957
to react to what's going on.

332
00:15:37,742 --> 00:15:38,902
It's like if you shoot them in the leg,

333
00:15:38,942 --> 00:15:40,802
they might grab their leg, and if you shoot them again,

334
00:15:41,082 --> 00:15:42,623
then they'll go into an immediate ragdoll.

335
00:15:43,783 --> 00:15:44,843
Or they'll stay up for a little while,

336
00:15:44,903 --> 00:15:47,224
so you can just unload your machine gun into them.

337
00:15:49,144 --> 00:15:50,745
And it even added a little bit to the gameplay,

338
00:15:51,005 --> 00:15:53,366
because sometimes you'll shoot someone and they're dying,

339
00:15:53,446 --> 00:15:55,486
but they're still about to kill your VIP,

340
00:15:55,526 --> 00:15:56,586
so you have to keep shooting them.

341
00:15:57,867 --> 00:15:59,527
Which is very violent, now that I think about it.

342
00:16:01,908 --> 00:16:03,048
It did add to the game, I think.

343
00:16:05,809 --> 00:16:07,209
The next big thing in ragdolls.

344
00:16:14,951 --> 00:16:18,752
Rockstar announced they're using this tech called Euphoria to add active ragdolls.

345
00:16:19,012 --> 00:16:21,012
So it's some kind of AI for the joint forces.

346
00:16:21,272 --> 00:16:22,172
So not totally limp.

347
00:16:22,213 --> 00:16:23,393
They're still trying to do something.

348
00:16:23,533 --> 00:16:24,553
Like grab onto things.

349
00:16:25,733 --> 00:16:26,814
Or sort of keep their balance.

350
00:16:29,854 --> 00:16:31,475
So I tried doing something like that in Overgrowth.

351
00:16:32,315 --> 00:16:33,975
And started with pose matching.

352
00:16:35,052 --> 00:16:38,673
So he'll just try and preserve whatever pose he was in by

353
00:16:38,713 --> 00:16:39,854
applying joint constraints.

354
00:16:42,175 --> 00:16:43,395
And that was pretty fun to do.

355
00:16:45,916 --> 00:16:47,776
The next step was to add animation matching.

356
00:16:48,037 --> 00:16:51,978
So now he's playing his walk animation,

357
00:16:52,198 --> 00:16:54,279
but he's not really walking very well.

358
00:16:57,360 --> 00:17:00,841
And finally, I extended that to an actual useful system.

359
00:17:02,140 --> 00:17:03,521
So when he's far away from a surface,

360
00:17:03,561 --> 00:17:05,742
he'll flail with these three flailing key frames.

361
00:17:06,462 --> 00:17:07,563
And when he gets close to a surface,

362
00:17:07,583 --> 00:17:09,344
he'll kind of curl up and try and protect himself.

363
00:17:09,904 --> 00:17:11,405
And if there's a surface coming to the front,

364
00:17:11,926 --> 00:17:13,207
he'll put his arms out forwards.

365
00:17:14,227 --> 00:17:15,468
It doesn't help very much.

366
00:17:18,230 --> 00:17:19,931
But it makes him look a lot more alive,

367
00:17:20,171 --> 00:17:22,312
and less like he was just unplugged from the matrix.

368
00:17:23,953 --> 00:17:25,194
So a lot of the time when you punch someone,

369
00:17:25,214 --> 00:17:25,834
they'll fall over.

370
00:17:26,535 --> 00:17:28,596
And I don't want them to keep looking like they're dying

371
00:17:28,616 --> 00:17:29,436
and getting resurrected.

372
00:17:33,224 --> 00:17:35,105
The same kind of techniques can be applied to anything,

373
00:17:35,666 --> 00:17:39,089
any kind of animation, not just third person characters.

374
00:17:39,630 --> 00:17:42,532
Like in this case, I made a game jam project called Receiver,

375
00:17:42,893 --> 00:17:45,055
which is all about really detailed gun manipulation.

376
00:17:45,755 --> 00:17:48,518
So instead of R for reload, it's like R is rack the slide,

377
00:17:48,758 --> 00:17:50,139
and E is like eject magazine.

378
00:17:51,180 --> 00:17:53,863
So I had to divide it all up into little stages like this.

379
00:17:55,985 --> 00:17:58,948
And linear interpolation continues to look bad.

380
00:18:00,530 --> 00:18:02,991
So, I tried using the spring interpolation again.

381
00:18:04,351 --> 00:18:06,632
And that already, I thought, looked pretty natural.

382
00:18:07,152 --> 00:18:08,633
Like even with just your three key frames,

383
00:18:08,653 --> 00:18:11,674
like that's more like how someone's arm might move around.

384
00:18:11,694 --> 00:18:14,875
It still reacts instantly to any controls.

385
00:18:15,615 --> 00:18:18,536
Like you can interrupt any of those transitions at any time.

386
00:18:20,116 --> 00:18:22,497
But we still only need three key frames for that.

387
00:18:25,478 --> 00:18:27,418
It's a similar kind of rotational spring for the gun.

388
00:18:28,736 --> 00:18:30,317
which I use for any kind of sudden impacts.

389
00:18:30,697 --> 00:18:33,198
Like there's a gun recoil, of course.

390
00:18:34,119 --> 00:18:35,640
But I also used it for footsteps,

391
00:18:36,940 --> 00:18:38,881
and even for like taking out a magazine

392
00:18:39,121 --> 00:18:40,082
and slamming it back in.

393
00:18:40,362 --> 00:18:42,483
Just helped accent the movements a little bit.

394
00:18:47,886 --> 00:18:49,887
In Receiver, I had to decompose everything

395
00:18:49,907 --> 00:18:51,248
into little movements like this

396
00:18:51,368 --> 00:18:53,349
because that was just part of the gameplay design.

397
00:18:54,149 --> 00:18:55,470
But I feel like I would do it even if

398
00:18:55,850 --> 00:18:58,051
you just pressed R to reload like usual.

399
00:18:59,432 --> 00:19:01,754
because it made it really easy to make variations each time.

400
00:19:02,274 --> 00:19:04,776
Like when you eject the bullets, one of them might get stuck,

401
00:19:04,956 --> 00:19:06,137
so you have to do it multiple times.

402
00:19:06,858 --> 00:19:08,159
Or you might not fill it completely,

403
00:19:08,379 --> 00:19:10,100
or you could spin it a little bit while putting it back.

404
00:19:11,061 --> 00:19:12,482
And having it in little pieces like that

405
00:19:12,983 --> 00:19:15,265
could make it really easy to randomly add variety

406
00:19:15,325 --> 00:19:16,746
to all reloads every time.

407
00:19:16,766 --> 00:19:23,011
And there are a bunch of good examples of games

408
00:19:23,031 --> 00:19:25,533
that I didn't work on that do a pretty cool job

409
00:19:25,573 --> 00:19:26,534
with procedural animation.

410
00:19:27,461 --> 00:19:29,102
Like, Shadow of the Colossus had a remarkable

411
00:19:29,382 --> 00:19:31,803
animation problem, because it had one skinned character

412
00:19:32,503 --> 00:19:34,204
climbing around on a bigger skinned character,

413
00:19:34,504 --> 00:19:36,745
which I think has not really been attempted since then.

414
00:19:38,006 --> 00:19:40,307
So usually that is just handled by rotating the character

415
00:19:40,407 --> 00:19:42,008
and using inverse kinematics to make sure

416
00:19:42,028 --> 00:19:43,049
the hands and feet lined up.

417
00:19:44,149 --> 00:19:46,810
But in extreme cases, he would lose his grip entirely.

418
00:19:47,511 --> 00:19:49,912
Then he simulated with a sort of two-part pendulum,

419
00:19:50,392 --> 00:19:51,993
like one part from his hand to his chest,

420
00:19:52,233 --> 00:19:53,534
one part from his chest to his legs.

421
00:19:54,294 --> 00:19:55,295
So he kind of flaps around.

422
00:19:56,560 --> 00:19:59,161
And that simulation is applied to the pre-made

423
00:19:59,402 --> 00:20:02,143
flapping around animation, just to make sure it all lines up.

424
00:20:05,906 --> 00:20:09,728
A 2D example is this upcoming game called Rain World, which

425
00:20:09,748 --> 00:20:12,650
has this really cool little slug cat character, which

426
00:20:12,670 --> 00:20:13,431
I think is what they call it.

427
00:20:14,451 --> 00:20:16,493
Whenever he runs, he tilts in the direction he's going,

428
00:20:16,693 --> 00:20:19,274
kind of like the figure skater or what I did for Overgrowth.

429
00:20:19,948 --> 00:20:25,190
And when he's crawling, like you can see in the little window on the left, he moves like the character in Snake.

430
00:20:25,490 --> 00:20:29,611
Like he has his front part is kind of dragging his rear part behind it.

431
00:20:30,531 --> 00:20:34,892
And he uses inverse kinematics to make sure his limbs all hook up to the nearest surface.

432
00:20:36,133 --> 00:20:39,814
And he always has secondary motion on the tail. The tail is always physically simulated.

433
00:20:40,514 --> 00:20:42,934
So it has nice smooth transitions between every state.

434
00:20:46,035 --> 00:20:48,276
A more extreme example is this game called Gang Beasts.

435
00:20:49,322 --> 00:20:51,064
which is always in an active ragdoll state.

436
00:20:51,084 --> 00:20:53,046
So you can have these crazy situations,

437
00:20:53,086 --> 00:20:55,649
like the little guy trying to climb on the big guy

438
00:20:55,709 --> 00:20:56,610
and pummel him in the head.

439
00:20:58,192 --> 00:21:00,554
And they didn't have to simulate it in great detail.

440
00:21:00,715 --> 00:21:03,358
They used an invisible sphere to kind of prop the guy up.

441
00:21:05,400 --> 00:21:07,162
But it's really neat how it allowed for such

442
00:21:07,542 --> 00:21:09,865
difficult situations, environment interaction.

443
00:21:13,263 --> 00:21:14,644
You don't have to take it quite this far.

444
00:21:14,864 --> 00:21:16,045
You could always do like a hybrid.

445
00:21:16,065 --> 00:21:17,546
So sometimes they're active ragdoll,

446
00:21:17,726 --> 00:21:19,207
and sometimes they're moving around normally.

447
00:21:20,128 --> 00:21:21,509
I saw this as a great case study.

448
00:21:30,755 --> 00:21:33,557
So in the future, I think we really need animation code

449
00:21:33,778 --> 00:21:35,539
to work more closely together.

450
00:21:36,499 --> 00:21:39,161
So that we can use the code to like help offload

451
00:21:39,201 --> 00:21:41,463
repeated tasks from the animators.

452
00:21:42,298 --> 00:21:44,400
Like if you keep on having to animate like an overshoot

453
00:21:44,520 --> 00:21:47,401
for your punch, you could just add a new curve for that.

454
00:21:47,602 --> 00:21:49,243
You could add a little overshoot curve.

455
00:21:49,523 --> 00:21:50,923
And then for each of those overshoots,

456
00:21:50,943 --> 00:21:52,024
you just do the one key frame.

457
00:21:52,224 --> 00:21:53,045
You apply that curve.

458
00:21:53,545 --> 00:21:54,866
You just cut down on your work a lot.

459
00:21:56,327 --> 00:21:59,208
So if you keep on identifying any repeated animation tasks

460
00:21:59,528 --> 00:22:02,270
and extracting them out and making good tools

461
00:22:02,330 --> 00:22:03,871
for the animators to use while doing that,

462
00:22:04,271 --> 00:22:05,432
I think that could save a lot of time.

463
00:22:05,452 --> 00:22:08,734
It would also allow animators to focus a lot more

464
00:22:08,814 --> 00:22:10,775
on the performance and less on the.

465
00:22:11,644 --> 00:22:13,705
like busy work, like transition animations

466
00:22:14,165 --> 00:22:15,346
and repetitive things.

467
00:22:18,867 --> 00:22:20,628
And thanks for watching.

468
00:22:33,554 --> 00:22:36,035
It's on my contact info if you'd like to talk afterwards.

469
00:22:54,123 --> 00:22:56,165
I'd rather use your tools because it's way cooler.

470
00:22:57,605 --> 00:23:01,368
I think it's a lot easier to program yourself than it probably seems.

471
00:23:02,148 --> 00:23:06,430
Like for the pose matching I'll just make sure, I'll just read the relative matrices

472
00:23:06,470 --> 00:23:10,753
from the animation and then I just apply a joint constraint to enforce those relative

473
00:23:10,793 --> 00:23:13,434
positions in bullet and things like that.

474
00:23:13,454 --> 00:23:19,678
So I don't really have like specific user friendly tools that I can sell but I can tell

475
00:23:19,718 --> 00:23:20,298
you how it works.

476
00:23:21,534 --> 00:23:24,935
Thank you.

477
00:23:25,435 --> 00:23:28,996
Can you think of good ways of, like one

478
00:23:29,016 --> 00:23:31,757
of the main problems with using just physics

479
00:23:31,817 --> 00:23:33,458
to move between key frames is you

480
00:23:33,518 --> 00:23:36,719
lose intentional in-betweens, which

481
00:23:36,799 --> 00:23:39,140
is something that animators really like having control over.

482
00:23:40,560 --> 00:23:44,962
Can you think of a good way of biasing the in-betweens

483
00:23:45,002 --> 00:23:48,063
towards certain performance focus in-betweens

484
00:23:48,103 --> 00:23:50,423
rather than just submitting to what physics dictates?

485
00:23:51,977 --> 00:23:54,157
Well, it's still kind of animating in the same way

486
00:23:54,197 --> 00:23:54,997
as you normally would.

487
00:23:55,357 --> 00:23:56,598
But you would take the transition

488
00:23:57,058 --> 00:23:59,398
that you would normally animate with intentional in-betweens

489
00:23:59,898 --> 00:24:03,059
and then kind of try and abstract that out a little bit

490
00:24:03,079 --> 00:24:06,840
so it can apply to multiple transitions, which is mostly

491
00:24:06,860 --> 00:24:07,500
what I'm trying to do.

492
00:24:07,520 --> 00:24:09,820
I'm trying to avoid the combinatorial explosion

493
00:24:09,880 --> 00:24:12,401
of trying to transition from every stand to every crouch

494
00:24:13,061 --> 00:24:16,622
so we can kind of make it more of a linear not explosion,

495
00:24:17,482 --> 00:24:17,942
if possible.

496
00:24:21,022 --> 00:24:21,742
Hi, yeah.

497
00:24:22,522 --> 00:24:25,843
So you were talking about you coded in basic two bone IK

498
00:24:27,004 --> 00:24:28,764
for your wall hanging, for instance.

499
00:24:30,285 --> 00:24:31,945
Is there a resource that you used

500
00:24:32,145 --> 00:24:34,326
to maybe learn more about that?

501
00:24:34,386 --> 00:24:35,907
Or I mean, could you point me in the right direction,

502
00:24:35,927 --> 00:24:37,947
maybe, because it's something I'm unfamiliar with

503
00:24:38,027 --> 00:24:39,008
and I'd like to figure out as well.

504
00:24:41,108 --> 00:24:43,629
I can't think of a specific resource for that.

505
00:24:44,449 --> 00:24:46,490
But I could talk about it on email.

506
00:24:46,930 --> 00:24:47,390
Oh, sure.

507
00:24:47,450 --> 00:24:48,291
It's basically just.

508
00:24:49,385 --> 00:24:50,709
It's like the right triangle problem.

509
00:24:51,150 --> 00:24:53,356
Like you have this bone and this bone.

510
00:24:53,597 --> 00:24:54,760
Now you have two right triangles.

511
00:24:55,041 --> 00:24:56,023
So you find this angle here.

512
00:24:56,043 --> 00:24:57,688
OK, yeah.

513
00:25:01,557 --> 00:25:06,300
you mentioned the case of like having the character hold like a ball or something like that.

514
00:25:06,860 --> 00:25:10,502
And you said that the approach for that would be just to have, you know, make all those key

515
00:25:10,542 --> 00:25:16,364
frames except with him holding a ball. Did you try doing like putting IK so you put his hands

516
00:25:16,584 --> 00:25:20,326
onto the ball and then so you wouldn't have to make all those frames again?

517
00:25:20,346 --> 00:25:25,869
I'll try and answer in one minute. So I think that's a good question. I think that's a good

518
00:25:26,672 --> 00:25:29,532
Yeah, I think you can definitely do a lot of that with IK.

519
00:25:30,292 --> 00:25:34,914
I try not to, I try to only use IK when it's like super needed,

520
00:25:34,934 --> 00:25:37,434
because usually I'll find better results by having him

521
00:25:37,454 --> 00:25:40,335
like hold a very small ball and hold a very large bar ball

522
00:25:40,575 --> 00:25:41,435
and then interpolate.

523
00:25:42,315 --> 00:25:44,976
Because then we have animation control of the extremes.

524
00:25:45,816 --> 00:25:48,037
Or do that with an animation layer that gets layered on top.

525
00:25:49,317 --> 00:25:51,237
Because otherwise you're animating

526
00:25:51,277 --> 00:25:52,358
with very awkward tools.

527
00:25:52,398 --> 00:25:55,298
You're like animating in a text editor, which is not ideal.

528
00:25:57,321 --> 00:25:58,168
Okay, well thanks.

529
00:25:58,994 --> 00:26:00,002
I don't think I have any more time.

