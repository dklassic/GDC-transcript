1
00:00:11,785 --> 00:00:12,785
Thanks all for coming.

2
00:00:13,665 --> 00:00:17,826
My name is Valentin Minitskiy and I'm a Lead VFX Artist at Playground Games.

3
00:00:18,486 --> 00:00:23,387
And today I'll tell you how parameters drive the particle effects of Forza Horizon 5.

4
00:00:25,007 --> 00:00:30,148
But before we will start, please turn off the sound on your phones and also...

5
00:00:31,734 --> 00:00:33,895
In the end do the evaluation please.

6
00:00:35,476 --> 00:00:35,856
Alright.

7
00:00:37,017 --> 00:00:42,039
So today we'll be looking at what challenges we faced in a new project

8
00:00:42,179 --> 00:00:45,741
and why we decided to switch to a new particle editor to overcome them.

9
00:00:46,682 --> 00:00:51,284
Then we will talk about how we redesigned our core gameplay graphics

10
00:00:51,444 --> 00:00:55,246
and we'll show how putting carve physics at the core of our effects

11
00:00:55,286 --> 00:00:59,448
help us to achieve more convincing and satisfying visual results.

12
00:01:00,775 --> 00:01:04,058
We also take a closer look at several use cases,

13
00:01:04,138 --> 00:01:06,841
such as how we use wheels temperature

14
00:01:06,901 --> 00:01:08,743
to drive tire smoke effects.

15
00:01:09,724 --> 00:01:11,846
We'll show our kick-up master effects

16
00:01:11,886 --> 00:01:13,928
and explain the external parameters

17
00:01:14,148 --> 00:01:16,190
that we use to control them.

18
00:01:17,591 --> 00:01:20,774
Then we will break down how with two effects

19
00:01:20,835 --> 00:01:23,998
we were able to cover hundreds of destructible props.

20
00:01:25,843 --> 00:01:29,505
And we will wrap up with several tips on efficient batching

21
00:01:29,525 --> 00:01:32,067
solutions that help us to optimize our game

22
00:01:32,147 --> 00:01:33,488
for various platforms.

23
00:01:34,268 --> 00:01:37,170
So the goal of this talk is to show how

24
00:01:37,210 --> 00:01:40,792
we discovered that building VFX systems to take

25
00:01:40,812 --> 00:01:42,553
an advantage of parameters would be

26
00:01:42,593 --> 00:01:45,855
a key to producing more satisfying gameplay effects

27
00:01:46,055 --> 00:01:49,818
and efficiently creating a wide range of assets.

28
00:01:52,196 --> 00:01:55,702
So, but before we dive into that, let me tell you about the game itself.

29
00:01:56,503 --> 00:02:02,754
Forza Horizon 5 is an open-world driving video game set in authentic representation of Mexico.

30
00:02:03,855 --> 00:02:05,098
Let's take a look at the trailer.

31
00:02:33,772 --> 00:02:40,796
And I'll tell you what I'm gonna do.

32
00:02:40,876 --> 00:02:43,418
I'm not giving up.

33
00:02:43,438 --> 00:02:46,019
Come on, we got nothing left to lose.

34
00:02:46,139 --> 00:02:48,160
I've been here from the start.

35
00:02:48,220 --> 00:02:49,381
You know where I'm going.

36
00:03:16,436 --> 00:03:21,103
Tell me what you want right now

37
00:03:21,964 --> 00:03:27,192
Let everybody talk right now tell me what you want right now you can get it

38
00:03:57,477 --> 00:04:02,899
Alright, so first let me describe what challenges we faced in the new project and why we decided

39
00:04:02,939 --> 00:04:04,719
to switch to a new effects editor.

40
00:04:05,399 --> 00:04:08,740
So what were our new project considerations?

41
00:04:09,660 --> 00:04:14,762
We planned for a 50% longer development cycle and this was intended to give us more time

42
00:04:14,822 --> 00:04:16,482
to push the quality of our effects.

43
00:04:17,088 --> 00:04:19,410
But there was also a bit of a scope increase,

44
00:04:19,570 --> 00:04:22,632
as the goal was to create our largest and most diverse world

45
00:04:22,912 --> 00:04:25,954
to date, replicating the huge variety of biomes

46
00:04:26,014 --> 00:04:26,975
present in Mexico.

47
00:04:27,815 --> 00:04:31,137
The key tech improvement that we identified on the FxHard side

48
00:04:31,197 --> 00:04:33,919
was to push for a new particle editor that

49
00:04:33,959 --> 00:04:36,961
would enable us to live up to those project targets.

50
00:04:38,161 --> 00:04:40,863
To better explain why we wanted to switch to a new editor,

51
00:04:40,903 --> 00:04:43,665
let's take a quick look at previous editor challenges.

52
00:04:44,405 --> 00:04:44,505
So

53
00:04:45,053 --> 00:04:50,918
During Forza Horizon 4 production, we felt that we had hit the limits of what our old editor could do,

54
00:04:51,578 --> 00:04:56,982
and it felt that we were spending as much time fighting the tool as we were creating the art itself.

55
00:04:58,123 --> 00:05:02,707
It was a heavily extended middleware that had not been in active development for years,

56
00:05:02,847 --> 00:05:09,191
and we were highly dependent on the help of our internal engineers for any fixes and new functionality.

57
00:05:10,372 --> 00:05:13,655
But still, it was a cumbersome stack-based editor in its core, and

58
00:05:14,051 --> 00:05:16,472
No amount of engineering support could change that.

59
00:05:18,072 --> 00:05:21,233
In 2018 and early 19, we spent a lot of time

60
00:05:21,293 --> 00:05:24,394
checking various GDC talks and engines like Unreal Engine

61
00:05:24,594 --> 00:05:27,815
and Unity to understand what kind of tool we were looking

62
00:05:27,875 --> 00:05:28,095
for.

63
00:05:29,115 --> 00:05:31,896
Everything was going node-based, and overall trend

64
00:05:32,076 --> 00:05:35,237
in the industry was to give more control to artists

65
00:05:35,257 --> 00:05:36,618
through node graph editors.

66
00:05:37,480 --> 00:05:42,001
as this approach is giving the ability to craft our own logic and data relationships

67
00:05:42,061 --> 00:05:43,881
in a way that suits our effects.

68
00:05:44,802 --> 00:05:50,403
We had the choice to create an editor internally or use a third-party software again.

69
00:05:51,243 --> 00:05:55,725
In this case, PopcornFX version 2 was clearly the best option for us, so we decided to go

70
00:05:55,785 --> 00:05:56,025
with it.

71
00:05:57,258 --> 00:06:01,541
But this did mean that we would have to build every VFX in the game from scratch.

72
00:06:01,861 --> 00:06:05,223
There would be no longer the momentum of previous projects behind us,

73
00:06:05,823 --> 00:06:09,706
and we also would need to help support the implementation of this editor.

74
00:06:10,726 --> 00:06:14,448
As part of a new editor evaluation process,

75
00:06:14,628 --> 00:06:17,690
we started by designing a gameplay-related VFX.

76
00:06:18,691 --> 00:06:22,293
So, what was the problem that we tried to solve here?

77
00:06:23,073 --> 00:06:23,173
Well,

78
00:06:23,708 --> 00:06:26,709
In Forza Horizon 4, we had a limited visual feedback

79
00:06:26,749 --> 00:06:28,550
to reflect what the car was doing.

80
00:06:29,471 --> 00:06:30,892
There were many blind spots.

81
00:06:30,972 --> 00:06:32,893
For example, our particle system didn't

82
00:06:32,973 --> 00:06:36,154
know anything about which wheels were actually driving the car,

83
00:06:36,875 --> 00:06:39,976
and we had to offer most effects expecting real wheel drive.

84
00:06:40,837 --> 00:06:43,238
Any deviation from this required more duplication

85
00:06:43,358 --> 00:06:44,159
and workarounds.

86
00:06:45,079 --> 00:06:46,680
Because of that, in some cases, we

87
00:06:46,740 --> 00:06:48,701
could achieve behavior seen.

88
00:06:49,121 --> 00:06:51,362
We couldn't achieve the behavior seen in the reference,

89
00:06:51,442 --> 00:06:53,203
and that would frustrate us a bit.

90
00:06:55,064 --> 00:06:59,106
Previously, there were some situations we struggled with, such as an initial kick-up

91
00:06:59,146 --> 00:07:02,187
when the player suddenly accelerated from a static position.

92
00:07:02,848 --> 00:07:06,029
To fix this, we needed to introduce workarounds.

93
00:07:06,870 --> 00:07:11,952
But in turn, workarounds could cause incorrect behavior, which would then also trigger in

94
00:07:12,272 --> 00:07:13,913
other unwanted situations.

95
00:07:15,513 --> 00:07:20,956
In this video, we can clearly see an unintended emission when the front wheels stopped rolling.

96
00:07:21,522 --> 00:07:24,323
This wave was byproduct of previously mentioned

97
00:07:24,383 --> 00:07:26,524
workarounds, and we unfortunately

98
00:07:26,564 --> 00:07:27,324
couldn't fix this.

99
00:07:28,184 --> 00:07:30,125
So the first picture here describes

100
00:07:30,185 --> 00:07:32,126
how previously our effects work.

101
00:07:32,266 --> 00:07:35,567
And we could only use primitives for emission points.

102
00:07:35,788 --> 00:07:39,389
And from those, we emitted particles flying backwards

103
00:07:39,449 --> 00:07:43,031
and up into the air a bit to create a feeling of kicking out

104
00:07:43,251 --> 00:07:44,031
dust and debris.

105
00:07:44,911 --> 00:07:47,793
But now we have the power to create our own emitter

106
00:07:47,833 --> 00:07:48,253
behavior.

107
00:07:49,055 --> 00:07:52,197
The good place to start would be by defining a cylinder that

108
00:07:52,277 --> 00:07:53,158
matches the tire.

109
00:07:53,838 --> 00:07:56,279
Then we want to know where the contact point is

110
00:07:56,900 --> 00:07:59,942
and to use the surface of the tire thread around that point.

111
00:08:00,862 --> 00:08:03,484
And then we eject the particles with initial velocity

112
00:08:03,524 --> 00:08:06,325
set according to how fast the wheel is spinning.

113
00:08:07,766 --> 00:08:09,487
This is a very first proof of concept

114
00:08:09,987 --> 00:08:11,488
for wheel-based emissions that we

115
00:08:11,548 --> 00:08:14,050
created during PopcornFX evaluation stage.

116
00:08:15,070 --> 00:08:17,191
Let's take a look at the effect graph on the right.

117
00:08:18,340 --> 00:08:23,824
The script node here is defining a cylinder almost in the same way that we showed in the previous slide.

118
00:08:24,704 --> 00:08:29,588
Then we have a few inputs to control the arc and velocity of the base emission.

119
00:08:31,029 --> 00:08:35,432
This then goes into the default physics node to add some gravity and billboard renderer.

120
00:08:36,452 --> 00:08:39,454
This basic effect already feels quite satisfying.

121
00:08:39,614 --> 00:08:45,078
You can imagine this is coming from a car wheel that is spinning away on a very loose surface.

122
00:08:46,431 --> 00:08:50,653
Let's dive deeper and see what is under the hood in our cylinder-defining script node.

123
00:08:51,413 --> 00:08:54,414
So, this is a basic script at the heart of this effect.

124
00:08:54,794 --> 00:09:03,258
There is no reason that this couldn't be done in the node graph, but it's far more visually transparent to do this in a few lines of code.

125
00:09:04,279 --> 00:09:10,822
We start by picking a random angle from a defined range for the arc of emission and the same for the radius.

126
00:09:11,709 --> 00:09:16,111
For a bit more randomness, there is a control over how much side-to-side spread we want.

127
00:09:17,752 --> 00:09:24,215
We use this to pick a position on the defined cylinder that placed at the origin, and then

128
00:09:24,255 --> 00:09:29,317
we calculate an initial velocity based on how that point on the tire relates to the

129
00:09:29,557 --> 00:09:30,237
contact point.

130
00:09:31,878 --> 00:09:37,240
As at this point, we were still working only in Popcorn, the fixed editor, so we recorded

131
00:09:37,300 --> 00:09:39,061
some gameplay from Forza Horizon 4.

132
00:09:40,048 --> 00:09:43,710
with our physics overlays enable to try extract the data

133
00:09:43,910 --> 00:09:46,231
and apply it in our proof of concept effect,

134
00:09:46,871 --> 00:09:49,232
pretending that the effect is listening to the game.

135
00:09:50,312 --> 00:09:51,772
As you can see in this short clip,

136
00:09:52,072 --> 00:09:54,913
the car is driving from a static position on a gravel road

137
00:09:55,294 --> 00:09:57,554
and this shows a bit of variance

138
00:09:57,634 --> 00:10:00,655
in how much traction there is due to the loose surface.

139
00:10:01,176 --> 00:10:03,976
We took some notes of what we see happening here

140
00:10:04,056 --> 00:10:06,077
with those values over time

141
00:10:06,157 --> 00:10:09,858
and it looked like RPM and slip related data are the key.

142
00:10:11,017 --> 00:10:14,740
So, with those notes in mind, we improved the previous test effect.

143
00:10:15,460 --> 00:10:18,863
Those previously fixed inputs are changed into attributes,

144
00:10:19,783 --> 00:10:24,987
which allows everything to be controlled from the effect interface in the top right of the frame.

145
00:10:26,087 --> 00:10:29,530
This control panel allows for live tweaking of elements of the effect,

146
00:10:29,590 --> 00:10:33,993
but in theory, this function is more appropriate for listening to external data.

147
00:10:34,993 --> 00:10:37,655
As we don't have the physics data directly available for now,

148
00:10:37,755 --> 00:10:40,016
we created some curves that map what

149
00:10:40,056 --> 00:10:43,418
we saw in the previous clip and sampled that over time

150
00:10:43,458 --> 00:10:44,358
to drive the effect.

151
00:10:46,879 --> 00:10:49,180
Here we have a side-by-side comparison

152
00:10:49,220 --> 00:10:53,042
that works as a proof of concept for inputting the physics data

153
00:10:53,783 --> 00:10:55,543
into this tire emitter effect.

154
00:10:57,384 --> 00:11:01,066
So after we proved the concept in PopcornFX Editor,

155
00:11:01,186 --> 00:11:03,567
it was time to start implementing all of this

156
00:11:03,727 --> 00:11:04,268
into the game.

157
00:11:05,358 --> 00:11:08,022
And at this point, we decided to look back and revisit

158
00:11:08,062 --> 00:11:10,205
a little bit our approach for creating effects

159
00:11:10,445 --> 00:11:12,007
for core gameplay systems.

160
00:11:13,129 --> 00:11:16,113
As previously, we were relying on options and data

161
00:11:16,153 --> 00:11:20,238
that are known to us instead of thinking about what are we

162
00:11:20,379 --> 00:11:21,540
actually trying to represent.

163
00:11:22,429 --> 00:11:23,990
So that was a really good question.

164
00:11:24,110 --> 00:11:25,951
And to answer that, we decided to start

165
00:11:25,991 --> 00:11:29,614
by talking to our resident vehicle handling and dynamics

166
00:11:29,654 --> 00:11:32,115
team, as they're the people who know everything

167
00:11:32,855 --> 00:11:34,537
about the behavior of the car and what

168
00:11:34,557 --> 00:11:37,078
we are trying to represent in these gameplay effects.

169
00:11:37,899 --> 00:11:40,060
It turns out that the key concept that

170
00:11:40,140 --> 00:11:43,542
relates to tires kicking up matter is a slip ratio.

171
00:11:44,503 --> 00:11:47,244
This is a difference between how much the wheel is rotating

172
00:11:47,404 --> 00:11:49,886
compared to how far it has moved linearly.

173
00:11:50,630 --> 00:11:53,372
At zero slip, one revolution of the tire

174
00:11:53,412 --> 00:11:56,534
should propel the car by the circumference of the tire.

175
00:11:57,134 --> 00:11:59,516
And at one slip, there is no movement at all.

176
00:12:00,337 --> 00:12:01,898
We kind of knew about slip thanks

177
00:12:01,958 --> 00:12:05,620
to the in-game physics overlays, but didn't fully understand it.

178
00:12:06,641 --> 00:12:09,282
And it turns out that this was the main contributing element

179
00:12:09,322 --> 00:12:11,484
to the smoke factor previously mentioned.

180
00:12:13,065 --> 00:12:15,266
What this ultimately boils down to

181
00:12:15,366 --> 00:12:17,848
is that the rotational energy the tire

182
00:12:17,868 --> 00:12:19,929
spends that doesn't move the car forward.

183
00:12:20,530 --> 00:12:21,570
must be doing something else.

184
00:12:22,371 --> 00:12:25,092
This could be pushing surface matter away from the car

185
00:12:25,312 --> 00:12:27,514
or lost in the heat energy in the friction

186
00:12:27,534 --> 00:12:29,555
between the tire and the surface.

187
00:12:30,275 --> 00:12:32,557
Sleep ratio is a key parameter that informs us

188
00:12:32,617 --> 00:12:33,957
of all of this happening.

189
00:12:35,398 --> 00:12:37,319
So with that information in mind,

190
00:12:37,499 --> 00:12:39,841
we start by implementing some debug visuals

191
00:12:39,861 --> 00:12:42,282
to test that parameter hookups from the game

192
00:12:42,342 --> 00:12:45,084
to our effects are performing as expected.

193
00:12:45,904 --> 00:12:48,846
We use tire properties to play those debug particles

194
00:12:48,866 --> 00:12:50,107
from the surface of the tire.

195
00:12:50,790 --> 00:12:54,331
And to do that, we are reading the wheel position, tire radius,

196
00:12:54,411 --> 00:12:55,692
and its width from the game.

197
00:12:56,952 --> 00:13:00,134
We use RPM to rotate this as the wheel rotates.

198
00:13:00,974 --> 00:13:03,795
And at last, we change the color depending on the slip value.

199
00:13:04,795 --> 00:13:06,496
With those debug visuals up and running,

200
00:13:06,556 --> 00:13:09,117
we now know that we can trust the data connection,

201
00:13:09,217 --> 00:13:11,938
and it's time to start working on getting some kickups

202
00:13:11,998 --> 00:13:12,398
in place.

203
00:13:14,319 --> 00:13:16,460
Here we show some early spawn layer logic.

204
00:13:16,700 --> 00:13:19,841
We are able to map emission curves to the physics inputs.

205
00:13:20,625 --> 00:13:23,166
and use a control panel of basic debris emitter

206
00:13:23,186 --> 00:13:25,627
to set tune the behavior of this effect.

207
00:13:26,568 --> 00:13:29,770
As you can see, when we increase the slip ratio,

208
00:13:30,030 --> 00:13:33,432
particles begin to emit it over a growing arc

209
00:13:33,712 --> 00:13:37,114
from the contact point and with increasing velocity,

210
00:13:37,774 --> 00:13:41,196
depending on the maximum that is determined by RPM.

211
00:13:42,576 --> 00:13:45,519
And this is a breakdown of the core behavior of the tire

212
00:13:45,599 --> 00:13:48,542
emitter, demonstrating how these inputs are reflected

213
00:13:48,562 --> 00:13:50,224
in the editor in real time.

214
00:13:51,125 --> 00:13:54,288
Our templates are able to be adjusted to create variants

215
00:13:54,348 --> 00:13:55,369
to tune on the fly.

216
00:13:55,910 --> 00:13:58,352
So let's for a moment dive inside the debris emitter

217
00:13:58,392 --> 00:13:59,113
template again.

218
00:14:00,274 --> 00:14:02,176
This is an evolution of the graph

219
00:14:02,216 --> 00:14:05,039
that we showed from the popcorn-fixed evaluation stage.

220
00:14:05,827 --> 00:14:08,047
The purple inputs are being read from the game,

221
00:14:08,127 --> 00:14:11,328
but also are accessible in the control panel in editor

222
00:14:11,368 --> 00:14:12,488
for testing purposes.

223
00:14:13,348 --> 00:14:17,129
From game read, we'll position tire radius and width, RPM,

224
00:14:17,169 --> 00:14:20,049
slip ratio, and use this to inform effect behavior.

225
00:14:21,049 --> 00:14:23,330
And the dark blue are internal parameters

226
00:14:23,370 --> 00:14:25,090
that we were adjusting via control panel

227
00:14:25,210 --> 00:14:26,050
in previous slides.

228
00:14:27,890 --> 00:14:29,491
This all comes together to allow us

229
00:14:29,551 --> 00:14:33,411
to create a comprehensive effect system that now considers

230
00:14:33,531 --> 00:14:34,172
all forces.

231
00:14:34,791 --> 00:14:39,492
on the tire at once, allowing that to influence the whole particle system in

232
00:14:39,532 --> 00:14:44,973
combination with other factors at play. If we know that the tire is traveling at

233
00:14:45,053 --> 00:14:50,474
given speed, spinning at a specific rate, and the amount of it is slipping, this

234
00:14:50,694 --> 00:14:55,535
can all be taken into account for the initial behavior of the spawned particle.

235
00:14:56,835 --> 00:15:02,116
We only have to define the nature of the effect once and then drive it with the

236
00:15:02,256 --> 00:15:03,597
data from the car physics.

237
00:15:05,483 --> 00:15:08,564
Now that we have the core tire emitter behavior coming along

238
00:15:08,604 --> 00:15:11,926
nicely, let's put it to use with a tire smoke, one

239
00:15:11,966 --> 00:15:14,787
of the most common effects you'll see in the game.

240
00:15:16,387 --> 00:15:17,908
But first, let's look back at what

241
00:15:18,148 --> 00:15:20,509
was wrong with our previous iteration of tire smoke.

242
00:15:21,129 --> 00:15:23,711
We previously discussed a smoke amount value.

243
00:15:23,951 --> 00:15:25,991
This was a bit of a black box magic

244
00:15:26,051 --> 00:15:28,432
that tried to tell the particle system

245
00:15:28,493 --> 00:15:30,814
that the wheel was slipping, and if it was hot.

246
00:15:31,654 --> 00:15:33,575
This led to a fact that lacked much subtlety.

247
00:15:34,184 --> 00:15:36,846
The smoke amount number needed very little change

248
00:15:36,906 --> 00:15:40,968
to go from minimum to maximum, leading in most of the cases

249
00:15:41,048 --> 00:15:43,229
to binary on-off behavior.

250
00:15:43,930 --> 00:15:46,992
And obviously, our effect lack a thick billowing smoke.

251
00:15:47,812 --> 00:15:49,393
So to even better illustrate this,

252
00:15:49,513 --> 00:15:51,955
let's compare our effect from Forza Horizon

253
00:15:51,995 --> 00:15:53,356
for a GANSA reference.

254
00:15:55,277 --> 00:15:58,058
Well, clearly, our tire smoke look quite.

255
00:15:58,966 --> 00:16:05,030
underwhelming. If you think about the burnouts and drifts you imagine a big thick clouds of smoke

256
00:16:05,170 --> 00:16:12,235
but ours were quite thin and weak. So what can we do about all of this? We decided that the good

257
00:16:12,295 --> 00:16:16,778
place to start would be by finding a more appropriate trigger to drive the effect itself.

258
00:16:17,639 --> 00:16:23,302
So again we go to our friends in vehicle dynamic team and tell them that we want to achieve what

259
00:16:23,322 --> 00:16:26,524
we see in the reference where tire smoke starts off fairly thin.

260
00:16:27,397 --> 00:16:30,460
and then thickens up as tar gets hotter and hotter.

261
00:16:31,381 --> 00:16:34,184
They gave us a quick lesson on what causes a tar smoke

262
00:16:34,244 --> 00:16:36,146
and pointed to some good reference.

263
00:16:36,907 --> 00:16:38,909
Let's take a closer look at the reference together.

264
00:16:39,910 --> 00:16:42,472
So in this case, the tar starts off cold

265
00:16:42,732 --> 00:16:45,555
at an ambient temperature of 90 degrees Celsius.

266
00:16:47,256 --> 00:16:49,117
As we can see, a lot of slip causes

267
00:16:49,177 --> 00:16:52,998
a tire to quickly heat up and pass 100 degrees Celsius mark,

268
00:16:53,078 --> 00:16:54,799
leaving some rubber on the ground

269
00:16:54,979 --> 00:16:57,320
and producing a thin, short-lived smoke.

270
00:16:58,301 --> 00:17:00,101
Often, at this stage, we are seeing

271
00:17:00,261 --> 00:17:03,223
dirt and other contaminants on the surface of the tire smoke

272
00:17:03,343 --> 00:17:05,384
before the tire compound itself.

273
00:17:06,244 --> 00:17:08,965
Note that there is a bit of a hot spot developing

274
00:17:09,245 --> 00:17:11,126
on the inside left of the thread.

275
00:17:12,673 --> 00:17:15,495
Unfortunately, this reference is unable to capture the heat

276
00:17:15,535 --> 00:17:17,476
about 100 degrees Celsius mark.

277
00:17:17,536 --> 00:17:19,938
But a few seconds later, you can see

278
00:17:20,439 --> 00:17:23,941
the heat has spread across the entire tire thread.

279
00:17:25,142 --> 00:17:27,504
At this point, the smoke produces noticeably

280
00:17:27,624 --> 00:17:29,205
thicker and continuous.

281
00:17:30,626 --> 00:17:32,727
And after sustaining that amount of friction

282
00:17:32,767 --> 00:17:36,310
for another 15 seconds on the similar RPM,

283
00:17:36,490 --> 00:17:39,032
the tire is clearly starting off to break down.

284
00:17:39,903 --> 00:17:41,864
A lot of lingering smoke is being produced,

285
00:17:41,924 --> 00:17:44,865
and you can see particles of tire rubber being cast off.

286
00:17:46,465 --> 00:17:49,987
It turns out that our car physics simulation already

287
00:17:50,227 --> 00:17:51,847
tracks all the necessary data.

288
00:17:51,968 --> 00:17:54,769
In fact, we were informed that it goes a step farther

289
00:17:55,309 --> 00:17:58,050
and tracks how each tire compound responds

290
00:17:58,090 --> 00:18:00,911
to heat, at what threshold it should start smoking,

291
00:18:01,031 --> 00:18:03,772
and what will be reaching the breaking point.

292
00:18:04,672 --> 00:18:06,773
A new smoke control parameter is produced

293
00:18:06,793 --> 00:18:08,794
to trigger this effect called Smoke Input.

294
00:18:09,515 --> 00:18:12,877
The temperature of the tire is compared to these thresholds

295
00:18:12,977 --> 00:18:16,899
and mapped to 0 to 1 range for easy effect control.

296
00:18:17,680 --> 00:18:19,141
As soon as the tire is hot enough

297
00:18:19,681 --> 00:18:22,162
to be starting to produce smoke, the VFX system

298
00:18:22,623 --> 00:18:25,464
is informed by the parameter going above 0

299
00:18:26,205 --> 00:18:28,426
and increasing up to 1 for maximum smoke.

300
00:18:29,465 --> 00:18:33,446
This new temperature-based control will have a bit more of a range than the previous one,

301
00:18:33,706 --> 00:18:38,868
has access to allowing for subtle build-up in effect and will be helping us to address

302
00:18:38,888 --> 00:18:40,349
this prior binary nature.

303
00:18:41,249 --> 00:18:46,091
From here we just need to apply it alongside our new tar emitter and see how it feels.

304
00:18:47,191 --> 00:18:51,493
So we decided to go with two primary elements, thin and thick smoke.

305
00:18:51,833 --> 00:18:57,735
There is a dead zone around zero, but once we pass that with a smoke input, the thin

306
00:18:58,412 --> 00:19:00,393
emission increases and thickens up,

307
00:19:01,234 --> 00:19:03,856
until we cross a threshold to thick smoke.

308
00:19:05,217 --> 00:19:08,059
On this example, you can see that the action of the tire

309
00:19:08,159 --> 00:19:10,521
influence the overall movement of the smoke.

310
00:19:12,103 --> 00:19:14,404
The highlighted parameters are the temperature

311
00:19:14,464 --> 00:19:15,946
that we talked about previously.

312
00:19:16,446 --> 00:19:19,268
They determine the type of the smoke that is produced.

313
00:19:20,433 --> 00:19:23,135
Obviously, the smoke material in this demo aren't great,

314
00:19:23,175 --> 00:19:25,376
but alongside this, we've been working

315
00:19:25,436 --> 00:19:27,457
on some significant rendering improvements

316
00:19:27,637 --> 00:19:30,919
that give us confidence in producing some thicker smoke

317
00:19:30,959 --> 00:19:31,459
materials.

318
00:19:33,120 --> 00:19:34,941
But first, let's go back to Forza Horizon 4

319
00:19:35,201 --> 00:19:37,282
to talk a bit about the pre-existing issues.

320
00:19:38,462 --> 00:19:41,024
Our particle lighting model was not fully featured

321
00:19:41,164 --> 00:19:42,064
as the rest of the game.

322
00:19:42,765 --> 00:19:44,586
Each billboard had a lighting value

323
00:19:44,666 --> 00:19:47,287
that was average of its four vertices.

324
00:19:48,159 --> 00:19:52,281
This led to strange visual behaviors in areas of mixed light and shadow.

325
00:19:53,202 --> 00:19:56,923
The solution at the time was to reduce opacity and increase translucency,

326
00:19:57,284 --> 00:20:02,046
leading to rather weak tire smoke and trails that don't light appropriately.

327
00:20:03,207 --> 00:20:08,229
Here you can see some Forza Horizon 4 tests on fine-tuning translucency value,

328
00:20:08,769 --> 00:20:12,951
which in effect lowered the amount of shadow details available to our particles

329
00:20:13,031 --> 00:20:16,933
by adding the light from the other side of the billboard.

330
00:20:18,062 --> 00:20:24,928
So here we have a comparison of our old particle lighting model on the top with the new one at the bottom.

331
00:20:25,529 --> 00:20:29,833
We now have per pixel light and shadow, a massive improvement.

332
00:20:29,973 --> 00:20:35,378
And as you can see, the particles reading is more closely aligned with the rest of the game world.

333
00:20:36,533 --> 00:20:40,214
On the right, we also have a new six-directional light map shader,

334
00:20:40,534 --> 00:20:43,935
which again gives us more confidence in using thicker clouds,

335
00:20:44,275 --> 00:20:49,437
as now we can bake it into the info for the light scattering through from behind.

336
00:20:49,457 --> 00:20:53,338
To quickly recap how we improved our tire smoke.

337
00:20:53,658 --> 00:20:58,179
So, we've created a new bespoke smoke controls that we plug directly into the effect.

338
00:20:58,859 --> 00:21:02,700
In combination with the new tire emitter, we can change all kinds of behavior

339
00:21:03,220 --> 00:21:05,661
according to the temperature and movement of the tire.

340
00:21:06,622 --> 00:21:16,124
Tire smoke behavior now reacts more realistically according to what the wheel is doing and how hot the tire is, giving us a satisfying ramp up over time.

341
00:21:16,885 --> 00:21:25,007
And per-pixel lighting and our new six-directional smoke materials allow for bellowing, lingering smoke to look good.

342
00:21:25,707 --> 00:21:30,548
And now we are happy to leave smoke particles lingering in the world for some time.

343
00:21:31,043 --> 00:21:35,345
time, and that in turn allows players to create long, satisfying burnouts.

344
00:21:36,185 --> 00:21:39,607
With all ingredients in place, let's take a look at what we've created.

345
00:21:47,390 --> 00:21:52,613
Here you can see how results of our work compare to what we had previously.

346
00:21:53,213 --> 00:21:59,796
Notice how in a lot of the cases our new tire smoke ramps up from thin to thick and billowy.

347
00:22:01,530 --> 00:22:03,850
Well, and being such a core part of the game,

348
00:22:03,950 --> 00:22:07,571
it's great to see that it was well-received by the players

349
00:22:07,731 --> 00:22:09,532
and reviewers alike.

350
00:22:10,092 --> 00:22:13,293
We were really happy by the amount of great photos

351
00:22:13,393 --> 00:22:16,013
that our players community created in photo mode,

352
00:22:16,893 --> 00:22:18,694
specifically showcasing new Tire Smoke.

353
00:22:20,594 --> 00:22:21,935
One more thing before we move on.

354
00:22:22,375 --> 00:22:24,935
Having the ability to do what we like with data

355
00:22:25,215 --> 00:22:27,176
allowed us to create some cool new features.

356
00:22:28,344 --> 00:22:33,307
By tracking the car volume, we can determine if the smoke is inside the car and change

357
00:22:33,447 --> 00:22:34,067
its behavior.

358
00:22:34,868 --> 00:22:39,310
For example, as you can see on this video, we can fade out smoke over time to give the

359
00:22:39,810 --> 00:22:43,152
impression that you've dispersed it with your car.

360
00:22:47,264 --> 00:22:49,465
We've made a good progress with the tire smoke,

361
00:22:49,845 --> 00:22:52,246
but what about the kick-ups we expect

362
00:22:52,266 --> 00:22:53,627
to see when we go off-road?

363
00:22:54,527 --> 00:22:56,628
But first, let's look back at what challenges

364
00:22:56,648 --> 00:22:59,289
awaited us when we started creating kick-up effects.

365
00:23:00,588 --> 00:23:05,572
Every Forza Horizon game is more demanding than the last when it comes to kick-up effects,

366
00:23:05,892 --> 00:23:11,917
as our entire art team is always pushing boundaries and trying to make each location in our game

367
00:23:12,017 --> 00:23:13,639
as varied as possible.

368
00:23:14,299 --> 00:23:19,183
The VFX team need to have an appropriate effect ready for every terrain material in the game.

369
00:23:20,524 --> 00:23:24,468
To better illustrate this, here's a quick selection of several biomes from the game,

370
00:23:24,508 --> 00:23:26,189
but there are many more to account for.

371
00:23:27,075 --> 00:23:31,540
There were at least 120 materials to keep track of across four seasons.

372
00:23:32,320 --> 00:23:35,483
This can be blended together into all sorts of combinations.

373
00:23:35,964 --> 00:23:37,385
That's a lot of ground to cover.

374
00:23:38,346 --> 00:23:43,971
Previously, we would duplicate an existing effect and tweak it to suit each surface in the game.

375
00:23:44,392 --> 00:23:46,874
And obviously, this is a very cumbersome approach.

376
00:23:47,295 --> 00:23:51,178
So, this time around, we decided that we can come up with a better solution.

377
00:23:53,016 --> 00:23:57,999
Considering previous success with receiving data from the game, we asked our VFX-friendly

378
00:23:58,179 --> 00:24:02,961
rendering engineer to give us the ability to send parameters of our choosing from the

379
00:24:03,001 --> 00:24:06,283
game to the effect based on the underlying surface.

380
00:24:07,664 --> 00:24:12,786
When we received this functionality, we started by feeding in different flow3 color to the

381
00:24:12,826 --> 00:24:15,468
same effect depending on what surface called for it.

382
00:24:16,783 --> 00:24:21,485
Here's an example of this in use on a cluster of fairly similar

383
00:24:21,545 --> 00:24:22,766
but distinct surface.

384
00:24:23,366 --> 00:24:25,387
We use a single effect that is selecting

385
00:24:25,448 --> 00:24:27,309
between some nice bright debug colors,

386
00:24:27,949 --> 00:24:30,991
depending on what the tire is actually touching.

387
00:24:32,812 --> 00:24:36,453
Empowered by the ability to feed a color into the effect,

388
00:24:36,754 --> 00:24:39,475
we start to group up similar surface types

389
00:24:39,515 --> 00:24:41,596
to see what we could put this to use.

390
00:24:42,571 --> 00:24:44,632
Here's a list of sand kickups effect

391
00:24:44,672 --> 00:24:47,073
that we ended up with in Forza Horizon 4.

392
00:24:47,673 --> 00:24:49,614
We have three base colors of sand,

393
00:24:49,934 --> 00:24:52,135
each with a compact and deeper version.

394
00:24:52,695 --> 00:24:54,836
Some of those were also kicking up stones,

395
00:24:55,376 --> 00:24:57,016
some that were red, et cetera.

396
00:24:58,077 --> 00:25:01,678
Based on that experience, we realized

397
00:25:01,718 --> 00:25:03,499
that if we can use parameters

398
00:25:03,659 --> 00:25:05,520
for more than just palette swapping,

399
00:25:05,600 --> 00:25:09,041
we can really streamline the process of kickups creation.

400
00:25:10,162 --> 00:25:14,004
For example, here we have three sand types from the west coast,

401
00:25:14,224 --> 00:25:15,745
and it's adjoining sand desert.

402
00:25:16,666 --> 00:25:19,068
Some sand here have a lot of stones mixed to it.

403
00:25:19,688 --> 00:25:20,949
The other one is very deep.

404
00:25:21,049 --> 00:25:24,511
So we don't want kickup's effect for those to be identical.

405
00:25:25,252 --> 00:25:27,093
But we also would like to avoid having

406
00:25:27,133 --> 00:25:30,455
to maintain an entirely new effect every time.

407
00:25:31,636 --> 00:25:33,357
So how could we do this?

408
00:25:34,398 --> 00:25:36,520
What if we also thought about the amount of sand

409
00:25:36,540 --> 00:25:37,460
that should be kicked up?

410
00:25:38,475 --> 00:25:42,017
that relates to the depth of the matter that is being pushed around

411
00:25:42,657 --> 00:25:44,979
or that the tire sinks into the surface.

412
00:25:46,139 --> 00:25:49,041
The core behavior is much the same, just a different density,

413
00:25:49,681 --> 00:25:54,284
from thin layers of compacted sand through to the soft, deep, deformable sand dunes.

414
00:25:55,145 --> 00:25:59,007
So we thought maybe Olki-Kaap's effects with the sand trail component

415
00:25:59,067 --> 00:26:00,708
could be a single master effect,

416
00:26:01,328 --> 00:26:06,151
which effect Float 4 suddenly transforms depending on the depth of the terrain.

417
00:26:07,469 --> 00:26:09,010
Let's go back to our previous example.

418
00:26:09,350 --> 00:26:12,972
Our float 3 is now float 4, the extra channel being depth.

419
00:26:13,973 --> 00:26:16,675
And as you can see, we use this to drive

420
00:26:16,735 --> 00:26:17,996
the size of the particle.

421
00:26:19,156 --> 00:26:20,037
But why stop there?

422
00:26:20,217 --> 00:26:22,899
There is no reason that this attribute cannot drive

423
00:26:22,999 --> 00:26:24,620
multiple aspects of the effect.

424
00:26:25,220 --> 00:26:28,162
Like, for example, emitted sound opacity levels.

425
00:26:29,162 --> 00:26:31,544
So let's put this into practice and define

426
00:26:31,584 --> 00:26:34,546
the RGB and depth for each kickup in the same float 4.

427
00:26:36,025 --> 00:26:38,685
This is how our different kickups look in XML.

428
00:26:39,546 --> 00:26:42,566
As an example, we use sundeep and sundeformable.

429
00:26:43,527 --> 00:26:47,147
This is our float4 that defines the color via RGB,

430
00:26:47,227 --> 00:26:48,988
and the last parameter defines the depth.

431
00:26:50,928 --> 00:26:54,129
This depth, in effect, will be used in a similar way

432
00:26:54,169 --> 00:26:56,290
to the temperature input for the tire smoke.

433
00:26:56,810 --> 00:26:59,870
We use depth to decide if the surface should use a thin

434
00:27:00,311 --> 00:27:01,631
or thick cloud materials.

435
00:27:03,305 --> 00:27:05,346
We've simplified the logic inside our effect

436
00:27:05,366 --> 00:27:08,888
for this example a bit, but we listened to the dust RGB

437
00:27:09,148 --> 00:27:12,990
attribute and split that into RGB and force channel depth.

438
00:27:13,750 --> 00:27:16,411
This depth value is used to learn between min and max

439
00:27:16,451 --> 00:27:20,773
values contained in float 2s to the left.

440
00:27:21,094 --> 00:27:22,954
This allows many aspects of the effect

441
00:27:22,994 --> 00:27:25,175
to be driven by this one input.

442
00:27:26,056 --> 00:27:27,436
The rest of the effect is controlled

443
00:27:27,537 --> 00:27:29,798
using previously demonstrated panel of inputs

444
00:27:29,938 --> 00:27:31,398
on the tire emitter system.

445
00:27:32,599 --> 00:27:32,679
So.

446
00:27:33,616 --> 00:27:35,697
We decided to take it even a step farther

447
00:27:36,158 --> 00:27:39,500
by adding another float4 to control a debris element

448
00:27:39,820 --> 00:27:41,000
with a range of properties.

449
00:27:41,060 --> 00:27:43,742
We already have RGB, so we don't necessarily

450
00:27:43,802 --> 00:27:45,343
need that to duplicate.

451
00:27:46,244 --> 00:27:49,285
But we could use one channel to control the type of debris,

452
00:27:49,906 --> 00:27:51,987
another for the spawn count of that debris,

453
00:27:52,908 --> 00:27:55,509
the base size of debris, and finally,

454
00:27:55,689 --> 00:27:57,811
a control for which quality setting platforms

455
00:27:57,831 --> 00:27:59,191
this debris appears on.

456
00:28:00,133 --> 00:28:02,475
Now, with this setup, we can not only output

457
00:28:02,595 --> 00:28:04,677
sand of different color, size, and opacity,

458
00:28:04,717 --> 00:28:07,339
but also rise debris types to it.

459
00:28:10,161 --> 00:28:13,023
This example demonstrates how we go between those min

460
00:28:13,103 --> 00:28:16,606
and max depth values and also how those additional debris

461
00:28:16,646 --> 00:28:17,367
types looks like.

462
00:28:18,107 --> 00:28:20,429
Remind you, this is actually the same effect,

463
00:28:20,509 --> 00:28:23,592
and we just fit different input data to it from the game,

464
00:28:23,792 --> 00:28:27,315
and it outputs us very different visual results.

465
00:28:29,070 --> 00:28:32,173
In going through this process, we made some discoveries that

466
00:28:32,433 --> 00:28:33,053
surprised us.

467
00:28:33,894 --> 00:28:36,836
We found that using fewer but more complex and adaptable

468
00:28:36,876 --> 00:28:40,598
effects was significantly cheaper for our CPU task usage

469
00:28:40,658 --> 00:28:43,741
than numerous simpler effects in these situations.

470
00:28:44,921 --> 00:28:47,703
Popcorn FX scales very well as you add more particles

471
00:28:47,803 --> 00:28:49,064
to an existing system.

472
00:28:49,785 --> 00:28:54,048
This was very important when we ran into some CPU bottlenecks

473
00:28:54,108 --> 00:28:54,488
at times.

474
00:28:55,949 --> 00:28:57,530
The more coverage we could get from

475
00:28:57,960 --> 00:29:00,322
this master effects, the better our performance.

476
00:29:01,303 --> 00:29:03,284
This allowed us to propagate optimization

477
00:29:03,444 --> 00:29:05,986
easily to all keycaps across seven platforms,

478
00:29:06,566 --> 00:29:09,828
creating scalable effects that work on base Xbox One

479
00:29:10,248 --> 00:29:14,011
through Xbox Series X and top-end PCs.

480
00:29:15,492 --> 00:29:18,534
This was vital in a game where it's common for 12 cars

481
00:29:19,134 --> 00:29:22,536
to be traversing the world at anywhere up to 300 miles

482
00:29:22,596 --> 00:29:25,078
per hour, crossing numerous surfaces per second.

483
00:29:26,499 --> 00:29:29,642
So at that point, we were quite happy with the effects

484
00:29:29,702 --> 00:29:30,522
that we produced.

485
00:29:31,363 --> 00:29:34,966
Those effects played a big role in our game promo materials.

486
00:29:35,606 --> 00:29:38,088
And our players community just loved them

487
00:29:38,508 --> 00:29:41,731
and created so many great photos showcasing our kick up effects.

488
00:29:43,913 --> 00:29:46,675
The next good use case would be a smashable effects.

489
00:29:47,555 --> 00:29:49,797
So what were our production goals

490
00:29:49,837 --> 00:29:51,338
for the so-called smashable effects?

491
00:29:52,595 --> 00:29:55,738
First and foremost, our effects should look and react naturally

492
00:29:55,878 --> 00:29:58,019
to the forces at play when the car smashes

493
00:29:58,120 --> 00:29:59,481
a destructible asset.

494
00:30:02,583 --> 00:30:04,705
Also, our world is densely populated

495
00:30:04,785 --> 00:30:05,965
with those smashable props.

496
00:30:06,766 --> 00:30:08,688
Early production estimates put them

497
00:30:08,728 --> 00:30:11,590
on to about 500 unique assets, and each

498
00:30:11,710 --> 00:30:13,151
required appropriate effect.

499
00:30:14,132 --> 00:30:16,193
So how do we build one of these?

500
00:30:17,118 --> 00:30:18,798
Based on our previous experience,

501
00:30:19,038 --> 00:30:22,159
we started by identifying key parameters for us

502
00:30:22,219 --> 00:30:22,819
to listen to.

503
00:30:23,880 --> 00:30:27,021
Those were the impact energy and focus car velocity.

504
00:30:27,961 --> 00:30:31,582
The impact energy is used to determine the spound count.

505
00:30:32,082 --> 00:30:34,463
The harder they impact, the more particles

506
00:30:34,623 --> 00:30:36,063
that will fly up into the air.

507
00:30:37,203 --> 00:30:39,124
From there, we add the basic behaviors

508
00:30:39,164 --> 00:30:42,165
that calculate the initial velocity of any debris.

509
00:30:43,021 --> 00:30:49,027
We consider how much we want the impact energy to scale the overall movement of the emitted particles.

510
00:30:50,108 --> 00:30:56,134
And we take into account the velocity of the car that has just broken the destructible asset to trigger this effect.

511
00:30:57,295 --> 00:31:01,999
We also added some external controls to allow this template to be used and reused.

512
00:31:02,600 --> 00:31:07,304
Externally, we control the overall velocity spread, direction, min and max.

513
00:31:09,005 --> 00:31:11,067
Taking this initial velocity stack,

514
00:31:11,087 --> 00:31:13,788
we then also define the physical properties

515
00:31:13,869 --> 00:31:14,829
of the smashed debris.

516
00:31:15,830 --> 00:31:17,751
Size and density are used to calculate

517
00:31:17,811 --> 00:31:19,152
the mass per particle.

518
00:31:19,832 --> 00:31:23,675
Then we use consistent, accurate gravity and wind settings

519
00:31:23,755 --> 00:31:27,698
across all effects for natural and cohesive behavior.

520
00:31:29,599 --> 00:31:32,581
This video demonstrates how the previous system come together

521
00:31:32,721 --> 00:31:33,241
in Editor.

522
00:31:34,162 --> 00:31:35,803
Using the control panel on the left,

523
00:31:35,863 --> 00:31:36,543
we can test how.

524
00:31:37,118 --> 00:31:41,019
our effects looks with low impact energy and high impact energy.

525
00:31:41,980 --> 00:31:47,262
We can also preview our effects simulating various car velocities and different impact

526
00:31:47,322 --> 00:31:47,882
directions.

527
00:31:49,243 --> 00:31:55,425
So after creating this template and solving basic behaviors of the debris, it was time

528
00:31:56,446 --> 00:32:00,467
for us to again think about how we would create all the effects that are needed.

529
00:32:01,476 --> 00:32:09,798
Inspired by the kickup system, we implemented a similar XML-based solution to drive smashable effects variation from within the master effect.

530
00:32:10,858 --> 00:32:18,060
We extended it further with couple of additional float4s to allow for texture selection using the uber material.

531
00:32:19,081 --> 00:32:25,022
And to create a new effect, we just need to add several new lines in our XML file and assign it to the prop.

532
00:32:27,744 --> 00:32:33,606
To handle so much variety, we define an indexed list of presets for each type of debris, in

533
00:32:33,646 --> 00:32:34,406
this case rocks.

534
00:32:35,327 --> 00:32:40,528
By doing this, we are allowing to select a specific size, color, and other parameters

535
00:32:40,568 --> 00:32:44,390
from predefined lists by single float in the XML.

536
00:32:46,190 --> 00:32:49,231
This is how our smashable master effect looks from upper layer.

537
00:32:50,272 --> 00:32:55,153
It can be a little bit complicated, but this is how we get all this to work in a single

538
00:32:55,193 --> 00:32:55,713
effect file.

539
00:32:57,461 --> 00:32:59,383
When the car smashes one of the prop,

540
00:32:59,563 --> 00:33:03,326
it sets a specific lot form from the XML to our effect.

541
00:33:04,227 --> 00:33:06,749
Using those, we select color and the size

542
00:33:06,789 --> 00:33:09,071
of the debris from predefined index lists

543
00:33:09,111 --> 00:33:10,352
shown in the previous slide.

544
00:33:11,273 --> 00:33:13,635
We also determine how many particles

545
00:33:13,795 --> 00:33:15,376
and of which type we should spawn.

546
00:33:16,137 --> 00:33:19,280
We select between slate, big rocks, dust, sparks,

547
00:33:19,400 --> 00:33:21,442
wood splinters, plastic parts, et cetera.

548
00:33:23,005 --> 00:33:26,528
After that, all the information comes together inside the effect layer,

549
00:33:26,568 --> 00:33:32,133
where we also use car physics data to determine velocity, direction,

550
00:33:32,273 --> 00:33:34,675
and other properties of the spawn debris.

551
00:33:36,337 --> 00:33:38,158
And this is how our system behaves in-game.

552
00:33:39,399 --> 00:33:42,162
With some careful consideration and categorization,

553
00:33:42,222 --> 00:33:45,625
we were able to cover these 500 plus mashable props

554
00:33:45,665 --> 00:33:48,547
with just two master effects and XML file.

555
00:33:49,557 --> 00:33:52,119
This approach again led us to massive performance savings

556
00:33:52,219 --> 00:33:54,580
in a situation like in this video

557
00:33:54,620 --> 00:33:56,181
when the player is constantly breaking

558
00:33:56,281 --> 00:33:58,182
a wide variety of props.

559
00:33:59,783 --> 00:34:01,524
Let's quickly recap what we ended up with.

560
00:34:01,924 --> 00:34:03,505
So with our new approach,

561
00:34:03,665 --> 00:34:05,406
almost all our smashable effects

562
00:34:05,506 --> 00:34:06,827
are now being batched together.

563
00:34:07,667 --> 00:34:09,588
Essentially, we have the same two effects

564
00:34:10,229 --> 00:34:12,570
being called over and over again

565
00:34:12,710 --> 00:34:15,172
in a new position with an appropriate attribute.

566
00:34:16,132 --> 00:34:18,714
This resulted in massively reduced draw calls

567
00:34:18,794 --> 00:34:20,795
when player performed extreme landscaping,

568
00:34:21,095 --> 00:34:23,256
wreaking havoc upon everything in their path.

569
00:34:24,517 --> 00:34:26,718
This allowed a single emitter

570
00:34:28,540 --> 00:34:31,501
to be used to output numerous distinct debris types,

571
00:34:31,761 --> 00:34:33,783
smoke and dust, and also meshes.

572
00:34:35,664 --> 00:34:37,565
This greatly reduced CPU task time

573
00:34:37,645 --> 00:34:39,306
as it required less duplication.

574
00:34:39,546 --> 00:34:41,087
As we've previously mentioned,

575
00:34:41,147 --> 00:34:44,389
PopcornFX prefers fewer but more complex effects.

576
00:34:45,200 --> 00:34:47,041
If we did this with individual layers,

577
00:34:47,081 --> 00:34:50,083
we'd have to pay extra CPU time for each one.

578
00:34:52,164 --> 00:34:54,185
Now we are going to dive a little deeper

579
00:34:54,225 --> 00:34:57,286
into this notion of payloading and making

580
00:34:57,366 --> 00:34:59,327
the most of a single simulation layer,

581
00:34:59,827 --> 00:35:02,769
looking at how we use that to create waterfalls and much,

582
00:35:02,809 --> 00:35:03,189
much more.

583
00:35:04,429 --> 00:35:07,711
So we do this using what we call batch templates.

584
00:35:08,291 --> 00:35:10,032
These apply many of the principles

585
00:35:10,272 --> 00:35:11,713
that we've already covered today,

586
00:35:12,313 --> 00:35:14,234
but within a single particle system.

587
00:35:15,130 --> 00:35:17,811
To better explain how we do this, let's take a look

588
00:35:17,831 --> 00:35:19,091
together at a simple example.

589
00:35:20,572 --> 00:35:23,252
All the physics simulation happens in a single layer.

590
00:35:23,492 --> 00:35:26,233
But instead of defining input data inside this layer,

591
00:35:26,573 --> 00:35:30,494
we use intermediary layer where we payload data,

592
00:35:30,554 --> 00:35:33,935
like position, orientation, color, and lifetime,

593
00:35:34,015 --> 00:35:37,676
and send it to our physics simulation layer.

594
00:35:39,776 --> 00:35:43,757
And as a resulting effect, we have this stream of balloons.

595
00:35:45,401 --> 00:35:48,764
We convert our payload layer into template, the batch

596
00:35:48,804 --> 00:35:51,165
template, and reuse it several times over.

597
00:35:51,305 --> 00:35:53,147
But every version of this payload

598
00:35:53,227 --> 00:35:55,909
is now sending different data to the batch layer.

599
00:35:57,990 --> 00:35:58,291
Sorry.

600
00:36:02,534 --> 00:36:07,998
So all the data is extracted to achieve

601
00:36:08,038 --> 00:36:09,099
different visual outcomes.

602
00:36:09,179 --> 00:36:12,622
And now we have three visually different streams of balloons.

603
00:36:13,433 --> 00:36:15,574
But the physics simulation for all of them

604
00:36:15,794 --> 00:36:17,394
is happening in the same layer.

605
00:36:19,135 --> 00:36:21,635
All the waterfall streams, splashes,

606
00:36:21,815 --> 00:36:24,896
and mist in this cenote are placed using this method.

607
00:36:25,676 --> 00:36:29,177
All the VFX you see here are just a single particle system

608
00:36:29,197 --> 00:36:33,078
with two simulation layers and a whole bunch of payloaded data.

609
00:36:33,698 --> 00:36:36,159
This massively reduces CPU task duplication

610
00:36:36,199 --> 00:36:39,780
that would happen if we would be doing this individually.

611
00:36:40,933 --> 00:36:43,054
Here we can see a list of payloaded data

612
00:36:43,534 --> 00:36:45,475
that are attached to each spawn event that

613
00:36:45,515 --> 00:36:48,576
goes into the simulation layer for the CNOT water streams.

614
00:36:49,417 --> 00:36:53,138
We feed data like position, size of emission zone, orientation,

615
00:36:53,478 --> 00:36:55,159
particle size, and so on.

616
00:36:56,199 --> 00:36:59,061
Inside the layer, the data is extracted and put

617
00:36:59,241 --> 00:37:02,042
to use in the common logic for each stream of water

618
00:37:02,582 --> 00:37:04,603
in the same way that we showed in the beginning

619
00:37:04,703 --> 00:37:06,503
with the waterfall balloons example.

620
00:37:08,164 --> 00:37:10,006
This is an editor example.

621
00:37:10,046 --> 00:37:12,768
You can see payloads being used to drive one stream.

622
00:37:12,928 --> 00:37:15,710
Then we activate numerous other streams

623
00:37:15,890 --> 00:37:18,853
that we find that the final waterfall consists from.

624
00:37:20,915 --> 00:37:23,357
We also use the same payloading approach

625
00:37:23,417 --> 00:37:25,618
for the splashes layer and the mist,

626
00:37:26,299 --> 00:37:29,121
and we have the combined effect in the editor.

627
00:37:30,903 --> 00:37:32,224
Back to the game for comparison.

628
00:37:32,864 --> 00:37:33,945
As mentioned previously,

629
00:37:34,225 --> 00:37:36,487
this is a very CPU-friendly approach.

630
00:37:37,168 --> 00:37:40,109
And therefore, this technique is used widely across the game.

631
00:37:41,929 --> 00:37:44,270
For example, the cloudscape, steam vents,

632
00:37:44,350 --> 00:37:46,931
and volcanic plumes in our game initial drive

633
00:37:47,131 --> 00:37:49,251
are created using this workflow.

634
00:37:52,172 --> 00:37:54,413
And our version of the dust storm

635
00:37:54,673 --> 00:37:56,993
is also using a lot of the same principles.

636
00:38:02,895 --> 00:38:05,156
OK, let's sum up what we showed today.

637
00:38:06,156 --> 00:38:06,276
So.

638
00:38:07,427 --> 00:38:11,591
Start off by identifying a couple of key parameters for your effect.

639
00:38:11,711 --> 00:38:14,193
Design the system around this as inputs.

640
00:38:15,394 --> 00:38:19,557
Effects created that way can adapt to gameplay by reading necessary data.

641
00:38:20,918 --> 00:38:26,243
Later on, you can easily overhaul your effects or create variety by defining variants through

642
00:38:26,263 --> 00:38:28,064
an XML or in some other way.

643
00:38:29,245 --> 00:38:30,386
This approach could still be

644
00:38:30,971 --> 00:38:36,893
valuable even without external inputs as you can easily define or embed all needed data in the

645
00:38:36,913 --> 00:38:45,036
effect itself. I also would highly recommend a talk from GDC 2021 that touches on a lot of

646
00:38:45,136 --> 00:38:50,318
same topics that we discussed today. It's called how to build complex VFX system with simple

647
00:38:50,378 --> 00:38:53,839
controls. So templates are good.

648
00:38:54,556 --> 00:38:56,776
Designing useful templates when you start working

649
00:38:56,816 --> 00:38:59,417
on a big effects group can pay off tenfold later on

650
00:38:59,557 --> 00:39:01,517
in a project in many ways.

651
00:39:02,358 --> 00:39:05,558
With templates, making consistent behaviors become easier.

652
00:39:06,018 --> 00:39:09,599
You only need to make a tweak once to have it inherited

653
00:39:10,019 --> 00:39:11,340
by the family of the effects.

654
00:39:12,080 --> 00:39:15,441
In each cases, workarounds or exceptions can be done

655
00:39:15,901 --> 00:39:18,361
by creating a local copy of templates.

656
00:39:18,601 --> 00:39:20,662
You just need to identify what you don't want

657
00:39:20,702 --> 00:39:22,942
to propagate changes to all dependencies.

658
00:39:25,015 --> 00:39:27,536
The approach we took proved very efficient

659
00:39:27,576 --> 00:39:29,356
in terms of development time cost,

660
00:39:29,496 --> 00:39:31,537
as we had to create all effects for our game

661
00:39:31,737 --> 00:39:33,237
from almost from scratch.

662
00:39:34,437 --> 00:39:38,018
With SkickUps, what used to be 100 distinct complex files

663
00:39:38,098 --> 00:39:41,198
is now fewer than 10 effects and XML document.

664
00:39:42,359 --> 00:39:45,019
And with Smashables, over 500 distinct props

665
00:39:45,279 --> 00:39:48,340
are covered by two master effects and XML.

666
00:39:50,000 --> 00:39:52,661
All of this also gave us huge performance benefits

667
00:39:52,701 --> 00:39:54,241
that allowed to successfully.

668
00:39:54,812 --> 00:39:57,613
scale our effects for various platforms.

669
00:39:59,293 --> 00:40:02,354
OK, and well, that's all from me for today.

670
00:40:02,454 --> 00:40:03,894
But before we wrap up, I would like

671
00:40:03,954 --> 00:40:06,475
to say thank you to the team behind Forza Horizon 5.

672
00:40:06,855 --> 00:40:12,436
So first, thanks to our great VFX team, Carl Sear, John Reeds,

673
00:40:12,516 --> 00:40:13,596
and Michele Talentino.

674
00:40:14,297 --> 00:40:16,357
Big thanks to Josh Alenia and Paul Benson

675
00:40:16,397 --> 00:40:19,598
from rendering team, and Marco Conti and Chris Phillips

676
00:40:19,638 --> 00:40:20,778
from vehicle handling.

677
00:40:21,598 --> 00:40:22,178
And I also would.

678
00:40:22,545 --> 00:40:24,889
like to say thank you to our art directors,

679
00:40:24,989 --> 00:40:28,334
Donner, Seta, and Conor Cross for pushing our effects

680
00:40:28,374 --> 00:40:29,416
to be at their best.

681
00:40:30,637 --> 00:40:32,961
And everybody else at Playground Games.

682
00:40:34,663 --> 00:40:37,888
And of course, thank you all for listening and any questions.

683
00:40:49,863 --> 00:40:50,723
Hi, thanks for your talk.

684
00:40:52,024 --> 00:40:54,605
I was curious, it sounds like you're basically doing

685
00:40:54,985 --> 00:40:57,967
effects emission based upon the material name,

686
00:40:58,907 --> 00:41:03,769
but materials can vary across, say, the material itself.

687
00:41:04,089 --> 00:41:06,390
Are you reading the textures like, oh, there's

688
00:41:06,431 --> 00:41:08,511
a puddle here, but there's not a puddle here,

689
00:41:08,632 --> 00:41:10,692
because you're dynamically deciding that in the shader

690
00:41:10,732 --> 00:41:11,093
or something?

691
00:41:12,833 --> 00:41:17,256
So in our terrain texturing system,

692
00:41:17,316 --> 00:41:19,056
we had a lot of those materials.

693
00:41:19,376 --> 00:41:19,457
And

694
00:41:19,971 --> 00:41:28,542
We had also so-called surface types that kind of had the visual material side in it,

695
00:41:28,602 --> 00:41:36,853
but also there was obviously parameters from game design in terms of how the car behaves on that material,

696
00:41:36,893 --> 00:41:37,794
if it's sand or...

697
00:41:38,537 --> 00:41:41,139
like a tarmac road and stuff like that and also audio.

698
00:41:41,299 --> 00:41:47,104
And we also use those to define what kind of emission

699
00:41:47,884 --> 00:41:50,446
we would like to do in our master effects.

700
00:41:51,027 --> 00:41:51,647
Got it, thanks.

701
00:41:54,690 --> 00:41:57,212
Thank you once again, I appreciate listening

702
00:41:57,472 --> 00:41:58,373
to your talk today.

703
00:41:59,394 --> 00:42:03,877
I wanted to know, in comparison to Forza Horizon 4,

704
00:42:05,018 --> 00:42:06,720
how much more resource intensive

705
00:42:06,860 --> 00:42:08,101
did these effects end up being?

706
00:42:10,726 --> 00:42:12,789
Sorry, can you define resource?

707
00:42:14,913 --> 00:42:18,819
So, I apologize.

708
00:42:19,399 --> 00:42:20,721
Texture CPU time?

709
00:42:21,222 --> 00:42:21,483
CPU.

710
00:42:22,948 --> 00:42:29,791
OK, so we had 2.5 milliseconds of CPU budget

711
00:42:29,891 --> 00:42:31,251
across any kind of platform.

712
00:42:31,311 --> 00:42:35,973
So it's the same on Xbox One and Xbox Series X.

713
00:42:36,493 --> 00:42:39,694
Obviously, 2.5 milliseconds on Xbox Series X

714
00:42:39,774 --> 00:42:41,655
is quite different from Xbox One.

715
00:42:42,335 --> 00:42:45,536
But we were constantly staying in that budget.

716
00:42:45,716 --> 00:42:48,917
And in some cases, we also had to even cut lower than that,

717
00:42:50,404 --> 00:42:55,528
Our environment were like really complex with some additional props on Xbox one

718
00:42:55,568 --> 00:43:03,095
So yeah, basically I'll be never were higher than 2.5 milliseconds overall. Thank you

719
00:43:05,041 --> 00:43:12,528
Hey, awesome. Two questions. Are you guys on the same engine as the Force of Motorsports guys? Just out of curiosity.

720
00:43:12,588 --> 00:43:19,994
And two, your guys' HDR skies and rendering is probably one of the best that I've seen out there.

721
00:43:20,095 --> 00:43:21,636
It's really beautifully done.

722
00:43:23,698 --> 00:43:28,602
What on the particle side did you guys have to adjust at all for the HDR rendering?

723
00:43:31,683 --> 00:43:38,665
So yeah, that's correct. We are sharing the fuel engine with a Terentan and Forza Motorsport title.

724
00:43:40,466 --> 00:43:50,268
And on the sky setup. So yeah, basically our sky rig, as you probably saw in some GDC talks

725
00:43:50,688 --> 00:43:57,290
back from the years, is we just capture the sky in various different scenarios and use that with a

726
00:44:00,099 --> 00:44:02,721
motion vectors to kind of make it look

727
00:44:04,022 --> 00:44:09,766
most realistic that we can do. And on the effects side, in some cases, in some scenarios where

728
00:44:10,147 --> 00:44:15,271
the player was on the top of the mountain, we added some additional kind of low-lying clouds

729
00:44:16,211 --> 00:44:16,952
overall to

730
00:44:18,647 --> 00:44:23,190
to mimic some clouds that we saw on the sky itself.

731
00:44:23,390 --> 00:44:30,136
Obviously it's pretty hard to do because like you have this perfect picture of realistic sky

732
00:44:30,596 --> 00:44:36,721
and you're trying to mimic that with particles so there wasn't any space for

733
00:44:39,523 --> 00:44:43,886
doing something kind of a little bit stylized we had to

734
00:44:44,847 --> 00:44:47,249
yeah make it as much realistic as we can.

735
00:44:48,185 --> 00:44:48,825
Cool, thank you.

736
00:44:52,126 --> 00:44:55,207
Hello, thanks for the talk, it was super interesting.

737
00:44:55,667 --> 00:44:59,108
And I was wondering if you had some overdoer issues

738
00:44:59,168 --> 00:45:01,349
because I noticed that when you have objects

739
00:45:01,429 --> 00:45:03,329
which move very fast, like your cars,

740
00:45:03,769 --> 00:45:06,090
you have to spawn a lot of particles

741
00:45:06,150 --> 00:45:08,150
to avoid gaps in between them, right?

742
00:45:09,051 --> 00:45:15,217
And so I was just wondering if the player positions, I don't know, the camera behind the car and you go through sand.

743
00:45:15,237 --> 00:45:21,162
I imagine like the PC or the Xbox just melting because of the overdrive.

744
00:45:21,362 --> 00:45:24,325
I wonder how you overcame this issue.

745
00:45:26,307 --> 00:45:26,487
So...

746
00:45:28,003 --> 00:45:31,068
With a lot of those kind of bigger particle effects,

747
00:45:31,148 --> 00:45:33,972
like the long trails of kickups or tire smoke,

748
00:45:34,373 --> 00:45:37,818
we actually use a quarter res rendering of those particles

749
00:45:38,459 --> 00:45:41,564
that kind of significantly improve the...

750
00:45:43,002 --> 00:45:44,082
GPU side of that.

751
00:45:45,483 --> 00:45:47,604
Yeah, and it all kind of worked.

752
00:45:48,584 --> 00:45:50,545
And obviously, for the lower platforms,

753
00:45:50,645 --> 00:45:55,207
we scaled down the emission counts of the particle system,

754
00:45:55,247 --> 00:45:55,667
et cetera.

755
00:45:56,307 --> 00:46:01,490
But we were kind of lowering the lifetime of the particles as

756
00:46:01,550 --> 00:46:04,431
well, so there won't be like dead zones

757
00:46:04,491 --> 00:46:05,991
between the particles that we emitted.

758
00:46:06,532 --> 00:46:08,252
The only thing that they would live.

759
00:46:11,049 --> 00:46:14,850
shorter life on the Xbox one compared to Xbox Series X

760
00:46:16,691 --> 00:46:19,172
Okay, thank you, and I was wondering

761
00:46:20,353 --> 00:46:24,175
Whenever I try to make such a dynamic system with these parameters

762
00:46:24,655 --> 00:46:27,556
I often run into edge cases just for example

763
00:46:27,576 --> 00:46:34,079
You mentioned that you can scale up and down the particle size depending on the speed right and it looks okay in 80% of the

764
00:46:35,540 --> 00:46:41,024
cases but if the car is very slow for example then you have mini particles which look a bit weird right

765
00:46:41,445 --> 00:46:47,049
and sometimes I run into these things and then I try I make add workarounds for these edge cages

766
00:46:47,109 --> 00:46:52,354
and at some point I have a system which is so complex that it's hard to extend because it's

767
00:46:52,394 --> 00:46:57,798
basically full of workarounds and I wonder how you covered these edge cases and made it just

768
00:46:58,179 --> 00:47:02,482
look good every time by not sacrificing the complexity of the system.

769
00:47:03,400 --> 00:47:06,182
So with example that you've just described,

770
00:47:07,142 --> 00:47:09,203
the good idea would be probably not to start

771
00:47:09,323 --> 00:47:11,144
with the size of the zero.

772
00:47:11,204 --> 00:47:13,525
You start with some predefined size

773
00:47:13,725 --> 00:47:15,786
and then there is a maximum as well.

774
00:47:16,226 --> 00:47:19,187
And you basically kind of lerping between those values

775
00:47:19,387 --> 00:47:21,708
depending on the parameters that you receive from game.

776
00:47:22,149 --> 00:47:25,010
So that was kind of basically our solution.

777
00:47:25,990 --> 00:47:29,392
Obviously, this all kind of required a lot of tweaking.

778
00:47:29,432 --> 00:47:31,733
So that's why in Popcorn FX,

779
00:47:31,773 --> 00:47:33,193
we had that panel with the.

780
00:47:33,603 --> 00:47:38,606
various attributes where we predefined some mean and max

781
00:47:38,686 --> 00:47:39,126
values.

782
00:47:39,686 --> 00:47:42,227
So the effect itself won't be breaking down,

783
00:47:42,327 --> 00:47:45,909
and we won't have that small, really small particles

784
00:47:46,729 --> 00:47:48,130
or something else like that.

785
00:47:49,150 --> 00:47:50,031
OK, thank you.

786
00:47:56,194 --> 00:47:56,494
Cool.

787
00:47:57,914 --> 00:47:59,395
I guess that's it in that case.

788
00:48:00,015 --> 00:48:00,576
Cheers again.

789
00:48:00,916 --> 00:48:02,656
Thanks all for coming, and don't forget

790
00:48:03,466 --> 00:48:05,047
Feel the evaluation.

