1
00:00:05,763 --> 00:00:07,966
Okay.

2
00:00:07,966 --> 00:00:08,747
Let's do this.

3
00:00:08,747 --> 00:00:19,864
["The Star-Spangled Banner"]

4
00:00:33,254 --> 00:00:33,637
You

5
00:01:23,819 --> 00:01:27,620
Well, we had a lot of water on Uncharted 3.

6
00:01:27,620 --> 00:01:30,201
This talk is about creating the flood effects in Uncharted 3.

7
00:01:30,201 --> 00:01:31,642
I've been Cook.

8
00:01:31,642 --> 00:01:32,662
I work at Naughty Dog.

9
00:01:32,662 --> 00:01:36,163
A little bit about me.

10
00:01:36,163 --> 00:01:40,085
I've been in the industry for about 11 years.

11
00:01:40,085 --> 00:01:43,806
Most of that has been at Electronic Arts, working on

12
00:01:43,806 --> 00:01:46,347
Medal of Honor, and then Naughty Dog, working on the

13
00:01:46,347 --> 00:01:47,827
Uncharted series.

14
00:01:47,827 --> 00:01:50,348
And now I'm working on The Last of Us, our new game,

15
00:01:50,348 --> 00:01:53,149
Naughty Dog, which looks really exciting.

16
00:01:53,958 --> 00:02:00,000
Um, let's see, uh, before all that, I studied graphic design,

17
00:02:00,000 --> 00:02:03,261
um, with a minor in computer science at the Uni- University

18
00:02:03,261 --> 00:02:07,462
of North Texas, and, uh, that computer science minor is

19
00:02:07,462 --> 00:02:11,404
becoming more and more valuable, uh, as a, affects artists in

20
00:02:11,404 --> 00:02:15,145
games, um, and I think it's gonna continue, uh, in that

21
00:02:15,145 --> 00:02:19,886
direction for sure. So, in Uncharted, we did lots of kinds

22
00:02:19,886 --> 00:02:23,628
of water, we did puddles, we did waterfalls.

23
00:02:24,923 --> 00:02:30,345
oceans and floods, which is what we're gonna talk about today.

24
00:02:30,345 --> 00:02:35,406
Uh, first of all I just wanted to give a shout out to the

25
00:02:35,406 --> 00:02:38,827
Naughty Dog engineers because they really do an amazing job at,

26
00:02:38,827 --> 00:02:42,368
um, eking all the performance out of, uh, the PS3 that's

27
00:02:42,368 --> 00:02:46,209
possible and, uh, we really couldn't get the, the level of

28
00:02:46,209 --> 00:02:50,951
visual quality that we get without their amazing work. So,

29
00:02:50,951 --> 00:02:51,711
first shout out.

30
00:02:54,167 --> 00:03:02,952
And this is the effect we're going to be looking at today.

31
00:03:02,952 --> 00:03:05,753
So as an artist, I look back on this,

32
00:03:05,753 --> 00:03:08,555
and I still just feel like there's something missing.

33
00:03:08,555 --> 00:03:11,737
It's kind of hard to put my finger on it, but maybe

34
00:03:11,737 --> 00:03:13,778
it's Subway sandwich.

35
00:03:13,778 --> 00:03:15,839
$5 for one.

36
00:03:17,564 --> 00:03:20,507
So to make the effect we started with a fluid sim.

37
00:03:20,507 --> 00:03:24,650
We did a pretty coarse fluid sim inside of Houdini.

38
00:03:24,650 --> 00:03:27,472
And we were able to iterate pretty quickly

39
00:03:27,472 --> 00:03:32,196
and use it as pre-visualization to work out timing

40
00:03:32,196 --> 00:03:35,119
and the flow and the amount of water

41
00:03:35,119 --> 00:03:40,243
and all those details pretty rapidly

42
00:03:40,243 --> 00:03:43,686
without having to go back and forth into the game.

43
00:03:44,311 --> 00:03:46,593
But it wasn't just for pre-visualization.

44
00:03:46,593 --> 00:03:50,036
We ended up using it throughout the whole production

45
00:03:50,036 --> 00:03:51,737
of the effect.

46
00:03:51,737 --> 00:03:57,022
We created the in-game mesh from the simulation.

47
00:03:57,022 --> 00:04:02,346
We also looked at the simulation for inspiration

48
00:04:02,346 --> 00:04:05,029
on where the particles should be spraying,

49
00:04:05,029 --> 00:04:09,732
and the direction, and speed, and all of that.

50
00:04:10,484 --> 00:04:15,125
And finally, we used the actual SIM data to push the rigid

51
00:04:15,125 --> 00:04:18,546
bodies, all the debris in the hallway, all the boxes and

52
00:04:18,546 --> 00:04:22,046
things, those are pushed along by the actual SIM data.

53
00:04:22,046 --> 00:04:25,607
And since the mesh came from the SIM data, the particles

54
00:04:25,607 --> 00:04:28,327
were inspired by the SIM data, and then the rigid bodies were

55
00:04:28,327 --> 00:04:29,768
pushed by it.

56
00:04:29,768 --> 00:04:32,248
It all kind of comes together and it matches.

57
00:04:32,248 --> 00:04:37,209
So to create the mesh, we had a

58
00:04:38,800 --> 00:04:41,222
we had to figure out how we were going to do this because the

59
00:04:41,222 --> 00:04:46,704
surface obviously has to morph constantly. Um, we considered

60
00:04:46,704 --> 00:04:50,927
possibly doing a point cache, but, um, quickly rejected that

61
00:04:50,927 --> 00:04:54,829
idea, um, because it would require a lot of new tech that

62
00:04:54,829 --> 00:04:59,771
we just didn't want to invest the time in building. Um, we

63
00:04:59,771 --> 00:05:05,474
did a first attempt, uh, which, um, was more programmatic and

64
00:05:05,474 --> 00:05:06,155
parametric.

65
00:05:06,643 --> 00:05:14,011
in nature where it was allowing us to basically glide bumps across the surface.

66
00:05:14,011 --> 00:05:20,619
We abandoned that because it was very hard to work with as an artist and we just couldn't

67
00:05:20,619 --> 00:05:22,601
get the level of fidelity that we wanted.

68
00:05:24,358 --> 00:05:29,301
And so we decided to go with the brute force method, which was

69
00:05:29,301 --> 00:05:33,243
essentially to do skeletal meshes, because our engine

70
00:05:33,243 --> 00:05:37,604
supports skeletal meshes really well, and to do one joint per

71
00:05:37,604 --> 00:05:43,907
vertex. The engineers actually were able to increase our joint

72
00:05:43,907 --> 00:05:50,951
count to about 580 joints per mesh, which wasn't quite enough

73
00:05:50,951 --> 00:05:52,811
to get the entire flood, but...

74
00:05:54,282 --> 00:05:58,405
I'll cover that in a bit.

75
00:05:58,405 --> 00:06:02,488
In order to optimize, fortunately we had sort of a

76
00:06:02,488 --> 00:06:03,408
fixed camera angle.

77
00:06:03,408 --> 00:06:06,450
We knew that the camera was going to be tracking away from

78
00:06:06,450 --> 00:06:08,271
the flood itself, looking back at it.

79
00:06:08,271 --> 00:06:14,936
And so instead of using a mesh of squares, I elongated those.

80
00:06:14,936 --> 00:06:18,458
So if you look at it top down, they're actually rectangles,

81
00:06:18,458 --> 00:06:21,560
which allowed me to cut out about a third, or two thirds

82
00:06:21,560 --> 00:06:23,381
actually, of the.

83
00:06:24,235 --> 00:06:27,196
the points and therefore the joints

84
00:06:27,196 --> 00:06:28,397
that were gonna be required.

85
00:06:28,397 --> 00:06:30,477
And when you're looking at it head on

86
00:06:30,477 --> 00:06:33,959
because of the way perspective kind of squishes it all

87
00:06:33,959 --> 00:06:36,679
it looks like a uniformly covered mesh.

88
00:06:36,679 --> 00:06:40,421
So we used a ray casting method

89
00:06:40,421 --> 00:06:45,262
to kind of extract a surface from the fluid sim.

90
00:06:45,262 --> 00:06:49,184
This was also done in Houdini.

91
00:06:49,184 --> 00:06:53,665
But sort of the default.

92
00:06:55,075 --> 00:06:59,817
way that you would do a ray cast is to just cast along the normals of the surface.

93
00:06:59,817 --> 00:07:03,178
And in this case, that would be just going completely vertically up.

94
00:07:03,178 --> 00:07:08,500
And that was going to cause some problems, some artifacts that we didn't like.

95
00:07:08,500 --> 00:07:14,082
And so I experimented with casting the rays more in the direction of the camera.

96
00:07:14,082 --> 00:07:17,804
And that actually solved a lot of our problems.

97
00:07:17,804 --> 00:07:22,805
So you can see here with this diagram that...

98
00:07:23,439 --> 00:07:28,662
casting rays along the normal in that striped area, that's

99
00:07:28,662 --> 00:07:32,885
creating an error where there's meant to be an overhang, but

100
00:07:32,885 --> 00:07:36,007
there's actually just a wall. And the camera is looking, you

101
00:07:36,007 --> 00:07:40,630
know, right at that and it looks horrible. So changing the

102
00:07:40,630 --> 00:07:44,872
direction that we're casting from to face the camera a bit

103
00:07:44,872 --> 00:07:48,875
more, it reduces the errors altogether because of the way

104
00:07:48,875 --> 00:07:52,557
the water is kind of shaped. But also the errors are more hidden

105
00:07:52,557 --> 00:07:53,197
from the camera.

106
00:07:54,009 --> 00:07:56,210
So that really helped the look.

107
00:07:56,210 --> 00:08:03,891
So, like I said before, there were more than 580 points

108
00:08:03,891 --> 00:08:07,572
required for this half-led, so had to actually like

109
00:08:07,572 --> 00:08:10,453
make three separate meshes that were all driven

110
00:08:10,453 --> 00:08:13,333
by their own skeletons.

111
00:08:13,333 --> 00:08:14,714
And because...

112
00:08:17,197 --> 00:08:20,098
that gets a bit tedious to work with.

113
00:08:20,098 --> 00:08:24,879
I created a little tool that would allow us to

114
00:08:24,879 --> 00:08:27,200
treat the entire surface as one thing,

115
00:08:27,200 --> 00:08:29,041
even though it's in the game.

116
00:08:29,041 --> 00:08:30,722
According to the game data,

117
00:08:30,722 --> 00:08:33,823
it's actually three separate things.

118
00:08:33,823 --> 00:08:37,064
And it allows us to build it all as one thing,

119
00:08:37,064 --> 00:08:39,105
and it really cuts down on the iteration time.

120
00:08:39,839 --> 00:08:46,904
It's not as important on this one because it was only three meshes, but we use this technique in other parts of the game

121
00:08:46,904 --> 00:08:51,488
including like in some sand simulations with flowing sand and

122
00:08:51,488 --> 00:08:58,193
It became more valuable there because some of those surfaces were like 12 to 14 separate patches

123
00:08:58,193 --> 00:08:59,194
which

124
00:08:59,194 --> 00:09:04,558
Would just be insane to to iterate on if you're doing it all by hand

125
00:09:07,124 --> 00:09:14,990
So here's what it looks like with just the surface and no

126
00:09:14,990 --> 00:09:16,531
shader on it.

127
00:09:16,531 --> 00:09:19,073
It's a little bit dark on this display, but you can see a

128
00:09:19,073 --> 00:09:19,714
little bit how it's morphing.

129
00:09:19,714 --> 00:09:24,817
So the surface shader, we use sort of our standard water

130
00:09:24,817 --> 00:09:27,499
shader that we used throughout the game and

131
00:09:27,499 --> 00:09:29,221
other types of water.

132
00:09:29,221 --> 00:09:32,983
It's a really big shader and it has lots of features, but

133
00:09:32,983 --> 00:09:36,486
these are some of the relevant ones for this effect.

134
00:09:37,242 --> 00:09:44,244
does refraction, which basically takes a copy of the screen buffer and it distorts the UV lookup

135
00:09:44,244 --> 00:09:52,987
based on the normal. So the normal will change where it's going to look at the screen texture,

136
00:09:52,987 --> 00:10:02,631
and then also the depth. So the deeper the water is, the further away from the

137
00:10:02,631 --> 00:10:05,972
screen pixel that it would show without refraction.

138
00:10:06,654 --> 00:10:08,875
the further from that it gets.

139
00:10:08,875 --> 00:10:11,317
So it gets more distorted the deeper it is.

140
00:10:11,317 --> 00:10:14,158
And then there's also opacity based on depth

141
00:10:14,158 --> 00:10:18,881
that helps it to look like there's particulate in the water.

142
00:10:18,881 --> 00:10:22,383
So where it's deeper, it gets more opaque.

143
00:10:22,383 --> 00:10:27,186
And then for reflection, the surface changes so much

144
00:10:27,186 --> 00:10:30,207
and it's anything but a flat plane.

145
00:10:30,207 --> 00:10:32,749
So doing real-time reflections wasn't really an option.

146
00:10:32,749 --> 00:10:35,450
But the cube map was totally adequate.

147
00:10:36,087 --> 00:10:41,392
So we did that with Fresnel to make it a stronger reflection

148
00:10:41,392 --> 00:10:46,436
on glancing angles, sort of standard reflection stuff.

149
00:10:46,436 --> 00:10:53,343
And then lastly we did foam on the surface,

150
00:10:53,343 --> 00:10:57,406
which just kind of helps it look a bit more churned up.

151
00:10:57,406 --> 00:11:01,790
Here it is with the surface shader.

152
00:11:03,982 --> 00:11:07,663
So it really lacks a lot of the visceral quality

153
00:11:07,663 --> 00:11:10,405
that it needed to have if you wanted the player

154
00:11:10,405 --> 00:11:15,867
to feel like he's really being chased away

155
00:11:15,867 --> 00:11:18,088
by this giant deluge of water.

156
00:11:18,088 --> 00:11:22,350
So that actually came from the particles.

157
00:11:22,350 --> 00:11:27,772
Particles ended up being just the real,

158
00:11:27,772 --> 00:11:29,433
the really important part of the effect.

159
00:11:29,433 --> 00:11:31,514
The surface was sort of secondary.

160
00:11:33,503 --> 00:11:37,926
We ended up doing 31 separate emitters that were all hand

161
00:11:37,926 --> 00:11:42,609
keyframe animated to match the animation of the water.

162
00:11:42,609 --> 00:11:46,932
And eight different particle definitions, so eight

163
00:11:46,932 --> 00:11:49,214
different types of particles that those

164
00:11:49,214 --> 00:11:50,835
emitters were emitting.

165
00:11:50,835 --> 00:11:55,878
So at Naughty Dog, we have a really great tool set and run

166
00:11:55,878 --> 00:11:58,740
time to go along with it.

167
00:11:58,740 --> 00:12:01,561
Our UI is all done through Maya.

168
00:12:02,355 --> 00:12:10,362
and we share a lot of the same features that, um, Maya particles have. Um, one thing we can do

169
00:12:10,362 --> 00:12:17,549
that's really useful is create custom attributes so we can store off any kind of, uh, date

170
00:12:17,549 --> 00:12:18,790
custom data that we want.

171
00:12:19,936 --> 00:12:25,520
And we can give those data values using expressions.

172
00:12:25,520 --> 00:12:27,782
And expressions are huge.

173
00:12:27,782 --> 00:12:29,483
If you're unfamiliar with expressions,

174
00:12:29,483 --> 00:12:30,864
you should get familiar with them

175
00:12:30,864 --> 00:12:36,388
and beg your programmers to add it to your tool set

176
00:12:36,388 --> 00:12:38,290
because it's super flexible.

177
00:12:38,290 --> 00:12:41,752
It allows you to manipulate data

178
00:12:41,752 --> 00:12:44,234
pretty much any way you want.

179
00:12:44,234 --> 00:12:49,198
Our expressions are really similar to Maya's expressions.

180
00:12:50,038 --> 00:12:54,561
can even piggyback off of Maya's like, um, syntax error

181
00:12:54,561 --> 00:12:58,484
detection and all that. Um, so if you know Maya expressions,

182
00:12:58,484 --> 00:13:02,047
you pretty much know Naughty Dog expressions. And then we have

183
00:13:02,047 --> 00:13:08,832
the ability to use ramps, um, create gradients basically, and

184
00:13:08,832 --> 00:13:13,396
um, we can use our custom attributes as indices into the

185
00:13:13,396 --> 00:13:17,639
ramp, so we can pick where on the ramp we want to pull a color

186
00:13:17,639 --> 00:13:18,179
or value.

187
00:13:19,052 --> 00:13:23,995
um using the custom attributes and we can define those through expressions so it all

188
00:13:23,995 --> 00:13:30,318
comes together and gives you a lot of power. And then we can also send these custom attributes

189
00:13:30,318 --> 00:13:40,164
to the shader uh which allows you to further um control the way the effect looks by controlling

190
00:13:40,164 --> 00:13:45,827
shader attributes and stuff like that. Um so it's all very powerful and then one of the other

191
00:13:45,827 --> 00:13:48,228
cool features I mean there's a lot of them but this is just.

192
00:13:48,890 --> 00:13:52,053
One last one I wanted to mention is custom orientation.

193
00:13:52,053 --> 00:13:56,776
So our sprites don't necessarily have to face the camera,

194
00:13:56,776 --> 00:13:59,918
and they don't necessarily have to be velocity aligned.

195
00:13:59,918 --> 00:14:02,720
We can use our custom attributes and define

196
00:14:02,720 --> 00:14:06,063
vectors that will orient the particles any way we want.

197
00:14:06,063 --> 00:14:07,364
Super flexible.

198
00:14:07,364 --> 00:14:08,224
It's really nice.

199
00:14:08,224 --> 00:14:13,808
And all of this is due to Marshall Robin.

200
00:14:13,808 --> 00:14:14,849
He's pretty much the.

201
00:14:15,725 --> 00:14:19,987
lone programmer at Naughty Dog who does all the effects stuff.

202
00:14:19,987 --> 00:14:22,929
He's really incredible. He has a talk today at 2.30 in room 309.

203
00:14:22,929 --> 00:14:28,193
So go to that if you want to learn more about uncharted effects.

204
00:14:28,193 --> 00:14:31,815
From a more programmer-y technical perspective.

205
00:14:31,815 --> 00:14:42,022
So, um, as every game effects artist is aware, fill rate is the enemy number one. So...

206
00:14:42,908 --> 00:14:48,232
We do a couple of things to get around the fill rate problem

207
00:14:48,232 --> 00:14:51,794
and allow us to draw a lot more particles, which

208
00:14:51,794 --> 00:14:54,656
in this effect gives it the really full, frothy look

209
00:14:54,656 --> 00:14:57,038
at the front of the wave.

210
00:14:57,038 --> 00:14:59,279
We render our particles to a quarter res buffer.

211
00:14:59,279 --> 00:15:04,383
So already we're drawing one quarter of the pixels.

212
00:15:04,383 --> 00:15:05,563
So that's a big gain.

213
00:15:05,563 --> 00:15:09,426
And then with most of the effects that we do,

214
00:15:09,426 --> 00:15:11,107
they're roughly round shaped.

215
00:15:12,128 --> 00:15:17,351
and the corners of a quad are usually completely transparent.

216
00:15:17,351 --> 00:15:21,133
So we just chop them off and make octagons instead of quads.

217
00:15:21,133 --> 00:15:24,435
And it's a good trade-off between number of points

218
00:15:24,435 --> 00:15:29,017
and number of pixels drawn because pixel,

219
00:15:29,017 --> 00:15:30,858
we're usually fill rate bound.

220
00:15:30,858 --> 00:15:33,440
So that's a really nice win as well.

221
00:15:33,440 --> 00:15:39,383
So the main particle that you notice in the effect

222
00:15:39,383 --> 00:15:40,743
is the froth particle.

223
00:15:41,609 --> 00:15:46,692
Uh, this, these are the color and alpha, uh, maps used for the froth particle.

224
00:15:46,692 --> 00:15:52,075
Uh, they're based on source photography done by a colleague of mine

225
00:15:52,075 --> 00:15:55,256
at Naughty Dog named Ikki Ikram.

226
00:15:55,256 --> 00:16:00,459
He's a great photographer.

227
00:16:00,459 --> 00:16:01,219
I love photos by ikki.com.

228
00:16:01,219 --> 00:16:09,044
Um, and then to get more variation, uh, we had four, um, different, uh, looks

229
00:16:09,044 --> 00:16:11,145
and just the color and alpha, and then to get.

230
00:16:12,122 --> 00:16:17,344
more variety, we just smush around the UVs using this color

231
00:16:17,344 --> 00:16:24,806
texture map. And then the other main feature of the shader is

232
00:16:24,806 --> 00:16:28,047
sparkles. Before I added the sparkles, it really did look

233
00:16:28,047 --> 00:16:33,329
like flat, dry cards. It still had a real, um, kind of a

234
00:16:34,229 --> 00:16:38,291
lively motion to it and stuff like that, but it didn't really feel like water.

235
00:16:38,291 --> 00:16:44,855
But just adding little glints of light really helped a lot, and that was achieved with this on the left of the

236
00:16:44,855 --> 00:16:51,759
it's like a black field with sparse white dots, and then that's multiplied by a

237
00:16:51,759 --> 00:16:57,702
uniform noise that's scrolled across it, and it ends up just making it twinkle basically.

238
00:16:57,702 --> 00:16:57,762
So

239
00:17:00,739 --> 00:17:06,062
Um, the quarter res buffer, um, buys us a lot, um, back in

240
00:17:06,062 --> 00:17:12,865
terms of, uh, fill rate, but, um, it also is half, or a

241
00:17:12,865 --> 00:17:16,606
quarter of the resolution, so it's, it makes things look a

242
00:17:16,606 --> 00:17:20,488
lot more fuzzy. So to combat that, um, I did custom mip

243
00:17:20,488 --> 00:17:24,730
maps. I took the, um, alpha and the color texture into

244
00:17:24,730 --> 00:17:28,772
Photoshop and down sampled using nearest neighbor, uh,

245
00:17:28,772 --> 00:17:29,492
filtering, which.

246
00:17:30,028 --> 00:17:33,830
gives it a much better histogram. The lower image, the

247
00:17:33,830 --> 00:17:38,092
lower standalone image is the nearest neighbor sampled one and

248
00:17:38,092 --> 00:17:41,414
the top one is, is bilinear filtering and you can see that

249
00:17:41,414 --> 00:17:45,996
there's just higher contrast and a sharper image. So I recommend

250
00:17:45,996 --> 00:17:50,158
doing that if you're, if your engine supports it. This is what

251
00:17:50,158 --> 00:17:53,260
it looks like inside our previewer, our material

252
00:17:53,260 --> 00:17:58,503
previewer. One thing to note is that the sparkles on this, the

253
00:17:58,503 --> 00:17:59,563
scale of them is not correct.

254
00:18:00,074 --> 00:18:05,297
That's because the scale is controlled by a user variable

255
00:18:05,297 --> 00:18:07,219
that's passed from the particle.

256
00:18:07,219 --> 00:18:08,960
So when I was showing you the particle UI,

257
00:18:08,960 --> 00:18:12,082
and you had the ability to pass data to the shader,

258
00:18:12,082 --> 00:18:14,824
that's, this is one of the things that's affected by that.

259
00:18:14,824 --> 00:18:16,826
So when you run the effect in the game,

260
00:18:16,826 --> 00:18:21,429
the sparkles are smaller, not so big and blobby.

261
00:18:21,429 --> 00:18:22,230
So Keith Garrett.

262
00:18:22,460 --> 00:18:25,061
He was the lead effects artist on Uncharted 3,

263
00:18:25,061 --> 00:18:28,463
and he's doing a talk that'll cover more of our

264
00:18:28,463 --> 00:18:32,804
techniques and tricks that we use for shaders

265
00:18:32,804 --> 00:18:34,425
if you're interested in that.

266
00:18:34,425 --> 00:18:35,425
Go hit that one up.

267
00:18:35,425 --> 00:18:37,206
So here it is with just particles.

268
00:18:37,206 --> 00:18:41,127
The particle lighting turned out to be really huge.

269
00:18:52,573 --> 00:18:56,154
Um, it really sits it into the environment and gives it depth

270
00:18:56,154 --> 00:19:00,215
and, uh, the color variation that, uh, makes it look much

271
00:19:00,215 --> 00:19:03,456
more realistic. Um, you can see it looks really flat without the

272
00:19:03,456 --> 00:19:06,137
particle lighting. First thing to know about the lighting is

273
00:19:06,137 --> 00:19:09,337
that it was a hack. Um, we didn't really have good lighting

274
00:19:09,337 --> 00:19:13,238
techniques for particles in Uncharted 3. We basically used a

275
00:19:13,238 --> 00:19:18,780
lot of hacks. Um, this hack was, um, using two ramps. One ramp

276
00:19:18,780 --> 00:19:20,040
ran the length of the hall.

277
00:19:20,565 --> 00:19:24,608
So, the darker area at the top is sort of the back recessed

278
00:19:24,608 --> 00:19:29,131
area, and then the light spots are where there's light in the

279
00:19:29,131 --> 00:19:29,852
hall shining on it.

280
00:19:29,852 --> 00:19:32,934
And then one across the width of it, and the two are

281
00:19:32,934 --> 00:19:33,734
multiplied together.

282
00:19:33,734 --> 00:19:37,797
And it basically makes sort of a low-res looking texture.

283
00:19:37,797 --> 00:19:41,220
And that's projected down, straight down onto the

284
00:19:41,220 --> 00:19:42,540
particles.

285
00:19:42,540 --> 00:19:45,783
And the wonderful thing about this was that it was all done

286
00:19:45,783 --> 00:19:47,564
with existing tech.

287
00:19:47,564 --> 00:19:48,444
We didn't have to go.

288
00:19:48,919 --> 00:19:53,702
to programmers and ask them to implement this kind of lighting,

289
00:19:53,702 --> 00:19:56,645
which is sort of a pseudo light map kind of technique.

290
00:19:56,645 --> 00:19:59,667
Just with the flexible tools that we already had,

291
00:19:59,667 --> 00:20:02,610
we were able to come up with this idea

292
00:20:02,610 --> 00:20:05,692
and implement it without any programmer support.

293
00:20:05,692 --> 00:20:08,955
So here's the final image with lit particles.

294
00:20:18,485 --> 00:20:33,051
that's pretty much it. So, Naughty Dog is hiring. Candice Walker, I think she's going to be

295
00:20:33,051 --> 00:20:40,294
outside the room. You can check with her. See if there's a spot for you. There's another shout

296
00:20:40,294 --> 00:20:46,216
out there. And of course I wanted to thank all of you. Appreciate you coming. And

297
00:20:47,573 --> 00:20:52,435
I wanted to mention that there is a mobile evaluation and check

298
00:20:52,435 --> 00:20:56,136
your spam filter in your email to make sure that you get that

299
00:20:56,136 --> 00:20:57,616
and fill it out.

300
00:20:57,616 --> 00:21:01,458
And at this point I can take a couple questions.

301
00:21:01,458 --> 00:21:03,698
There's a couple of mics if you have questions please step up

302
00:21:03,698 --> 00:21:03,939
to the mic.

303
00:21:03,939 --> 00:21:05,039
starting to see a couple of people.

304
00:21:17,148 --> 00:21:22,273
awesome, awesome talk. Um, question I have is, um, Houdini is used a lot in film effects, a

305
00:21:22,273 --> 00:21:28,198
lot of game guys, um, use proprietary engines. What sort of took you guys down that

306
00:21:28,198 --> 00:21:34,163
route? Did you hire someone who was a Houdini expert or did you guys, um, train in it?

307
00:21:34,743 --> 00:21:39,784
Basically, between Uncharted 2 and Uncharted 3, I started

308
00:21:39,784 --> 00:21:43,804
learning Houdini because I knew how flexible it was and how

309
00:21:43,804 --> 00:21:47,885
sort of a more technically minded artist can actually

310
00:21:47,885 --> 00:21:49,586
make really useful tools and stuff like that.

311
00:21:49,586 --> 00:21:52,106
So I started learning that and then put it to use in

312
00:21:52,106 --> 00:21:52,466
Uncharted 3.

313
00:21:52,466 --> 00:21:54,887
It was basically just my call.

314
00:21:54,887 --> 00:21:57,767
It was a little hard to convince them to shell out the

315
00:21:57,767 --> 00:22:00,728
money for it because it's really expensive, but we got

316
00:22:00,728 --> 00:22:01,468
over that hurdle.

317
00:22:05,506 --> 00:22:11,291
Hi. Um what was the uh purpose for uh taking the uh oh here

318
00:22:11,291 --> 00:22:16,855
sorry. Uh taking the fluid from Houdini into Maya was that just

319
00:22:16,855 --> 00:22:19,497
uh because of the pipeline that you guys had for uh the joint

320
00:22:19,497 --> 00:22:23,721
placements and all that? Yeah actually um uh it was a little

321
00:22:23,721 --> 00:22:26,823
unclear. I we did the fluid sim in Houdini and we actually

322
00:22:26,823 --> 00:22:31,106
created um the mesh with the mesh animation inside of Houdini

323
00:22:32,009 --> 00:22:35,032
brought that mesh over, we left the fluid sim in Houdini,

324
00:22:35,032 --> 00:22:38,494
brought the mesh over with its animation,

325
00:22:38,494 --> 00:22:43,518
and then that tool that I was showing that I created

326
00:22:43,518 --> 00:22:46,621
also adds all the joints at all the points

327
00:22:46,621 --> 00:22:48,282
and sets it all up to be used in the game.

328
00:22:48,282 --> 00:22:50,184
Okay.

329
00:22:50,184 --> 00:22:52,366
I will be outside to field more questions.

330
00:22:52,366 --> 00:22:56,629
Just wanted to mention that this will be in the GDC vault.

