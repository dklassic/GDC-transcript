1
00:00:11,327 --> 00:00:16,030
Hi everyone, and thanks for coming to No Mavericks, No Martyrs, Sustainable Collaborative Productions.

2
00:00:16,730 --> 00:00:21,012
If you haven't already, please do silence your cell phone and I'll get started.

3
00:00:22,693 --> 00:00:23,934
So my name is Kari Patel.

4
00:00:24,134 --> 00:00:27,516
I'm a game director and narrative designer at Obsidian Entertainment, and I've been with

5
00:00:27,536 --> 00:00:28,876
the studio for eight and a half years.

6
00:00:29,380 --> 00:00:33,304
I've worked on the Pillars of Eternity series on the outer worlds and I'm currently directing

7
00:00:33,345 --> 00:00:33,785
Avowed.

8
00:00:34,346 --> 00:00:38,390
Now, in my time in game development, I've noticed a number of trends on teams, as you

9
00:00:38,430 --> 00:00:39,451
probably have as well.

10
00:00:40,052 --> 00:00:44,596
So today I want to talk about how we make games and how we can improve the process of

11
00:00:44,656 --> 00:00:45,097
making them.

12
00:00:45,657 --> 00:00:49,241
But first, as with any good talk, I want to start with a provocative question.

13
00:00:50,302 --> 00:00:51,423
Is Crunch good, actually?

14
00:00:52,077 --> 00:00:55,578
So I did a little bit of research and it turns out the answer is no, of course it isn't.

15
00:00:56,278 --> 00:00:57,059
But we already know this.

16
00:00:57,379 --> 00:00:59,359
We know it's bad for teams and it's bad for games.

17
00:00:59,759 --> 00:01:04,180
But the real question is, if we know this, why do we end up crunching anyway even when

18
00:01:04,200 --> 00:01:05,241
we're trying to avoid it?

19
00:01:06,701 --> 00:01:10,542
So I'm not going to discuss crunch culture broadly because that's an enormous topic.

20
00:01:11,142 --> 00:01:16,984
Instead, I want to focus on two often self-imposed team roles that can inadvertently lead a team

21
00:01:17,044 --> 00:01:17,564
into crunch.

22
00:01:18,048 --> 00:01:23,231
and a host of other problems, including misdeliverables, broken content, and fractured relationships.

23
00:01:23,972 --> 00:01:26,353
And these roles are mavericks and martyrs.

24
00:01:27,214 --> 00:01:30,436
It's important to talk about mavericks and martyrs because they can lead to a lot of

25
00:01:30,496 --> 00:01:35,219
dysfunction and overwork on teams, even on ostensibly healthy teams that, again, are

26
00:01:35,259 --> 00:01:36,380
trying to avoid crunch.

27
00:01:37,041 --> 00:01:38,582
They're also incredibly common.

28
00:01:38,802 --> 00:01:42,244
You've probably worked with several over the course of your career, and you might have

29
00:01:42,264 --> 00:01:43,024
been one yourself.

30
00:01:43,485 --> 00:01:44,105
I know I have.

31
00:01:45,278 --> 00:01:48,702
They're common because there are pervasive myths in our industry that disguise their

32
00:01:48,722 --> 00:01:52,648
vices as virtues, and all of those myths center around one word.

33
00:01:53,549 --> 00:01:53,889
Passion.

34
00:01:54,902 --> 00:01:57,123
So, I want to be clear, I'm not against passion.

35
00:01:57,423 --> 00:02:00,943
It's important to care about the work we do and the teams we collaborate with.

36
00:02:01,563 --> 00:02:02,924
Many of us are very passionate.

37
00:02:03,204 --> 00:02:05,784
That's what drew us into the industry and that's what's kept us here.

38
00:02:06,364 --> 00:02:10,825
But passion does a lot of heavy lifting when we talk about the way devs work and it leads

39
00:02:10,885 --> 00:02:15,306
us to glorify and perpetuate the roles of mavericks and martyrs in some really destructive

40
00:02:15,346 --> 00:02:15,606
ways.

41
00:02:16,406 --> 00:02:20,267
So, let me start by diving into these roles and the dissonance between their myths and

42
00:02:20,287 --> 00:02:21,747
the reality of what they mean for teams.

43
00:02:23,270 --> 00:02:24,270
So let's start with Mavericks.

44
00:02:24,971 --> 00:02:26,632
Dev A is an outside-the-box thinker.

45
00:02:27,012 --> 00:02:29,534
They don't let things like pipelines and best practices

46
00:02:29,574 --> 00:02:30,175
get in their way.

47
00:02:30,675 --> 00:02:32,897
When they have a feature or content goal in mind,

48
00:02:33,077 --> 00:02:34,498
they'll find a way to make it work,

49
00:02:34,858 --> 00:02:36,859
even if their implementation is held together

50
00:02:37,020 --> 00:02:38,380
with silly putty and crazy glue.

51
00:02:39,401 --> 00:02:40,102
This is a Maverick.

52
00:02:40,582 --> 00:02:43,164
This is someone who will find a way to make something work

53
00:02:43,484 --> 00:02:45,145
despite tools and processes.

54
00:02:45,806 --> 00:02:47,807
And Mavericks are often seen as being inventive,

55
00:02:47,887 --> 00:02:49,388
self-sufficient problem solvers.

56
00:02:50,486 --> 00:02:55,848
But the reality is that the short-term fixes, hacks, and workarounds they create lead to

57
00:02:55,888 --> 00:02:57,189
more problems than they solve.

58
00:02:57,649 --> 00:03:01,331
So to illustrate this, I'm going to tell a hypothetical story, and I randomly picked

59
00:03:01,351 --> 00:03:03,352
from some of the most common names in our industry.

60
00:03:03,952 --> 00:03:06,053
So we're going to talk about Dan the Maverick Scripter.

61
00:03:07,080 --> 00:03:12,182
So we have our level planned around a handful of quests, and we've scheduled the team's time around working on those quests.

62
00:03:12,742 --> 00:03:17,924
But Dan the Maverick Scripter has one extra quest that he's really excited about, and he wants to get it into the game.

63
00:03:18,424 --> 00:03:24,046
So what happens? Dan sets up and scripts the quest, and because he knows the rest of the team is strapped for time,

64
00:03:24,446 --> 00:03:26,667
he takes an initial shot at getting the other work in.

65
00:03:27,407 --> 00:03:29,689
He writes the initial quest giver dialogue.

66
00:03:29,829 --> 00:03:31,670
He's not a narrative designer, but how hard can it be?

67
00:03:32,671 --> 00:03:34,613
He tries propping out the encounter space.

68
00:03:34,913 --> 00:03:37,014
Now, Art doesn't have the assets he really needs,

69
00:03:37,095 --> 00:03:39,977
but he's able to resize some and kitbash a few others,

70
00:03:40,037 --> 00:03:40,957
and it looks pretty good.

71
00:03:42,298 --> 00:03:44,020
He pulls in some enemies from another level.

72
00:03:44,160 --> 00:03:45,301
He adjusts their stats,

73
00:03:45,381 --> 00:03:47,102
and he creates a custom encounter setup

74
00:03:47,142 --> 00:03:47,822
to do what he wants.

75
00:03:48,779 --> 00:03:50,961
And so at this point, Dan's taken a few shortcuts,

76
00:03:51,501 --> 00:03:53,123
and the work is a little bit unpolished,

77
00:03:53,203 --> 00:03:54,525
but it's mostly there.

78
00:03:55,165 --> 00:03:56,847
And this was pretty easy for Dan to do.

79
00:03:57,107 --> 00:03:59,089
So how can it really be that much more work

80
00:03:59,109 --> 00:04:01,051
for the rest of the team to just go in and finish

81
00:04:01,091 --> 00:04:02,273
what he's already started?

82
00:04:02,973 --> 00:04:04,655
So I want to look at how this becomes a problem.

83
00:04:06,011 --> 00:04:08,752
So the first problem relates to bugs and performance debt.

84
00:04:09,113 --> 00:04:12,914
So for a very silly example, let's say that we're building this scene of some sheep and

85
00:04:12,974 --> 00:04:14,115
one white sheepdog, right?

86
00:04:14,775 --> 00:04:20,278
So most teams have recognizable pipelines for turning ideas into placeholders into shippable

87
00:04:20,318 --> 00:04:20,518
work.

88
00:04:21,099 --> 00:04:25,881
Now a maverick is often subverting these pipelines, either for the sake of expediency or because

89
00:04:25,901 --> 00:04:26,942
they're not familiar with them.

90
00:04:27,542 --> 00:04:33,807
A maverick is also much likelier to see something as close to shippable than it really is, especially

91
00:04:33,847 --> 00:04:37,450
if that work falls outside their personal area of expertise or their department.

92
00:04:38,351 --> 00:04:41,754
All of these shortcuts and the placeholder work and the kitbashing that looked good

93
00:04:41,794 --> 00:04:44,697
enough to Dan is not necessarily good enough for shipping.

94
00:04:45,512 --> 00:04:47,213
Your maverick could have done any number of things.

95
00:04:47,493 --> 00:04:50,693
They might be using a consumable as a static prop because it looks good,

96
00:04:51,213 --> 00:04:54,074
even though now you're violating your game's internal consistency rules

97
00:04:54,194 --> 00:04:55,374
and you're going to confuse players.

98
00:04:56,014 --> 00:04:59,095
They might have placed some lights that are now leaking through the level in places.

99
00:04:59,715 --> 00:05:03,776
They might have hacked together an encounter or a cutscene or a scripted moment

100
00:05:03,896 --> 00:05:06,576
just well enough that it works 75% of the time.

101
00:05:07,156 --> 00:05:09,857
They might have applied an unfinished texture to a creature variant.

102
00:05:10,217 --> 00:05:10,917
Any number of things.

103
00:05:11,877 --> 00:05:16,205
But in all of these cases, doing the work the right way might actually be akin to starting over.

104
00:05:16,545 --> 00:05:21,213
In which case, the initial placeholder work that the maverick has put in hasn't actually saved time,

105
00:05:21,394 --> 00:05:22,816
it's just masked problems.

106
00:05:23,357 --> 00:05:25,421
And that's the other issue with hacked implementations.

107
00:05:26,515 --> 00:05:30,858
Real placeholder work, whether we're talking about VFX or temp textures or temp lighting

108
00:05:30,898 --> 00:05:35,100
or stub writing, whatever it might be, is usually designed to be very obvious so that

109
00:05:35,120 --> 00:05:37,302
it gets replaced or removed before you ship your game.

110
00:05:37,982 --> 00:05:41,664
But a Maverick's honest attempt at getting something in and getting it representative

111
00:05:42,064 --> 00:05:45,866
may be just subtle enough that you're still discovering bugs months after you thought

112
00:05:45,906 --> 00:05:46,787
the content was done.

113
00:05:47,916 --> 00:05:50,697
And of course, it's just as easy for the opposite to happen.

114
00:05:51,138 --> 00:05:55,800
If the initial method for getting this content in was rushed, siloed work, then chances are

115
00:05:55,840 --> 00:05:59,662
that the intent and the goals of that work were never clearly communicated, and it's

116
00:05:59,762 --> 00:06:00,703
easy to overcorrect.

117
00:06:01,743 --> 00:06:04,925
And it's worth calling out that all of this hacked work can lead to a lot of memory and

118
00:06:04,985 --> 00:06:09,568
performance issues, and those can be very challenging to track down, especially because

119
00:06:09,608 --> 00:06:13,890
the burden of doing so will often fall on your tools and tech teams who may be unaware

120
00:06:13,930 --> 00:06:16,771
of any shortcuts happening on the content or gameplay sides.

121
00:06:18,021 --> 00:06:22,567
So the point is, if we're taking all these shortcuts just to get something into the build,

122
00:06:22,667 --> 00:06:26,972
the team is going to have to reckon with that debt eventually and Maverick processes all

123
00:06:26,992 --> 00:06:30,837
but guarantee that that debt will come as costly surprise as later in development.

124
00:06:31,258 --> 00:06:35,383
And all of these bugs are going to get assigned to other devs on the team to fix and do the

125
00:06:35,423 --> 00:06:37,345
real work, which leads to bigger problems.

126
00:06:38,943 --> 00:06:42,445
So getting temp work to shippable means unscheduled work for the rest of the team.

127
00:06:42,765 --> 00:06:46,107
So at this point, we've added one extra piece of content that we didn't plan for.

128
00:06:46,127 --> 00:06:50,950
And it took additional work, not only from the individual driving the effort, but also

129
00:06:51,010 --> 00:06:52,291
from other members of the team.

130
00:06:53,051 --> 00:06:57,474
Hypothetically, one extra quest can cost design time to set up and script the quest events,

131
00:06:57,954 --> 00:07:03,918
narrative time to write any characters associated with it, combat and systems time to set up

132
00:07:03,958 --> 00:07:06,400
encounters, loot, rewards, experience scaling.

133
00:07:07,195 --> 00:07:10,458
Environment art time to set up or reconfigure any play spaces.

134
00:07:10,959 --> 00:07:14,922
Cinematics time to set up those cinematic conversations for those new NPCs you've added.

135
00:07:15,003 --> 00:07:19,567
Lighting time to highlight those NPCs in any new play spaces and account for the environment changes.

136
00:07:20,028 --> 00:07:21,789
And of course, audio and VFX support.

137
00:07:22,450 --> 00:07:23,991
And we're talking about a quest right now,

138
00:07:24,312 --> 00:07:29,077
but you can find the same pattern of scope increase in any kind of content or any type of feature.

139
00:07:29,790 --> 00:07:34,333
So the point is, this isn't a free extra quest that one person has squeezed into the schedule.

140
00:07:34,593 --> 00:07:38,235
This is something that has now become a commitment across multiple departments.

141
00:07:39,595 --> 00:07:43,377
And accounting for all of that extra work means that we've put our planned deliverables at risk.

142
00:07:43,925 --> 00:07:47,807
We pulled in additional devs to finish the work and took time and focus off of the work

143
00:07:47,847 --> 00:07:48,707
that we were planning.

144
00:07:49,387 --> 00:07:53,708
This problem is easy to lose sight of because it ends up being about all the things we didn't

145
00:07:53,768 --> 00:07:53,949
do.

146
00:07:54,689 --> 00:07:59,010
But if you've ever cut one thing because something else got too big, if you've ever shipped content

147
00:07:59,050 --> 00:08:01,211
with less polish or iteration than you intended.

148
00:08:01,591 --> 00:08:05,254
If you've ever seen your production slip into alpha, you've probably experienced this.

149
00:08:06,014 --> 00:08:10,178
And the biggest problem of all is the false narrative of success that develops around

150
00:08:10,218 --> 00:08:10,398
this.

151
00:08:10,718 --> 00:08:15,522
It's a narrative that says that we succeeded because of, rather than in spite of, Maverick

152
00:08:15,562 --> 00:08:17,283
development processes.

153
00:08:17,823 --> 00:08:21,186
Looking back, we end up talking about them as if they're the thing that made the game

154
00:08:21,226 --> 00:08:23,147
work and not the thing that almost sank us.

155
00:08:25,009 --> 00:08:27,391
So I want to change gears briefly and talk about martyrs.

156
00:08:28,417 --> 00:08:29,558
So Dev B is a hard worker.

157
00:08:29,878 --> 00:08:34,681
They're not afraid to put in that 110% even if that extra 10 or so percent comes in during

158
00:08:34,761 --> 00:08:37,162
early mornings, late nights and weekends at the office.

159
00:08:37,823 --> 00:08:40,364
They give their work their all and they expect the same of their colleagues.

160
00:08:40,964 --> 00:08:41,585
This is a martyr.

161
00:08:41,965 --> 00:08:44,787
This is someone who will get the work done no matter what it costs.

162
00:08:45,687 --> 00:08:48,249
Now a martyr can also be a maverick and vice versa.

163
00:08:48,509 --> 00:08:50,450
Often these habits do go hand in hand.

164
00:08:51,370 --> 00:08:55,172
And these devs sound like they're high performers and critical team members and they may very

165
00:08:55,212 --> 00:08:55,553
well be.

166
00:08:56,522 --> 00:09:00,843
But their work habits are likely doing damage over time to themselves, their teams, and

167
00:09:00,883 --> 00:09:01,584
their projects.

168
00:09:02,464 --> 00:09:03,684
But I know what you're probably thinking.

169
00:09:03,965 --> 00:09:05,445
These are resourceful, hard workers.

170
00:09:05,705 --> 00:09:06,566
So what's the problem?

171
00:09:08,246 --> 00:09:09,687
So let's tell another story.

172
00:09:10,147 --> 00:09:13,088
So Matt the Martyr wants his level to be the biggest and coolest in the game.

173
00:09:13,608 --> 00:09:15,049
So he spends a lot of extra time on it.

174
00:09:15,309 --> 00:09:19,391
He adds some extra spaces where the rest of the team can place some loot, some additional

175
00:09:19,431 --> 00:09:21,331
encounters, some found storytelling.

176
00:09:21,945 --> 00:09:25,227
Maybe even room for an extra dungeon that the dungeon team can put in when they get

177
00:09:25,247 --> 00:09:26,488
to their BNC content.

178
00:09:27,669 --> 00:09:31,532
And he spends some extra time, some late nights, some weekends at the office, but he gets all

179
00:09:31,552 --> 00:09:32,072
the work done.

180
00:09:32,692 --> 00:09:36,675
And now the team has a level that is bigger than what they planned on, and it needs to

181
00:09:36,715 --> 00:09:37,936
be filled with content.

182
00:09:38,136 --> 00:09:40,098
Quests, enemies, loot, everything.

183
00:09:40,558 --> 00:09:41,539
And finished by art.

184
00:09:42,279 --> 00:09:46,022
And yeah, this is maybe a little over time for some of the other departments, but Matt

185
00:09:46,042 --> 00:09:46,923
put that work in, right?

186
00:09:48,084 --> 00:09:49,865
So now the team faces a hard decision.

187
00:09:50,465 --> 00:09:52,946
Do we tell Matt to cut that extra content back,

188
00:09:53,146 --> 00:09:54,886
assuming that's even feasible at this point?

189
00:09:55,426 --> 00:09:56,747
Do we ship with a sparse level?

190
00:09:57,207 --> 00:09:59,547
Or do we put in the extra work needed to get it done?

191
00:09:59,567 --> 00:10:01,448
And that's the immediate problem.

192
00:10:01,868 --> 00:10:03,689
But there's some bigger long-term problems

193
00:10:03,709 --> 00:10:04,689
that are very subtle here.

194
00:10:05,629 --> 00:10:07,010
The first is that you get bad data.

195
00:10:07,810 --> 00:10:09,830
So raise your hand if you've ever looked at your schedule,

196
00:10:10,050 --> 00:10:11,851
thought back to a previous project and said,

197
00:10:12,311 --> 00:10:14,552
we did twice as much with a smaller team back then,

198
00:10:14,632 --> 00:10:15,472
how did we pull it off?

199
00:10:16,377 --> 00:10:18,700
It was probably people putting in unscheduled overtime.

200
00:10:19,661 --> 00:10:23,965
So part of the problem with this is you lose track of how long it takes to really finish

201
00:10:24,006 --> 00:10:24,386
something.

202
00:10:24,666 --> 00:10:28,210
And that means that if your five-day task got finished with late nights and weekends,

203
00:10:28,731 --> 00:10:32,835
that's extra time baked in that is then going to bake in when you're planning those tasks

204
00:10:32,875 --> 00:10:33,436
in the future.

205
00:10:33,636 --> 00:10:36,960
You risk planning and scoping around assuming that you're going to get that time.

206
00:10:37,778 --> 00:10:42,188
And perhaps even more dangerously, the team loses sight of what it looks and feels like

207
00:10:42,329 --> 00:10:44,614
to finish content without pulling that over time.

208
00:10:44,734 --> 00:10:46,298
This becomes a kind of muscle memory.

209
00:10:48,102 --> 00:10:50,104
We also enter into an overtime arms race.

210
00:10:50,824 --> 00:10:52,806
This resets the team-wide expectation

211
00:10:52,846 --> 00:10:54,007
around work-life balance.

212
00:10:54,468 --> 00:10:56,489
People end up putting up with or even accepting

213
00:10:56,569 --> 00:10:58,851
practices that are bad for their personal well-being,

214
00:10:58,991 --> 00:11:00,653
their productivity, and their teams.

215
00:11:01,293 --> 00:11:02,814
They do this because they don't want to look bad

216
00:11:02,854 --> 00:11:04,116
to their bosses and their colleagues.

217
00:11:04,556 --> 00:11:05,917
They don't want to let their teams down.

218
00:11:06,417 --> 00:11:08,239
And this is especially harmful for juniors

219
00:11:08,279 --> 00:11:10,841
and newer team members who may be more susceptible

220
00:11:10,881 --> 00:11:12,803
to accepting bad habits as normal

221
00:11:12,863 --> 00:11:14,204
if they see them treated as such.

222
00:11:16,283 --> 00:11:19,106
We also enter into a culture of resentment and mistrust.

223
00:11:19,987 --> 00:11:21,708
So the work habits of martyrs and mavericks

224
00:11:21,808 --> 00:11:23,570
cast their teammates as obstacles

225
00:11:23,630 --> 00:11:24,831
to their goals and ambitions.

226
00:11:25,412 --> 00:11:27,113
They say, I'm putting in the time and effort

227
00:11:27,153 --> 00:11:29,916
to get some more cool stuff into the game, so why can't you?

228
00:11:30,817 --> 00:11:32,738
I don't want to share this cool thing I'm working on

229
00:11:32,778 --> 00:11:34,300
on the side, because then you're just

230
00:11:34,320 --> 00:11:35,641
going to tell me why I shouldn't do it.

231
00:11:36,562 --> 00:11:38,644
By the same token, teammates end up

232
00:11:38,684 --> 00:11:41,466
seeing martyrs and mavericks as unpredictable, demanding,

233
00:11:41,526 --> 00:11:42,347
and untrustworthy.

234
00:11:43,196 --> 00:11:47,059
They say, well, now I'm working late or cutting something I cared about because you made extra

235
00:11:47,099 --> 00:11:47,579
work for me.

236
00:11:48,340 --> 00:11:52,023
Or I'm getting feedback about the quality of my work based on something you hacked in.

237
00:11:52,703 --> 00:11:53,904
And this is obviously toxic.

238
00:11:54,245 --> 00:11:59,269
Over time, this will further reduce open communication and transparency that you need to create a

239
00:11:59,329 --> 00:12:02,011
healthy environment and effective problem solving on your teams.

240
00:12:03,770 --> 00:12:06,892
The summary here is that martyrs can be mavericks and vice versa.

241
00:12:07,092 --> 00:12:08,694
These habits really do go hand in hand.

242
00:12:09,194 --> 00:12:12,617
And they can occur on any discipline, on any type of content or feature.

243
00:12:13,298 --> 00:12:16,520
Because the point is that nobody in development does their work in a vacuum.

244
00:12:17,001 --> 00:12:19,883
Anything that one dev does means work for somebody else.

245
00:12:20,564 --> 00:12:23,526
And again, the biggest problem here is the false narrative of success.

246
00:12:24,687 --> 00:12:28,971
In reality, we pulled this off in spite of and not because of our bad habits and careless

247
00:12:29,011 --> 00:12:29,891
scoping along the way.

248
00:12:31,853 --> 00:12:34,054
And there's another less obvious problem with all of this,

249
00:12:34,414 --> 00:12:37,196
and that's who gets the leeway to be a martyr or maverick?

250
00:12:38,156 --> 00:12:40,178
So one conversation we're having a lot right now

251
00:12:40,438 --> 00:12:42,299
is about the need for more diverse seniors

252
00:12:42,379 --> 00:12:43,780
and leadership on our game teams.

253
00:12:44,440 --> 00:12:46,421
So we have to be honest about whose ambition

254
00:12:46,461 --> 00:12:47,802
is allowed to thrive unfettered

255
00:12:48,182 --> 00:12:49,683
and whose is reined in from the start.

256
00:12:50,443 --> 00:12:52,605
When is an overachiever seen as a bold thinker

257
00:12:52,725 --> 00:12:53,665
or a star performer,

258
00:12:54,065 --> 00:12:55,866
and when are they seen as naive and reckless?

259
00:12:56,607 --> 00:12:59,228
Who shines because they get to pull in an entire team

260
00:12:59,308 --> 00:13:00,549
to finish and fix their work?

261
00:13:01,080 --> 00:13:02,942
and whose scope is constrained from the start,

262
00:13:03,382 --> 00:13:04,863
and who do we see rise as a result?

263
00:13:05,904 --> 00:13:07,626
The fact is, a superstar's work,

264
00:13:07,806 --> 00:13:09,267
especially when we're looking at something

265
00:13:09,327 --> 00:13:11,709
on the scale of a full deliverable, not a JIRA task,

266
00:13:12,209 --> 00:13:14,531
is really the result of a lot of people coming together.

267
00:13:15,392 --> 00:13:18,474
On a larger team, any area or quest or creature

268
00:13:18,494 --> 00:13:20,215
you can think of is not going to be the result

269
00:13:20,235 --> 00:13:21,236
of just one person.

270
00:13:21,797 --> 00:13:23,858
You have environment artists, level designers,

271
00:13:23,938 --> 00:13:26,060
narrative designers, animators, programmers,

272
00:13:26,220 --> 00:13:28,001
audio designers, VFX artists.

273
00:13:28,570 --> 00:13:31,472
All coming together and putting their work together to get that content done.

274
00:13:32,153 --> 00:13:36,196
So when we say that a maverick or a martyr's extra work really paid off, we have to be

275
00:13:36,236 --> 00:13:37,497
honest about who else chipped in.

276
00:13:38,258 --> 00:13:40,159
And this isn't about hobbling strong performers.

277
00:13:40,720 --> 00:13:44,263
This is about being intentional about how we spend the time and effort of our people

278
00:13:44,783 --> 00:13:48,386
and making sure that good team members get a chance to shine, that all of our team members

279
00:13:48,406 --> 00:13:49,307
get a chance to shine.

280
00:13:49,887 --> 00:13:53,810
It's also about making room for good team members rather than merely loud advocates.

281
00:13:54,671 --> 00:13:57,313
Really we want to elevate the best performers on our teams.

282
00:13:57,659 --> 00:14:00,980
And these are the people who are going to be force multipliers for the rest of the team

283
00:14:01,481 --> 00:14:06,102
and strong mentors for more junior devs, not the ones who pull recklessly ahead and drag

284
00:14:06,122 --> 00:14:07,203
the rest of the team with them.

285
00:14:08,703 --> 00:14:13,485
So I want to propose an alternative, and that's that great teams make great games, not rock

286
00:14:13,505 --> 00:14:15,746
stars or ninjas or solo contributors.

287
00:14:16,346 --> 00:14:20,708
I could be the best writer or artist or designer on my team, but it doesn't mean anything if

288
00:14:20,748 --> 00:14:23,269
my work can't be used and built on by my colleagues.

289
00:14:23,949 --> 00:14:26,130
Again, nothing any individual contributor does.

290
00:14:26,597 --> 00:14:28,937
goes into a game without the collaboration of their peers.

291
00:14:30,118 --> 00:14:32,658
Great teams are happy, healthy, and engaged.

292
00:14:33,278 --> 00:14:37,280
There is no virtue in late nights, weekends at the office, or destroyed relationships.

293
00:14:37,820 --> 00:14:39,120
There is no virtue in burnout.

294
00:14:40,340 --> 00:14:45,282
Great teams focus on the project as a whole, not on discipline-siloed fiefdoms, not on

295
00:14:45,362 --> 00:14:48,903
personal work and vision at the expense of the rest of the project and the team.

296
00:14:49,803 --> 00:14:54,405
So as directors, leads, and producers, how do we make room for great teams to grow and

297
00:14:54,425 --> 00:14:54,785
thrive?

298
00:14:56,728 --> 00:15:01,049
We must bust the myths that equate passion with overwork and aggressive ownership, and

299
00:15:01,069 --> 00:15:04,930
we must normalize collaborative sustainable habits.

300
00:15:05,890 --> 00:15:10,111
Happier more stable teams can stick together and make better games when we break the cycles

301
00:15:10,171 --> 00:15:11,591
that lead to mavericks and martyrs.

302
00:15:12,251 --> 00:15:16,452
So how do we promote healthy sustainable practices that will serve our teams for the long haul?

303
00:15:17,073 --> 00:15:18,653
How do we empower the entire team?

304
00:15:19,213 --> 00:15:20,553
And how do we avoid enabling

305
00:15:26,844 --> 00:15:28,045
So, again, I want to be clear.

306
00:15:28,286 --> 00:15:32,028
I'm not bagging on passion or personal investment or creative problem solving.

307
00:15:32,568 --> 00:15:36,531
These are all critical for a team, but they need to exist in a healthy, sustainable manner.

308
00:15:37,052 --> 00:15:41,195
And they need to be deployed for the support of the team and the project, not the advancement

309
00:15:41,235 --> 00:15:42,736
of an individual's personal goals.

310
00:15:43,256 --> 00:15:44,077
So how do we get there?

311
00:15:46,078 --> 00:15:49,320
First, we have to be able to explain the problem to our teams and leadership.

312
00:15:51,562 --> 00:15:53,383
And that's why I've spent so much time up to this point

313
00:15:53,423 --> 00:15:54,623
defining martyrs and mavericks.

314
00:15:55,284 --> 00:15:56,804
People have to understand the problem

315
00:15:56,844 --> 00:15:57,864
before they can solve it.

316
00:15:58,205 --> 00:16:00,866
And the fact is, most people, even martyrs and mavericks,

317
00:16:01,306 --> 00:16:03,747
don't actually want to work in a state of constant crunch,

318
00:16:03,887 --> 00:16:05,267
conflict, and role uncertainty.

319
00:16:05,607 --> 00:16:06,348
It's really stressful.

320
00:16:06,988 --> 00:16:08,568
But the dynamics that get people there

321
00:16:08,628 --> 00:16:09,729
are often easy to miss.

322
00:16:10,589 --> 00:16:11,990
So as leaders and people managers,

323
00:16:12,190 --> 00:16:14,090
it falls on us to help people recognize

324
00:16:14,150 --> 00:16:15,251
and break out of these cycles.

325
00:16:15,951 --> 00:16:17,111
So how do we explain the problem?

326
00:16:18,009 --> 00:16:20,752
Well, first, again, we recognize that this practice persists

327
00:16:20,812 --> 00:16:22,514
because of a false narrative of success.

328
00:16:22,835 --> 00:16:24,817
So we have to be ready to change that narrative.

329
00:16:25,158 --> 00:16:26,900
And that means looking back at past examples

330
00:16:27,000 --> 00:16:27,861
and having clear data.

331
00:16:28,442 --> 00:16:30,625
Yes, we love the way this area or this quest

332
00:16:30,665 --> 00:16:31,666
turned out in this game,

333
00:16:32,086 --> 00:16:33,548
but here's how long it took to do that,

334
00:16:33,628 --> 00:16:34,950
and here's what we lost as a result.

335
00:16:35,835 --> 00:16:37,217
It means getting into the details.

336
00:16:37,578 --> 00:16:39,020
If we're adding this additional quest

337
00:16:39,140 --> 00:16:40,222
or enlarging the map here,

338
00:16:40,683 --> 00:16:41,745
here's what it's going to take,

339
00:16:41,945 --> 00:16:43,347
here's where it fits into the schedule,

340
00:16:43,507 --> 00:16:45,951
and here's what we bump or deprioritize as a result.

341
00:16:46,893 --> 00:16:48,736
It also means getting to the root of the behavior.

342
00:16:49,582 --> 00:16:53,564
A lot of times maverick and martyr behaviors are driven by deeper-rooted fears, needs,

343
00:16:53,644 --> 00:16:55,985
or goals, and we need to understand what those are.

344
00:16:56,565 --> 00:16:58,867
It might be a desire for more autonomy or ownership.

345
00:16:59,507 --> 00:17:01,628
It might be out of fear for the outcome of the project.

346
00:17:02,208 --> 00:17:04,910
Or it might even be misalignment on what done looks like.

347
00:17:05,510 --> 00:17:09,452
But once we understand what's driving those behaviors, we can take steps to target them

348
00:17:09,472 --> 00:17:11,673
in a more targeted, manageable way.

349
00:17:13,777 --> 00:17:15,358
We also need to define our MVP.

350
00:17:15,498 --> 00:17:16,978
That's our minimum viable product,

351
00:17:17,178 --> 00:17:19,519
and we need to work towards it at every stage of production.

352
00:17:20,160 --> 00:17:21,840
Our minimum viable product is going

353
00:17:21,900 --> 00:17:24,641
to be the least amount of work that we need at any stage

354
00:17:24,921 --> 00:17:26,582
to evaluate whether we're on track

355
00:17:26,822 --> 00:17:28,523
or to unblock other downstream work.

356
00:17:29,163 --> 00:17:31,404
And an MVP-focused approach is likely

357
00:17:31,444 --> 00:17:33,224
going to mean a more iterative process that's

358
00:17:33,264 --> 00:17:35,685
defined by shorter steps, frequent review,

359
00:17:35,885 --> 00:17:36,946
and simple placeholders.

360
00:17:37,446 --> 00:17:39,447
And there are several advantages to this kind of approach.

361
00:17:40,240 --> 00:17:44,307
The first is that we can catch a lot of scope and direction problems really early when we

362
00:17:44,367 --> 00:17:46,271
still have time to pivot or scope back.

363
00:17:47,212 --> 00:17:51,259
It also reduces the tendency for people to overinvest in the details, which makes it

364
00:17:51,299 --> 00:17:53,323
both practically and psychologically easier

365
00:17:53,693 --> 00:17:55,835
to make hard decisions and cuts when we have to.

366
00:17:56,375 --> 00:17:59,317
And it also opens the door for more cross-department collaboration.

367
00:17:59,738 --> 00:18:02,119
And this is really where the magic of game development comes from.

368
00:18:02,660 --> 00:18:06,743
It's not one person putting their heads down and coming up with a perfect, flawless content

369
00:18:06,783 --> 00:18:08,665
plan over two weeks all by themselves.

370
00:18:09,285 --> 00:18:14,009
It's people working together across disciplines and adding great ideas to good ideas to lead

371
00:18:14,029 --> 00:18:14,929
to stellar content.

372
00:18:15,670 --> 00:18:16,811
That brings me to the next point.

373
00:18:17,959 --> 00:18:22,641
I highly recommend that you establish cross-disciplinary strike teams rather than disciplined siloed

374
00:18:22,661 --> 00:18:23,141
departments.

375
00:18:23,801 --> 00:18:27,742
This allows for a better sense of shared ownership for the feature or unit of content that your

376
00:18:27,762 --> 00:18:28,563
team is working on.

377
00:18:29,043 --> 00:18:32,624
And it leads your team to look at their process and say, we're all building something together,

378
00:18:33,084 --> 00:18:36,565
rather than I do my part and then I kick it over the fence to you and I hope you know

379
00:18:36,605 --> 00:18:37,186
what to do with it.

380
00:18:38,246 --> 00:18:40,847
This also makes it a lot easier to catch potential problems.

381
00:18:41,307 --> 00:18:45,208
Artists can look at a blockout or a layout and catch any tile set issues that might crop

382
00:18:45,308 --> 00:18:45,348
up.

383
00:18:45,925 --> 00:18:49,507
If you have an animator on your character team, they can identify whether we already

384
00:18:49,547 --> 00:18:53,868
have existing rigs or animations that we can share with something new that's being proposed

385
00:18:54,308 --> 00:18:58,090
or make small tweaks in order to get us there so that we're saving time and dev resources.

386
00:18:59,190 --> 00:19:01,991
And this also fosters a much better sense of fellowship on the team.

387
00:19:02,471 --> 00:19:06,173
You're much less likely to just dump a bunch of work on somebody who you work with and

388
00:19:06,193 --> 00:19:10,034
interact with every day and who you really do see as part of your team than someone,

389
00:19:10,074 --> 00:19:11,075
again, who's over the fence.

390
00:19:12,027 --> 00:19:16,209
And finally, this encourages devs to be more mindful of scope and of the implications of

391
00:19:16,249 --> 00:19:16,689
their work.

392
00:19:17,189 --> 00:19:18,310
Which brings me to the next point.

393
00:19:19,751 --> 00:19:25,153
We need to frame scope as a shared team responsibility, not as an imposition from producers and leads.

394
00:19:25,974 --> 00:19:28,535
Scope is not a producer or a lead taking your fun away.

395
00:19:28,895 --> 00:19:32,937
It's how we ensure that we have a completed game at the end of production and a team that's

396
00:19:32,978 --> 00:19:34,598
ready to work on the sequel or the DLC.

397
00:19:35,645 --> 00:19:39,809
Production processes are not there to stifle creativity, they're how we turn ideas into

398
00:19:39,869 --> 00:19:42,891
content and how we ensure that our team's time is well spent.

399
00:19:43,652 --> 00:19:47,595
So we want to give devs the responsibility for sticking to their scope, for keeping their

400
00:19:47,615 --> 00:19:51,619
work on track, and making decisions about their work that respect the time and schedule

401
00:19:51,639 --> 00:19:52,279
of their peers.

402
00:19:52,960 --> 00:19:57,684
Above all, we want to avoid the learned helplessness that comes when someone says, well you gave

403
00:19:57,724 --> 00:19:59,085
me a week and that wasn't enough.

404
00:19:59,785 --> 00:20:00,586
So how do we do this?

405
00:20:01,595 --> 00:20:05,597
At Obsidian we have a philosophy, or a process we call Draw Spider-Man, and I want to give

406
00:20:05,657 --> 00:20:09,639
credit to Justin Britsch, our Director of Development, for coining this explanation.

407
00:20:10,539 --> 00:20:14,621
So Draw Spider-Man is how we describe the push and pull between visions and constraints.

408
00:20:15,542 --> 00:20:18,263
So if I tell an artist to draw Spider-Man, that could mean a lot of things.

409
00:20:18,543 --> 00:20:21,605
It could mean a really simple sketch or a very detailed portrait.

410
00:20:22,185 --> 00:20:26,127
And it can be very hard to sync on the exact level of detail we want in something.

411
00:20:26,550 --> 00:20:30,112
with the individual implementer, especially if they're from a discipline or a background

412
00:20:30,152 --> 00:20:31,453
that is very different from our own.

413
00:20:32,393 --> 00:20:37,277
So when we task out work, our intended level of detail and complexity may be very different

414
00:20:37,317 --> 00:20:39,718
from, again, what the individual implementer is assuming.

415
00:20:40,038 --> 00:20:41,799
So how do we get to the bottom of that?

416
00:20:42,740 --> 00:20:47,003
If we know the time box, we can figure out what is possible with the time we have.

417
00:20:47,523 --> 00:20:48,224
So if I say...

418
00:20:49,179 --> 00:20:51,221
Draw me the best Spider-Man you can draw in a day.

419
00:20:51,661 --> 00:20:55,103
Or show me a blockout that you can do in three days.

420
00:20:55,684 --> 00:20:59,667
Then we see what's achievable, and then we can make other scoping decisions accordingly.

421
00:21:00,147 --> 00:21:03,830
And this avoids both the scope bloat that can come from an individual contributor,

422
00:21:04,010 --> 00:21:07,773
assuming that they have to do more or create a higher level of detail or complexity.

423
00:21:08,333 --> 00:21:11,736
And it also prevents us from accidentally pushing someone into a martyr role

424
00:21:12,096 --> 00:21:14,177
by demanding too much in too little time.

425
00:21:14,197 --> 00:21:18,280
We also want to keep the team's focus on the big picture.

426
00:21:18,828 --> 00:21:22,770
Scope is not just about what we're saying no to, it's also about what we allow ourselves

427
00:21:22,810 --> 00:21:24,131
the time to do in the future.

428
00:21:24,711 --> 00:21:28,293
So we say we can't double scope on this one level because then we won't have any time

429
00:21:28,333 --> 00:21:30,514
left for the next one, which we're also excited about.

430
00:21:32,335 --> 00:21:36,977
And finally, we want to lay strong foundations by building time and flex into our schedule

431
00:21:37,157 --> 00:21:39,038
and communicating honestly with our teams.

432
00:21:39,902 --> 00:21:43,823
If we want our teams to trust that they won't have to become mavericks and martyrs in order

433
00:21:43,843 --> 00:21:47,865
to get a good game done, then we need to show them that we know where we're going and how

434
00:21:47,905 --> 00:21:48,845
we're going to get there.

435
00:21:49,145 --> 00:21:52,746
And we will probably have to message this multiple times over the course of development.

436
00:21:53,426 --> 00:21:58,228
At a tactical level, this means reality proofing our schedule, building in sick time, vacation

437
00:21:58,268 --> 00:21:59,368
time, meeting time.

438
00:21:59,928 --> 00:22:02,549
We can't assume 100% efficiency from everyone every day.

439
00:22:03,581 --> 00:22:07,603
At a higher level, it also means syncing regularly with the team about the goals and visions

440
00:22:07,643 --> 00:22:10,884
for the project and what that means for the work we're doing in the day-to-day.

441
00:22:11,805 --> 00:22:15,446
It also means being ready to have real conversations about hard cuts.

442
00:22:16,127 --> 00:22:20,289
Even if people don't agree with cut or pivot decisions, it's much easier to accept them

443
00:22:20,429 --> 00:22:24,090
when they understand the reasons why and when they feel they've been treated with respect.

444
00:22:25,011 --> 00:22:28,112
And ultimately, we want to model the behavior we want to see from our teams.

445
00:22:28,492 --> 00:22:32,334
That means going home on time, setting strong boundaries, communicating well.

446
00:22:32,819 --> 00:22:34,420
and encouraging our teams to do the same.

447
00:22:35,221 --> 00:22:40,045
Ultimately, healthy, well-functioning teams are built on honesty, communication, and respect.

448
00:22:40,465 --> 00:22:43,807
And that's something that we have to build and reinforce with our teams every day.

449
00:22:44,508 --> 00:22:45,208
Thank you very much.

450
00:22:46,329 --> 00:22:47,370
And thanks.

451
00:22:47,390 --> 00:22:47,590
Thanks.

452
00:22:55,725 --> 00:23:00,249
Special thanks to my colleagues at Obsidian and to the Avowed team especially, and to

453
00:23:00,309 --> 00:23:04,173
Britt Clifford, Matt Hanson, Tony Hsu, and Justin Britsch for their feedback on this

454
00:23:04,233 --> 00:23:04,894
presentation.

455
00:23:05,395 --> 00:23:07,337
And please remember to fill out your evaluations.

456
00:23:07,897 --> 00:23:08,978
And I can take any questions.

457
00:23:14,496 --> 00:23:18,401
Hi, so thank you for the presentations, very insightful.

458
00:23:18,721 --> 00:23:20,523
I had like two questions.

459
00:23:21,084 --> 00:23:26,110
First of all, do you see this behavior only in larger teams or smaller teams?

460
00:23:26,891 --> 00:23:31,136
And if the team is smaller, do you see maybe less of that behavior because of the communication?

461
00:23:31,837 --> 00:23:35,678
That is happening, I guess, faster or more regularly.

462
00:23:36,238 --> 00:23:43,180
And the second question, do you feel like the scaled Agile frameworks help solve some of those problems?

463
00:23:43,680 --> 00:23:48,841
With people, kind of cross-functional teams spending more time together and figuring out that, you know,

464
00:23:48,881 --> 00:23:52,261
you adding a quest kind of takes time from all the other stuff that we have to do.

465
00:23:53,702 --> 00:23:54,802
So for the first question,

466
00:23:56,554 --> 00:23:59,877
Most of the teams I've worked with have been medium to larger.

467
00:24:01,218 --> 00:24:04,080
So it's hard for me to say how this works out on smaller teams,

468
00:24:04,140 --> 00:24:06,642
but I think you can see this happen on a team of any size.

469
00:24:07,983 --> 00:24:11,786
Everybody's scope aspirations are always a little bit bigger than what we have time for,

470
00:24:11,846 --> 00:24:14,829
and I think that's true for small projects as well as large ones.

471
00:24:15,829 --> 00:24:17,411
Could you repeat your second question?

472
00:24:17,711 --> 00:24:21,814
About the scaled agile methodology and cross-functional teams?

473
00:24:23,057 --> 00:24:25,778
I'm not an expert on the different production methodologies.

474
00:24:27,299 --> 00:24:33,040
What I think the biggest thing that helps is just making sure that teams are closely

475
00:24:33,081 --> 00:24:33,641
collaborating.

476
00:24:33,881 --> 00:24:38,262
Again, if you have these cross-department collaborations where people have more visibility

477
00:24:38,362 --> 00:24:42,363
into the effects that their work has on other people working with them.

478
00:24:42,996 --> 00:24:48,339
I think that helps a lot because I think there's a lot of black box mentality that can go in

479
00:24:48,359 --> 00:24:51,260
when you're like, well, this is the part I do, this is the only part I see, and then

480
00:24:51,320 --> 00:24:52,461
someone else does the rest.

481
00:24:53,401 --> 00:24:57,203
That also helps get around the stuff that, you know, you don't know what you don't know.

482
00:24:57,963 --> 00:25:01,986
And the more you're interacting a little bit with colleagues who can point out like, hey,

483
00:25:02,046 --> 00:25:06,188
we built this tool this way, you're not supposed to be using it that way, that's going to create

484
00:25:06,208 --> 00:25:06,688
these bugs.

485
00:25:07,208 --> 00:25:08,649
Again, getting that exposure to...

486
00:25:09,672 --> 00:25:12,867
to teams in other disciplines is going to help you just naturally catch that stuff a

487
00:25:12,887 --> 00:25:13,510
little more quickly.

488
00:25:13,530 --> 00:25:14,695
All right, thank you so much.

489
00:25:16,412 --> 00:25:16,772
Hi.

490
00:25:16,792 --> 00:25:18,072
Can you hear me?

491
00:25:18,532 --> 00:25:19,473
Yeah.

492
00:25:19,493 --> 00:25:20,333
That was a really great talk.

493
00:25:20,573 --> 00:25:24,355
Thank you so much for giving it, and props for the meme usage.

494
00:25:24,515 --> 00:25:25,235
That's very good.

495
00:25:26,035 --> 00:25:30,257
Let me throw a hypothetical at you, because I like the way that you were talking at the

496
00:25:30,277 --> 00:25:35,199
end of the talk about, like, okay, cuts, how do we make hard cuts, how do we communicate

497
00:25:35,239 --> 00:25:39,020
hard cuts, how do we, like, kind of engender trust in our teams.

498
00:25:39,860 --> 00:25:42,681
I was wondering, let's say that you have somebody who is new to the team

499
00:25:43,421 --> 00:25:46,322
and they don't have that learned trust yet,

500
00:25:46,622 --> 00:25:49,142
so you come to a decision point,

501
00:25:49,782 --> 00:25:51,723
something that they were championing needs to be cut.

502
00:25:51,883 --> 00:25:54,083
It's just generally the right call.

503
00:25:54,163 --> 00:25:56,363
Not an easy call, but the right call.

504
00:25:56,563 --> 00:25:58,184
Seems like everybody's on the same page about it.

505
00:25:58,684 --> 00:26:00,964
But this new person is new to the team, they don't have the trust.

506
00:26:01,444 --> 00:26:01,824
How do you...

507
00:26:02,385 --> 00:26:06,245
You will build trust with this person over time, of course,

508
00:26:06,345 --> 00:26:09,466
but how do you bridge that trust gap in the moment?

509
00:26:10,662 --> 00:26:15,643
I think the best thing you can do is just be very clear and honest with them about the

510
00:26:15,703 --> 00:26:21,405
reasons for the cut and how we got here and what you're going to do instead of finishing

511
00:26:21,445 --> 00:26:22,205
that content.

512
00:26:22,525 --> 00:26:27,487
You know, so it could be, well, there were some very complex and risky things we wanted

513
00:26:27,507 --> 00:26:32,508
to try with this content and we tried them early on and we realize now that what it's

514
00:26:32,548 --> 00:26:36,389
going to cost to get this finished and shippable is actually much more than we have time for.

515
00:26:36,569 --> 00:26:38,750
So we took a big swing, we took a big risk.

516
00:26:39,839 --> 00:26:42,200
This one didn't pay off, so we have to cut our losses now.

517
00:26:43,021 --> 00:26:48,926
It could be that you realize that, yeah, I mean, it really does depend on the reason,

518
00:26:48,946 --> 00:26:52,528
but I think being very clear about that, I think that helps.

519
00:26:53,349 --> 00:26:57,152
But yeah, I mean, it's always going to be a process, especially if somebody's first

520
00:26:57,212 --> 00:26:59,554
experience is, you know, sort of seeing that cut.

521
00:26:59,903 --> 00:27:05,724
Right? What happens though if you say that, but they don't have the same perspective that you do,

522
00:27:06,284 --> 00:27:11,426
so they're a little bit disagreeing with your interpretation of what is true.

523
00:27:11,866 --> 00:27:13,546
You're like, in the scenario that you were talking about,

524
00:27:14,426 --> 00:27:19,387
we wanted to see if this was viable. We knew it was risky. We've decided it's not viable.

525
00:27:19,407 --> 00:27:23,248
Here are our reasons why. And they go, I don't understand. I feel like that's not true.

526
00:27:23,488 --> 00:27:26,709
Like, how do you work through that with somebody?

527
00:27:27,575 --> 00:27:31,318
I feel like the best thing you can probably do is just get into the details.

528
00:27:31,898 --> 00:27:37,503
So when we say, OK, well, again, we look at the schedule and we say, we needed to be locked

529
00:27:37,563 --> 00:27:39,044
on this content by this date.

530
00:27:39,525 --> 00:27:43,107
We're one week away from that date and we still have a lot of bugs and a lot of open

531
00:27:43,148 --> 00:27:45,710
questions about this content.

532
00:27:46,610 --> 00:27:48,472
I think you have to kind of bring it down to the math.

533
00:27:49,092 --> 00:27:52,235
There isn't a world in which we get that amount done in this week.

534
00:27:52,635 --> 00:27:56,338
And so rather than continuing to hammer at something that's just not going to get done.

535
00:27:57,504 --> 00:27:59,545
We need to redirect our efforts and our resources.

536
00:27:59,645 --> 00:28:02,187
And you can get into the specifics.

537
00:28:02,227 --> 00:28:05,428
I mean, again, this is a hypothetical, so it's a little hard to, but yeah, you can look

538
00:28:05,448 --> 00:28:07,990
and say, like, here are the big things we need to finish.

539
00:28:08,530 --> 00:28:12,813
This might look easy to you from your perspective, but this new gameplay element that we've been

540
00:28:12,893 --> 00:28:16,535
trying to implement, this is going to require tools and tech time that we don't have.

541
00:28:16,975 --> 00:28:18,616
Here's what the tech schedule looks like.

542
00:28:19,156 --> 00:28:21,498
They're working on performance and optimization, or, you know.

543
00:28:21,885 --> 00:28:24,386
Again, something else that we can't sacrifice.

544
00:28:24,706 --> 00:28:29,209
And just breaking that down so they understand where those costs and risks are coming from,

545
00:28:30,110 --> 00:28:33,812
you know, and why you were at the point of making this decision, especially if you're

546
00:28:33,832 --> 00:28:37,494
trying to make it early so that you're not sinking a lot of time into something you know

547
00:28:37,514 --> 00:28:39,876
you're not going to be able to finish to satisfaction.

548
00:28:39,896 --> 00:28:41,076
Thank you so much.

549
00:28:43,468 --> 00:28:43,688
Hi.

550
00:28:44,408 --> 00:28:45,890
First of all, thank you for the great talk.

551
00:28:46,970 --> 00:28:48,492
And another question.

552
00:28:49,132 --> 00:28:51,895
So the Mavericks, they're usually highly creative people.

553
00:28:52,735 --> 00:28:58,780
So do you have any means to help them vent out from time to time so they're not feeling

554
00:28:59,521 --> 00:29:01,442
squashed with their creativity?

555
00:29:04,025 --> 00:29:05,486
Sorry, could you repeat the question one more time?

556
00:29:05,804 --> 00:29:10,830
So the Mavericks, they're highly creative and when you tell them not to do stuff, do

557
00:29:10,850 --> 00:29:15,735
you have any other means during the work hours to help them be creative?

558
00:29:17,196 --> 00:29:22,322
I think I try to, it helps to try to redirect, so you obviously don't always want to be in

559
00:29:22,362 --> 00:29:24,945
the position of just telling people here are all the things you can't do.

560
00:29:25,065 --> 00:29:27,207
At some point you want to tell the people here's what you can do.

561
00:29:27,792 --> 00:29:32,054
And so that might mean looking at other examples of really strong content that either the team's

562
00:29:32,114 --> 00:29:36,035
already made, that maybe they've made, or that you've made on previous comparable games.

563
00:29:37,076 --> 00:29:41,197
It might mean looking at your gameplay toolbox and understanding all the things that your

564
00:29:41,217 --> 00:29:42,638
game and your tools do really well.

565
00:29:43,232 --> 00:29:46,873
And saying, here are the things we can build that are awesome that we know work really

566
00:29:46,933 --> 00:29:47,173
well.

567
00:29:47,814 --> 00:29:50,655
Let's not focus on all the things that we can't do.

568
00:29:50,735 --> 00:29:52,376
Let's focus on the things that we can do.

569
00:29:52,416 --> 00:29:56,357
And I think just trying to channel that energy into something more productive rather than

570
00:29:56,858 --> 00:30:01,239
defeatism and sort of, you know, looking and saying, well, why can't we do this world of

571
00:30:01,279 --> 00:30:04,361
other things instead of here are all the cool things we can do.

572
00:30:04,381 --> 00:30:05,661
Okay.

573
00:30:05,721 --> 00:30:05,962
Thank you.

574
00:30:06,935 --> 00:30:11,240
I think we are at time, but I can step out to the back and continue to answer questions

575
00:30:11,280 --> 00:30:12,342
for anyone else who has them.

576
00:30:12,562 --> 00:30:13,784
So thank you all very much for coming.

