1
00:00:05,528 --> 00:00:10,472
So welcome to automated testing and profiling for Call of Duty.

2
00:00:10,512 --> 00:00:17,056
My name is Jan van Valberg and I work for Activision Central Tech as a technical director.

3
00:00:19,118 --> 00:00:24,141
So I wrote a build server called Compass which is used for all the automated testing and

4
00:00:24,181 --> 00:00:29,225
profiling of all the Call of Duty games and I'm going to talk a bit about how Compass

5
00:00:29,245 --> 00:00:33,028
came to be, what it looks like and how it works.

6
00:00:35,695 --> 00:00:39,516
So I actually work for a small Activision satellite tech group

7
00:00:39,556 --> 00:00:41,576
in the UK called Central Technology North.

8
00:00:42,836 --> 00:00:45,597
And we get assigned to help out on different games as needed.

9
00:00:46,317 --> 00:00:48,137
And back in 2011, we were helping out

10
00:00:48,177 --> 00:00:50,138
with Bungie's new game called Destiny.

11
00:00:52,518 --> 00:00:55,399
So at the time, Bungie didn't have the automated testing

12
00:00:55,439 --> 00:00:57,359
infrastructure that they have now.

13
00:00:58,380 --> 00:01:01,100
So sometimes you might grab the build, and it might not work.

14
00:01:01,220 --> 00:01:02,280
And then you might not necessarily

15
00:01:02,320 --> 00:01:04,041
know whether it was your fault or whether someone else

16
00:01:05,624 --> 00:01:09,326
And this was a particular problem for us because we were in a separate office

17
00:01:09,806 --> 00:01:13,728
in a different time zone so it wasn't as easy to ask other people whether their version worked.

18
00:01:14,549 --> 00:01:17,770
And also we were among the first people

19
00:01:17,810 --> 00:01:21,493
to work on the PlayStation 3 version. So that meant that

20
00:01:21,513 --> 00:01:25,355
it wasn't tested quite as much yet. So to help us

21
00:01:26,415 --> 00:01:29,557
I set up a little build server that would build

22
00:01:29,677 --> 00:01:32,899
and run the game continuously on PlayStation 3 to make sure that it was still working.

23
00:01:35,492 --> 00:01:40,056
I've been experimenting with different build servers and one I really liked was one called

24
00:01:40,136 --> 00:01:46,722
Buildbot. Buildbot is an open source build server written in Python. It's used by various

25
00:01:46,762 --> 00:01:52,066
people like Mozilla and Chromium which is the open source counterpart of the Google Chrome

26
00:01:52,086 --> 00:01:58,711
web browser. And the UI that they've built for it, that Chromium built for it is really

27
00:01:58,751 --> 00:02:04,196
interesting. I particularly like this, which is the console page.

28
00:02:06,333 --> 00:02:09,494
So at the top here, you see the kind of overall build status

29
00:02:09,514 --> 00:02:10,554
for all the different parts of the build.

30
00:02:11,295 --> 00:02:12,595
And then down the bottom here, you

31
00:02:12,635 --> 00:02:15,356
can see new check-ins coming at the top.

32
00:02:16,056 --> 00:02:20,217
And then all the boxes indicate whether a particular task

33
00:02:20,317 --> 00:02:23,178
on that check-in is currently being tested,

34
00:02:23,698 --> 00:02:26,518
or it's green or red if that task has failed or succeeded.

35
00:02:28,835 --> 00:02:32,176
On other build servers that are used up until this point, this information would be spread

36
00:02:32,196 --> 00:02:33,377
across lots of different pages.

37
00:02:34,297 --> 00:02:36,558
So I really like this idea of having it all on one page.

38
00:02:38,979 --> 00:02:42,360
And the other thing that I liked about BuildBot was the way the build was configured.

39
00:02:42,420 --> 00:02:46,562
So all other build servers that are used up until that point, you'd configure them by

40
00:02:46,622 --> 00:02:50,183
going onto a webpage and changing forms on a webpage.

41
00:02:51,263 --> 00:02:54,225
But BuildBot was configured using code, using Python code.

42
00:02:55,112 --> 00:03:00,056
and this is what's known as configuration as code and I'll get in later, I'll talk later

43
00:03:00,076 --> 00:03:08,103
about why that's so great. So I got this automated testing up and running on build what and um

44
00:03:08,203 --> 00:03:09,944
there was still a couple of things that I wasn't happy with.

45
00:03:11,046 --> 00:03:15,190
So I had a little wish list of other things that I wanted to do differently.

46
00:03:16,071 --> 00:03:22,837
So first of all, Buildbot didn't know about DefKit, so it didn't know about WorkerPC,

47
00:03:22,917 --> 00:03:25,639
so if WorkerPC would go down, it wouldn't run tests on that.

48
00:03:25,679 --> 00:03:31,365
But if a DefKit would go down, it would continue to try to run tests on that, and then the

49
00:03:31,385 --> 00:03:33,326
page would go green and it would look like something had broken.

50
00:03:35,508 --> 00:03:36,409
but actually it was fine.

51
00:03:37,529 --> 00:03:39,330
So what I really wanted was a build server

52
00:03:39,370 --> 00:03:43,691
where def kits and workers were treated at the same level,

53
00:03:43,771 --> 00:03:47,392
where it would understand whether a def kit was up or down

54
00:03:47,693 --> 00:03:50,013
just as well as it would know whether a PC was up or down.

55
00:03:51,894 --> 00:03:54,335
And also, although the configuration was done in Python,

56
00:03:54,355 --> 00:03:58,056
which is cool, if you wanted to update the configuration,

57
00:03:58,156 --> 00:04:02,778
you'd have to check it out, upload it to your build server,

58
00:04:02,838 --> 00:04:04,758
and then run a little batch file, which would reload it.

59
00:04:06,140 --> 00:04:10,441
And what I really wanted was to be able to check the configuration into source control

60
00:04:10,521 --> 00:04:13,022
and have it pick it up directly from source control.

61
00:04:14,683 --> 00:04:20,605
And then the last thing that I wanted was to have screenshots and performance and memory

62
00:04:20,645 --> 00:04:24,266
stats deeply integrated into the UI of the build server.

63
00:04:25,221 --> 00:04:28,662
So we built automation with screenshots and perf stats before,

64
00:04:29,622 --> 00:04:33,783
but viewing the screenshots always felt disjointed from the rest of the build server.

65
00:04:33,823 --> 00:04:35,184
It was like it was a separate thing.

66
00:04:35,204 --> 00:04:39,105
And I had this vision of having a performance graph

67
00:04:39,265 --> 00:04:42,466
where you'd see a performance spike and you could hover over the spike

68
00:04:42,566 --> 00:04:45,387
and see which check-in was responsible for that spike.

69
00:04:46,667 --> 00:04:48,988
So I wanted a build server that could do all of these things,

70
00:04:49,088 --> 00:04:50,448
but there wasn't one available,

71
00:04:50,928 --> 00:04:54,409
so I decided to write my own build server from scratch.

72
00:04:55,489 --> 00:04:58,231
And this became a hobby project during Destiny.

73
00:04:58,832 --> 00:05:01,294
So I would be working on it in my spare time

74
00:05:01,514 --> 00:05:04,477
or while we were traveling to America on the plane

75
00:05:04,678 --> 00:05:05,418
or at the hotel.

76
00:05:06,199 --> 00:05:07,761
And that's how Compass was born.

77
00:05:11,704 --> 00:05:14,447
So after working on Destiny, my group, CTN,

78
00:05:15,448 --> 00:05:17,870
was moved on to Call of Duty Advanced Warfare

79
00:05:19,112 --> 00:05:19,952
by Sledgehammer Games.

80
00:05:21,077 --> 00:05:22,758
And so I set up Compass for them as well.

81
00:05:23,518 --> 00:05:25,319
And at this point, Compass was still running

82
00:05:25,919 --> 00:05:27,400
out of our little office in Warrington,

83
00:05:27,580 --> 00:05:29,541
and it was basically just a couple of PCs

84
00:05:29,561 --> 00:05:30,341
that I'd coupled together,

85
00:05:30,761 --> 00:05:34,022
and a couple of dev kits next to my desk.

86
00:05:34,462 --> 00:05:37,704
And Sledgehammer didn't have automated testing

87
00:05:37,724 --> 00:05:38,344
of the game yet,

88
00:05:38,444 --> 00:05:40,645
so they had all the other stuff up and running,

89
00:05:40,685 --> 00:05:41,745
but this was providing them

90
00:05:41,805 --> 00:05:43,166
that extra bit of automated testing.

91
00:05:45,382 --> 00:05:50,283
And the next project we worked on was Call of Duty Infinite Warfare with Infinity Ward.

92
00:05:50,884 --> 00:05:56,125
And for that one we decided to set up a compass server actually at Infinity Ward.

93
00:05:56,145 --> 00:06:01,267
And we also decided that we wanted a compass to do all of the continuous integration.

94
00:06:01,327 --> 00:06:05,269
So take overall stuff that was previously running in Jenkins and Team City.

95
00:06:05,869 --> 00:06:09,210
And it became kind of the hub of all build server-y things at Infinity Ward.

96
00:06:10,216 --> 00:06:13,837
And we quickly scaled it up to hundreds of VMs

97
00:06:14,057 --> 00:06:15,217
and many dozens of dev kits.

98
00:06:16,477 --> 00:06:19,978
And this ended up being really popular.

99
00:06:20,899 --> 00:06:23,519
And before long, all the other Call of Duty studios

100
00:06:23,839 --> 00:06:25,300
also adopted the Compass wholesale.

101
00:06:25,340 --> 00:06:27,680
And Compass is now used, as I said,

102
00:06:27,760 --> 00:06:29,841
for all automated testing and profiling

103
00:06:29,861 --> 00:06:30,761
of all Call of Duty games.

104
00:06:32,992 --> 00:06:36,395
So here are some numbers to give you an idea of the scope

105
00:06:36,715 --> 00:06:37,616
of what we're dealing with.

106
00:06:37,696 --> 00:06:40,638
So across all of the Call of Duty studios,

107
00:06:40,658 --> 00:06:43,040
we have roughly 700 worker PCs.

108
00:06:43,120 --> 00:06:45,983
So they could be VMs, or they could be physical PCs.

109
00:06:46,503 --> 00:06:48,084
Each one is at least four cores.

110
00:06:48,645 --> 00:06:51,347
Some of them are many more cores, like 20 or 30,

111
00:06:51,387 --> 00:06:52,148
depending on what they're doing.

112
00:06:53,268 --> 00:06:55,710
We have roughly 300 dev kits, so that's

113
00:06:55,831 --> 00:06:58,132
all PlayStations and Xboxes across all studios

114
00:06:58,853 --> 00:06:59,353
added together.

115
00:07:00,863 --> 00:07:04,106
And we have just shy of 1,000 unique users.

116
00:07:04,206 --> 00:07:07,668
So unique users would be anyone looking at the web app

117
00:07:07,708 --> 00:07:08,969
to check the status of the build,

118
00:07:09,149 --> 00:07:10,911
or maybe producers looking at stats,

119
00:07:12,712 --> 00:07:16,195
or also anyone that's using Compass to test their code,

120
00:07:16,295 --> 00:07:19,037
to kick off pre-submits, pre-commit builds, for example.

121
00:07:21,098 --> 00:07:23,840
And we run around 50,000 tasks per day.

122
00:07:24,481 --> 00:07:26,542
So that's about one task every other second.

123
00:07:29,352 --> 00:07:32,334
So next, I'd like to show you a bit of what it looks like.

124
00:07:35,217 --> 00:07:37,859
So this is the signature page of Compass.

125
00:07:37,979 --> 00:07:40,141
It's the console page, which, as you can see,

126
00:07:40,161 --> 00:07:43,304
it's inspired by Chromium's console page.

127
00:07:43,924 --> 00:07:44,525
New check-ins.

128
00:07:44,825 --> 00:07:46,686
This is a time-lapse video of what it looks like.

129
00:07:46,726 --> 00:07:49,989
You can see new check-ins come in at the top.

130
00:07:50,189 --> 00:07:51,611
And then the tasks appear.

131
00:07:51,651 --> 00:07:53,692
And they go yellow when they're in progress.

132
00:07:53,772 --> 00:07:55,794
And then they go red or green when they're finished.

133
00:07:59,215 --> 00:08:02,237
All the tasks on left to right are in chronological order,

134
00:08:02,297 --> 00:08:05,740
so on the left-hand side you might have compiling of the game code,

135
00:08:05,800 --> 00:08:06,981
compiling of the tools code,

136
00:08:07,521 --> 00:08:09,803
then in the middle you might have the asset conversion,

137
00:08:10,623 --> 00:08:14,066
and then on the right-hand side you have the actual running of the game,

138
00:08:14,686 --> 00:08:17,588
and then we take screenshots while we run the game,

139
00:08:17,668 --> 00:08:21,171
and then at the far right you can see the screenshots that resulted from that.

140
00:08:26,187 --> 00:08:29,409
So here's an example where you can see someone made a check-in over here

141
00:08:30,449 --> 00:08:32,151
and you see two things going red

142
00:08:33,952 --> 00:08:36,213
and then the fix comes in over here

143
00:08:37,674 --> 00:08:41,737
so it goes green again. So you can see exactly when things are broken and who

144
00:08:41,777 --> 00:08:43,818
broke them and which things exactly are broken.

145
00:08:44,299 --> 00:08:47,200
So this page is perfect for looking at the current status of the build. If you want to

146
00:08:47,220 --> 00:08:49,602
see if something is broken you can just look at the top of the page.

147
00:08:50,220 --> 00:08:53,622
and then if you want to find out who broke it, you can just scroll down and see where

148
00:08:53,642 --> 00:08:54,503
it started going red.

149
00:08:55,523 --> 00:08:59,486
And it's also good for if you made a check in and you want to follow it through and see

150
00:08:59,506 --> 00:09:04,109
what's going on, you can see your check in appear and you can see all the tasks go yellow

151
00:09:04,209 --> 00:09:04,850
and then go green.

152
00:09:07,429 --> 00:09:09,810
If check-ins come in faster than BuildServer can handle,

153
00:09:10,490 --> 00:09:11,630
it will skip tasks.

154
00:09:12,270 --> 00:09:14,491
And these then show up on the console page

155
00:09:14,511 --> 00:09:15,671
as translucent boxes.

156
00:09:16,112 --> 00:09:19,713
So for example, here, a bunch of check-ins

157
00:09:19,773 --> 00:09:21,233
came in in a very short period of time.

158
00:09:21,893 --> 00:09:23,534
And the BuildServer didn't manage

159
00:09:23,594 --> 00:09:26,734
to test all of those things for all of those check-ins.

160
00:09:27,215 --> 00:09:28,855
And so we've got these translucent boxes

161
00:09:28,895 --> 00:09:30,115
here, which are the skipped tasks.

162
00:09:33,456 --> 00:09:34,137
We have tool tips.

163
00:09:34,177 --> 00:09:36,217
So you can hover over a failed cell.

164
00:09:36,919 --> 00:09:39,981
and that will then give you a little error synopsis so you can quickly see what went

165
00:09:40,001 --> 00:09:46,606
wrong there. So in this example you can see the games crashed and in the red error box

166
00:09:46,666 --> 00:09:55,292
here you can see the call stack of the crash. So having the screenshots on the console page

167
00:09:55,412 --> 00:09:58,654
was one of these ideas that worked out really well. It turns out that

168
00:09:59,745 --> 00:10:02,626
It makes a lot of intuitive sense for people to have them there.

169
00:10:02,746 --> 00:10:05,788
They, even if nobody's ever explained Compass to them before,

170
00:10:05,828 --> 00:10:07,108
they can look at this page and they go,

171
00:10:07,228 --> 00:10:08,869
okay, I can see that there's a check-in

172
00:10:09,369 --> 00:10:10,470
and I can see a screenshot.

173
00:10:10,490 --> 00:10:12,611
So that means Compass is running the game

174
00:10:13,051 --> 00:10:14,172
and the game is running correctly

175
00:10:14,232 --> 00:10:16,073
because I can see a screenshot of what it looks like.

176
00:10:18,126 --> 00:10:20,427
And of course, having the screenshots is also super useful

177
00:10:21,048 --> 00:10:24,150
for debugging small graphical changes

178
00:10:24,210 --> 00:10:26,492
that maybe people might not have noticed from day to day.

179
00:10:26,912 --> 00:10:28,713
You can just click on these screenshots

180
00:10:28,753 --> 00:10:30,855
and page through them and then quickly find

181
00:10:30,915 --> 00:10:32,356
where something like that might have happened.

182
00:10:36,127 --> 00:10:41,170
One thing that we do struggle with with this kind of visualization is the kind of horizontal space

183
00:10:41,770 --> 00:10:44,691
So there's a limit to the number of boxes obviously that you can fit on screen

184
00:10:45,552 --> 00:10:50,695
So for big builds like the nightly build where we test every single map of every single platform in the game

185
00:10:51,215 --> 00:10:55,077
We run out of space and so we just use a horizontal scroll bar

186
00:10:59,099 --> 00:11:00,640
Another thing that we did find is that

187
00:11:01,569 --> 00:11:06,014
the high information density for some people initially when they see it can be off putting,

188
00:11:06,154 --> 00:11:13,083
can be kind of scary. Um so it's still useful to have a big overall is the whole build red or is

189
00:11:13,103 --> 00:11:16,928
the whole build green traffic light screen. So this is what we have for infinity ward.

190
00:11:17,875 --> 00:11:19,116
The other studios have a similar thing.

191
00:11:19,156 --> 00:11:21,918
So here it's the main branch and the dev branch.

192
00:11:22,179 --> 00:11:27,243
And if everything is green, then this thing will go green.

193
00:11:27,883 --> 00:11:30,546
And if any errors are in there, then you get this thing

194
00:11:30,566 --> 00:11:33,148
going red, and you get the list of all the errors that

195
00:11:33,168 --> 00:11:33,848
are currently happening.

196
00:11:36,047 --> 00:11:38,288
So this is what we use in Infinity Ward

197
00:11:38,328 --> 00:11:40,029
in the common room on the TVs, for example.

198
00:11:40,069 --> 00:11:42,991
We did experiment with having the console page on a TV,

199
00:11:43,031 --> 00:11:45,292
but it's just too much information to cram

200
00:11:45,332 --> 00:11:48,253
onto a little TV and to kind of absorb from a distance.

201
00:11:49,354 --> 00:11:50,694
Whereas this page is perfect for that.

202
00:11:53,676 --> 00:11:54,956
So this is the measurements page.

203
00:11:55,697 --> 00:11:58,398
This has got the deep integration between the stats

204
00:11:58,518 --> 00:12:00,039
and the build server that I was talking about.

205
00:12:01,039 --> 00:12:02,400
So right now this page is showing

206
00:12:02,440 --> 00:12:03,941
the number of shader assets in the game.

207
00:12:06,140 --> 00:12:11,362
So, along the x-axis, it's the build number, it's the builds, and then the y-axis is your

208
00:12:11,382 --> 00:12:13,263
measurement, so in this case it's the number of assets.

209
00:12:14,804 --> 00:12:21,587
And each dot represents a build, so each dot is basically a check-in.

210
00:12:21,807 --> 00:12:25,509
If you scroll down on this page, you can see this, you can see the list of all of the other

211
00:12:25,549 --> 00:12:27,710
stats that were output by that task.

212
00:12:28,541 --> 00:12:32,463
And on the right hand side you can see little spark lines that can give you a quick overview

213
00:12:32,543 --> 00:12:34,404
of what all these stats have been doing recently.

214
00:12:34,444 --> 00:12:38,406
So you can see the assets are constantly on the rise going up.

215
00:12:39,107 --> 00:12:41,948
And then in the middle you can see that all of a sudden it's dropped a little bit.

216
00:12:42,549 --> 00:12:47,731
So if you were to click on that spark line, it will then show you in the big graph over here.

217
00:12:49,072 --> 00:12:52,754
And you can then click on the exact dot that was responsible for this drop.

218
00:12:53,949 --> 00:12:56,850
and then I don't know if you can read it, but over on the right hand side here,

219
00:12:57,711 --> 00:13:02,313
you can then read the description of the change list that was responsible for that drop.

220
00:13:02,334 --> 00:13:06,176
So in this case, someone did some memory optimizations, they removed some assets.

221
00:13:10,859 --> 00:13:14,541
So here's a related page, which we call the nightly overview page.

222
00:13:15,771 --> 00:13:19,274
So every night we run a test which teleports the player

223
00:13:19,354 --> 00:13:21,336
to dozens of different locations

224
00:13:21,476 --> 00:13:22,597
on every single map in the game.

225
00:13:23,337 --> 00:13:25,780
And then each location we wait for 30 seconds

226
00:13:25,840 --> 00:13:27,241
and we capture performance data.

227
00:13:27,781 --> 00:13:29,803
And all this performance data is then aggregated

228
00:13:29,863 --> 00:13:30,924
and presented on this page.

229
00:13:32,065 --> 00:13:34,247
So each of these rows is a different map.

230
00:13:34,287 --> 00:13:36,128
You can see the map name in the top left corner.

231
00:13:38,210 --> 00:13:41,173
And then each of these columns is a different map location,

232
00:13:41,193 --> 00:13:42,494
a different screenshot location

233
00:13:42,534 --> 00:13:44,235
where we've done that 30 second capture.

234
00:13:47,365 --> 00:13:51,749
And then this row shows the percentage of time

235
00:13:52,170 --> 00:13:54,852
within that 30 seconds that the game was running

236
00:13:55,452 --> 00:13:58,015
on or above our target FPS, which is 60 FPS.

237
00:13:59,136 --> 00:14:01,898
And then this is the average GPU time in milliseconds,

238
00:14:02,438 --> 00:14:04,000
average CPU time in milliseconds.

239
00:14:05,401 --> 00:14:08,844
If a cell is yellow, that means it's close to going

240
00:14:08,884 --> 00:14:10,485
over budget or just on budget.

241
00:14:11,526 --> 00:14:13,288
And if it's red, it's definitely over budget.

242
00:14:15,658 --> 00:14:17,700
And we also show these up-down arrows.

243
00:14:18,341 --> 00:14:21,744
So that indicates whether that measurement went up or down

244
00:14:21,824 --> 00:14:24,227
significantly compared to the previous night's build.

245
00:14:28,531 --> 00:14:31,914
If you hover over a cell, you can see a little graph

246
00:14:31,954 --> 00:14:32,855
that shows the trend.

247
00:14:32,875 --> 00:14:34,837
So you can kind of get an idea over the past few weeks

248
00:14:34,877 --> 00:14:36,639
whether this status be going up

249
00:14:36,659 --> 00:14:37,640
or whether it's been going down.

250
00:14:38,962 --> 00:14:42,403
And you also get a screenshot so you get an idea of what that location looks like

251
00:14:42,523 --> 00:14:46,684
and sometimes that might give you a clue if a particular location is slow

252
00:14:46,724 --> 00:14:48,045
about why that might be slow.

253
00:14:48,065 --> 00:14:52,606
And if you then click on this cell, that would then take you to

254
00:14:53,146 --> 00:14:54,807
that graph view that I showed you before

255
00:14:54,827 --> 00:14:58,268
and you can then dig in more into the details.

256
00:14:58,328 --> 00:15:01,268
So, let's say the GPU perf has got worse,

257
00:15:01,328 --> 00:15:05,409
you can drill down into exactly which bits of GPU performance got worse,

258
00:15:05,489 --> 00:15:05,990
like whether it's...

259
00:15:07,188 --> 00:15:09,388
post-processing or opaque or whatever.

260
00:15:10,769 --> 00:15:13,390
So this page is used a lot by artists.

261
00:15:13,510 --> 00:15:16,230
Artists will look at this page and look at their map

262
00:15:16,910 --> 00:15:19,051
and then look at which part of their map are slow

263
00:15:19,151 --> 00:15:20,291
and then they'll go and optimize them

264
00:15:20,851 --> 00:15:22,472
and then check in their optimizations

265
00:15:22,592 --> 00:15:23,732
and they'll come back the next day

266
00:15:24,112 --> 00:15:24,873
and look at the difference

267
00:15:26,393 --> 00:15:28,594
and see whether their optimizations worked

268
00:15:29,034 --> 00:15:30,554
and see whether maybe more needs doing.

269
00:15:33,522 --> 00:15:35,403
So one thing worth mentioning is how we come up

270
00:15:35,423 --> 00:15:36,664
with these screenshot locations.

271
00:15:37,944 --> 00:15:39,705
So we have testers play the game,

272
00:15:40,425 --> 00:15:41,966
and then based on those playthroughs,

273
00:15:42,766 --> 00:15:44,747
we kind of judge which are the slowest,

274
00:15:44,867 --> 00:15:46,588
the worst performing parts of those map,

275
00:15:46,688 --> 00:15:48,348
which are the most problem areas,

276
00:15:49,129 --> 00:15:52,070
and then we enter the coordinates of those locations

277
00:15:52,150 --> 00:15:54,011
into a text file and check that into source control.

278
00:15:55,031 --> 00:15:57,332
And Compass then uses those locations

279
00:15:57,372 --> 00:15:59,613
to produce stable, repeatable measurements

280
00:15:59,693 --> 00:16:02,274
which we can meaningfully compare day to day.

281
00:16:03,610 --> 00:16:08,955
So we specifically don't try to automate a play through of the whole game automatically.

282
00:16:10,397 --> 00:16:11,758
Humans are better at that kind of thing.

283
00:16:12,459 --> 00:16:17,164
And the way we try and do these things is by kind of...

284
00:16:18,814 --> 00:16:23,776
making, automating not everything that a QA tester would do but just automating the bits

285
00:16:23,836 --> 00:16:29,218
that are boring or the bits that are laborious to not replace testers but empower them or

286
00:16:29,258 --> 00:16:32,980
make them more productive so they can concentrate on the things that humans are good at like

287
00:16:33,100 --> 00:16:34,120
exploratory testing.

288
00:16:39,002 --> 00:16:42,763
So next I will talk a bit about how compass works on the inside.

289
00:16:45,650 --> 00:16:47,771
So one of the things that's very different about Compass

290
00:16:48,471 --> 00:16:49,732
is the way that tasks work,

291
00:16:49,872 --> 00:16:51,593
or what you'd call jobs in Jenkins.

292
00:16:52,814 --> 00:16:55,655
So the most common way that jobs are configured

293
00:16:55,675 --> 00:16:57,717
traditionally in build service is via web UI,

294
00:16:59,137 --> 00:17:00,598
like with these kind of forms.

295
00:17:01,839 --> 00:17:03,940
So you might be able to make a new task

296
00:17:04,080 --> 00:17:05,361
and choose from a different set of steps

297
00:17:05,441 --> 00:17:08,062
like sync source control or run a shell command,

298
00:17:08,483 --> 00:17:10,604
and then you'd fill out different fields in the form

299
00:17:10,824 --> 00:17:12,125
to choose exactly how it will run.

300
00:17:14,168 --> 00:17:16,351
So in Compass, all of this is done using Python.

301
00:17:17,051 --> 00:17:19,013
So instead of filling out a GUI form,

302
00:17:19,113 --> 00:17:20,995
you take the thing that you put in the GUI form

303
00:17:21,335 --> 00:17:22,937
and it becomes a parameter to a function.

304
00:17:23,638 --> 00:17:25,299
So in this case, the function is sh,

305
00:17:25,339 --> 00:17:26,841
which executes a shell command.

306
00:17:29,733 --> 00:17:32,615
So here's another example, so at the top is how in Jenkins

307
00:17:32,635 --> 00:17:34,776
you would build a Visual Studio solution,

308
00:17:35,316 --> 00:17:36,817
and at the bottom is encompassed,

309
00:17:37,177 --> 00:17:37,937
like how you would do that.

310
00:17:37,957 --> 00:17:39,698
You call the build solution function,

311
00:17:40,398 --> 00:17:41,939
which is a piece of code that we've written

312
00:17:41,999 --> 00:17:44,420
which will use MSBuild to build your solution.

313
00:17:44,440 --> 00:17:46,121
It will create the output,

314
00:17:46,181 --> 00:17:48,002
it will classify warnings and errors,

315
00:17:48,742 --> 00:17:51,964
and it will do things like if there was PDB corruption,

316
00:17:52,104 --> 00:17:54,325
it will delete all the PDB files and retry the build.

317
00:18:00,300 --> 00:18:05,085
and here is another example of how you would set up a Perforce repository in Jenkins and

318
00:18:05,145 --> 00:18:05,605
in Compass.

319
00:18:10,630 --> 00:18:17,255
So in Compass, each task is basically just a Python function and we call these automation

320
00:18:17,276 --> 00:18:17,556
scripts.

321
00:18:18,577 --> 00:18:21,439
So here is an example of things that you might find in a Compass task.

322
00:18:22,221 --> 00:18:24,023
So at the top, the sync function,

323
00:18:24,143 --> 00:18:25,464
that will sync source control.

324
00:18:25,584 --> 00:18:28,506
So in this case, it'll sync the dev source control repository.

325
00:18:29,387 --> 00:18:31,929
And then the sh function, that runs a shell command.

326
00:18:31,949 --> 00:18:34,091
So in this case, it runs echo hello world.

327
00:18:35,692 --> 00:18:38,434
Measurement.new adds a measurement to the task.

328
00:18:38,514 --> 00:18:40,196
So the graphs that I showed you before

329
00:18:40,236 --> 00:18:42,617
with all those measurements and the sparklines,

330
00:18:43,178 --> 00:18:45,420
each one of those is added by calling this function.

331
00:18:45,460 --> 00:18:49,203
So all perf stats, memory stats, build durations,

332
00:18:49,723 --> 00:18:51,184
it all goes through this function.

333
00:18:52,263 --> 00:18:55,566
And then store, let's say you compile an XE

334
00:18:55,646 --> 00:18:57,988
and you want to store that XE to be used by subsequent task,

335
00:18:58,028 --> 00:18:59,109
you call the store function,

336
00:18:59,129 --> 00:19:01,831
and then it gets stored in the central location

337
00:19:02,152 --> 00:19:03,673
for other tasks to get hold of.

338
00:19:06,976 --> 00:19:08,637
And this is what that task would then look like

339
00:19:08,778 --> 00:19:10,259
in the compass UI if you run it.

340
00:19:10,719 --> 00:19:13,162
So you can see all these functions have generated steps,

341
00:19:13,202 --> 00:19:15,243
so there's the sync step,

342
00:19:15,584 --> 00:19:17,986
and there's the shell step, and there's the store step.

343
00:19:18,597 --> 00:19:21,919
and here I have clicked on the shell step and you can see the output for it which is

344
00:19:22,099 --> 00:19:22,599
hello world.

345
00:19:27,341 --> 00:19:28,662
So another part of compass is

346
00:19:29,829 --> 00:19:33,152
Compass has an API, a Python API for talking to a dev kit.

347
00:19:33,712 --> 00:19:38,515
So it's like a Python wrapper around the Xbox or PlayStation API that you might get from

348
00:19:38,555 --> 00:19:39,416
Sony or Microsoft.

349
00:19:40,096 --> 00:19:46,861
And this allows you to do things like connect to a dev kit, reset it, upload files, download

350
00:19:46,921 --> 00:19:50,363
files, launch a game, take screenshots, that kind of stuff.

351
00:19:51,644 --> 00:19:53,265
So here is an example of how you might use it.

352
00:19:54,288 --> 00:19:57,991
You say you get hold of a PlayStation 4, you reset the PlayStation 4,

353
00:19:58,311 --> 00:20:02,074
then you launch your game, you wait for 20 seconds,

354
00:20:02,254 --> 00:20:05,657
and then you capture a screenshot of whatever is on screen at that point.

355
00:20:06,198 --> 00:20:08,299
And that screenshot then gets sent to the build server,

356
00:20:08,720 --> 00:20:09,981
and it'll appear in the UI there.

357
00:20:11,704 --> 00:20:15,706
If the game crashes, we have code for detecting that the game's crashed,

358
00:20:16,166 --> 00:20:18,827
and we can then capture a crash dump of that crash.

359
00:20:19,247 --> 00:20:21,268
We scrape the call stack out of that crash,

360
00:20:21,368 --> 00:20:23,489
and that's then how we generate that call stack

361
00:20:23,529 --> 00:20:25,831
that I showed you in that slide before in that red box.

362
00:20:27,257 --> 00:20:32,481
And we also do things like we zip up the XE and the symbols in the crash and attach that

363
00:20:32,501 --> 00:20:33,322
to the task as well.

364
00:20:33,402 --> 00:20:37,565
So if you see a crash, if anyone sees a crash, they can just click on it and download that,

365
00:20:37,765 --> 00:20:42,289
open it up and then load it immediately into the debugger and start debugging that crash.

366
00:20:46,212 --> 00:20:46,352
So

367
00:20:47,660 --> 00:20:50,683
With traditional build servers, the list of steps

368
00:20:51,303 --> 00:20:53,865
that make up a task would live on the server.

369
00:20:54,906 --> 00:20:56,667
You might have put them in a GUI,

370
00:20:56,747 --> 00:20:58,148
and it might have stored them in a database.

371
00:20:58,948 --> 00:21:00,590
And then when it comes time to run a task,

372
00:21:00,850 --> 00:21:02,951
the server goes, OK, what's the first thing to do?

373
00:21:03,392 --> 00:21:04,192
Sync source control.

374
00:21:04,332 --> 00:21:06,134
So it connects to the worker and tells the worker

375
00:21:06,214 --> 00:21:07,034
to sync source control.

376
00:21:07,615 --> 00:21:11,137
And then it goes, the next thing to do is run a shell command.

377
00:21:11,217 --> 00:21:13,819
So then tell the worker to run a shell command.

378
00:21:14,826 --> 00:21:19,191
and this is how compass was designed originally as well. So we have this Python script and

379
00:21:19,211 --> 00:21:23,755
it would run on the server and whenever you called like the sage function it would connect

380
00:21:23,795 --> 00:21:28,300
to the worker and run like the command on the worker. But it turned out

381
00:21:28,980 --> 00:21:32,440
That actually made things quite complicated because within the script you constantly had

382
00:21:32,460 --> 00:21:39,382
to reason about the worker and the server, for example, if you wanted to read a file,

383
00:21:39,662 --> 00:21:43,183
read the contents of a file of the worker, you would have to first connect to the worker

384
00:21:43,203 --> 00:21:47,424
and download that file to the server and then you could open it up at server.

385
00:21:49,904 --> 00:21:50,844
So we changed it.

386
00:21:50,964 --> 00:21:52,785
And now compass works like this.

387
00:21:55,102 --> 00:21:58,003
So the compass server, when it runs a task, connects to the worker

388
00:21:58,583 --> 00:22:00,423
and it tells it to run an automation script.

389
00:22:00,483 --> 00:22:05,625
And from then on, the worker knows everything about the task.

390
00:22:05,665 --> 00:22:08,306
It knows which source control repos to sync.

391
00:22:08,346 --> 00:22:09,826
It knows which steps to run.

392
00:22:11,086 --> 00:22:13,507
And if there is a file to store, it itself

393
00:22:13,747 --> 00:22:15,488
uploads it to the central repository.

394
00:22:16,388 --> 00:22:19,889
and the server basically just gets told by the worker what's happened.

395
00:22:19,949 --> 00:22:24,130
So if a new step comes in or there's a new measurement to register,

396
00:22:24,510 --> 00:22:27,691
that information gets sent to the server and the server then logs that

397
00:22:27,851 --> 00:22:29,172
and it makes it appear in the UI.

398
00:22:30,712 --> 00:22:34,473
So it means that a job is just a simple Python script

399
00:22:34,533 --> 00:22:37,634
and if you want to read a file, you just use the normal Python API

400
00:22:37,654 --> 00:22:38,275
to read a file.

401
00:22:40,655 --> 00:22:44,357
So what are the benefits of just having these simple Python scripts be the tasks?

402
00:22:45,977 --> 00:22:50,161
So one benefit is that you can just debug scripts

403
00:22:50,701 --> 00:22:52,583
as if they were normal Python.

404
00:22:52,643 --> 00:22:54,985
Like you don't actually need a build server to run them.

405
00:22:55,445 --> 00:22:58,147
So you can just take your favorite Python debugger

406
00:22:58,227 --> 00:23:00,429
and load up your script and iterate on it like that.

407
00:23:00,509 --> 00:23:02,431
And that's in fact how a lot of these things get written,

408
00:23:02,851 --> 00:23:04,893
just locally on your PC without a build server.

409
00:23:07,515 --> 00:23:09,316
It's easy to write and easy to understand

410
00:23:09,477 --> 00:23:10,918
because it's just Python.

411
00:23:10,958 --> 00:23:12,499
There's loads of reference on the internet

412
00:23:12,599 --> 00:23:14,481
and Python is an easy language to learn.

413
00:23:15,623 --> 00:23:21,266
and you also have all the power of Python, Python has a huge ecosystem of packages which

414
00:23:21,306 --> 00:23:28,309
can do anything from image processing to reading or writing any file format that you might

415
00:23:28,369 --> 00:23:33,171
like or connecting to databases and you can just include, you can just import that stuff

416
00:23:33,191 --> 00:23:34,111
and use it straight off.

417
00:23:37,312 --> 00:23:41,894
But then the biggest benefits arguably come from the fact that your configuration is checked

418
00:23:42,014 --> 00:23:42,855
into source control.

419
00:23:43,795 --> 00:23:44,655
So the benefits are.

420
00:23:45,618 --> 00:23:49,281
Of course you have history, so you can now use your source control history to see when

421
00:23:49,321 --> 00:23:51,603
things have changed, who changed them and why they changed them.

422
00:23:52,404 --> 00:23:57,468
You have the ability to rerun old check-ins, so let's say if you were renaming a directory

423
00:23:57,588 --> 00:24:00,290
and you have a piece of config that points to that directory.

424
00:24:02,300 --> 00:24:05,643
Maybe traditionally you would do it by renaming the directory, checking that in, then the

425
00:24:05,663 --> 00:24:10,247
build would break, then you would have to go onto your server and change the config

426
00:24:10,267 --> 00:24:12,388
to point to the new directory and the build would work again.

427
00:24:13,529 --> 00:24:18,133
Then maybe if you wanted to build an old build where the directory still had the old name,

428
00:24:18,153 --> 00:24:19,014
then that wouldn't work.

429
00:24:19,615 --> 00:24:24,999
And with checking all of your configuration into source control, these things live together

430
00:24:25,039 --> 00:24:28,902
and can be checked in together, so everything works much more smoothly.

431
00:24:28,922 --> 00:24:29,883
It works as you would expect.

432
00:24:31,622 --> 00:24:34,664
And another cool benefit of being able to have these things as check-ins

433
00:24:35,185 --> 00:24:38,787
is you can use your proof build or your pre-commit build system on this.

434
00:24:39,548 --> 00:24:42,930
So you could make drastic changes to your configuration,

435
00:24:43,030 --> 00:24:45,832
have like new tasks or new dependencies,

436
00:24:45,872 --> 00:24:47,493
change the way resources are allocated,

437
00:24:47,893 --> 00:24:50,675
and all this stuff will be isolated in your little manual build.

438
00:24:50,735 --> 00:24:54,198
So all the other stuff that runs in your build server

439
00:24:54,218 --> 00:24:55,699
is still using the normal configuration,

440
00:24:56,159 --> 00:24:58,801
or you can isolate it to test your changes.

441
00:25:06,521 --> 00:25:13,384
Another benefit is you can branch your configuration and it just integrates alongside your code,

442
00:25:13,464 --> 00:25:19,807
so any time you do an integration, if you rename the directory in one branch but another

443
00:25:19,847 --> 00:25:23,749
branch, all that stuff will just work and be integrated as you would expect.

444
00:25:24,249 --> 00:25:31,812
The last point which is possibly one of the most interesting points is that by checking

445
00:25:31,852 --> 00:25:33,473
your configuration into source control.

446
00:25:34,583 --> 00:25:36,765
And by having these simple Python scripts that anyone can edit,

447
00:25:37,325 --> 00:25:42,229
you're empowering your developers to take ownership of tests and to add tests.

448
00:25:42,850 --> 00:25:43,570
Like, if you...

449
00:25:44,871 --> 00:25:48,635
Traditionally, you might have, like, a person that owns the build server,

450
00:25:48,755 --> 00:25:50,716
or maybe a team of people that owns the build server,

451
00:25:50,736 --> 00:25:53,599
and if your game coders want to add a test

452
00:25:53,779 --> 00:25:55,540
or they want to make some change to this,

453
00:25:55,881 --> 00:25:58,363
they would have to, like, talk to this team of people to get that to happen.

454
00:25:58,983 --> 00:26:02,426
Whereas the way this works, anyone can make these changes to...

455
00:26:03,611 --> 00:26:05,473
to add tasks or change things.

456
00:26:06,113 --> 00:26:09,876
And it turns out that is very empowering, lots of people do that.

457
00:26:09,936 --> 00:26:17,683
So people do things like adding validation tests for a new file format or tracking the

458
00:26:17,723 --> 00:26:22,507
hashes of converted data so they can make sure that the asset pipeline is deterministic.

459
00:26:23,846 --> 00:26:26,387
Or bigger things like a physics programmer at IW

460
00:26:26,887 --> 00:26:29,209
added a system to make Compass generate

461
00:26:30,249 --> 00:26:32,650
heat map data for collision mesh.

462
00:26:32,690 --> 00:26:35,192
So the artist can then use that to figure out

463
00:26:35,252 --> 00:26:37,813
which parts of the map have dense collision

464
00:26:37,853 --> 00:26:39,134
that needs to be optimized.

465
00:26:40,435 --> 00:26:42,876
And you can find loads of examples of people

466
00:26:42,896 --> 00:26:44,077
all over the place that are like

467
00:26:44,637 --> 00:26:46,818
adding their own little pieces to Compass.

468
00:26:47,799 --> 00:26:48,659
It's a very powerful thing.

469
00:26:51,812 --> 00:26:56,217
So there are drawbacks to doing it like this, you have to, you have a learning curve, you

470
00:26:56,237 --> 00:27:02,483
have a learning curve in terms of you have to learn Python and you have to learn the

471
00:27:02,623 --> 00:27:07,828
compass API like the SH function I showed you and there is also a learning curve in

472
00:27:07,848 --> 00:27:12,332
terms of you have to understand how the build server works because it's different compared

473
00:27:12,352 --> 00:27:12,893
to other things.

474
00:27:14,635 --> 00:27:16,116
And there is also a set of costs.

475
00:27:17,687 --> 00:27:20,648
With Jenkins you could just click a button and say run this command and it will do it

476
00:27:20,728 --> 00:27:25,451
for you but with Compass you have to, you can't do anything until you've checked in

477
00:27:25,491 --> 00:27:26,952
some scripts into source control.

478
00:27:27,772 --> 00:27:32,794
So to help people get over that learning curve and get over that setup cost I actually set

479
00:27:32,875 --> 00:27:37,697
up all of the automation scripts for the studios like the initial versions of it and I maintained

480
00:27:37,737 --> 00:27:38,757
it myself originally.

481
00:27:41,057 --> 00:27:46,080
I wrote tutorials and I wrote documentation on how people do this stuff themselves.

482
00:27:46,600 --> 00:27:49,923
And using that, the people at studios taught them how to do this stuff.

483
00:27:49,963 --> 00:27:52,825
And over time, they've started taking responsibility for it.

484
00:27:53,505 --> 00:27:59,689
And I found that once people get that it's just a Python script, they're away.

485
00:27:59,850 --> 00:28:01,371
They'll build loads of stuff on top of it.

486
00:28:02,551 --> 00:28:06,174
And some studios have written huge, huge systems on top of Compass.

487
00:28:06,214 --> 00:28:09,056
It's a very good place to put extra things.

488
00:28:11,537 --> 00:28:16,984
So a quick note on provisioning, I said that Python, it's Python tasks that run on workers

489
00:28:17,004 --> 00:28:23,691
so we need Python but we also need Visual Studio and PlayStation and Xbox SDK, so how

490
00:28:23,711 --> 00:28:25,553
do we get all that software on to the workers?

491
00:28:27,556 --> 00:28:31,701
So we currently manage all software installation using something called Puppets which is open

492
00:28:31,721 --> 00:28:32,421
source software.

493
00:28:33,495 --> 00:28:39,597
and the way it works is each worker has a Puppet service that every 20 minutes connects

494
00:28:39,617 --> 00:28:44,179
to a Puppet master which knows what should be installed and the worker compares that

495
00:28:44,259 --> 00:28:48,741
against what is currently installed and together they figure out what needs to be uninstalled

496
00:28:48,781 --> 00:28:50,422
or what new software needs to be installed.

497
00:28:51,462 --> 00:28:56,524
It means that everything needs to be installed via scripts and installing things via command

498
00:28:56,564 --> 00:29:00,066
line is not always the happiest path on Windows.

499
00:29:01,326 --> 00:29:02,907
Puppet comes from Linux originally.

500
00:29:03,829 --> 00:29:07,370
So there is an amount of work involved in writing all of those scripts.

501
00:29:07,490 --> 00:29:09,951
And in fact, it's a person's pretty much full-time job

502
00:29:11,052 --> 00:29:13,853
to manage all of that stuff across all of the Call of Duty studios.

503
00:29:15,994 --> 00:29:17,655
There are also issues with doing it this way.

504
00:29:17,715 --> 00:29:20,836
For example, if you run an install on 100 workers,

505
00:29:20,856 --> 00:29:22,617
you might find that on one or two workers,

506
00:29:22,737 --> 00:29:24,137
the install failed for some reason.

507
00:29:24,778 --> 00:29:28,359
And then the build will fail on that worker,

508
00:29:28,499 --> 00:29:31,561
and someone has to manually go in and figure out what's wrong

509
00:29:32,141 --> 00:29:33,361
and apply some kind of fix.

510
00:29:35,109 --> 00:29:39,654
We sometimes also have to pause Compass because it could take up to 20 minutes for everything

511
00:29:39,694 --> 00:29:40,995
to install this new software.

512
00:29:41,836 --> 00:29:45,099
In that time you're kind of in limbo so you might need to pause it.

513
00:29:46,280 --> 00:29:51,685
And once the new software has been installed, there is no way to then go back and run an

514
00:29:51,805 --> 00:29:55,088
older build because that would expect the older SDK to be used.

515
00:29:56,029 --> 00:29:59,852
So it kind of defeats some of the benefits that you get from checking your configuration

516
00:30:00,393 --> 00:30:01,113
into source control.

517
00:30:03,995 --> 00:30:06,137
So we're looking at the possibility of using

518
00:30:06,257 --> 00:30:08,478
Windows containers to solve some of those problems

519
00:30:08,498 --> 00:30:09,259
that I've just mentioned.

520
00:30:10,199 --> 00:30:13,322
So containers are little lightweight VMs

521
00:30:13,382 --> 00:30:15,083
that you install all of your software into,

522
00:30:15,723 --> 00:30:17,424
and then you can upload those to all your workers,

523
00:30:17,464 --> 00:30:20,226
and the workers can then switch between containers

524
00:30:20,326 --> 00:30:21,027
almost instantly.

525
00:30:24,040 --> 00:30:25,681
So it's still a very new technology,

526
00:30:26,242 --> 00:30:28,684
but we're talking to people at Microsoft and Sony

527
00:30:29,245 --> 00:30:31,527
about ironing out the last few wrinkles.

528
00:30:32,028 --> 00:30:33,549
And we're pretty hopeful that we'll be able

529
00:30:33,569 --> 00:30:35,111
to start switching to containers this year.

530
00:30:39,235 --> 00:30:41,277
So next, I wanted to talk a bit about

531
00:30:41,297 --> 00:30:43,780
two relatively unusual features in Compass,

532
00:30:43,800 --> 00:30:46,142
namely error bucketing and auto retry.

533
00:30:48,393 --> 00:30:50,374
So an interesting thing we do in Compass is error bucketing.

534
00:30:50,414 --> 00:30:52,555
So when you do loads of automated testing,

535
00:30:52,595 --> 00:30:53,995
like these 50,000 tasks per day,

536
00:30:54,035 --> 00:30:54,996
some of them are gonna fail,

537
00:30:55,816 --> 00:30:57,657
and they're not always going to be tied

538
00:30:57,717 --> 00:30:58,857
to a specific check-in.

539
00:30:58,937 --> 00:31:01,078
Sometimes things just fail randomly, for example.

540
00:31:01,558 --> 00:31:03,859
Def kits sometimes fail in mysterious ways,

541
00:31:04,199 --> 00:31:06,239
or there might be a bug in the asset conversion

542
00:31:06,259 --> 00:31:07,700
which left something in a funny state,

543
00:31:07,760 --> 00:31:09,340
which means tasks will then fail

544
00:31:09,360 --> 00:31:10,621
when they hit this specific worker.

545
00:31:11,502 --> 00:31:15,564
and it might not always be immediately obvious what's causing these things.

546
00:31:16,124 --> 00:31:21,187
So we've added this feature to track the occurrence of errors and to make it easier to figure

547
00:31:21,287 --> 00:31:23,529
out how often they happen and when they started happening.

548
00:31:26,250 --> 00:31:32,554
So in compass, any time a task fails, we produce a single sentence summary of that error called

549
00:31:32,574 --> 00:31:33,114
the error key.

550
00:31:34,289 --> 00:31:35,850
We get this by looking at the log file.

551
00:31:36,131 --> 00:31:38,433
We look at the error logs in the log file.

552
00:31:39,093 --> 00:31:41,575
So for example, this group of error lines here.

553
00:31:43,216 --> 00:31:46,039
And then based on those lines, we generate this error key.

554
00:31:46,059 --> 00:31:47,840
So in this example, it would be this.

555
00:31:48,400 --> 00:31:49,001
It's an assert.

556
00:31:52,844 --> 00:31:56,827
And the task failure is then bucketed based on that error key.

557
00:31:57,348 --> 00:32:01,311
So each bucket contains all of the tasks that failed with that error key.

558
00:32:02,532 --> 00:32:06,757
So whether it's an assert in the game, or whether it's a problem connecting to a

559
00:32:06,777 --> 00:32:11,283
defkit, or whether it's an error due to a worker running out of memory, all of these

560
00:32:11,343 --> 00:32:15,969
things are grouped into their own buckets. So this idea is quite common, you might maybe

561
00:32:17,421 --> 00:32:21,243
When you send your game out you might collect crash dumps and then you might take the call

562
00:32:21,263 --> 00:32:25,205
stack of those crash dumps and then bucket the crashes based on those call stacks.

563
00:32:25,245 --> 00:32:32,429
This is basically the same idea but we are using log file, log messages, log errors to

564
00:32:32,469 --> 00:32:34,730
bucket them instead of using crash dump call stacks.

565
00:32:37,411 --> 00:32:40,153
So this error bucketing gives us some very useful information.

566
00:32:41,313 --> 00:32:45,315
So this is the error bucket page for unable to allocate memory error.

567
00:32:48,014 --> 00:32:50,197
So as you can see, it has this little calendar view.

568
00:32:50,217 --> 00:32:52,920
So each square represents a day,

569
00:32:53,021 --> 00:32:54,522
and the color of the square represents

570
00:32:55,063 --> 00:32:58,247
the number of times that this error happened on that day.

571
00:32:58,608 --> 00:33:00,270
So the darker it is, the more times it happened.

572
00:33:01,197 --> 00:33:02,977
So this allows you to really easily see,

573
00:33:03,277 --> 00:33:05,098
like if you have a build and it has an error in,

574
00:33:05,118 --> 00:33:07,179
you can really easily see, has it happened before

575
00:33:07,279 --> 00:33:08,319
and how often is it happening?

576
00:33:08,819 --> 00:33:10,140
And when did it start happening?

577
00:33:10,180 --> 00:33:12,340
So in this example, you can hover over here

578
00:33:12,740 --> 00:33:15,141
and you can see that the first recorded occurrence

579
00:33:15,221 --> 00:33:16,182
is on the 6th of October,

580
00:33:16,242 --> 00:33:18,222
which is probably when we started tracking that.

581
00:33:19,003 --> 00:33:20,623
And you can see that there's been an uptick

582
00:33:21,023 --> 00:33:22,524
in out of memory errors since January.

583
00:33:22,544 --> 00:33:26,525
And then further down the page,

584
00:33:26,565 --> 00:33:28,906
you can see a list of recent occurrences.

585
00:33:30,200 --> 00:33:31,961
So you can see the task that it's happening in.

586
00:33:32,962 --> 00:33:35,223
As you can see, it's happening a lot in the run game

587
00:33:35,383 --> 00:33:37,364
MP battle XP3 task.

588
00:33:37,384 --> 00:33:39,205
So that means that on Xbox One,

589
00:33:39,245 --> 00:33:40,626
the MP battle map is out of memory.

590
00:33:42,427 --> 00:33:45,529
Sometimes errors are happening on specific resources.

591
00:33:46,169 --> 00:33:47,810
You can see there's a column where you can see

592
00:33:47,850 --> 00:33:49,972
what resource or what def kit or work

593
00:33:50,012 --> 00:33:50,732
or something happened on.

594
00:33:51,312 --> 00:33:53,454
So you can spot that kind of pattern very easily as well.

595
00:33:53,994 --> 00:33:55,935
And we also showed screenshots at the end.

596
00:33:55,955 --> 00:33:56,856
So if there's a pattern in that,

597
00:33:56,896 --> 00:33:58,236
you can kind of quickly gauge that.

598
00:34:00,334 --> 00:34:02,658
And you can also associate information

599
00:34:02,698 --> 00:34:03,780
with the error book itself.

600
00:34:04,581 --> 00:34:07,466
So for example, this error has a bug,

601
00:34:07,626 --> 00:34:09,109
a link to a bug associated with it.

602
00:34:09,710 --> 00:34:10,791
So this is super useful.

603
00:34:11,292 --> 00:34:13,113
like if you have an error in your build,

604
00:34:14,133 --> 00:34:15,694
this will allow you to immediately see,

605
00:34:16,214 --> 00:34:17,255
has this happened before?

606
00:34:17,675 --> 00:34:19,396
And if so, you can go and visit the bug

607
00:34:19,436 --> 00:34:21,197
and see, is anyone working on it?

608
00:34:21,277 --> 00:34:23,218
What's the conversation been about this so far?

609
00:34:23,758 --> 00:34:25,218
Maybe it's already been fixed, but it

610
00:34:25,258 --> 00:34:26,779
hasn't been integrated into your branch yet.

611
00:34:26,979 --> 00:34:30,521
All this information you can get by tying errors in your build

612
00:34:30,541 --> 00:34:32,142
server with a bug tracker.

613
00:34:36,023 --> 00:34:39,325
Another feature that we have is related to error bucketing.

614
00:34:39,385 --> 00:34:40,485
It's called auto retry.

615
00:34:41,738 --> 00:34:46,623
So auto retry refers to the automatic retrying of tasks that failed.

616
00:34:46,783 --> 00:34:52,149
And to be honest, the idea of automatically retrying tasks used to horrify me.

617
00:34:52,869 --> 00:34:56,693
I used to think that if you have errors, that's due to bugs,

618
00:34:56,773 --> 00:35:00,978
and you should fix all of the bugs in your continuous integration, in your build.

619
00:35:02,049 --> 00:35:05,531
But it turns out that sometimes you might have bugs that don't happen very often.

620
00:35:05,571 --> 00:35:10,815
Maybe they're rare bugs, maybe in your game, and maybe fixing that particular bug is not

621
00:35:11,035 --> 00:35:13,457
on people's top priority list at that time.

622
00:35:14,257 --> 00:35:16,519
And sometimes there might even be things that are beyond your control.

623
00:35:17,680 --> 00:35:21,582
And if you keep these errors lingering in your build, then it will keep coming red,

624
00:35:22,083 --> 00:35:22,843
and it will keep like...

625
00:35:23,699 --> 00:35:27,261
sending people emails saying you have broken a build and it will keep making that big status

626
00:35:27,301 --> 00:35:34,305
page go red. It degrades the faith that people have in your system for detecting errors.

627
00:35:37,667 --> 00:35:41,369
So what we did is for each error bucket you can specify an action.

628
00:35:42,267 --> 00:35:46,089
and anytime a task fails with that error, this action will happen.

629
00:35:46,710 --> 00:35:50,351
So for example, you could say, if this particular error happens,

630
00:35:50,692 --> 00:35:52,793
then retry that task up to three times.

631
00:35:53,293 --> 00:35:57,115
And that would be perfect for some kind of rare race condition bug in your game

632
00:35:57,195 --> 00:36:00,116
that you don't want to pollute your console page, let's say.

633
00:36:02,638 --> 00:36:06,099
Another thing that we can do is enable cooldown mode.

634
00:36:08,022 --> 00:36:12,524
Let's say you have an error and it only happens on a particular resource, it's tied to a

635
00:36:12,544 --> 00:36:18,086
specific resource. What can happen then? Let's say your resource, your worker PC or your

636
00:36:18,126 --> 00:36:23,468
def kit is out of disk space maybe and every single time a task runs on this particular

637
00:36:23,548 --> 00:36:29,790
worker it will fail immediately. You can get into a situation where lots of tasks hit this

638
00:36:29,870 --> 00:36:33,111
one worker very quickly and it will generate loads of errors in your build.

639
00:36:34,479 --> 00:36:37,321
and so this cool down mode is perfect for that,

640
00:36:37,381 --> 00:36:40,382
because it means that whenever a task hits this error,

641
00:36:40,883 --> 00:36:43,564
the resource, the worker or dev kit that it ran on

642
00:36:43,624 --> 00:36:44,985
gets put into a cool down mode,

643
00:36:45,505 --> 00:36:47,266
where it's not allowed to run any more tasks

644
00:36:47,306 --> 00:36:47,986
for a couple of minutes,

645
00:36:48,867 --> 00:36:51,748
and then we retry that task on a different worker.

646
00:36:54,665 --> 00:36:58,367
So it kind of, you still have to go and fix that def kit,

647
00:36:58,847 --> 00:37:01,368
but it changes it from being like a kind of dramatic

648
00:37:01,468 --> 00:37:02,809
problem where everything goes red

649
00:37:02,849 --> 00:37:03,989
and it needs solving right now,

650
00:37:04,429 --> 00:37:06,210
to something that someone can deal with

651
00:37:06,350 --> 00:37:07,611
in due time, a couple of hours.

652
00:37:09,051 --> 00:37:11,092
And then the other thing we do is we have a disable mode,

653
00:37:11,112 --> 00:37:15,014
so if you know that this resource,

654
00:37:15,274 --> 00:37:16,874
if it hits this error,

655
00:37:16,954 --> 00:37:18,535
it's just not going to be usable again,

656
00:37:19,555 --> 00:37:22,116
then you can just have it automatically be disabled

657
00:37:22,257 --> 00:37:23,617
and no more task will run on it ever.

658
00:37:24,800 --> 00:37:28,803
And this can potentially also be useful if there was a particular error and when this

659
00:37:28,883 --> 00:37:33,006
error happens you want to keep the state of that worker PC exactly as it is so you can

660
00:37:33,026 --> 00:37:33,527
look into it.

661
00:37:34,007 --> 00:37:35,068
You can use it for that as well.

662
00:37:36,289 --> 00:37:38,230
So this system does turn out to be very useful.

663
00:37:38,511 --> 00:37:40,512
It saves the build maintainers a lot of time.

664
00:37:41,933 --> 00:37:46,497
They don't necessarily need to look into super rare intermittent failures as much as it means

665
00:37:46,537 --> 00:37:46,697
that.

666
00:37:46,937 --> 00:37:49,800
They can spend more time on more grave things.

667
00:37:52,090 --> 00:37:58,115
One thing, one piece of feedback I have had is that some people find it unnerving to see

668
00:37:58,195 --> 00:38:00,858
a task go red and have it retried and see it go green.

669
00:38:02,960 --> 00:38:07,964
So I would recommend if you do something like this that you allow some way to surface those

670
00:38:08,045 --> 00:38:08,305
errors.

671
00:38:09,146 --> 00:38:12,609
You want to hide the errors from people that don't care about them, like artists maybe,

672
00:38:13,129 --> 00:38:16,452
but there might be people that do care about them, like the build maintainer, so they do

673
00:38:16,492 --> 00:38:18,394
need a way still to be able to see all that stuff happen.

674
00:38:21,417 --> 00:38:22,857
So what problems did we have with Compass?

675
00:38:22,877 --> 00:38:24,378
What was hard about writing Compass?

676
00:38:25,779 --> 00:38:27,160
Writing a fully featured build server

677
00:38:27,180 --> 00:38:29,681
took a long time overall, it took many years.

678
00:38:30,461 --> 00:38:33,123
But I started with a very simple tool.

679
00:38:33,383 --> 00:38:36,124
I didn't set out to write like a grand system.

680
00:38:36,164 --> 00:38:37,665
I started with a very simple thing

681
00:38:38,145 --> 00:38:40,546
and then it just kind of slowly grew over time.

682
00:38:42,547 --> 00:38:44,168
One definite pain point was stability.

683
00:38:44,950 --> 00:38:49,355
So for automated testing itself, if a test fails every now and again, it's not the end of the world necessarily.

684
00:38:50,777 --> 00:38:56,804
But if your build server is the thing that gets relied on for making gold master builds and you're trying to ship your game,

685
00:38:57,285 --> 00:38:59,608
it needs to be 100% rock solid.

686
00:39:00,149 --> 00:39:00,849
And it is now.

687
00:39:02,024 --> 00:39:07,186
but we definitely have had problems in the past, for example, at one point we relied

688
00:39:07,246 --> 00:39:11,868
on a Python package that had a problem with it, what would happen is if a person cancelled

689
00:39:11,908 --> 00:39:17,331
a task we would use this package to terminate the process associated with that task and

690
00:39:17,451 --> 00:39:21,813
all of the child processes, the whole process tree, but due to a bug in this package it

691
00:39:21,853 --> 00:39:27,776
would occasionally also terminate a random other process and very occasionally this other

692
00:39:27,796 --> 00:39:29,276
random process would recompose itself.

693
00:39:30,077 --> 00:39:32,599
and so all of Compass would reboot and all the tasks would stop.

694
00:39:33,479 --> 00:39:38,463
And that was quite tricky and quite stressful to debug

695
00:39:38,823 --> 00:39:44,947
while hundreds and hundreds of people are relying on your stuff to work.

696
00:39:45,108 --> 00:39:47,309
We have also run into issues with scalability.

697
00:39:47,369 --> 00:39:50,512
It's obviously easy to write something that runs on a couple of PCs under your desk,

698
00:39:51,112 --> 00:39:55,075
but when we started scaling up to hundreds of VMs at Infinity Ward,

699
00:39:55,175 --> 00:39:58,617
then there were definitely places where I had to go back in and optimize things.

700
00:39:59,713 --> 00:40:03,997
And another thing that we struggled with, which I guess isn't related necessarily to

701
00:40:04,257 --> 00:40:05,818
Compass is moving data around.

702
00:40:05,858 --> 00:40:12,884
When you have 300 dev kits and they're constantly running these tests, it consumes a lot of

703
00:40:12,924 --> 00:40:13,324
data.

704
00:40:13,344 --> 00:40:14,605
It consumes a lot of game data.

705
00:40:15,626 --> 00:40:18,449
So it can take a lot of network bandwidth.

706
00:40:19,409 --> 00:40:22,791
We've done various things to try and reduce that so we don't

707
00:40:23,411 --> 00:40:27,973
Upload all of the data to the console and then run it like that. We have the console stream the data

708
00:40:28,033 --> 00:40:32,915
So it's not uploading textures and uploading audio files that it's not going to use

709
00:40:34,128 --> 00:40:37,769
And also we try and not transfer things that haven't changed,

710
00:40:37,889 --> 00:40:40,490
either by taking all our data and chopping it up

711
00:40:40,530 --> 00:40:42,190
into little bits and only transferring

712
00:40:42,210 --> 00:40:43,211
the bits that have changed.

713
00:40:44,451 --> 00:40:46,532
Or another method that one of the studios uses

714
00:40:46,732 --> 00:40:48,672
is we have like a nightly build that we upload

715
00:40:48,712 --> 00:40:50,373
to all of the dev kits.

716
00:40:51,273 --> 00:40:54,754
And then each build after that is uploaded as a patch

717
00:40:54,934 --> 00:40:55,735
on that base build.

718
00:41:00,207 --> 00:41:02,048
And then maintenance, maintaining the automation

719
00:41:02,088 --> 00:41:04,330
written on top of Compass takes a lot of time.

720
00:41:04,350 --> 00:41:06,612
Again, it's not necessarily specific to Compass,

721
00:41:06,632 --> 00:41:08,253
but if you have a lot of this stuff running,

722
00:41:08,653 --> 00:41:10,635
you just have churn, churn from your game

723
00:41:10,715 --> 00:41:11,816
and your tooling changing.

724
00:41:12,737 --> 00:41:14,338
Maybe something runs out of disk space

725
00:41:14,418 --> 00:41:15,839
or you've overloaded your servers.

726
00:41:16,399 --> 00:41:18,321
The behavior of dev kits can change

727
00:41:18,501 --> 00:41:20,823
as they get flashed to newer versions.

728
00:41:21,463 --> 00:41:23,425
And there's just a constant number of things

729
00:41:23,505 --> 00:41:24,506
that you'll have to deal with.

730
00:41:25,026 --> 00:41:29,608
and that's why we write stuff like the auto retry to try and reduce the workload that's

731
00:41:29,628 --> 00:41:30,508
associated with that.

732
00:41:33,669 --> 00:41:40,692
So I've shown you various features of compass, the console page, profile view page, I ended

733
00:41:40,732 --> 00:41:44,114
up writing a build server from scratch but I don't expect everyone in the audience to

734
00:41:44,134 --> 00:41:46,695
start writing their own build server, that would be a bit crazy.

735
00:41:47,515 --> 00:41:48,355
So to finish up with...

736
00:41:49,471 --> 00:41:53,213
I wanted to give you tips on how you might be able to implement the features that I have

737
00:41:53,253 --> 00:41:55,774
shown you on top of your own existing systems.

738
00:41:58,456 --> 00:42:03,838
So all the web app UI I have shown you, like the console page and the page, they are written

739
00:42:03,858 --> 00:42:05,499
in Python and flask.

740
00:42:09,205 --> 00:42:12,486
Flask is easy to get started with, lots of tutorials on the internet.

741
00:42:13,566 --> 00:42:18,468
If you wanted to write something like this, one approach would be to have your existing

742
00:42:18,548 --> 00:42:25,609
test code write data to a JSON file or to my SQL server and then you could write a little

743
00:42:25,669 --> 00:42:28,710
Flask web app that would pull that and present that to the user.

744
00:42:29,650 --> 00:42:33,271
Something like a perf overview page would be straightforward to make like that.

745
00:42:33,791 --> 00:42:38,292
Of course there's other ways, some build servers might allow you to write a Java plugin.

746
00:42:39,853 --> 00:42:40,754
That would be another approach.

747
00:42:43,996 --> 00:42:48,459
So another thing I showed you was this, the tracking and graphing of performance and memory

748
00:42:48,499 --> 00:42:48,800
stats.

749
00:42:49,660 --> 00:42:52,843
So for this you can take a look at InfluxDB and Grafana.

750
00:42:53,783 --> 00:43:00,008
So InfluxDB and Grafana are both open source software, InfluxDB is a database like MySQL

751
00:43:00,028 --> 00:43:02,930
but it's specifically designed to store stats, metrics.

752
00:43:04,547 --> 00:43:12,050
So you can have your automated tests upload data into InfluxDB and then you use Grafana.

753
00:43:12,090 --> 00:43:18,313
Grafana is like a web app which allows you to build custom graphs and build custom dashboards

754
00:43:18,773 --> 00:43:23,956
and it can pull data from all kinds of sources like Prometheus and InfluxDB and Elasticsearch.

755
00:43:25,056 --> 00:43:28,938
We actually use this stack as well with Call of Duty.

756
00:43:29,258 --> 00:43:32,280
So we have the kind of basic graphs that we use inside the build server.

757
00:43:33,094 --> 00:43:36,936
But for writing more custom dashboards or for writing more complicated graphs

758
00:43:37,416 --> 00:43:40,377
We didn't want to like rewrite all of this kind of stuff in the build server

759
00:43:40,838 --> 00:43:46,100
So we also all the metrics also get piped into InfluxDB and anyone can then write their own dashboard

760
00:43:48,315 --> 00:43:49,857
Grafana also allows you to do alerting.

761
00:43:49,917 --> 00:43:53,021
So one thing that you might be able to do is send your memory

762
00:43:53,061 --> 00:43:54,383
stats into InfluxDB.

763
00:43:54,924 --> 00:43:56,886
And then with Grafana, you could detect

764
00:43:56,926 --> 00:43:59,229
when it goes over a certain memory budget, let's say,

765
00:43:59,590 --> 00:44:02,554
and then could send you a Slack notification or an email

766
00:44:02,574 --> 00:44:03,155
or something like that.

767
00:44:06,443 --> 00:44:10,686
And then finally, if your build server doesn't support configuration as code, you might be

768
00:44:10,706 --> 00:44:15,190
able to get some of the benefits by moving some of your logic out of the build server's

769
00:44:15,210 --> 00:44:17,872
GUI and into scripts that you check into source control.

770
00:44:18,413 --> 00:44:23,017
So instead of using a bunch of specialized steps for running different batch files or

771
00:44:23,037 --> 00:44:27,961
whatever, you could have a single run shell script that can then execute a Python script

772
00:44:28,041 --> 00:44:31,064
and that could then sync more stuff from source control.

773
00:44:34,250 --> 00:44:39,975
There are drawbacks, there are trade-offs for this, for example, if you put everything

774
00:44:40,015 --> 00:44:44,299
into one step, the default behaviour would be that all the log outputs would appear in

775
00:44:44,439 --> 00:44:50,785
one place and also it means that if you use any Jenkins plug-ins, for example, the building

776
00:44:50,865 --> 00:44:56,010
of the Visual Studio solution, you might have to rewrite some of that stuff yourself.

777
00:45:00,216 --> 00:45:01,778
So that's the story of Compass.

778
00:45:01,818 --> 00:45:03,279
I hope this has given you a bit of an insight

779
00:45:03,339 --> 00:45:05,341
into what goes on to making Call of Duty

780
00:45:05,421 --> 00:45:06,783
and making all the automated testing

781
00:45:06,803 --> 00:45:08,264
and profiling happen in Call of Duty.

782
00:45:09,526 --> 00:45:10,987
I just want to thank all my colleagues

783
00:45:11,087 --> 00:45:13,249
at Activision Central and all the Activision studios

784
00:45:13,310 --> 00:45:15,832
because automated testing at this scale is huge

785
00:45:16,052 --> 00:45:18,255
and without all of their help this would not be possible.

786
00:45:20,440 --> 00:45:23,902
Finally, if you would like to talk to me about any of these things or if you have any questions

787
00:45:23,942 --> 00:45:28,185
about how we do stuff, I would be very happy to answer questions, so please feel free to

788
00:45:28,205 --> 00:45:28,465
get in touch.

789
00:45:28,485 --> 00:45:30,807
Also, we are always on the lookout for talented people, so if you are interested in that,

790
00:45:30,827 --> 00:45:31,447
please get in touch as well.

791
00:45:31,467 --> 00:45:32,148
Thank you very much.

792
00:45:32,168 --> 00:45:32,388
Thank you.

793
00:45:32,468 --> 00:45:32,668
Thank you.

794
00:45:32,688 --> 00:45:32,888
Thank you.

795
00:45:32,908 --> 00:45:33,108
Thank you.

796
00:45:33,128 --> 00:45:33,389
Thank you.

797
00:45:33,409 --> 00:45:33,649
Thank you.

798
00:45:33,669 --> 00:45:33,909
Thank you.

799
00:45:33,929 --> 00:45:34,169
Thank you.

800
00:45:34,209 --> 00:45:34,549
Thank you.

801
00:45:34,569 --> 00:45:35,030
Thank you.

802
00:45:35,050 --> 00:45:35,270
Thank you.

803
00:45:35,290 --> 00:45:35,550
Thank you.

804
00:45:35,570 --> 00:45:35,790
Thank you.

805
00:45:35,810 --> 00:45:36,030
Thank you.

