1
00:00:05,735 --> 00:00:06,215
Hi, everyone.

2
00:00:06,316 --> 00:00:06,616
Oh, good.

3
00:00:06,876 --> 00:00:07,396
Mic's not working.

4
00:00:08,596 --> 00:00:09,557
So yeah, I'm Sebastian.

5
00:00:09,757 --> 00:00:10,297
Thank you, Dave.

6
00:00:10,757 --> 00:00:14,698
Thank you, Dave and Steve, for inviting me to come talk at

7
00:00:14,798 --> 00:00:15,279
GDC.

8
00:00:16,439 --> 00:00:19,780
Like the big text over there says, I'm a senior designer at

9
00:00:19,840 --> 00:00:24,502
BioWare, and I was most recently the lead combat

10
00:00:24,522 --> 00:00:26,222
design on Dragon Age Inquisition.

11
00:00:26,782 --> 00:00:30,964
And a lot of my time I spent working on the AI for the

12
00:00:31,004 --> 00:00:31,184
game.

13
00:00:32,392 --> 00:00:36,553
So before we get really rolling here, can I get a quick show of

14
00:00:36,593 --> 00:00:39,854
hands, who here has played Inquisition? Okay, good, good.

15
00:00:41,394 --> 00:00:44,775
And who's played some of the other Dragon Age games, DA2,

16
00:00:45,035 --> 00:00:49,416
Origin, okay, lots of fans in the crowd. And also this is my

17
00:00:49,456 --> 00:00:53,797
first time at GDC, and I'm just curious, who else is here for

18
00:00:53,837 --> 00:00:56,057
the first time, are there students just trying to get in?

19
00:00:56,157 --> 00:00:57,638
Okay, we're going to have some fun today.

20
00:00:59,338 --> 00:01:02,320
Great to see everyone here. Still a few people coming in at

21
00:01:02,360 --> 00:01:08,963
the back. A disclaimer, because this seems to be a tradition, a

22
00:01:09,023 --> 00:01:13,105
lot of the screen shots and art that you'll see in here are

23
00:01:13,205 --> 00:01:16,046
scratch or they have debug renders in them and are not

24
00:01:16,106 --> 00:01:20,888
representative of shipped game. The game shipped almost a year

25
00:01:20,908 --> 00:01:23,390
and a half ago now. So I don't know if that's a big concern

26
00:01:23,430 --> 00:01:25,971
anymore, but it seems to be a thing that people say when they

27
00:01:26,011 --> 00:01:26,871
do these presentations.

28
00:01:27,888 --> 00:01:34,877
So let's talk about Dragon Age Inquisition. It is a fantasy

29
00:01:35,037 --> 00:01:39,423
RPG from Bioware. And the big thing about Inquisition for us

30
00:01:39,443 --> 00:01:43,008
is that it was our first title on Frostbite.

31
00:01:43,828 --> 00:01:48,090
which is a really neat engine that's an internally a technology.

32
00:01:48,470 --> 00:01:53,252
We moved from our classic Eclipse engine that we used to make DAO and DA2.

33
00:01:54,252 --> 00:01:57,974
And yeah, Dragon Age Inquisition is the first RPG on Frostbite.

34
00:01:57,994 --> 00:01:59,815
It's our first Bioware title on Frostbite.

35
00:02:00,495 --> 00:02:00,635
And...

36
00:02:01,955 --> 00:02:04,857
Who here has been through an engine transition before? Show

37
00:02:04,877 --> 00:02:10,941
of hands. Okay. So yeah. Yeah. So you know what that's like. So

38
00:02:11,082 --> 00:02:15,164
big challenges ahead. When we started working on this back in 2011.

39
00:02:17,184 --> 00:02:20,565
It's also the third game in the Dragon Age series, which meant

40
00:02:21,225 --> 00:02:24,727
that although we were starting fresh with tech, we had already

41
00:02:24,787 --> 00:02:30,128
established a world and a story and characters that players

42
00:02:30,428 --> 00:02:33,809
already knew and loved, and so we had a lot to live up to with

43
00:02:33,849 --> 00:02:34,190
this game.

44
00:02:35,542 --> 00:02:38,244
And we also knew that we were going to be shipping on five

45
00:02:38,284 --> 00:02:43,648
platforms, not just the PC and the Xbox one and PS4, but we

46
00:02:43,668 --> 00:02:47,290
were also going to be targeting the Xbox 360 and the PS3, which

47
00:02:47,350 --> 00:02:49,172
meant that everything we were going to do was going to have to

48
00:02:49,232 --> 00:02:50,633
scale. So...

49
00:02:51,814 --> 00:02:55,578
a lot of constraints, a lot of things that sort of, you know,

50
00:02:56,078 --> 00:02:59,101
influenced us when we were starting development. And from

51
00:02:59,121 --> 00:03:01,244
the player's point of view, the biggest change that we made for

52
00:03:01,284 --> 00:03:06,229
Inquisition was that we were adding open exploration to the

53
00:03:06,249 --> 00:03:11,294
game. So that was going to be a big change for us when we were

54
00:03:11,334 --> 00:03:12,095
developing the game.

55
00:03:15,653 --> 00:03:18,414
as we learn to make the game deal with these big areas.

56
00:03:18,814 --> 00:03:20,355
And that's going to feature prominently

57
00:03:20,895 --> 00:03:22,375
in the challenges that we talk about today.

58
00:03:24,256 --> 00:03:27,077
So, when we talk about building the AI for Inquisition,

59
00:03:28,577 --> 00:03:30,298
the first thing we talk about is building creatures.

60
00:03:31,818 --> 00:03:33,538
Dragon Age has a huge variety of creatures.

61
00:03:33,979 --> 00:03:37,020
Big ones like this dragon, and giants,

62
00:03:37,640 --> 00:03:38,980
and big, big creatures.

63
00:03:39,480 --> 00:03:40,861
We also have a lot of little creatures

64
00:03:41,041 --> 00:03:42,061
like this cute little nug.

65
00:03:42,542 --> 00:03:44,502
Lots of little wilderness creatures

66
00:03:44,542 --> 00:03:45,963
to fill out those big open areas.

67
00:03:47,443 --> 00:03:49,784
Some creatures will fight by your side.

68
00:03:50,064 --> 00:03:51,425
These are some friendly templars.

69
00:03:53,125 --> 00:03:54,626
But most of the creatures we talk about,

70
00:03:55,206 --> 00:03:56,186
they just want to eat your face.

71
00:03:58,687 --> 00:03:58,847
So.

72
00:04:00,503 --> 00:04:02,864
We also need to talk about building AI for party members.

73
00:04:02,904 --> 00:04:05,524
And this is going to be another big theme that we talk about

74
00:04:05,544 --> 00:04:09,645
today. We have a variety of roles and capabilities. Dragon

75
00:04:09,665 --> 00:04:13,626
Age has always been about the party that you travel with. You

76
00:04:13,666 --> 00:04:16,567
don't go alone. You have melee fighters and you have ranged

77
00:04:16,667 --> 00:04:21,768
snipers. You have mages. You have indestructible tanks. A

78
00:04:21,868 --> 00:04:26,549
huge variety of capabilities and powers. 90 some different

79
00:04:26,629 --> 00:04:27,309
unique abilities.

80
00:04:28,824 --> 00:04:32,124
And just like in the previous games, the player has the

81
00:04:32,164 --> 00:04:36,385
ability to switch control between any character in the

82
00:04:36,405 --> 00:04:40,546
party at any time, meaning that from the system's point of view

83
00:04:41,006 --> 00:04:45,087
any character can go from being player controlled to AI

84
00:04:45,127 --> 00:04:49,268
controlled in the space of a heartbeat. And that's a

85
00:04:49,308 --> 00:04:52,909
particular challenge we have to deal with from the system's

86
00:04:52,949 --> 00:04:54,910
point of view. Additionally,

87
00:04:55,958 --> 00:04:58,839
the player can pause the game, pull the camera out, move around

88
00:04:58,859 --> 00:05:06,421
the battlefield and give direct orders to any of the characters

89
00:05:06,462 --> 00:05:09,182
in their party at the same time and watch how that scenario

90
00:05:09,202 --> 00:05:14,464
plays out. And we'll talk about how the A.I. accommodates that

91
00:05:14,504 --> 00:05:15,405
kind of control as well.

92
00:05:18,331 --> 00:05:21,292
And when we're building, because we're starting on a new engine,

93
00:05:21,572 --> 00:05:24,572
in addition to building the content and the creatures and

94
00:05:24,592 --> 00:05:27,053
the party members and the abilities and the combat system,

95
00:05:27,753 --> 00:05:30,774
we also had to build up our tools and workflow. As

96
00:05:30,954 --> 00:05:34,475
developers, we know that iteration speed is key to

97
00:05:34,535 --> 00:05:37,075
improving quality. The faster you can see your changes in the

98
00:05:37,095 --> 00:05:40,816
game, the faster you can evaluate them and see whether

99
00:05:40,876 --> 00:05:43,857
you need to improve further or whether you've achieved what

100
00:05:43,877 --> 00:05:44,457
you're trying to hit.

101
00:05:45,988 --> 00:05:49,229
So we knew that we wanted to take advantage of the engine's

102
00:05:50,109 --> 00:05:54,110
data-driven pipeline to be able to do live tweaking in our

103
00:05:54,130 --> 00:05:59,591
tool set and see those results in-game as we were playing and

104
00:06:00,071 --> 00:06:01,851
editing and iterating on gameplay.

105
00:06:03,712 --> 00:06:06,352
For our AI, there were two related workflows, actually,

106
00:06:06,372 --> 00:06:07,132
that we were working on.

107
00:06:08,113 --> 00:06:11,913
One is for combat designers who are working on building out.

108
00:06:13,009 --> 00:06:16,771
the AI for creatures and party members and building all the

109
00:06:16,831 --> 00:06:23,575
pieces. And we also needed to worry about work flows for our

110
00:06:23,595 --> 00:06:28,458
level designers who had to shape the AI behavior in the

111
00:06:28,498 --> 00:06:30,880
environments that they were building and the plots and

112
00:06:30,920 --> 00:06:36,823
stories that they were trying to tell. So today's focus in this

113
00:06:36,863 --> 00:06:37,323
context.

114
00:06:39,294 --> 00:06:44,375
is going to talk about two big themes, as I mentioned. One is

115
00:06:44,435 --> 00:06:50,136
adapting to big open areas for game play in a way that we've

116
00:06:50,156 --> 00:06:55,458
never done at BioWare or on Dragon Age before. And the other

117
00:06:56,898 --> 00:07:02,100
is looking at how we built up the party AI systems to support

118
00:07:02,140 --> 00:07:06,141
our complex and customizable party members so that they can

119
00:07:06,181 --> 00:07:06,841
support the player.

120
00:07:08,827 --> 00:07:13,212
And this is a retrospective. It's been, as I say, almost a

121
00:07:13,252 --> 00:07:16,595
year and a half since we shipped Inquisition. So I'm going to

122
00:07:16,615 --> 00:07:19,037
try to tell the story of development and some of the

123
00:07:19,077 --> 00:07:23,642
roadblocks we hit and the way that we crossed some of those

124
00:07:23,682 --> 00:07:24,102
challenges.

125
00:07:24,943 --> 00:07:29,966
So hopefully by the end of our talk today, you'll be able to

126
00:07:30,006 --> 00:07:33,448
take some of these solutions to solve your own related problems

127
00:07:34,268 --> 00:07:36,950
and maybe cut out some surprises by taking advantage of the

128
00:07:36,970 --> 00:07:40,071
trial and error that we went through bringing this game up.

129
00:07:41,732 --> 00:07:46,095
So we got a big box labeled frostbite. We cracked it open

130
00:07:47,235 --> 00:07:51,158
and what was inside? Well, thankfully we knew that we

131
00:07:51,178 --> 00:07:52,498
wouldn't have to solve pathfinding.

132
00:07:53,611 --> 00:07:58,054
We got a path finding middleware called nav power that came with

133
00:07:58,074 --> 00:08:03,718
an integration into frostbite. So we have path mesh and

134
00:08:04,019 --> 00:08:06,380
navigation for our characters. You can see that big sea of

135
00:08:06,440 --> 00:08:11,184
green polygons over there on the display. So that gave us a

136
00:08:11,204 --> 00:08:13,285
really good starting point. We could get characters moving

137
00:08:13,305 --> 00:08:18,129
around and following each other around without having to do any

138
00:08:18,169 --> 00:08:20,090
of that base level work for ourselves.

139
00:08:21,302 --> 00:08:25,226
On the other side, we also were able to take advantage of

140
00:08:25,406 --> 00:08:29,310
another EA team who had built a decision tree architecture.

141
00:08:30,291 --> 00:08:33,494
And this is where we would build the vast majority of our

142
00:08:33,534 --> 00:08:36,176
logic from the combat design side.

143
00:08:37,317 --> 00:08:39,560
It came with a nice visual node editor that

144
00:08:39,580 --> 00:08:40,320
we were able to use.

145
00:08:41,349 --> 00:08:45,431
And we, as a game team, as a combat team, we built out a huge

146
00:08:45,511 --> 00:08:49,614
library of conditional evaluations to test things in

147
00:08:49,634 --> 00:08:53,136
the world and to be able to give our AI the information it

148
00:08:53,176 --> 00:08:57,639
needed to make interesting choices. And also a set of

149
00:08:57,679 --> 00:09:01,741
interfaces to drive game systems. And that's primarily in

150
00:09:01,801 --> 00:09:05,163
our game where am I going to move, how am I going to move

151
00:09:05,203 --> 00:09:09,446
there, and then what abilities do I want to use? Well, what's

152
00:09:09,466 --> 00:09:09,866
an ability?

153
00:09:10,925 --> 00:09:14,707
And ability is a concept that we brought forward from past

154
00:09:14,727 --> 00:09:18,568
Dragon Age games that gave us a consistent approach to defining

155
00:09:18,908 --> 00:09:24,731
gameplay actions. So for players and party members, abilities are

156
00:09:24,751 --> 00:09:28,032
explicit. This is something that you buy as you level up. You go

157
00:09:28,072 --> 00:09:30,333
and you buy abilities with points, you put them on your bar

158
00:09:30,553 --> 00:09:34,174
and they're something you can use. And over the course of the

159
00:09:34,214 --> 00:09:36,655
game, you're getting new abilities, you're upgrading them

160
00:09:37,435 --> 00:09:40,076
and these are the things that you do in game.

161
00:09:41,362 --> 00:09:44,643
We also use this, in addition to using it for party members, we

162
00:09:44,663 --> 00:09:49,024
also use the ability framework to define our NPCs. So

163
00:09:49,224 --> 00:09:52,185
everything that an NPC character does is also defined as an

164
00:09:52,225 --> 00:09:54,226
ability even though it doesn't have that player facing

165
00:09:54,726 --> 00:09:58,988
interface in the level up GUI with the ability trees. So this

166
00:09:59,028 --> 00:10:02,049
includes, as I say, obvious things. I'm going to throw a

167
00:10:02,069 --> 00:10:04,409
fireball. I'm going to taunt that guy over there and get his

168
00:10:04,489 --> 00:10:08,011
aggro. I want to dodge out of the way. Those are all active

169
00:10:08,031 --> 00:10:08,411
abilities.

170
00:10:09,684 --> 00:10:13,507
But some things that aren't player facing as abilities like

171
00:10:13,847 --> 00:10:19,171
jumping, drinking a potion, twitches that NPCs would play,

172
00:10:19,211 --> 00:10:22,153
I'm going to yell at you from across the map, those are all

173
00:10:22,193 --> 00:10:25,736
implemented as abilities under the hood. So this gives us a

174
00:10:26,076 --> 00:10:29,959
consistent approach to how we define gameplay actions. And

175
00:10:29,979 --> 00:10:32,060
this is going to be very important when we talk about

176
00:10:32,320 --> 00:10:35,623
ability choosing. So...

177
00:10:37,012 --> 00:10:38,274
We've got our pathfinding system.

178
00:10:38,634 --> 00:10:39,595
We've got a decision tree.

179
00:10:40,096 --> 00:10:44,421
We've got a framework to build our actions and abilities on.

180
00:10:45,062 --> 00:10:48,346
Now we need to actually tackle making all these things go.

181
00:10:48,366 --> 00:10:50,028
We'd never made a game with these Frostbite tools.

182
00:10:50,429 --> 00:10:52,351
We'd never had open our exploration areas.

183
00:10:52,671 --> 00:10:54,634
We knew that we had a big scope, lots of things

184
00:10:54,654 --> 00:10:55,355
that we had to build.

185
00:10:56,075 --> 00:10:58,117
And so we wanted to make sure that we had a consistent

186
00:10:58,157 --> 00:11:01,119
approach to the way that our AI evaluates and the way that

187
00:11:01,159 --> 00:11:04,240
decisions are made so that everyone on the team had the

188
00:11:04,281 --> 00:11:08,063
same idea of how things were going to work at the most basic

189
00:11:08,103 --> 00:11:12,105
level. And we wanted to make sure that, you know, even across

190
00:11:12,165 --> 00:11:14,987
creatures and party members, because everything is running

191
00:11:15,007 --> 00:11:16,848
under the same AI system, we wanted to make sure that

192
00:11:17,188 --> 00:11:19,990
everyone followed the same basic set of rules. And this is what

193
00:11:20,010 --> 00:11:23,672
we came up with. So we'll walk through a little example. So

194
00:11:24,626 --> 00:11:28,570
I'm going to run AI in our example here on this character

195
00:11:28,610 --> 00:11:34,235
who's standing in front. And those four glowy purple fellas

196
00:11:34,335 --> 00:11:37,958
in the back there, those are our enemies. So the first thing our

197
00:11:37,978 --> 00:11:41,622
AI does in the core evaluation loop, the first thing we're

198
00:11:41,642 --> 00:11:46,967
going to do is pick a target. So that guy. That guy right there.

199
00:11:48,133 --> 00:11:51,034
The next thing that's going to happen is that we're going to

200
00:11:51,074 --> 00:11:54,355
choose what ability we want to use. So we picked flanking

201
00:11:54,415 --> 00:11:58,676
strike down there in the right-hand corner. That's a

202
00:11:58,716 --> 00:12:01,257
melee ability, so we know that we're going to have to move,

203
00:12:01,777 --> 00:12:03,577
because we're going to use our daggers, we're going to have to

204
00:12:03,597 --> 00:12:07,658
move in order to be able to execute that. And...

205
00:12:08,851 --> 00:12:11,812
Once we've moved into position, then we can play the animation,

206
00:12:12,172 --> 00:12:15,733
apply the damage, do all the fun stuff of actually using that

207
00:12:15,773 --> 00:12:22,254
ability. So that's the core decision-making loop and action

208
00:12:22,494 --> 00:12:25,955
loop that every AI-controlled character in the game basically

209
00:12:25,995 --> 00:12:29,296
follows. There's a few exceptions, but typically you

210
00:12:29,316 --> 00:12:31,896
pick your target, you pick your ability that you want to use,

211
00:12:32,496 --> 00:12:35,317
you move if you have to to accomplish it, and then you

212
00:12:35,357 --> 00:12:37,958
execute it by firing the animation, and away we go.

213
00:12:39,359 --> 00:12:43,043
So with this in place, as a team, as a development team, we

214
00:12:43,083 --> 00:12:46,967
have a consistent approach to AI evaluation, supports both party

215
00:12:47,007 --> 00:12:51,171
members and creatures. Between party members and creatures, how

216
00:12:51,191 --> 00:12:52,773
they do that choosing. For example,

217
00:12:54,057 --> 00:12:58,662
Party members have a player customization element that they

218
00:12:58,682 --> 00:13:02,306
can use for how they're going to pick targets. Whereas

219
00:13:02,506 --> 00:13:05,750
creatures use an aggro system to determine who they're

220
00:13:05,770 --> 00:13:10,215
targeting. But despite having minor differences in how they do

221
00:13:10,255 --> 00:13:13,258
these steps, everyone follows the same basic logic pattern.

222
00:13:14,718 --> 00:13:18,239
Now, not every ability, not everything you want to do, can

223
00:13:18,259 --> 00:13:21,400
be accomplished by directly moving to your target and

224
00:13:21,440 --> 00:13:24,161
smacking them in the face, as we did in our previous example.

225
00:13:25,441 --> 00:13:28,342
The pathfinding layer, as I mentioned, gave us move to

226
00:13:28,362 --> 00:13:29,982
point and follow leader.

227
00:13:31,042 --> 00:13:35,563
So with that, as long as we know where we want to go,

228
00:13:36,284 --> 00:13:37,224
we've got that solved.

229
00:13:37,764 --> 00:13:42,405
But a lot of our creatures and our party behaviors need more

230
00:13:42,465 --> 00:13:43,265
complex movement.

231
00:13:45,475 --> 00:13:47,556
We wanted to be able to create more interesting patterns,

232
00:13:47,756 --> 00:13:49,257
both to give life to our creatures

233
00:13:49,697 --> 00:13:51,859
and fill out the big open spaces that we had

234
00:13:51,919 --> 00:13:53,559
in a way that meets player expectations,

235
00:13:54,520 --> 00:13:58,842
and also be able to create interesting gameplay challenges

236
00:13:59,282 --> 00:14:01,563
without requiring designers to hand-build

237
00:14:01,964 --> 00:14:05,926
specific location picking and movement behaviors every time.

238
00:14:06,046 --> 00:14:07,667
So we wanted reusable abstractions.

239
00:14:08,087 --> 00:14:09,888
We came up with a system we call Movement Behaviors.

240
00:14:11,118 --> 00:14:14,239
So these are reusable, parameterized, you can see a big

241
00:14:14,279 --> 00:14:17,439
example from the editor over there on the screen.

242
00:14:18,200 --> 00:14:22,000
Parameterized chunks of behavior that a creature can run

243
00:14:22,100 --> 00:14:25,801
one at a time and that gets, excuse me, that puts them in a

244
00:14:25,821 --> 00:14:28,582
position to be able to do interesting things in gameplay

245
00:14:28,622 --> 00:14:32,363
without having the designer to manually specify how they're

246
00:14:32,383 --> 00:14:34,323
going to compute their targets and the move positions

247
00:14:34,363 --> 00:14:34,723
every time.

248
00:14:36,667 --> 00:14:38,729
So, an example of one of these is stay at range,

249
00:14:38,789 --> 00:14:40,992
you can see over there, and it's parameterized

250
00:14:42,293 --> 00:14:45,056
so that the designer can say, that's the guy

251
00:14:45,177 --> 00:14:47,740
or the thing that you want to focus on,

252
00:14:48,160 --> 00:14:49,361
and you're going to pick a position.

253
00:14:50,595 --> 00:14:54,557
somewhere around that object or that character and hang out

254
00:14:54,577 --> 00:14:58,179
there even if that target moves. And it gives the designer the

255
00:14:58,199 --> 00:15:01,341
flexibility even to say, okay, I want you to be in a flanking

256
00:15:01,361 --> 00:15:03,382
position. So you're going to try to move around into the back

257
00:15:03,443 --> 00:15:06,644
arc of that character. Or I want you to, you know, sort of

258
00:15:06,724 --> 00:15:11,087
shuffle around and be a little more dynamic rather than picking

259
00:15:11,127 --> 00:15:12,048
a point and sticking in it.

260
00:15:15,321 --> 00:15:16,822
Additionally, we have a movement behavior

261
00:15:17,203 --> 00:15:19,205
that lets characters find cover objects

262
00:15:19,225 --> 00:15:20,326
that have been marked up in the world

263
00:15:20,706 --> 00:15:23,889
so that, for example, some of our ranged creatures

264
00:15:24,410 --> 00:15:26,071
can respond to their environment a little more

265
00:15:26,552 --> 00:15:28,493
and feel like they're living in the scene

266
00:15:28,513 --> 00:15:29,955
without level designers having given them

267
00:15:29,995 --> 00:15:31,656
specific movement commands.

268
00:15:33,681 --> 00:15:37,802
our prey flee behavior is implemented in the same way

269
00:15:38,442 --> 00:15:41,063
where even if we have a creature,

270
00:15:41,303 --> 00:15:42,663
one of those little nugs who's fleeing

271
00:15:42,723 --> 00:15:43,804
from three different predators,

272
00:15:44,684 --> 00:15:46,584
the creature just needs to run the flee behavior

273
00:15:46,644 --> 00:15:49,105
and it goes and it looks and finds the right path

274
00:15:49,145 --> 00:15:51,566
that's going to take him away from those predators

275
00:15:52,526 --> 00:15:54,487
regardless of where their positions are in the world.

276
00:15:55,167 --> 00:15:56,007
And even hold position.

277
00:15:56,927 --> 00:16:01,530
which you'd think would be pretty simple, it gets a reusable parameterized movement

278
00:16:01,550 --> 00:16:05,192
behavior so it can sit in that slot and we can do things with it like tell someone to

279
00:16:05,232 --> 00:16:10,695
stand in one place but track a target even though that target might be moving around

280
00:16:10,715 --> 00:16:15,878
the level. So with this system in place, we now have

281
00:16:15,958 --> 00:16:20,620
tools that allow creatures to move around in ways that are both interesting for game

282
00:16:20,640 --> 00:16:24,022
plays for game play. And also ‑‑

283
00:16:25,170 --> 00:16:27,931
meet player expectations for wildlife. Predator prey

284
00:16:27,991 --> 00:16:34,913
behaviors, aggression, circling wolves, that kind of thing. The

285
00:16:34,953 --> 00:16:39,214
next problem we had to deal with is around the nature of these

286
00:16:39,274 --> 00:16:43,176
big open zones themselves. In our past games, combat tended to

287
00:16:43,236 --> 00:16:47,137
happen in fairly enclosed spaces. If there were hostile

288
00:16:47,177 --> 00:16:50,658
creatures where you were, there was going to be a fight, and

289
00:16:50,678 --> 00:16:54,500
that fight was going to end with a stack of bodies on one side or

290
00:16:54,520 --> 00:16:54,800
the other.

291
00:16:56,679 --> 00:17:03,205
and open exploration zones change the rules. In DA2 in this

292
00:17:03,245 --> 00:17:06,967
example here, there's no walking away. That train coming over the

293
00:17:06,988 --> 00:17:10,410
hill, they're going to chase you forever until you run into the

294
00:17:10,450 --> 00:17:12,992
area boundary and then you're going to fight them and there's

295
00:17:13,012 --> 00:17:16,255
going to be a stack of bodies on one side or the other. However,

296
00:17:17,576 --> 00:17:19,678
when you're in a big area like one of our explore zones,

297
00:17:21,107 --> 00:17:26,031
The player often has the chance to try to walk away from a

298
00:17:26,091 --> 00:17:29,074
fight, either because creatures, you know, they're

299
00:17:29,094 --> 00:17:31,776
just defending their home. And they'll leave you alone if you

300
00:17:31,816 --> 00:17:36,300
walk away far enough. Or perhaps you don't even want to

301
00:17:36,340 --> 00:17:39,783
get involved in that fight. You need to be able to walk up and

302
00:17:40,343 --> 00:17:42,645
determine whether you want to even engage that battle or not.

303
00:17:45,852 --> 00:17:49,054
In addition to those sort of gameplay facing concerns, we

304
00:17:49,074 --> 00:17:51,916
also had very pragmatic technical reasons for having to

305
00:17:51,956 --> 00:17:54,878
assert more control over where fights could happen. Because we

306
00:17:54,898 --> 00:17:59,381
had to stream these big giant areas. And there's a risk if the

307
00:17:59,421 --> 00:18:01,863
player can kite those hurlocks all the way from their origin

308
00:18:01,903 --> 00:18:04,564
point, then they're going to get streamed out because they belong

309
00:18:04,584 --> 00:18:08,107
to that part of the terrain where the player was. And now

310
00:18:08,167 --> 00:18:10,849
we've streamed them out. We've even streamed out the terrain

311
00:18:10,889 --> 00:18:11,829
underneath where they came in.

312
00:18:12,981 --> 00:18:15,603
We could also get into bad situations where if you can

313
00:18:16,304 --> 00:18:20,648
manage to taunt enough creatures on to you and attract the

314
00:18:20,668 --> 00:18:23,631
attention of enough of these encounters, then you could run

315
00:18:23,671 --> 00:18:26,974
out of memory budget. And remember, we're dealing with

316
00:18:26,994 --> 00:18:29,777
Gen 3 memory budget here. So things were pretty tight.

317
00:18:31,101 --> 00:18:33,183
before we had a solution for dealing with this.

318
00:18:33,624 --> 00:18:35,305
And in addition to being bad for performance,

319
00:18:35,746 --> 00:18:38,228
as I say, this could lead to really frustrating

320
00:18:38,388 --> 00:18:41,631
gameplay situations and we needed level designers

321
00:18:41,691 --> 00:18:43,392
to have tools to be able to control

322
00:18:44,013 --> 00:18:45,795
and build the specific kind of experience

323
00:18:45,835 --> 00:18:48,597
that matches the themes and the story

324
00:18:49,038 --> 00:18:51,460
and the gameplay challenges that we're trying to create.

325
00:18:53,241 --> 00:18:53,402
So.

326
00:18:54,443 --> 00:18:58,167
Here's an example of a very simple encounter that we built

327
00:18:58,187 --> 00:19:01,310
in our level. And there's the tether volume that the designer

328
00:19:01,350 --> 00:19:06,795
has dropped in on top of it. So on the AI side, inside our

329
00:19:06,815 --> 00:19:10,179
tether system, we have three simple rules. And the first

330
00:19:10,239 --> 00:19:13,662
rule, as you can see, is that you can't leave. Any creature

331
00:19:13,722 --> 00:19:17,406
who's attached to a tether, their movement behaviors are

332
00:19:17,446 --> 00:19:18,527
aware of that tether zone.

333
00:19:19,954 --> 00:19:23,437
and they won't pick points. They'll never pick a destination

334
00:19:23,497 --> 00:19:28,141
point that's outside that tether box. So the creature should

335
00:19:28,161 --> 00:19:31,884
never be voluntarily moving outside its tether zone. In

336
00:19:31,924 --> 00:19:37,970
addition, any target inside my tether box is better than any

337
00:19:38,010 --> 00:19:40,292
target outside the tether box. The aggro system is aware of

338
00:19:40,352 --> 00:19:42,354
tethers. So that a creature

339
00:19:43,339 --> 00:19:46,762
is able to choose targets that are less likely to drag them out

340
00:19:46,802 --> 00:19:50,245
of their target box. And if they know that the creature that

341
00:19:50,485 --> 00:19:52,947
they're looking at is outside their tether zone, then they can

342
00:19:52,987 --> 00:19:56,209
choose to do things like walk home rather than continuing to

343
00:19:56,529 --> 00:19:59,772
engage or chase a creature who's outside their area of

344
00:19:59,832 --> 00:20:03,715
operation. And the third rule is that if you ever end up

345
00:20:03,795 --> 00:20:04,796
outside, you can't do anything.

346
00:20:05,257 --> 00:20:08,739
whether it's because the designer changed your active

347
00:20:08,779 --> 00:20:12,482
tether box in game play or if you got knocked out of your

348
00:20:12,502 --> 00:20:17,705
tether zone by a combat effect. If you ever end up outside,

349
00:20:18,226 --> 00:20:22,368
stop what you're doing and run home. Run back toward your spawn

350
00:20:22,409 --> 00:20:26,451
point or your tether point until you're back inside your box

351
00:20:26,471 --> 00:20:27,512
before you can do anything else.

352
00:20:29,243 --> 00:20:40,330
And so with these rules in place and the editor tools to support them, level designers could build encounters with reliable expectations of how creatures were going to behave and how they were going to move around.

353
00:20:43,252 --> 00:20:53,959
And related problem we had was where tether volumes solve the problem of where creatures are allowed to go in a really broad stroke sense.

354
00:20:55,300 --> 00:20:57,581
We had hazards where creatures shouldn't go.

355
00:20:59,338 --> 00:21:02,320
that despite being pathable, despite being things that you

356
00:21:02,380 --> 00:21:05,082
could run through, you really shouldn't be standing in those

357
00:21:05,162 --> 00:21:09,245
areas. You want to avoid those fires on the ground, barriers,

358
00:21:09,306 --> 00:21:13,469
traps, all kinds of stuff that in inquisition with our big

359
00:21:13,549 --> 00:21:17,452
organic environments, we had a lot more of this kind of ambient

360
00:21:17,492 --> 00:21:17,872
hazard.

361
00:21:19,909 --> 00:21:24,853
In DA2 we didn't really have this kind of thing happen a lot.

362
00:21:25,073 --> 00:21:27,135
If there was a fire on the ground it was usually there for

363
00:21:27,215 --> 00:21:30,558
one of two reasons. One is because it was a specific

364
00:21:30,618 --> 00:21:34,262
gameplay challenge that you as the player were expected to

365
00:21:34,302 --> 00:21:34,702
deal with.

366
00:21:35,403 --> 00:21:38,244
So don't stand in the fire. Well, if your guys are in the

367
00:21:38,264 --> 00:21:41,626
fire, pull them out. And the other reason or the other

368
00:21:41,886 --> 00:21:44,667
possibility was that it was something that you had placed

369
00:21:44,707 --> 00:21:47,809
down that creatures should be standing in and taking damage

370
00:21:48,049 --> 00:21:50,530
rather than very smartly running out and negating your AOE

371
00:21:50,570 --> 00:21:52,191
attack. So...

372
00:21:53,152 --> 00:21:55,434
The other twist with inquisition where we have more of these

373
00:21:55,494 --> 00:21:58,277
organic hazards is sometimes they can appear spontaneously.

374
00:21:58,657 --> 00:22:02,200
Things can catch fire. The dragon can light areas of the

375
00:22:02,220 --> 00:22:05,023
ground on fire in combat and something that was safe five

376
00:22:05,063 --> 00:22:09,547
seconds ago, a good place to stand, can become somewhere that

377
00:22:09,567 --> 00:22:11,548
you really don't want to stand for an extended period of time.

378
00:22:12,269 --> 00:22:14,711
So we needed a way to keep AI creatures out of these areas.

379
00:22:16,192 --> 00:22:19,715
The first thing we did was add a pathfinding obstacle. So

380
00:22:20,827 --> 00:22:23,909
You can see that big yellow chunk superimposed on top of

381
00:22:23,929 --> 00:22:25,230
the bright green nav mesh.

382
00:22:26,131 --> 00:22:29,553
And that kept creatures from ambiently wandering into the

383
00:22:29,593 --> 00:22:31,894
fire and going, ow, hot, ow, hot.

384
00:22:33,275 --> 00:22:34,736
And that was OK.

385
00:22:35,196 --> 00:22:38,338
It meant that creatures wouldn't discretionarily walk

386
00:22:38,418 --> 00:22:41,660
in, or they would avoid it on their way around the world.

387
00:22:42,713 --> 00:22:46,176
But we needed something a little bit stronger because as I say,

388
00:22:46,556 --> 00:22:48,478
these things could appear under your feet and we needed a way

389
00:22:48,498 --> 00:22:52,302
to motivate the AI to actually move if they ended up inside one

390
00:22:52,322 --> 00:22:55,204
of these. And so we created this tool we call a fear zone. And

391
00:22:55,244 --> 00:22:59,688
the fear zone, unlike the tether zone, only has one rule. If

392
00:22:59,708 --> 00:23:03,692
you're in the fear zone, go somewhere else. So inside the

393
00:23:03,712 --> 00:23:06,815
prefab editor for our ground fire here, you can see we drop

394
00:23:06,875 --> 00:23:09,217
in a fear zone, which is just a spherical bubble.

395
00:23:10,437 --> 00:23:13,658
that says to the AI, if you're ever inside here, run out.

396
00:23:14,018 --> 00:23:18,380
And you can see in the debug draw there in the middle of

397
00:23:18,420 --> 00:23:21,121
gameplay, it shows up as a kind of a blue sphere.

398
00:23:21,321 --> 00:23:26,304
Hopefully it's contrasting enough on the display that you

399
00:23:26,344 --> 00:23:26,724
can see.

400
00:23:28,621 --> 00:23:32,226
Varek is standing in the middle of the fire there and the AI is

401
00:23:32,367 --> 00:23:34,570
giving him a cue telling him that he should move out of that

402
00:23:34,610 --> 00:23:38,395
fire rather than standing in it despite me having ordered him to

403
00:23:38,435 --> 00:23:40,838
go in there five seconds ago for the purpose of demonstration.

404
00:23:43,197 --> 00:23:46,659
So with fear zones, designers have a tool now to motivate

405
00:23:46,719 --> 00:23:52,101
creatures under AI control to move away from some area of

406
00:23:52,141 --> 00:23:55,182
danger. And this actually works using the same movement

407
00:23:55,222 --> 00:23:58,263
behaviors as the prey flee behavior that I talked about

408
00:23:58,303 --> 00:24:02,105
earlier. So we have a consistent set of tools for saying, okay,

409
00:24:02,485 --> 00:24:06,006
anything that you're trying to get away from, here's a way to

410
00:24:06,026 --> 00:24:08,888
pick a point and move away from that direction.

411
00:24:09,708 --> 00:24:12,410
And as it turned out, this fear zone tool was also very useful

412
00:24:13,111 --> 00:24:16,954
for our open world game play in that it gave us a tool to drop

413
00:24:17,014 --> 00:24:21,737
down around, you know, camps and settlements to keep ambient

414
00:24:21,877 --> 00:24:24,279
hostile wildlife from wandering through the middle of the

415
00:24:24,299 --> 00:24:24,579
village.

416
00:24:26,932 --> 00:24:31,193
And this created a problem that I call standoff in bear town.

417
00:24:31,733 --> 00:24:33,473
So this is going to require a little explanation, a little

418
00:24:33,513 --> 00:24:37,034
background. For those of you who have played inquisition, you

419
00:24:37,054 --> 00:24:40,314
know that bears are tough. And the reason that bears are tough

420
00:24:40,895 --> 00:24:43,875
is that bears are balanced for a four on one fight. Because the

421
00:24:43,915 --> 00:24:49,896
bears have to stand up against a party of four rather than

422
00:24:50,216 --> 00:24:52,137
rolling over like most of the other creatures that are

423
00:24:52,177 --> 00:24:53,517
designed to be encountered in groups.

424
00:24:54,939 --> 00:24:57,040
And there's a corner of the hinterlands explore zone that is

425
00:24:57,060 --> 00:25:00,421
just packed with bears. I called it bear town during

426
00:25:00,461 --> 00:25:04,322
development. And there is luckily there's an inquisition

427
00:25:04,382 --> 00:25:07,843
camp. There's a rest and resupply area in that part of

428
00:25:07,923 --> 00:25:11,845
the map where you can go after fighting a bunch of bears and

429
00:25:12,245 --> 00:25:16,746
getting slapped around and, you know, revive your party members,

430
00:25:17,246 --> 00:25:19,167
resupply your potions, get healed up.

431
00:25:20,627 --> 00:25:24,191
And the bears are kept out of the camp by the fear zone that

432
00:25:24,231 --> 00:25:27,574
we drop in around the camp. So you can see there's a big 30

433
00:25:28,014 --> 00:25:31,878
meter bubble around the camp area in the level editor there

434
00:25:34,200 --> 00:25:37,003
that keeps the bears out. If they try to come inside, they

435
00:25:37,043 --> 00:25:38,364
hit the fear zone and they leave.

436
00:25:40,069 --> 00:25:42,832
but the problem with this is that if they're actually trying

437
00:25:42,852 --> 00:25:44,993
to actively move into the fear zone because you're in there,

438
00:25:45,214 --> 00:25:49,577
then they ended up bouncing off the edge of the fear zone and

439
00:25:49,657 --> 00:25:52,139
oscillating and wobbling back and forth there. That's no good.

440
00:25:53,641 --> 00:25:57,524
Meanwhile, the player, as long as that bear is there and

441
00:25:57,544 --> 00:25:59,005
hostile, he's not going to be able to move into the fear zone

442
00:26:00,213 --> 00:26:02,254
The player is not allowed to interact with any of those

443
00:26:02,314 --> 00:26:04,655
resupply items. They're not allowed to do anything

444
00:26:04,695 --> 00:26:08,216
interesting in camp. So they're stuck there. They're inside. The

445
00:26:08,256 --> 00:26:11,257
bear can't come in, but they can't leave. They can't fast

446
00:26:11,297 --> 00:26:14,498
travel. There's no way. So they're stuck. So

447
00:26:15,606 --> 00:26:20,631
The first thing we did was we changed the AI so that the AI

448
00:26:20,711 --> 00:26:24,774
is blinded to anyone who's in a fear zone that they're

449
00:26:25,515 --> 00:26:29,138
responsible for. So the bear now can no longer see you. The

450
00:26:29,178 --> 00:26:33,442
bear wasn't trying to bounce off the fear zone anymore. You just

451
00:26:33,462 --> 00:26:40,889
sit there. Staring at you. Waiting. So we changed the AI

452
00:26:42,505 --> 00:26:46,268
We ended up having to clarify the game rules so that the

453
00:26:46,308 --> 00:26:49,271
party was allowed to drop out of combat.

454
00:26:50,192 --> 00:26:52,053
Even if there was a hostile bear there, as long as he

455
00:26:52,093 --> 00:26:56,237
wasn't actively targeting somebody in your party, that

456
00:26:56,357 --> 00:27:00,000
you would be allowed to use the camp facilities despite

457
00:27:00,040 --> 00:27:04,264
there being a bear sitting out there waiting for

458
00:27:04,284 --> 00:27:04,844
you to come back.

459
00:27:06,844 --> 00:27:10,729
And by solving these problems, we were able to achieve a

460
00:27:10,849 --> 00:27:14,173
pretty good game play balance between having aggressive,

461
00:27:14,273 --> 00:27:17,777
threatening, dangerous wildlife and basic player

462
00:27:17,817 --> 00:27:22,323
survivability. We had to give them a way out. Now, let's talk

463
00:27:22,363 --> 00:27:25,948
about a problem specific to our player party path finding.

464
00:27:27,372 --> 00:27:30,354
Relative to our previous games, we have a much more open and

465
00:27:30,374 --> 00:27:33,676
permissive movement model. You can jump over gaps. You can

466
00:27:33,736 --> 00:27:36,118
jump onto obstacles. You can scramble your way up onto

467
00:27:36,158 --> 00:27:40,340
things. And in some cases, you can find your way off of path

468
00:27:40,380 --> 00:27:42,742
finding. So you can see an example here, that bright green

469
00:27:43,222 --> 00:27:43,703
nav mesh.

470
00:27:44,965 --> 00:27:48,508
sweeps around and everyone else in my party down in the right

471
00:27:48,548 --> 00:27:51,911
hand side of the screen is standing on the nav mesh, but I

472
00:27:51,971 --> 00:27:55,054
managed to jump my inquisitor in the left hand side up there on

473
00:27:55,074 --> 00:27:58,517
an island where there's no path finding data. Which is good

474
00:27:58,617 --> 00:28:00,479
because it means that the player isn't stuck.

475
00:28:01,402 --> 00:28:05,805
trying to use physics movement to jump up on to obstacles and

476
00:28:06,105 --> 00:28:08,186
get to somewhere that it looks like they should be able to get

477
00:28:09,087 --> 00:28:11,309
the player's movement isn't constrained by the AI

478
00:28:11,329 --> 00:28:15,612
parameters. But this is a problem for us when we're trying

479
00:28:15,632 --> 00:28:18,994
to get everyone else in the party to follow you. Because the

480
00:28:19,034 --> 00:28:23,117
player can go places that the AI just has no way of going. And

481
00:28:23,237 --> 00:28:28,301
so this led to a couple key scenarios that we had to solve.

482
00:28:30,117 --> 00:28:31,917
Here's another example. You can see I'm controlling the

483
00:28:31,937 --> 00:28:35,459
inquisitor there in the middle. And you can see I'm up on a

484
00:28:35,499 --> 00:28:37,599
rock in the middle of the screen where there's no path finding

485
00:28:37,619 --> 00:28:41,161
data. If I switch to another party member, like iron bull

486
00:28:41,881 --> 00:28:46,363
over there on the side, then I can grab control of him, I can

487
00:28:46,403 --> 00:28:49,564
drive away, and I can leave my inquisitor up there on the rock.

488
00:28:50,284 --> 00:28:50,364
And

489
00:28:51,605 --> 00:28:55,106
well, they have no way of getting naturally back down off

490
00:28:55,146 --> 00:28:58,948
that rock because there's no pathing data. So what happens in

491
00:28:58,988 --> 00:29:03,771
our game is when you switch characters, whenever a character

492
00:29:03,791 --> 00:29:09,073
becomes AI controlled, they get teleported. And for the sake of

493
00:29:09,133 --> 00:29:11,734
player experience, usually this gets covered by the camera

494
00:29:11,774 --> 00:29:15,756
transition or in really severe cases, there's a fade through

495
00:29:15,796 --> 00:29:17,617
black to cover that teleport up.

496
00:29:20,463 --> 00:29:22,585
and if you played the game and you never noticed this

497
00:29:22,645 --> 00:29:29,571
happening, success. But this gives us the reliability that we

498
00:29:29,611 --> 00:29:34,896
need to know so that even if I move and switch characters, no

499
00:29:34,976 --> 00:29:38,679
one in my party is left in a situation where they are off the

500
00:29:38,719 --> 00:29:42,462
nav mesh and stuck. So whenever a party member becomes AI

501
00:29:42,502 --> 00:29:44,905
controlled, teleport to the nearest point on the nav mesh

502
00:29:45,585 --> 00:29:47,627
and ideally the player never notices this happening.

503
00:29:50,148 --> 00:29:54,371
The other situation that we can get into involves traversing

504
00:29:54,391 --> 00:29:57,554
terrain that the AI can't cover. So you can see in this

505
00:29:57,594 --> 00:29:59,895
example, I'm down there at the bottom of the screen. I've just

506
00:29:59,935 --> 00:30:03,378
jumped off the cliff. And I left my party members behind.

507
00:30:05,809 --> 00:30:08,530
And what this means is that when I land at the bottom of the

508
00:30:08,550 --> 00:30:12,012
cliff, if you could see them right now, they're up there,

509
00:30:12,452 --> 00:30:15,593
they're behind the cliff wall, they're going to start taking

510
00:30:15,633 --> 00:30:18,994
the path that goes around and coming back down the switch

511
00:30:19,034 --> 00:30:21,435
backs to get back to where I've just gotten to.

512
00:30:21,676 --> 00:30:23,896
I mean, you probably shouldn't jump off that cliff.

513
00:30:23,916 --> 00:30:24,697
You probably take damage.

514
00:30:25,257 --> 00:30:25,917
Hurts when you fall.

515
00:30:26,558 --> 00:30:26,758
But.

516
00:30:27,478 --> 00:30:30,100
still I'm now in a position where I can get a really big

517
00:30:30,160 --> 00:30:36,104
head start and if they get stuck on other path finding data or if

518
00:30:36,124 --> 00:30:39,787
the path is long enough, I can outrun them and I can

519
00:30:39,827 --> 00:30:42,348
potentially run far enough away that they're outside the

520
00:30:42,368 --> 00:30:44,750
streaming chunk and then the ground streams out underneath

521
00:30:44,790 --> 00:30:47,272
them and they're in for a world of pain. So...

522
00:30:49,963 --> 00:30:53,105
If the player ever outruns the AI, we have a leash distance

523
00:30:53,125 --> 00:30:56,707
teleport that we implemented. Party members have a maximum

524
00:30:56,747 --> 00:31:00,510
distance that they're allowed to be. We teleport them in. And

525
00:31:00,570 --> 00:31:03,892
again, when that happens, we try to cover this by bringing them

526
00:31:03,932 --> 00:31:06,874
in behind the camera. Because if I'm running, I'm in front of

527
00:31:06,894 --> 00:31:08,996
the camera. Everyone else, if they're following me, is

528
00:31:09,036 --> 00:31:12,118
probably behind the camera anyway. And so this happens.

529
00:31:12,378 --> 00:31:15,300
Again, if you never saw this happen in the game, success.

530
00:31:17,593 --> 00:31:21,534
And in some situations, we disable or we expand the range

531
00:31:21,634 --> 00:31:25,595
of the tether. If it's a puzzle area that relies on separating

532
00:31:25,615 --> 00:31:27,136
your party members and positioning them in different

533
00:31:27,156 --> 00:31:29,516
parts of the level, typically we know you're going to come in

534
00:31:29,556 --> 00:31:32,577
and go out through a known access so we can gate and say,

535
00:31:32,597 --> 00:31:35,258
okay, it's safe here to turn off the tethering because we know

536
00:31:35,618 --> 00:31:38,738
that you're in this specific area. And in combat, to give

537
00:31:38,818 --> 00:31:43,619
more flexibility for positioning your characters and giving you

538
00:31:43,659 --> 00:31:46,660
more tactical options, we grow that range.

539
00:31:47,460 --> 00:31:52,443
change. But at the end of the day, with these fail safes in

540
00:31:52,483 --> 00:31:57,527
place, as in elegant as they may be, if you notice them

541
00:31:57,547 --> 00:32:00,929
happening, we had confidence that party members couldn't get

542
00:32:01,029 --> 00:32:06,252
stranded by technical weaknesses in the path finding system. The

543
00:32:06,332 --> 00:32:10,495
other problem that I want to talk about here about party in

544
00:32:10,535 --> 00:32:14,197
the big open world is our party aggression rules.

545
00:32:16,107 --> 00:32:19,088
Our party when we started had fairly opportunistic targeting.

546
00:32:20,149 --> 00:32:24,191
They would see somebody who was fightable, based on the rules

547
00:32:24,231 --> 00:32:26,532
from our previous titles, if they're fightable, if they're

548
00:32:26,552 --> 00:32:30,674
in a hostile faction, I'm going to fight them. But, again, we

549
00:32:31,094 --> 00:32:35,756
wanted to give the player control over how they would

550
00:32:35,816 --> 00:32:38,178
engage in these kind of situations without your party

551
00:32:38,218 --> 00:32:40,719
necessarily picking a fight that you weren't interested or ready

552
00:32:41,059 --> 00:32:41,659
to take part in.

553
00:32:43,081 --> 00:32:45,402
in a fairly target rich environment. There's wildlife

554
00:32:45,482 --> 00:32:48,764
everywhere. They're all fightable. You can go hunt nugs

555
00:32:48,824 --> 00:32:52,266
if you really, really need nugskin leather. But what you

556
00:32:52,326 --> 00:32:54,467
probably don't want is your party running off and hunting

557
00:32:54,508 --> 00:32:56,749
nugs on your behalf when you were trying to accomplish

558
00:32:56,769 --> 00:32:57,049
something.

559
00:32:59,380 --> 00:33:02,885
So that's more obnoxious than punishing, bringing the bears

560
00:33:02,925 --> 00:33:06,469
down on your face. But the party shouldn't be spontaneously

561
00:33:06,489 --> 00:33:09,573
attacking things. We need to put that control back in the hands

562
00:33:09,613 --> 00:33:12,757
of the player. So we came up with some rules for party

563
00:33:12,777 --> 00:33:13,157
aggression.

564
00:33:14,099 --> 00:33:16,140
which says that you're not allowed to engage. You're not

565
00:33:16,160 --> 00:33:21,623
allowed to take the first swing or use an offensive power until

566
00:33:22,184 --> 00:33:25,526
someone in the party has done damage. And you can see I can't

567
00:33:25,546 --> 00:33:27,287
do damage until somebody has done damage, which means the

568
00:33:27,327 --> 00:33:30,729
player has to be making that choice. Or if somebody in the

569
00:33:30,769 --> 00:33:33,871
party is taking damage, which means that the fight is already

570
00:33:33,991 --> 00:33:38,154
on me, I've been jumped, and the party is allowed then to engage

571
00:33:39,195 --> 00:33:41,076
spontaneously without waiting for a go order.

572
00:33:42,838 --> 00:33:46,387
There's another test that takes place here to only target

573
00:33:46,407 --> 00:33:48,833
creatures that are targeting someone else in the party.

574
00:33:50,542 --> 00:33:54,925
because again in inquisition, especially in hinterlands if

575
00:33:54,945 --> 00:33:58,607
you play this, when you go into that zone, you see groups of

576
00:33:58,647 --> 00:34:01,209
other creatures that are both hostile to you. There's mages,

577
00:34:01,229 --> 00:34:03,290
there's templars, there's bandits and they'll be fighting

578
00:34:03,330 --> 00:34:05,191
each other. There will be bandits fighting bears, et

579
00:34:05,211 --> 00:34:08,713
cetera. And they're having a little fight out in the distance.

580
00:34:09,333 --> 00:34:12,615
And previously the AI would go, yeah, they're hostile. They're

581
00:34:12,655 --> 00:34:13,276
in combat.

582
00:34:13,916 --> 00:34:17,678
going to go at them. And we need to make sure that even if you

583
00:34:17,698 --> 00:34:19,800
were allowed to engage, even if you were allowed to pick a fight

584
00:34:24,113 --> 00:34:27,514
then once that fight was over, your party members wouldn't take

585
00:34:27,654 --> 00:34:32,135
off and go bloodlust on that group over there if you weren't

586
00:34:32,155 --> 00:34:35,795
ready to engage them. And so with these rules in place, the

587
00:34:35,835 --> 00:34:39,836
player now has the control that they need over how their party

588
00:34:39,876 --> 00:34:45,217
members under AI control engage in these open world zones. Now,

589
00:34:45,397 --> 00:34:48,358
I want to talk about how we solved one of the biggest

590
00:34:48,418 --> 00:34:50,798
challenges with our party AI in Inquisition.

591
00:34:52,389 --> 00:34:54,590
around ability selection by creating what we call the

592
00:34:54,610 --> 00:34:57,611
behavior decision system or BDS. So if you hear me talk about

593
00:34:57,732 --> 00:35:02,514
BDS, behavior decision system, same thing. And the challenge

594
00:35:03,634 --> 00:35:06,195
is that we have a lot of abilities on these creatures.

595
00:35:07,056 --> 00:35:10,197
The party members can have up to 30 some different active

596
00:35:10,257 --> 00:35:14,999
abilities per class and they can have up to eight of them mapped

597
00:35:15,039 --> 00:35:17,561
and loaded on any given character at any given time.

598
00:35:18,613 --> 00:35:21,114
The player is unlocking these as you play through the game.

599
00:35:21,134 --> 00:35:23,734
We're adding and removing abilities from characters.

600
00:35:24,895 --> 00:35:29,416
And when we started building our static decision trees for

601
00:35:29,496 --> 00:35:34,118
building out our party AI, we realized that we had a couple

602
00:35:34,158 --> 00:35:38,499
problems. First, we had a technical problem. So you can

603
00:35:38,519 --> 00:35:41,080
see here, this is an example of something we would have started

604
00:35:41,120 --> 00:35:43,901
with where I have a sequence and I'm going to choose and I'm

605
00:35:43,921 --> 00:35:47,342
going to say, OK, can I do long shot?

606
00:35:48,394 --> 00:35:51,437
Yes, I can do long shot. Long shot is a good idea. Second

607
00:35:51,457 --> 00:35:54,059
choice, can I do stealth? If I didn't want to do long shot, can

608
00:35:54,079 --> 00:36:00,485
I use my stealth ability? And so on down the line. Which, again,

609
00:36:00,706 --> 00:36:03,188
we had a technical problem in that we couldn't add and remove

610
00:36:03,668 --> 00:36:08,313
abilities from this data structure in a really good way

611
00:36:08,913 --> 00:36:11,516
because things had to come in in an order and they had to be

612
00:36:11,776 --> 00:36:13,397
somehow slotted into the hierarchy.

613
00:36:14,948 --> 00:36:17,790
So we tried this next. We said, okay, let's add all the

614
00:36:17,830 --> 00:36:23,553
abilities. So there's a master rogue ability table that says,

615
00:36:23,573 --> 00:36:25,734
you know, that has all of the abilities that this character

616
00:36:25,754 --> 00:36:30,917
could have ever. And then we're going to conditionalize them so

617
00:36:30,957 --> 00:36:35,160
that when they, if they're not loaded, then we're just not

618
00:36:35,180 --> 00:36:38,021
going to take those paths. But we still end up with a

619
00:36:38,041 --> 00:36:40,083
conceptual problem where

620
00:36:41,337 --> 00:36:42,779
Long shot might be a good idea.

621
00:36:42,799 --> 00:36:44,942
It might be a good, you know, it's reasonable,

622
00:36:44,962 --> 00:36:46,164
the right range, whatever.

623
00:36:46,624 --> 00:36:48,707
But we might be in a situation where throwing blades

624
00:36:49,528 --> 00:36:52,532
is actually a better choice to make at this point in time.

625
00:36:52,973 --> 00:36:55,316
And so either we have to be very specific,

626
00:36:55,356 --> 00:36:59,381
we have to build the evaluations in this structure so that.

627
00:37:00,797 --> 00:37:04,000
they're very specific and I'm only using long shot when it's

628
00:37:04,160 --> 00:37:07,763
absolutely the best thing I could do and it's not

629
00:37:08,203 --> 00:37:11,706
potentially worse than anything else that could happen down the

630
00:37:11,746 --> 00:37:16,109
line. Or we need a different approach. And we thought, well,

631
00:37:16,129 --> 00:37:19,251
what we'd really like to be able to do is say, okay, we're just

632
00:37:19,271 --> 00:37:22,794
going to evaluate all of our abilities. We're going to bring

633
00:37:22,854 --> 00:37:25,356
everything in. We're going to rank everything. We're going to

634
00:37:25,396 --> 00:37:28,418
find what the best option is. And then we're going to do that

635
00:37:28,518 --> 00:37:28,598
one.

636
00:37:30,281 --> 00:37:32,842
But this required changing our architecture.

637
00:37:33,883 --> 00:37:35,104
And thus the BDS was born.

638
00:37:36,144 --> 00:37:39,386
So the behavior decision system splits our AI evaluation

639
00:37:39,606 --> 00:37:40,466
into two phases.

640
00:37:40,546 --> 00:37:42,928
The first thing we do is evaluate all our options.

641
00:37:43,508 --> 00:37:46,329
And then the second thing we do is execute

642
00:37:46,349 --> 00:37:48,050
whatever the best choice was.

643
00:37:49,627 --> 00:37:53,809
And so this means that every ability itself specifies two

644
00:37:53,869 --> 00:37:57,690
sets of logic. One is the evaluation, which says why or

645
00:37:57,750 --> 00:38:02,773
when it's a good time to use this ability. And it also

646
00:38:02,813 --> 00:38:05,694
specifies a chunk of execution logic that says, okay, once I've

647
00:38:05,734 --> 00:38:09,735
chosen to do this, I need to move or not to get into range

648
00:38:10,376 --> 00:38:11,056
and then execute.

649
00:38:13,347 --> 00:38:15,848
and we'll walk through an example here. So this is the

650
00:38:15,888 --> 00:38:18,828
evaluation tree taken directly out of the level editor or the

651
00:38:19,148 --> 00:38:24,590
rather the game editor for that long shot ability. And there's

652
00:38:24,610 --> 00:38:28,090
some preamble stuff off to the left-hand side that basically

653
00:38:28,110 --> 00:38:31,411
says is this a viable ability right now? Is it off cool down?

654
00:38:31,871 --> 00:38:35,252
Is it disabled? Is there any reason why it's a bad idea to

655
00:38:35,332 --> 00:38:39,013
use this right now? Okay. We've dealt with that. So we're going

656
00:38:39,033 --> 00:38:42,473
to give ourselves 20 points. Right up.

657
00:38:43,704 --> 00:38:45,993
in the first slot there. We're going to give ourselves 20

658
00:38:46,254 --> 00:38:48,524
points because this is a pretty good ability to use right now.

659
00:38:49,938 --> 00:38:52,920
Now, the next thing that we're going to check, because long

660
00:38:52,960 --> 00:38:56,981
shot in the game rules says that it's better the further away

661
00:38:57,021 --> 00:38:59,542
you are from your target when you're using it. So we're going

662
00:38:59,562 --> 00:39:02,203
to check and say if I'm at medium range for my target, I'm

663
00:39:02,223 --> 00:39:05,004
going to give myself five points. And if I'm even further

664
00:39:05,044 --> 00:39:09,566
away, then I can give myself another five points so that I

665
00:39:09,606 --> 00:39:13,087
give a full 30-point score for this ability. And we'll talk

666
00:39:13,107 --> 00:39:16,809
about what that means in just one second. And then I'm also

667
00:39:16,829 --> 00:39:19,110
going to be able to give myself an additional 10 points.

668
00:39:20,613 --> 00:39:24,679
if my target or rather if this ability has been set for this

669
00:39:24,719 --> 00:39:27,343
character by the player to be something that they prefer this

670
00:39:27,383 --> 00:39:29,906
character to use. So.

671
00:39:31,440 --> 00:39:35,463
Once that happens, we score that ability and we realize that we

672
00:39:35,503 --> 00:39:38,966
needed a set of rules as we were building out these evaluations

673
00:39:39,567 --> 00:39:41,908
so that we could be consistent in how these things are being

674
00:39:41,948 --> 00:39:45,971
applied. So you can see passive movement, things that just move

675
00:39:45,991 --> 00:39:49,114
me around the battlefield are the lowest priority. Basic

676
00:39:49,134 --> 00:39:51,696
attacks are always sort of, you know, they're always a pretty

677
00:39:51,716 --> 00:39:54,598
good idea. If I can use an ability, I should use that over

678
00:39:54,638 --> 00:39:55,319
a basic attack.

679
00:39:56,259 --> 00:39:59,141
support abilities get a bonus score. They get a little bit of

680
00:39:59,181 --> 00:40:02,103
a priority bump. They start at a 25 baseline rather than 20

681
00:40:02,643 --> 00:40:05,245
because typically they're things that either need to respond to a

682
00:40:05,285 --> 00:40:08,767
bad situation that's come up or something that I want to use

683
00:40:08,807 --> 00:40:11,669
ahead of combat at the start of things to repair. And so

684
00:40:12,775 --> 00:40:14,676
they get a little bit of a priority bump to make sure they

685
00:40:14,696 --> 00:40:17,457
come out first or they come out when they need to. And then we

686
00:40:17,517 --> 00:40:20,999
have reaction abilities that really need to be used on time

687
00:40:21,379 --> 00:40:24,121
and we'll cover those specifically. But those are

688
00:40:24,141 --> 00:40:29,023
things like blocks and dodges that have specific frame

689
00:40:29,063 --> 00:40:31,685
requirements around when they need to be used in order to be

690
00:40:31,765 --> 00:40:35,587
useful at all. So you can see this is kind of how things get

691
00:40:36,187 --> 00:40:40,229
ranked and rated and we build all our evaluation trees in this

692
00:40:40,269 --> 00:40:40,610
framework.

693
00:40:41,958 --> 00:40:48,383
Then we break down inside those ranges 10 points, that 10 point

694
00:40:48,443 --> 00:40:50,785
range, 5 points for medium range, 5 points for long range,

695
00:40:50,845 --> 00:40:54,728
for long shot, but we have 10 points of dynamic range for

696
00:40:55,489 --> 00:40:59,412
context, is this a good time or a bad time to use this ability,

697
00:40:59,912 --> 00:41:02,995
and then we have that 10 point tie breaker where the player can

698
00:41:03,015 --> 00:41:06,117
put their thumb on the scale and say I want this one more often.

699
00:41:07,278 --> 00:41:11,259
which means that we have a 20 point range for pretty much all

700
00:41:11,279 --> 00:41:15,321
of the categories of ability. And we've completed our

701
00:41:15,341 --> 00:41:18,162
evaluation now. We've gone off, we've run long shot, we've run

702
00:41:18,182 --> 00:41:21,203
a bunch of other things that we have on this character. Basic

703
00:41:21,243 --> 00:41:24,485
attack comes in at 10. Poison weapons, we ran our evaluator,

704
00:41:24,505 --> 00:41:27,166
it came back at 25. Caltrops came back at 22. And full draw.

705
00:41:31,787 --> 00:41:34,189
is in our ability list, but it's on cool down right now, so it

706
00:41:34,209 --> 00:41:38,012
just evaluates out. It gets clipped by that preamble. Healing

707
00:41:38,032 --> 00:41:42,576
potion, we evaluated it and it just said, no, I don't need to

708
00:41:42,636 --> 00:41:46,019
use this right now. I'm at full health. It's okay. So we can

709
00:41:46,079 --> 00:41:49,302
have evaluations that just punch out early on without even

710
00:41:49,342 --> 00:41:52,444
returning a score. But when we look at the scores, we say,

711
00:41:52,525 --> 00:41:54,266
okay, long shot is the best choice right now.

712
00:41:55,067 --> 00:41:59,291
So let's use that. So we move into execution. So the next

713
00:41:59,331 --> 00:42:03,034
part of the AI update, we start running the execution tree for

714
00:42:03,054 --> 00:42:07,218
long shot, which handles the movement and execution part of

715
00:42:07,258 --> 00:42:10,681
that AI decision loop. We've picked our target, we've picked

716
00:42:10,701 --> 00:42:14,925
our ability, and now we're moving and executing. So we're

717
00:42:14,945 --> 00:42:18,869
going to test to see if we have range.

718
00:42:20,180 --> 00:42:24,282
And if we have line of sight to use the ability, and if we

719
00:42:24,322 --> 00:42:28,345
don't, we're going to move until we get those.

720
00:42:28,365 --> 00:42:30,066
We're just going to move towards the character,

721
00:42:30,586 --> 00:42:33,047
assuming that at some point we're going to achieve line of

722
00:42:33,107 --> 00:42:36,389
sight, and we're going to get into the right range.

723
00:42:37,390 --> 00:42:40,672
Once we get those, then we fall all the way through to

724
00:42:40,692 --> 00:42:43,834
the end there, and we're able to actually fire the ability

725
00:42:43,874 --> 00:42:45,074
itself, play the animation.

726
00:42:45,875 --> 00:42:50,478
fire the projectile, do the impact, all the good stuff that comes with actually using this ability.

727
00:42:50,978 --> 00:42:52,259
And then in the bottom right hand corner,

728
00:42:52,599 --> 00:42:58,223
we just make a note to set ourselves to hold position so that we don't keep moving toward that character once we've achieved line

729
00:42:58,263 --> 00:43:00,885
of sight and the appropriate range to use.

730
00:43:02,573 --> 00:43:05,334
And it's important to note that while this is running, if I

731
00:43:05,374 --> 00:43:10,177
didn't have line of sight and range when I started, while the

732
00:43:10,577 --> 00:43:15,040
execution tree is updating and moving me toward the target, I'm

733
00:43:15,140 --> 00:43:18,322
still able to run that evaluation. I'm constantly

734
00:43:18,402 --> 00:43:21,123
reevaluating all my choices. So if something even better, if

735
00:43:21,183 --> 00:43:24,225
some better option comes up off of cool down or if I end up in a

736
00:43:24,265 --> 00:43:27,347
situation where I need to react quickly, as long as I haven't

737
00:43:27,487 --> 00:43:29,408
actually triggered the animation yet,

738
00:43:29,668 --> 00:43:38,433
I'm still in a position where I'm able to react to those changing circumstances and start evaluating a different execution tree for a different ability on the next update.

739
00:43:41,715 --> 00:43:44,237
So, let's see, where are we at here?

740
00:43:45,377 --> 00:43:48,919
And an added benefit of the way that we implemented BDS

741
00:43:50,067 --> 00:43:53,391
as a general system for scoring behaviors is that we can also

742
00:43:53,451 --> 00:43:57,277
add movement to the priority evaluation. We can use an

743
00:43:57,297 --> 00:44:00,601
evaluator to check whether the character is in combat and apply

744
00:44:00,641 --> 00:44:03,626
different movement parameters by using the behavior tree controls

745
00:44:03,686 --> 00:44:04,166
over movement.

746
00:44:05,108 --> 00:44:07,911
and for example in exploration characters have a tighter

747
00:44:07,971 --> 00:44:11,816
follow so that they stay closer to you so they're there when

748
00:44:11,856 --> 00:44:15,020
you need them whereas in combat characters can hang back a

749
00:44:15,040 --> 00:44:19,084
little more and spread out so that your melee character can

750
00:44:19,465 --> 00:44:22,549
lead and your ranged characters and your casters can fall back

751
00:44:22,609 --> 00:44:22,909
behind.

752
00:44:23,650 --> 00:44:26,352
The other way that this works that was a big advantage is

753
00:44:26,392 --> 00:44:29,094
that we were able to use this for things like tether and fear

754
00:44:29,134 --> 00:44:32,617
zone where those behaviors can come in and they can override

755
00:44:32,697 --> 00:44:35,059
in the priority system anything else that character is doing.

756
00:44:35,139 --> 00:44:38,922
They can come in at priority 100 and just stomp anything else

757
00:44:38,942 --> 00:44:40,763
that that character is doing until their conditions are

758
00:44:40,803 --> 00:44:43,365
resolved. Until I get back inside my tether, I'm doing

759
00:44:43,405 --> 00:44:48,429
nothing else. Fear zones, as I say, work the same way. So

760
00:44:48,809 --> 00:44:50,791
recapping, behavior decision system.

761
00:44:52,582 --> 00:44:54,966
I can add and remove abilities now at run time.

762
00:44:56,509 --> 00:44:59,454
And I can do that without having to pay attention to the

763
00:44:59,494 --> 00:45:01,837
evaluation order, because we've come up with a scoring

764
00:45:01,898 --> 00:45:02,198
system.

765
00:45:03,551 --> 00:45:06,613
that means that the right ability can be scored regardless

766
00:45:06,653 --> 00:45:08,614
of whether it's the first or the last thing that gets

767
00:45:08,654 --> 00:45:12,037
evaluated. And we've done it in a way that leverages the

768
00:45:12,097 --> 00:45:15,139
existing library of functionality. We get a big win

769
00:45:15,219 --> 00:45:18,821
because we've built this library of decision tree evaluators and

770
00:45:19,021 --> 00:45:24,084
task nodes and functionality to build really complex logic and

771
00:45:24,104 --> 00:45:28,567
we can still use that in the exec parts. And we can also, you

772
00:45:28,607 --> 00:45:30,489
know, we have a whole set of target picking.

773
00:45:31,620 --> 00:45:35,401
stuff that happens just in every AI update. So this integrates

774
00:45:35,461 --> 00:45:38,062
directly into the decision tree architecture that we've built.

775
00:45:40,203 --> 00:45:43,904
So we have a powerful tool for AI decision making. It allows

776
00:45:43,964 --> 00:45:47,725
party members to effectively choose between a whole array of

777
00:45:47,845 --> 00:45:50,906
very situational abilities and make pretty good choices.

778
00:45:52,033 --> 00:45:54,336
I did say that I was going to call out reaction abilities

779
00:45:54,376 --> 00:45:57,660
specifically because they had an extra piece of logic that we

780
00:45:57,680 --> 00:45:58,501
needed to build for them.

781
00:45:59,122 --> 00:46:01,324
We introduced this new class of abilities in Inquisition.

782
00:46:01,364 --> 00:46:04,008
We didn't really have these in DA2 or in Origins.

783
00:46:04,809 --> 00:46:08,453
And their active reactions to damage that's coming in

784
00:46:09,434 --> 00:46:11,715
that allows you to actively counter that before you take

785
00:46:11,755 --> 00:46:15,195
that damage. And so there are things like parries, which are

786
00:46:15,816 --> 00:46:18,236
a reaction that gives you an advantage from our point of

787
00:46:18,256 --> 00:46:21,917
view. So I'm going to get a hit back out of it. A block is a

788
00:46:21,957 --> 00:46:24,178
reaction that's going to counter that damage, but it's still

789
00:46:24,198 --> 00:46:27,058
going to leave me in place. And then the most extreme is a

790
00:46:27,098 --> 00:46:29,519
dodge where I'm going to react by actually getting out of the

791
00:46:29,559 --> 00:46:30,199
way of that hit.

792
00:46:31,436 --> 00:46:35,982
before it lands, but it's the most costly in terms of it

793
00:46:36,022 --> 00:46:38,285
loses my battle position and now I'm going to have to

794
00:46:38,325 --> 00:46:43,532
reposition and collect myself. So we want to be able to use

795
00:46:43,552 --> 00:46:45,735
the right reaction for the right kind of incoming hit.

796
00:46:47,055 --> 00:46:49,277
but we still don't necessarily know where that hit's coming

797
00:46:49,317 --> 00:46:54,061
from. So we had to add what we call attack telegraphs. So this

798
00:46:54,121 --> 00:46:56,423
is the actual combat collision that we're looking at here, that

799
00:46:56,443 --> 00:46:59,686
set of green spheres for our canary spearman for one of his

800
00:47:00,086 --> 00:47:01,087
spear thrust attacks.

801
00:47:01,828 --> 00:47:05,552
That's the combat collision that happens on, say, frame 20 of

802
00:47:05,592 --> 00:47:09,756
the attack. And about 10, 15 frames before that happens, we

803
00:47:09,796 --> 00:47:13,400
drop down a really broad collision box in front of him

804
00:47:13,980 --> 00:47:17,664
that allows him to notify any other character who's standing

805
00:47:17,944 --> 00:47:19,346
in the area that's about to be hit.

806
00:47:20,107 --> 00:47:22,768
that there's a hit coming and it's something that you could

807
00:47:23,308 --> 00:47:26,849
maybe you could block it but not necessarily parry it. And in

808
00:47:26,889 --> 00:47:29,070
addition to sending that information, it also includes

809
00:47:29,090 --> 00:47:32,431
the positional data about where he's standing so that the

810
00:47:32,451 --> 00:47:36,432
character who's reacting knows which way to point.

811
00:47:38,149 --> 00:47:42,372
their reaction, so their block or their dodge, which way they

812
00:47:42,392 --> 00:47:45,053
need to be moving to get away from the incoming damage. And

813
00:47:45,093 --> 00:47:47,815
these reactions, as we saw on the priority slide, they come in

814
00:47:47,855 --> 00:47:50,036
at extra high priority. They override anything else that that

815
00:47:50,056 --> 00:47:54,518
character can be doing. And this was very successful.

816
00:47:56,172 --> 00:48:00,356
it was too successful. Because we put this on, for example, our

817
00:48:00,396 --> 00:48:03,659
tank characters who have a nice active shield block, it

818
00:48:04,099 --> 00:48:07,403
completely nullifies most incoming attacks from that front

819
00:48:07,463 --> 00:48:10,446
arc and they were able to use it with frame perfect precision

820
00:48:11,347 --> 00:48:13,769
against big nasty enemies in the game.

821
00:48:15,060 --> 00:48:18,642
and defeat them over a period of time because they had to get

822
00:48:18,683 --> 00:48:23,786
their parries and counterattacks in between guard. But the AI was

823
00:48:23,846 --> 00:48:27,269
able to defeat really tough enemies without taking any

824
00:48:27,309 --> 00:48:29,390
damage. Which sounds great.

825
00:48:30,445 --> 00:48:36,348
We win. We win at AI. My robots are best. But the problem for

826
00:48:36,368 --> 00:48:40,010
the player is that this really incentivizes the player to let

827
00:48:40,050 --> 00:48:42,612
the robots do the fighting instead of participating in the

828
00:48:42,652 --> 00:48:47,495
combat and sandwich sales go up because people put their

829
00:48:47,515 --> 00:48:52,037
controllers down and walk away. So what we ended up having to do

830
00:48:52,798 --> 00:48:56,360
is we added a shared cool down so that every AI controlled

831
00:48:56,400 --> 00:48:56,880
party member.

832
00:48:58,229 --> 00:49:00,911
When the AI is choosing to do these things, there's a two

833
00:49:00,951 --> 00:49:04,295
second wait that they have to do between using one of these

834
00:49:04,335 --> 00:49:07,798
high priority reaction abilities to level the playing

835
00:49:07,859 --> 00:49:12,884
field and to give human players a reason not to just let the AI

836
00:49:13,244 --> 00:49:13,785
do what they're doing.

837
00:49:14,935 --> 00:49:17,778
This is an AI specific cool down. It doesn't affect the in

838
00:49:17,798 --> 00:49:19,820
game cool down system. It doesn't affect a player using

839
00:49:19,840 --> 00:49:23,943
these abilities. It just gives the AI a little bit of a

840
00:49:23,984 --> 00:49:26,806
disadvantage. They're still able to react quickly, but they can't

841
00:49:26,846 --> 00:49:30,770
get into that toe-to-toe perfect parry, frame perfect blocking

842
00:49:30,810 --> 00:49:33,793
situation. So the AI is able to use these reaction abilities

843
00:49:33,833 --> 00:49:36,756
without outclassing the player and creating negative play

844
00:49:36,796 --> 00:49:37,156
patterns.

845
00:49:38,520 --> 00:49:42,007
We also need the player to be able to customize their party

846
00:49:42,247 --> 00:49:42,288
AI.

847
00:49:42,869 --> 00:49:45,695
We've created a pretty good baseline experience, where

848
00:49:45,715 --> 00:49:47,478
the party, as soon as you give them an ability,

849
00:49:48,513 --> 00:49:51,534
They're able to use it fairly competently.

850
00:49:52,195 --> 00:49:56,136
But we want to make sure that the player is supported by

851
00:49:56,176 --> 00:49:59,278
their AI characters in the way that they want, and that when

852
00:49:59,298 --> 00:50:02,179
they customize the AI, the decisions that they're making,

853
00:50:02,199 --> 00:50:03,980
the choices they're making, are going to be observable.

854
00:50:04,060 --> 00:50:07,742
So we wanted to give them big, chunky levers that we could

855
00:50:08,302 --> 00:50:11,403
use so that they can see those results in the game and know

856
00:50:11,423 --> 00:50:13,184
that they're making a difference and getting them to

857
00:50:13,224 --> 00:50:14,024
play the way they want.

858
00:50:14,325 --> 00:50:15,565
And so the first level of control.

859
00:50:16,226 --> 00:50:18,588
as I mentioned, is just what abilities do you put on the

860
00:50:18,628 --> 00:50:22,091
character. You can choose which abilities you map and the AI is

861
00:50:22,131 --> 00:50:24,513
only going to use the ones that are mapped, which is a change

862
00:50:24,533 --> 00:50:28,996
from our previous titles. Those abilities are available both to

863
00:50:29,036 --> 00:50:33,660
the AI and to the player's direct control. So as you're

864
00:50:33,680 --> 00:50:36,523
switching between characters or going into TACCAM, you can use

865
00:50:36,623 --> 00:50:40,006
all of those abilities on the character. And then we give you

866
00:50:40,046 --> 00:50:43,749
an additional layer of granularity that the AI is able

867
00:50:45,557 --> 00:50:46,546
either disable.

868
00:50:47,659 --> 00:50:51,000
so that ability is still available to a player who's

869
00:50:51,020 --> 00:50:53,782
controlling that character or available to take as an order in

870
00:50:53,802 --> 00:50:56,583
TACAM, but the AI is never going to pick this ability for

871
00:50:56,623 --> 00:50:59,185
themselves. So if it's something on a long cool down that you're

872
00:50:59,205 --> 00:51:03,707
saving for an emergency or something that consumes a

873
00:51:03,747 --> 00:51:07,649
depletable resource, you want the AI not to be spending that

874
00:51:08,250 --> 00:51:12,312
on its own discretion. Enable is the default choice where the AI

875
00:51:12,372 --> 00:51:14,733
is going to evaluate it in priority sequence as we just

876
00:51:14,753 --> 00:51:15,154
went through.

877
00:51:16,254 --> 00:51:18,936
And you can also set it, as I mentioned before,

878
00:51:19,036 --> 00:51:20,057
you can set it to prefer.

879
00:51:20,117 --> 00:51:21,599
And that just puts the thumb on the scale

880
00:51:22,259 --> 00:51:26,542
so that that ability, rather, is going to be executed

881
00:51:26,623 --> 00:51:28,764
more often, it's going to come out at higher priority

882
00:51:28,824 --> 00:51:29,605
in the evaluation.

883
00:51:30,205 --> 00:51:34,889
And in some cases, it also widens the AI's rules

884
00:51:34,989 --> 00:51:36,911
for when that's an appropriate ability to choose.

885
00:51:37,311 --> 00:51:43,033
So if an AOE ability perhaps says that I need three targets

886
00:51:43,193 --> 00:51:45,913
around that character in order for this to be a good choice, it

887
00:51:45,953 --> 00:51:49,634
might drop that to two enemy AI characters in that area of

888
00:51:49,714 --> 00:51:53,855
effect. So that ability is going to come out more often. It's

889
00:51:53,875 --> 00:51:57,356
going to be used because the player wants them to use that

890
00:51:57,396 --> 00:51:58,157
ability more often.

891
00:52:00,655 --> 00:52:03,576
And the other interesting setting I want to talk about is

892
00:52:03,636 --> 00:52:06,917
the targeting behavior that the player is able to customize.

893
00:52:07,297 --> 00:52:11,818
Again, choose target, choose ability, move, and execute.

894
00:52:12,059 --> 00:52:14,279
Those are the four important steps in our AI evaluator.

895
00:52:14,599 --> 00:52:17,740
And so the player is able to influence how the AI follows,

896
00:52:18,020 --> 00:52:20,881
or how it picks targets, rather, by choosing between

897
00:52:21,301 --> 00:52:22,761
either following a character.

898
00:52:23,732 --> 00:52:26,553
because we want it to be supporting, typically when the AI is running, it's

899
00:52:26,593 --> 00:52:30,075
supporting a controlled character. So we can either say, track some character's

900
00:52:30,115 --> 00:52:33,576
interactions, either the controlled character, whoever the player is

901
00:52:33,596 --> 00:52:39,179
controlling, chase them around and beat on their target, or look into the aggro

902
00:52:39,219 --> 00:52:42,200
system and defend a specific character.

903
00:52:44,102 --> 00:52:46,984
and counter threats, whoever is targeting that character, we're

904
00:52:47,004 --> 00:52:49,146
going to pick them off in priority. So with these

905
00:52:49,186 --> 00:52:52,088
settings, the player can set how the AI is picking their targets

906
00:52:52,108 --> 00:52:56,171
and picking their abilities in meaningful and visible ways. We

907
00:52:56,231 --> 00:53:00,835
also needed to support the TACAM orders that the player is

908
00:53:00,855 --> 00:53:04,658
giving when they're giving direct commands to their party

909
00:53:04,698 --> 00:53:06,019
followers. So...

910
00:53:07,293 --> 00:53:09,595
either as I say direct commands, use that ability,

911
00:53:09,716 --> 00:53:13,359
move over here, or giving them behavioral orders that modify

912
00:53:13,399 --> 00:53:18,184
how the AI works underneath. So in the direct commands, move

913
00:53:18,225 --> 00:53:22,229
here, use ability, these have a fairly simple execution.

914
00:53:23,830 --> 00:53:26,692
They just run that ability as though it had been chosen by

915
00:53:26,732 --> 00:53:30,513
the AI and the AI decision making is suspended. When the

916
00:53:30,553 --> 00:53:32,854
player gives an order, we're not constantly running the

917
00:53:32,874 --> 00:53:35,135
evaluator in the background. The AI is just going to be hard

918
00:53:35,195 --> 00:53:38,857
on target to follow that ability up until it completes

919
00:53:38,897 --> 00:53:39,457
successfully.

920
00:53:41,101 --> 00:53:44,362
The other side is that we have these behavioral commands that

921
00:53:44,462 --> 00:53:48,903
modify how the AI works under the hood, like attack this

922
00:53:48,963 --> 00:53:54,045
enemy. If you give this order, as bull has in the example

923
00:53:54,065 --> 00:53:57,566
there, it overrides the entire target picking set of their AI

924
00:53:57,586 --> 00:54:00,727
and says that's your target, every frame, every update, get

925
00:54:00,767 --> 00:54:01,748
that guy until he dead.

926
00:54:03,082 --> 00:54:05,684
hold position is more complicated because it has to

927
00:54:05,724 --> 00:54:11,210
affect both the target picking and the ability picking so that

928
00:54:11,230 --> 00:54:13,853
the AI doesn't get stuck trying to use things that would

929
00:54:13,873 --> 00:54:16,856
violate the rule that says they have to stand here. And it also

930
00:54:17,136 --> 00:54:20,259
adds a little miniature tether behavior so that if they get

931
00:54:20,299 --> 00:54:22,962
knocked off of that spot that you told them to hold in combat

932
00:54:23,422 --> 00:54:26,145
then they'll try to regain that position before doing anything

933
00:54:26,225 --> 00:54:26,365
else.

934
00:54:27,480 --> 00:54:30,000
And we also have an order that allows you to basically

935
00:54:30,061 --> 00:54:32,541
implement the defend targeting that I talked about a moment

936
00:54:32,581 --> 00:54:36,102
ago on the fly so that you can adapt to situations on the

937
00:54:36,142 --> 00:54:40,764
battlefield. And it works in exactly the same way. These

938
00:54:40,804 --> 00:54:44,305
commands give the player control over party behavior without

939
00:54:44,325 --> 00:54:47,126
having to micromanage every action, including situally

940
00:54:47,226 --> 00:54:51,207
overriding the way that it picks targets in the big AI hierarchy.

941
00:54:53,228 --> 00:54:53,368
Now...

942
00:54:55,023 --> 00:54:56,664
Having implemented all of these things,

943
00:54:56,864 --> 00:54:57,865
we've put all this stuff together,

944
00:54:57,905 --> 00:54:59,847
we've built out our behavior decision system,

945
00:55:00,347 --> 00:55:02,969
we discovered something that was actually a big win for us.

946
00:55:04,851 --> 00:55:07,453
Behavior decision system wasn't just good for Party,

947
00:55:08,073 --> 00:55:10,815
it was also great for our creature AI designers.

948
00:55:12,313 --> 00:55:14,875
because we didn't have to manage an AI hookup table

949
00:55:14,935 --> 00:55:16,976
for each creature and we didn't have to necessarily

950
00:55:17,416 --> 00:55:19,297
come up with the right evaluation order

951
00:55:20,137 --> 00:55:22,819
and manage each creature's AI individually,

952
00:55:23,219 --> 00:55:25,340
we could iterate much quicker

953
00:55:25,760 --> 00:55:28,041
on how each individual AI ability.

954
00:55:28,982 --> 00:55:32,763
prioritize itself and how it executed itself. And we could

955
00:55:32,823 --> 00:55:35,164
also focus on giving the creatures interesting abilities

956
00:55:35,484 --> 00:55:37,905
and moving them around between characters without having to

957
00:55:38,325 --> 00:55:41,486
maintain a master AI setup. We could pull an ability off one

958
00:55:41,526 --> 00:55:45,327
creature and either add it or remove it from the other

959
00:55:45,367 --> 00:55:48,389
character and swap them around much more quickly using BDS.

960
00:55:49,209 --> 00:55:52,670
Because the AI hookups for that ability come with the ability

961
00:55:52,710 --> 00:55:53,030
itself.

962
00:55:55,008 --> 00:55:57,249
And we were able to create creature variations.

963
00:55:57,630 --> 00:56:01,772
We were able to use this a lot in DLC where we'd taken a

964
00:56:01,812 --> 00:56:04,094
creature archetype that we'd shipped in the game and we'd

965
00:56:04,114 --> 00:56:06,535
give them an extra ability as a little bit of a bonus.

966
00:56:07,436 --> 00:56:10,738
It also meant that we were able to support really complex

967
00:56:10,778 --> 00:56:12,239
creatures like our dragons.

968
00:56:13,119 --> 00:56:14,720
And dragons in our game are big.

969
00:56:15,621 --> 00:56:18,583
They touch every part of the combat system, including parts

970
00:56:18,623 --> 00:56:22,567
of the combat system that aren't used by anything else. They fly.

971
00:56:22,647 --> 00:56:26,370
They do all kinds of crazy stuff. And I'll show you the

972
00:56:26,450 --> 00:56:30,673
in-game debug from the behavior decision system. So you can see

973
00:56:30,693 --> 00:56:33,716
there's 58 different abilities. There's 58 different options

974
00:56:33,976 --> 00:56:35,317
that the dragon is evaluating.

975
00:56:36,975 --> 00:56:39,475
at any given time. And some of them are grayed out because

976
00:56:39,495 --> 00:56:41,876
they're just not applicable. There are things that are state

977
00:56:41,916 --> 00:56:44,917
specific. There's special movement in there depending on

978
00:56:44,937 --> 00:56:47,337
whether they're in the ground or in the air. There's things they

979
00:56:47,357 --> 00:56:50,598
can only use when they're flying. And we were able to use

980
00:56:50,778 --> 00:56:55,679
BDS to manage this complexity and break it down into chunks

981
00:56:55,739 --> 00:56:58,520
that designers could work on without having to necessarily

982
00:56:58,580 --> 00:57:01,220
eat the entire dragon shaped burrito all at once.

983
00:57:02,340 --> 00:57:06,342
So BDS gave us a consistent data driven way to prioritize

984
00:57:06,382 --> 00:57:09,963
behaviors across the game from simplest wildlife creatures to

985
00:57:10,023 --> 00:57:12,704
massive complex dragons while also supporting the complexity

986
00:57:12,744 --> 00:57:16,786
we have for our party members and giving them the ability to

987
00:57:16,806 --> 00:57:21,888
support the player in combat. And on that happy note, that's

988
00:57:21,948 --> 00:57:24,669
my talk. I want to thank everyone here for coming out.

989
00:57:26,510 --> 00:57:29,691
listening to me go on about inquisition for almost an hour

990
00:57:29,751 --> 00:57:36,514
now. And I also want to thank Dave and Steve specifically for

991
00:57:36,534 --> 00:57:39,435
putting this whole AI track together and inviting me to come

992
00:57:39,475 --> 00:57:44,537
talk here. I want to thank the combat team back at BioWare in

993
00:57:44,577 --> 00:57:47,698
Edmonton who came up with so many of the things that I have

994
00:57:47,718 --> 00:57:53,720
the honor of presenting to you folks today. And, yeah, thank

995
00:57:53,760 --> 00:57:53,840
you.

996
00:58:05,370 --> 00:58:09,492
Inquisition is a very big game. And there's more material in

997
00:58:09,532 --> 00:58:11,753
here than I could ever cover in an hour. We've got two minutes

998
00:58:12,113 --> 00:58:14,634
for a couple of questions and then I'll be happy to talk to

999
00:58:14,674 --> 00:58:17,775
people outside in the hall after the talk is over. Over here on

1000
00:58:17,795 --> 00:58:18,716
the right-hand side, please, sir.

1001
00:58:19,356 --> 00:58:22,938
Have you considered using the player's direct input while

1002
00:58:22,958 --> 00:58:25,559
they're controlling that character? Have you considered

1003
00:58:25,659 --> 00:58:28,280
using the player's decision while they're controlling that

1004
00:58:28,300 --> 00:58:31,722
character as waiting in the decision tree later on when it's

1005
00:58:31,742 --> 00:58:32,282
being driven by AI?

1006
00:58:33,842 --> 00:58:36,043
We hadn't considered that specifically, but it sounds like

1007
00:58:36,063 --> 00:58:36,583
a great idea.

1008
00:58:38,663 --> 00:58:41,784
Do you guys do any kind of load balancing of AI behavior

1009
00:58:41,804 --> 00:58:44,224
selected decisions get calculated over frames or is

1010
00:58:44,324 --> 00:58:46,004
everything always happening frame by frame?

1011
00:58:46,224 --> 00:58:49,425
That's a good question. Regarding whether we do load

1012
00:58:49,445 --> 00:58:53,826
balancing. And yeah, the AI evaluations are sliced over

1013
00:58:53,886 --> 00:58:56,706
frames. Each creature evaluates their AI I think once every

1014
00:58:56,826 --> 00:58:59,867
three frames. So we split it up and some creatures get sliced

1015
00:58:59,907 --> 00:59:01,547
down to five frame evaluation.

1016
00:59:02,447 --> 00:59:04,249
One more question here over here in the yellow shirt, please.

1017
00:59:04,389 --> 00:59:08,393
Okay. This is a question about the leash distance and

1018
00:59:08,453 --> 00:59:12,036
teleporting the party members. So I was just wondering about

1019
00:59:12,076 --> 00:59:15,039
the scenario where you outrun your party and you have your

1020
00:59:15,079 --> 00:59:17,621
camera pointed back towards where you came from. Does it

1021
00:59:17,681 --> 00:59:19,463
look like the party members outran you?

1022
00:59:21,329 --> 00:59:24,069
They come in behind your direction of travel, I think,

1023
00:59:24,089 --> 00:59:26,490
in that case. So if you're pointing back in your camera

1024
00:59:26,530 --> 00:59:29,050
and we can't solve for a good place behind the camera, then

1025
00:59:29,070 --> 00:59:33,151
they will pop in behind your direction of travel. So it

1026
00:59:33,191 --> 00:59:37,012
still looks, you know, silly, but it is the unfortunate

1027
00:59:37,032 --> 00:59:39,652
reality of dealing with that and making sure that we have to

1028
00:59:40,072 --> 00:59:42,853
account for their potentially getting lost behind.

1029
00:59:43,313 --> 00:59:43,573
Thank you.

