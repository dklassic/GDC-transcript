1
00:00:12,251 --> 00:00:14,854
Well, thanks for the introduction.

2
00:00:14,854 --> 00:00:15,754
And hello, everyone.

3
00:00:15,754 --> 00:00:16,956
Welcome to our talk.

4
00:00:16,956 --> 00:00:22,881
Today, the topic of our talk is how game designers analyze data, how to develop an online pivot

5
00:00:22,881 --> 00:00:25,924
table too.

6
00:00:25,924 --> 00:00:27,505
So let's get started.

7
00:00:29,411 --> 00:00:34,494
Before the talk, here is a quick introduction of myself and my partner.

8
00:00:34,494 --> 00:00:41,037
I am ZiJie, a project manager from NetBeast, and I'm also a game designer in Naraka Bladepoint team.

9
00:00:41,600 --> 00:00:46,385
And my partner, Yong Yuan, is a tool developer in Thunderfire UX.

10
00:00:46,385 --> 00:00:51,529
He has developed a virus of tools from web tools to client tools.

11
00:00:51,529 --> 00:00:55,113
And he has a coding experience for over 10 years.

12
00:00:55,113 --> 00:01:00,178
And the tool he has developed has chipped in several games in our studio,

13
00:01:00,178 --> 00:01:03,681
such as Revelation Online and Naraka, etc.

14
00:01:06,265 --> 00:01:12,669
So today we're here to share how to help game designers quickly get started with decision

15
00:01:12,669 --> 00:01:19,533
making through data and cultivate data-driven culture by developing a reproducible online

16
00:01:19,533 --> 00:01:24,076
pivot table analysis tool with a low development cost.

17
00:01:24,805 --> 00:01:27,828
We will organize our talk into four parts.

18
00:01:27,828 --> 00:01:31,932
The first would be what problems we are facing with.

19
00:01:31,932 --> 00:01:35,095
And the second part would be the design pattern

20
00:01:35,095 --> 00:01:37,397
and how to quickly achieve this tool.

21
00:01:37,397 --> 00:01:40,179
The third part would be a simple demo

22
00:01:40,179 --> 00:01:44,644
shows how the tool is chipped in our game and how it works.

23
00:01:44,644 --> 00:01:46,886
And the fourth part would be the takeaway

24
00:01:46,886 --> 00:01:49,268
and suggestions we can bring to all of you.

25
00:01:52,169 --> 00:01:54,450
OK, here comes the first part.

26
00:01:54,450 --> 00:01:59,852
What problems we are facing with?

27
00:01:59,852 --> 00:02:02,493
In our studio, data-driven decision-making

28
00:02:02,493 --> 00:02:05,233
has been a routine among designers.

29
00:02:05,233 --> 00:02:07,394
Data is the most objective factor

30
00:02:07,394 --> 00:02:11,836
that loyally reflects the exact operation pattern of a player.

31
00:02:11,836 --> 00:02:14,697
Then designers and the user researchers

32
00:02:14,697 --> 00:02:18,138
can dig the real demands hidden behind the behavior.

33
00:02:18,815 --> 00:02:23,716
In order to cultivate data thinking among designers and make decisions quickly through data,

34
00:02:23,716 --> 00:02:29,579
designers often need to raise demands to our data engineers to obtain data,

35
00:02:29,579 --> 00:02:36,061
and then use Excel or other tools after obtaining the data for analysis.

36
00:02:36,061 --> 00:02:41,243
However, data engineers in our studio often have other important tasks to handle.

37
00:02:41,890 --> 00:02:48,716
They are often assigned in-depth research and the development of some important topics in games,

38
00:02:48,716 --> 00:02:53,519
such as financial system monitoring and social system monitoring.

39
00:02:53,519 --> 00:03:00,965
Also, they are responsible for in-game recommendation system and abnormal monitoring.

40
00:03:00,965 --> 00:03:07,750
Here's a diagram shows how data demand worked before our tool chipped in our workflow.

41
00:03:08,325 --> 00:03:13,488
Normally, there are three ways to handle a data demand in our studio.

42
00:03:13,488 --> 00:03:18,811
First is developing a real-time check monitor.

43
00:03:18,811 --> 00:03:24,035
However, it costs much developing resources.

44
00:03:24,035 --> 00:03:27,237
Second, we have a business intelligence platform.

45
00:03:27,237 --> 00:03:32,820
Designers can raise a data demand and use the data dashboard for stable demand.

46
00:03:33,503 --> 00:03:38,105
And third is directly raise demands to a specific engineer

47
00:03:38,105 --> 00:03:39,446
for service.

48
00:03:39,446 --> 00:03:42,947
A data product manager might be helpful to clarify

49
00:03:42,947 --> 00:03:47,869
designers' demands into keys and rules of the database

50
00:03:47,869 --> 00:03:49,170
to the engineer.

51
00:03:49,170 --> 00:03:53,572
The process will cost several colleagues for every demand,

52
00:03:53,572 --> 00:03:56,773
and the communication cost is also high.

53
00:03:56,773 --> 00:03:58,634
Let's take this diagram as an example.

54
00:03:59,970 --> 00:04:04,312
For a data demand, a real-time check method is instant,

55
00:04:04,312 --> 00:04:05,653
but it's resource costly.

56
00:04:05,653 --> 00:04:08,295
The second one is BI platform.

57
00:04:08,295 --> 00:04:12,077
Let's assume it may cost three hours for an engineer

58
00:04:12,077 --> 00:04:14,138
to develop for a single demand.

59
00:04:14,138 --> 00:04:16,739
And the third one is manually fetch.

60
00:04:16,739 --> 00:04:20,482
It may cost three hours and many colleagues

61
00:04:20,482 --> 00:04:23,643
to coordinate to finish the fetch operation.

62
00:04:23,643 --> 00:04:26,565
Additionally, all of these three methods

63
00:04:26,565 --> 00:04:27,746
have communication costs.

64
00:04:28,266 --> 00:04:39,981
We have data product managers to handle the communication process with designers, the communication process may also cost all the relevant people for, let's just say, for an hour.

65
00:04:39,981 --> 00:04:44,787
So every method have either resource cost issue or time cost issue.

66
00:04:45,468 --> 00:04:47,409
But our tool, as a customizable tool,

67
00:04:47,409 --> 00:04:51,552
can handle different demands in one tool.

68
00:04:51,552 --> 00:04:54,314
And a single designer can handle this.

69
00:04:54,314 --> 00:04:56,896
Facing with a situation above, our tool

70
00:04:56,896 --> 00:05:00,619
is targeted to finish the whole data demand process in 30

71
00:05:00,619 --> 00:05:03,781
minutes, and only with a designer, his own.

72
00:05:05,665 --> 00:05:08,406
This diagram shows the traditional way

73
00:05:08,406 --> 00:05:10,767
we handle a data demand.

74
00:05:10,767 --> 00:05:14,389
It takes at least three person to handle a single demand.

75
00:05:14,389 --> 00:05:16,670
Four processes are involved in it.

76
00:05:16,670 --> 00:05:21,012
And this diagram shows the target of our tool.

77
00:05:21,012 --> 00:05:25,174
Designers directly get the data through our tool,

78
00:05:25,174 --> 00:05:28,875
skip the communication process, and the repeated operation

79
00:05:28,875 --> 00:05:30,016
of writing SQL code.

80
00:05:30,016 --> 00:05:33,897
Engineers can spend more time on the more valuable work.

81
00:05:34,632 --> 00:05:36,194
Before our tool is developed, there

82
00:05:36,194 --> 00:05:39,957
were four processes in the total to finish the data demand.

83
00:05:39,957 --> 00:05:42,459
But after we shipped it in our tool,

84
00:05:42,459 --> 00:05:44,580
there are only two processes in total.

85
00:05:44,580 --> 00:05:48,644
Again, let me emphasize that developing every tool

86
00:05:48,644 --> 00:05:51,906
is for upgrading the efficiency of our colleagues,

87
00:05:51,906 --> 00:05:54,849
lower both time cost and labor cost.

88
00:05:54,849 --> 00:05:57,171
And the pivot table tool is not excluded.

89
00:05:57,171 --> 00:06:02,915
And then we go to the second part,

90
00:06:02,915 --> 00:06:04,337
what solutions we suggest.

91
00:06:07,879 --> 00:06:11,562
For an engineer, querying data is just writing several lines

92
00:06:11,562 --> 00:06:14,924
of SQL code to look up some data in the databases.

93
00:06:14,924 --> 00:06:19,468
But for a designer, to expect every designer

94
00:06:19,468 --> 00:06:22,610
have a technical background is not practical.

95
00:06:22,610 --> 00:06:26,172
Let them learn SQL code is not a wise choice.

96
00:06:26,172 --> 00:06:30,075
The key problem is how to bridge the designers with the data.

97
00:06:33,607 --> 00:06:36,970
Before the tool is developed, our data product manager

98
00:06:36,970 --> 00:06:41,433
and engineer who communicate with designer

99
00:06:41,433 --> 00:06:45,056
and the marketing department had really a hard time

100
00:06:45,056 --> 00:06:47,938
to know what some designers really want.

101
00:06:47,938 --> 00:06:50,620
Like one of our data product manager mentioned,

102
00:06:50,620 --> 00:06:56,185
this demand is a total tragedy and a long word document

103
00:06:56,185 --> 00:06:58,767
with ambiguous descriptions.

104
00:06:58,767 --> 00:07:02,009
Finally, I found that they even did not tell me

105
00:07:02,009 --> 00:07:03,070
which locks to search.

106
00:07:04,356 --> 00:07:18,563
I do not know which designer gave this demands but it is obvious that the process cost, cost much time for designers to clarify with data product manager and engineer about the exact demands they want.

107
00:07:21,670 --> 00:07:27,215
Gradually, our data engineers work out a regulation to let designers to follow.

108
00:07:27,215 --> 00:07:34,942
Designers are required to provide an Excel file, including important messages and rules they want

109
00:07:34,942 --> 00:07:42,469
to add to the SQL code. Like in this picture, they are told to provide time information like

110
00:07:42,469 --> 00:07:46,193
every Friday, Saturday, Sunday from March 11th.

111
00:07:47,214 --> 00:07:51,116
And the logs they want to check is the GM trials,

112
00:07:51,116 --> 00:07:57,060
dungeon reward log, and the inner logic of some data,

113
00:07:57,060 --> 00:07:59,901
like the average daily activity.

114
00:07:59,901 --> 00:08:02,143
It costs less time in communication,

115
00:08:02,143 --> 00:08:05,545
but still need engineers to handle the SQL search

116
00:08:05,545 --> 00:08:06,365
operation.

117
00:08:06,365 --> 00:08:10,508
Still, more than one people are involved in this process.

118
00:08:13,291 --> 00:08:16,478
Following this, we want a more direct way

119
00:08:16,478 --> 00:08:20,447
to let designers to handle data demand on their own,

120
00:08:20,447 --> 00:08:22,953
something like advanced search engine.

121
00:08:23,600 --> 00:08:27,545
It should have powerful functions and customizable keys.

122
00:08:27,545 --> 00:08:32,110
But advanced search is a tool which is hard for designers to learn.

123
00:08:32,110 --> 00:08:36,615
Too many keys to add and it is easy to miss important information.

124
00:08:36,615 --> 00:08:40,239
We should not give designers too much things with all directions.

125
00:08:40,239 --> 00:08:45,304
We need fewer entrances but lead to a correct SQL code with enough messages.

126
00:08:48,593 --> 00:08:55,981
So after this, a more practical method is to translate the SQL code into natural language

127
00:08:55,981 --> 00:09:02,287
that everyone can understand. Designers can set the keys, like filling some forms,

128
00:09:02,287 --> 00:09:07,752
to finish a paragraph of text. And a SQL language can be generated

129
00:09:07,752 --> 00:09:11,356
to automatically query the results in the databases.

130
00:09:14,402 --> 00:09:18,786
So combining with the data structure contained in our game,

131
00:09:18,786 --> 00:09:22,829
we decided to use a 5W model to design a question

132
00:09:22,829 --> 00:09:23,690
and answer system.

133
00:09:23,690 --> 00:09:28,474
The designers can use 5W to organize their data demands

134
00:09:28,474 --> 00:09:29,035
in several questions.

135
00:09:29,035 --> 00:09:37,923
So 5W2H is originally a concept in management field

136
00:09:37,923 --> 00:09:41,326
to disassemble an event into several elements.

137
00:09:42,047 --> 00:09:47,311
We modified it from original ones to meet our situation.

138
00:09:47,311 --> 00:09:52,355
So r5w is who, which refers to the primary key

139
00:09:52,355 --> 00:09:55,717
of this data query, and whom, which refers

140
00:09:55,717 --> 00:09:58,279
to the detailed description of the primary key.

141
00:09:58,279 --> 00:10:03,343
And what refers to the purpose of the data query,

142
00:10:03,343 --> 00:10:06,906
when refers to the range of the data query,

143
00:10:06,906 --> 00:10:10,288
and where refers to the server range selected

144
00:10:10,288 --> 00:10:10,929
for this query.

145
00:10:11,780 --> 00:10:15,901
We use 5W to cover all keys designers can query.

146
00:10:15,901 --> 00:10:19,963
They just need to choose exact keys among several dropdown

147
00:10:19,963 --> 00:10:20,183
menu.

148
00:10:20,183 --> 00:10:25,425
And 5W can disassemble demands like disassembling

149
00:10:25,425 --> 00:10:26,646
other events.

150
00:10:26,646 --> 00:10:31,168
And it only provides five entrances for designers to fill.

151
00:10:31,168 --> 00:10:33,388
It won't be too messy for them to handle.

152
00:10:36,880 --> 00:10:40,264
And let us see how exactly this method works.

153
00:10:40,264 --> 00:10:43,287
This sentence shows the designer want

154
00:10:43,287 --> 00:10:46,710
to query all roles in November 16 at all servers.

155
00:10:46,710 --> 00:10:52,315
All channels, the information include the role's name,

156
00:10:52,315 --> 00:10:57,040
date, they've created the role, and the servers,

157
00:10:57,040 --> 00:10:59,802
and the occupations, and the battle power.

158
00:11:00,660 --> 00:11:05,445
The 5W questions will show one by one for designers to answer.

159
00:11:05,445 --> 00:11:07,908
It is also a good way to ask a designer

160
00:11:07,908 --> 00:11:10,410
to think again about their data demands

161
00:11:10,410 --> 00:11:12,873
by going back through the sentence again.

162
00:11:12,873 --> 00:11:16,456
By this means, we try to let the designer know

163
00:11:16,456 --> 00:11:19,299
what are the elements to form the data demands.

164
00:11:22,332 --> 00:11:26,376
And this is how the result of our tool is given.

165
00:11:26,376 --> 00:11:29,359
We provide the data through a pivot table.

166
00:11:29,359 --> 00:11:32,882
Designers can modify the pivot table with the exact key

167
00:11:32,882 --> 00:11:34,503
they want to show.

168
00:11:34,503 --> 00:11:37,526
And data visualization is another important demand

169
00:11:37,526 --> 00:11:38,026
of our tool.

170
00:11:38,026 --> 00:11:41,870
Designers need an intuitive view of our data.

171
00:11:42,750 --> 00:11:47,993
A pivot table is a good way to represent data with more than two keys.

172
00:11:47,993 --> 00:11:55,936
So that is why we decided to aggregate the pivot table into our tool.

173
00:11:55,936 --> 00:12:01,058
So enough part for the design pattern and now it comes to the engineering part.

174
00:12:01,058 --> 00:12:03,359
Let's leave the stage for my partner Yong Yuan.

175
00:12:03,359 --> 00:12:07,281
He will introduce how to achieve such kind of tool with low cost method.

176
00:12:15,475 --> 00:12:22,161
However, I move on in time.

177
00:12:22,161 --> 00:12:24,223
How to achieve a pivot table to present day

178
00:12:24,223 --> 00:12:32,271
is another issue we are facing during the development.

179
00:12:32,271 --> 00:12:35,634
Let's see the test stack of our tool first.

180
00:12:36,929 --> 00:12:44,195
As a typical web tool, the front-end uses mainstream technology structures, TypeScript and React.

181
00:12:44,195 --> 00:12:52,042
The component library uses an open-source library and design.

182
00:12:52,042 --> 00:12:56,906
The API shell is Python Django, which we can implement lightly and easily.

183
00:12:56,906 --> 00:13:02,071
And the database is MySQL.

184
00:13:06,019 --> 00:13:11,000
So, how to choose a private table based on our stack?

185
00:13:11,000 --> 00:13:15,442
We investigated some of the popular technology solutions.

186
00:13:15,442 --> 00:13:19,903
Commercial software like Flexmaster, DHTML,

187
00:13:19,903 --> 00:13:23,284
and CharmPilot is not suitable for us,

188
00:13:23,284 --> 00:13:26,765
since it costs a lot of money.

189
00:13:26,765 --> 00:13:29,926
Open source components, such as Private Table JS,

190
00:13:29,926 --> 00:13:31,366
are not suitable for us.

191
00:13:32,363 --> 00:13:34,905
And because the UI is not pretty useful enough,

192
00:13:34,905 --> 00:13:38,806
and it's not easy to extend.

193
00:13:38,806 --> 00:13:41,807
So we decided to use a table compartment of Andy Design

194
00:13:41,807 --> 00:13:44,449
to extend the implementation.

195
00:13:44,449 --> 00:13:53,432
After we decided to implement this Andy Design table,

196
00:13:53,432 --> 00:13:55,313
there are still some issues.

197
00:13:55,313 --> 00:13:58,795
The back end means two problems.

198
00:13:59,532 --> 00:14:04,134
performance of fetching data, and position of the circle.

199
00:14:04,134 --> 00:14:08,035
The front-end main needs to fulfill performance,

200
00:14:08,035 --> 00:14:11,456
fix serial number, header and data processing,

201
00:14:11,456 --> 00:14:15,577
frozen column, row, and serial width.

202
00:14:15,577 --> 00:14:18,618
I'm here to share three main problems I have in front of you.

203
00:14:18,618 --> 00:14:26,240
The first one is how to implement the serial numbers

204
00:14:26,240 --> 00:14:28,521
on the top and the left of the table.

205
00:14:30,299 --> 00:14:32,941
Many of Shor's private table components

206
00:14:32,941 --> 00:14:36,125
don't have a serial number for the private table,

207
00:14:36,125 --> 00:14:38,167
but Excel has a serial number.

208
00:14:38,167 --> 00:14:41,571
So our designer also wants a serial number.

209
00:14:41,571 --> 00:14:44,674
So again, with the same tools and relations,

210
00:14:44,674 --> 00:14:47,037
we also make our tool intuitive.

211
00:14:52,459 --> 00:14:56,482
It's very simple to use and learn to implement this.

212
00:14:56,482 --> 00:15:01,427
We only need to set the first column as a number of strings

213
00:15:01,427 --> 00:15:05,430
and the number of sides can be increased

214
00:15:05,430 --> 00:15:07,772
according to the data length

215
00:15:07,772 --> 00:15:09,254
to achieve the number of strings.

216
00:15:09,254 --> 00:15:11,616
For the order of the top,

217
00:15:11,616 --> 00:15:15,159
we can set the letters to the value of the header.

218
00:15:15,159 --> 00:15:19,223
If there are more than 26 columns, we will use AABB.

219
00:15:24,643 --> 00:15:28,886
The second is table header setting and data procession.

220
00:15:28,886 --> 00:15:34,129
Our tables are generally used to view set-dimensional data

221
00:15:34,129 --> 00:15:37,871
of rows, columns, and values.

222
00:15:37,871 --> 00:15:41,394
Material tables can only view two-dimensional data,

223
00:15:41,394 --> 00:15:44,315
so we need to make the anti-design table

224
00:15:44,315 --> 00:15:47,137
components view multi-dimensional data.

225
00:15:47,137 --> 00:15:52,460
It was the fusion that the header of the anti-design table

226
00:15:52,460 --> 00:15:53,421
components.

227
00:15:53,736 --> 00:15:55,617
can be nested.

228
00:15:55,617 --> 00:15:57,417
Put the value of the column in header

229
00:15:57,417 --> 00:16:00,259
and throw the nesting object header.

230
00:16:00,259 --> 00:16:04,981
And let the low and the right data spread normally

231
00:16:04,981 --> 00:16:09,323
so that the most basic low column

232
00:16:09,323 --> 00:16:12,564
and the right data of the power table

233
00:16:12,564 --> 00:16:17,466
will be quickly displayed in our table.

234
00:16:17,466 --> 00:16:21,508
Many people may think that the header can only put things

235
00:16:21,508 --> 00:16:21,728
like

236
00:16:22,754 --> 00:16:30,200
but we have to break the conventional thing so that you can achieve some expected results.

237
00:16:30,200 --> 00:16:40,250
Here is how I extremely studied children of the commons.

238
00:16:40,250 --> 00:16:49,178
The learned data and results of the final power table are shown in the figure below.

239
00:16:56,075 --> 00:17:03,258
The third problem is the free stored rows and columns of the table.

240
00:17:03,258 --> 00:17:06,359
When there is a lot of data in the table,

241
00:17:06,359 --> 00:17:11,781
the current rows and columns can be frozen after certain data,

242
00:17:11,781 --> 00:17:15,382
which is needed to display the data.

243
00:17:15,382 --> 00:17:21,865
That's also the reason why I didn't choose other open-source parallel table components.

244
00:17:22,242 --> 00:17:25,205
because they don't permit this function

245
00:17:25,205 --> 00:17:28,548
and it's very troublesome to implement.

246
00:17:28,548 --> 00:17:30,249
The end-to-end table components

247
00:17:30,249 --> 00:17:32,551
supports raising counts by default.

248
00:17:32,551 --> 00:17:35,514
We only need to monitor the query behavior

249
00:17:35,514 --> 00:17:40,678
and use the assess card to raise it to face this load.

250
00:17:40,678 --> 00:17:46,343
The front picture is the effect after we add the frozen length

251
00:17:46,343 --> 00:17:49,226
and there's no need to worry about the data

252
00:17:49,226 --> 00:17:50,347
we want to check.

253
00:17:50,970 --> 00:17:57,591
after two months of scoring.

254
00:17:57,591 --> 00:18:00,671
After brief introduction of the design pattern

255
00:18:00,671 --> 00:18:03,772
and the engineering pattern of our tool,

256
00:18:03,772 --> 00:18:06,552
let's see the exact situation

257
00:18:06,552 --> 00:18:11,793
when our tool achieved in our games.

258
00:18:11,793 --> 00:18:15,114
Let's take Revolution Online as an example.

259
00:18:15,114 --> 00:18:17,094
Revolution Online is a memory mobile game.

260
00:18:17,094 --> 00:18:19,395
It has a large number of players.

261
00:18:20,268 --> 00:18:21,669
supported by RStudio.

262
00:18:21,669 --> 00:18:26,771
Due to the large scale of players,

263
00:18:26,771 --> 00:18:30,373
massive data has been generated.

264
00:18:30,373 --> 00:18:34,255
R designers are accustomed to data-driven decision-making

265
00:18:34,255 --> 00:18:39,298
and it has become a feature of the development group.

266
00:18:39,298 --> 00:18:42,420
The R Showbiz is a large part of our daily data demands.

267
00:18:45,557 --> 00:18:47,019
Here's how the designers use R2.

268
00:18:47,019 --> 00:18:51,424
R2 has been chipped into the game database.

269
00:18:51,424 --> 00:18:55,869
Designers now directly use R2 for data amounts.

270
00:18:55,869 --> 00:18:58,833
Up to now, we have chipped in short games

271
00:18:58,833 --> 00:19:02,897
and make future contributions in more games

272
00:19:02,897 --> 00:19:06,581
by helping designers to open and analyze data easily.

273
00:19:34,315 --> 00:19:37,918
Part 4, How to Improve a Private Table in Your Studio

274
00:19:37,918 --> 00:19:47,325
Today, we show how to help game designers quickly get started with decision-making through

275
00:19:47,325 --> 00:19:55,632
data and card rates, get German cards by developing a reproducible online private table analysis

276
00:19:55,632 --> 00:19:58,714
to reach a low development cost.

277
00:20:00,964 --> 00:20:03,666
We also showed why it's valuable to our studio

278
00:20:03,666 --> 00:20:06,869
and how it changes the workflow.

279
00:20:06,869 --> 00:20:10,212
And if you want to implement a tool like our pivot table,

280
00:20:10,212 --> 00:20:12,894
I can give you two suggestions here.

281
00:20:12,894 --> 00:20:20,661
First, try to cultivate the data-driven skills

282
00:20:20,661 --> 00:20:22,502
among your designers.

283
00:20:22,502 --> 00:20:25,385
Own your strong view of improving user experience

284
00:20:25,385 --> 00:20:27,246
through data and make decisions.

285
00:20:28,012 --> 00:20:34,517
Through this, can the tool make better contributions?

286
00:20:34,517 --> 00:20:46,365
Second, the purpose of developing tools is to improve efficiency, reduce repetitive man-labels, and reduce cost.

287
00:20:46,365 --> 00:20:49,048
The developing purpose of our tools is the same.

288
00:20:49,048 --> 00:20:53,511
We must be good at using open-source software for rapid development.

289
00:20:54,162 --> 00:20:58,588
The technologies used by our tools are here referring.

290
00:20:58,588 --> 00:21:06,800
If you are interested in them, you can also look to implement a similar tool in your shorter period of time.

291
00:21:13,932 --> 00:21:16,392
And here is the three main takeaways

292
00:21:16,392 --> 00:21:17,993
that you may be interested in.

293
00:21:17,993 --> 00:21:24,074
First, a direct tool is a bridge between designer and data.

294
00:21:24,074 --> 00:21:27,695
Second, Finder can help designers

295
00:21:27,695 --> 00:21:31,216
to regulate their data demands and cultivate

296
00:21:31,216 --> 00:21:32,097
data-driven thinking.

297
00:21:32,097 --> 00:21:38,358
So I provide a scalable and low-cost tool

298
00:21:38,358 --> 00:21:41,499
that developers can refer, especially

299
00:21:41,499 --> 00:21:43,360
for innovator developers.

300
00:21:50,378 --> 00:21:52,621
Thank you for your attendance.

