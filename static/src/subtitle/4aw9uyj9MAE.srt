1
00:00:05,958 --> 00:00:07,239
My name is David Santiago.

2
00:00:07,299 --> 00:00:09,961
I'm a principal technical artist at Insomniac Games,

3
00:00:10,061 --> 00:00:12,023
working with procedural systems and pipeline.

4
00:00:12,723 --> 00:00:15,966
And there have been many talks by Insomniacs at GDC this year.

5
00:00:16,547 --> 00:00:17,888
And if you missed some of the ones earlier in the week,

6
00:00:18,108 --> 00:00:18,989
I'm sure they're recorded.

7
00:00:19,669 --> 00:00:21,831
And I will be mentioning some of the upcoming talks

8
00:00:21,851 --> 00:00:22,752
during my presentation.

9
00:00:23,733 --> 00:00:25,094
Before I get started and run out of time,

10
00:00:25,114 --> 00:00:27,376
I want to make sure to thank everyone in Insomniac Games

11
00:00:27,476 --> 00:00:29,017
for their support in preparing this talk.

12
00:00:30,516 --> 00:00:32,417
And I want to thank Insomniac for being such a great place

13
00:00:32,437 --> 00:00:32,797
to work.

14
00:00:33,197 --> 00:00:34,438
And Insomniac is hiring.

15
00:00:34,638 --> 00:00:36,719
So visit our booth on the show floor

16
00:00:36,819 --> 00:00:37,940
to talk to people about openings.

17
00:00:38,600 --> 00:00:40,021
Here are some of the current openings.

18
00:00:40,501 --> 00:00:41,922
I can show this slide later.

19
00:00:42,442 --> 00:00:44,463
And we do, I believe, still have openings

20
00:00:44,543 --> 00:00:47,485
for a rigging intern in both studios this summer.

21
00:00:48,766 --> 00:00:52,267
And I'll be at the booth on and off the next couple days.

22
00:00:53,588 --> 00:00:55,729
So I'm going to talk about a game that some of you

23
00:00:56,049 --> 00:00:57,130
might not have platinumed yet.

24
00:00:58,242 --> 00:01:01,062
And I might reveal some secrets of the game

25
00:01:01,102 --> 00:01:04,123
that have already been published in every language online.

26
00:01:05,404 --> 00:01:06,424
So a show of hands.

27
00:01:06,684 --> 00:01:08,765
So I do really want this information.

28
00:01:09,185 --> 00:01:12,746
Who hasn't seen any Spider-Man open world content at all?

29
00:01:14,426 --> 00:01:14,846
OK.

30
00:01:17,187 --> 00:01:18,968
So I will be sure to play the video,

31
00:01:19,048 --> 00:01:20,168
even though it stopped working.

32
00:01:20,548 --> 00:01:21,688
I will just get out and play it.

33
00:01:22,549 --> 00:01:25,150
How many people have not played the game?

34
00:01:27,410 --> 00:01:27,730
All right.

35
00:01:28,983 --> 00:01:30,764
Well, that's pretty much all the information I need.

36
00:01:33,145 --> 00:01:35,486
So if everybody else plays the game.

37
00:01:35,726 --> 00:01:36,506
So how did it start?

38
00:01:36,586 --> 00:01:37,867
And how do we plan on making this game?

39
00:01:37,907 --> 00:01:39,367
Let's jump back a few years.

40
00:01:40,048 --> 00:01:42,669
There was a meeting where Brian Inahar, a creative director,

41
00:01:42,709 --> 00:01:44,970
revealed the next game that Insomniac would be

42
00:01:45,010 --> 00:01:46,430
making for the PlayStation 4.

43
00:01:47,051 --> 00:01:48,751
And I actually wasn't at that meeting,

44
00:01:48,972 --> 00:01:50,152
but I heard that people freaked out.

45
00:01:51,470 --> 00:01:53,632
I remember the moment I was told,

46
00:01:54,212 --> 00:01:55,533
you're gonna be working on Spider-Man.

47
00:01:56,314 --> 00:01:58,656
And I was like, what?

48
00:01:58,836 --> 00:01:59,817
We're doing Spider-Man?

49
00:02:00,277 --> 00:02:00,817
You're kidding.

50
00:02:01,058 --> 00:02:02,539
And it was hard to believe,

51
00:02:03,119 --> 00:02:04,781
but I was very quickly convinced

52
00:02:04,841 --> 00:02:05,641
that's what we were gonna do.

53
00:02:08,136 --> 00:02:10,299
So I was being tasked to help build the city using

54
00:02:10,319 --> 00:02:13,242
the technology I first developed on Sunset Overdrive,

55
00:02:13,363 --> 00:02:16,466
creating ground buildings and markup, but for Manhattan.

56
00:02:16,987 --> 00:02:19,530
And now that's a little more real estate to cover,

57
00:02:20,251 --> 00:02:20,992
but I had a plan.

58
00:02:22,129 --> 00:02:24,671
I reviewed Brian's announcement presentation,

59
00:02:24,731 --> 00:02:27,473
which set the game's pillars and goals for every department.

60
00:02:28,134 --> 00:02:30,416
And it was a mind-blowing amount of content

61
00:02:30,456 --> 00:02:32,778
to create in a relatively short amount of time.

62
00:02:33,539 --> 00:02:36,641
And then in 2016, the public rumors

63
00:02:36,701 --> 00:02:38,823
started that, oh, there's a Spider-Man game coming.

64
00:02:39,223 --> 00:02:42,506
And fans started sharing their expectations online.

65
00:02:44,388 --> 00:02:45,609
So E3 2016, we opened on a shot of the city.

66
00:02:48,808 --> 00:02:53,070
transitioned to this street with traffic and pedestrians

67
00:02:53,130 --> 00:02:54,190
and hot dog carts.

68
00:02:55,171 --> 00:02:57,712
And we cut to this card and people got excited.

69
00:02:58,472 --> 00:03:00,053
And while I'm on this card, I'm reminded

70
00:03:00,073 --> 00:03:02,234
to thank Marvel Games and Sony Interactive

71
00:03:02,274 --> 00:03:04,135
Entertainment for their support.

72
00:03:04,255 --> 00:03:06,236
And most importantly, I want to thank my family

73
00:03:06,556 --> 00:03:08,817
and the families of my co-workers

74
00:03:09,277 --> 00:03:11,378
for all their support and enthusiasm

75
00:03:11,418 --> 00:03:13,779
as we threw ourselves into making this game.

76
00:03:16,236 --> 00:03:19,399
So the 2016 E3 crowd, they really

77
00:03:19,459 --> 00:03:22,241
erupted when we cut to the shot of Spider-Man there,

78
00:03:22,361 --> 00:03:23,722
and then he starts swinging down the city.

79
00:03:24,463 --> 00:03:27,045
But now for all of us at Insomniac, this was real.

80
00:03:27,525 --> 00:03:30,187
And the quality bar, the minimum quality bar, was set.

81
00:03:30,988 --> 00:03:36,029
So from the start, we worked to make sure that all of our demos ran real-time on PS4 hardware.

82
00:03:36,610 --> 00:03:41,491
And from the beginning, we had a strong plan which actually got us to this 2016 E3 reveal.

83
00:03:42,071 --> 00:03:46,113
But that plan wasn't yet strong enough for the challenges of the next two years.

84
00:03:48,067 --> 00:03:50,647
And speaking of that, Brian Inahar, the creative director,

85
00:03:50,687 --> 00:03:52,387
has a talk pretty much right after this, 11.30,

86
00:03:53,948 --> 00:03:56,648
in the South Hall, so you might want to catch that.

87
00:03:57,148 --> 00:04:00,269
But my talk today is about the procedural systems

88
00:04:00,469 --> 00:04:03,010
and how we integrated them into the pipeline

89
00:04:03,050 --> 00:04:04,790
as part of that plan to meet the challenges.

90
00:04:06,970 --> 00:04:10,431
So this is that video that last week didn't play,

91
00:04:10,511 --> 00:04:10,811
and then it...

92
00:04:13,327 --> 00:04:16,390
stopped, started playing, and now it's not playing again.

93
00:04:16,490 --> 00:04:18,672
So let me play this real quick.

94
00:04:19,352 --> 00:04:20,613
If you are able to see it.

95
00:04:20,873 --> 00:04:22,475
Do I have to put it over somewhere else?

96
00:04:25,957 --> 00:04:28,759
Do I need to quit the other presentation maybe?

97
00:04:31,281 --> 00:04:32,442
Let's close that.

98
00:04:34,324 --> 00:04:34,644
All right.

99
00:04:35,845 --> 00:04:36,726
So since it's not.

100
00:04:36,786 --> 00:04:38,367
So for those of you who hadn't.

101
00:04:39,889 --> 00:04:43,671
seen anything. So here is Spider-Man swinging through the open world.

102
00:04:46,612 --> 00:04:49,753
Don't need to play too much of this. I think you'll get it.

103
00:04:54,615 --> 00:05:00,757
All right. Let's move back to the presentation. It's great when, with PowerPoint.

104
00:05:03,358 --> 00:05:03,978
Shift F5.

105
00:05:05,715 --> 00:05:08,958
All right, so let me give you an overview of my talk today.

106
00:05:08,978 --> 00:05:11,601
So we're going to talk about what the open world planned

107
00:05:11,641 --> 00:05:13,683
content was for procedural content,

108
00:05:14,063 --> 00:05:15,044
what the challenges would be.

109
00:05:15,425 --> 00:05:17,827
I'll give an overview of the procedural systems that we,

110
00:05:18,087 --> 00:05:20,570
well, most of the ones, some of the ones we used on Spider-Man.

111
00:05:20,950 --> 00:05:22,912
I'll describe our original pipeline plan

112
00:05:23,753 --> 00:05:26,376
and how the project evolved as production happens

113
00:05:27,157 --> 00:05:29,239
and how we updated the pipeline to handle it.

114
00:05:30,332 --> 00:05:32,437
I'll mention some late additional challenges

115
00:05:32,537 --> 00:05:33,439
we met to finish the game,

116
00:05:34,000 --> 00:05:35,984
and then most importantly, what we learned.

117
00:05:37,908 --> 00:05:40,513
So, here is our Marvel Island of Manhattan.

118
00:05:41,504 --> 00:05:42,585
But what is Spider-Man?

119
00:05:42,625 --> 00:05:43,786
What is in this game?

120
00:05:44,306 --> 00:05:47,309
So it's an open world game of approximately six kilometers

121
00:05:47,349 --> 00:05:49,392
by three kilometers of designed playable space.

122
00:05:50,192 --> 00:05:53,776
And we have the nine districts of Harlem, Upper East Side,

123
00:05:53,816 --> 00:05:58,020
Upper West Side, Hell's Kitchen, Midtown, Chinatown, Greenwich,

124
00:05:58,401 --> 00:06:02,405
Financial District, and The Raft, and Rikers Island Prisons,

125
00:06:02,745 --> 00:06:03,886
and Central Park.

126
00:06:05,818 --> 00:06:09,240
There are 544 roads and 1,202 alleys.

127
00:06:09,881 --> 00:06:11,181
Those are mostly fictitious alleys.

128
00:06:11,201 --> 00:06:13,723
There are actually very few of them in Manhattan.

129
00:06:14,844 --> 00:06:19,387
Over 8,300 distinct buildings in 3,250 edifice prefabs.

130
00:06:19,567 --> 00:06:22,549
And an edifice, it contains the contiguous buildings

131
00:06:22,609 --> 00:06:24,070
or structures within a block.

132
00:06:24,870 --> 00:06:27,191
More than 350 different types of storefronts

133
00:06:27,272 --> 00:06:28,993
which are uniquely customizable.

134
00:06:30,333 --> 00:06:31,854
More than 3,000 crimes, more than 3,000 vignettes.

135
00:06:34,582 --> 00:06:37,364
And I think there's a story, missions, and a hero.

136
00:06:39,907 --> 00:06:40,787
So how will we do it?

137
00:06:41,508 --> 00:06:43,290
Well, to make such a large game, we

138
00:06:43,310 --> 00:06:44,991
knew automation and procedural systems

139
00:06:45,071 --> 00:06:46,833
would be used on a really large scale.

140
00:06:47,433 --> 00:06:49,976
And Insomniac Games is not a big company.

141
00:06:50,176 --> 00:06:52,118
I mean, I think during Spider-Man, we're about 250

142
00:06:52,578 --> 00:06:54,240
in the entire company, and we're always

143
00:06:54,280 --> 00:06:55,501
working on multiple titles.

144
00:06:56,614 --> 00:06:59,596
So we knew that automation would be key, using macros, scripts,

145
00:07:00,056 --> 00:07:00,496
et cetera.

146
00:07:00,976 --> 00:07:02,077
And then procedural systems.

147
00:07:02,157 --> 00:07:03,898
So what are procedural systems?

148
00:07:03,958 --> 00:07:07,260
They are methods for creating content algorithmically

149
00:07:07,340 --> 00:07:08,600
rather than manually.

150
00:07:09,281 --> 00:07:11,242
And so data flows through a set of operations

151
00:07:11,442 --> 00:07:14,243
that manipulate the data based on parameters, attributes,

152
00:07:14,423 --> 00:07:15,224
and other input.

153
00:07:16,195 --> 00:07:18,277
Now, this is not real-time procedural.

154
00:07:18,357 --> 00:07:21,480
I mean, there's always some small real-time procedural

155
00:07:21,520 --> 00:07:21,801
systems.

156
00:07:22,081 --> 00:07:24,863
But these are procedural tools to author content.

157
00:07:25,884 --> 00:07:27,606
And our goal is, as much as possible,

158
00:07:27,706 --> 00:07:31,489
to create a procedurally authored open world.

159
00:07:32,711 --> 00:07:33,371
Pow!

160
00:07:34,132 --> 00:07:35,193
It's a Marvel talk.

161
00:07:35,253 --> 00:07:36,654
You kind of have to do something like that.

162
00:07:38,636 --> 00:07:40,438
And I just thought of that like two weeks ago.

163
00:07:41,491 --> 00:07:45,032
So hand crafting is very important at Insomniac Games.

164
00:07:45,412 --> 00:07:48,113
Designers and artists hand craft the game experience

165
00:07:48,453 --> 00:07:50,674
as much as possible throughout the entire game.

166
00:07:51,414 --> 00:07:52,995
And procedural systems are a tool

167
00:07:53,015 --> 00:07:55,136
to help author a lot of content quickly

168
00:07:55,536 --> 00:07:58,057
and give the artists and designers a big head start.

169
00:07:58,657 --> 00:08:00,738
So the goal for Spider-Man was to procedurally generate

170
00:08:00,818 --> 00:08:02,898
an open world early in production

171
00:08:03,358 --> 00:08:04,639
to give the designers and artists

172
00:08:04,879 --> 00:08:06,940
the rest of the remaining of our production time

173
00:08:07,220 --> 00:08:08,220
to polish the game.

174
00:08:08,941 --> 00:08:12,052
And our target was 80% usable procedural content.

175
00:08:12,393 --> 00:08:13,598
And I'll have more on that later.

176
00:08:15,488 --> 00:08:18,389
So we started with a foundation of systems and tools

177
00:08:18,509 --> 00:08:21,610
from Sunset Overdrive, and we had to augment that foundation

178
00:08:22,050 --> 00:08:24,391
to create the basic tools and systems for Spider-Man.

179
00:08:25,451 --> 00:08:27,652
Sunset Overdrive, we built roads on terrain

180
00:08:27,772 --> 00:08:30,133
and placed a relatively small set of props

181
00:08:30,193 --> 00:08:31,093
and traversal markup.

182
00:08:31,733 --> 00:08:33,054
And there was a building system

183
00:08:33,074 --> 00:08:34,354
to help block out areas of the game,

184
00:08:34,734 --> 00:08:36,635
but the buildings on Sunset were so unique

185
00:08:36,675 --> 00:08:37,795
that it was just more efficient

186
00:08:37,815 --> 00:08:39,436
to construct it by hand at that time.

187
00:08:41,376 --> 00:08:43,737
So we had a plan for what main procedural systems

188
00:08:44,698 --> 00:08:45,018
we needed.

189
00:08:46,197 --> 00:08:48,738
So I'm going to be using this east up orientation

190
00:08:48,778 --> 00:08:50,158
for the island throughout the presentation.

191
00:08:50,618 --> 00:08:52,579
So it fits our aspect ratio better.

192
00:08:52,819 --> 00:08:54,279
And so hopefully you get used to it.

193
00:08:55,279 --> 00:08:56,319
It took me a while to get used to it,

194
00:08:56,339 --> 00:08:58,300
because we weren't working this way either.

195
00:08:59,040 --> 00:09:01,301
So at the time in pre-production,

196
00:09:01,421 --> 00:09:04,041
the planned procedural systems included ground system

197
00:09:04,081 --> 00:09:08,242
for terrain, streets, sidewalks, some decor

198
00:09:08,262 --> 00:09:11,563
and integrated markup, buildings with markup.

199
00:09:12,855 --> 00:09:14,978
a traffic system for pedestrians and vehicles,

200
00:09:15,799 --> 00:09:19,082
and a first pass of propping the open world,

201
00:09:19,142 --> 00:09:20,804
really spamming the props out there.

202
00:09:22,600 --> 00:09:25,521
So step one for the ground system are roads and alleys.

203
00:09:26,142 --> 00:09:28,663
Roads and alleys define the city.

204
00:09:29,184 --> 00:09:32,105
Everything is dependent on their placement, size,

205
00:09:32,145 --> 00:09:33,186
and lane configuration.

206
00:09:33,866 --> 00:09:37,468
Now a big hint for this talk, dependency is very important.

207
00:09:38,429 --> 00:09:40,230
So from these lines and curves in Editor,

208
00:09:40,530 --> 00:09:43,071
we will generate the streets, sidewalks, gray spaces,

209
00:09:43,392 --> 00:09:45,313
and the seawall around the island.

210
00:09:47,893 --> 00:09:50,635
Ground modifiers affect how the environment is constructed.

211
00:09:50,855 --> 00:09:52,996
So this yellow overlay is the contents

212
00:09:53,036 --> 00:09:54,377
of our ground modifier zone.

213
00:09:54,858 --> 00:09:57,559
Now, these are additional curves, polygons, or volumes

214
00:09:57,619 --> 00:10:01,142
that cut, deform, modify, add materials, et cetera,

215
00:10:01,542 --> 00:10:03,203
to particular areas of the game.

216
00:10:04,804 --> 00:10:07,246
There was also an analogous design modifier zone.

217
00:10:07,286 --> 00:10:09,687
This is the ground modifier zone, a design modifier zone

218
00:10:10,067 --> 00:10:12,909
to affect design content, such as crimes, traffic,

219
00:10:12,969 --> 00:10:14,290
bot navigation, et cetera.

220
00:10:16,600 --> 00:10:19,443
So we're not going to generate a giant model for the ground.

221
00:10:19,503 --> 00:10:21,425
We're going to make models for each streaming region.

222
00:10:21,885 --> 00:10:25,569
So our open world is cut into square tile streaming regions,

223
00:10:26,250 --> 00:10:27,131
128 meters on a side.

224
00:10:27,251 --> 00:10:28,452
I must say it about 128 meters on a side.

225
00:10:28,472 --> 00:10:29,233
No, it's 128 meters on a side.

226
00:10:31,976 --> 00:10:34,297
So if you see here, there's some double lines.

227
00:10:34,457 --> 00:10:37,359
I mean, they're not important, but it's an interesting detail

228
00:10:37,519 --> 00:10:38,079
in our system.

229
00:10:38,439 --> 00:10:40,700
They indicate a history of scaling and offset

230
00:10:40,760 --> 00:10:43,222
of streaming regions for various reasons.

231
00:10:43,442 --> 00:10:45,243
And we actually preserved that history

232
00:10:45,363 --> 00:10:47,044
so we could validate content to make sure

233
00:10:47,064 --> 00:10:49,565
that it was fitting into its appropriate streaming region.

234
00:10:50,488 --> 00:10:52,569
Now, there are very few actually scaled regions

235
00:10:52,609 --> 00:10:53,369
in the final game.

236
00:10:53,490 --> 00:10:54,730
And mostly, they're on the coastline

237
00:10:54,770 --> 00:10:56,551
just to reduce the tile count, just

238
00:10:56,591 --> 00:10:57,512
make it a little bit bigger.

239
00:10:57,552 --> 00:10:58,852
We can fit the content in there.

240
00:10:59,553 --> 00:11:02,174
And you'll notice that Riker's Island and the Raft Prison

241
00:11:02,554 --> 00:11:04,395
do not have streaming regions, but that's

242
00:11:04,455 --> 00:11:06,377
as far as procedural systems are concerned,

243
00:11:06,797 --> 00:11:09,838
because there is no procedural content in their final version.

244
00:11:13,010 --> 00:11:15,270
Tile ID, so each region has a tile ID,

245
00:11:15,451 --> 00:11:18,612
which is a map location from AO1 to X48.

246
00:11:19,172 --> 00:11:21,052
And each tile hierarchically contains

247
00:11:21,152 --> 00:11:23,613
all the zones for its open world content for that region.

248
00:11:24,314 --> 00:11:25,734
And you can notice that lonely tile

249
00:11:25,754 --> 00:11:28,315
in the top right corner there, that's X48,

250
00:11:28,495 --> 00:11:30,156
and it's our test region that was there

251
00:11:30,196 --> 00:11:31,136
throughout the entire game.

252
00:11:33,874 --> 00:11:36,576
So here is a procedurally generated ground.

253
00:11:37,037 --> 00:11:38,938
It's typically 16 models per tile,

254
00:11:39,279 --> 00:11:41,801
so that each is a manageable size for physics

255
00:11:42,102 --> 00:11:43,043
and other systems.

256
00:11:43,623 --> 00:11:46,686
And this is actually a debug version of the ground, which

257
00:11:46,746 --> 00:11:48,688
is why it is not complete in some areas.

258
00:11:49,008 --> 00:11:52,051
And you also see remnants of Rikers and raft

259
00:11:52,211 --> 00:11:55,395
up on the top there, which was later completely handcrafted.

260
00:11:57,627 --> 00:12:00,209
Also note that Central Park's ground was hand-authored

261
00:12:00,689 --> 00:12:03,370
to fit the character of the park in the area allotted.

262
00:12:03,871 --> 00:12:05,752
So eventually all of those manual iterations

263
00:12:05,812 --> 00:12:07,833
of Central Park were procedurally processed

264
00:12:07,913 --> 00:12:09,333
in order to integrate them into the game.

265
00:12:12,593 --> 00:12:13,754
The last part of the ground system

266
00:12:13,834 --> 00:12:15,996
is kind of actually the beginning of the prop system.

267
00:12:16,296 --> 00:12:18,678
It's where we add some ground details, lane lines,

268
00:12:18,778 --> 00:12:21,200
crosswalks, per district materials, and such.

269
00:12:22,281 --> 00:12:25,223
And we also do a little first pass of street props,

270
00:12:25,283 --> 00:12:27,825
such as manhole covers and sidewalk props,

271
00:12:27,865 --> 00:12:29,446
such as traffic and street lights,

272
00:12:29,787 --> 00:12:32,068
and a few things like trash cans, trees,

273
00:12:33,009 --> 00:12:34,791
just to fill it out for designer testing.

274
00:12:34,951 --> 00:12:37,413
So when they're swinging through the city, oh, don't hit that

275
00:12:37,473 --> 00:12:37,633
tree.

276
00:12:40,715 --> 00:12:41,696
on to the building system.

277
00:12:42,236 --> 00:12:44,238
So, buildings were constructed from primitives

278
00:12:44,298 --> 00:12:46,880
such as boxes, cylinders, and polygonal volumes

279
00:12:47,540 --> 00:12:49,722
to define the outline of the floors of a building.

280
00:12:50,322 --> 00:12:52,604
And then these simple buildings are then processed

281
00:12:52,624 --> 00:12:56,327
by the procedural system to instance assets

282
00:12:56,367 --> 00:12:58,288
from several building kits

283
00:12:58,528 --> 00:12:59,849
onto the faces of the gray block.

284
00:13:00,610 --> 00:13:03,753
And then there were roof models that could be sized and tiled

285
00:13:03,773 --> 00:13:06,416
to fit a roof, or a custom roof model

286
00:13:06,436 --> 00:13:09,359
would be created automatically if the procedural system

287
00:13:10,000 --> 00:13:11,021
couldn't make it out of pieces.

288
00:13:12,242 --> 00:13:14,284
And then some rooftop props were automatically

289
00:13:14,364 --> 00:13:16,827
added to these building edifices at this time,

290
00:13:16,947 --> 00:13:19,750
so things like the HVACs and those water towers.

291
00:13:21,304 --> 00:13:23,346
The procedure system also added all the markups,

292
00:13:23,386 --> 00:13:25,908
swing hint volumes and various types of ledges,

293
00:13:26,308 --> 00:13:27,529
ledge paths for traversal.

294
00:13:28,550 --> 00:13:30,832
And then as we were laying out all these buildings,

295
00:13:30,872 --> 00:13:32,813
we noticed that any time we changed the streets,

296
00:13:33,133 --> 00:13:34,594
we might have to change the buildings.

297
00:13:37,331 --> 00:13:38,412
Some talks related to this.

298
00:13:39,033 --> 00:13:40,975
Doug's talk, Concrete Jungle Gym,

299
00:13:41,175 --> 00:13:42,997
the building traversal in Spider-Man.

300
00:13:43,518 --> 00:13:44,679
That is tomorrow morning.

301
00:13:45,100 --> 00:13:48,443
And tomorrow afternoon, a programming talk

302
00:13:48,483 --> 00:13:50,285
about our tools, our in-house tools,

303
00:13:51,567 --> 00:13:52,908
editing with immutable data by Ron.

304
00:13:56,849 --> 00:13:59,130
So our building tool was originally designed

305
00:13:59,310 --> 00:14:01,211
with a recalculate markup only mode.

306
00:14:01,432 --> 00:14:03,112
So if a building was hand modified

307
00:14:03,253 --> 00:14:05,994
or if it was completely built from scratch,

308
00:14:06,814 --> 00:14:10,236
our system could automatically read that edifice prefab,

309
00:14:10,777 --> 00:14:11,877
generate the markup.

310
00:14:12,217 --> 00:14:14,058
And that markup was always optimized

311
00:14:14,178 --> 00:14:17,120
by joining all segments to minimize the number of curves,

312
00:14:17,180 --> 00:14:18,801
minimize the markup actors.

313
00:14:19,521 --> 00:14:21,202
So that's pretty much the building system.

314
00:14:23,566 --> 00:14:24,907
And onto traffic systems.

315
00:14:24,967 --> 00:14:27,268
So from the road, pedestrian and vehicle traffic

316
00:14:27,408 --> 00:14:28,529
were procedurally generated.

317
00:14:29,209 --> 00:14:31,370
So as far as the pedestrian traffic system,

318
00:14:31,410 --> 00:14:32,911
the first thing we did is we placed

319
00:14:34,012 --> 00:14:36,333
static pedestrian volumes on sidewalks.

320
00:14:36,793 --> 00:14:39,775
And so those volumes just populated the sidewalk

321
00:14:39,795 --> 00:14:41,576
with a certain density of pedestrians, and they were.

322
00:14:41,996 --> 00:14:43,597
They would just be standing there to start with,

323
00:14:43,677 --> 00:14:46,400
but then they could get promoted to the pedestrian system

324
00:14:46,420 --> 00:14:47,220
to actually walk around.

325
00:14:47,881 --> 00:14:49,102
So after we placed those volumes,

326
00:14:49,522 --> 00:14:51,144
then we would create a network of paths

327
00:14:51,164 --> 00:14:52,785
that would connect from corner to corner.

328
00:14:52,805 --> 00:14:54,326
So corner to corner along the sidewalks,

329
00:14:54,587 --> 00:14:55,848
corner to corner across the street.

330
00:14:56,708 --> 00:14:58,290
Then we would integrate any paths

331
00:14:58,430 --> 00:15:01,512
from other assets like bus stops and subways,

332
00:15:01,532 --> 00:15:03,394
because they had their paths that we have to come up

333
00:15:03,414 --> 00:15:05,776
the stairs and around the subway or around the bus stop,

334
00:15:05,796 --> 00:15:06,597
around the bus shelter.

335
00:15:07,537 --> 00:15:08,799
So those had some built-in curves.

336
00:15:09,179 --> 00:15:10,941
They would be integrated into the pedestrian system.

337
00:15:11,701 --> 00:15:14,324
And finally, we'd integrate any hand-authored paths.

338
00:15:14,344 --> 00:15:15,725
So there was a lot of hand-authoring

339
00:15:16,065 --> 00:15:18,067
of paths, which pretty much just curves

340
00:15:18,147 --> 00:15:22,832
through parks and plazas and maybe some other spaces.

341
00:15:23,372 --> 00:15:24,874
So those were all integrated together.

342
00:15:25,882 --> 00:15:28,306
And then they would generate the pedestrian traffic nodes

343
00:15:28,486 --> 00:15:30,951
that the actual gameplay system would use.

344
00:15:31,431 --> 00:15:33,395
And that would include the correct traffic phases

345
00:15:33,455 --> 00:15:36,280
for each link, so that when the light turned green,

346
00:15:36,340 --> 00:15:37,302
they could walk across.

347
00:15:38,013 --> 00:15:40,314
And when it was red, they would hopefully stop.

348
00:15:40,374 --> 00:15:42,775
Actually, it would turn yellow, and they would speed up and run

349
00:15:42,795 --> 00:15:43,695
across the intersection.

350
00:15:43,715 --> 00:15:46,276
Except sometimes, they'd just stop.

351
00:15:47,716 --> 00:15:50,937
So we had this debug with the color of the faces

352
00:15:50,977 --> 00:15:53,118
to make sure things was all working correctly.

353
00:15:53,578 --> 00:15:55,739
And the pedestrians, as they reached each node,

354
00:15:55,879 --> 00:15:58,320
they could decide on whether they wanted to cross the street

355
00:15:58,360 --> 00:16:00,660
or just turn around the corner and go down the sidewalk again.

356
00:16:02,119 --> 00:16:03,880
So now on to the vehicles.

357
00:16:03,960 --> 00:16:06,302
It's very similar to the pedestrian traffic system.

358
00:16:07,523 --> 00:16:09,325
But first, the parking and driving lanes

359
00:16:09,385 --> 00:16:12,227
had to be chosen from a variety of the lane templates

360
00:16:12,247 --> 00:16:13,248
from each street size.

361
00:16:13,328 --> 00:16:16,151
So each street could randomly, if it

362
00:16:16,191 --> 00:16:18,373
wasn't assigned a specific template of number

363
00:16:18,393 --> 00:16:20,775
of lanes and direction.

364
00:16:21,758 --> 00:16:23,679
And then the crosswalks from the pedestrian system

365
00:16:23,719 --> 00:16:26,101
became the stop lines for the traffic at the intersection.

366
00:16:26,982 --> 00:16:29,784
So just like we populated the sidewalks with pedestrians

367
00:16:29,804 --> 00:16:32,667
with volume, we used volumes to populate the parked cars

368
00:16:32,787 --> 00:16:33,568
in the parking lane.

369
00:16:34,048 --> 00:16:36,670
The only difference is we had to create multiple volumes

370
00:16:36,730 --> 00:16:39,012
to avoid bus stops, hydrants, alleys,

371
00:16:39,072 --> 00:16:41,234
and other exclusion areas where you shouldn't

372
00:16:41,254 --> 00:16:41,995
be parking your car.

373
00:16:43,520 --> 00:16:46,066
We also created a network of the directional paths

374
00:16:46,086 --> 00:16:48,571
that would take a vehicle from intersection to intersection,

375
00:16:48,851 --> 00:16:50,395
and then at the intersections give them

376
00:16:50,815 --> 00:16:53,100
the legal or desirable turns that they could make.

377
00:16:54,290 --> 00:16:56,631
Then we would integrate the alleys as limited paths.

378
00:16:56,651 --> 00:16:59,472
So if it was a drivable alley, so see back in the distance

379
00:16:59,492 --> 00:17:02,134
there, those magenta lines, those are alleys.

380
00:17:02,334 --> 00:17:04,775
And they come into and they are integrated.

381
00:17:04,955 --> 00:17:08,017
And I will talk a little more about their limited use later.

382
00:17:08,697 --> 00:17:10,558
And then we would create the traffic nodes

383
00:17:10,618 --> 00:17:13,359
with the corresponding phases and links to other nodes.

384
00:17:14,474 --> 00:17:17,199
And the lane markings based on the traffic pattern

385
00:17:17,500 --> 00:17:20,365
would then get applied with the prop system.

386
00:17:20,906 --> 00:17:22,449
So here you can see the route choices.

387
00:17:22,529 --> 00:17:23,371
So these are two.

388
00:17:25,880 --> 00:17:27,922
Well, there are two lane one-way streets

389
00:17:27,942 --> 00:17:28,883
that are crossing each other.

390
00:17:28,943 --> 00:17:31,005
And that lane on the left, which is actually

391
00:17:31,025 --> 00:17:32,946
the right lane going down, I don't

392
00:17:32,966 --> 00:17:35,088
know if it's southeast or whichever way it's going,

393
00:17:35,449 --> 00:17:36,990
but they have the choice of turning right

394
00:17:37,070 --> 00:17:38,612
into either of the lanes or going

395
00:17:38,652 --> 00:17:39,653
across the intersection.

396
00:17:40,073 --> 00:17:41,354
And the other lane has no choice.

397
00:17:41,414 --> 00:17:44,597
They're only allowed in this traffic situation

398
00:17:44,817 --> 00:17:46,399
to go straight across the intersection.

399
00:17:47,898 --> 00:17:50,760
Now, here's a more complex area with pedestrian vehicle paths.

400
00:17:51,421 --> 00:17:54,383
And so it's multi-lane streets.

401
00:17:54,483 --> 00:17:55,483
So these are avenues.

402
00:17:56,024 --> 00:17:57,625
And so it gets a little more complicated

403
00:17:57,665 --> 00:17:58,745
as to what people can do.

404
00:17:58,945 --> 00:18:01,427
If you look at that lower intersection in the middle

405
00:18:01,467 --> 00:18:04,029
there, you can see that all the lanes that

406
00:18:04,049 --> 00:18:06,670
have the green light, so they can turn two lanes right

407
00:18:06,750 --> 00:18:08,251
into that one-way street.

408
00:18:08,732 --> 00:18:10,453
And the other ones can go straight across.

409
00:18:10,613 --> 00:18:12,294
And then when the traffic phase changes,

410
00:18:12,734 --> 00:18:14,936
that left-turn lane going from right to left,

411
00:18:15,056 --> 00:18:17,337
they're allowed to turn onto that one-way street.

412
00:18:19,219 --> 00:18:22,062
And then here, the pedestrian traffic for that area,

413
00:18:22,322 --> 00:18:25,444
you can see the hand-authored paths through that plaza there.

414
00:18:26,005 --> 00:18:27,386
And yeah, pretty much all they had to do

415
00:18:27,426 --> 00:18:30,348
was draw those curves so they intersected a procedural path,

416
00:18:30,589 --> 00:18:33,391
and they would automatically be integrated into the system.

417
00:18:35,313 --> 00:18:39,777
So now the decor system, which is pretty much props and decals

418
00:18:39,957 --> 00:18:43,461
and then some ped prefabs, which I'll explain in a minute.

419
00:18:44,062 --> 00:18:46,184
So we procedurally optimized placement

420
00:18:46,304 --> 00:18:50,188
of the street props, such as manholes, skid marks, tar,

421
00:18:50,348 --> 00:18:53,150
asphalt patches, and such, and sidewalk props,

422
00:18:53,271 --> 00:18:55,993
which included street lights, traffic lights, mailboxes,

423
00:18:56,073 --> 00:18:58,015
hydrants, trees, and on and on and on.

424
00:18:58,982 --> 00:19:01,764
Now also pedestrian prefabs were part of the system.

425
00:19:01,824 --> 00:19:04,527
So pedestrian prefabs were things like bus stops,

426
00:19:04,567 --> 00:19:07,469
subway entrances, hot dog carts, sign spinners, cab hailers.

427
00:19:08,069 --> 00:19:10,271
So those were assets with integrated actors

428
00:19:10,491 --> 00:19:12,713
that could be promoted to pedestrian behavior.

429
00:19:13,033 --> 00:19:15,995
So say people are waiting at a hot dog cart,

430
00:19:16,055 --> 00:19:17,757
they would wait there and then they could be promoted

431
00:19:17,817 --> 00:19:21,960
to walk along the path or flee from a crime if necessary.

432
00:19:22,020 --> 00:19:23,181
So whenever there was an encounter,

433
00:19:23,561 --> 00:19:25,463
the pedestrians would go into a flee mode.

434
00:19:27,198 --> 00:19:29,980
And then we could also integrate any hand-placed pedestrian

435
00:19:30,000 --> 00:19:31,802
prefabs, of which there were also many.

436
00:19:32,022 --> 00:19:35,965
They need to be integrated into the pedestrian prefab system

437
00:19:36,286 --> 00:19:38,488
in order to populate the game appropriately

438
00:19:38,688 --> 00:19:39,809
at the proper times.

439
00:19:41,510 --> 00:19:44,172
We also did a little bit of procedural lighting.

440
00:19:44,413 --> 00:19:46,134
And I'm not going to talk any more about that,

441
00:19:46,294 --> 00:19:48,957
because today at 2 PM, X-Ray is going

442
00:19:49,017 --> 00:19:51,679
to be talking about our procedural lighting tools.

443
00:19:54,268 --> 00:19:57,288
So also in our original design, our tools already

444
00:19:57,328 --> 00:19:59,909
had the sophistication required for the garbage and debris

445
00:19:59,949 --> 00:20:00,949
propping of Act 3.

446
00:20:01,089 --> 00:20:01,729
Maybe I should act.

447
00:20:01,769 --> 00:20:03,530
How many people made it to Act 3 of the game

448
00:20:03,570 --> 00:20:06,290
where there's stuff everywhere?

449
00:20:06,310 --> 00:20:07,231
All right.

450
00:20:07,691 --> 00:20:09,111
So the challenge there was to make

451
00:20:09,131 --> 00:20:11,151
it look like there was litter and debris everywhere,

452
00:20:11,592 --> 00:20:15,372
but not block any path needed by vehicles, pedestrians, crimes,

453
00:20:15,432 --> 00:20:16,893
vignettes, missions, et cetera.

454
00:20:17,953 --> 00:20:19,454
So that was a little tricky.

455
00:20:20,155 --> 00:20:22,477
And I know there has been much interest in puddles

456
00:20:22,897 --> 00:20:24,199
in the last nine months or so.

457
00:20:25,079 --> 00:20:28,442
Those blue circles, they're procedurally placed puddles.

458
00:20:29,523 --> 00:20:31,705
If wetness reaches a certain threshold in the material,

459
00:20:31,946 --> 00:20:34,288
which uses a random seed, a puddle

460
00:20:34,328 --> 00:20:35,709
is placed in the world and active

461
00:20:35,769 --> 00:20:36,990
during rainy atmospheres.

462
00:20:37,050 --> 00:20:39,212
And then it will splash and ripple and such.

463
00:20:40,193 --> 00:20:43,816
So at this point, we had all the tools to place the props.

464
00:20:45,973 --> 00:20:47,134
Now, imposters.

465
00:20:47,775 --> 00:20:49,296
Fairly early in pre-production, it

466
00:20:49,316 --> 00:20:51,338
was decided that imposter generation should

467
00:20:51,358 --> 00:20:53,119
be part of the procedural systems

468
00:20:53,460 --> 00:20:55,622
since we generated a lot of the content that

469
00:20:55,642 --> 00:20:56,763
would turn into an imposter.

470
00:20:57,423 --> 00:20:59,845
So here's an overhead view of the imposter version of the city,

471
00:20:59,885 --> 00:21:01,767
and it contains every structure.

472
00:21:02,448 --> 00:21:07,250
Now, impostors are low-res representations of every structure in the city, and we generate

473
00:21:07,290 --> 00:21:11,353
a simplified model from the high-res geometry in an entire edifice prefab.

474
00:21:11,853 --> 00:21:16,516
And then we use that simple model for our impostor generation to project textures and

475
00:21:16,536 --> 00:21:17,216
make an atlas.

476
00:21:18,317 --> 00:21:22,720
And then we populate the impostor zones with the correct updated impostors so that we can

477
00:21:22,820 --> 00:21:26,742
put them in the right kind of containers for optimizing memory and such.

478
00:21:28,083 --> 00:21:30,545
And then we can procedurally regenerate them

479
00:21:30,866 --> 00:21:33,468
when ground structures, materials, or lighting changes.

480
00:21:33,548 --> 00:21:36,590
So pretty much we're generating imposters over and over again.

481
00:21:38,572 --> 00:21:40,233
And here again are all the imposters

482
00:21:40,453 --> 00:21:42,575
and showing that the entire city is always present.

483
00:21:42,615 --> 00:21:44,036
Whenever you see a shot of the city,

484
00:21:44,717 --> 00:21:46,418
it's pretty much all imposters.

485
00:21:46,739 --> 00:21:50,421
So at most, only 12 zones are ever loaded high res.

486
00:21:51,222 --> 00:21:53,264
And even most of those zones are going

487
00:21:53,284 --> 00:21:56,566
to be in their lowest LOD, which is very similar to the content

488
00:21:56,667 --> 00:21:57,387
of an imposter.

489
00:21:59,299 --> 00:22:00,119
So that's it.

490
00:22:01,060 --> 00:22:03,562
We've designed and implemented all the systems we need

491
00:22:03,682 --> 00:22:04,883
to create open world Manhattan

492
00:22:05,263 --> 00:22:07,005
in less than a year of pre-production.

493
00:22:07,445 --> 00:22:09,327
And now we can generate all the procedural assets,

494
00:22:09,867 --> 00:22:11,008
let the other teams polish it up

495
00:22:11,068 --> 00:22:12,769
and generate impostors, and we're done.

496
00:22:13,610 --> 00:22:14,411
So it's party time.

497
00:22:14,931 --> 00:22:15,431
It's party time.

498
00:22:15,452 --> 00:22:16,893
We can just sit back and make the game,

499
00:22:17,313 --> 00:22:18,494
but the design team,

500
00:22:18,554 --> 00:22:21,256
I don't see the design team at the party at all.

501
00:22:21,616 --> 00:22:22,217
What's going on?

502
00:22:23,237 --> 00:22:25,559
Well, just as we felt like we were

503
00:22:25,579 --> 00:22:27,239
going to be able to handle all the challenges

504
00:22:27,480 --> 00:22:28,960
for the open world, the designers

505
00:22:29,000 --> 00:22:30,561
wanted some procedural system love.

506
00:22:31,442 --> 00:22:33,163
So we had some new challenges.

507
00:22:34,443 --> 00:22:36,745
The first set of challenges were dynamic encounters.

508
00:22:37,325 --> 00:22:39,886
The dynamic encounters are crimes and vignettes.

509
00:22:40,587 --> 00:22:43,568
Now we placed 29 different crimes procedurally

510
00:22:43,588 --> 00:22:46,050
throughout the world, and 25 different vignettes

511
00:22:46,110 --> 00:22:49,011
were procedurally placed using different rule sets.

512
00:22:50,364 --> 00:22:54,188
Another challenge at that time from designing gameplay

513
00:22:54,528 --> 00:22:56,570
was additional desired markup, now

514
00:22:56,610 --> 00:23:00,753
that we were getting some new hero moves and bot navigation.

515
00:23:01,794 --> 00:23:04,837
So an example of the rules required

516
00:23:04,877 --> 00:23:11,483
to place a crimer vignette, like a jetpack mission or jetpack

517
00:23:11,523 --> 00:23:11,763
crime.

518
00:23:12,735 --> 00:23:14,717
So what we do is for a jetpack crime,

519
00:23:14,737 --> 00:23:18,241
I have to find a roof in the city with 64 square meters

520
00:23:18,421 --> 00:23:20,263
of combat space available that was

521
00:23:20,303 --> 00:23:24,828
within 40 meters of two other rooftops with 64 square meters

522
00:23:24,888 --> 00:23:28,031
of combat space available, which were within 20 meters up

523
00:23:28,071 --> 00:23:29,553
and down from that original rooftop.

524
00:23:30,073 --> 00:23:32,656
And there was a clear path from each roof to each roof

525
00:23:32,696 --> 00:23:33,717
so I could put in nav.

526
00:23:34,257 --> 00:23:36,378
and then also so I could put an app from each rooftop

527
00:23:36,398 --> 00:23:38,238
down to the sidewalk or down to the alley below.

528
00:23:38,959 --> 00:23:40,419
So the system would run through the world,

529
00:23:40,699 --> 00:23:43,000
find all those possible places,

530
00:23:43,340 --> 00:23:45,140
based on the buildings that were currently in the game,

531
00:23:45,941 --> 00:23:48,801
and then based on the density that was required

532
00:23:48,821 --> 00:23:50,182
or desired for each district,

533
00:23:50,482 --> 00:23:51,862
it would place all of those crimes,

534
00:23:52,222 --> 00:23:54,043
or in this case those jetpack crimes,

535
00:23:54,083 --> 00:23:57,304
and create all that markup for the actors and the bots.

536
00:24:00,264 --> 00:24:00,465
So.

537
00:24:01,338 --> 00:24:03,663
If we're going to procedurally author all that content

538
00:24:03,763 --> 00:24:06,008
with all those dependencies and have it be handcrafted,

539
00:24:06,489 --> 00:24:08,573
we need to figure this out and make a pipeline.

540
00:24:10,677 --> 00:24:13,699
So we have to think about that crime and vignettes are

541
00:24:13,779 --> 00:24:15,000
dependent on the environment.

542
00:24:15,160 --> 00:24:17,242
And changing a road or alley will

543
00:24:17,262 --> 00:24:19,784
affect contiguous blocks defined by those roads,

544
00:24:19,844 --> 00:24:22,246
and therefore everything in those tiles.

545
00:24:22,306 --> 00:24:23,767
So buildings, crimes, et cetera.

546
00:24:24,367 --> 00:24:25,948
And even changing, moving a crime

547
00:24:26,048 --> 00:24:29,591
can affect nine tiles, depending on its complexity,

548
00:24:30,051 --> 00:24:32,013
because crimes drive prop placement.

549
00:24:32,033 --> 00:24:32,793
We want to avoid.

550
00:24:34,054 --> 00:24:37,155
props or static props in the world where there's going to be a crime.

551
00:24:37,835 --> 00:24:42,377
And then changing a building will affect traversal, crimes again, lighting, and audio.

552
00:24:42,397 --> 00:24:43,577
Did I mention audio?

553
00:24:43,737 --> 00:24:44,958
Audio wants procedural help.

554
00:24:45,878 --> 00:24:51,760
So just to start with, audio, we generate some procedural systems to generate the reverb

555
00:24:51,800 --> 00:24:56,641
volumes for audio and also be able to distribute audio at appropriate locations throughout

556
00:24:56,681 --> 00:24:57,001
the city.

557
00:24:58,024 --> 00:25:00,846
And speaking of that, tomorrow, the auto team

558
00:25:00,886 --> 00:25:02,147
designing the bustling soundscape.

559
00:25:02,207 --> 00:25:03,829
So Alex and Blake will be presenting

560
00:25:04,429 --> 00:25:05,390
on audio for the game.

561
00:25:07,071 --> 00:25:10,674
Now back to our story and all of this stuff.

562
00:25:13,075 --> 00:25:13,936
That's a lot.

563
00:25:14,236 --> 00:25:16,158
A lot of procedural systems, a lot of rules,

564
00:25:16,178 --> 00:25:17,058
a lot of dependencies.

565
00:25:18,039 --> 00:25:18,920
So we need a plan.

566
00:25:18,940 --> 00:25:21,021
And that is to create a pipeline that

567
00:25:21,062 --> 00:25:23,363
completes procedural content in phases

568
00:25:23,784 --> 00:25:26,245
that we can iterate, approve, and lock content

569
00:25:26,406 --> 00:25:27,626
for all the hand crafting.

570
00:25:29,069 --> 00:25:31,691
Because we're going to go from this to this,

571
00:25:32,551 --> 00:25:34,153
it's just going to be a little more complicated.

572
00:25:36,294 --> 00:25:37,235
So we got Houdini.

573
00:25:37,355 --> 00:25:39,997
So although Houdini from SideFX Software

574
00:25:40,037 --> 00:25:42,259
is our main package of choice to develop and manage

575
00:25:42,279 --> 00:25:43,780
our procedural systems in production,

576
00:25:44,380 --> 00:25:45,681
the algorithms can be implemented

577
00:25:45,741 --> 00:25:46,782
in any software package.

578
00:25:47,162 --> 00:25:48,784
And in fact, we have plenty of code

579
00:25:49,124 --> 00:25:50,465
for generating procedural content

580
00:25:50,505 --> 00:25:53,787
that is independent of Houdini or any other third party DCC

581
00:25:53,827 --> 00:25:54,228
software.

582
00:25:55,288 --> 00:25:58,270
Now, here is a circa 2016 implementation

583
00:25:58,291 --> 00:26:00,932
of our open world pipeline involving procedural systems.

584
00:26:01,553 --> 00:26:03,234
And it's a very simplified diagram

585
00:26:03,254 --> 00:26:05,275
without every possible error or box,

586
00:26:05,395 --> 00:26:07,377
because it's just unreadable.

587
00:26:08,157 --> 00:26:10,018
And it's broken into roughly three phases.

588
00:26:10,479 --> 00:26:12,560
So in phase one, it's the main world layout,

589
00:26:12,640 --> 00:26:15,282
where predominantly designers place roads, rough out

590
00:26:15,322 --> 00:26:18,304
buildings to find park areas and mission spaces, and so forth.

591
00:26:19,084 --> 00:26:20,525
And then we move on to phase two,

592
00:26:20,565 --> 00:26:23,608
where the majority of procedural content is authored.

593
00:26:24,580 --> 00:26:27,063
And then finally, phase three, the polished stage

594
00:26:27,103 --> 00:26:29,346
where the procedural systems will just help finish the game.

595
00:26:30,127 --> 00:26:32,890
And let me quickly point out that imposters and lighting

596
00:26:32,911 --> 00:26:35,774
data are being calculated during every iteration of each phase.

597
00:26:36,194 --> 00:26:39,078
And during phase two and three, audio and UI data

598
00:26:39,278 --> 00:26:41,541
are also being procedurally generated as well,

599
00:26:41,581 --> 00:26:43,083
so that the game is always playable

600
00:26:43,123 --> 00:26:44,525
in its most updated state.

601
00:26:46,659 --> 00:26:47,680
So here's the first phase.

602
00:26:48,100 --> 00:26:50,142
The first step is designers layout curves

603
00:26:50,162 --> 00:26:50,962
to define the roads.

604
00:26:51,543 --> 00:26:54,005
Well, actually the very first version of the city

605
00:26:54,125 --> 00:26:57,147
was from an illustrator drawing of a map for our Manhattan.

606
00:26:57,548 --> 00:26:59,669
And the procedural system could ingest that image

607
00:26:59,989 --> 00:27:02,051
and then create the curves and polygon primitives

608
00:27:02,551 --> 00:27:03,332
in our editor.

609
00:27:04,928 --> 00:27:06,709
The procedural system would also randomly place

610
00:27:06,769 --> 00:27:09,470
rectangular box buildings in different zones

611
00:27:09,510 --> 00:27:11,590
to block out the city,

612
00:27:12,030 --> 00:27:13,751
and it would actually read color data

613
00:27:14,011 --> 00:27:16,212
that the designers put down in order to vary

614
00:27:16,292 --> 00:27:18,913
the range of building sizes for the different areas.

615
00:27:19,753 --> 00:27:21,554
So once they got that to a certain state,

616
00:27:21,874 --> 00:27:23,854
we were just gonna work just in the editor.

617
00:27:24,075 --> 00:27:26,235
So the designers would modify curves in the editor

618
00:27:26,535 --> 00:27:27,616
to redefine the roads.

619
00:27:28,583 --> 00:27:30,944
And they could specify road directions or dominant

620
00:27:30,964 --> 00:27:34,186
direction if it's a multi-lane bidirectional street.

621
00:27:35,207 --> 00:27:38,009
Road width, and the road width was from outside of sidewalk

622
00:27:38,029 --> 00:27:39,250
to outside of sidewalk.

623
00:27:39,750 --> 00:27:41,591
Street width is from curb to curb.

624
00:27:42,031 --> 00:27:45,854
They could alter curb height, lane configuration, and so on.

625
00:27:47,015 --> 00:27:50,477
So initially, only the main avenues were specified.

626
00:27:51,527 --> 00:27:53,088
And the procedural system automatically

627
00:27:53,128 --> 00:27:56,329
chose street sizes, directions, and lane layouts

628
00:27:56,389 --> 00:27:57,470
for all the rest of the streets.

629
00:27:57,930 --> 00:27:59,471
So we just told it something like, we

630
00:27:59,491 --> 00:28:01,913
want 70% of the streets to be one-way streets.

631
00:28:02,193 --> 00:28:04,694
And 70% of those should be one traffic lane

632
00:28:04,734 --> 00:28:05,795
with one parking lane.

633
00:28:06,175 --> 00:28:07,776
And then the system just went through the city

634
00:28:08,096 --> 00:28:09,697
to create workable traffic patterns.

635
00:28:10,198 --> 00:28:12,339
And we got those alternating one-way streets,

636
00:28:12,739 --> 00:28:13,580
as you might expect.

637
00:28:15,193 --> 00:28:16,913
But as time went on, the designers

638
00:28:17,013 --> 00:28:19,774
would specifically choose sizes and lane configurations

639
00:28:19,894 --> 00:28:21,354
for many of the streets to accommodate

640
00:28:21,654 --> 00:28:24,075
story and chases and such.

641
00:28:24,655 --> 00:28:27,595
But I would bet that most of the streets' sizes and directions

642
00:28:27,995 --> 00:28:29,215
are determined procedurally.

643
00:28:30,656 --> 00:28:32,476
So also to start, we had very few alleys.

644
00:28:32,796 --> 00:28:34,817
There were some blocks that designers

645
00:28:34,877 --> 00:28:36,597
knew they wanted to break up.

646
00:28:36,757 --> 00:28:38,497
But until we had buildings in place,

647
00:28:38,537 --> 00:28:41,298
it didn't really make sense to try to place alleys.

648
00:28:43,519 --> 00:28:45,462
So then, using those road curves,

649
00:28:45,542 --> 00:28:46,764
just like I kind of talked earlier,

650
00:28:46,784 --> 00:28:48,506
we procedurally generated the ground.

651
00:28:49,705 --> 00:28:50,386
less, just like that.

652
00:28:51,246 --> 00:28:53,146
So then the designers placed the perimeters

653
00:28:53,166 --> 00:28:55,167
to define the buildings in this first phase.

654
00:28:55,247 --> 00:28:57,428
So the rough elevations and profiles are created,

655
00:28:57,848 --> 00:29:00,169
and procedural systems can modularize the buildings

656
00:29:00,449 --> 00:29:02,149
using those basic architectural sets.

657
00:29:02,750 --> 00:29:04,350
And then it would apply the markup.

658
00:29:04,770 --> 00:29:06,791
So now designers could swing through the city

659
00:29:06,831 --> 00:29:07,911
and test out their space.

660
00:29:07,991 --> 00:29:11,733
So is swing traversal possible, is desired.

661
00:29:12,233 --> 00:29:14,013
Silhouettes and changing urban landscape

662
00:29:14,073 --> 00:29:15,654
lead you along the desired paths.

663
00:29:16,334 --> 00:29:18,636
Do we have the correct variety of density and shapes

664
00:29:18,796 --> 00:29:20,637
for the different districts and neighborhoods?

665
00:29:21,358 --> 00:29:22,698
So there was another talk here at GDC

666
00:29:22,718 --> 00:29:24,440
that actually went over all those decisions.

667
00:29:25,660 --> 00:29:28,062
The one thing to keep in mind is that this early in production,

668
00:29:28,602 --> 00:29:30,604
Spider-Man did not have his complete move

669
00:29:30,624 --> 00:29:34,106
set of web zipping and parkour or point launching.

670
00:29:34,506 --> 00:29:36,368
I mean, it was some pretty basic stuff.

671
00:29:36,408 --> 00:29:38,489
So we were trying to improve this layout

672
00:29:38,789 --> 00:29:40,070
with some limitations.

673
00:29:41,565 --> 00:29:43,446
So as we iterated in this first phase,

674
00:29:43,986 --> 00:29:47,428
there obviously should be an arrow back to road curves.

675
00:29:48,128 --> 00:29:51,269
And then also, as separate buildings

676
00:29:51,289 --> 00:29:53,630
were used to fill a block, the procedural system

677
00:29:53,650 --> 00:29:55,931
would automatically create the alley curves in between them.

678
00:29:56,572 --> 00:29:59,153
And you might ask, why do we actually need the alley curves,

679
00:30:00,033 --> 00:30:02,394
instead of just saying, well, the space between buildings

680
00:30:02,454 --> 00:30:02,994
is an alley.

681
00:30:03,515 --> 00:30:05,235
Well, again, some of them are drivable,

682
00:30:05,535 --> 00:30:06,836
used for crimes and chases.

683
00:30:07,016 --> 00:30:09,177
And they can be even used by regular vehicles,

684
00:30:09,197 --> 00:30:09,557
as well.

685
00:30:10,162 --> 00:30:13,964
Their street is blocked by a crime or a vignette.

686
00:30:14,965 --> 00:30:16,526
So they could take a detour down an alley.

687
00:30:17,726 --> 00:30:19,127
We would also use those curves to inform

688
00:30:19,147 --> 00:30:22,309
the procedural systems for changing the ground surface,

689
00:30:22,729 --> 00:30:25,150
props, lighting, audio needs, et cetera.

690
00:30:26,171 --> 00:30:28,072
So after this first phase, we should have the streets

691
00:30:28,132 --> 00:30:29,692
pretty much done and the rough buildings

692
00:30:29,793 --> 00:30:31,313
can drive our next phase.

693
00:30:33,237 --> 00:30:35,258
Phase two is where the bulk of the work

694
00:30:35,298 --> 00:30:36,659
for our procedural systems happen.

695
00:30:37,079 --> 00:30:39,140
And there should be arrows going from each block

696
00:30:39,180 --> 00:30:42,062
to any previous block, because any change based

697
00:30:42,122 --> 00:30:44,683
on a dependency requires some reauthoring upstream.

698
00:30:45,424 --> 00:30:46,764
Now remember, all of this is iterative,

699
00:30:47,225 --> 00:30:49,966
and as possible, if nothing is breaking the pipeline,

700
00:30:50,006 --> 00:30:51,827
we will generate everything in this phase

701
00:30:51,927 --> 00:30:55,930
based on all the changes to keep the game updated and playable.

702
00:30:57,314 --> 00:30:59,615
That last bullet is very important.

703
00:30:59,856 --> 00:31:03,017
It means that during this phase, artists and designers

704
00:31:03,237 --> 00:31:06,619
should not hand author anything that a procedural system

705
00:31:06,699 --> 00:31:07,180
generates.

706
00:31:08,180 --> 00:31:10,301
They must use the controllable parameters and inputs

707
00:31:10,682 --> 00:31:12,983
to the procedural system to affect change.

708
00:31:13,863 --> 00:31:16,065
If they don't, they're at the risk of losing work.

709
00:31:18,778 --> 00:31:21,880
So here is what we call the art polyline pass,

710
00:31:21,920 --> 00:31:23,821
and that's the opportunity for the environment artists

711
00:31:24,102 --> 00:31:26,183
to replace the primitives in the designer zones

712
00:31:26,503 --> 00:31:28,144
with multiple polygonal volumes

713
00:31:28,405 --> 00:31:30,046
to further define the shape of the building.

714
00:31:30,686 --> 00:31:35,710
And the artists could also specify the architectural sets

715
00:31:36,210 --> 00:31:37,651
that they wanted to use for the building.

716
00:31:39,372 --> 00:31:41,173
In this phase, the artists could also modify

717
00:31:41,213 --> 00:31:42,314
or delete the alley curves

718
00:31:42,454 --> 00:31:45,476
in saying that they didn't want a drivable alley there.

719
00:31:45,796 --> 00:31:47,317
And then we could recalculate the ground

720
00:31:48,795 --> 00:31:49,156
for them.

721
00:31:50,657 --> 00:31:52,819
And in reality, this diagram, this phase two

722
00:31:52,899 --> 00:31:55,181
represents two almost identical phases

723
00:31:55,541 --> 00:31:58,463
that we call the two stages of environment modularization

724
00:31:58,523 --> 00:31:58,904
passes.

725
00:31:59,804 --> 00:32:01,746
Now, iterations of the environment arts first

726
00:32:02,587 --> 00:32:05,409
modularization pass would yield the structures

727
00:32:05,529 --> 00:32:07,170
with their final layouts and shapes.

728
00:32:07,631 --> 00:32:09,492
But the architectural styles and propping

729
00:32:09,572 --> 00:32:12,254
could change in the next stage, the next round of phase two

730
00:32:12,575 --> 00:32:13,355
or phase three.

731
00:32:15,152 --> 00:32:17,077
Now after this phase, that we're, uh...

732
00:32:18,340 --> 00:32:20,541
We should have accurately, at the end of this phase,

733
00:32:20,581 --> 00:32:23,423
I guess, after the end of this first stage of phase two,

734
00:32:23,943 --> 00:32:25,884
we should have accurately placed and approved

735
00:32:25,904 --> 00:32:28,525
the pedestrians, traffic, vignettes, crimes, props.

736
00:32:29,045 --> 00:32:31,906
And accuracy is within the scope of our procedural system

737
00:32:31,946 --> 00:32:32,386
design.

738
00:32:32,786 --> 00:32:36,528
So the goal was 80% completion using procedural systems.

739
00:32:37,008 --> 00:32:39,369
So that means that 80% of procedural content

740
00:32:39,409 --> 00:32:41,990
would be ready to ship or completed to 80%

741
00:32:42,971 --> 00:32:46,052
so that art and design would have at most 20% of the work

742
00:32:46,332 --> 00:32:47,313
they would traditionally have.

743
00:32:48,301 --> 00:32:49,281
So that means it's something that

744
00:32:49,681 --> 00:32:51,642
used to be a week of artist time,

745
00:32:51,782 --> 00:32:54,383
should be a day of artist time, five weeks, one week.

746
00:32:55,343 --> 00:32:56,904
So what we're trying to do is generate content

747
00:32:56,944 --> 00:32:59,364
to rules and metrics and cull to ballpark,

748
00:32:59,424 --> 00:33:02,325
but not to final spec, because the manual polishing passes

749
00:33:02,365 --> 00:33:04,086
would take care of the final adjustments.

750
00:33:06,701 --> 00:33:10,444
So at this point, phase three, design has approved everything,

751
00:33:10,584 --> 00:33:13,206
and there's art sign-off after the second round of phase two,

752
00:33:13,727 --> 00:33:16,469
and every team is hand crafting their parts of the game.

753
00:33:16,889 --> 00:33:18,170
And the procedural assistants will just

754
00:33:18,310 --> 00:33:21,032
update things like markup, imposters, lighting, audio,

755
00:33:21,072 --> 00:33:21,513
et cetera.

756
00:33:22,473 --> 00:33:24,055
And there should be plenty of production time

757
00:33:24,295 --> 00:33:26,837
to develop procedural assistants to add any new traversal,

758
00:33:26,877 --> 00:33:28,578
or markup, or crimes, or vignettes.

759
00:33:29,038 --> 00:33:30,340
And then we can also start working

760
00:33:30,440 --> 00:33:33,362
on optimization and validation tools to improve performance

761
00:33:33,422 --> 00:33:34,343
and help find bugs.

762
00:33:36,614 --> 00:33:39,997
So this pipeline was created to work within a specific plan.

763
00:33:40,157 --> 00:33:42,459
And that plan is to develop the island uniformly

764
00:33:42,759 --> 00:33:44,900
through several stages of completion.

765
00:33:45,601 --> 00:33:48,023
And we need to lock the rough map layout and structures

766
00:33:48,063 --> 00:33:50,485
and define the key spaces before we

767
00:33:50,525 --> 00:33:51,726
can work through any detail.

768
00:33:52,166 --> 00:33:54,288
And so we've got to start with the island-wide systems.

769
00:33:55,349 --> 00:33:56,890
So again, we're going to finalize

770
00:33:57,150 --> 00:33:58,551
these roads in the map layout.

771
00:34:01,713 --> 00:34:04,175
So oh, this was, yeah.

772
00:34:06,017 --> 00:34:07,818
This was like a little clip showing the changes

773
00:34:07,878 --> 00:34:12,282
throughout the production, after pre-production.

774
00:34:12,302 --> 00:34:13,122
But it's OK.

775
00:34:13,142 --> 00:34:17,025
It's not that interesting.

776
00:34:17,626 --> 00:34:20,368
So the generated ground, then we'd

777
00:34:20,408 --> 00:34:22,670
have the generated grounds, which would find

778
00:34:22,690 --> 00:34:23,911
the key spaces and landmarks.

779
00:34:25,487 --> 00:34:27,848
So we're gonna work one district at a time,

780
00:34:28,308 --> 00:34:30,129
adding detail and iterating on dependencies

781
00:34:30,209 --> 00:34:31,810
within that district to bring it

782
00:34:31,850 --> 00:34:33,291
to the next level of completion.

783
00:34:33,691 --> 00:34:35,712
And that was fine in our pipeline design.

784
00:34:36,372 --> 00:34:37,732
So as long as we worked through the island

785
00:34:37,772 --> 00:34:41,034
district by district, maintaining uniform levels of polish,

786
00:34:41,374 --> 00:34:43,975
we could treat each district kind of as its own island.

787
00:34:44,635 --> 00:34:46,016
And because of the unique attributes

788
00:34:46,156 --> 00:34:48,037
and established boundary conditions for each district,

789
00:34:48,277 --> 00:34:50,558
we already were handling the shared edge tiles

790
00:34:50,698 --> 00:34:51,478
in a special way.

791
00:34:53,804 --> 00:34:56,567
So for example, here is Greenwich District

792
00:34:56,767 --> 00:34:58,690
in phase two, stage one.

793
00:34:59,050 --> 00:35:00,993
So at this point, we've gone through phase one,

794
00:35:01,013 --> 00:35:03,376
so we finalized the roadmap and the rough buildings

795
00:35:03,496 --> 00:35:05,599
to find the silhouettes and traversal spaces,

796
00:35:05,999 --> 00:35:07,441
and they've been converted into prefabs

797
00:35:07,481 --> 00:35:09,484
of instance architecture for the whole city.

798
00:35:10,084 --> 00:35:14,567
So now phase two, stage one, art does its first modularization pass.

799
00:35:14,867 --> 00:35:16,468
They finalize the shapes of the buildings.

800
00:35:17,069 --> 00:35:18,410
Artists are assigned neighborhoods.

801
00:35:18,890 --> 00:35:19,971
Each artist is assigned a neighborhood.

802
00:35:20,291 --> 00:35:21,992
They do their stuff, they work through the district.

803
00:35:22,332 --> 00:35:25,614
Then a district is a level completion where we can run our procedural systems

804
00:35:26,055 --> 00:35:27,856
to place the crimes, vignettes, and props.

805
00:35:28,096 --> 00:35:32,899
And art moves on to the other districts to do their first stage one of phase two.

806
00:35:35,006 --> 00:35:36,668
But we found as artists worked through the neighborhoods

807
00:35:36,708 --> 00:35:39,830
and districts, they needed to adjust roads and alleys

808
00:35:39,991 --> 00:35:41,072
for the character of the space.

809
00:35:41,692 --> 00:35:44,275
So the placement, direction, or size of a road or alley

810
00:35:44,315 --> 00:35:47,077
in one district will affect traffic flows

811
00:35:47,237 --> 00:35:48,138
for multiple districts.

812
00:35:48,198 --> 00:35:49,980
So we might have to change even more roads.

813
00:35:50,340 --> 00:35:52,122
So that leads to a domino effect of changes.

814
00:35:52,642 --> 00:35:53,964
And that brings us all the way back

815
00:35:54,004 --> 00:35:55,585
to block one of the flow chart.

816
00:35:57,881 --> 00:36:00,202
Also, due to different milestone missions,

817
00:36:00,262 --> 00:36:04,144
story development items, not only were different districts

818
00:36:04,204 --> 00:36:05,925
at different stages of completion,

819
00:36:06,225 --> 00:36:08,486
but one tile next to another tile,

820
00:36:08,966 --> 00:36:11,008
one could be in rough and one could be in polish.

821
00:36:11,968 --> 00:36:14,149
But in order to place our majority of our content,

822
00:36:14,569 --> 00:36:16,850
a tile has to be completed in environment's

823
00:36:17,171 --> 00:36:18,771
arts first modularization pass

824
00:36:19,152 --> 00:36:21,573
and gain several approvals, and that wasn't happening.

825
00:36:22,927 --> 00:36:25,769
So there was too much work here and not enough work here,

826
00:36:26,029 --> 00:36:29,351
and that smooth progression was upset for our development.

827
00:36:30,311 --> 00:36:31,752
Now it's not that the procedural systems

828
00:36:31,953 --> 00:36:33,313
couldn't regenerate the content,

829
00:36:33,714 --> 00:36:35,295
but manual work could be lost.

830
00:36:36,115 --> 00:36:38,257
So for example, adjusting an alley,

831
00:36:38,817 --> 00:36:41,219
just adjusting the alley width in one region

832
00:36:41,739 --> 00:36:43,180
could affect many surrounding tiles,

833
00:36:43,240 --> 00:36:45,221
such as the UV continuity around the block,

834
00:36:45,241 --> 00:36:46,942
because a block could span many tiles.

835
00:36:47,663 --> 00:36:50,465
Proper prop placement, proper prop placement?

836
00:36:50,845 --> 00:36:51,566
It's a tongue twister.

837
00:36:51,726 --> 00:36:53,548
Proper prop placement and the placement

838
00:36:53,568 --> 00:36:56,650
of crimes and vignettes in that alley or vicinity.

839
00:36:57,992 --> 00:36:59,393
I never messed that up when I was rehearsing.

840
00:37:01,154 --> 00:37:04,337
So that created a domino effect beyond what we imagined.

841
00:37:04,597 --> 00:37:07,120
Now, honestly, we or I, I expected

842
00:37:07,160 --> 00:37:10,262
it to happen at edge or coastal tiles where there was

843
00:37:10,322 --> 00:37:12,825
minimal gameplay content, and I knew those would

844
00:37:12,845 --> 00:37:14,166
get neglected and fall behind.

845
00:37:16,353 --> 00:37:19,095
So there were just a crazy amount of dependencies.

846
00:37:19,716 --> 00:37:22,678
Every tile's region's content is dependent

847
00:37:22,838 --> 00:37:25,200
on at least its neighbors, and best case,

848
00:37:25,240 --> 00:37:26,741
they're in production in parallel.

849
00:37:29,303 --> 00:37:31,165
So not only are districts being developed

850
00:37:31,185 --> 00:37:32,245
to the different levels of polish,

851
00:37:32,265 --> 00:37:33,907
but the individual tiles as well.

852
00:37:34,207 --> 00:37:39,511
And there was new content for dioramas, missions, demos,

853
00:37:39,571 --> 00:37:41,973
and other test areas that were all over the city.

854
00:37:43,054 --> 00:37:46,276
And so things like adding a median, marinas,

855
00:37:46,616 --> 00:37:48,857
more rooftop features, they required at least

856
00:37:49,097 --> 00:37:52,679
update of additional markup for the hero and bot support.

857
00:37:53,780 --> 00:37:56,961
And we also relocated several story-related locations.

858
00:37:57,442 --> 00:38:00,703
And I was personally a little bit stressed and frustrated

859
00:38:00,723 --> 00:38:03,505
that we kind of weren't sticking to the pipeline

860
00:38:03,525 --> 00:38:05,206
that we worked on.

861
00:38:06,967 --> 00:38:07,547
So what do we do?

862
00:38:08,906 --> 00:38:11,188
We get the leads together, and we figure it all out.

863
00:38:11,428 --> 00:38:12,689
Now, it didn't happen in a day.

864
00:38:13,450 --> 00:38:15,292
Several meetings on different topics

865
00:38:15,472 --> 00:38:18,735
with the right team members over several weeks, at least.

866
00:38:19,475 --> 00:38:21,637
And some growing pains were had by all.

867
00:38:22,738 --> 00:38:25,561
I mean, we needed to know the targets and goals for art,

868
00:38:25,641 --> 00:38:26,902
design, and gameplay.

869
00:38:27,783 --> 00:38:30,045
One of the main systems, the ground, buildings, et cetera,

870
00:38:30,065 --> 00:38:31,506
are going to be at a level of completion

871
00:38:31,786 --> 00:38:33,908
that we can move on to everything

872
00:38:33,948 --> 00:38:36,230
that all the other processes depend on them.

873
00:38:37,252 --> 00:38:39,452
And then when is work on a tile, neighborhood, or district

874
00:38:39,472 --> 00:38:42,253
going to be at a stage where additional polishing of the art,

875
00:38:42,353 --> 00:38:44,374
crimes, missions, et cetera, will not

876
00:38:44,414 --> 00:38:46,055
affect any downstream processes?

877
00:38:46,075 --> 00:38:48,596
Because then we can more confidently hand off

878
00:38:48,636 --> 00:38:50,056
work to the next procedural system

879
00:38:50,556 --> 00:38:52,917
with less fear of having to go back up the flow chart.

880
00:38:54,077 --> 00:38:56,358
And then at some point, we'll get to our final imposter's

881
00:38:56,398 --> 00:38:58,539
lighting, audio, and UI, and we'll be done.

882
00:39:01,044 --> 00:39:03,885
Speaking more about how we work as a team,

883
00:39:04,325 --> 00:39:06,586
Jason, our environment lead, has a talk tomorrow,

884
00:39:07,226 --> 00:39:09,287
Case Study in Empowering Your Artists.

885
00:39:12,128 --> 00:39:14,649
So, knowing what everyone needs to finish their work,

886
00:39:15,370 --> 00:39:17,611
we make a new plan for our procedural systems.

887
00:39:18,051 --> 00:39:19,972
And where possible, we branch the dependencies

888
00:39:20,012 --> 00:39:23,073
so that each tile region can be independently edited

889
00:39:23,113 --> 00:39:23,953
as much as possible.

890
00:39:24,900 --> 00:39:28,342
Then each procedural operation should be modularized

891
00:39:28,442 --> 00:39:29,663
based on its dependencies.

892
00:39:30,143 --> 00:39:31,924
So for example, traffic lights.

893
00:39:32,044 --> 00:39:34,085
Traffic lights are really only dependent on the roads

894
00:39:34,405 --> 00:39:35,725
and the sidewalk corners.

895
00:39:36,366 --> 00:39:39,107
Once we know a direction of a road and where the corner is,

896
00:39:39,167 --> 00:39:41,408
we know exactly where to place a traffic light.

897
00:39:41,968 --> 00:39:44,529
So at that point that we have all of its dependencies set,

898
00:39:45,130 --> 00:39:47,311
that's when traffic lights or anything

899
00:39:47,371 --> 00:39:48,791
with the same dependencies should

900
00:39:48,831 --> 00:39:50,312
be placed in that module.

901
00:39:51,012 --> 00:39:54,595
Mailboxes, for example, they have additional dependencies

902
00:39:54,635 --> 00:39:57,397
such as avoiding alleys, bus stops, crosswalks,

903
00:39:57,838 --> 00:39:58,418
things like that.

904
00:39:58,778 --> 00:40:00,480
So anything with those dependencies

905
00:40:00,560 --> 00:40:03,522
should be in its own placement model.

906
00:40:05,184 --> 00:40:05,724
Better rules.

907
00:40:06,084 --> 00:40:07,946
So we also need some better rules

908
00:40:08,126 --> 00:40:09,787
to catch the corner cases, always

909
00:40:09,847 --> 00:40:11,388
lots of special corner cases.

910
00:40:11,749 --> 00:40:13,050
We want to get these rules so we can

911
00:40:14,007 --> 00:40:16,328
definitely exclude the invalid content.

912
00:40:17,349 --> 00:40:19,770
Now, we don't need to be 100% accurate with our placement

913
00:40:19,810 --> 00:40:22,792
of content, since we know there will be hand crafting passes.

914
00:40:23,372 --> 00:40:25,293
But we do want to make sure that at least 100%

915
00:40:25,533 --> 00:40:29,115
of the planned procedural content is in the game.

916
00:40:29,655 --> 00:40:31,476
We will place things to metrics, and then we'll

917
00:40:31,536 --> 00:40:33,356
indicate assets that are in the ballpark,

918
00:40:33,636 --> 00:40:35,497
but with which we are less confident

919
00:40:35,917 --> 00:40:37,897
of their proper placement.

920
00:40:37,917 --> 00:40:41,318
Because it's easier to try to place these 160 crimes out

921
00:40:41,358 --> 00:40:43,718
there and know that every people have to adjust them and put them

922
00:40:43,738 --> 00:40:45,799
in the right spot, other than just saying,

923
00:40:45,859 --> 00:40:47,419
oh, I can only place 120 of them,

924
00:40:47,719 --> 00:40:50,039
and then relying on the artists and designers

925
00:40:50,139 --> 00:40:53,580
to count and remember that they have 40 more crimes they

926
00:40:53,600 --> 00:40:57,801
need to place, and placing them in the appropriate areas.

927
00:40:59,805 --> 00:41:02,227
So this system for verifying confidence of placement,

928
00:41:02,307 --> 00:41:03,909
it morphed into a validation system

929
00:41:04,009 --> 00:41:06,311
that was applied later to a lot more content,

930
00:41:06,351 --> 00:41:09,994
whether it was procedurally generated or not.

931
00:41:12,996 --> 00:41:14,838
So bringing order to the city.

932
00:41:14,878 --> 00:41:17,240
Bringing order means getting the teams on the same page.

933
00:41:17,676 --> 00:41:20,038
and as many contiguous tiles to the appropriate level

934
00:41:20,058 --> 00:41:22,219
of completion for our new modular process.

935
00:41:22,659 --> 00:41:25,401
So originally, each district was a set of contiguous tiles.

936
00:41:25,782 --> 00:41:27,323
Well, now it's like, I don't care.

937
00:41:27,383 --> 00:41:29,484
Just give me some contiguous tiles

938
00:41:29,924 --> 00:41:31,645
so we can work through this game.

939
00:41:32,746 --> 00:41:34,928
And the new procedural processes that

940
00:41:34,968 --> 00:41:36,409
preserve additional hand crafting

941
00:41:36,749 --> 00:41:39,031
would be interleaved with the artisan designer work.

942
00:41:39,791 --> 00:41:43,233
Now, that's easier said than done, but we got it done.

943
00:41:45,887 --> 00:41:47,507
Then came a few more challenges.

944
00:41:47,987 --> 00:41:51,888
So we had some wall crawl issues on some new assets,

945
00:41:51,928 --> 00:41:53,649
especially some of the new storefronts.

946
00:41:54,049 --> 00:41:56,390
So we needed some additional ledge path markup

947
00:41:56,690 --> 00:41:58,030
and wall crawl collision added.

948
00:41:58,390 --> 00:41:59,951
And it had to be added by the procedural system

949
00:42:00,011 --> 00:42:02,692
because it was particular to which buildings, kits,

950
00:42:02,772 --> 00:42:04,012
the storefronts were added to.

951
00:42:05,743 --> 00:42:07,924
Also a little bit late in production,

952
00:42:07,944 --> 00:42:09,825
a little bit late in production,

953
00:42:09,865 --> 00:42:11,425
we implemented the act system.

954
00:42:11,465 --> 00:42:14,387
So we knew that Spider-Man was gonna have these acts

955
00:42:14,547 --> 00:42:17,008
and different situations and times of day.

956
00:42:19,329 --> 00:42:21,610
But what was later in production

957
00:42:21,690 --> 00:42:24,311
when we created this system of overlay zones

958
00:42:24,351 --> 00:42:25,752
that would control the state of the world

959
00:42:25,792 --> 00:42:28,193
at different times of day or weather conditions

960
00:42:28,433 --> 00:42:29,373
or different acts.

961
00:42:30,751 --> 00:42:32,311
So that way stores could be open in the day,

962
00:42:32,391 --> 00:42:34,232
closed at night, closed during Act Three.

963
00:42:34,312 --> 00:42:36,332
There could be different groups of people out and about

964
00:42:36,412 --> 00:42:38,193
depending on these situations.

965
00:42:38,693 --> 00:42:40,253
And we could modify what was in the city

966
00:42:40,333 --> 00:42:42,634
in Act Two and Act Three, such as all the garbage

967
00:42:42,714 --> 00:42:44,014
and different vignettes.

968
00:42:45,014 --> 00:42:47,055
So that solution was proposed in October 2017.

969
00:42:47,135 --> 00:42:48,255
We designed it in December 2017.

970
00:42:48,295 --> 00:42:49,575
I went on holiday break.

971
00:42:49,595 --> 00:42:51,196
And then our implementation was completed in March of 2018.

972
00:42:59,911 --> 00:43:02,273
And then the content was complete, well,

973
00:43:02,433 --> 00:43:04,414
before we shipped later in the year.

974
00:43:05,915 --> 00:43:08,537
So there were also some late mission space updates

975
00:43:08,557 --> 00:43:10,559
that required reauthoring of art, traffic,

976
00:43:10,619 --> 00:43:13,161
and open world gameplay in several areas.

977
00:43:13,921 --> 00:43:17,164
And I was pretty happy with how the new systems handled it.

978
00:43:18,164 --> 00:43:19,725
And then did I mention we did audio?

979
00:43:20,758 --> 00:43:23,919
So we had to generate a bunch of custom audio collision models

980
00:43:24,239 --> 00:43:26,400
to match the visible textures that were

981
00:43:26,420 --> 00:43:27,801
being presented by a material.

982
00:43:28,581 --> 00:43:30,942
And that was significant in Central Park.

983
00:43:34,024 --> 00:43:35,824
So lessons learned.

984
00:43:37,025 --> 00:43:38,385
Wow, I've talked really fast.

985
00:43:39,926 --> 00:43:41,387
So we already knew this would be the case.

986
00:43:42,267 --> 00:43:44,848
A strict workflow is best, but we

987
00:43:44,888 --> 00:43:46,629
need flexibility for production.

988
00:43:47,658 --> 00:43:50,159
We want to lock procedurally generated elements

989
00:43:50,299 --> 00:43:52,821
with their dependencies as soon as possible.

990
00:43:53,341 --> 00:43:55,223
As soon as something's locked, we're done with it,

991
00:43:55,263 --> 00:43:55,943
we can move on.

992
00:43:56,683 --> 00:43:58,425
We also want to hierarchically modularize

993
00:43:58,445 --> 00:44:01,166
the procedurally generated content to reduce dependencies.

994
00:44:01,426 --> 00:44:02,587
So that's what I was talking about.

995
00:44:02,987 --> 00:44:03,908
the traffic light.

996
00:44:04,429 --> 00:44:07,352
Once we know the dependencies to place that traffic light

997
00:44:07,392 --> 00:44:09,314
or any other content that has the same dependencies,

998
00:44:09,794 --> 00:44:11,756
we want to do that, then we can use that

999
00:44:12,016 --> 00:44:14,539
as that might be a dependency for other props

1000
00:44:14,599 --> 00:44:16,280
or other content that would come later.

1001
00:44:16,741 --> 00:44:20,404
So modularizing it will reduce the number of dependencies.

1002
00:44:20,605 --> 00:44:23,748
If you have all the props in one module,

1003
00:44:24,088 --> 00:44:26,350
then you've got every possible dependency going in there.

1004
00:44:28,870 --> 00:44:32,232
You don't want to over-define the goals of our procedural system

1005
00:44:32,252 --> 00:44:32,652
modules.

1006
00:44:33,773 --> 00:44:35,955
Now, you don't need to create the perfect rules

1007
00:44:36,455 --> 00:44:37,296
to place something.

1008
00:44:37,716 --> 00:44:40,698
First, it takes a lot longer to make the perfect system.

1009
00:44:40,838 --> 00:44:42,360
I mean, I think it supposedly takes

1010
00:44:42,380 --> 00:44:44,221
an infinite amount of time to make the perfect system.

1011
00:44:45,723 --> 00:44:49,446
And then second, if you only place something with strict criteria,

1012
00:44:49,927 --> 00:44:53,250
you're not going to find that many locations that meet the criteria.

1013
00:44:53,310 --> 00:44:55,372
So again, it's like I was saying before,

1014
00:44:55,392 --> 00:44:58,174
it won't be out there in the world to be nudged into place.

1015
00:44:58,234 --> 00:45:00,576
It'll be something that will have to be hand added later,

1016
00:45:00,616 --> 00:45:02,218
which takes a lot more work.

1017
00:45:02,298 --> 00:45:04,560
So it's easier if something's there to say,

1018
00:45:04,740 --> 00:45:06,982
oh, I'm going to just nudge this to a good location.

1019
00:45:08,259 --> 00:45:13,161
Also, the perfect rules, or a lot of over-defining your goals

1020
00:45:13,321 --> 00:45:15,982
is increased constraints and constraints for dependencies.

1021
00:45:16,122 --> 00:45:18,103
And we're always trying to reduce dependencies

1022
00:45:18,143 --> 00:45:19,883
for each stage of procedural authoring,

1023
00:45:20,304 --> 00:45:22,084
because we know things are going to change.

1024
00:45:23,125 --> 00:45:26,546
So we want to have a limited number of dependencies,

1025
00:45:26,586 --> 00:45:28,026
so it's a limited number of changes.

1026
00:45:30,177 --> 00:45:33,359
Now we can create procedural systems that preserve manual work.

1027
00:45:33,679 --> 00:45:39,103
So once hand-authoring has begun, we want to change to a mode where proceduralism is

1028
00:45:39,924 --> 00:45:41,085
applied appropriately.

1029
00:45:41,505 --> 00:45:46,669
So whether it just maintains the hand-authored work, or it augments it or processes it in

1030
00:45:46,689 --> 00:45:47,129
another way.

1031
00:45:48,337 --> 00:45:51,018
Also, compound dependencies should be split

1032
00:45:51,218 --> 00:45:52,899
into separate processes.

1033
00:45:53,399 --> 00:45:56,341
Now, a compound dependency is when a single asset

1034
00:45:56,361 --> 00:45:58,622
has distinct sets of rules for placement

1035
00:45:59,142 --> 00:46:01,783
or has a significant level of branching in its rules.

1036
00:46:02,343 --> 00:46:05,325
So for example, say we have a crime that can be placed,

1037
00:46:05,345 --> 00:46:07,585
it needs to be placed, or can be placed on a road,

1038
00:46:07,686 --> 00:46:09,346
and we want to place it in the middle of a block

1039
00:46:09,386 --> 00:46:11,687
or in an intersection, and then we just orient it

1040
00:46:11,707 --> 00:46:14,128
with traffic, but then also that same crime

1041
00:46:14,228 --> 00:46:15,649
can be placed on top of a rooftop.

1042
00:46:16,149 --> 00:46:18,771
Well, we don't want to have all the rules for placing that.

1043
00:46:18,931 --> 00:46:20,912
We don't want all the rules for placing that crime in one

1044
00:46:20,952 --> 00:46:21,352
module.

1045
00:46:21,693 --> 00:46:22,653
We should separate it out.

1046
00:46:22,713 --> 00:46:25,195
So OK, once we have the road dependencies,

1047
00:46:25,435 --> 00:46:27,176
we'll place those crimes with that there.

1048
00:46:27,316 --> 00:46:28,977
And then once we get to the point

1049
00:46:28,997 --> 00:46:30,098
where we have the billing dependencies,

1050
00:46:30,258 --> 00:46:33,139
we'll place that same crime based on those rules.

1051
00:46:33,360 --> 00:46:35,381
So those are the compound dependencies.

1052
00:46:36,745 --> 00:46:38,146
And then again, compound dependencies,

1053
00:46:38,446 --> 00:46:41,128
they limit your options for a single asset

1054
00:46:41,308 --> 00:46:44,810
and will increase dependencies for all the assets.

1055
00:46:44,870 --> 00:46:46,090
If you have compound dependencies

1056
00:46:46,590 --> 00:46:48,852
in this big network, then it's going

1057
00:46:48,872 --> 00:46:53,374
to create unneeded dependencies for the neighbors.

1058
00:46:55,845 --> 00:46:57,445
We want to tag procedural content.

1059
00:46:57,485 --> 00:46:58,666
Well, we want to tag everything.

1060
00:46:59,006 --> 00:47:00,746
But knowing if something is procedural

1061
00:47:01,106 --> 00:47:03,607
means you can confidently regenerate it again and again

1062
00:47:03,687 --> 00:47:05,308
without destroying any manual work.

1063
00:47:06,008 --> 00:47:07,288
Now, this can be a little bit tricky

1064
00:47:07,769 --> 00:47:10,729
since an incorrect workflow can allow an artist to prop out

1065
00:47:11,110 --> 00:47:13,690
around a procedurally placed instance

1066
00:47:14,231 --> 00:47:16,992
without creating any indication of the dependency.

1067
00:47:17,994 --> 00:47:20,316
So for example, an artist can augment

1068
00:47:20,516 --> 00:47:22,117
a procedurally placed vendor cart,

1069
00:47:22,497 --> 00:47:24,498
and they put additional items that are outside

1070
00:47:24,518 --> 00:47:25,419
of the proper hierarchy.

1071
00:47:26,119 --> 00:47:28,461
So the procedural system has no knowledge

1072
00:47:28,561 --> 00:47:30,442
of any of those additions, and so if it decides,

1073
00:47:30,462 --> 00:47:31,863
oh, I'm gonna move this vendor over here,

1074
00:47:31,883 --> 00:47:34,485
it's a better location, well, you might end up

1075
00:47:34,525 --> 00:47:37,087
with floating soda cans and pretzels in that spot,

1076
00:47:37,327 --> 00:47:38,768
because they're not within the correct hierarchy.

1077
00:47:39,248 --> 00:47:41,630
So that particular simple case didn't happen,

1078
00:47:41,670 --> 00:47:43,611
but there were some similar cases.

1079
00:47:44,525 --> 00:47:47,025
Also, knowing if something is completely procedurally

1080
00:47:47,165 --> 00:47:50,126
authored means that it might benefit from some handcrafting.

1081
00:47:50,306 --> 00:47:53,067
So it's like, oh, that's just in its procedurally generated

1082
00:47:53,087 --> 00:47:53,287
state.

1083
00:47:53,507 --> 00:47:59,488
Let's see if I can customize it to its specific location.

1084
00:48:02,129 --> 00:48:05,230
We want to procedurally validate as much content as possible.

1085
00:48:07,533 --> 00:48:09,893
We want to find content that is not placed

1086
00:48:10,013 --> 00:48:11,074
as metrics would dictate.

1087
00:48:11,314 --> 00:48:14,074
So for example, a spawn point is inside of a building that

1088
00:48:14,134 --> 00:48:15,175
doesn't have an interior.

1089
00:48:15,875 --> 00:48:18,135
So we want to delete, nudge, or modify automatically

1090
00:48:18,335 --> 00:48:20,336
only when we're absolutely certain of the result.

1091
00:48:20,496 --> 00:48:23,957
So if that spawner is no longer usable in any way,

1092
00:48:24,697 --> 00:48:25,557
we know we can delete it.

1093
00:48:26,117 --> 00:48:28,198
But if it could be usable outside of the building,

1094
00:48:28,558 --> 00:48:31,539
we'll try to adjust its position as defined in our system's

1095
00:48:31,899 --> 00:48:32,599
rule knowledge.

1096
00:48:33,499 --> 00:48:37,706
And then if we can't be confident of that procedural adjustment, we need to indicate

1097
00:48:37,726 --> 00:48:42,013
the possible issue for the artists and designers so that they can make the decision.

1098
00:48:43,362 --> 00:48:45,523
Now, what we did for many of those cases for dynamic

1099
00:48:45,563 --> 00:48:47,664
elements is we put those assets in a state

1100
00:48:47,944 --> 00:48:49,724
where they would not build or spawn

1101
00:48:49,965 --> 00:48:52,426
unless someone got around to hand modifying them.

1102
00:48:53,106 --> 00:48:56,287
So later in production, the procedural system

1103
00:48:56,307 --> 00:48:58,468
was a lot smarter about placing all the breakables

1104
00:48:58,508 --> 00:49:01,049
and throwables for crimes, as we had to do it over and over

1105
00:49:01,090 --> 00:49:01,530
and over again.

1106
00:49:01,990 --> 00:49:03,310
So the procedural systems were actually

1107
00:49:03,351 --> 00:49:04,311
doing a lot of that work.

1108
00:49:04,791 --> 00:49:06,252
And we would put those assets that we

1109
00:49:06,312 --> 00:49:09,813
couldn't find a proper location for in this state.

1110
00:49:12,757 --> 00:49:17,203
So we learned a lot of things that we can do better.

1111
00:49:17,484 --> 00:49:21,029
And this afternoon, Elon has a technical post-mortem.

1112
00:49:22,231 --> 00:49:24,433
But overall, I think we were satisfied.

1113
00:49:24,453 --> 00:49:26,915
So repeating myself, the original goal

1114
00:49:26,955 --> 00:49:29,797
was 80% of procedural content would be ready to ship

1115
00:49:30,337 --> 00:49:32,819
or completed to 80% so that art and design would

1116
00:49:32,839 --> 00:49:35,662
have at most 20% of the work they would traditionally have.

1117
00:49:36,382 --> 00:49:40,265
Now we exceeded those 80% goals, but all that additional time

1118
00:49:40,305 --> 00:49:43,308
went into additional iterations and additional handcrafting

1119
00:49:43,468 --> 00:49:45,510
of content and polish.

1120
00:49:45,670 --> 00:49:49,673
There was no leisure time trying to get this out the door.

1121
00:49:50,534 --> 00:49:54,458
So now that you know about the dependencies and what has to happen when we change the ground,

1122
00:49:54,999 --> 00:49:58,443
I'll tell you that that road curve zone was locked in late January 2018.

1123
00:49:58,944 --> 00:50:03,890
And the last procedural change to the ground occurred in late June 2018,

1124
00:50:04,511 --> 00:50:09,377
a little over two months before you could get the game in stores.

1125
00:50:11,489 --> 00:50:12,870
I'd like to thank you all for coming.

1126
00:50:13,011 --> 00:50:15,173
I really talk fast, so there'll be lots of times for questions.

1127
00:50:16,174 --> 00:50:18,876
Thanks, Sony Interactive, Sony PlayStation, Marvel Games,

1128
00:50:18,936 --> 00:50:21,298
SideFX Software, Jeff, Hannah, my advisor,

1129
00:50:21,478 --> 00:50:26,883
and everyone at Insomniac Games for making

1130
00:50:26,903 --> 00:50:29,526
this such a great experience, a great adventure.

1131
00:50:30,407 --> 00:50:32,389
And now I will open it up to questions.

1132
00:50:32,509 --> 00:50:34,811
So there's microphones on either side.

1133
00:50:34,831 --> 00:50:35,011
All right.

1134
00:50:47,531 --> 00:50:49,394
I can throw up those job openings if you like.

1135
00:50:51,037 --> 00:50:51,337
Hello.

1136
00:50:51,678 --> 00:50:52,379
OK.

1137
00:50:53,220 --> 00:50:57,026
I worked on We Happy Few, and we have a procedural system,

1138
00:50:57,266 --> 00:51:00,652
a much smaller system, but with similar structure.

1139
00:51:01,731 --> 00:51:08,476
And one of the problems we met is communicating with the artists the consequences of a change

1140
00:51:09,217 --> 00:51:16,242
into a handmade tile, because there are clearly, as you said, dependencies between a handmade tile

1141
00:51:16,482 --> 00:51:18,904
and the procedural generation around it.

1142
00:51:19,525 --> 00:51:23,567
It was really hard for them to imagine all the consequences of simple change.

1143
00:51:24,628 --> 00:51:31,071
So my question is, how did you explain what could be the possible consequences?

1144
00:51:31,131 --> 00:51:34,853
Because Houdini is not that simple, it's a complex pipeline.

1145
00:51:37,100 --> 00:51:44,044
Well, so at first, you know, there's always a little hesitancy for the artist to give

1146
00:51:44,124 --> 00:51:49,146
up this generating of, you know, authoring their buildings, you know, they want to make

1147
00:51:49,166 --> 00:51:49,586
their buildings.

1148
00:51:50,127 --> 00:51:53,008
But as soon as they saw that they could just change the shape and then boom, and it would

1149
00:51:53,068 --> 00:51:56,910
instance all the stuff for them, they're like, oh, oh, I like this, I like this.

1150
00:51:56,970 --> 00:51:58,371
So they, I mean.

1151
00:51:58,871 --> 00:52:00,892
Sure, there were some bumps in the road,

1152
00:52:01,192 --> 00:52:02,793
but they started liking that they would just

1153
00:52:02,813 --> 00:52:05,174
do their polyline work and get the structure they wanted,

1154
00:52:05,254 --> 00:52:07,676
and they could instance geometry, they could test it,

1155
00:52:07,696 --> 00:52:11,658
it could go through the whole pipeline.

1156
00:52:11,678 --> 00:52:12,338
And then later on.

1157
00:52:16,670 --> 00:52:18,770
I mean, it took a little bit, but they had to,

1158
00:52:18,890 --> 00:52:22,091
they did have to learn and kind of trial and error

1159
00:52:22,491 --> 00:52:23,792
as far as what they could change

1160
00:52:23,832 --> 00:52:24,892
and what they shouldn't change,

1161
00:52:24,972 --> 00:52:27,653
what could be preserved and what wouldn't be preserved,

1162
00:52:27,713 --> 00:52:30,013
different things about how to, it just,

1163
00:52:30,713 --> 00:52:32,594
I mean, it's particular to your pipeline,

1164
00:52:32,634 --> 00:52:35,555
but how you do overrides, so what things could be override,

1165
00:52:35,615 --> 00:52:36,915
what things can't be overridden,

1166
00:52:37,575 --> 00:52:39,836
just all those little details of the dependencies

1167
00:52:39,876 --> 00:52:41,676
in the hierarchy in your data structure.

1168
00:52:43,877 --> 00:52:45,458
just things that have to learn.

1169
00:52:45,518 --> 00:52:50,121
And I mean, we had a small team, so a really small team.

1170
00:52:50,461 --> 00:52:52,662
So getting everybody up to speed,

1171
00:52:52,682 --> 00:52:54,684
especially for the open world, it was.

1172
00:52:56,445 --> 00:52:59,127
Overall, not that challenging.

1173
00:52:59,267 --> 00:53:02,269
I mean, we just had lots and lots and lots of iterations.

1174
00:53:02,369 --> 00:53:05,051
And they learned when they should just stay

1175
00:53:05,091 --> 00:53:06,172
with the procedural systems

1176
00:53:06,292 --> 00:53:07,353
and when they're gonna cut it off.

1177
00:53:07,433 --> 00:53:09,574
So sometimes at some points, right,

1178
00:53:09,594 --> 00:53:11,015
they would just say, I'm cutting this off

1179
00:53:11,035 --> 00:53:12,356
from procedural systems at all.

1180
00:53:12,897 --> 00:53:14,818
And I'm saying, and our system would say, okay, fine.

1181
00:53:15,118 --> 00:53:17,160
And you, that means you have to do everything.

1182
00:53:17,840 --> 00:53:18,701
And that would be fine.

1183
00:53:19,141 --> 00:53:19,982
Okay, thank you.

1184
00:53:20,202 --> 00:53:21,443
Yeah, you're welcome.

1185
00:53:22,230 --> 00:53:27,293
There is so much going on in that city and I can see from your talk that you used impostors

1186
00:53:27,333 --> 00:53:33,336
and you used lot systems, but I've noticed that your buildings are made of different blocks

1187
00:53:33,616 --> 00:53:40,039
and as you go through the city they change LODs of like small pieces,

1188
00:53:40,099 --> 00:53:43,140
not the whole building all together sometimes. And I'm just wondering...

1189
00:53:44,691 --> 00:53:46,733
How did you manage having so many objects?

1190
00:53:47,073 --> 00:53:49,175
And what are the decisions you had to make

1191
00:53:49,215 --> 00:53:52,298
to make the procedural system handle so many objects

1192
00:53:52,498 --> 00:53:53,399
in a performant way?

1193
00:53:53,419 --> 00:53:56,801
Oh, well, for the procedural system, every building,

1194
00:53:56,822 --> 00:53:59,484
there were only certain building sets, building kits,

1195
00:53:59,724 --> 00:54:01,826
that would be used by the procedural system

1196
00:54:01,846 --> 00:54:03,327
when it was originally authoring the city.

1197
00:54:03,828 --> 00:54:07,130
And each of those building kits had required pieces, right?

1198
00:54:08,175 --> 00:54:11,039
And all that stuff, the artists, environment artists,

1199
00:54:11,059 --> 00:54:12,220
designed the building kits.

1200
00:54:12,361 --> 00:54:15,244
And then they would export an entire building kit at a time.

1201
00:54:15,845 --> 00:54:18,509
And the appropriate pieces would be put into the procedural

1202
00:54:18,869 --> 00:54:19,811
system's library.

1203
00:54:20,171 --> 00:54:21,713
But then they had all these auxiliary pieces

1204
00:54:21,753 --> 00:54:23,616
they could use later when they wanted to polish it.

1205
00:54:24,457 --> 00:54:29,742
So as far as the procedural system, it knew about a certain set of pieces with different

1206
00:54:29,762 --> 00:54:31,443
architectural styles, but it didn't.

1207
00:54:31,764 --> 00:54:35,607
It had no other knowledge other than their dimensions and if there were special offsets

1208
00:54:35,647 --> 00:54:36,308
or things like that.

1209
00:54:36,728 --> 00:54:40,392
And then it would just, based on metrics, you know, place them on.

1210
00:54:40,472 --> 00:54:44,315
So the procedural system didn't have that much knowledge.

1211
00:54:44,776 --> 00:54:45,616
And then later on.

1212
00:54:47,800 --> 00:54:50,761
When they did things by hand, they could actually kind of,

1213
00:54:50,941 --> 00:54:53,242
they can quickly replace architectural styles on their own

1214
00:54:53,282 --> 00:54:55,543
or put custom pieces or things in themselves.

1215
00:54:56,043 --> 00:54:58,564
Now as far as all the content in the game, how we,

1216
00:54:59,964 --> 00:55:01,925
it was a lot of content in the game.

1217
00:55:01,965 --> 00:55:03,966
I don't know if there's anything else to your question

1218
00:55:04,006 --> 00:55:05,806
about how we managed all those models.

1219
00:55:05,846 --> 00:55:08,167
I mean, everything had LODs, and that was,

1220
00:55:08,327 --> 00:55:10,208
there was all these requirements to how you would

1221
00:55:10,248 --> 00:55:11,168
have to author everything.

1222
00:55:12,998 --> 00:55:14,718
I guess one thing with the imposter system.

1223
00:55:15,178 --> 00:55:20,559
So the imposter system could actually see an invisible LOD

1224
00:55:20,719 --> 00:55:22,680
in the model if it was available.

1225
00:55:22,720 --> 00:55:25,360
So if there was a possible lower resolution state

1226
00:55:25,700 --> 00:55:28,320
that we didn't want to be in a standard LOD,

1227
00:55:28,681 --> 00:55:31,781
we created a special one that the imposter system would see

1228
00:55:32,001 --> 00:55:34,402
so that when we took those prefabs of buildings

1229
00:55:34,762 --> 00:55:36,882
and simplified them to make a single model,

1230
00:55:37,182 --> 00:55:39,542
we would use that even more simplified geometry.

1231
00:55:39,562 --> 00:55:41,483
Thank you.

1232
00:55:42,638 --> 00:55:45,459
Hi, great talk, great game by the way, thank you very much.

1233
00:55:45,479 --> 00:55:48,400
I wanted to ask about the iteration time.

1234
00:55:49,440 --> 00:55:52,081
Like how long did it take to regenerate all the city?

1235
00:55:52,121 --> 00:55:56,223
How long did it take to regenerate like one block

1236
00:55:56,283 --> 00:55:57,043
or one area?

1237
00:55:57,443 --> 00:56:00,744
And were you able to do it runtime?

1238
00:56:01,385 --> 00:56:03,365
For example, in the editor, generate and see

1239
00:56:03,405 --> 00:56:05,746
immediately change, or did you have to reload the editor,

1240
00:56:05,766 --> 00:56:06,347
reload the game?

1241
00:56:06,927 --> 00:56:08,967
The artists had tools in the editor that they could,

1242
00:56:09,148 --> 00:56:10,988
if they did a new polyline of a building,

1243
00:56:11,008 --> 00:56:12,509
they could say regenerate this building

1244
00:56:12,549 --> 00:56:14,649
and regenerate the building or regenerate the imposter.

1245
00:56:14,890 --> 00:56:16,590
There were some things that they could do.

1246
00:56:16,950 --> 00:56:17,791
It wasn't like real time.

1247
00:56:17,831 --> 00:56:19,571
It would have to get processed in the background

1248
00:56:19,591 --> 00:56:20,772
and then it would pop in for them.

1249
00:56:20,912 --> 00:56:23,153
So it took a minute or something.

1250
00:56:24,113 --> 00:56:24,893
But most of the stuff,

1251
00:56:24,913 --> 00:56:26,354
they would get it to a certain completion

1252
00:56:26,374 --> 00:56:28,274
and then it would run through the whole procedural system

1253
00:56:28,454 --> 00:56:31,275
at some point just because there's so many dependencies.

1254
00:56:31,455 --> 00:56:34,196
And then you don't know who has what checked out.

1255
00:56:34,697 --> 00:56:35,557
So there's.

1256
00:56:36,543 --> 00:56:38,446
And there's a whole thing with permissions

1257
00:56:38,546 --> 00:56:41,390
and when you can run changes and when you can check things out.

1258
00:56:42,551 --> 00:56:43,492
Yeah, I'm forgetting.

1259
00:56:43,532 --> 00:56:44,333
I want to forget about that.

1260
00:56:45,575 --> 00:56:51,363
But we could actually regenerate the entire open world

1261
00:56:51,543 --> 00:56:51,944
overnight.

1262
00:56:52,993 --> 00:56:57,236
And in the early in production we were, because there were so many rapid changes.

1263
00:56:59,518 --> 00:57:00,038
Let's see.

1264
00:57:00,198 --> 00:57:05,602
So the ground system, it would first process to create a sparse set of data that would

1265
00:57:05,642 --> 00:57:10,987
actually describe what the UV continuity needed to be and where the materials were defined.

1266
00:57:11,407 --> 00:57:15,470
I don't know if you noticed, but every single district has different materials for its asphalt

1267
00:57:15,510 --> 00:57:16,471
and for its sidewalks.

1268
00:57:18,687 --> 00:57:19,188
That's fun.

1269
00:57:20,789 --> 00:57:24,671
And so all that stuff, there was a pre-processing time

1270
00:57:25,011 --> 00:57:28,272
of about an hour to create that sparse set of data.

1271
00:57:28,753 --> 00:57:33,035
And then each tile itself, about 16 models per ground tile,

1272
00:57:33,535 --> 00:57:36,156
would take, just for doing the ground

1273
00:57:36,216 --> 00:57:40,158
and creating the associated data that other steps would need,

1274
00:57:40,659 --> 00:57:42,419
took about a couple minutes a tile.

1275
00:57:43,392 --> 00:57:47,575
But if we ran it all together, so that's about five hours

1276
00:57:47,675 --> 00:57:49,577
or generation or so.

1277
00:57:50,177 --> 00:57:52,159
But overnight, it was not.

1278
00:57:52,179 --> 00:57:53,940
But then all the other processes,

1279
00:57:54,160 --> 00:57:56,302
pretty much to process things around the whole city,

1280
00:57:56,802 --> 00:57:59,044
like to do a processing pass of saying a crime placement

1281
00:57:59,064 --> 00:58:00,645
or things like that was 25 minutes.

1282
00:58:01,326 --> 00:58:02,086
Not bad.

1283
00:58:02,286 --> 00:58:04,948
So every time you would do something worldwide,

1284
00:58:05,009 --> 00:58:06,390
I mean, I would probably, everything

1285
00:58:06,430 --> 00:58:07,170
has all of its dependencies.

1286
00:58:07,270 --> 00:58:08,831
So processing the whole world for something,

1287
00:58:08,851 --> 00:58:11,473
probably about 25 minutes as far as a placement pass.

1288
00:58:11,794 --> 00:58:12,234
OK, thank you.

1289
00:58:14,751 --> 00:58:16,892
One of my questions is the same, so it's good.

1290
00:58:16,952 --> 00:58:18,052
Question about your tile states.

1291
00:58:18,492 --> 00:58:21,754
So you have probably, I'd say you have different acts

1292
00:58:21,794 --> 00:58:23,754
and things like that, so tiles could be in different states.

1293
00:58:25,075 --> 00:58:26,375
How did you solve this with imposters?

1294
00:58:26,395 --> 00:58:28,836
Do you have multiple imposters as well for your?

1295
00:58:29,276 --> 00:58:32,398
No, no, it's just one set of imposters.

1296
00:58:33,178 --> 00:58:35,519
And we had this thing that we calculated lighting

1297
00:58:35,559 --> 00:58:38,100
at a distance, so there actually really was some lighting

1298
00:58:38,280 --> 00:58:40,681
out there that would light those imposters based on.

1299
00:58:42,965 --> 00:58:44,984
the captured probes and such.

1300
00:58:45,663 --> 00:58:48,465
And memory footprints, was it also taken into account

1301
00:58:48,485 --> 00:58:49,726
when you placed things?

1302
00:58:49,946 --> 00:58:51,268
So that's the thing.

1303
00:58:51,288 --> 00:58:53,229
The impostors were put into the zones

1304
00:58:53,289 --> 00:58:55,151
in order to preserve appropriate memory footprints.

1305
00:58:55,491 --> 00:58:58,253
Because we were, it gets technical,

1306
00:58:58,513 --> 00:59:00,495
we were making sure that we were stacking these things

1307
00:59:00,575 --> 00:59:02,657
tightly next to each other in one location in memory

1308
00:59:02,897 --> 00:59:04,018
so we could have them all in.

1309
00:59:04,458 --> 00:59:06,800
Then all of a sudden you go to an instance interior

1310
00:59:06,840 --> 00:59:07,441
and they're gone.

1311
00:59:08,562 --> 00:59:10,123
But say you're an instance interior

1312
00:59:10,143 --> 00:59:11,224
that has a view out the window,

1313
00:59:11,544 --> 00:59:13,586
then certain of those impostor zones that are visible

1314
00:59:13,626 --> 00:59:14,747
have to be on, right?

1315
00:59:14,867 --> 00:59:15,027
So.

1316
00:59:15,668 --> 00:59:17,952
All that stuff was how we packed them.

1317
00:59:18,664 --> 00:59:22,166
And when you had a tile for a tile lot, did you, for example,

1318
00:59:22,186 --> 00:59:25,067
had a fixed budget of memory you could use for a certain tile

1319
00:59:25,087 --> 00:59:25,828
to place things?

1320
00:59:27,248 --> 00:59:30,650
So yeah, every artist knows their tile budget for stuff.

1321
00:59:30,850 --> 00:59:33,051
I mean, at the end of the game, they've

1322
00:59:33,071 --> 00:59:34,532
got it up as they're doing stuff.

1323
00:59:34,572 --> 00:59:36,873
And they go like, oh no, what am I going to take out?

1324
00:59:37,673 --> 00:59:41,275
So and then the procedural systems,

1325
00:59:41,335 --> 00:59:44,577
as I would process things, I mean, we optimize lots of things.

1326
00:59:45,977 --> 00:59:48,279
optimizing LODs, optimizing collision.

1327
00:59:48,299 --> 00:59:52,061
Yeah, there's just a lot of things we tried to do.

1328
00:59:52,081 --> 00:59:53,321
So every tile had a fixed budget.

1329
00:59:53,942 --> 00:59:57,384
Every tile has a fixed budget until we break

1330
00:59:57,404 --> 00:59:58,464
the rules for some reason.

1331
00:59:58,484 --> 01:00:00,445
Yes, because the nile next to it has a little bit less.

1332
01:00:00,485 --> 01:00:01,346
You can take a little bit more.

1333
01:00:01,966 --> 01:00:03,947
No, no, we didn't treat it that way.

1334
01:00:04,027 --> 01:00:06,529
It's only if this has to be in this tile,

1335
01:00:06,589 --> 01:00:09,190
because a lot of gameplay actually depends on this,

1336
01:00:09,250 --> 01:00:11,351
and the open world has to be in this particular state.

1337
01:00:11,812 --> 01:00:12,492
OK, thank you.

1338
01:00:12,692 --> 01:00:12,812
Yeah.

1339
01:00:15,047 --> 01:00:20,649
Hi, my question was related to something that you just brought up in the previous question

1340
01:00:20,749 --> 01:00:25,571
about the file locking and working between different artists.

1341
01:00:26,631 --> 01:00:30,733
You know, kind of run into that as soon as you start to scale, you have these problems

1342
01:00:30,793 --> 01:00:31,833
between authoring assets.

1343
01:00:31,853 --> 01:00:36,315
And then as soon as you introduce a process of procedural generation there, my head's

1344
01:00:36,335 --> 01:00:36,955
kind of spinning.

1345
01:00:37,035 --> 01:00:37,175
So.

1346
01:00:38,376 --> 01:00:42,499
Just my question around that, what was your process for coordinating all that together?

1347
01:00:42,519 --> 01:00:52,747
And are you also on top of that, do you have kind of like a meta tool that is over the top of all these processes

1348
01:00:52,988 --> 01:00:58,732
and tools that you use to coordinate between people? Or was it just knowledge of the process?

1349
01:00:58,932 --> 01:01:00,894
I message them and say, let go of that tile.

1350
01:01:01,055 --> 01:01:01,275
No.

1351
01:01:01,555 --> 01:01:02,896
Yeah, that's what I was wondering.

1352
01:01:02,916 --> 01:01:03,437
No, no.

1353
01:01:03,617 --> 01:01:05,019
Well, there was some of that.

1354
01:01:05,519 --> 01:01:09,063
But no, we generated all sorts of data caches

1355
01:01:09,784 --> 01:01:12,126
based on the state of the world at different.

1356
01:01:13,158 --> 01:01:14,178
pretty much every day.

1357
01:01:15,219 --> 01:01:16,820
So people are supposed to check in their stuff

1358
01:01:16,840 --> 01:01:17,440
when they go home.

1359
01:01:18,181 --> 01:01:21,402
And whether they did or not, because we actually

1360
01:01:21,603 --> 01:01:24,644
grabbed that data per tile, we would just,

1361
01:01:24,684 --> 01:01:27,126
this is the latest state of the tile as it's checked in,

1362
01:01:27,706 --> 01:01:30,327
and then we would create that cache data.

1363
01:01:31,048 --> 01:01:32,729
I mean, so x-rays here.

1364
01:01:33,029 --> 01:01:34,450
But we would create that, you know,

1365
01:01:35,050 --> 01:01:37,151
we could do it every day, but as often as we needed

1366
01:01:37,171 --> 01:01:39,933
to have an updated state to run the processes we needed.

1367
01:01:41,154 --> 01:01:45,099
But as far as perforce and checking dependencies

1368
01:01:45,159 --> 01:01:48,303
or having a watch daemon that's checking to see,

1369
01:01:48,343 --> 01:01:49,444
is this ready for me to go?

1370
01:01:50,566 --> 01:01:52,949
It's just people were supposed to be done

1371
01:01:52,969 --> 01:01:55,092
at certain amounts of time, and then the processing

1372
01:01:55,112 --> 01:01:55,652
would happen.

1373
01:01:55,692 --> 01:01:57,895
And if they weren't, well, because at the end

1374
01:01:57,935 --> 01:01:58,817
of the pipeline, we were.

1375
01:02:00,071 --> 01:02:03,712
able to sort of run everything in parallel, tiles in parallel,

1376
01:02:04,192 --> 01:02:05,593
then that's how we would treat it.

1377
01:02:05,633 --> 01:02:09,814
So then that updated tile, I would process that tile

1378
01:02:09,854 --> 01:02:10,894
and its neighboring tiles.

1379
01:02:11,834 --> 01:02:16,236
Or I have that tile inherit its neighboring tiles properties.

1380
01:02:17,256 --> 01:02:19,837
So the procedural systems would use its neighbors instead

1381
01:02:19,857 --> 01:02:22,137
of what was originally authored in that tile,

1382
01:02:22,277 --> 01:02:23,337
just so it would all blend in.

1383
01:02:26,438 --> 01:02:26,598
Yes?

1384
01:02:30,821 --> 01:02:31,241
Does it work?

1385
01:02:31,361 --> 01:02:31,802
Yeah.

1386
01:02:32,342 --> 01:02:33,963
I have a two-part question.

1387
01:02:34,303 --> 01:02:36,885
First part, how did you deal, if you had to,

1388
01:02:37,385 --> 01:02:40,448
with complex intersections, like five-way intersections

1389
01:02:40,588 --> 01:02:42,329
or very close together intersections?

1390
01:02:43,069 --> 01:02:45,791
And how did you deal with, if you had to,

1391
01:02:45,951 --> 01:02:48,873
overpasses and underpasses?

1392
01:02:48,893 --> 01:02:49,714
The bridges and stuff.

1393
01:02:50,394 --> 01:02:58,339
So, the system would, if it knew about the street itself, it would try to figure out

1394
01:02:58,359 --> 01:02:58,860
a solution.

1395
01:02:59,080 --> 01:03:00,901
So you'd have cars going right through each other.

1396
01:03:01,761 --> 01:03:03,142
And then we would...

1397
01:03:05,229 --> 01:03:08,630
dedicated, well, it was just one of our production support guys who did a bunch

1398
01:03:08,670 --> 01:03:12,573
of technical tasks. He would go through and clean up those intersections. So I

1399
01:03:12,613 --> 01:03:17,195
would, I mean, so it's another part of this process that you could just go

1400
01:03:17,255 --> 01:03:21,077
through and kind of hand author in a different way in our editor and then it

1401
01:03:21,097 --> 01:03:23,999
would get processed by the system and then added to this system and then

1402
01:03:24,059 --> 01:03:27,841
preserved. So anything that was, like, so a crazy intersection where it's like,

1403
01:03:28,261 --> 01:03:30,682
oh, we can't support those left turns there,

1404
01:03:30,702 --> 01:03:31,962
because they're going to cut into other traffic.

1405
01:03:31,982 --> 01:03:32,922
We don't have enough traffic.

1406
01:03:32,942 --> 01:03:36,123
We only have two traffic phases, east, west, north, and south.

1407
01:03:36,684 --> 01:03:38,944
So is there a way we can make it work?

1408
01:03:38,984 --> 01:03:41,825
So we have to exclude this from being happened.

1409
01:03:41,845 --> 01:03:42,966
So we're going to delete that path.

1410
01:03:43,266 --> 01:03:44,626
And they would author the ones they needed.

1411
01:03:44,946 --> 01:03:46,567
And then we knew it was manually authored,

1412
01:03:46,587 --> 01:03:47,607
and that would be preserved.

1413
01:03:47,967 --> 01:03:49,628
And then that's how that stuff happened.

1414
01:03:50,168 --> 01:03:52,229
And the same thing with overpasses.

1415
01:03:52,329 --> 01:03:52,489
So.

1416
01:03:54,373 --> 01:04:00,439
Grand Central Station, I mean pretty much to author any path, you just draw a line and

1417
01:04:00,459 --> 01:04:05,503
then you give it the little metadata which was mostly by naming convention of what you

1418
01:04:05,543 --> 01:04:08,786
want it to be and then my system automatically integrated it in.

1419
01:04:09,647 --> 01:04:12,650
Okay but did you have like roads going over each other or was it 100% 2D?

1420
01:04:14,064 --> 01:04:18,688
No, the Grand Central Station has that raised deck,

1421
01:04:18,828 --> 01:04:20,149
and of course we also had the bridges.

1422
01:04:20,950 --> 01:04:22,471
So for the bridge, pretty much they authored,

1423
01:04:22,732 --> 01:04:24,093
they clicked on the ground here,

1424
01:04:24,433 --> 01:04:25,654
and they drew a line, they went click,

1425
01:04:25,834 --> 01:04:27,496
growing up the bridge, and then they clicked,

1426
01:04:27,656 --> 01:04:29,157
and they made it come back.

1427
01:04:29,197 --> 01:04:31,299
The cars go up the bridge, and then they turn around

1428
01:04:31,339 --> 01:04:32,180
in the middle and they come back.

1429
01:04:32,480 --> 01:04:33,861
Okay, thank you very much.

1430
01:04:34,241 --> 01:04:36,063
The pedestrians actually go down the subway,

1431
01:04:36,223 --> 01:04:37,284
they go under the street,

1432
01:04:37,344 --> 01:04:38,425
and then they come out the other side.

1433
01:04:41,027 --> 01:04:41,688
Anyone over here, yeah.

1434
01:04:42,135 --> 01:04:43,597
Yes, thank you for the talk.

1435
01:04:44,698 --> 01:04:47,863
So did you have any art-driven rules, for instance, in terms

1436
01:04:47,923 --> 01:04:52,349
of color palette, color variation, or illumination of

1437
01:04:52,389 --> 01:04:53,450
certain parts of the town?

1438
01:04:57,626 --> 01:05:00,088
I guess yes, yes, art drives it all.

1439
01:05:00,869 --> 01:05:02,950
So we had a lot of, there was a lot of,

1440
01:05:03,331 --> 01:05:06,273
there's a lot of vertex paint driven stuff

1441
01:05:06,593 --> 01:05:07,654
and vertex color.

1442
01:05:08,915 --> 01:05:11,918
So like something like the puddles,

1443
01:05:11,998 --> 01:05:13,299
so in the wetness of the streets.

1444
01:05:13,739 --> 01:05:15,100
So that was all built with

1445
01:05:16,201 --> 01:05:20,002
by building the vertex colors into the models themselves.

1446
01:05:20,302 --> 01:05:21,483
So that was already static.

1447
01:05:21,963 --> 01:05:24,004
But then artists could go through and vertex paint

1448
01:05:24,204 --> 01:05:26,384
and so create this other cloud of colors

1449
01:05:26,604 --> 01:05:27,725
that could modify all that.

1450
01:05:28,265 --> 01:05:30,366
And if it was on something on the street,

1451
01:05:30,526 --> 01:05:32,566
the optimum thing to do was actually read their vertex

1452
01:05:32,586 --> 01:05:34,447
paint, integrate it back into the street.

1453
01:05:34,787 --> 01:05:36,648
So they can control it that way.

1454
01:05:37,168 --> 01:05:39,348
As far as lighting and lighting direction stuff,

1455
01:05:41,009 --> 01:05:42,930
I mean, pretty much, I mean, you can.

1456
01:05:43,810 --> 01:05:47,355
X-rays talk, but pretty much the only thing was that was any alley lighting.

1457
01:05:47,395 --> 01:05:49,578
But pretty much we were just placing this stuff out there.

1458
01:05:51,360 --> 01:05:57,728
But yeah, the rules include any artistic choices that we could follow.

1459
01:05:57,748 --> 01:05:58,529
All right.

1460
01:05:58,549 --> 01:05:58,729
Thank you.

1461
01:05:58,750 --> 01:05:58,790
Hi.

1462
01:05:58,810 --> 01:05:58,850
Hi.

1463
01:05:58,870 --> 01:05:58,910
Hi.

1464
01:05:58,930 --> 01:05:58,990
Hi.

1465
01:05:59,030 --> 01:05:59,090
Hi.

1466
01:05:59,110 --> 01:05:59,150
Hi.

1467
01:05:59,170 --> 01:05:59,210
Hi.

1468
01:05:59,230 --> 01:05:59,270
Hi.

1469
01:05:59,290 --> 01:05:59,330
Hi.

1470
01:05:59,350 --> 01:05:59,390
Hi.

1471
01:05:59,410 --> 01:05:59,450
Hi.

1472
01:06:00,211 --> 01:06:00,291
Hi.

1473
01:06:00,312 --> 01:06:00,352
Hi.

1474
01:06:03,506 --> 01:06:04,406
Hi, OK.

1475
01:06:05,027 --> 01:06:07,128
In last year's talk of Sunset Overdrive,

1476
01:06:07,508 --> 01:06:11,210
your colleagues suggested hex grid for organizing

1477
01:06:11,871 --> 01:06:14,412
and streaming a large procedurally generated city.

1478
01:06:14,912 --> 01:06:18,414
But it's very inspiring and very useful to us.

1479
01:06:18,674 --> 01:06:22,837
But I noticed that you go back to regular square grids.

1480
01:06:23,117 --> 01:06:23,317
Yeah?

1481
01:06:24,198 --> 01:06:26,499
Can you tell me the story and the reason behind this?

1482
01:06:27,295 --> 01:06:27,616
OK.

1483
01:06:28,816 --> 01:06:30,977
So the hex grids were originally designed

1484
01:06:31,097 --> 01:06:32,678
because our procedural system was

1485
01:06:32,718 --> 01:06:37,801
going to use a pre-made set of puzzle pieces

1486
01:06:37,861 --> 01:06:39,462
in order to do all the roads and layout.

1487
01:06:39,802 --> 01:06:42,063
But once we started having all the crazy elevations,

1488
01:06:44,064 --> 01:06:46,705
it was impossible to have a fixed set of pieces

1489
01:06:46,745 --> 01:06:47,466
to do all the work.

1490
01:06:47,806 --> 01:06:48,987
So we used the procedural systems

1491
01:06:49,007 --> 01:06:50,948
to make all custom streets.

1492
01:06:51,328 --> 01:06:54,009
And so a hex grid actually allows you a lot of flexibility

1493
01:06:54,269 --> 01:06:56,230
when you're using those pre-created pieces.

1494
01:06:57,526 --> 01:06:59,986
I mean, New York's sort of built on a grid.

1495
01:07:00,247 --> 01:07:03,307
So it, I'm going to close this.

1496
01:07:05,348 --> 01:07:07,108
New York's sort of built on a grid.

1497
01:07:07,168 --> 01:07:09,288
So using the grid system for streaming regions

1498
01:07:09,328 --> 01:07:10,389
kind of just made sense.

1499
01:07:10,749 --> 01:07:13,769
The hexes did not make sense for doing New York City.

1500
01:07:15,290 --> 01:07:15,690
I get that.

1501
01:07:15,730 --> 01:07:16,070
Thank you.

1502
01:07:16,130 --> 01:07:18,310
So we can move to a wrap-up room.

1503
01:07:18,950 --> 01:07:21,311
And if you could tell me where that would be.

1504
01:07:23,311 --> 01:07:24,452
Tell everybody where that would be.

