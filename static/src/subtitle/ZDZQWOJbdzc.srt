1
00:00:05,037 --> 00:00:06,498
Hey, welcome everybody.

2
00:00:06,498 --> 00:00:09,800
Thanks for coming out.

3
00:00:09,800 --> 00:00:10,781
I'm Adam Glazier.

4
00:00:10,781 --> 00:00:13,542
I'm a UX designer on Google Earth VR

5
00:00:13,542 --> 00:00:16,544
and on other VR and AR apps at Google.

6
00:00:16,544 --> 00:00:20,286
And so me and my colleagues worked on Earth VR

7
00:00:20,286 --> 00:00:21,127
for the past few years.

8
00:00:21,127 --> 00:00:23,348
And we're going to share a little bit about some

9
00:00:23,348 --> 00:00:26,250
of the UX struggles and solutions

10
00:00:26,250 --> 00:00:27,971
that we went through to get there.

11
00:00:27,971 --> 00:00:30,853
But before I do, I'm going to share just some brief

12
00:00:30,853 --> 00:00:32,114
background on Google Earth.

13
00:00:32,114 --> 00:00:34,515
So as you know, about 14 years ago,

14
00:00:35,232 --> 00:00:41,074
Google started exploring the idea of mapping the entire Earth.

15
00:00:41,074 --> 00:00:43,996
And we started out with satellite data,

16
00:00:43,996 --> 00:00:46,777
but then we started using planes and cars to collect

17
00:00:46,777 --> 00:00:50,519
imagery, more imagery data, and using that we

18
00:00:50,519 --> 00:00:54,001
used photogrammetry to slowly build

19
00:00:54,001 --> 00:01:00,424
a more complex 3D mesh of the entire Earth.

20
00:01:00,424 --> 00:01:03,385
We release this on desktop and mobile and

21
00:01:04,808 --> 00:01:10,009
You know, this was fine, but really the medium needed to be unlocked like you're there.

22
00:01:10,009 --> 00:01:17,111
And VR is the first time that we were actually able to experience this data in the way it was meant to be.

23
00:01:17,111 --> 00:01:18,171
Which was really fantastic.

24
00:01:18,171 --> 00:01:32,314
But in order to do that, getting this to run at 90 FPS, at rendering the entire Earth, 10 milliseconds every frame, was extraordinarily difficult using the existing code base.

25
00:01:34,596 --> 00:01:42,183
So, to do this, just consider the fact that your average city is millions of triangles.

26
00:01:42,183 --> 00:01:47,768
And as you zoom out, you exponentially start to grow that, until eventually the entire

27
00:01:47,768 --> 00:01:52,592
planet you're looking at millions, or trillions and trillions of triangles.

28
00:01:52,592 --> 00:01:59,578
On top of that, we do atmospheric shading, atmospheric scattering, realistic time of

29
00:01:59,578 --> 00:02:00,338
day simulations.

30
00:02:02,858 --> 00:02:06,181
And so we need to render all of these things

31
00:02:06,181 --> 00:02:10,624
in such a short amount of time with no dropped frames.

32
00:02:10,624 --> 00:02:13,066
So to do this, we needed to improve

33
00:02:13,066 --> 00:02:17,590
on the architecture of the existing experience by,

34
00:02:17,590 --> 00:02:21,393
we started with frustum calling, draw call batching,

35
00:02:21,393 --> 00:02:24,415
and a bunch of other ways to eliminate

36
00:02:24,415 --> 00:02:26,616
the bottlenecks caused by the existing pipeline.

37
00:02:27,762 --> 00:02:30,963
Now, last year before we released Google Earth VR,

38
00:02:30,963 --> 00:02:33,524
we talked about this at SIGGRAPH.

39
00:02:33,524 --> 00:02:38,526
So if you're interested in the rendering optimizations

40
00:02:38,526 --> 00:02:41,548
and ways that you can render entire planet,

41
00:02:41,548 --> 00:02:42,248
go back and watch that talk.

42
00:02:42,248 --> 00:02:43,068
We give some insights there.

43
00:02:43,068 --> 00:02:47,310
So the first thing we did when we got a prototype Vive,

44
00:02:47,310 --> 00:02:48,931
we were one of the first companies

45
00:02:48,931 --> 00:02:51,452
to get the Vive with the Tag Room demo.

46
00:02:53,679 --> 00:02:57,421
We put people in this, like our founders, Larry and Sergey Brin and JJ Abrams.

47
00:02:57,421 --> 00:03:01,863
And immediately they wanted to go further than the limit of the 3 meter by 3 meter room.

48
00:03:01,863 --> 00:03:06,586
They wanted to go down the street or over the mountain and really explore around.

49
00:03:06,586 --> 00:03:09,167
So, to give you some context at this time, this was about two years ago.

50
00:03:09,167 --> 00:03:09,787
We had a prototype Vive.

51
00:03:09,787 --> 00:03:10,908
There were a few demos.

52
00:03:23,277 --> 00:03:28,064
uh... but no great examples of even just how to get uh... short distances

53
00:03:28,064 --> 00:03:31,108
so we essentially had no idea what you're doing

54
00:03:31,108 --> 00:03:32,570
uh... so we did the first thing

55
00:03:32,570 --> 00:03:33,952
we thought of which was

56
00:03:33,952 --> 00:03:35,834
allow the user to point somewhere

57
00:03:35,834 --> 00:03:37,977
and wherever their ray intersects

58
00:03:37,977 --> 00:03:39,759
will teleport them there instantly

59
00:03:40,666 --> 00:03:45,030
This was really convenient because you could get to the top of a mountain instantly.

60
00:03:45,030 --> 00:03:48,834
But if you've ever tried this with large distances,

61
00:03:48,834 --> 00:03:52,517
it works well in small spaces when you're going small distances.

62
00:03:52,517 --> 00:03:56,441
But if you go to the top of a mountain, users would get there and look around.

63
00:03:57,541 --> 00:03:59,523
and then look down and realize, oh, they're

64
00:03:59,523 --> 00:04:01,685
on top of the mountain.

65
00:04:01,685 --> 00:04:04,228
So it's a good idea in theory, but in practice,

66
00:04:04,228 --> 00:04:05,169
it didn't actually work.

67
00:04:05,169 --> 00:04:09,913
And this was fine, but users also

68
00:04:09,913 --> 00:04:11,955
wanted a higher view or a lower view.

69
00:04:11,955 --> 00:04:14,918
So we gave them the ability to scale themselves

70
00:04:14,918 --> 00:04:16,920
by clicking up and down on the touchpad.

71
00:04:16,920 --> 00:04:19,783
They could grow and shrink themselves.

72
00:04:20,973 --> 00:04:28,100
And they got those views they desired but there was a problem that came up is they would teleport towards a building or a mountain and

73
00:04:28,100 --> 00:04:31,864
Then they would say oh, I want to see what this is like at human scale

74
00:04:31,864 --> 00:04:36,388
So they'd scale themselves down and as they did that something unexpected happened

75
00:04:36,388 --> 00:04:40,753
Which is that building or mountain starts to drift further and further away

76
00:04:40,753 --> 00:04:44,677
So that thing that was just two meters in front of them also all of a sudden

77
00:04:45,559 --> 00:04:46,999
goes way outside the room.

78
00:04:46,999 --> 00:04:50,581
So you'd end up with this clunky teleport,

79
00:04:50,581 --> 00:04:52,902
scale, scale, scale, teleport, scale, scale, scale,

80
00:04:52,902 --> 00:04:55,163
just to get at human scale in front of a door

81
00:04:55,163 --> 00:04:57,624
or at the base of a mountain.

82
00:04:57,624 --> 00:05:03,287
So to make up for the loss of context with teleport,

83
00:05:03,287 --> 00:05:06,388
we tried step teleporting by just incrementally

84
00:05:06,388 --> 00:05:07,349
getting the user closer.

85
00:05:08,382 --> 00:05:17,564
This worked okay, but it felt a little clunky and it broke immersion because every time you jump to a new place, it just feels artificial.

86
00:05:17,564 --> 00:05:24,526
And then, as you can see, on the way to the top of the mountain, the person ends up with their feet not on the ground.

87
00:05:24,526 --> 00:05:34,468
So, if they stop or look down on the way, a lot of people end up feeling discomfort or have the fear of heights.

88
00:05:38,027 --> 00:05:39,368
So to make up for the fear of heights,

89
00:05:39,368 --> 00:05:41,849
we just kept their head in the same place

90
00:05:41,849 --> 00:05:43,630
and scaled themselves so that their feet

91
00:05:43,630 --> 00:05:44,811
were always on the ground.

92
00:05:44,811 --> 00:05:48,432
And at the time, this was just a crazy experiment.

93
00:05:48,432 --> 00:05:50,613
We thought people would get really sick

94
00:05:50,613 --> 00:05:53,515
if we just scaled them up and down as they're going,

95
00:05:53,515 --> 00:05:55,396
but it actually worked really well.

96
00:05:55,396 --> 00:05:59,938
So then we tried another thing

97
00:05:59,938 --> 00:06:01,999
that we knew we weren't supposed to do, which is like...

98
00:06:02,873 --> 00:06:03,774
flying the user.

99
00:06:03,774 --> 00:06:07,195
So instead of this step motion, it's continuous motion.

100
00:06:07,195 --> 00:06:10,176
And we keep their feet on the ground during this.

101
00:06:10,176 --> 00:06:13,377
And this works the best for preserving immersion.

102
00:06:13,377 --> 00:06:16,337
So people didn't lose context on the way

103
00:06:16,337 --> 00:06:17,618
to where they were going.

104
00:06:17,618 --> 00:06:21,419
Whenever they stopped, their feet were on the ground.

105
00:06:21,419 --> 00:06:23,980
But there was one big problem, which is it

106
00:06:23,980 --> 00:06:25,020
made 95% of the people sick.

107
00:06:25,020 --> 00:06:30,482
Because what they see and what their body feels doesn't match.

108
00:06:32,983 --> 00:06:34,283
So we had this problem.

109
00:06:34,283 --> 00:06:36,444
Flying was awesome in all these ways,

110
00:06:36,444 --> 00:06:39,125
but it made basically everyone feel sick.

111
00:06:39,125 --> 00:06:41,566
And teleport was convenient,

112
00:06:41,566 --> 00:06:44,787
but you lose context and you break immersion.

113
00:06:44,787 --> 00:06:47,348
So we wanted to be somewhere in the middle.

114
00:06:47,348 --> 00:06:51,430
We wanted total immersion, easy to use.

115
00:06:51,430 --> 00:06:54,171
There's no context loss and no nausea.

116
00:06:55,379 --> 00:06:56,980
So we came up with a really cool trick to solve this,

117
00:06:56,980 --> 00:06:58,800
which we call tunnel vision.

118
00:06:58,800 --> 00:07:03,282
So as you can see in this video, about halfway through,

119
00:07:03,282 --> 00:07:06,063
in the outer edges of the user's view,

120
00:07:06,063 --> 00:07:11,484
we project a grid on the floor and a horizon line.

121
00:07:11,484 --> 00:07:16,646
So what this does is it's similar to the effect

122
00:07:16,646 --> 00:07:19,047
of being in a living room or a theater

123
00:07:19,047 --> 00:07:21,668
where the stuff on the TV is moving,

124
00:07:21,668 --> 00:07:22,828
but your living room is not.

125
00:07:23,631 --> 00:07:26,912
And it's that outer area that tells your body,

126
00:07:26,912 --> 00:07:27,572
OK, this is OK.

127
00:07:27,572 --> 00:07:28,612
I'm not moving.

128
00:07:28,612 --> 00:07:30,592
It's just the stuff on this screen.

129
00:07:30,592 --> 00:07:32,893
But it turns out you don't need a rug and a couch,

130
00:07:32,893 --> 00:07:34,873
and you don't need it to be an entire room.

131
00:07:34,873 --> 00:07:40,794
You actually only need about 15% of the user's field of view.

132
00:07:40,794 --> 00:07:44,255
Instead of a rug, you can just project a high contrast grid

133
00:07:44,255 --> 00:07:46,075
on the floor.

134
00:07:46,075 --> 00:07:47,576
And it turns out the horizon line

135
00:07:47,576 --> 00:07:49,516
is also a really important factor

136
00:07:49,516 --> 00:07:52,817
to help provide the users with balance.

137
00:07:54,307 --> 00:07:56,768
So with tunnel vision and scaled flying,

138
00:07:56,768 --> 00:07:59,709
we got somewhere close to the middle of our goal.

139
00:07:59,709 --> 00:08:01,350
We lose a little bit of immersion

140
00:08:01,350 --> 00:08:05,792
because some people notice the tunnel vision.

141
00:08:05,792 --> 00:08:07,993
But we feel like this is a good combination,

142
00:08:07,993 --> 00:08:09,433
and it's worth it.

143
00:08:09,433 --> 00:08:13,035
Now when people fly really, really high

144
00:08:13,035 --> 00:08:16,696
into the atmosphere, another problem emerged, which is.

145
00:08:17,473 --> 00:08:21,655
people will look down and they would get tired of looking down at the earth and

146
00:08:21,655 --> 00:08:22,876
trying to find what country they're on.

147
00:08:22,876 --> 00:08:26,138
And if the earth wasn't rotated perfectly North,

148
00:08:26,138 --> 00:08:29,399
they would just be completely lost. Um,

149
00:08:29,399 --> 00:08:34,462
so we allow users to put the earth in front of them and always keep North up.

150
00:08:34,462 --> 00:08:39,064
And then we project a transparent floor under them so they don't feel like

151
00:08:39,064 --> 00:08:40,465
they're floating in space.

152
00:08:42,319 --> 00:08:45,602
Once we did this, users immediately wanted to grab the earth

153
00:08:45,602 --> 00:08:46,522
and zoom in and out.

154
00:08:46,522 --> 00:08:49,004
So we used the same flying mechanism

155
00:08:49,004 --> 00:08:50,725
to enlarge the earth or shrink it.

156
00:08:50,725 --> 00:08:53,247
And we always keep the surface of the earth

157
00:08:53,247 --> 00:08:55,649
at the same distance.

158
00:08:55,649 --> 00:08:58,731
So as it grows, it doesn't engulf them.

159
00:08:58,731 --> 00:09:00,953
And to solve dragging, what we did was

160
00:09:00,953 --> 00:09:04,275
we put a proxy sphere on the earth

161
00:09:04,275 --> 00:09:07,017
where the sphere is the size of the earth's crust.

162
00:09:07,771 --> 00:09:10,816
And wherever their ray is intersecting,

163
00:09:10,816 --> 00:09:12,800
we make sure that as they move their controller,

164
00:09:12,800 --> 00:09:15,685
that intersection point of the proxy sphere

165
00:09:15,685 --> 00:09:17,628
tracks with their ray.

166
00:09:17,628 --> 00:09:20,032
And then we update the Earth's rotation

167
00:09:20,032 --> 00:09:21,414
to match that proxy sphere.

168
00:09:24,078 --> 00:09:26,560
But when the user's standing on the earth,

169
00:09:26,560 --> 00:09:29,582
now that proxy sphere is the size of the earth, it's huge.

170
00:09:29,582 --> 00:09:32,704
And when the user's intersection point is on the ground

171
00:09:32,704 --> 00:09:37,567
and they're dragging the earth, this works well.

172
00:09:37,567 --> 00:09:41,449
However, if the user points above themselves,

173
00:09:41,449 --> 00:09:43,751
now the proxy sphere is above them,

174
00:09:43,751 --> 00:09:45,832
but they end up dragging themselves

175
00:09:45,832 --> 00:09:47,353
into mountains and buildings.

176
00:09:47,353 --> 00:09:50,115
And for some reason, people don't like that.

177
00:09:52,030 --> 00:09:55,310
So we came up with this cool trick, which is a proxy cone.

178
00:09:55,310 --> 00:09:57,391
And we call this cone drag.

179
00:09:57,391 --> 00:10:00,312
So the way it works is on the proxy cone,

180
00:10:00,312 --> 00:10:02,472
the tip of it's at the base of the user's foot.

181
00:10:02,472 --> 00:10:06,933
And the base of the cone is where the user's ray

182
00:10:06,933 --> 00:10:09,714
intersected the earth geometry.

183
00:10:09,714 --> 00:10:12,254
And by doing this, it means that that intersection point now

184
00:10:12,254 --> 00:10:13,575
just runs along a cone.

185
00:10:13,575 --> 00:10:16,495
And this works really well.

186
00:10:16,495 --> 00:10:20,056
Users almost never end up going into geometry

187
00:10:20,056 --> 00:10:21,797
like a mountain or a building.

188
00:10:23,238 --> 00:10:28,202
So, you can do really cool things like this with it. You can hop from the tops of buildings.

189
00:10:28,202 --> 00:10:32,826
It just feels really effortless to get around. So, I just shared a bunch of things, but if

190
00:10:32,826 --> 00:10:40,272
you're going to take four things away, we felt like scaled flying worked the best. Scaling,

191
00:10:40,272 --> 00:10:45,076
meaning scaling the user, keeping their feet on the ground, and smooth movement. But that

192
00:10:45,076 --> 00:10:48,258
only worked really well if you coupled that with tunnel vision.

193
00:10:48,645 --> 00:10:55,671
5% of our users can turn tunnel vision off and not feel sick, but the rest need it.

194
00:10:55,671 --> 00:11:02,537
And if you're going to do dragging at different elevations, cone drag is the way to go.

195
00:11:02,537 --> 00:11:08,482
And putting the globe in front of users is really important for them to get around.

196
00:11:10,168 --> 00:11:16,892
So, once we got all these things implemented, you know, it technically worked, but it didn't

197
00:11:16,892 --> 00:11:18,933
feel as great as we wanted.

198
00:11:18,933 --> 00:11:22,895
And so, to get the feel right, I'm going to introduce Per to talk about that.

199
00:11:22,895 --> 00:11:23,655
Thank you, Adam.

200
00:11:23,655 --> 00:11:27,338
Hello, everyone.

201
00:11:27,338 --> 00:11:27,958
My name is Per Kalsom.

202
00:11:27,958 --> 00:11:29,519
I'm an engineer on the team.

203
00:11:29,519 --> 00:11:36,023
I'm going to talk a little bit about the work we did once we had performance rendering in

204
00:11:37,672 --> 00:11:42,736
the navigation methods kind of figure out. Because honestly, once we were there, we thought

205
00:11:42,736 --> 00:11:48,101
we were very close to being done. And we were a little bit surprised when we showed it to

206
00:11:48,101 --> 00:11:53,266
test users and they didn't have more of an emotional response. We would get feedback

207
00:11:53,266 --> 00:11:58,430
such as it feels artificial, it's dead, it's silent. And I'm going to cover...

208
00:11:59,433 --> 00:12:02,875
what we did to improve two of our most popular navigation

209
00:12:02,875 --> 00:12:05,936
methods, drag and flying, and then briefly mention

210
00:12:05,936 --> 00:12:09,098
a little bit what we did with background sound.

211
00:12:09,098 --> 00:12:14,060
First off, so we started off by implementing drag very

212
00:12:14,060 --> 00:12:17,402
similar to regular Google Maps, regular Google Earth.

213
00:12:17,402 --> 00:12:18,922
We shoot a ray from the controller,

214
00:12:18,922 --> 00:12:21,123
and we get an intersection point.

215
00:12:21,123 --> 00:12:23,545
And this is kind of some sort of direct manipulation.

216
00:12:23,545 --> 00:12:26,246
It moves one to one with how you move it.

217
00:12:26,246 --> 00:12:28,107
And this felt pretty good when.

218
00:12:29,393 --> 00:12:32,355
when the planet is very small in front of you.

219
00:12:32,355 --> 00:12:35,778
But in cases when the planet was below you

220
00:12:35,778 --> 00:12:37,959
and you were at a pretty low scale,

221
00:12:37,959 --> 00:12:41,982
very small movement would move the planet.

222
00:12:41,982 --> 00:12:46,765
It was almost like the planet doesn't have any weight at all.

223
00:12:46,765 --> 00:12:49,307
And we want to create this immersive feeling of like,

224
00:12:49,307 --> 00:12:51,189
we want to simulate that the planet should be very heavy,

225
00:12:51,189 --> 00:12:52,810
it should be something that you can relate to.

226
00:12:54,462 --> 00:12:58,523
We also identified that just by starting this dragging gesture

227
00:12:58,523 --> 00:13:00,163
by pressing the trigger button, it

228
00:13:00,163 --> 00:13:02,744
was very hard to do so without moving the hand just

229
00:13:02,744 --> 00:13:03,944
a little bit.

230
00:13:03,944 --> 00:13:05,764
And depending on where you're pointing,

231
00:13:05,764 --> 00:13:11,185
this could cause this nasty jittering effect, which

232
00:13:11,185 --> 00:13:12,226
is very unpleasant.

233
00:13:12,226 --> 00:13:15,886
And once again, it just kind of ruined immersion a little bit.

234
00:13:15,886 --> 00:13:17,987
There's no sort of weight.

235
00:13:17,987 --> 00:13:19,767
So what could we do to improve this?

236
00:13:19,767 --> 00:13:20,667
The first thing we tried.

237
00:13:21,772 --> 00:13:23,954
was distance-based smoothing.

238
00:13:23,954 --> 00:13:26,296
We recognized that the further away you're pointing,

239
00:13:26,296 --> 00:13:30,060
the more sensitive it gets for very small changes

240
00:13:30,060 --> 00:13:31,061
in the controller.

241
00:13:31,061 --> 00:13:35,025
And we came up with a scheme that

242
00:13:35,025 --> 00:13:37,987
would do much more aggressive smoothing the further

243
00:13:37,987 --> 00:13:39,849
away this intersection point you would get was.

244
00:13:39,849 --> 00:13:46,435
And this was great for reducing that jitter effect that we saw.

245
00:13:46,977 --> 00:13:51,080
But it didn't really help making the planet feel heavier.

246
00:13:51,080 --> 00:13:54,623
Still, when you were dragging right below you,

247
00:13:54,623 --> 00:13:56,064
it was reacting a little bit too much.

248
00:13:56,064 --> 00:13:58,026
So we went back to the drawing board.

249
00:13:58,026 --> 00:14:00,728
And we thought, in real life, if you

250
00:14:00,728 --> 00:14:03,870
have a really heavy object in front of you and you push it.

251
00:14:04,777 --> 00:14:08,879
it's not going to move until you have given it enough force.

252
00:14:08,879 --> 00:14:11,801
And that's because you have static friction fighting back.

253
00:14:11,801 --> 00:14:15,463
And we thought, maybe we can simulate the interaction point

254
00:14:15,463 --> 00:14:18,805
using some physics-based model.

255
00:14:18,805 --> 00:14:20,726
And we'd end up choosing a spring,

256
00:14:20,726 --> 00:14:23,847
because then we'd be very trivial to try static friction.

257
00:14:23,847 --> 00:14:25,788
And then we can switch into kinetic friction

258
00:14:25,788 --> 00:14:27,689
once we pass a certain threshold.

259
00:14:27,689 --> 00:14:29,670
And we can choose damping ratio, so we'd

260
00:14:29,670 --> 00:14:33,192
get rid of overshoots from the spring.

261
00:14:34,210 --> 00:14:37,656
And the cool thing about this was, like, now when you started a dragging gesture and you

262
00:14:37,656 --> 00:14:40,901
just moved the controller just a little bit, nothing would move.

263
00:14:40,901 --> 00:14:41,962
It was fighting back.

264
00:14:41,962 --> 00:14:44,286
The problem with this method...

265
00:14:45,473 --> 00:14:48,274
was that it was, how do you pick your spring parameters?

266
00:14:48,274 --> 00:14:50,635
Like, as Adam was talking about earlier,

267
00:14:50,635 --> 00:14:52,335
we have this scaled flying method.

268
00:14:52,335 --> 00:14:53,916
Like, we can constantly leave the user

269
00:14:53,916 --> 00:14:55,136
in a different scale at any time.

270
00:14:55,136 --> 00:14:57,957
How do we come up with such parameters

271
00:14:57,957 --> 00:14:59,257
that it works in any scenario?

272
00:14:59,257 --> 00:15:02,778
Like, high scale, low scale, you're pointing far,

273
00:15:02,778 --> 00:15:04,439
you're pointing low.

274
00:15:04,439 --> 00:15:06,339
And it got really complicated.

275
00:15:06,339 --> 00:15:10,540
And it didn't really feel like, it was a little bit.

276
00:15:11,292 --> 00:15:13,595
We were a little bit nervous that there would be cases

277
00:15:13,595 --> 00:15:14,736
where this would not work out at all.

278
00:15:14,736 --> 00:15:16,538
So we realized we're probably going

279
00:15:16,538 --> 00:15:19,801
to end up needing something that's more robust,

280
00:15:19,801 --> 00:15:21,603
even though this showed great promise.

281
00:15:21,603 --> 00:15:26,548
And the thing that worked the best for us was using filtering.

282
00:15:26,548 --> 00:15:29,211
So in the next slide that's coming up,

283
00:15:29,211 --> 00:15:31,474
you remember we were shooting a rate from the controller.

284
00:15:31,474 --> 00:15:33,255
So imagine that is the rate.

285
00:15:34,454 --> 00:15:36,316
the red ray coming out here.

286
00:15:36,316 --> 00:15:38,958
And then we take this through a filter, and we get a blue ray.

287
00:15:38,958 --> 00:15:41,420
So there's going to be some difference between the red

288
00:15:41,420 --> 00:15:42,120
and the blue.

289
00:15:42,120 --> 00:15:47,905
And so it's basically like we are applying the filtering.

290
00:15:47,905 --> 00:15:51,047
You can think of it as in you're applying filtering on

291
00:15:51,047 --> 00:15:53,209
the controller, which means position and rotation.

292
00:15:53,209 --> 00:15:57,232
And this also means that these two rays, they're not

293
00:15:57,232 --> 00:15:59,254
guaranteed to start from the same position.

294
00:15:59,254 --> 00:16:00,955
They can have completely different orientation.

295
00:16:03,907 --> 00:16:07,068
So the filtering we chose was low-pass filtering,

296
00:16:07,068 --> 00:16:09,268
and we have two different low-pass,

297
00:16:09,268 --> 00:16:11,109
two different filters.

298
00:16:11,109 --> 00:16:13,029
We have a very strong low-pass filter

299
00:16:13,029 --> 00:16:14,230
and a much weaker one.

300
00:16:14,230 --> 00:16:16,170
And when you start the dragging gesture,

301
00:16:16,170 --> 00:16:17,610
right in the beginning,

302
00:16:17,610 --> 00:16:19,911
then we apply this super strong low-pass filter.

303
00:16:19,911 --> 00:16:22,632
So you basically get almost no movement at all

304
00:16:22,632 --> 00:16:25,472
to simulate this static friction effect we had earlier.

305
00:16:25,472 --> 00:16:27,873
And the further away you get from the initial position

306
00:16:27,873 --> 00:16:29,613
or initial rotation,

307
00:16:29,613 --> 00:16:32,534
then we start to apply more of the loose low-pass filter.

308
00:16:32,984 --> 00:16:35,847
which introduced this nice lagging effect

309
00:16:35,847 --> 00:16:36,847
that the spring gave us earlier.

310
00:16:36,847 --> 00:16:40,210
And now what's good about this, since it's

311
00:16:40,210 --> 00:16:42,052
working on the controller, we're guaranteed

312
00:16:42,052 --> 00:16:43,954
it's going to work in any scale in any scenario,

313
00:16:43,954 --> 00:16:47,677
because the controller in relative motion to you

314
00:16:47,677 --> 00:16:49,579
is going to be pretty much the same.

315
00:16:49,579 --> 00:16:53,522
This introduced a different problem.

316
00:16:53,522 --> 00:16:55,444
Now we do intersection with this.

317
00:16:56,930 --> 00:17:02,153
array that is not even guaranteed to be attached to a controller anymore, what are we displaying

318
00:17:02,153 --> 00:17:07,896
to the user to communicate this? Should we show the post filter array that's like disconnected?

319
00:17:07,896 --> 00:17:13,019
Probably not, that would feel weird. We ended up settling for an approach where we take the

320
00:17:13,019 --> 00:17:19,123
intersection of the post filter array, we project it to the pre-filter array. This ended up

321
00:17:19,123 --> 00:17:20,583
creating us a really nice hull.

322
00:17:21,550 --> 00:17:24,652
And we can use this hole to place control points

323
00:17:24,652 --> 00:17:25,593
in a cubic bezier.

324
00:17:25,593 --> 00:17:29,815
And then we always guarantee to have a very smooth rendering

325
00:17:29,815 --> 00:17:30,495
curve at any time.

326
00:17:30,495 --> 00:17:36,319
And just to make this look a little bit more nice,

327
00:17:36,319 --> 00:17:38,460
we fade out the opacity towards the end of the curve,

328
00:17:38,460 --> 00:17:42,042
because otherwise you end up with this awkward, thin,

329
00:17:42,042 --> 00:17:44,043
spaghetti-looking thing that acts as a link between you

330
00:17:44,043 --> 00:17:44,983
and the planet.

331
00:17:46,222 --> 00:17:47,322
That worked pretty well.

332
00:17:47,322 --> 00:17:50,164
We also wanted to simulate some sort of resistance,

333
00:17:50,164 --> 00:17:51,865
like, OK, it's not moving now.

334
00:17:51,865 --> 00:17:53,986
We introduced static friction and lag.

335
00:17:53,986 --> 00:17:55,327
The planet's fighting back.

336
00:17:55,327 --> 00:17:57,508
We want to simulate resistance.

337
00:17:57,508 --> 00:18:00,010
In real life, let's say you attach a rope to a heavy object

338
00:18:00,010 --> 00:18:03,872
and you pull this rope, you're going to feel this resistance.

339
00:18:03,872 --> 00:18:08,475
And we thought that we could use the haptics of the controller

340
00:18:08,475 --> 00:18:10,276
to achieve something similar to this.

341
00:18:11,294 --> 00:18:13,496
So what we do, for two sequential frames,

342
00:18:13,496 --> 00:18:17,219
we take this intersection point of the post-filter rays,

343
00:18:17,219 --> 00:18:19,681
and then we compute the delta angle

344
00:18:19,681 --> 00:18:22,344
between these two points and the head.

345
00:18:22,344 --> 00:18:26,247
And this gives us a very nice, one scalar value

346
00:18:26,247 --> 00:18:28,169
that we can feed into the strength of the haptics.

347
00:18:29,161 --> 00:18:31,482
And we can use the same nice value

348
00:18:31,482 --> 00:18:34,424
to be the input for our sound system.

349
00:18:34,424 --> 00:18:37,106
So for the drag effect in Earth VR,

350
00:18:37,106 --> 00:18:40,148
we ended up making a slow dragging sound

351
00:18:40,148 --> 00:18:41,189
and a fast dragging sound.

352
00:18:41,189 --> 00:18:43,990
And then based on this value, it became very easy

353
00:18:43,990 --> 00:18:45,972
to just blend between them, depending

354
00:18:45,972 --> 00:18:47,493
on this delta angle value.

355
00:18:47,493 --> 00:18:50,034
So just to demonstrate.

356
00:18:51,680 --> 00:18:54,021
the red lace you see here, this is like a debug render we had.

357
00:18:54,021 --> 00:18:55,742
The more aggressive you drag, you

358
00:18:55,742 --> 00:18:57,644
see that the delta between these two becomes bigger.

359
00:18:57,644 --> 00:19:00,005
And then when you stop moving, it

360
00:19:00,005 --> 00:19:01,206
will always catch up in the end.

361
00:19:01,206 --> 00:19:03,988
And if you remember the previous slide,

362
00:19:03,988 --> 00:19:08,671
when the drag was reacting very one-to-one,

363
00:19:08,671 --> 00:19:11,412
it was very artificial, I think this demonstrates.

364
00:19:11,412 --> 00:19:14,514
Now it feels more natural.

365
00:19:14,514 --> 00:19:16,216
It still kind of does what you want it to do,

366
00:19:16,216 --> 00:19:20,678
but it feels a little bit more like we added weight.

367
00:19:22,867 --> 00:19:26,268
Secondly, I want to cover flight speed.

368
00:19:26,268 --> 00:19:30,329
So we realize scale flying is probably the method

369
00:19:30,329 --> 00:19:32,850
that people like using the most.

370
00:19:32,850 --> 00:19:34,950
And the question is, what kind of flight speed

371
00:19:34,950 --> 00:19:35,630
are we going to choose?

372
00:19:35,630 --> 00:19:37,311
Because we are constantly changing the scale.

373
00:19:37,311 --> 00:19:42,152
And many of you in here probably heard, we're in the VR space.

374
00:19:42,152 --> 00:19:45,133
We heard many times that doing acceleration in VR

375
00:19:45,133 --> 00:19:46,213
can lead to motion sickness.

376
00:19:46,213 --> 00:19:47,754
And we should avoid it as much as we can.

377
00:19:48,825 --> 00:19:55,533
So the first thing we tried was to pick a constant flight speed in the room space,

378
00:19:55,533 --> 00:20:03,322
which means that, like, how big you perceive things.

379
00:20:03,322 --> 00:20:06,126
How should I say this?

380
00:20:08,862 --> 00:20:11,862
you are in, you're like, if you manage your world space

381
00:20:11,862 --> 00:20:14,763
fly speed, like it changes, but how close you are to things

382
00:20:14,763 --> 00:20:17,243
is always gonna, you're gonna find the same speed.

383
00:20:17,243 --> 00:20:19,964
And this worked pretty well for high altitudes,

384
00:20:19,964 --> 00:20:23,004
but as you went down to like lower altitudes,

385
00:20:23,004 --> 00:20:25,505
it felt like you ended this like area of mud.

386
00:20:25,505 --> 00:20:28,365
It was super frustrating for users to fly around,

387
00:20:28,365 --> 00:20:29,666
like you would like get stuck,

388
00:20:29,666 --> 00:20:32,026
and it was like very irritating.

389
00:20:32,026 --> 00:20:33,967
So we needed to do something about this.

390
00:20:35,949 --> 00:20:39,973
So we realized, hmm, maybe we should go against the device

391
00:20:39,973 --> 00:20:41,854
and maybe introduce some acceleration.

392
00:20:41,854 --> 00:20:42,975
Who knows?

393
00:20:42,975 --> 00:20:45,498
So we came up with this power curve, which basically

394
00:20:45,498 --> 00:20:50,102
means that in room space, we fly faster at lower scales.

395
00:20:50,102 --> 00:20:52,043
And then as the scale gets bigger,

396
00:20:52,043 --> 00:20:55,366
we slowly reduce the speed in room space.

397
00:20:57,303 --> 00:21:01,145
And a cool trick about this was that, if you see here,

398
00:21:01,145 --> 00:21:04,005
the orange curve, we thought that the value it converges to

399
00:21:04,005 --> 00:21:05,726
was a little bit too low.

400
00:21:05,726 --> 00:21:09,087
And we actually just switched to a different constant speed

401
00:21:09,087 --> 00:21:09,927
after a certain scale.

402
00:21:09,927 --> 00:21:12,868
And you might think, oh, that is probably really crazy.

403
00:21:12,868 --> 00:21:14,889
That's a really discontinuous acceleration.

404
00:21:14,889 --> 00:21:16,349
That must feel really bad.

405
00:21:16,349 --> 00:21:17,469
But in reality, you try it.

406
00:21:17,469 --> 00:21:18,150
You fly around.

407
00:21:18,150 --> 00:21:19,310
There's so much things that are happening.

408
00:21:19,310 --> 00:21:20,250
You change the scale.

409
00:21:20,250 --> 00:21:21,530
It's not that noticeable.

410
00:21:21,530 --> 00:21:23,671
So I thought that was a cool trick that kind of just

411
00:21:23,671 --> 00:21:24,111
worked out.

412
00:21:26,308 --> 00:21:27,349
to demonstrate.

413
00:21:27,349 --> 00:21:29,650
So if you remember, there was this gloob effect earlier

414
00:21:29,650 --> 00:21:30,651
when you're flying low.

415
00:21:30,651 --> 00:21:33,972
And now we have kind of like, it feels very natural.

416
00:21:33,972 --> 00:21:36,673
Even though you saw the curve earlier, it's very nonlinear.

417
00:21:36,673 --> 00:21:44,097
As of last week, we launched a new version of Earth VR.

418
00:21:44,097 --> 00:21:46,798
And we have this new mode called Fixed Human Scale.

419
00:21:47,881 --> 00:21:52,003
So instead of scaling the user, always having the feet on the

420
00:21:52,003 --> 00:21:55,244
ground, we now have an option to always lock the user at

421
00:21:55,244 --> 00:21:59,746
human scale, which means scale as well, which is this blue

422
00:21:59,746 --> 00:22:01,646
line you have here to the left.

423
00:22:01,646 --> 00:22:03,867
And then the question is, OK, what do we do about flight

424
00:22:03,867 --> 00:22:04,428
speed now?

425
00:22:04,428 --> 00:22:07,089
Should we keep them at this high flight speed?

426
00:22:07,089 --> 00:22:08,609
This was the highest room space flight

427
00:22:08,609 --> 00:22:09,650
speed we've had before.

428
00:22:09,650 --> 00:22:13,691
But I think what ends up happening is for very high

429
00:22:13,691 --> 00:22:14,232
altitudes.

430
00:22:15,435 --> 00:22:17,198
you're basically like not moving at all.

431
00:22:17,198 --> 00:22:19,421
And it gets even worse if you fly up to the clouds.

432
00:22:19,421 --> 00:22:21,986
Like you can probably spend hours not getting anywhere.

433
00:22:21,986 --> 00:22:24,109
Like you are moving in, let's say, nine meters per second,

434
00:22:24,109 --> 00:22:25,712
but that doesn't really matter, like,

435
00:22:25,712 --> 00:22:27,395
if you compare that to a rocket ship

436
00:22:27,395 --> 00:22:28,897
or something really fast.

437
00:22:28,897 --> 00:22:29,979
So we needed something different.

438
00:22:31,105 --> 00:22:33,888
We still wanted to, we think it had great value

439
00:22:33,888 --> 00:22:36,970
that you don't fly too fast in this fixed human scale mode

440
00:22:36,970 --> 00:22:40,714
at low altitudes, because now it really gave this big,

441
00:22:40,714 --> 00:22:44,077
it really gave this sense of scale.

442
00:22:44,077 --> 00:22:46,879
Like you really felt like, wow, the planet is huge.

443
00:22:46,879 --> 00:22:49,541
It actually takes me a while to get to places.

444
00:22:49,541 --> 00:22:51,303
So we wanted to preserve that somehow,

445
00:22:51,303 --> 00:22:53,665
but still make it possible up in high altitudes

446
00:22:53,665 --> 00:22:55,807
to travel faster.

447
00:22:55,807 --> 00:22:57,488
We ended up creating three regions.

448
00:22:58,458 --> 00:23:01,060
One, the first region you see here,

449
00:23:01,060 --> 00:23:02,640
where the blue curve starts,

450
00:23:02,640 --> 00:23:05,061
this is this non-linear region.

451
00:23:05,061 --> 00:23:08,743
So we slowly increase the flight speed in room space,

452
00:23:08,743 --> 00:23:09,703
depending on the altitude.

453
00:23:09,703 --> 00:23:12,944
And then we have the third region,

454
00:23:12,944 --> 00:23:16,066
which is to the very far, even outside of this graph,

455
00:23:16,066 --> 00:23:18,026
where we have a linear flight speed model,

456
00:23:18,026 --> 00:23:20,467
which is pretty much the same

457
00:23:20,467 --> 00:23:22,468
as if you have this scale always changing

458
00:23:22,468 --> 00:23:24,149
and constant speed in room space.

459
00:23:25,064 --> 00:23:29,166
And then in the middle region, we blend between these two modes.

460
00:23:29,166 --> 00:23:32,528
The challenge here that we were struggling with,

461
00:23:32,528 --> 00:23:35,110
we had this case like, we had a pretty good idea

462
00:23:35,110 --> 00:23:36,470
how fast it should be near the ground

463
00:23:36,470 --> 00:23:38,552
and how fast it should be up in the clouds.

464
00:23:38,552 --> 00:23:40,493
How do we make this feel very fluid?

465
00:23:40,493 --> 00:23:43,975
So when you dive down and fly downwards,

466
00:23:43,975 --> 00:23:46,836
how do you make it feel natural

467
00:23:46,836 --> 00:23:49,297
so you don't end up in this new gluey region

468
00:23:49,297 --> 00:23:51,619
where it's like, oh man, it's so much slower here.

469
00:23:52,139 --> 00:23:57,043
And I think the findings were that the longer, the bigger you make this

470
00:23:57,043 --> 00:24:00,465
transition region, the less of this effect you get.

471
00:24:00,465 --> 00:24:04,708
So once you have all these things in place, you're flying around, it feels

472
00:24:04,708 --> 00:24:09,572
great, you can explore anything in the world, but it still doesn't feel like

473
00:24:09,572 --> 00:24:10,993
as immersive as we want it to.

474
00:24:10,993 --> 00:24:17,898
We realized we need a rich soundscape that really sells this idea of flying.

475
00:24:17,898 --> 00:24:17,998
So.

476
00:24:20,327 --> 00:24:27,533
Ideally, in an ideal world, we have this location-based background sounds like wherever you go in

477
00:24:27,533 --> 00:24:31,356
the world, you can just listen to the sound and you know exactly where you are.

478
00:24:32,032 --> 00:24:37,317
Unfortunately, this is kind of a hard problem because it turns out that the planet is very big and we didn't really it was not

479
00:24:37,317 --> 00:24:41,702
Really feasible for our project. So instead we developed these

480
00:24:41,702 --> 00:24:44,405
four location neutral sound that can work anywhere

481
00:24:44,405 --> 00:24:46,928
Divided them into four different regions

482
00:24:46,928 --> 00:24:51,572
So we have a ground region was like things are very calm birds are chirping in the background

483
00:24:51,572 --> 00:24:54,115
Then a second region like more higher up

484
00:24:55,842 --> 00:24:57,743
almost close to the clouds, like it's very windy,

485
00:24:57,743 --> 00:25:00,104
it's like where the airplanes would go by.

486
00:25:00,104 --> 00:25:02,525
And then we have the atmosphere and space layer

487
00:25:02,525 --> 00:25:05,567
where things are much more base, it's rumbling.

488
00:25:05,567 --> 00:25:07,508
And then we take the user's altitude

489
00:25:07,508 --> 00:25:10,129
and blend between these background sounds

490
00:25:10,129 --> 00:25:11,489
based on the altitude.

491
00:25:11,489 --> 00:25:15,151
And a finding we had here was it worked much better

492
00:25:15,151 --> 00:25:17,692
to take this altitude, convert it into a logarithmic space,

493
00:25:17,692 --> 00:25:19,053
and then blend based on that value.

494
00:25:21,121 --> 00:25:22,522
We have this feature in EarthVR.

495
00:25:22,522 --> 00:25:25,984
The user can point at the sun and drag it

496
00:25:25,984 --> 00:25:27,785
to change the time of the day.

497
00:25:27,785 --> 00:25:31,567
And this caused that for every of these level of sounds,

498
00:25:31,567 --> 00:25:34,448
we needed two versions, one day version, one night version.

499
00:25:34,448 --> 00:25:36,309
And then we would just blend between them,

500
00:25:36,309 --> 00:25:38,550
depending on the time of the day.

501
00:25:38,550 --> 00:25:41,852
So for the initial launch, when all of these things

502
00:25:41,852 --> 00:25:45,554
were put together, it looked and felt and sounded

503
00:25:45,554 --> 00:25:46,455
like a little bit like this.

504
00:25:55,332 --> 00:25:59,254
I guess there's no sound, but...

505
00:25:59,254 --> 00:26:04,298
Should we make sound effects ourselves?

506
00:27:15,765 --> 00:27:21,090
Okay, and next up, now Dav is going to talk a little bit more about two of our most recent

507
00:27:21,090 --> 00:27:22,571
major features we added to Earth VR.

508
00:27:31,304 --> 00:27:32,345
Thank you, Per.

509
00:27:32,345 --> 00:27:33,666
Hi, everyone.

510
00:27:33,666 --> 00:27:36,328
I'm Nadav, and I'm a virtual reality engineer

511
00:27:36,328 --> 00:27:37,369
on Google Earth VR.

512
00:27:37,369 --> 00:27:41,271
And so Per and Adam talked to you guys a little bit

513
00:27:41,271 --> 00:27:45,214
about getting the basics right for Google Earth VR,

514
00:27:45,214 --> 00:27:48,057
so navigation and the right feel.

515
00:27:48,057 --> 00:27:50,018
And we had this app.

516
00:27:50,018 --> 00:27:51,919
We released this app last year.

517
00:27:51,919 --> 00:27:54,301
And when we gave it to the hands of our users,

518
00:27:54,301 --> 00:27:56,683
we noticed the first thing everyone wanted to try to do

519
00:27:56,683 --> 00:27:59,065
is to go to their home.

520
00:28:00,197 --> 00:28:02,219
Or in the case of the Bay Area, they

521
00:28:02,219 --> 00:28:05,962
wanted to go to the home that they wish they could own.

522
00:28:05,962 --> 00:28:09,965
Anyways, so a lot of our users maybe

523
00:28:09,965 --> 00:28:12,287
cannot find their home directly just by flying to it.

524
00:28:12,287 --> 00:28:16,410
So it would be nice if we could just give them a way

525
00:28:16,410 --> 00:28:18,352
to type in a query or their home address

526
00:28:18,352 --> 00:28:19,373
and to go to that place.

527
00:28:22,518 --> 00:28:24,800
So, we're Google, we're a search company.

528
00:28:24,800 --> 00:28:27,721
Search should be pretty easy for us, right?

529
00:28:27,721 --> 00:28:29,202
Well, we identified three components

530
00:28:29,202 --> 00:28:30,863
that we wanted to get right for search.

531
00:28:30,863 --> 00:28:33,765
The first one was input and UI,

532
00:28:33,765 --> 00:28:36,507
so letting users enter a query

533
00:28:36,507 --> 00:28:38,148
and easily selecting their destination.

534
00:28:39,569 --> 00:28:43,555
Then, once we select the destinations, we wanted to make sure the users know exactly

535
00:28:43,555 --> 00:28:46,879
where they are in space and that they selected the right place.

536
00:28:46,879 --> 00:28:51,465
And finally, we wanted to have a search pin that always tells them where their last search

537
00:28:51,465 --> 00:28:56,031
was so that if they lose their bearings while moving around, they can quickly jump back

538
00:28:56,031 --> 00:28:56,592
to where they were.

539
00:28:58,884 --> 00:29:01,886
So we started with keyboard exploration.

540
00:29:01,886 --> 00:29:03,387
And this was actually quite challenging

541
00:29:03,387 --> 00:29:04,147
because at the time,

542
00:29:04,147 --> 00:29:07,669
there was no good keyboard solution in virtual reality.

543
00:29:07,669 --> 00:29:10,271
There was the SteamVR keyboard,

544
00:29:10,271 --> 00:29:12,852
which we actually started to use for prototyping.

545
00:29:13,292 --> 00:29:14,673
And it was great for us initially,

546
00:29:14,673 --> 00:29:17,875
because we wanted to quickly set up a prototype

547
00:29:17,875 --> 00:29:21,037
and test search end-to-end.

548
00:29:21,037 --> 00:29:23,619
However, we found that we could not

549
00:29:23,619 --> 00:29:25,900
use it in the final version, because it was not

550
00:29:25,900 --> 00:29:27,742
customizable for our needs.

551
00:29:27,742 --> 00:29:30,123
And it was also not available on Oculus SDK,

552
00:29:30,123 --> 00:29:32,485
which we're planning on supporting at the time.

553
00:29:34,892 --> 00:29:36,333
So this is where Lullaby came in.

554
00:29:36,333 --> 00:29:40,095
Lullaby is an open source library for building VR and AR apps.

555
00:29:40,095 --> 00:29:46,258
It's developed internally at Google, and we use it for laying out our UI,

556
00:29:46,258 --> 00:29:52,622
and also for providing a keyboard to the user that they can use to type in a search query.

557
00:29:52,622 --> 00:29:55,744
And then we also show suggestions alongside it,

558
00:29:55,744 --> 00:30:00,886
so that you only have to type in a few letters and find the destination that you're looking for.

559
00:30:02,204 --> 00:30:07,090
And the great thing about this keyboard was that it was both available on Oculus and SteamVR,

560
00:30:07,090 --> 00:30:11,075
and it worked pretty well for our needs.

561
00:30:13,007 --> 00:30:15,448
So now that the user is able to type in a query

562
00:30:15,448 --> 00:30:17,889
and select their destination, we want

563
00:30:17,889 --> 00:30:21,491
to make sure that when we take them to that destination,

564
00:30:21,491 --> 00:30:23,132
they know exactly where they are and they

565
00:30:23,132 --> 00:30:24,132
know that it's the right place.

566
00:30:24,132 --> 00:30:27,374
And the challenges here are, what

567
00:30:27,374 --> 00:30:30,155
is the best scale, orientation, and altitude

568
00:30:30,155 --> 00:30:34,398
that we need to take the user to preserve their context?

569
00:30:34,398 --> 00:30:36,339
And when teleporting to a large area,

570
00:30:37,319 --> 00:30:41,443
like Paris, France, or Yellowstone National Park,

571
00:30:41,443 --> 00:30:46,807
we can use the same solution that Google Maps on desktop uses,

572
00:30:46,807 --> 00:30:48,249
where we teleport the user,

573
00:30:48,249 --> 00:30:52,192
we put the earth right in front of you,

574
00:30:52,192 --> 00:30:54,554
and we make the user scale very big

575
00:30:54,554 --> 00:30:56,415
so they can see the large area of Paris,

576
00:30:56,415 --> 00:30:59,018
or another area of interest that they're looking for.

577
00:31:00,247 --> 00:31:04,150
However, in Earth VR, for smaller search results,

578
00:31:04,150 --> 00:31:08,033
we wanted to place the user's feet on the ground.

579
00:31:08,033 --> 00:31:11,755
And that can be a big challenge, because in Earth VR,

580
00:31:11,755 --> 00:31:15,518
we can run into areas that have uneven and mountainous

581
00:31:15,518 --> 00:31:17,860
terrains, and we also have dense cities.

582
00:31:20,164 --> 00:31:23,166
So we had to come up with a clever solution for this

583
00:31:23,166 --> 00:31:26,728
to ensure that the user can always find

584
00:31:26,728 --> 00:31:29,450
where they're looking, what they're looking for.

585
00:31:29,450 --> 00:31:31,111
So we start with a basic scene.

586
00:31:31,111 --> 00:31:36,174
We have a house and we have some terrain around it.

587
00:31:36,174 --> 00:31:40,076
And the first thing that we found out

588
00:31:40,076 --> 00:31:41,958
was that it's important to put the user

589
00:31:41,958 --> 00:31:44,419
about two meters away from the place we're looking at

590
00:31:44,419 --> 00:31:47,301
because two meters gave us a comfortable viewing distance

591
00:31:47,301 --> 00:31:49,042
for the point of interest.

592
00:31:49,869 --> 00:31:52,871
And we also ensured that the user's feet

593
00:31:52,871 --> 00:31:54,732
are right on the ground so that they don't feel like

594
00:31:54,732 --> 00:31:56,653
they're intersecting with the geometry

595
00:31:56,653 --> 00:32:00,536
or floating up in space.

596
00:32:00,536 --> 00:32:03,257
Then to highlight the point of interest,

597
00:32:03,257 --> 00:32:08,040
we add a search pin and we ensure that the user's gaze

598
00:32:08,040 --> 00:32:11,382
towards the search pin is at 15 degrees down

599
00:32:11,382 --> 00:32:15,365
because that gives the user a comfortable

600
00:32:15,365 --> 00:32:16,686
resting position for their eyes.

601
00:32:20,339 --> 00:32:23,959
So now that we have the spin, what do we do when the user moves around it?

602
00:32:25,505 --> 00:32:28,727
So again, the problem we're trying to solve

603
00:32:28,727 --> 00:32:31,490
with the search pin is we wanted people to see

604
00:32:31,490 --> 00:32:33,351
exactly where their search was,

605
00:32:33,351 --> 00:32:36,434
and as they're moving around Earth,

606
00:32:36,434 --> 00:32:38,796
they'll be able to come back to the last search location

607
00:32:38,796 --> 00:32:40,817
if they've lost their bearings.

608
00:32:40,817 --> 00:32:43,840
So we wanna keep this pin in view,

609
00:32:43,840 --> 00:32:45,741
regardless of scale, distance,

610
00:32:45,741 --> 00:32:48,644
or whether it gets hidden by buildings and terrain.

611
00:32:48,644 --> 00:32:51,946
And we wanna make sure that it's always legible

612
00:32:51,946 --> 00:32:52,987
and does not break immersion.

613
00:32:55,373 --> 00:33:02,355
To solve the problem of occlusion, we came up with a solution where we render the pin

614
00:33:02,355 --> 00:33:03,776
at two passes.

615
00:33:03,776 --> 00:33:08,017
We render the pin in a first pass with full opacity and with depth testing.

616
00:33:08,017 --> 00:33:13,079
And so that's what you see when the pin is not occluded by any buildings.

617
00:33:13,079 --> 00:33:18,060
And we also render a second pass with 50% opacity and without depth testing.

618
00:33:18,060 --> 00:33:22,002
So that when the pin gets occluded by buildings, you can still see it.

619
00:33:22,462 --> 00:33:25,443
but faded out a little bit, which ensured that

620
00:33:25,443 --> 00:33:29,024
we don't break too much immersion with a behavior

621
00:33:29,024 --> 00:33:30,925
that you won't see in real life.

622
00:33:30,925 --> 00:33:35,807
So what do we do about scaling the pin

623
00:33:35,807 --> 00:33:37,868
when we move further away from it?

624
00:33:37,868 --> 00:33:41,470
Or when we go up in scale?

625
00:33:41,470 --> 00:33:47,112
We begin with a naive approach of just keeping

626
00:33:47,112 --> 00:33:49,533
a constant scale for the pin in world space.

627
00:33:50,413 --> 00:33:55,495
And what happens when you scale up is the pin starts to shrink a little bit.

628
00:33:55,495 --> 00:33:58,096
It's still visible in higher scales.

629
00:33:58,096 --> 00:34:01,777
But when we go all the way to planet scale,

630
00:34:01,777 --> 00:34:04,957
the pin can become very small and not legible.

631
00:34:04,957 --> 00:34:08,538
So we wanted to make sure that the pin is still visible and

632
00:34:08,538 --> 00:34:12,460
legible even at these far distances and high scales.

633
00:34:13,442 --> 00:34:18,625
So what we found worked pretty well is using a formula that

634
00:34:18,625 --> 00:34:23,028
uses the distance in world space between the search pin

635
00:34:23,028 --> 00:34:25,409
and the user's head.

636
00:34:25,409 --> 00:34:30,012
And we multiply that by some base scale in world space

637
00:34:30,012 --> 00:34:33,454
with dampening so that as you go further and further away

638
00:34:33,454 --> 00:34:36,376
from the pin, it still scales up and it still stays in view.

639
00:34:36,376 --> 00:34:38,778
But it does so more slowly, so it still

640
00:34:38,778 --> 00:34:40,699
appears like it's getting further and further away

641
00:34:40,699 --> 00:34:41,019
from you.

642
00:34:41,680 --> 00:34:45,083
And this ensures that we don't break immersion, but we still keep the tin in view.

643
00:34:45,083 --> 00:34:50,788
And the solution also works when we scale up the viewer.

644
00:34:58,309 --> 00:35:00,750
So to recap all the things that we needed for search.

645
00:35:00,750 --> 00:35:03,771
So these are the three components

646
00:35:03,771 --> 00:35:06,992
that we really needed to get right in virtual reality.

647
00:35:06,992 --> 00:35:09,553
We needed a rock solid text entry, which was not

648
00:35:09,553 --> 00:35:13,374
available before, for users to enter a query

649
00:35:13,374 --> 00:35:15,995
and select their destination as fast as possible.

650
00:35:16,896 --> 00:35:21,720
Second, we needed to take user to the desired point of interest at a comfortable distance

651
00:35:21,720 --> 00:35:23,661
and a viewing angle.

652
00:35:23,661 --> 00:35:27,905
And we needed to make sure that the pin stays always visible so that as the user is moving

653
00:35:27,905 --> 00:35:33,289
around they know where their last search was and they can get their bearings that way.

654
00:35:36,112 --> 00:35:41,917
So we had a launch for EarthVR exactly last week.

655
00:35:41,917 --> 00:35:45,981
And we, for that launch, focused on enabling Street View,

656
00:35:45,981 --> 00:35:48,583
which was another one of our most requested features.

657
00:35:49,804 --> 00:35:51,786
And we've actually been thinking about Street View

658
00:35:51,786 --> 00:35:53,047
for a long time.

659
00:35:53,047 --> 00:35:56,010
So in the summer of 2015, the Earth VR team

660
00:35:56,010 --> 00:35:58,553
went to see Inside Out by Pixar.

661
00:35:58,553 --> 00:36:01,936
And we saw the memory spheres in Inside Out.

662
00:36:01,936 --> 00:36:04,039
And we were really inspired to try

663
00:36:04,039 --> 00:36:06,381
to do something with memory spheres in virtual reality.

664
00:36:06,381 --> 00:36:09,224
So we came up with a prototype that uses

665
00:36:09,224 --> 00:36:11,446
photospheres placed around Manhattan.

666
00:36:12,147 --> 00:36:15,508
And the users can move around Manhattan,

667
00:36:15,508 --> 00:36:17,448
point and click at a photosphere,

668
00:36:17,448 --> 00:36:20,149
and put it on top of their head,

669
00:36:20,149 --> 00:36:22,490
and view the entire full 360 photo.

670
00:36:22,490 --> 00:36:27,751
We found it was a very compelling use case for photospheres,

671
00:36:27,751 --> 00:36:29,852
but we also thought that,

672
00:36:29,852 --> 00:36:32,092
or we also at the time were focusing on getting

673
00:36:32,092 --> 00:36:35,353
the core features of navigation in Earth VR.

674
00:36:35,353 --> 00:36:37,254
So we had to table these ideas for later.

675
00:36:39,177 --> 00:36:44,680
But a little bit about why Street View is important for us is because a lot of cities

676
00:36:44,680 --> 00:36:49,142
on Earth VR do not actually have 3D data, like Tel Aviv here.

677
00:36:49,142 --> 00:36:54,544
But the city does have Street View, and it would be awesome if the user can explore the

678
00:36:54,544 --> 00:36:59,086
city using Street View rather than just looking at a flat satellite image.

679
00:37:01,570 --> 00:37:06,755
Even in cities that do have a street view, like Paris for example, we can still get a

680
00:37:06,755 --> 00:37:11,840
lot of value from jumping in a street view image because we can see the city at night

681
00:37:11,840 --> 00:37:14,323
and we can see the people walking around in that city.

682
00:37:14,323 --> 00:37:19,528
And we believe that it also provides a much more immersive and intimate experience.

683
00:37:22,488 --> 00:37:28,733
So the two components we identified for Street View

684
00:37:28,733 --> 00:37:30,775
to be really good in virtual reality

685
00:37:30,775 --> 00:37:32,896
were showing Street View availability,

686
00:37:32,896 --> 00:37:35,779
so telling the player when they will actually be able

687
00:37:35,779 --> 00:37:37,180
to enter a Street View panel.

688
00:37:37,180 --> 00:37:41,843
And secondly, we wanted to give users an intuitive

689
00:37:41,843 --> 00:37:45,066
and quick way to enter and exit Street View.

690
00:37:46,742 --> 00:37:49,743
So we anchored our initial explorations and prototyping

691
00:37:49,743 --> 00:37:52,965
in the solution that's in Google Maps.

692
00:37:52,965 --> 00:37:56,728
So Google Maps gives you coverage layers

693
00:37:56,728 --> 00:37:58,709
that show where Street View is available in blue,

694
00:37:58,709 --> 00:38:00,290
and they give you this peg man

695
00:38:00,290 --> 00:38:01,751
that you can just drop into place

696
00:38:01,751 --> 00:38:05,993
and enter the panel that's in that location.

697
00:38:05,993 --> 00:38:09,636
So we experimented with this in Google Earth VR,

698
00:38:09,636 --> 00:38:15,099
and we also tried to enable entering Street View

699
00:38:15,099 --> 00:38:16,320
using these coverage layers.

700
00:38:17,549 --> 00:38:23,854
But we found two non-trivial, two problems with these coverage layers.

701
00:38:23,854 --> 00:38:27,336
And one that it was non-trivial to overlay them on top of the earth

702
00:38:27,336 --> 00:38:34,602
because the terrain is uneven and it can look pretty odd when you get up close to the road

703
00:38:34,602 --> 00:38:37,664
and you see this blue line around it.

704
00:38:37,664 --> 00:38:43,949
And in places that have a lot of street view coverage, it can get pretty messy

705
00:38:43,949 --> 00:38:45,951
to render so many lines around you.

706
00:38:47,543 --> 00:38:53,445
We were also inspired to try out the pegman dropping gesture from maps.

707
00:38:53,445 --> 00:39:05,208
That's all I'll say about that.

708
00:39:05,208 --> 00:39:06,948
So we had to...

709
00:39:07,685 --> 00:39:09,386
we had to go back to the drawing board

710
00:39:09,386 --> 00:39:14,209
and find a better solution for street view

711
00:39:14,209 --> 00:39:15,850
and virtual reality.

712
00:39:15,850 --> 00:39:19,513
So what we found was the best experience

713
00:39:19,513 --> 00:39:21,915
was let's say we have a user standing around the city

714
00:39:21,915 --> 00:39:25,957
and they have their controller with the globe

715
00:39:25,957 --> 00:39:27,118
or map on their left hand.

716
00:39:27,118 --> 00:39:30,941
And right now street view is not available

717
00:39:30,941 --> 00:39:32,402
because the user is at a high scale.

718
00:39:33,490 --> 00:39:36,851
So we have a threshold, visualized in blue,

719
00:39:36,851 --> 00:39:39,453
that once the user goes below,

720
00:39:39,453 --> 00:39:44,415
we show you a ripple effect,

721
00:39:44,415 --> 00:39:45,976
notifying that Street View is available,

722
00:39:45,976 --> 00:39:50,978
and then we also put a preview of your Street View

723
00:39:50,978 --> 00:39:54,200
that's showing up right below your feet.

724
00:39:54,200 --> 00:39:56,861
So you can see a quick video of how this works here,

725
00:39:56,861 --> 00:39:58,682
where the user is flying down,

726
00:39:58,682 --> 00:40:00,883
and as they go below the threshold,

727
00:40:00,883 --> 00:40:02,664
we pop up a Street View preview image.

728
00:40:05,747 --> 00:40:08,189
And as the user flies out of the Street View,

729
00:40:08,189 --> 00:40:11,532
we show an icon to display that it's unavailable.

730
00:40:11,532 --> 00:40:18,998
For entering Street View, we first

731
00:40:18,998 --> 00:40:20,899
tried letting the user hold the bubble.

732
00:40:21,833 --> 00:40:23,694
point at it with their right hand,

733
00:40:23,694 --> 00:40:25,614
and then pull the trigger to enter.

734
00:40:25,614 --> 00:40:27,555
We found that that was a pretty easy way

735
00:40:27,555 --> 00:40:29,235
to enter and exit Street View,

736
00:40:29,235 --> 00:40:33,116
but our users didn't intuitively understand this gesture.

737
00:40:33,116 --> 00:40:34,996
What they tried to do is take the bubble

738
00:40:34,996 --> 00:40:36,996
and put it directly on top of their head,

739
00:40:36,996 --> 00:40:40,997
just like the Photospheres demo that I showed you earlier.

740
00:40:40,997 --> 00:40:44,038
So we listened to our user feedback,

741
00:40:44,038 --> 00:40:46,338
and we implemented this gesture

742
00:40:46,338 --> 00:40:48,518
that allows the user just to quickly

743
00:40:48,518 --> 00:40:49,939
put Street View over their head,

744
00:40:49,939 --> 00:40:51,539
and then to pull it out when they want to exit.

745
00:40:54,629 --> 00:40:59,712
To summarize, these were the two components that were really important for Street View

746
00:40:59,712 --> 00:41:00,513
and Earth VR.

747
00:41:00,513 --> 00:41:06,657
The first one, notifying the user that Street View is available on their left controller

748
00:41:06,657 --> 00:41:10,299
and showing a preview of Street View on their left hand so that they can choose whether

749
00:41:10,299 --> 00:41:15,182
they want to enter or just skip that current Street View panel.

750
00:41:15,927 --> 00:41:23,473
And secondly, we needed to provide the intuitive peek gesture of putting the bubble on top

751
00:41:23,473 --> 00:41:26,736
of their head and removing it so that they can do so very quickly.

752
00:41:26,736 --> 00:41:28,698
And thank you very much for coming to this talk and listening to us.

753
00:41:28,698 --> 00:41:29,118
Thank you.

754
00:41:29,118 --> 00:41:30,919
Thank you.

755
00:41:30,919 --> 00:41:31,240
Thank you.

756
00:41:31,240 --> 00:41:31,980
Thank you.

757
00:41:31,980 --> 00:41:32,240
Thank you.

758
00:41:32,240 --> 00:41:32,521
Thank you.

759
00:41:32,521 --> 00:41:32,821
Thank you.

760
00:41:32,821 --> 00:41:33,081
Thank you.

761
00:41:33,081 --> 00:41:33,702
Thank you.

762
00:41:33,702 --> 00:41:34,342
Thank you.

763
00:41:34,342 --> 00:41:34,903
Thank you.

764
00:41:40,795 --> 00:41:42,135
And we'll also do a Q&A now.

765
00:41:42,135 --> 00:41:47,037
If you want to come up to the mic and speak to the microphone,

766
00:41:47,037 --> 00:41:52,259
we'd love to answer your questions.

767
00:41:52,259 --> 00:41:52,879
Hi, guys.

768
00:41:52,879 --> 00:41:54,360
Great talk.

769
00:41:54,360 --> 00:41:56,181
I had a question.

770
00:41:56,181 --> 00:42:00,082
When you were doing user testing,

771
00:42:00,082 --> 00:42:03,624
how did you quantitatively measure

772
00:42:03,624 --> 00:42:08,065
user comfort and discomfort with the various UX components?

773
00:42:08,065 --> 00:42:09,146
You have to, I think, press the button.

774
00:42:09,146 --> 00:42:09,606
Oh, there's a button.

775
00:42:09,606 --> 00:42:09,646
OK.

776
00:42:10,398 --> 00:42:11,738
Really? Does that work? Okay.

777
00:42:11,738 --> 00:42:16,980
Yeah, so the question was how do we test for discomfort?

778
00:42:16,980 --> 00:42:22,141
Well, before even testing, we needed to recruit people,

779
00:42:22,141 --> 00:42:27,303
and we needed to understand sort of their typical level of discomfort.

780
00:42:27,303 --> 00:42:30,704
So we asked questions like, when you're on a bus, and you're working,

781
00:42:30,704 --> 00:42:33,505
do you get sick, or do you get sick when you're flying?

782
00:42:34,065 --> 00:42:39,112
voting. And so we did as much pre-questions as we could to sort of screen, you know,

783
00:42:39,112 --> 00:42:42,997
is this a person that typically gets sick? And we actually isolated studies where we had.

784
00:42:43,709 --> 00:42:48,492
people, large groups of people that weren't susceptible to sickness and large groups that

785
00:42:48,492 --> 00:42:51,334
we knew were extreme candidates.

786
00:42:51,334 --> 00:42:57,718
And then we would do things like when we were experimenting with tunnel vision, we'd have

787
00:42:57,718 --> 00:43:05,182
like tests where we make them fly down a street with buildings flying by and basically like

788
00:43:05,182 --> 00:43:06,503
put them in the worst case scenarios.

789
00:43:08,976 --> 00:43:13,942
I'm not exactly sure like what the researchers did to mark down

790
00:43:13,942 --> 00:43:18,087
What happened beyond just like is the user feeling sick or not?

791
00:43:18,087 --> 00:43:20,090
But they did they did follow up with them

792
00:43:20,090 --> 00:43:25,696
you know during the study after the study and then like a few hours after the study and even the next day and

793
00:43:26,097 --> 00:43:28,958
Because sometimes the effects of VR don't manifest themselves

794
00:43:28,958 --> 00:43:32,059
until they leave the room and then they go back to work

795
00:43:32,059 --> 00:43:36,260
and they're like, oh man, I have a headache.

796
00:43:36,260 --> 00:43:37,601
So it took a lot of work.

797
00:43:37,601 --> 00:43:41,242
I think that was probably the hardest part for that.

798
00:43:41,242 --> 00:43:46,464
This may not be the right question for the devs,

799
00:43:46,464 --> 00:43:48,704
but what is the licensing?

800
00:43:48,704 --> 00:43:51,345
We create school curriculum.

801
00:43:51,345 --> 00:43:55,267
What's the licensing for use of this in that type of a product?

802
00:43:58,920 --> 00:44:04,021
Can you clarify? You're asking about the licensing for Google Earth Creator?

803
00:44:04,021 --> 00:44:12,004
We do. One of the things are field trips, virtual field trips to Kitty Hawk or the Redwood Forest.

804
00:44:12,004 --> 00:44:19,487
Instead of just having a field trip there with a 360 camera, it would be cool to intro that by coming in from above,

805
00:44:19,487 --> 00:44:22,248
landing there, and then doing the virtual field trip on location.

806
00:44:24,371 --> 00:44:29,536
So currently we don't have like an open license or way for developers to use this

807
00:44:29,536 --> 00:44:32,398
But it's something we're really interested in

808
00:44:37,447 --> 00:44:45,213
Hey guys. I know Google has filed some patents on some of the UX that they're developing in VR.

809
00:44:45,213 --> 00:44:48,275
I'm wondering what you guys feel about that.

810
00:44:48,275 --> 00:44:53,540
If it should be something where if you found something that really works,

811
00:44:53,540 --> 00:44:54,641
that it should only work for your company or...

812
00:44:54,641 --> 00:44:58,924
Oh, not at all. Google files patents that are defensive.

813
00:44:58,924 --> 00:45:03,268
So we're not interested in blocking other companies from using these things.

814
00:45:03,708 --> 00:45:05,709
which is why we're sharing this stuff,

815
00:45:05,709 --> 00:45:08,571
and we hope that you guys can learn from it and build on it.

816
00:45:08,571 --> 00:45:19,178
Having used Google VR for a while,

817
00:45:19,178 --> 00:45:21,619
I found it to be a really wonderful experience.

818
00:45:21,619 --> 00:45:24,401
I'm just wondering what you guys as the devs

819
00:45:24,401 --> 00:45:29,044
think of the future applications for this particular product.

820
00:45:29,044 --> 00:45:32,706
What do you want Google Earth VR to be in two years from now?

821
00:45:35,935 --> 00:45:39,879
It's a very loaded question, but a great one too.

822
00:45:39,879 --> 00:45:45,584
We have a lot of ideas.

823
00:45:45,584 --> 00:45:48,787
We're still trying to figure out our direction as well as we go.

824
00:45:48,787 --> 00:45:50,649
We're always trying new things.

825
00:45:50,649 --> 00:45:57,135
We're always experimenting with new ways that Earth can be in VR.

826
00:46:03,991 --> 00:46:07,353
Hi, for your testing process, you said you recruited people.

827
00:46:07,353 --> 00:46:10,375
So were they various levels of expertise

828
00:46:10,375 --> 00:46:11,156
as far as computer use?

829
00:46:11,156 --> 00:46:12,937
Yeah.

830
00:46:12,937 --> 00:46:16,439
Yeah, during the recruiting, we would also

831
00:46:16,439 --> 00:46:20,342
screen for experience with gaming and VR.

832
00:46:20,342 --> 00:46:24,225
So we had checklists like, have you tried Cardboard or Gear

833
00:46:24,225 --> 00:46:25,726
VR or DK1 or that sort of thing.

834
00:46:25,726 --> 00:46:28,848
So yeah, so that was part of our one way

835
00:46:28,848 --> 00:46:31,110
that we sort of

836
00:46:32,028 --> 00:46:35,931
we're more sure about our findings, in terms of how experienced people were.

837
00:46:35,931 --> 00:46:45,718
Great. And to just springboard off that, what size of a pool for a prototype would you find,

838
00:46:45,718 --> 00:46:50,682
okay, this size pool gave me useful data on a prototype, whether it was working or not working?

839
00:46:51,788 --> 00:46:57,033
Yeah, so, I mean, if you've ever done a user study,

840
00:46:57,033 --> 00:47:00,476
like, you could bring in like four or five people,

841
00:47:00,476 --> 00:47:03,618
and if they're all, you know, throwing off the headset

842
00:47:03,618 --> 00:47:07,261
or getting frustrated, you know you've done something wrong.

843
00:47:07,261 --> 00:47:09,683
So, you know, sometimes we'd try things

844
00:47:09,683 --> 00:47:11,465
and we just immediately know we got it wrong,

845
00:47:11,465 --> 00:47:13,987
and then the next day we had people queued up,

846
00:47:13,987 --> 00:47:16,589
we would tweak stuff that night and try things out.

847
00:47:16,589 --> 00:47:18,350
So some iterations were much quicker.

848
00:47:19,142 --> 00:47:24,628
And then some were much slower where everything we were trying wasn't working or it was subtle.

849
00:47:24,628 --> 00:47:31,115
We weren't sure where things were breaking and for those we ended up having to do longer term studies over months.

850
00:47:36,027 --> 00:47:38,348
Hey guys, cool stuff, thanks for sharing.

851
00:47:38,348 --> 00:47:42,030
You know, I've observed the same thing as you,

852
00:47:42,030 --> 00:47:44,471
which is a lot of people go view their own home

853
00:47:44,471 --> 00:47:46,732
or places they've lived as a first experience,

854
00:47:46,732 --> 00:47:47,633
and I think that's awesome.

855
00:47:47,633 --> 00:47:51,315
And building on that, I feel like making this experience

856
00:47:51,315 --> 00:47:52,995
more personal to individuals would be like

857
00:47:52,995 --> 00:47:55,557
a really important thing to do moving forward.

858
00:47:55,557 --> 00:47:57,258
And so like, I just wanna give you an idea.

859
00:47:57,258 --> 00:47:58,498
I do a lot of mountaineering,

860
00:47:58,498 --> 00:48:00,859
and I have a decade worth of my GPS tracks

861
00:48:00,859 --> 00:48:05,442
that I use a lot on desktop Google VR, or Google Earth.

862
00:48:05,706 --> 00:48:14,132
So I was just wondering, you know, are you thinking about supporting KML or GPX file formats and when?

863
00:48:14,132 --> 00:48:21,498
Or, okay, here's another one. How about live location data from like, I want to see where my wife is right now.

864
00:48:21,498 --> 00:48:22,258
Thank you.

865
00:48:22,258 --> 00:48:34,968
Not sure about the, is this on? Yeah, not sure about the last one. But I think supporting KML data, it's like, have been brought up before. It's just been more of like,

866
00:48:35,613 --> 00:48:39,098
Prioritizing things, it's cool.

867
00:48:39,098 --> 00:48:40,340
I think in some cases, like,

868
00:48:40,340 --> 00:48:42,243
we thought S3D was cool for the time being,

869
00:48:42,243 --> 00:48:44,407
and now we just have to sit down,

870
00:48:44,407 --> 00:48:46,109
like, okay, what's next, what do we do?

871
00:48:46,109 --> 00:48:48,793
We're not sure, but I think it's great, great suggestions.

872
00:48:50,493 --> 00:48:52,354
Hi guys, thanks for the talk.

873
00:48:52,354 --> 00:48:56,075
Google Earth is also for me one of the best experience,

874
00:48:56,075 --> 00:48:57,496
super intuitive.

875
00:48:57,496 --> 00:49:00,797
When I tried it last year with my colleagues,

876
00:49:00,797 --> 00:49:03,858
we tried one by one and we could see with the screen what

877
00:49:03,858 --> 00:49:05,459
is doing the person who is in VR.

878
00:49:05,459 --> 00:49:08,980
So my question would be, do you have in mind

879
00:49:08,980 --> 00:49:12,361
to maybe make it like social directly, multi headset

880
00:49:12,361 --> 00:49:13,742
with two or more people at the same time?

881
00:49:13,742 --> 00:49:14,742
I think that's a really cool idea.

882
00:49:21,195 --> 00:49:25,217
Once again, a lot of the base of application

883
00:49:25,217 --> 00:49:26,698
is built in native.

884
00:49:26,698 --> 00:49:30,099
So we have all these great ideas.

885
00:49:30,099 --> 00:49:31,560
Some things take longer than others.

886
00:49:31,560 --> 00:49:34,561
And we just have to rank them and how important they are.

887
00:49:34,561 --> 00:49:37,263
I think I've heard this idea before.

888
00:49:37,263 --> 00:49:38,163
And it sounds awesome.

889
00:49:38,163 --> 00:49:41,064
I would love to sit in front of a computer and maybe take

890
00:49:41,064 --> 00:49:44,766
whoever's in the headset doing tours or something like that.

891
00:49:44,766 --> 00:49:46,287
I think it would be great.

892
00:49:49,992 --> 00:49:53,915
Hi, so first off, like the other people said, spectacular work.

893
00:49:53,915 --> 00:49:55,297
It's a killer app.

894
00:49:55,297 --> 00:49:56,438
Everybody loves it.

895
00:49:56,438 --> 00:49:57,639
So Bravo.

896
00:49:57,639 --> 00:50:02,804
Um, two questions on the, um, uh, the, the, uh,

897
00:50:03,397 --> 00:50:09,159
tunnel vision, I believe you called it, a feature that you did, you said that 15,

898
00:50:09,159 --> 00:50:11,279
enough, it was enough to give about 15% of the,

899
00:50:11,279 --> 00:50:14,581
of the visible pixels kind of view of the grid or the floor to let people ground

900
00:50:14,581 --> 00:50:18,382
themselves. Some of the views you showed were kind of pre distortion versus

901
00:50:18,382 --> 00:50:20,463
after. So was that, uh,

902
00:50:20,463 --> 00:50:24,324
of the total or was there also kind of a blacking out, uh,

903
00:50:24,324 --> 00:50:27,485
that was also being done?

904
00:50:27,485 --> 00:50:28,686
Oh yeah. In the examples I showed,

905
00:50:28,686 --> 00:50:32,507
I did I blacked out to simulate more what it looks like when you're looking.

906
00:50:32,999 --> 00:50:38,287
In the other screen recordings, they were from the view that's shown on Windows, and

907
00:50:38,287 --> 00:50:40,551
that doesn't have any blackout.

908
00:50:40,551 --> 00:50:46,500
So it looks like a lot more, but when you're looking through, you're actually only seeing

909
00:50:46,500 --> 00:50:47,802
this little trim.

910
00:50:48,523 --> 00:50:57,211
But effectively that's the end the end result that you were simulating. Yeah, okay, and then the the second question was with regards to the

911
00:50:57,211 --> 00:51:03,817
You know all of the controller schemes you showed were using the vive controller, and you talked about wanting to support oculus

912
00:51:03,817 --> 00:51:05,619
There's a ton of people working on

913
00:51:05,619 --> 00:51:10,043
other controllers and gloves and all kinds of stuff have you thought about

914
00:51:10,482 --> 00:51:13,944
Are you going to support these one at a time or have you thought about making it kind of,

915
00:51:13,944 --> 00:51:20,068
taking your set of functions and then providing a way for people to map them to other controllers you haven't thought of?

916
00:51:20,068 --> 00:51:27,252
Yeah, we could provide a mapping file that people could do, but to get the,

917
00:51:27,252 --> 00:51:32,615
to make it intuitive for people to just grab a controller and look down and see tool tips and all this stuff,

918
00:51:32,615 --> 00:51:34,497
we have to do custom work for each one.

919
00:51:35,402 --> 00:51:38,744
like just doing Oculus was pretty different.

920
00:51:38,744 --> 00:51:41,086
We had to rethink how things were mapped.

921
00:51:41,086 --> 00:51:44,068
We even had to tweak the controller model a little bit

922
00:51:44,068 --> 00:51:47,070
to make it more intuitive.

923
00:51:47,070 --> 00:51:48,531
So we'd like to support everything,

924
00:51:48,531 --> 00:51:52,093
but we're just currently just on track

925
00:51:52,093 --> 00:51:55,455
to support the major ones that people are using.

926
00:51:55,455 --> 00:51:56,596
Okay, thanks.

927
00:51:56,596 --> 00:51:57,636
Yeah.

928
00:51:57,636 --> 00:52:00,898
Just one more thing about the tunnel vision size.

929
00:52:01,799 --> 00:52:07,206
The size we picked was a little bit larger than what we actually needed,

930
00:52:07,206 --> 00:52:11,251
and that's because when people have glasses in the headset,

931
00:52:11,251 --> 00:52:16,839
or with some headsets you could push the screen a little further away from your eyes.

932
00:52:16,839 --> 00:52:19,542
So when you had it at that max setting, you couldn't see it.

933
00:52:20,597 --> 00:52:22,958
But if we, you know, in the future, potentially,

934
00:52:22,958 --> 00:52:24,779
we can control that a little bit better,

935
00:52:24,779 --> 00:52:28,422
or maybe even know what setting that's at,

936
00:52:28,422 --> 00:52:33,425
we could even reduce tunnel vision quite a bit more.

937
00:52:33,425 --> 00:52:35,166
So, yeah.

938
00:52:35,166 --> 00:52:37,207
Hi, thanks for the great sharing.

939
00:52:37,207 --> 00:52:42,931
So, Google released the ARCore a few weeks ago,

940
00:52:42,931 --> 00:52:43,812
so I'm wondering.

941
00:52:44,337 --> 00:52:49,486
if you are currently designing the UX for the AR or mixed reality?

942
00:52:49,486 --> 00:52:57,121
If not, so what are the main challenges or problems you are anticipating regarding to designing for that part?

943
00:53:01,081 --> 00:53:03,743
It's something that we would like to do.

944
00:53:03,743 --> 00:53:08,866
We have experiments where we've brought Earth into unity and tried things like this out,

945
00:53:08,866 --> 00:53:16,411
so it's not particularly difficult, but it's something that we're really interested in.

946
00:53:16,411 --> 00:53:21,814
Cool, thank you very much for coming.

