1
00:00:08,547 --> 00:00:09,547
You are at the right session.

2
00:00:09,587 --> 00:00:12,829
This is a visual guide to quaternions and dual quaternions.

3
00:00:13,409 --> 00:00:14,730
A quaternion is something like this.

4
00:00:14,990 --> 00:00:16,891
It's a rotation in three-dimensional space.

5
00:00:17,511 --> 00:00:26,775
And a dual quaternion is a slightly broader class of object that we'll be talking about in the second half of the talk, which can do 3D translations and rotation and translations.

6
00:00:27,436 --> 00:00:28,736
First, a little bit about me, though.

7
00:00:29,036 --> 00:00:31,858
I'm a graphics researcher at Imagination Technologies.

8
00:00:32,748 --> 00:00:32,808
we

9
00:00:50,885 --> 00:00:57,186
that this phrase, quaternions are four-dimensional, is a useless and damaging thing to say.

10
00:00:58,707 --> 00:01:00,367
I'm not saying that it's exactly false.

11
00:01:00,507 --> 00:01:05,368
I'd say that it's about as true as saying that a three-by-three matrix is nine-dimensional.

12
00:01:06,328 --> 00:01:16,891
But in particular, while I'm a huge fan of 3Blue1Brown and Numberphile, because they give an explanation of quaternions based on this phrase, yeah, it's not a great explanation.

13
00:01:17,819 --> 00:01:29,293
So sections of this talk, first I'll talk about how every quaternion is a mixture of some amount of line, which does a 180 degree rotation, and some amount of identity, which does a 0 degree rotation.

14
00:01:29,713 --> 00:01:35,300
If you don't know what this means, don't worry whatsoever, I'm going to go through it very very slowly and clearly.

15
00:01:35,820 --> 00:01:43,805
And then in section two, we're going to move away from the origin, and we're going to see how and why to use dual quaternions.

16
00:01:43,825 --> 00:01:45,066
This is the identity, by the way.

17
00:01:45,386 --> 00:01:52,870
This is a line, and dual quaternions allow you to do rotations around the lines that are not through the origin.

18
00:01:52,890 --> 00:01:58,854
It allows you to do rotations around arbitrary lines, and also to get rid of this problem that we see here, that we call the candy wrapper effect.

19
00:01:59,654 --> 00:02:00,995
Okay, so part one.

20
00:02:01,556 --> 00:02:13,045
A quaternion is a mixture of some amount of line, which rotates by 180 degrees, and some amount of identity, which rotates by zero degrees.

21
00:02:14,787 --> 00:02:19,991
First we'll talk about quaternions that rotate by 180 degrees, which we visualize as lines through the origin.

22
00:02:20,291 --> 00:02:21,052
So here's a quaternion.

23
00:02:22,228 --> 00:02:22,328
it's

24
00:02:43,154 --> 00:02:43,394
All right.

25
00:02:44,255 --> 00:02:47,016
The y-axis, we're going like this, all right?

26
00:02:47,516 --> 00:02:54,639
That's what this quaternion does, which kind of makes sense, because it's got y equal to one, everything else equal to zero, and we can visualize it this way.

27
00:02:55,900 --> 00:03:03,143
This quaternion is a 180 degree rotation around the z-axis, so it turns the cow upside down.

28
00:03:03,263 --> 00:03:09,566
Here's our z-axis, and if I rotate around here, I go from this to this, all right?

29
00:03:10,867 --> 00:03:10,967
And

30
00:03:11,752 --> 00:03:11,812
we

31
00:03:31,397 --> 00:03:36,300
This seems a heck of a lot like a vector, so why don't you visualize it like a vector, right?

32
00:03:36,800 --> 00:03:39,481
I mean, you could just have the x part and the y part and the z part of a vector.

33
00:03:39,942 --> 00:03:45,465
Well, I put to you that this is a much better way of thinking about at least these quaternions in particular.

34
00:03:46,245 --> 00:03:58,552
The way that we're going, so, you know, it's got x-coordinate, y-coordinate, and a z-coordinate, and the way we go from this vector to what I've got here is that we put an arrow going around that vector according to the right-hand rule.

35
00:03:59,997 --> 00:04:03,939
then we extrude the shaft of the vector, and then we get rid of the head.

36
00:04:04,339 --> 00:04:06,800
And getting rid of the head throws away information.

37
00:04:06,860 --> 00:04:12,063
You can't see how long the vector was anymore, but you do sort of know which direction it was pointing in.

38
00:04:12,123 --> 00:04:20,066
You know, because of the right-hand rule, it was pointing in this direction, because if it was pointing in the other direction, then this arrow would be going around the other way by 180 degrees.

39
00:04:25,233 --> 00:04:26,613
better be careful with my microphone.

40
00:04:26,933 --> 00:04:30,354
Quaternion multiplication is rotation composition.

41
00:04:30,814 --> 00:04:31,694
What do I mean by that?

42
00:04:31,734 --> 00:04:46,438
Well, rotation composition, so we start out with a rotation that's like this one, this is a 180 degree rotation around the y-axis, and if we then follow that up with a 180 degree rotation around the z-axis, so we're sort of going like this and then like

43
00:04:47,799 --> 00:04:52,002
like this and then like this, well, whatever, something like that.

44
00:04:53,103 --> 00:04:54,704
It's a rotation composition.

45
00:04:55,005 --> 00:04:59,308
And you can ask the question, what if we wanted to go straight from here to here?

46
00:04:59,748 --> 00:05:03,471
And the answer is that that is a 180 degree rotation around the z-axis.

47
00:05:03,671 --> 00:05:10,476
Do you know what, I think I, yeah, I should have said y-axis and then x-axis, and this gives you a 180 around the z-axis.

48
00:05:11,657 --> 00:05:16,321
And if you want this quaternion based on these two, then you can do

49
00:05:16,786 --> 00:05:18,707
quaternion multiplication, right?

50
00:05:19,348 --> 00:05:22,850
And you'll get your lovely composed rotation.

51
00:05:23,311 --> 00:05:23,571
All right.

52
00:05:24,972 --> 00:05:27,834
Adding quaternions is averaging rotations.

53
00:05:28,374 --> 00:05:29,135
What do I mean by this?

54
00:05:29,255 --> 00:05:31,957
Well, averaging, don't know what happened there.

55
00:05:32,677 --> 00:05:36,840
Averaging is basically mixing for colors, if we're talking about colors.

56
00:05:37,741 --> 00:05:43,825
If you, any child can tell you that if you have some amount of blue and red, then you get purple.

57
00:05:43,985 --> 00:05:46,447
Or at least if you have the same amount of blue and red, then you have purple.

58
00:05:46,923 --> 00:05:47,583
then you get purple.

59
00:05:48,944 --> 00:05:51,785
Here we've got two quaternions, and I've already shown you what these are.

60
00:05:51,845 --> 00:05:55,206
This is the y-axis 180 degree quaternion.

61
00:05:55,226 --> 00:05:56,946
This is the z-axis 180 degree quaternion.

62
00:05:57,867 --> 00:05:59,167
This is what they do to the cows.

63
00:06:00,487 --> 00:06:06,949
And we can add these together, and we're adding x plus x gives you x, and y plus y gives you y. And we get this quaternion.

64
00:06:06,969 --> 00:06:08,690
It's got a y part and a z part.

65
00:06:09,610 --> 00:06:12,671
And it turns out that this quaternion is a 180 degree rotation still,

66
00:06:15,165 --> 00:06:23,867
but it's a 180 degree rotation around the line that is directly in between the y-axis and the z-axis.

67
00:06:24,427 --> 00:06:28,228
So if we have like, I need to get better at holding this thing.

68
00:06:29,048 --> 00:06:37,670
So we have, there's our y-axis and there's our z-axis and there's the axis that's halfway in between them and this rotation that we've got here is like that.

69
00:06:37,870 --> 00:06:41,891
So this is the addition of this and this.

70
00:06:42,491 --> 00:06:42,791
All right.

71
00:06:44,266 --> 00:06:44,346
and

72
00:07:01,647 --> 00:07:09,976
and that matters because suppose that you added blue to a larger amount of red, twice as much red say, you'd get a different color and you'd get even more of that color.

73
00:07:10,717 --> 00:07:15,102
So what this is showing you is that averaging is weighted, right?

74
00:07:15,142 --> 00:07:20,548
The amounts of the color that you have in there matter in terms of the color that you get out the other side.

75
00:07:22,560 --> 00:07:28,981
If we draw this analogy, we've got this one that can be written as two of these added together.

76
00:07:29,781 --> 00:07:38,243
Similarly, we've got a quaternion and another quaternion, and this one can obviously be written as two of these added together.

77
00:07:39,383 --> 00:07:41,684
This one, I already told you, is a 180 around the y-axis.

78
00:07:42,464 --> 00:07:46,045
Now this one is also a 180 around the y-axis.

79
00:07:48,283 --> 00:07:50,545
It's got some differences to this one.

80
00:07:50,605 --> 00:07:57,511
For example, if you add this quaternion to another quaternion, then you'll get a different thing than if you added this quaternion to another quaternion.

81
00:07:57,751 --> 00:08:04,797
And there are some other differences that I won't go into, but if you're worried about the difference there, you can normalize your quaternions or your colors.

82
00:08:04,877 --> 00:08:10,262
Like, if you take two buckets of purple paint, you can turn it into one bucket of purple paint.

83
00:08:10,622 --> 00:08:15,686
Similarly, you can turn this quaternion into what we have here, which is the unit quaternion.

84
00:08:16,227 --> 00:08:16,427
All right.

85
00:08:17,267 --> 00:08:21,029
the identity quaternion, which does a zero degree rotation.

86
00:08:21,270 --> 00:08:22,610
Very important quaternion here.

87
00:08:23,451 --> 00:08:24,131
It looks like this.

88
00:08:25,112 --> 00:08:27,713
X is zero, y is zero, z is equal to zero.

89
00:08:28,494 --> 00:08:29,975
W is equal to one, though.

90
00:08:30,455 --> 00:08:33,017
We're doing something with the w coordinate for the first time.

91
00:08:33,557 --> 00:08:34,818
What will this do to the cow?

92
00:08:34,998 --> 00:08:38,340
Well, the answer is that it does nothing to the cow.

93
00:08:38,720 --> 00:08:42,743
It's like, you start out with the cow, and it gives you the cow, right?

94
00:08:44,837 --> 00:08:48,959
There's no axis to speak of, because, I mean, where is the axis in even doing this?

95
00:08:49,499 --> 00:08:58,704
And we call it the identity quaternion, because if you translate it, if you turn it into a matrix, then you'll get the identity matrix, whether that's a 3x3 matrix or a 4x4 matrix.

96
00:08:59,324 --> 00:09:08,588
And you can also write this same quaternion as just the number 1, because multiplying something by 1 is not doing anything to it, so that sounds a lot like this quaternion.

97
00:09:09,448 --> 00:09:09,749
Alright.

98
00:09:11,178 --> 00:09:11,658
suppose we

99
00:09:29,591 --> 00:09:29,911
90 degrees.

100
00:09:45,129 --> 00:09:47,370
And that kind of makes sense, right?

101
00:09:47,390 --> 00:10:03,076
Because it generalizes this idea of like, oh, I took the, when I added the 180 around the Y and I added it to 180 around the Z, I got some kind of average, some kind of thing that's in between them, but it was still a 180.

102
00:10:03,396 --> 00:10:09,018
This is averaging, in some sense, the zero degree rotation and the 180 that we've got there.

103
00:10:09,459 --> 00:10:09,679
Okay.

104
00:10:10,458 --> 00:10:13,699
This is a quaternion I just bring up for completeness sake.

105
00:10:13,759 --> 00:10:14,839
It's the zero quaternion.

106
00:10:14,939 --> 00:10:17,139
If you apply it to a 3D model, it collapses it to nothing.

107
00:10:17,159 --> 00:10:22,501
And if you turn it into a matrix, you get the zero matrix, or multiplication by zero.

108
00:10:22,561 --> 00:10:23,341
Very, very boring.

109
00:10:25,841 --> 00:10:32,843
Linear interpolation, also known as LERP, for quaternions and matrices.

110
00:10:34,478 --> 00:10:37,700
Linear interpolation is a very important animation technique.

111
00:10:38,300 --> 00:10:52,706
It's also useful if you're a game programmer, because suppose that you've got a cow here, and you've got a cow here, and you want, what you really want is to go from there to there, but by a certain amount, right?

112
00:10:52,946 --> 00:11:01,110
You've got some number t, let's say, and you want it to be the case that if t is equal to a half, then it gets you halfway from this position to this position.

113
00:11:02,228 --> 00:11:04,349
And, you know, even the summer intern could write this.

114
00:11:04,949 --> 00:11:11,370
If you have these positions as vectors, then you just do the start plus T multiplied by the end minus the start.

115
00:11:11,750 --> 00:11:13,391
And that is what lerp is.

116
00:11:14,411 --> 00:11:20,273
And it turns out that you can, you can do this directly with quaternions.

117
00:11:20,313 --> 00:11:21,973
So here I've got an editor.

118
00:11:23,293 --> 00:11:28,435
We've got a cow up here, and we are applying some transformation to the cow to get what the cow in this window.

119
00:11:29,522 --> 00:11:30,303
the transformation

120
00:12:00,083 --> 00:12:07,706
But what if you wanted to interpolate from Q1, from this orientation, to the other orientation?

121
00:12:08,506 --> 00:12:10,586
It turns out there's an easy enough way of doing that.

122
00:12:10,987 --> 00:12:17,409
So we're going to define a float called T. And I'm going to clamp T to being between 0 and 1.

123
00:12:18,149 --> 00:12:20,690
So let's dial T up and down.

124
00:12:22,150 --> 00:12:22,770
One second.

125
00:12:23,491 --> 00:12:23,671
Yeah.

126
00:12:26,613 --> 00:12:32,437
If we dial T up and down, you can see in this window over here that it's, you know, sort of staying between zero and one.

127
00:12:33,878 --> 00:12:53,232
And if we lerp, using the formula that I just said to you, if we look at, if we look down in this window, we've got a quaternion that, if I dial T up and down, if you look at this turquoise quaternion, it's going from the bluish one to the greenish one, which is sort of what we want.

128
00:12:54,012 --> 00:12:56,234
And if we apply this to our

129
00:12:56,584 --> 00:13:20,279
cow, we get the cow at a different orientation, and if I dial T up and down, hooray, we are interpolating from one orientation of the cow to a different orientation of the cow, and I can have any number in between, and that gives me this quaternion, which, when we apply it to the cow, gives you that thing that's in between the cow in the first state and the cow in the other state.

130
00:13:20,419 --> 00:13:22,621
Oh, but we're going to do another demonstration here.

131
00:13:24,206 --> 00:13:26,047
because there's another way of transforming things.

132
00:13:26,167 --> 00:13:37,550
Once again, I've got a quaternion, if you look down here, and if I dial T up and down, I'm going from one rotation to another rotation, one orientation to another orientation, beg your pardon.

133
00:13:40,271 --> 00:13:51,455
And if I turn these quaternions into matrices, which I'm doing here, so here we've got a matrix, and I'm visualizing it with what it does to the X direction, the Y direction, and the Z direction.

134
00:13:53,672 --> 00:14:08,385
If I, if I, I've got these two, these two matrices which come directly from those two quaternions that we've got in the bottom right, and I can similarly do the first matrix plus T multiplied by the second matrix minus the first matrix.

135
00:14:09,706 --> 00:14:14,050
Watch what happens, though, to the matrix if I

136
00:14:15,891 --> 00:14:18,432
dial it, if I dial T back and forth.

137
00:14:18,552 --> 00:14:21,073
So I'm gonna do, yeah, this.

138
00:14:21,133 --> 00:14:30,635
So we've got some green arrows in here, and they're starting out at the, if we look in the bottom, the top right, we start, they're starting out at where the orange ones are, and they're going to where the purple ones are.

139
00:14:30,695 --> 00:14:34,576
By the way, we're not applying this to the cow yet, so the cow is still doing quaternion lerp.

140
00:14:35,297 --> 00:14:35,577
All right.

141
00:14:36,517 --> 00:14:43,019
And you might notice that there's something a little bit uncomfortable going on in there, which is that if I leave it at this state,

142
00:14:44,619 --> 00:14:47,542
and we look at just maths interpolated on its own.

143
00:14:47,922 --> 00:14:49,944
Well, that's a little bit unfortunate there.

144
00:14:50,024 --> 00:14:53,107
Both of those vectors are, yeah, problematic.

145
00:14:54,028 --> 00:14:56,550
Let's, let's apply this to our cow anyway.

146
00:14:57,351 --> 00:15:03,696
And we see that the cow has been weirdly, like, squashed.

147
00:15:03,757 --> 00:15:04,537
That's unpleasant.

148
00:15:04,978 --> 00:15:05,378
And if we

149
00:15:07,577 --> 00:15:15,462
dial T up and down, well we do start out at the right orientation and we end in the right orientation, but it's doing this horrible thing in between.

150
00:15:16,803 --> 00:15:28,151
There's something else that I want you to notice about the difference between matrices and quaternions in this context, though, which is that when I dial that number up and down, note that the cow is not looking at us, right.

151
00:15:28,631 --> 00:15:32,394
It's going from left to right without turning to face us.

152
00:15:33,074 --> 00:15:36,797
Whereas, if I switch us back to the quaternion version,

153
00:15:39,734 --> 00:15:44,439
and now I dial T up and down again, the cow turns to face us.

154
00:15:44,499 --> 00:15:49,023
And it's starting out in the same place and it's ending in the same place, but it's going around the other way.

155
00:15:49,723 --> 00:15:52,165
To which you might say, oh, gosh, well, that sounds horrible.

156
00:15:52,206 --> 00:15:57,090
What, are you telling me that quaternions go around the other way than matrices?

157
00:15:57,190 --> 00:15:58,531
No, I wouldn't want that.

158
00:15:59,012 --> 00:16:04,657
Well, I can actually do what the matrices did, well, a better version of what the matrices did.

159
00:16:05,077 --> 00:16:14,740
So let's dial T up and down again, and now we see that this is quaternion interpolation, linear interpolation that we've got here, and the cow is swinging its bum past us, right?

160
00:16:15,180 --> 00:16:20,841
It's not looking at us, so it's doing the exact rotation that the matrices did, but it's actually doing a better version of it, right?

161
00:16:20,861 --> 00:16:25,503
Because, an objectively better version, because it's not being squashed in the intermediate state.

162
00:16:26,643 --> 00:16:27,083
Okay.

163
00:16:28,834 --> 00:16:37,537
And the reason that I point all that out is because I want to emphasize that clockwise and counterclockwise are fundamental to how rotations work.

164
00:16:38,097 --> 00:16:45,059
And it turns out that you can switch quaternions between clockwise and counterclockwise by multiplying by minus one.

165
00:16:46,019 --> 00:16:50,841
This may sound like a weird curiosity, but it's actually really fundamental to how the quaternions work.

166
00:16:50,941 --> 00:16:53,222
So here you've got another quaternion.

167
00:16:53,602 --> 00:16:56,343
This is the W equal to minus one quaternion.

168
00:16:57,520 --> 00:16:57,660
What's

169
00:17:08,370 --> 00:17:12,172
And you're saying that, well, we've got yet another quaternion that does this super boring thing.

170
00:17:12,212 --> 00:17:14,034
That sounds, that sounds like a big waste of time.

171
00:17:14,074 --> 00:17:16,135
Well, it's not exactly doing the same thing.

172
00:17:16,215 --> 00:17:17,876
It's having the same effect on the model.

173
00:17:18,376 --> 00:17:25,621
But I put to you, this will sound strange, but it's true, that this quaternion is doing a 360 degree turn.

174
00:17:26,121 --> 00:17:31,625
It's a 360 degree turn, as opposed to a zero degree turn, which is the difference between these two.

175
00:17:32,455 --> 00:17:36,217
to which you might say, OK, that sounds bizarre.

176
00:17:36,357 --> 00:17:37,837
What on earth are you talking about?

177
00:17:38,138 --> 00:17:44,561
Because surely a zero degree rotation is the same thing as a 360 degree rotation.

178
00:17:44,981 --> 00:17:45,401
I mean, look.

179
00:17:45,741 --> 00:17:47,022
We start out the cow here.

180
00:17:47,882 --> 00:17:51,424
We do a 360 degree rotation, and the cow ends up in the same place.

181
00:17:52,444 --> 00:17:54,045
But look at my arm, all right?

182
00:17:55,097 --> 00:17:59,781
We start out here, and let's say that I want to do a 180 and then another 180.

183
00:18:00,041 --> 00:18:02,383
I get this thing.

184
00:18:03,024 --> 00:18:05,186
The cow is in the same place, but my arm is kinked up.

185
00:18:06,307 --> 00:18:09,910
You might say, well, OK, fine, but you can't go any further, right?

186
00:18:10,250 --> 00:18:13,293
So this is, what, something that is a dead end for rotations?

187
00:18:13,373 --> 00:18:14,954
Well, no, because watch this.

188
00:18:15,535 --> 00:18:17,497
I can go like this and like this.

189
00:18:17,517 --> 00:18:17,497
180, 180, 180, 180.

190
00:18:21,872 --> 00:18:28,494
I can do the same thing for the other axes, so here's a 180 around the X axis, 180, 180, 180, 180, and the Z axis is the hardest one, 180, 180, 180, 180.

191
00:18:42,554 --> 00:18:44,675
Come on, I think I deserve some clapping for that.

192
00:18:45,335 --> 00:18:47,296
Don't ask me to do it again, it hurts so much.

193
00:18:47,776 --> 00:18:48,096
All right.

194
00:18:50,237 --> 00:18:53,738
This is the bridge in Dublin where quaternions were discovered.

195
00:18:54,598 --> 00:18:57,119
It's got a plaque there, and it says this equation on it.

196
00:18:57,979 --> 00:19:01,341
I squared equals J squared equals K squared equals IJK equals negative one.

197
00:19:01,381 --> 00:19:07,343
And when I saw this, I was like, what on earth does that have to do with quaternions, which I only know about from Unity?

198
00:19:07,863 --> 00:19:08,023
Like,

199
00:19:08,755 --> 00:19:10,176
But that's what this is.

200
00:19:10,596 --> 00:19:18,142
If you take the y-axis quaternion, for example, 180, 180, so you're multiplying it by itself, you are squaring it.

201
00:19:18,422 --> 00:19:20,964
You're taking this rotation and doing it twice.

202
00:19:22,004 --> 00:19:23,125
You get minus 1.

203
00:19:24,026 --> 00:19:26,307
Same goes for the other axes, right?

204
00:19:28,049 --> 00:19:33,593
And the other thing that we have here is i, j, k. And let me show you that one for the sake of completeness.

205
00:19:34,053 --> 00:19:37,615
So it's i, j, k.

206
00:19:39,298 --> 00:19:39,758
minus one.

207
00:19:41,039 --> 00:19:41,399
All right.

208
00:19:42,219 --> 00:19:44,880
I, J, and K are what mathematicians call quaternions.

209
00:19:44,920 --> 00:19:47,682
We just call these X and Y and Z. All right.

210
00:19:48,482 --> 00:19:52,764
To really hammer the term, here's our quaternion that's at Y equals one.

211
00:19:53,324 --> 00:19:59,047
If you multiply it by itself, so again Y equals one, you compose two 180 degree rotations, you get the 360 degree rotation.

212
00:20:02,768 --> 00:20:09,073
and put this into Unity or any quaternion thing that you like and you will get this answer.

213
00:20:09,934 --> 00:20:15,979
All right, now we want to understand quaternion from axis angle, all right?

214
00:20:16,560 --> 00:20:24,507
And a good way of understanding this function is by plotting the amount of line against the amount of identity for some quaternions.

215
00:20:26,102 --> 00:20:27,543
Here's the function that we're talking about.

216
00:20:27,623 --> 00:20:33,826
We've got our angle and we've got our axis, and the axis has an x part, a y part, and a z part, which makes sense.

217
00:20:33,906 --> 00:20:37,447
It's coming to us as possibly a vector or possibly a quaternion.

218
00:20:37,487 --> 00:20:39,148
It doesn't really matter for the sake of this code.

219
00:20:39,808 --> 00:20:42,910
And we are, OK, we're taking the sine and the cosine of the angle.

220
00:20:43,010 --> 00:20:45,631
That kind of makes sense because it's something to do with rotations.

221
00:20:46,071 --> 00:20:51,394
And then we're assigning, you know, the x goes to the x and the y goes to the y, z goes to the z. Very sensible looking.

222
00:20:52,281 --> 00:20:52,962
But this is wrong.

223
00:20:53,522 --> 00:20:59,247
Don't, please do not type this into your game engine, because what I've just shown you here is not axis angle to quaternion.

224
00:21:00,288 --> 00:21:02,671
This is axis angle to quaternion.

225
00:21:02,751 --> 00:21:05,253
You've got to, you've got to divide the angle by two.

226
00:21:06,014 --> 00:21:06,894
Now why would that be?

227
00:21:06,974 --> 00:21:13,921
Well, it might remind you of the fact that I've got to go around twice in order to get back to the true start.

228
00:21:17,489 --> 00:21:18,409
This is the correct one.

229
00:21:19,030 --> 00:21:25,533
So, to understand what's going on there, we're going to be plotting the amount of line against the amount of identity for some quaternions.

230
00:21:26,213 --> 00:21:31,035
It's very easy to get the amount of identity, it's just the w part, which is a, you know, it's one number.

231
00:21:31,976 --> 00:21:38,839
To get the amount of line, we're gonna take the square root of the sum of the squares of x, y, and z. So, kind of like getting the length of a vector.

232
00:21:40,097 --> 00:21:41,138
All right, let's get on with it.

233
00:21:41,238 --> 00:21:51,006
So we've got our graph of the amount of line against the amount of identity, and we're gonna start with this quaternion, which is the W equals one quaternion, because it's got, you know, no line part.

234
00:21:51,166 --> 00:21:55,629
It's line part is equal to zero, and it's got a W part, so it's the identity.

235
00:21:55,670 --> 00:21:56,911
It's the zero degree rotation.

236
00:21:57,331 --> 00:21:57,531
OK?

237
00:21:58,071 --> 00:21:58,272
Fine.

238
00:21:59,493 --> 00:22:00,113
How about this one?

239
00:22:00,173 --> 00:22:00,874
Well, this is

240
00:22:02,044 --> 00:22:05,585
a 180 degree rotation because it's got z equal to one.

241
00:22:05,945 --> 00:22:08,046
I chose z because why not?

242
00:22:08,726 --> 00:22:13,147
I could have chosen any of the others and so long as I had w equal to zero, I could have put it here.

243
00:22:13,547 --> 00:22:18,548
So this is a 180 degree rotation as I took great pains to tell you about earlier.

244
00:22:19,488 --> 00:22:20,209
How about this one?

245
00:22:20,429 --> 00:22:25,790
Well, this has an equal quantity of z and w, right?

246
00:22:26,310 --> 00:22:29,431
Which means that it's a 90 degree rotation, which I also pointed out to you.

247
00:22:30,626 --> 00:22:30,846
but you

248
00:22:46,383 --> 00:22:46,563
about

249
00:23:07,705 --> 00:23:08,625
And then how about this one?

250
00:23:08,745 --> 00:23:14,767
Well, this is the w is equal to minus one quaternion, right, because it's a minus amount of identity.

251
00:23:15,687 --> 00:23:23,629
It's, yeah, and that, I told you, is the 360 degree rotation, even though that is 180 degrees.

252
00:23:23,709 --> 00:23:25,070
What is going on here?

253
00:23:26,010 --> 00:23:30,011
Well, this is called a double cover plot, and it's called that for a fairly clear reason.

254
00:23:31,078 --> 00:23:33,920
It's because it's showing you what's going on in here.

255
00:23:34,500 --> 00:23:44,346
When you put angle into sine and cosine, you have to divide by two first, because your angle is actually an angle in this graph.

256
00:23:44,386 --> 00:23:46,567
It's not an angle in the game world.

257
00:23:48,548 --> 00:23:51,530
And that, by the way, is the sine, and that is the cosine.

258
00:23:52,711 --> 00:23:54,993
All right, can we use this for anything?

259
00:23:55,833 --> 00:24:00,096
Well, yes, we can use it to think about going from clockwise to counterclockwise.

260
00:24:00,456 --> 00:24:11,184
So we have, for example, this quaternion, 90 degree rotation clockwise, and then this quaternion I put to you is, in a strong sense, the minus 270 degree rotation clockwise, also known as the 270 degree rotation counterclockwise.

261
00:24:17,552 --> 00:24:18,394
and it looks like this.

262
00:24:18,594 --> 00:24:25,084
And to get from here to here, you multiply the x part, the y part, the z part, and the w part by minus one.

263
00:24:25,124 --> 00:24:30,952
So you've got z is 0.7 up here, w is 0.7, z is minus 0.7 down here, minus 0.7 down here.

264
00:24:34,733 --> 00:24:43,499
Okay, so it's kind of like the upper part is the clockwise rotations and the bottom part is the counterclockwise rotations.

265
00:24:43,559 --> 00:24:45,020
And I chose clockwise arbitrarily.

266
00:24:45,280 --> 00:24:50,083
I could instead have said the top one is the counterclockwise and the bottom one is clockwise.

267
00:24:51,004 --> 00:24:54,887
And this matters because it helps us do quaternion division.

268
00:24:56,067 --> 00:25:03,933
First a little reminder, for rotations A and B, B multiplied by A means rotate by B, but rotate by A first.

269
00:25:04,793 --> 00:25:11,902
which means that B divided by A means rotate by B but rotate by the opposite of A first.

270
00:25:13,644 --> 00:25:15,607
We'll see some very clear uses for this.

271
00:25:17,128 --> 00:25:22,315
Another way of saying this is get me to where B takes me but starting out from where A would take me.

272
00:25:23,197 --> 00:25:28,021
And a place that you deal with this fairly frequently is in translation vectors.

273
00:25:28,082 --> 00:25:38,011
So suppose that I've got the translation that takes me from San Francisco to Los Angeles, and the translation vector that takes me from San Francisco to Las Vegas, but what I really want is this vector.

274
00:25:38,051 --> 00:25:39,932
I want Los Angeles to Las Vegas.

275
00:25:40,533 --> 00:25:41,294
How would I get that?

276
00:25:41,474 --> 00:25:43,335
Purely thinking about vectors here.

277
00:25:44,136 --> 00:25:52,019
Well, a thing that would be useful would be getting this orange vector, which is the opposite of the grey vector, which we can put it down like that.

278
00:25:52,680 --> 00:26:03,584
And then, having gotten this orange vector, it turns out that the blue vector is the red vector added to the orange vector, because you go from there to there.

279
00:26:05,465 --> 00:26:14,809
And you can also write the blue vector as the red vector minus the grey vector because it's the red vector plus the grey vector multiplied by minus one.

280
00:26:15,350 --> 00:26:15,530
Okay.

281
00:26:16,522 --> 00:26:20,706
But suppose you were thinking about a longer trip.

282
00:26:21,167 --> 00:26:26,572
You're thinking about Spain to Madagascar and Spain to India.

283
00:26:27,674 --> 00:26:30,396
But what you really wanted was Madagascar to India.

284
00:26:30,456 --> 00:26:31,638
You wanted this flight path.

285
00:26:31,678 --> 00:26:36,603
And these flight paths are, in some sense, rotations around the center of the Earth.

286
00:26:37,984 --> 00:26:38,044
of

287
00:26:57,031 --> 00:27:02,436
or to put it another way, you are negating the X, Y, and Z parts.

288
00:27:02,456 --> 00:27:03,877
You're leaving the W part alone.

289
00:27:04,258 --> 00:27:11,684
One way of thinking about this is that you've got any rotation, let's say like that, is some amount of identity and some amount of 180.

290
00:27:12,745 --> 00:27:14,226
And if you instead say, oh, do you know what?

291
00:27:14,307 --> 00:27:23,355
I'd like the 180 that's this way, because, and the 180 that's this way will be this 180 multiplied by minus one, because check it out.

292
00:27:24,471 --> 00:27:30,097
I have this 180, and then I multiply by minus one, I go around 360, and there we have it.

293
00:27:30,557 --> 00:27:33,060
That is the 180 that we really want.

294
00:27:33,160 --> 00:27:40,607
So what we want, instead of having a mixture of the identity and this 180, we have a mixture of the identity with this 180.

295
00:27:42,029 --> 00:27:46,854
And that gives us the going this way a little bit as opposed to going that way a little bit.

296
00:27:47,454 --> 00:27:47,795
All right.

297
00:27:51,045 --> 00:27:52,985
So, can we use that?

298
00:27:53,145 --> 00:27:54,126
Yes, we can use that.

299
00:27:54,206 --> 00:28:07,068
So, if you want, if you've got a rotation like this, but you want a rotation like that, you want to go from here to here in some sense, and then here to here, well, the red one can be written as the purple one followed by the dark blue one.

300
00:28:08,329 --> 00:28:12,209
The red one, and, yeah, that's just quaternion composition.

301
00:28:12,349 --> 00:28:13,590
It's quaternion multiplication.

302
00:28:14,790 --> 00:28:19,891
So that means that you can write the purple, and, well, we know that you can write the purple one

303
00:28:20,365 --> 00:28:30,958
as the inverse of the orange one, and so if all you had was the orange one, you could take this and write it as the blue one divided by the orange one.

304
00:28:32,339 --> 00:28:34,302
Alright, let me check my time.

305
00:28:36,428 --> 00:28:37,329
dual quaternions.

306
00:28:37,369 --> 00:28:38,470
This is part two of the talk.

307
00:28:38,770 --> 00:28:44,556
Dual quaternions, which animators like, and I think they like them better than 4x4 matrices, and so should you.

308
00:28:44,616 --> 00:28:47,599
And what we have down here are some examples of dual quaternions.

309
00:28:47,639 --> 00:28:52,023
Because at this point, you pretty much know everything there is to know about quaternions.

310
00:28:52,063 --> 00:28:53,665
We want to do something a bit more exotic.

311
00:28:55,227 --> 00:29:03,311
Dual quaternions let you manage both rotation and translation in the way that quaternions let you manage rotation.

312
00:29:03,872 --> 00:29:06,713
So here I've got a quaternion, what we've been talking about for a long, long time.

313
00:29:08,614 --> 00:29:09,975
This is a dual quaternion.

314
00:29:10,950 --> 00:29:14,993
Dual quaternions contain quaternions as a special case.

315
00:29:15,373 --> 00:29:20,056
So you can take the W part of the quaternion and put it into the W part of the dual quaternion.

316
00:29:20,516 --> 00:29:23,298
We're doing something quite specific with X, Y, and Z, though.

317
00:29:23,338 --> 00:29:35,005
We're going to turn, oh, well, X, Y, and Z represent a line, and it turns out that we actually need now six floats in order to do arbitrary lines in three-dimensional space.

318
00:29:35,065 --> 00:29:39,628
So quaternions only ever let you do rotations around lines through the origin.

319
00:29:40,168 --> 00:29:42,530
with a dual quaternion, it really could be anywhere.

320
00:29:44,351 --> 00:29:55,399
But it turns out that the X part, we've got, for, for reasons that will become apparent eventually, it's, you're best off thinking of the X part as the YZ part.

321
00:29:55,659 --> 00:29:56,239
Why is that?

322
00:29:56,359 --> 00:29:59,021
Well, if I bring myself back up.

323
00:29:59,461 --> 00:30:05,846
So the rotation around, say, the X axis, right, so this,

324
00:30:06,621 --> 00:30:09,884
rotates from Z to Y, right?

325
00:30:10,024 --> 00:30:10,845
It's going like that.

326
00:30:11,446 --> 00:30:15,209
So you can kind of think of X as being Z to Y, right?

327
00:30:15,830 --> 00:30:19,854
And you can think of Y as being Z to X. So, like that.

328
00:30:20,655 --> 00:30:21,976
And, yeah, for the other one.

329
00:30:24,279 --> 00:30:29,486
And that's why we rename x, y, and z to yz, zx, and xy in here.

330
00:30:29,987 --> 00:30:38,639
We also don't want to mix them up with these three, which are easily mixed up with x, y, and z. And that's the reason for the renaming.

331
00:30:40,367 --> 00:30:42,108
unifying rotation and translation.

332
00:30:42,168 --> 00:30:44,228
So, quaternions do your rotations.

333
00:30:44,708 --> 00:30:49,250
You often probably think of vectors as doing your translations, so moving stuff around.

334
00:30:49,590 --> 00:30:51,871
But what if you want to think of these as the same kind of thing?

335
00:30:51,891 --> 00:30:58,133
You want to think of translating, but with the composition operator.

336
00:30:59,731 --> 00:31:12,838
Well, this composition operator is dual quaternion multiplication, to which a lot of people will be saying, hey, well, hang on, don't be so fast, this is also 4x4 matrix multiplication.

337
00:31:13,299 --> 00:31:13,879
And that's true.

338
00:31:14,239 --> 00:31:23,885
So 4x4 matrices and dual quaternions both unify rotations and translations, which is great for both of them.

339
00:31:25,916 --> 00:31:31,292
If we compare them, which is what we're going to do in this section, we'll see that there's lots of advantages to dual quaternions.

340
00:31:34,164 --> 00:31:43,527
Inverting for a quaternion you saw is just minus signs on the x, y, and z part, and that's also true of dual quaternions, which is nice.

341
00:31:44,007 --> 00:31:45,888
Inverting a matrix is a bit more involved.

342
00:31:46,908 --> 00:31:53,270
And the reason for that is because clockwise and counterclockwise is still multiplication by minus one.

343
00:31:54,090 --> 00:31:57,451
Here we're thinking about quaternions, but this applies to dual quaternions as well.

344
00:31:59,161 --> 00:32:09,526
Dual quaternions can be applied to points, lines, planes and normals in exactly the same way, which is nice and elegant, whereas 4x4 matrices can actually only be applied to this without conversion.

345
00:32:12,047 --> 00:32:16,009
4x4 matrix animation also has this thing called the candy wrapper effect.

346
00:32:16,069 --> 00:32:20,351
So this poor woman's arm has been twisted up like she's a balloon or something like that.

347
00:32:21,191 --> 00:32:24,453
We call it the candy wrapper effect because it's like we've twisted the wrapper of a candy.

348
00:32:25,293 --> 00:32:25,793
A candy?

349
00:32:25,833 --> 00:32:26,453
I don't know what that means.

350
00:32:28,888 --> 00:32:29,689
Why is this happening?

351
00:32:29,749 --> 00:32:35,813
Well, her skin is made of a mesh like this, of course, and inside her she's got some bones.

352
00:32:36,914 --> 00:32:51,323
And if we twist one of those bones and we try to make the skin follow the bones in a natural way, we kind of see that, oh, OK, I mean, I guess that kind of makes sense as a thing to do.

353
00:32:52,384 --> 00:32:55,147
But that's clearly not what human flesh does.

354
00:32:55,948 --> 00:33:07,282
So we want something different, and this is why Blender and Houdini and Autodesk and Maya have all implemented dual quaternions to some extent in them.

355
00:33:08,483 --> 00:33:11,724
They call it, they give it a specific name, which is preserve volume.

356
00:33:12,364 --> 00:33:24,548
Preserve volume just means dual quaternions, and I mean, I don't work with many animators, but I picture some animator ticking this box and being like, oh, that looks much nicer, and they're like, they don't realize how much work it's creating for us, but anyway.

357
00:33:25,288 --> 00:33:30,650
It's four by four matrices, candy wrapper effect, dual quaternions, no candy wrapper effect, potentially.

358
00:33:33,531 --> 00:34:01,369
4x4 matrices have 16 degrees of freedom dual quaternions have 8 degrees of freedom and this is actually kind of better because shearing is something that 4x4 matrices can do but it's something that dual quaternions can't do so this is the one game I've ever seen where they had shearing on purpose you can see what the car is doing like that it was skewed to the side a bit there that's shearing and whenever you see this in any other game

359
00:34:02,430 --> 00:34:02,650
Yeah.

360
00:34:02,770 --> 00:34:03,931
Something's gone wrong, right.

361
00:34:04,551 --> 00:34:06,531
Dual quaternions can't do shearing.

362
00:34:06,692 --> 00:34:07,692
And that's a good thing.

363
00:34:08,552 --> 00:34:08,792
OK.

364
00:34:09,212 --> 00:34:13,094
If I've persuaded you that dual quaternions sound a little bit useful, you might be interested now.

365
00:34:13,214 --> 00:34:13,494
OK.

366
00:34:13,554 --> 00:34:15,474
Six floats for that axis line.

367
00:34:15,895 --> 00:34:17,635
How do you read those six floats?

368
00:34:17,695 --> 00:34:23,497
And it turns out that these are the same things as what you might have heard being called pluca coordinates.

369
00:34:24,297 --> 00:34:27,939
If you've never heard of pluca coordinates, don't worry, because I'm about to explain what these things are.

370
00:34:28,159 --> 00:34:28,359
OK.

371
00:34:29,299 --> 00:34:31,380
Let's go to another demonstration.

372
00:34:32,639 --> 00:34:32,860
All right.

373
00:34:33,882 --> 00:34:34,865
Here I've got two lines.

374
00:34:35,727 --> 00:34:37,813
These are both lines through the origin.

375
00:34:38,133 --> 00:34:40,500
I've got this line here and this line here.

376
00:34:42,365 --> 00:34:45,448
and I can interpolate from one to the other as usual.

377
00:34:45,508 --> 00:34:51,632
So watch the green line in this bottom right-hand window as I interpolate T up and down.

378
00:34:52,573 --> 00:34:55,775
Ignore the cow for a second, we're mostly interested in the bottom right window.

379
00:34:56,376 --> 00:35:08,585
We're able to interpolate the orange one to the blue one just by, again, sort of component-wise thinking about you've got the X part and the Y part and the X, yeah, yeah.

380
00:35:08,745 --> 00:35:10,306
It's just linear interpolation again.

381
00:35:12,294 --> 00:35:17,136
But suppose that you wanted to think about a line that wasn't through the origin, and here it is.

382
00:35:17,816 --> 00:35:20,877
So here we've got a line being created this way.

383
00:35:21,297 --> 00:35:24,898
I've got a 1 here, and I've got a 1.4 here.

384
00:35:25,438 --> 00:35:30,440
And if I change that 1.4 to 0, I get something which looks actually the same.

385
00:35:30,600 --> 00:35:35,361
If we're looking in the bottom right-hand window, the red and the purple look exactly the same.

386
00:35:35,441 --> 00:35:38,242
And that's because the first three floats that you've got here

387
00:35:38,602 --> 00:35:40,563
are the same as the first three floats here.

388
00:35:40,684 --> 00:35:43,566
So this is lines through the origin.

389
00:35:44,386 --> 00:35:50,150
If you want lines that are displaced from the origin, then you use floats in this thing over here.

390
00:35:51,431 --> 00:35:53,613
And we can interpolate these as well.

391
00:35:53,713 --> 00:35:59,917
So I'm going to interpolate from one of the lines to the one that's displaced from the origin.

392
00:36:02,020 --> 00:36:08,281
So look at that, again in the bottom right hand corner, we've got the green line going from the orange line to the purple line.

393
00:36:09,322 --> 00:36:22,906
And if we look at the cow up here, this is the cow having had a 180 degree rotation applied to it, but it's a 180 degree rotation around the green line, so it's a line that's not through the origin, so it's translating the cow as well.

394
00:36:25,636 --> 00:36:27,817
But now you, let's ask a dangerous question.

395
00:36:28,257 --> 00:36:30,839
What if I put a zero in here?

396
00:36:31,380 --> 00:36:40,086
So this thing is now displaced from the origin in some way, but it's not, but it's not got any origin part.

397
00:36:40,166 --> 00:36:49,553
So this is a line, still a line, that's very, very, very far away, it turns out.

398
00:36:50,333 --> 00:36:51,714
What do I mean by very far away?

399
00:36:51,774 --> 00:36:52,715
Well I'm about to tell you.

400
00:36:55,140 --> 00:36:58,721
So consider, if you will, the horizon line.

401
00:36:59,942 --> 00:37:05,084
You might be compelled to say that the horizon line is more like a circle, right, because the earth is spherical.

402
00:37:06,224 --> 00:37:07,725
So yeah, this feels like it.

403
00:37:08,265 --> 00:37:12,767
Maybe it's a circle, but actually if you look around, you'll always see it as a line.

404
00:37:13,925 --> 00:37:19,347
Similarly, the Milky Way, in this very lovely picture, forms a line in the sky.

405
00:37:19,987 --> 00:37:24,349
And both of these lines, in a strong sense, are super-duper far away.

406
00:37:25,089 --> 00:37:31,392
And there's a word that we have for lines that are this far away, which is lines at infinity.

407
00:37:32,032 --> 00:37:33,973
They are infinitely far away in that sense.

408
00:37:34,933 --> 00:37:37,154
This line here is infinitely far away.

409
00:37:38,459 --> 00:37:39,879
You can look at it from any angle.

410
00:37:40,079 --> 00:37:44,360
It'll always be surrounding you because it's just so far away.

411
00:37:45,500 --> 00:37:45,800
All right.

412
00:37:47,901 --> 00:37:48,921
Why do you care about these?

413
00:37:49,001 --> 00:37:53,562
Well, because translations behave more like rotations than you might think.

414
00:37:54,342 --> 00:37:57,903
If you've worked with four by four matrices all your life, then you might not have seen this before.

415
00:37:57,963 --> 00:38:02,983
But translations behave just like rotations, except with axes.

416
00:38:04,044 --> 00:38:05,824
Their axes are very, very distant.

417
00:38:06,284 --> 00:38:08,445
In fact, their axes are infinitely far away.

418
00:38:08,966 --> 00:38:12,608
So let me show you what I mean by this with another little toy.

419
00:38:13,368 --> 00:38:13,608
OK.

420
00:38:14,509 --> 00:38:15,710
Here I've got a Lego motorbike.

421
00:38:16,570 --> 00:38:18,131
And I can turn the handlebars.

422
00:38:19,132 --> 00:38:23,654
And first I'm going, I've got some lines going through the axles of this motorbike.

423
00:38:24,115 --> 00:38:26,696
And I'm going to first turn the handlebars as much as I can.

424
00:38:26,816 --> 00:38:28,998
And you'll see that the axes are crossing.

425
00:38:30,319 --> 00:38:31,540
bring you down to here.

426
00:38:32,201 --> 00:38:34,663
If I put the motorbike like this.

427
00:38:35,343 --> 00:38:35,523
Yeah.

428
00:38:36,004 --> 00:38:36,304
All right.

429
00:38:37,085 --> 00:38:40,447
Holding it like that, I'm going to push the motorbike forward a bit now.

430
00:38:41,648 --> 00:38:49,054
And you'll see that it is rotating around precisely the point where these two lines cross.

431
00:38:49,335 --> 00:38:49,615
All right?

432
00:38:49,955 --> 00:38:51,557
It's rotating around here.

433
00:38:52,657 --> 00:38:59,243
If I change the handlebars a little bit so they're still kind of like this, but we go back down here.

434
00:39:00,055 --> 00:39:08,204
These two lines are still crossing maybe somewhere over here, and if I push the motorbike forward, they're still kind of going around that point.

435
00:39:09,445 --> 00:39:15,172
The dangerous question is, what if you have the handlebars parallel, right?

436
00:39:15,312 --> 00:39:16,413
If you don't turn them at all?

437
00:39:16,840 --> 00:39:18,821
And now our lines are parallel.

438
00:39:18,981 --> 00:39:24,625
Our axis lines, well, they're not crossing in the ordinary sense, even if you took them really, really far.

439
00:39:25,245 --> 00:39:32,150
But, and obviously, if you push the motorbike forward now, you get just a translation, forwards and backwards.

440
00:39:32,250 --> 00:39:33,131
Very, very boring.

441
00:39:34,031 --> 00:39:35,552
But, watch this.

442
00:39:35,992 --> 00:39:41,136
If I hold the motorbike like this, how's this going?

443
00:39:44,690 --> 00:39:44,790
it's

444
00:40:01,710 --> 00:40:07,435
So here we've got our motorbike and the axes are crossing at this point here.

445
00:40:08,156 --> 00:40:11,318
And the motorbike is, if you push it forward, going around here.

446
00:40:11,358 --> 00:40:17,203
So if the motorbike was going around a traffic circle, then this would be the center of the traffic circle.

447
00:40:18,064 --> 00:40:24,748
This is the motorbike with the lines parallel to one another, and these still sort of meet each other, right?

448
00:40:25,168 --> 00:40:28,330
They meet each other at a point on the horizon.

449
00:40:29,091 --> 00:40:43,179
And so in a sense, you can still think of there being a line, and the motorbike is going not around the line, because it can't go all the way around the line, but it's a transformation which has this line as its axis.

450
00:40:44,500 --> 00:40:47,101
Another way of thinking about this, so here we've got a carousel.

451
00:40:47,721 --> 00:40:49,141
Look at the poles on this carousel.

452
00:40:49,181 --> 00:40:53,203
They're all going around the central pole, the central spindle of the carousel.

453
00:40:53,603 --> 00:40:54,223
It's axis.

454
00:40:56,464 --> 00:40:58,484
And I'm going to show you another bunch of poles.

455
00:40:59,805 --> 00:41:00,805
Here we've got some trees.

456
00:41:01,665 --> 00:41:06,427
And these trees are going from left to right, just like the carousel poles were.

457
00:41:07,007 --> 00:41:09,888
And they're sort of going around the sun, you might say.

458
00:41:11,411 --> 00:41:27,698
By analogy, we can put the carousel like this, so it's like the motorbike is going around the carousel, there's the center of the spindle of the carousel, and this motorbike over here, these lines are crossing at this point on the horizon, and you can still kind of think of this as having an axis here.

459
00:41:28,899 --> 00:41:30,219
All right, let's formalize that though.

460
00:41:30,619 --> 00:41:36,382
You've got a dual quaternion, it's got an identity part, it's got a line through the origin part,

461
00:41:37,145 --> 00:41:39,106
and it's got a line at infinity part.

462
00:41:39,407 --> 00:41:54,538
And if you want an arbitrary line, a line that isn't through the origin, or if you want a line that's displaced from the origin, you mix together some amount of line through the origin and some amount of line at infinity in the same sort of way that you mix together a line like this and a line like this.

463
00:41:55,099 --> 00:41:55,399
All right.

464
00:41:55,739 --> 00:41:56,900
You lerp them, if you will.

465
00:41:57,540 --> 00:41:59,262
Finally, it's time to say what this thing does.

466
00:41:59,302 --> 00:42:02,484
I'm not gonna say a whole lot about it, but I think of it as the screwiness.

467
00:42:02,964 --> 00:42:04,165
It's a single number.

468
00:42:05,727 --> 00:42:17,457
and it controls the situation where you've got a rotation and a translation, right, where you're going like this and then translating along that axis, okay, just like what a screw does.

469
00:42:18,298 --> 00:42:20,960
Okay, last part of the talk, how much time do I have?

470
00:42:21,761 --> 00:42:21,921
Slurp

471
00:42:52,201 --> 00:42:57,265
Once again, I have two, I have quaternions, and I'm linearly interpolating from one to the other.

472
00:42:57,686 --> 00:43:02,890
If you look in the bottom right-hand window, you can see that, yeah, it's starting out in one way, and it's ending up in another way.

473
00:43:03,610 --> 00:43:05,532
But I want you to look at the cow now.

474
00:43:06,212 --> 00:43:13,959
And I'm going to, I'm going to let you know that I'm trying to dial up the T value as smoothly as I can.

475
00:43:14,039 --> 00:43:16,160
I'm really trying hard to be consistent.

476
00:43:16,661 --> 00:43:18,062
But you see that the cow

477
00:43:18,789 --> 00:43:19,990
has inconsistent speed.

478
00:43:20,030 --> 00:43:25,414
It starts out kind of slow, and then it swings its bum past you, and then it ends up slow again.

479
00:43:26,455 --> 00:43:28,756
That is an artifact of lerp.

480
00:43:28,797 --> 00:43:32,499
And I love quaternion lerp, but this is a bit of a problem.

481
00:43:32,619 --> 00:43:44,748
We might want to fix that, because we might want a super smooth animation where the cow is moving past us in a way that's like tick, tick, tick, just like this going along the angle.

482
00:43:47,631 --> 00:43:51,894
Exponential and logarithm are what we're going to use to fix this bug, so to speak.

483
00:43:53,375 --> 00:43:58,258
Exponential is something that you've actually already seen in some sense, in some sense.

484
00:43:58,538 --> 00:44:03,261
So exponential is kind of the same thing as axis angle to quaternion.

485
00:44:05,022 --> 00:44:07,524
Logarithm is then the opposite of that.

486
00:44:07,604 --> 00:44:16,350
So if you take a quaternion that does a rotation and you put it into the logarithm function, you'll get the axis and the angle of that quaternion.

487
00:44:17,538 --> 00:44:21,402
To be clear though, this is just the version for ordinary quaternions.

488
00:44:23,744 --> 00:44:32,433
But we want to think about dual quaternions, so we've got to think in a slightly more advanced way about the axis that we're talking about here when we say axis.

489
00:44:35,325 --> 00:44:36,766
Here we've got our carousel.

490
00:44:37,066 --> 00:44:38,687
So that's a, that one's a rotation.

491
00:44:39,347 --> 00:44:40,447
This one was a translation.

492
00:44:40,868 --> 00:44:42,468
And then this one is a screw motion.

493
00:44:42,508 --> 00:44:46,710
So if you go down a helter skelter, like, is what, that's what we call these things in Britain.

494
00:44:46,810 --> 00:44:48,831
So go down a helter skelter like this.

495
00:44:48,851 --> 00:44:53,233
You're going around the thing and you're also going down the thing as well.

496
00:44:53,314 --> 00:44:57,115
So it's like, if you're going downwards, you're preserving this line at the horizon.

497
00:44:57,175 --> 00:45:00,217
That's the axis of your translation downwards.

498
00:45:01,536 --> 00:45:11,782
It turns out that if you take the logarithm of this rotation, you get the rotation axis, so this line, with amount, angle over two.

499
00:45:12,383 --> 00:45:21,889
So it's like, we've got that line, but if you do x squared plus y squared plus z squared, the whole thing's square rooted, you'll get angle over two.

500
00:45:23,634 --> 00:45:26,555
And this is with a line that's not as infinity, which defines a rotation.

501
00:45:27,255 --> 00:45:40,658
A pure translation, if you take the logarithm of a translation, and it's a dual quaternion, you will get the translation axis, so you'll get that line back there, with amount, in some sense, distance over two.

502
00:45:42,318 --> 00:45:52,260
And if you have a screw motion, as with this helter-skelter, then you'll get a rotation axis added to a translation axis, both of them with amounts angle over two and distance over two.

503
00:45:54,400 --> 00:45:56,922
So we want to make this thing that's called slurp.

504
00:45:57,322 --> 00:46:08,650
Slurp is the thing that's going to allow us to smoothly interpolate our cow from one to the other while not having this thing where it swings past us super fast.

505
00:46:10,212 --> 00:46:12,153
Slurp looks like this.

506
00:46:12,333 --> 00:46:21,760
So you start by saying the ending thing that you want divided by the starting thing that you want, which will get you the

507
00:46:23,018 --> 00:46:26,661
Rotation from where the start takes you to where the end takes you.

508
00:46:28,022 --> 00:46:34,646
You take the logarithm of that, which will give you the axis of this transformation, scaled by the angle of the transformation.

509
00:46:35,687 --> 00:46:41,471
You then multiply that by your t value, where your t value is the amount that you want to go from here to here.

510
00:46:42,532 --> 00:46:51,839
Then you take the exponential, and this gives you a rotation from here to here by the amount t, in some sense.

511
00:46:53,100 --> 00:47:01,814
and then you multiply by the start because what you really want to do is to go to the start and then go from the start towards the end by the amount T. And that is Slurp.

512
00:47:03,854 --> 00:47:05,715
Why do they get called exponential and logarithm?

513
00:47:07,336 --> 00:47:08,517
Yeah, I don't have time to go through this.

514
00:47:09,038 --> 00:47:09,638
Because math.

515
00:47:10,238 --> 00:47:10,939
Like, yeah.

516
00:47:11,079 --> 00:47:18,384
If you want the quaternion that's done, that's Q done three times, then you're kind of raising it to a power, and that's a little bit like raising a number to a power.

517
00:47:18,784 --> 00:47:19,705
And so, yeah.

518
00:47:20,225 --> 00:47:27,350
The idea of logarithm and exponential from numbers generalizes fine to this situation.

519
00:47:28,710 --> 00:47:29,491
algebraically.

520
00:47:30,011 --> 00:47:32,293
I mean, I find it hard to think about this geometrically.

521
00:47:32,533 --> 00:47:34,435
But, yes, that's exponential and logarithm.

522
00:47:35,916 --> 00:47:37,277
We wanted to solve this problem.

523
00:47:37,297 --> 00:47:38,458
We want something like this.

524
00:47:38,658 --> 00:47:41,300
We don't want something like this, the candy wrapper problem.

525
00:47:42,641 --> 00:47:46,884
The way that we deal with meshes is we've got these bones inside them.

526
00:47:47,305 --> 00:47:48,586
We've also got vertices.

527
00:47:49,086 --> 00:47:52,368
For every vertex, we have a position for the vertex.

528
00:47:53,203 --> 00:48:06,145
We've got the bones that it's affected by, we might have that as 4x4 matrices, the bones being stored as 4x4 matrices, but I put to you that it's better off as having them as dual quaternions.

529
00:48:07,549 --> 00:48:08,830
and you also have some weights.

530
00:48:08,910 --> 00:48:16,895
So for each vertex here, you want to say, okay, it's affected this much by this bone and this much by this bone and this much by this bone.

531
00:48:17,195 --> 00:48:19,036
And I've got the number four in here.

532
00:48:19,797 --> 00:48:25,540
I don't know how frequently people use numbers other than four, but four is the number that I've seen people use.

533
00:48:26,341 --> 00:48:29,123
You could easily have a different number, but yeah, four.

534
00:48:30,223 --> 00:48:35,747
We're deciding that vertices are only significantly affected by four bones that surround them.

535
00:48:37,486 --> 00:48:50,876
There's one way of blending with dual quaternions, which reduces the candy wrapper effect in comparison with 4x4 matrices, which is where you just take your four quaternions and you multiply them by the weight, and then you just add all of those together.

536
00:48:51,177 --> 00:48:51,637
No biggie.

537
00:48:51,717 --> 00:48:55,040
But this doesn't completely get rid of the candy wrapper effect.

538
00:48:55,120 --> 00:49:01,004
But it is very fast, because you're adding eight floats instead of 16 floats for a 4x4 matrix.

539
00:49:01,024 --> 00:49:01,925
So it's pretty nice.

540
00:49:03,720 --> 00:49:30,880
If you want to eliminate the candy wrapper though, you have to use something like this, which you can apply the same logic to, well, you can derive this equation in the same sort of way that you derive the slurp equation that I said earlier, so it's kind of like a slurpesque blend, but you have to start with an initial guess, which will be probably the quaternion which has the highest weight, sorry, quaternion, the bone that has the highest weight,

541
00:49:32,321 --> 00:49:34,843
And then you have to run this through a few times.

542
00:49:36,104 --> 00:49:40,307
So it's less performant, but it does get rid of the candy wrapper effect completely.

543
00:49:40,747 --> 00:49:56,957
And at Imagination Technologies, we are implementing, well, not implementing, it's already implemented, but we are exposing this thing called the sync function, which is used in both the exponential and logarithm, and this will allow you to make it so that you're using exponential and logarithm super fast when you're doing it on the GPU.

544
00:50:00,638 --> 00:50:24,780
So to recap this talk, a quaternion is some amount of identity and some amount of axis line, with the axis line being x, y, and z, and the amount of identity being w. The double cover plot shows us how quaternions can be clockwise or counterclockwise, and how to invert them, because you just take the point down here, and that's the opposite of the quaternion that you have going this way.

545
00:50:26,571 --> 00:50:33,516
And it also shows us how, why some formulae for quaternions have a factor of two in them, which is a bit random.

546
00:50:35,118 --> 00:50:43,484
Dual quaternions, which allow, allow you to have lines around any axis, can be displaced from the origin, whatever you like.

547
00:50:44,485 --> 00:50:48,868
And this can even include having an axis that's infinitely far away, in some sense.

548
00:50:49,288 --> 00:50:51,370
And that is what a translation is.

549
00:50:53,066 --> 00:51:05,516
Compared with lerping matrices, quaternion and dual quaternion lerp is faster, and it reduces the candy wrapper effect, and slurping, which uses exponential and logarithm, though slower, eliminates the candy wrapper effect.

550
00:51:05,856 --> 00:51:06,556
Let me check my time.

551
00:51:06,797 --> 00:51:17,705
I've still got a few minutes, so I'm going to show you this slide, which I thought I had to cut out, but yeah, so this gives you a slightly better intuition for what's going on with the exponential and logarithm.

552
00:51:18,045 --> 00:51:20,107
So if I go to this webpage,

553
00:51:22,714 --> 00:51:22,834
if you

554
00:51:41,684 --> 00:51:44,847
Let's say San Francisco in the very middle of the map.

555
00:51:45,247 --> 00:51:53,534
If you walk from here to here along this map, then that will faithfully represent the angle that you have to go by on the Earth.

556
00:51:53,614 --> 00:52:01,040
But if you have to walk from here to here, that's not so true because it's impossible to have that with a flat map.

557
00:52:01,280 --> 00:52:03,182
If I get out of there.

558
00:52:04,619 --> 00:52:04,779
this

559
00:52:25,049 --> 00:52:25,269
I'm

560
00:52:40,968 --> 00:52:42,990
which is that you can do camera projections with them.

561
00:52:43,390 --> 00:52:48,274
So you eventually do need to convert your dual quaternions to 4x4 matrices.

562
00:52:48,534 --> 00:52:50,275
But that can actually be the last step.

563
00:52:50,636 --> 00:52:57,982
Although one thing that Eric Lengel has done is potentially shown a way that you can do camera transformations with dual quaternions.

564
00:52:58,602 --> 00:52:59,743
But this is ongoing research.

565
00:53:00,463 --> 00:53:03,906
Okay, and with that it remains to say these are my socials.

566
00:53:04,046 --> 00:53:05,027
Please get in touch with me.

567
00:53:05,387 --> 00:53:07,529
I'd love to chat with anybody who's interested in this kind of thing.

568
00:53:07,689 --> 00:53:09,391
I'm in San Francisco until the 31st.

569
00:53:10,211 --> 00:53:10,891
That's my email.

570
00:53:11,032 --> 00:53:11,652
That's my Twitter.

571
00:53:12,112 --> 00:53:13,253
Thank you very much for listening.

572
00:53:22,778 --> 00:53:23,878
We do have time for questions.

573
00:53:24,259 --> 00:53:26,360
We've got seven minutes for questions, which I'm amazed by.

574
00:53:29,502 --> 00:53:30,402
Oh, and we've got mics.

575
00:53:30,482 --> 00:53:33,824
There should be some roaming mics.

576
00:53:35,720 --> 00:53:38,544
Are there any issues or suggestions that you can recommend in converting Euler to quaternions?

577
00:53:55,264 --> 00:53:55,344
is

578
00:54:06,252 --> 00:54:08,333
in some order that you decide on specifically.

579
00:54:09,853 --> 00:54:27,457
And all you have to do is you take this formula, the correct axis angle to quaternion formula, you figure out your angle around your x-axis, your angle around your y-axis, and your angle around your z-axis, and then you multiply, and so you've got three quaternions from those angles, you multiply those quaternions together.

580
00:54:28,398 --> 00:54:30,238
That's how you convert from Euler angles to quaternion.

581
00:54:32,852 --> 00:54:37,493
And there can be no data loss in terms of converting from one to the other?

582
00:54:38,573 --> 00:54:39,273
Oh, yes, sorry.

583
00:54:40,113 --> 00:54:43,694
Well, I'd severely doubt it.

584
00:54:44,254 --> 00:54:45,474
I mean, yeah.

585
00:54:46,515 --> 00:54:51,215
Cos and sine, we've got very, very accurate cos and sine for the 32-bit floats.

586
00:54:51,255 --> 00:54:52,756
I mean, sorry, have you had that problem?

587
00:54:54,676 --> 00:54:56,276
Possibly, suspecting it, yeah.

588
00:54:57,557 --> 00:54:58,197
Well, interesting.

589
00:54:58,237 --> 00:54:59,577
I'd love to talk to you about that afterwards.

590
00:55:01,075 --> 00:55:02,276
so I don't have any advice there.

591
00:55:02,496 --> 00:55:03,457
Okay, that's good.

592
00:55:03,477 --> 00:55:03,757
Thank you.

593
00:55:07,120 --> 00:55:11,223
It seems like this is a very useful tool for translations and rotations in three dimensions.

594
00:55:11,503 --> 00:55:14,446
Are there equivalent frameworks for higher mathematical dimensions?

595
00:55:15,327 --> 00:55:16,247
Higher dimensions?

596
00:55:16,447 --> 00:55:19,590
Like a six-dimensional... There certainly are, yeah.

597
00:55:19,650 --> 00:55:22,452
So, this is part of what the second talk is about.

598
00:55:24,414 --> 00:55:27,677
I mean, I can't... So, first of all,

599
00:55:28,948 --> 00:55:44,633
One way of saying what the dual quaternions are is that there are three basis dual quaternions that square to minus one, which are the ones through the origin, and there are three basis dual quaternions which square to zero, which are the three basis lines at infinity.

600
00:55:46,342 --> 00:55:51,304
And if you then just know... No, I guess it's quite complicated.

601
00:55:51,324 --> 00:55:55,946
You've got to use something called Clifford algebra, which is what I'm talking about in the next talk.

602
00:55:56,066 --> 00:55:58,107
I'll get to that one then.

603
00:55:58,747 --> 00:55:59,048
Thank you.

604
00:56:01,989 --> 00:56:12,953
I think you already answered my question, but I just wanted to... This is equivalent to the other formulation with a number that's quest to zero, like epsilon.

605
00:56:15,325 --> 00:56:22,252
yeah I is this this this formula what you mean what I've been presenting today

606
00:56:22,557 --> 00:56:23,678
Yeah, dual quaternions.

607
00:56:24,238 --> 00:56:44,008
I've just seen another one where you just add quaternions with an extended... The reason that dual quaternions are called dual quaternions is because they are the tensor product of the dual numbers, which are this epsilon thing, where you've got a thing that squares to zero, with... there's a tensor product of the dual numbers with the quaternions, right?

608
00:56:44,348 --> 00:56:45,789
Because you... yeah.

609
00:56:46,149 --> 00:56:49,470
If you don't know what a tensor product is, well, I would guess that you do,

610
00:56:51,785 --> 00:56:52,445
a look.

611
00:57:07,102 --> 00:57:07,362
Okay.

612
00:57:08,183 --> 00:57:30,041
Just to help clarify something, if the first three values, like 1 through 0, determine, or like a 180 rotation, and how much of that rotation is built on its identity, so it requires both the W and that value, what happens if it's W is 0, but you have something like, say, 0.5,

613
00:57:32,062 --> 00:57:33,663
Why is this point five instead of one?

614
00:57:33,723 --> 00:57:59,636
Well, that's, that's the, so you can, the thing that I was trying to say with this slide is that, so these two quaternions do the same rotation, right, which is to say that you can take any number that you like, you know, any single floating point number, and if you multiply it by all of these, if you take, if you,

615
00:58:00,546 --> 00:58:08,951
multiply this quaternion by that number, unless the number is 0, you will always get a quaternion that's the same rotation.

616
00:58:09,911 --> 00:58:17,936
So if you had a quaternion that was x equals 0, y equals 0.5, z equals 0, w equals 0, that is still a 180 degree rotation.

617
00:58:23,160 --> 00:58:34,327
If you're going to get all these equivalent rotations, this is why we want to do the normalization so we don't get this confusion when it comes to these equivalent in quotes.

618
00:58:35,688 --> 00:58:37,289
That's one reason to normalize, yeah.

619
00:58:39,022 --> 00:58:39,662
Thank you, that helps.

620
00:58:39,982 --> 00:58:40,823
No worries, no worries.

621
00:58:42,223 --> 00:58:44,664
Yeah, I didn't say a whole lot about normalization in this talk.

622
00:58:45,405 --> 00:59:02,452
One reason that you want to normalize, it's probably worth saying, is that if you are in Unity, for example, and you don't normalize a quaternion well, and then you apply that quaternion to a point, then the point can end up further away, because you've got a quaternion that has a scale part as well.

623
00:59:04,081 --> 00:59:14,523
One reason that I didn't bring that up is because it's a bit confusing in the context of my second talk, because my second talk is significantly about homogeneous points, and homogeneous points don't have that problem.

624
00:59:14,923 --> 00:59:20,845
If you apply an unnormalized quaternion to a homogeneous point, it'll rotate the homogeneous point just fine.

625
00:59:22,145 --> 00:59:23,225
Same with a dual quaternion.

626
00:59:23,885 --> 00:59:26,106
And, I mean, you'll get a point which has a

627
00:59:27,026 --> 00:59:35,990
a different, well you'll, you will, you will get a, a point which has different floating point values in there, but it will have the same geometric interpretation.

628
00:59:36,030 --> 00:59:37,831
It'll still be a point in the same place.

629
00:59:40,452 --> 00:59:41,993
OK, cool.

630
00:59:42,393 --> 00:59:43,774
Any more questions?

631
00:59:44,314 --> 00:59:45,114
Sounds like we're done.

632
00:59:45,314 --> 00:59:45,615
All right.

633
00:59:45,895 --> 00:59:46,135
OK.

634
00:59:46,595 --> 00:59:48,456
Thank you very much for listening.

