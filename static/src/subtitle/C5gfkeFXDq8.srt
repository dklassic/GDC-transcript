1
00:00:12,686 --> 00:00:13,706
Hello and welcome everybody.

2
00:00:14,267 --> 00:00:19,590
I really appreciate that you're all coming out to this talk and really climbing the stairs to the third floor.

3
00:00:20,290 --> 00:00:22,972
This is Building the UI for a AAA Single.

4
00:00:24,152 --> 00:00:31,197
And I'm incredibly honored to be speaking because generally there's one, maybe two UI talks even given a year.

5
00:00:32,256 --> 00:00:42,420
So this is your quick reminder to silence some cell phones and to fill out the evaluation forms at the end, because it really helps to ensure that our specific discipline continues to be represented at GDC.

6
00:00:42,820 --> 00:00:45,421
Finding UI talks in the vault can be a little difficult sometimes.

7
00:00:47,342 --> 00:00:49,483
This is my first GDC presentation.

8
00:00:50,083 --> 00:00:58,887
So it's a little surreal for me to be on stage, because just about 10 years ago or so, I was just a game development student sitting in an audience like this.

9
00:00:59,627 --> 00:01:01,968
So it's kind of crazy to think that I'm standing here right now.

10
00:01:03,752 --> 00:01:15,501
Today, we're going to be broadly discussing what it took at Santa Monica for our team to create the UI for God of War Ragnarok, the AAA sequel to the award-winning God of War, which came out in 2018.

11
00:01:17,342 --> 00:01:26,469
And the goal today is to go in-depth on the plan and process for how we tackled this enormous project, specifically from a UI perspective.

12
00:01:29,605 --> 00:01:31,747
To do that, we're gonna talk about three topics.

13
00:01:32,628 --> 00:01:35,891
Number one, how do we build UI at Santa Monica?

14
00:01:36,992 --> 00:01:44,139
Number two, we're gonna step through specific screens and interfaces to better understand what it took to create them.

15
00:01:45,400 --> 00:01:55,209
And then lastly, as we dive into the pause menu in particular, we're gonna take a look back on 2018 and see what some of the lessons we had that we learned from.

16
00:01:56,820 --> 00:01:59,361
But before we do all of that, let me introduce myself.

17
00:02:00,141 --> 00:02:11,643
My name is Zach Bone, and I'm a senior staff technical designer responsible for building and maintaining the UI architecture, as well as implementing nearly every UI element that you saw in-game.

18
00:02:13,063 --> 00:02:20,345
I worked on a lot of different types of games in my career, first on indie teams, and then mid-sized studios in the mobile space.

19
00:02:21,650 --> 00:02:37,441
But over the last seven years, I've specifically worked as a user interface designer on these large AAA open world RPGs, starting with Spider-Man as a UI designer back in 2018, then onto Cyberpunk, and now with God of War Ragnarok.

20
00:02:38,402 --> 00:02:45,067
So this is your early warning that I may spoil some aspects of Ragnarok to better provide examples of the UI development process.

21
00:02:46,980 --> 00:02:52,868
So let's break down how we build UI at Santa Monica by taking a quick look at the team that did this.

22
00:02:53,969 --> 00:02:57,834
At the height of production, we had 11 people working on the UI.

23
00:02:58,856 --> 00:03:02,300
And for some of you, I'm sure that number sounds totally absurd.

24
00:03:03,614 --> 00:03:05,656
11 people just to work on the UI.

25
00:03:06,336 --> 00:03:08,959
That's kind of like a mini studio in and of itself.

26
00:03:09,739 --> 00:03:13,042
But that's actually the reality of working on these colossal projects.

27
00:03:13,402 --> 00:03:16,885
It's just a bunch of independent teams all working and collaborating together.

28
00:03:18,446 --> 00:03:21,708
And I honestly have no idea how many people worked on Ragnarok.

29
00:03:22,329 --> 00:03:27,473
Just before the pandemic, we had about 300 people and we were beginning to put desks in the aisles.

30
00:03:29,161 --> 00:03:30,062
But back to our team.

31
00:03:30,382 --> 00:03:36,948
It's got a pretty wide range of talents with a team that's split evenly between senior and junior developers.

32
00:03:37,668 --> 00:03:38,169
So this is me.

33
00:03:39,009 --> 00:03:41,051
I'm the senior technical designer for the team.

34
00:03:42,112 --> 00:03:48,057
And for as long as I've worked in UI, it's generally been true that it takes about two people to build UI.

35
00:03:49,338 --> 00:03:57,465
In our case, it's a combination of TD support on the implementation end and 3D art support, those who create the majority of our assets.

36
00:03:59,025 --> 00:04:04,028
And at studios of this scale, we actually need redundancy, just because there is so much going on.

37
00:04:05,929 --> 00:04:16,154
We have a couple of 2D artists on our team, and they act as concept artists, and they end up generating a lot of the initial assets that then get transitioned into a 3D workflow or a 3D environment.

38
00:04:17,659 --> 00:04:28,763
We had a single UX designer who we stole from Naughty Dog, and they came about midway through production to specifically help supporting all of our wide range of accessibility options.

39
00:04:30,003 --> 00:04:36,706
And then lastly, we have a gameplay engineer who acts as kind of this conduit between the UI script and then the rest of the game logic.

40
00:04:38,325 --> 00:04:42,110
And this team was roughly the right size for Ragnarok's four-year development.

41
00:04:42,811 --> 00:04:49,661
In truth, we really could have used one more technical designer, specifically at the very end of the project, only because there was so much going on.

42
00:04:52,714 --> 00:04:54,775
So I'm going to get technical just for a quick minute.

43
00:04:55,295 --> 00:04:58,277
This is the 60-second explanation of how our engine works.

44
00:04:59,057 --> 00:05:04,540
In short, everything in our game is pre-allocated, that nothing gets created at runtime dynamically.

45
00:05:05,280 --> 00:05:09,262
So we do this for performance and stability reasons.

46
00:05:10,423 --> 00:05:16,806
As a result, everything in our game is owned by something called a WOD def, which you can think of as just a container of things.

47
00:05:18,069 --> 00:05:20,570
Like, for instance, a level can be a WAD.

48
00:05:21,271 --> 00:05:22,411
There's a ton of levels in the game.

49
00:05:22,612 --> 00:05:28,275
We don't support all of them simultaneously, but we have the slots for a couple of levels to be loaded at any one time.

50
00:05:29,395 --> 00:05:39,041
And if a level ends up getting too large, like some of our huge XBL areas, like the crater, it can be split up into two or more WADs in order for them to be loaded properly.

51
00:05:40,782 --> 00:05:42,943
But some kinds of memory always need to be on.

52
00:05:43,424 --> 00:05:44,545
These are permanent wads.

53
00:05:44,825 --> 00:05:47,126
They manage progression and core systems.

54
00:05:47,887 --> 00:05:50,028
And the UI is one of these permanent wads.

55
00:05:50,829 --> 00:05:55,032
So everything we do has to fit really neatly into a specific memory budget.

56
00:05:55,332 --> 00:05:57,233
And when the UI breaks, the entire game breaks.

57
00:05:57,293 --> 00:05:58,234
Like, full stop.

58
00:05:58,634 --> 00:06:01,256
It's a P1 assert, and that's never fun.

59
00:06:03,325 --> 00:06:09,848
At Santa Monica, while nearly all of our assets are 2D, we utilize a 3D workflow through Maya.

60
00:06:10,748 --> 00:06:15,350
In game, it's just all drawn in a screen space position relative to the camera.

61
00:06:16,610 --> 00:06:22,953
Prior to this, every UI pipeline I had ever worked on was in 2D, so this was new and really weird.

62
00:06:24,344 --> 00:06:30,209
And there's naturally some big difficulties in trying to author UI in Maya, which it was never really built to do.

63
00:06:31,030 --> 00:06:34,052
Like, we have to hand author every layout in the entire game.

64
00:06:35,322 --> 00:06:44,592
But we do take advantage of the materials and effect systems that are already really optimized for the game, which unleashes the creative potential for a lot of our artists.

65
00:06:45,433 --> 00:06:55,784
Often, specifically with 2D workflows, you end up running into limitations when you hit the polish phase, when you want to start adding particles or you want to have specifically supported blend modes.

66
00:06:57,560 --> 00:07:04,786
Now, we're able to access and manipulate individual Maya groups by just marking them as game objects through a Santa Monica tool.

67
00:07:05,587 --> 00:07:13,553
And then on the scripting end, we have an API that allows us to globally search within a given WAD for a specifically named Maya object.

68
00:07:16,015 --> 00:07:23,562
Our tech workflow is entirely run on Lua, which is a typeless scripting system that Santa Monica has been using for ages.

69
00:07:24,824 --> 00:07:30,827
For Ragnarok, there was a major shift for a lot of other departments to start using a new visual scripting system.

70
00:07:31,428 --> 00:07:39,532
And if you're interested in learning more, Sam Sternklar's talk, which unfortunately was earlier today, but you'll find it on the vault, is specifically on this subject.

71
00:07:40,493 --> 00:07:46,516
But both the camera and the UI teams continue to use Lua for the entire duration of Ragnarok.

72
00:07:48,533 --> 00:07:57,562
Now, for any students that are in the audience or those watching, I want to take a quick moment to touch on how the process for data is managed in AAA games.

73
00:07:58,283 --> 00:08:07,633
Because as a student, you're probably familiar with Unity, and you're generally storing data inside of an inspector window, directly associating it with a particular script.

74
00:08:08,233 --> 00:08:11,357
They're essentially runtime-associated script variables.

75
00:08:12,571 --> 00:08:16,452
But in the AAA space, this data is often stored as static data.

76
00:08:16,812 --> 00:08:22,154
This is quest, equipment, journal data, and it never changes throughout the whole game.

77
00:08:22,514 --> 00:08:23,335
It's always static.

78
00:08:24,215 --> 00:08:30,537
For designers, it's often authored in JSON or some simple markup language in a text file or maybe in Excel.

79
00:08:31,717 --> 00:08:39,780
Now, the major difference is that in a text file, you can have multiple people editing it, and then it merges and diffs really nicely as it comes back together again.

80
00:08:41,325 --> 00:08:51,330
What's also nice about static data is in a lot of instances, it can be changed on the fly while the game is running, which gives designers this lightning fast iteration period.

81
00:08:53,291 --> 00:08:57,394
That static data gets interpreted by the game engine or the code that you're running on.

82
00:08:57,754 --> 00:09:04,177
This is often written in C++, especially if you're on the AAA side, but it does require the game to be recompiled.

83
00:09:04,698 --> 00:09:06,919
And the downside is this can take a really long time.

84
00:09:08,510 --> 00:09:15,995
For the UI team, we're actively working on a layer above that, which gives us the flexibility as if we're acting like data.

85
00:09:16,956 --> 00:09:22,160
The UI logic can either be updated on the fly or just rebuilt by rerunning the game.

86
00:09:23,181 --> 00:09:33,008
And then we access all of the static data through APIs from C++, such as just give me all the quests, that's all I need at the end of the day, and then I'm gonna be the one managing how that looks on a particular screen.

87
00:09:35,882 --> 00:09:40,765
But before we dig into the UI, I want to take a moment to step back and do a little bit of comparison.

88
00:09:41,886 --> 00:09:46,409
Ragnarok ended up being this huge undertaking for every department.

89
00:09:47,463 --> 00:09:52,147
Everything was expanded to give the Norse saga this big, epic, proper conclusion.

90
00:09:53,267 --> 00:09:57,751
And on the UI side, that came in the form of maps, skills, and HUD elements.

91
00:09:58,571 --> 00:10:05,496
The tech design team, which is just me and one other guy, oversees a code base that is about twice the size of the previous game.

92
00:10:06,357 --> 00:10:09,499
And the crazy thing is, our memory budget never changed.

93
00:10:09,860 --> 00:10:14,103
We had to do all of that in the exact same space, which was a real challenge.

94
00:10:15,814 --> 00:10:24,902
But it was also a huge accomplishment, because over the last four years, we've added and rebuilt a staggering number of features, which we're going to dive into now.

95
00:10:26,543 --> 00:10:29,065
To do so, we're going to cover three distinct areas.

96
00:10:29,726 --> 00:10:32,328
We're going to talk a lot about various utilities.

97
00:10:33,149 --> 00:10:34,990
We're going to talk a little bit about the HUD.

98
00:10:35,951 --> 00:10:37,332
And then we're going to dive into the menus.

99
00:10:38,113 --> 00:10:41,936
And that's when we're going to look back on the previous title and have a little critique about it.

100
00:10:43,621 --> 00:10:51,548
So first up are utilities, which is what our out-of-box experience, or UBI for short, is part of.

101
00:10:52,368 --> 00:10:58,954
This is the very first screen that players are going to encounter prior to any logos, splash screens, or even the front end.

102
00:11:00,115 --> 00:11:05,019
And God of War 2018 had a very simplified image calibration screen in this place.

103
00:11:06,618 --> 00:11:10,721
But our driving factor for an Ubi was really our commitment to accessibility.

104
00:11:11,502 --> 00:11:14,744
We wanted to prioritize giving folks options from the very beginning.

105
00:11:15,845 --> 00:11:22,470
So to do this menu, to build this menu, we took a lot of inspiration from what Naughty Dog had done over the last couple of games.

106
00:11:23,231 --> 00:11:25,193
But we also innovated in some small ways.

107
00:11:25,953 --> 00:11:35,801
This landing page is a really good example because we wanted to provide players with a really quick choice as if they wanted to skip past this or take their time through a guided setup.

108
00:11:38,288 --> 00:11:41,391
Choosing the guided setup dropped players into the first of four pages.

109
00:11:41,711 --> 00:11:43,453
This is just simply our common settings.

110
00:11:44,013 --> 00:11:47,536
We wanted a place where all the standard options that you would expect would be chosen.

111
00:11:48,017 --> 00:11:52,921
So language, subtitles, and UI text size, which is actually super important.

112
00:11:53,442 --> 00:11:57,926
So remember that it exists inside of the Ubi, because I'm going to talk a little bit more about this later.

113
00:11:59,738 --> 00:12:05,383
But as a quick aside, we totally underestimated the technical weight of our accessibility options.

114
00:12:06,044 --> 00:12:08,366
And we ended up getting pinched by it in a couple of ways.

115
00:12:09,427 --> 00:12:14,492
On the right-hand side is a visualization of all of the Lua files owned by the UI.

116
00:12:15,453 --> 00:12:17,474
And the largest one is our settings menu.

117
00:12:18,395 --> 00:12:25,462
We had almost 8,000 lines of Lua logic just for the definitions of what these settings options are.

118
00:12:27,219 --> 00:12:30,840
In an ideal world, Lua is really not where we should be storing this.

119
00:12:31,540 --> 00:12:35,701
Ideally, it's in a static data library, similar to what I was talking about earlier.

120
00:12:38,042 --> 00:12:51,185
The last Ubi page that I want to cover is our accessibility presets, because one of the challenges we noticed with the Ubis that Naughty Dog had begun to develop was that there were so many options, it very quickly became overwhelming to players.

121
00:12:54,065 --> 00:13:00,630
So to smooth out that user experience, we ended up creating these presets, which would change a wide variety of settings all in one go.

122
00:13:00,991 --> 00:13:05,274
And they served needs like vision, hearing, motion, and motor.

123
00:13:07,516 --> 00:13:09,117
Our front end is fairly standard.

124
00:13:09,497 --> 00:13:10,498
It provides all the basics.

125
00:13:11,018 --> 00:13:12,279
New game, settings.

126
00:13:13,060 --> 00:13:18,784
And like God of War 2018, it exists in the same screen space as our introductory cut scene.

127
00:13:19,807 --> 00:13:34,371
And I personally love it when the front end gets set up this way because it gives you this opportunity to have a seamless cut directly into the start of the game instead of hitting a big loading screen, which for a lot of players, especially if it's a narratively driven game, it can kind of ruin the excitement of starting that game.

128
00:13:36,018 --> 00:13:38,840
but has a lot of extra overhead because it's a full scene.

129
00:13:39,260 --> 00:13:42,482
It needs level designers, it needs lighting, it needs art direction.

130
00:13:43,183 --> 00:13:47,206
So the core creative team needs to be on board pretty early on.

131
00:13:47,626 --> 00:13:50,048
But thankfully we knew what we were getting ourselves in for.

132
00:13:51,388 --> 00:13:54,711
What we didn't expect were the challenges with the recap video.

133
00:13:56,223 --> 00:13:59,164
The recap was an overview of the events of God of War 2018.

134
00:14:00,665 --> 00:14:04,706
And our challenge really ended up becoming how our engine deals with streaming video.

135
00:14:05,267 --> 00:14:08,248
Because remember, our engine pre-allocates everything.

136
00:14:08,528 --> 00:14:09,468
That includes video.

137
00:14:10,049 --> 00:14:12,810
And the overall need to play video is really limited.

138
00:14:13,830 --> 00:14:18,152
As a result, the max video size we actually support in-game is only 1280x720.

139
00:14:19,753 --> 00:14:25,375
And now we were going to project this huge video along a wall, knowing that some players were going to be playing on a 4K television.

140
00:14:26,854 --> 00:14:29,517
The crazy thing is, we ultimately didn't change anything.

141
00:14:29,937 --> 00:14:34,583
This is actually a 720p video that is just stretched way out to fill the screen.

142
00:14:35,423 --> 00:14:39,388
But the campfire aesthetic passes the low quality off as something that's almost genuine.

143
00:14:40,976 --> 00:14:42,658
So I have kind of a takeaway for you.

144
00:14:43,338 --> 00:14:44,279
You've got to pick your battles.

145
00:14:45,000 --> 00:14:52,747
This one instance could have forced us to change the streaming video budget, which would have had major memory implications across the entire game.

146
00:14:53,467 --> 00:14:57,571
But we ended up finding a creative solution, which turned a weakness into a strength.

147
00:15:00,700 --> 00:15:11,145
Now, when you start supporting a wide number of settings options, we had 65, 70 options or something like that, it becomes difficult to how you categorize all of these.

148
00:15:11,686 --> 00:15:22,791
And we ended up settling with a mix of standard categories, like gameplay, as well as adding some new and very specific ones, like text and color, as well as accessibility and our audio cues.

149
00:15:24,632 --> 00:15:29,355
But we ended up being really flexible on exactly what was contained inside of each category.

150
00:15:30,751 --> 00:15:34,513
Auto pickup is in gameplay, but it also appears in accessibility.

151
00:15:35,414 --> 00:15:40,838
And this ended up being a combination of some of our opinions, but also the result of a lot of playtesting.

152
00:15:41,698 --> 00:15:47,442
If we noticed players struggling to find a particular setting, we would end up just duplicating it into other categories.

153
00:15:49,448 --> 00:16:01,158
With so many different settings, and some of them are controlled by the player, and some of them are being controlled through presets, we needed a way to know if a setting had been changed from its default value, which is where the blue text comes into play.

154
00:16:01,799 --> 00:16:08,745
It's this bright pop of color to help players know at a glance what's been affected, whether they changed it or one of their presets did.

155
00:16:09,065 --> 00:16:12,408
This is super cheap and immediately got a ton of results for us.

156
00:16:15,310 --> 00:16:21,133
One of the single largest accessibility options we ended up supporting for Ragnarok was full controller remapping.

157
00:16:21,873 --> 00:16:28,637
And I can't understate how colossal this was, as it involved re-architecting major ways the game worked under the hood.

158
00:16:29,437 --> 00:16:35,300
Because up until this point, designers had hard-coded specific buttons for every action in the entire game.

159
00:16:36,261 --> 00:16:38,582
So changing that paradigm took an entire village.

160
00:16:40,003 --> 00:16:46,246
Now when a designer sets up an interact, they specify the action most suitable to the context of that action.

161
00:16:46,867 --> 00:16:49,568
That could be aim, it could be interact, it could be evade.

162
00:16:50,929 --> 00:17:01,234
So if you're looking to make major headway into embracing accessibility and the community behind it, full controller remapping is the single most requested feature by far and away.

163
00:17:03,547 --> 00:17:08,010
And not every team has the advantages of AAA to support dozens of accessibility options.

164
00:17:08,610 --> 00:17:12,913
But there are some really great ways that we've seen indies support players like this.

165
00:17:13,474 --> 00:17:22,960
Like Celeste, which exposes just some basic gameplay options, which gives players a variety of different ways they can tune in order to make the game more accessible to them.

166
00:17:24,221 --> 00:17:29,084
Or in Overland, where you can swap out the core font for one that better serves players with dyslexia.

167
00:17:31,934 --> 00:17:35,596
Another aspect of utilities that the UI group supported was tutorialization.

168
00:17:36,297 --> 00:17:39,558
We supported about 70 distinct tutorials in Ragnarok.

169
00:17:40,379 --> 00:17:42,680
The vast majority of them all looked like this.

170
00:17:43,080 --> 00:17:47,043
They were just utilizing our simple sidebar message and were happening in-game.

171
00:17:48,223 --> 00:17:56,048
But we also supported about 15 in-menu tutorials which guided players through equipment, skills, transmog, and more.

172
00:17:57,315 --> 00:18:01,717
For effective tutorialization, because we did a lot of this, I've got a couple of tips for you.

173
00:18:02,998 --> 00:18:12,983
Number one, show tutorials in a very consistent space with consistent visualization so that players can learn where to look when they want advice.

174
00:18:14,444 --> 00:18:17,525
Number two, please only teach one thing at a time.

175
00:18:18,386 --> 00:18:24,669
From personal experience, combining multiple tutorials in-game really never gets you the results that you're looking for.

176
00:18:27,287 --> 00:18:44,500
Now, this third one might only be for sequels, but slightly delaying the activation in case players have already discovered it or they remembered it from the previous title is a really great quality of life feature, and it just streamlines and continues to immerse the player without pulling them out into a tutorial.

177
00:18:46,701 --> 00:18:50,765
For successful in-menu tutorials, I recommend a couple of steps.

178
00:18:52,065 --> 00:18:56,366
You want to support additional visualization, such as the bouncing arrows that you saw earlier.

179
00:18:56,847 --> 00:18:59,868
Those really help guide the player where they're looking on the screen.

180
00:19:01,628 --> 00:19:12,092
You also need to architect your tutorial logic so that it ends up hijacking your input system, to ensure that only specific actions allow players to go to the next step in the process.

181
00:19:14,246 --> 00:19:18,029
But ultimately, please keep your in-menu tutorials brief.

182
00:19:18,649 --> 00:19:20,050
No longer than seven steps.

183
00:19:20,570 --> 00:19:22,672
Because after this, players just start mashing buttons.

184
00:19:22,712 --> 00:19:24,493
They're like, I'm done, I wanna get back to the game.

185
00:19:27,395 --> 00:19:32,859
So, as we wrap up this portion on utilities, I wanna do a really small breakout lesson specifically on fonts.

186
00:19:33,339 --> 00:19:36,321
Because I have a big passion for this and nobody else in the studio cares.

187
00:19:39,011 --> 00:19:41,431
If you're new to fonts, here's a rule that I follow.

188
00:19:42,032 --> 00:19:43,852
Just use two fonts.

189
00:19:44,692 --> 00:19:46,152
Your first is your header font.

190
00:19:46,492 --> 00:19:50,033
It's going to be stylized, and it's going to represent your artistic direction.

191
00:19:50,353 --> 00:19:52,634
You're going to use this fairly sparingly.

192
00:19:53,714 --> 00:20:04,096
For Ragnarok, we used a font called Berserker, which was created in-house, and it captures the feeling of the kind of Norse, runic-like patterns, and we only used it in two places.

193
00:20:04,696 --> 00:20:12,040
our title text, and then our area announcement messages when you move from one realm to another or to a brand new area that you've never seen before.

194
00:20:12,481 --> 00:20:16,143
It gives that moment kind of an epic space, an epic time.

195
00:20:17,904 --> 00:20:20,165
For the second font, it's going to be your body font.

196
00:20:20,745 --> 00:20:26,469
And if there's one thing I want you to take away from this entire talk, it's that your body font should be readable.

197
00:20:28,149 --> 00:20:29,690
Our body font was Gilsans.

198
00:20:30,211 --> 00:20:34,033
It's something we licensed from Adobe, and this font covered us for eFIGS.

199
00:20:34,734 --> 00:20:40,438
And for those unfamiliar with localization, this stands for English, French, Italian, German, and Spanish.

200
00:20:41,339 --> 00:20:43,880
This covers you for most of your western regions.

201
00:20:44,861 --> 00:20:51,045
However, there's a number of regions that often require specialized fonts, as your eFIGS font just doesn't have the glyphs.

202
00:20:52,301 --> 00:20:59,347
Thai, Arabic, Japanese, Korean, Chinese often require entirely separate fonts.

203
00:21:00,728 --> 00:21:01,548
We actually lucked out.

204
00:21:01,989 --> 00:21:05,972
Gill Sans already supports Cyrillic, so we didn't need an additional font for Russian.

205
00:21:08,168 --> 00:21:13,455
The single biggest way we saved memory on Ragnarok was by utilizing a custom icon font.

206
00:21:14,517 --> 00:21:23,108
Using applications like FontForge, we loaded in black and white icons into a font sheet and then we're recalling them in-game by using a Unicode value.

207
00:21:24,099 --> 00:21:25,541
And this was a huge savings for us.

208
00:21:26,302 --> 00:21:38,099
Instead of having material and texture costs for over 200 icons, we could instead leverage a single font that was baked into a 2048 by 2048 texture that was then compressed further down.

209
00:21:39,929 --> 00:21:49,378
The additional advantage of using a font like this was that we ended up creating macros for our writers, so that they could embed inline specific icons into text fields.

210
00:21:49,819 --> 00:21:53,102
So, with a tutorial, use HackSilver to purchase this.

211
00:21:53,302 --> 00:22:00,149
Instead of writing HackSilver, they would use a macro for the HackSilver icon, which then players recognize and use everywhere else in their game.

212
00:22:00,549 --> 00:22:01,470
And that was totally free.

213
00:22:01,730 --> 00:22:02,291
That was awesome.

214
00:22:04,673 --> 00:22:09,738
So for a quick minute, I want to talk about the future of how we're going to approach fonts at Santa Monica.

215
00:22:10,658 --> 00:22:17,565
Because right now, we actually scan through all of the text in the whole game and scrape every glyph into a texture-packed sheet.

216
00:22:18,305 --> 00:22:23,270
We do this for both the God of War icon font I showed you earlier, as well as our header and body fonts.

217
00:22:24,251 --> 00:22:26,573
These are generally 1024 by 1024.

218
00:22:27,313 --> 00:22:29,976
Our icon font has a lot more going on, so it's twice that size.

219
00:22:32,153 --> 00:22:34,715
Each language in our game has its own WAD.

220
00:22:35,415 --> 00:22:39,397
Every time you swap your language, we're just reloading the same WAD slot.

221
00:22:40,098 --> 00:22:42,259
They each have about 10 megabytes.

222
00:22:42,960 --> 00:22:53,126
But even with compression, we actually ran dangerously close to our memory limit by just supporting three fonts, which ended up limiting us in some really weird and kind of painful ways.

223
00:22:54,628 --> 00:22:58,830
So our initial plan is to start looking at some GPU-based renders, like Slug.

224
00:22:59,470 --> 00:23:12,995
So instead of creating texture sheets at all, we're just going to plug in an OTF or .ttf file, and then have that glyph get directly rendered on screen, which gives us this huge advantage of supporting a wide variety of potential font styles.

225
00:23:13,235 --> 00:23:16,776
So you get a bunch of variety from your body font that you've created.

226
00:23:17,796 --> 00:23:20,198
And this is a huge win from a graphic design perspective.

227
00:23:20,699 --> 00:23:27,144
Being able to support thin, regular, heavy, or bold is something that artists ask for all the time.

228
00:23:28,545 --> 00:23:31,688
But what's also really interesting is it unlocks emojis.

229
00:23:32,789 --> 00:23:36,733
The implication is, up until now, all of our icons have been just in black and white.

230
00:23:36,933 --> 00:23:42,398
But if we use emojis, we get to add color to all of those same icons, which is a huge boon for our artists.

231
00:23:42,918 --> 00:23:43,859
So we're pretty excited.

232
00:23:45,694 --> 00:23:49,718
Alright, I'm going to stop talking about fonts because I'm going to talk a little bit about the HUD.

233
00:23:56,004 --> 00:24:02,110
Story comes first at Santa Monica, and with it, a clear cinematic direction that drives everything that we do.

234
00:24:03,551 --> 00:24:09,857
From a UI perspective, we're always looking to minimize the on-screen presence to enhance that feeling.

235
00:24:10,796 --> 00:24:15,640
But on the UX side, we also need to support a wide array of information that we need to give to the player.

236
00:24:16,860 --> 00:24:22,344
Now, compared to the rest of the UI, the HUD visually didn't change very much since the last title.

237
00:24:23,645 --> 00:24:27,849
However, we did change the system that governs the notifications that are on screen.

238
00:24:29,089 --> 00:24:32,572
Most notably, we put everything into a single global queue.

239
00:24:33,573 --> 00:24:36,475
Only one notification type can be on screen at any time.

240
00:24:40,387 --> 00:24:47,192
But the problem was feedback we got late in development was that players sometimes had to wait too long for some of these messages to appear.

241
00:24:47,412 --> 00:24:48,652
It was all in one giant queue.

242
00:24:49,053 --> 00:24:53,996
And if you ever visited the well in Vanaheim and had a ton of resources, I'm sure you ran into this.

243
00:24:54,937 --> 00:24:58,679
So moving forward, we're going to be revising the system to be more regional.

244
00:24:58,819 --> 00:25:01,321
We'd have a queue in the upper left, a queue in the upper right.

245
00:25:01,841 --> 00:25:12,948
And then we could either tie them together if we want to have a moment where a single UI message is really important, like the area announcement ones, or allow them to exist simultaneously in order to get through all of these different messages.

246
00:25:15,570 --> 00:25:24,896
So the major HUD considerations we had for Ragnarok actually came in the form of supporting new and custom UI that all have a very specific gameplay use.

247
00:25:25,716 --> 00:25:30,980
Muspelheim challenges, the Raven Arena, and the Mystic Gateway are all good examples of this.

248
00:25:32,728 --> 00:25:41,457
Because for Ragnarok, we knew a key feature was that players needed to travel freely between all nine of the realms, as well as the realm between realms.

249
00:25:42,538 --> 00:25:46,101
And our goal was to make this as intuitive and as time-saving as possible.

250
00:25:47,102 --> 00:25:50,986
And that actually meant a major departure from what we had done on the previous title.

251
00:25:52,759 --> 00:25:55,020
To give you a little bit of context, that was a while ago.

252
00:25:55,500 --> 00:25:58,000
This was how realm travel functioned in God of War.

253
00:25:58,821 --> 00:26:06,843
Kratos had to travel to a very specific place, Tyr's temple, and interact with this physical element in order to change all the various realms.

254
00:26:07,543 --> 00:26:08,943
And this felt epic.

255
00:26:09,543 --> 00:26:14,865
You had to go through this huge process in order to change realms, and it made that feel really meaningful.

256
00:26:16,226 --> 00:26:18,948
but it was also really limiting from a UX perspective.

257
00:26:19,688 --> 00:26:26,112
Players could only enter a realm from a single point, which made backtracking and revisiting areas really time intensive.

258
00:26:27,473 --> 00:26:31,356
So for Ragnarok, all of that logic got moved directly onto the gateway itself.

259
00:26:32,461 --> 00:26:40,270
And this UI is a blend of both Lua logic as well as some visual scripting because there's a lot of animations that are going into supporting this.

260
00:26:41,151 --> 00:26:45,276
It's a unique blend between screen space UI but also diegetic elements.

261
00:26:46,017 --> 00:26:51,984
The realm icons, their locked and unlocked states are all directly built into the doorway itself.

262
00:26:53,956 --> 00:26:59,741
But midway through production, it became clear that players were starting to lose their momentum when they hit a mystic gateway.

263
00:27:00,342 --> 00:27:01,263
Which was kind of odd.

264
00:27:01,883 --> 00:27:04,065
Why were players spending so much time here?

265
00:27:05,307 --> 00:27:11,873
In the videos captured during playtests, we ended up seeing players jumping in and out of the pause menu, trying to figure out where they needed to go.

266
00:27:14,093 --> 00:27:20,554
So to solve this, we brought the information the players were looking for to directly to them by just adding two elements.

267
00:27:21,515 --> 00:27:26,876
The first was that quest icons now appear on the door if one is present within a given realm.

268
00:27:27,736 --> 00:27:37,258
And then secondly, we also keep a log of all the available quests on the right-hand side to give them a little bit more context for exactly what was being offered in each one of those realms.

269
00:27:38,178 --> 00:27:42,980
and immediately we saw a huge change in player engagement as well as exploration.

270
00:27:43,500 --> 00:27:50,622
There are these natural breaks in the story where Kratos encourages you to go explore and this directly helped support all of that.

271
00:27:52,142 --> 00:27:52,963
So, some takeaways.

272
00:27:54,263 --> 00:28:00,165
Playtests and having video footage of players is invaluable because they may not tell you that they need help.

273
00:28:00,385 --> 00:28:01,946
They will just suffer in silence.

274
00:28:03,206 --> 00:28:06,307
We only discovered this issue after watching through the footage ourselves.

275
00:28:08,188 --> 00:28:13,092
And then anytime players open up the pause menu, they break away from the story that's being told.

276
00:28:14,193 --> 00:28:22,519
In this instance, we actually empowered players with the right information in order to keep them in the flow, which is really important if you have a narratively driven title.

277
00:28:25,361 --> 00:28:32,987
Another instance of custom UI requests that you're also gonna see in a lot of different types of games are specific variations of known systems.

278
00:28:33,687 --> 00:28:35,609
For us, this was our boss health bars.

279
00:28:36,860 --> 00:28:43,426
So early on, we sat down with the combat team and we discussed bosses and what kinds of support they would need for their health bars.

280
00:28:43,947 --> 00:28:44,707
And the news was great.

281
00:28:45,288 --> 00:28:48,211
Kratos was only ever going to fight one boss at a time.

282
00:28:49,632 --> 00:28:56,398
Well, there was this one unique instance where he fights two Valkyries, but that fight's kind of unique because they share a health bar.

283
00:28:56,959 --> 00:29:01,043
So we ended up only building a single self-contained element and we called it a day.

284
00:29:02,196 --> 00:29:11,063
The thing was, a couple of months later, the combat team came back around again and said, well, we have this instance where Kratos fights two water dragons.

285
00:29:11,683 --> 00:29:12,384
Can you support that?

286
00:29:13,365 --> 00:29:13,725
Of course.

287
00:29:14,225 --> 00:29:15,426
Of course we can support that.

288
00:29:16,007 --> 00:29:20,970
But we actually don't have a great solution for more than two bosses, because there's only so much screen space.

289
00:29:21,471 --> 00:29:24,393
And the combat team said, yep, that's great, and they went along their way.

290
00:29:25,874 --> 00:29:27,876
In the last five months of development,

291
00:29:29,025 --> 00:29:36,887
The combat team came back around again and said, so, we have this instance where Kratos fights three bosses all at once.

292
00:29:37,647 --> 00:29:38,487
Can you support this?

293
00:29:40,048 --> 00:29:40,428
Of course.

294
00:29:40,968 --> 00:29:42,268
Of course we can support this.

295
00:29:43,008 --> 00:29:45,249
But we only have the room for two health bars.

296
00:29:45,709 --> 00:29:53,711
So we ended up recycling the twin Valkyrie health bar in order to realize the creative vision of having this crazy, challenging boss encounter.

297
00:29:54,929 --> 00:29:59,513
which is probably a good thing because fighting three of those things would be just insane.

298
00:30:01,935 --> 00:30:03,016
So, some takeaways.

299
00:30:04,298 --> 00:30:09,622
When building UI, you need to approach this from adaptability and scalability.

300
00:30:10,023 --> 00:30:16,349
You never know when you need to expand a system or design decides to keep going further than you first expected.

301
00:30:17,537 --> 00:30:19,558
But you also need to be clear about some constraints.

302
00:30:20,118 --> 00:30:23,259
The combat team fully understood the limitations of screen space.

303
00:30:23,459 --> 00:30:25,260
There's only so much real estate to go around.

304
00:30:25,800 --> 00:30:27,941
And ultimately, it ended up in a better design.

305
00:30:30,341 --> 00:30:36,103
So before we dive into the pause menu, let's talk a little bit about how the team looked back at God of War 2018.

306
00:30:41,765 --> 00:30:46,887
It's a known fact that God of War 2018's development cycle had difficulties.

307
00:30:48,012 --> 00:30:51,753
There's actually a great documentary out there if you're interested in learning more.

308
00:30:52,713 --> 00:30:55,594
But when it came to the UI, there were two core issues.

309
00:30:56,434 --> 00:31:04,936
Despite building a deep RPG that had an extensive progression and menu structure, the UI group had really limited resources at the time.

310
00:31:06,217 --> 00:31:15,479
As a result, the whole UI that was shipped for the game was only built in six months, which is an amazing feat, but it ends up coming at a cost.

311
00:31:16,598 --> 00:31:19,080
Because when you go fast, you miss things.

312
00:31:20,021 --> 00:31:26,025
So while God of War 2018 was universally celebrated, there were aspects of the UI that held it back.

313
00:31:26,926 --> 00:31:32,791
So we didn't shy away from sitting down and having a hard critique about what worked and what just didn't work.

314
00:31:33,872 --> 00:31:37,795
So starting on Ragnarok, we had four specific goals from a UI perspective.

315
00:31:39,554 --> 00:31:43,137
We wanted to let our pause menu characters have a greater visual impact.

316
00:31:44,377 --> 00:31:47,780
We wanted to ensure that our font was always going to be readable this time.

317
00:31:49,521 --> 00:31:52,903
We wanted to optimize our space as efficiently as possible.

318
00:31:53,804 --> 00:31:56,646
And we wanted to make the UI really easy to navigate.

319
00:31:58,499 --> 00:32:04,721
So looking back on Kratos in the menus, it was clear that instead of coexisting, he was competing with the UI for space.

320
00:32:05,621 --> 00:32:15,083
From the tabs at the top to the info cards on the left and right, he was given this very narrow space to live in, and he was often overlapped by elements of the UI.

321
00:32:16,924 --> 00:32:25,166
For Kratos to have the space to breathe, we needed to slide him over to the right, which gave us a much better separation between model and UI spaces.

322
00:32:26,274 --> 00:32:35,499
because this one simple change had a whole cascade of updates, with the tab menu moving to the bottom, the attribute panel being condensed, and swapped over to the opposite side.

323
00:32:38,100 --> 00:32:43,283
Our menu prompts in the bottom right now react to the menu depth and adjust their position accordingly.

324
00:32:43,943 --> 00:32:51,947
This allows us to zoom in and out, have characters step forward and backward into frame, and it ensures that Kratos is never covered by the UI.

325
00:32:55,342 --> 00:33:00,883
One of the biggest weaknesses of the UI on the last project was that text was painfully unreadable from a distance.

326
00:33:02,063 --> 00:33:07,825
And while there was a post-launch patch, which made things maybe a little bit better, there's only so much that it could do.

327
00:33:08,145 --> 00:33:12,926
This underlying system just straight up did not support this kind of content.

328
00:33:13,706 --> 00:33:16,546
So we swore that this time around, it was just not gonna happen.

329
00:33:19,727 --> 00:33:24,908
And in particular, for small text, these are the areas where players struggle the most.

330
00:33:28,126 --> 00:33:32,151
Early on, we decided that our body font would never be smaller than 24 points.

331
00:33:32,772 --> 00:33:36,757
And in fact, we were going to offer a wide array of text scaling options.

332
00:33:37,398 --> 00:33:46,009
So no matter how far players were sitting, or if they had some kind of visual impairment, we wanted everyone to be able to read what was on screen.

333
00:33:48,829 --> 00:33:53,373
As a quick aside, this text scaling was phenomenally successful.

334
00:33:54,093 --> 00:34:00,218
Our early metrics at the number of players who changed the font initially did not seem real.

335
00:34:01,599 --> 00:34:09,786
As of today, we're seeing nearly 60% of players change their setting, which never happens, to large, which is one step up from our default.

336
00:34:11,627 --> 00:34:17,611
Once you make this commitment to having font scaling, it means that you need to build the content and the technology that scales well with it.

337
00:34:18,252 --> 00:34:24,736
And this is often called dynamic layouts, where the position of content shifts to accommodate other content.

338
00:34:25,937 --> 00:34:31,341
So, for instance, when you have one text field's Y position being based on the height of the text field above it.

339
00:34:32,362 --> 00:34:38,406
This seemingly simple concept is not supported out of the box by most UI systems, and it needs to be built.

340
00:34:43,237 --> 00:34:45,878
The card in the middle of the screen is a great example of this.

341
00:34:46,459 --> 00:34:55,503
It is capable of reacting to a wide variety of possible components, from attributes and descriptions to perks, bink videos, and lore entries.

342
00:34:56,204 --> 00:35:07,630
No matter what kind of content we throw at this card, we're capable of handling it, which comes in especially handy for localization, where a simple description can easily become a paragraph in certain languages.

343
00:35:09,571 --> 00:35:15,053
Now, in comparison, for God of War 2018, all of the layouts were completely static.

344
00:35:16,494 --> 00:35:20,535
We didn't even change or update to take advantage of the space that was available.

345
00:35:21,355 --> 00:35:34,560
The stats card in the middle was built with the fullest possible layout in mind, which looks pretty good at the end of the game, but it looks really awkward at the start of the game when a piece of gear hasn't been fully realized.

346
00:35:37,779 --> 00:35:43,863
And then lastly, from a pure graphic design perspective, there were some inconsistencies with navigation.

347
00:35:45,024 --> 00:35:54,550
While primary navigation was localized in the same general screen space, what we considered a button was really different depending on the menu that you were in.

348
00:35:55,491 --> 00:35:58,813
Buttons end up being these large sockets on the weapons menu.

349
00:35:59,654 --> 00:36:03,356
They were a completely different shaped socket on the armor menu.

350
00:36:04,297 --> 00:36:06,859
They were a list on the enchantments screen

351
00:36:10,120 --> 00:36:11,802
and there were nodes on the skill tree.

352
00:36:15,145 --> 00:36:24,253
So for Ragnarok, we have a very consistent sidebar, which shows up everywhere, from the weapons and armor menus, to the skill tree, to the vendor.

353
00:36:25,594 --> 00:36:26,935
We also visually transition.

354
00:36:27,496 --> 00:36:33,341
Anytime we dive deeper, the menu slides to the right, while ascending is always to the left instead.

355
00:36:36,502 --> 00:36:39,745
Our last section today is going to be on the menus for Ragnarok.

356
00:36:40,426 --> 00:36:45,131
But instead of diving into each of the pause menus, I'm going to take you through three specific case studies.

357
00:36:45,952 --> 00:36:48,454
Enchantments, skill mods, and the journal.

358
00:36:50,416 --> 00:36:57,063
Our first case study, the enchantments screen, is one that I see as one of the greatest success stories of the UI.

359
00:36:59,491 --> 00:37:03,695
One of the core long-term progression systems in 2018 was the enchantment system.

360
00:37:04,716 --> 00:37:09,361
Gear, such as chest or waist equipment, had some number of enchantment slots.

361
00:37:10,202 --> 00:37:22,154
And these slots were filled with enchantments that offered a wide variety of bonuses, from simple attribute buffs to some build-defining perks that could fundamentally change combat in interesting and unique ways.

362
00:37:23,561 --> 00:37:30,740
By having enchantment slots tied directly to gear, it made that equipment really valuable, but it also created a weird UX issue.

363
00:37:32,674 --> 00:37:36,237
There was no way to view all of the players' equipped enchantments all at once.

364
00:37:36,717 --> 00:37:43,202
You needed to individually inspect every piece of gear, making it difficult for players to understand their overall build.

365
00:37:44,043 --> 00:37:53,110
And ultimately, this UX issue led to a lower-than-desired percentage of players who would even interact with the system, particularly on the deeper side of things.

366
00:37:56,434 --> 00:38:03,018
So there was this universal desire from the combat and the UI team to remedy this particular problem for Ragnarok.

367
00:38:03,839 --> 00:38:06,301
And thus, the amulet of Yggdrasil was created.

368
00:38:07,001 --> 00:38:10,884
It's a single place where all of the player's nine enchantments could be viewed at once.

369
00:38:12,505 --> 00:38:15,086
On the UI side, this offered some challenges though.

370
00:38:15,867 --> 00:38:19,709
Our first iteration had this function like every other equipment screen in the game.

371
00:38:19,970 --> 00:38:23,372
Our goal was to have consistent navigation no matter where you were in the menus.

372
00:38:25,489 --> 00:38:32,795
because where every slot is just a category that we dive into and then we show the list of all the possible items that can be equipped.

373
00:38:33,516 --> 00:38:35,857
But this proved totally disastrous.

374
00:38:36,658 --> 00:38:44,565
Players and developers hated it because just like in 2018, you end up losing track of every other enchantment you actually had socketed in.

375
00:38:46,086 --> 00:38:52,992
So the solution ended up being that we had to break some of the conventions that we had stuck to our guns on for so long.

376
00:38:54,198 --> 00:39:02,304
In this particular instance, we decided that the user experience need was greater than the game fantasy, so we put UI directly on top of Kratos.

377
00:39:03,225 --> 00:39:14,453
And we developed a new menu structure that allowed for two simultaneous lists, the items on the left-hand side and the slots on the right, which is actually another convention that we're breaking.

378
00:39:14,573 --> 00:39:15,734
Usually it's the other way around.

379
00:39:15,834 --> 00:39:17,755
We start from the top and work down instead.

380
00:39:18,800 --> 00:39:23,203
But in this instance, players choose an item, and then they choose a slot that it goes into.

381
00:39:23,823 --> 00:39:25,504
And this was a total breakthrough.

382
00:39:26,444 --> 00:39:29,586
All of a sudden, people were really starting to engage with the system.

383
00:39:35,149 --> 00:39:35,370
Sorry.

384
00:39:36,890 --> 00:39:41,033
But there was still some friction where players were beginning to reconceptualize their build.

385
00:39:41,353 --> 00:39:44,475
So the next iteration was a context-sensitive approach.

386
00:39:46,343 --> 00:40:13,813
where we allowed players to directly navigate onto the menu list, which would allow them to reverse their flow back into kind of our standard convention, where players would then pick a slot and then choose which enchantment would go into it, which ended up being a great way to rapidly unsocket all of your build if you wanted to make changes, which was really important for our power players, particularly towards the end of the game where things got really difficult and you had to hyper-specialize in order to complete the game.

387
00:40:15,959 --> 00:40:23,442
Our director, Eric Williams, loved this navigation flow so much he wanted us to use the same framework for all of our companion accessories as well.

388
00:40:25,117 --> 00:40:29,058
So this system and this interface is seen by the UI team as a great triumph.

389
00:40:29,418 --> 00:40:33,739
It's a great system that ends up blending systems design and great UX.

390
00:40:34,579 --> 00:40:38,300
And we know it's successful because nobody mentions this UI at all.

391
00:40:39,160 --> 00:40:44,941
Instead, they talk about their builds and their excitement and the possibility space that enchantments provide.

392
00:40:45,841 --> 00:40:49,262
So you know you've created great UI when it becomes totally invisible.

393
00:40:51,809 --> 00:41:01,677
So the two takeaways that I have for you are, if it's a core system that's fundamental for long-term player engagement, and it's just not clicking, keep iterating.

394
00:41:02,457 --> 00:41:04,159
But please build time into your schedule.

395
00:41:04,319 --> 00:41:05,099
We did not do this.

396
00:41:06,421 --> 00:41:09,863
It was a lot to finally get there, but it was totally worth it in the end.

397
00:41:11,464 --> 00:41:14,127
But you also need to know when to break your own rules.

398
00:41:14,607 --> 00:41:18,250
In our case, the UX rule won out over our own artistic pillars.

399
00:41:20,748 --> 00:41:30,211
So the second case study I want to take a look at is our skill mods, and how another system that ended up lacking a lot of engagement in 2018 was re-conceptualized.

400
00:41:31,971 --> 00:41:35,773
So in the previous title, there was a system in the skill tree called bonuses.

401
00:41:36,413 --> 00:41:39,774
It's down there on the bottom right, and probably not a lot of you remember it.

402
00:41:41,072 --> 00:41:47,115
This bonus system was really interesting from a combat perspective, and it opened up a lot of new possibilities for players.

403
00:41:47,675 --> 00:41:55,940
The system was intended to continually keep combat fresh during the end portion of the game, after the players have already unlocked a lot of their skills.

404
00:41:56,940 --> 00:42:01,803
But nobody engaged in the system at all, because it was a mismatch of player priorities.

405
00:42:02,839 --> 00:42:07,182
On this menu, we had been training players for hours, just worry about your skills.

406
00:42:07,382 --> 00:42:08,542
This is the only thing you need to do.

407
00:42:09,463 --> 00:42:16,047
But the thing was, all of these bonuses were gated by attributes, which is something they did on a totally separate screen.

408
00:42:16,667 --> 00:42:22,831
So this mismatch in player priorities basically made the system that we spent all this time building totally useless.

409
00:42:25,154 --> 00:42:27,796
So, for Ragnarok, we wanted to take another stab at this.

410
00:42:28,336 --> 00:42:35,721
For the same reasons as before, we wanted to keep combat fresh during the end portion of the game, after players have unlocked a bunch of skills already.

411
00:42:37,082 --> 00:42:40,364
But to drive engagement, we end up doing an unusual thing.

412
00:42:41,105 --> 00:42:43,106
We hid the system away entirely.

413
00:42:43,967 --> 00:42:49,651
Players don't unlock skill mods until they've completed a chain of quests tied to a particular skill.

414
00:42:50,774 --> 00:42:55,655
Once they complete it, next time they open up the skill menu, we introduce the system with the tutorial.

415
00:42:57,296 --> 00:43:03,737
Instead of having a passive bonus that simply activates, this system now takes active participation from the player.

416
00:43:04,578 --> 00:43:17,721
Players have to purchase a skill mod from a curated list of possibilities, which allows a lot of experimentation on the player end, but gives us a little bit of context and a little bit of constraints to ensure they can't get overly powerful in a particular way.

417
00:43:19,687 --> 00:43:21,168
They then socket that into place.

418
00:43:21,868 --> 00:43:25,751
And this tangible nature of upgrading the skill went a really long way.

419
00:43:26,371 --> 00:43:35,637
We're seeing massive player engagement and player enthusiasm for this system across the board, and for something that is pretty hardcore in a lot of instances.

420
00:43:37,278 --> 00:43:38,079
So, some takeaways.

421
00:43:39,279 --> 00:43:43,102
Presentation matters, especially for systems that require active engagement.

422
00:43:44,465 --> 00:43:51,791
But hiding progression systems, especially if they're targeted towards high-end or end-game players, can be really valuable because it makes them novel.

423
00:43:52,752 --> 00:44:01,139
But don't forget to tutorialize it because you want to really introduce the fact that this is something brand new, you've never seen this before, and then they know it's a brand new system.

424
00:44:03,921 --> 00:44:11,127
Our last case study that I want to discuss is a feature that I think we failed to properly deliver on, and this was the journal.

425
00:44:12,455 --> 00:44:14,999
For reference, here's what it looked like in God of War 2018.

426
00:44:16,381 --> 00:44:19,665
Because the pages are flat, you can't tell that we're totally faking it.

427
00:44:20,246 --> 00:44:22,149
All of the assets are rendered on top of the book.

428
00:44:23,953 --> 00:44:25,334
And here's the journal for Ragnarok.

429
00:44:25,954 --> 00:44:28,216
In a lot of ways, it's totally identical.

430
00:44:28,696 --> 00:44:31,978
But this time, the content is directly rendered onto the page.

431
00:44:32,839 --> 00:44:38,282
And you can see some evidence of that with some highlights and some of the background effects that kind of like contour to the page.

432
00:44:39,323 --> 00:44:42,265
But we were like, we're AAA, we want to take this a little further.

433
00:44:42,865 --> 00:44:48,809
So we wanted to provide, we really wanted to prove that the content was physically present or diegetic.

434
00:44:49,689 --> 00:44:53,372
So to do this, we were determined to get the book to flip the pages.

435
00:44:54,969 --> 00:44:58,072
Oh man, we had no idea what we were getting ourselves in for.

436
00:44:59,774 --> 00:45:01,836
At first, things are pretty straightforward.

437
00:45:02,998 --> 00:45:09,284
You get these elements to show up on a page using something called a custom render target, or custom RT.

438
00:45:10,125 --> 00:45:16,532
Anything sharing a custom RT texture would render together as a single flat texture that was just texture mapped to a page.

439
00:45:17,383 --> 00:45:19,604
Cool, we have content on a page, this is great.

440
00:45:21,425 --> 00:45:25,108
When a book is flipped, you have the left and right pages.

441
00:45:25,808 --> 00:45:31,692
But when you're flipping a page, you also have the left and right pages of the next upcoming page to deal with as well.

442
00:45:33,653 --> 00:45:36,374
Now a page flip happens anytime we change categories.

443
00:45:37,115 --> 00:45:41,738
And some categories have similar UI elements, like headers, descriptions, or lists.

444
00:45:42,278 --> 00:45:45,440
But because we're page flipping, we can't recycle any of it.

445
00:45:46,914 --> 00:45:52,241
Any possible combination of categories could be opened at any time, like labors and the treasure maps.

446
00:45:53,102 --> 00:45:57,208
So instead, we ended up supporting unique assets for every category.

447
00:45:58,470 --> 00:46:04,458
What further complicated this was that we decided to flip pages between tabs, which was a really bad idea.

448
00:46:05,967 --> 00:46:11,671
Because despite the fact that they look the same to the user, these are entirely different scripting classes under the hood.

449
00:46:12,772 --> 00:46:24,220
So between the complexities of page flipping and our ability to render all of these assets in a really limited way, the scope of what should have been the simplest menu in the entire game ballooned.

450
00:46:24,921 --> 00:46:28,464
And ultimately, it came to a head during the finaling period of Ragnarok.

451
00:46:29,764 --> 00:46:34,268
Because testers were able to break this in so many ways.

452
00:46:36,257 --> 00:46:37,078
It took a long time.

453
00:46:37,578 --> 00:46:39,860
The journal is stable-ish.

454
00:46:40,680 --> 00:46:45,103
But to this day, you can still put it into a broken state where no UI will render at all.

455
00:46:45,664 --> 00:46:49,306
It does fix itself, I assure you, most of the time.

456
00:46:50,267 --> 00:46:52,549
But please do not try pushing this harder than it should be.

457
00:46:54,510 --> 00:46:59,634
So while aesthetically pleasing, most players will actually never notice this effect.

458
00:47:00,754 --> 00:47:07,377
So the takeaways from the journal should really be, don't change something just because you can or you feel like you should.

459
00:47:08,397 --> 00:47:12,239
Please evaluate what the change brings to the experience.

460
00:47:13,359 --> 00:47:16,581
As our producer likes to say, is the juice worth the squeeze?

461
00:47:17,361 --> 00:47:18,922
This was not worth the squeeze.

462
00:47:19,582 --> 00:47:20,762
I spent a lot of time on this.

463
00:47:22,603 --> 00:47:24,684
I'm really glad that I don't have to do that again.

464
00:47:26,741 --> 00:47:42,564
So we've covered a lot of ground here, ranging from the ways that we build UI at Santa Monica to deep dives on specific UI, as well as how the UI for God of War has evolved over time to provide a better user experience for players, which really brings us to the end.

465
00:47:43,164 --> 00:47:46,925
My name is Zach Bone, and I really thank you for coming out and coming out to GDC.

466
00:47:47,545 --> 00:47:50,906
We've got 13 minutes left for questions if anybody wants to ask.

467
00:48:04,053 --> 00:48:04,293
Hello.

468
00:48:05,615 --> 00:48:12,566
I was wondering if you guys localized your header font since you said they made that in-house and we had a lot of fonts for your other languages.

469
00:48:12,606 --> 00:48:15,671
Did you guys localize that in-house or what was your solution there?

470
00:48:16,024 --> 00:48:18,466
So the question is, do we localize our header font?

471
00:48:18,926 --> 00:48:19,907
The answer is no.

472
00:48:20,708 --> 00:48:26,492
If you are not one of the western regions, you do not get this font.

473
00:48:26,772 --> 00:48:35,179
We instead swap it for your body font instead, which is a real bummer, but that's kind of the limitation when you end up building something by hand.

474
00:48:35,899 --> 00:48:41,003
If we had someone on staff who was a graphic designer and could continue building out all those glyphs, that's awesome.

475
00:48:41,343 --> 00:48:43,324
But that's also a huge skill set.

476
00:48:44,425 --> 00:48:50,389
I don't know if I would feel comfortable trying to author a Chinese glyph and making sure that it appears correctly.

477
00:48:50,569 --> 00:48:52,310
So that's just kind of a limitation we live with.

478
00:48:52,871 --> 00:48:53,171
Thank you.

479
00:48:53,811 --> 00:48:54,732
Go ahead.

480
00:48:55,152 --> 00:48:56,073
Hi, thank you for your talk.

481
00:48:56,133 --> 00:48:57,174
It was very good.

482
00:48:58,014 --> 00:49:01,797
I just wanted to know, what are your most recommended places to find fonts?

483
00:49:02,517 --> 00:49:04,959
And what are the telltale things to know if it's readable?

484
00:49:05,993 --> 00:49:08,895
So the question is, where do we often find fonts?

485
00:49:09,576 --> 00:49:11,337
And what was the second part?

486
00:49:11,917 --> 00:49:16,501
And what are some signs that are going to let you know that it's going to be a readable font?

487
00:49:16,641 --> 00:49:17,682
It's going to be a readable font.

488
00:49:18,342 --> 00:49:28,750
So the advantage of working for a really large company, and some of the downsides too, is that we are very limited to where we can find fonts from a licensing perspective.

489
00:49:29,611 --> 00:49:33,654
Sony has access to a huge variety of Adobe style fonts.

490
00:49:33,774 --> 00:49:34,734
So basically they're like,

491
00:49:35,575 --> 00:49:38,076
You can pick whatever you want, but it needs to be on the Adobe side.

492
00:49:40,557 --> 00:49:53,522
As for readability, we tested a lot of different fonts in the past with a bunch of users where we just put a bunch of like lorem ipsum text and we put them side by side and eventually kind of picked down to the one that we're looking for.

493
00:49:54,554 --> 00:50:02,725
What I did do for a lot of other languages was I was given a font for Arabic, for instance, and they were like, just go ahead and use this.

494
00:50:03,286 --> 00:50:10,355
But I ended up turning back around to native Arabic speakers, particularly through our localization QA, and said, what do you think about this font?

495
00:50:10,796 --> 00:50:15,959
and I'm really glad I did because they came back and they said, it just looks like a textbook, it's fine, whatever.

496
00:50:16,399 --> 00:50:25,944
But ultimately, I then basically sat them down next to me as we went through Adobe's huge library of Arabic fonts and we picked out one that we just liked and it worked out.

497
00:50:26,664 --> 00:50:27,605
Nice, thank you so much.

498
00:50:30,356 --> 00:50:30,596
Go ahead.

499
00:50:31,437 --> 00:50:32,637
Hi Zach, thank you for the talk.

500
00:50:33,458 --> 00:50:39,261
I'm a technical UI designer, and you mentioned in the beginning that there aren't many talks on UI.

501
00:50:39,801 --> 00:50:42,362
So with it being such a huge part of games, why do you think that is?

502
00:50:43,863 --> 00:50:46,164
So why do I think there's not a lot of UI talks?

503
00:50:46,765 --> 00:50:50,246
I think it's because it's a really specialized skill set still.

504
00:50:51,607 --> 00:50:58,491
You don't see a lot of UI positions for the most part, or it's kind of a field that only developed over the last three to five years.

505
00:50:59,131 --> 00:51:03,175
The industry is going to catch on, but it's also one that's really limited.

506
00:51:03,575 --> 00:51:10,141
On a title like Ragnarok, we have 40 level designers, where we only have a couple of UI folks.

507
00:51:10,361 --> 00:51:12,043
So the need is always going to be smaller.

508
00:51:12,163 --> 00:51:15,126
It's just like at a studio, you may only need one writer.

509
00:51:15,726 --> 00:51:18,449
So that is just kind of how it goes.

510
00:51:19,029 --> 00:51:20,330
I hope it does change over time though.

511
00:51:21,391 --> 00:51:21,691
Thank you.

512
00:51:23,502 --> 00:51:25,844
Awesome talk, super informative for all of us, I think.

513
00:51:26,744 --> 00:51:30,467
My question actually comes down to the connection between combat design and UI.

514
00:51:32,028 --> 00:51:43,657
As a combat designer, I would love to know any tips or like insight you have to what we could do to help UI and reduce pain points late in development when we realize that we have limitations and any tips you have.

515
00:51:44,244 --> 00:51:51,210
Okay, so question is like, how can you better foster a relationship between the combat and the UI teams?

516
00:51:52,411 --> 00:51:54,893
This is something we talk about a lot at Santa Monica.

517
00:51:56,094 --> 00:51:58,536
The combat team drives a lot of design for us.

518
00:51:59,297 --> 00:52:00,518
So the biggest thing is

519
00:52:01,198 --> 00:52:05,920
On the UI side, being in the room when decisions are being made, that's probably the biggest thing.

520
00:52:06,300 --> 00:52:15,303
We can just be a fly on the wall and kind of listen for when something needs an extra piece of user interface or potentially another set of ears.

521
00:52:16,464 --> 00:52:18,464
That's probably the best thing to get started with.

522
00:52:19,085 --> 00:52:22,106
Anytime there's a new system being a part of that,

523
00:52:23,126 --> 00:52:23,226
talk.

524
00:52:36,921 --> 00:52:37,481
Hey, thank you.

525
00:52:37,741 --> 00:52:38,602
That was really good.

526
00:52:39,502 --> 00:52:52,307
My question is, what was the process for you guys like when you do the UI and then knowing that you have to support a lot of different languages and with fancy features like the font scaling?

527
00:52:53,808 --> 00:52:56,069
Did you guys experience a lot of problems when you

528
00:52:57,560 --> 00:53:04,245
work on the UI and then everything is working well but only realized that it doesn't really work in another language at all.

529
00:53:05,526 --> 00:53:14,632
Was there a lot of back and forth or did you guys do anything special throughout the production to help solve this sort of issues?

530
00:53:15,609 --> 00:53:22,834
So kind of a good culmination of that question is, how do we make sure that we don't get bit later on for localization?

531
00:53:24,175 --> 00:53:25,796
For me, it came from experience.

532
00:53:26,956 --> 00:53:34,321
I ran into that exact issue on Spider-Man, and I spent three months fixing Korean, and I was like, I'm never doing this ever again.

533
00:53:34,781 --> 00:53:41,366
So when I came on at Santa Monica, my goal was like, we're doing dynamic layouts, and this is how it's gonna be.

534
00:53:42,246 --> 00:53:48,592
So super early on into every system, I built this expectation that it needed to have a dynamic layout.

535
00:53:49,333 --> 00:53:58,861
And as we moved forward with every layout we would do, all the way down to the wireframing, we were always asking the question, how is this going to be supported in other languages?

536
00:53:59,261 --> 00:54:03,905
How are we going to make sure that it doesn't have overlap or have too long of a space?

537
00:54:06,747 --> 00:54:18,276
Unfortunately for a lot of localization, it comes online really late sometimes, maybe in the last five or six months where you actually get meaningful amounts of localization in and you can kind of test your UI at scale.

538
00:54:19,137 --> 00:54:21,238
And it came online and it was crickets.

539
00:54:21,258 --> 00:54:23,400
And I was like, oh my gosh, the world is exploding.

540
00:54:23,460 --> 00:54:26,502
Like, why am I not getting any bugs like I did for Spider-Man?

541
00:54:26,862 --> 00:54:31,106
And it was because the dynamic layouts worked, which was really weird.

542
00:54:31,506 --> 00:54:32,787
So you got to pre-plan for it.

543
00:54:33,186 --> 00:54:33,706
Great, thank you.

544
00:54:35,107 --> 00:54:36,368
Go ahead.

545
00:54:36,628 --> 00:54:37,189
Thanks for the talk.

546
00:54:37,629 --> 00:54:51,618
I was wondering how the conversation went between you and your team, how it was when you were kind of talking about breaking your own rules, specifically about putting overlap on Kratos, and was there any disagreements, and how did you kind of manage that conversation?

547
00:54:52,419 --> 00:54:58,302
So, how did we finally realize that we needed to break our own rules, specifically around the enchantment screen?

548
00:55:00,458 --> 00:55:08,441
It was through feedback and through testing, we had gone through two different play sessions with the enchantment system in the game.

549
00:55:09,401 --> 00:55:14,583
And the first set of play tests, we kind of ignored the feedback.

550
00:55:14,603 --> 00:55:16,783
We were like, yeah, it can't possibly be that bad.

551
00:55:16,943 --> 00:55:19,444
And then once it repeats, you know it's a real problem.

552
00:55:20,124 --> 00:55:25,586
So at that point, we started wireframing at the very beginning of like, how can we redo this system?

553
00:55:25,826 --> 00:55:27,727
But we were also under this really intense

554
00:55:28,627 --> 00:55:35,389
period of time where we needed to make sure whatever we did, we could implement fairly quickly and with a low amount of bugs.

555
00:55:35,929 --> 00:55:40,691
So I actually ended up leading that wireframing to say, what if we did this instead?

556
00:55:41,231 --> 00:55:43,451
And people were like, yep, let's run with it, which was great.

557
00:55:43,911 --> 00:55:46,952
So we had a great team with a lot of great communication.

558
00:55:50,962 --> 00:55:52,383
Hi.

559
00:55:53,484 --> 00:56:09,478
I can see that you have a very tight memory budget, and I would like to know how you manage to support CJK in Funtouchi, because it tends to get pretty big, and we usually tend to narrow the use of character sets, but I would like to know how you tackle this.

560
00:56:09,498 --> 00:56:17,084
Okay, so you're asking how did we support Chinese languages specifically on the localization side?

561
00:56:17,325 --> 00:56:17,485
Yes.

562
00:56:17,938 --> 00:56:18,118
Yeah.

563
00:56:19,218 --> 00:56:39,443
So this is kind of the sad truth, is that we downscaled our God of War icon font down to 1024x1024 in order to upscale for a 2048x2048 to give the body font, which from a UX perspective is the most important thing, the players need to be able to read that text,

564
00:56:40,383 --> 00:56:46,768
That is more important than our icons, despite the fact we put so much effort into making them look good.

565
00:56:47,068 --> 00:56:47,748
That's how we did it.

566
00:56:48,789 --> 00:56:53,032
That is a painful thing, decision to make, and I made that decision.

567
00:56:53,512 --> 00:56:57,635
That's why we're looking at other solutions to avoid having to make that decision ever again.

568
00:56:58,156 --> 00:57:04,860
We ended up making that for Chinese, for Japanese, for Korean, and for Thai.

569
00:57:06,161 --> 00:57:08,909
all the other languages kind of miraculously worked.

570
00:57:09,109 --> 00:57:12,237
We were so close that it was fine and we could get away with it.

571
00:57:12,979 --> 00:57:13,581
Thank you very much.

572
00:57:15,250 --> 00:57:15,510
Go ahead.

573
00:57:16,630 --> 00:57:33,774
A lot of this was answered in a previous question, but I just wanted to bring up, I work as a UI UX designer, and I really appreciated your insight into having the different panels be scalable to fit other content, rather than the content having to be adjusted.

574
00:57:36,095 --> 00:57:42,276
I was wondering, for the max use cases of Ingottawar Ragnarok, like having max font size,

575
00:57:42,856 --> 00:57:48,000
and longer localizations like in Japanese and Korean that use a larger width.

576
00:57:49,261 --> 00:57:54,986
Are there specific fallbacks that your team had used to do that?

577
00:57:55,066 --> 00:57:58,149
Did the panels still adjust dynamically to fit it?

578
00:57:58,549 --> 00:58:03,993
Did you have to work to shrink any particular lines of text?

579
00:58:04,354 --> 00:58:05,655
Did you have to scroll it?

580
00:58:05,995 --> 00:58:06,636
A big problem.

581
00:58:07,496 --> 00:58:13,762
For me, as I work in a live service game and the localization comes in late, it comes in for a lot of different things.

582
00:58:13,822 --> 00:58:14,923
It switches all the time.

583
00:58:15,544 --> 00:58:24,072
And we have problems with it posterizing, scrolling back and forth, and bringing a lot of players' eye attention just to that text.

584
00:58:25,595 --> 00:58:36,104
So I'm going to try to summarize a little bit of how do we make sure that our largest font size works in all of our dynamic layout conditions.

585
00:58:37,265 --> 00:58:42,910
So we design from a perspective of the default layout.

586
00:58:43,210 --> 00:58:47,834
That's the one we want to have looking the nicest from a pure graphic design perspective.

587
00:58:48,234 --> 00:58:57,002
and we accept the fact that if you are pushing it all the way up to the highest text size, it may not look great in all of the instances.

588
00:58:57,102 --> 00:59:02,868
There are resources in the upper right-hand corner which track your hack silver and some of your XP.

589
00:59:03,828 --> 00:59:09,754
That kind of overrides or overlaps some UI in specific instances and you're like, yep, that's fine, don't worry about it.

590
00:59:10,394 --> 00:59:13,978
So you kind of have to figure out what you care about and what you don't care about.

591
00:59:15,253 --> 00:59:20,377
We have a scrolling solution on the cards, and in a lot of places we made sure that we had scrolling.

592
00:59:22,279 --> 00:59:33,888
In the future, and this is kind of a time-intensive thing, you get the ticker tape, like you would see on CNN or something like that, where the text will go off-screen and then slowly march on-screen.

593
00:59:34,109 --> 00:59:39,993
And this is really good when your text field can't go multi-line and has to stay inside of a very specific box.

594
00:59:40,934 --> 00:59:55,197
and you see that a lot specifically in the settings menu where you have all of these things listed down and you don't want to support multi-line because now your buttons are offset and because you're not actually scrolling your list smoothly that you run into problems there.

595
00:59:55,477 --> 01:00:03,599
So the ticker tape is ultimately like the sweet spot if you can do it right, but it takes a lot of time to make sure you can build that correctly.

596
01:00:04,459 --> 01:00:04,979
Thank you so much.

597
01:00:06,641 --> 01:00:07,942
Hi there, my name's Andrew.

598
01:00:09,302 --> 01:00:14,744
Sounds like your team is a very supportive, generous, collaborative UI team.

599
01:00:15,564 --> 01:00:20,566
As a UI designer, and maybe others here, we dread having to say no to something.

600
01:00:21,507 --> 01:00:24,888
Always want to be helpful and support what the user needs, what the teams need.

601
01:00:26,289 --> 01:00:32,111
Were there any instances where you did have to push back a little more at something, or had to say no to something, and how did that go?

602
01:00:35,461 --> 01:00:37,682
Were there any places where we needed to say no?

603
01:00:39,203 --> 01:00:41,464
I try not to say no a lot.

604
01:00:42,224 --> 01:00:44,906
There are definitely places where I want to say no a lot.

605
01:00:47,107 --> 01:00:52,389
The goal is it should be a conversation of like, here are the limitations that we're running up against.

606
01:00:52,750 --> 01:00:56,892
And if we feel like this feature or this piece is really important,

607
01:00:57,512 --> 01:01:01,554
we now need to have a production conversation about what needs to get bumped next.

608
01:01:02,194 --> 01:01:07,617
That is not always how it goes, but that is ideally the conversation about how we kind of handle it.

609
01:01:08,197 --> 01:01:16,121
And there's a couple of instances, a lot of it is content that's cut, I don't know if I can talk about, that we ran into for that.

610
01:01:16,921 --> 01:01:18,482
Sure, yeah, appreciate that, thank you.

611
01:01:20,359 --> 01:01:44,533
Hi Zach, thanks for the awesome talk, I would love to ask a question about what do you think about building visual effects into a UI element, what do you think like the positive side on that, negative side on that, or do you just like don't like to do that and just treat VFX as VFX, especially for like on-screen, like a non-pausing gameplay style overlay stuff?

612
01:01:45,365 --> 01:01:51,051
So how do I view VFX specifically in UI and kind of its role and its place?

613
01:01:52,112 --> 01:01:53,233
VFX are awesome.

614
01:01:53,634 --> 01:01:58,198
They are the super extra polish element that you not always have the time to do.

615
01:01:59,780 --> 01:02:08,228
The VFX team at Santa Monica gets pulled in a lot of different ways, so we end up being the ones who author most of the visual effects

616
01:02:08,789 --> 01:02:09,169
talk about

617
01:02:25,876 --> 01:02:38,865
compared to a lot of other teams where we have designers, and we have programmers, and we have artists, is that we do so much of our stuff in-house, inside of our own team, in order to not change the trajectory or the scope or scale of other teams.

618
01:02:39,025 --> 01:02:46,470
Anytime we go out and do that, it could be weeks before we get an answer, or the answer could just be, nope, they are totally booked because they're doing something else.

619
01:02:47,111 --> 01:02:53,575
So, and a lot of times, our artists, our generalists, and they actively go out and learn more about

620
01:02:53,955 --> 01:03:00,041
other techniques or other things in order to bring that back to the UI team in order to build really polished UI elements.

621
01:03:00,782 --> 01:03:01,062
Thank you.

622
01:03:04,145 --> 01:03:04,385
Cool.

623
01:03:05,426 --> 01:03:07,048
We are actually a little bit over time.

624
01:03:07,528 --> 01:03:08,750
Thank you so much for coming out.

625
01:03:09,791 --> 01:03:10,291
We'll see you around.

