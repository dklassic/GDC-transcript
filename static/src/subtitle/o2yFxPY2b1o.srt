1
00:00:06,062 --> 00:00:09,524
Enjoy your power. This is the big marketing tagline for Infamous Second Son.

2
00:00:09,524 --> 00:00:12,686
This really applied to the visual effects team as well during development of the game,

3
00:00:12,686 --> 00:00:17,949
and I hope that the joy we had in bringing the visuals to you guys is really apparent.

4
00:00:17,949 --> 00:00:22,292
Hello everyone, I'm Matt Vagno, senior visual effects artist at Sucker Punch.

5
00:00:22,292 --> 00:00:26,014
Today I'm going to talk about how we created the visual effects behind Infamous Second Son.

6
00:00:26,014 --> 00:00:29,056
There's not enough time to talk about all of the powers we created,

7
00:00:29,056 --> 00:00:31,417
so I'm going to focus on two powers each from Smoke and Neon.

8
00:00:31,417 --> 00:00:35,440
Then I'll talk about the creation of a new tool set and the pipeline for Infamous Second Son.

9
00:00:36,069 --> 00:00:39,392
along with the pros and cons from our new workflow and lessons learned attempting to

10
00:00:39,392 --> 00:00:43,937
make something new on the next generation of hardware. So let's get right to it and

11
00:00:43,937 --> 00:00:48,522
we'll learn about how we created some of Adelson's Smoke Powers. So for the Smoke Powers, what

12
00:00:48,522 --> 00:00:53,507
I'm going to cover is how we defined the visual language of the Smoke Powers, some of the

13
00:00:53,507 --> 00:00:56,810
game design behind the powers, and then I'll go over Smoke Dash and Smoke Event Travel,

14
00:00:56,810 --> 00:00:59,132
kind of show you how they went from concept to completion.

15
00:01:00,387 --> 00:01:02,928
This is an early concept with a smokeable power.

16
00:01:02,928 --> 00:01:04,709
So during pre-production, our engineers were creating

17
00:01:04,709 --> 00:01:07,050
the effects tool set, and the effects team itself,

18
00:01:07,050 --> 00:01:08,771
we were experimenting with third-party software

19
00:01:08,771 --> 00:01:10,212
to kind of get a sense for what we wanted

20
00:01:10,212 --> 00:01:11,993
out of our internal tool set.

21
00:01:11,993 --> 00:01:14,774
The concept team was hard at work during this period

22
00:01:14,774 --> 00:01:16,375
creating smoke power concepts

23
00:01:16,375 --> 00:01:17,836
for all the various proposed power designs.

24
00:01:17,836 --> 00:01:19,977
During this period, they had no idea

25
00:01:19,977 --> 00:01:21,318
of what our limitations would be,

26
00:01:21,318 --> 00:01:23,219
and that was a really good thing for us.

27
00:01:23,219 --> 00:01:25,280
You know, it's always important to have people

28
00:01:25,280 --> 00:01:27,561
whose only thought is the final product

29
00:01:27,561 --> 00:01:29,322
and not the constraints of the technology.

30
00:01:30,509 --> 00:01:35,614
These are some examples of what some ambient smoke emitters would look like for idle animations and things like that.

31
00:01:35,614 --> 00:01:39,277
This was created during the production of our ultra-power, the orbital drop,

32
00:01:39,277 --> 00:01:44,722
and influenced the visuals behind the final blast wave created as Delsim lands.

33
00:01:44,722 --> 00:01:47,765
By this point in the concept phase, we really had narrowed the look,

34
00:01:47,765 --> 00:01:50,548
so you can see the three common elements of our smoke power set.

35
00:01:50,548 --> 00:01:54,412
Sort of the wispy smoke, the billowy smoke, and the ash and embers.

36
00:01:57,273 --> 00:02:00,354
When we were given the task of creating powers based on smoke,

37
00:02:00,354 --> 00:02:01,714
we ran into a few major hurdles.

38
00:02:01,714 --> 00:02:04,055
Our initial art direction was basically

39
00:02:04,055 --> 00:02:05,956
make it look like real smoke, or something you'd

40
00:02:05,956 --> 00:02:07,056
see in a pre-rendered cinematic.

41
00:02:07,056 --> 00:02:11,078
Smoke by itself doesn't feel terribly dangerous.

42
00:02:11,078 --> 00:02:14,019
You don't have a natural understanding of its weight

43
00:02:14,019 --> 00:02:16,580
and impact and force like you do a real object,

44
00:02:16,580 --> 00:02:18,840
say an arrow or a spear.

45
00:02:18,840 --> 00:02:21,181
Smoke can also be hard to see in low light conditions, which

46
00:02:21,181 --> 00:02:23,242
really can impact the player's understanding of what's

47
00:02:23,242 --> 00:02:23,642
going on.

48
00:02:24,505 --> 00:02:28,328
So analyzing real smoke reference resulted in a couple of observations.

49
00:02:28,328 --> 00:02:33,974
Firstly, that turbulence and wind were going to be very important to look we wanted out of our smoke visual effects.

50
00:02:33,974 --> 00:02:37,697
Secondly, lighting the particle system so that it sat correctly in the scene

51
00:02:37,697 --> 00:02:41,421
and didn't feel composited in was going to be both critical and challenging.

52
00:02:41,421 --> 00:02:47,066
We felt if we hit these pillars, the smoke would be believable within the Infamous universe.

53
00:02:47,697 --> 00:02:50,343
which opened up the ability for us to kind of stylize the effects.

54
00:02:50,343 --> 00:02:54,832
It was just more important for us that our effects feel believable within the universe

55
00:02:54,832 --> 00:02:55,975
than completely realistic.

56
00:02:59,187 --> 00:03:00,929
Early on in the project, like I said earlier,

57
00:03:00,929 --> 00:03:04,052
we spent time experimenting with third-party software,

58
00:03:04,052 --> 00:03:05,893
like Max and Houdini, to kind of help get a sense

59
00:03:05,893 --> 00:03:07,194
for what we wanted to do with our internal tools.

60
00:03:07,194 --> 00:03:09,296
This is a little quick Houdini render

61
00:03:09,296 --> 00:03:10,557
we did pretty early on.

62
00:03:10,557 --> 00:03:11,919
During this experimentation phase,

63
00:03:11,919 --> 00:03:13,420
we used a lot of turbulence and wind in our sims,

64
00:03:13,420 --> 00:03:15,822
and that kind of really influenced the direction we took

65
00:03:15,822 --> 00:03:19,025
with our real-time crawl noise functions in engine.

66
00:03:19,025 --> 00:03:20,887
This is something I showed to

67
00:03:20,887 --> 00:03:22,228
Sucker Punch engineer Bill Rockenback,

68
00:03:22,228 --> 00:03:23,789
and he was kind of able to take this

69
00:03:23,789 --> 00:03:24,690
and use this as a guide

70
00:03:24,690 --> 00:03:26,212
for creating that real-time crawl noise.

71
00:03:28,373 --> 00:03:30,654
After analyzing the reference, the concept art,

72
00:03:30,654 --> 00:03:32,595
and creating some initial VFX prototypes,

73
00:03:32,595 --> 00:03:34,296
we realized that to make the smoke feel dangerous,

74
00:03:34,296 --> 00:03:36,897
we would need to make smoke elements the contrail,

75
00:03:36,897 --> 00:03:39,858
you know, the leftover residue from a force.

76
00:03:39,858 --> 00:03:41,058
We knew the power had to be visible

77
00:03:41,058 --> 00:03:42,579
in a bunch of different times of day as well.

78
00:03:42,579 --> 00:03:45,200
So our decision was to make that force

79
00:03:45,200 --> 00:03:48,961
a storm of really hot, bright ashes.

80
00:03:49,559 --> 00:03:51,540
It was driven by a simple analogy I had one day

81
00:03:51,540 --> 00:03:53,500
early on in the smoke dev process where,

82
00:03:53,500 --> 00:03:56,161
you know, if somebody blows cigarette smoke in your face,

83
00:03:56,161 --> 00:03:57,281
it's just annoying, right?

84
00:03:57,281 --> 00:03:59,382
But if somebody puts out a cigarette on your face,

85
00:03:59,382 --> 00:04:00,382
that's really gonna hurt.

86
00:04:00,382 --> 00:04:03,243
We knew we'd run into the problem of some players

87
00:04:03,243 --> 00:04:05,204
misidentifying this power set as fire,

88
00:04:05,204 --> 00:04:06,744
but it was really more important for us

89
00:04:06,744 --> 00:04:09,805
that the player could track and understand their abilities

90
00:04:09,805 --> 00:04:10,685
from a design perspective.

91
00:04:10,685 --> 00:04:13,086
One of the game design elements

92
00:04:13,086 --> 00:04:15,647
that really makes an infamous game feel,

93
00:04:15,647 --> 00:04:18,288
well, like an infamous game, is the joy of traversal.

94
00:04:18,869 --> 00:04:22,772
Smokedash was the first power we prototyped that really felt like it met that bar in terms of joy.

95
00:04:22,772 --> 00:04:31,741
These are four different looks the concept team came up with and I ended up taking various ideas from all of them for the final power effects.

96
00:04:31,741 --> 00:04:42,551
With Smokedash the core design concept was that the hero would dematerialize and pass through objects like chain link fences and path around objects like cars or short walls.

97
00:04:43,318 --> 00:04:45,079
In order to help dematerialize the hero,

98
00:04:45,079 --> 00:04:46,680
we had to create a transition effect

99
00:04:46,680 --> 00:04:47,960
that would cover up the removal

100
00:04:47,960 --> 00:04:49,101
and addition of the hero's mesh.

101
00:04:49,101 --> 00:04:51,181
To help with this, we spawned particles

102
00:04:51,181 --> 00:04:53,642
off a sort of low-res LOD version of the hero's mesh

103
00:04:53,642 --> 00:04:54,943
that we called Particle Mesh.

104
00:04:54,943 --> 00:04:57,644
We wanted this action to be as smooth

105
00:04:57,644 --> 00:04:59,244
and as fluid as smoke really is,

106
00:04:59,244 --> 00:05:00,985
so we made it a pillar of the effect

107
00:05:00,985 --> 00:05:02,725
that the same particles that are spawned

108
00:05:02,725 --> 00:05:03,846
when this move starts

109
00:05:03,846 --> 00:05:06,987
are the same ones that form the hero at the end.

110
00:05:06,987 --> 00:05:09,068
So one continuous motion from one particle system.

111
00:05:10,150 --> 00:05:11,370
Once we had that element working,

112
00:05:11,370 --> 00:05:13,070
we added ribbons, smoke, and lights

113
00:05:13,070 --> 00:05:16,591
to help carry the directionality of the hero's motion.

114
00:05:16,591 --> 00:05:19,932
So this is the concept we're working with

115
00:05:19,932 --> 00:05:21,772
and the end game.

116
00:05:21,772 --> 00:05:28,994
So breaking down the smoke dash effect,

117
00:05:28,994 --> 00:05:30,634
there are different components.

118
00:05:30,634 --> 00:05:34,255
There are ribbons, some soft smoke,

119
00:05:34,255 --> 00:05:36,135
astronombers, and dynamic lights.

120
00:05:53,336 --> 00:05:55,696
So on the left is the base hero geometry

121
00:05:55,696 --> 00:05:56,537
without any emitters.

122
00:05:56,537 --> 00:05:58,657
On the right, I've hidden the hero's geometry

123
00:05:58,657 --> 00:06:00,557
and turned on particle emitters that are parented

124
00:06:00,557 --> 00:06:02,638
to the previously mentioned particle mesh.

125
00:06:02,638 --> 00:06:04,398
They're inheriting the color of the mesh

126
00:06:04,398 --> 00:06:06,159
and their normals are facing the same direction

127
00:06:06,159 --> 00:06:07,559
as the triangle they're parented to.

128
00:06:07,559 --> 00:06:10,099
Using this technique, we're able to hide the transition

129
00:06:10,099 --> 00:06:11,660
of the hero's geometry being turned off and on.

130
00:06:11,660 --> 00:06:15,001
This is a closer look at the technique.

131
00:06:15,001 --> 00:06:16,541
I'm showing this at 1 5th speed

132
00:06:16,541 --> 00:06:19,722
to kind of help make the effect more obvious.

133
00:06:20,552 --> 00:06:25,121
You can see here at the end, you can actually see the moment where his mesh pops back in and swaps.

134
00:06:25,121 --> 00:06:26,303
Right there.

135
00:06:26,303 --> 00:06:29,008
If you see it in real time though, it's really not noticeable at all.

136
00:06:43,749 --> 00:06:47,033
Here I've added back in the ash particles that leave the hero at the disintegrate moment.

137
00:06:47,033 --> 00:06:51,918
They kind of move around with curl noise before they're finally lurping back to the hero's position at the reform moment.

138
00:07:02,372 --> 00:07:04,293
I've disabled the curl noise on this demo, which

139
00:07:04,293 --> 00:07:06,594
shows how the ash particles lurp between being

140
00:07:06,594 --> 00:07:09,576
on the particle mesh, being unlocked, or free in the world,

141
00:07:09,576 --> 00:07:11,137
and then back to the mesh.

142
00:07:11,137 --> 00:07:12,378
If you notice, the particles spawn near the head.

143
00:07:12,378 --> 00:07:13,139
They lurp back to the mesh position

144
00:07:13,139 --> 00:07:14,379
faster than the ones near the feet,

145
00:07:14,379 --> 00:07:16,641
and helps give it kind of a lurching, organic feel.

146
00:07:16,641 --> 00:07:18,162
These curves here represent positional lurps

147
00:07:18,162 --> 00:07:19,563
between being world update and the hero's particle mesh.

148
00:07:30,959 --> 00:07:32,980
When the graph's vertical value is zero,

149
00:07:32,980 --> 00:07:33,820
there at the bottom,

150
00:07:33,820 --> 00:07:35,461
the particles are unlocked from its mesh,

151
00:07:35,461 --> 00:07:36,181
and when the value's one,

152
00:07:36,181 --> 00:07:39,182
the particles are sort of locked to its mesh.

153
00:07:39,182 --> 00:07:40,542
These curves are evaluated over

154
00:07:40,542 --> 00:07:42,643
the particle's normalized lifespan,

155
00:07:42,643 --> 00:07:45,544
so you can kind of see how the graph starts at one,

156
00:07:45,544 --> 00:07:46,924
and it goes down to zero,

157
00:07:46,924 --> 00:07:48,405
and it goes back up to one.

158
00:07:49,319 --> 00:07:50,639
The graph on the left is marked A,

159
00:07:50,639 --> 00:07:52,480
and that actually represents particles

160
00:07:52,480 --> 00:07:54,360
that spawn from the top of the hero's head,

161
00:07:54,360 --> 00:07:56,581
while the graph on the right, marked B,

162
00:07:56,581 --> 00:07:58,421
those are the ones that spawn at the bottom of his feet.

163
00:07:58,421 --> 00:08:00,622
I used an additional alert between curves A and B,

164
00:08:00,622 --> 00:08:03,142
kind of depending on where it spawns on the hero's body.

165
00:08:03,142 --> 00:08:07,963
So during the dash move, Smoke Whisp flapped the hero

166
00:08:07,963 --> 00:08:12,004
and then sort of towards his final destination

167
00:08:12,004 --> 00:08:13,824
to help carry the relationship of the motion,

168
00:08:13,824 --> 00:08:14,805
or directionality of the motion.

169
00:08:16,640 --> 00:08:19,121
This here I'm showing actually parent-child emitters

170
00:08:19,121 --> 00:08:22,403
are using for generating the ribbons.

171
00:08:22,403 --> 00:08:23,704
And you can see that the entire ribbon

172
00:08:23,704 --> 00:08:25,846
has the same facing axis from front to back,

173
00:08:25,846 --> 00:08:27,687
if you look at the yellow ribbons there.

174
00:08:27,687 --> 00:08:29,268
This prevents the twisting seen

175
00:08:29,268 --> 00:08:31,149
in a lot of ribbon implementations.

176
00:08:31,149 --> 00:08:33,371
The blue line is actually the direction of travel

177
00:08:33,371 --> 00:08:34,732
of the hero, and the white line represents

178
00:08:34,732 --> 00:08:36,953
the ribbon facing vector in three-dimensional space.

179
00:08:36,953 --> 00:08:39,375
The ribbon facing vector is created by taking

180
00:08:39,375 --> 00:08:41,996
the vector between the parent and the direction of travel

181
00:08:41,996 --> 00:08:44,258
and crossing it against the camera's view direction.

182
00:08:44,956 --> 00:08:47,297
This is just sort of one simple example

183
00:08:47,297 --> 00:08:49,839
of ribbon facing that we could have used.

184
00:08:49,839 --> 00:08:52,260
We're not really constrained to having a single vector

185
00:08:52,260 --> 00:08:53,281
along the entire ribbon.

186
00:08:53,281 --> 00:08:55,322
We could actually have it twist or curl

187
00:08:55,322 --> 00:08:57,903
and set the facing to really any vector we want.

188
00:08:57,903 --> 00:09:00,065
We actually do that in a few cases.

189
00:09:00,065 --> 00:09:02,086
The hero's smoke float or the smoke missile

190
00:09:02,086 --> 00:09:05,047
has kind of a spiral to the ribbons.

191
00:09:05,047 --> 00:09:14,633
So this is the final smoke dash effects.

192
00:09:15,888 --> 00:09:17,609
You're able to dash while in midair,

193
00:09:17,609 --> 00:09:18,710
and you can also see how the player

194
00:09:18,710 --> 00:09:20,471
dashes through fences as well.

195
00:09:20,471 --> 00:09:23,853
It's just really fun, really smooth.

196
00:09:23,853 --> 00:09:26,175
That's another sort of pillar of Smoke.

197
00:09:26,175 --> 00:09:28,417
Everything has to be smooth.

198
00:09:28,417 --> 00:09:33,280
So an upgrade to the Smoke Dash

199
00:09:33,280 --> 00:09:35,342
is the ability to dash into a vent

200
00:09:35,342 --> 00:09:36,863
and travel to the top of a building,

201
00:09:36,863 --> 00:09:38,104
kind of bursting up out of a vent.

202
00:09:38,104 --> 00:09:40,485
This is a concept for Smoke Vent Travel.

203
00:09:42,134 --> 00:09:44,115
So the goals for this effect were to, you know,

204
00:09:44,115 --> 00:09:47,018
reuse the smoke dash dematerialize

205
00:09:47,018 --> 00:09:48,179
and send the hero skyward

206
00:09:48,179 --> 00:09:49,560
with a pillar of spinning smoke wisps.

207
00:09:49,560 --> 00:09:53,744
The visual concept relied heavily on a smoke-driven feel,

208
00:09:53,744 --> 00:09:55,185
so the bulk of the work was gonna be

209
00:09:55,185 --> 00:09:55,906
getting that part right.

210
00:09:55,906 --> 00:09:58,889
It was important for us that we capture the explosiveness

211
00:09:58,889 --> 00:10:01,371
at the beginning and the deceleration at the end

212
00:10:01,371 --> 00:10:03,073
to match the animation team's hard work.

213
00:10:03,073 --> 00:10:04,654
We also wanted the smoke to feel carried away

214
00:10:04,654 --> 00:10:06,115
in the wind as the hero was falling.

215
00:10:08,983 --> 00:10:13,645
So we ended up getting, I think, really close to the concept with this particular power.

216
00:10:13,645 --> 00:10:24,091
So this is the final version of the vent travel effects.

217
00:10:24,091 --> 00:10:26,532
It's comprised mostly out of these three elements.

218
00:10:26,532 --> 00:10:32,035
It has pretty much the smoke ribbons, it has some soft, kind of billowy smoke, and a bunch

219
00:10:32,035 --> 00:10:32,836
of ash and embers.

220
00:10:48,969 --> 00:10:50,551
So the first step in breaking down the shapes

221
00:10:50,551 --> 00:10:52,934
in the concept is to create the path spiraling the hero.

222
00:10:52,934 --> 00:10:55,057
Because we're able to spawn particles

223
00:10:55,057 --> 00:10:56,599
from a position of other particles

224
00:10:56,599 --> 00:10:58,561
by specifying which particle emitter is the parent

225
00:10:58,561 --> 00:10:59,923
and which particle emitter is the child,

226
00:10:59,923 --> 00:11:01,465
it turned out to be relatively easy

227
00:11:01,465 --> 00:11:03,247
to generate this shape with our system.

228
00:11:03,247 --> 00:11:05,770
I used a similar technique to the smoke dash ribbons

229
00:11:05,770 --> 00:11:07,953
combined with parent-child emitters for this.

230
00:11:10,718 --> 00:11:12,678
Here you can see the parent particles are actually moving

231
00:11:12,678 --> 00:11:15,419
upward in red and they have the child ribbons attached.

232
00:11:15,419 --> 00:11:18,860
I've set up a radius that's lerped between two different

233
00:11:18,860 --> 00:11:21,040
values and it's controlled by that key frame you can see

234
00:11:21,040 --> 00:11:22,540
kind of in the lower left there.

235
00:11:22,540 --> 00:11:25,421
This basically creates the right profile that we want

236
00:11:25,421 --> 00:11:26,061
out of the column.

237
00:11:26,061 --> 00:11:29,242
Once I have the parents rotating over their lifetime,

238
00:11:29,242 --> 00:11:31,582
you can see that the basic shape of the concept

239
00:11:31,582 --> 00:11:33,063
is starting to take form now.

240
00:11:48,805 --> 00:11:50,446
So to make the ribbons feel more organic,

241
00:11:50,446 --> 00:11:52,848
I added some noise in the width of the ribbons.

242
00:11:52,848 --> 00:11:55,770
You can see how the ribbons are actually getting

243
00:11:55,770 --> 00:11:57,251
thick and thin in places.

244
00:11:57,251 --> 00:11:57,932
Sort of a 1D noise.

245
00:11:57,932 --> 00:11:59,633
I'll talk later on the various ways

246
00:11:59,633 --> 00:12:01,894
that which curl noise functions can be useful

247
00:12:01,894 --> 00:12:04,096
for things more than just particle motion.

248
00:12:04,096 --> 00:12:05,777
Here in this part, I've actually disabled

249
00:12:05,777 --> 00:12:07,599
the rotation of the ribbons to kind of help

250
00:12:07,599 --> 00:12:10,661
show the resulting noise patterns a little bit better.

251
00:12:10,661 --> 00:12:11,742
So the noise and the width.

252
00:12:11,742 --> 00:12:14,264
Again, just trying to layer different ways

253
00:12:14,264 --> 00:12:16,565
to make smoke feel more organic.

254
00:12:18,830 --> 00:12:20,672
The next thing we're gonna do is add some curl noise

255
00:12:20,672 --> 00:12:22,694
and wind forces to the emitter.

256
00:12:22,694 --> 00:12:24,376
And I'm using a couple different octaves

257
00:12:24,376 --> 00:12:25,718
of the noise on the ribbons to make,

258
00:12:25,718 --> 00:12:28,000
give them both large and small waveform patterns.

259
00:12:28,000 --> 00:12:30,583
It gives it a really, another nice organic thing to do.

260
00:12:30,583 --> 00:12:32,946
These noise patterns, they iterate over time,

261
00:12:32,946 --> 00:12:34,788
so each time the effect is fire,

262
00:12:34,788 --> 00:12:35,709
the patterns are different.

263
00:12:47,016 --> 00:12:48,957
So this is a good time to talk about a simple way

264
00:12:48,957 --> 00:12:51,417
we get a lot of motion out of our billowy smoke emitters.

265
00:12:51,417 --> 00:12:53,618
You can see how there's actually a downward motion

266
00:12:53,618 --> 00:12:56,319
as the smoke billowing, billboards move upward.

267
00:12:56,319 --> 00:12:58,560
And this kind of makes it feel like the smoke is rolling.

268
00:12:58,560 --> 00:13:00,721
One of our engineers, Matt Dersoff,

269
00:13:00,721 --> 00:13:03,101
he came up with a way to magnify the UVs on particles

270
00:13:03,101 --> 00:13:04,862
such that the UVs would scroll faster in the center

271
00:13:04,862 --> 00:13:05,742
than they do on the edges.

272
00:13:05,742 --> 00:13:07,943
This results in kind of a spherical shape

273
00:13:07,943 --> 00:13:09,543
and it helps give the billboards more volume.

274
00:13:10,771 --> 00:13:13,073
This is actually just a single billboard with scrolling UVs.

275
00:13:13,073 --> 00:13:15,655
You can see that as I adjust the magnification values

276
00:13:15,655 --> 00:13:17,697
that the spherical form becomes a bit more obvious.

277
00:13:17,697 --> 00:13:21,200
This is just one of the simple ways we got a lot of motion out of our

278
00:13:21,200 --> 00:13:25,623
smoke textures without using flipbooks, flow maps, or UV displacement.

279
00:13:25,623 --> 00:13:28,926
I think we had maybe two animated flipbooks in the entire game.

280
00:13:28,926 --> 00:13:31,268
Most of our techniques are pretty simple like this.

281
00:13:49,617 --> 00:13:51,639
So here are the final event travel effects.

282
00:13:51,639 --> 00:13:53,760
It's pretty useful for getting rooftops quickly.

283
00:13:53,760 --> 00:13:56,922
You're also able to smoke dash into the tops of vents

284
00:13:56,922 --> 00:13:58,263
and get kind of a kicker boost,

285
00:13:58,263 --> 00:13:59,384
you'll see here in a second.

286
00:13:59,384 --> 00:14:02,266
It's super fun to just chain these around the city

287
00:14:02,266 --> 00:14:04,208
and see how many you can get in a row.

288
00:14:15,735 --> 00:14:18,397
So now that you've seen some of the smoke powers,

289
00:14:18,397 --> 00:14:20,358
let's take a look at how we created

290
00:14:20,358 --> 00:14:20,998
some of the neon powers.

291
00:14:20,998 --> 00:14:24,280
So for the neon powers, what I'm gonna be covering is

292
00:14:24,280 --> 00:14:27,002
how we define the visual language of the neon powers,

293
00:14:27,002 --> 00:14:28,562
draining neon from signs,

294
00:14:28,562 --> 00:14:29,943
and how we created the neon dash effects.

295
00:14:29,943 --> 00:14:34,105
Here's some visual language studies

296
00:14:34,105 --> 00:14:37,107
that were done by the concept team for the neon melee.

297
00:14:37,107 --> 00:14:39,608
These concepts reference the idea of light writing,

298
00:14:39,608 --> 00:14:41,109
which ended up being one of the visual pillars

299
00:14:41,109 --> 00:14:41,890
of the power set.

300
00:14:42,567 --> 00:14:45,008
Light writing being the photography technique

301
00:14:45,008 --> 00:14:46,549
where people use kind of flashlights

302
00:14:46,549 --> 00:14:48,770
and long exposures to generate really long trails.

303
00:14:48,770 --> 00:14:51,692
This is some neon chocolate explosion concepts.

304
00:14:51,692 --> 00:14:53,993
You know, at this point, you can see that we're still

305
00:14:53,993 --> 00:14:57,955
trying to find that kind of visual signature for the power.

306
00:14:57,955 --> 00:15:00,656
We're testing with both angular and flowing lines,

307
00:15:00,656 --> 00:15:03,758
or some line symmetry and just different color ideas.

308
00:15:03,758 --> 00:15:06,500
Just still trying to figure out what we're gonna do here.

309
00:15:06,500 --> 00:15:09,781
So as you've seen, the art direction relied heavily

310
00:15:09,781 --> 00:15:12,223
on the concept of light writing complex lingering shapes.

311
00:15:12,642 --> 00:15:14,324
Everything had to cast light,

312
00:15:14,324 --> 00:15:17,626
and everything needed to have some sort of accent volume

313
00:15:17,626 --> 00:15:20,028
in addition to light writing to give it the proper depth.

314
00:15:20,028 --> 00:15:22,591
This accent volume ended up being kind of a faint neon gas

315
00:15:22,591 --> 00:15:24,292
that's present in the background

316
00:15:24,292 --> 00:15:25,593
in pretty much all the neon powers.

317
00:15:25,593 --> 00:15:28,335
We just really wanted to think about neon as a plasma.

318
00:15:28,335 --> 00:15:31,138
At the same time, we knew we wanted to

319
00:15:31,138 --> 00:15:32,979
fling, get, fling, fling, excuse me,

320
00:15:32,979 --> 00:15:34,661
fling waveform patterns, which our curl noise

321
00:15:34,661 --> 00:15:36,302
came in really handy for.

322
00:15:37,309 --> 00:15:38,910
To get a different result than smoke,

323
00:15:38,910 --> 00:15:41,611
we ended up using much larger waveforms

324
00:15:41,611 --> 00:15:43,351
and less octaves of noise

325
00:15:43,351 --> 00:15:44,492
to kind of get a more flowing form.

326
00:15:44,492 --> 00:15:46,512
We also clamped the noise patterns,

327
00:15:46,512 --> 00:15:50,714
in many cases, to create a contained look to the neon.

328
00:15:50,714 --> 00:15:53,055
So if we spawn inside a cylinder,

329
00:15:53,055 --> 00:15:55,076
all the noise is contained within the cylinder

330
00:15:55,076 --> 00:15:56,516
or within a sphere.

331
00:15:56,516 --> 00:15:59,137
It was really important for us

332
00:15:59,137 --> 00:16:00,838
that this power felt under control by Delsun

333
00:16:00,838 --> 00:16:02,158
and not wafting away like smoke.

334
00:16:02,158 --> 00:16:04,459
That was one of the ways we were going to differentiate it from smoke.

335
00:16:06,696 --> 00:16:07,957
During Neon Power's development,

336
00:16:07,957 --> 00:16:10,119
we had a lot more back and forth discussions

337
00:16:10,119 --> 00:16:12,781
with the concept team than we did during Smoke Look Dev.

338
00:16:12,781 --> 00:16:15,944
A lot of the Smoke Power concepts came in pre-production

339
00:16:15,944 --> 00:16:18,666
before we had any tools to work with.

340
00:16:18,666 --> 00:16:20,968
So once we had the visual language defined for Neon,

341
00:16:20,968 --> 00:16:23,911
however, we altered our workflow with the concept artists

342
00:16:23,911 --> 00:16:26,373
to have them provide more generalized form studies

343
00:16:26,373 --> 00:16:28,215
rather than detailed illustrations.

344
00:16:28,215 --> 00:16:31,037
So these are some form studies for the Neon Float.

345
00:16:34,451 --> 00:16:36,132
If you look closely between those concepts

346
00:16:36,132 --> 00:16:38,353
in the final game, there's inspiration

347
00:16:38,353 --> 00:16:42,355
from a few of those different concepts present.

348
00:16:42,355 --> 00:16:47,578
So here's some form studies for the neon stasis grenade.

349
00:16:48,586 --> 00:16:51,007
You know, as an effects team, our big take away

350
00:16:51,007 --> 00:16:52,888
during this part of development was that

351
00:16:52,888 --> 00:16:54,809
concept artists, they're masters of form.

352
00:16:54,809 --> 00:16:56,410
This is what we should be using them for.

353
00:16:56,410 --> 00:16:57,451
What you want to do is work with them

354
00:16:57,451 --> 00:16:59,532
so they understand your timing needs.

355
00:16:59,532 --> 00:17:01,333
You have them sketch the iteration of form over time.

356
00:17:01,333 --> 00:17:03,774
So even a simple example in the lower left here,

357
00:17:03,774 --> 00:17:04,935
like you can see from A to B,

358
00:17:04,935 --> 00:17:06,475
is more useful than a static form.

359
00:17:06,475 --> 00:17:08,897
You help them to understand that the starts and ends

360
00:17:08,897 --> 00:17:10,738
are just as important as the middle.

361
00:17:10,738 --> 00:17:12,018
A lot of concept artists, in fact most,

362
00:17:12,018 --> 00:17:14,400
will probably give you just the sort of middle section

363
00:17:14,400 --> 00:17:15,800
of an effect if you ask for a concept.

364
00:17:19,572 --> 00:17:21,873
So let's talk a little bit about Neon Drain.

365
00:17:21,873 --> 00:17:24,494
It was one of the first Neon powers I started working on,

366
00:17:24,494 --> 00:17:26,455
and we knew that getting it right

367
00:17:26,455 --> 00:17:27,796
was gonna be a challenge,

368
00:17:27,796 --> 00:17:29,216
but it would set us up for creating

369
00:17:29,216 --> 00:17:31,157
the rest of the Neon power set.

370
00:17:31,157 --> 00:17:32,998
The design goal was to drain Neon

371
00:17:32,998 --> 00:17:34,159
from an in-game sign model.

372
00:17:34,159 --> 00:17:35,839
At first, it wasn't really clear how we were gonna do this.

373
00:17:35,839 --> 00:17:38,080
I mean, should we model splines over each sign

374
00:17:38,080 --> 00:17:40,101
and then render after those splines?

375
00:17:40,101 --> 00:17:42,082
Should we drain from one end of the tube,

376
00:17:42,082 --> 00:17:43,263
like a string being pulled out

377
00:17:43,263 --> 00:17:44,403
when the hero drains from it?

378
00:17:45,101 --> 00:17:48,222
Once we came up with our particle mesh solution for a smoke dash, though,

379
00:17:48,222 --> 00:17:52,743
it became pretty clear that we should try to adapt that tech for this particular power.

380
00:17:52,743 --> 00:17:57,645
The basics of the effect is that at the moment the drain button is pressed,

381
00:17:57,645 --> 00:18:02,606
we spawn particles off of a particle mesh that's attached to the in-game sign model.

382
00:18:02,606 --> 00:18:07,268
We kill the emissive values on the sign model to kind of turn off all the neon tubes,

383
00:18:07,268 --> 00:18:09,048
as well as any lights and reflections from the sign.

384
00:18:10,571 --> 00:18:14,057
Finally, we swirl the effects downward toward the hero's hand

385
00:18:14,057 --> 00:18:16,160
where he sort of grabs it to absorb the power.

386
00:18:16,160 --> 00:18:19,927
This is an early concept of Neon being ripped off a sign,

387
00:18:19,927 --> 00:18:21,690
and then the final in-game effect.

388
00:18:36,518 --> 00:18:40,220
So here's another example of how a rough concept can go a long way to the final product. This

389
00:18:40,220 --> 00:18:43,582
set of roughs was done by Second Son art director Horio Dociu and the result is pretty close

390
00:18:43,582 --> 00:18:46,443
to this rough set of ideas. I like to joke with him that I really captured that Saturday

391
00:18:46,443 --> 00:18:47,864
night fever thing he's got going on, that last frame over there.

392
00:18:47,864 --> 00:18:51,325
So this is the full version of Neon Drain. I'm actually adding back different elements

393
00:18:51,325 --> 00:18:52,566
here, kind of breaking it down. There's the wispy energy and

394
00:19:03,157 --> 00:19:07,192
some neon bits, some plasma gas, and some dynamic lights.

395
00:19:23,552 --> 00:19:26,175
So this is an example of a Neon Science particle mesh.

396
00:19:26,175 --> 00:19:27,897
Particles are spawned on a somewhat uniform

397
00:19:27,897 --> 00:19:30,640
but random position on the triangles of this mesh.

398
00:19:30,640 --> 00:19:33,083
After being spawned but not drawn,

399
00:19:33,083 --> 00:19:35,666
they sample the color value there underneath.

400
00:19:35,666 --> 00:19:37,888
And if the value is below a certain threshold,

401
00:19:37,888 --> 00:19:39,931
the particle tries to find a new spot.

402
00:19:39,931 --> 00:19:41,853
So we repeat this up to about, I think, 10 times

403
00:19:41,853 --> 00:19:43,915
before we give up and the particle's killed.

404
00:19:44,549 --> 00:19:46,790
This gives us the effect of particles being only spawned

405
00:19:46,790 --> 00:19:50,592
from where the emissive values are in the texture.

406
00:19:50,592 --> 00:19:52,973
Doesn't mean we need to spawn quite a few particles

407
00:19:52,973 --> 00:19:53,893
to make this work.

408
00:19:53,893 --> 00:19:57,275
You can see a lot of times we'd be sampling

409
00:19:57,275 --> 00:20:00,476
some of the black areas and not getting a valid position.

410
00:20:00,476 --> 00:20:01,617
But thankfully on the PS4 we can spawn

411
00:20:01,617 --> 00:20:03,198
tens of thousands of particles, so this wasn't too bad.

412
00:20:03,198 --> 00:20:06,299
So here you can see the color inheritance

413
00:20:06,299 --> 00:20:07,920
the particles have for the emissive shader

414
00:20:07,920 --> 00:20:08,500
a bit more clearly.

415
00:20:08,500 --> 00:20:10,101
You can see how the red particles

416
00:20:10,101 --> 00:20:11,581
come from the red parts of the sign

417
00:20:11,581 --> 00:20:13,342
and the blue from the blue part and so forth.

418
00:20:17,012 --> 00:20:28,220
I've trimmed the particle system down to some simple shaded billboards to help show the motion as well.

419
00:20:28,220 --> 00:20:40,608
In this example here, I've offset the billboards from the normals of the particle mesh to help make it a bit easier to see.

420
00:20:40,608 --> 00:20:42,229
I'll just show it in the video.

421
00:20:43,156 --> 00:20:45,617
all the green dots are actually a position of lights

422
00:20:45,617 --> 00:20:47,198
that are spawned from the same particle mesh,

423
00:20:47,198 --> 00:20:48,478
and they're casting color

424
00:20:48,478 --> 00:20:50,159
from that same underlying pixel color.

425
00:20:50,159 --> 00:20:53,681
So we found, or we actually used these lights

426
00:20:53,681 --> 00:20:55,061
at kind of a lower particle count

427
00:20:55,061 --> 00:20:57,642
than the rest of our particles,

428
00:20:57,642 --> 00:21:00,264
and it's for both performance and visual reasons, right?

429
00:21:00,264 --> 00:21:02,745
We found that the results from sort of larger lights

430
00:21:02,745 --> 00:21:07,127
with softer fall-off gave us a better aggregated light look

431
00:21:07,127 --> 00:21:09,688
than tons and tons of tiny point lights.

432
00:21:14,373 --> 00:21:15,654
This is how the Neon Drain turned out.

433
00:21:15,654 --> 00:21:17,094
This was used in a cinematic in one of our trailers.

434
00:21:17,094 --> 00:21:17,955
I just love the swagger Delson has

435
00:21:17,955 --> 00:21:18,455
as he comes up to drain.

436
00:21:18,455 --> 00:21:19,155
It totally nails his character.

437
00:21:19,155 --> 00:21:20,575
Neon Dash was another key power for us.

438
00:21:20,575 --> 00:21:21,696
Not only because traversal powers are important

439
00:21:21,696 --> 00:21:22,736
in the Infamous universe,

440
00:21:22,736 --> 00:21:23,756
but because it's our test of how we could

441
00:21:23,756 --> 00:21:24,677
turn the hero into a light writing element.

442
00:21:43,366 --> 00:21:45,567
This effect was gonna be used for both the hero

443
00:21:45,567 --> 00:21:47,348
and one of our main characters, Fetch.

444
00:21:47,348 --> 00:21:49,689
The game design required very lengthy trails

445
00:21:49,689 --> 00:21:50,810
so that Fetch could be followed.

446
00:21:50,810 --> 00:21:53,331
The other design requirement was that the hero

447
00:21:53,331 --> 00:21:55,892
could dash nonstop for as long as they held the button down.

448
00:21:55,892 --> 00:21:58,253
This introduced a few technical constraints

449
00:21:58,253 --> 00:22:00,414
such as having to account for variable dash distances.

450
00:22:00,414 --> 00:22:03,316
One thing this meant is that we couldn't use

451
00:22:03,316 --> 00:22:05,717
some of the same techniques we used for Smoke Dash,

452
00:22:05,717 --> 00:22:07,798
where the hero was reformed by the same particles

453
00:22:07,798 --> 00:22:09,599
that left him during the launch,

454
00:22:09,599 --> 00:22:11,400
because we didn't know the dash time beforehand.

455
00:22:15,840 --> 00:22:18,160
This is an early concept for Neon Dash.

456
00:22:18,160 --> 00:22:19,321
From an art direction standpoint,

457
00:22:19,321 --> 00:22:21,221
we needed to have the hero's form strobe

458
00:22:21,221 --> 00:22:22,701
as well as leave lingering neon trails.

459
00:22:22,701 --> 00:22:25,222
We also wanted to make sure that the effect

460
00:22:25,222 --> 00:22:26,702
had some sort of lingering element

461
00:22:26,702 --> 00:22:28,343
after he came out of the dash.

462
00:22:28,343 --> 00:22:30,543
We weren't really sure what that was gonna be at the start,

463
00:22:30,543 --> 00:22:32,344
but we ended up using a technique to crawl energy

464
00:22:32,344 --> 00:22:34,304
over the surface of his mesh as he leaves the dash.

465
00:22:34,304 --> 00:22:36,025
I'll talk about that technique in a later slide.

466
00:22:36,025 --> 00:22:37,445
This is another concept and how it turned out in game.

467
00:22:54,648 --> 00:22:58,591
So here's the full version of Neon Dash.

468
00:22:58,591 --> 00:23:02,874
It was composed mostly of sort of different elements

469
00:23:02,874 --> 00:23:06,998
like some kind of wispy energy trails.

470
00:23:06,998 --> 00:23:09,520
There's the body ribbons on splines.

471
00:23:09,520 --> 00:23:11,261
There's neon bits, plasma gas, and some lights.

472
00:23:11,261 --> 00:23:13,783
You can kind of see an example there

473
00:23:13,783 --> 00:23:15,684
as he runs off screen of how

474
00:23:15,684 --> 00:23:17,846
the really long light running trails.

475
00:23:17,846 --> 00:23:19,728
Those I think lasted like 20, 25 seconds like that.

476
00:23:30,909 --> 00:23:36,030
So here I've isolated the ribbons that create the form of the neon dash here.

477
00:23:36,030 --> 00:23:38,371
You can kind of see in strobe as I run around.

478
00:23:38,371 --> 00:23:45,132
These scar lines here represent different spline positions that we created by feeding in a list of joints on the hero.

479
00:23:45,132 --> 00:23:48,553
There's a spline for each leg and one for the torso and also one for the head.

480
00:23:48,553 --> 00:23:53,874
A lot of cases we used rotation functions around some of these splines

481
00:23:53,874 --> 00:23:56,875
to kind of help create the torso shape, create a little volume shape.

482
00:24:03,935 --> 00:24:07,418
The ribbons were actually created along these splines and there was some curl noise that

483
00:24:07,418 --> 00:24:09,480
sort of modulated their position as you can see right here.

484
00:24:21,062 --> 00:24:22,322
So an element that we used on quite a few

485
00:24:22,322 --> 00:24:25,643
of the Neon powers was this lingering energy on meshes.

486
00:24:25,643 --> 00:24:28,185
The intersection tests against the depth buffer

487
00:24:28,185 --> 00:24:30,906
are not exactly new, but our engineer Matt Durasoff

488
00:24:30,906 --> 00:24:32,186
thought, you know, why not expose this

489
00:24:32,186 --> 00:24:32,987
to the particle systems?

490
00:24:32,987 --> 00:24:34,327
This is another little thing we can play with.

491
00:24:34,327 --> 00:24:36,668
These billboards are screen facing,

492
00:24:36,668 --> 00:24:38,329
so the pattern alters as you move around,

493
00:24:38,329 --> 00:24:40,510
but we could specify facing on billboards

494
00:24:40,510 --> 00:24:42,450
so we could have created a more consistent pattern

495
00:24:42,450 --> 00:24:43,251
if we wanted.

496
00:24:43,251 --> 00:24:46,112
You're gonna see here, I'm adjusting some

497
00:24:46,112 --> 00:24:48,713
of the different knobs, like the depth of the test

498
00:24:48,713 --> 00:24:49,693
and kind of the glow amount.

499
00:24:55,002 --> 00:24:58,483
This feature turned out to be pretty useful for pretty much all of the Neon powers.

500
00:24:58,483 --> 00:24:59,683
We used it for a ton.

501
00:24:59,683 --> 00:25:02,984
The float, the stasis grenade, just a lot of different places.

502
00:25:02,984 --> 00:25:04,865
It became kind of a signature of the power set.

503
00:25:04,865 --> 00:25:05,925
So here's the final version of the Neon Dash.

504
00:25:21,150 --> 00:25:23,673
It's just a lot of fun dashing around the monorail tracks,

505
00:25:23,673 --> 00:25:24,653
you know, just dashing anywhere.

506
00:25:24,653 --> 00:25:27,155
I like to call our powers time thieves,

507
00:25:27,155 --> 00:25:28,977
because if you're not careful,

508
00:25:28,977 --> 00:25:30,979
you'll find out you've been just playing the game

509
00:25:30,979 --> 00:25:32,940
the last 15 minutes and not actually working.

510
00:25:32,940 --> 00:25:34,021
Can be a problem.

511
00:25:34,021 --> 00:25:35,803
You'll see some of the depth test stuff as he comes out.

512
00:25:51,684 --> 00:25:53,805
So in order to make the effects I've just shown,

513
00:25:53,805 --> 00:25:56,667
we had to create an entirely new tool set for Second Son.

514
00:25:56,667 --> 00:25:58,789
I'm gonna be going over the components

515
00:25:58,789 --> 00:26:00,090
of our tool set fairly quickly.

516
00:26:00,090 --> 00:26:01,931
There's a talk this Friday at 10 a.m.

517
00:26:01,931 --> 00:26:04,293
by one of our engineers, Bill Rockenbeck.

518
00:26:04,293 --> 00:26:07,535
He's gonna talk about the particle system architecture.

519
00:26:07,535 --> 00:26:10,377
It's gonna give you a more technical look

520
00:26:10,377 --> 00:26:11,218
at our effect systems.

521
00:26:11,218 --> 00:26:12,339
So you should go to that if you're interested

522
00:26:12,339 --> 00:26:12,959
in that kind of thing.

523
00:26:12,959 --> 00:26:15,781
When we started pre-production on Infamous Second Son,

524
00:26:15,781 --> 00:26:17,362
there were a few known quantities

525
00:26:17,362 --> 00:26:18,423
that kind of led to the decisions

526
00:26:18,423 --> 00:26:19,924
that we made on the tool set.

527
00:26:20,723 --> 00:26:23,504
we had to be able to deliver what the game design required.

528
00:26:23,504 --> 00:26:25,525
This meant designing a flexible system

529
00:26:25,525 --> 00:26:27,326
that could handle the many types of powers

530
00:26:27,326 --> 00:26:28,066
the hero would have.

531
00:26:28,066 --> 00:26:30,307
From an artistic standpoint,

532
00:26:30,307 --> 00:26:32,508
we wanted the VFX to be another character in the story.

533
00:26:32,508 --> 00:26:34,989
The goal was to make everything feel alive,

534
00:26:34,989 --> 00:26:36,389
as if the character who created the power

535
00:26:36,389 --> 00:26:38,010
was in full control of the effect.

536
00:26:38,010 --> 00:26:40,231
This was a really important goal for us

537
00:26:40,231 --> 00:26:43,512
because the fiction behind conduits and superpowers

538
00:26:43,512 --> 00:26:45,052
is pretty clear that the conduit

539
00:26:45,052 --> 00:26:46,713
is just manipulating the power.

540
00:26:46,713 --> 00:26:47,933
They're not merely summoning it.

541
00:26:49,387 --> 00:26:52,831
In terms of production, what the effects team wanted was faster editing.

542
00:26:52,831 --> 00:26:56,556
This would be a requirement for us because of the volume of work that had to be done

543
00:26:56,556 --> 00:27:00,201
within the short development cycle that we had.

544
00:27:00,201 --> 00:27:04,607
This was basically a two-year and some change production cycle for us, and on new engine

545
00:27:04,607 --> 00:27:05,368
and new hardware.

546
00:27:07,113 --> 00:27:08,634
We knew it was gonna be really difficult to determine

547
00:27:08,634 --> 00:27:10,275
if something was quote, an extragen or not,

548
00:27:10,275 --> 00:27:12,576
but our initial goal was to increase

549
00:27:12,576 --> 00:27:15,018
the complexity of simulations and combine that

550
00:27:15,018 --> 00:27:16,599
with accuracy in lighting and sorting.

551
00:27:16,599 --> 00:27:20,361
We felt like doing these two things really well

552
00:27:20,361 --> 00:27:21,201
would be at least a good start.

553
00:27:21,201 --> 00:27:25,224
Based on those challenges, we made some early decisions

554
00:27:25,224 --> 00:27:27,225
on what kind of tools, rendering techniques,

555
00:27:27,225 --> 00:27:28,866
and processes that we would need.

556
00:27:29,227 --> 00:27:31,648
Knowing that we're designing a game with multiple power sets

557
00:27:31,648 --> 00:27:33,589
meant that we had to create a very flexible and powerful

558
00:27:33,589 --> 00:27:34,029
system.

559
00:27:34,029 --> 00:27:36,310
This meant rethinking the way we traditionally

560
00:27:36,310 --> 00:27:38,871
think about particles simulation.

561
00:27:38,871 --> 00:27:41,272
For example, in most particle editing environments,

562
00:27:41,272 --> 00:27:42,892
particles are basically fire and forget.

563
00:27:42,892 --> 00:27:45,613
At any point in their lifetime, their position

564
00:27:45,613 --> 00:27:48,394
is based on parameters that are only set at a mid-time, things

565
00:27:48,394 --> 00:27:50,215
like velocity and gravity.

566
00:27:50,215 --> 00:27:53,416
The SecondSon VFX toolset allows you to directly set particle

567
00:27:53,416 --> 00:27:55,857
positions at any point during their lifetime

568
00:27:55,857 --> 00:27:57,578
or by using externally driven user parameters.

569
00:27:58,447 --> 00:28:01,929
The expression difference system was definitely the right choice for the design challenges

570
00:28:01,929 --> 00:28:02,490
that we faced.

571
00:28:02,490 --> 00:28:07,053
Deciding to improve the shading and allow real-time editing and run the particles in

572
00:28:07,053 --> 00:28:10,315
the GPU were also key decisions that we made early on during development.

573
00:28:10,315 --> 00:28:14,018
So this is the basic layout of our particle editor.

574
00:28:14,018 --> 00:28:18,522
The outline on the left is the container for all the particle systems and all of its emitters.

575
00:28:19,304 --> 00:28:22,325
The property editor contains all the various fields

576
00:28:22,325 --> 00:28:24,445
that we can edit with our expressions.

577
00:28:24,445 --> 00:28:26,486
And most of these property fields can have graph data

578
00:28:26,486 --> 00:28:26,786
as a value.

579
00:28:26,786 --> 00:28:28,766
So an example of this is shown on the right

580
00:28:28,766 --> 00:28:34,288
with a keyframe editor.

581
00:28:34,288 --> 00:28:39,249
The particle editing environment is expression-based,

582
00:28:39,249 --> 00:28:41,790
as I mentioned, so it supports a broad range of inputs.

583
00:28:41,790 --> 00:28:45,171
Vectors, floats, strings, random ranges, and more.

584
00:28:45,171 --> 00:28:47,891
We compile static values into constants using a,

585
00:28:48,897 --> 00:28:52,400
PSSL, which is a PlayStation shader language, and Bill Ruckenbeck is going to talk more

586
00:28:52,400 --> 00:28:57,143
about that. But once compiled, these values can be edited live, even if the game clock

587
00:28:57,143 --> 00:29:02,486
is paused. Variables can be created on the system or emitter level, and these variables,

588
00:29:02,486 --> 00:29:06,069
which I'll call user parameters from here on out, they can be used in our expression

589
00:29:06,069 --> 00:29:11,192
syntax. There's only a few basic triangulation and shading methods, but we got a bunch of

590
00:29:11,192 --> 00:29:13,213
variety out of them just due to our expression system.

591
00:29:15,986 --> 00:29:18,987
One of the areas that's not expressionable is emit functions.

592
00:29:18,987 --> 00:29:22,548
We did add a little bit of flexibility there to add an emit ratio multiplier just so we

593
00:29:22,548 --> 00:29:26,490
could modify the emit rate externally through those user parameters.

594
00:29:26,490 --> 00:29:32,372
Our tool set has separate emit and update spaces and this lets us do things like emit

595
00:29:32,372 --> 00:29:35,713
on a character's joint and either continue to have an update on that joint or be left

596
00:29:35,713 --> 00:29:37,213
behind in world space.

597
00:29:37,213 --> 00:29:43,215
We can also convert and lerp between different spaces I showed earlier with the smoke dash.

598
00:29:48,218 --> 00:29:50,099
This is an example of editing a particle system

599
00:29:50,099 --> 00:29:50,799
in our tool set.

600
00:29:50,799 --> 00:29:54,280
So here I'm just editing a curve that is multiplied

601
00:29:54,280 --> 00:29:56,100
against the particle scale of the smoke.

602
00:29:56,100 --> 00:29:59,541
Notice that I'm still able to make changes to these values

603
00:29:59,541 --> 00:30:04,402
even though the game clock's paused.

604
00:30:04,402 --> 00:30:06,402
I'm also able to change the constant values

605
00:30:06,402 --> 00:30:09,123
as I mentioned earlier in expressions in real time as well.

606
00:30:09,123 --> 00:30:10,743
You can see I'm just changing a multiplier

607
00:30:10,743 --> 00:30:11,663
on the billboard size.

608
00:30:13,523 --> 00:30:15,044
Now all constants can be changed,

609
00:30:15,044 --> 00:30:16,584
you know, alpha, brightness, pretty much anything.

610
00:30:16,584 --> 00:30:20,185
Random ranges are only evaluated at a mid-time,

611
00:30:20,185 --> 00:30:22,506
and because we're not able to change them at real-time,

612
00:30:22,506 --> 00:30:26,027
I typically kind of multiply in a constant value

613
00:30:26,027 --> 00:30:27,867
against a random range so I can tweak things live.

614
00:30:27,867 --> 00:30:30,788
You can kind of see an example of that after this is done.

615
00:30:30,788 --> 00:30:32,448
When I go back to editing the static value,

616
00:30:32,448 --> 00:30:34,729
you can kind of see there's a random range

617
00:30:34,729 --> 00:30:36,389
kind of in brackets that's multiplied

618
00:30:36,389 --> 00:30:37,190
against a constant.

619
00:30:37,190 --> 00:30:37,430
Right here.

620
00:30:50,337 --> 00:30:53,761
So one of the bigger strengths of our expression system is user set parameters.

621
00:30:53,761 --> 00:30:57,986
These parameters come in two forms, system level parameters and emitter level parameters.

622
00:30:57,986 --> 00:31:01,551
System level parameters are scoped for the whole system.

623
00:31:01,551 --> 00:31:05,976
They can be referenced on any emitter and they'll return the same value on all emitters.

624
00:31:05,976 --> 00:31:10,461
These parameters can be changed externally through either our scripting language or through

625
00:31:10,461 --> 00:31:10,761
code.

626
00:31:11,513 --> 00:31:13,414
They can also be changed on instance level.

627
00:31:13,414 --> 00:31:16,915
So specific place instances of an effect in the game world

628
00:31:16,915 --> 00:31:18,915
can have a variable attribute, such as color or scale.

629
00:31:18,915 --> 00:31:23,056
Pretty much whatever you pipe that into, you can adjust.

630
00:31:23,056 --> 00:31:25,637
Now, emitter level parameters are scoped within an emitter

631
00:31:25,637 --> 00:31:28,358
and evaluated differently per particle.

632
00:31:28,358 --> 00:31:30,778
So an emitter that has a parameter for a random range

633
00:31:30,778 --> 00:31:34,679
for scale, that'll just return a different random number

634
00:31:34,679 --> 00:31:35,700
per particle spawned.

635
00:31:38,615 --> 00:31:42,496
Our keyframe editor has proven to be tremendously powerful,

636
00:31:42,496 --> 00:31:43,556
more than I thought at the outset.

637
00:31:43,556 --> 00:31:46,597
A huge part of this is that the power

638
00:31:46,597 --> 00:31:48,937
is that we can input and evaluate any other expression

639
00:31:48,937 --> 00:31:50,458
against the x-axis of the keyframe.

640
00:31:50,458 --> 00:31:54,379
So here's a simple curve used on Particle Alpha.

641
00:31:54,379 --> 00:31:57,659
I've set the input expression at the bottom here,

642
00:31:57,659 --> 00:31:57,999
just to be L.

643
00:31:57,999 --> 00:32:01,100
And this is basically a shorthand way of us saying

644
00:32:01,100 --> 00:32:03,041
age divided by lifetime, which is just gonna return

645
00:32:03,041 --> 00:32:06,302
a value between zero and one over the particle's lifetime.

646
00:32:08,682 --> 00:32:11,523
So being able to map input expressions into keyframes

647
00:32:11,523 --> 00:32:14,685
allows us to do things like lerp the color of particles

648
00:32:14,685 --> 00:32:16,406
by their position.

649
00:32:16,406 --> 00:32:18,828
I've created a variable here called emitPos,

650
00:32:18,828 --> 00:32:22,050
and this creates a box that's 500 centimeters tall

651
00:32:22,050 --> 00:32:23,751
by 50 centimeters wide and deep.

652
00:32:23,751 --> 00:32:26,813
I then created a keyframe with the input expression

653
00:32:26,813 --> 00:32:28,794
set to the z value of the emitPos variable.

654
00:32:28,794 --> 00:32:30,455
You can see there, emitPos.z.

655
00:32:30,455 --> 00:32:32,676
I'm just swizzling out the z component of that vector.

656
00:32:32,676 --> 00:32:36,119
I've added a couple points to the keyframe,

657
00:32:36,119 --> 00:32:36,999
one at zero and one at 500.

658
00:32:37,542 --> 00:32:39,264
I've set the output value at zero to be zero,

659
00:32:39,264 --> 00:32:40,765
and the output value at 500 to be one.

660
00:32:40,765 --> 00:32:43,928
All this does really is return values of zero to one

661
00:32:43,928 --> 00:32:45,870
over the height of the emitter,

662
00:32:45,870 --> 00:32:49,133
which then I've referenced in a simple color alert function.

663
00:32:49,133 --> 00:32:51,615
It's just one little basic way you can use

664
00:32:51,615 --> 00:32:52,796
the variable input expression.

665
00:32:52,796 --> 00:32:57,880
This is kind of a more complex example of using keyframes.

666
00:32:57,880 --> 00:32:59,322
I'm using a keyframe here to adjust

667
00:32:59,322 --> 00:33:01,343
the rotational speed of particles on a disk.

668
00:33:01,932 --> 00:33:04,452
So if I use the radius of the disk as an input variable,

669
00:33:04,452 --> 00:33:06,712
the output is controlled by the keyframe

670
00:33:06,712 --> 00:33:08,733
that you can see there at the bottom.

671
00:33:08,733 --> 00:33:12,833
These values are then multiplied into the rotation rate.

672
00:33:12,833 --> 00:33:14,734
They make the particles move faster or slower

673
00:33:14,734 --> 00:33:15,634
based on the radius.

674
00:33:15,634 --> 00:33:20,015
Here I'm using the same keyframe to control a color lerp

675
00:33:20,015 --> 00:33:21,615
to make the results a bit more obvious.

676
00:33:21,615 --> 00:33:29,576
So remember, this is only a single emitter

677
00:33:29,576 --> 00:33:30,777
with a couple expressions.

678
00:33:31,285 --> 00:33:44,334
If you layer and stack this sort of behavior, you can get some pretty awesome results.

679
00:33:44,334 --> 00:33:47,456
So now you've seen a bit of our editing environment. I'm going to talk a little bit about the shading

680
00:33:47,456 --> 00:33:51,078
and lighting of our particle systems. We spent a bit of effort on this as well.

681
00:33:52,348 --> 00:33:56,570
So with Infamous Second Sun, one of our overarching goals was to make particles fit seamlessly

682
00:33:56,570 --> 00:33:57,291
into the environment.

683
00:33:57,291 --> 00:33:58,592
This was sort of a mantra for us.

684
00:33:58,592 --> 00:34:02,854
We felt pretty strongly that particles really feel like they reside in the scene and that

685
00:34:02,854 --> 00:34:04,335
particles had incorrect lighting and shading.

686
00:34:04,335 --> 00:34:05,836
They always felt composited in.

687
00:34:05,836 --> 00:34:07,777
We didn't want to have anything feel composited in.

688
00:34:08,727 --> 00:34:10,108
So we broke the problems down

689
00:34:10,108 --> 00:34:11,249
into sort of the following components

690
00:34:11,249 --> 00:34:13,370
that we felt like we would need to have.

691
00:34:13,370 --> 00:34:15,271
We needed them to cast shadows,

692
00:34:15,271 --> 00:34:16,913
particles, I should say, cast shadows,

693
00:34:16,913 --> 00:34:20,055
receive shadows, cast lights,

694
00:34:20,055 --> 00:34:23,617
take balanced ambient, receive directional sunlight,

695
00:34:23,617 --> 00:34:25,238
blend correctly with haze,

696
00:34:25,238 --> 00:34:27,299
and use the same HDR particle rendering

697
00:34:27,299 --> 00:34:28,860
that the environment was using.

698
00:34:31,484 --> 00:34:34,207
So with shadows, we felt that they needed to cast shadows

699
00:34:34,207 --> 00:34:37,350
to help feel kind of grounded to the environment.

700
00:34:37,350 --> 00:34:39,051
And our engineers were able to create

701
00:34:39,051 --> 00:34:42,715
a particle shadow buffer and use kind of simple blobs

702
00:34:42,715 --> 00:34:46,979
per particle, and those added up to the whole shadow shape.

703
00:34:46,979 --> 00:34:48,340
This is some of the features here,

704
00:34:48,340 --> 00:34:51,143
but I'm gonna show a demo of them in the next slide.

705
00:34:51,143 --> 00:34:53,425
Here is a particle system that is casting shadows,

706
00:34:53,425 --> 00:34:56,708
and it's having its shadow strength turned up and down.

707
00:34:57,763 --> 00:35:01,667
We're able to tune the shadow strength appropriately based on how much the material should occlude light.

708
00:35:01,667 --> 00:35:03,709
It's kind of just an artistic adjustment.

709
00:35:03,709 --> 00:35:09,996
So, you know, for example, we could turn down the shadow strength for water vapor or kind of turn it up for opaque smoke cloud.

710
00:35:09,996 --> 00:35:11,758
Just another handy thing to be able to do.

711
00:35:27,610 --> 00:35:29,492
So here we can see particle systems that are receiving

712
00:35:29,492 --> 00:35:31,133
shadows from the environment.

713
00:35:31,133 --> 00:35:32,394
In this case, trees.

714
00:35:32,394 --> 00:35:34,395
The shadows are variable resolution,

715
00:35:34,395 --> 00:35:37,037
depending on the distance from the shadow casting object.

716
00:35:37,037 --> 00:35:40,500
But the results are still pretty decent.

717
00:35:40,500 --> 00:35:42,641
As I move the sun direction around,

718
00:35:42,641 --> 00:35:44,463
you can kind of see a little bit better.

719
00:35:44,463 --> 00:35:47,845
So all deferred geometry, when our game is mostly deferred,

720
00:35:47,845 --> 00:35:50,027
can cast shadows onto particle systems,

721
00:35:50,027 --> 00:35:51,568
whether or not they're static or dynamic.

722
00:35:51,568 --> 00:35:51,988
The object, that is.

723
00:35:56,609 --> 00:35:59,551
So a character flying through space will cast shadows

724
00:35:59,551 --> 00:36:01,793
onto these particle systems.

725
00:36:01,793 --> 00:36:04,615
So like with casting shadows,

726
00:36:04,615 --> 00:36:08,198
casting lights ground the particles to the environment

727
00:36:08,198 --> 00:36:11,720
and helps them fit into the scene.

728
00:36:11,720 --> 00:36:16,043
There's also a huge added gameplay benefit to this

729
00:36:16,043 --> 00:36:21,027
as it's easier to track them moving in 3D space.

730
00:36:22,621 --> 00:36:26,789
The particle lights have the same expressions for position like regular particles and they

731
00:36:26,789 --> 00:36:30,697
affect all deferred geometry including other deferred particles.

732
00:36:30,697 --> 00:36:34,845
The only thing we don't affect is translucent particles or anything forward shaded like

733
00:36:34,845 --> 00:36:35,326
some of our hair.

734
00:36:36,172 --> 00:36:37,592
At one point early in development,

735
00:36:37,592 --> 00:36:41,173
I asked Sucker Punch engineer Bill Rockenbeck

736
00:36:41,173 --> 00:36:43,894
if I could just spawn lights off any particle.

737
00:36:43,894 --> 00:36:46,515
Like, if any particle in the game,

738
00:36:46,515 --> 00:36:49,456
however many there are, could they just cast a light?

739
00:36:49,456 --> 00:36:51,077
And I really thought he would say no.

740
00:36:51,077 --> 00:36:53,397
I really thought, there's no way it's gonna work.

741
00:36:53,397 --> 00:36:56,718
And he says, you know, yeah, yeah, we can do that.

742
00:36:56,718 --> 00:36:58,939
And, you know, I learned a valuable lesson.

743
00:36:58,939 --> 00:37:00,120
It really pays to be greedy as effects artists.

744
00:37:00,120 --> 00:37:00,300
I just ask.

745
00:37:00,300 --> 00:37:01,800
There's no reason not to ask.

746
00:37:01,800 --> 00:37:04,081
So here I've isolated part of the smoke missile explosion.

747
00:37:04,729 --> 00:37:07,091
Each parent emitter that you can see there,

748
00:37:07,091 --> 00:37:10,433
kind of towards the end, has a light,

749
00:37:10,433 --> 00:37:11,534
has a point light on it.

750
00:37:11,534 --> 00:37:13,255
Now these can be tuned with, again,

751
00:37:13,255 --> 00:37:15,597
variable color, brightness.

752
00:37:15,597 --> 00:37:18,739
There's some hotspot and falloff controls,

753
00:37:18,739 --> 00:37:20,520
and there's also some specularity controls as well.

754
00:37:20,520 --> 00:37:21,541
So sometimes we want a single light

755
00:37:21,541 --> 00:37:26,064
to represent many small lights, or kind of an area fill.

756
00:37:26,064 --> 00:37:29,367
We'll kind of blur the spec intensity over an area,

757
00:37:29,367 --> 00:37:31,588
essentially just turning down the gloss power

758
00:37:31,588 --> 00:37:32,569
of the light's reflections.

759
00:37:56,546 --> 00:38:00,047
So another element we felt really strongly about was getting good approximation of balanced

760
00:38:00,047 --> 00:38:02,548
and local lighting on our particle systems.

761
00:38:02,548 --> 00:38:07,170
So early on in our pre-production, our lighting team and graphics engineers had built a system

762
00:38:07,170 --> 00:38:11,212
to use spherical harmonics, SH probes, to help with general environmental lighting.

763
00:38:11,212 --> 00:38:15,713
I'm not going to go into specific details about how SH probes work, since there's already

764
00:38:15,713 --> 00:38:17,574
a lot of information out there already.

765
00:38:17,574 --> 00:38:21,475
But if you haven't heard of them, the basics is that these are probes that are placed in

766
00:38:21,475 --> 00:38:24,336
the environment, and they capture the surrounding light information.

767
00:38:24,577 --> 00:38:27,657
This light information is actually baked,

768
00:38:27,657 --> 00:38:29,578
kind of like a light map or an environment map,

769
00:38:29,578 --> 00:38:31,238
and it can be used in a variety of ways.

770
00:38:31,238 --> 00:38:33,879
Mostly this technique is used to capture

771
00:38:33,879 --> 00:38:35,179
bounce lighting for environments,

772
00:38:35,179 --> 00:38:38,419
so lighting that's bouncing off a floor or a wall.

773
00:38:38,419 --> 00:38:41,160
In any case, since the probe data was already being baked

774
00:38:41,160 --> 00:38:42,420
and used in our environment,

775
00:38:42,420 --> 00:38:44,401
our engineers were kind of able to use that data

776
00:38:44,401 --> 00:38:45,941
on our particle systems.

777
00:38:45,941 --> 00:38:49,782
This is an example of the SH probe system at work

778
00:38:49,782 --> 00:38:50,662
lighting our particles.

779
00:38:51,511 --> 00:38:54,194
So as I move the particle system from area to area,

780
00:38:54,194 --> 00:38:55,755
the color from the local lighting

781
00:38:55,755 --> 00:38:57,256
is inherited by the emitter.

782
00:38:57,256 --> 00:38:59,258
This provides another huge level of realism

783
00:38:59,258 --> 00:39:01,280
as the particle system kind of helps

784
00:39:01,280 --> 00:39:02,601
sit in the world correctly.

785
00:39:02,601 --> 00:39:05,364
You see that our probe must be placed

786
00:39:05,364 --> 00:39:07,466
really close to the green sign right here

787
00:39:07,466 --> 00:39:10,849
because we're getting a lot of inheritance.

788
00:39:10,849 --> 00:39:13,812
The accuracy of this system is pretty dependent

789
00:39:13,812 --> 00:39:15,433
on the density of the probes.

790
00:39:16,158 --> 00:39:22,152
For, I think for Infamous Second Son, our probe density was around 1 every 3 to 5 meters.

791
00:39:42,160 --> 00:39:43,981
So with MMS2, we had directional sunlight

792
00:39:43,981 --> 00:39:45,881
affecting particles, and for Second Sun,

793
00:39:45,881 --> 00:39:48,142
we improved this capability with a way

794
00:39:48,142 --> 00:39:49,982
to tune the strength values per emitter.

795
00:39:49,982 --> 00:39:51,823
This kind of allowed us to simulate

796
00:39:51,823 --> 00:39:53,804
the correct light diffusion through different elements.

797
00:39:53,804 --> 00:39:56,824
These three emitters demonstrate a few different values

798
00:39:56,824 --> 00:39:59,205
of directional sunlight shading.

799
00:39:59,205 --> 00:40:01,626
On the left, the emitter is set to have shadows off.

800
00:40:01,626 --> 00:40:03,586
In the middle, the strength is set to 60%,

801
00:40:03,586 --> 00:40:05,847
and on the far right, it's 100% strength.

802
00:40:05,847 --> 00:40:08,368
Typically, we use this to lower the shading value

803
00:40:08,368 --> 00:40:10,088
on steam particles and kind of crank it

804
00:40:10,088 --> 00:40:11,628
for the smoke.

805
00:40:24,124 --> 00:40:28,105
So because Infamous Second Son uses physically based rendering and HDR,

806
00:40:28,105 --> 00:40:32,787
this meant a drastic shift in the way we control the emissive properties and lighting of particle systems.

807
00:40:32,787 --> 00:40:36,948
So anyone who's worked with HDR and physically based rendering has probably already figured out

808
00:40:36,948 --> 00:40:40,750
that it's difficult to work with relative to last gen as it relates to particle effects.

809
00:40:40,750 --> 00:40:44,631
We found that rendering accurate exposure values for particle systems was not the way to go,

810
00:40:44,631 --> 00:40:46,692
and it's for a few main reasons.

811
00:40:46,692 --> 00:40:50,713
Firstly, it's confusing in communicating the game design.

812
00:40:50,713 --> 00:40:51,753
When, you know, powers feel...

813
00:40:52,454 --> 00:40:54,656
dangerous in one time of day, but not another,

814
00:40:54,656 --> 00:40:56,957
that really detracts from the player's experience.

815
00:40:56,957 --> 00:41:00,620
It also didn't entirely fit the art style of the game.

816
00:41:00,620 --> 00:41:03,342
You know, it, basically it's a great starting point

817
00:41:03,342 --> 00:41:06,404
for environments, but it didn't really work for powers.

818
00:41:06,404 --> 00:41:08,245
We wanted them to be much more stylized.

819
00:41:08,245 --> 00:41:10,427
Thirdly, it's not what players expect.

820
00:41:10,427 --> 00:41:12,648
Players kind of expect Hollywood realism

821
00:41:12,648 --> 00:41:14,910
from a game like, an action game like Second Son.

822
00:41:14,910 --> 00:41:16,491
So when your powers impact enemies,

823
00:41:16,491 --> 00:41:18,352
it needs to be bright and over the top.

824
00:41:20,950 --> 00:41:22,691
So this is an example of the Neon Bolt

825
00:41:22,691 --> 00:41:24,892
without exposure adjustments in different times of day.

826
00:41:24,892 --> 00:41:28,215
So if you balance the particle HDR exposure values

827
00:41:28,215 --> 00:41:30,516
to the day settings on the right there,

828
00:41:30,516 --> 00:41:33,038
you know it's as bright as the surface of the sun

829
00:41:33,038 --> 00:41:34,038
at night in the middle.

830
00:41:34,038 --> 00:41:36,100
It's actually so bright it's causing

831
00:41:36,100 --> 00:41:38,341
our dynamic eye adaptation to make the rest

832
00:41:38,341 --> 00:41:40,083
of the screen look black.

833
00:41:40,083 --> 00:41:45,386
But if you balance the exposure values for night time,

834
00:41:45,386 --> 00:41:47,808
you basically can't see it at all during the day.

835
00:41:48,407 --> 00:41:52,130
This is a pretty big design issue if you can't see your powers or when enemies shoot at you.

836
00:41:52,130 --> 00:41:56,873
We chose to go with a simple exposure offset on the emitters. It just only affects the visual effects shaders,

837
00:41:56,873 --> 00:42:04,378
but it's tunable per time of day and it solves the problem for the most part for us.

838
00:42:04,378 --> 00:42:07,801
It wasn't perfect, but it ended up getting the job done.

839
00:42:07,801 --> 00:42:11,603
It meant going back through and tuning by hand when time of day has changed,

840
00:42:11,603 --> 00:42:14,205
but it was worth it to keep things mostly consistent.

841
00:42:15,132 --> 00:42:16,413
For our next project, we're gonna look at ways

842
00:42:16,413 --> 00:42:18,054
to automate this and improve this process.

843
00:42:18,054 --> 00:42:20,616
For our second son, we used quite a bit

844
00:42:20,616 --> 00:42:24,799
of real-time curl noise, and I thought it would be useful

845
00:42:24,799 --> 00:42:27,200
to kind of discuss some of the different ways

846
00:42:27,200 --> 00:42:29,562
we used it beyond just particle accelerations.

847
00:42:29,562 --> 00:42:32,604
Our noise solution consists of a couple

848
00:42:32,604 --> 00:42:34,305
of different expressions.

849
00:42:34,305 --> 00:42:36,587
One returns a float, and the other returns a vector.

850
00:42:36,587 --> 00:42:39,189
Basically, these functions contain

851
00:42:39,189 --> 00:42:41,170
sort of an input position to evaluate against.

852
00:42:41,892 --> 00:42:44,816
a frequency of waveform, so how tight the waveform is,

853
00:42:44,816 --> 00:42:47,721
and then a strength of waveform,

854
00:42:47,721 --> 00:42:49,664
and an iteration time that controls

855
00:42:49,664 --> 00:42:52,528
how frequently to iterate and change the waveform pattern.

856
00:42:55,042 --> 00:42:57,564
So many real-time curl noise demos seen so far,

857
00:42:57,564 --> 00:42:59,606
they use undamped accelerations.

858
00:42:59,606 --> 00:43:00,687
Like if you just kind of go out there

859
00:43:00,687 --> 00:43:02,408
and look at what a lot of people are doing,

860
00:43:02,408 --> 00:43:04,770
these particles are kind of gaining energy

861
00:43:04,770 --> 00:43:07,513
instead of slowing down due to air resistance.

862
00:43:07,513 --> 00:43:08,694
During the production of Second Sun,

863
00:43:08,694 --> 00:43:11,717
I found that damping particles to slow them down

864
00:43:11,717 --> 00:43:14,719
and sort of lower an acceleration over time

865
00:43:14,719 --> 00:43:16,441
kind of led to a lot more believable results.

866
00:43:16,441 --> 00:43:17,902
It's just something we tried to do.

867
00:43:18,605 --> 00:43:22,708
I think that it's kind of all in context, right?

868
00:43:22,708 --> 00:43:25,971
If we were doing a game that had a lot of actual magic power

869
00:43:25,971 --> 00:43:27,992
effects, undamped curl would totally be appropriate.

870
00:43:27,992 --> 00:43:29,594
So there are a ton of uses for curl noise

871
00:43:29,594 --> 00:43:30,594
beyond particle velocities.

872
00:43:30,594 --> 00:43:33,557
This example, I'm using a noise function on a couple spheres.

873
00:43:33,557 --> 00:43:37,420
So the blue sphere has noise applied to its radius,

874
00:43:37,420 --> 00:43:42,143
and the yellow sphere has three-dimensional positional

875
00:43:42,143 --> 00:43:43,144
noise applied to it.

876
00:43:43,144 --> 00:43:47,267
The shape results are actually quite different, as you can see.

877
00:43:48,775 --> 00:43:50,356
I've used the same kernel noise function

878
00:43:50,356 --> 00:43:51,917
that's changing the shape to colorize these

879
00:43:51,917 --> 00:43:53,778
so it's a little easier to see what's going on.

880
00:43:53,778 --> 00:43:56,099
This is the same noise pattern applied to a ring,

881
00:43:56,099 --> 00:43:57,460
and it kind of makes the differences

882
00:43:57,460 --> 00:43:58,901
between the two approaches a little bit more clear.

883
00:43:58,901 --> 00:44:01,743
You can kind of see the yellow one is actually moving

884
00:44:01,743 --> 00:44:03,224
in three-dimensional space,

885
00:44:03,224 --> 00:44:05,125
while the blue is just only affecting the radius.

886
00:44:06,450 --> 00:44:08,392
Another example is adjusting particle scale

887
00:44:08,392 --> 00:44:09,933
with curl noise functions.

888
00:44:09,933 --> 00:44:13,296
The potential uses are pretty much limitless.

889
00:44:13,296 --> 00:44:15,618
Anything that can be parameterized and turned

890
00:44:15,618 --> 00:44:17,719
into expression can be influenced

891
00:44:17,719 --> 00:44:18,640
by curl noise functions.

892
00:44:18,640 --> 00:44:20,602
So if you guys are going to start using this,

893
00:44:20,602 --> 00:44:22,944
I urge you to just think of lots of different ways

894
00:44:22,944 --> 00:44:23,404
you can use it.

895
00:44:23,404 --> 00:44:24,725
It's very, very flexible, particularly

896
00:44:24,725 --> 00:44:25,306
if you need to make amoeba.

897
00:44:39,920 --> 00:44:42,600
So I'd like to wrap up by talking a bit about the pros

898
00:44:42,600 --> 00:44:44,141
and cons to our new tool set.

899
00:44:44,141 --> 00:44:45,821
Let's start with the pros.

900
00:44:45,821 --> 00:44:48,822
This is a big slide, so I'm just gonna go through

901
00:44:48,822 --> 00:44:49,222
them one at a time.

902
00:44:49,222 --> 00:44:52,523
One of the major pros to our new workflow

903
00:44:52,523 --> 00:44:54,964
is the sheer power we have over particle sims.

904
00:44:54,964 --> 00:44:56,644
The only real limit for us as effects artists

905
00:44:56,644 --> 00:44:58,205
is our understanding of math.

906
00:44:58,205 --> 00:44:59,945
And I've had to learn a lot more math

907
00:44:59,945 --> 00:45:01,986
than I knew existed during this project,

908
00:45:01,986 --> 00:45:04,606
and it's something that my high school math teachers

909
00:45:04,606 --> 00:45:05,887
would find truly hilarious,

910
00:45:05,887 --> 00:45:07,427
considering I was a straight D student.

911
00:45:09,592 --> 00:45:11,533
A benefit to having expression-based systems

912
00:45:11,533 --> 00:45:13,194
means that engineers just kind of intuitively

913
00:45:13,194 --> 00:45:13,855
understand it, right?

914
00:45:13,855 --> 00:45:16,657
It means that they can make more contributions

915
00:45:16,657 --> 00:45:17,937
to the final assets.

916
00:45:17,937 --> 00:45:20,419
And we're also speaking the same language now.

917
00:45:20,419 --> 00:45:22,260
So that's been really beneficial

918
00:45:22,260 --> 00:45:24,442
just from a working relationship with engineers.

919
00:45:24,442 --> 00:45:28,064
Using GPU particles, let us just use

920
00:45:28,064 --> 00:45:31,426
tens of times more particles than Infamous 2.

921
00:45:31,426 --> 00:45:33,967
So a single smoke dash in Second Son

922
00:45:33,967 --> 00:45:36,449
is over half the particle budget for Infamous 2.

923
00:45:37,034 --> 00:45:38,657
And you do it all the time in combat.

924
00:45:38,657 --> 00:45:41,383
So this kind of gives you an idea of the number of particles,

925
00:45:41,383 --> 00:45:44,148
how many more responding in the second sun.

926
00:45:44,148 --> 00:45:47,374
UDIN and GPU also let us create much more complex behaviors.

927
00:45:47,374 --> 00:45:49,238
So this one is just a huge step upward for us.

928
00:45:51,702 --> 00:45:54,102
Now, early iterations of the tool required compiles

929
00:45:54,102 --> 00:45:54,562
for all changes.

930
00:45:54,562 --> 00:45:58,204
Even though its compile time was only five or six seconds,

931
00:45:58,204 --> 00:46:00,124
we found that any delay between making changes

932
00:46:00,124 --> 00:46:02,085
and seeing the results slowed dramatically.

933
00:46:02,085 --> 00:46:04,425
Our engineers were able to actually come up with a system

934
00:46:04,425 --> 00:46:06,466
to make it real time, as you saw earlier.

935
00:46:06,466 --> 00:46:08,727
I think they were surprised by the results

936
00:46:08,727 --> 00:46:11,227
and how much more they enjoyed editing particles.

937
00:46:11,227 --> 00:46:13,748
I think a lot of it is it sort of just kills the joy

938
00:46:13,748 --> 00:46:14,808
of editing, right?

939
00:46:14,808 --> 00:46:17,049
The reason that a lot of us got into art in the first place

940
00:46:17,049 --> 00:46:18,610
was the immediacy of it.

941
00:46:18,610 --> 00:46:20,790
You put the pencil to paper and the line is drawn.

942
00:46:21,524 --> 00:46:22,204
You don't wait.

943
00:46:22,204 --> 00:46:25,526
So our sorting and lighting is hugely improved

944
00:46:25,526 --> 00:46:27,087
from Infamous 2.

945
00:46:27,087 --> 00:46:28,568
So sorting was kind of inconsistent

946
00:46:28,568 --> 00:46:30,249
across the different techniques that we had.

947
00:46:30,249 --> 00:46:31,829
We had a bunch of different shaders.

948
00:46:31,829 --> 00:46:33,390
With Second Son, we have kind of one

949
00:46:33,390 --> 00:46:35,311
sort of uber-shader for all particles,

950
00:46:35,311 --> 00:46:37,832
which is, in effect, why our particle shading options

951
00:46:37,832 --> 00:46:39,213
were relatively limited,

952
00:46:39,213 --> 00:46:41,094
because we wanted to have that accuracy

953
00:46:41,094 --> 00:46:42,875
in sorting and lighting.

954
00:46:42,875 --> 00:46:44,816
We also had no way to spawn lights at all

955
00:46:44,816 --> 00:46:46,857
in Infamous 2, through the particle system.

956
00:46:46,857 --> 00:46:49,218
We had to actually use script and sort of Maya lights.

957
00:46:50,873 --> 00:46:52,995
There's definitely some cons to our system,

958
00:46:52,995 --> 00:46:54,216
and here's a few of the big ones.

959
00:46:54,216 --> 00:46:57,800
Particle systems can get extremely complex very quickly,

960
00:46:57,800 --> 00:47:00,683
which means that if you don't work on a file

961
00:47:00,683 --> 00:47:03,325
for a few weeks and come back to it,

962
00:47:03,325 --> 00:47:06,388
it can take some time to grok everything that's going on,

963
00:47:06,388 --> 00:47:08,350
kind of retrace every expression.

964
00:47:08,350 --> 00:47:10,533
It's also difficult to work out

965
00:47:10,533 --> 00:47:12,274
another effect's artist submitters,

966
00:47:12,274 --> 00:47:15,157
especially if strict naming conventions aren't followed.

967
00:47:15,935 --> 00:47:22,041
We set up a loose naming convention for minor names and texture names, but we managed to forget about variable names.

968
00:47:22,041 --> 00:47:22,261
Oops.

969
00:47:22,261 --> 00:47:27,726
You know, I think in the end it wasn't a huge deal for us because the visual effects team at Soccer Punch,

970
00:47:27,726 --> 00:47:30,748
we tend to work on specific areas of the game that don't overlap a ton.

971
00:47:30,748 --> 00:47:36,193
You know, so one of us will work on enemies, another will work on missions and environments, another will work on the hero.

972
00:47:36,193 --> 00:47:41,838
And, you know, I could see this being an issue if the team was larger, however, and we had a lot more cross work.

973
00:47:44,235 --> 00:47:46,015
Without shader editing and custom shaders,

974
00:47:46,015 --> 00:47:47,856
it's just simply not possible

975
00:47:47,856 --> 00:47:49,537
to prototype different techniques.

976
00:47:49,537 --> 00:47:51,077
We're limited to producing a shader

977
00:47:51,077 --> 00:47:52,258
using a third-party package

978
00:47:52,258 --> 00:47:53,818
and kind of showing it to engineers

979
00:47:53,818 --> 00:47:55,339
and having them implement it for us.

980
00:47:55,339 --> 00:47:56,139
The turnaround is,

981
00:47:56,139 --> 00:47:57,840
any of you who've done this know,

982
00:47:57,840 --> 00:47:58,860
it's pretty slow,

983
00:47:58,860 --> 00:48:00,881
and you lose a lot of details in that conversion.

984
00:48:00,881 --> 00:48:04,922
Using an expression-based system for creating effects

985
00:48:04,922 --> 00:48:05,923
isn't exactly artist-friendly.

986
00:48:05,923 --> 00:48:08,424
With the way our tools are set up,

987
00:48:08,424 --> 00:48:10,985
it does take some time for effects artists to ramp up.

988
00:48:11,778 --> 00:48:15,820
I think some may never hit their full potential due to the math constraints of our system.

989
00:48:15,820 --> 00:48:21,244
I think it's just all around harder to sort of find people who are able to sort of work well within our systems.

990
00:48:23,544 --> 00:48:25,665
So I suspect all effects artists going forward

991
00:48:25,665 --> 00:48:27,866
are gonna be running into issues with exposure

992
00:48:27,866 --> 00:48:29,366
in physically-based rendering engines.

993
00:48:29,366 --> 00:48:31,928
I think it's just something, as effects artists,

994
00:48:31,928 --> 00:48:33,268
we're gonna have to adapt to.

995
00:48:33,268 --> 00:48:35,429
So if anyone has any great suggestions in this area,

996
00:48:35,429 --> 00:48:36,830
I'd love to hear them, just email me.

997
00:48:36,830 --> 00:48:40,051
Maybe someone already has a talk planned

998
00:48:40,051 --> 00:48:42,432
or kind of a paper they're writing about this,

999
00:48:42,432 --> 00:48:43,232
but I'd love to know more about it.

1000
00:48:43,232 --> 00:48:46,614
So when I started pre-production on Second Son,

1001
00:48:46,614 --> 00:48:49,435
I really had no idea where we were gonna end up.

1002
00:48:50,432 --> 00:48:54,694
I didn't have any idea how we were going to hit the high visual bar the art direction team set for us.

1003
00:48:54,694 --> 00:48:58,496
And I didn't know how we were going to achieve the crazy designs the design team came up with.

1004
00:48:58,496 --> 00:48:59,976
Our designers are kind of zany.

1005
00:48:59,976 --> 00:49:06,239
So the biggest goal I had for the project was that I wanted to create something that I just hadn't seen before.

1006
00:49:06,239 --> 00:49:12,601
On a personal level, what this meant for me was that I need to focus less on how I'd solved problems in the past

1007
00:49:12,601 --> 00:49:14,302
and focus more on never saying no.

1008
00:49:15,226 --> 00:49:16,647
It's one of my big things, just never say no,

1009
00:49:16,647 --> 00:49:18,667
just say yeah, and then figure it out.

1010
00:49:18,667 --> 00:49:20,968
The idea was that I need to take on stuff

1011
00:49:20,968 --> 00:49:22,889
that seemed impossible at the outset,

1012
00:49:22,889 --> 00:49:24,350
because it would let me get further

1013
00:49:24,350 --> 00:49:26,371
than if I shot something down early.

1014
00:49:26,371 --> 00:49:28,392
My motto was, if you know how to do it,

1015
00:49:28,392 --> 00:49:30,653
that means people have already seen it.

1016
00:49:30,653 --> 00:49:33,134
And I think that's pretty valid for what we do as artists.

1017
00:49:33,134 --> 00:49:35,375
Another way I learned to tackle problems in a new way

1018
00:49:35,375 --> 00:49:38,116
was to sort of start with the idea of first principles.

1019
00:49:38,116 --> 00:49:40,217
The idea behind this is that you assume nothing

1020
00:49:40,217 --> 00:49:42,318
and you start proving out everything.

1021
00:49:43,483 --> 00:49:46,604
You want to make sure that you don't make any assumptions

1022
00:49:46,604 --> 00:49:50,805
about your particle counts, how you can spawn lights, how you can spawn decals,

1023
00:49:50,805 --> 00:49:53,305
because these assumptions artificially constrain your options.

1024
00:49:53,305 --> 00:49:56,446
They artificially constrain where you're going to end up.

1025
00:49:56,446 --> 00:49:58,407
The only thing you need to start by doing is asking,

1026
00:49:58,407 --> 00:50:01,628
what do we need to communicate to the player right here, right now?

1027
00:50:01,628 --> 00:50:04,368
It's really the first step and one of the most important steps.

1028
00:50:05,155 --> 00:50:09,076
I think it's really hard to toss out all your old assumptions and start fresh.

1029
00:50:09,076 --> 00:50:12,117
I know I wasn't successful at it that much, well sometimes.

1030
00:50:12,117 --> 00:50:14,377
But it's totally worth it when it works.

1031
00:50:14,377 --> 00:50:18,298
Because when it does, you can do silly things like this.

1032
00:50:18,298 --> 00:50:20,999
Here I've made a particle system full of small fish models.

1033
00:50:20,999 --> 00:50:25,300
And these fish swim away from the hero using only simple expressions.

1034
00:50:25,300 --> 00:50:29,201
I showed this demo to one of our engineers, and he called them smarticles.

1035
00:50:31,243 --> 00:50:33,385
I think it's a good example of the kind of things

1036
00:50:33,385 --> 00:50:36,387
you can accomplish with a flexible

1037
00:50:36,387 --> 00:50:38,089
and powerful effects system.

1038
00:50:38,089 --> 00:50:39,990
It wasn't long ago people used AI systems

1039
00:50:39,990 --> 00:50:50,898
to control this sort of behavior.

1040
00:50:50,898 --> 00:50:55,001
And lack of audio again, cool.

1041
00:50:55,001 --> 00:50:55,682
Oh.

1042
00:50:55,682 --> 00:50:59,105
That wasn't the one I wanted.

1043
00:50:59,105 --> 00:50:59,245
Sorry.

1044
00:51:20,502 --> 00:51:21,822
So any questions, just email me.

1045
00:51:21,822 --> 00:51:23,603
If you're interested in finding out more

1046
00:51:23,603 --> 00:51:25,704
about the crazy people I mentioned at Sucker Punch,

1047
00:51:25,704 --> 00:51:28,425
just visit our website or email one of our administrators,

1048
00:51:28,425 --> 00:51:29,185
Sonya Jackson.

1049
00:51:29,185 --> 00:51:31,346
We're always looking for people to come hang out with us,

1050
00:51:31,346 --> 00:51:32,786
come visit us, we love visitors.

1051
00:51:32,786 --> 00:51:35,067
Don't forget to see the partner talk to this one

1052
00:51:35,067 --> 00:51:36,488
by Bill Rockenbeck at Friday at 10 a.m.

1053
00:51:36,488 --> 00:51:39,008
Bill's gonna go into greater detail, as I said,

1054
00:51:39,008 --> 00:51:40,929
about the engine side of the particle system,

1055
00:51:40,929 --> 00:51:42,270
so you'll wanna see that if you're interested

1056
00:51:42,270 --> 00:51:43,810
in the technological side.

1057
00:51:43,810 --> 00:51:45,011
Thanks for coming, everyone, and I will have

1058
00:51:45,011 --> 00:51:47,352
a little bit of time in the wrap-up room,

1059
00:51:47,352 --> 00:51:49,012
which I believe is next door after this.

